void sub_1000A32E4(int a1, const void *a2, CLLocationDegrees a3, CLLocationDegrees a4, double a5, const void *a6)
{
  const void *v11;
  const void *v12;
  CFMutableArrayRef Mutable;
  __CFArray *v14;
  CFArrayRef v15;
  CFArrayRef v16;
  CFIndex v17;
  CFDictionaryRef v18;
  CFDictionaryRef ValueAtIndex;
  CFDictionaryRef v20;
  const void *Value;
  CFMutableDictionaryRef MutableCopy;
  CFDictionaryRef v23;
  id v24;
  CLLocationCoordinate2D v25;
  id v26;
  const void *v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  id v31;
  CLLocationCoordinate2D v32;
  id v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  void *v42;
  double v43;
  CLLocationDegrees v44;
  CLLocationDegrees valuePtr;
  uint64_t vars8;

  if (a2 && a6)
  {
    v11 = sub_10001E404((uint64_t)a2, @"BSSID");
    if (v11)
    {
      v12 = v11;
      Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (!Mutable) {
        return;
      }
      v14 = Mutable;
      v15 = (const __CFArray *)sub_10001E404((uint64_t)a2, @"networkKnownBSSListKey");
      if (!v15) {
        goto LABEL_28;
      }
      v16 = v15;
      if (CFArrayGetCount(v15) < 1) {
        goto LABEL_28;
      }
      v17 = 0;
      v18 = 0;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, v17);
        if (ValueAtIndex)
        {
          v20 = ValueAtIndex;
          Value = CFDictionaryGetValue(ValueAtIndex, @"BSSID");
          if (Value)
          {
            if (CFEqual(Value, v12)) {
              v18 = v20;
            }
            else {
              CFArrayAppendValue(v14, v20);
            }
          }
        }
        ++v17;
      }
      while (v17 < CFArrayGetCount(v16));
      if (!v18) {
        goto LABEL_28;
      }
      MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v18);
      if (!MutableCopy) {
        goto LABEL_28;
      }
      v23 = MutableCopy;
      v24 = objc_alloc((Class)CLLocation);
      v25 = CLLocationCoordinate2DMake(a3, a4);
      v26 = [v24 initWithCoordinate:a6 altitude:v25.latitude horizontalAccuracy:v25.longitude verticalAccuracy:0.0 timestamp:a5];
      v27 = CFDictionaryGetValue(v23, @"networkLocnTimestamp");
      if (+[WiFiLocationManager isLocationValid:v26 uptoSeconds:60.0 requiredAccuracy:1.79769313e308])
      {
        if (+[WiFiLocationManager isLocationValid:v26 uptoSeconds:1 isHighAccuracy:60.0]|| !v27)
        {
          goto LABEL_24;
        }
        valuePtr = 0.0;
        v28 = (const __CFNumber *)CFDictionaryGetValue(v23, @"networkLocnLat");
        CFNumberGetValue(v28, kCFNumberDoubleType, &valuePtr);
        v44 = 0.0;
        v29 = (const __CFNumber *)CFDictionaryGetValue(v23, @"networkLocnLong");
        CFNumberGetValue(v29, kCFNumberDoubleType, &v44);
        v43 = 0.0;
        v30 = (const __CFNumber *)CFDictionaryGetValue(v23, @"networkLocnAccuracy");
        CFNumberGetValue(v30, kCFNumberDoubleType, &v43);
        v31 = objc_alloc((Class)CLLocation);
        v32 = CLLocationCoordinate2DMake(valuePtr, v44);
        v33 = [v31 initWithCoordinate:v27 altitude:v32.latitude horizontalAccuracy:v32.longitude verticalAccuracy:0.0 timestamp:v43];
        [v33 horizontalAccuracy];
        v35 = v34;
        [v26 horizontalAccuracy];
        if (v35 <= v36)
        {
          [v33 distanceFromLocation:v26];
          v38 = v37;
          [v33 horizontalAccuracy];
          v40 = v38 - v39;
          [v26 horizontalAccuracy];
          if (v40 - v41 > 0.0)
          {

LABEL_24:
            CFDictionarySetValue(v23, @"networkLocnLat", +[NSNumber numberWithDouble:a3]);
            CFDictionarySetValue(v23, @"networkLocnLong", +[NSNumber numberWithDouble:a4]);
            CFDictionarySetValue(v23, @"networkLocnAccuracy", +[NSNumber numberWithDouble:a5]);
            CFDictionarySetValue(v23, @"networkLocnTimestamp", a6);
            CFArrayAppendValue(v14, v23);
            sub_10001C6A4((uint64_t)a2, @"networkKnownBSSListKey", v14);
LABEL_27:
            CFRelease(v23);
LABEL_28:
            CFRelease(v14);
            return;
          }
        }
      }
      goto LABEL_27;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: failed to get BSSID from %@", "WiFiManagerUpdateBSSLocation", sub_10001A43C(a2) message];
    }
  }
}

id *sub_1000A36E4(id *a1)
{
  if (a1)
  {
    if ([a1[212] isAuthorized]) {
      a1 = (id *)[objc_msgSend(objc_msgSend(a1[212], "latestLocation"), "copy") copy];
    }
    else {
      a1 = 0;
    }
  }
  return a1;
}

BOOL sub_1000A3740(uint64_t a1, uint64_t a2)
{
  BOOL v5 = 0;
  if (a1 && a2)
  {
    if ([*(id *)(a1 + 1696) isAuthorized]) {
      BOOL v5 = +[WiFiLocationManager isLocationValid:a2 uptoSeconds:0 isHighAccuracy:3600.0] != 0;
    }
    else {
      BOOL v5 = 0;
    }
  }
  return v5;
}

id sub_1000A37C4(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL" args:@"WiFiManagerCopyGeoTagsForNetwork"];
    }
    goto LABEL_9;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: network is NULL" arguments:("WiFiManagerCopyGeoTagsForNetwork",)];
    }
LABEL_9:
    id v5 = 0;
    goto LABEL_4;
  }
  id v5 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyGeoTagsForNetworkAtLocation:a2 location:[*(id *)(a1 + 1696) latestLocation]];
LABEL_4:
  return v5;
}

void sub_1000A38B4(uint64_t a1, const void *a2, double a3, double a4)
{
  if (a1)
  {
    if (a2)
    {
      if (a3 < -90.0 || a3 > 90.0)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Invalid latitude value" arguments:@"WiFiManagerSetGeoTagForNetwork"];
        }
      }
      else
      {
        if (a4 >= -180.0 && a4 <= 180.0)
        {
          id v9 = [objc_alloc((Class)CLLocation) initWithLatitude:a3 longitude:a4];
          sub_100053AE8(a2, v9);

          goto LABEL_8;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Invalid longitude value" arguments:@"WiFiManagerSetGeoTagForNetwork"];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: network is NULL" args:("WiFiManagerSetGeoTagForNetwork", NULL)];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL" args:("WiFiManagerSetGeoTagForNetwork")];
    }
  }
LABEL_8:
}

id sub_1000A3A58(uint64_t a1, int a2, double a3, double a4)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL" args:@"WiFiManagerCopyNetworksAtLocation"];
    }
    goto LABEL_17;
  }
  if (a3 < -90.0 || a3 > 90.0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Invalid latitude value" arguments:@"WiFiManagerCopyNetworksAtLocation"];
    }
    goto LABEL_17;
  }
  if (a4 < -180.0 || a4 > 180.0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Invalid longitude value" arguments:("WiFiManagerCopyNetworksAtLocation", nil)];
    }
LABEL_17:
    id v12 = 0;
    goto LABEL_10;
  }
  id v9 = [objc_alloc((Class)CLLocation) initWithLatitude:a3 longitude:a4];
  id v10 = +[WiFiAnalyticsManager sharedWiFiAnalyticsManager];
  if (a2) {
    id v11 = [v10 copyScoreSortedNetworksAvailableAtLocation:v9];
  }
  else {
    id v11 = [v10 copyNetworksAvailableAtLocation:v9];
  }
  id v12 = v11;

LABEL_10:
  return v12;
}

id sub_1000A3BDC(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL", "WiFiManagerCopyScoreForNetwork"];
    }
    goto LABEL_9;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: network is NULL" : @"WiFiManagerCopyScoreForNetwork"];
    }
LABEL_9:
    id v5 = 0;
    goto LABEL_4;
  }
  id v5 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyPreferenceScoreDictionaryForNetwork:a2];
LABEL_4:
  return v5;
}

id sub_1000A3CB8(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, "%s: manager is NULL", "WiFiManagerCopyLeechedLocation"];
    }
    goto LABEL_9;
  }
  id v3 = [[objc_msgSend(*(id *)(a1 + 1696), "latestLocation") copy];
  if (!v3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: location is NULL", "WiFiManagerCopyLeechedLocation"];
    }
LABEL_9:
    id v12 = 0;
    goto LABEL_4;
  }
  v4 = v3;
  id v5 = objc_alloc((Class)NSDictionary);
  [v4 coordinate];
  v6 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  [v4 coordinate];
  v8 = +[NSNumber numberWithDouble:v7];
  [v4 horizontalAccuracy];
  id v10 = +[NSNumber numberWithInt:(int)v9];
  [objc_msgSend(v4, "timestamp") timeIntervalSinceNow];
  id v12 = [v5 initWithObjectsAndKeys:v6, @"latitude", v8, @"longitude", v10, @"accuracy", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)v11), @"staleness", 0];

LABEL_4:
  return v12;
}

void sub_1000A3E5C(uint64_t a1, double a2)
{
  if (a1)
  {
    if (a2 > 0.0) {
      return;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: invalid geoTagsUnusedRetentionPeriodInSeconds %f", "WiFiManagerRemoveUnusedNetworkGeotags", *(void *)&a2)];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL", @"WiFiManagerRemoveUnusedNetworkGeotags", v4];
    }
  }
}

void sub_1000A3F28(uint64_t a1, uint64_t a2, double a3)
{
  if (a1)
  {
    if (a3 <= 0.0)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: invalid geoTagsUnusedRetentionPeriodInSeconds %f", "WiFiManagerScheduleUnusedNetworkGeotagsRemovalTest", *(void *)&a3)];
      }
    }
    else
    {
      if (a2) {
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, "%s: invalid intervalMinutes %lu", "WiFiManagerScheduleUnusedNetworkGeotagsRemovalTest", 0];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL" args:v5];
    }
  }
}

void sub_1000A4028(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL", @"WiFiManagerUnScheduleUnusedNetworkGeotagsRemovalTest"];
    }
  }
}

__CFDictionary *sub_1000A409C(uint64_t a1)
{
  if (!*(void *)(a1 + 1728)) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s:Failed to allocate dictionary for SoftError Counters" :@"WiFiManagerCopySoftErrorCounters"];
    }
    return 0;
  }
  id v3 = Mutable;
  uint64_t v4 = (char *)sub_10002F928(*(void **)(a1 + 1728));
  if (!v4)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: errorCountersRef recived from softErrorManager is NULL! ", "WiFiManagerCopySoftErrorCounters")];
    }
    goto LABEL_17;
  }
  uint64_t v5 = v4;
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v4);
  if (!v6) {
    goto LABEL_15;
  }
  CFNumberRef v7 = v6;
  CFDictionaryAddValue(v3, @"WiFiToggleErrorCounter", v6);
  CFRelease(v7);
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 28);
  if (!v8) {
    goto LABEL_15;
  }
  CFNumberRef v9 = v8;
  CFDictionaryAddValue(v3, @"WiFiToggleErrorUserConfirmCounter", v8);
  CFRelease(v9);
  CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 4);
  if (!v10) {
    goto LABEL_15;
  }
  CFNumberRef v11 = v10;
  CFDictionaryAddValue(v3, @"WiFiNoNetworksFoundErrorCounter", v10);
  CFRelease(v11);
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 32);
  if (!v12) {
    goto LABEL_15;
  }
  CFNumberRef v13 = v12;
  CFDictionaryAddValue(v3, @"WiFiNoNetworksFoundErrorUserConfirmCounter", v12);
  CFRelease(v13);
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 8);
  if (!v14) {
    goto LABEL_15;
  }
  CFNumberRef v15 = v14;
  CFDictionaryAddValue(v3, @"WiFiSlowAutoJoinErrorCounter", v14);
  CFRelease(v15);
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 36);
  if (!v16) {
    goto LABEL_15;
  }
  CFNumberRef v17 = v16;
  CFDictionaryAddValue(v3, @"WiFiSlowAutoJoinErrorUserConfirmCounter", v16);
  CFRelease(v17);
  CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 12);
  if (!v18) {
    goto LABEL_15;
  }
  CFNumberRef v19 = v18;
  CFDictionaryAddValue(v3, @"WiFiTxDataStallErrorCounter", v18);
  CFRelease(v19);
  CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 40);
  if (!v20) {
    goto LABEL_15;
  }
  CFNumberRef v21 = v20;
  CFDictionaryAddValue(v3, @"WiFiTxDataStallErrorUserConfirmCounter", v20);
  CFRelease(v21);
  CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 16);
  if (!v22
    || (CFNumberRef v23 = v22,
        CFDictionaryAddValue(v3, @"WiFiRxDataStallErrorCounter", v22),
        CFRelease(v23),
        (CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 44)) == 0))
  {
LABEL_15:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: numRef create failed!", "WiFiManagerCopySoftErrorCounters")];
    }
LABEL_17:
    return v3;
  }
  CFNumberRef v25 = v24;
  CFDictionaryAddValue(v3, @"WiFiRxDataStallErrorUserConfirmCounter", v24);
  CFRelease(v25);
  return v3;
}

id sub_1000A43D4(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: manager is NULL!", "WiFiManagerGetSoftErrorCounters"];
    }
    goto LABEL_10;
  }
  uint64_t v1 = *(void **)(a1 + 1728);
  if (!v1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: softError manager is NULL!" args:("WiFiManagerGetSoftErrorCounters")];
    }
LABEL_10:
    return 0;
  }

  return sub_10002F928(v1);
}

uint64_t sub_1000A4494(uint64_t a1, _DWORD *a2, void *a3)
{
  if (a1)
  {
    if (a2 && a3)
    {
      uint64_t result = 0;
      *a2 = *(_DWORD *)(a1 + 1408);
      *a3 = *(void *)(a1 + 1416);
      return result;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Params Null", "WiFiManagerGetMotionState")];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: manager is NULL", "WiFiManagerGetMotionState")];
    }
  }
  return 4294963396;
}

_WORD *sub_1000A4550(const __CFArray *a1)
{
  if (a1)
  {
    v2 = sub_1000A2050(a1);
    uint64_t v3 = *((void *)a1 + 207);
    if (v3)
    {
      CFDictionaryRef v4 = sub_10000E5B8(v3);
      uint64_t v5 = sub_100019658((int)kCFAllocatorDefault, v4);
      if (v2 && CFEqual(v2, v5)) {
        sub_1000198FC((uint64_t)v5, (uint64_t)v2);
      }
      if (v4) {
        CFRelease(v4);
      }
      if (!v2) {
        return v5;
      }
LABEL_18:
      CFRelease(v2);
      return v5;
    }
    if (v2 && sub_1000D2230((uint64_t)v2))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: session based network is an accessory = '%@'", "WiFiManagerCopyCurrentSessionBasedNetwork", v2 message];
      }
      CFRetain(v2);
      uint64_t v5 = v2;
      goto LABEL_18;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: session based network is NULL", "WiFiManagerCopyCurrentSessionBasedNetwork")];
    }
    uint64_t v5 = 0;
    if (v2) {
      goto LABEL_18;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: manager is NULL", "WiFiManagerCopyCurrentSessionBasedNetwork"];
    }
    return 0;
  }
  return v5;
}

uint64_t sub_1000A46D8(uint64_t a1)
{
  return *(void *)(a1 + 200);
}

void sub_1000A46E0(uint64_t a1)
{
  if (a1)
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000046;
    context[2] = 0;
    context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: wifiManagerRef is NULL!" args:("WiFiManagerSubmitWoWBlacklistingHistory")];
    }
  }
}

BOOL sub_1000A4794(const __CFArray *a1)
{
  uint64_t v1 = sub_1000A2050(a1);
  v2 = v1;
  if (v1) {
    CFRelease(v1);
  }
  return v2 != 0;
}

CFTypeRef sub_1000A47CC(uint64_t a1, const void *a2, const void *a3)
{
  CFStringRef v4 = (const __CFString *)sub_1000A48A4(a1, a2, a3);
  if (!v4) {
    return 0;
  }
  CFStringRef v5 = v4;
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainSetup, v4, kSCEntNetIPv4);
  if (!NetworkServiceEntity)
  {
    CFTypeRef v11 = 0;
    CFDictionaryRef v9 = (const __CFDictionary *)v5;
LABEL_7:
    CFRelease(v9);
    return v11;
  }
  CFStringRef v7 = NetworkServiceEntity;
  CFDictionaryRef v8 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 72), NetworkServiceEntity);
  CFDictionaryRef v9 = v8;
  if (v8 && (Value = CFDictionaryGetValue(v8, kSCPropNetIPv4ConfigMethod)) != 0) {
    CFTypeRef v11 = CFRetain(Value);
  }
  else {
    CFTypeRef v11 = 0;
  }
  CFRelease(v5);
  CFRelease(v7);
  if (v9) {
    goto LABEL_7;
  }
  return v11;
}

CFTypeRef sub_1000A48A4(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 208);
  if (v5)
  {
    CFNumberRef v6 = sub_10001A43C(a3);
    Value = CFDictionaryGetValue(v5, v6);
  }
  else
  {
    Value = 0;
  }
  CFArrayRef v8 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(a1 + 1064));
  if (!v8) {
    return 0;
  }
  CFArrayRef v9 = v8;
  SCPreferencesSynchronize(*(SCPreferencesRef *)(a1 + 1064));
  if (CFArrayGetCount(v9) < 1) {
    goto LABEL_40;
  }
  CFIndex v10 = 0;
  CFTypeRef v11 = 0;
  do
  {
    ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v9, v10);
    if (ValueAtIndex)
    {
      CFNumberRef v13 = ValueAtIndex;
      CFStringRef Name = SCNetworkSetGetName(ValueAtIndex);
      CFStringRef SetID = SCNetworkSetGetSetID(v13);
      if (SetID && Value && CFEqual(SetID, Value)) {
        goto LABEL_16;
      }
      if (Name && CFEqual(Name, @"Automatic")) {
        CFTypeRef v11 = v13;
      }
    }
    ++v10;
  }
  while (v10 < CFArrayGetCount(v9));
  CFNumberRef v13 = v11;
  if (!v11) {
    goto LABEL_40;
  }
LABEL_16:
  CFArrayRef v16 = SCNetworkSetCopyServices(v13);
  if (v16)
  {
    CFArrayRef v17 = v16;
    CFArrayRef ServiceOrder = SCNetworkSetGetServiceOrder(v13);
    if (!ServiceOrder) {
      goto LABEL_38;
    }
    CFArrayRef v19 = ServiceOrder;
    if (CFArrayGetCount(ServiceOrder) < 1) {
      goto LABEL_38;
    }
    CFIndex v20 = 0;
    CFStringRef v21 = 0;
    CFArrayRef v33 = v9;
    do
    {
      if (CFArrayGetValueAtIndex(v19, v20) && CFArrayGetCount(v17) >= 1)
      {
        CFIndex v22 = 0;
        int Enabled = 0;
        do
        {
          CFNumberRef v24 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v17, v22);
          if (v24)
          {
            CFNumberRef v25 = v24;
            CFStringRef ServiceID = SCNetworkServiceGetServiceID(v24);
            if (ServiceID)
            {
              CFStringRef v27 = ServiceID;
              Interface = SCNetworkServiceGetInterface(v25);
              if (Interface)
              {
                do
                {
                  v29 = Interface;
                  Interface = SCNetworkInterfaceGetInterface(Interface);
                }
                while (Interface);
                BSDCFStringRef Name = SCNetworkInterfaceGetBSDName(v29);
                if (BSDName)
                {
                  if (CFEqual(BSDName, a2))
                  {
                    int Enabled = SCNetworkServiceGetEnabled(v25);
                    if (Enabled) {
                      CFStringRef v21 = v27;
                    }
                  }
                }
              }
            }
          }
          ++v22;
        }
        while (CFArrayGetCount(v17) > v22);
      }
      else
      {
        int Enabled = 0;
      }
      ++v20;
      CFArrayRef v9 = v33;
    }
    while (CFArrayGetCount(v19) > v20 && !Enabled);
    if (v21) {
      CFTypeRef v31 = CFRetain(v21);
    }
    else {
LABEL_38:
    }
      CFTypeRef v31 = 0;
    CFRelease(v17);
  }
  else
  {
LABEL_40:
    CFTypeRef v31 = 0;
  }
  CFRelease(v9);
  return v31;
}

CFTypeRef sub_1000A4AF4(uint64_t a1, const void *a2, const void *a3)
{
  CFStringRef v4 = (const __CFString *)sub_1000A48A4(a1, a2, a3);
  if (!v4) {
    return 0;
  }
  CFStringRef v5 = v4;
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainSetup, v4, kSCEntNetIPv6);
  if (!NetworkServiceEntity)
  {
    CFTypeRef v11 = 0;
    CFDictionaryRef v9 = (const __CFDictionary *)v5;
LABEL_7:
    CFRelease(v9);
    return v11;
  }
  CFStringRef v7 = NetworkServiceEntity;
  CFDictionaryRef v8 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 72), NetworkServiceEntity);
  CFDictionaryRef v9 = v8;
  if (v8 && (Value = CFDictionaryGetValue(v8, kSCPropNetIPv6ConfigMethod)) != 0) {
    CFTypeRef v11 = CFRetain(Value);
  }
  else {
    CFTypeRef v11 = 0;
  }
  CFRelease(v5);
  CFRelease(v7);
  if (v9) {
    goto LABEL_7;
  }
  return v11;
}

uint64_t sub_1000A4BCC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 1064);
  }
  return result;
}

void sub_1000A4BD8(uint64_t a1)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 208);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s", "WiFiManagerRemoveOrphanedSCNetworkSets"];
  }
  CFArrayRef v5 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(a1 + 1064));
  CFArrayRef v6 = v5;
  if (!v5 || !CFArrayGetCount(v5))
  {
    v39 = Mutable;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: invalid scSets" : @"WiFiManagerRemoveOrphanedSCNetworkSets"];
    }
    CFMutableDictionaryRef Mutable = v39;
    if (v6) {
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  CFStringRef v7 = SCNetworkSetCopyCurrent(*(SCPreferencesRef *)(a1 + 1064));
  cf = v7;
  if (v7) {
    CFStringRef Name = SCNetworkSetGetName(v7);
  }
  else {
    CFStringRef Name = 0;
  }
  if (CFArrayGetCount(v6) < 1)
  {
    CFIndex v10 = 0;
    goto LABEL_56;
  }
  uint64_t v43 = a1;
  v46 = Mutable;
  CFIndex v9 = 0;
  int v45 = 0;
  CFIndex v10 = 0;
  do
  {
    ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v6, v9);
    if (!ValueAtIndex)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: invalid set", "WiFiManagerRemoveOrphanedSCNetworkSets", v41];
      }
      goto LABEL_21;
    }
    CFNumberRef v12 = ValueAtIndex;
    CFStringRef v13 = SCNetworkSetGetName(ValueAtIndex);
    if (v13)
    {
      if (CFEqual(@"Automatic", v13))
      {
        sub_1000A5238(Mutable, v12);
        int v45 = 1;
        goto LABEL_28;
      }
      if (Name && CFEqual(Name, v13))
      {
        sub_1000A5238(Mutable, v12);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: set <%@> currently in use, skip", "WiFiManagerRemoveOrphanedSCNetworkSets", v13 message];
        }
LABEL_21:
        goto LABEL_28;
      }
    }
    CFStringRef SetID = SCNetworkSetGetSetID(v12);
    if (SetID)
    {
      CFStringRef v15 = SetID;
      if (v2 && CFDictionaryContainsValue(v2, SetID))
      {
        sub_1000A5238(Mutable, v12);
      }
      else
      {
        if (!v10) {
          CFIndex v10 = CFArrayCreateMutable(kCFAllocatorDefault, 1, &kCFTypeArrayCallBacks);
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: adding to purge list %@<%@>", "WiFiManagerRemoveOrphanedSCNetworkSets", v15, v13 message];
        }
        CFArrayAppendValue(v10, v12);
      }
    }
LABEL_28:
    ++v9;
  }
  while (CFArrayGetCount(v6) > v9);
  if (!v45) {
    goto LABEL_56;
  }
  CFNumberRef v18 = *(const __SCPreferences **)(v43 + 1064);
  if (!v18)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null prefs ref", "__WiFiManagerRemoveSCNetworkSets", v41];
    }
    goto LABEL_74;
  }
  if (!v10 || (CFIndex Count = CFArrayGetCount(v10), Count < 1))
  {
LABEL_54:
    v29 = *(NSObject **)(v43 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000BCC60;
    block[3] = &unk_10023EAF8;
    block[4] = v43;
    dispatch_async(v29, block);
    goto LABEL_56;
  }
  CFIndex v20 = Count;
  CFIndex v21 = 0;
  while (2)
  {
    CFIndex v22 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v10, v21);
    if (!v22)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: invalid set", "__WiFiManagerRemoveSCNetworkSets", v41);
      }
LABEL_53:
      if (v20 == ++v21) {
        goto LABEL_54;
      }
      continue;
    }
    break;
  }
  CFNumberRef v23 = v22;
  if (SCNetworkSetGetName(v22))
  {
    CFStringRef v24 = SCNetworkSetGetName(v23);
    if (CFEqual(v24, @"Automatic"))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: skipping automatic set from removal! automatic/custom network set ID: %@", "__WiFiManagerRemoveSCNetworkSets", SCNetworkSetGetSetID(v23) message];
      }
      goto LABEL_53;
    }
  }
  BOOL v26 = sub_1000BCA84(v23, Mutable);
  unsigned int v27 = SCNetworkSetRemove(v23);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: set removal status for %@: %d", "__WiFiManagerRemoveSCNetworkSets", SCNetworkSetGetSetID(v23), v27 message];
  }
  if (!(v26 | v27))
  {
    CFMutableDictionaryRef Mutable = v46;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no change", "__WiFiManagerRemoveSCNetworkSets", v41);
    }
    goto LABEL_53;
  }
  CFMutableDictionaryRef Mutable = v46;
  if (!SCPreferencesCommitChanges(v18))
  {
    int v30 = SCError();
    CFTypeRef v31 = SCErrorString(v30);
    CFArrayRef v33 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_74;
    }
    v34 = "SCError Unavailable";
    if (v31) {
      v34 = v31;
    }
    v42 = v34;
    v35 = "%s: failed to commit changes %s";
    goto LABEL_73;
  }
  if (SCPreferencesApplyChanges(v18))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: processed set(%@) and its associated services", "__WiFiManagerRemoveSCNetworkSets", SCNetworkSetGetSetID(v23) message];
    }
    goto LABEL_53;
  }
  int v36 = SCError();
  v37 = SCErrorString(v36);
  CFArrayRef v33 = (void *)qword_10027DD68;
  if (!qword_10027DD68) {
    goto LABEL_74;
  }
  v38 = "SCError Unavailable";
  if (v37) {
    v38 = v37;
  }
  v42 = v38;
  v35 = "%s: failed to apply changes %s";
LABEL_73:
  [v33 WFLog:4 message:v35 @"__WiFiManagerRemoveSCNetworkSets" v42];
LABEL_74:
  CFMutableDictionaryRef Mutable = v46;
LABEL_56:
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v6) {
LABEL_61:
  }
    CFRelease(v6);
LABEL_62:
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1000A5238(__CFArray *a1, const __SCNetworkSet *a2)
{
  if (a1)
  {
    if (a2)
    {
      id v7 = (id)sub_10000D990((uint64_t)"__WiFiManagerHelperAddNetworkServicesFromSetToList");
      CFArrayRef v4 = SCNetworkSetCopyServices(a2);
      if (v4)
      {
        CFArrayRef v5 = v4;
        if (CFArrayGetCount(v4))
        {
          v9.length = CFArrayGetCount(v5);
          v9.location = 0;
          CFArrayAppendArray(a1, v5, v9);
        }

        CFRelease(v5);
      }
      else
      {
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: null set.", @"__WiFiManagerHelperAddNetworkServicesFromSetToList"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null list." args:("__WiFiManagerHelperAddNetworkServicesFromSetToList")];
    }
  }
}

void sub_1000A5378(void *a1)
{
  uint64_t v3 = (void *)a1[202];
  id v4 = (id)objc_opt_new();
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v5 = [v3 countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v21;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v21 != v7) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = *(void *)(*((void *)&v20 + 1) + 8 * i);
        [objc_msgSend(objc_msgSend(objc_msgSend(v3, "objectForKeyedSubscript:", v9), "objectForKeyedSubscript:", @"timestamp"), "timeIntervalSinceNow");
        if (v10 < -21600.0) {
          [v4 addObject:v9];
        }
      }
      id v6 = [v3 countByEnumeratingWithState:&v20 objects:v25 count:16];
    }
    while (v6);
  }
  if ([v4 count])
  {
    id v11 = [v3 mutableCopy];
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v12 = [v4 countByEnumeratingWithState:&v16 objects:v24 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v17;
      do
      {
        for (j = 0; j != v13; j = (char *)j + 1)
        {
          if (*(void *)v17 != v14) {
            objc_enumerationMutation(v4);
          }
          [v11 removeObjectForKey:*(void *)(*((void *)&v16 + 1) + 8 * (void)j)];
        }
        id v13 = [v4 countByEnumeratingWithState:&v16 objects:v24 count:16];
      }
      while (v13);
    }
    sub_100083E60(a1, @"SessionBasedNetworkList", v11, 0);
    sub_1000A55A0((uint64_t)a1, v11);
  }
}

void sub_1000A55A0(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    if (!cf || (id v4 = *(const void **)(a1 + 1616)) == 0 || !CFEqual(cf, v4))
    {
      id v5 = *(const void **)(a1 + 1616);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(a1 + 1616) = 0;
      }
      if (cf) {
        *(void *)(a1 + 1616) = CFRetain(cf);
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager ref is null" :@"__WiFiManagerSetSessionBasedNetworkList"];
    }
  }
}

void sub_1000A5660(uint64_t a1)
{
  if (a1)
  {
    CFDictionaryRef v2 = *(void **)(a1 + 2192);
    if (v2)
    {
      if ([*(id *)(a1 + 2192) count])
      {
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        id v4 = [v2 countByEnumeratingWithState:&v33 objects:v38 count:16];
        if (!v4) {
          goto LABEL_34;
        }
        id v5 = v4;
        BOOL v26 = v3;
        uint64_t v27 = a1;
        v28 = 0;
        uint64_t v6 = *(void *)v34;
        do
        {
          for (i = 0; i != v5; i = (char *)i + 1)
          {
            if (*(void *)v34 != v6) {
              objc_enumerationMutation(v2);
            }
            uint64_t v8 = *(void *)(*((void *)&v33 + 1) + 8 * i);
            id v9 = [v2 objectForKey:v8];
            id v10 = [v9 objectForKey:@"type"];
            if (v10)
            {
              id v11 = v10;
              id v12 = [v9 objectForKey:@"notificationType"];
              if (v12)
              {
                id v13 = v12;
                id v14 = [v11 unsignedIntValue];
                id v15 = [v13 unsignedIntValue];
                id v16 = [v9 objectForKey:@"timestamp"];
                long long v17 = (_UNKNOWN **)[v9 objectForKey:@"count"];
                if (v16)
                {
                  if (!v17) {
                    long long v17 = &off_100262DE8;
                  }
                  if (+[WiFiUserNotificationManager canRepromptForNotificationType:blacklistType:atDate:count:](WiFiUserNotificationManager, "canRepromptForNotificationType:blacklistType:atDate:count:", v15, v14, v16, [v17 integerValue]))
                  {
                    [v16 timeIntervalSinceDate:[NSDate date]];
                    if (v18 > 2592000.0)
                    {
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: removing ssid: %@ timestamp: %@ notificationType: %d", "WiFiManagerRemoveOldUserBlackListEntries", v8, v16, v15 message];
                      }
                      id v20 = v28;
                      if (!v28) {
                        id v20 = objc_alloc_init((Class)NSMutableArray);
                      }
                      v28 = v20;
                      [v20 addObject:v8];
                    }
                  }
                }
              }
            }
          }
          id v5 = [v2 countByEnumeratingWithState:&v33 objects:v38 count:16];
        }
        while (v5);
        uint64_t v3 = v26;
        if (v28)
        {
          id v21 = [v2 mutableCopy];
          long long v29 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          id v22 = [v28 countByEnumeratingWithState:&v29 objects:v37 count:16];
          if (v22)
          {
            id v23 = v22;
            uint64_t v24 = *(void *)v30;
            do
            {
              for (j = 0; j != v23; j = (char *)j + 1)
              {
                if (*(void *)v30 != v24) {
                  objc_enumerationMutation(v28);
                }
                [v21 removeObjectForKey:*(void *)(*((void *)&v29 + 1) + 8 * (void)j)];
              }
              id v23 = [v28 countByEnumeratingWithState:&v29 objects:v37 count:16];
            }
            while (v23);
          }
          [+[NSUserDefaults standardUserDefaults] setObject:v21 forKey:@"UserNotificationBlacklist"];
          sub_1000A59D4(v27, v21);
          if (v21) {
            CFRelease(v21);
          }
          CFRelease(v28);
        }
        else
        {
LABEL_34:
        }
      }
    }
  }
}

void sub_1000A59D4(uint64_t a1, CFTypeRef cf)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager ref is null", @"__WiFiManagerSetUserNotificationBlacklist", v7];
    }
    goto LABEL_14;
  }
  id v4 = *(void **)(a1 + 2192);
  if (cf && v4)
  {
    if ([v4 isEqualToDictionary:cf]) {
      return;
    }
    id v5 = *(const void **)(a1 + 2192);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 2192) = 0;
    }
  }
  else if (!cf)
  {
    if (v4)
    {
      CFRelease(v4);
      id v4 = 0;
    }
    goto LABEL_12;
  }
  id v4 = (void *)CFRetain(cf);
LABEL_12:
  *(void *)(a1 + 2192) = v4;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: updating blacklist: %@", "__WiFiManagerSetUserNotificationBlacklist", cf message];
  }
LABEL_14:
}

void sub_1000A5AD8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    CFDictionaryRef v2 = &objc_retainAutoreleaseReturnValue_ptr;
    +[NSDate timeIntervalSinceReferenceDate];
    double v4 = v3;
    uint64_t v5 = (uint64_t)[(__SCPreferences *)sub_10000D934((void *)v1, @"Version") integerValue];
    uint64_t v6 = v5;
    uint64_t v86 = v1;
    if (v5 > 11)
    {
      if ((unint64_t)v5 > 0xD)
      {
LABEL_44:
        if (v6 <= 14)
        {
          v84 = (void *)v6;
          [v2[264] timeIntervalSinceReferenceDate];
          double v40 = v39;
          id v41 = [*(id *)(v1 + 1104) dictionaryRepresentation];
          long long v91 = 0u;
          long long v92 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          id v42 = [v41 allKeys];
          id v43 = [v42 countByEnumeratingWithState:&v91 objects:v96 count:16];
          if (v43)
          {
            id v44 = v43;
            uint64_t v45 = *(void *)v92;
            do
            {
              for (i = 0; i != v44; i = (char *)i + 1)
              {
                if (*(void *)v92 != v45) {
                  objc_enumerationMutation(v42);
                }
                uint64_t v47 = *(void *)(*((void *)&v91 + 1) + 8 * i);
                id v48 = [v41 objectForKeyedSubscript:v47];
                id v49 = [objc_alloc((Class)CWFNetworkProfile) initWithExternalForm:v48];
                if (v49)
                {
                  v50 = v49;
                  [*(id *)(v86 + 1104) setObject:0 forKey:v47];
                  [*(id *)(v86 + 1104) setObject:v48 forKey:[v50 identifier]];
                }
              }
              id v44 = [v42 countByEnumeratingWithState:&v91 objects:v96 count:16];
            }
            while (v44);
          }
          uint64_t v1 = v86;
          [*(id *)(v86 + 1104) synchronize];
          v52 = (void *)qword_10027DD68;
          CFDictionaryRef v2 = &objc_retainAutoreleaseReturnValue_ptr;
          if (qword_10027DD68)
          {
            +[NSDate timeIntervalSinceReferenceDate];
            [v52 WFLog:3 message:@"%s: Remove duplicate PNL entries took %fs", @"WiFiManagerMigratePNL", v53 - v40];
          }
          uint64_t v6 = (uint64_t)v84;
        }
        if (v6 <= 22)
        {
          [v2[264] timeIntervalSinceReferenceDate];
          double v55 = v54;
          id v56 = [*(id *)(v1 + 1104) dictionaryRepresentation];
          long long v87 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          id v57 = [v56 allKeys];
          id v58 = [v57 countByEnumeratingWithState:&v87 objects:v95 count:16];
          if (v58)
          {
            id v59 = v58;
            uint64_t v60 = *(void *)v88;
            do
            {
              for (j = 0; j != v59; j = (char *)j + 1)
              {
                if (*(void *)v88 != v60) {
                  objc_enumerationMutation(v57);
                }
                uint64_t v62 = *(void *)(*((void *)&v87 + 1) + 8 * (void)j);
                id v63 = [objc_alloc((Class)CWFNetworkProfile) initWithExternalForm:[v56 objectForKeyedSubscript:v62]];
                if (v63)
                {
                  v64 = (CFDictionaryRef *)sub_1000CFEE8(v63, 0);
                  if (v64)
                  {
                    v65 = v64;
                    v66 = sub_10001CECC(v64);
                    if (v66)
                    {
                      v67 = v66;
                      [*(id *)(v1 + 1104) setObject:0 forKey:v62];
                      v68 = *(void **)(v86 + 1104);
                      id v69 = [v67 externalForm];
                      v70 = v68;
                      uint64_t v1 = v86;
                      [v70 setObject:v69 forKey:v62];
                    }
                    CFRelease(v65);
                  }
                }
              }
              id v59 = [v57 countByEnumeratingWithState:&v87 objects:v95 count:16];
            }
            while (v59);
          }
          [*(id *)(v1 + 1104) synchronize];
          v72 = (void *)qword_10027DD68;
          CFDictionaryRef v2 = &objc_retainAutoreleaseReturnValue_ptr;
          if (qword_10027DD68)
          {
            +[NSDate timeIntervalSinceReferenceDate];
            [v72 WFLog:3 message:@"%s: Migrate OS-specific attributes to CWFNetworkProfile took %fs", @"WiFiManagerMigratePNL", v73 - v55];
          }
        }
        v75 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          [v2[264] timeIntervalSinceReferenceDate];
          [v75 WFLog:3 message:@"%s: Entire PNL update took %fs", @"WiFiManagerMigratePNL", v76 - v4];
        }
        return;
      }
LABEL_22:
      [v2[264] timeIntervalSinceReferenceDate];
      double v22 = v21;
      if (sub_10000D934((void *)v1, @"isWiFiPNLMigrationComplete") == kCFBooleanTrue)
      {
        SCPreferencesSynchronize(*(SCPreferencesRef *)(v1 + 1080));
        CFArrayRef v24 = sub_10000D934((void *)v1, @"List of known networks");
        if (v24)
        {
          CFNumberRef v25 = sub_10005A4C4(v24);
          if (v25)
          {
            CFArrayRef v26 = v25;
            id v27 = +[NSMutableDictionary dictionary];
            if (CFArrayGetCount(v26) >= 1)
            {
              CFIndex v28 = 0;
              do
              {
                ValueAtIndex = (CFDictionaryRef *)CFArrayGetValueAtIndex(v26, v28);
                if (ValueAtIndex)
                {
                  long long v30 = sub_10001CECC(ValueAtIndex);
                  if (v30)
                  {
                    long long v31 = v30;
                    if (![v30 addedAt] && !objc_msgSend(v31, "lastJoinedByUserAt"))
                    {
                      long long v32 = (NSDate *)[v31 updatedAt];
                      if (!v32)
                      {
                        long long v32 = (NSDate *)[v31 lastJoinedBySystemAt];
                        if (!v32) {
                          long long v32 = +[NSDate date];
                        }
                      }
                      [v31 setAddedAt:v32];
                    }
                    id v33 = [v31 identifier];
                    id v34 = [v31 externalForm];
                    if (v33 && v34) {
                      [v27 setObject:v34 forKeyedSubscript:v33];
                    }
                  }
                }
                ++v28;
              }
              while (CFArrayGetCount(v26) > v28);
            }
            [*(id *)(v1 + 1104) addEntriesFromDictionary:v27];
            [*(id *)(v1 + 1104) synchronize];
            CFRelease(v26);
            CFDictionaryRef v2 = &objc_retainAutoreleaseReturnValue_ptr;
          }
        }
      }
      long long v35 = +[NSString stringWithFormat:@"/Library/Preferences/SystemConfiguration/%@", @"com.apple.wifi-networks.plist"];
      [+[NSFileManager defaultManager] copyItemAtPath:v35 toPath:[(NSString *)v35 stringByAppendingPathExtension:@"backup"] error:0];
      sub_100083E60((void *)v1, @"List of known networks", 0, 0);
      v37 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        [v2[264] timeIntervalSinceReferenceDate];
        [v37 WFLog:3 message:@"%s: PNL migration to unified KVS took %fs", @"WiFiManagerMigratePNL", v38 - v22];
      }
      goto LABEL_44;
    }
    +[NSDate timeIntervalSinceReferenceDate];
    double v8 = v7;
    id v9 = *(const __SCPreferences **)(v1 + 1072);
    id v10 = *(const __SCPreferences **)(v1 + 1080);
    id v11 = (void *)sub_10000D990((uint64_t)"__WiFiManagerMigratePNLToStandaloneClassC");
    if (!sub_10005A1E0(v9))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: Could not acquire lock oldPrefs", @"__WiFiManagerMigratePNLToStandaloneClassC"];
      }
      CFDictionaryRef v2 = &objc_retainAutoreleaseReturnValue_ptr;
      goto LABEL_19;
    }
    SCPreferencesSynchronize(v9);
    CFArrayRef v12 = SCPreferencesCopyKeyList(v9);
    CFArrayRef v13 = v12;
    v83 = v11;
    if (v12)
    {
      v98.length = CFArrayGetCount(v12);
      v98.location = 0;
      if (!CFArrayContainsValue(v13, v98, @"List of known networks"))
      {
        uint64_t v16 = v6;
        int v15 = 0;
        int v17 = 1;
        goto LABEL_15;
      }
      CFPropertyListRef Value = SCPreferencesGetValue(v9, @"List of known networks");
      if (!Value) {
        goto LABEL_9;
      }
      if (sub_10005A1E0(v10))
      {
        if (!SCPreferencesSetValue(v10, @"List of known networks", Value))
        {
          uint64_t v16 = v6;
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Could not set records", "__WiFiManagerMigratePNLToStandaloneClassC")
          }
          int v17 = 0;
          int v15 = 0;
          goto LABEL_11;
        }
LABEL_9:
        int v15 = SCPreferencesRemoveValue(v9, @"List of known networks");
        uint64_t v16 = v6;
        if (v15)
        {
          int v17 = 1;
          if (!Value)
          {
LABEL_15:
            uint64_t v1 = v86;
            if ((sub_10005A29C(v9, v15) & v17) != 0) {
              sub_10009317C((void *)v86, @"isWiFiPNLMigrationComplete", kCFBooleanTrue);
            }
            CFDictionaryRef v2 = &objc_retainAutoreleaseReturnValue_ptr;
            uint64_t v6 = v16;
            id v11 = v83;
            if (v13) {
              CFRelease(v13);
            }
LABEL_19:

            long long v19 = (void *)qword_10027DD68;
            if (qword_10027DD68)
            {
              [v2[264] timeIntervalSinceReferenceDate];
              [v19 WFLog:3 message:@"%s: PNL migration to class C standalone plist took %fs", @"WiFiManagerMigratePNL", v20 - v8];
            }
            goto LABEL_22;
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:message:3, "%s: Could not remove value", "__WiFiManagerMigratePNLToStandaloneClassC"];
          }
          int v17 = 0;
          if (!Value) {
            goto LABEL_15;
          }
        }
LABEL_11:
        v17 &= sub_10005A29C(v10, v15);
        goto LABEL_15;
      }
      uint64_t v16 = v6;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: Could not acquire lock newPrefs" arguments:("__WiFiManagerMigratePNLToStandaloneClassC", "__WiFiManagerMigratePNLToStandaloneClassC", "__WiFiManagerMigratePNLToStandaloneClassC")];
      }
    }
    else
    {
      uint64_t v16 = v6;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, "%s: Could not fetch keyList", "__WiFiManagerMigratePNLToStandaloneClassC"];
      }
    }
    int v17 = 0;
    int v15 = 0;
    goto LABEL_15;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s:manager is null" :@"WiFiManagerMigratePNL"];
  }
}

uint64_t sub_1000A6454(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 2064);
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL" : @"WiFiManagerIsConnectionQualityLocalCollectionEnabled"];
  }
  return 0;
}

void sub_1000A64C4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 2064) != a2)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: setting connection quality local collection to %d", "WiFiManagerSetConnectionQualityLocalCollectionEnabled", a2);
      }
      *(unsigned char *)(a1 + 2064) = a2;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: manager is NULL", "WiFiManagerSetConnectionQualityLocalCollectionEnabled"];
    }
  }
}

uint64_t sub_1000A65A4(uint64_t a1)
{
  return *(void *)(a1 + 2048);
}

void sub_1000A65AC(const __CFArray *a1, void *a2, uint64_t a3, const __CFDictionary *a4)
{
  if (byte_10027DDA9 && (a3 == 5 || !a3))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Lockdown Mode is enabled, ignoring type %@(%d)", "WiFiManagerSimulateNotification", sub_10005AF90(a3), a3 message];
    }
LABEL_6:
    return;
  }
  CFArrayRef v8 = sub_10000500C(a1);
  if (!v8)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: failed to get device managers", "WiFiManagerSimulateNotification", v19, v20];
    }
    goto LABEL_6;
  }
  CFArrayRef v9 = v8;
  if (CFArrayGetCount(v8))
  {
    ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(v9, 0);
    if (ValueAtIndex)
    {
      id v11 = ValueAtIndex;
      uint64_t v12 = sub_100016E18((uint64_t)ValueAtIndex);
      if (v12)
      {
        switch((int)a3)
        {
          case 2:
            sub_1001235FC((uint64_t)v11, a2);
            break;
          case 5:
            if (!a2)
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: network is null", "WiFiManagerSimulateNotification")];
              }
              goto LABEL_33;
            }
            sub_10001C6A4((uint64_t)a2, @"WiFiNetworkUserAcceptedRecommendationAt", 0);
            sub_100122E18((uint64_t)v11, (uint64_t)a2);
            break;
          case 7:
            int v13 = sub_100016E20(v12);
            CFAllocatorRef v14 = kCFAllocatorDefault;
            int v15 = 7;
            uint64_t v16 = 2;
            goto LABEL_19;
          case 8:
            sub_10012317C((uint64_t)v11, a2);
            break;
          case 10:
            sub_100123220((uint64_t)v11, a2);
            break;
          case 13:
            CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a4, @"SSID_STR");
            sub_10012C3B0(v11, Value);
            break;
          case 14:
            sub_10012C964((uint64_t)v11, a2);
            break;
          default:
            int v13 = sub_100016E20(v12);
            CFAllocatorRef v14 = kCFAllocatorDefault;
            int v15 = a3;
            uint64_t v16 = 0;
LABEL_19:
            sub_1000DAC4C((uint64_t)v14, v15, v16, v11, v13, (CFDictionaryRef *)a2, 0);
            break;
        }
        goto LABEL_24;
      }
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: device manager is null", "WiFiManagerSimulateNotification")];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: device managers array is empty" :@"WiFiManagerSimulateNotification"];
    }
  }
LABEL_33:
LABEL_24:

  CFRelease(v9);
}

uint64_t sub_1000A68D0(uint64_t a1)
{
  uint64_t result = sub_10000D990((uint64_t)"WiFiManagerGetKnownNetworksCache_block_invoke");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_1000A6908(uint64_t a1)
{
  if (CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 40) + 224)) < 401)
  {
    double v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s PNL greater than theshold (%d), won't end xpc_transaction", "WiFiManagerGetKnownNetworksCache_block_invoke_2", 400);
    }
  }
}

uint64_t sub_1000A69BC(uint64_t a1, const __CFArray *a2)
{
  if (a1)
  {
    uint64_t v5 = 0;
    if (a2 && *(unsigned char *)(a1 + 1328))
    {
      uint64_t v6 = *(const void **)(a1 + 352);
      if (!v6 || !CFEqual(a2, v6))
      {
        CFArrayRef v8 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          CFArrayRef v9 = *(const __CFArray **)(a1 + 352);
          if (v9) {
            CFIndex Count = CFArrayGetCount(v9);
          }
          else {
            CFIndex Count = 0;
          }
          [v8 WFLog:3 message:@"%s: Switching cached list from %ld to %ld private mac networks", "WiFiManagerSetPrivateMacNetworksCache", Count, CFArrayGetCount(a2)];
        }
        id v11 = *(const void **)(a1 + 352);
        if (v11)
        {
          CFRelease(v11);
          *(void *)(a1 + 352) = 0;
        }
        *(void *)(a1 + 352) = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, a2);
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Updated %ld private mac networks in the cache", "WiFiManagerSetPrivateMacNetworksCache", CFArrayGetCount(*(CFArrayRef *)(a1 + 352)));
      }
      context[0] = a1;
      context[1] = 0xAAAAAAAA0000006ELL;
      uint64_t v5 = 1;
      context[2] = 0;
      context[3] = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: manager is NULL", "WiFiManagerSetPrivateMacNetworksCache"];
    }
    uint64_t v5 = 0;
  }
  return v5;
}

uint64_t sub_1000A6B7C(uint64_t a1, int a2, int a3)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: manager is NULL", @"WiFiManagerFlushPrivateMacNetworksCache"];
    }
    goto LABEL_20;
  }
  if (!*(unsigned char *)(a1 + 1328)
    || (CFArrayRef v7 = *(const __CFArray **)(a1 + 352)) == 0
    || (Count = CFArrayGetCount(v7), (CFArrayRef v9 = sub_10005A3FC(*(const __CFArray **)(a1 + 352), a2)) == 0))
  {
LABEL_20:
    uint64_t v11 = 0;
    goto LABEL_16;
  }
  id v10 = v9;
  uint64_t v11 = sub_100083E60((void *)a1, @"List of scanned networks with private mac", v9, a3);
  if (qword_10027DD68)
  {
    int v13 = "Successfully flushed";
    if (!v11) {
      int v13 = "Failed to flush";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, " WFMacRandomisation : %s: %s %ld privateMac networks to the plist", "WiFiManagerFlushPrivateMacNetworksCache", v13, Count)];
  }
  if (!Count)
  {
    CFAllocatorRef v14 = *(const void **)(a1 + 352);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(a1 + 352) = 0;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: WFMacRandomisation : Cleared private mac networks cache", "WiFiManagerFlushPrivateMacNetworksCache"];
    }
  }
  CFRelease(v10);
LABEL_16:
  return v11;
}

void sub_1000A6D10(uint64_t a1)
{
  v1[0] = a1;
  v1[1] = 0xAAAAAAAA0000004ALL;
  v1[2] = 0;
  v1[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v1);
}

uint64_t sub_1000A6D60(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 2065);
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL" : @"WiFiManagerArePrivacyRestrictionsForWiFiConnectionQualityDisabled"];
  }
  return 0;
}

void sub_1000A6DD0(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 2065) != a2)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:@"%s: arePrivacyRestrictionsForWiFiConnectionQualityDisabled now set to %d" message:3, @"WiFiManagerSetPrivacyRestrictionsForWiFiConnectionQualityDisabled", a2];
      }
      uint64_t v5 = (const void **)&kCFBooleanTrue;
      if (!a2) {
        uint64_t v5 = (const void **)&kCFBooleanFalse;
      }
      sub_100083E60((void *)a1, @"ConnectionQualityPrivacyRestrictionsDisabled", *v5, 0);
      *(unsigned char *)(a1 + 2065) = a2;
      context[0] = a1;
      context[1] = 0xAAAAAAAA0000002DLL;
      context[2] = 0;
      context[3] = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL" : @"WiFiManagerSetPrivacyRestrictionsForWiFiConnectionQualityDisabled"];
    }
  }
}

BOOL sub_1000A6F14(uint64_t a1)
{
  return *(unsigned char *)(a1 + 1328) != 0;
}

void sub_1000A6F24(uint64_t a1)
{
  [*(id *)(a1 + 1432) checkForWiFiPasswordChange];
  [*(id *)(a1 + 1432) syncKnownWiFiNetworks:0];
}

CFStringRef sub_1000A6F74(uint64_t a1)
{
  id v2 = [[objc_msgSend(*(id *)(a1 + 1696), "latestLocation") copy];
  double v3 = v2;
  if (!v2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s won't determine known network SSID for location as there's no location available (are Location Services enabled?)", "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation", v32);
    }
    goto LABEL_41;
  }
  [v2 horizontalAccuracy];
  if (v4 >= 100.1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s won't determine known network SSID for location as location accuracy is greater than threshold (%f)", "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation", 0x4059066666666666);
    }
LABEL_41:
    uint64_t v6 = 0;
    goto LABEL_46;
  }
  id v5 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyNetworksAvailableAtLocation:v3];
  uint64_t v6 = v5;
  if (!v5 || ![v5 count])
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s copyNetworksAvailableAtLocation returned null or empty array, likely no known networks at this location. Returning NULL", "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation")];
    }
    goto LABEL_45;
  }
  if ([v6 count] == (id)1)
  {
    id v20 = [v6 firstObject];
    if (v20) {
      goto LABEL_33;
    }
    goto LABEL_43;
  }
  id v7 = +[NSMutableArray array];
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v8 = [v6 countByEnumeratingWithState:&v39 objects:v44 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v40;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v40 != v10) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = *(const void **)(*((void *)&v39 + 1) + 8 * i);
        if (sub_10001A43C(v12)) {
          [v7 addObject:sub_10001A43C(v12)];
        }
      }
      id v9 = [v6 countByEnumeratingWithState:&v39 objects:v44 count:16];
    }
    while (v9);
  }
  if (![v7 count])
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Multiple matches for current location, but couldn't determine the SSIDs of *any* of them, this is likely a serious bug but possibly a rare setup", "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation");
    }
    goto LABEL_45;
  }
  uint64_t v13 = sub_1000830B8(a1);
  if (!v13)
  {
    long long v29 = v34;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Couldn't get known networks cache, bail", "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation")];
    }
    goto LABEL_57;
  }
  CFAllocatorRef v14 = +[NSMutableArray arrayWithArray:v13];
  if (!v14 || (int v15 = v14, ![(NSMutableArray *)v14 count]))
  {
LABEL_46:
    CFStringRef Copy = 0;
    goto LABEL_47;
  }
  v45.length = (CFIndex)[(NSMutableArray *)v15 count];
  v45.location = 0;
  CFArraySortValues((CFMutableArrayRef)v15, v45, (CFComparatorFunction)sub_1000CB914, 0);
  if (![(NSMutableArray *)v15 count])
  {
    long long v29 = v34;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Sorted network list empty, this shouldn't happen.", "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation")];
    }
    goto LABEL_57;
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v16 = [(NSMutableArray *)v15 countByEnumeratingWithState:&v35 objects:v43 count:16];
  if (!v16) {
    goto LABEL_43;
  }
  id v17 = v16;
  id v33 = v3;
  uint64_t v18 = *(void *)v36;
  do
  {
    for (j = 0; j != v17; j = (char *)j + 1)
    {
      if (*(void *)v36 != v18) {
        objc_enumerationMutation(v15);
      }
      id v20 = *(id *)(*((void *)&v35 + 1) + 8 * (void)j);
      id v22 = [v7 filteredArrayUsingPredicate:+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", @"SELF MATCHES %@", sub_10001A43C(v20))];
      if (v22)
      {
        id v23 = [v22 count];
        if (v23) {
          goto LABEL_32;
        }
      }
      else
      {
      }
    }
    id v17 = [(NSMutableArray *)v15 countByEnumeratingWithState:&v35 objects:v43 count:16];
  }
  while (v17);
  id v20 = 0;
LABEL_32:
  double v3 = v33;
  if (!v20)
  {
LABEL_43:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Logic error, determination process finished without detecting a handleable error and didn't finish with a determination. This is a bug.", "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation");
    }
LABEL_45:
    goto LABEL_46;
  }
LABEL_33:
  if (!sub_10001A43C(v20))
  {
    long long v29 = v34;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Couldn't determine the SSID of the known network that was determined to be the most used at the current device location. Bail ", "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation");
    }
LABEL_57:
    CFStringRef Copy = 0;
    goto LABEL_48;
  }
  CFAllocatorRef Default = CFAllocatorGetDefault();
  CFStringRef v25 = (const __CFString *)sub_10001A43C(v20);
  CFStringRef Copy = CFStringCreateCopy(Default, v25);
LABEL_47:
  long long v29 = v34;
LABEL_48:

  return Copy;
}

uint64_t sub_1000A7484(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000054;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

uint64_t sub_1000A74D4(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000055;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

uint64_t sub_1000A7524(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000056;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

uint64_t sub_1000A7574(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000058;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

void sub_1000A75C4(CFDictionaryRef *a1, uint64_t a2, uint64_t a3, int a4)
{
  int valuePtr = a4;
  id v8 = (__CFString *)sub_100016E18(a2);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (a3 == 14 && (LODWORD(v39) = 5, !a4))
  {
    sub_100092D78(a1, a2);
  }
  else
  {
    CFStringRef v9 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%d", a3, v39, v40);
    if (v9)
    {
      uint64_t v10 = (__CFString *)v9;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        uint64_t v12 = Mutable;
        CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
        if (v13)
        {
          CFNumberRef v14 = v13;
          CFDictionaryAddValue(v12, @"EventRateClientIntervalKey", v13);
          CFRelease(v14);
          CFNumberRef v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &v40);
          if (v15)
          {
            CFNumberRef v16 = v15;
            CFDictionaryAddValue(v12, @"EventRateClientPrevDispatchTimestampKey", v15);
            CFRelease(v16);
            id v17 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            if (v17)
            {
              uint64_t v18 = v17;
              CFDictionarySetValue(v17, v8, v12);
              CFNumberRef v19 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v39);
              if (!v19)
              {
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null number 3", "WiFiManagerEventSetRateLimit")];
                }
                goto LABEL_50;
              }
              CFNumberRef v20 = v19;
              CFDictionaryAddValue(v18, @"EventRateDefaultIntervalKey", v19);
              CFRelease(v20);
              CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &v40);
              if (!v21)
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4 message:@"%s: null number 4" :@"WiFiManagerEventSetRateLimit"];
                }
                goto LABEL_50;
              }
              CFNumberRef v22 = v21;
              CFDictionaryAddValue(v18, @"EventRatePrevDispatchTimestampKey", v21);
              CFRelease(v22);
              CFNumberRef v23 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)&v39 + 4);
              if (!v23)
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4 message:@"%s: null number 5" :@"WiFiManagerEventSetRateLimit"];
                }
                goto LABEL_50;
              }
              CFNumberRef v24 = v23;
              CFDictionaryAddValue(v18, @"EventRateRateDispachedCount", v23);
              CFRelease(v24);
              int v25 = CFDictionaryContainsKey(a1[266], v10);
              CFDictionaryRef v26 = a1[266];
              if (v25)
              {
                CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v26, v10);
                if (Value)
                {
                  CFDictionaryRef v28 = Value;
                  long long v29 = (__CFDictionary *)CFDictionaryGetValue(Value, v8);
                  if (v29)
                  {
                    long long v30 = v29;
                    CFNumberRef v31 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
                    if (v31)
                    {
                      CFNumberRef v32 = v31;
                      CFDictionarySetValue(v30, @"EventRateClientIntervalKey", v31);
                      CFRelease(v32);
LABEL_19:
                      CFRelease(v10);
LABEL_20:
                      CFRelease(v18);
                      CFRelease(v12);
                      return;
                    }
                    if (qword_10027DD68) {
                      [((id)qword_10027DD68) WFLog:4 message:@"%s: null number 6" arguments:("WiFiManagerEventSetRateLimit", nil)];
                    }
LABEL_50:
                    goto LABEL_19;
                  }
                  CFDictionaryRef v26 = v28;
                  id v33 = v8;
                  id v34 = v12;
LABEL_18:
                  CFDictionarySetValue(v26, v33, v34);
                  goto LABEL_19;
                }
                CFDictionaryRef v26 = a1[266];
              }
              id v33 = v10;
              id v34 = v18;
              goto LABEL_18;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:4, "%s: null eventDict", "WiFiManagerEventSetRateLimit"];
            }
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: null number 2" args:("WiFiManagerEventSetRateLimit")];
            }
          }
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null number", "WiFiManagerEventSetRateLimit")
          }
        }
        uint64_t v18 = (__CFDictionary *)v10;
        goto LABEL_20;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null clientDict" args:("WiFiManagerEventSetRateLimit", NULL)];
      }
      CFRelease(v10);
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null eventKey", "WiFiManagerEventSetRateLimit")
      }
    }
  }
}

uint64_t sub_1000A7ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int valuePtr = 0;
  CFStringRef v5 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%d", a3);
  if (v5)
  {
    CFStringRef v6 = v5;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 2128), v5);
    if (Value)
    {
      CFDictionaryRef v8 = Value;
      CFStringRef v9 = (const void *)sub_100016E18(a2);
      CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(v8, v9);
      if (v10)
      {
        CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v10, @"EventRateClientIntervalKey");
        if (!CFNumberGetValue(v11, kCFNumberIntType, &valuePtr))
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: Failed to get value" args:("WiFiManagerEventGetRateLimit")];
          }
        }
      }
    }
    else
    {
      unsigned int valuePtr = 0;
    }
    CFRelease(v6);
    return valuePtr;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null eventKey"];
    }
    return 0;
  }
}

BOOL sub_1000A7C18(uint64_t a1, char a2)
{
  return (a2 & 2) != 0 && *(unsigned char *)(a1 + 2176) != 0;
}

uint64_t sub_1000A7C34(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 2177);
  if (*(unsigned char *)(a1 + 2176))
  {
    if ((v3 & a2) != 0) {
      return 1;
    }
    BOOL v4 = 1;
    switch(*(unsigned char *)(a1 + 2177))
    {
      case 0:
        break;
      case 1:
      case 8:
        BOOL v6 = ((a2 - 2) & 0xFFFFFFFD) == 0;
        goto LABEL_15;
      case 2:
        BOOL v6 = a2 == 4 || a2 == 1;
LABEL_15:
        BOOL v4 = v6;
        break;
      case 4:
        BOOL v4 = (a2 - 1) < 2;
        break;
      default:
        BOOL v4 = 0;
        break;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: OpMode current state:%d  requested %d status %d", "WiFiManagerIsOpModeAllowed", *(unsigned __int8 *)(a1 + 2177), a2, v4)];
    }
  }
  else
  {
    BOOL v4 = v3 == 0;
    if (a2 == 1)
    {
      if (v3 != 2) {
        return v4;
      }
      return 1;
    }
    if (a2 == 2 && v3 == 1) {
      return 1;
    }
  }
  return v4;
}

_DWORD *sub_1000A7D80(_DWORD *result, int a2, int a3)
{
  if (result[83] != a2)
  {
    result[83] = a2;
    CFStringRef v4 = @"Never";
    if (a2 == 1) {
      CFStringRef v4 = @"Ask to Join";
    }
    if (a2 == 2) {
      CFStringRef v5 = @"Automatic";
    }
    else {
      CFStringRef v5 = v4;
    }
    sub_100083E60(result, @"AutoInstantHotspot", v5, a3);
    [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") sendAutoHotspotModeDidChangeEvent];
    id v6 = +[WiFiXPCManager sharedXPCManager];
    return [v6 sendUserSettingsDidChangeEvent];
  }
  return result;
}

uint64_t sub_1000A7E20(uint64_t result, int a2, int a3)
{
  if (*(_DWORD *)(result + 340) != a2)
  {
    *(_DWORD *)(result + 340) = a2;
    CFStringRef v4 = @"Never";
    if (a2 == 1) {
      CFStringRef v4 = @"Ask for Approval";
    }
    if (a2 == 2) {
      CFStringRef v5 = @"Automatic";
    }
    else {
      CFStringRef v5 = v4;
    }
    return sub_100083E60((void *)result, @"ShareMyPersonalHotspot", v5, a3);
  }
  return result;
}

uint64_t sub_1000A7E70(uint64_t a1)
{
  id v2 = sub_10000D934((void *)a1, @"AutoInstantHotspot");
  if (v2)
  {
    int v3 = v2;
    if (CFEqual(@"Never", v2))
    {
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v4 = 1;
      if (!CFEqual(@"Ask to Join", v3))
      {
        if (CFEqual(@"Automatic", v3)) {
          uint64_t v4 = 2;
        }
        else {
          uint64_t v4 = 1;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 1;
  }
  *(_DWORD *)(a1 + 332) = v4;
  return v4;
}

uint64_t sub_1000A7F0C(uint64_t a1)
{
  id v2 = sub_10000D934((void *)a1, @"ShareMyPersonalHotspot");
  if (v2)
  {
    int v3 = v2;
    if (CFEqual(@"Never", v2))
    {
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v4 = 1;
      if (!CFEqual(@"Ask for Approval", v3))
      {
        if (CFEqual(@"Automatic", v3)) {
          uint64_t v4 = 2;
        }
        else {
          uint64_t v4 = 1;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 1;
  }
  *(_DWORD *)(a1 + 340) = v4;
  return v4;
}

void sub_1000A7FA8(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 2168) != a2)
  {
    *(double *)(a1 + 2168) = a2;
    sub_100091E50((void *)a1, @"AutoInstantHotspotTriggerInterval", a2);
  }
}

void sub_1000A7FCC(uint64_t a1, int a2)
{
  int v3 = a2;
  context[0] = a1;
  context[1] = 0xAAAAAAAA0000005ALL;
  context[2] = &v3;
  context[3] = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
}

void sub_1000A8020(uint64_t a1, uint64_t a2)
{
  if (sub_100089448(a1))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: purging local store if it size exceeds %lu bytes", "WiFiManagerPrune3BarsNetworks", a2];
    }
    [+[WiFi3BarsObserver sharedWiFi3BarsObserver](WiFi3BarsObserver, "sharedWiFi3BarsObserver") prune3BarsNetworks:a2];
  }
}

void sub_1000A80CC(id *a1)
{
  int v3 = (void *)sub_10000D990((uint64_t)"WiFiManagerStart3BarsFetchForCurrentLocation");
  if (a1)
  {
    uint64_t v4 = sub_1000A36E4(a1);
    unsigned int v5 = +[WiFiLocationManager isLocationValid:v4 uptoSeconds:0 isHighAccuracy:3600.0];
    if (v5)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: fetching networks for current location", "WiFiManagerStart3BarsFetchForCurrentLocation"];
      }
      [+[WiFi3BarsObserver sharedWiFi3BarsObserver](WiFi3BarsObserver, "sharedWiFi3BarsObserver") fetch3BarsNetworksForLocation:v4];
      if (v4) {
LABEL_6:
      }
        CFRelease(v4);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: location not valid" arguments:("WiFiManagerStart3BarsFetchForCurrentLocation", nil)];
      }
      if (v4) {
        goto LABEL_6;
      }
    }
  }
}

uint64_t sub_1000A81E8(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 2184);
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: manager ref is null" args:("WiFiManagerGet3BarsSource")];
  }
  return 0;
}

void sub_1000A8258(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 128)
    && [+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection])
  {
    _CTServerConnectionCopyPacketContextInterfaceNameByServiceType();
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s called by %s: cellular interface name: %@", "WiFiManagerCopyCellularInterfaceName", a3, *a2 message];
    }
  }
}

void *sub_1000A8320(void *a1)
{
  if (a1) {
    return sub_1000A832C(a1);
  }
  return a1;
}

CFArrayRef sub_1000A832C(void *a1)
{
  id v2 = +[NSUserDefaults standardUserDefaults];
  CFArrayRef v3 = [(NSUserDefaults *)v2 arrayForKey:@"FamilyHotspotPreferences"];
  if (!v3)
  {
    unsigned int v5 = sub_10000D934(a1, @"FamilyHotspotPreferences");
    if (!v5) {
      return 0;
    }
    sub_1000A85B8(a1, (uint64_t)v5);
    sub_100083E60(a1, @"FamilyHotspotPreferences", 0, 0);
    CFArrayRef v3 = [(NSUserDefaults *)v2 arrayForKey:@"FamilyHotspotPreferences"];
    if (!v3) {
      return 0;
    }
  }

  return CFArrayCreateCopy(kCFAllocatorDefault, v3);
}

uint64_t sub_1000A83F4(void *a1)
{
  CFDictionaryRef v2 = sub_1000A84D4(a1);
  if (!v2)
  {
    id v4 = 0;
    goto LABEL_10;
  }
  CFDictionaryRef v3 = v2;
  id v4 = [(__CFDictionary *)v2 mutableCopy];

  if (!v4)
  {
LABEL_10:
    uint64_t v7 = 0;
    goto LABEL_11;
  }
  unsigned int v5 = (void *)a1[315];
  if (!v5 || (id v6 = [v5 cellularICCID]) == 0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: failed to retrieve ICCID" arguments:("WiFiManagerResetHotspotDataUsage", "WiFiManagerResetHotspotDataUsage", "WiFiManagerResetHotspotDataUsage")];
    }
    goto LABEL_10;
  }
  [v4 removeObjectForKey:v6];
  [+[NSUserDefaults standardUserDefaults] setObject:v4 forKey:@"InterfaceDataUsageV1"];
  uint64_t v7 = 1;
LABEL_11:

  return v7;
}

CFDictionaryRef sub_1000A84D4(void *a1)
{
  CFDictionaryRef v2 = +[NSUserDefaults standardUserDefaults];
  CFDictionaryRef v3 = [(NSUserDefaults *)v2 dictionaryForKey:@"InterfaceDataUsageV1"];
  if (!v3)
  {
    unsigned int v5 = sub_10000D934(a1, @"InterfaceDataUsageV1");
    if (!v5) {
      return 0;
    }
    [+[NSUserDefaults standardUserDefaults] setObject:v5 forKey:@"InterfaceDataUsageV1"];
    sub_100083E60(a1, @"InterfaceDataUsageV1", 0, 0);
    CFDictionaryRef v3 = [(NSUserDefaults *)v2 dictionaryForKey:@"InterfaceDataUsageV1"];
    if (!v3) {
      return 0;
    }
  }

  return CFDictionaryCreateCopy(kCFAllocatorDefault, v3);
}

void sub_1000A85B8(void *a1, uint64_t a2)
{
  [+[NSUserDefaults standardUserDefaults] setObject:a2 forKey:@"FamilyHotspotPreferences"];
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v5 = CFDateCreate(kCFAllocatorDefault, Current);
  if (v5)
  {
    CFDateRef v6 = v5;
    sub_100083E60(a1, @"FamilyHotspotPreferencesUpdateTimestamp", v5, 0);
    CFRelease(v6);
  }
}

uint64_t sub_1000A8664(void *a1)
{
  [+[NSUserDefaults standardUserDefaults] setObject:0 forKey:@"UserNotificationBlacklist"];

  return sub_100083E60(a1, @"UserNotificationBlacklist", 0, 0);
}

CFDictionaryRef sub_1000A86C8(void *a1)
{
  return sub_10009F9C4(a1, 0);
}

id sub_1000A86D0(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v3 = +[NSUserDefaults standardUserDefaults];

  return [(NSUserDefaults *)v3 setObject:a2 forKey:@"Custom network settings"];
}

uint64_t sub_1000A871C(void *a1)
{
  uint64_t v23 = 0;
  CFNumberRef v24 = &v23;
  uint64_t v25 = 0x3052000000;
  CFDictionaryRef v26 = sub_100022CD8;
  id v27 = sub_100022BE8;
  uint64_t v28 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x3052000000;
  CFNumberRef v20 = sub_100022CD8;
  CFNumberRef v21 = sub_100022BE8;
  uint64_t v22 = 0;
  uint64_t v13 = 0;
  CFNumberRef v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  CFDictionaryRef v3 = sub_1000A84D4(a1);
  if (v3)
  {
    id v4 = objc_alloc_init((Class)NSMutableDictionary);
    v18[5] = (uint64_t)v4;
    if (v4)
    {
      CFDateRef v5 = dispatch_semaphore_create(0);
      global_queue = dispatch_get_global_queue(0, 0);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000A89A0;
      block[3] = &unk_100240990;
      block[6] = &v17;
      block[7] = &v13;
      block[8] = &v23;
      block[9] = a1;
      block[4] = v3;
      void block[5] = v5;
      dispatch_async(global_queue, block);
      dispatch_time_t v7 = dispatch_time(0, 1000000000);
      if (dispatch_semaphore_wait(v5, v7))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: timed out waiting for data usage." arguments:("WiFiManagerCopyHotspotDataUsage", 0)];
        }
        *((unsigned char *)v14 + 24) = 1;
      }
      dispatch_release(v5);
    }
  }

  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: returning data usage info %@", "WiFiManagerCopyHotspotDataUsage", v24[5] message];
  }
  uint64_t v10 = v24[5];
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v23, 8);
  return v10;
}

void sub_1000A8970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

intptr_t sub_1000A89A0(uint64_t a1)
{
  CFDictionaryRef v2 = *(void **)(*(void *)(a1 + 72) + 2520);
  if (!v2 || (id v3 = [v2 cellularICCID]) == 0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: failed to retrieve ICCID", @"WiFiManagerCopyHotspotDataUsage_block_invoke", v15];
    }
    goto LABEL_13;
  }
  id v4 = v3;
  id v5 = [*(id *)(a1 + 32) objectForKey:v3];
  if (!v5)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: empty usage record for ICCID %@", "WiFiManagerCopyHotspotDataUsage_block_invoke", v4 message];
    }
LABEL_13:
    goto LABEL_14;
  }
  CFDateRef v6 = v5;
  id v7 = objc_alloc_init((Class)CoreTelephonyClient);
  if (!v7) {
    goto LABEL_10;
  }
  CFDictionaryRef v8 = v7;
  uint64_t v17 = 0;
  id v9 = [v7 billingCycleEndDatesForLastPeriods:2 error:&v17];
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: error %@, billing periods %@", "WiFiManagerCopyHotspotDataUsage_block_invoke", v17, v9 message];
  }

  if (v9 && [v9 count])
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1000A9338;
    v16[3] = &unk_100240968;
    uint64_t v11 = *(void *)(a1 + 48);
    v16[4] = v6;
    v16[5] = v11;
    [v9 enumerateObjectsWithOptions:2 usingBlock:v16];
  }
  else
  {
LABEL_10:
    sub_1000A8BA4(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v6, 0, 0);
  }
LABEL_14:
  uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {

  }
  else {
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) = v13;
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1000A8BA4(void *a1, void *a2, NSDate *a3, uint64_t a4)
{
  if (a1 && a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: records %@", "__populateHotspotDataUsageFromRecord", a2 message];
    }
    if (!a3) {
      a3 = +[NSDate date];
    }
    id v6 = +[NSMutableArray array];
    long long v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    id obj = a2;
    id v53 = [a2 countByEnumeratingWithState:&v80 objects:v87 count:16];
    if (v53)
    {
      uint64_t v52 = *(void *)v81;
      CFStringRef v7 = @"DataUsageInterfaceName";
      CFStringRef v8 = @"DataUsageInterfacePeerDisplayName";
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v81 != v52) {
            objc_enumerationMutation(obj);
          }
          uint64_t v54 = v9;
          uint64_t v10 = *(void **)(*((void *)&v80 + 1) + 8 * v9);
          id v11 = [v10 objectForKey:@"DataUsageDate"];
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: record date %@", "__populateHotspotDataUsageFromRecord", v11 message];
          }
          if (v11 && [(NSDate *)a3 compare:v11] != NSOrderedAscending)
          {
            id v13 = [v10 objectForKey:v7];
            id v14 = [v10 objectForKey:@"DataUsageInterfacePeerList"];
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: interfaceName %@", "__populateHotspotDataUsageFromRecord", v13 message];
            }
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: peerRecords %@", "__populateHotspotDataUsageFromRecord", v14 message];
            }
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            id v57 = [v14 countByEnumeratingWithState:&v76 objects:v86 count:16];
            if (v57)
            {
              uint64_t v55 = *(void *)v77;
              id v56 = v14;
              id v63 = v13;
              do
              {
                id v17 = 0;
                do
                {
                  if (*(void *)v77 != v55) {
                    objc_enumerationMutation(v14);
                  }
                  uint64_t v62 = (char *)v17;
                  uint64_t v18 = *(void **)(*((void *)&v76 + 1) + 8 * (void)v17);
                  CFStringRef v19 = v8;
                  id v20 = [v18 objectForKey:v8];
                  id v21 = [v18 objectForKey:@"DataUsageInterfacePeerAddr"];
                  id v22 = [v18 objectForKey:@"DataUsageInterfacePeerLastBytes"];
                  id v59 = v18;
                  id v23 = [v18 objectForKey:@"DataUsageInterfacePeerTotalBytes"];
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: record %@/%@/%@/%@", "__populateHotspotDataUsageFromRecord", v20, v21, v22, v23 message];
                  }
                  uint64_t v60 = v22;
                  v61 = v23;
                  long long v74 = 0u;
                  long long v75 = 0u;
                  long long v72 = 0u;
                  long long v73 = 0u;
                  id v67 = [v6 countByEnumeratingWithState:&v72 objects:v85 count:16];
                  if (v67)
                  {
                    id v58 = v20;
                    id v25 = 0;
                    id v26 = 0;
                    uint64_t v27 = *(void *)v73;
                    uint64_t v64 = *(void *)v73;
LABEL_29:
                    uint64_t v28 = 0;
                    while (1)
                    {
                      if (*(void *)v73 != v27) {
                        objc_enumerationMutation(v6);
                      }
                      long long v29 = *(void **)(*((void *)&v72 + 1) + 8 * v28);
                      if (objc_msgSend(v13, "isEqualToString:", objc_msgSend(v29, "objectForKey:", v7)))
                      {
                        if (v25) {

                        }
                        id v25 = v29;
                        id v30 = [v29 objectForKey:@"DataUsageInterfacePeerList"];
                        if (v30)
                        {
                          if (v26) {

                          }
                          id v26 = v30;
                        }
                        long long v70 = 0u;
                        long long v71 = 0u;
                        long long v68 = 0u;
                        long long v69 = 0u;
                        id v31 = [v30 countByEnumeratingWithState:&v68 objects:v84 count:16];
                        if (v31)
                        {
                          id v32 = v31;
                          id v65 = v25;
                          id v66 = v26;
                          CFStringRef v33 = v7;
                          id v34 = v6;
                          uint64_t v35 = *(void *)v69;
LABEL_41:
                          uint64_t v36 = 0;
                          while (1)
                          {
                            if (*(void *)v69 != v35) {
                              objc_enumerationMutation(v30);
                            }
                            long long v37 = *(void **)(*((void *)&v68 + 1) + 8 * v36);
                            if ([objc_msgSend(objc_msgSend(v37, "objectForKey:", @"DataUsageInterfacePeerAddr"), "isEqualToString:", v21])break; {
                            if (v32 == (id)++v36)
                            }
                            {
                              id v32 = [v30 countByEnumeratingWithState:&v68 objects:v84 count:16];
                              if (v32) {
                                goto LABEL_41;
                              }
                              goto LABEL_49;
                            }
                          }
                          id v38 = v37;
                          if (!v38)
                          {
LABEL_49:
                            id v6 = v34;
                            CFStringRef v7 = v33;
                            id v13 = v63;
                            id v25 = v65;
                            id v26 = v66;
                            goto LABEL_50;
                          }
                          id v39 = v38;
                          id v41 = [v38 objectForKey:@"DataUsageInterfacePeerLastBytes"];
                          long long v42 = [[v39 objectForKey:@"DataUsageInterfacePeerTotalBytes"] unsignedIntegerValue];
                          id v6 = v34;
                          CFStringRef v7 = v33;
                          id v13 = v63;
                          if (v41) {
                            long long v42 = &v42[(void)[v41 unsignedIntegerValue]];
                          }
                          CFStringRef v8 = @"DataUsageInterfacePeerDisplayName";
                          if (v60) {
                            long long v42 = &v42[(void)[v60 unsignedIntegerValue]];
                          }
                          if (v61) {
                            long long v42 = &v42[(void)[v61 unsignedIntegerValue]];
                          }
                          [v39 setObject:[NSNumber numberWithUnsignedInteger:v42] forKey:@"DataUsageInterfacePeerTotalBytes"];
                          if (v58) {
                            [v39 setObject:v58 forKey:@"DataUsageInterfacePeerDisplayName"];
                          }
                          [v39 removeObjectForKey:@"DataUsageInterfacePeerLastBytes"];
                          id v14 = v56;
                          uint64_t v40 = v62;
                          if (v66) {
                            goto LABEL_67;
                          }
                          goto LABEL_66;
                        }
LABEL_50:
                        uint64_t v27 = v64;
                      }
                      if ((id)++v28 == v67)
                      {
                        id v67 = [v6 countByEnumeratingWithState:&v72 objects:v85 count:16];
                        if (v67) {
                          goto LABEL_29;
                        }
                        id v65 = v25;
                        id v39 = [v59 mutableCopy];
                        id v14 = v56;
                        uint64_t v40 = v62;
                        if (v26)
                        {
                          id v66 = v26;
                          [v26 addObject:v39];
                          CFStringRef v8 = @"DataUsageInterfacePeerDisplayName";
                          goto LABEL_67;
                        }
                        CFStringRef v8 = @"DataUsageInterfacePeerDisplayName";
                        goto LABEL_66;
                      }
                    }
                  }
                  id v39 = [v59 mutableCopy];
                  id v65 = 0;
                  id v14 = v56;
                  uint64_t v40 = v62;
                  CFStringRef v8 = v19;
LABEL_66:
                  id v66 = objc_alloc_init((Class)NSMutableArray);
                  [v66 addObject:v39];
LABEL_67:
                  id v43 = v65;
                  if (!v65)
                  {
                    id v44 = objc_alloc_init((Class)NSMutableDictionary);
                    id v43 = v44;
                    if (v13) {
                      [v44 setObject:v13 forKey:v7];
                    }
                    [v43 setObject:v66 forKey:@"DataUsageInterfacePeerList"];
                    [v6 addObject:v43];
                  }

                  id v17 = v40 + 1;
                }
                while (v17 != v57);
                id v45 = [v14 countByEnumeratingWithState:&v76 objects:v86 count:16];
                id v57 = v45;
              }
              while (v45);
            }
          }
          uint64_t v9 = v54 + 1;
        }
        while ((id)(v54 + 1) != v53);
        id v53 = [obj countByEnumeratingWithState:&v80 objects:v87 count:16];
      }
      while (v53);
    }
    if ([v6 count])
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: adding interface usage %@", "__populateHotspotDataUsageFromRecord", v6 message];
      }
      [a1 setObject:v6 forKey:[+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a4), "stringValue"]];
    }
  }
}

void sub_1000A9338(uint64_t a1, NSDate *a2, uint64_t a3)
{
}

void sub_1000A9350(uint64_t a1, int a2)
{
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 2201) != a2)
    {
      *(unsigned char *)(a1 + 2201) = a2;
      CFDictionaryRef v2 = &kCFBooleanTrue;
      if (!a2) {
        CFDictionaryRef v2 = &kCFBooleanFalse;
      }
      CFBooleanRef v3 = *v2;
      sub_100083E60((void *)a1, @"isWiFiPowerModificationDisabled", v3, 0);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: Null manager", "WiFiManagerDisablePowerModification"];
    }
  }
}

uint64_t sub_1000A9430(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 344);
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: Null manager", "WiFiManagerIsPersonalHotspotModificationDisabled"];
  }
  return 0;
}

void sub_1000A94A0(uint64_t a1, int a2)
{
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 344) != a2)
    {
      *(unsigned char *)(a1 + 344) = a2;
      CFDictionaryRef v2 = &kCFBooleanTrue;
      if (!a2) {
        CFDictionaryRef v2 = &kCFBooleanFalse;
      }
      CFBooleanRef v3 = *v2;
      sub_100083E60((void *)a1, @"isPersonalHotspotModificationDisabled", v3, 0);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Null manager", @"WiFiManagerDisablePersonalHotspotModification"];
    }
  }
}

CFDictionaryRef sub_1000A9580(CFDictionaryRef result)
{
  if (result) {
    return sub_1000A9590(result, 0);
  }
  return result;
}

CFDictionaryRef sub_1000A9590(void *a1, int a2)
{
  id v4 = +[NSUserDefaults standardUserDefaults];
  CFDictionaryRef v5 = [(NSUserDefaults *)v4 dictionaryForKey:@"UserNotificationBlacklist"];
  if (!v5)
  {
    CFStringRef v7 = sub_10000D934(a1, @"UserNotificationBlacklist");
    if (!v7) {
      return 0;
    }
    [+[NSUserDefaults standardUserDefaults] setObject:v7 forKey:@"UserNotificationBlacklist"];
    sub_100083E60(a1, @"UserNotificationBlacklist", 0, a2);
    CFDictionaryRef v5 = [(NSUserDefaults *)v4 dictionaryForKey:@"UserNotificationBlacklist"];
    if (!v5) {
      return 0;
    }
  }

  return CFDictionaryCreateCopy(kCFAllocatorDefault, v5);
}

void sub_1000A9674(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v4 = (unsigned __int8 *)(a1 + 376);
    if (*(unsigned __int8 *)(a1 + 376) != a2)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WFMacRandomisation: Mac Randomisation internal UI toggled. Current State : %d,new state : %d", "WiFiManagerSetMacRandomisationPreference", *v4, a2)];
      }
      id v6 = (const void **)&kCFBooleanFalse;
      if (a2) {
        id v6 = (const void **)&kCFBooleanTrue;
      }
      sub_100083E60((void *)a1, @"WiFiMacRandomizationInternalUI", *v6, 0);
    }
    *(unsigned char *)(a1 + 376) = a2;
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000006FLL;
    context[2] = v4;
    context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  }
}

void sub_1000A9770(uint64_t a1, const __CFArray *a2)
{
  if (a1)
  {
    if (a2 && *(unsigned char *)(a1 + 1328))
    {
      *(void *)(a1 + 800) = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, a2);
      context[0] = a1;
      context[1] = 0xAAAAAAAA0000007ELL;
      context[2] = 0;
      context[3] = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: manager is NULL" args:("WiFiManagerSetAmbiguousSSIDs")];
    }
  }
}

void sub_1000A9854(_DWORD *a1, const __CFDictionary *a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v5 = CFDateCreate(kCFAllocatorDefault, Current);
  int v6 = 0;
  v88[0] = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"enabled");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, (char *)v88 + 4);
      unsigned int v8 = HIDWORD(v88[0]);
      if (HIDWORD(v88[0]))
      {
        unsigned int v9 = 1;
      }
      else
      {
        unsigned int v9 = 0;
        *((void *)a1 + 55) = 0x4008000000000000;
        *((void *)a1 + 57) = 0x1400000002;
        a1[116] = 2;
        *(_OWORD *)(a1 + 95) = xmmword_1001CB480;
        a1[99] = 1209600;
        a1[100] = 86400;
      }
      if (v8 > 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v9;
      }
      BOOL v87 = v8 != *((unsigned __int8 *)a1 + 376);
      sub_1000A9674((uint64_t)a1, v10);
    }
    else
    {
      BOOL v87 = 0;
    }
    CFStringRef theString2 = (const __CFString *)CFDictionaryGetValue(a2, @"privateMacNetwork");
    CFNumberRef otherNumber = (CFNumberRef)CFDictionaryGetValue(a2, @"setSwitchState");
    CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(a2, @"scanTimeout");
    if (v11) {
      CFNumberGetValue(v11, kCFNumberIntType, a1 + 95);
    }
    CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a2, @"migrationInterval");
    if (v12) {
      CFNumberGetValue(v12, kCFNumberIntType, a1 + 96);
    }
    CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a2, @"migrationAttempts");
    if (v13) {
      CFNumberGetValue(v13, kCFNumberIntType, v88);
    }
    CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a2, @"keyRotationInterval");
    if (v14)
    {
      CFNumberGetValue(v14, kCFNumberIntType, a1 + 98);
      sub_100083E60(a1, @"RotationKeyDateMacRandomisation", v5, 0);
    }
    CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(a2, @"inactiveNetworkInterval");
    if (v15) {
      CFNumberGetValue(v15, kCFNumberIntType, a1 + 99);
    }
    CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(a2, @"nonTrustworthyInactiveNetworkInterval");
    if (v16) {
      CFNumberGetValue(v16, kCFNumberIntType, a1 + 100);
    }
    CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(a2, @"makeMigratedNetwork");
    int v18 = a1[95];
    if (v18 <= 0)
    {
      int v18 = 1800;
      a1[95] = 1800;
    }
    int v19 = a1[96];
    if (!v19 || v19 < v18)
    {
      a1[96] = 86400;
      int v19 = 86400;
    }
    if (LODWORD(v88[0])) {
      a1[97] = v88[0];
    }
    int v20 = a1[98];
    if (v20 <= 0)
    {
      a1[98] = 86400;
      int v20 = 86400;
    }
    if ((int)a1[99] <= 0) {
      a1[99] = 1209600;
    }
    if ((int)a1[100] <= 0) {
      a1[100] = 86400;
    }
    id v21 = *((void *)a1 + 62);
    if (v21)
    {
      if (v20 > v19 || v20 > v18) {
        int v23 = v19;
      }
      else {
        int v23 = v20;
      }
      if (v18 > v19 || v18 > v20) {
        int v18 = v23;
      }
      unsigned int v25 = v18 - 1;
      unsigned int v26 = v18 >> 1;
      if (v25 >= 0x3C) {
        unsigned int v26 = 60;
      }
      uint64_t v27 = 1000000000 * v26;
      dispatch_time_t v28 = dispatch_time(0, v27);
      dispatch_source_set_timer(v21, v28, v27, 0);
    }
    if (v87 && !*((unsigned char *)a1 + 376)) {
      sub_1000AA4D8((uint64_t)a1);
    }
    CFArrayRef v29 = (const __CFArray *)sub_100083F8C((uint64_t)a1);
    if (v29)
    {
      CFArrayRef v30 = v29;
      CFIndex Count = CFArrayGetCount(v29);
      if (Count >= 1)
      {
        CFIndex v31 = 0;
        int v79 = 0;
        uint64_t v82 = 0;
        CFBooleanRef v32 = kCFBooleanFalse;
        if (theString2) {
          BOOL v33 = otherNumber == 0;
        }
        else {
          BOOL v33 = 1;
        }
        int v34 = !v33;
        int v85 = v34;
        CFDateRef v81 = v5;
        CFArrayRef v84 = v30;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v30, v31);
          if (!ValueAtIndex || (uint64_t v36 = ValueAtIndex, v37 = CFGetTypeID(ValueAtIndex), v37 != sub_1000C5C14()))
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3 message:@"%s: WFMacRandomisation : knownNetwork is invalid" : @"WiFiManagerSetMacRandomisationParams"];
            }
            goto LABEL_138;
          }
          CFBooleanRef v38 = (const __CFBoolean *)sub_10001E404((uint64_t)v36, @"MacAddressRandomisationTagMigratedNetwork");
          if (v38 && v38 == kCFBooleanTrue)
          {
            sub_10001A610((uint64_t)v36, @"PrivateMacClassifyInterval", (int)a1[96]);
            sub_10001A610((uint64_t)v36, @"MacAddressRandomisationClassificationAttempts", SLODWORD(v88[0]));
            if (sub_10001E404((uint64_t)v36, @"PrivateMacJoinDateAfterUpgrade")) {
              sub_10001C6A4((uint64_t)v36, @"PrivateMacJoinDateAfterUpgrade", v5);
            }
          }
          else
          {
            CFBooleanRef v39 = (const __CFBoolean *)sub_10001E404((uint64_t)v36, @"PresentInKnownNetworks");
            CFBooleanRef v32 = v39;
            if (v39 && v39 == kCFBooleanTrue)
            {
              sub_10001C6A4((uint64_t)v36, @"FirstJoinWithNewMacTimestamp", v5);
              CFBooleanRef v32 = kCFBooleanTrue;
            }
          }
          if (v87)
          {
            uint64_t v40 = sub_10001E404((uint64_t)v36, @"PRIVATE_MAC_ADDRESS");
            if (v40)
            {
              id v41 = v40;
              CFTypeID TypeID = CFDictionaryGetTypeID();
              BOOL v33 = TypeID == CFGetTypeID(v41);
              CFArrayRef v30 = v84;
              if (v33)
              {
                MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, (CFDictionaryRef)v41);
                if (!MutableCopy) {
                  goto LABEL_138;
                }
                id v44 = MutableCopy;
                CFBooleanRef v45 = (const __CFBoolean *)sub_10001E404((uint64_t)v36, @"isProfileBasedNetwork");
                if (*((unsigned char *)a1 + 376))
                {
                  if (!v45) {
                    goto LABEL_98;
                  }
                  if (v45 != kCFBooleanTrue) {
                    goto LABEL_98;
                  }
                  CFBooleanRef v46 = (const __CFBoolean *)sub_10001E404((uint64_t)v36, @"PrivateMacProfileDefaultInitialValue");
                  if (!v46) {
                    goto LABEL_98;
                  }
                  if (v46 == kCFBooleanTrue)
                  {
                    CFNumberRef v49 = sub_10005B0B8(1);
                    CFDictionarySetValue(v44, @"PRIVATE_MAC_ADDRESS_TYPE", v49);
                    CFDictionarySetValue(v44, @"PRIVATE_MAC_ADDRESS_VALUE", *((const void **)a1 + 61));
                    CFDictionaryRemoveValue(v44, @"PRIVATE_MAC_ADDRESS_IN_USE");
                    if (v49) {
                      CFRelease(v49);
                    }
                    sub_10001C6A4((uint64_t)v36, @"PrivateMacDefaultToOFF", kCFBooleanTrue);
                    sub_10001C6A4((uint64_t)v36, @"privateMacSuccessfulAssocAtleastOnce", 0);
                    if (qword_10027DD68) {
                      [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Profile Based private MAC disable key reinforced for network <%@>", "WiFiManagerSetMacRandomisationParams", sub_10001A43C(v36) message];
                    }
                  }
                  else
                  {
                    CFNumberRef v47 = sub_10005B0B8(2);
                    CFDictionarySetValue(v44, @"PRIVATE_MAC_ADDRESS_TYPE", v47);
                    CFDictionaryRemoveValue(v44, @"PRIVATE_MAC_ADDRESS_IN_USE");
                    sub_10001C6A4((uint64_t)v36, @"PrivateMacDefaultToOFF", kCFBooleanFalse);
                    sub_10001C6A4((uint64_t)v36, @"RotationKeyMacRandomisation", 0);
                    if (v47) {
                      CFRelease(v47);
                    }
                  }
                  sub_10001C6A4((uint64_t)v36, @"PRIVATE_MAC_ADDRESS", v44);
                  CFArrayRef v30 = v84;
                }
                else
                {
                  if (v45 && v45 == kCFBooleanTrue) {
                    goto LABEL_98;
                  }
                  if (!v32) {
                    goto LABEL_98;
                  }
                  if (v32 != kCFBooleanTrue) {
                    goto LABEL_98;
                  }
                  CFNumberRef v48 = sub_10005B0B8(1);
                  CFDictionarySetValue(v44, @"PRIVATE_MAC_ADDRESS_TYPE", v48);
                  CFDictionarySetValue(v44, @"PRIVATE_MAC_ADDRESS_VALUE", *((const void **)a1 + 61));
                  CFDictionaryRemoveValue(v44, @"PRIVATE_MAC_ADDRESS_IN_USE");
                  id v44 = v48;
                  if (!v48) {
                    goto LABEL_98;
                  }
                }
                CFRelease(v44);
              }
            }
          }
LABEL_98:
          if (v17)
          {
            CFStringRef v51 = (const __CFString *)sub_10001A43C(v36);
            if (CFEqual(v51, v17))
            {
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              CFDataRef v54 = (const __CFData *)*((void *)a1 + 51);
              CFDataRef v53 = (const __CFData *)*((void *)a1 + 52);
              CFDataRef v55 = (const __CFData *)*((void *)a1 + 61);
              CFStringRef v56 = (const __CFString *)sub_10001A43C(v36);
              CFDataRef v57 = sub_1000D1978(v53, v54, v55, v56);
              CFNumberRef v58 = sub_10005B0B8(2);
              CFDictionarySetValue(Mutable, @"PRIVATE_MAC_ADDRESS_TYPE", v58);
              CFDictionarySetValue(Mutable, @"PRIVATE_MAC_ADDRESS_VALUE", v57);
              if (v57) {
                CFRelease(v57);
              }
              if (v58) {
                CFRelease(v58);
              }
              sub_10001C6A4((uint64_t)v36, @"MacAddressRandomisationTagMigratedNetwork", kCFBooleanTrue);
              sub_10001A610((uint64_t)v36, @"MacAddressRandomisationClassificationAttempts", (int)a1[97]);
              sub_10001A610((uint64_t)v36, @"PrivateMacClassifyInterval", (int)a1[96]);
              sub_10001C6A4((uint64_t)v36, @"PRIVATE_MAC_ADDRESS", Mutable);
              sub_10001C6A4((uint64_t)v36, @"RotationKeyUsed", *((const void **)a1 + 51));
              sub_10001C6A4((uint64_t)v36, @"PresentInKnownNetworks", kCFBooleanTrue);
              sub_10001C6A4((uint64_t)v36, @"BlockRotation", kCFBooleanTrue);
              sub_10001C6A4((uint64_t)v36, @"PrivateMacFutureMacAddress", 0);
              sub_10001C6A4((uint64_t)v36, @"PrivateMacPrefChanged", 0);
              sub_10001C6A4((uint64_t)v36, @"PrivateMacPrefChangedTimestamp", 0);
              sub_10001C6A4((uint64_t)v36, @"ResetCaptiveProbe", 0);
              sub_10001C6A4((uint64_t)v36, @"ExperiencedFallback", 0);
              sub_10001C6A4((uint64_t)v36, @"privateMacSuccessfulAssocAtleastOnce", 0);
              CFDateRef v5 = v81;
              if (Mutable) {
                CFRelease(Mutable);
              }
              sub_100086F2C((uint64_t)a1, "WiFiManagerSetMacRandomisationParams", 27830);
              uint64_t v82 = (uint64_t)v36;
              CFArrayRef v30 = v84;
            }
          }
          if (v85)
          {
            CFStringRef v59 = (const __CFString *)sub_10001A43C(v36);
            if (CFEqual(v59, theString2))
            {
              CFBooleanRef v60 = (const __CFBoolean *)sub_10001E404((uint64_t)v36, @"PrivateMacControlledDevice");
              if (!v60 || v60 == kCFBooleanFalse)
              {
                CFDictionaryRef v61 = (const __CFDictionary *)sub_10001E404((uint64_t)v36, @"PRIVATE_MAC_ADDRESS");
                CFNumberRef v62 = (const __CFNumber *)CFDictionaryGetValue(v61, @"PRIVATE_MAC_ADDRESS_TYPE");
                CFNumberRef v63 = v62;
                if (!v62 || CFNumberCompare(v62, otherNumber, 0))
                {
                  if (v61) {
                    CFMutableDictionaryRef v64 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v61);
                  }
                  else {
                    CFMutableDictionaryRef v64 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                  }
                  id v65 = v64;
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:3 message:@"%s: WFMacRandomisation : switch toggled using mobilewifitool" : @"WiFiManagerSetMacRandomisationParams"];
                  }
                  CFDictionarySetValue(v65, @"PRIVATE_MAC_ADDRESS_TYPE", otherNumber);
                  if (sub_10001C140(otherNumber) == 1)
                  {
                    CFDictionarySetValue(v65, @"PRIVATE_MAC_ADDRESS_VALUE", *((const void **)a1 + 61));
                    CFDictionaryRemoveValue(v65, @"PRIVATE_MAC_ADDRESS_IN_USE");
                    int v79 = 1;
                  }
                  if (sub_10001C140(v63) == 1)
                  {
                    CFDataRef v68 = (const __CFData *)*((void *)a1 + 51);
                    CFDataRef v67 = (const __CFData *)*((void *)a1 + 52);
                    CFDataRef v69 = (const __CFData *)*((void *)a1 + 61);
                    CFStringRef v70 = (const __CFString *)sub_10001A43C(v36);
                    CFDataRef v71 = sub_1000D1978(v67, v68, v69, v70);
                    if (v71)
                    {
                      CFDataRef v72 = v71;
                      CFDictionarySetValue(v65, @"PRIVATE_MAC_ADDRESS_VALUE", v71);
                      CFRelease(v72);
                    }
                    CFDictionaryRemoveValue(v65, @"PRIVATE_MAC_ADDRESS_IN_USE");
                    sub_10001C6A4((uint64_t)v36, @"RotationKeyUsed", *((const void **)a1 + 51));
                    int v79 = 1;
                    CFDateRef v5 = v81;
                  }
                  sub_10001C6A4((uint64_t)v36, @"PrivateMacPrefChanged", kCFBooleanTrue);
                  sub_10001C6A4((uint64_t)v36, @"PrivateMacPrefChangedTimestamp", v5);
                  sub_10001C6A4((uint64_t)v36, @"PRIVATE_MAC_ADDRESS", v65);
                  if (v65) {
                    CFRelease(v65);
                  }
                }
                CFArrayRef v30 = v84;
              }
            }
          }
          if (Count == ++v31) {
            goto LABEL_130;
          }
        }
      }
      uint64_t v82 = 0;
      int v79 = 0;
LABEL_130:
      if (sub_1000A69BC((uint64_t)a1, v30) && !sub_1000A6B7C((uint64_t)a1, 1, 0))
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WFMacRandomisation : Updated privateMac Params and wrote to flash", "WiFiManagerSetMacRandomisationParams")];
        }
      }
      if (v17)
      {
        CFArrayRef v74 = (const __CFArray *)sub_1000830B8((uint64_t)a1);
        long long v75 = (void *)sub_1000AA660(v74, v82);
        sub_100095E1C((uint64_t)a1, v75, 4);
        long long v76 = sub_10001A5A8(v30, (const void **)v75);
        if (v76) {
          sub_10001C6A4((uint64_t)v76, @"PrivateMacJoinDateAfterUpgrade", 0);
        }
      }
LABEL_138:
      int v6 = v79;
    }
    else
    {
      int v6 = 0;
    }
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Updated Private Mac Params from mobilewifitool at <%@>. scanTimeout = <%d>, keyRotationInterval = <%d>, migrationInterval = <%d>, migrationAttempts = <%d>, inactiveNetworkInterval = <%d>, nonTrustworthyInactiveNetworkInterval = <%d>", "WiFiManagerSetMacRandomisationParams", v5, a1[95], a1[98], a1[96], a1[97], a1[99], a1[100] message];
  }
  if (v6) {
    sub_100086F2C((uint64_t)a1, "WiFiManagerSetMacRandomisationParams", 27911);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1000AA4D8(uint64_t a1)
{
  if (a1)
  {
    CFArrayRef v2 = *(const __CFArray **)(a1 + 352);
    if (v2 && CFArrayGetCount(v2))
    {
      CFArrayRef Copy = CFArrayCreateCopy(kCFAllocatorDefault, *(CFArrayRef *)(a1 + 352));
      CFArrayRef v4 = Copy;
      if (Copy)
      {
        CFIndex Count = CFArrayGetCount(Copy);
        if (Count >= 1)
        {
          CFIndex v6 = Count;
          for (CFIndex i = 0; i != v6; ++i)
          {
            ValueAtIndex = (void *)CFArrayGetValueAtIndex(v4, i);
            if (ValueAtIndex)
            {
              unsigned int v9 = ValueAtIndex;
              CFBooleanRef v10 = (const __CFBoolean *)sub_10001E404((uint64_t)ValueAtIndex, @"PresentInKnownNetworks");
              if (!v10 || v10 != kCFBooleanTrue)
              {
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Removing scan record <%@>", "__WiFiManagerPrivateMacRemoveAllScannedNetworks", sub_10001A43C(v9) message];
                }
                sub_1000AB1D8(a1, (const void **)v9);
              }
            }
          }
        }
      }
    }
    else
    {
      CFArrayRef v4 = 0;
    }
    sub_1000A69BC(a1, *(const __CFArray **)(a1 + 352));
    sub_1000A6B7C(a1, 1, 0);
    if (v4)
    {
      CFRelease(v4);
    }
  }
}

const void *sub_1000AA660(const __CFArray *a1, uint64_t a2)
{
  ValueAtIndex = 0;
  if (a1 && a2)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
        if (sub_1000C8ED4((uint64_t)ValueAtIndex, a2)) {
          break;
        }
        if (v6 == ++v7) {
          return 0;
        }
      }
    }
  }
  return ValueAtIndex;
}

id sub_1000AA6E4(uint64_t a1)
{
  if (a1 && (CFBooleanRef v3 = *(void **)(a1 + 2112)) != 0)
  {
    id v4 = [v3 appInForeground];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Null appStateManager", @"__WiFiManagerIsAppInForeground"];
    }
    id v4 = 0;
  }
  return v4;
}

CFNumberRef sub_1000AA778(const __CFNumber *result, CFDictionaryRef theDict)
{
  if (result)
  {
    if (theDict)
    {
      uint64_t result = (const __CFNumber *)CFDictionaryGetValue(theDict, @"NetworkAppOverride");
      if (result)
      {
        uint64_t valuePtr = 0;
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: setting user interaction override to networking application with mask=0x%llx", "WiFiManagerSetUserInteractionOverride", valuePtr);
        }
        CFBooleanRef v3 = +[WiFiUserInteractionMonitor sharedInstance];
        return (const __CFNumber *)[(WiFiUserInteractionMonitor *)v3 setOverrideApplicationState:valuePtr];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: resetting user interaction overrides" : @"WiFiManagerSetUserInteractionOverride"];
      }
      CFDateRef v5 = +[WiFiUserInteractionMonitor sharedInstance];
      return (const __CFNumber *)[(WiFiUserInteractionMonitor *)v5 resetOverrideStates];
    }
  }
  return result;
}

CFNumberRef sub_1000AA88C(const __CFNumber *result, CFDictionaryRef theDict)
{
  if (result)
  {
    if (theDict)
    {
      CFNumberRef Value = CFDictionaryGetValue(theDict, @"NetworkPropSsidOverride");
      uint64_t result = (const __CFNumber *)CFDictionaryGetValue(theDict, @"NetworkPropOverrideMask");
      if (result)
      {
        uint64_t valuePtr = 0;
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: setting user interaction network override for ssid %@ with mask=0x%llx", "WiFiManagerSetUserInteractionNwOverride", Value, valuePtr message];
        }
        CFDateRef v5 = +[WiFiUserInteractionMonitor sharedInstance];
        [(WiFiUserInteractionMonitor *)v5 updateOverrideNetworkState:Value overrideValue:valuePtr];
        return (const __CFNumber *)[+[WiFiUserInteractionMonitor sharedInstance] dumpOverrideNetworkState];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:message:3, "%s: resetting user interaction network overrides", "WiFiManagerSetUserInteractionNwOverride"];
      }
      CFIndex v7 = +[WiFiUserInteractionMonitor sharedInstance];
      return (const __CFNumber *)[(WiFiUserInteractionMonitor *)v7 resetOverrideNetworkStates];
    }
  }
  return result;
}

uint64_t sub_1000AA9CC(uint64_t a1, const __CFString *a2, int a3, const void *a4)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (!a1)
  {
LABEL_35:
    unsigned int v7 = v5;
    goto LABEL_38;
  }
  unsigned int v7 = 0;
  if (!a2) {
    goto LABEL_38;
  }
  uint64_t v31 = 0;
  CFBooleanRef v32 = 0;
  uint64_t v33 = 0;
  if (*(unsigned char *)(a1 + 376)) {
    LODWORD(v31) = a3;
  }
  if (a4)
  {
    CFTypeID TypeID = CFDataGetTypeID();
    if (TypeID == CFGetTypeID(a4)) {
      CFBooleanRef v32 = a4;
    }
  }
  CFArrayRef v11 = (const __CFArray *)sub_100083F8C(a1);
  CFArrayRef v12 = v11;
  if (v11)
  {
    CFIndex Count = CFArrayGetCount(v11);
    if (Count >= 1)
    {
      CFIndex v14 = Count;
      CFIndex v15 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v12, v15);
        if (!ValueAtIndex) {
          break;
        }
        CFStringRef v17 = ValueAtIndex;
        CFTypeID v18 = CFGetTypeID(ValueAtIndex);
        if (v18 != sub_1000C5C14()) {
          break;
        }
        CFStringRef v19 = (const __CFString *)sub_10001A43C(v17);
        if (CFEqual(v19, a2))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : updating Network <%@> found in PrivateMacCache. Private mac pref is : <%d>", "WiFiManagerSetPrivateMacPrefForScanRecord", v19, v31 message];
          }
          if (sub_1000AAD3C(a1, v17, (uint64_t)&v31))
          {
            int v21 = 0;
            goto LABEL_19;
          }
        }
        if (v14 == ++v15) {
          goto LABEL_18;
        }
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WFMacRandomisation : networkFromPrivateMacCache is invalid", "WiFiManagerSetPrivateMacPrefForScanRecord")];
      }
LABEL_45:
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      goto LABEL_37;
    }
  }
LABEL_18:
  int v21 = 1;
LABEL_19:
  if (!sub_1000A69BC(a1, v12))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: WFMacRandomisation : Unable to Set private mac cache to device manager", "WiFiManagerSetPrivateMacPrefForScanRecord"];
    }
  }
  uint64_t v5 = 1;
  sub_1000A6B7C(a1, 1, 0);
  if (!v21)
  {
    unsigned int v7 = 0;
    uint64_t v6 = 1;
    goto LABEL_38;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    goto LABEL_45;
  }
  CFNumberRef v24 = Mutable;
  CFDictionarySetValue(Mutable, @"SSID_STR", a2);
  unsigned int v25 = sub_100019658((int)kCFAllocatorDefault, v24);
  uint64_t v6 = (uint64_t)v25;
  if (v25)
  {
    CFTypeID v26 = CFGetTypeID(v25);
    if (v26 == sub_1000C5C14()
      && sub_1000AAD3C(a1, (const void *)v6, (uint64_t)&v31)
      && sub_100095E1C(a1, (void *)v6, 2))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Adding new Network <%@> to PrivateMacCache. Private mac pref is : <%d>", "WiFiManagerSetPrivateMacPrefForScanRecord", a2, v31 message];
      }
      uint64_t v5 = 1;
    }
    else
    {
      uint64_t v5 = 0;
    }
    CFRelease(v24);
    CFRelease((CFTypeRef)v6);
    uint64_t v6 = 0;
    goto LABEL_35;
  }
  CFRelease(v24);
  uint64_t v5 = 0;
LABEL_37:
  unsigned int v7 = 0;
LABEL_38:
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Update private mac pref for network <%@> complete with status : <%d>. Found in private mac cache : <%d>, Added to private mac cache : <%d> ", "WiFiManagerSetPrivateMacPrefForScanRecord", a2, v5, v6, v7 message];
  }
  return v5;
}

uint64_t sub_1000AAD3C(uint64_t a1, const void *a2, uint64_t a3)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v7 = CFDateCreate(kCFAllocatorDefault, Current);
  uint64_t v8 = 0;
  CFNumberRef v9 = 0;
  if (!a2 || !a3) {
    goto LABEL_30;
  }
  CFDictionaryRef v10 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"PRIVATE_MAC_ADDRESS");
  CFBooleanRef v11 = (const __CFBoolean *)sub_10001E404((uint64_t)a2, @"MacAddressRandomisationTagMigratedNetwork");
  CFNumberRef v9 = sub_10005B0B8(*(_DWORD *)a3);
  if (v10 && (CFTypeID TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(v10)))
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v10, @"PRIVATE_MAC_ADDRESS_TYPE");
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v10);
    BOOL v15 = 1;
    if (Value && v9) {
      BOOL v15 = CFNumberCompare(Value, v9, 0) == kCFCompareEqualTo;
    }
  }
  else
  {
    MutableCFArrayRef Copy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    BOOL v15 = 1;
  }
  if (MutableCopy)
  {
    if (!v15)
    {
      sub_10001C6A4((uint64_t)a2, @"ResetCaptiveProbe", kCFBooleanTrue);
      if (v11 && v11 == kCFBooleanTrue)
      {
        sub_10001C6A4((uint64_t)a2, @"MacAddressRandomisationTagMigratedNetwork", 0);
        sub_10001C6A4((uint64_t)a2, @"MacAddressRandomisationClassificationAttempts", 0);
        sub_10001C6A4((uint64_t)a2, @"PrivateMacClassifyInterval", 0);
        sub_10001A610((uint64_t)a2, @"FailureCountThresholdCurrent", *(unsigned int *)(a1 + 456));
        CFBooleanRef v11 = kCFBooleanFalse;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Migration keys removed for network <%@> because user toggled Private Mac preference", "__WiFiManagerUpdateNetworkWithPrivateMacInfo", sub_10001A43C(a2) message];
        }
      }
      if (sub_10001E404((uint64_t)a2, @"PrivateMacDefaultToOFF")) {
        sub_10001C6A4((uint64_t)a2, @"PrivateMacDefaultToOFF", 0);
      }
      sub_10001C6A4((uint64_t)a2, @"FeatureOffBySystemForHome", 0);
      sub_10001C6A4((uint64_t)a2, @"FeatureOffBySystemForCarplay", 0);
      sub_10001C6A4((uint64_t)a2, @"FeatureOFFBySystemForFrequentlyUsedNetworks", 0);
      sub_10001C6A4((uint64_t)a2, @"PrivateMacFeatureToggled", kCFBooleanTrue);
      sub_10001C6A4((uint64_t)a2, @"BlockRotation", 0);
      sub_10001C6A4((uint64_t)a2, @"NetworkUsedForSWUpgrade", 0);
      sub_10001C6A4((uint64_t)a2, @"PrivateMacPrefChanged", kCFBooleanTrue);
      sub_10001C6A4((uint64_t)a2, @"PrivateMacPrefChangedTimestamp", v7);
    }
    CFDictionarySetValue(MutableCopy, @"PRIVATE_MAC_ADDRESS_TYPE", v9);
    CFDataRef v17 = (const __CFData *)CFDictionaryGetValue(MutableCopy, @"PRIVATE_MAC_ADDRESS_VALUE");
    unsigned int v18 = sub_10001A6DC(v17);
    if (*(_DWORD *)a3 == 1)
    {
      CFDictionarySetValue(MutableCopy, @"PRIVATE_MAC_ADDRESS_VALUE", *(const void **)(a1 + 488));
    }
    else if (*(void *)(a3 + 8))
    {
      unsigned int v19 = v18;
      CFTypeID v20 = CFDataGetTypeID();
      if (v20 == CFGetTypeID(*(CFTypeRef *)(a3 + 8)) && !v19 && (!v11 || v11 != kCFBooleanTrue))
      {
        CFDictionarySetValue(MutableCopy, @"PRIVATE_MAC_ADDRESS_VALUE", *(const void **)(a3 + 8));
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Accepted Private Mac Address from UI <%@> for network <%@>", "__WiFiManagerUpdateNetworkWithPrivateMacInfo", *(void *)(a3 + 8), sub_10001A43C(a2) message];
        }
        sub_10001C6A4((uint64_t)a2, @"RotationKeyUsed", *(const void **)(a1 + 408));
        sub_10001C6A4((uint64_t)a2, @"MacGenerationTimeStamp", v7);
        sub_10001C6A4((uint64_t)a2, @"ResetCaptiveProbe", kCFBooleanTrue);
        sub_10001C6A4((uint64_t)a2, @"NoAssociationWithNewMac", kCFBooleanTrue);
      }
    }
    sub_10001C6A4((uint64_t)a2, @"PRIVATE_MAC_ADDRESS", MutableCopy);
    CFRelease(MutableCopy);
    uint64_t v8 = 1;
LABEL_30:
    if (!v7) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v8 = 0;
  if (v7) {
LABEL_31:
  }
    CFRelease(v7);
LABEL_32:
  if (v9) {
    CFRelease(v9);
  }
  return v8;
}

void sub_1000AB1D8(uint64_t a1, const void **a2)
{
  uint64_t v8 = 0;
  CFIndex idx = -1;
  if (a1)
  {
    if (a2)
    {
      CFArrayRef v3 = (const __CFArray *)sub_100083F8C();
      if (v3)
      {
        id v4 = v3;
        sub_10001A734(v3, a2, &idx, &v8);
        if (idx != -1)
        {
          uint64_t v6 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            CFDateRef v7 = sub_10001A43C(a2);
            [v6 WFLog:3, "%s WFMacRandomisation : Removed a record : <%@>", "__WiFiManagerPrivateMacRemoveNetwork", v7, v8 message];
          }
          CFArrayRemoveValueAtIndex(v4, idx);
        }
      }
    }
  }
}

void sub_1000AB298(const __CFArray *a1, void *a2, CFIndex *a3, void *a4)
{
  if (!a1) {
    goto LABEL_12;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (!Count) {
    goto LABEL_12;
  }
  if (!a2 || (uint64_t v9 = Count, v10 = CFGetTypeID(a2), v10 != sub_1000C5C14()))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: invalid network ref", "__GetPrivateMacHS20ProvisionedNetworkMatch")];
    }
    goto LABEL_12;
  }
  if (v9 < 1)
  {
LABEL_12:
    CFIndex v11 = -1;
    goto LABEL_13;
  }
  CFIndex v11 = 0;
  while (1)
  {
    ValueAtIndex = (const void **)CFArrayGetValueAtIndex(a1, v11);
    CFBooleanRef v13 = (const __CFBoolean *)sub_10001E404((uint64_t)ValueAtIndex, @"NetworkAddedByProfile");
    if (sub_10001BB2C((BOOL)ValueAtIndex)
      && v13
      && v13 == kCFBooleanTrue
      && sub_1000D14A4(ValueAtIndex, (const void **)a2))
    {
      break;
    }
    if (v9 == ++v11) {
      goto LABEL_12;
    }
  }
LABEL_13:
  if (a4) {
    *a4 = 0;
  }
  if (a3) {
    *a3 = v11;
  }
}

const void *sub_1000AB3E0(uint64_t a1, const void **a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager", @"__WiFiManagerRetrievePrivateMacNetworkVersionFromCache"];
    }
    goto LABEL_11;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: null network", "__WiFiManagerRetrievePrivateMacNetworkVersionFromCache"];
    }
LABEL_11:
    return 0;
  }
  CFArrayRef v3 = (const __CFArray *)sub_100083F8C();
  if (!v3) {
    return 0;
  }

  return sub_10001A5A8(v3, a2);
}

void sub_1000AB4B0(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    id v4 = sub_10001E404(a2, @"BSSID");
    if (v4) {
      sub_10001C6A4(a1, @"BSSID", v4);
    }
    uint64_t v5 = sub_10001E404(a2, @"addedAt");
    if (v5) {
      sub_10001C6A4(a1, @"addedAt", v5);
    }
    if (&_CNForgetSSID)
    {
      if (sub_10001E404(a2, kCNSNetworkWasCaptiveProperty))
      {
        uint64_t v6 = (void *)kCNSNetworkWasCaptiveProperty;
        CFDateRef v7 = sub_10001E404(a2, kCNSNetworkWasCaptiveProperty);
        sub_10001C6A4(a1, v6, v7);
      }
      if (sub_10001E404(a2, kCNSCaptiveNetworkProperty))
      {
        uint64_t v8 = (void *)kCNSCaptiveNetworkProperty;
        uint64_t v9 = sub_10001E404(a2, kCNSCaptiveNetworkProperty);
        sub_10001C6A4(a1, v8, v9);
      }
      if (sub_10001E404(a2, kCNSDisabledByCaptiveProperty) && !sub_10001E404(a1, kCNSDisabledByCaptiveProperty))
      {
        CFTypeID v10 = (void *)kCNSDisabledByCaptiveProperty;
        CFIndex v11 = sub_10001E404(a2, kCNSDisabledByCaptiveProperty);
        sub_10001C6A4(a1, v10, v11);
      }
    }
    BOOL v12 = sub_10001FC1C(a2);
    BOOL v13 = sub_1000C8140(a2);
    BOOL v22 = sub_10001BB2C(a2);
    BOOL v23 = sub_1000CE714(a2);
    CFBooleanRef v24 = (const __CFBoolean *)sub_10001E404(a2, @"PrivateMacDefaultToOFF");
    CFIndex v14 = sub_10001E404(a2, @"DomainName");
    BOOL v15 = sub_10001E404(a2, @"DisplayedOperatorName");
    int v27 = sub_1000199C0(a2);
    CFNumberRef v16 = sub_10001E404(a2, @"PayloadUUID");
    CFDataRef v17 = sub_10001E404(a2, @"PolicyUUID");
    int v25 = sub_10001E954(a2);
    BOOL v26 = sub_1000D2230(a2);
    if (v16) {
      sub_10001C6A4(a1, @"PayloadUUID", v16);
    }
    if (v17) {
      sub_10001C6A4(a1, @"PolicyUUID", v17);
    }
    CFBooleanRef v18 = (CFBooleanRef)sub_10001E404(a2, @"NetworkAddedByProfile");
    if (v12) {
      sub_10001C6A4(a1, @"IsEapNetwork", kCFBooleanTrue);
    }
    if (v18 && v18 == kCFBooleanTrue) {
      sub_10001C6A4(a1, @"NetworkAddedByProfile", v18);
    }
    if (v13) {
      sub_10001C6A4(a1, @"isProfileBasedNetwork", kCFBooleanTrue);
    }
    if (v22) {
      sub_10001C6A4(a1, @"isHs20BasedNetwork", kCFBooleanTrue);
    }
    unsigned int v19 = v15;
    if (v23) {
      sub_10001C6A4(a1, @"isCarrierBundleBased", kCFBooleanTrue);
    }
    CFBooleanRef v20 = v24;
    if (!sub_10001E404(a1, @"PrivateMacDefaultToOFF") && v24)
    {
      if (v24 != kCFBooleanTrue) {
        CFBooleanRef v20 = kCFBooleanFalse;
      }
      sub_10001C6A4(a1, @"PrivateMacDefaultToOFF", v20);
      sub_10001C6A4(a1, @"PrivateMacProfileDefaultInitialValue", v20);
    }
    if (v14) {
      sub_10001C6A4(a1, @"DomainName", v14);
    }
    if (v19) {
      sub_10001C6A4(a1, @"DisplayedOperatorName", v19);
    }
    if (v27) {
      sub_10001C6A4(a1, @"IsCarplayNetwork", kCFBooleanTrue);
    }
    if (v25) {
      sub_10001C6A4(a1, @"PublicAirPlayNetwork", kCFBooleanTrue);
    }
    if (v26)
    {
      int v21 = sub_10001E404(a2, @"AccessoryIdentifier");
      if (v21)
      {
        sub_10001C6A4(a1, @"AccessoryIdentifier", v21);
      }
    }
  }
}

BOOL sub_1000AB8E8(BOOL result)
{
  if (result)
  {
    uint64_t v1 = result;
    return sub_1000C6B08(result) == 1 || sub_1000CF5AC(v1) == 2;
  }
  return result;
}

void sub_1000AB938(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (a2)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        id v4 = Mutable;
        CFNumberRef v5 = sub_10005B0B8(1);
        CFDictionarySetValue(v4, @"PRIVATE_MAC_ADDRESS_TYPE", v5);
        if (v5) {
          CFRelease(v5);
        }
        sub_10001C6A4((uint64_t)a2, @"PRIVATE_MAC_ADDRESS", v4);
        sub_10001C6A4((uint64_t)a2, @"BlockRotation", kCFBooleanTrue);
        CFRelease(v4);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation :%s: Force disabling private MAC for migrated Network : <%@>", "__WiFiManagerPrivateMacForceTurnOffMigratedNetwork", sub_10001A43C(a2) message];
        }
        sub_10001C6A4((uint64_t)a2, @"MacAddressRandomisationTagMigratedNetwork", 0);
        sub_10001C6A4((uint64_t)a2, @"MacAddressRandomisationClassificationAttempts", 0);
        sub_10001C6A4((uint64_t)a2, @"PrivateMacJoinDateAfterUpgrade", 0);
        sub_10001C6A4((uint64_t)a2, @"PrivateMacFeatureTurnedONtoOFF", 0);
        sub_10001C6A4((uint64_t)a2, @"PrivateMacFeatureTurnedONtoOFFTimestamp", 0);
        sub_10001C6A4((uint64_t)a2, @"PrivateMacFeatureTurnedOFFtoON", 0);
        sub_10001C6A4((uint64_t)a2, @"PrivateMacFeatureTurnedOFFtoONTimestamp", 0);
        sub_10001C6A4((uint64_t)a2, @"PrivateMacPrefChanged", 0);
        sub_10001C6A4((uint64_t)a2, @"PrivateMacPrefChangedTimestamp", 0);
      }
    }
  }
}

BOOL sub_1000ABB2C(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    CFBooleanRef v5 = (const __CFBoolean *)sub_10001E404(a2, @"PrivateMacFeatureTurnedONtoOFF");
    CFBooleanRef v6 = (const __CFBoolean *)sub_10001E404(a2, @"PrivateMacFeatureTurnedOFFtoON");
    CFBooleanRef v7 = (const __CFBoolean *)sub_10001E404(a2, @"PrivateMacPrefChanged");
    CFBooleanRef v8 = (CFBooleanRef)sub_10001E404(a2, @"privateMacSuccessfulAssocAtleastOnce");
    CFBooleanRef v9 = (const __CFBoolean *)sub_10001E404(a2, @"PrivateMacDefaultToOFF");
    CFTypeID v10 = sub_10001E404(a2, @"PRIVATE_MAC_ADDRESS");
    if (v10)
    {
      CFIndex v11 = v10;
      if (v8) {
        BOOL v12 = v8 == kCFBooleanTrue;
      }
      else {
        BOOL v12 = 0;
      }
      char v13 = v12;
      CFTypeID TypeID = CFDictionaryGetTypeID();
      CFTypeID v15 = CFGetTypeID(v11);
      BOOL v12 = TypeID == v15;
      BOOL result = TypeID != v15;
      if (v12 && (v13 & 1) == 0)
      {
        if (v6 && v6 == kCFBooleanTrue
          || v5 && v5 == kCFBooleanTrue
          || v7 && v7 == kCFBooleanTrue
          || v9 && v9 == kCFBooleanFalse
          || sub_1000199C0(a2))
        {
          return 0;
        }
        else
        {
          if (v9) {
            BOOL v16 = v9 == kCFBooleanTrue;
          }
          else {
            BOOL v16 = 0;
          }
          return !v16;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1000ABC9C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = 0;
  if (!a1 || !a2) {
    return v2;
  }
  id v4 = (const void **)sub_10001961C((uint64_t)kCFAllocatorDefault, a2);
  CFArrayRef v5 = (const __CFArray *)sub_100083F8C(a1);
  CFIndex Count = CFArrayGetCount(v5);
  if (Count < 1)
  {
    CFArrayRef Copy = 0;
  }
  else
  {
    CFIndex v7 = Count;
    CFArrayRef Copy = CFArrayCreateCopy(kCFAllocatorDefault, *(CFArrayRef *)(a1 + 352));
    if (Copy)
    {
      CFIndex v9 = 0;
      unsigned __int8 v2 = 0;
      do
      {
        ValueAtIndex = (const void **)CFArrayGetValueAtIndex(Copy, v9);
        if (sub_1000D14A4(v4, ValueAtIndex))
        {
          sub_1000AB1D8(a1, ValueAtIndex);
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : %s removed a HS20 network/provisioning <%@>", "__WiFiManagerPrivateMacRemoveHS20Networks", sub_10001A43C(ValueAtIndex) message];
          }
          unsigned __int8 v2 = 1;
        }
        ++v9;
      }
      while (v7 != v9);
      if (!v4) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  unsigned __int8 v2 = 0;
  if (v4) {
LABEL_12:
  }
    CFRelease(v4);
LABEL_13:
  if (Copy) {
    CFRelease(Copy);
  }
  return v2;
}

BOOL sub_1000ABDF4(uint64_t a1, const void **a2, const void **a3)
{
  CFArrayRef v5 = sub_1000AB3E0(a1, a2);
  CFBooleanRef v6 = sub_1000AB3E0(a1, a3);
  BOOL result = 0;
  if (v5)
  {
    if (v6)
    {
      CFDictionaryRef v8 = (const __CFDictionary *)sub_10001E404((uint64_t)v5, @"PRIVATE_MAC_ADDRESS");
      CFDictionaryRef v9 = (const __CFDictionary *)sub_10001E404((uint64_t)v6, @"PRIVATE_MAC_ADDRESS");
      BOOL result = 0;
      if (v8)
      {
        if (v9)
        {
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v8, @"PRIVATE_MAC_ADDRESS_TYPE");
          CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v9, @"PRIVATE_MAC_ADDRESS_TYPE");
          if (Value) {
            BOOL v12 = v11 == 0;
          }
          else {
            BOOL v12 = 1;
          }
          return !v12 && CFNumberCompare(Value, v11, 0) == kCFCompareEqualTo;
        }
      }
    }
  }
  return result;
}

BOOL sub_1000ABECC(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  CFStringRef v8 = (const __CFString *)sub_1000A47CC(a1, a2, a3);
  CFStringRef v9 = (const __CFString *)sub_1000A47CC(a1, a2, a4);
  CFStringRef v10 = (const __CFString *)sub_1000A4AF4(a1, a2, a3);
  CFStringRef v11 = (const __CFString *)sub_1000A4AF4(a1, a2, a4);
  if (v8)
  {
    if (CFStringCompare(v8, kSCValNetIPv4ConfigMethodDHCP, 0)) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = v9 == 0;
    }
    BOOL v14 = 0;
    if (!v12)
    {
      BOOL v13 = CFStringCompare(v9, kSCValNetIPv4ConfigMethodDHCP, 0) || v10 == 0;
      if (!v13
        && CFEqual(v10, kSCValNetIPv6ConfigMethodAutomatic)
        && v11
        && CFEqual(v11, kSCValNetIPv6ConfigMethodAutomatic))
      {
        BOOL v14 = 1;
      }
    }
    CFRelease(v8);
    if (!v9) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  BOOL v14 = 0;
  if (v9) {
LABEL_16:
  }
    CFRelease(v9);
LABEL_17:
  if (v10) {
    CFRelease(v10);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v14;
}

__CFDictionary *sub_1000AC014(unsigned int *a1)
{
  if (!a1) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    BOOL valuePtr = *((unsigned char *)a1 + 376) != 0;
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, @"enabled", v3);
    if (v3) {
      CFRelease(v3);
    }
    CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 95);
    if (v4)
    {
      CFNumberRef v5 = v4;
      CFDictionaryAddValue(Mutable, @"scanTimeout", v4);
      CFRelease(v5);
    }
    CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 96);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionaryAddValue(Mutable, @"migrationInterval", v6);
      CFRelease(v7);
    }
    CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 97);
    if (v8)
    {
      CFNumberRef v9 = v8;
      CFDictionaryAddValue(Mutable, @"migrationAttempts", v8);
      CFRelease(v9);
    }
    CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 98);
    if (v10)
    {
      CFNumberRef v11 = v10;
      CFDictionaryAddValue(Mutable, @"keyRotationInterval", v10);
      CFRelease(v11);
    }
    CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 99);
    if (v12)
    {
      CFNumberRef v13 = v12;
      CFDictionaryAddValue(Mutable, @"inactiveNetworkInterval", v12);
      CFRelease(v13);
    }
    CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 100);
    if (v14)
    {
      CFNumberRef v15 = v14;
      CFDictionaryAddValue(Mutable, @"nonTrustworthyInactiveNetworkInterval", v14);
      CFRelease(v15);
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"WFMacRandomisation : Returning parameters to client: enabled <%d>, scanTimeOut <%d>, keyRotationInterval <%d>, migrationClassificationInterval <%d>, inactiveNetworkInterval <%d>, nonTrustworthyInactiveNetworkInterval <%d>", *((unsigned __int8 *)a1 + 376), a1[95], a1[98], a1[96], a1[99], a1[100]];
    }
  }
  return Mutable;
}

CFNumberRef sub_1000AC254(uint64_t a1, const __CFString *a2)
{
  CFNumberRef v2 = 0;
  if (a1 && a2)
  {
    CFArrayRef v4 = (const __CFArray *)sub_100083F8C(a1);
    if (v4)
    {
      CFArrayRef v5 = v4;
      CFIndex Count = CFArrayGetCount(v4);
      if (Count < 1)
      {
        CFNumberRef v2 = 0;
      }
      else
      {
        CFIndex v7 = Count;
        CFIndex v8 = 0;
        CFNumberRef v2 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v5, v8);
          CFStringRef v10 = (const __CFString *)sub_10001A43C(ValueAtIndex);
          if (CFEqual(v10, a2))
          {
            CFDictionaryRef v11 = (const __CFDictionary *)sub_10001E404((uint64_t)ValueAtIndex, @"PRIVATE_MAC_ADDRESS");
            if (v11)
            {
              CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v11, @"PRIVATE_MAC_ADDRESS_TYPE");
              CFNumberRef v2 = sub_10001C140(Value);
            }
          }
          ++v8;
        }
        while (v7 != v8);
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : Returning parameters to client for network [%@]: privateMacSwitchState <%d>", a2, v2 message];
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_1000AC374(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v2[0] = a1;
    v2[1] = 0xAAAAAAAA00000070;
    v2[2] = a2;
    void v2[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  }
}

uint64_t sub_1000AC3CC(uint64_t a1, const void *a2)
{
  if (!a1) {
    goto LABEL_24;
  }
  if (!a2) {
    goto LABEL_24;
  }
  CFStringRef v4 = (const __CFString *)sub_10001A43C(a2);
  if (!v4) {
    goto LABEL_24;
  }
  CFStringRef v5 = v4;
  CFStringRef v6 = (const __CFString *)sub_10001E404((uint64_t)a2, @"UpdateReason");
  if (!v6) {
    goto LABEL_24;
  }
  CFStringRef v7 = v6;
  CFTypeID v8 = CFGetTypeID(v6);
  if (v8 != CFStringGetTypeID()) {
    goto LABEL_24;
  }
  if (CFEqual(v7, @"UpdatePrivateMacReasonMigration"))
  {
    if (CFStringCompare(@"Apple Store", v5, 0))
    {
      uint64_t v9 = a1;
      CFStringRef v10 = (void *)a2;
      uint64_t v11 = 4;
      goto LABEL_20;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : Skipping migration for network <%@>", v5 message];
    }
    goto LABEL_23;
  }
  if (CFEqual(v7, @"ProfileAddition"))
  {
    uint64_t v9 = a1;
    CFStringRef v10 = (void *)a2;
    uint64_t v11 = 7;
    goto LABEL_20;
  }
  if (CFEqual(v7, @"UpdatePrivateMacReasonMigrateToRotation"))
  {
    if (CFStringCompare(@"Apple Store", v5, 0))
    {
      uint64_t v9 = a1;
      CFStringRef v10 = (void *)a2;
      uint64_t v11 = 9;
      goto LABEL_20;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : Skipping rotation migration for network <%@>", v5 message];
    }
LABEL_23:
    goto LABEL_24;
  }
  if (CFEqual(v7, @"UpdatePrivateMacReasonMigrateToTriState"))
  {
    uint64_t v9 = a1;
    CFStringRef v10 = (void *)a2;
    uint64_t v11 = 10;
    goto LABEL_20;
  }
  if (CFStringCompare(v7, @"UpdatePrivateMacReasonLegacyCarplay", 0))
  {
LABEL_24:
    uint64_t v13 = 1;
    goto LABEL_25;
  }
  uint64_t v9 = a1;
  CFStringRef v10 = (void *)a2;
  uint64_t v11 = 12;
LABEL_20:
  uint64_t v13 = sub_100095E1C(v9, v10, v11);
LABEL_25:
  sub_10001C6A4((uint64_t)a2, @"UpdateReason", 0);
  return v13;
}

void sub_1000AC5D8(uint64_t a1, int a2)
{
  CFStringRef v5 = sub_1000A2050((const __CFArray *)a1);
  CFStringRef v6 = v5;
  if (a1)
  {
    if (v5)
    {
      CFStringRef v7 = *(const void ***)(a1 + 472);
      if (v7)
      {
        if (sub_1000D14A4(v7, (const void **)v6))
        {
          CFDateRef v8 = (const __CFDate *)sub_10001CD58(v6);
          CFDateRef v9 = (const __CFDate *)sub_10001CD58(*(const void **)(a1 + 472));
          if (!v8 || !v9 || CFDateGetTimeIntervalSinceDate(v8, v9) < 1.0)
          {
            CFStringRef v10 = (CFBooleanRef *)&kCFBooleanTrue;
            if (!a2) {
              CFStringRef v10 = (CFBooleanRef *)&kCFBooleanFalse;
            }
            sub_10009C2E8(a1, *(void **)(a1 + 472), @"isBackhaulLinkUp", *v10);
            uint64_t v11 = sub_10001A5A8(*(const __CFArray **)(a1 + 352), (const void **)v6);
            if (!a2 && v11)
            {
              unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
              unsigned int v13 = 7;
              sub_1000570A8((uint64_t)v11, (uint64_t)&v13);
              sub_100056E00(&v13);
            }
          }
        }
      }
    }
  }
  CFNumberRef v12 = *(const void **)(a1 + 472);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 472) = 0;
  }
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t sub_1000AC700(const __CFArray *a1, const void *a2)
{
  CFStringRef v4 = sub_1000A2050(a1);
  CFStringRef v5 = v4;
  if (!a1 || !a2 || !*((unsigned char *)a1 + 376) || !v4)
  {
    uint64_t v16 = 0;
    if (!v4) {
      return v16;
    }
    goto LABEL_24;
  }
  if (!sub_1000C8ED4((uint64_t)a2, (uint64_t)v4))
  {
    unint64_t v14 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFNumberRef v15 = sub_10001A43C(v5);
      [v14 WFLog:3, "%s: WFMacRandomisation : dont request quick probe check. This is a different network. Current Network <%@>, request for network <%@>", "WiFiManagerPrivateMacIsQuickProbeRequired", v15, sub_10001A43C(a2) message];
    }
    goto LABEL_12;
  }
  CFStringRef v6 = sub_1000AB3E0((uint64_t)a1, (const void **)v5);
  if (!v6) {
    goto LABEL_23;
  }
  uint64_t v7 = (uint64_t)v6;
  CFDictionaryRef v8 = (const __CFDictionary *)sub_10001E404((uint64_t)v6, @"PRIVATE_MAC_ADDRESS");
  if (v8 && (CFDictionaryRef v9 = v8, TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(v9)))
  {
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v9, @"PRIVATE_MAC_ADDRESS_VALUE");
    unsigned int v12 = sub_10001A6DC(Value);
  }
  else
  {
    unsigned int v12 = 1;
  }
  CFBooleanRef v17 = (const __CFBoolean *)sub_10001E404(v7, @"MacAddressRandomisationTagMigratedNetwork");
  if (!sub_1000C74BC(v7))
  {
    BOOL v18 = sub_1000C7514(v7);
    if (v17) {
      goto LABEL_17;
    }
LABEL_23:
    uint64_t v16 = 0;
    goto LABEL_24;
  }
  BOOL v18 = 1;
  if (!v17) {
    goto LABEL_23;
  }
LABEL_17:
  uint64_t v16 = 0;
  if (v17 != kCFBooleanTrue || !v12) {
    goto LABEL_24;
  }
  uint64_t v16 = qword_10027DD68;
  if (!v18)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Requesting early expiry probe check for network <%@>", "WiFiManagerPrivateMacIsQuickProbeRequired", sub_10001A43C(v5) message];
    }
    uint64_t v16 = 1;
    goto LABEL_13;
  }
  if (qword_10027DD68)
  {
    [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Not requesting early expiry probe check for network <%@> becuase it was a captive network", "WiFiManagerPrivateMacIsQuickProbeRequired", sub_10001A43C(v5), v20 message];
LABEL_12:
    uint64_t v16 = 0;
  }
LABEL_13:
LABEL_24:
  CFRelease(v5);
  return v16;
}

void sub_1000AC914(const __CFArray *a1, const void *a2, unsigned int a3)
{
  CFStringRef v6 = sub_1000A2050(a1);
  uint64_t v7 = v6;
  if (a2 && a1 && v6)
  {
    BOOL v8 = sub_1000C8ED4((uint64_t)a2, (uint64_t)v6);
    CFStringRef v10 = (void *)qword_10027DD68;
    if (v8)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Early probe request for network <%@>. Result <%hhu>", "WiFiManagerPrivateMacProbeResult", sub_10001A43C(v7), a3 message];
      }
      uint64_t v11 = sub_1000AB3E0((uint64_t)a1, (const void **)v7);
      if (!v11) {
        goto LABEL_17;
      }
      if (!a3)
      {
        uint64_t v15 = (uint64_t)v11;
        CFBooleanRef v16 = (const __CFBoolean *)sub_10001E404((uint64_t)v11, @"MacAddressRandomisationTagMigratedNetwork");
        if (v16 && v16 == kCFBooleanTrue)
        {
          sub_1000ACAFC((uint64_t)v16, (const void **)v7, (uint64_t)a1);
          sub_100086F2C((uint64_t)a1, "WiFiManagerPrivateMacProbeResult", 30462);
          unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
          unsigned int v17 = 4;
          sub_1000570A8(v15, (uint64_t)&v17);
          sub_100056E00(&v17);
        }
        goto LABEL_17;
      }
      if (sub_100095E1C((uint64_t)a1, v7, 6))
      {
LABEL_17:
        CFRelease(v7);
        return;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Unable to add assoc done network (%@) after probe to Private Mac network List", sub_10001A43C(v7) message];
      }
      unsigned int v13 = v12;
    }
    else
    {
      if (qword_10027DD68)
      {
        unint64_t v14 = sub_10001A43C(v7);
        [v10 WFLog:3, "%s: WFMacRandomisation : Ignore early probe timeout. This is a different network. Current Network <%@>, probed network <%@>", "WiFiManagerPrivateMacProbeResult", v14, sub_10001A43C(a2) message];
      }
      unsigned int v13 = v9;
    }
    goto LABEL_17;
  }
  if (v6) {
    goto LABEL_17;
  }
}

void sub_1000ACAFC(uint64_t a1, const void **a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFStringRef v6 = sub_1000AB3E0(a3, a2);
  if (a2 && a3 && ((uint64_t v7 = (uint64_t)v6, Mutable) ? (v8 = v6 == 0) : (v8 = 1), !v8))
  {
    CFBooleanRef v9 = (const __CFBoolean *)sub_10001E404((uint64_t)v6, @"MacAddressRandomisationTagMigratedNetwork");
    CFBooleanRef v10 = v9;
    if (v9 && v9 == kCFBooleanTrue)
    {
      CFDictionarySetValue(Mutable, @"PRIVATE_MAC_ADDRESS_IN_USE", *(const void **)(a3 + 488));
      CFDictionarySetValue(Mutable, @"PRIVATE_MAC_ADDRESS_VALUE", *(const void **)(a3 + 488));
      sub_10001C6A4(v7, @"PrivateMacFutureMacAddress", 0);
      sub_10001C6A4(v7, @"NetworkUsedForSWUpgrade", 0);
      CFNumberRef v11 = sub_10005B0B8(1);
      CFDictionarySetValue(Mutable, @"PRIVATE_MAC_ADDRESS_TYPE", v11);
      if (v11) {
        CFRelease(v11);
      }
      sub_10001C6A4(v7, @"ExperiencedFallback", kCFBooleanTrue);
      sub_10001C6A4(v7, @"ResetCaptiveProbe", kCFBooleanTrue);
      sub_10009C2E8(a3, a2, @"PRIVATE_MAC_ADDRESS", Mutable);
      CFBooleanRef v10 = kCFBooleanTrue;
    }
  }
  else
  {
    if (!Mutable) {
      return;
    }
    CFBooleanRef v10 = 0;
  }
  CFRelease(Mutable);
  if (v10 && v10 == kCFBooleanTrue)
  {
    int v12 = sub_10009C2E8(a3, a2, @"MacAddressRandomisationClassificationAttempts", kCFBooleanTrue);
    if (qword_10027DD68)
    {
      if (v12) {
        unint64_t v14 = "%s: WFMacRandomisation : Migrated Network <%@> falling back to physical Mac. Successfully written to cache.";
      }
      else {
        unint64_t v14 = "%s: WFMacRandomisation : Migrated Network <%@> falling back to physical Mac. But Unable to write to cache";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, v14, "__WiFiManagerMacAddressFallbackCallback", sub_10001A43C(a2));
    }
  }
}

void sub_1000ACD3C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    CFNumberRef v3 = (id *)&qword_10027DD68;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: resetting network settings" args:("WiFiManagerResetNetworkSettings")];
    }
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    if (Mutable)
    {
      CFArrayRef v4 = sub_10008EE94(v1);
      CFArrayRef v56 = v4;
      uint64_t v57 = v1;
      if (!v4) {
        goto LABEL_40;
      }
      CFArrayRef v5 = v4;
      CFIndex Count = CFArrayGetCount(v4);
      if (Count < 1) {
        goto LABEL_40;
      }
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      int v9 = 0;
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v5, v8);
        if (ValueAtIndex)
        {
          CFNumberRef v11 = ValueAtIndex;
          if (sub_1000C8140((uint64_t)ValueAtIndex))
          {
            int v12 = sub_10001A43C(v11);
            if (v12) {
              CFArrayAppendValue(Mutable, v12);
            }
            int v9 = 1;
          }
          else
          {
            sub_10009A098(v1, v11, 13);
            int v13 = sub_1000CD794((uint64_t)v11);
            uint64_t v15 = v3;
            id v16 = *v3;
            if (v13 == 2)
            {
              if (v16) {
                [v16 WFLog:4, "%s: %@ is CarPlayUserConfigured, not removing password", "WiFiManagerResetNetworkSettings", sub_10001A43C(v11) message];
              }
              CFNumberRef v3 = v15;
            }
            else
            {
              if (v16) {
                [v16 WFLog:4, "%s: Set password not syncable for %@", "WiFiManagerResetNetworkSettings", sub_10001A43C(v11) message];
              }
              sub_1000C967C();
              CFNumberRef v3 = v15;
              if (*v15) {
                [*v15 WFLog:4, "%s: REMOVE password for %@", "WiFiManagerResetNetworkSettings", sub_10001A43C(v11) message];
              }
              sub_1000C94E0(v11);
            }
            CFArrayRef v5 = v56;
            uint64_t v1 = v57;
            if (&_EAPTLSRemoveTrustExceptionsBindings && sub_10001FC1C((uint64_t)v11))
            {
              sub_10001A43C(v11);
              EAPTLSRemoveTrustExceptionsBindings();
            }
          }
        }
        ++v8;
      }
      while (v7 != v8);
      if (v9)
      {
        if (*v3) {
          [*v3 WFLog:3 message:@"%s: device has profile based networks" :@"WiFiManagerResetNetworkSettings"];
        }
        CFDictionaryRef v19 = *(const __CFDictionary **)(v1 + 208);
        CFAllocatorRef v20 = kCFAllocatorDefault;
        if (v19)
        {
          CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (v21)
          {
            BOOL v22 = v21;
            CFIndex v23 = CFArrayGetCount(Mutable);
            if (v23 >= 1)
            {
              CFIndex v24 = v23;
              for (CFIndex i = 0; i != v24; ++i)
              {
                BOOL v26 = CFArrayGetValueAtIndex(Mutable, i);
                CFDataRef Value = CFDictionaryGetValue(v19, v26);
                if (*v3) {
                  [*v3 WFLog:3, "%s: preserving network set for %@ (%@)", "WiFiManagerResetNetworkSettings", v26, Value message];
                }
                if (v26 && Value) {
                  CFDictionarySetValue(v22, v26, Value);
                }
              }
            }
            [+[NSUserDefaults standardUserDefaults] setObject:v22 forKey:@"Custom network settings"];
            CFRelease(v22);
            uint64_t v1 = v57;
          }
        }
      }
      else
      {
LABEL_40:
        if (*v3) {
          [*v3 WFLog:3 message:@"%s: removing custom network settings" :@"WiFiManagerResetNetworkSettings"];
        }
        [+[NSUserDefaults standardUserDefaults] setObject:0 forKey:@"Custom network settings"];
        CFAllocatorRef v20 = kCFAllocatorDefault;
      }
      sub_10009317C((void *)v1, @"AllowEnable", 0);
      sub_10009317C((void *)v1, @"DeviceUUID", 0);
      sub_1000A8020(v1, 0);
      if (*v3) {
        [*v3 WFLog:3 message:@"%s: WFMacRandomisation : Special Handling for Private MAC Networks" : @"WiFiManagerResetNetworkSettings"];
      }
      sub_1000AA4D8(v1);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFDateRef v32 = CFDateCreate(v20, Current);
      CFArrayRef v33 = (const __CFArray *)sub_100083F8C(v1);
      if (v33)
      {
        CFArrayRef v34 = v33;
        CFIndex v35 = CFArrayGetCount(v33);
        if (v35)
        {
          CFIndex v36 = v35;
          CFDateRef v55 = v32;
          if (v35 >= 1)
          {
            for (CFIndex j = 0; v36 != j; ++j)
            {
              CFBooleanRef v38 = CFArrayGetValueAtIndex(v34, j);
              if (!v38) {
                continue;
              }
              CFBooleanRef v39 = v38;
              CFBooleanRef v40 = (const __CFBoolean *)sub_10001E404((uint64_t)v38, @"isProfileBasedNetwork");
              if (!v40) {
                continue;
              }
              if (v40 != kCFBooleanTrue) {
                continue;
              }
              CFBooleanRef v41 = (const __CFBoolean *)sub_10001E404((uint64_t)v39, @"PrivateMacProfileDefaultInitialValue");
              CFDictionaryRef v42 = (const __CFDictionary *)sub_10001E404((uint64_t)v39, @"PRIVATE_MAC_ADDRESS");
              MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(v20, 0, v42);
              if (!MutableCopy) {
                continue;
              }
              id v44 = MutableCopy;
              if (v41)
              {
                if (v41 == kCFBooleanTrue)
                {
                  CFNumberRef v51 = sub_10005B0B8(1);
                  CFDictionarySetValue(v44, @"PRIVATE_MAC_ADDRESS_TYPE", v51);
                  CFDictionarySetValue(v44, @"PRIVATE_MAC_ADDRESS_VALUE", *(const void **)(v1 + 488));
                  CFDictionaryRemoveValue(v44, @"PRIVATE_MAC_ADDRESS_IN_USE");
                  sub_10001C6A4((uint64_t)v39, @"PrivateMacDefaultToOFF", kCFBooleanTrue);
                  sub_10001C6A4((uint64_t)v39, @"privateMacSuccessfulAssocAtleastOnce", 0);
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Profile Based private MAC disable key reinforced for network <%@>", "__WiFiManagerPrivateMacProcessProfileBasedNetworks", sub_10001A43C(v39) message];
                  }
                  CFAllocatorRef v20 = kCFAllocatorDefault;
                  if (!v51) {
                    goto LABEL_65;
                  }
                }
                else
                {
                  CFBooleanRef v45 = (void *)v1;
                  CFNumberRef v46 = sub_10005B0B8(2);
                  CFDictionarySetValue(v44, @"PRIVATE_MAC_ADDRESS_TYPE", v46);
                  CFDictionaryRemoveValue(v44, @"PRIVATE_MAC_ADDRESS_VALUE");
                  CFDictionaryRemoveValue(v44, @"PRIVATE_MAC_ADDRESS_IN_USE");
                  sub_10001C6A4((uint64_t)v39, @"PrivateMacDefaultToOFF", kCFBooleanFalse);
                  sub_10001C6A4((uint64_t)v39, @"RotationKeyMacRandomisation", 0);
                  CFDataRef v48 = (const __CFData *)v45[51];
                  CFDataRef v47 = (const __CFData *)v45[52];
                  CFDataRef v49 = (const __CFData *)v45[61];
                  CFStringRef v50 = (const __CFString *)sub_10001A43C(v39);
                  CFNumberRef v51 = sub_1000D1978(v47, v48, v49, v50);
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Generated private mac address <%@> for profile network<%@> ", "__WiFiManagerPrivateMacProcessProfileBasedNetworks", v51, sub_10001A43C(v39) message];
                  }
                  CFAllocatorRef v20 = kCFAllocatorDefault;
                  if (v46) {
                    CFRelease(v46);
                  }
                  uint64_t v1 = v57;
                  if (!v51) {
                    goto LABEL_65;
                  }
                  CFDictionarySetValue(v44, @"PRIVATE_MAC_ADDRESS_VALUE", v51);
                  sub_10001C6A4((uint64_t)v39, @"MacGenerationTimeStamp", v55);
                  sub_10001C6A4((uint64_t)v39, @"NoAssociationWithNewMac", kCFBooleanTrue);
                  sub_10001C6A4((uint64_t)v39, @"ResetCaptiveProbe", kCFBooleanTrue);
                  sub_10001C6A4((uint64_t)v39, @"RotationKeyUsed", *(const void **)(v57 + 408));
                }
                CFRelease(v51);
              }
LABEL_65:
              sub_10001C6A4((uint64_t)v39, @"PRIVATE_MAC_ADDRESS", v44);
              sub_10001C6A4((uint64_t)v39, @"PrivateMacFeatureTurnedONtoOFF", 0);
              sub_10001C6A4((uint64_t)v39, @"PrivateMacFeatureTurnedONtoOFFTimestamp", 0);
              sub_10001C6A4((uint64_t)v39, @"PrivateMacFeatureTurnedOFFtoON", 0);
              sub_10001C6A4((uint64_t)v39, @"PrivateMacFeatureTurnedOFFtoONTimestamp", 0);
              sub_10001C6A4((uint64_t)v39, @"ResetCaptiveProbe", kCFBooleanTrue);
              sub_10001C6A4((uint64_t)v39, @"isBackhaulLinkUp", 0);
              sub_10001C6A4((uint64_t)v39, @"privateMacSuccessfulAssocAtleastOnce", 0);
              sub_10001A610((uint64_t)v39, @"FailureCountThresholdCurrent", *(unsigned int *)(v1 + 456));
              sub_10001A610((uint64_t)v39, @"FailureCountCurrent", 0);
              sub_10001C6A4((uint64_t)v39, @"PrivateMacPrefChanged", 0);
              sub_10001C6A4((uint64_t)v39, @"PrivateMacPrefChangedTimestamp", 0);
              CFRelease(v44);
            }
          }
          sub_1000A69BC(v1, v34);
          sub_1000A6B7C(v1, 1, 0);
          CFNumberRef v3 = (id *)&qword_10027DD68;
          CFDateRef v32 = v55;
        }
      }
      if (v32) {
        CFRelease(v32);
      }
      sub_10009317C((void *)v1, @"deviceSpecificKeyMacRandomisation", 0);
      sub_10009317C((void *)v1, @"RotationKeyMacRandomisation", 0);
      if (*v3) {
        [*v3 WFLog:3 message:@"%s WFMacRandomisation : Device Specific Key Reset" :@"__WiFiManagerPrivateMacAdjustSettingsOnReset"];
      }
      if (v56) {
        CFRelease(v56);
      }
      CFRelease(Mutable);
    }
  }
}

void sub_1000AD698(uint64_t a1)
{
  if (a1)
  {
    CFArrayRef v2 = *(const __CFArray **)(a1 + 216);
    if (v2)
    {
      if (CFArrayGetCount(v2) >= 1)
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000AD7BC;
        block[3] = &unk_10023EAF8;
        block[4] = a1;
        dispatch_async((dispatch_queue_t)qword_10027DD88, block);
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null manager->networks", @"WiFiManagerPurgeExpiredKnownNetworks"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null manager", @"WiFiManagerPurgeExpiredKnownNetworks"];
    }
  }
}

void sub_1000AD7BC(uint64_t a1)
{
  id v5 = objc_alloc_init((Class)WiFiWalletSource);
  id v2 = [[[v5 expiredWalletIDs] copy];
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    CFArrayRef v4 = *(NSObject **)(v3 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[4] = v2;
    void block[5] = v5;
    block[2] = sub_1000AD888;
    block[3] = &unk_1002409B8;
    block[6] = v3;
    dispatch_async(v4, block);
  }
  else
  {
  }
}

void sub_1000AD888(uint64_t a1)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 48) + 216));
  if (Count >= 1)
  {
    CFIndex v3 = Count;
    for (CFIndex i = 0; i != v3; ++i)
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 48) + 216), i);
      CFStringRef v6 = sub_1000CF848(ValueAtIndex);
      if (v6 && [*(id *)(a1 + 32) containsObject:v6])
      {
        sub_10009A098(*(void *)(a1 + 48), ValueAtIndex, 20);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Purging Known Network : [ %@ ]", "WiFiManagerPurgeExpiredKnownNetworks_block_invoke_2", sub_10001A43C(ValueAtIndex) message];
        }
      }
    }
  }

  CFIndex v8 = *(void **)(a1 + 40);
}

void sub_1000AD99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  context[0] = a2;
  context[1] = a3;
  context[2] = a4;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_1000AD9DC, context);
}

void sub_1000AD9DC(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2 && (id v2 = (void *)a2[1]) != 0)
  {
    CFIndex v3 = (const void *)a2[2];
    uint64_t v4 = *a2;
    sub_10005CA38(a1, v4, v2, v3);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Invalid arguments", "__WiFiManagerDispatchTdConfirmedEvent")];
    }
  }
}

CFArrayRef sub_1000ADA84(const __CFArray *a1)
{
  CFArrayRef result = sub_10000500C(a1);
  if (result)
  {
    CFArrayRef v2 = result;
    ValueAtIndex = CFArrayGetValueAtIndex(result, 0);
    id v4 = sub_1001297F4((uint64_t)ValueAtIndex);
    CFRelease(v2);
    return (const __CFArray *)v4;
  }
  return result;
}

void sub_1000ADAC8(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    if (*(void *)(a1 + 1600) != a2)
    {
      *(void *)(a1 + 1600) = a2;
      if (qword_10027DD68)
      {
        id v5 = "enabled";
        if (!a2) {
          id v5 = "disabled";
        }
        [((id)qword_10027DD68) WFLog:message:3, "%s: Battery saver mode is now %s", "WiFiManagerSetBatterySaveMode", v5];
      }
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000040;
      context[2] = a2;
      void context[3] = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
      [*(id *)(a1 + 2416) updateWowState:*(unsigned char *)(a1 + 1160) != 0 lpasState:*(unsigned char *)(a1 + 1176) != 0 lowPowerState:*(unsigned char *)(a1 + 1162) != 0 batterySaverState:*(void *)(a1 + 1600) != 0];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager", @"WiFiManagerSetBatterySaveMode"];
    }
  }
}

uint64_t sub_1000ADC30(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1600);
}

void sub_1000ADC38(const __CFArray *a1, const __CFBoolean *a2)
{
  id v4 = +[NSUserDefaults standardUserDefaults];
  if (a2)
  {
    id v5 = v4;
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(a2))
    {
      [(NSUserDefaults *)v5 setBool:kCFBooleanTrue == a2 forKey:@"PerpetualWiFiScanEnabled"];
      if (qword_10027DD68)
      {
        CFIndex v8 = "DISABLED";
        if (kCFBooleanTrue == a2) {
          CFIndex v8 = "ENABLED";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Setting perpetual WiFi scan mode %s", v8);
      }
      if (kCFBooleanTrue == a2 && sub_1000A4794(a1))
      {
        sub_100086F2C((uint64_t)a1, "WiFiManagerSetPerpetualWiFiScanSettings", 31907);
      }
    }
  }
}

void sub_1000ADD54()
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: Stand-alone LPAS Test mode is not supported on this platform", "__WiFiManagerSetStandAloneLPASTestMode"];
  }
}

void sub_1000ADDC0(const __CFArray *a1, const void *a2)
{
  int v11 = -1431655766;
  int v12 = -1431655766;
  id v4 = sub_1000A2050(a1);
  CFNumberRef v5 = (const __CFNumber *)sub_10001E404((uint64_t)v4, @"CHANNEL_FLAGS");
  if (v5 && (int valuePtr = 0, CFNumberGetValue(v5, kCFNumberIntType, &valuePtr), (valuePtr & 0x2018) == 0x2000)) {
    int v11 = 1;
  }
  else {
    int v12 = 1;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v12);
  if (v7)
  {
    CFNumberRef v8 = v7;
    CFDictionarySetValue(Mutable, @"6E_NETWORK_TRANSITION", v7);
    CFRelease(v8);
  }
  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v11);
  if (v9)
  {
    CFNumberRef v10 = v9;
    CFDictionarySetValue(Mutable, @"LEGACY_NETWORK_TRANSITION", v9);
    CFRelease(v10);
  }
  if (a2) {
    CFDictionarySetValue(Mutable, @"CHANNEL", a2);
  }
  sub_1000ADF08((uint64_t)a1, (uint64_t)Mutable);
}

void sub_1000ADF08(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v2[0] = a1;
    v2[1] = 0xAAAAAAAA00000086;
    v2[2] = a2;
    void v2[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  }
}

uint64_t sub_1000ADF60(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000087;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

id sub_1000ADFB0(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager" args:("__WiFiManagerGetLocaleCountryCode")];
    }
    return 0;
  }
  if (!*(unsigned char *)(a1 + 2012)) {
    return 0;
  }
  uint64_t v1 = *(void **)(a1 + 192);

  return [v1 getLocaleCountryCode];
}

void sub_1000AE044(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    CFArrayRef v2 = *(void **)(a1 + 192);
    [v2 determineAndSetLocale:a2];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager", @"WiFiManagerDetermineAndSetLocale"];
    }
  }
}

void sub_1000AE0DC(int a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"countryCodeUserDefault");
    if (Value)
    {
      CFStringRef v4 = Value;
      if (CFStringCompare(Value, @"XZ", 0)
        && CFStringCompare(v4, &stru_100248240, 0)
        && CFStringCompare(v4, @"X0", 0)
        && CFStringCompare(v4, @"X2", 0)
        && CFStringCompare(v4, @"X3", 0))
      {
        CFNumberRef v5 = +[NSUserDefaults standardUserDefaults];
        if (v5)
        {
          [(NSUserDefaults *)v5 setObject:theDict forKey:@"countryCodeUserDefaultData"];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, " Skipping saving country code [%@] to user defaults", v4 message];
        }
      }
    }
  }
}

uint64_t sub_1000AE220(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2 = 83;
  if (a1 && a2)
  {
    CFStringRef v4 = *(const void **)(a1 + 2504);
    *(void *)(a1 + 2504) = CFArrayCreateCopy(kCFAllocatorDefault, a2);
    v6[0] = a1;
    v6[1] = 0xAAAAAAAA00000005;
    v6[2] = 0;
    uint64_t v7 = 0;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v6);
    uint64_t v2 = v7;
    if (v7)
    {
      CFRelease(*(CFTypeRef *)(a1 + 2504));
      *(void *)(a1 + 2504) = v4;
    }
    else
    {
      if (v4) {
        CFRelease(v4);
      }
      return 0;
    }
  }
  return v2;
}

NSError *sub_1000AE2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 1784);
  if (v3) {
    return (NSError *)[v3 getServiceFor:a2 withServiceKey:a3];
  }
  else {
    return +[NSError errorWithDomain:CWFManagerErrorDomain code:-3907 userInfo:0];
  }
}

id sub_1000AE304(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL", "WiFiManagerGetMISStats"];
    }
    return 0;
  }
  if (!+[WiFiSoftApUsageMonitor sharedInstance]) {
    return 0;
  }
  uint64_t v1 = +[WiFiSoftApUsageMonitor sharedInstance];

  return [(WiFiSoftApUsageMonitor *)v1 statsDictionary];
}

void sub_1000AE3A4(uint64_t a1)
{
  if (a1)
  {
    if (+[WiFiSoftApUsageMonitor sharedInstance])
    {
      uint64_t v1 = +[WiFiSoftApUsageMonitor sharedInstance];
      [(WiFiSoftApUsageMonitor *)v1 resetStats];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL" arguments:&"WiFiManagerResetMISStats"];
    }
  }
}

__CFArray *sub_1000AE45C(char *a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (Mutable) {
    BOOL v5 = a2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    do
    {
      CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, a1);
      if (v6)
      {
        CFNumberRef v7 = v6;
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v7);
      }
      a1 += 8;
      --a2;
    }
    while (a2);
  }
  return Mutable;
}

void sub_1000AE4FC(uint64_t a1)
{
  sub_1000887D8(a1, *(const void **)(a1 + 32));
  uint64_t v3 = *(NSObject **)(a1 + 1576);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 1576) = 0;
  }
  CFStringRef v4 = *(NSObject **)(a1 + 1536);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 1536) = 0;
  }
  BOOL v5 = *(NSObject **)(a1 + 1488);
  if (v5)
  {
    dispatch_release(v5);
    *(void *)(a1 + 1488) = 0;
  }
  CFNumberRef v6 = *(NSObject **)(a1 + 1336);
  if (v6)
  {
    dispatch_release(v6);
    *(void *)(a1 + 1336) = 0;
  }
  CFNumberRef v7 = *(NSObject **)(a1 + 1872);
  if (v7)
  {
    dispatch_release(v7);
    *(void *)(a1 + 1872) = 0;
  }
  CFNumberRef v8 = *(NSObject **)(a1 + 920);
  if (v8)
  {
    dispatch_release(v8);
    *(void *)(a1 + 920) = 0;
  }
  sub_1000BF25C(a1 + 1800);
  CFNumberRef v9 = *(NSObject **)(a1 + 1360);
  if (v9)
  {
    dispatch_release(v9);
    *(void *)(a1 + 1360) = 0;
  }
  CFNumberRef v10 = *(NSObject **)(a1 + 2352);
  if (v10)
  {
    dispatch_release(v10);
    *(void *)(a1 + 2352) = 0;
  }
  int v11 = *(NSObject **)(a1 + 496);
  if (v11)
  {
    dispatch_release(v11);
    *(void *)(a1 + 496) = 0;
  }
  int v12 = *(NSObject **)(a1 + 432);
  if (v12)
  {
    dispatch_release(v12);
    *(void *)(a1 + 432) = 0;
  }
  io_object_t v13 = *(_DWORD *)(a1 + 968);
  if (v13) {
    IOObjectRelease(v13);
  }
  io_object_t v14 = *(_DWORD *)(a1 + 976);
  if (v14) {
    IOObjectRelease(v14);
  }
  io_object_t v15 = *(_DWORD *)(a1 + 980);
  if (v15) {
    IOObjectRelease(v15);
  }
  io_object_t v16 = *(_DWORD *)(a1 + 1000);
  if (v16) {
    IOObjectRelease(v16);
  }
  io_object_t v17 = *(_DWORD *)(a1 + 1004);
  if (v17) {
    IOObjectRelease(v17);
  }
  io_object_t v18 = *(_DWORD *)(a1 + 1008);
  if (v18) {
    IOObjectRelease(v18);
  }
  CFDictionaryRef v19 = *(void **)(a1 + 2488);
  if (v19)
  {
    [v19 removeAllObjects];
  }
  CFAllocatorRef v20 = *(void **)(a1 + 2496);
  if (v20)
  {
    [v20 removeAllObjects];
  }
  CFMutableDictionaryRef v21 = *(IONotificationPort **)(a1 + 960);
  if (v21) {
    IONotificationPortDestroy(v21);
  }
  BOOL v22 = *(IONotificationPort **)(a1 + 1016);
  if (v22) {
    IONotificationPortDestroy(v22);
  }
  CFIndex v23 = *(const void **)(a1 + 1064);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(a1 + 1064) = 0;
  }
  CFIndex v24 = *(const void **)(a1 + 1072);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(a1 + 1072) = 0;
  }
  int v25 = *(const void **)(a1 + 1080);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(a1 + 1080) = 0;
  }
  BOOL v26 = *(const void **)(a1 + 1096);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a1 + 1096) = 0;
  }
  int v27 = *(const void **)(a1 + 1088);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(a1 + 1088) = 0;
  }

  *(void *)(a1 + 1104) = 0;
  *(void *)(a1 + 1120) = 0;
  dispatch_time_t v28 = *(const void **)(a1 + 208);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(a1 + 208) = 0;
  }
  CFArrayRef v29 = *(const void **)(a1 + 216);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(a1 + 216) = 0;
  }
  CFArrayRef v30 = *(const void **)(a1 + 224);
  if (v30)
  {
    CFRelease(v30);
    *(void *)(a1 + 224) = 0;
  }
  uint64_t v31 = *(const void **)(a1 + 256);
  if (v31)
  {
    CFRelease(v31);
    *(void *)(a1 + 256) = 0;
  }
  CFDateRef v32 = *(const void **)(a1 + 104);
  if (v32)
  {
    CFRelease(v32);
    *(void *)(a1 + 104) = 0;
  }
  CFArrayRef v33 = *(const void **)(a1 + 96);
  if (v33)
  {
    CFRelease(v33);
    *(void *)(a1 + 96) = 0;
  }
  CFArrayRef v34 = *(const void **)(a1 + 136);
  if (v34)
  {
    CFRelease(v34);
    *(void *)(a1 + 136) = 0;
  }
  CFIndex v35 = *(const void **)(a1 + 144);
  if (v35)
  {
    CFRelease(v35);
    *(void *)(a1 + 144) = 0;
  }
  CFIndex v36 = *(const void **)(a1 + 152);
  if (v36)
  {
    CFRelease(v36);
    *(void *)(a1 + 152) = 0;
  }
  CFTypeID v37 = *(const void **)(a1 + 160);
  if (v37)
  {
    CFRelease(v37);
    *(void *)(a1 + 160) = 0;
  }
  CFBooleanRef v38 = *(const void **)(a1 + 176);
  if (v38)
  {
    CFRelease(v38);
    *(void *)(a1 + 176) = 0;
  }
  CFBooleanRef v39 = *(const void **)(a1 + 1168);
  if (v39)
  {
    CFRelease(v39);
    *(void *)(a1 + 1168) = 0;
  }
  CFBooleanRef v40 = *(const void **)(a1 + 1192);
  if (v40)
  {
    CFRelease(v40);
    *(void *)(a1 + 1192) = 0;
  }
  CFBooleanRef v41 = *(const void **)(a1 + 80);
  if (v41)
  {
    CFRelease(v41);
    *(void *)(a1 + 80) = 0;
  }
  CFDictionaryRef v42 = *(const void **)(a1 + 200);
  if (v42)
  {
    CFRelease(v42);
    *(void *)(a1 + 200) = 0;
  }

  *(void *)(a1 + 192) = 0;
  id v43 = *(const void **)(a1 + 1240);
  if (v43)
  {
    CFRelease(v43);
    *(void *)(a1 + 1240) = 0;
  }
  id v44 = *(const void **)(a1 + 1264);
  if (v44)
  {
    CFRelease(v44);
    *(void *)(a1 + 1264) = 0;
  }
  CFBooleanRef v45 = *(const void **)(a1 + 1368);
  if (v45)
  {
    CFRelease(v45);
    *(void *)(a1 + 1368) = 0;
  }
  CFNumberRef v46 = *(const void **)(a1 + 1400);
  if (v46)
  {
    CFRelease(v46);
    *(void *)(a1 + 1400) = 0;
  }
  CFDataRef v47 = *(const void **)(a1 + 1688);
  if (v47)
  {
    CFRelease(v47);
    *(void *)(a1 + 1688) = 0;
  }
  sub_1001852D8(*(void **)(a1 + 1432));
  CFDataRef v48 = *(const void **)(a1 + 1448);
  if (v48)
  {
    CFRelease(v48);
    *(void *)(a1 + 1448) = 0;
  }
  CFDataRef v49 = *(void **)(a1 + 1936);
  if (v49)
  {
    [v49 setHandler:0];
    [*(id *)(a1 + 1936) invalidate];
    *(void *)(a1 + 1936) = 0;
  }
  CFStringRef v50 = *(const void **)(a1 + 1656);
  if (v50)
  {
    CFRelease(v50);
    *(void *)(a1 + 1656) = 0;
  }
  CFNumberRef v51 = *(const void **)(a1 + 1664);
  if (v51)
  {
    CFRelease(v51);
    *(void *)(a1 + 1664) = 0;
  }
  uint64_t v52 = *(NSObject **)(a1 + 1680);
  if (v52)
  {
    dispatch_release(v52);
    *(void *)(a1 + 1680) = 0;
  }
  CFDataRef v53 = *(void **)(a1 + 1944);
  if (v53)
  {
    [v53 invalidate];
    CFDataRef v54 = *(const void **)(a1 + 1944);
    if (v54)
    {
      CFRelease(v54);
      *(void *)(a1 + 1944) = 0;
    }
  }
  CFDateRef v55 = *(const void **)(a1 + 416);
  if (v55)
  {
    CFRelease(v55);
    *(void *)(a1 + 416) = 0;
  }
  CFArrayRef v56 = *(const void **)(a1 + 408);
  if (v56)
  {
    CFRelease(v56);
    *(void *)(a1 + 408) = 0;
  }
  uint64_t v57 = *(const void **)(a1 + 488);
  if (v57)
  {
    CFRelease(v57);
    *(void *)(a1 + 488) = 0;
  }
  CFNumberRef v58 = *(const void **)(a1 + 352);
  if (v58)
  {
    CFRelease(v58);
    *(void *)(a1 + 352) = 0;
  }
  CFStringRef v59 = *(const void **)(a1 + 1608);
  if (v59)
  {
    CFRelease(v59);
    *(void *)(a1 + 1608) = 0;
  }
  CFBooleanRef v60 = *(const void **)(a1 + 1616);
  if (v60)
  {
    CFRelease(v60);
    *(void *)(a1 + 1616) = 0;
  }
  CFDictionaryRef v61 = *(const void **)(a1 + 1960);
  if (v61)
  {
    CFRelease(v61);
    *(void *)(a1 + 1960) = 0;
  }
  CFNumberRef v62 = *(const void **)(a1 + 1968);
  if (v62)
  {
    CFRelease(v62);
    *(void *)(a1 + 1968) = 0;
  }
  CFNumberRef v63 = *(const void **)(a1 + 1976);
  if (v63)
  {
    CFRelease(v63);
    *(void *)(a1 + 1976) = 0;
  }

  *(void *)(a1 + 1624) = 0;
  *(void *)(a1 + 1728) = 0;

  *(void *)(a1 + 1736) = 0;
  *(void *)(a1 + 1744) = 0;

  *(void *)(a1 + 1760) = 0;
  *(void *)(a1 + 1768) = 0;

  *(void *)(a1 + 1840) = 0;
  *(void *)(a1 + 2544) = 0;

  *(void *)(a1 + 1776) = 0;
  CFMutableDictionaryRef v64 = *(void **)(a1 + 1784);
  if (v64)
  {

    *(void *)(a1 + 1784) = 0;
  }
  id v65 = *(void **)(a1 + 1792);
  if (v65)
  {

    *(void *)(a1 + 1792) = 0;
  }
  qword_10027D6C8 = 0;
  id v66 = *(const void **)(a1 + 2080);
  if (v66)
  {
    CFRelease(v66);
    *(void *)(a1 + 2080) = 0;
  }
  CFDataRef v67 = *(const void **)(a1 + 168);
  if (v67)
  {
    CFRelease(v67);
    *(void *)(a1 + 168) = 0;
  }
  CFDataRef v68 = *(const void **)(a1 + 2128);
  if (v68)
  {
    CFRelease(v68);
    *(void *)(a1 + 2128) = 0;
  }
  CFDataRef v69 = *(const void **)(a1 + 320);
  if (v69)
  {
    CFRelease(v69);
    *(void *)(a1 + 320) = 0;
  }
  CFStringRef v70 = *(const void **)(a1 + 2264);
  if (v70)
  {
    CFRelease(v70);
    *(void *)(a1 + 2264) = 0;
  }
  if (&_ct_green_tea_logger_destroy) {
    ct_green_tea_logger_destroy();
  }
  *(void *)(a1 + 2056) = 0;
  CFDataRef v71 = *(const void **)(a1 + 2184);
  if (v71)
  {
    CFRelease(v71);
    *(void *)(a1 + 2184) = 0;
  }
  CFDataRef v72 = *(const void **)(a1 + 2032);
  if (v72)
  {
    CFRelease(v72);
    *(void *)(a1 + 2032) = 0;
  }
  long long v73 = *(const void **)(a1 + 2368);
  if (v73)
  {
    CFRelease(v73);
    *(void *)(a1 + 2368) = 0;
  }
  CFArrayRef v74 = *(const void **)(a1 + 2376);
  if (v74)
  {
    CFRelease(v74);
    *(void *)(a1 + 2376) = 0;
  }
  long long v75 = *(const void **)(a1 + 2384);
  if (v75)
  {
    CFRelease(v75);
    *(void *)(a1 + 2384) = 0;
  }
  long long v76 = *(const void **)(a1 + 2424);
  if (v76)
  {
    CFRelease(v76);
    *(void *)(a1 + 2424) = 0;
  }
  long long v77 = *(const void **)(a1 + 2504);
  if (v77)
  {
    CFRelease(v77);
    *(void *)(a1 + 2504) = 0;
  }
  long long v78 = *(const void **)(a1 + 2512);
  if (v78)
  {
    CFRelease(v78);
    *(void *)(a1 + 2512) = 0;
  }
  int v79 = *(const void **)(a1 + 2528);
  if (v79)
  {
    CFRelease(v79);
    *(void *)(a1 + 2528) = 0;
  }
}

void sub_1000AEABC(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  if (a4)
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 1688), 0);
    unsigned int v9 = [ValueAtIndex sessionBased];
    id v10 = [ValueAtIndex network];
    if (v10)
    {
      id v11 = [ValueAtIndex client];
      if (v11)
      {
        uint64_t v12 = (uint64_t)v11;
        if (!a2)
        {
          sub_10010C8FC(a1, a3);
          if (!v9)
          {
LABEL_14:
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: request.bypassPrompt=%d assocResult=%d", "__WiFiDeviceManagerForcedAssociationCallback", objc_msgSend(ValueAtIndex, "bypassPrompt"), 0)];
            }
            if ([ValueAtIndex bypassPrompt])
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: showing app join notification for %@", "__WiFiDeviceManagerForcedAssociationCallback", v10 message];
              }
              sub_10012C964(a1, v10);
              if (sub_1000D1FFC((uint64_t)v10))
              {
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: accessory network (%@) is unsecured", "__WiFiDeviceManagerForcedAssociationCallback", v10 message];
                }
                uint64_t v22 = 3;
              }
              else
              {
                uint64_t v22 = 1;
              }
              *(void *)error = 0;
              uint64_t v49 = (uint64_t)error;
              uint64_t v50 = 0x3052000000;
              CFNumberRef v51 = sub_100022CD8;
              uint64_t v52 = sub_100022BE8;
              id v53 = (id)0xAAAAAAAAAAAAAAAALL;
              id v53 = [ValueAtIndex bundleId];
              v47[0] = 0;
              v47[1] = v47;
              v47[2] = 0x2020000000;
              v47[3] = v10;
              CFRetain(v10);
              CFRetain(*(CFTypeRef *)(v49 + 40));
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472;
              block[2] = sub_1000AF7C0;
              block[3] = &unk_100240A40;
              block[6] = v10;
              void block[7] = v22;
              block[4] = error;
              void block[5] = v47;
              dispatch_async((dispatch_queue_t)qword_10027DD88, block);
              _Block_object_dispose(v47, 8);
              _Block_object_dispose(error, 8);
            }
            [ValueAtIndex bypassPrompt];
            uint64_t v23 = 0;
            BOOL v24 = 1;
LABEL_26:
            sub_10005D0A4(v12, a4, (uint64_t)v10, v23);
LABEL_27:
            if ([ValueAtIndex callback]) {
              ((void (*)(uint64_t, id, uint64_t, id))[ValueAtIndex callback])(a4, v10, v23, [ValueAtIndex context]);
            }
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a4 + 1688), 0);
            if (v24) {
              sub_100099B04(a4);
            }
            return;
          }
          id v13 = [ValueAtIndex bundleId];
          if (v13)
          {
            *(void *)(a4 + 1664) = v13;
            CFRetain(v13);
            *(void *)(a4 + 1656) = v10;
            CFRetain(v10);
            [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") setCachedCurrentSessionBasedNetworkRef:v10];
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: start monitoring application state for %@", "__WiFiManagerStartMonitoringSessionBasedApplication", *(void *)(a4 + 1664) message];
            }
            id v16 = [objc_alloc((Class)NSArray) initWithObjects:v13, 0];
            if (objc_opt_class())
            {
              id v17 = objc_alloc((Class)BKSApplicationStateMonitor);
              id v18 = [v17 initWithBundleIDs:v16 states:BKSApplicationStateAll];
              *(void *)(a4 + 1944) = v18;
              if (v18)
              {
                *(void *)error = _NSConcreteStackBlock;
                uint64_t v49 = 3221225472;
                uint64_t v50 = (uint64_t)sub_1000AF834;
                CFNumberRef v51 = (void (*)(uint64_t, uint64_t))&unk_100240A60;
                uint64_t v52 = (void (*)(uint64_t))a4;
                [v18 setHandler:error];
                if (!v16)
                {
LABEL_13:
                  goto LABEL_14;
                }
LABEL_12:
                CFRelease(v16);
                goto LABEL_13;
              }
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"%s: failed to create app state monitor", @"__WiFiManagerStartMonitoringSessionBasedApplication"];
              }
            }
            CFRelease(v13);
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4, @"%s: bundle id is null", @"__WiFiManagerStartMonitoringSessionBasedApplication"];
            }
            id v16 = 0;
          }
          CFRelease(v10);
          if (!v16) {
            goto LABEL_13;
          }
          goto LABEL_12;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: failed to association error %d", @"__WiFiDeviceManagerForcedAssociationCallback", a2];
        }
        uint64_t v23 = 7;
LABEL_45:
        unsigned __int8 v27 = [ValueAtIndex bypassPrompt];
        BOOL v24 = a2 == 0;
        if (!a2 || (v27 & 1) != 0) {
          goto LABEL_83;
        }
        if (v9)
        {
          int v28 = sub_100099A2C(a4, *(const void **)(a4 + 1656), 0);
          if (v28)
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: %@ is existing network, leaving password", "__WiFiDeviceManagerForcedAssociationCallback", sub_10001A43C(*(const void **)(a4 + 1656)) message];
            }
          }
          else
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4, "%s: removing password for %@", "__WiFiDeviceManagerForcedAssociationCallback", sub_10001A43C(*(const void **)(a4 + 1656)) message];
            }
            sub_1000C94E0(*(const void **)(a4 + 1656));
          }
        }
        error[0] = -1431655766;
        if (a3)
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (Mutable)
          {
            if (sub_100167C34())
            {
              CFArrayRef v33 = sub_10001A43C(a3);
              CFStringRef cf = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%c%@%c", 8, v33, 127);
              if (cf)
              {
                CFArrayRef v34 = CFStringCreateMutable(kCFAllocatorDefault, 0);
                if (v34)
                {
                  CFStringRef v35 = (const __CFString *)sub_100167C48(@"WIFI_JOIN_NETWORK_FAILURE_TITLE");
                  if (v35)
                  {
                    CFStringAppendFormat(v34, 0, v35, cf);
                    if ((int)sub_1000C6F94((const __CFNumber *)a3) <= -75)
                    {
                      if (qword_10027DD68) {
                        [((id)qword_10027DD68) WFLog:4 message:@"%s: weak signal, adding message to alert", @"__WiFiManagerDispatchForcedAssociationFailureNotification"];
                      }
                      id v37 = sub_100167C48(@"WIFI_JOIN_NETWORK_FAILURE_BODY_WEAK_SIGNAL");
                      if (v37) {
                        CFDictionarySetValue(Mutable, kCFUserNotificationAlertMessageKey, v37);
                      }
                    }
                    CFDictionarySetValue(Mutable, kCFUserNotificationAlertHeaderKey, v34);
                    id v38 = sub_100167C48(@"WIFI_FAILURE_OK");
                    CFDictionarySetValue(Mutable, kCFUserNotificationDefaultButtonTitleKey, v38);
                    CFBooleanRef v39 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0, error, Mutable);
                    if (v39)
                    {
                      CFBooleanRef v40 = v39;
                      CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v39, (CFUserNotificationCallBack)sub_1000AFB6C, 0);
                      if (RunLoopSource)
                      {
                        CFDictionaryRef v42 = RunLoopSource;
                        *(void *)(a4 + 1640) = RunLoopSource;
                        *(void *)(a4 + 1648) = v40;
                        Main = CFRunLoopGetMain();
                        CFRunLoopAddSource(Main, v42, kCFRunLoopDefaultMode);
                      }
                      else
                      {
                        *(void *)(a4 + 1640) = 0;
                        *(void *)(a4 + 1648) = 0;
                        CFRelease(v40);
                        sub_100099B04(a4);
                      }
LABEL_78:
                      CFRelease(cf);
LABEL_79:
                      if (v34) {
                        CFRelease(v34);
                      }
                      if (Mutable) {
                        CFRelease(Mutable);
                      }
LABEL_83:
                      if (!v12) {
                        goto LABEL_27;
                      }
                      goto LABEL_26;
                    }
                  }
                }
LABEL_89:
                *(_OWORD *)(a4 + 1640) = 0u;
                sub_100099B04(a4);
                if (!cf) {
                  goto LABEL_79;
                }
                goto LABEL_78;
              }
            }
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: network is null" args:__WiFiManagerDispatchForcedAssociationFailureNotification];
          }
          CFMutableDictionaryRef Mutable = 0;
        }
        CFStringRef cf = 0;
        CFArrayRef v34 = 0;
        goto LABEL_89;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: client is null" args:("__WiFiDeviceManagerForcedAssociationCallback")];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: request network is null" : @"__WiFiDeviceManagerForcedAssociationCallback"];
      }
    }
    uint64_t v12 = 0;
    uint64_t v23 = 0x7FFFFFFFLL;
    goto LABEL_45;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is null" args:("__WiFiDeviceManagerForcedAssociationCallback")];
  }
}

void sub_1000AF3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1000AF3EC(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4, uint64_t a5)
{
  if (!a5)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is null" :@"__WiFiManagerAddNetworkScanCallback"];
    }
    return;
  }
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a5 + 1688), 0);
  id v9 = [ValueAtIndex network];
  if (v9)
  {
    id v10 = [ValueAtIndex client];
    if (v10)
    {
      uint64_t v11 = (uint64_t)v10;
      if (a2 == 3)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 6;
      }
      else
      {
        if (a2)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:message:4, "%s: failed to scan error %d", "__WiFiManagerAddNetworkScanCallback", a2];
          }
          uint64_t v13 = 7;
        }
        else
        {
          if ([ValueAtIndex usingPrefix]) {
            CFStringRef v14 = (const __CFString *)sub_10001A43C(v9);
          }
          else {
            CFStringRef v14 = 0;
          }
          CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
          if (Mutable)
          {
            uint64_t v12 = Mutable;
            if (a3 && CFArrayGetCount(a3) >= 1)
            {
              CFIndex v16 = 0;
              do
              {
                id v17 = CFArrayGetValueAtIndex(a3, v16);
                if (v17)
                {
                  id v18 = v17;
                  if (sub_10001A43C(v17))
                  {
                    CFStringRef v19 = (const __CFString *)sub_10001A43C(v18);
                    if (CFEqual(v19, v14)) {
                      goto LABEL_22;
                    }
                    CFStringRef v20 = (const __CFString *)sub_10001A43C(v18);
                    if (CFStringHasPrefix(v20, v14)) {
                      CFArrayAppendValue(v12, v18);
                    }
                  }
                }
                ++v16;
              }
              while (v16 < CFArrayGetCount(a3));
            }
            if (CFArrayGetCount(v12))
            {
              id v18 = CFArrayGetValueAtIndex(v12, 0);
              if (v18)
              {
LABEL_22:
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: found network %@ matching prefix %@", "__WiFiManagerAddNetworkScanCallback", sub_10001A43C(v18), v14 message];
                }
                [ValueAtIndex setNetworkMatchingPrefix:v18];
                sub_100099B04(a5);
                goto LABEL_31;
              }
            }
            uint64_t v13 = 9;
            goto LABEL_27;
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: null matchingResults" : @"__WiFiManagerAddNetworkScanCallback"];
          }
          uint64_t v13 = 9;
        }
        uint64_t v12 = 0;
      }
LABEL_27:
      sub_10005D0A4(v11, a5, (uint64_t)v9, v13);
      goto LABEL_28;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"__WiFiManagerAddNetworkScanCallback: client is null"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: request network is null" arguments:("__WiFiManagerAddNetworkScanCallback")];
    }
  }
  uint64_t v12 = 0;
  uint64_t v13 = 9;
LABEL_28:
  if ([ValueAtIndex callback]) {
    ((void (*)(uint64_t, id, uint64_t, id))[ValueAtIndex callback])(a5, v9, v13, [ValueAtIndex context]);
  }
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a5 + 1688), 0);
  if (v12)
  {
LABEL_31:
    CFRelease(v12);
  }
}

void sub_1000AF7C0(uint64_t a1)
{
  sub_10002B6A8(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *(const void **)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v2 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  uint64_t v3 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = 0;
  }
}

void sub_1000AF834(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000AF8A8;
  v4[3] = &unk_100240790;
  v4[4] = a2;
  v4[5] = v2;
  dispatch_async(v3, v4);
}

void sub_1000AF8A8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectForKey:@"SBApplicationStateDisplayIDKey"];
  uint64_t v5 = a1 + 32;
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(v5 + 8);
  if (v3)
  {
    if ([v3 objectForKey:@"SBApplicationStateKey"])
    {
      unsigned int v7 = [[objc_msgSend(v3, "objectForKey:", @"SBApplicationStateKey") integerValue];
      goto LABEL_8;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: missing user info dictionary", "__BKApplicationStateFromUserInfo")];
    }
  }
  unsigned int v7 = 0;
LABEL_8:
  if (!v4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is null" arguments:("__WiFiManagerSessionBasedApplicationStateChange")];
    }
    goto LABEL_20;
  }
  if (!v2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: bundle id is null" args:("__WiFiManagerSessionBasedApplicationStateChange")];
    }
    CFStringRef v14 = v9;
    goto LABEL_21;
  }
  if (qword_10027DD68)
  {
    if (v7 - 1 > 7) {
      CFStringRef v10 = @"Unknown";
    }
    else {
      CFStringRef v10 = off_100240E48[v7 - 1];
    }
    [(id)qword_10027DD68 WFLog:3, "%s: bundleId %@ state %@", "__WiFiManagerSessionBasedApplicationStateChange", v2, v10 message];
  }
  if (v7 != 8 && *(unsigned char *)(v4 + 1672))
  {
    uint64_t v12 = (void *)qword_10027DD68;
    if (!qword_10027DD68)
    {
LABEL_20:
      CFStringRef v14 = v11;
LABEL_21:
      return;
    }
    uint64_t v13 = "%s: state change ignored, timer running for disassociation";
LABEL_19:
    [v12 WFLog:3 message:v13 @"__WiFiManagerSessionBasedApplicationStateChange"];
    goto LABEL_20;
  }
  if (v7 != 8 || !*(unsigned char *)(v4 + 1672))
  {
    if (v7 == 8 || *(unsigned char *)(v4 + 1672)) {
      return;
    }
    CFIndex v16 = *(NSObject **)(v4 + 1680);
    dispatch_time_t v17 = dispatch_time(0, 15000000000);
    dispatch_source_set_timer(v16, v17, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(unsigned char *)(v4 + 1672) = 1;
    uint64_t v12 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_20;
    }
    uint64_t v13 = "%s: starting timer for disassociation";
    goto LABEL_19;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: application became active, cancelling disassociation timer", @"__WiFiManagerSessionBasedApplicationStateChange"];
  }
  dispatch_source_set_timer(*(dispatch_source_t *)(v4 + 1680), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  *(unsigned char *)(v4 + 1672) = 0;
}

void sub_1000AFB6C()
{
  if (qword_10027D6C8)
  {
    v0 = *(NSObject **)(qword_10027D6C8 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000AFC48;
    block[3] = &unk_10023EAF8;
    block[4] = qword_10027D6C8;
    dispatch_async(v0, block);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: unable to get manager", @"__WiFiManagerForcedAssociationFailureUserNotificationCallback"];
    }
  }
}

void sub_1000AFC48(uint64_t a1)
{
  Main = CFRunLoopGetMain();
  CFRunLoopRemoveSource(Main, *(CFRunLoopSourceRef *)(*(void *)(a1 + 32) + 1640), kCFRunLoopDefaultMode);
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 1640))
  {
    CFRelease(*(CFTypeRef *)(v3 + 1640));
    *(void *)(*(void *)(a1 + 32) + 1640) = 0;
    uint64_t v3 = *(void *)(a1 + 32);
  }
  if (*(void *)(v3 + 1648))
  {
    CFRelease(*(CFTypeRef *)(v3 + 1648));
    *(void *)(*(void *)(a1 + 32) + 1648) = 0;
    uint64_t v3 = *(void *)(a1 + 32);
  }

  sub_100099B04(v3);
}

void sub_1000AFCD0(const __SCDynamicStore *a1, uint64_t a2, const __CFArray *a3)
{
  if (qword_10027DD68)
  {
    unsigned int v7 = "DyamicStoreChange";
    if (!a2) {
      unsigned int v7 = "Initialization";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Callback reason=%s", v7);
  }
  CFStringRef NetworkInterface = SCDynamicStoreKeyCreateNetworkInterface(kCFAllocatorDefault, kSCDynamicStoreDomainState);
  if (NetworkInterface)
  {
    CFStringRef v9 = NetworkInterface;
    CFDictionaryRef v10 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1, NetworkInterface);
    if (v10)
    {
      CFDictionaryRef v11 = v10;
      CFTypeID v12 = CFGetTypeID(v10);
      if (v12 == CFDictionaryGetTypeID())
      {
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v11, kSCDynamicStorePropNetInterfaces);
        if (Value)
        {
          CFArrayRef v14 = Value;
          CFTypeID v15 = CFGetTypeID(Value);
          if (v15 == CFArrayGetTypeID())
          {
            if (CFArrayGetCount(v14))
            {
              if (CFArrayGetCount(v14))
              {
                CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                if (Mutable)
                {
                  dispatch_time_t v17 = Mutable;
                  if (CFArrayGetCount(v14) >= 1)
                  {
                    CFIndex v18 = 0;
                    do
                    {
                      ValueAtIndex = CFArrayGetValueAtIndex(v14, v18);
                      if (sub_1000B1024((uint64_t)ValueAtIndex)) {
                        CFArrayAppendValue(v17, ValueAtIndex);
                      }
                      ++v18;
                    }
                    while (v18 < CFArrayGetCount(v14));
                  }
                  if (CFArrayGetCount(v17))
                  {
                    if (qword_10027DD68) {
                      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Discovered %ld airport Interfaces", CFArrayGetCount(v17));
                    }
                    if (CFArrayGetCount(v17) >= 1)
                    {
                      CFIndex v21 = 0;
                      do
                      {
                        CFStringRef v22 = (const __CFString *)CFArrayGetValueAtIndex(v17, v21);
                        if (v22)
                        {
                          CFStringRef v23 = v22;
                          if (!sub_1000B00AC(a3, v22))
                          {
                            if (qword_10027DD68) {
                              [(id)qword_10027DD68 WFLog:3, "Now attempting to add AirPort Interface with BSDName %@", v23 message];
                            }
                            sub_1000B0150((int)a3, v23);
                          }
                        }
                        ++v21;
                      }
                      while (v21 < CFArrayGetCount(v17));
                    }
                  }
                  CFRelease(v17);
                }
              }
            }
          }
        }
      }
      CFRelease(v11);
    }
    CFRelease(v9);
  }
}

void sub_1000AFF7C(uint64_t a1)
{
  CFStringRef NetworkInterface = SCDynamicStoreKeyCreateNetworkInterface(kCFAllocatorDefault, kSCDynamicStoreDomainState);
  if (NetworkInterface)
  {
    CFStringRef v3 = NetworkInterface;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    if (Mutable)
    {
      CFArrayRef v5 = Mutable;
      CFArrayAppendValue(Mutable, v3);
      if (CFArrayGetCount(v5)) {
        SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 72), v5, 0);
      }
      CFRelease(v3);
    }
    else
    {
      CFArrayRef v5 = (const __CFArray *)v3;
    }
    CFRelease(v5);
  }
}

void sub_1000B003C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1000AFF7C(a2);
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"Cannot reconnect to the dynamic store - info is NULL"];
    }
  }
}

uint64_t sub_1000B00AC(const __CFArray *a1, const void *a2)
{
  CFArrayRef v3 = sub_10008ECB4(a1);
  if (!v3) {
    return 0;
  }
  CFArrayRef v4 = v3;
  if (CFArrayGetCount(v3) && CFArrayGetCount(v4) >= 1)
  {
    CFIndex v5 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
      if (ValueAtIndex)
      {
        unsigned int v7 = (const void *)sub_100016E20((uint64_t)ValueAtIndex);
        if (CFEqual(v7, a2)) {
          break;
        }
      }
      if (++v5 >= CFArrayGetCount(v4)) {
        goto LABEL_8;
      }
    }
    uint64_t v8 = 1;
  }
  else
  {
LABEL_8:
    uint64_t v8 = 0;
  }
  CFRelease(v4);
  return v8;
}

void sub_1000B0150(uint64_t a1, CFStringRef theString)
{
  *(void *)buffer = 0;
  uint64_t v65 = 0;
  if (!a1) {
    return;
  }
  if (!theString) {
    return;
  }
  CFStringGetCString(theString, buffer, 16, 0);
  if (sub_1000B00AC((const __CFArray *)a1, theString)) {
    return;
  }
  if (!*(void *)(a1 + 72)) {
    goto LABEL_91;
  }
  CFAllocatorRef v4 = kCFAllocatorDefault;
  CFStringRef NetworkInterface = SCDynamicStoreKeyCreateNetworkInterface(kCFAllocatorDefault, kSCDynamicStoreDomainState);
  if (!NetworkInterface) {
    goto LABEL_91;
  }
  CFStringRef v6 = NetworkInterface;
  CFDictionaryRef v7 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 72), NetworkInterface);
  if (!v7)
  {
    CFRelease(v6);
LABEL_91:
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%@ does not exist in dynamic store", theString message];
    }
    goto LABEL_95;
  }
  CFDictionaryRef v8 = v7;
  CFTypeID v9 = CFGetTypeID(v7);
  if (v9 != CFDictionaryGetTypeID()) {
    goto LABEL_12;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v8, kSCDynamicStorePropNetInterfaces);
  CFArrayRef v11 = Value;
  if (!Value) {
    goto LABEL_13;
  }
  CFTypeID v12 = CFGetTypeID(Value);
  if (v12 == CFArrayGetTypeID() && CFArrayGetCount(v11))
  {
    v66.length = CFArrayGetCount(v11);
    v66.location = 0;
    LODWORD(v11) = CFArrayContainsValue(v11, v66, theString);
  }
  else
  {
LABEL_12:
    LODWORD(v11) = 0;
  }
LABEL_13:
  CFRelease(v6);
  CFRelease(v8);
  if (!v11) {
    goto LABEL_91;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%@ propertyDictionaryRef alloc failed", theString message];
    }
LABEL_95:
    return;
  }
  CFArrayRef v14 = Mutable;
  CFDictionarySetValue(Mutable, @"IOInterfaceName", theString);
  CFTypeID v15 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v15)
  {
    CFIndex v16 = v15;
    CFDictionarySetValue(v15, @"IOPropertyMatch", v14);
    int v17 = 32;
    while (1)
    {
      CFRetain(v16);
      io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v16);
      if (MatchingService) {
        break;
      }
      usleep(0x2710u);
      if (!--v17)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: No Matching Service Found for interface %@", "__WiFiManagerDeviceAddedCallback", theString message];
        }
        CFStringRef v20 = 0;
LABEL_86:
        CFRelease(v16);
        CFRelease(v14);
        if (v20)
        {
          CFNumberRef v51 = (__CFDictionary *)v20;
          goto LABEL_88;
        }
        return;
      }
    }
    io_registry_entry_t v21 = MatchingService;
    CFStringRef CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(MatchingService, @"IO80211InterfaceRole", kCFAllocatorDefault, 0);
    CFStringRef v57 = CFProperty;
    CFNumberRef v58 = v14;
    if (!CFProperty || CFStringCompare(CFProperty, @"Infrastructure", 0))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: %@ is a virtual IO80211 interface", "__WiFiManagerDeviceAddedCallback", theString message];
      }
      goto LABEL_84;
    }
    CFStringRef v56 = theString;
    [+[WiFiUserInteractionMonitor sharedInstance] startMonitoringInterface:theString];
    uint64_t v23 = sub_10005FE74(kCFAllocatorDefault, v21);
    if (!v23) {
      goto LABEL_85;
    }
    BOOL v24 = (const void *)v23;
    unsigned int v25 = sub_10005A1E0(*(const __SCPreferences **)(a1 + 1064));
    if (!v25)
    {
LABEL_45:
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 96), v24);
      uint64_t v36 = sub_1000ED288((uint64_t)v4, v24, *(NSObject **)(a1 + 32));
      if (v36)
      {
        id v37 = (void *)v36;
        CFRelease(v24);
        CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), v37);
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s() CATS Trace: Enter\n", "__WiFiManagerDeviceManagerInit"];
        }
        uint64_t context = a1;
        unint64_t v61 = 0xAAAAAAAA00000000;
        CFNumberRef v62 = (int *)(a1 + 20);
        uint64_t v63 = 1;
        sub_1001037C4((uint64_t)v37, (uint64_t)sub_1000B119C, a1);
        sub_1001037DC((uint64_t)v37, (uint64_t)sub_1000B1464, a1);
        sub_1001037D0((uint64_t)v37, (uint64_t)sub_1000B146C, a1);
        sub_1001037E8((uint64_t)v37, (uint64_t)sub_1000B1530, a1);
        sub_1001037F4((uint64_t)v37, (uint64_t)sub_1000B1F64, a1);
        sub_100103800((uint64_t)v37, (uint64_t)sub_1000B234C, a1);
        sub_10010380C((uint64_t)v37, (uint64_t)sub_1000B23F8, a1);
        sub_100103818((uint64_t)v37, (uint64_t)sub_1000B259C, a1);
        sub_100103824((uint64_t)v37, (uint64_t)sub_1000B262C, a1);
        sub_10010383C((uint64_t)v37, (uint64_t)sub_1000B2720, a1);
        sub_100103764((uint64_t)v37, (uint64_t)sub_1000B275C, a1);
        sub_100103770((uint64_t)v37, (uint64_t)sub_1000B369C, a1);
        sub_100103788((uint64_t)v37, (uint64_t)sub_1000B3734, a1);
        sub_100103794((uint64_t)v37, (uint64_t)sub_1000B388C, a1);
        sub_1001037A0((uint64_t)v37, (uint64_t)sub_1000B3BC8, a1);
        sub_1001037AC((uint64_t)v37, (uint64_t)sub_1000B3D34, a1);
        sub_1001037B8((uint64_t)v37, (uint64_t)sub_1000B3F30, a1);
        sub_100103830((uint64_t)v37, (uint64_t)sub_1000B4120, a1);
        sub_100103860((uint64_t)v37, (uint64_t)sub_1000B44D8, a1);
        sub_10010386C((uint64_t)v37, (uint64_t)sub_1000B44F8, a1);
        sub_100103878((uint64_t)v37, (uint64_t)sub_10000571C, a1);
        sub_100103884((uint64_t)v37, (uint64_t)sub_100022F7C, a1);
        sub_100103890((uint64_t)v37, (uint64_t)sub_1000B453C, a1);
        sub_10006B1E0((uint64_t)v37, (uint64_t)sub_1000B4588, a1);
        sub_10006B1EC((uint64_t)v37, (uint64_t)sub_1000B45D4, a1);
        sub_10010389C((uint64_t)v37, (uint64_t)sub_1000B4620, a1);
        sub_1001038A8((uint64_t)v37, (uint64_t)sub_100007300, a1);
        sub_1001038B4((uint64_t)v37, (uint64_t)sub_1000B46A8, a1);
        sub_1001038C0((uint64_t)v37, (uint64_t)sub_1000B46F0, a1);
        sub_1001038CC((uint64_t)v37, (uint64_t)sub_1000B473C, a1);
        sub_1001038D8((uint64_t)v37, (uint64_t)sub_1000B4790, a1);
        sub_1001038F0((uint64_t)v37, (uint64_t)sub_100006A34, a1);
        sub_100103944((uint64_t)v37, (uint64_t)sub_1000B47FC, a1);
        sub_100103950((uint64_t)v37, (uint64_t)sub_1000B491C, a1);
        sub_10010377C((uint64_t)v37, (uint64_t)sub_1000ACAFC, a1);
        sub_10006B138((uint64_t)v37, (uint64_t)sub_1000B4958, a1);
        sub_10006B228((uint64_t)v37, (uint64_t)sub_1000B4B50, a1);
        sub_100103920((uint64_t)v37, (uint64_t)sub_1000B4D88, a1);
        sub_10011989C((uint64_t)v37, (uint64_t)sub_1000B4DE8, a1);
        sub_10011B7F8((uint64_t)v37, (uint64_t)sub_1000B4E28, a1);
        sub_100103848((uint64_t)v37, (uint64_t)sub_1000B5484, a1);
        sub_100103854((uint64_t)v37, (uint64_t)sub_1000B54C0, a1);
        sub_100103914((uint64_t)v37, (uint64_t)sub_1000B54FC, a1);
        sub_1001198A8((uint64_t)v37, (uint64_t)sub_1000B57A4, a1);
        sub_10011EDB0((uint64_t)v37, (uint64_t)sub_1000B57E4, a1);
        sub_10010392C((uint64_t)v37, (uint64_t)sub_1000B57F0, a1);
        sub_100103938((uint64_t)v37, (uint64_t)sub_1000B5838, a1);
        sub_1001217B4((uint64_t)v37, (uint64_t)sub_1000B5854, a1);
        sub_1001242F0((uint64_t)v37, (uint64_t)sub_1000B59F0, a1);
        sub_1001038E4((uint64_t)v37, (uint64_t)sub_1000B59FC, a1);
        sub_100103908((uint64_t)v37, (uint64_t)sub_1000B668C, a1);
        sub_10010395C((uint64_t)v37, (uint64_t)sub_1000B669C, a1);
        sub_100103968((uint64_t)v37, (uint64_t)sub_1000B67E4, a1);
        sub_100126DA0((uint64_t)v37, (uint64_t)sub_1000B6998, a1);
        sub_100103974((uint64_t)v37, (uint64_t)sub_1000B69AC, a1);
        sub_1001217C0((uint64_t)v37, (uint64_t)sub_1000B6AEC, a1);
        sub_10006B210((uint64_t)v37, (uint64_t)sub_1000B6C88, a1);
        sub_10006B234((uint64_t)v37, (uint64_t)nullsub_5, a1);
        sub_10006B258((uint64_t)v37, (uint64_t)sub_1000B74DC, a1);
        sub_10006B264((uint64_t)v37, (uint64_t)sub_1000B76C0, a1);
        sub_100128638((uint64_t)v37, a1);
        sub_10006B270((uint64_t)v37, (uint64_t)sub_1000B77D0, a1);
        sub_10012862C((uint64_t)v37, (uint64_t)sub_1000244A0, a1);
        sub_100128624((uint64_t)v37, a1);
        uint64_t v39 = *(void *)(a1 + 2312);
        if (v39) {
          sub_100124AE0((uint64_t)v37, v39);
        }
        for (int i = 23; i != 47; ++i)
        {
          LODWORD(v61) = i;
          int v59 = 5;
          if (i != 34)
          {
            if (i == 33) {
              CFNumberRef v62 = &v59;
            }
            sub_100020954((CFMutableArrayRef *)v37, (int *)&context);
            CFNumberRef v62 = (int *)(a1 + 20);
          }
        }
        for (int j = 0; j != 14; ++j)
        {
          LODWORD(v61) = j;
          if (j == 8) {
            CFNumberRef v62 = 0;
          }
          sub_100020954((CFMutableArrayRef *)v37, (int *)&context);
          CFNumberRef v62 = (int *)(a1 + 20);
        }
        sub_10010D610((uint64_t)v37);
        sub_100101FEC((uint64_t)v37, *(void *)(a1 + 1432));
        sub_100124BB8((uint64_t)v37, *(unsigned __int8 *)(a1 + 2120));
        sub_1001073AC((uint64_t)v37, *(CFTypeRef *)(a1 + 800));
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s() CATS Trace: Exit\n", "__WiFiManagerDeviceManagerInit"];
        }
        CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_1000B9938, v37);
        if (*(unsigned char *)(a1 + 88) == 1 && !*(unsigned char *)(a1 + 2408))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3 message:"Making WiFi Manager available for all to see"];
          }
          notify_post("com.apple.wifi.manager.available");
        }
        unsigned int v44 = sub_100004CF8(a1);
        sub_100122424((uint64_t)v37, v44, 0xFFFFFFFFLL, 0);
        uint64_t v45 = sub_1000A7E70(a1);
        sub_1001257D4((uint64_t)v37, v45);
        if (sub_100089448(a1))
        {
          uint64_t v46 = *(void *)(a1 + 2184);
          if (!v46)
          {
LABEL_72:
            if (qword_10027DD68)
            {
              if (*(unsigned char *)(a1 + 26)) {
                uint64_t v49 = "Enabling";
              }
              else {
                uint64_t v49 = "Disabling";
              }
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Device manager created. %s automatic association state", "__WiFiManagerDeviceAddedCallback", v49)];
            }
            if (*(unsigned char *)(a1 + 26)) {
              sub_1001020F0((uint64_t)v37);
            }
            else {
              sub_10010222C((uint64_t)v37);
            }
            CFRelease(v37);
            uint64_t v50 = *(int **)(a1 + 1608);
            uint64_t context = a1;
            unint64_t v61 = 0xAAAAAAAA00000043;
            CFNumberRef v62 = v50;
            uint64_t v63 = 1;
            CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
            sub_1000A1AE8(a1, *(unsigned int *)(a1 + 1552));
            sub_10008E218(a1, v56, 0);
            if (*(unsigned char *)(a1 + 2408)) {
              *(unsigned char *)(a1 + 2408) = 0;
            }
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Detected %ld wifi device(s)", CFSetGetCount(*(CFSetRef *)(a1 + 96)), v54)];
            }
LABEL_84:
            goto LABEL_85;
          }
          uint64_t v47 = (uint64_t)v37;
        }
        else
        {
          uint64_t v47 = (uint64_t)v37;
          uint64_t v46 = 0;
        }
        sub_100125B94(v47, v46);
        goto LABEL_72;
      }
LABEL_85:
      IOObjectRelease(v21);
      CFStringRef v20 = v57;
      CFArrayRef v14 = v58;
      goto LABEL_86;
    }
    int v26 = v25;
    unsigned __int8 v27 = (void *)sub_10000D990((uint64_t)"__WiFiManagerUpdateDeviceSystemConfiguration");
    int v28 = (const __SCNetworkInterface *)_SCNetworkInterfaceCreateWithIONetworkInterfaceObject();
    if (v28)
    {
      CFArrayRef v29 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(a1 + 1064));
      CFArrayRef v30 = v29;
      if (!v29) {
        goto LABEL_40;
      }
      CFIndex Count = CFArrayGetCount(v29);
      if (Count)
      {
        CFIndex v32 = Count;
        if (Count >= 1)
        {
          CFDateRef v55 = v27;
          CFIndex v33 = 0;
          int v26 = 0;
          do
          {
            ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v30, v33);
            if (!SCNetworkSetContainsInterface(ValueAtIndex, v28))
            {
              int v26 = SCNetworkSetEstablishDefaultInterfaceConfiguration();
              if (!v26)
              {
                if (SCError()) {
                  break;
                }
              }
            }
            ++v33;
          }
          while (v32 != v33);
          unsigned __int8 v27 = v55;
          CFAllocatorRef v4 = kCFAllocatorDefault;
LABEL_40:
          sub_10005A29C(*(SCPreferencesRef *)(a1 + 1064), v26);

          if (v26)
          {
            if (!v30) {
              goto LABEL_43;
            }
          }
          else
          {
            SCError();
            if (!v30)
            {
LABEL_43:
              if (v28) {
                CFRelease(v28);
              }
              goto LABEL_45;
            }
          }
          CFRelease(v30);
          goto LABEL_43;
        }
        int v26 = 0;
      }
      CFAllocatorRef v4 = kCFAllocatorDefault;
      goto LABEL_40;
    }
    CFArrayRef v30 = 0;
    goto LABEL_40;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%@ matchingServiceDict alloc failed", theString message];
  }
  CFNumberRef v51 = v14;
LABEL_88:
  CFRelease(v51);
}

uint64_t sub_1000B1024(uint64_t a1)
{
  memset(v10, 0, 44);
  *(void *)buffer = 0;
  uint64_t v9 = 0;
  int v2 = socket(2, 2, 0);
  if (v2 == -1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s Socket creation failed" arguments:__WiFiManagerCheckAirPortInterface];
    }
    return 0;
  }
  else
  {
    int v3 = v2;
    if (a1)
    {
      CFStringGetCString((CFStringRef)a1, buffer, 16, 0);
      if (buffer[0])
      {
        __strlcpy_chk();
        if (ioctl(v3, 0xC02C6938uLL, v10)) {
          BOOL v4 = 0;
        }
        else {
          BOOL v4 = (v10[1] & 0xE0) == 128;
        }
        a1 = v4;
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s, interfaceCName is zero length.", @"__WiFiManagerCheckAirPortInterface"];
        }
        a1 = 0;
      }
    }
    close(v3);
  }
  return a1;
}

void sub_1000B119C(void *a1, uint64_t a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Enter: %s:%d\n", "__WiFiManagerDeviceRemovedCallback", 6978);
  }
  *(unsigned char *)(a3 + 2408) = 1;
  pthread_mutex_lock(&stru_10027CB90);
  pthread_mutex_lock(&stru_10027CBD0);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a3 + 32));
  CFStringRef v6 = (const void *)sub_100016E18((uint64_t)a1);
  CFArrayRef v7 = sub_10000500C((CFArrayRef)a3);
  CFArrayRef v8 = v7;
  if (v7)
  {
    CFIndex Count = CFArrayGetCount(v7);
    if (Count >= 1)
    {
      CFIndex v10 = Count;
      for (CFIndex i = 0; i != v10; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v8, i);
        uint64_t v13 = sub_100016E18((uint64_t)ValueAtIndex);
        if (v13)
        {
          uint64_t v14 = sub_100016E20(v13);
          if (v14) {
            [*(id *)(a3 + 2416) addFaultEvent:24 forInterface:v14];
          }
        }
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: failed to get device managers", @"__WiFiManagerSoftErrorDextCrashedEvent"];
    }
  }
  *(unsigned char *)(a3 + 1808) = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B786C;
  block[3] = &unk_10023EAF8;
  block[4] = a3;
  dispatch_async((dispatch_queue_t)qword_10027DD88, block);
  if (v8) {
    CFRelease(v8);
  }
  sub_1001289BC((uint64_t)a1);
  sub_100102284((uint64_t)a1);
  sub_1000FD8C4((uint64_t)a1);
  sub_1000FF6DC((uint64_t)a1);
  CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000B78A4, a1);
  CFSetRemoveValue(*(CFMutableSetRef *)(a3 + 104), a1);
  CFSetRemoveValue(*(CFMutableSetRef *)(a3 + 96), v6);
  CFIndex v16 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    CFIndex v17 = CFSetGetCount(*(CFSetRef *)(a3 + 104));
    [v16 WFLog:3 message:@"Finished Clean up %s:%d devm_count:%ld dev_count:%ld\n", @"__WiFiManagerDeviceRemovedCallback", 7007, v17, CFSetGetCount(*(CFSetRef *)(a3 + 96))];
  }
  pthread_mutex_unlock(&stru_10027CBD0);
  pthread_mutex_unlock(&stru_10027CB90);
  sub_1000AFCD0(*(const __SCDynamicStore **)(a3 + 72), 0, (const __CFArray *)a3);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Exit: %s:%d %ld\n", "__WiFiManagerDeviceRemovedCallback", 7014, CFSetGetCount(*(CFSetRef *)(a3 + 104)));
  }
}

uint64_t sub_1000B1464(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 2408);
}

void sub_1000B146C(void *a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a3;
  v6[1] = 0xAAAAAAAA0000002FLL;
  v6[2] = 0;
  uint64_t v7 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_100020954, v6);
  int v5 = v7;
  *(_DWORD *)(a3 + 316) = v7;
  if (v5 == 1)
  {
    sub_100086500(a3, 1, 1, 0);
    sub_10008DF64(a3, *(_DWORD *)(a3 + 2072), 0, 0);
    if (sub_10008AA98(a3)) {
      sub_100088CD0(a3);
    }
  }
  CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000B78A8, a1);
}

void sub_1000B1530(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  CFAllocatorRef v7 = kCFAllocatorDefault;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFBooleanRef v9 = CFDateCreate(kCFAllocatorDefault, Current);
  CFIndex v10 = *(const void **)(a3 + 2264);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a3 + 2264) = 0;
  }
  if (!a4)
  {
LABEL_95:
    if (!v9) {
      return;
    }
    goto LABEL_96;
  }
  CFArrayRef Value = (void *)CFDictionaryGetValue(a4, @"LINK_CHANGED_NETWORK");
  sub_1000B78AC(a3, Value);
  sub_1001070C4(a1, 0);
  if (Value)
  {
    *(unsigned char *)(a3 + 2200) = 1;
    if (*(unsigned char *)(a3 + 1504) || sub_1000199C0((uint64_t)Value))
    {
      if (sub_1000CD6C4((uint64_t)Value)) {
        sub_1000B7B1C(a3, a1, 1);
      }
      *(unsigned char *)(a3 + 1504) = 0;
      dispatch_source_set_timer(*(dispatch_source_t *)(a3 + 1536), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      CFIndex context = a3;
      unint64_t v65 = 0xAAAAAA0000000042;
      unint64_t v66 = 0xAAAAAAAA00000000;
      CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_100020954, &context);
      sub_1000B7CB0(a3, 1);
      kdebug_trace();
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: LINK_UP: so disabled the carplay mode ###STOP_CAAJ", @"__WiFiManagerDeviceLinkCallback"];
      }
    }
    if (*(unsigned char *)(a3 + 1560))
    {
      dispatch_source_set_timer(*(dispatch_source_t *)(a3 + 1576), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      *(unsigned char *)(a3 + 1560) = 0;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: LINK_UP: so disabled the companion assisted mode ###STOP_CAAJ", @"__WiFiManagerDeviceLinkCallback"];
      }
      CFIndex context = *(void *)(a3 + 1568);
      unint64_t v65 = *(void *)(a3 + 1584);
      sub_10005724C((uint64_t)&context, Value);
    }
    if (sub_10009CF10(a3, Value))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: %@ is joined first time, so now enable it", "__WiFiManagerDeviceLinkCallback", sub_10001A43C(Value) message];
      }
      sub_1000CDFA8(Value, 0);
      sub_10009B1AC(a3, Value, 1u);
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, " %s WFMacRandomisation : Retrieving private mac cache version of the network <%@>", "__WiFiManagerDeviceLinkCallback", sub_10001A43C(Value) message];
    }
    CFIndex v16 = sub_1000AB3E0(a3, (const void **)Value);
    if (v16
      && (uint64_t v17 = (uint64_t)v16, (v18 = sub_10001E404((uint64_t)v16, @"PRIVATE_MAC_ADDRESS")) != 0)
      && (CFStringRef v19 = v18, TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(v19)))
    {
      sub_10001C6A4((uint64_t)Value, @"PRIVATE_MAC_ADDRESS", v19);
      CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v19, @"PRIVATE_MAC_ADDRESS_TYPE");
      CFDataRef v22 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v19, @"PRIVATE_MAC_ADDRESS_VALUE");
      CFNumberRef v23 = sub_10001C140(v21);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Link UP. UI Status is <%d> and mac address is <%@> for network <%@> ", "__WiFiManagerDeviceLinkCallback", v23, v22, sub_10001A43C(Value) message];
      }
      if (sub_10001A6DC(v22))
      {
        sub_10001C6A4((uint64_t)Value, @"PrivateMacInfoDictionary", 0);
        CFBooleanRef v25 = (const __CFBoolean *)sub_10001E404(v17, @"FailureThresholdMet");
        CFAllocatorRef v7 = kCFAllocatorDefault;
        if (v25 && (CFBooleanRef v26 = v25, v25 == kCFBooleanTrue))
        {
          if (!sub_10001A680((uint64_t)Value))
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Using random MAC and failure threshold met indication is sent in Link UP for network <%@>", "__WiFiManagerDeviceLinkCallback", sub_10001A43C(Value) message];
            }
            sub_10001C6A4((uint64_t)Value, @"FailureThresholdMet", v26);
            CFAllocatorRef v7 = kCFAllocatorDefault;
          }
        }
        else
        {
          sub_10001C6A4((uint64_t)Value, @"FailureThresholdMet", 0);
        }
      }
      else
      {
        CFAllocatorRef v7 = kCFAllocatorDefault;
        if (!sub_10001A680((uint64_t)Value))
        {
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          sub_10001BD9C(v17, Mutable);
          sub_10001C6A4((uint64_t)Value, @"PrivateMacInfoDictionary", Mutable);
          if (Mutable) {
            CFRelease(Mutable);
          }
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Unable to find  private Mac Info for link update for network <%@> ", "__WiFiManagerDeviceLinkCallback", sub_10001A43C(Value) message];
      }
    }
    if (_os_feature_enabled_impl())
    {
      if (sub_10001ED04((uint64_t)Value) || sub_1000C6FE8((const __CFDictionary *)Value))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, @"%s: Hold off dispatching client link up event until 4 way completes.", @"__WiFiManagerDeviceLinkCallback"];
        }
        int v30 = 0;
      }
      else
      {
        int v30 = 1;
      }
    }
    else
    {
      int v30 = 1;
    }
    if (*(unsigned char *)(a3 + 2360))
    {
      LOBYTE(context) = 0;
      CFNumberRef v53 = (const __CFNumber *)CFDictionaryGetValue(a4, @"LINK_DEBOUNCE_RESULT");
      if (v53)
      {
        CFNumberGetValue(v53, kCFNumberSInt8Type, &context);
        BOOL v54 = (_BYTE)context != 0;
      }
      else
      {
        BOOL v54 = 0;
      }
      *(unsigned char *)(a3 + 2345) = v54;
    }
    CFDateRef v55 = *(const void **)(a3 + 1656);
    if (!v55 || CFEqual(v55, Value)) {
      goto LABEL_92;
    }
  }
  else
  {
    *(unsigned char *)(a3 + 2200) = 0;
    CFIndex context = a3;
    unint64_t v65 = 0xAAAAAAAA00000082;
    unint64_t v66 = 0;
    uint64_t v67 = 0;
    CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_100020954, &context);
    if ((_BYTE)v67)
    {
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:3 message:@"%s: Sending link down status to Gizmo"];
      }
      sub_100184FC0(*(void **)(a3 + 1432), 0);
    }
    CFIndex v32 = (void *)sub_10010A740(a1);
    if (v32)
    {
      CFIndex v33 = v32;
      sub_10009C2E8(a3, v32, @"PrivateMacFeatureToggled", kCFBooleanFalse);
      sub_10009C2E8(a3, v33, @"LinkDownTimestamp", v9);
      if (sub_1000C8A18(v33))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s: removing ONE TIME PASSWORD for network %@", "__WiFiManagerDeviceLinkCallback", sub_10001A43C(v33) message];
        }
        sub_1000C94E0(v33);
      }
      if (sub_1000199C0((uint64_t)v33)) {
        sub_1000B7DDC(a3, a1, (uint64_t)v33);
      }
      CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(a4, @"LINKDOWN_REASON_CODE");
      CFNumberRef v36 = v35;
      int valuePtr = 0;
      if (v35) {
        CFNumberGetValue(v35, kCFNumberIntType, &valuePtr);
      }
      uint64_t v62 = a1;
      *(unsigned char *)(a3 + 2360) = 0;
      if (sub_1000199C0((uint64_t)v33))
      {
        LOBYTE(context) = 0;
        CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue(a4, @"LINK_DEBOUNCE_STATE");
        if (v37) {
          CFNumberGetValue(v37, kCFNumberSInt8Type, &context);
        }
        if ((_BYTE)context)
        {
          *(CFAbsoluteTime *)(a3 + 2320) = CFAbsoluteTimeGetCurrent();
          *(_DWORD *)(a3 + 2336) = valuePtr;
          if (CFDictionaryGetValue(a4, @"LINKDOWN_SUBREASON_CODE")) {
            CFNumberGetValue(v36, kCFNumberIntType, (void *)(a3 + 2340));
          }
          *(unsigned char *)(a3 + 2360) = 1;
        }
      }
      CFIndex context = -1;
      CFIndex v68 = 0;
      id v38 = (const __SCPreferences *)sub_10000D9F0((void *)a3, @"List of known networks");
      if (v38)
      {
        uint64_t v39 = v38;
        if (sub_10005A1E0(v38))
        {
          CFBooleanRef v61 = v9;
          CFBooleanRef v40 = (void *)sub_10000D990((uint64_t)"__WiFiManagerUpdateNetworkUsageTime");
          CFArrayRef v41 = (const __CFArray *)sub_1000830B8(a3);
          if (v41
            && (CFArrayRef v42 = v41, sub_1000945D4(*(_DWORD *)(a3 + 304), v41, v33, &context, &v68), context != -1)
            && (ValueAtIndex = (CFDictionaryRef *)CFArrayGetValueAtIndex(v42, context)) != 0
            && (v44 = ValueAtIndex, (unint64_t v45 = sub_10001CD58(ValueAtIndex)) != 0))
          {
            CFDateRef v46 = (const __CFDate *)v45;
            double v47 = sub_10001CD28((uint64_t)v44);
            double v48 = CFAbsoluteTimeGetCurrent();
            double v49 = v47 + v48 - CFDateGetAbsoluteTime(v46);
            sub_1000C9A68((uint64_t)v44, v49);
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "Total connection time to %@ %f", sub_10001A43C(v33), *(void *)&v49 message];
            }
            int v51 = sub_100094834(a3, v42);
            sub_100093410(a3, v44, 0);
          }
          else
          {
            int v51 = 0;
          }
          sub_10005A29C(v39, v51);

          CFBooleanRef v9 = v61;
          if (v51) {
            sub_10008111C(v52, 2, a3);
          }
        }
      }
      a1 = v62;
      CFAllocatorRef v7 = kCFAllocatorDefault;
    }
    if (!*(void *)(a3 + 1656)) {
      goto LABEL_94;
    }
    int v30 = 1;
  }
  if (*(unsigned char *)(a3 + 1672))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: cancelling session based disassociation timer", "__WiFiManagerDeviceLinkCallback")];
    }
    dispatch_source_set_timer(*(dispatch_source_t *)(a3 + 1680), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(unsigned char *)(a3 + 1672) = 0;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no longer attached to session based network, stopping monitor", "__WiFiManagerDeviceLinkCallback");
  }
  sub_1000B7E88(a3);
  if (!Value)
  {
LABEL_98:
    if (v30) {
      goto LABEL_94;
    }
    goto LABEL_99;
  }
LABEL_92:
  CFDictionaryRef v58 = sub_10000E5B8((uint64_t)Value);
  if (!v58) {
    goto LABEL_98;
  }
  CFDictionaryRef v59 = v58;
  CFDictionaryReplaceValue(a4, @"LINK_CHANGED_NETWORK", v58);
  CFRelease(v59);
  if (v30)
  {
LABEL_94:
    CFIndex context = a3;
    unint64_t v65 = a1;
    unint64_t v66 = (unint64_t)a4;
    CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000B8334, &context);
    goto LABEL_95;
  }
LABEL_99:
  *(void *)(a3 + 2264) = CFDictionaryCreateCopy(v7, a4);
  if (v9) {
LABEL_96:
  }
    CFRelease(v9);
}

void sub_1000B1F64(uint64_t a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict, void *a5)
{
  if (!a3 || !theDict) {
    return;
  }
  CFIndex v10 = CFDictionaryGetValue(theDict, @"autoJoinNetwork");
  if (v10)
  {
    CFDictionaryRef v11 = sub_10000E5B8((uint64_t)v10);
    if (v11)
    {
      CFDictionaryRef v12 = v11;
      CFDictionaryReplaceValue(theDict, @"autoJoinNetwork", v11);
      CFRelease(v12);
    }
  }
  value = 0;
  CFDictionaryGetValueIfPresent(theDict, @"autoJoinStatus", (const void **)&value);
  if (value && CFEqual((CFStringRef)value, @"autoJoinAlreadyAssoicated"))
  {
    uint64_t v14 = sub_1000A2050((const __CFArray *)a3);
    CFStringRef v15 = (const __CFString *)sub_10001A43C(v14);
    if (v15)
    {
      if (*(unsigned char *)(a3 + 1560))
      {
        CFStringRef v16 = *(const __CFString **)(a3 + 1568);
        if (v16)
        {
          if (CFEqual(v15, v16))
          {
            dispatch_source_set_timer(*(dispatch_source_t *)(a3 + 1576), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
            *(unsigned char *)(a3 + 1560) = 0;
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:@"%s: already associated, so disabled the companion assisted mode ###STOP_CAAJ" message:3];
            }
          }
        }
      }
    }
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
    CFDictionarySetValue(MutableCopy, @"autoJoinStatus", @"autoJoinSuccess");
    CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, MutableCopy);
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (Copy) {
      CFRelease(Copy);
    }
  }
  else
  {
    context[0] = a1;
    context[1] = theDict;
    CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000B839C, context);
  }
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    if ([value isEqualToString:@"autoJoinAssociating"]
      || ([value isEqualToString:@"autoJoinWaiting"] & 1) != 0
      || [value isEqualToString:@"autoJoinEAPNeedsUserFix"])
    {
      [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinUpdatedWithState:3 interfaceName:a2];
    }
    else
    {
      if ([value isEqualToString:@"autoJoinAssociationFailure"]
        || [value isEqualToString:@"autoJoinNetworkNotFound"]
        || [value isEqualToString:@"autoJoinAborted"])
      {
        id v20 = +[WiFiXPCManager sharedXPCManager];
        uint64_t v21 = 0;
      }
      else
      {
        if (![value isEqualToString:@"autoJoinSuccess"]) {
          goto LABEL_14;
        }
        id v20 = +[WiFiXPCManager sharedXPCManager];
        uint64_t v21 = 1;
      }
      [v20 autoJoinEndedWithResult:v21 interfaceName:a2];
    }
  }
LABEL_14:
  if (&_WiFiCloudSyncEngineCreate)
  {
    if (a5)
    {
      if (*(void *)(a3 + 1304))
      {
        [objc_msgSend(a5, "autoJoinParameters") trigger];
        if (CWFIsAutoJoinRetryTrigger())
        {
          if (![a5 error] && !*(unsigned char *)(a3 + 1296))
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3, @"%s: Starting cloud sync engine after AJ retry", @"__WiFiManagerDeviceAutoJoinCallback"];
            }
            *(unsigned char *)(a3 + 1296) = 1;
            WiFiCloudSyncEngineScheduleWithQueue();
            CFRetain(*(CFTypeRef *)(a3 + 1304));
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_1000B8358;
            block[3] = &unk_10023EAF8;
            block[4] = a3;
            dispatch_async((dispatch_queue_t)qword_10027DD90, block);
          }
        }
      }
    }
  }
}

void sub_1000B234C(uint64_t a1, int a2, uint64_t a3, CFDictionaryRef theDict)
{
  if (a3 && theDict)
  {
    CFArrayRef Value = CFDictionaryGetValue(theDict, @"userJoinNetwork");
    if (Value)
    {
      CFDictionaryRef v8 = sub_10000E5B8((uint64_t)Value);
      if (v8)
      {
        CFDictionaryRef v9 = v8;
        CFDictionaryReplaceValue(theDict, @"userJoinNetwork", v8);
        CFRelease(v9);
      }
    }
    v10[0] = a1;
    v10[1] = theDict;
    CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000B83B8, v10);
  }
}

void sub_1000B23F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    if (a4)
    {
      CFDictionaryRef v8 = sub_10000E5B8((uint64_t)a4);
      if (v8)
      {
        CFDictionaryRef v9 = v8;
        CFDictionaryRef v10 = *(const __CFDictionary **)(a3 + 2264);
        if (v10 && (MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v10)) != 0
          || (MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks)) != 0)
        {
          CFDictionarySetValue(MutableCopy, @"LINK_CHANGED_IS_LINKDOWN", kCFBooleanFalse);
          CFDictionarySetValue(MutableCopy, @"LINK_CHANGED_NETWORK", v9);
          CFRelease(v9);
          sub_10009B1AC(a3, a4, 1u);
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: outranking state overridden. Replaying link event to clients.", "__WiFiManagerUserOverridingCellularOutrankingCallback");
          }
          context[0] = a3;
          context[1] = a1;
          void context[2] = MutableCopy;
          CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000B8334, context);
          [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") replayLinkUpEventWithInterfaceName:a2];
          CFRelease(MutableCopy);
        }
        else
        {
          CFRelease(v9);
        }
      }
    }
  }
}

void sub_1000B259C(uint64_t a1, uint64_t a2, CFDictionaryRef theDict)
{
  if (a2 && theDict)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"HostApEnabled");
    BOOL v7 = Value && CFBooleanGetValue(Value);
    *(unsigned char *)(a2 + 1208) = v7;
    v8[0] = a1;
    v8[1] = theDict;
    CFSetApplyFunction(*(CFSetRef *)(a2 + 136), (CFSetApplierFunction)sub_1000B83D4, v8);
  }
}

void sub_1000B262C(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = *(unsigned __int8 *)(a2 + 1209);
  *(unsigned char *)(a2 + 1209) = a3;
  if (qword_10027DD68)
  {
    BOOL v7 = "disabled";
    if (*(unsigned char *)(a2 + 1211) == 1) {
      CFDictionaryRef v8 = "enabled";
    }
    else {
      CFDictionaryRef v8 = "disabled";
    }
    if (*(unsigned char *)(a2 + 1209) == 1) {
      BOOL v7 = "enabled";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: MIS Discovery Req state %s Current state %s", "__WiFiManagerDeviceMISDiscoverStateChangeCallback", v8, v7)];
  }
  if (v5 != a3 && objc_opt_class())
  {
    CFDictionaryRef v9 = qword_10027DD88;
    dispatch_async(v9, &stru_100240A80);
  }
}

void sub_1000B2720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a1;
  v4[1] = a3;
  CFSetApplyFunction(*(CFSetRef *)(a4 + 136), (CFSetApplierFunction)sub_1000B8470, v4);
}

void sub_1000B275C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1000B848C(a6, a3, a2);
  CFDictionaryRef v8 = (void *)sub_1000AB3E0(a6, (const void **)a3);
  CFDictionaryRef v9 = v8;
  if (!v8)
  {
    int v15 = 0;
    CFDictionaryRef v11 = 0;
LABEL_11:
    CFNumberRef Value = 0;
    goto LABEL_12;
  }
  CFDictionaryRef v10 = (const __CFDictionary *)sub_10001E404((uint64_t)v8, @"PRIVATE_MAC_ADDRESS");
  CFDictionaryRef v11 = v10;
  if (!v10)
  {
    int v15 = 0;
    goto LABEL_11;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v10, @"PRIVATE_MAC_ADDRESS_TYPE");
  CFBooleanRef v13 = (CFBooleanRef)sub_10001E404((uint64_t)v9, @"IsPrivateMacAddressCarriedOver");
  if (v13) {
    BOOL v14 = v13 == kCFBooleanTrue;
  }
  else {
    BOOL v14 = 0;
  }
  int v15 = v14;
LABEL_12:
  if (!sub_10001E404((uint64_t)a3, @"COLOCATED_NETWORK_SCOPE_ID"))
  {
    if (!Value || sub_10001C140(Value) == 1 || !v15) {
      goto LABEL_28;
    }
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v11);
    CFDictionaryRemoveValue(MutableCopy, @"PRIVATE_MAC_ADDRESS_VALUE");
    CFDictionaryRemoveValue(MutableCopy, @"PRIVATE_MAC_ADDRESS_IN_USE");
    sub_10009C2E8(a6, v9, @"PRIVATE_MAC_ADDRESS", MutableCopy);
    sub_10009C2E8(a6, v9, @"IsPrivateMacAddressCarriedOver", kCFBooleanFalse);
    uint64_t v21 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_25;
    }
    CFArrayRef v84 = MutableCopy;
    CFDataRef v22 = "clear carried over private mac address (%@)";
    goto LABEL_24;
  }
  if (!Value || sub_10001C140(Value) == 1) {
    goto LABEL_28;
  }
  MutableCFDictionaryRef Copy = (__CFDictionary *)sub_1000A2050((const __CFArray *)a6);
  uint64_t v17 = sub_1000AB3E0(a6, (const void **)MutableCopy);
  if (!v17) {
    goto LABEL_26;
  }
  CFBooleanRef v18 = (const __CFBoolean *)sub_10001E404((uint64_t)v17, @"PRIVATE_MAC_ADDRESS");
  if (!v18) {
    goto LABEL_26;
  }
  CFBooleanRef v19 = v18;
  sub_10001C6A4((uint64_t)a3, @"PRIVATE_MAC_ADDRESS", v18);
  sub_10009C2E8(a6, v9, @"PRIVATE_MAC_ADDRESS", v19);
  sub_10009C2E8(a6, v9, @"IsPrivateMacAddressCarriedOver", kCFBooleanTrue);
  uint64_t v21 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    CFDataRef v22 = "carry over private mac address due to SSID transition";
LABEL_24:
    [v21 WFLog:3 message:v22];
  }
LABEL_25:
LABEL_26:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
LABEL_28:
  if (!a3) {
    return;
  }
  CFNumberRef v23 = sub_10001A43C(a3);
  if (*(unsigned char *)(a6 + 529) && sub_1000B8688(a6))
  {
    *(unsigned char *)(a6 + 529) = 0;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"%s WFMacRandomisation : Profiles Networks successfully checked for MDM or supervised.", @"__WiFiManagerWillAssociateCallback"];
    }
  }
  if ((!*(unsigned char *)(a6 + 528)
     || ![+[WiFiUserInteractionMonitor sharedInstance] isSetupCompleted])&& *(unsigned char *)(a6 + 376))
  {
    CFArrayRef v25 = (const __CFArray *)sub_1000830B8(a6);
    CFBooleanRef v26 = (void *)sub_1000AA660(v25, (uint64_t)a3);
    if (v26) {
      unsigned __int8 v27 = v26;
    }
    else {
      unsigned __int8 v27 = a3;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation :  Associating to network <%@> while in Buddy. Upgrading it to MigratedNetwork Status and disabling private Mac", "__WiFiManagerWillAssociateCallback", v23 message];
    }
    if (!sub_100095E1C(a6, v27, 5))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "WFMacRandomisation : Unable to add new network (%@) to Private Mac network List", v23 message];
      }
    }
  }
  if (sub_10001BB2C((BOOL)a3))
  {
    CFArrayRef v30 = (const __CFArray *)sub_100083F8C(a6);
    uint64_t v31 = sub_10001A5A8(*(const __CFArray **)(a6 + 352), (const void **)a3);
    uint64_t v91 = 0;
    idx[0] = -1;
    if (v31)
    {
      uint64_t v32 = (uint64_t)v31;
      CFBooleanRef v33 = (const __CFBoolean *)sub_10001E404((uint64_t)v31, @"PrivateMacPrefChanged");
      if (v33 && v33 == kCFBooleanTrue || sub_10001E404(v32, @"PrivateMacDefaultToOFF")) {
        goto LABEL_69;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : HS20 network <%@> Will check provisioning for private MAC default OFF property", "__WiFiManagerWillAssociateCallback", v23 message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : New HS20 network <%@> Will check provisioning for private MAC default OFF property", "__WiFiManagerWillAssociateCallback", v23 message];
      }
    }
    sub_1000AB298(v30, a3, idx, &v91);
    if (idx[0] != -1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v30, idx[0]);
      CFNumberRef v37 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        id v38 = sub_10001A43C(ValueAtIndex);
        [v37 WFLog:3, "%s: WFMacRandomisation : HS20 network <%@> found (provisioned). Profile from private Mac Cache : <%@>. Sanity check : is found earlier to be provisioned? <%hhu>", "__WiFiManagerWillAssociateCallback", v23, v38, sub_1000CCA08((uint64_t)a3) message];
      }
      if (ValueAtIndex)
      {
        uint64_t v39 = sub_10001E404((uint64_t)ValueAtIndex, @"PrivateMacDefaultToOFF");
        if (v39)
        {
          CFBooleanRef v40 = v39;
          CFBooleanRef v41 = (CFBooleanRef)sub_10001E404((uint64_t)ValueAtIndex, @"PrivateMacControlledDevice");
          sub_10001C6A4((uint64_t)a3, @"PrivateMacDefaultToOFF", v40);
          if (v41 && v41 == kCFBooleanTrue) {
            sub_10001C6A4((uint64_t)a3, @"PrivateMacControlledDevice", v41);
          }
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : kWiFiPrivateMacProfileDefaultFeatureToDisable in account profile. Copied over to network <%@>. Flag : <%@>", "__WiFiManagerWillAssociateCallback", v23, v40 message];
          }
          if (!sub_100095E1C(a6, a3, 8))
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4, "WFMacRandomisation : Unable to add new network (%@) to Private Mac network List", v23 message];
            }
          }
        }
      }
    }
  }
LABEL_69:
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v45 = CFDateCreate(kCFAllocatorDefault, Current);
  CFDateRef v46 = +[NSUserDefaults standardUserDefaults];
  int v47 = _os_feature_enabled_impl();
  CFStringRef v48 = (const __CFString *)sub_10001A43C(a3);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, " %s WFMacRandomisation : Retrieving private mac cache version of the network <%@>", "__WiFiManagerUpdatePrivateMac", v48 message];
  }
  CFStringRef v90 = v48;
  uint64_t v50 = sub_1000AB3E0(a6, (const void **)a3);
  CFDateRef v89 = v45;
  if (sub_10001E954((uint64_t)a3) || sub_10001E954((uint64_t)v50))
  {
    if (_os_feature_enabled_impl()) {
      unsigned int v51 = 1;
    }
    else {
      unsigned int v51 = [(NSUserDefaults *)v46 BOOLForKey:@"PrivateMACAirplayNetworkEnabled"];
    }
  }
  else
  {
    unsigned int v51 = 0;
  }
  BOOL v52 = sub_1000D2230((uint64_t)a3) || sub_1000D2230((uint64_t)v50);
  if (v50 && (uint64_t v53 = sub_1000C5C14(), v53 == CFGetTypeID(v50)))
  {
    CFDictionaryRef v54 = (const __CFDictionary *)sub_10001E404((uint64_t)v50, @"PRIVATE_MAC_ADDRESS");
    CFBooleanRef v55 = (CFBooleanRef)sub_10001E404((uint64_t)v50, @"MacAddressRandomisationTagMigratedNetwork");
    CFBooleanRef v56 = (const __CFBoolean *)sub_10001E404((uint64_t)v50, @"ResetCaptiveProbe");
    CFStringRef v57 = sub_10001E404((uint64_t)v50, @"PrivateMacFutureMacAddress");
    CFBooleanRef v58 = (const __CFBoolean *)sub_10001E404((uint64_t)v50, @"FailureThresholdMet");
    if (!v54)
    {
      CFBooleanRef v88 = v56;
      CFMutableArrayRef Mutable = 0;
      char v66 = 1;
      char v86 = 1;
      char v87 = 0;
      goto LABEL_120;
    }
    CFDictionaryRef v59 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v54);
    CFMutableArrayRef Mutable = v59;
    if (v57)
    {
      CFDictionarySetValue(v59, @"PRIVATE_MAC_ADDRESS_VALUE", v57);
      CFDictionarySetValue(Mutable, @"PRIVATE_MAC_ADDRESS_IN_USE", v57);
      char v87 = 0;
    }
    else
    {
      uint64_t v67 = CFDictionaryGetValue(v54, @"PRIVATE_MAC_ADDRESS_VALUE");
      if (v67) {
        CFDictionarySetValue(Mutable, @"PRIVATE_MAC_ADDRESS_IN_USE", v67);
      }
      char v87 = 0;
      CFStringRef v57 = 0;
    }
    char v86 = 1;
  }
  else
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (v47)
    {
      if (sub_1000D20B8((CFDictionaryRef *)a3)) {
        int v61 = 2;
      }
      else {
        int v61 = 3;
      }
    }
    else
    {
      int v61 = 3;
    }
    CFNumberRef v62 = sub_10005B0B8(v61);
    CFDictionarySetValue(Mutable, @"PRIVATE_MAC_ADDRESS_TYPE", v62);
    if (v62) {
      CFRelease(v62);
    }
    CFDataRef v63 = *(const __CFData **)(a6 + 416);
    if (v51)
    {
      CFStringRef v57 = sub_1000D1BF0(v63, *(const __CFData **)(a6 + 488), v48);
      sub_10001C6A4((uint64_t)a3, @"RotationKeyUsed", 0);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Generated private mac address <%@> for airplay network <%@> ", "__WiFiManagerUpdatePrivateMac", v57, v48 message];
      }
    }
    else if (v52)
    {
      CFStringRef v57 = sub_1000D1BF0(v63, *(const __CFData **)(a6 + 488), v48);
      sub_10001C6A4((uint64_t)a3, @"RotationKeyUsed", 0);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Generated private mac address <%@> for accessory network <%@> ", "__WiFiManagerUpdatePrivateMac", v57, v48 message];
      }
    }
    else
    {
      CFStringRef v57 = sub_1000D1978(v63, *(const __CFData **)(a6 + 408), *(const __CFData **)(a6 + 488), v48);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Generated private mac address <%@> for network <%@> ", "__WiFiManagerUpdatePrivateMac", v57, v48 message];
      }
    }
    if (v57)
    {
      CFDictionarySetValue(Mutable, @"PRIVATE_MAC_ADDRESS_VALUE", v57);
      CFDictionarySetValue(Mutable, @"PRIVATE_MAC_ADDRESS_IN_USE", v57);
      sub_10001C6A4((uint64_t)a3, @"MacGenerationTimeStamp", v89);
      sub_10001C6A4((uint64_t)a3, @"NoAssociationWithNewMac", kCFBooleanTrue);
      sub_10001C6A4((uint64_t)a3, @"RotationKeyUsed", *(const void **)(a6 + 408));
      CFRelease(v57);
      if (!sub_100095E1C(a6, a3, 3))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : Updated join network <%@> with private mac but unable to set it to cache", v48 message];
        }
      }
      char v86 = 0;
      CFStringRef v57 = 0;
    }
    else
    {
      char v86 = 0;
    }
    CFBooleanRef v58 = 0;
    char v87 = 1;
    CFBooleanRef v55 = kCFBooleanFalse;
    CFBooleanRef v56 = kCFBooleanFalse;
  }
  CFBooleanRef v88 = v56;
  if (Mutable)
  {
    sub_10001C6A4((uint64_t)a3, @"PRIVATE_MAC_ADDRESS", Mutable);
    if (!sub_10009C2E8(a6, a3, @"PRIVATE_MAC_ADDRESS", Mutable))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : Updated existing private cache network <%@> but unable to set it to cache", v90 message];
      }
    }
    char v66 = 0;
  }
  else
  {
    char v66 = 1;
  }
LABEL_120:
  if (sub_1000199C0((uint64_t)a3))
  {
    sub_10001C6A4((uint64_t)a3, @"FeatureOffBySystemForCarplay", kCFBooleanTrue);
    sub_10009C2E8(a6, a3, @"FeatureOffBySystemForCarplay", kCFBooleanTrue);
  }
  if (v66) {
    goto LABEL_162;
  }
  if (!*(unsigned char *)(a6 + 376))
  {
    CFNumberRef v69 = sub_10005B0B8(1);
    CFDictionarySetValue(Mutable, @"PRIVATE_MAC_ADDRESS_TYPE", v69);
    CFDictionarySetValue(Mutable, @"PRIVATE_MAC_ADDRESS_VALUE", *(const void **)(a6 + 488));
    CFDictionarySetValue(Mutable, @"PRIVATE_MAC_ADDRESS_IN_USE", *(const void **)(a6 + 488));
    sub_10001C6A4((uint64_t)a3, @"PRIVATE_MAC_ADDRESS", Mutable);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : Using HW Mac for Network <%@>. Feature is disabled", v90 message];
    }
    if (v69) {
      CFRelease(v69);
    }
    if (!sub_10009C2E8(a6, a3, @"PRIVATE_MAC_ADDRESS", Mutable))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : Updated existing private cache network <%@> but unable to set it to cache", v90 message];
      }
    }
  }
  if (v55 && v55 == kCFBooleanTrue)
  {
    if (v57)
    {
      CFTypeID TypeID = CFDataGetTypeID();
      if (TypeID == CFGetTypeID(v57))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, " %s WFMacRandomisation : Attempting association for migrated network <%@> re-trying random MAC <%@>", "__WiFiManagerUpdatePrivateMac", v90, v57 message];
        }
      }
    }
    sub_10001C6A4((uint64_t)a3, @"MacAddressRandomisationTagMigratedNetwork", v55);
  }
  if (v58 && v58 == kCFBooleanTrue)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Failure threshold met for network <%@> Resetting counters for new association", "__WiFiManagerUpdatePrivateMac", v90 message];
    }
    if (!sub_10009C2E8(a6, a3, @"FailureThresholdMet", kCFBooleanFalse))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : Updated kWiFiPrivateMacFailureThresholdMet keys for network <%@> but unable to set it to cache", v90 message];
      }
    }
  }
  if (v88)
  {
    char v76 = v87;
    if (v88 == kCFBooleanTrue) {
      char v76 = 1;
    }
    if ((v76 & 1) == 0) {
      goto LABEL_162;
    }
    goto LABEL_154;
  }
  if ((v86 & 1) == 0)
  {
LABEL_154:
    idx[0] = a6;
    idx[1] = 0xAAAAAAAA00000071;
    idx[2] = (CFIndex)a3;
    idx[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a6 + 104), (CFSetApplierFunction)sub_100020954, idx);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : DHCP released for network <%@>", v90 message];
    }
    int v78 = sub_10009C2E8(a6, a3, @"ResetCaptiveProbe", kCFBooleanFalse);
    if (v78)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Cleared the property kWiFiPrivateMacResetCaptiveProbe in private mac network record for <%@>", "__WiFiManagerUpdatePrivateMac", sub_10001A43C(a3) message];
      }
    }
    else if (qword_10027DD68)
    {
      [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : Updated kWiFiPrivateMacResetCaptiveProbe keys for network <%@> but unable to set it to cache", v90, v85 message];
    }
  }
LABEL_162:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v89) {
    CFRelease(v89);
  }
  long long v80 = *(const void **)(a6 + 448);
  if (v80)
  {
    CFRelease(v80);
    *(void *)(a6 + 448) = 0;
  }
  CFStringRef v81 = (const __CFString *)sub_10001A43C(a3);
  *(void *)(a6 + 448) = CFStringCreateCopy(kCFAllocatorDefault, v81);
  if (*(unsigned char *)(a6 + 1208))
  {
    if (!*(unsigned char *)(a6 + 2176) || (unsigned int v82 = *(unsigned __int8 *)(a6 + 2177), v82 <= 0xE) && ((1 << v82) & 0x5440) != 0)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: MIS state is enabled. Force-disabling before association.", "__WiFiManagerWillAssociateCallback")];
      }
      sub_100090458(a6, 0, 0);
    }
  }
}

void sub_1000B369C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v6 = a3;
  if (*(void *)(a5 + 1776))
  {
    *(unsigned char *)(a5 + 1808) = 0;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000B8948;
    v7[3] = &unk_100240790;
    v7[4] = v6;
    v7[5] = a5;
    dispatch_async((dispatch_queue_t)qword_10027DD88, v7);
  }
}

void sub_1000B3734(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 && a6)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: network %@, requestedInformation %@ err %d", "__WiFiManagerDidAssociateCallback", sub_10001A43C(a3), a4, a5 message];
    }
    sub_1000CFCB4((uint64_t)a3);
    if (sub_10009CF10(a6, a3))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: %@ is joined first time, so now enable it", "__WiFiManagerDidAssociateCallback", sub_10001A43C(a3) message];
      }
      sub_1000CDFA8(a3, 0);
    }
    sub_10009B1AC(a6, a3, 1u);
    sub_100086500(a6, 1, 2, 0);
    int v12 = *(unsigned __int8 *)(a6 + 24);
    sub_100022FC8(a6, v12, 1);
  }
}

void sub_1000B388C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int valuePtr = 0;
  sub_1000B848C(a6, a3, a2);
  if (a3
    && sub_10001E404((uint64_t)a3, @"WPS_PROB_RESP_IE")
    && objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "deviceAnalyticsClient"))
  {
    id v10 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") deviceAnalyticsClient];
    CFDictionaryRef v11 = sub_10001E404((uint64_t)a3, @"BSSID");
    unsigned int v12 = [v10 parsedBeaconInfoIsStored:v11 ssid:sub_10001A43C(a3)];
    BOOL v14 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      if (v12) {
        int v15 = "does not need";
      }
      else {
        int v15 = "needs";
      }
      CFStringRef v16 = sub_10001A43C(a3);
      [v14 WFLog:3, "%s: ParsedBeaconInfo %s submission for ssid:%@ bssid:%@ ", "__WiFiManagerBSSIDChangedCallback", v15, v16, sub_10001E404((uint64_t)a3, @"BSSID" message];
    }
    if ((v12 & 1) == 0) {
      sub_100053DDC(a6, a3, 0);
    }
  }
  sub_10009B1AC(a6, a3, 1u);
  CFBooleanRef v17 = (const __CFBoolean *)sub_10001E404((uint64_t)a3, @"BSSID");
  if (!sub_10009C2E8(a6, a3, @"BSSID", v17))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: BSSID changed. Updating private mac networks for network : %@", "__WiFiManagerBSSIDChangedCallback", sub_10001A43C(a3) message];
    }
  }
  sub_1000B78AC(a6, a3);
  context[0] = a3;
  context[1] = a1;
  CFSetApplyFunction(*(CFSetRef *)(a6 + 136), (CFSetApplierFunction)sub_1000B8990, context);
  if (sub_1000199C0((uint64_t)a3))
  {
    BOOL v19 = sub_1000CD6C4((uint64_t)a3);
    sub_1000B7B1C(a6, a1, v19);
  }
  CFNumberRef v20 = (const __CFNumber *)sub_100024070((uint64_t)a3);
  if (v20)
  {
    CFNumberGetValue(v20, kCFNumberIntType, &valuePtr);
    if (valuePtr >= 36)
    {
      if (CFAbsoluteTimeGetCurrent() - *(double *)(a6 + 2256) <= 600.0)
      {
        if (valuePtr >= 36)
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Roamed to 5GHz band, ignoring frequent channel update to Gizmo %f", "__WiFiManagerBSSIDChangedCallback", CFAbsoluteTimeGetCurrent() - *(double *)(a6 + 2256));
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Roamed to 5GHz band, send channel to Watch: %@", "__WiFiManagerBSSIDChangedCallback", sub_10001A43C(a3) message];
        }
        sub_100185108(*(void **)(a6 + 1432));
        *(CFAbsoluteTime *)(a6 + 2256) = CFAbsoluteTimeGetCurrent();
      }
    }
  }
}

void sub_1000B3BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (a5)
  {
    if (!*(unsigned char *)(a6 + 2360)) {
      return;
    }
    BOOL v7 = (unsigned char *)(a6 + 2360);
    goto LABEL_4;
  }
  uint64_t v8 = *(void *)(a6 + 2264);
  if (v8)
  {
    context[0] = a6;
    context[1] = a1;
    void context[2] = v8;
    CFSetApplyFunction(*(CFSetRef *)(a6 + 136), (CFSetApplierFunction)sub_1000B8334, context);
    kdebug_trace();
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, "%s: Dispatching client link up event.", "__WiFiManagerJoinDoneCallback"];
    }
  }
  if (*(unsigned char *)(a6 + 2360))
  {
    BOOL v7 = (unsigned char *)(a6 + 2360);
    if (*(unsigned char *)(a6 + 2345))
    {
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:3, @"%s: Debounce succeeded.", @"__WiFiManagerJoinDoneCallback"];
      }
      *(CFAbsoluteTime *)(a6 + 2328) = CFAbsoluteTimeGetCurrent();
      if (*(unsigned char *)(a6 + 2346))
      {
        CFDictionaryRef v11 = *(NSObject **)(a6 + 2352);
        dispatch_time_t v12 = dispatch_time(0, 3000000000);
        dispatch_source_set_timer(v11, v12, 0xFFFFFFFFFFFFFFFFLL, 0);
      }
      goto LABEL_5;
    }
LABEL_4:
    *(_WORD *)(a6 + 2345) = 0;
LABEL_5:
    if (!*(unsigned char *)(a6 + 2345) || !*(unsigned char *)(a6 + 2346)) {
      sub_1000B899C(a6);
    }
    unsigned char *v7 = 0;
  }
}

const void *sub_1000B3D34(const void *a1, int a2, uint64_t a3, uint64_t a4, CFDictionaryRef *a5, const __CFDictionary *a6, uint64_t a7)
{
  byte_10027D6F0 = 0;
  if (*(_DWORD *)(a7 + 788) == 2) {
    goto LABEL_5;
  }
  if (!*(void *)(a7 + 848))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: type %@(%d), display is off", "__WiFiManagerRequestCallback", sub_10005AF90(a3), a3 message];
    }
    goto LABEL_22;
  }
  if (a3 > 4) {
    goto LABEL_7;
  }
  if ((*(unsigned char *)(a7 + 832) & 0x11) == 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: type %@(%d), no FG wifi app", "__WiFiManagerRequestCallback", sub_10005AF90(a3), a3 message];
    }
LABEL_22:
LABEL_13:
    id v10 = 0;
    goto LABEL_15;
  }
LABEL_5:
  if (!a3 && *(void *)(a7 + 880)) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v9 = sub_1000DAC4C((uint64_t)kCFAllocatorDefault, a3, a4, a1, a2, a5, a6);
  id v10 = (const void *)v9;
  if (v9)
  {
    sub_1000DB058(v9, (uint64_t)sub_1000B8B04, a7);
    if (sub_1000DAD48((uint64_t)v10))
    {
      context[0] = 0xAAAAAAAAFFFFF0C1;
      context[1] = v10;
      CFSetApplyFunction(*(CFSetRef *)(a7 + 136), (CFSetApplierFunction)sub_1000B8DE4, context);
      if (LODWORD(context[0]) == -3903)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Notification %d not supported", sub_1000DAD38((uint64_t)v10));
        }
        CFRelease(v10);
        goto LABEL_13;
      }
      byte_10027D6F0 = 1;
    }
  }
LABEL_15:
  dispatch_time_t v12 = *(const void **)(a7 + 184);
  if (v12) {
    CFRelease(v12);
  }
  *(void *)(a7 + 184) = v10;
  return v10;
}

const void *sub_1000B3F30(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5, const __CFDictionary *a6, uint64_t a7)
{
  byte_10027D6F0 = 0;
  if (*(_DWORD *)(a7 + 788) == 2) {
    goto LABEL_5;
  }
  if (!*(void *)(a7 + 848))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: type %@(%d), display is off", "__WiFiManagerColocatedRequestCallback", sub_10005AF90(a3), a3 message];
    }
    goto LABEL_22;
  }
  if (a3 > 4) {
    goto LABEL_7;
  }
  if ((*(unsigned char *)(a7 + 832) & 0x11) == 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: type %@(%d), no FG wifi app", "__WiFiManagerColocatedRequestCallback", sub_10005AF90(a3), a3 message];
    }
LABEL_22:
LABEL_13:
    id v10 = 0;
    goto LABEL_15;
  }
LABEL_5:
  if (!a3 && *(void *)(a7 + 880)) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v9 = sub_1000DA018((uint64_t)kCFAllocatorDefault, a1, a2, a5, a6);
  id v10 = (const void *)v9;
  if (v9)
  {
    sub_1000DB058(v9, (uint64_t)sub_1000B8B04, a7);
    if (sub_1000DAD48((uint64_t)v10))
    {
      context[0] = 0xAAAAAAAAFFFFF0C1;
      context[1] = v10;
      CFSetApplyFunction(*(CFSetRef *)(a7 + 136), (CFSetApplierFunction)sub_1000B8DE4, context);
      if (LODWORD(context[0]) == -3903)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Notification %d not supported", sub_1000DAD38((uint64_t)v10));
        }
        CFRelease(v10);
        goto LABEL_13;
      }
      byte_10027D6F0 = 1;
    }
  }
LABEL_15:
  dispatch_time_t v12 = *(const void **)(a7 + 184);
  if (v12) {
    CFRelease(v12);
  }
  *(void *)(a7 + 184) = v10;
  return v10;
}

void sub_1000B4120(uint64_t a1, uint64_t a2, const void *a3, void *a4, int a5, uint64_t a6)
{
  if (!a3 || !a4) {
    return;
  }
  uint64_t v7 = a6;
  context[1] = -1431655766;
  context[0] = a5;
  CFTypeRef v43 = 0;
  unsigned int v44 = 0;
  uint64_t v45 = a1;
  uint64_t v46 = a6;
  CFTypeRef v9 = sub_100016E34(kCFAllocatorDefault, a3);
  CFTypeRef cf = v9;
  if (!v9)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: serialization failed for scan data: %@", "__WiFiManagerDispatchClientScanCacheUpdateEvent", a3 message];
    }
    goto LABEL_16;
  }
  CFTypeRef v10 = v9;
  CFTypeRef v43 = sub_100016E34(kCFAllocatorDefault, a4);
  if (v43)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a3, @"scanRequest");
    if (Value) {
      unsigned int v44 = CFDictionaryGetValue(Value, @"ScanReqClientPid");
    }
    CFSetApplyFunction(*(CFSetRef *)(v7 + 136), (CFSetApplierFunction)sub_1000B8E14, context);
    CFTypeRef v10 = cf;
    if (!cf) {
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: serialization failed for trimmed scan data: %@", "__WiFiManagerDispatchClientScanCacheUpdateEvent", a4 message];
    }
  }
  CFRelease(v10);
  CFTypeRef cf = 0;
LABEL_16:
  if (v43) {
    CFRelease(v43);
  }
  [*(id *)(v7 + 192) update80211dCountryCodes:a4];
  if (&_RDUpdateCountryCodeFromWiFiAPs)
  {
    id v15 = [a4 objectForKey:@"scanRequest"];
    id v16 = [a4 objectForKey:@"scanResults"];
    if (objc_msgSend(objc_msgSend(v15, "objectForKey:", @"SCAN_CHANNELS"), "count") != (id)1)
    {
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      id v17 = [v16 countByEnumeratingWithState:&v37 objects:context count:16];
      if (v17)
      {
        id v18 = v17;
        uint64_t v36 = v7;
        unint64_t v19 = 0;
        id v20 = 0;
        uint64_t v21 = *(void *)v38;
        do
        {
          for (CFIndex i = 0; i != v18; CFIndex i = (char *)i + 1)
          {
            if (*(void *)v38 != v21) {
              objc_enumerationMutation(v16);
            }
            id v23 = [[objc_msgSend(*(id *)(*((void *)&v37 + 1) + 8 * i), "objectForKey:", @"80211D_IE") objectForKey:@"IE_KEY_80211D_COUNTRY_CODE"];
            if (v23)
            {
              BOOL v24 = v23;
              if (!v20) {
                id v20 = [objc_alloc((Class)NSCountedSet) initWithCapacity:0];
              }
              [v20 addObject:[v24 uppercaseString]];
              ++v19;
            }
          }
          id v18 = [v16 countByEnumeratingWithState:&v37 objects:context count:16];
        }
        while (v18);
        if (v19 < 3)
        {
          CFStringRef v35 = 0;
        }
        else
        {
          id v25 = [v20 objectEnumerator];
          CFStringRef v26 = (const __CFString *)[v25 nextObject];
          if (v26)
          {
            CFStringRef v27 = v26;
            CFStringRef v28 = 0;
            id v29 = 0;
            unint64_t v30 = 0;
            do
            {
              id v31 = [v20 countForObject:v27];
              BOOL v33 = (unint64_t)v31 < 2 || (unint64_t)v31 < v30;
              if (v33) {
                id v34 = (id)v30;
              }
              else {
                id v34 = v31;
              }
              if (!v33)
              {
                id v29 = (id)v30;
                CFStringRef v28 = v27;
              }
              CFStringRef v27 = (const __CFString *)[v25 nextObject];
              unint64_t v30 = (unint64_t)v34;
            }
            while (v27);
          }
          else
          {
            id v34 = 0;
            id v29 = 0;
            CFStringRef v28 = 0;
          }
          if (v34 == v29) {
            CFStringRef v35 = 0;
          }
          else {
            CFStringRef v35 = v28;
          }
        }
        uint64_t v7 = v36;
      }
      else
      {
        id v20 = 0;
        CFStringRef v35 = 0;
      }
      sub_10009211C(v7, v35, 0);
    }
  }
}

void sub_1000B44D8(void *context, uint64_t a2, uint64_t a3)
{
}

void sub_1000B44F8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  v4[0] = 0xAAAAAAAAAAAAAAAALL;
  v4[1] = a1;
  LOBYTE(v4[0]) = a3;
  CFSetApplyFunction(*(CFSetRef *)(a4 + 136), (CFSetApplierFunction)sub_1000B9110, v4);
}

void sub_1000B453C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    if (a4)
    {
      context[0] = a3;
      context[1] = a1;
      _DWORD context[2] = a4;
      CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000B9120, context);
    }
  }
}

void sub_1000B4588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    if (a4)
    {
      context[0] = a3;
      context[1] = a1;
      _DWORD context[2] = a4;
      CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000B9144, context);
    }
  }
}

void sub_1000B45D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    if (a4)
    {
      context[0] = a3;
      context[1] = a1;
      _DWORD context[2] = a4;
      CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000B9168, context);
    }
  }
}

void sub_1000B4620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 && *(unsigned char *)(a3 + 2360))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: Debounce failed" : @"__WiFiManagerLinkDownDebounceFailedCallback"];
    }
    *(_WORD *)(a3 + 2345) = 0;
    sub_1000B899C(a3);
    *(unsigned char *)(a3 + 2360) = 0;
  }
}

void sub_1000B46A8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  context[1] = a1;
  int v6 = -1431655766;
  context[0] = a3;
  int v5 = a4;
  CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000B918C, context);
}

void sub_1000B46F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(a3 + 913) = a4;
  context[1] = a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  context[0] = a3;
  LOBYTE(v5) = a4;
  CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000BAFB8, context);
}

void sub_1000B473C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 916) + 1;
  *(_DWORD *)(a3 + 916) = v3;
  context[1] = a1;
  int v6 = -1431655766;
  context[0] = a3;
  int v5 = v3;
  CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000B9234, context);
}

void sub_1000B4790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 916) = 0;
  context[1] = a1;
  void context[2] = 0xAAAAAAAA00000000;
  context[0] = a3;
  CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000B9234, context);
}

void sub_1000B47FC(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (a2)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: association to recommened network %@", "__WiFiManagerRecommendedNetworkAssociationCallback", sub_10001A43C(a2) message];
      }
      sub_100093634(a3, a2, 14);
      return;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: network is null", "__WiFiManagerRecommendedNetworkAssociationCallback")
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager ref is null" args:("__WiFiManagerRecommendedNetworkAssociationCallback")];
    }
  }
}

void sub_1000B491C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a1;
  v3[1] = a3;
  CFSetApplyFunction(*(CFSetRef *)(a2 + 136), (CFSetApplierFunction)sub_1000B92F8, v3);
}

void sub_1000B4958(int a1, void *a2, CFStringRef theString1, const __CFBoolean *a4, uint64_t a5)
{
  if (a2 || !theString1)
  {
    if (theString1 && a2 && a4)
    {
      sub_10009C2E8(a5, a2, theString1, a4);
    }
  }
  else if (CFStringCompare(theString1, @"ForcedDisassoc", 1uLL))
  {
    if (CFStringCompare(theString1, @"PrivateMacCheckForMDMOrSupervised", 1uLL) == kCFCompareEqualTo
      && *(unsigned char *)(a5 + 529)
      && sub_1000B8688(a5))
    {
      *(unsigned char *)(a5 + 529) = 0;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s WFMacRandomisation : Profiles Networks successfully checked for MDM or supervised.", "__WiFiManagerPrivateMacUpdateNetworkCallback")];
      }
    }
  }
  else if (a4 && kCFBooleanTrue == a4 && *(unsigned char *)(a5 + 362))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s WFMacRandomisation : No associated network. Update Force Disassociate key", @"__WiFiManagerPrivateMacUpdateNetworkCallback"];
    }
    if (sub_100083E60((void *)a5, @"PrivateMacForcedDisassocPending", 0, 0))
    {
      *(unsigned char *)(a5 + 362) = 0;
      sub_100083F8C(a5);
      sub_100084BB4(a5);
      sub_1000A6B7C(a5, 1, 0);
      sub_100086F2C(a5, "__WiFiManagerPrivateMacUpdateNetworkCallback", 29937);
    }
  }
}

void sub_1000B4B50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10010FE4C(a1);
  if (*(_DWORD *)(a2 + 2016) != v3)
  {
    uint64_t v4 = v3;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s WiFiMC : band support changed. Before : %d, after : %d", "__WiFiManagerCountryCodeChangedCallback", *(unsigned int *)(a2 + 2016), v4)];
    }
    *(_DWORD *)(a2 + 2016) = v4;
    sub_100091DB4((void *)a2, @"WiFiCountryBandSupportKey", v4, 1);
  }
  int v6 = (__CFString *)[objc_alloc((Class)NSMutableString) initWithString:&stru_100248240];
  if (sub_10009E30C((unsigned int *)a2, (uint64_t)v6))
  {
    if (![(__CFString *)v6 caseInsensitiveCompare:&stru_100248240]
      || ![(__CFString *)v6 caseInsensitiveCompare:@"X0"]
      || ![(__CFString *)v6 caseInsensitiveCompare:@"X2"]
      || ![(__CFString *)v6 caseInsensitiveCompare:@"X3"]
      || ![(__CFString *)v6 caseInsensitiveCompare:@"XZ"])
    {

      int v6 = (__CFString *)[objc_alloc((Class)NSMutableString) initWithString:&stru_100248240];
    }
    if (([(__CFString *)v6 isEqual:*(void *)(a2 + 1768)] & 1) == 0)
    {
      uint64_t v7 = *(__CFString **)(a2 + 1768);
      if ([(__CFString *)v7 isEqual:&stru_100248240]) {
        uint64_t v7 = @"unknown";
      }
      if ([(__CFString *)v6 isEqual:&stru_100248240]) {
        CFStringRef v8 = @"unknown";
      }
      else {
        CFStringRef v8 = v6;
      }
      CFTypeRef v9 = +[NSString stringWithFormat:@"WiFi country code changed from %@ to %@", v7, v8];

      *(void *)(a2 + 1768) = [(__CFString *)v6 copy];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000B9314;
      block[3] = &unk_100240790;
      block[4] = v9;
      void block[5] = a2;
      dispatch_async((dispatch_queue_t)qword_10027DD88, block);
    }
  }
}

void sub_1000B4D88(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a3)
  {
    v5[0] = a1;
    v5[1] = a2;
    if (a4) {
      uint64_t v4 = (void (__cdecl *)(const void *, void *))sub_1000B9358;
    }
    else {
      uint64_t v4 = (void (__cdecl *)(const void *, void *))sub_1000B9364;
    }
    CFSetApplyFunction(*(CFSetRef *)(a3 + 136), v4, v5);
  }
}

void sub_1000B4DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  context[0] = a1;
  context[1] = a2;
  void context[2] = a4;
  CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000B9370, context);
}

void sub_1000B4E28(const void *a1, uint64_t a2, CFDictionaryRef theDict, uint64_t a4)
{
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"DRIVER_AVAILABLE");
  CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(theDict, @"DRIVER_AVAILABLE_KEY_SUBREASON_STRING");
  CFTypeRef v10 = *(const void **)(a4 + 792);
  if (v10)
  {
    CFStringRef v11 = v9;
    if (CFEqual(Value, v10))
    {
      if (!v11 || CFStringCompare(@"Driver Booted", v11, 1uLL))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: driver availability: %@ hasn't changed, bail out\n", "__WiFiManagerDispatchDeviceAvailable", Value message];
        }
        return;
      }
    }
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: driver availability: %@, previously: %@\n", "__WiFiManagerDispatchDeviceAvailable", Value, *(void *)(a4 + 792) message];
  }
  *(void *)(a4 + 792) = Value;
  if (!CFEqual(Value, kCFBooleanTrue))
  {
    CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(theDict, @"DRIVER_AVAILABLE_REASON_STRING");
    if (CFStringCompare(@"Watchdog", v21, 1uLL))
    {
      CFStringRef v22 = (const __CFString *)CFDictionaryGetValue(theDict, @"DRIVER_AVAILABLE_REASON_STRING");
      if (CFStringCompare(@"DextCrashed", v22, 1uLL) == kCFCompareEqualTo && *(unsigned char *)(a4 + 2200) == 1)
      {
        uint64_t v23 = sub_10010A740((uint64_t)a1);
        if (v23)
        {
          uint64_t v24 = v23;
          if (sub_1000199C0(v23)) {
            sub_1000B7DDC(a4, (uint64_t)a1, v24);
          }
        }
      }
    }
    else
    {
      if (theDict)
      {
        CFStringRef v25 = (const __CFString *)CFDictionaryGetValue(theDict, @"SSID_STR");
        CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"PRIVATE_MAC_ADDRESS_TYPE");
        CFDataRef theData = (const __CFData *)CFDictionaryGetValue(theDict, @"PRIVATE_MAC_ADDRESS_VALUE");
      }
      else
      {
        CFStringRef v25 = 0;
        CFNumberRef v26 = 0;
        CFDataRef theData = 0;
      }
      sub_100083F8C(a4);
      CFArrayRef v29 = *(const __CFArray **)(a4 + 352);
      if (v29)
      {
        CFIndex Count = CFArrayGetCount(v29);
        if (Count >= 1)
        {
          CFIndex v31 = Count;
          CFIndex v32 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 352), v32);
            CFStringRef v34 = (const __CFString *)sub_10001E404((uint64_t)ValueAtIndex, @"SSID_STR");
            BOOL v35 = !v34 || v25 == 0;
            if (!v35 && CFEqual(v34, v25)) {
              break;
            }
            if (v31 == ++v32) {
              goto LABEL_51;
            }
          }
          CFDictionaryRef v37 = (const __CFDictionary *)sub_10001E404((uint64_t)ValueAtIndex, @"PRIVATE_MAC_ADDRESS");
          if (v37)
          {
            CFDictionaryRef v38 = v37;
            CFTypeID TypeID = CFDictionaryGetTypeID();
            if (TypeID == CFGetTypeID(v38))
            {
              CFNumberRef v40 = (const __CFNumber *)CFDictionaryGetValue(v38, @"PRIVATE_MAC_ADDRESS_TYPE");
              CFDataRef v41 = (const __CFData *)sub_10001E404((uint64_t)ValueAtIndex, @"PrivateMacFutureMacAddress");
              if (v40 && v26 != 0)
              {
                CFDataRef v43 = v41;
                if (CFNumberCompare(v40, v26, 0) == kCFCompareEqualTo && v43 && theData)
                {
                  BytePtr = CFDataGetBytePtr(v43);
                  uint64_t v45 = CFDataGetBytePtr(theData);
                  if (*(_DWORD *)BytePtr != *(_DWORD *)v45
                    || *((unsigned __int16 *)BytePtr + 2) != *((unsigned __int16 *)v45 + 2))
                  {
                    if (qword_10027DD68) {
                      [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : WatchDog occurred. Preventing mac Address rotation. Will revert to Current Value. Current : <%@> Rotated : <%@>\n", "__WiFiManagerDispatchDeviceAvailable", theData, theData message];
                    }
                    sub_10001C6A4((uint64_t)ValueAtIndex, @"PrivateMacFutureMacAddress", 0);
                    sub_10001C6A4((uint64_t)ValueAtIndex, @"ResetCaptiveProbe", kCFBooleanFalse);
                    sub_100084BB4(a4);
                    sub_1000A6B7C(a4, 1, 0);
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_51;
  }
  if (sub_10008AA98(a4)) {
    sub_100088CD0(a4);
  }
  CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(theDict, @"DRIVER_AVAILABLE_REASON_STRING");
  if (CFStringCompare(@"Initializing", v14, 1uLL) == kCFCompareEqualTo)
  {
    BOOL v54 = sub_100023220((void *)a4, @"WiFiMacRandomizationInternalUI", 1);
    uint64_t context = a4;
    CFDictionaryRef v51 = (CFDictionaryRef)0xAAAAAAAA0000006FLL;
    BOOL v52 = &v54;
    uint64_t v53 = 1;
    CFSetApplyFunction(*(CFSetRef *)(a4 + 104), (CFSetApplierFunction)sub_100020954, &context);
    sub_100083F8C(a4);
    sub_100084BB4(a4);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B94C8;
  block[3] = &unk_10023EAF8;
  block[4] = a4;
  dispatch_async((dispatch_queue_t)qword_10027DD88, block);
  sub_100008778((void *)a4, *(void **)(a4 + 1728), 10, a1);
  CFStringRef v15 = (const __CFString *)CFDictionaryGetValue(theDict, @"DRIVER_AVAILABLE_REASON_STRING");
  if (CFStringCompare(@"DextCrashed", v15, 1uLL) == kCFCompareEqualTo)
  {
    id v16 = *(void **)(a4 + 192);
    if (v16)
    {
      id v17 = [v16 getLocaleCountryCode];
      char v18 = [*(id *)(a4 + 192) getLocaleSource];
      if (*(unsigned char *)(a4 + 2012) && v17)
      {
        int v19 = sub_10010FDAC((uint64_t)a1, v17, v18);
        if (v19)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s WiFiCC : Successfully Reapplied country : [%@] after DextCrashed", "__WiFiManagerDispatchDeviceAvailable", v17 message];
          }
          goto LABEL_51;
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s WiFiCC : Could not apply : [%@] after DextCrashed. Determining locale...", "__WiFiManagerDispatchDeviceAvailable", v17 message];
        }
        CFStringRef v28 = v20;
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s WiFiCC : Dext Crashed. Locale not available. Determining fresh locale...", "__WiFiManagerDispatchDeviceAvailable")
        }
        CFStringRef v28 = v27;
      }
      [*(id *)(a4 + 192) determineAndSetLocale:0];
    }
  }
LABEL_51:
  uint64_t context = (uint64_t)a1;
  CFDictionaryRef v51 = theDict;
  CFSetApplyFunction(*(CFSetRef *)(a4 + 136), (CFSetApplierFunction)sub_1000B94D4, &context);
  uint64_t v36 = *(void **)(a4 + 1792);
  if (v36) {
    [v36 handleEvent:55 withData:theDict interface:a2];
  }
}

void sub_1000B5484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a1;
  v4[1] = a3;
  CFSetApplyFunction(*(CFSetRef *)(a4 + 136), (CFSetApplierFunction)sub_1000B94F0, v4);
}

void sub_1000B54C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a1;
  v4[1] = a3;
  CFSetApplyFunction(*(CFSetRef *)(a4 + 136), (CFSetApplierFunction)sub_1000B950C, v4);
}

void sub_1000B54FC(uint64_t a1, uint64_t a2, const void **a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8)
{
  if (a8)
  {
    kdebug_trace();
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: <%@> [%@] isMainIf? %d, isIPV4Routable <%d>, is IPV6Routable <%d>", "__WiFiManagerIPv4Callback", a2, a3, a4, a5, a6 message];
    }
    if (a4)
    {
      if (a6 | a5)
      {
        if (!a3)
        {
          char v18 = 0;
LABEL_33:
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"%s: Sending link up status to Gizmo" arguments:("__WiFiManagerIPv4Callback")];
          }
          sub_100184FC0(*(void **)(a8 + 1432), v18);
          return;
        }
        CFArrayRef v16 = (const __CFArray *)sub_1000830B8(a8);
        id v17 = (const void **)sub_1000AA660(v16, (uint64_t)a3);
        if (v17) {
          char v18 = v17;
        }
        else {
          char v18 = a3;
        }
        CFDictionaryRef v19 = (const __CFDictionary *)sub_1000AB3E0(a8, a3);
        uint64_t v20 = (uint64_t)v19;
        if (v19)
        {
          CFBooleanRef v21 = (const __CFBoolean *)sub_10001E404((uint64_t)v19, @"MacAddressRandomisationTagMigratedNetwork");
          CFDictionaryRef v19 = (const __CFDictionary *)sub_10001E404(v20, @"PRIVATE_MAC_ADDRESS");
          if (v19)
          {
            CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v19, @"PRIVATE_MAC_ADDRESS_VALUE");
            CFDictionaryRef v19 = sub_10001A6DC(Value);
            int v23 = (int)v19;
            if (!a5) {
              goto LABEL_29;
            }
            goto LABEL_17;
          }
        }
        else
        {
          CFBooleanRef v21 = 0;
        }
        int v23 = 0;
        if (!a5)
        {
LABEL_29:
          if (v21 && v21 == kCFBooleanTrue && v23)
          {
            sub_1000ACAFC((uint64_t)v19, a3, a8);
            sub_100086F2C(a8, "__WiFiManagerIPv4Callback", 9344);
            unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
            unsigned int v26 = 3;
            sub_1000570A8(v20, (uint64_t)&v26);
            sub_100056E00(&v26);
          }
          goto LABEL_33;
        }
LABEL_17:
        if (a7 || (CFDictionaryRef v19 = (const __CFDictionary *)sub_1000199C0((uint64_t)v18), v19))
        {
          if (v20
            && (!v21 || v21 != kCFBooleanTrue || !v23 || sub_1000C74BC((uint64_t)v18) || sub_1000C7514((uint64_t)v18))
            && !sub_100095E1C(a8, v18, 6))
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "Unable to add assoc done network (%@) to Private Mac network List", sub_10001A43C(a3) message];
            }
          }
          goto LABEL_33;
        }
        goto LABEL_29;
      }
    }
  }
}

void sub_1000B57A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  context[0] = a1;
  context[1] = a2;
  void context[2] = a3;
  CFSetApplyFunction(*(CFSetRef *)(a4 + 136), (CFSetApplierFunction)sub_1000B9528, context);
}

void sub_1000B57E4(int a1, int a2, void *a3, CFDictionaryRef theDict)
{
}

uint64_t sub_1000B57F0(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1000CFCB4((uint64_t)a2);

  return sub_10009B1AC(a3, a2, 1u);
}

uint64_t sub_1000B5838(uint64_t result, _DWORD *a2, unsigned char *a3, uint64_t a4)
{
  if (result)
  {
    if (a4)
    {
      *a2 = *(_DWORD *)(a4 + 984);
      *a3 = *(unsigned char *)(a4 + 314);
    }
  }
  return result;
}

void sub_1000B5854(void *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  if (!a4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: manager is NULL!", "__WiFiManagerSoftErrorManagerCallback"];
    }
    goto LABEL_24;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: deviceManager is NULL!", "__WiFiManagerSoftErrorManagerCallback"];
    }
LABEL_24:
    return;
  }
  int v7 = a2;
  switch(a2)
  {
    case 0x12:
      CFStringRef v8 = *(void **)(a4 + 1744);
      break;
    case 0x11:
      CFStringRef v8 = *(void **)(a4 + 1736);
      break;
    case 0x10:
      [*(id *)(a4 + 1736) incrementCount:a2, a3];
      [*(id *)(a4 + 1736) submitABCReportWithReason:0];
      [*(id *)(a4 + 1736) submitMetric];
      sub_100125B18((uint64_t)a1, -1);
      return;
    default:
      CFStringRef v9 = *(void **)(a4 + 1728);
      if (v9)
      {
        sub_100008778(a1, v9, v7, a3);
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: softErrorManager is NULL!", @"__WiFiManagerSoftErrorManagerCallback"];
      }
      goto LABEL_24;
  }

  [v8 updateHUDWithMessage:a3];
}

void sub_1000B59F0(uint64_t a1, uint64_t a2)
{
}

void sub_1000B59FC(uint64_t a1, const void *a2, uint64_t a3, const __CFDictionary *a4)
{
  CFDateRef v89 = 0;
  CFStringRef v90 = 0;
  char v87 = 0;
  CFIndex v88 = -1;
  unsigned int v86 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  unsigned __int8 v83 = 0;
  value = 0;
  unsigned int valuePtr = 0;
  CFNumberRef number = 0;
  unsigned int v79 = 0;
  CFNumberRef v78 = 0;
  unsigned int v77 = 0;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Processing __WiFiManagerBssSteerCallback for ifName:%@", "__WiFiManagerBssSteerCallback", a2 message];
  }
  if (CFDictionaryGetValueIfPresent(a4, @"P2P_BSS_STEERING_REQUEST_TYPE", (const void **)&value))
  {
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Steering Request type:%u!", "__WiFiManagerBssSteerCallback", valuePtr];
    }
  }
  if (value)
  {
    CFTypeRef v10 = (CFDictionaryRef *)sub_10000E5D0(a1, a2);
    CFStringRef v11 = v10;
    if (v10) {
      id v12 = sub_10000AD1C((uint64_t)v10);
    }
    else {
      id v12 = 0;
    }
    unsigned int v69 = [[v12 channel] band];
    if (!CFDictionaryGetValueIfPresent(a4, @"BSSID", (const void **)&v89)) {
      CFDateRef v89 = 0;
    }
    if (!CFDictionaryGetValueIfPresent(a4, @"SSID_STR", (const void **)&v90)) {
      CFStringRef v90 = 0;
    }
    CFBooleanRef v13 = sub_10001CECC(v11);
    BOOL v14 = 0;
    if (v11 && v90)
    {
      if (sub_10001A43C(v11))
      {
        CFStringRef v15 = (const __CFString *)sub_10001A43C(v11);
        BOOL v14 = CFEqual(v15, (CFStringRef)v90);
      }
      else
      {
        BOOL v14 = 0;
      }
    }
    if (CFDictionaryGetValueIfPresent(a4, @"CHANNEL_FLAGS", (const void **)&v85))
    {
      if (v85) {
        CFNumberGetValue((CFNumberRef)v85, kCFNumberIntType, (char *)&v84 + 4);
      }
    }
    else
    {
      uint64_t v85 = 0;
    }
    if (CFDictionaryGetValueIfPresent(a4, @"CHANNEL", (const void **)&v87))
    {
      if (v87)
      {
        CFNumberGetValue((CFNumberRef)v87, kCFNumberSInt32Type, &v86);
        CFArrayRef v16 = v87;
      }
      else
      {
        CFArrayRef v16 = 0;
      }
    }
    else
    {
      CFArrayRef v16 = 0;
      char v87 = 0;
    }
    unint64_t v17 = (unint64_t)+[WiFiUsagePrivacyFilter bandFromFlags:v85 OrChannel:v16];
    if (v85) {
      BOOL v18 = HIDWORD(v84) == 0;
    }
    else {
      BOOL v18 = 1;
    }
    uint64_t v19 = v18;
    if (CFDictionaryGetValueIfPresent(a4, @"BAND_PREFERENCE", (const void **)&number))
    {
      if (number)
      {
        CFNumberGetValue(number, kCFNumberSInt32Type, &v79);
        if (v79 - 1 >= 3) {
          unint64_t v17 = v17;
        }
        else {
          unint64_t v17 = v79 - 1;
        }
      }
    }
    else
    {
      CFNumberRef number = 0;
    }
    if (CFDictionaryGetValueIfPresent(a4, @"ROAM_FLAGS", (const void **)&v78))
    {
      if (v78) {
        CFNumberGetValue(v78, kCFNumberSInt32Type, &v77);
      }
    }
    else
    {
      CFNumberRef v78 = 0;
    }
    if (valuePtr >= 2)
    {
      if (valuePtr == 2)
      {
        CFDataRef v72 = a2;
        uint64_t v74 = a1;
        unsigned int v26 = v13;
        id v27 = v12;
        CFStringRef v28 = +[WiFiUsageMonitor sharedInstance];
        if (v86) {
          BOOL v29 = v87 == 0;
        }
        else {
          BOOL v29 = 1;
        }
        if (v29) {
          uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v30 = v86;
        }
        CFIndex v31 = v90;
        if (v89)
        {
          if (CFStringCompare(@"ff:ff:ff:ff:ff:ff", (CFStringRef)v89, 0)) {
            CFIndex v32 = v89;
          }
          else {
            CFIndex v32 = 0;
          }
        }
        else
        {
          CFIndex v32 = 0;
        }
        LOWORD(v67) = [v26 isStandalone6G];
        -[WiFiUsageMonitor setSteeringRequest:preferredChannel:preferredBand:preferredSSID:targetSSIDDiffersFromCurrent:preferredBSS:ssidIsSplit:transitionCandidates:](v28, "setSteeringRequest:preferredChannel:preferredBand:preferredSSID:targetSSIDDiffersFromCurrent:preferredBSS:ssidIsSplit:transitionCandidates:", 2, v30, v17, v31, !v14, v32, v67);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Current Network ssid is :%@", "__WiFiManagerBssSteerCallback", sub_10001A43C(v11) message];
        }
        id v12 = v27;
        if (v11) {
          sub_1000FEA7C(v74, v72, 1017, "__WiFiManagerBssSteerCallback", 9074);
        }
        BOOL v33 = 0;
        CFStringRef v34 = 0;
        CFNumberRef v35 = 0;
        CFBooleanRef v13 = v26;
        if (!v12) {
          goto LABEL_131;
        }
LABEL_130:
        CFRelease(v12);
LABEL_131:
        if (v11) {
          CFRelease(v11);
        }
        if (v33) {
          CFRelease(v33);
        }
        if (v34) {
          CFRelease(v34);
        }
        if (v35) {
          CFRelease(v35);
        }
        if (v13) {
          CFRelease(v13);
        }
        return;
      }
      BOOL v33 = 0;
      CFStringRef v34 = 0;
      goto LABEL_68;
    }
    CFDataRef v71 = a2;
    long long v73 = (void *)a1;
    long long v75 = v13;
    id v70 = v12;
    uint64_t v20 = +[WiFiUsageMonitor sharedInstance];
    if (v86) {
      BOOL v21 = v87 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v22 = v86;
    }
    int v23 = v90;
    BOOL v24 = !v14;
    if (v89)
    {
      if (CFStringCompare(@"ff:ff:ff:ff:ff:ff", (CFStringRef)v89, 0)) {
        CFStringRef v25 = v89;
      }
      else {
        CFStringRef v25 = 0;
      }
    }
    else
    {
      CFStringRef v25 = 0;
    }
    LOWORD(v67) = [v75 isStandalone6G];
    -[WiFiUsageMonitor setSteeringRequest:preferredChannel:preferredBand:preferredSSID:targetSSIDDiffersFromCurrent:preferredBSS:ssidIsSplit:transitionCandidates:](v20, "setSteeringRequest:preferredChannel:preferredBand:preferredSSID:targetSSIDDiffersFromCurrent:preferredBSS:ssidIsSplit:transitionCandidates:", v19, v22, v17, v23, v24, v25, v67);
    uint64_t v36 = sub_1000830B8(a3);
    if (!v36)
    {
      id v12 = v70;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: Known networks cache is Null!", @"__WiFiManagerBssSteerCallback"];
      }
      BOOL v33 = 0;
      CFStringRef v34 = 0;
      CFNumberRef v35 = 0;
LABEL_110:
      CFBooleanRef v13 = v75;
      if (!v12) {
        goto LABEL_131;
      }
      goto LABEL_130;
    }
    CFArrayRef v37 = (const __CFArray *)v36;
    if (v90)
    {
      CFStringRef v34 = sub_1000C5D34((const __CFString *)v90);
      if (!v34)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, "%s: Failed in creating the network!", "__WiFiManagerBssSteerCallback"];
        }
        BOOL v33 = 0;
        CFStringRef v34 = 0;
        goto LABEL_109;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Current Network ssid is :%@", "__WiFiManagerBssSteerCallback", sub_10001A43C(v11) message];
      }
      if (!v11)
      {
        int v42 = 0;
        int v41 = 0;
LABEL_86:
        if (qword_10027DD68)
        {
          unsigned int v44 = "doFullJoin";
          if (v42) {
            unsigned int v44 = "doRoam";
          }
          [((id)qword_10027DD68) WFLog:3, "%s:%d %s !\n", "__WiFiManagerBssSteerCallback", 8954, v44];
        }
        if (v42)
        {
          if (v41)
          {
            id v12 = v70;
            CFBooleanRef v13 = v75;
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3 message:@"%s: Try any Roam candidate" : @"__WiFiManagerBssSteerCallback"];
            }
            CFStringRef v46 = 0;
            goto LABEL_113;
          }
          CFStringRef v46 = (const __CFString *)CFDictionaryGetValue(a4, @"BSSID");
          id v12 = v70;
          CFBooleanRef v13 = v75;
          if (v46)
          {
LABEL_113:
            if (v87)
            {
              if (number)
              {
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Band Preference :%u!", "__WiFiManagerBssSteerCallback", v79);
                }
              }
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s:%d Calling for Roam", "__WiFiManagerBssSteerCallback", 9015);
              }
              uint64_t v85 = (void *)CFDictionaryGetValue(a4, @"CHANNEL_FLAGS");
              CFNumberRef v55 = (const __CFNumber *)CFDictionaryGetValue(a4, @"CHANNEL");
              if (!v85)
              {
                CFNumberRef v35 = 0;
                if (v55) {
LABEL_151:
                }
                  CFNumberGetValue(v55, kCFNumberSInt8Type, &v84);
LABEL_152:
                sub_10011201C(v73, (int)v71, v46, v84, SHIDWORD(v84), v79, v77);
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s:Cached steering request bssid (%@), channel (%u), band (%d), channel flags(0x%x), roam flags(0x%x)", "__WiFiManagerBssSteerCallback", v46, v84, v79, HIDWORD(v84), v77 message];
                }
                id v12 = v70;
                CFBooleanRef v13 = v75;
                if (_os_feature_enabled_impl() && v69 == 3)
                {
                  if (v83 == 2) {
                    uint64_t v60 = 55;
                  }
                  else {
                    uint64_t v60 = 54;
                  }
                  sub_1000047D4(a3, v60);
                }
                else
                {
                  sub_100121A28((uint64_t)v73, v46, (unint64_t)v87, v35, number, v78);
                }
                BOOL v33 = 0;
                if (!v70) {
                  goto LABEL_131;
                }
                goto LABEL_130;
              }
              CFNumberGetValue((CFNumberRef)v85, kCFNumberIntType, (char *)&v84 + 4);
              if ((v84 & 0x800000000) != 0)
              {
                char v56 = 1;
              }
              else
              {
                if ((v84 & 0x1000000000) == 0) {
                  goto LABEL_146;
                }
                char v56 = 2;
              }
              unsigned __int8 v83 = v56;
LABEL_146:
              if ((v84 & 0x200000000000) != 0) {
                unsigned __int8 v83 = 3;
              }
              CFNumberRef v35 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &v83);
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFiRoam : Band for roam : %d", "__WiFiManagerBssSteerCallback", v83);
              }
              if (v55) {
                goto LABEL_151;
              }
              goto LABEL_152;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3 message:@"%s: Channel not present" :@"__WiFiManagerBssSteerCallback"];
            }
            BOOL v33 = 0;
LABEL_68:
            CFNumberRef v35 = 0;
            if (!v12) {
              goto LABEL_131;
            }
            goto LABEL_130;
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:message:3, "%s: bssid is not present in Steering Dictionary", "__WiFiManagerBssSteerCallback", v68];
          }
        }
        else
        {
          sub_10009BC5C(v37, v34, &v88);
          if (v88 == -1)
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: %@ does not  exist", "__WiFiManagerBssSteerCallback", v90 message];
            }
          }
          else
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v37, v88);
            if (!ValueAtIndex)
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: %@ does not  exist in the Known Network List", "__WiFiManagerBssSteerCallback", v90 message];
              }
              CFMutableDictionaryRef v64 = v48;
              goto LABEL_191;
            }
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "known network ssid: %@: \n", sub_10001A43C(ValueAtIndex) message];
            }
            if (v11) {
              sub_1000FEA7C((uint64_t)v73, v71, 1017, "__WiFiManagerBssSteerCallback", 8968);
            }
            double v49 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)ValueAtIndex);
            if (v49)
            {
              BOOL v33 = v49;
              uint64_t v50 = CFDictionaryGetValue(a4, @"BSSID");
              if (v50)
              {
                CFDictionaryRef v51 = v50;
                if (v87) {
                  sub_10001C6A4((uint64_t)v33, @"CHANNEL", v87);
                }
                sub_10001C6A4((uint64_t)v33, @"BSSID", v51);
                sub_10001C6A4((uint64_t)v33, @"FORCE_BSSID", kCFBooleanTrue);
                if (sub_10001E404((uint64_t)v33, @"BSSID"))
                {
                  sub_1000C63FC((uint64_t)v33, (uint64_t)ValueAtIndex);
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: found matching network in scan results, proceeding with association", "__WiFiManagerBssSteerCallback")];
                  }
                  context[0] = a3;
                  context[1] = 0xAAAAAAAA00000059;
                  void context[2] = v33;
                  void context[3] = 0;
                  CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_100020954, context);
                }
              }
              else
              {
                if (qword_10027DD68) {
                  [qword_10027DD68 WFLog:message:3, "%s: bssid is not present in Steering Dictionary", "__WiFiManagerBssSteerCallback"];
                }
              }
              goto LABEL_109;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3 message:@"%s: Unable to copy known network" args:("__WiFiManagerBssSteerCallback", v68)];
            }
          }
        }
        CFMutableDictionaryRef v64 = v63;
LABEL_191:
        BOOL v33 = 0;
LABEL_109:
        CFNumberRef v35 = 0;
        id v12 = v70;
        goto LABEL_110;
      }
      int v39 = sub_1000C8DF4((uint64_t)v11, (uint64_t)v34);
      if (!v39)
      {
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:message:3, "%s: Different network from current - attempting Roam !\n", "__WiFiManagerBssSteerCallback"];
        }
        int v41 = 1;
        goto LABEL_84;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Same network as current - doing Roam !\n", "__WiFiManagerBssSteerCallback")
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Ssid not present in the dictionary! - doing Roam\n", "__WiFiManagerBssSteerCallback")];
      }
      CFStringRef v34 = 0;
    }
    int v41 = 0;
LABEL_84:
    int v42 = 1;
    goto LABEL_86;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s: Failed to get steering request type\n", "__WiFiManagerBssSteerCallback"];
  }
}

void sub_1000B668C(uint64_t a1, char a2, char a3, uint64_t a4)
{
  if (a4)
  {
    *(unsigned char *)(a4 + 2176) = a2;
    *(unsigned char *)(a4 + 2177) = a3;
  }
}

void sub_1000B669C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: type: %d network: %@", "__WiFiManagerUserNotificationPresentationCallback", a3, a2 message];
    }
    id v8 = [objc_alloc((Class)NSDictionary) initWithObjectsAndKeys:sub_10001A43C(a2), @"ssid", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3), @"notificationType", @"notification", @"type", @"presentation", @"trigger", 0];
    id context = v8;
    CFSetApplyFunction(*(CFSetRef *)(a4 + 136), (CFSetApplierFunction)sub_1000B9538, &context);
    if (v8) {
      CFRelease(v8);
    }
  }
}

void sub_1000B67E4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = 0;
  unint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  if (a5)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: type: %d response: %d network: %@", "__WiFiManagerUserNotificationResponseCallback", a3, a4, a2 message];
    }
    if (a3 != 1)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no blacklisting for notification of type %d response %d", "__WiFiManagerUserNotificationResponseCallback", a3, a4)];
      }
      goto LABEL_8;
    }
    if (a4 == 5)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: not blacklisting system cancelled recommendation", @"__WiFiManagerUserNotificationResponseCallback"];
      }
LABEL_8:
      goto LABEL_12;
    }
    if (a2)
    {
      CFTypeRef v11 = CFRetain(a2);
      v17[3] = (uint64_t)v11;
    }
    id v12 = *(NSObject **)(a5 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000B9540;
    block[3] = &unk_100240AD0;
    block[4] = &v16;
    void block[5] = a5;
    int v14 = 1;
    int v15 = a4;
    dispatch_async(v12, block);
  }
LABEL_12:
  _Block_object_dispose(&v16, 8);
}

void sub_1000B6980(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6998(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return *(void *)(a2 + 2192);
  }
  else {
    return 0;
  }
}

void sub_1000B69AC(uint64_t a1, void *a2, const __CFString *a3, const __CFBoolean *a4, uint64_t a5)
{
  if (a2 && a3 && a4)
  {
    sub_10009C2E8(a5, a2, a3, a4);
  }
  else
  {
    int v6 = sub_1000AB3E0(a5, (const void **)a2);
    if (v6)
    {
      uint64_t v7 = (uint64_t)v6;
      CFDictionaryRef v8 = (const __CFDictionary *)sub_10001E404((uint64_t)v6, @"PRIVATE_MAC_ADDRESS");
      if (v8 && (CFDictionaryRef v9 = v8, TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(v9)))
      {
        CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v9, @"PRIVATE_MAC_ADDRESS_VALUE");
        unsigned int v12 = sub_10001A6DC(Value);
        if (!sub_10001E404(v7, @"isBackhaulLinkUp") && v12)
        {
          CFBooleanRef v13 = *(NSObject **)(a5 + 432);
          dispatch_time_t v14 = dispatch_time(0, (uint64_t)(*(double *)(a5 + 440) * 1000000000.0));
          dispatch_source_set_timer(v13, v14, 0xFFFFFFFFFFFFFFFFLL, 0);
        }
      }
      else
      {
        sub_10001E404(v7, @"isBackhaulLinkUp");
      }
    }
  }
}

void sub_1000B6AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: manager is NULL!", "__WiFiManagerP2pThreadCoexEventCallback"];
    }
    goto LABEL_13;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: deviceManager is NULL!" args:("__WiFiManagerP2pThreadCoexEventCallback")];
    }
LABEL_13:
    CFTypeRef v11 = v10;
    goto LABEL_17;
  }
  if (a4)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: p2pThreadCoexEvent intf :%@", "__WiFiManagerP2pThreadCoexEventCallback", a2 message];
    }
    context[0] = a3;
    context[1] = a1;
    void context[2] = a4;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: p2pThreadCoexEvent deviceManager :%p", "__WiFiManagerDispatchClientP2pThreadCoexEvent", a1);
    }
    CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000B9704, context);
    return;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s: p2pThreadCoexEvent data is NULL!", "__WiFiManagerP2pThreadCoexEventCallback"];
  }
  CFTypeRef v11 = v8;
LABEL_17:
}

void sub_1000B6C88(int a1, int a2, CFArrayRef theArray, uint64_t a4)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (!a4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager" : @"__WiFiManagerColocatedCacheEventCallback"];
    }
    goto LABEL_78;
  }
  CFIndex v7 = Count;
  CFDictionaryRef v8 = *(const void **)(a4 + 2424);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a4 + 2424) = 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!Mutable)
  {
    *(void *)(a4 + 2424) = 0;
    *(unsigned char *)(a4 + 2432) = 0;
    return;
  }
  CFArrayRef v10 = Mutable;
  CFIndex v72 = v7;
  CFArrayRef v11 = (const __CFArray *)sub_1000830B8(a4);
  uint64_t v73 = a4;
  if (v11)
  {
    CFArrayRef v12 = v11;
    CFIndex v13 = CFArrayGetCount(v11);
    CFIndex v14 = CFArrayGetCount(theArray);
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"[NWTRANSIT]: %s: Colocated Network CFIndex Count = %ld ", @"__WiFiManagerCreateColocatedNetworkGroup", v14];
    }
    if (v14 < 1)
    {
LABEL_19:
      CFIndex v23 = CFArrayGetCount(v10);
      a4 = v73;
      if (v23 >= 1)
      {
        CFIndex v24 = v23;
        for (CFIndex i = 0; i != v24; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v10, i);
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Colocated Network %@ ", ValueAtIndex message];
          }
        }
      }
      goto LABEL_24;
    }
    CFIndex v16 = 0;
    while (1)
    {
      CFDictionaryRef v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v16);
      if (v17)
      {
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v17, @"SSID_STR");
        if (!Value)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3, @"%s: SSID is NULL!", @"__WiFiManagerCreateColocatedNetworkGroup"];
          }
          a4 = v73;
          break;
        }
        if (v13 >= 1)
        {
          CFStringRef v19 = Value;
          for (CFIndex j = 0; j != v13; ++j)
          {
            BOOL v21 = CFArrayGetValueAtIndex(v12, j);
            CFStringRef v22 = (const __CFString *)sub_10001E404((uint64_t)v21, @"SSID_STR");
            if (v22 && CFEqual(v22, v19)) {
              CFArrayAppendValue(v10, v21);
            }
          }
        }
      }
      if (++v16 == v14) {
        goto LABEL_19;
      }
    }
  }
LABEL_24:
  *(void *)(a4 + 2424) = v10;
  CFStringRef v28 = (const void **)sub_1000A2050((const __CFArray *)a4);
  BOOL v29 = v28;
  if (v28)
  {
    CFDictionaryRef v30 = (const __CFDictionary *)sub_10001E404((uint64_t)v28, @"PRIVATE_MAC_ADDRESS");
    if (v30)
    {
      CFDictionaryRef v31 = v30;
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(v31)) {
        CFDictionaryGetValue(v31, @"PRIVATE_MAC_ADDRESS_TYPE");
      }
    }
    BOOL v33 = sub_10001E404((uint64_t)v29, @"WiFiNetworkRouterMac");
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Router MAC Address: %@", v33 message];
    }
    CFNumberRef v35 = sub_10001E404((uint64_t)v29, @"WiFiNetworkRouterIP");
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Router IP Address: %@", v35 message];
    }
  }
  CFArrayRef v37 = (const __CFArray *)sub_1000830B8(a4);
  if (!v37) {
    goto LABEL_76;
  }
  CFArrayRef v38 = v37;
  CFIndex v39 = CFArrayGetCount(v37);
  CFIndex v40 = CFArrayGetCount(v10);
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, @"[NWTRANSIT]: %s: Run Colocated Networks against Private Filters. ColocatedNetwork CFIndex Count = %ld ", @"__WiFiManagerColocatedCachePrivacyFilters", v40];
  }
  if (!v40) {
    goto LABEL_76;
  }
  if (v40 >= 1)
  {
    CFIndex v42 = 0;
    while (1)
    {
      CFDataRef v43 = CFArrayGetValueAtIndex(v10, v42);
      if (v43)
      {
        if (v39 < 1) {
          goto LABEL_73;
        }
        CFIndex v44 = 0;
        while (1)
        {
          CFDictionaryRef v45 = (const __CFDictionary *)CFArrayGetValueAtIndex(v38, v44);
          if (sub_1000C8ED4((uint64_t)v43, (uint64_t)v45)) {
            break;
          }
          if (v39 == ++v44) {
            goto LABEL_73;
          }
        }
        if (!v45)
        {
LABEL_73:
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Network %@ is not present in Known Network list", v43 message];
          }
          goto LABEL_75;
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Network %@ is present in Known Network list", v43 message];
        }
        int v47 = sub_1000C7E9C((uint64_t)v45);
        unsigned int v48 = v47 | sub_1000C6FE8(v45);
        if (!v48)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Network %@ is Not Secure", v43 message];
          }
LABEL_75:
          a4 = v73;
LABEL_76:
          *(unsigned char *)(a4 + 2432) = 0;
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "[NWTRANSIT]: Colocated Group is not valid", v70);
          }
LABEL_78:
          return;
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Network %@ is Secure", v43 message];
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Network %@ has same Subnet", v43 message];
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Network %@ has same Auto-Join Policy", v43 message];
        }
        BOOL v52 = sub_1000AB3E0(v73, v29);
        if (v52) {
          uint64_t v53 = sub_10001E404((uint64_t)v52, @"PRIVATE_MAC_ADDRESS");
        }
        else {
          uint64_t v53 = 0;
        }
        BOOL v54 = sub_1000AB3E0(v73, (const void **)v45);
        if (!v53 || !v54)
        {
          CFDictionaryRef v66 = (const __CFDictionary *)sub_10001E404((uint64_t)v54, @"PRIVATE_MAC_ADDRESS");
          if (v66)
          {
            CFDictionaryRef v67 = v66;
            CFTypeID v68 = CFDictionaryGetTypeID();
            if (v68 == CFGetTypeID(v67)) {
              CFDictionaryGetValue(v67, @"PRIVATE_MAC_ADDRESS_TYPE");
            }
          }
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Network %@ has same Privacy Policy", v43 message];
          }
          goto LABEL_75;
        }
        CFDataRef v71 = v53;
        CFDictionaryRef v55 = (const __CFDictionary *)sub_10001E404((uint64_t)v54, @"PRIVATE_MAC_ADDRESS");
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Colocated Network Private Mac Dictionary %@", v55 message];
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Current Network Private Mac Dictionary %@", v71 message];
        }
        if (v55)
        {
          CFTypeID v58 = CFDictionaryGetTypeID();
          if (v58 == CFGetTypeID(v55))
          {
            if (CFDictionaryGetValue(v55, @"PRIVATE_MAC_ADDRESS_TYPE")) {
              sub_10001C6A4((uint64_t)v45, @"PRIVATE_MAC_ADDRESS", v71);
            }
          }
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Network %@ has same Privacy Policy", v43 message];
        }
        a4 = v73;
      }
      if (++v42 == v40) {
        goto LABEL_82;
      }
    }
  }
  CFDataRef v43 = 0;
LABEL_82:
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Network %@ meets Colocated Privacy Guidelines", v43 message];
  }
  *(unsigned char *)(a4 + 2432) = 1;
  if (sub_1000A2050((const __CFArray *)a4))
  {
    CFArrayRef v62 = *(const __CFArray **)(a4 + 2424);
    uint64_t v63 = a4;
  }
  else
  {
    if (v72) {
      return;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"[NWTRANSIT]: Invalidate Colocated Cache"];
    }
    unint64_t v65 = *(const void **)(a4 + 2424);
    if (v65)
    {
      CFRelease(v65);
      *(void *)(a4 + 2424) = 0;
    }
    *(unsigned char *)(a4 + 2432) = 0;
    *(void *)(a4 + 2440) = 0;
    uint64_t v63 = a4;
    CFArrayRef v62 = 0;
  }

  sub_1000B97FC(v63, v62);
}

void sub_1000B74DC(uint64_t a1, uint64_t a2)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  if (a2)
  {
    if (sub_10009E560(a2, Mutable)) {
      BOOL v5 = Mutable == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      if (!Mutable) {
        return;
      }
    }
    else
    {
      if (CFStringCompare(Mutable, @"XZ", 0)
        && CFStringCompare(Mutable, &stru_100248240, 0)
        && CFStringCompare(Mutable, @"X0", 0)
        && CFStringCompare(Mutable, @"X2", 0)
        && CFStringCompare(Mutable, @"X3", 0))
      {
        int v6 = sub_10010FDAC(a1, Mutable, 0);
        if (v6)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s WiFiCC : Successfully initilaized country to HW on boot : %@", "__WiFiManagerUpdateCountryOnInitCallback", Mutable message];
          }
        }
        else if (qword_10027DD68)
        {
          [(id)qword_10027DD68 WFLog:3, "%s WiFiCC : Unable to initialize country to HW on boot : %@", "__WiFiManagerUpdateCountryOnInitCallback", Mutable message];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, " WiFiCC : User Defaults does not have valid country code ", v9, v10);
        }
      }
    }
    goto LABEL_20;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager" : @"__WiFiManagerUpdateCountryOnInitCallback"];
  }
  if (Mutable)
  {
LABEL_20:
    CFRelease(Mutable);
  }
}

void sub_1000B76C0(int a1, int a2, CFDictionaryRef theDict, uint64_t a4)
{
  if (a4)
  {
    if (theDict)
    {
      CFStringRef Value = CFDictionaryGetValue(theDict, @"P2P_CC_COUNTRY");
      if (Value)
      {
        int v6 = Value;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Country from Peer : [%@]", v6 message];
        }
        CFDictionaryRef v8 = *(void **)(a4 + 192);
        if (v8)
        {
          [v8 updatePeerCountryCode:v6];
        }
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager", @"__WiFiManagerPeerCountryEventCallback"];
    }
  }
}

void sub_1000B77D0(uint64_t a1, int *a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  if (a6)
  {
    int v6 = *(void **)(a6 + 1792);
    if (v6)
    {
      if (a3 == 238)
      {
        CFDictionaryRef v8 = +[NSNumber numberWithInteger:*a2];
        uint64_t v9 = v6;
        uint64_t v10 = 238;
      }
      else
      {
        if (a3 != 239) {
          return;
        }
        CFDictionaryRef v8 = +[NSData dataWithBytes:a2 length:a5];
        uint64_t v9 = v6;
        uint64_t v10 = 239;
      }
      [v9 handleEvent:v10 withData:v8 interface:a4];
    }
  }
}

BOOL sub_1000B786C(uint64_t a1)
{
  BOOL result = sub_1001749EC(*(void *)(a1 + 32) + 1800, 0);
  *(unsigned char *)(*(void *)(a1 + 32) + 1808) = result;
  return result;
}

void sub_1000B78AC(uint64_t a1, const void *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s manager is NULL!" arguments:__WiFiManagerGeoTagNetworkIfApplicable];
    }
    goto LABEL_19;
  }
  if (a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: network: %@, isWiFiNetworkWaitingToBeGeoTagged %d", "__WiFiManagerGeoTagNetworkIfApplicable", sub_10001A43C(a2), *(unsigned __int8 *)(a1 + 1704) message];
    }
    *(unsigned char *)(a1 + 1704) = 0;
    if (!sub_1000199C0((uint64_t)a2) && !sub_10001E71C((uint64_t)a2))
    {
      if ([*(id *)(a1 + 1696) isAuthorized])
      {
        id v6 = [*(id *)(a1 + 1696) latestLocation];
        sub_1000B8168((const __CFArray *)a1, v6);
        +[WiFiLocationManager logLocation:v6 addPrefixString:sub_10001A43C(a2)];
        unsigned int v7 = +[WiFiLocationManager isLocationValid:v6 uptoSeconds:1 isHighAccuracy:60.0];
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: %@ - isValid %d", "__WiFiManagerGeoTagNetwork", sub_10001A43C(a2), v7 != 0 message];
        }
        if (v7)
        {
          ++*(void *)(a1 + 1720);
        }
        else
        {
          ++*(void *)(a1 + 1712);
          *(unsigned char *)(a1 + 1704) = 1;
          [*(id *)(a1 + 1696) requestHighAccuracyLocationUpdate];
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: LEECHED_LOC_STAT_HIGH_ACCURACY_GEOTAG: GOOD %ld, BAD %ld", "__WiFiManagerGeoTagNetwork", *(void *)(a1 + 1720), *(void *)(a1 + 1712)];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: not authorized to use location" :v10 :v11];
        }
      }
LABEL_19:
    }
  }
}

void sub_1000B7B1C(uint64_t a1, uint64_t a2, int a3)
{
  int valuePtr = 0;
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    unsigned int v7 = Mutable;
    CFDictionaryRef v8 = (const void **)&kCFBooleanTrue;
    if (!a3) {
      CFDictionaryRef v8 = (const void **)&kCFBooleanFalse;
    }
    CFDictionarySetValue(Mutable, @"BT_SCAN_INTERVAL_RELAX_ENABLE", *v8);
    CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
    if (v9)
    {
      CFNumberRef v10 = v9;
      CFDictionarySetValue(v7, @"BT_SCAN_INTERVAL_RELAX_REASON", v9);
      CFRelease(v10);
      context[0] = a1;
      context[1] = a2;
      void context[2] = v7;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_1000B828C, context);
      CFRelease(v7);
    }
    else
    {
      CFRelease(v7);
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: Could not allocate reasonRef", @"__WiFiManagerDispatchClientBTScanIntervalRelaxEvent"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Could not allocate BTScanIntervalRelax" : @"__WiFiManagerDispatchClientBTScanIntervalRelaxEvent"];
    }
  }
}

void sub_1000B7CB0(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 1544) != a2)
  {
    uint64_t v4 = &kCFBooleanTrue;
    if (!a2) {
      uint64_t v4 = &kCFBooleanFalse;
    }
    keys[0] = @"appPolicyUUID";
    keys[1] = @"appPolicyState";
    CFBooleanRef v5 = *v4;
    values[0] = @"CARPLAY_UUID";
    values[1] = v5;
    CFDictionaryRef v6 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (v6)
    {
      CFDictionaryRef v7 = v6;
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000041;
      void context[2] = v6;
      void context[3] = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
      CFRelease(v7);
    }
    *(unsigned char *)(a1 + 1544) = a2 != 0;
  }
}

void sub_1000B7DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_1000CD6C4(a3)) {
    sub_1000B7B1C(a1, a2, 0);
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: Lost link to Carplay network. Reset Carplay mode.", @"__WiFiManagerResetCarPlayMode"];
  }
  sub_1000A1C68(a1, 0, 0);

  sub_1000B7CB0(a1, 0);
}

void sub_1000B7E88(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is null" : @"__WiFiManagerStopMonitoringSessionBasedApplication"];
    }
    uint64_t v18 = v17;
    goto LABEL_38;
  }
  uint64_t v3 = *(void *)(a1 + 1656);
  if (!v3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: session based network is null" : @"__WiFiManagerStopMonitoringSessionBasedApplication"];
    }
    uint64_t v18 = v4;
LABEL_38:
    goto LABEL_29;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: stop monitoring application state for %@", "__WiFiManagerStopMonitoringSessionBasedApplication", *(void *)(a1 + 1664) message];
  }
  CFBooleanRef v5 = *(void **)(a1 + 1944);
  if (v5) {
    [v5 invalidate];
  }
  if (*(void *)(a1 + 1616))
  {
    CFDictionaryRef v6 = *(const void **)(a1 + 1656);
    CFDictionaryRef v7 = (void *)sub_10001A43C(v6);
    id v8 = [v7 stringByAppendingString:sub_1000CE384((uint64_t)v6)];
    if ([*(id *)(a1 + 1616) objectForKey:v8])
    {
      id v10 = [*(id *)(a1 + 1616) mutableCopy];
      [v10 removeObjectForKey:v8];
      sub_100083E60((void *)a1, @"SessionBasedNetworkList", v10, 0);
      sub_1000A55A0(a1, v10);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: sessionBasedNetworkList not found", @"__WiFiManagerRemoveSessionBasedNetwork"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: sessionBasedNetworkList is NULL", @"__WiFiManagerRemoveSessionBasedNetwork"];
    }
  }
  int v12 = sub_100099A2C(a1, *(const void **)(a1 + 1656), 0);
  if (v12)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: %@ is existing network, leaving password", "__WiFiManagerStopMonitoringSessionBasedApplication", sub_10001A43C(*(const void **)(a1 + 1656)) message];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: removing password for %@", "__WiFiManagerStopMonitoringSessionBasedApplication", sub_10001A43C(*(const void **)(a1 + 1656)) message];
    }
    sub_1000C94E0(*(const void **)(a1 + 1656));
  }
  CFIndex v14 = *(const void **)(a1 + 1944);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 1944) = 0;
  }
  int v15 = *(const void **)(a1 + 1656);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 1656) = 0;
  }
  CFIndex v16 = *(const void **)(a1 + 1664);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 1664) = 0;
  }
  [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") setCachedCurrentSessionBasedNetworkRef:0];
LABEL_29:
}

void sub_1000B8168(const __CFArray *a1, void *a2)
{
  CFBooleanRef v5 = sub_1000A2050(a1);
  if (+[WiFiLocationManager isLocationValid:a2 uptoSeconds:1 isHighAccuracy:60.0])*((unsigned char *)a1 + 1704) = 0; {
  int v6 = _os_feature_enabled_impl();
  }
  if (a2 && v6 && v5)
  {
    [a2 coordinate];
    CLLocationDegrees v8 = v7;
    [a2 coordinate];
    CLLocationDegrees v10 = v9;
    [a2 horizontalAccuracy];
    double v12 = v11;
    id v13 = [a2 timestamp];
    sub_1000A32E4((int)v13, v5, v8, v10, v12, v13);
    sub_10009B1AC((uint64_t)a1, v5, 1u);
    sub_100053AE8(v5, a2);
  }
  else
  {
    sub_100053AE8(v5, a2);
    if (!v5) {
      goto LABEL_9;
    }
  }
  CFRelease(v5);
LABEL_9:
}

void sub_1000B828C(uint64_t a1, void *a2)
{
  if (a2 && *a2 && a2[1])
  {
    CFDictionaryRef v2 = (const __CFDictionary *)a2[2];
    uint64_t v3 = a2[1];
    sub_10005CEF4(a1, v3, v2);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Invalid arguments" : @"__WiFiManagerDispatchBTScanIntervalRelaxEvent"];
    }
  }
}

void sub_1000B8334(uint64_t a1, uint64_t a2)
{
  if (a2 && *(void *)(a2 + 8))
  {
    if (*(void *)a2) {
      sub_10005CD8C(a1, *(void *)(a2 + 8), *(const __CFDictionary **)(a2 + 16));
    }
  }
}

void sub_1000B8358(uint64_t a1)
{
  WiFiCloudSyncEngineCheckKeychainSyncState();
  CFDictionaryRef v2 = *(const void **)(*(void *)(a1 + 32) + 1304);

  CFRelease(v2);
}

void sub_1000B839C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)a2) {
      sub_10005CD98(a1, *(void *)a2, *(const __CFDictionary **)(a2 + 8));
    }
  }
}

void sub_1000B83B8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)a2) {
      sub_10005CDA4(a1, *(void *)a2, *(const __CFDictionary **)(a2 + 8));
    }
  }
}

void sub_1000B83D4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)a2) {
      sub_10005CDB0(a1, *(void *)a2, *(const __CFDictionary **)(a2 + 8));
    }
  }
}

void sub_1000B83F0(id a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Requesting PersonalHotspotControl extension to reload"];
  }
  CFDictionaryRef v2 = +[CHSControlService sharedInstance];

  [(CHSControlService *)v2 reloadControlsForExtension:@"com.apple.WiFiKit.PersonalHotspotControl" kind:@"PersonalHotspotControl" reason:@"wifi manager set MIS state request PH widget to reload"];
}

void sub_1000B8470(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)a2) {
      sub_10005CE3C(a1, *(void *)a2, *(const __CFDictionary **)(a2 + 8));
    }
  }
}

void sub_1000B848C(uint64_t a1, const void *a2, uint64_t a3)
{
  if (!a2) {
    return;
  }
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 208);
  if (!v4) {
    return;
  }
  double v7 = sub_10001A43C(a2);
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v4, v7);
  SCPreferencesSynchronize(*(SCPreferencesRef *)(a1 + 1064));
  CFArrayRef v9 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(a1 + 1064));
  if (!v9) {
    return;
  }
  CFArrayRef v10 = v9;
  uint64_t v23 = a3;
  CFIndex Count = CFArrayGetCount(v9);
  if (Count < 1) {
    goto LABEL_21;
  }
  CFIndex v12 = Count;
  CFIndex v13 = 0;
  while (1)
  {
    ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v10, v13);
    if (!ValueAtIndex) {
      goto LABEL_15;
    }
    int v15 = ValueAtIndex;
    CFStringRef Name = SCNetworkSetGetName(ValueAtIndex);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: set for network %@: %@", "__WiFiManagerApplyNetworkSettings", sub_10001A43C(a2), Name message];
    }
    if (!Value) {
      break;
    }
    if (SCNetworkSetGetSetID(v15))
    {
      CFStringRef SetID = SCNetworkSetGetSetID(v15);
      CFStringRef v19 = Value;
      goto LABEL_14;
    }
LABEL_15:
    if (v12 == ++v13) {
      goto LABEL_21;
    }
  }
  if (!Name) {
    goto LABEL_15;
  }
  CFStringRef SetID = Name;
  CFStringRef v19 = @"Automatic";
LABEL_14:
  if (!CFEqual(SetID, v19)) {
    goto LABEL_15;
  }
  sub_10005A1E0(*(const __SCPreferences **)(a1 + 1064));
  uint64_t v20 = (void *)sub_10000D990((uint64_t)"__WiFiManagerApplyNetworkSettings");
  int v21 = SCNetworkSetSetCurrent(v15);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: set %@ is now active for interface %@", "__WiFiManagerApplyNetworkSettings", Name, v23 message];
  }
  sub_10005A29C(*(SCPreferencesRef *)(a1 + 1064), v21);

LABEL_21:

  CFRelease(v10);
}

uint64_t sub_1000B8688(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager", @"__WiFiManagerCheckProfileNetworksForMDMOrSupervised"];
    }
    goto LABEL_32;
  }
  if (([*(id *)(a1 + 1480) isMCInitialized] & 1) == 0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: ManagedConfiguration not initialized", @"__WiFiManagerCheckProfileNetworksForMDMOrSupervised"];
    }
LABEL_32:
    return 0;
  }
  CFArrayRef v2 = (const __CFArray *)sub_100083F8C(a1);
  uint64_t v3 = (uint64_t)v2;
  if (!v2) {
    return v3;
  }
  CFIndex Count = CFArrayGetCount(v2);
  if (!Count) {
    return 0;
  }
  CFIndex v5 = Count;
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != v5; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v3, i);
      CFBooleanRef v8 = (CFBooleanRef)sub_10001E404((uint64_t)ValueAtIndex, @"isProfileBasedNetwork");
      if (v8) {
        BOOL v9 = v8 == kCFBooleanTrue;
      }
      else {
        BOOL v9 = 0;
      }
      if (v9)
      {
        CFArrayRef v10 = *(void **)(a1 + 1480);
        unsigned int v11 = [v10 isWiFiNetworkMDMNetwork:ValueAtIndex];
        if (v11)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Network <%@> is subject to MDM.", "__WiFiManagerCheckProfileNetworksForMDMOrSupervised", sub_10001A43C(ValueAtIndex) message];
          }
          CFBooleanRef v13 = kCFBooleanTrue;
        }
        else
        {
          CFBooleanRef v13 = 0;
        }
        sub_10001C6A4((uint64_t)ValueAtIndex, @"PrivateMacManagedNetwork", v13);
        if ([v10 isSupervisedDevice])
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Device is subject to supervision. Store key for profile <%@>", "__WiFiManagerCheckProfileNetworksForMDMOrSupervised", sub_10001A43C(ValueAtIndex) message];
          }
          sub_10001C6A4((uint64_t)ValueAtIndex, @"PrivateMacSupervisedDevice", kCFBooleanTrue);
          CFBooleanRef v15 = kCFBooleanTrue;
        }
        else
        {
          sub_10001C6A4((uint64_t)ValueAtIndex, @"PrivateMacSupervisedDevice", 0);
          if (v11) {
            CFBooleanRef v15 = kCFBooleanTrue;
          }
          else {
            CFBooleanRef v15 = 0;
          }
        }
        sub_10001C6A4((uint64_t)ValueAtIndex, @"PrivateMacControlledDevice", v15);
      }
    }
  }
  sub_1000A69BC(a1, (const __CFArray *)v3);
  uint64_t v3 = 1;
  sub_1000A6B7C(a1, 1, 0);
  return v3;
}

void sub_1000B8948(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 40) + 1856) = [*(id *)(*(void *)(a1 + 40) + 1776) WiFiDriverTriggeredTTRHandler:*(void *)(a1 + 32)];
  CFArrayRef v2 = *(void **)(a1 + 32);
}

void sub_1000B8990(uint64_t a1, uint64_t a2)
{
}

void sub_1000B899C(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 2345);
  if (*(unsigned char *)(a1 + 2345)) {
    uint64_t v3 = ((*(double *)(a1 + 2328) - *(double *)(a1 + 2320)) * 1000.0);
  }
  else {
    uint64_t v3 = 0xFFFFFFFFLL;
  }
  int v4 = *(unsigned __int8 *)(a1 + 2344);
  int v5 = *(unsigned __int8 *)(a1 + 2346);
  uint64_t v6 = *(unsigned int *)(a1 + 2336);
  uint64_t v7 = *(unsigned int *)(a1 + 2340);
  if (qword_10027DD68)
  {
    if (v5) {
      BOOL v9 = "yes";
    }
    else {
      BOOL v9 = "no";
    }
    if (v2) {
      CFArrayRef v10 = "yes";
    }
    else {
      CFArrayRef v10 = "no";
    }
    if (v4) {
      unsigned int v11 = "yes";
    }
    else {
      unsigned int v11 = "no";
    }
    [(id)qword_10027DD68 WFLog:3, "%s: duration %u ms, session up ? %s, debounce succeeded ? %s, debounce timed out ? %s, reason %@(%d), subReason %d", "__WiFiManagerSubmitCarPlayLinkDownSuppressionMetrics", v3, v9, v10, v11, sub_10005AB40(v6), v6, v7 message];
  }
  char v18 = -86;
  v12[1] = -1431655766;
  v12[0] = v3;
  CFStringRef v13 = sub_10005AB40(v6);
  int v14 = v7;
  char v15 = v4;
  char v16 = v2;
  char v17 = v5;
  CFStringRef v19 = @"Unknown";
  *(void *)&long long v20 = @"Unknown";
  *((void *)&v20 + 1) = @"Unknown";
  if (*(void *)(a1 + 2368))
  {
    CFStringRef v19 = *(const __CFString **)(a1 + 2368);
    long long v20 = *(_OWORD *)(a1 + 2376);
  }
  sub_10005860C(v12);
}

void sub_1000B8B04(uint64_t a1, void *a2)
{
  int v4 = sub_1000DAD20(a1);
  if (v4 != 5)
  {
    if (v4) {
      return;
    }
    int v5 = sub_1000DAD30(a1);
    if (v5 & 0xFFFFFFFE) == 2 && (byte_10027D6F0)
    {
      uint64_t v6 = &dword_10027D6D4;
    }
    else
    {
      if (v5 != 1)
      {
LABEL_11:
        byte_10027D6F0 = 0;
        int v8 = sub_1000DAD30(a1);
        if (v8 == 2)
        {
          a2[110] = 1;
        }
        else if (v8 == 1)
        {
          uint64_t v9 = sub_1000C2DE8(a1);
          if (v9)
          {
            CFArrayRef v10 = (void *)v9;
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            CFDateRef v12 = CFDateCreate(kCFAllocatorDefault, Current);
            if (v12)
            {
              CFDateRef v13 = v12;
              sub_1000C995C(v10, 1, v12);
              CFRelease(v13);
            }
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "Attempting addition of %@.", sub_10001A43C(v10) message];
            }
            sub_100093634((uint64_t)a2, v10, 6);
          }
          else
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3 message:"Received Ask to join response accepted but network object is NULL"];
            }
          }
        }
        char v16 = (const void *)a2[23];
        if (v16)
        {
          CFRelease(v16);
          a2[23] = 0;
        }
        return;
      }
      uint64_t v6 = &dword_10027D6D8;
    }
    ++*v6;
    goto LABEL_11;
  }
  if (sub_1000DAD30(a1) == 2)
  {
    uint64_t v7 = a2[4];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000B8CFC;
    block[3] = &unk_10023EAF8;
    block[4] = a2;
    dispatch_async(v7, block);
  }
}

void sub_1000B8CFC(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v3 = CFDateCreate(kCFAllocatorDefault, Current);
  int v4 = sub_10005AA28((uint64_t)v3, 5, 0, 0);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: user chose to mute join recommendation", "__WiFiManagerNotificationResponseFilterJoinRecommendation_block_invoke");
  }
  sub_10008DF64(*(void *)(a1 + 32), *(_DWORD *)(*(void *)(a1 + 32) + 2072), v4, 0);
  if (v4) {
    CFRelease(v4);
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t sub_1000B8DE4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10005B9E8(a1, *(void *)(a2 + 8));
  if (!result) {
    *(_DWORD *)a2 = 0;
  }
  return result;
}

void sub_1000B8E14(CFTypeRef cf, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  if (!*(void *)(a2 + 24)
    || (int v5 = sub_10005B6E8((uint64_t)cf),
        LODWORD(valuePtr[0]) = -1431655766,
        CFNumberGetValue(*(CFNumberRef *)(a2 + 24), kCFNumberIntType, valuePtr),
        LODWORD(valuePtr[0]) != v5))
  {
    if (*(void *)(v4 + 32))
    {
      valuePtr[0] = 0;
      valuePtr[1] = valuePtr;
      valuePtr[2] = 0x2020000000;
      CFTypeRef v16 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      CFTypeRef v16 = CFRetain(cf);
      v13[0] = 0;
      v13[1] = v13;
      v13[2] = 0x2020000000;
      CFTypeRef v14 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      CFTypeRef v14 = CFRetain(*(CFTypeRef *)(a2 + 32));
      v11[0] = 0;
      v11[1] = v11;
      v11[2] = 0x2020000000;
      CFTypeRef v12 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      CFTypeRef v12 = CFRetain(*(CFTypeRef *)(a2 + 8));
      v9[0] = 0;
      v9[1] = v9;
      v9[2] = 0x2020000000;
      CFTypeRef v10 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      CFTypeRef v10 = CFRetain(*(CFTypeRef *)(a2 + 16));
      uint64_t v6 = *(NSObject **)(v4 + 32);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000B9040;
      block[3] = &unk_100240AA8;
      block[4] = valuePtr;
      void block[5] = v13;
      void block[6] = v11;
      void block[7] = v9;
      dispatch_async(v6, block);
      _Block_object_dispose(v9, 8);
      _Block_object_dispose(v11, 8);
      _Block_object_dispose(v13, 8);
      _Block_object_dispose(valuePtr, 8);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: queue not yet setup. Invoking callback directly.", "__WiFiManagerDispatchScanCacheUpdateEvent"];
      }
      sub_10005CDC8((uint64_t)cf, *(void *)(a2 + 32), *(const __CFDictionary **)(a2 + 8), *(const __CFDictionary **)(a2 + 16));
    }
  }
}

void sub_1000B9000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Block_object_dispose((const void *)(v15 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000B9040(void *a1)
{
  sub_10005CDC8(*(void *)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), *(const __CFDictionary **)(*(void *)(a1[6] + 8) + 24), *(const __CFDictionary **)(*(void *)(a1[7] + 8) + 24));
  int v2 = *(const void **)(*(void *)(a1[4] + 8) + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(*(void *)(a1[4] + 8) + 24) = 0;
  }
  CFDateRef v3 = *(const void **)(*(void *)(a1[5] + 8) + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(*(void *)(a1[5] + 8) + 24) = 0;
  }
  uint64_t v4 = *(const void **)(*(void *)(a1[6] + 8) + 24);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(*(void *)(a1[6] + 8) + 24) = 0;
  }
  int v5 = *(const void **)(*(void *)(a1[7] + 8) + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(*(void *)(a1[7] + 8) + 24) = 0;
  }
}

void sub_1000B9110(uint64_t a1, unsigned __int8 *a2)
{
}

void sub_1000B9120(uint64_t a1, uint64_t a2)
{
  if (a2 && *(void *)a2)
  {
    if (*(void *)(a2 + 8)) {
      sub_10005CED0(a1, *(void *)(a2 + 8), *(const __CFDictionary **)(a2 + 16));
    }
  }
}

void sub_1000B9144(uint64_t a1, uint64_t a2)
{
  if (a2 && *(void *)a2)
  {
    if (*(void *)(a2 + 8)) {
      sub_10005CEDC(a1, *(void *)(a2 + 8), *(const __CFDictionary **)(a2 + 16));
    }
  }
}

void sub_1000B9168(uint64_t a1, uint64_t a2)
{
  if (a2 && *(void *)a2)
  {
    if (*(void *)(a2 + 8)) {
      sub_10005CEE8(a1, *(void *)(a2 + 8), *(const __CFDictionary **)(a2 + 16));
    }
  }
}

void sub_1000B918C(uint64_t a1, uint64_t a2)
{
  if (a2 && *(void *)a2 && *(void *)(a2 + 8))
  {
    int v2 = *(_DWORD *)(a2 + 16);
    uint64_t v3 = *(void *)(a2 + 8);
    sub_10005CFD8(a1, v3, v2);
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:4 message:@"%s: Invalid arguments" : @"__WiFiManagerDispatchCarPlayNetworkTypeChangeEvent"];
    }
  }
}

void sub_1000B9234(uint64_t a1, uint64_t a2)
{
  if (a2 && *(void *)a2 && *(void *)(a2 + 8))
  {
    int v2 = *(_DWORD *)(a2 + 16);
    uint64_t v3 = *(void *)(a2 + 8);
    sub_10005CF24(a1, v3, v2);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Invalid arguments", "__WiFiManagerDispatchM1M4Handshake24GHzCountEvent");
    }
  }
}

void sub_1000B92DC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)a2) {
      sub_10005D08C(a1, *(void *)a2, *(const __CFDictionary **)(a2 + 8));
    }
  }
}

void sub_1000B92F8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)a2) {
      sub_10005D538(a1, *(void *)a2, *(const __CFDictionary **)(a2 + 8));
    }
  }
}

id sub_1000B9314(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 40) + 1760) incrementCount];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(*(void *)(a1 + 40) + 1760);

  return [v3 updateHUDWithMessage:v2];
}

void sub_1000B9358(uint64_t a1, uint64_t a2)
{
}

void sub_1000B9364(uint64_t a1, uint64_t a2)
{
}

void sub_1000B9370(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    CFDictionaryRef v4 = *(const __CFDictionary **)(a2 + 16);
    if (v4)
    {
      CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 16), @"WiFiHostApStateIdentifier");
      if (!Value || !CFEqual(Value, kCFBooleanTrue))
      {
        uint64_t v6 = CFDictionaryGetValue(v4, @"LINK_CHANGED_IS_LINKDOWN");
        if (v6)
        {
          if (CFEqual(v6, kCFBooleanTrue))
          {
            CFArrayRef v7 = (const __CFArray *)sub_10005B8E0(a1);
            if (v7)
            {
              CFArrayRef v8 = v7;
              if (CFArrayGetCount(v7) >= 1)
              {
                CFIndex v9 = 0;
                while (1)
                {
                  ValueAtIndex = CFArrayGetValueAtIndex(v8, v9);
                  if (ValueAtIndex)
                  {
                    if (sub_1000C6FC0((uint64_t)ValueAtIndex, @"networkRole") == (const __CFNumber *)4) {
                      break;
                    }
                  }
                  if (++v9 >= CFArrayGetCount(v8)) {
                    goto LABEL_17;
                  }
                }
                MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v8);
                if (MutableCopy)
                {
                  CFArrayRef v12 = MutableCopy;
                  CFArrayRemoveValueAtIndex(MutableCopy, v9);
                  sub_10005B968(a1, v12);
                  CFRelease(v12);
                }
                else
                {
                  sub_10005B968(a1, 0);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_17:
  uint64_t v13 = *(void *)a2;
  CFTypeRef v14 = *(void **)(a2 + 8);
  uint64_t v15 = *(const void **)(a2 + 16);

  sub_10005CBDC(a1, v13, v14, v15);
}

void sub_1000B94C8(uint64_t a1)
{
}

void sub_1000B94D4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)a2) {
      sub_10005D098(a1, *(void *)a2, *(const __CFDictionary **)(a2 + 8));
    }
  }
}

void sub_1000B94F0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)a2) {
      sub_10005D260(a1, *(void *)a2, *(const __CFDictionary **)(a2 + 8));
    }
  }
}

void sub_1000B950C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)a2) {
      sub_10005D26C(a1, *(void *)a2, *(const __CFDictionary **)(a2 + 8));
    }
  }
}

void sub_1000B9528(uint64_t a1, uint64_t a2)
{
}

void sub_1000B9538(uint64_t a1, const void **a2)
{
}

void sub_1000B9540(uint64_t a1)
{
  uint64_t v2 = sub_10001A43C(*(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  sub_10009BE94(*(void **)(a1 + 40), v2, 0, 0, *(unsigned int *)(a1 + 48));
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, (const void *)(a1 + 48));
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, (const void *)(a1 + 52));
  keys[0] = @"ssid";
  keys[1] = @"type";
  keys[2] = @"notificationType";
  keys[3] = @"response";
  keys[4] = @"trigger";
  values[0] = (void *)v2;
  values[1] = @"notification";
  values[2] = v3;
  values[3] = v4;
  values[4] = @"dismissal";
  CFDictionaryRef v5 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 5, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryRef v7 = v5;
  CFSetApplyFunction(*(CFSetRef *)(*(void *)(a1 + 40) + 136), (CFSetApplierFunction)sub_1000B9538, &v7);
  if (v5) {
    CFRelease(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v6 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_1000B9704(uint64_t a1, void *a2)
{
  if (a2 && *a2 && a2[1])
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: p2pThreadCoexEvent client :%p", @"__WiFiManagerDispatchP2pThreadCoexEvent", a1];
    }
    uint64_t v5 = a2[1];
    CFDictionaryRef v6 = (const __CFDictionary *)a2[2];
    sub_10005D604(a1, v5, v6);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Invalid arguments" args:("__WiFiManagerDispatchP2pThreadCoexEvent")];
    }
  }
}

void sub_1000B97FC(uint64_t a1, const __CFArray *a2)
{
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v5 = +[NSNumber numberWithInteger:*(unsigned __int8 *)(a1 + 2432)];
  CFDictionaryRef v6 = +[NSNumber numberWithInteger:*(void *)(a1 + 2440)];
  if (a2)
  {
    CFDictionaryRef v7 = v6;
    CFIndex Count = CFArrayGetCount(a2);
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"[NWTRANSIT]: %s: Colocated Network CFIndex Count = %ld ", @"__WiFiManagerSetColocatedNetworks", Count];
    }
    if (Count)
    {
      [v4 setObject:a2 forKey:@"COLOCATED_NETWORK_GROUP"];
      [v4 setObject:v5 forKey:@"COLOCATED_NETWORK_GROUP_STATUS"];
      [v4 setObject:v7 forKey:@"COLOCATED_NETWORK_GROUP_SCOPE_ID"];
    }
  }
  context[0] = a1;
  context[1] = 0xAAAAAAAA00000085;
  void context[2] = v4;
  void context[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
}

id sub_1000B993C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [a2 isMemberOfClass:objc_opt_class()];
  if (a2 && result)
  {
    id result = [objc_msgSend(a2, "name") isEqualToString:*(void *)(a1 + 40)];
    if (result)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
      *a4 = 1;
    }
  }
  return result;
}

void sub_1000B99B8(uint64_t a1, io_registry_entry_t entry, uint64_t a3)
{
  uint64_t entryID = 0;
  int v6 = *(_DWORD *)(a1 + 2460);
  uint64_t RegistryEntryID = IORegistryEntryGetRegistryEntryID(entry, &entryID);
  if (RegistryEntryID)
  {
    uint64_t v29 = RegistryEntryID;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, @"Usb Host Notification IORegistryEntryGetRegistryEntryID failed: %08x", v29];
    }
  }
  else
  {
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(entry, @"TransportDescription", kCFAllocatorDefault, 0);
    CFTypeRef v9 = (id)CFMakeCollectable(CFProperty);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Usb Host Notification Transport message arrived! (messageType: 0x%08x, transportDescription: %@, registryEntryID: %llu)", a3, v9, entryID message];
    }
    CFTypeRef v11 = IORegistryEntryCreateCFProperty(entry, @"TransportType", kCFAllocatorDefault, 0);
    unsigned int v12 = [(id)(id)CFMakeCollectable(v11) intValue];
    if (a3 == -536870896)
    {
      unsigned int v13 = v12;
      CFTypeRef v14 = IORegistryEntryCreateCFProperty(entry, @"DataRole", kCFAllocatorDefault, 0);
      unsigned int v15 = [(id)(id)CFMakeCollectable(v14) intValue];
      CFTypeRef v16 = IORegistryEntryCreateCFProperty(entry, @"Vendor ID", kCFAllocatorDefault, 0);
      char v17 = (id)CFMakeCollectable(v16);
      if (v15 <= 1)
      {
        char v18 = v17;
        --*(_DWORD *)(a1 + 2460);
        BOOL v19 = [v17 intValue] == 1452 || [v18 intValue] == 1452;
        *(unsigned char *)(a1 + 2464) = v19;
        if ([*(id *)(a1 + 2488) count])
        {
          uint64_t v32 = 0;
          BOOL v33 = &v32;
          uint64_t v34 = 0x2020000000;
          uint64_t v35 = -1;
          long long v20 = *(void **)(a1 + 2488);
          v31[0] = _NSConcreteStackBlock;
          v31[1] = 3221225472;
          v31[2] = sub_1000B9E3C;
          v31[3] = &unk_100240B20;
          v31[4] = v9;
          v31[5] = &v32;
          [v20 enumerateObjectsUsingBlock:v31];
          unint64_t v21 = v33[3];
          id v22 = [*(id *)(a1 + 2488) count];
          if (v21 >= (unint64_t)v22)
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4, "%s - Usb Removal Usb Host Notification for %@ -- unable to find in %@\n", "__WiFiManagerhandleNotificationForService", v9, *(void *)(a1 + 2488) message];
            }
          }
          else
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4, "%s - Usb Removal Usb Host Notification for %@ -- Removing device at index %lu from %@\n", "__WiFiManagerhandleNotificationForService", v9, v33[3], *(void *)(a1 + 2488) message];
            }
            [*(id *)(a1 + 2488) removeObjectAtIndex:v33[3]];
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4, "%s - Usb Removal Usb Host Notification for %@ seqNum %d managerTotal %d setTotal:%ld\n", "__WiFiManagerhandleNotificationForService", v9, *(unsigned int *)(a1 + 2452), *(unsigned int *)(a1 + 2460), [*(id *)(a1 + 2488) count] message];
            }
          }
          _Block_object_dispose(&v32, 8);
        }
        else
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s - Usb Removal Usb Host Notification for %@ seqNum %d Total %d\n", "__WiFiManagerhandleNotificationForService", v9, *(unsigned int *)(a1 + 2452), *(unsigned int *)(a1 + 2460) message];
          }
        }
        if (v6 > *(_DWORD *)(a1 + 2460))
        {
          *(_DWORD *)(a1 + 2456) = 0;
          *(CFAbsoluteTime *)(a1 + 2480) = CFAbsoluteTimeGetCurrent();
          if (v13 == 2)
          {
            ++*(_DWORD *)(a1 + 2460);
          }
          else if (v13 == 3)
          {
            sub_100088CD0(a1);
          }
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "Usb Host Notification metrics usbDevices removal count %lu %@ \n", [*(id *)(a1 + 2488) count], *(void *)(a1 + 2488) message];
          }
          [+[WiFiUsageMonitor sharedInstance] setUsbStatus:0 currentDevices:*(void *)(a1 + 2488) currentNoiseDelta:-1];
        }
      }
      id v26 = [[*(id *)(a1 + 2496) objectForKeyedSubscript:+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", entryID)];
      if (v26)
      {
        id v27 = v26;
        [*(id *)(a1 + 2496) removeObjectForKey:[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", entryID)];
        io_object_t v28 = [v27 unsignedIntValue];
        if (v28) {
          IOObjectRelease(v28);
        }
      }
    }
  }
}

void sub_1000B9E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000B9E3C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [a2 isMemberOfClass:objc_opt_class()];
  if (a2 && result)
  {
    id result = [objc_msgSend(a2, "name") isEqualToString:*(void *)(a1 + 32)];
    if (result)
    {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
      *a4 = 1;
    }
  }
  return result;
}

void sub_1000B9EB8(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 32))
  {
    CFTypeRef v9 = 0;
    CFTypeRef v10 = 0;
    uint64_t v7 = 0;
    CFTypeRef v8 = 0;
    uint64_t v6 = kCTRegistrationStatusUnknown;
    [+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection];
    _CTServerConnectionCopyDataStatus();
    [+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection];
    _CTServerConnectionGetRegistrationStatus();
    [+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection];
    _CTServerConnectionCopyProviderNameUsingCarrierBundle();
    [+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection];
    _CTServerConnectionGetRadioAccessTechnology();
    uint64_t v2 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v2 + 128))
    {
      [+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection];
      _CTServerConnectionCopyPacketContextInterfaceNameByServiceType();
      uint64_t v2 = *(void *)(a1 + 32);
      CFTypeRef v3 = v8;
    }
    else
    {
      CFTypeRef v3 = 0;
    }
    id v4 = *(NSObject **)(v2 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000BA030;
    block[3] = &unk_100240B80;
    block[4] = v3;
    void block[5] = v2;
    void block[6] = v7;
    void block[7] = v10;
    void block[8] = v6;
    block[9] = v9;
    dispatch_sync(v4, block);
    if (v10)
    {
      CFRelease(v10);
      CFTypeRef v10 = 0;
    }
    if (v9)
    {
      CFRelease(v9);
      CFTypeRef v9 = 0;
    }
    if (v8) {
      CFRelease(v8);
    }
  }
}

void sub_1000BA030(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    if (*(void *)(*(void *)(a1 + 40) + 1240))
    {
      CFRelease(*(CFTypeRef *)(*(void *)(a1 + 40) + 1240));
      *(void *)(*(void *)(a1 + 40) + 1240) = 0;
      uint64_t v2 = *(const void **)(a1 + 32);
    }
    *(void *)(*(void *)(a1 + 40) + 1240) = CFRetain(v2);
    if (*(void *)(*(void *)(a1 + 40) + 1240)) {
      [+[WiFiUserInteractionMonitor sharedInstance] setCellularInterfaceName:*(void *)(*(void *)(a1 + 40) + 1240)];
    }
  }
  if (CFEqual(*(CFStringRef *)(a1 + 48), kCTRegistrationRadioAccessTechnologyNR))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (*(unsigned char *)(v3 + 1280) != 1)
    {
      *(unsigned char *)(v3 + 1280) = 1;
      uint64_t context = v3;
      unint64_t v39 = 0xAAAAAAAA00000076;
      CFIndex v40 = 0;
      uint64_t v41 = 1;
      CFSetApplyFunction(*(CFSetRef *)(v3 + 104), (CFSetApplierFunction)sub_100020954, &context);
    }
  }
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 56);
  if (v4)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v4, kCTRegistrationDataIndicator);
    if (Value)
    {
      uint64_t v6 = *(const void **)(*(void *)(a1 + 40) + 1288);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(*(void *)(a1 + 40) + 1288) = 0;
      }
      *(void *)(*(void *)(a1 + 40) + 1288) = CFStringCreateCopy(kCFAllocatorDefault, Value);
    }
    if (CFStringCompare(Value, kCTRegistrationDataIndicatorNone, 0)
      && CFStringCompare(Value, kCTRegistrationDataIndicator2G, 0)
      && CFStringCompare(Value, kCTRegistrationDataIndicator2_5G, 0))
    {
      int v7 = 0;
      CFTypeRef v8 = "High bw cellular data available, so WiFi would disconnect under low signal quality";
      int v9 = 1;
    }
    else
    {
      int v9 = 0;
      int v7 = 1;
      CFTypeRef v8 = "Low bw cellular data available, so WiFi would stay connected under low signal quality";
    }
    if (CFEqual(Value, kCTRegistrationDataIndicator3G)
      || CFEqual(Value, kCTRegistrationDataIndicator3_5G)
      || CFEqual(Value, kCTRegistrationDataIndicator3_75G))
    {
      int v9 = 0;
    }
    BOOL v10 = CFEqual(Value, kCTRegistrationDataIndicator5G)
       || CFEqual(Value, kCTRegistrationDataIndicator5G_Plus)
       || CFEqual(Value, kCTRegistrationDataIndicator5G_Uwb);
    uint64_t v11 = *(void *)(a1 + 40);
    if (*(unsigned __int8 *)(v11 + 1232) != v7)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:v8];
      }
      uint64_t v13 = *(void *)(a1 + 40);
      *(unsigned char *)(v13 + 1232) = v7;
      uint64_t context = v13;
      unint64_t v39 = 0xAAAAAAAA00000027;
      CFIndex v40 = 0;
      uint64_t v41 = 1;
      CFSetApplyFunction(*(CFSetRef *)(v13 + 104), (CFSetApplierFunction)sub_100020954, &context);
      uint64_t v11 = *(void *)(a1 + 40);
    }
    [*(id *)(v11 + 2416) setCellularDataStatus:*(void *)(v11 + 1288) inAirplaneMode:sub_1000BA84C() != 0];
  }
  else
  {
    int v9 = 0;
    BOOL v10 = 0;
  }
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v15 = kCTRegistrationStatusRegisteredRoaming;
  if (v14 == kCTRegistrationStatusRegisteredRoaming)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: cellular in roaming mode." args:("__WiFiManagerCellularDataRegistrationCallback_block_invoke_2")];
    }
  }
  char v17 = *(const void **)(a1 + 72);
  if (v17)
  {
    char v18 = *(const void **)(*(void *)(a1 + 40) + 1272);
    if (v18)
    {
      if (CFEqual(v18, v17)) {
        goto LABEL_44;
      }
      BOOL v19 = *(const void **)(*(void *)(a1 + 40) + 1272);
      if (v19)
      {
        CFRelease(v19);
        *(void *)(*(void *)(a1 + 40) + 1272) = 0;
      }
    }
    *(void *)(*(void *)(a1 + 40) + 1272) = CFRetain(*(CFTypeRef *)(a1 + 72));
    uint64_t context = *(void *)(a1 + 40);
    unint64_t v39 = 0xAAAAAAAA00000066;
    CFIndex v40 = 0;
    uint64_t v41 = 1;
    CFSetApplyFunction(*(CFSetRef *)(context + 104), (CFSetApplierFunction)sub_100020954, &context);
  }
LABEL_44:
  CFSetRef v20 = *(const __CFSet **)(*(void *)(a1 + 40) + 1264);
  if (!v20)
  {
    *(void *)(*(void *)(a1 + 40) + 1264) = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
    if (!v9)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: Initialized with No LTE status.", @"__WiFiManagerCellularDataRegistrationCallback_block_invoke_2"];
      }
      CFSetAddValue(*(CFMutableSetRef *)(*(void *)(a1 + 40) + 1264), @"WiFiCellularDataStatusNoLTE");
    }
    if (v10)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Initialized with 5G status.", "__WiFiManagerCellularDataRegistrationCallback_block_invoke_2")];
      }
      CFSetAddValue(*(CFMutableSetRef *)(*(void *)(a1 + 40) + 1264), @"WiFiCellularDataStatus5GAvailable");
    }
    if (v14 != v15) {
      goto LABEL_91;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Initialized with roaming status.", "__WiFiManagerCellularDataRegistrationCallback_block_invoke_2");
    }
    id v27 = *(__CFSet **)(*(void *)(a1 + 40) + 1264);
    goto LABEL_90;
  }
  int v21 = CFSetContainsValue(v20, @"WiFiCellularDataStatusNoLTE");
  if (v9)
  {
    if (v21)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:@"%s: gained LTE status." message:3];
      }
      CFSetRemoveValue(*(CFMutableSetRef *)(*(void *)(a1 + 40) + 1264), @"WiFiCellularDataStatusNoLTE");
LABEL_50:
      int v23 = 1;
      goto LABEL_65;
    }
  }
  else if (!v21)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:3 message:@"%s: lost LTE status." args:__WiFiManagerCellularDataRegistrationCallback_block_invoke_2];
    }
    CFSetAddValue(*(CFMutableSetRef *)(*(void *)(a1 + 40) + 1264), @"WiFiCellularDataStatusNoLTE");
    if (_os_feature_enabled_impl()) {
      sub_100013A1C(*(void *)(a1 + 40));
    }
    goto LABEL_50;
  }
  int v23 = 0;
LABEL_65:
  int v28 = CFSetContainsValue(*(CFSetRef *)(*(void *)(a1 + 40) + 1264), @"WiFiCellularDataStatus5GAvailable");
  if (v10)
  {
    if (!v28)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:@"%s: gained Cellular 5G status." message:3];
      }
      CFSetAddValue(*(CFMutableSetRef *)(*(void *)(a1 + 40) + 1264), @"WiFiCellularDataStatus5GAvailable");
LABEL_74:
      int v23 = 1;
    }
  }
  else if (v28)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: lost Cellular 5G status.", @"__WiFiManagerCellularDataRegistrationCallback_block_invoke_2"];
    }
    CFSetRemoveValue(*(CFMutableSetRef *)(*(void *)(a1 + 40) + 1264), @"WiFiCellularDataStatus5GAvailable");
    goto LABEL_74;
  }
  int v31 = CFSetContainsValue(*(CFSetRef *)(*(void *)(a1 + 40) + 1264), @"WiFiCellularDataStatusRoaming");
  if (v14 != v15)
  {
    if (v31)
    {
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:message:3, "%s: lost roaming status.", "__WiFiManagerCellularDataRegistrationCallback_block_invoke_2"];
      }
      CFSetRemoveValue(*(CFMutableSetRef *)(*(void *)(a1 + 40) + 1264), @"WiFiCellularDataStatusRoaming");
      goto LABEL_91;
    }
LABEL_81:
    if (!v23) {
      return;
    }
    goto LABEL_91;
  }
  if (v31) {
    goto LABEL_81;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: gained roaming status." arguments:("__WiFiManagerCellularDataRegistrationCallback_block_invoke_2")];
  }
  id v27 = *(__CFSet **)(*(void *)(a1 + 40) + 1264);
LABEL_90:
  CFSetAddValue(v27, @"WiFiCellularDataStatusRoaming");
LABEL_91:
  if (v10 | v9) {
    BOOL v35 = *(void *)(a1 + 56) == 0;
  }
  else {
    BOOL v35 = 1;
  }
  char v36 = !v35;
  char v37 = v36;
  [+[WiFiUserInteractionMonitor sharedInstance] setCellularDataStatusMap:*(void *)(*(void *)(a1 + 40) + 1264)];
  uint64_t context = *(void *)(a1 + 40);
  unint64_t v39 = 0xAAAAAAAA0000008BLL;
  CFIndex v40 = &v37;
  uint64_t v41 = 1;
  CFSetApplyFunction(*(CFSetRef *)(context + 104), (CFSetApplierFunction)sub_100020954, &context);
}

uint64_t sub_1000BA84C()
{
  CFPropertyListRef v0 = CFPreferencesCopyAppValue(@"AirplaneModeEnabled", @"com.apple.preferences.network");
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 == CFBooleanGetTypeID()) {
    uint64_t v3 = CFEqual(v1, kCFBooleanTrue);
  }
  else {
    uint64_t v3 = 0;
  }
  CFRelease(v1);
  return v3;
}

void sub_1000BA8CC(uint64_t a1, int a2)
{
  int v4 = a2;
  if (a1)
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000003ALL;
    void context[2] = &v4;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    if (v4 == -536870272) {
      [+[WiFiUserInteractionMonitor sharedInstance] resetBackgroundApps];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"%s: null manager ref", @"__WiFiManagerSetSystemPMState"];
    }
  }
}

void sub_1000BA9AC(uint64_t a1, io_registry_entry_t a2, int a3)
{
  if (!a1 || !a2) {
    return;
  }
  uint64_t v6 = (void *)sub_10000D990((uint64_t)"__WiFiManagerBatteryEventCallback");
  int v7 = *(unsigned __int8 *)(a1 + 314);
  uint64_t valuePtr = 0;
  properties[0] = 0;
  double Current = CFAbsoluteTimeGetCurrent();
  double v9 = *(double *)(a1 + 992);
  if (v9 != 0.0 && Current < v9) {
    goto LABEL_32;
  }
  uint64_t CFProperties = IORegistryEntryCreateCFProperties(a2, properties, kCFAllocatorDefault, 0);
  if (CFProperties) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = properties[0] == 0;
  }
  if (v12)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, @"%s: IORegistryEntryCreateCFProperties failed with error %d", @"__WiFiManagerGetBatteryLevel", CFProperties];
    }
    goto LABEL_19;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(properties[0], @"CurrentCapacity");
  if (!Value
    || !CFNumberGetValue(Value, kCFNumberIntType, &valuePtr)
    || (CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(properties[0], @"MaxCapacity")) == 0
    || !CFNumberGetValue(v14, kCFNumberIntType, (char *)&valuePtr + 4))
  {
LABEL_19:
    int v15 = 0;
    goto LABEL_20;
  }
  int v15 = 1;
LABEL_20:
  if (properties[0])
  {
    CFRelease(properties[0]);
    properties[0] = 0;
  }
  unsigned int v17 = *(_DWORD *)(a1 + 984);
  if (v15)
  {
    unsigned int v18 = (100 * valuePtr) / HIDWORD(valuePtr);
    *(_DWORD *)(a1 + 984) = v18;
    *(double *)(a1 + 992) = Current + (double)(60 * (v18 / 0xA));
    if (v17 <= 9)
    {
      if (v18 < 0xA) {
        goto LABEL_32;
      }
    }
    else if (v18 >= 0xA)
    {
      goto LABEL_32;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 984) = 0;
    *(void *)(a1 + 992) = 0;
    if (v17 <= 9) {
      goto LABEL_32;
    }
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Battery state has changed. Remaining %d percent", *(unsigned int *)(a1 + 984));
  }
LABEL_32:
  if (a3 == -536723200)
  {
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(a2, @"ExternalConnected", kCFAllocatorDefault, 0);
    int v21 = CFProperty;
    if (CFProperty && CFEqual(CFProperty, kCFBooleanTrue))
    {
      if (!*(unsigned char *)(a1 + 314))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"External power source attached"];
        }
        if ((*(unsigned char *)(a1 + 832) & 0xF) == 0 && *(_DWORD *)(a1 + 788) != 2) {
          sub_10002454C(a1);
        }
        *(unsigned char *)(a1 + 314) = 1;
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 314))
      {
        *(unsigned char *)(a1 + 314) = 0;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"External power source removed"];
        }
        if ((*(unsigned char *)(a1 + 832) & 0xF) == 0) {
          sub_1000241A4(a1);
        }
      }
      if (!v21)
      {
        if (!*(_DWORD *)(a1 + 984))
        {
          if (qword_10027DD68) {
            [qword_10027DD68 WFLog:message:3, "%s: externally powered platform. Cancelling disassociation timer.", "__WiFiManagerBatteryEventCallback"];
          }
          if ((*(unsigned char *)(a1 + 832) & 0xF) == 0 && *(_DWORD *)(a1 + 788) != 2) {
            sub_10002454C(a1);
          }
          *(unsigned char *)(a1 + 314) = 1;
        }
        goto LABEL_49;
      }
    }
    CFRelease(v21);
  }
LABEL_49:
  sub_100090CC0(a1, 0, *(unsigned __int8 *)(a1 + 1162), 2);
  properties[0] = (CFMutableDictionaryRef)a1;
  properties[1] = (CFMutableDictionaryRef)0xAAAAAAAA0000004ALL;
  properties[2] = 0;
  properties[3] = (CFMutableDictionaryRef)1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, properties);
  sub_100046CF8((const __CFArray *)a1, *(unsigned __int8 *)(a1 + 314), *(_DWORD *)(a1 + 984));
  if (v7 != *(unsigned __int8 *)(a1 + 314)) {
    sub_100013A1C(a1);
  }
}

void sub_1000BAD9C(void *a1, int a2)
{
  BOOL v4 = sub_100023220(a1, @"LoggingFileEnabled", byte_10027DD60);
  if (v4) {
    CFBooleanRef v5 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v5 = kCFBooleanFalse;
  }
  sub_100083E60(a1, @"LoggingFileEnabled", v5, a2);
  BOOL v6 = sub_100023220(a1, @"LoggingFileClassC", byte_10027DD61);
  if (v6) {
    CFBooleanRef v7 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v7 = kCFBooleanFalse;
  }
  sub_100083E60(a1, @"LoggingFileClassC", v7, a2);
  v8[0] = (const __CFString *)sub_10000D934(a1, @"LoggingLoggerFile");
  v8[1] = (const __CFString *)sub_10000D934(a1, @"LoggingLoggerSize");
  void v8[2] = (const __CFString *)sub_10000D934(a1, @"LoggingLoggerLevel");
  v8[3] = (const __CFString *)sub_10000D934(a1, @"LoggingLoggerLifeSpan");
  v8[4] = (const __CFString *)sub_10000D934(a1, @"LoggingLoggerPrivacy");
  sub_10007CB58((uint64_t)a1, v4, v6, v8);
}

uint64_t sub_1000BAF00(void *a1, unsigned int a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: setting airplane mode stickiness preference to %d", "__WiFiManagerSetAirplaneModeStickinessUserPreference", a2];
  }
  CFBooleanRef v5 = &kCFBooleanTrue;
  if (!a2) {
    CFBooleanRef v5 = &kCFBooleanFalse;
  }
  CFBooleanRef v6 = *v5;

  return sub_100083E60(a1, @"KeepWiFiPoweredAirplaneMode", v6, 0);
}

uint64_t sub_1000BAFB0(uint64_t a1, unsigned __int8 *a2)
{
  return sub_10005BC30(a1, *a2);
}

void sub_1000BAFB8(uint64_t a1, uint64_t a2)
{
  if (a2 && *(void *)a2 && *(void *)(a2 + 8))
  {
    int v2 = *(unsigned __int8 *)(a2 + 16);
    uint64_t v3 = *(void *)(a2 + 8);
    sub_10005CF00(a1, v3, v2);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Invalid arguments" : @"__WiFiManagerDispatch24GHzNetworkInCriticalStateEvent"];
    }
  }
}

void sub_1000BB060(int a1, int a2, int a3, int a4, uint64_t a5, NSObject **cf)
{
  if (a5)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: BT callback failure, result %d", "__WiFiManagerBluetoothServiceCallback", a5);
    }
  }
  else if (cf)
  {
    CFTypeID v10 = CFGetTypeID(cf);
    uint64_t v11 = qword_10027D6A0;
    if (!qword_10027D6A0)
    {
      pthread_once(&stru_10027CA08, (void (*)(void))sub_10007F8DC);
      uint64_t v11 = qword_10027D6A0;
    }
    if (v10 == v11)
    {
      BOOL v12 = cf[4];
      if (v12)
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000BB56C;
        block[3] = &unk_100240BB8;
        int v17 = a3;
        int v18 = a4;
        block[4] = cf;
        int v19 = a2;
        int v20 = 0;
        dispatch_async(v12, block);
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: manager queue null", @"__WiFiManagerBluetoothServiceCallback", v15];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: BT callback failure, invalid userData type" args:v15];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: BT callback failure, null userData", "__WiFiManagerBluetoothServiceCallback", v15];
    }
  }
}

void sub_1000BB240(uint64_t a1, int a2, uint64_t a3, NSObject **cf)
{
  if (a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: BT callback failure, result %d", @"__WiFiManagerBluetoothLocalDeviceCallback", a3];
    }
  }
  else if (cf)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    uint64_t v8 = qword_10027D6A0;
    if (!qword_10027D6A0)
    {
      pthread_once(&stru_10027CA08, (void (*)(void))sub_10007F8DC);
      uint64_t v8 = qword_10027D6A0;
    }
    if (v7 == v8)
    {
      double v9 = cf[4];
      if (v9)
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000BB664;
        block[3] = &unk_100240BF8;
        int v14 = a2;
        block[4] = cf;
        void block[5] = a1;
        dispatch_async(v9, block);
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: manager queue null" : @"__WiFiManagerBluetoothLocalDeviceCallback" : v12];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: BT callback failure, invalid userData type", "__WiFiManagerBluetoothLocalDeviceCallback", v12);
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: BT callback failure, null userData", @"__WiFiManagerBluetoothLocalDeviceCallback", v12];
    }
  }
}

void *sub_1000BB418(void *result)
{
  *(void *)(result[4] + 1032) = result[5];
  *(void *)(result[4] + 1040) = result[6];
  *(_DWORD *)(result[4] + 1052) = 0;
  return result;
}

void sub_1000BB438(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(_DWORD *)(v2 + 1052) = 0;
  sub_1000BB4FC(v2, 102, 0);
  *(void *)(*(void *)(a1 + 32) + 1032) = 0;
  *(void *)(*(void *)(a1 + 32) + 1040) = 0;
  if (*(_DWORD *)(a1 + 40) == 2)
  {
    uint64_t v3 = BTSessionAttachWithQueue();
    if (v3)
    {
      uint64_t v4 = v3;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Unable to attach to Mobile Bluetooth result=0x%X", v4, sub_10008BBFC);
      }
    }
  }
}

void sub_1000BB4FC(uint64_t a1, int a2, int a3)
{
  if (*(_DWORD *)(a1 + 1060) != a2 || *(_DWORD *)(a1 + 1056) != a3)
  {
    *(_DWORD *)(a1 + 1060) = a2;
    *(_DWORD *)(a1 + 1056) = a3;
    v3[0] = a1;
    v3[1] = 0xAAAAAAAA0000000CLL;
    void v3[2] = 0;
    v3[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v3);
  }
}

void sub_1000BB56C(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 40))
  {
    int v2 = *(_DWORD *)(a1 + 44);
    if (v2 == 11)
    {
      if (*(_DWORD *)(a1 + 52) && *(_DWORD *)(a1 + 48) != -1) {
        return;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Bluetooth Paging Stopped."];
      }
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = *(_DWORD *)(v4 + 1052) & 0xFFFFFFF7;
    }
    else
    {
      if (v2 || *(_DWORD *)(a1 + 48) != -1) {
        return;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Bluetooth Paging Started."];
      }
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = *(_DWORD *)(v4 + 1052) | 8;
    }
    *(_DWORD *)(v4 + 1052) = v5;
    sub_1000BB4FC(v4, 102, v5);
  }
}

void sub_1000BB664(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 48);
  if (v2)
  {
    if (v2 == 7)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Bluetooth Inquiry Stopped."];
      }
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = *(_DWORD *)(v4 + 1052) & 0xFFFFFFFB;
    }
    else
    {
      if (v2 != 6) {
        return;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Bluetooth Inquiry Started."];
      }
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = *(_DWORD *)(v4 + 1052) | 4;
    }
    *(_DWORD *)(v4 + 1052) = v5;
    sub_1000BB4FC(v4, 102, v5);
  }
  else
  {
    uint64_t Power = BTLocalDeviceGetPower();
    if (Power)
    {
      uint64_t v7 = Power;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"Failed to obtain Bluetooth Local Device power state.  result=0x%X", v7];
      }
    }
    else
    {
      sub_1000BB4FC(*(void *)(a1 + 32), 104, 1);
    }
  }
}

void sub_1000BB7B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 184);
  if (v2)
  {
    if (sub_1000DAD20(v2) == 5)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: pending notification is join recommendation stopping abort"];
      }
    }
    else
    {
      sub_1000DAD6C(*(void *)(a1 + 184));
      uint64_t v4 = *(const void **)(a1 + 184);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(a1 + 184) = 0;
      }
    }
  }
}

void sub_1000BB860(uint64_t a1, char a2)
{
  char v3 = a2;
  context[0] = a1;
  context[1] = 0xAAAAAAAA0000005CLL;
  void context[2] = &v3;
  void context[3] = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
}

void sub_1000BB8B4(uint64_t a1)
{
  sub_100089CC4(*(void *)(a1 + 32), *(void *)(a1 + 40), 0);
  uint64_t v2 = *(const void **)(a1 + 32);

  CFRelease(v2);
}

void sub_1000BB8F8(uint64_t a1)
{
}

uint64_t sub_1000BB90C(uint64_t a1, unsigned __int8 *a2)
{
  return sub_10005D468(a1, *a2);
}

void sub_1000BB914(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (!v2[1296])
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Starting cloud sync engine after exceeding %ds waiting for auto-join attempt", "__WiFiManagerLockStateUpdate_block_invoke", 30)];
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 1296) = 1;
    WiFiCloudSyncEngineScheduleWithQueue();
    CFRetain(*(CFTypeRef *)(*(void *)(a1 + 32) + 1304));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000BBA14;
    block[3] = &unk_10023EAF8;
    block[4] = *(void *)(a1 + 32);
    dispatch_async((dispatch_queue_t)qword_10027DD90, block);
    uint64_t v2 = *(unsigned char **)(a1 + 32);
  }
  CFRelease(v2);
}

void sub_1000BBA14(uint64_t a1)
{
  WiFiCloudSyncEngineCheckKeychainSyncState();
  uint64_t v2 = *(const void **)(*(void *)(a1 + 32) + 1304);

  CFRelease(v2);
}

void sub_1000BBA58(id a1, BOOL a2)
{
  if (a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:@"%s retrying to init deviceAnalyticsClient" message:3];
    }
    id v3 = +[WiFiAnalyticsManager sharedWiFiAnalyticsManager];
    [v3 deviceAnalyticsClient];
  }
}

void sub_1000BBADC(CFArrayRef theArray, const void *a2, CFIndex *a3)
{
  if (a3)
  {
    *a3 = -1;
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count)
      {
        CFIndex v7 = Count;
        if (Count < 1)
        {
          CFIndex v8 = 0;
        }
        else
        {
          CFIndex v8 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
            if (sub_1000C8DF4((uint64_t)a2, (uint64_t)ValueAtIndex)) {
              break;
            }
            if (v7 == ++v8) {
              goto LABEL_12;
            }
          }
          *a3 = v8;
        }
        if (v8 == v7)
        {
LABEL_12:
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: network %@ not found", "__GetNetworkWithSameSsid", sub_10001A43C(a2) message];
          }
        }
      }
    }
  }
}

void sub_1000BBBF4(uint64_t a1, const void **a2)
{
}

void sub_1000BBBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(qword_10027D6C8 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1000BBE18;
  v3[3] = &unk_10023F048;
  void v3[4] = a2;
  v3[5] = qword_10027D6C8;
  dispatch_async(v2, v3);
}

void sub_1000BBC74(void *a1, const void *a2)
{
  if (a1)
  {
    uint64_t v4 = (void *)sub_10001A43C(a2);
    id v5 = [v4 stringByAppendingString:sub_1000CE384((uint64_t)a2)];
    id v7 = (id)objc_opt_new();
    [v7 setObject:[+[NSDate date](NSDate, "date")] forKeyedSubscript:@"timestamp"];
    [v7 setObject:sub_1000CE384((uint64_t)a2) forKeyedSubscript:@"bundleID"];
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Add item:%@ at sessionKey:%@", "__WiFiManagerAddSessionBasedNetwork", v7, v5 message];
    }
    double v9 = (void *)a1[202];
    if (v9) {
      id v10 = [v9 mutableCopy];
    }
    else {
      id v10 = (id)objc_opt_new();
    }
    id v11 = v10;
    [v11 setObject:v7 forKeyedSubscript:v5];
    sub_100083E60(a1, @"SessionBasedNetworkList", v11, 0);
    sub_1000A55A0((uint64_t)a1, v11);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager ref is null" arguments:("__WiFiManagerAddSessionBasedNetwork", 0)];
    }
  }
}

void sub_1000BBE18(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: response %lu", "__WiFiManagerAddNetworkAsyncUserNotificationCallback_block_invoke", *(void *)(a1 + 32));
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 1688), 0);
    if (ValueAtIndex)
    {
      id v5 = ValueAtIndex;
      id v6 = [ValueAtIndex network];
      if (v6)
      {
        id v7 = v6;
        id v8 = [v5 client];
        uint64_t v9 = *(void *)(a1 + 32);
        if (v9 == 3)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3 message:"System cancelled user notification."];
          }
          char v14 = 0;
          uint64_t v15 = 2;
        }
        else if (v9 == 1)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3 message:"User did not give consent to add network."];
          }
          char v14 = 0;
          uint64_t v15 = 1;
        }
        else if (v9)
        {
          char v14 = 0;
          uint64_t v15 = 0x7FFFFFFFLL;
        }
        else
        {
          uint64_t v10 = 25;
          if ([v5 originator] != 1)
          {
            if ([v5 originator] == 6) {
              uint64_t v10 = 25;
            }
            else {
              uint64_t v10 = 8;
            }
          }
          id v11 = sub_1000D3210((uint64_t)v7);
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "User gave consent to add network (sessionBased=%d, isAccessory=%d)", objc_msgSend(v5, "sessionBased"), v11 != 0);
          }
          if (v11)
          {
            sub_100093634(*(void *)(a1 + 40), v7, v10);
            sub_1000BBC74(*(void **)(a1 + 40), v7);
          }
          else
          {
            unsigned int v17 = [v5 sessionBased];
            int v18 = *(void **)(a1 + 40);
            if (v17)
            {
              sub_1000BBC74(v18, v7);
              sub_100094568(v7);
            }
            else
            {
              sub_100093634((uint64_t)v18, v7, v10);
            }
          }
          if (sub_10001BB2C((BOOL)v7))
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3 message:@"%s: skipping association for HS20 network" : @"__WiFiManagerAddNetworkAsyncUserNotificationCallback_block_invoke"];
            }
            char v14 = 0;
            uint64_t v15 = 0;
          }
          else
          {
            uint64_t v19 = *(void *)(a1 + 40);
            if (!*(_DWORD *)(v19 + 316))
            {
              sub_100091EE8(v19, 1, 0);
              uint64_t v19 = *(void *)(a1 + 40);
            }
            context[0] = v19;
            context[1] = 0xAAAAAAAA00000045;
            void context[2] = v7;
            void context[3] = 0;
            CFSetApplyFunction(*(CFSetRef *)(v19 + 104), (CFSetApplierFunction)sub_100020954, context);
            uint64_t v15 = 0x7FFFFFFFLL;
            char v14 = 1;
          }
        }
        if (*(void *)(*(void *)(a1 + 40) + 1640))
        {
          Main = CFRunLoopGetMain();
          CFRunLoopRemoveSource(Main, *(CFRunLoopSourceRef *)(*(void *)(a1 + 40) + 1640), kCFRunLoopDefaultMode);
        }
        if ((v14 & 1) == 0)
        {
          if (v8) {
            sub_10005D0A4((uint64_t)v8, *(void *)(a1 + 40), (uint64_t)v7, v15);
          }
          if ([v5 callback]) {
            ((void (*)(void, id, uint64_t, id))[v5 callback])(*(void *)(a1 + 40), [v5 network], v15, [v5 context]);
          }
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(*(void *)(a1 + 40) + 1688), 0);
          sub_100099B04(*(void *)(a1 + 40));
        }
      }
    }
    uint64_t v21 = *(void *)(a1 + 40);
    if (v21)
    {
      id v22 = *(const void **)(v21 + 1640);
      if (v22)
      {
        CFRelease(v22);
        *(void *)(*(void *)(a1 + 40) + 1640) = 0;
        uint64_t v21 = *(void *)(a1 + 40);
      }
      int v23 = *(const void **)(v21 + 1648);
      if (v23)
      {
        CFRelease(v23);
        *(void *)(*(void *)(a1 + 40) + 1648) = 0;
      }
    }
  }
}

void sub_1000BC1A0(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CNForgetSSID();
    uint64_t v2 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
  }
}

void sub_1000BC1F4(int a1, CFMutableStringRef theString)
{
  if (a1)
  {
    CFStringAppend(theString, @" Pwr");
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 0x800000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  CFStringAppend(theString, @" Lnk");
  if ((a1 & 0x800000) == 0)
  {
LABEL_4:
    if ((a1 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  CFStringAppend(theString, @" AuJo");
  if ((a1 & 4) == 0)
  {
LABEL_5:
    if ((a1 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  CFStringAppend(theString, @" Att");
  if ((a1 & 8) == 0)
  {
LABEL_6:
    if ((a1 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  CFStringAppend(theString, @" Rmv");
  if ((a1 & 0x10) == 0)
  {
LABEL_7:
    if ((a1 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  CFStringAppend(theString, @" Prf");
  if ((a1 & 0x20) == 0)
  {
LABEL_8:
    if ((a1 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  CFStringAppend(theString, @" Not");
  if ((a1 & 0x40) == 0)
  {
LABEL_9:
    if ((a1 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  CFStringAppend(theString, @" ScCu");
  if ((a1 & 0x80) == 0)
  {
LABEL_10:
    if ((a1 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  CFStringAppend(theString, @" ScUpFu");
  if ((a1 & 0x100) == 0)
  {
LABEL_11:
    if ((a1 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  CFStringAppend(theString, @" ScUpTr");
  if ((a1 & 0x400) == 0)
  {
LABEL_12:
    if ((a1 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  CFStringAppend(theString, @" Bss");
  if ((a1 & 0x8000) == 0)
  {
LABEL_13:
    if ((a1 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  CFStringAppend(theString, @" DiagSta");
  if ((a1 & 0x800) == 0)
  {
LABEL_14:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  CFStringAppend(theString, @" ResSc");
  if ((a1 & 0x1000) == 0)
  {
LABEL_15:
    if ((a1 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  CFStringAppend(theString, @" bgS");
  if ((a1 & 0x2000) == 0)
  {
LABEL_16:
    if ((a1 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  CFStringAppend(theString, @" WowEn");
  if ((a1 & 0x4000) == 0)
  {
LABEL_17:
    if ((a1 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  CFStringAppend(theString, @" LQM");
  if ((a1 & 0x80000000) == 0)
  {
LABEL_18:
    if ((a1 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  CFStringAppend(theString, @" WeightAvgLQM");
  if ((a1 & 0x10000) == 0)
  {
LABEL_19:
    if ((a1 & 0x20000) == 0) {
      goto LABEL_20;
    }
LABEL_40:
    CFStringAppend(theString, @" VrtA");
    if ((a1 & 0x40000) == 0) {
      return;
    }
    goto LABEL_41;
  }
LABEL_39:
  CFStringAppend(theString, @" Rst");
  if ((a1 & 0x20000) != 0) {
    goto LABEL_40;
  }
LABEL_20:
  if ((a1 & 0x40000) == 0) {
    return;
  }
LABEL_41:

  CFStringAppend(theString, @" VrtR");
}

intptr_t sub_1000BC40C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s Device Analytics Store File:%@", "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse_block_invoke", a2 message];
    }
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [objc_alloc((Class)NSString) initWithString:a2];
  }
  id v5 = *(NSObject **)(a1 + 32);

  return dispatch_semaphore_signal(v5);
}

intptr_t sub_1000BC4B4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [objc_alloc((Class)NSDictionary) initWithDictionary:a2];
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Updated configuration with %s", "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse_block_invoke_2", -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@", a2), "UTF8String") message];
    }
  }
  id v5 = *(NSObject **)(a1 + 32);

  return dispatch_semaphore_signal(v5);
}

void sub_1000BC580(uint64_t a1, uint64_t val)
{
  uint64_t state64 = 0;
  if (notify_is_valid_token(val))
  {
    notify_get_state(val, &state64);
    uint64_t v4 = *(NSObject **)(a1 + 32);
    if (v4)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000BC6BC;
      block[3] = &unk_10023F048;
      block[4] = a1;
      void block[5] = state64;
      dispatch_async(v4, block);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: probably WiFiManager is in middle of closing.":@"__WiFiManagerNotifyBatterySaverModeConfiguration"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: invalid token %d", @"__WiFiManagerNotifyBatterySaverModeConfiguration", val];
    }
  }
}

void sub_1000BC6BC(uint64_t a1)
{
}

void sub_1000BC6CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 1952))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: user auto join disabled location update received", "__WiFiManagerLocationManagerCallback_block_invoke")];
    }
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      if (*(unsigned char *)(v4 + 1952))
      {
        if (!sub_100004CF8(v4))
        {
          id v6 = [[objc_msgSend(*(id *)(v4 + 1696), "latestLocation") copy];
          unsigned int v7 = +[WiFiLocationManager isLocationValid:v6 uptoSeconds:1 isHighAccuracy:60.0];
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: location update %@ isValid %d", "__WiFiManagerUserAutoJoinDisabledLocationUpdate", v6, v7 != 0 message];
          }
          if (v7)
          {
            uint64_t v9 = +[NSKeyedArchiver archivedDataWithRootObject:v6];
            if (v9)
            {
              sub_100083E60((void *)v4, @"UserAutoJoinDisabledLoc", v9, 0);
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:3, @"%s: failed to create archive of location", @"__WiFiManagerUserAutoJoinDisabledLocationUpdate"];
              }
            }
            *(void *)(v4 + 1960) = v6;
            *(_WORD *)(v4 + 1952) = 0;
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3 message:@"%s: location update is not high accuracy" arguments:@[@"__WiFiManagerUserAutoJoinDisabledLocationUpdate"]];
            }
            if (v6) {
              CFRelease(v6);
            }
            *(unsigned char *)(v4 + 1953) = 1;
          }
          goto LABEL_21;
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: user auto join is not disabled, location update not required", "__WiFiManagerUserAutoJoinDisabledLocationUpdate")];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, "%s: user auto join is not waiting on a location update", "__WiFiManagerUserAutoJoinDisabledLocationUpdate"];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: manager is NULL", @"__WiFiManagerUserAutoJoinDisabledLocationUpdate"];
      }
    }
LABEL_21:
    uint64_t v2 = *(void *)(a1 + 32);
  }
  if (*(unsigned char *)(v2 + 1704))
  {
    id v16 = [[objc_msgSend(*(id *)(v2 + 1696), "latestLocation") copy];
    unsigned int v12 = +[WiFiLocationManager isLocationValid:v16 uptoSeconds:1 isHighAccuracy:60.0];
    +[WiFiLocationManager logLocation:v16 addPrefixString:@"__WiFiManagerLocationManagerCallback"];
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: isValid %d", "__WiFiManagerLocationManagerCallback_block_invoke", v12 != 0)];
    }
    sub_1000B8168(*(const __CFArray **)(a1 + 32), v16);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no network waiting to be tagged", "__WiFiManagerLocationManagerCallback_block_invoke")];
    }
  }
}

BOOL sub_1000BCA3C(uint64_t a1)
{
  BOOL result = sub_1001749EC(*(void *)(a1 + 32) + 1800, 1);
  *(unsigned char *)(*(void *)(a1 + 32) + 1808) = result;
  return result;
}

void sub_1000BCA74(uint64_t a1, const void **a2)
{
}

BOOL sub_1000BCA84(const __SCNetworkSet *a1, const __CFArray *a2)
{
  CFArrayRef v4 = SCNetworkSetCopyServices(a1);
  if (v4)
  {
    CFArrayRef v5 = v4;
    if (CFArrayGetCount(v4) >= 1)
    {
      BOOL v6 = 0;
      CFIndex v7 = 0;
      while (1)
      {
        ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v5, v7);
        if (ValueAtIndex)
        {
          uint64_t v9 = ValueAtIndex;
          if (a2 && (v17.length = CFArrayGetCount(a2), v17.location = 0, CFArrayContainsValue(a2, v17, v9)))
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: service ID %@ found in exclude list. Not removing it.", "__WiFiManagerRemoveMatchingServiceForSet", SCNetworkServiceGetServiceID(v9), v16 message];
            }
          }
          else
          {
            Interface = SCNetworkServiceGetInterface(v9);
            if (!Interface) {
              goto LABEL_15;
            }
            CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(Interface);
            if (!InterfaceType || !CFEqual(InterfaceType, kSCNetworkInterfaceTypeIEEE80211)) {
              goto LABEL_15;
            }
            unsigned int v13 = SCNetworkServiceRemove(v9);
            BOOL v6 = (v6 | v13) != 0;
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: service removal status for set %@: %d", "__WiFiManagerRemoveMatchingServiceForSet", SCNetworkSetGetSetID(a1), v13 message];
            }
          }
        }
LABEL_15:
        if (++v7 >= CFArrayGetCount(v5)) {
          goto LABEL_21;
        }
      }
    }
    BOOL v6 = 0;
LABEL_21:
    CFRelease(v5);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no services", "__WiFiManagerRemoveMatchingServiceForSet")];
    }
    return 0;
  }
  return v6;
}

uint64_t sub_1000BCC60(uint64_t a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, @"%s: sc prefs clean up done !!", @"__WiFiManagerRemoveSCNetworkSets_block_invoke"];
  }
  uint64_t v3 = *(void **)(a1 + 32);

  return sub_10009317C(v3, @"IsOrphanedSCCleanUpRequired", kCFBooleanFalse);
}

void sub_1000BCCF0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)FAFetchFamilyCircleRequest);
  if (v2)
  {
    uint64_t v3 = v2;
    [v2 setCachePolicy:0];
    uint64_t v4 = *(void *)(a1 + 40);
    *(unsigned char *)(v4 + 2217) = 1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000BCDC0;
    void v6[3] = &unk_100240CB0;
    v6[5] = v3;
    v6[6] = v4;
    v6[4] = *(void *)(a1 + 32);
    [v3 startRequestWithCompletionHandler:v6];
  }
  else
  {
    CFArrayRef v5 = *(void **)(a1 + 32);
  }
}

void sub_1000BCDC0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v38 = 0;
  unint64_t v39 = &v38;
  uint64_t v40 = 0x3052000000;
  uint64_t v41 = sub_100022CD8;
  CFIndex v42 = sub_100022BE8;
  uint64_t v43 = 0;
  if (a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: error loading family members: %@", "__WiFiManagerUpdateFamilyPreferences_block_invoke_2", a3 message];
    }
    if ([a3 code] != (id)-1004) {
      *(unsigned char *)(*(void *)(a1 + 48) + 2217) = 0;
    }
  }
  else if (a2)
  {
    id v7 = objc_alloc_init((Class)NSMutableArray);
    v39[5] = (uint64_t)v7;
    if ((unint64_t)objc_msgSend(objc_msgSend(a2, "members"), "count") >= 2) {
      *(_DWORD *)(*(void *)(a1 + 48) + 340) = 2;
    }
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v8 = [a2 members];
    id v9 = [v8 countByEnumeratingWithState:&v34 objects:v45 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v35;
      id v26 = v8;
      uint64_t v27 = a1;
      uint64_t v25 = *(void *)v35;
      do
      {
        id v11 = 0;
        id v28 = v9;
        do
        {
          if (*(void *)v35 != v10) {
            objc_enumerationMutation(v8);
          }
          unsigned int v12 = *(void **)(*((void *)&v34 + 1) + 8 * (void)v11);
          if (([v12 isMe] & 1) == 0)
          {
            unsigned int v13 = +[NSNumber numberWithInt:1];
            long long v32 = 0u;
            long long v33 = 0u;
            long long v30 = 0u;
            long long v31 = 0u;
            char v14 = *(void **)(a1 + 32);
            id v15 = [v14 countByEnumeratingWithState:&v30 objects:v44 count:16];
            if (v15)
            {
              uint64_t v16 = *(void *)v31;
              while (2)
              {
                for (CFIndex i = 0; i != v15; CFIndex i = (char *)i + 1)
                {
                  if (*(void *)v31 != v16) {
                    objc_enumerationMutation(v14);
                  }
                  int v18 = *(void **)(*((void *)&v30 + 1) + 8 * i);
                  if (objc_msgSend(objc_msgSend(v12, "altDSID"), "isEqual:", objc_msgSend(v18, "objectForKeyedSubscript:", @"FamilyHotspotIdentifier")))
                  {
                    uint64_t v19 = (NSNumber *)[v18 objectForKeyedSubscript:@"FamilyHotspotSharingMode"];
                    id v8 = v26;
                    a1 = v27;
                    id v9 = v28;
                    uint64_t v10 = v25;
                    unsigned int v13 = v19;
                    if ([(NSNumber *)v19 intValue] == 1) {
                      *(_DWORD *)(*(void *)(v27 + 48) + 340) = 1;
                    }
                    goto LABEL_26;
                  }
                }
                id v15 = [v14 countByEnumeratingWithState:&v30 objects:v44 count:16];
                if (v15) {
                  continue;
                }
                break;
              }
              id v8 = v26;
              a1 = v27;
              id v9 = v28;
              uint64_t v10 = v25;
            }
LABEL_26:
            id v20 = objc_alloc_init((Class)NSMutableDictionary);
            [v20 setObject:[v12 altDSID] forKey:@"FamilyHotspotIdentifier"];
            [v20 setObject:[v12 wifiDisplayName] forKey:@"FamilyHotspotDisplayName"];
            [v20 setObject:v13 forKey:@"FamilyHotspotSharingMode"];
            uint64_t v21 = (void *)v39[5];
            if (v21) {
              [v21 addObject:v20];
            }
          }
          id v11 = (char *)v11 + 1;
        }
        while (v11 != v9);
        id v9 = [v8 countByEnumeratingWithState:&v34 objects:v45 count:16];
      }
      while (v9);
    }
    if (v39[5])
    {
      uint64_t v22 = *(void *)(a1 + 48);
      int v23 = *(NSObject **)(v22 + 32);
      if (v23)
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000BD24C;
        block[3] = &unk_10023F220;
        block[4] = &v38;
        void block[5] = v22;
        dispatch_async(v23, block);
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: null runloop.", @"__WiFiManagerUpdateFamilyPreferences_block_invoke_2"];
        }
      }
    }
  }

  _Block_object_dispose(&v38, 8);
}

void sub_1000BD20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_1000BD24C(uint64_t a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: setting family hotspot preference %@", "__WiFiManagerUpdateFamilyPreferences_block_invoke_3", *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) message];
  }
  sub_1000A85B8(*(void **)(a1 + 40), *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
  uint64_t v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

void sub_1000BD2E8(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    id v4 = [a2 length];
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    if (v4)
    {
      *(unsigned char *)(v5 + 24) = 1;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  *(unsigned char *)(v5 + 24) = 0;
LABEL_6:
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "WFMacRandomisation : Backhaul link status : %hhu", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  }
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = *(NSObject **)(v7 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000BD3DC;
  block[3] = &unk_10023F220;
  block[4] = *(void *)(a1 + 32);
  void block[5] = v7;
  dispatch_async(v8, block);
}

void sub_1000BD3DC(uint64_t a1)
{
}

BOOL sub_1000BD3F4(const __CFData *a1, const __CFData *a2)
{
  BytePtr = CFDataGetBytePtr(a1);
  __int32 v13 = *(_DWORD *)BytePtr;
  __int16 v14 = *((_WORD *)BytePtr + 2);
  id v4 = CFDataGetBytePtr(a2);
  BOOL result = 0;
  __int32 v11 = *(_DWORD *)v4;
  __int16 v12 = *((_WORD *)v4 + 2);
  v6.i32[0] = v13;
  uint8x8_t v7 = (uint8x8_t)vmovn_s16((int16x8_t)vmovl_u8(v6));
  __int32 v8 = v7.i32[0] | v14;
  v7.i32[0] = *(_DWORD *)v4;
  BOOL v9 = (vmovn_s16((int16x8_t)vmovl_u8(v7)).u32[0] | v12 | HIBYTE(v12)) == 0;
  if (v8 | HIBYTE(v14) && !v9) {
    return v13 == v11 && v14 == v12;
  }
  return result;
}

void sub_1000BD4C4(uint64_t a1)
{
  v1[0] = *(void *)(a1 + 32);
  v1[1] = 0xAAAAAAAA00000009;
  v1[2] = 0;
  v1[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(v1[0] + 104), (CFSetApplierFunction)sub_100020954, v1);
}

CFStringRef sub_1000BDEA0(int a1)
{
  if ((a1 - 2) > 3) {
    return @"None";
  }
  else {
    return off_100240E88[a1 - 2];
  }
}

void sub_1000BE08C(uint64_t a1, void *a2)
{
  if (a2 && [a2 confidence] == (id)2)
  {
    [*(id *)(a1 + 32) setMotionState:5];
    if ([a2 automotive]) {
      [*(id *)(a1 + 32) setMotionState:4];
    }
    if ([a2 stationary])
    {
      if ([a2 automotive]) {
        uint64_t v4 = 6;
      }
      else {
        uint64_t v4 = 1;
      }
      [*(id *)(a1 + 32) setMotionState:v4];
    }
    if ([a2 walking]) {
      [*(id *)(a1 + 32) setMotionState:2];
    }
    if ([a2 running]) {
      [*(id *)(a1 + 32) setMotionState:3];
    }
    if ([*(id *)(a1 + 32) motionState] == 4
      || [*(id *)(a1 + 32) motionState] == 6)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s [MOTION] MotionState: %@ - (%@)", "-[WiFiManagerMotionServices startMonitoringMotionState]_block_invoke", sub_100012FCC((int)objc_msgSend(*(id *)(a1 + 32), "motionState")), a2 message];
      }
    }
    [objc_msgSend(a2, "startDate") timeIntervalSinceReferenceDate];
    [*(id *)(a1 + 32) setMotionStartTime:];
    uint8x8_t v6 = [*(id *)(a1 + 32) queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000BE238;
    block[3] = &unk_10023EFA8;
    block[4] = *(void *)(a1 + 32);
    dispatch_async(v6, block);
  }
}

id sub_1000BE238(uint64_t a1)
{
  return [*(id *)(a1 + 32) dispatchMotionCallback];
}

id sub_1000BE554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: [MOTION] Walking Started alarm triggered, error %@", "-[WiFiManagerMotionServices setupWalkingStartedAlarm]_block_invoke", a3 message];
  }
  [*(id *)(a1 + 32) setMotionState:2];
  uint8x8_t v6 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000BE634;
  block[3] = &unk_10023EFA8;
  block[4] = *(void *)(a1 + 32);
  dispatch_async(v6, block);
  return [*(id *)(a1 + 32) setupWalkingEndedAlarm];
}

id sub_1000BE634(uint64_t a1)
{
  return [*(id *)(a1 + 32) dispatchMotionCallback];
}

id sub_1000BE7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: [MOTION] Walking Ended alarm triggered, error %@", "-[WiFiManagerMotionServices setupWalkingEndedAlarm]_block_invoke", a3 message];
  }
  [*(id *)(a1 + 32) setMotionState:2];
  uint8x8_t v6 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000BE89C;
  block[3] = &unk_10023EFA8;
  block[4] = *(void *)(a1 + 32);
  dispatch_async(v6, block);
  return [*(id *)(a1 + 32) setupWalkingStartedAlarm];
}

id sub_1000BE89C(uint64_t a1)
{
  return [*(id *)(a1 + 32) dispatchMotionCallback];
}

id sub_1000BEA24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: [MOTION] driving started alarm triggered........., error %@", "-[WiFiManagerMotionServices setupDrivingStartedAlarm]_block_invoke", a3 message];
  }
  [*(id *)(a1 + 32) setMotionState:4];
  uint8x8_t v6 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000BEB04;
  block[3] = &unk_10023EFA8;
  block[4] = *(void *)(a1 + 32);
  dispatch_async(v6, block);
  return [*(id *)(a1 + 32) setupDrivingEndedAlarm];
}

id sub_1000BEB04(uint64_t a1)
{
  return [*(id *)(a1 + 32) dispatchMotionCallback];
}

id sub_1000BEC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: [MOTION] Driving ended alarm triggered..........., error %@", "-[WiFiManagerMotionServices setupDrivingEndedAlarm]_block_invoke", a3 message];
  }
  [*(id *)(a1 + 32) setMotionState:2];
  uint8x8_t v6 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000BED6C;
  block[3] = &unk_10023EFA8;
  block[4] = *(void *)(a1 + 32);
  dispatch_async(v6, block);
  return [*(id *)(a1 + 32) setupDrivingStartedAlarm];
}

id sub_1000BED6C(uint64_t a1)
{
  return [*(id *)(a1 + 32) dispatchMotionCallback];
}

WiFiManagerMotionServices *sub_1000BEE54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager" : @"WiFiManagerMotionServicesInitialize"];
    }
    goto LABEL_12;
  }
  if (!a3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null motionStateChangeCb", "WiFiManagerMotionServicesInitialize")];
    }
    goto LABEL_12;
  }
  uint8x8_t v7 = objc_alloc_init(WiFiManagerMotionServices);
  if (!v7)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: motionServices is null", @"WiFiManagerMotionServicesInitialize"];
    }
LABEL_12:
    __int32 v8 = 0;
    goto LABEL_5;
  }
  __int32 v8 = v7;
  [(WiFiManagerMotionServices *)v7 setManager:a1];
  [(WiFiManagerMotionServices *)v8 setMotionStateChangeCb:a3];
  [(WiFiManagerMotionServices *)v8 setQueue:a2];
  [(WiFiManagerMotionServices *)v8 startMonitoringMotionState];
LABEL_5:
  return v8;
}

void sub_1000BEF90(void *a1)
{
  if (a1)
  {
    [a1 stopMonitoringMotionState];
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null motionServices", "WiFiManagerMotionServicesEnd")];
    }
  }
}

void sub_1000BF024(void *a1, NSObject *a2)
{
  *((unsigned char *)a1 + 48) = 0;
  if (MGGetBoolAnswer()) {
    *((unsigned char *)a1 + 48) = 1;
  }
  *((unsigned char *)a1 + 8) = 0;
  uint64_t v4 = opendir("/private/var/dextcores");
  if (v4)
  {
    *a1 = "/private/var/dextcores";
    closedir(v4);
  }
  else
  {
    *a1 = "/private/var/cores";
  }
  a1[3] = a2;
  uint64_t v5 = a2;
  unsigned int v6 = sub_100174324();
  if (v6) {
    int v7 = v6;
  }
  else {
    int v7 = 5;
  }
  *((_DWORD *)a1 + 9) = v7;
  unsigned int v8 = sub_1001742D8();
  if (v8) {
    int v9 = v8;
  }
  else {
    int v9 = 360;
  }
  *((_DWORD *)a1 + 8) = v9;
  uint64_t v22 = 9221;
  uint64_t v10 = fsctl((const char *)*a1, 0xC0084A44uLL, &v22, 0);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s fsctl for %s returns %d", "WiFiDextCrashMarkCoreFilesPurgable", *a1, v10);
  }
  if (*((int *)a1 + 8) > 1440) {
    goto LABEL_17;
  }
  __int16 v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
  a1[2] = v12;
  if (v12)
  {
    dispatch_set_context(v12, a1);
    dispatch_source_set_event_handler_f((dispatch_source_t)a1[2], (dispatch_function_t)sub_100174370);
    dispatch_activate((dispatch_object_t)a1[2]);
    __int32 v13 = a1[2];
    dispatch_time_t v14 = dispatch_time(0, 10000000000);
    dispatch_source_set_timer(v13, v14, 60000000000 * *((int *)a1 + 8), 0x8BB2C97000uLL);
LABEL_17:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"%s  timer enabled:%d startTime:%d period:%d (min) leeway:%d (min) maxFiles:%d corefile_directory:%s", @"WiFiDextCrashProcessInit", *((_DWORD *)a1 + 8) < 1441, 10, *((unsigned int *)a1 + 8), 10, *((unsigned int *)a1 + 9), *a1];
    }
    goto LABEL_19;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: failed to create dextcrash handling timer", "WiFiDextCrashProcessInit", v16, v17, v18, v19, v20, v21);
  }
LABEL_19:
}

void sub_1000BF25C(uint64_t a1)
{
  id v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {

    *(void *)(a1 + 24) = 0;
  }
}

void sub_1000C01D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
}

void sub_1000C0B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C0B64(id a1, int64_t a2)
{
  if (a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Unable to register for periodic RSSI updates from P2PD %d" a2];
    }
  }
}

void sub_1000C0BD4(uint64_t a1, void *a2)
{
  id v23 = a2;
  uint64_t v4 = (void *)qword_10027DD68;
  if (!v23)
  {
    if (!qword_10027DD68) {
      goto LABEL_12;
    }
    int v9 = "generateCurrentNetworkRecordForInternetSharingSession returns NULL Dictionary";
LABEL_11:
    [v4 WFLog:3 message:v9];
    goto LABEL_12;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"generateCurrentNetworkRecordForInternetSharingSession returns non NULL dictionary"];
  }
  id v5 = [v23 copy];
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(v6 + 168);
  *(void *)(v6 + 168) = v5;

  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 168);
  uint64_t v4 = (void *)qword_10027DD68;
  if (!v8)
  {
    if (!qword_10027DD68) {
      goto LABEL_12;
    }
    int v9 = "_curNetworkRecord is NULL ";
    goto LABEL_11;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Dump Current NAN BSS Info Dictionary : %@ ", *(void *)(*(void *)(a1 + 32) + 168) message];
  }
LABEL_12:
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if ([WeakRetained staDatapathEstablishedcallback])
  {
    uint64_t v22 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, id, id, id, id, void *, int))[WeakRetained staDatapathEstablishedcallback];
    __int32 v11 = *(void **)(a1 + 32);
    uint64_t v12 = v11[14];
    uint64_t v13 = v11[18];
    uint64_t v14 = v11[19];
    uint64_t v15 = v11[20];
    id v16 = [WeakRetained establishedLinkNetwork];
    id v17 = [WeakRetained linkEstablishedCallbackContext];
    id v18 = [WeakRetained nanAssocData];
    id v19 = [WeakRetained isAutoJoined];
    uint64_t v20 = [*(id *)(a1 + 32) waDiscoveryResult];
    v22(v13, v12, v14, v15, v16, v17, v18, v19, v20, 1);
  }
}

void sub_1000C17CC(id a1, int64_t a2)
{
  if (a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Transaction %d abruptly ended because %d", 16, a2);
    }
  }
}

void sub_1000C1840(id a1, int64_t a2)
{
  if (a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, @"Transaction %d abruptly ended because %d", 16, a2];
    }
  }
}

void sub_1000C18B4(id a1, int64_t a2)
{
  if (a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Transaction %d abruptly ended because %d", 16, a2)];
    }
  }
}

void sub_1000C1928(id a1, int64_t a2)
{
  if (a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Transaction %d abruptly ended because %d", 16, a2);
    }
  }
}

uint64_t sub_1000C1D8C()
{
  uint64_t result = qword_10027D6F8;
  if (!qword_10027D6F8)
  {
    pthread_once(&stru_10027CB40, (void (*)(void))sub_1000C1DD4);
    return qword_10027D6F8;
  }
  return result;
}

CFMutableDictionaryRef sub_1000C1DD4()
{
  qword_10027D6F8 = _CFRuntimeRegisterClass();
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
  qword_10027D700 = (uint64_t)result;
  return result;
}

void *sub_1000C1E20(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a2 < 1) {
    return 0;
  }
  if (!qword_10027D6F8) {
    pthread_once(&stru_10027CB40, (void (*)(void))sub_1000C1DD4);
  }
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  uint64_t v8 = Instance;
  if (Instance)
  {
    Instance[5] = 0u;
    Instance[6] = 0u;
    Instance[3] = 0u;
    Instance[4] = 0u;
    Instance[1] = 0u;
    Instance[2] = 0u;
    *((_DWORD *)Instance + 4) = a3;
    if (!a4
      || ((v11.version = 0, memset(&v11.retain, 0, 24), v11.info = Instance, !a3)
        ? (uint64_t v9 = (uint64_t)CFMachPortCreate(kCFAllocatorDefault, (CFMachPortCallBack)sub_1000C1F44, &v11, 0))
        : (uint64_t v9 = sub_10005A964()),
          (v8[7] = v9) != 0))
    {
      v8[3] = a2;
      return v8;
    }
    CFRelease(v8);
    return 0;
  }
  return v8;
}

void sub_1000C1F44(int a1, mach_msg_header_t *a2, int a3, CFIndex *cf)
{
  if (!cf) {
    return;
  }
  CFRetain(cf);
  uint64_t v6 = (mach_msg_header_t *)CFAllocatorAllocate(0, cf[3], 0);
  if (v6)
  {
    int v7 = v6;
    mach_port_t msgh_remote_port = a2->msgh_remote_port;
    v6->msgh_bits = a2->msgh_bits & 0x1F;
    v6->msgh_size = 36;
    *(void *)&v6->mach_port_t msgh_remote_port = msgh_remote_port;
    v6->msgh_id = a2->msgh_id + 100;
    if (a2->msgh_id == 70)
    {
      v6->msgh_bits = 0;
      v6->mach_port_t msgh_remote_port = 0;
      v6[1].mach_port_t msgh_remote_port = 0;
      p_mach_port_t msgh_remote_port = &v6[1].msgh_remote_port;
      uint64_t v10 = (void (*)(CFIndex *, CFIndex))cf[12];
      if (v10) {
        v10(cf, cf[13]);
      }
    }
    else
    {
      NDR_record_t v11 = NDR_record;
      v6[1].mach_port_t msgh_remote_port = -303;
      p_mach_port_t msgh_remote_port = &v6[1].msgh_remote_port;
      *(NDR_record_t *)&v6[1].msgh_bits = v11;
      uint64_t v12 = (void (*)(CFIndex *, mach_msg_header_t *, mach_msg_header_t *, CFIndex))cf[10];
      if (v12) {
        v12(cf, a2, v6, cf[11]);
      }
    }
    if ((v7->msgh_bits & 0x80000000) == 0 && *p_msgh_remote_port)
    {
      if (*p_msgh_remote_port == -305) {
        goto LABEL_18;
      }
      a2->mach_port_t msgh_remote_port = 0;
      mach_msg_destroy(a2);
    }
    if (v7->msgh_remote_port)
    {
      if ((v7->msgh_bits & 0x1F) == 0x12) {
        mach_msg_option_t v13 = 1;
      }
      else {
        mach_msg_option_t v13 = 17;
      }
      if ((mach_msg(v7, v13, v7->msgh_size, 0, 0, 0, 0) - 268435459) > 1) {
        goto LABEL_18;
      }
    }
    else if ((v7->msgh_bits & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    mach_msg_destroy(v7);
LABEL_18:
    CFAllocatorDeallocate(0, v7);
  }

  CFRelease(cf);
}

uint64_t sub_1000C20C8(uint64_t a1)
{
  uint64_t result = dispatch_mach_create_f();
  *(void *)(a1 + 72) = result;
  if (result)
  {
    return dispatch_mach_connect();
  }
  return result;
}

uint64_t sub_1000C2138(uint64_t result)
{
  if (result)
  {
    uint64_t result = *(void *)(result + 72);
    if (result) {
      return dispatch_mach_cancel();
    }
  }
  return result;
}

void sub_1000C214C(uint64_t a1, CFRunLoopRef rl, CFRunLoopMode mode)
{
  *(void *)(a1 + 32) = rl;
  *(void *)(a1 + 40) = mode;
  CFRunLoopSourceRef RunLoopSource = *(__CFRunLoopSource **)(a1 + 48);
  if (RunLoopSource
    || (CFRunLoopSourceRef RunLoopSource = CFMachPortCreateRunLoopSource(kCFAllocatorDefault, *(CFMachPortRef *)(a1 + 56), 1),
        (*(void *)(a1 + 48) = RunLoopSource) != 0))
  {
    CFRunLoopAddSource(rl, RunLoopSource, mode);
  }
}

void sub_1000C21D4(uint64_t a1, __CFRunLoop *cf1, const __CFString *a3)
{
  if (cf1)
  {
    if (a3)
    {
      int v7 = (void *)(a1 + 32);
      uint64_t v6 = *(const void **)(a1 + 32);
      if (v6)
      {
        if (*(void *)(a1 + 40))
        {
          if (CFEqual(cf1, v6))
          {
            if (CFEqual(a3, *(CFTypeRef *)(a1 + 40)))
            {
              void *v7 = 0;
              v7[1] = 0;
              uint64_t v8 = *(__CFRunLoopSource **)(a1 + 48);
              if (v8)
              {
                CFRunLoopRemoveSource(cf1, v8, a3);
                uint64_t v9 = *(const void **)(a1 + 48);
                if (v9)
                {
                  CFRelease(v9);
                  *(void *)(a1 + 48) = 0;
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1000C2268(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 80) = a2;
  *(void *)(result + 88) = a3;
  return result;
}

uint64_t sub_1000C2270(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 96) = a2;
  *(void *)(result + 104) = a3;
  return result;
}

uint64_t sub_1000C2278(unsigned int a1, const void *a2)
{
  pthread_mutex_lock(&stru_10027CB50);
  if (qword_10027D700) {
    CFDictionarySetValue((CFMutableDictionaryRef)qword_10027D700, (const void *)a1, a2);
  }

  return pthread_mutex_unlock(&stru_10027CB50);
}

uint64_t sub_1000C22D8(unsigned int a1)
{
  pthread_mutex_lock(&stru_10027CB50);
  if (qword_10027D700) {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10027D700, (const void *)a1);
  }

  return pthread_mutex_unlock(&stru_10027CB50);
}

void sub_1000C2330(uint64_t a1)
{
  id v2 = *(__CFMachPort **)(a1 + 56);
  if (v2)
  {
    CFMachPortInvalidate(v2);
    uint64_t v3 = *(const void **)(a1 + 56);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 56) = 0;
    }
  }
  uint64_t v4 = *(const void **)(a1 + 48);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 48) = 0;
  }
}

void sub_1000C2678(id a1, id a2, unint64_t a3, BOOL *a4)
{
  if (a2) {
    dispatch_source_cancel((dispatch_source_t)a2);
  }
}

void sub_1000C2748(uint64_t a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:4, @"Received signal %d", *(unsigned int *)(a1 + 48)];
  }
  if (*(_DWORD *)(a1 + 48) == 15)
  {
    uint64_t v3 = (void *)MGCopyAnswerWithError();
    uint64_t v4 = v3;
    if (v3 && [v3 count])
    {
      sub_10008CB00(*(void *)(*(void *)(a1 + 32) + 8), 0, @"LPEM");
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v6 = "-[WiFiManagerLifeCycle handleSignal:onQueue:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: LPEM mode not supported. Not powering off on SIGTERM", buf, 0xCu);
    }
  }
  sub_100004058(*(void *)(*(void *)(a1 + 32) + 8), 1, 1, 0);
  sub_1000A6B7C(*(void *)(*(void *)(a1 + 32) + 8), 1, 0);
  [*(id *)(a1 + 32) stopOnQueue:*(void *)(a1 + 40)];
  exit(*(_DWORD *)(a1 + 48));
}

uint64_t start()
{
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x3052000000;
  void v13[3] = sub_100022CE8;
  v13[4] = sub_100022BF4;
  v13[5] = 0;
  if ((_set_user_dir_suffix() & 1) == 0 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_100196798();
  }
  NSTemporaryDirectory();
  +[NSError _setFileNameLocalizationEnabled:0];
  uint64_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  qword_10027DD98 = (uint64_t)dispatch_queue_create("com.apple.wifid.managerQueue", v1);
  if (!qword_10027DD98) {
    goto LABEL_29;
  }
  if (&_wd_endpoint_register)
  {
    wd_endpoint_register();
    wd_endpoint_add_queue();
    wd_endpoint_activate();
  }
  id v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  qword_10027DD88 = (uint64_t)dispatch_queue_create("com.apple.wifid.serialQueue", v2);
  if (qword_10027DD88
    && (uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM),
        (qword_10027DD90 = (uint64_t)dispatch_queue_create("com.apple.wifi.network-sync", v3)) != 0))
  {
    CFLocaleRef v4 = CFLocaleCopyCurrent();
    id v5 = CFDateFormatterCreate(0, v4, kCFDateFormatterShortStyle, kCFDateFormatterMediumStyle);
    qword_10027DDA0 = (uint64_t)v5;
    if (v5) {
      CFDateFormatterSetFormat(v5, @"MM/dd/yy HH:mm:ss.SSS");
    }
    if (v4) {
      CFRelease(v4);
    }
    pthread_mutex_init(&stru_10027CB90, 0);
    pthread_mutex_init(&stru_10027CBD0, 0);
    byte_10027DDA8 = os_variant_is_darwinos();
    if (objc_opt_class()) {
      byte_10027DDA9 = [[+[LockdownModeManager shared](LockdownModeManager, "shared") enabled];
    }
    if (objc_opt_class())
    {
      uint64_t v12 = 0;
      byte_10027DDAA = [+[MSDKDemoState sharedInstance] isStoreDemoModeEnabled:&v12];
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000C2C20;
    block[3] = &unk_100240920;
    block[4] = v13;
    dispatch_async((dispatch_queue_t)qword_10027DD98, block);
    int v6 = 1;
  }
  else
  {
LABEL_29:
    int v6 = 0;
  }
  if (v6)
  {
    [+[NSRunLoop mainRunLoop] run];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1000C2C7C;
    _OWORD v10[3] = &unk_100240920;
    v10[4] = v13;
    dispatch_async((dispatch_queue_t)qword_10027DD98, v10);
  }
  if (qword_10027DDA0)
  {
    CFRelease((CFTypeRef)qword_10027DDA0);
    qword_10027DDA0 = 0;
  }
  if (qword_10027DD88)
  {
    dispatch_release((dispatch_object_t)qword_10027DD88);
    qword_10027DD88 = 0;
  }
  if (qword_10027DD90)
  {
    dispatch_release((dispatch_object_t)qword_10027DD90);
    qword_10027DD90 = 0;
  }
  if (qword_10027DD98)
  {
    dispatch_release((dispatch_object_t)qword_10027DD98);
    qword_10027DD98 = 0;
  }
  _Block_object_dispose(v13, 8);
  return 0;
}

void sub_1000C2C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000C2C20(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = objc_alloc_init(WiFiManagerLifeCycle);
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v3 = qword_10027DD98;

  return [v2 startOnQueue:v3];
}

void sub_1000C2C7C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = 0;
}

uint64_t sub_1000C2CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!qword_10027D708) {
    pthread_once(&stru_10027CC10, (void (*)(void))sub_1000C316C);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 72) = 850045863;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 112) = 0u;
  *(void *)(Instance + 128) = 0;
  int v6 = (char *)malloc_type_malloc(a3 * a2, 0x79B6E5A0uLL);
  *(void *)(Instance + 40) = v6;
  if (v6)
  {
    *(void *)(Instance + 56) = v6;
    *(void *)(Instance + 64) = v6;
    *(void *)(Instance + 48) = &v6[a3 * a2];
    *(void *)(Instance + 16) = a2;
    *(void *)(Instance + 24) = 0;
    *(void *)(Instance + 32) = a3;
    *(unsigned char *)(Instance + 136) = 0;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s allocation error (likely OOM)", @"WiFiCircularBufferCreate"];
    }
    CFRelease((CFTypeRef)Instance);
    return 0;
  }
  return Instance;
}

uint64_t sub_1000C2DE8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1000C2DF0(uint64_t a1, const void *a2)
{
  CFLocaleRef v4 = (pthread_mutex_t *)(a1 + 72);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
  memcpy(*(void **)(a1 + 56), a2, *(void *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56) + *(void *)(a1 + 32);
  *(void *)(a1 + 56) = v6;
  if (v6 == v5) {
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
  }
  unint64_t v7 = *(void *)(a1 + 24);
  if (v7 < *(void *)(a1 + 16)) {
    *(void *)(a1 + 24) = v7 + 1;
  }

  return pthread_mutex_unlock(v4);
}

uint64_t sub_1000C2E80(uint64_t a1, void *a2)
{
  CFLocaleRef v4 = (pthread_mutex_t *)(a1 + 72);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
  sub_1000C2ED8(a1, a2);

  return pthread_mutex_unlock(v4);
}

void *sub_1000C2ED8(uint64_t a1, void *__dst)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t result = memcpy(__dst, *(const void **)(a1 + 64), *(void *)(a1 + 32));
    uint64_t v4 = *(void *)(a1 + 64) + *(void *)(a1 + 32);
    *(void *)(a1 + 64) = v4;
    if (v4 == *(void *)(a1 + 48)) {
      *(void *)(a1 + 64) = *(void *)(a1 + 40);
    }
    --*(void *)(a1 + 24);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s when empty" args:__WiFiCircularBufferGet];
    }
    return (void *)pthread_mutex_unlock((pthread_mutex_t *)(a1 + 72));
  }
  return result;
}

void sub_1000C2FAC(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    sub_1000C2ED8(a1, a2);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s write locked not locked", "WiFiCircularBufferWriteLockedGet")];
    }
  }
}

void sub_1000C3040(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s write lock already locked" :@"WiFiCircularBufferTakeWriteLock"];
    }
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
    *(unsigned char *)(a1 + 136) = 1;
  }
}

void sub_1000C30D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 72));
    *(unsigned char *)(a1 + 136) = 0;
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s write lock not locked", "WiFiCircularBufferReleaseWriteLock")];
    }
  }
}

uint64_t sub_1000C316C()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_10027D708 = result;
  return result;
}

void sub_1000C3194(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  free(*(void **)(a1 + 40));
}

void sub_1000C3B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000C3B50(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = [WeakRetained cachedBudget];

  return v2;
}

void sub_1000C3DD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = WeakRetained;
  id v6 = WeakRetained[1];
  if (v6)
  {
    [WeakRetained[5] acknowledgePowerBudget:v3 forClientId:WeakRetained[18] error:0];
    uint64_t v17 = 0;
    id v18 = &v17;
    uint64_t v19 = 0x2020000000;
    id v20 = (id)0xAAAAAAAAAAAAAAAALL;
    id v20 = [v5 WiFiBatteryManagerHandleCpmsAllocatedBudgetReturnIndex:v3];
    uint64_t v7 = sub_100016E18((uint64_t)v6);
    uint64_t v8 = sub_1000704E8(v7);
    uint64_t v9 = v18[3];
    if (v9 == v8)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFiBatteryMgmt :  Budget to be written is %lu, last was %lu : ignoring", "-[WiFiBatteryManager WiFiBatteryManagerCpmsCallbackConfiguration:]_block_invoke", v18[3], v8)];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFiBatteryMgmt :  Budget to be written is %lu (last was %lu) !", "-[WiFiBatteryManager WiFiBatteryManagerCpmsCallbackConfiguration:]_block_invoke", v18[3], v8)];
      }
      NDR_record_t v11 = sub_100117968((uint64_t)v6);

      if (v11)
      {
        CFRetain(v6);
        uint64_t v12 = sub_100117968((uint64_t)v6);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000C4010;
        block[3] = &unk_100241168;
        uint64_t v15 = &v17;
        id v16 = v6;
        uint64_t v14 = v5;
        dispatch_async(v12, block);

LABEL_12:
        _Block_object_dispose(&v17, 8);
        goto LABEL_13;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: null manager queue.", "-[WiFiBatteryManager WiFiBatteryManagerCpmsCallbackConfiguration:]_block_invoke"];
      }
    }
    goto LABEL_12;
  }
LABEL_13:
}

void sub_1000C3FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000C4010(uint64_t a1)
{
  id v2 = sub_100117968(*(void *)(a1 + 48));

  if (v2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:@"%s: WiFiBatteryMgmt :  Async CPMS Handler " message:3];
    }
    uint64_t v4 = sub_100016E18(*(void *)(a1 + 48));
    int v5 = sub_100070214(v4, *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
    if (!v5) {
      goto LABEL_8;
    }
    int v6 = v5;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFiBatteryMgmt : Unable to set the Async budget value to FW ", "-[WiFiBatteryManager WiFiBatteryManagerCpmsCallbackConfiguration:]_block_invoke_2")];
    }
    if (v6 != 82) {
LABEL_8:
    }
      [*(id *)(a1 + 32) WiFiBatteryManagerHandlePowerAdmissionResponse:*(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null manager queue.", @"-[WiFiBatteryManager WiFiBatteryManagerCpmsCallbackConfiguration:]_block_invoke_2"];
    }
  }
  uint64_t v8 = *(const void **)(a1 + 48);

  CFRelease(v8);
}

void sub_1000C426C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v5 = (const void *)WeakRetained[1];
  int v6 = +[NSDate date];
  uint64_t v7 = [WeakRetained asyncPPMBudgetTimestamp];
  [v6 timeIntervalSinceDate:v7];
  double v9 = v8;

  if (v5)
  {
    uint64_t v10 = sub_100117968((uint64_t)v5);

    if (v10)
    {
      if (v3)
      {
        CFDictionaryRef v11 = (const __CFDictionary *)[v3 objectForKey:@"CDResourceAvailabilityKeyRetryReason"];
        if (v11)
        {
          uint64_t v22 = 0;
          id v23 = &v22;
          uint64_t v24 = 0x2020000000;
          unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v11, @"com.apple.duet.ppm-bgt.wifi");
          if (Value && v9 >= 5.0)
          {
            [WeakRetained setAsyncPPMBudgetTimestamp:v6];
            CFNumberGetValue(Value, kCFNumberLongLongType, v23 + 3);
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:3, @"WiFiBatteryMgmt called back received wifibudget is %llu", v23[3]];
            }
            uint64_t v14 = [WeakRetained cachedBudget];
            uint64_t v15 = +[NSNumber numberWithLongLong:v23[3]];
            [v14 setObject:v15 forKey:@"kCPMSPowerLegacyPPM"];

            CFRetain(v5);
            id v16 = sub_100117968((uint64_t)v5);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_1000C4504;
            block[3] = &unk_100241168;
            id v20 = &v22;
            uint64_t v21 = v5;
            uint64_t v19 = WeakRetained;
            dispatch_async(v16, block);
          }
          _Block_object_dispose(&v22, 8);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null manager queue.", "-[WiFiBatteryManager WiFiBatteryManagerPpmCallbackConfiguration:]_block_invoke")];
      }
    }
  }
}

void sub_1000C44EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000C4504(uint64_t a1)
{
  id v2 = sub_100117968(*(void *)(a1 + 48));

  if (v2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFiBatteryMgmt :  Async PPM Handler ", "-[WiFiBatteryManager WiFiBatteryManagerPpmCallbackConfiguration:]_block_invoke_2")];
    }
    uint64_t v4 = sub_100016E18(*(void *)(a1 + 48));
    sub_100070214(v4, *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
    [*(id *)(a1 + 32) WiFiBatteryManagerHandlePowerAdmissionResponse:*(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:@"%s: null manager queue." message:3];
    }
  }
  int v5 = *(const void **)(a1 + 48);

  CFRelease(v5);
}

void sub_1000C45F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = (uint64_t *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = WeakRetained;
  double v8 = (const void *)WeakRetained[1];
  if (v8)
  {
    double v9 = sub_100117968(WeakRetained[1]);

    if (v9)
    {
      if (a2 != 2)
      {
        CFRetain(v8);
        uint64_t v10 = sub_100117968((uint64_t)v8);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000C4734;
        block[3] = &unk_1002411B8;
        uint64_t v14 = v8;
        mach_msg_option_t v13 = v7;
        uint64_t v15 = a2;
        dispatch_async(v10, block);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: null manager queue.", @"-[WiFiBatteryManager WiFiBatteryManagerPpmCallbackConfiguration:]_block_invoke_3"];
      }
    }
  }
}

void sub_1000C4734(uint64_t a1)
{
  id v2 = sub_100117968(*(void *)(a1 + 40));

  if (v2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s:WiFiBatteryMgmt : PPM Admission Handler", "-[WiFiBatteryManager WiFiBatteryManagerPpmCallbackConfiguration:]_block_invoke_4")];
    }
    if (*(void *)(a1 + 48) == 1) {
      uint64_t v4 = 100;
    }
    else {
      uint64_t v4 = 0;
    }
    [*(id *)(a1 + 32) WiFiBatteryManagerHandlePowerAdmissionResponse:v4];
  }
  else
  {
    if (qword_10027DD68) {
      [[(id)qword_10027DD68 WFLog:@"%s: null manager queue." message:3];
    }
  }
  id v5 = *(const void **)(a1 + 40);

  CFRelease(v5);
}

uint64_t sub_1000C5C14()
{
  uint64_t result = qword_10027D710;
  if (!qword_10027D710)
  {
    pthread_once(&stru_10027CCA8, (void (*)(void))sub_1000C5C5C);
    return qword_10027D710;
  }
  return result;
}

CFSetRef sub_1000C5C5C()
{
  qword_10027D710 = _CFRuntimeRegisterClass();
  *(_OWORD *)values = *(_OWORD *)&off_100241260;
  long long v3 = *(_OWORD *)&off_100241270;
  CFStringRef v4 = @"AcceptEAPTypes";
  qword_10027D718 = (uint64_t)CFArrayCreate(kCFAllocatorDefault, (const void **)values, 5, &kCFTypeArrayCallBacks);
  v1[0] = *(_OWORD *)&off_100241288;
  v1[1] = *(_OWORD *)&off_100241298;
  CFSetRef result = CFSetCreate(kCFAllocatorDefault, (const void **)v1, 4, &kCFTypeSetCallBacks);
  qword_10027D720 = (uint64_t)result;
  return result;
}

_WORD *sub_1000C5D34(const __CFString *a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: null ssid", "WiFiNetworkCreateWithSsid"];
    }
    goto LABEL_13;
  }
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: null networkRecord", "WiFiNetworkCreateWithSsid"];
    }
LABEL_13:
    return 0;
  }
  long long v3 = Mutable;
  CFDictionarySetValue(Mutable, @"SSID_STR", a1);
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(kCFAllocatorDefault, a1, 0x8000100u, 0);
  if (ExternalRepresentation)
  {
    CFDataRef v5 = ExternalRepresentation;
    CFDictionarySetValue(v3, @"SSID", ExternalRepresentation);
    CFRelease(v5);
  }
  __int16 valuePtr = 2;
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
  if (v6)
  {
    CFNumberRef v7 = v6;
    CFDictionarySetValue(v3, @"AP_MODE", v6);
    CFRelease(v7);
  }
  double v8 = sub_100019658((int)kCFAllocatorDefault, v3);
  CFRelease(v3);
  return v8;
}

CFMutableDictionaryRef sub_1000C5EB0(uint64_t a1)
{
  return CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, *(CFDictionaryRef *)(a1 + 16));
}

CFDictionaryRef sub_1000C5ECC(uint64_t a1)
{
  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, *(CFDictionaryRef *)(a1 + 16));
  CFDictionaryRef v2 = MutableCopy;
  if (MutableCopy)
  {
    if (!CFDictionaryGetValue(MutableCopy, @"SSID_STR"))
    {
      CFDictionaryRef v5 = v2;
      CFDictionaryRef v2 = 0;
LABEL_10:
      CFRelease(v5);
      return v2;
    }
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v2, @"EnterpriseProfile");
    if (Value)
    {
      CFDictionaryRef v4 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, Value);
      if (v4)
      {
        CFDictionaryRef v5 = v4;
        CFDictionaryRef v6 = (const __CFDictionary *)CFDictionaryGetValue(v4, @"EAPClientConfiguration");
        if (v6)
        {
          CFNumberRef v7 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v6);
          if (v7)
          {
            double v8 = v7;
            CFDictionaryRemoveValue(v7, @"UserPassword");
            CFDictionaryRemoveValue(v8, @"TLSSaveTrustExceptions");
            CFDictionaryRemoveValue(v8, @"TLSUserTrustProceedCertificateChain");
            CFDictionarySetValue(v5, @"EAPClientConfiguration", v8);
            CFRelease(v8);
          }
        }
        CFDictionarySetValue(v2, @"EnterpriseProfile", v5);
        goto LABEL_10;
      }
    }
  }
  return v2;
}

CFDictionaryRef sub_1000C5FF4(CFDictionaryRef *a1, const void *a2)
{
  CFDictionaryRef v4 = (const __CFDictionary *)sub_10001E404((uint64_t)a1, @"EnterpriseProfile");
  if (!v4) {
    return 0;
  }
  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v4);
  CFDictionaryRef v6 = MutableCopy;
  if (MutableCopy)
  {
    CFDictionarySetValue(MutableCopy, @"EnableUserInterface", kCFBooleanFalse);
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v6, @"EAPClientConfiguration");
    if (Value)
    {
      double v8 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, Value);
      if (v8)
      {
        double v9 = v8;
        if (a2)
        {
          CFDictionarySetValue(v8, @"UserPassword", a2);
LABEL_23:
          CFDictionarySetValue(v6, @"EAPClientConfiguration", v9);
          CFRelease(v9);
          return v6;
        }
        if (sub_10001BB2C((BOOL)a1))
        {
          CFStringRef v10 = sub_1000C621C((uint64_t)a1);
          if (qword_10027DD68)
          {
            uint64_t v12 = "non-null";
            if (!v10) {
              uint64_t v12 = "null";
            }
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: __WiFiNetworkCopyPasswordForAccount() returned a %s password", "WiFiNetworkCopyPreparedEAPProfile", v12);
          }
          if (!v10)
          {
            CFStringRef v10 = sub_1000C62C8(a1);
            if (!v10)
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:3, "%s: Password for EAP profile NULL after fetch by account name and normal method, attempting password fetch by domain name ", "WiFiNetworkCopyPreparedEAPProfile"];
              }
              CFStringRef v10 = sub_1000C63BC((uint64_t)a1);
              if (!v10)
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:3, "%s: Password for EAP profile still NULL after attempted fetch by domain name", "WiFiNetworkCopyPreparedEAPProfile"];
                }
                goto LABEL_23;
              }
            }
          }
        }
        else
        {
          CFStringRef v10 = sub_1000C62C8(a1);
          if (!v10) {
            goto LABEL_23;
          }
        }
        CFDictionarySetValue(v9, @"UserPassword", v10);
        CFRelease(v10);
        goto LABEL_23;
      }
    }
  }
  return v6;
}

CFStringRef sub_1000C621C(uint64_t a1)
{
  uint64_t v1 = (__CFString *)sub_10001E404(a1, @"HS20AccountName");
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: HS 2.0 account name from WiFiNetworkGetProperty() is %@", "__WiFiNetworkCopyPasswordForAccount", v1 message];
  }
  if (!v1 || CFStringGetLength(v1) < 1) {
    return 0;
  }

  return sub_1000DBC0C(v1);
}

CFStringRef sub_1000C62C8(CFDictionaryRef *a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    CFDictionaryRef v6 = "WiFiNetworkCopyPassword";
    __int16 v7 = 2112;
    CFStringRef v8 = sub_1000C6758(a1);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s: Copy password for Network %@", (uint8_t *)&v5, 0x16u);
  }
  if (!a1
    || !CFDictionaryContainsKey(a1[2], @"PayloadUUID")
    || (v2 = sub_1000C6758(a1), (CFStringRef result = sub_1000DD344(v2)) == 0))
  {
    CFDictionaryRef v4 = (__CFString *)sub_1000C6758(a1);
    return sub_1000DBC0C(v4);
  }
  return result;
}

__CFString *sub_1000C63BC(uint64_t a1)
{
  CFStringRef result = (__CFString *)sub_10001E404(a1, @"DomainName");
  if (result)
  {
    return (__CFString *)sub_1000DBC0C(result);
  }
  return result;
}

void sub_1000C63FC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"WEP") == kCFBooleanTrue)
    {
      CFDictionaryRef v4 = sub_10001E404(a2, @"WEP_AUTH_Flags");
      if (v4) {
        sub_10001C6A4(a1, @"WEP_AUTH_Flags", v4);
      }
    }
  }
  if (sub_10001FC1C(a2))
  {
    int v5 = sub_10001E404(a2, @"EnterpriseProfile");
    if (v5) {
      sub_10001C6A4(a1, @"EnterpriseProfile", v5);
    }
  }
  if (a2 && CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 16), @"DomainName") && sub_10001BB2C(a1))
  {
    CFDictionaryRef v6 = sub_10001E404(a2, @"DisplayedOperatorName");
    if (v6) {
      sub_10001C6A4(a1, @"HS2NetworkBadge", v6);
    }
    __int16 v7 = sub_10001E404(a2, @"HS20AccountName");
    if (v7 || (__int16 v7 = sub_10001A43C((const void *)a2)) != 0)
    {
      sub_10001C6A4(a1, @"HS20AccountName", v7);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Setting HS 2.0 account name to %@ for network %@", "WiFiNetworkMergeForAssociation", v7, sub_1000C6758((const void *)a1) message];
      }
    }
  }
  double v9 = sub_10001E404(a2, @"TransitionDisabledFlags");
  if (v9) {
    sub_10001C6A4(a1, @"TransitionDisabledFlags", v9);
  }
  CFStringRef v10 = (void *)CWFCoreWiFiSpecificAttributesKey;
  CFDictionaryRef v11 = sub_10001E404(a2, CWFCoreWiFiSpecificAttributesKey);
  if (v11) {
    sub_10001C6A4(a1, v10, v11);
  }
  uint64_t v12 = sub_10001E404(a2, @"PolicyUUID");
  if (v12) {
    sub_10001C6A4(a1, @"PolicyUUID", v12);
  }
  mach_msg_option_t v13 = sub_10001E404(a2, @"PayloadUUID");
  if (v13) {
    sub_10001C6A4(a1, @"PayloadUUID", v13);
  }
  sub_1000C67C8((const void *)a1, a2);
  if (&_CNForgetSSID)
  {
    uint64_t v14 = (void *)kCNSCaptiveNetworkProperty;
    uint64_t v15 = sub_10001E404(a2, kCNSCaptiveNetworkProperty);
    sub_10001C6A4(a1, v14, v15);
  }
  id v16 = sub_10001E404(a2, @"WiFiNetworkUserAcceptedRecommendationAt");
  sub_10001C6A4(a1, @"WiFiNetworkUserAcceptedRecommendationAt", v16);
  if (*(__int16 *)(a1 + 24) == -1)
  {
    int v17 = *(unsigned __int16 *)(a2 + 24);
    if (v17 != 0xFFFF) {
      *(_WORD *)(a1 + 24) = v17;
    }
  }
}

BOOL sub_1000C66D0(BOOL result)
{
  if (result) {
    return CFDictionaryGetValue(*(CFDictionaryRef *)(result + 16), @"WEP") == kCFBooleanTrue;
  }
  return result;
}

BOOL sub_1000C6710(BOOL result)
{
  if (result) {
    return CFDictionaryGetValue(*(CFDictionaryRef *)(result + 16), @"DomainName") != 0;
  }
  return result;
}

void sub_1000C6748(uint64_t a1, const void *a2)
{
}

CFStringRef sub_1000C6758(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFStringRef v2 = (const __CFString *)sub_10001A43C(a1);
  CFStringRef v3 = v2;
  if ((!v2 || !CFStringGetLength(v2)) && sub_10001BB2C((BOOL)a1))
  {
    CFDictionaryRef v4 = sub_10001E404((uint64_t)a1, @"DomainName");
    if (v4) {
      return (const __CFString *)v4;
    }
  }
  return v3;
}

void sub_1000C67C8(const void *a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null destNetwork", "WiFiNetworkMergeAutoJoinProperties", v12, v13);
    }
    goto LABEL_10;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null srcNetwork", "WiFiNetworkMergeAutoJoinProperties", v12, v13);
    }
    goto LABEL_10;
  }
  sub_1000CFCB4((uint64_t)a1);
  BOOL v4 = sub_10001EBB4(a2);
  sub_1000C96AC((uint64_t)a1, v4);
  if (!v4)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: preserving all AJ-disabled-related properties for network %@", "WiFiNetworkMergeAutoJoinProperties", sub_10001A43C(a1) message];
    }
    CFDictionaryRef v6 = sub_10001E404(a2, @"networkDisabledClientName");
    sub_10001C6A4((uint64_t)a1, @"networkDisabledClientName", v6);
    __int16 v7 = sub_10001E404(a2, @"networkDisabledReason");
    sub_10001C6A4((uint64_t)a1, @"networkDisabledReason", v7);
    CFStringRef v8 = sub_10001E404(a2, @"networkDisabledTimestamp");
    sub_10001C6A4((uint64_t)a1, @"networkDisabledTimestamp", v8);
    double v9 = sub_10001E404(a2, @"WiFiNetworkDisabledUntilDate");
    if (v9)
    {
      CFStringRef v10 = v9;
      sub_10001C6A4((uint64_t)a1, @"WiFiNetworkDisabledUntilDate", v9);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: preserved disabledUntil for %@ network with %@", "WiFiNetworkMergeAutoJoinProperties", sub_10001A43C(a1), v10 message];
      }
LABEL_10:
    }
  }
}

CFDictionaryRef sub_1000C69D0(CFDictionaryRef result, CFDictionaryRef theDict)
{
  if (result)
  {
    CFDictionaryRef v3 = result;
    if (theDict && (Count = CFDictionaryGetCount(theDict), (uint64_t v5 = Count) != 0))
    {
      size_t v6 = 8 * Count;
      __int16 v7 = (const void **)malloc_type_malloc(v6, 0x6004044C4A2DFuLL);
      CFStringRef v8 = (const void **)malloc_type_malloc(v6, 0xC0040B8AA526DuLL);
      CFAllocatorRef Default = CFAllocatorGetDefault();
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(Default, 0, v3);
      CFDictionaryGetKeysAndValues(theDict, v7, v8);
      unint64_t v11 = 0;
      uint64_t v12 = 8 * v5;
      do
      {
        CFDictionaryGetValueIfPresent(MutableCopy, v7[v11 / 8], 0);
        CFDictionaryAddValue(MutableCopy, v7[v11 / 8], v8[v11 / 8]);
        v11 += 8;
      }
      while (v12 != v11);
      free(v8);
      free(v7);
      CFAllocatorRef v13 = CFAllocatorGetDefault();
      CFDictionaryRef Copy = CFDictionaryCreateCopy(v13, MutableCopy);
      CFRelease(MutableCopy);
      return Copy;
    }
    else
    {
      CFAllocatorRef v15 = CFAllocatorGetDefault();
      return CFDictionaryCreateCopy(v15, v3);
    }
  }
  return result;
}

CFNumberRef sub_1000C6B08(uint64_t a1)
{
  unsigned int valuePtr = 0;
  if (a1)
  {
    CFNumberRef result = (const __CFNumber *)sub_10001E404(a1, @"NetworkOfInterestHomeState");
    if (result)
    {
      int Value = CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr - 3 >= 0xFFFFFFFE || Value == 0) {
        return (const __CFNumber *)valuePtr;
      }
      else {
        return 0;
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkGetNetworkOfInterestHomeType")];
    }
    return 0;
  }
  return result;
}

CFDictionaryRef sub_1000C6BAC(const __CFDictionary *result)
{
  if (result)
  {
    CFDictionaryRef v1 = result;
    CFNumberRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"SSID_STR");
    if (!result)
    {
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v1, @"SSID");
      if (Value
        && ((CFDataRef v3 = Value, (v4 = CFStringCreateFromExternalRepresentation(kCFAllocatorDefault, Value, 0x8000100u)) != 0)
         || (CFStringRef v4 = CFStringCreateFromExternalRepresentation(kCFAllocatorDefault, v3, 0)) != 0)
        || (CFStringRef v4 = CFStringCreateWithCString(kCFAllocatorDefault, "", 0x8000100u)) != 0)
      {
        CFDictionarySetValue(v1, @"SSID_STR", v4);
        CFRelease(v4);
      }
      return (const __CFDictionary *)CFDictionaryGetValue(v1, @"SSID_STR");
    }
  }
  return result;
}

CFDataRef sub_1000C6CA8(uint64_t a1)
{
  CFDataRef result = (CFDataRef)sub_10001E404(a1, @"BSSID");
  if (result)
  {
    CFStringRef v2 = (const __CFString *)result;
    CFTypeID v3 = CFGetTypeID(result);
    if (v3 == CFStringGetTypeID()
      && (uint64_t v4 = 0, v5[0] = 0, *(_DWORD *)((char *)v5 + 7) = 0, CFStringGetCString(v2, (char *)&v4, 19, 0x8000100u)))
    {
      CFDataRef result = (CFDataRef)ether_aton((const char *)&v4);
      if (result) {
        return CFDataCreate(kCFAllocatorDefault, (const UInt8 *)result, 6);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFArrayRef sub_1000C6D70(const __CFArray *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    CFDataRef result = (const __CFArray *)sub_10001E404((uint64_t)result, @"BSSID");
    if (!result)
    {
      CFDataRef result = (const __CFArray *)sub_10001E404(v1, @"networkKnownBSSListKey");
      if (result)
      {
        CFArrayRef v2 = result;
        CFDataRef result = (const __CFArray *)CFArrayGetCount(result);
        if (result)
        {
          CFIndex Count = CFArrayGetCount(v2);
          CFDataRef result = (const __CFArray *)CFArrayGetValueAtIndex(v2, Count - 1);
          if (result)
          {
            return (const __CFArray *)CFDictionaryGetValue(result, @"BSSID");
          }
        }
      }
    }
  }
  return result;
}

const void *sub_1000C6E00(const void *result)
{
  if (result) {
    return sub_10001E404((uint64_t)result, @"SCAN_BSSID_LIST");
  }
  return result;
}

CFArrayRef sub_1000C6E14(const __CFArray *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    CFDataRef result = (const __CFArray *)sub_10001E404((uint64_t)result, @"CHANNEL");
    if (!result)
    {
      CFDataRef result = (const __CFArray *)sub_10001E404(v1, @"networkKnownBSSListKey");
      if (result)
      {
        CFArrayRef v2 = result;
        CFDataRef result = (const __CFArray *)CFArrayGetCount(result);
        if (result)
        {
          CFIndex Count = CFArrayGetCount(v2);
          CFDataRef result = (const __CFArray *)CFArrayGetValueAtIndex(v2, Count - 1);
          if (result)
          {
            return (const __CFArray *)CFDictionaryGetValue(result, @"CHANNEL");
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000C6EA4(uint64_t a1, void *a2, void *a3)
{
  *a3 = 0xFFFFFFFF80000000;
  *a2 = 37;
  uint64_t result = (uint64_t)sub_10001E404(a1, @"RATES");
  if (result)
  {
    CFArrayRef v6 = (const __CFArray *)result;
    uint64_t result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      uint64_t v7 = result;
      for (CFIndex i = 0; i != v7; ++i)
      {
        uint64_t result = (uint64_t)CFArrayGetValueAtIndex(v6, i);
        int valuePtr = -1431655766;
        if (result)
        {
          double v9 = (const void *)result;
          CFTypeID TypeID = CFNumberGetTypeID();
          uint64_t result = CFGetTypeID(v9);
          if (TypeID == result)
          {
            uint64_t result = CFNumberGetValue((CFNumberRef)v9, kCFNumberIntType, &valuePtr);
            uint64_t v11 = valuePtr;
            if (*a3 < valuePtr) {
              *a3 = valuePtr;
            }
            if (*a2 > v11) {
              *a2 = v11;
            }
          }
        }
      }
    }
  }
  return result;
}

CFNumberRef sub_1000C6F94(const __CFNumber *result)
{
  if (result)
  {
    CFNumberRef v1 = (const __CFNumber *)sub_10001E404((uint64_t)result, @"RSSI");
    return sub_10001EACC(v1);
  }
  return result;
}

CFNumberRef sub_1000C6FC0(uint64_t a1, void *a2)
{
  CFNumberRef v2 = (const __CFNumber *)sub_10001E404(a1, a2);

  return sub_10001EACC(v2);
}

CFDictionaryRef sub_1000C6FE8(const __CFDictionary *result)
{
  if (result) {
    return sub_10001B168(*((const __CFDictionary **)result + 2));
  }
  return result;
}

void sub_1000C6FF8(int a1, int a2, int a3)
{
  if (a2)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    values = Mutable;
    if (Mutable)
    {
      CFArrayRef v6 = Mutable;
      uint64_t valuePtr = 8;
      CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
      if (v7)
      {
        CFNumberRef v8 = v7;
        CFArrayAppendValue(v6, v7);
        CFRelease(v8);
      }
      if (a3)
      {
        uint64_t valuePtr = 2;
        CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
        if (v9)
        {
          CFNumberRef v10 = v9;
          CFArrayAppendValue(v6, v9);
          CFRelease(v10);
        }
      }
      else
      {
        sub_10001C6A4(a1, @"ALLOW_WPA2_PSK");
      }
      keys = @"IE_KEY_RSN_AUTHSELS";
      CFDictionaryRef v11 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (v11)
      {
        CFDictionaryRef v12 = v11;
        sub_10001C6A4(a1, @"RSN_IE");
        CFRelease(v12);
      }
      CFRelease(values);
    }
  }
  else
  {
    sub_10001C6A4(a1, @"RSN_IE");
  }
}

void sub_1000C7184(uint64_t a1, int a2)
{
  int v2 = a1;
  if (a2)
  {
    uint64_t v3 = 2 * (sub_10001E404(a1, @"EnterpriseProfile") == 0);
    uint64_t valuePtr = v3;
    values = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
    if (values)
    {
      CFTypeRef cf = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
      if (cf)
      {
        CFStringRef v8 = @"IE_KEY_RSN_AUTHSELS";
        CFDictionaryRef v4 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&v8, &cf, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (v4)
        {
          CFDictionaryRef v5 = v4;
          sub_10001C6A4(v2, @"RSN_IE");
          CFRelease(v5);
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
      }
      if (values)
      {
        CFRelease(values);
        values = 0;
      }
    }
    uint64_t valuePtr = v3;
    values = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
    if (values)
    {
      CFTypeRef cf = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
      if (cf)
      {
        CFStringRef v8 = @"IE_KEY_WPA_AUTHSELS";
        CFDictionaryRef v6 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&v8, &cf, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (v6)
        {
          CFDictionaryRef v7 = v6;
          sub_10001C6A4(v2, @"WPA_IE");
          CFRelease(v7);
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
      }
      if (values) {
        CFRelease(values);
      }
    }
  }
  else
  {
    sub_10001C6A4(a1, @"RSN_IE");
    sub_10001C6A4(v2, @"WPA_IE");
  }
}

double sub_1000C7388(uint64_t a1, void *a2)
{
  int v2 = sub_10001E404(a1, a2);

  return sub_10001CCC0(v2);
}

void sub_1000C73B0(uint64_t a1, void *a2, double a3)
{
  double valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    sub_10001C6A4(a1, a2, v5);
    CFRelease(v6);
  }
}

BOOL sub_1000C7420(uint64_t a1)
{
  CFBooleanRef v1 = (CFBooleanRef)sub_10001E404(a1, @"AmbiguousSSIDs");
  return v1 && v1 == kCFBooleanTrue;
}

BOOL sub_1000C745C(const void *a1)
{
  CFStringRef v1 = (const __CFString *)sub_10001A43C(a1);
  return v1 && CFStringHasSuffix(v1, @"_nomap");
}

void sub_1000C7494(uint64_t a1, int a2)
{
  int v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    int v2 = (const void **)&kCFBooleanFalse;
  }
  sub_10001C6A4(a1, @"UserDirected", *v2);
}

BOOL sub_1000C74BC(uint64_t a1)
{
  return &_CNForgetSSID
      && CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), kCNSCaptiveNetworkProperty) == kCFBooleanTrue;
}

BOOL sub_1000C7514(uint64_t a1)
{
  return &_CNForgetSSID
      && CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), kCNSNetworkWasCaptiveProperty) == kCFBooleanTrue;
}

const void *sub_1000C756C(uint64_t a1)
{
  if (a1 && (CFDictionaryRef v1 = *(const __CFDictionary **)(a1 + 16)) != 0) {
    return CFDictionaryGetValue(v1, @"DiagnosticsBssEnv");
  }
  else {
    return 0;
  }
}

uint64_t sub_1000C7590(uint64_t a1)
{
  if (!&_CNForgetSSID) {
    return 0;
  }
  value = 0;
  int ValueIfPresent = CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), kCNSCaptiveNetworkProperty, (const void **)&value);
  if (value == kCFBooleanTrue) {
    unsigned int v2 = 2;
  }
  else {
    unsigned int v2 = 1;
  }
  if (ValueIfPresent) {
    return v2;
  }
  else {
    return 0;
  }
}

BOOL sub_1000C7604(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null network.", "WiFiNetworkIsWoWAllowed", v17);
    }
    goto LABEL_26;
  }
  unsigned int v2 = *(const void **)(a1 + 16);
  if (!v2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null network record." : @"WiFiNetworkIsWoWAllowed" : v17];
    }
    goto LABEL_26;
  }
  CFTypeID v3 = CFGetTypeID(v2);
  if (v3 != CFDictionaryGetTypeID())
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: bad record type %ld", "WiFiNetworkIsWoWAllowed", CFGetTypeID(*(CFTypeRef *)(a1 + 16)));
    }
    CFAllocatorRef v15 = v14;
    goto LABEL_27;
  }
  CFDataRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"IE");
  if (!Value) {
    return 1;
  }
  CFNumberRef v5 = Value;
  CFTypeID v6 = CFGetTypeID(Value);
  if (v6 != CFDataGetTypeID())
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: bad ieList type %ld", @"__WiFiNetworkIsWoWAllowed", CFGetTypeID(v5)];
    }
LABEL_26:
    CFAllocatorRef v15 = v13;
LABEL_27:
    return 1;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)v5);
  if (!BytePtr) {
    return 1;
  }
  CFStringRef v8 = BytePtr;
  CFIndex Length = CFDataGetLength((CFDataRef)v5);
  if (Length << 32 < 1) {
    return 1;
  }
  uint64_t v10 = 0;
  while (*v8 != 221 || v8[1] != 10 || *(_DWORD *)(v8 + 2) != 116528896 || *(_DWORD *)(v8 + 5) != 50397446)
  {
    uint64_t v12 = v8[1] + 2;
    v10 += v12;
    v8 += v12;
    if (v10 >= (int)Length) {
      return 1;
    }
  }
  return (v8[9] & 3) != 1;
}

CFDataRef sub_1000C781C(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null network." arguments:@"WiFiNetworkFoundNanIe"];
    }
    goto LABEL_29;
  }
  unsigned int v2 = *(const void **)(a1 + 16);
  if (!v2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null network record." args:("WiFiNetworkFoundNanIe", nil)];
    }
LABEL_29:
    id v18 = v17;
LABEL_33:
    return 0;
  }
  CFTypeID v3 = CFGetTypeID(v2);
  if (v3 != CFDictionaryGetTypeID())
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: bad record type %ld" args:CFGetTypeID(*(CFTypeRef *)(a1 + 16))];
    }
    id v18 = v19;
    goto LABEL_33;
  }
  CFDataRef result = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"IE");
  if (!result) {
    return result;
  }
  CFDataRef v5 = result;
  CFDataRef result = (const __CFData *)CFDataGetBytePtr(result);
  if (!result) {
    return result;
  }
  CFTypeID v6 = (unsigned __int8 *)result;
  CFIndex Length = CFDataGetLength(v5);
  if (Length << 32 < 1) {
    return 0;
  }
  uint64_t v8 = 0;
  unint64_t v9 = (unint64_t)&v6[(int)Length];
  while (1)
  {
    uint64_t v10 = v6 + 6;
    if (*v6 == 221
      && (unint64_t)v10 <= v9
      && *(_DWORD *)(v6 + 2) == 116528896
      && (unint64_t)(v6 + 9) <= v9)
    {
      break;
    }
LABEL_13:
    uint64_t v12 = v6[1] + 2;
    v8 += v12;
    v6 += v12;
    if (v8 >= (int)Length) {
      return 0;
    }
  }
  while (1)
  {
    uint64_t v14 = v10[2];
    if (*(_WORD *)v10 == 260 && v14 == 18) {
      return (const __CFData *)1;
    }
    id v16 = &v10[v14];
    uint64_t v10 = v16 + 3;
    if ((unint64_t)(v16 + 6) > v9) {
      goto LABEL_13;
    }
  }
}

uint64_t sub_1000C7A08(uint64_t a1)
{
  if (a1)
  {
    uint64_t result = sub_10001E71C(a1);
    if (result)
    {
      uint64_t result = (uint64_t)sub_1000C781C(a1);
      if (result) {
        return sub_10001E404(a1, @"WiFiNetworkNANServiceID") != 0;
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null network.", "WiFiNetworkIsNanPH")];
    }
    return 0;
  }
  return result;
}

CFDataRef sub_1000C7AA8(uint64_t a1, unsigned __int8 *a2)
{
  CFDataRef result = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"IE");
  if (result)
  {
    CFDataRef v4 = result;
    CFDataRef result = (const __CFData *)CFDataGetBytePtr(result);
    if (result)
    {
      CFDataRef v5 = (unsigned __int8 *)result;
      CFIndex Length = CFDataGetLength(v4);
      if (Length << 32 < 1)
      {
        return 0;
      }
      else
      {
        uint64_t v7 = 0;
        while (*v5 != 221 || v5[1] != 13 || *(_DWORD *)(v5 + 2) != 116528896 || *(_DWORD *)(v5 + 5) != 100729350)
        {
          uint64_t v9 = v5[1] + 2;
          v7 += v9;
          v5 += v9;
          if (v7 >= (int)Length) {
            return 0;
          }
        }
        int v10 = *(_DWORD *)(v5 + 9);
        *((_WORD *)a2 + 2) = *(_WORD *)(v5 + 13);
        *(_DWORD *)a2 = v10;
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: BT MAC found in Apple IE %02X:%02X:%02X:%02X:%02X:%02X", "__WiFiNetworkGetBtMacFromIe", *a2, a2[1], a2[2], a2[3], a2[4], a2[5]);
        }
        return (const __CFData *)1;
      }
    }
  }
  return result;
}

const UInt8 *sub_1000C7BF8(uint64_t a1)
{
  unsigned int v2 = malloc_type_malloc(0x11uLL, 0xC32A05B9uLL);
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"IE");
  if (!Value) {
    goto LABEL_23;
  }
  CFDataRef v4 = Value;
  BytePtr = CFDataGetBytePtr(Value);
  if (!BytePtr) {
    goto LABEL_24;
  }
  CFIndex Length = CFDataGetLength(v4);
  if (Length << 32 < 1)
  {
LABEL_23:
    BytePtr = 0;
    goto LABEL_24;
  }
  uint64_t v7 = 0;
  unint64_t v8 = (unint64_t)&BytePtr[(int)Length];
  while (1)
  {
    uint64_t v9 = (unsigned __int16 *)(BytePtr + 6);
    if (*BytePtr == 221
      && (unint64_t)v9 <= v8
      && *(_DWORD *)(BytePtr + 2) == 116528896
      && (unint64_t)(BytePtr + 9) <= v8)
    {
      break;
    }
LABEL_10:
    uint64_t v11 = BytePtr[1] + 2;
    v7 += v11;
    BytePtr += v11;
    if (v7 >= (int)Length) {
      goto LABEL_23;
    }
  }
  while (1)
  {
    uint64_t v13 = *((unsigned __int8 *)v9 + 2);
    if (!(*v9 ^ 0x104 | v13 ^ 0x12) && (unint64_t)v9 + 21 <= v8) {
      break;
    }
    CFAllocatorRef v15 = (char *)v9 + v13;
    uint64_t v9 = (unsigned __int16 *)(v15 + 3);
    if ((unint64_t)(v15 + 6) > v8) {
      goto LABEL_10;
    }
  }
  long long v16 = *(_OWORD *)(v9 + 2);
  v2[16] = *((unsigned char *)v9 + 20);
  *(_OWORD *)unsigned int v2 = v16;
  BytePtr = (const UInt8 *)[objc_alloc((Class)NSString) initWithFormat:@"%s", v2];
LABEL_24:
  free(v2);
  return BytePtr;
}

const UInt8 *sub_1000C7D6C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"IE");
  if (*a3 < 3u || Value == 0) {
    return 0;
  }
  CFDataRef v7 = Value;
  CFDataRef result = CFDataGetBytePtr(Value);
  if (!result) {
    return result;
  }
  uint64_t v9 = result;
  CFIndex Length = CFDataGetLength(v7);
  if (Length << 32 < 1) {
    return 0;
  }
  uint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = v9[1];
    if (*v9 == 7 && v12 >= 3) {
      break;
    }
    uint64_t v14 = v12 + 2;
    v11 += v14;
    v9 += v14;
    if (v11 >= (int)Length) {
      return 0;
    }
  }
  __int16 v15 = *((_WORD *)v9 + 1);
  *(unsigned char *)(a2 + 2) = v9[4];
  *(_WORD *)a2 = v15;
  *a3 = 3;
  return (const UInt8 *)1;
}

BOOL sub_1000C7E30(BOOL result)
{
  if (result)
  {
    uint64_t v1 = result;
    CFDictionaryRef v2 = *(const __CFDictionary **)(result + 16);
    return sub_10001B360(v2)
        || sub_10001B2A8(v2)
        || sub_10001B168(*(const __CFDictionary **)(v1 + 16)) != 0;
  }
  return result;
}

uint64_t sub_1000C7E8C(uint64_t result)
{
  if (result) {
    return sub_10001B360(*(const __CFDictionary **)(result + 16));
  }
  return result;
}

uint64_t sub_1000C7E9C(uint64_t result)
{
  if (result) {
    return sub_10001B2A8(*(const __CFDictionary **)(result + 16));
  }
  return result;
}

CFDictionaryRef sub_1000C7EAC(const __CFDictionary *result)
{
  if (result) {
    return sub_10001B2F0(*((const __CFDictionary **)result + 2));
  }
  return result;
}

void *sub_1000C7EBC(void *result)
{
  if (result)
  {
    CFDictionaryRef v1 = (const __CFDictionary *)*((void *)result + 2);
    value = 0;
    int valuePtr = 0;
    CFDictionaryRef v2 = (const __CFDictionary *)CFDictionaryGetValue(v1, @"EXT_CAPS");
    CFDataRef result = 0;
    if (v2)
    {
      CFDataRef result = (void *)CFDictionaryGetValueIfPresent(v2, @"BEACON_PROTECTION", (const void **)&value);
      if (result)
      {
        CFDataRef result = value;
        if (value)
        {
          CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
          return (void *)(valuePtr == 1);
        }
      }
    }
  }
  return result;
}

CFDictionaryRef *sub_1000C7F3C(CFDictionaryRef *result)
{
  if (result)
  {
    CFDataRef result = (CFDictionaryRef *)CFDictionaryGetValue(result[2], @"RSN_IE");
    if (result)
    {
      CFDataRef result = (CFDictionaryRef *)CFDictionaryGetValue((CFDictionaryRef)result, @"IE_KEY_RSN_CAPS");
      if (result)
      {
        CFDataRef result = (CFDictionaryRef *)CFDictionaryGetValue((CFDictionaryRef)result, @"OCV");
        if (result) {
          return (CFDictionaryRef *)(CFBooleanGetValue((CFBooleanRef)result) == 1);
        }
      }
    }
  }
  return result;
}

CFDictionaryRef sub_1000C7F98(const __CFDictionary *result)
{
  if (result) {
    return sub_10001B3C8(*((const __CFDictionary **)result + 2));
  }
  return result;
}

CFDictionaryRef sub_1000C7FA8(const __CFDictionary *result)
{
  if (result)
  {
    CFDictionaryRef v1 = (const __CFDictionary *)*((void *)result + 2);
    value = 0;
    CFDataRef result = sub_10001B168(v1);
    if (result)
    {
      CFDataRef result = sub_10001B3C8(v1);
      if (result)
      {
        CFDataRef result = (const __CFDictionary *)CFDictionaryGetValue(v1, @"EXT_CAPS");
        if (result)
        {
          int valuePtr = -1431655766;
          CFDataRef result = (const __CFDictionary *)CFDictionaryGetValueIfPresent(result, @"SAE_PK_PASSWD_USED", (const void **)&value);
          if (result) {
            return (const __CFDictionary *)(CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr)
          }
                                         && valuePtr == 1);
        }
      }
    }
  }
  return result;
}

BOOL sub_1000C8044(BOOL result)
{
  if (result) {
    return (~sub_10001FCC4(*(const __CFDictionary **)(result + 16)) & 7) == 0;
  }
  return result;
}

BOOL sub_1000C8074(BOOL result)
{
  if (result) {
    return (~sub_10001FCC4(*(const __CFDictionary **)(result + 16)) & 0xB) == 0;
  }
  return result;
}

CFDictionaryRef sub_1000C80A4(const __CFDictionary *result)
{
  if (result) {
    return sub_10001AEF8(*((const __CFDictionary **)result + 2));
  }
  return result;
}

BOOL sub_1000C80B4(BOOL result)
{
  if (result)
  {
    uint64_t v1 = result;
    CFDataRef result = sub_10001FC1C(result);
    if (result) {
      return sub_10001FB80(v1, 17)
    }
          || sub_10001FB80(v1, 21)
          || sub_10001FB80(v1, 25)
          || sub_10001FB80(v1, 26)
          || sub_10001FB80(v1, 43) != 0;
  }
  return result;
}

BOOL sub_1000C8140(uint64_t a1)
{
  return a1 && CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"PayloadUUID");
}

BOOL sub_1000C8180(uint64_t a1)
{
  int valuePtr = 0;
  if (!a1) {
    return 1;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"IsWiFiNetworkShareble");
  if (!Value) {
    return 1;
  }
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  return valuePtr != 0;
}

BOOL sub_1000C81DC(uint64_t a1)
{
  return a1 && CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"BundleIdentifier");
}

void sub_1000C821C(uint64_t a1)
{
  if (sub_1000C8258(a1) != 0.0) {
    CFAbsoluteTimeGetCurrent();
  }
}

double sub_1000C8258(uint64_t a1)
{
  double valuePtr = 0.0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkGetExpireDate")];
    }
    return 0.0;
  }
  CFNumberRef v1 = (const __CFNumber *)sub_10001E404(a1, @"WiFiNetworkExpirationDate");
  if (!v1) {
    return 0.0;
  }
  CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
  return valuePtr;
}

void sub_1000C82EC(uint64_t a1, CFDateRef theDate)
{
  if (a1)
  {
    if (theDate)
    {
      double AbsoluteTime = CFDateGetAbsoluteTime(theDate);
      sub_1000C73B0(a1, @"WiFiNetworkExpirationDate", AbsoluteTime);
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null expire date, removing property", "WiFiNetworkSetExpireDate")];
      }
      sub_10001C6A4(a1, @"WiFiNetworkExpirationDate", 0);
    }
  }
}

BOOL sub_1000C83C4(uint64_t a1)
{
  if (a1) {
    return sub_10001E404(a1, @"WiFiNetworkExpirationDate") != 0;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" args:("WiFiNetworkIsExpirable")];
  }
  return 0;
}

void sub_1000C8448(uint64_t a1, int a2)
{
  CFDictionaryRef v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    CFDictionaryRef v2 = (const void **)&kCFBooleanFalse;
  }
  sub_10001C6A4(a1, @"WEP", *v2);
}

void sub_1000C8470(uint64_t a1, int a2)
{
  if (a2)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    values = Mutable;
    if (Mutable)
    {
      CFDataRef v4 = Mutable;
      uint64_t valuePtr = 18;
      CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
      if (v5)
      {
        CFNumberRef v6 = v5;
        CFArrayAppendValue(v4, v5);
        CFRelease(v6);
      }
      keys = @"IE_KEY_RSN_AUTHSELS";
      CFDictionaryRef v7 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (v7)
      {
        CFDictionaryRef v8 = v7;
        sub_10001C6A4(a1, @"RSN_IE", v7);
        CFRelease(v8);
      }
      CFRelease(values);
    }
  }
  else
  {
    sub_10001C6A4(a1, @"RSN_IE", 0);
  }
}

void sub_1000C8594(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t valuePtr = 1;
    values = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
    if (values)
    {
      CFTypeRef cf = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
      if (cf)
      {
        CFStringRef v7 = @"IE_KEY_RSN_AUTHSELS";
        CFDictionaryRef v3 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&v7, &cf, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (v3)
        {
          CFDictionaryRef v4 = v3;
          sub_10001C6A4(a1, @"RSN_IE", v3);
          CFRelease(v4);
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
      }
      if (values)
      {
        CFRelease(values);
        values = 0;
      }
    }
    uint64_t valuePtr = 1;
    values = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
    if (values)
    {
      CFTypeRef cf = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
      if (cf)
      {
        CFStringRef v7 = @"IE_KEY_WPA_AUTHSELS";
        CFDictionaryRef v5 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&v7, &cf, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (v5)
        {
          CFDictionaryRef v6 = v5;
          sub_10001C6A4(a1, @"WPA_IE", v5);
          CFRelease(v6);
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
      }
      if (values) {
        CFRelease(values);
      }
    }
  }
  else
  {
    sub_10001C6A4(a1, @"RSN_IE", 0);
    sub_10001C6A4(a1, @"WPA_IE", 0);
    sub_10001C6A4(a1, @"EnterpriseProfile", 0);
  }
}

BOOL sub_1000C8798(uint64_t a1)
{
  if (!sub_10001FC1C(a1))
  {
    if (!sub_10001ED04(a1))
    {
      if (a1)
      {
        if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"WEP") != kCFBooleanTrue && !sub_10001FC6C(a1)) {
          return sub_10001B168(*(const __CFDictionary **)(a1 + 16)) != 0;
        }
      }
      else
      {
        BOOL result = sub_10001FC6C(0);
        if (!result) {
          return result;
        }
      }
    }
    return 1;
  }
  return !sub_1000C8864(a1)
      && !sub_10001FB80(a1, 18)
      && sub_10001FB80(a1, 23) == 0;
}

CFArrayRef sub_1000C8864(uint64_t a1)
{
  if (!sub_10001FC1C(a1)) {
    return 0;
  }
  CFArrayRef v2 = (const __CFArray *)sub_10001E404(a1, @"AcceptEAPTypes");
  if (v2)
  {
    int valuePtr = 13;
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      v7.length = CFArrayGetCount(v2);
      v7.location = 0;
      CFArrayRef v2 = (const __CFArray *)(CFArrayGetFirstIndexOfValue(v2, v7, v4) != -1);
      CFRelease(v4);
      return v2;
    }
    return 0;
  }
  return v2;
}

BOOL sub_1000C890C(uint64_t a1)
{
  int v11 = 18;
  int valuePtr = 13;
  BOOL result = sub_10001FC1C(a1);
  if (result)
  {
    CFArrayRef v3 = (const __CFArray *)sub_10001E404(a1, @"AcceptEAPTypes");
    if (v3 && (v4 = v3, (CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr)) != 0))
    {
      CFNumberRef v6 = v5;
      v13.length = CFArrayGetCount(v4);
      v13.location = 0;
      FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v4, v13, v6);
      CFRelease(v6);
      CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v11);
      if (v8)
      {
        CFNumberRef v9 = v8;
        v14.length = CFArrayGetCount(v4);
        v14.location = 0;
        CFIndex v10 = CFArrayGetFirstIndexOfValue(v4, v14, v9);
        CFRelease(v9);
      }
      else
      {
        CFIndex v10 = -1;
      }
      if (FirstIndexOfValue != -1) {
        return 0;
      }
    }
    else
    {
      CFIndex v10 = -1;
    }
    return v10 == -1;
  }
  return result;
}

const void *sub_1000C8A18(const void *result)
{
  if (result)
  {
    BOOL result = sub_10001E404((uint64_t)result, @"OneTimeUserPassword");
    if (result) {
      return (const void *)(CFEqual(result, kCFBooleanTrue) != 0);
    }
  }
  return result;
}

uint64_t sub_1000C8A5C(uint64_t a1)
{
  return sub_10001AF70(*(const __CFDictionary **)(a1 + 16));
}

uint64_t sub_1000C8A64(unsigned int a1, unsigned int a2)
{
  if ((a1 & a2 & 4) == 0 || ((a2 ^ a1) & 8) != 0)
  {
    if (a1 >= a2) {
      unsigned int v8 = 0;
    }
    else {
      unsigned int v8 = -1;
    }
    if (a1 <= a2) {
      return v8;
    }
    else {
      return 1;
    }
  }
  else
  {
    unsigned int v2 = a1 & 0xFFFFFFFB;
    unsigned int v3 = a2 & 0xFFFFFFFB;
    if ((a1 & 0xFFFFFFFB) > (a2 & 0xFFFFFFFB)) {
      int v4 = 1;
    }
    else {
      int v4 = -1;
    }
    if (v3) {
      int v5 = v4;
    }
    else {
      int v5 = -1;
    }
    if (v2) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = 1;
    }
    if (v2 == v3) {
      return 0;
    }
    else {
      return v6;
    }
  }
}

uint64_t sub_1000C8ABC(const __CFDictionary **cf, const __CFDictionary **a2)
{
  uint64_t result = 0;
  if (cf && a2)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    uint64_t v6 = qword_10027D710;
    if (!qword_10027D710)
    {
      pthread_once(&stru_10027CCA8, (void (*)(void))sub_1000C5C5C);
      uint64_t v6 = qword_10027D710;
    }
    if (v5 != v6) {
      return 0;
    }
    CFTypeID v7 = CFGetTypeID(a2);
    uint64_t v8 = qword_10027D710;
    if (!qword_10027D710)
    {
      pthread_once(&stru_10027CCA8, (void (*)(void))sub_1000C5C5C);
      uint64_t v8 = qword_10027D710;
    }
    if (v7 != v8) {
      return 0;
    }
    int v9 = sub_10001AF70(cf[2]);
    int v10 = sub_10001AF70(a2[2]);
    int v33 = sub_10001B168(cf[2])
       && (CFDictionaryRef v11 = cf[2], !sub_10001B360(v11))
       && sub_10001B2A8(v11) == 0;
    int v30 = v10;
    int v13 = sub_10001B168(a2[2])
       && (CFDictionaryRef v12 = a2[2], !sub_10001B360(v12))
       && sub_10001B2A8(v12) == 0;
    unsigned int v31 = sub_10001AEF8(cf[2]);
    unsigned int v32 = sub_10001AEF8(a2[2]);
    CFBooleanRef Value = (CFBooleanRef)CFDictionaryGetValue(cf[2], @"ALLOW_WPA2_PSK");
    CFBooleanRef v15 = (CFBooleanRef)CFDictionaryGetValue(a2[2], @"ALLOW_WPA2_PSK");
    CFBooleanRef v16 = (CFBooleanRef)CFDictionaryGetValue(cf[2], @"ALLOW_OWE_TSN");
    unint64_t v17 = (unint64_t)CFDictionaryGetValue(a2[2], @"ALLOW_OWE_TSN");
    int v18 = ((unint64_t)Value | (unint64_t)v16) == 0;
    int v19 = ((unint64_t)v15 | v17) == 0;
    if (v18 != v19)
    {
      CFBooleanRef v20 = (const __CFBoolean *)v17;
      int v29 = v9;
      if (v33)
      {
        BOOL v21 = sub_100023F30((uint64_t)cf) != 3;
        if ((v13 & 1) == 0)
        {
LABEL_20:
          CFBooleanRef v22 = kCFBooleanTrue;
LABEL_31:
          if (v15 == v22 && v21) {
            return 0;
          }
          int v9 = v29;
          if ((v18 & v33) == 1 && sub_100023F30((uint64_t)cf) == 3) {
            int v9 = v29 | 2;
          }
          if ((v19 & v13) == 1)
          {
            int v25 = sub_100023F30((uint64_t)a2);
            int v26 = v30;
            if (v25 == 3) {
              int v26 = v30 | 2;
            }
            int v30 = v26;
          }
          BOOL v27 = v31 && sub_100023F30((uint64_t)cf) != 3;
          if (v32)
          {
            int v28 = sub_100023F30((uint64_t)a2);
            if (v16 == v22 && v28 != 3) {
              return 0;
            }
          }
          if (v20 == v22 && v27) {
            return 0;
          }
LABEL_23:
          if (!v9 || !v30 || (v30 & v9) != 0) {
            return (v9 == 0) ^ (v30 != 0);
          }
          return 0;
        }
      }
      else
      {
        BOOL v21 = 0;
        if ((v13 & 1) == 0) {
          goto LABEL_20;
        }
      }
      int v23 = sub_100023F30((uint64_t)a2);
      BOOL v24 = Value == kCFBooleanTrue;
      CFBooleanRef v22 = kCFBooleanTrue;
      if (v24 && v23 != 3) {
        return 0;
      }
      goto LABEL_31;
    }
    uint64_t result = 0;
    if (v33 == v13 && v31 == v32) {
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t sub_1000C8DF4(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t result = sub_10001A86C(*(const void **)(a1 + 16), *(const void **)(a2 + 16));
    if (result) {
      return sub_10001AE0C(*(CFTypeRef *)(a1 + 16), *(const void **)(a1 + 16), @"AP_MODE") != 0;
    }
  }
  return result;
}

uint64_t sub_1000C8E4C(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return sub_1000C8E60(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000C8E60(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2 || !sub_10001BB2C(a1) || !sub_10001BB2C(a2)) {
    return 0;
  }
  int v4 = *(const void **)(a1 + 16);
  CFTypeID v5 = *(const void **)(a2 + 16);

  return sub_10001AE0C(v4, v5, @"DomainName");
}

BOOL sub_1000C8ED4(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1)
  {
    if (a2) {
      return sub_10001AE0C(*(CFTypeRef *)(a1 + 16), *(const void **)(a2 + 16), @"SSID_STR") != 0;
    }
  }
  return result;
}

uint64_t sub_1000C8F18(uint64_t a1, uint64_t a2)
{
  if (a1 | a2) {
    uint64_t v3 = -1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a2) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = v3;
  }
  if (!a1 || !a2) {
    return result;
  }
  BOOL v6 = sub_10001FABC(a1);
  BOOL v7 = sub_10001FABC(a2);
  BOOL v8 = sub_10001BB2C(a1);
  BOOL v9 = sub_10001BB2C(a2);
  if (v6 || v8 || v7 || v9)
  {
    BOOL v16 = !v6 && !v8;
    if (!v16 && !v7 && !v9) {
      return 1;
    }
    if (v16 && (v7 || v9)) {
      return -1;
    }
    if (v6 && v9) {
      return 1;
    }
    if (v8 && v7) {
      return -1;
    }
    if (v8 && v9)
    {
      CFBooleanRef v17 = (const __CFBoolean *)sub_10001E404(a1, @"HS20HomeOperatorNetwork");
      CFBooleanRef v18 = (const __CFBoolean *)sub_10001E404(a2, @"HS20HomeOperatorNetwork");
      if (v17 == kCFBooleanTrue && v18 != kCFBooleanTrue) {
        return -1;
      }
      if (v17 != kCFBooleanTrue && v18 == kCFBooleanTrue) {
        return 1;
      }
    }
  }
  unsigned int v10 = sub_10001AF70(*(const __CFDictionary **)(a1 + 16));
  unsigned int v11 = sub_10001AF70(*(const __CFDictionary **)(a2 + 16));
  int v12 = sub_1000C8A64(v10, v11);
  if (v12 == 1) {
    return -1;
  }
  if (v12 == -1) {
    return 1;
  }
  uint64_t valuePtr = 0;
  CFNumberRef v13 = (const __CFNumber *)sub_10001E404(a1, @"Strength");
  if (v13) {
    CFNumberGetValue(v13, kCFNumberFloatType, (char *)&valuePtr + 4);
  }
  CFNumberRef v14 = (const __CFNumber *)sub_10001E404(a2, @"Strength");
  if (v14)
  {
    CFNumberGetValue(v14, kCFNumberFloatType, &valuePtr);
    float v15 = *(float *)&valuePtr;
  }
  else
  {
    float v15 = 0.0;
  }
  if (*((float *)&valuePtr + 1) <= v15) {
    return *((float *)&valuePtr + 1) < v15;
  }
  else {
    return -1;
  }
}

BOOL sub_1000C90F4(uint64_t a1)
{
  return sub_10001E404(a1, @"HS20HomeOperatorNetwork") == kCFBooleanTrue;
}

__CFString *sub_1000C9128(CFDictionaryRef *a1)
{
  if (sub_10001EBFC((uint64_t)a1) < 2) {
    return 0;
  }
  CFStringRef v2 = sub_1000C62C8(a1);
  if (v2 && !sub_10001E404((uint64_t)a1, @"RSN_IE"))
  {
    CFStringRef v3 = sub_10001F928(a1);
    int v4 = sub_1000DCFF4(v2, (const __CFData *)v3);
    CFRelease(v2);
    return v4;
  }
  return (__CFString *)v2;
}

__CFString *sub_1000C91A8(const void *a1, const __CFString *a2)
{
  CFStringRef v3 = sub_10001F928(a1);

  return sub_1000DCFF4(a2, (const __CFData *)v3);
}

uint64_t sub_1000C91E4(CFDictionaryRef *a1, BOOL *a2, double a3)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315394;
    unsigned int v10 = "WiFiNetworkCopyPasswordWithTimeout";
    __int16 v11 = 2112;
    CFStringRef v12 = sub_1000C6758(a1);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s: Copy password for Network/account %@", (uint8_t *)&v9, 0x16u);
  }
  if (!a1
    || !CFDictionaryContainsKey(a1[2], @"PayloadUUID")
    || (CFStringRef v6 = sub_1000C6758(a1), (result = sub_1000DD55C(v6, a2, a3)) == 0))
  {
    CFStringRef v8 = sub_1000C6758(a1);
    return sub_1000DB6C0(v8, a2, a3);
  }
  return result;
}

uint64_t sub_1000C92F8(const void *a1, const __CFString *a2, BOOL *a3, double a4)
{
  CFStringRef v7 = sub_1000C6758(a1);

  return sub_1000DC2E4(v7, a2, a3, a4);
}

CFStringRef sub_1000C9348(const void *a1)
{
  CFStringRef v1 = sub_1000C6758(a1);

  return sub_1000DC14C(v1);
}

CFStringRef sub_1000C9370(const void *a1)
{
  CFStringRef v1 = sub_1000C6758(a1);

  return sub_1000DD344(v1);
}

uint64_t sub_1000C9398(const void *a1, BOOL *a2, double a3)
{
  CFStringRef v5 = sub_1000C6758(a1);

  return sub_1000DD55C(v5, a2, a3);
}

BOOL sub_1000C93E0(const void *a1, const __CFString *a2)
{
  CFStringRef v3 = (__CFString *)sub_1000C6758(a1);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    CFStringRef v6 = "WiFiNetworkSetPassword";
    __int16 v7 = 2112;
    CFStringRef v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s: Set password for Network/account %@", (uint8_t *)&v5, 0x16u);
  }
  return sub_1000DC6B4(v3, a2);
}

BOOL sub_1000C94A8(const void *a1, const __CFString *a2)
{
  CFStringRef v3 = (__CFString *)sub_1000C6758(a1);

  return sub_1000DCA54(v3, a2);
}

uint64_t sub_1000C94E0(const void *a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    int v5 = "WiFiNetworkRemovePassword";
    __int16 v6 = 2112;
    CFStringRef v7 = sub_1000C6758(a1);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s: Remove password for Network/account %@", (uint8_t *)&v4, 0x16u);
  }
  CFStringRef v2 = sub_1000C6758(a1);
  return sub_1000DCA5C(v2);
}

uint64_t sub_1000C95A8(const void *a1)
{
  CFStringRef v1 = sub_1000C6758(a1);

  return sub_1000DCC04(v1);
}

CFStringRef sub_1000C95D0(CFDictionaryRef *a1)
{
  CFStringRef result = sub_1000C62C8(a1);
  if (result)
  {
    CFRelease(result);
    return (CFStringRef)1;
  }
  return result;
}

uint64_t sub_1000C95F4(void *a1)
{
  if (!sub_1000C8798((uint64_t)a1)) {
    return 1;
  }
  uint64_t result = (uint64_t)sub_1000C621C((uint64_t)a1);
  if (result)
  {
LABEL_3:
    CFRelease((CFTypeRef)result);
    return 1;
  }
  CFStringRef v3 = sub_10001A43C(a1);
  int v4 = sub_10001E404((uint64_t)a1, @"HS20AccountName");
  if (!v3 || v4 && CFEqual(v3, v4)) {
    return 0;
  }
  uint64_t result = (uint64_t)sub_1000C62C8((CFDictionaryRef *)a1);
  if (result) {
    goto LABEL_3;
  }
  return result;
}

uint64_t sub_1000C967C()
{
  return 1;
}

uint64_t sub_1000C9684(const void *a1)
{
  CFStringRef v1 = sub_1000C6758(a1);

  return sub_1000DCC0C(v1);
}

void sub_1000C96AC(uint64_t a1, int a2)
{
  if (a1)
  {
    int v4 = (const void **)&kCFBooleanTrue;
    int v5 = *(__CFDictionary **)(a1 + 16);
    if (!a2) {
      int v4 = (const void **)&kCFBooleanFalse;
    }
    CFDictionarySetValue(v5, @"enabled", *v4);
    if (a2)
    {
      sub_1000C977C(a1, 0);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), @"networkDisabledTimestamp");
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), @"networkDisabledReason");
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), @"networkDisabledClientName");
      __int16 v6 = *(__CFDictionary **)(a1 + 16);
      CFStringRef v7 = @"prevJoined";
    }
    else
    {
      __int16 v6 = *(__CFDictionary **)(a1 + 16);
      CFStringRef v7 = @"WiFiNetworkUserAcceptedRecommendationAt";
    }
    CFDictionaryRemoveValue(v6, v7);
  }
}

void sub_1000C977C(uint64_t a1, const void *a2)
{
  if (a1)
  {
    CFStringRef v2 = a2;
    CFStringRef v3 = (const void *)a1;
    if (!a2)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Clearing disable-until property for SSID '%@'", "WiFiNetworkSetDisabledUntilDate", sub_10001A43C(v3) message];
      }
      a1 = (uint64_t)v3;
      CFStringRef v2 = 0;
    }
    sub_10001C6A4(a1, @"WiFiNetworkDisabledUntilDate", v2);
  }
}

void sub_1000C984C(CFMutableDictionaryRef *a1, int a2, const void *a3)
{
  if (a1)
  {
    if (a3)
    {
      CFTypeID TypeID = CFStringGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_1001967E0(a1, a2, (uint64_t)a3);
        }
        BOOL v7 = sub_10001EBB4((uint64_t)a1);
        if (!a2 && v7)
        {
          sub_10001C6A4((uint64_t)a1, @"networkDisabledReason", a3);
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CFDateRef v9 = CFDateCreate(kCFAllocatorDefault, Current);
          if (v9)
          {
            CFDateRef v10 = v9;
            CFDictionarySetValue(a1[2], @"networkDisabledTimestamp", v9);
            CFRelease(v10);
          }
        }
      }
    }
  }
  sub_1000C96AC((uint64_t)a1, a2);
}

BOOL sub_1000C9930(uint64_t a1)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"enabled") != 0;
}

void sub_1000C995C(const void *a1, int a2, const void *a3)
{
  __int16 v6 = (const void *)sub_10001CD58(a1);
  if (v6) {
    sub_10001C6A4((uint64_t)a1, @"prevJoined", v6);
  }
  if (a2) {
    BOOL v7 = @"lastJoined";
  }
  else {
    BOOL v7 = @"lastAutoJoined";
  }

  sub_10001C6A4((uint64_t)a1, v7, a3);
}

const void *sub_1000C99D8(uint64_t a1, int a2)
{
  if (a2) {
    CFStringRef v2 = @"lastJoined";
  }
  else {
    CFStringRef v2 = @"lastAutoJoined";
  }
  return sub_10001E404(a1, v2);
}

double sub_1000C99F4(const void *a1)
{
  CFDateRef v2 = (const __CFDate *)sub_10001CD58(a1);
  CFDateRef v3 = (const __CFDate *)sub_10001E404((uint64_t)a1, @"prevJoined");
  if (v2 && v3)
  {
    return CFDateGetTimeIntervalSinceDate(v2, v3);
  }
  else
  {
    double result = -1.0;
    if (v2) {
      return 0.0;
    }
  }
  return result;
}

void sub_1000C9A68(uint64_t a1, double a2)
{
}

const void *sub_1000C9A78(uint64_t a1)
{
  if (a1)
  {
    return sub_10001E404(a1, @"CHANNEL_FLAGS");
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkGetChannelFlags")];
    }
    return 0;
  }
}

CFNumberRef sub_1000C9AF8(uint64_t a1)
{
  CFNumberRef v1 = (const __CFNumber *)sub_10001E404(a1, @"PHY_MODE");
  return sub_10001EACC(v1);
}

uint64_t sub_1000C9B1C(int a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 < 0xF) {
    return 1;
  }
  uint64_t v2 = 0;
  while (dword_10027CC20[v2] != a1)
  {
    if (++v2 == 33) {
      return 0;
    }
  }
  return 2;
}

void sub_1000C9B68(const void *a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v3 = CFDateCreate(kCFAllocatorDefault, Current);
  CFDateRef v4 = v3;
  if (!a1 || !v3) {
    goto LABEL_47;
  }
  int v5 = sub_10001E404((uint64_t)a1, @"CHANNEL");
  if (v5)
  {
    __int16 v6 = v5;
    BOOL v7 = sub_10001E404((uint64_t)a1, @"CHANNEL_FLAGS");
    if (v7)
    {
      CFStringRef v8 = v7;
      CFTypeRef cf2 = sub_10001E404((uint64_t)a1, @"BSSID");
      if (cf2)
      {
        theArray = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        if (theArray)
        {
          CFArrayRef v9 = (const __CFArray *)sub_10001E404((uint64_t)a1, @"networkKnownBSSListKey");
          if (!v9) {
            goto LABEL_18;
          }
          CFArrayRef v10 = v9;
          if (CFArrayGetCount(v9) < 1) {
            goto LABEL_18;
          }
          CFDictionaryRef v11 = 0;
          CFIndex v12 = 0;
          do
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v12);
            if (ValueAtIndex)
            {
              CFDictionaryRef v14 = ValueAtIndex;
              CFBooleanRef Value = CFDictionaryGetValue(ValueAtIndex, @"BSSID");
              if (Value)
              {
                if (CFEqual(Value, cf2)) {
                  CFDictionaryRef v11 = v14;
                }
                else {
                  CFArrayAppendValue(theArray, v14);
                }
              }
            }
            ++v12;
          }
          while (v12 < CFArrayGetCount(v10));
          if (v11) {
            MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v11);
          }
          else {
LABEL_18:
          }
            MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFBooleanRef v17 = MutableCopy;
          if (MutableCopy)
          {
            CFDictionarySetValue(MutableCopy, @"BSSID", cf2);
            CFDictionarySetValue(v17, @"CHANNEL", v6);
            CFDictionarySetValue(v17, @"CHANNEL_FLAGS", v8);
            CFDictionarySetValue(v17, @"lastRoamed", v4);
            CFNumberRef v18 = (const __CFNumber *)sub_10001E404((uint64_t)a1, @"CHANNEL_FLAGS");
            if (v18)
            {
              int valuePtr = 0;
              CFNumberGetValue(v18, kCFNumberSInt32Type, &valuePtr);
              if ((valuePtr & 0x2000) != 0)
              {
                CFArrayRef v19 = (const __CFArray *)sub_10001E404((uint64_t)a1, @"ORIG_RNR_CHANNEL_LIST");
                if (v19)
                {
                  CFArrayRef v20 = v19;
                  if (CFArrayGetCount(v19) >= 1)
                  {
                    long long v34 = v6;
                    long long v35 = a1;
                    CFDateRef v36 = v4;
                    CFIndex v21 = 0;
                    CFNumberRef v22 = 0;
                    int v23 = 0;
                    CFNumberRef v24 = 0;
                    int v25 = 0;
                    while (!v25 || !v23)
                    {
                      CFDictionaryRef v26 = (const __CFDictionary *)CFArrayGetValueAtIndex(v20, v21);
                      if (v26)
                      {
                        CFDictionaryRef v27 = v26;
                        int v28 = CFDictionaryGetValue(v26, @"CHANNEL");
                        CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v27, @"CHANNEL_FLAGS");
                        if (v28)
                        {
                          CFNumberRef v30 = v29;
                          if (v29)
                          {
                            int v39 = 0;
                            CFNumberGetValue(v29, kCFNumberSInt32Type, &v39);
                            if ((v39 & 8) != 0)
                            {
                              int v25 = v28;
                              CFNumberRef v24 = v30;
                            }
                            else if ((v39 & 0x10) != 0)
                            {
                              int v23 = v28;
                              CFNumberRef v22 = v30;
                            }
                          }
                        }
                      }
                      if (CFArrayGetCount(v20) <= ++v21)
                      {
                        if (!v23) {
                          goto LABEL_37;
                        }
                        break;
                      }
                    }
                    CFDictionarySetValue(v17, @"colocated5GHzRNRChannel", v23);
                    CFDictionarySetValue(v17, @"colocated5GHzRNRChannelFlags", v22);
LABEL_37:
                    a1 = v35;
                    CFDateRef v4 = v36;
                    __int16 v6 = v34;
                    if (v25)
                    {
                      CFDictionarySetValue(v17, @"colocated2GHzRNRChannel", v25);
                      CFDictionarySetValue(v17, @"colocated2GHzRNRChannelFlags", v24);
                    }
                  }
                }
              }
            }
            unsigned int v31 = sub_10001E404((uint64_t)a1, @"LEAKY_AP_LEARNED_DATA");
            if (v31)
            {
              CFDictionarySetValue(v17, @"LEAKY_AP_LEARNED_DATA", v31);
              sub_10001C6A4((uint64_t)a1, @"LEAKY_AP_LEARNED_DATA", 0);
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:3, "%s: moved leaky AP info to bss dictionary", "WiFiNetworkPrepareKnownBssList"];
              }
            }
            CFArrayAppendValue(theArray, v17);
            sub_10001C6A4((uint64_t)a1, @"networkKnownBSSListKey", theArray);
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: successfully prepared known BSS info for %@ (bssid: %@, channel: %@)", "WiFiNetworkPrepareKnownBssList", sub_10001A43C(a1), cf2, v6 message];
            }
            CFRelease(theArray);
          }
          else
          {
            CFBooleanRef v17 = theArray;
          }
          CFRelease(v17);
LABEL_47:
          if (!v4) {
            return;
          }
        }
      }
    }
  }
  CFRelease(v4);
}

void sub_1000C9FC4(uint64_t a1, CFArrayRef theArray)
{
  if (a1)
  {
    if (theArray)
    {
      if (CFArrayGetCount(theArray) >= 1)
      {
        CFArrayRef v4 = (const __CFArray *)sub_10001E404(a1, @"networkKnownBSSListKey");
        if (v4)
        {
          CFArrayRef v5 = v4;
          CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
          if (Mutable)
          {
            BOOL v7 = Mutable;
            if (CFArrayGetCount(v5) >= 1)
            {
              CFIndex v8 = 0;
              do
              {
                CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v8);
                if (ValueAtIndex)
                {
                  CFDictionaryRef v10 = ValueAtIndex;
                  CFBooleanRef Value = CFDictionaryGetValue(ValueAtIndex, @"BSSID");
                  if (Value)
                  {
                    CFIndex v12 = Value;
                    v16.length = CFArrayGetCount(theArray);
                    v16.location = 0;
                    if (CFArrayGetFirstIndexOfValue(theArray, v16, v12) == -1)
                    {
                      CFArrayAppendValue(v7, v10);
                    }
                    else
                    {
                      if (qword_10027DD68) {
                        [((id)qword_10027DD68) WFLog:message:3, "%s: Removed known BSS from index %ld", "WiFiNetworkRemoveBssFromKnownList", v8];
                      }
                    }
                  }
                }
                ++v8;
              }
              while (v8 < CFArrayGetCount(v5));
            }
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: updated known BSS list after removal - %@", "WiFiNetworkRemoveBssFromKnownList", v7 message];
            }
            sub_10001C6A4(a1, @"networkKnownBSSListKey", v7);
            CFRelease(v7);
          }
        }
      }
    }
  }
}

void sub_1000CA19C(const void *a1, const void *a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v5 = CFDateCreate(kCFAllocatorDefault, Current);
  if (!a1 || !a2) {
    goto LABEL_30;
  }
  __int16 v6 = (void *)sub_10001E404((uint64_t)a2, @"CHANNEL");
  BOOL v7 = (void *)sub_10001E404((uint64_t)a2, @"CHANNEL_FLAGS");
  CFIndex v8 = sub_10001E404((uint64_t)a2, @"BSSID");
  if (v8)
  {
    CFArrayRef v9 = v8;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    if (Mutable)
    {
      CFDictionaryRef v11 = Mutable;
      int v28 = v7;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: BSS updated - current BSS: %@ (%@)", "WiFiNetworkSetKnownBssUsageData", v9, v6 message];
      }
      value = v6;
      CFArrayRef v13 = (const __CFArray *)sub_10001E404((uint64_t)a1, @"networkKnownBSSListKey");
      if (!v13) {
        goto LABEL_20;
      }
      CFArrayRef v14 = v13;
      CFDateRef v27 = v5;
      if (CFArrayGetCount(v13) < 1)
      {
        CFDictionaryRef v15 = 0;
      }
      else
      {
        CFDictionaryRef v15 = 0;
        CFIndex v16 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v16);
          if (ValueAtIndex)
          {
            CFDictionaryRef v18 = ValueAtIndex;
            CFArrayRef v19 = CFDictionaryGetValue(ValueAtIndex, @"BSSID");
            if (v19)
            {
              if (CFEqual(v19, v9)) {
                CFDictionaryRef v15 = v18;
              }
              else {
                CFArrayAppendValue(v11, v18);
              }
            }
          }
          ++v16;
        }
        while (v16 < CFArrayGetCount(v14));
      }
      CFDateRef v5 = v27;
      if (v15) {
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v15);
      }
      else {
LABEL_20:
      }
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFIndex v21 = MutableCopy;
      if (MutableCopy)
      {
        CFDictionarySetValue(MutableCopy, @"BSSID", v9);
        CFDictionarySetValue(v21, @"CHANNEL", value);
        CFDictionarySetValue(v21, @"CHANNEL_FLAGS", v28);
        CFDictionarySetValue(v21, @"lastRoamed", v5);
        CFArrayAppendValue(v11, v21);
        if (CFArrayGetCount(v11) >= 21)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: known BSS list has grown beyond maximum. Removing %@", "WiFiNetworkSetKnownBssUsageData", CFArrayGetValueAtIndex(v11, 0) message];
          }
          CFArrayRemoveValueAtIndex(v11, 0);
        }
        CFNumberRef v24 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          int v25 = sub_10001A43C(a1);
          [v24 WFLog:2, "%s: known BSS stats for %@ - num. of BSS = %ld", "WiFiNetworkSetKnownBssUsageData", v25, CFArrayGetCount(v11) message];
        }
        sub_10001C6A4((uint64_t)a2, @"networkKnownBSSListKey", v11);
        sub_10001C6A4((uint64_t)a1, @"networkKnownBSSListKey", v11);
        CFRelease(v21);
      }
      CFRelease(v11);
    }
LABEL_30:
    if (!v5) {
      return;
    }
    goto LABEL_31;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: failed to get BSSID from %@", "WiFiNetworkSetKnownBssUsageData", sub_10001A43C(a2) message];
  }
  if (v5)
  {
LABEL_31:
    CFRelease(v5);
  }
}

void sub_1000CA54C(const void *a1, const void *a2, double a3, double a4, double a5)
{
  if (a1 && a2)
  {
    CFDictionaryRef v10 = sub_10001E404((uint64_t)a1, @"BSSID");
    if (v10)
    {
      CFDictionaryRef v11 = v10;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (Mutable)
      {
        CFArrayRef v13 = Mutable;
        CFArrayRef v14 = (const __CFArray *)sub_10001E404((uint64_t)a1, @"networkKnownBSSListKey");
        if (v14)
        {
          CFArrayRef v15 = v14;
          if (CFArrayGetCount(v14) >= 1)
          {
            CFDictionaryRef v16 = 0;
            CFIndex v17 = 0;
            do
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, v17);
              if (ValueAtIndex)
              {
                CFDictionaryRef v19 = ValueAtIndex;
                CFBooleanRef Value = CFDictionaryGetValue(ValueAtIndex, @"BSSID");
                if (Value)
                {
                  if (CFEqual(Value, v11)) {
                    CFDictionaryRef v16 = v19;
                  }
                  else {
                    CFArrayAppendValue(v13, v19);
                  }
                }
              }
              ++v17;
            }
            while (v17 < CFArrayGetCount(v15));
            if (v16)
            {
              MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v16);
              if (MutableCopy)
              {
                CFNumberRef v22 = MutableCopy;
                CFDictionarySetValue(MutableCopy, @"networkLocnLat", +[NSNumber numberWithDouble:a3]);
                CFDictionarySetValue(v22, @"networkLocnLong", +[NSNumber numberWithDouble:a4]);
                CFDictionarySetValue(v22, @"networkLocnAccuracy", +[NSNumber numberWithDouble:a5]);
                CFDictionarySetValue(v22, @"networkLocnTimestamp", a2);
                CFArrayAppendValue(v13, v22);
                sub_10001C6A4((uint64_t)a1, @"networkKnownBSSListKey", v13);
                CFRelease(v22);
              }
            }
          }
        }
        CFRelease(v13);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: failed to get BSSID from %@", "WiFiNetworkSetBSSLocation", sub_10001A43C(a1) message];
      }
    }
  }
}

void sub_1000CA800(const void *a1, const __CFString *a2, uint64_t a3)
{
  if (a1 && a3)
  {
    __int16 v6 = sub_10001A43C(a1);
    if (a2)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (Mutable)
      {
        CFIndex v8 = Mutable;
        CFArrayRef v9 = (const __CFArray *)sub_10001E404((uint64_t)a1, @"networkKnownBSSListKey");
        if (v9)
        {
          CFArrayRef v10 = v9;
          if (CFArrayGetCount(v9) >= 1)
          {
            CFIndex v11 = 0;
            do
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v11);
              if (ValueAtIndex)
              {
                CFDictionaryRef v13 = ValueAtIndex;
                CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"BSSID");
                if (Value)
                {
                  if (CFStringCompare(Value, a2, 1uLL))
                  {
                    CFArrayAppendValue(v8, v13);
                  }
                  else
                  {
                    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v13);
                    if (MutableCopy)
                    {
                      CFMutableDictionaryRef v16 = MutableCopy;
                      (*(void (**)(uint64_t, CFMutableDictionaryRef))(a3 + 16))(a3, MutableCopy);
                      CFArrayAppendValue(v8, v16);
                      CFRelease(v16);
                    }
                  }
                }
              }
              ++v11;
            }
            while (v11 < CFArrayGetCount(v10));
          }
        }
        sub_10001C6A4((uint64_t)a1, @"networkKnownBSSListKey", v8);
        CFRelease(v8);
      }
    }
    else
    {
      CFIndex v17 = v6;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: failed to get BSSID from %@", "WiFiNetworkSetBSSProperty", v17 message];
      }
    }
  }
}

void sub_1000CAA00(const void *a1, const void *a2)
{
  if (a1 && a2)
  {
    CFArrayRef v4 = sub_10001E404((uint64_t)a1, @"BSSID");
    if (v4)
    {
      CFDateRef v5 = v4;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (Mutable)
      {
        BOOL v7 = Mutable;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: BSS updated - current BSS: %@ (awdl=%@)", "WiFiNetworkSetBSSAWDLRealTimeModeTimestamp", v5, a2 message];
        }
        CFArrayRef v9 = (const __CFArray *)sub_10001E404((uint64_t)a1, @"networkKnownBSSListKey");
        if (v9)
        {
          CFArrayRef v10 = v9;
          if (CFArrayGetCount(v9) >= 1)
          {
            CFDictionaryRef v11 = 0;
            CFIndex v12 = 0;
            do
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v12);
              if (ValueAtIndex)
              {
                CFDictionaryRef v14 = ValueAtIndex;
                CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, @"BSSID");
                if (Value)
                {
                  if (CFEqual(Value, v5)) {
                    CFDictionaryRef v11 = v14;
                  }
                  else {
                    CFArrayAppendValue(v7, v14);
                  }
                }
              }
              ++v12;
            }
            while (v12 < CFArrayGetCount(v10));
            if (v11)
            {
              MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v11);
              if (MutableCopy)
              {
                CFIndex v17 = MutableCopy;
                CFDictionarySetValue(MutableCopy, @"AWDLRealTimeModeTimestamp", a2);
                CFArrayAppendValue(v7, v17);
                sub_10001C6A4((uint64_t)a1, @"networkKnownBSSListKey", v7);
                CFRelease(v17);
              }
            }
          }
        }
        CFRelease(v7);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: failed to get BSSID from %@", "WiFiNetworkSetBSSAWDLRealTimeModeTimestamp", sub_10001A43C(a1) message];
      }
    }
  }
}

void sub_1000CAC60(uint64_t a1, const void *a2, int a3, int a4)
{
  int v42 = a4;
  int v43 = a3;
  if (a1 && a2)
  {
    CFIndex v8 = sub_10001E404((uint64_t)a2, @"BSSID");
    if (v8)
    {
      CFArrayRef v9 = v8;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (Mutable)
      {
        int v39 = a4;
        int v40 = a3;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: BSS late roam data - %@ current BSS: %@", "WiFiNetworkSetBssLateRoamInfo", sub_10001A43C(a2), v9 message];
        }
        CFArrayRef v12 = (const __CFArray *)sub_10001E404(a1, @"networkKnownBSSListKey");
        if (!v12) {
          goto LABEL_46;
        }
        CFArrayRef v13 = v12;
        if (CFArrayGetCount(v12) < 1)
        {
          CFDictionaryRef v14 = 0;
        }
        else
        {
          CFDictionaryRef v14 = 0;
          CFIndex v15 = 0;
          do
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v15);
            if (ValueAtIndex)
            {
              CFDictionaryRef v17 = ValueAtIndex;
              CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, @"BSSID");
              if (Value)
              {
                if (CFEqual(Value, v9)) {
                  CFDictionaryRef v14 = v17;
                }
                else {
                  CFArrayAppendValue(Mutable, v17);
                }
              }
            }
            ++v15;
          }
          while (v15 < CFArrayGetCount(v13));
        }
        if (!v14) {
          goto LABEL_46;
        }
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v14);
        if (!MutableCopy)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:message:4, "%s: Failed to create newBssDict", "WiFiNetworkSetBssLateRoamInfo"];
          }
          goto LABEL_46;
        }
        CFMutableDictionaryRef v20 = MutableCopy;
        CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(v14, @"lateRoamInfo");
        if (v21)
        {
          CFDictionaryRef v22 = v21;
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s: Creating new Late Roam Info %@ - %@", "WiFiNetworkSetBssLateRoamInfo", sub_10001A43C(a2), v9 message];
          }
          CFDictionaryRef v24 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v22);
        }
        else
        {
          CFDictionaryRef v24 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        }
        int v25 = v24;
        if (!v24)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4, @"%s: Failed to create newLateRoamInfoDict", @"WiFiNetworkSetBssLateRoamInfo"];
          }
          goto LABEL_45;
        }
        CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(v24, @"lateRoamMinDelta");
        if (v26 && (int valuePtr = 0, CFNumberGetValue(v26, kCFNumberIntType, &valuePtr)) && valuePtr <= v40)
        {
          CFNumberRef v27 = 0;
        }
        else
        {
          CFNumberRef v28 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v43);
          if (!v28)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: Failed to create newMinDeltaRef" : @"WiFiNetworkSetBssLateRoamInfo"];
            }
            goto LABEL_44;
          }
          CFNumberRef v27 = v28;
          CFDictionarySetValue(v25, @"lateRoamMinDelta", v28);
        }
        CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v25, @"lateRoamMaxDelta");
        if (v29 && (int valuePtr = 0, CFNumberGetValue(v29, kCFNumberIntType, &valuePtr)) && valuePtr >= v39)
        {
          CFNumberRef v30 = 0;
        }
        else
        {
          CFNumberRef v31 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v42);
          if (!v31)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: Failed to create newMaxDeltaRef" arguments:("WiFiNetworkSetBssLateRoamInfo", "Failed to create newMaxDeltaRef")];
            }
            CFNumberRef v30 = 0;
            if (!v27) {
              goto LABEL_42;
            }
LABEL_41:
            CFRelease(v27);
LABEL_42:
            if (v30) {
              CFRelease(v30);
            }
LABEL_44:
            CFRelease(v25);
LABEL_45:
            CFRelease(v20);
LABEL_46:
            CFRelease(Mutable);
            return;
          }
          CFNumberRef v30 = v31;
          CFDictionarySetValue(v25, @"lateRoamMaxDelta", v31);
        }
        CFDictionarySetValue(v20, @"lateRoamInfo", v25);
        CFArrayAppendValue(Mutable, v20);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Updated BSS late roam data - %@ current BSS: %@", "WiFiNetworkSetBssLateRoamInfo", sub_10001A43C(a2), v9 message];
        }
        sub_10001C6A4((uint64_t)a2, @"networkKnownBSSListKey", Mutable);
        sub_10001C6A4(a1, @"networkKnownBSSListKey", Mutable);
        if (!v27) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: Failed to create newBssList", @"WiFiNetworkSetBssLateRoamInfo"];
      }
      long long v34 = v11;
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: Failed to get BSSID from %@", "WiFiNetworkSetBssLateRoamInfo", sub_10001A43C(a2) message];
      }
      long long v34 = v33;
    }
  }
}

void sub_1000CB1B8(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  double Current = CFAbsoluteTimeGetCurrent();
  int v47 = 0;
  int valuePtr = 0;
  int v46 = 0;
  if (!a1 || !a2) {
    return;
  }
  int v7 = a3 - 3;
  if ((a3 - 3) >= 3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Incorrect reason code, bailing out!"];
    }
    return;
  }
  CFAbsoluteTime v8 = Current;
  int v40 = dword_1001CB798[v7];
  int v41 = dword_1001CB78C[v7];
  CFDateRef v9 = (const __CFDate *)sub_10001E404(a1, @"knownBSSUpdatedDate");
  CFDateRef v10 = CFDateCreate(kCFAllocatorDefault, v8);
  if (!v9)
  {
    int v12 = 1;
    goto LABEL_14;
  }
  double v11 = v8 - CFDateGetAbsoluteTime(v9);
  if (v11 > 2592000.0)
  {
    int v12 = 0;
    LOBYTE(v9) = 1;
LABEL_14:
    sub_10001C6A4(a1, @"knownBSSUpdatedDate", v10);
    char v14 = v12;
    char v44 = (char)v9;
    goto LABEL_15;
  }
  LOBYTE(v9) = 0;
  char v14 = 0;
  int v12 = 1;
  char v44 = 1;
  if (v11 > 1296000.0) {
    goto LABEL_14;
  }
LABEL_15:
  int v42 = v12;
  uint64_t v38 = a1;
  CFDateRef cf = v10;
  CFArrayRef v15 = (const __CFArray *)sub_10001E404(a1, @"networkKnownBSSListKey");
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    CFDictionaryRef v17 = Mutable;
    if (v15 && CFArrayGetCount(v15) >= 1)
    {
      CFIndex v18 = 0;
      char v43 = v14 | v9;
      CFStringRef v19 = @"BSSID";
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, v18);
        if (!ValueAtIndex) {
          goto LABEL_48;
        }
        CFDictionaryRef v21 = ValueAtIndex;
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, v19);
        if (!Value) {
          goto LABEL_48;
        }
        CFStringRef v23 = Value;
        if (CFStringCompare(Value, a2, 0))
        {
          int v46 = 0;
          int v47 = 0;
          if ((v43 & 1) == 0)
          {
            CFArrayAppendValue(v17, v21);
            goto LABEL_48;
          }
        }
        else
        {
          int v47 = v41;
          int v46 = v40;
        }
        CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v21, @"beaconLossCount");
        if (v24)
        {
          CFNumberGetValue(v24, kCFNumberIntType, &valuePtr);
          if (v44)
          {
            if (!v42) {
              goto LABEL_31;
            }
            int v25 = valuePtr & 0xFF00 | (v47 + valuePtr);
          }
          else
          {
            int v25 = v47 | (valuePtr << 8);
          }
          int v47 = v25;
        }
LABEL_31:
        CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(v21, @"trigDisconnectCount");
        if (!v26) {
          goto LABEL_37;
        }
        CFNumberGetValue(v26, kCFNumberIntType, &valuePtr);
        if (v44)
        {
          if (!v42) {
            goto LABEL_37;
          }
          int v27 = valuePtr & 0xFF00 | (v46 + valuePtr);
        }
        else
        {
          int v27 = v46 | (valuePtr << 8);
        }
        int v46 = v27;
LABEL_37:
        int v28 = CFEqual(v23, a2);
        uint64_t v29 = a3;
        if (a3 == 5 && v28)
        {
          int v46 = 0;
          int v47 = 0;
        }
        CFStringRef v30 = v19;
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v21);
        if (!MutableCopy) {
          goto LABEL_50;
        }
        unsigned int v32 = MutableCopy;
        CFNumberRef v33 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v47);
        if (v33)
        {
          CFNumberRef v34 = v33;
          CFDictionarySetValue(v32, @"beaconLossCount", v33);
          CFRelease(v34);
        }
        CFNumberRef v35 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v46);
        if (v35)
        {
          CFNumberRef v36 = v35;
          CFDictionarySetValue(v32, @"trigDisconnectCount", v35);
          CFRelease(v36);
        }
        CFArrayInsertValueAtIndex(v17, v18, v32);
        CFRelease(v32);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: %@ - bcnloss:%d (%d %d) trgDisc:%d (%d %d)", "WiFiNetworkSetBssDisconnectReason", v23, BYTE1(v47) + v47, v47, BYTE1(v47), BYTE1(v46) + v46, v46, BYTE1(v46), v38 message];
        }
        CFStringRef v19 = v30;
        a3 = v29;
LABEL_48:
        ++v18;
      }
      while (v18 < CFArrayGetCount(v15));
    }
    sub_10001C6A4(v38, @"networkKnownBSSListKey", v17);
LABEL_50:
    CFRelease(v17);
  }
  if (cf) {
    CFRelease(cf);
  }
}

__CFDictionary *sub_1000CB630(uint64_t a1)
{
  CFArrayRef v1 = (const __CFArray *)sub_10001E404(a1, @"networkKnownBSSListKey");
  if (!v1) {
    return 0;
  }
  CFArrayRef v2 = v1;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable && CFArrayGetCount(v2) >= 1)
  {
    CFIndex v4 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v2, v4);
      if (ValueAtIndex)
      {
        CFDictionaryRef v6 = ValueAtIndex;
        CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, @"CHANNEL");
        if (Value)
        {
          CFAbsoluteTime v8 = Value;
          CFDateRef v9 = CFStringCreateMutable(kCFAllocatorDefault, 0);
          if (v9)
          {
            CFDateRef v10 = v9;
            CFStringAppendFormat(v9, 0, @"%@", v8);
            CFDictionarySetValue(Mutable, v10, v6);
            CFRelease(v10);
          }
        }
      }
      ++v4;
    }
    while (v4 < CFArrayGetCount(v2));
  }
  return Mutable;
}

uint64_t sub_1000CB75C(const void *a1, const void *a2)
{
  uint64_t v2 = 0;
  int valuePtr = 0;
  unsigned int v18 = 0;
  if (a1 && a2)
  {
    CFArrayRef v5 = (const __CFArray *)sub_10001E404((uint64_t)a1, @"networkKnownBSSListKey");
    uint64_t v2 = (uint64_t)v5;
    if (v5)
    {
      if (CFArrayGetCount(v5) < 1)
      {
LABEL_10:
        uint64_t v2 = 0;
      }
      else
      {
        CFIndex v6 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v2, v6);
          if (ValueAtIndex)
          {
            CFDictionaryRef v8 = ValueAtIndex;
            CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, @"BSSID");
            if (Value)
            {
              if (CFEqual(Value, a2)) {
                break;
              }
            }
          }
          if (++v6 >= CFArrayGetCount((CFArrayRef)v2)) {
            goto LABEL_10;
          }
        }
        CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v8, @"beaconLossCount");
        if (v15)
        {
          CFNumberGetValue(v15, kCFNumberIntType, &valuePtr);
          int valuePtr = BYTE1(valuePtr) + valuePtr;
        }
        CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(v8, @"trigDisconnectCount");
        if (v16)
        {
          CFNumberGetValue(v16, kCFNumberIntType, &v18);
          unsigned int v18 = BYTE1(v18) + v18;
          BOOL v17 = v18 > 2;
        }
        else
        {
          BOOL v17 = 0;
        }
        uint64_t v2 = valuePtr > 5 || v17;
      }
    }
    double v11 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      int v12 = sub_10001A43C(a1);
      CFArrayRef v13 = "yes";
      if (!v2) {
        CFArrayRef v13 = "no";
      }
      [v11 WFLog:3, "%s: %@ - %@ - %s - {bcnloss:%d trgDisc:%d}", "WiFiNetworkIsEdgeBss", v12, a2, v13, valuePtr, v18 message];
    }
  }
  return v2;
}

uint64_t sub_1000CB914(uint64_t a1, uint64_t a2)
{
  if (a1 | a2) {
    uint64_t v3 = -1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a2) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = v3;
  }
  if (a1 && a2)
  {
    CFIndex v6 = sub_10001E404(a1, @"networkUsage");
    double v7 = sub_10001CCC0(v6);
    CFDictionaryRef v8 = sub_10001E404(a2, @"networkUsage");
    double v9 = sub_10001CCC0(v8);
    if (v7 >= v9)
    {
      if (v7 <= v9)
      {
        return sub_1000CB9D4(a1, a2);
      }
      else
      {
        return -1;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1000CB9D4(uint64_t a1, uint64_t a2)
{
  if (a1 | a2) {
    uint64_t v3 = -1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a2) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = v3;
  }
  if (a1 && a2)
  {
    CFDateRef v6 = (const __CFDate *)sub_10001E404(a1, @"lastAutoJoined");
    CFDateRef v7 = (const __CFDate *)sub_10001E404(a1, @"lastJoined");
    CFDateRef v8 = v7;
    if (v6 && v7)
    {
      CFComparisonResult v9 = CFDateCompare(v6, v7, 0);
      if (v9 == kCFCompareGreaterThan) {
        CFDateRef v10 = v6;
      }
      else {
        CFDateRef v10 = 0;
      }
      if (v9 == kCFCompareEqualTo) {
        CFDateRef v10 = v8;
      }
      if (v9 == kCFCompareLessThan) {
        CFDateRef v6 = v8;
      }
      else {
        CFDateRef v6 = v10;
      }
    }
    else if (!v6)
    {
      CFDateRef v6 = v7;
    }
    CFDateRef v11 = (const __CFDate *)sub_10001E404(a2, @"lastAutoJoined");
    CFDateRef v12 = (const __CFDate *)sub_10001E404(a2, @"lastJoined");
    CFDateRef v13 = v12;
    if (v11 && v12)
    {
      CFComparisonResult v14 = CFDateCompare(v11, v12, 0);
      if (v14 != kCFCompareLessThan)
      {
        if (v14)
        {
          CFDateRef v13 = v11;
          if (v14 != kCFCompareGreaterThan)
          {
            BOOL v15 = 0;
            BOOL v16 = v6 != 0;
LABEL_34:
            if (v16) {
              return -1;
            }
            else {
              return v15;
            }
          }
        }
      }
    }
    else if (v11)
    {
      CFDateRef v13 = v11;
    }
    BOOL v16 = v6 != 0;
    BOOL v15 = v13 != 0;
    if (!v6 || !v13) {
      goto LABEL_34;
    }
    CFComparisonResult v17 = CFDateCompare(v6, v13, 0);
    if (v17 == kCFCompareGreaterThan) {
      return -1;
    }
    else {
      return v17 == kCFCompareLessThan;
    }
  }
  return result;
}

BOOL sub_1000CBB38(uint64_t a1, uint64_t a2)
{
  uint64_t valuePtr = 0;
  if (a1 | a2) {
    uint64_t v2 = -1;
  }
  else {
    uint64_t v2 = 0;
  }
  if (a2) {
    uint64_t v2 = 1;
  }
  if (a1 && a2)
  {
    CFNumberRef v4 = (const __CFNumber *)sub_10001E404(a1, @"Strength");
    if (v4) {
      CFNumberGetValue(v4, kCFNumberFloatType, (char *)&valuePtr + 4);
    }
    CFNumberRef v5 = (const __CFNumber *)sub_10001E404(a2, @"Strength");
    if (v5)
    {
      CFNumberGetValue(v5, kCFNumberFloatType, &valuePtr);
      float v6 = *(float *)&valuePtr;
    }
    else
    {
      float v6 = 0.0;
    }
    uint64_t v2 = -1;
    if (*((float *)&valuePtr + 1) <= v6) {
      return *((float *)&valuePtr + 1) < v6;
    }
  }
  return v2;
}

CFArrayRef sub_1000CBBE4(uint64_t a1)
{
  int valuePtr = 0;
  CFArrayRef result = (const __CFArray *)sub_10001E404(a1, @"networkKnownBSSListKey");
  if (result)
  {
    CFArrayRef v2 = result;
    CFIndex Count = CFArrayGetCount(result);
    if (Count >= 2)
    {
      CFIndex v4 = Count;
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      CFIndex v8 = 0;
      unsigned int v17 = -1431655766;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v2, v8);
        if (ValueAtIndex)
        {
          CFDictionaryRef v10 = ValueAtIndex;
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CHANNEL");
          CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(v10, @"CHANNEL_FLAGS");
          if (Value)
          {
            CFNumberRef v13 = v12;
            if (v12)
            {
              CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
              CFNumberGetValue(v13, kCFNumberSInt32Type, &v17);
              if (valuePtr)
              {
                if (v17)
                {
                  if ((v17 & 8) != 0)
                  {
                    ++v7;
                  }
                  else if ((v17 & 0x10) != 0)
                  {
                    ++v6;
                  }
                  else
                  {
                    v5 += ((unint64_t)v17 >> 13) & 1;
                  }
                }
              }
            }
          }
        }
        ++v8;
      }
      while (v4 != v8);
      return (const __CFArray *)(v6 > 1 || v7 > 1 || v5 > 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000CBD24(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (!(a1 | a2)) {
    return 0;
  }
  if (a1)
  {
    int v6 = sub_1000CC4AC(a1);
    if (v6 == 1)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "NOI (1) '%@' is forced-fix", sub_10001A43C((const void *)a1) message];
      }
      int v8 = 1;
    }
    else
    {
      int v8 = 0;
    }
    unsigned int v12 = sub_1000C6B08(a1);
    if (v12 == 1)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "NOI (1) '%@' has home-state", sub_10001A43C((const void *)a1) message];
      }
      int v10 = 1;
    }
    else
    {
      int v10 = 0;
    }
    BOOL v11 = CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"PayloadUUID") != 0;
    CFDateRef v14 = (const __CFDate *)sub_10001E404(a1, @"addedAt");
    if (!a2)
    {
      uint64_t result = -1;
      if (v6 == 1) {
        return result;
      }
LABEL_45:
      if (v12 == 1) {
        return result;
      }
      return 0;
    }
    CFDateRef theDate = v14;
  }
  else
  {
    if (!a2) {
      return 0;
    }
    int v10 = 0;
    int v8 = 0;
    BOOL v11 = 0;
    CFDateRef theDate = 0;
  }
  int v15 = sub_1000CC4AC(a2);
  if (v15 == 1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "NOI (1) '%@' is forced-fix", sub_10001A43C((const void *)a2) message];
    }
  }
  unsigned int v12 = sub_1000C6B08(a2);
  if (v12 == 1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "NOI (2) '%@' has home-state", sub_10001A43C((const void *)a2) message];
    }
  }
  int v18 = CFDictionaryContainsKey(*(CFDictionaryRef *)(a2 + 16), @"PayloadUUID");
  CFDateRef v19 = (const __CFDate *)sub_10001E404(a2, @"addedAt");
  if (!a1 || !a2)
  {
    if (v8) {
      uint64_t result = -1;
    }
    else {
      uint64_t result = 1;
    }
    if (v8 || v15 == 1) {
      return result;
    }
    uint64_t result = v10 ? -1 : 1;
    if (v10) {
      return result;
    }
    goto LABEL_45;
  }
  if (v8 && v15 == 1)
  {
    CFDateRef v20 = (const __CFDate *)sub_1000CC594(a1);
    CFDateRef v21 = (const __CFDate *)sub_1000CC594(a2);
    CFComparisonResult v22 = CFDateCompare(v20, v21, 0);
    CFNumberRef v24 = (void *)qword_10027DD68;
    if (v22 != kCFCompareLessThan)
    {
      if (qword_10027DD68)
      {
        int v25 = sub_10001A43C((const void *)a1);
        CFNumberRef v26 = sub_10001A43C((const void *)a2);
        [v24 WFLog:3, "Both (%@) and (%@) force fixed. Preferred (1), the most recently force fixed: %@", v25, v26, sub_10001A43C((const void *)a1), v68 message];
      }
LABEL_33:
      return -1;
    }
    if (qword_10027DD68)
    {
      uint64_t v38 = sub_10001A43C((const void *)a1);
      int v39 = sub_10001A43C((const void *)a2);
      [v24 WFLog:3, "Both (%@) and (%@) force fixed. Preferred (2), the most recently force fixed: %@", v38, v39, sub_10001A43C((const void *)a2), v68 message];
    }
    goto LABEL_66;
  }
  if ((!v8 || !v18) && (!v11 || v15 != 1))
  {
    BOOL v42 = v15 == 1;
    if (!v8) {
      BOOL v42 = 1;
    }
    if (!v42)
    {
      char v43 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        char v44 = sub_10001A43C((const void *)a1);
        [v43 WFLog:3, "NOI (1) forced-fix: preferred (1) %@ over %@", v44, sub_10001A43C((const void *)a2), v67, v68 message];
      }
      goto LABEL_33;
    }
    if (!v8 && v15 == 1)
    {
      CFDictionaryRef v45 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        int v46 = sub_10001A43C((const void *)a2);
        [v45 WFLog:3, "NOI (2) forced-fix: Preferred (2) %@ over %@", v46, sub_10001A43C((const void *)a1), v67, v68 message];
      }
LABEL_66:
      return 1;
    }
    if (v11 && !v18)
    {
      int v47 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        unsigned int v48 = sub_10001A43C((const void *)a1);
        [v47 WFLog:3, "NOI home-state: preferred (1) %@ (as it's profile based) over %@", v48, sub_10001A43C((const void *)a2), v67, v68 message];
      }
      goto LABEL_33;
    }
    if (!v11 && v18)
    {
      double v49 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        uint64_t v50 = sub_10001A43C((const void *)a2);
        [v49 WFLog:3, "NOI home-state: preferred (2) %@ (as it's profile based) over %@", v50, sub_10001A43C((const void *)a1), v67, v68 message];
      }
      goto LABEL_66;
    }
    if (v11 && v18)
    {
      if (theDate)
      {
        if (!v19)
        {
          CFArrayRef v62 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            uint64_t v63 = sub_10001A43C((const void *)a1);
            [v62 WFLog:3, "NOI home-state: preferred (1) %@ over %@ (which has no kWiFiPreferenceAddedAtKey)", v63, sub_10001A43C((const void *)a2), v67, v68 message];
          }
          goto LABEL_33;
        }
        CFComparisonResult v51 = CFDateCompare(theDate, v19, 0);
        BOOL v52 = (void *)qword_10027DD68;
        if (v51 != kCFCompareLessThan)
        {
          if (qword_10027DD68)
          {
            uint64_t v53 = sub_10001A43C((const void *)a1);
            BOOL v54 = sub_10001A43C((const void *)a2);
            CFDictionaryRef v55 = sub_10001A43C((const void *)a1);
            [v52 WFLog:3, "NOI home-state: preferred (1) %@ over %@. %@ was added after %@", v53, v54, v55, sub_10001A43C((const void *)a2) message];
          }
          goto LABEL_33;
        }
        if (qword_10027DD68)
        {
          CFMutableDictionaryRef v64 = sub_10001A43C((const void *)a2);
          unint64_t v65 = sub_10001A43C((const void *)a1);
          CFDictionaryRef v66 = sub_10001A43C((const void *)a2);
          [v52 WFLog:3, "NOI home-state: preferred (2) %@ over %@. %@ was added after %@", v64, v65, v66, sub_10001A43C((const void *)a1) message];
        }
      }
      else
      {
        uint64_t v60 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          int v61 = sub_10001A43C((const void *)a2);
          [v60 WFLog:3, "NOI home-state: preferred (2) %@ over %@ (which has no kWiFiPreferenceAddedAtKey)", v61, sub_10001A43C((const void *)a1), v67, v68 message];
        }
      }
      goto LABEL_66;
    }
    if (v10 && v12 != 1)
    {
      char v56 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFStringRef v57 = sub_10001A43C((const void *)a1);
        [v56 WFLog:3, "NOI home-state: preferred (1) %@ over %@", v57, sub_10001A43C((const void *)a2), v67, v68 message];
      }
      goto LABEL_33;
    }
    if (!v10 && v12 == 1)
    {
      CFTypeID v58 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFDictionaryRef v59 = sub_10001A43C((const void *)a2);
        [v58 WFLog:3, "NOI home-state: Preferred (2) %@ over %@", v59, sub_10001A43C((const void *)a1), v67, v68 message];
      }
      goto LABEL_66;
    }
    if (a3) {
      *a3 = v10;
    }
    return 0;
  }
  if (v8) {
    uint64_t v27 = a1;
  }
  else {
    uint64_t v27 = a2;
  }
  CFDateRef v28 = (const __CFDate *)sub_1000CC594(v27);
  if (v11) {
    uint64_t v29 = (const void *)a1;
  }
  else {
    uint64_t v29 = (const void *)a2;
  }
  CFDateRef v30 = (const __CFDate *)sub_10001E404((uint64_t)v29, @"addedAt");
  CFComparisonResult v31 = CFDateCompare(v28, v30, 0);
  CFNumberRef v33 = (void *)qword_10027DD68;
  if (v31 == kCFCompareLessThan)
  {
    if (qword_10027DD68)
    {
      int v40 = sub_10001A43C(v29);
      if (v11) {
        int v41 = (const void *)a2;
      }
      else {
        int v41 = (const void *)a1;
      }
      [v33 WFLog:3, "NOI: Profile based network (%@) was added AFTER network was force fixed  (%@), prefer profile based ", v40, sub_10001A43C(v41) message];
    }
    BOOL v36 = v8 == 0;
    uint64_t v37 = -1;
  }
  else
  {
    if (qword_10027DD68)
    {
      CFNumberRef v34 = sub_10001A43C(v29);
      if (v11) {
        CFNumberRef v35 = (const void *)a2;
      }
      else {
        CFNumberRef v35 = (const void *)a1;
      }
      [v33 WFLog:3, "NOI: Profile based network (%@) was added BEFORE network was force fixed (%@), prefer force fixed network ", v34, sub_10001A43C(v35) message];
    }
    BOOL v36 = v8 == 0;
    uint64_t v37 = 1;
  }
  if (v36) {
    return v37;
  }
  else {
    return -v37;
  }
}

uint64_t sub_1000CC4AC(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" args:("WiFiNetworkGetForcedHomeFix", nil)];
    }
    goto LABEL_11;
  }
  CFBooleanRef v1 = (const __CFBoolean *)sub_10001E404(a1, @"NetworkForcedHomeFix");
  if (!v1) {
    return 0;
  }
  CFBooleanRef v2 = v1;
  CFTypeID v3 = CFGetTypeID(v1);
  if (v3 != CFBooleanGetTypeID())
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: invalid value type" :@"WiFiNetworkGetForcedHomeFix"];
    }
LABEL_11:
    return 0;
  }

  return CFBooleanGetValue(v2);
}

const void *sub_1000CC594(uint64_t a1)
{
  if (a1)
  {
    return sub_10001E404(a1, @"kWiFiNetworkLastHomeForceFixDateKey");
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" : @"WiFiNetworkGetLastHomeForceFixDate"];
    }
    return 0;
  }
}

void sub_1000CC628(uint64_t a1, __CFString *a2)
{
  value = kCFBooleanFalse;
  if (a2)
  {
    CFStringRef v4 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"DomainName");
    if (v4)
    {
      CFStringRef v5 = v4;
      CFStringAppend(a2, @"\nDomain name ");
      CFStringAppend(a2, v5);
    }
    CFArrayRef v6 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"RoamingConsortiumOIs");
    if (v6)
    {
      CFArrayRef v7 = v6;
      CFIndex Count = CFArrayGetCount(v6);
      if (Count)
      {
        uint64_t v9 = Count;
        CFStringAppend(a2, @"\nRoaming Consortium OI ");
        if (v9 >= 1)
        {
          for (CFIndex i = 0; i != v9; ++i)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, i);
            CFStringAppend(a2, ValueAtIndex);
            CFStringAppend(a2, @" ");
          }
        }
      }
    }
    CFArrayRef v12 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"NaiRealmName");
    if (v12)
    {
      CFArrayRef v13 = v12;
      CFIndex v14 = CFArrayGetCount(v12);
      if (v14)
      {
        uint64_t v15 = v14;
        CFStringAppend(a2, @"\nNAI Realm Name ");
        if (v15 >= 1)
        {
          for (CFIndex j = 0; j != v15; ++j)
          {
            CFStringRef v17 = (const __CFString *)CFArrayGetValueAtIndex(v13, j);
            CFStringAppend(a2, v17);
            CFStringAppend(a2, @" ");
          }
        }
      }
    }
    CFArrayRef v18 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"MCCandMNC");
    if (v18)
    {
      CFArrayRef v19 = v18;
      CFIndex v20 = CFArrayGetCount(v18);
      if (v20)
      {
        uint64_t v21 = v20;
        CFStringAppend(a2, @"\n3GPP MCC&MNC ");
        if (v21 >= 1)
        {
          for (CFIndex k = 0; k != v21; ++k)
          {
            CFStringRef v23 = (const __CFString *)CFArrayGetValueAtIndex(v19, k);
            CFStringAppend(a2, v23);
            CFStringAppend(a2, @" ");
          }
        }
      }
    }
    CFStringRef v24 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"DisplayedOperatorName");
    if (v24)
    {
      CFStringRef v25 = v24;
      CFStringAppend(a2, @"\nFriendly Operator Name ");
      CFStringAppend(a2, v25);
    }
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), @"SPRoaming", (const void **)&value))
    {
      CFStringAppend(a2, @"\nRoaming set to: ");
      if (value) {
        CFStringRef v26 = @"true";
      }
      else {
        CFStringRef v26 = @"false";
      }
      CFStringAppend(a2, v26);
    }
  }
}

__CFDictionary *sub_1000CC8AC(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"DomainName");
    if (Value) {
      CFDictionaryAddValue(Mutable, @"DomainName", Value);
    }
    CFStringRef v4 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"DisplayedOperatorName");
    if (v4) {
      CFDictionaryAddValue(Mutable, @"DisplayedOperatorName", v4);
    }
    CFStringRef v5 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"RoamingConsortiumOIs");
    if (v5) {
      CFDictionaryAddValue(Mutable, @"RoamingConsortiumOIs", v5);
    }
    CFArrayRef v6 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"NaiRealmName");
    if (v6) {
      CFDictionaryAddValue(Mutable, @"NaiRealmName", v6);
    }
    CFArrayRef v7 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"MCCandMNC");
    if (v7) {
      CFDictionaryAddValue(Mutable, @"MCCandMNC", v7);
    }
  }
  return Mutable;
}

void sub_1000CC9E0(uint64_t a1, int a2)
{
  CFBooleanRef v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    CFBooleanRef v2 = (const void **)&kCFBooleanFalse;
  }
  sub_10001C6A4(a1, @"HS20ProvisionedNetwork", *v2);
}

BOOL sub_1000CCA08(uint64_t a1)
{
  return sub_10001E404(a1, @"HS20ProvisionedNetwork") == kCFBooleanTrue;
}

void sub_1000CCA3C(uint64_t a1, int a2)
{
  CFBooleanRef v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    CFBooleanRef v2 = (const void **)&kCFBooleanFalse;
  }
  sub_10001C6A4(a1, @"HS20HomeOperatorNetwork", *v2);
}

const void *sub_1000CCA64(uint64_t a1)
{
  uint64_t result = sub_10001E404(a1, @"HS2NetworkBadge");
  if (!result)
  {
    return sub_1000CCAB4(a1);
  }
  return result;
}

const void *sub_1000CCAB4(uint64_t a1)
{
  CFDictionaryRef v1 = (const __CFDictionary *)sub_10001E404(a1, @"HS20GasResponse");
  if (!v1) {
    return 0;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v1, @"ANQP_OPERATOR_NAMES_LIST");
  if (!Value) {
    return 0;
  }
  CFArrayRef v3 = Value;
  if (CFArrayGetCount(Value) < 1) {
    return 0;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, 0);
  if (!ValueAtIndex) {
    return 0;
  }

  return CFDictionaryGetValue(ValueAtIndex, @"ANQP_OPERATOR_NAME");
}

const void *sub_1000CCB38(uint64_t a1)
{
  return sub_10001E404(a1, @"HS20GasResponse");
}

const void *sub_1000CCB44(uint64_t a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)sub_10001E404(a1, @"HS20GasResponse");
  if (v2)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v2, @"ANQP_DOMAIN_NAME_LIST");
    if (Value && (CFArrayRef v4 = Value, CFArrayGetCount(Value) >= 1))
    {
      return CFArrayGetValueAtIndex(v4, 0);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return sub_10001E404(a1, @"DomainName");
  }
}

void sub_1000CCBE8(uint64_t a1, const void *a2)
{
  if (sub_10001E404(a1, @"HS20GasResponse")) {
    sub_10001C6A4(a1, @"HS20GasResponse", 0);
  }

  sub_10001C6A4(a1, @"HS20GasResponse", a2);
}

uint64_t sub_1000CCC50(const void *a1, const void *a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    CFDictionaryRef v4 = (const __CFDictionary *)sub_10001E404((uint64_t)a1, @"HS20GasResponse");
    if (v4)
    {
      CFDictionaryRef v5 = v4;
      CFArrayRef v6 = sub_10001E404((uint64_t)a2, @"DomainName");
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v5, @"ANQP_DOMAIN_NAME_LIST");
      if (Value && (CFArrayRef v8 = Value, CFArrayGetCount(Value) >= 1))
      {
        CFIndex v9 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v8, v9);
          if (ValueAtIndex)
          {
            if (v6)
            {
              BOOL v11 = ValueAtIndex;
              if (CFEqual(ValueAtIndex, v6)) {
                break;
              }
            }
          }
          if (++v9 >= CFArrayGetCount(v8)) {
            goto LABEL_11;
          }
        }
        CFDateRef v28 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          if (sub_10001BB2C((BOOL)a1)) {
            uint64_t v29 = sub_1000CCB44((uint64_t)a1);
          }
          else {
            uint64_t v29 = sub_10001A43C(a1);
          }
          [v28 WFLog:3, "%s: found matching domain name %@ in GAS response from scannedNetwork, marking %@ provisioned", "WiFiNetworkIsScannedNetworkMatchingHS20Account", v11, v29 message];
        }
        char v12 = 0;
        uint64_t v2 = 1;
      }
      else
      {
LABEL_11:
        uint64_t v2 = 0;
        char v12 = 1;
      }
      CFBooleanRef v13 = (const __CFBoolean *)sub_10001E404((uint64_t)a2, @"SPRoaming");
      if (qword_10027DD68)
      {
        if (v13 == kCFBooleanFalse) {
          uint64_t v15 = "%s: roaming is disabled for account %@";
        }
        else {
          uint64_t v15 = "%s: roaming is enabled for account %@";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, v15, "WiFiNetworkIsScannedNetworkMatchingHS20Account", sub_10001A43C(a2));
      }
      CFArrayRef v16 = (const __CFArray *)sub_10001E404((uint64_t)a2, @"MCCandMNC");
      if (v16)
      {
        CFArrayRef v17 = v16;
        CFIndex Count = CFArrayGetCount(v16);
        char v19 = v12 ^ 1;
        if (Count < 1) {
          char v19 = 1;
        }
        if ((v19 & 1) == 0)
        {
          CFIndex v20 = 0;
          while (1)
          {
            uint64_t v21 = CFArrayGetValueAtIndex(v17, v20);
            if (v21)
            {
              CFComparisonResult v22 = v21;
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s:%d found MCCMNC in account %@", "WiFiNetworkIsScannedNetworkMatchingHS20Account", 5627, v22 message];
              }
              CFArrayRef v24 = (const __CFArray *)CFDictionaryGetValue(v5, @"ANQP_CELL_NETWORK_INFO");
              if (v24)
              {
                CFArrayRef v25 = v24;
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s:%d found cellInfoArray count %ld %@", "WiFiNetworkIsScannedNetworkMatchingHS20Account", 5631, CFArrayGetCount(v25), v25 message];
                }
                v61.length = CFArrayGetCount(v25);
                v61.location = 0;
                if (CFArrayContainsValue(v25, v61, v22)) {
                  break;
                }
              }
            }
            if (++v20 >= CFArrayGetCount(v17))
            {
              uint64_t v2 = 0;
              goto LABEL_37;
            }
          }
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: found response from 3GPP %@, marking %@ provisioned", "WiFiNetworkIsScannedNetworkMatchingHS20Account", v22, sub_10001A43C(a1) message];
          }
          uint64_t v2 = 1;
        }
      }
LABEL_37:
      CFArrayRef v31 = (const __CFArray *)sub_10001E404((uint64_t)a2, @"NaiRealmName");
      if (v31)
      {
        CFArrayRef v32 = v31;
        CFIndex v33 = CFArrayGetCount(v31);
        if (!v2 && v33 >= 1)
        {
          CFIndex v34 = 0;
          while (1)
          {
            uint64_t v2 = (uint64_t)CFArrayGetValueAtIndex(v32, v34);
            if (v2)
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s:%d found NAI Realm in accounts %@", "WiFiNetworkIsScannedNetworkMatchingHS20Account", 5646, v2 message];
              }
              CFArrayRef v36 = (const __CFArray *)CFDictionaryGetValue(v5, @"ANQP_NAI_REALM_LIST");
              if (v36)
              {
                CFArrayRef v37 = v36;
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s:%d found NaiRealmArray count %ld %@", "WiFiNetworkIsScannedNetworkMatchingHS20Account", 5650, CFArrayGetCount(v37), v37 message];
                }
                if (CFArrayGetCount(v37) >= 1)
                {
                  CFIndex v39 = 0;
                  while (1)
                  {
                    CFDictionaryRef v40 = (const __CFDictionary *)CFArrayGetValueAtIndex(v37, v39);
                    if (v40)
                    {
                      int v41 = CFDictionaryGetValue(v40, @"ANQP_NAI_REALM_NAME");
                      if (v41)
                      {
                        BOOL v42 = v41;
                        if (CFEqual(v41, (CFTypeRef)v2)) {
                          break;
                        }
                      }
                    }
                    if (++v39 >= CFArrayGetCount(v37)) {
                      goto LABEL_53;
                    }
                  }
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: found response from NAI Realm %@, marking %@ provisioned", "WiFiNetworkIsScannedNetworkMatchingHS20Account", v42, sub_10001A43C(a1) message];
                  }
                  int v43 = 0;
                  uint64_t v2 = 1;
                  goto LABEL_55;
                }
              }
LABEL_53:
              uint64_t v2 = 0;
            }
            int v43 = 1;
LABEL_55:
            CFIndex v44 = CFArrayGetCount(v32);
            if (v43)
            {
              if (++v34 < v44) {
                continue;
              }
            }
            break;
          }
        }
      }
      CFArrayRef v46 = (const __CFArray *)sub_10001E404((uint64_t)a2, @"RoamingConsortiumOIs");
      if (v46)
      {
        CFArrayRef v47 = v46;
        CFIndex v48 = CFArrayGetCount(v46);
        if (!v2 && v48 >= 1)
        {
          CFIndex v49 = 0;
          while (1)
          {
            uint64_t v2 = (uint64_t)CFArrayGetValueAtIndex(v47, v49);
            if (v2)
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s:%d found Roaming Consortium OI in accounts %@", "WiFiNetworkIsScannedNetworkMatchingHS20Account", 5671, v2 message];
              }
              CFArrayRef v51 = (const __CFArray *)CFDictionaryGetValue(v5, @"ANQP_ROAMING_CONSORTIUM_OI_LIST");
              if (v51)
              {
                CFArrayRef v52 = v51;
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s:%d found RoamingConsortiumArray count %ld %@", "WiFiNetworkIsScannedNetworkMatchingHS20Account", 5675, CFArrayGetCount(v52), v52 message];
                }
                if (CFArrayGetCount(v52) >= 1)
                {
                  CFIndex v54 = 0;
                  while (1)
                  {
                    CFStringRef v55 = (const __CFString *)CFArrayGetValueAtIndex(v52, v54);
                    if (v55)
                    {
                      if (CFStringCompare(v55, (CFStringRef)v2, 1uLL) == kCFCompareEqualTo) {
                        break;
                      }
                    }
                    if (++v54 >= CFArrayGetCount(v52)) {
                      goto LABEL_76;
                    }
                  }
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: found response from Roaming Consortium %@, marking %@ provisioned", "WiFiNetworkIsScannedNetworkMatchingHS20Account", v2, sub_10001A43C(a1) message];
                  }
                  int v56 = 0;
                  uint64_t v2 = 1;
                  goto LABEL_78;
                }
              }
LABEL_76:
              uint64_t v2 = 0;
            }
            int v56 = 1;
LABEL_78:
            CFIndex v57 = CFArrayGetCount(v47);
            if (v56)
            {
              if (++v49 < v57) {
                continue;
              }
            }
            return v2;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

CFDictionaryRef *sub_1000CD324(CFDictionaryRef *result)
{
  __int16 valuePtr = 0;
  __int16 v3 = 0;
  if (result)
  {
    CFDictionaryRef v1 = result;
    uint64_t result = (CFDictionaryRef *)CFDictionaryGetValue(result[2], @"EXT_CAPS");
    if (result)
    {
      uint64_t result = (CFDictionaryRef *)CFDictionaryGetValue((CFDictionaryRef)result, @"BSS_TRANS_MGMT");
      if (result)
      {
        CFNumberGetValue((CFNumberRef)result, kCFNumberSInt8Type, &valuePtr);
        if ((_BYTE)valuePtr)
        {
          uint64_t result = (CFDictionaryRef *)CFDictionaryGetValue(v1[2], @"QBSS_LOAD_IE");
          if (result)
          {
            CFDictionaryRef v2 = (const __CFDictionary *)result;
            uint64_t result = (CFDictionaryRef *)CFDictionaryGetValue((CFDictionaryRef)result, @"QBSS_CHAN_UTIL");
            if (result)
            {
              CFNumberGetValue((CFNumberRef)result, kCFNumberSInt8Type, (char *)&valuePtr + 1);
              uint64_t result = (CFDictionaryRef *)CFDictionaryGetValue(v2, @"QBSS_STA_COUNT");
              if (result)
              {
                CFNumberGetValue((CFNumberRef)result, kCFNumberSInt16Type, &v3);
                return (CFDictionaryRef *)(v3 == -1);
              }
            }
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_1000CD3F8(const void *a1, const void *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkSetPasswordModificationDate")];
    }
    goto LABEL_13;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null modDate", "WiFiNetworkSetPasswordModificationDate"];
    }
LABEL_13:
    CFArrayRef v7 = v6;
    goto LABEL_17;
  }
  CFDictionaryRef v4 = sub_10001A43C(a1);
  if (v4)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: for network <%@>, modDate %@", "WiFiNetworkSetPasswordModificationDate", v4, a2 message];
    }
    sub_10001C6A4((uint64_t)a1, @"WiFiNetworkPasswordModificationDate", a2);
    return;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: null ssid" args:("WiFiNetworkSetPasswordModificationDate")];
  }
  CFArrayRef v7 = v5;
LABEL_17:
}

const void *sub_1000CD558(uint64_t a1)
{
  if (a1)
  {
    return sub_10001E404(a1, @"WiFiNetworkPasswordModificationDate");
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkGetPasswordModificationDate")];
    }
    return 0;
  }
}

CFTypeRef sub_1000CD5EC(const void *a1)
{
  if (a1)
  {
    CFStringRef v1 = sub_1000C6758(a1);
    return sub_1000DC154(v1);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null network", @"WiFiNetworkCopyKeychainModDate"];
    }
    return 0;
  }
}

CFDictionaryRef sub_1000CD678(uint64_t a1)
{
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"APPLE_DEVICE_IE");
  if (result)
  {
    CFBooleanRef Value = (CFBooleanRef)CFDictionaryGetValue(result, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_CARPLAY");
    return (const __CFDictionary *)(Value && Value == kCFBooleanTrue);
  }
  return result;
}

BOOL sub_1000CD6C4(uint64_t a1)
{
  CFNumberRef v2 = (const __CFNumber *)sub_10001E404(a1, @"CHANNEL");
  unsigned int v7 = -1431655766;
  CFNumberRef v3 = (const __CFNumber *)sub_10001E404(a1, @"CHANNEL_FLAGS");
  if (v3)
  {
    unsigned int valuePtr = 0;
    CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
    return (valuePtr >> 3) & 1;
  }
  else
  {
    CFNumberGetValue(v2, kCFNumberSInt32Type, &v7);
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s : Current channel %d\n", "WiFiNetworkIs24GHzNetwork", v7);
    }
    return v7 - 1 < 0xE;
  }
}

uint64_t sub_1000CD794(uint64_t a1)
{
  CFNumberRef v2 = sub_10001E404(a1, @"CARPLAY_NETWORK");
  if (v2 && CFEqual(v2, kCFBooleanTrue))
  {
    if (sub_10001E404(a1, @"lastJoined")
      || a1 && CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"PayloadUUID"))
    {
      unsigned int v3 = 2;
    }
    else
    {
      unsigned int v3 = 1;
    }
  }
  else
  {
    unsigned int v3 = 0;
  }
  if (sub_10001BB2C(a1)) {
    return 3;
  }
  else {
    return v3;
  }
}

CFIndex sub_1000CD830(CFIndex result)
{
  if (result)
  {
    CFArrayRef v1 = (const __CFArray *)result;
    CFDictionaryRef result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      for (CFIndex i = 0; i < result; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v1, i);
        if (ValueAtIndex)
        {
          CFDictionaryRef v4 = ValueAtIndex;
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%@", v4[2] message];
          }
        }
        CFDictionaryRef result = CFArrayGetCount(v1);
      }
    }
  }
  return result;
}

void sub_1000CD8E4(uint64_t a1)
{
  sub_10001C6A4(a1, @"CARPLAY_NETWORK", 0);

  sub_10001C6A4(a1, @"CARPLAY_UUID", 0);
}

const void *sub_1000CD934(uint64_t a1, const __CFString *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" :@"WiFiNetworkCopyLeakyStatus"];
    }
    goto LABEL_28;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null bssid" :@"WiFiNetworkCopyLeakyStatus"];
    }
    goto LABEL_28;
  }
  CFStringRef v4 = (const __CFString *)sub_10001E404(a1, @"BSSID");
  if (!v4)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null bssidFromNetwork", "WiFiNetworkCopyLeakyStatus")];
    }
    goto LABEL_28;
  }
  if (CFEqual(a2, v4))
  {
    CFDictionaryRef result = sub_10001E404(a1, @"LEAKY_AP_LEARNED_DATA");
    if (!result) {
      return result;
    }
    goto LABEL_14;
  }
  CFArrayRef v5 = (const __CFArray *)sub_10001E404(a1, @"networkKnownBSSListKey");
  if (!v5)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null knownBssids" :@"WiFiNetworkCopyLeakyStatus"];
    }
    goto LABEL_28;
  }
  CFArrayRef v6 = v5;
  CFIndex Count = CFArrayGetCount(v5);
  if (!Count)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: no knownBssids", @"WiFiNetworkCopyLeakyStatus"];
    }
LABEL_28:
    return 0;
  }
  CFIndex v8 = Count;
  if (Count < 1) {
    return 0;
  }
  CFIndex v9 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v9);
    if (ValueAtIndex)
    {
      CFDictionaryRef v11 = ValueAtIndex;
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"BSSID");
      if (CFEqual(a2, Value)) {
        break;
      }
    }
    if (v8 == ++v9) {
      return 0;
    }
  }
  CFDictionaryRef result = CFDictionaryGetValue(v11, @"LEAKY_AP_LEARNED_DATA");
  if (result)
  {
LABEL_14:
    Apple80211CopyLeakyAPStatus();
    return 0;
  }
  return result;
}

BOOL sub_1000CDB54(uint64_t a1, const __CFString *a2)
{
  CFNumberRef v2 = (const __CFNumber *)sub_1000CD934(a1, a2);
  if (v2)
  {
    CFNumberRef v3 = v2;
    char valuePtr = -86;
    CFNumberGetValue(v2, kCFNumberSInt8Type, &valuePtr);
    BOOL v4 = valuePtr == 2;
    CFRelease(v3);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null leaky number", "WiFiNetworkIsAPLeaky")];
    }
    return 0;
  }
  return v4;
}

CFDictionaryRef sub_1000CDBF4(uint64_t a1)
{
  CFDictionaryRef result = (const __CFDictionary *)sub_10001E404(a1, @"11U_INTERWORKING_IE");
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"INTERWORKING_ACCESS_NETWORK_TYPE");
    if (result)
    {
      char valuePtr = 0;
      CFNumberGetValue(result, kCFNumberSInt8Type, &valuePtr);
      return (const __CFDictionary *)(valuePtr == 2);
    }
  }
  return result;
}

BOOL sub_1000CDC4C(uint64_t a1)
{
  if (sub_10001BB2C(a1)
    || &_CNForgetSSID
    && CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), kCNSCaptiveNetworkProperty) == kCFBooleanTrue)
  {
    unsigned int v2 = sub_1000CDBF4(a1);
  }
  else
  {
    unsigned int v2 = 0;
  }
  return sub_10001E71C(a1) || sub_1000199C0(a1) || v2;
}

uint64_t sub_1000CDCE4(uint64_t a1)
{
  int valuePtr = 0;
  CFNumberRef v2 = (const __CFNumber *)sub_10001E404(a1, @"SaveDataMode");
  if (v2)
  {
    CFNumberGetValue(v2, kCFNumberSInt32Type, &valuePtr);
    BOOL v3 = valuePtr == 1;
    if (valuePtr) {
      return v3;
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  if (sub_10001E71C(a1) || sub_1000C781C(a1) || sub_1000199C0(a1)) {
    return 1;
  }
  return v3;
}

double sub_1000CDD74(uint64_t a1)
{
  double valuePtr = 0.0;
  CFNumberRef v1 = (const __CFNumber *)sub_10001E404(a1, @"NetworkQualityResponsiveness");
  if (v1) {
    CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: retrieved %.3f", "WiFiNetworkGetNetworkQualityResponsiveness", *(void *)&valuePtr)];
  }
  return valuePtr;
}

const void *sub_1000CDE04(uint64_t a1)
{
  CFNumberRef v1 = sub_10001E404(a1, @"NetworkQualityDate");
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: retrieved %@", "WiFiNetworkGetNetworkQualityDate", v1 message];
  }
  return v1;
}

void sub_1000CDE7C(const void *a1, const void *a2, double a3)
{
  double valuePtr = a3;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: %@, %.3f %@", "WiFiNetworkSetNetworkQuality", sub_10001A43C(a1), *(void *)&a3, a2 message];
  }
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
  if (v7)
  {
    CFNumberRef v8 = v7;
    sub_10001C6A4((uint64_t)a1, @"NetworkQualityResponsiveness", v7);
    sub_10001C6A4((uint64_t)a1, @"NetworkQualityDate", a2);
    CFRelease(v8);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s CFNumberCreate failed" arguments:@"WiFiNetworkSetNetworkQuality"];
    }
  }
}

void sub_1000CDFA8(const void *a1, unsigned int a2)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: %@, %d", "WiFiNetworkDisableAutoJoinUntilFirstUserJoin", sub_10001A43C(a1), a2 message];
    }
    CFArrayRef v5 = &kCFBooleanTrue;
    if (!a2) {
      CFArrayRef v5 = &kCFBooleanFalse;
    }
    CFBooleanRef v6 = *v5;
    sub_10001C6A4((uint64_t)a1, @"DisableWiFiAutoJoinUntilFirstUserJoin", v6);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" :@"WiFiNetworkDisableAutoJoinUntilFirstUserJoin"];
    }
  }
}

uint64_t sub_1000CE0B8(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" args:("WiFiNetworkIsAutoJoinDisabledUntilFirstUserJoin", NULL)];
    }
    goto LABEL_11;
  }
  CFBooleanRef v1 = (const __CFBoolean *)sub_10001E404(a1, @"DisableWiFiAutoJoinUntilFirstUserJoin");
  if (!v1) {
    return 0;
  }
  CFBooleanRef v2 = v1;
  CFTypeID v3 = CFGetTypeID(v1);
  if (v3 != CFBooleanGetTypeID())
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: invalid value type" :@"WiFiNetworkIsAutoJoinDisabledUntilFirstUserJoin"];
    }
LABEL_11:
    return 0;
  }

  return CFBooleanGetValue(v2);
}

CFBooleanRef sub_1000CE1A0(const __CFDictionary **a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: null network", "WiFiNetworkIsInfrequentlyJoinedPublicNetwork"];
    }
    goto LABEL_12;
  }
  if (sub_10001AF70(a1[2])) {
    return 0;
  }
  CFBooleanRef result = (const __CFBoolean *)sub_10001E404((uint64_t)a1, @"WiFiNetworkAttributeIsPublic");
  if (!result) {
    return result;
  }
  CFBooleanRef v3 = result;
  CFTypeID v4 = CFGetTypeID(result);
  if (v4 != CFBooleanGetTypeID())
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: invalid value type" args:("WiFiNetworkIsInfrequentlyJoinedPublicNetwork")];
    }
LABEL_12:
    return 0;
  }
  CFBooleanRef result = (const __CFBoolean *)CFBooleanGetValue(v3);
  if (result) {
    return (const __CFBoolean *)(sub_1000C99F4(a1) > 1209600.0);
  }
  return result;
}

BOOL sub_1000CE2A8(uint64_t a1)
{
  CFBooleanRef v1 = (CFBooleanRef)sub_10001E404(a1, @"CaptiveBypass");
  return v1 && v1 == kCFBooleanTrue;
}

void sub_1000CE2E4(uint64_t a1, const void *a2)
{
  if (a1)
  {
    sub_10001C6A4(a1, @"BundleIdentifier", a2);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" :@"WiFiNetworkAddBundleIdentifier"];
    }
  }
}

const void *sub_1000CE384(uint64_t a1)
{
  if (a1)
  {
    return sub_10001E404(a1, @"BundleIdentifier");
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkGetBundleIdentifier")
    }
    return 0;
  }
}

void sub_1000CE418(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    sub_10001A610(a1, @"NetworkOriginator", a2);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkAddOriginator")];
    }
  }
}

void sub_1000CE4BC(uint64_t a1, const void *a2)
{
  if (a1)
  {
    sub_10001C6A4(a1, @"NetworkOriginatorName", a2);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkSetOriginatorName")];
    }
  }
}

CFNumberRef sub_1000CE55C(uint64_t a1)
{
  if (a1)
  {
    CFNumberRef v1 = (const __CFNumber *)sub_10001E404(a1, @"NetworkOriginator");
    return sub_10001EACC(v1);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" arguments:("WiFiNetworkGetOriginator")];
    }
    return 0;
  }
}

uint64_t sub_1000CE5DC(uint64_t a1)
{
  uint64_t v1 = 1;
  unsigned int valuePtr = 1;
  CFNumberRef v2 = (const __CFNumber *)sub_10001E404(a1, @"UserRole");
  if (v2)
  {
    CFNumberGetValue(v2, kCFNumberIntType, &valuePtr);
    return valuePtr;
  }
  return v1;
}

uint64_t sub_1000CE630(const __CFArray *a1, uint64_t a2)
{
  CFIndex v2 = -1;
  if (a1 && a2 && CFArrayGetCount(a1) >= 1)
  {
    CFIndex v2 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (CFTypeRef *)CFArrayGetValueAtIndex(a1, v2);
      if (ValueAtIndex)
      {
        CFBooleanRef v6 = ValueAtIndex;
        CFTypeID v7 = CFGetTypeID(ValueAtIndex);
        uint64_t v8 = qword_10027D710;
        if (!qword_10027D710)
        {
          pthread_once(&stru_10027CCA8, (void (*)(void))sub_1000C5C5C);
          uint64_t v8 = qword_10027D710;
        }
        if (v7 == v8 && sub_10001AE0C(v6[2], *(const void **)(a2 + 16), @"SSID_STR")) {
          break;
        }
      }
      if (++v2 >= CFArrayGetCount(a1)) {
        return -1;
      }
    }
  }
  return v2;
}

BOOL sub_1000CE714(uint64_t a1)
{
  if (a1)
  {
    CFNumberRef v1 = (const __CFNumber *)sub_10001E404(a1, @"NetworkOriginator");
    return sub_10001EACC(v1) == 2;
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkIsCarrierBundleBased")];
    }
    return 0;
  }
}

const void *sub_1000CE79C(uint64_t a1)
{
  if (a1)
  {
    return sub_10001E404(a1, @"WiFiNetworkDisabledUntilDate");
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkGetDisabledUntilDate")];
    }
    return 0;
  }
}

CFArrayRef sub_1000CE830(const void *a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkCanExposeIMSI")];
    }
    goto LABEL_17;
  }
  if (!sub_10001FB80((uint64_t)a1, 18) && !sub_10001FB80((uint64_t)a1, 23))
  {
    CFArrayRef result = sub_10001FB80((uint64_t)a1, 50);
    if (!result) {
      return result;
    }
  }
  CFDictionaryRef v3 = (const __CFDictionary *)sub_10001E404((uint64_t)a1, @"EnterpriseProfile");
  if (!v3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: no eapProfile for %@", "WiFiNetworkCanExposeIMSI", sub_10001A43C(a1) message];
    }
    CFIndex v9 = v8;
    goto LABEL_18;
  }
  CFStringRef Value = CFDictionaryGetValue(v3, @"EAPClientConfiguration");
  CFTypeID v5 = CFGetTypeID(Value);
  if (v5 != CFDictionaryGetTypeID())
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: invalid EAP client configuration" : @"WiFiNetworkCanExposeIMSI"];
    }
LABEL_17:
    CFIndex v9 = v7;
LABEL_18:
    return 0;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)Value, @"EAPSIMAKAEncryptedIdentityEnabled"))
  {
    CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)Value, @"EAPSIMAKAEncryptedIdentityEnabled");
    return (const __CFArray *)(sub_10001EACC(v6) == 0);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: missing encrypted identity key" :@"WiFiNetworkCanExposeIMSI"];
    }
    return (const __CFArray *)1;
  }
}

void sub_1000CE9FC(uint64_t a1)
{
  if (a1)
  {
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"enabled")) {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), @"enabled");
    }
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"lastAutoJoined")) {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), @"lastAutoJoined");
    }
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"lastJoined")) {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), @"lastJoined");
    }
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"prevJoined")) {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), @"prevJoined");
    }
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"lastRoamed"))
    {
      CFIndex v2 = *(__CFDictionary **)(a1 + 16);
      CFDictionaryRemoveValue(v2, @"lastRoamed");
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkRemoveInternalProperties")];
    }
  }
}

CFDictionaryRef *sub_1000CEB50(CFDictionaryRef *result)
{
  char valuePtr = -1;
  if (result)
  {
    CFArrayRef result = (CFDictionaryRef *)CFDictionaryGetValue(result[2], @"11U_INTERWORKING_IE");
    if (result)
    {
      CFArrayRef result = (CFDictionaryRef *)CFDictionaryGetValue((CFDictionaryRef)result, @"INTERWORKING_ACCESS_VENTURE_GRP");
      if (result)
      {
        CFNumberGetValue((CFNumberRef)result, kCFNumberSInt8Type, &valuePtr);
        return (CFDictionaryRef *)(valuePtr == 11);
      }
    }
  }
  return result;
}

CFDictionaryRef *sub_1000CEBB4(CFDictionaryRef *result)
{
  char valuePtr = -1;
  if (result)
  {
    CFArrayRef result = (CFDictionaryRef *)CFDictionaryGetValue(result[2], @"11U_INTERWORKING_IE");
    if (result)
    {
      CFArrayRef result = (CFDictionaryRef *)CFDictionaryGetValue((CFDictionaryRef)result, @"INTERWORKING_ACCESS_VENTURE_GRP");
      if (result)
      {
        CFNumberGetValue((CFNumberRef)result, kCFNumberSInt8Type, &valuePtr);
        return (CFDictionaryRef *)(valuePtr == 10);
      }
    }
  }
  return result;
}

CFDictionaryRef sub_1000CEC18(uint64_t a1)
{
  char valuePtr = -1;
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"11U_INTERWORKING_IE");
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"INTERWORKING_ACCESS_NETWORK_TYPE");
    if (result)
    {
      CFNumberGetValue(result, kCFNumberSInt8Type, &valuePtr);
      char v2 = valuePtr + 1;
      if (valuePtr + 1) < 0x13u && ((0x6007Fu >> v2))
      {
        return (const __CFDictionary *)dword_1001CB7A4[v2];
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s unhandled type trying to convert from apple8021_access_network_t -> WiFiAdvertisedNetworkType" : @"WiFiNetworkGetAdvertisedNetworkType"];
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000CECEC(CFDictionaryRef *a1, void *a2)
{
  uint64_t v13 = 0;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: network %@ path %@", "WiFiNetworkArchiveToPath", sub_10001A43C(a1), a2, v13 message];
  }
  id v5 = [a2 stringByDeletingLastPathComponent];
  if ([+[NSFileManager defaultManager](NSFileManager, "defaultManager") fileExistsAtPath:v5]|| [+[NSFileManager defaultManager] createDirectoryAtPath:v5 withIntermediateDirectories:0 attributes:0 error:&v13])
  {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, a1[2]);
    CFTypeID v7 = +[NSPropertyListSerialization dataWithPropertyList:Copy format:200 options:0 error:0];
    if (v7)
    {
      if ([+[NSFileManager defaultManager] createFileAtPath:a2 contents:v7 attributes:0])
      {
        uint64_t v8 = 1;
        if (!Copy) {
          return v8;
        }
        goto LABEL_17;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: unable to archive network dictionary in %@", "WiFiNetworkArchiveToPath", a2 message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, "%s: unable to archive network dictionary", "WiFiNetworkArchiveToPath", v12];
      }
    }
    uint64_t v8 = 0;
    if (Copy) {
LABEL_17:
    }
      CFRelease(Copy);
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: unable to create directory at path %@", "WiFiNetworkArchiveToPath", v5 message];
    }
    return 0;
  }
  return v8;
}

_WORD *sub_1000CEECC(uint64_t a1)
{
  if (!a1)
  {
    id v5 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_13;
    }
    CFNumberRef v6 = "%s: path is nil";
LABEL_9:
    uint64_t v7 = 3;
LABEL_12:
    [v5 WFLog:v7 message:v6 WFLogType:v8];
    goto LABEL_13;
  }
  char v2 = [+[NSFileManager defaultManager] contentsAtPath:a1];
  if (!v2)
  {
    id v5 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_13;
    }
    uint64_t v8 = a1;
    CFNumberRef v6 = "%s: data at path %@ is nil";
    goto LABEL_9;
  }
  CFDictionaryRef result = sub_100019658(0, +[NSPropertyListSerialization propertyListWithData:v2 options:0 format:0 error:0]);
  if (!result)
  {
    id v5 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v8 = a1;
      CFNumberRef v6 = "%s: unable to create WiFiNetworkRef at path %@";
      uint64_t v7 = 4;
      goto LABEL_12;
    }
LABEL_13:
    return 0;
  }
  return result;
}

uint64_t sub_1000CEFE4(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_1000CEFEC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 24);
}

void sub_1000CEFF4(const void *a1, int a2)
{
  int valuePtr = a2;
  if (a1)
  {
    if ((a2 - 1) > 1)
    {
      int valuePtr = 0;
      CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Setting NOI work-state for '%@' to 'Unknown'", "WiFiNetworkSetNetworkOfInterestWorkType", sub_10001A43C(a1) message];
      }
    }
    else
    {
      id v5 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFNumberRef v6 = sub_10001A43C(a1);
        uint64_t v7 = "NotWork";
        if (a2 == 1) {
          uint64_t v7 = "Work";
        }
        [v5 WFLog:3, "%s: Setting NOI work-state for '%@' to '%s'", "WiFiNetworkSetNetworkOfInterestWorkType", v6, v7 message];
      }
      CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    }
    sub_10001C6A4((uint64_t)a1, @"NetworkOfInterestWorkState", v8);
    if (v8) {
      CFRelease(v8);
    }
  }
}

CFNumberRef sub_1000CF14C(uint64_t a1)
{
  unsigned int valuePtr = 0;
  if (a1)
  {
    CFNumberRef result = (const __CFNumber *)sub_10001E404(a1, @"NetworkOfInterestWorkState");
    if (result)
    {
      int Value = CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr - 3 >= 0xFFFFFFFE || Value == 0) {
        return (const __CFNumber *)valuePtr;
      }
      else {
        return 0;
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkGetNetworkOfInterestWorkType")];
    }
    return 0;
  }
  return result;
}

void sub_1000CF1F0(const void *a1, int a2)
{
  int valuePtr = a2;
  if (a1)
  {
    if ((a2 - 1) > 1)
    {
      int valuePtr = 0;
      CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Setting NOI home-state for '%@' to 'Unknown'", "WiFiNetworkSetNetworkOfInterestHomeType", sub_10001A43C(a1) message];
      }
    }
    else
    {
      id v5 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFNumberRef v6 = sub_10001A43C(a1);
        [v5 WFLog:3, "%s: Setting NOI home-state for '%@' to '%@'", "WiFiNetworkSetNetworkOfInterestHomeType", v6, sub_10005AE9C(a2) message];
      }
      CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    }
    sub_10001C6A4((uint64_t)a1, @"NetworkOfInterestHomeState", v7);
    if (v7) {
      CFRelease(v7);
    }
  }
}

void sub_1000CF344(const void *a1, int a2)
{
  if (a1)
  {
    CFTypeID v4 = (const void **)&kCFBooleanFalse;
    if (a2) {
      CFTypeID v4 = (const void **)&kCFBooleanTrue;
    }
    sub_10001C6A4((uint64_t)a1, @"NetworkForcedHomeFix", *v4);
    if (a2)
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFDateRef v6 = CFDateCreate(kCFAllocatorDefault, Current);
      sub_1000CF44C(a1, v6);
      if (v6)
      {
        CFRelease(v6);
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" :@"WiFiNetworkSetForcedHomeFix"];
    }
  }
}

void sub_1000CF44C(const void *a1, const void *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" args:("WiFiNetworkSetLastHomeForceFixDate", nil)];
    }
    goto LABEL_13;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null modDate", "WiFiNetworkSetLastHomeForceFixDate")];
    }
LABEL_13:
    CFNumberRef v7 = v6;
    goto LABEL_17;
  }
  CFTypeID v4 = sub_10001A43C(a1);
  if (v4)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: for network <%@>, modDate %@", "WiFiNetworkSetLastHomeForceFixDate", v4, a2 message];
    }
    sub_10001C6A4((uint64_t)a1, @"kWiFiNetworkLastHomeForceFixDateKey", a2);
    return;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s: null ssid", "WiFiNetworkSetLastHomeForceFixDate"];
  }
  CFNumberRef v7 = v5;
LABEL_17:
}

uint64_t sub_1000CF5AC(uint64_t a1)
{
  unsigned int valuePtr = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" :@"WiFiNetworkGetLOIType"];
    }
    goto LABEL_6;
  }
  CFNumberRef v1 = (const __CFNumber *)sub_10001E404(a1, @"NetworkAtLocationOfInterestType");
  if (!v1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null stateRef" : @"WiFiNetworkGetLOIType"];
    }
    goto LABEL_6;
  }
  if (!CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Failed to get kWiFiNetworkAtLocationOfInterestTypeKey", @"WiFiNetworkGetLOIType"];
    }
LABEL_6:
  }
  return valuePtr;
}

void sub_1000CF69C(const void *a1, unsigned int a2)
{
  unsigned int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  id v5 = (void *)qword_10027DD68;
  if (v3)
  {
    if (qword_10027DD68)
    {
      CFStringRef v6 = sub_10005AF18(valuePtr);
      [v5 WFLog:3, "%s: Setting NetworkLocationOfInterestType=%@(%d) for %@", "WiFiNetworkSetLOIType", v6, valuePtr, sub_10001A43C(a1) message];
    }
    sub_10001C6A4((uint64_t)a1, @"NetworkAtLocationOfInterestType", v3);
    CFRelease(v3);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: Failed to create CFNumber while setting NetworkAtLocationOfInterestType=%d", "WiFiNetworkSetLOIType", valuePtr];
    }
  }
}

BOOL sub_1000CF7A8(const void *a1)
{
  CFNumberRef v1 = sub_10001A43C(a1);
  if (qword_10027D720) {
    BOOL v2 = v1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  return !v2 && CFSetContainsValue((CFSetRef)qword_10027D720, v1);
}

CFNumberRef sub_1000CF7EC(const __CFNumber *result)
{
  if (result)
  {
    if (*((void *)result + 2))
    {
      CFNumberRef v1 = (const __CFNumber *)sub_10001E404((uint64_t)result, @"ShareableStatus");
      return sub_10001EACC(v1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1000CF82C(uint64_t a1, const void *a2)
{
  if (a1) {
    sub_10001C6A4(a1, @"WalletIdentifier", a2);
  }
}

const void *sub_1000CF848(const void *result)
{
  if (result) {
    return sub_10001E404((uint64_t)result, @"WalletIdentifier");
  }
  return result;
}

void sub_1000CF860(uint64_t a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  values = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  if (values)
  {
    CFArrayRef v3 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
    if (!v3)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, "%s: build array failed for mode (%d)", "WiFiNetworkUpdateWPARSNAuthType", valuePtr];
      }
      goto LABEL_40;
    }
    CFArrayRef v4 = v3;
    if ((unint64_t)(valuePtr - 1) < 2)
    {
      CFDictionaryRef v13 = (const __CFDictionary *)sub_10001E404(a1, @"RSN_IE");
      if (v13)
      {
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v13);
        if (MutableCopy)
        {
          uint64_t v15 = MutableCopy;
          CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v13, @"IE_KEY_RSN_AUTHSELS");
          if (!Value || CFArrayGetCount(Value) >= 2)
          {
            CFDictionaryReplaceValue(v15, @"IE_KEY_RSN_AUTHSELS", v4);
            sub_10001C6A4(a1, @"RSN_IE", v15);
          }
          CFRelease(v15);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s RSN auth type (%d) has no RSN IE", "WiFiNetworkUpdateWPARSNAuthType", valuePtr);
        }
      }
      CFDictionaryRef v19 = (const __CFDictionary *)sub_10001E404(a1, @"WPA_IE");
      if (v19)
      {
        CFDictionaryRef v20 = v19;
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (sub_10005A924(TypeID, v20))
        {
          CFMutableDictionaryRef v22 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v20);
          if (v22)
          {
            CFNumberRef v8 = v22;
            CFArrayRef v23 = (const __CFArray *)CFDictionaryGetValue(v13, @"IE_KEY_WPA_AUTHSELS");
            if (v23 && CFArrayGetCount(v23) < 2) {
              goto LABEL_35;
            }
            CFDictionaryReplaceValue(v8, @"IE_KEY_WPA_AUTHSELS", v4);
            int v10 = @"WPA_IE";
            goto LABEL_34;
          }
LABEL_39:
          CFRelease(v4);
LABEL_40:
          if (values) {
            CFRelease(values);
          }
          return;
        }
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, "%s WPA auth type (%d) has no WPA IE", "WiFiNetworkUpdateWPARSNAuthType", valuePtr];
      }
    }
    else
    {
      if (valuePtr != 8 && valuePtr != 12) {
        goto LABEL_39;
      }
      CFDictionaryRef v5 = (const __CFDictionary *)sub_10001E404(a1, @"RSN_IE");
      if (v5)
      {
        CFDictionaryRef v6 = v5;
        CFMutableDictionaryRef v7 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v5);
        if (v7)
        {
          CFNumberRef v8 = v7;
          CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(v6, @"IE_KEY_RSN_AUTHSELS");
          if (v9 && CFArrayGetCount(v9) < 2) {
            goto LABEL_35;
          }
          CFDictionaryReplaceValue(v8, @"IE_KEY_RSN_AUTHSELS", v4);
          int v10 = @"RSN_IE";
LABEL_34:
          sub_10001C6A4(a1, v10, v8);
LABEL_35:
          CFRelease(v8);
          goto LABEL_39;
        }
        goto LABEL_39;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, "%s RSN auth type (%d) has no RSN IE", "WiFiNetworkUpdateWPARSNAuthType", valuePtr];
      }
    }
    goto LABEL_39;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: build number failed for mode(%d)", @"WiFiNetworkUpdateWPARSNAuthType", valuePtr];
  }
}

uint64_t sub_1000CFBD8(uint64_t a1)
{
  if (a1)
  {
    CFNumberRef v2 = (const __CFNumber *)sub_10001E404(a1, @"kWiFiNetworkSSIDHarvestStatusKey");
    uint64_t result = (uint64_t)sub_10001EACC(v2);
    if (!result)
    {
      CFBooleanRef v4 = (CFBooleanRef)sub_10001E404(a1, @"WiFiNetworkAttributeHighPopularity");
      if (v4 == kCFBooleanTrue)
      {
        if (sub_10001E404(a1, @"WiFiNetworkAttributeIsPublic") == v4) {
          return 3;
        }
        else {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkGetHarvestSSIDStatus")];
    }
    return 1;
  }
  return result;
}

void sub_1000CFCB4(uint64_t a1)
{
  if (a1)
  {
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"enabled")) {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), @"enabled");
    }
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"WiFiNetworkDisabledUntilDate")) {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), @"WiFiNetworkDisabledUntilDate");
    }
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"networkDisabledClientName")) {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), @"networkDisabledClientName");
    }
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"networkDisabledReason")) {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), @"networkDisabledReason");
    }
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"networkDisabledTimestamp"))
    {
      CFNumberRef v2 = *(__CFDictionary **)(a1 + 16);
      CFDictionaryRemoveValue(v2, @"networkDisabledTimestamp");
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" args:("WiFiNetworkRemoveAutoJoinProperties", NULL)];
    }
  }
}

const void *sub_1000CFE54(uint64_t a1)
{
  if (a1)
  {
    return sub_10001E404(a1, @"PrivacyProxyBlockedReason");
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" :@"WiFiNetworkGetPrivacyProxyBlockedReason"];
    }
    return 0;
  }
}

_WORD *sub_1000CFEE8(void *a1, void *a2)
{
  uint64_t v5 = sub_10001E534();
  CFDictionaryRef v6 = 0;
  if (a1 && v5)
  {
    sub_10001E534();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      CFDictionaryRef v6 = 0;
      goto LABEL_223;
    }
    id v7 = +[NSMutableDictionary dictionary];
    if (!a2 || [a2 containsObject:&off_100262F80])
    {
      [v7 addEntriesFromDictionary:[a1 OSSpecificAttributes]];
      if (![v7 objectForKey:@"AP_MODE"]) {
        [v7 setObject:&off_100262F38 forKeyedSubscript:@"AP_MODE"];
      }
    }
    id v8 = [a1 coreWiFiSpecificAttributes];
    uint64_t v82 = CWFCoreWiFiSpecificAttributesKey;
    [v7 setObject:v8 forKeyedSubscript:];
    long long v80 = v4;
    if (a2)
    {
      if ([a2 containsObject:&off_100262F98])
      {
        [v7 setObject:[a1 SSID] forKeyedSubscript:@"SSID"];
        [v7 setObject:objc_msgSend(a1, "networkName") forKeyedSubscript:@"SSID_STR"];
      }
      if (([a2 containsObject:&off_100262FB0] & 1) == 0)
      {
LABEL_61:
        if (![a2 containsObject:&off_100263028])
        {
LABEL_65:
          if (![a2 containsObject:&off_100263040]) {
            goto LABEL_72;
          }
LABEL_66:
          if ([a1 hiddenState] == (id)1)
          {
            CFDateRef v30 = &__kCFBooleanTrue;
          }
          else
          {
            if ([a1 hiddenState] != (id)2) {
              goto LABEL_71;
            }
            CFDateRef v30 = &__kCFBooleanFalse;
          }
          [v7 setObject:v30 forKeyedSubscript:@"UserDirected"];
LABEL_71:
          if (!a2)
          {
LABEL_73:
            if ([a1 isPasswordSharingDisabled]) {
              [v7 setObject:&off_100262F38 forKeyedSubscript:@"ShareMode"];
            }
            if (!a2)
            {
              [v7 setObject:objc_msgSend(a1, "payloadUUID") forKeyedSubscript:@"PayloadUUID"];
LABEL_81:
              [v7 setObject:a1 bundleID forKeyedSubscript:@"BundleIdentifier"];
              if (!a2)
              {
                if ([a1 isAutoJoinDisabled]) {
                  CFArrayRef v32 = &__kCFBooleanFalse;
                }
                else {
                  CFArrayRef v32 = &__kCFBooleanTrue;
                }
                [v7 setObject:v32 forKeyedSubscript:@"enabled"];
LABEL_93:
                id v33 = [a1 lowDataMode];
                CFIndex v34 = &off_100262E78;
                if (v33 == (id)2) {
                  CFIndex v34 = &off_100262F38;
                }
                if (v33 == (id)1) {
                  CFNumberRef v35 = &off_100262E90;
                }
                else {
                  CFNumberRef v35 = v34;
                }
                [v7 setObject:v35 forKeyedSubscript:@"SaveDataMode"];
                if (!a2)
                {
                  [v7 setObject:[a1 lastJoinedByUserAt] forKeyedSubscript:@"lastJoined"];
LABEL_104:
                  [v7 setObject:objc_msgSend(a1, "lastJoinedBySystemAt") forKeyedSubscript:@"lastAutoJoined"];
                  if (!a2)
                  {
LABEL_106:
                    id v36 = [a1 addReason];
                    CFArrayRef v37 = 0;
                    char v38 = 1;
                    CFIndex v39 = &off_100262ED8;
                    CFDictionaryRef v40 = &off_100262E90;
                    switch((unint64_t)v36)
                    {
                      case 2uLL:
                      case 3uLL:
                      case 4uLL:
                      case 5uLL:
                        goto LABEL_107;
                      case 6uLL:
                        CFDictionaryRef v40 = &off_100262F68;
                        goto LABEL_107;
                      case 7uLL:
                        CFArrayRef v37 = 0;
                        CFIndex v39 = &off_100262E90;
                        CFDictionaryRef v40 = &off_100262F50;
                        goto LABEL_119;
                      case 8uLL:
                        CFDictionaryRef v40 = &off_100262EA8;
                        goto LABEL_107;
                      case 9uLL:
                        CFDictionaryRef v40 = &off_100263130;
                        goto LABEL_107;
                      case 0xAuLL:
                        CFArrayRef v37 = 0;
                        CFDictionaryRef v40 = &off_100262F38;
                        goto LABEL_119;
                      case 0xBuLL:
                        CFDictionaryRef v40 = &off_100262FE0;
                        goto LABEL_107;
                      case 0xCuLL:
                        CFArrayRef v37 = 0;
                        CFIndex v39 = &off_100262E90;
                        CFDictionaryRef v40 = &off_100262EC0;
                        goto LABEL_119;
                      case 0xDuLL:
                        CFDictionaryRef v40 = &off_100262EC0;
LABEL_107:
                        CFStringRef v41 = @"WiFiManagerKnownNetworksEventType";
                        BOOL v42 = v7;
                        int v43 = v40;
                        goto LABEL_121;
                      case 0xEuLL:
                        CFArrayRef v37 = 0;
                        CFDictionaryRef v40 = &off_100262E78;
                        goto LABEL_119;
                      case 0xFuLL:
                        goto LABEL_119;
                      case 0x10uLL:
                        [v7 setObject:&off_100263118 forKeyedSubscript:@"WiFiManagerKnownNetworksEventType"];
                        CFArrayRef v37 = &off_100262FB0;
                        goto LABEL_120;
                      case 0x11uLL:
                        char v38 = 0;
                        CFArrayRef v37 = &off_100262F98;
                        CFIndex v39 = &off_100263118;
                        CFDictionaryRef v40 = &off_100262EA8;
LABEL_119:
                        [v7 setObject:v39 forKeyedSubscript:@"WiFiManagerKnownNetworksEventType"];
                        [v7 setObject:v40 forKeyedSubscript:@"NetworkOriginator"];
                        if ((v38 & 1) == 0)
                        {
LABEL_120:
                          CFStringRef v41 = @"WiFiNetworkAttributeSource";
                          BOOL v42 = v7;
                          int v43 = v37;
LABEL_121:
                          [v42 setObject:v43 forKeyedSubscript:v41];
                        }
                        break;
                      default:
                        break;
                    }
                    if (!a2)
                    {
                      [v7 setObject:objc_msgSend(a1, "addedAt", v39) forKeyedSubscript:@"addedAt"];
LABEL_128:
                      id v44 = [a1 EAPProfile];
                      if (v44)
                      {
                        CFStringRef v88 = @"EAPClientConfiguration";
                        id v89 = v44;
                        CFDictionaryRef v45 = +[NSDictionary dictionaryWithObjects:&v89 forKeys:&v88 count:1];
                      }
                      else
                      {
                        CFDictionaryRef v45 = 0;
                      }
                      [v7 setObject:v45 forKeyedSubscript:@"EnterpriseProfile"];
                      if (!a2)
                      {
                        [v7 setObject:[a1 domainName] forKeyedSubscript:@"DomainName"];
LABEL_137:
                        [v7 setObject:objc_msgSend(a1, "displayedOperatorName") forKeyedSubscript:@"DisplayedOperatorName"];
                        if (!a2)
                        {
                          [v7 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [a1 isServiceProviderRoamingEnabled])] forKeyedSubscript:@"SPRoaming"];
LABEL_143:
                          [v7 setObject:[a1 cellularNetworkInfo] forKeyedSubscript:@"MCCandMNC"];
                          if (!a2)
                          {
                            [v7 setObject:objc_msgSend(a1, "NAIRealmNameList") forKeyedSubscript:@"NaiRealmName"];
LABEL_149:
                            [v7 setObject:[a1 roamingConsortiumList] forKeyedSubscript:@"RoamingConsortiumOIs"];
                            if (!a2)
                            {
                              [v7 setObject:[a1 userPreferredNetworkNames] forKeyedSubscript:@"userPreferredNetworkNames"];
LABEL_155:
                              [v7 setObject:objc_msgSend(a1, "userPreferredPasspointDomains") forKeyedSubscript:@"userPreferredPasspointDomains"];
                              if (!a2)
                              {
                                [v7 setObject:objc_msgSend(a1, "networkGroupID") forKeyedSubscript:@"networkGroupID"];
LABEL_161:
                                [v7 setObject:[a1 networkGroupPriority] forKeyedSubscript:@"networkGroupPriority"];
                                if (!a2)
                                {
                                  [v7 setObject:[a1 lastDiscoveredAt] forKeyedSubscript:@"discoveredAt"];
LABEL_167:
                                  id v46 = +[NSMutableSet set];
                                  id v47 = [a1 BSSList];
                                  if (v47)
                                  {
                                    CFIndex v48 = v47;
                                    unsigned int v77 = a2;
                                    CFNumberRef v78 = v7;
                                    unsigned int v79 = a1;
                                    long long v85 = 0u;
                                    long long v86 = 0u;
                                    long long v83 = 0u;
                                    long long v84 = 0u;
                                    id v49 = [v47 countByEnumeratingWithState:&v83 objects:v87 count:16];
                                    if (v49)
                                    {
                                      id v50 = v49;
                                      id v51 = 0;
                                      uint64_t v52 = *(void *)v84;
                                      uint64_t v53 = &objc_retainAutoreleaseReturnValue_ptr;
                                      CFStringRef v81 = v48;
                                      do
                                      {
                                        for (CFIndex i = 0; i != v50; CFIndex i = (char *)i + 1)
                                        {
                                          if (*(void *)v84 != v52) {
                                            objc_enumerationMutation(v48);
                                          }
                                          CFStringRef v55 = *(void **)(*((void *)&v83 + 1) + 8 * i);
                                          id v56 = [v55 BSSID];
                                          if (v56)
                                          {
                                            CFIndex v57 = (const char *)[v56 UTF8String];
                                            if (v57)
                                            {
                                              CFTypeID v58 = ether_aton(v57);
                                              if (v58)
                                              {
                                                CFDictionaryRef v59 = ether_ntoa(v58);
                                                if (v59)
                                                {
                                                  id v60 = [v53[298] stringWithUTF8String:v59];
                                                  if (v60)
                                                  {
                                                    id v61 = v60;
                                                    if (([v46 containsObject:v60] & 1) == 0)
                                                    {
                                                      [v46 addObject:v61];
                                                      id v62 = +[NSMutableDictionary dictionary];
                                                      [v62 addEntriesFromDictionary:[v55 OSSpecificAttributes]];
                                                      [v62 setObject:v61 forKeyedSubscript:@"BSSID"];
                                                      id v63 = [v55 channel];
                                                      if (v63)
                                                      {
                                                        CFMutableDictionaryRef v64 = v63;
                                                        [v62 setObject:+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v63 channel]) forKeyedSubscript:@"CHANNEL"];
                                                        [v62 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v64 flags]) forKeyedSubscript:@"CHANNEL_FLAGS"];
                                                      }
                                                      id v65 = [v55 location];
                                                      if (v65)
                                                      {
                                                        CFDictionaryRef v66 = v65;
                                                        [v65 coordinate];
                                                        [v62 setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:")] forKeyedSubscript:@"networkLocnLat"];
                                                        [v66 coordinate];
                                                        [v62 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v67) forKeyedSubscript:@"networkLocnLong"];
                                                        [v66 horizontalAccuracy];
                                                        [v62 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:") forKeyedSubscript:@"networkLocnAccuracy"];
                                                        [v62 setObject:objc_msgSend(v66, "timestamp") forKeyedSubscript:@"networkLocnTimestamp"];
                                                      }
                                                      [v62 setObject:objc_msgSend(v55, "lastAssociatedAt") forKeyedSubscript:@"lastRoamed"];
                                                      id v68 = [v55 colocated2GHzRNRChannel];
                                                      if (v68)
                                                      {
                                                        unsigned int v69 = v68;
                                                        [v62 setObject:+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v68, "channel")) forKeyedSubscript:@"colocated2GHzRNRChannel"];
                                                        [v62 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v69 flags]) forKeyedSubscript:@"colocated2GHzRNRChannelFlags"];
                                                      }
                                                      id v70 = [v55 colocated5GHzRNRChannel];
                                                      if (v70)
                                                      {
                                                        CFDataRef v71 = v70;
                                                        [v62 setObject:[+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v70, "channel"))] forKeyedSubscript:@"colocated5GHzRNRChannel"];
                                                        [v62 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v71 flags]) forKeyedSubscript:@"colocated5GHzRNRChannelFlags"];
                                                      }
                                                      [v62 setObject:objc_msgSend(v55, "AWDLRealTimeModeTimestamp") forKeyedSubscript:@"AWDLRealTimeModeTimestamp"];
                                                      [v62 setObject:objc_msgSend(v55, "IPv4NetworkSignature") forKeyedSubscript:@"IPv4NetworkSignature"];
                                                      [v62 setObject:objc_msgSend(v55, "IPv6NetworkSignature") forKeyedSubscript:@"IPv6NetworkSignature"];
                                                      [v62 setObject:objc_msgSend(v55, "DHCPServerID") forKeyedSubscript:@"DHCPServerID"];
                                                      [v62 setObject:objc_msgSend(v55, "DHCPv6ServerID") forKeyedSubscript:@"DHCPv6ServerID"];
                                                      [v62 setObject:objc_msgSend(v55, "coreWiFiSpecificAttributes") forKeyedSubscript:v82];
                                                      if (!v51) {
                                                        id v51 = +[NSMutableArray array];
                                                      }
                                                      [v51 addObject:v62];
                                                      CFIndex v48 = v81;
                                                      uint64_t v53 = &objc_retainAutoreleaseReturnValue_ptr;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        id v50 = [v48 countByEnumeratingWithState:&v83 objects:v87 count:16];
                                      }
                                      while (v50);
                                    }
                                    else
                                    {
                                      id v51 = 0;
                                    }
                                    id v7 = v78;
                                    [v78 setObject:v51 forKeyedSubscript:@"networkKnownBSSListKey"];
                                    a1 = v79;
                                    CFBooleanRef v4 = v80;
                                    a2 = v77;
                                  }
                                  if (!a2)
                                  {
                                    [v7 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [a1 isPrivacyProxyEnabled])] forKeyedSubscript:@"PrivacyProxyEnabled"];
                                    goto LABEL_201;
                                  }
LABEL_196:
                                  if ([a2 containsObject:&off_100263298]) {
                                    [v7 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [a1 isPrivacyProxyEnabled]) forKeyedSubscript:@"PrivacyProxyEnabled"];
                                  }
                                  if (([a2 containsObject:&off_1002632B0] & 1) == 0)
                                  {
LABEL_202:
                                    if (![a2 containsObject:&off_1002632C8])
                                    {
LABEL_209:
                                      if (![a2 containsObject:&off_1002632E0]) {
                                        goto LABEL_216;
                                      }
LABEL_210:
                                      id v74 = [a1 publicAttribute];
                                      if (v74 == (id)1)
                                      {
                                        long long v75 = &__kCFBooleanTrue;
                                      }
                                      else
                                      {
                                        if (v74 != (id)2) {
                                          goto LABEL_215;
                                        }
                                        long long v75 = &__kCFBooleanFalse;
                                      }
                                      [v7 setObject:v75 forKeyedSubscript:@"WiFiNetworkAttributeIsPublic"];
LABEL_215:
                                      if (!a2)
                                      {
                                        [v7 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [a1 transitionDisabledFlags]) forKeyedSubscript:@"TransitionDisabledFlags"];
LABEL_221:
                                        [v7 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [a1 isStandalone6G])] forKeyedSubscript:@"Standalone"];
LABEL_222:
                                        [v7 setObject:objc_msgSend(a1, "carplayUUID") forKeyedSubscript:@"CARPLAY_UUID"];
                                        [v7 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [a1 isPersonalHotspot])] forKeyedSubscript:@"IsPersonalHotspot"];
                                        [v7 setObject:objc_msgSend(a1, "NANServiceID") forKeyedSubscript:@"WiFiNetworkNANServiceID"];
                                        [v7 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [a1 isPublicAirPlayNetwork]) forKeyedSubscript:@"PublicAirPlayNetwork"];
                                        [v7 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [a1 isDNSHeuristicsFilteredNetwork])] forKeyedSubscript:@"FilteredNetwork"];
                                        [v7 setObject:objc_msgSend(a1, "DNSHeuristicsFailureStateInfo") forKeyedSubscript:@"DNSFailures"];
                                        CFDictionaryRef v6 = sub_100019658((int)kCFAllocatorDefault, v7);
                                        goto LABEL_223;
                                      }
LABEL_216:
                                      if ([a2 containsObject:&off_1002632F8]) {
                                        [v7 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(a1, "transitionDisabledFlags"))] forKeyedSubscript:@"TransitionDisabledFlags"];
                                      }
                                      if (([a2 containsObject:&off_100263310] & 1) == 0) {
                                        goto LABEL_222;
                                      }
                                      goto LABEL_221;
                                    }
LABEL_203:
                                    id v72 = [a1 movingAttribute];
                                    if (v72 == (id)1)
                                    {
                                      uint64_t v73 = &__kCFBooleanTrue;
                                    }
                                    else
                                    {
                                      if (v72 != (id)2) {
                                        goto LABEL_208;
                                      }
                                      uint64_t v73 = &__kCFBooleanFalse;
                                    }
                                    [v7 setObject:v73 forKeyedSubscript:@"WiFiNetworkAttributeIsMoving"];
LABEL_208:
                                    if (!a2) {
                                      goto LABEL_210;
                                    }
                                    goto LABEL_209;
                                  }
LABEL_201:
                                  [v7 setObject:objc_msgSend(a1, "privacyProxyBlockedReason") forKeyedSubscript:@"PrivacyProxyBlockedReason"];
                                  if (!a2) {
                                    goto LABEL_203;
                                  }
                                  goto LABEL_202;
                                }
LABEL_162:
                                if ([a2 containsObject:&off_100263268]) {
                                  [v7 setObject:[a1 lastDiscoveredAt] forKeyedSubscript:@"discoveredAt"];
                                }
                                if (([a2 containsObject:&off_100263280] & 1) == 0) {
                                  goto LABEL_196;
                                }
                                goto LABEL_167;
                              }
LABEL_156:
                              if ([a2 containsObject:&off_100263238]) {
                                [v7 setObject:objc_msgSend(a1, "networkGroupID") forKeyedSubscript:@"networkGroupID"];
                              }
                              if (([a2 containsObject:&off_100263250] & 1) == 0) {
                                goto LABEL_162;
                              }
                              goto LABEL_161;
                            }
LABEL_150:
                            if ([a2 containsObject:&off_100263208]) {
                              [v7 setObject:objc_msgSend(a1, "userPreferredNetworkNames") forKeyedSubscript:@"userPreferredNetworkNames"];
                            }
                            if (([a2 containsObject:&off_100263220] & 1) == 0) {
                              goto LABEL_156;
                            }
                            goto LABEL_155;
                          }
LABEL_144:
                          if ([a2 containsObject:&off_1002631D8]) {
                            [v7 setObject:objc_msgSend(a1, "NAIRealmNameList") forKeyedSubscript:@"NaiRealmName"];
                          }
                          if (([a2 containsObject:&off_1002631F0] & 1) == 0) {
                            goto LABEL_150;
                          }
                          goto LABEL_149;
                        }
LABEL_138:
                        if ([a2 containsObject:&off_1002631A8]) {
                          [v7 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [a1 isServiceProviderRoamingEnabled])] forKeyedSubscript:@"SPRoaming"];
                        }
                        if (([a2 containsObject:&off_1002631C0] & 1) == 0) {
                          goto LABEL_144;
                        }
                        goto LABEL_143;
                      }
LABEL_132:
                      if ([a2 containsObject:&off_100263178]) {
                        [v7 setObject:objc_msgSend(a1, "domainName") forKeyedSubscript:@"DomainName"];
                      }
                      if (([a2 containsObject:&off_100263190] & 1) == 0) {
                        goto LABEL_138;
                      }
                      goto LABEL_137;
                    }
LABEL_123:
                    if ([a2 containsObject:&off_100263148]) {
                      [v7 setObject:objc_msgSend(a1, "addedAt") forKeyedSubscript:@"addedAt"];
                    }
                    if (([a2 containsObject:&off_100263160] & 1) == 0) {
                      goto LABEL_132;
                    }
                    goto LABEL_128;
                  }
LABEL_105:
                  if (![a2 containsObject:&off_100263100]) {
                    goto LABEL_123;
                  }
                  goto LABEL_106;
                }
LABEL_99:
                if ([a2 containsObject:&off_1002630D0]) {
                  [v7 setObject:[a1 lastJoinedByUserAt] forKeyedSubscript:@"lastJoined"];
                }
                if (([a2 containsObject:&off_1002630E8] & 1) == 0) {
                  goto LABEL_105;
                }
                goto LABEL_104;
              }
LABEL_82:
              if ([a2 containsObject:&off_1002630A0])
              {
                if ([a1 isAutoJoinDisabled]) {
                  CFArrayRef v31 = &__kCFBooleanFalse;
                }
                else {
                  CFArrayRef v31 = &__kCFBooleanTrue;
                }
                [v7 setObject:v31 forKeyedSubscript:@"enabled"];
              }
              if (([a2 containsObject:&off_1002630B8] & 1) == 0) {
                goto LABEL_99;
              }
              goto LABEL_93;
            }
LABEL_76:
            if ([a2 containsObject:&off_100263070]) {
              [v7 setObject:objc_msgSend(a1, "payloadUUID") forKeyedSubscript:@"PayloadUUID"];
            }
            if (([a2 containsObject:&off_100263088] & 1) == 0) {
              goto LABEL_82;
            }
            goto LABEL_81;
          }
LABEL_72:
          if (![a2 containsObject:&off_100263058]) {
            goto LABEL_76;
          }
          goto LABEL_73;
        }
LABEL_62:
        id v29 = [a1 captiveProfile];
        if (v29) {
          [v7 addEntriesFromDictionary:v29];
        }
        if (!a2) {
          goto LABEL_66;
        }
        goto LABEL_65;
      }
      unsigned __int16 v9 = (unsigned __int16)[a1 supportedSecurityTypes];
      unsigned __int16 v10 = v9;
      if ((v9 & 2) == 0)
      {
        if ((v9 & 1) == 0
          || ([v7 setObject:&__kCFBooleanTrue forKeyedSubscript:@"WEP"],
              ![a2 containsObject:&off_100263010]))
        {
LABEL_31:
          if ((v10 & 0xC) != 0)
          {
            id v18 = +[NSMutableDictionary dictionary];
            [v18 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 1)] forKey:@"IE_KEY_WPA_VERSION"];
            [v18 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 2)] forKey:@"IE_KEY_WPA_MCIPHER"];
            id v19 = +[NSMutableArray array];
            [v19 addObject:[NSNumber numberWithInt:2]];
            [v18 setObject:v19 forKey:@"IE_KEY_WPA_UCIPHERS"];
            id v20 = +[NSMutableArray array];
            if ((v10 & 8) != 0) {
              uint64_t v21 = 1;
            }
            else {
              uint64_t v21 = 2;
            }
            [v20 addObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v21)];
            [v18 setObject:v20 forKey:@"IE_KEY_WPA_AUTHSELS"];
            [v7 setObject:v18 forKeyedSubscript:@"WPA_IE"];
          }
          uint64_t v22 = v10 & 0x300;
          if ((v10 & 0xF0) == 0 && v22 != 256)
          {
LABEL_52:
            if (v22 == 768) {
              [v7 setObject:&__kCFBooleanTrue forKeyedSubscript:@"SCAN_RESULT_OWE_MULTI_SSID"];
            }
            if ([a1 isWPA2]) {
              uint64_t v27 = &__kCFBooleanTrue;
            }
            else {
              uint64_t v27 = &__kCFBooleanFalse;
            }
            [v7 setObject:v27 forKeyedSubscript:@"ALLOW_WPA2_PSK"];
            if ([a1 isOpen]) {
              CFDateRef v28 = &__kCFBooleanTrue;
            }
            else {
              CFDateRef v28 = &__kCFBooleanFalse;
            }
            [v7 setObject:v28 forKeyedSubscript:@"ALLOW_OWE_TSN"];
            CFBooleanRef v4 = v80;
            if (!a2) {
              goto LABEL_62;
            }
            goto LABEL_61;
          }
          id v23 = +[NSMutableDictionary dictionary];
          [v23 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 1)] forKey:@"IE_KEY_RSN_VERSION"];
          [v23 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4)] forKey:@"IE_KEY_RSN_MCIPHER"];
          id v24 = +[NSMutableArray array];
          [v24 addObject:[NSNumber numberWithInt:4]];
          [v23 setObject:v24 forKey:@"IE_KEY_RSN_UCIPHERS"];
          id v25 = +[NSMutableArray array];
          if ((v10 & 0x80) != 0)
          {
            [v25 addObject:[NSNumber numberWithInt:12]];
            if ((v10 & 0x20) == 0)
            {
LABEL_40:
              if ((v10 & 0x40) == 0) {
                goto LABEL_47;
              }
              goto LABEL_44;
            }
          }
          else if ((v10 & 0x20) == 0)
          {
            goto LABEL_40;
          }
          [v25 addObject:[NSNumber numberWithInt:1]];
          if ((v10 & 0x40) == 0)
          {
LABEL_47:
            if (v22 == 256) {
              [v25 addObject:[NSNumber numberWithInt:18]];
            }
            if ((v10 & 0x10) != 0) {
              [v25 addObject:[NSNumber numberWithInt:2]];
            }
            [v23 setObject:v25 forKey:@"IE_KEY_RSN_AUTHSELS"];
            [v7 setObject:v23 forKeyedSubscript:@"RSN_IE"];
            goto LABEL_52;
          }
LABEL_44:
          [v25 addObject:[NSNumber numberWithInt:8]];
          id v26 = +[NSMutableDictionary dictionary];
          [v26 setObject:&__kCFBooleanTrue forKey:@"MFP_CAPABLE"];
          if ((v10 & 0x10) == 0) {
            [v26 setObject:&__kCFBooleanTrue forKey:@"MFP_REQUIRED"];
          }
          [v23 setObject:v26 forKey:@"IE_KEY_RSN_CAPS"];
          goto LABEL_47;
        }
        goto LABEL_19;
      }
      if (![a2 containsObject:&off_100262FC8]) {
        goto LABEL_31;
      }
    }
    else
    {
      [v7 setObject:objc_msgSend(a1, "SSID") forKeyedSubscript:@"SSID"];
      [v7 setObject:[a1 networkName] forKeyedSubscript:@"SSID_STR"];
      unsigned __int16 v11 = (unsigned __int16)[a1 supportedSecurityTypes];
      unsigned __int16 v10 = v11;
      if ((v11 & 2) == 0)
      {
        if ((v11 & 1) == 0) {
          goto LABEL_31;
        }
        [v7 setObject:&__kCFBooleanTrue forKeyedSubscript:@"WEP"];
LABEL_19:
        unint64_t v12 = (unint64_t)[a1 WEPSubtype] - 1;
        if (v12 > 3) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = dword_1001CB7F0[v12];
        }
        CFArrayRef v16 = +[NSNumber numberWithInt:v13];
        CFStringRef v17 = @"WEP_AUTH_Flags";
LABEL_30:
        [v7 setObject:v16 forKeyedSubscript:v17];
        goto LABEL_31;
      }
    }
    id v14 = [a1 WAPISubtype];
    uint64_t v15 = (NSNumber *)&off_100262FF8;
    if (v14 != (id)1) {
      uint64_t v15 = 0;
    }
    if (v14 == (id)2) {
      CFArrayRef v16 = (NSNumber *)&off_100262FE0;
    }
    else {
      CFArrayRef v16 = v15;
    }
    CFStringRef v17 = @"WAPI";
    goto LABEL_30;
  }
LABEL_223:
  return v6;
}

uint64_t sub_1000D14A4(const void **a1, const void **a2)
{
  CFBooleanRef v4 = sub_10001E404((uint64_t)a1, @"WiFiNetworkNANServiceID");
  uint64_t v5 = sub_10001E404((uint64_t)a2, @"WiFiNetworkNANServiceID");
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && CFEqual(v4, v5)) {
    return 1;
  }
  uint64_t result = 0;
  if (!a1 || !a2) {
    return result;
  }
  if (!sub_10001A86C(a1[2], a2[2]))
  {
    if (!sub_1000D35E8(a1, a2, 0))
    {
      int v8 = sub_1000C8E60((uint64_t)a1, (uint64_t)a2);
      return v8 != 0;
    }
    return 1;
  }
  if ((!sub_10001BB2C((BOOL)a1) || sub_10001BB2C((BOOL)a2))
    && (sub_10001BB2C((BOOL)a1) || !sub_10001BB2C((BOOL)a2)))
  {
    uint64_t result = sub_10001B42C((const __CFDictionary *)a1[2], (const __CFDictionary *)a2[2]);
    if (!result) {
      return result;
    }
    int v8 = sub_10001AE0C(a1[2], a2[2], @"AP_MODE");
    return v8 != 0;
  }
  unsigned __int16 v10 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    unsigned __int16 v11 = sub_1000CCB44((uint64_t)a1);
    [v10 WFLog:3, "%s: Same SSID HS20 networks - network1: %@ (domain='%@'), network2: %@ (domain='%@')", "__WiFiNetworkEqualIgnoreAuthType", a1, v11, a2, sub_1000CCB44((uint64_t)a2) message];
  }
  return 0;
}

void *sub_1000D1628(void *a1)
{
  uint64_t v3 = sub_10000B58C();
  if (a1
    && v3
    && (sub_10000B58C(), objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && (id v4 = objc_msgSend(objc_msgSend(a1, "scanRecord"), "mutableCopy")) != 0
    && (uint64_t v5 = v4,
        objc_msgSend(v4, "addEntriesFromDictionary:", objc_msgSend(a1, "OSSpecificAttributes")),
        (BOOL v6 = sub_100019658((int)kCFAllocatorDefault, v5)) != 0))
  {
    id v7 = v6;
    id v8 = [a1 matchingKnownNetworkProfile];
    if (v8)
    {
      unsigned __int16 v9 = (CFDictionaryRef *)sub_1000CFEE8(v8, 0);
      unsigned __int16 v10 = v9;
      if (v9 && (CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v9[2])) != 0)
      {
        CFDictionaryRef v12 = Copy;
        id v13 = [v5 copy];
        [v5 setDictionary:v12];
        [v5 addEntriesFromDictionary:v13];
        id v14 = sub_100019658((int)kCFAllocatorDefault, v5);
        CFRelease(v12);
      }
      else
      {
        id v14 = 0;
      }
    }
    else
    {
      id v14 = (void *)CFRetain(v7);
      unsigned __int16 v10 = 0;
    }
    uint64_t v15 = sub_10001E404((uint64_t)v10, @"WPA_IE");
    CFArrayRef v16 = sub_10001E404((uint64_t)v7, @"WPA_IE");
    CFStringRef v17 = sub_10001E404((uint64_t)v10, @"RSN_IE");
    id v18 = sub_10001E404((uint64_t)v7, @"RSN_IE");
    if (v17 && v15 && v18 && !v16) {
      sub_10001C6A4((uint64_t)v14, @"WPA_IE", 0);
    }
    if (!sub_10001E404((uint64_t)v7, @"BSSID")) {
      sub_10001C6A4((uint64_t)v14, @"BSSID", 0);
    }
    if (v10) {
      CFRelease(v10);
    }
    CFRelease(v7);
  }
  else
  {
    return 0;
  }
  return v14;
}

CFDictionaryRef sub_1000D182C(const __CFDictionary *result)
{
  if (result)
  {
    uint64_t result = (const __CFDictionary *)sub_10001E404((uint64_t)result, @"WPS_PROB_RESP_IE");
    if (result)
    {
      uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, @"IE_KEY_WPS_MANUFACTURER");
      if (result)
      {
        CFDictionaryRef v1 = result;
        CFTypeID TypeID = CFStringGetTypeID();
        if (TypeID == CFGetTypeID(v1)) {
          return v1;
        }
        else {
          return 0;
        }
      }
    }
  }
  return result;
}

CFDictionaryRef sub_1000D188C(const __CFDictionary *result)
{
  if (result)
  {
    uint64_t result = (const __CFDictionary *)sub_10001E404((uint64_t)result, @"WPS_PROB_RESP_IE");
    if (result)
    {
      uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, @"IE_KEY_WPS_MODEL_NAME");
      if (result)
      {
        CFDictionaryRef v1 = result;
        CFTypeID TypeID = CFStringGetTypeID();
        if (TypeID == CFGetTypeID(v1)) {
          return v1;
        }
        else {
          return 0;
        }
      }
    }
  }
  return result;
}

CFDictionaryRef sub_1000D18EC(const __CFDictionary *result)
{
  if (result)
  {
    uint64_t result = (const __CFDictionary *)sub_10001E404((uint64_t)result, @"WPS_PROB_RESP_IE");
    if (result)
    {
      uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, @"IE_KEY_WPS_MODEL_NUM");
      if (result)
      {
        CFDictionaryRef v1 = result;
        CFTypeID TypeID = CFStringGetTypeID();
        if (TypeID == CFGetTypeID(v1)) {
          return v1;
        }
        else {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000D194C(uint64_t a1)
{
  if (a1) {
    sub_10001E404(a1, @"WPS_PROB_RESP_IE");
  }
  return 0;
}

CFDataRef sub_1000D1978(const __CFData *a1, const __CFData *a2, const __CFData *a3, CFStringRef theString)
{
  CFDataRef v4 = 0;
  *(_OWORD *)md = 0u;
  long long v28 = 0u;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  bytes[0] = v5;
  bytes[1] = v5;
  if (a1 && a3)
  {
    if (theString)
    {
      CFAllocatorRef v9 = kCFAllocatorDefault;
      CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(kCFAllocatorDefault, theString, 0x8000100u, 0);
    }
    else
    {
      if (SecRandomCopyBytes(kSecRandomDefault, 0x20uLL, bytes)) {
        return 0;
      }
      CFAllocatorRef v9 = kCFAllocatorDefault;
      CFDataRef ExternalRepresentation = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)bytes, 32);
    }
    CFDataRef v11 = ExternalRepresentation;
    CFMutableArrayRef Mutable = CFDataCreateMutable(v9, 0);
    if (Mutable)
    {
      BytePtr = CFDataGetBytePtr(v11);
      id v14 = CFDataGetBytePtr(a1);
      uint64_t v15 = CFDataGetBytePtr(a3);
      if (a2) {
        CFArrayRef v16 = CFDataGetBytePtr(a2);
      }
      else {
        CFArrayRef v16 = 0;
      }
      CFIndex Length = CFDataGetLength(a1);
      CFDataAppendBytes(Mutable, v14, Length);
      CFDataAppendBytes(Mutable, v15, 6);
      CFIndex v18 = CFDataGetLength(v11);
      CFDataAppendBytes(Mutable, BytePtr, v18);
      if (a2 && v16)
      {
        CFIndex v19 = CFDataGetLength(a2);
        CFDataAppendBytes(Mutable, v16, v19);
      }
      CFIndex v20 = CFDataGetLength(a1);
      CFIndex v21 = v20 + CFDataGetLength(v11) + 6;
      if (a2) {
        LODWORD(v21) = CFDataGetLength(a2) + v21;
      }
      MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
      *(void *)&v25.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v25.wbuf[6] = v23;
      *(_OWORD *)&v25.wbuf[10] = v23;
      *(_OWORD *)&v25.hash[6] = v23;
      *(_OWORD *)&v25.wbuf[2] = v23;
      *(_OWORD *)v25.count = v23;
      *(_OWORD *)&v25.hash[2] = v23;
      CC_SHA256_Init(&v25);
      CC_SHA256_Update(&v25, MutableBytePtr, v21);
      CC_SHA256_Final(md, &v25);
    }
    v25.count[0] = *(_DWORD *)md;
    LOWORD(v25.count[1]) = *(_WORD *)&md[4];
    LOBYTE(v25.count[0]) = md[0] & 0xFC | 2;
    CFDataRef v4 = CFDataCreate(v9, (const UInt8 *)&v25, 6);
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v11) {
      CFRelease(v11);
    }
  }
  return v4;
}

CFDataRef sub_1000D1BF0(const __CFData *a1, const __CFData *a2, CFStringRef theString)
{
  CFDataRef v3 = 0;
  __int16 v22 = 0;
  *(_DWORD *)CFIndex v21 = 0;
  *(_OWORD *)md = 0u;
  long long v27 = 0u;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  bytes[0] = v4;
  bytes[1] = v4;
  *(_OWORD *)long long v23 = v4;
  long long v24 = v4;
  if (a1 && a2)
  {
    if (theString)
    {
      CFAllocatorRef v7 = kCFAllocatorDefault;
      CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(kCFAllocatorDefault, theString, 0x8000100u, 0);
      CFAllocatorRef v9 = kSecRandomDefault;
    }
    else
    {
      CFAllocatorRef v9 = kSecRandomDefault;
      if (SecRandomCopyBytes(kSecRandomDefault, 0x20uLL, v23)) {
        return 0;
      }
      CFAllocatorRef v7 = kCFAllocatorDefault;
      CFDataRef ExternalRepresentation = CFDataCreate(kCFAllocatorDefault, v23, 32);
    }
    if (SecRandomCopyBytes(v9, 0x20uLL, bytes))
    {
      CFDataRef v3 = 0;
    }
    else
    {
      CFMutableArrayRef Mutable = CFDataCreateMutable(v7, 0);
      if (Mutable)
      {
        BytePtr = CFDataGetBytePtr(ExternalRepresentation);
        CFDictionaryRef v12 = CFDataGetBytePtr(a1);
        id v13 = CFDataGetBytePtr(a2);
        CFIndex Length = CFDataGetLength(a1);
        CFDataAppendBytes(Mutable, v12, Length);
        CFDataAppendBytes(Mutable, v13, 6);
        CFIndex v15 = CFDataGetLength(ExternalRepresentation);
        CFDataAppendBytes(Mutable, BytePtr, v15);
        CFDataAppendBytes(Mutable, (const UInt8 *)bytes, 32);
        int v16 = CFDataGetLength(a1);
        LODWORD(v13) = v16 + CFDataGetLength(ExternalRepresentation);
        MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
        *(void *)&v20.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v20.wbuf[6] = v18;
        *(_OWORD *)&v20.wbuf[10] = v18;
        *(_OWORD *)&v20.hash[6] = v18;
        *(_OWORD *)&v20.wbuf[2] = v18;
        *(_OWORD *)v20.count = v18;
        *(_OWORD *)&v20.hash[2] = v18;
        CC_SHA256_Init(&v20);
        CC_SHA256_Update(&v20, MutableBytePtr, v13 + 38);
        CC_SHA256_Final(md, &v20);
      }
      *(_DWORD *)CFIndex v21 = *(_DWORD *)md;
      __int16 v22 = *(_WORD *)&md[4];
      v21[0] = md[0] & 0xFC | 2;
      CFDataRef v3 = CFDataCreate(v7, v21, 6);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    if (ExternalRepresentation) {
      CFRelease(ExternalRepresentation);
    }
  }
  return v3;
}

CFDataRef sub_1000D1E5C(const __CFData *a1, const __CFString *a2)
{
  CFDataRef v2 = 0;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)bytes = v3;
  long long v19 = v3;
  *(_OWORD *)md = 0u;
  long long v17 = 0u;
  if (a1 && a2)
  {
    CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(kCFAllocatorDefault, a2, 0x8000100u, 0);
    CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0);
    if (!Mutable)
    {
      *(_OWORD *)bytes = 0u;
      long long v19 = 0u;
      CFDataRef v2 = CFDataCreate(kCFAllocatorDefault, bytes, 32);
      if (!ExternalRepresentation) {
        return v2;
      }
      goto LABEL_5;
    }
    CFAllocatorRef v7 = Mutable;
    BytePtr = CFDataGetBytePtr(ExternalRepresentation);
    CFAllocatorRef v9 = CFDataGetBytePtr(a1);
    CFDataAppendBytes(v7, v9, 6);
    CFIndex Length = CFDataGetLength(ExternalRepresentation);
    CFDataAppendBytes(v7, BytePtr, Length);
    int v11 = CFDataGetLength(ExternalRepresentation);
    MutableBytePtr = CFDataGetMutableBytePtr(v7);
    *(void *)&v15.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v15.wbuf[6] = v13;
    *(_OWORD *)&v15.wbuf[10] = v13;
    *(_OWORD *)&v15.hash[6] = v13;
    *(_OWORD *)&v15.wbuf[2] = v13;
    *(_OWORD *)v15.count = v13;
    *(_OWORD *)&v15.hash[2] = v13;
    CC_SHA256_Init(&v15);
    CC_SHA256_Update(&v15, MutableBytePtr, v11 + 6);
    CC_SHA256_Final(md, &v15);
    *(_OWORD *)bytes = *(_OWORD *)md;
    long long v19 = v17;
    CFDataRef v2 = CFDataCreate(kCFAllocatorDefault, bytes, 32);
    CFRelease(v7);
    if (ExternalRepresentation) {
LABEL_5:
    }
      CFRelease(ExternalRepresentation);
  }
  return v2;
}

uint64_t sub_1000D1FFC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    return !sub_10001FC1C(result)
        && CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 16), @"WEP") != kCFBooleanTrue
        && !sub_10001ED04(v1)
        && !sub_10001FC6C(v1)
        && !sub_10001B168(*(const __CFDictionary **)(v1 + 16))
        && sub_10001AEF8(*(const __CFDictionary **)(v1 + 16)) == 0;
  }
  return result;
}

uint64_t sub_1000D208C(uint64_t a1)
{
  if (a1) {
    return sub_10001E954(a1) ^ 1;
  }
  else {
    return 1;
  }
}

BOOL sub_1000D20B8(CFDictionaryRef *a1)
{
  CFDataRef v2 = sub_10001CECC(a1);
  id v3 = sub_10000AD1C((uint64_t)a1);
  if ([v2 isAllowedInLockdownMode]) {
    unsigned int v4 = [v3 isAllowedInLockdownMode] ^ 1;
  }
  else {
    LOBYTE(v4) = 1;
  }
  unsigned __int8 v5 = [v2 supportedSecurityTypes];
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  BOOL v6 = sub_1000199C0((uint64_t)a1) == 0;
  BOOL result = v6;
  if (v6) {
    char v8 = v4;
  }
  else {
    char v8 = 1;
  }
  if ((v8 & 1) == 0)
  {
    if (sub_10001FABC((uint64_t)a1)
      || sub_10001BB2C((BOOL)a1)
      || sub_1000066FC((uint64_t)a1)
      || sub_10001FD04((uint64_t)a1))
    {
      return 1;
    }
    if (a1)
    {
      if (!CFDictionaryGetValue(a1[2], @"DomainName")
        && !CFDictionaryContainsKey(a1[2], @"BundleIdentifier")
        && !sub_1000CE714((uint64_t)a1)
        && !sub_10001E404((uint64_t)a1, @"WalletIdentifier"))
      {
LABEL_25:
        if (!sub_10001E954((uint64_t)a1) && !sub_10001E71C((uint64_t)a1)) {
          return ((unint64_t)sub_1000D3210((uint64_t)a1) | v5 & 4 | v5 & 8) != 0;
        }
      }
    }
    else if (!sub_1000CE714(0))
    {
      goto LABEL_25;
    }
    return 1;
  }
  return result;
}

BOOL sub_1000D2230(uint64_t a1)
{
  return sub_1000D3210(a1) != 0;
}

uint64_t sub_1000D2250(uint64_t a1, __int32 *a2)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 16);
  if (v4)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, @"RSN_IE");
    CFDictionaryRef v6 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"WPA_IE");
    if (Value)
    {
      BOOL v7 = sub_10001B1E0(Value, 2) != 0;
      int v8 = sub_10001B1E0(Value, 1);
      if (v8) {
        int v9 = (8 * v7) | 4;
      }
      else {
        int v9 = 8 * v7;
      }
      v35.i32[0] = v9;
      v35.i32[1] = v8 | (2 * v7);
      unsigned int v34 = sub_10001B1E0(Value, 3) == 0;
      unsigned int v10 = sub_10001B1E0(Value, 4) == 0;
      unsigned int v11 = sub_10001B1E0(Value, 5) == 0;
      unsigned int v12 = sub_10001B1E0(Value, 6) == 0;
      unsigned int v13 = sub_10001B1E0(Value, 8) == 0;
      unsigned int v14 = sub_10001B1E0(Value, 9) == 0;
      unsigned int v15 = sub_10001B1E0(Value, 24) == 0;
      unsigned int v16 = sub_10001B1E0(Value, 25) == 0;
      unsigned int v17 = sub_10001B1E0(Value, 12) == 0;
      int8x8_t v18 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v34), 0x1FuLL)), v35, vorr_s8(v35, (int8x8_t)0x400000080));
      int8x8_t v19 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v10), 0x1FuLL)), v18, vorr_s8(v18, (int8x8_t)0x800000010));
      int8x8_t v20 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v11), 0x1FuLL)), v19, vorr_s8(v19, (int8x8_t)0x1000000800));
      int8x8_t v21 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v12), 0x1FuLL)), v20, vorr_s8(v20, (int8x8_t)0x2000000400));
      int8x8_t v22 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v13), 0x1FuLL)), v21, vorr_s8(v21, (int8x8_t)0x8000001000));
      int8x8_t v23 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v14), 0x1FuLL)), v22, vorr_s8(v22, (int8x8_t)0x10000002000));
      int8x8_t v24 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v15), 0x1FuLL)), v23, vorr_s8(v23, (int8x8_t)0x80000000010000));
      int8x8_t v25 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v16), 0x1FuLL)), v24, vorr_s8(v24, (int8x8_t)0x100000000020000));
      int8x8_t v26 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v17), 0x1FuLL)), v25, vorr_s8(v25, (int8x8_t)0x80000004000));
      __int32 v27 = sub_10001B1E0(Value, 13);
      v28.i32[0] = 0;
      v29.i32[0] = v27;
      int8x8_t v30 = vbsl_s8(vdup_lane_s8(vceq_s8(v29, v28), 0), v26, vorr_s8(v26, (int8x8_t)0x100000008000));
    }
    else
    {
      int8x8_t v30 = 0;
    }
    uint64_t v32 = v30.u32[0];
    __int32 v31 = v30.i32[1];
    if (v6)
    {
      if (sub_10001B1E0(v6, 2)) {
        LODWORD(v32) = v32 | 2;
      }
      uint64_t v32 = v32 | sub_10001B1E0(v6, 1);
    }
  }
  else
  {
    __int32 v31 = 0;
    uint64_t v32 = 0xFFFFLL;
  }
  if (a2) {
    *a2 = v31;
  }
  return v32;
}

uint64_t sub_1000D2558(const void *a1)
{
  if (!a1) {
    return 0;
  }
  unint64_t v2 = 0;
  id v3 = &byte_1001CB772;
  do
  {
    CFDataRef v4 = sub_1000C6CA8((uint64_t)a1);
    if (v4)
    {
      CFDataRef v5 = v4;
      memset(buffer, 170, 6);
      v16.location = 0;
      v16.length = 6;
      CFDataGetBytes(v4, v16, buffer);
      if (buffer[0] == *(v3 - 2)
        && buffer[1] == *(v3 - 1)
        && buffer[2] == *v3)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          CFDictionaryRef v6 = sub_10001A43C(a1);
          *(_DWORD *)buf = 136315650;
          unsigned int v11 = "WiFiNetworkIsProblematicForEncryptedDNS";
          __int16 v12 = 2112;
          unsigned int v13 = v6;
          __int16 v14 = 2112;
          CFDataRef v15 = v5;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s: network %@ (%@) is known to be problematic for DoT/DoH", buf, 0x20u);
        }
        uint64_t v7 = 1;
      }
      else
      {
        uint64_t v7 = 0;
      }
      CFRelease(v5);
    }
    else
    {
      uint64_t v7 = 0;
    }
    if (v2 > 1) {
      break;
    }
    ++v2;
    v3 += 3;
  }
  while (!v7);
  return v7;
}

void sub_1000D26F4(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (a2)
    {
      CFArrayRef v4 = (const __CFArray *)sub_10001E404(a1, @"SIMIdentifiers");
      if (v4) {
        MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v4);
      }
      else {
        MutableCFDictionaryRef Copy = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      }
      uint64_t v7 = MutableCopy;
      v9.length = CFArrayGetCount(MutableCopy);
      v9.location = 0;
      if (CFArrayGetFirstIndexOfValue(v7, v9, a2) == -1) {
        CFArrayAppendValue(v7, a2);
      }
      sub_10001C6A4(a1, @"SIMIdentifiers", v7);
      if (v7)
      {
        CFRelease(v7);
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null simId" :@"WiFiNetworkAddSIMIdentifier"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" args:("WiFiNetworkAddSIMIdentifier", 0)];
    }
  }
}

void sub_1000D286C(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (a2)
    {
      CFArrayRef v4 = (const __CFArray *)sub_10001E404(a1, @"SIMIdentifiers");
      if (v4) {
        MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v4);
      }
      else {
        MutableCFDictionaryRef Copy = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      }
      CFArrayRef v7 = MutableCopy;
      v11.length = CFArrayGetCount(MutableCopy);
      v11.location = 0;
      FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v7, v11, a2);
      if (FirstIndexOfValue != -1) {
        CFArrayRemoveValueAtIndex(v7, FirstIndexOfValue);
      }
      if (CFArrayGetCount(v7)) {
        CFArrayRef v9 = v7;
      }
      else {
        CFArrayRef v9 = 0;
      }
      sub_10001C6A4(a1, @"SIMIdentifiers", v9);
      if (v7)
      {
        CFRelease(v7);
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null simId", "WiFiNetworkRemoveSIMIdentifier"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkRemoveSIMIdentifier")];
    }
  }
}

void sub_1000D29F0(uint64_t a1, CFDictionaryRef *a2, const void *a3)
{
  if (!a1 || !a2) {
    return;
  }
  if (CFDictionaryGetValue(a2[2], @"DomainName"))
  {
    CFDictionaryRef v6 = sub_1000CCB44((uint64_t)a2);
    if (v6)
    {
      CFArrayRef v7 = v6;
      CFDictionaryRef v8 = (const __CFDictionary *)sub_10001E404(a1, @"userPreferredPasspointDomains");
      CFArrayRef v9 = v8
         ? CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v8)
         : CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFDictionaryRef v14 = v9;
      if (v9)
      {
        if (a3) {
          CFDictionaryAddValue(v9, v7, a3);
        }
        else {
          CFDictionaryRemoveValue(v9, v7);
        }
        CFIndex Count = CFDictionaryGetCount(v14);
        CFRange v16 = @"userPreferredPasspointDomains";
        if (Count)
        {
LABEL_16:
          uint64_t v17 = a1;
          CFDictionaryRef v18 = v14;
LABEL_25:
          sub_10001C6A4(v17, v16, v18);
          CFRelease(v14);
          return;
        }
LABEL_24:
        uint64_t v17 = a1;
        CFDictionaryRef v18 = 0;
        goto LABEL_25;
      }
    }
  }
  else
  {
    unsigned int v10 = sub_10001A43C(a2);
    if (v10)
    {
      CFRange v11 = v10;
      CFDictionaryRef v12 = (const __CFDictionary *)sub_10001E404(a1, @"userPreferredNetworkNames");
      unsigned int v13 = v12
          ? CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v12)
          : CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFDictionaryRef v14 = v13;
      if (v13)
      {
        if (a3) {
          CFDictionarySetValue(v13, v11, a3);
        }
        else {
          CFDictionaryRemoveValue(v13, v11);
        }
        CFIndex v19 = CFDictionaryGetCount(v14);
        CFRange v16 = @"userPreferredNetworkNames";
        if (v19) {
          goto LABEL_16;
        }
        goto LABEL_24;
      }
    }
  }
}

const void *sub_1000D2B9C(uint64_t a1, CFDictionaryRef *a2)
{
  if (!a1 || !a2) {
    return 0;
  }
  if (CFDictionaryGetValue(a2[2], @"DomainName"))
  {
    CFArrayRef v4 = sub_1000CCB44((uint64_t)a2);
    if (v4)
    {
      CFDataRef v5 = v4;
      CFDictionaryRef v6 = @"userPreferredPasspointDomains";
      goto LABEL_8;
    }
    return 0;
  }
  CFArrayRef v7 = sub_10001A43C(a2);
  if (!v7) {
    return 0;
  }
  CFDataRef v5 = v7;
  CFDictionaryRef v6 = @"userPreferredNetworkNames";
LABEL_8:
  CFDictionaryRef v8 = (const __CFDictionary *)sub_10001E404(a1, v6);
  if (!v8) {
    return 0;
  }

  return CFDictionaryGetValue(v8, v5);
}

void sub_1000D2C44(uint64_t a1, int a2)
{
  if (a1)
  {
    unint64_t v2 = &kCFBooleanTrue;
    if (!a2) {
      unint64_t v2 = &kCFBooleanFalse;
    }
    CFBooleanRef v3 = *v2;
    sub_10001C6A4(a1, @"PrivacyProxyEnabled", v3);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" args:("WiFiNetworkSetPrivacyProxyEnabled")];
    }
  }
}

void sub_1000D2D00(uint64_t a1, const void *a2)
{
  if (a1)
  {
    sub_10001C6A4(a1, @"PrivacyProxyBlockedReason", a2);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkSetPrivacyProxyBlockedReason")];
    }
  }
}

BOOL sub_1000D2DA0(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v3 = CFDateCreate(kCFAllocatorDefault, Current);
  CFDateRef v4 = (const __CFDate *)sub_10001E404(a1, @"lastJoined");
  double TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(v3, v4);
  if (sub_1000CF14C(a1) == 1
    || sub_1000C6B08(a1) == 1
    || (!&_CNForgetSSID
     || CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), kCNSCaptiveNetworkProperty) != kCFBooleanTrue)
    && !sub_10001E404(a1, @"WiFiNetworkAttributeIsPublic")
    && !sub_1000CE714(a1))
  {
    BOOL v6 = 1;
    if (!v3) {
      return v6;
    }
LABEL_4:
    CFRelease(v3);
    return v6;
  }
  BOOL v6 = TimeIntervalSinceDate < 86400.0 && TimeIntervalSinceDate > -1.0;
  if (v3) {
    goto LABEL_4;
  }
  return v6;
}

BOOL sub_1000D2EB4(uint64_t a1)
{
  if (!_os_feature_enabled_impl()) {
    return 1;
  }

  return sub_1000D2DA0(a1);
}

uint64_t sub_1000D2F10(CFDictionaryRef *a1)
{
  if (sub_10001E404((uint64_t)a1, @"WiFiNetworkAttributeIsPublic")) {
    return 1;
  }
  uint64_t result = (uint64_t)sub_1000CEB50(a1);
  if (result) {
    return 1;
  }
  return result;
}

BOOL sub_1000D2F54(uint64_t a1)
{
  return sub_10001E404(a1, @"WiFiNetworkAttributeIsLowQuality") != 0;
}

void sub_1000D2F80(uint64_t a1, int a2)
{
  if (a1)
  {
    unint64_t v2 = &kCFBooleanTrue;
    if (!a2) {
      unint64_t v2 = &kCFBooleanFalse;
    }
    CFBooleanRef v3 = *v2;
    sub_10001C6A4(a1, @"PublicAirPlayNetwork", v3);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkSetPublicAirPlayNetwork")];
    }
  }
}

void sub_1000D303C(uint64_t a1, const void *a2)
{
  if (a1)
  {
    sub_10001C6A4(a1, @"DisplayFriendlyName", a2);
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: null network", "WiFiNetworkSetDisplayFriendlyName"];
    }
  }
}

const void *sub_1000D30DC(uint64_t a1)
{
  if (a1)
  {
    return sub_10001E404(a1, @"DisplayFriendlyName");
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" arguments:("WiFiNetworkGetDisplayFriendlyName")];
    }
    return 0;
  }
}

void sub_1000D3170(uint64_t a1, const void *a2)
{
  if (a1)
  {
    sub_10001C6A4(a1, @"AccessoryIdentifier", a2);
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:3 message:@"%s: null network" : @"WiFiNetworkSetAccessoryIdentifier"];
    }
  }
}

const void *sub_1000D3210(uint64_t a1)
{
  if (a1)
  {
    return sub_10001E404(a1, @"AccessoryIdentifier");
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkGetAccessoryIdentifier")];
    }
    return 0;
  }
}

BOOL sub_1000D32A4(uint64_t a1)
{
  return sub_1000D3210(a1) == 0;
}

CFHashCode sub_1000D32C4(const void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = sub_10001A43C(a1);
  if (!v1) {
    return 0;
  }

  return CFHash(v1);
}

CFStringRef sub_1000D32FC(const __CFDictionary **cf)
{
  valuePtr[0] = 0;
  if (!cf) {
    return @"Invalid network ref";
  }
  uint64_t v2 = qword_10027D710;
  if (!qword_10027D710)
  {
    pthread_once(&stru_10027CCA8, (void (*)(void))sub_1000C5C5C);
    uint64_t v2 = qword_10027D710;
  }
  if (v2 != CFGetTypeID(cf)) {
    return @"Invalid network ref";
  }
  CFNumberRef v3 = (const __CFNumber *)sub_100024070((uint64_t)cf);
  if (v3) {
    CFNumberGetValue(v3, kCFNumberSInt32Type, valuePtr);
  }
  int8x8_t v29 = sub_10001A43C(cf);
  unsigned int v28 = sub_10001EE48(cf);
  BOOL v27 = sub_10001FC1C((uint64_t)cf);
  unsigned int v26 = sub_10001B168(cf[2]);
  BOOL v25 = sub_10001ED04((uint64_t)cf) != 0;
  BOOL v24 = CFDictionaryGetValue(cf[2], @"WEP") == kCFBooleanTrue;
  CFNumberRef v23 = sub_10001FCC4(cf[2]);
  uint64_t v22 = sub_1000CD794((uint64_t)cf);
  int8x8_t v21 = sub_10001E404((uint64_t)cf, @"enabled");
  int8x8_t v20 = sub_10001E404((uint64_t)cf, @"SaveDataMode");
  CFIndex v19 = sub_10001E404((uint64_t)cf, @"NetworkQualityResponsiveness");
  CFDateRef v4 = sub_10001E404((uint64_t)cf, @"NetworkQualityDate");
  unsigned int v5 = sub_1000C6B08((uint64_t)cf);
  CFStringRef v6 = @"Unknown";
  if (v5 == 1) {
    CFStringRef v6 = @"Home";
  }
  if (v5 == 2) {
    CFStringRef v7 = @"Not Home";
  }
  else {
    CFStringRef v7 = v6;
  }
  unsigned int v8 = sub_1000CC4AC((uint64_t)cf);
  CFArrayRef v9 = sub_10001E404((uint64_t)cf, @"TransitionDisabledFlags");
  unsigned int v10 = sub_1000C781C((uint64_t)cf);
  unsigned int v11 = sub_10001E71C((uint64_t)cf);
  unsigned int v12 = sub_10001E954((uint64_t)cf);
  unsigned int v13 = sub_10001CE24((uint64_t)cf);
  BOOL v14 = sub_10001BB2C((BOOL)cf);
  CFDictionaryRef v15 = cf[2];
  uint64_t v16 = valuePtr[0];
  int v17 = CFDictionaryContainsKey(v15, @"BundleIdentifier");
  return CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@: isHidden=%d, isEAP=%d, isSAE=%d, isWPA=%d, isWEP=%d, WAPI=%d, type=%d, enabled=%@, saveData=%@, responsiveness=%@ (%@) isHome=%@, isForceFixed=%d, transitionDisabledFlags=%@, foundNanIe=%d, isPH=%d, isPublicAirPlayNetwork=%d, is6EDisabled=%d, hs20=%d, Channel=%d, isBundleIdentifierPresent=%d", v29, v28, v27, v26, v25, v24, v23, v22, v21, v20, v19, v4, v7, v8, v9, v10,
           v11,
           v12,
           v13,
           v14,
           v16,
           v17 != 0);
}

uint64_t sub_1000D35E8(const void *a1, const void *a2, unsigned int a3)
{
  uint64_t v3 = 0;
  if (a1 && a2)
  {
    if (sub_10001BB2C((BOOL)a1) && sub_10001BB2C((BOOL)a2))
    {
      CFStringRef v7 = (const __CFString *)sub_10001A43C(a1);
      CFStringRef v8 = (const __CFString *)sub_10001A43C(a2);
      CFStringRef v9 = (const __CFString *)sub_10001E404((uint64_t)a1, @"HS20AccountName");
      CFStringRef v10 = (const __CFString *)sub_10001E404((uint64_t)a2, @"HS20AccountName");
      CFStringRef v11 = (const __CFString *)sub_1000CCB44((uint64_t)a1);
      CFStringRef v12 = (const __CFString *)sub_1000CCB44((uint64_t)a2);
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: HS20 - ssid1: %@, account1: %@, domain1: %@; ssid2: %@, account2: %@, domain2: %@, GAS check: %d",
      }
          "__WiFiIsSameHS20Account",
          v7,
          v9,
          v11,
          v8,
          v10,
          v12,
          a3);
      if (v7 && v10 && CFEqual(v7, v10)
        || v8 && v9 && CFEqual(v8, v9))
      {
        return 1;
      }
      if (v9 && v10 && v11 && v12 && CFEqual(v11, v12))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: found matching domain %@ on two accounts. Accounts are %@ and %@", "__WiFiIsSameHS20Account", v11, v9, v10, v16 message];
        }
        goto LABEL_23;
      }
      if (!a3)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Skip GAS content check for domainName %@ and domainName %@", "__WiFiIsSameHS20Account", v11, v12 message];
        }
        uint64_t v3 = 0;
        goto LABEL_29;
      }
      if (sub_1000CCC50(a1, a2) || sub_1000CCC50(a2, a1))
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: HS20 - found matching attribute in GAS response - ssid1: %@, account1 %@; ssid2: %@, account: %@",
        }
            "__WiFiIsSameHS20Account",
            v7,
            v9,
            v8,
            v10);
LABEL_23:
        uint64_t v3 = 1;
LABEL_29:
        return v3;
      }
    }
    return 0;
  }
  return v3;
}

Class sub_1000D384C(uint64_t a1)
{
  sub_1000D38A4();
  Class result = objc_getClass("CWFNetworkProfile");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_100196984();
  }
  qword_10027D728 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t sub_1000D38A4()
{
  v2[0] = 0;
  if (!qword_10027D730)
  {
    v2[1] = _NSConcreteStackBlock;
    v2[2] = (void *)3221225472;
    void v2[3] = sub_1000D399C;
    void v2[4] = &unk_10023EAF8;
    v2[5] = v2;
    long long v3 = off_1002412A8;
    uint64_t v4 = 0;
    qword_10027D730 = _sl_dlopen();
  }
  uint64_t v0 = qword_10027D730;
  if (!qword_10027D730) {
    sub_1001969EC(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t sub_1000D399C()
{
  uint64_t result = _sl_dlopen();
  qword_10027D730 = result;
  return result;
}

Class sub_1000D3A10(uint64_t a1)
{
  sub_1000D38A4();
  Class result = objc_getClass("CWFBSS");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_100196A54();
  }
  qword_10027D738 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_1000D3A68(uint64_t a1)
{
  sub_1000D38A4();
  Class result = objc_getClass("CWFChannel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_100196ABC();
  }
  qword_10027D740 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_1000D3AC0(uint64_t a1)
{
  sub_1000D3B18();
  Class result = objc_getClass("CLLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_100196B24();
  }
  qword_10027D748 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t sub_1000D3B18()
{
  v2[0] = 0;
  if (!qword_10027D750)
  {
    v2[1] = _NSConcreteStackBlock;
    v2[2] = (void *)3221225472;
    void v2[3] = sub_1000D3C10;
    void v2[4] = &unk_10023EAF8;
    v2[5] = v2;
    long long v3 = off_1002412C0;
    uint64_t v4 = 0;
    qword_10027D750 = _sl_dlopen();
  }
  uint64_t v0 = qword_10027D750;
  if (!qword_10027D750) {
    sub_100196B8C(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t sub_1000D3C10()
{
  uint64_t result = _sl_dlopen();
  qword_10027D750 = result;
  return result;
}

void *sub_1000D3C84(uint64_t a1)
{
  uint64_t v2 = (void *)sub_1000D3B18();
  uint64_t result = dlsym(v2, "CLLocationCoordinate2DMake");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_10027D758 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1000D3CD4(uint64_t a1)
{
  sub_1000D38A4();
  Class result = objc_getClass("CWFScanResult");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_100196BF4();
  }
  qword_10027D760 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void *sub_1000D3D2C(uint64_t a1)
{
  uint64_t v2 = (void *)sub_1000D38A4();
  Class result = dlsym(v2, "CWFScanResultPropertyOSSpecificAttributesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_10027D768 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000D5FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D5FEC(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  long long v3 = qword_10027D770;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000D6098;
  void v6[3] = &unk_1002412E0;
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v2;
  uint64_t v8 = v4;
  id v5 = v2;
  dispatch_sync(v3, v6);
}

id sub_1000D6098(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateNetworkOnManagerQueue:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

uint64_t sub_1000D828C(uint64_t a1)
{
  id v5 = (uint64_t (*)(id, uint64_t))[*(id *)(a1 + 32) AVSystemMonitorCb];
  id v2 = [*(id *)(a1 + 32) manager];
  uint64_t v3 = *(void *)(a1 + 40);

  return v5(v2, v3);
}

WiFiManagerAVSystemMonitor *sub_1000D8648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!objc_opt_class())
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: AVSystemMonitor class is not valid." arguments:("WiFiManagerAVSystemMonitorStart", "AVSystemMonitor class is not valid.", nil)];
    }
    goto LABEL_8;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:3 message:@"%s: null manager", @"WiFiManagerAVSystemMonitorStart"];
    }
    goto LABEL_8;
  }
  if (!a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null AVSystemMonitorCb" : @"WiFiManagerAVSystemMonitorStart"];
    }
    goto LABEL_8;
  }
  id v7 = objc_alloc_init(WiFiManagerAVSystemMonitor);
  if (!v7)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: AVSystemMonitor allocation failed!", @"WiFiManagerAVSystemMonitorStart"];
    }
LABEL_8:
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = v7;
  [(WiFiManagerAVSystemMonitor *)v7 setManager:a1];
  [(WiFiManagerAVSystemMonitor *)v8 setAVSystemMonitorCb:a3];
  [(WiFiManagerAVSystemMonitor *)v8 setQueue:a2];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000D8818;
  block[3] = &unk_10023EFA8;
  void block[4] = v8;
  dispatch_async((dispatch_queue_t)qword_10027DD88, block);
LABEL_9:
  return v8;
}

id sub_1000D8818(uint64_t a1)
{
  return [*(id *)(a1 + 32) startMonitoringAVSystem];
}

void sub_1000D8820(void *a1)
{
  if (a1)
  {
    [a1 stopMonitoringAVSystem];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null AVSystemMonitor" : @"WiFiManagerAVSystemMonitorStop"];
    }
  }
}

uint64_t sub_1000D88B4()
{
  uint64_t result = qword_10027D780;
  if (!qword_10027D780)
  {
    pthread_once(&stru_10027CCB8, (void (*)(void))sub_1000D88FC);
    return qword_10027D780;
  }
  return result;
}

uint64_t sub_1000D88FC()
{
  qword_10027D780 = _CFRuntimeRegisterClass();
  qword_10027D788 = (uint64_t)CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);

  return pthread_mutex_init(&stru_10027CCC8, 0);
}

uint64_t sub_1000D8964(uint64_t a1, const void *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 0;
  }
  id v5 = Mutable;
  if (sub_100167C34())
  {
    CFStringRef v6 = (const __CFString *)sub_100167C48(@"WIFI_ASK_TO_JOIN_TITLE");
    CFStringRef v7 = (const __CFString *)sub_100167C48(@"WIFI_ASK_TO_JOIN_CANCEL_BUTTON");
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: localization not available", "WiFiNotificationCreateAskToJoin");
    }
    CFStringRef v7 = @"Cancel";
    CFStringRef v6 = @"Select a Wireless Network";
  }
  CFDictionarySetValue(v5, kCFUserNotificationAlertHeaderKey, v6);
  CFDictionarySetValue(v5, kCFUserNotificationDefaultButtonTitleKey, v7);
  CFDictionarySetValue(v5, SBUserNotificationExtensionIdentifierKey, @"com.apple.framework.WiFiKit.WiFiPickerExtension");
  uint64_t v9 = sub_1000D8B08(a1, 0, 0, a2, v5, 0, 0);
  if (!v9)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: failed to create notification of type ask to join" : @"WiFiNotificationCreateAskToJoin"];
    }
    return 0;
  }
  uint64_t v10 = v9;
  CFRelease(v5);
  return v10;
}

uint64_t sub_1000D8B08(uint64_t a1, int a2, int a3, const void *a4, __CFDictionary *a5, CFOptionFlags a6, const void *a7)
{
  if (!a5) {
    return 0;
  }
  unsigned int add_explicit = atomic_fetch_add_explicit(dword_10027CD08, 1u, memory_order_relaxed);
  uint64_t v11 = add_explicit + 1;
  uint64_t v12 = sub_1000D9084(a1, a2, a3, a4, a7, add_explicit + 1);
  if (!v12) {
    return v12;
  }
  SInt32 error = -1431655766;
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.wifi.manager");
  if (BundleWithIdentifier)
  {
    CFURLRef v14 = CFBundleCopyBundleURL(BundleWithIdentifier);
    if (v14)
    {
      CFURLRef v15 = v14;
      CFDictionarySetValue(a5, kCFUserNotificationLocalizationURLKey, v14);
      CFRelease(v15);
    }
  }
  if (SBUserNotificationDismissOnLock)
  {
    CFDictionarySetValue(a5, SBUserNotificationDismissOnLock, kCFBooleanTrue);
    CFDictionarySetValue(a5, SBUserNotificationAlertMessageDelimiterKey, &stru_100248240);
  }
  if (a2) {
    goto LABEL_18;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: adding extensionItem for ask to join notification (id: %d)", "__WiFiNotificationCreateCFUN", v11);
  }
  id v17 = objc_alloc_init((Class)NSExtensionItem);
  id v18 = [objc_alloc((Class)NSDictionary) initWithObjectsAndKeys:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11), @"notificationId", 0];
  [v17 setUserInfo:v18];
  uint64_t v25 = 0;
  id v27 = v17;
  CFIndex v19 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSArray arrayWithObjects:&v27 count:1], 1, &v25);
  if (v25)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: error archiving extensionItem %@", "__WiFiNotificationCreateCFUN", v25 message];
    }
    if (!v17) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  CFDictionarySetValue(a5, SBUserNotificationExtensionItemsKey, v19);
  if (v17) {
LABEL_15:
  }
    CFRelease(v17);
LABEL_16:
  if (v18) {
    CFRelease(v18);
  }
LABEL_18:
  CFUserNotificationRef v21 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, a6, &error, a5);
  *(void *)(v12 + 120) = v21;
  if (!v21
    || (CFUserNotificationRef v22 = v21,
        pthread_mutex_lock(&stru_10027CCC8),
        CFDictionarySetValue((CFMutableDictionaryRef)qword_10027D788, v22, (const void *)v12),
        pthread_mutex_unlock(&stru_10027CCC8),
        CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, *(CFUserNotificationRef *)(v12 + 120), (CFUserNotificationCallBack)sub_1000DB320, 0), (*(void *)(v12 + 56) = RunLoopSource) == 0))
  {
    CFRelease((CFTypeRef)v12);
    return 0;
  }
  return v12;
}

uint64_t sub_1000D8E04(uint64_t a1, const void *a2, int a3, const void *a4, CFDictionaryRef theDict, int a6)
{
  uint64_t v6 = 0;
  if (!a4 || !theDict) {
    return v6;
  }
  if (!CFDictionaryGetValue(theDict, @"TLSServerCertificateChain"))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: server certificate chain is null" arguments:@"WiFiNotificationCreateEAPTrust"];
    }
    return 0;
  }
  if (a6 != 2)
  {
    uint64_t v6 = sub_1000D9084(a1, 2, a6, a2, theDict, atomic_fetch_add_explicit(dword_10027CD08, 1u, memory_order_relaxed) + 1);
    if (!v6) {
      return v6;
    }
    goto LABEL_11;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 0;
  }
  unsigned int v13 = Mutable;
  CFStringRef v14 = (const __CFString *)sub_100167C48(@"WIFI_OPEN_SETTINGS_CERTIFICATE_TITLE");
  CFURLRef v15 = sub_10001A43C(a4);
  CFStringRef v16 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v14, v15);
  CFDictionarySetValue(v13, kCFUserNotificationAlertHeaderKey, v16);
  if (v16) {
    CFRelease(v16);
  }
  id v17 = sub_100167C48(@"WIFI_OPEN_SETTINGS_CERTIFICATE_ACCEPT_BUTTON");
  CFDictionarySetValue(v13, kCFUserNotificationDefaultButtonTitleKey, v17);
  id v18 = sub_100167C48(@"WIFI_OPEN_SETTINGS_CERTIFICATE_VIEW_BUTTON");
  CFDictionarySetValue(v13, kCFUserNotificationAlternateButtonTitleKey, v18);
  id v19 = sub_100167C48(@"WIFI_CANCEL");
  CFDictionarySetValue(v13, kCFUserNotificationOtherButtonTitleKey, v19);
  uint64_t v6 = sub_1000D8B08(a1, 2, 2, a2, v13, 0, 0);
  CFRelease(v13);
  if (v6)
  {
    *(void *)(v6 + 24) = CFRetain(a4);
    *(void *)(v6 + 112) = CFRetain(theDict);
LABEL_11:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Dispatching EAP Trust panel(%d)", *(unsigned int *)(v6 + 40));
    }
    *(void *)(v6 + 24) = CFRetain(a4);
  }
  return v6;
}

uint64_t sub_1000D9084(uint64_t a1, int a2, int a3, const void *a4, const void *a5, int a6)
{
  if (!qword_10027D780) {
    pthread_once(&stru_10027CCB8, (void (*)(void))sub_1000D88FC);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v12 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 112) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_DWORD *)(Instance + 32) = a2;
    *(_DWORD *)(Instance + 36) = a3;
    *(_DWORD *)(Instance + 40) = a6;
    if (a4) {
      *(void *)(Instance + 16) = CFRetain(a4);
    }
    if (a5) {
      *(void *)(v12 + 112) = CFRetain(a5);
    }
  }
  return v12;
}

uint64_t sub_1000D9158(uint64_t a1, uint64_t a2, uint64_t a3, CFDictionaryRef *a4, int a5)
{
  if (!a4 || !sub_1000C8798((uint64_t)a4)) {
    return 0;
  }
  CFStringRef v9 = sub_1000C62C8(a4);
  if (v9) {
    goto LABEL_8;
  }
  CFStringRef v10 = sub_1000C9370(a4);
  if (v10)
  {
    CFStringRef v9 = v10;
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: found password with non-syncable attribute for network %@.", "WiFiNotificationCreatePassword", sub_10001A43C(a4) message];
    }
LABEL_8:
    CFRelease(v9);
    int v12 = 0;
    goto LABEL_9;
  }
  int v12 = 1;
LABEL_9:
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 0;
  }
  CFStringRef v14 = Mutable;
  BOOL v15 = sub_100167C34();
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s: localizationAvailable=%d", "WiFiNotificationCreatePassword", v15];
  }
  if (!v15)
  {
    if (a5 == 2)
    {
      BOOL v31 = sub_1000C890C((uint64_t)a4);
      uint64_t v32 = sub_10001A43C(a4);
      if (v31) {
        CFStringRef v33 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"Incorrect Wi-Fi Credentials for “%@”", v32);
      }
      else {
        CFStringRef v33 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"Incorrect Wi-Fi Password for “%@”", v32);
      }
      CFStringRef v47 = v33;
      CFDictionarySetValue(v14, kCFUserNotificationAlertHeaderKey, v33);
      if (v47) {
        CFRelease(v47);
      }
      if (sub_1000C890C((uint64_t)a4)) {
        CFStringRef v28 = @"Enter Credentials";
      }
      else {
        CFStringRef v28 = @"Enter Password";
      }
    }
    else
    {
      if (a5 != 1)
      {
LABEL_58:
        CFDictionarySetValue(v14, kCFUserNotificationAlternateButtonTitleKey, @"Cancel");
        CFIndex v48 = sub_10001A43C(a4);
        id v44 = (__CFArray *)CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"Enter the password for %@.", v48);
        CFStringRef v42 = 0;
        if (v44) {
          goto LABEL_59;
        }
        uint64_t v62 = 0;
LABEL_82:
        CFRelease(v14);
        return v62;
      }
      if (sub_1000C8A18(a4)) {
        int v26 = 1;
      }
      else {
        int v26 = v12;
      }
      if (v26) {
        CFStringRef v27 = @"Wi-Fi Password";
      }
      else {
        CFStringRef v27 = @"Incorrect Wi-Fi Password";
      }
      CFDictionarySetValue(v14, kCFUserNotificationAlertHeaderKey, v27);
      CFStringRef v28 = @"Join";
    }
    CFDictionarySetValue(v14, kCFUserNotificationDefaultButtonTitleKey, v28);
    goto LABEL_58;
  }
  int v17 = sub_100126DAC(a2);
  if (a5 == 2)
  {
    if (sub_1000C890C((uint64_t)a4))
    {
      CFStringRef v29 = @"WIFI_OPEN_SETTINGS_CREDENTIALS_TITLE";
      CFStringRef v30 = @"WIFI_OPEN_SETTINGS_CREDENTIALS_TITLE_CH";
    }
    else
    {
      CFStringRef v29 = @"WIFI_OPEN_SETTINGS_PASSWORD_TITLE";
      CFStringRef v30 = @"WIFI_OPEN_SETTINGS_PASSWORD_TITLE_CH";
    }
    if (v17) {
      uint64_t v34 = (uint64_t)v30;
    }
    else {
      uint64_t v34 = (uint64_t)v29;
    }
    CFStringRef v35 = (const __CFString *)sub_100167C48(v34);
    id v36 = sub_10001A43C(a4);
    CFStringRef v37 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v35, v36);
    CFDictionarySetValue(v14, kCFUserNotificationAlertHeaderKey, v37);
    if (v37) {
      CFRelease(v37);
    }
    if (sub_1000C890C((uint64_t)a4)) {
      CFStringRef v25 = @"WIFI_OPEN_SETTINGS_CREDENTIALS_BUTTON";
    }
    else {
      CFStringRef v25 = @"WIFI_OPEN_SETTINGS_PASSWORD_BUTTON";
    }
  }
  else
  {
    if (a5 != 1) {
      goto LABEL_48;
    }
    unsigned int v18 = sub_1000C8A18(a4);
    CFStringRef v19 = @"WIFI_PASSWORD_TITLE";
    if (v18) {
      int v20 = 1;
    }
    else {
      int v20 = v12;
    }
    BOOL v21 = v20 == 0;
    CFStringRef v22 = @"WIFI_PASSWORD_TITLE_CH";
    if (!v21)
    {
      CFStringRef v19 = @"WIFI_OTP_PASSWORD_TITLE";
      CFStringRef v22 = @"WIFI_OTP_PASSWORD_TITLE_CH";
    }
    if (v17) {
      uint64_t v23 = (uint64_t)v22;
    }
    else {
      uint64_t v23 = (uint64_t)v19;
    }
    id v24 = sub_100167C48(v23);
    CFDictionarySetValue(v14, kCFUserNotificationAlertHeaderKey, v24);
    CFStringRef v25 = @"WIFI_JOIN";
  }
  id v38 = sub_100167C48((uint64_t)v25);
  CFDictionarySetValue(v14, kCFUserNotificationDefaultButtonTitleKey, v38);
LABEL_48:
  id v39 = sub_100167C48(@"WIFI_CANCEL");
  CFDictionarySetValue(v14, kCFUserNotificationAlternateButtonTitleKey, v39);
  CFDictionaryRef v40 = sub_10001A43C(a4);
  CFStringRef v41 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%c%@%c", 8, v40, 127);
  if (!v41)
  {
    uint64_t v62 = 0;
    goto LABEL_82;
  }
  CFStringRef v42 = v41;
  CFMutableArrayRef v43 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (v43)
  {
    id v44 = v43;
    id v45 = sub_100167C48(@"WIFI_PASSWORD_MESSAGE_PREFIX");
    CFArrayAppendValue(v44, v45);
    CFArrayAppendValue(v44, v42);
    id v46 = sub_100167C48(@"WIFI_PASSWORD_MESSAGE_SUFFIX");
    CFArrayAppendValue(v44, v46);
LABEL_59:
    int v66 = v12;
    double v67 = (const void *)a2;
    uint64_t v49 = a1;
    CFDictionarySetValue(v14, kCFUserNotificationAlertMessageKey, v44);
    CFRelease(v44);
    CFDictionarySetValue(v14, kCFUserNotificationTextFieldTitlesKey, &stru_100248240);
    BOOL v50 = sub_1000C890C((uint64_t)a4);
    if (a5 == 1 && v50)
    {
      id v51 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      uint64_t v52 = v51;
      if (!v51
        || (!v15
          ? (CFArrayAppendValue(v51, @"Username"), CFStringRef v54 = @"Password")
          : (id v53 = sub_100167C48(@"WIFI_USERNAME_TEXT_TITLE"),
             CFArrayAppendValue(v52, v53),
             CFStringRef v54 = (const __CFString *)sub_100167C48(@"WIFI_PASSWORD_TEXT_TITLE")),
            CFArrayAppendValue(v52, v54),
            CFDictionarySetValue(v14, kCFUserNotificationTextFieldTitlesKey, v52),
            (CFMutableArrayRef v55 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks)) == 0))
      {
        uint64_t v62 = 0;
        id v61 = 0;
        goto LABEL_77;
      }
      id v56 = v55;
      CFStringRef v57 = (const __CFString *)sub_10001E404((uint64_t)a4, @"UserName");
      if (v57) {
        CFStringRef v58 = v57;
      }
      else {
        CFStringRef v58 = &stru_100248240;
      }
      CFArrayAppendValue(v56, v58);
      CFArrayAppendValue(v56, &stru_100248240);
      CFDictionarySetValue(v14, kCFUserNotificationTextFieldValuesKey, v56);
      char v59 = 1;
    }
    else
    {
      id v56 = 0;
      uint64_t v52 = 0;
      char v59 = 0;
      id v61 = 0;
      CFOptionFlags v60 = 0;
      if (a5 != 1)
      {
LABEL_71:
        uint64_t v62 = sub_1000D8B08(v49, 1, a5, v67, v14, v60, 0);
        if (v62)
        {
          if (qword_10027DD68)
          {
            CFMutableDictionaryRef v64 = "no";
            if (v66) {
              CFMutableDictionaryRef v64 = "yes";
            }
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Dispatching password panel(%d), missing password=%s", *(unsigned int *)(v62 + 40), v64)];
          }
          *(void *)(v62 + 24) = CFRetain(a4);
        }
LABEL_77:
        CFRelease(v14);
        CFStringRef v14 = v61;
        if (!v42) {
          goto LABEL_79;
        }
        goto LABEL_78;
      }
    }
    CFOptionFlags v60 = 0x10000 << v59;
    id v61 = v56;
    goto LABEL_71;
  }
  CFRelease(v14);
  id v61 = 0;
  uint64_t v52 = 0;
  uint64_t v62 = 0;
LABEL_78:
  CFRelease(v42);
  CFStringRef v14 = v61;
LABEL_79:
  if (v52) {
    CFRelease(v52);
  }
  if (v14) {
    goto LABEL_82;
  }
  return v62;
}

uint64_t sub_1000D9860(uint64_t a1, const void *a2, int a3, const void *a4, int a5)
{
  if (!a4)
  {
    int v12 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_6;
    }
    unsigned int v13 = "%s: null network.";
    goto LABEL_26;
  }
  CFStringRef v9 = sub_10001E404((uint64_t)a4, @"WiFiNetworkUserAcceptedRecommendationAt");
  if (v9)
  {
    CFStringRef v10 = v9;
    int v12 = (void *)qword_10027DD68;
    if (!qword_10027DD68)
    {
LABEL_6:
      return 0;
    }
    CFStringRef v30 = v10;
    unsigned int v13 = "%s: user already accepted join recommendation for this network at %@. Suppressing alert.";
    uint64_t v14 = 3;
LABEL_5:
    [v12 WFLog:v14 message:v13 WFLogTypeWiFiNotificationCreateJoinRecommendation v30];
    goto LABEL_6;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    int v12 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_6;
    }
    unsigned int v13 = "%s: null alert.";
LABEL_26:
    uint64_t v14 = 4;
    goto LABEL_5;
  }
  int v17 = Mutable;
  if (sub_100126DAC((uint64_t)a2)) {
    CFStringRef v18 = @"WIFI_ASK_TO_JOIN_NETWORK_AVAILABLE_TITLE_CH";
  }
  else {
    CFStringRef v18 = @"WIFI_ASK_TO_JOIN_NETWORK_AVAILABLE_TITLE";
  }
  id v19 = sub_100167C48((uint64_t)v18);
  CFDictionarySetValue(v17, kCFUserNotificationAlertHeaderKey, v19);
  id v20 = sub_100167C48(@"WIFI_ASK_TO_JOIN_JOIN_BUTTON");
  CFDictionarySetValue(v17, kCFUserNotificationDefaultButtonTitleKey, v20);
  id v21 = sub_100167C48(@"WIFI_ASK_TO_JOIN_CANCEL_BUTTON");
  CFDictionarySetValue(v17, kCFUserNotificationAlternateButtonTitleKey, v21);
  if (a5 == 12) {
    CFStringRef v22 = @"WIFI_ASK_TO_JOIN_NETWORK_HOTSPOT_RECOMMENDED_BODY";
  }
  else {
    CFStringRef v22 = @"WIFI_ASK_TO_JOIN_NETWORK_AVAILABLE_BODY";
  }
  CFStringRef v23 = (const __CFString *)sub_100167C48((uint64_t)v22);
  id v24 = sub_10001A43C(a4);
  CFStringRef v25 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v23, v24);
  if (!v25)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null messageString." args:("WiFiNotificationCreateJoinRecommendation")];
    }
    CFRelease(v17);
    return 0;
  }
  CFStringRef v26 = v25;
  CFDictionarySetValue(v17, kCFUserNotificationAlertMessageKey, v25);
  uint64_t v15 = sub_1000D8B08(a1, a5, 0, a2, v17, 0, 0);
  if (v15)
  {
    *(void *)(v15 + 24) = CFRetain(a4);
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Dispatching Join Recommendation Notification(%d)", *(unsigned int *)(v15 + 40));
    }
  }
  CFRelease(v17);
  CFRelease(v26);
  return v15;
}

uint64_t sub_1000D9B58(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  if (!a4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: null network.", "WiFiNotificationCreateJoinFailureCaptive"];
    }
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 0;
  }
  uint64_t v8 = Mutable;
  if (sub_100167C34())
  {
    CFStringRef v9 = (const __CFString *)sub_100167C48(@"WIFI_JOIN_NETWORK_FAILURE_CAPTIVE_TITLE");
    CFStringRef v10 = sub_10001A43C(a4);
    CFStringRef v11 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v9, v10);
    CFStringRef v12 = (const __CFString *)sub_100167C48(@"WIFI_FAILURE_OK");
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: localization not available" args:("WiFiNotificationCreateJoinFailureCaptive", nil)];
    }
    uint64_t v14 = sub_10001A43C(a4);
    CFStringRef v11 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"Unable to join the network\n“%@”", v14);
    CFStringRef v12 = @"OK";
  }
  CFDictionarySetValue(v8, kCFUserNotificationAlertHeaderKey, v11);
  if (v11) {
    CFRelease(v11);
  }
  CFDictionarySetValue(v8, kCFUserNotificationDefaultButtonTitleKey, v12);
  uint64_t v15 = sub_1000D8B08(a1, 6, 0, a2, v8, 0, 0);
  if (!v15)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: failed to create notification of type join failure captive", "WiFiNotificationCreateJoinFailureCaptive")];
    }
    CFRelease(v8);
    return 0;
  }
  uint64_t v16 = v15;
  CFRelease(v8);
  *(void *)(v16 + 24) = CFRetain(a4);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Dispatching Join Failure Captive Notification(%d)", *(unsigned int *)(v16 + 40));
  }
  return v16;
}

uint64_t sub_1000D9DB8(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  if (!a4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null network." args:@"WiFiNotificationCreateJoinFailure"];
    }
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 0;
  }
  uint64_t v8 = Mutable;
  if (sub_100167C34())
  {
    CFStringRef v9 = (const __CFString *)sub_100167C48(@"WIFI_JOIN_NETWORK_FAILURE_TITLE");
    CFStringRef v10 = sub_10001A43C(a4);
    CFStringRef v11 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v9, v10);
    CFStringRef v12 = (const __CFString *)sub_100167C48(@"WIFI_FAILURE_OK");
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: localization not available" args:("WiFiNotificationCreateJoinFailure", nil)];
    }
    uint64_t v14 = sub_10001A43C(a4);
    CFStringRef v11 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"Unable to join the network\n“%@”", v14);
    CFStringRef v12 = @"OK";
  }
  CFDictionarySetValue(v8, kCFUserNotificationAlertHeaderKey, v11);
  if (v11) {
    CFRelease(v11);
  }
  CFDictionarySetValue(v8, kCFUserNotificationDefaultButtonTitleKey, v12);
  uint64_t v15 = sub_1000D8B08(a1, 7, 0, a2, v8, 0, 0);
  if (!v15)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: failed to create notification of type join failure", "WiFiNotificationCreateJoinFailure")];
    }
    CFRelease(v8);
    return 0;
  }
  uint64_t v16 = v15;
  CFRelease(v8);
  *(void *)(v16 + 24) = CFRetain(a4);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Dispatching Join Failure Notification(%d)", *(unsigned int *)(v16 + 40));
  }
  return v16;
}

uint64_t sub_1000DA018(uint64_t a1, uint64_t a2, int a3, void *a4, CFDictionaryRef theDict)
{
  if (!a4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: nil networks manager." args:("WiFiNotificationCreateColocatedJoin", nil)];
    }
    goto LABEL_62;
  }
  if (!theDict)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: additional inforation is null", "WiFiNotificationCreateColocatedJoin");
    }
    goto LABEL_62;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"SSID_STR");
  if (!Value)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: network SSID string is null", @"WiFiNotificationCreateColocatedJoin"];
    }
LABEL_62:
    return 0;
  }
  CFStringRef v10 = Value;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 0;
  }
  CFMutableDictionaryRef v12 = Mutable;
  uint64_t v56 = a1;
  BOOL v13 = sub_100167C34();
  uint64_t v14 = (const void *)a2;
  int v15 = sub_100126DAC(a2);
  id v16 = [a4 numberOfCandidates];
  if (!v16)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"No colocated candidates"];
    }
    CFStringRef v36 = 0;
LABEL_69:
    CFRelease(v12);
    uint64_t v48 = 0;
    if (!v36) {
      return v48;
    }
    goto LABEL_51;
  }
  id v17 = v16;
  id v18 = [a4 colocatedNetworks];
  id v19 = v18;
  if (v17 == (id)1)
  {
    CFStringRef v28 = sub_1000D1628([v18 objectAtIndex:0]);
    CFStringRef v22 = sub_10001A43C(v28);
    if (v13)
    {
      CFStringRef v29 = (const __CFString *)sub_100167C48(@"WIFI_LIMITED_COMPATIBILITY_JOIN_ONE_TITLE");
      CFStringRef v30 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v29, v22);
      CFDictionarySetValue(v12, kCFUserNotificationAlertHeaderKey, v30);
      if (v30) {
        CFRelease(v30);
      }
      if (v15) {
        CFStringRef v31 = @"WIFI_LIMITED_COMPATIBILITY_JOIN_ONE_BODY_CH";
      }
      else {
        CFStringRef v31 = @"WIFI_LIMITED_COMPATIBILITY_JOIN_ONE_BODY";
      }
      CFStringRef v27 = (const __CFString *)sub_100167C48((uint64_t)v31);
      goto LABEL_22;
    }
    CFDictionarySetValue(v12, kCFUserNotificationAlertHeaderKey, @"Related Wi-Fi Network Available");
    uint64_t v37 = a1;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: localization not available", "WiFiNotificationCreateColocatedJoin"];
    }
    CFStringRef v39 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"“%@” has a separate network name on this Wi-Fi network, which may affect some experiences. Do you want to also join “%@”?", v10, v22);
  }
  else
  {
    if (v17 != (id)2)
    {
      if (!v13)
      {
        CFDictionarySetValue(v12, kCFUserNotificationAlertHeaderKey, @"Related Wi-Fi Networks Available");
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, "%s: localization not available", "WiFiNotificationCreateColocatedJoin"];
        }
        CFStringRef v35 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"“%@” has separate network names on this Wi-Fi network, which may affect some experiences. Do you want to also join those networks?", v10);
        goto LABEL_31;
      }
      CFStringRef v32 = (const __CFString *)sub_100167C48(@"WIFI_LIMITED_COMPATIBILITY_JOIN_MANY_TITLE");
      CFStringRef v33 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v32, 0);
      CFDictionarySetValue(v12, kCFUserNotificationAlertHeaderKey, v33);
      if (v33) {
        CFRelease(v33);
      }
      if (v15) {
        CFStringRef v34 = @"WIFI_LIMITED_COMPATIBILITY_JOIN_MANY_BODY_CH";
      }
      else {
        CFStringRef v34 = @"WIFI_LIMITED_COMPATIBILITY_JOIN_MANY_BODY";
      }
      CFStringRef v27 = (const __CFString *)sub_100167C48((uint64_t)v34);
LABEL_30:
      CFStringRef v35 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v27, v10, v54, v55);
LABEL_31:
      CFStringRef v36 = v35;
      uint64_t v37 = v56;
      goto LABEL_39;
    }
    id v20 = sub_1000D1628([v18 objectAtIndex:0]);
    id v21 = sub_1000D1628([v19 objectAtIndex:1]);
    CFStringRef v22 = sub_10001A43C(v20);
    CFStringRef v23 = sub_10001A43C(v21);
    if (v13)
    {
      CFStringRef v24 = (const __CFString *)sub_100167C48(@"WIFI_LIMITED_COMPATIBILITY_JOIN_TWO_TITLE");
      CFStringRef v25 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v24, v22, v23);
      CFDictionarySetValue(v12, kCFUserNotificationAlertHeaderKey, v25);
      if (v25) {
        CFRelease(v25);
      }
      if (v15) {
        CFStringRef v26 = @"WIFI_LIMITED_COMPATIBILITY_JOIN_TWO_BODY_CH";
      }
      else {
        CFStringRef v26 = @"WIFI_LIMITED_COMPATIBILITY_JOIN_TWO_BODY";
      }
      CFStringRef v27 = (const __CFString *)sub_100167C48((uint64_t)v26);
      CFMutableArrayRef v55 = v23;
LABEL_22:
      CFStringRef v54 = v22;
      goto LABEL_30;
    }
    CFDictionarySetValue(v12, kCFUserNotificationAlertHeaderKey, @"Related Wi-Fi Networks Available");
    uint64_t v37 = v56;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: localization not available", "WiFiNotificationCreateColocatedJoin");
    }
    CFStringRef v39 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"“%@” has separate network names on this Wi-Fi network, which may affect some experiences. Do you want to also join “%@” & “%@”?", v10, v22, v23);
  }
  CFStringRef v36 = v39;
LABEL_39:
  BOOL v41 = sub_100167C34();
  if (v41) {
    CFStringRef v42 = (const __CFString *)sub_100167C48(@"WIFI_LIMITED_COMPATIBILITY_JOIN_BUTTON_OK");
  }
  else {
    CFStringRef v42 = @"Join";
  }
  id v43 = [objc_alloc((Class)SBSMutableUserNotificationButtonDefinition) initWithTitle:v42];
  [v43 setIsPreferredButton:1];
  [v43 setPresentationStyle:0];
  if (v41) {
    CFStringRef v44 = (const __CFString *)sub_100167C48(@"WIFI_LIMITED_COMPATIBILITY_JOIN_BUTTON_CANCEL");
  }
  else {
    CFStringRef v44 = @"Not Now";
  }
  id v45 = [objc_alloc((Class)SBSMutableUserNotificationButtonDefinition) initWithTitle:v44];
  id v46 = [objc_alloc((Class)NSArray) initWithObjects:[v45 build], [v43 build], nil];

  CFDictionarySetValue(v12, SBSUserNotificationButtonDefinitionsKey, v46);
  if (v46) {
    CFRelease(v46);
  }
  CFDictionarySetValue(v12, kCFUserNotificationAlertMessageKey, v36);
  uint64_t v47 = sub_1000D8B08(v37, 13, 0, v14, v12, 0, theDict);
  if (!v47)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: failed to create notification of limited compatibility assisted join", "WiFiNotificationCreateColocatedJoin")];
    }
    goto LABEL_69;
  }
  uint64_t v48 = v47;
  CFRelease(v12);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:message:3, @"Dispatching colocated join Notification(%d)", *(unsigned int *)(v48 + 40)];
  }
  if (v36) {
LABEL_51:
  }
    CFRelease(v36);
  return v48;
}

uint64_t sub_1000DA6BC(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t v7 = sub_100125B10((uint64_t)a2);
  if (!a4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: null network.", @"WiFiNotificationCreateAutoHotspotError"];
    }
    goto LABEL_20;
  }
  uint64_t v8 = v7;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null alert.", "WiFiNotificationCreateAutoHotspotError")
    }
LABEL_20:
    return 0;
  }
  CFStringRef v10 = Mutable;
  if (v8 == 2)
  {
    CFStringRef v11 = (const __CFString *)sub_100167C48(@"PERSONAL_HOTSPOT_DECLINED_BODY");
    CFMutableDictionaryRef v12 = sub_10001A43C(a4);
    CFStringRef v13 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v11, v12);
  }
  else
  {
    if (MGGetBoolAnswer())
    {
      CFStringRef v14 = (const __CFString *)sub_100167C48(@"PERSONAL_HOTSPOT_START_FAILURE_BODY_INTERNAL");
      CFStringRef v23 = sub_10001A43C(a4);
      CFStringRef v15 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v14, v23, v8);
    }
    else
    {
      CFStringRef v16 = (const __CFString *)sub_100167C48(@"PERSONAL_HOTSPOT_START_FAILURE_BODY");
      CFStringRef v24 = sub_10001A43C(a4);
      CFStringRef v15 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v16, v24);
    }
    CFStringRef v13 = v15;
    id v17 = sub_100167C48(@"PERSONAL_HOTSPOT_REMOTE_FAILURE_TITLE");
    CFDictionarySetValue(v10, kCFUserNotificationAlertHeaderKey, v17);
  }
  if (!v13)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: null messageString.", "WiFiNotificationCreateAutoHotspotError"];
    }
    CFRelease(v10);
    return 0;
  }
  CFDictionarySetValue(v10, kCFUserNotificationDefaultButtonTitleKey, @"OK");
  CFDictionarySetValue(v10, kCFUserNotificationAlertMessageKey, v13);
  uint64_t v18 = sub_1000D8B08(a1, 11, 0, a2, v10, 0, 0);
  if (v18)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Dispatching Auto Hotspot Join Failure Panel(%d)", *(unsigned int *)(v18 + 40))];
    }
    *(void *)(v18 + 24) = CFRetain(a4);
  }
  CFRelease(v10);
  CFRelease(v13);
  return v18;
}

uint64_t sub_1000DA988(uint64_t a1, const void *a2, int a3, const void *a4)
{
  if (!a4)
  {
    CFStringRef v10 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_6;
    }
    CFStringRef v11 = "%s: null network.";
    goto LABEL_20;
  }
  uint64_t v7 = sub_10001E404((uint64_t)a4, @"WiFiNetworkUserAcceptedRecommendationAt");
  if (v7)
  {
    uint64_t v8 = v7;
    CFStringRef v10 = (void *)qword_10027DD68;
    if (!qword_10027DD68)
    {
LABEL_6:
      return 0;
    }
    CFStringRef v26 = v8;
    CFStringRef v11 = "%s: user already accepted join recommendation for this network at %@. Suppressing alert.";
    uint64_t v12 = 3;
LABEL_5:
    [v10 WFLog:v12 message:v11 WFLogTypeWiFiNotificationCreateAskToJoinHotspot v26];
    goto LABEL_6;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    CFStringRef v10 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_6;
    }
    CFStringRef v11 = "%s: null alert.";
LABEL_20:
    uint64_t v12 = 4;
    goto LABEL_5;
  }
  CFStringRef v15 = Mutable;
  id v16 = sub_100167C48(@"PERSONAL_HOTSPOT_NEARBY_TITLE");
  CFDictionarySetValue(v15, kCFUserNotificationAlertHeaderKey, v16);
  id v17 = sub_100167C48(@"WIFI_JOIN_NETWORK_JOIN");
  CFDictionarySetValue(v15, kCFUserNotificationDefaultButtonTitleKey, v17);
  id v18 = sub_100167C48(@"WIFI_JOIN_NETWORK_CANCEL");
  CFDictionarySetValue(v15, kCFUserNotificationAlternateButtonTitleKey, v18);
  CFStringRef v19 = (const __CFString *)sub_100167C48(@"PERSONAL_HOTSPOT_NEARBY_BODY");
  id v20 = sub_10001A43C(a4);
  CFStringRef v21 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v19, v20);
  if (!v21)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null messageString.", "WiFiNotificationCreateAskToJoinHotspot")];
    }
    CFRelease(v15);
    return 0;
  }
  CFStringRef v22 = v21;
  CFDictionarySetValue(v15, kCFUserNotificationAlertMessageKey, v21);
  uint64_t v13 = sub_1000D8B08(a1, 10, 0, a2, v15, 0, 0);
  if (v13)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Dispatching Auto Hotspot Panel(%d)", *(unsigned int *)(v13 + 40));
    }
    *(void *)(v13 + 24) = CFRetain(a4);
  }
  CFRelease(v15);
  CFRelease(v22);
  return v13;
}

uint64_t sub_1000DAC4C(uint64_t a1, int a2, uint64_t a3, const void *a4, int a5, CFDictionaryRef *a6, CFDictionaryRef theDict)
{
  switch(a2)
  {
    case 0:
      uint64_t result = sub_1000D8964(a1, a4);
      break;
    case 1:
    case 3:
      uint64_t result = sub_1000D9158(a1, (uint64_t)a4, a3, a6, a3);
      break;
    case 2:
      uint64_t result = sub_1000D8E04(a1, a4, a3, a6, theDict, a3);
      break;
    case 5:
    case 12:
      uint64_t result = sub_1000D9860(a1, a4, a3, a6, a2);
      break;
    case 6:
      uint64_t result = sub_1000D9B58(a1, a4, a3, a6);
      break;
    case 7:
      uint64_t result = sub_1000D9DB8(a1, a4, a3, a6);
      break;
    case 10:
      uint64_t result = sub_1000DA988(a1, a4, a3, a6);
      break;
    case 11:
      uint64_t result = sub_1000DA6BC(a1, a4, a3, a6);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1000DAD20(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_1000DAD28(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_1000DAD30(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_1000DAD38(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_1000DAD40(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

BOOL sub_1000DAD48(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 32);
  BOOL v2 = v1 > 0xC;
  int v3 = (1 << v1) & 0x1425;
  return !v2 && v3 != 0;
}

void sub_1000DAD6C(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 96))
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 0:
        int v3 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_21;
        }
        uint64_t v4 = "Canceling Ask To Join panel";
        break;
      case 1:
      case 3:
        int v3 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_21;
        }
        uint64_t v4 = "Canceling pending password panel";
        break;
      case 2:
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"Canceling EAP Trust panel"];
        }
        goto LABEL_22;
      case 5:
        int v3 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_21;
        }
        uint64_t v4 = "Canceling Join Recommendation panel";
        break;
      case 7:
        int v3 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_21;
        }
        uint64_t v4 = "Canceling Join Failure panel";
        break;
      case 0xA:
        int v3 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_21;
        }
        uint64_t v4 = "Canceling Ask-To-Join Hotspot";
        break;
      case 0xB:
        int v3 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_21;
        }
        uint64_t v4 = "Canceling Auto Hotspot Failure";
        break;
      case 0xC:
        int v3 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_21;
        }
        uint64_t v4 = "Canceling Auto Hotspot Join Recommendation";
        break;
      default:
        goto LABEL_22;
    }
    [v3 WFLog:3 message:v4];
LABEL_21:
    CFUserNotificationCancel(*(CFUserNotificationRef *)(a1 + 120));
LABEL_22:
    sub_1000DB0EC(a1, 3);
  }
}

void sub_1000DAF5C(void *a1, int a2, CFTypeRef cf)
{
  sub_1000DB070(a1, cf);

  sub_1000DB0EC((uint64_t)a1, a2);
}

void sub_1000DAFA0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = a2;
  if (*(void *)(a1 + 56))
  {
    Main = CFRunLoopGetMain();
    uint64_t v4 = *(__CFRunLoopSource **)(a1 + 56);
    CFRunLoopAddSource(Main, v4, kCFRunLoopDefaultMode);
  }
}

void sub_1000DAFFC(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  if (*(void *)(a1 + 56))
  {
    Main = CFRunLoopGetMain();
    int v3 = *(__CFRunLoopSource **)(a1 + 56);
    CFRunLoopRemoveSource(Main, v3, kCFRunLoopDefaultMode);
  }
}

uint64_t sub_1000DB058(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 64) = a2;
  *(void *)(result + 72) = a3;
  return result;
}

CFDictionaryRef sub_1000DB060(uint64_t a1, const void *a2)
{
  CFDictionaryRef result = *(const __CFDictionary **)(a1 + 104);
  if (result) {
    return (const __CFDictionary *)CFDictionaryGetValue(result, a2);
  }
  return result;
}

void *sub_1000DB070(void *result, CFTypeRef cf)
{
  if (cf)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = (const void *)result[13];
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v3 + 104) = 0;
    }
    CFDictionaryRef result = CFRetain(cf);
    *(void *)(v3 + 104) = result;
    if (!*(_DWORD *)(v3 + 32))
    {
      id v5 = result;
      uint64_t v6 = *(const void **)(v3 + 24);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v3 + 24) = 0;
        id v5 = *(const void **)(v3 + 104);
      }
      CFDictionaryRef result = sub_100019658((int)kCFAllocatorDefault, v5);
      *(void *)(v3 + 24) = result;
    }
  }
  return result;
}

void sub_1000DB0EC(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 96) = a2;
  if (qword_10027DD68)
  {
    uint64_t v4 = *(int *)(a1 + 96);
    if (v4 > 5) {
      id v5 = 0;
    }
    else {
      id v5 = off_100241368[v4];
    }
    [(id)qword_10027DD68 WFLog:3, "Notification response received. Type=%d (%@) ResponseType=%d.", *(unsigned int *)(a1 + 32), v5, v4 message];
  }
  uint64_t v6 = *(void (**)(uint64_t, void))(a1 + 64);
  if (v6) {
    v6(a1, *(void *)(a1 + 72));
  }
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(a1 + 80);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 88);
    v7(a1, v8);
  }
}

__CFString *sub_1000DB1B8(unsigned int a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_100241368[a1];
  }
}

void sub_1000DB1D8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000DB318;
  block[3] = &unk_10023EAF8;
  void block[4] = a1;
  dispatch_sync((dispatch_queue_t)&_dispatch_main_q, block);
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  BOOL v3 = v2 > 0xD;
  int v4 = (1 << v2) & 0x3CEB;
  if (!v3 && v4 != 0)
  {
    uint64_t v6 = *(const void **)(a1 + 120);
    if (v6)
    {
      pthread_mutex_lock(&stru_10027CCC8);
      CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10027D788, v6);
      pthread_mutex_unlock(&stru_10027CCC8);
      CFUserNotificationCancel(*(CFUserNotificationRef *)(a1 + 120));
      uint64_t v7 = *(const void **)(a1 + 120);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(a1 + 120) = 0;
      }
    }
  }
  uint64_t v8 = *(const void **)(a1 + 16);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 16) = 0;
  }
  CFStringRef v9 = *(const void **)(a1 + 112);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 112) = 0;
  }
  CFStringRef v10 = *(const void **)(a1 + 24);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 24) = 0;
  }
  CFStringRef v11 = *(const void **)(a1 + 104);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 104) = 0;
  }
  uint64_t v12 = *(const void **)(a1 + 56);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 56) = 0;
  }
}

void sub_1000DB318(uint64_t a1)
{
}

void sub_1000DB320(const void *a1, uint64_t a2)
{
  uint64_t v10 = 0;
  CFStringRef v11 = &v10;
  uint64_t v12 = 0x2020000000;
  uint64_t v13 = 0;
  if (a1)
  {
    pthread_mutex_lock(&stru_10027CCC8);
    CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_10027D788, a1);
    id v5 = Value;
    if (Value) {
      CFRetain(Value);
    }
    pthread_mutex_unlock(&stru_10027CCC8);
    void v11[3] = (uint64_t)v5;
    if (v5)
    {
      if (v5[6])
      {
        CFTypeID v6 = CFGetTypeID(v5);
        uint64_t v7 = qword_10027D780;
        if (!qword_10027D780)
        {
          pthread_once(&stru_10027CCB8, (void (*)(void))sub_1000D88FC);
          uint64_t v7 = qword_10027D780;
        }
        if (v6 == v7)
        {
          CFRetain(a1);
          uint64_t v8 = *(NSObject **)(v11[3] + 48);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000DB4AC;
          block[3] = &unk_100240AD0;
          void block[4] = &v10;
          void block[5] = a2;
          void block[6] = a1;
          dispatch_async(v8, block);
          goto LABEL_12;
        }
        id v5 = (void *)v11[3];
        if (!v5) {
          goto LABEL_12;
        }
      }
      CFRelease(v5);
      void v11[3] = 0;
    }
  }
LABEL_12:
  _Block_object_dispose(&v10, 8);
}

void sub_1000DB494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000DB4AC(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 36);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: %lu type: %d inputType: %d", "__WiFiNotificationCFUNCallback_block_invoke", *(void *)(a1 + 40), *(unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 32), v2);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(v4 + 8) + 24);
  if (v2 != 1)
  {
    int v6 = *(_DWORD *)(v5 + 32);
    if (v6 != 13) {
      goto LABEL_14;
    }
  }
  uint64_t v7 = *(const void **)(v5 + 104);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 104) = 0;
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 104) = CFUserNotificationGetResponseDictionary(*(CFUserNotificationRef *)(v5 + 120));
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(*(void *)(v4 + 8) + 24);
  CFStringRef v9 = *(const void **)(v8 + 104);
  if (v9)
  {
    CFRetain(v9);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(*(void *)(v4 + 8) + 24);
  }
  int v6 = *(_DWORD *)(v8 + 32);
  if (v6 != 13)
  {
LABEL_14:
    uint64_t v12 = *(void *)(a1 + 40) & 3;
    if (v12 != 3)
    {
      if (v12 != 1)
      {
        if (v12)
        {
          int v11 = 0;
          goto LABEL_30;
        }
        if (v6 == 2)
        {
          int v11 = 1;
          goto LABEL_30;
        }
        if (v2 != 2)
        {
          if (v6) {
            int v11 = 1;
          }
          else {
            int v11 = 2;
          }
          goto LABEL_30;
        }
        goto LABEL_26;
      }
      if (v2 == 2 && v6 == 2)
      {
LABEL_26:
        int v11 = 4;
        goto LABEL_30;
      }
    }
    int v11 = 2;
    goto LABEL_30;
  }
  unsigned int v10 = [[-[__CFDictionary objectForKey:](CFUserNotificationGetResponseDictionary(*(CFUserNotificationRef *)(v8 + 120)) objectForKey:@"SBSUserNotificationButtonDefinitionResponseIndexKey") intValue];
  if (v10) {
    int v11 = v10 == 1;
  }
  else {
    int v11 = 2;
  }
  uint64_t v4 = *(void *)(a1 + 32);
LABEL_30:
  CFStringRef v14 = *(void **)(*(void *)(v4 + 8) + 24);
  CFDictionaryRef ResponseDictionary = CFUserNotificationGetResponseDictionary(*(CFUserNotificationRef *)(a1 + 48));
  sub_1000DB070(v14, ResponseDictionary);
  CFRelease(*(CFTypeRef *)(a1 + 48));
  sub_1000DB0EC(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v11);
  id v16 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

uint64_t sub_1000DB6C0(const void *a1, BOOL *a2, double a3)
{
  uint64_t v20 = 0;
  CFStringRef v21 = &v20;
  uint64_t v22 = 0x2020000000;
  uint64_t v23 = 0;
  if (a1)
  {
    if (MKBGetDeviceLockState() == 1 && !MKBUserUnlockedSinceBoot())
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Cannot copy password for %@. Device wasn't unlocked yet", a1 message];
      }
    }
    else
    {
      int v6 = dispatch_semaphore_create(0);
      uint64_t v16 = 0;
      id v17 = &v16;
      uint64_t v18 = 0x2020000000;
      char v19 = 0;
      CFRetain(a1);
      global_queue = dispatch_get_global_queue(0, 0);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000DB8D0;
      block[3] = &unk_1002413A0;
      void block[6] = &v16;
      void block[7] = a1;
      void block[4] = v6;
      void block[5] = &v20;
      dispatch_async(global_queue, block);
      dispatch_time_t v8 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
      BOOL v9 = dispatch_semaphore_wait(v6, v8) != 0;
      unsigned int v10 = v17;
      *((unsigned char *)v17 + 24) = v9;
      *a2 = v9;
      if (*((unsigned char *)v10 + 24))
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s:SecItemCopyMatching timed out, timeout %f\n", "WiFiSecurityCopyPasswordWithTimeout", *(void *)&a3);
        }
      }
      dispatch_release(v6);
      _Block_object_dispose(&v16, 8);
    }
  }
  uint64_t v12 = v21[3];
  _Block_object_dispose(&v20, 8);
  return v12;
}

void sub_1000DB8A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

intptr_t sub_1000DB8D0(uint64_t a1)
{
  CFTypeRef result = 0;
  uint64_t v2 = sub_1000DBA14(*(const void **)(a1 + 56), 0, 0, 0, 0, 1);
  BOOL v3 = v2;
  if (v2)
  {
    uint64_t v4 = SecItemCopyMatching(v2, &result);
    if (v4) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = result == 0;
    }
    if (!v5)
    {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = CFStringCreateFromExternalRepresentation(kCFAllocatorDefault, (CFDataRef)result, 0x8000100u);
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s:[%@] Error result %d \n", "WiFiSecurityCopyPasswordWithTimeout_block_invoke", *(void *)(a1 + 56), v4 message];
  }
LABEL_11:
  if (result)
  {
    CFRelease(result);
    CFTypeRef result = 0;
  }
  if (v3) {
    CFRelease(v3);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    uint64_t v7 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 56));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

__CFDictionary *sub_1000DBA14(const void *a1, const void *a2, const void *a3, int a4, int a5, int a6)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null account" : @"__WiFiSecurityCreateQuery" : v16];
    }
    goto LABEL_18;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: failed to create query for %@", "__WiFiSecurityCreateQuery", a1 message];
    }
LABEL_18:
    return 0;
  }
  uint64_t v13 = Mutable;
  CFDictionarySetValue(Mutable, kSecClass, kSecClassGenericPassword);
  CFDictionarySetValue(v13, kSecAttrAccount, a1);
  CFDictionarySetValue(v13, kSecAttrService, @"AirPort");
  CFDictionarySetValue(v13, kSecAttrSynchronizable, kSecAttrSynchronizableAny);
  if (a2) {
    CFDictionarySetValue(v13, kSecAttrLabel, a2);
  }
  if (a3) {
    CFDictionarySetValue(v13, kSecAttrDescription, a3);
  }
  if (a6) {
    CFDictionarySetValue(v13, kSecUseSystemKeychain, kCFBooleanTrue);
  }
  if (!a4) {
    CFDictionarySetValue(v13, kSecReturnData, kCFBooleanTrue);
  }
  if (a5) {
    CFDictionarySetValue(v13, kSecReturnAttributes, kCFBooleanTrue);
  }
  return v13;
}

CFStringRef sub_1000DBC0C(__CFString *a1)
{
  CFStringRef result = sub_1000DBCB4(a1, 1);
  if (!result)
  {
    BOOL v3 = getprogname();
    if (!strncmp("sharingd", v3, 8uLL)
      || (uint64_t v4 = getprogname(), !strncmp("HPSetup", v4, 7uLL))
      || (BOOL v5 = getprogname(), !strncmp("HDSViewService", v5, 0xEuLL)))
    {
      return sub_1000DBE10(a1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFStringRef sub_1000DBCB4(const __CFString *a1, int a2)
{
  CFStringRef v2 = a1;
  if (!a1) {
    return v2;
  }
  if (MKBGetDeviceLockState() != 1 || MKBUserUnlockedSinceBoot())
  {
    uint64_t v4 = sub_1000DBA14(v2, 0, 0, 0, 0, a2);
    BOOL v5 = v4;
    CFTypeRef result = 0;
    if (v4)
    {
      uint64_t v6 = SecItemCopyMatching(v4, &result);
      if (!v6 && result)
      {
        CFStringRef v2 = CFStringCreateFromExternalRepresentation(kCFAllocatorDefault, (CFDataRef)result, 0x8000100u);
LABEL_12:
        if (result)
        {
          CFRelease(result);
          CFTypeRef result = 0;
        }
        if (v5) {
          CFRelease(v5);
        }
        return v2;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s:[%@] Error result %d \n", "__WiFiSecurityCopyPassword", v2, v6 message];
    }
    CFStringRef v2 = 0;
    goto LABEL_12;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Cannot copy password for %@. Device wasn't unlocked yet", v2 message];
  }
  return 0;
}

CFStringRef sub_1000DBE10(void *a1)
{
  CFTypeRef result = 0;
  if (a1)
  {
    if ([a1 length])
    {
      id v3 = sub_1000DD93C(a1);
      uint64_t v4 = v3;
      if (v3 && [v3 length])
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          CFStringRef v14 = "WiFiSecurityCopyPasswordFromPasswordBackup";
          __int16 v15 = 2112;
          uint64_t v16 = a1;
          __int16 v17 = 2112;
          uint64_t v18 = v4;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s: ssid %@ (%@)", buf, 0x20u);
        }
        id v5 = +[NSMutableDictionary dictionary];
        [v5 setObject:kSecClassGenericPassword forKey:kSecClass];
        [v5 setObject:v4 forKey:kSecAttrAccount];
        [v5 setObject:@"AirPort" forKey:kSecAttrService];
        [v5 setObject:&__kCFBooleanTrue forKey:kSecReturnData];
        OSStatus v6 = SecItemCopyMatching((CFDictionaryRef)v5, &result);
        if (!v6 && result)
        {
          CFStringRef v7 = CFStringCreateFromExternalRepresentation(kCFAllocatorDefault, (CFDataRef)result, 0x8000100u);
          goto LABEL_14;
        }
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_13;
        }
        *(_DWORD *)buf = 136315650;
        CFStringRef v14 = "WiFiSecurityCopyPasswordFromPasswordBackup";
        __int16 v15 = 2112;
        uint64_t v16 = v4;
        __int16 v17 = 1024;
        LODWORD(v18) = v6;
        dispatch_time_t v8 = "%s:[%@] error result %d \n";
        uint32_t v9 = 28;
      }
      else
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_13;
        }
        *(_DWORD *)buf = 136315138;
        CFStringRef v14 = "WiFiSecurityCopyPasswordFromPasswordBackup";
        dispatch_time_t v8 = "%s: error: empty ssid hash";
        uint32_t v9 = 12;
      }
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, v8, buf, v9);
LABEL_13:
      CFStringRef v7 = 0;
      goto LABEL_14;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      CFStringRef v14 = "WiFiSecurityCopyPasswordFromPasswordBackup";
      int v11 = "%s: error: empty ssid";
      goto LABEL_23;
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    CFStringRef v14 = "WiFiSecurityCopyPasswordFromPasswordBackup";
    int v11 = "%s: null ssid";
LABEL_23:
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, v11, buf, 0xCu);
  }
  CFStringRef v7 = 0;
  uint64_t v4 = 0;
LABEL_14:

  if (result) {
    CFRelease(result);
  }
  return v7;
}

CFStringRef sub_1000DC14C(const __CFString *a1)
{
  return sub_1000DBCB4(a1, 0);
}

CFTypeRef sub_1000DC154(const void *a1)
{
  CFTypeRef result = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null account", "WiFiSecurityCopyPasswordModificationDate", v10);
    }
    goto LABEL_21;
  }
  if (MKBGetDeviceLockState() == 1 && !MKBUserUnlockedSinceBoot())
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: Cannot get keychain attributes for %@. Device wasn't unlocked yet", "WiFiSecurityCopyPasswordModificationDate", a1 message];
    }
LABEL_21:
    CFTypeRef v6 = 0;
    id v3 = 0;
    goto LABEL_12;
  }
  CFStringRef v2 = sub_1000DBA14(a1, 0, 0, 0, 1, 1);
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = SecItemCopyMatching(v2, &result);
    if (!v4 && result)
    {
      CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)result, kSecAttrModificationDate);
      CFTypeRef v6 = CFRetain(Value);
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s:[%@] Error result %d", "WiFiSecurityCopyPasswordModificationDate", a1, v4 message];
  }
  CFTypeRef v6 = 0;
LABEL_12:
  if (result)
  {
    CFRelease(result);
    CFTypeRef result = 0;
  }
  if (v3) {
    CFRelease(v3);
  }
  return v6;
}

uint64_t sub_1000DC2E4(const void *a1, const __CFString *a2, BOOL *a3, double a4)
{
  BOOL v27 = 0;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: for account %@", "WiFiSecuritySetPasswordWithTimeout", a1 message];
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null account" :@"WiFiSecuritySetPasswordWithTimeout" :v25];
    }
    goto LABEL_35;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null password" args:@"WiFiSecuritySetPasswordWithTimeout", v25];
    }
    goto LABEL_35;
  }
  if (!CFStringGetLength(a2))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: Error: Empty password for account %@", "WiFiSecuritySetPasswordWithTimeout", a1 message];
    }
LABEL_35:
    return 0;
  }
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(kCFAllocatorDefault, a2, 0x8000100u, 0);
  CFStringRef v10 = (const __CFString *)sub_1000DB6C0(a1, &v27, a4);
  CFStringRef v11 = v10;
  BOOL v12 = v27;
  if (v27)
  {
    CFDictionaryRef v13 = 0;
    *a3 = 1;
    uint64_t v14 = 4294899568;
  }
  else
  {
    if (v10)
    {
      if (CFEqual(a2, v10))
      {
        *a3 = v12;
        uint64_t v20 = 1;
        goto LABEL_25;
      }
      __int16 v15 = sub_1000DBA14(a1, 0, 0, 1, 0, 1);
      if (!v15)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null query", "WiFiSecuritySetPasswordWithTimeout")];
        }
        uint64_t v20 = 0;
        goto LABEL_25;
      }
      CFDictionaryRef v13 = v15;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      CFDictionarySetValue(Mutable, kSecValueData, ExternalRepresentation);
      CFDictionarySetValue(Mutable, kSecAttrLabel, a1);
      CFDictionarySetValue(Mutable, kSecAttrDescription, @"AirPort network password");
      uint64_t v14 = SecItemUpdate(v13, Mutable);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    else
    {
      __int16 v17 = sub_1000DBA14(a1, a1, @"AirPort network password", 1, 0, 1);
      if (!v17)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: null query" args:("WiFiSecuritySetPasswordWithTimeout")];
        }
        uint64_t v20 = 0;
        if (ExternalRepresentation) {
          goto LABEL_27;
        }
        return v20;
      }
      CFDictionaryRef v13 = v17;
      CFTypeRef result = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      CFDictionarySetValue(v17, kSecValueData, ExternalRepresentation);
      CFDictionarySetValue(v13, kSecAttrAccessible, kSecAttrAccessibleAfterFirstUnlock);
      CFDictionarySetValue(v13, kSecAttrSynchronizable, kCFBooleanTrue);
      uint64_t v14 = SecItemAdd(v13, &result);
    }
    *a3 = v12;
    if (!v14)
    {
      notify_post("com.apple.wifid.WiFiPasswordChanged");
      uint64_t v19 = 1;
      goto LABEL_22;
    }
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s:[%@] Error result %d \n", "WiFiSecuritySetPasswordWithTimeout", a1, v14 message];
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (!v13)
  {
    if (!v11) {
      goto LABEL_26;
    }
LABEL_25:
    CFRelease(v11);
    goto LABEL_26;
  }
LABEL_22:
  CFRelease(v13);
  uint64_t v20 = v19;
  if (v11) {
    goto LABEL_25;
  }
LABEL_26:
  if (ExternalRepresentation) {
LABEL_27:
  }
    CFRelease(ExternalRepresentation);
  return v20;
}

BOOL sub_1000DC6B4(__CFString *a1, const __CFString *a2)
{
  return sub_1000DC6BC(a1, a2, 1);
}

BOOL sub_1000DC6BC(__CFString *a1, CFStringRef theString, int a3)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null account" args:v19];
    }
    goto LABEL_29;
  }
  if (!theString)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null password" args:v19];
    }
    goto LABEL_29;
  }
  if (!CFStringGetLength(theString))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: Error: Empty password for account %@", "__WiFiSecuritySetPassword", a1 message];
    }
LABEL_29:
    return 0;
  }
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(kCFAllocatorDefault, theString, 0x8000100u, 0);
  CFStringRef v7 = sub_1000DBC0C(a1);
  if (v7)
  {
    if (CFEqual(theString, v7))
    {
      BOOL v13 = 1;
LABEL_19:
      CFRelease(v7);
      goto LABEL_20;
    }
    dispatch_time_t v8 = sub_1000DBA14(a1, 0, 0, 1, 0, a3);
    if (!v8)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null query" : @"__WiFiSecuritySetPassword"];
      }
      BOOL v13 = 0;
      goto LABEL_19;
    }
    CFDictionaryRef v9 = v8;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
    CFDictionarySetValue(Mutable, kSecValueData, ExternalRepresentation);
    CFDictionarySetValue(Mutable, kSecAttrLabel, a1);
    CFDictionarySetValue(Mutable, kSecAttrDescription, @"AirPort network password");
    uint64_t v11 = SecItemUpdate(v9, Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    BOOL v12 = sub_1000DBA14(a1, a1, @"AirPort network password", 1, 0, a3);
    if (!v12)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null query" :@"__WiFiSecuritySetPassword"];
      }
      BOOL v13 = 0;
      if (ExternalRepresentation) {
        goto LABEL_21;
      }
      return v13;
    }
    CFDictionaryRef v9 = v12;
    CFTypeRef result = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    CFDictionarySetValue(v12, kSecValueData, ExternalRepresentation);
    CFDictionarySetValue(v9, kSecAttrAccessible, kSecAttrAccessibleAfterFirstUnlock);
    CFDictionarySetValue(v9, kSecAttrSynchronizable, kCFBooleanTrue);
    uint64_t v11 = SecItemAdd(v9, &result);
  }
  BOOL v13 = v11 == 0;
  if (v11)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s:[%@] Error result %d \n", "__WiFiSecuritySetPassword", a1, v11 message];
    }
  }
  else
  {
    notify_post("com.apple.wifid.WiFiPasswordChanged");
  }
  CFRelease(v9);
  if (v7) {
    goto LABEL_19;
  }
LABEL_20:
  if (ExternalRepresentation) {
LABEL_21:
  }
    CFRelease(ExternalRepresentation);
  return v13;
}

BOOL sub_1000DCA54(__CFString *a1, const __CFString *a2)
{
  return sub_1000DC6BC(a1, a2, 0);
}

uint64_t sub_1000DCA5C(const void *a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s: Removing password for %@", "WiFiSecurityRemovePassword", a1 message];
  }

  return sub_1000DCAD8(a1, 1);
}

uint64_t sub_1000DCAD8(const void *a1, int a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null account" :@"__WiFiSecurityRemovePassword"];
    }
    goto LABEL_13;
  }
  id v3 = sub_1000DBA14(a1, 0, 0, 0, 0, a2);
  if (!v3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null query", "__WiFiSecurityRemovePassword")
    }
LABEL_13:
    CFStringRef v7 = v9;
LABEL_7:
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = SecItemDelete(v3);
  CFRelease(v4);
  if (v5)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s:[%@] Error result %d \n", "__WiFiSecurityRemovePassword", a1, v5 message];
    }
    CFStringRef v7 = v6;
    goto LABEL_7;
  }
  notify_post("com.apple.wifid.WiFiPasswordChanged");
  return 1;
}

uint64_t sub_1000DCC04(const void *a1)
{
  return sub_1000DCAD8(a1, 0);
}

uint64_t sub_1000DCC0C(const void *a1)
{
  CFTypeRef result = 0;
  if (a1)
  {
    if (MKBGetDeviceLockState() != 1 || MKBUserUnlockedSinceBoot())
    {
      CFStringRef v2 = sub_1000DBA14(a1, 0, 0, 0, 1, 1);
      id v3 = v2;
      if (v2)
      {
        uint64_t v4 = SecItemCopyMatching(v2, &result);
        if (!v4 && result)
        {
          CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)result, kSecAttrSynchronizable);
          if (Value)
          {
            uint64_t v6 = CFBooleanGetValue(Value);
            goto LABEL_14;
          }
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s:[%@] Error result %d \n", "WiFiSecurityIsPasswordSyncing", a1, v4 message];
      }
LABEL_13:
      uint64_t v6 = 0;
      goto LABEL_14;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: Cannot get keychain attributes for %@. Device wasn't unlocked yet", "WiFiSecurityIsPasswordSyncing", a1 message];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: null account", "WiFiSecurityIsPasswordSyncing", v10];
    }
  }
  uint64_t v6 = 0;
  id v3 = 0;
LABEL_14:
  if (result)
  {
    CFRelease(result);
    CFTypeRef result = 0;
  }
  if (v3) {
    CFRelease(v3);
  }
  return v6;
}

BOOL sub_1000DCDA0(__CFString *a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null account" : @"WiFiSecuritySetPasswordSyncable"];
    }
    goto LABEL_18;
  }
  CFStringRef v4 = sub_1000DBC0C(a1);
  if (!v4)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null existingPassword", "WiFiSecuritySetPasswordSyncable")];
    }
LABEL_18:
    return 0;
  }
  CFStringRef v5 = v4;
  uint64_t v6 = sub_1000DBA14(a1, 0, 0, 0, 0, 1);
  if (!v6)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null query", "WiFiSecuritySetPasswordSyncable")];
    }
    CFRelease(v5);
    return 0;
  }
  CFStringRef v7 = v6;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
  if (Mutable)
  {
    CFDictionaryRef v9 = Mutable;
    uint64_t v10 = (const void **)&kCFBooleanFalse;
    if (a2) {
      uint64_t v10 = (const void **)&kCFBooleanTrue;
    }
    CFDictionarySetValue(Mutable, kSecAttrSynchronizable, *v10);
    CFDictionaryRemoveValue(v7, kSecReturnData);
    uint64_t v11 = SecItemUpdate(v7, v9);
    BOOL v12 = v11 == 0;
    if (v11)
    {
      uint64_t v13 = v11;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s:[%@]%d Error result %d \n", "WiFiSecuritySetPasswordSyncable", a1, a2, v13 message];
      }
    }
    CFRelease(v9);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null newVal", "WiFiSecuritySetPasswordSyncable");
    }
    BOOL v12 = 0;
  }
  CFRelease(v5);
  CFRelease(v7);
  return v12;
}

__CFString *sub_1000DCFF4(const __CFString *a1, const __CFData *a2)
{
  CFMutableDictionaryRef Mutable = 0;
  if (a1 && a2)
  {
    *(_OWORD *)bytes = 0u;
    long long v10 = 0u;
    CFStringGetCStringPtr(a1, 0x8000100u);
    CFDataGetBytePtr(a2);
    CFDataGetLength(a2);
    if (Apple80211ParseWPAPassword()) {
      return 0;
    }
    CFDataRef v4 = CFDataCreate(kCFAllocatorDefault, bytes, 32);
    if (!v4)
    {
      return 0;
    }
    else
    {
      CFDataRef v5 = v4;
      BytePtr = CFDataGetBytePtr(v4);
      if (CFDataGetLength(v5) == 32)
      {
        CFMutableDictionaryRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 64);
        for (uint64_t i = 0; i != 32; ++i)
          CFStringAppendFormat(Mutable, 0, @"%02x", BytePtr[i]);
      }
      else
      {
        CFMutableDictionaryRef Mutable = 0;
      }
      CFRelease(v5);
    }
  }
  return Mutable;
}

CFTypeRef sub_1000DD148()
{
  CFTypeRef result = 0;
  if (MKBGetDeviceLockState() == 1 && !MKBUserUnlockedSinceBoot())
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: Cannot get all airport keychain attributes. Device wasn't unlocked yet", @"WiFiSecurityCopyAttributesForAllAirPortEntries"];
    }
    goto LABEL_12;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: failed to create query", @"__WiFiSecurityCreateWildcardAttributeQuery"];
    }
LABEL_12:
    return 0;
  }
  uint64_t v1 = Mutable;
  CFDictionarySetValue(Mutable, kSecClass, kSecClassGenericPassword);
  CFDictionarySetValue(v1, kSecMatchLimit, kSecMatchLimitAll);
  CFDictionarySetValue(v1, kSecAttrService, @"AirPort");
  CFDictionarySetValue(v1, kSecAttrSynchronizable, kSecAttrSynchronizableAny);
  CFDictionarySetValue(v1, kSecReturnAttributes, kCFBooleanTrue);
  CFDictionarySetValue(v1, kSecUseSystemKeychain, kCFBooleanTrue);
  uint64_t v2 = SecItemCopyMatching(v1, &result);
  if (v2 && result)
  {
    uint64_t v3 = v2;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s Error result %d" arguments:@"WiFiSecurityCopyAttributesForAllAirPortEntries", v3];
    }
  }
  CFRelease(v1);
  return result;
}

CFStringRef sub_1000DD344(const __CFString *a1)
{
  CFStringRef v1 = a1;
  CFTypeRef result = 0;
  if (!a1) {
    return v1;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Attempting to fetch non-syncable password for account %@", "WiFiSecurityCopyNonSyncablePassword", v1 message];
  }
  if (MKBGetDeviceLockState() == 1 && !MKBUserUnlockedSinceBoot())
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Cannot copy password for %@. Device wasn't unlocked yet", v1 message];
    }
    CFDataRef v4 = 0;
    goto LABEL_18;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
  CFDataRef v4 = Mutable;
  if (!Mutable)
  {
LABEL_18:
    CFStringRef v1 = 0;
    goto LABEL_19;
  }
  CFDictionarySetValue(Mutable, kSecClass, kSecClassGenericPassword);
  CFDictionarySetValue(v4, kSecAttrAccount, v1);
  CFDictionarySetValue(v4, kSecAttrService, @"AirPort");
  CFDictionarySetValue(v4, kSecUseSystemKeychain, kCFBooleanTrue);
  CFDictionarySetValue(v4, kSecReturnData, kCFBooleanTrue);
  uint64_t v5 = SecItemCopyMatching(v4, &result);
  if (v5) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = result == 0;
  }
  if (v6)
  {
    uint64_t v7 = v5;
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s:[%@] Error result %d", "WiFiSecurityCopyNonSyncablePassword", v1, v7 message];
    }
    goto LABEL_18;
  }
  CFStringRef v1 = CFStringCreateFromExternalRepresentation(kCFAllocatorDefault, (CFDataRef)result, 0x8000100u);
LABEL_19:
  if (result)
  {
    CFRelease(result);
    CFTypeRef result = 0;
  }
  if (v4) {
    CFRelease(v4);
  }
  return v1;
}

uint64_t sub_1000DD55C(const void *a1, BOOL *a2, double a3)
{
  uint64_t v20 = 0;
  CFStringRef v21 = &v20;
  uint64_t v22 = 0x2020000000;
  uint64_t v23 = 0;
  if (a1)
  {
    if (MKBGetDeviceLockState() == 1 && !MKBUserUnlockedSinceBoot())
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Cannot copy password for %@. Device wasn't unlocked yet", a1 message];
      }
    }
    else
    {
      BOOL v6 = dispatch_semaphore_create(0);
      uint64_t v16 = 0;
      __int16 v17 = &v16;
      uint64_t v18 = 0x2020000000;
      char v19 = 0;
      CFRetain(a1);
      global_queue = dispatch_get_global_queue(0, 0);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000DD76C;
      block[3] = &unk_1002413A0;
      void block[6] = &v16;
      void block[7] = a1;
      void block[4] = v6;
      void block[5] = &v20;
      dispatch_async(global_queue, block);
      dispatch_time_t v8 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
      BOOL v9 = dispatch_semaphore_wait(v6, v8) != 0;
      long long v10 = v17;
      *((unsigned char *)v17 + 24) = v9;
      *a2 = v9;
      if (*((unsigned char *)v10 + 24))
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s:SecItemCopyMatching timed out, timeout %f\n", "WiFiSecurityCopyNonSyncablePasswordWithTimeout", *(void *)&a3);
        }
      }
      dispatch_release(v6);
      _Block_object_dispose(&v16, 8);
    }
  }
  uint64_t v12 = v21[3];
  _Block_object_dispose(&v20, 8);
  return v12;
}

void sub_1000DD740(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

intptr_t sub_1000DD76C(uint64_t a1)
{
  CFTypeRef result = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
  uint64_t v3 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, kSecClass, kSecClassGenericPassword);
    CFDictionarySetValue(v3, kSecAttrAccount, *(const void **)(a1 + 56));
    CFDictionarySetValue(v3, kSecAttrService, @"AirPort");
    CFDictionarySetValue(v3, kSecUseSystemKeychain, kCFBooleanTrue);
    CFDictionarySetValue(v3, kSecReturnData, kCFBooleanTrue);
    uint64_t v4 = SecItemCopyMatching(v3, &result);
    if (v4) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = result == 0;
    }
    if (!v5)
    {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = CFStringCreateFromExternalRepresentation(kCFAllocatorDefault, (CFDataRef)result, 0x8000100u);
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s:[%@] Error result %d \n", "WiFiSecurityCopyNonSyncablePasswordWithTimeout_block_invoke", *(void *)(a1 + 56), v4 message];
  }
LABEL_11:
  if (result)
  {
    CFRelease(result);
    CFTypeRef result = 0;
  }
  if (v3) {
    CFRelease(v3);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    uint64_t v7 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 56));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_1000DD93C(void *a1)
{
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  macOut[0] = v3;
  macOut[1] = v3;
  uint64_t v4 = (const char *)[a1 cStringUsingEncoding:4];
  size_t v5 = strlen(v4);
  CCHmac(2u, "CURRENT_NETWORK", 0xFuLL, v4, v5, macOut);
  id v6 = [objc_alloc((Class)NSMutableString) initWithCapacity:64];
  for (uint64_t i = 0; i != 32; ++i)
    [v6 appendFormat:@"%02x", *((unsigned __int8 *)macOut + i)];
  return v6;
}

BOOL sub_1000DDA38(uint64_t a1, uint64_t a2)
{
  size_t v5 = dispatch_semaphore_create(0);
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  int v15 = 0;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000DDC2C;
  void v11[3] = &unk_1002413C8;
  v11[4] = a1;
  v11[5] = a2;
  v11[6] = v5;
  v11[7] = &v12;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v11);
  dispatch_time_t v6 = dispatch_time(0, 1000000000);
  intptr_t v7 = dispatch_semaphore_wait(v5, v6);
  BOOL v8 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v8)
    {
      *(_DWORD *)buf = 136315394;
      __int16 v17 = "WiFiSecuritySavePasswordForPasswordBackup";
      __int16 v18 = 2112;
      uint64_t v19 = a1;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s:[%@] timed out\n", buf, 0x16u);
    }
    BOOL v9 = 0;
  }
  else
  {
    if (v8)
    {
      *(_DWORD *)buf = 136315394;
      __int16 v17 = "WiFiSecuritySavePasswordForPasswordBackup";
      __int16 v18 = 2112;
      uint64_t v19 = a1;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s:[%@] completed\n", buf, 0x16u);
    }
    BOOL v9 = *((_DWORD *)v13 + 6) == 0;
  }
  dispatch_release(v5);
  _Block_object_dispose(&v12, 8);
  return v9;
}

intptr_t sub_1000DDC2C(uint64_t a1)
{
  CFTypeRef result = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    *(_DWORD *)buf = 136315138;
    __int16 v17 = "WiFiSecuritySavePasswordForPasswordBackup_block_invoke";
    uint64_t v12 = "%s: null ssid";
LABEL_24:
    uint32_t v13 = 12;
LABEL_27:
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, v12, buf, v13);
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    *(_DWORD *)buf = 136315138;
    __int16 v17 = "WiFiSecuritySavePasswordForPasswordBackup_block_invoke";
    uint64_t v12 = "%s: null password";
    goto LABEL_24;
  }
  if (![v2 length])
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    *(_DWORD *)buf = 136315138;
    __int16 v17 = "WiFiSecuritySavePasswordForPasswordBackup_block_invoke";
    uint64_t v12 = "%s: error: empty ssid";
    goto LABEL_24;
  }
  if (![*(id *)(a1 + 40) length])
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136315394;
      __int16 v17 = "WiFiSecuritySavePasswordForPasswordBackup_block_invoke";
      __int16 v18 = 2112;
      uint64_t v19 = v14;
      uint64_t v12 = "%s: error: empty password for ssid %@";
      uint32_t v13 = 22;
      goto LABEL_27;
    }
LABEL_28:
    uint64_t v4 = 0;
    goto LABEL_15;
  }
  id v3 = sub_1000DD93C(*(void **)(a1 + 32));
  uint64_t v4 = v3;
  if (!v3 || ![v3 length])
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    *(_DWORD *)buf = 136315138;
    __int16 v17 = "WiFiSecuritySavePasswordForPasswordBackup_block_invoke";
    BOOL v9 = "%s: error: empty ssid hash";
    uint32_t v10 = 12;
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    size_t v5 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 136315650;
    __int16 v17 = "WiFiSecuritySavePasswordForPasswordBackup_block_invoke";
    __int16 v18 = 2112;
    uint64_t v19 = v5;
    __int16 v20 = 2112;
    CFStringRef v21 = v4;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s: ssid %@ (%@)", buf, 0x20u);
  }
  id v6 = [*(id *)(a1 + 40) dataUsingEncoding:4];
  id v7 = +[NSMutableDictionary dictionary];
  [v7 setObject:kSecClassGenericPassword forKey:kSecClass];
  [v7 setObject:v4 forKey:kSecAttrAccount];
  [v7 setObject:@"AirPort" forKey:kSecAttrService];
  [v7 setObject:v6 forKey:kSecValueData];
  [v7 setObject:kSecAttrAccessibleAfterFirstUnlock forKey:kSecAttrAccessible];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = SecItemAdd((CFDictionaryRef)v7, &result);
  int v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  if (v8 == -25299)
  {
    sub_1000DE060(*(void *)(a1 + 32));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = SecItemAdd((CFDictionaryRef)v7, &result);
    int v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  }
  if (v8 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    __int16 v17 = "WiFiSecuritySavePasswordForPasswordBackup_block_invoke";
    __int16 v18 = 2112;
    uint64_t v19 = v4;
    __int16 v20 = 1024;
    LODWORD(v21) = v8;
    BOOL v9 = "%s:[%@] error result %d \n";
    uint32_t v10 = 28;
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, v9, buf, v10);
  }
LABEL_15:

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

BOOL sub_1000DE060(uint64_t a1)
{
  id v3 = dispatch_semaphore_create(0);
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000DE250;
  block[3] = &unk_1002413F0;
  void block[5] = v3;
  void block[6] = &v10;
  void block[4] = a1;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  dispatch_time_t v4 = dispatch_time(0, 1000000000);
  intptr_t v5 = dispatch_semaphore_wait(v3, v4);
  BOOL v6 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v6)
    {
      *(_DWORD *)buf = 136315394;
      int v15 = "WiFiSecurityRemovePasswordFromPasswordBackup";
      __int16 v16 = 2112;
      uint64_t v17 = a1;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s:[%@] timed out\n", buf, 0x16u);
    }
    BOOL v7 = 0;
  }
  else
  {
    if (v6)
    {
      *(_DWORD *)buf = 136315394;
      int v15 = "WiFiSecurityRemovePasswordFromPasswordBackup";
      __int16 v16 = 2112;
      uint64_t v17 = a1;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s:[%@] completed\n", buf, 0x16u);
    }
    BOOL v7 = *((_DWORD *)v11 + 6) == 0;
  }
  dispatch_release(v3);
  _Block_object_dispose(&v10, 8);
  return v7;
}

intptr_t sub_1000DE250(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315138;
      int v13 = "WiFiSecurityRemovePasswordFromPasswordBackup_block_invoke";
      uint64_t v11 = "%s: null ssid";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v12, 0xCu);
    }
LABEL_19:
    dispatch_time_t v4 = 0;
    goto LABEL_11;
  }
  if (![v2 length])
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315138;
      int v13 = "WiFiSecurityRemovePasswordFromPasswordBackup_block_invoke";
      uint64_t v11 = "%s: error: empty ssid";
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  id v3 = sub_1000DD93C(*(void **)(a1 + 32));
  dispatch_time_t v4 = v3;
  if (!v3 || ![v3 length])
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    int v12 = 136315138;
    int v13 = "WiFiSecurityRemovePasswordFromPasswordBackup_block_invoke";
    int v8 = "%s: error: empty ssid hash";
    uint32_t v9 = 12;
    goto LABEL_10;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    intptr_t v5 = *(void **)(a1 + 32);
    int v12 = 136315650;
    int v13 = "WiFiSecurityRemovePasswordFromPasswordBackup_block_invoke";
    __int16 v14 = 2112;
    int v15 = v5;
    __int16 v16 = 2112;
    uint64_t v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s: ssid %@ (%@)", (uint8_t *)&v12, 0x20u);
  }
  id v6 = +[NSMutableDictionary dictionary];
  [v6 setObject:kSecClassGenericPassword forKey:kSecClass];
  [v6 setObject:v4 forKey:kSecAttrAccount];
  [v6 setObject:@"AirPort" forKey:kSecAttrService];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = SecItemDelete((CFDictionaryRef)v6);
  int v7 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  if (v7 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315650;
    int v13 = "WiFiSecurityRemovePasswordFromPasswordBackup_block_invoke";
    __int16 v14 = 2112;
    int v15 = v4;
    __int16 v16 = 1024;
    LODWORD(v17) = v7;
    int v8 = "%s:[%@] error result %d \n";
    uint32_t v9 = 28;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v12, v9);
  }
LABEL_11:

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

uint64_t sub_1000DE538()
{
  uint64_t result = qword_10027D790;
  if (!qword_10027D790)
  {
    pthread_once(&stru_10027CD10, (void (*)(void))sub_1000DE580);
    return qword_10027D790;
  }
  return result;
}

uint64_t sub_1000DE580()
{
  qword_10027D790 = _CFRuntimeRegisterClass();

  return notify_register_check("com.apple.wifi.manager.available", &dword_10027CD20);
}

double sub_1000DE5C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3)
  {
    if (!qword_10027D790) {
      pthread_once(&stru_10027CD10, (void (*)(void))sub_1000DE580);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      double result = 0.0;
      *(_OWORD *)(Instance + 16) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      *(void *)(Instance + 16) = a3;
      *(void *)(Instance + 40) = a2;
    }
  }
  return result;
}

uint64_t sub_1000DE654(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    mach_port_t sp = -1431655766;
    if (bootstrap_check_in(bootstrap_port, *(const char **)(a1 + 40), &sp)) {
      return 0;
    }
    intptr_t v5 = sub_1000C1E20((uint64_t)kCFAllocatorDefault, 60, sp, 0);
    *(void *)(a1 + 32) = v5;
    if (!v5) {
      return 0;
    }
    unsigned int v6 = sub_10005B6C8((uint64_t)v5);
    sub_1000C2278(v6, (const void *)a1);
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = 1;
  }
  sub_1000C20C8(v3);
  return v4;
}

uint64_t sub_1000DE70C(uint64_t a1)
{
  return sub_1000C2138(*(void *)(a1 + 32));
}

uint64_t sub_1000DE714(unsigned int a1, int a2, uint64_t a3, int a4, unsigned int *a5, _DWORD *a6, long long *a7)
{
  *a5 = 0;
  *a6 = 0;
  uint64_t v14 = qword_10027D790;
  if (!qword_10027D790)
  {
    pthread_once(&stru_10027CD10, (void (*)(void))sub_1000DE580);
    uint64_t v14 = qword_10027D790;
  }
  int v15 = (uint64_t *)sub_10000E504(a1, v14);
  if (v15)
  {
    __int16 v16 = v15;
    uint64_t v17 = v15[2];
    long long v18 = a7[1];
    v26[0] = *a7;
    v26[1] = v18;
    uint64_t v19 = sub_10005B25C((uint64_t)kCFAllocatorDefault, a2, v17, a3, 60, a4, v26);
    if (v19)
    {
      __int16 v20 = (const void *)v19;
      if (!sub_10005B12C(v19))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_open(mach_port_t, int, int, mach_port_t, mach_port_t *, int *, audit_token_t)", sub_100016E18((uint64_t)v20) message];
        }
        *a6 = 1;
        CFRelease(v20);
        goto LABEL_13;
      }
      sub_10005D1EC((uint64_t)v20, (uint64_t)sub_1000DE94C, (uint64_t)v16);
      sub_10005B6B8((uint64_t)v20);
      sub_100092B50(v16[2], v20);
      unsigned int v21 = sub_10005B6E0((uint64_t)v20);
      *a5 = v21;
      sub_1000C2278(v21, v20);
      if (a2 != 1)
      {
LABEL_13:
        CFRelease(v16);
        return 0;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "Attached client %@ is background application", sub_100016E18((uint64_t)v20) message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"Failed to create WiFi Manager client for pid=%d", a3];
      }
    }
    goto LABEL_13;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4 message:"Failed to acquire WiFiServerRef for mach port"];
  }
  return 0;
}

void sub_1000DE94C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100016E18((uint64_t)a1);
  NSLog(@"%s: Client %@ terminated, cleanup state", "__WiFiServerClientTerminationCallback", v4);
  uint64_t v5 = sub_10005B6D8((uint64_t)a1);
  sub_100090CC0(v5, a1, 0, 2);
  sub_100091468(v5, a1, 0);
  sub_100090BEC(v5, (uint64_t)a1);
  if ((sub_10005D168((uint64_t)a1) & 0x8000) != 0) {
    sub_100092A5C(v5);
  }
  CFUUIDRef v6 = (const __CFUUID *)sub_10005B6F0((uint64_t)a1);
  CFStringRef v7 = CFUUIDCreateString(kCFAllocatorDefault, v6);
  sub_100008638(v5, (uint64_t)v7);
  sub_100092C54(*(void *)(a2 + 16), a1);
  sub_10005D1EC((uint64_t)a1, 0, 0);
  if (v7) {
    CFRelease(v7);
  }
  if (a1)
  {
    CFRelease(a1);
  }
}

uint64_t sub_1000DEA6C(unsigned int a1)
{
  uint64_t v2 = sub_10000E5D8();
  uint64_t v3 = sub_10000E504(a1, v2);
  if (v3)
  {
    uint64_t v4 = v3;
    sub_10005D1F4((uint64_t)v3);
    CFRelease(v4);
  }
  return 0;
}

uint64_t sub_1000DEAB4(unsigned int a1, int a2)
{
  uint64_t v4 = sub_10000E5D8();
  uint64_t v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    CFUUIDRef v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_10027DD68)
        {
          if (a2) {
            uint64_t v11 = "ON";
          }
          else {
            uint64_t v11 = "OFF";
          }
          [(id)qword_10027DD68 WFLog:3, "Manager power %s requested by \"%@\"", v11, sub_100016E18((uint64_t)v6) message];
        }
        CFStringRef v12 = (const __CFString *)sub_100016E18((uint64_t)v6);
        sub_100091EE8(v9, a2, v12);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_power(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000DEBE8(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  uint64_t v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    CFUUIDRef v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_1000915D4(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_power(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000DECAC(unsigned int a1, unsigned int a2)
{
  uint64_t v4 = sub_10000E5D8();
  uint64_t v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    CFUUIDRef v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_10027DD68)
        {
          if (a2) {
            uint64_t v11 = "ON";
          }
          else {
            uint64_t v11 = "OFF";
          }
          [(id)qword_10027DD68 WFLog:3, "Manager power %s requested by \"%@\"", v11, sub_100016E18((uint64_t)v6) message];
        }
        CFStringRef v12 = (const void *)sub_100016E18((uint64_t)v6);
        sub_10008CB00(v9, a2, v12);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_power_ext(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000DEDE0(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  uint64_t v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    CFUUIDRef v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_10008ED94(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_ask_to_join_state(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000DEEA4(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  uint64_t v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    CFUUIDRef v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (!v8)
      {
LABEL_12:
        CFRelease(v6);
        return 0;
      }
      *a2 = sub_100090ABC(v8);
      uint64_t v9 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        uint64_t v10 = sub_100016E18((uint64_t)v6);
        if (*a2) {
          uint64_t v11 = "Associated";
        }
        else {
          uint64_t v11 = "Unassociated";
        }
        [v9 WFLog:3, "NAN Client Assoc state queried by \"%@\" is %s", v10, v11 message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_nanclient_assoc_status(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    goto LABEL_12;
  }
  return 0;
}

uint64_t sub_1000DEFB8(unsigned int a1, double a2)
{
  uint64_t v4 = sub_10000E5D8();
  uint64_t v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    CFUUIDRef v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%@ requested NAN Off Head Connection expiry of %f seconds ", sub_100016E18((uint64_t)v6), *(void *)&a2 message];
        }
        sub_1000A1000(v9, a2);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_nan_off_head_connection_expiry(mach_port_t, double)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000DF0CC(unsigned int a1, void *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  uint64_t v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    CFUUIDRef v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      CFArrayRef v8 = (const __CFArray *)sub_10005B6D8((uint64_t)v6);
      if (!v8)
      {
LABEL_9:
        CFRelease(v6);
        return 0;
      }
      *(double *)a2 = sub_1000A10BC(v8);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "NAN Off Head Connection expiry queried by \"%@\" is %f", sub_100016E18((uint64_t)v6), *a2 message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_nan_off_head_connection_expiry(mach_port_t, double *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    goto LABEL_9;
  }
  return 0;
}

uint64_t sub_1000DF1CC(unsigned int a1, int a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = (const __CFString *)sub_10000E504(a1, v4);
  if (v5)
  {
    CFStringRef v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_10027DD68)
        {
          if (a2) {
            uint64_t v11 = "Enable";
          }
          else {
            uint64_t v11 = "Disable";
          }
          [(id)qword_10027DD68 WFLog:3, "%s MIS set state requested by \"%@\"", v11, sub_100016E18((uint64_t)v6) message];
        }
        sub_100090458(v9, v6, a2);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_mis_state(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000DF2F8(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    CFStringRef v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (!v8)
      {
LABEL_12:
        CFRelease(v6);
        return 0;
      }
      *a2 = sub_100090670(v8);
      uint64_t v9 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        uint64_t v10 = sub_100016E18((uint64_t)v6);
        if (*a2) {
          uint64_t v11 = "Enable";
        }
        else {
          uint64_t v11 = "Disable";
        }
        [v9 WFLog:3, "MIS state queried by \"%@\" is %s", v10, v11 message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_mis_state(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    goto LABEL_12;
  }
  return 0;
}

uint64_t sub_1000DF40C(unsigned int a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, UInt8 *a6, unsigned int a7, UInt8 *a8, unsigned int a9, int a10)
{
  uint64_t v18 = sub_10000E5D8();
  CFStringRef v19 = (const __CFString *)sub_10000E504(a1, v18);
  if (v19)
  {
    CFStringRef v20 = v19;
    if ((sub_10000E620((uint64_t)v19) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_mis_discovery_state(mach_port_t, int, int, int, int, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, int)", sub_100016E18((uint64_t)v20) message];
      }
      goto LABEL_6;
    }
    uint64_t v23 = sub_10005B6D8((uint64_t)v20);
    if (!v23)
    {
LABEL_6:
      CFPropertyListRef v22 = v20;
LABEL_28:
      CFRelease(v22);
      return 0;
    }
    uint64_t v24 = v23;
    CFStringRef v36 = a8;
    CFIndex v35 = a9;
    uint64_t v25 = sub_100016E18((uint64_t)v20);
    if (sub_10005D2F0(v20)) {
      BOOL v26 = a10 == 8;
    }
    else {
      BOOL v26 = 0;
    }
    if (v26) {
      uint64_t v27 = 1;
    }
    else {
      uint64_t v27 = a4;
    }
    if (qword_10027DD68)
    {
      CFStringRef v29 = "Enable";
      if (!a2) {
        CFStringRef v29 = "Disable";
      }
      [(id)qword_10027DD68 WFLog:3, "%s MIS Discoverability requested by \"%@\" with immediateDisable=%u hidden=%u Force2.4GHz Channel=%u\n", v29, v25, a3, v27, a5, a9, v36 message];
    }
    sub_100090B88(v24, a2, v27, a3, v25);
    CFStringRef v30 = (const __CFString *)sub_10000EA08(a6, a7);
    CFPropertyListRef v22 = sub_10000EA08(v36, v35);
    if (v30)
    {
      int v31 = sub_10006C16C(v30);
      BOOL v33 = a10 == 8 || v31 != 0;
      sub_1000906C0(v24, v20, a2, a3, a5, v33);
      CFRelease(v20);
      CFStringRef v20 = v30;
    }
    else
    {
      sub_1000906C0(v24, v20, a2, a3, a5, a10 == 8);
    }
    CFRelease(v20);
    if (v22) {
      goto LABEL_28;
    }
  }
  return 0;
}

uint64_t sub_1000DF634(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    CFStringRef v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_100090B0C(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_mis_discovery_state(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000DF6F8(unsigned int a1, int a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    CFStringRef v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_10027DD68)
        {
          if (a2) {
            uint64_t v11 = "Enable";
          }
          else {
            uint64_t v11 = "Disable";
          }
          [(id)qword_10027DD68 WFLog:4, "%s WoW requested by \"%@\"", v11, sub_100016E18((uint64_t)v6) message];
        }
        sub_100090CC0(v9, v6, a2, 2);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_wow_state(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000DF828(unsigned int a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  CFStringRef v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        uint64_t v11 = sub_10009117C(v10);
        if (v11)
        {
          CFStringRef v12 = v11;
          sub_10000E45C(v11, a2, a3);
          CFRelease(v12);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_wow_state(mach_port_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000DF90C(unsigned int a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  CFStringRef v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = (unsigned int *)sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        uint64_t v11 = sub_1000AC014(v10);
        if (v11)
        {
          CFStringRef v12 = v11;
          sub_10000E45C(v11, a2, a3);
          CFRelease(v12);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_mac_randomisation_parameters(mach_port_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000DF9F0(unsigned int a1, UInt8 *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v8 = sub_10000E5D8();
  CFStringRef v9 = (const __CFString *)sub_10000E504(a1, v8);
  if (v9)
  {
    CFStringRef v10 = v9;
    if ((sub_10000E620((uint64_t)v9) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_privatemac_network_switch_state(mach_port_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v10) message];
      }
      goto LABEL_8;
    }
    uint64_t v12 = sub_10005B6D8((uint64_t)v10);
    if (!v12
      || (uint64_t v13 = v12,
          CFStringRef v14 = (const __CFString *)sub_10000EA08(a2, a3),
          *a4 = sub_1000AC254(v13, v14),
          CFRelease(v10),
          (CFStringRef v10 = v14) != 0))
    {
LABEL_8:
      CFRelease(v10);
    }
  }
  return 0;
}

uint64_t sub_1000DFAEC(unsigned int a1, int a2, _DWORD *a3)
{
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  CFStringRef v7 = (void *)sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        uint64_t v11 = v10;
        if (qword_10027DD68)
        {
          if (a2) {
            uint64_t v13 = "quiescing";
          }
          else {
            uint64_t v13 = "unquiescing";
          }
          [(id)qword_10027DD68 WFLog:3, "WiFi %s requested by \"%@\"", v13, sub_100016E18((uint64_t)v8) message];
        }
        *a3 = sub_100091468(v11, v8, a2);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_quiesce_state(mach_port_t, int, int *)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000DFC2C(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_1000915DC(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_quiesce_state(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000DFCF0(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_1000918E0(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_wow_capability(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000DFDB4(unsigned int a1, UInt8 *a2, unsigned int a3, _DWORD *a4)
{
  *a4 = 0;
  uint64_t v8 = sub_10000E5D8();
  CFStringRef v9 = sub_10000E504(a1, v8);
  if (v9)
  {
    uint64_t v10 = v9;
    if (sub_10000E620((uint64_t)v9))
    {
      uint64_t v12 = sub_10005B6D8((uint64_t)v10);
      if (v12)
      {
        uint64_t v13 = v12;
        CFStringRef v14 = (void *)sub_10000EA08(a2, a3);
        if (v14)
        {
          int v15 = v14;
          *a4 = sub_10009D880(v13, v14);
          CFRelease(v15);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_merge_known_networks(mach_port_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v10) message];
      }
    }
    CFRelease(v10);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000DFEBC(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_100091A20(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_is_tethering_supported(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000DFF80(unsigned int a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  CFStringRef v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        id v11 = sub_1000AE304(v10);
        if (v11)
        {
          uint64_t v12 = v11;
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s:MIS Stats requested by \"%@\"", "_wifi_manager_copy_mis_stats", sub_100016E18((uint64_t)v8) message];
          }
          sub_10000E45C(v12, a2, a3);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_mis_stats(mach_port_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000E00B0(unsigned int a1)
{
  uint64_t v2 = sub_10000E5D8();
  uint64_t v3 = sub_10000E504(a1, v2);
  if (v3)
  {
    uint64_t v4 = v3;
    if (sub_10000E620((uint64_t)v3))
    {
      uint64_t v6 = sub_10005B6D8((uint64_t)v4);
      if (!v6)
      {
LABEL_9:
        CFRelease(v4);
        return 0;
      }
      sub_1000AE3A4(v6);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s:MIS Stats reset requested by \"%@\"", "_wifi_manager_reset_mis_stats", sub_100016E18((uint64_t)v4) message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_reset_mis_stats(mach_port_t)", sub_100016E18((uint64_t)v4) message];
      }
    }
    goto LABEL_9;
  }
  return 0;
}

uint64_t sub_1000E01A4(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_100091AC0(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_is_always_on_wifi_supported(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E0268(unsigned int a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  CFStringRef v7 = (__CFDictionary *)sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (!v10) {
        goto LABEL_9;
      }
      id v11 = sub_10009EB7C(v10);
      if (v11)
      {
        uint64_t v12 = v11;
        sub_10000E45C(v11, a2, a3);
        CFRelease(v8);
        uint64_t v8 = v12;
        goto LABEL_9;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s Null localeStatsDict" args:_wifi_manager_copy_locale_stats, v14];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_locale_stats(mach_port_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v8) message];
      }
    }
LABEL_9:
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000E0380(unsigned int a1, UInt8 *a2, unsigned int a3, _DWORD *a4)
{
  *a4 = 0;
  uint64_t v8 = sub_10000E5D8();
  CFStringRef v9 = sub_10000E504(a1, v8);
  if (v9)
  {
    uint64_t v10 = v9;
    if (sub_10000E620((uint64_t)v9))
    {
      uint64_t v12 = sub_10005B6D8((uint64_t)v10);
      if (v12)
      {
        uint64_t v13 = v12;
        CFStringRef v14 = (const __CFString *)sub_10000EA08(a2, a3);
        if (v14)
        {
          CFStringRef v15 = v14;
          if (!sub_100091B10(v13, v14))
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4 message:"Unable to set mis password"];
            }
          }
          CFRelease(v15);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_mis_set_password(mach_port_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v10) message];
      }
      *a4 = 1;
    }
    CFRelease(v10);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E04C0(unsigned int a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  CFStringRef v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if ((sub_10000E620((uint64_t)v7) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_mis_copy_password(mach_port_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v8) message];
      }
LABEL_10:
      goto LABEL_11;
    }
    uint64_t v10 = sub_10005B6D8((uint64_t)v8);
    if (v10)
    {
      CFStringRef v11 = sub_100091BA4(v10);
      if (!v11)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Unable to copy mis password", v14, v15);
        }
        goto LABEL_10;
      }
      CFStringRef v12 = v11;
      sub_10000E45C(v11, a2, a3);
      CFRelease(v12);
    }
LABEL_11:
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000E05C8(unsigned int a1, int a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        sub_100091C1C(v8, a2);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_retry_cap(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E0688(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_100091C70(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_retry_cap(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E074C(unsigned int a1, UInt8 *a2, unsigned int a3, vm_offset_t *a4, mach_msg_type_number_t *a5)
{
  *a4 = 0;
  *a5 = 0;
  uint64_t v10 = sub_10000E5D8();
  CFStringRef v11 = sub_10000E504(a1, v10);
  if (v11)
  {
    CFStringRef v12 = v11;
    if ((sub_10000E620((uint64_t)v11) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_property(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v12) message];
      }
      goto LABEL_17;
    }
    uint64_t v14 = sub_10005B6D8((uint64_t)v12);
    if (!v14 || (uint64_t v15 = (void *)v14, (v16 = (const __CFString *)sub_10000EA08(a2, a3)) == 0))
    {
LABEL_17:
      CFRelease(v12);
      goto LABEL_18;
    }
    CFStringRef v17 = v16;
    CFTypeID v18 = CFGetTypeID(v16);
    if (v18 != CFStringGetTypeID()) {
      goto LABEL_16;
    }
    if (CFStringCompare(v17, @"carplayParameters", 0))
    {
      if (CFStringCompare(v17, @"HotspotDataUsage", 0))
      {
        if (CFStringCompare(v17, @"Custom network settings", 0))
        {
          CFStringRef v19 = sub_100091840(v15, v17);
          if (v19) {
            sub_10000E45C(v19, a4, a5);
          }
          goto LABEL_16;
        }
        CFStringRef v20 = sub_1000A86C8(v15);
        if (!v20)
        {
LABEL_16:
          CFRelease(v17);
          goto LABEL_17;
        }
      }
      else
      {
        CFStringRef v20 = (const void *)sub_1000A871C(v15);
        if (!v20) {
          goto LABEL_16;
        }
      }
    }
    else
    {
      CFStringRef v20 = sub_1000A22D0((uint64_t)v15);
      if (!v20) {
        goto LABEL_16;
      }
    }
    unsigned int v21 = v20;
    sub_10000E45C(v20, a4, a5);
    CFRelease(v21);
    goto LABEL_16;
  }
LABEL_18:
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E0920(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, unsigned int a5, _DWORD *a6)
{
  *a6 = 0;
  uint64_t v12 = sub_10000E5D8();
  uint64_t v13 = sub_10000E504(a1, v12);
  if (v13)
  {
    uint64_t v14 = v13;
    if ((sub_10000E620((uint64_t)v13) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_property(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v14) message];
      }
      *a6 = 1;
      goto LABEL_36;
    }
    uint64_t v16 = sub_10005B6D8((uint64_t)v14);
    if (!v16)
    {
LABEL_36:
      CFRelease(v14);
      goto LABEL_37;
    }
    CFArrayRef v17 = (const __CFArray *)v16;
    CFStringRef v18 = (const __CFString *)sub_10000EA08(a2, a3);
    CFPropertyListRef v19 = sub_10000EA08(a4, a5);
    if (!v18)
    {
LABEL_34:
      if (v19) {
        CFRelease(v19);
      }
      goto LABEL_36;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "ManagerClient[\"%@\"] setProperty[\"%@\"] = %@", sub_100016E18((uint64_t)v14), v18, v19 message];
    }
    if (CFStringCompare(v18, @"carplayParameters", 0))
    {
      if (CFStringCompare(v18, @"HotspotDataUsage", 0))
      {
        if (CFEqual(v18, @"FamilyHotspotPreferences"))
        {
          sub_1000A85B8(v17, (uint64_t)v19);
          goto LABEL_27;
        }
        if (CFEqual(v18, @"Custom network settings"))
        {
          sub_1000A86D0((uint64_t)v17, (uint64_t)v19);
          goto LABEL_27;
        }
        if (CFEqual(v18, @"PerpetualWiFiScanEnabled"))
        {
          sub_1000ADC38(v17, (const __CFBoolean *)v19);
          goto LABEL_27;
        }
        if (!sub_10009317C(v17, v18, v19))
        {
          CFPropertyListRef v22 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            uint64_t v23 = "Unable to Set Property";
LABEL_22:
            [v22 WFLog:4 message:v23];
            goto LABEL_23;
          }
          goto LABEL_23;
        }
      }
      else if (!sub_1000A83F4(v17))
      {
        CFPropertyListRef v22 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          uint64_t v23 = "Unable to Reset Hotspot Data Usage";
          goto LABEL_22;
        }
LABEL_23:
      }
    }
    else
    {
      sub_1000A2138((uint64_t)v17, (const __CFDictionary *)v19);
    }
LABEL_27:
    if (CFEqual(v18, @"IsNewInstall")) {
      sub_100083D54((uint64_t)v17);
    }
    if (CFEqual(v18, @"SimulatedHardwareFailureStatus"))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Posting hardware failure status in _wifi_manager_set_property"];
      }
      sub_100087040(v17);
    }
    CFRelease(v18);
    goto LABEL_34;
  }
LABEL_37:
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

uint64_t sub_1000E0C5C(unsigned int a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  CFStringRef v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      CFArrayRef v10 = (const __CFArray *)sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        CFArrayRef v11 = sub_10000500C(v10);
        if (v11)
        {
          CFArrayRef v12 = v11;
          uint64_t v13 = sub_10005B6F8((uint64_t)v8, v11);
          if (v13)
          {
            uint64_t v14 = v13;
            sub_10000E45C(v13, a2, a3);
            CFRelease(v14);
          }
          CFRelease(v12);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_devices(mach_port_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000E0D64(unsigned int a1, int a2, vm_offset_t *a3, mach_msg_type_number_t *a4)
{
  *a3 = 0;
  *a4 = 0;
  uint64_t v8 = sub_10000E5D8();
  CFStringRef v9 = sub_10000E504(a1, v8);
  if (v9)
  {
    CFArrayRef v10 = v9;
    if (sub_10000E620((uint64_t)v9))
    {
      uint64_t v12 = sub_10005B6D8((uint64_t)v10);
      if (v12)
      {
        CFArrayRef v13 = a2 ? sub_10008EFCC(v12) : sub_10008EE94(v12);
        CFArrayRef v14 = v13;
        if (v13)
        {
          uint64_t v15 = sub_10005A3F4(v13);
          if (v15)
          {
            uint64_t v16 = v15;
            sub_10000E45C(v15, a3, a4);
            CFRelease(v16);
          }
          CFRelease(v14);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_networks(mach_port_t, int, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v10) message];
      }
    }
    CFRelease(v10);
  }
  return 0;
}

uint64_t sub_1000E0E78(unsigned int a1, UInt8 *a2, CFIndex a3)
{
  uint64_t v6 = sub_10000E5D8();
  CFStringRef v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = sub_1000E1050(a2, a3);
        if (v12)
        {
          CFArrayRef v13 = v12;
          uint64_t v15 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            uint64_t v16 = sub_10001A43C(v13);
            [v15 WFLog:3, "Add network <%@>, requested by \"%@\"", v16, sub_100016E18((uint64_t)v8) message];
          }
          CFStringRef v17 = (const __CFString *)sub_100016E18((uint64_t)v8);
          if (CFStringCompare(v17, @"profiled", 0))
          {
            CFStringRef v18 = (const __CFString *)sub_100016E18((uint64_t)v8);
            if (CFStringCompare(v18, @"mobilewifitool", 0))
            {
              uint64_t v19 = v11;
              CFStringRef v20 = v13;
              uint64_t v21 = 1;
            }
            else
            {
              uint64_t v19 = v11;
              CFStringRef v20 = v13;
              uint64_t v21 = 23;
            }
            sub_100093634(v19, v20, v21);
          }
          else
          {
            sub_100093634(v11, v13, 17);
            sub_10001C6A4((uint64_t)v13, @"UpdateReason", @"ProfileAddition");
            sub_1000AC3CC(v11, v13);
          }
          CFRelease(v13);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_add_network(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

_WORD *sub_1000E1050(UInt8 *a1, CFIndex length)
{
  CFPropertyListRef v2 = sub_10000EA08(a1, length);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  CFTypeID v4 = CFGetTypeID(v2);
  if (v4 == CFDictionaryGetTypeID()) {
    CFStringRef v5 = sub_100019658((int)kCFAllocatorDefault, v3);
  }
  else {
    CFStringRef v5 = 0;
  }
  CFRelease(v3);
  return v5;
}

uint64_t sub_1000E10C4(unsigned int a1, UInt8 *a2, CFIndex a3, UInt8 *a4, unsigned int a5)
{
  uint64_t v10 = sub_10000E5D8();
  uint64_t v11 = sub_10000E504(a1, v10);
  if (v11)
  {
    uint64_t v12 = v11;
    if (sub_10000E620((uint64_t)v11))
    {
      uint64_t v14 = sub_10005B6D8((uint64_t)v12);
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = sub_1000E1050(a2, a3);
        if (v16)
        {
          CFStringRef v17 = v16;
          CFDictionaryRef v18 = 0;
          if (!a4
            || !a5
            || (CFDictionaryRef v18 = (const __CFDictionary *)sub_10000EA08(a4, a5),
                CFTypeID v19 = CFGetTypeID(v18),
                v19 == CFDictionaryGetTypeID()))
          {
            sub_10009865C(v15, (uint64_t)v12, v17, v18, 0, 0);
          }
          CFRelease(v17);
          if (v18) {
            CFRelease(v18);
          }
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_add_network_async(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v12) message];
      }
    }
    CFRelease(v12);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

uint64_t sub_1000E1230(unsigned int a1, UInt8 *a2, CFIndex a3)
{
  uint64_t v6 = sub_10000E5D8();
  CFStringRef v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = sub_1000E1050(a2, a3);
        if (v12)
        {
          CFArrayRef v13 = v12;
          CFStringRef v14 = (const __CFString *)sub_100016E18((uint64_t)v8);
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "Update network <%@>, requested by \"%@\"", sub_10001A43C(v13), v14 message];
          }
          if (CFEqual(v14, @"configd"))
          {
            if (qword_10027DD68) {
              [qword_10027DD68 WFLog:message:3, "%s: removing internal properties from network", "_wifi_manager_update_network"];
            }
            sub_1000CE9FC((uint64_t)v13);
          }
          sub_10009B1AC(v11, v13, 1u);
          CFRelease(v13);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_update_network(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E13E0(unsigned int a1, UInt8 *a2, CFIndex a3, uint64_t a4)
{
  uint64_t v8 = sub_10000E5D8();
  CFStringRef v9 = sub_10000E504(a1, v8);
  if (v9)
  {
    uint64_t v10 = v9;
    if (sub_10000E620((uint64_t)v9))
    {
      uint64_t v12 = sub_10005B6D8((uint64_t)v10);
      if (v12)
      {
        uint64_t v13 = v12;
        CFStringRef v14 = sub_1000E1050(a2, a3);
        if (v14)
        {
          uint64_t v15 = v14;
          CFStringRef v17 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            CFDictionaryRef v18 = sub_10001A43C(v15);
            [v17 WFLog:3, "Remove network <%@>, requested by \"%@\"", v18, sub_100016E18((uint64_t)v10) message];
          }
          sub_10009A098(v13, v15, a4);
          CFRelease(v15);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_remove_network(mach_port_t, vm_offset_t, mach_msg_type_number_t, int)", sub_100016E18((uint64_t)v10) message];
      }
    }
    CFRelease(v10);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E1540(unsigned int a1, UInt8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10000E5D8();
  CFStringRef v7 = (const __CFString *)sub_10000E504(a1, v6);
  if (v7)
  {
    CFStringRef v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        uint64_t v11 = v10;
        CFStringRef v12 = (const __CFString *)sub_10000EA08(a2, a3);
        if (v12)
        {
          CFStringRef v13 = v12;
          CFTypeID v14 = CFGetTypeID(v12);
          if (v14 == CFStringGetTypeID()) {
            sub_10009CB84(v11, v13);
          }
          CFRelease(v8);
          CFStringRef v8 = v13;
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_remove_networks_with_bundle_identifier(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E1654(unsigned int a1, UInt8 *a2, unsigned int a3, unsigned __int8 a4)
{
  uint64_t v8 = sub_10000E5D8();
  CFStringRef v9 = sub_10000E504(a1, v8);
  if (v9)
  {
    uint64_t v10 = v9;
    if (sub_10000E620((uint64_t)v9))
    {
      uint64_t v12 = sub_10005B6D8((uint64_t)v10);
      if (v12)
      {
        uint64_t v13 = v12;
        CFStringRef v14 = (const __CFString *)sub_10000EA08(a2, a3);
        if (v14)
        {
          CFStringRef v15 = v14;
          CFTypeID v16 = CFGetTypeID(v14);
          if (v16 == CFStringGetTypeID())
          {
            CFStringRef v17 = sub_10008EDA4(v13, v15);
            if (v17)
            {
              CFArrayRef v18 = v17;
              CFIndex Count = CFArrayGetCount(v17);
              if (Count >= 1)
              {
                CFIndex v20 = Count;
                for (CFIndex i = 0; i != v20; ++i)
                {
                  CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v18, i);
                  if (ValueAtIndex) {
                    sub_10009CCE4(v13, ValueAtIndex, a4, 0);
                  }
                }
              }
              CFRelease(v18);
            }
          }
          CFRelease(v15);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_networks_state_with_bundle_identifier(mach_port_t, vm_offset_t, mach_msg_type_number_t, int)", sub_100016E18((uint64_t)v10) message];
      }
    }
    CFRelease(v10);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E17D0(unsigned int a1, UInt8 *a2, CFIndex a3, int a4, char a5)
{
  uint64_t v10 = sub_10000E5D8();
  uint64_t v11 = sub_10000E504(a1, v10);
  if (v11)
  {
    uint64_t v12 = v11;
    if ((sub_10000E620((uint64_t)v11) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_network_state(mach_port_t, vm_offset_t, mach_msg_type_number_t, int, int)", sub_100016E18((uint64_t)v12) message];
      }
      goto LABEL_17;
    }
    uint64_t v14 = sub_10005B6D8((uint64_t)v12);
    if (!v14 || (uint64_t v15 = v14, (v16 = sub_1000E1050(a2, a3)) == 0))
    {
LABEL_17:
      CFRelease(v12);
      goto LABEL_18;
    }
    CFStringRef v17 = v16;
    if (qword_10027DD68)
    {
      if (a4) {
        CFTypeID v19 = "ENABLED";
      }
      else {
        CFTypeID v19 = "DISABLED";
      }
      [(id)qword_10027DD68 WFLog:4, "Auto join %s by \"%@\" for %@", v19, sub_100016E18((uint64_t)v12), v17 message];
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_100196C5C(a4, (uint64_t)v12, (uint64_t)v17);
      if (a4) {
        goto LABEL_16;
      }
    }
    else if (a4)
    {
LABEL_16:
      sub_10009CCE4(v15, v17, a4, a5);
      CFRelease(v17);
      goto LABEL_17;
    }
    CFIndex v20 = (const void *)sub_100016E18((uint64_t)v12);
    sub_10001C6A4((uint64_t)v17, @"networkDisabledClientName", v20);
    goto LABEL_16;
  }
LABEL_18:
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E1994(unsigned int a1, UInt8 *a2, CFIndex a3, _DWORD *a4)
{
  *a4 = 0;
  uint64_t v8 = sub_10000E5D8();
  CFStringRef v9 = sub_10000E504(a1, v8);
  if (v9)
  {
    uint64_t v10 = v9;
    if (sub_10000E620((uint64_t)v9))
    {
      uint64_t v12 = sub_10005B6D8((uint64_t)v10);
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = sub_1000E1050(a2, a3);
        if (v14)
        {
          uint64_t v15 = v14;
          *a4 = sub_10009CE94(v13, v14);
          CFRelease(v15);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_network_state(mach_port_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v10) message];
      }
    }
    CFRelease(v10);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E1A9C(unsigned int a1, uint64_t a2, uint64_t a3, UInt8 *a4, unsigned int a5)
{
  uint64_t v10 = sub_10000E5D8();
  uint64_t v11 = sub_10000E504(a1, v10);
  if (v11)
  {
    uint64_t v12 = v11;
    if ((sub_10000E620((uint64_t)v11) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_indicate_carplay_hid_event_received(mach_port_t, int, int, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v12) message];
      }
      goto LABEL_12;
    }
    uint64_t v14 = sub_10005B6D8((uint64_t)v12);
    if (v14)
    {
      uint64_t v15 = v14;
      CFPropertyListRef v16 = sub_10000EA08(a4, a5);
      if (v16)
      {
        CFStringRef v17 = v16;
        CFTypeID v18 = CFGetTypeID(v16);
        if (v18 == CFStringGetTypeID())
        {
          sub_1000932EC(v15, a2, a3, (uint64_t)v17);
          CFRelease(v17);
          goto LABEL_12;
        }
        CFRelease(v17);
      }
      sub_1000932EC(v15, a2, a3, 0);
    }
LABEL_12:
    CFRelease(v12);
  }
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

uint64_t sub_1000E1BE4(unsigned int a1, uint64_t a2, uint64_t a3, UInt8 *a4, unsigned int a5)
{
  uint64_t v10 = sub_10000E5D8();
  uint64_t v11 = sub_10000E504(a1, v10);
  if (v11)
  {
    uint64_t v12 = v11;
    if ((sub_10000E620((uint64_t)v11) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_dispatch_notification_response(mach_port_t, int, int, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v12) message];
      }
      goto LABEL_12;
    }
    uint64_t v14 = sub_10005B6D8((uint64_t)v12);
    if (v14)
    {
      uint64_t v15 = v14;
      CFPropertyListRef v16 = sub_10000EA08(a4, a5);
      if (v16)
      {
        CFStringRef v17 = v16;
        CFTypeID v18 = CFGetTypeID(v16);
        if (v18 == CFDictionaryGetTypeID())
        {
          sub_1000931D8(v15, a2, a3, v17);
          CFRelease(v17);
          goto LABEL_12;
        }
        CFRelease(v17);
      }
      sub_1000931D8(v15, a2, a3, 0);
    }
LABEL_12:
    CFRelease(v12);
  }
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

uint64_t sub_1000E1D2C(unsigned int a1, int a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (!v8)
      {
LABEL_17:
        CFRelease(v6);
        return 0;
      }
      uint64_t v9 = v8;
      if (a2)
      {
        sub_100092F7C(v8, v6);
        if (_os_feature_enabled_impl()) {
          sub_1000047D4(v9, 15);
        }
        else {
          sub_10008DE74(v9, 2);
        }
      }
      else
      {
        sub_1000930F0(v8, v6);
      }
      if (qword_10027DD68)
      {
        if (a2) {
          uint64_t v10 = "ENABLED";
        }
        else {
          uint64_t v10 = "DISABLED";
        }
        [(id)qword_10027DD68 WFLog:3, "Auto join %s by \"%@\"", v10, sub_100016E18((uint64_t)v6) message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_enable_state(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    goto LABEL_17;
  }
  return 0;
}

uint64_t sub_1000E1E88(unsigned int a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%@ requested association mode %d", sub_100016E18((uint64_t)v6), a2 message];
        }
        sub_10008F368(v9, a2, 0);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_association_mode(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E1F9C(unsigned int a1, _DWORD *a2)
{
  *a2 = 1;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_10008FE44(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_association_mode(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E2064(unsigned int a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%@ requested ask-to-join preference %d", sub_100016E18((uint64_t)v6), a2 message];
        }
        sub_10008FE4C(v9, a2, 0);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_asktojoin_preference(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E217C(unsigned int a1, _DWORD *a2)
{
  *a2 = 1;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_10008FF90(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_asktojoin_preference(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E2244(unsigned int a1, int a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    char v7 = sub_10000E620((uint64_t)v5);
    uint64_t v9 = (void *)qword_10027DD68;
    if (v7)
    {
      if (qword_10027DD68)
      {
        uint64_t v10 = sub_100016E18((uint64_t)v6);
        uint64_t v11 = "normal";
        if (a2 == 3) {
          uint64_t v11 = "cloud";
        }
        if (a2 == 1) {
          uint64_t v11 = "background";
        }
        [v9 WFLog:3, "Client %@ set type to %s application", v10, v11 message];
      }
      if (sub_10005B6C8((uint64_t)v6) != a2)
      {
        uint64_t v12 = sub_10005B6D8((uint64_t)v6);
        if (v12)
        {
          uint64_t v13 = v12;
          sub_100092C54(v12, v6);
          sub_10005B6D0((uint64_t)v6, a2);
          sub_100092B50(v13, v6);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_client_type(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E2390(unsigned int a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      sub_10005D160((uint64_t)v6, a2);
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_event_mask(mach_port_t, uint64_t)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E2448(unsigned int a1, UInt8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10000E5D8();
  char v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        uint64_t v11 = v10;
        CFPropertyListRef v12 = sub_10000EA08(a2, a3);
        if (v12)
        {
          uint64_t v13 = (void *)v12;
          CFTypeID v14 = CFGetTypeID(v12);
          if (v14 == CFArrayGetTypeID() && (uint64_t v15 = sub_10005A4C4((const __CFArray *)v13)) != 0)
          {
            CFPropertyListRef v16 = v15;
            sub_100091690(v11, v15);
            CFRelease(v13);
            CFStringRef v17 = v16;
          }
          else
          {
            CFStringRef v17 = (__CFArray *)v13;
          }
          CFRelease(v17);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_background_scan_networks(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E2578(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_100091980(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_bgscancache_state(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E263C(unsigned int a1, UInt8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10000E5D8();
  char v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = sub_10005B6D8((uint64_t)v7);
    if (v9)
    {
      uint64_t v10 = v9;
      if (sub_10000E620((uint64_t)v8))
      {
        CFPropertyListRef v12 = sub_10000EA08(a2, a3);
        if (v12)
        {
          uint64_t v13 = v12;
          sub_10009ED68(v10, (uint64_t)v12);
          CFRelease(v13);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_bgscan_cache_state(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
        }
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E2738(unsigned int a1, int a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v11 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          uint64_t v12 = sub_100016E18((uint64_t)v6);
          uint64_t v13 = "enabled";
          if (!a2) {
            uint64_t v13 = "disabled";
          }
          [v11 WFLog:3, "%@ requested scan backoff reporting to be %s", v12, v13 message];
        }
        sub_10009EDC0(v9, a2);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_scan_backoff_report(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E2860(unsigned int a1, UInt8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10000E5D8();
  char v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = sub_10005B6D8((uint64_t)v7);
    if (v9)
    {
      uint64_t v10 = v9;
      if (sub_10000E620((uint64_t)v8))
      {
        CFDictionaryRef v12 = (const __CFDictionary *)sub_10000EA08(a2, a3);
        if (v12)
        {
          CFDictionaryRef v13 = v12;
          sub_10009FB54(v10, v12);
          CFRelease(v13);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_test_params(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
        }
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E295C(unsigned int a1, UInt8 *a2, unsigned int a3, vm_offset_t *a4, mach_msg_type_number_t *a5)
{
  *a4 = 0;
  *a5 = 0;
  uint64_t v10 = sub_10000E5D8();
  CFDictionaryRef v11 = (const __CFDictionary *)sub_10000E504(a1, v10);
  if (!v11)
  {
    id v14 = [objc_alloc((Class)NSNumber) initWithBool:0];
    if (!v14) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  CFDictionaryRef v12 = v11;
  if ((sub_10000E620((uint64_t)v11) & 1) == 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_test_params(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v12) message];
    }
LABEL_5:
    id v14 = [objc_alloc((Class)NSNumber) initWithBool:0];
    CFDictionaryRef v15 = v12;
LABEL_13:
    CFRelease(v15);
    goto LABEL_14;
  }
  uint64_t v16 = sub_10005B6D8((uint64_t)v12);
  if (!v16)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: unable to find manager for client %@", "_wifi_manager_copy_test_params", sub_100016E18((uint64_t)v12) message];
    }
    goto LABEL_5;
  }
  uint64_t v17 = v16;
  CFDictionaryRef v18 = (const __CFDictionary *)sub_10000EA08(a2, a3);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Calling WiFiManagerSetTestParamsAndCopyResponse with request:%@", "_wifi_manager_copy_test_params", v18 message];
  }
  CFIndex v20 = sub_10009FEF4(v17, v18);
  id v14 = v20;
  if (v20) {
    sub_10000E45C(v20, a4, a5);
  }
  CFRelease(v12);
  if (v18)
  {
    CFDictionaryRef v15 = v18;
    goto LABEL_13;
  }
LABEL_14:
  if (v14) {
LABEL_15:
  }
    CFRelease(v14);
LABEL_16:
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E2B44(unsigned int a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  char v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if ((sub_10000E620((uint64_t)v7) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_version_info(mach_port_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v8) message];
      }
LABEL_10:
      goto LABEL_11;
    }
    if (sub_10005B6D8((uint64_t)v8))
    {
      CFStringRef v10 = sub_10009E7F0();
      if (!v10)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Unable to copy client names", v13, v14)];
        }
        goto LABEL_10;
      }
      CFStringRef v11 = v10;
      sub_10000E45C(v10, a2, a3);
      CFRelease(v11);
    }
LABEL_11:
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000E2C4C(unsigned int a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  char v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if ((sub_10000E620((uint64_t)v7) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_client_names(mach_port_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v8) message];
      }
LABEL_10:
      goto LABEL_11;
    }
    uint64_t v10 = sub_10005B6D8((uint64_t)v8);
    if (v10)
    {
      CFMutableArrayRef v11 = sub_10009E86C(v10);
      if (!v11)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Unable to copy client names", v14, v15);
        }
        goto LABEL_10;
      }
      CFMutableArrayRef v12 = v11;
      sub_10000E45C(v11, a2, a3);
      CFRelease(v12);
    }
LABEL_11:
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000E2D54(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, unsigned int a5, vm_offset_t *a6, mach_msg_type_number_t *a7)
{
  *a6 = 0;
  *a7 = 0;
  uint64_t v14 = sub_10000E5D8();
  uint64_t v15 = sub_10000E504(a1, v14);
  if (v15)
  {
    uint64_t v16 = v15;
    if (sub_10000E620((uint64_t)v15))
    {
      CFPropertyListRef v18 = sub_10000EA08(a2, a3);
      CFStringRef v19 = (const __CFString *)sub_10000EA08(a4, a5);
      CFStringRef v20 = v19;
      if (v18 && v19)
      {
        CFStringRef v32 = a4;
        uint64_t v21 = sub_10000E628((uint64_t)v16, v18);
        if (!v21) {
          goto LABEL_25;
        }
        uint64_t v22 = (uint64_t)v21;
        CFTypeID v23 = CFGetTypeID(v20);
        if (v23 == CFStringGetTypeID() && CFEqual(v20, @"IO80211InterfaceWoWWakeUpParams"))
        {
          if (qword_10027DD68)
          {
            uint64_t context = v24;
            [(id)qword_10027DD68 WFLog:3, "%s: \"%@\" querying %@ on %@", "_wifi_device_copy_property", sub_100016E18((uint64_t)v16), v20, v18 message];
            uint64_t v24 = context;
          }
        }
        uint64_t v25 = sub_100016E18(v22);
        CFDictionaryRef v26 = sub_100063150(v25, v18, v20);
        CFTypeID v27 = CFGetTypeID(v20);
        if (v27 == CFStringGetTypeID() && CFEqual(v20, @"IO80211InterfaceWoWWakeUpParams"))
        {
          if (qword_10027DD68)
          {
            contexta = v28;
            [(id)qword_10027DD68 WFLog:3, "%s: \"%@\" querying %@ on %@ received %@", "_wifi_device_copy_property", sub_100016E18((uint64_t)v16), v20, v18, v26 message];
            CFStringRef v28 = contexta;
          }
        }
        if (v26)
        {
          sub_10000E45C(v26, a6, a7);
          CFRelease(v18);
        }
        else
        {
LABEL_25:
          CFDictionaryRef v26 = (CFDictionaryRef)v18;
        }
        CFRelease(v26);
        a4 = v32;
      }
      else
      {
        if (v18) {
          CFRelease(v18);
        }
        if (!v20) {
          goto LABEL_23;
        }
      }
      CFRelease(v20);
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_copy_property(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v16) message];
      }
    }
LABEL_23:
    CFRelease(v16);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

uint64_t sub_1000E2FE4(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, unsigned int a5, UInt8 *a6, unsigned int a7)
{
  uint64_t v14 = sub_10000E5D8();
  uint64_t v15 = sub_10000E504(a1, v14);
  if (v15)
  {
    uint64_t v16 = v15;
    if ((sub_10000E620((uint64_t)v15) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_set_property(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v16) message];
      }
LABEL_18:
      CFRelease(v16);
      goto LABEL_19;
    }
    unsigned int v26 = a3;
    CFTypeID v27 = a2;
    CFPropertyListRef v18 = sub_10000EA08(a2, a3);
    CFPropertyListRef v19 = sub_10000EA08(a4, a5);
    CFPropertyListRef v20 = sub_10000EA08(a6, a7);
    uint64_t v21 = v20;
    if (v18 && v19 && v20)
    {
      uint64_t v22 = sub_10000E628((uint64_t)v16, v18);
      if (v22)
      {
        CFTypeID v23 = v22;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "DeviceClient[\"%@\"] setProperty[\"%@\"] = %@", sub_100016E18((uint64_t)v16), v19, v21 message];
        }
        sub_10012D7CC(v23, v18, v19, v21);
      }
    }
    else if (!v18)
    {
      goto LABEL_14;
    }
    CFRelease(v18);
LABEL_14:
    if (v21) {
      CFRelease(v21);
    }
    a2 = v27;
    a3 = v26;
    if (v19) {
      CFRelease(v19);
    }
    goto LABEL_18;
  }
LABEL_19:
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a4, a5);
  sub_10000E9E4((vm_address_t)a6, a7);
  return 0;
}

uint64_t sub_1000E31E0(unsigned int a1, UInt8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10000E5D8();
  char v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      CFPropertyListRef v10 = sub_10000EA08(a2, a3);
      if (v10)
      {
        CFMutableArrayRef v11 = v10;
        CFMutableArrayRef v12 = sub_10000E628((uint64_t)v8, v10);
        if (v12)
        {
          uint64_t v13 = (uint64_t)v12;
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "Disassociation requested by \"%@\"", sub_100016E18((uint64_t)v8) message];
          }
          sub_1000FEA7C(v13, v11, 1001, "_wifi_device_disassociate", 2900);
        }
        CFRelease(v11);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_disassociate(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E3338(unsigned int a1, UInt8 *a2, unsigned int a3, int a4)
{
  uint64_t v8 = sub_10000E5D8();
  uint64_t v9 = sub_10000E504(a1, v8);
  if (v9)
  {
    CFPropertyListRef v10 = v9;
    if (sub_10000E620((uint64_t)v9))
    {
      CFPropertyListRef v12 = sub_10000EA08(a2, a3);
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = sub_10000E628((uint64_t)v10, v12);
        if (v14)
        {
          uint64_t v15 = (uint64_t)v14;
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "Disassociation requested by \"%@\"", sub_100016E18((uint64_t)v10) message];
          }
          if (a4 == 2) {
            unsigned int v17 = 1015;
          }
          else {
            unsigned int v17 = 1001;
          }
          if (a4 == 1) {
            uint64_t v18 = 1011;
          }
          else {
            uint64_t v18 = v17;
          }
          sub_1000FEA7C(v15, v13, v18, "_wifi_device_disassociate_with_reason", 2946);
        }
        CFRelease(v13);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_disassociate_with_reason(mach_port_t, vm_offset_t, mach_msg_type_number_t, int)", sub_100016E18((uint64_t)v10) message];
      }
    }
    CFRelease(v10);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E34AC(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, unsigned int a5, _DWORD *a6)
{
  uint64_t valuePtr = 0;
  uint64_t v118 = 0;
  int v115 = 1;
  int v116 = 0;
  *a6 = -3900;
  uint64_t v12 = sub_10000E5D8();
  uint64_t v13 = sub_10000E504(a1, v12);
  if (!v13) {
    goto LABEL_142;
  }
  uint64_t v14 = v13;
  if ((sub_10000E620((uint64_t)v13) & 1) == 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_scan_async(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v14) message];
    }
    goto LABEL_141;
  }
  CFPropertyListRef v16 = sub_10000EA08(a2, a3);
  CFDictionaryRef v17 = (const __CFDictionary *)sub_10000EA08(a4, a5);
  CFDictionaryRef v18 = v17;
  if (!v16 || !v17) {
    goto LABEL_137;
  }
  v110 = sub_10000E628((uint64_t)v14, v16);
  if (!v110)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: unable to find device manager for interface %@", "_wifi_device_scan_async", v16 message];
    }
    goto LABEL_138;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v18, @"SCAN_MAXAGE");
  if (Value) {
    CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  }
  CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(v18, @"SCAN_NUM_SCANS");
  if (v20) {
    CFNumberGetValue(v20, kCFNumberCFIndexType, &v118);
  }
  CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(v18, @"SCAN_LOW_PRIORITY");
  if (v21) {
    CFNumberGetValue(v21, kCFNumberCFIndexType, &valuePtr);
  }
  CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(v18, @"SCAN_LOW_LATENCY");
  if (v22) {
    CFNumberGetValue(v22, kCFNumberCFIndexType, &v116);
  }
  CFDictionaryRef theDict = v18;
  CFTypeID v23 = CFDictionaryGetValue(v18, @"SSID_STR");
  uint64_t v25 = (void *)qword_10027DD68;
  if (v23)
  {
    if (qword_10027DD68)
    {
      uint64_t v26 = sub_100016E18((uint64_t)v14);
      CFTypeID v27 = "low";
      if (valuePtr) {
        CFStringRef v28 = "low";
      }
      else {
        CFStringRef v28 = "normal";
      }
      if (!v116) {
        CFTypeID v27 = "normal";
      }
      [v25 WFLog:3, "Async directed scan for \"%@\" requested by \"%@\" for %ld iterations with maxage=%d priority %s and latency %s on %@", v23, v26, v118, HIDWORD(valuePtr), v28, v27, v16 message];
    }
  }
  else if (qword_10027DD68)
  {
    uint64_t v29 = sub_100016E18((uint64_t)v14);
    CFStringRef v30 = "low";
    if (valuePtr) {
      int v31 = "low";
    }
    else {
      int v31 = "normal";
    }
    if (!v116) {
      CFStringRef v30 = "normal";
    }
    [v25 WFLog:3, "Async scan requested by \"%@\" for %ld iterations with maxage=%d priority %s and latency %s on %@", v29, v118, HIDWORD(valuePtr), v31, v30, v16, v101 message];
  }
  *a6 = 0;
  int v32 = sub_10005B8B8((uint64_t)v14);
  if (v32)
  {
    CFDictionaryRef v18 = theDict;
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:4 message:@"Already scanning, will not queue request. "];
    }
    sub_10005BC3C((uint64_t)v14, (uint64_t)v110, v16, 0, 37);
    goto LABEL_138;
  }
  int v33 = v32;
  CFDictionaryRef v18 = theDict;
  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
  if (!MutableCopy)
  {
    *a6 = -3901;
    goto LABEL_138;
  }
  CFIndex v35 = MutableCopy;
  int v104 = v33;
  v108 = a6;
  CFArrayRef v36 = (const __CFArray *)CFDictionaryGetValue(theDict, @"SCAN_CHANNELS");
  v107 = v35;
  unsigned int v106 = a3;
  v105 = v16;
  if (!v36 || (CFArrayRef v37 = v36, CFArrayGetCount(v36) < 1))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Scan Requested with Empty Channels List (Scan all channels!) by %@ \n", "_wifi_device_scan_async", sub_100016E18((uint64_t)v14) message];
    }
    if (sub_100016E18((uint64_t)v14))
    {
      CFStringRef v44 = (const __CFString *)sub_100016E18((uint64_t)v14);
      CFComparisonResult v45 = CFStringCompare(v44, @"WirelessStress", 0);
      CFStringRef v46 = (const __CFString *)sub_100016E18((uint64_t)v14);
      if (CFEqual(v46, @"coreautomationd")
        || (CFArrayRef theArray = 0, v109 = 0, v113 = 0, v45 == kCFCompareEqualTo))
      {
        v103 = a4;
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        CFMutableArrayRef v48 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        CFArrayRef theArray = Mutable;
        v113 = v48;
        if (!Mutable || !v48)
        {
          v109 = 0;
          _DWORD *v108 = -3902;
          goto LABEL_130;
        }
        if (sub_100113E58((uint64_t)v110, Mutable))
        {
          _DWORD *v108 = -3902;
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:message:3, "%s: Error - Device failed to return supported channels! \n", "_wifi_device_scan_async"];
          }
          v109 = 0;
          CFDictionaryRef v18 = theDict;
          BOOL v41 = Mutable;
          goto LABEL_131;
        }
        if (CFArrayGetCount(Mutable) >= 1)
        {
          CFIndex v49 = 0;
          do
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v49);
            if (ValueAtIndex)
            {
              CFDictionaryRef v51 = ValueAtIndex;
              uint64_t v52 = CFDictionaryGetValue(ValueAtIndex, @"SUP_CHANNEL");
              if (v52)
              {
                id v53 = v52;
                CFStringRef v54 = CFDictionaryGetValue(v51, @"SUP_CHANNEL_FLAGS");
                if (v54)
                {
                  CFMutableArrayRef v55 = v54;
                  uint64_t v56 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                  if (!v56)
                  {
                    v109 = 0;
                    _DWORD *v108 = -3901;
                    a4 = v103;
                    goto LABEL_148;
                  }
                  CFStringRef v57 = v56;
                  CFDictionaryAddValue(v56, @"CHANNEL", v53);
                  CFDictionaryAddValue(v57, @"CHANNEL_FLAGS", v55);
                  CFArrayAppendValue(v113, v57);
                  CFRelease(v57);
                }
              }
            }
            ++v49;
            CFMutableDictionaryRef Mutable = theArray;
          }
          while (CFArrayGetCount(theArray) > v49);
        }
        CFDictionarySetValue(v35, @"SCAN_CHANNELS", v113);
        v109 = 0;
        a4 = v103;
        goto LABEL_89;
      }
    }
    else
    {
      CFArrayRef theArray = 0;
      v109 = 0;
      v113 = 0;
    }
LABEL_90:
    CFStringRef v72 = (const __CFString *)sub_100016E18((uint64_t)v14);
    if (CFStringCompare(v72, @"locationd", 0))
    {
      CFStringRef v73 = (const __CFString *)sub_100016E18((uint64_t)v14);
      BOOL v74 = CFEqual(v73, @"milod");
    }
    else
    {
      BOOL v74 = 1;
    }
    CFIndex v35 = v107;
    if (CFDictionaryGetValue(v18, @"SSID_STR") || _os_feature_enabled_impl())
    {
      if (!v74) {
        CFDictionarySetValue(v107, @"SCAN_6GHZ_FOLLOWUP", kCFBooleanTrue);
      }
      CFDictionarySetValue(v107, @"SCAN_INCL_ORIG_RNR", kCFBooleanTrue);
    }
    CFStringRef v75 = (const __CFString *)sub_100016E18((uint64_t)v14);
    if (CFEqual(v75, @"pipelined"))
    {
      int v76 = valuePtr;
      CFNumberRef v78 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        if (v76) {
          unsigned int v79 = "Low priority, non-low-latency scan request from \"%@\" \n";
        }
        else {
          unsigned int v79 = "Normal priority, low-latency scan request from \"%@\" \n";
        }
        uint64_t v80 = sub_100016E18((uint64_t)v14);
        CFStringRef v81 = v79;
        CFDictionaryRef v18 = theDict;
        [v78 WFLog:3 message:v81];
      }
      uint64_t v82 = (const void **)&kCFBooleanFalse;
      if (!v76) {
        uint64_t v82 = (const void **)&kCFBooleanTrue;
      }
      CFIndex v35 = v107;
      CFDictionarySetValue(v107, @"SCAN_LOW_LATENCY", *v82);
    }
    unsigned int v83 = sub_100112294(v35);
    if (v74)
    {
      if (v116) {
        long long v84 = (const void **)&kCFBooleanTrue;
      }
      else {
        long long v84 = (const void **)&kCFBooleanFalse;
      }
      CFDictionarySetValue(v35, @"SCAN_LOW_LATENCY", *v84);
      if (!v116 && v83)
      {
        CFDictionarySetValue(v35, @"SCAN_LOW_PRIORITY", kCFBooleanTrue);
        CFDictionarySetValue(v35, @"SCAN_PRIO_OVERRIDE", kCFBooleanTrue);
      }
      kdebug_trace();
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "Normal priority scan request from \"%@\", is5GScan=%d\n", sub_100016E18((uint64_t)v14), v83 message];
      }
      CFIndex v35 = v107;
    }
    long long v86 = (const void *)sub_100016E18((uint64_t)v14);
    CFDictionarySetValue(v35, @"ScanReqClientName", v86);
    int v114 = sub_10005B6E8((uint64_t)v14);
    CFNumberRef v87 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v114);
    if (v87)
    {
      CFNumberRef v88 = v87;
      CFDictionarySetValue(v35, @"ScanReqClientPid", v87);
      CFRelease(v88);
    }
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v90 = CFDateCreate(kCFAllocatorDefault, Current);
    a3 = v106;
    CFPropertyListRef v16 = v105;
    if (v90)
    {
      CFDateRef v91 = v90;
      CFDictionarySetValue(v35, @"ScanReqReceiptTimestamp", v90);
      CFRelease(v91);
    }
    sub_10005B8C0((uint64_t)v14, v104 | 1);
    CFNumberRef v92 = (const __CFNumber *)CFDictionaryGetValue(v18, @"SCAN_MERGE");
    if (v92)
    {
      CFNumberGetValue(v92, kCFNumberCFIndexType, &v115);
      BOOL v93 = v115 != 0;
    }
    else
    {
      BOOL v93 = 1;
    }
    if (v83) {
      int v94 = v93 | 2;
    }
    else {
      int v94 = v93;
    }
    sub_10005B8D0((uint64_t)v14, v94);
    CFStringRef v95 = (const __CFString *)sub_100016E18((uint64_t)v14);
    int v96 = sub_10011286C((uint64_t)v110, v105, v35, v95, (uint64_t)sub_1000E4234, (uint64_t)v14);
    _DWORD *v108 = v96;
    if (v96) {
      sub_10005B8C0((uint64_t)v14, v104 & 0xFFFFFFFE);
    }
    else {
      CFRetain(v14);
    }
    goto LABEL_130;
  }
  unsigned int v102 = a5;
  id v38 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v109 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableArrayRef v39 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFArrayRef theArray = v38;
  v113 = v39;
  if (!v38 || !v109 || !v39)
  {
    _DWORD *v108 = -3902;
    a5 = v102;
    goto LABEL_130;
  }
  if (sub_100113E58((uint64_t)v110, v38) || !CFArrayGetCount(v38))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: Error - Device failed to return supported channels! \n", "_wifi_device_scan_async"];
    }
    _DWORD *v108 = -3902;
    BOOL v41 = v38;
    a5 = v102;
    goto LABEL_131;
  }
  a5 = v102;
  if (CFArrayGetCount(theArray) >= 1)
  {
    CFIndex v58 = 0;
    do
    {
      CFDictionaryRef v59 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v58);
      if (v59)
      {
        CFOptionFlags v60 = CFDictionaryGetValue(v59, @"SUP_CHANNEL");
        CFArrayAppendValue(v109, v60);
      }
      ++v58;
    }
    while (v58 < CFArrayGetCount(theArray));
  }
  if (CFArrayGetCount(v37) < 1)
  {
LABEL_87:
    if (CFArrayGetCount(v113) <= 0)
    {
      a3 = v106;
      CFDictionaryRef v18 = theDict;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Error - Scan Channel List Empty!!! (No valid channel to scan!) \n", "_wifi_device_scan_async");
      }
      _DWORD *v108 = -3900;
      goto LABEL_146;
    }
    CFDictionarySetValue(v107, @"SCAN_CHANNELS", v113);
LABEL_89:
    CFDictionaryRef v18 = theDict;
    goto LABEL_90;
  }
  CFIndex v61 = 0;
  while (1)
  {
    CFDictionaryRef v62 = (const __CFDictionary *)CFArrayGetValueAtIndex(v37, v61);
    if (v62) {
      break;
    }
LABEL_86:
    if (++v61 >= CFArrayGetCount(v37)) {
      goto LABEL_87;
    }
  }
  CFDictionaryRef v63 = v62;
  CFMutableDictionaryRef v64 = CFDictionaryGetValue(v62, @"CHANNEL");
  id v65 = CFDictionaryGetValue(v63, @"CHANNEL_FLAGS");
  if (!v64)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Error - Invalid Channel(0) filtered from Scan List \n", "_wifi_device_scan_async"];
    }
    id v70 = v69;
    goto LABEL_85;
  }
  int v66 = v65;
  v119.length = CFArrayGetCount(v109);
  v119.location = 0;
  if (!CFArrayContainsValue(v109, v119, v64))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Error - Invalid Channel(%@) filtered from Scan List \n", "_wifi_device_scan_async", v64 message];
    }
    id v70 = v71;
LABEL_85:
    goto LABEL_86;
  }
  double v67 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v67)
  {
    id v68 = v67;
    CFDictionaryAddValue(v67, @"CHANNEL", v64);
    if (v66) {
      CFDictionaryAddValue(v68, @"CHANNEL_FLAGS", v66);
    }
    CFArrayAppendValue(v113, v68);
    CFRelease(v68);
    goto LABEL_86;
  }
  _DWORD *v108 = -3902;
LABEL_148:
  a3 = v106;
  CFPropertyListRef v16 = v105;
  CFDictionaryRef v18 = theDict;
LABEL_146:
  CFIndex v35 = v107;
LABEL_130:
  BOOL v41 = theArray;
  if (theArray) {
LABEL_131:
  }
    CFRelease(v41);
  if (v109) {
    CFRelease(v109);
  }
  if (v113) {
    CFRelease(v113);
  }
  CFRelease(v35);
LABEL_137:
  if (v16) {
LABEL_138:
  }
    CFRelease(v16);
  if (v18) {
    CFRelease(v18);
  }
LABEL_141:
  CFRelease(v14);
LABEL_142:
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

void sub_1000E4234(uint64_t a1, const void *a2, const __CFArray *a3, uint64_t a4, const void *a5)
{
  int v10 = sub_10005B8B8((uint64_t)a5);
  uint64_t v12 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    uint64_t v13 = sub_100016E18((uint64_t)a5);
    if (a3) {
      CFIndex Count = CFArrayGetCount(a3);
    }
    else {
      CFIndex Count = 0;
    }
    [v12 WFLog:3, "Async scan request completed for \"%@\" (%d), found %ld networks", v13, a4, Count message];
  }
  CFStringRef v15 = (const __CFString *)sub_100016E18((uint64_t)a5);
  if (CFEqual(v15, @"locationd"))
  {
    sub_100112380(a1, a4);
    kdebug_trace();
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"Locationd scan done."];
    }
  }
  if (_os_feature_enabled_impl())
  {
    CFStringRef v17 = (const __CFString *)sub_100016E18((uint64_t)a5);
    if (CFEqual(v17, @"configd")
      && (~sub_10005B8C8((uint64_t)a5) & 3) == 0)
    {
      sub_10010C2FC(a1, a3);
    }
  }
  sub_10005BC3C((uint64_t)a5, a1, a2, a3, a4);
  sub_10005B8C0((uint64_t)a5, v10 & 0xFFFFFFFE);
  if (a5 && (v10 & 1) != 0)
  {
    CFRelease(a5);
  }
}

uint64_t sub_1000E4414(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, unsigned int a5, _DWORD *a6)
{
  *a6 = 0;
  uint64_t v12 = sub_10000E5D8();
  uint64_t v13 = sub_10000E504(a1, v12);
  if (v13)
  {
    uint64_t v14 = v13;
    if ((sub_10000E620((uint64_t)v13) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_assoc_async(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v14) message];
      }
      *a6 = 1;
      goto LABEL_31;
    }
    CFPropertyListRef v16 = sub_10000EA08(a2, a3);
    CFPropertyListRef v17 = sub_10000EA08(a4, a5);
    CFDictionaryRef v18 = v17;
    if (!v16 || !v17)
    {
      if (v16) {
        CFRelease(v16);
      }
      if (!v18) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    CFPropertyListRef v19 = sub_10000E628((uint64_t)v14, v16);
    if (!v19 || (CFNumberRef v20 = v19, (v21 = (const __CFData *)sub_100019658((int)kCFAllocatorDefault, v18)) == 0))
    {
      CFDataRef v22 = (const __CFData *)v16;
      goto LABEL_29;
    }
    CFDataRef v22 = v21;
    CFStringRef v34 = a4;
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Async association requested by \"%@\"", sub_100016E18((uint64_t)v14) message];
    }
    int v24 = sub_10005B8B8((uint64_t)v14);
    if ((v24 & 2) != 0)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"Already associating, will not queue request. "];
      }
      sub_10005BD9C((uint64_t)v14, v20, (const __CFData *)v16, v22, 0, 37);
      goto LABEL_28;
    }
    int v25 = v24;
    sub_10005B8C0((uint64_t)v14, v24 | 2);
    sub_100102284((uint64_t)v20);
    sub_10010222C((uint64_t)v20);
    if (sub_100016E18((uint64_t)v14))
    {
      uint64_t v26 = (const void *)sub_100016E18((uint64_t)v14);
      int v27 = CFEqual(v26, @"mobilewifitool");
      if (_os_feature_enabled_impl()
        && v27
        && sub_10005D610((uint64_t)v14, @"com.apple.wifi.manager-assoc-find-and-join-network"))
      {
        uint64_t v28 = sub_100117728((uint64_t)v20, (uint64_t)v16, v22, 0, (uint64_t)sub_1000E477C, (uint64_t)v14);
        goto LABEL_23;
      }
    }
    else
    {
      _os_feature_enabled_impl();
    }
    CFStringRef v30 = (const __CFString *)sub_100016E18((uint64_t)v14);
    uint64_t v28 = sub_100113EA0((uint64_t)v20, v16, v22, 0, v30, (uint64_t)sub_1000E477C, (uint64_t)v14, 1008);
LABEL_23:
    uint64_t v31 = v28;
    if (v28)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Error returned by Associate Async %d", v31);
      }
      sub_10005B8C0((uint64_t)v14, v25 & 0xFFFFFFFD);
    }
    else
    {
      CFRetain(v14);
    }
LABEL_28:
    a4 = v34;
    CFRelease(v16);
LABEL_29:
    CFRelease(v22);
LABEL_30:
    CFRelease(v18);
LABEL_31:
    CFRelease(v14);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

void sub_1000E477C(const void *a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, uint64_t a5, const void *a6)
{
  int v12 = sub_10005B8B8((uint64_t)a6);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Async association request completed for \"%@\" (%d)", sub_100016E18((uint64_t)a6), a5 message];
  }
  sub_1001020F0((uint64_t)a1);
  sub_10005BD9C((uint64_t)a6, a1, a2, a3, a4, a5);
  sub_10005B8C0((uint64_t)a6, v12 & 0xFFFFFFFD);
  if (a6 && (v12 & 2) != 0)
  {
    CFRelease(a6);
  }
}

uint64_t sub_1000E4890(unsigned int a1, UInt8 *a2, unsigned int a3, _DWORD *a4)
{
  *a4 = 0;
  uint64_t v8 = sub_10000E5D8();
  uint64_t v9 = sub_10000E504(a1, v8);
  if (v9)
  {
    int v10 = v9;
    if (sub_10000E620((uint64_t)v9))
    {
      CFPropertyListRef v12 = sub_10000EA08(a2, a3);
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = sub_10000E628((uint64_t)v10, v12);
        if (v14)
        {
          uint64_t v15 = (uint64_t)v14;
          if (sub_10005B6D8((uint64_t)v10)) {
            *a4 = sub_100110524(v15);
          }
        }
        CFRelease(v13);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_get_power(mach_port_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v10) message];
      }
    }
    CFRelease(v10);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E49A8(unsigned int a1, UInt8 *a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  *a5 = 0;
  uint64_t v10 = sub_10000E5D8();
  CFMutableArrayRef v11 = sub_10000E504(a1, v10);
  if (v11)
  {
    CFPropertyListRef v12 = v11;
    if (sub_10000E620((uint64_t)v11))
    {
      CFPropertyListRef v14 = sub_10000EA08(a2, a3);
      if (v14)
      {
        uint64_t v15 = v14;
        CFPropertyListRef v16 = sub_10000E628((uint64_t)v12, v14);
        if (v16)
        {
          uint64_t v17 = (uint64_t)v16;
          if (qword_10027DD68)
          {
            if (a4) {
              CFPropertyListRef v19 = "ON";
            }
            else {
              CFPropertyListRef v19 = "OFF";
            }
            [(id)qword_10027DD68 WFLog:3, "Device power %s requested by \"%@\"", v19, sub_100016E18((uint64_t)v12) message];
          }
          uint64_t v20 = sub_100110558(v17, v15, a4);
          if (v20)
          {
            uint64_t v21 = v20;
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:4, @"Unable to set power state(%d) to %d. deviceManager=%p", v21, a4, v17];
            }
          }
        }
        CFRelease(v15);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_set_power(mach_port_t, vm_offset_t, mach_msg_type_number_t, int, int *)", sub_100016E18((uint64_t)v12) message];
      }
      *a5 = 1;
    }
    CFRelease(v12);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E4B60(unsigned int a1, UInt8 *a2, unsigned int a3, uint64_t a4, UInt8 *a5, unsigned int a6, _DWORD *a7)
{
  *a7 = 0;
  uint64_t v14 = sub_10000E5D8();
  uint64_t v15 = sub_10000E504(a1, v14);
  if (!v15)
  {
    *a7 = 74;
    goto LABEL_53;
  }
  CFPropertyListRef v16 = v15;
  if (sub_10000E620((uint64_t)v15))
  {
    CFStringRef v18 = (const __CFString *)sub_10000EA08(a2, a3);
    CFDictionaryRef v19 = (const __CFDictionary *)sub_10000EA08(a5, a6);
    CFDictionaryRef v20 = v19;
    if (!v18 || a4 != 4 && !v19)
    {
      *a7 = 72;
      goto LABEL_48;
    }
    CFIndex v49 = (char *)sub_10000E628((uint64_t)v16, v18);
    if (v49)
    {
      CFDictionaryRef theDict = v20;
      if (a4 == 4)
      {
        kdebug_trace();
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "\"%@\" starting AWDL", sub_100016E18((uint64_t)v16), v45 message];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "\"%@\" starting network role (%d)", sub_100016E18((uint64_t)v16), a4 message];
        }
      }
      int v22 = sub_10005B8B8((uint64_t)v16);
      if ((v22 & 8) == 0)
      {
        int v23 = v22;
        unsigned int v46 = a6;
        uint64_t v47 = a5;
        CFArrayRef v24 = (const __CFArray *)sub_10005B8E0((uint64_t)v16);
        if (v24)
        {
          CFArrayRef v25 = v24;
          if (CFArrayGetCount(v24))
          {
            if (CFArrayGetCount(v25) >= 1)
            {
              CFIndex v26 = 0;
              while (1)
              {
                CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v25, v26);
                if (ValueAtIndex)
                {
                  uint64_t v28 = (uint64_t)ValueAtIndex;
                  if (sub_1000C6FC0((uint64_t)ValueAtIndex, @"networkRole") == (const __CFNumber *)(int)a4) {
                    break;
                  }
                }
                if (++v26 >= CFArrayGetCount(v25)) {
                  goto LABEL_23;
                }
              }
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: client %@ has already brought up network of role %ld", "_wifi_device_start_network", sub_100016E18((uint64_t)v16), (int)a4 message];
              }
              sub_10005BF94((uint64_t)v16, (uint64_t)v49, v18, 37, v28, 0);
              a5 = v47;
              CFDictionaryRef v20 = theDict;
              a6 = v46;
LABEL_48:
              if (!v18) {
                goto LABEL_50;
              }
              goto LABEL_49;
            }
          }
        }
LABEL_23:
        sub_10005B8C0((uint64_t)v16, v23 | 8);
        uint64_t v29 = v49;
        if ((a4 & 0xFFFFFFFE) == 2)
        {
          CFStringRef v30 = sub_10000E5D0((uint64_t)v49, v18);
          if (v30)
          {
            uint64_t v31 = v30;
            if (!sub_10010EC7C((uint64_t)v49, 4))
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "Enabling SoftAP. Now disconnecting from %@", sub_10001A43C(v31) message];
              }
              uint64_t v29 = v49;
              sub_1000FEA7C((uint64_t)v49, v18, 1007, "_wifi_device_start_network", 3520);
            }
            CFRelease(v31);
          }
          else
          {
            sub_100102284((uint64_t)v49);
          }
        }
        CFStringRef v34 = (const __CFString *)sub_100016E18((uint64_t)v16);
        if (v34)
        {
          CFComparisonResult v35 = CFStringCompare(v34, @"matd", 1uLL);
          CFDictionaryRef v20 = theDict;
          if (theDict && v35 == kCFCompareEqualTo)
          {
            MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
            if (!MutableCopy)
            {
LABEL_47:
              a5 = v47;
              a6 = v46;
              goto LABEL_48;
            }
            CFArrayRef v37 = MutableCopy;
            CFRelease(theDict);
            CFDictionarySetValue(v37, @"AP_MODE_MOVETOIOS_MIGRATION", +[NSNumber numberWithBool:1]);
            CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v37);
            CFRelease(v37);
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "MIGRATION:%s Request  Dict : %@ ", "_wifi_device_start_network", Copy message];
            }
            CFDictionaryRef v20 = Copy;
            uint64_t v29 = v49;
          }
        }
        else
        {
          CFDictionaryRef v20 = theDict;
        }
        CFDictionaryRef v40 = (const void *)sub_100016E18((uint64_t)v16);
        int v41 = sub_1001186D0((uint64_t)v29, v18, a4, v20, (uint64_t)sub_1000E5134, (uint64_t)v16, v40);
        *a7 = v41;
        if (!v41 || (sub_10005B8C0((uint64_t)v16, v23 & 0xFFFFFFF7), !*a7))
        {
          if ((a4 & 0xFFFFFFFE) == 2)
          {
            CFStringRef v42 = (void *)sub_100016E18((uint64_t)v16);
            sub_10010F568((uint64_t)v29, 1, 0, 0, v42);
            sub_10010E8D4((uint64_t)v29, 1);
            sub_100100A60(v29, 4, 1);
          }
          CFRetain(v16);
        }
        goto LABEL_47;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: client %@ has already requested hosted network.", "_wifi_device_start_network", sub_100016E18((uint64_t)v16) message];
      }
      sub_10005BF94((uint64_t)v16, (uint64_t)v49, v18, 37, 0, 0);
    }
    else
    {
      *a7 = 74;
    }
LABEL_49:
    CFRelease(v18);
LABEL_50:
    if (v20) {
      CFRelease(v20);
    }
    goto LABEL_52;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_start_network(mach_port_t, vm_offset_t, mach_msg_type_number_t, int, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v16) message];
  }
  *a7 = 1;
LABEL_52:
  CFRelease(v16);
LABEL_53:
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a5, a6);
  return 0;
}

void sub_1000E5134(char *a1, const void *a2, uint64_t a3, const void *a4, const __CFData *a5, const void *a6)
{
  if (a6) {
    int v12 = sub_10005B8B8((uint64_t)a6) & 0xFFFFFFF7;
  }
  else {
    int v12 = 0;
  }
  if (a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Failed to start network requested by \"%@\", %d", sub_100016E18((uint64_t)a6), a3 message];
    }
    if (a4 && ((unint64_t)sub_1000C6FC0((uint64_t)a4, @"networkRole") & 0xFFFFFFFFFFFFFFFELL) == 2)
    {
      uint64_t v14 = (void *)sub_100016E18((uint64_t)a6);
      sub_10010F568((uint64_t)a1, 0, 0, 0, v14);
      sub_10010E8D4((uint64_t)a1, 0);
      sub_100100A60(a1, 4, 0);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Started network \"%@\" requested by %@\"", a4, sub_100016E18((uint64_t)a6) message];
    }
    CFArrayRef v15 = (const __CFArray *)sub_10005B8E0((uint64_t)a6);
    if (v15)
    {
      MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v15);
      if (MutableCopy)
      {
        CFArrayRef v17 = MutableCopy;
        CFArrayAppendValue(MutableCopy, a4);
        sub_10005B968((uint64_t)a6, v17);
        CFRelease(v17);
      }
      else
      {
        sub_10005B968((uint64_t)a6, 0);
      }
    }
  }
  sub_10005B8C0((uint64_t)a6, v12);
  sub_10005BF94((uint64_t)a6, (uint64_t)a1, a2, a3, (uint64_t)a4, a5);
  if (a6)
  {
    CFRelease(a6);
  }
}

uint64_t sub_1000E5334(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, unsigned int a5, int *a6)
{
  *a6 = 0;
  uint64_t v12 = sub_10000E5D8();
  uint64_t v13 = sub_10000E504(a1, v12);
  if (!v13)
  {
    *a6 = 74;
    goto LABEL_30;
  }
  uint64_t v14 = v13;
  if (sub_10000E620((uint64_t)v13))
  {
    unsigned int v45 = a3;
    CFPropertyListRef v16 = sub_10000EA08(a2, a3);
    CFPropertyListRef v17 = sub_10000EA08(a4, a5);
    CFStringRef v18 = v17;
    if (!v16 || !v17)
    {
      int v22 = 0;
      *a6 = 72;
      if (!v16) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    id v43 = a2;
    unsigned int v44 = a5;
    CFDictionaryRef v19 = (char *)sub_10000E628((uint64_t)v14, v16);
    if (v19)
    {
      CFDictionaryRef v20 = v19;
      uint64_t v21 = sub_100019658((int)kCFAllocatorDefault, v18);
      if (v21)
      {
        int v22 = v21;
        CFStringRef v42 = a4;
        CFArrayRef v24 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          uint64_t v25 = sub_100016E18((uint64_t)v14);
          [v24 WFLog:3, "\"%@\" stopping network \"%@\"", v25, sub_10001A43C(v22) message];
        }
        CFArrayRef v26 = (const __CFArray *)sub_10005B8E0((uint64_t)v14);
        if (v26 && (CFArrayRef v27 = v26, CFArrayGetCount(v26) >= 1))
        {
          CFIndex v28 = 0;
          while (1)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v27, v28);
            if (ValueAtIndex)
            {
              CFStringRef v30 = ValueAtIndex;
              if (CFEqual(ValueAtIndex, v22)) {
                break;
              }
            }
            if (++v28 >= CFArrayGetCount(v27)) {
              goto LABEL_18;
            }
          }
          if (qword_10027DD68)
          {
            CFDictionaryRef v40 = (void *)qword_10027DD68;
            uint64_t context = v35;
            CFMutableArrayRef v39 = sub_10001A43C(v30);
            [v40 WFLog:3, "%s: removing network %@ for client %@ started network list.", "_wifi_device_stop_network", v39, sub_100016E18((uint64_t)v14) message];
            CFComparisonResult v35 = context;
          }
          CFNumberRef v31 = sub_1000C6FC0((uint64_t)v30, @"networkRole");
          MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v27);
          if (MutableCopy)
          {
            CFArrayRef v37 = MutableCopy;
            CFArrayRemoveValueAtIndex(MutableCopy, v28);
            sub_10005B968((uint64_t)v14, v37);
            CFRelease(v37);
          }
          else
          {
            sub_10005B968((uint64_t)v14, 0);
          }
        }
        else
        {
LABEL_18:
          CFNumberRef v31 = 0;
        }
        int v32 = sub_1001190F4((uint64_t)v20, v16, v22, (uint64_t)sub_1000E56E8, (uint64_t)v14);
        *a6 = v32;
        a4 = v42;
        if (!v32)
        {
          if (((unint64_t)v31 & 0xFFFFFFFFFFFFFFFELL) == 2)
          {
            int v33 = (void *)sub_100016E18((uint64_t)v14);
            sub_10010F568((uint64_t)v20, 0, 0, 0, v33);
            sub_10010E8D4((uint64_t)v20, 0);
            sub_100100A60(v20, 4, 0);
          }
          CFRetain(v14);
        }
        a5 = v44;
        a2 = v43;
        goto LABEL_24;
      }
      int v38 = 72;
    }
    else
    {
      int v38 = 74;
    }
    int v22 = 0;
    *a6 = v38;
    a2 = v43;
LABEL_24:
    CFRelease(v16);
LABEL_25:
    if (v22) {
      CFRelease(v22);
    }
    a3 = v45;
    if (v18) {
      CFRelease(v18);
    }
    goto LABEL_29;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_stop_network(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v14) message];
  }
  *a6 = 1;
LABEL_29:
  CFRelease(v14);
LABEL_30:
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

void sub_1000E56E8(uint64_t a1, const void *a2, int a3, const __CFData *a4, const void *a5)
{
  sub_10005C138((uint64_t)a5, a1, a2, a3, a4);
  if (a5)
  {
    CFRelease(a5);
  }
}

uint64_t sub_1000E5744(unsigned int a1, UInt8 *a2, unsigned int a3, uint64_t a4, vm_offset_t *a5, mach_msg_type_number_t *a6, int *a7)
{
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  uint64_t v13 = sub_10000E5D8();
  uint64_t v14 = sub_10000E504(a1, v13);
  if (!v14)
  {
    *a7 = 74;
    goto LABEL_12;
  }
  CFArrayRef v15 = v14;
  if ((sub_10000E620((uint64_t)v14) & 1) == 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_copy_interface_state_info(mach_port_t, vm_offset_t, mach_msg_type_number_t, int, vm_offset_t *, mach_msg_type_number_t *, int *)", sub_100016E18((uint64_t)v15) message];
    }
    *a7 = 1;
    goto LABEL_11;
  }
  CFStringRef v17 = (const __CFString *)sub_10000EA08(a2, a3);
  if (v17)
  {
    CFStringRef v18 = v17;
    CFDictionaryRef v19 = sub_10000E628((uint64_t)v15, v17);
    if (v19)
    {
      CFDictionaryRef v20 = sub_1001113B4((uint64_t)v19, v18);
      if (v20)
      {
        uint64_t v21 = v20;
        sub_10000E45C(v20, a5, a6);
        CFRelease(v18);
        CFStringRef v22 = (const __CFString *)v21;
LABEL_10:
        CFRelease(v22);
        goto LABEL_11;
      }
      int v24 = 5;
    }
    else
    {
      int v24 = 74;
    }
    *a7 = v24;
    CFStringRef v22 = v18;
    goto LABEL_10;
  }
LABEL_11:
  CFRelease(v15);
LABEL_12:
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E58A4(unsigned int a1, UInt8 *a2, unsigned int a3, uint64_t a4, vm_offset_t *a5, mach_msg_type_number_t *a6, int *a7)
{
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  uint64_t v13 = sub_10000E5D8();
  uint64_t v14 = sub_10000E504(a1, v13);
  if (!v14)
  {
    *a7 = 74;
    goto LABEL_28;
  }
  CFArrayRef v15 = v14;
  if ((sub_10000E620((uint64_t)v14) & 1) == 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_copy_networks(mach_port_t, vm_offset_t, mach_msg_type_number_t, int, vm_offset_t *, mach_msg_type_number_t *, int *)", sub_100016E18((uint64_t)v15) message];
    }
    *a7 = 1;
    goto LABEL_27;
  }
  CFStringRef v17 = (__CFArray *)sub_10000EA08(a2, a3);
  if (v17)
  {
    CFStringRef v18 = v17;
    CFDictionaryRef v19 = sub_10000E628((uint64_t)v15, v17);
    if (v19)
    {
      CFArrayRef v20 = sub_1001112DC((uint64_t)v19);
      CFArrayRef v21 = v20;
      if (v20)
      {
        CFStringRef v34 = a6;
        unsigned int v35 = a3;
        CFArrayRef v36 = a2;
        if (CFArrayGetCount(v20) >= 1)
        {
          for (CFIndex i = 0; i < CFArrayGetCount(v21); ++i)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v21, i);
            if (ValueAtIndex)
            {
              int v24 = ValueAtIndex;
              CFNumberRef v25 = sub_1000C6FC0((uint64_t)ValueAtIndex, @"networkRole");
              if ((v25 & 0xFFFFFFFE) == 2)
              {
                CFArrayRef v26 = (void *)sub_10005B6D8((uint64_t)v15);
                CFDictionaryRef v27 = sub_1000A85B4(v26);
                if (v27)
                {
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: attaching interface data usage to %@", "_wifi_device_copy_networks", sub_10001A43C(v24) message];
                  }
                  sub_10001C6A4((uint64_t)v24, @"InterfaceDataUsageV1", v27);
                  CFRelease(v27);
                  continue;
                }
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: no interface data usage for %@", "_wifi_device_copy_networks", sub_10001A43C(v24), v33 message];
                }
              }
              else
              {
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: network %@ has invalid role (%d)", "_wifi_device_copy_networks", sub_10001A43C(v24), v25 message];
                }
              }
            }
          }
        }
        uint64_t v29 = sub_10005A3F4(v21);
        if (v29)
        {
          CFStringRef v30 = v29;
          sub_10000E45C(v29, a5, v34);
          CFRelease(v18);
          CFStringRef v18 = v30;
          a2 = v36;
          a3 = v35;
          goto LABEL_25;
        }
        int v32 = 5;
        a2 = v36;
        a3 = v35;
      }
      else
      {
        int v32 = 5;
      }
    }
    else
    {
      CFArrayRef v21 = 0;
      int v32 = 74;
    }
    *a7 = v32;
LABEL_25:
    CFRelease(v18);
    if (v21) {
      CFRelease(v21);
    }
  }
LABEL_27:
  CFRelease(v15);
LABEL_28:
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E5BB4(unsigned int a1, UInt8 *a2, unsigned int a3, uint64_t a4, unsigned int *a5)
{
  *a5 = 0;
  uint64_t v10 = sub_10000E5D8();
  CFMutableArrayRef v11 = sub_10000E504(a1, v10);
  if (v11)
  {
    uint64_t v12 = v11;
    if (sub_10000E620((uint64_t)v11))
    {
      CFPropertyListRef v14 = sub_10000EA08(a2, a3);
      if (v14)
      {
        CFArrayRef v15 = v14;
        CFPropertyListRef v16 = sub_10000E628((uint64_t)v12, v14);
        if (v16)
        {
          uint64_t v17 = (uint64_t)v16;
          if (qword_10027DD68)
          {
            if (a4) {
              CFDictionaryRef v19 = "enabled";
            }
            else {
              CFDictionaryRef v19 = "disabled";
            }
            [(id)qword_10027DD68 WFLog:3, "WiFi Direct Mode %s, requested by \"%@\"", v19, sub_100016E18((uint64_t)v12) message];
          }
          unsigned int v20 = sub_10011121C(v17, (uint64_t)v15, a4);
          *a5 = v20;
          if (v20)
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Unable to set WiFi Direct state to 0x%X, 0x%X. deviceManager=%p", a4, *a5, v17);
            }
          }
        }
        else
        {
          *a5 = 74;
        }
        CFRelease(v15);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_set_wifi_direct_state(mach_port_t, vm_offset_t, mach_msg_type_number_t, int, int *)", sub_100016E18((uint64_t)v12) message];
      }
      *a5 = 1;
    }
    CFRelease(v12);
  }
  else
  {
    *a5 = 74;
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E5D90(unsigned int a1, UInt8 *a2, unsigned int a3, unint64_t a4)
{
  uint64_t v8 = sub_10000E5D8();
  uint64_t v9 = sub_10000E504(a1, v8);
  if (v9)
  {
    uint64_t v10 = v9;
    if ((sub_10000E620((uint64_t)v9) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_set_event_mask(mach_port_t, vm_offset_t, mach_msg_type_number_t, uint64_t)", sub_100016E18((uint64_t)v10) message];
      }
      goto LABEL_20;
    }
    CFPropertyListRef v12 = sub_10000EA08(a2, a3);
    if (!v12)
    {
LABEL_20:
      CFRelease(v10);
      goto LABEL_21;
    }
    uint64_t v13 = v12;
    CFPropertyListRef v14 = sub_10000E628((uint64_t)v10, v12);
    if (!v14)
    {
LABEL_19:
      CFRelease(v13);
      goto LABEL_20;
    }
    uint64_t v15 = (uint64_t)v14;
    CFPropertyListRef v16 = (CFDictionaryRef *)sub_10005B6D8((uint64_t)v10);
    if (((unint64_t)sub_100016CD4((uint64_t)v10, v15) ^ a4) == 0x8000)
    {
      if ((a4 & 0x8000) != 0)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: client %@ requested diagnostics event", "_wifi_device_set_event_mask", sub_100016E18((uint64_t)v10) message];
        }
        uint64_t v20 = sub_10005D168((uint64_t)v10);
        sub_10005D160((uint64_t)v10, v20 | 0x8000);
        sub_1000928C4((uint64_t)v16);
        int v19 = 1;
        if (sub_100124D0C(v15)) {
          goto LABEL_18;
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: client %@ stopped diagnostics event", "_wifi_device_set_event_mask", sub_100016E18((uint64_t)v10) message];
        }
        uint64_t v18 = sub_10005D168((uint64_t)v10);
        sub_10005D160((uint64_t)v10, v18 & 0xFFFFFFFFFFFF7FFFLL);
        sub_100092A5C((uint64_t)v16);
        if (sub_100124D0C(v15)) {
          goto LABEL_18;
        }
        int v19 = 0;
      }
      sub_1000A75C4(v16, (uint64_t)v10, 14, v19);
    }
LABEL_18:
    sub_10005D170((uint64_t)v10, v15, v13, a4);
    sub_1000929E8((uint64_t)v16, v15, a4);
    goto LABEL_19;
  }
LABEL_21:
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E5FEC(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, unsigned int a5, UInt8 *a6, unsigned int a7, _DWORD *a8)
{
  *a8 = -3900;
  uint64_t v16 = sub_10000E5D8();
  uint64_t v17 = sub_10000E504(a1, v16);
  if (v17)
  {
    uint64_t v18 = v17;
    if ((sub_10000E620((uint64_t)v17) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_gas_start_async(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v18) message];
      }
LABEL_32:
      CFRelease(v18);
      goto LABEL_33;
    }
    unsigned int v40 = a3;
    CFPropertyListRef v20 = sub_10000EA08(a2, a3);
    CFDictionaryRef v21 = (const __CFDictionary *)sub_10000EA08(a6, a7);
    CFPropertyListRef v22 = sub_10000EA08(a4, a5);
    CFDictionaryRef cf = v21;
    CFTypeRef v39 = v22;
    if (v20 && v21 && (CFArrayRef v23 = (const __CFArray *)v22) != 0)
    {
      CFArrayRef v37 = a2;
      int v24 = sub_10000E628((uint64_t)v18, v20);
      if (v24)
      {
        uint64_t v25 = (uint64_t)v24;
        CFArrayRef v26 = sub_10005A4C4(v23);
        if (v26)
        {
          MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v21);
          CFIndex v28 = MutableCopy;
          if (MutableCopy)
          {
            CFArrayRef v36 = a4;
            CFDictionaryAddValue(MutableCopy, @"GAS_NETWORKS", v26);
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "Async GAS query requested by \"%@\" on %@", sub_100016E18((uint64_t)v18), v20 message];
            }
            *a8 = 0;
            int v30 = sub_10005B8B8((uint64_t)v18);
            if ((v30 & 4) != 0)
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"Already GAS querying, will not queue request. "];
              }
              sub_10005C244((uint64_t)v18, v25, v20, 0, 37);
              a4 = v36;
            }
            else
            {
              int v31 = v30;
              sub_10005B8C0((uint64_t)v18, v30 | 4);
              int v32 = sub_100119B00(v25, v20, v28, (uint64_t)sub_1000E6340, (uint64_t)v18);
              *a8 = v32;
              if (v32) {
                sub_10005B8C0((uint64_t)v18, v31 & 0xFFFFFFFB);
              }
              else {
                CFRetain(v18);
              }
              a4 = v36;
            }
          }
        }
        else
        {
          CFIndex v28 = 0;
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s: unable to find device manager for interface %@", "_wifi_device_gas_start_async", v20 message];
        }
        CFIndex v28 = 0;
        CFArrayRef v26 = 0;
      }
      a2 = v37;
    }
    else
    {
      CFIndex v28 = 0;
      CFArrayRef v26 = 0;
      if (!v20) {
        goto LABEL_24;
      }
    }
    CFRelease(v20);
LABEL_24:
    if (cf) {
      CFRelease(cf);
    }
    a3 = v40;
    if (v28) {
      CFRelease(v28);
    }
    if (v39) {
      CFRelease(v39);
    }
    if (v26) {
      CFRelease(v26);
    }
    goto LABEL_32;
  }
LABEL_33:
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a6, a7);
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

void sub_1000E6340(uint64_t a1, const void *a2, const __CFArray *a3, uint64_t a4, const void *a5)
{
  int v10 = sub_10005B8B8((uint64_t)a5);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Gas request completed for \"%@\" (%d)", sub_100016E18((uint64_t)a5), a4 message];
  }
  sub_10005C244((uint64_t)a5, a1, a2, a3, a4);
  sub_10005B8C0((uint64_t)a5, v10 & 0xFFFFFFFB);
  if (a5 && (v10 & 4) != 0)
  {
    CFRelease(a5);
  }
}

uint64_t sub_1000E6438(unsigned int a1, UInt8 *a2, unsigned int a3, uint64_t a4, UInt8 *a5, unsigned int a6, unsigned int *a7)
{
  *a7 = 0;
  uint64_t v14 = sub_10000E5D8();
  uint64_t v15 = sub_10000E504(a1, v14);
  if (v15)
  {
    uint64_t v16 = v15;
    if (sub_10000E620((uint64_t)v15))
    {
      CFPropertyListRef v18 = sub_10000EA08(a2, a3);
      if (v18)
      {
        int v19 = v18;
        uint64_t v33 = sub_10000E628((uint64_t)v16, v18);
        if (v33)
        {
          CFArrayRef v32 = (const __CFArray *)sub_10000EA08(a5, a6);
          kdebug_trace();
          if (qword_10027DD68)
          {
            BOOL v21 = a4 == 0;
            uint64_t v31 = a4;
            unsigned int v22 = a3;
            CFArrayRef v23 = a2;
            unsigned int v24 = a6;
            uint64_t v25 = a5;
            if (v21) {
              CFArrayRef v26 = "OFF";
            }
            else {
              CFArrayRef v26 = "ON";
            }
            int v30 = v26;
            a5 = v25;
            a6 = v24;
            a2 = v23;
            a3 = v22;
            a4 = v31;
            [(id)qword_10027DD68 WFLog:4, "Set device rangeable %s requested by \"%@\"", v30, sub_100016E18((uint64_t)v16) message];
          }
          unsigned int v27 = sub_100119E54((uint64_t)v33, (uint64_t)v19, a4, v32);
          *a7 = v27;
          if (v27)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:4, @"Unable to set rangeable state(%d) to %d. deviceManager=%p", *a7, a4, v33];
            }
          }
          if (v32) {
            CFRelease(v32);
          }
        }
        CFRelease(v19);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_set_rangeable(mach_port_t, vm_offset_t, mach_msg_type_number_t, int, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v16) message];
      }
      *a7 = 1;
    }
    CFRelease(v16);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a5, a6);
  return 0;
}

uint64_t sub_1000E6678(unsigned int a1, UInt8 *a2, unsigned int a3, int a4, UInt8 *a5, unsigned int a6, unsigned int *a7)
{
  *a7 = 0;
  uint64_t v14 = sub_10000E5D8();
  uint64_t v15 = sub_10000E504(a1, v14);
  if (v15)
  {
    uint64_t v16 = v15;
    if ((sub_10000E620((uint64_t)v15) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_set_ranging_identifier(mach_port_t, vm_offset_t, mach_msg_type_number_t, int, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v16) message];
      }
      *a7 = 1;
      goto LABEL_22;
    }
    CFPropertyListRef v18 = sub_10000EA08(a2, a3);
    if (!v18)
    {
LABEL_22:
      CFRelease(v16);
      goto LABEL_23;
    }
    int v19 = v18;
    bytes = a5;
    CFPropertyListRef v20 = sub_10000E628((uint64_t)v16, v18);
    if (v20)
    {
      uint64_t v21 = (uint64_t)v20;
      if (!a4)
      {
        MutableCFDictionaryRef Copy = 0;
        CFDictionaryRef v23 = 0;
        goto LABEL_13;
      }
      CFDictionaryRef v22 = (const __CFDictionary *)sub_10000EA08(a5, a6);
      if (v22)
      {
        CFDictionaryRef v23 = v22;
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v22);
        if (!MutableCopy)
        {
LABEL_20:
          CFRelease(v23);
          goto LABEL_21;
        }
LABEL_13:
        unsigned int v25 = sub_100119E64(v21, (uint64_t)v19, a4, (uint64_t)MutableCopy);
        *a7 = v25;
        if (v25)
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Unable to set ranging identifier(%d). deviceManager=%p", *a7, v21);
          }
        }
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        if (!v23) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
LABEL_21:
    CFRelease(v19);
    a5 = bytes;
    goto LABEL_22;
  }
LABEL_23:
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a5, a6);
  return 0;
}

uint64_t sub_1000E685C(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, unsigned int a5, uint64_t a6, _DWORD *a7)
{
  *a7 = -3900;
  uint64_t v14 = sub_10000E5D8();
  uint64_t v15 = sub_10000E504(a1, v14);
  if (v15)
  {
    uint64_t v16 = v15;
    if (sub_10000E620((uint64_t)v15))
    {
      CFPropertyListRef v18 = sub_10000EA08(a2, a3);
      if (v18)
      {
        int v19 = v18;
        uint64_t v31 = a2;
        CFPropertyListRef v20 = sub_10000E628((uint64_t)v16, v18);
        unsigned int v32 = a5;
        if (v20)
        {
          uint64_t v21 = (uint64_t)v20;
          CFArrayRef v22 = (const __CFArray *)sub_10000EA08(a4, a5);
          if (v22)
          {
            CFArrayRef v23 = v22;
            kdebug_trace();
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4, "Async ranging requested by \"%@\" on %@ timeout %d", sub_100016E18((uint64_t)v16), v19, a6 message];
            }
            *a7 = 0;
            int v25 = sub_10005B8B8((uint64_t)v16);
            if ((v25 & 0x10) != 0)
            {
              if (qword_10027DD68) {
                [qword_10027DD68 WFLog:4 message:@"Already ranging, will not queue request."];
              }
              sub_10005C728((uint64_t)v16, v21, v19, 0, 37);
            }
            else
            {
              int v26 = v25;
              sub_10005B8C0((uint64_t)v16, v25 | 0x10);
              int v27 = sub_100119E6C(v21, v19, v23, (uint64_t)sub_1000E6B08, (uint64_t)v16, (double)(int)a6);
              *a7 = v27;
              if (v27) {
                sub_10005B8C0((uint64_t)v16, v26 & 0xFFFFFFEF);
              }
              else {
                CFRetain(v16);
              }
            }
            CFRelease(v23);
          }
        }
        else
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s: unable to find device manager for interface %@", "_wifi_device_ranging_start_async", v19 message];
          }
        }
        CFRelease(v19);
        a5 = v32;
        a2 = v31;
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_ranging_start_async(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, int, int *)", sub_100016E18((uint64_t)v16) message];
      }
    }
    CFRelease(v16);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

void sub_1000E6B08(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const void *a5)
{
  int v10 = sub_10005B8B8((uint64_t)a5);
  kdebug_trace();
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "Ranging request completed for \"%@\" (%d)", sub_100016E18((uint64_t)a5), a4 message];
  }
  sub_10005C728((uint64_t)a5, a1, a2, a3, a4);
  sub_10005B8C0((uint64_t)a5, v10 & 0xFFFFFFEF);
  if (a5 && (v10 & 0x10) != 0)
  {
    CFRelease(a5);
  }
}

uint64_t sub_1000E6C1C(unsigned int a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        sub_1000A1AE8(v8, a2);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_thermal_index(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E6CDC(unsigned int a1, _DWORD *a2)
{
  *a2 = 100;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_1000A1A60(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_thermal_index(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E6DA4(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, unsigned int a5, vm_offset_t *a6, mach_msg_type_number_t *a7, _DWORD *a8)
{
  CFTypeRef cf = 0;
  *a6 = 0;
  *a7 = 0;
  *a8 = -3900;
  uint64_t v16 = sub_10000E5D8();
  uint64_t v17 = sub_10000E504(a1, v16);
  if (!v17) {
    goto LABEL_18;
  }
  CFPropertyListRef v18 = v17;
  if (sub_10000E620((uint64_t)v17))
  {
    CFPropertyListRef v20 = sub_10000EA08(a2, a3);
    unsigned int v21 = a5;
    CFArrayRef v22 = v20;
    unsigned int v29 = v21;
    CFDictionaryRef v23 = (const __CFDictionary *)sub_10000EA08(a4, v21);
    CFDictionaryRef v24 = v23;
    if (v22 && v23)
    {
      CFIndex v28 = a4;
      int v25 = sub_10000E628((uint64_t)v18, v22);
      if (v25)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: received debug request: %@", "_wifi_device_debug_command", v24 message];
        }
        *a8 = sub_10011A4E8((uint64_t)v25, (uint64_t)v22, v24, (CFMutableDictionaryRef *)&cf);
        a4 = v28;
        if (cf) {
          sub_10000E45C(cf, a6, a7);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s: unable to find device manager for interface %@", "_wifi_device_debug_command", v22 message];
        }
        a4 = v28;
      }
    }
    else if (!v22)
    {
LABEL_14:
      a5 = v29;
      if (v24) {
        CFRelease(v24);
      }
      goto LABEL_16;
    }
    CFRelease(v22);
    goto LABEL_14;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_debug_command(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t *, mach_msg_type_number_t *, int *)", sub_100016E18((uint64_t)v18) message];
  }
LABEL_16:
  CFRelease(v18);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
LABEL_18:
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

uint64_t sub_1000E6FC8(unsigned int a1, UInt8 *a2, unsigned int a3, vm_offset_t *a4, mach_msg_type_number_t *a5)
{
  *a4 = 0;
  *a5 = 0;
  uint64_t v10 = sub_10000E5D8();
  CFMutableArrayRef v11 = sub_10000E504(a1, v10);
  if (v11)
  {
    CFPropertyListRef v12 = v11;
    if (sub_10000E620((uint64_t)v11))
    {
      CFPropertyListRef v14 = sub_10000EA08(a2, a3);
      if (v14)
      {
        uint64_t v15 = (void *)v14;
        uint64_t v16 = sub_10000E628((uint64_t)v12, v14);
        if (v16 && (uint64_t v17 = sub_100111170((uint64_t)v16, v15)) != 0)
        {
          CFPropertyListRef v18 = v17;
          sub_10000E45C(v17, a4, a5);
          CFRelease(v15);
          int v19 = v18;
        }
        else
        {
          int v19 = (__CFDictionary *)v15;
        }
        CFRelease(v19);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_copy_roam_stats(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v12) message];
      }
    }
    CFRelease(v12);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E70FC(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, unsigned int a5, _DWORD *a6)
{
  *a6 = -3900;
  uint64_t v12 = sub_10000E5D8();
  uint64_t v13 = sub_10000E504(a1, v12);
  if (v13)
  {
    CFPropertyListRef v14 = v13;
    if ((sub_10000E620((uint64_t)v13) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_set_trgdisc_params(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v14) message];
      }
LABEL_13:
      CFRelease(v14);
      goto LABEL_14;
    }
    CFPropertyListRef v16 = sub_10000EA08(a2, a3);
    CFDictionaryRef v17 = (const __CFDictionary *)sub_10000EA08(a4, a5);
    CFDictionaryRef v18 = v17;
    if (v16 && v17)
    {
      int v19 = sub_10000E628((uint64_t)v14, v16);
      if (v19)
      {
        *a6 = sub_10011C488((uint64_t)v19, v18);
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s: unable to find device manager for interface %@", "_wifi_device_set_trgdisc_params", v16 message];
        }
      }
    }
    else if (!v16)
    {
LABEL_11:
      if (v18) {
        CFRelease(v18);
      }
      goto LABEL_13;
    }
    CFRelease(v16);
    goto LABEL_11;
  }
LABEL_14:
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

uint64_t sub_1000E7288(unsigned int a1, UInt8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10000E5D8();
  char v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = sub_10005B6D8((uint64_t)v7);
    if (v9)
    {
      uint64_t v10 = v9;
      if (sub_10000E620((uint64_t)v8))
      {
        CFPropertyListRef v12 = sub_10000EA08(a2, a3);
        sub_10009F254(v10);
        if (v12) {
          CFRelease(v12);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_dump_logs(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
        }
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E7384(unsigned int a1, UInt8 *a2, CFIndex a3)
{
  uint64_t v6 = sub_10000E5D8();
  char v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        CFMutableArrayRef v11 = (const __SCPreferences *)v10;
        CFDictionaryRef v12 = sub_1000E7480(a2, a3);
        if (v12)
        {
          CFDictionaryRef v13 = v12;
          sub_1000A29C4(v11, v12);
          CFRelease(v13);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_add_policy(mach_port_t, vm_offset_t, mach_msg_type_number_t, int)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

CFDictionaryRef sub_1000E7480(UInt8 *a1, CFIndex length)
{
  CFDictionaryRef v2 = (const __CFDictionary *)sub_10000EA08(a1, length);
  CFDictionaryRef v3 = v2;
  if (v2 && (CFTypeID v4 = CFGetTypeID(v2), v4 == CFDictionaryGetTypeID()))
  {
    CFStringRef v5 = sub_100032B9C(kCFAllocatorDefault, v3);
    CFRelease(v3);
    CFDictionaryRef v3 = 0;
  }
  else
  {
    CFStringRef v5 = 0;
  }
  if (v5) {
    return (const __CFDictionary *)v5;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000E74F8(unsigned int a1, UInt8 *a2, CFIndex a3)
{
  uint64_t v6 = sub_10000E5D8();
  char v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        uint64_t v11 = v10;
        CFDictionaryRef v12 = sub_1000E7480(a2, a3);
        if (v12)
        {
          CFDictionaryRef v13 = v12;
          sub_1000A2BE0(v11, v12);
          CFRelease(v13);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_remove_policy(mach_port_t, vm_offset_t, mach_msg_type_number_t, int)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E75F4(unsigned int a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  char v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        CFArrayRef v11 = sub_1000A2DD4(v10);
        if (v11)
        {
          CFArrayRef v12 = v11;
          CFDictionaryRef v13 = sub_100033034(v11);
          if (v13)
          {
            CFPropertyListRef v14 = v13;
            sub_10000E45C(v13, a2, a3);
            CFRelease(v14);
          }
          CFRelease(v12);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_policies(mach_port_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000E76F4(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_1000995D0(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_is_restriction_policy_active(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E77B8(unsigned int a1, unsigned __int8 a2, UInt8 *a3, unsigned int a4)
{
  kdebug_trace();
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, "%s is called\n", "_wifi_manager_set_incar_state"];
  }
  uint64_t v9 = sub_10000E5D8();
  uint64_t v10 = sub_10000E504(a1, v9);
  if (v10)
  {
    CFArrayRef v11 = v10;
    if (sub_10000E620((uint64_t)v10))
    {
      uint64_t v13 = sub_10005B6D8((uint64_t)v11);
      if (v13)
      {
        uint64_t v14 = v13;
        CFPropertyListRef v15 = sub_10000EA08(a3, a4);
        sub_1000A1BC4(v14, a2, v15);
        if (v15) {
          CFRelease(v15);
        }
        goto LABEL_11;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: invalid manager\n" args:_wifi_manager_set_incar_state, v18];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_incar_state(mach_port_t, int, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v11) message];
      }
    }
LABEL_11:
    CFRelease(v11);
    goto LABEL_12;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: invalid client\n" args:_wifi_manager_set_incar_state];
  }
LABEL_12:
  sub_10000E9E4((vm_address_t)a3, a4);
  return 0;
}

uint64_t sub_1000E796C(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, unsigned int a5, vm_offset_t *a6, mach_msg_type_number_t *a7, _DWORD *a8)
{
  *a6 = 0;
  *a7 = 0;
  *a8 = 0;
  uint64_t v15 = sub_10000E5D8();
  CFPropertyListRef v16 = (__CFArray *)sub_10000E504(a1, v15);
  if (v16)
  {
    CFDictionaryRef v17 = v16;
    if ((sub_10000E620((uint64_t)v16) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_wowblacklist_command(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t *, mach_msg_type_number_t *, int *)", sub_100016E18((uint64_t)v17) message];
      }
LABEL_5:
LABEL_15:
      CFRelease(v17);
      goto LABEL_16;
    }
    CFPropertyListRef v19 = sub_10000EA08(a2, a3);
    if (!v19)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, "%s:interface is NULL!", "_wifi_device_wowblacklist_command", v29];
      }
      goto LABEL_5;
    }
    CFPropertyListRef v20 = v19;
    unsigned int v21 = sub_10000E628((uint64_t)v17, v19);
    int v30 = a4;
    if (v21)
    {
      uint64_t v22 = (uint64_t)v21;
      CFDictionaryRef v23 = (const __CFDictionary *)sub_10000EA08(a4, a5);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Calling WiFiDeviceManagerProcessWoWBlacklistCommands with request:%@", "_wifi_device_wowblacklist_command", v23 message];
      }
      int v25 = sub_10010919C(v22, v23);
      int v26 = v25;
      if (v25) {
        sub_10000E45C(v25, a6, a7);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: unable to find device manager for interface %@", "_wifi_device_wowblacklist_command", v20 message];
      }
      CFDictionaryRef v23 = 0;
      int v26 = 0;
    }
    CFRelease(v20);
    CFRelease(v17);
    if (v23) {
      CFRelease(v23);
    }
    CFDictionaryRef v17 = v26;
    a4 = v30;
    if (v26) {
      goto LABEL_15;
    }
  }
LABEL_16:
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

uint64_t sub_1000E7BA8(unsigned int a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  char v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        id v11 = sub_1000A3CB8(v10);
        if (v11)
        {
          CFArrayRef v12 = v11;
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s:Leech location requested by \"%@\"", "_wifi_manager_copy_leeched_location", sub_100016E18((uint64_t)v8) message];
          }
          sub_10000E45C(v12, a2, a3);
          CFRelease(v12);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_leeched_location(mach_port_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000E7CE0(unsigned int a1, UInt8 *a2, CFIndex a3, vm_offset_t *a4, mach_msg_type_number_t *a5)
{
  *a4 = 0;
  *a5 = 0;
  uint64_t v10 = sub_10000E5D8();
  id v11 = sub_10000E504(a1, v10);
  if (v11)
  {
    CFArrayRef v12 = v11;
    if (sub_10000E620((uint64_t)v11))
    {
      uint64_t v14 = sub_10005B6D8((uint64_t)v12);
      if (v14)
      {
        uint64_t v15 = v14;
        CFPropertyListRef v16 = sub_1000E1050(a2, a3);
        if (v16)
        {
          CFDictionaryRef v17 = v16;
          CFPropertyListRef v19 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            CFPropertyListRef v20 = sub_10001A43C(v17);
            [v19 WFLog:3, "%s:%@ requested by \"%@\"", "_wifi_manager_copy_geotags_for_network", v20, sub_100016E18((uint64_t)v12) message];
          }
          id v21 = sub_1000A37C4(v15, (uint64_t)v17);
          if (v21)
          {
            uint64_t v22 = v21;
            sub_10000E45C(v21, a4, a5);
            CFRelease(v22);
          }
          CFRelease(v17);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_geotags_for_network(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v12) message];
      }
    }
    CFRelease(v12);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E7E70(unsigned int a1, UInt8 *a2, CFIndex a3, double a4, double a5)
{
  if (a4 < -90.0 || a4 > 90.0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Invalid latitude value" arguments:_wifi_manager_set_geotag_for_network];
    }
    goto LABEL_21;
  }
  if (a5 < -180.0 || a5 > 180.0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: Invalid longitude value", "_wifi_manager_set_geotag_for_network"];
    }
LABEL_21:
    goto LABEL_16;
  }
  uint64_t v10 = sub_10000E5D8();
  id v11 = sub_10000E504(a1, v10);
  if (v11)
  {
    CFArrayRef v12 = v11;
    if (sub_10000E620((uint64_t)v11))
    {
      uint64_t v14 = sub_10005B6D8((uint64_t)v12);
      if (v14)
      {
        uint64_t v15 = v14;
        CFPropertyListRef v16 = sub_1000E1050(a2, a3);
        if (v16)
        {
          CFDictionaryRef v17 = v16;
          CFPropertyListRef v19 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            CFPropertyListRef v20 = sub_10001A43C(v17);
            [v19 WFLog:3, "%s:%@ requested by \"%@\"", "_wifi_manager_set_geotag_for_network", v20, sub_100016E18((uint64_t)v12) message];
          }
          sub_1000A38B4(v15, v17, a4, a5);
          CFRelease(v17);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_geotag_for_network(mach_port_t, vm_offset_t, mach_msg_type_number_t, double, double)", sub_100016E18((uint64_t)v12) message];
      }
    }
    CFRelease(v12);
  }
LABEL_16:
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E8094(unsigned int a1, int a2, vm_offset_t *a3, mach_msg_type_number_t *a4, double a5, double a6)
{
  *a3 = 0;
  *a4 = 0;
  if (a5 < -90.0 || a5 > 90.0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Invalid latitude value" arguments:_wifi_manager_copy_networks_at_location];
    }
    goto LABEL_24;
  }
  if (a6 < -180.0 || a6 > 180.0)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Invalid longitude value", "_wifi_manager_copy_networks_at_location")];
    }
LABEL_24:
    return 0;
  }
  uint64_t v12 = sub_10000E5D8();
  uint64_t v13 = sub_10000E504(a1, v12);
  if (v13)
  {
    uint64_t v14 = v13;
    if (sub_10000E620((uint64_t)v13))
    {
      uint64_t v17 = sub_10005B6D8((uint64_t)v14);
      if (v17)
      {
        uint64_t v18 = v17;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s:(%f,%f) requested by \"%@\"", "_wifi_manager_copy_networks_at_location", *(void *)&a5, *(void *)&a6, sub_100016E18((uint64_t)v14) message];
        }
        CFArrayRef v20 = (const __CFArray *)sub_1000A3A58(v18, a2 != 0, a5, a6);
        if (v20)
        {
          CFArrayRef v21 = v20;
          uint64_t v22 = sub_10005A3F4(v20);
          if (v22)
          {
            CFDictionaryRef v23 = v22;
            sub_10000E45C(v22, a3, a4);
            CFRelease(v23);
          }
          CFRelease(v14);
          CFArrayRef v16 = v21;
          goto LABEL_18;
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_networks_at_location(mach_port_t, double, double, int, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v14) message];
      }
    }
    CFArrayRef v16 = (const __CFArray *)v14;
LABEL_18:
    CFRelease(v16);
  }
  return 0;
}

uint64_t sub_1000E82CC(unsigned int a1, UInt8 *a2, CFIndex a3, vm_offset_t *a4, mach_msg_type_number_t *a5)
{
  *a4 = 0;
  *a5 = 0;
  uint64_t v10 = sub_10000E5D8();
  id v11 = sub_10000E504(a1, v10);
  if (v11)
  {
    uint64_t v12 = v11;
    if (sub_10000E620((uint64_t)v11))
    {
      uint64_t v14 = sub_10005B6D8((uint64_t)v12);
      if (v14)
      {
        uint64_t v15 = v14;
        CFArrayRef v16 = sub_1000E1050(a2, a3);
        if (v16)
        {
          uint64_t v17 = v16;
          CFPropertyListRef v19 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            CFArrayRef v20 = sub_10001A43C(v17);
            [v19 WFLog:3, "%s:%@ requested by \"%@\"", "_wifi_manager_copy_score_for_network", v20, sub_100016E18((uint64_t)v12) message];
          }
          id v21 = sub_1000A3BDC(v15, (uint64_t)v17);
          if (v21)
          {
            uint64_t v22 = v21;
            sub_10000E45C(v21, a4, a5);
            CFRelease(v22);
          }
          CFRelease(v17);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_score_for_network(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v12) message];
      }
    }
    CFRelease(v12);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000E845C(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, unsigned int a5, _DWORD *a6)
{
  value = 0;
  unsigned int valuePtr = 1024;
  *a6 = 0;
  uint64_t v12 = sub_10000E5D8();
  CFDictionaryRef v13 = (const __CFDictionary *)sub_10000E504(a1, v12);
  if (!v13) {
    goto LABEL_20;
  }
  CFDictionaryRef v14 = v13;
  if ((sub_10000E620((uint64_t)v13) & 1) == 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_soft_error_notification(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v14) message];
    }
    *a6 = 1;
    goto LABEL_6;
  }
  CFPropertyListRef v17 = sub_10000EA08(a2, a3);
  if (!v17)
  {
LABEL_6:
    CFDictionaryRef v16 = v14;
LABEL_19:
    CFRelease(v16);
    goto LABEL_20;
  }
  uint64_t v18 = v17;
  CFPropertyListRef v19 = sub_10000E628((uint64_t)v14, v17);
  if (v19)
  {
    uint64_t v20 = (uint64_t)v19;
    CFDictionaryRef v21 = (const __CFDictionary *)sub_10000EA08(a4, a5);
    if (CFDictionaryGetValueIfPresent(v21, @"APPLE80211KEY_SOFT_ERROR_EVENT_TYPE", (const void **)&value))
    {
      if (value)
      {
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr < 0x13)
        {
          sub_1001217CC(v20);
          goto LABEL_17;
        }
        CFDictionaryRef v23 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_16;
        }
        uint64_t v28 = valuePtr;
        CFDictionaryRef v24 = "%s: Invalid SoftError Event:%u";
      }
      else
      {
        CFDictionaryRef v23 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_16;
        }
        CFDictionaryRef v24 = "%s: SoftErrorEventNum is Null!";
      }
      uint64_t v25 = 3;
    }
    else
    {
      CFDictionaryRef v23 = (void *)qword_10027DD68;
      if (!qword_10027DD68)
      {
LABEL_16:
        goto LABEL_17;
      }
      CFDictionaryRef v24 = "%s: No APPLE80211KEY_SOFT_ERROR_EVENT_TYPE Key ";
      uint64_t v25 = 4;
    }
    [v23 WFLog:v25 message:v24 _wifi_device_soft_error_notification v28];
    goto LABEL_16;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s: unable to find device manager for interface %@", "_wifi_device_soft_error_notification", v18 message];
  }
  CFDictionaryRef v21 = 0;
LABEL_17:
  CFRelease(v18);
  CFRelease(v14);
  if (v21)
  {
    CFDictionaryRef v16 = v21;
    goto LABEL_19;
  }
LABEL_20:
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

uint64_t sub_1000E86D0(unsigned int a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  char v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        id v11 = sub_1000A409C(v10);
        if (v11)
        {
          uint64_t v12 = v11;
          sub_10000E45C(v11, a2, a3);
          CFRelease(v12);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_softerror_counters(mach_port_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000E87B4(unsigned int a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  char v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      CFArrayRef v10 = (const __CFArray *)sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        id v11 = sub_1000A4550(v10);
        if (v11)
        {
          uint64_t v12 = v11;
          CFDictionaryRef v13 = sub_10000E5B8((uint64_t)v11);
          if (v13)
          {
            CFDictionaryRef v14 = v13;
            sub_10000E45C(v13, a2, a3);
            CFRelease(v14);
          }
          CFRelease(v12);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_current_session_based_network(mach_port_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000E88B4(unsigned int a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Set user auto join enabled requested by \"%@\" enabled %d", sub_100016E18((uint64_t)v6), a2 message];
        }
        uint64_t v11 = sub_100016E18((uint64_t)v6);
        sub_100086500(v9, a2, 0, v11);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_user_auto_join_state(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E89D4(unsigned int a1, _DWORD *a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (!v8)
      {
LABEL_12:
        CFRelease(v6);
        return 0;
      }
      *a2 = sub_100004CF8(v8);
      uint64_t v9 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        uint64_t v10 = sub_100016E18((uint64_t)v6);
        if (*a2) {
          uint64_t v11 = "Enable";
        }
        else {
          uint64_t v11 = "Disable";
        }
        [v9 WFLog:3, "User auto join state queried by \"%@\" is %s", v10, v11 message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_user_auto_join_state(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    goto LABEL_12;
  }
  return 0;
}

uint64_t sub_1000E8AE4(unsigned int a1)
{
  uint64_t v2 = sub_10000E5D8();
  CFDictionaryRef v3 = sub_10000E504(a1, v2);
  if (v3)
  {
    uint64_t v4 = v3;
    if (sub_10000E620((uint64_t)v3))
    {
      uint64_t v6 = sub_10005B6D8((uint64_t)v4);
      if (v6)
      {
        uint64_t v7 = v6;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Orphaned SC sets removal requested by \"%@\"", sub_100016E18((uint64_t)v4) message];
        }
        sub_1000A4BD8(v7);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_remove_orphaned_sc_network_sets(mach_port_t)", sub_100016E18((uint64_t)v4) message];
      }
    }
    CFRelease(v4);
  }
  return 0;
}

uint64_t sub_1000E8BE4(unsigned int a1)
{
  uint64_t v2 = sub_10000E5D8();
  CFDictionaryRef v3 = sub_10000E504(a1, v2);
  if (v3)
  {
    uint64_t v4 = v3;
    if (sub_10000E620((uint64_t)v3))
    {
      uint64_t v6 = sub_10005B6D8((uint64_t)v4);
      if (v6)
      {
        uint64_t v7 = v6;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Migration of wifi plist requested by \"%@\"", sub_100016E18((uint64_t)v4) message];
        }
        sub_1000A5AD8(v7);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_migrate_list(mach_port_t)", sub_100016E18((uint64_t)v4) message];
      }
    }
    CFRelease(v4);
  }
  return 0;
}

uint64_t sub_1000E8CE4(unsigned int a1, double a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Unused geotags removal requested by \"%@\", with retention period %f secs", sub_100016E18((uint64_t)v6), *(void *)&a2 message];
        }
        sub_1000A3E5C(v9, a2);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_remove_unused_network_geotags(mach_port_t, double)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E8DF8(unsigned int a1, uint64_t a2, double a3)
{
  uint64_t v6 = sub_10000E5D8();
  uint64_t v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        uint64_t v11 = v10;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Schedule unused geotags removal at interval %d mins requested by \"%@\", with retention period %f secs", a2, sub_100016E18((uint64_t)v8), *(void *)&a3 message];
        }
        sub_1000A3F28(v11, (int)a2, a3);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_schedule_unused_network_geotags_removal_test(mach_port_t, double, int)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000E8F20(unsigned int a1)
{
  uint64_t v2 = sub_10000E5D8();
  CFDictionaryRef v3 = sub_10000E504(a1, v2);
  if (v3)
  {
    uint64_t v4 = v3;
    if (sub_10000E620((uint64_t)v3))
    {
      uint64_t v6 = sub_10005B6D8((uint64_t)v4);
      if (v6)
      {
        uint64_t v7 = v6;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Unschedule unused network geotags removal test requested by \"%@\"", sub_100016E18((uint64_t)v4) message];
        }
        sub_1000A4028(v7);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_unschedule_unused_network_geotags_removal_test(mach_port_t)", sub_100016E18((uint64_t)v4) message];
      }
    }
    CFRelease(v4);
  }
  return 0;
}

uint64_t sub_1000E9020(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, unsigned int a5, vm_offset_t *a6, mach_msg_type_number_t *a7)
{
  uint64_t v14 = sub_10000E5D8();
  CFDictionaryRef v15 = (const __CFDictionary *)sub_10000E504(a1, v14);
  if (!v15) {
    goto LABEL_19;
  }
  CFDictionaryRef v16 = v15;
  if ((sub_10000E620((uint64_t)v15) & 1) == 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_autojoinblacklist_command(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v16) message];
    }
LABEL_5:
LABEL_18:
    CFRelease(v16);
    goto LABEL_19;
  }
  CFPropertyListRef v18 = sub_10000EA08(a2, a3);
  if (!v18)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s:interface is NULL!", "_wifi_device_autojoinblacklist_command", v32];
    }
    goto LABEL_5;
  }
  CFPropertyListRef v19 = v18;
  uint64_t v20 = sub_10000E628((uint64_t)v16, v18);
  uint64_t v33 = a4;
  if (v20)
  {
    uint64_t v21 = (uint64_t)v20;
    CFDictionaryRef v22 = (const __CFDictionary *)sub_10000EA08(a4, a5);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Calling WiFiDeviceManagerProcessAutoJoinBlacklistCommandsAndCopyResponse with request:%@", "_wifi_device_autojoinblacklist_command", v22 message];
    }
    CFDictionaryRef v24 = sub_1001236E4(v21, v22);
    CFDictionaryRef v25 = v24;
    if (v24)
    {
      if (CFDictionaryContainsKey(v24, @"networks"))
      {
        if (CFDictionaryContainsKey(v25, @"reasons"))
        {
          CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v25, @"networks");
          int v27 = sub_10005A3F4(Value);
          if (v27)
          {
            uint64_t v28 = v27;
            CFDictionarySetValue(v25, @"networks", v27);
            CFRelease(v28);
            sub_10000E45C(v25, a6, a7);
            goto LABEL_15;
          }
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s - _WiFiCreateRecordsFromNetworks failed", "_wifi_device_autojoinblacklist_command")
          }
        }
        else
        {
          if (qword_10027DD68) {
            [qword_10027DD68 WFLog:message:3, "%s No blacklist reasons in response", "_wifi_device_autojoinblacklist_command"];
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s No blacklisted WiFiNetworkRef (records) in response" arguments:_wifi_device_autojoinblacklist_command];
        }
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: unable to find device manager for interface %@", "_wifi_device_autojoinblacklist_command", v19 message];
    }
    CFDictionaryRef v22 = 0;
    CFDictionaryRef v25 = 0;
  }
LABEL_15:
  CFRelease(v19);
  CFRelease(v16);
  if (v22) {
    CFRelease(v22);
  }
  CFDictionaryRef v16 = v25;
  a4 = v33;
  if (v25) {
    goto LABEL_18;
  }
LABEL_19:
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

uint64_t sub_1000E9350(unsigned int a1, UInt8 *a2, CFIndex a3, uint64_t a4, UInt8 *a5, unsigned int a6)
{
  uint64_t v12 = sub_10000E5D8();
  CFDictionaryRef v13 = sub_10000E504(a1, v12);
  if (v13)
  {
    uint64_t v14 = v13;
    if (sub_10000E620((uint64_t)v13))
    {
      uint64_t v16 = sub_10005B6D8((uint64_t)v14);
      if (v16)
      {
        CFArrayRef v17 = (const __CFArray *)v16;
        if (a2) {
          CFPropertyListRef v18 = sub_1000E1050(a2, a3);
        }
        else {
          CFPropertyListRef v18 = 0;
        }
        CFDictionaryRef v19 = (const __CFDictionary *)sub_10000EA08(a5, a6);
        sub_1000A65AC(v17, v18, a4, v19);
        if (v19) {
          CFRelease(v19);
        }
        if (v18) {
          CFRelease(v18);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_simulate_notification(mach_port_t, vm_offset_t, mach_msg_type_number_t, int, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v14) message];
      }
    }
    CFRelease(v14);
  }
  sub_10000E9E4((vm_address_t)a5, a6);
  return 0;
}

uint64_t sub_1000E9490(unsigned int a1, UInt8 *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v8 = sub_10000E5D8();
  uint64_t v9 = sub_10000E504(a1, v8);
  if (v9)
  {
    uint64_t v10 = v9;
    CFPropertyListRef v11 = sub_10000EA08(a2, a3);
    if (!v11)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s:interface is NULL!", "_wifi_device_destroy_eap_trust_current_network"];
      }
      uint64_t v12 = v10;
      goto LABEL_19;
    }
    uint64_t v12 = v11;
    if (sub_10000E620((uint64_t)v10))
    {
      CFDictionaryRef v15 = sub_10000E628((uint64_t)v10, v12);
      if (v15)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Destroy EAP trust exceptions sent by: \"%@\"", sub_100016E18((uint64_t)v10) message];
        }
        int v17 = sub_1001249CC((uint64_t)v15, v12);
        if (v17)
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Did destroy EAP trust exceptions for the current network.", "_wifi_device_destroy_eap_trust_current_network")];
          }
          *a4 = 0;
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s **Failed to destroy EAP trust exceptions for the current network.", "_wifi_device_destroy_eap_trust_current_network")];
          }
          *a4 = -3900;
        }
        goto LABEL_18;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: unable to find device manager for interface %@", "_wifi_device_destroy_eap_trust_current_network", v12 message];
      }
      uint64_t v14 = v16;
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_destroy_eap_trust_current_network(mach_port_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v10) message];
      }
      uint64_t v14 = v13;
    }
LABEL_18:
    CFRelease(v10);
LABEL_19:
    CFRelease(v12);
  }
  return 0;
}

uint64_t sub_1000E96B8(unsigned int a1)
{
  uint64_t v2 = sub_10000E5D8();
  CFDictionaryRef v3 = sub_10000E504(a1, v2);
  if (v3)
  {
    uint64_t v4 = v3;
    if (sub_10000E620((uint64_t)v3))
    {
      uint64_t v6 = sub_10005B6D8((uint64_t)v4);
      if (v6)
      {
        uint64_t v7 = v6;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Trigger gizmo/IDS sync engine to check for password changes \"%@\"", sub_100016E18((uint64_t)v4) message];
        }
        sub_1000A6F24(v7);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_tigger_gizmo_sync_password_check(mach_port_t)", sub_100016E18((uint64_t)v4) message];
      }
    }
    CFRelease(v4);
  }
  return 0;
}

uint64_t sub_1000E97B8(unsigned int a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  uint64_t v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if ((sub_10000E620((uint64_t)v7) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_ssid_most_used_geo_tagged_to_current_location(mach_port_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v8) message];
      }
LABEL_10:
      goto LABEL_11;
    }
    uint64_t v10 = sub_10005B6D8((uint64_t)v8);
    if (v10)
    {
      CFStringRef v11 = sub_1000A6F74(v10);
      if (!v11)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"Unable to copy SSID representing most used network that's geo tagged to current device location" v14, v15];
        }
        goto LABEL_10;
      }
      CFStringRef v12 = v11;
      sub_10000E45C(v11, a2, a3);
      CFRelease(v12);
    }
LABEL_11:
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000E98C0(unsigned int a1, _DWORD *a2)
{
  if (!a2) {
    return 0;
  }
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  if (sub_10000E620((uint64_t)v5))
  {
    uint64_t v9 = sub_10005B6D8((uint64_t)v6);
    uint64_t v8 = 0;
    if (v9) {
      *a2 = sub_1000A7484(v9);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_is_wpa3_personal_supported(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
    }
    uint64_t v8 = 2;
  }
  CFRelease(v6);
  return v8;
}

uint64_t sub_1000E99A0(unsigned int a1, _DWORD *a2)
{
  if (!a2) {
    return 0;
  }
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  if (sub_10000E620((uint64_t)v5))
  {
    uint64_t v9 = sub_10005B6D8((uint64_t)v6);
    uint64_t v8 = 0;
    if (v9) {
      *a2 = sub_1000A7524(v9);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_is_hotspot_wpa3_personal_supported(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
    }
    uint64_t v8 = 2;
  }
  CFRelease(v6);
  return v8;
}

uint64_t sub_1000E9A80(unsigned int a1, _DWORD *a2)
{
  if (!a2) {
    return 0;
  }
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  if (sub_10000E620((uint64_t)v5))
  {
    uint64_t v9 = sub_10005B6D8((uint64_t)v6);
    uint64_t v8 = 0;
    if (v9) {
      *a2 = sub_1000931D4(v9);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_is_managed_apple_id(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
    }
    uint64_t v8 = 2;
  }
  CFRelease(v6);
  return v8;
}

uint64_t sub_1000E9B60(unsigned int a1, _DWORD *a2)
{
  if (!a2) {
    return 0;
  }
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  if (sub_10000E620((uint64_t)v5))
  {
    uint64_t v9 = sub_10005B6D8((uint64_t)v6);
    uint64_t v8 = 0;
    if (v9) {
      *a2 = sub_1000A74D4(v9);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_is_wpa3_enterprise_supported(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
    }
    uint64_t v8 = 2;
  }
  CFRelease(v6);
  return v8;
}

uint64_t sub_1000E9C40(unsigned int a1, _DWORD *a2)
{
  if (!a2) {
    return 0;
  }
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  if (sub_10000E620((uint64_t)v5))
  {
    uint64_t v9 = sub_10005B6D8((uint64_t)v6);
    uint64_t v8 = 0;
    if (v9) {
      *a2 = sub_1000A7574(v9);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_is_mfp_capable_device(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
    }
    uint64_t v8 = 2;
  }
  CFRelease(v6);
  return v8;
}

uint64_t sub_1000E9D20(unsigned int a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = (_DWORD *)v8;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%@ requested auto instant hotspot mode %d", sub_100016E18((uint64_t)v6), a2 message];
        }
        sub_1000A7D80(v9, a2, 0);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_auto_instant_hotspot_mode(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E9E38(unsigned int a1, _DWORD *a2)
{
  *a2 = 1;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_1000A7E70(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_auto_instant_hotspot_mode(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000E9F00(unsigned int a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%@ requested Set Share My Personal Hotspot mode %d", sub_100016E18((uint64_t)v6), a2 message];
        }
        sub_1000A7E20(v9, a2, 0);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_share_personal_hotspot_mode(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000EA014(unsigned int a1, _DWORD *a2)
{
  *a2 = 1;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_1000A7F0C(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_share_personal_hotspot_mode(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000EA0DC(unsigned int a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%@ requested Set AutoInstant Hotspot Test Mode %d", sub_100016E18((uint64_t)v6), a2 message];
        }
        sub_1000A7FCC(v9, a2);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_auto_instant_hotspot_test_mode(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000EA1F0(unsigned int a1, double a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%@ requested auto instant hotspot trigger interval %f seconds ", sub_100016E18((uint64_t)v6), *(void *)&a2 message];
        }
        sub_1000A7FA8(v9, a2);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_auto_instant_hotspot_trigger_interval(mach_port_t, double)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000EA304(unsigned int a1, UInt8 *a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  *a5 = 0;
  uint64_t v10 = sub_10000E5D8();
  CFStringRef v11 = sub_10000E504(a1, v10);
  if (v11)
  {
    CFStringRef v12 = v11;
    if (sub_10000E620((uint64_t)v11))
    {
      uint64_t v14 = sub_10005B6D8((uint64_t)v12);
      if (v14)
      {
        uint64_t v15 = v14;
        CFPropertyListRef v16 = sub_10000EA08(a2, a3);
        if (v16)
        {
          int v17 = v16;
          if (sub_10000E628((uint64_t)v12, v16)) {
            *a5 = sub_1000A7ADC(v15, (uint64_t)v12, a4);
          }
          CFRelease(v17);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_get_event_interval(mach_port_t, vm_offset_t, mach_msg_type_number_t, int, int *)", sub_100016E18((uint64_t)v12) message];
      }
    }
    CFRelease(v12);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000EA42C(unsigned int a1, UInt8 *a2, unsigned int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  *a6 = -3900;
  uint64_t v11 = sub_10000E5D8();
  CFStringRef v12 = sub_10000E504(a1, v11);
  if (v12)
  {
    CFDictionaryRef v13 = v12;
    if (sub_10000E620((uint64_t)v12))
    {
      if (sub_10005B6D8((uint64_t)v13))
      {
        CFPropertyListRef v15 = sub_10000EA08(a2, a3);
        if (v15)
        {
          CFPropertyListRef v16 = v15;
          int v17 = sub_10000E628((uint64_t)v13, v15);
          if (a4 != 14 && v17)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:4, "%s ERROR: Unhandled event %llu", "kern_return_t _wifi_device_set_event_interval(mach_port_t, vm_offset_t, mach_msg_type_number_t, uint64_t, int, int *)", a4];
            }
          }
          CFRelease(v16);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_set_event_interval(mach_port_t, vm_offset_t, mach_msg_type_number_t, uint64_t, int, int *)", sub_100016E18((uint64_t)v13) message];
      }
      *a6 = 1;
    }
    CFRelease(v13);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000EA584(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_1000A7C34(v8, 1);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_is_infra_allowed(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000EA64C(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_1000A7C18(v8, 2);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_is_p2p_allowed(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000EA714(unsigned int a1, UInt8 *a2, CFIndex a3, UInt8 *a4, unsigned int a5, UInt8 *a6, unsigned int a7, _DWORD *a8)
{
  *a8 = 0;
  uint64_t v16 = sub_10000E5D8();
  int v17 = sub_10000E504(a1, v16);
  if (v17)
  {
    CFPropertyListRef v18 = v17;
    if (sub_10000E620((uint64_t)v17))
    {
      uint64_t v20 = sub_10005B6D8((uint64_t)v18);
      if (v20)
      {
        uint64_t v21 = v20;
        CFDictionaryRef v22 = sub_1000E1050(a2, a3);
        if (v22)
        {
          CFDictionaryRef v23 = v22;
          unsigned int v29 = a5;
          int v30 = a4;
          CFDictionaryRef v24 = (void *)sub_10000EA08(a4, a5);
          CFPropertyListRef v25 = sub_10000EA08(a6, a7);
          if (v24)
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "ManagerClient[\"%@\"] setNetworkProperty[\"%@\"] = %@", sub_100016E18((uint64_t)v18), v24, v25 message];
            }
            if (!sub_10009D66C(v21, v23, v24, v25))
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:4 message:"unable to set property"];
              }
            }
            CFRelease(v24);
          }
          if (v25) {
            CFRelease(v25);
          }
          CFRelease(v18);
          CFPropertyListRef v18 = v23;
          a4 = v30;
          a5 = v29;
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_network_property(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v18) message];
      }
      *a8 = 1;
    }
    CFRelease(v18);
  }
  sub_10000E9E4((vm_address_t)a4, a5);
  sub_10000E9E4((vm_address_t)a6, a7);
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000EA944(unsigned int a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  uint64_t v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = (void *)sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        uint64_t v11 = sub_1000A8320(v10);
        if (v11)
        {
          CFStringRef v12 = v11;
          sub_10000E45C(v11, a2, a3);
          CFRelease(v8);
          uint64_t v8 = v12;
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_family_hotspot_preferences(mach_port_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000EAA2C(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_10009201C(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_is_power_modification_disabled(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000EAAF0(unsigned int a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%@ requested builtInReceiver %d", sub_100016E18((uint64_t)v6), a2 message];
        }
        sub_1000A0F30(v9, a2);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_built_in_receiver(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000EAC00(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  CFStringRef v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_1000A9430(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_is_personal_hotspot_modification_disabled(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000EACC4(unsigned int a1, UInt8 *a2, unsigned int a3, vm_offset_t *a4, mach_msg_type_number_t *a5)
{
  *a4 = 0;
  *a5 = 0;
  uint64_t v10 = sub_10000E5D8();
  uint64_t v11 = sub_10000E504(a1, v10);
  if (v11)
  {
    CFStringRef v12 = v11;
    if ((sub_10000E620((uint64_t)v11) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_copy_network_recommendations(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v12) message];
      }
LABEL_11:
      CFRelease(v12);
      goto LABEL_12;
    }
    CFPropertyListRef v14 = sub_10000EA08(a2, a3);
    if (!v14) {
      goto LABEL_11;
    }
    CFPropertyListRef v15 = v14;
    uint64_t v16 = sub_10000E628((uint64_t)v12, v14);
    if (v16)
    {
      id v17 = sub_1001268F4((uint64_t)v16);
      id v18 = v17;
      if (v17) {
        sub_10000E45C(v17, a4, a5);
      }
    }
    else
    {
      id v18 = 0;
    }
    CFRelease(v15);
    CFRelease(v12);
    CFStringRef v12 = v18;
    if (v18) {
      goto LABEL_11;
    }
  }
LABEL_12:
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000EAE00(unsigned int a1, UInt8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10000E5D8();
  uint64_t v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      CFPropertyListRef v10 = sub_10000EA08(a2, a3);
      if (v10)
      {
        uint64_t v11 = v10;
        CFStringRef v12 = sub_10000E628((uint64_t)v8, v10);
        if (v12)
        {
          sub_100126DB4((uint64_t)v12);
          CFDictionaryRef v13 = (void *)sub_10005B6D8((uint64_t)v8);
          if (v13) {
            sub_1000A8664(v13);
          }
        }
        CFRelease(v11);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_reset_availability_engine(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000EAF04(unsigned int a1, UInt8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10000E5D8();
  uint64_t v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        CFNumberRef v11 = (const __CFNumber *)v10;
        CFDictionaryRef v12 = (const __CFDictionary *)sub_10000EA08(a2, a3);
        sub_1000AA778(v11, v12);
        if (v12) {
          CFRelease(v12);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_user_interaction_override(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000EB000(unsigned int a1, UInt8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10000E5D8();
  uint64_t v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        CFNumberRef v11 = (const __CFNumber *)v10;
        CFDictionaryRef v12 = (const __CFDictionary *)sub_10000EA08(a2, a3);
        sub_1000AA88C(v11, v12);
        if (v12) {
          CFRelease(v12);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_user_interaction_nw_override(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000EB0FC(unsigned int a1, UInt8 *a2, unsigned int a3, int a4, UInt8 *a5, unsigned int a6, _DWORD *a7)
{
  *a7 = 0;
  uint64_t v14 = sub_10000E5D8();
  CFPropertyListRef v15 = sub_10000E504(a1, v14);
  if (v15)
  {
    uint64_t v16 = v15;
    if ((sub_10000E620((uint64_t)v15) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_private_mac_pref(mach_port_t, vm_offset_t, mach_msg_type_number_t, int, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v16) message];
      }
      *a7 = 1;
      goto LABEL_6;
    }
    uint64_t v19 = sub_10005B6D8((uint64_t)v16);
    if (!v19 || (uint64_t v20 = v19, (v21 = (const __CFString *)sub_10000EA08(a2, a3)) == 0))
    {
LABEL_6:
      CFPropertyListRef v18 = v16;
LABEL_14:
      CFRelease(v18);
      goto LABEL_15;
    }
    CFStringRef v22 = v21;
    CFPropertyListRef v18 = sub_10000EA08(a5, a6);
    if (!sub_1000AA9CC(v20, v22, a4, v18))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4 message:"WFMacRandomisation : Unable to Set private mac preference"];
      }
    }
    CFRelease(v22);
    CFRelease(v16);
    if (v18) {
      goto LABEL_14;
    }
  }
LABEL_15:
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000EB280(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, unsigned int a5, vm_offset_t *a6, mach_msg_type_number_t *a7)
{
  uint64_t v14 = sub_10000E5D8();
  CFDictionaryRef v15 = (const __CFDictionary *)sub_10000E504(a1, v14);
  if (!v15) {
    goto LABEL_21;
  }
  CFDictionaryRef v16 = v15;
  if ((sub_10000E620((uint64_t)v15) & 1) == 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_bssblacklist_command(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v16) message];
    }
LABEL_5:
LABEL_20:
    CFRelease(v16);
    goto LABEL_21;
  }
  CFPropertyListRef v18 = sub_10000EA08(a2, a3);
  if (!v18)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s:interface is NULL!", "_wifi_device_bssblacklist_command", v32];
    }
    goto LABEL_5;
  }
  uint64_t v19 = v18;
  uint64_t v20 = sub_10000E628((uint64_t)v16, v18);
  uint64_t v33 = a4;
  if (v20)
  {
    uint64_t v21 = (uint64_t)v20;
    CFDictionaryRef v22 = (const __CFDictionary *)sub_10000EA08(a4, a5);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Calling WiFiDeviceManagerProcessBssBlacklistCommandsAndCopyResponse with request:%@", "_wifi_device_bssblacklist_command", v22 message];
    }
    CFDictionaryRef v24 = sub_100126EB8(v21, v22);
    CFDictionaryRef v25 = v24;
    if (v24)
    {
      if (CFDictionaryContainsKey(v24, @"networks"))
      {
        if (CFDictionaryContainsKey(v25, @"reasons"))
        {
          if (CFDictionaryContainsKey(v25, @"timestamps"))
          {
            if (CFDictionaryContainsKey(v25, @"reasonData"))
            {
              CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v25, @"networks");
              int v27 = sub_10005A3F4(Value);
              if (v27)
              {
                uint64_t v28 = v27;
                CFDictionarySetValue(v25, @"networks", v27);
                CFRelease(v28);
                sub_10000E45C(v25, a6, a7);
                goto LABEL_17;
              }
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s - _WiFiCreateRecordsFromNetworks failed", "_wifi_device_bssblacklist_command");
              }
            }
            else
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s No blacklist reasonData in response", "_wifi_device_bssblacklist_command");
              }
            }
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3, @"%s No blacklist timestamps in response", @"_wifi_device_bssblacklist_command"];
            }
          }
        }
        else
        {
          if (qword_10027DD68) {
            [qword_10027DD68 WFLog:3, "%s No blacklist reasons in response", "_wifi_device_bssblacklist_command"];
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s No blacklisted WiFiNetworkRef (records) in response", "_wifi_device_bssblacklist_command");
        }
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: unable to find device manager for interface %@", "_wifi_device_bssblacklist_command", v19 message];
    }
    CFDictionaryRef v22 = 0;
    CFDictionaryRef v25 = 0;
  }
LABEL_17:
  CFRelease(v19);
  CFRelease(v16);
  if (v22) {
    CFRelease(v22);
  }
  CFDictionaryRef v16 = v25;
  a4 = v33;
  if (v25) {
    goto LABEL_20;
  }
LABEL_21:
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a4, a5);
  return 0;
}

uint64_t sub_1000EB638(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, CFIndex a5)
{
  uint64_t v10 = sub_10000E5D8();
  CFNumberRef v11 = sub_10000E504(a1, v10);
  if (v11)
  {
    CFDictionaryRef v12 = v11;
    if ((sub_10000E620((uint64_t)v11) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_update_network_property(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v12) message];
      }
      goto LABEL_6;
    }
    uint64_t v15 = sub_10005B6D8((uint64_t)v12);
    if (!v15 || (uint64_t v16 = v15, (v17 = sub_1000E1050(a4, a5)) == 0))
    {
LABEL_6:
      CFPropertyListRef v14 = v12;
LABEL_14:
      CFRelease(v14);
      goto LABEL_15;
    }
    CFPropertyListRef v18 = v17;
    unsigned int v26 = a3;
    CFPropertyListRef v14 = sub_10000EA08(a2, a3);
    uint64_t v19 = sub_100016E18((uint64_t)v12);
    uint64_t v20 = sub_10000E628((uint64_t)v12, v14);
    if (v20)
    {
      uint64_t v21 = (uint64_t)v20;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Update network <%@>, requested by \"%@\"", sub_10001A43C(v18), v19 message];
      }
      sub_10009B1AC(v16, v18, 1u);
      unsigned int v23 = [sub_10001CECC((CFDictionaryRef *)v18) disable6EMode] == (id)2;
      CFDictionaryRef v24 = sub_10001A43C(v18);
      sub_100111BD0(v21, v14, v24, v23);
    }
    CFRelease(v18);
    CFRelease(v12);
    a3 = v26;
    if (v14) {
      goto LABEL_14;
    }
  }
LABEL_15:
  sub_10000E9E4((vm_address_t)a4, a5);
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000EB820(unsigned int a1, UInt8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10000E5D8();
  uint64_t v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = sub_10005B6D8((uint64_t)v7);
    if (v9)
    {
      uint64_t v10 = (_DWORD *)v9;
      if (sub_10000E620((uint64_t)v8))
      {
        CFDictionaryRef v12 = (const __CFDictionary *)sub_10000EA08(a2, a3);
        if (v12)
        {
          CFDictionaryRef v13 = v12;
          sub_1000A9854(v10, v12);
          CFRelease(v13);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_mac_randomisation_params(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
        }
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000EB91C(unsigned int a1, UInt8 *a2, CFIndex a3)
{
  uint64_t v6 = sub_10000E5D8();
  uint64_t v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        uint64_t v11 = v10;
        CFDictionaryRef v12 = sub_1000E1050(a2, a3);
        if (v12)
        {
          CFDictionaryRef v13 = v12;
          uint64_t v14 = sub_100016E18((uint64_t)v8);
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : Update Private Mac Network <%@>, requested by \"%@\"", sub_10001A43C(v13), v14 message];
          }
          sub_1000AC3CC(v11, v13);
          CFRelease(v13);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_update_privateMac_network(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000EBA6C(unsigned int a1, UInt8 *a2, CFIndex length, _DWORD *a4)
{
  unsigned int v5 = length;
  *a4 = 0;
  uint64_t v8 = sub_1000E1050(a2, length);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = sub_10000E5D8();
    uint64_t v11 = sub_10000E504(a1, v10);
    if (!v11)
    {
LABEL_14:
      CFRelease(v9);
      goto LABEL_15;
    }
    CFDictionaryRef v12 = v11;
    if (sub_10000E620((uint64_t)v11))
    {
      CFArrayRef v14 = (const __CFArray *)sub_10005B6D8((uint64_t)v12);
      if (!v14)
      {
LABEL_13:
        CFRelease(v12);
        goto LABEL_14;
      }
      *a4 = sub_1000AC700(v14, v9);
      uint64_t v15 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        uint64_t v16 = sub_100016E18((uint64_t)v12);
        if (*a4) {
          id v17 = "Required";
        }
        else {
          id v17 = "Not Required";
        }
        [v15 WFLog:3, "Determining if special (quick) probe required for network. Client :  \"%@\" Result %s", v16, v17 message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_private_mac_is_quick_probe_required(mach_port_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v12) message];
      }
    }
    goto LABEL_13;
  }
LABEL_15:
  sub_10000E9E4((vm_address_t)a2, v5);
  return 0;
}

uint64_t sub_1000EBBC4(unsigned int a1, uint64_t a2, UInt8 *a3, CFIndex a4)
{
  uint64_t v8 = sub_10000E5D8();
  uint64_t v9 = sub_10000E504(a1, v8);
  if (v9)
  {
    uint64_t v10 = v9;
    if (sub_10000E620((uint64_t)v9))
    {
      CFDictionaryRef v12 = sub_1000E1050(a3, a4);
      if (v12)
      {
        CFDictionaryRef v13 = v12;
        uint64_t v14 = sub_10005B6D8((uint64_t)v10);
        if (v14)
        {
          CFArrayRef v15 = (const __CFArray *)v14;
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%@ WFMacRandomisation : private MAC probe result <%d>", sub_100016E18((uint64_t)v10), a2 message];
          }
          sub_1000AC914(v15, v13, a2);
        }
        CFRelease(v10);
        uint64_t v10 = v13;
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_private_mac_probe_result(mach_port_t, int, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v10) message];
      }
    }
    CFRelease(v10);
  }
  sub_10000E9E4((vm_address_t)a3, a4);
  return 0;
}

uint64_t sub_1000EBD14(unsigned int a1, UInt8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10000E5D8();
  uint64_t v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = sub_10005B6D8((uint64_t)v7);
    if (v9)
    {
      uint64_t v10 = v9;
      if (sub_10000E620((uint64_t)v8))
      {
        CFPropertyListRef v12 = sub_10000EA08(a2, a3);
        if (v12)
        {
          CFDictionaryRef v13 = v12;
          sub_1000AC374(v10, (uint64_t)v12);
          CFRelease(v13);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_adaptive_roam_params(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
        }
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000EBE10(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  unsigned int v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_100091764(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_is_multi_band(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000EBED4(unsigned int a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = sub_10000E5D8();
  unsigned int v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = (void *)sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_1000917B4(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_hardware_failure(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000EBF98(unsigned int a1)
{
  uint64_t v2 = sub_10000E5D8();
  CFDictionaryRef v3 = sub_10000E504(a1, v2);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = sub_10005B6D8((uint64_t)v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if ((sub_10000E620((uint64_t)v4) & 1) == 0)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_reset_network_settings(mach_port_t)", sub_100016E18((uint64_t)v4) message];
        }
LABEL_10:
        goto LABEL_11;
      }
      if (!sub_10005D610((uint64_t)v4, @"com.apple.wifi.manager-access"))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s Client %@ is not entitled to reset network settings", "kern_return_t _wifi_manager_reset_network_settings(mach_port_t)", sub_100016E18((uint64_t)v4) message];
        }
        goto LABEL_10;
      }
      sub_1000ACD3C(v6);
    }
LABEL_11:
    CFRelease(v4);
  }
  return 0;
}

uint64_t sub_1000EC0A8(unsigned int a1)
{
  uint64_t v2 = sub_10000E5D8();
  CFDictionaryRef v3 = sub_10000E504(a1, v2);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = sub_10005B6D8((uint64_t)v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (sub_10000E620((uint64_t)v4))
      {
        sub_1000AD698(v6);
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_purge_expired_known_networks(mach_port_t)", sub_100016E18((uint64_t)v4) message];
        }
      }
    }
    CFRelease(v4);
  }
  return 0;
}

uint64_t sub_1000EC16C(unsigned int a1)
{
  uint64_t v2 = sub_10000E5D8();
  CFDictionaryRef v3 = sub_10000E504(a1, v2);
  if (v3)
  {
    uint64_t v4 = v3;
    char v5 = sub_10000E620((uint64_t)v3);
    if (v5)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Cleanup of log buffer files requested by \"%@\"", sub_100016E18((uint64_t)v4) message];
      }
      sub_10007C9CC();
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_cleanup_log_buffer_files(mach_port_t)", sub_100016E18((uint64_t)v4) message];
      }
    }
    CFRelease(v4);
  }
  return 0;
}

uint64_t sub_1000EC248(unsigned int a1, UInt8 *a2, unsigned int a3, unsigned int *a4)
{
  *a4 = 0;
  uint64_t v8 = sub_10000E5D8();
  uint64_t v9 = sub_10000E504(a1, v8);
  if (v9)
  {
    uint64_t v10 = v9;
    if (sub_10000E620((uint64_t)v9))
    {
      CFPropertyListRef v12 = sub_10000EA08(a2, a3);
      if (v12)
      {
        CFDictionaryRef v13 = v12;
        if (sub_10000E628((uint64_t)v10, v12)) {
          *a4 = sub_1000170CC() >> 24;
        }
        CFRelease(v13);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_get_app_state(mach_port_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v10) message];
      }
    }
    CFRelease(v10);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000EC34C(unsigned int a1, int a2)
{
  uint64_t v4 = sub_10000E5D8();
  char v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_10027DD68)
        {
          uint64_t v11 = "on-to";
          if (!a2) {
            uint64_t v11 = "out-of";
          }
          [((id)qword_10027DD68) WFLog:message:3, "%s: WiFiCall handover notification: call moved %s WiFi", "kern_return_t _wifi_manager_wificall_handover_notification(mach_port_t, int)", v11];
        }
        if (a2) {
          sub_10009F064(v9);
        }
        else {
          sub_10009F15C(v9);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_wificall_handover_notification(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000EC470(unsigned int a1, UInt8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10000E5D8();
  uint64_t v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      CFPropertyListRef v10 = sub_10000EA08(a2, a3);
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = sub_10005B6D8((uint64_t)v8);
        if (v12) {
          sub_10008E218(v12, v11, 0);
        }
        CFRelease(v11);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_insert_missing_network_service(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000EC568(unsigned int a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = sub_10000E5D8();
  uint64_t v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      uint64_t v10 = sub_10005B6D8((uint64_t)v8);
      if (v10)
      {
        CFArrayRef v11 = (const __CFArray *)v10;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: requested by \"%@\"", "_wifi_manager_copy_movement_states", sub_100016E18((uint64_t)v8) message];
        }
        CFArrayRef v13 = sub_1000ADA84(v11);
        if (v13)
        {
          CFArrayRef v14 = v13;
          sub_10000E45C(v13, a2, a3);
          CFRelease(v14);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_copy_movement_states(mach_port_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  return 0;
}

uint64_t sub_1000EC6A4(unsigned int a1, UInt8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10000E5D8();
  uint64_t v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10000E620((uint64_t)v7))
    {
      if (sub_10005B6D8((uint64_t)v8))
      {
        CFPropertyListRef v10 = sub_10000EA08(a2, a3);
        if (v10) {
          CFRelease(v10);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_simulated_movement_states(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000EC788(unsigned int a1, int a2)
{
  uint64_t v4 = sub_10000E5D8();
  char v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_10027DD68)
        {
          if (a2) {
            CFArrayRef v11 = "ON";
          }
          else {
            CFArrayRef v11 = "OFF";
          }
          [(id)qword_10027DD68 WFLog:3, "Manager low power mode %s requested by \"%@\"", v11, sub_100016E18((uint64_t)v6) message];
        }
        sub_100016E18((uint64_t)v6);
        sub_1000ADAC8(v9, a2);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_set_battery_save_mode(mach_port_t, int)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000EC8BC(unsigned int a1, _DWORD *a2)
{
  uint64_t v4 = sub_10000E5D8();
  char v5 = sub_10000E504(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10000E620((uint64_t)v5))
    {
      uint64_t v8 = sub_10005B6D8((uint64_t)v6);
      if (v8) {
        *a2 = sub_1000ADC30(v8);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_get_battery_save_mode(mach_port_t, int *)", sub_100016E18((uint64_t)v6) message];
      }
    }
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_1000EC97C(unsigned int a1, UInt8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10000E5D8();
  uint64_t v7 = sub_10000E504(a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = sub_10005B6D8((uint64_t)v7);
    if (v9)
    {
      uint64_t v10 = v9;
      if (sub_10000E620((uint64_t)v8))
      {
        CFPropertyListRef v12 = sub_10000EA08(a2, a3);
        if (v12)
        {
          CFArrayRef v13 = v12;
          sub_1000ADF08(v10, (uint64_t)v12);
          CFRelease(v13);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_manager_initiate_network_transition(mach_port_t, vm_offset_t, mach_msg_type_number_t)", sub_100016E18((uint64_t)v8) message];
        }
      }
    }
    CFRelease(v8);
  }
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

uint64_t sub_1000ECA78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    unsigned int v3 = sub_10005B6C8(v2);
    sub_1000C22D8(v3);
    uint64_t v2 = *(void *)(a1 + 32);
  }

  return sub_1000C2138(v2);
}

uint64_t sub_1000ECAC0(unsigned int a1)
{
  if (a1 < 3) {
    return a1 + 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000ECAD0(uint64_t a1)
{
  if (a1 == 3) {
    return 2;
  }
  else {
    return a1 == 2;
  }
}

uint64_t sub_1000ECAE8(int a1)
{
  if (a1 == 1) {
    return 1;
  }
  else {
    return 2;
  }
}

BOOL sub_1000ECAF8(uint64_t a1)
{
  return a1 == 1;
}

uint64_t sub_1000ECB04(unsigned int a1)
{
  if (a1 < 3) {
    return a1 + 1;
  }
  else {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
}

uint64_t sub_1000ECB18(int a1)
{
  if ((a1 - 1) > 8) {
    return 0;
  }
  else {
    return qword_1001CB810[a1 - 1];
  }
}

uint64_t sub_1000ED1DC()
{
  kern_return_t v0;
  kern_return_t v1;
  void *v2;

  if (!qword_10027D798)
  {
    qword_10027D798 = _CFRuntimeRegisterClass();
    if (!qword_10027D798) {
      sub_100196D1C();
    }
    uint64_t v0 = IOMasterPort(0, dword_10027D7A0);
    if (v0)
    {
      uint64_t v1 = v0;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, "%s: can't get mach master port: %ld\n", "__WiFiDeviceManagerRegister", v1];
      }
    }
  }
  return qword_10027D798;
}

uint64_t sub_1000ED288(uint64_t a1, const void *a2, NSObject *a3)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: entering", "WiFiDeviceManagerCreate")];
  }
  if (!a2) {
    goto LABEL_122;
  }
  sub_1000ED1DC();
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    goto LABEL_122;
  }
  uint64_t v8 = Instance;
  bzero((void *)(Instance + 16), 0x2368uLL);
  CFRetain(a2);
  *(void *)(v8 + 64) = a2;
  *(void *)(v8 + 5600) = +[WiFiLocationManager sharedWiFiLocationManager];
  uint64_t v9 = sub_10016C234();
  *(void *)(v8 + 96) = v9;
  if (!v9) {
    goto LABEL_121;
  }
  *(_DWORD *)(v8 + 108) = 0;
  *(unsigned char *)(v8 + 104) = 0;
  uint64_t v10 = sub_100035238((uint64_t)kCFAllocatorDefault, (uint64_t)a2, a3);
  *(void *)(v8 + 120) = v10;
  if (!v10) {
    goto LABEL_121;
  }
  if (+[WiFiAIRAgent sharedInstance]) {
    [+[WiFiAIRAgent sharedInstance] setWiFiManagerQueue:a3];
  }
  CFArrayRef v11 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v8 + 312) = v11;
  if (!v11)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: failed to create retry.timer", "WiFiDeviceManagerCreate"];
    }
    goto LABEL_120;
  }
  dispatch_set_context(v11, (void *)v8);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 312), (dispatch_function_t)sub_1000EED50);
  CFPropertyListRef v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v8 + 360) = v12;
  if (!v12)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: failed to create autoJoinDeferral.timer" : @"WiFiDeviceManagerCreate"];
    }
    goto LABEL_120;
  }
  dispatch_set_context(v12, (void *)v8);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 360), (dispatch_function_t)sub_1000EEF58);
  CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v8 + 3504) = Mutable;
  if (!Mutable) {
    goto LABEL_121;
  }
  CFMutableArrayRef v14 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 3536) = v14;
  if (!v14) {
    goto LABEL_121;
  }
  CFMutableArrayRef v15 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 3528) = v15;
  if (!v15) {
    goto LABEL_121;
  }
  CFMutableArrayRef v16 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 3552) = v16;
  if (!v16) {
    goto LABEL_121;
  }
  CFMutableArrayRef v17 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 3544) = v17;
  if (!v17) {
    goto LABEL_121;
  }
  CFMutableArrayRef v18 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 3576) = v18;
  if (!v18) {
    goto LABEL_121;
  }
  CFMutableArrayRef v19 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 3568) = v19;
  if (!v19) {
    goto LABEL_121;
  }
  CFMutableArrayRef v20 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 3560) = v20;
  if (!v20) {
    goto LABEL_121;
  }
  uint64_t v21 = [[WiFiTimeDeferredNetworksAJManager alloc] initWithArgs:v8];
  *(void *)(v8 + 3656) = v21;
  [(WiFiTimeDeferredNetworksAJManager *)v21 setDeferIntervalSecs:60.0];
  [*(id *)(v8 + 3656) setNumDaysSinceAssocOverrideDeferral:2];
  CFMutableArrayRef v22 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 3328) = v22;
  if (!v22) {
    goto LABEL_121;
  }
  *(void *)(v8 + 3336) = 0;
  CFMutableArrayRef v23 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 3624) = v23;
  if (!v23) {
    goto LABEL_121;
  }
  CFMutableArrayRef v24 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 3632) = v24;
  if (!v24) {
    goto LABEL_121;
  }
  CFMutableArrayRef v25 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 3584) = v25;
  if (!v25) {
    goto LABEL_121;
  }
  CFMutableArrayRef v26 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 3592) = v26;
  if (!v26) {
    goto LABEL_121;
  }
  CFMutableArrayRef v27 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 3640) = v27;
  if (!v27) {
    goto LABEL_121;
  }
  CFMutableArrayRef v28 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 3288) = v28;
  if (!v28) {
    goto LABEL_121;
  }
  CFMutableSetRef v29 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v8 + 3320) = v29;
  if (!v29) {
    goto LABEL_121;
  }
  CFMutableArrayRef v30 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 1104) = v30;
  if (!v30) {
    goto LABEL_121;
  }
  CFMutableArrayRef v31 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 272) = v31;
  if (!v31) {
    goto LABEL_121;
  }
  uint64_t v32 = sub_1000EF03C((char *)dword_10027CD24, 3);
  *(void *)(v8 + 5368) = v32;
  if (!v32) {
    goto LABEL_121;
  }
  uint64_t v33 = sub_1000EF03C((char *)dword_10027CD30, 2);
  *(void *)(v8 + 5376) = v33;
  if (!v33) {
    goto LABEL_121;
  }
  CFMutableSetRef v34 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v8 + 3600) = v34;
  if (!v34) {
    goto LABEL_121;
  }
  CFMutableSetRef v35 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v8 + 3608) = v35;
  if (!v35) {
    goto LABEL_121;
  }
  CFMutableArrayRef v36 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 376) = v36;
  if (!v36) {
    goto LABEL_121;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(kCFAllocatorDefault, @"Preferences SpringBoard Carousel WiFiPickerExtens Setup budd sharingd demod BundledIntentHandler SiriViewService assistantd assistant_service Siri SettingsIntentExtension NanoSettings PineBoard TVSettings SoundBoard RealityControlCenter MuseBuddyApp mobilewifitool WirelessStress coreautomationd wifiutil NanoWiFiViewService ATKWiFiFramework WiFiViewService hQT XCTestInternalAngel HPSetup AirPlaySenderUIApp TVSetup deviceaccessd AccessorySetupUI", @" ");
  *(void *)(v8 + 4936) = ArrayBySeparatingStrings;
  if (!ArrayBySeparatingStrings) {
    goto LABEL_121;
  }
  *(unsigned char *)(v8 + 3488) = 1;
  *(_DWORD *)(v8 + 3492) = 0;
  sub_10006B1A4((uint64_t)a2, (uint64_t)sub_1000EF0E8, v8);
  sub_10006B1B0((uint64_t)a2, (uint64_t)sub_1000EF0E8, v8);
  sub_10006B0FC((uint64_t)a2, (uint64_t)sub_1000EF9F4, v8);
  sub_10006B108((uint64_t)a2, (uint64_t)sub_1000EFBFC, v8);
  sub_10006B114((uint64_t)a2, (uint64_t)sub_1000F19F8, v8);
  sub_10006B12C((uint64_t)a2, (uint64_t)sub_1000F1A18, v8);
  sub_10006B120((uint64_t)a2, (uint64_t)sub_1000F1C00, v8);
  sub_10006B15C((uint64_t)a2, (uint64_t)sub_1000F1EC4, v8);
  sub_10006B168((uint64_t)a2, (uint64_t)sub_1000F2484, v8);
  sub_10006B174((uint64_t)a2, (uint64_t)sub_1000F257C, v8);
  sub_10006B180((uint64_t)a2, (uint64_t)sub_1000F29FC, v8);
  sub_10006B18C((uint64_t)a2, (uint64_t)sub_1000F2BB8, v8);
  sub_10006B198((uint64_t)a2, (uint64_t)sub_1000F2C64, v8);
  sub_10006B1BC((uint64_t)a2, (uint64_t)sub_1000F2E18, v8);
  sub_10006B1F8((uint64_t)a2, (uint64_t)sub_1000F3178, v8);
  sub_10006B1E0((uint64_t)a2, (uint64_t)sub_1000F3300, v8);
  sub_10006B1EC((uint64_t)a2, (uint64_t)sub_1000F36A4, v8);
  sub_10006B138((uint64_t)a2, (uint64_t)sub_1000F3BB0, v8);
  sub_10006B204((uint64_t)a2, (uint64_t)sub_1000F3F14, v8);
  sub_10006B210((uint64_t)a2, (uint64_t)sub_1000F3F34, v8);
  sub_10006B21C((uint64_t)a2, (uint64_t)sub_10000EB48, v8);
  sub_10006B228((uint64_t)a2, (uint64_t)sub_100023BD8, v8);
  sub_10006B234((uint64_t)a2, (uint64_t)sub_1000F3F54, v8);
  sub_10006B240((uint64_t)a2, (uint64_t)sub_1000F3F74, v8);
  sub_10006B24C((uint64_t)a2, (uint64_t)sub_1000F444C, v8);
  sub_10006B258((uint64_t)a2, (uint64_t)sub_1000F446C, v8);
  sub_10006B270((uint64_t)a2, (uint64_t)sub_100005518, v8);
  sub_10006B27C((uint64_t)a2, (uint64_t)sub_1000F448C, v8);
  sub_10006B264((uint64_t)a2, (uint64_t)sub_100023BF8, v8);
  v87[0] = _NSConcreteStackBlock;
  v87[1] = 3221225472;
  v87[2] = sub_1000F455C;
  v87[3] = &unk_100241478;
  v87[4] = v8;
  [+[WiFiUsageMonitor sharedInstance] setFaultEventHandler:v87];
  sub_10006B288((uint64_t)a2, (uint64_t)sub_1000F4778, v8);
  sub_10006B0F0((uint64_t)a2, (uint64_t)sub_1000F4A84, v8);
  sub_10006B1C8((uint64_t)a2, (uint64_t)sub_1000F4AA4, v8);
  sub_10006B1D4((uint64_t)a2, (uint64_t)sub_1000F4AC4, v8);
  sub_10006B294((uint64_t)a2, (uint64_t)sub_1000F4AE4, v8);
  sub_10006B2A0((uint64_t)a2, (uint64_t)sub_1000F4E2C, v8);
  sub_10006B2AC((uint64_t)a2, (uint64_t)sub_1000F5E28, v8);
  sub_100037D30(*(void *)(v8 + 120), (uint64_t)sub_1000F5E3C, v8);
  sub_100037E74(*(void *)(v8 + 120), (uint64_t)sub_1000F60EC, v8);
  sub_100037F30(*(void *)(v8 + 120), (uint64_t)sub_1000F60F4, v8);
  sub_10006B2B8((uint64_t)a2, (uint64_t)sub_1000F6358, v8);
  sub_10006B2C4((uint64_t)a2, (uint64_t)sub_1000F6530, v8);
  sub_10006B2D0((uint64_t)a2, (uint64_t)sub_1000F66EC, v8);
  sub_10006B2DC((uint64_t)a2, (uint64_t)sub_1000F670C, v8);
  sub_10006B2E8((uint64_t)a2, (uint64_t)sub_1000F67DC, v8);
  sub_10006B2F4((uint64_t)a2, (uint64_t)sub_1000F68EC, v8);
  sub_10006B300((uint64_t)a2, (uint64_t)sub_1000F6EF8, v8);
  sub_10006B30C((uint64_t)a2, (uint64_t)sub_1000F7538, v8);
  sub_10006B318((uint64_t)a2, (uint64_t)sub_1000F75FC, v8);
  sub_10006B324((uint64_t)a2, (uint64_t)sub_1000F76DC, v8);
  sub_10006B370((uint64_t)a2, (uint64_t)sub_1000F76F8, v8);
  sub_10006B144((uint64_t)a2, (uint64_t)sub_1000F7860, v8);
  sub_10006B150((uint64_t)a2, (uint64_t)sub_1000F7B60, v8);
  sub_10006B37C((uint64_t)a2, (uint64_t)sub_1000F7BD0, v8);
  sub_10006B388((uint64_t)a2, (uint64_t)sub_1000F7F88, v8);
  sub_10006B394((uint64_t)a2, (uint64_t)sub_1000F806C, v8);
  sub_10006B3A0((uint64_t)a2, (uint64_t)sub_1000F8394, v8);
  sub_10006B3AC((uint64_t)a2, (uint64_t)sub_1000F8A0C, v8);
  sub_10006B3B8((uint64_t)a2, (uint64_t)sub_1000F8A18, v8);
  sub_10006B3C4((uint64_t)a2, (uint64_t)sub_1000F8A40, v8);
  sub_10006B3E8((uint64_t)a2, (uint64_t)sub_1000F8C80, v8);
  sub_10006B3D0((uint64_t)a2, (uint64_t)sub_1000F8DD0, v8);
  sub_10006B3DC((uint64_t)a2, (uint64_t)sub_1000F90D0, v8);
  sub_10006B3F4((uint64_t)a2, (uint64_t)sub_1000F9148, v8);
  sub_10006B418((uint64_t)a2, (uint64_t)sub_1000F9318, v8);
  sub_10006B430((uint64_t)a2, (uint64_t)sub_1000F9338, v8);
  sub_10006B424((uint64_t)a2, (uint64_t)sub_1000F9358, v8);
  sub_10006B448((uint64_t)a2, (uint64_t)sub_1000F938C, v8);
  sub_10006B460((uint64_t)a2, (uint64_t)sub_1000F93A8, v8);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, (const void *)v8, (CFNotificationCallback)sub_1000F9694, @"com.apple.wifid.wifiroammanagerroamnotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  sub_10006B43C((uint64_t)a2, (uint64_t)sub_1000F9A30, v8);
  sub_10006B454((uint64_t)a2, (uint64_t)sub_1000F9ABC, v8);
  CFNotificationCenterAddObserver(LocalCenter, (const void *)v8, (CFNotificationCallback)sub_1000F9AD0, @"WiFiChipResetRequested", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  *(void *)(v8 + 4944) = 0;
  *(_WORD *)(v8 + 5360) = 0;
  *(unsigned char *)(v8 + 5362) = 0;
  *(void *)(v8 + 5448) = 0;
  *(_DWORD *)(v8 + 5455) = 0;
  *(CFAbsoluteTime *)(v8 + 5248) = CFAbsoluteTimeGetCurrent() + 315360000.0;
  CFTypeRef v39 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v8 + 5240) = v39;
  if (!v39)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: failed to create mis.misIdleTimer" arguments:("WiFiDeviceManagerCreate", nil)];
    }
    goto LABEL_120;
  }
  dispatch_set_context(v39, (void *)v8);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 5240), (dispatch_function_t)sub_1000F9B6C);
  *(_DWORD *)(v8 + 5232) = 0;
  *(void *)(v8 + 6784) = 0x4072C00000000000;
  unsigned int v40 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v8 + 5320) = v40;
  if (!v40)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, "%s: Error: failed to create mis.misBroadcastToHiddenTimer", "WiFiDeviceManagerCreate"];
    }
    goto LABEL_120;
  }
  dispatch_set_context(v40, (void *)v8);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 5320), (dispatch_function_t)sub_1000F9F4C);
  int v41 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v8 + 5512) = v41;
  if (!v41)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: failed to create priorityLinkSetupPhase.timer" : @"WiFiDeviceManagerCreate"];
    }
    goto LABEL_120;
  }
  dispatch_set_context(v41, (void *)v8);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 5512), (dispatch_function_t)sub_1000FA004);
  *(_DWORD *)(v8 + 5520) = 0;
  CFStringRef v42 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v8 + 8592) = v42;
  if (!v42)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: Error: failed to create _24GHzInfraNetworkData.timer", @"WiFiDeviceManagerCreate"];
    }
    goto LABEL_120;
  }
  dispatch_set_context(v42, (void *)v8);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 8592), (dispatch_function_t)sub_1000FA070);
  id v43 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v8 + 8632) = v43;
  if (!v43)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: failed to create carPlayHidEventCtx.timer", "WiFiDeviceManagerCreate")];
    }
    goto LABEL_120;
  }
  dispatch_set_context(v43, (void *)v8);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 8632), (dispatch_function_t)sub_1000FA0E8);
  unsigned int v44 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v8 + 1000) = v44;
  if (!v44)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: failed to create carPlayLinkDownCtx.timer"];
    }
    goto LABEL_120;
  }
  dispatch_set_context(v44, (void *)v8);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 1000), (dispatch_function_t)sub_1000FA160);
  unsigned int v45 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v8 + 1056) = v45;
  if (!v45)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: failed to create carPlayLpcStats.timer" : @"WiFiDeviceManagerCreate"];
    }
    goto LABEL_120;
  }
  dispatch_set_context(v45, (void *)v8);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 1056), (dispatch_function_t)sub_1000FA1EC);
  unsigned int v46 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v8 + 5528) = v46;
  if (!v46)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: failed to create assocStateMonitor.timer", "WiFiDeviceManagerCreate")];
    }
    goto LABEL_120;
  }
  dispatch_set_context(v46, (void *)v8);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 5528), (dispatch_function_t)sub_1000FA874);
  *(void *)(v8 + 5544) = 0;
  *(void *)(v8 + 5536) = 0;
  *(unsigned char *)(v8 + 5552) = 0;
  CFUUIDRef v47 = CFUUIDCreate(kCFAllocatorDefault);
  if (v47)
  {
    CFUUIDRef v48 = v47;
    *(void *)(v8 + 5488) = CFUUIDCreateString(kCFAllocatorDefault, v47);
    CFRelease(v48);
  }
  *(void *)(v8 + 3296) = 0;
  *(_OWORD *)(v8 + 5576) = 0u;
  *(_WORD *)(v8 + 5608) = 1;
  *(unsigned char *)(v8 + 34) = 0;
  *(_DWORD *)(v8 + 6208) = 0;
  *(unsigned char *)(v8 + 6216) = 0;
  *(_WORD *)(v8 + 36) = 257;
  *(unsigned char *)(v8 + 6184) = 0;
  bzero((void *)(v8 + 5616), 0x238uLL);
  *(unsigned char *)(v8 + 38) = 1;
  *(void *)(v8 + 6160) = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 6056) = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v8 + 6064) = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v8 + 1168) = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableDictionaryRef v49 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)(v8 + 3680) = v49;
  if (!v49) {
    goto LABEL_121;
  }
  CFMutableSetRef v50 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v8 + 5272) = v50;
  if (!v50) {
    goto LABEL_121;
  }
  CFMutableSetRef v51 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v8 + 5280) = v51;
  if (!v51) {
    goto LABEL_121;
  }
  CFMutableSetRef v52 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v8 + 5288) = v52;
  if (!v52) {
    goto LABEL_121;
  }
  CFMutableSetRef v53 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v8 + 5296) = v53;
  if (!v53) {
    goto LABEL_121;
  }
  CFMutableSetRef v54 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v8 + 5304) = v54;
  if (!v54) {
    goto LABEL_121;
  }
  CFMutableSetRef v55 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v8 + 5312) = v55;
  if (!v55) {
    goto LABEL_121;
  }
  *(void *)(v8 + 6448) = 0;
  *(_OWORD *)(v8 + 6432) = 0u;
  *(_OWORD *)(v8 + 6416) = 0u;
  *(_OWORD *)(v8 + 6400) = 0u;
  *(_OWORD *)(v8 + 6384) = 0u;
  *(_OWORD *)(v8 + 6368) = 0u;
  *(_OWORD *)(v8 + 6352) = 0u;
  *(_OWORD *)(v8 + 6336) = 0u;
  *(_OWORD *)(v8 + 6320) = 0u;
  *(_OWORD *)(v8 + 6304) = 0u;
  *(_OWORD *)(v8 + 6288) = 0u;
  if (_os_feature_enabled_impl())
  {
    sub_100016E20(*(void *)(v8 + 64));
    id v56 = [objc_alloc((Class)CWFNetworkDenyList) initWithDenyListDeviceProfile:1];
    [v56 setEnabled:1];
    v90[0] = _NSConcreteStackBlock;
    v90[1] = 3221225472;
    v90[2] = sub_100130360;
    v90[3] = &unk_100241828;
    v90[4] = v8;
    [v56 setBatteryInfoHandler:v90];
    v89[0] = _NSConcreteStackBlock;
    v89[1] = 3221225472;
    v89[2] = sub_100130468;
    v89[3] = &unk_100241848;
    v89[4] = v8;
    [v56 setIsUserModeInteractiveHandler:v89];
    v88[0] = _NSConcreteStackBlock;
    v88[1] = 3221225472;
    void v88[2] = sub_100130494;
    v88[3] = &unk_100241868;
    v88[4] = v8;
    [v56 setDenyListDidUpdateHandler:v88];
    *(void *)(v8 + 6648) = v56;
    if (!v56) {
      goto LABEL_121;
    }
  }
  else
  {
    CFStringRef v57 = [[WiFiNetworkDenyListManager alloc] initWithArgs:v8 interfaceName:sub_100016E20(*(void *)(v8 + 64))];
    *(void *)(v8 + 6640) = v57;
    if (!v57) {
      goto LABEL_121;
    }
    CFIndex v58 = [(WiFiNetworkDenyListManager *)v57 networkDenyList];
    *(void *)(v8 + 6648) = v58;
    if (!v58) {
      goto LABEL_121;
    }
  }
  *(void *)(v8 + 6656) = 0;
  *(_WORD *)(v8 + 6600) = -1;
  *(void *)(v8 + 6624) = +[WiFiNOIManager sharedWiFiNOIManagerWithQueue:a3];
  *(_DWORD *)(v8 + 72) = MGGetSInt32Answer();
  *(void *)(v8 + 80) = MGGetProductType();
  *(unsigned char *)(v8 + 88) = MGGetBoolAnswer();
  *(unsigned char *)(v8 + 6632) = *(_DWORD *)(v8 + 72) == 7;
  *(void *)(v8 + 6656) = 0;
  *(_DWORD *)(v8 + 6664) = 0;
  *(unsigned char *)(v8 + 6712) = 0;
  CFMutableDictionaryRef v59 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)(v8 + 7064) = v59;
  if (!v59) {
    goto LABEL_121;
  }
  CFOptionFlags v60 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v8 + 6808) = v60;
  if (!v60)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: failed to create autoHotspotScanTimer" : @"WiFiDeviceManagerCreate"];
    }
    goto LABEL_120;
  }
  dispatch_set_context(v60, (void *)v8);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 6808), (dispatch_function_t)sub_1000FA8EC);
  *(CFAbsoluteTime *)(v8 + 6824) = CFAbsoluteTimeGetCurrent() + 315360000.0;
  CFIndex v61 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v8 + 6816) = v61;
  if (!v61)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: failed to create autoHotspotLockStateTimer" : @"WiFiDeviceManagerCreate"];
    }
    goto LABEL_120;
  }
  dispatch_set_context(v61, (void *)v8);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 6816), (dispatch_function_t)sub_1000FAB30);
  if (_os_feature_enabled_impl())
  {
    CFDictionaryRef v62 = objc_alloc_init(WiFiHotspotNANInterface);
    *(void *)(v8 + 6752) = v62;
    if (!v62)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"ERROR: Couldn't create wifiHotspotNANInterfaceManager"];
      }
    }
    *(unsigned char *)(v8 + 6760) = 0;
  }
  *(_DWORD *)(v8 + 6776) = -536870352;
  CFMutableDictionaryRef v64 = objc_alloc_init(WiFiHotspotInterface);
  *(void *)(v8 + 6744) = v64;
  if (v64)
  {
    CFMutableArrayRef v65 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    *(void *)(v8 + 6840) = v65;
    if (!v65) {
      goto LABEL_121;
    }
    *(unsigned char *)(v8 + 6897) = 0;
    *(unsigned char *)(v8 + 6800) = 0;
    *(unsigned char *)(v8 + 6968) = 0;
    *(void *)(v8 + 6952) = 0;
    *(void *)(v8 + 6944) = 0;
    CFMutableArrayRef v66 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    *(void *)(v8 + 6912) = v66;
    if (!v66) {
      goto LABEL_121;
    }
    CFMutableArrayRef v67 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    *(void *)(v8 + 6920) = v67;
    if (!v67) {
      goto LABEL_121;
    }
    CFMutableArrayRef v68 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    *(void *)(v8 + 6928) = v68;
    if (!v68) {
      goto LABEL_121;
    }
    id v69 = objc_alloc_init((Class)NSMutableArray);
    *(void *)(v8 + 6936) = v69;
    if (!v69) {
      goto LABEL_121;
    }
    *(void *)(v8 + 6904) = 0;
    *(int64x2_t *)(v8 + 6864) = vdupq_n_s64(0x405E000000000000uLL);
    *(_DWORD *)(v8 + 6888) = 2;
    *(void *)(v8 + 6880) = 0x300000002;
    *(unsigned char *)(v8 + 7024) = 0;
    *(void *)(v8 + 6976) = 0;
    *(_DWORD *)(v8 + 6984) = 0;
    *(unsigned char *)(v8 + 7008) = 0;
    *(void *)(v8 + 7000) = 0;
    *(void *)(v8 + 6992) = 0;
    id v70 = *(void **)(v8 + 6744);
    v86[0] = _NSConcreteStackBlock;
    v86[1] = 3221225472;
    v86[2] = sub_1000FAC90;
    v86[3] = &unk_1002414B8;
    v86[4] = v8;
    [v70 registerHotspotInterfaceUpdateNetworkCallback:v86 withCallbackContext:v8];
  }
  *(unsigned char *)(v8 + 7057) = 0;
  *(unsigned char *)(v8 + 7043) = MGGetBoolAnswer();
  *(unsigned char *)(v8 + 7044) = 0;
  CFMutableArrayRef v71 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 3704) = v71;
  if (!v71
    || (CFMutableArrayRef v72 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks),
        (*(void *)(v8 + 3736) = v72) == 0))
  {
LABEL_121:
    CFRelease((CFTypeRef)v8);
LABEL_122:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: exiting, Error: failed to create deviceManager ref", "WiFiDeviceManagerCreate"];
    }
    uint64_t v8 = 0;
    goto LABEL_89;
  }
  *(unsigned char *)(v8 + 40) = 0;
  *(unsigned char *)(v8 + 7312) = 0;
  *(_DWORD *)(v8 + 44) = 0;
  *(_DWORD *)(v8 + 47) = 0;
  CFStringRef v73 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v8 + 7320) = v73;
  if (!v73
    || (dispatch_set_context(v73, (void *)v8),
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 7320), (dispatch_function_t)sub_1000FD068),
        *(unsigned char *)(v8 + 7336) = 0,
        BOOL v74 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3),
        (*(void *)(v8 + 7344) = v74) == 0))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: failed to create bssBlacklist.expiryTimer", "WiFiDeviceManagerCreate")];
    }
    goto LABEL_120;
  }
  dispatch_set_context(v74, (void *)v8);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 7344), (dispatch_function_t)sub_1000FD0F0);
  CFStringRef v75 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v8 + 7216) = v75;
  if (!v75)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: failed to create dps.displayTimer" arguments:qword_10027DD68];
    }
    goto LABEL_120;
  }
  dispatch_set_context(v75, (void *)v8);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 7216), (dispatch_function_t)sub_1000FD168);
  int v76 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v8 + 7256) = v76;
  if (!v76)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: failed to create slowWiFi.displayTimer", "WiFiDeviceManagerCreate"];
    }
LABEL_120:
    goto LABEL_121;
  }
  dispatch_set_context(v76, (void *)v8);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 7256), (dispatch_function_t)sub_1000FD2AC);
  unsigned int v77 = *(NSObject **)(v8 + 8968);
  if (v77
    || (unsigned int v77 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3),
        (*(void *)(v8 + 8968) = v77) != 0))
  {
    dispatch_set_context(v77, (void *)v8);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 8968), (dispatch_function_t)sub_1000FD3D4);
    dispatch_activate(*(dispatch_object_t *)(v8 + 8968));
  }
  CFNumberRef v78 = *(NSObject **)(v8 + 3768);
  if (v78
    || (CFNumberRef v78 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3),
        (*(void *)(v8 + 3768) = v78) != 0))
  {
    dispatch_set_context(v78, (void *)v8);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 3768), (dispatch_function_t)sub_1000FD6DC);
    dispatch_activate(*(dispatch_object_t *)(v8 + 3768));
  }
  *(void *)(v8 + 3728) = 0;
  *(unsigned char *)(v8 + 3688) = byte_10027DDAA == 0;
  *(void *)(v8 + 3712) = MGCopyAnswer();
  *(void *)(v8 + 7392) = 0;
  *(_DWORD *)(v8 + 7384) = 0;
  *(CFAbsoluteTime *)(v8 + 7304) = CFAbsoluteTimeGetCurrent();
  *(unsigned char *)(v8 + 7296) = 0;
  *(void *)(v8 + 696) = 0;
  *(_OWORD *)(v8 + 1072) = 0u;
  *(_DWORD *)(v8 + 5496) = 0;
  *(unsigned char *)(v8 + 5500) = 0;
  if (objc_opt_class()) {
    *(void *)(v8 + 968) = objc_alloc_init((Class)CARConnectionTimeStore);
  }
  unsigned int v79 = objc_alloc_init(WiFiScanObserver);
  *(void *)(v8 + 6680) = v79;
  id v80 = objc_alloc_init((Class)WiFiSettlementConfiguration);
  id v81 = [objc_alloc((Class)WiFiSettlementObserver) initWithScanProvider:v79 configuration:v80];
  *(void *)(v8 + 8976) = v81;
  v85[0] = _NSConcreteStackBlock;
  v85[1] = 3221225472;
  v85[2] = sub_1000FD7C4;
  v85[3] = &unk_1002414D8;
  v85[4] = v8;
  [v81 addSettlementCallback:v85];

  *(unsigned char *)(v8 + 9065) = 0;
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: exiting" args:WiFiDeviceManagerCreate];
  }
LABEL_89:
  return v8;
}

void sub_1000EED50(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 3280);
  if (v2 == 1)
  {
    if (qword_10027DD68)
    {
      uint64_t v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@+} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"Retrying auto association"]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v6 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v4 UTF8String]] UTF8String];
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      }
    }
    *(_DWORD *)(a1 + 3280) = 0;
    if ((_os_feature_enabled_impl() & 1) == 0)
    {
      [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:4 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
      sub_100102B58(a1, 0, (uint64_t)"__WiFiDeviceManagerRetryTimerCallback");
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Attempting auto association retry but auto join state already is %@.", sub_100024BE8(*(_DWORD *)(a1 + 3280)) message];
    }
  }
}

void sub_1000EEF58(uint64_t a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Auto-join deferral expired. Triggering auto-join."];
  }
  *(_DWORD *)(a1 + 352) = 0;
  *(void *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 192) = 12;
  if (_os_feature_enabled_impl())
  {
    sub_10001FD64(a1, 0xEuLL);
  }
  else
  {
    [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:14 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
    sub_1001028E4(a1, 2, (uint64_t)"__WiFiDeviceManagerDeferralTimerCallback");
  }
}

__CFArray *sub_1000EF03C(char *a1, CFIndex capacity)
{
  int v2 = capacity;
  uint64_t v4 = capacity;
  CFMutableSetRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, capacity, &kCFTypeArrayCallBacks);
  if (v2 >= 1)
  {
    CFIndex v6 = 0;
    do
    {
      CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1);
      if (v7)
      {
        CFNumberRef v8 = v7;
        CFArraySetValueAtIndex(Mutable, v6, v7);
        CFRelease(v8);
      }
      ++v6;
      a1 += 4;
    }
    while (v4 != v6);
  }
  return Mutable;
}

void sub_1000EF0E8(uint64_t a1, const void *a2, uint64_t a3)
{
  if (a3)
  {
    CFNumberRef v7 = sub_100018FA8(a3, a2, 1);
    if (!v7)
    {
LABEL_41:
      return;
    }
    CFNumberRef v8 = v7;
    sub_1000D1FFC((uint64_t)v7);
    sub_10011E17C(a3, v8, 0);
    if (sub_10005DC28(*(void *)(a3 + 64)))
    {
      int v9 = sub_10005D9B4(*(void *)(a3 + 64));
      uint64_t v10 = (const void *)sub_100017C48(a1);
      if (v9)
      {
        sub_100017D28(a1, v10, 482, 0, (uint64_t)kCFBooleanTrue);
        if (qword_10027DD68)
        {
          uint64_t v12 = sub_100016E20(*(void *)(a3 + 64));
          CFArrayRef v13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"WiFi(%@) has valid IP Address and primary interface for network: %@, Preventing Disassociation", v12, sub_10001A43C(v8)]) UTF8String]);
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf) = 136446210;
            *(void *)((char *)&buf + 4) = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v13 UTF8String]] UTF8String];
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          }
        }
      }
      else
      {
        sub_100017D28(a1, v10, 482, 0, (uint64_t)kCFBooleanFalse);
        if (qword_10027DD68)
        {
          uint64_t v16 = sub_100016E20(*(void *)(a3 + 64));
          CFMutableArrayRef v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"WiFi(%@) has valid IP Address but not the primary interface for network: %@, Preventing Disassociation", v16, sub_10001A43C(v8)]) UTF8String]);
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 136446210;
            *(void *)((char *)&buf + 4) = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v17 UTF8String]] UTF8String];
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%{public}s", (uint8_t *)&buf, 0xCu);
          }
        }
      }
LABEL_19:
      char v18 = 0;
LABEL_20:
      CFMutableArrayRef v19 = sub_10001A5A8(*(const __CFArray **)(a3 + 3704), (const void **)v8);
      char v20 = v18 ^ 1;
      if (!a1) {
        char v20 = 1;
      }
      if ((v20 & 1) == 0)
      {
        uint64_t v21 = v19;
        if (sub_100073B18(a1, v8))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Network <%@> falling back to physical Mac since Interface not routable.", "__WiFiDeviceManagerPrimaryTimeoutCallback", sub_10001A43C(v8) message];
          }
          if (*(unsigned char *)(a3 + 3688))
          {
            CFMutableArrayRef v23 = *(void (**)(uint64_t, void *, void))(a3 + 4712);
            if (v23) {
              v23(a3, v8, *(void *)(a3 + 4720));
            }
            if (v21)
            {
              *(void *)((char *)&buf + 4) = 0xAAAAAAAAAAAAAAAALL;
              LODWORD(buf) = 3;
              sub_1000570A8((uint64_t)v21, (uint64_t)&buf);
              sub_100056E00((unsigned int *)&buf);
            }
            CFMutableArrayRef v24 = *(void **)(a3 + 7368);
            if (v24) {
              [v24 addFaultEvent:11 forInterface:a2];
            }
          }
        }
        else if (v21)
        {
          unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
          unsigned int v47 = 6;
          sub_1000570A8((uint64_t)v21, (uint64_t)&v47);
          sub_100056E00(&v47);
          CFMutableArrayRef v26 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            CFMutableArrayRef v27 = sub_10001A43C(v8);
            [v26 WFLog:3, "%s: WFMacRandomisation : Network <%@> failed to get routable interface. PrivateMac used : <0 = used : %d>", "__WiFiDeviceManagerPrimaryTimeoutCallback", v27, v48 message];
          }
          CFDictionaryRef v28 = (const __CFDictionary *)sub_10001E404((uint64_t)v21, @"PRIVATE_MAC_ADDRESS");
          if (v28)
          {
            CFTypeID TypeID = CFDictionaryGetTypeID();
            if (TypeID == CFGetTypeID(v28))
            {
              CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v28, @"PRIVATE_MAC_ADDRESS_VALUE");
              if (sub_10001A6DC(Value))
              {
                if (!sub_10001A680((uint64_t)v8) && *(void *)(a3 + 4744))
                {
                  if (*(void *)(a3 + 240))
                  {
                    *(void *)&long long buf = 0;
                    *((void *)&buf + 1) = &buf;
                    uint64_t v50 = 0x2020000000;
                    uint64_t v51 = 0;
                    CFTypeRef v42 = CFRetain(v21);
                    *(void *)(*((void *)&buf + 1) + 24) = v42;
                    CFRetain((CFTypeRef)a3);
                    id v43 = *(NSObject **)(a3 + 240);
                    block[0] = _NSConcreteStackBlock;
                    block[1] = 3221225472;
                    block[2] = sub_1001304F8;
                    block[3] = &unk_10023F220;
                    void block[4] = &buf;
                    void block[5] = a3;
                    dispatch_async(v43, block);
                    _Block_object_dispose(&buf, 8);
                  }
                  else
                  {
                    if (qword_10027DD68) {
                      [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." arguments:("__WiFiDeviceManagerPrimaryTimeoutCallback", nil)];
                    }
                  }
                }
              }
            }
          }
        }
      }
      CFRelease(v8);
      goto LABEL_41;
    }
    CFMutableArrayRef v14 = *(void **)(a3 + 7368);
    if (v14) {
      [v14 addFaultEvent:13 forInterface:sub_100016E20(*(void *)(a3 + 64))];
    }
    if (sub_10001A680((uint64_t)v8))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Ad-Hoc Network. Preventing disassociation"];
      }
      goto LABEL_19;
    }
    if (*(_DWORD *)(a3 + 3280) != 14)
    {
      unsigned int v45 = sub_10001E404((uint64_t)v8, @"BSSID");
      if (qword_10027DD68)
      {
        uint64_t v32 = sub_100016E20(*(void *)(a3 + 64));
        uint64_t v33 = sub_10005DC28(*(void *)(a3 + 64)) ? "primary" : "routable";
        CFMutableSetRef v34 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"WiFi(%@) failed to become %s interface for network: %@", v32, v33, sub_10001A43C(v8), v45]) UTF8String]);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136446210;
          *(void *)((char *)&buf + 4) = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v34 UTF8String]] UTF8String];
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%{public}s", (uint8_t *)&buf, 0xCu);
        }
      }
      if (sub_10001FC1C((uint64_t)v8))
      {
        sub_10006DB68(*(void *)(a3 + 64), v8, 0);
      }
      else
      {
        CFDateRef v39 = (const __CFDate *)sub_1000C99D8((uint64_t)v8, 1);
        CFDateRef v40 = (const __CFDate *)sub_1000C99D8((uint64_t)v8, 0);
        if (!v40 || v39 && CFDateCompare(v39, v40, 0) == kCFCompareGreaterThan)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3 message:"Network was intentionally joined.  Preventing disassociation."];
          }
          goto LABEL_67;
        }
      }
      sub_1000FEA7C(a3, a2, 1005, "__WiFiDeviceManagerPrimaryTimeoutCallback", 7809);
      if (sub_1000C66D0((BOOL)v8)
        && !sub_10001FC1C((uint64_t)v8)
        && (sub_1000C6FC0((uint64_t)v8, @"WEP_AUTH_Flags") & 4) != 0)
      {
        id v35 = sub_10000AD1C(*(void *)(a3 + 3512));
        if (([*(id *)(a3 + 6648) isNetworkInDenyListedState:1 scanResult:v35] & 1) == 0)
        {
          int v36 = sub_100123384(a3, (uint64_t)a2, 1, 1, v8, 0);
          *(_DWORD *)(a3 + 3280) = v36;
          if (v36 == 14)
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "Dispatched password panel for open auth WEP network: %@", sub_10001A43C(v8) message];
            }
          }
        }
        id v38 = sub_100103A84(a3, 1, 0, (uint64_t)v45, 5);
        [*(id *)(a3 + 6648) setNetworkDenyListInfo:v38 forScanResult:v35];
      }
    }
LABEL_67:
    char v18 = 1;
    goto LABEL_20;
  }
}

void sub_1000EF9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000EF9F4(uint64_t a1, const void *a2, uint64_t a3)
{
  if (!a3) {
    return;
  }
  unsigned int v5 = sub_10006B8D8(*(void *)(a3 + 64), a2);
  CFNumberRef v7 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    CFNumberRef v8 = sub_10005A970(v5);
    [v7 WFLog:3 message:@"%s: device powered %s, manager->poweredState %s", @"__WiFiDeviceManagerPowerEventCallback", v8, sub_10005A970(*(_DWORD *)(a3 + 20))];
  }
  if (v5 != 1)
  {
    uint64_t v16 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v12 = 3;
    memset(v11, 0, sizeof(v11));
    DWORD2(v11[0]) = 3;
    CFStringRef v13 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", @"Power Off");
    sub_10010E020(a3, (uint64_t)v11);
    sub_10010E474(a3);
    unsigned int v9 = *(_DWORD *)(a3 + 20);
    if (v5 == v9) {
      goto LABEL_13;
    }
LABEL_9:
    if (sub_10006B9D4(*(void *)(a3 + 64), a2, v9)) {
      return;
    }
    sub_1001106BC(a3, (uint64_t)a2);
    goto LABEL_13;
  }
  unsigned int v9 = *(_DWORD *)(a3 + 20);
  if (v9 != 1) {
    goto LABEL_9;
  }
  *(_DWORD *)(a3 + 192) = 3;
  if (_os_feature_enabled_impl())
  {
    sub_10001FD64(a3, 0x12uLL);
  }
  else
  {
    [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:18 interfaceName:sub_100017C48(*(void *)(a3 + 64))];
    sub_1001028E4(a3, 2, (uint64_t)"__WiFiDeviceManagerPowerEventCallback");
  }
  sub_10010677C(a3);
LABEL_13:
  uint64_t v10 = *(void **)(a3 + 7368);
  if (v10)
  {
    [v10 setPowerState:v5 != 0 forInterface:a2];
  }
}

void sub_1000EFBFC(int a1, const void *a2, uint64_t a3, CFDictionaryRef theDict)
{
  if (!a3 || !theDict) {
    return;
  }
  v177 = (unsigned __int8 *)(a3 + 5216);
  int v195 = 0;
  uint64_t v194 = 0;
  CFDataRef Value = (void *)CFDictionaryGetValue(theDict, @"LINK_CHANGED_NETWORK");
  CFNumberRef v8 = Value;
  if (Value || (CFNumberRef v8 = *(const void **)(a3 + 3512)) != 0) {
    unsigned int v9 = sub_1000194F8(a3, v8, 1);
  }
  else {
    unsigned int v9 = 0;
  }
  int v176 = *(unsigned __int8 *)(a3 + 3411);
  v177[1400] = 0;
  *(_DWORD *)(a3 + 3392) = 0;
  uint64_t v10 = *(const void **)(a3 + 6608);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a3 + 6608) = 0;
  }
  if (*(void *)(a3 + 4040))
  {
    uint64_t v190 = 0;
    v191 = &v190;
    uint64_t v192 = 0x2020000000;
    uint64_t v193 = 0;
    uint64_t v186 = 0;
    v187 = &v186;
    uint64_t v188 = 0x2020000000;
    uint64_t v189 = 0;
    if (a2)
    {
      CFTypeRef v11 = CFRetain(a2);
      v191[3] = (uint64_t)v11;
    }
    CFTypeRef v12 = CFRetain(theDict);
    v187[3] = (uint64_t)v12;
    if (!Value) {
      goto LABEL_55;
    }
    int v13 = *(unsigned __int8 *)(a3 + 3412);
    int v14 = *(unsigned __int8 *)(a3 + 3432);
    if (*(unsigned char *)(a3 + 55))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4 message:"!!!! Simulating wifi-assist override condition (Debug Mode) !!!!"];
      }
    }
    if (v13 || *(unsigned char *)(a3 + 55) && *(unsigned char *)(a3 + 52))
    {
      char v16 = 0;
      int v17 = 1;
    }
    else
    {
      int v17 = 0;
      char v16 = 1;
    }
    *(unsigned char *)(a3 + 52) = v17;
    if (v14 || *(unsigned char *)(a3 + 55) && *(unsigned char *)(a3 + 54))
    {
      *(unsigned char *)(a3 + 54) = 1;
      unsigned int v18 = v17 + 1;
    }
    else
    {
      *(unsigned char *)(a3 + 54) = 0;
      if (v16)
      {
        CFDictionarySetValue(theDict, @"WIFI_ASSIST_OVERRIDE", kCFBooleanFalse);
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: wifi-assist override to auto", @"__WiFiDeviceManagerOverrideGoodRssiWiFiAssist"];
        }
        goto LABEL_45;
      }
      unsigned int v18 = 1;
    }
    CFDictionarySetValue(theDict, @"WIFI_ASSIST_OVERRIDE", kCFBooleanTrue);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: wifi-assist override to On for %@", "__WiFiDeviceManagerOverrideGoodRssiWiFiAssist", sub_10001A43C(Value) message];
    }
    if (v18 > 1)
    {
      CFMutableSetRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (Mutable)
      {
        valuePtr[0] = 0;
        CFNumberRef v27 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, valuePtr);
        if (!v27) {
          goto LABEL_351;
        }
        CFArrayAppendValue(Mutable, v27);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s: wifi-assist override reason moving network %@", "__WiFiDeviceManagerOverrideGoodRssiWiFiAssist", sub_10001A43C(Value) message];
        }
        CFRelease(v27);
        valuePtr[0] = 1;
        CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, valuePtr);
        if (v20)
        {
          CFArrayAppendValue(Mutable, v20);
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s:wifi-assist override reason network bad reputation %@", "__WiFiDeviceManagerOverrideGoodRssiWiFiAssist", sub_10001A43C(Value) message];
          }
          CFDictionarySetValue(theDict, @"WIFI_ASSIST_OVERRIDE_REASONS", Mutable);
        }
        else
        {
LABEL_351:
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: CFNumberCreate failed" : @"__WiFiDeviceManagerOverrideGoodRssiWiFiAssist"];
          }
          CFNumberRef v20 = 0;
        }
        goto LABEL_47;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: CFArrayCreateMutable failed" : @"__WiFiDeviceManagerOverrideGoodRssiWiFiAssist"];
      }
    }
    else
    {
      valuePtr[0] = *(unsigned char *)(a3 + 52) == 0;
      CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, valuePtr);
      if (v20)
      {
        CFDictionarySetValue(theDict, @"WIFI_ASSIST_OVERRIDE_REASON", v20);
        CFMutableArrayRef v22 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          int v23 = *(unsigned __int8 *)(a3 + 52);
          CFMutableArrayRef v24 = sub_10001A43C(Value);
          CFMutableArrayRef v25 = "moving";
          if (!v23) {
            CFMutableArrayRef v25 = "bad reputation";
          }
          [v22 WFLog:4, "%s: wifi-assist override reason %s network %@", "__WiFiDeviceManagerOverrideGoodRssiWiFiAssist", v25, v24 message];
        }
        goto LABEL_46;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: CFNumberCreate failed", @"__WiFiDeviceManagerOverrideGoodRssiWiFiAssist"];
      }
    }
LABEL_45:
    CFNumberRef v20 = 0;
LABEL_46:
    CFMutableSetRef Mutable = 0;
LABEL_47:
    if (*(unsigned char *)(a3 + 55))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"!!!! End simulating wifi-assist override condition (Debug Mode) !!!!"];
      }
      *(unsigned char *)(a3 + 52) = 0;
      *(_WORD *)(a3 + 54) = 0;
    }
    if (v20) {
      CFRelease(v20);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
LABEL_55:
    if (*(void *)(a3 + 240))
    {
      CFRetain((CFTypeRef)a3);
      uint64_t v32 = *(NSObject **)(a3 + 240);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1001306E4;
      block[3] = &unk_100240A40;
      void block[4] = &v190;
      void block[5] = &v186;
      void block[6] = a3;
      void block[7] = a2;
      dispatch_async(v32, block);
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null queue.", "__WiFiDeviceManagerLinkEventCallback")];
      }
      CFMutableSetRef v34 = (const void *)v191[3];
      if (v34)
      {
        CFRelease(v34);
        v191[3] = 0;
      }
      id v35 = (const void *)v187[3];
      if (v35)
      {
        CFRelease(v35);
        v187[3] = 0;
      }
    }
    _Block_object_dispose(&v186, 8);
    _Block_object_dispose(&v190, 8);
  }
  int v36 = (_WORD *)(a3 + 8606);
  if (!Value)
  {
    if (_os_feature_enabled_impl() && v177[173] && v177[170])
    {
      unsigned int v39 = [*(id *)(a3 + 6752) isNANPublisherStarted];
      if (v39)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s Publisher Already Started" arguments:("__WiFiDeviceManagerLinkEventCallback")];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Sending CSA as NAN PH needs to be started!", "__WiFiDeviceManagerLinkEventCallback")];
        }
        sub_100064C0C(*(void *)(a3 + 64));
        sub_10010EE4C(a3);
      }
      v177[173] = 0;
    }
    if (+[WiFiAIRAgent sharedInstance]
      && [+[WiFiAIRAgent sharedInstance] isInterfaceRankingInProgress])
    {
      sub_1000175A0(*(void *)(a3 + 120), 0, 0);
      [+[WiFiAIRAgent sharedInstance] terminateRequest];
    }
    if (!v9)
    {
      v97 = *(const void **)(a3 + 3512);
      if (v97)
      {
        unsigned int v9 = (void *)CFRetain(v97);
      }
      else
      {
        unsigned int v9 = sub_100071800(*(void *)(a3 + 64));
        if (v9)
        {
          CFArrayRef v108 = sub_1000194F8(a3, v9, 1);
          if (v108)
          {
            CFArrayRef v109 = v108;
            CFRelease(v9);
            unsigned int v9 = v109;
          }
        }
      }
    }
    *int v36 = 0;
    sub_100101574(a3, (uint64_t)a2);
    sub_100101D50((const void *)a3);
    *(unsigned char *)(a3 + 3411) = 0;
    *(void *)(a3 + 3416) = 0;
    *(CFAbsoluteTime *)(a3 + 3424) = CFAbsoluteTimeGetCurrent();
    *(unsigned char *)(a3 + 3413) = 0;
    *(CFAbsoluteTime *)(a3 + 6952) = CFAbsoluteTimeGetCurrent();
    *(void *)(a3 + 6944) = 0;
    sub_100100A60((char *)a3, 1, 0);
    if (v177[1840]) {
      sub_100064860(*(void *)(a3 + 64), 0, 0, 0);
    }
    CFDictionaryRef v99 = sub_10006380C(*(void *)(a3 + 64), a2);
    if (v99)
    {
      CFDictionaryRef v100 = v99;
      uint64_t v101 = CFDictionaryGetValue(v99, @"DEAUTH_EA");
      if (v101)
      {
        unsigned int v102 = v101;
        uint64_t v103 = *(void *)(a3 + 3512);
        if (v103)
        {
          int v104 = sub_10001E404(v103, @"BSSID");
          if (v104)
          {
            uint64_t v105 = (uint64_t)v104;
            if (CFEqual(v104, v102))
            {
              CFNumberRef v106 = (const __CFNumber *)CFDictionaryGetValue(v100, @"DEAUTH_REASON");
              if (v106)
              {
                LODWORD(v190) = -1431655766;
                if (CFNumberGetValue(v106, kCFNumberIntType, &v190))
                {
                  id v107 = sub_10000AD1C(*(void *)(a3 + 3512));
                  if (v190 == 15
                    && ([*(id *)(a3 + 6648) isNetworkInDenyListedState:1 scanResult:v107] & 1) == 0&& !*(_DWORD *)(a3 + 3280))
                  {
                    if ([v107 isEAP]) {
                      unsigned int v174 = [[v107 matchingKnownNetworkProfile] isProfileBased];
                    }
                    else {
                      unsigned int v174 = 0;
                    }
                    if (qword_10027DD68)
                    {
                      v111 = "NO";
                      if (v174) {
                        v111 = "YES";
                      }
                      v172 = v110;
                      [((id)qword_10027DD68) WFLog:3, "%s: hasEnterprisePolicy: %s", "__WiFiDeviceManagerProcessDeauth", v111];
                      v110 = v172;
                    }
                    uint64_t v112 = *(void *)(a3 + 64);
                    if (v174)
                    {
                      sub_10006DB68(v112, *(const void **)(a3 + 3512), 1);
                    }
                    else if (!sub_10005DC28(v112))
                    {
                      *(_DWORD *)(a3 + 3280) = sub_100123384(a3, (uint64_t)a2, 1, 1, *(const void **)(a3 + 3512), 0);
                    }
                  }
                  id v113 = sub_100103A84(a3, 4, (int)v190, v105, 5);
                  [*(id *)(a3 + 6648) setNetworkDenyListInfo:v113 forScanResult:v107];
                }
              }
            }
          }
        }
      }
      CFRelease(v100);
    }
    int v114 = *(_DWORD *)(a3 + 3280);
    valuePtr[0] = 0;
    unsigned int v182 = -1431655766;
    unsigned int v183 = 0;
    char v181 = 0;
    CFNumberRef v115 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_REASON_CODE");
    CFNumberRef v116 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_IS_INVOL");
    CFNumberRef v117 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_SUBREASON_CODE");
    if (v115)
    {
      CFNumberGetValue(v115, kCFNumberIntType, valuePtr);
      if (valuePtr[0] == 1000)
      {
        uint64_t v119 = 3;
        LOBYTE(v118) = 1;
        if (!v117)
        {
LABEL_242:
          if (v116) {
            CFNumberGetValue(v116, kCFNumberSInt8Type, &v181);
          }
          uint64_t v120 = valuePtr[0];
          if (v9 && valuePtr[0] == 4)
          {
            if (sub_1000C74BC((uint64_t)v9)) {
              uint64_t v120 = 1029;
            }
            if (sub_10006E3A0(*(void *)(a3 + 64)) < 0x1F) {
              uint64_t v120 = 1030;
            }
            if (sub_10001EBB4((uint64_t)v9)) {
              uint64_t v121 = v120;
            }
            else {
              uint64_t v121 = 1031;
            }
            id v122 = sub_10000AD1C((uint64_t)v9);
            unsigned int v123 = [*(id *)(a3 + 6648) isNetworkInDenyListedState:3 scanResult:v122];
            if ([*(id *)(a3 + 6648) isNetworkInDenyListedState:1 scanResult:v122] | v123) {
              uint64_t v120 = 1032;
            }
            else {
              uint64_t v120 = v121;
            }
          }
          else if (!v9)
          {
            goto LABEL_281;
          }
          if (sub_10001E71C((uint64_t)v9))
          {
            int v124 = valuePtr[0];
            int v175 = v114;
            uint64_t v173 = v119;
            if (v181)
            {
              if (valuePtr[0] == 1 && v183 == 7) {
                int v124 = 1;
              }
              else {
                int v124 = 255;
              }
            }
            LODWORD(v190) = v124;
            CFNumberRef v125 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v190);
            sub_10001C6A4((uint64_t)v9, @"lastDisconnectReasonKey", v125);
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            CFDateRef v127 = CFDateCreate(kCFAllocatorDefault, Current);
            sub_10001C6A4((uint64_t)v9, @"lastDisconnectTimestampKey", v127);
            if (v177[1680])
            {
              if (v181)
              {
                if (valuePtr[0] == 1 && v183 == 3)
                {
                  CFStringRef v128 = (const __CFString *)sub_10001A43C(v9);
                  v129 = sub_1000C5D34(v128);
                  if (v129)
                  {
                    v130 = v129;
                    sub_10001C6A4((uint64_t)v129, @"lastDisconnectTimestampKey", v127);
                    CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 6928), v130);
                    v132 = (void *)qword_10027DD68;
                    if (qword_10027DD68)
                    {
                      uint64_t context = v131;
                      v133 = sub_10001A43C(v9);
                      [v132 WFLog:3, "%s: Blacklisting %@ hotspot: reason (%d) subreason (%d) \n", "__WiFiDeviceManagerLinkEventCallback", v133, valuePtr[0], v183 message];
                      v131 = context;
                    }
                    CFRelease(v130);
                  }
                }
              }
            }
            v134 = *(const void **)(a3 + 6976);
            if (v134)
            {
              CFRelease(v134);
              *(void *)(a3 + 6976) = 0;
            }
            *(void *)(a3 + 6976) = 0;
            *(_DWORD *)(a3 + 6460) = *(_DWORD *)(a3 + 6208);
            *(_DWORD *)(a3 + 6456) = v190;
            sub_1000519A4((unsigned int *)(a3 + 6456));
            int v114 = v175;
            if (v125) {
              CFRelease(v125);
            }
            if (v127) {
              CFRelease(v127);
            }
            uint64_t v119 = v173;
          }
LABEL_281:
          v177[1680] = 0;
          v135 = *(const void **)(a3 + 6976);
          if (v135)
          {
            CFRelease(v135);
            *(void *)(a3 + 6976) = 0;
          }
          *(void *)(a3 + 6976) = 0;
          v177[1771] = 0;
          char v136 = !v118;
          if (!v9) {
            char v136 = 1;
          }
          if ((v136 & 1) == 0)
          {
            CFStringRef v137 = (const __CFString *)sub_10001E404((uint64_t)v9, @"BSSID");
            sub_1000CB1B8((uint64_t)v9, v137, v119);
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:3, "%s: updating network disconnect reason to %d", "__WiFiDeviceManagerLinkEventCallback", v119];
            }
            sub_10010C6B4((NSObject **)a3, v9);
          }
          sub_10003ABA4(*(void *)(a3 + 120), 0, 1, 0);
          if (*(unsigned char *)(a3 + 433)) {
            sub_1000157C8(a3, 2);
          }
          [*(id *)(a3 + 3656) setLinkDown];
          if (*(unsigned char *)(a3 + 433))
          {
            v139 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            LODWORD(v190) = *(unsigned __int8 *)(a3 + 417);
            CFNumberRef v140 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v190);
            CFDictionarySetValue(v139, @"CATS_SCAN_METRIC_CACHE_HITS", v140);
            if (v140) {
              CFRelease(v140);
            }
            LODWORD(v186) = *(unsigned __int8 *)(a3 + 418);
            CFNumberRef v141 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v186);
            CFDictionarySetValue(v139, @"CATS_SCAN_METRIC_CACHE_MISS", v141);
            if (v141) {
              CFRelease(v141);
            }
            sub_100057788(v139);
            if (v139) {
              CFRelease(v139);
            }
          }
          v142 = (const void **)v9;
          if (!v9) {
            v142 = *(const void ***)(a3 + 3512);
          }
          v178[0] = _NSConcreteStackBlock;
          v178[1] = 3221225472;
          v178[2] = sub_100130F60;
          v178[3] = &unk_1002418A8;
          char v180 = v181;
          v178[4] = a3;
          v178[5] = v120;
          unsigned int v179 = v183;
          sub_10010A88C(a3, v142, (uint64_t)v178);
          if (v9)
          {
            int v143 = sub_1000199C0((uint64_t)v9);
            v144 = (const void **)v9;
            if (v143)
            {
              *(unsigned char *)(a3 + 992) = v181 == 0;
              if ((unint64_t)(v120 - 1) > 1)
              {
                sub_1001307DC(a3, (uint64_t)v9, v120, v183);
              }
              else
              {
                *(void *)(a3 + 976) = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v9);
                *(_DWORD *)(a3 + 984) = v120;
                *(_DWORD *)(a3 + 988) = v183;
                v145 = *(NSObject **)(a3 + 1000);
                dispatch_time_t v146 = dispatch_time(0, 10000000000);
                dispatch_source_set_timer(v145, v146, 0xFFFFFFFFFFFFFFFFLL, 0);
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: trigger %d second timer to check whether or not CarPlay disconnect is intended.", "__WiFiDeviceManagerLinkEventCallback", 10)];
                }
              }
              dispatch_source_set_timer(*(dispatch_source_t *)(a3 + 1056), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
              v144 = (const void **)v9;
            }
          }
          else
          {
            v144 = *(const void ***)(a3 + 3512);
          }
          v148 = sub_10001A5A8(*(const __CFArray **)(a3 + 3704), v144);
          if (v148)
          {
            LODWORD(v194) = 1;
            sub_1000570A8((uint64_t)v148, (uint64_t)&v194);
            sub_100056E00((unsigned int *)&v194);
          }
          sub_100130FEC(a3);
          if (v9 && sub_10001FC1C((uint64_t)v9)) {
            sub_10006DB68(*(void *)(a3 + 64), v9, 0);
          }
          CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a3 + 272));
          if (v114 != 14 && v176)
          {
            *(_DWORD *)(a3 + 192) = 4;
            if (_os_feature_enabled_impl())
            {
              sub_10001FD64(a3, 2uLL);
            }
            else
            {
              [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:2 interfaceName:sub_100017C48(*(void *)(a3 + 64))];
              sub_1001028E4(a3, 2, (uint64_t)"__WiFiDeviceManagerLinkEventCallback");
            }
          }
          if (*(void *)(a3 + 5408) && !*(unsigned char *)(a3 + 3305))
          {
            if (qword_10027DD68) {
              [qword_10027DD68 WFLog:message:3, "%s: disassociated and auto-join disabled. Releasing PPM resource.", "__WiFiDeviceManagerLinkEventCallback"];
            }
            sub_100102708(a3);
          }
          sub_10011E17C(a3, v9, 0);
          if (*(_DWORD *)(a3 + 72) == 7)
          {
            v150 = *(NSObject **)(a3 + 5528);
            dispatch_time_t v151 = dispatch_time(0, 45000000000);
            dispatch_source_set_timer(v150, v151, 0xFFFFFFFFFFFFFFFFLL, 0);
          }
          [*(id *)(a3 + 6624) disarmHomeNetworkTransitionTimer];
          [*(id *)(a3 + 6704) dismissJoinAlerts];
          CFNumberRef v153 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"CLIENT_REASON");
          v154 = v177;
          if (!v153) {
            goto LABEL_340;
          }
          CFNumberGetValue(v153, kCFNumberIntType, &v182);
          unsigned int v155 = v182;
          if (v182 == 2)
          {
            int v156 = sub_100072AF0(*(void *)(a3 + 64));
            if (v9 && v156 == 1)
            {
              v157 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v9);
              if (v157)
              {
                v158 = v157;
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: client disabled link due to captive %@", "__WiFiDeviceManagerLinkEventCallback", sub_10001A43C(v158) message];
                }
                uint64_t v160 = sub_100017C48(*(void *)(a3 + 64));
                sub_100123384(a3, v160, 6, 0, v158, 0);
                CFRelease(v158);
LABEL_339:
                v154 = v177;
                goto LABEL_340;
              }
              goto LABEL_340;
            }
            unsigned int v155 = v182;
          }
          if (v155)
          {
            v162 = (void *)qword_10027DD68;
            if (qword_10027DD68)
            {
              v163 = sub_10001A43C(v9);
              CFStringRef v164 = sub_10005AF64(v182);
              uint64_t v165 = v182;
              unsigned int v166 = sub_100072AF0(*(void *)(a3 + 64));
              [v162 WFLog:3, "%s: client disabled network %@ with reason %@(%d) assocType %@", "__WiFiDeviceManagerLinkEventCallback", v163, v164, v165, sub_10005AFB4(v166) message];
            }
            goto LABEL_339;
          }
LABEL_340:
          v154[1497] = 0;
          sub_10011083C(a3, 6u, valuePtr[0]);
          *(_DWORD *)(a3 + 3468) = 0;
          *(_OWORD *)(a3 + 3788) = 0u;
          *(_OWORD *)(a3 + 3804) = 0u;
          *(void *)(a3 + 3817) = 0;
          if (v9 && sub_1000C8798((uint64_t)v9))
          {
            CFStringRef v167 = sub_1000C6758(v9);
            sub_1000DE060((uint64_t)v167);
          }
          goto LABEL_343;
        }
LABEL_241:
        CFNumberGetValue(v117, kCFNumberIntType, &v183);
        goto LABEL_242;
      }
      if (valuePtr[0] == 2)
      {
        BOOL v118 = *(_DWORD *)(a3 + 6208) < -80;
        uint64_t v119 = (4 * v118);
        if (!v117) {
          goto LABEL_242;
        }
        goto LABEL_241;
      }
    }
    LOBYTE(v118) = 0;
    uint64_t v119 = 0;
    if (!v117) {
      goto LABEL_242;
    }
    goto LABEL_241;
  }
  *int v36 = 256;
  if (sub_1000CD6C4((uint64_t)Value))
  {
    *(unsigned char *)int v36 = 1;
    *(_OWORD *)(a3 + 8528) = 0u;
    *(_OWORD *)(a3 + 8544) = 0u;
    *(_OWORD *)(a3 + 8560) = 0u;
    *(CFAbsoluteTime *)(a3 + 8576) = CFAbsoluteTimeGetCurrent();
  }
  sub_100101574(a3, (uint64_t)a2);
  if (*(_DWORD *)(a3 + 72) == 7) {
    dispatch_source_set_timer(*(dispatch_source_t *)(a3 + 5528), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  char v37 = 1;
  *(unsigned char *)(a3 + 3411) = 1;
  *(CFAbsoluteTime *)(a3 + 3416) = CFAbsoluteTimeGetCurrent();
  if (!sub_1000CEBB4((CFDictionaryRef *)Value)) {
    char v37 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") isMovingNetwork:Value];
  }
  sub_100100990(a3, v37);
  *(unsigned char *)(a3 + 3432) = 0;
  *(_WORD *)(a3 + 3448) = 0;
  if (v9
    && kCFBooleanFalse == sub_10001E404((uint64_t)v9, @"WiFiNetworkAttributeIsTCPGood")
    && objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "isHistoricallyBadLinkQualityNetwork:", Value))
  {
    *(unsigned char *)(a3 + 3432) = 1;
  }
  if (!*(unsigned char *)(a3 + 3412)) {
    sub_100100C74((unsigned __int8 *)a3);
  }
  sub_10010547C(a3, Value);
  sub_1000718D8(*(void *)(a3 + 64), (uint64_t)Value);
  if (v177[3])
  {
    if (sub_10010EC7C(a3, 4))
    {
      sub_100105524((uint64_t *)a3, Value, 1, 3);
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: setting interface rank %s : reason %s ", "__WiFiDeviceManagerLinkEventCallback", "kSCNetworkServicePrimaryRankNever", " Concurrency");
      }
    }
    else
    {
      sub_1000FEA7C(a3, a2, 1007, "__WiFiDeviceManagerLinkEventCallback", 8849);
    }
  }
  else
  {
    sub_100105524((uint64_t *)a3, Value, 0, 0);
  }
  sub_100105904(a3, Value);
  if (v9)
  {
    unsigned int v41 = sub_1000CBBE4((uint64_t)v9);
    CFTypeRef v42 = sub_10001E404((uint64_t)Value, @"BSSID");
    int v43 = sub_1000CB75C(v9, v42);
    char v44 = v43;
    if (v43)
    {
      unsigned int v46 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        unsigned int v47 = sub_10001E404((uint64_t)Value, @"BSSID");
        [v46 WFLog:3, "Edge BSS detected - BSSID %@ SSID %@", v47, sub_10001A43C(Value) message];
      }
    }
    if (v41)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Detected multiAP environment for %@", sub_10001A43C(v9) message];
      }
    }
    uint64_t v49 = *(void *)(a3 + 64);
    unsigned int v50 = sub_100019AD4(a3, v9);
    sub_10005DD54(v49, (uint64_t)a2, v9, v50, 0, 0, 0);
    uint64_t v51 = v9;
  }
  else
  {
    sub_10005DD54(*(void *)(a3 + 64), (uint64_t)a2, 0, 1u, 0, 0, 0);
    char v44 = 0;
    uint64_t v51 = Value;
  }
  sub_10003ABA4(*(void *)(a3 + 120), v51, 0, v44);
  [*(id *)(a3 + 3656) setLinkUpForNetwork:v51];
  if (*(unsigned char *)(a3 + 433)) {
    *(_WORD *)(a3 + 417) = 0;
  }
  *(CFAbsoluteTime *)(a3 + 704) = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a3 + 952) = CFAbsoluteTimeGetCurrent();
  uint64_t v52 = *(void *)(a3 + 976);
  if (v52)
  {
    CFStringRef v53 = (const __CFString *)sub_10001E404((uint64_t)v51, @"SSID_STR");
    CFStringRef v54 = (const __CFString *)sub_10001E404(v52, @"SSID_STR");
    int v55 = 0;
    int v56 = 1021;
    if (v53 && v54)
    {
      if (CFStringCompare(v53, v54, 0))
      {
        int v55 = 0;
      }
      else
      {
        int v56 = *(_DWORD *)(a3 + 984);
        int v55 = *(_DWORD *)(a3 + 988);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: SSID (%@) matches", "__WiFiDeviceManagerLinkEventCallback", v53 message];
        }
      }
    }
    dispatch_source_set_timer(*(dispatch_source_t *)(a3 + 1000), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    sub_1001307DC(a3, v52, v56, v55);
    CFIndex v58 = *(const void **)(a3 + 976);
    if (v58)
    {
      CFRelease(v58);
      *(void *)(a3 + 976) = 0;
    }
  }
  if (sub_1000199C0((uint64_t)Value))
  {
    *(_OWORD *)(a3 + 768) = 0u;
    *(_OWORD *)(a3 + 784) = 0u;
    *(void *)(a3 + 944) = 0;
    *(_OWORD *)(a3 + 912) = 0u;
    *(_OWORD *)(a3 + 928) = 0u;
    *(_OWORD *)(a3 + 880) = 0u;
    *(_OWORD *)(a3 + 896) = 0u;
    *(_OWORD *)(a3 + 848) = 0u;
    *(_OWORD *)(a3 + 864) = 0u;
    *(_OWORD *)(a3 + 816) = 0u;
    *(_OWORD *)(a3 + 832) = 0u;
    *(_OWORD *)(a3 + 800) = 0u;
    *(_OWORD *)(a3 + 736) = 0u;
    *(_OWORD *)(a3 + 752) = 0u;
    *(_DWORD *)(a3 + 748) = 0x7FFFFFFF;
    *(_DWORD *)(a3 + 768) = 0x7FFFFFFF;
    *(_DWORD *)(a3 + 840) = 0x7FFFFFFF;
    *(_DWORD *)(a3 + 792) = 0x7FFFFFFF;
    *(void *)(a3 + 816) = 0xFFFFFF807FFFFFFFLL;
    *(CFAbsoluteTime *)(a3 + 736) = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)(a3 + 884) = 0;
    *(unsigned char *)(a3 + 1008) = 0;
    *(void *)(a3 + 1032) = 0;
    *(_OWORD *)(a3 + 1016) = 0u;
    *(void *)(a3 + 1048) = 0;
    *(void *)(a3 + 1040) = 0;
  }
  v184[0] = _NSConcreteStackBlock;
  v184[1] = 3221225472;
  v184[2] = sub_100130DF8;
  v184[3] = &unk_100241558;
  v184[4] = a3;
  sub_10010A88C(a3, (const void **)v51, (uint64_t)v184);
  CFMutableDictionaryRef v59 = sub_10001A5A8(*(const __CFArray **)(a3 + 3704), (const void **)v51);
  if (v59)
  {
    LODWORD(v194) = 0;
    sub_1000570A8((uint64_t)v59, (uint64_t)&v194);
    sub_100056E00((unsigned int *)&v194);
  }
  if (sub_10001BB2C((BOOL)Value) || sub_1000C74BC((uint64_t)Value)) {
    sub_10010677C(a3);
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a3 + 3536));
  LODWORD(v190) = 0;
  v177[376] = 0;
  if (Count)
  {
    v197.length = Count;
    v197.location = 0;
    FirstIndexOfCFDataRef Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a3 + 3536), v197, Value);
    if (FirstIndexOfValue != -1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 3536), FirstIndexOfValue);
      if (ValueAtIndex)
      {
        uint64_t v63 = (uint64_t)ValueAtIndex;
        CFNumberRef v64 = (const __CFNumber *)sub_10001E404((uint64_t)ValueAtIndex, @"WiFiManagerKnownNetworksEventType");
        CFNumberRef v65 = v64;
        if (v64) {
          CFNumberGetValue(v64, kCFNumberIntType, &v190);
        }
        if (!sub_1000C8140(v63) && (!v65 || v190 != 3))
        {
          v177[376] = 1;
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3 message:"Enabling learning logic for Hidden property of the network\n"];
          }
        }
      }
    }
  }
  CFMutableArrayRef v67 = v177;
  if (v177[1840] && v177[3] && *v177 <= 0xDu && (v177[1841] & 4) != 0)
  {
    if ((v68 = sub_1000C6FC0((uint64_t)Value, @"CHANNEL"), unsigned int v69 = *v177, v69 <= 0xD)
      && v68 <= 13
      && v69 != v68
      || v69 >= 0xF && v68 >= 15 && v69 != v68)
    {
      unsigned __int8 *v177 = v68;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"Update MIS channel %d\n", *v177];
      }
      CFMutableArrayRef v67 = v177;
    }
  }
  if (*(void *)(a3 + 6744))
  {
    v67[1681] = 0;
    if (CFArrayGetCount(*(CFArrayRef *)(a3 + 6912)))
    {
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a3 + 6912));
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Clearing all user suppressed Auto Hotspot Devices \n", "__WiFiDeviceManagerClearSuppressedAutoHotSpotDevices")];
      }
    }
    if ([*(id *)(a3 + 6936) count]) {
      [*(id *)(a3 + 6936) removeAllObjects];
    }
    CFMutableArrayRef v72 = sub_10001E404((uint64_t)Value, @"SSID_STR");
    if (sub_10001E71C((uint64_t)Value))
    {
      if (CFArrayGetCount(*(CFArrayRef *)(a3 + 6920)))
      {
        CFIndex v73 = CFArrayGetCount(*(CFArrayRef *)(a3 + 6920));
        if (v73 >= 1)
        {
          CFIndex v74 = v73;
          CFIndex v75 = 0;
          while (1)
          {
            int v76 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 6920), v75);
            if ([*(id *)(a3 + 6744) isEqualHotspotDevicesName:v76 compareTo:v72]) {
              break;
            }
            if (v74 == ++v75) {
              goto LABEL_163;
            }
          }
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: Connected to Personal Hotspot %@ Unblacklisting %@\n", "__WiFiDeviceManagerClearSuppressedAutoHotSpotDevices", v72, v76 message];
          }
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a3 + 6920), v75);
        }
      }
    }
LABEL_163:
    if (CFArrayGetCount(*(CFArrayRef *)(a3 + 6928)))
    {
      CFIndex v78 = CFArrayGetCount(*(CFArrayRef *)(a3 + 6928));
      if (v78 >= 1)
      {
        CFIndex v79 = v78;
        CFIndex v80 = 0;
        while (1)
        {
          id v81 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 6928), v80);
          if (v81)
          {
            uint64_t v82 = v81;
            if (!sub_10001E404((uint64_t)v81, @"lastDisconnectTimestampKey")) {
              break;
            }
            if (sub_10001E71C((uint64_t)Value))
            {
              unsigned int v83 = sub_10001A43C(v82);
              if (CFEqual(v72, v83)) {
                break;
              }
            }
            if (sub_1000C7A08((uint64_t)v82)) {
              break;
            }
          }
          if (v79 == ++v80) {
            goto LABEL_176;
          }
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Allowlisting Personal Hotspot %@\n", "__WiFiDeviceManagerClearSuppressedAutoHotSpotDevices", sub_10001A43C(v82) message];
        }
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a3 + 6928), v80);
      }
    }
  }
LABEL_176:
  int v85 = sub_1000C6FC0((uint64_t)Value, @"RSSI");
  uint64_t v86 = *(void *)(a3 + 64);
  int v87 = sub_100072AF0(v86);
  sub_100047850(v86, 1, 0, v87, dword_10027DDAC, v85, v51, SHIDWORD(v194));
  uint64_t v88 = *(void *)(a3 + 3512);
  if (v88 && sub_10001E71C(v88))
  {
    LODWORD(v190) = -1431655766;
    uint64_t v89 = sub_1000732F4(*(void *)(a3 + 64), &v190);
    if (v89)
    {
      uint64_t v90 = v89;
      LODWORD(v190) = 111;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, " fail to get auth type after connect, error %d", v90);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, @" Auth type for PH client is 0x%X", v190];
      }
    }
    uint64_t v92 = v190;
    BOOL v93 = sub_1000C66D0(*(void *)(a3 + 3512));
    int v94 = sub_1000C6FE8(*(const __CFDictionary **)(a3 + 3512));
    *(_DWORD *)(a3 + 6468) = sub_100046B20(v92, v93, v94);
  }
  dword_10027DDAC = 0;
  sub_10011083C(a3, 3u, 0);
  *(unsigned char *)(a3 + 8821) = 0;
  if (_os_feature_enabled_impl()) {
    sub_100006664((uint64_t *)a3);
  }
  int v95 = sub_1000059B0((uint64_t)Value);
  *(_WORD *)(a3 + 3865) = 0;
  if (v95 > 79)
  {
    if (v95 == 80)
    {
      char v96 = 2;
      goto LABEL_195;
    }
    if (v95 == 160)
    {
      char v96 = 3;
      goto LABEL_195;
    }
  }
  else if (v95 == 20)
  {
    *(unsigned char *)(a3 + 3864) = 0;
  }
  else if (v95 == 40)
  {
    char v96 = 1;
LABEL_195:
    *(unsigned char *)(a3 + 3864) = v96;
  }
LABEL_343:
  *(_DWORD *)(a3 + 6208) = 0;
  if (_os_feature_enabled_impl())
  {
    sub_100006664((uint64_t *)a3);
    sub_100005AFC(a3);
  }
  sub_1000130BC(a3);
  uint64_t v168 = *(void *)(a3 + 64);
  if (Value) {
    BOOL v169 = sub_1001310B0(a3, (const void **)Value) != 0;
  }
  else {
    BOOL v169 = 0;
  }
  sub_10006C484(v168, v169);
  if (v9) {
    CFRelease(v9);
  }
}

void sub_1000F19D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F19F8(uint64_t a1, uint64_t a2)
{
  int v2 = *(uint64_t (**)(uint64_t, void))(a2 + 4024);
  if (v2) {
    return v2(a2, *(void *)(a2 + 4032));
  }
  else {
    return 0;
  }
}

void sub_1000F1A18(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  CFNumberRef v7 = (const void *)sub_10005FC0C(a1);
  if (!a3) {
    return;
  }
  if (!a2 || !a4 || !v7 || !CFEqual(v7, a2)) {
    goto LABEL_9;
  }
  if (sub_10006A38C(*(void *)(a3 + 64)))
  {
    int64_t v8 = sub_10005FC0C(*(void *)(a3 + 64));
    if (v8)
    {
      unsigned int v9 = (const void *)v8;
      *(_DWORD *)(a3 + 5424) = 0;
      sub_10006EAF4(*(void *)(a3 + 64), v8, (uint64_t)sub_100131238, a3);
      sub_10006EB00(*(void *)(a3 + 64), v9, (uint64_t)sub_100131428, a3);
      sub_10006B330(*(void *)(a3 + 64), v9, (uint64_t)sub_1001316E0, a3);
      sub_10006EB40(*(void *)(a3 + 64), v9, (uint64_t)sub_100131A78, a3);
      sub_100073450(*(void *)(a3 + 64), v9, (uint64_t)sub_100131B54, a3);
      sub_100073BEC(*(void *)(a3 + 64), v9, (uint64_t)sub_100131D98, a3);
LABEL_9:
      if (!a2) {
        return;
      }
      goto LABEL_10;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null awdlIfname.", "__WiFiDeviceManagerInitializeAwdlState")
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL is not supported on the device.", "__WiFiDeviceManagerInitializeAwdlState")];
    }
  }
LABEL_10:
  uint64_t v10 = *(void (**)(uint64_t, const void *, uint64_t, uint64_t))(a3 + 4424);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 4432);
    v10(a3, a2, v11, a4);
  }
}

void sub_1000F1C00(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (!a3 || !a3[515]) {
    return;
  }
  int valuePtr = -1431655766;
  keys = @"HostApEnabled";
  values = kCFBooleanFalse;
  if (!a4)
  {
    CFDictionaryRef v15 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    ((void (*)(uint64_t *, uint64_t, CFDictionaryRef))a3[515])(a3, a3[516], v15);
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: hostAP stopped", "__WiFiDeviceManagerHostApStateChangedEventCallback")
    }
    CFDictionaryRef v13 = 0;
    goto LABEL_27;
  }
  CFArrayRef v5 = sub_1001112DC((uint64_t)a3);
  CFArrayRef v6 = v5;
  if (v5 && (int Count = CFArrayGetCount(v5), Count >= 1))
  {
    CFIndex v8 = 0;
    uint64_t v9 = Count;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v8);
      uint64_t v11 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex)
      {
        CFNumberRef v12 = (const __CFNumber *)sub_10001E404((uint64_t)ValueAtIndex, @"networkRole");
        if (v12)
        {
          CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr == 3) {
            goto LABEL_13;
          }
          uint64_t v11 = 0;
        }
      }
      ++v8;
    }
    while (v9 != v8);
    if (!v11) {
      goto LABEL_22;
    }
LABEL_13:
    CFDictionaryRef v13 = sub_10000E5B8(v11);
    if (v13)
    {
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v13);
      if (MutableCopy)
      {
        CFDictionaryRef v15 = MutableCopy;
        CFDictionaryAddValue(MutableCopy, @"HostApEnabled", kCFBooleanTrue);
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:3 message:@"%s: hostAP started" args:__WiFiDeviceManagerHostApStateChangedEventCallback];
        }
        ((void (*)(uint64_t *, uint64_t, CFDictionaryRef))a3[515])(a3, a3[516], v15);
        if (!v6) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
    }
  }
  else
  {
LABEL_22:
    CFDictionaryRef v13 = 0;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: Error. Stopping HostAP network."];
  }
  CFMutableArrayRef v19 = (const void *)sub_100017C48(a3[8]);
  sub_10010D6A0((uint64_t)a3, v19, 0, 0, 0);
  CFDictionaryRef v15 = 0;
  if (!v6) {
    goto LABEL_27;
  }
LABEL_26:
  CFRelease(v6);
LABEL_27:
  if (v15) {
    CFRelease(v15);
  }
  if (v13) {
    CFRelease(v13);
  }
}

void sub_1000F1EC4(uint64_t a1, const void *a2, uint64_t a3)
{
  if (!a3) {
    return;
  }
  *(_DWORD *)(a3 + 6208) = 0;
  CFArrayRef v5 = sub_100018FA8(a3, a2, 1);
  if (!v5) {
    return;
  }
  CFArrayRef v6 = v5;
  CFNumberRef v7 = (_WORD *)(a3 + 8606);
  CFArrayRef v8 = *(const __CFArray **)(a3 + 3528);
  if (v8)
  {
    v44.length = CFArrayGetCount(*(CFArrayRef *)(a3 + 3528));
    v44.location = 0;
    FirstIndexOfCFDataRef Value = CFArrayGetFirstIndexOfValue(v8, v44, v6);
    if (FirstIndexOfValue != -1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 3528), FirstIndexOfValue);
      CFStringRef v11 = (const __CFString *)sub_10001E404((uint64_t)ValueAtIndex, @"BSSID");
      sub_1000CB1B8((uint64_t)ValueAtIndex, v11, 1);
      sub_1000CA19C(ValueAtIndex, v6);
      if (_os_feature_enabled_impl())
      {
        id v12 = sub_100005420(a3);
        if (v12)
        {
          CFDictionaryRef v13 = v12;
          uint64_t v14 = *(void *)(a3 + 6792);
          [v12 coordinate];
          CLLocationDegrees v16 = v15;
          [v13 coordinate];
          CLLocationDegrees v18 = v17;
          [v13 horizontalAccuracy];
          sub_1000A32E4(v14, ValueAtIndex, v16, v18, v19, [v13 timestamp]);
        }
      }
      sub_10010C6B4((NSObject **)a3, ValueAtIndex);
      CFNumberRef v20 = sub_10001E404((uint64_t)v6, @"BSSID");
      int v42 = sub_1000CB75C(ValueAtIndex, v20);
      if (v42)
      {
        CFMutableArrayRef v22 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          int v23 = sub_10001E404((uint64_t)v6, @"BSSID");
          [v22 WFLog:3, "Edge BSS detected - BSSID %@ SSID %@", v23, sub_10001A43C(v6) message];
        }
      }
      if (sub_1000CBBE4((uint64_t)ValueAtIndex))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Detected multiAP environment for %@", sub_10001A43C(v6) message];
        }
      }
      uint64_t v25 = *(void *)(a3 + 64);
      unsigned int v26 = sub_100019AD4(a3, ValueAtIndex);
      sub_10005DD54(v25, (uint64_t)a2, ValueAtIndex, v26, 0, 0, 0);
      CFMutableSetRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFDateRef v29 = CFDateCreate(kCFAllocatorDefault, Current);
      CFDateRef v30 = v29;
      if (Mutable && v29)
      {
        CFMutableArrayRef v31 = sub_10001E404(*(void *)(a3 + 3512), @"BSSID");
        uint64_t v32 = sub_10001E404(*(void *)(a3 + 3512), @"CHANNEL");
        uint64_t v33 = sub_10001E404((uint64_t)v6, @"BSSID");
        CFMutableSetRef v34 = sub_10001E404((uint64_t)v6, @"CHANNEL");
        if (v31)
        {
          if (v32)
          {
            if (v33)
            {
              id v35 = v34;
              if (v34)
              {
                CFDictionarySetValue(Mutable, @"RoamOriginBSSID", v31);
                CFDictionarySetValue(Mutable, @"RoamOriginChannel", v32);
                CFDictionarySetValue(Mutable, @"RoamDestBSSID", v33);
                CFDictionarySetValue(Mutable, @"RoamDestChannel", v35);
                CFDictionarySetValue(Mutable, @"RoamTimestamp", v30);
                CFArrayRef v36 = *(const __CFArray **)(a3 + 272);
                CFIndex Count = CFArrayGetCount(v36);
                CFArrayInsertValueAtIndex(v36, Count % 100, Mutable);
              }
            }
          }
        }
      }
      else if (!Mutable)
      {
LABEL_26:
        if (v30) {
          CFRelease(v30);
        }
        CFNumberRef v7 = (_WORD *)(a3 + 8606);
        char v38 = v42;
        goto LABEL_29;
      }
      CFRelease(Mutable);
      goto LABEL_26;
    }
  }
  char v38 = 0;
LABEL_29:
  _WORD *v7 = 256;
  if (sub_1000CD6C4((uint64_t)v6))
  {
    *(unsigned char *)CFNumberRef v7 = 1;
    *(_OWORD *)(a3 + 8528) = 0u;
    *(_OWORD *)(a3 + 8544) = 0u;
    *(_OWORD *)(a3 + 8560) = 0u;
    *(CFAbsoluteTime *)(a3 + 8576) = CFAbsoluteTimeGetCurrent();
  }
  sub_100101574(a3, (uint64_t)a2);
  ++*(_DWORD *)(a3 + 744);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: transition attempts# %d", "__WiFiDeviceManagerUpdateNetworkTransitionStateOnBssidChanged", *(unsigned int *)(a3 + 3392));
  }
  *(_DWORD *)(a3 + 3392) = -1;
  if (!*(unsigned char *)(a3 + 6632))
  {
    if (_os_feature_enabled_impl()) {
      sub_10001FD64(a3, 0x23uLL);
    }
    else {
      sub_100100D74(a3, 4);
    }
  }
  sub_10010547C(a3, v6);
  sub_10003ABA4(*(void *)(a3 + 120), v6, 2, v38);
  sub_100130FEC(a3);
  CFDateRef v40 = *(void (**)(uint64_t, const void *, void *, void, void, void))(a3 + 3904);
  if (v40) {
    v40(a3, a2, v6, 0, 0, *(void *)(a3 + 3912));
  }
  unsigned int v41 = *(void (**)(uint64_t, const void *, void, uint64_t, void))(a3 + 4392);
  if (v41) {
    v41(a3, a2, *(void *)(a3 + 4400), 1, 0);
  }
  if (*(void *)(a3 + 7368))
  {
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_100132384;
    v43[3] = &unk_100241558;
    v43[4] = a3;
    sub_10010A88C(a3, (const void **)v6, (uint64_t)v43);
  }
  if (+[WiFiAIRAgent sharedInstance]) {
    [+[WiFiAIRAgent sharedInstance] processRoamEvent:v6];
  }
  CFRelease(v6);
  sub_10011083C(a3, 4u, 0);
}

void sub_1000F2484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    id v7 = +[WiFiRoamManager sharedWiFiRoamManager];
    if (v7)
    {
      [v7 setRoamStart:a4 forInterface:a2];
      uint64_t v8 = *(void *)(a3 + 120);
      sub_10003C884(v8);
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, roamManager is NULL", @"__WiFiDeviceManagerRoamScanStartEventCallback"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, WiFiDeviceManagerRef is NULL", @"__WiFiDeviceManagerRoamScanStartEventCallback"];
    }
  }
}

void sub_1000F257C(uint64_t a1, const void *a2, uint64_t a3, const __CFDictionary *a4)
{
  uint64_t v39 = 0;
  *(void *)int valuePtr = 0;
  uint64_t v38 = 0;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v35 = v4;
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  long long v34 = v4;
  DWORD1(v35) = 0;
  HIDWORD(v35) = 0;
  CFStringRef v36 = @"Unknown";
  if (!a3) {
    return;
  }
  uint64_t v9 = sub_100018FA8(a3, a2, 1);
  uint64_t v32 = *(void *)(a3 + 3512);
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a4, @"APPLE80211KEY_SUPPLICANTEVENT_TSN_DISABLED_FLAGS");
  if (Value) {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr[1]);
  }
  if (v9)
  {
    CFArrayRef v11 = *(const __CFArray **)(a3 + 3528);
    if (v11)
    {
      v41.length = CFArrayGetCount(*(CFArrayRef *)(a3 + 3528));
      v41.location = 0;
      FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v11, v41, v9);
      if (FirstIndexOfValue == -1) {
        CFDictionaryRef ValueAtIndex = 0;
      }
      else {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 3528), FirstIndexOfValue);
      }
LABEL_13:
      CFNumberRef v15 = (const __CFNumber *)sub_100024070((uint64_t)v9);
      int v16 = sub_100023F30((uint64_t)v9);
      if (v15)
      {
        __int16 v33 = -21846;
        CFNumberGetValue(v15, kCFNumberSInt16Type, &v33);
        WORD2(v35) = v33;
      }
      if (v16) {
        WORD3(v35) = v16;
      }
      goto LABEL_17;
    }
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Known network hasn't created, update transition disabled flag after assoc finish", "__WiFiDeviceManagerSupplicantEventCallback")];
  }
  CFDictionaryRef ValueAtIndex = 0;
  if (v9) {
    goto LABEL_13;
  }
LABEL_17:
  if (sub_10006C19C(a1))
  {
    CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(a4, @"APPLE80211KEY_SUPPLICANTEVENT_EAPOL_START_M1_DURATION");
    if (v17) {
      CFNumberGetValue(v17, kCFNumberSInt32Type, valuePtr);
    }
    CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(a4, @"APPLE80211KEY_SUPPLICANTEVENT_M1_M2_DURATION");
    if (v18) {
      CFNumberGetValue(v18, kCFNumberSInt32Type, (char *)&v39 + 4);
    }
    CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(a4, @"APPLE80211KEY_SUPPLICANTEVENT_M2_M3_DURATION");
    if (v19) {
      CFNumberGetValue(v19, kCFNumberSInt32Type, &v39);
    }
    CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(a4, @"APPLE80211KEY_SUPPLICANTEVENT_M3_M4_DURATION");
    if (v20) {
      CFNumberGetValue(v20, kCFNumberSInt32Type, (char *)&v38 + 4);
    }
    CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(a4, @"APPLE80211KEY_SUPPLICANTEVENT_TOTAL_4WAY_DURATION");
    if (v21) {
      CFNumberGetValue(v21, kCFNumberSInt32Type, &v38);
    }
    CFBooleanRef v22 = (const __CFBoolean *)CFDictionaryGetValue(a4, @"APPLE80211KEY_SUPPLICANTEVENT_JOINING_NEW_NETWORK");
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "4WayHSDuration (us): eapol_start_m1_dur: %d m1_m2_dur: %d m2_m3_dur %d m3_m4_dur: %d total_4way_hs_dur: %d Auto-Joining New Network: %d", valuePtr[0], HIDWORD(v39), v39, HIDWORD(v38), v38, CFBooleanGetValue(v22));
    }
    *(void *)&long long v34 = __PAIR64__(HIDWORD(v39), valuePtr[0]);
    *((void *)&v34 + 1) = __PAIR64__(HIDWORD(v38), v39);
    LODWORD(v35) = v38;
    if (*(_DWORD *)(a3 + 5396) == 102)
    {
      BOOL v24 = (*(unsigned char *)(a3 + 5392) & 2) != 0 || *(unsigned char *)(a3 + 49) != 0;
      BYTE8(v35) = v24;
      if (*(unsigned char *)(a3 + 5392))
      {
        BOOL v25 = 1;
LABEL_38:
        BYTE9(v35) = v25;
        HIDWORD(v35) = *(_DWORD *)(a3 + 6208);
        LOBYTE(v37) = CFBooleanGetValue(v22) != 0;
        unsigned int v26 = sub_10001E404((uint64_t)v9, @"BSSID");
        if (v26)
        {
          CFStringRef v27 = (const __CFString *)+[WiFiUsageAccessPointProfile profileForBSSID:v26];
          if (v27) {
            CFStringRef v36 = v27;
          }
        }
        sub_10005832C((unsigned int *)&v34);
        goto LABEL_42;
      }
    }
    else
    {
      BYTE8(v35) = *(unsigned char *)(a3 + 49) != 0;
    }
    BOOL v25 = *(unsigned char *)(a3 + 50) != 0;
    goto LABEL_38;
  }
LABEL_42:
  if (v9)
  {
    if (sub_1000CD6C4((uint64_t)v9))
    {
      CFDictionaryRef v28 = *(void (**)(uint64_t, const void *, void))(a3 + 4360);
      if (v28)
      {
        v28(a3, a2, *(void *)(a3 + 4368));
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"Signal WiFi to incriment 24GHz M1M4 Handshake Count"];
        }
      }
    }
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Getting transition disabled flags,  %u", "__WiFiDeviceManagerSupplicantEventCallback", valuePtr[1])];
  }
  int v31 = valuePtr[1];
  if (valuePtr[1] != 0x80000000)
  {
    *(_DWORD *)(a3 + 3472) = valuePtr[1];
    if (v32 && v31)
    {
      sub_10001C6A4(v32, @"TransitionDisabledFlags", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
      int v31 = valuePtr[1];
    }
    sub_100132410((NSObject **)a3, ValueAtIndex, v31, 1);
  }
  if (v9) {
    CFRelease(v9);
  }
}

void sub_1000F29FC(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    id v7 = +[WiFiRoamManager sharedWiFiRoamManager];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = sub_100018FA8(a3, a2, 1);
      if (v9)
      {
        uint64_t v10 = v9;
        [v8 setRoamEndState:a4 forInterface:a2];
        if ([v8 canSubmitMetrics])
        {
          id v11 = [v8 copyRoamStatus];
          if (v11)
          {
            id v12 = v11;
            uint64_t v14 = +[NSMutableDictionary dictionaryWithDictionary:v12];
            id v15 = [a4 objectForKey:@"ROAM_CACHE"];
            if (v15) {
              [(NSMutableDictionary *)v14 setObject:v15 forKey:@"ROAM_CACHE"];
            }
            sub_1001324A0(a3, v10, (const __CFDictionary *)v14);
            CFRelease(v12);
          }
        }
        CFRelease(v10);
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, roamManager is NULL", @"__WiFiDeviceManagerRoamScanEndEventCallback"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, WiFiDeviceManagerRef is NULL", @"__WiFiDeviceManagerRoamScanEndEventCallback"];
    }
  }
}

void sub_1000F2BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = +[WiFiRoamManager sharedWiFiRoamManager];
  if (v6)
  {
    [v6 setRoamPrep:a4 forInterface:a2];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, roamManager is NULL", @"__WiFiDeviceManagerRoamPrepEventCallback"];
    }
  }
}

void sub_1000F2C64(uint64_t a1, const void *a2, uint64_t a3)
{
  if (a3)
  {
    CFDictionaryRef v6 = (const __CFDictionary *)sub_100018FA8(a3, a2, 1);
    if (v6)
    {
      CFDictionaryRef v7 = v6;
      uint64_t v8 = *(const void **)(a3 + 3512);
      if (!v8
        || !CFEqual(v6, v8)
        || sub_10001ED04((uint64_t)v7)
        || sub_10001FC1C((uint64_t)v7)
        || sub_1000C6FE8(v7))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:2 message:"APPLE80211_M_DECRYPTION_FAILURE! omitting disassociate because this is a WPA network"];
        }
      }
      else
      {
        uint64_t v10 = sub_10001E404(*(void *)(a3 + 3512), @"BSSID");
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"Received a decryption failure from the device.  Disassociating. "];
        }
        sub_1000FEA7C(a3, a2, 1004, "__WiFiDeviceManagerDecryptionEventCallback", 7711);
        id v12 = sub_10000AD1C(*(void *)(a3 + 3512));
        if (([*(id *)(a3 + 6648) isNetworkInDenyListedState:1 scanResult:v12] & 1) == 0) {
          *(_DWORD *)(a3 + 3280) = sub_100123384(a3, (uint64_t)a2, 1, 1, *(const void **)(a3 + 3512), 0);
        }
        id v13 = sub_100103A84(a3, 3, 0, (uint64_t)v10, 5);
        [*(id *)(a3 + 6648) setNetworkDenyListInfo:v13 forScanResult:v12];
      }
      CFRelease(v7);
    }
  }
}

void sub_1000F2E18(uint64_t a1, const void *a2, const __CFArray *a3, uint64_t a4)
{
  if (!a4) {
    return;
  }
  *(unsigned char *)(a4 + 3304) = 1;
  if (!sub_10010FA10(a4))
  {
    CFArrayRef v9 = 0;
LABEL_6:
    CFIndex Count = 0;
    goto LABEL_7;
  }
  CFDictionaryRef v7 = sub_10001C1B4(*(void *)(a4 + 64), a2);
  if (v7)
  {
    CFIndex Count = (CFIndex)v7;
    CFArrayRef v9 = 0;
    goto LABEL_7;
  }
  CFNumberRef v17 = sub_10005A4C4(a3);
  CFArrayRef v9 = v17;
  if (!v17) {
    goto LABEL_6;
  }
  CFIndex Count = CFArrayGetCount(v17);
  if (Count)
  {
    CFIndex v18 = CFArrayGetCount(*(CFArrayRef *)(a4 + 3584));
    if (v18)
    {
      if (Count < 1) {
        goto LABEL_48;
      }
      uint64_t v19 = v18;
      CFIndex v20 = 0;
      CFIndex v21 = -1;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v9, v20);
        if (ValueAtIndex)
        {
          int v23 = sub_10001A43C(ValueAtIndex);
          if (v19 >= 1)
          {
            BOOL v24 = v23;
            if (v23)
            {
              CFIndex v25 = 0;
              while (1)
              {
                unsigned int v26 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 3584), v25);
                if (v26)
                {
                  CFStringRef v27 = sub_10001A43C(v26);
                  if (v27)
                  {
                    if (CFEqual(v24, v27)) {
                      break;
                    }
                  }
                }
                if (v19 == ++v25) {
                  goto LABEL_41;
                }
              }
              if (v25 < v21 || v21 == -1) {
                CFIndex v21 = v25;
              }
            }
          }
        }
LABEL_41:
        ++v20;
      }
      while (v20 != Count);
      if (v21 == -1)
      {
LABEL_48:
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"PNO networks not from background scan candidates (known networks). Nothing to do."];
        }
      }
      else
      {
        CFDateRef v29 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 3584), v21);
        CFDateRef v30 = *(const void **)(a4 + 3512);
        if (v30 && CFEqual(v30, v29))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3 message:"Previous network is the same as PNO network. Nothing to do."];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "Previous network is different from PNO network. Promoting %@.", sub_10001A43C(v29) message];
          }
          sub_10010547C(a4, v29);
        }
        *(_DWORD *)(a4 + 192) = 5;
        sub_100102284(a4);
        if (_os_feature_enabled_impl())
        {
          sub_10001FD64(a4, 6uLL);
        }
        else
        {
          [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:6 interfaceName:sub_100017C48(*(void *)(a4 + 64))];
          sub_1001028E4(a4, 2, (uint64_t)"__WiFiDeviceManagerPromotePNONetworks");
        }
      }
    }
    goto LABEL_6;
  }
LABEL_7:
  if (a3)
  {
    CFIndex v10 = CFArrayGetCount(a3);
    if (v10 >= 1)
    {
      CFIndex v11 = v10;
      for (CFIndex i = 0; i != v11; ++i)
      {
        id v13 = (__CFDictionary *)CFArrayGetValueAtIndex(a3, i);
        if (v13)
        {
          uint64_t v14 = v13;
          CFDictionaryRemoveValue(v13, @"SSID_STR");
          CFDictionaryRemoveValue(v14, @"SSID");
        }
      }
    }
  }
  if (v9) {
    CFRelease(v9);
  }
  if (Count) {
    CFRelease((CFTypeRef)Count);
  }
  id v15 = *(void (**)(uint64_t, const void *, const __CFArray *, uint64_t))(a4 + 4168);
  if (v15)
  {
    uint64_t v16 = *(void *)(a4 + 4048);
    v15(a4, a2, a3, v16);
  }
}

void sub_1000F3178(uint64_t a1, const void *a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: Processing BlackList Network Event" args:("__WiFiDeviceManagerBlackListNetworkCallback")];
  }
  if (a3)
  {
    CFDictionaryRef v7 = sub_100018FA8(a3, a2, 1);
    if (v7)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Blacklisting %@ for Background Scan", "__WiFiDeviceManagerBlackListNetworkCallback", sub_10001A43C(v7) message];
      }
      id v9 = sub_10000AD1C((uint64_t)v7);
      CFIndex v10 = sub_10001E404((uint64_t)v7, @"BSSID");
      id v11 = sub_100103A84(a3, 2, 0, (uint64_t)v10, 3);
      [*(id *)(a3 + 6648) setNetworkDenyListInfo:v11 forScanResult:v9];
      [*(id *)(a3 + 7368) addFaultEvent:22 forInterface:a2];

      CFRelease(v7);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: Received blackList event, but we are not associated", @"__WiFiDeviceManagerBlackListNetworkCallback"];
      }
    }
  }
}

void sub_1000F3300(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned __int8 *a5, unsigned __int16 *a6, uint64_t a7)
{
  CFDictionaryRef v7 = (unsigned __int8 *)(a7 + 5217);
  if (*(unsigned char *)(a7 + 5219))
  {
    unsigned __int8 *v7 = a3;
    *(unsigned char *)(a7 + 5360) = a3;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS STA Associated: %d associated clients", *v7);
    }
    if (a5)
    {
      CFDataRef v14 = CFDataCreate(kCFAllocatorDefault, a5, 6);
      if (qword_10027DD68)
      {
        if (v7[43]) {
          uint64_t v16 = " Hidden ";
        }
        else {
          uint64_t v16 = "Broadcast";
        }
        if (a4)
        {
          CFNumberRef v17 = " Auto Hotspot Client ";
        }
        else if ((a4 & 2) != 0)
        {
          CFNumberRef v17 = "Instant Hotspot Client ";
        }
        else
        {
          CFNumberRef v17 = "Broadcast iOS Client";
          if ((a4 & 4) == 0) {
            CFNumberRef v17 = " Others ";
          }
        }
        [(id)qword_10027DD68 WFLog:3, "%s: MIS Mode: %s, Client Type: %s client macAddr: %@", "__WiFiDeviceManagerSTAArriveCallback", v16, v17, v14 message];
      }
      if ((a4 & 3) != 0)
      {
        uint64_t v19 = (CFMutableSetRef *)(a7 + 5296);
      }
      else
      {
        CFIndex Count = CFSetGetCount(*(CFSetRef *)(a7 + 5272));
        uint64_t v19 = (CFMutableSetRef *)(a7 + 5288);
        if (!Count) {
          uint64_t v19 = (CFMutableSetRef *)(a7 + 5304);
        }
      }
      CFSetAddValue(*v19, v14);
      if (v14) {
        CFRelease(v14);
      }
      sub_10010F2A8(a7, 0);
    }
    if (!_MISSetHostCount || _MISSetHostCount(*(void *)(a7 + 4944), 2, a3))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: Error updating host count at MIS Service" : @"__WiFiDeviceManagerSTAArriveCallback"];
      }
    }
    if (*v7 == 5) {
      sub_100132B30(a7, 1);
    }
    sub_10010E8E0(a7, 0);
    *(CFAbsoluteTime *)(a7 + 5336) = CFAbsoluteTimeGetCurrent() + 3.0;
    v7[111] = 1;
    sub_100122C28(a7, 1, a6, a4, 0);
    int v23 = *(void **)(a7 + 7368);
    if (v23)
    {
      if (a5)
      {
        a5 = +[NSString stringWithFormat:@"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X", *a5, a5[1], a5[2], a5[3], a5[4], a5[5]];
        int v23 = *(void **)(a7 + 7368);
      }
      [v23 addSoftApClientEvent:1 identifier:a5 isAppleClient:(a4 | sub_10005A9E0(a6)) != 0 isInstantHotspot:(a4 >> 1) & 1 isAutoHotspot:a4 & 1 isHidden:v7[43] != 0];
    }
    if (objc_opt_class())
    {
      BOOL v24 = qword_10027DD88;
      dispatch_async(v24, &stru_1002418C8);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: called while MIS is disabled", "__WiFiDeviceManagerSTAArriveCallback")];
    }
  }
}

void sub_1000F36A4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned __int8 *a5, unsigned __int16 *a6, uint64_t a7)
{
  id v9 = a5;
  id v13 = (unsigned __int8 *)(a7 + 5217);
  if (a5) {
    CFDataRef v14 = +[NSString stringWithFormat:@"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X", *a5, a5[1], a5[2], a5[3], a5[4], a5[5]];
  }
  else {
    CFDataRef v14 = 0;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s ifname %@ staNum %d sta_capabilities %d macString %@ \n", "__WiFiDeviceManagerSTALeaveCallback", a2, a3, a4, v14 message];
  }
  if (v13[2])
  {
    unsigned int v16 = *v13;
    if (a3 == 255)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"MIS no traffic for long time. Tear down MIS"];
      }
      int v18 = v13[4];
      if (!_MISSetHostCount || _MISSetHostCount(*(void *)(a7 + 4944), 2, 0))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"__WiFiDeviceManagerSTALeaveCallback: Error updating host count at MIS Service"];
        }
      }
      *id v13 = 0;
      if (v13[2] && !v18)
      {
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:message:3, @"MIS idle timer expired, disabling tethering"];
        }
        sub_10010E474(a7);
        uint64_t v31 = 0;
        memset(v30, 0, sizeof(v30));
        DWORD2(v30[0]) = 7;
        sub_10010E020(a7, (uint64_t)v30);
      }
    }
    else
    {
      if (v16 >= a3)
      {
        *id v13 = a3;
        if (_MISSetHostCount)
        {
          if (_MISSetHostCount(*(void *)(a7 + 4944), 2, a3))
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error updating host count at MIS Service", "__WiFiDeviceManagerSTALeaveCallback")];
            }
          }
        }
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS STA Disassociated: %d associated clients", *v13);
      }
    }
    v13[143] = *v13;
    if (v9)
    {
      CFDataRef v24 = CFDataCreate(kCFAllocatorDefault, v9, 6);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: misIsHidden: %d, client macAddr: %@", "__WiFiDeviceManagerSTALeaveCallback", v13[43], v24 message];
      }
      CFSetRemoveValue(*(CFMutableSetRef *)(a7 + 5288), v24);
      CFSetRemoveValue(*(CFMutableSetRef *)(a7 + 5296), v24);
      CFSetRemoveValue(*(CFMutableSetRef *)(a7 + 5304), v24);
      if (v24) {
        CFRelease(v24);
      }
      sub_10010F2A8(a7, 0);
    }
    if (a3 != 255 && v13[1] == -*v13 && !v13[4])
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Starting MIS idle timer", "__WiFiDeviceManagerSTALeaveCallback")];
      }
      sub_10010E8E0(a7, 3);
    }
    sub_100122C28(a7, 0, a6, 0, 0);
    if (v16 >= 5 && *v13 <= 4u) {
      sub_100132B30(a7, 0);
    }
    CFDictionaryRef v28 = *(void **)(a7 + 7368);
    if (v28)
    {
      if (v9)
      {
        id v9 = +[NSString stringWithFormat:@"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X", *v9, v9[1], v9[2], v9[3], v9[4], v9[5]];
        CFDictionaryRef v28 = *(void **)(a7 + 7368);
      }
      [v28 addSoftApClientEvent:0 identifier:v9 isAppleClient:sub_10005A9E0(a6) != 0 isInstantHotspot:(a4 >> 1) & 1 isAutoHotspot:a4 & 1 isHidden:v13[43] != 0];
    }
    if (objc_opt_class())
    {
      CFDateRef v29 = qword_10027DD88;
      dispatch_async(v29, &stru_1002418E8);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: called while MIS is disabled" : @"__WiFiDeviceManagerSTALeaveCallback"];
    }
  }
}

void sub_1000F3BB0(uint64_t a1, const void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a6)
  {
    CFIndex v10 = (void (*)(void *, const void *, void *, uint64_t, uint64_t, void))a6[519];
    if (v10) {
      v10(a6, a2, a3, a4, a5, a6[520]);
    }
    if (a6[921])
    {
      if (a3) {
        id obj = [a3 objectForKey:@"scanResults"];
      }
      else {
        id obj = 0;
      }
      id v34 = +[NSMutableSet set];
      id v35 = +[NSMutableSet set];
      id v12 = sub_100018FA8((uint64_t)a6, a2, 1);
      uint64_t v32 = a6;
      __int16 v33 = v11;
      uint64_t v30 = a1;
      uint64_t v31 = a2;
      CFTypeRef cf = v12;
      if (v12)
      {
        CFArrayRef v13 = (const __CFArray *)v12;
        unint64_t v37 = sub_10001A43C(v12);
        CFArrayRef v36 = sub_1000C6D70(v13);
      }
      else
      {
        CFArrayRef v36 = 0;
        unint64_t v37 = 0;
      }
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      id v40 = [obj countByEnumeratingWithState:&v41 objects:v45 count:16];
      if (v40)
      {
        uint64_t v39 = *(void *)v42;
        do
        {
          for (CFIndex i = 0; i != v40; CFIndex i = (char *)i + 1)
          {
            if (*(void *)v42 != v39) {
              objc_enumerationMutation(obj);
            }
            id v15 = *(void **)(*((void *)&v41 + 1) + 8 * i);
            id v17 = [v15 objectForKey:@"SSID_STR"];
            id v18 = [v15 objectForKey:@"BSSID"];
            id v19 = [v15 objectForKey:@"CHANNEL_FLAGS"];
            id v20 = [v15 objectForKey:@"CHANNEL"];
            id v21 = [v15 objectForKey:@"RSSI"];
            id v22 = [v15 objectForKey:@"WPS_PROB_RESP_IE"];
            if (v18)
            {
              id v23 = v22;
              id v24 = [WiFiUsageBssDetails bssWithIdentifier:v18 channel:[v20 integerValue] channelFlags:[v19 integerValue] rssi:[v21 integerValue]];
              if (v24)
              {
                id v25 = v24;
                if (!v17
                  || !v37
                  || (v26 = [v17 isEqualToString:v37], CFStringRef v27 = v34, (v26 & 1) == 0))
                {
                  CFStringRef v27 = v35;
                }
                [v27 addObject:v25];
                if (v23 && v36 && [v18 isEqual:v36]) {
                  [+[WiFiUsageMonitor sharedInstance] updateWPSInfo:v15];
                }
              }
            }
          }
          id v40 = [obj countByEnumeratingWithState:&v41 objects:v45 count:16];
        }
        while (v40);
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      sub_100063B04(v30, Mutable);
      [(id)v32[921] setScanningState:0 client:0 neighborBSS:v34 otherBSS:v35 withChannelInfoList:Mutable withRequest:0 forInterface:v31];
      if (cf) {
        CFRelease(cf);
      }
      id v11 = v33;
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
  }
}

uint64_t sub_1000F3F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(a3 + 4008);
    if (v3) {
      return v3(a3, a2, *(void *)(a3 + 4016));
    }
  }
  return result;
}

uint64_t sub_1000F3F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a4 + 4216);
    if (v4) {
      return v4(a4, a2, a3, *(void *)(a4 + 4224));
    }
  }
  return result;
}

uint64_t sub_1000F3F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(a3 + 4264);
    if (v3) {
      return v3(a3, a2, *(void *)(a3 + 4272));
    }
  }
  return result;
}

void sub_1000F3F74(int a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict)
{
  if (a3 && theDict)
  {
    if (!*(void *)(a3 + 7368)) {
      goto LABEL_34;
    }
    uint64_t valuePtr = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"BSP_EventType");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberLongLongType, &valuePtr);
      int v8 = valuePtr;
      CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"BSP_EventParams");
      if (v9)
      {
        CFDictionaryRef v10 = v9;
        if (v8 == 18)
        {
          CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(v9, @"BSP_CoexMode");
          if (v31)
          {
            CFNumberGetValue(v31, kCFNumberLongLongType, &valuePtr);
            BOOL v32 = valuePtr != 0;
          }
          else
          {
            BOOL v32 = 0;
          }
          [*(id *)(a3 + 7368) updateIsBSPActive:v32];
          goto LABEL_34;
        }
        if (v8 != 19)
        {
LABEL_34:
          uint64_t v39 = *(void (**)(uint64_t, uint64_t, void, CFDictionaryRef))(a3 + 4792);
          if (v39) {
            v39(a3, a2, *(void *)(a3 + 4800), theDict);
          }
          return;
        }
        [*(id *)(a3 + 7368) updateIsBSPActive:1];
        CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v10, @"BSP_LQM_Overflowed");
        if (v11)
        {
          CFNumberGetValue(v11, kCFNumberLongLongType, &valuePtr);
          BOOL v12 = valuePtr != 0;
          CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(v10, @"BSP_LQM_TimeToTST");
          if (v13)
          {
            CFNumberGetValue(v13, kCFNumberLongLongType, &valuePtr);
            uint64_t v46 = valuePtr;
            CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(v10, @"BSP_LQM_SampleDurationMS");
            if (!v14)
            {
              BOOL v33 = 0;
              BOOL v34 = 0;
              uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v37 = v46;
              goto LABEL_33;
            }
            CFNumberGetValue(v14, kCFNumberLongLongType, &valuePtr);
            uint64_t v45 = valuePtr;
            CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v10, @"BSP_LQM_IsScanActive");
            if (v15)
            {
              CFNumberGetValue(v15, kCFNumberLongLongType, &valuePtr);
              BOOL v44 = valuePtr != 0;
              CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(v10, @"BSP_LQM_IsP2PActive");
              if (v16)
              {
                CFNumberGetValue(v16, kCFNumberLongLongType, &valuePtr);
                BOOL v43 = valuePtr != 0;
                CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(v10, @"BSP_LQM_TriggerCount");
                if (v17)
                {
                  CFNumberGetValue(v17, kCFNumberLongLongType, &valuePtr);
                  uint64_t v42 = valuePtr;
                  CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(v10, @"BSP_LQM_MutePercentage");
                  if (v18)
                  {
                    CFNumberGetValue(v18, kCFNumberLongLongType, &valuePtr);
                    uint64_t v19 = valuePtr;
                    CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(v10, @"BSP_LQM_MaxMuteMS");
                    if (v20)
                    {
                      CFNumberGetValue(v20, kCFNumberLongLongType, &valuePtr);
                      uint64_t v41 = valuePtr;
                      CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(v10, @"BSP_LQM_AvgMuteMS");
                      if (v21)
                      {
                        CFNumberGetValue(v21, kCFNumberLongLongType, &valuePtr);
                        uint64_t v22 = valuePtr;
                        CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(v10, @"BSP_LQM_ErrorPercentage");
                        if (v23)
                        {
                          CFNumberGetValue(v23, kCFNumberLongLongType, &valuePtr);
                          uint64_t v24 = valuePtr;
                          CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(v10, @"BSP_LQM_TimeoutPercentageOfTriggers");
                          if (v25)
                          {
                            CFNumberGetValue(v25, kCFNumberLongLongType, &valuePtr);
                            uint64_t v26 = valuePtr;
                            CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(v10, @"BSP_LQM_RejectOrFailPercentageOfTriggers");
                            if (v27)
                            {
                              CFNumberGetValue(v27, kCFNumberLongLongType, &valuePtr);
                              uint64_t v28 = valuePtr;
                              CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v10, @"BSP_LQM_MaxConsecutiveFails");
                              if (v29)
                              {
                                CFNumberGetValue(v29, kCFNumberLongLongType, &valuePtr);
                                uint64_t v30 = valuePtr;
LABEL_45:
                                uint64_t v37 = v46;
                                BOOL v34 = v43;
                                BOOL v33 = v44;
                                uint64_t v38 = v45;
                                uint64_t v35 = v41;
                                uint64_t v36 = v42;
                                goto LABEL_33;
                              }
                            }
                            else
                            {
                              uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
                            }
LABEL_44:
                            uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
                            goto LABEL_45;
                          }
                          uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        else
                        {
                          uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
                          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                      }
                      else
                      {
                        uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
                        uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
                        uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
                      goto LABEL_44;
                    }
                    uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
                    uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
                    uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else
                  {
                    uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
                    uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
                    uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
                    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
                  uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
                  uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
                  uint64_t v37 = v46;
                  BOOL v34 = v43;
                  BOOL v33 = v44;
                  uint64_t v38 = v45;
                  uint64_t v36 = v42;
LABEL_33:
                  LOBYTE(v40) = *(unsigned char *)(a3 + 7042) != 0;
                  objc_msgSend(*(id *)(a3 + 7368), "updateWithBspOverflowed:IsBSPActive:BspTimeToTST:BspSampleDurationMS:IsScanActiveBSP:IsP2PActiveBSP:BspTriggerCount:BspMutePercentage:BspMaxMuteMS:BspAvgMuteMS:BspErrorPercentage:BspTimeOutPercentageOfTriggers:BspRejectOrFailPercentageOfTriggers:bspMaxConsecutiveFails:supportsLinkRecommendation:forInterface:", v12, 1, v37, v38, v33, v34, v36, v19, v35, v22, v24, v26, v28, v30, v40,
                    a2);
                  goto LABEL_34;
                }
                uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v37 = v46;
                BOOL v34 = v43;
                BOOL v33 = v44;
              }
              else
              {
                BOOL v34 = 0;
                uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v37 = v46;
                BOOL v33 = v44;
              }
            }
            else
            {
              BOOL v33 = 0;
              BOOL v34 = 0;
              uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v37 = v46;
            }
            uint64_t v38 = v45;
            goto LABEL_33;
          }
        }
        else
        {
          BOOL v12 = 1;
        }
        BOOL v33 = 0;
        BOOL v34 = 0;
        uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v37 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_33;
      }
    }
  }
}

uint64_t sub_1000F444C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(a3 + 4808);
    if (v3) {
      return v3(a3, a2, *(void *)(a3 + 4816));
    }
  }
  return result;
}

uint64_t sub_1000F446C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(a3 + 4280);
    if (v3) {
      return v3(a3, a2, *(void *)(a3 + 4288));
    }
  }
  return result;
}

void sub_1000F448C(int a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict)
{
  if (a3)
  {
    CFDictionaryRef v6 = *(void (**)(uint64_t, uint64_t, void, CFDictionaryRef))(a3 + 4312);
    if (v6) {
      v6(a3, a2, *(void *)(a3 + 4320), theDict);
    }
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v9[12] = v7;
    long long v8 = v7;
    *(_OWORD *)CFDictionaryRef v9 = v7;
    sub_10003B7F8(*(void *)(a3 + 120), theDict);
    sub_10003B254(*(void *)(a3 + 120), (uint64_t)&v8);
    if (arc4random_uniform(0x63u) <= 1) {
      sub_10010BAF0(a3, (uint64_t)&v8);
    }
    if (*(unsigned __int8 *)(a3 + 3864) != BYTE3(v8)) {
      sub_10010B834(a3, (uint64_t)&v8);
    }
  }
}

void sub_1000F455C(uint64_t a1, const __CFString *a2)
{
}

void sub_1000F4564(uint64_t a1, const __CFString *a2)
{
  if (a2) {
    CFStringRef v2 = a2;
  }
  else {
    CFStringRef v2 = @"SoftErrorTriggeredChipReset";
  }
  if (a1)
  {
    if (*(void *)(a1 + 64))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        CFArrayRef v5 = Mutable;
        if (CFStringGetLength(v2) <= 0 && MGGetBoolAnswer())
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: Will request to chip reset with no triggerReason" : @"WiFiDeviceManagerResetChip"];
          }
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
            sub_100196D48();
          }
        }
        CFDictionaryAddValue(v5, @"CHIP_RESET_TRIGGER", v2);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Calling ChipReset with reason:%@", "WiFiDeviceManagerResetChip", v2 message];
        }
        sub_100065EC0(*(void *)(a1 + 64), v5);
        CFRelease(v5);
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: resetTriggerInfo allocation failed!", "WiFiDeviceManagerResetChip"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: manager->device is NULL", "WiFiDeviceManagerResetChip"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: manager is NULL", "WiFiDeviceManagerResetChip"];
    }
  }
}

void sub_1000F4778(int a1, uint64_t a2, CFDictionaryRef theDict, uint64_t a4)
{
  if (a4)
  {
    CFDictionaryRef v6 = *(void (**)(uint64_t, uint64_t, CFDictionaryRef, void))(a4 + 4472);
    if (v6) {
      v6(a4, a2, theDict, *(void *)(a4 + 4480));
    }
    if (theDict)
    {
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"DRIVER_AVAILABLE");
      if (Value)
      {
        long long v8 = (unsigned char *)(a4 + 5222);
        *(unsigned char *)(a4 + 3488) = CFBooleanGetValue(Value);
        CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DRIVER_AVAILABLE_REASON");
        if (v9) {
          CFNumberGetValue(v9, kCFNumberSInt32Type, (void *)(a4 + 3492));
        }
        if (*(unsigned char *)(a4 + 3488))
        {
          if (*(void *)(a4 + 4944) && *v8)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3, "%s: MIS is in recovery. Driver is available. Restarting MIS network!", "__WiFiDeviceManagerAvailableCallback"];
            }
            sub_10010EF6C(a4);
          }
          if (_os_feature_enabled_impl())
          {
            if (*(unsigned char *)(a4 + 3496)) {
              sub_10001FD64(a4, 7uLL);
            }
          }
          else
          {
            [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:7 interfaceName:sub_100017C48(*(void *)(a4 + 64))];
            sub_1001028E4(a4, 2, (uint64_t)"WiFiDeviceManagerAutoAssociateStart");
          }
          *(unsigned char *)(a4 + 7296) = 0;
          *(unsigned char *)(a4 + 3496) = 0;
          if (*(unsigned char *)(a4 + 3497))
          {
            LocalCenter = CFNotificationCenterGetLocalCenter();
            CFNotificationCenterPostNotification(LocalCenter, @"WiFiChipResetCompleted", 0, 0, 1u);
            *(unsigned char *)(a4 + 3497) = 0;
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3, @"%s: announced driver availability (WiFiChipResetCompleted)", @"__WiFiDeviceManagerAvailableCallback"];
            }
          }
        }
        else
        {
          sub_100145710(a4);
          int v11 = *(_DWORD *)(a4 + 3492);
          if (v11 == -528345084)
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3 message:"clearing slowWiFi HUD on S2R"];
            }
            sub_100145858(a4);
            *(unsigned char *)(a4 + 3496) = 0;
            int v11 = *(_DWORD *)(a4 + 3492);
          }
          else
          {
            *(unsigned char *)(a4 + 3496) = 1;
          }
          if (v11 == -528336895) {
            [*(id *)(a4 + 6648) removeDenyListStateWithDenyListRemoveReason:7];
          }
          if (*(void *)(a4 + 4944))
          {
            int v15 = *(_DWORD *)(a4 + 3492);
            if (v15 == -528345084 || v15 == -528336891) {
              return;
            }
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: MIS is in session. Driver is unavailable. Starting recovery timer!", "__WiFiDeviceManagerAvailableCallback")
            }
            unsigned char *v8 = 1;
            sub_10010E8E0(a4, 1);
          }
          sub_100102284(a4);
        }
      }
    }
  }
}

uint64_t sub_1000F4A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(a3 + 3976);
    if (v3) {
      return v3(a3, a2, *(void *)(a3 + 3984));
    }
  }
  return result;
}

uint64_t sub_1000F4AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a4 + 4184);
    if (v4) {
      return v4(a4, a2, a3, *(void *)(a4 + 4048));
    }
  }
  return result;
}

uint64_t sub_1000F4AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a4 + 4200);
    if (v4) {
      return v4(a4, a2, a3, *(void *)(a4 + 4048));
    }
  }
  return result;
}

void sub_1000F4AE4(uint64_t a1, const __CFString *a2, const __CFDictionary *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v20 = a4 + 5504;
    *(unsigned char *)(a4 + 5504) = 0;
    dispatch_source_set_timer(*(dispatch_source_t *)(a4 + 5512), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(_DWORD *)(a4 + 688) = 0;
    *(void *)(a4 + 680) = 0;
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: Disabling critical phase", "__WiFiDeviceManagerRouterIpv4Callback"];
    }
    CFStringRef v8 = (const __CFString *)sub_100017C48(a1);
    BOOL v9 = 0;
    if (a2 && v8) {
      BOOL v9 = CFEqual(v8, a2);
    }
    BOOL v10 = sub_10005DC28(a1);
    if (v10)
    {
      int v11 = sub_10001C1B4(a1, a2);
      BOOL v12 = v11;
      if (v11 && sub_1000199C0((uint64_t)v11)) {
        *(CFAbsoluteTime *)(a4 + 720) = CFAbsoluteTimeGetCurrent();
      }
    }
    else
    {
      BOOL v12 = 0;
    }
    BOOL v13 = sub_10005DD18(a1);
    uint64_t v14 = sub_10005DD34(a1);
    BOOL v15 = sub_10005DD40(a1);
    CFNumberRef v16 = *(void (**)(uint64_t, const __CFString *, const void *, BOOL, BOOL, uint64_t, BOOL, void))(a4 + 4408);
    if (v16) {
      v16(a4, a2, v12, v9, v13, v14, v15, *(void *)(a4 + 4416));
    }
    if (v10 && v9)
    {
      [*(id *)(a4 + 6624) disarmHomeNetworkTransitionTimer];
      [*(id *)(a4 + 6624) armHomeNetworkTransitionTimer:a4];
    }
    if (qword_10027DD68)
    {
      uint64_t v19 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: ip address configuration completed for %@", "__WiFiDeviceManagerRouterIpv4Callback", sub_10001A43C(v12)]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        CFNumberRef v23 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v19 UTF8String]] UTF8String];
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      }
    }
    if (v12) {
      CFRelease(v12);
    }
    sub_100037624(*(void *)(a4 + 120), a2, a3);
    if (*(unsigned char *)(v20 + 1392))
    {
      if (_os_feature_enabled_impl()) {
        [*(id *)(a4 + 8824) setRetrySchedule:4];
      }
      else {
        sub_1001028E4(a4, 2, (uint64_t)"__WiFiDeviceManagerRouterIpv4Callback");
      }
    }
    sub_10011083C(a4, 5u, v13 | (2 * (v14 != 0)));
    *(unsigned char *)(a4 + 3449) = 1;
    sub_1000130BC(a4);
  }
}

void sub_1000F4E2C(uint64_t a1, const void *a2, uint64_t a3)
{
  if (a3)
  {
    sub_100036B8C(*(void *)(a3 + 120));
    sub_10011E17C(a3, *(const void **)(a3 + 3512), 0);
    CFArrayRef v5 = sub_100018FA8(a3, a2, 1);
    if (v5)
    {
      CFDictionaryRef v6 = v5;
      if (*(unsigned char *)(a3 + 3448))
      {
LABEL_151:
        *(unsigned char *)(a3 + 3448) = 1;
        CFRelease(v6);
        return;
      }
      if (*(void *)(a3 + 4728))
      {
        if (*(void *)(a3 + 240))
        {
          *(void *)&long long valuePtr = 0;
          *((void *)&valuePtr + 1) = &valuePtr;
          uint64_t v91 = 0x2020000000;
          CFTypeRef v92 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
          CFTypeRef v92 = CFRetain(v5);
          CFRetain((CFTypeRef)a3);
          long long v7 = *(NSObject **)(a3 + 240);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100145994;
          block[3] = &unk_10023F220;
          void block[4] = &valuePtr;
          void block[5] = a3;
          dispatch_async(v7, block);
          _Block_object_dispose(&valuePtr, 8);
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." arguments:("__WiFiDeviceManagerWiFiPrimaryInfCallback", "null queue.")]
          }
        }
      }
      uint64_t v9 = *(void *)(a3 + 3512);
      if (!v9 || sub_1000199C0(v9)) {
        goto LABEL_92;
      }
      if (![+[WiFiUserInteractionMonitor sharedInstance] isSetupCompleted])
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: suppressing join alert as setup is not completed" arguments:("__WiFiDeviceManagerShowJoinAlertIfAppropriate")];
        }
        goto LABEL_91;
      }
      if (sub_1000CDCE4(*(void *)(a3 + 3512)) && !sub_10001ED58(*(void *)(a3 + 3512)))
      {
        int v17 = sub_10001E71C(*(void *)(a3 + 3512));
        if (!sub_100072AF0(*(void *)(a3 + 64)))
        {
          if (v17) {
            uint64_t v18 = 5;
          }
          else {
            uint64_t v18 = 4;
          }
          [*(id *)(a3 + 6704) dispatchLowDataModeAlertForNetwork:sub_10001A43C(*(const void **)(a3 + 3512)) withReason:v18];
        }
        LODWORD(valuePtr) = 1;
        CFNumberRef v19 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
        if (v19)
        {
          sub_10001C6A4(*(void *)(a3 + 3512), @"SaveDataMode", v19);
          CFRelease(v19);
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: updating network low data mode to %d", "__WiFiDeviceManagerShowJoinAlertIfAppropriate", valuePtr);
          }
          sub_10010C6B4((NSObject **)a3, *(const void **)(a3 + 3512));
        }
        goto LABEL_91;
      }
      if (sub_100072AF0(*(void *)(a3 + 64)))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: %@ not auto-joined. Suppressing join alert.", "__WiFiDeviceManagerShowJoinAlertIfAppropriate", sub_10001A43C(*(const void **)(a3 + 3512)) message];
        }
        goto LABEL_91;
      }
      if (!*(void *)(a3 + 6720) || !*(_DWORD *)(a3 + 108))
      {
LABEL_92:
        if (!*(unsigned char *)(a3 + 3464))
        {
LABEL_125:
          uint64_t v86 = 0;
          int v87 = &v86;
          uint64_t v88 = 0x2020000000;
          uint64_t v89 = 0;
          if (!*(unsigned char *)(a3 + 6713))
          {
            int v56 = sub_10001E404((uint64_t)v6, @"BSSID");
            if (v56)
            {
              v87[3] = (uint64_t)v6;
              CFRetain(v6);
              uint64_t v80 = 0;
              id v81 = &v80;
              uint64_t v82 = 0x3052000000;
              CFTypeRef v83 = sub_100022D18;
              long long v84 = sub_100022C14;
              uint64_t v85 = 0xAAAAAAAAAAAAAAAALL;
              uint64_t v85 = sub_10000D990((uint64_t)"__WiFiDeviceManagerFetchCurrentNetworkFrom3Bars");
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: fetching network %@ (bssid %@) from 3bars", "__WiFiDeviceManagerFetchCurrentNetworkFrom3Bars", v87[3], v56 message];
              }
              *(unsigned char *)(a3 + 6713) = 1;
              id v59 = +[WiFi3BarsObserver sharedWiFi3BarsObserver];
              *(void *)&long long valuePtr = _NSConcreteStackBlock;
              *((void *)&valuePtr + 1) = 3221225472;
              uint64_t v91 = (uint64_t)sub_100146118;
              CFTypeRef v92 = &unk_100241BB0;
              BOOL v93 = (CFDictionaryRef *)&v86;
              int v94 = &v80;
              uint64_t v95 = a3;
              [v59 forceFetch3BarsNetworkMatchingBSSID:v56 completionHandler:&valuePtr];
              _Block_object_dispose(&v80, 8);
            }
            else if (qword_10027DD68)
            {
              [(id)qword_10027DD68 WFLog:4, "%s: bssid is null for network %@", "__WiFiDeviceManagerFetchCurrentNetworkFrom3Bars", v6 message];
            }
          }
          _Block_object_dispose(&v86, 8);
          sub_100108600(a3);
          if (!*(unsigned char *)(a3 + 3449))
          {
            if (qword_10027DD68)
            {
              CFIndex v61 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: ip address configuration completed for %@", "__WiFiDeviceManagerWiFiPrimaryInfCallback", sub_10001A43C(v6)]) UTF8String]);
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                CFDictionaryRef v62 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v61 UTF8String]] UTF8String];
                LODWORD(valuePtr) = 136446210;
                *(void *)((char *)&valuePtr + 4) = v62;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&valuePtr, 0xCu);
              }
            }
            sub_10011083C(a3, 5u, 4);
          }
          sub_100145A14(a3, v6, 0);
          if (sub_1000C8798((uint64_t)v6))
          {
            CFStringRef v63 = sub_1000C62C8((CFDictionaryRef *)v6);
            if (v63)
            {
              CFStringRef v64 = sub_1000C6758(v6);
              sub_1000DDA38((uint64_t)v64, (uint64_t)v63);
              CFRelease(v63);
            }
          }
          CFNumberRef v65 = sub_10012CD64(a3);
          CFMutableArrayRef v66 = v65;
          if (v65)
          {
            id v67 = [(CFDictionaryRef *)v65 discoveredDevices];
            int v68 = v67;
            if (v67
              && (uint64_t v69 = CWFNetworkProfilePropertyDiscoveredDevicesTimestampKey,
                  [v67 objectForKeyedSubscript:CWFNetworkProfilePropertyDiscoveredDevicesTimestampKey])
              && (objc_msgSend(objc_msgSend(v68, "objectForKeyedSubscript:", v69), "timeIntervalSinceNow"),
                  double v71 = v70,
                  v72 = [v68 objectForKeyedSubscript:CWFNetworkProfilePropertyDiscoveredDevicesNamesKey], id v73 = objc_msgSend(v68, "objectForKeyedSubscript:", CWFNetworkProfilePropertyDiscoveredDevicesCountKey), v71 > -86400.0)&& (v71 > -3600.0 || v72 && v73))
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: skipping update, interval since last update (%f)", "__WiFiDeviceManagerUpdateLocalNetworkDiscoveredDevices", -v71)];
              }
            }
            else
            {
              CFRetain((CFTypeRef)a3);
              CFRetain(v66);
              dispatch_time_t v75 = dispatch_time(0, 15000000000);
              global_queue = dispatch_get_global_queue(0, 0);
              *(void *)&long long valuePtr = _NSConcreteStackBlock;
              *((void *)&valuePtr + 1) = 3221225472;
              uint64_t v91 = (uint64_t)sub_100146CBC;
              CFTypeRef v92 = &unk_100240790;
              BOOL v93 = v66;
              int v94 = (uint64_t *)a3;
              dispatch_after(v75, global_queue, &valuePtr);
            }
            CFRelease(v66);
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:3, "%s: nil profile", "__WiFiDeviceManagerUpdateLocalNetworkDiscoveredDevices"];
            }
          }
          goto LABEL_151;
        }
        if (!MGGetBoolAnswer() || *(unsigned char *)(a3 + 6632))
        {
LABEL_124:
          goto LABEL_125;
        }
        uint64_t v40 = *(void **)(a3 + 7072);
        if (v40)
        {
          if ([v40 isInProgress])
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3 message:@"%s: link throughput measurement already started." : @"__WiFiDeviceManagerPerformThroughputMeasurement"];
            }
            goto LABEL_124;
          }
          uint64_t v42 = *(void **)(a3 + 7072);
          if (v42)
          {
            [v42 abort];

            *(void *)(a3 + 7072) = 0;
          }
        }
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v44 = CFDateCreate(kCFAllocatorDefault, Current);
        CFDateRef v45 = (const __CFDate *)sub_10001E404((uint64_t)v6, @"lastTputMeasurementDate");
        int v46 = sub_10001C1A8(*(void *)(a3 + 64));
        if (v45)
        {
          if (CFDateGetTimeIntervalSinceDate(v44, v45) > dbl_1001CB900[v46 == 0]) {
            goto LABEL_104;
          }
LABEL_117:
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: throughput measurement was last run on %@", "__WiFiDeviceManagerPerformThroughputMeasurement", v45 message];
          }
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: throughput measurement throughput report %@", "__WiFiDeviceManagerPerformThroughputMeasurement", sub_10001E404((uint64_t)v6, @"lastTputMeasurementResults" message];
          }
          goto LABEL_122;
        }
        CFAbsoluteTime v50 = CFAbsoluteTimeGetCurrent();
        CFDateRef v51 = CFDateCreate(kCFAllocatorDefault, v50);
        double v52 = sub_10001CD28((uint64_t)v6);
        CFDateRef v53 = (const __CFDate *)sub_10001CD58(v6);
        if (v53)
        {
          double v52 = v52 + CFDateGetTimeIntervalSinceDate(v51, v53);
        }
        else
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: failed to get last association date for %@.", "__WiFiDeviceManagerPerformThroughputMeasurement", sub_10001A43C(v6) message];
          }
        }
        if (v51)
        {
          CFRelease(v51);
          if (v52 <= 259200.0) {
            goto LABEL_117;
          }
        }
        else if (v52 <= 259200.0)
        {
          goto LABEL_117;
        }
LABEL_104:
        id v47 = [objc_alloc((Class)WFMeasure) initWithType:1 andReason:@"Primary&Charging" prevTestedOptions:0 andInterfaceName:sub_100017C48(*(void *)(a3 + 64))];
        *(void *)(a3 + 7072) = v47;
        if (v47)
        {
          uint64_t v80 = 0;
          id v81 = &v80;
          uint64_t v82 = 0x2020000000;
          CFTypeRef v83 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
          CFTypeRef v83 = CFRetain(v6);
          *(void *)&long long valuePtr = _NSConcreteStackBlock;
          *((void *)&valuePtr + 1) = 3221225472;
          uint64_t v91 = (uint64_t)sub_100145C94;
          CFTypeRef v92 = &unk_100241B88;
          BOOL v93 = (CFDictionaryRef *)&v80;
          int v94 = (uint64_t *)a3;
          LOBYTE(v95) = 0;
          [*(id *)(a3 + 7072) start:&valuePtr withCompletionQueue:*(void *)(a3 + 240)];
          if (qword_10027DD68)
          {
            uint64_t v49 = "as periodic test";
            if (!v45) {
              uint64_t v49 = "as first test";
            }
            [(id)qword_10027DD68 WFLog:3, "%s: throughput measurement started for %@, triggered %s", "__WiFiDeviceManagerPerformThroughputMeasurement", v81[3], v49 message];
          }
          _Block_object_dispose(&v80, 8);
        }
LABEL_122:
        if (v44) {
          CFRelease(v44);
        }
        goto LABEL_124;
      }
      BOOL v10 = sub_1000CE714(*(void *)(a3 + 3512));
      if (sub_10001E404(*(void *)(a3 + 3512), @"WiFiNetworkAttributeIsPublic") == kCFBooleanTrue) {
        unsigned __int8 v11 = 1;
      }
      else {
        unsigned __int8 v11 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") isOmnipresentNetwork:*(void *)(a3 + 3512)];
      }
      uint64_t v12 = *(void *)(a3 + 6720);
      if (v12 == 255)
      {
        int v29 = 1;
        goto LABEL_76;
      }
      BOOL v13 = *(const void **)(a3 + 112);
      if (v13)
      {
        uint64_t v14 = sub_10001A43C(*(const void **)(a3 + 3512));
        if (CFEqual(v13, v14))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: matching ATJ test network %@, bypass network type check.", "__WiFiDeviceManagerShowJoinAlertIfAppropriate", *(void *)(a3 + 112) message];
          }
          goto LABEL_42;
        }
        uint64_t v12 = *(void *)(a3 + 6720);
      }
      if ((unint64_t)(v12 - 253) < 2) {
        char v21 = 1;
      }
      else {
        char v21 = v11;
      }
      if ((v21 & 1) == 0 && !v10)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: %@ not a public/carrier network. Suppressing join alert.", "__WiFiDeviceManagerShowJoinAlertIfAppropriate", sub_10001A43C(*(const void **)(a3 + 3512)) message];
        }
        goto LABEL_91;
      }
LABEL_42:
      id v22 = sub_100005420(a3);
      if (v22)
      {
        if (objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "isWithin:fromLocation:forNetwork:", v22, *(void *)(a3 + 3512), *(double *)(a3 + 6728)) == (id)1)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: %@ is not at known location.", "__WiFiDeviceManagerShowJoinAlertIfAppropriate", sub_10001A43C(*(const void **)(a3 + 3512)) message];
          }
          int v24 = 0;
        }
        else
        {
          int v24 = 1;
        }
      }
      else
      {
        int v24 = 1;
      }
      double v25 = sub_1000C99F4(*(const void **)(a3 + 3512));
      if (v25 >= 0.0 && v25 <= *(double *)(a3 + 6736))
      {
        char v27 = 0;
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: %@ is not joined recently.", "__WiFiDeviceManagerShowJoinAlertIfAppropriate", sub_10001A43C(*(const void **)(a3 + 3512)) message];
        }
        char v27 = 1;
      }
      uint64_t v28 = *(void *)(a3 + 6720);
      if ((v28 & 0xFFFFFFFFFFFFFFFDLL) == 0xFC) {
        int v29 = 0;
      }
      else {
        int v29 = v24;
      }
      if ((v27 & 1) == 0 && (v28 & 0xFFFFFFFFFFFFFFFELL) != 0xFC && v29)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: %@ is within range of known location or last joined date. Suppressing join alert.", "__WiFiDeviceManagerShowJoinAlertIfAppropriate", sub_10001A43C(*(const void **)(a3 + 3512)) message];
        }
LABEL_91:
        goto LABEL_92;
      }
LABEL_76:
      uint64_t v31 = *(void *)(a3 + 64);
      BOOL v32 = (const void *)sub_100017C48(v31);
      BOOL v33 = sub_10001C1B4(v31, v32);
      BOOL v34 = sub_10001A43C(v33);
      id v35 = sub_1001390A0(a3);
      if ([v35 containsObject:v34])
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: %@ is blacklisted from join alerts", "__WiFiDeviceManagerShowJoinAlertIfAppropriate", v34 message];
        }
      }
      else
      {
        if (v29) {
          uint64_t v37 = 3;
        }
        else {
          uint64_t v37 = 2;
        }
        if (v10) {
          uint64_t v38 = *(void *)(a3 + 6192);
        }
        else {
          uint64_t v38 = 0;
        }
        [*(id *)(a3 + 6704) dispatchJoinAlertForNetwork:v34 withProviderName:v38 andReason:v37];
      }
      if (v35) {
        CFRelease(v35);
      }
      if (v33) {
        CFRelease(v33);
      }
      goto LABEL_91;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: network is null" args:("__WiFiDeviceManagerWiFiPrimaryInfCallback", nil)];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is null" args:__WiFiDeviceManagerWiFiPrimaryInfCallback];
    }
  }
}

void sub_1000F5DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F5E28(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a3) {
    return sub_100036A14(*(void *)(a3 + 120), a2, a4);
  }
  return result;
}

void sub_1000F5E3C(uint64_t a1, const void *a2, uint64_t a3, int a4, uint64_t a5)
{
  if (!a3)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:4, @"%s, Device Manager is NULL", @"__WiFiLQAMgrTrigDiscEventCallback"];
    }
    goto LABEL_21;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:4 message:@"%s, Device IfName is NULL", @"__WiFiLQAMgrTrigDiscEventCallback"];
    }
LABEL_21:
    goto LABEL_14;
  }
  BOOL v10 = sub_100018FA8(a3, a2, 1);
  unsigned __int8 v11 = sub_10001E404((uint64_t)v10, @"BSSID");
  if (v11)
  {
    if (!v10) {
      goto LABEL_14;
    }
    uint64_t v12 = (uint64_t)v11;
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: LQAMgr Trigger Disconnected and Blacklisted Network %@", "__WiFiLQAMgrTrigDiscEventCallback", sub_10001A43C(v10) message];
    }
    sub_1000FEA7C(a3, a2, 1000, "__WiFiLQAMgrTrigDiscEventCallback", 10203);
    id v14 = sub_10000AD1C((uint64_t)v10);
    id v15 = sub_100103A84(a3, 6, a4, v12, 1);
    [*(id *)(a3 + 6648) setNetworkDenyListInfo:v15 forScanResult:v14];
    -[WiFiUsageMonitor setTdLogic_deferJoin:perBSSID:](+[WiFiUsageMonitor sharedInstance](WiFiUsageMonitor, "sharedInstance"), "setTdLogic_deferJoin:perBSSID:", 60 * [*(id *)(a3 + 6648) denyListThresholdForReason:6 forSSIDThresholds:1], 60 * [*(id *)(a3 + 6648) denyListThresholdForReason:6 forSSIDThresholds:0]);

    if (*(unsigned char *)(a3 + 6216))
    {
      CFNumberRef v16 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(a3 + 4552);
      if (v16)
      {
        v16(a3, 6, a5, *(void *)(a3 + 4560));
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, "%s: softErrorManagerService callback is NULL!", "__WiFiDeviceManagerTriggerDisconnectNotification"];
        }
      }
    }
    goto LABEL_13;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, @"%s, BSSID is NULL", @"__WiFiLQAMgrTrigDiscEventCallback"];
  }
  if (v10) {
LABEL_13:
  }
    CFRelease(v10);
LABEL_14:
}

uint64_t sub_1000F60EC(uint64_t a1, const void *a2, uint64_t a3)
{
  return sub_100130584(a3, a2);
}

uint64_t sub_1000F60F4(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  if (!_os_feature_enabled_impl()) {
    return 0;
  }
  if (!a4)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: devicemanager null", "__WiFiDeviceManagerColocatedScopeTransitionCallback", v14);
    }
    goto LABEL_26;
  }
  if (!a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: transitionNetwork null" : @"__WiFiDeviceManagerColocatedScopeTransitionCallback" : v14];
    }
    goto LABEL_26;
  }
  if (*(unsigned char *)(a4 + 6616))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: already in progress", "__WiFiDeviceManagerColocatedScopeTransitionCallback", v14);
    }
    goto LABEL_26;
  }
  if (!sub_100105200((void *)a4, a3))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: transitionNetwork %@ is not a known network", "__WiFiDeviceManagerColocatedScopeTransitionCallback", sub_10001A43C(a3) message];
    }
    goto LABEL_26;
  }
  CFDictionaryRef v6 = (const void *)sub_100016E20(*(void *)(a4 + 64));
  long long v7 = sub_100018FA8(a4, v6, 1);
  if (!v7)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: current Network null" args:v14];
    }
LABEL_26:
    return 0;
  }
  CFStringRef v8 = v7;
  if (sub_100149724(a4, (uint64_t)v7, (uint64_t)a3))
  {
    if (_os_feature_enabled_impl())
    {
      sub_10001FD64(a4, 0x27uLL);
    }
    else
    {
      uint64_t v9 = *(const void **)(a4 + 6608);
      if (v9)
      {
        CFRelease(v9);
        *(void *)(a4 + 6608) = 0;
      }
      *(void *)(a4 + 6608) = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)a3);
      sub_100100D74(a4, 7);
    }
    uint64_t v10 = 1;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: ColocatedScopeIds mismatch" : @"__WiFiDeviceManagerColocatedScopeTransitionCallback"];
    }
    uint64_t v10 = 0;
  }
  CFRelease(v8);
  return v10;
}

void sub_1000F6358(int a1, uint64_t a2, uint64_t a3, const __CFDictionary *cf)
{
  unsigned int valuePtr = 0;
  if (!a3)
  {
    unsigned __int8 v11 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_12;
    }
    uint64_t v12 = "%s: manager is NULL !";
    goto LABEL_25;
  }
  if (cf && (CFTypeID v7 = CFGetTypeID(cf), v7 == CFDictionaryGetTypeID()))
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(cf, @"LEAKY_AP_STATS_VER");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr == 2)
      {
        uint64_t v14 = *(void (**)(uint64_t, uint64_t, void, const __CFDictionary *))(a3 + 4488);
        if (v14) {
          v14(a3, a2, *(void *)(a3 + 4496), cf);
        }
      }
      else
      {
        if (valuePtr == 1)
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Ignoring Leaky AP report version %d", valuePtr);
          }
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Unknown LEaky AP report version %d", valuePtr);
          }
        }
      }
      return;
    }
    unsigned __int8 v11 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v12 = "%s, leakyAPStatsVersionRef is NULL";
LABEL_25:
      uint64_t v13 = 4;
      goto LABEL_11;
    }
  }
  else
  {
    unsigned __int8 v11 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v12 = "%s:NULL event Data";
      uint64_t v13 = 3;
LABEL_11:
      [v11 WFLog:v13 message:v12];
    }
  }
LABEL_12:
}

void sub_1000F6530(uint64_t a1, void *a2)
{
  int valuePtr = 1;
  if (a2)
  {
    if (a2[15])
    {
      CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
      if (v3)
      {
        CFNumberRef v4 = v3;
        uint64_t v5 = a2[8];
        CFDictionaryRef v6 = (const void *)sub_100017C48(v5);
        sub_100017D28(v5, v6, 538, 0, (uint64_t)v4);
        CFRelease(v4);
      }
      if (!a2[695])
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        a2[695] = Mutable;
        if (sub_10011EDE8((uint64_t)a2, Mutable, 5, dword_1001CB970, 3u, 1u, 0, 0))
        {
          CFStringRef v8 = (const void *)a2[695];
          if (v8)
          {
            CFRelease(v8);
            a2[695] = 0;
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: Triggering Active Probe failed!"];
          }
        }
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: LQA manager is NULL !" args:__WiFiDeviceManagerActiveProbeQueryCallback];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, "%s: manager is NULL !", "__WiFiDeviceManagerActiveProbeQueryCallback"];
    }
  }
}

uint64_t sub_1000F66EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    CFNumberRef v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a4 + 4504);
    if (v4) {
      return v4(a4, a2, a3, *(void *)(a4 + 4512));
    }
  }
  return result;
}

void sub_1000F670C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4;
  if (a3)
  {
    CFNumberRef v4 = *(void (**)(uint64_t, uint64_t, uint64_t *, void))(a3 + 4552);
    if (v4)
    {
      v4(a3, 5, &v6, *(void *)(a3 + 4560));
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: softErrorManagerService callback is NULL!", "__WiFiDeviceManagerSymptomsEventCallback", v6];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: deviceManagerRef is NULL!", "__WiFiDeviceManagerSymptomsEventCallback", v6);
    }
  }
}

void sub_1000F67DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    if (a4)
    {
      CFNumberRef v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 4552);
      if (v4)
      {
        uint64_t v5 = *(void *)(a3 + 4560);
        v4(a3, 4, a4, v5);
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: softErrorManagerService callback is NULL!", @"__WiFiDeviceManagerTxFailEventCallback"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: txFailHistoryData is NULL!", @"__WiFiDeviceManagerTxFailEventCallback"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: deviceManagerRef is NULL!"];
    }
  }
}

void sub_1000F68EC(uint64_t a1, const void *a2, uint64_t a3, const __CFDictionary *a4)
{
  int valuePtr = 0;
  if (!a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: deviceManagerRef is NULL!", @"__WiFiDeviceManagerRoamStatusEventCallback"];
    }
    goto LABEL_60;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: device is NULL!", "__WiFiDeviceManagerRoamStatusEventCallback"];
    }
LABEL_60:
    return;
  }
  CFStringRef v8 = (CFDictionaryRef *)sub_100071800(a1);
  if (!a4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: dict is NULL!", "__WiFiDeviceManagerRoamStatusEventCallback"];
    }
    CFMutableArrayRef v33 = 0;
    uint64_t v13 = 0;
    goto LABEL_72;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a4, @"ROAMEDEVENT_STATUS");
  if (!Value
    || ((CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr), int v10 = 0, (valuePtr + 528350197) > 0x3E)
     || ((1 << (valuePtr - 11)) & 0x73C0000000000017) == 0)
    && valuePtr != -528350204)
  {
    int v10 = 1;
  }
  unsigned __int8 v11 = CFDictionaryGetValue(a4, @"ROAMEDEVENT_ORIGIN_ADDR");
  uint64_t v12 = sub_100018FA8(a3, a2, 1);
  if (v12)
  {
    uint64_t v13 = v12;
    int v49 = v10;
    unint64_t v48 = v11;
    sub_1000718D8(*(void *)(a3 + 64), (uint64_t)v12);
    if (sub_1000704FC(*(void *)(a3 + 64)))
    {
      uint64_t v14 = (void *)CFDictionaryGetValue(a4, @"ROAM_STATUS_SUBSTATE_INFO");
      if (v14)
      {
        id v15 = v14;
        id v16 = [v14 objectForKey:@"ROAM_STATUS_SUBSTATE_FLAGS"];
        if (v16)
        {
          if ([v16 intValue])
          {
            id v17 = [v15 objectForKey:@"BSSID"];
            if (v17)
            {
              uint64_t v18 = v17;
              __int16 v53 = 0;
              int v52 = 0;
              CFNumberRef v19 = [v17 bytes];
              if (v52 != *(_DWORD *)v19 || v53 != v19[2])
              {
                char v21 = ether_ntoa((const ether_addr *)[v18 bytes]);
                id v22 = v21
                    ? +[NSString stringWithUTF8String:v21]
                    : 0;
                id v23 = sub_10013D8D0(v15, (uint64_t)v22);
                if (v23)
                {
                  int v24 = v23;
                  if ([v23 count])
                  {
                    id v47 = v8;
                    double v25 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v13);
                    sub_10001C6A4((uint64_t)v25, @"BSSID", v22);
                    int v46 = v25;
                    id v26 = sub_10000AD1C((uint64_t)v25);
                    if ([v24 count])
                    {
                      unint64_t v27 = 0;
                      do
                      {
                        id v28 = sub_100103A84(a3, 8, (uint64_t)[v24 objectAtIndex:v27], (uint64_t)v22, 2);
                        [*(id *)(a3 + 6648) setNetworkDenyListInfo:v28 forScanResult:v26];

                        ++v27;
                      }
                      while (v27 < (unint64_t)[v24 count]);
                    }
                    int v29 = *(void **)(a3 + 7368);
                    if (v29) {
                      [v29 addFaultEvent:9 forInterface:sub_100017C48(*(void *)(a3 + 64))];
                    }
                    CFStringRef v8 = v47;
                    if (v46) {
                      CFRelease(v46);
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:message:4, "%s dict for roam status is nil", "__WiFiDeviceManagerProcessRoamStatusSubState"];
        }
      }
    }
    if (sub_100072C4C(a1))
    {
      id v30 = +[WiFiRoamManager sharedWiFiRoamManager];
      int v31 = v49;
      if (!v30)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s, roamManager is NULL", "__WiFiDeviceManagerRoamStatusEventCallback")];
        }
        CFMutableArrayRef v33 = 0;
        goto LABEL_72;
      }
      BOOL v32 = v30;
      if (v49) {
        CFMutableArrayRef v33 = sub_10006C7B8();
      }
      else {
        CFMutableArrayRef v33 = 0;
      }
      [v32 setRoamStatus:a4 withBeaconCache:v33 forInterface:a2];
      if (([v32 canSubmitMetrics] & 1) == 0) {
        goto LABEL_41;
      }
    }
    else
    {
      CFMutableArrayRef v33 = 0;
      int v31 = v49;
    }
    sub_1001324A0(a3, v13, a4);
LABEL_41:
    BOOL v34 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 4552);
    if (v34)
    {
      v34(a3, 11, 0, *(void *)(a3 + 4560));
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: softErrorManagerService callback is NULL!", @"__WiFiDeviceManagerRoamStatusEventCallback"];
      }
    }
    uint64_t v36 = *(void (**)(uint64_t, void, const __CFDictionary *))(a3 + 4632);
    if (v36) {
      v36(a3, *(void *)(a3 + 4640), a4);
    }
    int v37 = valuePtr;
    if (!valuePtr)
    {
      uint64_t v38 = *(NSObject **)(a3 + 8968);
      dispatch_time_t v39 = dispatch_time(0, 1000000000);
      dispatch_source_set_timer(v38, v39, 0xFFFFFFFFFFFFFFFFLL, 0);
      int v37 = valuePtr;
    }
    if (v8 && v37 && ((v31 ^ 1) & 1) == 0)
    {
      if (!v33) {
        CFMutableArrayRef v33 = sub_10006C7B8();
      }
      id v40 = sub_10000AD1C((uint64_t)v8);
      [v40 scanResultWithMatchingKnownNetworkProfile:sub_10001CECC(v8)];
      [objc_msgSend(*(id *)(a3 + 8824), "knownNetworks") allObjects];
      id v41 = [(id)CWFKnownNetworksSupportingSeamlessSSIDTransitionForScanResult() valueForKey:@"SSID"];
      [+[WiFiUsageMonitor sharedInstance] updateKnownNetworksSupportingSeamless:v41 forBSS:v48 andSSID:sub_10001A43C(v13) beaconCache:v33];
      goto LABEL_73;
    }
LABEL_72:
    if (!v8)
    {
LABEL_74:
      if (v13) {
        CFRelease(v13);
      }
      if (v33) {
        CFRelease(v33);
      }
      return;
    }
LABEL_73:
    CFRelease(v8);
    goto LABEL_74;
  }
}

void sub_1000F6EF8(uint64_t a1, const void *a2, uint64_t a3, const __CFDictionary *a4)
{
  if (!a3)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: deviceManagerRef is NULL!", "__WiFiDeviceManagerActionFrameEventCallback"];
    }
    goto LABEL_74;
  }
  CFStringRef v8 = sub_100018FA8(a3, a2, 1);
  if (!v8)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: currentNetwork is NULL!", "__WiFiDeviceManagerActionFrameEventCallback"];
    }
LABEL_74:
    goto LABEL_68;
  }
  uint64_t v9 = v8;
  int v10 = (unsigned __int8 *)malloc_type_malloc(0x38uLL, 0x10600406BF8FC03uLL);
  if (!v10)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null afMetric", @"__WiFiDeviceManagerActionFrameEventCallback"];
    }
    goto LABEL_67;
  }
  unsigned __int8 v11 = v10;
  *((void *)v10 + 6) = 0;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)int v10 = 0u;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: received action frame event for network %@: %@", "__WiFiDeviceManagerActionFrameEventCallback", sub_10001A43C(v9), a4 message];
  }
  CFArrayRef v13 = sub_1000C6D70((const __CFArray *)v9);
  if (!v13)
  {
LABEL_12:
    buffer[0] = 0;
    CFAllocatorRef v18 = kCFAllocatorDefault;
    id v17 = buffer;
    CFIndex v19 = 1;
    goto LABEL_13;
  }
  CFStringRef v14 = (const __CFString *)v13;
  CFTypeID v15 = CFGetTypeID(v13);
  if (v15 != CFStringGetTypeID())
  {
    CFTypeID v20 = CFGetTypeID(v14);
    if (v20 == CFDataGetTypeID())
    {
      CFRetain(v14);
LABEL_14:
      v54.location = 0;
      v54.length = 3;
      CFDataGetBytes((CFDataRef)v14, v54, v11);
      CFRelease(v14);
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  memset(buffer, 170, 19);
  CFStringGetCString(v14, buffer, 19, 0);
  id v16 = ether_aton(buffer);
  if (!v16) {
    goto LABEL_15;
  }
  id v17 = (char *)v16;
  CFAllocatorRef v18 = kCFAllocatorDefault;
  CFIndex v19 = 6;
LABEL_13:
  CFStringRef v14 = (const __CFString *)CFDataCreate(v18, (const UInt8 *)v17, v19);
  if (v14) {
    goto LABEL_14;
  }
LABEL_15:
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a4, @"CATEGORY_CODE");
  if (Value) {
    CFNumberGetValue(Value, kCFNumberSInt8Type, v11 + 8);
  }
  CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a4, @"ACTION_CODE");
  if (v22) {
    CFNumberGetValue(v22, kCFNumberSInt8Type, v11 + 9);
  }
  CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(a4, @"DIALOG_TOKEN");
  if (v23) {
    CFNumberGetValue(v23, kCFNumberSInt8Type, v11 + 10);
  }
  CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(a4, @"PREF_CANDIDATE_INCLUDED");
  if (v24) {
    CFNumberGetValue(v24, kCFNumberSInt8Type, v11 + 18);
  }
  CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(a4, @"ABRIDGED");
  if (v25) {
    CFNumberGetValue(v25, kCFNumberSInt8Type, v11 + 19);
  }
  CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(a4, @"DISASSOC_IMMINENT");
  if (v26) {
    CFNumberGetValue(v26, kCFNumberSInt8Type, v11 + 20);
  }
  CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(a4, @"BSS_TERM_INCLUDED");
  if (v27) {
    CFNumberGetValue(v27, kCFNumberSInt8Type, v11 + 21);
  }
  CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(a4, @"ESS_TERM_INCLUDED");
  if (v28) {
    CFNumberGetValue(v28, kCFNumberSInt8Type, v11 + 22);
  }
  CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(a4, @"DISASSOC_TIMEOUT");
  if (v29) {
    CFNumberGetValue(v29, kCFNumberSInt16Type, v11 + 14);
  }
  CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(a4, @"VALIDITY_INTERVAL");
  if (v30) {
    CFNumberGetValue(v30, kCFNumberSInt8Type, v11 + 16);
  }
  CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(a4, @"BTM_RSP_STATUS");
  if (v31) {
    CFNumberGetValue(v31, kCFNumberSInt8Type, v11 + 11);
  }
  CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(a4, @"BSS_TERM_DELAY");
  if (v32) {
    CFNumberGetValue(v32, kCFNumberSInt8Type, v11 + 17);
  }
  *((_DWORD *)v11 + 1) = sub_100019AD4(a3, v9);
  CFNumberRef v33 = (const __CFNumber *)sub_100024070((uint64_t)v9);
  if (v33) {
    CFNumberGetValue(v33, kCFNumberSInt32Type, v11 + 24);
  }
  CFNumberRef v34 = (const __CFNumber *)sub_1000C9A78((uint64_t)v9);
  if (v34) {
    CFNumberGetValue(v34, kCFNumberSInt32Type, v11 + 36);
  }
  *((_DWORD *)v11 + 7) = sub_1000059B0((uint64_t)v9);
  *((_DWORD *)v11 + 8) = sub_1000C9AF8((uint64_t)v9);
  CFDictionaryRef v35 = (const __CFDictionary *)sub_10001E404((uint64_t)v9, @"WPS_PROB_RESP_IE");
  if (v35)
  {
    CFDictionaryRef v36 = v35;
    CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(v35, @"IE_KEY_WPS_MODEL_NAME");
    if (v37 && (CFStringRef v38 = v37, TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v38)))
    {
      CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v38);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: bad type for wpsModelName. Not a CFString or NULL", @"__WiFiDeviceManagerActionFrameEventCallback"];
      }
      CFStringRef Copy = 0;
    }
    *((void *)v11 + 5) = Copy;
    CFStringRef v42 = (const __CFString *)CFDictionaryGetValue(v36, @"IE_KEY_WPS_MODEL_NUM");
    if (v42 && (CFStringRef v43 = v42, v44 = CFStringGetTypeID(), v44 == CFGetTypeID(v43)))
    {
      CFStringRef v45 = CFStringCreateCopy(kCFAllocatorDefault, v43);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: bad type for wpsModelNumber. Not a CFString or NULL", @"__WiFiDeviceManagerActionFrameEventCallback"];
      }
      CFStringRef v45 = 0;
    }
    *((void *)v11 + 6) = v45;
  }
  id v47 = *(void **)(a3 + 7368);
  if (v47)
  {
    int v48 = v11[9];
    if (v48 == 8)
    {
      [v47 sentBssTransitionResponse:a2 status:v11[11] terminationDelayRequested:v11[17] != 0];
    }
    else if (v48 == 7)
    {
      [v47 receivedBssTransitionRequest:a2 candidateListIncluded:v11[18] != 0 isAbridged:v11[19] != 0 disassociationImminent:v11[20] != 0 bssTerminationIncluded:v11[21] != 0 essDisassociationImminent:v11[22] != 0];
    }
  }
  sub_1000501A4((long long *)v11);
  int v49 = (const void *)*((void *)v11 + 5);
  if (v49)
  {
    CFRelease(v49);
    *((void *)v11 + 5) = 0;
  }
  CFAbsoluteTime v50 = (const void *)*((void *)v11 + 6);
  if (v50) {
    CFRelease(v50);
  }
  free(v11);
LABEL_67:
  CFRelease(v9);
LABEL_68:
}

void sub_1000F7538(uint64_t a1, uint64_t a2, id *a3, __CFDictionary **a4)
{
  if (a3)
  {
    if (a4)
    {
      *a4 = sub_1001450A8(a3);
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: AJMetrics is NULL!", @"__WiFiDeviceManagerQueryAJMetricsCallback"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: deviceManagerRef is NULL!", "__WiFiDeviceManagerQueryAJMetricsCallback"];
    }
  }
}

void sub_1000F75FC(uint64_t a1, uint64_t a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  if (a3)
  {
    if (a4)
    {
      CFDictionaryRef v5 = *(const __CFDictionary **)(a3 + 7032);
      if (v5) {
        MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v5);
      }
      else {
        MutableCFStringRef Copy = 0;
      }
      *a4 = MutableCopy;
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: LPHSMetrics is NULL!", "__WiFiDeviceManagerQueryLPHSMetricsCallback"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: deviceManagerRef is NULL!", "__WiFiDeviceManagerQueryLPHSMetricsCallback"];
    }
  }
}

uint64_t sub_1000F76DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFDictionaryRef v5 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(a5 + 4600);
  if (v5) {
    return v5(a5, a2, *(void *)(a5 + 4608), a3);
  }
  return result;
}

void sub_1000F76F8(int a1, int a2, CFDictionaryRef theDict, uint64_t a4, uint64_t a5)
{
  CFNumberRef Value = CFDictionaryGetValue(theDict, @"SOFTAP_LPM");
  if (Value)
  {
    CFTypeID v7 = Value;
    if (CFEqual(Value, kCFBooleanFalse))
    {
      IOPMAssertionID v8 = *(_DWORD *)(a5 + 5228);
      if (v8 && !IOPMAssertionRelease(v8))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"All Clients in Sleep/Inactive Mode, Releasing Power Assertion for SoftAP LPM\n"];
        }
        *(_DWORD *)(a5 + 5228) = 0;
      }
    }
    else if (CFEqual(v7, kCFBooleanTrue) && !*(_DWORD *)(a5 + 5228))
    {
      int v10 = (_DWORD *)(a5 + 5228);
      CFStringRef v11 = sub_10006B8BC();
      uint64_t v12 = IOPMAssertionCreateWithName(@"NoIdleSleepAssertion", 0xFFu, v11, (IOPMAssertionID *)(a5 + 5228));
      if (v12)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"Unable to prevent idle sleep during MIS Session, error=%d"];
        }
        _DWORD *v10 = 0;
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Clients are in active mode, Holding Power Assertion for SoftAP LPM\n");
        }
      }
    }
  }
}

void sub_1000F7860(uint64_t a1, const void *a2, uint64_t a3)
{
  id v7 = [+[WiFiPerfPerAssoc sharedInstance] getBSSIDForCurrentSession];
  IOPMAssertionID v8 = sub_100018FA8(a3, a2, 1);
  uint64_t v9 = sub_10001E404((uint64_t)v8, @"BSSID");
  int v10 = *(void **)(a3 + 3512);
  if (!v9)
  {
    id v16 = +[WiFiPerfPerAssoc sharedInstance];
    uint64_t v17 = sub_100072AF8(a1);
    CFAllocatorRef v18 = v16;
    uint64_t v19 = 0;
    CFTypeID v20 = v10;
    goto LABEL_25;
  }
  CFStringRef v11 = v9;
  if (v8)
  {
    CFNumberRef v29 = v6;
    CFDictionaryRef v12 = sub_10000E5B8((uint64_t)v8);
    id v13 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:v12];
    uint64_t v14 = *(void *)(a3 + 64);
    if (v14)
    {
      *(_DWORD *)(a3 + 1208) = -1;
      bzero((void *)(a3 + 1212), 0x808uLL);
      int v15 = sub_1000700BC(v14);
      *(_DWORD *)(a3 + 1208) = v15;
      if (v15) {
        goto LABEL_10;
      }
    }
    else if (*(_DWORD *)(a3 + 1208))
    {
      goto LABEL_10;
    }
    if (*(_DWORD *)(a3 + 1212))
    {
      char v21 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a3 + 1216);
LABEL_11:
      CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, (const void *)(a3 + 3264));
      if (v22)
      {
        CFNumberRef v23 = v22;
        [v13 setObject:v22 forKeyedSubscript:@"IS_BEACON_AT_HE_RATE"];
        CFRelease(v23);
      }
      [*(id *)(a3 + 7368) updateBeaconInfo:v21 andParsedIE:v13 forInterface:sub_100017C48(*(void *)(a3 + 64))];
      if (v12) {
        CFRelease(v12);
      }
      if (v13) {
        CFRelease(v13);
      }
      uint64_t v6 = v29;
      if (*(_DWORD *)(a3 + 1208))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:4, "%s unable to fetch RawBeacon (err:%d)", "__WiFiDeviceFetchCurrentBeaconData", *(unsigned int *)(a3 + 1208)];
        }
      }
      goto LABEL_21;
    }
LABEL_10:
    char v21 = 0;
    goto LABEL_11;
  }
LABEL_21:
  if (v7)
  {
    if ([v7 isEqualToString:v11]) {
      goto LABEL_26;
    }
    [+[WiFiPerfPerAssoc sharedInstance] associatedStateDidChange:0 withAssociatedNetworkRecord:v10 withChangeReason:1020];
    CFAllocatorRef v18 = +[WiFiPerfPerAssoc sharedInstance];
    uint64_t v19 = 1;
    CFTypeID v20 = v8;
    uint64_t v17 = 2;
  }
  else
  {
    CFNumberRef v25 = *(NSObject **)(a3 + 8968);
    dispatch_time_t v26 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v25, v26, 0xFFFFFFFFFFFFFFFFLL, 0);
    CFNumberRef v27 = +[WiFiPerfPerAssoc sharedInstance];
    uint64_t v17 = sub_100072AF0(a1);
    CFAllocatorRef v18 = v27;
    uint64_t v19 = 1;
    CFTypeID v20 = v8;
  }
LABEL_25:
  [(WiFiPerfPerAssoc *)v18 associatedStateDidChange:v19 withAssociatedNetworkRecord:v20 withChangeReason:v17];
LABEL_26:
  if (v8) {
    CFRelease(v8);
  }
  if (_os_feature_enabled_impl()) {
    sub_100005AFC(a3);
  }
  sub_1000130BC(a3);
}

void sub_1000F7B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (_os_feature_enabled_impl()) {
    sub_10001FD64(a3, 0x29uLL);
  }
  CFNumberRef v4 = *(void (**)(uint64_t, uint64_t))(a3 + 4872);
  if (v4)
  {
    uint64_t v5 = *(void *)(a3 + 4880);
    v4(a3, v5);
  }
}

void sub_1000F7BD0(uint64_t a1, const void *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  __int16 valuePtr = 0;
  char v34 = 0;
  id v7 = (unsigned char *)(a5 + 5592);
  CFNumberRef v32 = 0;
  value = 0;
  CFNumberRef v31 = 0;
  IOPMAssertionID v8 = sub_100018FA8(a5, a2, 1);
  int ValueIfPresent = CFDictionaryGetValueIfPresent(a3, @"INTERNET_ACCESS", (const void **)&value);
  int v10 = value;
  if (ValueIfPresent) {
    BOOL v11 = value == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    CFDictionaryRef v12 = *(const void **)(a5 + 5576);
    if (v12)
    {
      if (CFEqual(value, v12)) {
        goto LABEL_22;
      }
      int v10 = value;
    }
    *(void *)(a5 + 5576) = v10;
    if (v8)
    {
      int v13 = sub_1000CD794((uint64_t)v8);
      if ((v13 - 1) > 1)
      {
        int v17 = 0;
      }
      else
      {
        int v14 = v13;
        if (*(void *)(a5 + 5576))
        {
          if (qword_10027DD68)
          {
            if (*(const CFBooleanRef *)(a5 + 5576) == kCFBooleanTrue) {
              id v16 = "SET";
            }
            else {
              id v16 = "ZERO";
            }
            [((id)qword_10027DD68) WFLog:3 message:@"%s: internetAccess bit %s", @"__WiFiDeviceManagerWiFiNetworkIeUpdateCallback", v16];
          }
        }
        if (v14 == 1) {
          int v17 = 3;
        }
        else {
          int v17 = 0;
        }
      }
      sub_100105524((uint64_t *)a5, v8, 1, v17);
    }
  }
LABEL_22:
  CFDictionaryGetValueIfPresent(a3, @"kWiFiHostApWiFiNetworkIeValidKey", (const void **)&v31);
  if (!v31 || !*(_DWORD *)(a5 + 6804) || !v7[1304]) {
    goto LABEL_36;
  }
  CFStringRef v18 = (const __CFString *)CFDictionaryGetValue(a3, @"WiFiHostApWiFiNetworkIeSsidKey");
  if (!v18)
  {
    CFNumberRef v29 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFNumberRef v30 = "Failed to get Network SSID Info";
      goto LABEL_51;
    }
LABEL_52:
    goto LABEL_53;
  }
  CFStringRef v19 = v18;
  CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(a3, @"WiFiHostApWiFiNetworkIeFlagKey");
  if (!v20
    || (CFNumberGetValue(v20, kCFNumberSInt16Type, &valuePtr),
        (CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(a3, @"WiFiHostApWiFiNetworkIeBatteryKey")) == 0))
  {
    CFNumberRef v29 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFNumberRef v30 = "Failed to get Network Flag Info";
LABEL_51:
      [v29 WFLog:3 message:v30];
      goto LABEL_52;
    }
    goto LABEL_52;
  }
  CFNumberGetValue(v21, kCFNumberSInt8Type, &v34);
  v7[1394] = v34;
  *(_WORD *)(a5 + 6984) = valuePtr;
  CFNumberRef v22 = *(const void **)(a5 + 6976);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(a5 + 6976) = 0;
  }
  *(void *)(a5 + 6976) = sub_1000C5D34(v19);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, " Update Personal Hotspot Network IE received. wifi network %@\n", v19 message];
  }
  if (_os_feature_enabled_impl())
  {
    if (!*(_DWORD *)(a5 + 3280)) {
      sub_10001FD64(a5, 0x1CuLL);
    }
  }
  else
  {
    sub_1000FB1B0(a5);
  }
LABEL_36:
  if (!*v7
    || !CFDictionaryGetValueIfPresent(a3, @"DIRECTED_NETWORK", (const void **)&v32)
    || v32 == kCFBooleanTrue
    || (CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a5 + 3536))) == 0
    || !v8)
  {
LABEL_53:
    if (!v8) {
      return;
    }
    goto LABEL_54;
  }
  v36.length = Count;
  v36.location = 0;
  FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a5 + 3536), v36, v8);
  if (FirstIndexOfValue != -1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a5 + 3536), FirstIndexOfValue);
    if (ValueAtIndex)
    {
      if (sub_10001EE48(ValueAtIndex))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "Correcting directed property for broadcast network %@", sub_10001A43C(v8) message];
        }
        unsigned char *v7 = 0;
        sub_1000C7494((uint64_t)v8, 0);
        sub_10010C6B4((NSObject **)a5, v8);
      }
    }
  }
LABEL_54:
  CFRelease(v8);
}

void sub_1000F7F88(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  id v10 = 0;
  id v7 = *(id *)(a5 + 9072);
  if (v7
    || (id v7 = objc_alloc_init((Class)AWDLServiceDiscoveryManager), (*(void *)(a5 + 9072) = v7) != 0))
  {
    if (a3)
    {
      if (([v7 suspendAWDLWithError:&v10] & 1) == 0)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "SUSPEND AWDL for interface %@ FAILED, returned %ld", a2, [v10 code]];
        }
LABEL_11:
      }
    }
    else if (([v7 resumeAWDLWithError:&v10] & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "RESUME AWDL for interface %@ FAILED, returned %ld", a2, [v10 code]];
      }
      goto LABEL_11;
    }
  }
}

void sub_1000F806C(uint64_t a1, const void *a2, uint64_t a3, const __CFDictionary *a4)
{
  if (a3)
  {
    value = 0;
    uint64_t v8 = sub_10014A88C((unsigned char *)a3);
    if (sub_10003C194(*(void *)(a3 + 120))) {
      BOOL v9 = 0;
    }
    else {
      BOOL v9 = v8 == 0;
    }
    int v10 = !v9;
    if (qword_10027DD68)
    {
      CFDictionaryRef v12 = "FALSE";
      if (v10) {
        CFDictionaryRef v12 = "TRUE";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "DPS: latencySensitiveApps_bitmap:%llu isCriticalAppState:%s", v8, v12);
    }
    int v13 = sub_100018FA8(a3, a2, 1);
    if (v13)
    {
      int v14 = v13;
      if (sub_1000D32A4((uint64_t)v13))
      {
        unsigned int v15 = 0;
        if (!CFDictionaryGetValueIfPresent(a4, @"DPS_SYMPTOMS_TRIGGER", (const void **)&value) || !value) {
          goto LABEL_20;
        }
        if (!CFBooleanGetValue((CFBooleanRef)value))
        {
          unsigned int v15 = 0;
LABEL_20:
          sub_100052EE8(a1, a4, v15, v10);
          double Current = CFAbsoluteTimeGetCurrent();
          double v17 = *(double *)(a3 + 7096);
          if (v17 == 0.0 || v17 + 120.0 <= Current)
          {
            *(_DWORD *)(a3 + 7232) = v15;
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3 message:"DPS/DNS Symptoms HUD: starting display"];
            }
            if (*(_DWORD *)(a3 + 7232))
            {
              *(void *)(a3 + 7224) = 0;
              CFNumberRef v20 = +[NSString stringWithFormat:@"DNS Stall: %llus", 0];
            }
            else
            {
              *(void *)(a3 + 7224) = 5;
              CFNumberRef v20 = +[NSString stringWithFormat:@"Data Stall: %llus", 5];
            }
            CFNumberRef v21 = v20;
            if (!*(unsigned char *)(a3 + 7237))
            {
              *(unsigned char *)(a3 + 7237) = 1;
              if (MGGetBoolAnswer())
              {
                CFNumberRef v22 = *(void (**)(uint64_t, uint64_t, NSString *, void))(a3 + 4552);
                if (v22) {
                  v22(a3, 18, v21, *(void *)(a3 + 4560));
                }
              }
              CFNumberRef v23 = *(NSObject **)(a3 + 7216);
              dispatch_time_t v24 = dispatch_time(0, 1000000000);
              dispatch_source_set_timer(v23, v24, 0xFFFFFFFFFFFFFFFFLL, 0);
            }
            sub_10003C65C(*(void *)(a3 + 120), 1);
          }
          sub_10011083C(a3, 0, 0);
          goto LABEL_34;
        }
        if (!*(unsigned char *)(a3 + 5496))
        {
          unsigned int v15 = 4;
          goto LABEL_20;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: DNSSymptoms notification not allowed when Carplay is Active", @"__WiFiDeviceManagerHandleDpsEvent", v27];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s: network='%@' doesn't support DPS recovery", "__WiFiDeviceManagerHandleDpsEvent", v14 message];
        }
      }
LABEL_34:
      CFRelease(v14);
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, curNetwork is NULL", @"__WiFiDeviceManagerHandleDpsEvent"];
    }
  }
}

void sub_1000F8394(uint64_t a1, const void *a2, uint64_t a3, const __CFDictionary *a4)
{
  uint64_t valuePtr = 0;
  double Current = CFAbsoluteTimeGetCurrent();
  if (!a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, Device Manager is NULL", @"__WiFiDeviceManagerHandleSlowWiFiEvent"];
    }
    goto LABEL_65;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, Device IfName is NULL", @"__WiFiDeviceManagerHandleSlowWiFiEvent"];
    }
    goto LABEL_65;
  }
  double v9 = Current;
  CFNumberRef Value = CFDictionaryGetValue(a4, @"SLOWWIFI_IS_BAP_AP");
  if (!Value)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, isBadAP key not found", @"__WiFiDeviceManagerHandleSlowWiFiEvent"];
    }
    goto LABEL_65;
  }
  BOOL v11 = Value;
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a4, @"SLOWWIFI_ACTION_REASON");
  CFNumberGetValue(v12, kCFNumberIntType, (char *)&valuePtr + 4);
  CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a4, @"SLOWWIFI_ACTION_STAGE");
  CFNumberGetValue(v13, kCFNumberIntType, &valuePtr);
  if (!CFEqual(v11, kCFBooleanFalse))
  {
    id v16 = *(void **)(a3 + 7368);
    if (v16) {
      [v16 addFaultEvent:10 forInterface:sub_100017C48(*(void *)(a3 + 64))];
    }
    double v17 = CFDictionaryGetValue(a4, @"SLOWWIFI_RECOVERY_ENABLED");
    if (v17)
    {
      if (CFEqual(v17, kCFBooleanTrue))
      {
        if (v12)
        {
          CFStringRef v18 = sub_100018FA8(a3, a2, 1);
          if (v18)
          {
            unsigned int v15 = v18;
            CFStringRef v19 = sub_10001E404((uint64_t)v18, @"BSSID");
            if (v19)
            {
              CFNumberRef v20 = v19;
              CFNumberRef v21 = CFDictionaryGetValue(a4, @"SLOWWIFI_BSSID");
              if (v21)
              {
                uint64_t v22 = (uint64_t)v21;
                if (CFEqual(v20, v21))
                {
                  CFNumberRef v23 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v15);
                  id v24 = sub_10000AD1C((uint64_t)v23);
                  BOOL v25 = sub_1000D32A4((uint64_t)v23);
                  if (v25)
                  {
                    if (qword_10027DD68) {
                      [(id)qword_10027DD68 WFLog:4, "%s: SlowWiFi detection blacklisted BSSID:%@", "__WiFiDeviceManagerHandleSlowWiFiEvent", v22 message];
                    }
                    id v27 = sub_100103A84(a3, 8, SHIDWORD(valuePtr), v22, 2);
                    [*(id *)(a3 + 6648) setNetworkDenyListInfo:v27 forScanResult:v24];
                    [*(id *)(a3 + 6648) setNetworkDenyListInfo:v27 forScanResult:v24];
                    [*(id *)(a3 + 6648) setNetworkDenyListInfo:v27 forScanResult:v24];

                    if (!v23) {
                      goto LABEL_23;
                    }
                  }
                  else
                  {
                    if (qword_10027DD68) {
                      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, 1, "%s, network does not support slow wifi recovery", "__WiFiDeviceManagerHandleSlowWiFiEvent");
                    }
                    if (!v23) {
                      goto LABEL_23;
                    }
                  }
                  CFRelease(v23);
LABEL_23:

                  goto LABEL_24;
                }
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s, event BSSID not equal to current BSSID", "__WiFiDeviceManagerHandleSlowWiFiEvent")];
                }
              }
              else
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4, @"%s, event BSSID is NULL", @"__WiFiDeviceManagerHandleSlowWiFiEvent"];
                }
              }
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4, @"%s, current BSSID is NULL", @"__WiFiDeviceManagerHandleSlowWiFiEvent"];
              }
            }
            goto LABEL_34;
          }
          if (qword_10027DD68) {
            [qword_10027DD68 WFLog:4 message:@"%s, curNetwork is NULL", @"__WiFiDeviceManagerHandleSlowWiFiEvent"];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4, @"%s: SlowWiFi reason not found", @"__WiFiDeviceManagerHandleSlowWiFiEvent"];
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s, SlowWiFi recovery not enabled", @"__WiFiDeviceManagerHandleSlowWiFiEvent"];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s, isRecoveryEnabled key not found", @"__WiFiDeviceManagerHandleSlowWiFiEvent"];
      }
    }
LABEL_65:
    goto LABEL_35;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, @"%s, SlowWiFiEvent not due to AP", @"__WiFiDeviceManagerHandleSlowWiFiEvent"];
  }
  unsigned int v15 = *(void **)(a3 + 7368);
  if (v15)
  {
    [v15 addFaultEvent:19 forInterface:sub_100017C48(*(void *)(a3 + 64))];
    unsigned int v15 = 0;
  }
LABEL_24:
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "SlowWiFi: stage:%d reason:%d", valuePtr, HIDWORD(valuePtr))];
  }
  if ((int)valuePtr >= 2 && SHIDWORD(valuePtr) <= 14 && HIDWORD(valuePtr) != 13)
  {
    CFNumberRef v29 = (unsigned char *)(a3 + 7288);
    int v30 = *(unsigned __int8 *)(a3 + 7288);
    if (!v30)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "SlowWiFiHUD: action:%d reason:%d HUD_update:start", valuePtr, HIDWORD(valuePtr))];
      }
      *(double *)(a3 + 7248) = v9;
      *(void *)(a3 + 7280) = valuePtr;
      *(void *)(a3 + 7272) = 35;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"SlowWiFi HUD: starting display"];
      }
      *(void *)(a3 + 7224) = 0;
      char v34 = +[NSString stringWithFormat:@"Slow WiFi: %llus", *(void *)(a3 + 7264)];
      if (!*v29)
      {
        CFDictionaryRef v35 = v34;
        unsigned char *v29 = 1;
        if (MGGetBoolAnswer())
        {
          CFRange v36 = *(void (**)(uint64_t, uint64_t, NSString *, void))(a3 + 4552);
          if (v36) {
            v36(a3, 17, v35, *(void *)(a3 + 4560));
          }
        }
        CFStringRef v37 = *(NSObject **)(a3 + 7256);
        dispatch_time_t v38 = dispatch_time(0, 1000000000);
        dispatch_source_set_timer(v37, v38, 0xFFFFFFFFFFFFFFFFLL, 0);
      }
      if (v15) {
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "SlowWiFiHUD: previous_stage:%d current_stage:%d previous_reason:%d current_reason:%d remaining_display_duration:%lld current_HUD_update:increment timeSinceFirstNotification:%lld", *(unsigned int *)(a3 + 7280), valuePtr, *(unsigned int *)(a3 + 7284), HIDWORD(valuePtr), *(void *)(a3 + 7272), (uint64_t)(v9 - *(double *)(a3 + 7248)));
    }
    *(void *)(a3 + 7272) = 35;
  }
  if (v15) {
LABEL_34:
  }
    CFRelease(v15);
LABEL_35:
}

void sub_1000F8A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000F8A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 && (CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(a3 + 4552)) != 0) {
    v3(a3, 16, a2, *(void *)(a3 + 4560));
  }
  else {
    sub_100125B18(a3, -1);
  }
}

void sub_1000F8A40(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (!a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s manager is NULL" args:__WiFiDeviceManagerHandleBssPrunedEvent];
    }
    goto LABEL_24;
  }
  if (!a4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s dict is NULL", @"__WiFiDeviceManagerHandleBssPrunedEvent"];
    }
    goto LABEL_24;
  }
  if (!sub_1000704FC(a1))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s Pruned event received when BssBlacklisting is not supported! Bailing", @"__WiFiDeviceManagerHandleBssPrunedEvent"];
    }
    goto LABEL_24;
  }
  id v9 = [a4 objectForKey:@"PRUNEEVENT_REASON"];
  id v10 = [a4 objectForKey:@"BSSID"];
  if (!v10) {
    goto LABEL_13;
  }
  if (!v9) {
    goto LABEL_13;
  }
  BOOL v11 = v10;
  if ([v9 intValue] != -528337897) {
    goto LABEL_13;
  }
  CFNumberRef v12 = sub_10001C1B4(a1, a2);
  if (!v12)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s Current network is NULL. Not handling the BSS pruned event" args:__WiFiDeviceManagerHandleBssPrunedEvent];
    }
LABEL_24:
    goto LABEL_13;
  }
  CFNumberRef v13 = v12;
  int v14 = (NSString *)ether_ntoa((const ether_addr *)[v11 bytes]);
  if (v14) {
    int v14 = +[NSString stringWithUTF8String:v14];
  }
  sub_10001C6A4((uint64_t)v13, @"BSSID", v14);
  id v15 = sub_10000AD1C((uint64_t)v13);
  if (v15)
  {
    id v16 = v15;
    [*(id *)(a3 + 6648) processDenyListedBSSForMetrics:v15];
    CFRelease(v16);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s Current network is NULL. Not handling the BSS pruned event" args:__WiFiDeviceManagerHandleBssPrunedEvent];
    }
  }
  CFRelease(v13);
LABEL_13:
}

void sub_1000F8C80(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    if (a4)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Traffic Info Event Dictionary %@", a4 message];
      }
      id v7 = [a4 objectForKey:@"CRITICAL_TRAFFIC_STATE"];
      id v8 = [a4 objectForKey:@"NON_CRITICAL_TRAFFIC_STATE"];
      LOBYTE(v7) = [v7 intValue];
      __int16 v9 = v7 | ([v8 intValue] << 8);
      uint64_t v10 = *(void *)(a3 + 120);
      sub_10003E360(v10, v9);
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s dict is NULL" args:__WiFiDeviceManagerHandleTrafficInfoEvent];
    }
    CFNumberRef v12 = v6;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s manager is NULL" args:__WiFiDeviceManagerHandleTrafficInfoEvent];
    }
    CFNumberRef v12 = v11;
  }
}

void sub_1000F8DD0(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    if (a4)
    {
      id v8 = sub_100018FA8(a3, a2, 1);
      if (v8)
      {
        __int16 v9 = v8;
        id v10 = [a4 objectForKey:@"BEACON_CACHE_UPDATED_EVENT_NUM_CHAN"];
        id v11 = [a4 objectForKey:@"BEACON_CACHE_UPDATED_EVENT_STATUS"];
        if (v10)
        {
          if (v11)
          {
            if ([v11 unsignedIntValue])
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"%s Status is not successful" :@"__WiFiDeviceManagerProcessBeaconCacheUpdatedEvent"];
              }
            }
            else if ([v10 unsignedIntValue] <= 1)
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"%s Not enough channels" args:__WiFiDeviceManagerProcessBeaconCacheUpdatedEvent];
              }
            }
            else
            {
              CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
              if (Mutable)
              {
                CFArrayRef v13 = Mutable;
                sub_10006C744();
                if (CFArrayGetCount(v13))
                {
                  int v14 = sub_10006C8A8(*(void *)(a3 + 64), (uint64_t)a2, 0, v13, 0);
                  if (v14)
                  {
                    id v15 = v14;
                    id v16 = (__CFArray *)sub_100037F3C(*(void *)(a3 + 120));
                    if (v16)
                    {
                      double v17 = v16;
                      sub_100058910(v9, v15, v16);
                      CFRelease(v15);
                      id v15 = v17;
                    }
                    CFRelease(v15);
                  }
                }
                CFRelease(v13);
                goto LABEL_15;
              }
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"%s beaconScanCache alloc cache failed" :@"__WiFiDeviceManagerProcessBeaconCacheUpdatedEvent"];
              }
            }
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s statusNum nil" args:__WiFiDeviceManagerProcessBeaconCacheUpdatedEvent];
            }
          }
        }
        else
        {
          if (qword_10027DD68) {
            [qword_10027DD68 WFLog:message:4, "%s chanNum nil", "__WiFiDeviceManagerProcessBeaconCacheUpdatedEvent"];
          }
        }
LABEL_15:
        CFRelease(v9);
        goto LABEL_16;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s currentNetwork nil" args:__WiFiDeviceManagerProcessBeaconCacheUpdatedEvent];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:@"%s eventData nil" :4 :@"__WiFiDeviceManagerProcessBeaconCacheUpdatedEvent"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s manager nil" : @"__WiFiDeviceManagerProcessBeaconCacheUpdatedEvent"];
    }
  }
LABEL_16:
}

uint64_t sub_1000F90D0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result = a3[507];
  if (result)
  {
    __int16 v9 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t, void, uint64_t))a3[507];
    uint64_t v7 = sub_100017C48(a3[8]);
    uint64_t v8 = a3[508];
    return v9(a3, v7, a4, 0, v8);
  }
  return result;
}

void sub_1000F9148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    CFNumberRef v4 = (unsigned __int8 *)(a3 + 5216);
    CFStringRef v5 = *(const __CFString **)(a3 + 7352);
    if (v5)
    {
      CFIndex Length = CFStringGetLength(v5);
      BOOL v7 = Length == 0;
      BOOL v8 = Length != 0;
    }
    else
    {
      BOOL v8 = 0;
      BOOL v7 = 1;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: countryCodeDidBecomeAvailable=%d __WiFiDeviceManagerGetMISGlobalState=%d manager->mis.misEnabled=%d manager->softapUserPreferredBand=%d manager->mis.misChannel=%d", "__WiFiDeviceManagerProcessSupportedChannelInfoChangedEvent", v8, sub_10010EB14(a3), v4[3], *(unsigned int *)(a3 + 7048), *v4];
    }
    if (!v7 && sub_10010EB14(a3) && v4[3] && *(_DWORD *)(a3 + 7048) != 1 && *v4 <= 0xEu)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: country code changed to %@ while SoftAP hotspot is in 2.4GHz. Restarting to select new channel...", "__WiFiDeviceManagerProcessSupportedChannelInfoChangedEvent", *(void *)(a3 + 7352) message];
      }
      sub_10010B10C(a3, 1);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager" : @"__WiFiDeviceManagerProcessSupportedChannelInfoChangedEvent"];
    }
  }
}

uint64_t sub_1000F9318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    CFNumberRef v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a4 + 4824);
    if (v4) {
      return v4(a4, a2, a3, *(void *)(a4 + 4048));
    }
  }
  return result;
}

uint64_t sub_1000F9338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    CFNumberRef v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a4 + 4856);
    if (v4) {
      return v4(a4, a2, a3, *(void *)(a4 + 4048));
    }
  }
  return result;
}

void sub_1000F9358(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (a4)
  {
    *(void *)(a4 + 3817) = 0;
    *(_OWORD *)(a4 + 3788) = 0u;
    *(_OWORD *)(a4 + 3804) = 0u;
    if (a3)
    {
      long long v4 = *a3;
      long long v5 = a3[1];
      *(void *)(a4 + 3817) = *(void *)((char *)a3 + 29);
      *(_OWORD *)(a4 + 3788) = v4;
      *(_OWORD *)(a4 + 3804) = v5;
    }
    sub_1000130BC(a4);
  }
}

uint64_t sub_1000F938C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(a6 + 4920))(a6, a2, a3, a4, a5, *(void *)(a6 + 4928));
  }
  return result;
}

void sub_1000F93A8(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, CFTypeRef *a5)
{
  if (!a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: manager is NULL!", @"__WiFiDeviceManagerRequestForNextMatchingHS20AccountCallback"];
    }
    goto LABEL_32;
  }
  if (!a4)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: inNetwork is NULL!", "__WiFiDeviceManagerRequestForNextMatchingHS20AccountCallback")
    }
    goto LABEL_32;
  }
  if (!a5)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: outAccount is NULL!", @"__WiFiDeviceManagerRequestForNextMatchingHS20AccountCallback"];
    }
LABEL_32:
    return;
  }
  *a5 = 0;
  CFArrayRef v7 = *(const __CFArray **)(a3 + 3624);
  if (v7)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a3 + 3624));
    v26.location = 0;
    v26.length = Count;
    FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v7, v26, a4);
    if (FirstIndexOfValue != -1)
    {
      CFIndex v10 = FirstIndexOfValue;
      CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v7, FirstIndexOfValue);
      CFNumberRef v12 = sub_10001E404((uint64_t)a4, @"HS20AccountName");
      CFArrayRef v13 = sub_10001E404((uint64_t)ValueAtIndex, @"HS20AccountName");
      if (!v12 && v13 && sub_1000C95F4(ValueAtIndex))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: immediately matched HS2.0 account %@, returning %@", "__WiFiDeviceManagerRequestForNextMatchingHS20AccountCallback", sub_10001A43C(ValueAtIndex), ValueAtIndex message];
        }
        id v15 = ValueAtIndex;
        goto LABEL_24;
      }
      CFIndex v16 = v10 + 1;
      if (v10 + 1 < Count)
      {
        do
        {
          double v17 = (void *)CFArrayGetValueAtIndex(v7, v16);
          if (v17)
          {
            CFStringRef v18 = v17;
            if (sub_1000C8E4C((uint64_t)a4, (uint64_t)v17))
            {
              int v19 = sub_1000C95F4(v18);
              CFNumberRef v21 = (void *)qword_10027DD68;
              if (v19)
              {
                if (qword_10027DD68)
                {
                  CFNumberRef v23 = sub_10001A43C(v18);
                  [v21 WFLog:3, "%s: found HS2.0 account %@ matching %@, returning %@", "__WiFiDeviceManagerRequestForNextMatchingHS20AccountCallback", v23, sub_10001A43C(a4), v18 message];
                }
                id v15 = v18;
LABEL_24:
                *a5 = CFRetain(v15);
                return;
              }
              if (qword_10027DD68)
              {
                uint64_t v22 = sub_10001A43C(v18);
                [v21 WFLog:3, "%s: next HS2.0 account %@ matching %@ has no credentials, skipping", "__WiFiDeviceManagerRequestForNextMatchingHS20AccountCallback", v22, sub_10001A43C(a4) message];
              }
            }
          }
          ++v16;
        }
        while (Count != v16);
      }
    }
  }
}

void sub_1000F9694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  unsigned __int8 valuePtr = 0;
  if (a2)
  {
    if (a5)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s:Notification %@ received", "__WiFiDeviceManagerRoamNotificationCallback", a3 message];
      }
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a5, @"com.apple.wifid.wifiroammangerroamtype");
      if (Value)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: kWiFiRoamManagerRoamTypeKey value is %@", "__WiFiDeviceManagerRoamNotificationCallback", Value message];
        }
        int v27 = -1431655766;
        CFNumberGetValue(Value, kCFNumberCharType, &valuePtr);
        CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(a5, @"com.apple.wifid.wifiroammangerroamreason");
        if (v10)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: kWiFiRoamManagerRoamReasonKey value is %@", "__WiFiDeviceManagerRoamNotificationCallback", v10 message];
          }
          CFNumberGetValue(v10, kCFNumberIntType, &v27);
          if (valuePtr >= 3u)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: Invalid band preference" args:("__WiFiDeviceManagerRoamNotificationCallback")];
            }
          }
          else
          {
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            if (Mutable)
            {
              CFArrayRef v13 = Mutable;
              __int16 v26 = -1;
              *(_DWORD *)bytes = -1;
              CFDataRef v14 = CFDataCreate(kCFAllocatorDefault, bytes, 6);
              if (v14)
              {
                CFDataRef v15 = v14;
                CFDictionaryAddValue(v13, @"BSSID", v14);
                CFNumberRef v16 = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
                if (v16)
                {
                  CFNumberRef v17 = v16;
                  CFDictionaryAddValue(v13, @"BAND_PREFERENCE", v16);
                  CFRelease(v17);
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s:calling DeviceSetRoam with :%@", "__WiFiDeviceManagerRoamNotificationCallback", v13 message];
                  }
                  sub_100072644(*(void *)(a2 + 64), (uint64_t)v13);
                }
                else
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:4 message:@"%s: numRef is NULL" args:("__WiFiDeviceManagerRoamNotificationCallback", nil)];
                  }
                }
                CFRelease(v15);
              }
              else
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4 message:@"%s: bssidDataRef is NULL" arguments:("__WiFiDeviceManagerRoamNotificationCallback", 0)];
                }
              }
              CFRelease(v13);
              return;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: bssidInfo is NULL" args:("__WiFiDeviceManagerRoamNotificationCallback")];
            }
          }
          CFNumberRef v20 = v19;
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4, @"%s: numRef for kWiFiRoamManagerRoamReason is NULL", @"__WiFiDeviceManagerRoamNotificationCallback"];
          }
          CFNumberRef v20 = v11;
        }
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: numRef for kWiFiRoamManagerRoamType is NULL", @"__WiFiDeviceManagerRoamNotificationCallback"];
      }
    }
    else if (qword_10027DD68)
    {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: userInfo is NULL" args:("__WiFiDeviceManagerRoamNotificationCallback")];
    }
    uint64_t v22 = v8;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL" args:("__WiFiDeviceManagerRoamNotificationCallback")];
    }
    uint64_t v22 = v21;
  }
}

void sub_1000F9A30(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (a3)
  {
    sub_10010B218(a3, a4, a5);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager", @"__WiFiDeviceManagerConfigureForXCTests"];
    }
  }
}

void sub_1000F9ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    long long v4 = *(void **)(a4 + 7368);
    if (v4) {
      [v4 updateScanForwardStats:];
    }
  }
}

void sub_1000F9AD0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1000F4564(a2, @"TriggerWatchdog");
    *(unsigned char *)(a2 + 3497) = 1;
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:4 message:@"%s: manager is NULL" arguments:__WiFiDeviceManagerChipResetRequestedCallback];
    }
  }
}

void sub_1000F9B6C(uint64_t a1)
{
  if (a1)
  {
    CFStringRef v2 = (unsigned __int8 *)(a1 + 5217);
    char v3 = *(unsigned char *)(a1 + 5217);
    char v4 = *(unsigned char *)(a1 + 5218);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 5221);
    if (*(_DWORD *)(a1 + 5232) == 5)
    {
      CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 5272), @"wifid");
      sub_10010F2A8(a1, 0);
      CFSetRef v6 = *(const __CFSet **)(a1 + 5272);
      if (!v6 || !CFSetGetCount(v6))
      {
        CFSetRef v7 = *(const __CFSet **)(a1 + 5280);
        if (!v7 || !CFSetGetCount(v7))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3 message:"No Discovery Client"];
          }
          uint64_t v5 = 0;
          void v2[4] = 0;
        }
      }
    }
    if (*(void *)(a1 + 4136))
    {
      sub_10010F2A8(a1, 0);
      (*(void (**)(uint64_t, void, uint64_t))(a1 + 4136))(a1, *(void *)(a1 + 4144), v5);
    }
    unsigned __int8 v9 = v4 + v3;
    if (qword_10027DD68)
    {
      id v11 = "Enabled";
      if (v2[2]) {
        CFNumberRef v12 = "Enabled";
      }
      else {
        CFNumberRef v12 = "Disabled";
      }
      if (!v5) {
        id v11 = "Disabled";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS idle timer expired. MIS is %s, associated clients = %d, nan associated clients = %d, discovery is %s", v12, v9, v2[1], v11);
    }
    BOOL v16 = (~v2[1840] & 5) == 0
       && ((CFSetRef v13 = *(const __CFSet **)(a1 + 5288)) == 0 || !CFSetGetCount(v13))
       && ((CFSetRef v14 = *(const __CFSet **)(a1 + 5304)) == 0 || !CFSetGetCount(v14))
       && ((CFSetRef v15 = *(const __CFSet **)(a1 + 5312)) == 0 || !CFSetGetCount(v15))
       && *(_DWORD *)(a1 + 5232) == 4;
    if (v2[5]) {
      goto LABEL_28;
    }
    if (!v2[2]) {
      goto LABEL_53;
    }
    BOOL v19 = !v16;
    if (!v9) {
      BOOL v19 = 0;
    }
    if (!v19 && !v5)
    {
LABEL_28:
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS idle timer expired (inRecovery: %d) (Concurrent Mode: %d), disabling tethering", v2[5], v16);
      }
      uint64_t v31 = 0;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      DWORD2(v21) = 2;
      if ([*(id *)(a1 + 6752) isNANPublisherStarted])
      {
        LODWORD(v28) = 2;
        *((void *)&v28 + 1) = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", @"Idle Timer expired");
        *((void *)&v29 + 1) = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", @"User request");
        *((void *)&v27 + 1) = sub_10005A994();
      }
      sub_10010E020(a1, (uint64_t)&v21);
      sub_10010E474(a1);
    }
    else
    {
LABEL_53:
      if (_os_feature_enabled_impl() && v2[2] && !v2[1])
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"NANPHS: stopping NAN Publisher after idle time expired \n"];
        }
        [*(id *)(a1 + 6752) stopPublisherForPHSOverNAN];
        v2[169] = 0;
        sub_100100A60((char *)a1, 8, 0);
        uint64_t v31 = 0;
        long long v29 = 0u;
        long long v30 = 0u;
        *(void *)&long long v27 = 0;
        *(void *)&long long v28 = 8;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        *((void *)&v28 + 1) = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", @"All Nan Clients Left");
        *((void *)&v27 + 1) = sub_10005A994();
        sub_10010E020(a1, (uint64_t)&v21);
      }
    }
    *(_DWORD *)(a1 + 5232) = 0;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL" : @"__WiFiDeviceManagerMISIdleTimerCallback"];
    }
  }
}

void sub_1000F9F4C(uint64_t a1)
{
  CFStringRef v2 = *(NSObject **)(a1 + 5320);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  dispatch_time_t v4 = dispatch_time(0, (uint64_t)((Current + 315360000.0) * 1000000000.0));
  dispatch_source_set_timer(v2, v4, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Timer Expired\n", "__WiFiDeviceManagerBroadcastToHiddenTimerCallback")];
  }

  sub_10010F5FC(a1);
}

void sub_1000FA004(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: timeout - resetting critical phase state", "__WiFiDeviceManagerPriorityLinkSetupPhaseTimerCallback")];
  }
  *(unsigned char *)(a1 + 5504) = 0;
}

void sub_1000FA070(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: timeout - calling __WiFiDeviceManagerEvaluate24GHzInfraNetworkState", "__WiFiDeviceManager24GHzInfraNetworkCriticalTimerCallback")];
  }
  sub_100101574(a1, 0);
  *(unsigned char *)(a1 + 8600) = 0;
}

uint64_t sub_1000FA0E8(uint64_t a1)
{
  if (qword_10027DD68) {
    [qword_10027DD68 WFLog:message:3, "%s: CarPlay HID session timed out", "__WiFiDeviceManagerCarPlayHidSessionTimerCallback"];
  }
  uint64_t result = sub_100070140(*(void *)(a1 + 64));
  *(unsigned char *)(a1 + 8640) = 0;
  return result;
}

void sub_1000FA160(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: timed out", "__WiFiDeviceManagerCarPlayLinkDownMonitorTimerCallback")];
  }
  uint64_t v3 = *(void *)(a1 + 976);
  if (v3)
  {
    sub_1001307DC(a1, v3, 1021, 0);
    dispatch_time_t v4 = *(const void **)(a1 + 976);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 976) = 0;
    }
  }
}

void sub_1000FA1EC(uint64_t a1)
{
  long long v79 = 0uLL;
  CFStringRef v2 = malloc_type_malloc(0x400uLL, 0x5467F7EBuLL);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)(a1 + 64);
    CFStringRef v5 = (const __CFString *)sub_100017C48(v4);
    uint64_t v6 = sub_1000638F8(v4, v5, "dump", "lpc", 0, v3, 0x400u);
    if (!v6)
    {
      v3[1023] = 0;
      id v7 = [objc_alloc((Class)NSString) initWithCString:v3 encoding:4];
      if (!v7)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: failed to alloc string", "__WiFiDeviceManagerGetLPCStats", v52, v53, v54, v55, v56, v57, v58);
        }
        goto LABEL_19;
      }
      BOOL v8 = v7;
      unsigned __int8 v9 = +[NSRegularExpression regularExpressionWithPattern:@"valid (\\d)" options:0 error:0];
      uint64_t v10 = 0;
      if (v9)
      {
        id v11 = -[NSRegularExpression matchesInString:options:range:](v9, "matchesInString:options:range:", v8, 0, 0, [v8 length]);
        long long v71 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        id v12 = [(NSArray *)v11 countByEnumeratingWithState:&v71 objects:v78 count:16];
        if (v12)
        {
          id v13 = v12;
          char v14 = 0;
          uint64_t v15 = *(void *)v72;
          do
          {
            for (CFIndex i = 0; i != v13; CFIndex i = (char *)i + 1)
            {
              if (*(void *)v72 != v15) {
                objc_enumerationMutation(v11);
              }
              id v17 = [*(id *)(*((void *)&v71 + 1) + 8 * i) rangeAtIndex:1];
              if ([[v8 substringWithRange:v17] isEqualToString:@"1"])char v14 = 1; {
            }
              }
            id v13 = [(NSArray *)v11 countByEnumeratingWithState:&v71 objects:v78 count:16];
          }
          while (v13);
          if (v14)
          {
            long long v21 = +[NSRegularExpression regularExpressionWithPattern:@"min_offset -(\\d+.\\d)dB" options:0 error:0];
            uint64_t v10 = 0;
            if (v21)
            {
              long long v22 = -[NSRegularExpression matchesInString:options:range:](v21, "matchesInString:options:range:", v8, 0, 0, [v8 length]);
              long long v67 = 0u;
              long long v68 = 0u;
              long long v69 = 0u;
              long long v70 = 0u;
              id v23 = [(NSArray *)v22 countByEnumeratingWithState:&v67 objects:v77 count:16];
              if (v23)
              {
                id v24 = v23;
                uint64_t v25 = *(void *)v68;
                do
                {
                  for (CFIndex j = 0; j != v24; CFIndex j = (char *)j + 1)
                  {
                    if (*(void *)v68 != v25) {
                      objc_enumerationMutation(v22);
                    }
                    id v27 = [*(id *)(*((void *)&v67 + 1) + 8 * (void)j) rangeAtIndex:1];
                    [objc_msgSend(v8, "substringWithRange:", v27, v28) doubleValue];
                  }
                  uint64_t v10 = v29;
                  id v24 = [(NSArray *)v22 countByEnumeratingWithState:&v67 objects:v77 count:16];
                }
                while (v24);
              }
            }
            unsigned __int8 v9 = +[NSRegularExpression regularExpressionWithPattern:@"Rates\\W+TX\\s+:(\\s+\\d+\\(\\d+%\\)){3}\\s+(\\d+)\\(\\d+%\\)" options:0 error:0];
            if (v9)
            {
              long long v30 = -[NSRegularExpression matchesInString:options:range:](v9, "matchesInString:options:range:", v8, 0, 0, [v8 length]);
              long long v63 = 0u;
              long long v64 = 0u;
              long long v65 = 0u;
              long long v66 = 0u;
              id v31 = [(NSArray *)v30 countByEnumeratingWithState:&v63 objects:v76 count:16];
              if (v31)
              {
                id v32 = v31;
                uint64_t v33 = *(void *)v64;
                do
                {
                  for (CFIndex k = 0; k != v32; CFIndex k = (char *)k + 1)
                  {
                    if (*(void *)v64 != v33) {
                      objc_enumerationMutation(v30);
                    }
                    id v35 = [*(id *)(*((void *)&v63 + 1) + 8 * (void)k) rangeAtIndex:2];
                    CFStringRef v37 = [(NSRegularExpression *)[v8 substringWithRange:v35, v36] longLongValue];
                  }
                  unsigned __int8 v9 = v37;
                  id v32 = [(NSArray *)v30 countByEnumeratingWithState:&v63 objects:v76 count:16];
                }
                while (v32);
              }
              else
              {
                unsigned __int8 v9 = 0;
              }
            }
            dispatch_time_t v38 = +[NSRegularExpression regularExpressionWithPattern:@"Offsets\\W+TX\\s+:\\s+\\d+\\((\\d+)%\\)\\s+\\d+\\((\\d+)%\\)\\s+\\d+\\((\\d+)%\\)\\s+\\d+\\((\\d+)%\\)" options:0 error:0];
            if (v38)
            {
              dispatch_time_t v39 = -[NSRegularExpression matchesInString:options:range:](v38, "matchesInString:options:range:", v8, 0, 0, [v8 length]);
              long long v59 = 0u;
              long long v60 = 0u;
              long long v61 = 0u;
              long long v62 = 0u;
              id v40 = [(NSArray *)v39 countByEnumeratingWithState:&v59 objects:v75 count:16];
              if (v40)
              {
                id v41 = v40;
                uint64_t v42 = *(void *)v60;
                do
                {
                  for (m = 0; m != v41; m = (char *)m + 1)
                  {
                    if (*(void *)v60 != v42) {
                      objc_enumerationMutation(v39);
                    }
                    uint64_t v44 = 0;
                    CFStringRef v45 = *(void **)(*((void *)&v59 + 1) + 8 * (void)m);
                    do
                    {
                      id v46 = [v45 rangeAtIndex:v44 + 1];
                      *((_DWORD *)&v79 + v44++) = [objc_msgSend(objc_msgSend(v8, "substringWithRange:", v46, v47), "integerValue");
                    }
                    while (v44 != 4);
                  }
                  id v41 = [(NSArray *)v39 countByEnumeratingWithState:&v59 objects:v75 count:16];
                }
                while (v41);
              }
            }
            *(unsigned char *)(a1 + 1008) = 1;
            *(void *)(a1 + 1016) = v10;
            *(_OWORD *)(a1 + 1024) = v79;
            *(void *)(a1 + 1040) = v9;
            BOOL v19 = "yes";
            goto LABEL_17;
          }
        }
        unsigned __int8 v9 = 0;
      }
      BOOL v19 = "no";
LABEL_17:
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: is LPC valid ? %s, min_offset -%.1f dB, topMcsTxCount %llu (AMPDU), txOffset %d:%d:%d:%d (%%)", "__WiFiDeviceManagerGetLPCStats", v19, v10, v9, v79, DWORD1(v79), DWORD2(v79), HIDWORD(v79)];
      }
LABEL_19:
      free(v3);
      return;
    }
    uint64_t v49 = v6;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: failed to get LPC stats" arguments:("__WiFiDeviceManagerGetLPCStats")];
    }
    free(v3);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: failed to alloc buf"];
    }
    uint64_t v49 = 4294963395;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, @"%s: error %d", @"__WiFiDeviceManagerGetLPCStats", v49];
  }
}

void sub_1000FA874(uint64_t a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: Assoc timeout timer fired, triggering CoreCapture", @"__WiFiDeviceManagerAssocStateTimerCallback"];
  }

  sub_100121FDC(a1);
}

void sub_1000FA8EC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 3280);
  if (v2 == 16)
  {
    if (qword_10027DD68)
    {
      uint64_t v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@+} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"Scanning for Hotspot Devices Timeout"]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        id v7 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v4 UTF8String]] UTF8String];
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      }
    }
    if (_os_feature_enabled_impl())
    {
      uint64_t v5 = *(void *)(a1 + 8864);
      if (v5)
      {
        (*(void (**)(uint64_t, NSError *, void))(v5 + 16))(v5, +[NSError errorWithDomain:NSPOSIXErrorDomain code:60 userInfo:0], 0);
        _Block_release(*(const void **)(a1 + 8864));
        *(void *)(a1 + 8864) = 0;
      }
    }
    if (*(_DWORD *)(a1 + 3280) == 16) {
      sub_1000FB0D0(a1, 0);
    }
    *(_DWORD *)(a1 + 3280) = sub_100003818(a1);
    *(void *)(a1 + 6872) = 0;
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Scanning Hotspot Device timeout in state %@.", "__WiFiDeviceManagerScanHotspotDeviceTimeoutCallback", sub_100024BE8(*(_DWORD *)(a1 + 3280)) message];
    }
  }
}

CFAbsoluteTime sub_1000FAB30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = (const void *)sub_100017C48(v2);
  uint64_t v4 = sub_10001C1B4(v2, v3);
  if (v4)
  {
    uint64_t v5 = v4;
    if (sub_10001E71C((uint64_t)v4))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, "%s: Device in Lock state over an %d minutes. Disconnect from Hotspot!!", "__WiFiDeviceManagerAutoHotspotLockStateTimeoutCallback", 60];
      }
      id v7 = (const void *)sub_100017C48(*(void *)(a1 + 64));
      sub_1000FEA7C(a1, v7, 1019, "__WiFiDeviceManagerAutoHotspotLockStateTimeoutCallback", 36585);
    }
    BOOL v8 = *(NSObject **)(a1 + 6816);
    dispatch_time_t v9 = dispatch_time(0, 315360000000000000);
    dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(CFAbsoluteTime *)(a1 + 6824) = CFAbsoluteTimeGetCurrent() + 315360000.0;
    CFRelease(v5);
  }
  else
  {
    id v11 = *(NSObject **)(a1 + 6816);
    dispatch_time_t v12 = dispatch_time(0, 315360000000000000);
    dispatch_source_set_timer(v11, v12, 0xFFFFFFFFFFFFFFFFLL, 0);
    CFAbsoluteTime result = CFAbsoluteTimeGetCurrent() + 315360000.0;
    *(CFAbsoluteTime *)(a1 + 6824) = result;
  }
  return result;
}

void sub_1000FAC90(uint64_t a1, char a2, NSObject **cf)
{
  if (cf)
  {
    if (cf[30])
    {
      CFRetain(cf);
      uint64_t v6 = cf[30];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000FADC8;
      block[3] = &unk_100241498;
      uint64_t v7 = *(void *)(a1 + 32);
      void block[4] = cf;
      void block[5] = v7;
      char v10 = a2;
      dispatch_async(v6, block);
      return;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null queue.", "WiFiDeviceManagerCreate_block_invoke_2")];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:@"%s: null deviceManager" message:3];
    }
  }
}

void sub_1000FADC8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[30])
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(unsigned int *)(v3 + 3280);
    dispatch_source_set_timer(*(dispatch_source_t *)(v3 + 6808), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    if (qword_10027DD68)
    {
      if (*(unsigned char *)(a1 + 48)) {
        uint64_t v6 = "found";
      }
      else {
        uint64_t v6 = "not found";
      }
      [((id)qword_10027DD68) WFLog:3, @"%s: hotspot networks %s", @"WiFiDeviceManagerCreate_block_invoke_3", v6];
    }
    if (*(unsigned char *)(a1 + 48))
    {
      id v7 = [*(id *)(*(void *)(a1 + 40) + 6744) copySortedHotspotDevicesByAutoPreferences];
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: sorted hotspot device list %@", "WiFiDeviceManagerCreate_block_invoke_3", v7 message];
      }
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      id v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v9)
      {
        id v10 = v9;
        uint64_t v11 = *(void *)v17;
        do
        {
          for (CFIndex i = 0; i != v10; CFIndex i = (char *)i + 1)
          {
            if (*(void *)v17 != v11) {
              objc_enumerationMutation(v7);
            }
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(a1 + 40) + 6840), *(const void **)(*((void *)&v16 + 1) + 8 * i));
          }
          id v10 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
        }
        while (v10);
      }
      *(CFAbsoluteTime *)(*(void *)(a1 + 40) + 6848) = CFAbsoluteTimeGetCurrent();
    }
    else
    {
      id v7 = 0;
    }
    if (_os_feature_enabled_impl())
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8864);
      if (v13)
      {
        (*(void (**)(uint64_t, void, id))(v13 + 16))(v13, 0, v7);
        _Block_release(*(const void **)(*(void *)(a1 + 40) + 8864));
        *(void *)(*(void *)(a1 + 40) + 8864) = 0;
      }
    }

    if ((v4 - 20) > 0xFFFFFFFB)
    {
      if (sub_1000FB13C(*(void *)(a1 + 40)))
      {
        sub_1000FB1B0(*(void *)(a1 + 40));
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:@"%s: Auto hotspot attempt canceled because user auto join is disabled." message:3];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Received Update Hotspot Devices in state %d", "WiFiDeviceManagerCreate_block_invoke_3", v4);
      }
      sub_1000FB0D0(*(void *)(a1 + 40), 0);
    }
    CFRelease(*(CFTypeRef *)(a1 + 32));
  }
  else
  {
    CFRelease(v2);
  }
}

uint64_t sub_1000FB0C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 3280);
}

CFAbsoluteTime sub_1000FB0D0(uint64_t a1, int a2)
{
  uint64_t v3 = *(void **)(a1 + 6744);
  if (a2)
  {
    [v3 startBrowsing];
    CFAbsoluteTime result = CFAbsoluteTimeGetCurrent();
    *(CFAbsoluteTime *)(a1 + 6960) = result;
    ++*(_DWORD *)(a1 + 6172);
  }
  else if ([v3 isScanning])
  {
    [*(id *)(a1 + 6744) stopBrowsing];
    CFAbsoluteTime result = *(double *)(a1 + 6176) + CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 6960);
    *(CFAbsoluteTime *)(a1 + 6176) = result;
  }
  return result;
}

uint64_t sub_1000FB13C(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 6280);
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: null device manager" args:("__WiFiDeviceManagerGetUserAutoJoin")];
  }
  return 0;
}

void sub_1000FB1B0(uint64_t a1)
{
  uint64_t v3 = (void **)&qword_10027DD68;
  if (qword_10027DD68)
  {
    uint64_t v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@+} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: current state: %@", "__WiFiDeviceManagerStateMachineRun", sub_100024BE8(*(_DWORD *)(a1 + 3280))]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v4 UTF8String]] UTF8String];
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
  }
  switch(*(_DWORD *)(a1 + 3280))
  {
    case 0:
    case 1:
      if (_os_feature_enabled_impl()) {
        goto LABEL_358;
      }
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3560));
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3568));
      [*(id *)(a1 + 3656) clearScanResultsForAutoJoinSessionReset];
      CFStringRef v49 = (const __CFString *)sub_100016E20(*(void *)(a1 + 64));
      sub_100050E54(a1, v49, 0);
      buf[0] = 0;
      int v50 = sub_100136108(a1, buf);
      if (*(unsigned char *)(a1 + 32)
        && *(unsigned char *)(a1 + 33)
        && *(_DWORD *)(a1 + 176) == 3
        && buf[0]
        && !v50
        && !*(unsigned char *)(a1 + 3304)
        && *(_DWORD *)(a1 + 192) != 14
        && *(_DWORD *)(a1 + 5520) != 1)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4 message:"Falling to 2Ghz scan to save power"];
        }
        *(_DWORD *)(a1 + 28) = 1;
      }
      if (*(unsigned char *)(a1 + 24)
        && sub_100063EA8(*(void *)(a1 + 64))
        && (*(_DWORD *)(a1 + 5520) == 1 || *(unsigned char *)(a1 + 5504) || !*(_DWORD *)(a1 + 28)))
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Attempting multi-stage auto join mStageAutoJoinAttempts=%d", *(unsigned int *)(a1 + 28));
        }
        unsigned int v53 = sub_100132DC0(a1);
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Fallback to existing auto-join mStageAutoJoinAttempts=%d", *(unsigned int *)(a1 + 28));
        }
        unsigned int v53 = sub_100133720(a1);
      }
      goto LABEL_330;
    case 2:
    case 3:
    case 4:
      if (_os_feature_enabled_impl()) {
        goto LABEL_358;
      }
      CFArrayRef v38 = *(const __CFArray **)(a1 + 1096);
      unsigned int v39 = *(_DWORD *)(a1 + 1088);
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 3624));
      CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
      unsigned int contexta = v39;
      if (!v38 || v39) {
        goto LABEL_361;
      }
      int v196 = 0;
      long long v194 = 0u;
      long long v195 = 0u;
      *(_OWORD *)long long buf = 0u;
      sub_1001392E4(a1);
      int v42 = *(_DWORD *)(a1 + 3280);
      if (v42 == 4 || v42 == 2)
      {
        CFStringRef v43 = *(const void **)(a1 + 1152);
        if (v43)
        {
          CFRelease(v43);
          *(void *)(a1 + 1152) = 0;
        }
      }
      CFArrayRef v44 = *(const __CFArray **)(a1 + 1112);
      if (!v44)
      {
        CFArrayRef v44 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        *(void *)(a1 + 1112) = v44;
      }
      CFMutableArrayRef v45 = *(CFMutableArrayRef *)(a1 + 1168);
      if (!v45)
      {
        CFMutableArrayRef v45 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        *(void *)(a1 + 1168) = v45;
        CFArrayRef v44 = *(const __CFArray **)(a1 + 1112);
      }
      if (!v44 || !v45)
      {
LABEL_361:
        if (Mutable) {
          CFRelease(Mutable);
        }
        goto LABEL_363;
      }
      int v46 = *(_DWORD *)(a1 + 3280);
      if (!*(unsigned char *)(a1 + 5608) || v46 != 3) {
        goto LABEL_177;
      }
      CFIndex v47 = CFArrayGetCount(v44);
      CFIndex v48 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3568)) + v47;
      if (v48 + CFArrayGetCount(*(CFArrayRef *)(a1 + 3560)))
      {
        int v46 = *(_DWORD *)(a1 + 3280);
LABEL_177:
        if ((v46 - 3) <= 1) {
          *(CFAbsoluteTime *)(a1 + 3296) = CFAbsoluteTimeGetCurrent();
        }
        int v185 = 1;
      }
      else
      {
        int v185 = 0;
      }
      sub_1001393BC(a1, v38);
      CFIndex v97 = CFArrayGetCount(v38);
      CFIndex v190 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3552));
      CFIndex v98 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3544));
      uint64_t v99 = 0;
      BOOL v100 = Count <= 0 && v98 == 0;
      if (v100 || v97 < 1) {
        goto LABEL_247;
      }
      CFIndex v101 = v98;
      CFIndex v102 = 0;
      uint64_t v99 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v38, v102);
        if (!ValueAtIndex) {
          goto LABEL_229;
        }
        int v104 = ValueAtIndex;
        if (*(_DWORD *)(a1 + 3280) == 2)
        {
          CFNumberRef v105 = (const __CFNumber *)sub_10001E404((uint64_t)ValueAtIndex, @"CHANNEL");
          LODWORD(valuePtr) = 0;
          if (v105)
          {
            CFNumberGetValue(v105, kCFNumberSInt32Type, &valuePtr);
            if ((LODWORD(valuePtr) - 1) <= 0xC) {
              ++*(_DWORD *)&buf[4 * (LODWORD(valuePtr) - 1)];
            }
          }
        }
        if (!sub_10012EE58(a1, v104, 0)) {
          goto LABEL_229;
        }
        if (Count >= 1 && sub_10001BB2C((BOOL)v104))
        {
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 1112), v104);
        }
        else
        {
          if (sub_10001EB5C(v104))
          {
            if (v190)
            {
              if (CFArrayGetCount(*(CFArrayRef *)(a1 + 3552)) < 1)
              {
LABEL_202:
                if (Mutable) {
                  sub_1001396A8(a1, v104, Mutable);
                }
              }
              else
              {
                CFIndex v106 = 0;
                while (1)
                {
                  id v107 = (const __CFDictionary **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3552), v106);
                  if (!v107) {
                    break;
                  }
                  if (sub_1000C8ABC(v107, (const __CFDictionary **)v104)) {
                    goto LABEL_226;
                  }
                  if (++v106 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 3552))) {
                    goto LABEL_202;
                  }
                }
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4 message:@"knownHiddenNetwork is NULL!, Added the hidden scan result"];
                }
LABEL_226:
                if (v185) {
                  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 1112), v104);
                }
                uint64_t v99 = (v99 + 1);
              }
            }
            goto LABEL_229;
          }
          v202.location = 0;
          v202.length = v101;
          FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 3544), v202, v104);
          if (FirstIndexOfValue != -1)
          {
            CFArrayRef v109 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3544), FirstIndexOfValue);
            if (v109)
            {
              uint64_t v110 = (uint64_t)v109;
              if (!sub_1000199C0((uint64_t)v109) || sub_1000CD678((uint64_t)v104))
              {
                sub_1001366D0(a1, v104);
                if (sub_10012EE58(a1, v104, 0))
                {
                  v111 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v104);
                  if (v111)
                  {
                    uint64_t v112 = v111;
                    sub_1000C63FC((uint64_t)v111, v110);
                    CFArrayRef v113 = *(const __CFArray **)(a1 + 1112);
                    v203.length = CFArrayGetCount(v113);
                    v203.location = 0;
                    CFIndex v114 = CFArrayGetFirstIndexOfValue(v113, v203, v112);
                    if (v114 != -1)
                    {
                      CFIndex idx = v114;
                      v177 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1112), v114);
                      sub_10001A610((uint64_t)v177, @"AJFoundOnDualBand", 1);
                      v178 = v112;
                      sub_10001A610((uint64_t)v112, @"AJFoundOnDualBand", 1);
                      CFNumberRef v115 = CFStringCreateMutable(kCFAllocatorDefault, 0);
                      CFMutableStringRef v116 = CFStringCreateMutable(kCFAllocatorDefault, 0);
                      CFTypeRef cf = v115;
                      if (v115 && v116)
                      {
                        CFNumberRef v117 = v116;
                        sub_1001397BC(a1, v177, v115);
                        sub_1001397BC(a1, v178, v117);
                        if (qword_10027DD68)
                        {
                          uint64_t v119 = v118;
                          [(id)qword_10027DD68 WFLog:3, "AJScan: Network found on two bands: {{ %@ }}, {{ %@ }}", cf, v117 message];
                          BOOL v118 = v119;
                        }
                        CFMutableStringRef v116 = v117;
                      }
                      CFMutableStringRef v176 = v116;
                      double v120 = sub_1000C7388((uint64_t)v177, @"Strength");
                      uint64_t v112 = v178;
                      if (v120 < sub_1000C7388((uint64_t)v178, @"Strength")) {
                        CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 1112), idx, v178);
                      }
                      if (cf) {
                        CFRelease(cf);
                      }
                      if (v176) {
                        CFRelease(v176);
                      }
                      ++*(_DWORD *)(a1 + 5844);
LABEL_246:
                      CFRelease(v112);
                      goto LABEL_229;
                    }
                    id v122 = CFStringCreateMutable(kCFAllocatorDefault, 0);
                    cfa = v122;
                    if (*(_DWORD *)(a1 + 3280) == 3)
                    {
                      if (v122)
                      {
                        sub_1001397BC(a1, v112, v122);
                        if (qword_10027DD68)
                        {
                          int v124 = v123;
                          [(id)qword_10027DD68 WFLog:4, "AJScan: Network found on 5Ghz only: {{ %@ }}", cfa message];
                          unsigned int v123 = v124;
                        }
                      }
                      ++*(_DWORD *)(a1 + 5840);
                      if (v185)
                      {
                        if (qword_10027DD68) {
                          [(id)qword_10027DD68 WFLog:4, "AJScan: Used Network found on 5Ghz: {{ %@ }}", cfa message];
                        }
                        goto LABEL_240;
                      }
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:4, "AJScan: Missed Network found on 5Ghz: {{ %@ }}", cfa message];
                      }
                    }
                    else
                    {
LABEL_240:
                      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 1112), v112);
                    }
                    if (cfa) {
                      CFRelease(cfa);
                    }
                    goto LABEL_246;
                  }
                }
              }
            }
          }
        }
LABEL_229:
        if (++v102 == v97)
        {
LABEL_247:
          if (Mutable)
          {
            if (CFStringGetLength(Mutable))
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:4, "Skipped the non-matching hidden networks - %@", Mutable message];
              }
            }
            CFRelease(Mutable);
          }
          if (*(_DWORD *)(a1 + 3280) == 3 && CFArrayGetCount(*(CFArrayRef *)(a1 + 1112)) >= 1)
          {
            CFIndex v127 = 0;
            do
            {
              CFStringRef v128 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1112), v127);
              if (sub_100023F30((uint64_t)v128) == 1
                && !sub_1000C6FC0((uint64_t)v128, @"AJFoundOnDualBand")
                && !sub_10001EB5C(v128))
              {
                v129 = CFStringCreateMutable(kCFAllocatorDefault, 0);
                ++*(_DWORD *)(a1 + 5848);
                if (v129)
                {
                  v130 = v129;
                  sub_1001397BC(a1, v128, v129);
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:4, "AJScan: Network found on 2Ghz only: {{ %@ }}", v130 message];
                  }
                  CFRelease(v130);
                }
              }
              ++v127;
            }
            while (v127 < CFArrayGetCount(*(CFArrayRef *)(a1 + 1112)));
          }
          sub_100139ACC(a1);
          [*(id *)(a1 + 3656) setScanResultsWithAutoJoinSessionCompletion:v38 complete:1];
          if (*(_DWORD *)(a1 + 3280) == 2)
          {
            uint64_t v132 = 0;
            unsigned __int8 v133 = 0;
            unsigned __int8 v134 = 0;
            do
            {
              int v135 = *(_DWORD *)&buf[v132];
              if (v135 > 9) {
                unsigned __int8 v134 = 1;
              }
              if (v135 > v133) {
                unsigned __int8 v133 = *(_DWORD *)&buf[v132];
              }
              v132 += 4;
            }
            while (v132 != 52);
          }
          else
          {
            unsigned __int8 v134 = 0;
            unsigned __int8 v133 = 0;
          }
          int v136 = CFArrayGetCount(*(CFArrayRef *)(a1 + 1112));
          uint64_t v137 = (v136 - v99);
          CFIndex v138 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3568));
          CFIndex v139 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3560));
          CFIndex v140 = v139;
          *(_DWORD *)(a1 + 5860) += v99;
          *(_DWORD *)(a1 + 5852) += v139;
          *(_DWORD *)(a1 + 5856) += v138;
          *(_DWORD *)(a1 + 5864) += v137;
          if (*(_DWORD *)(a1 + 3280) == 2)
          {
            *(_DWORD *)(a1 + 6144) = ((2 * (v99 != 0)) | (8 * (v134 != 0))) | (v133 << 16) | (v136 != v99) | (16 * (v138 != 0)) | (4 * (v139 != 0));
            if ((v99
               || v136
               || v138
               || v139
               || v134
               || *(unsigned char *)(a1 + 5608)
               || *(unsigned char *)(a1 + 3304))
              && !sub_100136B70((unsigned char *)a1, 0))
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "AJScan: Found {%d Nw, %d hidden %d HS, %d HS20, busych %d, force %d} 2.4Ghz network, triggering 5Ghz scan\n", v137, v99, v138, v140, v134, *(unsigned __int8 *)(a1 + 3304));
              }
              if (v99) {
                ++*(_DWORD *)(a1 + 5820);
              }
              if (v136 != v99) {
                ++*(_DWORD *)(a1 + 5836);
              }
              if (v138) {
                ++*(_DWORD *)(a1 + 5828);
              }
              if (v140) {
                ++*(_DWORD *)(a1 + 5824);
              }
              if (v134) {
                ++*(_DWORD *)(a1 + 5832);
              }
              unsigned int v142 = sub_100133720(a1);
              goto LABEL_324;
            }
          }
          sub_10013A10C(a1, *(const __CFArray **)(a1 + 1112));
          sub_10013A10C(a1, *(const __CFArray **)(a1 + 3568));
          sub_10013A10C(a1, *(const __CFArray **)(a1 + 3560));
          sub_10013A62C(*(const __CFArray **)(a1 + 1112), 1, (CFTypeRef *)(a1 + 1152));
          if (sub_10013AA04(a1)) {
            goto LABEL_323;
          }
LABEL_363:
          uint64_t v167 = contexta;
          if (contexta)
          {
            uint64_t v168 = a1;
            goto LABEL_387;
          }
          unsigned int v142 = sub_10013BCB0(a1);
          goto LABEL_324;
        }
      }
    case 5:
      if (_os_feature_enabled_impl()) {
        goto LABEL_358;
      }
      CFArrayRef v54 = *(const __CFArray **)(a1 + 1096);
      uint64_t v55 = *(unsigned int *)(a1 + 1088);
      if (!v55)
      {
        CFArrayRef v56 = *(const __CFArray **)(a1 + 3552);
        CFIndex v57 = *(void *)(a1 + 1144);
        *(void *)(a1 + 1144) = v57 + 1;
        uint64_t v58 = CFArrayGetValueAtIndex(v56, v57);
        if (v54)
        {
          long long v59 = v58;
          if (v58)
          {
            sub_1001393BC(a1, v54);
            sub_10013A62C(v54, 0, 0);
            if (*(void *)(a1 + 1112)
              || (CFMutableArrayRef v60 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks),
                  (*(void *)(a1 + 1112) = v60) != 0))
            {
              CFIndex v61 = CFArrayGetCount(v54);
              if (v61)
              {
                uint64_t v62 = v61;
                v199.location = 0;
                v199.length = v61;
                if (CFArrayGetFirstIndexOfValue(v54, v199, v59) != -1)
                {
                  CFIndex v188 = CFArrayGetCount(*(CFArrayRef *)(a1 + 1112));
                  if (v62 >= 1)
                  {
                    CFIndex v63 = 0;
                    CFAllocatorRef alloc = (CFAllocatorRef)v62;
                    do
                    {
                      long long v64 = (const __CFDictionary **)CFArrayGetValueAtIndex(v54, v63);
                      if (v64)
                      {
                        long long v65 = v64;
                        int v192 = 0;
                        uint64_t v66 = sub_1001300C8(a1, v64, 1, &v192);
                        if ((uint64_t)sub_1000C6FC0((uint64_t)v65, @"RSSI") >= (int)v66)
                        {
                          long long v73 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v65);
                          if (v73)
                          {
                            long long v74 = v73;
                            sub_1000C63FC((uint64_t)v73, (uint64_t)v59);
                            if (sub_10001E404((uint64_t)v74, @"BSSID"))
                            {
                              CFIndex v75 = *(void *)(a1 + 1120);
                              if (v75 < v188)
                              {
                                v184 = v74;
                                do
                                {
                                  int v76 = (const __CFDictionary **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1112), v75);
                                  if (v76)
                                  {
                                    unsigned int v77 = v76;
                                    if (sub_1000C8ABC(v76, v65))
                                    {
                                      id v78 = sub_10000AD1C((uint64_t)v77);
                                      if (![*(id *)(a1 + 6648) isNetworkInDenyListedState:1 scanResult:v78])goto LABEL_131; {
                                      *(void *)long long buf = 0;
                                      }
                                      double valuePtr = 0.0;
                                      if ([*(id *)(a1 + 6648) isNetworkDenyListedForAutoJoinDueToTrigDisc:v78 RSSI:buf timestamp:&valuePtr])
                                      {
                                        if (sub_10003BF10(*(_DWORD **)(a1 + 120), v77, *(int *)buf, valuePtr))goto LABEL_131; {
                                      }
                                        }
                                      else
                                      {
                                        if (sub_10012FB38(a1, v77))
                                        {
LABEL_131:

                                          CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 1112), v75, v74);
                                          break;
                                        }
                                        if (qword_10027DD68) {
                                          [(id)qword_10027DD68 WFLog:3, "Skipping problematic network %@ for auto-join", sub_10001A43C(v77) message];
                                        }
                                        uint64_t v62 = (uint64_t)alloc;
                                        long long v74 = v184;
                                      }
                                    }
                                  }
                                  ++v75;
                                }
                                while (v188 != v75);
                              }
                            }
                            CFRelease(v74);
                            uint64_t v3 = (void **)&qword_10027DD68;
                          }
                        }
                        else
                        {
                          long long v68 = *v3;
                          if (*v3)
                          {
                            long long v69 = v3;
                            long long v70 = sub_10001A43C(v65);
                            CFNumberRef v71 = sub_1000C6FC0((uint64_t)v65, @"RSSI");
                            if ((v192 - 1) > 3) {
                              long long v72 = 0;
                            }
                            else {
                              long long v72 = off_100242318[v192 - 1];
                            }
                            [v68 WFLog:4, "Filtered hidden network %@ with RSSI %ld (%@ threshold %d)", v70, v71, v72, v66 message];
                            uint64_t v3 = v69;
                            uint64_t v62 = (uint64_t)alloc;
                          }
                        }
                      }
                      ++v63;
                    }
                    while (v63 != v62);
                  }
                }
              }
            }
          }
        }
        unsigned int v80 = sub_10013C4F4(a1, *(const void **)(a1 + 1160));
        goto LABEL_135;
      }
      unsigned int v80 = sub_10000C060(a1, v55);
LABEL_135:
      unsigned int v81 = v80;
      *(_DWORD *)(a1 + 3280) = v81;
      if (v81 > 1) {
        goto LABEL_354;
      }
      goto LABEL_325;
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
      if (_os_feature_enabled_impl()) {
        goto LABEL_358;
      }
      CFArrayRef v5 = *(const __CFArray **)(a1 + 1096);
      uint64_t v6 = *(unsigned int *)(a1 + 1088);
      CFIndex v7 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3624));
      if (qword_10027DD68)
      {
        id v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: current state: %@", "__WiFiDeviceManagerProcessMultiStageScanResults", sub_100024BE8(*(_DWORD *)(a1 + 3280))]) UTF8String]);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          id v10 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v9 UTF8String]] UTF8String];
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v10;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        }
      }
      if (v6)
      {
        BOOL v169 = *(__CFArray **)(a1 + 3288);
        if (v169) {
          CFArrayRemoveAllValues(v169);
        }
        goto LABEL_367;
      }
      int v11 = *(_DWORD *)(a1 + 3280);
      if (v11 == 11) {
        CFArrayRef v5 = *(const __CFArray **)(a1 + 1104);
      }
      if (!v5) {
        goto LABEL_367;
      }
      if ((v11 & 0xFFFFFFFE) == 0xA)
      {
        sub_1001392E4(a1);
        *(CFAbsoluteTime *)(a1 + 3296) = CFAbsoluteTimeGetCurrent();
      }
      if (!*(void *)(a1 + 1112))
      {
        CFMutableArrayRef v12 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        *(void *)(a1 + 1112) = v12;
        if (!v12) {
          goto LABEL_367;
        }
      }
      sub_1001393BC(a1, v5);
      CFIndex v13 = CFArrayGetCount(v5);
      CFIndex v14 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3576));
      CFIndex v187 = v14;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: scanned# %ld, known# %ld, isHS20AccountConfigured %d, topRankedKnownNetwork %@", "__WiFiDeviceManagerProcessMultiStageScanResults", v13, v14, v7 > 0, sub_10001A43C(*(const void **)(a1 + 3376)) message];
      }
      BOOL v16 = v7 <= 0 && v14 == 0;
      if (v16 || v13 < 1) {
        goto LABEL_56;
      }
      for (CFIndex i = 0; i != v13; ++i)
      {
        long long v18 = (void *)CFArrayGetValueAtIndex(v5, i);
        if (!v18) {
          continue;
        }
        long long v19 = v18;
        sub_1001366D0(a1, v18);
        if (!sub_10012EE58(a1, v19, 0)) {
          continue;
        }
        if (v7 >= 1 && sub_10001BB2C((BOOL)v19))
        {
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 1112), v19);
          continue;
        }
        CFNumberRef v20 = *(const void **)(a1 + 3376);
        if (v20 && ((int v21 = *(_DWORD *)(a1 + 3280), v21 == 9) || v21 == 7))
        {
          if (CFEqual(v20, v19) != 1) {
            continue;
          }
          *(_DWORD *)long long buf = -1431655766;
          uint64_t v22 = sub_1001300C8(a1, v19, 1, (int *)buf);
          CFNumberRef v23 = sub_1000C6FC0((uint64_t)v19, @"RSSI");
          uint64_t v25 = (void *)qword_10027DD68;
          if ((uint64_t)v23 < (int)v22)
          {
            CFIndex v14 = v187;
            if (qword_10027DD68)
            {
              uint64_t context = (void *)sub_10001A43C(v19);
              CFNumberRef v26 = sub_1000C6FC0((uint64_t)v19, @"RSSI");
              if ((*(_DWORD *)buf - 1) > 3) {
                id v27 = 0;
              }
              else {
                id v27 = off_100242318[*(_DWORD *)buf - 1];
              }
              [v25 WFLog:4, "Filtered top network %@ with RSSI %ld (%@ threshold %d)", context, v26, v27, v22 message];
            }
            continue;
          }
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: found the top network to match scanned network %@", "__WiFiDeviceManagerProcessMultiStageScanResults", sub_10001A43C(v19) message];
          }
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 1112), *(const void **)(a1 + 3376));
          uint64_t v30 = *(void *)(a1 + 3376);
          CFIndex v14 = v187;
        }
        else
        {
          v197.location = 0;
          v197.length = v14;
          CFIndex v28 = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 3576), v197, v19);
          if (v28 == -1) {
            continue;
          }
          uint64_t v29 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3576), v28);
          if (!v29) {
            continue;
          }
          uint64_t v30 = (uint64_t)v29;
          if (sub_1000199C0((uint64_t)v29))
          {
            if (!sub_1000CD678((uint64_t)v19)) {
              continue;
            }
          }
        }
        id v31 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v19);
        if (v31)
        {
          id v32 = v31;
          sub_1000C63FC((uint64_t)v31, v30);
          CFArrayRef v33 = *(const __CFArray **)(a1 + 1112);
          v198.length = CFArrayGetCount(v33);
          v198.location = 0;
          CFIndex v34 = CFArrayGetFirstIndexOfValue(v33, v198, v32);
          id v35 = *(__CFArray **)(a1 + 1112);
          if (v34 == -1)
          {
            CFArrayAppendValue(v35, v32);
          }
          else
          {
            uint64_t v36 = CFArrayGetValueAtIndex(v35, v34);
            double v37 = sub_1000C7388((uint64_t)v36, @"Strength");
            if (v37 < sub_1000C7388((uint64_t)v32, @"Strength")) {
              CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 1112), v34, v32);
            }
          }
          CFRelease(v32);
          CFIndex v14 = v187;
        }
      }
LABEL_56:
      sub_100139ACC(a1);
      [*(id *)(a1 + 3656) setScanResultsWithAutoJoinSessionCompletion:v5 complete:0];
      sub_10013A10C(a1, *(const __CFArray **)(a1 + 1112));
      sub_10013A10C(a1, *(const __CFArray **)(a1 + 3568));
      sub_10013A10C(a1, *(const __CFArray **)(a1 + 3560));
      uint64_t v6 = 0;
      if (sub_10013AA04(a1)) {
        goto LABEL_323;
      }
LABEL_367:
      unsigned int v142 = sub_10013CE00((_DWORD *)a1, v6);
LABEL_324:
      *(_DWORD *)(a1 + 3280) = v142;
      if (v142 <= 1)
      {
LABEL_325:
        int v156 = off_10023FD48;
LABEL_349:
        sub_1001409B8(a1, *v156, 0, 0);
LABEL_350:
        unsigned int v53 = *(_DWORD *)(a1 + 3280);
LABEL_351:
        if (v53 <= 1)
        {
          uint64_t v165 = *(void **)(a1 + 3272);
          if (v165)
          {

            *(void *)(a1 + 3272) = 0;
          }
          return;
        }
      }
LABEL_354:
      if (!*(void *)(a1 + 3272)) {
        *(void *)(a1 + 3272) = sub_10000D990((uint64_t)"__WiFiDeviceManagerStateMachineRun");
      }
      return;
    case 0xC:
    case 0xF:
      unsigned int v53 = sub_100133D50(a1, *(void **)(a1 + 1184), *(const __CFDictionary **)(a1 + 1192), *(unsigned int *)(a1 + 1176));
      goto LABEL_330;
    case 0xD:
      if (_os_feature_enabled_impl()) {
        goto LABEL_358;
      }
      unsigned int v189 = *(_DWORD *)(a1 + 3344);
      if (!v189)
      {
        CFArrayRef v82 = *(const __CFArray **)(a1 + 3336);
        if (v82)
        {
          if (!*(void *)(a1 + 1112))
          {
            *(void *)(a1 + 1112) = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
            CFArrayRef v82 = *(const __CFArray **)(a1 + 3336);
          }
          if (CFArrayGetCount(v82))
          {
            if (CFArrayGetCount(*(CFArrayRef *)(a1 + 3624)))
            {
              CFIndex v83 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3336));
              if (v83)
              {
                uint64_t v84 = v83;
                CFMutableArrayRef v85 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                if (v85)
                {
                  CFArrayRef v86 = v85;
                  if (v84 >= 1)
                  {
                    for (CFIndex j = 0; v84 != j; ++j)
                    {
                      uint64_t v88 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3336), j);
                      if (v88)
                      {
                        uint64_t v89 = v88;
                        if (sub_10001EBB4((uint64_t)v88))
                        {
                          CFArrayRef v90 = *(const __CFArray **)(a1 + 3640);
                          v200.length = CFArrayGetCount(v90);
                          v200.location = 0;
                          if (CFArrayGetFirstIndexOfValue(v90, v200, v89) == -1)
                          {
                            if (!sub_1000CCA08((uint64_t)v89)) {
                              continue;
                            }
                            if (sub_10012EE58(a1, v89, 0))
                            {
                              v201.length = CFArrayGetCount(v86);
                              v201.location = 0;
                              if (CFArrayContainsValue(v86, v201, v89)) {
                                continue;
                              }
                              CFArrayAppendValue(v86, v89);
                              if (qword_10027DD68) {
                                [(id)qword_10027DD68 WFLog:3, "%s: found provisioned network %@, adding to tmp array", "__WiFiDeviceManagerFilterProvisionedHS20Networks", sub_10001A43C(v89) message];
                              }
                            }
                            else
                            {
                              if (qword_10027DD68) {
                                [(id)qword_10027DD68 WFLog:3, "%s: Provisioned HS2.0 network %@ not eligible for aj", "__WiFiDeviceManagerFilterProvisionedHS20Networks", sub_10001A43C(v89) message];
                              }
                            }
                          }
                          else
                          {
                            if (qword_10027DD68) {
                              [(id)qword_10027DD68 WFLog:3, "%s: HS2.0 network %@ is in disabled network list", "__WiFiDeviceManagerFilterProvisionedHS20Networks", sub_10001A43C(v89) message];
                            }
                          }
                        }
                        else
                        {
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:3, "%s: network is disabled %@", "__WiFiDeviceManagerFilterProvisionedHS20Networks", sub_10001A43C(v89) message];
                          }
                        }
                      }
                    }
                  }
                  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3336));
                  if (CFArrayGetCount(v86))
                  {
                    int v94 = *(__CFArray **)(a1 + 3336);
                    v204.length = CFArrayGetCount(v86);
                    v204.location = 0;
                    CFArrayAppendArray(v94, v86, v204);
                    CFRelease(v86);
                    uint64_t v95 = *(__CFArray **)(a1 + 1112);
                    CFArrayRef v96 = *(const __CFArray **)(a1 + 3336);
                    v205.length = CFArrayGetCount(v96);
                    v205.location = 0;
                    CFArrayAppendArray(v95, v96, v205);
                    goto LABEL_312;
                  }
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3 message:"No provisioned HS2.0 networks found"];
                  }
                  CFRelease(v86);
                }
              }
              else
              {
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3 message:"No GAS responses to filter"];
                }
              }
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3 message:"No suitable HS2.0 networks found"];
              }
LABEL_311:
LABEL_312:
              v150 = *(const void **)(a1 + 3336);
              if (v150)
              {
                CFRelease(v150);
                *(void *)(a1 + 3336) = 0;
              }
              CFIndex v151 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3568));
              if (v151)
              {
                CFIndex v152 = v151;
                CFNumberRef v153 = *(__CFArray **)(a1 + 1112);
                if (!v153)
                {
                  CFNumberRef v153 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                  *(void *)(a1 + 1112) = v153;
                  if (!v153)
                  {
                    if (qword_10027DD68) {
                      [((id)qword_10027DD68) WFLog:message:3, "%s: null scan.candidates.networks", "__WiFiDeviceManagerProcessGasResponses"];
                    }
LABEL_386:
                    uint64_t v168 = a1;
                    uint64_t v167 = v189;
LABEL_387:
                    unsigned int v142 = sub_10000C060(v168, v167);
                    goto LABEL_324;
                  }
                }
                v206.location = 0;
                v206.length = v152;
                CFArrayAppendArray(v153, *(CFArrayRef *)(a1 + 3568), v206);
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Appending deffered networks to candidates list", "__WiFiDeviceManagerProcessGasResponses")];
                }
              }
              CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3560));
              CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3568));
              [*(id *)(a1 + 3656) clearScanResultsForAutoJoinSessionReset];
              sub_10013A10C(a1, *(const __CFArray **)(a1 + 1112));
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s:%d manager->state.scan.candidates.networks %@", "__WiFiDeviceManagerProcessGasResponses", 27068, *(void *)(a1 + 1112) message];
              }
              if (sub_10013AA04(a1))
              {
LABEL_323:
                unsigned int v142 = sub_10013B26C(a1);
                goto LABEL_324;
              }
              goto LABEL_386;
            }
            v170 = (void *)qword_10027DD68;
            if (!qword_10027DD68) {
              goto LABEL_311;
            }
            v171 = "No HS2.0 accounts";
          }
          else
          {
            v170 = (void *)qword_10027DD68;
            if (!qword_10027DD68) {
              goto LABEL_311;
            }
            v171 = "GAS Query returned response count=0. Continuing...";
          }
        }
        else
        {
          v170 = (void *)qword_10027DD68;
          if (!qword_10027DD68) {
            goto LABEL_311;
          }
          v171 = "GAS Query returned no responses. Continuing...";
        }
        [v170 WFLog:3 message:v171, v174];
        goto LABEL_311;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, @"GAS Query failed with err=%d. Continuing...", *(unsigned int *)(a1 + 3344)];
      }
      goto LABEL_311;
    case 0xE:
    case 0x11:
      unsigned int v53 = sub_1001353EC(a1);
LABEL_330:
      *(_DWORD *)(a1 + 3280) = v53;
      goto LABEL_351;
    case 0x10:
      if (_os_feature_enabled_impl())
      {
LABEL_358:
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s with state=%d not allowed with Unified Auto-Join", "__WiFiDeviceManagerStateMachineRun", *(unsigned int *)(a1 + 3280));
        }
        goto LABEL_350;
      }
      unsigned int v92 = sub_100135978(a1);
LABEL_168:
      *(_DWORD *)(a1 + 3280) = v92;
      if (v92 <= 1) {
        goto LABEL_348;
      }
      goto LABEL_354;
    case 0x12:
      unsigned int v92 = sub_100135F30(a1, *(void *)(a1 + 6904));
      goto LABEL_168;
    case 0x13:
      if (*(unsigned char *)(a1 + 7008))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, "%s: Waiting on Enable Remote Hotspot", "__WiFiDeviceManagerProcessEnableRemoteHotspotWaiting"];
        }
LABEL_347:
        if (*(_DWORD *)(a1 + 3280) <= 1u)
        {
LABEL_348:
          int v156 = off_100240218;
          goto LABEL_349;
        }
        goto LABEL_354;
      }
      int v143 = *(const void **)(a1 + 6904);
      if (*(void *)(a1 + 6992))
      {
        v144 = (__CFString *)[[objc_msgSend(*(id *)(a1 + 6744), "getHotspotDeviceName:", *(void *)(a1 + 6904)) copy];
        if ([*(id *)(a1 + 6992) code] == (id)-71146)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3 message:"Connection Failure: Server blocked"];
          }
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 6920), v143);
          sub_1000FB0D0(a1, 0);
          *(void *)(a1 + 6872) = 0;
          *(_DWORD *)(a1 + 6880) = 0;
          *(_DWORD *)(a1 + 3280) = 0;
          sub_10013F618(a1, v144, 2u);
          *(void *)(a1 + 6904) = 0;
        }
        int v146 = *(_DWORD *)(a1 + 6880);
        if (v146)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "Error (%@) enabling hotspot... Retry %d", *(void *)(a1 + 6992), *(unsigned int *)(a1 + 6880) message];
          }
          --*(_DWORD *)(a1 + 6880);
          *(_DWORD *)(a1 + 3280) = 18;
          sub_1000FB1B0(a1);
        }
        else
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "Error (%@) enabling hotspot after max retry", *(void *)(a1 + 6992) message];
          }
          sub_1000FB0D0(a1, 0);
          *(_DWORD *)(a1 + 3280) = 0;
          *(void *)(a1 + 6872) = 0;
          sub_10013F618(a1, v144, 1u);
        }
        *(_DWORD *)(a1 + 6456) = [*(id *)(a1 + 6992) code];
        *(unsigned char *)(a1 + 6464) = [*(id *)(a1 + 6744) isFamilyHotspot:v143];
        sub_1000519A4((unsigned int *)(a1 + 6456));

        goto LABEL_346;
      }
      if (*(void *)(a1 + 7000))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Hotspot Enabled %@", *(void *)(a1 + 7000) message];
        }
        CFStringRef v159 = (const __CFString *)[*(id *)(a1 + 7000) objectForKey:@"ssid" sub_1000FB0D0(a1, 0)];
        uint64_t v160 = sub_1000C5D34(v159);
        if (v160)
        {
          uint64_t v161 = (uint64_t)v160;
          sub_1000C93E0(v160, (const __CFString *)[*(id *)(a1 + 7000) objectForKey:@"password"]);
          sub_10001C6A4(v161, @"CHANNEL", [*(id *)(a1 + 7000) objectForKey:@"channel"]);
          v162 = *(const void **)(a1 + 6856);
          if (v162) {
            CFRelease(v162);
          }
          *(void *)(a1 + 6856) = v161;
          *(CFAbsoluteTime *)(a1 + 7016) = CFAbsoluteTimeGetCurrent();
          int v163 = sub_10013F760(a1, *(const __CFArray **)(a1 + 6856), *(unsigned __int8 *)(a1 + 6968));
          if (!v163)
          {
            *(_DWORD *)(a1 + 3280) = 20;
            *(_DWORD *)(a1 + 6456) = 0;
            *(unsigned char *)(a1 + 6464) = [*(id *)(a1 + 6744) isFamilyHotspot:v143];
            *(unsigned char *)(a1 + 6465) = 1;
            sub_10013F058((uint64_t *)a1, @"userJoinScanning", 0);
LABEL_346:

            *(void *)(a1 + 7000) = 0;
            goto LABEL_347;
          }
          *(_DWORD *)(a1 + 6456) = v163;
          *(unsigned char *)(a1 + 6464) = [*(id *)(a1 + 6744) isFamilyHotspot:v143];
          sub_1000519A4((unsigned int *)(a1 + 6456));
          sub_10013F058((uint64_t *)a1, @"userJoinAssociationFailed", 0);
        }
        CFStringRef v164 = *(void **)(a1 + 7000);
        if (v164)
        {

          *(void *)(a1 + 7000) = 0;
        }
      }
      *(void *)(a1 + 6872) = 0;
      goto LABEL_347;
    default:
      goto LABEL_354;
  }
}

id sub_1000FD068(uint64_t a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: BssBlacklist expiry timer fired", @"__WiFiDeviceManagerBssBlacklistExpiryTimerCallback"];
  }
  [*(id *)(a1 + 6648) removeExpiredDenyListedState:2];
  uint64_t v3 = *(void **)(a1 + 6648);

  return [v3 removeExpiredDenyListedState:1];
}

id sub_1000FD0F0(uint64_t a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: EAPATNotifBlacklist expiry timer fired", @"__WiFiDeviceManagerEAPATNotifBlacklistExpiryTimerCallback"];
  }
  id result = [*(id *)(a1 + 6648) removeExpiredDenyListedState:4];
  *(unsigned char *)(a1 + 7336) = 0;
  return result;
}

void sub_1000FD168(uint64_t a1)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 7224) + 1;
    *(void *)(a1 + 7224) = v3;
    if (*(_DWORD *)(a1 + 7232))
    {
      if (!sub_10003C220(*(void *)(a1 + 120))) {
        goto LABEL_11;
      }
      uint64_t v4 = +[NSString stringWithFormat:@"DNS Stall: %llus", *(void *)(a1 + 7224)];
    }
    else
    {
      uint64_t v4 = +[NSString stringWithFormat:@"Data Stall: %llus", v3];
    }
    CFArrayRef v5 = v4;
    if (*(unsigned char *)(a1 + 7237))
    {
      if (MGGetBoolAnswer())
      {
        uint64_t v6 = *(void (**)(uint64_t, uint64_t, NSString *, void))(a1 + 4552);
        if (v6) {
          v6(a1, 18, v5, *(void *)(a1 + 4560));
        }
      }
      CFIndex v7 = *(NSObject **)(a1 + 7216);
      dispatch_time_t v8 = dispatch_time(0, 1000000000);
      dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0);
      goto LABEL_12;
    }
LABEL_11:
    sub_100145710(a1);
    goto LABEL_12;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, @"%s: null manager.", @"__WiFiDeviceManagerDpsHUDTimerExpiryHandler"];
  }
LABEL_12:
}

void sub_1000FD2AC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 7272);
    *(void *)(a1 + 7272) = v3 - 1;
    uint64_t v4 = *(void *)(a1 + 7264) + 1;
    *(void *)(a1 + 7264) = v4;
    if (v3 >= 2
      && (CFArrayRef v5 = +[NSString stringWithFormat:@"Slow WiFi: %llus", v4],
          *(unsigned char *)(a1 + 7288)))
    {
      uint64_t v6 = v5;
      if (MGGetBoolAnswer())
      {
        CFIndex v7 = *(void (**)(uint64_t, uint64_t, NSString *, void))(a1 + 4552);
        if (v7) {
          v7(a1, 17, v6, *(void *)(a1 + 4560));
        }
      }
      dispatch_time_t v8 = *(NSObject **)(a1 + 7256);
      dispatch_time_t v9 = dispatch_time(0, 1000000000);
      dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    else
    {
      sub_100145858(a1);
    }
  }
  else if (qword_10027DD68)
  {
    [((id)qword_10027DD68) WFLog:4, "%s: null manager.", "__WiFiDeviceManagerSlowWiFiHUDTimerExpiryHandler"];
  }
}

void sub_1000FD3D4(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager."];
    }
    goto LABEL_47;
  }
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, @"%s: null device.", @"__WiFiDeviceManagerAdaptiveRoamTimerCallback"];
    }
LABEL_47:
    goto LABEL_48;
  }
  uint64_t v3 = (const void *)sub_100016E20(v2);
  uint64_t v4 = sub_100018FA8(a1, v3, 1);
  if (v4)
  {
    CFArrayRef v5 = v4;
    if (!_os_feature_enabled_impl() || !*(unsigned char *)(a1 + 7042))
    {
      int v11 = 0;
      uint64_t v7 = 0;
      id v21 = 0;
      *(unsigned char *)(a1 + 3476) = 0;
LABEL_19:
      [*(id *)(a1 + 7368) updateWithRoamingSuppression:v7];
      sub_100145A14(a1, v5, v11);
LABEL_20:
      CFRelease(v5);
      goto LABEL_21;
    }
    if ([+[WiFiUserInteractionMonitor sharedInstance])
    {
      unsigned int v6 = (*(unsigned char *)(a1 + 3468) & 1) == 0;
    }
    if (*(unsigned char *)(a1 + 3414)) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v6;
    }
    if (v7)
    {
      if (!*(unsigned char *)(a1 + 3476))
      {
        id v21 = objc_alloc_init((Class)NSMutableDictionary);
        if (*(unsigned char *)(a1 + 3414)) {
          uint64_t v8 = 4294967186;
        }
        else {
          uint64_t v8 = 4294967216;
        }
        [v21 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v8)] forKey:@"IO80211InterfaceAdaptiveRoamRSSITrigger"];
        uint64_t v9 = *(void *)(a1 + 64);
        id v10 = (const void *)sub_100017C48(v9);
        sub_100017D28(v9, v10, 532, 0, (uint64_t)v21);
        *(unsigned char *)(a1 + 3476) = 1;
        [*(id *)(a1 + 7368) updateWithRoamingSuppression:v7];
        goto LABEL_27;
      }
    }
    else if (*(unsigned char *)(a1 + 3476))
    {
      *(unsigned char *)(a1 + 3476) = 0;
      id v12 = +[WiFiRoamManager sharedWiFiRoamManager];
      +[NSDate timeIntervalSinceReferenceDate];
      [v12 setLastRoamSuppressionRemovalTime:];
      id v21 = 0;
      int v11 = 1;
      goto LABEL_28;
    }
    id v21 = 0;
LABEL_27:
    int v11 = 0;
LABEL_28:
    CFIndex v14 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v15 = "YES";
      if (v7) {
        BOOL v16 = "YES";
      }
      else {
        BOOL v16 = "NO";
      }
      CFNumberRef v20 = v16;
      if (*(unsigned char *)(a1 + 3476)) {
        long long v17 = "YES";
      }
      else {
        long long v17 = "NO";
      }
      if ([+[WiFiUserInteractionMonitor sharedInstance] isRealTimeAppActive])
      {
        long long v18 = "YES";
      }
      else
      {
        long long v18 = "NO";
      }
      if (![+[WiFiUserInteractionMonitor sharedInstance] isWiFiCallInProgress])uint64_t v15 = "NO"; {
      [v14 WFLog:3, "%s: isRoamSuppressionRecommended=%s (applied=%s) isRealTimeAppActive=%s isWiFiCallInProgress=%s currentNetwork=%@ roamSuppressionRequest=%@", "__WiFiDeviceManagerAdaptiveRoamTimerCallback", v20, v17, v18, v15, sub_10001A43C(v5), v21 message];
      }
    }
    if (*(unsigned char *)(a1 + 3476)) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_48:
  id v21 = 0;
LABEL_21:
}

void sub_1000FD6DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 3414);
    uint64_t v4 = (const void *)sub_100016E20(v2);
    CFArrayRef v5 = sub_100018FA8(a1, v4, 1);
    if (v5)
    {
      unsigned int v6 = v5;
      sub_100111C74(a1, v3);
      CFRelease(v6);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null device." : @"__WiFiDeviceManagerColocatedNetworkTransitionTimerCallback"];
    }
  }
}

void sub_1000FD7C4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: settlement status=%ld userInfo='%@'", "__WiFiDeviceManagerHandleSettlementChange", a2, a3 message];
  }
  if (*(void *)(v5 + 4392))
  {
    id v7 = [a3 mutableCopy];
    [v7 setObject:[+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2)] forKey:@"settlement"];
    uint64_t v8 = sub_100016E20(*(void *)(v5 + 64));
    (*(void (**)(uint64_t, uint64_t, void, uint64_t, id))(v5 + 4392))(v5, v8, *(void *)(v5 + 4400), 7, v7);
    if (v7)
    {
      CFRelease(v7);
    }
  }
}

uint64_t sub_1000FD8C4(uint64_t result)
{
  *(unsigned char *)(result + 8960) = 1;
  return result;
}

uint64_t sub_1000FD8D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8960);
}

uint64_t sub_1000FD8E0(uint64_t a1)
{
  BOOL v38 = 0;
  uint64_t v1 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    return v1;
  }
  uint64_t v1 = sub_100066150(*(void *)(a1 + 64));
  if (!v1) {
    return v1;
  }
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = (const void *)sub_100017C48(v3);
  *(_DWORD *)(a1 + 20) = sub_10006B8D8(v3, v4);
  *(_DWORD *)(a1 + 128) = sub_10006B8C8(*(void *)(a1 + 64));
  *(_OWORD *)(a1 + 132) = xmmword_1001CB910;
  [*(id *)(a1 + 3656) setUsageRankForDeferral:3];
  CFStringRef v5 = (const __CFString *)sub_100017C48(*(void *)(a1 + 64));
  CFArrayRef v6 = SCNetworkInterfaceCopyAll();
  CFIndex Count = CFArrayGetCount(v6);
  if (Count >= 1)
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v6, v9);
      if (ValueAtIndex)
      {
        int v11 = ValueAtIndex;
        BSDCFStringRef Name = SCNetworkInterfaceGetBSDName(ValueAtIndex);
        if (BSDName)
        {
          if (CFStringCompare(BSDName, v5, 1uLL) == kCFCompareEqualTo) {
            break;
          }
        }
      }
      if (v8 == ++v9) {
        goto LABEL_9;
      }
    }
    CFRetain(v11);
    if (!v6) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_9:
  int v11 = 0;
  if (v6) {
LABEL_10:
  }
    CFRelease(v6);
LABEL_11:
  *(void *)(a1 + 5464) = v11;
  *(unsigned char *)(a1 + 33) = sub_10006C100(*(void *)(a1 + 64));
  *(unsigned char *)(a1 + 7042) = sub_10006C1E8(*(void *)(a1 + 64));
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 5416) = 100;
  CFIndex v13 = *(NSObject **)(a1 + 240);
  if (v13) {
    sub_1000FDC90(a1, v13);
  }
  if (sub_10006C10C(*(void *)(a1 + 64), &v38))
  {
    int v14 = v38;
    char v15 = 1;
  }
  else
  {
    char v15 = 0;
    int v14 = 0;
  }
  sub_100035F20(*(void *)(a1 + 120), v15, v14);
  uint64_t v16 = *(void *)(a1 + 64);
  long long v17 = (const void *)sub_100017C48(v16);
  long long v18 = sub_10001C1B4(v16, v17);
  long long v19 = v18;
  if (v18 && sub_10001FC1C((uint64_t)v18))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Disconnecting from EAP Network %@ on restart", "WiFiDeviceManagerOpen", sub_10001A43C(v19) message];
    }
    id v21 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    sub_1000FEA7C(a1, v21, 1010, "WiFiDeviceManagerOpen", 3600);
  }
  uint64_t v22 = *(void (**)(uint64_t, const void *, const __CFString *, const CFBooleanRef, void))(a1 + 4744);
  if (v22) {
    v22(a1, v19, @"ForcedDisassoc", kCFBooleanTrue, *(void *)(a1 + 4752));
  }
  if (v19) {
    CFRelease(v19);
  }
  sub_1000FEDEC(a1, 0);
  *(unsigned char *)(a1 + 7056) = sub_10006C178(*(void *)(a1 + 64));
  *(unsigned char *)(a1 + 7040) = sub_10006C184(*(void *)(a1 + 64));
  *(unsigned char *)(a1 + 7041) = sub_10006C190(*(void *)(a1 + 64));
  sub_1000FEF6C(a1);
  sub_1000FF1EC(a1);
  uint64_t v23 = 0;
  *(unsigned char *)(a1 + 7400) = 1;
  *(unsigned char *)(a1 + 8600) = 0;
  *(_DWORD *)(a1 + 8601) = 0;
  *(unsigned char *)(a1 + 8605) = 0;
  *(_DWORD *)(a1 + 8606) = 0;
  *(unsigned char *)(a1 + 8610) = 0;
  float64x2_t v24 = (float64x2_t)vdupq_n_s64(0x4044000000000000uLL);
  __asm { FMOV            V2.2D, #10.0 }
  *(void *)(a1 + 8584) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  id v31 = &_mh_execute_header;
  do
  {
    v32.i64[0] = v31;
    v32.i64[1] = HIDWORD(v31);
    *(float64x2_t *)(a1 + 7408 + v23) = vdivq_f64(_Q0, vaddq_f64(vdivq_f64(vsubq_f64(v24, vcvtq_f64_u64(v32)), _Q2), _Q0));
    id v31 = (const mach_header_64 *)vadd_s32((int32x2_t)v31, (int32x2_t)0x200000002);
    v23 += 16;
  }
  while (v23 != 320);
  uint64_t v33 = 0;
  CFIndex v34 = &_mh_execute_header;
  float64x2_t v35 = (float64x2_t)vdupq_n_s64(0xC059000000000000);
  do
  {
    v36.i64[0] = v34;
    v36.i64[1] = HIDWORD(v34);
    *(float64x2_t *)(a1 + 7728 + v33) = vaddq_f64(vdivq_f64(vcvtq_f64_u64(v36), v35), _Q0);
    CFIndex v34 = (const mach_header_64 *)vadd_s32((int32x2_t)v34, (int32x2_t)0x200000002);
    v33 += 16;
  }
  while (v33 != 800);
  *(unsigned char *)(a1 + 8640) = 0;
  *(_DWORD *)(a1 + 8616) = 0;
  *(void *)(a1 + 8624) = 0;
  *(_OWORD *)(a1 + 8644) = 0u;
  *(_OWORD *)(a1 + 8660) = 0u;
  *(_OWORD *)(a1 + 8676) = 0u;
  *(_OWORD *)(a1 + 8692) = 0u;
  *(_OWORD *)(a1 + 8708) = 0u;
  *(_OWORD *)(a1 + 8724) = 0u;
  *(_OWORD *)(a1 + 8740) = 0u;
  *(void *)(a1 + 8756) = 0;
  *(_DWORD *)(a1 + 8764) = 0;
  return v1;
}

void sub_1000FDC90(uint64_t a1, NSObject *a2)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: entering", "WiFiDeviceManagerScheduleWithQueue")
  }
  if (a2)
  {
    if (!*(unsigned char *)(a1 + 16) || *(void *)(a1 + 240))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: exiting, Error: not opened or queue already assigned", "WiFiDeviceManagerScheduleWithQueue"];
      }
      goto LABEL_109;
    }
    *(void *)(a1 + 240) = a2;
    sub_10006695C(*(void *)(a1 + 64), a2);
    sub_100037784(*(uint64_t **)(a1 + 120), *(void *)(a1 + 240));
    id v7 = *(NSObject **)(a1 + 312);
    if (v7) {
      dispatch_activate(v7);
    }
    CFIndex v8 = *(NSObject **)(a1 + 360);
    if (v8) {
      dispatch_activate(v8);
    }
    if (!*(void *)(a1 + 5440)
      && (sub_10006A398(*(void *)(a1 + 64)) || sub_10006C158(*(void *)(a1 + 64))))
    {
      context.version = 0;
      memset(&context.retain, 0, 24);
      context.info = (void *)a1;
      SCDynamicStoreRef v9 = SCDynamicStoreCreate(kCFAllocatorDefault, @"WiFiDeviceManager", (SCDynamicStoreCallBack)sub_1000FFC60, &context);
      *(void *)(a1 + 5440) = v9;
      if (!v9)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: SCDynamicStoreCreate failed", @"WiFiDeviceManagerScheduleWithQueue"];
        }
        goto LABEL_27;
      }
      sub_100100688((SCDynamicStoreRef *)a1);
      if (!SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 5440), *(dispatch_queue_t *)(a1 + 240)))
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error setting dynamic store queue.", "WiFiDeviceManagerScheduleWithQueue")];
        }
      }
      if (!SCDynamicStoreSetDisconnectCallBack())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error subscribing to the dynamic store disconnect event.", @"WiFiDeviceManagerScheduleWithQueue"];
        }
LABEL_27:
      }
    }
    id v12 = *(NSObject **)(a1 + 5240);
    if (v12) {
      dispatch_activate(v12);
    }
    CFIndex v13 = *(NSObject **)(a1 + 5320);
    if (v13) {
      dispatch_activate(v13);
    }
    int v14 = *(NSObject **)(a1 + 5512);
    if (v14) {
      dispatch_activate(v14);
    }
    char v15 = *(NSObject **)(a1 + 8592);
    if (v15) {
      dispatch_activate(v15);
    }
    uint64_t v16 = *(NSObject **)(a1 + 8632);
    if (v16) {
      dispatch_activate(v16);
    }
    long long v17 = *(NSObject **)(a1 + 1000);
    if (v17) {
      dispatch_activate(v17);
    }
    long long v18 = *(NSObject **)(a1 + 1056);
    if (v18) {
      dispatch_activate(v18);
    }
    long long v19 = *(NSObject **)(a1 + 5528);
    if (v19) {
      dispatch_activate(v19);
    }
    CFNumberRef v20 = *(NSObject **)(a1 + 6808);
    if (v20) {
      dispatch_activate(v20);
    }
    id v21 = *(NSObject **)(a1 + 6816);
    if (v21) {
      dispatch_activate(v21);
    }
    uint64_t v22 = *(NSObject **)(a1 + 7320);
    if (v22) {
      dispatch_activate(v22);
    }
    uint64_t v23 = *(NSObject **)(a1 + 7344);
    if (v23) {
      dispatch_activate(v23);
    }
    float64x2_t v24 = *(NSObject **)(a1 + 7216);
    if (v24) {
      dispatch_activate(v24);
    }
    uint64_t v25 = *(NSObject **)(a1 + 7256);
    if (v25) {
      dispatch_activate(v25);
    }
    CFNumberRef v26 = *(void **)(a1 + 5408);
    if (v26)
    {
      unsigned int v27 = [v26 setupDevice:a1];
      if (v27)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: WiFiBatteryMgmt batteryManager setup" : @"WiFiDeviceManagerScheduleWithQueue"];
        }
      }
      else if (qword_10027DD68)
      {
        [((id)qword_10027DD68) WFLog:message:3, "%s: WiFiBatteryMgmt batteryManager setup failed. WiFi will default to full throttle", "WiFiDeviceManagerScheduleWithQueue"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: WiFiBatteryMgmt No Battery Power Manager support from CoreOS. WiFi will default to full throttle.", "WiFiDeviceManagerScheduleWithQueue"];
      }
    }
    uint64_t v29 = sub_10001C1A8(*(void *)(a1 + 64));
    if (v29)
    {
      uint64_t v30 = *(void (**)(uint64_t, void))(a1 + 4904);
      if (v30) {
        v30(a1, *(void *)(a1 + 4912));
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFiCC : Attempted setting available country code", "WiFiDeviceManagerScheduleWithQueue")];
      }
    }
    sub_10010089C(v29, (const void *)a1, 0);
    uint64_t v32 = *(void *)(a1 + 64);
    uint64_t v33 = (const void *)sub_100017C48(v32);
    CFIndex v34 = (void *)sub_10001C1B4(v32, v33);
    if (v34)
    {
      float64x2_t v35 = v34;
      unsigned int v36 = sub_1000199C0((uint64_t)v34);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: associated to %@, isCarplay %d", "WiFiDeviceManagerScheduleWithQueue", sub_10001A43C(v35), v36 message];
      }
      char v38 = 1;
      *(unsigned char *)(a1 + 3411) = 1;
      *(unsigned char *)(a1 + 5496) = v36;
      [+[WiFiUserInteractionMonitor sharedInstance] updateIsCarPlay:v36 != 0];
      if (!sub_1000CEBB4((CFDictionaryRef *)v35)) {
        char v38 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") isMovingNetwork:v35];
      }
      sub_100100990(a1, v38);
      sub_100100A60((char *)a1, 1, 1);
      if (!*(unsigned char *)(a1 + 3412)) {
        sub_100100C74((unsigned __int8 *)a1);
      }
      CFRelease(v35);
    }
    v62[0] = _NSConcreteStackBlock;
    v62[1] = 3221225472;
    v62[2] = sub_100015050;
    v62[3] = &unk_1002414F8;
    v62[4] = a1;
    [+[WiFiUserInteractionMonitor sharedInstance] registerStateChangeCallback:v62 withCallbackContext:a1];
    if ([+[WiFiUserInteractionMonitor sharedInstance] isWiFiCallInProgress])
    {
      *(unsigned char *)(a1 + 3409) = 1;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:@"%s: call active" :3 :@"WiFiDeviceManagerScheduleWithQueue"];
      }
    }
    else
    {
      *(unsigned char *)(a1 + 3409) = 0;
      id v40 = *(void **)(a1 + 7368);
      if (v40) {
        [v40 setCallState:*(unsigned char *)(a1 + 3408) != 0];
      }
    }
    sub_1000FEF6C(a1);
    if (_os_feature_enabled_impl())
    {
      id v41 = objc_alloc_init((Class)CWFAutoJoinManager);
      *(void *)(a1 + 8824) = v41;
      if (v41
        && (id v42 = objc_alloc_init((Class)NSMutableDictionary), (*(void *)(a1 + 8896) = v42) != 0))
      {
        context.version = (CFIndex)_NSConcreteStackBlock;
        context.info = (void *)3221225472;
        context.retain = (const void *(__cdecl *)(const void *))sub_10014BDCC;
        context.release = (void (__cdecl *)(const void *))&unk_100241D68;
        context.copyDescription = (CFStringRef (__cdecl *)(const void *))a1;
        [*(id *)(a1 + 8824) setAllowAutoJoinHandler:&context];
        handler = _NSConcreteStackBlock;
        uint64_t v80 = 3221225472;
        unsigned int v81 = sub_10014CB5C;
        CFArrayRef v82 = &unk_100241D88;
        uint64_t v83 = a1;
        [*(id *)(a1 + 8824) setAllowKnownNetworkHandler:&handler];
        [*(id *)(a1 + 8824) setKnownNetworkComparator:0];
        if (*(unsigned char *)(a1 + 6632))
        {
          long long v74 = _NSConcreteStackBlock;
          uint64_t v75 = 3221225472;
          int v76 = sub_10014CF50;
          unsigned int v77 = &unk_100241DA8;
          uint64_t v78 = a1;
          [*(id *)(a1 + 8824) setKnownNetworkComparator:&v74];
        }
        v73[0] = _NSConcreteStackBlock;
        v73[1] = 3221225472;
        v73[2] = sub_10014D034;
        v73[3] = &unk_100241DC8;
        v73[4] = a1;
        [*(id *)(a1 + 8824) setScanForNetworksHandler:v73];
        v72[0] = _NSConcreteStackBlock;
        v72[1] = 3221225472;
        v72[2] = sub_10014DA3C;
        v72[3] = &unk_100241DE8;
        v72[4] = a1;
        [*(id *)(a1 + 8824) setPerformGASQueryHandler:v72];
        v71[0] = _NSConcreteStackBlock;
        v71[1] = 3221225472;
        v71[2] = sub_10014DEB8;
        v71[3] = &unk_100241E08;
        v71[4] = a1;
        [*(id *)(a1 + 8824) setAllowJoinCandidateHandler:v71];
        v70[0] = _NSConcreteStackBlock;
        v70[1] = 3221225472;
        v70[2] = sub_10014E2B4;
        v70[3] = &unk_100241E28;
        v70[4] = a1;
        [*(id *)(a1 + 8824) setJoinCandidateComparator:v70];
        v69[0] = _NSConcreteStackBlock;
        v69[1] = 3221225472;
        v69[2] = sub_10014E390;
        v69[3] = &unk_100241E48;
        v69[4] = a1;
        [*(id *)(a1 + 8824) setAssociateToNetworkHandler:v69];
        v68[0] = _NSConcreteStackBlock;
        v68[1] = 3221225472;
        v68[2] = sub_10014E920;
        v68[3] = &unk_100241E68;
        v68[4] = a1;
        [*(id *)(a1 + 8824) setAllowAutoHotspotHandler:v68];
        v67[0] = _NSConcreteStackBlock;
        v67[1] = 3221225472;
        v67[2] = sub_10014EF18;
        v67[3] = &unk_100241E88;
        v67[4] = a1;
        [*(id *)(a1 + 8824) setAllowHotspotHandler:v67];
        v66[0] = _NSConcreteStackBlock;
        v66[1] = 3221225472;
        v66[2] = sub_10014F504;
        v66[3] = &unk_100241EA8;
        v66[4] = a1;
        [*(id *)(a1 + 8824) setBrowseForHotspotsHandler:v66];
        v65[0] = _NSConcreteStackBlock;
        v65[1] = 3221225472;
        v65[2] = sub_10014F788;
        v65[3] = &unk_100241EC8;
        v65[4] = a1;
        [*(id *)(a1 + 8824) setConnectToHotspotHandler:v65];
        v64[0] = _NSConcreteStackBlock;
        v64[1] = 3221225472;
        v64[2] = sub_10014F9B4;
        v64[3] = &unk_100241EE8;
        v64[4] = a1;
        [*(id *)(a1 + 8824) setEventHandler:v64];
        v63[0] = _NSConcreteStackBlock;
        v63[1] = 3221225472;
        v63[2] = sub_10014FD54;
        v63[3] = &unk_100241F08;
        v63[4] = a1;
        [*(id *)(a1 + 8824) setUpdateKnownNetworkHandler:v63];
        CFRetain((CFTypeRef)a1);
        [*(id *)(a1 + 8824) setTargetQueue:*(void *)(a1 + 240)];
        [*(id *)(a1 + 8824) setLockdownModeEnabled:byte_10027DDA9 != 0];
        CFStringRef v43 = "SUCCEEDED";
      }
      else
      {
        CFStringRef v43 = "FAILED";
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "UAJM setup %s", v43);
      }
      sub_10001FD64(a1, 8uLL);
    }
    if (*(unsigned char *)(a1 + 433)) {
      sub_1000157C8(a1, 6);
    }
    if (*(void *)(a1 + 9008))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: kernel event monitor already initialized." : @"__WiFiDeviceManagerSetupKernelEventMonitor" : v61];
      }
      goto LABEL_102;
    }
    int v45 = socket(32, 3, 1);
    if ((v45 & 0x80000000) == 0)
    {
      unsigned int v46 = v45;
      LODWORD(v75) = 2;
      long long v74 = (void **)(&_mh_execute_header + 1);
      if (ioctl(v45, 0x800C6502uLL, &v74))
      {
        uint64_t v48 = qword_10027DD68;
        if (qword_10027DD68)
        {
          CFStringRef v49 = __error();
          CFIndex v61 = strerror(*v49);
          int v50 = "%s: SIOCSKEVFILT failed (%s)";
LABEL_100:
          CFDateRef v51 = (void *)v48;
LABEL_101:
          [v51 WFLog:4 message:v50 @"__WiFiDeviceManagerSetupKernelEventMonitor" v61];
        }
      }
      else
      {
        uint64_t v52 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, v46, 0, *(dispatch_queue_t *)(a1 + 240));
        *(void *)(a1 + 9008) = v52;
        if (v52)
        {
          handler = _NSConcreteStackBlock;
          uint64_t v80 = 3221225472;
          unsigned int v81 = sub_100150CC0;
          CFArrayRef v82 = &unk_100241F50;
          LODWORD(v83) = v46;
          dispatch_source_set_cancel_handler(v52, &handler);
          unsigned int v53 = *(NSObject **)(a1 + 9008);
          context.version = (CFIndex)_NSConcreteStackBlock;
          context.info = (void *)3221225472;
          context.retain = (const void *(__cdecl *)(const void *))sub_100150CC8;
          context.release = (void (__cdecl *)(const void *))&unk_100240BD8;
          unsigned int v85 = v46;
          context.copyDescription = (CFStringRef (__cdecl *)(const void *))a1;
          dispatch_source_set_event_handler(v53, &context);
          dispatch_activate(*(dispatch_object_t *)(a1 + 9008));
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:message:3, "%s: kernel event monitor started", "__WiFiDeviceManagerSetupKernelEventMonitor"];
          }
          sub_100150EB4(a1);
          goto LABEL_107;
        }
        CFDateRef v51 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          int v50 = "%s: null manager->kernelEventSource";
          goto LABEL_101;
        }
      }
LABEL_102:
LABEL_107:
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)a1, (CFNotificationCallback)sub_1001017D8, @"com.apple.siri.connection.timeout", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      CFArrayRef v56 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(v56, (const void *)a1, (CFNotificationCallback)sub_1001018F0, @"com.apple.apsd.connection-failure-notification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      CFIndex v57 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(v57, (const void *)a1, (CFNotificationCallback)sub_100101A08, @"com.apple.airplay.connection.stalled", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      uint64_t v58 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(v58, (const void *)a1, (CFNotificationCallback)sub_100101B20, @"com.apple.airplay.bufferedaudiounderrun", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      long long v59 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(v59, (const void *)a1, (CFNotificationCallback)sub_100101C38, @"com.apple.airplay.realTimeAudioUnderrun", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: exiting" : @"WiFiDeviceManagerScheduleWithQueue"];
      }
      goto LABEL_109;
    }
    uint64_t v48 = qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_102;
    }
    CFMutableArrayRef v60 = __error();
    CFIndex v61 = strerror(*v60);
    int v50 = "%s: null socket (%s).";
    goto LABEL_100;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:4, "%s: exiting, Error: no queue", "WiFiDeviceManagerScheduleWithQueue"];
  }
LABEL_109:
}

void sub_1000FEA7C(uint64_t a1, const void *a2, uint64_t a3, const char *a4, uint64_t a5)
{
  if (*(unsigned char *)(a1 + 248)) {
    return;
  }
  id v10 = *(void (**)(uint64_t, const void *, void, void, void, void))(a1 + 3888);
  if (v10) {
    v10(a1, a2, 0, 0, 0, *(void *)(a1 + 3896));
  }
  int v11 = (const void **)sub_100018FA8(a1, a2, 1);
  CFIndex v13 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    CFStringRef v14 = sub_10005AB40(a3);
    char v15 = "";
    if (a4) {
      char v15 = a4;
    }
    [v13 WFLog:3, "%s: network=%@ reason=%@(%d) asked to Disassociate by <%s:%d> ", "WiFiDeviceManagerDisassociate", v11, v14, a3, v15, a5 message];
  }
  if (*(void *)(a1 + 7368))
  {
    id v16 = (id)sub_100017C48(*(void *)(a1 + 64));
    uint64_t v17 = *(void *)(a1 + 7368);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100111F34;
    v28[3] = &unk_100241580;
    int v29 = a3;
    v28[4] = v17;
    v28[5] = v16;
    sub_10010A88C(a1, v11, (uint64_t)v28);
  }
  if (sub_10001FC1C((uint64_t)v11)) {
    sub_10006DB68(*(void *)(a1 + 64), v11, 0);
  }
  if ([*(id *)(a1 + 6752) isClientAssociated])
  {
    if (a3 != 1027)
    {
      *(_DWORD *)(a1 + 6544) = 1;
      long long v18 = *(const void **)(a1 + 6552);
      if (v18)
      {
        CFRelease(v18);
        *(void *)(a1 + 6552) = 0;
      }
      *(void *)(a1 + 6552) = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", @"User Initiated");
      *(double *)(a1 + 6488) = sub_10005A994();
      [*(id *)(a1 + 6752) stopSubscriberForPHSOverNAN];
      if (!v11) {
        return;
      }
LABEL_24:
      CFRelease(v11);
      return;
    }
LABEL_23:
    if (!v11) {
      return;
    }
    goto LABEL_24;
  }
  sub_10006DB78(*(void *)(a1 + 64), a2, 0, a3);
  sub_10003ABA4(*(void *)(a1 + 120), 0, 1, 0);
  *(_WORD *)(a1 + 6600) = -1;
  [*(id *)(a1 + 6624) asyncTrackNetworksOfInterest:1];
  *(_DWORD *)(a1 + 6664) = 0;
  if (!*(void *)(a1 + 3872)) {
    goto LABEL_23;
  }
  if (*(void *)(a1 + 240))
  {
    uint64_t v24 = 0;
    uint64_t v25 = &v24;
    uint64_t v26 = 0x2020000000;
    uint64_t v27 = 0;
    if (a2)
    {
      CFTypeRef v20 = CFRetain(a2);
      v25[3] = (uint64_t)v20;
    }
    CFRetain((CFTypeRef)a1);
    id v21 = *(NSObject **)(a1 + 240);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100111F98;
    block[3] = &unk_10023F220;
    void block[4] = &v24;
    void block[5] = a1;
    dispatch_async(v21, block);
    _Block_object_dispose(&v24, 8);
    goto LABEL_23;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: runloop not yet setup. Invoking didAssociate callback directly.", "WiFiDeviceManagerDisassociate"];
  }
  (*(void (**)(uint64_t, const void *, void, void, void, void))(a1 + 3872))(a1, a2, 0, 0, 0, *(void *)(a1 + 3880));
  if (v11) {
    goto LABEL_24;
  }
}

void sub_1000FEDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FEDEC(uint64_t a1, int a2)
{
  if (!a1) {
    goto LABEL_16;
  }
  if (a2 && !*(unsigned char *)(a1 + 5430))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: Setting AWDL MAC address in use" arguments:("__WiFiDeviceManagerSetAwdlMacAddressInUse")];
    }
    id v4 = +[WiFiP2PSPITransactionRequestor shared];
    [v4 beginTransaction:15 completionHandler:0];
    return;
  }
  if (!a2 && *(unsigned char *)(a1 + 5430))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: Setting AWDL MAC address not in use", "__WiFiDeviceManagerSetAwdlMacAddressInUse"];
    }
    id v6 = +[WiFiP2PSPITransactionRequestor shared];
    [v6 endTransaction:15];
  }
  else
  {
LABEL_16:
    if (qword_10027DD68)
    {
      CFIndex v8 = "";
      if (!a2) {
        CFIndex v8 = "not ";
      }
      [((id)qword_10027DD68) WFLog:2, "%s: Skip setting AWDL MAC address %sin use, already configured", "__WiFiDeviceManagerSetAwdlMacAddressInUse", v8];
    }
  }
}

void sub_1000FEF6C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    uint64_t v3 = (const void **)sub_100018FA8(a1, v2, 1);
    if (!v2) {
      goto LABEL_19;
    }
    CFStringRef v5 = *(void **)(a1 + 7368);
    if (v5)
    {
LABEL_18:
      [v5 startMonitoringWiFiInterface:v2 withLinkSessionOnly:0];
      [*(id *)(a1 + 7368) setPowerState:*(_DWORD *)(a1 + 20) == 1 forInterface:v2];
      [*(id *)(a1 + 7368) setCurrentApplicationName:*(void *)(a1 + 200) withAttributes:0];
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      long long v26[2] = sub_10014BB50;
      v26[3] = &unk_100241650;
      v26[4] = a1;
      v26[5] = v2;
      sub_10010A88C(a1, v3, (uint64_t)v26);
LABEL_19:
      if (v3) {
        CFRelease(v3);
      }
      return;
    }
    uint64_t v25 = v4;
    int v6 = *(_DWORD *)(a1 + 176);
    *(void *)(a1 + 7368) = +[WiFiUsageMonitor sharedInstance];
    int v7 = *(_DWORD *)(a1 + 72);
    if (v7 == 4)
    {
      CFStringRef v8 = @"en0";
    }
    else
    {
      if (v7 == 7)
      {
        CFStringRef v24 = 0;
LABEL_10:
        id v10 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          int v11 = sub_100024498(*(void *)(a1 + 6792));
          CFStringRef v12 = @"NO";
          if (!v11) {
            CFStringRef v12 = @"YES";
          }
          [v10 WFLog:3, "%s: mode:%@", "__WiFiDeviceManagerInitializeWiFiUsageMonitor", v12 message];
        }
        uint64_t v13 = sub_10003C6F0(*(void *)(a1 + 120));
        uint64_t v15 = v14;
        uint64_t v22 = v13;
        uint64_t v23 = *(void **)(a1 + 7368);
        CFStringRef v16 = sub_100012FCC(*(_DWORD *)(a1 + 3352));
        if (*(unsigned char *)(a1 + 3409)) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = *(unsigned char *)(a1 + 3408) != 0;
        }
        BOOL v18 = *(unsigned char *)(a1 + 3410) != 0;
        BOOL v19 = *(unsigned char *)(a1 + 3464) != 0;
        LOBYTE(v21) = sub_100024498(*(void *)(a1 + 6792)) == 0;
        LOBYTE(v20) = 0;
        [v23 initializeDeviceLockState:v6 != 1 displayState:(v6 - 1) < 2 motionState:v16 callState:v17 mediaState:v18 chargingState:v19 companionConnectionState:v20 andSecondaryInterfaceName:v24 compatibilityMode:v21 badLinkRssi:v22 goodLinkRssi:v15];
        CFStringRef v5 = *(void **)(a1 + 7368);
        id v4 = v25;
        goto LABEL_18;
      }
      CFStringRef v8 = *(const __CFString **)(a1 + 6200);
    }
    CFStringRef v24 = v8;
    goto LABEL_10;
  }
}

void sub_1000FF1EC(uint64_t a1)
{
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x3052000000;
  CFIndex v28 = sub_100022D18;
  int v29 = sub_100022C14;
  uint64_t v30 = 0;
  if (a1)
  {
    if (sub_1000704FC(*(void *)(a1 + 64)))
    {
      uint64_t v3 = sub_10012759C(a1, &off_100264180);
      id v4 = v3;
      if (v3)
      {
        if (CFDictionaryContainsKey(v3, @"networks"))
        {
          id v5 = [(__CFDictionary *)v4 objectForKeyedSubscript:@"networks"];
          id v6 = [(__CFDictionary *)v4 objectForKeyedSubscript:@"reasons"];
          if (v5
            && (int v7 = v6, v8 = [v5 count], v8 == objc_msgSend(v7, "count"))
            && [v7 count])
          {
            id v9 = +[NSMutableArray array];
            v26[5] = (uint64_t)v9;
            v24[0] = _NSConcreteStackBlock;
            v24[1] = 3221225472;
            v24[2] = sub_100127C0C;
            v24[3] = &unk_100241730;
            v24[4] = &v25;
            [v5 enumerateObjectsUsingBlock:v24];
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3, @"%s No networks denylisted in BSS and AutoJoin denylists", @"WiFiDeviceManagerProcessBSSAndAutoJoinDenyListUpdate"];
            }
          }
          if (*(void *)(a1 + 7328)
            && objc_msgSend(*(id *)(a1 + 7328), "isEqualToSet:", +[NSSet setWithArray:](NSSet, "setWithArray:", v26[5])))
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s No change in DenyListed BSSIDSet. Skipping driver update. %@", "WiFiDeviceManagerProcessBSSAndAutoJoinDenyListUpdate", *(void *)(a1 + 7328) message];
            }
          }
          else
          {
            id v11 = +[NSMutableDictionary dictionary];
            CFStringRef v12 = (unsigned char *)(a1 + 7312);
            uint64_t v13 = (void *)v26[5];
            if (v13 && [v13 count])
            {
              [v11 setObject:[+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", 3)] forKey:@"IO80211InterfaceBssidBlacklistMode"];
              [v11 setObject:v26[5] forKey:@"IO80211InterfaceBssidBlacklistBssids"];
              uint64_t v14 = *(const void **)(a1 + 7328);
              if (v14)
              {
                CFRelease(v14);
                *(void *)(a1 + 7328) = 0;
              }
              *(void *)(a1 + 7328) = CFSetCreateCopy(kCFAllocatorDefault, (CFSetRef)+[NSSet setWithArray:v26[5]]);
              if (*v12)
              {
                if (qword_10027DD68) {
                  [qword_10027DD68 WFLog:message:3, "%s: DenyListed BSSIDSet expiry timer already running", "WiFiDeviceManagerProcessBSSAndAutoJoinDenyListUpdate"];
                }
              }
              else
              {
                *CFStringRef v12 = 1;
                BOOL v17 = *(NSObject **)(a1 + 7320);
                dispatch_time_t v18 = dispatch_time(0, 600000000000);
                dispatch_source_set_timer(v17, v18, 0xFFFFFFFFFFFFFFFFLL, 0);
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: DenyListed BSSIDSet expiry timer set to fire in %f seconds from now", "WiFiDeviceManagerProcessBSSAndAutoJoinDenyListUpdate", 0x4082C00000000000);
                }
              }
            }
            else
            {
              [v11 setObject:[+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", 0)] forKey:@"IO80211InterfaceBssidBlacklistMode"];
              CFStringRef v16 = *(const void **)(a1 + 7328);
              if (v16)
              {
                CFRelease(v16);
                *(void *)(a1 + 7328) = 0;
              }
              *CFStringRef v12 = 0;
              dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 7320), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:3, @"%s: DenyListed BSSIDSet expiry timer set to fire never", @"WiFiDeviceManagerProcessBSSAndAutoJoinDenyListUpdate"];
              }
            }
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: %@", "WiFiDeviceManagerProcessBSSAndAutoJoinDenyListUpdate", v11 message];
            }
            uint64_t v20 = *(void *)(a1 + 64);
            uint64_t v21 = (const void *)sub_100017C48(v20);
            sub_100017D28(v20, v21, 372, 0, (uint64_t)v11);
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s networks key missing" arguments:@"WiFiDeviceManagerProcessBSSAndAutoJoinDenyListUpdate"];
          }
        }
        CFRelease(v4);
      }
    }
  }
  _Block_object_dispose(&v25, 8);
}

void sub_1000FF6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FF6DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 240);
  if (v2) {
    sub_1000FF740(a1, v2);
  }
  uint64_t v3 = *(const void **)(a1 + 5464);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 5464) = 0;
  }
  id v4 = *(const void **)(a1 + 5584);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 5584) = 0;
  }
  sub_100067D28(*(void *)(a1 + 64));
  *(unsigned char *)(a1 + 16) = 0;
}

void sub_1000FF740(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: entering", @"WiFiDeviceManagerUnscheduleFromQueue"];
  }
  if (*(unsigned char *)(a1 + 16) && *(void *)(a1 + 240) == a2)
  {
    sub_100101D50((const void *)a1);
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterRemoveObserver(LocalCenter, (const void *)a1, @"com.apple.wifid.wifiroammanagerroamnotification", 0);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, (const void *)a1, @"com.apple.siri.connection.timeout", 0);
    id v8 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(v8, (const void *)a1, @"com.apple.apsd.connection-failure-notification", 0);
    id v9 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(v9, (const void *)a1, @"com.apple.airplay.connection.stalled", 0);
    id v10 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(v10, (const void *)a1, @"com.apple.airplay.bufferedaudiounderrun", 0);
    id v11 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(v11, (const void *)a1, @"com.apple.airplay.realTimeAudioUnderrun", 0);
    SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 5440), 0);
    CFStringRef v12 = *(NSObject **)(a1 + 360);
    if (v12) {
      dispatch_source_cancel(v12);
    }
    uint64_t v13 = *(NSObject **)(a1 + 312);
    if (v13) {
      dispatch_source_cancel(v13);
    }
    uint64_t v14 = *(NSObject **)(a1 + 5240);
    if (v14) {
      dispatch_source_cancel(v14);
    }
    uint64_t v15 = *(NSObject **)(a1 + 5320);
    if (v15) {
      dispatch_source_cancel(v15);
    }
    CFStringRef v16 = *(NSObject **)(a1 + 5512);
    if (v16) {
      dispatch_source_cancel(v16);
    }
    BOOL v17 = *(NSObject **)(a1 + 8592);
    if (v17) {
      dispatch_source_cancel(v17);
    }
    dispatch_time_t v18 = *(NSObject **)(a1 + 8632);
    if (v18) {
      dispatch_source_cancel(v18);
    }
    BOOL v19 = *(NSObject **)(a1 + 1000);
    if (v19) {
      dispatch_source_cancel(v19);
    }
    uint64_t v20 = *(NSObject **)(a1 + 1056);
    if (v20) {
      dispatch_source_cancel(v20);
    }
    uint64_t v21 = *(NSObject **)(a1 + 5528);
    if (v21) {
      dispatch_source_cancel(v21);
    }
    uint64_t v22 = *(NSObject **)(a1 + 6808);
    if (v22) {
      dispatch_source_cancel(v22);
    }
    uint64_t v23 = *(NSObject **)(a1 + 6816);
    if (v23) {
      dispatch_source_cancel(v23);
    }
    CFStringRef v24 = *(NSObject **)(a1 + 7320);
    if (v24) {
      dispatch_source_cancel(v24);
    }
    uint64_t v25 = *(NSObject **)(a1 + 7344);
    if (v25) {
      dispatch_source_cancel(v25);
    }
    uint64_t v26 = *(NSObject **)(a1 + 7216);
    if (v26) {
      dispatch_source_cancel(v26);
    }
    uint64_t v27 = *(NSObject **)(a1 + 7256);
    if (v27) {
      dispatch_source_cancel(v27);
    }
    CFIndex v28 = *(NSObject **)(a1 + 8968);
    if (v28)
    {
      dispatch_source_cancel(v28);
      dispatch_release(*(dispatch_object_t *)(a1 + 8968));
      *(void *)(a1 + 8968) = 0;
    }
    int v29 = *(void **)(a1 + 7072);
    if (v29)
    {
      [v29 abort];

      *(void *)(a1 + 7072) = 0;
    }
    uint64_t v30 = *(NSObject **)(a1 + 8984);
    if (v30) {
      dispatch_source_cancel(v30);
    }
    id v31 = *(NSObject **)(a1 + 8992);
    if (v31) {
      dispatch_source_cancel(v31);
    }
    uint64_t v32 = *(NSObject **)(a1 + 3768);
    if (v32)
    {
      dispatch_source_cancel(v32);
      dispatch_release(*(dispatch_object_t *)(a1 + 3768));
      *(void *)(a1 + 3768) = 0;
    }
    if (sub_10006A38C(*(void *)(a1 + 64)))
    {
      uint64_t v33 = (const void *)sub_10005FC0C(*(void *)(a1 + 64));
      sub_100101DF0(a1, v33);
    }
    if (+[WiFiAIRAgent sharedInstance]
      && [+[WiFiAIRAgent sharedInstance] isInterfaceRankingInProgress])
    {
      sub_1000175A0(*(void *)(a1 + 120), 0, 0);
      [+[WiFiAIRAgent sharedInstance] terminateRequest];
    }
    sub_100067DAC(*(void *)(a1 + 64));
    sub_100037C0C(*(void *)(a1 + 120), *(void *)(a1 + 240));
    if (_os_feature_enabled_impl())
    {
      [*(id *)(a1 + 8824) setEventHandler:0];
      [*(id *)(a1 + 8824) invalidate];

      *(void *)(a1 + 8824) = 0;
      uint64_t v34 = *(void *)(a1 + 8928);
      if (v34)
      {
        (*(void (**)(uint64_t, NSError *, void, void))(v34 + 16))(v34, +[NSError errorWithDomain:NSPOSIXErrorDomain code:58 userInfo:0], 0, 0);
        _Block_release(*(const void **)(a1 + 8928));
        *(void *)(a1 + 8928) = 0;

        *(void *)(a1 + 8936) = 0;
      }
      uint64_t v35 = *(void *)(a1 + 8944);
      if (v35)
      {
        (*(void (**)(uint64_t, NSError *, void, void))(v35 + 16))(v35, +[NSError errorWithDomain:NSPOSIXErrorDomain code:58 userInfo:0], 0, 0);
        _Block_release(*(const void **)(a1 + 8944));
        *(void *)(a1 + 8944) = 0;

        *(void *)(a1 + 8952) = 0;
      }
      uint64_t v36 = *(void *)(a1 + 8840);
      if (v36)
      {
        (*(void (**)(uint64_t, NSError *))(v36 + 16))(v36, +[NSError errorWithDomain:NSPOSIXErrorDomain code:58 userInfo:0]);
        _Block_release(*(const void **)(a1 + 8840));
        *(void *)(a1 + 8840) = 0;
        double v37 = *(const void **)(a1 + 8832);
        if (v37)
        {
          CFRelease(v37);
          *(void *)(a1 + 8832) = 0;
        }
      }
      uint64_t v38 = *(void *)(a1 + 8864);
      if (v38)
      {
        (*(void (**)(uint64_t, NSError *, void))(v38 + 16))(v38, +[NSError errorWithDomain:NSPOSIXErrorDomain code:58 userInfo:0], 0);
        _Block_release(*(const void **)(a1 + 8864));
        *(void *)(a1 + 8864) = 0;
      }
      uint64_t v39 = *(void *)(a1 + 8856);
      if (v39)
      {
        (*(void (**)(uint64_t, NSError *))(v39 + 16))(v39, +[NSError errorWithDomain:NSPOSIXErrorDomain code:58 userInfo:0]);
        _Block_release(*(const void **)(a1 + 8856));
        *(void *)(a1 + 8856) = 0;

        *(void *)(a1 + 8848) = 0;
      }

      *(void *)(a1 + 8896) = 0;
      *(void *)(a1 + 8904) = 0;
      CFRelease((CFTypeRef)a1);
    }
    [+[WiFiUserInteractionMonitor sharedInstance] unregisterStateChangeCallback:a1];
    sub_100101F2C(a1);
    *(void *)(a1 + 240) = 0;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: exiting", "WiFiDeviceManagerUnscheduleFromQueue")];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: exiting, Error: not opened or unmatched queues", @"WiFiDeviceManagerUnscheduleFromQueue"];
    }
  }
}

uint64_t sub_1000FFC58(uint64_t a1)
{
  return sub_10006A398(*(void *)(a1 + 64));
}

void sub_1000FFC60(int a1, CFArrayRef theArray, uint64_t a3)
{
  if (a3)
  {
    if (theArray && CFArrayGetCount(theArray) >= 1)
    {
      CFIndex v5 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v5);
        if (ValueAtIndex)
        {
          int v7 = ValueAtIndex;
          CFTypeID TypeID = CFStringGetTypeID();
          if (CFGetTypeID(v7) == TypeID)
          {
            if (CFEqual(v7, @"com.apple.sharing")) {
              break;
            }
          }
        }
        if (++v5 >= CFArrayGetCount(theArray)) {
          goto LABEL_9;
        }
      }
      if (*(unsigned char *)(a3 + 208)) {
        BOOL v35 = *(unsigned char *)(a3 + 3464) == 0;
      }
      else {
        BOOL v35 = 0;
      }
      CFStringRef v42 = SCDynamicStoreKeyCreate(kCFAllocatorDefault, @"%@", @"com.apple.sharing");
      if (v42)
      {
        CFStringRef v43 = v42;
        CFDictionaryRef v44 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a3 + 5440), v42);
        if (v44)
        {
          CFDictionaryRef v45 = v44;
          CFNumberRef Value = CFDictionaryGetValue(v44, @"AutoUnlockInProgress");
          if (Value && CFEqual(Value, kCFBooleanTrue))
          {
            if (*(_DWORD *)(a3 + 3280))
            {
              CFIndex v47 = (const void *)sub_100016E20(*(void *)(a3 + 64));
              sub_1001120E0((uint64_t *)a3, v47, 1014);
              sub_100102284(a3);
            }
            uint64_t v48 = 1;
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3, "%s: Auto-unlock not in progress. Resuming auto-join attempt.", "__WiFiDeviceManagerDynamicStoreCallback"];
            }
            uint64_t v48 = 0;
          }
          sub_10011C9C4(a3, v48);
          CFRelease(v45);
        }
        else
        {
          uint64_t v48 = 0;
        }
        CFRelease(v43);
      }
      else
      {
        uint64_t v48 = 0;
      }
      if (v48) {
        int v50 = 1;
      }
      else {
        int v50 = v35;
      }
      sub_1000FEDEC(a3, v50);
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: awdlMacAddressInUse=%d isDeviceLockedAndSuspendable=%d shouldDisassociate=%d", "__WiFiDeviceManagerDynamicStoreCallback", v48, v35, 0);
      }
      goto LABEL_26;
    }
LABEL_9:
    if (!sub_10006A398(*(void *)(a3 + 64)))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4 message:"__WiFiDeviceManagerDynamicStoreCallback: MIS not supported on device"];
      }
      uint64_t v69 = 0;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long valuePtr = 0u;
      long long v60 = 0u;
      DWORD1(valuePtr) = 3;
      sub_10010E020(a3, (uint64_t)&valuePtr);
      return;
    }
    int v9 = sub_10010EB14(a3);
    if (!v9)
    {
      *(unsigned char *)(a3 + 5362) = 0;
      *(_WORD *)(a3 + 5360) = 0;
    }
    if (objc_opt_class()) {
      dispatch_async((dispatch_queue_t)qword_10027DD88, &stru_100241B38);
    }
    LOBYTE(valuePtr) = 0;
    __int16 v70 = 0;
    id v10 = *(const __SCDynamicStore **)(a3 + 5440);
    if (v10)
    {
      if (qword_10027D7A8)
      {
        CFDictionaryRef v11 = (const __CFDictionary *)SCDynamicStoreCopyValue(v10, (CFStringRef)qword_10027D7A8);
        if (v11)
        {
          CFDictionaryRef v12 = v11;
          CFTypeID v13 = CFGetTypeID(v11);
          if (v13 == CFDictionaryGetTypeID())
          {
            CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(v12, @"Hosts");
            if (v14)
            {
              CFDictionaryRef v15 = v14;
              CFTypeID v16 = CFGetTypeID(v14);
              if (v16 == CFDictionaryGetTypeID())
              {
                CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue(v15, @"Type");
                if (v17)
                {
                  CFDictionaryRef v18 = v17;
                  CFTypeID v19 = CFGetTypeID(v17);
                  if (v19 == CFDictionaryGetTypeID())
                  {
                    CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AirPort");
                    if (v20) {
                      CFNumberGetValue(v20, kCFNumberSInt8Type, &valuePtr);
                    }
                    else {
                      LOBYTE(valuePtr) = *(unsigned char *)(a3 + 5360);
                    }
                    CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(v18, @"Bluetooth");
                    if (v23) {
                      CFNumberGetValue(v23, kCFNumberSInt8Type, (char *)&v70 + 1);
                    }
                    else {
                      HIBYTE(v70) = *(unsigned char *)(a3 + 5361);
                    }
                    CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v18, @"USB-Ethernet");
                    if (v24) {
                      CFNumberGetValue(v24, kCFNumberSInt8Type, &v70);
                    }
                    else {
                      LOBYTE(v70) = *(unsigned char *)(a3 + 5362);
                    }
                    if (qword_10027DD68) {
                      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: client count: WiFi %d, BT %d, USB %d ", "__WiFiDeviceManagerHotspotTransportTypeMetric", valuePtr, HIBYTE(v70), v70);
                    }
                    uint64_t v26 = malloc_type_malloc(3uLL, 0x100004033FC2DF1uLL);
                    char v27 = valuePtr;
                    unsigned char *v26 = valuePtr;
                    char v28 = HIBYTE(v70);
                    v26[1] = HIBYTE(v70);
                    char v29 = v70;
                    long long v26[2] = v70;
                    *(unsigned char *)(a3 + 5360) = v27;
                    *(unsigned char *)(a3 + 5361) = v28;
                    *(unsigned char *)(a3 + 5362) = v29;
                    sub_1000464B4((uint64_t)v26);
                    CFRelease(v12);
                    free(v26);
LABEL_42:
                    if (v9)
                    {
                      uint64_t v30 = (const void *)sub_100017C48(*(void *)(a3 + 64));
                      id v31 = sub_100018FA8(a3, v30, 1);
                      if (v31)
                      {
                        uint64_t v32 = v31;
                        if (*(unsigned __int8 *)(a3 + 5361) != -*(unsigned char *)(a3 + 5360))
                        {
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:3, "MIS client count: wifi=%d bt=%d. Now disconnecting from %@", *(unsigned __int8 *)(a3 + 5360), *(unsigned __int8 *)(a3 + 5361), sub_10001A43C(v32) message];
                          }
                          if (sub_10010EC7C(a3, 4))
                          {
                            sub_100105524((uint64_t *)a3, v32, 1, 3);
                            if (qword_10027DD68) {
                              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: setting interface rank %s : reason %s ", "__WiFiDeviceManagerDynamicStoreCallback", "kSCNetworkServicePrimaryRankNever", " Concurrency");
                            }
                          }
                          else
                          {
                            uint64_t v36 = (const void *)sub_100017C48(*(void *)(a3 + 64));
                            sub_1000FEA7C(a3, v36, 1007, "__WiFiDeviceManagerDynamicStoreCallback", 25377);
                          }
                        }
                        CFRelease(v32);
                      }
                    }
                    int v37 = *(unsigned __int8 *)(a3 + 5220);
                    if (v9 == v37)
                    {
                      if (qword_10027DD68)
                      {
                        if (v9) {
                          CFArrayRef v54 = "Enabled";
                        }
                        else {
                          CFArrayRef v54 = "Disabled";
                        }
                        [(id)qword_10027DD68 WFLog:3, "MIS is already %s on %@", v54, sub_10006B8BC() message];
                      }
                      if (!v9)
                      {
                        _os_feature_enabled_impl();
LABEL_120:
                        [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:10 interfaceName:sub_100017C48(*(void *)(a3 + 64))];
                        sub_1001028E4(a3, 2, (uint64_t)"__WiFiDeviceManagerDynamicStoreCallback");
                        return;
                      }
                    }
                    else
                    {
                      *(unsigned char *)(a3 + 5220) = v9;
                      int v38 = *(unsigned __int8 *)(a3 + 5219);
                      if (v9 == v38)
                      {
                        if (qword_10027DD68)
                        {
                          if (v9) {
                            id v40 = "Enabled";
                          }
                          else {
                            id v40 = "Disabled";
                          }
                          [(id)qword_10027DD68 WFLog:3, "MIS is already %s on %@", v40, sub_10006B8BC() message];
                        }
                        return;
                      }
                      if (!v9)
                      {
                        if (qword_10027DD68) {
                          [(id)qword_10027DD68 WFLog:3 message:"MIS Disabled: Attempting to disable MIS Service"];
                        }
                        uint64_t v69 = 0;
                        long long v67 = 0u;
                        long long v68 = 0u;
                        long long v65 = 0u;
                        long long v66 = 0u;
                        long long v63 = 0u;
                        long long v64 = 0u;
                        long long v61 = 0u;
                        long long v62 = 0u;
                        long long valuePtr = 0u;
                        long long v60 = 0u;
                        DWORD2(valuePtr) = 5;
                        LODWORD(v66) = 5;
                        *((void *)&v66 + 1) = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", @"Dynamic Store");
                        sub_10010E020(a3, (uint64_t)&valuePtr);
                        *(unsigned char *)(a3 + 5384) = 0;
                        sub_10010E474(a3);
LABEL_72:
                        int v41 = _os_feature_enabled_impl();
                        if (v9 != v37 && v41)
                        {
                          sub_10001FD64(a3, 0xAuLL);
                          return;
                        }
                        goto LABEL_120;
                      }
                      if (qword_10027DD68) {
                        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS Enabled: Attempting to enable MIS Service, misIsHidden %d misBcastClients %ld misIsNANPHS %d", *(unsigned __int8 *)(a3 + 5260), CFSetGetCount(*(CFSetRef *)(a3 + 5272)), *(unsigned __int8 *)(a3 + 5386));
                      }
                      uint64_t v69 = 0;
                      long long v67 = 0u;
                      long long v68 = 0u;
                      long long v65 = 0u;
                      long long v66 = 0u;
                      long long v63 = 0u;
                      long long v64 = 0u;
                      long long v61 = 0u;
                      long long v62 = 0u;
                      long long valuePtr = 0u;
                      long long v60 = 0u;
                      LODWORD(valuePtr) = 4;
                      sub_10010E020(a3, (uint64_t)&valuePtr);
                      sub_10010EF6C(a3);
                      sub_10010F2A8(a3, 1);
                    }
                    if (*(unsigned __int8 *)(a3 + 5361) != -*(unsigned char *)(a3 + 5360)) {
                      return;
                    }
                    goto LABEL_72;
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:3 message:@"%s: invalid typeDict" : @"__WiFiDeviceManagerHotspotTransportTypeMetric"];
                  }
                }
                else
                {
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null typeDict", "__WiFiDeviceManagerHotspotTransportTypeMetric")];
                  }
                }
              }
              else
              {
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: invalid hostsDict", "__WiFiDeviceManagerHotspotTransportTypeMetric")
                }
              }
            }
            else
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null hostsDict", "__WiFiDeviceManagerHotspotTransportTypeMetric")];
              }
            }
          }
          else
          {
            if (qword_10027DD68) {
              [qword_10027DD68 WFLog:3 message:@"%s: invalid misDict"];
            }
          }
          CFRelease(v12);
          goto LABEL_42;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: null misDict" : @"__WiFiDeviceManagerHotspotTransportTypeMetric"];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: null dynamicstoreref keys", "__WiFiDeviceManagerHotspotTransportTypeMetric"];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: null dynamicstoreref" args:("__WiFiDeviceManagerHotspotTransportTypeMetric", nil)];
      }
    }
    goto LABEL_42;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:4, @"__WiFiDeviceManagerDynamicStoreCallback: manager reference is NULL", v55, v56, v57, v58];
  }
LABEL_26:
}

void sub_100100688(SCDynamicStoreRef *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    uint64_t v3 = Mutable;
    CFStringRef v4 = SCDynamicStoreKeyCreate(kCFAllocatorDefault, @"com.apple.sharing");
    if (v4)
    {
      CFStringRef v5 = v4;
      CFArrayAppendValue(v3, v4);
      CFRelease(v5);
    }
    if (qword_10027D7A8)
    {
      CFArrayAppendValue(v3, (const void *)qword_10027D7A8);
      if (CFArrayGetCount(v3) > 0) {
        SCDynamicStoreSetNotificationKeys(a1[680], v3, 0);
      }
      CFRelease(v3);
    }
    else
    {
      v7[0] = 0;
      v7[1] = v7;
      v7[2] = 0x2020000000;
      CFTypeRef v8 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      CFTypeRef v8 = CFRetain(v3);
      CFRetain(a1);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_100144318;
      void v6[3] = &unk_10023F220;
      void v6[4] = v7;
      v6[5] = a1;
      dispatch_async((dispatch_queue_t)qword_10027DD88, v6);
      CFRelease(v3);
      _Block_object_dispose(v7, 8);
    }
  }
}

void sub_100100804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10010081C(uint64_t a1, SCDynamicStoreRef *a2)
{
  if (a2)
  {
    sub_100100688(a2);
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"Cannot reconnect to the dynamic store - info is NULL"];
    }
  }
}

uint64_t sub_10010088C(uint64_t result)
{
  if (result) {
    return sub_10001C1A8(*(void *)(result + 64));
  }
  return result;
}

void sub_10010089C(uint64_t a1, const void *a2, uint64_t a3)
{
  if (a2 && &_MRMediaRemoteGetNowPlayingApplicationPlaybackState)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: %@", "__WiFiDeviceManagerNowPlayingStateDidChange", a3 message];
    }
    CFRetain(a2);
    MRMediaRemoteGetNowPlayingApplicationPlaybackState();
  }
}

uint64_t sub_100100990(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 3412) = a2;
  if (qword_10027DD68)
  {
    if (*(unsigned char *)(a1 + 3412)) {
      CFStringRef v4 = "TRUE";
    }
    else {
      CFStringRef v4 = "FALSE";
    }
    [((id)qword_10027DD68) WFLog:3, "%s: isOnMovingNetwork: %s", "__WiFiDeviceManagerMovingNetworkNotifyFamily", v4];
  }
  uint64_t v5 = *(void *)(a1 + 64);
  id v6 = (const void *)sub_100017C48(v5);
  if (*(unsigned char *)(a1 + 3412)) {
    int v7 = &kCFBooleanTrue;
  }
  else {
    int v7 = &kCFBooleanFalse;
  }
  uint64_t v8 = (uint64_t)*v7;

  return sub_100017D28(v5, v6, 471, 0, v8);
}

char *sub_100100A60(char *result, char a2, int a3)
{
  uint64_t v3 = (unsigned __int8 *)(result + 7056);
  int v4 = result[7057];
  if (a3) {
    unsigned __int8 v5 = v4 | a2;
  }
  else {
    unsigned __int8 v5 = v4 & ~a2;
  }
  if (v5 == v4) {
    return result;
  }
  uint64_t v8 = (uint64_t)result;
  id v10 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    CFStringRef v11 = sub_10005ADD0(v3[1]);
    [v10 WFLog:3, "%s: current state %@(%d) new state %@(%d)", "WiFiDeviceManagerUpdateOpMode", v11, v3[1], sub_10005ADD0(v5), v5 message];
  }
  v3[1] = v5;
  CFTypeID v13 = *(void (**)(uint64_t, void, void, void))(v8 + 4648);
  if (v13) {
    v13(v8, *v3, v5, *(void *)(v8 + 4656));
  }
  if ((a2 & 4) != 0)
  {
    CFDictionaryRef v14 = (const void *)sub_100017C48(*(void *)(v8 + 64));
    CFDictionaryRef v15 = sub_100018FA8(v8, v14, 1);
    CFTypeID v16 = v15;
    if (*v3 && (v5 & 1) != 0 && v15)
    {
      if (a3) {
        int v17 = 3;
      }
      else {
        int v17 = 0;
      }
      sub_100105524((uint64_t *)v8, v15, 1, v17);
      if (qword_10027DD68)
      {
        CFTypeID v19 = "kSCNetworkServicePrimaryRankNever";
        if (!a3) {
          CFTypeID v19 = "kSCNetworkServicePrimaryRankDefault";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: setting interface rank %s : reason %s ", "WiFiDeviceManagerUpdateOpMode", v19, " Concurrency");
      }
    }
    else if (!v15)
    {
LABEL_23:
      sub_100125288(v8);
      goto LABEL_24;
    }
    CFRelease(v16);
    goto LABEL_23;
  }
LABEL_24:
  if ((a2 & 2) != 0 && (v3[1] & 8) != 0)
  {
    memset(v20, 0, sizeof(v20));
    uint64_t v21 = 1;
    double v12 = sub_10010E020(v8, (uint64_t)v20);
  }
  id result = [(char *)[*(id *)(v8 + 6752) isClientAssociated:v12];
  if (result) {
    *(unsigned char *)(v8 + 6561) = 1;
  }
  return result;
}

void sub_100100C74(unsigned __int8 *a1)
{
  if (&_MRMediaRemoteGetNowPlayingApplicationPlaybackState)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s, isCarplay %d, user forced %d", "__WiFiDeviceManagerAddMediaPlaybackStateObserver", a1[5496], a1[3413]);
    }
    if (!a1[5496] && !a1[3413])
    {
      MRMediaRemoteRegisterForNowPlayingNotifications();
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterAddObserver(LocalCenter, a1, (CFNotificationCallback)sub_10010089C, kMRMediaRemoteNowPlayingApplicationIsPlayingDidChangeNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      sub_10010089C(v4, a1, @"Reading Initial State");
    }
  }
}

void sub_100100D74(uint64_t a1, int a2)
{
  if (_os_feature_enabled_impl())
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s not allowed with Unified Auto-Join", @"__WiFiDeviceManagerAttemptNetworkTransition", v36];
    }
    goto LABEL_15;
  }
  if (a2 == 6)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s trigger is kWiFiMetricsNetworkTransitionNetworkOfInterest, reset last transtion scan time + time since linkup so we attempt transtion regardles of last attempt time", "__WiFiDeviceManagerAttemptNetworkTransition");
    }
    *(void *)(a1 + 3416) = 0;
    *(void *)(a1 + 3400) = 0;
    *(_DWORD *)(a1 + 3392) = 0;
    if (*(void *)(a1 + 6608))
    {
      id v6 = (const void **)(a1 + 6608);
      goto LABEL_13;
    }
  }
  else
  {
    int v7 = *(const void **)(a1 + 6608);
    if (v7)
    {
      id v6 = (const void **)(a1 + 6608);
      if (a2 != 7)
      {
LABEL_13:
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s Not attempting transition when colocatedScopeTransition network  %@ is set.. Bailing", "__WiFiDeviceManagerAttemptNetworkTransition", sub_10001A43C(*v6) message];
        }
LABEL_15:
        goto LABEL_83;
      }
      sub_1001484A4((CFArrayRef *)a1, v7);
      uint64_t v8 = *(const void **)(a1 + 6608);
      *(unsigned char *)(a1 + 6616) = 1;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Top network for colocatedScopeTransition: %@", "__WiFiDeviceManagerAttemptNetworkTransition", sub_10001A43C(*v6) message];
      }
      if (v8)
      {
LABEL_82:
        sub_100148B30(a1, v8);
        goto LABEL_83;
      }
      goto LABEL_83;
    }
    if ((a2 & 0xFFFFFFFE) != 6 && !sub_1001485D0(a1))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: not now...", "__WiFiDeviceManagerAttemptNetworkTransition", v36];
      }
      goto LABEL_15;
    }
  }
  id v11 = sub_100005420(a1);
  if (v11)
  {
    +[WiFiLocationManager logLocation:v11 addPrefixString:@"__WiFiDeviceManagerAttemptNetworkTransition"];
    unsigned int v12 = +[WiFiLocationManager isLocationValid:v11 uptoSeconds:1 isHighAccuracy:900.0];
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: isLocValid %d", "__WiFiDeviceManagerAttemptNetworkTransition", v12);
    }
    CFDictionaryRef v14 = (CFTypeRef *)(a1 + 3368);
    CFDictionaryRef v15 = *(void **)(a1 + 3384);
    if (v15)
    {
      if (v12)
      {
        [v15 distanceFromLocation:v11];
        if (v16 > 30.0)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"%s: moved significantly since the last location" : @"__WiFiDeviceManagerAttemptNetworkTransition"];
          }
LABEL_31:
LABEL_32:
          CFArrayRef v18 = (const __CFArray *)[[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyScoreSortedNetworksAvailableAtLocation:v11];
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: score sorted networks %@", "__WiFiDeviceManagerAttemptNetworkTransition", v18 message];
          }
          CFNumberRef v20 = *(const void **)(a1 + 3384);
          if (v20) {
            CFRelease(v20);
          }
          *(void *)(a1 + 3384) = v11;
          CFRetain(v11);
          if (v18 && CFArrayGetCount(v18) && CFArrayGetCount(v18) >= 1)
          {
            CFIndex v21 = 0;
            do
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v18, v21);
              if (ValueAtIndex) {
                sub_1001484A4((CFArrayRef *)a1, ValueAtIndex);
              }
              ++v21;
            }
            while (CFArrayGetCount(v18) > v21);
          }
          if (*v14)
          {
            CFRelease(*v14);
            CFTypeRef *v14 = 0;
          }
          if (v18)
          {
            CFTypeRef *v14 = v18;
            CFRetain(v18);
            CFRelease(v18);
          }
          goto LABEL_54;
        }
        if (*(_DWORD *)(a1 + 3392) == -1)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3, "%s: switched network/roamed since the last attempt", "__WiFiDeviceManagerAttemptNetworkTransition"];
          }
          *(_DWORD *)(a1 + 3392) = 0;
          goto LABEL_32;
        }
      }
LABEL_54:
      CFRelease(v11);
      goto LABEL_55;
    }
    if (v12)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: did not try location based logic last time we auto joined", "__WiFiDeviceManagerAttemptNetworkTransition")];
      }
      goto LABEL_31;
    }
  }
  else
  {
    CFDictionaryRef v14 = (CFTypeRef *)(a1 + 3368);
    if (*(void *)(a1 + 3384)) {
      goto LABEL_55;
    }
  }
  int v23 = *(unsigned __int8 *)(a1 + 6632);
  if (v23)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: did not try location based logic last time we auto joined and don't have a valid location. Will attempt transition anyways as preferAutoJoinHomeNetwork", "__WiFiDeviceManagerAttemptNetworkTransition"];
    }
    if (v11) {
      goto LABEL_54;
    }
LABEL_55:
    if (*v14 && CFArrayGetCount((CFArrayRef)*v14))
    {
      if (!*(unsigned char *)(a1 + 6632))
      {
        uint64_t v25 = (CFDictionaryRef *)CFArrayGetValueAtIndex((CFArrayRef)*v14, 0);
        if (!v25) {
          goto LABEL_64;
        }
        uint64_t v26 = v25;
        if (sub_1000CEBB4(v25)
          || objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "isMovingNetwork:", v26))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: top network <%@> is a moving network", "__WiFiDeviceManagerAttemptNetworkTransition", sub_10001A43C(v26) message];
          }
LABEL_63:
          goto LABEL_64;
        }
        if (!sub_10001EBB4((uint64_t)v26) || !sub_10012EE58(a1, v26, 0))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: top network %@ is not eligible for aj ", "__WiFiDeviceManagerAttemptNetworkTransition", sub_10001A43C(v26) message];
          }
          goto LABEL_63;
        }
        CFIndex v35 = sub_1000CE630(*(const __CFArray **)(a1 + 3576), (uint64_t)v26);
        if (v35 == -1)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: top network <%@> does not exist in known networks list, onto the next one ", "__WiFiDeviceManagerAttemptNetworkTransition", sub_10001A43C(v26) message];
          }
          goto LABEL_63;
        }
        uint64_t v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3576), v35);
        goto LABEL_81;
      }
    }
    else if (!*(unsigned char *)(a1 + 6632))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, "%s: no rank sorted networks and not preferAutoJoinHomeNetwork", "__WiFiDeviceManagerAttemptNetworkTransition", v36];
      }
      goto LABEL_15;
    }
    CFArrayRef v28 = *(const __CFArray **)(a1 + 3528);
    if (v28)
    {
      int Count = CFArrayGetCount(v28);
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (Count)
      {
        CFArrayRef v31 = *(const __CFArray **)(a1 + 3528);
        v39.length = CFArrayGetCount(v31);
        v39.location = 0;
        CFArrayAppendArray(Mutable, v31, v39);
      }
    }
    else
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    }
    if (*v14 && CFArrayGetCount((CFArrayRef)*v14))
    {
      CFArrayRef v32 = (const __CFArray *)*v14;
      v40.length = CFArrayGetCount((CFArrayRef)*v14);
      v40.location = 0;
      CFArrayAppendArray(Mutable, v32, v40);
    }
    if (CFArrayGetCount(Mutable))
    {
      v38.length = CFArrayGetCount(Mutable);
      v38.location = 0;
      CFArraySortValues(Mutable, v38, (CFComparatorFunction)sub_1000CBD24, 0);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: NOI home-state sorted networks %@", "__WiFiDeviceManagerAttemptNetworkTransition", Mutable message];
      }
      uint64_t v8 = CFArrayGetValueAtIndex(Mutable, 0);
      if (!Mutable)
      {
LABEL_81:
        if (!v8)
        {
LABEL_64:
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"%s: no top network found" :@"__WiFiDeviceManagerAttemptNetworkTransition" :v36];
          }
          goto LABEL_15;
        }
        goto LABEL_82;
      }
    }
    else
    {
      uint64_t v8 = 0;
      if (!Mutable) {
        goto LABEL_81;
      }
    }
    CFRelease(Mutable);
    goto LABEL_81;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: did not try location based logic last time and don't have valid location to try now", "__WiFiDeviceManagerAttemptNetworkTransition"];
  }
  if (v11) {
    CFRelease(v11);
  }
LABEL_83:
}

void sub_100101574(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 7400;
  if (*(unsigned char *)(a1 + 7400))
  {
    unsigned __int8 v5 = (unsigned __int8 *)(a1 + 8606);
    if (*(unsigned char *)(a1 + 5496) || *(unsigned char *)(a1 + 3410) || *(unsigned char *)(a1 + 5498)) {
      unsigned __int8 v6 = 1;
    }
    else {
      unsigned __int8 v6 = [+[WiFiUserInteractionMonitor sharedInstance] isRealTimeAppActive];
    }
    void v5[2] = v6;
    if (qword_10027DD68)
    {
      uint64_t v8 = "Yes";
      if (*v5) {
        int v9 = "Yes";
      }
      else {
        int v9 = "No";
      }
      if (v5[2]) {
        id v10 = "Yes";
      }
      else {
        id v10 = "No";
      }
      if (!v5[3]) {
        uint64_t v8 = "No";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s:isConnected %s, isTimeSensitiveAppRunning %s, isThereTrafficNow %s", "__WiFiDeviceManagerEvaluate24GHzInfraNetworkState", v9, v10, v8);
    }
    v5[4] = 0;
    int v11 = *v5;
    if (*v5)
    {
      if (v5[2] || (int v11 = v5[3]) != 0)
      {
        int v11 = 1;
        v5[4] = 1;
      }
    }
    if (*(unsigned __int8 *)(v2 + 1205) != v11)
    {
      v12.n128_f64[0] = CFAbsoluteTimeGetCurrent();
      double v13 = *(double *)(a1 + 8584);
      if (v13 == 0.0 || (double v14 = v12.n128_f64[0] - v13, v12.n128_u64[0] = 4.0, v14 >= 4.0) || v14 < 0.0)
      {
        CFTypeID v19 = *(void (**)(uint64_t, uint64_t, void, void, __n128))(a1 + 4344);
        if (v19)
        {
          v19(a1, a2, *(void *)(a1 + 4352), v5[4], v12);
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Signal WiFi critical state - %d", v5[4])
          }
        }
        *(CFAbsoluteTime *)(a1 + 8584) = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)(a1 + 8601) = *(_DWORD *)v5;
        *(unsigned char *)(a1 + 8605) = v5[4];
        dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 8592), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        *(unsigned char *)(v2 + 1200) = 0;
      }
      else if (!*(unsigned char *)(v2 + 1200))
      {
        double v16 = 4.0 - v14;
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%d secs remain for signaling WiFi critical state. Waiting...", (int)v16);
        }
        int v17 = *(NSObject **)(a1 + 8592);
        dispatch_time_t v18 = dispatch_time(0, (uint64_t)(v16 * 1000000000.0));
        dispatch_source_set_timer(v17, v18, 0xFFFFFFFFFFFFFFFFLL, 0);
        *(unsigned char *)(v2 + 1200) = 1;
      }
    }
  }
}

void sub_1001017D8(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Fault Notification com.apple.siri.connection.timeout", "__WiFiDeviceManagerHandleSiriTimedOutNotification")];
  }
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(a2 + 240);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100151338;
    block[3] = &unk_10023EAF8;
    void block[4] = a2;
    dispatch_async(v4, block);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager." : @"__WiFiDeviceManagerHandleSiriTimedOutNotification"];
    }
  }
}

void sub_1001018F0(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: Fault Notification com.apple.apsd.connection-failure-notification", @"__WiFiDeviceManagerHandleApsdTimedOutNotification"];
  }
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(a2 + 240);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100151480;
    block[3] = &unk_10023EAF8;
    void block[4] = a2;
    dispatch_async(v4, block);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null manager.", "__WiFiDeviceManagerHandleApsdTimedOutNotification"];
    }
  }
}

void sub_100101A08(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: Fault Notification com.apple.airplay.connection.stalled" args:("__WiFiDeviceManagerHandleAirplayConnectionStallNotification", 0x0)];
  }
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(a2 + 240);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001515C8;
    block[3] = &unk_10023EAF8;
    void block[4] = a2;
    dispatch_async(v4, block);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager." arguments:("__WiFiDeviceManagerHandleAirplayConnectionStallNotification", 0)];
    }
  }
}

void sub_100101B20(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: Fault Notification com.apple.airplay.bufferedaudiounderrun", "__WiFiDeviceManagerHandleAirplayBufferedAudioUnderrunNotification"];
  }
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(a2 + 240);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100151710;
    block[3] = &unk_10023EAF8;
    void block[4] = a2;
    dispatch_async(v4, block);
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: null manager.", "__WiFiDeviceManagerHandleAirplayBufferedAudioUnderrunNotification"];
    }
  }
}

void sub_100101C38(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: Fault Notification com.apple.airplay.realTimeAudioUnderrun", @"__WiFiDeviceManagerHandleAirplayRealtimeAudioUnderrunNotification"];
  }
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(a2 + 240);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10015184C;
    block[3] = &unk_10023EAF8;
    void block[4] = a2;
    dispatch_async(v4, block);
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: null manager.", "__WiFiDeviceManagerHandleAirplayRealtimeAudioUnderrunNotification"];
    }
  }
}

void sub_100101D50(const void *a1)
{
  if (&_MRMediaRemoteGetNowPlayingApplicationPlaybackState)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s", "__WiFiDeviceManagerRemoveMediaPlaybackStateObserver")
    }
    MRMediaRemoteUnregisterForNowPlayingNotifications();
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFStringRef v4 = (const __CFString *)kMRMediaRemoteNowPlayingApplicationIsPlayingDidChangeNotification;
    CFNotificationCenterRemoveObserver(LocalCenter, a1, v4, 0);
  }
}

void sub_100101DF0(uint64_t a1, const void *a2)
{
  if (*(_DWORD *)(a1 + 5424))
  {
    if (sub_1001116F0(a1))
    {
      CFStringRef v4 = sub_1001195F0(a1, 2);
      if (v4)
      {
        unsigned __int8 v5 = v4;
        if (sub_100119218(a1, a2, v4, 0, 0))
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3, @"%s: Failed remove AWDL network", @"__WiFideviceManagerTeardownAllAwdlSession"];
          }
        }
        CFRelease(v5);
      }
    }
    if (sub_1001116C8(a1))
    {
      int v7 = sub_1001195F0(a1, 1);
      if (v7)
      {
        uint64_t v8 = v7;
        if (sub_100119218(a1, a2, v7, 0, 0))
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"%s: Failed remove AWDL network" : @"__WiFideviceManagerTeardownAllAwdlSession"];
          }
        }
        CFRelease(v8);
      }
    }
    *(_DWORD *)(a1 + 5424) = 0;
  }
}

void sub_100101F2C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 9008);
    if (v2)
    {
      dispatch_source_cancel(v2);
      dispatch_release(*(dispatch_object_t *)(a1 + 9008));
      *(void *)(a1 + 9008) = 0;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: kernel event monitor stopped" : @"__WiFiDeviceManagerTeardownKernelEventMonitor"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: kernel event monitor not initialized.", @"__WiFiDeviceManagerTeardownKernelEventMonitor"];
      }
    }
  }
}

void sub_100101FEC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: %@", "WiFiDeviceManagerSetIDSSyncEngineRef", sub_100016E20(*(void *)(a1 + 64)) message];
      }
      *(void *)(a1 + 6568) = a2;
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null ids sync ref", "WiFiDeviceManagerSetIDSSyncEngineRef"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager", @"WiFiDeviceManagerSetIDSSyncEngineRef"];
    }
  }
}

void sub_1001020F0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 3305))
  {
    *(unsigned char *)(a1 + 3305) = 1;
    if (*(void *)(a1 + 5408))
    {
      uint64_t v3 = (uint64_t)[*(id *)(a1 + 5408) requestPowerResource:0 withDetails:0];
      if (!v3) {
        return;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 192) = 0;
      if (_os_feature_enabled_impl())
      {
        sub_10001FD64(a1, 15);
      }
      else
      {
        [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:15 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
        sub_1001028E4(a1, 2, (uint64_t)"WiFiDeviceManagerEnable");
      }
      uint64_t v3 = 4294963365;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: WiFiBatteryMgmt : Requested resource but none available. Will not autojoin. Nothing to do here. %d", "WiFiDeviceManagerEnable", v3];
    }
  }
}

void sub_100102220(uint64_t a1, uint64_t a2)
{
}

void sub_10010222C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 3305))
  {
    *(unsigned char *)(a1 + 3305) = 0;
    sub_100102284();
    if (*(void *)(a1 + 5408))
    {
      sub_100102708(a1);
    }
  }
}

void sub_100102284(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 3280))
  {
    if ((_os_feature_enabled_impl() & 1) == 0) {
      return;
    }
    goto LABEL_20;
  }
  uint64_t v2 = *(const void **)(a1 + 1112);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 1112) = 0;
  }
  sub_100103488(a1, 0);
  sub_10006DB70(*(void *)(a1 + 64));
  int v3 = *(_DWORD *)(a1 + 3280);
  if ((v3 - 16) <= 4)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: in \"%@\" state, aborting", "WiFiDeviceManagerAbort", sub_100024BE8(*(_DWORD *)(a1 + 3280)) message];
    }
    sub_1000FB0D0(a1, 0);
    *(unsigned char *)(a1 + 7008) = 0;
    int v3 = *(_DWORD *)(a1 + 3280);
  }
  if ((v3 - 12) >= 0xFFFFFFF6)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"Scanning in progress, next system wake should not defer AJ scan"];
    }
    *(void *)(a1 + 7304) = 0;
  }
  sub_10006B4B8(*(void *)(a1 + 64), *(void *)(a1 + 3312));
  *(void *)(a1 + 3312) = 0;
  if (*(_DWORD *)(a1 + 3280) == 1) {
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 312), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  *(_DWORD *)(a1 + 3280) = 0;
  uint64_t v6 = *(void *)(a1 + 224);
  if (!v6)
  {
LABEL_20:
    if (_os_feature_enabled_impl())
    {
      uint64_t v8 = *(void **)(a1 + 8824);
      NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
      CFStringRef v23 = @"WiFiDeviceManagerAbort()";
      [v8 cancelAutoJoinWithUUID:0 error:+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 53, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1)) reply:0];
      uint64_t v9 = *(void *)(a1 + 8928);
      if (v9)
      {
        (*(void (**)(uint64_t, NSError *, void, void))(v9 + 16))(v9, +[NSError errorWithDomain:NSPOSIXErrorDomain code:89 userInfo:0], 0, 0);
        _Block_release(*(const void **)(a1 + 8928));
        *(void *)(a1 + 8928) = 0;

        *(void *)(a1 + 8936) = 0;
      }
      uint64_t v10 = *(void *)(a1 + 8944);
      if (v10)
      {
        (*(void (**)(uint64_t, NSError *, void, void))(v10 + 16))(v10, +[NSError errorWithDomain:NSPOSIXErrorDomain code:89 userInfo:0], 0, 0);
        _Block_release(*(const void **)(a1 + 8944));
        *(void *)(a1 + 8944) = 0;

        *(void *)(a1 + 8952) = 0;
      }
      uint64_t v11 = *(void *)(a1 + 8840);
      if (v11)
      {
        (*(void (**)(uint64_t, NSError *))(v11 + 16))(v11, +[NSError errorWithDomain:NSPOSIXErrorDomain code:89 userInfo:0]);
        _Block_release(*(const void **)(a1 + 8840));
        *(void *)(a1 + 8840) = 0;
        __n128 v12 = *(const void **)(a1 + 8832);
        if (v12)
        {
          CFRelease(v12);
          *(void *)(a1 + 8832) = 0;
        }
      }
      uint64_t v13 = *(void *)(a1 + 8864);
      if (v13)
      {
        (*(void (**)(uint64_t, NSError *, void))(v13 + 16))(v13, +[NSError errorWithDomain:NSPOSIXErrorDomain code:89 userInfo:0], 0);
        _Block_release(*(const void **)(a1 + 8864));
        *(void *)(a1 + 8864) = 0;
      }
      uint64_t v14 = *(void *)(a1 + 8856);
      if (v14)
      {
        (*(void (**)(uint64_t, NSError *))(v14 + 16))(v14, +[NSError errorWithDomain:NSPOSIXErrorDomain code:89 userInfo:0]);
        _Block_release(*(const void **)(a1 + 8856));
        *(void *)(a1 + 8856) = 0;

        *(void *)(a1 + 8848) = 0;
      }
    }
    goto LABEL_32;
  }
  if (sub_1000DAD20(v6))
  {
    if (sub_1000DAD28(*(void *)(a1 + 224)) != 2)
    {
      int v7 = *(const void **)(a1 + 224);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(a1 + 224) = 0;
      }
      goto LABEL_20;
    }
    int v17 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v18 = *(void *)(a1 + 224);
      uint64_t v20 = sub_1000DAD20(v18);
      [v17 WFLog:3, "%s: not releasing pending notification %@ (type=%d,inputType=%d)", "WiFiDeviceManagerAbort", v18, v20, sub_1000DAD28(*(void *)(a1 + 224)) message];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: not releasing ask to join notification %@", "WiFiDeviceManagerAbort", *(void *)(a1 + 224), v19, v21 message];
    }
  }
LABEL_32:
  sub_1001409B8(a1, @"autoJoinAborted", 0, 0);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Aborted current auto-join session."];
  }
}

void sub_100102708(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null manager.", @"__WiFiDeviceManagerReleasePowerResource"];
    }
    goto LABEL_13;
  }
  if (!*(void *)(a1 + 5408))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Power modules not attached.", @"__WiFiDeviceManagerReleasePowerResource"];
    }
    goto LABEL_13;
  }
  uint64_t v3 = *(void *)(a1 + 64);
  CFStringRef v4 = (const void *)sub_100017C48(v3);
  unsigned __int8 v5 = sub_10001C1B4(v3, v4);
  if (!v5)
  {
    uint64_t v8 = *(void *)(a1 + 64);
    uint64_t v9 = (const void *)sub_10005FC0C(v8);
    if (sub_10006F1D0(v8, v9, 0))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: Power module attached - AWDL still enabled." arguments:__WiFiDeviceManagerReleasePowerResource];
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 3305))
      {
        [*(id *)(a1 + 5408) releasePowerResources];
        goto LABEL_14;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Power module attached - autojoin still enabled.", "__WiFiDeviceManagerReleasePowerResource")];
      }
    }
LABEL_13:
    goto LABEL_14;
  }
  uint64_t v6 = v5;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Power module attached - still connected to %@.", "__WiFiDeviceManagerReleasePowerResource", sub_10001A43C(v6) message];
  }
  CFRelease(v6);
LABEL_14:
}

void sub_1001028D4(uint64_t a1)
{
}

void sub_1001028E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100102948(a1, a2, a3);
  sub_100102B58(a1, 1, a3);
  if (!*(_DWORD *)(a1 + 3280))
  {
    sub_100103488(a1, 0);
  }
}

void sub_100102948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s called by %s" :"__WiFiDeviceManagerResetRetryIntervals" :a3];
  }
  if (a1)
  {
    *(_DWORD *)(a1 + 5632) = a2;
    if (a2 == 2) {
      *(void *)(a1 + 3296) = 0;
    }
    double valuePtr = NAN;
    CFArrayRef v7 = *(const __CFArray **)(a1 + 320);
    if (v7
      && (Count = CFArrayGetCount(v7), (CFIndex v9 = *(void *)(a1 + 328)) != 0)
      && a2 != 2
      && (double v10 = *(double *)(a1 + 336), v10 != 0.0)
      && (CFIndex v11 = Count) != 0)
    {
      if (v9 >= Count)
      {
        CFIndex v9 = Count - 1;
        *(void *)(a1 + 328) = Count - 1;
      }
      unsigned int v12 = 1;
      if (a2 == 1 && v10 >= 5.0)
      {
        if (*(void *)(a1 + 392)) {
          unsigned int v12 = 2;
        }
        else {
          *(void *)(a1 + 336) = 0x4014000000000000;
        }
      }
      if (v9 >= 1)
      {
        do
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 320), v9);
          if (ValueAtIndex)
          {
            CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, &valuePtr);
            if (valuePtr > 0.0 && valuePtr <= *(double *)(a1 + 336)) {
              break;
            }
          }
          uint64_t v14 = *(void *)(a1 + 328);
          CFIndex v9 = v14 - 1;
          *(void *)(a1 + 328) = v14 - 1;
        }
        while (v14 > 1);
      }
      if (*(_DWORD *)(a1 + 348) < v12) {
        *(_DWORD *)(a1 + 348) = v12;
      }
      if (*(_DWORD *)(a1 + 6804) && !sub_100072C58(*(void *)(a1 + 64)) && *(double *)(a1 + 6872) == 0.0) {
        *(void *)(a1 + 6872) = *(void *)(a1 + 6864);
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: resetType=%d, retryIndex=%ld, quickRetry=%d, lastInterval=%f, intervals=(%ld) autoHSInterval=(%f)", "__WiFiDeviceManagerResetRetryIntervals", a2, *(void *)(a1 + 328), *(unsigned int *)(a1 + 348), *(void *)(a1 + 336), v11, *(void *)(a1 + 6872));
      }
    }
    else
    {
      *(_DWORD *)(a1 + 348) = 0;
      *(void *)(a1 + 328) = 0;
      *(void *)(a1 + 336) = 0;
    }
    int v16 = *(_DWORD *)(a1 + 3280);
    if (v16 == 1)
    {
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 312), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      int v16 = 0;
    }
    *(_DWORD *)(a1 + 3280) = v16;
  }
}

void sub_100102B58(uint64_t a1, int a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s called by %s", @"__WiFiDeviceManagerAutoAssociate", a3];
  }
  if (_os_feature_enabled_impl())
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s not allowed with Unified Auto-Join", "__WiFiDeviceManagerAutoAssociate"];
    }
    uint64_t v8 = v7;
LABEL_7:
    return;
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1104));
  sub_1001409B8(a1, @"kWiFiAutoJoinStatusBegan", 0, 0);
  if (CFAbsoluteTimeGetCurrent() > *(double *)(a1 + 6824))
  {
    SCDynamicStoreContext context = dispatch_get_context(*(dispatch_object_t *)(a1 + 6816));
    sub_1000FAB30((uint64_t)context);
  }
  if (!*(unsigned char *)(a1 + 3305))
  {
    int v17 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v18 = "Auto association attempt canceled because auto join is disabled.";
LABEL_26:
      [v17 WFLog:3 message:v18];
    }
LABEL_27:
    uint64_t v19 = v16;
LABEL_28:
    uint64_t v20 = off_10023FD38;
LABEL_35:
    NSErrorUserInfoKey v22 = *v20;
    sub_1001409B8(a1, v22, 0, 0);
    return;
  }
  double v10 = (unsigned char *)(a1 + 5504);
  if (!*(unsigned char *)(a1 + 6280))
  {
    int v11 = *v10;
    if (!v11)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Auto association attempt canceled because user auto join is disabled."];
      }
      uint64_t v19 = v12;
      goto LABEL_28;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"User auto join preference bypassed because device is in priority-link setup phase/carplay"];
    }
  }
  if (*(_DWORD *)(a1 + 20) != 1)
  {
    int v17 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v18 = "Auto association attempt canceled because device is not powered.";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  if (*(unsigned char *)(a1 + 248))
  {
    uint64_t v14 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFDictionaryRef v15 = "Auto association attempt canceled because WiFi tethering is enabled.";
LABEL_32:
      [v14 WFLog:3 message:v15, v42, v43, v44, v45];
      goto LABEL_33;
    }
    goto LABEL_33;
  }
  if (*(unsigned char *)(a1 + 249))
  {
    uint64_t v14 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFDictionaryRef v15 = "Auto association attempt canceled because WiFi Direct Mode is enabled.";
      goto LABEL_32;
    }
LABEL_33:
    uint64_t v21 = v13;
LABEL_34:
    uint64_t v20 = off_10023FD40;
    goto LABEL_35;
  }
  if (*(_DWORD *)(a1 + 3280))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Auto association attempt canceled because auto join state is %@.", sub_100024BE8(*(_DWORD *)(a1 + 3280)) message];
    }
    if (*(_DWORD *)(a1 + 3280) == 2)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Setting forced Allband scan flag"];
      }
      *(unsigned char *)(a1 + 3304) = 1;
    }
    return;
  }
  if ((*(unsigned char *)(a1 + 5219)
     || sub_100112724(a1)
     || *(_DWORD *)(a1 + 5344)
     || *(unsigned __int8 *)(a1 + 5361) != -*(unsigned char *)(a1 + 5360))
    && (!*(unsigned char *)(a1 + 7056) || !sub_10010EC7C(a1, 1)))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Auto association attempt canceled because MIS is enabled. MIS client count: wifi=%d bt=%d misBlockScan=%d MIS discovery state = %d", *(unsigned __int8 *)(a1 + 5360), *(unsigned __int8 *)(a1 + 5361), *(unsigned __int8 *)(a1 + 5328), *(unsigned __int8 *)(a1 + 5221));
    }
    goto LABEL_33;
  }
  if ((*(_DWORD *)(a1 + 5396) == 102 && (*(unsigned char *)(a1 + 5392) & 1) != 0 || *(unsigned char *)(a1 + 50))
    && *(_DWORD *)(a1 + 5520) != 1
    && !*(unsigned char *)(a1 + 37))
  {
    uint64_t v14 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_33;
    }
    CFDictionaryRef v15 = "Auto association attempt canceled because BT SCO is enabled";
    goto LABEL_32;
  }
  if (sub_100112644(a1) && sub_1001116C8(a1))
  {
    uint64_t v14 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_33;
    }
    CFDictionaryRef v15 = "Auto association attempt canceled because hosted AWDL session is active";
    goto LABEL_32;
  }
  if (sub_10010883C(a1))
  {
    uint64_t v14 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_33;
    }
    CFDictionaryRef v15 = "Auto-join deferral is active, will not continue auto-join";
    goto LABEL_32;
  }
  if (*(unsigned char *)(a1 + 6896) && *v10)
  {
    uint64_t v14 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_33;
    }
    CFDictionaryRef v15 = "Associated in Auto Hotspot Mode and waiting for IP";
    goto LABEL_32;
  }
  uint64_t v25 = *(void *)(a1 + 64);
  uint64_t v26 = (const void *)sub_100017C48(v25);
  char v27 = sub_10001C1B4(v25, v26);
  if (v27)
  {
    CFArrayRef v28 = v27;
    if (!*(unsigned char *)(a1 + 6896) || *(_DWORD *)(a1 + 176) == 1 && !*(void *)(a1 + 6976))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Already connected to %@.", "__WiFiDeviceManagerAutoAssociate", sub_10001A43C(v28) message];
      }
      sub_1001409B8(a1, @"autoJoinAlreadyAssoicated", v28, 0);
      CFRelease(v28);
      return;
    }
    CFRelease(v27);
  }
  int v29 = *(_DWORD *)(a1 + 5416);
  if (!v29)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Auto association attempt canceled because thermal index (%d) is below disabled threshold (%d).", *(unsigned int *)(a1 + 5416), 0);
    }
    uint64_t v21 = v30;
    goto LABEL_34;
  }
  CFArrayRef v31 = *(void **)(a1 + 5408);
  if (v31 && ([v31 isPowerResourceAvailable:0] & 1) == 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:" WiFiBatteryMgmt : Auto association attempt canceled because Battery resource is not available."];
    }
    if (!objc_msgSend(objc_msgSend(*(id *)(a1 + 5408), "pendingRequests"), "count")) {
      sub_1001409B8(a1, @"autoJoinNotPermitted", 0, 0);
    }
    uint64_t v8 = v30;
    goto LABEL_7;
  }
  if (!*(unsigned char *)(a1 + 3488) && *(_DWORD *)(a1 + 3492) == -528336895)
  {
    uint64_t v14 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_33;
    }
    CFDictionaryRef v15 = "Auto association attempt canceled because of Driver Watchdog";
    goto LABEL_32;
  }
  if (qword_10027DD68)
  {
    uint64_t v34 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@+} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: starting auto-join", "__WiFiDeviceManagerAutoAssociate"]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      CFIndex v47 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v34 UTF8String]] UTF8String];
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
  }
  [*(id *)(a1 + 6648) removeExpiredDenyListedState:3];
  sub_100105EEC(a1);
  if (*(unsigned char *)(a1 + 24))
  {
    int v36 = sub_100063EA8(*(void *)(a1 + 64));
    if (a2)
    {
      if (v36) {
        *(_DWORD *)(a1 + 28) = 0;
      }
    }
  }
  if (*(unsigned char *)(a1 + 104) || !sub_10012ECE8(a1))
  {
    [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinUpdatedWithState:1 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
    sub_1000FB1B0(a1);
  }
  else
  {
    if (qword_10027DD68)
    {
      CFRange v39 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: auto association attempt cancelled because scan throttle is exceeded.", "__WiFiDeviceManagerAutoAssociate"]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        CFRange v40 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v39 UTF8String]] UTF8String];
        *(_DWORD *)long long buf = 136446210;
        CFIndex v47 = v40;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%{public}s", buf, 0xCu);
      }
    }
    *(_DWORD *)(a1 + 3280) = sub_100003818(a1);
    int v41 = *(_DWORD *)(a1 + 348);
    if (v41) {
      *(_DWORD *)(a1 + 348) = v41 - 1;
    }
  }
}

void sub_100103488(uint64_t a1, unsigned int a2)
{
  if (byte_10027DDA9)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:@"%s: Lockdown Mode is enabled, ignoring SetATJOneShot %ld" message:3, @"__WiFiDeviceManagerSetATJOneShot", a2];
    }
  }
  else if (*(unsigned __int8 *)(a1 + 104) != a2)
  {
    if (qword_10027DD68)
    {
      uint64_t v6 = "Enabling";
      if (!a2) {
        uint64_t v6 = "Disabling";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s one-shot ATJ");
    }
    *(unsigned char *)(a1 + 104) = a2;
    if (a2)
    {
      *(_DWORD *)(a1 + 192) = 1;
      if (_os_feature_enabled_impl())
      {
        sub_10001FD64(a1, 0xFuLL);
      }
      else
      {
        [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:15 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
        sub_1001028E4(a1, 2, (uint64_t)"__WiFiDeviceManagerSetATJOneShot");
      }
    }
  }
}

uint64_t sub_100103634(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  uint64_t v2 = (const void *)sub_100017C48(v1);

  return sub_100017D28(v1, v2, 512, 0, (uint64_t)kCFBooleanTrue);
}

void sub_1001036A4(uint64_t a1)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: reseting userCancelled networks" args:("__WiFiDeviceManagerResetUserCancelledNetworks")];
    }
    uint64_t v3 = *(__CFSet **)(a1 + 3504);
    CFSetRemoveAllValues(v3);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is nil", @"__WiFiDeviceManagerResetUserCancelledNetworks"];
    }
  }
}

uint64_t sub_100103764(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 3888) = a2;
  *(void *)(result + 3896) = a3;
  return result;
}

uint64_t sub_100103770(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4056) = a2;
  *(void *)(result + 4064) = a3;
  return result;
}

uint64_t sub_10010377C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4712) = a2;
  *(void *)(result + 4720) = a3;
  return result;
}

uint64_t sub_100103788(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 3872) = a2;
  *(void *)(result + 3880) = a3;
  return result;
}

uint64_t sub_100103794(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 3904) = a2;
  *(void *)(result + 3912) = a3;
  return result;
}

uint64_t sub_1001037A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 3920) = a2;
  *(void *)(result + 3928) = a3;
  return result;
}

uint64_t sub_1001037AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 3936) = a2;
  *(void *)(result + 3944) = a3;
  return result;
}

uint64_t sub_1001037B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 3952) = a2;
  *(void *)(result + 3968) = a3;
  return result;
}

uint64_t sub_1001037C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 3976) = a2;
  *(void *)(result + 3984) = a3;
  return result;
}

uint64_t sub_1001037D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 3992) = a2;
  *(void *)(result + 4000) = a3;
  return result;
}

uint64_t sub_1001037DC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4024) = a2;
  *(void *)(result + 4032) = a3;
  return result;
}

uint64_t sub_1001037E8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4040) = a2;
  *(void *)(result + 4048) = a3;
  return result;
}

uint64_t sub_1001037F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4072) = a2;
  *(void *)(result + 4080) = a3;
  return result;
}

uint64_t sub_100103800(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4088) = a2;
  *(void *)(result + 4096) = a3;
  return result;
}

uint64_t sub_10010380C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4104) = a2;
  *(void *)(result + 4112) = a3;
  return result;
}

uint64_t sub_100103818(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4120) = a2;
  *(void *)(result + 4128) = a3;
  return result;
}

uint64_t sub_100103824(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4136) = a2;
  *(void *)(result + 4144) = a3;
  return result;
}

uint64_t sub_100103830(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4152) = a2;
  *(void *)(result + 4160) = a3;
  return result;
}

uint64_t sub_10010383C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4168) = a2;
  *(void *)(result + 4176) = a3;
  return result;
}

uint64_t sub_100103848(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4184) = a2;
  *(void *)(result + 4192) = a3;
  return result;
}

uint64_t sub_100103854(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4200) = a2;
  *(void *)(result + 4208) = a3;
  return result;
}

uint64_t sub_100103860(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4008) = a2;
  *(void *)(result + 4016) = a3;
  return result;
}

uint64_t sub_10010386C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4216) = a2;
  *(void *)(result + 4224) = a3;
  return result;
}

uint64_t sub_100103878(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4232) = a2;
  *(void *)(result + 4240) = a3;
  return result;
}

uint64_t sub_100103884(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4248) = a2;
  *(void *)(result + 4256) = a3;
  return result;
}

uint64_t sub_100103890(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4264) = a2;
  *(void *)(result + 4272) = a3;
  return result;
}

uint64_t sub_10010389C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4280) = a2;
  *(void *)(result + 4288) = a3;
  return result;
}

uint64_t sub_1001038A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4296) = a2;
  *(void *)(result + 4304) = a3;
  return result;
}

uint64_t sub_1001038B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4328) = a2;
  *(void *)(result + 4336) = a3;
  return result;
}

uint64_t sub_1001038C0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4344) = a2;
  *(void *)(result + 4352) = a3;
  return result;
}

uint64_t sub_1001038CC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4360) = a2;
  *(void *)(result + 4368) = a3;
  return result;
}

uint64_t sub_1001038D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4376) = a2;
  *(void *)(result + 4384) = a3;
  return result;
}

uint64_t sub_1001038E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4600) = a2;
  *(void *)(result + 4608) = a3;
  return result;
}

uint64_t sub_1001038F0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4392) = a2;
  *(void *)(result + 4400) = a3;
  return result;
}

uint64_t sub_1001038FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4616) = a2;
  *(void *)(result + 4624) = a3;
  return result;
}

uint64_t sub_100103908(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4648) = a2;
  *(void *)(result + 4656) = a3;
  return result;
}

uint64_t sub_100103914(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4408) = a2;
  *(void *)(result + 4416) = a3;
  return result;
}

uint64_t sub_100103920(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4424) = a2;
  *(void *)(result + 4432) = a3;
  return result;
}

uint64_t sub_10010392C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4520) = a2;
  *(void *)(result + 4528) = a3;
  return result;
}

uint64_t sub_100103938(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4536) = a2;
  *(void *)(result + 4544) = a3;
  return result;
}

uint64_t sub_100103944(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4584) = a2;
  *(void *)(result + 4592) = a3;
  return result;
}

uint64_t sub_100103950(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4632) = a2;
  *(void *)(result + 4640) = a3;
  return result;
}

uint64_t sub_10010395C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4664) = a2;
  *(void *)(result + 4672) = a3;
  return result;
}

uint64_t sub_100103968(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4680) = a2;
  *(void *)(result + 4688) = a3;
  return result;
}

uint64_t sub_100103974(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4728) = a2;
  *(void *)(result + 4736) = a3;
  return result;
}

void sub_100103980(uint64_t a1, const void *a2)
{
  id v5 = sub_10000AD1C((uint64_t)a2);
  id v6 = sub_100103A84(a1, 0, 0, 0, 5);
  [*(id *)(a1 + 6648) setNetworkDenyListInfo:v6 forScanResult:v5];
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = (const void *)sub_100017C48(v7);
  CFIndex v9 = sub_10001C1B4(v7, v8);
  if (v9)
  {
    double v10 = v9;
    if (CFEqual(a2, v9) && [*(id *)(a1 + 6648) enabled])
    {
      int v11 = (const void *)sub_100017C48(*(void *)(a1 + 64));
      sub_1000FEA7C(a1, v11, 1002, "WiFiDeviceManagerTemporarilyDisableNetwork", 5764);
    }

    CFRelease(v10);
  }
  else
  {
  }
}

id sub_100103A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    id v11 = objc_alloc_init((Class)CWFNetworkDenyListInfo);
    [v11 setReason:a2];
    [v11 setReasonData:a3];
    [v11 setBSSID:a4];
    [v11 setState:a5];
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: manager is NULL!", "__WiFiDeviceManagerCreateDenyListInfo"];
    }
    id v11 = 0;
  }
  return v11;
}

uint64_t sub_100103B64(uint64_t a1, const __CFArray *a2)
{
  v126 = (unsigned __int8 *)(a1 + 5216);
  unsigned int v141 = 0;
  int v4 = _os_feature_enabled_impl();
  if (a1 && v4)
  {
    if (a2)
    {
      id v6 = +[NSMutableSet set];
      if (CFArrayGetCount(a2) >= 1)
      {
        CFIndex v7 = 0;
        do
        {
          CFNumberRef ValueAtIndex = (CFDictionaryRef *)CFArrayGetValueAtIndex(a2, v7);
          CFIndex v9 = sub_10001CECC(ValueAtIndex);
          if (v9)
          {
            double v10 = v9;
            [v6 addObject:v9];
          }
          ++v7;
        }
        while (v7 < CFArrayGetCount(a2));
      }
    }
    else
    {
      id v6 = 0;
    }
    [*(id *)(a1 + 8824) setKnownNetworks:v6];
  }
  id v11 = (const void *)sub_100017C48(*(void *)(a1 + 64));
  unsigned int v12 = sub_100018FA8(a1, v11, 1);
  sub_1000130BC(a1);
  CFAllocatorRef v13 = kCFAllocatorDefault;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableArrayRef v15 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableSetRef v16 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  theSet = v16;
  v130 = v15;
  if (Mutable) {
    BOOL v17 = v15 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17 || v16 == 0)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: failed to create array", "WiFiDeviceManagerSetNetworks")];
    }
    CFArrayRef v93 = 0;
    CFArrayRef v134 = 0;
    int v82 = 0;
    if (v12) {
      goto LABEL_205;
    }
    goto LABEL_206;
  }
  CFMutableArrayRef v19 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFArrayRef v20 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFArrayRef v134 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (v19) {
    BOOL v21 = v20 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (v21)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: failed to create hs20 array" arguments:&"WiFiDeviceManagerSetNetworks"];
    }
    CFArrayRef theArray = 0;
    goto LABEL_268;
  }
  CFArrayRef theArray = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (theArray)
  {
    NSErrorUserInfoKey v22 = sub_10001A43C(v12);
    uint64_t v23 = 1;
    CFTypeRef cf = v12;
    if (v22)
    {
      uint64_t v24 = *(void *)(a1 + 6656);
      if (v24)
      {
        if (CFEqual(v22, *(CFTypeRef *)(a1 + 6656)))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: '%@' removed via iCloud, shouldDisassociate = FALSE", "WiFiDeviceManagerSetNetworks", v24 message];
          }
          uint64_t v23 = 0;
          unsigned int v12 = (void *)cf;
        }
        else
        {
          uint64_t v23 = 1;
        }
      }
    }
    uint64_t v132 = Mutable;
    if (v12 && !sub_100105200((void *)a1, v12) && !sub_1001052A4(a1, v12))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: '%@' not previously known, shouldDisassociate = FALSE", "WiFiDeviceManagerSetNetworks", sub_10001A43C(cf) message];
      }
      CFArrayRef v28 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        BOOL v29 = sub_10001BB2C((BOOL)cf);
        uint64_t v30 = "yes";
        if (v29) {
          CFArrayRef v31 = "yes";
        }
        else {
          CFArrayRef v31 = "no";
        }
        if (*(_DWORD *)(a1 + 5520) != 1) {
          uint64_t v30 = "no";
        }
        [v28 WFLog:3 message:@"%s: Current network is HS20 ? %s, Got CarPlay in-car ? %s", @"WiFiDeviceManagerSetNetworks", v31, v30];
      }
      unsigned int v12 = (void *)cf;
      if (!sub_10001BB2C((BOOL)cf) || *(_DWORD *)(a1 + 5520) != 1) {
        uint64_t v23 = 0;
      }
    }
    CFIndex v139 = v19;
    CFArrayRef v140 = v20;
    CFArrayRef v138 = a2;
    if (a2)
    {
      CFIndex Count = CFArrayGetCount(a2);
      if (Count >= 1)
      {
        CFIndex v33 = Count;
        CFIndex v34 = 0;
        int v35 = 0;
        while (1)
        {
          int v36 = (void *)CFArrayGetValueAtIndex(a2, v34);
          if (!v36) {
            goto LABEL_95;
          }
          int v37 = v36;
          CFRange v38 = *(const void **)(a1 + 3512);
          if (v38 && CFEqual(v38, v37)) {
            int v35 = 1;
          }
          if (v23)
          {
            if (!v12)
            {
              uint64_t v23 = 0;
              goto LABEL_81;
            }
            uint64_t v23 = CFEqual(v12, v37) ? 0 : v23;
          }
          else if (!v12)
          {
            goto LABEL_81;
          }
          if (sub_10001BB2C((BOOL)v12) && sub_10001BB2C((BOOL)v37)) {
            break;
          }
LABEL_74:
          if (sub_1000C7420((uint64_t)v12))
          {
            CFStringRef v44 = sub_10001F928(v12);
            CFStringRef v45 = sub_10001F928(v37);
            if (CFEqual(v44, v45))
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: connected to the same ambiguous SSID network %@, shouldDisassociate = FALSE", "WiFiDeviceManagerSetNetworks", sub_10001A43C(v37) message];
              }
              uint64_t v23 = 0;
            }
          }
          if (CFEqual(v12, v37)) {
            sub_100105340(a1, v37);
          }
LABEL_81:
          if (sub_1000C6710((BOOL)v37))
          {
            if (sub_10006C140(*(void *)(a1 + 64)))
            {
              CFIndex v47 = CFStringCreateMutable(kCFAllocatorDefault, 0);
              if (!v47)
              {
                int v82 = 0;
                CFMutableArrayRef v19 = v139;
                CFMutableArrayRef Mutable = v132;
                goto LABEL_200;
              }
              uint64_t v48 = v47;
              uint64_t v49 = v23;
              sub_1000CC628((uint64_t)v37, v47);
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: Adding HS20 Account: %@", "WiFiDeviceManagerSetNetworks", v48 message];
              }
              CFRelease(v48);
              if (sub_10001EBB4((uint64_t)v37)) {
                CFDateRef v51 = v139;
              }
              else {
                CFDateRef v51 = v134;
              }
              goto LABEL_100;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:3, "%s: device does not support HS2.0. Will not program HS2.0 account", "WiFiDeviceManagerSetNetworks"];
            }
          }
          else
          {
            if (!sub_10001EBB4((uint64_t)v37))
            {
              uint64_t v49 = v23;
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: skipping disabled network %@", "WiFiDeviceManagerSetNetworks", sub_10001A43C(v37) message];
              }
              CFDateRef v51 = theArray;
LABEL_100:
              CFArrayAppendValue(v51, v37);
              goto LABEL_105;
            }
            if (sub_1000CE0B8((uint64_t)v37))
            {
              uint64_t v49 = v23;
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: %@ is disabled until first user join", "WiFiDeviceManagerSetNetworks", sub_10001A43C(v37) message];
              }
              goto LABEL_104;
            }
            if (sub_1000CE1A0((const __CFDictionary **)v37))
            {
              uint64_t v49 = v23;
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: skipping infrequently joined public network %@", "WiFiDeviceManagerSetNetworks", sub_10001A43C(v37) message];
              }
LABEL_104:
LABEL_105:
              a2 = v138;
              uint64_t v23 = v49;
              goto LABEL_106;
            }
            CFArrayAppendValue(v132, v37);
            if (CFSetContainsValue(*(CFSetRef *)(a1 + 3504), v37)) {
              CFSetAddValue(theSet, v37);
            }
            if (sub_10001EE48(v37)) {
              CFArrayAppendValue(v130, v37);
            }
          }
LABEL_95:
          a2 = v138;
LABEL_106:
          if (v33 == ++v34) {
            goto LABEL_113;
          }
        }
        uint64_t v39 = v23;
        CFDataRef v40 = sub_1000C6CA8((uint64_t)v37);
        CFDataRef v41 = sub_1000C6CA8((uint64_t)v12);
        CFDataRef v42 = v41;
        if (v41 && v40)
        {
          if (CFEqual(v41, v40))
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: connected to the same HS2.0 BSSID, shouldDisassociate = FALSE", "WiFiDeviceManagerSetNetworks")];
            }
            uint64_t v39 = 0;
            unsigned int v12 = (void *)cf;
          }
        }
        else if (!v41)
        {
LABEL_71:
          if (v40) {
            CFRelease(v40);
          }
          uint64_t v23 = v39;
          goto LABEL_74;
        }
        CFRelease(v42);
        goto LABEL_71;
      }
      int v35 = 0;
LABEL_113:
      if (*(void *)(a1 + 3512))
      {
        CFMutableArrayRef v19 = v139;
        uint64_t v55 = v132;
        if (v35)
        {
          uint64_t v58 = v130;
          CFAllocatorRef v13 = kCFAllocatorDefault;
        }
        else
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: previous network %@ forgotten/disabled.", "WiFiDeviceManagerSetNetworks", sub_10001A43C(*(const void **)(a1 + 3512)) message];
          }
          uint64_t v57 = *(const void **)(a1 + 3512);
          uint64_t v58 = v130;
          CFAllocatorRef v13 = kCFAllocatorDefault;
          if (v57)
          {
            CFRelease(v57);
            *(void *)(a1 + 3512) = 0;
          }
        }
LABEL_122:
        BOOL v59 = CFEqual(v55, *(CFTypeRef *)(a1 + 3528))
           && CFEqual(v58, *(CFTypeRef *)(a1 + 3536))
           && CFEqual(v19, *(CFTypeRef *)(a1 + 3624)) != 0;
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3528));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3536));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3624));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3632));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3328));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3640));
        long long v60 = *(__CFArray **)(a1 + 3528);
        v150.length = CFArrayGetCount(v55);
        long long v61 = v55;
        v150.location = 0;
        CFArrayAppendArray(v60, v55, v150);
        long long v62 = *(__CFArray **)(a1 + 3536);
        v151.length = CFArrayGetCount(v58);
        v151.location = 0;
        CFArrayAppendArray(v62, v58, v151);
        long long v63 = *(__CFArray **)(a1 + 3624);
        v152.length = CFArrayGetCount(v19);
        v152.location = 0;
        CFArrayAppendArray(v63, v19, v152);
        long long v64 = *(__CFArray **)(a1 + 3632);
        v153.length = CFArrayGetCount(v134);
        v153.location = 0;
        CFArrayAppendArray(v64, v134, v153);
        CFIndex v65 = CFArrayGetCount(v19);
        uint64_t v131 = v23;
        if (!v65) {
          goto LABEL_160;
        }
        uint64_t v66 = v65;
        LOWORD(valuePtr[0]) = 268;
        CFNumberRef value = CFNumberCreate(v13, kCFNumberSInt16Type, valuePtr);
        if (!value) {
          goto LABEL_160;
        }
        LOWORD(valuePtr[0]) = 3;
        CFNumberRef v128 = CFNumberCreate(v13, kCFNumberSInt16Type, valuePtr);
        if (!v128)
        {
          CFNumberRef v75 = value;
LABEL_159:
          CFRelease(v75);
          goto LABEL_160;
        }
        BOOL v127 = v59;
        LOWORD(valuePtr[0]) = 263;
        CFNumberRef v67 = CFNumberCreate(v13, kCFNumberSInt16Type, valuePtr);
        if (v67)
        {
          LOWORD(valuePtr[0]) = 264;
          CFNumberRef v68 = CFNumberCreate(v13, kCFNumberSInt16Type, valuePtr);
          if (v68)
          {
            LOWORD(valuePtr[0]) = 261;
            CFNumberRef v69 = CFNumberCreate(v13, kCFNumberSInt16Type, valuePtr);
            if (v69)
            {
              CFNumberRef v136 = v69;
              if (v66 >= 1)
              {
                for (CFIndex i = 0; i != v66; ++i)
                {
                  CFNumberRef v71 = CFArrayGetValueAtIndex(v19, i);
                  if (v71)
                  {
                    uint64_t v72 = (uint64_t)v71;
                    if (sub_10001E404((uint64_t)v71, @"DomainName"))
                    {
                      v146.length = CFArrayGetCount(v140);
                      v146.location = 0;
                      if (!CFArrayContainsValue(v140, v146, value)) {
                        CFArrayAppendValue(v140, value);
                      }
                    }
                    if (sub_10001E404(v72, @"NaiRealmName"))
                    {
                      v147.length = CFArrayGetCount(v140);
                      v147.location = 0;
                      if (!CFArrayContainsValue(v140, v147, v67)) {
                        CFArrayAppendValue(v140, v67);
                      }
                    }
                    if (sub_10001E404(v72, @"MCCandMNC"))
                    {
                      v148.length = CFArrayGetCount(v140);
                      v148.location = 0;
                      if (!CFArrayContainsValue(v140, v148, v68)) {
                        CFArrayAppendValue(v140, v68);
                      }
                    }
                    if (sub_10001E404(v72, @"RoamingConsortiumOIs"))
                    {
                      v149.length = CFArrayGetCount(v140);
                      v149.location = 0;
                      if (!CFArrayContainsValue(v140, v149, v136)) {
                        CFArrayAppendValue(v140, v136);
                      }
                    }
                  }
                  CFMutableArrayRef v19 = v139;
                }
              }
              CFArrayRef v20 = v140;
              if (CFArrayGetCount(v140))
              {
                CFNumberRef v73 = v128;
                CFArrayAppendValue(v140, v128);
                long long v61 = v132;
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: created queries %@", "__WiFiDeviceManagerPrepareHS20Queries", v140 message];
                }
              }
              else
              {
                long long v61 = v132;
                CFNumberRef v73 = v128;
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:3 message:@"%s: Nothing to query about" args:v125, @"__WiFiDeviceManagerPrepareHS20Queries"];
                }
              }
              CFNumberRef v75 = v136;
LABEL_154:
              CFRelease(value);
              CFRelease(v73);
              if (v67) {
                CFRelease(v67);
              }
              if (v68) {
                CFRelease(v68);
              }
              BOOL v59 = v127;
              if (v75) {
                goto LABEL_159;
              }
LABEL_160:
              int v76 = *(__CFArray **)(a1 + 3328);
              v154.length = CFArrayGetCount(v20);
              v154.location = 0;
              CFArrayAppendArray(v76, v20, v154);
              unsigned int v77 = *(__CFArray **)(a1 + 3640);
              v155.length = CFArrayGetCount(theArray);
              v155.location = 0;
              CFArrayAppendArray(v77, theArray, v155);
              uint64_t v78 = *(const void **)(a1 + 3504);
              if (v78) {
                CFRelease(v78);
              }
              unsigned int v12 = (void *)cf;
              *(void *)(a1 + 3504) = theSet;
              char v79 = !v59;
              if (!cf) {
                char v79 = 1;
              }
              CFMutableArrayRef Mutable = v61;
              if ((v79 & 1) == 0 && sub_1000199C0((uint64_t)cf))
              {
                sub_100105524((uint64_t *)a1, cf, 0, 0);
                sub_100105904(a1, cf);
              }
              sub_100105D08(a1);
              *(_WORD *)(a1 + 6600) = sub_100105E08(a1, cf);
              if (!v59 || *(_DWORD *)(a1 + 5520) == 1)
              {
                if (v23)
                {
LABEL_170:
                  sub_100102284(a1);
                  goto LABEL_176;
                }
                if (cf)
                {
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: known network list changed while associated, updating autojoin network list", "WiFiDeviceManagerSetNetworks")];
                  }
                  sub_100105EEC(a1);
                }
                else if (*(_DWORD *)(a1 + 5520) == 1)
                {
                  goto LABEL_170;
                }
LABEL_176:
                if (*(_DWORD *)(a1 + 5520) == 1)
                {
                  sub_100070310(*(void *)(a1 + 64));
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:3, "%s: Aborting scan...", "WiFiDeviceManagerSetNetworks"];
                  }
                }
                int v82 = !v59;
                *(_DWORD *)(a1 + 28) = 0;
                sub_100102948(a1, 2, (uint64_t)"WiFiDeviceManagerSetNetworks");
                if (cf)
                {
                  CFNumberRef v83 = (const __CFNumber *)sub_100024070((uint64_t)cf);
                  if (v83) {
                    CFNumberGetValue(v83, kCFNumberIntType, &v141);
                  }
                  unsigned int v85 = (void *)qword_10027DD68;
                  if (!qword_10027DD68) {
                    goto LABEL_188;
                  }
                  CFStringRef v86 = (const __CFString *)sub_10001A43C(cf);
                  uint64_t v87 = v141;
                  uint64_t v88 = sub_100024070((uint64_t)cf);
                  uint64_t v89 = sub_100023F30((uint64_t)v88);
                }
                else
                {
                  uint64_t v84 = v90;
                  unsigned int v85 = (void *)qword_10027DD68;
                  if (!qword_10027DD68)
                  {
                    unsigned int v12 = (void *)cf;
                    goto LABEL_192;
                  }
                  uint64_t v89 = 0xFFFFFFFFLL;
                  CFStringRef v86 = @"None";
                  uint64_t v87 = v141;
                }
                [v85 WFLog:3, "%s: currentNetwork: %@, channel: %d band: %d shouldDisassociate %d", "WiFiDeviceManagerSetNetworks", v86, v87, v89, v131 message];
                CFMutableArrayRef Mutable = v61;
LABEL_188:
                unsigned int v12 = (void *)cf;
                CFMutableArrayRef v19 = v139;
                if (cf && v131)
                {
                  uint64_t v91 = (const void *)sub_100017C48(*(void *)(a1 + 64));
                  sub_1000FEA7C(a1, v91, 1003, "WiFiDeviceManagerSetNetworks", 6181);
                }
LABEL_192:
                if (*(_DWORD *)(a1 + 5520) != 1) {
                  goto LABEL_200;
                }
                *(unsigned char *)(a1 + 1064) = 0;
                if (!v126[1840] || !v126[3] || *v126 < 0xFu || (v126[1841] & 4) == 0)
                {
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: 5Ghz MIS is inactive\n", "__WiFiDeviceManagerSwitchMISChannelForCarPlayJoin")];
                  }
LABEL_200:
                  if (!v19) {
                    goto LABEL_202;
                  }
                  goto LABEL_201;
                }
                if (CFArrayGetCount(v138) == 1)
                {
                  CFIndex v97 = CFArrayGetValueAtIndex(v138, 0);
                  if (sub_1000199C0((uint64_t)v97))
                  {
                    if (sub_10001E404((uint64_t)v97, @"CHANNEL"))
                    {
                      CFNumberRef v98 = sub_1000C6FC0((uint64_t)v97, @"CHANNEL");
                      unsigned int v142 = v98;
                      if (v98 <= 0x23)
                      {
                        if (qword_10027DD68) {
                          [((id)qword_10027DD68) WFLog:message:4, "%s: 2.4 Ghz CarPlay network\n", "__WiFiDeviceManagerSwitchMISChannelForCarPlayJoin", v125];
                        }
                      }
                      else
                      {
                        CFArrayRef v99 = (const __CFArray *)sub_10001E404((uint64_t)v97, @"networkKnownBSSListKey");
                        if (v99)
                        {
                          CFArrayRef v100 = v99;
                          if (CFArrayGetCount(v99) >= 1)
                          {
                            CFIndex v101 = 0;
                            while (1)
                            {
                              CFDictionaryRef v102 = (const __CFDictionary *)CFArrayGetValueAtIndex(v100, v101);
                              CFNumberRef v103 = (const __CFNumber *)CFDictionaryGetValue(v102, @"CHANNEL");
                              int v104 = CFDictionaryGetValue(v102, @"CHANNEL_FLAGS");
                              if (v103)
                              {
                                if (v104)
                                {
                                  CFNumberGetValue(v103, kCFNumberSInt32Type, &v142);
                                  if (v142 < 0xF) {
                                    break;
                                  }
                                }
                              }
                              if (CFArrayGetCount(v100) <= ++v101) {
                                goto LABEL_235;
                              }
                            }
                            if (qword_10027DD68) {
                              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: 2.4 Ghz channel is available\n", "__WiFiDeviceManagerSwitchMISChannelForCarPlayJoin", v125);
                            }
                            goto LABEL_258;
                          }
                        }
LABEL_235:
                        CFMutableArrayRef v19 = v139;
                        if (!v126[1840] || !sub_10010EC7C(a1, 1))
                        {
                          if (qword_10027DD68) {
                            [((id)qword_10027DD68) WFLog:4, "%s: Concurrent mode is not allowed\n", "__WiFiDeviceManagerSwitchMISChannelForCarPlayJoin"];
                          }
                          goto LABEL_254;
                        }
                        if (sub_100068A20(*(void *)(a1 + 64), (int)v98))
                        {
                          if (sub_100068920(*(void *)(a1 + 64), (int)v98))
                          {
                            if (qword_10027DD68) {
                              [((id)qword_10027DD68) WFLog:4, "%s: Channel (%d) is DFS channel\n", "__WiFiDeviceManagerSwitchMISChannelForCarPlayJoin", v98];
                            }
                          }
                          else if (sub_100119964(a1, (uint64_t)v98))
                          {
                            if (qword_10027DD68) {
                              [((id)qword_10027DD68) WFLog:4, "%s: Channel (%d) is coex denylisted\n", "__WiFiDeviceManagerSwitchMISChannelForCarPlayJoin", v98];
                            }
                          }
                          else
                          {
                            if (*v126 == v98) {
                              goto LABEL_250;
                            }
                            if (*(_DWORD *)(a1 + 5264) == 80) {
                              int v105 = 1040;
                            }
                            else {
                              int v105 = 18;
                            }
                            int v144 = v105;
                            valuePtr[0] = v98;
                            int v143 = 1;
                            CFMutableDictionaryRef v106 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                            if (v106)
                            {
                              id v107 = v106;
                              CFNumberRef v108 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, valuePtr);
                              if (v108)
                              {
                                CFNumberRef v109 = v108;
                                CFDictionarySetValue(v107, @"IO80211InterfaceSoftAPCSAChannel", v108);
                                CFRelease(v109);
                                CFNumberRef v110 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v144);
                                if (v110)
                                {
                                  CFNumberRef v111 = v110;
                                  CFDictionarySetValue(v107, @"IO80211InterfaceSoftAPCSAChannelFlag", v110);
                                  CFRelease(v111);
                                  CFNumberRef v112 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v143);
                                  if (v112)
                                  {
                                    CFNumberRef v113 = v112;
                                    CFDictionarySetValue(v107, @"IO80211InterfaceSoftAPCSASwitchCount", v112);
                                    CFRelease(v113);
                                    CFDictionarySetValue(v107, @"IO80211InterfaceSoftAPCSAForceDisconnect", kCFBooleanFalse);
                                    uint64_t v114 = *(void *)(a1 + 64);
                                    CFNumberRef v115 = (const void *)sub_100017C48(v114);
                                    uint64_t v116 = sub_100017D28(v114, v115, 349, 0, (uint64_t)v107);
                                    if (!v116)
                                    {
                                      unsigned __int8 *v126 = valuePtr[0];
                                      CFRelease(v107);
LABEL_250:
                                      *(unsigned char *)(a1 + 1064) = 1;
                                      if (qword_10027DD68) {
                                        [((id)qword_10027DD68) WFLog:message:3, "%s: Allow 5Ghz CarPlay & Hotspot concurrent mode\n", "__WiFiDeviceManagerSwitchMISChannelForCarPlayJoin"];
                                      }
LABEL_254:
LABEL_255:
                                      unsigned int v12 = (void *)cf;
                                      CFArrayRef v20 = v140;
                                      goto LABEL_200;
                                    }
                                    uint64_t v123 = v116;
                                    if (qword_10027DD68) {
                                      [((id)qword_10027DD68) WFLog:4, @"%s: Failed to switch MIS channel to %d, err %d", @"__WiFiDeviceManagerSwitchMISChannel", valuePtr[0], v123];
                                    }
                                    CFMutableArrayRef v19 = v139;
                                  }
                                }
                              }
                              CFRelease(v107);
                              goto LABEL_255;
                            }
                            if (qword_10027DD68) {
                              [((id)qword_10027DD68) WFLog:4 message:@"%s Failed to create dict" : @"__WiFiDeviceManagerSwitchMISChannel" : v125];
                            }
                          }
                        }
                        else
                        {
                          if (qword_10027DD68) {
                            [((id)qword_10027DD68) WFLog:4, "%s: Invalid channel (%d)\n", "__WiFiDeviceManagerSwitchMISChannelForCarPlayJoin", v98];
                          }
                        }
                      }
                    }
                    else
                    {
                      if (qword_10027DD68) {
                        [qword_10027DD68 WFLog:message:4,"%s: No channel inform\n", "__WiFiDeviceManagerSwitchMISChannelForCarPlayJoin"];
                      }
                    }
                  }
                  else
                  {
                    if (qword_10027DD68) {
                      [((id)qword_10027DD68) WFLog:4 message:@"%s: Not CarPlay network\n" : @"__WiFiDeviceManagerSwitchMISChannelForCarPlayJoin"];
                    }
                  }
                }
                else
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:4, "%s: Not CarPlay join\n", "__WiFiDeviceManagerSwitchMISChannelForCarPlayJoin"];
                  }
                }
LABEL_258:
                unsigned int v12 = (void *)cf;
                CFMutableArrayRef v19 = v139;
                CFArrayRef v20 = v140;
                goto LABEL_200;
              }
LABEL_268:
              int v82 = 0;
              goto LABEL_200;
            }
          }
          CFNumberRef v75 = 0;
        }
        else
        {
          CFNumberRef v75 = 0;
          CFNumberRef v68 = 0;
        }
        CFNumberRef v73 = v128;
        goto LABEL_154;
      }
      uint64_t v58 = v130;
      CFMutableArrayRef v19 = v139;
      CFAllocatorRef v13 = kCFAllocatorDefault;
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, "%s: null networks", "WiFiDeviceManagerSetNetworks"];
      }
      uint64_t v58 = v130;
    }
    uint64_t v55 = v132;
    goto LABEL_122;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: failed to create disabledNetworks array" args:("WiFiDeviceManagerSetNetworks")];
  }
  int v82 = 0;
  CFArrayRef theArray = 0;
LABEL_201:
  CFRelease(v19);
LABEL_202:
  if (v20) {
    CFRelease(v20);
  }
  CFArrayRef v93 = theArray;
  if (v12) {
LABEL_205:
  }
    CFRelease(v12);
LABEL_206:
  if (v130) {
    CFRelease(v130);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v134) {
    CFRelease(v134);
  }
  if (v93) {
    CFRelease(v93);
  }
  *(_DWORD *)(a1 + 192) = 14;
  if (_os_feature_enabled_impl())
  {
    if (*(_DWORD *)(a1 + 5520) == 1)
    {
      uint64_t v94 = a1;
      unint64_t v95 = 32;
LABEL_222:
      sub_10001FD64(v94, v95);
      return sub_10010677C(a1);
    }
    if (v126[3605])
    {
      uint64_t v94 = a1;
      unint64_t v95 = 33;
      goto LABEL_222;
    }
    if (v82)
    {
      uint64_t v94 = a1;
      unint64_t v95 = 5;
      goto LABEL_222;
    }
  }
  else
  {
    [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:5 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
    sub_1001028E4(a1, 0, (uint64_t)"WiFiDeviceManagerSetNetworks");
  }
  return sub_10010677C(a1);
}

uint64_t sub_1001051F8(uint64_t a1)
{
  return *(void *)(a1 + 6656);
}

BOOL sub_100105200(void *a1, const void *a2)
{
  CFArrayRef v4 = (const __CFArray *)a1[441];
  v8.length = CFArrayGetCount(v4);
  v8.location = 0;
  if (CFArrayContainsValue(v4, v8, a2)) {
    return 1;
  }
  CFArrayRef v5 = (const __CFArray *)a1[455];
  v9.length = CFArrayGetCount(v5);
  v9.location = 0;
  if (CFArrayContainsValue(v5, v9, a2)) {
    return 1;
  }
  CFArrayRef v7 = (const __CFArray *)a1[442];
  v10.length = CFArrayGetCount(v7);
  v10.location = 0;
  return CFArrayContainsValue(v7, v10, a2) != 0;
}

uint64_t sub_1001052A4(uint64_t a1, const void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = sub_10001BB2C((BOOL)a2);
  if (result)
  {
    CFArrayRef v5 = *(const __CFArray **)(a1 + 3624);
    v7.length = CFArrayGetCount(v5);
    v7.location = 0;
    if (CFArrayContainsValue(v5, v7, a2))
    {
      return 1;
    }
    else
    {
      CFArrayRef v6 = *(const __CFArray **)(a1 + 3632);
      v8.length = CFArrayGetCount(v6);
      v8.location = 0;
      return CFArrayContainsValue(v6, v8, a2) != 0;
    }
  }
  return result;
}

void sub_100105340(uint64_t a1, const void *a2)
{
  memset(buffer, 170, sizeof(buffer));
  if (a1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 72);
    BOOL v4 = v3 > 0xB;
    int v5 = (1 << v3) & 0x80E;
    BOOL v6 = v4 || v5 == 0;
    if (!v6 && sub_100017C48(*(void *)(a1 + 64)))
    {
      CFStringRef v8 = (const __CFString *)sub_100017C48(*(void *)(a1 + 64));
      CFStringGetCString(v8, buffer, 16, 0x8000100u);
      sub_1000CDCE4((uint64_t)a2);
      network_config_set_interface_constrained();
      CFRange v10 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        unsigned int v11 = sub_10001ED58((uint64_t)a2);
        CFStringRef v12 = sub_10005AEF4(v11);
        CFNumberRef v13 = sub_10001ED58((uint64_t)a2);
        [v10 WFLog:3, "%s: updated save data mode to %@(%d) for network %@", "__WiFiDeviceManagerApplyConstrainedInterfaceConfig", v12, v13, sub_10001A43C(a2) message];
      }
    }
  }
}

void sub_10010547C(uint64_t a1, const void *a2)
{
  BOOL v4 = *(const void **)(a1 + 3512);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 3512) = 0;
  }
  if (a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s, %@", "WiFiDeviceManagerSetPreviousNetwork", a2 message];
    }
    CFArrayRef v6 = sub_1000194F8(a1, a2, 1);
    *(void *)(a1 + 3512) = v6;
    if (!v6) {
      *(void *)(a1 + 3512) = CFRetain(a2);
    }
  }
}

void sub_100105524(uint64_t *a1, const void *a2, char a3, int a4)
{
  if (!a2)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, @"%s: no link on interface. Setting primary to never.", @"__WiFiDeviceManagerSetInterfaceRank"];
    }
    if (a1[683])
    {
      CFArrayRef v9 = 0;
      BOOL v12 = 0;
      uint64_t v10 = 2863311530;
      int v11 = 3;
      if ((a3 & 1) == 0) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }
LABEL_46:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: netif is NULL!!!":@"__WiFiDeviceManagerSetInterfaceRank"];
    }
    return;
  }
  if (!a1[683]) {
    goto LABEL_46;
  }
  CFArrayRef v8 = sub_1000194F8((uint64_t)a1, a2, 1);
  CFArrayRef v9 = v8;
  if (v8)
  {
    uint64_t v10 = sub_1000CD794((uint64_t)v8);
    int v11 = 0;
    BOOL v12 = (v10 - 1) < 2;
    if ((a3 & 1) == 0)
    {
LABEL_12:
      a1[697] = 0;
      if (v9)
      {
        if ((v10 - 1) <= 1)
        {
          CFDictionaryRef v14 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"11U_INTERWORKING_IE");
          if (v14)
          {
            CFNumberRef Value = CFDictionaryGetValue(v14, @"INTERWORKING_ACCESS_INTERNET");
            a1[697] = (uint64_t)Value;
            if (Value)
            {
              if (qword_10027DD68)
              {
                if ((const CFBooleanRef)a1[697] == kCFBooleanTrue) {
                  BOOL v17 = "SET";
                }
                else {
                  BOOL v17 = "ZERO";
                }
                [(id)qword_10027DD68 WFLog:3, "%s: internetAccess bit %s for network %@", "__WiFiDeviceManagerSetInterfaceRank", v17, sub_10001A43C(a2) message];
              }
            }
          }
          if (v10 == 2)
          {
            int v11 = 0;
          }
          else if (v10 == 1)
          {
            int v11 = 3;
          }
          uint64_t v18 = (void (*)(uint64_t *, void, uint64_t, uint64_t))a1[541];
          if (v18) {
            v18(a1, 0, a1[542], v10);
          }
          BOOL v12 = 1;
        }
        sub_100105340((uint64_t)a1, v9);
      }
      goto LABEL_30;
    }
  }
  else
  {
    int v11 = 0;
    BOOL v12 = 0;
    uint64_t v10 = 2863311530;
    if ((a3 & 1) == 0) {
      goto LABEL_12;
    }
  }
LABEL_10:
  int v11 = a4;
LABEL_30:
  if (!v11
    && !v12
    && _os_feature_enabled_impl()
    && +[WiFiAIRAgent sharedInstance])
  {
    if ([+[WiFiAIRAgent sharedInstance] isInterfaceRankingInProgress])
    {
      [+[WiFiAIRAgent sharedInstance] terminateRequest];
    }
    sub_1000175A0(a1[15], 1, 0);
    SCNetworkInterfaceSetPrimaryRank();
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100130630;
    v22[3] = &unk_100241888;
    int v23 = 0;
    v22[4] = a1;
    v22[5] = a2;
    [+[WiFiAIRAgent sharedInstance] withMgrCallback:v22];
    if (!v9) {
      return;
    }
LABEL_44:
    CFRelease(v9);
    return;
  }
  SCNetworkInterfaceSetPrimaryRank();
  if (qword_10027DD68)
  {
    if (v11) {
      CFArrayRef v20 = "kSCNetworkServicePrimaryRankNever";
    }
    else {
      CFArrayRef v20 = "kSCNetworkServicePrimaryRankDefault";
    }
    [(id)qword_10027DD68 WFLog:3, "%s: setting interface rank %s for network %@", "__WiFiDeviceManagerSetInterfaceRank", v20, sub_10001A43C(a2) message];
  }
  if (v9) {
    goto LABEL_44;
  }
}

void sub_100105904(uint64_t a1, const void *a2)
{
  unsigned int valuePtr = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL" : @"__WiFiDeviceManagerUpdateDynamicStoreNetworkEntry"];
    }
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 5464))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: netif is NULL" args:("__WiFiDeviceManagerUpdateDynamicStoreNetworkEntry")];
    }
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 5440))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: dynamicStoreRef is NULL" : @"__WiFiDeviceManagerUpdateDynamicStoreNetworkEntry"];
    }
    goto LABEL_28;
  }
  CFArrayRef v3 = sub_1000194F8(a1, a2, 1);
  if (!v3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: no matching known network" : @"__WiFiDeviceManagerUpdateDynamicStoreNetworkEntry"];
    }
LABEL_28:
    return;
  }
  CFArrayRef v4 = v3;
  uint64_t v5 = sub_1000CD794((uint64_t)v3);
  int v25 = v5;
  CFStringRef v6 = (const __CFString *)sub_100016E20(*(void *)(a1 + 64));
  if (v6)
  {
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, v6, kSCEntNetAirPort);
    if (NetworkInterfaceEntity)
    {
      CFStringRef v8 = NetworkInterfaceEntity;
      CFDictionaryRef v9 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 5440), NetworkInterfaceEntity);
      if (v9)
      {
        CFDictionaryRef v10 = v9;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v9, @"WiFiNetworkType");
        if (Value)
        {
          CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
          unsigned int v12 = valuePtr;
        }
        else
        {
          unsigned int v12 = 0;
        }
        if (v12 != v5)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:message:3, "%s: update the network type from %d to %d", "__WiFiDeviceManagerUpdateDynamicStoreNetworkEntry", valuePtr, v5];
          }
          MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v10);
          if (MutableCopy)
          {
            CFMutableArrayRef v15 = MutableCopy;
            CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v25);
            if (v16)
            {
              CFNumberRef v17 = v16;
              CFDictionarySetValue(v15, @"WiFiNetworkType", v16);
              SCDynamicStoreSetValue(*(SCDynamicStoreRef *)(a1 + 5440), v8, v15);
              CFRelease(v15);
              uint64_t v18 = v17;
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"%s: networkTypeNum is NULL" : @"__WiFiDeviceManagerUpdateDynamicStoreNetworkEntry"];
              }
              uint64_t v18 = v15;
            }
            CFRelease(v18);
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: newConfig is NULL" : @"__WiFiDeviceManagerUpdateDynamicStoreNetworkEntry"];
            }
          }
        }
        CFRelease(v10);
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: config is NULL." arguments:("__WiFiDeviceManagerUpdateDynamicStoreNetworkEntry", 0)];
        }
      }
      CFRelease(v4);
      CFRelease(v8);
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: stateKey is NULL.":@"__WiFiDeviceManagerUpdateDynamicStoreNetworkEntry"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: interfaceName is NULL.", @"__WiFiDeviceManagerUpdateDynamicStoreNetworkEntry"];
    }
  }

  CFRelease(v4);
}

void sub_100105D08(uint64_t a1)
{
  CFArrayRef v3 = +[NSMutableArray arrayWithArray:*(void *)(a1 + 3528)];
  [(NSMutableArray *)v3 addObjectsFromArray:*(void *)(a1 + 3624)];
  v9.length = (CFIndex)[(NSMutableArray *)v3 count];
  v9.location = 0;
  CFArraySortValues((CFMutableArrayRef)v3, v9, (CFComparatorFunction)sub_1000CB914, 0);
  if ([(NSMutableArray *)v3 count])
  {
    uint64_t v4 = 0;
    int v5 = 0;
    unsigned __int16 v6 = 1;
    do
    {
      id v7 = [(NSMutableArray *)v3 objectAtIndexedSubscript:v4];
      if (sub_10001CD28((uint64_t)v7) != 0.0 && sub_1000CEFEC((uint64_t)v7) != v6) {
        sub_1000CEFE4((uint64_t)v7, v6++);
      }
      uint64_t v4 = (unsigned __int16)++v5;
    }
    while ((unint64_t)[(NSMutableArray *)v3 count] > (unsigned __int16)v5);
  }
}

uint64_t sub_100105E08(uint64_t a1, const void *a2)
{
  uint64_t v2 = 0xFFFFLL;
  if (a1 && a2)
  {
    unsigned __int16 v6 = +[NSMutableArray arrayWithArray:*(void *)(a1 + 3528)];
    [(NSMutableArray *)v6 addObjectsFromArray:*(void *)(a1 + 3624)];
    if ([(NSMutableArray *)v6 count])
    {
      uint64_t v7 = 0;
      int v8 = 0;
      while (1)
      {
        id v9 = [(NSMutableArray *)v6 objectAtIndexedSubscript:v7];
        CFStringRef v10 = (const __CFString *)sub_10001A43C(v9);
        CFStringRef v11 = (const __CFString *)sub_10001A43C(a2);
        if (CFEqual(v10, v11)) {
          break;
        }
        uint64_t v7 = (unsigned __int16)++v8;
        if ((unint64_t)[(NSMutableArray *)v6 count] <= (unsigned __int16)v8) {
          goto LABEL_7;
        }
      }
      uint64_t v2 = sub_1000CEFEC((uint64_t)v9);
    }
    else
    {
LABEL_7:
      uint64_t v2 = 0xFFFFLL;
    }
  }
  return v2;
}

void sub_100105EEC(uint64_t a1)
{
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3576));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3544));
  uint64_t v2 = *(void *)(a1 + 3512);
  if (!v2
    || !sub_10001E71C(v2)
    || sub_10001E404(*(void *)(a1 + 3512), @"WiFiInstantHotspotJoining") != kCFBooleanTrue
    && sub_10001E404(*(void *)(a1 + 3512), @"WiFiAutoInstantHotspotJoining") != kCFBooleanTrue)
  {
    goto LABEL_13;
  }
  CFNumberRef v3 = (const __CFNumber *)sub_10001E404(*(void *)(a1 + 3512), @"lastDisconnectReasonKey");
  if (!v3) {
    goto LABEL_13;
  }
  unsigned int valuePtr = -1431655766;
  CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
  if (valuePtr >= 3)
  {
    int v55 = 0;
    BOOL v13 = valuePtr == 1019;
    goto LABEL_14;
  }
  CFDateRef v4 = (const __CFDate *)sub_10001E404(*(void *)(a1 + 3512), @"lastDisconnectTimestampKey");
  if (!v4 || (CFDateRef v5 = v4, Current = CFAbsoluteTimeGetCurrent(), Current - CFDateGetAbsoluteTime(v5) >= 300.0))
  {
LABEL_13:
    int v55 = 0;
    BOOL v13 = 0;
    goto LABEL_14;
  }
  if (qword_10027DD68)
  {
    int v8 = sub_10001A43C(*(const void **)(a1 + 3512));
    uint64_t v9 = valuePtr;
    double v10 = CFAbsoluteTimeGetCurrent();
    CFStringRef v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s Previous Hotspot %@ disconnect reason %d time since linkDown %.1f", "__WiFiDeviceManagerFilterNetworks", v8, v9, v10 - CFDateGetAbsoluteTime(v5)]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v12 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v11 UTF8String]] UTF8String];
      *(_DWORD *)long long buf = 136446210;
      uint64_t v58 = v12;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
  }
  BOOL v13 = 0;
  int v55 = 1;
LABEL_14:
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 3528));
  if (Count >= 1)
  {
    CFIndex v15 = Count;
    for (CFIndex i = 0; i != v15; ++i)
    {
      CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3528), i);
      if (ValueAtIndex)
      {
        uint64_t v18 = ValueAtIndex;
        if (sub_10012EE58(a1, ValueAtIndex, 1u))
        {
          if (!*(unsigned char *)(a1 + 6896)
            || (CFMutableArrayRef v19 = (const void *)sub_100017C48(*(void *)(a1 + 64)), (v20 = sub_100018FA8(a1, v19, 1)) == 0)
            || (BOOL v21 = v20,
                CFStringRef v22 = sub_10001F928(v20),
                CFStringRef v23 = sub_10001F928(v18),
                LODWORD(v22) = CFEqual(v22, v23),
                CFRelease(v21),
                !v22))
          {
            if (!v13
              || (uint64_t v24 = *(const void **)(a1 + 3512)) == 0
              || (CFStringRef v25 = sub_10001F928(v24), v26 = sub_10001F928(v18), !CFEqual(v25, v26)))
            {
              CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 3544), v18);
              CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 3576), v18);
            }
          }
        }
        else
        {
          if (qword_10027DD68)
          {
            CFArrayRef v28 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: %@ not suitable", "__WiFiDeviceManagerFilterNetworks", sub_10001A43C(v18)]) UTF8String]);
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              BOOL v29 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v28 UTF8String]] UTF8String];
              *(_DWORD *)long long buf = 136446210;
              uint64_t v58 = v29;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            }
          }
        }
      }
    }
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3552));
  CFIndex v30 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3536));
  if (v30 >= 1)
  {
    CFIndex v31 = v30;
    for (CFIndex j = 0; j != v31; ++j)
    {
      CFIndex v33 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3536), j);
      if (v33)
      {
        CFIndex v34 = v33;
        if (sub_10012EE58(a1, v33, 1u))
        {
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 3552), v34);
          v59.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 3576));
          v59.location = 0;
          if (CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 3576), v59, v34) == -1) {
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 3576), v34);
          }
        }
        else
        {
          if (qword_10027DD68)
          {
            int v36 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: %@ not suitable", "__WiFiDeviceManagerFilterNetworks", sub_10001A43C(v34)]) UTF8String]);
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              int v37 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v36 UTF8String]] UTF8String];
              *(_DWORD *)long long buf = 136446210;
              uint64_t v58 = v37;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            }
          }
        }
      }
    }
  }
  if (v55)
  {
    CFRange v38 = *(const void **)(a1 + 3512);
    if (v38)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 3552), v38);
      v60.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 3576));
      v60.location = 0;
      if (CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 3576), v60, *(const void **)(a1 + 3512)) == -1) {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 3576), *(const void **)(a1 + 3512));
      }
    }
  }
  CFIndex v39 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3576));
  if (v39)
  {
    v61.length = v39;
    v61.location = 0;
    CFArraySortValues(*(CFMutableArrayRef *)(a1 + 3576), v61, (CFComparatorFunction)sub_1000CB9D4, 0);
  }
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  if (Mutable)
  {
    CFDataRef v41 = Mutable;
    CFArrayRef v42 = *(const __CFArray **)(a1 + 3576);
    if (v42)
    {
      CFIndex v43 = CFArrayGetCount(v42);
      if (v43)
      {
        uint64_t v44 = v43;
        if (v43 >= 1)
        {
          CFIndex v45 = 0;
          if (v43 >= 5) {
            uint64_t v46 = 5;
          }
          else {
            uint64_t v46 = v43;
          }
          do
          {
            CFIndex v47 = CFArrayGetValueAtIndex(v42, v45);
            if (v47)
            {
              uint64_t v48 = v47;
              if (sub_10001EB5C(v47))
              {
                CFStringRef v49 = (const __CFString *)sub_10001E404((uint64_t)v48, @"BSSID");
                if (v49) {
                  CFStringRef v50 = v49;
                }
                else {
                  CFStringRef v50 = @"null-bssid!";
                }
              }
              else
              {
                CFStringRef v51 = (const __CFString *)sub_10001A43C(v48);
                if (v51) {
                  CFStringRef v50 = v51;
                }
                else {
                  CFStringRef v50 = @"null-ssid!";
                }
              }
              CFStringAppend(v41, v50);
              CFStringAppendFormat(v41, 0, @" ");
            }
            ++v45;
          }
          while (v46 != v45);
          if (v44 >= 6) {
            CFStringAppendFormat(v41, 0, @" ...");
          }
        }
      }
    }
    if (qword_10027DD68)
    {
      unsigned int v53 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: Filtered networks - %@", "__WiFiDeviceManagerFilterNetworks", v41]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        CFArrayRef v54 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v53 UTF8String]] UTF8String];
        *(_DWORD *)long long buf = 136446210;
        uint64_t v58 = v54;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      }
    }
    CFRelease(v41);
  }
}

uint64_t sub_10010677C(uint64_t a1)
{
  if (!sub_1000666DC(*(void *)(a1 + 64)))
  {
    uint64_t v34 = 0;
    goto LABEL_122;
  }
  if (*(_DWORD *)(a1 + 20) == 1)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    if (*(_DWORD *)(a1 + 176))
    {
      if (sub_1000FB13C(a1))
      {
        CFArrayRef theArray = Mutable;
        uint64_t v66 = v2;
        CFDateRef v4 = (const void *)sub_100017C48(*(void *)(a1 + 64));
        CFDateRef v5 = sub_100018FA8(a1, v4, 1);
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 3528));
        CFNumberRef value = v5;
        if (Count >= 1)
        {
          CFIndex v6 = 0;
          int v7 = 0;
          while (1)
          {
            CFNumberRef ValueAtIndex = (CFDictionaryRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3528), v6);
            if (ValueAtIndex) {
              break;
            }
LABEL_34:
            if (Count == ++v6) {
              goto LABEL_57;
            }
          }
          uint64_t v9 = ValueAtIndex;
          int v73 = v7;
          id v10 = sub_10000AD1C((uint64_t)ValueAtIndex);
          id v11 = [*(id *)(a1 + 6648) isNetworkInDenyListedState:3 scanResult:v10];
          unsigned int v71 = [*(id *)(a1 + 6648) isNetworkInDenyListedState:1 scanResult:v10];
          unsigned int v70 = [*(id *)(a1 + 6648) isNetworkDenyListedForAutoJoinDueToTrigDisc:v10 RSSI:0 timestamp:0];
          unsigned int v12 = sub_10001CECC(v9);
          if (v12)
          {
            unsigned int v13 = [*(id *)(a1 + 8824) isKnownNetworkDisallowed:v12];
          }
          else
          {
            if (qword_10027DD68) {
              [[(id)qword_10027DD68 WFLog:message:4, "%s: Unable to create CWFNetworkProfile. Skipping isKnownNetworkDisallowed check", "WiFiDeviceManagerSetBackgroundScan"];
            }
            unsigned int v13 = 0;
          }

          if (byte_10027DDA9) {
            BOOL v15 = v5 == 0;
          }
          else {
            BOOL v15 = 1;
          }
          if (v15
            || (CFStringRef v16 = (const __CFString *)sub_10001A43C(v5),
                CFStringRef v17 = (const __CFString *)sub_10001A43C(v9),
                CFEqual(v16, v17)))
          {
            unsigned int v19 = 1;
          }
          else
          {
            uint64_t v18 = sub_10001CECC(v9);
            unsigned int v19 = [v18 isAllowedInLockdownMode];
          }
          CFArrayRef v20 = sub_10001A5A8(*(const __CFArray **)(a1 + 3704), (const void **)v9);
          if (v20
            && (BOOL v21 = v20,
                CFBooleanRef v22 = (const __CFBoolean *)sub_10001E404((uint64_t)v20, @"NetworkUsedForSWUpgrade"),
                (CFDictionaryRef v23 = (const __CFDictionary *)sub_10001E404((uint64_t)v21, @"PRIVATE_MAC_ADDRESS")) != 0)
            && (CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v23, @"PRIVATE_MAC_ADDRESS_TYPE")) != 0
            && sub_10001C140(v24) == 1
            && v22
            && v22 == kCFBooleanTrue
            && v5
            && (CFStringRef v25 = (const __CFString *)sub_10001A43C(v5),
                CFStringRef v26 = (const __CFString *)sub_10001A43C(v21),
                CFEqual(v25, v26)))
          {
            if (qword_10027DD68)
            {
              long long v74 = v33;
              [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Forcing bg scan set for current network <%@>", "WiFiDeviceManagerSetBackgroundScan", sub_10001A43C(v21) message];
              CFIndex v33 = v74;
            }
            int v73 = 1;
            if (v11) {
              goto LABEL_30;
            }
          }
          else if (v11)
          {
            goto LABEL_30;
          }
          if (!sub_10001A680((uint64_t)v9)
            && sub_1000C7604((uint64_t)v9)
            && v19
            && !v13
            && ((v71 & 1) == 0 || v70))
          {
            CFArrayAppendValue(theArray, v9);
LABEL_33:

            int v7 = v73;
            goto LABEL_34;
          }
LABEL_30:
          CFArrayRef v28 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            CFNumberRef v69 = sub_10001A43C(v9);
            uint64_t v29 = a1;
            id v30 = v10;
            id v31 = v11;
            unsigned int v32 = sub_10001A680((uint64_t)v9);
            id v65 = v31;
            id v10 = v30;
            a1 = v29;
            CFDateRef v5 = value;
            [v28 WFLog:4, "%s: network %@ excluded from BGScan: isWoWBlacklisted=%d isAJBlacklisted=%d isTDBlacklisted=%d isAdHoc=%d isWoWAllowed=%d isAutoJoinAllowedInLockdownMode=%d isKnownNetworkDisallowed=%d", "WiFiDeviceManagerSetBackgroundScan", v69, v65, v71, v70, v32, sub_1000C7604((uint64_t)v9), v19, v13 message];
          }
          goto LABEL_33;
        }
        int v7 = 0;
LABEL_57:
        CFArrayRef Mutable = theArray;
        uint64_t v39 = CFArrayGetCount(theArray);
        if (v39)
        {
          v75.location = 0;
          v75.length = v39;
          CFArraySortValues(theArray, v75, (CFComparatorFunction)sub_1000CB9D4, 0);
        }
        id v40 = sub_10000AD1C((uint64_t)value);
        unsigned __int8 v41 = [*(id *)(a1 + 6648) isNetworkInDenyListedState:3 scanResult:v40];
        if (!value)
        {
          uint64_t v2 = v66;
LABEL_74:
          if (v39 >= 17)
          {
            v77.length = v39 - 16;
            v77.location = 16;
            CFArrayReplaceValues(theArray, v77, 0, 0);
          }
          CFIndex v46 = CFArrayGetCount(theArray);
          if (v46 >= 1)
          {
            CFIndex v47 = v46;
            CFIndex v48 = 0;
            while (1)
            {
              CFStringRef v49 = CFArrayGetValueAtIndex(Mutable, v48);
              CFStringRef v50 = sub_10001A43C(v49);
              if ([*(id *)(a1 + 6648) isNetworkDenyListedForAutoJoinDueToTrigDisc:v40 RSSI:0 timestamp:0]&& !CFSetContainsValue(*(CFSetRef *)(a1 + 3600), v49))
              {
                int v7 = 1;
              }
              if (([*(id *)(a1 + 6648) isNetworkDenyListedForAutoJoinDueToTrigDisc:v40 RSSI:0 timestamp:0] & 1) == 0&& CFSetContainsValue(*(CFSetRef *)(a1 + 3600), v49))
              {
                int v7 = 1;
              }
              if ((sub_10010CB30(a1, v49) || sub_1000066FC((uint64_t)v49) || sub_10001BB2C((BOOL)v49))
                && !CFSetContainsValue(*(CFSetRef *)(a1 + 3608), v49))
              {
                break;
              }
              if (!sub_10010CB30(a1, v49)
                && !sub_1000066FC((uint64_t)v49)
                && !sub_10001BB2C((BOOL)v49)
                && CFSetContainsValue(*(CFSetRef *)(a1 + 3608), v49))
              {
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s Force reprogram Bgscan list for clear hotspot %@", "WiFiDeviceManagerSetBackgroundScan", v50 message];
                }
                goto LABEL_96;
              }
              ++v48;
              CFArrayRef Mutable = theArray;
              if (v47 == v48) {
                goto LABEL_97;
              }
            }
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s Force reprogram Bgscan list for hotspot %@", "WiFiDeviceManagerSetBackgroundScan", v50 message];
            }
LABEL_96:
            CFArrayRef Mutable = theArray;
            int v7 = 1;
          }
LABEL_97:

LABEL_98:
          CFArrayRef v52 = *(const __CFArray **)(a1 + 3592);
          if (CFArrayGetCount(v52) > 359) {
            v53.length = 360;
          }
          else {
            v53.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 3592));
          }
          v53.location = 0;
          CFArrayAppendArray(Mutable, v52, v53);
          if (!CFEqual(Mutable, *(CFTypeRef *)(a1 + 3584)) || v7)
          {
            int v55 = sub_10010CBB4(a1, Mutable);
            if (!v55) {
              goto LABEL_107;
            }
            uint64_t v56 = *(void *)(a1 + 64);
            uint64_t v57 = (const void *)sub_100017C48(v56);
            uint64_t v58 = sub_10006C1F4(v56, v57);
            if (v58)
            {
              uint64_t v34 = v58;
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:4, @"__WiFiDeviceSetBackgroundScan returned err=%d", v34];
              }
              if (!Mutable) {
                goto LABEL_118;
              }
            }
            else
            {
              CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3584));
              long long v63 = *(__CFArray **)(a1 + 3584);
              v78.length = CFArrayGetCount(Mutable);
              v78.location = 0;
              CFArrayAppendArray(v63, Mutable, v78);
              sub_10010D55C(a1);
              uint64_t v34 = 0;
              if (!Mutable) {
                goto LABEL_118;
              }
            }
          }
          else
          {
            if (*(unsigned __int8 *)(a1 + 5456) == *(unsigned __int8 *)(a1 + 5457))
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "No Change in Background Scan Networks, Skip Re-Programming Background Scan\n");
              }
              int v55 = 0;
LABEL_107:
              uint64_t v34 = 4294963396;
              if (!Mutable) {
                goto LABEL_118;
              }
              goto LABEL_117;
            }
            int v55 = sub_10010CBB4(a1, Mutable);
            if (!v55) {
              goto LABEL_107;
            }
            uint64_t v60 = *(void *)(a1 + 64);
            CFRange v61 = (const void *)sub_100017C48(v60);
            uint64_t v34 = sub_10006C1F4(v60, v61);
            if (!Mutable)
            {
LABEL_118:
              if (v55) {
                CFRelease(v55);
              }
              if (value) {
                CFRelease(value);
              }
              goto LABEL_122;
            }
          }
LABEL_117:
          CFRelease(Mutable);
          goto LABEL_118;
        }
        char v42 = v41;
        if (sub_10001BB2C((BOOL)value))
        {
          uint64_t v2 = v66;
          if (v42)
          {
LABEL_62:
            uint64_t v43 = (uint64_t)value;
LABEL_72:
            if (sub_1000C74BC(v43)) {
              sub_100108600(a1);
            }
            goto LABEL_74;
          }
        }
        else
        {
          if (sub_1000C74BC((uint64_t)value)) {
            char v44 = v42;
          }
          else {
            char v44 = 1;
          }
          uint64_t v2 = v66;
          if (v44) {
            goto LABEL_62;
          }
        }
        v76.location = 0;
        v76.length = v39;
        uint64_t v43 = (uint64_t)value;
        if (!CFArrayContainsValue(theArray, v76, value))
        {
          CFArrayInsertValueAtIndex(theArray, 0, value);
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: adding Captive/HS2.0 network %@ to PNO list", "WiFiDeviceManagerSetBackgroundScan", sub_10001A43C(value) message];
          }
          ++v39;
          int v7 = 1;
        }
        goto LABEL_72;
      }
      int v37 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        long long v64 = "WiFiDeviceManagerSetBackgroundScan";
        CFRange v38 = "%s: User disabled auto join. Skip programming SSID into background scan";
        goto LABEL_54;
      }
    }
    else
    {
      int v37 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFRange v38 = "Device is inactive since boot. Skip programming SSID into background scan";
LABEL_54:
        [v37 WFLog:3 message:v38];
      }
    }
    CFNumberRef value = 0;
    int v7 = 0;
    goto LABEL_98;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Device NOT POWERED. Skip programming Background Scan"];
  }
  uint64_t v34 = 4294963396;
LABEL_122:
  return v34;
}

void sub_1001070C4(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v4 = *(void *)(a1 + 64);
      CFDateRef v5 = (const void *)sub_100017C48(v4);
      CFIndex v6 = sub_10001C1B4(v4, v5);
      if (v6)
      {
        int v7 = v6;
        int v8 = sub_10001A43C(v6);
        if (v8)
        {
          uint64_t v9 = v8;
          if (CFEqual(a2, v8))
          {
            id v10 = *(const void **)(a1 + 6656);
            if (v10)
            {
              CFRelease(v10);
              *(void *)(a1 + 6656) = 0;
            }
            *(void *)(a1 + 6656) = CFRetain(v9);
          }
        }
        CFRelease(v7);
      }
    }
    else
    {
      id v11 = *(const void **)(a1 + 6656);
      if (v11) {
        CFRelease(v11);
      }
      *(void *)(a1 + 6656) = 0;
    }
  }
}

void sub_100107184(uint64_t a1, CFTypeRef cf)
{
  uint64_t v4 = *(const void **)(a1 + 3616);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 3616) = 0;
  }
  if (cf) {
    *(void *)(a1 + 3616) = CFRetain(cf);
  }
}

void sub_1001071C8(uint64_t a1, CFTypeRef cf)
{
  if (a1 && cf)
  {
    CFRetain(cf);
    uint64_t v4 = *(const void **)(a1 + 3704);
    if (v4) {
      CFRelease(v4);
    }
    *(void *)(a1 + 3704) = cf;
    sub_1000130BC(a1);
  }
}

uint64_t sub_10010722C(uint64_t result, uint64_t a2)
{
  if (result && a2)
  {
    uint64_t v3 = *(void *)(result + 64);
    uint64_t v4 = (const void *)sub_100017C48(v3);
    return sub_100017D28(v3, v4, 484, 0, a2);
  }
  return result;
}

void sub_100107290(uint64_t a1, CFTypeRef cf, int a3)
{
  CFIndex v6 = *(const void **)(a1 + 320);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 320) = 0;
  }
  if (cf)
  {
    *(void *)(a1 + 320) = CFRetain(cf);
    *(_DWORD *)(a1 + 5628) = a3;
    sub_100102948(a1, 1, (uint64_t)"WiFiDeviceManagerSetRetryIntervals");
  }
}

void sub_100107314(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 3688) = a2;
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    sub_100071A2C(v2, a2);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: No Device" args:("WiFiDeviceManagerSetMacRandomisationFeature", 0x0)];
    }
  }
}

void sub_1001073AC(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    if (cf)
    {
      CFRetain(cf);
      uint64_t v4 = *(const void **)(a1 + 3720);
      if (v4) {
        CFRelease(v4);
      }
      *(void *)(a1 + 3720) = cf;
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: wifiAmbiguousSSIDs is null", "WiFiDeviceManagerSetAmbiguousSSIDs"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager ref is null", "WiFiDeviceManagerSetAmbiguousSSIDs"];
    }
  }
}

void sub_100107480(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 6576) != a2)
  {
    *(_DWORD *)(a1 + 6576) = a2;
    if (a2)
    {
      if (_os_feature_enabled_impl())
      {
        sub_10001FD64(a1, 0x11uLL);
      }
      else
      {
        [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:17 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
        sub_1001028E4(a1, 2, (uint64_t)"WiFiDeviceManagerSetJoinRecommendationMode");
      }
    }
  }
}

void sub_100107544(uint64_t a1, int a2)
{
  if (a2 == 5) {
    sub_100103488(a1, 1u);
  }
  else {
    *(_DWORD *)(a1 + 160) = a2;
  }
}

void sub_10010755C(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:2, @"wake mode set to %d", a2];
  }
  *(_DWORD *)(a1 + 168) = a2;
}

id sub_1001075C8(uint64_t *a1, int a2, const void *a3)
{
  sub_10016C73C(a1[12], a2);
  CFIndex v6 = (const void *)a1[14];
  if (v6)
  {
    CFRelease(v6);
    a1[14] = 0;
  }
  if (a3) {
    a1[14] = (uint64_t)CFRetain(a3);
  }
  id result = (id)a1[838];
  if (result)
  {
    return [result enableTestMode:a2 != 0];
  }
  return result;
}

void sub_100107650(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: %d", "WiFiDeviceManagerSetUserInteractionMode", a2];
  }
  int v7 = *(_DWORD *)(a1 + 176);
  if (a2) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = !v8;
  if (v7 != a2)
  {
    if (*(void *)(a1 + 240))
    {
      if (!*(void *)(a1 + 6704))
      {
        id v11 = [[WiFiUserNotificationManager alloc] initWithQueue:*(void *)(a1 + 240) supportsWAPI:*(unsigned __int8 *)(a1 + 88)];
        *(void *)(a1 + 6704) = v11;
        if (v11)
        {
          [(WiFiUserNotificationManager *)v11 startListening];
          [*(id *)(a1 + 6704) registerCallback:&stru_100241538 withContext:a1];
          *(_DWORD *)(a1 + 6716) = 0;
          [*(id *)(a1 + 6704) enableTestMode:sub_10016C7C8(*(void *)(a1 + 96)) != 0];
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: failed to create user notification manager" : @"WiFiDeviceManagerSetUserInteractionMode"];
          }
        }
      }
      if (*(_DWORD *)(a1 + 20) == 1)
      {
        keys = @"IO80211InterfaceRadioMODE";
        unsigned int v13 = (void **)&kCFBooleanFalse;
        if (a2 == 1) {
          unsigned int v13 = (void **)&kCFBooleanTrue;
        }
        values = *v13;
        CFDictionaryRef v14 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (v14)
        {
          CFDictionaryRef v15 = v14;
          uint64_t v16 = *(void *)(a1 + 64);
          CFStringRef v17 = (const void *)sub_100017C48(v16);
          sub_100017D28(v16, v17, 473, 0, (uint64_t)v15);
          CFRelease(v15);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"MIMO Power Save Configuration cancelled because device is not powered."];
        }
      }
      if (a2 == 1) {
        *(_DWORD *)(a1 + 6716) = 0;
      }
      if (!a3) {
        *(CFAbsoluteTime *)(a1 + 216) = CFAbsoluteTimeGetCurrent();
      }
      sub_100108600(a1);
      int v7 = *(_DWORD *)(a1 + 176);
    }
    if (v7 != a2) {
      goto LABEL_33;
    }
  }
  if (*(unsigned __int8 *)(a1 + 208) != a3)
  {
LABEL_33:
    uint64_t v19 = *(void *)(a1 + 64);
    CFArrayRef v20 = (const void *)sub_100017C48(v19);
    BOOL v21 = sub_10001C1B4(v19, v20);
    CFBooleanRef v22 = v21;
    if (!v21 || !sub_10001E71C((uint64_t)v21)) {
      goto LABEL_40;
    }
    if (a3)
    {
      double v23 = *(double *)(a1 + 6824);
      if (v23 <= CFAbsoluteTimeGetCurrent() + 3600.0) {
        goto LABEL_40;
      }
      CFNumberRef v24 = *(NSObject **)(a1 + 6816);
      dispatch_time_t v25 = dispatch_time(0, 3600000000000);
      dispatch_source_set_timer(v24, v25, 0xFFFFFFFFFFFFFFFFLL, 0);
      double v26 = CFAbsoluteTimeGetCurrent() + 3600.0;
    }
    else
    {
      char v27 = *(NSObject **)(a1 + 6816);
      dispatch_time_t v28 = dispatch_time(0, 315360000000000000);
      dispatch_source_set_timer(v27, v28, 0xFFFFFFFFFFFFFFFFLL, 0);
      double v26 = CFAbsoluteTimeGetCurrent() + 315360000.0;
    }
    *(double *)(a1 + 6824) = v26;
LABEL_40:
    if (*(_DWORD *)(a1 + 6804) != 2 || a2 == 1) {
      char v30 = 0;
    }
    else {
      char v30 = 2;
    }
    *(unsigned char *)(a1 + 7024) = v30 | *(unsigned char *)(a1 + 7024) & 0xFD;
    if (v22) {
      CFRelease(v22);
    }
  }
  *(unsigned char *)(a1 + 208) = a3;
  *(_DWORD *)(a1 + 176) = a2;
  sub_100036B24(*(void *)(a1 + 120), a2);
  if (a2 == 3)
  {
    if (_os_feature_enabled_impl()) {
      sub_10001FD64(a1, 0x3AuLL);
    }
    else {
      sub_100100D74(a1, 0);
    }
    [*(id *)(a1 + 6704) dismissJoinAlerts];
  }
  sub_10016C304(*(void *)(a1 + 96), a2);
  if ((v9 & 1) == 0) {
    sub_10010677C(a1);
  }
  id v31 = *(void **)(a1 + 7368);
  if (v31)
  {
    BOOL v32 = (*(_DWORD *)(a1 + 176) - 1) < 2;
    [v31 setDeviceLockState:a3 != 0];
    [*(id *)(a1 + 7368) setDisplayState:v32];
  }
  if (a3) {
    a3 = *(unsigned char *)(a1 + 3464) == 0;
  }
  if (sub_10010883C(a1)) {
    int v33 = 1;
  }
  else {
    int v33 = a3;
  }
  sub_1000FEDEC(a1, v33);
}

void sub_100107A8C(id a1, int a2, id a3, int a4, void *a5)
{
  uint64_t v6 = *(void *)&a4;
  uint64_t v8 = *(void *)&a2;
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:@"__WiFiDeviceManagerHandleUserNotificationResponse" message:3, "%s: notifyType %d responseType %d", "__WiFiDeviceManagerHandleUserNotificationResponse", v8, v6];
  }
  switch((int)v8)
  {
    case 1:
      if (v6 == 1)
      {
        id v11 = [objc_msgSend(a3, "scannedNetwork") scanProperties];
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: user accepted recommendation for %@", "__WiFiDeviceManagerHandleUserNotificationResponse", [a3 network] message];
        }
        if (objc_msgSend(objc_msgSend(a3, "network"), "source") == (id)2) {
          unsigned int v13 = sub_1000C5D34([[objc_msgSend(objc_msgSend(a3, "network"), "SSID")] UTF8String]);
        }
        else {
          unsigned int v13 = 0;
        }
        if (!v13 && v11) {
          unsigned int v13 = sub_100019658((int)kCFAllocatorDefault, v11);
        }
        if (v13)
        {
          if (objc_msgSend(objc_msgSend(a3, "network"), "source") == (id)1)
          {
            sub_1000CF82C((uint64_t)v13, [objc_msgSend(objc_msgSend(a3, "network"), "uniqueIdentifier")]);
            sub_1000CE418((uint64_t)v13, 3u);
          }
          sub_10010222C((uint64_t)a5);
          if (objc_msgSend(objc_msgSend(a3, "network"), "password"))
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: setting password for network %@", "__WiFiDeviceManagerHandleUserNotificationResponse", sub_10001A43C(v13) message];
            }
            sub_1000C93E0(v13, (const __CFString *)[objc_msgSend(objc_msgSend(a3, "network"), "password")]);
          }
          sub_10013F058((uint64_t *)a5, @"userJoinAssociating", v13);
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: found matching network in scan results, proceeding with association", "__WiFiDeviceManagerHandleUserNotificationResponse")];
          }
          CFIndex v46 = (const void *)sub_100017C48(*((void *)a5 + 8));
          if (sub_100113EA0((uint64_t)a5, v46, v13, 0, 0, (uint64_t)sub_100149BE4, 0, 1016))
          {
            sub_1001020F0((uint64_t)a5);
            uint64_t v47 = sub_100017C48(*((void *)a5 + 8));
            sub_100123384((uint64_t)a5, v47, 7, 0, v13, 0);
            sub_10013F058((uint64_t *)a5, @"userJoinAssociationFailed", v13);
          }
          goto LABEL_86;
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: scan required, no scan properties for network %@", "__WiFiDeviceManagerHandleUserNotificationResponse", [a3 network] message];
        }
        CFRange v53 = v52;
        goto LABEL_99;
      }
      if (qword_10027DD68)
      {
        if (v6) {
          CFStringRef v41 = @"system";
        }
        else {
          CFStringRef v41 = @"user";
        }
        [(id)qword_10027DD68 WFLog:3, "%s: %@ dismissed recommendation %@ current state %@", "__WiFiDeviceManagerHandleUserNotificationResponse", v41, a3, sub_100024BE8(*((_DWORD *)a5 + 820)) message];
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        goto LABEL_51;
      }
      if ([a3 SSID])
      {
        a3 = [a3 SSID];
LABEL_51:
        uint64_t v19 = sub_1000C5D34((const __CFString *)a3);
      }
      else
      {
        uint64_t v19 = 0;
      }
      if (*((_DWORD *)a5 + 820) == 14)
      {
        sub_100102284((uint64_t)a5);
        sub_100003EE4((uint64_t)a5, 1);
        if (*((_DWORD *)a5 + 5) == 1)
        {
          *((_DWORD *)a5 + 48) = 16;
          if (_os_feature_enabled_impl())
          {
            sub_10001FD64((uint64_t)a5, 0x11uLL);
          }
          else
          {
            [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:17 interfaceName:sub_100017C48(*((void *)a5 + 8))];
            sub_1001028E4((uint64_t)a5, 2, (uint64_t)"__WiFiDeviceManagerHandleUserNotificationResponse");
          }
        }
      }
      break;
    case 2:
      CFDictionaryRef v14 = (const void *)sub_100016E20(*((void *)a5 + 8));
      CFDictionaryRef v15 = sub_100018FA8((uint64_t)a5, v14, 1);
      if (!v15) {
        goto LABEL_100;
      }
      unsigned int v13 = v15;
      if (v6 == 3)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: user launched settings for %@", "__WiFiDeviceManagerHandleUserNotificationResponse", a3 message];
        }
        sub_10013ECC8(2, (CFDictionaryRef *)v13);
      }
      else if (v6 == 2)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: user disconnected from %@", "__WiFiDeviceManagerHandleUserNotificationResponse", a3 message];
        }
        sub_100103980((uint64_t)a5, v13);
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: user dismissed join alert for %@", "__WiFiDeviceManagerHandleUserNotificationResponse", a3 message];
        }
      }
LABEL_86:
      uint64_t v19 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v13);
      goto LABEL_87;
    case 3:
      CFStringRef v17 = (const void *)sub_100016E20(*((void *)a5 + 8));
      uint64_t v18 = sub_100018FA8((uint64_t)a5, v17, 1);
      if (!v18) {
        goto LABEL_100;
      }
      unsigned int v13 = v18;
      uint64_t v19 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v18);
      if (v6 == 3) {
        goto LABEL_24;
      }
      if (v6 == 4)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: user disables Low Data Mode for %@", "__WiFiDeviceManagerHandleUserNotificationResponse", a3 message];
        }
        int valuePtr = 2;
        CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
        if (v21)
        {
          CFNumberRef v22 = v21;
          sub_10001C6A4((uint64_t)v13, @"SaveDataMode", v21);
          CFRelease(v22);
          sub_10010C6B4((NSObject **)a5, v13);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: user dismissed low data mode alert for %@", "__WiFiDeviceManagerHandleUserNotificationResponse", a3 message];
        }
      }
      goto LABEL_87;
    case 4:
      double v23 = (const void *)sub_100016E20(*((void *)a5 + 8));
      CFNumberRef v24 = sub_100018FA8((uint64_t)a5, v23, 1);
      if (!v24) {
        goto LABEL_100;
      }
      unsigned int v13 = v24;
      uint64_t v19 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v24);
      if (v6 == 3)
      {
LABEL_24:
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: user launched settings for %@", "__WiFiDeviceManagerHandleUserNotificationResponse", a3 message];
        }
        sub_10013ECC8(2, (CFDictionaryRef *)v13);
      }
LABEL_87:
      CFRelease(v13);
      break;
    case 5:
      id v26 = [objc_alloc((Class)CWFScanResult) initWithScanRecord:[a3 objectForKeyedSubscript:@"ToScanResult"] includeProperties:0];
      id v27 = [objc_alloc((Class)CWFScanResult) initWithScanRecord:[a3 objectForKeyedSubscript:@"FromScanResult"] includeProperties:0];
      if (v6 == 1)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: user joined colocated SSID network %@", "__WiFiDeviceManagerHandleUserNotificationResponse", v26 message];
        }
        uint64_t v29 = sub_1000D1628(v26);
        if (v29)
        {
          char v30 = v29;
          sub_10010222C((uint64_t)a5);
          if (sub_1000C8798((uint64_t)v30))
          {
            id v31 = (const void *)sub_100016E20(*((void *)a5 + 8));
            BOOL v32 = (CFDictionaryRef *)sub_100018FA8((uint64_t)a5, v31, 1);
            if (v32)
            {
              int v33 = v32;
              CFStringRef v34 = sub_1000C62C8(v32);
              if (v34)
              {
                CFStringRef v35 = v34;
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: setting password for network %@", "__WiFiDeviceManagerHandleUserNotificationResponse", sub_10001A43C(v30) message];
                }
                sub_1000C93E0(v30, v35);
                CFRelease(v35);
              }
              CFRelease(v33);
            }
          }
          sub_10013F058((uint64_t *)a5, @"userJoinAssociating", v30);
          int v37 = (const void *)sub_100017C48(*((void *)a5 + 8));
          if (sub_100113EA0((uint64_t)a5, v37, v30, 0, 0, (uint64_t)sub_100149BE4, 0, 1016))
          {
            sub_1001020F0((uint64_t)a5);
            uint64_t v38 = sub_100017C48(*((void *)a5 + 8));
            sub_100123384((uint64_t)a5, v38, 7, 0, v30, 0);
            sub_10013F058((uint64_t *)a5, @"userJoinAssociationFailed", v30);
            sub_100131ECC((uint64_t)a5);
          }
          uint64_t v19 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v30);
          CFRelease(v30);
        }
        else
        {
          uint64_t v19 = 0;
        }
        id v51 = [[-[NSUserDefaults objectForKey:](+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"), "objectForKey:", @"UserDismissedColocatedSSIDTimestamps") mutableCopy];
        if (!v51) {
          id v51 = objc_alloc_init((Class)NSMutableDictionary);
        }
        [v51 setObject:[NSDate now] forKeyedSubscript:+[NSString stringWithFormat:](@"%@", objc_msgSend(v26, "networkName"))];
        [+[NSUserDefaults standardUserDefaults] setObject:v51 forKey:@"UserDismissedColocatedSSIDTimestamps"];
      }
      else
      {
        if (qword_10027DD68)
        {
          if (v6) {
            CFStringRef v42 = @"system";
          }
          else {
            CFStringRef v42 = @"user";
          }
          [(id)qword_10027DD68 WFLog:3, "%s: %@ dismissed colocated SSID notification (scanResult=(%@), state=%@)", "__WiFiDeviceManagerHandleUserNotificationResponse", v42, v26, sub_100024BE8(*((_DWORD *)a5 + 820)) message];
        }
        uint64_t v19 = sub_1000D1628(v26);
        if (!v6)
        {
          id v43 = [[-[NSUserDefaults objectForKey:](+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"), "objectForKey:", @"UserDismissedColocatedSSIDTimestamps") mutableCopy];
          if (!v43) {
            id v43 = objc_alloc_init((Class)NSMutableDictionary);
          }
          [v43 setObject:[NSDate now] forKeyedSubscript:[NSString stringWithFormat:@"%@", [v26 networkName]]];
          [+[NSUserDefaults standardUserDefaults] setObject:v43 forKey:@"UserDismissedColocatedSSIDTimestamps"];

          sub_100131ECC((uint64_t)a5);
        }
      }

      break;
    case 6:
      if (*((_DWORD *)a5 + 820) == 17)
      {
        *((_DWORD *)a5 + 820) = 12;
        int v39 = sub_100149EDC(v10, v6);
        uint64_t v19 = 0;
        *((_DWORD *)a5 + 820) = sub_10013EA48((uint64_t)a5, v39);
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s: Received notification in unexpected state: %@", "__WiFiDeviceManagerHandleUserNotificationResponse", sub_100024BE8(*((_DWORD *)a5 + 820)) message];
        }
        CFRange v53 = v55;
LABEL_99:
LABEL_100:
        uint64_t v19 = 0;
      }
      break;
    default:
      goto LABEL_100;
  }
  CFArrayRef v54 = (void (*)(void *, const void *, uint64_t, uint64_t, void))*((void *)a5 + 585);
  if (v54) {
    v54(a5, v19, v8, v6, *((void *)a5 + 586));
  }
  if (v19) {
    CFRelease(v19);
  }
}

void sub_100108600(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 7080);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 7082);
  uint64_t v4 = (const void *)sub_100017C48(*(void *)(a1 + 64));
  CFDateRef v5 = sub_100018FA8(a1, v4, 1);
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_1000C74BC((uint64_t)v5) && v3 == 0)
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      uint64_t v3 = 0;
      double v9 = *(double *)(a1 + 216);
      double v10 = Current - v9;
      id v11 = "disabled";
      if (v9 != 0.0 && v10 <= 3600.0)
      {
        uint64_t v3 = *(unsigned char *)(a1 + 3448) != 0;
        if (*(unsigned char *)(a1 + 3448)) {
          id v11 = "enabled";
        }
      }
      unsigned int v13 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFDictionaryRef v14 = sub_10001A43C(v6);
        CFDictionaryRef v15 = "enable";
        if (*v2) {
          uint64_t v16 = "enable";
        }
        else {
          uint64_t v16 = "disable";
        }
        if (!v2[1]) {
          CFDictionaryRef v15 = "disable";
        }
        if (*(unsigned char *)(a1 + 3448)) {
          CFStringRef v17 = "primary";
        }
        else {
          CFStringRef v17 = "non-primary";
        }
        [v13 WFLog:3, "%s: %@: attempting to %s WoW and %s LPAS with WoW on Captive %s (%s), last unlocked %.3f seconds ago.", "__WiFiDeviceManagerUpdateWoWOnNetworkCharacteristics", v14, v16, v15, v11, v17, *(void *)&v10 message];
      }
    }
    id v18 = sub_10000AD1C((uint64_t)v6);
    unsigned int v19 = [*(id *)(a1 + 6648) isNetworkInDenyListedState:3 scanResult:v18];

    if (v2[3] != v3 || v2[4] != v19)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: enableWowOnCaptive prev (%d) now (%d), isWoWDenyListed prev (%d) now(%d)\n", "__WiFiDeviceManagerUpdateWoWOnNetworkCharacteristics", v2[3], v3, v2[4], v19];
      }
      sub_10010FBE8(a1, *v2, v2[1], v3, v19);
      void v2[3] = v3;
      void v2[4] = v19;
    }
    CFRelease(v6);
  }
}

uint64_t sub_10010883C(uint64_t a1)
{
  if (a1)
  {
    if (!*(_DWORD *)(a1 + 352)) {
      return 0;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Auto-join has been deferred for %f seconds with reasons=0x%x", CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 368), *(unsigned int *)(a1 + 352));
    }
    uint64_t v3 = 1;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager." args:("__WiFiDeviceManagerIsAutoJoinDeferred")];
    }
    uint64_t v3 = 0;
  }
  return v3;
}

uint64_t sub_100108910(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

BOOL sub_100108918(uint64_t a1)
{
  return *(unsigned char *)(a1 + 24) != 0;
}

unsigned char *sub_100108928(unsigned char *result, char a2, char a3, char a4)
{
  result[32] = a2;
  result[5608] = a3;
  result[35] = a4;
  return result;
}

void sub_10010893C(uint64_t a1, unsigned int a2)
{
  if (byte_10027DDA9)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Lockdown Mode is enabled, ignoring set WiFiAskToJoinPreferenceType %ld", "WiFiDeviceManagerSetAskToJoinPreference", a2);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 108) = a2;
    uint64_t v4 = *(void *)(a1 + 96);
    unsigned int v5 = a2 == 2;
    sub_10016C658(v4, v5);
  }
}

void sub_1001089F0(uint64_t a1, int a2)
{
}

uint64_t sub_1001089F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 164) = a2;
  return result;
}

void sub_100108A00(uint64_t a1, unsigned int a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: disable=%d", "WiFiDeviceManagerSetBlackListDisable", a2];
  }
  uint64_t v6 = *(void **)(a1 + 6648);
  if (a2)
  {
    [v6 removeAllDenyListedItems];
    sub_1001036A4(a1);
    uint64_t v6 = *(void **)(a1 + 6648);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }
  [v6 setEnabled:v7];
}

id sub_100108AB8(uint64_t a1, int a2)
{
  id result = *(id *)(a1 + 7368);
  if (result) {
    return [result setPrivacyRestrictionDisabled:a2 != 0];
  }
  return result;
}

void sub_100108AD0(CFMutableArrayRef *a1, const __CFArray *a2, int a3)
{
  CFArrayRemoveAllValues(a1[449]);
  if (a2 && CFArrayGetCount(a2))
  {
    v7.length = CFArrayGetCount(a2);
    v7.location = 0;
    CFArrayApplyFunction(a2, v7, (CFArrayApplierFunction)sub_100108B6C, a1);
  }
  if (a3)
  {
    sub_10010677C((uint64_t)a1);
  }
}

void sub_100108B6C(const void *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      CFArrayRef v4 = *(const __CFArray **)(a2 + 3592);
      v7.length = CFArrayGetCount(v4);
      v7.location = 0;
      if (!CFArrayContainsValue(v4, v7, a1))
      {
        unsigned int v5 = *(__CFArray **)(a2 + 3592);
        CFArrayAppendValue(v5, a1);
      }
    }
  }
}

id sub_100108BEC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(_DWORD *)(a1 + 5392) = *(_DWORD *)(a1 + 5392) & 0xFFFFFFF3 | (4 * ((a3 >> 2) & 3));
  id result = +[WiFiRoamManager sharedWiFiRoamManager];
  if (result)
  {
    id v6 = +[WiFiRoamManager sharedWiFiRoamManager];
    uint64_t v7 = *(unsigned int *)(a1 + 5392);
    return [v6 setBTState:v7 type:a2];
  }
  return result;
}

void sub_100108C68(uint64_t a1, CFDictionaryRef theDict)
{
  unsigned int valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"MWS_BT_CONNECTION_REPORT_ACL_A2DP");
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  unsigned int v28 = 0;
  CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"MWS_BT_CONNECTION_REPORT_ESCO");
  CFNumberGetValue(v5, kCFNumberIntType, &v28);
  unsigned int v27 = 0;
  CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"MWS_BT_CONNECTION_REPORT_HID");
  CFNumberGetValue(v6, kCFNumberIntType, &v27);
  HIDWORD(v26) = 0;
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"MWS_BT_CONNECTION_REPORT_2G_AoS_UNI");
  CFNumberGetValue(v7, kCFNumberIntType, (char *)&v26 + 4);
  LODWORD(v26) = 0;
  CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"MWS_BT_CONNECTION_REPORT_5G_AoS_UNI");
  CFNumberGetValue(v8, kCFNumberIntType, &v26);
  HIDWORD(v25) = 0;
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"MWS_BT_CONNECTION_REPORT_2G_AoS_BI");
  CFNumberGetValue(v9, kCFNumberIntType, (char *)&v25 + 4);
  LODWORD(v25) = 0;
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"MWS_BT_CONNECTION_REPORT_5G_AoS_BI");
  CFNumberGetValue(v10, kCFNumberIntType, &v25);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: A2DP: %d eSCO: %d HID: %d 2GHz AoS Uni: %d 5GHz AoS Uni: %d 2GHz AoS Bi: %d 5GHz AoS Bi: %d ", "WiFiDeviceManagerSetBluetoothConnectionsReport", valuePtr, v28, v27, HIDWORD(v26), v26, HIDWORD(v25), v25);
  }
  int v12 = *(_DWORD *)(a1 + 5392);
  BOOL v13 = (v12 & 2) != valuePtr;
  if (valuePtr) {
    BOOL v14 = (v12 & 2) != valuePtr;
  }
  else {
    BOOL v14 = 0;
  }
  if (valuePtr) {
    BOOL v15 = 0;
  }
  else {
    BOOL v15 = (v12 & 2) != 0;
  }
  unsigned int v16 = HIDWORD(v26) + v28;
  int v17 = -HIDWORD(v25);
  if (((v12 & 1) == 0) == (HIDWORD(v26) + v28 + HIDWORD(v25) != 0))
  {
    if (v16 == v17) {
      BOOL v15 = 1;
    }
    else {
      BOOL v14 = 1;
    }
    BOOL v13 = 1;
  }
  *(_DWORD *)(a1 + 5392) = v12 & 0xFFFFFFFC | (2 * (valuePtr != 0)) | (v16 != v17);
  *(_DWORD *)(a1 + 5400) = v27 != 0;
  *(_DWORD *)(a1 + 5396) = 102;
  if (v13)
  {
    uint64_t v18 = *(void *)(a1 + 64);
    unsigned int v19 = (const void *)sub_100017C48(v18);
    sub_10006BFE4(v18, v19, 0x66u, *(_DWORD *)(a1 + 5392));
  }
  if (+[WiFiRoamManager sharedWiFiRoamManager]) {
    [+[WiFiRoamManager sharedWiFiRoamManager](WiFiRoamManager, "sharedWiFiRoamManager") setBTState:*(unsigned int *)(a1 + 5392) type:102];
  }
  *(_DWORD *)(a1 + 192) = 2;
  if (v15)
  {
    if (_os_feature_enabled_impl())
    {
      sub_10001FD64(a1, 0x18uLL);
    }
    else
    {
      [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:24 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
      sub_1001028E4(a1, 1, (uint64_t)"WiFiDeviceManagerSetBluetoothConnectionsReport");
    }
  }
  CFArrayRef v20 = *(void **)(a1 + 7368);
  if (v20)
  {
    LOBYTE(v24) = (v26 | v25) != 0;
    [v20 setBluetoothState:*(_DWORD *)(a1 + 5392) != 0 connectedDeviceCount:v27 inA2dp:valuePtr != 0 inSco:v28 != 0 inUniAoS:v26 != 0 inBiAoS:v25 != 0 btAudioBand:v24];
  }
  if (v14)
  {
    uint64_t v21 = sub_100017C48(*(void *)(a1 + 64));
    CFNumberRef v22 = *(void (**)(uint64_t, uint64_t, void))(a1 + 4376);
    if (v22)
    {
      v22(a1, v21, *(void *)(a1 + 4384));
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Signal WiFi to Reset 24GHz M1M4 Handshake Count to Zero"];
      }
    }
  }
}

void sub_100108FD4(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: %@", "WiFiDeviceManagerSetCoexBlacklistedChannels", a2 message];
    }
    CFNumberRef v5 = *(const void **)(a1 + 56);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 56) = 0;
    }
    if (a2)
    {
      *(void *)(a1 + 56) = CFRetain(a2);
      uint64_t v6 = *(void *)(a1 + 64);
      CFNumberRef v7 = (const void *)sub_10005FC0C(v6);
      sub_10006F2E0(v6, v7, *(const __CFArray **)(a1 + 56));
      if (*(void *)(a1 + 7368))
      {
        CFNumberRef value = 0;
        unsigned int valuePtr = 0;
        if (CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) < 1)
        {
          uint64_t v13 = 0;
          uint64_t v12 = 0;
          uint64_t v11 = 0;
          uint64_t v10 = 0;
          uint64_t v9 = 0;
        }
        else
        {
          CFIndex v8 = 0;
          uint64_t v9 = 0;
          uint64_t v10 = 0;
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          do
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v8);
            if (ValueAtIndex)
            {
              CFDictionaryGetValueIfPresent(ValueAtIndex, @"MWS_Channel_Number", (const void **)&value);
              if (value)
              {
                CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
                if (valuePtr)
                {
                  if ((int)valuePtr > 13)
                  {
                    if (valuePtr > 0x33)
                    {
                      if (valuePtr > 0x63)
                      {
                        if (valuePtr > 0x94) {
                          ++v9;
                        }
                        else {
                          ++v10;
                        }
                      }
                      else
                      {
                        ++v11;
                      }
                    }
                    else
                    {
                      ++v12;
                    }
                  }
                  else
                  {
                    ++v13;
                  }
                }
              }
            }
            ++v8;
          }
          while (CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) > v8);
        }
        [*(id *)(a1 + 7368) addSoftApCoexEvent:v13 deniedUnii1ChannelMap:v12 deniedUnii2aChannelMap:v11 deniedUnii2cChannelMap:v10 deniedUnii3ChannelMap:v9];
      }
    }
  }
}

__CFArray *sub_10010919C(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t valuePtr = 0;
  double v94 = 0.0;
  unsigned int v92 = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: manager is NULL!", "WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse")];
    }
    goto LABEL_45;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: request is NULL!", "WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse")
    }
    goto LABEL_45;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Processing Request:%@", "WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse", a2 message];
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a2, @"AddTrigger");
  if (Value)
  {
    CFDictionaryRef v7 = Value;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Processing WiFiDeviceManagerProcessWoWBlacklistCommand: AddTrigger", @"WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse"];
    }
    CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(v7, @"triggerReason");
    if (v9)
    {
      CFNumberGetValue(v9, kCFNumberSInt32Type, (char *)&valuePtr + 4);
      uint64_t v10 = CFDictionaryGetValue(v7, @"SSID_STR");
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v87 = v4;
        uint64_t v12 = CFDictionaryGetValue(v7, @"BSSID");
        uint64_t v13 = HIDWORD(valuePtr);
        if (CFArrayGetCount(*(CFArrayRef *)(a1 + 3528)) < 1) {
          goto LABEL_18;
        }
        CFIndex v14 = 0;
        int v15 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3528), v14);
          int v17 = sub_10001A43C(ValueAtIndex);
          if (CFEqual(v17, v11))
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3, "%s: Processing WiFiDeviceManagerProcessWoWBlacklistCommand: AddTrigger", "__WiFiDeviceManagerWoWBlacklistingTestAddTrigger"];
            }
            id v19 = sub_10000AD1C((uint64_t)ValueAtIndex);
            id v20 = sub_100103A84(a1, v13, 0, (uint64_t)v12, 3);
            [*(id *)(a1 + 6648) setNetworkDenyListInfo:v20 forScanResult:v19];

            int v15 = 1;
          }
          ++v14;
        }
        while (CFArrayGetCount(*(CFArrayRef *)(a1 + 3528)) > v14);
        if (!v15)
        {
LABEL_18:
          if (CFArrayGetCount(*(CFArrayRef *)(a1 + 3536)) >= 1)
          {
            CFIndex v21 = 0;
            do
            {
              CFNumberRef v22 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3536), v21);
              double v23 = sub_10001A43C(v22);
              if (CFEqual(v23, v11))
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:@"%s: Processing WiFiDeviceManagerProcessWoWBlacklistCommand: AddTrigger" message:3];
                }
                id v25 = sub_10000AD1C((uint64_t)v22);
                id v26 = sub_100103A84(a1, v13, 0, (uint64_t)v12, 3);
                [*(id *)(a1 + 6648) setNetworkDenyListInfo:v26 forScanResult:v25];
              }
              ++v21;
            }
            while (CFArrayGetCount(*(CFArrayRef *)(a1 + 3536)) > v21);
          }
        }
        CFStringRef Copy = 0;
        CFArrayRef v4 = v87;
        goto LABEL_88;
      }
LABEL_110:
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: SSID is NULL!" args:("WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse")];
      }
      goto LABEL_45;
    }
LABEL_108:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: triggerReason not present", "WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse"];
    }
    goto LABEL_45;
  }
  CFDictionaryRef v28 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"ConfigThreshold");
  if (v28)
  {
    CFDictionaryRef v29 = v28;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Processing WiFiDeviceManagerProcessWoWBlacklistCommand: ConfigThreshold", "WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse"];
    }
    CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(v29, @"triggerReason");
    if (v31)
    {
      CFNumberGetValue(v31, kCFNumberSInt32Type, (char *)&valuePtr + 4);
      CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(v29, @"perBSSIDThresh");
      if (v32)
      {
        CFNumberGetValue(v32, kCFNumberSInt32Type, &valuePtr);
        [*(id *)(a1 + 6648) setDenyListingThresholds:SHIDWORD(valuePtr) value:valuePtr forSSIDThresholds:0];
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: perBSSIDThresh not present", "WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse"];
        }
      }
      CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue(v29, @"perSSIDThresh");
      if (v39)
      {
        CFNumberGetValue(v39, kCFNumberSInt32Type, &v92);
        [*(id *)(a1 + 6648) setDenyListingThresholds:SHIDWORD(valuePtr) value:v92 forSSIDThresholds:1];
LABEL_46:
        CFStringRef Copy = 0;
        goto LABEL_88;
      }
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:message:3, "%s: perSSIDThresh not present", "WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse"];
      }
LABEL_45:
      goto LABEL_46;
    }
    goto LABEL_108;
  }
  if (CFDictionaryContainsKey(a2, @"copyWoWBlacklistedNetworks"))
  {
    CFStringRef v34 = (const __CFString *)[*(id *)(a1 + 6648) denyListedNetworkSSIDs:3];
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: wowBlacklistedNetworksSsidList: %@", "__WiFiDeviceManagerWoWBlacklistCopyBlacklistedNetworksString", v34 message];
    }
    CFStringRef Copy = (__CFArray *)CFStringCreateCopy(kCFAllocatorDefault, v34);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: blacklist:%@", "WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse", Copy message];
    }
    int v37 = v36;
    goto LABEL_87;
  }
  CFDictionaryRef v40 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"copyWoWBlacklistedNetworkProblemList");
  if (!v40)
  {
    if (CFDictionaryContainsKey(a2, @"copyBlacklistHistoryDump"))
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Processing WiFiDeviceManagerProcessWoWBlacklistCommand: copyBlacklistHistoryDump", "WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse")];
      }
      [*(id *)(a1 + 6648) removeExpiredDenyListedState:3];
      long long v74 = sub_100109CA8(a1);
    }
    else
    {
      CFDictionaryRef v75 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"configTimeout");
      if (v75)
      {
        CFDictionaryRef v76 = v75;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Processing WiFiDeviceManagerProcessWoWBlacklistCommand: configTimeout:%@", "WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse", v76 message];
        }
        CFNumberRef v78 = (const __CFNumber *)CFDictionaryGetValue(v76, @"timeoutValue");
        if (v78)
        {
          if (CFNumberGetValue(v78, kCFNumberDoubleType, &v94)) {
            [*(id *)(a1 + 6648) setDenyListedStateExpiryIntervalInSec:3 state:v94];
          }
          goto LABEL_46;
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: numref is NULL!", "WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse")];
        }
        goto LABEL_45;
      }
      if (!CFDictionaryContainsKey(a2, @"copyWoWBlacklistThreshold")) {
        goto LABEL_46;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Processing WiFiDeviceManagerProcessWoWBlacklistCommand: copyWoWBlacklistThreshold", "WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse")];
      }
      long long v74 = sub_10010A240(a1);
    }
    CFStringRef Copy = v74;
    goto LABEL_88;
  }
  CFDictionaryRef v41 = v40;
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: Processing WiFiDeviceManagerProcessWoWBlacklistCommand: copyWoWBlacklistedNetworkProblemList", @"WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse"];
  }
  CFTypeRef cf1 = CFDictionaryGetValue(v41, @"SSID_STR");
  if (!cf1) {
    goto LABEL_110;
  }
  CFStringRef Copy = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!Copy)
  {
    unsigned int v81 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_120;
    }
    int v82 = "%s: problematicState is NULL!";
LABEL_116:
    uint64_t v83 = 3;
LABEL_119:
    [v81 WFLog:v83 message:v82 __WiFiDeviceManagerCopyWoWDenyListProblemList];
    goto LABEL_120;
  }
  id v86 = [*(id *)(a1 + 6648) networksInDenyListedState:3];
  if (!v86)
  {
    unsigned int v81 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_120;
    }
    int v82 = "%s: networkDenyListTimestamps is NULL";
    goto LABEL_116;
  }
  id v44 = objc_alloc_init((Class)NSMutableArray);
  if (!v44)
  {
    unsigned int v81 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      int v82 = "%s: networkDenyListTimestampList is NULL";
      uint64_t v83 = 4;
      goto LABEL_119;
    }
LABEL_120:
    CFIndex v45 = 0;
LABEL_121:

    goto LABEL_86;
  }
  CFIndex v45 = v44;
  id contexta = objc_alloc_init((Class)NSMutableArray);
  if (!contexta)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: networkDenyListReasonDataList is NULL", @"__WiFiDeviceManagerCopyWoWDenyListProblemList"];
    }
    goto LABEL_121;
  }
  CFIndex v46 = v86;
  if (![v86 count]) {
    goto LABEL_85;
  }
  uint64_t v84 = v43;
  uint64_t v88 = v4;
  CFArrayRef theArray = Copy;
  unint64_t v47 = 0;
  do
  {
    id v48 = [v46 objectAtIndex:v47];
    CFStringRef v49 = sub_1000D1628(v48);
    CFStringRef v50 = sub_10001A43C(v49);
    if (CFEqual(cf1, v50))
    {
      id v51 = [*(id *)(a1 + 6648) reasonsForNetworkInDenyListedState:v48 state:3 timestamps:v45 reasonData:contexta];
      if (v51)
      {
        CFArrayRef v52 = v51;
        id v53 = [v51 count];
        if (v53 == [v45 count])
        {
          id v54 = [v52 count];
          if (v54 == [contexta count])
          {
            if ([v52 count])
            {
              uint64_t v55 = 0;
              while (1)
              {
                CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                if (!Mutable)
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:4, @"%s: problematicEntry fail", @"__WiFiDeviceManagerCopyWoWDenyListProblemList"];
                  }
                  goto LABEL_69;
                }
                uint64_t v57 = Mutable;
                id v58 = [v45 objectAtIndex:v55];
                uint64_t v97 = -1;
                [v58 doubleValue];
                uint64_t v97 = v59;
                CFNumberRef v60 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &v97);
                if (!v60) {
                  break;
                }
                CFNumberRef v61 = v60;
                CFDictionaryAddValue(v57, @"problematicStateEntryTimestamp", v60);
                CFRelease(v61);
                id v62 = [v52 objectAtIndex:v55];
                unsigned int v96 = -1431655766;
                unsigned int v96 = [v62 unsignedIntegerValue];
                CFNumberRef v63 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v96);
                if (!v63)
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:4, @"%s: kWiFiNetworkProblematicStateEntryReason fail", @"__WiFiDeviceManagerCopyWoWDenyListProblemList"];
                  }
                  unsigned int v71 = v70;
                  goto LABEL_82;
                }
                CFNumberRef v64 = v63;
                CFDictionaryAddValue(v57, @"problematicStateEntryReason", v63);
                CFRelease(v64);
                id v65 = [contexta objectAtIndex:v55];
                unsigned int v95 = -1431655766;
                unsigned int v95 = [v65 integerValue];
                CFNumberRef v66 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v95);
                if (!v66)
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:4, @"%s: kWiFiNetworkProblematicStateEntryReasonData fail", @"__WiFiDeviceManagerCopyWoWDenyListProblemList"];
                  }
                  goto LABEL_81;
                }
                CFNumberRef v67 = v66;
                CFDictionaryAddValue(v57, @"problematicStateEntryReasonData", v66);
                CFRelease(v67);
                CFArrayAppendValue(theArray, v57);
LABEL_68:
                CFRelease(v57);
LABEL_69:
                if (++v55 >= (unint64_t)[v52 count]) {
                  goto LABEL_83;
                }
              }
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4, @"%s: kWiFiNetworkProblematicStateEntryTimestamp fail", @"__WiFiDeviceManagerCopyWoWDenyListProblemList"];
              }
LABEL_81:
              unsigned int v71 = v69;
LABEL_82:
              goto LABEL_68;
            }
          }
        }
      }
    }
LABEL_83:
    [contexta removeAllObjects];
    [v45 removeAllObjects];
    ++v47;
    CFIndex v46 = v86;
  }
  while (v47 < (unint64_t)[v86 count]);
  CFArrayRef v4 = v88;
  CFStringRef Copy = theArray;
  id v43 = v84;
LABEL_85:

LABEL_86:
  int v37 = v43;
LABEL_87:
LABEL_88:
  return Copy;
}

__CFArray *sub_100109CA8(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: denyListHistory is NULL", @"__WiFiDeviceManagerCopyWoWDenyListingHistory"];
    }
    goto LABEL_62;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: manager is NULL!"];
    }
    goto LABEL_62;
  }
  id v4 = [*(id *)(a1 + 6648) networksInDenyListedStateHistory:3];
  if (!v4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: networkDenyListedNetworks is NULL", @"__WiFiDeviceManagerCopyWoWDenyListingHistory"];
    }
LABEL_62:
    goto LABEL_55;
  }
  CFNumberRef v5 = v4;
  SCDynamicStoreContext context = v2;
  if ([v4 count])
  {
    uint64_t v6 = 0;
    id v44 = Mutable;
    CFIndex v46 = v5;
    uint64_t v47 = a1;
    while (1)
    {
      int valuePtr = 0;
      id v7 = [v5 objectAtIndex:v6];
      CFIndex v8 = sub_1000D1628(v7);
      CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (!v9)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: results is NULL" args:("__WiFiDeviceManagerCopyWoWDenyListingHistory", nil)];
        }
        goto LABEL_46;
      }
      uint64_t v10 = v9;
      uint64_t v11 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v8);
      CFArrayRef v12 = sub_1000194F8(a1, v11, 1);
      CFArrayRef v13 = v12;
      if (!v11 || !v12)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: mergedNetwork is NULL", @"__WiFiDeviceManagerCopyWoWDenyListingHistory"];
        }
        if (!v13) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }
      BOOL v14 = sub_1000C8140((uint64_t)v12);
      BOOL v15 = sub_10001FC1C((uint64_t)v13);
      unsigned int v16 = sub_10001A43C(v11);
      CFDictionaryAddValue(v10, @"SSID_STR", v16);
      LOBYTE(valuePtr) = sub_1000C8A5C((uint64_t)v8);
      int valuePtr = valuePtr;
      int v17 = sub_1000CD794((uint64_t)v8) << 8;
      if (!v15 || !v14) {
        int v19 = 0;
      }
      else {
        int v19 = 0x10000;
      }
      valuePtr |= v17 | v19;
      CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
      if (v20)
      {
        CFNumberRef v21 = v20;
        CFDictionaryAddValue(v10, @"wowBlacklistedNetworkFlags", v20);
        CFRelease(v21);
      }
      id v22 = objc_alloc_init((Class)NSMutableArray);
      a1 = v47;
      if (!v22)
      {
        CFNumberRef v5 = v46;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, @"%s: networkDenyListTimestamps is NULL", @"__WiFiDeviceManagerCopyWoWDenyListingHistory"];
        }
LABEL_43:
        CFRelease(v13);
        goto LABEL_44;
      }
      double v23 = v22;
      id v24 = [*(id *)(v47 + 6648) denyListedReasonHistoryForNetwork:v7 state:3 timestamps:v22 reasonData:0];
      if (!v24) {
        goto LABEL_34;
      }
      id v25 = v24;
      id v26 = [v24 count];
      if (v26 != [v23 count]) {
        goto LABEL_34;
      }
      CFMutableArrayRef v27 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (v27) {
        break;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: denyListingHistoryRecord is NULL", @"__WiFiDeviceManagerCopyWoWDenyListingHistory"];
      }
      a1 = v47;
LABEL_35:
      CFRelease(v23);
      CFNumberRef v5 = v46;
      if (v13) {
        goto LABEL_43;
      }
LABEL_44:
      if (v11) {
        CFRelease(v11);
      }
LABEL_46:
      if (++v6 >= (unint64_t)[v5 count]) {
        goto LABEL_54;
      }
    }
    CFDictionaryRef v28 = v27;
    if ([v25 count])
    {
      unint64_t v29 = 0;
      do
      {
        CFMutableDictionaryRef v30 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (v30)
        {
          CFNumberRef v31 = v30;
          id v32 = [v25 objectAtIndex:v29];
          unsigned int v49 = -1431655766;
          unsigned int v49 = [v32 unsignedIntegerValue];
          CFNumberRef v33 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v49);
          CFDictionaryAddValue(v31, @"wowBlacklistingReason", v33);
          if (v33) {
            CFRelease(v33);
          }
          id v34 = [v23 objectAtIndex:v29];
          uint64_t v48 = -1;
          [v34 doubleValue];
          uint64_t v48 = v35;
          CFNumberRef v36 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &v48);
          CFDictionaryAddValue(v31, @"wowBlacklistingTimeStamp", v36);
          if (v36) {
            CFRelease(v36);
          }
          CFArrayAppendValue(v28, v31);
          CFRelease(v31);
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: results is NULL" : @"__WiFiDeviceManagerCopyWoWDenyListingHistory"];
          }
        }
        ++v29;
      }
      while (v29 < (unint64_t)[v25 count]);
    }
    CFDictionaryAddValue(v10, @"wowBlackListingHistory", v28);
    CFRelease(v28);
    CFMutableDictionaryRef Mutable = v44;
    a1 = v47;
LABEL_34:
    CFArrayAppendValue(Mutable, v10);
    CFRelease(v10);
    goto LABEL_35;
  }
LABEL_54:
  CFArrayGetCount(Mutable);
  uint64_t v2 = context;
LABEL_55:
  return Mutable;
}

__CFArray *sub_10010A240(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: manager is NULL", @"__WiFiDeviceManagerWoWBlacklistCopyThresholds"];
    }
    goto LABEL_37;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: response is NULL", "__WiFiDeviceManagerWoWBlacklistCopyThresholds"];
    }
LABEL_37:
    id v4 = 0;
LABEL_41:
    uint64_t v6 = 0;
LABEL_45:
    CFIndex v8 = 0;
    goto LABEL_17;
  }
  id v4 = Mutable;
  CFMutableDictionaryRef v5 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v5)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: perSSIDInfo is NULL", @"__WiFiDeviceManagerWoWBlacklistCopyThresholds"];
    }
    goto LABEL_41;
  }
  uint64_t v6 = v5;
  CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v7)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: perBSSIDInfo is NULL", "__WiFiDeviceManagerWoWBlacklistCopyThresholds"];
    }
    goto LABEL_45;
  }
  CFIndex v8 = v7;
  CFArrayRef theArray = v4;
  uint64_t v35 = v2;
  for (uint64_t i = 0; i != 10; ++i)
  {
    unsigned __int8 valuePtr = -86;
    unsigned __int8 valuePtr = [[objc_msgSend(objc_msgSend(*(id *)(a1 + 6648), "SSIDThresholds"), "objectAtIndexedSubscript:", i) unsignedIntegerValue];
    unsigned __int8 v37 = -86;
    unsigned __int8 v37 = [[objc_msgSend(objc_msgSend(*(id *)(a1 + 6648), "BSSIDThresholds"), "objectAtIndexedSubscript:", i) unsignedIntegerValue];
    CFStringRef v10 = (const __CFString *)CWFStringFromDenyListAddReason();
    CFMutableStringRef v11 = CFStringCreateMutable(kCFAllocatorDefault, 0);
    if (!v11)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: keyStrRefSsid is NULL", @"__WiFiDeviceManagerWoWBlacklistCopyThresholds"];
      }
      goto LABEL_32;
    }
    CFArrayRef v12 = v11;
    CFMutableStringRef v13 = CFStringCreateMutable(kCFAllocatorDefault, 0);
    if (!v13)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: keyStrRefBssid is NULL" args:("__WiFiDeviceManagerWoWBlacklistCopyThresholds")];
      }
      CFMutableArrayRef v27 = v12;
LABEL_31:
      CFRelease(v27);
LABEL_32:
      id v4 = theArray;
      uint64_t v2 = v35;
      goto LABEL_17;
    }
    BOOL v14 = v13;
    CFStringAppend(v12, @"PerSSID ");
    CFStringAppend(v12, v10);
    CFNumberRef v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
    if (!v15
      || (CFNumberRef v16 = v15,
          CFDictionaryAddValue(v6, v12, v15),
          CFRelease(v16),
          CFStringAppend(v14, @"PerBSSID "),
          CFStringAppend(v14, v10),
          (CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &v37)) == 0))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: numRef is NULL", @"__WiFiDeviceManagerWoWBlacklistCopyThresholds"];
      }
      CFRelease(v12);
      CFMutableArrayRef v27 = v14;
      goto LABEL_31;
    }
    CFNumberRef v18 = v17;
    CFDictionaryAddValue(v8, v14, v17);
    CFRelease(v18);
    CFRelease(v12);
    CFRelease(v14);
  }
  id v4 = theArray;
  CFArrayAppendValue(theArray, v6);
  CFArrayAppendValue(theArray, v8);
  [*(id *)(a1 + 6648) wowDenyListExpiry];
  uint64_t v36 = v19;
  CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &v36);
  if (v20)
  {
    CFNumberRef v21 = v20;
    id v22 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (v22)
    {
      double v23 = v22;
      CFDictionarySetValue(v22, @"unBlacklistingTimeoutInSec", v21);
      CFArrayAppendValue(theArray, v23);
      CFRelease(v23);
    }
    CFRelease(v21);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: response:%@", "__WiFiDeviceManagerWoWBlacklistCopyThresholds", theArray message];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: numRef is NULL" : @"__WiFiDeviceManagerWoWBlacklistCopyThresholds" : v33];
    }
  }
  uint64_t v2 = v35;
LABEL_17:
  CFRelease(@"PerSSID ");
  CFRelease(@"PerBSSID ");
  if (v6) {
    CFRelease(v6);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v4;
}

uint64_t sub_10010A740(uint64_t a1)
{
  return *(void *)(a1 + 3512);
}

CFArrayRef sub_10010A748(uint64_t a1, const void *a2)
{
  return sub_1000194F8(a1, a2, 1);
}

uint64_t sub_10010A750(uint64_t a1)
{
  return *(void *)(a1 + 3648);
}

void sub_10010A758(uint64_t a1, const void *a2)
{
  id v4 = *(const void **)(a1 + 3648);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 3648) = 0;
  }
  if (a2)
  {
    CFArrayRef v5 = sub_1000194F8(a1, a2, 1);
    *(void *)(a1 + 3648) = v5;
    if (!v5) {
      *(void *)(a1 + 3648) = CFRetain(a2);
    }
  }
}

void sub_10010A7B4(uint64_t a1, const void **a2)
{
  if (a2 && *(void *)(a1 + 7368))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_10010AC28;
    v3[3] = &unk_100241558;
    void v3[4] = a1;
    sub_10010A88C(a1, a2, (uint64_t)v3);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s Error notifying UsageMonitor" args:("WiFiDeviceManagerProcessKnownNetworkRemoval", nil)];
    }
  }
}

void sub_10010A88C(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v38 = 0;
  CFNumberRef v39 = &v38;
  uint64_t v40 = 0x2020000000;
  uint64_t v41 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = &v34;
  uint64_t v36 = 0x2020000000;
  uint64_t v37 = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager", @"__WiFiDeviceManagerCreateNetworkDetailsForUsageMonitor"];
    }
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null network" : @"__WiFiDeviceManagerCreateNetworkDetailsForUsageMonitor"];
    }
  }
  if (a3)
  {
    if (a1 && a2 && !byte_10027DDA8)
    {
      CFIndex v8 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)a2);
      v39[3] = (uint64_t)v8;
      CFMutableDictionaryRef v9 = sub_10001A5A8(*(const __CFArray **)(a1 + 3704), a2);
      if (v9)
      {
        CFStringRef v10 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v9);
        v35[3] = (uint64_t)v10;
      }
      CFDictionaryRef v11 = *(const __CFDictionary **)(a1 + 3616);
      if (v11)
      {
        CFArrayRef v12 = sub_10001A43C(a2);
        BOOL v13 = CFDictionaryGetValue(v11, v12) != 0;
      }
      else
      {
        BOOL v13 = 0;
      }
      id v15 = sub_100005420(a1);
      id v16 = *(id *)(a1 + 8768);
      id v17 = *(id *)(a1 + 8776);
      id v18 = *(id *)(a1 + 8784);
      *(_DWORD *)buffer = 0;
      CFStringRef v19 = *(const __CFString **)(a1 + 7352);
      if (v19)
      {
        v42.length = CFStringGetLength(*(CFStringRef *)(a1 + 7352));
        v42.location = 0;
        CFStringGetBytes(v19, v42, 0x8000100u, 0, 0, buffer, 4, 0);
      }
      int v25 = sub_100019AD4(a1, (const void *)v39[3]);
      id v26 = v18;
      uint64_t v20 = *(unsigned __int8 *)(a1 + 7360);
      CFNumberRef v21 = *(void **)(a1 + 7376);
      if (v21)
      {
        unsigned __int8 v22 = [v21 isAtPrimaryHomeLocation];
        unsigned __int8 v23 = [*(id *)(a1 + 7376) isAtNonPrimaryHomeLocation];
      }
      else
      {
        unsigned __int8 v22 = 0;
        unsigned __int8 v23 = 0;
      }
      id v24 = sub_10012CD64(a1);
      CFRetain((CFTypeRef)a1);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10014A974;
      block[3] = &unk_100241CD8;
      void block[10] = &v38;
      block[11] = &v34;
      void block[4] = v24;
      void block[5] = v15;
      void block[6] = v16;
      void block[7] = v17;
      BOOL v30 = v13;
      int v28 = *(_DWORD *)buffer;
      int v29 = v25;
      block[12] = a1;
      block[13] = v20;
      unsigned __int8 v31 = v22;
      unsigned __int8 v32 = v23;
      void block[8] = v26;
      block[9] = a3;
      dispatch_async((dispatch_queue_t)qword_10027DD88, block);
    }
    else
    {
      (*(void (**)(uint64_t, void))(a3 + 16))(a3, 0);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null callbackBlock" : @"__WiFiDeviceManagerCreateNetworkDetailsForUsageMonitor"];
    }
  }
  _Block_object_dispose(&v34, 8);
  _Block_object_dispose(&v38, 8);
}

void sub_10010ABDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_10010AC28(uint64_t a1, void *a2)
{
  if (a2)
  {
    [*(id *)(*(void *)(a1 + 32) + 7368) setForgetNetworkEvent:a2 forInterface:sub_100017C48(*(void *)(*(void *)(a1 + 32) + 64))];
  }
}

CFArrayRef sub_10010AC8C(uint64_t a1, const void *a2)
{
  return sub_1000194F8(a1, a2, 0);
}

void sub_10010AC94(void *a1, const void *a2, CFTypeRef cf)
{
  if (a1)
  {
    if (cf)
    {
      if (a2)
      {
        uint64_t v6 = (const void *)a1[774];
        if (v6)
        {
          CFRelease(v6);
          a1[774] = 0;
        }
        CFMutableDictionaryRef v7 = (const void *)a1[775];
        if (v7)
        {
          CFRelease(v7);
          a1[775] = 0;
        }
        a1[774] = CFRetain(cf);
        a1[775] = CFRetain(a2);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: cellular (%@) carrier name updated to %@", "WiFiDeviceManagerSetCellularCarrierName", a2, cf message];
        }
        CFMutableDictionaryRef v9 = (void *)a1[921];
        if (v9 && a1[775])
        {
          [v9 setSecondaryInterfaceName:];
        }
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null ifName.", @"WiFiDeviceManagerSetCellularCarrierName"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null carrierName.", @"WiFiDeviceManagerSetCellularCarrierName"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager." : @"WiFiDeviceManagerSetCellularCarrierName"];
    }
  }
}

void sub_10010AE40(uint64_t a1, int a2)
{
  if (a1)
  {
    if (qword_10027DD68)
    {
      CFArrayRef v5 = "is 5G";
      if (!a2) {
        CFArrayRef v5 = "is Not 5G";
      }
      [((id)qword_10027DD68) WFLog:message:3, "%s: cellular Type %s \n", "WiFiDeviceManagerSetCellularRadioType5G", v5];
    }
    *(unsigned char *)(a1 + 7043) = a2;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager.", @"WiFiDeviceManagerSetCellularRadioType5G"];
    }
  }
}

void sub_10010AF1C(uint64_t a1, int a2)
{
  if (a1)
  {
    id v4 = (unsigned __int8 *)(a1 + 5216);
    *(_DWORD *)(a1 + 7052) = a2;
    uint64_t v6 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      if (a2 == 2) {
        CFMutableDictionaryRef v7 = "5GHz";
      }
      else {
        CFMutableDictionaryRef v7 = "2.4GHz";
      }
      uint64_t v8 = *v4;
      CFIndex Count = CFSetGetCount(*(CFSetRef *)(a1 + 5288));
      CFIndex v10 = CFSetGetCount(*(CFSetRef *)(a1 + 5296));
      CFIndex v11 = CFSetGetCount(*(CFSetRef *)(a1 + 5304));
      [v6 WFLog:3 message:@"%s:NAN Concurrency SoftAP Preferred Band update to %s while misChannel=%d and Clients connected (Broadcast:%ld, Hidden:%ld Other Hidden %ld NanLink %ld)\n", "WiFiDeviceManagerSetSoftAPNANCocurrencyPreferredBand", v7, v8, Count, v10, v11, CFSetGetCount(*(CFSetRef *)(a1 + 5312))];
    }
    if (a2 != 2 && *v4 >= 0xFu && v4[3])
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s:Restart legacy softAP to move to %s\n", "WiFiDeviceManagerSetSoftAPNANCocurrencyPreferredBand", "2.4GHz")];
      }
      sub_10010B10C(a1, 0);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: manager is NULL", @"WiFiDeviceManagerSetSoftAPNANCocurrencyPreferredBand"];
    }
  }
}

void sub_10010B10C(uint64_t a1, int a2)
{
  if (sub_10010EB14(a1) && *(unsigned char *)(a1 + 5219))
  {
    *(unsigned char *)(a1 + 5223) = 1;
    if (CFSetGetCount(*(CFSetRef *)(a1 + 5272)) > 0 || CFSetGetCount(*(CFSetRef *)(a1 + 5288)) >= 1) {
      *(unsigned char *)(a1 + 5224) = 1;
    }
    if ([*(id *)(a1 + 6752) isNANPublisherStarted] == 1)
    {
      *(unsigned char *)(a1 + 5387) = a2 != 0;
      *(unsigned char *)(a1 + 5388) = a2 == 0;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Stopping MIS misRestartNanPhs=%d misKeepNanPhsDuringMISStop=%d", "WiFiDeviceManagerRestartSoftAP", *(unsigned __int8 *)(a1 + 5387), *(unsigned __int8 *)(a1 + 5388));
    }
    sub_10010E474(a1);
  }
}

id sub_10010B218(uint64_t a1, int a2, int a3)
{
  id result = *(id *)(a1 + 120);
  if (result)
  {
    sub_100036344((uint64_t)result, a2);
    id result = *(id *)(a1 + 7368);
    if (result)
    {
      [result enableXCTestNotifications];
      uint64_t v6 = *(void **)(a1 + 7368);
      return [v6 enableSubmitAnalyticsNoSampling:a3 != 0];
    }
  }
  return result;
}

void sub_10010B27C(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 7048);
  int v5 = a2 != 0;
  *(_DWORD *)(a1 + 7048) = v5;
  if (!a2 && v4 != v5 && *(unsigned char *)(a1 + 5219))
  {
    if (CFSetGetCount(*(CFSetRef *)(a1 + 5288)) > 0
      || CFSetGetCount(*(CFSetRef *)(a1 + 5296)) > 0
      || CFSetGetCount(*(CFSetRef *)(a1 + 5304)) > 0
      || CFSetGetCount(*(CFSetRef *)(a1 + 5312)) > 0)
    {
      CFMutableDictionaryRef v7 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFIndex Count = CFSetGetCount(*(CFSetRef *)(a1 + 5288));
        CFIndex v9 = CFSetGetCount(*(CFSetRef *)(a1 + 5296));
        CFIndex v10 = CFSetGetCount(*(CFSetRef *)(a1 + 5304));
        [v7 WFLog:3, "%s:User SoftAP Preferred Changed to %s while Clients connected (Broadcast:%ld, Hidden:%ld Other Hidden %ld NanLink %ld)\n", "WiFiDeviceManagerSetSoftAPUserPreferredBand", "Default", Count, v9, v10, CFSetGetCount(*(CFSetRef *)(a1 + 5312))];
      }
      return;
    }
    int v5 = *(_DWORD *)(a1 + 7048);
  }
  if (v5 != v4)
  {
    if (qword_10027DD68)
    {
      CFArrayRef v12 = "Default";
      if (a2) {
        CFArrayRef v12 = "2.4GHz";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s:User SoftAP Preferred Band %s\n", "WiFiDeviceManagerSetSoftAPUserPreferredBand", v12);
    }
    int v13 = sub_10010B458(a1);
    sub_10010B10C(a1, v13);
  }
}

uint64_t sub_10010B458(uint64_t a1)
{
  if (a1)
  {
    if (![*(id *)(a1 + 6752) isNANPublisherStarted]) {
      return 1;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: Restart SoftAP but not NAN publisher if NAN publisher is already up\n", "__WiFiDeviceManagerShouldRestartNANPublisher"];
    }
    uint64_t v2 = 0;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null device manager" : @"__WiFiDeviceManagerShouldRestartNANPublisher"];
    }
    uint64_t v2 = 1;
  }
  return v2;
}

void sub_10010B514(uint64_t a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    int v5 = Mutable;
    int v6 = *(unsigned __int16 *)(a1 + 1) >> 14;
    if (v6)
    {
      if (v6 == 1)
      {
        CFStringRef v7 = @"6";
      }
      else
      {
        if (v6 != 3) {
          goto LABEL_9;
        }
        CFStringRef v7 = @"5";
      }
    }
    else
    {
      CFStringRef v7 = @"2";
    }
    CFDictionarySetValue(Mutable, @"band_before", v7);
LABEL_9:
    int v8 = *(unsigned __int16 *)(a2 + 1) >> 14;
    if (v8)
    {
      if (v8 == 1)
      {
        CFStringRef v9 = @"6";
      }
      else
      {
        if (v8 != 3) {
          goto LABEL_16;
        }
        CFStringRef v9 = @"5";
      }
    }
    else
    {
      CFStringRef v9 = @"2";
    }
    CFDictionarySetValue(v5, @"band_after", v9);
LABEL_16:
    if (*(unsigned __int8 *)(a1 + 9) >= 0xA2u)
    {
      CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (const void *)(a1 + 9));
      if (v10)
      {
        CFNumberRef v11 = v10;
        CFDictionarySetValue(v5, @"rssi_before", v10);
        CFRelease(v11);
      }
    }
    if (*(unsigned __int8 *)(a2 + 9) >= 0xA2u)
    {
      CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (const void *)(a2 + 9));
      if (v12)
      {
        CFNumberRef v13 = v12;
        CFDictionarySetValue(v5, @"rssi_after", v12);
        CFRelease(v13);
      }
    }
    if ((*(_DWORD *)(a1 + 32) - 1) < 0x257FFF)
    {
      CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 32));
      if (v14)
      {
        CFNumberRef v15 = v14;
        CFDictionarySetValue(v5, @"txrate_before", v14);
        CFRelease(v15);
      }
    }
    if ((*(_DWORD *)(a2 + 32) - 1) < 0x257FFF)
    {
      CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a2 + 32));
      if (v16)
      {
        CFNumberRef v17 = v16;
        CFDictionarySetValue(v5, @"txrate_after", v16);
        CFRelease(v17);
      }
    }
    int v19 = *(_DWORD *)(a1 + 36);
    id v18 = (const void *)(a1 + 36);
    if ((v19 - 1) < 0x257FFF)
    {
      CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, v18);
      if (v20)
      {
        CFNumberRef v21 = v20;
        CFDictionarySetValue(v5, @"rxrate_before", v20);
        CFRelease(v21);
      }
    }
    int v23 = *(_DWORD *)(a2 + 36);
    unsigned __int8 v22 = (const void *)(a2 + 36);
    if ((v23 - 1) < 0x257FFF)
    {
      CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, v22);
      if (v24)
      {
        CFNumberRef v25 = v24;
        CFDictionarySetValue(v5, @"rxrate_after", v24);
        CFRelease(v25);
      }
    }
    sub_100058DBC(@"com.apple.wifi.mloSwitch", (uint64_t)v5);
    CFRelease(v5);
    return;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:4, "%s: metric is null", "WiFiDeviceManagerSubmitMloPrefBandSwitchMetric"];
  }
}

void sub_10010B834(uint64_t a1, uint64_t a2)
{
  unsigned int valuePtr = 0;
  id v4 = sub_10010BA9C(a1);
  if (!v4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Not able to submit setup metric __WiFiDeviceManagerCopyCurrentCoreWiFiScanResult returned NULL", @"WiFiDeviceManagerSubmitObssMitTransitionMetric"];
    }
    goto LABEL_25;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: metric is null", "WiFiDeviceManagerSubmitObssMitTransitionMetric")
    }
LABEL_25:
    goto LABEL_20;
  }
  int v6 = Mutable;
  unsigned int v7 = [v4 channel].band - 1;
  if (v7 <= 2) {
    CFDictionarySetValue(v6, @"band", off_100242050[v7]);
  }
  unint64_t v8 = *(char *)(a2 + 2);
  if (v8 <= 3) {
    CFDictionarySetValue(v6, @"channelWidth", off_100242068[v8]);
  }
  unint64_t v9 = *(char *)(a2 + 3);
  if (v9 <= 3) {
    CFDictionarySetValue(v6, @"recommended_channelWidth", off_100242068[v9]);
  }
  char v10 = *(unsigned char *)(a2 + 3) - *(unsigned char *)(a2 + 2);
  uint64_t v11 = v10 + 3;
  if (v11 <= 6) {
    CFDictionarySetValue(v6, @"recommended_channelWidthPerc", off_100242088[v11]);
  }
  uint64_t v12 = *(char *)(a1 + 3866) + 3;
  if (v12 <= 6) {
    CFDictionarySetValue(v6, @"previous_recommended_channelWidthOverCurrent", off_100242088[v12]);
  }
  unint64_t v13 = *(char *)(a1 + 3864);
  if (v13 <= 3) {
    CFDictionarySetValue(v6, @"previous_recommended_channelWidth", off_100242068[v13]);
  }
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  unsigned int v15 = *(unsigned __int8 *)(a1 + 3865);
  BOOL v16 = v14 >= v15;
  unsigned int v17 = v14 - v15;
  if (v17 != 0 && v16)
  {
    unsigned int valuePtr = v17;
    CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v18)
    {
      CFNumberRef v19 = v18;
      CFDictionarySetValue(v6, @"recommendationDuration", v18);
      CFRelease(v19);
    }
  }
  *(unsigned char *)(a1 + 3864) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 3865) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 3866) = v10;
  sub_100058DBC(@"com.apple.wifi.obssMitigation.transitionStats", (uint64_t)v6);
  CFRelease(v6);
LABEL_20:
}

id sub_10010BA9C(uint64_t a1)
{
  uint64_t v2 = (const void *)sub_100016E20(*(void *)(a1 + 64));
  id result = sub_100018FA8(a1, v2, 1);
  if (result)
  {
    id v4 = result;
    id v5 = sub_10000AD1C((uint64_t)result);
    CFRelease(v4);
    return v5;
  }
  return result;
}

void sub_10010BAF0(uint64_t a1, uint64_t a2)
{
  int v44 = sub_10003B24C(*(void *)(a1 + 120));
  unsigned __int8 v43 = -127;
  char v42 = 0;
  int v41 = 0;
  id v4 = sub_10010BA9C(a1);
  if (!v4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Not able to submit setup metric __WiFiDeviceManagerCopyCurrentCoreWiFiScanResult returned NULL", "WiFiDeviceManagerSubmitObssMitMetric"];
    }
    goto LABEL_49;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: metric is null" args:("WiFiDeviceManagerSubmitObssMitMetric")];
    }
LABEL_49:
    goto LABEL_44;
  }
  int v6 = Mutable;
  unsigned int v7 = [v4 channel].band - 1;
  if (v7 <= 2) {
    CFDictionarySetValue(v6, @"band", off_100242050[v7]);
  }
  unint64_t v8 = *(char *)(a2 + 2);
  if (v8 <= 3) {
    CFDictionarySetValue(v6, @"channelWidth", off_100242068[v8]);
  }
  unint64_t v9 = *(char *)(a2 + 3);
  if (v9 <= 3) {
    CFDictionarySetValue(v6, @"recommended_channelWidth", off_100242068[v9]);
  }
  uint64_t v10 = (char)(*(unsigned char *)(a2 + 3) - *(unsigned char *)(a2 + 2)) + 3;
  if (v10 <= 6) {
    CFDictionarySetValue(v6, @"recommended_channelWidthOverCurrent", off_100242088[v10]);
  }
  unsigned int v11 = *(_DWORD *)(a2 + 12);
  if (v11)
  {
    unsigned int valuePtr = 100 * *(_DWORD *)(a2 + 8) / v11;
    CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v12)
    {
      CFNumberRef v13 = v12;
      CFDictionarySetValue(v6, @"rxBadFCSOverRxFrames", v12);
      CFRelease(v13);
    }
    unsigned int v39 = (100 * *(_DWORD *)(a2 + 4)) / *(_DWORD *)(a2 + 12);
    CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v39);
    if (v14)
    {
      CFNumberRef v15 = v14;
      CFDictionarySetValue(v6, @"rxBadPLCPOverRxFrames", v14);
      CFRelease(v15);
    }
  }
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a2 + 12));
  if (v16)
  {
    CFNumberRef v17 = v16;
    CFDictionarySetValue(v6, @"rxFrames", v16);
    CFRelease(v17);
  }
  CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a2 + 16));
  if (v18)
  {
    CFNumberRef v19 = v18;
    CFDictionarySetValue(v6, @"rxPER", v18);
    CFRelease(v19);
  }
  CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v44);
  if (v20)
  {
    CFNumberRef v21 = v20;
    CFDictionarySetValue(v6, @"p95_txLatency", v20);
    CFRelease(v21);
  }
  CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (const void *)(a2 + 40));
  if (v22)
  {
    CFNumberRef v23 = v22;
    CFDictionarySetValue(v6, @"rssi_core0", v22);
    CFRelease(v23);
  }
  CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (const void *)(a2 + 41));
  if (v24)
  {
    CFNumberRef v25 = v24;
    CFDictionarySetValue(v6, @"rssi_core1", v24);
    CFRelease(v25);
  }
  uint64_t v26 = 0;
  char v27 = -127;
  do
  {
    int v28 = *(char *)(a2 + 24 + v26);
    if (v28 > v27 && v28 < 0) {
      char v27 = *(unsigned char *)(a2 + 24 + v26);
    }
    ++v26;
  }
  while (v26 != 8);
  unsigned __int8 v43 = v27;
  CFNumberRef v30 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &v43);
  if (v30)
  {
    CFNumberRef v31 = v30;
    CFDictionarySetValue(v6, @"strongestNonPrimaryChannelEnergy", v30);
    CFRelease(v31);
  }
  char v42 = v43 - *(unsigned char *)(a2 + 40);
  CFNumberRef v32 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &v42);
  if (v32)
  {
    CFNumberRef v33 = v32;
    CFDictionarySetValue(v6, @"diffStrongestNonPrimaryChannelEnergySOI", v32);
    CFRelease(v33);
  }
  uint64_t v34 = 0;
  int v35 = 0;
  do
  {
    if (*(unsigned __int8 *)(a2 + 24 + v34) == v43) {
      v35 += 20;
    }
    ++v34;
  }
  while (v34 != 8);
  int v41 = v35;
  CFNumberRef v36 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v41);
  if (v36)
  {
    CFNumberRef v37 = v36;
    CFDictionarySetValue(v6, @"channelWidthWithMaxEnergy", v36);
    CFRelease(v37);
  }
  sub_100058DBC(@"com.apple.wifi.obssMitigation.stats", (uint64_t)v6);
  CFRelease(v6);
LABEL_44:
}

uint64_t sub_10010BF80(uint64_t a1, const void *a2)
{
  double v9 = 0.0;
  uint64_t v10 = 0;
  id v5 = sub_10000AD1C((uint64_t)a2);
  uint64_t v6 = 1;
  if ([*(id *)(a1 + 6648) isNetworkInDenyListedState:1 scanResult:v5])
  {
    if ([*(id *)(a1 + 6648) isNetworkDenyListedForAutoJoinDueToTrigDisc:v5 RSSI:&v10 timestamp:&v9]&& !sub_10003BF10(*(_DWORD **)(a1 + 120), a2, v10, v9))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Trigger disconnected %@ is not suitable", "WiFiDeviceManagerKnownNetworkSuitableAfterTriggerDisconnect", sub_10001A43C(a2) message];
      }
      uint64_t v6 = 0;
      if (v5) {
        goto LABEL_6;
      }
      goto LABEL_7;
    }
    uint64_t v6 = 1;
  }
  if (v5) {
LABEL_6:
  }

LABEL_7:
  return v6;
}

uint64_t sub_10010C088(uint64_t a1)
{
  return a1 + 1208;
}

uint64_t sub_10010C090(uint64_t a1)
{
  uint64_t v2 = (const void *)sub_100016E20(*(void *)(a1 + 64));
  uint64_t v3 = sub_100018FA8(a1, v2, 1);
  if (v3)
  {
    id v4 = v3;
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, "%s: Start 6E prefer off switch scan", "WiFiDeviceManager6EPreferOff"];
    }
    CFArrayRef v6 = *(const __CFArray **)(a1 + 3528);
    v12.length = CFArrayGetCount(v6);
    v12.location = 0;
    FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v6, v12, v4);
    if (FirstIndexOfValue == -1)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: no known network found" arguments:v11];
      }
    }
    else
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3528), FirstIndexOfValue);
      if (sub_10001E404((uint64_t)ValueAtIndex, @"Standalone") == kCFBooleanTrue)
      {
        sub_10001FD64(a1, 0x34uLL);
        goto LABEL_10;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Current network is not standalone 6G %@", "WiFiDeviceManager6EPreferOff", ValueAtIndex message];
      }
    }
LABEL_10:
    CFRelease(v4);
  }
  return 4294963396;
}

uint64_t sub_10010C1EC(uint64_t a1)
{
  uint64_t v2 = (const void *)sub_100016E20(*(void *)(a1 + 64));
  uint64_t v3 = sub_100018FA8(a1, v2, 1);
  if (v3)
  {
    id v4 = v3;
    int valuePtr = 0;
    CFNumberRef v5 = (const __CFNumber *)sub_10001E404((uint64_t)v3, @"CHANNEL_FLAGS");
    if (v5 && (CFNumberGetValue(v5, kCFNumberIntType, &valuePtr), (valuePtr & 0x2000) != 0))
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: current channel is non 6G channel", "WiFiDeviceManager6EPreferOn")];
      }
    }
    else
    {
      sub_10001FD64(a1, 0x35uLL);
    }
    CFRelease(v4);
  }
  return 4294963396;
}

void sub_10010C2B4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 64);
    sub_100017C48(v1);
    sub_10006CE04(v1);
  }
}

void sub_10010C2FC(uint64_t a1, const __CFArray *a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  CFNumberRef v5 = (const void *)sub_100017C48(v4);
  CFArrayRef v6 = sub_10001C1B4(v4, v5);
  if (!v6) {
    return;
  }
  unsigned int v7 = v6;
  unint64_t v8 = (void *)sub_10001E404((uint64_t)v6, @"SSID");
  double v9 = *(const void **)(a1 + 3776);
  if (v8 != v9)
  {
    uint64_t v10 = v8;
    if (v8) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      if (objc_msgSend(v8, "isEqual:")) {
        goto LABEL_12;
      }
      double v9 = *(const void **)(a1 + 3776);
    }
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 3776) = 0;
    }
    *(void *)(a1 + 3776) = [v10 copy];
    *(_DWORD *)(a1 + 3784) = 0;
  }
LABEL_12:
  CFRange v12 = sub_100072970(*(void *)(a1 + 64), 0x4E20u);
  CFArrayRef v13 = sub_1000194F8(a1, v7, 0);
  if (v13)
  {
    CFArrayRef v14 = v13;
    if (a2 && CFArrayGetCount(a2) >= 1)
    {
      int v15 = 0;
      int v16 = 0;
      CFIndex v17 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v17);
        id v20 = sub_10000AD1C((uint64_t)ValueAtIndex);
        if ([v20 SSID] == *(id *)(a1 + 3776)
          || [v20 SSID]
          && *(void *)(a1 + 3776)
          && objc_msgSend(objc_msgSend(v20, "SSID"), "isEqual:", *(void *)(a1 + 3776)))
        {
          unsigned int v21 = [v20.channel band];
          v15 |= v21 != 3;
          v16 |= v21 == 3;
        }
        ++v17;
      }
      while (v17 < CFArrayGetCount(a2));
      if (!v12) {
        goto LABEL_34;
      }
    }
    else
    {
      int v15 = 0;
      int v16 = 0;
      if (!v12) {
        goto LABEL_34;
      }
    }
    if (CFArrayGetCount(v12) >= 1)
    {
      int v22 = 0;
      CFIndex v23 = 0;
      do
      {
        CFNumberRef v25 = CFArrayGetValueAtIndex(v12, v23);
        id v26 = sub_10000AD1C((uint64_t)v25);
        if ([v26 SSID] == *(id *)(a1 + 3776)
          || [v26 SSID]
          && *(void *)(a1 + 3776)
          && objc_msgSend(objc_msgSend(v26, "SSID"), "isEqual:", *(void *)(a1 + 3776)))
        {
          unsigned int v27 = [[[v26 channel] band];
          v22 |= v27 != 3;
          v16 |= v27 == 3;
        }
        ++v23;
      }
      while (v23 < CFArrayGetCount(v12));
      goto LABEL_35;
    }
LABEL_34:
    int v22 = 0;
LABEL_35:
    int v28 = v16 & ((v15 | v22) ^ 1);
    BOOL v29 = sub_10001E404((uint64_t)v14, @"Standalone") == kCFBooleanTrue;
    if (v28 != v29)
    {
      uint64_t v30 = v28 & 1;
      ++*(_DWORD *)(a1 + 3784);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Tracking changed standalone6G (%d --> %d) for known network %@, counter=%d/%d", v29, v30, v14, *(unsigned int *)(a1 + 3784), 3 message];
      }
      if (*(_DWORD *)(a1 + 3784) >= 3u)
      {
        *(_DWORD *)(a1 + 3784) = 0;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Updating standalone6G (%d --> %d) for known network %@", v29, v30, v14 message];
        }
        sub_10001C6A4((uint64_t)v14, @"Standalone", +[NSNumber numberWithBool:v30]);
        sub_10010C6B4((NSObject **)a1, v14);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 3784) = 0;
    }
    CFRelease(v14);
  }
  CFRelease(v7);
  if (v12)
  {
    CFRelease(v12);
  }
}

void sub_10010C6B4(NSObject **cf, const void *a2)
{
  if (cf)
  {
    if (cf[565])
    {
      if (cf[30])
      {
        if (a2)
        {
          CFRetain(cf);
          CFRetain(a2);
          uint64_t v4 = cf[30];
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100140954;
          block[3] = &unk_10023F048;
          void block[4] = cf;
          void block[5] = a2;
          dispatch_async(v4, block);
          return;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: null network" : @"__WiFiDeviceManagerUpdateNetworkAsync"];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue" : @"__WiFiDeviceManagerUpdateNetworkAsync"];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:4 message:@"%s: null updateNetwork callback" args:__WiFiDeviceManagerUpdateNetworkAsync];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: null manager", @"__WiFiDeviceManagerUpdateNetworkAsync"];
    }
  }
}

void sub_10010C844(uint64_t a1, const void **a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10010C8B0;
  void v2[3] = &unk_100241558;
  void v2[4] = a1;
  sub_10010A88C(a1, a2, (uint64_t)v2);
}

void sub_10010C8B0(uint64_t a1, void *a2)
{
  if (a2)
  {
    [*(id *)(*(void *)(a1 + 32) + 7368) updateCurrentNetworkDetails:a2];
  }
}

uint64_t sub_10010C8FC(uint64_t a1, const void *a2)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Updating 6G standalone property in known network plist"];
  }
  CFArrayRef v6 = sub_100072970(*(void *)(a1 + 64), 0x4E20u);
  CFArrayRef v7 = v6;
  if (!a2)
  {
    uint64_t v10 = 0;
    if (!v6) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  id v8 = sub_10000AD1C((uint64_t)a2);
  unsigned int v9 = [[[v8 channel] band];
  uint64_t v10 = v9 == 3;
  if (v8)
  {
    unsigned int v11 = v9;
    CFArrayRef v12 = sub_1000194F8(a1, a2, 0);
    if (v12)
    {
      CFArrayRef v13 = v12;
      if (v11 == 3 && v7 && CFArrayGetCount(v7) >= 1)
      {
        CFIndex v14 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v14);
          id v16 = sub_10000AD1C((uint64_t)ValueAtIndex);
          if ([v16 SSID]
            && [v8 SSID]
            && objc_msgSend(objc_msgSend(v16, "SSID"), "isEqual:", objc_msgSend(v8, "SSID"))
            && objc_msgSend(objc_msgSend(v16, "channel"), "band") != 3)
          {
            LOBYTE(v10) = 0;
          }
          ++v14;
        }
        while (v14 < CFArrayGetCount(v7));
      }
      BOOL v17 = sub_10001E404((uint64_t)v13, @"Standalone") == kCFBooleanTrue;
      v10 &= 1u;
      if (v17 != v10)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Know network %@ 6G standalone state changed from %d to %d", v13, v17, v10 message];
        }
        *(_DWORD *)(a1 + 3784) = 0;
        sub_10001C6A4((uint64_t)v13, @"Standalone", +[NSNumber numberWithBool:v10]);
        sub_10010C6B4((NSObject **)a1, v13);
      }
      CFRelease(v13);
    }
  }
  if (v7) {
LABEL_22:
  }
    CFRelease(v7);
LABEL_23:
  return v10;
}

BOOL sub_10010CB30(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 3576));
  if (!Count) {
    return 0;
  }
  v9.length = Count;
  v9.location = 0;
  FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 3576), v9, a2);
  if (FirstIndexOfValue == -1) {
    return 0;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3576), FirstIndexOfValue);
  if (!ValueAtIndex) {
    return 0;
  }

  return sub_1000C74BC((uint64_t)ValueAtIndex);
}

__CFDictionary *sub_10010CBB4(uint64_t a1, const __CFArray *a2)
{
  BOOL valuePtr = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFMutableArrayRef v5 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    if (v5)
    {
      CFArrayRef v6 = v5;
      CFArrayRef v7 = (unsigned __int8 *)(a1 + 5456);
      id v8 = CFStringCreateMutable(kCFAllocatorDefault, 0);
      CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 3600));
      CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 3608));
      if (a2 && CFArrayGetCount(a2) >= 1)
      {
        if (v8) {
          CFStringAppend(v8, @"Preparing background scan request for ");
        }
        CFArrayRef theArray = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        if (theArray)
        {
          CFDictionaryRef theDict = Mutable;
          CFArrayRef v66 = v6;
          CFIndex Count = CFArrayGetCount(a2);
          if (Count >= 1)
          {
            CFIndex v9 = 0;
            CFArrayRef v69 = a2;
            while (1)
            {
              CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, v9);
              unsigned int v11 = sub_1000C5EB0((uint64_t)ValueAtIndex);
              BOOL valuePtr = sub_10001EE48(ValueAtIndex) != 0;
              CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
              if (v12)
              {
                CFNumberRef v13 = v12;
                CFDictionarySetValue(v11, @"HIDDEN_NETWORK", v12);
                CFRelease(v13);
              }
              CFIndex v14 = CFArrayGetValueAtIndex(a2, v9);
              CFStringRef v15 = (const __CFString *)sub_10001A43C(v14);
              int v71 = 0;
              int v16 = sub_1001300C8(a1, ValueAtIndex, 0, &v71);
              if (*(_DWORD *)(a1 + 128) != v16)
              {
                unsigned int v70 = *(_DWORD *)(a1 + 136) + v16;
                CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v70);
                if (v17)
                {
                  CFNumberRef v18 = v17;
                  CFDictionarySetValue(v11, @"BGSCANRSSITHRES", v17);
                  if (qword_10027DD68)
                  {
                    CFStringRef v20 = @"NULL";
                    if (v15) {
                      CFStringRef v20 = v15;
                    }
                    if ((v71 - 1) > 3) {
                      unsigned int v21 = 0;
                    }
                    else {
                      unsigned int v21 = off_100242318[v71 - 1];
                    }
                    [(id)qword_10027DD68 WFLog:3, "%s PNO RssiThres %d for unreliable network %@ (%@)", "__CreateBGScanRequest", v70, v20, v21 message];
                  }
                  CFRelease(v18);
                  a2 = v69;
                }
              }
              int v22 = v8;
              id v24 = sub_10000AD1C((uint64_t)ValueAtIndex);
              if ([*(id *)(a1 + 6648) isNetworkDenyListedForAutoJoinDueToTrigDisc:v24 RSSI:0 timestamp:0])
              {
                unsigned int v70 = -1431655766;
                unsigned int v70 = *(_DWORD *)(a1 + 136) + sub_10003BE98(*(void *)(a1 + 120));
                CFSetAddValue(*(CFMutableSetRef *)(a1 + 3600), ValueAtIndex);
                CFNumberRef v25 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v70);
                if (v25)
                {
                  CFNumberRef v26 = v25;
                  CFDictionarySetValue(v11, @"BGSCANRSSITHRES", v25);
                  if (qword_10027DD68)
                  {
                    CFStringRef v28 = @"NULL";
                    if (v15) {
                      CFStringRef v28 = v15;
                    }
                    [(id)qword_10027DD68 WFLog:3, "%s LQAMgr enforced RssiThres %d for trgDisc network %@", "__CreateBGScanRequest", v70, v28 message];
                  }
                  CFRelease(v26);
                }
                a2 = v69;
              }

              id v8 = v22;
              if (sub_10010CB30(a1, ValueAtIndex)
                || sub_1000066FC((uint64_t)ValueAtIndex)
                || sub_10001BB2C((BOOL)ValueAtIndex))
              {
                CFSetAddValue(*(CFMutableSetRef *)(a1 + 3608), ValueAtIndex);
                CFDictionarySetValue(v11, @"DISALLOW_PNO", kCFBooleanTrue);
                if (sub_10001E404((uint64_t)ValueAtIndex, @"WiFiNetworkUserAcceptedRecommendationAt"))
                {
                  if (qword_10027DD68)
                  {
                    CFStringRef v30 = @"NULL";
                    if (v15) {
                      CFStringRef v30 = v15;
                    }
                    [(id)qword_10027DD68 WFLog:3, "%s: user accepted recommendation to join captive %@, added to BGScan List", "__CreateBGScanRequest", v30 message];
                  }
                }
                else if (sub_1000CE2A8((uint64_t)ValueAtIndex) || sub_10001BB2C((BOOL)ValueAtIndex))
                {
                  if (qword_10027DD68)
                  {
                    CFStringRef v31 = @"NULL";
                    if (v15) {
                      CFStringRef v31 = v15;
                    }
                    [(id)qword_10027DD68 WFLog:3, "%s Captive %@ added to BGScan List ", "__CreateBGScanRequest", v31 message];
                  }
                }
                else
                {
                  CFDictionarySetValue(v11, @"HOTSPOT", kCFBooleanTrue);
                  if (qword_10027DD68)
                  {
                    CFStringRef v48 = @"NULL";
                    if (v15) {
                      CFStringRef v48 = v15;
                    }
                    [(id)qword_10027DD68 WFLog:3, "%s Hotspot %@ added to BGScan List ", "__CreateBGScanRequest", v48 message];
                  }
                }
              }
              if (sub_1000C7420((uint64_t)ValueAtIndex))
              {
                CFDictionarySetValue(v11, @"DISALLOW_PNO", kCFBooleanTrue);
                if (qword_10027DD68)
                {
                  CFStringRef v33 = @"NULL";
                  if (v15) {
                    CFStringRef v33 = v15;
                  }
                  [(id)qword_10027DD68 WFLog:3, "%s Ambiguous ssid %@ added to BGScan List ", "__CreateBGScanRequest", v33 message];
                }
              }
              if (byte_10027DDA9)
              {
                uint64_t v34 = sub_10001CECC((CFDictionaryRef *)ValueAtIndex);
                if (([v34 isAllowedInLockdownMode] & 1) == 0)
                {
                  CFDictionarySetValue(v11, @"DISALLOW_PNO", kCFBooleanTrue);
                  if (qword_10027DD68)
                  {
                    CFStringRef v36 = @"NULL";
                    if (v15) {
                      CFStringRef v36 = v15;
                    }
                    [(id)qword_10027DD68 WFLog:3, "%s ssid %@ not allowed to wake up host in lockdown mode ", "__CreateBGScanRequest", v36 message];
                  }
                }
              }
              if (v11)
              {
                CFArrayAppendValue(theArray, v11);
                CFRelease(v11);
              }
              if (v22 && v15) {
                break;
              }
              if (v15) {
                goto LABEL_66;
              }
LABEL_82:
              if (Count == ++v9) {
                goto LABEL_88;
              }
            }
            if (!CFEqual(v15, &stru_100248240)) {
              CFStringAppendFormat(v22, 0, @"\"%@\" ", v15);
            }
LABEL_66:
            if (CFEqual(v15, &stru_100248240))
            {
              CFNumberRef v37 = CFArrayGetValueAtIndex(a2, v9);
              uint64_t v38 = sub_10001E404((uint64_t)v37, @"BSSID");
              if (v38)
              {
                unsigned int v39 = v38;
                uint64_t v40 = sub_10001E404((uint64_t)ValueAtIndex, @"CHANNEL");
                if (v40)
                {
                  int v41 = v40;
                  char v42 = sub_10001E404((uint64_t)ValueAtIndex, @"CHANNEL_FLAGS");
                  unsigned __int8 v43 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                  if (v43)
                  {
                    int v44 = v43;
                    CFDictionaryAddValue(v43, @"CHANNEL", v41);
                    if (v42) {
                      CFDictionaryAddValue(v44, @"CHANNEL_FLAGS", v42);
                    }
                    v73.length = CFArrayGetCount(v66);
                    v73.location = 0;
                    if (!CFArrayContainsValue(v66, v73, v44)) {
                      CFArrayAppendValue(v66, v44);
                    }
                    CFRelease(v44);
                  }
                }
                a2 = v69;
                if (v22)
                {
                  if (sub_10001E404((uint64_t)ValueAtIndex, @"ENTRY_NETWORK")) {
                    CFIndex v45 = " EN";
                  }
                  else {
                    CFIndex v45 = "";
                  }
                  CFIndex v46 = sub_10001E404((uint64_t)ValueAtIndex, @"EXIT_NETWORK");
                  uint64_t v47 = " EX";
                  if (!v46) {
                    uint64_t v47 = "";
                  }
                  CFStringAppendFormat(v22, 0, @"\"%@ ~%s%s\" ", v39, v45, v47);
                }
              }
            }
            goto LABEL_82;
          }
LABEL_88:
          CFMutableDictionaryRef Mutable = theDict;
          if (CFArrayGetCount(theArray)) {
            CFDictionarySetValue(theDict, @"SCAN_SSID_LIST", theArray);
          }
          CFRelease(theArray);
          CFArrayRef v6 = v66;
          CFArrayRef v7 = (unsigned __int8 *)(a1 + 5456);
        }
      }
      if (*v7)
      {
        CFArrayRef v49 = *(const __CFArray **)(a1 + 5448);
        if (v49)
        {
          CFIndex v50 = CFArrayGetCount(v49);
          if (v50 >= 1)
          {
            CFIndex v51 = v50;
            for (CFIndex i = 0; i != v51; ++i)
            {
              id v53 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5448), i);
              v74.length = CFArrayGetCount(v6);
              v74.location = 0;
              if (!CFArrayContainsValue(v6, v74, v53)) {
                CFArrayAppendValue(v6, v53);
              }
            }
          }
        }
      }
      CFIndex v54 = CFArrayGetCount(v6);
      if (v54)
      {
        if (v8)
        {
          uint64_t v55 = v54;
          CFStringAppend(v8, @"on channels: ");
          if (v55 >= 1)
          {
            for (CFIndex j = 0; j != v55; ++j)
            {
              CFDictionaryRef v57 = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, j);
              CFDictionaryRef Value = CFDictionaryGetValue(v57, @"CHANNEL");
              CFStringAppendFormat(v8, 0, @"%@ ", Value);
            }
          }
        }
      }
      CFDictionarySetValue(Mutable, @"SCAN_CHANNELS", v6);
      int v59 = *v7;
      if (*v7) {
        CFBooleanRef v60 = kCFBooleanTrue;
      }
      else {
        CFBooleanRef v60 = kCFBooleanFalse;
      }
      CFDictionarySetValue(Mutable, @"BGSCAN_CACHE", v60);
      if (v59)
      {
        if (v7[2]) {
          CFBooleanRef v61 = kCFBooleanTrue;
        }
        else {
          CFBooleanRef v61 = kCFBooleanFalse;
        }
        CFDictionarySetValue(Mutable, @"BGSCAN_CACHE_WSB_ROLLOVER", v61);
        if (v8)
        {
          CFStringRef v62 = @"Background Scan Caching is Enabled";
LABEL_114:
          CFStringAppend(v8, v62);
          v7[1] = v59 != 0;
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%@", v8 message];
          }
          CFRelease(v8);
          goto LABEL_118;
        }
      }
      else if (v8)
      {
        CFStringRef v62 = @"Background Scan Caching is Disabled";
        goto LABEL_114;
      }
      v7[1] = v59 != 0;
LABEL_118:
      CFRelease(v6);
    }
  }
  return Mutable;
}

void sub_10010D55C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    uint64_t v3 = (const void **)sub_100018FA8(a1, v2, 1);
    uint64_t v4 = *(void *)(a1 + 64);
    if (v3)
    {
      CFMutableArrayRef v5 = v3;
      int v6 = sub_1001310B0(a1, v3);
      sub_10006C484(v4, v6);
      CFRelease(v5);
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 64);
      sub_10006C484(v7, 0);
    }
  }
}

uint64_t sub_10010D610(uint64_t a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s: Resetting MIS state.", "WiFiDeviceManagerResetMISState"];
  }
  uint64_t v3 = (const void *)sub_100017C48(*(void *)(a1 + 64));

  return sub_10010D6A0(a1, v3, 0, 0, 0);
}

uint64_t sub_10010D6A0(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = malloc_type_malloc(0x20uLL, 0xA004088793A40uLL);
  void *v10 = a1;
  v10[1] = a4;
  _OWORD v10[3] = a5;
  if (a3) {
    CFTypeRef v11 = CFRetain(a3);
  }
  else {
    CFTypeRef v11 = 0;
  }
  void v10[2] = v11;
  uint64_t v12 = sub_100064194(*(void *)(a1 + 64), a2, (uint64_t)sub_100118658, (uint64_t)v10);
  if (v12)
  {
    uint64_t v13 = v12;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Unable to stop network (%d). deviceManager=%p", v13, a1];
    }
    free(v10);
  }
  return 0;
}

void sub_10010D78C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (*(unsigned __int8 *)(a1 + 5219) == a2)
  {
    if (qword_10027DD68)
    {
      CFMutableArrayRef v5 = "enabled";
      if (!a2) {
        CFMutableArrayRef v5 = "disabled";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS is already %s", v5);
    }
  }
  else
  {
    if (a2)
    {
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:message:3, "%s: Force MIS Service enable", "WiFiDeviceManagerSetMISState"];
      }
      sub_10010D96C(a1, a2, 0, 0, a3);
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Force MIS Service disable", "WiFiDeviceManagerSetMISState")];
      }
      uint64_t v14 = 0;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v10 = 1;
      memset(v9, 0, sizeof(v9));
      DWORD2(v9[0]) = 1;
      CFStringRef v11 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", @"MIS Disabled");
      sub_10010E020(a1, (uint64_t)v9);
      sub_10010D96C(a1, 0, 0, 0, a3);
      sub_10010E474(a1);
    }
  }
}

void sub_10010D96C(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int *a5)
{
  if (a2)
  {
    uint64_t v54 = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    LODWORD(v44) = *a5;
    sub_10010E020(a1, (uint64_t)&v44);
  }
  if (!sub_10006A398(*(void *)(a1 + 64)))
  {
    if (*a5 != 5)
    {
      uint64_t v54 = 0;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      DWORD1(v44) = 3;
      sub_10010E020(a1, (uint64_t)&v44);
    }
    return;
  }
  uint64_t v10 = (unsigned __int8 *)(a1 + 5216);
  if (!(a3 | a2)
    && ((CFSetRef v31 = *(const __CFSet **)(a1 + 5272)) != 0 && CFSetGetCount(v31)
     || (CFSetRef v32 = *(const __CFSet **)(a1 + 5280)) != 0 && CFSetGetCount(v32)))
  {
    if (qword_10027DD68)
    {
      if (v10[5]) {
        uint64_t v34 = "enabled";
      }
      else {
        uint64_t v34 = "disabled";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS Discovery %s by more clients", v34);
    }
    return;
  }
  if (a2
    && *(unsigned char *)(a1 + 5219)
    && !*(unsigned char *)(a1 + 5384)
    && (a4 || CFSetGetCount(*(CFSetRef *)(a1 + 5272)) >= 1 && *(_DWORD *)(a1 + 7048) == 1))
  {
    unsigned int v37 = *v10;
    long long v12 = (void *)qword_10027DD68;
    if (v37 > 0xD)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS Discovery %s Force 2.4Ghz", "enabled");
      }
      unsigned int v15 = 1;
      goto LABEL_14;
    }
    if (qword_10027DD68)
    {
      uint64_t v14 = "MIS Already enabled in 2.4GHz";
LABEL_12:
      [v12 WFLog:3 message:v14];
    }
  }
  else
  {
    long long v12 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      long long v13 = "disabled";
      if (a2) {
        long long v13 = "enabled";
      }
      unsigned __int8 v43 = v13;
      uint64_t v14 = "MIS Discovery %s";
      goto LABEL_12;
    }
  }
  unsigned int v15 = 0;
LABEL_14:
  if (qword_10027DD68)
  {
    if (*(unsigned char *)(a1 + 7040)) {
      CFNumberRef v17 = "Support";
    }
    else {
      CFNumberRef v17 = "Not Support";
    }
    CFNumberRef v18 = "is 5G";
    if (!*(unsigned char *)(a1 + 7043)) {
      CFNumberRef v18 = "is not 5G";
    }
    int v19 = *(_DWORD *)(a1 + 7048);
    CFStringRef v20 = "5GHz";
    if (v19 == 1) {
      CFStringRef v20 = "2.4GHz";
    }
    if (v19) {
      unsigned int v21 = v20;
    }
    else {
      unsigned int v21 = "Default";
    }
    if (a4) {
      int v22 = "2.4GHz";
    }
    else {
      int v22 = "Default";
    }
    [((id)qword_10027DD68) WFLog:message:3, "MIS WiFi %s 5GHz SoftAP, Cellular Radio %s, User Preferred %s Band, Client Req %s\n", v17, v18, v21, v22];
  }
  if (a2) {
    sub_10010E8E0(a1, 0);
  }
  BOOL v23 = sub_10010EB14(a1);
  *(unsigned char *)(a1 + 5221) = a2;
  *(unsigned char *)(a1 + 5384) = a4;
  *(unsigned char *)(a1 + 5386) = *a5 == 8;
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s misRestart %d misEnabled %d enable %d manager->mis.misEnabled %d numClients %d misIsNANPHS %d bringUpMethod %d\n", "WiFiDeviceManagerSetMISDiscoveryState", v15, v23, a2, *(unsigned __int8 *)(a1 + 5219), (*(unsigned char *)(a1 + 5218) + *(unsigned char *)(a1 + 5217)), *(unsigned __int8 *)(a1 + 5386), *a5);
  }
  if (_os_feature_enabled_impl()
    && a2
    && *(_DWORD *)(a1 + 6776) != -536870272
    && v23
    && *(unsigned char *)(a1 + 5219)
    && *a5 == 8)
  {
    CFNumberRef v25 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    CFNumberRef v26 = sub_100018FA8(a1, v25, 1);
    if (v26)
    {
      unsigned int v27 = v26;
      if (!sub_10010EC7C(a1, 8) || *(unsigned char *)(a1 + 5385))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Enabling MIS. Now disconnecting from %@", sub_10001A43C(v27) message];
        }
        BOOL v29 = (const void *)sub_100017C48(*(void *)(a1 + 64));
        sub_1000FEA7C(a1, v29, 1007, "WiFiDeviceManagerSetMISDiscoveryState", 19166);
        *(unsigned char *)(a1 + 5389) = 1;
      }
    }
    else
    {
      sub_100102284(a1);
      if ([*(id *)(a1 + 6752) isNANPublisherStarted])
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Publisher Already Started Do not set SoftAP CSA", "WiFiDeviceManagerSetMISDiscoveryState")];
        }
      }
      else
      {
        sub_100064C0C(*(void *)(a1 + 64));
      }
      sub_10010EE4C(a1);
    }
    *(unsigned char *)(a1 + 5386) = 1;
    return;
  }
  if (v15)
  {
    int v30 = sub_10010B458(a1);
    sub_10010B10C(a1, v30);
    goto LABEL_85;
  }
  int v35 = *(unsigned __int8 *)(a1 + 5219);
  if (a2 && v23)
  {
    unsigned int v36 = *a5;
    if (*(unsigned char *)(a1 + 5219))
    {
      if (v36 != 8)
      {
        int v35 = 1;
        goto LABEL_77;
      }
    }
    else if (v36 != 8)
    {
LABEL_84:
      sub_10010EF6C(a1);
      goto LABEL_85;
    }
    if (!*(unsigned char *)(a1 + 5386)) {
      *(unsigned char *)(a1 + 5386) = 1;
    }
    goto LABEL_84;
  }
  if (a2 || !*(unsigned char *)(a1 + 5219))
  {
LABEL_77:
    if (a2 && v35 && *(unsigned char *)(a1 + 5260)) {
      sub_1000644FC(*(void *)(a1 + 64), 1);
    }
    goto LABEL_85;
  }
  if (*(unsigned __int8 *)(a1 + 5218) != -*(unsigned char *)(a1 + 5217))
  {
LABEL_85:
    if (*(void *)(a1 + 4136))
    {
      sub_10010F2A8(a1, 1);
      uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 4136);
      uint64_t v39 = *(void *)(a1 + 4144);
      uint64_t v40 = *(unsigned __int8 *)(a1 + 5221);
      v38(a1, v39, v40);
    }
    return;
  }
  if (a3)
  {
    if (*(unsigned char *)(a1 + 5222))
    {
      *(unsigned char *)(a1 + 5222) = 0;
      sub_10010E8E0(a1, 0);
    }
    uint64_t v54 = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    DWORD2(v44) = 1;
    LODWORD(v51) = 1;
    *((void *)&v51 + 1) = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", @"MIS Disabled");
    sub_10010E020(a1, (uint64_t)&v44);
    sub_10010E474(a1);
    goto LABEL_85;
  }
  if (qword_10027DD68) {
    [qword_10027DD68 WFLog:message:3, "%s: Starting MIS idle timer", "WiFiDeviceManagerSetMISDiscoveryState"];
  }

  sub_10010E8E0(a1, 2);
}

double sub_10010E020(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a2 + 16);
  if (v4 != 0.0)
  {
    *(double *)(a1 + 6304) = v4;
    sub_1001228AC(a1, 1);
  }
  if (*(_DWORD *)a2)
  {
    if (!*(_DWORD *)(a1 + 6288)) {
      *(_DWORD *)(a1 + 6288) = *(_DWORD *)a2;
    }
    sub_1001228AC(a1, 1);
  }
  int v5 = *(_DWORD *)(a2 + 4);
  if (v5) {
    *(_DWORD *)(a1 + 6292) = v5;
  }
  double v6 = *(double *)(a2 + 24);
  if (v6 != 0.0)
  {
    *(double *)(a1 + 6312) = v6;
    sub_1001228AC(a1, 1);
  }
  uint64_t v7 = (unsigned char *)(a1 + 5216);
  if (*(_DWORD *)(a2 + 4) < 2u)
  {
    int v8 = 0;
  }
  else
  {
    sub_1001228AC(a1, 0);
    int v8 = 1;
  }
  if (*(unsigned char *)(a2 + 160)) {
    *(unsigned char *)(a1 + 6448) = *(unsigned char *)(a2 + 160);
  }
  int v9 = *(_DWORD *)(a2 + 8);
  if (v9)
  {
    if (*(_DWORD *)(a1 + 6292) == 1)
    {
      *(_DWORD *)(a1 + 6296) = v9;
      *(double *)(a1 + 6320) = sub_10005A994();
      if (*(double *)(a1 + 6384) != 0.0) {
        *(double *)(a1 + 6392) = sub_10005A994();
      }
      int v8 = 1;
    }
    sub_1001228AC(a1, 0);
  }
  *(_DWORD *)(a1 + 6356) = 0;
  uint64_t v10 = *(void *)(a1 + 5208);
  if (v10)
  {
    unsigned __int16 valuePtr = 0;
    CFNumberRef v11 = (const __CFNumber *)sub_10001E404(v10, @"AP_MODE_AUTH_UPPER");
    CFNumberRef v12 = v11;
    if (v11 && CFNumberGetValue(v11, kCFNumberSInt16Type, &valuePtr))
    {
      int v13 = (valuePtr >> 2) & 2 | (valuePtr >> 5) & 0x80;
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Faield to get SoftAP upper AUTH (numRef is NULL %d)", v12 == 0)];
      }
      int v13 = 0;
    }
    *(_DWORD *)(a1 + 6356) = v13;
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"SoftAP has no network record"];
    }
  }
  if (*(unsigned char *)(a2 + 72))
  {
    *(unsigned char *)(a1 + 6360) = *(unsigned char *)(a2 + 72);
    sub_1001228AC(a1, 1);
  }
  uint64_t v16 = *(void *)(a2 + 80);
  if (v16)
  {
    CFNumberRef v17 = *(const void **)(a1 + 6368);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(a1 + 6368) = 0;
      uint64_t v16 = *(void *)(a2 + 80);
    }
    *(void *)(a1 + 6368) = v16;
    sub_1001228AC(a1, 1);
  }
  if (*(unsigned char *)(a2 + 88))
  {
    *(unsigned char *)(a1 + 6376) = *(unsigned char *)(a2 + 88);
    sub_1001228AC(a1, 1);
  }
  double v18 = *(double *)(a2 + 96);
  if (v18 != 0.0)
  {
    *(double *)(a1 + 6384) = v18;
    sub_1001228AC(a1, 1);
  }
  double v19 = *(double *)(a2 + 104);
  if (v19 != 0.0)
  {
    *(double *)(a1 + 6392) = v19;
    sub_1001228AC(a1, 1);
  }
  int v20 = *(_DWORD *)(a2 + 112);
  if (v20) {
    *(_DWORD *)(a1 + 6400) = v20;
  }
  uint64_t v21 = *(void *)(a2 + 120);
  if (v21)
  {
    int v22 = *(const void **)(a1 + 6408);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(a1 + 6408) = 0;
      uint64_t v21 = *(void *)(a2 + 120);
    }
    *(void *)(a1 + 6408) = v21;
  }
  if (*(unsigned char *)(a2 + 128)) {
    *(unsigned char *)(a1 + 6416) = *(unsigned char *)(a2 + 128);
  }
  if (*(unsigned char *)(a2 + 144)) {
    *(unsigned char *)(a1 + 6432) = *(unsigned char *)(a2 + 144);
  }
  uint64_t v23 = *(void *)(a2 + 136);
  if (v23)
  {
    id v24 = *(const void **)(a1 + 6424);
    if (v24)
    {
      CFRelease(v24);
      *(void *)(a1 + 6424) = 0;
      uint64_t v23 = *(void *)(a2 + 136);
    }
    *(void *)(a1 + 6424) = v23;
  }
  uint64_t v25 = *(void *)(a2 + 152);
  if (v25)
  {
    CFNumberRef v26 = *(const void **)(a1 + 6440);
    if (v26)
    {
      CFRelease(v26);
      *(void *)(a1 + 6440) = 0;
      uint64_t v25 = *(void *)(a2 + 152);
    }
    *(void *)(a1 + 6440) = v25;
  }
  if (*(unsigned char *)(a2 + 160)) {
    *(unsigned char *)(a1 + 6448) = *(unsigned char *)(a2 + 160);
  }
  if (qword_10027DD68) {
    objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: PHSessionMetric: method=%d end=%d teardown=%d, misStart=%f softAPUp=%f sessionEnd=%f, appleDeviceConnectionCount=%d(%x) nonAppleDeviceConnectionCount=%d deviceDisconnectCount=%d, lpmDuration=%llu, channel=%d, securityTypes 0x%XnanPhPublisherFailureReason %d, nanPhNanStationCount %d, nanPhNanStartSessionTime %f nanPhNanSessionEndTime %f", "WiFiDeviceManagerRecordPHMetricStats", *(unsigned int *)(a1 + 6288), *(unsigned int *)(a1 + 6292), *(unsigned int *)(a1 + 6296), *(void *)(a1 + 6304), *(void *)(a1 + 6312), *(void *)(a1 + 6320), *(unsigned __int16 *)(a1 + 6328), *(unsigned __int16 *)(a1 + 6330), *(unsigned __int16 *)(a1 + 6332), *(unsigned __int16 *)(a1 + 6334), *(void *)(a1 + 6336), *(unsigned int *)(a1 + 6344),
  }
      *(unsigned int *)(a1 + 6356),
      *(unsigned __int8 *)(a1 + 6360),
      *(unsigned __int8 *)(a1 + 6376),
      *(void *)(a1 + 6384),
      *(void *)(a1 + 6392));
  if (v8)
  {
    if (*v7) {
      *(_DWORD *)(a1 + 6344) = *v7;
    }
    CFDictionaryRef v29 = *(const __CFDictionary **)(a1 + 7032);
    if (v29)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v29, @"SOFTAP_LOWPOWER_STATS_LOWPOWER_STATE_DURATION");
      if (Value) {
        CFNumberGetValue(Value, kCFNumberSInt64Type, (void *)(a1 + 6336));
      }
    }
    int v31 = *(unsigned __int8 *)(a1 + 6352);
    if (v31)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: PHSessionMetric: submission already pending.", "WiFiDeviceManagerRecordPHMetricStats"];
      }
    }
    else
    {
      CFStringRef v33 = (double *)(a1 + 6288);
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: PHSessionMetric: submission triggered.", "WiFiDeviceManagerRecordPHMetricStats"];
      }
      return sub_100051218(v33);
    }
  }
  return result;
}

void sub_10010E474(uint64_t a1)
{
  IOPMAssertionID v2 = *(_DWORD *)(a1 + 5228);
  if (v2)
  {
    uint64_t v3 = IOPMAssertionRelease(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"Stop MIS: Unable to release MIS PM Assertion error=%d"];
      }
    }
    *(_DWORD *)(a1 + 5228) = 0;
  }
  if (*(void *)(a1 + 4944))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"Stopping MIS session"];
    }
    if (_MISStopService)
    {
      int v7 = _MISStopService(*(void *)(a1 + 4944));
      if (!v7) {
        goto LABEL_17;
      }
    }
    else
    {
      int v7 = -1;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Unable to stop DHCP Service: %s\n" :strerror(v7)];
    }
LABEL_17:
    if (!_MISSetHostCount || _MISSetHostCount(*(void *)(a1 + 4944), 2, 0))
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error resetting MIS host count", "__WiFiDeviceManagerStopMIS")
      }
    }
    if (_MISDetach)
    {
      int v10 = _MISDetach(*(void *)(a1 + 4944));
      if (!v10)
      {
LABEL_29:
        *(void *)(a1 + 4944) = 0;
        goto LABEL_30;
      }
    }
    else
    {
      int v10 = -1;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Unable to detach MIS session: %s\n" args:strerror(v10)];
    }
    goto LABEL_29;
  }
LABEL_30:
  if (*(void *)(a1 + 5208))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Stopping MIS Network: %@", sub_10001A43C(*(const void **)(a1 + 5208)) message];
    }
    int v13 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    sub_1001190F4(a1, v13, *(void **)(a1 + 5208), (uint64_t)sub_1001441F8, a1);
    uint64_t v14 = *(const void **)(a1 + 5208);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(a1 + 5208) = 0;
    }
  }
  else if (*(_DWORD *)(a1 + 5344) == 2)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: MIS stopped while waiting for hostap. Stopping network.", "__WiFiDeviceManagerStopMIS"];
    }
    uint64_t v16 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    sub_10010D6A0(a1, v16, 0, (uint64_t)sub_1001441F8, a1);
  }
  if (_os_feature_enabled_impl()
    && [*(id *)(a1 + 6752) isNANPublisherStarted]
    && !*(unsigned char *)(a1 + 5388))
  {
    [*(id *)(a1 + 6752) stopPublisherForPHSOverNAN];
    *(unsigned char *)(a1 + 5386) = 0;
    sub_100100A60((char *)a1, 8, 0);
    *(unsigned char *)(a1 + 5218) = 0;
  }
  int v17 = *(unsigned __int8 *)(a1 + 5219);
  if (*(unsigned char *)(a1 + 5219))
  {
    *(unsigned char *)(a1 + 5219) = 0;
    sub_10010F7BC((void *)a1);
    double v18 = *(NSObject **)(a1 + 5320);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    dispatch_time_t v20 = dispatch_time(0, (uint64_t)((Current + 315360000.0) * 1000000000.0));
    dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"Stopped Internet Connection Sharing over WiFi"];
    }
  }
  *(_WORD *)(a1 + 5216) = 0;
  *(unsigned char *)(a1 + 5360) = 0;
  *(unsigned char *)(a1 + 5222) = 0;
  sub_100100A60((char *)a1, 4, 0);
  sub_10010E8E0(a1, 0);
  *(_DWORD *)(a1 + 192) = 13;
  int v22 = _os_feature_enabled_impl();
  if (v17 && v22 && !*(unsigned char *)(a1 + 5219))
  {
    sub_10001FD64(a1, 10);
  }
  else
  {
    [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:10 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
    sub_1001028E4(a1, 2, (uint64_t)"__WiFiDeviceManagerStopMIS");
  }
}

uint64_t sub_10010E8C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 5219);
}

uint64_t sub_10010E8D4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 5219) = a2;
  return result;
}

void sub_10010E8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unsigned int v4 = a2 - 1;
  double v5 = 90.0;
  if ((a2 - 1) < 2)
  {
LABEL_5:
    if (sub_10010EB14(a1) && !v2 && *(_DWORD *)(a1 + 5232) == 5) {
      return;
    }
    if (v4 <= 4)
    {
      int v6 = *(_DWORD *)(a1 + 5232);
      if (v6)
      {
        double v7 = *(double *)(a1 + 5248);
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        int v6 = *(_DWORD *)(a1 + 5232);
        if (v5 <= v7 - Current && (v2 != 3 || v6 != 4))
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS Timer Already Running. current state (%d) current timeout (%.1f) requested state (%d) requested timeout (%.1f) ", *(unsigned int *)(a1 + 5232), *(void *)(a1 + 5248), v2, *(void *)&v5);
          }
          return;
        }
      }
      BOOL v9 = v6 == 5;
      BOOL v10 = (v2 & 0xFFFFFFFE) == 2;
      BOOL v11 = v10 && v9;
      if (v10 && v9) {
        uint64_t v2 = 5;
      }
      else {
        uint64_t v2 = v2;
      }
      if (qword_10027DD68)
      {
        int v13 = " ";
        if (v11) {
          int v13 = "Extending";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Starting MIS Timer. %s state (%d) timeout (%.1f)", v13, v2, *(void *)&v5);
      }
    }
    if (v2 != 5 && *(_DWORD *)(a1 + 5232) == 5) {
      CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 5272), @"wifid");
    }
    *(_DWORD *)(a1 + 5232) = v2;
    uint64_t v14 = *(NSObject **)(a1 + 5240);
    dispatch_time_t v15 = dispatch_time(0, (uint64_t)(v5 * 1000000000.0));
    dispatch_source_set_timer(v14, v15, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(double *)(a1 + 5248) = v5 + CFAbsoluteTimeGetCurrent();
    return;
  }
  switch((int)a2)
  {
    case 3:
    case 6:
      goto LABEL_5;
    case 4:
      return;
    case 5:
      double v5 = 120.0;
      goto LABEL_5;
    default:
      double v5 = 315360000.0;
      goto LABEL_5;
  }
}

BOOL sub_10010EB14(uint64_t a1)
{
  uint64_t v12 = 0;
  uint64_t valuePtr = 0;
  uint64_t v2 = *(const __SCDynamicStore **)(a1 + 5440);
  if (!v2) {
    return 0;
  }
  if (!qword_10027D7A8) {
    return 0;
  }
  CFDictionaryRef v3 = (const __CFDictionary *)SCDynamicStoreCopyValue(v2, (CFStringRef)qword_10027D7A8);
  if (!v3) {
    return 0;
  }
  CFDictionaryRef v4 = v3;
  CFTypeID v5 = CFGetTypeID(v3);
  if (v5 != CFDictionaryGetTypeID())
  {
LABEL_15:
    BOOL v7 = 0;
    goto LABEL_16;
  }
  CFNumberRef Value = CFDictionaryGetValue(v4, @"State");
  BOOL v7 = (BOOL)Value;
  if (Value)
  {
    CFTypeID v8 = CFGetTypeID(Value);
    if (v8 == CFNumberGetTypeID() && CFNumberGetValue((CFNumberRef)v7, kCFNumberIntType, (char *)&valuePtr + 4))
    {
      BOOL v7 = HIDWORD(valuePtr) == 1023;
      if (_MISGetHostCount && !_MISGetHostCount(*(void *)(a1 + 4944), &valuePtr, (_DWORD *)&v12 + 1))
      {
        int v9 = valuePtr - HIDWORD(v12);
        if (valuePtr < HIDWORD(v12)) {
          int v9 = 0;
        }
        LODWORD(v12) = v9;
        if (v9 != *(_DWORD *)(a1 + 5256))
        {
          CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v12);
          sub_10010F4B4(a1, (uint64_t)v10);
          *(_DWORD *)(a1 + 5256) = v12;
          if (v10) {
            CFRelease(v10);
          }
        }
      }
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_16:
  CFRelease(v4);
  return v7;
}

uint64_t sub_10010EC60(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 5218) + *(unsigned char *)(a1 + 5217));
}

uint64_t sub_10010EC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 7056);
  int v3 = *(unsigned __int8 *)(a1 + 7057);
  if ((v3 & a2) != 0) {
    return 1;
  }
  if (*v2)
  {
    BOOL v7 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    CFTypeID v8 = sub_100018FA8(a1, v7, 1);
    if (v8)
    {
      v2[1] |= 1u;
      CFRelease(v8);
    }
    BOOL v4 = 0;
    switch(v2[1])
    {
      case 0u:
        goto LABEL_13;
      case 1u:
      case 8u:
        BOOL v9 = ((a2 - 2) & 0xFFFFFFFD) == 0;
        goto LABEL_19;
      case 2u:
        BOOL v9 = a2 == 4 || a2 == 1;
        goto LABEL_19;
      case 4u:
        BOOL v4 = (a2 - 1) < 2;
        goto LABEL_22;
      case 5u:
        BOOL v9 = a2 == 2;
LABEL_19:
        BOOL v4 = v9;
        break;
      default:
        goto LABEL_22;
    }
    goto LABEL_22;
  }
  BOOL v4 = v3 == 0;
  if (a2 != 1)
  {
    if (a2 != 2 || v3 != 1) {
      goto LABEL_22;
    }
    goto LABEL_13;
  }
  if (v3 == 2) {
LABEL_13:
  }
    BOOL v4 = 1;
LABEL_22:
  BOOL v11 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    uint64_t v12 = *v2;
    CFStringRef v13 = sub_10005ADD0(v2[1]);
    uint64_t v14 = v2[1];
    CFStringRef v15 = sub_10005ADD0(a2);
    uint64_t v16 = "Not Allowed";
    if (v4) {
      uint64_t v16 = "OK";
    }
    [v11 WFLog:3, "%s: isSupported: %d current state: %@(%d) request: %@(%d) status: %s", "WiFiDeviceManagerIsOpModeAllowed", v12, v13, v14, v15, a2, v16 message];
  }
  return v4;
}

char *sub_10010EE4C(uint64_t a1)
{
  double result = (char *)[*(id *)(a1 + 6752) isNANPublisherStarted];
  if (!result)
  {
    sub_100140FF8(a1);
    [*(id *)(a1 + 6752) registerStaArriveCallback:sub_1001410C8 withContext:a1];
    [*(id *)(a1 + 6752) registerStaLeaveCallback:sub_1001412FC withContext:a1];
    [*(id *)(a1 + 6752) registerPublisherMetricCallback:sub_100141684 withContext:a1];
    uint64_t v3 = MGCopyAnswer();
    if (v3)
    {
      BOOL v4 = (const void *)v3;
      [*(id *)(a1 + 6752) setDeviceNameForPHSOverNAN:v3];
      CFRelease(v4);
    }
    [*(id *)(a1 + 6752) setDataPathSecCfgForPHSOverNAN:1];
    [*(id *)(a1 + 6752) startPublisherForPHSOverNAN];
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"MIS Preparing NAN interface info"];
    }
    return sub_100100A60((char *)a1, 8, 1);
  }
  return result;
}

double sub_10010EF6C(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 5216);
  if (*(unsigned char *)(a1 + 5219) == 1 && !*(unsigned char *)(a1 + 5222) && !*(unsigned char *)(a1 + 5223) && !*(unsigned char *)(a1 + 5386))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"MIS is already enabled"];
    }
    BOOL v4 = v14;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 5344))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS start in pending, current state: %d", *(unsigned int *)(a1 + 5344));
    }
    BOOL v4 = v3;
LABEL_9:
    return result;
  }
  if (sub_10010EB14(a1))
  {
    if (v2[6] && *v2)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"MIS in recovery. Using previously selected channel."];
      }
      *(_DWORD *)(a1 + 5344) = 1;
    }
    else if (v2[7])
    {
      if (v2[171] == 1) {
        v2[170] = 1;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS in Restarting. misIsNANPHS %d", v2[170]);
      }
    }
    else if (!v2[5])
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Skip enabling MIS. Not on Internet Tethering screen."];
      }
      uint64_t v26 = 0;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = 5;
LABEL_40:
      DWORD1(v16) = v13;
      return sub_10010E020(a1, (uint64_t)&v16);
    }
    if (*(_DWORD *)(a1 + 5228)
      || (CFStringRef v9 = sub_10006B8BC(),
          uint64_t v10 = IOPMAssertionCreateWithName(@"NoIdleSleepAssertion", 0xFFu, v9, (IOPMAssertionID *)(a1 + 5228)),
          !v10))
    {
      uint64_t v26 = 0;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      *(void *)&long long v17 = sub_10005A994();
      sub_10010E020(a1, (uint64_t)&v16);
      sub_1001417D0(a1);
      return result;
    }
    uint64_t v11 = v10;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Unable to prevent idle sleep during MIS start, error=%d", "__WiFiDeviceManagerStartMIS", v11);
    }
    *(_DWORD *)(a1 + 5228) = 0;
    uint64_t v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    int v13 = 19;
    goto LABEL_40;
  }
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  DWORD1(v16) = 4;
  sub_10010E020(a1, (uint64_t)&v16);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"User disabled MIS"];
  }
  return result;
}

void sub_10010F2A8(uint64_t a1, int a2)
{
  if (a1)
  {
    if (CFSetGetCount(*(CFSetRef *)(a1 + 5272)) > 0
      || CFSetGetCount(*(CFSetRef *)(a1 + 5288)) > 0
      || *(unsigned __int8 *)(a1 + 5260) | a2)
    {
      sub_10010F5FC(a1);
    }
    else
    {
      CFTypeID v5 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        uint64_t v6 = *(unsigned __int8 *)(a1 + 5260);
        CFSetRef v7 = *(const __CFSet **)(a1 + 5272);
        if (v7) {
          CFIndex Count = CFSetGetCount(v7);
        }
        else {
          CFIndex Count = 0;
        }
        CFSetRef v9 = *(const __CFSet **)(a1 + 5280);
        if (v9) {
          CFIndex v10 = CFSetGetCount(v9);
        }
        else {
          CFIndex v10 = 0;
        }
        CFSetRef v11 = *(const __CFSet **)(a1 + 5288);
        if (v11) {
          CFIndex v12 = CFSetGetCount(v11);
        }
        else {
          CFIndex v12 = 0;
        }
        CFSetRef v13 = *(const __CFSet **)(a1 + 5296);
        if (v13) {
          CFIndex v14 = CFSetGetCount(v13);
        }
        else {
          CFIndex v14 = 0;
        }
        CFSetRef v15 = *(const __CFSet **)(a1 + 5304);
        if (v15) {
          CFIndex v16 = CFSetGetCount(v15);
        }
        else {
          CFIndex v16 = 0;
        }
        CFSetRef v17 = *(const __CFSet **)(a1 + 5312);
        if (v17) {
          CFSetRef v17 = (const __CFSet *)CFSetGetCount(v17);
        }
        [v5 WFLog:3 message:@"%s: current misIsHidden: %d, num broadcast clients %ld, num hidden clients %ld, num broadcast STAs %ld, num hidden STAs %ld, num other hidden STAs %ld num Nan Link STAs %ld", @"WiFiDeviceManagerSetMISHiddenOrBroadcastState", v6, Count, v10, v12, v14, v16, v17];
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Start Broadcast to Hidden state change timer\n"];
      }
      long long v19 = *(NSObject **)(a1 + 5320);
      dispatch_time_t v20 = dispatch_time(0, 90000000000);
      dispatch_source_set_timer(v19, v20, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
  }
}

void sub_10010F4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  CFTypeID v5 = (const void *)sub_100062FB4(v4);
  uint64_t v6 = sub_100017D28(v4, v5, 508, 0, a2);
  if (v6)
  {
    uint64_t v7 = v6;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Unable to set MIS max STA (err = %d) deviceManager=%p\n", v7, a1);
    }
  }
}

void sub_10010F568(uint64_t a1, int a2, int a3, int a4, void *value)
{
  if (!a1 || !value) {
    return;
  }
  if (a2)
  {
    uint64_t v6 = 5280;
    if (!a3) {
      uint64_t v6 = 5272;
    }
    CFSetAddValue(*(CFMutableSetRef *)(a1 + v6), value);
LABEL_10:
    sub_10010F2A8(a1, 0);
    return;
  }
  uint64_t v8 = 5280;
  if (!a3) {
    uint64_t v8 = 5272;
  }
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + v8), value);
  if (a4) {
    goto LABEL_10;
  }
}

void sub_10010F5FC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (unsigned char *)(a1 + 5219);
    if (*(unsigned char *)(a1 + 5219))
    {
      BOOL v3 = CFSetGetCount(*(CFSetRef *)(a1 + 5272)) <= 0 && CFSetGetCount(*(CFSetRef *)(a1 + 5288)) < 1;
      CFTypeID v5 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        uint64_t v17 = v2[41];
        CFSetRef v6 = *(const __CFSet **)(a1 + 5272);
        if (v6) {
          CFIndex Count = CFSetGetCount(v6);
        }
        else {
          CFIndex Count = 0;
        }
        CFSetRef v8 = *(const __CFSet **)(a1 + 5280);
        if (v8) {
          CFIndex v9 = CFSetGetCount(v8);
        }
        else {
          CFIndex v9 = 0;
        }
        CFSetRef v10 = *(const __CFSet **)(a1 + 5288);
        if (v10) {
          CFIndex v11 = CFSetGetCount(v10);
        }
        else {
          CFIndex v11 = 0;
        }
        CFSetRef v12 = *(const __CFSet **)(a1 + 5296);
        if (v12) {
          CFIndex v13 = CFSetGetCount(v12);
        }
        else {
          CFIndex v13 = 0;
        }
        CFSetRef v14 = *(const __CFSet **)(a1 + 5304);
        if (v14) {
          CFIndex v15 = CFSetGetCount(v14);
        }
        else {
          CFIndex v15 = 0;
        }
        CFSetRef v16 = *(const __CFSet **)(a1 + 5312);
        if (v16) {
          CFSetRef v16 = (const __CFSet *)CFSetGetCount(v16);
        }
        [v5 WFLog:3 message:@"__WiFiDeviceManagerSetBroadcastHiddenMode: new misIsHidden: %d, current misIsHidden: %d, num broadcast clients %ld, num hidden clients %ld, num broadcast STAs %ld, num hidden STAs %ld, num other hidden STAs %ld num Nan Link STAs %ld", @"__WiFiDeviceManagerSetBroadcastHiddenMode", v3, v17, Count, v9, v11, v13, v15, v16];
      }
      if (v2[41] != v3)
      {
        v2[41] = v3;
        if (*v2)
        {
          sub_1000643C4(*(void *)(a1 + 64), v3);
          sub_100125288(a1);
        }
      }
    }
  }
}

void sub_10010F7BC(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (unsigned __int8 *)a1 + 5221;
    uint64_t v4 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v23 = *v2;
      uint64_t v5 = v2[39];
      CFSetRef v6 = (const __CFSet *)a1[659];
      if (v6) {
        CFIndex Count = CFSetGetCount(v6);
      }
      else {
        CFIndex Count = 0;
      }
      CFSetRef v8 = (const __CFSet *)a1[660];
      if (v8) {
        CFIndex v9 = CFSetGetCount(v8);
      }
      else {
        CFIndex v9 = 0;
      }
      CFSetRef v10 = (const __CFSet *)a1[661];
      if (v10) {
        CFIndex v11 = CFSetGetCount(v10);
      }
      else {
        CFIndex v11 = 0;
      }
      CFSetRef v12 = (const __CFSet *)a1[662];
      if (v12) {
        CFIndex v13 = CFSetGetCount(v12);
      }
      else {
        CFIndex v13 = 0;
      }
      CFSetRef v14 = (const __CFSet *)a1[663];
      if (v14) {
        CFIndex v15 = CFSetGetCount(v14);
      }
      else {
        CFIndex v15 = 0;
      }
      CFSetRef v16 = (const __CFSet *)a1[664];
      if (v16) {
        CFSetRef v16 = (const __CFSet *)CFSetGetCount(v16);
      }
      [v4 WFLog:3 message:@"%s (discovery:%d): Clearing misIsHidden: %d, num broadcast clients %ld, num hidden clients %ld, num broadcast STAs %ld, num hidden STAs %ld, num other hidden STAs %ld num Nan Link STAs %ld", "WiFiDeviceManagerClearMISHiddenOrBroadcastState", v23, v5, Count, v9, v11, v13, v15, v16];
    }
    v2[39] = 0;
    if (!*v2)
    {
      uint64_t v17 = (__CFSet *)a1[659];
      if (v17) {
        CFSetRemoveAllValues(v17);
      }
      long long v18 = (__CFSet *)a1[660];
      if (v18) {
        CFSetRemoveAllValues(v18);
      }
    }
    long long v19 = (__CFSet *)a1[661];
    if (v19) {
      CFSetRemoveAllValues(v19);
    }
    dispatch_time_t v20 = (__CFSet *)a1[662];
    if (v20) {
      CFSetRemoveAllValues(v20);
    }
    long long v21 = (__CFSet *)a1[663];
    if (v21) {
      CFSetRemoveAllValues(v21);
    }
    if (!v2[167])
    {
      long long v22 = (__CFSet *)a1[664];
      if (v22)
      {
        CFSetRemoveAllValues(v22);
      }
    }
  }
}

uint64_t sub_10010F97C(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = (const void *)sub_100017C48(v4);
  CFSetRef v6 = (uint64_t *)&kCFBooleanFalse;
  if (!a2) {
    CFSetRef v6 = (uint64_t *)&kCFBooleanTrue;
  }
  sub_100017D28(v4, v5, 511, 0, *v6);
  uint64_t v7 = *(void *)(a1 + 120);

  return sub_100036B10(v7, a2);
}

uint64_t sub_10010F9FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 5221);
}

uint64_t sub_10010FA08(uint64_t a1)
{
  return sub_1000666DC(*(void *)(a1 + 64));
}

uint64_t sub_10010FA10(uint64_t a1)
{
  uint64_t result = sub_1000666DC(*(void *)(a1 + 64));
  if (result) {
    return sub_10006C1D8(*(void *)(a1 + 64)) != 0;
  }
  return result;
}

uint64_t sub_10010FA4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 5457);
}

void sub_10010FA58(uint64_t a1, int a2, int a3, int a4)
{
  CFSetRef v8 = (unsigned __int8 *)(a1 + 7080);
  CFSetRef v10 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    int v11 = sub_1000666DC(*(void *)(a1 + 64));
    CFSetRef v12 = "YES";
    if (!v11) {
      CFSetRef v12 = "NO";
    }
    CFIndex v13 = "enable";
    if (a2) {
      CFSetRef v14 = "enable";
    }
    else {
      CFSetRef v14 = "disable";
    }
    if (!a3) {
      CFIndex v13 = "disable";
    }
    CFIndex v15 = "enabled";
    if (!a4) {
      CFIndex v15 = "disabled";
    }
    [v10 WFLog:3 message:@"WoW Capable = %s, Attempting to %s WoW and %s LPAS with WoW on Captive %s", v12, v14, v13, v15];
  }
  if (!*(unsigned char *)(a1 + 3411))
  {
    if (a2)
    {
      if (*v8 != a2)
      {
        sub_100003EE4(a1, 3);
        if (*(_DWORD *)(a1 + 20) == 1)
        {
          *(_DWORD *)(a1 + 192) = 17;
          sub_1001028E4(a1, 0, (uint64_t)"WiFiDeviceManagerSetWoWState");
        }
      }
    }
  }
  unsigned __int8 *v8 = a2;
  v8[1] = a3;
  void v8[2] = a4;
  sub_10010FBE8(a1, a2, a3, a4, 0);
  if (!a4)
  {
    sub_100108600(a1);
  }
}

id sub_10010FBE8(uint64_t a1, int a2, int a3, int a4, int a5)
{
  id result = (id)sub_1000666DC(*(void *)(a1 + 64));
  if (result)
  {
    *(_OWORD *)keys = *(_OWORD *)off_1002419A8;
    long long v23 = *(_OWORD *)off_1002419B8;
    CFBooleanRef v11 = kCFBooleanTrue;
    if (a2) {
      CFBooleanRef v12 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v12 = kCFBooleanFalse;
    }
    if (a3) {
      CFBooleanRef v13 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v13 = kCFBooleanFalse;
    }
    CFBooleanRef v18 = v12;
    CFBooleanRef v19 = v13;
    if (a4) {
      CFBooleanRef v14 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v14 = kCFBooleanFalse;
    }
    if (!a5) {
      CFBooleanRef v11 = kCFBooleanFalse;
    }
    CFBooleanRef v20 = v14;
    CFBooleanRef v21 = v11;
    id result = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)&v18, 4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (result)
    {
      CFIndex v15 = result;
      sub_100074938(*(void *)(a1 + 64), a2, a3);
      uint64_t v16 = *(void *)(a1 + 64);
      uint64_t v17 = (const void *)sub_100017C48(v16);
      sub_100017D28(v16, v17, 496, 0, (uint64_t)v15);
      CFRelease(v15);
      sub_10010D55C(a1);
      return [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager", v18, v19) sendWoWDidChangeEventWithInterfaceName:sub_100016E20(*(void *)(a1 + 64))]
    }
  }
  return result;
}

uint64_t sub_10010FD54(uint64_t result)
{
  if (result) {
    return sub_100063EA8(*(void *)(result + 64));
  }
  return result;
}

BOOL sub_10010FD64(uint64_t a1, uint64_t a2)
{
  return sub_10006F3C8(*(void *)(a1 + 64), a2) == 0;
}

BOOL sub_10010FD88(uint64_t a1, uint64_t a2)
{
  return sub_10006F4A0(*(void *)(a1 + 64), a2) == 0;
}

uint64_t sub_10010FDAC(uint64_t a1, const void *a2, char a3)
{
  if (sub_10006F578(*(void *)(a1 + 64), (uint64_t)a2)) {
    return 0;
  }
  uint64_t v7 = *(const void **)(a1 + 7352);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 7352) = 0;
  }
  if (a2) {
    CFTypeRef v8 = CFRetain(a2);
  }
  else {
    CFTypeRef v8 = 0;
  }
  *(void *)(a1 + 7352) = v8;
  *(unsigned char *)(a1 + 7360) = a3;
  return 1;
}

BOOL sub_10010FE28(uint64_t a1)
{
  return sub_10006F650(*(void *)(a1 + 64)) == 0;
}

uint64_t sub_10010FE4C(uint64_t a1)
{
  if (!sub_10006F728(*(void *)(a1 + 64)))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s WiFiMC : Retrieved band support :[%d]", "WiFiDeviceManagerGetCountryBandSupport", 0);
    }
  }
  return 0;
}

BOOL sub_10010FEC8(uint64_t a1, const __CFString *a2)
{
  uint64_t v4 = sub_1001102A0(a1);
  if (!v4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: error creating network struct" :@"WiFiDeviceManagerSetMisPassword"];
    }
    return 0;
  }
  uint64_t v5 = v4;
  if (!a2 || !CFStringGetLength(a2))
  {
    CFRelease(v5);
    return 0;
  }
  CFStringRef v6 = sub_1000C62C8((CFDictionaryRef *)v5);
  if (qword_10027DD68)
  {
    CFTypeRef v8 = "already";
    if (!v6) {
      CFTypeRef v8 = "not";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: MIS password is %s present", "WiFiDeviceManagerSetMisPassword", v8);
  }
  if (v6 && CFStringGetLength(v6))
  {
    if (CFStringCompare(a2, v6, 0))
    {
      BOOL v9 = sub_1000C93E0(v5, a2);
      if (!v9)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: failed setting MIS password with one already present. Try removing and attempt again...", "WiFiDeviceManagerSetMisPassword")];
        }
        sub_1000C94E0(v5);
        sub_1000C95A8(v5);
        BOOL v19 = sub_1000C93E0(v5, a2);
        if (!v19)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4 message:"Error saving password in keychain"];
          }
          CFRelease(v5);
          BOOL v9 = 0;
          goto LABEL_37;
        }
        BOOL v9 = v19;
      }
      if (sub_10010EB14(a1) && *(unsigned char *)(a1 + 5219))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, @"%s: Stopping MIS", @"WiFiDeviceManagerSetMisPassword"];
        }
        uint64_t v26 = 0;
        long long v24 = 0u;
        long long v25 = 0u;
        uint64_t v22 = 4;
        memset(v21, 0, sizeof(v21));
        DWORD2(v21[0]) = 4;
        CFStringRef v23 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", @"Password Change");
        sub_10010E020(a1, (uint64_t)v21);
        sub_10010E474(a1);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, "%s: new and current passwords are equal", "WiFiDeviceManagerSetMisPassword"];
      }
      BOOL v9 = 1;
    }
    goto LABEL_31;
  }
  BOOL v9 = sub_1000C93E0(v5, a2);
  if (v9)
  {
LABEL_31:
    if (sub_10010EB14(a1) && !*(unsigned char *)(a1 + 5219))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: Starting MIS" :@"WiFiDeviceManagerSetMisPassword"];
      }
      sub_10010EF6C(a1);
    }
    goto LABEL_36;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: failed setting new MIS password. Try removing any existing item and attempt again...", "WiFiDeviceManagerSetMisPassword")];
  }
  sub_1000C94E0(v5);
  sub_1000C95A8(v5);
  BOOL v12 = sub_1000C93E0(v5, a2);
  if (v12)
  {
    BOOL v9 = v12;
    goto LABEL_31;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4 message:"Error saving new password in keychain"];
  }
  BOOL v9 = 0;
LABEL_36:
  CFRelease(v5);
  if (v6) {
LABEL_37:
  }
    CFRelease(v6);
  return v9;
}

_WORD *sub_1001102A0(uint64_t a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Preparing MIS Network Configuration Parameters"];
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 0;
  }
  uint64_t v4 = Mutable;
  int v15 = -1431655766;
  __int16 valuePtr = 1;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
  if (!v5) {
    goto LABEL_11;
  }
  CFNumberRef v6 = v5;
  CFDictionaryAddValue(v4, @"AP_MODE_AUTH_LOWER", v5);
  CFRelease(v6);
  __int16 valuePtr = 8;
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
  if (!v7) {
    goto LABEL_11;
  }
  CFNumberRef v8 = v7;
  CFDictionaryAddValue(v4, @"AP_MODE_AUTH_UPPER", v7);
  CFRelease(v8);
  int v15 = 10;
  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v15);
  if (!v9) {
    goto LABEL_11;
  }
  CFNumberRef v10 = v9;
  CFDictionaryAddValue(v4, @"AP_MODE_CYPHER_TYPE", v9);
  CFRelease(v10);
  int v15 = *(unsigned __int8 *)(a1 + 5216);
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v15);
  if (!v11
    || (CFNumberRef v12 = v11,
        CFDictionaryAddValue(v4, @"CHANNEL", v11),
        CFRelease(v12),
        CFDictionaryAddValue(v4, @"SSID_STR", @"_AppleWi-FiInternetTetheringSSID_"),
        (CFBooleanRef v13 = sub_100019658((int)kCFAllocatorDefault, v4)) == 0))
  {
LABEL_11:
    CFBooleanRef v13 = 0;
  }
  CFRelease(v4);
  return v13;
}

void sub_100110478(uint64_t a1, CFStringRef *a2)
{
  BOOL v3 = (CFDictionaryRef *)sub_1001102A0(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    *a2 = 0;
    *a2 = sub_1000C62C8(v3);
    CFRelease(v4);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: error creating network struct" args:("WiFiDeviceManagerCopyMisPassword", 0)];
    }
  }
}

uint64_t sub_100110524(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_10011052C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_100110558(uint64_t a1, const void *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 20) == a3) {
    return 0;
  }
  uint64_t v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v12 = 3;
  memset(v11, 0, sizeof(v11));
  DWORD2(v11[0]) = 3;
  CFStringRef v13 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", @"Power Off");
  sub_10010E020(a1, (uint64_t)v11);
  sub_10010E474(a1);
  if (!a3)
  {
    CFNumberRef v6 = *(void **)(a1 + 8976);
    if (v6) {
      [v6 resetSettlement];
    }
    if (*(_DWORD *)(a1 + 5424))
    {
      CFNumberRef v7 = *(void **)(a1 + 5432);
      if (v7) {

      }
      *(void *)(a1 + 5432) = 0;
      sub_100101DF0(a1, a2);
    }
    CFNumberRef v8 = sub_100018FA8(a1, a2, 1);
    if (v8)
    {
      CFNumberRef v9 = v8;
      if (sub_10001FC1C((uint64_t)v8)) {
        sub_10006DB68(*(void *)(a1 + 64), v9, 0);
      }
      CFRelease(v9);
    }
  }
  uint64_t result = sub_10006B9D4(*(void *)(a1 + 64), a2, a3);
  if (!result)
  {
    *(_DWORD *)(a1 + 20) = a3;
    sub_1001106BC(a1, (uint64_t)a2);
    sub_10011083C(a1, 1u, a3);
    if (*(_DWORD *)(a1 + 20) == 1) {
      sub_1000734A8(*(void *)(a1 + 64));
    }
    return 0;
  }
  return result;
}

id sub_1001106BC(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(void (**)(uint64_t, uint64_t, void))(a1 + 3992);
  if (v3) {
    v3(a1, a2, *(void *)(a1 + 4000));
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Device powering %s", sub_10005A970(*(_DWORD *)(a1 + 20)));
  }
  sub_100102284(a1);
  sub_100003EE4(a1, 1);
  if (*(_DWORD *)(a1 + 20) == 1)
  {
    sub_10011F41C(a1);
    *(_DWORD *)(a1 + 192) = 3;
    if (_os_feature_enabled_impl())
    {
      sub_10001FD64(a1, 8uLL);
    }
    else
    {
      [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:8 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
      sub_1001028E4(a1, 2, (uint64_t)"__WiFiDeviceManagerUpdatePower");
    }
    sub_10010677C(a1);
    uint64_t v5 = *(void *)(a1 + 64);
    CFNumberRef v6 = (const void *)sub_100017C48(v5);
    sub_10006BFE4(v5, v6, *(_DWORD *)(a1 + 5396), *(_DWORD *)(a1 + 5392));
  }
  id result = (id)_os_feature_enabled_impl();
  if (result)
  {
    return sub_100006664((uint64_t *)a1);
  }
  return result;
}

void sub_10011083C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  CFNumberRef v6 = (unsigned char *)(a1 + 7128);
  double Current = CFAbsoluteTimeGetCurrent();
  double v8 = *(double *)(a1 + 7096);
  BOOL v9 = v8 != 0.0;
  if (v8 + 120.0 <= Current) {
    BOOL v9 = 0;
  }
  CFStringRef v62 = v6;
  if (!a2 && v9)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, "%s: DPS event detected while already in monitoring period. Ignoring...", "__WiFiDeviceManagerEvaluateDpsStateChange"];
    }
LABEL_7:
    CFArrayRef v11 = 0;
LABEL_8:
    int v12 = 1;
    goto LABEL_9;
  }
  if (!a2) {
    LOBYTE(v9) = 1;
  }
  if (v9)
  {
    uint64_t v14 = *(void *)(a1 + 64);
    long long v15 = (const void *)sub_100017C48(v14);
    CFArrayRef v16 = (const __CFArray *)sub_10001C1B4(v14, v15);
    CFArrayRef v11 = v16;
    if (v16)
    {
      uint64_t v17 = sub_10001A43C(v16);
      CFArrayRef v18 = sub_1000C6D70(v11);
      CFArrayRef v19 = sub_1000C6E14(v11);
    }
    else
    {
      uint64_t v17 = 0;
      CFArrayRef v18 = 0;
      CFArrayRef v19 = 0;
    }
    switch(a2)
    {
      case 0u:
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: initiating DPS probing and monitoring period", "__WiFiDeviceManagerEvaluateDpsStateChange")];
        }
        long long v47 = *(void **)(a1 + 7368);
        if (v47) {
          [v47 addFaultEvent:6 forInterface:sub_100016E20(*(void *)(a1 + 64))];
        }
        goto LABEL_79;
      case 1u:
        if (!*v6) {
          unsigned char *v6 = 1;
        }
        if (v6[1]) {
          goto LABEL_8;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: power state changed while monitoring DPS.. State:%d", "__WiFiDeviceManagerEvaluateDpsStateChange", a3];
        }
        int v12 = 1;
        v6[1] = 1;
        if (v6[2]) {
          goto LABEL_9;
        }
        goto LABEL_116;
      case 2u:
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "ControlCenterToggled: state:%d", a3);
        }
        if (*v6) {
          goto LABEL_8;
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: link state changed while monitoring DPS", "__WiFiDeviceManagerEvaluateDpsStateChange")];
        }
        int v12 = 1;
        unsigned char *v6 = 1;
        if (v6[1]) {
          goto LABEL_9;
        }
        v6[2] = 1;
LABEL_116:
        sub_100052EE8(*(void *)(a1 + 64), 0, 2u, 0);
        goto LABEL_9;
      case 3u:
        if (v6[1])
        {
          if (!v11) {
            goto LABEL_8;
          }
        }
        else
        {
          int v12 = 1;
          if (!v11 || !*v6)
          {
LABEL_9:
            BOOL v13 = 1;
            goto LABEL_16;
          }
        }
        sub_100052EE8(*(void *)(a1 + 64), 0, 3u, 0);
        goto LABEL_8;
      case 4u:
      case 5u:
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Event IP/roam state changed: info:%d", a3);
        }
        if (v11)
        {
          int v41 = *(const void **)(a1 + 7104);
          CFNumberRef v6 = v62;
          if (v41 && v17 && !CFEqual(v41, v17)) {
            v62[3] = 1;
          }
          char v42 = *(const void **)(a1 + 7112);
          if (v42 && v18 && !CFEqual(v42, v18)) {
            v62[4] = 1;
          }
          unsigned __int8 v43 = *(const void **)(a1 + 7120);
          if (v43 && v19 && !CFEqual(v43, v19)) {
            void v62[5] = 1;
          }
          LOBYTE(v63) = v62[3];
          *(_WORD *)((char *)&v63 + 1) = *((_WORD *)v62 + 2);
          BYTE3(v63) = *v62;
          char v44 = v62[1];
          DWORD1(v63) = -1431655766;
          *((void *)&v63 + 1) = __PAIR64__(a3, a2);
          BYTE4(v63) = v44;
          sub_10005696C(&v63);
          long long v45 = v62;
          goto LABEL_81;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: no connected network while in DPS monitoring period." arguments:__WiFiDeviceManagerEvaluateDpsStateChange];
        }
        goto LABEL_7;
      case 6u:
        if (*v6) {
          goto LABEL_8;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: link went down while monitoring DPS.. reason:%d", "__WiFiDeviceManagerEvaluateDpsStateChange", a3];
        }
        int v12 = 1;
        unsigned char *v6 = 1;
        LOBYTE(v64) = v6[3];
        *(_WORD *)((char *)&v64 + 1) = *((_WORD *)v6 + 2);
        BYTE3(v64) = 1;
        char v59 = v6[1];
        *(void *)((char *)&v64 + 4) = 0x6AAAAAAAALL;
        BYTE4(v64) = v59;
        HIDWORD(v64) = a3;
        sub_10005696C(&v64);
        BOOL v13 = 0;
        goto LABEL_16;
      default:
LABEL_79:
        if (!v11)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: DPS received while not connected. Not proceeding.":@"__WiFiDeviceManagerEvaluateDpsStateChange"];
          }
          goto LABEL_7;
        }
        *(double *)(a1 + 7096) = Current;
        long long v45 = (unsigned char *)(a1 + 7128);
        v6[110] = 0;
LABEL_81:
        *((_WORD *)v45 + 2) = 0;
        *(_DWORD *)long long v45 = 0;
        long long v48 = *(const void **)(a1 + 7104);
        if (v48)
        {
          CFRelease(v48);
          *(void *)(a1 + 7104) = 0;
        }
        long long v49 = *(const void **)(a1 + 7112);
        if (v49)
        {
          CFRelease(v49);
          *(void *)(a1 + 7112) = 0;
        }
        long long v50 = *(const void **)(a1 + 7120);
        if (v50)
        {
          CFRelease(v50);
          *(void *)(a1 + 7120) = 0;
        }
        if (v17) {
          *(void *)(a1 + 7104) = CFRetain(v17);
        }
        if (v18) {
          *(void *)(a1 + 7112) = CFRetain(v18);
        }
        if (v19) {
          *(void *)(a1 + 7120) = CFRetain(v19);
        }
        int v12 = 1;
        if (v6[108]) {
          goto LABEL_9;
        }
        CFAbsoluteTime v51 = CFAbsoluteTimeGetCurrent();
        v6[108] = 1;
        *(CFAbsoluteTime *)(a1 + 7088) = v51;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"DPS Probe: Starting probe on all ACs"];
        }
        uint64_t v53 = 0;
        do
        {
          sub_10014A130(v53, a1);
          uint64_t v53 = (v53 + 1);
        }
        while (v53 != 4);
        if (!a1)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager." : @"__WiFiDeviceManagerCheckAndSubmitAPInfo"];
          }
          goto LABEL_54;
        }
        goto LABEL_8;
    }
  }
  int v12 = 0;
  CFArrayRef v11 = 0;
  BOOL v13 = a2 != 6;
LABEL_16:
  CFDictionaryRef v20 = *(const __CFDictionary **)(a1 + 7240);
  if (v20) {
    unsigned int Count = CFDictionaryGetCount(v20);
  }
  else {
    unsigned int Count = 0;
  }
  CFDictionaryRef v22 = (const __CFDictionary *)sub_100073D5C(*(void *)(a1 + 64));
  if (!v22)
  {
    int v27 = 0;
    uint64_t v26 = 0;
    CFStringRef v28 = 0;
    goto LABEL_35;
  }
  CFDictionaryRef v23 = v22;
  unsigned int v24 = CFDictionaryGetCount(v22);
  unsigned int v25 = v24;
  uint64_t v26 = 0;
  int v27 = 0;
  CFStringRef v28 = 0;
  if (!v24 || Count > v24)
  {
LABEL_35:
    if (!v12) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  if (!Count)
  {
    uint64_t v26 = 0;
    CFStringRef v28 = 0;
LABEL_45:
    *(void *)(a1 + 7240) = CFDictionaryCreateCopy(kCFAllocatorDefault, v23);
    int v27 = 1;
    if (!v12) {
      goto LABEL_46;
    }
LABEL_36:
    CFDictionaryRef v36 = *(const __CFDictionary **)(a1 + 7240);
    if (v36 && CFDictionaryGetCount(v36) && ((v62[110] != 0) & ~v27) == 0)
    {
      v62[110] = 1;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Sending AccessPointInfo update to WA: %@", *(void *)(a1 + 7240) message];
      }
      sub_100056BBC(*(const __CFDictionary **)(a1 + 7240));
    }
    goto LABEL_46;
  }
  CFDictionaryRef v29 = (const void **)malloc_type_malloc(8 * v24, 0x6004044C4A2DFuLL);
  if (!v29)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: keys alloc failure", @"__WiFiDeviceManagerCheckAndSubmitAPInfo"];
    }
    if (!v13) {
      goto LABEL_51;
    }
    goto LABEL_54;
  }
  uint64_t v26 = v29;
  bzero(v29, 8 * v25);
  int v30 = (const void **)malloc_type_malloc(8 * v25, 0x6004044C4A2DFuLL);
  if (v30)
  {
    CFStringRef v28 = v30;
    bzero(v30, 8 * v25);
    CFDictionaryGetKeysAndValues(v23, v26, v28);
    unint64_t v31 = 0;
    uint64_t v32 = 8 * v25;
    do
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v23, v26[v31 / 8]);
      CFStringRef v34 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 7240), v26[v31 / 8]);
      if (Value) {
        BOOL v35 = v34 == 0;
      }
      else {
        BOOL v35 = 1;
      }
      if (v35 || CFStringCompare(Value, v34, 0))
      {
        uint64_t v38 = *(const void **)(a1 + 7240);
        if (v38)
        {
          CFRelease(v38);
          *(void *)(a1 + 7240) = 0;
        }
        goto LABEL_45;
      }
      v31 += 8;
    }
    while (v32 != v31);
    int v27 = 0;
    if (v12) {
      goto LABEL_36;
    }
LABEL_46:
    if (!v26) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: values alloc failure" args:("__WiFiDeviceManagerCheckAndSubmitAPInfo")];
  }
  CFStringRef v28 = 0;
LABEL_47:
  free(v26);
LABEL_48:
  if (v28) {
    free(v28);
  }
  if (!v13)
  {
LABEL_51:
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"DPS/DNS Symptoms: DPS Probe: cancelling DPS probe & clearing HUD because of link down"];
    }
    sub_100145710(a1);
    sub_10014A044(a1);
  }
LABEL_54:
  if (v11) {
    CFRelease(v11);
  }
}

uint64_t sub_10011110C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const void *)sub_100017C48(*(void *)(a1 + 64));

  return sub_100110558(a1, v4, a2);
}

id sub_100111154(uint64_t a1)
{
  return [*(id *)(a1 + 6752) isClientAssociated];
}

__CFDictionary *sub_100111170(uint64_t a1, const void *a2)
{
  BOOL v3 = sub_100018FA8(a1, a2, 1);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (uint64_t)v3;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFNumberRef v6 = sub_10001A6D0(v4);
    CFDictionarySetValue(Mutable, @"RoamKnownBSS", v6);
    CFDictionarySetValue(Mutable, @"RoamEvents", *(const void **)(a1 + 272));
  }
  return Mutable;
}

uint64_t sub_10011121C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = sub_10006BFDC();
  if (!v5)
  {
    *(unsigned char *)(a1 + 249) = a3;
    if (a3)
    {
      sub_100102284(a1);
    }
    else
    {
      *(_DWORD *)(a1 + 192) = 6;
      if (_os_feature_enabled_impl())
      {
        sub_10001FD64(a1, 0xCuLL);
      }
      else
      {
        [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:12 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
        sub_1001028E4(a1, 2, (uint64_t)"WiFiDeviceManagerSetWiFiDirectMode");
      }
    }
  }
  return v5;
}

CFArrayRef sub_1001112DC(uint64_t a1)
{
  CFArrayRef result = (CFArrayRef)CFSetGetCount(*(CFSetRef *)(a1 + 3320));
  if (result)
  {
    CFIndex v3 = (CFIndex)result;
    __chkstk_darwin();
    uint64_t v5 = (char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    memset(v5, 170, v4);
    CFSetGetValues(*(CFSetRef *)(a1 + 3320), (const void **)v5);
    return CFArrayCreate(kCFAllocatorDefault, (const void **)v5, v3, &kCFTypeArrayCallBacks);
  }
  return result;
}

__CFDictionary *sub_1001113B4(uint64_t a1, const __CFString *a2)
{
  int valuePtr = 0;
  CFStringRef v4 = (const __CFString *)sub_10005FC0C(*(void *)(a1 + 64));
  if (!v4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: No awdl Interface."];
    }
    goto LABEL_36;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null interface." : @"WiFiDeviceManagerCopyInterfaceStateInfo"];
    }
LABEL_36:
    return 0;
  }
  if (CFEqual(v4, a2))
  {
    uint64_t v6 = sub_10005FB34(*(void *)(a1 + 64), a2);
    if (!v6) {
      return v6;
    }
    CFStringRef Value = CFDictionaryGetValue(v6, @"LINK_CHANGED_IS_AVAILABLE");
    MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v6);
    if (!MutableCopy)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: null copiedInfoRef.", @"WiFiDeviceManagerCopyInterfaceStateInfo"];
      }
      goto LABEL_30;
    }
    BOOL v13 = MutableCopy;
    if (Value)
    {
      uint64_t v14 = *(void **)(a1 + 5408);
      if (v14)
      {
        if (![v14 isPowerResourceAvailable:1]
          || (CFBooleanRef v15 = kCFBooleanTrue, !CFEqual(Value, kCFBooleanTrue)))
        {
          CFBooleanRef v15 = kCFBooleanFalse;
        }
        CFDictionarySetValue(v13, @"LINK_CHANGED_IS_AVAILABLE", v15);
      }
    }
    int v16 = sub_1001116C8(a1);
    uint64_t v17 = (const void **)&kCFBooleanFalse;
    if (!v16) {
      uint64_t v17 = (const void **)&kCFBooleanTrue;
    }
    CFDictionarySetValue(v13, @"RANGING_ALLOWED", *v17);
    if (sub_1001116C8(a1))
    {
      int v18 = 1;
    }
    else
    {
      if (!sub_1001116F0(a1))
      {
LABEL_27:
        CFNumberRef v19 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
        CFDictionarySetValue(v13, @"RANGING_ACTIVE_SESSION", v19);
        if (v19) {
          CFRelease(v19);
        }
        CFRelease(v6);
        uint64_t v6 = v13;
LABEL_30:
        return v6;
      }
      int v18 = 2;
    }
    int valuePtr = v18;
    goto LABEL_27;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v6 = Mutable;
  if (Mutable)
  {
    CFNumberRef v7 = (unsigned char *)(a1 + 5260);
    CFDictionarySetValue(Mutable, @"WiFiHostApStateIdentifier", kCFBooleanTrue);
    if ((v7[1797] & 4) != 0) {
      CFBooleanRef v8 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v8 = kCFBooleanFalse;
    }
    CFDictionarySetValue(v6, @"WiFiHostApStateEnable", v8);
    if (*v7) {
      CFBooleanRef v9 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v9 = kCFBooleanFalse;
    }
    CFDictionarySetValue(v6, @"WiFiHostApStateADHSMode", v9);
  }
  return v6;
}

uint64_t sub_1001116C8(uint64_t a1)
{
  uint64_t result = (uint64_t)sub_1001195F0(a1, 1);
  if (result)
  {
    CFRelease((CFTypeRef)result);
    return 1;
  }
  return result;
}

uint64_t sub_1001116F0(uint64_t a1)
{
  uint64_t result = (uint64_t)sub_1001195F0(a1, 2);
  if (result)
  {
    CFRelease((CFTypeRef)result);
    return 1;
  }
  return result;
}

void *sub_100111718(uint64_t a1, const void *a2)
{
  return sub_100018FA8(a1, a2, 0);
}

id sub_100111720(uint64_t a1)
{
  id v2 = [(NSString *)[+[NSUUID UUID] UUIDString] copy];
  *(void *)(a1 + 3856) = v2;
  CFIndex v3 = *(void **)(a1 + 8824);

  return [v3 setColocatedScopeID:v2];
}

uint64_t sub_100111778(uint64_t a1, const void *a2, int a3)
{
  uint64_t v6 = (const void *)sub_100017C48(*(void *)(a1 + 64));
  CFNumberRef v7 = sub_10001C1B4(*(void *)(a1 + 64), v6);
  if (v7)
  {
    CFBooleanRef v8 = v7;
    CFBooleanRef v9 = sub_10001A43C(v7);
    if (sub_100074914(*(void *)(a1 + 64)))
    {
      uint64_t valuePtr = 0;
      CFArrayRef v10 = *(const __CFArray **)(a1 + 3736);
      if (v10) {
        CFIndex Count = CFArrayGetCount(v10);
      }
      else {
        CFIndex Count = 0;
      }
      CFNumberRef v15 = (const __CFNumber *)sub_10001E404((uint64_t)v8, @"CHANNEL_FLAGS");
      if (v15) {
        CFNumberGetValue(v15, kCFNumberIntType, (char *)&valuePtr + 4);
      }
      if (a3 != 1)
      {
        if ((valuePtr & 0x200000000000) == 0)
        {
          if (Count >= 1)
          {
            CFIndex v24 = 0;
            int v25 = 0;
            do
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3736), v24);
              if (ValueAtIndex)
              {
                uint64_t v27 = (uint64_t)ValueAtIndex;
                CFStringRef v28 = sub_10001A43C(ValueAtIndex);
                CFNumberRef v29 = (const __CFNumber *)sub_10001E404(v27, @"CHANNEL_FLAGS");
                if (v29)
                {
                  CFNumberGetValue(v29, kCFNumberIntType, &valuePtr);
                  if (CFEqual(v9, a2))
                  {
                    if ((valuePtr & 0x2000) != 0)
                    {
                      if (CFEqual(v9, v28))
                      {
                        if (qword_10027DD68) {
                          [((id)qword_10027DD68) WFLog:3, @"%s: same ssid is found with 6E enabled, do same ssid roaming", @"WiFiDeviceManagerNetworkTransitionAction"];
                        }
                        goto LABEL_60;
                      }
                      if ((valuePtr & 0x2000) != 0 && !CFEqual(v9, v28)) {
                        int v25 = 1;
                      }
                    }
                  }
                  else if ((valuePtr & 0x2000) != 0 && CFEqual(a2, v28))
                  {
                    int v25 = 1;
                  }
                }
              }
              ++v24;
            }
            while (Count != v24);
            if (!v25) {
              goto LABEL_57;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:3, "%s: different ssid is found with 6E enabled, do ssid transition", "WiFiDeviceManagerNetworkTransitionAction"];
            }
            goto LABEL_48;
          }
LABEL_57:
          if (CFEqual(v9, a2))
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no matching network in colocated cache with 6E enabled, do same ssid roaming", "WiFiDeviceManagerNetworkTransitionAction")];
            }
            goto LABEL_60;
          }
        }
LABEL_56:
        uint64_t v12 = 0;
        goto LABEL_61;
      }
      if (CFEqual(v9, a2))
      {
        if ((valuePtr & 0x200000000000) != 0 && Count >= 1)
        {
          CFIndex v16 = 0;
          int v17 = 0;
          do
          {
            int v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3736), v16);
            if (v18)
            {
              CFNumberRef v19 = v18;
              if (CFEqual(v9, a2))
              {
                CFNumberRef v20 = (const __CFNumber *)sub_10001E404((uint64_t)v19, @"CHANNEL_FLAGS");
                if (v20)
                {
                  CFNumberGetValue(v20, kCFNumberIntType, &valuePtr);
                  CFBooleanRef v21 = sub_10001A43C(v19);
                  __int16 v22 = valuePtr;
                  if ((valuePtr & 0x2000) == 0)
                  {
                    if (CFEqual(v9, v21))
                    {
                      if (qword_10027DD68) {
                        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: same ssid is found with 6E disabled, do same ssid roaming", "WiFiDeviceManagerNetworkTransitionAction");
                      }
                      goto LABEL_60;
                    }
                    __int16 v22 = valuePtr;
                  }
                  if ((v22 & 0x2000) == 0 && !CFEqual(v9, v21)) {
                    int v17 = 1;
                  }
                }
              }
            }
            ++v16;
          }
          while (Count != v16);
          if (!v17) {
            goto LABEL_51;
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3, @"%s: different ssid is found with 6E disabled, do ssid transition", @"WiFiDeviceManagerNetworkTransitionAction"];
          }
LABEL_48:
          uint64_t v12 = 2;
LABEL_61:
          CFRelease(v8);
          return v12;
        }
LABEL_51:
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no matched network in colocated cache with 6E disabled, do same ssid roaming", "WiFiDeviceManagerNetworkTransitionAction");
        }
LABEL_60:
        uint64_t v12 = 1;
        goto LABEL_61;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: current ssid doesn't match requested network ssid with 6E disabled, no action", @"WiFiDeviceManagerNetworkTransitionAction"];
      }
    }
    else
    {
      int v13 = CFEqual(v9, a2);
      if (v13)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, @"%s: SSID transition is not supported, do same ssid roaming", @"WiFiDeviceManagerNetworkTransitionAction"];
        }
        goto LABEL_60;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: SSID transition is not supported, no action", "WiFiDeviceManagerNetworkTransitionAction"];
      }
    }
    goto LABEL_56;
  }
  return 0;
}

void sub_100111BD0(uint64_t a1, const void *a2, const void *a3, unsigned int a4)
{
  int v7 = sub_100111778(a1, a3, a4);
  if (v7 == 1)
  {
    uint64_t v8 = *(void *)(a1 + 64);
    sub_10006DF60(v8, a2, a4);
  }
  else if (v7 == 2)
  {
    sub_100111C74(a1, a4 == 1);
  }
}

void sub_100111C74(uint64_t a1, int a2)
{
  uint64_t valuePtr = 0;
  if (sub_100074914(*(void *)(a1 + 64)))
  {
    if (qword_10027DD68)
    {
      uint64_t v5 = "2.4Gh/5Gh";
      if (!a2) {
        uint64_t v5 = "6Gh";
      }
      [((id)qword_10027DD68) WFLog:3 message:@"[NWTRANSIT]: Initiate Colocated Network Transition. Transitioning to %s Colocated Network", v5];
    }
    uint64_t v6 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    int v7 = sub_10001C1B4(*(void *)(a1 + 64), v6);
    CFNumberRef v8 = (const __CFNumber *)sub_10001E404((uint64_t)v7, @"CHANNEL_FLAGS");
    if (v8) {
      CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
    }
    CFArrayRef v9 = *(const __CFArray **)(a1 + 3736);
    if (v9) {
      CFIndex Count = CFArrayGetCount(v9);
    }
    else {
      CFIndex Count = 0;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "[NWTRANSIT]: Num Colocated Networks %ld", Count)];
    }
    char v12 = valuePtr;
    if (!a2)
    {
      if ((valuePtr & 0x18) != 0 && Count >= 1)
      {
        CFIndex v18 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3736), v18);
          if (ValueAtIndex)
          {
            CFNumberRef v15 = ValueAtIndex;
            CFNumberRef v20 = (const __CFNumber *)sub_10001E404((uint64_t)ValueAtIndex, @"CHANNEL_FLAGS");
            if (v20)
            {
              CFNumberGetValue(v20, kCFNumberIntType, (char *)&valuePtr + 4);
              if ((valuePtr & 0x200000000000) != 0) {
                break;
              }
            }
          }
          if (Count == ++v18)
          {
            char v12 = valuePtr;
            goto LABEL_32;
          }
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]:Associated to 2.4Gh/5Gh. Top 6Gh Colocated Network for Transition = %@", v15 message];
        }
      }
      else
      {
LABEL_32:
        if ((v12 & 8) == 0 || Count < 1) {
          return;
        }
        CFIndex v21 = 0;
        while (1)
        {
          __int16 v22 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3736), v21);
          if (v22)
          {
            CFNumberRef v15 = v22;
            CFNumberRef v23 = (const __CFNumber *)sub_10001E404((uint64_t)v22, @"CHANNEL_FLAGS");
            if (v23)
            {
              CFNumberGetValue(v23, kCFNumberIntType, (char *)&valuePtr + 4);
              if ((valuePtr & 0x1000000000) != 0) {
                break;
              }
            }
          }
          if (Count == ++v21) {
            return;
          }
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]:Associated to 2.4Gh. Top 5Gh Colocated Network for Transition = %@", v15 message];
        }
      }
LABEL_45:
      sub_10012AC18(a1, v15);
      return;
    }
    if ((valuePtr & 0x2000) != 0 && Count >= 1)
    {
      CFIndex v13 = 0;
      while (1)
      {
        uint64_t v14 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3736), v13);
        if (v14)
        {
          CFNumberRef v15 = v14;
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Associated to 6Gh. Top Colocated Network for Transition = %@", v15 message];
          }
          CFNumberRef v17 = (const __CFNumber *)sub_10001E404((uint64_t)v15, @"CHANNEL_FLAGS");
          if (v17)
          {
            CFNumberGetValue(v17, kCFNumberIntType, (char *)&valuePtr + 4);
            if ((valuePtr & 0x1000000000) != 0) {
              break;
            }
          }
        }
        if (Count == ++v13) {
          return;
        }
      }
      goto LABEL_45;
    }
  }
}

void sub_100111F34(uint64_t a1, void *a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) setJoinEvent:0 withReason:0 lastDisconnectReason:*(unsigned int *)(a1 + 48) lastJoinFailure:0 andNetworkDetails:a2 forInterface:*(void *)(a1 + 40)];

    CFStringRef v4 = *(void **)(a1 + 40);
  }
}

void sub_100111F98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 240))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    CFIndex v3 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, void, void, void, void, void))(v2 + 3872))(v2, *(void *)(*(void *)(v4 + 8) + 24), 0, 0, 0, *(void *)(v2 + 3880));
    CFRelease(v3[1]);
    uint64_t v5 = *v3;
  }
  else
  {
    CFRelease((CFTypeRef)v2);
    uint64_t v6 = *(void **)(a1 + 32);
    CFIndex v3 = (CFTypeRef *)(a1 + 32);
    uint64_t v5 = v6;
  }
  int v7 = *(const void **)(v5[1] + 24);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(*((void *)*v3 + 1) + 24) = 0;
  }
}

void *sub_10011201C(void *result, int a2, CFTypeRef cf, int a4, int a5, int a6, int a7)
{
  CFArrayRef v11 = result;
  if (cf)
  {
    CFIndex v13 = (const void *)result[479];
    if (v13)
    {
      CFRelease(v13);
      v11[479] = 0;
    }
    uint64_t result = CFRetain(cf);
    v11[479] = result;
  }
  *((_DWORD *)v11 + 960) = a4;
  *((_DWORD *)v11 + 962) = a6;
  *((_DWORD *)v11 + 961) = a5;
  *((_DWORD *)v11 + 963) = a7;
  return result;
}

void sub_100112090(uint64_t a1)
{
  uint64_t v2 = (const void *)sub_100017C48(*(void *)(a1 + 64));

  sub_1000FEA7C(a1, v2, 1001, "WiFiDeviceManagerDisassociateAll", 20797);
}

void sub_1001120E0(uint64_t *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = (const void **)sub_100018FA8((uint64_t)a1, a2, 1);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: network=%@ reason=%@(%d)", "WiFiDeviceManagerCancelAssociation", v6, sub_10005AB40(a3), a3 message];
  }
  if (a1[921])
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_10011221C;
    v8[3] = &unk_1002415A0;
    v8[4] = a1;
    int v9 = a3;
    sub_10010A88C((uint64_t)a1, v6, (uint64_t)v8);
  }
  sub_10006DCBC(a1[8], a2, 0, a3, "WiFiDeviceManagerCancelAssociation", 20827);
  sub_10003ABA4(a1[15], 0, 1, 0);
  if (v6) {
    CFRelease(v6);
  }
}

void sub_10011221C(uint64_t a1, void *a2)
{
  if (a2)
  {
    [*(id *)(*(void *)(a1 + 32) + 7368) setJoinEvent:0 withReason:0 lastDisconnectReason:*(unsigned int *)(a1 + 40) lastJoinFailure:0 andNetworkDetails:a2 forInterface:sub_100017C48(*(void *)(*(void *)(a1 + 32) + 64))];
  }
}

uint64_t sub_100112294(const __CFDictionary *a1)
{
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, @"SCAN_CHANNELS");
  if (result)
  {
    CFArrayRef v2 = (const __CFArray *)result;
    uint64_t result = CFArrayGetCount((CFArrayRef)result);
    if (result)
    {
      uint64_t v3 = result;
      if (result < 1)
      {
        return 1;
      }
      else
      {
        CFIndex v4 = 0;
        unsigned int valuePtr = -1431655766;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v2, v4);
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CHANNEL");
          CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr <= 0x23) {
            break;
          }
          if (v3 == ++v4) {
            return 1;
          }
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: 2GHz Scan request because channel %d is requested ", "WiFiDeviceManagerIs5GScanRequest", valuePtr);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100112380(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 404);
  if (a2) {
    *(_DWORD *)(result + 404) = --v2;
  }
  if (!v2) {
    *(void *)(result + 408) = 0;
  }
  return result;
}

uint64_t sub_1001123A0(unsigned char *a1, const void *a2, int a3)
{
  BOOL v5 = sub_100112534((uint64_t)a1, a2);
  if (sub_10011259C((uint64_t)a1))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Will not queue NDD request - sensitive action on", "WiFiDeviceManagerIsNDDAllowed", v12, v13)];
    }
LABEL_16:
    return 0;
  }
  if (sub_100112644((uint64_t)a1)
    && (!sub_1001116C8((uint64_t)a1) ? (BOOL v7 = v5) : (BOOL v7 = 0), !v7)
    || (!a1[3414] ? (char v8 = 1) : (char v8 = v5), (v8 & 1) == 0 && a3))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Will not queue NDD request - hosting AWDL session", "WiFiDeviceManagerIsNDDAllowed", v12, v13)];
    }
    goto LABEL_16;
  }
  char v10 = !sub_100112724((uint64_t)a1) || v5;
  if ((v10 & 1) == 0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Will not queue NDD request - MIS discovery state %d MIS Scan Blocked = %d", "WiFiDeviceManagerIsNDDAllowed", a1[5221], a1[5328]];
    }
    goto LABEL_16;
  }
  if (sub_100112784((CFIndex)a1)) {
    char v11 = v5;
  }
  else {
    char v11 = 1;
  }
  if ((v11 & 1) == 0)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Will not queue NDD request - autojoin is busy", "WiFiDeviceManagerIsNDDAllowed", v12, v13);
    }
    goto LABEL_16;
  }
  return 1;
}

BOOL sub_100112534(uint64_t a1, const void *a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    CFArrayRef v5 = *(const __CFArray **)(a1 + 4936);
    if (v5)
    {
      v6.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 4936));
      v6.location = 0;
      return CFArrayContainsValue(v5, v6, a2) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10011259C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 5504))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: WiFiDeviceManager Link setup - critical phase is ON", "WiFiDeviceManagerIsSensitiveActivityOnGoing"];
    }
  }
  else
  {
    uint64_t result = sub_10010883C(a1);
    if (!result) {
      return result;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFiDeviceManager - in autojoin deferral period", "WiFiDeviceManagerIsSensitiveActivityOnGoing")];
    }
  }
  return 1;
}

uint64_t sub_100112644(uint64_t a1)
{
  if (a1)
  {
    if (!*(_DWORD *)(a1 + 5424)) {
      return 0;
    }
    uint64_t v1 = *(void *)(a1 + 64);
    int v2 = (const void *)sub_10005FC0C(v1);
    if (!sub_10006F1D0(v1, v2, 0)) {
      return 0;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: wifid has started AWDL and it is enabled", "WiFiDeviceManagerIsAwdlStartedAndEnabled")];
    }
    uint64_t v4 = 1;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager.", @"WiFiDeviceManagerIsAwdlStartedAndEnabled"];
    }
    uint64_t v4 = 0;
  }
  return v4;
}

uint64_t sub_10011271C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 3414);
}

BOOL sub_100112724(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 5221);
  if (*(unsigned char *)(a1 + 5328))
  {
    if (CFAbsoluteTimeGetCurrent() >= *(double *)(a1 + 5336))
    {
      v1[107] = 0;
    }
    else if (v1[107])
    {
      return 1;
    }
  }
  return *v1 != 0;
}

CFIndex sub_100112784(CFIndex result)
{
  if (!result) {
    return result;
  }
  CFIndex v1 = result;
  uint64_t result = CFArrayGetCount(*(CFArrayRef *)(result + 3528));
  if (!result) {
    return result;
  }
  if (_os_feature_enabled_impl())
  {
    if ((CWFIsAutoJoinRetryTrigger() & 1) == 0 && *(void *)(v1 + 8872))
    {
      int v2 = *(_DWORD *)(v1 + 3280);
      return v2 != 14 && v2 != 17;
    }
    return 0;
  }
  if ((*(_DWORD *)(v1 + 3280) - 5) > 7) {
    return 0;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: autojoin is busy %@", "__WiFiDeviceManagerIsAutoJoinBusy", sub_100024BE8(*(_DWORD *)(v1 + 3280)) message];
  }
  return 1;
}

uint64_t sub_10011286C(uint64_t a1, const void *a2, const __CFDictionary *a3, const __CFString *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (unsigned char *)(a1 + 5496);
  int v56 = 0;
  BOOL v13 = sub_100112534(a1, a4);
  int valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"SCAN_TYPE");
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    if (valuePtr == 3) {
      goto LABEL_3;
    }
  }
  if (sub_10011259C(a1))
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: Will not queue scan request - sensitive action on", "WiFiDeviceManagerScanAsync"];
    }
LABEL_7:
    CFNumberRef v17 = v16;
LABEL_8:
    return 16;
  }
  if (sub_100112644(a1) && (!sub_1001116C8(a1) ? (BOOL v19 = v13) : (BOOL v19 = 0), !v19)
    || (!*(unsigned char *)(a1 + 3414) ? (char v20 = 1) : (char v20 = v13), (v20 & 1) == 0 && sub_100112294(a3)))
  {
    int v21 = v12[1545];
    if (v21)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: Will try to queue scan request on LPSC only", @"WiFiDeviceManagerScanAsync"];
      }
      int v15 = 1;
LABEL_24:
      CFNumberRef v23 = malloc_type_malloc(0x28uLL, 0x10E0040573E0799uLL);
      if (v23)
      {
        uint64_t v24 = (uint64_t)v23;
        *CFNumberRef v23 = a1;
        v23[1] = a5;
        v23[2] = CFDictionaryGetValue(a3, @"ScanReqClientName");
        *(void *)(v24 + 24) = a6;
        if (CFDictionaryContainsKey(a3, @"SSID_STR")) {
          BOOL v25 = 1;
        }
        else {
          BOOL v25 = CFDictionaryContainsKey(a3, @"SCAN_SSID_LIST") != 0;
        }
        *(unsigned char *)(v24 + 32) = v25;
        if (v12[1545] && sub_10011318C(a1, a4, a3, v15))
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Setting scan throttle to true and isLPSCSupported=%d", "WiFiDeviceManagerScanAsync", v12[1545])
          }
          CFDictionarySetValue(a3, @"SCAN_IS_THROTTLED", kCFBooleanTrue);
        }
        if (*v12)
        {
          CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(a3, @"SCAN_DWELL_TIME");
          if (v27)
          {
            int v54 = 0;
            CFNumberGetValue(v27, kCFNumberSInt32Type, &v54);
            if (v54 >= 41)
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:3, "%s: Reducing dwell time from %d to %d", "WiFiDeviceManagerScanAsync", v54, 40];
              }
              int v54 = 40;
              CFNumberRef v29 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v54);
              if (v29)
              {
                CFNumberRef v30 = v29;
                CFDictionaryReplaceValue(a3, @"SCAN_DWELL_TIME", v29);
                CFRelease(v30);
              }
            }
          }
        }
        if (*(void *)(v24 + 16)) {
          BOOL v31 = v13;
        }
        else {
          BOOL v31 = 0;
        }
        if (v31)
        {
          int v54 = 0;
          CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(a3, @"SCAN_LOW_PRIORITY");
          if (v32) {
            CFNumberGetValue(v32, kCFNumberSInt32Type, &v54);
          }
          if (!v54)
          {
            CFDictionarySetValue(a3, @"SCAN_LOW_LATENCY", kCFBooleanTrue);
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: Setting low latency to true for interactive client %@", "WiFiDeviceManagerScanAsync", *(void *)(v24 + 16) message];
            }
            if (CFEqual(*(CFStringRef *)(v24 + 16), @"mobilewifitool")
              && valuePtr == 9)
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: This is normal priority, low latency mobilewifitool client with low power scan type", "WiFiDeviceManagerScanAsync");
              }
            }
          }
        }
        if (*(int *)(a1 + 6208) <= -75)
        {
          CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(a3, @"SCAN_LOW_LATENCY");
          if (v35) {
            CFNumberGetValue(v35, kCFNumberSInt32Type, &v56);
          }
          int v54 = 0;
          CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(a3, @"SCAN_LOW_PRIORITY");
          if (v36)
          {
            CFNumberGetValue(v36, kCFNumberSInt32Type, &v54);
            BOOL v37 = v54 != 0;
          }
          else
          {
            BOOL v37 = 0;
          }
          if (!v56 && !v37)
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "currentRssi(=%d) <= threshold(=%d), lowering scan priority \n", *(unsigned int *)(a1 + 6208), 4294967221);
            }
            CFDictionarySetValue(a3, @"SCAN_LOW_PRIORITY", kCFBooleanTrue);
            CFDictionarySetValue(a3, @"SCAN_PRIO_OVERRIDE", kCFBooleanTrue);
          }
        }
        CFStringRef v45 = *(const __CFString **)(v24 + 16);
        if (v45 && CFEqual(v45, @"Preferences")) {
          CFDictionarySetValue(a3, @"SCAN_INC_BSS_LIST", kCFBooleanTrue);
        }
        long long v46 = *(void (**)(uint64_t, const void *, void, uint64_t, const __CFDictionary *))(a1 + 4392);
        if (v46) {
          v46(a1, a2, *(void *)(a1 + 4400), 4, a3);
        }
        if (*(void *)(a1 + 7368) && (long long v47 = *(const void **)(v24 + 16)) != 0)
        {
          if (CFEqual(v47, @"Preferences"))
          {
            uint64_t v48 = 8;
          }
          else if (CFEqual(*(CFTypeRef *)(v24 + 16), @"SpringBoard"))
          {
            uint64_t v48 = 10;
          }
          else if (CFEqual(*(CFTypeRef *)(v24 + 16), @"WiFiPickerExtens"))
          {
            uint64_t v48 = 9;
          }
          else if (CFEqual(*(CFTypeRef *)(v24 + 16), @"locationd"))
          {
            uint64_t v48 = 16;
          }
          else if (CFEqual(*(CFTypeRef *)(v24 + 16), @"pipelined"))
          {
            uint64_t v48 = 17;
          }
          else if (CFEqual(*(CFTypeRef *)(v24 + 16), @"homed"))
          {
            uint64_t v48 = 12;
          }
          else if (CFEqual(*(CFTypeRef *)(v24 + 16), @"configd"))
          {
            uint64_t v48 = 13;
          }
          else if (CFEqual(*(CFTypeRef *)(v24 + 16), @"milod"))
          {
            uint64_t v48 = 26;
          }
          else
          {
            uint64_t v48 = 14;
          }
        }
        else
        {
          uint64_t v48 = 14;
        }
        uint64_t v49 = sub_100113508(a1, a2, a3, 0, (uint64_t)sub_1001135C8, v24, 0, v48);
        goto LABEL_94;
      }
      uint64_t v53 = (void *)qword_10027DD68;
      if (!qword_10027DD68)
      {
LABEL_121:
        return 12;
      }
LABEL_120:
      [v53 WFLog:4 message:@"%s: null scanData"];
      goto LABEL_121;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Will not queue scan request - hosting AWDL session and isLPSCSupported=%d", "WiFiDeviceManagerScanAsync", v12[1545]];
    }
    CFNumberRef v17 = v22;
    goto LABEL_8;
  }
  char v38 = !sub_100112724(a1) || v13;
  if ((v38 & 1) == 0)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Will not queue scan request - MIS discovery state %d MIS Scan Blocked = %d", "WiFiDeviceManagerScanAsync", *(unsigned __int8 *)(a1 + 5221), *(unsigned __int8 *)(a1 + 5328));
    }
    CFNumberRef v17 = v51;
    goto LABEL_8;
  }
  if (sub_100112784(a1)) {
    char v39 = v13;
  }
  else {
    char v39 = 1;
  }
  if ((v39 & 1) == 0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Will not queue scan request - autojoin is busy", "WiFiDeviceManagerScanAsync"];
    }
    goto LABEL_7;
  }
  if (v12[1545] || !sub_10011318C(a1, a4, a3, 0))
  {
LABEL_3:
    int v15 = 0;
    goto LABEL_24;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: Will not queue scan request - too frequent location scans and isLPSCSupported=%d", "WiFiDeviceManagerScanAsync", v12[1545]];
  }
  if (!*(unsigned char *)(a1 + 433)) {
    return 16;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Location Scan request rejected due to EBUSY, queueing for scan cache", "WiFiDeviceManagerScanAsync")];
  }
  char v42 = malloc_type_malloc(0x28uLL, 0x10E0040573E0799uLL);
  if (!v42)
  {
    uint64_t v53 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_121;
    }
    goto LABEL_120;
  }
  uint64_t v24 = (uint64_t)v42;
  void *v42 = a1;
  v42[1] = a5;
  v42[2] = CFDictionaryGetValue(a3, @"ScanReqClientName");
  *(void *)(v24 + 24) = a6;
  if (CFDictionaryContainsKey(a3, @"SSID_STR")) {
    BOOL v43 = 1;
  }
  else {
    BOOL v43 = CFDictionaryContainsKey(a3, @"SCAN_SSID_LIST") != 0;
  }
  *(unsigned char *)(v24 + 32) = v43;
  CFDictionarySetValue(a3, @"BeaconCacheOnly", kCFBooleanTrue);
  uint64_t v49 = sub_10006C684(*(void *)(a1 + 64), a2, a3, 0, (uint64_t)sub_1001135C8, v24);
LABEL_94:
  uint64_t v18 = v49;
  if (v49) {
    free((void *)v24);
  }
  return v18;
}

uint64_t sub_10011318C(uint64_t a1, CFStringRef theString1, const __CFDictionary *a3, int a4)
{
  int valuePtr = 0;
  if (CFEqual(theString1, @"locationd")
    || CFEqual(theString1, @"loctool")
    || CFEqual(theString1, @"milod"))
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"SCAN_LOW_LATENCY");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Low-latency scan request: shouldBlockScans=%d, no throttling\n", 0);
        }
        return 0;
      }
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "startCheck: shouldBlockScans=%d numAdmitted %d admittedTS=%f connected=%d\n", 0, *(unsigned int *)(a1 + 404), *(void *)(a1 + 408), *(unsigned __int8 *)(a1 + 3411));
    }
    if (!*(unsigned char *)(a1 + 3411)) {
      return 0;
    }
    if (a4)
    {
      CFDictionarySetValue(a3, @"SCAN_ONLY_USE_LOW_POWER_CORE", kCFBooleanTrue);
      CFDictionarySetValue(a3, @"SCAN_IS_THROTTLED", kCFBooleanTrue);
    }
    double Current = CFAbsoluteTimeGetCurrent();
    double v12 = *(double *)(a1 + 408);
    CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(a3, @"SCAN_CHANNELS");
    CFIndex Count = CFArrayGetCount(v13);
    int v15 = (unsigned char *)(a1 + 5497);
    if (*(unsigned char *)(a1 + 5497) == 1 && (CFIndex v16 = Count, Count >= 4))
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "User scan request blocked due to high number of channels (%ld) during FT call", v16);
      }
      uint64_t v18 = 1;
    }
    else
    {
      double v19 = Current - v12;
      if (*(unsigned char *)(a1 + 433) == 1)
      {
        if (*(unsigned char *)(a1 + 416) == 2) {
          uint64_t v20 = 1;
        }
        else {
          uint64_t v20 = 2;
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s CATSPolicy=%d , numAllowedScanPolicy=%d ", "WiFiDeviceManagerIsFrequentLocationScan", *(unsigned __int8 *)(a1 + 416), v20);
        }
      }
      else
      {
        LODWORD(v20) = 2;
      }
      if (v19 > 6.0)
      {
        *(CFAbsoluteTime *)(a1 + 408) = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)(a1 + 404) = 1;
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Resetting, shouldBlockScans=%d numAdmitted %d delta=%f admittedTS=%f \n", 0, *(unsigned int *)(a1 + 404), *(void *)&v19, *(void *)(a1 + 408));
        }
      }
      if (v19 >= 6.0)
      {
        uint64_t v18 = 0;
LABEL_45:
        *(unsigned char *)(a1 + 400) = v18;
        return v18;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "TOO CLOSE: shouldBlockScans=%d delta %f admitted=%d\n", 0, *(void *)&v19, *(unsigned int *)(a1 + 404));
      }
      unsigned int v24 = *(_DWORD *)(a1 + 404);
      if (v24 >= v20 || *v15)
      {
        uint64_t v18 = 1;
      }
      else
      {
        uint64_t v18 = 0;
        *(_DWORD *)(a1 + 404) = v24 + 1;
      }
      if (qword_10027DD68)
      {
        BOOL v25 = "TRUE";
        if (!*v15) {
          BOOL v25 = "FALSE";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "TOO CLOSE, shouldBlockScans=%d delta %f numAdmitted=%d, facetime=%s\n", v18, *(void *)&v19, *(unsigned int *)(a1 + 404), v25);
      }
    }
    goto LABEL_45;
  }
  return 0;
}

uint64_t sub_100113508(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v11 = sub_10006C68C(*(void *)(a1 + 64), a2, a3, a4, a5, a6, a7);
  if (v11)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"Error initiating scan request: %d", v11];
    }
  }
  else
  {
    double v12 = *(void **)(a1 + 7368);
    if (v12) {
      [v12 setScanningState:1 client:a8 neighborBSS:0 otherBSS:0 withChannelInfoList:0 withRequest:a3 forInterface:sub_100017C48(*(void *)(a1 + 64))];
    }
  }
  return v11;
}

void sub_1001135C8(uint64_t a1, uint64_t a2, const __CFArray *a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (void *)os_transaction_create();
  if (a6)
  {
    uint64_t v12 = *(void *)a6;
    CFStringRef v13 = *(const __CFString **)(a6 + 16);
    if (v13)
    {
      BOOL v14 = CFEqual(v13, @"Preferences")
         || CFEqual(*(CFStringRef *)(a6 + 16), @"SpringBoard")
         || CFEqual(*(CFStringRef *)(a6 + 16), @"WiFiPickerExtens");
      BOOL v15 = CFEqual(*(CFStringRef *)(a6 + 16), @"aonsensed");
      uint64_t v16 = *(void *)(a6 + 16);
      if (a4)
      {
LABEL_9:
        if (!CFDictionaryGetValue(a4, @"CompletedUsingBeaconCache")) {
          goto LABEL_17;
        }
LABEL_13:
        if (a3 && CFArrayGetCount(a3)) {
          ++*(unsigned char *)(v12 + 417);
        }
        else {
          ++*(unsigned char *)(v12 + 418);
        }
LABEL_17:
        if (a3 && !v15) {
          [*(id *)(v12 + 6680) ingestScanResults:a3 ofType:2 clientName:v16 directed:*(unsigned char *)(a6 + 32) != 0];
        }
        CFNumberRef v17 = 0;
        uint64_t v18 = 0;
        if (v14 && v12)
        {
          if (*(unsigned char *)(v12 + 6712))
          {
            id v19 = sub_1001390A0(v12);
            CFNumberRef v17 = [[WiFiScanResultsPreparer alloc] initWithManager:v12 availabilityEngine:*(void *)(v12 + 6672) scanResults:a3 disableProminentFiltering:0 blacklistedSSIDs:v19];
            uint64_t v18 = [(WiFiScanResultsPreparer *)v17 preparedScanResults];
            if (v19) {
              CFRelease(v19);
            }
          }
          else
          {
            CFNumberRef v17 = 0;
            uint64_t v18 = 0;
          }
        }
        CFStringRef v20 = *(const __CFString **)(a6 + 16);
        BOOL v21 = !v20
           || CFStringCompare(v20, @"Preferences", 0)
           && CFStringCompare(*(CFStringRef *)(a6 + 16), @"WiFiPickerExtens", 0)
           && CFStringCompare(*(CFStringRef *)(a6 + 16), @"NanoSettings", 0)
           && CFStringCompare(*(CFStringRef *)(a6 + 16), @"NanoWiFiViewService", 0)
           && CFStringCompare(*(CFStringRef *)(a6 + 16), @"WiFiViewService", 0)
           && CFStringCompare(*(CFStringRef *)(a6 + 16), @"mobilewifitool", 0)
           && CFStringCompare(*(CFStringRef *)(a6 + 16), @"coreautomationd", 0)
           && CFStringCompare(*(CFStringRef *)(a6 + 16), @"SpringBoard", 0);
        if (a5 == -536870165 && *(_DWORD *)(v12 + 5520) == 1)
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: converting error to EBUSY", "WiFiDeviceManagerClientScanCallback")];
          }
          *(unsigned char *)(v12 + 728) = 1;
          a5 = 16;
        }
        CFNumberRef v23 = *(void (**)(uint64_t, uint64_t, const __CFArray *, uint64_t, void))(a6 + 8);
        if (!v23) {
          goto LABEL_104;
        }
        if (v18) {
          CFArrayRef v24 = (const __CFArray *)v18;
        }
        else {
          CFArrayRef v24 = a3;
        }
        if (v21)
        {
          v23(v12, a2, v24, a5, *(void *)(a6 + 24));
LABEL_104:
          uint64_t v55 = *(void (**)(uint64_t, uint64_t, void, uint64_t, void))(v12 + 4392);
          if (v55) {
            v55(v12, a2, *(void *)(v12 + 4400), 5, 0);
          }
          free((void *)a6);
          goto LABEL_107;
        }
        unsigned int v60 = a5;
        if (v24)
        {
          MutableCFStringRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v24);
          if (MutableCopy)
          {
            CFDictionaryRef v57 = v11;
            id v58 = v10;
            uint64_t v65 = 0;
            CFIndex v66 = -1;
            uint64_t v26 = *(void (**)(uint64_t, void, const __CFString *, const CFBooleanRef, void))(v12 + 4744);
            if (v26) {
              v26(v12, 0, @"PrivateMacCheckForMDMOrSupervised", kCFBooleanTrue, *(void *)(v12 + 4752));
            }
            CFIndex Count = CFArrayGetCount(MutableCopy);
            if (Count >= 1)
            {
              CFIndex v28 = Count;
              CFIndex v29 = 0;
              CFBooleanRef v63 = 0;
              CFBooleanRef v62 = 0;
              CFNumberRef v30 = 0;
              BOOL v31 = 0;
              char v59 = v17;
              CFIndex v61 = Count;
              while (1)
              {
                CFDictionaryRef ValueAtIndex = (const void **)CFArrayGetValueAtIndex(MutableCopy, v29);
                if (ValueAtIndex) {
                  break;
                }
LABEL_97:
                if (v28 == ++v29) {
                  goto LABEL_100;
                }
              }
              CFStringRef v33 = ValueAtIndex;
              sub_1000D1FFC((uint64_t)ValueAtIndex);
              sub_10001A734(*(const __CFArray **)(v12 + 3704), v33, &v66, &v65);
              if (v66 != -1)
              {
                CFStringRef v34 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 3704), v66);
                if (v34)
                {
                  uint64_t v35 = (uint64_t)v34;
                  BOOL v31 = sub_10001E404((uint64_t)v34, @"PRIVATE_MAC_ADDRESS");
                  sub_10001E404(v35, @"MacAddressRandomisationTagMigratedNetwork");
                  CFBooleanRef v62 = (const __CFBoolean *)sub_10001E404(v35, @"PrivateMacDefaultToOFF");
                  CFNumberRef v30 = sub_10001E404(v35, @"PrivateMacFutureMacAddress");
                  CFBooleanRef v63 = (CFBooleanRef)sub_10001E404(v35, @"PrivateMacControlledDevice");
                }
                if (!v31) {
                  goto LABEL_97;
                }
                CFTypeID TypeID = CFDictionaryGetTypeID();
                if (TypeID != CFGetTypeID(v31)) {
                  goto LABEL_97;
                }
                BOOL v37 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, (CFDictionaryRef)v31);
                if (v30)
                {
                  CFTypeID v38 = CFDataGetTypeID();
                  if (v38 == CFGetTypeID(v30)) {
                    CFDictionarySetValue(v37, @"PRIVATE_MAC_ADDRESS_VALUE", v30);
                  }
                }
                char v39 = v30;
                if (!*(unsigned char *)(v12 + 3688))
                {
                  CFNumberRef v40 = sub_10005B0B8(1);
                  CFDictionarySetValue(v37, @"PRIVATE_MAC_ADDRESS_TYPE", v40);
                  CFDictionarySetValue(v37, @"PRIVATE_MAC_ADDRESS_VALUE", *(const void **)(v12 + 3712));
                  if (v40) {
                    CFRelease(v40);
                  }
                }
                sub_10001C6A4((uint64_t)v33, @"PRIVATE_MAC_ADDRESS", v37);
                if (v62 && v62 == kCFBooleanTrue)
                {
                  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                  CFDictionarySetValue(Mutable, @"PrivateMacDefaultToOFF", kCFBooleanTrue);
                  if (!v63)
                  {
LABEL_82:
                    sub_10001C6A4((uint64_t)v33, @"PrivateMacInfoDictionary", Mutable);
                    if (Mutable) {
                      CFRelease(Mutable);
                    }
                    goto LABEL_95;
                  }
LABEL_81:
                  CFDictionarySetValue(Mutable, @"PrivateMacControlledDevice", v63);
                  goto LABEL_82;
                }
                if (v63 && v63 == kCFBooleanTrue)
                {
                  CFStringRef v45 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                  CFMutableDictionaryRef Mutable = v45;
                  if (v62) {
                    CFDictionarySetValue(v45, @"PrivateMacDefaultToOFF", v62);
                  }
                  goto LABEL_81;
                }
                uint64_t v52 = (uint64_t)v33;
                uint64_t v53 = @"PrivateMacInfoDictionary";
                int v54 = 0;
LABEL_94:
                sub_10001C6A4(v52, v53, v54);
LABEL_95:
                CFNumberRef v30 = v39;
                CFIndex v28 = v61;
                if (v37) {
                  CFRelease(v37);
                }
                goto LABEL_97;
              }
              char v39 = v30;
              int v42 = _os_feature_enabled_impl();
              BOOL v37 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              if (*(unsigned char *)(v12 + 3688))
              {
                if (sub_1000199C0((uint64_t)v33))
                {
                  if ((v42 & 1) == 0)
                  {
                    CFNumberRef v48 = sub_10005B0B8(1);
                    CFDictionarySetValue(v37, @"PRIVATE_MAC_ADDRESS_TYPE", v48);
                    CFNumberRef v51 = *(CFNumberRef *)(v12 + 3712);
                    uint64_t v49 = v37;
                    CFStringRef v50 = @"PRIVATE_MAC_ADDRESS_VALUE";
                    goto LABEL_91;
                  }
                  CFNumberRef v43 = sub_10005B0B8(3);
                  CFDictionarySetValue(v37, @"PRIVATE_MAC_ADDRESS_TYPE", v43);
                  if (v43) {
                    CFRelease(v43);
                  }
LABEL_86:
                  if (sub_1000D20B8((CFDictionaryRef *)v33)) {
                    int v47 = 2;
                  }
                  else {
                    int v47 = 3;
                  }
                  CFNumberRef v48 = sub_10005B0B8(v47);
                  uint64_t v49 = v37;
                  CFStringRef v50 = @"PRIVATE_MAC_ADDRESS_TYPE";
                  CFNumberRef v51 = v48;
LABEL_91:
                  CFDictionarySetValue(v49, v50, v51);
                  if (v48) {
                    CFRelease(v48);
                  }
                  goto LABEL_93;
                }
                CFNumberRef v46 = sub_10005B0B8(2);
                CFDictionarySetValue(v37, @"PRIVATE_MAC_ADDRESS_TYPE", v46);
              }
              else
              {
                CFNumberRef v44 = sub_10005B0B8(1);
                CFDictionarySetValue(v37, @"PRIVATE_MAC_ADDRESS_TYPE", v44);
                CFDictionarySetValue(v37, @"PRIVATE_MAC_ADDRESS_VALUE", *(const void **)(v12 + 3712));
                if (v44) {
                  CFRelease(v44);
                }
              }
              CFNumberRef v17 = v59;
              if (!v42)
              {
LABEL_93:
                uint64_t v52 = (uint64_t)v33;
                uint64_t v53 = @"PRIVATE_MAC_ADDRESS";
                int v54 = v37;
                goto LABEL_94;
              }
              goto LABEL_86;
            }
LABEL_100:
            uint64_t v11 = v57;
            char v10 = v58;
          }
        }
        else
        {
          MutableCFStringRef Copy = 0;
        }
        (*(void (**)(uint64_t, uint64_t, const __CFArray *, void, void))(a6 + 8))(v12, a2, MutableCopy, v60, *(void *)(a6 + 24));
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        goto LABEL_104;
      }
    }
    else
    {
      BOOL v14 = 0;
      BOOL v15 = 0;
      uint64_t v16 = 0;
      if (a4) {
        goto LABEL_9;
      }
    }
    if (!kCFBooleanFalse) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: null scanData" args:("WiFiDeviceManagerClientScanCallback")];
  }
  CFNumberRef v17 = 0;
LABEL_107:

  if (v11) {
}
  }

uint64_t sub_100113E58(uint64_t a1, __CFArray *a2)
{
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = (const void *)sub_100017C48(v3);

  return sub_10000DE34(v3, v4, a2);
}

uint64_t sub_100113EA0(uint64_t a1, const void *a2, void *a3, const void *a4, const __CFString *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: failed to join %@, null manager", "WiFiDeviceManagerAssociateAsync", sub_10001A43C(a3) message];
    }
    return 4294963396;
  }
  BOOL v156 = a8 != 1018;
  sub_100115C5C(a3);
  dword_10027DDAC = 0;
  uint64_t v157 = a8;
  CFTypeRef cf = a2;
  CFStringRef v151 = a5;
  CFRange v152 = a4;
  uint64_t v154 = a6;
  uint64_t v155 = a7;
  switch((int)a8)
  {
    case 1008:
      dword_10027DDAC = 0x80000;
      int v16 = 1;
      if (CFStringCompare(a5, @"Preferences", 1uLL))
      {
        if (CFStringCompare(a5, @"homed", 1uLL))
        {
          int v17 = 1;
          if (CFStringCompare(a5, @"SpringBoard", 1uLL))
          {
            int v18 = 1;
            if (CFStringCompare(a5, @"WiFiPickerExtens", 1uLL))
            {
              if (CFStringCompare(a5, @"HPSetup", 1uLL) && CFStringCompare(a5, @"Setup", 1uLL))
              {
                CFComparisonResult v19 = CFStringCompare(a5, @"sharingd", 1uLL);
                int v16 = 0;
                int v17 = 0;
                int v18 = 0;
                uint64_t v20 = 8;
                if (v19 == kCFCompareEqualTo) {
                  uint64_t v20 = 14;
                }
              }
              else
              {
                int v16 = 0;
                int v17 = 0;
                int v18 = 0;
                uint64_t v20 = 13;
              }
            }
            else
            {
              int v16 = 0;
              int v17 = 0;
              uint64_t v20 = 3;
            }
          }
          else
          {
            int v16 = 0;
            int v18 = 0;
            uint64_t v20 = 7;
          }
        }
        else
        {
          int v16 = 0;
          int v17 = 0;
          int v18 = 0;
          uint64_t v20 = 6;
        }
      }
      else
      {
        int v17 = 0;
        int v18 = 0;
        uint64_t v20 = 2;
      }
      goto LABEL_26;
    case 1011:
      int v16 = 0;
      int v17 = 0;
      int v18 = 0;
      dword_10027DDAC = 0x40000;
      uint64_t v20 = 5;
      goto LABEL_26;
    case 1013:
      int v16 = 0;
      int v17 = 0;
      int v18 = 0;
      dword_10027DDAC = 0x20000;
      uint64_t v20 = 9;
      goto LABEL_26;
    case 1016:
      int v16 = 0;
      int v17 = 0;
      int v18 = 0;
      dword_10027DDAC = 0x800000;
      uint64_t v20 = 4;
      goto LABEL_26;
    default:
      if (a8 == 1018)
      {
        int v16 = 0;
        int v17 = 0;
        int v18 = 0;
        dword_10027DDAC = 0x400000;
        uint64_t v20 = 10;
LABEL_26:
        uint64_t v150 = v20;
      }
      else
      {
        int v16 = 0;
        int v17 = 0;
        int v18 = 0;
        uint64_t v150 = 0;
        dword_10027DDAC = 0x100000;
      }
      if (!a3) {
        goto LABEL_47;
      }
      CFArrayRef v23 = *(const __CFArray **)(a1 + 5584);
      if (!v23) {
        goto LABEL_47;
      }
      CFIndex Count = CFArrayGetCount(v23);
      if (!Count) {
        goto LABEL_47;
      }
      uint64_t v25 = Count;
      CFStringRef v26 = (const __CFString *)sub_10001E404((uint64_t)a3, @"PolicyUUID");
      if (v25 < 1) {
        goto LABEL_40;
      }
      CFStringRef v27 = v26;
      CFIndex v28 = 0;
      int v29 = 1;
      break;
  }
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5584), v28);
    if (!ValueAtIndex) {
      goto LABEL_38;
    }
    uint64_t v31 = (uint64_t)ValueAtIndex;
    if (sub_100032E54((uint64_t)ValueAtIndex) != 1) {
      goto LABEL_38;
    }
    if (!v27) {
      break;
    }
    CFStringRef v32 = (const __CFString *)sub_100032DDC(v31);
    if (CFEqual(v27, v32) && !sub_1000CE714((uint64_t)a3))
    {
LABEL_40:
      int v29 = 1;
      goto LABEL_42;
    }
    int v29 = 0;
LABEL_38:
    if (v25 == ++v28) {
      goto LABEL_42;
    }
  }
  int v29 = 0;
LABEL_42:
  CFStringRef v34 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    uint64_t v35 = sub_10001A43C(a3);
    CFNumberRef v36 = "";
    if (!v29) {
      CFNumberRef v36 = "NOT ";
    }
    [v34 WFLog:3, "%s: network %@ is %scompliant with the active policies!", "__WiFiDeviceManagerIsNetworkPolicyCompliant", v35, v36 message];
  }
  if (!v29)
  {
    if (*(void *)(a1 + 240))
    {
      CFRetain(cf);
      CFRetain((CFTypeRef)a1);
      int v47 = *(NSObject **)(a1 + 240);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100115F38;
      block[3] = &unk_1002415C0;
      void block[4] = a1;
      void block[5] = cf;
      void block[6] = v154;
      void block[7] = v155;
      dispatch_async(v47, block);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue.":@"WiFiDeviceManagerAssociateAsync"];
      }
    }
    return 4294963366;
  }
LABEL_47:
  id v38 = sub_10000AD1C((uint64_t)a3);
  if ([*(id *)(a1 + 6648) isNetworkInDenyListedState:1 scanResult:v38])
  {
    id v39 = [*(id *)(a1 + 6648) reasonsForNetworkInDenyListedState:v38 state:1 timestamps:0 reasonData:0];
    if (v39)
    {
      CFNumberRef v40 = v39;
      if ([v39 count])
      {
        unsigned int v41 = [[v40 objectAtIndex:0] unsignedIntegerValue];
        dword_10027DDAC |= v41;
        ++*(_WORD *)(a1 + 6024);
        uint64_t v42 = v150;
        if (v16 | v17 | v18) {
          uint64_t v42 = 11;
        }
        uint64_t v150 = v42;
      }
    }
  }

  CFNumberRef v43 = sub_100018FA8(a1, cf, 1);
  CFStringRef v45 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    if (v43) {
      CFNumberRef v46 = sub_10001A43C(v43);
    }
    else {
      CFNumberRef v46 = 0;
    }
    CFNumberRef v48 = sub_10001A43C(a3);
    [v45 WFLog:3, "%s: current %@, assoc %@, reason %@(%d)", "WiFiDeviceManagerAssociateAsync", v46, v48, sub_10005AB40(v157), v157 message];
  }
  uint64_t v49 = (unsigned char *)(a1 + 5217);
  if (*(_DWORD *)(a1 + 3280) != 14)
  {
    char v50 = _os_feature_enabled_impl();
    if (v157 != 1018 || (v50 & 1) == 0) {
      sub_100102284(a1);
    }
  }
  if (!*(unsigned char *)(a1 + 3465) || !v43)
  {
    if (v43) {
      goto LABEL_72;
    }
    BOOL v58 = 0;
    BOOL v59 = v157 == 1008;
    goto LABEL_96;
  }
  CFNumberRef v51 = sub_10001A43C(v43);
  uint64_t v52 = sub_10001A43C(a3);
  if (CFEqual(v51, v52))
  {
    CFBooleanRef v53 = (const __CFBoolean *)sub_10001E404((uint64_t)a3, @"JOINING_FROM_UI");
    if (v157 == 1008 || v53 == kCFBooleanTrue)
    {
      *(void *)&long long v163 = 0;
      *((void *)&v163 + 1) = &v163;
      *(void *)&long long v164 = 0x2020000000;
      *((void *)&v164 + 1) = 0xAAAAAAAAAAAAAAAALL;
      if (cf) {
        CFTypeRef v54 = CFRetain(cf);
      }
      else {
        CFTypeRef v54 = 0;
      }
      *((void *)&v164 + 1) = v54;
      uint64_t v178 = 0;
      unsigned int v179 = &v178;
      uint64_t v180 = 0x2020000000;
      char v181 = (void *)0xAAAAAAAAAAAAAAAALL;
      char v181 = (void *)CFRetain(v43);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: user preferred cellular-outranked WiFi: %@", "WiFiDeviceManagerAssociateAsync", sub_10001A43C(a3) message];
      }
      [*(id *)(a1 + 7368) addFaultEvent:20 forInterface:cf];
      sub_100074198(*(void *)(a1 + 64), *(void *)(*((void *)&v163 + 1) + 24), 1);
      if (*(void *)(a1 + 240))
      {
        CFRetain((CFTypeRef)a1);
        if (cf) {
          CFRetain(cf);
        }
        unsigned int v96 = *(NSObject **)(a1 + 240);
        v177[0] = _NSConcreteStackBlock;
        v177[1] = 3221225472;
        v177[2] = sub_100115FA8;
        v177[3] = &unk_1002415E8;
        v177[4] = &v178;
        v177[5] = &v163;
        v177[6] = a1;
        v177[7] = v154;
        v177[8] = v155;
        dispatch_async(v96, v177);
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." arguments:qword_10027DD68, @"WiFiDeviceManagerAssociateAsync"];
        }
      }
      uint64_t v98 = v179[3];
      if (v98 && *(void *)(*((void *)&v163 + 1) + 24) && *(void *)(a1 + 4104))
      {
        sub_10001C6A4(v98, @"WiFiNetworkIsAutoJoined", kCFBooleanFalse);
        sub_1000C995C((const void *)v179[3], 1, +[NSDate date]);
        if (*(void *)(a1 + 240))
        {
          CFRetain((CFTypeRef)a1);
          CFRetain((CFTypeRef)v179[3]);
          CFArrayRef v99 = *(const void **)(*((void *)&v163 + 1) + 24);
          if (v99) {
            CFRetain(v99);
          }
          CFArrayRef v100 = *(NSObject **)(a1 + 240);
          v176[0] = _NSConcreteStackBlock;
          v176[1] = 3221225472;
          v176[2] = sub_100116040;
          v176[3] = &unk_100241610;
          v176[6] = a1;
          v176[4] = &v178;
          v176[5] = &v163;
          dispatch_async(v100, v176);
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." arguments:((id)qword_10027DD68, "WiFiDeviceManagerAssociateAsync")];
          }
        }
      }
      uint64_t v132 = (const void *)v179[3];
      if (v132) {
        CFRelease(v132);
      }
      unsigned __int8 v133 = *(const void **)(*((void *)&v163 + 1) + 24);
      if (v133) {
        CFRelease(v133);
      }
      _Block_object_dispose(&v178, 8);
      _Block_object_dispose(&v163, 8);
      return 0;
    }
  }
LABEL_72:
  uint64_t v55 = sub_10001A43C(v43);
  int v56 = sub_10001A43C(a3);
  if (!CFEqual(v55, v56) || !sub_10001FC1C((uint64_t)a3) && !sub_1000199C0((uint64_t)a3))
  {
    BOOL v58 = 0;
    BOOL v59 = v157 == 1008;
    if (v157 == 1008 || v157 == 1011)
    {
      CFIndex v61 = sub_10001A43C(v43);
      CFBooleanRef v62 = sub_10001A43C(a3);
      if (!CFEqual(v61, v62))
      {
        uint64_t v101 = sub_10006B8D0(*(void *)(a1 + 64));
        CFNumberRef v102 = sub_1000C6FC0((uint64_t)a3, @"RSSI");
        int v104 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          id contexta = v103;
          CFRange v147 = sub_10001A43C(a3);
          [v104 WFLog:3, "%s: user switching to %@(%d), leaving %@(%d) ", "WiFiDeviceManagerAssociateAsync", v147, v102, sub_10001A43C(v43), v101 message];
          CFNumberRef v103 = contexta;
        }
        BOOL v58 = (int)v101 > *(_DWORD *)(a1 + 128);
        uint64_t v49 = (unsigned char *)(a1 + 5217);
        if (!a3) {
          goto LABEL_103;
        }
        goto LABEL_97;
      }
      BOOL v58 = 0;
      if (a3)
      {
LABEL_97:
        if (v59 && v49[2] && v49[1] == -*v49)
        {
          LODWORD(v178) = 0;
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: MIS state is enabled. Force-disabling before association type (%d).", "WiFiDeviceManagerAssociateAsync", 1008)];
          }
          uint64_t v174 = 0;
          long long v172 = 0u;
          long long v173 = 0u;
          long long v169 = 0u;
          uint64_t v170 = 6;
          long long v167 = 0u;
          long long v168 = 0u;
          long long v165 = 0u;
          long long v166 = 0u;
          long long v163 = 0u;
          long long v164 = 0u;
          DWORD2(v163) = 6;
          CFStringRef v171 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", @"Network Transition");
          sub_10010E020(a1, (uint64_t)&v163);
          sub_10010D96C(a1, 0, 1, 0, (unsigned int *)&v178);
        }
      }
LABEL_103:
      if (*(void *)(a1 + 7368))
      {
        v162[0] = _NSConcreteStackBlock;
        v162[1] = 3221225472;
        v162[2] = sub_1001161B0;
        v162[3] = &unk_100241558;
        v162[4] = a1;
        sub_10010A88C(a1, (const void **)v43, (uint64_t)v162);
      }
      char v65 = 0;
      char context = 1;
LABEL_106:
      if (v157 == 1018)
      {
        if ((v65 & 1) == 0) {
          goto LABEL_110;
        }
      }
      else
      {
        ++*(_DWORD *)(a1 + 3480);
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: did increment user join counter (%d)", "WiFiDeviceManagerAssociateAsync", *(unsigned int *)(a1 + 3480)];
        }
        if ((v65 & 1) == 0)
        {
LABEL_110:
          if (sub_10001E404((uint64_t)a3, @"COLOCATED_NETWORK_SCOPE_ID"))
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Link down will be debounced", "WiFiDeviceManagerAssociateAsync")];
            }
            if (!a3)
            {
LABEL_119:
              CFRange v153 = v49;
              int v71 = (char *)malloc_type_malloc(0x38uLL, 0x10E00402A548A24uLL);
              uint64_t v72 = (uint64_t)v71;
              *(_OWORD *)(v71 + 24) = 0u;
              *(_OWORD *)(v71 + 40) = 0u;
              *(void *)int v71 = a1;
              *((void *)v71 + 1) = v154;
              *((void *)v71 + 2) = v155;
              *((_DWORD *)v71 + 8) = v157;
              *((_DWORD *)v71 + 9) = v156;
              if (v58)
              {
                *((void *)v71 + 3) = v43;
                CFRetain(v43);
              }
              CFRange v73 = *(void (**)(uint64_t, CFTypeRef, void *, void, void, void))(a1 + 3888);
              if (v73) {
                v73(a1, cf, a3, 0, 0, *(void *)(a1 + 3896));
              }
              [*(id *)(a1 + 6624) asyncTrackNetworksOfInterest:1];
              sub_100105D08(a1);
              if (a3)
              {
                if (!v151)
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:3, "%s: client is NULL!", "__WiFiDeviceManagerIsNetworkAutoJoinDelayed", v145];
                  }
                  goto LABEL_140;
                }
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: Association client is %@", "__WiFiDeviceManagerIsNetworkAutoJoinDelayed", v151 message];
                }
                if (CFStringCompare(v151, @"Preferences", 0)) {
                  goto LABEL_145;
                }
                if (!v153[2] && !*(_DWORD *)(a1 + 5344) && v153[144] == -v153[143]
                  || *(unsigned char *)(a1 + 7056) && sub_10010EC7C(a1, 1))
                {
                  double Current = CFAbsoluteTimeGetCurrent();
                  if (Current - *(double *)(a1 + 3424) < 10.0 || Current - *(double *)(a1 + 3456) < 30.0) {
                    goto LABEL_145;
                  }
                  unsigned int v77 = *(_DWORD *)(a1 + 3352);
                  if (v77 <= 6 && ((1 << v77) & 0x58) != 0)
                  {
                    CFNumberRef v78 = (void *)qword_10027DD68;
                    if (!qword_10027DD68)
                    {
LABEL_140:
                      uint64_t v80 = v75;
LABEL_144:
                      goto LABEL_145;
                    }
                    CFRange v146 = (void *)sub_100012FCC(*(_DWORD *)(a1 + 3352));
                    char v79 = "%s: Device in motion (%@). Suppressing autojoin delayed alert.";
                  }
                  else
                  {
                    v183.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 3528));
                    v183.location = 0;
                    FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 3528), v183, a3);
                    if (FirstIndexOfValue == -1)
                    {
                      v184.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 3536));
                      v184.location = 0;
                      CFIndex v135 = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 3536), v184, a3);
                      if (v135 == -1) {
                        goto LABEL_145;
                      }
                      CFIndex v129 = v135;
                      v130 = (CFArrayRef *)(a1 + 3536);
                    }
                    else
                    {
                      CFIndex v129 = FirstIndexOfValue;
                      v130 = (CFArrayRef *)(a1 + 3528);
                    }
                    CFNumberRef v136 = (void *)CFArrayGetValueAtIndex(*v130, v129);
                    if (!v136) {
                      goto LABEL_145;
                    }
                    uint64_t v137 = v136;
                    sub_1000198FC((uint64_t)v136, (uint64_t)a3);
                    if (!sub_10001EBB4((uint64_t)v137))
                    {
                      dword_10027DDAC |= 0x10000u;
                      goto LABEL_145;
                    }
                    if (sub_10001E71C((uint64_t)v137)
                      || !sub_1000C7604((uint64_t)v137)
                      || sub_10001E404((uint64_t)v137, @"HotspotDeviceIdentifier"))
                    {
                      CFNumberRef v78 = (void *)qword_10027DD68;
                      if (!qword_10027DD68) {
                        goto LABEL_140;
                      }
                      CFRange v146 = (void *)sub_10001A43C(v137);
                      char v79 = "%s: not considering personal hotspot network %@ for delayed auto-join";
                    }
                    else if (sub_10001EA5C(v137))
                    {
                      CFNumberRef v78 = (void *)qword_10027DD68;
                      if (!qword_10027DD68) {
                        goto LABEL_140;
                      }
                      CFRange v146 = (void *)sub_10001A43C(v137);
                      char v79 = "%s: not considering hidden network %@ for delayed auto-join";
                    }
                    else
                    {
                      if (!sub_1000066FC((uint64_t)v137))
                      {
                        int v138 = sub_10012EE58(a1, v137, 0);
                        if (!v138)
                        {
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:3, "%s: not considering non-suitable network %@ for delayed auto-join", "__WiFiDeviceManagerIsNetworkAutoJoinDelayed", sub_10001A43C(v137) message];
                          }
                          goto LABEL_145;
                        }
                        id v140 = sub_10000AD1C((uint64_t)a3);
                        if ([*(id *)(a1 + 6648) isNetworkDenyListedForAutoJoinDueToTrigDisc:v140 RSSI:0 timestamp:0])
                        {
                          if (qword_10027DD68) {
                            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: joining weak/trigger-disconnected network at %d, not considering for slow auto-join", "__WiFiDeviceManagerIsNetworkAutoJoinDelayed", sub_1000C6FC0((uint64_t)a3, @"RSSI"));
                          }
                        }
                        else
                        {
                          if (![*(id *)(a1 + 3656) canDeferNetwork:v137 withUsageRank:sub_1000CEFEC((uint64_t)v137) andMotionState:*(unsigned int *)(a1 + 3352)])
                          {

                            if (!v43)
                            {
                              dword_10027DDAC |= 0x200000u;
                              if (*(void *)(a1 + 240))
                              {
                                CFRetain((CFTypeRef)a1);
                                unsigned int v142 = *(NSObject **)(a1 + 240);
                                v160[0] = _NSConcreteStackBlock;
                                v160[1] = 3221225472;
                                v160[2] = sub_100116304;
                                v160[3] = &unk_10023EAF8;
                                v160[4] = a1;
                                dispatch_async(v142, v160);
                              }
                              else
                              {
                                if (qword_10027DD68) {
                                  [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue.":@"WiFiDeviceManagerAssociateAsync"];
                                }
                              }
                              int v144 = *(void **)(a1 + 7368);
                              if (v144) {
                                [v144 addFaultEvent:12 forInterface:sub_100016E20(*(void *)(a1 + 64))];
                              }
                            }
                            goto LABEL_145;
                          }
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:3, "%s: not considering deferrable network %@ for delayed auto-join", "__WiFiDeviceManagerIsNetworkAutoJoinDelayed", sub_10001A43C(v137) message];
                          }
                        }

LABEL_145:
                        *(_DWORD *)(a1 + 3472) = 0;
                        CFNumberRef v82 = (const __CFNumber *)sub_10001E404((uint64_t)a3, @"TransitionDisabledFlags");
                        if (v82) {
                          CFNumberGetValue(v82, kCFNumberSInt32Type, (void *)(a1 + 3472));
                        }
                        uint64_t v83 = sub_10001CECC((CFDictionaryRef *)a3);
                        id v84 = sub_100005420(a1);
                        if (CWFKnownNetworkAssociatedDuringAWDLRealTimeMode())
                        {
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_PREFER_NON_6GHZ because AWDL real time mode was recently active while associated to this known network (%@)", "WiFiDeviceManagerAssociateAsync", v83 message];
                          }
                          unsigned int v86 = sub_1000C6FC0((uint64_t)a3, @"ASSOC_FLAGS");
                          sub_10001A610((uint64_t)a3, @"ASSOC_FLAGS", v86 & 0xFFFEFFFF | 0x10000);
                        }

                        if (_os_feature_enabled_impl())
                        {
                          if (sub_10001C1A8(*(void *)(a1 + 64)))
                          {
                            unsigned int v87 = sub_1000C6FC0((uint64_t)a3, @"ASSOC_FLAGS");
                            if ((v87 & 0x100000) == 0)
                            {
                              uint64_t v88 = sub_100072970(*(void *)(a1 + 64), 0);
                              if (CWFScanResultHas6GHzOnlyBSS())
                              {
                                if (qword_10027DD68) {
                                  [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_6GHZ_ONLY because network has 6GHz-only BSS (%@)", "WiFiDeviceManagerAssociateAsync", a3 message];
                                }
                                sub_10001A610((uint64_t)a3, @"ASSOC_FLAGS", v87 & 0xFFEFFFFF | 0x100000);
                                CFArrayRef v90 = sub_10001CECC((CFDictionaryRef *)a3);
                                [v90 setWas6GHzOnlyAt:+[NSDate date](NSDate, "date")];
                                uint64_t v91 = sub_1000CFEE8(v90, 0);
                                sub_10001C6A4((uint64_t)v91, @"Standalone", 0);
                                if (v91)
                                {
                                  sub_1000C63FC((uint64_t)a3, (uint64_t)v91);
                                  CFRelease(v91);
                                }
                              }
                              else if ([v83 wasRecently6GHzOnlyOnAnyDevice])
                              {
                                if (qword_10027DD68) {
                                  [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_6GHZ_ONLY because known network was recently determined to be 6GHz-only (%@)", "WiFiDeviceManagerAssociateAsync", a3 message];
                                }
                                sub_10001A610((uint64_t)a3, @"ASSOC_FLAGS", v87 & 0xFFEFFFFF | 0x100000);
                              }
                              if (v88) {
                                CFRelease(v88);
                              }
                            }
                          }
                        }

                        if (sub_10006C1A8(*(void *)(a1 + 64)) && sub_1000C7EBC(a3))
                        {
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_BEACON_PROTECTION because network is capable (%@)", "WiFiDeviceManagerAssociateAsync", a3 message];
                          }
                          unsigned int v107 = sub_1000C6FC0((uint64_t)a3, @"ASSOC_FLAGS");
                          sub_10001A610((uint64_t)a3, @"ASSOC_FLAGS", v107 & 0xFFFF7FFF | 0x8000);
                        }
                        if (sub_10006C1CC(*(void *)(a1 + 64)))
                        {
                          unsigned int v108 = sub_1000C7F98((const __CFDictionary *)a3);
                          if (v108)
                          {
                            if (qword_10027DD68) {
                              [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_SAE_PK because network is capable (%@)", "WiFiDeviceManagerAssociateAsync", a3 message];
                            }
                            unsigned int v110 = sub_1000C6FC0((uint64_t)a3, @"ASSOC_FLAGS");
                            sub_10001A610((uint64_t)a3, @"ASSOC_FLAGS", v110 & 0xFFFBFFFF | 0x40000);
                            unsigned int v111 = sub_1000C6FC0((uint64_t)a3, @"WSEC_FLAGS");
                            unsigned int v112 = sub_1000C7FA8((const __CFDictionary *)a3);
                            if (v112)
                            {
                              unsigned int v113 = v111 | 0x20000;
                              if (qword_10027DD68) {
                                [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_SAE_PK_RESTRICT mode network is capable (%@)", "WiFiDeviceManagerAssociateAsync", a3 message];
                              }
                            }
                            else
                            {
                              unsigned int v113 = v111 | 0x10000;
                              if (qword_10027DD68) {
                                [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_SAE_PK_ENABLE because network is capable (%@)", "WiFiDeviceManagerAssociateAsync", a3 message];
                              }
                            }
                          }
                          else
                          {
                            if (qword_10027DD68) {
                              [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_SAE_PK_DISABLE mode network is incapable (%@)", "WiFiDeviceManagerAssociateAsync", a3 message];
                            }
                            unsigned int v113 = 0;
                          }
                          sub_10001A610((uint64_t)a3, @"WSEC_FLAGS", v113);
                        }
                        if (sub_10006C1C0(*(void *)(a1 + 64))
                          && sub_1000C7F3C((CFDictionaryRef *)a3))
                        {
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_OCV because network is capable (%@)", "WiFiDeviceManagerAssociateAsync", a3 message];
                          }
                          unsigned int v115 = sub_1000C6FC0((uint64_t)a3, @"ASSOC_FLAGS");
                          sub_10001A610((uint64_t)a3, @"ASSOC_FLAGS", v115 & 0xFFFDFFFF | 0x20000);
                        }
                        char v116 = context ^ 1;
                        if (!v43) {
                          char v116 = 0;
                        }
                        if ((v116 & 1) == 0) {
                          sub_100070310(*(void *)(a1 + 64));
                        }
                        *(CFAbsoluteTime *)(a1 + 3456) = CFAbsoluteTimeGetCurrent();
                        [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") willAssociateWithNetwork:a3 isAutoJoin:0 interfaceName:cf];
                        if (v153[2] || v153[144] != -v153[143]) {
                          *(_DWORD *)(a1 + 6348) = 1;
                        }
                        if (sub_10001E404((uint64_t)a3, @"COLOCATED_NETWORK_SCOPE_ID"))
                        {
                          char v117 = 1;
                        }
                        else
                        {
                          sub_100111720(a1);
                          sub_10001C6A4((uint64_t)a3, @"COLOCATED_NETWORK_SCOPE_ID", *(const void **)(a1 + 3856));
                          char v117 = 0;
                        }
                        *(unsigned char *)(v72 + 48) = v117;
                        if (_os_feature_enabled_impl())
                        {
                          sub_10011645C((uint64_t)a3);
                          uint64_t v119 = (void *)qword_10027DD68;
                          if (qword_10027DD68)
                          {
                            double v120 = sub_10001A43C(a3);
                            [v119 WFLog:3, "%s: Setting ColocatedScopeId for %@ - '%@'", "WiFiDeviceManagerAssociateAsync", v120, sub_10001E404((uint64_t)a3, @"COLOCATED_NETWORK_SCOPE_ID" message];
                          }
                        }
                        sub_1001164D8(a1, a3);
                        if (qword_10027DD68) {
                          [(id)qword_10027DD68 WFLog:3, "Join with colocated scopeID (%@), network (%@)", sub_10001E404((uint64_t)a3, @"COLOCATED_NETWORK_SCOPE_ID", a3 message];
                        }
                        sub_100006E70(*(void *)(a1 + 64), 0, +[NSString stringWithFormat:@"%@/%p", @"UserJoin", v72], (CFNumberRef)0xA);
                        uint64_t v22 = sub_10006CEC8(*(void *)(a1 + 64), cf, a3, v152, (uint64_t)sub_1001166D8, v72, v156);
                        if (v22)
                        {
                          sub_100006E70(*(void *)(a1 + 64), 0, +[NSString stringWithFormat:@"%@/%p", @"UserJoin", v72], 0);
                          if (v157 != 1018)
                          {
                            --*(_DWORD *)(a1 + 3480);
                            if (qword_10027DD68) {
                              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: did decrement user join counter (%d)", "WiFiDeviceManagerAssociateAsync", *(unsigned int *)(a1 + 3480));
                            }
                          }
                          [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") associationDoneWithNetwork:a3 error:v22 interfaceName:cf];
                          uint64_t v123 = *(const void **)(v72 + 24);
                          if (v123)
                          {
                            CFRelease(v123);
                            *(void *)(v72 + 24) = 0;
                          }
                          free((void *)v72);
                        }
                        else
                        {
                          sub_1001174E8(a1, a3);
                          sub_100100A60((char *)a1, 1, 1);
                          if (*(void *)(a1 + 7368))
                          {
                            v159[0] = _NSConcreteStackBlock;
                            v159[1] = 3221225472;
                            v159[2] = sub_1001176B4;
                            v159[3] = &unk_100241650;
                            v159[4] = a1;
                            v159[5] = v150;
                            sub_10010A88C(a1, (const void **)a3, (uint64_t)v159);
                          }
                        }
                        if (v43) {
                          CFRelease(v43);
                        }
                        return v22;
                      }
                      CFNumberRef v78 = (void *)qword_10027DD68;
                      if (!qword_10027DD68) {
                        goto LABEL_140;
                      }
                      CFRange v146 = (void *)sub_10001A43C(v137);
                      char v79 = "%s: not considering hotspot network %@ for delayed auto-join";
                    }
                  }
                  [v78 WFLog:3 message:v79 @"__WiFiDeviceManagerIsNetworkAutoJoinDelayed" v146];
                  goto LABEL_140;
                }
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:3 message:@"%s: not considering delayed auto-join due to MIS" : @"__WiFiDeviceManagerIsNetworkAutoJoinDelayed"];
                }
              }
              else
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:3, @"%s: network is NULL!", @"__WiFiDeviceManagerIsNetworkAutoJoinDelayed"];
                }
              }
              uint64_t v80 = v81;
              goto LABEL_144;
            }
          }
          else
          {
            sub_10006DB78(*(void *)(a1 + 64), cf, 0, 1008);
            if (!a3) {
              goto LABEL_119;
            }
          }
LABEL_117:
          if (v43)
          {
            CFArrayRef v69 = sub_10001A43C(v43);
            unsigned int v70 = sub_10001A43C(a3);
            if (!CFEqual(v69, v70))
            {
              if (*(void *)(a1 + 4744))
              {
                if (*(void *)(a1 + 240))
                {
                  *(void *)&long long v163 = 0;
                  *((void *)&v163 + 1) = &v163;
                  long long v164 = 0x2020000000uLL;
                  uint64_t v178 = 0;
                  unsigned int v179 = &v178;
                  uint64_t v180 = 0x2020000000;
                  char v181 = (void *)0xAAAAAAAAAAAAAAAALL;
                  CFAbsoluteTime v92 = CFAbsoluteTimeGetCurrent();
                  char v181 = CFDateCreate(kCFAllocatorDefault, v92);
                  CFTypeRef v93 = CFRetain(v43);
                  *(void *)(*((void *)&v163 + 1) + 24) = v93;
                  CFRetain((CFTypeRef)a1);
                  double v94 = *(NSObject **)(a1 + 240);
                  v161[0] = _NSConcreteStackBlock;
                  v161[1] = 3221225472;
                  v161[2] = sub_100116224;
                  v161[3] = &unk_100241610;
                  v161[4] = &v163;
                  v161[5] = &v178;
                  v161[6] = a1;
                  dispatch_async(v94, v161);
                  _Block_object_dispose(&v178, 8);
                  _Block_object_dispose(&v163, 8);
                }
                else
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." :@"WiFiDeviceManagerAssociateAsync"];
                  }
                }
              }
            }
          }
          goto LABEL_119;
        }
      }
      if (!a3) {
        goto LABEL_119;
      }
      goto LABEL_117;
    }
LABEL_96:
    if (a3) {
      goto LABEL_97;
    }
    goto LABEL_103;
  }
  if (!sub_1000199C0((uint64_t)v43) || !sub_10001E404((uint64_t)a3, @"JOINING_FROM_UI"))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Same SSID %@ and EAP network. Skip disassociation.", sub_10001A43C(v43) message];
    }
    char context = 0;
    BOOL v58 = 0;
    char v65 = 1;
    goto LABEL_106;
  }
  if (*(void *)(a1 + 240))
  {
    *(void *)&long long v163 = 0;
    *((void *)&v163 + 1) = &v163;
    *(void *)&long long v164 = 0x2020000000;
    *((void *)&v164 + 1) = 0xAAAAAAAAAAAAAAAALL;
    if (cf) {
      CFTypeRef v57 = CFRetain(cf);
    }
    else {
      CFTypeRef v57 = 0;
    }
    *((void *)&v164 + 1) = v57;
    uint64_t v178 = 0;
    unsigned int v179 = &v178;
    uint64_t v180 = 0x2020000000;
    char v181 = (void *)0xAAAAAAAAAAAAAAAALL;
    char v181 = (void *)CFRetain(v43);
    CFRetain((CFTypeRef)a1);
    uint64_t v125 = *(NSObject **)(a1 + 240);
    v175[0] = _NSConcreteStackBlock;
    v175[1] = 3221225472;
    v175[2] = sub_1001160D4;
    v175[3] = &unk_1002415E8;
    v175[4] = &v178;
    v175[5] = &v163;
    v175[6] = a1;
    v175[7] = v154;
    v175[8] = v155;
    dispatch_async(v125, v175);
    _Block_object_dispose(&v178, 8);
    _Block_object_dispose(&v163, 8);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue.", @"WiFiDeviceManagerAssociateAsync"];
    }
  }
  sub_100105524((uint64_t *)a1, 0, 0, 0);
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: joining from UI. Setting interface rank kSCNetworkServicePrimaryRankDefault" args:("WiFiDeviceManagerAssociateAsync", 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
  }
  sub_100105904(a1, v43);
  return 0;
}

void sub_100115BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose((const void *)(v49 - 208), 8);
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100115C5C(const void *a1)
{
  uint64_t result = sub_10001FC1C((uint64_t)a1);
  if (!result) {
    return result;
  }
  uint64_t result = (uint64_t)sub_10001E404((uint64_t)a1, @"ShareableEAPConfig");
  if (!result) {
    return result;
  }
  if (sub_10001E404((uint64_t)a1, @"ShareableEAPTrustExceptions"))
  {
    sub_10001A43C(a1);
    EAPTLSSetTrustExceptionBindings();
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Network doesn't contain property kWiFiNetworkShareableEAPTrustExceptions, hopefully this network (%@) doesn't need them. Attempting to ingest anyway.", "WiFiDeviceManagerFixAndIngestShareableNetworkIfNecessary", sub_10001A43C(a1) message];
    }
  }
  if (!sub_100149A1C())
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: isEAP8021XAvailable() indicated the function doesn't exist. Soft link failed. EAP8021X deps missing.", "WiFiDeviceManagerFixAndIngestShareableNetworkIfNecessary")
    }
    uint64_t v11 = v10;
    goto LABEL_24;
  }
  uint64_t v3 = sub_10001E404((uint64_t)a1, @"ShareableEAPConfig");
  uint64_t v14 = 0;
  BOOL v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v4 = (uint64_t (*)(const void *))off_10027D7B8;
  int v17 = off_10027D7B8;
  if (!off_10027D7B8)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100149B60;
    void v13[3] = &unk_100240920;
    v13[4] = &v14;
    sub_100149B60((uint64_t)v13);
    uint64_t v4 = (uint64_t (*)(const void *))v15[3];
  }
  _Block_object_dispose(&v14, 8);
  if (!v4) {
    sub_100196D90();
  }
  uint64_t v5 = v4(v3);
  if (!v5)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: soft_EAPClientConfigurationCopyAndImport() returned NULL. BAIL (SSID: %@)", "WiFiDeviceManagerFixAndIngestShareableNetworkIfNecessary", sub_10001A43C(a1) message];
    }
    uint64_t v11 = v12;
LABEL_24:
    return 0;
  }
  CFDictionaryRef v6 = (const __CFDictionary *)v5;
  CFAllocatorRef Default = CFAllocatorGetDefault();
  MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(Default, 0, v6);
  CFDictionarySetValue(MutableCopy, @"EAPClientConfiguration", v6);
  CFDictionarySetValue(MutableCopy, @"EnableUserInterface", kCFBooleanFalse);
  sub_10001C6A4((uint64_t)a1, @"EnterpriseProfile", MutableCopy);
  sub_10001C6A4((uint64_t)a1, @"ShareableEAPConfig", 0);
  sub_10001C6A4((uint64_t)a1, @"ShareableEAPTrustExceptions", 0);
  CFRelease(v6);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return 1;
}

void sub_100115F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100115F38(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  if (v2[30])
  {
    (*(void (**)(void))(a1 + 48))();
    int v2 = *(void **)(a1 + 32);
  }
  CFRelease(v2);
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_100115FA8(uint64_t a1)
{
  int v2 = *(void **)(a1 + 48);
  if (v2[30])
  {
    (*(void (**)(void))(a1 + 56))();
    int v2 = *(void **)(a1 + 48);
  }
  CFRelease(v2);
  uint64_t v3 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_100116040(void *a1)
{
  uint64_t v2 = a1[6];
  if (*(void *)(v2 + 240))
  {
    (*(void (**)(uint64_t, void, void, void))(v2 + 4104))(v2, *(void *)(*(void *)(a1[5] + 8) + 24), *(void *)(v2 + 4112), *(void *)(*(void *)(a1[4] + 8) + 24));
    uint64_t v2 = a1[6];
  }
  CFRelease((CFTypeRef)v2);
  uint64_t v3 = *(const void **)(*(void *)(a1[4] + 8) + 24);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(*(void *)(a1[5] + 8) + 24);
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_1001160D4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2[30])
  {
    uint64_t v3 = a1 + 40;
    (*(void (**)(void))(a1 + 56))();
    CFRetain(*(CFTypeRef *)(a1 + 48));
    uint64_t v4 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
    uint64_t v5 = *(const void **)(*(void *)(*(void *)v3 + 8) + 24);
    if (!v5) {
      return;
    }
LABEL_10:
    CFRelease(v5);
    *(void *)(*(void *)(*(void *)v3 + 8) + 24) = 0;
    return;
  }
  CFRelease(v2);
  CFDictionaryRef v6 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v7 = a1 + 40;
  uint64_t v5 = *(const void **)(*(void *)(v8 + 8) + 24);
  if (v5)
  {
    uint64_t v3 = v7;
    goto LABEL_10;
  }
}

void sub_1001161B0(uint64_t a1, void *a2)
{
  if (a2)
  {
    [*(id *)(*(void *)(a1 + 32) + 7368) setJoinEvent:0 withReason:0 lastDisconnectReason:1008 lastJoinFailure:0 andNetworkDetails:a2 forInterface:sub_100017C48(*(void *)(*(void *)(a1 + 32) + 64))];
  }
}

void sub_100116224(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(void *)(v2 + 240))
  {
    uint64_t v3 = a1 + 40;
    (*(void (**)(uint64_t, void, const __CFString *, void, void))(v2 + 4744))(v2, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), @"LinkDownTimestamp", *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), *(void *)(v2 + 4752));
    CFRelease(*(CFTypeRef *)(a1 + 48));
    uint64_t v4 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
    uint64_t v5 = *(const void **)(*(void *)(*(void *)v3 + 8) + 24);
    if (!v5) {
      return;
    }
LABEL_10:
    CFRelease(v5);
    *(void *)(*(void *)(*(void *)v3 + 8) + 24) = 0;
    return;
  }
  CFRelease((CFTypeRef)v2);
  CFDictionaryRef v6 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v7 = a1 + 40;
  uint64_t v5 = *(const void **)(*(void *)(v8 + 8) + 24);
  if (v5)
  {
    uint64_t v3 = v7;
    goto LABEL_10;
  }
}

void sub_100116304(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(void *)(v1 + 240))
  {
    uint64_t v5 = *(const void **)(a1 + 32);
    goto LABEL_13;
  }
  if (*(unsigned char *)(v1 + 6280))
  {
    uint64_t v3 = *(void *)(v1 + 4552);
    if (v3)
    {
      if (qword_10027DD68) {
        [[(id)qword_10027DD68 WFLog:message:3, "%s: __WiFiDeviceManagerDelayedAutoJoinNotification", "__WiFiDeviceManagerDelayedAutoJoinNotification"];
      }
      (*(void (**)(uint64_t, uint64_t, void, void))(v1 + 4552))(v1, 3, 0, *(void *)(v1 + 4560));
      goto LABEL_12;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: softErrorManagerService callback is NULL!", "__WiFiDeviceManagerDelayedAutoJoinNotification")];
    }
    CFDictionaryRef v6 = v4;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: user auto-join is disabled.", @"__WiFiDeviceManagerDelayedAutoJoinNotification"];
    }
    CFDictionaryRef v6 = v7;
  }
LABEL_12:
  uint64_t v5 = *(const void **)(a1 + 32);
LABEL_13:

  CFRelease(v5);
}

NSDictionary *__cdecl sub_10011642C(id a1, id a2)
{
  CFDictionaryRef v2 = sub_10000E5B8((uint64_t)a2);
  uint64_t v3 = (void *)CFMakeCollectable(v2);

  return (NSDictionary *)v3;
}

void sub_10011645C(uint64_t a1)
{
  id v2 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyColocatedScopeIdForNetwork:a1];
  if (v2)
  {
    id v3 = v2;
    sub_10001C6A4(a1, @"COLOCATED_NETWORK_SCOPE_ID", v2);
  }
}

void sub_1001164D8(uint64_t a1, const void *a2)
{
  int v4 = sub_100074914(*(void *)(a1 + 64));
  if (a2 && v4)
  {
    uint64_t v5 = sub_10001E404((uint64_t)a2, @"COLOCATED_NETWORK_SCOPE_ID");
    if (v5)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: %s: Assign ScopeID for %@", "__WiFiDeviceManagerAssignColocatedGroupScopeID", sub_10001A43C(a2) message];
      }
    }
    CFArrayRef v7 = *(const __CFArray **)(a1 + 3736);
    if (v7) {
      CFIndex Count = CFArrayGetCount(v7);
    }
    else {
      CFIndex Count = 0;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"[NWTRANSIT]: %s: Colocated Network CFIndex Count = %ld ", @"__WiFiDeviceManagerAssignColocatedGroupScopeID", Count];
    }
    if (v5 || (char v10 = *(const void **)(a1 + 3752)) == 0)
    {
      if (!v5)
      {
        uint64_t v11 = [+[NSUUID UUID] UUIDString];
        if (!v11) {
          return;
        }
        uint64_t v5 = v11;
        sub_10001C6A4((uint64_t)a2, @"COLOCATED_NETWORK_SCOPE_ID", v11);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: %s: Configured ColocatedScopeId for %@ - '%@'", "__WiFiDeviceManagerAssignColocatedGroupScopeID", sub_10001A43C(a2), v5 message];
        }
        *(void *)(a1 + 3752) = [objc_alloc((Class)NSString) initWithString:v5];
      }
    }
    else
    {
      sub_10001C6A4((uint64_t)a2, @"COLOCATED_NETWORK_SCOPE_ID", *(const void **)(a1 + 3752));
      uint64_t v5 = v10;
    }
    if (*(unsigned char *)(a1 + 3744) == 1 && sub_10012B3F8(a1, (uint64_t)a2) && Count > 0)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3736), i);
        if (ValueAtIndex) {
          sub_10001C6A4((uint64_t)ValueAtIndex, @"COLOCATED_NETWORK_SCOPE_ID", v5);
        }
      }
    }
  }
}

void sub_1001166D8(uint64_t a1, const void *a2, void *a3, const void *a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v11 = *(void *)a6;
  if (a6[9] == 1)
  {
    --*(_DWORD *)(v11 + 3480);
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: did decrement user join counter (%d)", "__WiFiDeviceManagerClientAssociateCallback", *(unsigned int *)(v11 + 3480)];
    }
  }
  sub_100006E70(*(void *)(v11 + 64), 0, +[NSString stringWithFormat:@"%@/%p", @"UserJoin", a6], 0);
  CFStringRef v13 = &OBJC_IVAR___WiFiColocatedNetworkManager__colocatedNetworks;
  [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") associationDoneWithNetwork:a3 error:a5 interfaceName:a2];
  if (!a5)
  {
    BOOL v14 = a3 != 0;
    if (!a3)
    {
LABEL_85:
      sub_100100A60((char *)v11, 1, 1);
      sub_100130E84(v11, a3);
      goto LABEL_86;
    }
    id v15 = sub_10000AD1C((uint64_t)a3);
    [*(id *)(v11 + 6648) removeNetworkDenyListInfoWithReason:1 forScanResult:v15];
    [*(id *)(v11 + 6648) removeNetworkDenyListInfoForTrigger:0 forNetwork:v15];

    sub_10013D1C4(v11, a3, 0);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: joined %@, reason type %d", "__WiFiDeviceManagerClientAssociateCallback", sub_10001A43C(a3), a6[8] message];
    }
    if (+[WiFiPerfPerAssoc sharedInstance])
    {
      uint64_t v99 = 0;
      CFArrayRef v100 = &v99;
      uint64_t v101 = 0x2020000000;
      CFNumberRef v102 = (__CFArray *)0xAAAAAAAAAAAAAAAALL;
      CFNumberRef v102 = sub_100072870(*(void *)(v11 + 64));
      int v17 = +[WiFiPerfPerAssoc sharedInstance];
      uint64_t v18 = v100[3];
      v98[0] = _NSConcreteStackBlock;
      v98[1] = 3221225472;
      v98[2] = sub_100140C74;
      v98[3] = &unk_100240920;
      v98[4] = &v99;
      [(WiFiPerfPerAssoc *)v17 ingestScanResults:v18 currentSSID:sub_10001A43C(a3) andReply:v98];
      _Block_object_dispose(&v99, 8);
    }
    sub_10012FE48(v11, a3, 0);
    if (_os_feature_enabled_impl())
    {
      CFComparisonResult v19 = sub_10001A43C(a3);
      if (v19) {
        [*(id *)(v11 + 8896) removeObjectForKey:v19];
      }
    }
    uint64_t v20 = *(const void **)(v11 + 3440);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(v11 + 3440) = 0;
    }
    BOOL v21 = (const void *)*((void *)a6 + 3);
    if (v21)
    {
      CFRetain(v21);
      *(unsigned char *)(v11 + 3413) = 1;
      *(void *)(v11 + 3440) = *((void *)a6 + 3);
      *(_DWORD *)(v11 + 3392) = -1;
      if (_os_feature_enabled_impl())
      {
        uint64_t v22 = (const void *)*((void *)a6 + 3);
        if (v22)
        {
          CFArrayRef v23 = sub_10001E404((uint64_t)a3, @"addedAt");
          CFArrayRef v24 = sub_10001E404((uint64_t)v22, @"addedAt");
          if (v23)
          {
            if (v24 && *(void *)(v11 + 4520))
            {
              uint64_t v25 = sub_1000CCB44((uint64_t)a3);
              CFStringRef v26 = sub_10001A43C(a3);
              CFStringRef v27 = v25
                  ? CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"'%@' (%@)", v26, v25)
                  : CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"'%@'", v26, v86);
              CFStringRef v28 = v27;
              if (v27)
              {
                uint64_t v88 = a4;
                int v29 = sub_1000CCB44((uint64_t)v22);
                CFNumberRef v30 = sub_10001A43C(v22);
                if (v29) {
                  CFStringRef v31 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"'%@' (%@)", v30, v29);
                }
                else {
                  CFStringRef v31 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"'%@'", v30, v87);
                }
                CFStringRef v32 = v31;
                if (v31)
                {
                  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
                  CFDateRef v34 = CFDateCreate(kCFAllocatorDefault, Current);
                  if (v34)
                  {
                    CFDateRef v35 = v34;
                    if (qword_10027DD68) {
                      [(id)qword_10027DD68 WFLog:3, "%s: setting user-defined network priority %@ as more-preferred than previous network %@", "__WiFiDeviceManagerUpdateNetworkUserPriority", v28, v32 message];
                    }
                    sub_1000D29F0((uint64_t)v22, (CFDictionaryRef *)a3, v35);
                    sub_10010C6B4((NSObject **)v11, v22);
                    CFRelease(v35);
                  }
                  CFRelease(v28);
                }
                else
                {
                  CFStringRef v32 = v28;
                }
                CFRelease(v32);
                a4 = v88;
              }
            }
          }
        }
        BOOL v37 = sub_10001A43C(*((const void **)a6 + 3));
        if (v37) {
          [*(id *)(v11 + 8896) removeObjectForKey:v37];
        }
      }
    }
    CFAbsoluteTime v38 = CFAbsoluteTimeGetCurrent();
    CFDateRef v39 = CFDateCreate(kCFAllocatorDefault, v38);
    if (v39) {
      sub_1000C995C(a3, 1, v39);
    }
    if (!_os_feature_enabled_impl()) {
      goto LABEL_49;
    }
    id v40 = sub_100005420(v11);
    if (v40)
    {
      unsigned int v41 = v40;
      uint64_t v42 = *(void *)(v11 + 6792);
      [v40 coordinate];
      CLLocationDegrees v44 = v43;
      [v41 coordinate];
      CLLocationDegrees v46 = v45;
      [v41 horizontalAccuracy];
      sub_1000A32E4(v42, a3, v44, v46, v47, [v41 timestamp]);
    }
    if (v39 && *(unsigned char *)(v11 + 3414))
    {
      CFNumberRef v48 = a4;
      sub_1000CAA00(a3, v39);
    }
    else
    {
LABEL_49:
      CFNumberRef v48 = a4;
      if (!v39)
      {
LABEL_51:
        sub_10013D0EC(v11, a3);
        if (*(unsigned char *)(v11 + 3412))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: tagging network %@ as moving", "__WiFiDeviceManagerClientAssociateCallback", sub_10001A43C(a3) message];
          }
          sub_10001C6A4((uint64_t)a3, @"WiFiNetworkAttributeIsMoving", kCFBooleanTrue);
          CFBooleanRef v50 = kCFBooleanFalse;
        }
        else
        {
          CFBooleanRef v50 = kCFBooleanFalse;
          sub_10001C6A4((uint64_t)a3, @"WiFiNetworkAttributeIsMoving", kCFBooleanFalse);
        }
        sub_10001C6A4((uint64_t)a3, @"WiFiInstantHotspotJoining", v50);
        sub_10001C6A4((uint64_t)a3, @"WiFiAutoInstantHotspotJoining", v50);
        sub_100132410((NSObject **)v11, a3, *(_DWORD *)(v11 + 3472), 0);
        CFNumberRef v51 = sub_100018FA8(v11, a2, 1);
        a4 = v48;
        if (v51)
        {
          uint64_t v52 = v51;
          CFStringRef v13 = &OBJC_IVAR___WiFiColocatedNetworkManager__colocatedNetworks;
          if (*(_DWORD *)(v11 + 3472)) {
            sub_10001C6A4((uint64_t)v51, @"TransitionDisabledFlags", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
          }
          sub_10010547C(v11, v52);
          sub_1000CA19C(a3, v52);
          CFRelease(v52);
        }
        else
        {
          sub_10010547C(v11, a3);
          CFStringRef v13 = &OBJC_IVAR___WiFiColocatedNetworkManager__colocatedNetworks;
        }
        unsigned int v53 = a6[8];
        if (v53 == 1011 || v53 == 1008) {
          *(unsigned char *)(v11 + 3413) = 1;
        }
        if (*(void *)(v11 + 3920))
        {
          if (*(void *)(v11 + 240))
          {
            if (a2) {
              CFRetain(a2);
            }
            CFRetain(a3);
            if (a4) {
              CFRetain(a4);
            }
            CFRetain((CFTypeRef)v11);
            CFTypeRef v54 = *(NSObject **)(v11 + 240);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_100140CB4;
            block[3] = &unk_100241698;
            void block[4] = v11;
            void block[5] = a2;
            void block[6] = a3;
            void block[7] = a4;
            int v97 = 0;
            dispatch_async(v54, block);
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." arguments:@"__WiFiDeviceManagerClientAssociateCallback"];
            }
          }
        }
        if (*(void *)(v11 + 3872))
        {
          if (*(void *)(v11 + 240))
          {
            uint64_t v99 = 0;
            CFArrayRef v100 = &v99;
            uint64_t v101 = 0x2020000000;
            CFNumberRef v102 = 0;
            CFTypeRef v56 = CFRetain(a3);
            v100[3] = (uint64_t)v56;
            CFRetain((CFTypeRef)v11);
            CFTypeRef v57 = *(NSObject **)(v11 + 240);
            v94[0] = _NSConcreteStackBlock;
            v94[1] = 3221225472;
            v94[2] = sub_100140D7C;
            v94[3] = &unk_1002419D0;
            v94[4] = &v99;
            v94[5] = v11;
            int v95 = 0;
            dispatch_async(v57, v94);
            _Block_object_dispose(&v99, 8);
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." : @"__WiFiDeviceManagerClientAssociateCallback"];
            }
          }
        }
        *(_WORD *)(v11 + 6600) = sub_100105E08(v11, a3);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: usage rank for %@ is now : %d", "__WiFiDeviceManagerClientAssociateCallback", sub_10001A43C(a3), *(unsigned __int16 *)(v11 + 6600) message];
        }
        CFIndex v61 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          CFBooleanRef v62 = sub_10001A43C(a3);
          [v61 WFLog:3, "%s: Submit metric to update scores for user switched to %@, and left %@", "__WiFiDeviceManagerClientAssociateCallback", v62, sub_10001A43C(*((const void **)a6 + 3)) message];
        }
        sub_100053828(v11, a3, *((const void **)a6 + 3));
        BOOL v14 = 1;
        goto LABEL_85;
      }
    }
    CFRelease(v39);
    goto LABEL_51;
  }
  if (*(void *)(v11 + 7368))
  {
    v103[0] = _NSConcreteStackBlock;
    v103[1] = 3221225472;
    v103[2] = sub_100140BFC;
    v103[3] = &unk_1002415A0;
    v103[4] = v11;
    int v104 = a5;
    sub_10010A88C(v11, (const void **)a3, (uint64_t)v103);
  }
  BOOL v14 = a3 != 0;
  sub_10011E17C(v11, a3, 0);
  sub_100100A60((char *)v11, 1, 0);
LABEL_86:
  sub_10013D370(v11, a3);
  sub_10013D4A0(v11, (uint64_t)a3);
  CFBooleanRef v63 = sub_10001A5A8(*(const __CFArray **)(v11 + 3704), (const void **)a3);
  if (a5 == -3924) {
    goto LABEL_111;
  }
  uint64_t v64 = (uint64_t)v63;
  if (sub_10001A680((uint64_t)a3) || !v64)
  {
    if (!v64) {
      goto LABEL_111;
    }
  }
  else
  {
    char v65 = sub_10001E404(v64, @"PRIVATE_MAC_ADDRESS");
    if (v65)
    {
      CFIndex v66 = v65;
      BOOL v90 = v14;
      CFTypeID TypeID = CFDictionaryGetTypeID();
      BOOL v68 = TypeID == CFGetTypeID(v66);
      BOOL v14 = v90;
      if (v68)
      {
        CFDataRef Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v66, @"PRIVATE_MAC_ADDRESS_VALUE");
        unsigned int v70 = sub_10001A6DC(Value);
        if (a5)
        {
          if (v70)
          {
            uint64_t v89 = a2;
            int v71 = v13;
            uint64_t v72 = a4;
            unsigned int v73 = sub_1000C6FC0(v64, @"FailureCountCurrent");
            unsigned int v74 = sub_1000C6FC0(v64, @"FailureCountThresholdCurrent");
            if (*(void *)(v11 + 4744))
            {
              if (*(void *)(v11 + 240))
              {
                uint64_t v99 = 0;
                CFArrayRef v100 = &v99;
                uint64_t v101 = 0x2020000000;
                CFNumberRef v102 = 0;
                if (v90)
                {
                  CFTypeRef v75 = CFRetain(a3);
                  v100[3] = (uint64_t)v75;
                }
                CFRetain((CFTypeRef)v11);
                CFDictionaryRef v76 = *(NSObject **)(v11 + 240);
                v93[0] = _NSConcreteStackBlock;
                v93[1] = 3221225472;
                v93[2] = sub_100140E1C;
                v93[3] = &unk_10023F220;
                v93[4] = &v99;
                v93[5] = v11;
                dispatch_async(v76, v93);
                _Block_object_dispose(&v99, 8);
              }
              else
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." args:__WiFiDeviceManagerClientAssociateCallback];
                }
              }
            }
            unsigned int v85 = v74 - v73;
            a4 = v72;
            CFStringRef v13 = v71;
            a2 = v89;
            BOOL v14 = v90;
            if (v85 == 1) {
              sub_10001C6A4((uint64_t)a3, @"FailureThresholdMet", kCFBooleanTrue);
            }
          }
        }
      }
    }
  }
  if (a5)
  {
    CFBooleanRef v77 = (const __CFBoolean *)sub_10001E404(v64, @"MacAddressRandomisationTagMigratedNetwork");
    if (v77)
    {
      if (v77 == kCFBooleanTrue && *(void *)(v11 + 4712))
      {
        if (*(void *)(v11 + 240))
        {
          uint64_t v99 = 0;
          CFArrayRef v100 = &v99;
          uint64_t v101 = 0x2020000000;
          CFNumberRef v102 = 0;
          if (v14)
          {
            CFTypeRef v78 = CFRetain(a3);
            v100[3] = (uint64_t)v78;
          }
          CFRetain((CFTypeRef)v11);
          char v79 = *(NSObject **)(v11 + 240);
          v92[0] = _NSConcreteStackBlock;
          v92[1] = 3221225472;
          v92[2] = sub_100140EA8;
          v92[3] = &unk_10023F220;
          v92[4] = &v99;
          v92[5] = v11;
          dispatch_async(v79, v92);
          _Block_object_dispose(&v99, 8);
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." :@"__WiFiDeviceManagerClientAssociateCallback"];
          }
        }
      }
    }
  }
LABEL_111:
  unsigned int v81 = (void (*)(uint64_t, const void *, void *, const void *, uint64_t, void))*((void *)a6 + 1);
  if (v81) {
    v81(v11, a2, a3, a4, a5, *((void *)a6 + 2));
  }
  if (a5 && *(_DWORD *)(v11 + 3280) != 14)
  {
    *(_DWORD *)(v11 + 192) = 7;
    if (_os_feature_enabled_impl())
    {
      if (*((unsigned char *)a6 + 48) == 1) {
        uint64_t v82 = 59;
      }
      else {
        uint64_t v82 = 3;
      }
      sub_10001FD64(v11, v82);
    }
    else
    {
      [objc_msgSend(v13 + 844, "sharedXPCManager") autoJoinStartedWithTrigger:3 interfaceName:a2];
      sub_1001028E4(v11, 2, (uint64_t)"__WiFiDeviceManagerClientAssociateCallback");
    }
  }
  sub_100131ECC(v11);
  uint64_t v83 = (const void *)*((void *)a6 + 3);
  if (v83)
  {
    CFRelease(v83);
    *((void *)a6 + 3) = 0;
  }
  free(a6);
}

void sub_1001174C4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Unwind_Resume(a1);
}

void sub_1001174E8(uint64_t a1, const void *a2)
{
  if (!a1 || !a2)
  {
    uint64_t v12 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_16;
    }
    BOOL v14 = (const void *)a1;
    id v15 = a2;
    uint64_t v11 = "%s: bad args: manager %p network %p";
    goto LABEL_23;
  }
  int v4 = (unsigned int *)(a1 + 6580);
  if (*(_DWORD *)(a1 + 6580))
  {
    uint64_t v12 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_16;
    }
    BOOL v14 = (const void *)*v4;
    uint64_t v11 = "%s: PM assertion already acquired with ID:%d";
LABEL_23:
    uint64_t v13 = 4;
    goto LABEL_15;
  }
  if (!sub_1000C8140((uint64_t)a2) || !sub_10001FC1C((uint64_t)a2) && !sub_1000C8798((uint64_t)a2)) {
    return;
  }
  uint64_t v5 = IOPMAssertionCreateWithName(@"NoIdleSleepAssertion", 0xFFu, @"com.apple.wifi-autojoin", (IOPMAssertionID *)(a1 + 6580));
  if (v5)
  {
    uint64_t v6 = v5;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: unable to prevent idle sleep during autojoin, error=%d", @"__WiFiDeviceManagerAcquireWakeAssertionForAutoJoin", v6];
    }
    *(_DWORD *)(a1 + 6580) = 0;
    *(void *)(a1 + 6584) = 0;
  }
  else
  {
    *(CFAbsoluteTime *)(a1 + 6584) = CFAbsoluteTimeGetCurrent();
    *(void *)(a1 + 6592) = CFRetain(a2);
  }
  uint64_t v9 = qword_10027DD68;
  if (qword_10027DD68)
  {
    char v10 = sub_10001A43C(a2);
    id v15 = *(const void **)(a1 + 6584);
    BOOL v14 = v10;
    uint64_t v11 = "%s: wake assertion held for network %@ current timestamp:%f";
    uint64_t v12 = (void *)v9;
    uint64_t v13 = 3;
LABEL_15:
    [v12 WFLog:v13 message:v11 __WiFiDeviceManagerAcquireWakeAssertionForAutoJoin v14 v15];
  }
LABEL_16:
}

void sub_1001176B4(uint64_t a1, void *a2)
{
  if (a2)
  {
    [*(id *)(*(void *)(a1 + 32) + 7368) setJoinEvent:1 withReason:*(void *)(a1 + 40) lastDisconnectReason:0 lastJoinFailure:0 andNetworkDetails:a2 forInterface:sub_100017C48(*(void *)(*(void *)(a1 + 32) + 64))];
  }
}

uint64_t sub_100117728(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = [[WiFiFindAndJoinRequest alloc] initWithNetworkName:sub_10001A43C(a3)];
  if (!v12) {
    return 4294963395;
  }
  uint64_t v13 = v12;
  [(WiFiFindAndJoinRequest *)v12 setPassword:a4];
  [(WiFiFindAndJoinRequest *)v13 setChannelNumber:sub_1000C6FC0((uint64_t)a3, @"CHANNEL")];
  [(WiFiFindAndJoinRequest *)v13 setTimeout:60.0];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10011785C;
  v16[3] = &unk_100241678;
  void v16[6] = a5;
  v16[7] = a1;
  v16[4] = v13;
  v16[5] = a2;
  v16[8] = a6;
  if (a1) {
    uint64_t v14 = *(void *)(a1 + 240);
  }
  else {
    uint64_t v14 = 0;
  }
  if ([(WiFiFindAndJoinRequest *)v13 runAsynchronouslyOnQueue:v14 onInterface:a2 withReply:v16])
  {
    return 0;
  }
  else
  {
    return 4294963396;
  }
}

void sub_10011785C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: error: %@", "WiFiDeviceManagerFindAndJoinRequestAsync_block_invoke", v3 message];
    }
    id v6 = [(id)v3 domain];
    if ([v6 isEqualToString:CWFManagerErrorDomain]) {
      uint64_t v3 = (uint64_t)[(id)v3 code];
    }
    else {
      uint64_t v3 = 4294963353;
    }
  }
  if ([*(id *)(a1 + 32) joinedNetwork]) {
    CFArrayRef v7 = sub_1000D1628([*(id *)(a1 + 32) joinedNetwork]);
  }
  else {
    CFArrayRef v7 = 0;
  }
  (*(void (**)(void, void, void *, void, uint64_t, void))(a1 + 48))(*(void *)(a1 + 56), *(void *)(a1 + 40), v7, 0, v3, *(void *)(a1 + 64));
  if (v7)
  {
    CFRelease(v7);
  }
}

uint64_t sub_100117968(uint64_t result)
{
  if (result) {
    return *(void *)(result + 240);
  }
  return result;
}

uint64_t sub_100117974(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  char v10 = (uint64_t *)malloc_type_malloc(0x38uLL, 0x10E0040400D9003uLL);
  if (!v10) {
    return 4294963395;
  }
  uint64_t v11 = v10;
  sub_100102284(a1);
  *(unsigned char *)(a1 + 248) = 1;
  *uint64_t v11 = a1;
  v11[1] = a4;
  v11[5] = a5;
  void v11[3] = (uint64_t)CFRetain(a3);
  *((_DWORD *)v11 + 8) = 1;
  uint64_t v12 = sub_100063EB4(*(void *)(a1 + 64), a2, a3, (uint64_t)sub_100117A64, (uint64_t)v11);
  if (v12)
  {
    uint64_t v13 = (const void *)v11[3];
    if (v13) {
      CFRelease(v13);
    }
    free(v11);
    sub_100064084(*(void *)(a1 + 64), a2, 0, 0);
  }
  return v12;
}

void sub_100117A64(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v7 = (uint64_t)*a4;
  uint64_t v8 = sub_100019658((int)kCFAllocatorDefault, a4[3]);
  if (v8)
  {
    CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a4 + 4);
    if (v9)
    {
      CFNumberRef v10 = v9;
      sub_10001C6A4((uint64_t)v8, @"networkRole", v9);
      CFRelease(v10);
    }
    if (!a3)
    {
      CFSetAddValue(*(CFMutableSetRef *)(v7 + 3320), v8);
      goto LABEL_8;
    }
  }
  else if (!a3)
  {
    goto LABEL_8;
  }
  sub_100117B7C(v7, a2, (uint64_t)v8, 0, 0);
LABEL_8:
  uint64_t v11 = (void (*)(void, void, void, void, void, void))a4[1];
  if (v11) {
    v11(v7, a2, a3, v8, 0, a4[5]);
  }
  CFTypeRef v12 = a4[3];
  if (v12)
  {
    CFRelease(v12);
    a4[3] = 0;
  }
  if (v8) {
    CFRelease(v8);
  }

  free(a4);
}

uint64_t sub_100117B7C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v10 = malloc_type_malloc(0x20uLL, 0xA004088793A40uLL);
  *(unsigned char *)(a1 + 248) = 0;
  void *v10 = a1;
  v10[1] = a4;
  void v10[2] = a3;
  _OWORD v10[3] = a5;
  uint64_t v11 = sub_100064084(*(void *)(a1 + 64), a2, (uint64_t)sub_100117CA4, (uint64_t)v10);
  if (v11)
  {
    uint64_t v12 = v11;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Unable to stop network (%d). deviceManager=%p", v12, a1);
    }
  }
  *(_DWORD *)(a1 + 192) = 8;
  if (_os_feature_enabled_impl())
  {
    sub_10001FD64(a1, 11);
  }
  else
  {
    [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:11 interfaceName:a2];
    sub_1001028E4(a1, 2, (uint64_t)"WiFiDeviceManagerStopAdHocNetwork");
  }
  return 0;
}

void sub_100117CA4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a4;
  uint64_t v5 = (void (*)(void, uint64_t, uint64_t, void, void))a4[1];
  if (v5) {
    v5(*a4, a2, a3, 0, a4[3]);
  }
  CFSetRemoveValue(*(CFMutableSetRef *)(v6 + 3320), (const void *)a4[2]);

  free(a4);
}

uint64_t sub_100117CFC(uint64_t a1, const void *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v10 = malloc_type_malloc(0x38uLL, 0x10E0040400D9003uLL);
  if (!v10)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null startData" args:("WiFiDeviceManagerStartWiFiDirectGroup", nil)];
    }
    return 4294963395;
  }
  if (!a3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null request", "WiFiDeviceManagerStartWiFiDirectGroup")
    }
    return 4294963396;
  }
  uint64_t v11 = v10;
  void *v10 = a1;
  v10[1] = a4;
  void v10[5] = a5;
  *((_DWORD *)v10 + 8) = 3;
  MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, a3);
  if (!MutableCopy)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null hostAPDictionary" : @"WiFiDeviceManagerStartWiFiDirectGroup"];
    }
    return 4294963394;
  }
  uint64_t v13 = MutableCopy;
  void v11[3] = CFRetain(MutableCopy);
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a3, @"AP_MODE_MOVETOIOS_MIGRATION");
  if (!Value || Value != kCFBooleanTrue) {
    goto LABEL_65;
  }
  CFStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  LODWORD(v67[0]) = 0;
  *(void *)int valuePtr = 0;
  BOOL v66 = 0;
  if (!sub_10006F650(*(void *)(a1 + 64)))
  {
    BOOL v16 = CFEqual(Mutable, @"XZ")
       || CFEqual(Mutable, &stru_100248240)
       || CFEqual(Mutable, @"JP")
       || CFEqual(Mutable, @"TN")
       || CFEqual(Mutable, @"YE");
    BOOL v66 = v16;
  }
  uint64_t v64 = v13;
  char v65 = a2;
  BOOL v17 = sub_100140F20(Mutable);
  uint64_t v18 = 0;
  do
  {
    CFComparisonResult v19 = CFStringCompare(Mutable, off_1002419F0[v18], 0);
    if (v19 == kCFCompareEqualTo) {
      break;
    }
  }
  while (v18++ != 37);
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v22 = (const void *)sub_10005FC0C(v21);
  uint64_t v61 = sub_10006F1D0(v21, v22, valuePtr);
  CFArrayRef v23 = (const void *)sub_100017C48(*(void *)(a1 + 64));
  CFArrayRef v24 = sub_100018FA8(a1, v23, 1);
  uint64_t v25 = (uint64_t)v24;
  CFDictionaryRef v63 = a3;
  if (!v24)
  {
    int v28 = 0;
    int v29 = 0;
    uint64_t v30 = 0;
LABEL_31:
    uint64_t v31 = 0;
    goto LABEL_32;
  }
  CFNumberRef v26 = (const __CFNumber *)sub_10001E404((uint64_t)v24, @"CHANNEL");
  CFNumberRef v27 = (const __CFNumber *)sub_10001E404(v25, @"CHANNEL_FLAGS");
  if (v27) {
    CFNumberGetValue(v27, kCFNumberSInt32Type, &valuePtr[1]);
  }
  if (v26) {
    CFNumberGetValue(v26, kCFNumberSInt32Type, v67);
  }
  if ((valuePtr[1] & 8) != 0)
  {
    int v29 = 0;
    uint64_t v30 = 0;
    int v28 = 1;
  }
  else
  {
    int v28 = 0;
    if ((valuePtr[1] & 0x10) != 0)
    {
      uint64_t v30 = 0;
      int v29 = 1;
    }
    else
    {
      int v29 = 0;
      uint64_t v30 = (valuePtr[1] >> 13) & 1;
    }
  }
  if (!sub_10006C0E8(*(void *)(a1 + 64))) {
    goto LABEL_31;
  }
  uint64_t v31 = (valuePtr[1] >> 11) & 1;
LABEL_32:
  if (v31 | v30) {
    char v32 = 1;
  }
  else {
    char v32 = v66;
  }
  if ((v32 & 1) != 0
    || v25 && v29 && sub_100068920(*(void *)(a1 + 64), v67[0])
    || *(unsigned char *)(a1 + 3414))
  {
    CFDateRef v34 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      int v62 = v28;
      uint64_t v35 = sub_10006C0E8(*(void *)(a1 + 64));
      BOOL v36 = 0;
      if (v25 && v29) {
        BOOL v36 = sub_100068920(*(void *)(a1 + 64), v67[0]) != 0;
      }
      [v34 WFLog:3 message:@"MIGRATION: %s Starting SoftAp on 2.4GHz (RegulatoryRestricted: %d, Infra6G: %d, InfraBWHigherThan80MHz:%d, isChip160MHzCapable:%d, Infra5G_DFS:%d AWDLRealTimeMode:%d)", "__WiFiDeviceManagerSelectPHChannel", v66, v30, v31, v35, v36, *(unsigned __int8 *)(a1 + 3414)];
      int v28 = v62;
    }
    if (v25 && v28)
    {
      CFNumberRef v37 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v67);
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIGRATION: Selecting 2.4G infra channel :%d ", LODWORD(v67[0]))];
      }
      uint64_t v13 = v64;
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v13 = v64;
      while (!sub_100068A20(*(void *)(a1 + 64), dword_10027CD24[v39]))
      {
        if (++v39 == 3) {
          goto LABEL_53;
        }
      }
      CFNumberRef v37 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &dword_10027CD24[v39]);
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIGRATION: Selecting 2G  channel :%d\n", dword_10027CD24[v39])];
      }
    }
    if (!v37) {
      goto LABEL_53;
    }
    goto LABEL_58;
  }
  if (v29 && !v61)
  {
    uint64_t v13 = v64;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIGRATION: Selecting 5G infra channel :%d ", LODWORD(v67[0]));
    }
    uint64_t v49 = (int *)v67;
    goto LABEL_79;
  }
  uint64_t v50 = 0;
  if (v19) {
    char v51 = v17;
  }
  else {
    char v51 = 1;
  }
  char v52 = 1;
  uint64_t v13 = v64;
  while (1)
  {
    char v53 = v52;
    uint64_t v49 = &dword_10027CD30[v50];
    if (!sub_100068A20(*(void *)(a1 + 64), *v49)) {
      goto LABEL_95;
    }
    uint64_t v54 = *v49;
    if (v54 != 138) {
      break;
    }
    if ((v51 & 1) == 0) {
      goto LABEL_93;
    }
LABEL_95:
    char v52 = 0;
    uint64_t v50 = 1;
    if ((v53 & 1) == 0) {
      goto LABEL_53;
    }
  }
  if ((v54 - 142) < 0x18) {
    char v55 = v51;
  }
  else {
    char v55 = 0;
  }
  if (v55) {
    goto LABEL_95;
  }
LABEL_93:
  int v56 = sub_100119964(a1, v54);
  if (v19 && v56) {
    goto LABEL_95;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIGRATION: Selecting 5G  channel :%d  AwdlActive: %d", *v49, v61);
  }
LABEL_79:
  CFNumberRef v37 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v49);
  if (v37)
  {
LABEL_58:
    CFDictionarySetValue(v13, @"CHANNEL", v37);
    if (Mutable) {
      CFRelease(Mutable);
    }
    char v40 = 1;
    CFStringRef Mutable = (const __CFString *)v37;
    a2 = v65;
    goto LABEL_61;
  }
LABEL_53:
  char v40 = 0;
  char v41 = 0;
  a2 = v65;
  if (Mutable)
  {
LABEL_61:
    CFRelease(Mutable);
    char v41 = v40;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "MIGRATION:%s: END print request  dictionary %@ and hostAPDict: %@", "WiFiDeviceManagerStartWiFiDirectGroup", v63, v13 message];
  }
  if (v41)
  {
LABEL_65:
    uint64_t v43 = sub_1000640EC(*(void *)(a1 + 64), a2, v13, (uint64_t)sub_1001184D0, (uint64_t)v11);
    if (v43)
    {
      uint64_t v44 = v43;
      uint64_t v68 = 0;
      memset(v67, 0, sizeof(v67));
      DWORD1(v67[0]) = 15;
      sub_10010E020(a1, (uint64_t)v67);
      double v45 = (const void *)v11[3];
      if (v45) {
        CFRelease(v45);
      }
      free(v11);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: aborting ongoing auto-join on network start", "WiFiDeviceManagerStartWiFiDirectGroup"];
      }
      sub_100102284(a1);
      uint64_t v44 = 0;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"MIGRATION:%s: SoftAP failed to start" args:("WiFiDeviceManagerStartWiFiDirectGroup", nil)];
    }
    uint64_t v44 = 4294963394;
  }
  CFRelease(v13);
  return v44;
}

void sub_1001184D0(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v7 = (uint64_t)*a4;
  uint64_t v8 = sub_100019658((int)kCFAllocatorDefault, a4[3]);
  if (!v8)
  {
    if (!a3) {
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v16 = 0;
    memset(v15, 0, sizeof(v15));
    DWORD1(v15[0]) = 16;
    v11.n128_f64[0] = sub_10010E020(v7, (uint64_t)v15);
    goto LABEL_11;
  }
  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a4 + 4);
  if (v9)
  {
    CFNumberRef v10 = v9;
    sub_10001C6A4((uint64_t)v8, @"networkRole", v9);
    CFRelease(v10);
  }
  if (a3) {
    goto LABEL_7;
  }
  CFSetAddValue(*(CFMutableSetRef *)(v7 + 3320), v8);
LABEL_8:
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: aborting ongoing auto-join on network start", @"__WiFiDeviceManagerClientStartWiFiDirectGroupCallback"];
  }
  sub_100102284(v7);
LABEL_11:
  uint64_t v13 = (void (*)(void, void, void, void, void, void, __n128))a4[1];
  if (v13) {
    v13(v7, a2, a3, v8, 0, a4[5], v11);
  }
  CFTypeRef v14 = a4[3];
  if (v14)
  {
    CFRelease(v14);
    a4[3] = 0;
  }
  if (v8) {
    CFRelease(v8);
  }

  free(a4);
}

void sub_100118658(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a4;
  uint64_t v5 = (void (*)(void, uint64_t, uint64_t, void, void))a4[1];
  if (v5) {
    v5(*a4, a2, a3, 0, a4[3]);
  }
  uint64_t v7 = (const void *)a4[2];
  if (v7)
  {
    if (CFSetContainsValue(*(CFSetRef *)(v6 + 3320), v7)) {
      CFSetRemoveValue(*(CFMutableSetRef *)(v6 + 3320), (const void *)a4[2]);
    }
    uint64_t v8 = (const void *)a4[2];
    if (v8) {
      CFRelease(v8);
    }
  }

  free(a4);
}

uint64_t sub_1001186D0(uint64_t a1, const __CFString *a2, int a3, const void *a4, uint64_t a5, uint64_t a6, const void *a7)
{
  if (a3 == 1) {
    return sub_100117974(a1, a2, a4, a5, a6);
  }
  if ((a3 & 0xFFFFFFFE) == 2) {
    return sub_100117CFC(a1, a2, (const __CFDictionary *)a4, a5, a6);
  }
  if (a3 == 4) {
    return sub_100118728(a1, a2, (const __CFDictionary *)a4, a5, a6, a7);
  }
  return 4294963396;
}

uint64_t sub_100118728(uint64_t a1, const __CFString *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, const void *a6)
{
  if (!a1) {
    return 4294963396;
  }
  if (sub_10010EC7C(a1, 2))
  {
    if (!sub_10006F058(*(void *)(a1 + 64), a2))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: AWDL bringup requested while link state is down." arguments:("WiFiDeviceManagerStartAwdl")];
      }
    }
    if (!*(_DWORD *)(a1 + 5416))
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: unable to start AWDL, thermal index (%d) is below disabled threshold (%d).", "WiFiDeviceManagerStartAwdl", *(unsigned int *)(a1 + 5416), 0)];
      }
      goto LABEL_33;
    }
    if (*(unsigned char *)(a1 + 3408) && CFDictionaryGetValue(a3, @"APPLE80211KEY_AWDL_INFO_ASSISTED_DISCOVERY_FOLLOW"))
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: unable to start AWDL in follow mode, VoIP Call Active.", "WiFiDeviceManagerStartAwdl")];
      }
      CFTypeRef v14 = v13;
      goto LABEL_34;
    }
    if (*(void *)(a1 + 5408))
    {
      if (([*(id *)(a1 + 5408) isPowerResourceAvailable:1] & 1) == 0)
      {
        CFNumberRef v26 = malloc_type_malloc(0x38uLL, 0x10E0040400D9003uLL);
        if (v26)
        {
          CFNumberRef v27 = v26;
          void *v26 = a1;
          v26[1] = a4;
          v26[5] = a5;
          long long v26[2] = CFRetain(a2);
          if (a3) {
            CFTypeRef v28 = CFRetain(a3);
          }
          else {
            CFTypeRef v28 = 0;
          }
          v27[3] = v28;
          *((_DWORD *)v27 + 8) = 4;
          if (a6) {
            CFTypeRef v32 = CFRetain(a6);
          }
          else {
            CFTypeRef v32 = 0;
          }
          v27[6] = v32;
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFiBatteryMgmt :  Power module is attached - checking for resource availability before starting AWDL.", "WiFiDeviceManagerStartAwdl")];
          }
          uint64_t v16 = (uint64_t)[*(id *)(a1 + 5408) requestPowerResource:1 withDetails:v27];
          if (v16)
          {
            CFDateRef v34 = (const void *)v27[2];
            if (v34)
            {
              CFRelease(v34);
              v27[2] = 0;
            }
            uint64_t v35 = (const void *)v27[3];
            if (v35)
            {
              CFRelease(v35);
              v27[3] = 0;
            }
            BOOL v36 = (const void *)v27[6];
            if (v36)
            {
              CFRelease(v36);
              v27[6] = 0;
            }
            free(v27);
          }
        }
        else
        {
          return 4294963395;
        }
        return v16;
      }
    }
    int v18 = sub_10006F1D0(*(void *)(a1 + 64), a2, 0);
    int v19 = v18;
    if (a3)
    {
      if (*(_DWORD *)(a1 + 5424))
      {
        if (v18)
        {
          if (CFDictionaryGetValue(a3, @"AWDL_INFO_ASSISTED_DISCOVERY_METRIC"))
          {
            if (!sub_1001116C8(a1))
            {
              if (sub_1001116F0(a1))
              {
                CFAbsoluteTime v38 = sub_1001195F0(a1, 2);
                if (v38)
                {
                  uint64_t v39 = v38;
                  if (sub_100119218(a1, a2, v38, 0, 0))
                  {
                    CFRelease(v39);
                    if (qword_10027DD68) {
                      [((id)qword_10027DD68) WFLog:3 message:@"%s: Error trying to stop AWDL in Follow Mode." arguments:("WiFiDeviceManagerStartAwdl", "WiFiDeviceManagerStartAwdl")];
                    }
                  }
                  else
                  {
                    CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 3320), v39);
                    if (qword_10027DD68) {
                      [((id)qword_10027DD68) WFLog:3 message:@"%s: AWDL in Follow Mode. Exit Follow Mode" args:("WiFiDeviceManagerStartAwdl", 0)];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (*(_DWORD *)(a1 + 5424) && v19)
    {
      if (a3
        && CFDictionaryGetValue(a3, @"APPLE80211KEY_AWDL_INFO_ASSISTED_DISCOVERY_FOLLOW")
        && sub_1001116C8(a1))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: AWDL is already started in Assisted Discovery. Follow Mode not allowed. Refcount=%d", "WiFiDeviceManagerStartAwdl", *(unsigned int *)(a1 + 5424), v50];
        }
LABEL_33:
        CFTypeRef v14 = v20;
LABEL_34:
        return 4294963366;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL is already started. Refcount=%d. Invoking client network started callback.", "WiFiDeviceManagerStartAwdl", *(unsigned int *)(a1 + 5424));
      }
      if (*(void *)(a1 + 240))
      {
        v52[0] = 0;
        v52[1] = v52;
        v52[2] = 0x2020000000;
        CFTypeRef v53 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        CFTypeRef v53 = CFRetain(a2);
        CFRetain((CFTypeRef)a1);
        uint64_t v30 = *(NSObject **)(a1 + 240);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10011971C;
        block[3] = &unk_10023EBE8;
        void block[4] = v52;
        void block[5] = a1;
        void block[6] = a4;
        void block[7] = a5;
        dispatch_async(v30, block);
        _Block_object_dispose(v52, 8);
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." args:("WiFiDeviceManagerStartAwdl", 0x0)];
        }
      }
      goto LABEL_92;
    }
    if (sub_10010EC7C(a1, 2))
    {
      if (!sub_10006F058(*(void *)(a1 + 64), a2))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: AWDL bringup requested while link state is down.", @"__WiFiDeviceManagerRequestAwdlBringup"];
        }
      }
      CFArrayRef v23 = malloc_type_malloc(0x38uLL, 0x10E0040400D9003uLL);
      if (v23)
      {
        uint64_t v24 = (uint64_t)v23;
        *CFArrayRef v23 = a1;
        v23[1] = a4;
        v23[5] = a5;
        if (a3) {
          CFTypeRef v25 = CFRetain(a3);
        }
        else {
          CFTypeRef v25 = 0;
        }
        *(void *)(v24 + 24) = v25;
        *(_DWORD *)(v24 + 32) = 4;
        if (a6) {
          CFTypeRef v41 = CFRetain(a6);
        }
        else {
          CFTypeRef v41 = 0;
        }
        *(void *)(v24 + 48) = v41;
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: hosting AWDL session. Aborting auto-join", "__WiFiDeviceManagerRequestAwdlBringup")];
        }
        sub_100102284(a1);
        sub_100070310(*(void *)(a1 + 64));
        uint64_t v43 = sub_100065144(*(void *)(a1 + 64), a2, a3, (uint64_t)sub_100144E10, v24, a6);
        if (!v43)
        {
          *(unsigned char *)(a1 + 5429) = 1;
          sub_100100A60((char *)a1, 2, 1);
LABEL_92:
          ++*(_DWORD *)(a1 + 5424);
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL refCount is now [%d].", "WiFiDeviceManagerStartAwdl", *(unsigned int *)(a1 + 5424));
          }
          if (*(_DWORD *)(a1 + 5424) != 1) {
            return 0;
          }
          CFNumberRef v48 = *(void **)(a1 + 5432);
          if (v48) {

          }
          uint64_t v16 = 0;
          *(void *)(a1 + 5432) = sub_10000D990((uint64_t)"WiFiDeviceManagerStartAwdl");
          return v16;
        }
        uint64_t v16 = v43;
        uint64_t v44 = *(const void **)(v24 + 24);
        if (v44)
        {
          CFRelease(v44);
          *(void *)(v24 + 24) = 0;
        }
        double v45 = *(const void **)(v24 + 48);
        if (v45) {
          CFRelease(v45);
        }
        free((void *)v24);
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: error bringing up AWDL session. Re-enabling auto-join", "__WiFiDeviceManagerRequestAwdlBringup")];
        }
        *(_DWORD *)(a1 + 192) = 10;
        if (_os_feature_enabled_impl())
        {
          sub_10001FD64(a1, 9uLL);
        }
        else
        {
          [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:9 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
          sub_1001028E4(a1, 2, (uint64_t)"__WiFiDeviceManagerRequestAwdlBringup");
        }
      }
      else
      {
        uint64_t v16 = 4294963395;
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: unable to start AWDL due to concurrency.", @"__WiFiDeviceManagerRequestAwdlBringup"];
      }
      uint64_t v16 = 82;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: error bringing up AWDL (=%d)", @"WiFiDeviceManagerStartAwdl", v16];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: unable to start AWDL due to concurrency.", "WiFiDeviceManagerStartAwdl")];
    }
    return 82;
  }
  return v16;
}

void sub_100118FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100118FBC(uint64_t a1, const void *a2, int a3, uint64_t a4, uint64_t a5)
{
  int valuePtr = 0;
  if (a3 == 2) {
    int v9 = 3;
  }
  else {
    int v9 = a3;
  }
  CFArrayRef v10 = sub_1001112DC(a1);
  if (!v10) {
    return 4294963394;
  }
  CFArrayRef v11 = v10;
  if (CFArrayGetCount(v10) < 1) {
    goto LABEL_11;
  }
  CFIndex v12 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v11, v12);
    if (ValueAtIndex)
    {
      uint64_t v14 = (uint64_t)ValueAtIndex;
      CFNumberRef v15 = (const __CFNumber *)sub_10001E404((uint64_t)ValueAtIndex, @"networkRole");
      if (v15)
      {
        CFNumberGetValue(v15, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr == v9) {
          break;
        }
      }
    }
    if (CFArrayGetCount(v11) <= ++v12) {
      goto LABEL_11;
    }
  }
  CFArrayRef v18 = (const __CFArray *)sub_10001961C((uint64_t)kCFAllocatorDefault, v14);
  if (v18)
  {
    CFArrayRef v19 = v18;
    uint64_t v16 = sub_1001190F4(a1, a2, v18, a4, a5);
    CFRelease(v11);
    CFArrayRef v11 = v19;
  }
  else
  {
LABEL_11:
    uint64_t v16 = 4294963394;
  }
  CFRelease(v11);
  return v16;
}

uint64_t sub_1001190F4(uint64_t a1, const void *a2, void *value, uint64_t a4, uint64_t a5)
{
  if (!value) {
    return 4294963396;
  }
  if (!CFSetContainsValue(*(CFSetRef *)(a1 + 3320), value)) {
    return 4294963396;
  }
  CFArrayRef v10 = CFSetGetValue(*(CFSetRef *)(a1 + 3320), value);
  CFNumberRef v11 = (const __CFNumber *)sub_10001E404((uint64_t)v10, @"networkRole");
  if (!v11) {
    return 4294963394;
  }
  int valuePtr = -1431655766;
  CFNumberGetValue(v11, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr == 1)
  {
    sub_100117B7C(a1, a2, (uint64_t)v10, a4, a5);
    return 0;
  }
  if ((valuePtr & 0xFFFFFFFE) == 2)
  {
    sub_10010D6A0(a1, a2, v10, a4, a5);
    return 0;
  }
  if (valuePtr == 4) {
    return sub_100119218(a1, a2, v10, a4, a5);
  }
  else {
    return 4294963396;
  }
}

uint64_t sub_100119218(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  int v5 = *(_DWORD *)(a1 + 5424);
  if (!v5) {
    return 4294963396;
  }
  *(_DWORD *)(a1 + 5424) = v5 - 1;
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL refCount is now [%d].", "WiFiDeviceManagerStopAwdl", *(unsigned int *)(a1 + 5424));
  }
  if (*(_DWORD *)(a1 + 5424))
  {
    if (a4 && *(void *)(a1 + 240))
    {
      CFRetain((CFTypeRef)a1);
      CFIndex v12 = *(NSObject **)(a1 + 240);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100119848;
      block[3] = &unk_100241698;
      void block[4] = a1;
      void block[5] = a4;
      int v23 = 0;
      void block[6] = a2;
      void block[7] = a5;
      dispatch_async(v12, block);
    }
    return 0;
  }
  else
  {
    uint64_t v14 = *(void **)(a1 + 5432);
    if (v14) {

    }
    *(void *)(a1 + 5432) = 0;
    CFNumberRef v15 = malloc_type_malloc(0x20uLL, 0xA004088793A40uLL);
    if (v15)
    {
      uint64_t v16 = v15;
      *CFNumberRef v15 = a1;
      v15[1] = a4;
      v15[3] = a5;
      if (a3) {
        CFTypeRef v17 = CFRetain(a3);
      }
      else {
        CFTypeRef v17 = 0;
      }
      v16[2] = v17;
      uint64_t v13 = sub_100065228(*(void *)(a1 + 64), a2, a3, (uint64_t)sub_100145008, (uint64_t)v16);
      *(_DWORD *)(a1 + 192) = 11;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: hosted AWDL session is down. Triggering auto-join", @"__WiFiDeviceManagerRequestAwdlTeardown"];
      }
      if (_os_feature_enabled_impl())
      {
        sub_10001FD64(a1, 9);
        if (!v13) {
          return v13;
        }
      }
      else
      {
        [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:9 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
        sub_1001028E4(a1, 2, (uint64_t)"__WiFiDeviceManagerRequestAwdlTeardown");
        if (!v13) {
          return v13;
        }
      }
      CFArrayRef v19 = (const void *)v16[2];
      if (v19) {
        CFRelease(v19);
      }
      free(v16);
    }
    else
    {
      uint64_t v13 = 4294963395;
    }
    sub_100100A60((char *)a1, 2, 0);
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: error tearing down AWDL (=%d)", "WiFiDeviceManagerStopAwdl", v13];
    }
  }
  return v13;
}

uint64_t sub_1001194C4(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v2 = 0;
  if (a1 && theArray)
  {
    if (CFArrayGetCount(theArray) < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v2 = 0;
      CFIndex v5 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, v5);
        if (ValueAtIndex)
        {
          uint64_t v7 = ValueAtIndex;
          CFNumberRef v8 = sub_1000C6FC0((uint64_t)ValueAtIndex, @"networkRole");
          uint64_t v9 = *(void *)(a1 + 64);
          if (v8 == (const __CFNumber *)4)
          {
            CFArrayRef v10 = (const void *)sub_10005FC0C(v9);
            uint64_t v2 = sub_1001190F4(a1, v10, v7, 0, 0);
          }
          else
          {
            CFNumberRef v11 = (const void *)sub_100017C48(v9);
            uint64_t v2 = sub_1001190F4(a1, v11, v7, 0, 0);
            if (!v2)
            {
              if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFFELL) == 2)
              {
                *(unsigned char *)(a1 + 5219) = 0;
                sub_100100A60((char *)a1, 4, 0);
              }
              uint64_t v2 = 0;
            }
          }
        }
        ++v5;
      }
      while (v5 < CFArrayGetCount(theArray));
    }
  }
  return v2;
}

_WORD *sub_1001195F0(uint64_t a1, int a2)
{
  CFArrayRef v3 = sub_1001112DC(a1);
  if (!v3) {
    return 0;
  }
  CFArrayRef v4 = v3;
  int valuePtr = -1431655766;
  if (CFArrayGetCount(v3) < 1)
  {
LABEL_13:
    CFNumberRef v11 = 0;
    goto LABEL_14;
  }
  CFIndex v5 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
    if (!ValueAtIndex) {
      goto LABEL_12;
    }
    uint64_t v7 = (uint64_t)ValueAtIndex;
    CFNumberRef v8 = (const __CFNumber *)sub_10001E404((uint64_t)ValueAtIndex, @"networkRole");
    if (!v8) {
      goto LABEL_12;
    }
    CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
    if (valuePtr != 4) {
      goto LABEL_12;
    }
    if (a2 == 2) {
      break;
    }
    if (a2 == 1)
    {
      uint64_t v9 = v7;
      CFArrayRef v10 = @"AWDL_INFO_ASSISTED_DISCOVERY_METRIC";
      goto LABEL_11;
    }
LABEL_12:
    if (CFArrayGetCount(v4) <= ++v5) {
      goto LABEL_13;
    }
  }
  uint64_t v9 = v7;
  CFArrayRef v10 = @"APPLE80211KEY_AWDL_INFO_ASSISTED_DISCOVERY_FOLLOW";
LABEL_11:
  if (!sub_10001E404(v9, v10)) {
    goto LABEL_12;
  }
  CFNumberRef v11 = sub_10001961C((uint64_t)kCFAllocatorDefault, v7);
LABEL_14:
  CFRelease(v4);
  return v11;
}

void sub_10011971C(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  if (v2[30])
  {
    CFArrayRef v3 = sub_10001C1B4(v2[8], *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    int valuePtr = 4;
    if (v3)
    {
      CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
      if (v4)
      {
        CFNumberRef v5 = v4;
        sub_10001C6A4((uint64_t)v3, @"networkRole", v4);
        CFRelease(v5);
      }
    }
    uint64_t v6 = *(void (**)(void, void, uint64_t, const void *, void, void))(a1 + 48);
    if (v6)
    {
      if (v3) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = 4294963395;
      }
      v6(*(void *)(a1 + 40), *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v7, v3, 0, *(void *)(a1 + 56));
    }
    CFRelease(*(CFTypeRef *)(a1 + 40));
    CFNumberRef v8 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
    if (v3) {
      CFRelease(v3);
    }
  }
  else
  {
    CFRelease(v2);
    uint64_t v9 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
  }
}

void sub_100119848(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[30])
  {
    (*(void (**)(void))(a1 + 40))();
    uint64_t v2 = *(void **)(a1 + 32);
  }

  CFRelease(v2);
}

uint64_t sub_10011989C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4440) = a2;
  *(void *)(result + 4448) = a3;
  return result;
}

uint64_t sub_1001198A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4504) = a2;
  *(void *)(result + 4512) = a3;
  return result;
}

uint64_t sub_1001198B4(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 344) = a2;
  return 0;
}

uint64_t sub_1001198C0(uint64_t a1, uint64_t a2, double a3)
{
  if (a1 && (*(void *)(a1 + 392) != a2 || *(double *)(a1 + 384) != a3))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 2, "scan throttle set to %ld over %f seconds", a2, *(void *)&a3);
    }
    *(void *)(a1 + 392) = a2;
    *(double *)(a1 + 384) = a3;
  }
  return 0;
}

uint64_t sub_100119964(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: invalid channel %d", "WiFiDeviceManagerIsChannelCoexBlacklisted", 0];
    }
    goto LABEL_21;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null deviceManager", "WiFiDeviceManagerIsChannelCoexBlacklisted", v10];
    }
    goto LABEL_21;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + 56);
  if (!v3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null blacklistedChannels", "WiFiDeviceManagerIsChannelCoexBlacklisted", v10);
    }
LABEL_21:
    return 0;
  }
  CFNumberRef value = 0;
  int valuePtr = 0;
  if (CFArrayGetCount(v3) < 1) {
    return 0;
  }
  CFIndex v5 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v5);
    if (ValueAtIndex)
    {
      CFDictionaryGetValueIfPresent(ValueAtIndex, @"MWS_Channel_Number", (const void **)&value);
      if (value)
      {
        CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
        if (valuePtr == a2) {
          break;
        }
      }
    }
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) <= ++v5) {
      return 0;
    }
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, @"%s: channel %d is a deny-listed coex channel", @"WiFiDeviceManagerIsChannelCoexBlacklisted", a2];
  }
  return 1;
}

uint64_t sub_100119B00(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = malloc_type_malloc(0x18uLL, 0xA00402214FCE6uLL);
  void *v10 = a1;
  v10[1] = a4;
  void v10[2] = a5;
  uint64_t v11 = sub_10006F920(*(void *)(a1 + 64), a2, a3, 0, (uint64_t)sub_100119BA0, (uint64_t)v10);
  if (v11) {
    free(v10);
  }
  return v11;
}

void sub_100119BA0(int a1, uint64_t a2, CFArrayRef theArray, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10 = *a6;
  if (theArray && CFArrayGetCount(theArray)) {
    sub_100144754(v10, theArray);
  }
  uint64_t v11 = (void (*)(uint64_t, uint64_t, CFArrayRef, uint64_t, uint64_t))a6[1];
  if (v11) {
    v11(v10, a2, theArray, a5, a6[2]);
  }

  free(a6);
}

void sub_100119C30(uint64_t a1, const void *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager", @"__WiFiDeviceManagerFindMergeHS20Account"];
    }
    goto LABEL_27;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 3624));
  uint64_t v5 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3632)) + Count;
  if (!v5)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: No HS2.0 accounts", @"__WiFiDeviceManagerFindMergeHS20Account"];
    }
LABEL_27:
    return;
  }
  MutableCFStringRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, *(CFArrayRef *)(a1 + 3624));
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 3632)))
  {
    CFArrayRef v7 = *(const __CFArray **)(a1 + 3632);
    v14.length = CFArrayGetCount(v7);
    v14.location = 0;
    CFArrayAppendArray(MutableCopy, v7, v14);
  }
  if (!a2 || sub_1000CCA08((uint64_t)a2) || v5 < 1)
  {
LABEL_17:
    if (MutableCopy)
    {
LABEL_18:
      CFRelease(MutableCopy);
    }
  }
  else
  {
    CFIndex v8 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(MutableCopy, v8);
      if (ValueAtIndex)
      {
        uint64_t v10 = ValueAtIndex;
        if (!sub_1000C95F4(ValueAtIndex))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: provisioned HS2.0 account %@ has no credentials.", "__WiFiDeviceManagerFindMergeHS20Account", sub_10001A43C(v10) message];
          }
          goto LABEL_17;
        }
        if (sub_1000CCC50(a2, v10)) {
          break;
        }
      }
      if (v5 == ++v8) {
        goto LABEL_17;
      }
    }
    sub_1000CC9E0((uint64_t)a2, 1);
    sub_1000C63FC((uint64_t)a2, (uint64_t)v10);
    if (MutableCopy) {
      goto LABEL_18;
    }
  }
}

uint64_t sub_100119E54(uint64_t a1, uint64_t a2, uint64_t a3, const __CFArray *a4)
{
  return sub_10006F9D0(*(void *)(a1 + 64), a2, a3, a4);
}

uint64_t sub_100119E5C(uint64_t a1, uint64_t a2)
{
  return sub_100065DEC(*(void *)(a1 + 64), a2);
}

uint64_t sub_100119E64(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10006FD8C(*(void *)(a1 + 64), a2, a3, a4);
}

uint64_t sub_100119E6C(uint64_t a1, const void *a2, const __CFArray *a3, uint64_t a4, uint64_t a5, double a6)
{
  CFIndex v12 = malloc_type_malloc(0x18uLL, 0xA00402214FCE6uLL);
  if (CFArrayGetCount(a3) >= 1)
  {
    CFIndex v13 = 0;
    int v14 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v13);
      if (ValueAtIndex)
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"APPLE80211KEY_AWDL_INFO_ASSISTED_DISCOVERY_FOLLOW");
        if (Value)
        {
          char valuePtr = -86;
          CFNumberGetValue(Value, kCFNumberSInt8Type, &valuePtr);
          if (valuePtr) {
            int v14 = 1;
          }
        }
      }
      ++v13;
    }
    while (CFArrayGetCount(a3) > v13);
    if (*(unsigned char *)(a1 + 3408) && v14)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: unable to start Ranging in follow mode, VoIP Call Active.", "WiFiDeviceManagerRangingStartAsync")];
      }
      goto LABEL_15;
    }
    if (v14 && sub_1001116C8(a1))
    {
LABEL_15:
      uint64_t v18 = 4294963366;
LABEL_17:
      free(v12);
      return v18;
    }
  }
  *CFIndex v12 = a1;
  v12[1] = a4;
  unsigned int v12[2] = a5;
  uint64_t v18 = sub_10006FCA8(*(void *)(a1 + 64), a2, a3, (uint64_t)sub_10011A05C, (uint64_t)v12, a6);
  if (v18) {
    goto LABEL_17;
  }
  if (a3 && *(void *)(a1 + 7368))
  {
    if (CFArrayGetCount(a3))
    {
      id v20 = [[-[__CFArray objectAtIndex:](a3, "objectAtIndex:", 0) objectForKey:@"RANGING_NUM_MEASUREMENTS"];
      uint64_t v21 = *(void **)(a1 + 7368);
      if (v20) {
        id v22 = [v20 unsignedIntegerValue];
      }
      else {
        id v22 = 0;
      }
      [v21 rangingStartedWithNumMeasurements:v22];
    }
    return 0;
  }
  return v18;
}

void sub_10011A05C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = (void (*)(void, uint64_t, uint64_t, uint64_t, void))a5[1];
  if (v6) {
    v6(*a5, a2, a3, a4, a5[2]);
  }

  free(a5);
}

uint64_t sub_10011A0A4(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager." arguments:("WiFiDeviceManagerSetThermalIndex", 0)];
    }
    uint64_t v16 = v15;
    goto LABEL_31;
  }
  if (*(_DWORD *)(a1 + 5416) == a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: thermal index unchanged (%d).", "WiFiDeviceManagerSetThermalIndex", a2);
    }
    uint64_t v16 = v17;
LABEL_31:
    return 0;
  }
  *(_DWORD *)(a1 + 5416) = a2;
  sub_10011A354(a1, 1);
  if (*(_DWORD *)(a1 + 5416))
  {
    if (*(unsigned char *)(a1 + 3305))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:@"%s: resource has become available for auto-join. Triggering auto-join..." message:3];
      }
      if (_os_feature_enabled_impl())
      {
        sub_10001FD64(a1, 0x16uLL);
      }
      else
      {
        [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:22 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
        sub_1001028E4(a1, 2, (uint64_t)"WiFiDeviceManagerSetThermalIndex");
      }
    }
  }
  else
  {
    uint64_t v5 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    uint64_t v6 = sub_100018FA8(a1, v5, 1);
    if (v6)
    {
      CFArrayRef v7 = v6;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: resource no longer available for association. Disassociating...", "WiFiDeviceManagerSetThermalIndex")];
      }
      uint64_t v9 = (const void *)sub_100017C48(*(void *)(a1 + 64));
      sub_1000FEA7C(a1, v9, 1006, "WiFiDeviceManagerSetThermalIndex", 27426);
      CFRelease(v7);
    }
    if (*(unsigned char *)(a1 + 3305))
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: resource no longer available for auto-join. Aborting...", "WiFiDeviceManagerSetThermalIndex");
      }
      sub_100102284(a1);
    }
    if (*(_DWORD *)(a1 + 5424))
    {
      uint64_t v11 = *(void **)(a1 + 5432);
      if (v11) {

      }
      *(void *)(a1 + 5432) = 0;
      CFIndex v12 = (const void *)sub_10005FC0C(*(void *)(a1 + 64));
      sub_100101DF0(a1, v12);
    }
  }
  uint64_t v13 = *(void *)(a1 + 64);

  return sub_10006FF30(v13, a2);
}

void sub_10011A354(uint64_t a1, int a2)
{
  if (!*(void *)(a1 + 4440)) {
    return;
  }
  CFStringRef v4 = (const __CFString *)sub_10005FC0C(*(void *)(a1 + 64));
  uint64_t v5 = sub_1001113B4(a1, v4);
  if (!v5) {
    return;
  }
  uint64_t v6 = v5;
  MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v5);
  CFRelease(v6);
  if (!MutableCopy) {
    return;
  }
  uint64_t v8 = *(void *)(a1 + 64);
  CFStringRef v9 = (const __CFString *)sub_10005FC0C(v8);
  int v10 = sub_10006F058(v8, v9);
  int v11 = 0;
  if (a2) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = *(void *)(a1 + 5408) == 0;
  }
  int v13 = v12;
  if (v10 && v13) {
    int v11 = *(_DWORD *)(a1 + 5416) != 0;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(MutableCopy, @"LINK_CHANGED_IS_AVAILABLE");
  if (!Value)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: availabilityRef was NULL, so sending the awdl state info to client.", "__WiFiDeviceManagerUpdateInterfaceAvailability")];
    }
    goto LABEL_20;
  }
  if (CFBooleanGetValue(Value) != v11)
  {
LABEL_20:
    uint64_t v16 = (const void **)&kCFBooleanTrue;
    if (!v11) {
      uint64_t v16 = (const void **)&kCFBooleanFalse;
    }
    CFDictionarySetValue(MutableCopy, @"LINK_CHANGED_IS_AVAILABLE", *v16);
    CFTypeRef v17 = *(void (**)(uint64_t, int64_t, void, const __CFDictionary *))(a1 + 4440);
    int64_t v18 = sub_10005FC0C(*(void *)(a1 + 64));
    v17(a1, v18, *(void *)(a1 + 4448), MutableCopy);
  }

  CFRelease(MutableCopy);
}

uint64_t sub_10011A4E8(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, CFMutableDictionaryRef *a4)
{
  int valuePtr = -1431655766;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugModule");
  if (!Value) {
    return sub_100070508(*(void *)(a1 + 64), a2, theDict, a4);
  }
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  switch(valuePtr)
  {
    case 3:
      if (!a1)
      {
        uint64_t v83 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_62;
        }
        id v84 = "__WiFiDeviceManagerDebugAutoJoin";
        goto LABEL_178;
      }
      if (theDict)
      {
        CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommand");
        if (!v9) {
          return 4294963396;
        }
        unsigned int v94 = -1431655766;
        CFNumberGetValue(v9, kCFNumberIntType, &v94);
        switch(v94)
        {
          case 0u:
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4 message:"Dumping Auto-Join Stats"];
            }
            MutableCFStringRef Copy = sub_1001450A8((id *)a1);
            goto LABEL_41;
          case 1u:
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4 message:"Reset Auto-Join Stats"];
            }
            bzero((void *)(a1 + 5616), 0x238uLL);
            goto LABEL_156;
          case 4u:
            *(unsigned char *)(a1 + 34) = 0;
            char v65 = (void *)qword_10027DD68;
            if (!qword_10027DD68) {
              goto LABEL_103;
            }
            BOOL v66 = "Enabled Periodic 5Ghz Scan";
            goto LABEL_102;
          case 5u:
            *(unsigned char *)(a1 + 34) = 1;
            char v65 = (void *)qword_10027DD68;
            if (!qword_10027DD68) {
              goto LABEL_103;
            }
            BOOL v66 = "Disabled Periodic 5Ghz Scan";
            goto LABEL_102;
          case 6u:
            *(unsigned char *)(a1 + 5609) = 0;
            char v65 = (void *)qword_10027DD68;
            if (!qword_10027DD68) {
              goto LABEL_103;
            }
            BOOL v66 = "Considering geotags for 5Ghz Scan";
            goto LABEL_102;
          case 7u:
            *(unsigned char *)(a1 + 5609) = 1;
            char v65 = (void *)qword_10027DD68;
            if (!qword_10027DD68) {
              goto LABEL_103;
            }
            BOOL v66 = "Not considering geotags for 5Ghz Scan";
LABEL_102:
            [v65 WFLog:3 message:v66];
LABEL_103:
            CFNumberRef v67 = v64;
            goto LABEL_155;
          case 8u:
            unsigned int v93 = 0;
            CFNumberRef v68 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommandValueDict");
            if (v68 && CFNumberGetValue(v68, kCFNumberSInt32Type, &v93))
            {
              *(_DWORD *)(a1 + 132) = v93;
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Using Debug Value for AutoJoinUnreliableNwRssiThres = %d", "__WiFiDeviceManagerDebugAutoJoin", v93);
              }
              goto LABEL_161;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s DebugCmdAutoJoinUnreliableNwRssiThres valRef is NULL" args:v91];
            }
            goto LABEL_18;
          case 9u:
            unsigned int v93 = 0;
            CFNumberRef v69 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommandValueDict");
            if (v69 && CFNumberGetValue(v69, kCFNumberSInt32Type, &v93))
            {
              *(_DWORD *)(a1 + 136) = v93;
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Using Debug Value for AutoJoinPnoRssiThres = %d", "__WiFiDeviceManagerDebugAutoJoin", v93);
              }
              goto LABEL_161;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:4, "%s DebugCmdAutoJoinPnoRssiThres valRef is NULL", "__WiFiDeviceManagerDebugAutoJoin", v91];
            }
            goto LABEL_18;
          case 0xAu:
            unsigned int v93 = 0;
            CFNumberRef v70 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommandValueDict");
            if (v70 && CFNumberGetValue(v70, kCFNumberSInt32Type, &v93))
            {
              *(_DWORD *)(a1 + 140) = v93;
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:@"%s Using Debug Value for AutoJoinDrivingRssiThres = %d" message:3, @"__WiFiDeviceManagerDebugAutoJoin", v93];
              }
              goto LABEL_161;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4, @"%s DebugCmdAutoJoinDrivingRssiThres valRef is NULL", @"__WiFiDeviceManagerDebugAutoJoin", v91];
            }
            goto LABEL_18;
          case 0xBu:
            if (!CFDictionaryContainsValue(theDict, @"DebugCommandValueDict"))
            {
              *(unsigned char *)(a1 + 36) = CFDictionaryGetValue(theDict, @"DebugCommandValueDict") == kCFBooleanTrue;
              if (qword_10027DD68)
              {
                if (*(unsigned char *)(a1 + 36)) {
                  uint64_t v72 = "Disabled";
                }
                else {
                  uint64_t v72 = "Enabled";
                }
                [((id)qword_10027DD68) WFLog:3, @"%s Using Debug Value for 24GhzAJScanDuringBTAndDriving: 2.4Ghz AJ Scans %s", @"__WiFiDeviceManagerDebugAutoJoin", v72];
              }
              goto LABEL_154;
            }
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s DebugCmdDisable24GhzAJScanDuringBTAndDriving no value", "__WiFiDeviceManagerDebugAutoJoin", v91);
            }
            goto LABEL_62;
          case 0xCu:
            unsigned int v93 = 0;
            CFNumberRef v73 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommandValueDict");
            if (!v73)
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4, @"%s DebugCmdAutoJoinDrivingRssiThres valRef is NULL", @"__WiFiDeviceManagerDebugAutoJoin", v91];
              }
              goto LABEL_62;
            }
            int v74 = CFNumberGetValue(v73, kCFNumberSInt32Type, &v93);
            if (v74)
            {
              if (qword_10027DD68)
              {
                CFDictionaryRef v76 = "YES";
                if (!v93) {
                  CFDictionaryRef v76 = "NO";
                }
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Using Debug Value for AutoJoinSimulateScanRSSI: Simulating:%s RSSI:%d", "__WiFiDeviceManagerDebugAutoJoin", v76, v93);
              }
              uint64_t v12 = 0;
              if (v93)
              {
                *(_DWORD *)(a1 + 44) = v93;
                *(unsigned char *)(a1 + 40) = 1;
              }
              else
              {
                *(_DWORD *)(a1 + 44) = 0;
                *(unsigned char *)(a1 + 40) = 0;
              }
              return v12;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4, @"%s DebugCmdAutoJoinDrivingRssiThres valRef is NULL", @"__WiFiDeviceManagerDebugAutoJoin"];
            }
            uint64_t v31 = v75;
            goto LABEL_63;
          case 0xDu:
            if (!CFDictionaryContainsValue(theDict, @"DebugCommandValueDict"))
            {
              *(unsigned char *)(a1 + 48) = CFDictionaryGetValue(theDict, @"DebugCommandValueDict") == kCFBooleanTrue;
              if (qword_10027DD68)
              {
                if (*(unsigned char *)(a1 + 48)) {
                  CFBooleanRef v77 = "On";
                }
                else {
                  CFBooleanRef v77 = "Off";
                }
                [((id)qword_10027DD68) WFLog:3, @"%s Using Debug Value for DebugCmdAutoJoinDrivingCarPlay: Carplay is %s", @"__WiFiDeviceManagerDebugAutoJoin", v77];
              }
              goto LABEL_154;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s DebugCmdAutoJoinDrivingCarPlay no value" :@"__WiFiDeviceManagerDebugAutoJoin" :v91];
            }
            goto LABEL_62;
          case 0xEu:
            if (!CFDictionaryContainsValue(theDict, @"DebugCommandValueDict"))
            {
              *(unsigned char *)(a1 + 49) = CFDictionaryGetValue(theDict, @"DebugCommandValueDict") == kCFBooleanTrue;
              if (qword_10027DD68)
              {
                if (*(unsigned char *)(a1 + 49)) {
                  CFTypeRef v78 = "On";
                }
                else {
                  CFTypeRef v78 = "Off";
                }
                [((id)qword_10027DD68) WFLog:message:3, "%s Using Debug Value for DebugCmdBTA2DPEnable: BTA2DP is %s", "__WiFiDeviceManagerDebugAutoJoin", v78];
              }
              goto LABEL_154;
            }
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s DebugCmdBTA2DPEnable no value", "__WiFiDeviceManagerDebugAutoJoin", v91);
            }
            goto LABEL_62;
          case 0xFu:
            if (!CFDictionaryContainsValue(theDict, @"DebugCommandValueDict"))
            {
              *(unsigned char *)(a1 + 37) = CFDictionaryGetValue(theDict, @"DebugCommandValueDict") == kCFBooleanTrue;
              if (qword_10027DD68)
              {
                if (*(unsigned char *)(a1 + 37)) {
                  char v79 = "Enabled";
                }
                else {
                  char v79 = "Disabled";
                }
                [((id)qword_10027DD68) WFLog:3, @"%s Using Debug Value for DebugCmdAutoJoinBTSCODisable: AJ Scans for BTSCO %s", @"__WiFiDeviceManagerDebugAutoJoin", v79];
              }
              goto LABEL_154;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:4, "%s DebugCmdAutoJoinBTSCODisable no value", "__WiFiDeviceManagerDebugAutoJoin", v91];
            }
            goto LABEL_62;
          case 0x10u:
            if (CFDictionaryContainsValue(theDict, @"DebugCommandValueDict"))
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4, "%s DebugCmdBTSCOEnable no value", "__WiFiDeviceManagerDebugAutoJoin", v91];
              }
              goto LABEL_62;
            }
            *(unsigned char *)(a1 + 50) = CFDictionaryGetValue(theDict, @"DebugCommandValueDict") == kCFBooleanTrue;
            if (qword_10027DD68)
            {
              if (*(unsigned char *)(a1 + 50)) {
                uint64_t v80 = "On";
              }
              else {
                uint64_t v80 = "Off";
              }
              [((id)qword_10027DD68) WFLog:message:3, "%s Using Debug Value for DebugCmdBTSCOEnable: BTSCO is %s", "__WiFiDeviceManagerDebugAutoJoin", v80];
            }
LABEL_154:
            CFNumberRef v67 = v71;
LABEL_155:
            goto LABEL_156;
          case 0x11u:
            unsigned int v93 = 0;
            CFNumberRef v81 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommandValueDict");
            if (!v81 || !CFNumberGetValue(v81, kCFNumberSInt32Type, &v93))
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4, @"%s DebugCmdTopNetworksRankLimit valRef is NULL", @"__WiFiDeviceManagerDebugAutoJoin", v91];
              }
              goto LABEL_18;
            }
            *(_DWORD *)(a1 + 144) = v93;
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:3, "%s Using Debug Value for DebugCmdTopNetworksRankLimit = %d", "__WiFiDeviceManagerDebugAutoJoin", v93];
            }
LABEL_161:
            uint64_t v12 = 0;
            break;
          default:
            goto LABEL_60;
        }
        goto LABEL_162;
      }
      unsigned int v85 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_62;
      }
      uint64_t v86 = "__WiFiDeviceManagerDebugAutoJoin";
      goto LABEL_193;
    case 5:
      if (!a1)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s manager is NULL" args:v91, @"__WiFiDeviceManagerDebugRoamMgr"];
        }
        goto LABEL_18;
      }
      if (!theDict)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s request is NULL" args:v91, @"__WiFiDeviceManagerDebugRoamMgr"];
        }
        goto LABEL_18;
      }
      CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommand");
      if (v13)
      {
        unsigned int v94 = -1431655766;
        if (CFNumberGetValue(v13, kCFNumberIntType, &v94))
        {
          unsigned int v14 = v94;
          if (v14)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4, @"%s: Unknown debug command %d", @"__WiFiDeviceManagerDebugRoamMgr", v94];
            }
LABEL_18:
            uint64_t v12 = 4294963396;
LABEL_162:
            int v62 = v15;
            goto LABEL_163;
          }
          id v38 = +[WiFiRoamManager sharedWiFiRoamManager];
          if (v38)
          {
            uint64_t v39 = v38;
            id v40 = [(__CFDictionary *)theDict valueForKey:@"DebugCommandValueDict"];
            if (v40)
            {
              CFTypeRef v41 = v40;
              [objc_msgSend(v40, "valueForKey:", @"minLinkUpWaitSec") doubleValue];
              double v43 = v42;
              [objc_msgSend(v41, "valueForKey:", @"minRetryWaitSec") doubleValue];
              double v45 = v44;
              id v46 = [[v41 valueForKey:@"maxRetriesSec"] integerValue];
              [objc_msgSend(v41, "valueForKey:", @"windowSizeSec") doubleValue];
              double v48 = v47;
              [v39 setParamMinRoamWaitTimeFromLinkUpInSec:v43];
              [v39 setParamMinRoamRetryWaitTime:v45];
              [v39 setParamMaxRoamRetriesInWindow:v46];
              [v39 setParamWindowSizeInSec:v48];
              uint64_t v12 = qword_10027DD68;
              if (qword_10027DD68)
              {
                [v39 paramMinRoamWaitTimeFromLinkUpInSec];
                uint64_t v51 = v50;
                [v39 paramMinRoamRetryWaitTime];
                uint64_t v53 = v52;
                id v54 = [v39 paramMaxRoamRetriesInWindow];
                [v39 paramWindowSizeInSec];
                [v12 WFLog:3 message:@"__WiFiDeviceManagerDebugRoamMgr: Configuring RoamManager paramMinRoamWaitTimeFromLinkUpInSec: %.1f paramMinRoamRetryWaitTime: %.1f paramMaxRoamRetriesInWindow: %d paramWindowSizeInSec: %.1f", v51, v53, v54, v55];
                uint64_t v12 = 0;
              }
              goto LABEL_80;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s kWiFiDebugCommandValueDict is NULL" args:("__WiFiDeviceManagerDebugRoamMgr", nil)];
            }
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s WiFiRoamManager is NULL" args:__WiFiDeviceManagerDebugRoamMgr];
            }
          }
          uint64_t v12 = 4294963396;
LABEL_80:
          goto LABEL_162;
        }
      }
      return 4294963396;
    case 6:
      if (!a1)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s manager is NULL" arguments:v91];
        }
        goto LABEL_26;
      }
      if (!theDict)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s request is NULL" args:("__WiFiDeviceManagerDebugSimulateWiFiAssistOverrideCondition", v91)];
        }
        goto LABEL_26;
      }
      CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommand");
      if (!v16) {
        return 4294963396;
      }
      unsigned int v94 = -1431655766;
      if (!CFNumberGetValue(v16, kCFNumberIntType, &v94)) {
        return 4294963396;
      }
      unsigned int v17 = v94;
      if (v17)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, "%s: Unknown debug command %d", "__WiFiDeviceManagerDebugSimulateWiFiAssistOverrideCondition", v94];
        }
LABEL_26:
        uint64_t v12 = 4294963396;
        goto LABEL_90;
      }
      id v56 = [(__CFDictionary *)theDict valueForKey:@"DebugCommandValueDict"];
      if (!v56)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s kWiFiDebugCommandValueDict is NULL", @"__WiFiDeviceManagerDebugSimulateWiFiAssistOverrideCondition"];
        }
        goto LABEL_26;
      }
      CFTypeRef v57 = v56;
      unsigned int v58 = [[objc_msgSend(v56, "valueForKey:", @"movingNetwork") intValue];
      unsigned int v59 = [[objc_msgSend(v57, "valueForKey:", @"edgeBssWalkout") intValue];
      unsigned int v60 = [[v57 valueForKey:@"badRepNetwork"] intValue];
      *(unsigned char *)(a1 + 54) = v60 != 0;
      *(unsigned char *)(a1 + 52) = v58 != 0;
      *(unsigned char *)(a1 + 53) = v59 != 0;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Simulating wifi-assist conditions badReputationNetwork:%d  movingNetwork:%d edgeBssWalkOut: %d", "__WiFiDeviceManagerDebugSimulateWiFiAssistOverrideCondition", *(unsigned __int8 *)(a1 + 54), *(unsigned __int8 *)(a1 + 52), *(unsigned __int8 *)(a1 + 53)];
      }
      if (v60 || v58 || v59)
      {
        uint64_t v12 = 0;
        *(unsigned char *)(a1 + 55) = 1;
      }
      else
      {
        uint64_t v12 = 0;
        *(unsigned char *)(a1 + 55) = 0;
      }
LABEL_90:
      int v62 = v18;
LABEL_163:
      return v12;
    case 8:
      if (!a1)
      {
        uint64_t v83 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_62;
        }
        id v84 = "__WiFiDeviceManagerDebugPH";
        goto LABEL_178;
      }
      if (!theDict)
      {
        unsigned int v85 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_62;
        }
        uint64_t v86 = "__WiFiDeviceManagerDebugPH";
        goto LABEL_193;
      }
      CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommand");
      if (!v19) {
        return 4294963396;
      }
      unsigned int v94 = -1431655766;
      CFNumberGetValue(v19, kCFNumberIntType, &v94);
      if (v94 == 1)
      {
        CFDictionaryRef v20 = *(const __CFDictionary **)(a1 + 7032);
        if (v20) {
          MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v20);
        }
        else {
          MutableCFStringRef Copy = 0;
        }
LABEL_41:
        uint64_t v12 = 0;
        *a4 = MutableCopy;
        return v12;
      }
      goto LABEL_60;
    case 10:
      sub_10011083C(a1, 0, 0);
      goto LABEL_156;
    case 13:
      if (!a4) {
        return 4294963396;
      }
      uint64_t v21 = *(void **)(a1 + 7368);
      if (!v21) {
        return 4294963393;
      }
      id v22 = [v21 summaryForInterface:a2];
      goto LABEL_40;
    case 15:
      if (!a4) {
        return 4294963396;
      }
      int v23 = *(void **)(a1 + 7368);
      if (!v23) {
        return 4294963393;
      }
      id v22 = [v23 lastBssSessionInfoForInterface:a2];
LABEL_40:
      MutableCFStringRef Copy = (__CFDictionary *)[v22 copy];
      goto LABEL_41;
    case 16:
      if (a1 && (uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 4552)) != 0) {
        v24(a1, 16, a2, *(void *)(a1 + 4560));
      }
      else {
        sub_100125B18(a1, -1);
      }
      goto LABEL_156;
    case 17:
      if (!a1)
      {
        uint64_t v83 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_62;
        }
        id v84 = "__WiFiDeviceManagerDebugSimulateBSP";
        goto LABEL_178;
      }
      if (!theDict)
      {
        unsigned int v85 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_62;
        }
        uint64_t v86 = "__WiFiDeviceManagerDebugSimulateBSP";
        goto LABEL_193;
      }
      CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommand");
      if (!v25) {
        return 4294963396;
      }
      unsigned int v94 = -1431655766;
      CFNumberGetValue(v25, kCFNumberIntType, &v94);
      CFDictionaryRef v26 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"DebugCommandValueDict");
      if (v26)
      {
        if (v94 > 0xE) {
          goto LABEL_60;
        }
        if (((1 << v94) & 0x703F) != 0)
        {
          sub_1000F3F74((int)v26, a2, a1, v26);
        }
        else
        {
          CFDateRef v34 = CFDictionaryGetValue(v26, @"BSP_CommandParams");
          uint64_t v35 = *(void *)(a1 + 64);
          BOOL v36 = (const void *)sub_100017C48(v35);
          sub_1000093F4(v35, v36, @"BSP_CommandParams", (uint64_t)v34);
        }
        goto LABEL_156;
      }
      uint64_t v87 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_62;
      }
      uint64_t v88 = v94;
      uint64_t v89 = "__WiFiDeviceManagerDebugSimulateBSP";
      goto LABEL_196;
    case 19:
      if (!a4) {
        return 4294963396;
      }
      if (!+[WiFiUserInteractionMonitor sharedInstance]) {
        return 4294963393;
      }
      id v27 = objc_alloc_init((Class)NSMutableDictionary);
      [v27 setObject:+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance") description forKeyedSubscript:@"description"];
      uint64_t v12 = 0;
      *a4 = (CFMutableDictionaryRef)v27;
      return v12;
    case 20:
      if (!a1)
      {
        uint64_t v83 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          id v84 = "__WiFiDeviceManagerDebugSimulateUCM";
LABEL_178:
          [v83 WFLog:4 message:@"%s manager is NULL" v84 v91];
        }
        goto LABEL_62;
      }
      if (!theDict)
      {
        unsigned int v85 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          uint64_t v86 = "__WiFiDeviceManagerDebugSimulateUCM";
LABEL_193:
          [v85 WFLog:4 message:@"%s request is NULL" args:v86, v91];
        }
        goto LABEL_62;
      }
      CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommand");
      if (!v28) {
        return 4294963396;
      }
      unsigned int v94 = -1431655766;
      CFNumberGetValue(v28, kCFNumberIntType, &v94);
      int v29 = CFDictionaryGetValue(theDict, @"DebugCommandValueDict");
      if (!v29)
      {
        uint64_t v87 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          uint64_t v88 = v94;
          uint64_t v89 = "__WiFiDeviceManagerDebugSimulateUCM";
LABEL_196:
          [v87 WFLog:4 message:@"%s dictRef for %d is NULL" v89 v88];
        }
        goto LABEL_62;
      }
      if (v94)
      {
LABEL_60:
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Unknown debug command %d", v94, v91);
        }
LABEL_62:
        uint64_t v31 = v30;
LABEL_63:
        return 4294963396;
      }
      CFNumberRef v37 = *(void (**)(uint64_t, uint64_t, void, const void *))(a1 + 4808);
      if (v37) {
        v37(a1, a2, *(void *)(a1 + 4816), v29);
      }
LABEL_156:
      uint64_t v12 = 0;
      break;
    case 21:
      CFTypeRef v32 = *(void **)(a1 + 7368);
      if (!v32) {
        return 4294963393;
      }
      [v32 resetDeviceSessionforInterface:a2];
      goto LABEL_156;
    case 22:
      if (a1)
      {
        CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommandValueDict");
        if (v33)
        {
          unsigned int v94 = -1431655766;
          if (CFNumberGetValue(v33, kCFNumberIntType, &v94)) {
            [*(id *)(a1 + 7368) updateLinkTestInterval:(int)v94];
          }
        }
      }
      goto LABEL_156;
    default:
      return sub_100070508(*(void *)(a1 + 64), a2, theDict, a4);
  }
  return v12;
}

uint64_t sub_10011B7F8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4472) = a2;
  *(void *)(result + 4480) = a3;
  return result;
}

void sub_10011B804(uint64_t a1, CFDictionaryRef theDict, int a3)
{
  uint64_t v6 = (unsigned char *)(a1 + 5456);
  uint64_t valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"BGSCAN_CACHE");
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
    unsigned char *v6 = BYTE4(valuePtr);
  }
  CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"BGSCAN_CACHE_WSB_ROLLOVER");
  if (v8)
  {
    CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
    v6[2] = valuePtr;
  }
  CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(theDict, @"SCAN_CHANNELS");
  if (!v9)
  {
    CFNumberRef v13 = 0;
    CFStringRef Mutable = 0;
    if (!a3) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  CFArrayRef v10 = v9;
  CFStringRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableArrayRef v12 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFNumberRef v13 = v12;
  if (Mutable) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    goto LABEL_17;
  }
  uint64_t v15 = *(void *)(a1 + 64);
  CFNumberRef v16 = (const void *)sub_100017C48(v15);
  if (sub_10000DE34(v15, v16, Mutable)) {
    goto LABEL_11;
  }
  if (CFArrayGetCount(Mutable) >= 1)
  {
    CFIndex v18 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v18);
      if (ValueAtIndex)
      {
        CFDictionaryRef v20 = CFDictionaryGetValue(ValueAtIndex, @"SUP_CHANNEL");
        CFArrayAppendValue(v13, v20);
      }
      ++v18;
    }
    while (CFArrayGetCount(Mutable) > v18);
  }
  CFIndex Count = CFArrayGetCount(v10);
  if (Count < 1)
  {
LABEL_11:
    unsigned int v17 = *(const void **)(a1 + 5448);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(a1 + 5448) = 0;
    }
    *(void *)(a1 + 5448) = CFRetain(v10);
    if (!a3)
    {
LABEL_17:
      if (!Mutable) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
LABEL_16:
    sub_10010677C(a1);
    goto LABEL_17;
  }
  CFIndex v22 = Count;
  CFIndex v23 = 0;
  while (1)
  {
    CFDictionaryRef v24 = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v23);
    CFNumberRef v25 = CFDictionaryGetValue(v24, @"CHANNEL");
    v28.length = CFArrayGetCount(v13);
    v28.location = 0;
    if (!CFArrayContainsValue(v13, v28, v25)) {
      break;
    }
    if (v22 == ++v23) {
      goto LABEL_11;
    }
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Client sent Invalid channel %s %@", "WiFiDeviceManagerSetBGScanCacheState", v25 message];
  }
  if (Mutable) {
LABEL_18:
  }
    CFRelease(Mutable);
LABEL_19:
  if (v13) {
    CFRelease(v13);
  }
}

void sub_10011BA80(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 64);
    CFStringRef v4 = (const void *)sub_100017C48(v3);
    sub_10006C2F0(v3, v4, a2);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null deviceManager" args:("WiFiDeviceManagerSetScanBackoffReport", NULL)];
    }
  }
}

void sub_10011BB2C(uint64_t a1, const __CFDictionary *a2)
{
  unsigned int valuePtr = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null deviceManager", "WiFiDeviceManagerSetTestParams", v64, v65);
    }
    goto LABEL_75;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null mutableTestParams", "WiFiDeviceManagerSetTestParams", v64, v65);
    }
    goto LABEL_75;
  }
  CFStringRef v4 = (const __CFString *)sub_100016E20(*(void *)(a1 + 64));
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, @"WiFiTestCommandInterfaceName");
  if (!v4)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s:Current Interface is Null!", "WiFiDeviceManagerSetTestParams", v64, v65);
    }
    goto LABEL_75;
  }
  CFStringRef v6 = Value;
  if (!Value)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s:test Interface is Null!", "WiFiDeviceManagerSetTestParams", v64, v65];
    }
    goto LABEL_75;
  }
  if (CFStringCompare(Value, v4, 0))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: ignore this device %@, test interface %@", "WiFiDeviceManagerSetTestParams", v4, v6 message];
    }
    goto LABEL_75;
  }
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(a2, @"WiFiTestCommandType");
  if (!v7)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null cmdNum", "WiFiDeviceManagerSetTestParams", v64, v65);
    }
LABEL_75:
    return;
  }
  CFNumberGetValue(v7, kCFNumberIntType, &valuePtr);
  if (valuePtr >= 0xC9)
  {
    sub_100071B3C(*(void *)(a1 + 64), a2);
    return;
  }
  CFDictionaryRemoveValue(a2, @"WiFiTestCommandType");
  if (valuePtr == 103)
  {
    char v68 = 0;
    CFDictionaryRef v24 = (const void *)sub_100016E20(*(void *)(a1 + 64));
    if (v24)
    {
      CFNumberRef v25 = sub_100018FA8(a1, v24, 1);
      if (v25)
      {
        CFDictionaryRef v26 = v25;
        CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(a2, @"WiFiTestCommandParamIsEdge");
        if (v27)
        {
          CFNumberGetValue(v27, kCFNumberCharType, &v68);
          char v28 = v68;
        }
        else
        {
          char v28 = 0;
        }
        sub_10003ABA4(*(void *)(a1 + 120), v26, 2, v28);
        return;
      }
      uint64_t v50 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_89;
      }
      uint64_t v51 = "no current network";
      goto LABEL_88;
    }
    uint64_t v50 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_89;
    }
    uint64_t v51 = "interface is NULL!";
LABEL_88:
    [v50 WFLog:4 message:v51];
    goto LABEL_89;
  }
  if (valuePtr != 102)
  {
    if (valuePtr != 101) {
      return;
    }
    CFBooleanRef v8 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"enabled");
    CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(a2, @"learningPeriod");
    CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(a2, @"expiryPeriod");
    CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(a2, @"envType");
    CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a2, @"roamTriggerRssi");
    CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a2, @"roamDelta");
    BOOL v14 = CFDictionaryGetValue(a2, @"voipAndMotionTest");
    CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(a2, @"voipState");
    CFDictionaryRef v16 = a2;
    CFBooleanRef v17 = v8;
    CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(v16, @"motionState");
    if (v17)
    {
      int v19 = CFBooleanGetValue(v17);
      *(unsigned char *)(a1 + 256) = v19;
      if (!v19)
      {
        CFDictionaryRef v20 = 0;
        CFStringRef Mutable = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        *(_DWORD *)(a1 + 260) = 259200;
        *(void *)(a1 + 264) = 2592000;
        *(void *)(a1 + 280) = 0;
        *(_DWORD *)(a1 + 287) = 0;
LABEL_100:
        id v54 = (const void *)sub_100016E20(*(void *)(a1 + 64));
        uint64_t v55 = sub_100018FA8(a1, v54, 1);
        if (v55)
        {
          id v56 = v55;
          CFArrayRef v57 = *(const __CFArray **)(a1 + 3528);
          if (v57)
          {
            v70.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 3528));
            v70.location = 0;
            FirstIndexOfCFStringRef Value = CFArrayGetFirstIndexOfValue(v57, v70, v56);
            if (FirstIndexOfValue != -1)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3528), FirstIndexOfValue);
              if (ValueAtIndex)
              {
                unsigned int v60 = ValueAtIndex;
                uint64_t v61 = *(void *)(a1 + 64);
                uint64_t v62 = sub_100016E20(v61);
                unsigned int v63 = sub_100019AD4(a1, v60);
                sub_10005DD54(v61, v62, v60, v63, v23, v22, *(__int16 *)(a1 + 284));
              }
            }
          }
          CFRelease(v56);
        }
LABEL_106:
        if (v20) {
          CFRelease(v20);
        }
        goto LABEL_108;
      }
    }
    else if (!*(unsigned char *)(a1 + 256))
    {
      return;
    }
    if (v9) {
      CFNumberGetValue(v9, kCFNumberIntType, (void *)(a1 + 260));
    }
    if (v10) {
      CFNumberGetValue(v10, kCFNumberIntType, (void *)(a1 + 264));
    }
    if (v11) {
      CFNumberGetValue(v11, kCFNumberIntType, (void *)(a1 + 268));
    }
    if (v12) {
      CFNumberGetValue(v12, kCFNumberIntType, (void *)(a1 + 280));
    }
    double v43 = v14;
    if (v13) {
      CFNumberGetValue(v13, kCFNumberIntType, (void *)(a1 + 284));
    }
    if (v14)
    {
      CFStringRef Mutable = 0;
      uint64_t v23 = 0;
      uint64_t v22 = 0;
      CFDictionaryRef v20 = 0;
      if (v15 && v18)
      {
        CFNumberGetValue(v15, kCFNumberCharType, (void *)(a1 + 289));
        CFNumberGetValue(v18, kCFNumberCharType, (void *)(a1 + 290));
        CFDictionaryRef v20 = 0;
        CFStringRef Mutable = 0;
        *(unsigned char *)(a1 + 288) = 1;
        goto LABEL_60;
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 280) && *(_DWORD *)(a1 + 284))
      {
        CFBooleanRef v44 = v17;
        CFStringRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (Mutable)
        {
          double v45 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (v45)
          {
            CFDictionaryRef v20 = v45;
            CFDictionarySetValue(v45, @"IO80211InterfaceRoamTargetRssiDelta", v13);
            CFDictionarySetValue(Mutable, @"IO80211InterfaceRoamMotionTrafficParams", v20);
            uint64_t v22 = 0;
            uint64_t v23 = 2;
            goto LABEL_57;
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: offsetOptions create failed" : @"__WiFiDeviceManagerSetRoamTestParams"];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: offsetOptDict create failed" args:("__WiFiDeviceManagerSetRoamTestParams")];
          }
        }
        if (!v44)
        {
LABEL_108:
          if (Mutable) {
            CFRelease(Mutable);
          }
          return;
        }
        CFDictionaryRef v20 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        goto LABEL_100;
      }
      uint64_t v23 = 0;
      CFStringRef Mutable = 0;
      CFDictionaryRef v20 = 0;
      uint64_t v22 = 2;
    }
LABEL_57:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Roam Test Parameters: enabled %d learningPeriod %d expiryPeriod %d envType %d roamTriggerRssi %d roamDelta %d", "__WiFiDeviceManagerSetRoamTestParams", *(unsigned __int8 *)(a1 + 256), *(unsigned int *)(a1 + 260), *(unsigned int *)(a1 + 264), *(unsigned int *)(a1 + 268), *(unsigned int *)(a1 + 280), *(unsigned int *)(a1 + 284)];
    }
    if (!v43) {
      goto LABEL_100;
    }
LABEL_60:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Roam VoipAndMotionTest Parameters: voipState %d motionState %d", "__WiFiDeviceManagerSetRoamTestParams", *(unsigned __int8 *)(a1 + 289), *(unsigned __int8 *)(a1 + 290)];
    }
    sub_10011D698(a1);
    goto LABEL_106;
  }
  unsigned int v67 = 0;
  if (!*(void *)(a1 + 3528))
  {
    uint64_t v50 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_89;
    }
    uint64_t v51 = "Known broadcast list is NULL!";
    goto LABEL_88;
  }
  CFStringRef v29 = (const __CFString *)CFDictionaryGetValue(a2, @"SSID_STR");
  if (!v29)
  {
    uint64_t v50 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_89;
    }
    uint64_t v51 = "ssid not specified!";
    goto LABEL_88;
  }
  CFStringRef v30 = v29;
  CFStringRef v31 = (const __CFString *)CFDictionaryGetValue(a2, @"BSSID");
  if (!v31)
  {
    uint64_t v50 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v51 = "bssid not specified!";
      goto LABEL_88;
    }
LABEL_89:
    uint64_t v52 = v49;
LABEL_90:
    return;
  }
  CFStringRef v32 = v31;
  CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(a2, @"disconnectReason");
  if (!v33)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"disconnectReason not specified!"];
    }
    uint64_t v52 = v34;
    goto LABEL_90;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "disconnectReason %@", v33 message];
  }
  CFNumberGetValue(v33, kCFNumberIntType, &v67);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 3528));
  if (Count >= 1)
  {
    CFIndex v36 = Count;
    CFIndex v37 = 0;
    while (1)
    {
      id v38 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3528), v37);
      id v40 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFTypeRef v41 = sub_10001A43C(v38);
        [v40 WFLog:3, "%s: updated network %@ disconnectReason to %d", "__WiFiDeviceManagerAddDisconnectReason", v41, v67 message];
      }
      if (v38)
      {
        CFStringRef v42 = (const __CFString *)sub_10001A43C(v38);
        if (CFEqual(v30, v42)) {
          break;
        }
      }
      if (v36 == ++v37) {
        return;
      }
    }
    sub_1000CB1B8((uint64_t)v38, v32, v67);
    sub_10010C6B4((NSObject **)a1, v38);
  }
}

uint64_t sub_10011C488(uint64_t a1, const __CFDictionary *a2)
{
  if (!a1) {
    return 4294963396;
  }
  uint64_t v3 = sub_10003D35C(*(void *)(a1 + 120), a2);
  uint64_t v4 = sub_10003C6F0(*(void *)(a1 + 120));
  [*(id *)(a1 + 7368) setTdLogic_badRssiThreshold:v4 goodRssiThreshold:v5];
  return v3;
}

uint64_t sub_10011C4DC(uint64_t a1, uint64_t a2)
{
  BOOL v6 = 0;
  if (a1)
  {
    if (a2)
    {
      *(unsigned char *)(a1 + 6216) = *(unsigned char *)(a2 + 5);
      sub_10006C10C(*(void *)(a1 + 64), &v6);
      *(unsigned char *)(a2 + 6) &= v6;
    }
    return sub_1000363C4(*(void *)(a1 + 120), a2);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: NULL Device Manager !" args:("WiFiDeviceManagerSetLQAConfig")];
    }
    return 4294963396;
  }
}

uint64_t sub_10011C58C(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 120);
    return sub_1000364C4(v2, a2);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: NULL Device Manager !" args:("WiFiDeviceManagerSetRNFState", 0x0)];
    }
    return 4294963396;
  }
}

void sub_10011C618(uint64_t a1)
{
  if (a1)
  {
    [*(id *)(a1 + 6648) setDefaultDenyListThresholds];
  }
  else if (qword_10027DD68)
  {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: NULL Device Manager!" args:("WiFiDeviceManagerSetWoWBlacklistThresholds")];
  }
}

uint64_t sub_10011C698(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = (unsigned char *)(a1 + 5217);
    *(_DWORD *)(a1 + 6776) = *a2;
    int v5 = *a2;
    if (*a2 == -536870144 || v5 == -536870256)
    {
      sub_100074944(*(void *)(a1 + 64), 1);
      if (v4[2] && v4[1] == -*v4)
      {
        unsigned int v18 = 0;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, @"Disable MIS on Wake: Client Count %d", (v4[1] + *v4)];
        }
        sub_10010D96C(a1, 0, 1, 0, &v18);
      }
      if (!a3)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: null wakeReason." arguments:("__WiFiDeviceManagerSystemWokenForAutoUnlock", 0)];
        }
      }
      uint64_t v9 = 1;
    }
    else
    {
      if (v5 != -536870272) {
        return 0;
      }
      sub_100074944(*(void *)(a1 + 64), 0);
      if (*(_DWORD *)(a1 + 5424))
      {
        CFSetRef v12 = *(const __CFSet **)(a1 + 3320);
        if (v12)
        {
          if (CFSetGetCount(v12))
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: system is going to sleep. Tearing down hosted AWDL session.", "WiFiDeviceManagerSetSystemPMState")];
            }
            BOOL v14 = *(void **)(a1 + 5432);
            if (v14) {

            }
            *(void *)(a1 + 5432) = 0;
            CFSetApplyFunction(*(CFSetRef *)(a1 + 3320), (CFSetApplierFunction)sub_10011C920, (void *)a1);
          }
        }
      }
      sub_10011C9C4(a1, 0);
      sub_100108600(a1);
      uint64_t v9 = 0;
    }
    v4[2079] = v9;
    CFNumberRef v15 = *(void **)(a1 + 7368);
    if (v15) {
      [v15 setSystemWakeState:v9 wokenByWiFi:sub_10005AFD8()];
    }
    CFDictionaryRef v16 = *(unsigned __int8 **)(a1 + 120);
    return sub_1000365B0(v16, v9);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: NULL Device Manager !" args:("WiFiDeviceManagerSetSystemPMState")];
    }
    return 4294963396;
  }
}

void sub_10011C920(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (const void *)sub_10005FC0C(*(void *)(a2 + 64));
    sub_100101DF0(a2, v3);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:@"%s: null manager." message:3];
    }
  }
}

void sub_10011C9C4(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 352);
  unsigned int v4 = v3 & 0xFFFFFFFE | (a2 != 0);
  *(_DWORD *)(a1 + 352) = v4;
  if (v3) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (v5)
  {
    if (!v4)
    {
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 360), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Auto-join deferral canceled."];
      }
      if (v3)
      {
        *(_DWORD *)(a1 + 192) = 12;
        if (_os_feature_enabled_impl())
        {
          sub_10001FD64(a1, 0xEuLL);
        }
        else
        {
          [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:14 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
          sub_1001028E4(a1, 2, (uint64_t)"__WiFiDeviceManagerSetAutoJoinDeferral");
        }
      }
    }
  }
  else
  {
    CFBooleanRef v8 = v7;
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"Auto-join will be deferred for 2 seconds."];
    }
    uint64_t v9 = *(NSObject **)(a1 + 360);
    dispatch_time_t v10 = dispatch_time(0, 2000000000);
    dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(CFAbsoluteTime *)(a1 + 368) = CFAbsoluteTimeGetCurrent();
  }
}

uint64_t sub_10011CB5C(uint64_t a1, int a2)
{
  unsigned int v4 = (const void *)sub_100017C48(*(void *)(a1 + 64));
  BOOL v5 = sub_100018FA8(a1, v4, 1);
  if (!v5) {
    return 4294963366;
  }
  BOOL v6 = v5;
  if (sub_1000CD794((uint64_t)v5) - 1 <= 1 && *(unsigned char *)(a1 + 5496))
  {
    uint64_t v7 = sub_100070140(*(void *)(a1 + 64));
    if (qword_10027DD68)
    {
      uint64_t v9 = "off";
      if (a2) {
        uint64_t v9 = "on";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: speech session is %s in CarPlay", "WiFiDeviceManagerSetSpeechSessionState", v9);
    }
  }
  else
  {
    uint64_t v7 = 4294963366;
  }
  CFRelease(v6);
  return v7;
}

uint64_t sub_10011CC4C(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68)
  {
    if (*(unsigned char *)(a2 + 24)) {
      BOOL v5 = "Y";
    }
    else {
      BOOL v5 = "N";
    }
    [(id)qword_10027DD68 WFLog:3, "%s: CarPlay session vehicle inform: model %@, manufacturer %@, hardware version %@, isSessionActive %s", "WiFiDeviceManagerSetCarPlaySessionState", *(_OWORD *)a2, *(void *)(a2 + 16), v5 message];
  }
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v23 = *(NSObject **)(a1 + 1056);
    dispatch_time_t v24 = -1;
    uint64_t v25 = -1;
LABEL_41:
    dispatch_source_set_timer(v23, v24, v25, 0);
    return 0;
  }
  BOOL v6 = *(void (**)(uint64_t, uint64_t, uint64_t))a2;
  *(void *)(a1 + 8768) = *(void *)a2;
  CFStringRef v7 = *(const __CFString **)(a2 + 8);
  *(void *)(a1 + 8776) = v7;
  CFStringRef v8 = *(const __CFString **)(a2 + 16);
  *(void *)(a1 + 8784) = v8;
  *(unsigned char *)(a1 + 940) = 1;
  double v9 = *(double *)(a1 + 704);
  double v10 = v9 - *(double *)(a1 + 696);
  if (v10 > 0.0 && v10 <= 10.0)
  {
    uint64_t v12 = (v10 * 1000.0);
    double v13 = *(double *)(a1 + 712);
    uint64_t v14 = ((v13 - v9) * 1000.0);
    LODWORD(v41) = v12;
    HIDWORD(v41) = ((v13 - v9) * 1000.0);
    double v15 = (*(double *)(a1 + 720) - v13) * 1000.0;
    uint64_t v16 = v15;
    HIDWORD(v42) = 43690;
    double v43 = (void (*)(uint64_t, uint64_t, uint64_t))@"Unknown";
    LODWORD(v42) = v15;
    int v17 = *(unsigned __int8 *)(a1 + 728);
    BYTE4(v42) = *(unsigned char *)(a1 + 728);
    CFStringRef v44 = @"Unknown";
    CFStringRef v45 = @"Unknown";
    if (v6)
    {
      double v43 = v6;
      CFStringRef v44 = v7;
      CFStringRef v45 = v8;
    }
    unsigned int v18 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    int v19 = sub_100018FA8(a1, v18, 1);
    if (v19)
    {
      CFDictionaryRef v20 = v19;
      CFNumberRef v21 = (const __CFNumber *)sub_100024070((uint64_t)v19);
      if (v21)
      {
        LOWORD(valuePtr[0]) = -21846;
        CFNumberGetValue(v21, kCFNumberSInt16Type, valuePtr);
        unsigned int v22 = LOWORD(valuePtr[0]);
        HIWORD(v42) = valuePtr[0];
      }
      else
      {
        unsigned int v22 = 0;
      }
      CFRelease(v20);
    }
    else
    {
      unsigned int v22 = 0;
    }
    if (qword_10027DD68)
    {
      CFNumberRef v27 = "yes";
      if (!v17) {
        CFNumberRef v27 = "no";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: timeBasicAssocTaken %u ms, time4WayHSTaken %u ms, timeDhcpTaken %u ms, wasScanCanceled %s, channel %u", "__WiFiDeviceManagerSubmitCarPlayConnectMetrics", v12, v14, v16, v27, v22)];
    }
    sub_100057F88((unsigned int *)&v41);
  }
  char v28 = *(void **)(a1 + 968);
  if (v28)
  {
    CFStringRef v29 = +[NSDate dateWithTimeIntervalSinceReferenceDate:*(double *)(a1 + 704)];
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: CarPlay basic assoc date (%@), ", "__WiFiDeviceManagerSendCarConnectionTime", v29 message];
    }
    if (v29)
    {
      CFStringRef v31 = +[CARConnectionEvent eventWithName:@"Basic assoc completed" type:2 date:v29 payload:0];
      CFTypeRef v41 = _NSConcreteStackBlock;
      uint64_t v42 = 3221225472;
      double v43 = sub_1001477A4;
      CFStringRef v44 = (const __CFString *)&unk_100241C78;
      CFStringRef v45 = @"Basic assoc completed";
      [v28 sendConnectionEvent:v31 completion:&v41];
    }
    CFStringRef v32 = +[NSDate dateWithTimeIntervalSinceReferenceDate:*(double *)(a1 + 712)];
    if (v32)
    {
      CFNumberRef v33 = +[CARConnectionEvent eventWithName:@"WPA HS completed" type:2 date:v32 payload:0];
      valuePtr[0] = _NSConcreteStackBlock;
      valuePtr[1] = 3221225472;
      valuePtr[2] = sub_100147830;
      _DWORD valuePtr[3] = &unk_100241C78;
      unsigned int valuePtr[4] = @"WPA HS completed";
      [v28 sendConnectionEvent:v33 completion:valuePtr];
    }
    CFDateRef v34 = +[NSDate dateWithTimeIntervalSinceReferenceDate:*(double *)(a1 + 720)];
    if (v34)
    {
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_1001478BC;
      v39[3] = &unk_100241C78;
      v39[4] = @"DHCP completed";
      [v28 sendConnectionEvent:+[CARConnectionEvent eventWithName:type:date:payload:](@"DHCP completed", 2, v34, 0) completion:v39];
    }
  }
  if ((_os_feature_enabled_impl() & 1) != 0 || _os_feature_enabled_impl())
  {
    uint64_t v35 = *(void *)(a1 + 64);
    if (v35)
    {
      if (sub_10006C0F4(v35))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: chipset supports LPC", "WiFiDeviceManagerSetCarPlaySessionState"];
        }
        CFIndex v37 = *(NSObject **)(a1 + 1056);
        dispatch_time_t v24 = dispatch_time(0, 600000000000);
        uint64_t v23 = v37;
        uint64_t v25 = 600000000000;
        goto LABEL_41;
      }
    }
  }
  return 0;
}

uint64_t sub_10011D0E8(uint64_t a1, unsigned int *a2)
{
  unsigned int v4 = (const void *)sub_100017C48(*(void *)(a1 + 64));
  BOOL v5 = sub_100018FA8(a1, v4, 1);
  if (!v5) {
    return 0;
  }
  BOOL v6 = v5;
  if (sub_1000CD794((uint64_t)v5) - 1 > 1 || !*(unsigned char *)(a1 + 5496)) {
    goto LABEL_39;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *a2;
  uint64_t v9 = *((void *)a2 + 1);
  if (v8 <= 2)
  {
    uint64_t v10 = a2[1];
    if (v10 <= 0x1E)
    {
      if (*(_DWORD *)(a1 + 3352) == 4) {
        double v11 = (double)v10;
      }
      else {
        double v11 = (double)v10 * 0.8;
      }
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      unsigned int v13 = Current;
      unsigned int v14 = Current / 0x3C;
      int v15 = v14 - 30 * ((143165577 * (unint64_t)v14) >> 32);
      unsigned int v16 = (Current - *(double *)(a1 + 8624));
      if (v16 >= 0x3C)
      {
        unsigned int v17 = v16 / 0x3C;
        if (v16 / 0x3C >= 0x1E) {
          unsigned int v17 = 30;
        }
        unsigned int v18 = v17 + v15;
        if (v18 >= 0x1E) {
          int v19 = 30;
        }
        else {
          int v19 = v18;
        }
        int v20 = v19 - (v18 > 0x1D);
        uint64_t v21 = v18 - v20;
        if (v15 < v20)
        {
          int v22 = *(_DWORD *)(a1 + 8764);
          unsigned int v23 = v13 / 0x708;
          signed int v24 = v14 - 30 * (v13 / 0x708);
          uint64_t v25 = (int *)(a1 - 120 * v23 + 4 * v14 + 8648);
          do
          {
            int v26 = *v25++;
            v22 -= v26;
            *(_DWORD *)(a1 + 8764) = v22;
            ++v24;
          }
          while (v20 > v24);
        }
        if ((int)v21 >= 1)
        {
          int v27 = *(_DWORD *)(a1 + 8764);
          char v28 = (int *)(a1 + 8644);
          do
          {
            int v29 = *v28++;
            v27 -= v29;
            *(_DWORD *)(a1 + 8764) = v27;
            --v21;
          }
          while (v21);
        }
      }
      *(_DWORD *)(a1 + 4 * v15 + 8644) += v10;
      unsigned int v30 = *(_DWORD *)(a1 + 8764) + v10;
      *(_DWORD *)(a1 + 8764) = v30;
      double v31 = dbl_1001CB920[v8 == 1];
      if (v8 == 2) {
        double v31 = 540.0;
      }
      if (v31 < (double)v30) {
        double v11 = 0.0;
      }
      if (qword_10027DD68)
      {
        CFNumberRef v33 = "no";
        if (v11 != 0.0) {
          CFNumberRef v33 = "yes";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: can relax power ? %s, current duration %u, total duration for past 30 minutes %u, current rate %.1lf", "__WiFiDeviceManagerAdjustDurationOfCarPlayHidSession", v33, v10, *(unsigned int *)(a1 + 8764), (double)*(unsigned int *)(a1 + 8764) / 1800.0)];
      }
      uint64_t v7 = v11;
    }
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: priority %d, adjusted duration %u, type %@, motion state %d", "__WiFiDeviceManagerAdjustDurationOfCarPlayHidSession", v8, v7, v9, *(unsigned int *)(a1 + 3352) message];
  }
  if (v7
    && ((double v35 = CFAbsoluteTimeGetCurrent(), v37 = v35, !*(unsigned char *)(a1 + 8640))
     || (LODWORD(v36) = *(_DWORD *)(a1 + 8616), *(double *)(a1 + 8624) - v35 + (double)v36 < (double)v7)))
  {
    uint64_t v38 = sub_100070140(*(void *)(a1 + 64));
    if (!v38)
    {
      uint64_t v39 = *(NSObject **)(a1 + 8632);
      dispatch_time_t v40 = dispatch_time(0, 1000000000 * v7);
      dispatch_source_set_timer(v39, v40, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: CarPlay HID session is active for %u seconds", "WiFiDeviceManagerSetCarPlayHidSessionState", v7);
      }
      uint64_t v38 = 0;
      *(_DWORD *)(a1 + 8616) = v7;
      *(double *)(a1 + 8624) = v37;
      *(unsigned char *)(a1 + 8640) = 1;
    }
  }
  else
  {
LABEL_39:
    uint64_t v38 = 0;
  }
  CFRelease(v6);
  return v38;
}

uint64_t sub_10011D480(uint64_t a1, int a2, double a3)
{
  if (a1)
  {
    int v6 = *(_DWORD *)(a1 + 3352);
    if (a2 != 4 && v6 == 4)
    {
      if (![+[WiFiUserInteractionMonitor sharedInstance] isCellularDataUsable])
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: motion state changed from driving and no alternative network interface. Triggering auto-join", "WiFiDeviceManagerSetMotionState"];
        }
        if (!_os_feature_enabled_impl()) {
          goto LABEL_22;
        }
LABEL_20:
        sub_10001FD64(a1, 0x38uLL);
        goto LABEL_22;
      }
      int v6 = *(_DWORD *)(a1 + 3352);
    }
    if (v6 == 4)
    {
      if ((a2 | 2) != 6) {
        goto LABEL_17;
      }
    }
    else if (v6 == 6 && (a2 | 2) != 6)
    {
LABEL_17:
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: motion state changed from driving. Resetting auto-join intervals."];
      }
      if (!_os_feature_enabled_impl())
      {
        sub_1001028E4(a1, 2, (uint64_t)"WiFiDeviceManagerSetMotionState");
        goto LABEL_22;
      }
      goto LABEL_20;
    }
LABEL_22:
    *(_DWORD *)(a1 + 3352) = a2;
    *(double *)(a1 + 3360) = a3;
    sub_100037754(*(void *)(a1 + 120), a2, a3);
    sub_100074920(*(void *)(a1 + 64), *(_DWORD *)(a1 + 3352) > 1u);
    sub_10011D698(a1);
    uint64_t v10 = *(void **)(a1 + 7368);
    if (v10) {
      [v10 setMotionState:sub_100012FCC(*(_DWORD *)(a1 + 3352))];
    }
    uint64_t result = +[WiFiRoamManager sharedWiFiRoamManager];
    if (result)
    {
      [(id)result setDeviceMotionState:*(unsigned int *)(a1 + 3352)];
      return 0;
    }
    return result;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: null deviceManager", @"WiFiDeviceManagerSetMotionState"];
  }
  return 4294963396;
}

void sub_10011D698(uint64_t a1)
{
  unint64_t valuePtr = 0;
  if (*(unsigned char *)(a1 + 3414) == 1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Not changing AppRoamPolicy due to AWDL realtime session in progress", "__WiFiDeviceManagerSetAppRoamPolicy")];
    }
LABEL_4:
    return;
  }
  int v3 = *(unsigned __int8 *)(a1 + 256);
  if (*(unsigned char *)(a1 + 256))
  {
    if (!*(unsigned char *)(a1 + 288))
    {
      uint64_t v4 = 0;
      goto LABEL_34;
    }
    uint64_t v4 = *(unsigned __int8 *)(a1 + 290);
    BOOL v5 = (unsigned char *)(a1 + 289);
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(a1 + 3352);
    BOOL v5 = (unsigned char *)(a1 + 3408);
  }
  if (!*v5)
  {
LABEL_34:
    if (*(_DWORD *)(a1 + 300) == 2) {
      return;
    }
    CFMutableDictionaryRef v17 = 0;
    int v19 = 0;
    CFNumberRef v39 = 0;
    CFNumberRef v15 = 0;
    uint64_t v21 = 0;
    *(_OWORD *)(a1 + 296) = xmmword_1001CB930;
    uint64_t v20 = 2;
    int v22 = "NO";
LABEL_36:
    uint64_t v38 = v22;
    unsigned int v23 = (const void *)sub_100016E20(*(void *)(a1 + 64));
    signed int v24 = sub_100018FA8(a1, v23, 1);
    CFTypeRef cf = v17;
    if (v24)
    {
      CFArrayRef v25 = *(const __CFArray **)(a1 + 3528);
      if (!v25)
      {
        uint64_t v26 = v4;
        CFNumberRef v30 = v15;
        goto LABEL_46;
      }
      uint64_t v26 = v4;
      v43.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 3528));
      v43.location = 0;
      FirstIndexOfCFStringRef Value = CFArrayGetFirstIndexOfValue(v25, v43, v24);
      if (FirstIndexOfValue != -1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3528), FirstIndexOfValue);
        if (!ValueAtIndex)
        {
          CFNumberRef v30 = v15;
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: network is NULL" args:v37];
          }
          goto LABEL_79;
        }
        int v29 = ValueAtIndex;
        CFNumberRef v30 = v15;
        LODWORD(v25) = sub_100019AD4(a1, ValueAtIndex);
        if ((v25 & 0xFFFFFFFD) != 4)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: Not multiAP environment for %@. Exiting!", "__WiFiDeviceManagerSetAppRoamPolicy", sub_10001A43C(v29) message];
          }
LABEL_79:
          CFNumberRef v13 = v39;
          goto LABEL_53;
        }
LABEL_46:
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Setting AppRoamPolicy with roamDelta %d isVoipCallActive %s motionState %d", "__WiFiDeviceManagerSetAppRoamPolicy", valuePtr, v38, v26);
        }
        CFNumberRef v13 = v39;
        if (!v25)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4, @"%s: Current network not found in known networks, defaulting to multiAP !", @"__WiFiDeviceManagerSetAppRoamPolicy"];
          }
          LODWORD(v25) = 4;
        }
        uint64_t v33 = *(void *)(a1 + 64);
        uint64_t v34 = sub_100016E20(v33);
        sub_10005DD54(v33, v34, v24, v25, v21, v20, *(__int16 *)(a1 + 308));
        if (!v24)
        {
LABEL_54:
          CFNumberRef v15 = v30;
          CFMutableDictionaryRef v17 = cf;
          if (!v13)
          {
LABEL_56:
            if (v15) {
              CFRelease(v15);
            }
            if (v19) {
              CFRelease(v19);
            }
            if (v17) {
              CFRelease(v17);
            }
            return;
          }
LABEL_55:
          CFRelease(v13);
          goto LABEL_56;
        }
LABEL_53:
        CFRelease(v24);
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v26 = v4;
    }
    CFNumberRef v30 = v15;
    LODWORD(v25) = 0;
    goto LABEL_46;
  }
  if ((v4 & 0xFFFFFFFE) == 2)
  {
    int v6 = -70;
    int v7 = 8;
  }
  else
  {
    if ((v4 & 0xFFFFFFFB) != 1)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Not triggering motion state based roam", "__WiFiDeviceManagerSetAppRoamPolicy")];
      }
      goto LABEL_4;
    }
    int v6 = -75;
    int v7 = 12;
  }
  unint64_t valuePtr = __PAIR64__(v6, v7);
  if (v3)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 280);
    if (v8)
    {
      uint64_t v9 = *(unsigned int *)(a1 + 284);
      if (v9)
      {
        unint64_t valuePtr = __PAIR64__(v8, v9);
        if (qword_10027DD68)
        {
          if (*(unsigned char *)(a1 + 288)) {
            double v11 = " Simulating VoIP Call active!";
          }
          else {
            double v11 = "!";
          }
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: !!DEBUG MODE%s Roam Trigger %d And Roam Delta %d", "__WiFiDeviceManagerSetAppRoamPolicy", v11, v8, v9);
        }
        int v6 = v8;
        int v7 = v9;
      }
    }
  }
  if (*(_DWORD *)(a1 + 296) != 2 || *(_DWORD *)(a1 + 308) != v7 || *(_DWORD *)(a1 + 304) != v6)
  {
    *(void *)(a1 + 296) = 2;
    *(_DWORD *)(a1 + 308) = v7;
    *(_DWORD *)(a1 + 304) = v6;
    CFNumberRef v12 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    if (v12)
    {
      CFNumberRef v13 = v12;
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v14)
      {
        CFNumberRef v15 = v14;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (Mutable)
        {
          CFMutableDictionaryRef v17 = Mutable;
          unsigned int v18 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (v18)
          {
            int v19 = v18;
            CFNumberRef v39 = v13;
            CFDictionarySetValue(v18, @"IO80211InterfaceRoamTargetRssiDelta", v15);
            CFDictionarySetValue(v17, @"IO80211InterfaceRoamMotionTrafficParams", v19);
            uint64_t v20 = 0;
            uint64_t v21 = 2;
            int v22 = "YES";
            goto LABEL_36;
          }
          if (qword_10027DD68) {
            [qword_10027DD68 WFLog:message:4, "%s: offsetOptions create failed", "__WiFiDeviceManagerSetAppRoamPolicy"];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: offsetOptDict create failed" args:("__WiFiDeviceManagerSetAppRoamPolicy")];
          }
          CFMutableDictionaryRef v17 = 0;
        }
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: roamDeltaRef create failed", "__WiFiDeviceManagerSetAppRoamPolicy")];
        }
        CFMutableDictionaryRef v17 = 0;
        CFNumberRef v15 = 0;
      }
      int v19 = 0;
      goto LABEL_55;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: roamTriggerRssiRef create failed", "__WiFiDeviceManagerSetAppRoamPolicy"];
    }
  }
}

void sub_10011DCBC(uint64_t a1, int a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(a1 + 120);
  if (a2)
  {
    uint64_t v4 = sub_10011DCE8;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v2 = 0;
  }
  sub_100037DEC(v3, (uint64_t)v4, v2);
}

void sub_10011DCE8(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = sub_100016E20(*(void *)(a1 + 64));
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(a1 + 6792);
      sub_1000AD99C(v6, a1, v5, a2);
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s - interface is NULL!", @"__WiFiDeviceManagerTdConfirmedCallback"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s - Manager is NULL!", @"__WiFiDeviceManagerTdConfirmedCallback"];
    }
  }
}

void sub_10011DDCC(uint64_t a1, int a2, int a3, int a4)
{
  int v15 = a3;
  int valuePtr = a2;
  if (sub_10006C14C(*(void *)(a1 + 64)))
  {
    *(_OWORD *)keys = *(_OWORD *)off_1002416B8;
    CFStringRef v19 = @"IO80211InterfaceDualPowerCellularTxShort";
    memset(values, 170, sizeof(values));
    CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
    CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v15);
    CFNumberRef v8 = v7;
    if (v6) {
      BOOL v9 = v7 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      if (!v6)
      {
LABEL_12:
        if (v8) {
          CFRelease(v8);
        }
        return;
      }
    }
    else
    {
      CFBooleanRef v10 = kCFBooleanTrue;
      if (!a4) {
        CFBooleanRef v10 = kCFBooleanFalse;
      }
      values[0] = v6;
      values[1] = v7;
      values[2] = v10;
      CFDictionaryRef v11 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (v11)
      {
        CFDictionaryRef v12 = v11;
        uint64_t v13 = *(void *)(a1 + 64);
        CFNumberRef v14 = (const void *)sub_100017C48(v13);
        sub_100017D28(v13, v14, 499, 0, (uint64_t)v12);
        CFRelease(v12);
      }
      *(unsigned char *)(a1 + 6184) = v15 == 1;
    }
    CFRelease(v6);
    goto LABEL_12;
  }
}

uint64_t sub_10011DF58(uint64_t a1, int a2)
{
  uint64_t v2 = &kCFBooleanTrue;
  if (!a2) {
    uint64_t v2 = &kCFBooleanFalse;
  }
  uint64_t v3 = (uint64_t)*v2;
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = (const void *)sub_100017C48(v4);

  return sub_100017D28(v4, v5, 486, 0, v3);
}

uint64_t sub_10011DFC0(uint64_t a1, int a2)
{
  uint64_t v2 = &kCFBooleanTrue;
  if (!a2) {
    uint64_t v2 = &kCFBooleanFalse;
  }
  uint64_t v3 = (uint64_t)*v2;
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = (const void *)sub_100017C48(v4);

  return sub_100017D28(v4, v5, 448, 0, v3);
}

void sub_10011E028(uint64_t a1, double a2)
{
  if (a1)
  {
    if (*(double *)(a1 + 6784) != a2)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: timeout %f", "WiFiDeviceManagerSetNANOffHeadConnectionExpiry", *(void *)&a2);
      }
      *(double *)(a1 + 6784) = a2;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: manager is NULL", "WiFiDeviceManagerSetNANOffHeadConnectionExpiry")];
    }
  }
}

double sub_10011E10C(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 6784);
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: deviceManager is NULL!", @"WiFiDeviceManagerGetNANOffHeadConnectionExpiry"];
  }
  return 0.0;
}

void sub_10011E17C(uint64_t a1, const void *a2, int a3)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: bad args: manager %p network %p" args:("__WiFiDeviceManagerReleaseWakeAssertionForAutoJoin", 0, a2)];
    }
    goto LABEL_28;
  }
  IOPMAssertionID v5 = *(_DWORD *)(a1 + 6580);
  if (!v5)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: PM assertion not held.", "__WiFiDeviceManagerReleaseWakeAssertionForAutoJoin", v17, v18);
    }
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 6592))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: PM assertion Network NULL.", "__WiFiDeviceManagerReleaseWakeAssertionForAutoJoin", v17, v18);
    }
LABEL_28:
    uint64_t v13 = v16;
    goto LABEL_14;
  }
  if (a2 && !a3)
  {
    CFStringRef v6 = (const __CFString *)sub_10001A43C(*(const void **)(a1 + 6592));
    CFStringRef v7 = (const __CFString *)sub_10001A43C(a2);
    if (CFStringCompare(v6, v7, 0))
    {
      BOOL v9 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFBooleanRef v10 = sub_10001A43C(a2);
        [v9 WFLog:4, "%s: Bail out as Join Assertion was held for different network! network->ssid:%@ manager->autoJoinPMAssertionNetwork:%@ ", "__WiFiDeviceManagerReleaseWakeAssertionForAutoJoin", v10, sub_10001A43C(*(const void **)(a1 + 6592)) message];
      }
LABEL_13:
      uint64_t v13 = v8;
LABEL_14:
      return;
    }
    IOPMAssertionID v5 = *(_DWORD *)(a1 + 6580);
  }
  uint64_t v11 = IOPMAssertionRelease(v5);
  CFDictionaryRef v12 = (void *)qword_10027DD68;
  if (v11)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: unable to release autojoin PM Assertion error=%d", "__WiFiDeviceManagerReleaseWakeAssertionForAutoJoin", v11, v18);
    }
    goto LABEL_13;
  }
  if (qword_10027DD68)
  {
    CFNumberRef v14 = sub_10001A43C(a2);
    [v12 WFLog:3, "%s: wake assertion released for network %@ current timestamp:%f", "__WiFiDeviceManagerReleaseWakeAssertionForAutoJoin", v14, CFAbsoluteTimeGetCurrent() message];
  }
  *(_DWORD *)(a1 + 6580) = 0;
  *(void *)(a1 + 6584) = 0;
  int v15 = *(const void **)(a1 + 6592);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 6592) = 0;
  }
}

uint64_t sub_10011E3B0(uint64_t a1, int a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 3689) = a2 != 0;
    keys = @"IO80211InterfaceBatterySaveModeState";
    uint64_t v3 = (void **)&kCFBooleanTrue;
    if (!a2) {
      uint64_t v3 = (void **)&kCFBooleanFalse;
    }
    values = *v3;
    CFDictionaryRef v4 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (v4)
    {
      CFDictionaryRef v5 = v4;
      uint64_t v6 = *(void *)(a1 + 64);
      CFStringRef v7 = (const void *)sub_100017C48(v6);
      sub_100017D28(v6, v7, 472, 0, (uint64_t)v5);
      CFRelease(v5);
    }
    return 0;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: NULL Device Manager !", "WiFiDeviceManagerSetBatterySaverModeConfiguration"];
    }
    return 4294963396;
  }
}

uint64_t sub_10011E4E4()
{
  return _os_feature_enabled_impl() ^ 1;
}

uint64_t sub_10011E510(uint64_t a1, CFDictionaryRef theDict)
{
  if (!a1 || !theDict)
  {
    uint64_t v17 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_41;
    }
    uint64_t v18 = "Error: %s: device manager or policy dict is NULL";
    goto LABEL_65;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"appPolicyUUID");
  CFBooleanRef v5 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"appPolicyState");
  uint64_t v6 = CFBooleanGetValue(v5);
  unsigned int v7 = [+[WiFiUserInteractionMonitor sharedInstance] isCoPresenceActive];
  if (Value) {
    BOOL v8 = v5 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    uint64_t v17 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_41;
    }
    uint64_t v18 = "Error: %s: policy dict has NULL values";
LABEL_65:
    uint64_t v21 = 4;
    goto LABEL_40;
  }
  unsigned int v9 = v7;
  CFBooleanRef v10 = (BOOL *)(a1 + 5497);
  if (CFStringCompare(Value, @"CB06911C-82BE-44A9-8359-F8C02AAF82DB", 0)) {
    goto LABEL_8;
  }
  if (*v10 == v6 && *(unsigned __int8 *)(a1 + 5499) == v9)
  {
    uint64_t v17 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v34 = v6;
      uint64_t v18 = "%s: Duplicate avc assertion (callState=%d), bail out";
LABEL_39:
      uint64_t v21 = 3;
LABEL_40:
      [v17 WFLog:v21 message:v18 WFLogTypeWiFiDeviceManagerSetAppPolicy:v34];
      goto LABEL_41;
    }
    goto LABEL_41;
  }
  if (_os_feature_enabled_impl())
  {
    uint64_t v17 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v34 = v6;
      uint64_t v18 = "%s: avc assertion (callState=%d) not for infra, bail out";
      goto LABEL_39;
    }
LABEL_41:
    return 4294963396;
  }
  *(unsigned char *)(a1 + 3408) = v6;
  BOOL *v10 = v5 == kCFBooleanTrue;
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, @"%s: FT call started/ended ? %d ", @"WiFiDeviceManagerSetAppPolicy", v6];
  }
  signed int v24 = *(void **)(a1 + 7368);
  if (v24)
  {
    if (*(unsigned char *)(a1 + 3409)) {
      BOOL v25 = 1;
    }
    else {
      BOOL v25 = *(unsigned char *)(a1 + 3408) != 0;
    }
    [v24 setCallState:v25];
  }
  sub_100036AFC(*(void *)(a1 + 120), [+[WiFiUserInteractionMonitor sharedInstance] isAVConferenceActive]);
  sub_10011D698(a1);
  if (!v6)
  {
    if (_os_feature_enabled_impl()) {
      sub_10001FD64(a1, 0x1AuLL);
    }
    else {
      sub_100100D74(a1, 1);
    }
  }
  values = v5;
  keys = @"IO80211InterfaceCallStatus";
  CFDictionaryRef v30 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v30)
  {
    CFDictionaryRef v31 = v30;
    uint64_t v32 = *(void *)(a1 + 64);
    uint64_t v33 = (const void *)sub_100017C48(v32);
    sub_100074A2C(v32, v33, v31);
    CFRelease(v31);
  }
  CFStringRef Value = @"FACETIME_UUID";
LABEL_8:
  if (CFEqual(Value, @"WiFiCallingUUID"))
  {
    if (*(unsigned __int8 *)(a1 + 3408) != v6)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFi call started/ended ? %d ", "WiFiDeviceManagerSetAppPolicy", v6);
      }
      *(unsigned char *)(a1 + 3408) = v6;
      uint64_t v20 = *(void **)(a1 + 7368);
      if (v20) {
        [v20 setCallState:(*(unsigned __int8 *)(a1 + 3409) | v6) != 0];
      }
      sub_10011D698(a1);
      if (!v6)
      {
        if (_os_feature_enabled_impl()) {
          sub_10001FD64(a1, 0x1AuLL);
        }
        else {
          sub_100100D74(a1, 1);
        }
      }
      values = v5;
      keys = @"IO80211InterfaceCallStatus";
      CFDictionaryRef v26 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (v26)
      {
        CFDictionaryRef v27 = v26;
        uint64_t v28 = *(void *)(a1 + 64);
        int v29 = (const void *)sub_100017C48(v28);
        sub_100074A2C(v28, v29, v27);
        CFRelease(v27);
      }
      goto LABEL_9;
    }
    return 4294963396;
  }
LABEL_9:
  if (CFEqual(Value, @"airplay"))
  {
    *(unsigned char *)(a1 + 5498) = v5 == kCFBooleanTrue;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s manager->latencySensitiveServices.airplayOverInfra:%u", "WiFiDeviceManagerSetAppPolicy", *(unsigned __int8 *)(a1 + 5498));
    }
    [+[WiFiUserInteractionMonitor sharedInstance] updateIsAirplayActiveOverInfra:v5 == kCFBooleanTrue];
  }
  if (CFEqual(Value, @"kApple80211KeyGameModeUUIDString"))
  {
    *(unsigned char *)(a1 + 5500) = v5 == kCFBooleanTrue;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s manager->latencySensitiveServices.gameMode:%u", "WiFiDeviceManagerSetAppPolicy", *(unsigned __int8 *)(a1 + 5500));
    }
    sub_10011DFC0(a1, *(unsigned __int8 *)(a1 + 5500));
  }
  if (*(unsigned char *)(a1 + 3408) && sub_10006A38C(*(void *)(a1 + 64)))
  {
    uint64_t v13 = (const void *)sub_10005FC0C(*(void *)(a1 + 64));
    sub_100101DF0(a1, v13);
  }
  uint64_t v14 = sub_10006EFD4(*(void *)(a1 + 64), Value, v5);
  sub_100101574(a1, 0);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s()CATS App update: device=%p deviceManager:%p\n ", "WiFiDeviceManagerSetAppPolicy", a1, *(void *)(a1 + 64));
  }
  if (*(unsigned char *)(a1 + 433)) {
    sub_1000157C8(a1, 5);
  }
  return v14;
}

uint64_t sub_10011EB1C(uint64_t a1, uint64_t a2, void *key)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Error: %s: device manager is NULL" arguments:("WiFiDeviceManagerAppTrafficRegistration", nil)];
    }
    goto LABEL_29;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Error: %s: trafficReg is NULL" arguments:("WiFiDeviceManagerAppTrafficRegistration", nil)];
    }
    goto LABEL_29;
  }
  if (!key)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Error: %s: clientID is NULL" args:("WiFiDeviceManagerAppTrafficRegistration", 0)];
    }
    goto LABEL_29;
  }
  CFStringRef Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 7064), key);
  if (!Value || (id v7 = Value, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    id v7 = objc_alloc_init((Class)AWDLServiceDiscoveryManager);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 7064), key, v7);
  }
  unsigned __int8 v16 = 0;
  id v8 = [objc_alloc((Class)AWDLTrafficRegistrationConfiguration) initWithDictionary:a2 isActive:&v16];
  if (!v8)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Failed to send traffic registration because failed to parse dictionary", v15);
    }
LABEL_29:
    unsigned int v9 = 0;
    uint64_t v12 = 4294963396;
    goto LABEL_18;
  }
  unsigned int v9 = v8;
  if (v16)
  {
    if ([v7 setTrafficRegistration:v8 error:0]) {
      goto LABEL_10;
    }
LABEL_20:
    uint64_t v12 = 4294963365;
    goto LABEL_18;
  }
  if (![v7 clearTrafficRegistration:v8 error:0]) {
    goto LABEL_20;
  }
LABEL_10:
  if (([v9 options] & 1) != 0
    && objc_msgSend(objc_msgSend(v9, "peerAddress"), "isEqual:", objc_msgSend(objc_alloc((Class)WiFiMACAddress), "initWithAddress:", 0)))
  {
    *(unsigned char *)(a1 + 5498) = v16;
    CFBooleanRef v10 = +[WiFiUserInteractionMonitor sharedInstance];
    [(WiFiUserInteractionMonitor *)v10 updateIsAirplayActiveOverInfra:v16];
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s manager->latencySensitiveServices.airplayOverInfra:%u", "WiFiDeviceManagerAppTrafficRegistration", *(unsigned __int8 *)(a1 + 5498));
  }
  sub_100101574(a1, 0);
  if (*(unsigned char *)(a1 + 433)) {
    sub_1000157C8(a1, 4);
  }
  uint64_t v12 = 0;
LABEL_18:

  return v12;
}

uint64_t sub_10011EDB0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4488) = a2;
  *(void *)(result + 4496) = a3;
  return result;
}

uint64_t sub_10011EDBC(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4, unsigned int a5, const void *a6)
{
  return sub_10011EDE8(a1, 0, a2, a3, a4, a5, a6, (uint64_t)sub_10011F1C8);
}

uint64_t sub_10011EDE8(uint64_t a1, __CFDictionary *a2, uint64_t a3, unsigned int *a4, unsigned int a5, unsigned int a6, const void *a7, uint64_t a8)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL !" : @"__WiFiDeviceManagerTriggerActiveProbe"];
    }
    goto LABEL_49;
  }
  memset(v33, 170, sizeof(v33));
  if (!a3)
  {
    CFNumberRef v16 = 0;
    if (a5) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  v33[2] = a3;
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberCFIndexType, &v33[2]);
  if (!v16)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: numProbesRef is NULL !", @"__WiFiDeviceManagerTriggerActiveProbe"];
    }
LABEL_49:
    return 4294963394;
  }
  if (a5)
  {
LABEL_5:
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    if (!Mutable)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: probeSizeArrRef is NULL !" args:("__WiFiDeviceManagerTriggerActiveProbe")];
      }
      CFNumberRef v25 = 0;
      uint64_t v28 = 0;
      uint64_t v18 = 0;
      goto LABEL_53;
    }
    uint64_t v18 = Mutable;
    CFNumberRef v32 = v16;
    CFStringRef v19 = a2;
    uint64_t v20 = a8;
    uint64_t v21 = a5;
    do
    {
      unsigned int v22 = *a4++;
      v33[1] = v22;
      CFNumberRef v23 = CFNumberCreate(0, kCFNumberCFIndexType, &v33[1]);
      if (!v23)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: probeSizeRef is NULL !" : @"__WiFiDeviceManagerTriggerActiveProbe"];
        }
        CFNumberRef v25 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 4294963394;
        CFNumberRef v16 = v32;
        goto LABEL_29;
      }
      CFNumberRef v24 = v23;
      CFArrayAppendValue(v18, v23);
      CFRelease(v24);
      --v21;
    }
    while (v21);
    a8 = v20;
    a2 = v19;
    CFNumberRef v16 = v32;
    if (!a6) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }
LABEL_15:
  uint64_t v18 = 0;
  if (!a6)
  {
LABEL_16:
    CFNumberRef v25 = 0;
    goto LABEL_17;
  }
LABEL_10:
  v33[0] = a6;
  CFNumberRef v25 = CFNumberCreate(0, kCFNumberCFIndexType, v33);
  if (!v25)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: probeTimeoutSecsRef is NULL !" args:__WiFiDeviceManagerTriggerActiveProbe];
    }
    CFNumberRef v25 = 0;
LABEL_46:
    uint64_t v28 = 0;
LABEL_53:
    uint64_t v29 = 4294963394;
    goto LABEL_29;
  }
LABEL_17:
  CFDictionaryRef v27 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v27)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: probeOptions is NULL !" args:__WiFiDeviceManagerTriggerActiveProbe];
    }
    goto LABEL_46;
  }
  uint64_t v28 = v27;
  if (v16) {
    CFDictionarySetValue(v27, @"kWiFiLqaMgrNumProbes", v16);
  }
  if (v18) {
    CFDictionarySetValue(v28, @"kWiFiLqaMgrProbeSize", v18);
  }
  if (v25) {
    CFDictionarySetValue(v28, @"kWiFiLqaMgrProbeTimeoutSecs", v25);
  }
  if (a7) {
    CFDictionarySetValue(v28, @"kWiFiLqaMgrIpv4Addr", a7);
  }
  uint64_t v29 = sub_100036E18(*(void *)(a1 + 120), v28, a2, a8, a1);
  if (!v29) {
    goto LABEL_30;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:4, "%s: Failed to Enqueue active probing with %d probes", "__WiFiDeviceManagerTriggerActiveProbe", a3];
  }
LABEL_29:
LABEL_30:
  if (v16) {
    CFRelease(v16);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v29;
}

void sub_10011F1C8(void *value, CFMutableArrayRef theArray, uint64_t a3, uint64_t a4)
{
  CFArrayAppendValue(theArray, value);
  uint64_t v6 = *(void (**)(uint64_t, void, uint64_t, uint64_t, CFMutableArrayRef))(a4 + 4392);
  if (v6)
  {
    uint64_t v7 = *(void *)(a4 + 4400);
    v6(a4, 0, v7, 6, theArray);
  }
}

void sub_10011F230(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 5504) = a2;
  uint64_t v3 = *(NSObject **)(a1 + 5512);
  if (a2) {
    dispatch_time_t v4 = dispatch_time(0, 10000000000);
  }
  else {
    dispatch_time_t v4 = -1;
  }
  dispatch_source_set_timer(v3, v4, 0xFFFFFFFFFFFFFFFFLL, 0);
  *(_DWORD *)(a1 + 688) = 0;
  *(void *)(a1 + 680) = 0;
}

void sub_10011F298(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 5520) = a2;
  *(unsigned char *)(a1 + 1064) = 0;
  if (a2 == 1)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    if (Current - *(double *)(a1 + 696) > 10.0)
    {
      *(double *)(a1 + 696) = Current;
      *(unsigned char *)(a1 + 728) = 0;
    }
  }
}

void sub_10011F2E8()
{
}

uint64_t sub_10011F2F0(uint64_t a1)
{
  if (a1)
  {
    if (!sub_100112644(a1) && !*(unsigned char *)(a1 + 3414)) {
      return 0;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: wifid is hosting AWDL session." arguments:("WiFiDeviceManagerIsHostingAwdlSession", 0x0)];
    }
    uint64_t v3 = 1;
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, @"%s: null manager.", @"WiFiDeviceManagerIsHostingAwdlSession"];
    }
    uint64_t v3 = 0;
  }
  return v3;
}

void sub_10011F3B4(uint64_t a1, CFArrayRef theArray)
{
  dispatch_time_t v4 = *(const void **)(a1 + 5584);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 5584) = 0;
  }
  if (theArray) {
    *(void *)(a1 + 5584) = CFArrayCreateCopy(kCFAllocatorDefault, theArray);
  }
}

uint64_t sub_10011F404(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return sub_10007483C(*(void *)(a1 + 64), a2);
  }
  else {
    return 83;
  }
}

void sub_10011F41C(uint64_t a1)
{
  uint64_t v2 = (void *)MGCopyAnswer();
  uint64_t v3 = (void *)MGCopyAnswer();
  dispatch_time_t v4 = v3;
  if (v2)
  {
    if (v3)
    {
      *(_OWORD *)keys = *(_OWORD *)off_1002416D0;
      values[0] = v2;
      values[1] = v3;
      CFDictionaryRef v5 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (v5)
      {
        CFDictionaryRef v6 = v5;
        uint64_t v7 = *(void *)(a1 + 64);
        id v8 = (const void *)sub_100017C48(v7);
        sub_100017D28(v7, v8, 490, 0, (uint64_t)v6);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: productType:%@ iosVersion:%@", "WiFiDeviceManagerSetDeviceInfo", v2, v4 message];
        }
LABEL_7:
        CFRelease(v2);
        if (!v4) {
          goto LABEL_9;
        }
        goto LABEL_8;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s; failed to create dictionary"];
      }
          "WiFiDeviceManagerSetDeviceInfo");
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: iosVersion is NULL", "WiFiDeviceManagerSetDeviceInfo")];
      }
    }
    CFDictionaryRef v6 = 0;
    goto LABEL_7;
  }
  if (qword_10027DD68) {
    [qword_10027DD68 WFLog:message:3, "%s: productType is NULL", "WiFiDeviceManagerSetDeviceInfo"];
  }
  CFDictionaryRef v6 = 0;
  if (v4) {
LABEL_8:
  }
    CFRelease(v4);
LABEL_9:
  if (v6) {
    CFRelease(v6);
  }
}

void sub_10011F630(uint64_t a1, const void *a2)
{
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  uint64_t v23 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager." args:("WiFiDeviceManagerForgetNetwork")];
    }
    goto LABEL_16;
  }
  if (!*(void *)(a1 + 64))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null device." :@"WiFiDeviceManagerForgetNetwork"];
    }
LABEL_16:
    goto LABEL_11;
  }
  dispatch_time_t v4 = sub_10001A43C(a2);
  CFTypeRef v5 = CFRetain(v4);
  v21[3] = (uint64_t)v5;
  CFDictionaryRef v6 = (const void *)sub_100016E20(*(void *)(a1 + 64));
  CFTypeRef v7 = CFRetain(v6);
  v17[3] = (uint64_t)v7;
  [*(id *)(a1 + 6648) removeAllDenyListEntriesWithNetworkName:v21[3]];
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10011F914;
  block[3] = &unk_1002416E8;
  void block[4] = &v16;
  void block[5] = &v20;
  dispatch_async(global_queue, block);
  if (!sub_10001E71C((uint64_t)a2)) {
    goto LABEL_11;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiDeviceManagerForgetNetwork")];
    }
    goto LABEL_19;
  }
  CFBooleanRef v9 = (const __CFBoolean *)sub_10001E404((uint64_t)a2, @"AutoHotspotDisableWiFiAutoJoinUntilUserJoin");
  CFBooleanRef v10 = v9;
  if (!v9) {
    goto LABEL_11;
  }
  CFTypeID v11 = CFGetTypeID(v9);
  if (v11 != CFBooleanGetTypeID())
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: invalid value type", "WiFiDeviceManagerForgetNetwork")
    }
LABEL_19:
    goto LABEL_11;
  }
  if (CFBooleanGetValue(v10))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Auto Hotspot Disable for %@", "WiFiDeviceManagerForgetNetwork", sub_10001A43C(a2) message];
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 6928), a2);
  }
LABEL_11:
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);
}

void sub_10011F8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10011F914(uint64_t a1)
{
  IPConfigurationForgetNetwork();
  uint64_t v2 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  uint64_t v3 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_10011F98C(uint64_t a1, const void *a2)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v17 = 0;
  uint64_t v10 = 0;
  CFTypeID v11 = &v10;
  uint64_t v12 = 0x2020000000;
  uint64_t v13 = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null manager.", "WiFiDeviceManagerForgetPrivateMacNetworkLease")];
    }
    goto LABEL_9;
  }
  if (!*(void *)(a1 + 64))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null device.", "WiFiDeviceManagerForgetPrivateMacNetworkLease")];
    }
LABEL_9:
    goto LABEL_4;
  }
  uint64_t v3 = sub_10001A43C(a2);
  CFTypeRef v4 = CFRetain(v3);
  v15[3] = (uint64_t)v4;
  CFTypeRef v5 = (const void *)sub_100016E20(*(void *)(a1 + 64));
  CFTypeRef v6 = CFRetain(v5);
  void v11[3] = (uint64_t)v6;
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10011FB28;
  block[3] = &unk_1002416E8;
  void block[4] = &v10;
  void block[5] = &v14;
  dispatch_async(global_queue, block);
LABEL_4:
  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(&v14, 8);
}

void sub_10011FB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_10011FB28(uint64_t a1)
{
  IPConfigurationForgetNetwork();
  uint64_t v2 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  uint64_t v3 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_10011FBA0(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    sub_10011FC58(a1, a2, 0);
  }
  else
  {
    if (qword_10027DD68)
    {
      CFTypeRef v4 = "manager";
      if (a1) {
        CFTypeRef v4 = "network";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: %s is NULL", "WiFiDeviceManagerForceBssidAssociation", v4)];
    }
  }
}

NSError *sub_10011FC58(uint64_t a1, void *a2, int a3)
{
  CFTypeRef v6 = (unsigned char *)(a1 + 5219);
  if ((!_os_feature_enabled_impl() || !_os_feature_enabled_impl() || !v6[1397])
    && !sub_10001E404((uint64_t)a2, @"COLOCATED_NETWORK_SCOPE_ID"))
  {
    unsigned int v7 = sub_1000C6FC0((uint64_t)a2, @"ASSOC_FLAGS");
    sub_10001A610((uint64_t)a2, @"ASSOC_FLAGS", v7 & 0xFFFFFFFE | 1);
  }
  *(unsigned char *)(a1 + 1200) = sub_10001E404((uint64_t)a2, @"COLOCATED_NETWORK_SCOPE_ID") != 0;
  if (sub_10006C1A8(*(void *)(a1 + 64)) && sub_1000C7EBC(a2))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_BEACON_PROTECTION because network is capable (%@)", "__WiFiDeviceManagerAssociateCandidate", a2 message];
    }
    unsigned int v9 = sub_1000C6FC0((uint64_t)a2, @"ASSOC_FLAGS");
    sub_10001A610((uint64_t)a2, @"ASSOC_FLAGS", v9 & 0xFFFF7FFF | 0x8000);
  }
  if (sub_10006C1CC(*(void *)(a1 + 64)))
  {
    unsigned int v10 = sub_1000C7F98((const __CFDictionary *)a2);
    if (v10)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_SAE_PK because network is capable (%@)", "__WiFiDeviceManagerAssociateCandidate", a2 message];
      }
      unsigned int v12 = sub_1000C6FC0((uint64_t)a2, @"ASSOC_FLAGS");
      sub_10001A610((uint64_t)a2, @"ASSOC_FLAGS", v12 & 0xFFFBFFFF | 0x40000);
      unsigned int v13 = sub_1000C6FC0((uint64_t)a2, @"WSEC_FLAGS");
      unsigned int v14 = sub_1000C7FA8((const __CFDictionary *)a2);
      if (v14)
      {
        unsigned int v15 = v13 | 0x20000;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_SAE_PK_RESTRICT mode network is capable (%@)", "__WiFiDeviceManagerAssociateCandidate", a2 message];
        }
      }
      else
      {
        unsigned int v15 = v13 | 0x10000;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_SAE_PK_ENABLE because network is capable (%@)", "__WiFiDeviceManagerAssociateCandidate", a2 message];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_SAE_PK_DISABLE mode network is incapable (%@)", "__WiFiDeviceManagerAssociateCandidate", a2 message];
      }
      unsigned int v15 = 0;
    }
    sub_10001A610((uint64_t)a2, @"WSEC_FLAGS", v15);
  }
  if (sub_10006C1C0(*(void *)(a1 + 64)) && sub_1000C7F3C((CFDictionaryRef *)a2))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_OCV because network is capable (%@)", "__WiFiDeviceManagerAssociateCandidate", a2 message];
    }
    unsigned int v17 = sub_1000C6FC0((uint64_t)a2, @"ASSOC_FLAGS");
    sub_10001A610((uint64_t)a2, @"ASSOC_FLAGS", v17 & 0xFFFDFFFF | 0x20000);
  }
  uint64_t v18 = sub_10001CECC((CFDictionaryRef *)a2);
  id v19 = sub_100005420(a1);
  if (CWFKnownNetworkAssociatedDuringAWDLRealTimeMode())
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_ASSOC_F_PREFER_NON_6GHZ because AWDL real time mode was recently active while associated to this known network (%@)", "__WiFiDeviceManagerAssociateCandidate", v18 message];
    }
    unsigned int v21 = sub_1000C6FC0((uint64_t)a2, @"ASSOC_FLAGS");
    sub_10001A610((uint64_t)a2, @"ASSOC_FLAGS", v21 & 0xFFFEFFFF | 0x10000);
  }

  if (qword_10027DD68)
  {
    uint64_t v23 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN, ASSOC", +[NSString stringWithFormat:@"Attempting auto join association of %@", sub_10001A43C(a2)]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      id v54 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v23 UTF8String]] UTF8String];
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
  }
  if (!sub_10012EE58(a1, a2, 1u))
  {
    NSErrorUserInfoKey v51 = NSLocalizedDescriptionKey;
    CFStringRef v52 = @"Assoc Candidate network not suitable for auto-join";
    CFStringRef v45 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v52 forKeys:&v51 count:1]);
    if (!v45) {
      return v45;
    }
    goto LABEL_68;
  }
  [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") willAssociateWithNetwork:a2 isAutoJoin:1 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
  CFNumberRef v24 = *(void (**)(uint64_t, uint64_t, void *, void, void, void))(a1 + 3888);
  if (v24)
  {
    uint64_t v25 = sub_100017C48(*(void *)(a1 + 64));
    v24(a1, v25, a2, 0, 0, *(void *)(a1 + 3896));
  }
  sub_100105D08(a1);
  [*(id *)(a1 + 6624) asyncTrackNetworksOfInterest:1];
  if (*v6 || v6[142] != -v6[141]) {
    *(_DWORD *)(a1 + 6348) = 1;
  }
  *(_DWORD *)(a1 + 3472) = 0;
  CFNumberRef v27 = (const __CFNumber *)sub_10001E404((uint64_t)a2, @"TransitionDisabledFlags");
  if (v27) {
    CFNumberGetValue(v27, kCFNumberSInt32Type, (void *)(a1 + 3472));
  }
  *(CFAbsoluteTime *)(a1 + 3456) = CFAbsoluteTimeGetCurrent();
  if (*(void *)(a1 + 7328))
  {
    id v29 = +[NSMutableDictionary dictionary];
    CFDictionaryRef v30 = *(void **)(a1 + 7328);
    CFDictionaryRef v31 = (char *)[v30 count];
    if ((unint64_t)(v31 - 1) <= 9)
    {
      [v29 setObject:[v30 allObjects] forKey:@"BSS_BLACKLIST_BSSIDS"];
      sub_10001C6A4((uint64_t)a2, @"BSS_BLACKLIST", v29);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "BssBlacklist: %@", sub_10001E404((uint64_t)a2, @"BSS_BLACKLIST", v49 message];
      }
      goto LABEL_54;
    }
    uint64_t v33 = v31;
    if ((unint64_t)v31 < 0xB)
    {
      unint64_t v36 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        double v48 = v33;
        double v35 = "Unable to add BssBlacklist key to network for join. Count:%lu";
        goto LABEL_53;
      }
    }
    else
    {
      [v29 setObject:[objc_msgSend(objc_msgSend(v30, "allObjects"), "subarrayWithRange:", 0, 10) forKey:@"BSS_BLACKLIST_BSSIDS"];
      sub_10001C6A4((uint64_t)a2, @"BSS_BLACKLIST", v29);
      uint64_t v34 = qword_10027DD68;
      if (qword_10027DD68)
      {
        double v48 = v33;
        uint64_t v49 = sub_10001E404((uint64_t)a2, @"BSS_BLACKLIST");
        double v35 = "BssBlacklist capped to 3. Count:%lu. %@";
        unint64_t v36 = (void *)v34;
LABEL_53:
        [v36 WFLog:4 message:v35, v48, v49];
      }
    }
LABEL_54:
  }
  if (_os_feature_enabled_impl())
  {
    sub_10011645C((uint64_t)a2);
    uint64_t v38 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFNumberRef v39 = sub_10001A43C(a2);
      [v38 WFLog:3, "%s: Setting ColocatedScopeId for %@ - '%@'", "__WiFiDeviceManagerAssociateCandidate", v39, sub_10001E404((uint64_t)a2, @"COLOCATED_NETWORK_SCOPE_ID" message];
    }
  }
  sub_1001164D8(a1, a2);
  if (sub_10001E404((uint64_t)a2, @"COLOCATED_NETWORK_SCOPE_ID")) {
    uint64_t v40 = 12;
  }
  else {
    uint64_t v40 = 1;
  }
  if (!sub_10001E404((uint64_t)a2, @"COLOCATED_NETWORK_SCOPE_ID"))
  {
    sub_100111720(a1);
    sub_10001C6A4((uint64_t)a2, @"COLOCATED_NETWORK_SCOPE_ID", *(const void **)(a1 + 3856));
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Auto Join with colocated scopeID (%@), network (%@)", sub_10001E404((uint64_t)a2, @"COLOCATED_NETWORK_SCOPE_ID", a2 message];
  }
  uint64_t v42 = *(void *)(a1 + 64);
  CFRange v43 = (const void *)sub_100017C48(v42);
  uint64_t v44 = sub_10006CF68(v42, v43, a2, 0, a3, (uint64_t)sub_100147948, a1, (void *)(a1 + 3312));
  if (v44)
  {
    CFStringRef v45 = (NSError *)v44;
    [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") associationDoneWithNetwork:a2 error:v44 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
LABEL_68:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Error initiating association request: %d", v45];
    }
    return v45;
  }
  sub_1001174E8(a1, a2);
  if (*(void *)(a1 + 7368))
  {
    v50[0] = _NSConcreteStackBlock;
    v50[1] = 3221225472;
    v50[2] = sub_100147F4C;
    v50[3] = &unk_100241650;
    v50[4] = a1;
    v50[5] = v40;
    sub_10010A88C(a1, (const void **)a2, (uint64_t)v50);
  }
  return 0;
}

void sub_1001205D0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    if (a2)
    {
      if (!*(void *)(a1 + 6240))
      {
        id v8 = (const void *)sub_100017C48(*(void *)(a1 + 64));
        unsigned int v9 = sub_100018FA8(a1, v8, 1);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Currently associated to %@", "WiFiDeviceManagerUserForcedAssociation", sub_10001A43C(v9) message];
        }
        CFRetain(a2);
        *(void *)(a1 + 6240) = a2;
        *(void *)(a1 + 6224) = a3;
        *(void *)(a1 + 6232) = a4;
        if (v9 && CFEqual(v9, a2))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: Already associated to requested network: %@", "WiFiDeviceManagerUserForcedAssociation", sub_10001A43C(a2) message];
          }
          sub_100120910((void *)a1, (uint64_t)a2, 0);
LABEL_17:
          CFRelease(v9);
          return;
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: starting forced association scan for %@", "WiFiDeviceManagerUserForcedAssociation", sub_10001A43C(a2) message];
        }
        unsigned int v13 = sub_100120A54((const __CFArray *)a2, 0, *(_DWORD *)(a1 + 128), 0x6Eu, 1);
        unsigned int v14 = malloc_type_malloc(0x28uLL, 0x10E0040573E0799uLL);
        if (v14)
        {
          uint64_t v15 = (uint64_t)v14;
          void *v14 = a1;
          uint64_t v16 = (const void *)sub_100017C48(*(void *)(a1 + 64));
          sub_100113508(a1, v16, v13, 0, (uint64_t)sub_100120F0C, v15, 0, 11);
          if (!v13) {
            goto LABEL_16;
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4, @"%s: null scanData", @"WiFiDeviceManagerUserForcedAssociation"];
          }
          if (!v13)
          {
LABEL_16:
            if (!v9) {
              return;
            }
            goto LABEL_17;
          }
        }
        CFRelease(v13);
        goto LABEL_16;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Already associating to %@", "WiFiDeviceManagerUserForcedAssociation", sub_10001A43C(*(const void **)(a1 + 6240)) message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network.", "WiFiDeviceManagerUserForcedAssociation", v19);
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null manager.", "WiFiDeviceManagerUserForcedAssociation", v19);
    }
  }
}

void sub_100120910(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v6 = a1[778];
    if (v6)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: result %d", "__WiFiDeviceManagerDispatchUserForcedAssociationCallback", a3];
      }
      ((void (*)(void *, uint64_t, uint64_t, void))a1[778])(a1, a3, a2, a1[779]);
      a1[778] = 0;
      a1[779] = 0;
      id v8 = (const void *)a1[780];
      if (v8)
      {
        CFRelease(v8);
        a1[780] = 0;
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null callback" :@"__WiFiDeviceManagerDispatchUserForcedAssociationCallback"];
    }
    unsigned int v10 = v7;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null manager.", "__WiFiDeviceManagerDispatchUserForcedAssociationCallback"];
    }
    unsigned int v10 = v9;
  }
}

__CFDictionary *sub_100120A54(const __CFArray *a1, const __CFArray *a2, int a3, unsigned int a4, int a5)
{
  unsigned int v39 = a4;
  int v40 = a3;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return Mutable;
  }
  unsigned int v10 = CFStringCreateMutable(kCFAllocatorDefault, 0);
  CFDictionarySetValue(Mutable, @"SCAN_MERGE", kCFBooleanTrue);
  CFDictionarySetValue(Mutable, @"MONITOR_QBSS_LOAD", kCFBooleanTrue);
  CFDictionarySetValue(Mutable, @"SCAN_INC_BSS_LIST", kCFBooleanTrue);
  int valuePtr = a5;
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(Mutable, @"SCAN_TYPE", v11);
  if (v11) {
    CFRelease(v11);
  }
  int valuePtr = 3;
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(Mutable, @"SCAN_BSS_TYPE", v12);
  if (v12) {
    CFRelease(v12);
  }
  CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v40);
  CFDictionarySetValue(Mutable, @"SCAN_RSSI_THRESHOLD", v13);
  if (v13) {
    CFRelease(v13);
  }
  if (!a1) {
    goto LABEL_35;
  }
  uint64_t v14 = sub_1000C5C14();
  if (v14 != CFGetTypeID(a1))
  {
    CFTypeID TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(a1) && CFArrayGetCount(a1) >= 1)
    {
      if (v10) {
        CFStringAppend(v10, @"Performing auto-join broadcast and directed scan for ");
      }
      CFMutableArrayRef v17 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (v17)
      {
        CFArrayRef theArray = v17;
        CFIndex Count = CFArrayGetCount(a1);
        unint64_t v19 = Count - 1;
        if (Count >= 1)
        {
          CFIndex v20 = 0;
          if (v19 >= 8) {
            unint64_t v19 = 8;
          }
          unint64_t v21 = v19 + 1;
          do
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v20);
            uint64_t v23 = sub_10001A43C(ValueAtIndex);
            if (v23)
            {
              CFNumberRef v24 = v23;
              uint64_t v25 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              if (v25)
              {
                CFDictionaryRef v26 = v25;
                CFDictionarySetValue(v25, @"SSID_STR", v24);
                CFArrayAppendValue(theArray, v26);
                CFRelease(v26);
                if (v10) {
                  CFStringAppendFormat(v10, 0, @"\"%@\" ", v24);
                }
              }
            }
            ++v20;
          }
          while (v21 != v20);
        }
        if (CFArrayGetCount(theArray))
        {
          CFNumberRef v27 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (v27)
          {
            uint64_t v28 = v27;
            CFDictionarySetValue(v27, @"SSID_STR", &stru_100248240);
            CFArrayAppendValue(theArray, v28);
            CFRelease(v28);
          }
          CFDictionarySetValue(Mutable, @"SCAN_SSID_LIST", theArray);
        }
        CFRelease(theArray);
      }
      goto LABEL_37;
    }
LABEL_35:
    if (v10) {
      CFStringAppend(v10, @"Performing auto-join broadcast scan ");
    }
    goto LABEL_37;
  }
  if (v10) {
    CFStringAppend(v10, @"Performing auto-join directed scan for ");
  }
  uint64_t v15 = sub_10001A43C(a1);
  if (v15) {
    CFDictionarySetValue(Mutable, @"SSID_STR", v15);
  }
  if (v10) {
    CFStringAppendFormat(v10, 0, @"\"%@\" ", v15);
  }
LABEL_37:
  if (a4)
  {
    CFNumberRef v29 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v39);
    CFDictionarySetValue(Mutable, @"SCAN_DWELL_TIME", v29);
    if (v10) {
      CFStringAppendFormat(v10, 0, @"with a modified dwell time of %dms ", v39);
    }
    if (v29) {
      CFRelease(v29);
    }
  }
  if (a2)
  {
    CFIndex v30 = CFArrayGetCount(a2);
    if (v30)
    {
      if (v10)
      {
        uint64_t v31 = v30;
        CFStringAppend(v10, @"on channels: ");
        if (v31 >= 1)
        {
          for (CFIndex i = 0; i != v31; ++i)
          {
            CFDictionaryRef v33 = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
            CFStringRef Value = CFDictionaryGetValue(v33, @"CHANNEL");
            CFStringAppendFormat(v10, 0, @"%@ ", Value);
          }
        }
      }
      CFDictionarySetValue(Mutable, @"SCAN_CHANNELS", a2);
    }
  }
  if (v10)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%@", v10 message];
    }
    CFRelease(v10);
  }
  return Mutable;
}

void sub_100120F0C(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  if (!a6)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null scanData" :@"__WiFiDeviceManagerUserForcedAssociationScanCallback"];
    }
    goto LABEL_14;
  }
  id v8 = (void *)*a6;
  sub_100137D44(*a6, a3);
  unsigned int v9 = (const void *)v8[780];
  if (v9)
  {
    if (a3 && CFArrayGetCount(a3))
    {
      CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a3, 0);
      if (CFEqual(v9, ValueAtIndex))
      {
LABEL_6:
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:3, @"%s: disabling device manager", @"__WiFiDeviceManagerUserForcedAssociationScanCallback"];
        }
        sub_10010222C((uint64_t)v8);
        sub_1000C63FC((uint64_t)ValueAtIndex, (uint64_t)v9);
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: found matching network in scan results, proceeding with association", "__WiFiDeviceManagerUserForcedAssociationScanCallback")];
        }
        CFNumberRef v13 = (const void *)sub_100017C48(v8[8]);
        sub_100113EA0((uint64_t)v8, v13, ValueAtIndex, 0, 0, (uint64_t)sub_100148048, 0, 1011);
        goto LABEL_15;
      }
      if (sub_1000C6FE8((const __CFDictionary *)ValueAtIndex) && (sub_1000C8A5C((uint64_t)v9) & 2) != 0)
      {
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:message:3, "%s: scanned network is SAE, provided network is WPA capable", "__WiFiDeviceManagerUserForcedAssociationScanCallback"];
        }
        goto LABEL_6;
      }
      sub_100120910(v8, (uint64_t)v9, 1);
      uint64_t v15 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        uint64_t v16 = "%s: scanned network is not equal";
        goto LABEL_13;
      }
    }
    else
    {
      sub_100120910(v8, (uint64_t)v9, 1);
      uint64_t v15 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        uint64_t v16 = "%s: scan results were empty";
LABEL_13:
        [v15 WFLog:3 message:v16 @"__WiFiDeviceManagerUserForcedAssociationScanCallback"];
      }
    }
LABEL_14:
    goto LABEL_15;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s: network is NULL", "__WiFiDeviceManagerUserForcedAssociationScanCallback"];
  }
  sub_100120910(v8, 0, 1);
LABEL_15:

  free(a6);
}

void sub_1001211D0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    if (a2)
    {
      if (!*(void *)(a1 + 6272))
      {
        id v8 = (const void *)sub_100017C48(*(void *)(a1 + 64));
        unsigned int v9 = sub_100018FA8(a1, v8, 1);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Currently associated to %@", "WiFiDeviceManagerAddNetworkScan", sub_10001A43C(v9) message];
        }
        CFRetain(a2);
        *(void *)(a1 + 6272) = a2;
        *(void *)(a1 + 6256) = a3;
        *(void *)(a1 + 6264) = a4;
        if (v9 && CFEqual(v9, a2))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: Already associated to requested network: %@", "WiFiDeviceManagerAddNetworkScan", sub_10001A43C(a2) message];
          }
          sub_100121514((void *)a1, (uint64_t)a2, 3, 0);
LABEL_17:
          CFRelease(v9);
          return;
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: starting forced association scan for %@", "WiFiDeviceManagerAddNetworkScan", sub_10001A43C(a2) message];
        }
        CFNumberRef v13 = sub_100120A54(0, 0, *(_DWORD *)(a1 + 128), 0, 1);
        uint64_t v14 = malloc_type_malloc(0x28uLL, 0x10E0040573E0799uLL);
        if (v14)
        {
          uint64_t v15 = (uint64_t)v14;
          void *v14 = a1;
          uint64_t v16 = (const void *)sub_100017C48(*(void *)(a1 + 64));
          sub_100113508(a1, v16, v13, 0, (uint64_t)sub_10012168C, v15, 0, 11);
          if (!v13) {
            goto LABEL_16;
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: null scanData" args:("WiFiDeviceManagerAddNetworkScan")];
          }
          if (!v13)
          {
LABEL_16:
            if (!v9) {
              return;
            }
            goto LABEL_17;
          }
        }
        CFRelease(v13);
        goto LABEL_16;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Already associating to %@", "WiFiDeviceManagerAddNetworkScan", sub_10001A43C(*(const void **)(a1 + 6272)) message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: null network." arguments:v19, @"WiFiDeviceManagerAddNetworkScan"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager.", @"WiFiDeviceManagerAddNetworkScan", v19];
    }
  }
}

void sub_100121514(void *a1, uint64_t a2, uint64_t a3, const __CFArray *a4)
{
  if (a1)
  {
    uint64_t v8 = a1[782];
    unsigned int v10 = (void *)qword_10027DD68;
    if (v8)
    {
      if (qword_10027DD68)
      {
        if (a4) {
          CFIndex Count = CFArrayGetCount(a4);
        }
        else {
          CFIndex Count = 0;
        }
        [v10 WFLog:3 message:@"%s: result %d count %ld", @"__WiFiDeviceManagerDispatchAddNetworkScanCallback", a3, Count];
      }
      ((void (*)(void *, uint64_t, const __CFArray *, uint64_t, void))a1[782])(a1, a3, a4, a2, a1[783]);
      a1[782] = 0;
      a1[783] = 0;
      uint64_t v14 = (const void *)a1[784];
      if (v14)
      {
        CFRelease(v14);
        a1[784] = 0;
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null callback", "__WiFiDeviceManagerDispatchAddNetworkScanCallback"];
    }
    CFNumberRef v13 = v9;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager." arguments:("__WiFiDeviceManagerDispatchAddNetworkScanCallback", nil)];
    }
    CFNumberRef v13 = v12;
  }
}

void sub_10012168C(int a1, int a2, CFArrayRef theArray, uint64_t a4, int a5, void *a6)
{
  if (a6)
  {
    unsigned int v9 = (void *)*a6;
    if (theArray
      && CFArrayGetCount(theArray)
      && (MutableCFStringRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, theArray)) != 0)
    {
      CFNumberRef v11 = MutableCopy;
      v14.length = CFArrayGetCount(MutableCopy);
      v14.location = 0;
      CFArraySortValues(v11, v14, (CFComparatorFunction)sub_1000CBB38, 0);
      sub_100121514(v9, v9[784], a5 != 0, v11);
      CFRelease(v11);
    }
    else
    {
      sub_100121514(v9, v9[784], a5 != 0, 0);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, "%s: null scanData", "__WiFiDeviceManagerAddNetworkScanCallback"];
    }
  }

  free(a6);
}

uint64_t sub_1001217B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4552) = a2;
  *(void *)(result + 4560) = a3;
  return result;
}

uint64_t sub_1001217C0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4760) = a2;
  *(void *)(result + 4768) = a3;
  return result;
}

void sub_1001217CC(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: deviceManager is NULL!" args:("WiFiDeviceManagerNoNetworksFoundNotification")];
    }
    goto LABEL_6;
  }
  if (*(_DWORD *)(a1 + 20) != 1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: wifi is off", "WiFiDeviceManagerNoNetworksFoundNotification")];
    }
    goto LABEL_6;
  }
  if (sub_10011F2F0(a1))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: in AWDL session, not reporting no network soft-error", "WiFiDeviceManagerNoNetworksFoundNotification")];
    }
    goto LABEL_6;
  }
  CFTypeRef v4 = (const void *)sub_100016E20(*(void *)(a1 + 64));
  CFTypeRef v5 = sub_100018FA8(a1, v4, 1);
  if (!v5)
  {
    CFArrayRef v6 = *(const __CFArray **)(a1 + 3368);
    if (v6 && CFArrayGetCount(v6))
    {
      if (sub_10006B0CC(*(void *)(a1 + 64)))
      {
        unsigned int v7 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 4552);
        if (v7)
        {
          v7(a1, 2, 0, *(void *)(a1 + 4560));
          goto LABEL_13;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, @"%s: softErrorManagerService callback is NULL!", @"WiFiDeviceManagerNoNetworksFoundNotification"];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: EAP is not idle, not reporting no network soft-error", "WiFiDeviceManagerNoNetworksFoundNotification")];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no known networks at this location, not reporting no network soft-error", "WiFiDeviceManagerNoNetworksFoundNotification")];
      }
    }
LABEL_6:
LABEL_13:
    return;
  }
  uint64_t v8 = v5;
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: associated, not reporting no network soft-error", "WiFiDeviceManagerNoNetworksFoundNotification")];
  }

  CFRelease(v8);
}

void sub_100121A28(uint64_t a1, const __CFString *a2, unint64_t a3, const void *a4, const void *a5, const void *a6)
{
  if (a1)
  {
    if (*(void *)(a1 + 64))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        CFNumberRef v13 = Mutable;
        if ((unint64_t)a2 | a3)
        {
          if (a2)
          {
            CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, a2);
            if (Copy)
            {
              CFStringRef v15 = Copy;
              CFDictionaryAddValue(v13, @"BSSID", Copy);
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: bssidStrRef:%@ bssidLen:%ld ", "WiFiDeviceManagerSetRoam", v15, CFStringGetLength(v15) message];
              }
              CFDataRef v17 = 0;
              if (!a3) {
                goto LABEL_35;
              }
              goto LABEL_21;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:3, "%s: bssidStrRef is NULL", "WiFiDeviceManagerSetRoam"];
            }
LABEL_62:
LABEL_47:
            CFRelease(v13);
            return;
          }
          __int16 v31 = -1;
          *(_DWORD *)bytes = -1;
          CFDataRef v24 = CFDataCreate(kCFAllocatorDefault, bytes, 6);
          if (v24)
          {
            CFDataRef v17 = v24;
            CFDictionaryAddValue(v13, @"BSSID", v24);
            CFStringRef v15 = 0;
            if (!a3)
            {
LABEL_35:
              if (a4) {
                CFDictionaryAddValue(v13, @"BAND_FOR_CHANNEL", a4);
              }
              if (a5) {
                CFDictionaryAddValue(v13, @"BAND_PREFERENCE", a5);
              }
              if (a6) {
                CFDictionaryAddValue(v13, @"ROAM_FLAGS", a6);
              }
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s:calling DeviceSetRoam with :%@", "WiFiDeviceManagerSetRoam", v13 message];
              }
              sub_100072644(*(void *)(a1 + 64), (uint64_t)v13);
              if (v15) {
                CFRelease(v15);
              }
              if (v17) {
                CFRelease(v17);
              }
              goto LABEL_47;
            }
LABEL_21:
            CFDictionaryAddValue(v13, @"CHANNEL", (const void *)a3);
            goto LABEL_35;
          }
LABEL_58:
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"%s: bssidDataRef is NULL" : @"WiFiDeviceManagerSetRoam"];
          }
          goto LABEL_62;
        }
        uint64_t v18 = *(const void **)(a1 + 3512);
        if (v18)
        {
          CFArrayRef v19 = *(const __CFArray **)(a1 + 3528);
          if (!v19) {
            goto LABEL_27;
          }
          v35.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 3528));
          v35.location = 0;
          FirstIndexOfCFStringRef Value = CFArrayGetFirstIndexOfValue(v19, v35, v18);
          if (FirstIndexOfValue == -1
            || (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3528), FirstIndexOfValue)) == 0)
          {
            CFArrayRef v19 = 0;
          }
          else
          {
            uint64_t v22 = ValueAtIndex;
            CFArrayRef v19 = sub_1000CBBE4((uint64_t)ValueAtIndex);
            if (v19)
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "Detected multiAP environment for %@", sub_10001A43C(v22) message];
              }
LABEL_25:
            }
          }
LABEL_27:
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: isMultiAP:%u", "WiFiDeviceManagerSetRoam", v19);
          }
          if (!v18 || v19)
          {
            __int16 v33 = -1;
            *(_DWORD *)CFNumberRef v32 = -1;
            CFDataRef v26 = CFDataCreate(kCFAllocatorDefault, v32, 6);
          }
          else
          {
            CFDataRef v26 = sub_1000C6CA8((uint64_t)v18);
          }
          CFDataRef v17 = v26;
          if (v26)
          {
            CFDictionaryAddValue(v13, @"BSSID", v26);
            CFStringRef v15 = 0;
            goto LABEL_35;
          }
          goto LABEL_58;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, @"%s: currentNetwork is NULL", @"WiFiDeviceManagerSetRoam"];
        }
        CFArrayRef v19 = 0;
        goto LABEL_25;
      }
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:message:3, "%s: bssidInfo allocation failed!", "WiFiDeviceManagerSetRoam"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: manager->device is NULL", "WiFiDeviceManagerSetRoam"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: manager is NULL" arguments:("WiFiDeviceManagerSetRoam")];
    }
  }
}

void sub_100121ED8(uint64_t a1, const void *a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3)
    {
      if (*(unsigned char *)(a1 + 38))
      {
        sub_100073E60(v3, a2);
        return;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Debug CoreCapture is disabled", "WiFiDeviceManagerTriggerCoreCapture")];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: manager->device is NULL", "WiFiDeviceManagerTriggerCoreCapture")];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: manager is NULL", "WiFiDeviceManagerTriggerCoreCapture")];
    }
  }
}

void sub_100121FDC(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v3 = *(double *)(a1 + 5544);
  if (v3 == 0.0 || Current - v3 > 1800.0)
  {
    *(double *)(a1 + 5544) = Current;
    char v4 = 1;
    double v3 = Current;
  }
  else
  {
    char v4 = *(unsigned char *)(a1 + 5552) + 1;
  }
  CFTypeRef v5 = (unsigned __int8 *)(a1 + 5552);
  *(unsigned char *)(a1 + 5552) = v4;
  double v6 = Current - v3;
  double v7 = Current - *(double *)(a1 + 5536);
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:4, "%s: timeSinceFirstDisassoc: %f minutes, link lost: %d times, timeSinceLastChipTrap: %f hour, lastChipTrapTime: %f \n", "WiFiDeviceManagerTriggerReport", v6 / 60.0, *v5, v7 / 3600.0, *(void *)(a1 + 5536)];
  }
  if (*v5 >= 0xAu && v6 <= 1800.0 && (v7 >= 36000.0 || *(double *)(a1 + 5536) == 0.0))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Trigger Watchdog at driver:%@", "WiFiDeviceManagerTriggerReport", @"AssocTimeoutWatchdog" message];
    }
    sub_100121ED8(a1, @"AssocTimeoutWatchdog");
    *CFTypeRef v5 = 0;
    *(void *)(a1 + 5544) = 0;
    *(double *)(a1 + 5536) = Current;
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Trigger CoreCapture at driver:%@", "WiFiDeviceManagerTriggerReport", @"AssocTimeoutCoreCapture" message];
    }
    sub_100121ED8(a1, @"AssocTimeoutCoreCapture");
  }
}

uint64_t sub_1001221EC(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 6208);
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: deviceManager is NULL!", "WiFiDeviceManagerGetCurrentRssi")];
  }
  return 0;
}

uint64_t sub_10012225C(uint64_t a1)
{
  if (a1) {
    return a1 + 5616;
  }
  else {
    return 0;
  }
}

uint64_t sub_100122270(uint64_t a1)
{
  if (a1) {
    return a1 + 9032;
  }
  else {
    return 0;
  }
}

uint64_t sub_100122284(uint64_t a1, CFArrayRef theArray, __CFArray *a3)
{
  if (a1 && theArray && a3)
  {
    if (CFArrayGetCount(theArray) >= 1)
    {
      CFIndex v6 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
        CFArrayRef v8 = *(const __CFArray **)(a1 + 3536);
        v12.length = CFArrayGetCount(v8);
        v12.location = 0;
        LODWORD(v8) = CFArrayContainsValue(v8, v12, ValueAtIndex);
        CFArrayRef v9 = *(const __CFArray **)(a1 + 3528);
        v13.length = CFArrayGetCount(v9);
        v13.location = 0;
        if (v8 | CFArrayContainsValue(v9, v13, ValueAtIndex)) {
          CFArrayAppendValue(a3, ValueAtIndex);
        }
        ++v6;
      }
      while (v6 < CFArrayGetCount(theArray));
    }
    if (CFArrayGetCount(a3)) {
      return 1;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: called with improper arguments!", @"WiFiDeviceManagerFilterForKnownNetworksInScanResults"];
    }
  }
  return 0;
}

BOOL sub_1001223BC(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 5396) == 102 && (*(unsigned char *)(result + 5392) & 1) != 0 || *(unsigned char *)(result + 50) != 0;
  }
  return result;
}

BOOL sub_1001223F0(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 5396) == 102 && (*(unsigned char *)(result + 5392) & 2) != 0 || *(unsigned char *)(result + 49) != 0;
  }
  return result;
}

void sub_100122424(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v8 = *(void *)(a1 + 64);
    CFArrayRef v9 = (const void *)sub_100017C48(v8);
    unsigned int v10 = sub_10001C1B4(v8, v9);
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: setting user auto join %d (trigger %d, locState %d)", "WiFiDeviceManagerSetUserAutoJoin", a2, a3, a4)];
    }
    if (a2 || !v10 || *(unsigned char *)(a1 + 6280))
    {
      if (*(unsigned __int8 *)(a1 + 6280) == a2)
      {
LABEL_32:
        if (v10)
        {
          CFRelease(v10);
        }
        return;
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: new state is disabled while connected to network %@", "WiFiDeviceManagerSetUserAutoJoin", v10 message];
      }
    }
    *(unsigned char *)(a1 + 6280) = a2;
    CFRange v13 = *(void **)(a1 + 7368);
    if (v13) {
      [v13 setControlCenterState:a2 != 0 withKnownLocation:a4 != 3 forInterface:sub_100017C48(*(void *)(a1 + 64))];
    }
    sub_10011083C(a1, 2u, a2 != 0);
    if (a2)
    {
      sub_1001227C8(a1);
      sub_100102284(a1);
      sub_100003EE4(a1, 1);
      *(_DWORD *)(a1 + 192) = 15;
      if (_os_feature_enabled_impl())
      {
        sub_10001FD64(a1, 0x28uLL);
      }
      else
      {
        [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:40 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
        sub_1001028E4(a1, 2, (uint64_t)"WiFiDeviceManagerSetUserAutoJoin");
      }
    }
    else
    {
      if (v10)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: user auto join disabled, disconnecting from current network %@", "WiFiDeviceManagerSetUserAutoJoin", sub_10001A43C(v10) message];
        }
        if (sub_10001FC1C((uint64_t)v10)) {
          sub_10006DB68(*(void *)(a1 + 64), v10, 0);
        }
        CFStringRef v15 = (const void *)sub_100017C48(*(void *)(a1 + 64));
        sub_1000FEA7C(a1, v15, 1011, "WiFiDeviceManagerSetUserAutoJoin", 34328);
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: No current network", "WiFiDeviceManagerSetUserAutoJoin")];
        }
      }
      if ([*(id *)(a1 + 6752) isClientAssociated])
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: stopping Internet Relay over NAN", "WiFiDeviceManagerSetUserAutoJoin")];
        }
        [*(id *)(a1 + 6752) stopSubscriberForPHSOverNAN];
      }
      sub_1001227C8(a1);
      sub_100102284(a1);
      sub_100003EE4(a1, 1);
      *(_DWORD *)(a1 + 192) = 15;
    }
    sub_10010677C(a1);
    goto LABEL_32;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: null device manager" : @"WiFiDeviceManagerSetUserAutoJoin"];
  }
}

void sub_1001227C8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 4552);
    if (v1)
    {
      if (*(unsigned char *)(a1 + 6280)) {
        uint64_t v2 = 7;
      }
      else {
        uint64_t v2 = 8;
      }
      uint64_t v3 = *(void *)(a1 + 4560);
      v1(a1, v2, 0, v3);
      return;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: softErrorManagerService callback is NULL!", "__WiFiDeviceManagerUserAutoJoinPreferenceChangedNotification");
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: deviceManager is NULL!", "__WiFiDeviceManagerUserAutoJoinPreferenceChangedNotification"];
    }
  }
}

void sub_1001228AC(uint64_t a1, int a2)
{
  valuePtr[0] = 0.0;
  *(_DWORD *)buffer = 0;
  if (a1 && *(void *)(a1 + 7368))
  {
    char v4 = (unsigned __int8 *)(a1 + 5216);
    CFIndex v6 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFStringRef v52 = v5;
      double v7 = sub_10001A43C(*(const void **)(a1 + 5208));
      uint64_t v50 = *v4;
      NSErrorUserInfoKey v51 = v7;
      uint64_t v49 = *(unsigned __int8 *)(a1 + 5217);
      uint64_t v48 = *(unsigned int *)(a1 + 5256);
      uint64_t v47 = *(unsigned __int8 *)(a1 + 5362);
      uint64_t v46 = *(unsigned __int8 *)(a1 + 5361);
      uint64_t v45 = *(unsigned __int8 *)(a1 + 5360);
      CFSetRef v8 = *(const __CFSet **)(a1 + 5288);
      if (v8) {
        CFIndex Count = CFSetGetCount(v8);
      }
      else {
        CFIndex Count = 0;
      }
      CFSetRef v9 = *(const __CFSet **)(a1 + 5296);
      if (v9) {
        CFIndex v43 = CFSetGetCount(v9);
      }
      else {
        CFIndex v43 = 0;
      }
      int v53 = a2;
      CFSetRef v10 = *(const __CFSet **)(a1 + 5304);
      if (v10) {
        CFIndex v11 = CFSetGetCount(v10);
      }
      else {
        CFIndex v11 = 0;
      }
      CFSetRef v12 = *(const __CFSet **)(a1 + 5312);
      if (v12) {
        CFIndex v13 = CFSetGetCount(v12);
      }
      else {
        CFIndex v13 = 0;
      }
      uint64_t v14 = *(unsigned __int8 *)(a1 + 5219);
      uint64_t v15 = *(unsigned __int8 *)(a1 + 5221);
      uint64_t v16 = *(unsigned __int8 *)(a1 + 5260);
      uint64_t v17 = *(unsigned __int8 *)(a1 + 5328);
      CFSetRef v18 = *(const __CFSet **)(a1 + 5272);
      if (v18) {
        CFIndex v19 = CFSetGetCount(v18);
      }
      else {
        CFIndex v19 = 0;
      }
      CFSetRef v20 = *(const __CFSet **)(a1 + 5280);
      if (v20) {
        CFSetRef v20 = (const __CFSet *)CFSetGetCount(v20);
      }
      [v6 WFLog:3 message:@"%s: PHSession: Network=%@;Channel=%d;STACount=%d(Max=%d,USB=%d,BT=%d,WiFi=%d,Broadcast=%ld,Hidden=%ld;Other=%ld;"
        "NanLink=%ld);MISEnabled=%d;MISDiscoveryEnabled=%d;MISHidden=%d;MISScanBlocked=%d;LegacyClients=%ld;InstantClient"
        "s=%ld;Force2.4GHz=%d;ForceDisconnectInfra=%d",
        "__WiFiDeviceManagerUpdateSoftApUsageSession",
        v51,
        v50,
        v49,
        v48,
        v47,
        v46,
        v45,
        Count,
        v43,
        v11,
        v13,
        v14,
        v15,
        v16,
        v17,
        v19,
        v20,
        *(unsigned __int8 *)(a1 + 5384),
        *(unsigned __int8 *)(a1 + 5385));
      a2 = v53;
      CFTypeRef v5 = v52;
    }
    CFDictionaryRef v21 = *(const __CFDictionary **)(a1 + 7032);
    if (v21)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v21, @"SOFTAP_LOWPOWER_STATS_LOWPOWER_STATE_DURATION");
      if (Value) {
        CFNumberGetValue(Value, kCFNumberDoubleType, valuePtr);
      }
    }
    CFStringRef v23 = *(const __CFString **)(a1 + 7352);
    if (v23)
    {
      v58.length = CFStringGetLength(*(CFStringRef *)(a1 + 7352));
      v58.location = 0;
      CFStringGetBytes(v23, v58, 0x8000100u, 0, 0, buffer, 4, 0);
    }
    double v24 = *(double *)(a1 + 6304);
    if (v24 == 0.0)
    {
      double v27 = 0.0;
    }
    else
    {
      double v25 = *(double *)(a1 + 6312);
      double v26 = v25 - v24;
      if (v25 == 0.0) {
        double v27 = 0.0;
      }
      else {
        double v27 = v26;
      }
    }
    unsigned int v28 = *(_DWORD *)(a1 + 6288) - 1;
    if (v28 > 7) {
      CFStringRef v29 = @"Unknown";
    }
    else {
      CFStringRef v29 = off_1002420C0[v28];
    }
    CFStringRef v54 = v29;
    int v30 = *(_DWORD *)(a1 + 6292) - 1;
    if (v30 > 0x12) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = (uint64_t)*(&off_100242100 + v30);
    }
    unsigned int v32 = *(_DWORD *)(a1 + 6296) - 1;
    if (v32 > 6) {
      __int16 v33 = 0;
    }
    else {
      __int16 v33 = off_100242198[v32];
    }
    uint64_t v34 = *(void **)(a1 + 7368);
    uint64_t v35 = *v4;
    uint64_t v36 = *(int *)buffer;
    BOOL v37 = *(unsigned char *)(a1 + 5260) != 0;
    BOOL v38 = *(unsigned char *)(a1 + 3411) != 0;
    uint64_t v39 = *(void *)(a1 + 64);
    int v40 = (const void *)sub_10005FC0C(v39);
    int v41 = sub_10006F1D0(v39, v40, 0);
    BYTE3(usedBufLen) = *(_DWORD *)(a1 + 7048) != 0;
    BYTE2(usedBufLen) = v41 != 0;
    BYTE1(usedBufLen) = v38;
    LOBYTE(usedBufLen) = v37;
    [v34 setSoftApState:a2 != 0, v54, v31, v33, v35, v36, valuePtr[0], v27, usedBufLen];
  }
}

void sub_100122C28(uint64_t a1, int a2, unsigned __int16 *a3, __int16 a4, int a5)
{
  CFIndex v6 = (unsigned __int8 *)(a1 + 5218);
  if (!a2)
  {
    ++*(_WORD *)(a1 + 6334);
    goto LABEL_9;
  }
  if (sub_10005A9E0(a3) | a5)
  {
    ++*(_WORD *)(a1 + 6328);
    *(_WORD *)(a1 + 6330) |= a4;
    if (!a5) {
      goto LABEL_9;
    }
  }
  else
  {
    ++*(_WORD *)(a1 + 6332);
    if (!a5) {
      goto LABEL_9;
    }
  }
  unsigned int v9 = v6[1158];
  if (*v6 > v9) {
    v6[1158] = v9 + 1;
  }
LABEL_9:
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: PHSessionMetric: method=%d end=%d teardown=%d, misStart=%f softAPUp=%fsessionEnd=%f, appleDeviceConnectionCount=%d(%x) nonAppleDeviceConnectionCount=%ddeviceDisconnectCount=%d, lpmDuration=%llu, channel=%d nanPhNanStationCount=%d", "WiFiDeviceManagerRecordPHMetricSTAAssocEvent", *(unsigned int *)(a1 + 6288), *(unsigned int *)(a1 + 6292), *(unsigned int *)(a1 + 6296), *(void *)(a1 + 6304), *(void *)(a1 + 6312), *(void *)(a1 + 6320), *(unsigned __int16 *)(a1 + 6328), *(unsigned __int16 *)(a1 + 6330), *(unsigned __int16 *)(a1 + 6332), *(unsigned __int16 *)(a1 + 6334), *(void *)(a1 + 6336), *(unsigned int *)(a1 + 6344), v6[1158]);
  }
}

uint64_t sub_100122D68(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    *(unsigned char *)(result + 3464) = a2;
    uint64_t v4 = *(void *)(result + 64);
    CFTypeRef v5 = (const void *)sub_100017C48(v4);
    CFIndex v6 = (uint64_t *)&kCFBooleanTrue;
    if (!a2) {
      CFIndex v6 = (uint64_t *)&kCFBooleanFalse;
    }
    sub_100017D28(v4, v5, 483, 0, *v6);
    double v7 = *(void **)(v3 + 7368);
    if (v7) {
      [v7 setDeviceChargingState:*(unsigned char *)(v3 + 3464) != 0];
    }
    sub_100037778(*(void *)(v3 + 120), *(unsigned char *)(v3 + 3464));
    uint64_t v8 = *(void *)(v3 + 64);
    char v9 = *(unsigned char *)(v3 + 3464);
    return sub_10007492C(v8, v9);
  }
  return result;
}

void sub_100122E18(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = [[WiFiRecommendationStub alloc] initWithWiFiNetwork:a2];
    *(_DWORD *)(a1 + 3280) = sub_100122EF4(a1, v3, 1);
    if (v3)
    {
      CFRelease(v3);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is nil", @"WiFiDeviceManagerDispatchSimulatedJoinRecommendationNotification"];
    }
  }
}

uint64_t sub_100122EF4(uint64_t a1, void *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 3280);
  if (!a2) {
    return v3;
  }
  if (a3)
  {
    id v8 = 0;
    goto LABEL_9;
  }
  if (!*(_DWORD *)(a1 + 6576) || !*(_DWORD *)(a1 + 108))
  {
LABEL_30:
    return v3;
  }
  if (*(_DWORD *)(a1 + 6716))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: already displayed recommendation in this session (state %d)", "__WiFiDeviceManagerDispatchRecommendation", *(unsigned int *)(a1 + 6716)];
    }
    goto LABEL_29;
  }
  if (![+[WiFiUserInteractionMonitor sharedInstance] isNetworkRecommendationAllowed])
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: recommendation not allowed due to user interaction state", "__WiFiDeviceManagerDispatchRecommendation", v16);
    }
LABEL_29:
    goto LABEL_30;
  }
  id v8 = sub_100005420(a1);
LABEL_9:
  [*(id *)(a1 + 6704) enableTestMode:sub_10016C7C8(*(void *)(a1 + 96)) != 0];
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: dispatching recommendation for %@", "__WiFiDeviceManagerDispatchRecommendation", [a2 SSID] message];
  }
  unsigned int v10 = [*(id *)(a1 + 6704) dispatchNotificationWithRecommendation:a2 currentLocation:v8 force:a3 != 0];
  if (v10 == 2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: blacklisting recommendation for %@", "__WiFiDeviceManagerDispatchRecommendation", [a2 SSID] message];
    }
    CFIndex v11 = sub_1000C5D34((const __CFString *)[a2 SSID]);
    CFIndex v13 = *(void (**)(uint64_t, _WORD *, uint64_t, uint64_t, void))(a1 + 4680);
    if (v13) {
      v13(a1, v11, 1, 6, *(void *)(a1 + 4688));
    }
    goto LABEL_19;
  }
  if (!v10)
  {
    *(_DWORD *)(a1 + 6716) = 2;
    if (*(void *)(a1 + 4664))
    {
      CFIndex v11 = sub_1000C5D34((const __CFString *)[a2 SSID]);
      (*(void (**)(uint64_t, _WORD *, uint64_t, void))(a1 + 4664))(a1, v11, 1, *(void *)(a1 + 4672));
      uint64_t v3 = 14;
LABEL_19:
      if (v11) {
        CFRelease(v11);
      }
      goto LABEL_22;
    }
    uint64_t v3 = 14;
  }
LABEL_22:
  if (v8) {
    CFRelease(v8);
  }
  return v3;
}

void sub_10012317C(uint64_t a1, const void *a2)
{
  if (a1)
  {
    uint64_t v3 = sub_10001A43C(a2);
    int v4 = *(_DWORD *)(a1 + 3280);
    if (v3) {
      [*(id *)(a1 + 6704) dispatchNotificationWithRandomMAC:v3];
    }
    *(_DWORD *)(a1 + 3280) = v4;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is nil", @"WiFiDeviceManagerDispatchSimulatedRandomMACNotification"];
    }
  }
}

void sub_100123220(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (_os_feature_enabled_impl())
    {
      id v4 = [*(id *)(a1 + 6704) dispatchNotificationWithAskToJoinHotspotRecommendation:sub_10001A43C(a2)];
      if (v4)
      {
        id v5 = v4;
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Hotspot Recommendation notification failed: %d", "WiFiDeviceManagerDispatchSimulatedAskToJoinHotspotNotification", v5);
        }
      }
      else
      {
        *(_DWORD *)(a1 + 3280) = 14;
      }
    }
    else
    {
      uint64_t v7 = sub_100017C48(*(void *)(a1 + 64));
      *(_DWORD *)(a1 + 3280) = sub_100123384(a1, v7, 10, 0, a2, 0);
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: state %@", "WiFiDeviceManagerDispatchSimulatedAskToJoinHotspotNotification", sub_100024BE8(*(_DWORD *)(a1 + 3280)) message];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: manager is nil", "WiFiDeviceManagerDispatchSimulatedAskToJoinHotspotNotification", v9];
    }
  }
}

uint64_t sub_100123384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: type=%@(%d)", "__WiFiDeviceManagerDispatchNotification", sub_10005AF90(a3), a3 message];
  }
  if (!*(void *)(a1 + 3936))
  {
LABEL_9:
    if (a3 == 2)
    {
      if (!a5) {
        return *(unsigned int *)(a1 + 3280);
      }
LABEL_25:
      if (sub_10001FC1C((uint64_t)a5)) {
        sub_10006DB68(*(void *)(a1 + 64), a5, 1);
      }
      return *(unsigned int *)(a1 + 3280);
    }
LABEL_17:
    unsigned int v17 = sub_1000C8A18(a5);
    BOOL v19 = a3 == 1 || v17 != 0;
    if (!a5 || !v19) {
      return *(unsigned int *)(a1 + 3280);
    }
    goto LABEL_25;
  }
  BOOL v13 = sub_1000CE714((uint64_t)a5);
  if ((a3 & 0xFFFFFFFD) == 1 && v13)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: network is carrier-bundle based. Suppressing user password prompt. (%@)", "__WiFiDeviceManagerDispatchNotification", a5, v23 message];
    }
LABEL_8:
    goto LABEL_9;
  }
  BOOL v15 = sub_1000C8140((uint64_t)a5);
  if (a3 == 1 && v15)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: network is profile based. Suppressing user password prompt. (%@)", "__WiFiDeviceManagerDispatchNotification", sub_10001A43C(a5) message];
    }
    goto LABEL_17;
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const void *, uint64_t, void))(a1 + 3936))(a1, a2, a3, a4, a5, a6, *(void *)(a1 + 3944));
  if (!v21)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: failed to create notification for type %@(%d)", "__WiFiDeviceManagerDispatchNotification", sub_10005AF90(a3), a3 message];
    }
    goto LABEL_8;
  }
  uint64_t v22 = (const void *)v21;
  if (!a3 && *(_DWORD *)(a1 + 108) != 2) {
    sub_10016D218(*(void *)(a1 + 96));
  }
  sub_1000C2268((uint64_t)v22, (uint64_t)sub_100149810, a1);
  sub_1000DAFA0((uint64_t)v22, *(void *)(a1 + 240));
  *(void *)(a1 + 224) = CFRetain(v22);
  sub_1001409B8(a1, @"autoJoinWaiting", a5, 0);
  return 14;
}

void sub_1001235FC(uint64_t a1, const void *a2)
{
  if (a1)
  {
    uint64_t v4 = sub_100017C48(*(void *)(a1 + 64));
    *(_DWORD *)(a1 + 3280) = sub_100123384(a1, v4, 2, 0, a2, 0);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: state %@", "WiFiDeviceManagerDispatchSimulatedEAPTrustNotification", sub_100024BE8(*(_DWORD *)(a1 + 3280)) message];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: manager is nil", "WiFiDeviceManagerDispatchSimulatedEAPTrustNotification", v6];
    }
  }
}

__CFDictionary *sub_1001236E4(uint64_t a1, const __CFDictionary *a2)
{
  CFNumberRef number = 0;
  CFNumberRef value = 0;
  unint64_t valuePtr = 13;
  CFTypeRef cf = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: manager is NULL!", "WiFiDeviceManagerProcessAutoJoinBlacklistCommandsAndCopyResponse", v31);
    }
    goto LABEL_33;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: request is NULL!", "WiFiDeviceManagerProcessAutoJoinBlacklistCommandsAndCopyResponse", v31);
    }
    goto LABEL_33;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Processing Request:%@", "WiFiDeviceManagerProcessAutoJoinBlacklistCommandsAndCopyResponse", a2 message];
  }
  CFDictionaryGetValueIfPresent(a2, @"command", (const void **)&value);
  if (!value)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s with no command" : @"WiFiDeviceManagerProcessAutoJoinBlacklistCommandsAndCopyResponse" : v31];
    }
    goto LABEL_33;
  }
  CFDictionaryGetValueIfPresent(a2, @"reason", (const void **)&number);
  if (number) {
    CFNumberGetValue(number, kCFNumberLongType, &valuePtr);
  }
  CFDictionaryGetValueIfPresent(a2, @"network", &cf);
  if (cf)
  {
    id v5 = sub_100019658((int)kCFAllocatorDefault, cf);
    if (!v5)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s couldn't convert record to network", "WiFiDeviceManagerProcessAutoJoinBlacklistCommandsAndCopyResponse", v31);
      }
      goto LABEL_33;
    }
    uint64_t v6 = v5;
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 3528)) < 1)
    {
LABEL_14:
      CFDictionaryRef ValueAtIndex = 0;
    }
    else
    {
      CFIndex v7 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3528), v7);
        if (CFEqual(v6, ValueAtIndex)) {
          break;
        }
        if (++v7 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 3528))) {
          goto LABEL_14;
        }
      }
    }
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 3536)) >= 1)
    {
      CFIndex v9 = 0;
      while (1)
      {
        unsigned int v10 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3536), v9);
        if (CFEqual(v6, v10)) {
          break;
        }
        if (++v9 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 3536))) {
          goto LABEL_22;
        }
      }
      CFDictionaryRef ValueAtIndex = v10;
    }
LABEL_22:
    CFRelease(v6);
  }
  else
  {
    CFDictionaryRef ValueAtIndex = 0;
  }
  if (CFStringCompare((CFStringRef)value, @"kAutoJoinBlacklistSet", 0))
  {
    if (CFStringCompare((CFStringRef)value, @"kAutoJoinBlacklistClear", 0)) {
      goto LABEL_34;
    }
    if (ValueAtIndex)
    {
      if (valuePtr != 13)
      {
        id v11 = sub_10000AD1C((uint64_t)ValueAtIndex);
        [*(id *)(a1 + 6648) removeNetworkDenyListInfoWithReason:valuePtr forScanResult:v11];

        goto LABEL_34;
      }
      goto LABEL_71;
    }
LABEL_69:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s - Couldn't find network to set blacklist condition", "WiFiDeviceManagerProcessAutoJoinBlacklistCommandsAndCopyResponse", v31);
    }
    goto LABEL_33;
  }
  if (!ValueAtIndex) {
    goto LABEL_69;
  }
  if (valuePtr == 13)
  {
LABEL_71:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s - Couldn't determine blacklist condition to set", "WiFiDeviceManagerProcessAutoJoinBlacklistCommandsAndCopyResponse", v31);
    }
    goto LABEL_33;
  }
  if (sub_100123CCC(a1, valuePtr, (uint64_t)ValueAtIndex)) {
    goto LABEL_34;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s - __WiFiDeviceManagerSetAutoJoinBlacklistedNetworkCondition %lu failed", "WiFiDeviceManagerProcessAutoJoinBlacklistCommandsAndCopyResponse", valuePtr);
  }
LABEL_33:
LABEL_34:
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableArrayRef v13 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  id v14 = [*(id *)(a1 + 6648) networksInDenyListedState:1];
  if ([v14 count])
  {
    unint64_t v15 = 0;
    CFArrayRef theArray = Mutable;
    uint64_t v35 = a1;
    do
    {
      id v16 = [v14 objectAtIndex:v15];
      unsigned int v17 = sub_1000D1628(v16);
      id v18 = [*(id *)(a1 + 6648) reasonsForNetworkInDenyListedState:v16 state:1 timestamps:0 reasonData:0];
      if (v18)
      {
        BOOL v19 = v18;
        if ([v18 count])
        {
          CFSetRef v20 = v13;
          uint64_t v21 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
          if ([v19 count])
          {
            unint64_t v22 = 0;
            do
            {
              id v23 = [v19 objectAtIndex:v22];
              unsigned int v40 = -1431655766;
              unsigned int v40 = [v23 unsignedIntegerValue];
              CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v40);
              CFArrayAppendValue(v21, v24);
              if (v24) {
                CFRelease(v24);
              }
              ++v22;
            }
            while (v22 < (unint64_t)[v19 count]);
          }
          CFMutableArrayRef v13 = v20;
          CFArrayAppendValue(v20, v21);
          if (v21) {
            CFRelease(v21);
          }
          double v25 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v17);
          CFMutableArrayRef Mutable = theArray;
          CFArrayAppendValue(theArray, v25);
          a1 = v35;
          if (v25) {
            CFRelease(v25);
          }
        }
      }
      ++v15;
    }
    while (v15 < (unint64_t)[v14 count]);
  }
  if (CFArrayGetCount(Mutable))
  {
    double v26 = v33;
    if (CFArrayGetCount(v13) && (CFIndex Count = CFArrayGetCount(v13), Count == CFArrayGetCount(Mutable)))
    {
      unsigned int v28 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFDictionarySetValue(v28, @"networks", Mutable);
      CFDictionarySetValue(v28, @"reasons", v13);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s Mismatched reason and network array counts ", @"__WiFiDeviceManagerCopyAutoJoinBlacklistedNetworksAndReasons"];
      }
      unsigned int v28 = 0;
    }
  }
  else
  {
    unsigned int v28 = 0;
    double v26 = v33;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v28;
}

uint64_t sub_100123CCC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  id v7 = sub_10000AD1C(a3);
  uint64_t v8 = 0;
  if (!a1 || !a3) {
    goto LABEL_12;
  }
  [*(id *)(a1 + 6648) setDenyListedStateExpiryIntervalInSec:1 state:60.0];
  if (a2 > 7)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s - unrecognized WiFiDenyListAddReason" : @"__WiFiDeviceManagerSetAutoJoinBlacklistedNetworkCondition"];
    }
    uint64_t v8 = 0;
    if (v7) {
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  if (((1 << a2) & 0x4F) != 0)
  {
    CFIndex v9 = sub_10001E404(a3, @"BSSID");
    id v10 = sub_100103A84(a1, a2, 0, (uint64_t)v9, 1);
  }
  else
  {
    if (((1 << a2) & 0x90) == 0)
    {
      id v14 = sub_10001E404(a3, @"BSSID");
      int v15 = 5;
      id v10 = sub_100103A84(a1, 5, 0, (uint64_t)v14, 1);
      do
      {
        [*(id *)(a1 + 6648) setNetworkDenyListInfo:v10 forScanResult:v7];
        --v15;
      }
      while (v15);
      goto LABEL_9;
    }
    id v11 = sub_10001E404(a3, @"BSSID");
    id v10 = sub_100103A84(a1, a2, 0, (uint64_t)v11, 1);
    [*(id *)(a1 + 6648) setNetworkDenyListInfo:v10 forScanResult:v7];
    [*(id *)(a1 + 6648) setNetworkDenyListInfo:v10 forScanResult:v7];
  }
  [*(id *)(a1 + 6648) setNetworkDenyListInfo:v10 forScanResult:v7];
LABEL_9:
  if (v10) {

  }
  uint64_t v8 = 1;
LABEL_12:
  if (v7) {
LABEL_13:
  }

LABEL_14:
  return v8;
}

uint64_t sub_100123EA4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(result + 4536);
    if (v3)
    {
      v3(result, a3, a2, *(void *)(result + 4544));
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_100123EE8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 176) == 1;
}

void sub_100123EF8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void (**)(uint64_t, void))(a1 + 4568);
    if (v2) {
      v2(a1, *(void *)(a1 + 4576));
    }
    if (_os_feature_enabled_impl())
    {
      sub_10001FD64(a1, 0x1CuLL);
    }
    else
    {
      sub_100100D74(a1, 6);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager" : @"WiFiDeviceManagerAttemptHomeNetworkTransition"];
    }
  }
}

void sub_100123FE8(uint64_t a1, int a2)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 3528));
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    CFIndex v6 = 0;
    if (a2 == 1) {
      id v7 = "Invalidating";
    }
    else {
      id v7 = "Disabling";
    }
    do
    {
      CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3528), v6);
      if (ValueAtIndex)
      {
        CFIndex v9 = ValueAtIndex;
        if (sub_1000C6B08((uint64_t)ValueAtIndex) == 1)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s %s home NOI for broadcast network '%@'", "WiFiDeviceManagerDisableHomeNetwork", v7, sub_10001A43C(v9) message];
          }
          sub_1001241A4(a1, v9, a2);
        }
      }
      ++v6;
    }
    while (v5 != v6);
  }
  CFIndex v11 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3536));
  if (v11 >= 1)
  {
    CFIndex v12 = v11;
    CFIndex v13 = 0;
    if (a2 == 1) {
      id v14 = "Invalidating";
    }
    else {
      id v14 = "Disabling";
    }
    do
    {
      int v15 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3536), v13);
      if (v15)
      {
        id v16 = v15;
        if (sub_1000C6B08((uint64_t)v15) == 1)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s:%s home NOI for directed network '%@'", "WiFiDeviceManagerDisableHomeNetwork", v14, sub_10001A43C(v16) message];
          }
          sub_1001241A4(a1, v16, a2);
        }
      }
      ++v13;
    }
    while (v12 != v13);
  }
}

void sub_1001241A4(uint64_t a1, void *a2, int a3)
{
  if (a3)
  {
    sub_1000CF1F0(a2, 2);
  }
  else
  {
    id v6 = [*(id *)(a1 + 6624) copyHomeNetworkTransitionDate];
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Disabling NOI home network '%@' until %@", "__WiFiDeviceManagerDisableHomeNetworkHelper", sub_10001A43C(a2), v6 message];
    }
    sub_1000C977C((uint64_t)a2, v6);
    sub_1000C984C((CFMutableDictionaryRef *)a2, 0, @"DisableHomeNetwork");
  }
  CFIndex v9 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    id v10 = sub_10001A43C(a2);
    [v9 WFLog:4, "%s: Updating NOI home-state key for '%@' to %d", "__WiFiDeviceManagerDisableHomeNetworkHelper", v10, sub_1000C6B08((uint64_t)a2) message];
  }

  sub_10010C6B4((NSObject **)a1, a2);
}

uint64_t sub_1001242F0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4568) = a2;
  *(void *)(result + 4576) = a3;
  return result;
}

uint64_t sub_1001242FC(const void *a1)
{
  if (a1)
  {
    if (sub_1000CE714((uint64_t)a1))
    {
      CFIndex v5 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        id v6 = sub_10001A43C(a1);
        uint64_t v3 = 3;
        [v5 WFLog:3, "%s Network with SSID: %@ is unshareable as it's carrier based.", "WiFiNetworkDetermineShareableStatusOfNetworkForNearbyDeviceSetup", v6 message];
      }
      else
      {
        uint64_t v3 = 3;
      }
    }
    else if (sub_1000C81DC((uint64_t)a1) && sub_10001FC1C((uint64_t)a1))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s Network with SSID: %@ is unshareable as it was added by a third party (WiFiNetworkIsAppBased() is true)", "WiFiNetworkDetermineShareableStatusOfNetworkForNearbyDeviceSetup", sub_10001A43C(a1) message];
      }
      uint64_t v3 = 8;
    }
    else if (sub_1000C8A18(a1))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s Network with SSID: %@ is unshareable as it requires a one time password (WiFiNetworkRequiresOneTimePassword() is true)", "WiFiNetworkDetermineShareableStatusOfNetworkForNearbyDeviceSetup", sub_10001A43C(a1) message];
      }
      uint64_t v3 = 9;
    }
    else if (sub_1000C8140((uint64_t)a1) && !sub_10001FC1C((uint64_t)a1))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s Network with SSID: %@ is unshareable as it's currently determined to be profile based and is not EAP (WPA/WPA2 Personal, Open and WEP configurations not supported for profile based networks)", "WiFiNetworkDetermineShareableStatusOfNetworkForNearbyDeviceSetup", sub_10001A43C(a1) message];
      }
      uint64_t v3 = 6;
    }
    else if (sub_10001FC1C((uint64_t)a1) {
           && [+[ManagedConfigWrapper sharedInstance] isEAPShareBlockedByManagedDefault])
    }
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s Network with SSID: %@ is unshareable as it's EAP auth and the profile to block EAP credential sharing is installed", "WiFiNetworkDetermineShareableStatusOfNetworkForNearbyDeviceSetup", sub_10001A43C(a1) message];
      }
      uint64_t v3 = 7;
    }
    else
    {
      if ([+[ManagedConfigWrapper sharedInstance] isWiFiNetworkSubjectToMDM:a1])
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s Network with SSID: %@ is unshareable as it's subject to MDM.", "WiFiNetworkDetermineShareableStatusOfNetworkForNearbyDeviceSetup", sub_10001A43C(a1) message];
        }
        uint64_t v3 = 2;
      }
      else
      {
        uint64_t v3 = 1;
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s Can't determine shareable status, network argument is NULL", "WiFiNetworkDetermineShareableStatusOfNetworkForNearbyDeviceSetup"];
    }
    uint64_t v3 = 0;
  }
  return v3;
}

uint64_t sub_1001245BC(const void *a1)
{
  unsigned int valuePtr = sub_1001242FC(a1);
  CFAllocatorRef Default = CFAllocatorGetDefault();
  CFNumberRef v3 = CFNumberCreate(Default, kCFNumberIntType, &valuePtr);
  if (v3)
  {
    CFNumberRef v4 = v3;
    sub_10001C6A4((uint64_t)a1, @"ShareableStatus", v3);
    CFRelease(v4);
  }
  return valuePtr;
}

uint64_t sub_100124628(const void *a1)
{
  CFNumberRef value = 0;
  if (!sub_10001FC1C((uint64_t)a1))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s not appending EAP info for nearby device setup as the supplied network argument does NOT use EAP auth (SSID: %@)", "WiFiNetworkAppendEAPInformationForNearbyDeviceSetup", sub_10001A43C(a1) message];
    }
    goto LABEL_23;
  }
  if ([+[ManagedConfigWrapper sharedInstance] isEAPShareBlockedByManagedDefault])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s Network with SSID: %@ is unshareable as it's EAP auth and the profile to block EAP credential sharing is installed. Will not append EAP credentials", "WiFiNetworkAppendEAPInformationForNearbyDeviceSetup", sub_10001A43C(a1) message];
    }
    goto LABEL_23;
  }
  if (sub_1000C81DC((uint64_t)a1))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s not appending EAP info for nearby device setup as the supplied network comes from a third party (WiFiNetworkIsAppBased() true). (SSID: %@)", "WiFiNetworkAppendEAPInformationForNearbyDeviceSetup", sub_10001A43C(a1) message];
    }
    goto LABEL_23;
  }
  CFDictionaryRef v2 = sub_1000C5ECC((uint64_t)a1);
  if (!v2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s Got NULL back from WiFiNetworkCopyFilteredRecord(), bailing and not appending EAP info. SSID: %@", "WiFiNetworkAppendEAPInformationForNearbyDeviceSetup", sub_10001A43C(a1) message];
    }
LABEL_23:
    return 0;
  }
  CFDictionaryRef v3 = v2;
  int Default = CFAllocatorGetDefault();
  CFIndex v5 = (CFDictionaryRef *)sub_100019658(Default, v3);
  if (!v5)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s Failed to create WiFiNetworkRef from the result of WiFiNetworkCopyFilteredRecord(), bailing and not appending EAP info. SSID: %@", "WiFiNetworkAppendEAPInformationForNearbyDeviceSetup", sub_10001A43C(a1) message];
    }
    CFRelease(v3);
    return 0;
  }
  id v6 = v5;
  CFDictionaryRef v7 = sub_1000C5FF4(v5, 0);
  CFDictionaryRef v8 = v7;
  if (v7)
  {
    CFDictionaryGetValueIfPresent(v7, @"EAPClientConfiguration", (const void **)&value);
    if (value)
    {
      CFIndex v9 = (const void *)EAPClientConfigurationCopyShareable();
      if (v9)
      {
        id v10 = v9;
        sub_10001C6A4((uint64_t)a1, @"ShareableEAPConfig", v9);
        sub_10001A43C(a1);
        CFIndex v11 = (const void *)EAPTLSCopyTrustExceptionBindings();
        if (v11)
        {
          CFIndex v12 = v11;
          sub_10001C6A4((uint64_t)a1, @"ShareableEAPTrustExceptions", v11);
          CFRelease(v12);
        }
        else
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s failed to copy trust exceptions for network with SSID: %@", "WiFiNetworkAppendEAPInformationForNearbyDeviceSetup", sub_10001A43C(a1) message];
          }
        }
        CFRelease(v10);
        uint64_t v13 = 1;
        goto LABEL_12;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s EAPUtilCopyShareableConfiguration() didn't return a shareable EAP config, most likely cause is unsupported EAPAcceptTypes (SSID: %@)", "WiFiNetworkAppendEAPInformationForNearbyDeviceSetup", sub_10001A43C(a1) message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s no kEAPOLControlEAPClientConfiguration for network (SSID: %@), won't append", "WiFiNetworkAppendEAPInformationForNearbyDeviceSetup", sub_10001A43C(a1) message];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s no eapProfile (or Got NULL back from WiFiNetworkCopyPreparedEAPProfile()) for network (SSID: %@), won't append", "WiFiNetworkAppendEAPInformationForNearbyDeviceSetup", sub_10001A43C(a1) message];
    }
  }
  uint64_t v13 = 0;
LABEL_12:
  CFRelease(v3);
  CFRelease(v6);
  if (v8) {
    CFRelease(v8);
  }
  return v13;
}

uint64_t sub_1001249CC(uint64_t a1, const void *a2)
{
  if (a1 && a2)
  {
    CFDictionaryRef v2 = sub_100018FA8(a1, a2, 1);
    if (sub_10001FC1C((uint64_t)v2))
    {
      sub_10001A43C(v2);
      EAPTLSSetTrustExceptionBindings();
      uint64_t v3 = 1;
      if (v2) {
LABEL_5:
      }
        CFRelease(v2);
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s not destroying EAP trust for current network is it's not EAP  (SSID: %@)", "WiFiDeviceManagerDestroyEAPTrustExceptionsForCurrentNetwork", sub_10001A43C(v2) message];
      }
      uint64_t v3 = 0;
      if (v2) {
        goto LABEL_5;
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s requires manager and interface name args", "WiFiDeviceManagerDestroyEAPTrustExceptionsForCurrentNetwork")
    }
    return 0;
  }
  return v3;
}

void sub_100124AE0(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 5408) = a2;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Battery Manager set ", "WiFiDeviceManagerSetBatteryManager")];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Battery manager is NULL", "WiFiDeviceManagerSetBatteryManager")];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: manager is NULL", "WiFiDeviceManagerSetBatteryManager"];
    }
  }
}

void sub_100124BB8(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: enabled %d", "WiFiDeviceManagerSetAvailabilityEngineIsEnabled", a2);
    }
    *(unsigned char *)(a1 + 6712) = a2;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: manager is NULL", "WiFiDeviceManagerSetAvailabilityEngineIsEnabled"];
    }
  }
}

uint64_t sub_100124C80(uint64_t result)
{
  if (result) {
    return sub_100072C28(*(void *)(result + 64));
  }
  return result;
}

uint64_t sub_100124C90(uint64_t result)
{
  if (result) {
    return sub_100072C34(*(void *)(result + 64));
  }
  return result;
}

uint64_t sub_100124CA0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = _os_feature_enabled_impl();
    if (result)
    {
      uint64_t result = sub_100072C40(*(void *)(v1 + 64));
      if (result) {
        return sub_10006C0D0(*(void *)(v1 + 64)) != 0;
      }
    }
  }
  return result;
}

uint64_t sub_100124CFC(uint64_t result)
{
  if (result) {
    return sub_10006C0D0(*(void *)(result + 64));
  }
  return result;
}

uint64_t sub_100124D0C(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Error: %s: device manager is NULL", @"WiFiDeviceManagerLQMConfig"];
    }
  }
  return 4294963393;
}

void sub_100124D80(uint64_t a1, int a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: WiFiBatteryMgmt : NULL Manager", @"WiFiDeviceManagerHandleChangedPowerBudgetValue"];
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: WiFiBatteryMgmt : NULL Manager", @"WiFiDeviceManagerHandleChangedPowerBudgetValue"];
    }
    CFIndex v5 = v15;
    goto LABEL_6;
  }
  if (a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFiBatteryMgmt : resource has become available for auto-join/awdl. manager->state.enable(%d)", "WiFiDeviceManagerHandleChangedPowerBudgetValue", *(unsigned __int8 *)(a1 + 3305));
    }
    [*(id *)(a1 + 5408) requestPowerResource:0 withDetails:0];
    CFIndex v5 = v4;
LABEL_6:
    return;
  }
  id v6 = (const void *)sub_100017C48(*(void *)(a1 + 64));
  CFDictionaryRef v7 = sub_100018FA8(a1, v6, 1);
  if (v7)
  {
    CFDictionaryRef v8 = v7;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFiBatteryMgmt : resource no longer available for connection. Disassociating...", "WiFiDeviceManagerHandleChangedPowerBudgetValue")];
    }
    id v10 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    sub_1000FEA7C(a1, v10, 1006, "WiFiDeviceManagerHandleChangedPowerBudgetValue", 36237);
    CFRelease(v8);
  }
  else if (*(unsigned char *)(a1 + 3305))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: WiFiBatteryMgmt : resource no longer available for auto-join. Aborting...", @"WiFiDeviceManagerHandleChangedPowerBudgetValue"];
    }
    sub_100102284(a1);
    sub_100102708(a1);
  }
  if (*(_DWORD *)(a1 + 5424))
  {
    CFIndex v12 = *(void **)(a1 + 5432);
    if (v12) {

    }
    *(void *)(a1 + 5432) = 0;
    uint64_t v13 = (const void *)sub_10005FC0C(*(void *)(a1 + 64));
    sub_100101DF0(a1, v13);
  }
}

void sub_100124FD4(uint64_t a1, int a2, void *a3)
{
  if (!a3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null request.", "WiFiDeviceManagerHandleUnchangedPowerBudgetValue")
    }
    goto LABEL_38;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null device manager." : @"WiFiDeviceManagerHandleUnchangedPowerBudgetValue"];
    }
LABEL_38:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: WiFiBatteryMgmt : NULL Request or Null Device Manager", "WiFiDeviceManagerHandleUnchangedPowerBudgetValue"];
    }
    return;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: WiFiBatteryMgmt : power budget resource is present and unchanged!.", "WiFiDeviceManagerHandleUnchangedPowerBudgetValue"];
  }
  if (*a3)
  {
    if (*a3 != 1) {
      return;
    }
    uint64_t v7 = a3[1];
    if (!v7) {
      return;
    }
    if (a2)
    {
      uint64_t v8 = sub_100118728(a1, *(const __CFString **)(v7 + 16), *(const __CFDictionary **)(v7 + 24), *(void *)(v7 + 8), *(void *)(v7 + 40), *(const void **)(v7 + 48));
      if (!v8) {
        goto LABEL_22;
      }
      CFIndex v9 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void, uint64_t))(v7 + 8);
      if (!v9) {
        goto LABEL_22;
      }
      uint64_t v10 = v8;
      uint64_t v11 = *(void *)(v7 + 16);
      uint64_t v12 = *(void *)(v7 + 40);
      uint64_t v13 = a1;
    }
    else
    {
      CFIndex v9 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void, uint64_t))(v7 + 8);
      if (!v9)
      {
LABEL_22:
        id v14 = *(const void **)(v7 + 16);
        if (v14)
        {
          CFRelease(v14);
          *(void *)(v7 + 16) = 0;
        }
        int v15 = *(const void **)(v7 + 24);
        if (v15)
        {
          CFRelease(v15);
          *(void *)(v7 + 24) = 0;
        }
        id v16 = *(const void **)(v7 + 48);
        if (v16) {
          CFRelease(v16);
        }
        free((void *)v7);
        return;
      }
      uint64_t v11 = *(void *)(v7 + 16);
      uint64_t v12 = *(void *)(v7 + 40);
      uint64_t v13 = a1;
      uint64_t v10 = 4294963390;
    }
    v9(v13, v11, v10, 0, 0, v12);
    goto LABEL_22;
  }
  if (a2 && *(unsigned char *)(a1 + 3305))
  {
    *(_DWORD *)(a1 + 192) = 9;
    if (_os_feature_enabled_impl())
    {
      sub_10001FD64(a1, 0x17uLL);
    }
    else
    {
      [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:23 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
      sub_1001028E4(a1, 2, (uint64_t)"WiFiDeviceManagerAutoAssociateStart");
    }
  }
}

void sub_100125288(uint64_t a1)
{
  if (*(void *)(a1 + 4440))
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      uint64_t v3 = Mutable;
      CFDictionarySetValue(Mutable, @"WiFiHostApStateIdentifier", kCFBooleanTrue);
      if ((*(unsigned char *)(a1 + 7057) & 4) != 0) {
        CFBooleanRef v4 = kCFBooleanTrue;
      }
      else {
        CFBooleanRef v4 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v3, @"WiFiHostApStateEnable", v4);
      if (*(unsigned char *)(a1 + 5260)) {
        CFBooleanRef v5 = kCFBooleanTrue;
      }
      else {
        CFBooleanRef v5 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v3, @"WiFiHostApStateADHSMode", v5);
      id v6 = *(void (**)(uint64_t, uint64_t, void, __CFDictionary *))(a1 + 4440);
      uint64_t v7 = sub_100062FB4(*(void *)(a1 + 64));
      v6(a1, v7, *(void *)(a1 + 4448), v3);
      CFRelease(v3);
    }
  }
}

void sub_1001253A8(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: test mode %d", "WiFiDeviceManagerAutoInstantHotspotTestMode", a2);
    }
    switch((int)a2)
    {
      case 1:
        uint64_t v5 = a1;
        int v6 = 1;
        goto LABEL_7;
      case 2:
        uint64_t v5 = a1;
        int v6 = 0;
LABEL_7:
        sub_100022E04(v5, v6);
        break;
      case 3:
        *(unsigned char *)(a1 + 6832) = 0;
        break;
      case 4:
        *(unsigned char *)(a1 + 6832) = 1;
        break;
      default:
        return;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: manager is NULL", @"WiFiDeviceManagerAutoInstantHotspotTestMode"];
    }
  }
}

void sub_1001254F0(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 3280);
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    if ([+[WiFiUserInteractionMonitor sharedInstance] isSetupCompleted])
    {
      if (*(_DWORD *)(a1 + 20) == 1
        && sub_100125970(a1)
        && (v4 - 16) >= 5
        && ([*(id *)(a1 + 3656) isTimeDeferredNetworksPresent] & 1) == 0
        && v4 != 12)
      {
        double v5 = 0.0;
        if (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 6944) <= 180.0) {
          double v5 = *(double *)(a1 + 6944) - CFAbsoluteTimeGetCurrent() + 180.0;
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: autoHS mode = %d Primary Interface = %d AutoHotspotAssociated=%d wifiNetworkAutoJoinFailed=%d autoHotspotEnableRequest=%d RemainTimingout=%f", "__WiFiDeviceManagerScanForAutoInstantHotspot", *(unsigned int *)(a1 + 6804), sub_100072C58(*(void *)(a1 + 64)), *(unsigned __int8 *)(a1 + 6896), *(unsigned __int8 *)(a1 + 6897), *(unsigned __int8 *)(a1 + 6800), *(void *)&v5);
        }
        if (!*(unsigned char *)(a1 + 6896)
          && *(unsigned char *)(a1 + 6897)
          && sub_100125970(a1)
          && (a2 || CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 6944) > 180.0))
        {
          CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 6840));
          *(_DWORD *)(a1 + 6888) = 2;
          *(void *)(a1 + 6880) = 0x300000002;
          *(unsigned char *)(a1 + 6968) = 0;
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Scanning for Hotspot Devices: curr state %d next state %d", "__WiFiDeviceManagerScanForAutoInstantHotspot", *(unsigned int *)(a1 + 3280), 16);
          }
          if (*(_DWORD *)(a1 + 3280) == 16) {
            sub_1000FB0D0(a1, 0);
          }
          *(_DWORD *)(a1 + 6892) = 0;
          *(_DWORD *)(a1 + 3280) = 16;
          *(CFAbsoluteTime *)(a1 + 6944) = CFAbsoluteTimeGetCurrent();
          *(_OWORD *)(a1 + 6456) = 0u;
          *(_OWORD *)(a1 + 6472) = 0u;
          *(_OWORD *)(a1 + 6488) = 0u;
          *(_OWORD *)(a1 + 6504) = 0u;
          *(_OWORD *)(a1 + 6520) = 0u;
          *(_OWORD *)(a1 + 6536) = 0u;
          *(_OWORD *)(a1 + 6552) = 0u;
          uint64_t v8 = *(NSObject **)(a1 + 6808);
          dispatch_time_t v9 = dispatch_time(0, 30000000000);
          dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0);
          [*(id *)(a1 + 6744) startBrowsing];
          *(CFAbsoluteTime *)(a1 + 6960) = CFAbsoluteTimeGetCurrent();
          ++*(_DWORD *)(a1 + 6172);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:3 message:@"__WiFiDeviceManagerScanForAutoInstantHotspot: setup not completed yet."];
      }
    }
  }
}

void sub_1001257D4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: enabled %@(%d)", "WiFiDeviceManagerSetAutoInstantHotspotMode", sub_10005AF40(a2), a2 message];
    }
    *(_DWORD *)(a1 + 6804) = a2;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: manager is NULL", "WiFiDeviceManagerSetAutoInstantHotspotMode"];
    }
  }
}

void sub_1001258A8(uint64_t a1, double a2)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: interval %f", "WiFiDeviceManagerSetAutoInstantHotspotTriggerInterval", *(void *)&a2);
    }
    *(double *)(a1 + 6864) = a2;
    *(double *)(a1 + 6872) = a2;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: manager is NULL", "WiFiDeviceManagerSetAutoInstantHotspotTriggerInterval"];
    }
  }
}

CFNumberRef sub_100125970(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 6804) || sub_100072C58(*(void *)(a1 + 64)) || *(unsigned char *)(a1 + 7024)) {
    return 0;
  }
  if (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 6952) > 15.0
    && (*(_DWORD *)(a1 + 6804) != 1 || *(unsigned char *)(a1 + 6800))
    || (CFNumberRef result = sub_100125A54(a1), result))
  {
    if (![+[WiFiUserInteractionMonitor sharedInstance] isAnyCallInProgress])return (const __CFNumber *)1; {
    if (qword_10027DD68)
    }
      [((id)qword_10027DD68) WFLog:3, @"%s: call is in progress, not scanning for auto hotspot.", @"__WiFiDeviceManagerIsAutoHotspotTriggerStateValid"];
    return 0;
  }
  return result;
}

CFNumberRef sub_100125A54(uint64_t a1)
{
  CFNumberRef result = *(const __CFNumber **)(a1 + 3512);
  if (result)
  {
    CFNumberRef result = (const __CFNumber *)sub_10001E71C((uint64_t)result);
    if (result)
    {
      if (sub_10001E404(*(void *)(a1 + 3512), @"WiFiAutoInstantHotspotJoining") != kCFBooleanTrue) {
        return 0;
      }
      CFNumberRef result = (const __CFNumber *)sub_10001E404(*(void *)(a1 + 3512), @"lastDisconnectReasonKey");
      if (result)
      {
        unsigned int valuePtr = -1431655766;
        CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
        return (const __CFNumber *)(valuePtr <= 2 && CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 6952) <= 600.0);
      }
    }
  }
  return result;
}

uint64_t sub_100125B10(uint64_t a1)
{
  return *(unsigned int *)(a1 + 6972);
}

void sub_100125B18(uint64_t a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    double v5 = (const void *)sub_100017C48(v4);
    sub_100017D28(v4, v5, 537, 0, (uint64_t)v3);
  }
  if (v3) {
    CFRelease(v3);
  }
}

void sub_100125B94(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: setting 3bars source: %@", "WiFiDeviceManagerSet3BarsSource", a2 message];
    }
    if (!*(void *)(a1 + 6672))
    {
      id v6 = objc_alloc_init((Class)NSMutableSet);
      *(void *)(a1 + 6696) = a2;
      [v6 addObject:a2];
      id v7 = objc_alloc_init((Class)WiFiWalletSource);
      *(void *)(a1 + 6688) = v7;
      if (v7) {
        [v6 addObject:v7];
      }
      *(void *)(a1 + 6672) = [objc_alloc((Class)WiFiAvailabilityEngine) initWithProviders:+[NSSet setWithObjects:](NSSet, "setWithObjects:", *(void *)(a1 + 6680), 0) sources:v6];
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: initialized availability engine" : @"WiFiDeviceManagerSet3BarsSource"];
      }
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_100125D5C;
      void v9[3] = &unk_100241708;
      v9[4] = a1;
      [*(id *)(a1 + 6672) setAvailabilityChangedCallback:v9];
      if (v6) {
        CFRelease(v6);
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: 3bars source is nil" :@"WiFiDeviceManagerSet3BarsSource"];
    }
  }
}

void sub_100125D5C(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: recommendations found: %@", "__WiFiDeviceManagerHandleNetworkAvailabilityChange", a2 message];
  }
}

void *sub_100125DCC(void *result, uint64_t a2, double a3, double a4)
{
  if (result)
  {
    id v7 = result;
    if (result[840] != a2 || *((double *)result + 841) != a3 || *((double *)result + 842) != a4)
    {
      result[840] = a2;
      *((double *)result + 841) = a3;
      *((double *)result + 842) = a4;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: mode:%ld time:%f secs, distance: %f m", "WiFiDeviceManagerSetJoinAlertParams", a2, *(void *)&a4, *(void *)&a3)];
      }
      dispatch_time_t v9 = (void *)v7[838];
      BOOL v10 = v7[840] == 255 || *((_DWORD *)v7 + 1644) == 255;
      return [v9 enableTestMode:v10];
    }
  }
  return result;
}

void sub_100125ED0(uint64_t a1, const __CFArray *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager.", @"WiFiDeviceManagerGetInterfaceDataUsage"];
    }
    goto LABEL_107;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null mutableIfStatsArrayRef."];
    }
    goto LABEL_107;
  }
  uint64_t v4 = sub_100016E20(*(void *)(a1 + 64));
  if (!v4)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, "%s: null ifName.", "WiFiDeviceManagerGetInterfaceDataUsage"];
    }
LABEL_107:
    return;
  }
  double v5 = (const void *)v4;
  CFArrayRef v6 = (const __CFArray *)DHCPSDHCPLeaseListCreate();
  CFArrayRef theArray = a2;
  uint64_t v68 = a1;
  if (v6)
  {
    CFArrayRef v7 = v6;
    if (CFArrayGetCount(v6) < 1)
    {
      CFMutableDictionaryRef Mutable = 0;
    }
    else
    {
      CFIndex v8 = 0;
      CFMutableDictionaryRef Mutable = 0;
      BOOL v10 = (const void *)kDHCPSPropDHCPHWAddress;
      uint64_t v11 = (const void *)kDHCPSPropName;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v8);
        if (ValueAtIndex)
        {
          CFDictionaryRef v13 = ValueAtIndex;
          if (Mutable
            || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks)) != 0)
          {
            id v14 = Mutable;
            CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v13, v10);
            id v16 = CFDictionaryGetValue(v13, v11);
            CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(kCFAllocatorDefault, Value, @",");
            if (ArrayBySeparatingStrings)
            {
              CFArrayRef v18 = ArrayBySeparatingStrings;
              if (CFArrayGetCount(ArrayBySeparatingStrings) >= 2)
              {
                BOOL v19 = CFArrayGetValueAtIndex(v18, 1);
                if (v19)
                {
                  if (v16) {
                    CFDictionaryAddValue(v14, v19, v16);
                  }
                }
              }
              CFRelease(v18);
            }
            CFMutableDictionaryRef Mutable = v14;
          }
        }
        ++v8;
      }
      while (v8 < CFArrayGetCount(v7));
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: DHCP client hostnames: %@", "WiFiDeviceManagerGetInterfaceDataUsage", Mutable message];
    }
    CFRelease(v7);
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  uint64_t v21 = sub_100072E88(*(void *)(a1 + 64), v5);
  CFDictionaryRef theDict = v21;
  if (!v21)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null ifUsageRef. Nothing to update." args:("WiFiDeviceManagerGetInterfaceDataUsage")];
    }
    if (Mutable) {
      goto LABEL_97;
    }
    return;
  }
  CFDictionaryRef v71 = Mutable;
  id v23 = [+[NSCalendar currentCalendar](NSCalendar, "currentCalendar") dateFromComponents:[+[NSCalendar currentCalendar](NSCalendar, "currentCalendar") components:28 fromDate:+[NSDate date]]];
  CFArrayRef v24 = theArray;
  if (CFArrayGetCount(theArray) < 1) {
    goto LABEL_33;
  }
  CFIndex v25 = 0;
  while (1)
  {
    CFDictionaryRef v26 = (const __CFDictionary *)CFArrayGetValueAtIndex(v24, v25);
    if (v26)
    {
      CFDictionaryRef v27 = v26;
      unsigned int v28 = CFDictionaryGetValue(v26, @"DataUsageInterfaceName");
      CFStringRef v29 = CFDictionaryGetValue(v27, @"DataUsageDate");
      if (v28)
      {
        int v30 = v29;
        if (v29)
        {
          if (CFEqual(v28, v5) && CFEqual(v30, v23)) {
            break;
          }
        }
      }
    }
    ++v25;
    CFArrayRef v24 = theArray;
    if (v25 >= CFArrayGetCount(theArray)) {
      goto LABEL_33;
    }
  }
  CFAllocatorRef v31 = kCFAllocatorDefault;
  MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v27);
  CFArrayRemoveValueAtIndex(theArray, v25);
  if (MutableCopy)
  {
    uint64_t v34 = MutableCopy;
  }
  else
  {
LABEL_33:
    CFAllocatorRef v31 = kCFAllocatorDefault;
    unsigned int v32 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    __int16 v33 = v5;
    uint64_t v34 = v32;
    CFDictionarySetValue(v32, @"DataUsageInterfaceName", v33);
    CFDictionarySetValue(v34, @"DataUsageDate", v23);
  }
  CFArrayRef v35 = (const __CFArray *)CFDictionaryGetValue(v34, @"DataUsageInterfacePeerList");
  CFMutableDictionaryRef Mutable = v71;
  if (v35) {
    CFMutableArrayRef v36 = CFArrayCreateMutableCopy(v31, 0, v35);
  }
  else {
    CFMutableArrayRef v36 = CFArrayCreateMutable(v31, 0, &kCFTypeArrayCallBacks);
  }
  CFArrayRef v37 = v36;
  CFArrayRef v38 = (const __CFArray *)CFDictionaryGetValue(theDict, @"DataUsageInterfacePeerList");
  if (v38)
  {
    CFMutableArrayRef v39 = CFArrayCreateMutableCopy(v31, 0, v38);
    if (!v37) {
      goto LABEL_86;
    }
  }
  else
  {
    CFMutableArrayRef v39 = 0;
    if (!v37) {
      goto LABEL_86;
    }
  }
  CFArrayRef v67 = v39;
  if (CFArrayGetCount(v37) >= 1)
  {
    CFIndex v40 = 0;
    CFAllocatorRef allocator = v31;
    do
    {
      uint64_t v75 = 0;
      unint64_t valuePtr = 0;
      uint64_t v73 = 0;
      unint64_t v74 = 0;
      CFDictionaryRef v41 = (const __CFDictionary *)CFArrayGetValueAtIndex(v37, v40);
      if (v41)
      {
        CFDictionaryRef v42 = CFDictionaryCreateMutableCopy(v31, 0, v41);
        if (v42)
        {
          CFIndex v43 = v42;
          uint64_t v44 = CFDictionaryGetValue(v42, @"DataUsageInterfacePeerAddr");
          if (v44)
          {
            uint64_t v45 = v44;
            if (!CFDictionaryGetValue(v43, @"DataUsageInterfacePeerDisplayName")
              && v71
              && CFDictionaryGetValue(v71, v45))
            {
              uint64_t v46 = CFDictionaryGetValue(v71, v45);
              CFDictionarySetValue(v43, @"DataUsageInterfacePeerDisplayName", v46);
            }
            CFNumberRef v47 = (const __CFNumber *)CFDictionaryGetValue(v43, @"DataUsageInterfacePeerLastBytes");
            if (v47) {
              CFNumberGetValue(v47, kCFNumberSInt64Type, &valuePtr);
            }
            CFNumberRef v48 = (const __CFNumber *)CFDictionaryGetValue(v43, @"DataUsageInterfacePeerTotalBytes");
            if (v48) {
              CFNumberGetValue(v48, kCFNumberSInt64Type, &v75);
            }
            if (v38 && CFArrayGetCount(v38) >= 1)
            {
              CFIndex v49 = 0;
              while (1)
              {
                CFDictionaryRef v50 = (const __CFDictionary *)CFArrayGetValueAtIndex(v38, v49);
                if (v50)
                {
                  CFDictionaryRef v51 = v50;
                  CFStringRef v52 = CFDictionaryGetValue(v50, @"DataUsageInterfacePeerAddr");
                  if (v52)
                  {
                    int v53 = v52;
                    CFNumberRef v54 = (const __CFNumber *)CFDictionaryGetValue(v51, @"DataUsageInterfacePeerLastBytes");
                    if (v54) {
                      CFNumberGetValue(v54, kCFNumberSInt64Type, &v74);
                    }
                    CFNumberRef v55 = (const __CFNumber *)CFDictionaryGetValue(v51, @"DataUsageInterfacePeerTotalBytes");
                    if (v55) {
                      CFNumberGetValue(v55, kCFNumberSInt64Type, &v73);
                    }
                    if (CFEqual(v45, v53)) {
                      break;
                    }
                  }
                }
                if (++v49 >= CFArrayGetCount(v38)) {
                  goto LABEL_65;
                }
              }
              CFAllocatorRef v31 = allocator;
              if (v67)
              {
                if (CFArrayGetCount(v67))
                {
                  v78.length = CFArrayGetCount(v67);
                  v78.location = 0;
                  FirstIndexOfCFStringRef Value = CFArrayGetFirstIndexOfValue(v67, v78, v51);
                  if (FirstIndexOfValue != -1)
                  {
                    CFIndex v62 = FirstIndexOfValue;
                    if (qword_10027DD68) {
                      [((id)qword_10027DD68) WFLog:message:3, "%s: processed peer at index %ld", "WiFiDeviceManagerGetInterfaceDataUsage", v62];
                    }
                    CFArrayRemoveValueAtIndex(v67, v62);
                  }
                }
              }
              unint64_t v56 = v74;
              if (v74 < valuePtr) {
                v75 += valuePtr;
              }
            }
            else
            {
LABEL_65:
              unint64_t v56 = 0;
              v75 += valuePtr;
              CFAllocatorRef v31 = allocator;
            }
            unint64_t valuePtr = v56;
            CFNumberRef v57 = CFNumberCreate(v31, kCFNumberSInt64Type, &valuePtr);
            if (v57)
            {
              CFNumberRef v58 = v57;
              CFDictionarySetValue(v43, @"DataUsageInterfacePeerLastBytes", v57);
              CFRelease(v58);
            }
            CFNumberRef v59 = CFNumberCreate(v31, kCFNumberSInt64Type, &v75);
            if (v59)
            {
              CFNumberRef v60 = v59;
              CFDictionarySetValue(v43, @"DataUsageInterfacePeerTotalBytes", v59);
              CFRelease(v60);
            }
            CFArraySetValueAtIndex(v37, v40, v43);
          }
          CFRelease(v43);
        }
      }
      ++v40;
    }
    while (v40 < CFArrayGetCount(v37));
  }
  CFMutableArrayRef v39 = v67;
  if (v67 && CFArrayGetCount(v67))
  {
    v79.length = CFArrayGetCount(v67);
    v79.location = 0;
    CFArrayAppendArray(v37, v67, v79);
  }
  CFDictionarySetValue(v34, @"DataUsageInterfacePeerList", v37);
  CFMutableDictionaryRef Mutable = v71;
LABEL_86:
  if (v34) {
    CFArrayAppendValue(theArray, v34);
  }
  uint64_t v64 = *(const void **)(v68 + 7032);
  if (v64)
  {
    CFRelease(v64);
    *(void *)(v68 + 7032) = 0;
  }
  *(void *)(v68 + 7032) = sub_100064734();
  if (v39) {
    CFRelease(v39);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (v34) {
    CFRelease(v34);
  }
  CFRelease(theDict);
  if (Mutable) {
LABEL_97:
  }
    CFRelease(Mutable);
}

void sub_10012676C(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Debug CoreCapture %d", "WiFiDeviceManagerSetDebugCoreCapture", a2];
    }
    *(unsigned char *)(a1 + 38) = a2;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: manager is NULL" arguments:("WiFiDeviceManagerSetDebugCoreCapture")];
    }
  }
}

void sub_100126830(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: CoreCapture On Assisted AJ Failure %d", "WiFiDeviceManagerSetCoreCaptureOnAssistedAJFailure", a2];
    }
    *(unsigned char *)(a1 + 39) = a2;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: manager is NULL", @"WiFiDeviceManagerSetCoreCaptureOnAssistedAJFailure"];
    }
  }
}

id sub_1001268F4(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void **)(a1 + 6672);
  if (!v1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: availability engine is NULL", "WiFiDeviceManagerCopyNetworkRecommendations"];
    }
    goto LABEL_50;
  }
  id v2 = [v1 availableNetworks];
  if (!v2 || (CFNumberRef v3 = v2, ![v2 count]))
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:3 message:@"%s: no available networks" arguments:qword_10027DD68];
    }
LABEL_50:
    return 0;
  }
  id v23 = objc_alloc_init((Class)NSMutableArray);
  if (!v23) {
    return 0;
  }
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v4)
  {
    id v5 = v4;
    id obj = v3;
    uint64_t v22 = *(void *)v29;
    do
    {
      for (CFIndex i = 0; i != v5; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v29 != v22) {
          objc_enumerationMutation(obj);
        }
        CFArrayRef v7 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        id v8 = objc_alloc_init((Class)NSMutableDictionary);
        if ([v7 SSID]) {
          [v8 setObject:[v7 SSID] forKey:@"ssid"];
        }
        if (objc_msgSend(objc_msgSend(v7, "network"), "accessPoints")) {
          [v8 setObject:[+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(objc_msgSend(objc_msgSend(v7, "network"), "accessPoints"), "count"))] forKey:@"apCount"];
        }
        [v7 network];
        if (objc_opt_respondsToSelector())
        {
          [v7 network];
          [v8 setObject:[self uniqueIdentifier] forKey:@"uniqueIdentifier"];
        }
        id v9 = [objc_msgSend(v7, "network") source];
        CFStringRef v10 = @"unknown";
        if (v9 == (id)2) {
          CFStringRef v10 = @"3bars";
        }
        if (v9 == (id)1) {
          CFStringRef v11 = @"wallet";
        }
        else {
          CFStringRef v11 = v10;
        }
        [v8 setObject:v11 forKey:@"source"];
        if (objc_msgSend(objc_msgSend(v7, "scannedNetwork"), "BSSID")) {
          [v8 setObject:[v7 scannedNetwork] BSSID forKey:@"scannedBSSID"];
        }
        if (objc_msgSend(objc_msgSend(v7, "scannedNetwork"), "essMembers")) {
          [v8 setObject:[+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(objc_msgSend(objc_msgSend(v7, "scannedNetwork"), "essMembers"), "count"))] forKey:@"essMemberCount"];
        }
        if (objc_msgSend(objc_msgSend(v7, "network"), "popularityScore")) {
          [v8 setObject:[+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(objc_msgSend(objc_msgSend(v7, "network"), "popularityScore"), "score"))] forKey:@"popularityScore"];
        }
        if (objc_msgSend(objc_msgSend(v7, "network"), "password")) {
          [v8 setObject:[objc_msgSend(objc_msgSend(v7, "network"), "password")] forKey:@"password"];
        }
        if (objc_msgSend(objc_msgSend(v7, "network"), "attributes"))
        {
          id v12 = objc_alloc_init((Class)NSMutableString);
          long long v24 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          id v13 = [objc_msgSend(v7, "network") attributes];
          id v14 = [v13 countByEnumeratingWithState:&v24 objects:v32 count:16];
          if (v14)
          {
            id v15 = v14;
            uint64_t v16 = *(void *)v25;
            do
            {
              for (CFIndex j = 0; j != v15; CFIndex j = (char *)j + 1)
              {
                if (*(void *)v25 != v16) {
                  objc_enumerationMutation(v13);
                }
                unsigned int v18 = [*(id *)(*((void *)&v24 + 1) + 8 * (void)j) intValue] - 1;
                if (v18 <= 5) {
                  [v12 appendString:off_1002421D0[v18]];
                }
              }
              id v15 = [v13 countByEnumeratingWithState:&v24 objects:v32 count:16];
            }
            while (v15);
          }
          if ([v12 length]) {
            [v8 setObject:[v12 stringByTrimmingCharactersInSet:+[NSCharacterSet whitespaceCharacterSet](NSCharacterSet, "whitespaceCharacterSet")] forKey:@"attributes"];
          }
        }
        [v23 addObject:v8];
      }
      id v5 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
    }
    while (v5);
  }
  return v23;
}

uint64_t sub_100126DA0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4696) = a2;
  *(void *)(result + 4704) = a3;
  return result;
}

uint64_t sub_100126DAC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

void sub_100126DB4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 6704);
    if (v2)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: reseting user notification states", @"WiFiDeviceManagerResetAvailabilityEngine"];
      }
      id v4 = *(void **)(a1 + 6704);
      [v4 reset];
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null user notification manager" args:{"WiFiDeviceManagerResetAvailabilityEngine"}];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null wifidevice manager" :@"WiFiDeviceManagerResetAvailabilityEngine"];
    }
  }
}

__CFDictionary *sub_100126EB8(uint64_t a1, const __CFDictionary *a2)
{
  CFNumberRef number = 0;
  CFNumberRef value = 0;
  uint64_t v31 = 13;
  CFTypeRef cf = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: manager is NULL!", "WiFiDeviceManagerProcessBssBlacklistCommandsAndCopyResponse"];
    }
    goto LABEL_76;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: request is NULL!", "WiFiDeviceManagerProcessBssBlacklistCommandsAndCopyResponse"];
    }
    goto LABEL_76;
  }
  CFDictionaryGetValueIfPresent(a2, @"command", (const void **)&value);
  if (!value)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s with no command" : @"WiFiDeviceManagerProcessBssBlacklistCommandsAndCopyResponse"];
    }
    goto LABEL_76;
  }
  if (!sub_1000704FC(*(void *)(a1 + 64)))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: BssBlacklist not supported on this platform.. Bailing!", "WiFiDeviceManagerProcessBssBlacklistCommandsAndCopyResponse"];
    }
    goto LABEL_76;
  }
  CFDictionaryGetValueIfPresent(a2, @"network", &cf);
  if (!cf)
  {
    CFStringRef v11 = 0;
    goto LABEL_22;
  }
  id v5 = sub_100019658((int)kCFAllocatorDefault, cf);
  if (!v5)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s couldn't convert record to network", "WiFiDeviceManagerProcessBssBlacklistCommandsAndCopyResponse"];
    }
    goto LABEL_76;
  }
  CFArrayRef v6 = v5;
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 3528)) < 1)
  {
LABEL_11:
    CFDictionaryRef ValueAtIndex = 0;
  }
  else
  {
    CFIndex v7 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3528), v7);
      if (CFEqual(v6, ValueAtIndex)) {
        break;
      }
      if (++v7 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 3528))) {
        goto LABEL_11;
      }
    }
  }
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 3536)) < 1)
  {
LABEL_16:
    if (!ValueAtIndex)
    {
LABEL_20:
      CFStringRef v11 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    CFIndex v9 = 0;
    while (1)
    {
      CFStringRef v10 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3536), v9);
      if (CFEqual(v6, v10)) {
        break;
      }
      if (++v9 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 3536))) {
        goto LABEL_16;
      }
    }
    CFDictionaryRef ValueAtIndex = v10;
    if (!v10) {
      goto LABEL_20;
    }
  }
  CFStringRef v11 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)ValueAtIndex);
  id v12 = sub_10001E404((uint64_t)v6, @"BSSID");
  sub_10001C6A4((uint64_t)v11, @"BSSID", v12);
LABEL_21:
  CFRelease(v6);
LABEL_22:
  if (CFEqual((CFStringRef)value, @"kBssBlacklistSet"))
  {
    CFDictionaryGetValueIfPresent(a2, @"reason", (const void **)&number);
    if (number) {
      CFNumberGetValue(number, kCFNumberLongType, &v31);
    }
    if (!v11)
    {
LABEL_74:
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s - Couldn't find network to set blacklist condition", @"WiFiDeviceManagerProcessBssBlacklistCommandsAndCopyResponse"];
      }
LABEL_76:
      long long v25 = sub_10012759C(a1, &off_100264168);
      goto LABEL_63;
    }
    uint64_t v17 = v31;
    if (v17 == 13)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s - Couldn't determine blacklist condition to set", "WiFiDeviceManagerProcessBssBlacklistCommandsAndCopyResponse", v29);
      }
    }
    else
    {
      id v19 = sub_10000AD1C((uint64_t)v11);
      [*(id *)(a1 + 6648) setDenyListedStateExpiryIntervalInSec:1 state:60.0];
      if (v17 == 8)
      {
        CFSetRef v20 = sub_10001E404((uint64_t)v11, @"BSSID");
        id v21 = sub_100103A84(a1, 8, 0, (uint64_t)v20, 2);
        [*(id *)(a1 + 6648) setNetworkDenyListInfo:v21 forScanResult:v19];
        [*(id *)(a1 + 6648) setNetworkDenyListInfo:v21 forScanResult:v19];
        [*(id *)(a1 + 6648) setNetworkDenyListInfo:v21 forScanResult:v19];
        uint64_t v22 = *(void **)(a1 + 7368);
        if (v22) {
          [v22 addFaultEvent:9 forInterface:sub_100017C48(*(void *)(a1 + 64))];
        }
        if (v21) {
      }
        }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s - unrecognized WiFiDenyListAddReason", "__WiFiDeviceManagerSetBssBlacklistedNetworkCondition")];
        }
      }
      if (v19) {

      }
      if (v17 == 8) {
        goto LABEL_55;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s - __WiFiDeviceManagerSetBssBlacklistedNetworkCondition %lu failed", "WiFiDeviceManagerProcessBssBlacklistCommandsAndCopyResponse", v31];
      }
    }
LABEL_55:
    long long v25 = sub_10012759C(a1, &off_100264168);
LABEL_62:
    CFRelease(v11);
    goto LABEL_63;
  }
  CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a2, @"timeout");
  if (v13 && (int valuePtr = 0, CFNumberGetValue(v13, kCFNumberIntType, &valuePtr)))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s - Configuring BssBlacklist Expiry interval to %d", "WiFiDeviceManagerProcessBssBlacklistCommandsAndCopyResponse", valuePtr];
    }
    [*(id *)(a1 + 6648) setDenyListedStateExpiryIntervalInSec:2 state:(double)valuePtr];
    int v15 = 1;
  }
  else
  {
    int v15 = 0;
  }
  if (CFEqual((CFStringRef)value, @"kBssBlacklistClear"))
  {
    if (v11)
    {
      id v23 = sub_10000AD1C((uint64_t)v11);
      [*(id *)(a1 + 6648) removeNetworkDenyListInfoWithReason:1 forScanResult:v23];

      goto LABEL_57;
    }
    goto LABEL_74;
  }
  if (CFStringCompare((CFStringRef)value, @"kBssBlacklistRemove", 0))
  {
    if (CFEqual((CFStringRef)value, @"kBssBlacklistExpire"))
    {
      [*(id *)(a1 + 6648) removeExpiredDenyListedState:2];
      if (![*(id *)(a1 + 6648) denyListedNetworkCount])
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s - Couldn't perform BSS unblacklist" : @"WiFiDeviceManagerProcessBssBlacklistCommandsAndCopyResponse"];
        }
LABEL_81:
        goto LABEL_61;
      }
    }
  }
  else
  {
    [*(id *)(a1 + 6648) removeDenyListStateWithDenyListRemoveReason:5];
    if (![*(id *)(a1 + 6648) denyListedNetworkCount])
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s - Couldn't perform time triggered BSS unblacklist", @"WiFiDeviceManagerProcessBssBlacklistCommandsAndCopyResponse"];
      }
      goto LABEL_81;
    }
  }
LABEL_57:
  if (v15)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s - Resetting BssBlacklist Expiry interval" : @"WiFiDeviceManagerProcessBssBlacklistCommandsAndCopyResponse"];
    }
    [*(id *)(a1 + 6648) setDenyListedStateExpiryIntervalInSec:2 state:300.0];
  }
LABEL_61:
  long long v25 = sub_10012759C(a1, &off_100264168);
  if (v11) {
    goto LABEL_62;
  }
LABEL_63:
  return v25;
}

__CFDictionary *sub_10012759C(uint64_t a1, void *a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableArrayRef v4 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableArrayRef v5 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableArrayRef v6 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  id obj = a2;
  id v7 = [a2 countByEnumeratingWithState:&v57 objects:v61 count:16];
  if (!v7)
  {
LABEL_51:
    CFMutableArrayRef v39 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionarySetValue(v39, @"networks", Mutable);
    CFDictionarySetValue(v39, @"reasons", v4);
    CFDictionarySetValue(v39, @"timestamps", v6);
    CFDictionarySetValue(v39, @"reasonData", v5);
LABEL_61:
    CFDictionaryRef v41 = v44;
    if (v6) {
      goto LABEL_62;
    }
    goto LABEL_63;
  }
  id v8 = v7;
  uint64_t v9 = *(void *)v58;
  CFDictionaryRef v51 = v5;
  CFArrayRef theArray = v4;
  CFIndex v49 = Mutable;
  CFDictionaryRef v50 = v6;
  uint64_t v45 = *(void *)v58;
LABEL_3:
  uint64_t v10 = 0;
  id v46 = v8;
  while (1)
  {
    if (*(void *)v58 != v9) {
      objc_enumerationMutation(obj);
    }
    id v54 = [*(id *)(*((void *)&v57 + 1) + 8 * v10) integerValue];
    id v11 = [[*(id *)(a1 + 6648) networksInDenyListedState:];
    if (!v11) {
      goto LABEL_49;
    }
    id v12 = v11;
    if (![v11 count]) {
      goto LABEL_49;
    }
    uint64_t v48 = v10;
    if ([v12 count])
    {
      CFNumberRef v13 = v12;
      unint64_t v14 = 0;
      int v53 = v12;
      do
      {
        id v15 = [v13 objectAtIndex:v14];
        uint64_t v16 = sub_1000D1628(v15);
        if (v16)
        {
          uint64_t v17 = v16;
          id v18 = +[NSMutableArray array];
          id v19 = +[NSMutableArray array];
          id v20 = [*(id *)(a1 + 6648) reasonsForNetworkInDenyListedState:v15 state:v54 timestamps:v18 reasonData:v19];
          if (v20)
          {
            id v21 = v20;
            if ([v20 count])
            {
              uint64_t v22 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
              if ([v21 count])
              {
                unint64_t v23 = 0;
                do
                {
                  id v24 = [v21 objectAtIndex:v23];
                  LODWORD(valuePtr) = -1431655766;
                  LODWORD(valuePtr) = [v24 unsignedIntegerValue];
                  CFNumberRef v25 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
                  CFArrayAppendValue(v22, v25);
                  if (v25) {
                    CFRelease(v25);
                  }
                  ++v23;
                }
                while (v23 < (unint64_t)[v21 count]);
              }
              CFArrayAppendValue(theArray, v22);
              if (v22) {
                CFRelease(v22);
              }
              long long v26 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v17);
              CFMutableArrayRef Mutable = v49;
              CFArrayAppendValue(v49, v26);
              CFNumberRef v13 = v53;
              if (v26) {
                CFRelease(v26);
              }
            }
          }
          if (v18 && [v18 count])
          {
            long long v27 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
            if ([v18 count])
            {
              unint64_t v28 = 0;
              do
              {
                id v29 = [v18 objectAtIndex:v28];
                uint64_t valuePtr = -1;
                [v29 doubleValue];
                uint64_t valuePtr = v30;
                CFNumberRef v31 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
                CFArrayAppendValue(v27, v31);
                if (v31) {
                  CFRelease(v31);
                }
                ++v28;
              }
              while (v28 < (unint64_t)[v18 count]);
            }
            CFArrayAppendValue(v50, v27);
            CFNumberRef v13 = v53;
            if (v27) {
              CFRelease(v27);
            }
          }
          if (v19 && [v19 count])
          {
            unsigned int v32 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
            if ([v19 count])
            {
              unint64_t v33 = 0;
              do
              {
                id v34 = [v19 objectAtIndex:v33];
                LODWORD(valuePtr) = -1431655766;
                LODWORD(valuePtr) = [v34 unsignedIntegerValue];
                CFNumberRef v35 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
                CFArrayAppendValue(v32, v35);
                if (v35) {
                  CFRelease(v35);
                }
                ++v33;
              }
              while (v33 < (unint64_t)[v19 count]);
            }
            CFArrayAppendValue(v51, v32);
            if (v32) {
              CFRelease(v32);
            }
          }
          CFRelease(v17);
        }
        ++v14;
      }
      while (v14 < (unint64_t)[v13 count]);
    }
    if (!CFArrayGetCount(Mutable))
    {
      CFMutableArrayRef v39 = 0;
      CFDictionaryRef v41 = v44;
      CFMutableArrayRef v5 = v51;
      CFMutableArrayRef v4 = theArray;
      CFMutableArrayRef v6 = v50;
      if (!v50) {
        goto LABEL_63;
      }
LABEL_62:
      CFRelease(v6);
      goto LABEL_63;
    }
    CFMutableArrayRef v4 = theArray;
    CFMutableArrayRef v6 = v50;
    CFMutableArrayRef v5 = v51;
    if (!CFArrayGetCount(theArray)) {
      break;
    }
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count != CFArrayGetCount(Mutable)) {
      break;
    }
    if (!CFArrayGetCount(v50) || (CFIndex v37 = CFArrayGetCount(theArray), v37 != CFArrayGetCount(v50)))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, "%s Mismatched reason and timestamp array counts ", "__WiFiDeviceManagerCopyDenyListedNetworksAndReasons"];
      }
      goto LABEL_60;
    }
    uint64_t v9 = v45;
    id v8 = v46;
    uint64_t v10 = v48;
    if (!CFArrayGetCount(v51) || (CFIndex v38 = CFArrayGetCount(theArray), v38 != CFArrayGetCount(v51)))
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Mismatched reason and reasonData array counts ", "__WiFiDeviceManagerCopyDenyListedNetworksAndReasons")];
      }
LABEL_60:
      CFMutableArrayRef v39 = 0;
      goto LABEL_61;
    }
LABEL_49:
    if ((id)++v10 == v8)
    {
      id v8 = [obj countByEnumeratingWithState:&v57 objects:v61 count:16];
      if (v8) {
        goto LABEL_3;
      }
      goto LABEL_51;
    }
  }
  CFDictionaryRef v41 = v44;
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Mismatched reason and network array counts ", "__WiFiDeviceManagerCopyDenyListedNetworksAndReasons")];
  }
  CFMutableArrayRef v39 = 0;
  if (v50) {
    goto LABEL_62;
  }
LABEL_63:
  if (v5) {
    CFRelease(v5);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v39;
}

id sub_100127C0C(uint64_t a1, uint64_t a2)
{
  CFNumberRef v3 = (const char *)[sub_10001E404(a2, @"BSSID") UTF8String];
  CFMutableArrayRef v4 = +[NSData dataWithBytes:ether_aton(v3) length:6];
  CFMutableArrayRef v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);

  return [v5 addObject:v4];
}

uint64_t sub_100127C7C(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 64);
  CFMutableArrayRef v4 = (const void *)sub_100017C48(v3);

  return sub_10006C05C(v3, v4, a2);
}

void sub_100127CC4(uint64_t a1, const __CFDictionary *a2)
{
  int valuePtr = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFMutableArrayRef v5 = Mutable;
    CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(a2, @"ADAPTIVE_ROAM_RSSI_TRIGGER");
    if (v6
      && (CFNumberRef v7 = v6,
          CFNumberGetValue(v6, kCFNumberIntType, &valuePtr),
          *(_DWORD *)(a1 + 7384) = valuePtr,
          (CFMutableArrayRef v8 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks)) != 0))
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(const void **)(a1 + 7392);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(a1 + 7392) = 0;
      }
      id v11 = CFDictionaryGetValue(a2, @"ADAPTIVE_ROAM_CHANNELS_INFO");
      *(void *)(a1 + 7392) = v11;
      if (v11)
      {
        CFNumberRef value = v7;
        CFDictionaryRef theDict = v5;
        CFRetain(v11);
        CFArrayRef v12 = *(const __CFArray **)(a1 + 7392);
        if (v12)
        {
          CFIndex Count = CFArrayGetCount(v12);
          if (Count >= 1)
          {
            CFIndex v14 = Count;
            CFIndex v15 = 0;
            key = (void *)kWAMessageKeyChannel;
            uint64_t v16 = (const void *)kWAMessageKeyChannelFlags;
            do
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 7392), v15);
              if (ValueAtIndex)
              {
                id v18 = ValueAtIndex;
                CFTypeID v19 = CFGetTypeID(ValueAtIndex);
                CFTypeID TypeID = CFDictionaryGetTypeID();
                CFTypeID v21 = CFGetTypeID(v18);
                if (v21 == CFNumberGetTypeID()) {
                  uint64_t v22 = v18;
                }
                else {
                  uint64_t v22 = 0;
                }
                if (v19 == TypeID)
                {
                  unint64_t v23 = CFDictionaryGetValue((CFDictionaryRef)v18, key);
                  id v24 = CFDictionaryGetValue((CFDictionaryRef)v18, v16);
                  if (!v23) {
                    goto LABEL_23;
                  }
                  uint64_t v22 = v24;
                  if (!v24) {
                    goto LABEL_23;
                  }
                  CFNumberRef v25 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                  if (!v25) {
                    goto LABEL_23;
                  }
                  long long v26 = v25;
                  CFDictionarySetValue(v25, @"IO80211Channel", v23);
                  long long v27 = v26;
                  CFStringRef v28 = @"IO80211ChannelFlags";
                }
                else
                {
                  if (!v22) {
                    goto LABEL_23;
                  }
                  long long v27 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                  if (!v27) {
                    goto LABEL_23;
                  }
                  long long v26 = v27;
                  CFStringRef v28 = @"IO80211Channel";
                }
                CFDictionarySetValue(v27, v28, v22);
                CFArrayAppendValue(v9, v26);
                CFRelease(v26);
              }
LABEL_23:
              ++v15;
            }
            while (v14 != v15);
          }
        }
        CFMutableArrayRef v5 = theDict;
        CFDictionarySetValue(theDict, @"IO80211InterfaceAdaptiveRoamChanList", v9);
        CFDictionarySetValue(theDict, @"IO80211InterfaceAdaptiveRoamRSSITrigger", value);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Adaptive Roam Params %@", theDict message];
        }
        uint64_t v30 = *(void *)(a1 + 64);
        CFNumberRef v31 = (const void *)sub_100017C48(v30);
        sub_100017D28(v30, v31, 532, 0, (uint64_t)theDict);
        if (*(void *)(a1 + 7368)) {
          [*(id *)(a1 + 7368) setRoamingConfiguration:*[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v9) forInterface:sub_100017C48(*(void *)(a1 + 64))];
        }
      }
      CFRelease(v5);
    }
    else
    {
      uint64_t v9 = v5;
    }
    CFRelease(v9);
  }
}

void sub_100127FD8(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v35 = a1;
  if (a1)
  {
    id v3 = +[WiFiUsageAccessPointProfile beaconsAndWPSInfo];
    if ([v3 count])
    {
      [v2 appendFormat:@"ApProfile and WPS info for the latest %lu BSSID this device associaed with in the past 7 days:", [v3 count]];
      CFMutableArrayRef v5 = "WiFiDeviceManagerDumpToLog";
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s - HexDump of beacons from the latest %lu BSSID this device associated with in the past 7 days (timestamped when received by wifid):", "WiFiDeviceManagerDumpToLog", objc_msgSend(v3, "count")];
      }
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      id v36 = [v3 countByEnumeratingWithState:&v41 objects:v48 count:16];
      if (v36)
      {
        uint64_t v33 = *(void *)v42;
        id v34 = v3;
        do
        {
          for (CFIndex i = 0; i != v36; CFIndex i = (char *)i + 1)
          {
            if (*(void *)v42 != v33) {
              objc_enumerationMutation(v3);
            }
            CFNumberRef v7 = *(void **)(*((void *)&v41 + 1) + 8 * i);
            id v8 = [v3 objectForKeyedSubscript:v7];
            [v7 timeIntervalSince1970];
            uint64_t v9 = v5;
            id v11 = [NSString stringWithFormat:@"%s - %f: %@", v5, v10, [WiFiUsagePrivacyFilter toHEXString:length:](WiFiUsagePrivacyFilter, "toHEXString:length:", objc_msgSend(objc_msgSend(v8, "beacon"), "bytes"), objc_msgSend(objc_msgSend(v8, "beacon"), "length"))];
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              CFArrayRef v12 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v11 UTF8String]] UTF8String];
              *(_DWORD *)long long buf = 136446210;
              CFNumberRef v47 = v12;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            }
            [v2 appendFormat:@"\n%@ '%@' %@ (%@) - ", [v8 bssid], [v8 ssid], [v8 apProfile_shortID], [v8 apProfileID]];
            long long v39 = 0u;
            long long v40 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            id v13 = [[objc_msgSend(v8, "apProfileWPSInfo") allKeys];
            id v14 = [v13 countByEnumeratingWithState:&v37 objects:v45 count:16];
            if (v14)
            {
              id v15 = v14;
              uint64_t v16 = *(void *)v38;
              do
              {
                for (CFIndex j = 0; j != v15; CFIndex j = (char *)j + 1)
                {
                  if (*(void *)v38 != v16) {
                    objc_enumerationMutation(v13);
                  }
                  [v2 appendFormat:@"%@=%@ ", *(void *)(*((void *)&v37 + 1) + 8 * (void)j), [objc_msgSend(objc_msgSend(v8, "apProfileWPSInfo"), "objectForKeyedSubscript:", *(void *)(*((void *)&v37 + 1) + 8 * (void)j))]];
                }
                id v15 = [v13 countByEnumeratingWithState:&v37 objects:v45 count:16];
              }
              while (v15);
            }
            CFMutableArrayRef v5 = v9;
            id v3 = v34;
          }
          id v36 = [v34 countByEnumeratingWithState:&v41 objects:v48 count:16];
        }
        while (v36);
      }
      id v18 = +[NSString stringWithFormat:@"%s - %@", v5, v2];
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        CFTypeID v19 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v18 UTF8String]] UTF8String];
        *(_DWORD *)long long buf = 136446210;
        CFNumberRef v47 = v19;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s -  HexDump of beacon from the latest AP we associated with (beacon captures shotly after association)", "WiFiDeviceManagerDumpToLog")];
      }
      if (*(_DWORD *)(v35 + 1208)) {
        goto LABEL_26;
      }
      uint64_t v22 = *(unsigned int *)(v35 + 1212);
      if (v22)
      {
        int v23 = 0;
        id v24 = (unsigned __int8 *)(v35 + 1216);
        unint64_t v25 = v35 + 1216 + v22;
        do
        {
          uint64_t v26 = 0xA2E2E2E2E2E2ELL;
          if (v24 == (unsigned __int8 *)(v35 + 1216)) {
            uint64_t v26 = 0xA2D2D2D2D2D2DLL;
          }
          qword_10027D7C0 = v26;
          long long v27 = (char *)&qword_10027D7C0 + 7;
          while (1)
          {
            int v28 = v23;
            if ((v23 & 0xF) == 0)
            {
              int v29 = snprintf(v27, (char *)&dword_10027DBC0 - v27, "%04X ", v23);
              if (&v27[v29] <= (char *)&dword_10027DBC0) {
                v27 += v29;
              }
              else {
                long long v27 = (char *)&dword_10027DBC0;
              }
            }
            int v30 = snprintf(v27, (char *)&dword_10027DBC0 - v27, "%02X ", *v24);
            if (&v27[v30] <= (char *)&dword_10027DBC0) {
              v27 += v30;
            }
            else {
              long long v27 = (char *)&dword_10027DBC0;
            }
            if ((++v23 & 0xF) == 0 && v27 < (char *)&unk_10027DBBF)
            {
              *v27++ = 10;
              if (&qword_10027D7C0 - v27 + 1024 <= 0x82) {
                break;
              }
            }
            if ((unint64_t)++v24 >= v25) {
              goto LABEL_48;
            }
          }
          ++v24;
LABEL_48:
          CFNumberRef v31 = (char *)((char *)&qword_10027D7C0 - v27 + 1024);
          if ((unint64_t)v24 >= v25) {
            snprintf(v27, (size_t)v31, "\n------");
          }
          else {
            snprintf(v27, (size_t)v31, "......");
          }
          int v23 = v28 + 1;
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s OtaSystemInfo bytes printed:%d of %d\n%s", "__RawBeaconHexDumpToDLOG", (v28 + 1), *(unsigned int *)(v35 + 1212), &qword_10027D7C0);
          }
        }
        while ((unint64_t)v24 < v25);
        if (*(_DWORD *)(v35 + 1208))
        {
LABEL_26:
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s - beacon content from latest AP not available", "WiFiDeviceManagerDumpToLog")];
          }
        }
      }
    }
  }
}

uint64_t sub_100128618(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8820) = a2;
  return result;
}

uint64_t sub_100128624(uint64_t result, uint64_t a2)
{
  *(void *)(result + 6792) = a2;
  return result;
}

uint64_t sub_10012862C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4776) = a2;
  *(void *)(result + 4784) = a3;
  return result;
}

void sub_100128638(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: CATSInit %@: Enter device:%p deviceManager:%p manager:%p", "WifiDeviceManagerCatsInit", sub_100016F3C(a1), *(void *)(a1 + 64), a1, a2 message];
  }
  if (a1 && a2)
  {
    *(void *)(a1 + 424) = a2;
    *(unsigned char *)(a1 + 435) = 0;
    *(unsigned char *)(a1 + 464) = 0;
    *(_WORD *)(a1 + 433) = 0;
    *(void *)(a1 + 440) = 0;
    *(void *)(a1 + 448) = 0;
    CFStringRef v5 = (const __CFString *)sub_100017C48(*(void *)(a1 + 64));
    CFStringRef v6 = (const __CFString *)sub_100016E20(*(void *)(a1 + 64));
    BOOL v7 = 0;
    if (v5 && v6) {
      BOOL v7 = CFEqual(v5, v6);
    }
    uint64_t v9 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v10 = *(void *)(a1 + 64);
      if (v10) {
        uint64_t v10 = sub_100016E20(v10);
      }
      [v9 WFLog:3, "%s: CATS %@: Trace deviceManager:%p rc=%d\n", "WifiDeviceManagerCatsIsMainInterface", v10, a1, v7 message];
    }
    *(unsigned char *)(a1 + 432) = v7;
    if (v7)
    {
      sub_100008A8C(a1, 0);
      if ((sub_10014BC04(a1 + 424, 0, (uint64_t)sub_10000A688) & 0x80000000) != 0)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: CATS Error registering P2P callback\n", "WifiDeviceManagerCatsRegisterClients"];
        }
      }
      if ((sub_10014BC04(a1 + 424, 1, (uint64_t)sub_1000076B0) & 0x80000000) != 0)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: CATS Error registering UCM callback\n", "WifiDeviceManagerCatsRegisterClients")
        }
      }
      if ((sub_10014BC04(a1 + 424, 2, (uint64_t)sub_10000963C) & 0x80000000) != 0)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: CATS Error registering Scan Manager callback\n", "WifiDeviceManagerCatsRegisterClients"];
        }
      }
      if (_os_feature_enabled_impl())
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: CATS %@: Enable Trace deviceManager:%p\n", "WifiDeviceManagerEnableCats", sub_100016F3C(a1), a1 message];
        }
        if (!*(unsigned char *)(a1 + 433) && *(unsigned char *)(a1 + 432))
        {
          *(unsigned char *)(a1 + 433) = 1;
          sub_1000157C8(a1, 7);
        }
      }
    }
    uint64_t v16 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v17 = *(void *)(a1 + 64);
      if (v17)
      {
        uint64_t v18 = sub_100016E20(v17);
        uint64_t v19 = *(void *)(a1 + 64);
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v18 = 0;
      }
      [v16 WFLog:3, "%s: CATSInit %@: Exit: device:%p deviceManager:%p manager:%p m:%d en:%d\n", "WifiDeviceManagerCatsInit", v18, v19, a1, a2, *(unsigned __int8 *)(a1 + 432), _os_feature_enabled_impl() message];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: CATSInit Invalid deviceManager or manager handle", "WifiDeviceManagerCatsInit", v20, v21, v22, v23, v24, v25];
    }
  }
}

void sub_1001289BC(uint64_t a1)
{
  if (a1 && *(unsigned char *)(a1 + 432))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s() CATS Trace: DeInit Enter\n", "WifiDeviceManagerCatsDeInit"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: CATSDeInit Invalid deviceManager info"];
    }
  }
}

void sub_100128A68(void *a1, void *a2, uint64_t a3)
{
  if ([a2 mode])
  {
    uint64_t v7 = sub_10000D990((uint64_t)"WiFiDeviceManagerStartAutoJoinWithParams");
    CFRetain(a1);
    id v8 = (void *)a1[1103];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100128B50;
    void v9[3] = &unk_100241758;
    void v9[5] = a3;
    v9[6] = a1;
    v9[4] = v7;
    [v8 performAutoJoinWithParameters:a2 reply:v9];
  }
  else
  {
    sub_10001FD64((uint64_t)a1, (unint64_t)[a2 trigger]);
  }
}

void sub_100128B50(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, a2);
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void sub_100128BC0(const __CFDictionary *a1, const __CFDictionary *a2)
{
  if (a1 && a2)
  {
    if (sub_1000C7E8C((uint64_t)a2)
      && sub_1000C7E9C((uint64_t)a2)
      && !CFDictionaryGetValue(a1, @"RSN_IE"))
    {
      sub_10001C6A4((uint64_t)a2, @"RSN_IE", 0);
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s WPA1 only network but WPA2 property is existing in network profile. Removing WPA2 property for association ", @"WiFiDeviceManagerAdjustSecurityTypeForKnownNetwork"];
      }
    }
    if (sub_1000C66D0((BOOL)a2)
      && sub_10001FC1C((uint64_t)a2)
      && !CFDictionaryGetValue(a1, @"RSN_IE")
      && !CFDictionaryGetValue(a1, @"WPA_IE"))
    {
      sub_10001C6A4((uint64_t)a2, @"RSN_IE", 0);
      sub_10001C6A4((uint64_t)a2, @"WPA_IE", 0);
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s Dynamic WEP but WPA property is existing in network profile. Removing WPA property for association ", "WiFiDeviceManagerAdjustSecurityTypeForKnownNetwork"];
      }
    }
    if (sub_1000C66D0((BOOL)a2)
      && sub_1000C7E8C((uint64_t)a2)
      && !CFDictionaryGetValue(a1, @"WPA_IE"))
    {
      sub_10001C6A4((uint64_t)a2, @"WPA_IE", 0);
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s WEP only but WPA property is existing in network profile. Removing WPA property for association ", @"WiFiDeviceManagerAdjustSecurityTypeForKnownNetwork"];
      }
    }
    if (sub_10001FC1C((uint64_t)a2)
      && CFDictionaryGetValue(a1, @"WPA_IE")
      && !CFDictionaryGetValue(a1, @"RSN_IE"))
    {
      sub_10001C6A4((uint64_t)a2, @"RSN_IE", 0);
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s WPA1 only enterprise network but WPA2 property is existing in network profile. Removing WPA2 property for association ", @"WiFiDeviceManagerAdjustSecurityTypeForKnownNetwork"];
      }
    }
    if (sub_1000C7E8C((uint64_t)a2)
      && sub_1000C7E9C((uint64_t)a2)
      && sub_1000C6FE8(a2)
      && !CFDictionaryGetValue(a1, @"WPA_IE"))
    {
      sub_10001C6A4((uint64_t)a2, @"WPA_IE", 0);
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s WPA3 transition network but WPA1 property is existing in network profile. Removing WPA1 property for association ", "WiFiDeviceManagerAdjustSecurityTypeForKnownNetwork")];
      }
    }
  }
}

id sub_100128EC4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 8824) metric];

  return [v1 copy];
}

id sub_100128EF0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 8824) statistics];

  return [v1 copy];
}

id sub_100128F1C(uint64_t a1)
{
  return [*(id *)(a1 + 8824) resetStatistics];
}

void sub_100128F24(uint64_t a1, int a2)
{
}

void sub_100128F2C(uint64_t a1, int a2)
{
}

void sub_100128F34(uint64_t a1, int a2)
{
  if (qword_10027DD68)
  {
    uint64_t v5 = "allowing";
    if (!a2) {
      uint64_t v5 = "disallowing";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s %s power save", "WiFiDeviceManagerAllowPowerSaveMode", v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);

  sub_100072B00(v6, a2);
}

void sub_100128FD4(uint64_t a1, int a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 3465) = a2;
    if (qword_10027DD68)
    {
      uint64_t v5 = "TRUE";
      if (!a2) {
        uint64_t v5 = "FALSE";
      }
      [((id)qword_10027DD68) WFLog:3, "%s: isOutrankedByCellular=%s", "WiFiDeviceManagerSetSymptomsCellOutrankRecommendation", v5];
    }
    uint64_t v6 = *(void **)(a1 + 7368);
    uint64_t v7 = sub_100017C48(*(void *)(a1 + 64));
    [v6 setCellularOutrankingState:a2 != 0 forInterface:v7];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager" args:("WiFiDeviceManagerSetSymptomsCellOutrankRecommendation")];
    }
  }
}

void sub_1001290F0(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: networkQualityDict=%@", "WiFiDeviceManagerNotifyNetworkQualityResults", a2 message];
    }
    uint64_t v5 = *(void **)(a1 + 7368);
    uint64_t v6 = sub_100017C48(*(void *)(a1 + 64));
    [v5 notifyNetworkQualityResults:a2 forInterface:v6];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager" : @"WiFiDeviceManagerNotifyNetworkQualityResults"];
    }
  }
}

void sub_1001291D4(uint64_t a1, const __CFDictionary *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s manager is NULL" :@"WiFiDeviceManagerProcessBSPCommand"];
    }
    id v34 = v33;
    goto LABEL_56;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s dict is NULL", "WiFiDeviceManagerProcessBSPCommand")];
    }
    id v34 = v4;
LABEL_56:
    return;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s:%d BSPCommand Dictionary %@", "WiFiDeviceManagerProcessBSPCommand", 45608, a2 message];
  }
  uint64_t valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"BSP_CommandType");
  if (!Value) {
    return;
  }
  CFNumberGetValue(Value, kCFNumberLongLongType, &valuePtr);
  if (valuePtr != 2)
  {
    if (valuePtr == 4)
    {
      uint64_t v6 = CFDictionaryGetValue(a2, @"BSP_CommandParams");
      uint64_t v7 = *(void *)(a1 + 64);
      id v8 = (const void *)sub_100017C48(v7);
      sub_1000093F4(v7, v8, @"BSP_CommandParams", (uint64_t)v6);
    }
    return;
  }
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s cannot create countryCodeRef" : @"__WiFiDeviceManagerSendBSPRegulatoryInfo"];
    }
    return;
  }
  CFMutableStringRef v10 = Mutable;
  if (sub_10006F650(*(void *)(a1 + 64)))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s cannot get countryCode" arguments:("__WiFiDeviceManagerSendBSPRegulatoryInfo", nil)];
    }
    goto LABEL_66;
  }
  CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v11)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s:cannot allocate dictRef", "__WiFiDeviceManagerSendBSPRegulatoryInfo")
    }
LABEL_66:
    unsigned int v32 = v10;
    goto LABEL_48;
  }
  CFArrayRef v12 = v11;
  uint64_t v41 = 3;
  CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v41);
  if (!v13)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s:cannot allocate eventTypeRef", "__WiFiDeviceManagerSendBSPRegulatoryInfo")];
    }
    goto LABEL_71;
  }
  CFDictionarySetValue(v12, @"BSP_EventType", v13);
  CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v14)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s:cannot allocate eventParamsRef" : @"__WiFiDeviceManagerSendBSPRegulatoryInfo"];
    }
LABEL_71:
    id v15 = 0;
    goto LABEL_74;
  }
  id v15 = v14;
  int v40 = 0;
  uint64_t v39 = 1;
  CFMutableArrayRef v16 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)(a1 + 64);
    uint64_t v19 = (const void *)sub_100017C48(v18);
    uint64_t v20 = sub_100063CE4(v18, v19, v17);
    if (v20)
    {
      uint64_t v21 = v20;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, "%s: Device return error %d for supported channels", "__WiFiDeviceManagerSendBSPRegulatoryInfo", v21];
      }
      goto LABEL_18;
    }
    if (CFArrayGetCount(v17) < 1)
    {
      uint64_t v25 = 1;
LABEL_37:
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s:%d countryCode=%@, regulatoryInfo = 0x%llx", "__WiFiDeviceManagerSendBSPRegulatoryInfo", 45587, v10, v25 message];
      }
      CFNumberRef v30 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v39);
      if (v30)
      {
        CFNumberRef v23 = v30;
        CFDictionarySetValue(v15, @"BSP_RegulatoryInfo", v30);
        CFDictionarySetValue(v12, @"BSP_EventParams", v15);
        uint64_t v31 = sub_100016E20(*(void *)(a1 + 64));
        sub_1000F3F74(v31, v31, a1, v12);
        goto LABEL_41;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s:cannot allocate regulatoryInfoRef", @"__WiFiDeviceManagerSendBSPRegulatoryInfo"];
      }
LABEL_18:
      CFNumberRef v23 = 0;
LABEL_41:
      CFRelease(v17);
      goto LABEL_42;
    }
    CFIndex v24 = 0;
    uint64_t v25 = 1;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, v24);
      if (ValueAtIndex)
      {
        CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"SUP_CHANNEL");
        if (v27)
        {
          if (CFNumberGetValue(v27, kCFNumberSInt32Type, &v40))
          {
            if ((v40 - 50) >= 0xFFFFFFF2)
            {
              v25 |= 2uLL;
            }
            else
            {
              BOOL v28 = (v40 - 166) >= 0xFFFFFFE8 || v40 == 138;
              if (!v28 || (v40 - 100) < 0x2D) {
                goto LABEL_34;
              }
              v25 |= 0x10uLL;
            }
            uint64_t v39 = v25;
          }
        }
      }
LABEL_34:
      if (CFArrayGetCount(v17) <= ++v24) {
        goto LABEL_37;
      }
    }
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: cannot allocate suppChannelList" : @"__WiFiDeviceManagerSendBSPRegulatoryInfo"];
  }
LABEL_74:
  CFNumberRef v23 = 0;
LABEL_42:
  CFRelease(v10);
  CFRelease(v12);
  if (v13) {
    CFRelease(v13);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v23)
  {
    unsigned int v32 = v23;
LABEL_48:
    CFRelease(v32);
  }
}

uint64_t sub_100129790(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Sending link status %d", *(unsigned __int8 *)(a1 + 3449));
  }
  return *(unsigned __int8 *)(a1 + 3449);
}

id sub_1001297F4(uint64_t a1)
{
  id v3 = objc_alloc_init((Class)NSMutableDictionary);
  if (*(void *)(a1 + 8976))
  {
    id v4 = objc_alloc_init((Class)NSMutableDictionary);
    if ([*(id *)(a1 + 8976) status]) {
      CFStringRef v5 = @"Settled";
    }
    else {
      CFStringRef v5 = @"Unsettled";
    }
    [v4 setObject:v5 forKey:@"description"];
    [v4 setObject:[NSNumber numberWithInteger:objc_msgSend(*(id *)(a1 + 8976), "status")] forKey:@"status"];
    [v4 setObject:[NSNumber numberWithUnsignedInteger:objc_msgSend(*(id *)(a1 + 8976), "confidence")] forKey:@"confidence"];
    if ([*(id *)(a1 + 8976) settledDate]) {
      [v4 setObject:[*(id *)(a1 + 8976) settledDate] forKey:@"date"];
    }
    [v3 setObject:v4 forKey:@"settlement"];
  }
  id v6 = objc_alloc_init((Class)NSMutableDictionary);
  [v6 setObject:[NSNumber numberWithUnsignedInt:*((unsigned int *)(a1 + 3352))] forKey:@"state"];
  [v6 setObject:[+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(a1 + 3360))] forKey:@"startTime"];
  [v6 setObject:sub_100012FCC(*(_DWORD *)(a1 + 3352)) forKey:@"description"];
  [v6 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", -[WiFiUserInteractionMonitor isCarModeActive](+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance"), "isCarModeActive")) forKey:@"carMode"];
  [v3 setObject:v6 forKey:@"motion"];

  id v7 = sub_100005420(a1);
  if (v7)
  {
    id v8 = v7;
    id v9 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v13 = 0;
    CFMutableStringRef v10 = +[NSKeyedArchiver archivedDataWithRootObject:v8 requiringSecureCoding:1 error:&v13];
    if (v13)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: failed to encode location" : @"WiFiDeviceManagerCopyMovementStates"];
      }
    }
    else
    {
      [v9 setObject:v10 forKey:@"location"];
    }
    [v3 setObject:v9 forKey:@"location"];
  }
  return v3;
}

uint64_t sub_100129AA0(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 5496);
  if ((sub_10011259C(a1) & 1) == 0
    && *v2 != 1
    && v2[1] != 1
    && v2[2] != 1
    && v2[3] != 1
    && (*(_DWORD *)(a1 + 176) - 1) >= 2
    && (!sub_100112644(a1) || !sub_1001116C8(a1))
    && *(unsigned char *)(a1 + 3414) != 1
    && !sub_100112724(a1)
    && !sub_100112784(a1))
  {
    return 1;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Rejecting sensing: isSensing:%d carplay:%d faceTime:%d airplayOverInfra:%d coPresence:%d isCharging:%d userMode:%d\n", sub_10011259C(a1), *v2, v2[1], v2[2], v2[3], *(unsigned __int8 *)(a1 + 3464), *(unsigned int *)(a1 + 176));
  }
  CFStringRef v5 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    unsigned int v6 = sub_100112644(a1);
    unsigned int v7 = sub_1001116C8(a1);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 3414);
    BOOL v9 = sub_100112724(a1);
    [v5 WFLog:3 message:@"Rejecting sensing: AWDLEnabled:%d AssistedDiscHostedNetwork:%d RealTimeMode:%d MISScanBlocked:%d AutoJoinBusy:%d\n" args:v6, v7, v8, v9, sub_100112784(a1)];
  }
  return 0;
}

uint64_t sub_100129C58(uint64_t a1, uint64_t a2, const __CFData *a3)
{
  uint64_t result = 4294963396;
  if (a1 && a2 && a3)
  {
    if (sub_10007427C(*(void *)(a1 + 64)))
    {
      uint64_t v7 = *(void *)(a1 + 64);
      return sub_100074288(v7, a2, a3);
    }
    else
    {
      return 4294963389;
    }
  }
  return result;
}

uint64_t sub_100129CD4(uint64_t a1, const void *a2, void *a3, void (*a4)(uint64_t, const void *, void, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v54 = 0;
  CFNumberRef v55 = &v54;
  uint64_t v56 = 0x2020000000;
  unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v50 = 0;
  CFDictionaryRef v51 = &v50;
  uint64_t v52 = 0x2020000000;
  unint64_t v53 = 0xAAAAAAAAAAAAAAAALL;
  if ((MGGetBoolAnswer() & 1) == 0
    || !_os_feature_enabled_impl()
    || !sub_1000743D0(*(void *)(a1 + 64)))
  {
    char v9 = 0;
    uint64_t v10 = 4294963389;
    goto LABEL_37;
  }
  char v9 = 0;
  uint64_t v10 = 4294963396;
  if (a2 && a3)
  {
    uint64_t v11 = sub_1000747AC(*(void *)(a1 + 64));
    uint64_t v12 = sub_1000747B8(*(void *)(a1 + 64));
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: ifName: %@ numReportsRem: %d, expectedTotalReports: %d, sensingParams: %@", "WiFiDeviceManagerSensingEnableAsync", a2, v11, v12, a3 message];
    }
    if (v11 | v12)
    {
      char v9 = 0;
      uint64_t v10 = 37;
      goto LABEL_37;
    }
    id v14 = [a3 objectForKeyedSubscript:@"SENSING_PARAMS_SCHEDULE_ONCE_AFTER"];
    int v15 = [v14 intValue];
    id v16 = [a3 objectForKeyedSubscript:@"SENSING_PARAMS_SCHEDULE_DAILY_AT"];
    id v17 = [v16 intValue];
    id v18 = [a3 objectForKeyedSubscript:@"SENSING_PARAMS_NUMBER_OF_REPORTS"];
    signed int v19 = [v18 intValue];
    v55[3] = v19;
    signed int v20 = [v18 intValue];
    char v9 = 0;
    v51[3] = v20;
    if (v14)
    {
      uint64_t v10 = 0;
      if (v15 == -2) {
        goto LABEL_22;
      }
      if (!v55[3]) {
        goto LABEL_21;
      }
      uint64_t v21 = malloc_type_malloc(0x20uLL, 0xE00402064D7F7uLL);
      *(void *)uint64_t v21 = a1;
      *((void *)v21 + 1) = a4;
      *((void *)v21 + 2) = CFRetain(a3);
      *((void *)v21 + 3) = a5;
      uint64_t v22 = *(NSObject **)(a1 + 8984);
      if (v22)
      {
        dispatch_source_cancel(v22);
        dispatch_release(*(dispatch_object_t *)(a1 + 8984));
        *(void *)(a1 + 8984) = 0;
      }
      if (v15 >= 1)
      {
        *(void *)(a1 + 8984) = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 240));
        CFRetain(a2);
        CFRetain(a3);
        CFNumberRef v23 = *(NSObject **)(a1 + 8984);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_10012A418;
        handler[3] = &unk_100241780;
        handler[4] = &v54;
        handler[5] = a1;
        handler[6] = a2;
        handler[7] = a3;
        handler[8] = v21;
        dispatch_source_set_event_handler(v23, handler);
        CFIndex v24 = *(NSObject **)(a1 + 8984);
        dispatch_time_t v25 = dispatch_time(0, 1000000000 * v15);
        dispatch_source_set_timer(v24, v25, 0xFFFFFFFFFFFFFFFFLL, 0);
        dispatch_activate(*(dispatch_object_t *)(a1 + 8984));
        uint64_t v10 = 0;
        goto LABEL_16;
      }
      if (v15)
      {
LABEL_21:
        char v9 = 0;
        uint64_t v10 = 0;
LABEL_22:
        if (!v16) {
          goto LABEL_37;
        }
        goto LABEL_23;
      }
      sub_100074790(*(void *)(a1 + 64));
      uint64_t v42 = v55[3];
      v55[3] = v42 - 1;
      sub_1000747A0(*(void *)(a1 + 64), v42 - 1);
      id v43 = objc_alloc_init((Class)NSDateFormatter);
      [v43 setDateFormat:@"yyyy/MM/dd hh:mm:ss:SSS"];
      [v43 setTimeZone:+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone")];
      if (sub_100129AA0(a1))
      {
        uint64_t v10 = sub_1000743DC(*(void *)(a1 + 64), a2, a3, (uint64_t)sub_10012A600, (uint64_t)v21);
        if (qword_10027DD68)
        {
          long long v44 = "failed to start";
          if (!v10) {
            long long v44 = "started";
          }
          [(id)qword_10027DD68 WFLog:3, "%s: One-time sensing data read %s (err: %d) (reads rem: %ld) [%@]", "WiFiDeviceManagerSensingEnableAsync", v44, v10, v55[3], [v43 stringFromDate:+[NSDate date](NSDate, "date")]);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: rejecting sensing due to on-going high priority event\n", "WiFiDeviceManagerSensingEnableAsync"];
        }
        uint64_t v10 = 16;
      }

      if (!v10)
      {
LABEL_16:
        char v9 = 1;
        if (!v16) {
          goto LABEL_37;
        }
        goto LABEL_23;
      }
      sub_1000747A0(*(void *)(a1 + 64), 0);
      CFRelease(*((CFTypeRef *)v21 + 2));
      free(v21);
      char v9 = 0;
      if (!v16) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v10 = 0;
      if (!v16) {
        goto LABEL_37;
      }
    }
LABEL_23:
    if (v17 != -2 && v51[3])
    {
      uint64_t v26 = *(NSObject **)(a1 + 8992);
      if (v26)
      {
        dispatch_source_cancel(v26);
        dispatch_release(*(dispatch_object_t *)(a1 + 8992));
        *(void *)(a1 + 8992) = 0;
      }
      if (v17 != -1)
      {
        *(void *)(a1 + 8992) = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 240));
        CFRetain(a2);
        CFRetain(a3);
        CFNumberRef v27 = *(NSObject **)(a1 + 8992);
        v48[0] = _NSConcreteStackBlock;
        v48[1] = 3221225472;
        v48[2] = sub_10012A7A4;
        v48[3] = &unk_1002417A8;
        v48[4] = a3;
        v48[5] = &v50;
        v48[6] = a1;
        v48[7] = a2;
        v48[8] = a3;
        dispatch_source_set_event_handler(v27, v48);
        BOOL v28 = [+[NSCalendar currentCalendar](NSCalendar, "currentCalendar") startOfDayForDate:+[NSDate date]];
        [(NSDate *)v28 timeIntervalSince1970];
        double v30 = v29;
        [+[NSDate date] timeIntervalSince1970];
        double v32 = v31;
        unsigned int v33 = [[a3 objectForKeyedSubscript:@"SENSING_PARAMS_COMMENT"] isEqualToString:@"automatic collection scheduled"];
        double v34 = v30 + 86400.0;
        if (v33) {
          double v35 = v34 - v32 + (double)(int)v17 + 86400.0;
        }
        else {
          double v35 = v34 - v32 + (double)(int)v17;
        }
        if (v33) {
          uint64_t v36 = 604800000000000;
        }
        else {
          uint64_t v36 = 86400000000000;
        }
        long long v37 = *(NSObject **)(a1 + 8992);
        dispatch_time_t v38 = dispatch_time(0, (uint64_t)(v35 * 1000000000.0));
        dispatch_source_set_timer(v37, v38, v36, 0);
        dispatch_activate(*(dispatch_object_t *)(a1 + 8992));
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: midnightOfToday %@, midnightOfTomorrow %f, now %f, scheduledStartInSecondsAfterMidnight %d, dispatchTimerStart %f, interval %llu", "WiFiDeviceManagerSensingEnableAsync", v28, *(void *)&v34, *(void *)&v32, v17, *(void *)&v35, v36 message];
        }
      }
    }
  }
LABEL_37:
  if (a4 && (v9 & 1) == 0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Invoking WiFiClientSensingCallback", @"WiFiDeviceManagerSensingEnableAsync"];
    }
    a4(a1, a2, 0, v10, a5);
  }
  _Block_object_dispose(&v50, 8);
  _Block_object_dispose(&v54, 8);
  return v10;
}

void sub_10012A3D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_10012A418(uint64_t a1)
{
  sub_100074790(*(void *)(*(void *)(a1 + 40) + 64));
  uint64_t v2 = *(void *)(a1 + 40);
  --*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  sub_1000747A0(*(void *)(v2 + 64), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  id v3 = objc_alloc_init((Class)NSDateFormatter);
  [v3 setDateFormat:@"yyyy/MM/dd hh:mm:ss:SSS"];
  [v3 setTimeZone:+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone")];
  if (!sub_100129AA0(*(void *)(a1 + 40)))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: rejecting sensing due to on-going high priority event\n", "WiFiDeviceManagerSensingEnableAsync_block_invoke")];
    }

    goto LABEL_12;
  }
  uint64_t v4 = sub_1000743DC(*(void *)(*(void *)(a1 + 40) + 64), *(const void **)(a1 + 48), *(void **)(a1 + 56), (uint64_t)sub_10012A600, *(void *)(a1 + 64));
  if (qword_10027DD68)
  {
    if (v4) {
      unsigned int v6 = "failed to start";
    }
    else {
      unsigned int v6 = "started";
    }
    [(id)qword_10027DD68 WFLog:3, "%s: One-time delayed sensing data read %s (err: %d) (reads rem: %ld) [%@]", "WiFiDeviceManagerSensingEnableAsync_block_invoke", v6, v4, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), [objc_msgSend(v3, "stringFromDate:", +[NSDate date](NSDate, "date")) message];
  }

  if (v4)
  {
LABEL_12:
    sub_1000747A0(*(void *)(*(void *)(a1 + 40) + 64), 0);
    CFRelease(*(CFTypeRef *)(*(void *)(a1 + 64) + 16));
    free(*(void **)(a1 + 64));
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
  uint64_t v8 = *(const void **)(a1 + 56);

  CFRelease(v8);
}

void sub_10012A600(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = (void *)a4[2];
  int v9 = sub_1000747AC(a1);
  if (sub_1000747B8(a1)) {
    return;
  }
  if (!v9) {
    goto LABEL_11;
  }
  uint64_t v10 = *a4;
  sub_1000747A0(a1, v9 - 1);
  id v11 = objc_alloc_init((Class)NSDateFormatter);
  [v11 setDateFormat:@"yyyy/MM/dd hh:mm:ss:SSS"];
  [v11 setTimeZone:+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone")];
  if (!sub_100129AA0(v10))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: rejecting sensing due to on-going high priority event\n", "__WiFiDeviceManagerClientSensingCallback"];
    }

    goto LABEL_11;
  }
  uint64_t v12 = sub_1000743DC(a1, a2, v8, (uint64_t)sub_10012A600, (uint64_t)a4);
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:@"%s sensing enable event retVal[%d]\n" message:3];
  }

  if (v12)
  {
LABEL_11:
    sub_100150584(a1, a2, a3, v8, a4);
  }
}

void sub_10012A7A4(uint64_t a1)
{
  unsigned int v2 = [[objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", @"SENSING_PARAMS_COMMENT") isEqualToString:@"automatic collection scheduled"];
  uint64_t v3 = *(void *)(a1 + 48);
  if (v2 && !*(unsigned char *)(v3 + 3464)) {
    return;
  }
  sub_100074790(*(void *)(v3 + 64));
  uint64_t v4 = *(void *)(a1 + 48);
  --*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  sub_1000747A0(*(void *)(v4 + 64), *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
  id v5 = objc_alloc_init((Class)NSDateFormatter);
  [v5 setDateFormat:@"yyyy/MM/dd hh:mm:ss:SSS"];
  [v5 setTimeZone:[+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone")]];
  if (sub_100129AA0(*(void *)(a1 + 48)))
  {
    uint64_t v6 = sub_1000743DC(*(void *)(*(void *)(a1 + 48) + 64), *(const void **)(a1 + 56), *(void **)(a1 + 64), (uint64_t)sub_10012A9BC, *(void *)(a1 + 48));
    if (qword_10027DD68)
    {
      if (v6) {
        uint64_t v8 = "failed to start";
      }
      else {
        uint64_t v8 = "started";
      }
      [(id)qword_10027DD68 WFLog:3, "%s: Daily sensing data read %s (err: %d) (reads rem: %ld) [%@]", "WiFiDeviceManagerSensingEnableAsync_block_invoke_2", v8, v6, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), [objc_msgSend(v5, "stringFromDate:", +[NSDate date](NSDate, "date")) message];
    }

    if (!v6) {
      goto LABEL_15;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:@"%s: rejecting sensing due to on-going high priority event\n" message:3];
    }
  }
  sub_1000747A0(*(void *)(*(void *)(a1 + 48) + 64), 0);
LABEL_15:
  CFRelease(*(CFTypeRef *)(a1 + 56));
  uint64_t v10 = *(const void **)(a1 + 64);

  CFRelease(v10);
}

void sub_10012A9BC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = [+[NSUserDefaults standardUserDefaults] dictionaryForKey:@"WIFI_SENSING"];
  int v9 = sub_1000747AC(a1);
  if (sub_1000747B8(a1)) {
    return;
  }
  if (!v9) {
    goto LABEL_11;
  }
  sub_1000747A0(a1, v9 - 1);
  id v10 = objc_alloc_init((Class)NSDateFormatter);
  [v10 setDateFormat:@"yyyy/MM/dd hh:mm:ss:SSS"];
  [v10 setTimeZone:+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone")];
  if (!sub_100129AA0(a4))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: rejecting sensing due to on-going high priority event\n", "__WiFiDeviceManagerSensingDailyCallback")];
    }

    goto LABEL_11;
  }
  uint64_t v11 = sub_1000743DC(a1, a2, v8, (uint64_t)sub_10012A9BC, a4);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s sensing enable event retVal[%d]\n", "__WiFiDeviceManagerSensingDailyCallback", v11);
  }

  if (v11)
  {
LABEL_11:
    sub_100150584(a1, a2, a3, v8, 0);
  }
}

uint64_t sub_10012AB78(uint64_t a1, const void *a2)
{
  if (!_os_feature_enabled_impl() || !sub_1000743D0(*(void *)(a1 + 64))) {
    return 4294963389;
  }
  uint64_t v4 = *(NSObject **)(a1 + 8984);
  if (v4)
  {
    dispatch_source_cancel(v4);
    dispatch_release(*(dispatch_object_t *)(a1 + 8984));
    *(void *)(a1 + 8984) = 0;
  }
  id v5 = *(NSObject **)(a1 + 8992);
  if (v5)
  {
    dispatch_source_cancel(v5);
    dispatch_release(*(dispatch_object_t *)(a1 + 8992));
    *(void *)(a1 + 8992) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 64);

  return sub_1000745DC(v6, a2);
}

void sub_10012AC18(uint64_t a1, const void *a2)
{
  id v5 = (const void *)sub_100017C48(*(void *)(a1 + 64));
  uint64_t v6 = sub_10001C1B4(*(void *)(a1 + 64), v5);
  uint64_t v8 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    int v9 = sub_10001A43C(a2);
    [v8 WFLog:3, "[NWTRANSIT]: %s: topNetwork: %@, current: %@", "__WiFiDeviceManagerTransitionToColocatedNetwork", v9, sub_10001A43C(v6) message];
  }
  if (v6)
  {
    if (sub_10001A43C(v6))
    {
      if (CFEqual(v6, a2))
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "[NWTRANSIT]: %s: no need for transition...", "__WiFiDeviceManagerTransitionToColocatedNetwork")];
        }
      }
      else
      {
        uint64_t v11 = (char *)malloc_type_malloc(0x38uLL, 0x10E00402A548A24uLL);
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 40) = 0u;
        *(void *)uint64_t v11 = a1;
        *((void *)v11 + 1) = sub_100149614;
        *((void *)v11 + 2) = 0;
        *((_DWORD *)v11 + 8) = 1013;
        sub_1001164D8(a1, v6);
        *(unsigned char *)(a1 + 3760) = 1;
        if (!sub_10012B3F8(a1, (uint64_t)v6) || *(unsigned char *)(a1 + 3744) != 1) {
          goto LABEL_23;
        }
        uint64_t v12 = (void *)sub_10001E404((uint64_t)v6, @"COLOCATED_NETWORK_SCOPE_ID");
        CFNumberRef v23 = sub_10001E404((uint64_t)a2, @"COLOCATED_NETWORK_SCOPE_ID");
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: %s: SCOPE ID for %@ = %@ ", "__WiFiDeviceManagerMatchColocatedScopeID", sub_10001A43C(v6), v12 message];
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: %s: SCOPE ID for %@ = %@ ", "__WiFiDeviceManagerMatchColocatedScopeID", sub_10001A43C(a2), v23 message];
        }
        if (v12 && v23 && [v12 isEqualToString:v23])
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"[NWTRANSIT]: SCOPE ID Matches, Debounce the Link"];
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"[NWTRANSIT] %s: Link down will be debounced" arguments:("__WiFiDeviceManagerTransitionToColocatedNetwork")];
          }
        }
        else
        {
LABEL_23:
          id v18 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            signed int v19 = sub_10001A43C(v6);
            [v18 WFLog:3, "[NWTRANSIT]: %s: Disconnect from '%@', attempting network transition to '%@'", "__WiFiDeviceManagerTransitionToColocatedNetwork", v19, sub_10001A43C(v6) message];
          }
          signed int v20 = (const void *)sub_100017C48(*(void *)(a1 + 64));
          sub_1000FEA7C(a1, v20, 1013, "__WiFiDeviceManagerTransitionToColocatedNetwork", 47191);
        }
        uint64_t v21 = sub_10006CEC8(*(void *)(a1 + 64), v5, a2, 0, (uint64_t)sub_10015106C, (uint64_t)v11, 1013);
        if (v21)
        {
          [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") associationDoneWithNetwork:a2 error:v21 interfaceName:v5];
          *(unsigned char *)(a1 + 3760) = 0;
          uint64_t v22 = (const void *)*((void *)v11 + 3);
          if (v22) {
            CFRelease(v22);
          }
          free(v11);
        }
      }
    }
    CFRelease(v6);
  }
}

void sub_10012AFD4(uint64_t a1, const __CFDictionary *a2)
{
  int v30 = 0;
  if (!a1 || !a2) {
    goto LABEL_38;
  }
  uint64_t v4 = (const void *)sub_100017C48(*(void *)(a1 + 64));
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a2, @"COLOCATED_NETWORK_GROUP");
  *(void *)(a1 + 3736) = Value;
  if (Value) {
    CFIndex Count = CFArrayGetCount(Value);
  }
  else {
    CFIndex Count = 0;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "[NWTRANSIT]: %s: Colocated Network CFIndex Count = %ld ", "WiFiDeviceManagerSetColocatedNetworks", Count);
  }
  if (Count > 1) {
    goto LABEL_17;
  }
  int valuePtr = 2;
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  int v9 = sub_100120A54(0, 0, *(_DWORD *)(a1 + 128), 0x6Eu, 11);
  CFDictionarySetValue(v9, @"SCAN_FLAGS", v8);
  if (v9)
  {
    id v10 = malloc_type_malloc(0x28uLL, 0x10E0040573E0799uLL);
    if (v10)
    {
      uint64_t v11 = v10;
      void *v10 = a1;
      v10[1] = 0;
      _OWORD v10[3] = 0;
      if (CFDictionaryContainsKey(v9, @"SSID_STR")) {
        BOOL v12 = 1;
      }
      else {
        BOOL v12 = CFDictionaryContainsKey(v9, @"SCAN_SSID_LIST") != 0;
      }
      v11[32] = v12;
      uint64_t v13 = (const void *)sub_100017C48(*(void *)(a1 + 64));
      uint64_t v14 = sub_100113508(a1, v13, v9, 0, (uint64_t)sub_100137B18, (uint64_t)v11, 0, 23);
      if (v14)
      {
        uint64_t v28 = v14;
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Error initiating scan request: %d", v28);
        }
        free(v11);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null scanData"];
      }
    }
    CFRelease(v9);
    if (v8) {
LABEL_16:
    }
      CFRelease(v8);
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: failed to create scan request", "__WiFiDeviceManagerColocatedNetworkScan"];
    }
    if (v8) {
      goto LABEL_16;
    }
  }
LABEL_17:
  int v15 = sub_10001C1B4(*(void *)(a1 + 64), v4);
  if (v15)
  {
    id v16 = v15;
    id v17 = sub_10001E404((uint64_t)v15, @"COLOCATED_NETWORK_SCOPE_ID");
    if (!v17)
    {
      id v17 = *(const void **)(a1 + 3752);
      sub_10001C6A4((uint64_t)v16, @"COLOCATED_NETWORK_SCOPE_ID", v17);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: %s: Retrieved ColocatedScopeId for %@ - '%@'", "WiFiDeviceManagerSetColocatedNetworks", sub_10001A43C(v16), v17 message];
      }
    }
    if (sub_10012B3F8(a1, (uint64_t)v16) && v17 && Count >= 2)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, @"[NWTRANSIT]: %s: Colocated Group already present", @"WiFiDeviceManagerSetColocatedNetworks"];
      }
LABEL_35:
      CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(a2, @"COLOCATED_NETWORK_GROUP_STATUS");
      if (v23)
      {
        CFNumberGetValue(v23, kCFNumberIntType, &v30);
        *(unsigned char *)(a1 + 3744) = v30;
        if (CFDictionaryGetValue(a2, @"COLOCATED_NETWORK_GROUP_SCOPE_ID"))
        {
          sub_1001164D8(a1, v16);
          return;
        }
      }
      goto LABEL_38;
    }
    uint64_t v21 = *(const void **)(a1 + 3736);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(a1 + 3736) = 0;
    }
    uint64_t v22 = CFDictionaryGetValue(a2, @"COLOCATED_NETWORK_GROUP");
    *(void *)(a1 + 3736) = v22;
    if (v22)
    {
      CFRetain(v22);
      goto LABEL_35;
    }
LABEL_38:
    CFIndex v24 = *(const void **)(a1 + 3736);
    if (v24)
    {
      CFRelease(v24);
      *(void *)(a1 + 3736) = 0;
    }
    dispatch_time_t v25 = *(const void **)(a1 + 3752);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(a1 + 3752) = 0;
    }
    *(unsigned char *)(a1 + 3744) = 0;
    return;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"[NWTRANSIT]: Not Associated, Bail out"];
  }
}

CFArrayRef sub_10012B3F8(uint64_t a1, uint64_t a2)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 3736);
  if (result)
  {
    CFIndex Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3736), v7);
        if (ValueAtIndex)
        {
          if (sub_1000C8ED4(a2, (uint64_t)ValueAtIndex)) {
            break;
          }
        }
        if (v6 == ++v7) {
          return 0;
        }
      }
      return (const __CFArray *)1;
    }
  }
  return result;
}

void sub_10012B478(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v28 = 0;
  uint64_t valuePtr = 0;
  uint64_t v27 = 0;
  if (sub_100074914(*(void *)(a1 + 64)))
  {
    uint64_t v4 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    id v5 = sub_10001C1B4(*(void *)(a1 + 64), v4);
    CFNumberRef v6 = (const __CFNumber *)sub_10001E404((uint64_t)v5, @"CHANNEL_FLAGS");
    if (v6) {
      CFNumberGetValue(v6, kCFNumberIntType, &valuePtr);
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"6E_NETWORK_TRANSITION");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, (char *)&v28 + 4);
      CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(a2, @"LEGACY_NETWORK_TRANSITION");
      if (v8)
      {
        CFNumberGetValue(v8, kCFNumberIntType, &v28);
        CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(a2, @"CHANNEL");
        if (v9) {
          CFNumberGetValue(v9, kCFNumberIntType, (char *)&v27 + 4);
        }
        if (qword_10027DD68)
        {
          if (v28) {
            uint64_t v11 = "2.4Gh/5Gh";
          }
          else {
            uint64_t v11 = "6Gh";
          }
          [((id)qword_10027DD68) WFLog:3 message:@"[NWTRANSIT]: Initiate Colocated Network Transition. Transitioning to %s Colocated Network", v11];
        }
        CFArrayRef v12 = *(const __CFArray **)(a1 + 3736);
        if (v12) {
          CFIndex Count = CFArrayGetCount(v12);
        }
        else {
          CFIndex Count = 0;
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "[NWTRANSIT]: Num Colocated Networks %ld", Count);
        }
        if (v28)
        {
          if ((valuePtr & 0x2000) != 0 && Count >= 1)
          {
            for (CFIndex i = 0; Count != i; ++i)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3736), i);
              if (ValueAtIndex)
              {
                id v17 = ValueAtIndex;
                CFNumberRef v18 = (const __CFNumber *)sub_10001E404((uint64_t)ValueAtIndex, @"CHANNEL_FLAGS");
                CFNumberRef v19 = (const __CFNumber *)sub_10001E404((uint64_t)v17, @"CHANNEL");
                CFNumberGetValue(v19, kCFNumberIntType, &v27);
                CFNumberGetValue(v18, kCFNumberIntType, (char *)&valuePtr + 4);
                if (!HIDWORD(v27) && (valuePtr & 0x1000000000) != 0)
                {
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Associated to 6Gh. No Target channel. Top Colocated Network for Transition = %@", v17 message];
                  }
                  goto LABEL_54;
                }
                if (HIDWORD(v27) == v27)
                {
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Associated to 6Gh. Colocated network available in Peer Channel. NetworCFIndex k = %@", v17 message];
                  }
                  goto LABEL_54;
                }
                if (v18 && (valuePtr & 0x800000000) != 0)
                {
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: Associated to 6Gh. Top Colocated Network for Transition = %@", v17 message];
                  }
                  goto LABEL_54;
                }
              }
            }
          }
        }
        else if ((valuePtr & 0x18) != 0 && Count >= 1)
        {
          for (CFIndex j = 0; j != Count; ++j)
          {
            uint64_t v21 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3736), j);
            if (v21)
            {
              id v17 = v21;
              CFNumberRef v22 = (const __CFNumber *)sub_10001E404((uint64_t)v21, @"CHANNEL_FLAGS");
              if (v22)
              {
                CFNumberGetValue(v22, kCFNumberIntType, (char *)&valuePtr + 4);
                if ((valuePtr & 0x200000000000) != 0)
                {
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]:Associated to 2.4Gh/5Gh. Top 6Gh Colocated Network for Transition = %@", v17 message];
                  }
                  goto LABEL_54;
                }
              }
            }
          }
          if ((valuePtr & 8) == 0) {
            return;
          }
          CFIndex v23 = 0;
          while (1)
          {
            CFIndex v24 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3736), v23);
            if (v24)
            {
              id v17 = v24;
              CFNumberRef v25 = (const __CFNumber *)sub_10001E404((uint64_t)v24, @"CHANNEL_FLAGS");
              if (v25)
              {
                CFNumberGetValue(v25, kCFNumberIntType, (char *)&valuePtr + 4);
                if ((valuePtr & 0x1000000000) != 0) {
                  break;
                }
              }
            }
            if (Count == ++v23) {
              return;
            }
          }
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]:Associated to 2.4Gh. Top 5Gh Colocated Network for Transition = %@", v17 message];
          }
LABEL_54:
          sub_10012AC18(a1, v17);
        }
      }
    }
  }
}

uint64_t sub_10012B814(uint64_t result)
{
  if (result) {
    return sub_100074914(*(void *)(result + 64));
  }
  return result;
}

uint64_t sub_10012B824(uint64_t result, char a2)
{
  *(unsigned char *)(result + 7044) = a2;
  return result;
}

void sub_10012B830(uint64_t a1, const void *a2, int a3)
{
  if (!a1)
  {
    CFNumberRef v8 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_8;
    }
    uint64_t v11 = "WiFiDeviceManagerEvaluateStandaloneNetworkForUserPrompts";
    CFNumberRef v9 = "%s: null device manager";
    goto LABEL_16;
  }
  if (![+[WiFiUserInteractionMonitor sharedInstance] isSetupCompleted])
  {
    CFNumberRef v8 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_8;
    }
    CFNumberRef v9 = "suppressing standalone 6G notifications as setup is not complete";
LABEL_16:
    uint64_t v10 = 4;
    goto LABEL_7;
  }
  int v6 = sub_10012B948(a1, a2);
  if (!a3 || v6) {
    return;
  }
  CFNumberRef v8 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    uint64_t v11 = "WiFiDeviceManagerEvaluateStandaloneNetworkForUserPrompts";
    CFArrayRef v12 = a2;
    CFNumberRef v9 = "%s: no colocated candidate found for %@";
    uint64_t v10 = 3;
LABEL_7:
    [v8 WFLog:v10 message:v9, v11, v12];
  }
LABEL_8:
}

uint64_t sub_10012B948(uint64_t a1, const void *a2)
{
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: WiFiNetworkRef returned NULL", @"WiFiDeviceManagerAttemptToShowColocatedJoinNotification"];
    }
    goto LABEL_40;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: WiFiDeviceManagerRef is NULL", "WiFiDeviceManagerAttemptToShowColocatedJoinNotification"];
    }
LABEL_40:
    CFNumberRef v8 = 0;
    uint64_t v10 = 0;
    CFNumberRef v25 = 0;
    uint64_t v26 = 0;
    goto LABEL_31;
  }
  id v5 = sub_10012BDB0(a1);
  CFArrayRef v6 = v5;
  if (v5 && CFArrayGetCount(v5))
  {
    id v7 = sub_10012BF64(v6);
    if (v7)
    {
      CFNumberRef v8 = v7;
      id v9 = sub_10010BA9C(a1);
      if (v9)
      {
        uint64_t v10 = v9;
        [objc_msgSend(*(id *)(a1 + 8824), "knownNetworks") allObjects];
        uint64_t v11 = CWFColocatedNetworksMatchingScanResult();
        if (v11)
        {
          double v32 = a2;
          CFArrayRef v12 = [[WiFiColocatedNetworkManager alloc] initWithNetwork:v10 colocatedNetworks:v11];
          id v13 = [(NSArray *)[(WiFiColocatedNetworkManager *)v12 colocatedNetworks] copy];
          CFArrayRef v35 = v6;
          uint64_t v36 = v4;
          unsigned int v33 = v12;
          double v34 = v8;
          if (v13
            && (long long v39 = 0u,
                long long v40 = 0u,
                long long v37 = 0u,
                long long v38 = 0u,
                (id v14 = [v13 countByEnumeratingWithState:&v37 objects:v41 count:16]) != 0))
          {
            id v15 = v14;
            CFMutableStringRef Mutable = 0;
            uint64_t v17 = *(void *)v38;
            do
            {
              for (CFIndex i = 0; i != v15; CFIndex i = (char *)i + 1)
              {
                if (*(void *)v38 != v17) {
                  objc_enumerationMutation(v13);
                }
                CFNumberRef v19 = sub_1000D1628(*(void **)(*((void *)&v37 + 1) + 8 * i));
                if (v19)
                {
                  signed int v20 = v19;
                  if (!Mutable) {
                    CFMutableStringRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                  }
                  CFArrayAppendValue(Mutable, v20);
                  CFRelease(v20);
                }
              }
              id v15 = [v13 countByEnumeratingWithState:&v37 objects:v41 count:16];
            }
            while (v15);
          }
          else
          {
            CFMutableStringRef Mutable = 0;
          }

          if (objc_msgSend(objc_msgSend(v10, "channel"), "is6GHz"))
          {
            uint64_t v21 = sub_10001A43C(v32);
            if (v21)
            {
              CFNumberRef v22 = v21;
              if (CFArrayGetCount(Mutable) >= 1)
              {
                CFIndex v23 = 0;
                do
                {
                  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v23);
                  sub_10001C6A4((uint64_t)ValueAtIndex, @"LimitedCompatibilityNetworkName", v22);
                  ++v23;
                }
                while (v23 < CFArrayGetCount(Mutable));
              }
            }
          }
          CFNumberRef v25 = v33;
          sub_10012C020((uint64_t *)a1, v32, v33);
          uint64_t v26 = 1;
          CFArrayRef v6 = v35;
          uint64_t v4 = v36;
          CFNumberRef v8 = v34;
          if (!v35) {
            goto LABEL_29;
          }
          goto LABEL_28;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: no candidates found", @"WiFiDeviceManagerAttemptToShowColocatedJoinNotification"];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: __WiFiDeviceManagerCopyCurrentCoreWiFiScanResult() returned NULL", "WiFiDeviceManagerAttemptToShowColocatedJoinNotification"];
        }
        uint64_t v10 = 0;
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: __WiFiDeviceManagerCreateCoreWiFiScanResultsFromNetworks() returned NULL", "WiFiDeviceManagerAttemptToShowColocatedJoinNotification")];
      }
      uint64_t v10 = 0;
      CFNumberRef v8 = 0;
    }
    uint64_t v26 = 0;
    CFNumberRef v25 = 0;
    CFMutableStringRef Mutable = 0;
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Beacon cache was empty", "WiFiDeviceManagerAttemptToShowColocatedJoinNotification")];
    }
    CFNumberRef v8 = 0;
    uint64_t v10 = 0;
    CFMutableStringRef Mutable = 0;
    CFNumberRef v25 = 0;
    uint64_t v26 = 0;
    if (!v6) {
      goto LABEL_29;
    }
  }
LABEL_28:
  CFRelease(v6);
LABEL_29:
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_31:

  return v26;
}

__CFArray *sub_10012BDB0(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: WiFiDeviceManagerRef is NULL", @"__WiFiDeviceManagerCopyDeviceScanCache"];
    }
    goto LABEL_15;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: CFArrayCreateMutable() returned NULL", @"__WiFiDeviceManagerCopyDeviceScanCache"];
    }
LABEL_15:
    return 0;
  }
  CFArrayRef v2 = Mutable;
  sub_10006C744();
  if (CFArrayGetCount(v2))
  {
    uint64_t v3 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    if (CFArrayGetCount(v2) >= 1)
    {
      CFIndex v4 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v2, v4);
        CFArrayRef v6 = sub_100019658((int)kCFAllocatorDefault, ValueAtIndex);
        if (v6)
        {
          id v7 = v6;
          CFArrayAppendValue(v3, v6);
          CFRelease(v7);
        }
        ++v4;
      }
      while (v4 < CFArrayGetCount(v2));
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: Beacon cache was empty", "__WiFiDeviceManagerCopyDeviceScanCache"];
    }
    uint64_t v3 = 0;
  }
  CFRelease(v2);
  return v3;
}

id sub_10012BF64(const __CFArray *a1)
{
  if (a1 && CFArrayGetCount(a1) >= 1)
  {
    CFIndex v3 = 0;
    id v4 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v3);
      if (ValueAtIndex)
      {
        id v6 = sub_10000AD1C((uint64_t)ValueAtIndex);
        if (v6)
        {
          id v7 = v6;
          if (!v4) {
            id v4 = objc_alloc_init((Class)NSMutableArray);
          }
          [v4 addObject:v7];
        }
      }
      ++v3;
    }
    while (CFArrayGetCount(a1) > v3);
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

void sub_10012C020(uint64_t *a1, const void *a2, const void *a3)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null device manager" arguments:("__WiFiDeviceManagerShowColocatedJoinNotification")];
    }
    goto LABEL_29;
  }
  if (![+[WiFiUserInteractionMonitor sharedInstance] isSetupCompleted])
  {
    CFNumberRef v18 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFNumberRef v19 = "suppressing limited compatibility modal as setup is not complete";
LABEL_28:
      [v18 WFLog:v19 message:v21];
    }
LABEL_29:
    goto LABEL_15;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: current network is null" args:("__WiFiDeviceManagerShowColocatedJoinNotification")];
    }
    goto LABEL_29;
  }
  if (!a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: candidate manager is nil" args:__WiFiDeviceManagerShowColocatedJoinNotification];
    }
    goto LABEL_29;
  }
  id v7 = (void *)sub_10001A43C(a2);
  if (!v7)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: current network name is null" args:("__WiFiDeviceManagerShowColocatedJoinNotification")];
    }
    goto LABEL_29;
  }
  CFNumberRef v8 = v7;
  CFRetain(a2);
  CFRetain(a3);
  a1[1128] = (uint64_t)a2;
  a1[495] = (uint64_t)a3;
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: dispatching user assisted colocated network join alert for candidate/s", "__WiFiDeviceManagerShowColocatedJoinNotification")];
  }
  values = v8;
  keys = @"SSID_STR";
  CFDictionaryRef v10 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v10)
  {
    CFNumberRef v18 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v21 = "__WiFiDeviceManagerShowColocatedJoinNotification";
      CFNumberRef v19 = "%s: failed to create additionalInformation";
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  CFDictionaryRef v11 = v10;
  uint64_t v12 = sub_100017C48(a1[8]);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: type=%@(%d)", "__WiFiDeviceManagerDispatchStandaloneLimitedNetworkNotification", sub_10005AF90(0xDu), 13 message];
  }
  id v14 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t, void, const void *, CFDictionaryRef, uint64_t))a1[494];
  if (v14)
  {
    uint64_t v15 = v14(a1, v12, 13, 0, a3, v11, a1[496]);
    if (v15)
    {
      id v16 = (const void *)v15;
      sub_1000C2268(v15, (uint64_t)sub_100149810, (uint64_t)a1);
      sub_1000DAFA0((uint64_t)v16, a1[30]);
      a1[28] = (uint64_t)CFRetain(v16);
      sub_1001409B8((uint64_t)a1, @"autoJoinWaiting", 0, 0);
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: failed to create notification for type %@(%d)", "__WiFiDeviceManagerDispatchStandaloneLimitedNetworkNotification", sub_10005AF90(0xDu), 13 message];
      }
    }
  }
  CFRelease(v11);
LABEL_15:
}

void sub_10012C3B0(uint64_t *a1, const __CFString *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager." args:("WiFiDeviceManagerDispatchSimulatedColocatedJoinNotification", 0x0)];
    }
    goto LABEL_28;
  }
  id v4 = (const void *)sub_100017C48(a1[8]);
  id v5 = sub_100018FA8((uint64_t)a1, v4, 1);
  if (!v5)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: device is not connected to a network", "WiFiDeviceManagerDispatchSimulatedColocatedJoinNotification")];
    }
LABEL_28:
    id v18 = 0;
    goto LABEL_23;
  }
  id v6 = v5;
  id v7 = sub_100072970(a1[8], 0);
  CFNumberRef v8 = v7;
  if (v7)
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v9 = [(__CFArray *)v7 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v25;
      while (2)
      {
        for (CFIndex i = 0; i != v10; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v25 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(const void **)(*((void *)&v24 + 1) + 8 * i);
          CFStringRef v14 = (const __CFString *)sub_10001A43C(v13);
          if (CFEqual(v14, a2))
          {
            CFNumberRef v19 = sub_10001A43C(v6);
            if (v19) {
              sub_10001C6A4((uint64_t)v13, @"LimitedCompatibilityNetworkName", v19);
            }
            id v20 = sub_10000AD1C((uint64_t)v13);
            id v18 = [objc_alloc((Class)NSArray) initWithObjects:v20, 0];
            id v21 = sub_10010BA9C((uint64_t)a1);
            if (v21)
            {
              CFNumberRef v22 = [[WiFiColocatedNetworkManager alloc] initWithNetwork:v21 colocatedNetworks:v18];
              sub_10012C020(a1, v6, v22);
            }
            goto LABEL_21;
          }
        }
        id v10 = [(__CFArray *)v8 countByEnumeratingWithState:&v24 objects:v28 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: scanning for %@", "WiFiDeviceManagerDispatchSimulatedColocatedJoinNotification", a2 message];
    }
  }
  id v16 = sub_100120A54(0, 0, 0, 0x6Eu, 1);
  CFDictionarySetValue(v16, @"SSID_STR", a2);
  uint64_t v17 = (const void *)sub_100017C48(a1[8]);
  sub_100113508((uint64_t)a1, v17, v16, 0, (uint64_t)sub_10012C6C0, (uint64_t)a1, 0, 22);
  id v18 = 0;
LABEL_21:
  CFRelease(v6);
  if (v8) {
    CFRelease(v8);
  }
LABEL_23:
}

void sub_10012C6C0(int a1, int a2, CFArrayRef theArray, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  if (!a6)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, "%s: manager is null", "__WiFiDeviceManagerSimulatedColocatedJoinNotificationScanCallback"];
    }
    goto LABEL_19;
  }
  if (!theArray || !CFArrayGetCount(theArray))
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: scan results were empty", "__WiFiDeviceManagerSimulatedColocatedJoinNotificationScanCallback"];
    }
LABEL_19:
    id v11 = 0;
    id v16 = 0;
    id v9 = 0;
LABEL_23:
    uint64_t v15 = 0;
    goto LABEL_10;
  }
  CFNumberRef v8 = (const void *)sub_100017C48(a6[8]);
  id v9 = sub_100018FA8((uint64_t)a6, v8, 1);
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  id v11 = [objc_alloc((Class)NSArray) initWithObjects:ValueAtIndex, CFArrayGetValueAtIndex(theArray, 1), nil];
  uint64_t v12 = CFArrayGetValueAtIndex(theArray, 0);
  id v13 = CFArrayGetValueAtIndex(theArray, 1);
  id v14 = sub_10010BA9C((uint64_t)a6);
  if (!v14)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: __WiFiDeviceManagerCopyCurrentCoreWiFiScanResult() returned NULL", @"__WiFiDeviceManagerSimulatedColocatedJoinNotificationScanCallback"];
    }
    id v16 = 0;
    goto LABEL_23;
  }
  uint64_t v15 = v14;
  id v16 = [[WiFiColocatedNetworkManager alloc] initWithNetwork:v14 colocatedNetworks:v11];
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: simulating colocated join notification for %@", "__WiFiDeviceManagerSimulatedColocatedJoinNotificationScanCallback", -[WiFiColocatedNetworkManager colocatedNetworks](v16, "colocatedNetworks") message];
  }
  id v18 = sub_10001A43C(v9);
  if (v18)
  {
    CFNumberRef v19 = v18;
    sub_10001C6A4((uint64_t)v12, @"LimitedCompatibilityNetworkName", v18);
    sub_10001C6A4((uint64_t)v13, @"LimitedCompatibilityNetworkName", v19);
  }
  sub_10012C020(a6, v9, v16);
LABEL_10:

  if (v9)
  {
    CFRelease(v9);
  }
}

void sub_10012C964(uint64_t a1, const void *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null device manager" arguments:("WiFiDeviceManagerDispatchAppJoinNotification")];
    }
    goto LABEL_16;
  }
  id v5 = sub_10001A43C(a2);
  if (!v5)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: network name is null" arguments:@"WiFiDeviceManagerDispatchAppJoinNotification"];
    }
    goto LABEL_16;
  }
  id v6 = v5;
  if (!sub_10001E404((uint64_t)a2, @"OriginatingApp"))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: app name is null", "WiFiDeviceManagerDispatchAppJoinNotification")];
    }
LABEL_16:
    goto LABEL_7;
  }
  CFRetain(a2);
  *(void *)(a1 + 6248) = a2;
  int v7 = sub_1000D1FFC((uint64_t)a2);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: dispatching user forced association notify alert for network='%@'", "WiFiDeviceManagerDispatchAppJoinNotification", a2 message];
  }
  [*(id *)(a1 + 6704) dispatchAccessoryJoinAlertForNetwork:v6 unsecured:v7 != 0];
LABEL_7:
}

void sub_10012CAF4(uint64_t a1)
{
  if ([+[WiFiUserInteractionMonitor sharedInstance] isSetupCompleted])
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: User has already set up device" arguments:("WiFiDeviceManagerSubmitSetupMetric", nil)];
    }
    goto LABEL_24;
  }
  id v2 = sub_10010BA9C(a1);
  if (!v2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Not able to submit setup metric __WiFiDeviceManagerCopyCurrentCoreWiFiScanResult returned NULL", @"WiFiDeviceManagerSubmitSetupMetric"];
    }
LABEL_24:
    id v14 = 0;
    CFIndex v3 = 0;
    goto LABEL_17;
  }
  CFIndex v3 = v2;
  id v14 = sub_10012CD64(a1);
  if (v14)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      id v5 = Mutable;
      unsigned int v6 = [v3 channel].band;
      if (v6 == 3)
      {
        CFDictionarySetValue(v5, @"infraBand", @"6");
        if ([(CFDictionaryRef *)v14 isStandalone6G]) {
          CFBooleanRef v9 = kCFBooleanTrue;
        }
        else {
          CFBooleanRef v9 = kCFBooleanFalse;
        }
        CFDictionarySetValue(v5, @"isSplitSSID", v9);
        CFStringRef v7 = @"suppressedBanner";
        id v10 = v5;
        CFStringRef v8 = (const __CFString *)kCFBooleanTrue;
      }
      else
      {
        if (v6 == 2)
        {
          CFStringRef v7 = @"infraBand";
          CFStringRef v8 = @"5";
        }
        else
        {
          if (v6 != 1)
          {
LABEL_16:
            sub_100058DBC(@"com.apple.wifi.setup", (uint64_t)v5);
            CFRelease(v5);
            goto LABEL_17;
          }
          CFStringRef v7 = @"infraBand";
          CFStringRef v8 = @"2";
        }
        id v10 = v5;
      }
      CFDictionarySetValue(v10, v7, v8);
      goto LABEL_16;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: metric is null" args:("WiFiDeviceManagerSubmitSetupMetric")];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Not able to submit setup metric __WiFiDeviceManagerCopyCurrentCoreWiFiNetworkProfile returned NULL", "WiFiDeviceManagerSubmitSetupMetric"];
    }
    id v14 = 0;
  }
LABEL_17:
}

CFDictionaryRef *sub_10012CD64(uint64_t a1)
{
  id v2 = (const void *)sub_100016E20(*(void *)(a1 + 64));
  CFArrayRef result = (CFDictionaryRef *)sub_100018FA8(a1, v2, 1);
  if (result)
  {
    id v4 = result;
    id v5 = sub_10001CECC(result);
    CFRelease(v4);
    return (CFDictionaryRef *)v5;
  }
  return result;
}

void sub_10012CDB8(void *a1, uint64_t a2)
{
  id v5 = (void *)a1[495];
  unsigned int v6 = sub_1000DAD30(a2);
  CFStringRef v7 = sub_1000D1628([v5 retrieveNextCandidate]);
  if (!v7)
  {
    if (qword_10027DD68)
    {
      CFNumberRef v22 = "Could not create WiFiNetworkRef from scan result";
      CFIndex v23 = (void *)qword_10027DD68;
LABEL_28:
      [v23 WFLog:4 message:v22, v25];
    }
LABEL_29:
    goto LABEL_18;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: ResponseType=%@", "__WiFiDeviceManagerProcessColocatedJoinNotification", sub_1000DB1B8(v6) message];
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    CFIndex v23 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      long long v25 = "__WiFiDeviceManagerProcessColocatedJoinNotification";
      CFNumberRef v22 = "%s: metric is null";
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  id v10 = Mutable;
  CFDictionarySetValue(Mutable, @"BannerType", @"limitednetworkjoin");
  if (v6 - 2 < 2)
  {
    CFDictionarySetValue(v10, @"UserAction", @"dismissed");
    id v11 = (const void *)a1[1128];
    if (v11)
    {
      CFRelease(v11);
      a1[1128] = 0;
    }
    goto LABEL_16;
  }
  if (v6 == 1)
  {
    CFDictionarySetValue(v10, @"UserAction", @"join");
    CFDictionaryRef v12 = (const __CFDictionary *)sub_100016E20(a2);
    if (v12)
    {
      CFNumberRef Value = CFDictionaryGetValue(v12, @"SSID_STR");
      if (Value)
      {
        id v14 = Value;
        uint64_t v15 = sub_10012D194((uint64_t)a1, (uint64_t)Value);
        if (v15)
        {
          id v16 = (CFDictionaryRef *)sub_1000CFEE8(v15, [v15 properties]);
          if (v16)
          {
            uint64_t v17 = v16;
            if (!sub_1000C8798((uint64_t)v16))
            {
              CFStringRef v19 = 0;
              goto LABEL_20;
            }
            CFStringRef v18 = sub_1000C62C8(v17);
            if (v18)
            {
              CFStringRef v19 = v18;
              sub_1000C93E0(v7, v18);
LABEL_20:
              CFRelease(v17);
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: disabling device manager", "__WiFiDeviceManagerProcessColocatedJoinNotification")];
              }
              sub_10010222C((uint64_t)a1);
              CFRetain(v7);
              a1[1127] = v7;
              id v21 = a1[30];
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472;
              block[2] = sub_10012D334;
              block[3] = &unk_10023F048;
              void block[4] = a1;
              void block[5] = v7;
              dispatch_async(v21, block);
              sub_100058DBC(@"com.apple.wifi.6eNotification", (uint64_t)v10);
              if (v19) {
                CFRelease(v19);
              }
              goto LABEL_17;
            }
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4, "%s: failed to retrieve password for %@", "__WiFiDeviceManagerProcessColocatedJoinNotification", v14 message];
            }
          }
          else
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4, "%s: failed to  %@", "__WiFiDeviceManagerProcessColocatedJoinNotification", v14 message];
            }
          }
        }
        else
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s: no matching profile for %@", "__WiFiDeviceManagerProcessColocatedJoinNotification", v14 message];
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: no SSID in additional information" args:v26];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: notification for %@ is missing additional information", "__WiFiDeviceManagerProcessColocatedJoinNotification", sub_10001A43C(v7) message];
      }
    }
    goto LABEL_17;
  }
LABEL_16:
  sub_100058DBC(@"com.apple.wifi.6eNotification", (uint64_t)v10);
LABEL_17:
  CFRelease(v10);
LABEL_18:
}

void *sub_10012D194(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is null" args:("__WiFiDeviceManagerFindKnownNetworkMatchingNetworkName", NULL)];
    }
    goto LABEL_17;
  }
  id v5 = [[objc_msgSend(*(id *)(a1 + 8824), "knownNetworks") allObjects];
  if (!v5)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: known network profiles is nil" args:("__WiFiDeviceManagerFindKnownNetworkMatchingNetworkName")];
    }
LABEL_17:
    goto LABEL_11;
  }
  unsigned int v6 = v5;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (!v7)
  {
LABEL_11:
    id v11 = 0;
    goto LABEL_12;
  }
  id v8 = v7;
  uint64_t v9 = *(void *)v15;
LABEL_5:
  uint64_t v10 = 0;
  while (1)
  {
    if (*(void *)v15 != v9) {
      objc_enumerationMutation(v6);
    }
    id v11 = *(void **)(*((void *)&v14 + 1) + 8 * v10);
    if (objc_msgSend(objc_msgSend(v11, "networkName"), "isEqualToString:", a2)) {
      break;
    }
    if (v8 == (id)++v10)
    {
      id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v8) {
        goto LABEL_5;
      }
      goto LABEL_11;
    }
  }
LABEL_12:
  return v11;
}

uint64_t sub_10012D334(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFIndex v3 = (const void *)sub_100017C48(*(void *)(v2 + 64));
  id v4 = *(void **)(a1 + 40);

  return sub_100113EA0(v2, v3, v4, 0, 0, (uint64_t)sub_10012D39C, 0, 1026);
}

void sub_10012D39C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void **)(a1 + 3960);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: error %d reqInfo %@", "__WiFiDeviceManagerColocatedJoinAssociationCallback", a5, a4 message];
  }
  id v11 = *(void **)(a1 + 9016);
  if (!v11)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: join candidate is null" args:("__WiFiDeviceManagerColocatedJoinAssociationCallback", nil)];
    }
    CFIndex v23 = v12;
LABEL_29:
    return;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: enabling device manager", @"__WiFiDeviceManagerColocatedJoinAssociationCallback"];
  }
  sub_1001020F0(a1);
  if (a5)
  {
    if (sub_1000C8798((uint64_t)v11))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: removing password for %@ due to failed association", "__WiFiDeviceManagerColocatedJoinAssociationCallback", v11 message];
      }
      sub_1000C94E0(v11);
    }
    goto LABEL_12;
  }
  CFStringRef v14 = (const __CFString *)sub_10001A43C(a3);
  CFStringRef v15 = (const __CFString *)sub_10001A43C(v11);
  if (CFStringCompare(v14, v15, 0))
  {
LABEL_12:
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: launching settings to complete join for %@", "__WiFiDeviceManagerColocatedJoinAssociationCallback", v11 message];
    }
    sub_10013ECC8(0, (CFDictionaryRef *)v11);
    return;
  }
  sub_100093634(*(void *)(a1 + 6792), a3, 18);
  if ([v9 numberOfCandidates])
  {
    long long v17 = sub_1000D1628([v9 retrieveNextCandidate]);
    if (v17)
    {
      CFStringRef v18 = v17;
      if (!sub_1000C8798((uint64_t)v17))
      {
LABEL_22:
        CFRetain(v18);
        *(void *)(a1 + 9016) = v18;
        id v21 = *(NSObject **)(a1 + 240);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100151290;
        block[3] = &unk_10023F048;
        void block[4] = v18;
        void block[5] = a1;
        dispatch_async(v21, block);
        return;
      }
      CFStringRef v19 = sub_1000C62C8(*(CFDictionaryRef **)(a1 + 9024));
      if (v19)
      {
        CFStringRef v20 = v19;
        sub_1000C93E0(v18, v19);
        CFRelease(v20);
        goto LABEL_22;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: failed to get password for %@", "__WiFiDeviceManagerColocatedJoinAssociationCallback", *(void *)(a1 + 9024) message];
      }
      CFIndex v23 = v25;
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4 message:"Could not create WiFiNetworkRef from scan result"];
      }
      CFIndex v23 = v24;
    }
    goto LABEL_29;
  }
  CFNumberRef v22 = *(const void **)(a1 + 9016);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(a1 + 9016) = 0;
  }
}

uint64_t sub_10012D6A8()
{
  return 0;
}

void sub_10012D6C8(uint64_t a1)
{
  if (a1)
  {
    id v3 = [*(id *)(a1 + 6648) networksInDenyListedState:3];
    if (v3)
    {
      id v4 = (unsigned char *)(a1 + 9065);
      *(unsigned char *)(a1 + 9065) = [v3 count] != 0;
      if (qword_10027DD68)
      {
        if (*v4) {
          unsigned int v6 = "YES";
        }
        else {
          unsigned int v6 = "NO";
        }
        [((id)qword_10027DD68) WFLog:3, "%s: WoW Denylist non-empty: %s", "WiFiDeviceManagerProcessWoWDenylistUpdate", v6];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Failed to get WoW Denylisted networks", "WiFiDeviceManagerProcessWoWDenylistUpdate", v7);
      }
    }
  }
}

uint64_t sub_10012D7CC(void *a1, const void *a2, CFTypeRef cf1, const void *a4)
{
  if (CFEqual(cf1, @"IO80211InterfaceBGScanParams"))
  {
    id v8 = (CFTypeRef *)(a1 + 684);
    uint64_t v9 = (const void *)a1[684];
    if (!v9)
    {
LABEL_4:
      CFTypeRef *v8 = CFRetain(a4);
      goto LABEL_5;
    }
LABEL_3:
    CFRelease(v9);
    CFTypeRef *v8 = 0;
    goto LABEL_4;
  }
  if (CFEqual(cf1, @"IO80211InterfaceBGDynamicProfileParams"))
  {
    id v8 = (CFTypeRef *)(a1 + 685);
    uint64_t v9 = (const void *)a1[685];
    if (!v9) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
LABEL_5:
  uint64_t v10 = a1[8];

  return sub_1000093F4(v10, a2, cf1, (uint64_t)a4);
}

uint64_t sub_10012D888(CFMutableArrayRef *a1, const void *a2, void *a3)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: null manager.", "WiFiDeviceManagerSetBackgroundScanConfiguration"];
    }
    goto LABEL_48;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: null interfaceName.", "WiFiDeviceManagerSetBackgroundScanConfiguration"];
    }
    goto LABEL_48;
  }
  if (!a3)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: null config.", "WiFiDeviceManagerSetBackgroundScanConfiguration"];
    }
LABEL_48:
    uint64_t v26 = 4294963396;
    goto LABEL_41;
  }
  id v7 = +[NSMutableDictionary dictionary];
  double v32 = a2;
  unsigned int v33 = v6;
  int v30 = a3;
  double v31 = a1;
  if ([a3 modifyMap])
  {
    double v29 = v7;
    id v8 = +[NSMutableArray array];
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    id obj = [a3 channels];
    id v9 = [obj countByEnumeratingWithState:&v40 objects:v51 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v41;
      do
      {
        for (CFIndex i = 0; i != v10; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v41 != v11) {
            objc_enumerationMutation(obj);
          }
          id v13 = *(void **)(*((void *)&v40 + 1) + 8 * i);
          v49[0] = @"CHANNEL";
          CFStringRef v14 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v13 channel]);
          v49[1] = @"CHANNEL_FLAGS";
          v50[0] = v14;
          v50[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v13 flags]);
          [v8 addObject:[+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v50, v49, 2)];
        }
        id v10 = [obj countByEnumeratingWithState:&v40 objects:v51 count:16];
      }
      while (v10);
    }
    id v7 = v29;
    [v29 setObject:v8 forKeyedSubscript:@"SCAN_CHANNELS"];
    a2 = v32;
    unsigned int v6 = v33;
  }
  if (([a3 modifyMap] & 4) != 0) {
    [v7 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [a3 cacheEnabled]) forKeyedSubscript:@"BGSCAN_CACHE"];
  }
  if (([a3 modifyMap] & 8) != 0) {
    [v7 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [a3 cacheRollover]) forKeyedSubscript:@"BGSCAN_CACHE_WSB_ROLLOVER"];
  }
  if ([v7 count])
  {
    sub_10011B804((uint64_t)a1, (CFDictionaryRef)v7, 0);
    if (([a3 modifyMap] & 2) == 0)
    {
LABEL_35:
      sub_10010677C((uint64_t)a1);
      goto LABEL_36;
    }
LABEL_21:
    id v15 = +[NSMutableSet set];
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id obja = [a3 networks];
    id v16 = [obja countByEnumeratingWithState:&v36 objects:v48 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v37;
      do
      {
        for (CFIndex j = 0; j != v17; CFIndex j = (char *)j + 1)
        {
          if (*(void *)v37 != v18) {
            objc_enumerationMutation(obja);
          }
          CFStringRef v20 = *(void **)(*((void *)&v36 + 1) + 8 * (void)j);
          id v21 = +[NSMutableDictionary dictionary];
          [v21 setObject:objc_msgSend(v20, "BSSID") forKeyedSubscript:@"BSSID"];
          [v21 setObject:+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v20 channel]) forKeyedSubscript:@"CHANNEL"];
          [v21 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v20 channel flags]) forKeyedSubscript:@"CHANNEL_FLAGS"];
          if ([v20 entry]) {
            [v21 setObject:&__kCFBooleanTrue forKeyedSubscript:@"ENTRY_NETWORK"];
          }
          if ([v20 exit]) {
            [v21 setObject:&__kCFBooleanTrue forKeyedSubscript:@"EXIT_NETWORK"];
          }
          CFNumberRef v22 = sub_100019658((int)kCFAllocatorDefault, v21);
          if (v22)
          {
            CFIndex v23 = v22;
            sub_10001C6A4((uint64_t)v22, @"forceBGScanParamsCompare", kCFBooleanTrue);
            [v15 addObject:v23];
            CFRelease(v23);
          }
        }
        id v17 = [obja countByEnumeratingWithState:&v36 objects:v48 count:16];
      }
      while (v17);
    }
    CFArrayRef v24 = (const __CFArray *)[v15 allObjects];
    a1 = v31;
    sub_100108AD0(v31, v24, 0);
    a2 = v32;
    unsigned int v6 = v33;
    a3 = v30;
    goto LABEL_35;
  }
  if (([a3 modifyMap] & 2) != 0) {
    goto LABEL_21;
  }
LABEL_36:
  if (([a3 modifyMap] & 0x10) == 0) {
    goto LABEL_51;
  }
  v46[0] = @"IO80211InterfaceBGScanDynamicProfileStartTime";
  v47[0] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a3 scanFrequency]);
  v46[1] = @"IO80211InterfaceBGScanDynamicProfileScanFreq";
  long long v25 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a3 scanFrequency]);
  v46[2] = @"IO80211InterfaceBGScanDynamicProfileDuration";
  v47[1] = v25;
  v47[2] = &off_100263358;
  uint64_t v26 = sub_10012D7CC(a1, a2, @"IO80211InterfaceBGDynamicProfileParams", +[NSDictionary dictionaryWithObjects:v47 forKeys:v46 count:3]);
  if (!v26)
  {
LABEL_51:
    if (([a3 modifyMap] & 0x20) == 0
      || (CFStringRef v44 = @"IO80211InterfaceBGScanLostNetTO",
          v45 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a3 lostNetworkScanCount]), uint64_t v26 = sub_10012D7CC(a1, a2, @"IO80211InterfaceBGScanParams", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v45, &v44, 1)), !v26))
    {
      uint64_t v26 = 0;
    }
  }
LABEL_41:
  return v26;
}

id sub_10012DED0(uint64_t a1)
{
  if (a1)
  {
    id v3 = objc_alloc_init((Class)CWFBackgroundScanConfiguration);
    id v4 = *(void **)(a1 + 5480);
    if (v4) {
      [v3 setScanFrequency:[objc_msgSend(objc_msgSend(v4, "objectForKeyedSubscript:", @"IO80211InterfaceBGScanDynamicProfileScanFreq"), "unsignedIntegerValue") unsignedIntegerValue]];
    }
    id v5 = *(void **)(a1 + 5472);
    if (v5) {
      [v3 setLostNetworkScanCount:[objc_msgSend(objc_msgSend(v5, "objectForKeyedSubscript:", @"IO80211InterfaceBGScanLostNetTO"), "unsignedIntegerValue") unsignedIntegerValue]];
    }
    char context = v2;
    [v3 setCacheEnabled:*(unsigned char *)(a1 + 5457) != 0];
    [v3 setCacheRollover:*(unsigned char *)(a1 + 5458) != 0];
    unsigned int v6 = *(void **)(a1 + 5448);
    double v31 = v3;
    if (v6)
    {
      uint64_t v29 = a1;
      id v7 = +[NSMutableArray array];
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      id v8 = [v6 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v33;
        do
        {
          for (CFIndex i = 0; i != v9; CFIndex i = (char *)i + 1)
          {
            if (*(void *)v33 != v10) {
              objc_enumerationMutation(v6);
            }
            CFDictionaryRef v12 = *(void **)(*((void *)&v32 + 1) + 8 * i);
            id v13 = objc_alloc_init((Class)CWFChannel);
            [v13 setChannel:[objc_msgSend(objc_msgSend(v12, "objectForKeyedSubscript:", @"CHANNEL"), "unsignedIntegerValue") unsignedIntegerValue]];
            id v14 = [v12 objectForKeyedSubscript:@"CHANNEL_FLAGS"];
            if (v14)
            {
              uint64_t v15 = (uint64_t)[v14 unsignedIntValue];
            }
            else if ((unint64_t)[v13 channel] <= 0xE)
            {
              uint64_t v15 = 10;
            }
            else
            {
              uint64_t v15 = 18;
            }
            [v13 setFlags:v15];
            [v7 addObject:v13];
          }
          id v9 = [v6 countByEnumeratingWithState:&v32 objects:v36 count:16];
        }
        while (v9);
      }
      [v3 setChannels:v7];
      a1 = v29;
    }
    CFArrayRef v16 = *(const __CFArray **)(a1 + 3592);
    if (v16)
    {
      id v17 = +[NSMutableArray array];
      if (CFArrayGetCount(v16) >= 1)
      {
        CFIndex v18 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v16, v18);
          if (ValueAtIndex && (CFDictionaryRef v21 = sub_10000E5B8((uint64_t)ValueAtIndex)) != 0)
          {
            CFDictionaryRef v22 = v21;
            id v23 = objc_alloc_init((Class)CWFBackgroundScanNetwork);
            CFDictionaryGetValue(v22, @"BSSID");
            [v23 setBSSID:CWFCorrectEthernetAddressString()];
            id v24 = objc_alloc_init((Class)CWFChannel);
            [v24 setChannel:[((id)CFDictionaryGetValue(v22, @"CHANNEL")) unsignedIntegerValue]];
            CFNumberRef Value = (void *)CFDictionaryGetValue(v22, @"CHANNEL_FLAGS");
            if (Value)
            {
              uint64_t v26 = (uint64_t)[Value unsignedIntValue];
            }
            else if ((unint64_t)[v24 channel] <= 0xE)
            {
              uint64_t v26 = 10;
            }
            else
            {
              uint64_t v26 = 18;
            }
            [v24 setFlags:v26];
            [v23 setChannel:v24];
            [v23 setEntry:[-[__CFDictionary objectForKeyedSubscript:](v22, "objectForKeyedSubscript:", @"ENTRY_NETWORK") BOOLValue]];
            [v23 setExit:[-[__CFDictionary objectForKeyedSubscript:](v22, "objectForKeyedSubscript:", @"EXIT_NETWORK") BOOLValue]];
            CFRelease(v22);
            if (v23)
            {
              [v17 addObject:v23];
            }
          }
          else
          {
          }
          ++v18;
        }
        while (v18 < CFArrayGetCount(v16));
      }
      id v3 = v31;
      [v31 setNetworks:v17];
    }
    [v3 setModifyMap:0];
    uint64_t v2 = context;
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null manager.", "WiFiDeviceManagerCopyBackgroundScanConfiguration")];
    }
    id v3 = 0;
  }
  return v3;
}

NSMutableArray *sub_10012E320(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 6648) networksInDenyListedState:1];
  if ([v2 count]) {
    id v3 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v2 count]);
  }
  else {
    id v3 = 0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v2);
        }
        -[NSMutableArray addObject:](v3, "addObject:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", [*(id *)(*((void *)&v10 + 1) + 8 * (void)v7) copy], @"network", [objc_msgSend(*(id *)(a1 + 6648), "reasonsForNetworkInDenyListedState:state:timestamps:reasonData:", *(void *)(*((void *)&v10 + 1) + 8 * (void)v7), 1, 0, 0), "copy"], @"reasons", 0));
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
  return v3;
}

BOOL sub_10012E4D4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_100123CCC(a1, a2, a3) != 0;
}

uint64_t sub_10012E4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = sub_10000AD1C(a3);
  [*(id *)(a1 + 6648) removeNetworkDenyListInfoWithReason:a2 forScanResult:v5];

  return 1;
}

void sub_10012E544(uint64_t a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"Enter: %s %d\n" args:("__WiFiDeviceManagerRelease", 2546)];
  }
  uint64_t v4 = *(void *)(a1 + 240);
  if (v4) {
    sub_1000FF740(a1, v4);
  }
  id v5 = *(const void **)(a1 + 3512);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 3512) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 3648);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 3648) = 0;
  }
  id v7 = *(const void **)(a1 + 64);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 64) = 0;
  }
  id v8 = *(const void **)(a1 + 96);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 96) = 0;
  }
  id v9 = *(NSObject **)(a1 + 312);
  if (v9)
  {
    dispatch_release(v9);
    *(void *)(a1 + 312) = 0;
  }
  long long v10 = *(NSObject **)(a1 + 360);
  if (v10)
  {
    dispatch_release(v10);
    *(void *)(a1 + 360) = 0;
  }
  long long v11 = *(const void **)(a1 + 3504);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 3504) = 0;
  }
  long long v12 = *(const void **)(a1 + 3536);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 3536) = 0;
  }
  long long v13 = *(const void **)(a1 + 3528);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 3528) = 0;
  }
  id v14 = *(const void **)(a1 + 3552);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 3552) = 0;
  }
  uint64_t v15 = *(const void **)(a1 + 3544);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 3544) = 0;
  }
  CFArrayRef v16 = *(const void **)(a1 + 3576);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 3576) = 0;
  }
  id v17 = *(const void **)(a1 + 3584);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 3584) = 0;
  }
  CFIndex v18 = *(const void **)(a1 + 3592);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 3592) = 0;
  }
  CFStringRef v19 = *(const void **)(a1 + 3568);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 3568) = 0;
  }
  CFStringRef v20 = *(const void **)(a1 + 3560);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(a1 + 3560) = 0;
  }
  CFDictionaryRef v21 = *(const void **)(a1 + 3656);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(a1 + 3656) = 0;
  }
  CFDictionaryRef v22 = *(const void **)(a1 + 3600);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(a1 + 3600) = 0;
  }
  id v23 = *(const void **)(a1 + 3608);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(a1 + 3608) = 0;
  }
  id v24 = *(const void **)(a1 + 3328);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(a1 + 3328) = 0;
  }
  long long v25 = *(const void **)(a1 + 3336);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(a1 + 3336) = 0;
  }
  uint64_t v26 = *(const void **)(a1 + 3624);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a1 + 3624) = 0;
  }
  long long v27 = *(const void **)(a1 + 3632);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(a1 + 3632) = 0;
  }
  uint64_t v28 = *(const void **)(a1 + 3640);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(a1 + 3640) = 0;
  }
  uint64_t v29 = *(const void **)(a1 + 3288);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(a1 + 3288) = 0;
  }
  int v30 = *(const void **)(a1 + 3320);
  if (v30)
  {
    CFRelease(v30);
    *(void *)(a1 + 3320) = 0;
  }
  double v31 = *(const void **)(a1 + 1104);
  if (v31)
  {
    CFRelease(v31);
    *(void *)(a1 + 1104) = 0;
  }
  long long v32 = *(const void **)(a1 + 1168);
  if (v32)
  {
    CFRelease(v32);
    *(void *)(a1 + 1168) = 0;
  }
  long long v33 = *(const void **)(a1 + 376);
  if (v33)
  {
    CFRelease(v33);
    *(void *)(a1 + 376) = 0;
  }
  long long v34 = *(const void **)(a1 + 272);
  if (v34)
  {
    CFRelease(v34);
    *(void *)(a1 + 272) = 0;
  }
  long long v35 = *(const void **)(a1 + 5440);
  if (v35)
  {
    CFRelease(v35);
    *(void *)(a1 + 5440) = 0;
  }
  long long v36 = *(const void **)(a1 + 120);
  if (v36)
  {
    CFRelease(v36);
    *(void *)(a1 + 120) = 0;
  }
  long long v37 = *(const void **)(a1 + 4936);
  if (v37)
  {
    CFRelease(v37);
    *(void *)(a1 + 4936) = 0;
  }
  long long v38 = *(const void **)(a1 + 976);
  if (v38)
  {
    CFRelease(v38);
    *(void *)(a1 + 976) = 0;
  }
  long long v39 = *(const void **)(a1 + 56);
  if (v39)
  {
    CFRelease(v39);
    *(void *)(a1 + 56) = 0;
  }
  long long v40 = *(NSObject **)(a1 + 5512);
  if (v40)
  {
    dispatch_release(v40);
    *(void *)(a1 + 5512) = 0;
  }
  long long v41 = *(NSObject **)(a1 + 8592);
  if (v41)
  {
    dispatch_release(v41);
    *(void *)(a1 + 8592) = 0;
  }
  long long v42 = *(NSObject **)(a1 + 8632);
  if (v42)
  {
    dispatch_release(v42);
    *(void *)(a1 + 8632) = 0;
  }
  long long v43 = *(NSObject **)(a1 + 1000);
  if (v43)
  {
    dispatch_release(v43);
    *(void *)(a1 + 1000) = 0;
  }
  CFStringRef v44 = *(NSObject **)(a1 + 1056);
  if (v44)
  {
    dispatch_release(v44);
    *(void *)(a1 + 1056) = 0;
  }
  uint64_t v45 = *(NSObject **)(a1 + 5528);
  if (v45)
  {
    dispatch_release(v45);
    *(void *)(a1 + 5528) = 0;
  }
  uint64_t v46 = *(void *)(a1 + 4944);
  if (v46)
  {
    if (_MISDetach) {
      _MISDetach(v46);
    }
    *(void *)(a1 + 4944) = 0;
  }
  IOPMAssertionID v47 = *(_DWORD *)(a1 + 5228);
  if (v47)
  {
    IOPMAssertionRelease(v47);
    *(_DWORD *)(a1 + 5228) = 0;
  }
  IOPMAssertionID v48 = *(_DWORD *)(a1 + 6764);
  if (v48)
  {
    IOPMAssertionRelease(v48);
    *(_DWORD *)(a1 + 6764) = 0;
  }
  CFIndex v49 = *(NSObject **)(a1 + 5240);
  if (v49)
  {
    dispatch_release(v49);
    *(void *)(a1 + 5240) = 0;
  }
  uint64_t v50 = *(NSObject **)(a1 + 5320);
  if (v50)
  {
    dispatch_release(v50);
    *(void *)(a1 + 5320) = 0;
  }
  CFDictionaryRef v51 = *(const void **)(a1 + 5368);
  if (v51)
  {
    CFRelease(v51);
    *(void *)(a1 + 5368) = 0;
  }
  uint64_t v52 = *(const void **)(a1 + 5376);
  if (v52)
  {
    CFRelease(v52);
    *(void *)(a1 + 5376) = 0;
  }
  unint64_t v53 = *(const void **)(a1 + 5448);
  if (v53)
  {
    CFRelease(v53);
    *(void *)(a1 + 5448) = 0;
  }
  uint64_t v54 = *(const void **)(a1 + 5472);
  if (v54)
  {
    CFRelease(v54);
    *(void *)(a1 + 5472) = 0;
  }
  CFNumberRef v55 = *(const void **)(a1 + 5480);
  if (v55)
  {
    CFRelease(v55);
    *(void *)(a1 + 5480) = 0;
  }
  [*(id *)(a1 + 5408) resetDevice];
  *(void *)(a1 + 5408) = 0;
  uint64_t v56 = *(const void **)(a1 + 5488);
  if (v56)
  {
    CFRelease(v56);
    *(void *)(a1 + 5488) = 0;
  }
  unint64_t v57 = *(const void **)(a1 + 3368);
  if (v57)
  {
    CFRelease(v57);
    *(void *)(a1 + 3368) = 0;
  }
  long long v58 = *(const void **)(a1 + 3376);
  if (v58)
  {
    CFRelease(v58);
    *(void *)(a1 + 3376) = 0;
  }
  long long v59 = *(const void **)(a1 + 3384);
  if (v59)
  {
    CFRelease(v59);
    *(void *)(a1 + 3384) = 0;
  }
  long long v60 = *(const void **)(a1 + 3440);
  if (v60)
  {
    CFRelease(v60);
    *(void *)(a1 + 3440) = 0;
  }
  uint64_t v61 = *(const void **)(a1 + 6160);
  if (v61)
  {
    CFRelease(v61);
    *(void *)(a1 + 6160) = 0;
  }
  CFIndex v62 = *(const void **)(a1 + 6056);
  if (v62)
  {
    CFRelease(v62);
    *(void *)(a1 + 6056) = 0;
  }
  unsigned int v63 = *(const void **)(a1 + 6064);
  if (v63)
  {
    CFRelease(v63);
    *(void *)(a1 + 6064) = 0;
  }
  uint64_t v64 = *(const void **)(a1 + 5272);
  if (v64)
  {
    CFRelease(v64);
    *(void *)(a1 + 5272) = 0;
  }
  uint64_t v65 = *(const void **)(a1 + 5280);
  if (v65)
  {
    CFRelease(v65);
    *(void *)(a1 + 5280) = 0;
  }
  BOOL v66 = *(const void **)(a1 + 5288);
  if (v66)
  {
    CFRelease(v66);
    *(void *)(a1 + 5288) = 0;
  }
  CFArrayRef v67 = *(const void **)(a1 + 5296);
  if (v67)
  {
    CFRelease(v67);
    *(void *)(a1 + 5296) = 0;
  }
  uint64_t v68 = *(const void **)(a1 + 5304);
  if (v68)
  {
    CFRelease(v68);
    *(void *)(a1 + 5304) = 0;
  }
  CFNumberRef v69 = *(const void **)(a1 + 5312);
  if (v69)
  {
    CFRelease(v69);
    *(void *)(a1 + 5312) = 0;
  }
  CFRange v70 = *(const void **)(a1 + 3680);
  if (v70)
  {
    CFRelease(v70);
    *(void *)(a1 + 3680) = 0;
  }
  CFDictionaryRef v71 = *(const void **)(a1 + 6552);
  if (v71)
  {
    CFRelease(v71);
    *(void *)(a1 + 6552) = 0;
  }
  uint64_t v72 = *(const void **)(a1 + 6504);
  if (v72)
  {
    CFRelease(v72);
    *(void *)(a1 + 6504) = 0;
  }
  uint64_t v73 = *(const void **)(a1 + 6520);
  if (v73)
  {
    CFRelease(v73);
    *(void *)(a1 + 6520) = 0;
  }
  unint64_t v74 = *(const void **)(a1 + 6536);
  if (v74)
  {
    CFRelease(v74);
    *(void *)(a1 + 6536) = 0;
  }
  uint64_t v75 = *(const void **)(a1 + 6368);
  if (v75)
  {
    CFRelease(v75);
    *(void *)(a1 + 6368) = 0;
  }
  CFDictionaryRef v76 = *(const void **)(a1 + 6408);
  if (v76)
  {
    CFRelease(v76);
    *(void *)(a1 + 6408) = 0;
  }
  CFBooleanRef v77 = *(const void **)(a1 + 6424);
  if (v77)
  {
    CFRelease(v77);
    *(void *)(a1 + 6424) = 0;
  }
  CFRange v78 = *(const void **)(a1 + 6440);
  if (v78)
  {
    CFRelease(v78);
    *(void *)(a1 + 6440) = 0;
  }
  IOPMAssertionID v79 = *(_DWORD *)(a1 + 6580);
  if (v79)
  {
    IOPMAssertionRelease(v79);
    *(_DWORD *)(a1 + 6580) = 0;
    *(void *)(a1 + 6584) = 0;
  }
  uint64_t v80 = *(NSObject **)(a1 + 6808);
  if (v80)
  {
    dispatch_release(v80);
    *(void *)(a1 + 6808) = 0;
  }
  CFNumberRef v81 = *(NSObject **)(a1 + 6816);
  if (v81)
  {
    dispatch_release(v81);
    *(void *)(a1 + 6816) = 0;
  }
  uint64_t v82 = *(const void **)(a1 + 6840);
  if (v82)
  {
    CFRelease(v82);
    *(void *)(a1 + 6840) = 0;
  }
  uint64_t v83 = *(const void **)(a1 + 6912);
  if (v83)
  {
    CFRelease(v83);
    *(void *)(a1 + 6912) = 0;
  }
  id v84 = *(const void **)(a1 + 6920);
  if (v84)
  {
    CFRelease(v84);
    *(void *)(a1 + 6920) = 0;
  }
  unsigned int v85 = *(const void **)(a1 + 6928);
  if (v85)
  {
    CFRelease(v85);
    *(void *)(a1 + 6928) = 0;
  }

  *(void *)(a1 + 6936) = 0;
  uint64_t v86 = *(const void **)(a1 + 6656);
  if (v86)
  {
    CFRelease(v86);
    *(void *)(a1 + 6656) = 0;
  }
  uint64_t v87 = *(const void **)(a1 + 7032);
  if (v87)
  {
    CFRelease(v87);
    *(void *)(a1 + 7032) = 0;
  }

  *(void *)(a1 + 6640) = 0;
  uint64_t v88 = *(const void **)(a1 + 7064);
  if (v88)
  {
    CFRelease(v88);
    *(void *)(a1 + 7064) = 0;
  }
  uint64_t v89 = *(const void **)(a1 + 6672);
  if (v89)
  {
    CFRelease(v89);
    *(void *)(a1 + 6672) = 0;
  }
  BOOL v90 = *(const void **)(a1 + 6680);
  if (v90)
  {
    CFRelease(v90);
    *(void *)(a1 + 6680) = 0;
  }
  uint64_t v91 = *(const void **)(a1 + 6688);
  if (v91)
  {
    CFRelease(v91);
    *(void *)(a1 + 6688) = 0;
  }
  *(void *)(a1 + 6696) = 0;

  *(void *)(a1 + 6704) = 0;
  *(void *)(a1 + 6744) = 0;

  *(void *)(a1 + 6752) = 0;
  CFAbsoluteTime v92 = *(NSObject **)(a1 + 7320);
  if (v92)
  {
    dispatch_release(v92);
    *(void *)(a1 + 7320) = 0;
    *(unsigned char *)(a1 + 7312) = 0;
  }
  unsigned int v93 = *(NSObject **)(a1 + 7344);
  if (v93)
  {
    dispatch_release(v93);
    *(void *)(a1 + 7344) = 0;
    *(unsigned char *)(a1 + 7336) = 0;
  }
  unsigned int v94 = *(NSObject **)(a1 + 7216);
  if (v94)
  {
    dispatch_release(v94);
    *(void *)(a1 + 7216) = 0;
  }
  int v95 = *(NSObject **)(a1 + 7256);
  if (v95)
  {
    dispatch_release(v95);
    *(void *)(a1 + 7256) = 0;
  }
  unsigned int v96 = *(const void **)(a1 + 3704);
  if (v96)
  {
    CFRelease(v96);
    *(void *)(a1 + 3704) = 0;
  }
  int v97 = *(const void **)(a1 + 3696);
  if (v97)
  {
    CFRelease(v97);
    *(void *)(a1 + 3696) = 0;
  }
  uint64_t v98 = *(const void **)(a1 + 3712);
  if (v98)
  {
    CFRelease(v98);
    *(void *)(a1 + 3712) = 0;
  }
  uint64_t v99 = *(const void **)(a1 + 7392);
  if (v99)
  {
    CFRelease(v99);
    *(void *)(a1 + 7392) = 0;
  }
  CFArrayRef v100 = *(const void **)(a1 + 8976);
  if (v100)
  {
    CFRelease(v100);
    *(void *)(a1 + 8976) = 0;
  }
  uint64_t v101 = *(const void **)(a1 + 3776);
  if (v101)
  {
    CFRelease(v101);
    *(void *)(a1 + 3776) = 0;
  }
  CFNumberRef v102 = *(const void **)(a1 + 3736);
  if (v102)
  {
    CFRelease(v102);
    *(void *)(a1 + 3736) = 0;
  }
  CFNumberRef v103 = *(const void **)(a1 + 3752);
  if (v103)
  {
    CFRelease(v103);
    *(void *)(a1 + 3752) = 0;
  }
  *(unsigned char *)(a1 + 3744) = 0;
  *(unsigned char *)(a1 + 3760) = 0;
  int v104 = *(const void **)(a1 + 3832);
  if (v104)
  {
    CFRelease(v104);
    *(void *)(a1 + 3832) = 0;
  }

  *(void *)(a1 + 3856) = 0;
  *(_OWORD *)(a1 + 3788) = 0u;
  *(_OWORD *)(a1 + 3804) = 0u;
  *(void *)(a1 + 3817) = 0;
  int v105 = *(void **)(a1 + 968);
  if (v105)
  {

    *(void *)(a1 + 968) = 0;
  }
  CFMutableDictionaryRef v106 = *(NSObject **)(a1 + 8984);
  if (v106)
  {
    dispatch_release(v106);
    *(void *)(a1 + 8984) = 0;
  }
  unsigned int v107 = *(NSObject **)(a1 + 8992);
  if (v107)
  {
    dispatch_release(v107);
    *(void *)(a1 + 8992) = 0;
  }
  qword_10027D798 = 0;
}

uint64_t sub_10012ECE8(uint64_t a1)
{
  if (!*(void *)(a1 + 376) || !*(void *)(a1 + 392) || *(double *)(a1 + 384) == 0.0) {
    return 0;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  MutableCFStringRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, *(CFArrayRef *)(a1 + 376));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 376));
  if (MutableCopy)
  {
    if (CFArrayGetCount(MutableCopy) >= 1)
    {
      CFIndex v4 = 0;
      do
      {
        double valuePtr = 0.0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(MutableCopy, v4);
        if (ValueAtIndex)
        {
          CFNumberRef v6 = ValueAtIndex;
          CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, &valuePtr);
          if (valuePtr < Current && Current - valuePtr < *(double *)(a1 + 384)) {
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 376), v6);
          }
        }
        ++v4;
      }
      while (v4 < CFArrayGetCount(MutableCopy));
    }
    CFRelease(MutableCopy);
  }
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 376)) < *(void *)(a1 + 392)) {
    return 0;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: scan throttle exceeded: there have been %ld attempts in the past %f seconds", "__WiFiDeviceManagerIsScanThrottleLimitExceeded", CFArrayGetCount(*(CFArrayRef *)(a1 + 376)), *(void *)(a1 + 384)];
  }
  return 1;
}

uint64_t sub_10012EE58(uint64_t a1, void *a2, unsigned int a3)
{
  if (!a2)
  {
    long long v10 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      unint64_t v40 = a3;
      id v9 = "%s: null network,  isFilteringAJCandidates %d";
LABEL_28:
      [v10 WFLog:3 message:v9 "__WiFiDeviceManagerKnownNetworkSuitabilityCheck" v40 v41];
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  if (CFSetContainsValue(*(CFSetRef *)(a1 + 3504), a2))
  {
    uint64_t v8 = qword_10027DD68;
    if (qword_10027DD68)
    {
      unint64_t v40 = (unint64_t)sub_10001A43C(a2);
      uint64_t v41 = a3;
      id v9 = "%s: user canceled network %@, isFilteringAJCandidates %d";
LABEL_27:
      long long v10 = (void *)v8;
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  if (&_CNForgetSSID && sub_10001E404((uint64_t)a2, kCNSIsWhitelistedCaptiveNetworkProperty) == kCFBooleanTrue)
  {
    uint64_t v8 = qword_10027DD68;
    if (qword_10027DD68)
    {
      unint64_t v40 = (unint64_t)sub_10001A43C(a2);
      id v9 = "%s: %@ auto-join disabled for potentially bypassing captive detection";
      goto LABEL_27;
    }
    goto LABEL_29;
  }
  if (sub_1000CE0B8((uint64_t)a2))
  {
    uint64_t v8 = qword_10027DD68;
    if (qword_10027DD68)
    {
      unint64_t v40 = (unint64_t)sub_10001A43C(a2);
      uint64_t v41 = a3;
      id v9 = "%s: disabled until first user join network %@ isFilteringAJCandidates %d";
      goto LABEL_27;
    }
LABEL_29:
    uint64_t v11 = 0;
    goto LABEL_30;
  }
  if (sub_1000CE1A0((const __CFDictionary **)a2))
  {
    uint64_t v8 = qword_10027DD68;
    if (qword_10027DD68)
    {
      unint64_t v40 = (unint64_t)sub_10001A43C(a2);
      id v9 = "%s: disabled because %@ is an infrequently joined public network";
      goto LABEL_27;
    }
    goto LABEL_29;
  }
  if (sub_1000D2230((uint64_t)a2))
  {
    uint64_t v8 = qword_10027DD68;
    if (qword_10027DD68)
    {
      unint64_t v40 = (unint64_t)sub_10001A43C(a2);
      id v9 = "%s: accessory network (%@) is not suitable for autojoin";
      goto LABEL_27;
    }
    goto LABEL_29;
  }
  if (a3)
  {
    if (sub_10012F9A0(a1, a2))
    {
LABEL_22:
      uint64_t v8 = qword_10027DD68;
      if (qword_10027DD68)
      {
        unint64_t v40 = (unint64_t)sub_10001A43C(a2);
        uint64_t v41 = a3;
        id v9 = "%s: disabled for missing password Network %@ isFilteringAJCandidates %d";
        goto LABEL_27;
      }
      goto LABEL_29;
    }
  }
  else
  {
    if (sub_1000CD324((CFDictionaryRef *)a2))
    {
      uint64_t v8 = qword_10027DD68;
      if (qword_10027DD68)
      {
        unint64_t v40 = (unint64_t)sub_10001A43C(a2);
        uint64_t v41 = 0;
        id v9 = "%s: disabled for Fully Loaded Network %@ isFilteringAJCandidates %d";
        goto LABEL_27;
      }
      goto LABEL_29;
    }
    if (sub_10012F9A0(a1, a2)) {
      goto LABEL_22;
    }
    if (sub_1000C8798((uint64_t)a2) && !sub_10001FC1C((uint64_t)a2) && !sub_1000C8A18(a2))
    {
      __int16 v48 = 0;
      long long v37 = (const void *)sub_1000C91E4((CFDictionaryRef *)a2, (BOOL *)&v48 + 1, 0.1);
      if (v37)
      {
        if (HIBYTE(v48)) {
          goto LABEL_35;
        }
      }
      else
      {
        long long v37 = (const void *)sub_1000C9398(a2, (BOOL *)&v48, 0.1);
        if (!v37)
        {
          int v38 = HIBYTE(v48) | v48;
          if (!v38)
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4, "%s: No password found for %@, return as unsuitable", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", sub_10001A43C(a2), v41 message];
            }
            goto LABEL_29;
          }
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s: Keychain fetch for %@ timed out, password presence unknown, ignoring", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", sub_10001A43C(a2) message];
          }
          goto LABEL_35;
        }
        if ((_BYTE)v48) {
          goto LABEL_35;
        }
      }
      CFRelease(v37);
    }
  }
LABEL_35:
  id v13 = sub_10000AD1C((uint64_t)a2);
  double v46 = 0.0;
  uint64_t v47 = 0;
  unsigned int v14 = [*(id *)(a1 + 6648) isNetworkTemporarilyDenyListedForAutoJoin:v13];
  unsigned int v15 = [*(id *)(a1 + 6648) isNetworkInDenyListedState:1 scanResult:v13];
  uint64_t v45 = v13;
  id v16 = [*(id *)(a1 + 6648) isNetworkDenyListedForAutoJoinDueToTrigDisc:v13 RSSI:&v47 timestamp:&v46];
  if (a3) {
    unsigned int v17 = 0;
  }
  else {
    unsigned int v17 = v15;
  }
  int v18 = v17 | v14;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Network '%@', isFilteringAJCandidates %d, isSSIDTemporarilyDenylisted %d, isBSSIDDenylisted %d, isTDDenylisted %d", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", sub_10001A43C(a2), a3, v14, v15, v16 message];
  }
  uint64_t v11 = (v18 | v16) ^ 1;
  if (a3)
  {
    if ((v16 & 1) != 0 || sub_10012FD68(a1, a2))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: disabled for non-TD, non-onDemand problematic Network %@ isFilteringAJCandidates %d", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", sub_10001A43C(a2), 1 message];
      }
      uint64_t v11 = 1;
    }
  }
  else
  {
    if (((v18 ^ 1 | v16) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Not considering problematic Network %@ isSSIDTemporarilyDenylisted %d isBSSIDDenylisted %d isFilteringAJCandidates %d isTDDenylisted %d", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", sub_10001A43C(a2), v14, v15, 0, v16 message];
      }
      goto LABEL_127;
    }
    if (v16)
    {
      if (sub_10003BF10(*(_DWORD **)(a1 + 120), a2, v47, v46)) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = v11;
      }
    }
    if (sub_10012FB38(a1, a2))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Use problematic network %@ for auto-join, as rssi improved", sub_10001A43C(a2) message];
      }
      uint64_t v11 = 1;
    }
    uint64_t v26 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    long long v27 = sub_100018FA8(a1, v26, 1);
    if (v27)
    {
      uint64_t v28 = v27;
      if (!sub_10001BB2C((BOOL)v27) && CFEqual(v28, a2))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: skipping current network %@ as auto-join candidate", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", sub_10001A43C(a2) message];
        }
        uint64_t v11 = 0;
      }
      CFRelease(v28);
    }
  }
  if ((_os_feature_enabled_impl() ^ 1 | v16 | v18)) {
    goto LABEL_132;
  }
  CFDictionaryRef v21 = *(const void **)(a1 + 3512);
  if (v21
    && CFEqual(v21, a2)
    && !sub_100072AF8(*(void *)(a1 + 64))
    && ![+[WiFiUserInteractionMonitor sharedInstance] isCellularDataUsable])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: %@ previously disconnected network and no alternative network interface - ok to autojoin", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", sub_10001A43C(a2) message];
    }
    goto LABEL_130;
  }
  if ([+[WiFiUserInteractionMonitor sharedInstance] isPriorityNetwork:a2])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: current network %@ is a Priority Network", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", sub_10001A43C(a2) message];
    }
    if (![+[WiFiUserInteractionMonitor sharedInstance] isRealTimeAppActive])
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: Priority Network with no RT traffic - ok to autojoin" args:v39, @"__WiFiDeviceManagerKnownNetworkSuitabilityCheck"];
      }
      goto LABEL_130;
    }
    CFNumberRef v23 = sub_1000C6FC0((uint64_t)a2, @"RSSI");
    if ((uint64_t)v23 >= -70)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: Priority Network with RT traffic and Favorable RSSI - ok to autojoin", @"__WiFiDeviceManagerKnownNetworkSuitabilityCheck", v39];
      }
LABEL_130:
      uint64_t v11 = 1;
      goto LABEL_131;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Priority Network with RT traffic and Unfavorable RSSI - defer autojoin", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", v39, v41, v42, v43, v44);
    }
  }
  else if ([+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance") isPublicNetwork:a2]|| sub_1000CE714((uint64_t)a2)&& [+[WiFiUserInteractionMonitor sharedInstance] isCellularDataUsable])
  {
    if ([*(id *)(a1 + 8976) confidence] == (id)2)
    {
      [objc_msgSend(*(id *)(a1 + 8976), "settledDate") timeIntervalSinceNow];
      double v31 = v30;
      [objc_msgSend(*(id *)(a1 + 8976), "settledDate") timeIntervalSinceNow];
      if (v31 < 0.0) {
        double v32 = -v32;
      }
      if (v32 < 300.0
        && ([+[WiFiUserInteractionMonitor sharedInstance] isCarModeActive]|| (*(_DWORD *)(a1 + 3352) | 2) == 6))
      {
        long long v33 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          [objc_msgSend(*(id *)(a1 + 8976), "settledDate") timeIntervalSinceNow];
          double v35 = v34;
          [objc_msgSend(*(id *)(a1 + 8976), "settledDate") timeIntervalSinceNow];
          if (v35 < 0.0) {
            double v36 = -v36;
          }
          [v33 WFLog:3 message:@"%s: Public, Carrier (no cellular), or Outdoor Network, High Confidence Settlement (%.3fs ago, timeout=%ds), Driving - defer autojoin", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", *(void *)&v36, 300, v42, v43, v44];
        }
      }
      else if ([+[WiFiUserInteractionMonitor sharedInstance] isLowQualityNetwork:a2])
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: Public, Carrier (no cellular), or Outdoor Network, High Confidence Settlement, Low Quality - defer autojoin", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", v39, v41, v42, v43, v44];
        }
      }
      else
      {
        if (![+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance") isRealTimeAppActive]|| ![+[WiFiUserInteractionMonitor sharedInstance] isCellularInexpensive5G])
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Public, Carrier (no cellular), or Outdoor Network, High Confidence Settlement, Ok Quality with no RT traffic or Expensive Cellular - ok to autojoin", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", v39);
          }
          goto LABEL_130;
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Public, Carrier (no cellular), or Outdoor Network, High Confidence Settlement, Ok Quality with RT traffic and Inexpensive Cellular - defer autojoin", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", v39, v41, v42, v43, v44);
        }
      }
    }
    else if ([+[WiFiUserInteractionMonitor sharedInstance] isCarModeActive]|| (*(_DWORD *)(a1 + 3352) | 2) == 6)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:@"%s: Public, Carrier (no cellular), or Outdoor Network, Low Confidence Settlement, Driving - defer autojoin" message:3];
      }
    }
    else if ([+[WiFiUserInteractionMonitor sharedInstance] isLowQualityNetwork:a2])
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Public, Carrier (no cellular), or Outdoor Network, Low Confidence Settlement, Low Quality, Not Driving - defer autojoin", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", v39, v41, v42, v43, v44);
      }
    }
    else
    {
      if (![+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance") isRealTimeAppActive]|| ![+[WiFiUserInteractionMonitor sharedInstance] isCellularInexpensive5G])
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Public, Carrier (no cellular), or Outdoor Network, Low Confidence Settlement, Ok Quality, Not Driving with no RT traffic or Expensive Cellular - ok to autojoin", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", v39);
        }
        goto LABEL_130;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Public, Carrier (no cellular), or Outdoor Network, Low Confidence Settlement, Ok Quality, Not Driving with RT traffic and Inexpensive Cellular - defer autojoin", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", v39, v41, v42, v43, v44);
      }
    }
  }
  else
  {
    if (![+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance") isRealTimeAppActive]|| ![+[WiFiUserInteractionMonitor sharedInstance] isCellularInexpensive5G])
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Non-Public, Non-Carrier (or cellular available), Non-Outdoor Network, with RT traffic and Inexpensive Cellular - ok to autojoin", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", v39);
      }
      goto LABEL_130;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Non-Public, Non-Carrier (or cellular available), Non-Outdoor Network, with RT traffic and Inexpensive Cellular - defer autojoin", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", v39, v41, v42, v43, v44);
    }
  }
LABEL_127:
  uint64_t v11 = 0;
LABEL_131:
LABEL_132:
  if (v45) {

  }
LABEL_30:
  return v11;
}

CFNumberRef sub_10012F9A0(uint64_t a1, const void *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager", @"__WiFiDeviceManagerIsNetworkInMissingPasswordList"];
    }
    goto LABEL_20;
  }
  if (!*(void *)(a1 + 3680))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null networksMissingPassword", "__WiFiDeviceManagerIsNetworkInMissingPasswordList")];
    }
    goto LABEL_20;
  }
  CFIndex v4 = sub_10001A43C(a2);
  if (!v4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null ssid" :@"__WiFiDeviceManagerIsNetworkInMissingPasswordList"];
    }
LABEL_20:
    uint64_t v8 = v9;
LABEL_11:
    return 0;
  }
  id v5 = v4;
  double valuePtr = 0.0;
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 3680), v4);
  if (result)
  {
    CFNumberGetValue(result, kCFNumberDoubleType, &valuePtr);
    if (CFAbsoluteTimeGetCurrent() - valuePtr > 86400.0
      || sub_1000199C0((uint64_t)a2) && *(_DWORD *)(a1 + 5520) == 1)
    {
      sub_10012FE48(a1, a2, 0);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: unblacklisting network %@", "__WiFiDeviceManagerIsNetworkInMissingPasswordList", v5 message];
      }
      uint64_t v8 = v7;
      goto LABEL_11;
    }
    return (const __CFNumber *)1;
  }
  return result;
}

uint64_t sub_10012FB38(uint64_t a1, void *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:@"%s: null manager." message:3, "%s: null manager.", "__WiFiDeviceManagerHasNetworkRssiImproved", v15, v16, v17];
    }
    goto LABEL_14;
  }
  if (*(_DWORD *)(a1 + 168) != 2)
  {
LABEL_15:
    uint64_t v10 = 0;
    goto LABEL_16;
  }
  id v5 = sub_10000AD1C((uint64_t)a2);
  if (([*(id *)(a1 + 6648) isNetworkInDenyListedState:1 scanResult:v5] & 1) == 0)
  {

LABEL_12:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: invalid scannedRssi", "__WiFiDeviceManagerHasNetworkRssiImproved", v15, v16, v17);
    }
    goto LABEL_14;
  }
  id v6 = [*(id *)(a1 + 6648) RSSIWhenNetworkWasDenyListed:v5];
  CFNumberRef v7 = sub_1000C6FC0((uint64_t)a2, @"RSSI");

  if (!v7) {
    goto LABEL_12;
  }
  if (!v6)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: invalid denyListedRssi", "__WiFiDeviceManagerHasNetworkRssiImproved", v15, v16, v17);
    }
    goto LABEL_14;
  }
  int v18 = 0;
  uint64_t v8 = sub_1001300C8(a1, a2, 1, &v18);
  if ((int)v8 > (int)v7)
  {
    uint64_t v13 = v8;
    if (qword_10027DD68)
    {
      if ((v18 - 1) > 3) {
        unsigned int v14 = 0;
      }
      else {
        unsigned int v14 = off_100242318[v18 - 1];
      }
      [(id)qword_10027DD68 WFLog:3, "%s: scannedRssi %d below threshold %d (%@)", "__WiFiDeviceManagerHasNetworkRssiImproved", v7, v13, v14 message];
    }
LABEL_14:
    goto LABEL_15;
  }
  if ((int)v7 - (int)v6 < 10) {
    goto LABEL_15;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: allow problematic network %@ for auto-join (rssi: %d(%d))", "__WiFiDeviceManagerHasNetworkRssiImproved", sub_10001A43C(a2), v7, v6 message];
  }
  uint64_t v10 = 1;
LABEL_16:
  return v10;
}

uint64_t sub_10012FD68(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 168) != 2) {
      return 0;
    }
    CFNumberRef v3 = sub_1000C6FC0((uint64_t)a2, @"RSSI");
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "RSSI-based unblacklisting: including %@ (rssi=%d) for scan.", sub_10001A43C(a2), v3 message];
    }
    uint64_t v5 = 1;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager." args:("__WiFiDeviceManagerIsRssiBasedUnblacklistingAllowed")];
    }
    uint64_t v5 = 0;
  }
  return v5;
}

void sub_10012FE48(uint64_t a1, const void *a2, int a3)
{
  if (a1)
  {
    if (a2)
    {
      if (*(void *)(a1 + 3680))
      {
        uint64_t v5 = sub_10001A43C(a2);
        if (v5)
        {
          id v6 = v5;
          if (a3)
          {
            CFAbsoluteTime valuePtr = CFAbsoluteTimeGetCurrent();
            CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
            if (v7)
            {
              CFNumberRef v8 = v7;
              CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 3680), v6, v7);
              CFRelease(v8);
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: Added %@ at %f", "__WiFiDeviceManagerManageMissingPasswordList", v6, *(void *)&valuePtr message];
              }
              uint64_t v10 = v9;
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:3 message:@"%s: null originTimeNum" args:((id)qword_10027DD68, "__WiFiDeviceManagerManageMissingPasswordList")];
              }
              uint64_t v10 = v14;
            }
          }
          else
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: Remove %@, added at %@", "__WiFiDeviceManagerManageMissingPasswordList", v6, CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 3680), v6) message];
            }
            long long v12 = *(__CFDictionary **)(a1 + 3680);
            CFDictionaryRemoveValue(v12, v6);
          }
          return;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: null ssid" : @"__WiFiDeviceManagerManageMissingPasswordList"];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: null networksMissingPassword", @"__WiFiDeviceManagerManageMissingPasswordList"];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" : @"__WiFiDeviceManagerManageMissingPasswordList"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager", @"__WiFiDeviceManagerManageMissingPasswordList"];
    }
  }
}

uint64_t sub_1001300C8(uint64_t a1, void *a2, int a3, int *a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 128);
  CFArrayRef v9 = sub_1000194F8(a1, a2, 1);
  if (v9)
  {
    CFArrayRef v10 = v9;
    int v11 = sub_100105E08(a1, v9);
    if (sub_1000CF14C((uint64_t)v10) != 1
      && sub_1000C6B08((uint64_t)v10) != 1
      && *(_DWORD *)(a1 + 144) < v11)
    {
      int v12 = *(_DWORD *)(a1 + 3352);
      if (v12 == 6)
      {
        uint64_t v13 = (unsigned int *)(a1 + 140);
        int v14 = 2;
        goto LABEL_12;
      }
      if (v12 == 4)
      {
        uint64_t v13 = (unsigned int *)(a1 + 140);
        int v14 = 1;
        goto LABEL_12;
      }
      if (sub_1000CEBB4((CFDictionaryRef *)a2)
        || objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "isMovingNetwork:", a2))
      {
        uint64_t v13 = (unsigned int *)(a1 + 132);
        int v14 = 3;
        goto LABEL_12;
      }
      if (sub_1000CEB50((CFDictionaryRef *)a2)
        || objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "isOmnipresentNetwork:", a2))
      {
        uint64_t v13 = (unsigned int *)(a1 + 132);
        int v14 = 4;
LABEL_12:
        uint64_t v8 = *v13;
        if (!a4) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
    }
    int v14 = 0;
    if (!a4)
    {
LABEL_19:
      if (!a3 || (uint64_t)sub_1000C6FC0((uint64_t)a2, @"RSSI") >= (int)v8) {
        goto LABEL_24;
      }
      if (*(void *)(a1 + 6160))
      {
        *(_DWORD *)bytes = v14;
        unsigned int v20 = sub_1000C6FC0((uint64_t)a2, @"RSSI");
        int v21 = v11;
        CFDataRef v15 = CFDataCreate(kCFAllocatorDefault, bytes, 12);
        if (v15)
        {
          CFDataRef v16 = v15;
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 6160), v15);
          CFRelease(v16);
LABEL_24:
          CFRelease(v10);
          return v8;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: null dataRef" args:__WiFiDeviceManagerGetAutoJoinThreshold];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: null excludedDueToAJThresholdThisSession" args:__WiFiDeviceManagerGetAutoJoinThreshold];
        }
      }
      goto LABEL_24;
    }
LABEL_18:
    *a4 = v14;
    goto LABEL_19;
  }
  return v8;
}

void sub_1001302EC(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: NULL manager", @"__WiFiDeviceManagerIsMIS5GhzEnabled"];
    }
  }
}

void sub_100130360(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v9 = 0;
  unsigned int v8 = 0;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    CFIndex v4 = *(void (**)(uint64_t, unsigned int *, unsigned __int8 *, void))(v3 + 4536);
    if (v4)
    {
      v4(v3, &v8, &v9, *(void *)(v3 + 4544));
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s BatteryInfo. batterylevel:%u. externalPowerSupply:%u", "__WiFiDeviceManagerCreateNetworkDenyList_block_invoke", v8, v9);
      }
      uint64_t v6 = 1;
      if (!a2) {
        return;
      }
LABEL_10:
      (*(void (**)(uint64_t, uint64_t, BOOL, void))(a2 + 16))(a2, v6, v9 != 0, v8);
      return;
    }
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s Callbacks not available "];
  }
  uint64_t v6 = 0;
  if (a2) {
    goto LABEL_10;
  }
}

uint64_t sub_100130468(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, BOOL))(a2 + 16))(a2, 1, *(_DWORD *)(*(void *)(result + 32) + 176) == 1);
  }
  return result;
}

void sub_100130494(uint64_t a1, uint64_t a2)
{
  sub_1000FF1EC(*(void *)(a1 + 32));
  sub_10012D6C8(*(void *)(a1 + 32));
  if (a2)
  {
    CFIndex v4 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
    v4(a2, 1);
  }
}

void sub_1001304F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 240))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, void, const __CFString *, const CFBooleanRef, void))(v2 + 4744))(v2, *(void *)(*(void *)(v4 + 8) + 24), @"FailureCountCurrent", kCFBooleanTrue, *(void *)(v2 + 4752));
    CFRelease(v3[1]);
    uint64_t v5 = *v3;
  }
  else
  {
    CFRelease((CFTypeRef)v2);
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v3 = (CFTypeRef *)(a1 + 32);
    uint64_t v5 = v6;
  }
  CFNumberRef v7 = *(const void **)(v5[1] + 24);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(*((void *)*v3 + 1) + 24) = 0;
  }
}

uint64_t sub_100130584(uint64_t a1, const void *a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      CFArrayRef v5 = *(const __CFArray **)(a1 + 3528);
      if (!v5
        || (v9.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 3528)),
            v9.location = 0,
            FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v5, v9, a2),
            FirstIndexOfValue == -1)
        || (CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3528), FirstIndexOfValue)) == 0
        || (uint64_t result = sub_100019AD4(a1, ValueAtIndex), !result))
      {
        return sub_100019AD4(a1, a2);
      }
    }
  }
  return result;
}

void sub_100130630(uint64_t a1)
{
  sub_1000175A0(*(void *)(*(void *)(a1 + 32) + 120), 0, 0);
  SCNetworkInterfaceSetPrimaryRank();
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: setting interface rank %s for network %@", "__WiFiDeviceManagerSetInterfaceRank_block_invoke", "kSCNetworkServicePrimaryRankDefault", sub_10001A43C(*(const void **)(a1 + 40)) message];
  }
}

void sub_1001306E4(void *a1)
{
  uint64_t v2 = a1[6];
  if (*(void *)(v2 + 240))
  {
    uint64_t v3 = a1 + 5;
    (*(void (**)(uint64_t, void, void, void))(v2 + 4040))(v2, *(void *)(*(void *)(a1[4] + 8) + 24), *(void *)(v2 + 4048), *(void *)(*(void *)(a1[5] + 8) + 24));
    uint64_t v4 = (void *)a1[6];
    CFArrayRef v5 = (void (*)(void *, void, void, uint64_t, void))v4[549];
    if (v5)
    {
      v5(v4, a1[7], v4[550], 1, 0);
      uint64_t v4 = (void *)a1[6];
    }
    CFRelease(v4);
    uint64_t v6 = *(const void **)(*(void *)(a1[4] + 8) + 24);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(*(void *)(a1[4] + 8) + 24) = 0;
    }
    CFNumberRef v7 = *(const void **)(*(void *)(*v3 + 8) + 24);
    if (!v7) {
      return;
    }
LABEL_12:
    CFRelease(v7);
    *(void *)(*(void *)(*v3 + 8) + 24) = 0;
    return;
  }
  CFRelease((CFTypeRef)v2);
  unsigned int v8 = *(const void **)(*(void *)(a1[4] + 8) + 24);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(*(void *)(a1[4] + 8) + 24) = 0;
  }
  uint64_t v10 = a1[5];
  CFRange v9 = a1 + 5;
  CFNumberRef v7 = *(const void **)(*(void *)(v10 + 8) + 24);
  if (v7)
  {
    uint64_t v3 = v9;
    goto LABEL_12;
  }
}

void sub_1001307DC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (!*(unsigned char *)(a1 + 940)) {
    return;
  }
  unsigned __int16 v8 = (unsigned __int16)sub_1000C9AF8(a2);
  int v9 = sub_1000059B0(a2);
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  LODWORD(v45) = (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 736));
  LODWORD(v52) = a4;
  CFStringRef v10 = sub_10005AB40(a3);
  CFStringRef v11 = @"unknown";
  if (v10) {
    CFStringRef v11 = v10;
  }
  *((void *)&v51 + 1) = v11;
  if ((v8 & 0x100) != 0)
  {
    CFStringRef v12 = @"11ax";
  }
  else if ((v8 & 0x80) != 0)
  {
    CFStringRef v12 = @"11ac";
  }
  else if ((v8 & 0x10) != 0)
  {
    CFStringRef v12 = @"11n";
  }
  else
  {
    CFStringRef v12 = @"legacy";
  }
  *((void *)&v52 + 1) = v12;
  WORD5(v50) = v9;
  *(void *)uint64_t v44 = @"Unknown";
  *(void *)&v44[8] = @"Unknown";
  *(void *)&v44[16] = @"Unknown";
  if (*(void *)(a1 + 8768))
  {
    *(void *)uint64_t v44 = *(void *)(a1 + 8768);
    *(_OWORD *)&v44[8] = *(_OWORD *)(a1 + 8776);
  }
  *(void *)((char *)&v45 + 4) = *(void *)(a1 + 744);
  int v13 = (int)*(double *)(a1 + 760);
  HIDWORD(v45) = *(_DWORD *)(a1 + 752);
  LODWORD(v46) = v13;
  DWORD1(v46) = *(_DWORD *)(a1 + 756);
  *((void *)&v46 + 1) = *(void *)(a1 + 768);
  int v14 = *(_DWORD *)(a1 + 776);
  LODWORD(v47) = (int)*(double *)(a1 + 784);
  DWORD1(v47) = v14;
  *((void *)&v47 + 1) = *(void *)(a1 + 792);
  int v15 = *(_DWORD *)(a1 + 800);
  LODWORD(v48) = (int)*(double *)(a1 + 808);
  DWORD1(v48) = v15;
  *((void *)&v48 + 1) = *(void *)(a1 + 816);
  int v16 = *(_DWORD *)(a1 + 824);
  LODWORD(v49) = (int)*(double *)(a1 + 832);
  DWORD1(v49) = v16;
  *((void *)&v49 + 1) = *(void *)(a1 + 840);
  int v17 = *(_DWORD *)(a1 + 848);
  LODWORD(v50) = (int)*(double *)(a1 + 856);
  DWORD1(v50) = v17;
  if (*(_DWORD *)(a1 + 884)) {
    int v18 = 1;
  }
  else {
    int v18 = 5;
  }
  HIDWORD(v50) = *(_DWORD *)(a1 + 864);
  LODWORD(v51) = v18;
  CFNumberRef v19 = (const __CFNumber *)sub_100024070(a2);
  if (v19)
  {
    __int16 valuePtr = -21846;
    CFNumberGetValue(v19, kCFNumberSInt16Type, &valuePtr);
    __int16 v20 = valuePtr;
  }
  else
  {
    __int16 v20 = 0;
  }
  WORD4(v50) = v20;
  *(void *)(a1 + 1048) = 0;
  if (*(unsigned char *)(a1 + 1008))
  {
    if (*(double *)(a1 + 832) <= 60.0)
    {
      int v21 = *(_DWORD *)(a1 + 752);
      if (v21)
      {
        double v22 = 1.0 / (double)v21;
        double v23 = v22
            * (double)(8
                     * (unint64_t)((double)(800
                                                 * (unint64_t)((double)*(unint64_t *)(a1 + 944) * 0.95))
                                        * 1.87));
        double v24 = v23 / (double)(1000 * v45);
        if ((v8 & 0x100) != 0)
        {
          if (v9 == 80 && v21 > 600500) {
            goto LABEL_44;
          }
          if (v9 == 20)
          {
            int v27 = 143400;
          }
          else
          {
            if (v9 != 40) {
              goto LABEL_45;
            }
            int v27 = 286800;
          }
          goto LABEL_43;
        }
        if ((v8 & 0x80) != 0)
        {
          if (v9 == 80 && v21 > 433300) {
            goto LABEL_44;
          }
          if (v9 != 20)
          {
            if (v9 != 40) {
              goto LABEL_45;
            }
            int v27 = 200000;
            goto LABEL_43;
          }
          unsigned __int16 v28 = 21164;
        }
        else
        {
          if ((v8 & 0x10) == 0)
          {
            int v25 = 0;
            uint64_t v26 = "N";
LABEL_47:
            if (qword_10027DD68)
            {
              unint64_t v40 = "Y";
              if (!v25) {
                unint64_t v40 = "N";
              }
              objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: LPC - valid %s, rssi %.1lf, txRateMax %d, totalTxFrames %llu, bitAirTime %.4lf (us), totalAirTime %.2lf (ms), txDutyCycle %.3lf (%%), phyMode %@, isMimo %s, duration %d (s), power reduction %.2lf (uAh), txoffset %d:%d:%d:%d (%%)", "__WiFiDeviceManagerSubmitCarPlayLinkQualityMetrics", v26, *(void *)(a1 + 832), *(unsigned int *)(a1 + 752), *(void *)(a1 + 944), v22 * 1000.0, *(void *)&v23, v24 * 100.0, *((void *)&v52 + 1), v40, v45, *(void *)(a1 + 1048), *(unsigned int *)(a1 + 1024),
                *(unsigned int *)(a1 + 1028),
                *(unsigned int *)(a1 + 1032),
                *(unsigned int *)(a1 + 1036));
            }
            goto LABEL_52;
          }
          if (v9 == 40 && v21 > 150000) {
            goto LABEL_44;
          }
          if (v9 != 20) {
            goto LABEL_45;
          }
          unsigned __int16 v28 = 6664;
        }
        int v27 = v28 | 0x10000;
LABEL_43:
        if (v21 > v27)
        {
LABEL_44:
          int v25 = 1;
          double v29 = 40.0;
LABEL_46:
          long long v30 = *(_OWORD *)(a1 + 1024);
          v31.i64[0] = SDWORD2(v30);
          v31.i64[1] = SHIDWORD(v30);
          float64x2_t v32 = vcvtq_f64_s64(v31);
          v31.i64[0] = (int)v30;
          v31.i64[1] = SDWORD1(v30);
          float64x2_t v33 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
          float64x2_t v34 = vdivq_f64(vcvtq_f64_s64(v31), v33);
          float64x2_t v35 = vdivq_f64(v32, v33);
          float64x2_t v36 = vmulq_n_f64((float64x2_t)xmmword_1001CB940, v29);
          float64x2_t v37 = vmulq_f64(v35, vmulq_n_f64((float64x2_t)xmmword_1001CB950, v29));
          float64x2_t v38 = vmulq_f64(v34, v36);
          v37.f64[0] = v24 * (v38.f64[0] + 0.0 + v38.f64[1] + v37.f64[0] + v37.f64[1]) * 1000.0;
          *(float64_t *)(a1 + 1048) = v37.f64[0];
          LOBYTE(v53) = 1;
          *((void *)&v53 + 1) = *(void *)(a1 + 1016);
          long long v54 = *(_OWORD *)(a1 + 1024);
          *((void *)&v55 + 1) = *(void *)&v37.f64[0];
          uint64_t v26 = "Y";
          goto LABEL_47;
        }
LABEL_45:
        int v25 = 0;
        double v29 = 20.0;
        goto LABEL_46;
      }
    }
  }
LABEL_52:
  if (qword_10027DD68)
  {
    uint64_t v42 = v41;
    objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: rssi(max:min:avg:last) %d:%d:%d:%d, snr %d:%d:%d:%d, cca %d:%d:%d:%d, txRate %d:%d:%d:%d, rxRate %d:%d:%d:%d, numberOfTxErrorEvents %u, channel %d, bandwidth %u, linkDuration %u, roamedCount %u, linkDownReason %@, linkDownSubReason %d, lqmInterval %u, vehicleModel %@, vehicleManufacturer %@, hardwareVersion %@, phyMode %@", "__WiFiDeviceManagerSubmitCarPlayLinkQualityMetrics", HIDWORD(v48), DWORD2(v48), v49, DWORD1(v49), HIDWORD(v47), DWORD2(v47), v48, DWORD1(v48), HIDWORD(v49), DWORD2(v49), v50, DWORD1(v50),
      HIDWORD(v45),
      DWORD2(v45),
      v46,
      DWORD1(v46),
      HIDWORD(v46),
      DWORD2(v46),
      v47,
      DWORD1(v47),
      HIDWORD(v50),
      SWORD4(v50),
      WORD5(v50),
      v45,
      DWORD1(v45),
      *((void *)&v51 + 1),
      v52,
      v51,
      *(_OWORD *)v44,
      *(void *)&v44[16],
      *((void *)&v52 + 1));
    uint64_t v41 = v42;
  }
  sub_100057930((uint64_t)v44);
}

void sub_100130DF8(uint64_t a1, void *a2)
{
  if (a2)
  {
    BOOL v3 = sub_100072AF0(*(void *)(*(void *)(a1 + 32) + 64)) != 1;
    [*(id *)(*(void *)(a1 + 32) + 7368) setLinkEvent:1 isInvoluntary:v3 linkChangeReason:0 linkChangeSubreason:0 withNetworkDetails:a2 forInterface:sub_100017C48(*(void *)(*(void *)(a1 + 32) + 64))];
  }
}

void sub_100130E84(uint64_t a1, const void *a2)
{
  if (*(unsigned char *)(a1 + 7056))
  {
    if (a2)
    {
      if (sub_1000CE714((uint64_t)a2)
        || sub_1000C8140((uint64_t)a2)
        || sub_10001FC1C((uint64_t)a2)
        || sub_1000C74BC((uint64_t)a2)
        || sub_10001EA5C(a2))
      {
        return;
      }
      int v7 = sub_100023F30((uint64_t)a2);
      if (v7) {
        __int16 v4 = 1 << v7;
      }
      else {
        __int16 v4 = 0;
      }
      uint64_t v6 = *(void *)(a1 + 64);
      CFArrayRef v5 = sub_10001A43C(a2);
    }
    else
    {
      __int16 v4 = 0;
      CFArrayRef v5 = 0;
      uint64_t v6 = *(void *)(a1 + 64);
    }
    sub_100064860(v6, 0, v4, v5);
  }
}

void sub_100130F60(uint64_t a1, void *a2)
{
  if (a2)
  {
    [*(id *)(*(void *)(a1 + 32) + 7368) setLinkEvent:0 isInvoluntary:*(unsigned char *)(a1 + 52) != 0 linkChangeReason:*(void *)(a1 + 40) linkChangeSubreason:*(int *)(a1 + 48) withNetworkDetails:a2 forInterface:sub_100017C48(*(void *)(*(void *)(a1 + 32) + 64))];
  }
}

void sub_100130FEC(uint64_t a1)
{
  if (*(void *)(a1 + 120))
  {
    if (*(void *)(a1 + 5560))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Ignore Pending Active Probe !"];
      }
      sub_10003AA24(*(void *)(a1 + 120), *(CFTypeRef *)(a1 + 5560));
      BOOL v3 = *(const void **)(a1 + 5560);
      if (v3)
      {
        CFRelease(v3);
        *(void *)(a1 + 5560) = 0;
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"Null LQA manager\n"];
    }
  }
}

uint64_t sub_1001310B0(uint64_t a1, const void **a2)
{
  if (!sub_10010FA10(a1) && !sub_10006C1E0(*(void *)(a1 + 64))) {
    return 1;
  }
  __int16 v4 = sub_10001A5A8(*(const __CFArray **)(a1 + 3704), a2);
  if (!v4) {
    return 1;
  }
  CFArrayRef v5 = v4;
  CFBooleanRef v6 = (CFBooleanRef)sub_10001E404((uint64_t)v4, @"NetworkUsedForSWUpgrade");
  CFDictionaryRef v7 = (const __CFDictionary *)sub_10001E404((uint64_t)v5, @"PRIVATE_MAC_ADDRESS");
  if (!v7) {
    return 1;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v7, @"PRIVATE_MAC_ADDRESS_TYPE");
  if (!Value) {
    return 1;
  }
  BOOL v9 = sub_10001C140(Value) != 1 || v6 == 0;
  if (v9 || v6 != kCFBooleanTrue) {
    return 1;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Forcing associated while sleep to return FALSE for current network <%@>", "__WiFiDeviceManagerNetworkIsQualifiedForAssociatedSleep", sub_10001A43C(v5) message];
  }
  int v14 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    int v15 = sub_10001A43C(a2);
    uint64_t v16 = sub_10010FA10(a1);
    uint64_t v17 = sub_10006C1E0(*(void *)(a1 + 64));
    CFArrayRef v18 = *(const __CFArray **)(a1 + 3584);
    if (v18) {
      CFIndex Count = CFArrayGetCount(v18);
    }
    else {
      CFIndex Count = -1;
    }
    [v14 WFLog:3, "%s: network %@ not qualified for associated sleep: WoW=%d LPAS=%d BgScanCandidateCount=%ld privateMacAssociatedWhileSleepIsOK = %hhu", "__WiFiDeviceManagerNetworkIsQualifiedForAssociatedSleep", v15, v16, v17, Count, 0 message];
  }
  return 0;
}

void sub_100131238(int a1, uint64_t a2, CFDictionaryRef theDict, uint64_t a4, uint64_t a5)
{
  if (!theDict || !a5) {
    return;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"LINK_CHANGED_IS_AVAILABLE");
  if (!Value)
  {
    int v14 = *(void (**)(uint64_t, uint64_t, uint64_t, CFDictionaryRef))(a5 + 4440);
    if (!v14) {
      return;
    }
LABEL_23:
    uint64_t v19 = *(void *)(a5 + 4448);
    v14(a5, a2, v19, theDict);
    return;
  }
  CFBooleanRef v9 = Value;
  int v10 = CFBooleanGetValue(Value);
  if (qword_10027DD68)
  {
    CFStringRef v12 = "TRUE";
    if (v10) {
      int v13 = "TRUE";
    }
    else {
      int v13 = "FALSE";
    }
    if (!*(unsigned char *)(a5 + 5429)) {
      CFStringRef v12 = "FALSE";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL availability changed to %s, pendingRequest %s", "__WiFiDeviceManagerAwdlAvailableCallback", v13, v12)];
  }
  int v14 = *(void (**)(uint64_t, uint64_t, uint64_t, CFDictionaryRef))(a5 + 4440);
  if (v14)
  {
    if (*(void *)(a5 + 5408))
    {
      MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
      if (MutableCopy)
      {
        uint64_t v17 = MutableCopy;
        if (![*(id *)(a5 + 5408) isPowerResourceAvailable:1]
          || (CFBooleanRef v18 = kCFBooleanTrue, !CFEqual(v9, kCFBooleanTrue)))
        {
          CFBooleanRef v18 = kCFBooleanFalse;
        }
        CFDictionarySetValue(v17, @"LINK_CHANGED_IS_AVAILABLE", v18);
        (*(void (**)(uint64_t, uint64_t, void, __CFDictionary *))(a5 + 4440))(a5, a2, *(void *)(a5 + 4448), v17);
        CFRelease(v17);
        return;
      }
      int v14 = *(void (**)(uint64_t, uint64_t, uint64_t, CFDictionaryRef))(a5 + 4440);
    }
    goto LABEL_23;
  }
}

void sub_100131428(int a1, const void *a2, CFDictionaryRef theDict, uint64_t a4, uint64_t a5)
{
  if (theDict && a5)
  {
    unsigned __int16 v8 = (BOOL *)(a5 + 5428);
    CFBooleanRef Value = CFDictionaryGetValue(theDict, @"LINK_CHANGED_IS_LINKDOWN");
    if (Value)
    {
      int v10 = CFEqual(Value, kCFBooleanTrue);
      int v11 = *(_DWORD *)(a5 + 5424);
      if (v10)
      {
        if (v11)
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL link-down received when refCount is %d", "__WiFiDeviceManagerAwdlLinkEventCallback", *(unsigned int *)(a5 + 5424));
          }
          if (!*(unsigned char *)(a5 + 5429)
            && (objc_msgSend(+[WiFiP2PAWDLState currentState](WiFiP2PAWDLState, "currentState"), "isEnabled") & 1) == 0)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3, @"%s: AWDL link-down tearing down all active AWDL sessions", @"__WiFiDeviceManagerAwdlLinkEventCallback"];
            }
            sub_100101DF0(a5, a2);
          }
        }
      }
      else if (v11)
      {
        kdebug_trace();
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: AWDL link up, refcount %d", "__WiFiDeviceManagerAwdlLinkEventCallback", *(unsigned int *)(a5 + 5424));
        }
      }
      int v15 = *(void **)(a5 + 7368);
      if (v15) {
        [v15 setAwdlState:v10 == 0 inMode:0];
      }
    }
    else
    {
      int v10 = 1;
    }
    sub_100100A60((char *)a5, 2, v10 == 0);
    uint64_t v16 = *(void (**)(uint64_t, const void *, void, CFDictionaryRef))(a5 + 4440);
    if (v16) {
      v16(a5, a2, *(void *)(a5 + 4448), theDict);
    }
    uint64_t v17 = *(void (**)(uint64_t, const void *, void, uint64_t, CFDictionaryRef))(a5 + 4392);
    if (v17) {
      v17(a5, a2, *(void *)(a5 + 4400), 3, theDict);
    }
    if (v10 && *v8)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: hosted AWDL session is down. Triggering auto-join", "__WiFiDeviceManagerAwdlLinkEventCallback")];
      }
      if (_os_feature_enabled_impl())
      {
        sub_10001FD64(a5, 9uLL);
      }
      else
      {
        [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:9 interfaceName:sub_100017C48(*(void *)(a5 + 64))];
        sub_1001028E4(a5, 0, (uint64_t)"__WiFiDeviceManagerAwdlLinkEventCallback");
      }
    }
    BOOL *v8 = v10 == 0;
  }
}

void sub_1001316E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (*(unsigned __int8 *)(a3 + 3414) != a2)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AwdlRealTime: Before %d, Now %d", "__WiFiDeviceManagerAwdlRealTimeModeEventCallback", *(unsigned __int8 *)(a3 + 3414), a2)];
      }
      *(unsigned char *)(a3 + 3414) = a2;
      [-[WiFiUsageMonitor sharedInstance](WiFiUsageMonitor, "sharedInstance") updateRealTimeCoex:a2 != 0 type:0 reasons:[objc_msgSend(objc_msgSend(objc_alloc_init((Class)WiFiP2PAWDLStateMonitor), "copyActiveServiceUniqueIdentifiers"), "sortedArrayUsingSelector:", "localizedCaseInsensitiveCompare:")]];
      if (a2 && sub_10010EB14(a3) && *(unsigned char *)(a3 + 5219) && *(unsigned __int8 *)(a3 + 5216) >= 0xFu) {
        sub_10010B10C(a3, 0);
      }
      sub_10003D2D8(*(void *)(a3 + 120), *(unsigned char *)(a3 + 3414));
      if (+[WiFiRoamManager sharedWiFiRoamManager]) {
        [+[WiFiRoamManager sharedWiFiRoamManager](WiFiRoamManager, "sharedWiFiRoamManager") setAwdlRealTimeModeActive:*(unsigned char *)(a3 + 3414) != 0];
      }
      if (sub_100074914(*(void *)(a3 + 64)) && !sub_10011F2F0(a3))
      {
        if (!a2 && CFAbsoluteTimeGetCurrent() - *(double *)(a3 + 3728) > 60.0)
        {
          sub_100111C74(a3, 0);
          *(CFAbsoluteTime *)(a3 + 3728) = CFAbsoluteTimeGetCurrent();
        }
      }
      else if (!a2)
      {
        if (_os_feature_enabled_impl())
        {
          sub_10001FD64(a3, 0x39uLL);
        }
        else if (*(unsigned char *)(a3 + 3411))
        {
          sub_100100D74(a3, 3);
        }
        else
        {
          sub_1001028E4(a3, 2, (uint64_t)"__WiFiDeviceManagerAwdlRealTimeModeEventCallback");
        }
      }
      sub_100100A60((char *)a3, 2, a2);
      CFStringRef v7 = (const __CFString *)sub_10005FC0C(*(void *)(a3 + 64));
      unsigned __int16 v8 = sub_1001113B4(a3, v7);
      if (v8)
      {
        CFBooleanRef v9 = v8;
        MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v8);
        CFRelease(v9);
        if (MutableCopy)
        {
          int v11 = (const void **)&kCFBooleanTrue;
          if (!a2) {
            int v11 = (const void **)&kCFBooleanFalse;
          }
          CFDictionarySetValue(MutableCopy, @"AWDL_REAL_TIME_MODE", *v11);
          CFStringRef v12 = *(void (**)(uint64_t, int64_t, void, __CFDictionary *))(a3 + 4440);
          if (v12)
          {
            int64_t v13 = sub_10005FC0C(*(void *)(a3 + 64));
            v12(a3, v13, *(void *)(a3 + 4448), MutableCopy);
          }
          CFRelease(MutableCopy);
        }
      }
      if (a2)
      {
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v15 = CFDateCreate(kCFAllocatorDefault, Current);
        if (v15)
        {
          CFDateRef v16 = v15;
          uint64_t v17 = (const void *)sub_100017C48(*(void *)(a3 + 64));
          CFBooleanRef v18 = sub_100018FA8(a3, v17, 1);
          if (v18)
          {
            uint64_t v19 = v18;
            sub_1000CAA00(v18, v16);
            sub_10010C6B4((NSObject **)a3, v19);
            CFRelease(v19);
          }
          CFRelease(v16);
        }
        sub_100131ECC(a3);
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: NULL Device Manager !", "__WiFiDeviceManagerAwdlRealTimeModeEventCallback"];
    }
  }
}

void sub_100131A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 && a5)
  {
    if (*(_DWORD *)(a5 + 5424))
    {
      kdebug_trace();
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: peer list changed", "__WiFiDeviceManagerAwdlPeerPresenceCallback")];
      }
    }
    CFBooleanRef v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 4440);
    if (v9)
    {
      uint64_t v10 = *(void *)(a5 + 4448);
      v9(a5, a2, v10, a3);
    }
  }
}

void sub_100131B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    CFBooleanRef v6 = (unsigned __int8 *)(a3 + 5216);
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Channel %d  %d", "__WiFiDeviceManagerSoftAPChannelChangedEventCallback", a2, *v6);
    }
    if (*(unsigned char *)(a3 + 5219))
    {
      unsigned int v7 = *v6;
      if (v7 != a2 && (a2 >= 0xF && v7 > 0xE || a2 <= 0xD && v7 <= 0xD))
      {
        unsigned __int8 *v6 = a2;
        CFSetAddValue(*(CFMutableSetRef *)(a3 + 5272), @"wifid");
        sub_10010F2A8(a3, 0);
        sub_1000643C4(*(void *)(a3 + 64), 0);
        sub_10010E8E0(a3, 5);
        CFArrayRef v8 = sub_1001112DC(a3);
        if (v8)
        {
          CFArrayRef v9 = v8;
          int valuePtr = -1431655766;
          int Count = CFArrayGetCount(v8);
          if (Count >= 1)
          {
            CFIndex v11 = 0;
            uint64_t v12 = Count;
            do
            {
              CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v9, v11);
              if (ValueAtIndex)
              {
                int v14 = ValueAtIndex;
                CFNumberRef v15 = (const __CFNumber *)sub_10001E404((uint64_t)ValueAtIndex, @"networkRole");
                if (v15)
                {
                  CFNumberGetValue(v15, kCFNumberSInt32Type, &valuePtr);
                  if (valuePtr == 3)
                  {
                    int v18 = *v6;
                    CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v18);
                    if (!v16) {
                      break;
                    }
                    CFNumberRef v17 = v16;
                    CFSetRemoveValue(*(CFMutableSetRef *)(a3 + 3320), v14);
                    sub_10001C6A4((uint64_t)v14, @"CHANNEL", v17);
                    CFSetAddValue(*(CFMutableSetRef *)(a3 + 3320), v14);
                    CFRelease(v17);
                  }
                }
              }
              ++v11;
            }
            while (v12 != v11);
          }
          CFRelease(v9);
        }
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: deviceManagerRef is Null!", @"__WiFiDeviceManagerSoftAPChannelChangedEventCallback"];
    }
  }
}

void sub_100131D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v7 = *(void *)(a3 + 4760);
    if (v7)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: p2pThreadCoexEventDict:%@ ", "__WiFiDeviceManagerP2pThreadCoexEventCallback", a4 message];
      }
      CFArrayRef v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 4760);
      uint64_t v10 = *(void *)(a3 + 4768);
      v9(a3, a2, v10, a4);
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: p2pThreadCoex callback is NULL!"];
    }
    CFIndex v11 = v8;
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: deviceManagerRef is Null!", "__WiFiDeviceManagerP2pThreadCoexEventCallback")];
    }
    CFIndex v11 = v12;
  }
}

void sub_100131ECC(uint64_t a1)
{
  if (!_os_feature_enabled_impl()) {
    goto LABEL_45;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"%s: WiFiDeviceManagerRef is NULL", @"__WiFiDeviceManagerCheckForColocatedSSIDs"];
    }
    goto LABEL_44;
  }
  BOOL v3 = sub_100072970(*(void *)(a1 + 64), 0);
  if (!v3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: CFArrayCreateMutable() returned NULL", @"__WiFiDeviceManagerCheckForColocatedSSIDs"];
    }
LABEL_44:
LABEL_45:
    uint64_t v7 = 0;
    id v5 = 0;
    goto LABEL_39;
  }
  __int16 v4 = v3;
  id v5 = sub_10012BF64(v3);
  if (v5)
  {
    id v6 = sub_10010BA9C(a1);
    if (v6)
    {
      uint64_t v7 = v6;
      [objc_msgSend(*(id *)(a1 + 8824), "knownNetworks") allObjects];
      CFArrayRef v8 = (void *)CWFColocatedNetworksMatchingScanResult();
      CFArrayRef v9 = &objc_retainAutoreleaseReturnValue_ptr;
      id v10 = [+[NSUserDefaults standardUserDefaults] objectForKey:@"UserDismissedColocatedSSIDTimestamps"];
      long long v37 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      id v11 = [v8 countByEnumeratingWithState:&v37 objects:v42 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v31 = a1;
        double v29 = v7;
        id v30 = v5;
        uint64_t v13 = *(void *)v38;
LABEL_8:
        uint64_t v14 = 0;
        while (1)
        {
          if (*(void *)v38 != v13) {
            objc_enumerationMutation(v8);
          }
          CFNumberRef v15 = *(void **)(*((void *)&v37 + 1) + 8 * v14);
          if (![objc_msgSend(objc_msgSend(v10, "allKeys"), "containsObject:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@", objc_msgSend(v15, "networkName"))])break; {
          if (qword_10027DD68)
          }
            [(id)qword_10027DD68 WFLog:3, "%s: Colocated SSID candidate already dismissed by user (%@)", "__WiFiDeviceManagerCheckForColocatedSSIDs", v15 message];
          if (v12 == (id)++v14)
          {
            id v12 = [v8 countByEnumeratingWithState:&v37 objects:v42 count:16];
            if (v12) {
              goto LABEL_8;
            }
            CFNumberRef v15 = 0;
            break;
          }
        }
        id v5 = v30;
        uint64_t v7 = v29;
        a1 = v31;
        CFArrayRef v9 = &objc_retainAutoreleaseReturnValue_ptr;
      }
      else
      {
        CFNumberRef v15 = 0;
      }
      if (os_variant_has_internal_content())
      {
        id v17 = [objc_msgSend(v9[306], "standardUserDefaults") objectForKey:@"ColocatedSSIDNotificationForceMatchSSID"];
        if (v17)
        {
          id v18 = v17;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          id v19 = [v5 countByEnumeratingWithState:&v33 objects:v41 count:16];
          if (v19)
          {
            id v20 = v19;
            uint64_t v32 = a1;
            int v21 = v7;
            uint64_t v22 = *(void *)v34;
            while (2)
            {
              for (CFIndex i = 0; i != v20; CFIndex i = (char *)i + 1)
              {
                if (*(void *)v34 != v22) {
                  objc_enumerationMutation(v5);
                }
                double v24 = *(void **)(*((void *)&v33 + 1) + 8 * i);
                if (objc_msgSend(objc_msgSend(v24, "networkName"), "isEqualToString:", v18))
                {
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: [internal] Force matched SSID candidate %@", "__WiFiDeviceManagerCheckForColocatedSSIDs", v15 message];
                  }
                  CFNumberRef v15 = v24;
                  goto LABEL_33;
                }
              }
              id v20 = [v5 countByEnumeratingWithState:&v33 objects:v41 count:16];
              if (v20) {
                continue;
              }
              break;
            }
LABEL_33:
            uint64_t v7 = v21;
            a1 = v32;
          }
        }
      }
      if (v15)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Dispatching colocated SSID notification for %@", "__WiFiDeviceManagerCheckForColocatedSSIDs", v15 message];
        }
        [*(id *)(a1 + 6704) dispatchNotificationWithColocatedScanResult:v15 fromScanResult:v7];
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: No valid colocated SSID candidates", "__WiFiDeviceManagerCheckForColocatedSSIDs"];
        }
      }
      goto LABEL_38;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: __WiFiDeviceManagerCopyCurrentCoreWiFiScanResult() returned NULL", @"__WiFiDeviceManagerCheckForColocatedSSIDs"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: __WiFiDeviceManagerCreateCoreWiFiScanResultsFromNetworks() returned NULL", "__WiFiDeviceManagerCheckForColocatedSSIDs"];
    }
  }
  uint64_t v7 = 0;
LABEL_38:
  CFRelease(v4);
LABEL_39:
}

void sub_100132384(uint64_t a1, void *a2)
{
  if (a2)
  {
    BOOL v3 = sub_100072AF0(*(void *)(*(void *)(a1 + 32) + 64)) != 1;
    [*(id *)(*(void *)(a1 + 32) + 7368) setLinkEvent:1 isInvoluntary:v3 linkChangeReason:0 linkChangeSubreason:0 withNetworkDetails:a2 forInterface:sub_100017C48(*(void *)(*(void *)(a1 + 32) + 64))];
  }
}

void sub_100132410(NSObject **a1, const void *a2, int a3, int a4)
{
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        sub_10001C6A4((uint64_t)a2, @"TransitionDisabledFlags", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
        if (a4)
        {
          sub_10010C6B4(a1, a2);
        }
      }
    }
  }
}

void sub_1001324A0(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  if (a1)
  {
    if (a3)
    {
      id v6 = malloc_type_malloc(0xB8uLL, 0x10000406E508D01uLL);
      if (v6)
      {
        uint64_t v7 = (uint64_t)v6;
        v6[22] = 0;
        *((_OWORD *)v6 + 9) = 0u;
        *((_OWORD *)v6 + 10) = 0u;
        *((_OWORD *)v6 + 7) = 0u;
        *((_OWORD *)v6 + 8) = 0u;
        *((_OWORD *)v6 + 5) = 0u;
        *((_OWORD *)v6 + 6) = 0u;
        *((_OWORD *)v6 + 3) = 0u;
        *((_OWORD *)v6 + 4) = 0u;
        *((_OWORD *)v6 + 1) = 0u;
        *((_OWORD *)v6 + 2) = 0u;
        *(_OWORD *)id v6 = 0u;
        *((_DWORD *)v6 + 4) = sub_1000C8A5C((uint64_t)a2);
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_STATUS");
        if (Value) {
          CFNumberGetValue(Value, kCFNumberSInt32Type, (void *)(v7 + 24));
        }
        CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_REASON");
        if (v9) {
          CFNumberGetValue(v9, kCFNumberSInt32Type, (void *)(v7 + 28));
        }
        CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_FLAGS");
        if (v10) {
          CFNumberGetValue(v10, kCFNumberSInt32Type, (void *)(v7 + 20));
        }
        CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_PROFILE_TYPE");
        if (v11) {
          CFNumberGetValue(v11, kCFNumberSInt32Type, (void *)(v7 + 32));
        }
        CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_ORIGIN_RSSI");
        if (v12) {
          CFNumberGetValue(v12, kCFNumberSInt32Type, (void *)(v7 + 36));
        }
        CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_TARGET_RSSI");
        if (v13) {
          CFNumberGetValue(v13, kCFNumberSInt32Type, (void *)(v7 + 40));
        }
        CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_ORIGIN_CHANNEL");
        if (v14) {
          CFNumberGetValue(v14, kCFNumberSInt32Type, (void *)(v7 + 44));
        }
        CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_TARGET_CHANNEL");
        if (v15) {
          CFNumberGetValue(v15, kCFNumberSInt32Type, (void *)(v7 + 48));
        }
        CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_ORIGIN_CHANNEL_FLAGS");
        if (v16) {
          CFNumberGetValue(v16, kCFNumberSInt32Type, (void *)(v7 + 52));
        }
        CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_TARGET_CHANNEL_FLAGS");
        if (v17) {
          CFNumberGetValue(v17, kCFNumberSInt32Type, (void *)(v7 + 56));
        }
        CFDataRef v18 = (const __CFData *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_ORIGIN_OUI");
        if (v18)
        {
          v53.location = 0;
          v53.length = 3;
          CFDataGetBytes(v18, v53, (UInt8 *)(v7 + 60));
        }
        CFDataRef v19 = (const __CFData *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_TARGET_OUI");
        if (v19)
        {
          v54.location = 0;
          v54.length = 3;
          CFDataGetBytes(v19, v54, (UInt8 *)(v7 + 63));
        }
        CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_TIME_STARTED");
        if (v20) {
          CFNumberGetValue(v20, kCFNumberSInt64Type, (void *)v7);
        }
        CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_TIME_ENDED");
        if (v21) {
          CFNumberGetValue(v21, kCFNumberSInt64Type, (void *)(v7 + 8));
        }
        CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_ORIGIN_AUTHTYPE");
        if (v22) {
          CFNumberGetValue(v22, kCFNumberSInt32Type, (void *)(v7 + 144));
        }
        CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_TARGET_AUTHTYPE");
        if (v23) {
          CFNumberGetValue(v23, kCFNumberSInt32Type, (void *)(v7 + 148));
        }
        CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_ORIGIN_AKMS");
        if (v24) {
          CFNumberGetValue(v24, kCFNumberSInt32Type, (void *)(v7 + 152));
        }
        CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_TARGET_AKMS");
        if (v25) {
          CFNumberGetValue(v25, kCFNumberSInt32Type, (void *)(v7 + 156));
        }
        CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_ORIGIN_PHYMODE");
        if (v26) {
          CFNumberGetValue(v26, kCFNumberSInt32Type, (void *)(v7 + 160));
        }
        CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_TARGET_PHYMODE");
        if (v27) {
          CFNumberGetValue(v27, kCFNumberSInt32Type, (void *)(v7 + 164));
        }
        CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_CHANNELS_SCANNED_COUNT");
        if (v28) {
          CFNumberGetValue(v28, kCFNumberSInt16Type, (void *)(v7 + 180));
        }
        CFDataRef v29 = (const __CFData *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_ORIGIN_ADDR");
        if (v29)
        {
          v55.location = 0;
          v55.length = 6;
          CFDataGetBytes(v29, v55, (UInt8 *)(v7 + 168));
        }
        CFDataRef v30 = (const __CFData *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_TARGET_ADDR");
        if (v30)
        {
          v56.location = 0;
          v56.length = 6;
          CFDataGetBytes(v30, v56, (UInt8 *)(v7 + 174));
        }
        id v32 = [(__CFDictionary *)a3 objectForKey:@"ROAM_CACHE"];
        int v33 = sub_100072C4C(*(void *)(a1 + 64));
        id v34 = +[WiFiRoamManager sharedWiFiRoamManager];
        if (v34)
        {
          long long v35 = v34;
          sub_10003D070(*(void *)(a1 + 120), (_DWORD *)(v7 + 68), (_DWORD *)(v7 + 72), (_DWORD *)(v7 + 76), (_DWORD *)(v7 + 80), (unint64_t *)(v7 + 88), (unint64_t *)(v7 + 128), (unint64_t *)(v7 + 136));
          CFArrayRef v36 = *(const __CFArray **)(a1 + 3528);
          if (v36)
          {
            v57.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 3528));
            v57.location = 0;
            FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v36, v57, a2);
            if (FirstIndexOfValue != -1)
            {
              CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3528), FirstIndexOfValue);
              if (v33 && [v35 isRoamLateDueToDelta]) {
                sub_1000CAC60((uint64_t)ValueAtIndex, a2, (int)[v35 minRssiDeltaInRoamCache], (int)[v35 maxRssiDeltaInRoamCache]);
              }
              int v39 = *(unsigned __int16 *)(v7 + 20);
              unsigned int v40 = sub_1000C6B08((uint64_t)ValueAtIndex);
              *(_DWORD *)(v7 + 20) = v39 | (v40 << 24) | (sub_1000CF14C((uint64_t)ValueAtIndex) << 16);
              *(_DWORD *)(v7 + 32) = sub_100019AD4(a1, ValueAtIndex);
            }
          }
          if (v33) {
            *(_DWORD *)(v7 + 100) = *(_DWORD *)(v7 + 8) - *(_DWORD *)v7;
          }
          unint64_t v41 = sub_10001CD58(a2);
          if (v41)
          {
            CFDateRef v42 = (const __CFDate *)v41;
            double Current = CFAbsoluteTimeGetCurrent();
            *(void *)(v7 + 104) = (unint64_t)(Current - CFDateGetAbsoluteTime(v42));
          }
          unsigned int v44 = [v35 lastHostTriggeredRoamReason];
          int v45 = *(_DWORD *)(a1 + 3352);
          *(_DWORD *)(v7 + 112) = v44;
          *(_DWORD *)(v7 + 116) = v45;
          *(unsigned char *)(v7 + 120) = *(unsigned char *)(a1 + 3408) != 0;
          *(unsigned char *)(v7 + 121) = [v35 isRoamLateDueToDelta];
          [v35 setLastHostTriggeredRoamReason:0];
          uint64_t v46 = *(void *)(a1 + 64);
          long long v47 = sub_10001A43C(a2);
          sub_10004F5C0(v46, v7, (uint64_t)v47, v32);
          if (v33)
          {
            [v35 didSubmitMetrics];
          }
          else
          {
            uint64_t v48 = *(void *)(a1 + 64);
            long long v49 = sub_10001A43C(a2);
            sub_10004F5C0(v48, v7, (uint64_t)v49, v32);
          }
          sub_10003D040(*(void *)(a1 + 120));
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4, @"%s, roamManager is NULL", @"__WiFiDeviceManagerSubmitRoamStatusMetrics"];
          }
        }
        free((void *)v7);
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, roamStatusdict is NULL", @"__WiFiDeviceManagerSubmitRoamStatusMetrics"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, WiFiDeviceManagerRef is NULL", @"__WiFiDeviceManagerSubmitRoamStatusMetrics"];
    }
  }
}

void sub_100132B30(uint64_t a1, int a2)
{
  if (a1)
  {
    if (*(void *)(a1 + 4120))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        id v5 = Mutable;
        if (a2)
        {
          __int16 valuePtr = 0;
          CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          if (v6)
          {
            CFNumberRef v7 = v6;
            CFDictionaryAddValue(v5, @"HostApDisableHotspotAdvertiseReason", v6);
            CFRelease(v7);
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3, "%s: HostAP Max Client Connected: Disable Hotspot Advertising\n", "__WiFiDeviceManagerHostApStateChangedMaxClientsConnected"];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: HostAP Max Client Allowed: Enable Hotspot Advertising\n", "__WiFiDeviceManagerHostApStateChangedMaxClientsConnected")];
          }
        }
        if (*(unsigned char *)(a1 + 5219)) {
          CFBooleanRef v9 = kCFBooleanTrue;
        }
        else {
          CFBooleanRef v9 = kCFBooleanFalse;
        }
        CFDictionaryAddValue(v5, @"HostApEnabled", v9);
        if (a2) {
          CFBooleanRef v10 = kCFBooleanTrue;
        }
        else {
          CFBooleanRef v10 = kCFBooleanFalse;
        }
        CFDictionaryAddValue(v5, @"HostApDisableHotspotAdvertise", v10);
        (*(void (**)(uint64_t, void, __CFDictionary *))(a1 + 4120))(a1, *(void *)(a1 + 4128), v5);
        CFRelease(v5);
      }
    }
  }
}

void sub_100132CC0(id a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Requesting PersonalHotspotControl extension to reload because SoftAP client arrives"];
  }
  uint64_t v2 = +[CHSControlService sharedInstance];

  [(CHSControlService *)v2 reloadControlsForExtension:@"com.apple.WiFiKit.PersonalHotspotControl" kind:@"PersonalHotspotControl" reason:@"Requesting PersonalHotspotControl extension to reload because personal hotspot client arrives"];
}

void sub_100132D40(id a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Requesting PersonalHotspotControl extension to reload because SoftAP client leaves"];
  }
  uint64_t v2 = +[CHSControlService sharedInstance];

  [(CHSControlService *)v2 reloadControlsForExtension:@"com.apple.WiFiKit.PersonalHotspotControl" kind:@"PersonalHotspotControl" reason:@"Requesting PersonalHotspotControl extension to reload because personal hotspot client leaves"];
}

uint64_t sub_100132DC0(uint64_t a1)
{
  BOOL v3 = *(const void **)(a1 + 1112);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 1112) = 0;
  }
  __int16 v4 = *(const void **)(a1 + 3376);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 3376) = 0;
  }
  id v5 = *(const void **)(a1 + 3368);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 3368) = 0;
  }
  CFNumberRef v6 = *(const void **)(a1 + 3384);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 3384) = 0;
  }
  *(unsigned char *)(a1 + 3304) = 0;
  *(_DWORD *)(a1 + 1136) = 0;
  CFNumberRef v7 = *(__CFArray **)(a1 + 3288);
  if (v7) {
    CFArrayRemoveAllValues(v7);
  }
  *(_DWORD *)(a1 + 5620) = 0;
  CFArrayRef v8 = (const __CFArray *)sub_100005420(a1);
  if (!v8) {
    goto LABEL_33;
  }
  CFArrayRef v9 = v8;
  +[WiFiLocationManager logLocation:v8 addPrefixString:@"__WiFiDeviceManagerScanPreviousNetworkChannel"];
  unsigned int v10 = +[WiFiLocationManager isLocationValid:v9 uptoSeconds:1 isHighAccuracy:60.0];
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: isValid %d", "__WiFiDeviceManagerScanPreviousNetworkChannel", v10 != 0);
  }
  if (!v10) {
    goto LABEL_32;
  }
  CFArrayRef v12 = (const __CFArray *)[[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyScoreSortedNetworksAvailableAtLocation:v9];
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: score sorted networks %@", "__WiFiDeviceManagerScanPreviousNetworkChannel", v12 message];
  }
  *(void *)(a1 + 3384) = v9;
  CFRetain(v9);
  CFRelease(v9);
  if (!v12)
  {
LABEL_33:
    if (*(void *)(a1 + 3512))
    {
      CFArrayRef v19 = *(const __CFArray **)(a1 + 3576);
      v64.length = CFArrayGetCount(v19);
      v64.location = 0;
      if (CFArrayGetFirstIndexOfValue(v19, v64, *(const void **)(a1 + 3512)) != -1)
      {
        CFNumberRef ValueAtIndex = *(void **)(a1 + 3512);
        if (ValueAtIndex)
        {
          uint64_t v21 = 6;
          goto LABEL_39;
        }
      }
    }
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 3576)))
    {
      CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3576), 0);
      uint64_t v21 = 6;
      if (ValueAtIndex) {
        goto LABEL_39;
      }
    }
    else
    {
      CFNumberRef ValueAtIndex = 0;
      LODWORD(v21) = 6;
    }
LABEL_61:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "multi-stage auto-join: No previous network (%p)", ValueAtIndex);
    }
    long long v37 = v36;
    goto LABEL_64;
  }
  if (!CFArrayGetCount(v12) || CFArrayGetCount(v12) < 1)
  {
    CFArrayRef v9 = v12;
LABEL_32:
    CFRelease(v9);
    goto LABEL_33;
  }
  CFIndex v14 = 0;
  while (1)
  {
    CFNumberRef v15 = (void *)CFArrayGetValueAtIndex(v12, v14);
    if (v15) {
      break;
    }
LABEL_29:
    if (CFArrayGetCount(v12) <= ++v14) {
      goto LABEL_30;
    }
  }
  CFNumberRef v16 = v15;
  sub_1001366D0(a1, v15);
  if (!sub_10012EE58(a1, v16, 0))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: top network %@ is not eligible for aj ", "__WiFiDeviceManagerScanPreviousNetworkChannel", sub_10001A43C(v16) message];
    }
    goto LABEL_28;
  }
  CFIndex v17 = sub_1000CE630(*(const __CFArray **)(a1 + 3576), (uint64_t)v16);
  if (v17 == -1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: top network <%@> does not exist in filtered known networks list, onto the next one ", "__WiFiDeviceManagerScanPreviousNetworkChannel", sub_10001A43C(v16) message];
    }
LABEL_28:
    goto LABEL_29;
  }
  CFRange v55 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3576), v17);
  if (!v55)
  {
LABEL_30:
    CFArrayRef v9 = v12;
    goto LABEL_32;
  }
  CFNumberRef ValueAtIndex = v55;
  *(_DWORD *)(a1 + 5620) = 11;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Enter location based AJ's 1st stage - top network %@", "__WiFiDeviceManagerScanPreviousNetworkChannel", ValueAtIndex message];
  }
  *(void *)(a1 + 3376) = ValueAtIndex;
  CFRetain(ValueAtIndex);
  *(void *)(a1 + 3368) = v12;
  CFRetain(v12);
  CFRelease(v12);
  uint64_t v21 = 7;
LABEL_39:
  if (!sub_10012EE58(a1, ValueAtIndex, 0)) {
    goto LABEL_61;
  }
  if (sub_1000199C0((uint64_t)ValueAtIndex) && !*(_DWORD *)(a1 + 688))
  {
    *(unsigned char *)(a1 + 672) = 1;
    *(void *)(a1 + 664) = 0;
    *(_DWORD *)(a1 + 688) = 1;
  }
  CFNumberRef v22 = (const __CFNumber *)sub_10001E404((uint64_t)ValueAtIndex, @"CHANNEL");
  if (!v22)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"multi-stage auto-join: No channel info"];
    }
    long long v37 = v42;
LABEL_64:
    uint64_t v38 = 4294963396;
    goto LABEL_65;
  }
  CFNumberRef v23 = v22;
  long long v58 = v2;
  if (!sub_1000199C0((uint64_t)ValueAtIndex)
    || (*(unsigned char *)(a1 + 672) = 0,
        int v24 = sub_1000C6FC0((uint64_t)ValueAtIndex, @"CHANNEL"),
        LODWORD(valuePtr) = v24,
        *(_DWORD *)(a1 + 668) = v24,
        v24 > 14)
    || (CFArrayRef v25 = (const __CFArray *)sub_10001E404((uint64_t)ValueAtIndex, @"networkKnownBSSListKey")) == 0
    || (CFArrayRef v26 = v25, CFArrayGetCount(v25) < 2)
    || CFArrayGetCount(v26) < 1)
  {
LABEL_54:
    id v32 = (void *)sub_10001E404((uint64_t)ValueAtIndex, @"CHANNEL_FLAGS");
    if (v32)
    {
      int v33 = v32;
      CFNumberRef v30 = v23;
      goto LABEL_56;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"multi-stage auto-join: No channel flags info"];
    }
    uint64_t v38 = 4294963396;
    goto LABEL_84;
  }
  CFIndex v27 = 0;
  while (1)
  {
    CFDictionaryRef v28 = (const __CFDictionary *)CFArrayGetValueAtIndex(v26, v27);
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v28, @"CHANNEL");
    if (Value)
    {
      CFNumberRef v30 = Value;
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      if ((int)valuePtr >= 36)
      {
        uint64_t v31 = (void *)CFDictionaryGetValue(v28, @"CHANNEL_FLAGS");
        if (v31) {
          break;
        }
      }
    }
    if (CFArrayGetCount(v26) <= ++v27) {
      goto LABEL_54;
    }
  }
  int v33 = v31;
  *(_DWORD *)(a1 + 668) = valuePtr;
  *(unsigned char *)(a1 + 672) = 1;
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Re-directed to connect to chanenl %d", "__WiFiDeviceManagerScanPreviousNetworkChannel", valuePtr);
  }
LABEL_56:
  int v59 = 0;
  if (sub_1001368DC(a1, &v59))
  {
    CFNumberRef v34 = sub_1000C6FC0((uint64_t)ValueAtIndex, @"CHANNEL");
    if ((v34 - 1) <= 0xD)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Disallowing 2.4Ghz channel %d for %@", "__WiFiDeviceManagerScanPreviousNetworkChannel", v34, sub_10001A43C(ValueAtIndex) message];
      }
      goto LABEL_80;
    }
  }
  int v59 = 0;
  if (!sub_100136B70((unsigned char *)a1, &v59)
    || (CFNumberRef v43 = sub_1000C6FC0((uint64_t)ValueAtIndex, @"CHANNEL"), (int)v43 < 15))
  {
    long long valuePtr = *(_OWORD *)&off_100241B28;
    values[0] = v30;
    values[1] = v33;
    CFDictionaryRef v45 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&valuePtr, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (v45)
    {
      CFDictionaryRef v46 = v45;
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (Mutable)
      {
        CFArrayRef v48 = Mutable;
        CFArrayAppendValue(Mutable, v46);
        sub_1001302EC(a1);
        if (qword_10027DD68)
        {
          long long v50 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN, SCAN", +[NSString stringWithFormat:@"multi-stage auto-join: Scanning(%s) for previous network %@ on channel %@", "Active", sub_10001A43C(ValueAtIndex), v30]) UTF8String]);
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            long long v51 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v50 UTF8String]] UTF8String];
            *(_DWORD *)long long buf = 136446210;
            uint64_t v61 = v51;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          }
        }
        if (*(_DWORD *)(a1 + 5520) == 1 || *(unsigned char *)(a1 + 5504))
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: CarPlay scan dewll time (%d), channel (%d), dual band (%d)", "__WiFiDeviceManagerScanPreviousNetworkChannel", 40, *(unsigned int *)(a1 + 668), *(unsigned __int8 *)(a1 + 672)];
          }
          unsigned int v53 = 40;
        }
        else
        {
          unsigned int v53 = 110;
        }
        uint64_t v54 = sub_100136C5C(a1, *(const __CFArray **)(a1 + 3552), v48, v53, 25);
        if (!v54)
        {
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 3288), v46);
          CFRelease(v46);
          CFRelease(v48);
          *(_DWORD *)(a1 + 3284) = v21;
          uint64_t v2 = v58;
          goto LABEL_71;
        }
        uint64_t v38 = v54;
        CFRelease(v46);
        CFRelease(v48);
LABEL_84:
        uint64_t v2 = v58;
        goto LABEL_65;
      }
      CFRelease(v46);
    }
    uint64_t v38 = 4294963394;
    goto LABEL_84;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Disallowing 5Ghz channel %d for %@", "__WiFiDeviceManagerScanPreviousNetworkChannel", v43, sub_10001A43C(ValueAtIndex) message];
  }
LABEL_80:
  uint64_t v2 = v58;
  *(_DWORD *)(a1 + 6168) = v59;
  uint64_t v38 = 4294963394;
LABEL_65:
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:4, @"multi-stage auto-join: Error scanning for previous network, err=%d", v38];
  }
  if (*(_DWORD *)(a1 + 5520) == 1 || *(unsigned char *)(a1 + 5504))
  {
    *(_DWORD *)(a1 + 3284) = v21;
    uint64_t v40 = sub_100137200((_DWORD *)a1);
  }
  else
  {
    uint64_t v40 = sub_1001372E0(a1);
  }
  uint64_t v21 = v40;
LABEL_71:
  return v21;
}

uint64_t sub_100133720(uint64_t a1)
{
  char v47 = 0;
  if (*(_DWORD *)(a1 + 3280) != 2)
  {
    uint64_t v2 = *(const void **)(a1 + 1112);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 1112) = 0;
    }
    *(_DWORD *)(a1 + 1136) = 0;
  }
  BOOL v3 = *(const void **)(a1 + 1168);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 1168) = 0;
  }
  *(void *)(a1 + 1144) = 0;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 3552));
  int v5 = sub_100136108(a1, &v47);
  BOOL v6 = *(_DWORD *)(a1 + 176) != 3 && CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 3296) > 30.0;
  if (*(unsigned char *)(a1 + 34)) {
    BOOL v6 = 0;
  }
  if (!*(unsigned char *)(a1 + 32) || !*(unsigned char *)(a1 + 33))
  {
    int v7 = 7;
    goto LABEL_17;
  }
  if (*(unsigned char *)(a1 + 35))
  {
    int v7 = 9;
LABEL_17:
    *(_DWORD *)(a1 + 5620) = v7;
LABEL_18:
    *(unsigned char *)(a1 + 3304) = 0;
    int v8 = 16;
    char v9 = 1;
    goto LABEL_19;
  }
  if (*(_DWORD *)(a1 + 3280) != 2)
  {
    if (v5 | v6)
    {
      if (v47)
      {
        if (v5)
        {
          int v7 = 5;
        }
        else
        {
          if (!v6) {
            goto LABEL_18;
          }
          int v7 = 6;
        }
        goto LABEL_17;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 3304))
      {
        char v9 = 0;
        *(_DWORD *)(a1 + 5620) = 3;
        ++*(_WORD *)(a1 + 6120);
        int v8 = 8;
        goto LABEL_19;
      }
      if (v47) {
        goto LABEL_18;
      }
    }
    int v7 = 8;
    goto LABEL_17;
  }
  if (!*(unsigned char *)(a1 + 5608)
    || (CFIndex v24 = CFArrayGetCount(*(CFArrayRef *)(a1 + 1112)),
        CFIndex v25 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3568)) + v24,
        v25 + CFArrayGetCount(*(CFArrayRef *)(a1 + 3560))))
  {
    *(_DWORD *)(a1 + 5620) = 4;
  }
  char v9 = 0;
  ++*(_WORD *)(a1 + 6116);
  *(unsigned char *)(a1 + 3304) = 0;
  int v8 = 16;
LABEL_19:
  if (Count) {
    unsigned int v10 = 110;
  }
  else {
    unsigned int v10 = 0;
  }
  int valuePtr = -1431655766;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableArrayRef v12 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFNumberRef v13 = v12;
  if (Mutable) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    goto LABEL_30;
  }
  uint64_t v15 = *(void *)(a1 + 64);
  CFNumberRef v16 = (const void *)sub_100017C48(v15);
  uint64_t v17 = sub_10000DE34(v15, v16, v13);
  if (v17)
  {
    uint64_t v18 = v17;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "AJScan: Device return error %d for supported channels. Scanning ALL channels\n", v18);
    }
    goto LABEL_30;
  }
  int v48 = 0;
  int v20 = sub_1001368DC(a1, &v48);
  *(_DWORD *)(a1 + 6168) = v48;
  int v21 = sub_100136B70((unsigned char *)a1, &v48);
  int v22 = v21;
  if (v20)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"AJScan: Disallowing 2.4Ghz channels"];
    }
    int v8 = 16;
    goto LABEL_43;
  }
  if (v9)
  {
    if (v21)
    {
      int v8 = 8;
      goto LABEL_43;
    }
LABEL_30:
    int v8 = 0;
    goto LABEL_56;
  }
LABEL_43:
  if (CFArrayGetCount(v13) >= 1)
  {
    CFIndex v26 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v26);
      if (ValueAtIndex)
      {
        CFDictionaryRef v28 = ValueAtIndex;
        CFNumberRef Value = (void *)CFDictionaryGetValue(ValueAtIndex, @"SUP_CHANNEL");
        CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(v28, @"SUP_CHANNEL_FLAGS");
        if (Value)
        {
          CFNumberRef v31 = v30;
          if (v30)
          {
            if (CFNumberGetValue(v30, kCFNumberSInt32Type, &valuePtr))
            {
              if ((valuePtr & v8) != 0)
              {
                if (!v22
                  || (LODWORD(keys[0]) = -1431655766,
                      CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, keys),
                      LODWORD(keys[0]))
                  && LODWORD(keys[0]) <= 0xE)
                {
                  *(_OWORD *)keys = *(_OWORD *)&off_100241B28;
                  values[0] = Value;
                  values[1] = v31;
                  CFDictionaryRef v32 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                  if (v32)
                  {
                    CFDictionaryRef v33 = v32;
                    CFArrayAppendValue(Mutable, v32);
                    CFRelease(v33);
                  }
                }
              }
            }
          }
        }
      }
      ++v26;
    }
    while (v26 < CFArrayGetCount(v13));
  }
LABEL_56:
  if (*(unsigned char *)(a1 + 5608))
  {
    CFNumberRef v34 = " ";
    if (*(_DWORD *)(a1 + 3280) == 2)
    {
      CFIndex v35 = CFArrayGetCount(*(CFArrayRef *)(a1 + 1112));
      CFIndex v36 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3568)) + v35;
      if (!(v36 + CFArrayGetCount(*(CFArrayRef *)(a1 + 3560)))) {
        CFNumberRef v34 = "- Fake ";
      }
    }
  }
  else
  {
    CFNumberRef v34 = " ";
  }
  if (qword_10027DD68)
  {
    uint64_t v38 = "ALL";
    if (v8 == 16) {
      uint64_t v38 = "5Ghz";
    }
    if (v8 == 8) {
      uint64_t v38 = "2.4Ghz";
    }
    int v39 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN, SCAN", +[NSString stringWithFormat:@"AJScan: Starting Broadcast scan(%s) with %s channels %s", "Active", v38, v34]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v40 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v39 UTF8String]] UTF8String];
      LODWORD(keys[0]) = 136446210;
      *(void **)((char *)keys + 4) = (void *)v40;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)keys, 0xCu);
    }
  }
  uint64_t v41 = 6;
  if (v8 == 16) {
    unsigned int v42 = 3;
  }
  else {
    unsigned int v42 = 4;
  }
  if (v8 == 16) {
    uint64_t v41 = 5;
  }
  if (v8 == 8) {
    uint64_t v43 = 2;
  }
  else {
    uint64_t v43 = v42;
  }
  if (v8 == 8) {
    uint64_t v44 = 4;
  }
  else {
    uint64_t v44 = v41;
  }
  uint64_t v45 = sub_100136C5C(a1, 0, Mutable, v10, v44);
  if (v45) {
    return sub_10000C060(a1, v45);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v43;
}

uint64_t sub_100133D50(uint64_t a1, void *a2, const __CFDictionary *a3, uint64_t a4)
{
  if (qword_10027DD68)
  {
    char v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: current state: %@", "__WiFiDeviceManagerProcessAssociationResult", sub_100024BE8(*(_DWORD *)(a1 + 3280))]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v9 UTF8String]] UTF8String];
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    }
  }
  double v116 = 0.0;
  if (a3) {
    MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, a3);
  }
  else {
    MutableCFStringRef Copy = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  CFNumberRef v11 = MutableCopy;
  if (MutableCopy)
  {
    CFStringRef v12 = sub_100024BE8(*(_DWORD *)(a1 + 3280));
    CFDictionaryAddValue(v11, @"reason", v12);
  }
  if (!a4)
  {
    if (sub_10001FC1C((uint64_t)a2))
    {
      *(_DWORD *)id v122 = 0;
      *(void *)&long long theDict = 0;
      long long buf = 0uLL;
      CFStringRef v13 = (const __CFString *)sub_100016E20(*(void *)(a1 + 64));
      CFStringGetCString(v13, (char *)&buf, 16, 0);
      EAPOLControlCopyStateAndStatus();
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: %@ not an EAP  network, not checking AT notification code", "__WiFiDeviceManagerProcessAssociationResult", sub_10001A43C(a2) message];
    }
    CFArrayRef v15 = sub_1000194F8(a1, a2, 1);
    CFArrayRef v16 = v15;
    if (v15)
    {
      uint64_t v17 = sub_10001E404((uint64_t)v15, @"ALLOW_WPA2_PSK");
      if (v17) {
        sub_10001C6A4((uint64_t)a2, @"ALLOW_WPA2_PSK", v17);
      }
      uint64_t v18 = sub_10001E404((uint64_t)v16, @"ALLOW_OWE_TSN");
      if (v18) {
        sub_10001C6A4((uint64_t)a2, @"ALLOW_OWE_TSN", v18);
      }
      sub_1000CA19C(v16, a2);
      CFArrayRef v19 = (const void *)sub_10001CD58(v16);
      if (v19) {
        sub_10001C6A4((uint64_t)a2, @"prevJoined", v19);
      }
      if (_os_feature_enabled_impl())
      {
        id v20 = sub_100005420(a1);
        int v21 = v20;
        if (v20)
        {
          uint64_t v22 = *(void *)(a1 + 6792);
          [v20 coordinate];
          CLLocationDegrees v24 = v23;
          [v21 coordinate];
          CLLocationDegrees v26 = v25;
          [v21 horizontalAccuracy];
          sub_1000A32E4(v22, a2, v24, v26, v27, [v21 timestamp]);
        }
        if (*(unsigned char *)(a1 + 3414))
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CFDateRef v29 = CFDateCreate(kCFAllocatorDefault, Current);
          if (v29)
          {
            sub_1000CAA00(a2, v29);
            CFRelease(v29);
          }
        }
      }
      CFRelease(v16);
    }
    CFAbsoluteTime v30 = CFAbsoluteTimeGetCurrent();
    CFDateRef v31 = CFDateCreate(kCFAllocatorDefault, v30);
    if (v31)
    {
      sub_1000C995C(a2, 0, v31);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: setting auto association date for %@ to %@", "__WiFiDeviceManagerProcessAssociationResult", sub_10001A43C(a2), v31 message];
      }
      CFRelease(v31);
    }
    sub_10013D0EC(a1, a2);
    if (a2)
    {
      id v33 = sub_10000AD1C((uint64_t)a2);
      [*(id *)(a1 + 6648) isNetworkDenyListedForAutoJoinDueToTrigDisc:v33 RSSI:0 timestamp:&v116];
      sub_100036B3C(*(void *)(a1 + 120), v116);

      sub_10013D1C4(a1, a2, 0);
      id v34 = sub_10000AD1C((uint64_t)a2);
      [*(id *)(a1 + 6648) removeNetworkDenyListInfoWithReason:1 forScanResult:v34];
      [*(id *)(a1 + 6648) removeNetworkDenyListInfoForTrigger:0 forNetwork:v34];
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Failed to set blacklist last trigger disconnect", "__WiFiDeviceManagerProcessAssociationResult")
      }
      sub_10013D1C4(a1, 0, 0);
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Failed to clear blacklist trigger", "__WiFiDeviceManagerProcessAssociationResult")
      }
    }
    if (*(unsigned char *)(a1 + 3412))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: tagging network %@ as moving", "__WiFiDeviceManagerProcessAssociationResult", sub_10001A43C(a2) message];
      }
      sub_10001C6A4((uint64_t)a2, @"WiFiNetworkAttributeIsMoving", kCFBooleanTrue);
      CFBooleanRef v38 = kCFBooleanFalse;
    }
    else
    {
      CFBooleanRef v38 = kCFBooleanFalse;
      sub_10001C6A4((uint64_t)a2, @"WiFiNetworkAttributeIsMoving", kCFBooleanFalse);
    }
    sub_10001C6A4((uint64_t)a2, @"WiFiInstantHotspotJoining", v38);
    sub_10001C6A4((uint64_t)a2, @"WiFiAutoInstantHotspotJoining", v38);
    if (*(_DWORD *)(a1 + 3472)) {
      BOOL v39 = a2 == 0;
    }
    else {
      BOOL v39 = 1;
    }
    if (!v39) {
      sub_10001C6A4((uint64_t)a2, @"TransitionDisabledFlags", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
    }
    sub_10010547C(a1, a2);
    if (*(void *)(a1 + 3872))
    {
      if (*(void *)(a1 + 240))
      {
        *(void *)&long long buf = 0;
        *((void *)&buf + 1) = &buf;
        uint64_t v125 = 0x2020000000;
        v126 = 0;
        *(void *)&long long theDict = 0;
        *((void *)&theDict + 1) = &theDict;
        uint64_t v118 = 0x2020000000;
        uint64_t v119 = 0;
        if (a2)
        {
          CFTypeRef v40 = CFRetain(a2);
          *(void *)(*((void *)&buf + 1) + 24) = v40;
        }
        if (v11)
        {
          CFTypeRef v41 = CFRetain(v11);
          *(void *)(*((void *)&theDict + 1) + 24) = v41;
        }
        CFRetain((CFTypeRef)a1);
        unsigned int v42 = *(NSObject **)(a1 + 240);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10013D274;
        block[3] = &unk_100241910;
        void block[4] = &buf;
        void block[5] = &theDict;
        void block[6] = a1;
        int v115 = 0;
        dispatch_async(v42, block);
        _Block_object_dispose(&theDict, 8);
        _Block_object_dispose(&buf, 8);
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue.", @"__WiFiDeviceManagerProcessAssociationResult"];
        }
      }
    }
    sub_100102948(a1, 2, (uint64_t)"__WiFiDeviceManagerProcessAssociationResult");
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3560));
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3568));
    [*(id *)(a1 + 3656) clearScanResultsForAutoJoinSessionReset];
    sub_1001409B8(a1, @"autoJoinSuccess", a2, 0);
    if (_os_feature_enabled_impl())
    {
      uint64_t v44 = sub_10001A43C(a2);
      if (v44) {
        [*(id *)(a1 + 8896) removeObjectForKey:v44];
      }
    }
    if (_os_feature_enabled_impl()) {
      sub_10013CE60(a1, (uint64_t)a2, 0);
    }
    sub_10013D370(a1, a2);
    sub_10013D4A0(a1, (uint64_t)a2);
    if (v11) {
      CFRelease(v11);
    }
    *(_WORD *)(a1 + 6600) = sub_100105E08(a1, a2);
    sub_100100A60((char *)a1, 1, 1);
    sub_100130E84(a1, a2);
    if (qword_10027DD68)
    {
      CFDictionaryRef v46 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN, ASSOC", +[NSString stringWithFormat:@"Auto join association succeeded, network: %@", sub_10001A43C(a2)]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        char v47 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v46 UTF8String]] UTF8String];
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v47;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      }
    }
    uint64_t v48 = 0;
    goto LABEL_70;
  }
  uint64_t v48 = *(unsigned int *)(a1 + 3280);
  if (a2)
  {
    BOOL v105 = sub_10001FC1C((uint64_t)a2);
    CFArrayRef v50 = sub_1000194F8(a1, a2, 1);
    CFArrayRef v111 = v50;
    CFBooleanRef v51 = kCFBooleanFalse;
    if (v50) {
      long long v52 = (const void **)v50;
    }
    else {
      long long v52 = (const void **)a2;
    }
  }
  else
  {
    BOOL v105 = 0;
    CFArrayRef v111 = 0;
    long long v52 = 0;
    CFBooleanRef v51 = kCFBooleanFalse;
  }
  unsigned int v112 = v52;
  unsigned int v53 = sub_10001A5A8(*(const __CFArray **)(a1 + 3704), v52);
  CFTypeRef cf = v53;
  if (v53)
  {
    CFDictionaryRef v54 = (const __CFDictionary *)sub_10001E404((uint64_t)v53, @"PRIVATE_MAC_ADDRESS");
    if (v54 && (CFTypeID TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(v54)))
    {
      CFDataRef v56 = (const __CFData *)CFDictionaryGetValue(v54, @"PRIVATE_MAC_ADDRESS_VALUE");
      CFDataRef v106 = sub_10001A6DC(v56);
    }
    else
    {
      CFDataRef v106 = 0;
    }
    CFBooleanRef v51 = (const __CFBoolean *)sub_10001E404((uint64_t)cf, @"MacAddressRandomisationTagMigratedNetwork");
  }
  else
  {
    CFDataRef v106 = 0;
    CFDictionaryRef v54 = 0;
  }
  sub_1000D1FFC((uint64_t)v112);
  uint64_t v57 = *(unsigned __int8 *)(a1 + 3688);
  if (!*(unsigned char *)(a1 + 3688)) {
    goto LABEL_113;
  }
  if (!v51 || v51 != kCFBooleanTrue)
  {
    uint64_t v65 = (uint64_t)cf;
    if (cf && v106)
    {
      uint64_t v65 = (uint64_t)cf;
      if (!sub_10001A680((uint64_t)v112) && *(void *)(a1 + 4744))
      {
        if (*(void *)(a1 + 240))
        {
          *(void *)&long long theDict = 0;
          *((void *)&theDict + 1) = &theDict;
          uint64_t v118 = 0x2020000000;
          uint64_t v119 = 0;
          CFTypeRef v66 = CFRetain(cf);
          *(void *)(*((void *)&theDict + 1) + 24) = v66;
          CFRetain((CFTypeRef)a1);
          CFArrayRef v67 = *(NSObject **)(a1 + 240);
          *(void *)&long long buf = _NSConcreteStackBlock;
          *((void *)&buf + 1) = 3221225472;
          uint64_t v125 = (uint64_t)sub_10013DF58;
          v126 = &unk_10023F220;
          p_long long theDict = &theDict;
          uint64_t v128 = a1;
          dispatch_async(v67, &buf);
          _Block_object_dispose(&theDict, 8);
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." arguments:("__WiFiDeviceManagerProcessAssociationFailure")];
          }
          uint64_t v65 = (uint64_t)cf;
        }
      }
    }
    else if (!cf)
    {
      goto LABEL_112;
    }
    *(void *)((char *)&theDict + 4) = 0xAAAAAAAAAAAAAAAALL;
    LODWORD(theDict) = 5;
    sub_1000570A8(v65, (uint64_t)&theDict);
    sub_100056E00((unsigned int *)&theDict);
    goto LABEL_112;
  }
  if (!v54)
  {
LABEL_112:
    uint64_t v57 = 0;
LABEL_113:
    char value = 1;
    goto LABEL_114;
  }
  CFTypeID v58 = CFDictionaryGetTypeID();
  CFTypeID v59 = CFGetTypeID(v54);
  uint64_t v57 = 0;
  char value = 1;
  if (v58 == v59 && v106)
  {
    long long v60 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v54);
    CFNumberRef valuea = sub_10005B0B8(1);
    CFDictionarySetValue(v60, @"PRIVATE_MAC_ADDRESS_TYPE", valuea);
    CFDictionarySetValue(v60, @"PRIVATE_MAC_ADDRESS_VALUE", *(const void **)(a1 + 3712));
    sub_10001C6A4((uint64_t)v112, @"PRIVATE_MAC_ADDRESS", v60);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Network <%@> falling back to physical Mac due to Assoc failure", "__WiFiDeviceManagerProcessAssociationFailure", sub_10001A43C(v112) message];
    }
    if (valuea) {
      CFRelease(valuea);
    }
    CFIndex v62 = *(void (**)(uint64_t, const void **, void))(a1 + 4712);
    if (v62) {
      v62(a1, v112, *(void *)(a1 + 4720));
    }
    if (cf)
    {
      *(void *)((char *)&buf + 4) = 0xAAAAAAAAAAAAAAAALL;
      LODWORD(buf) = 2;
      sub_1000570A8((uint64_t)cf, (uint64_t)&buf);
      sub_100056E00((unsigned int *)&buf);
    }
    if (v60) {
      CFRelease(v60);
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : Changing mac address of <%@> from Private to HW to Retry. Current count is <%ld>", sub_10001A43C(v112), *(void *)(a1 + 1128) message];
    }
    CFRange v64 = *(void **)(a1 + 7368);
    if (v64) {
      [v64 addFaultEvent:11 forInterface:sub_100017C48(*(void *)(a1 + 64))];
    }
    char value = 0;
    uint64_t v57 = 1;
  }
LABEL_114:
  CFTypeRef cfa = (CFTypeRef)v57;
  if (*(void *)(a1 + 7368))
  {
    *(void *)&long long theDict = _NSConcreteStackBlock;
    *((void *)&theDict + 1) = 3221225472;
    uint64_t v118 = (uint64_t)sub_10013DFE4;
    uint64_t v119 = &unk_1002415A0;
    uint64_t v120 = a1;
    int v121 = a4;
    sub_10010A88C(a1, v112, (uint64_t)&theDict);
  }
  if (sub_10001FC1C((uint64_t)v111) && sub_1000C8140((uint64_t)v111)) {
    sub_1001409B8(a1, @"autoJoinStatusEAPFromProfileFailedToJoin", 0, 0);
  }
  uint64_t v68 = (uint64_t)v112;
  if (a4 >= 0xFFFFF0C5 && a4 != -100) {
    goto LABEL_126;
  }
  if (!v11
    || (CFStringRef v69 = (const __CFString *)CFDictionaryGetValue(v11, @"reason"),
        CFComparisonResult v70 = CFStringCompare(@"Guessing 2ghz Network", v69, 0),
        uint64_t v68 = (uint64_t)v112,
        v70))
  {
    if (v68)
    {
      id v72 = sub_10000AD1C((uint64_t)v112);
      uint64_t v73 = 7;
      if ((a4 + 369033216) < 0x15 || (a4 + 369032216) < 2) {
        goto LABEL_125;
      }
      if (a4 == -369032214)
      {
        unsigned int v89 = [[sub_10001E404((uint64_t)v112, @"JOIN_EXTENDED_STATUS") intValue];
        if (v89 == 1031)
        {
LABEL_164:
          [*(id *)(a1 + 6648) setNetworkDenyListInfo:sub_100103A84(a1, 12, -369032214, 0, 5) forScanResult:v72];
          id v90 = objc_alloc_init((Class)NSDate);
          int v104 = sub_10005AA28((uint64_t)v90, 5, 0, 0);
          [(NSDate *)v104 timeIntervalSinceDate:v90];
          if (*(unsigned char *)(a1 + 7336))
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3, @"%s: EAPATNotifBlacklist expiry timer already running", @"__WiFiDeviceManagerProcessAssociationFailure"];
            }
          }
          else
          {
            double v100 = v91;
            *(unsigned char *)(a1 + 7336) = 1;
            sourcea = *(NSObject **)(a1 + 7344);
            dispatch_time_t v101 = dispatch_time(0, (uint64_t)(v91 * 1000000000.0));
            dispatch_source_set_timer(sourcea, v101, 0xFFFFFFFFFFFFFFFFLL, 0);
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: EAPATNotifBlacklist expiry timer set to fire in %f seconds from now", "__WiFiDeviceManagerProcessAssociationFailure", *(void *)&v100);
            }
          }
          if (v90) {
            CFRelease(v90);
          }
          if (v104) {
            CFRelease(v104);
          }
          goto LABEL_204;
        }
        if (v89 == 1026)
        {
          [*(id *)(a1 + 6648) setNetworkDenyListInfo:sub_100103A84(a1, 11, -369032214, 0, 5) forScanResult:v72];
          goto LABEL_164;
        }
        uint64_t v99 = sub_10001E404((uint64_t)v112, @"BSSID");
        [*(id *)(a1 + 6648) setNetworkDenyListInfo:sub_100103A84(a1, 7, -369032214, (uint64_t)v99, 5) forScanResult:v72];
      }
LABEL_204:
      uint64_t v73 = 5;
LABEL_125:
      unint64_t v74 = sub_10001E404((uint64_t)v112, @"BSSID");
      id v75 = sub_100103A84(a1, v73, (int)a4, (uint64_t)v74, 5);
      [*(id *)(a1 + 6648) setNetworkDenyListInfo:v75 forScanResult:v72];

      uint64_t v68 = (uint64_t)v112;
    }
LABEL_126:
    sub_10013D4A0(a1, v68);
    if (qword_10027DD68)
    {
      CFBooleanRef v77 = v112 ? sub_10001A43C(v112) : @"Unknown";
      CFRange v78 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN, ASSOC", +[NSString stringWithFormat:@"Failed to associate with %@, reason %d, WFMacRandomisation : is mac address private ? : <%d>", v77, a4, v106]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        IOPMAssertionID v79 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v78 UTF8String]] UTF8String];
        *(_DWORD *)id v122 = 136446210;
        uint64_t v123 = v79;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", v122, 0xCu);
      }
    }
    if ((int)a4 > -3913)
    {
      if (a4 == -3912)
      {
        uint64_t v86 = sub_100017C48(*(void *)(a1 + 64));
        uint64_t v48 = sub_100123384(a1, v86, 1, 1, v112, 0);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: state %@", "__WiFiDeviceManagerProcessAssociationFailure", sub_100024BE8(*(_DWORD *)(a1 + 3280)) message];
        }
        goto LABEL_172;
      }
      CFArrayRef v80 = v111;
      if (a4 == 82)
      {
        uint64_t v48 = 0;
        goto LABEL_173;
      }
      if (a4 == -100)
      {
        if (sub_1000C8A18(v112)) {
          uint64_t v81 = 3;
        }
        else {
          uint64_t v81 = 1;
        }
        uint64_t v82 = sub_100017C48(*(void *)(a1 + 64));
        uint64_t v48 = sub_100123384(a1, v82, v81, 1, v112, 0);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: state %@", "__WiFiDeviceManagerProcessAssociationFailure", sub_100024BE8(*(_DWORD *)(a1 + 3280)) message];
        }
        CFArrayRef v80 = v111;
        if (v48 == 14)
        {
          sub_10012FE48(a1, v112, 1);
          uint64_t v48 = 14;
LABEL_172:
          CFArrayRef v80 = v111;
        }
LABEL_173:
        if ((value & 1) != 0 || *(uint64_t *)(a1 + 1128) > 1)
        {
          *(void *)(a1 + 1128) = 0;
LABEL_179:
          if (v80) {
            CFRelease(v80);
          }
          goto LABEL_181;
        }
LABEL_175:
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Retrying (WFMacRandomisation : Attempting again for migration? <%d> autojoin association of %@ with retry count %ld", cfa, sub_10001A43C(v112), *(void *)(a1 + 1128));
        }
        *(int64x2_t *)(a1 + 1120) = vaddq_s64(*(int64x2_t *)(a1 + 1120), (int64x2_t)xmmword_1001CB960);
        CFArrayRef v80 = v111;
        goto LABEL_179;
      }
LABEL_152:
      if (a4 == -3905 && v105)
      {
        CFArrayRef v88 = *(const __CFArray **)(a1 + 1112);
        if (v88)
        {
          if (CFArrayGetCount(v88))
          {
            CFArrayRef v80 = v111;
            if (*(void *)(a1 + 1128) < 2uLL) {
              goto LABEL_175;
            }
            goto LABEL_173;
          }
          goto LABEL_172;
        }
      }
      goto LABEL_173;
    }
    CFArrayRef v80 = v111;
    if (a4 != -369033215)
    {
      if (a4 != -369033213) {
        goto LABEL_152;
      }
      sub_1001409B8(a1, @"autoJoinEAPNeedsUserFix", 0, 0);
      if (!v11) {
        goto LABEL_172;
      }
      *(void *)(a1 + 1128) = -1;
      if (CFDictionaryGetValue(v11, @"TLSServerCertificateChain"))
      {
        uint64_t v84 = sub_100017C48(*(void *)(a1 + 64));
        uint64_t v85 = sub_100123384(a1, v84, 2, 2, v112, v11);
LABEL_171:
        uint64_t v48 = v85;
        goto LABEL_172;
      }
      CFArrayRef v92 = (const __CFArray *)CFDictionaryGetValue(v11, @"RequiredProperties");
      CFArrayRef v93 = v92;
      if (!v92) {
        goto LABEL_172;
      }
      v129.length = CFArrayGetCount(v92);
      v129.location = 0;
      if (!CFArrayGetFirstIndexOfValue(v93, v129, @"UserName"))
      {
        v130.length = CFArrayGetCount(v93);
        v130.location = 0;
        FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v93, v130, @"UserPassword");
        CFArrayRef v80 = v111;
        if (!FirstIndexOfValue) {
          goto LABEL_173;
        }
      }
    }
    uint64_t v95 = sub_100017C48(*(void *)(a1 + 64));
    uint64_t v85 = sub_100123384(a1, v95, 3, 1, v112, 0);
    goto LABEL_171;
  }
  uint64_t v48 = (uint64_t)sub_100003818(a1);
LABEL_181:
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s: error %d, state %d\n", "__WiFiDeviceManagerProcessAssociationResult", a4, v48];
  }
  if (_os_feature_enabled_impl())
  {
    if (v48 == 14)
    {
      uint64_t v48 = 14;
    }
    else
    {
      sub_1001409B8(a1, @"autoJoinAssociationFailure", 0, 0);
      sub_10013CCE8(a1, (uint64_t)a2, (int)a4, CWFManagerErrorDomain, @"Association failed");
      uint64_t v48 = 0;
    }
  }
  else
  {
    if (v48 == 12) {
      uint64_t v48 = sub_10013B26C(a1);
    }
    if (v48 <= 5 && ((1 << v48) & 0x23) != 0) {
      sub_1001409B8(a1, @"autoJoinAssociationFailure", 0, 0);
    }
  }
  if (v11) {
    CFRelease(v11);
  }
LABEL_70:
  return v48;
}

void sub_1001353B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t sub_1001353EC(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 3280);
  uint64_t v3 = *(void *)(a1 + 224);
  if (!v3 || !sub_1000DAD30(v3)) {
    return v2;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: notification %@ currentState %@", "__WiFiDeviceManagerProcessUserResponse", *(void *)(a1 + 224), sub_100024BE8(v2) message];
  }
  *(_DWORD *)(a1 + 3280) = 12;
  int v5 = *(const void **)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  switch(sub_1000DAD20((uint64_t)v5))
  {
    case 0u:
      uint64_t v6 = (uint64_t)sub_10013E8B8(a1, (uint64_t)v5);
      goto LABEL_28;
    case 1u:
    case 3u:
      uint64_t v6 = sub_10013E05C(a1, (uint64_t)v5);
      goto LABEL_28;
    case 2u:
      uint64_t v6 = sub_10013E330(a1, (uint64_t)v5);
      goto LABEL_28;
    case 5u:
      uint64_t v2 = *(unsigned int *)(a1 + 3280);
      unsigned int v7 = sub_1000DAD30((uint64_t)v5);
      int v8 = (void *)sub_1000C2DE8((uint64_t)v5);
      unsigned int v10 = (void *)qword_10027DD68;
      if (v8)
      {
        if (qword_10027DD68)
        {
          CFNumberRef v11 = sub_10001A43C(v8);
          [v10 WFLog:3, "%s: network %@ ResponseType=%@", "__WiFiDeviceManagerProcessJoinRecommendationNotification", v11, sub_1000DB1B8(v7) message];
        }
        switch(v7)
        {
          case 1u:
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            CFDateRef v13 = CFDateCreate(kCFAllocatorDefault, Current);
            sub_10001C6A4((uint64_t)v8, @"WiFiNetworkUserAcceptedRecommendationAt", v13);
            if (v13) {
              CFRelease(v13);
            }
            BOOL v14 = sub_10011FC58(a1, v8, 1);
            if (v14) {
              goto LABEL_39;
            }
            break;
          case 2u:
            sub_10013D1C4(a1, v8, 1);
            goto LABEL_27;
          case 3u:
            goto LABEL_27;
          case 5u:
            CFAbsoluteTime v20 = CFAbsoluteTimeGetCurrent();
            CFDateRef v21 = CFDateCreate(kCFAllocatorDefault, v20);
            uint64_t v22 = sub_10005AA28((uint64_t)v21, 5, 0, 0);
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: user muted network, disabling network until %@", "__WiFiDeviceManagerProcessJoinRecommendationNotification", v22 message];
            }
            sub_1000C984C((CFMutableDictionaryRef *)v8, 0, @"JoinRecommendation");
            sub_1000C977C((uint64_t)v8, v22);
            sub_10010C6B4((NSObject **)a1, v8);
            if (v21) {
              CFRelease(v21);
            }
            if (v22) {
              CFRelease(v22);
            }
            break;
          default:
            goto LABEL_29;
        }
        goto LABEL_29;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: network is null" args:__WiFiDeviceManagerProcessJoinRecommendationNotification];
      }
      double v27 = v9;
      goto LABEL_55;
    case 0xAu:
      int v15 = sub_1000DAD30((uint64_t)v5);
      uint64_t v6 = sub_10013EA48(a1, v15);
      goto LABEL_28;
    case 0xCu:
      uint64_t v2 = *(unsigned int *)(a1 + 3280);
      int v16 = sub_1000DAD30((uint64_t)v5);
      uint64_t v17 = sub_1000C2DE8((uint64_t)v5);
      if (v17)
      {
        if (v16 != 3)
        {
          if (v16 != 2)
          {
            if (v16 != 1) {
              goto LABEL_29;
            }
            int v8 = (void *)v17;
            uint64_t v18 = (const void *)sub_100017C48(*(void *)(a1 + 64));
            sub_1000FEA7C(a1, v18, 1019, "__WiFiDeviceManagerProcessAutoHotspotJoinRecommendationNotification", 37002);
            if (sub_1000C8A5C((uint64_t)v8))
            {
              sub_10013ECC8(0, (CFDictionaryRef *)v8);
              goto LABEL_29;
            }
            BOOL v14 = sub_10011FC58(a1, v8, 0);
            if (v14)
            {
LABEL_39:
              uint64_t v6 = sub_100133D50(a1, v8, 0, (uint64_t)v14);
              goto LABEL_28;
            }
            sub_1001409B8(a1, @"autoJoinAssociating", v8, 0);
            if (*(void *)(a1 + 4584))
            {
              if (*(void *)(a1 + 240))
              {
                uint64_t v30 = 0;
                CFDateRef v31 = &v30;
                uint64_t v32 = 0x2020000000;
                uint64_t v33 = 0;
                CLLocationDegrees v24 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v8);
                v31[3] = (uint64_t)v24;
                if (v24)
                {
                  CFRetain((CFTypeRef)a1);
                  double v25 = *(NSObject **)(a1 + 240);
                  block[0] = _NSConcreteStackBlock;
                  block[1] = 3221225472;
                  block[2] = sub_10013F3AC;
                  block[3] = &unk_10023F220;
                  void block[4] = &v30;
                  void block[5] = a1;
                  dispatch_async(v25, block);
                }
                _Block_object_dispose(&v30, 8);
              }
              else
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." args:("__WiFiDeviceManagerProcessAutoHotspotJoinRecommendationNotification")];
                }
              }
            }
            uint64_t v2 = 12;
            goto LABEL_29;
          }
          *(unsigned char *)(a1 + 6987) = 0;
        }
LABEL_27:
        uint64_t v6 = sub_10013B26C(a1);
LABEL_28:
        uint64_t v2 = v6;
        goto LABEL_29;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: network is null" : @"__WiFiDeviceManagerProcessAutoHotspotJoinRecommendationNotification"];
      }
      double v27 = v28;
LABEL_55:
LABEL_29:
      if (v5) {
        CFRelease(v5);
      }
      return v2;
    default:
      uint64_t v2 = *(unsigned int *)(a1 + 3280);
      goto LABEL_29;
  }
}

void sub_100135918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100135978(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 3280);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 6840));
  CFIndex v4 = CFArrayGetCount(*(CFArrayRef *)(a1 + 6912));
  CFIndex v5 = CFArrayGetCount(*(CFArrayRef *)(a1 + 6920));
  CFIndex v6 = CFArrayGetCount(*(CFArrayRef *)(a1 + 6928));
  uint64_t v44 = Count;
  if (!Count) {
    goto LABEL_51;
  }
  uint64_t v7 = v6;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: hotspot interface found device %@", "__WiFiDeviceManagerProcessScannedInstantHotspotDevices", *(void *)(a1 + 6840) message];
  }
  if (v44 < 1)
  {
    CFIndex Count = 0;
    goto LABEL_51;
  }
  unsigned int v43 = v2;
  CFIndex v9 = 0;
  while (1)
  {
    CFIndex Count = (CFIndex)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 6840), v9);
    if (v4 < 1)
    {
LABEL_10:
      int v45 = 1;
    }
    else
    {
      CFIndex v10 = 0;
      while (!objc_msgSend(*(id *)(a1 + 6744), "isEqualHotspotDevices:compareTo:", CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 6912), v10), Count))
      {
        if (v4 == ++v10) {
          goto LABEL_10;
        }
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Hotspot blacklisted: User cancelled \n", "__WiFiDeviceManagerProcessScannedInstantHotspotDevices")];
      }
      int v45 = 0;
    }
    if (v5 < 1)
    {
LABEL_18:
      int v13 = 1;
      if (!v7) {
        goto LABEL_29;
      }
    }
    else
    {
      CFIndex v12 = 0;
      while (!objc_msgSend(*(id *)(a1 + 6744), "isEqualHotspotDevices:compareTo:", CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 6920), v12), Count))
      {
        if (v5 == ++v12) {
          goto LABEL_18;
        }
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: Hotspot blacklisted: Peer declined \n", "__WiFiDeviceManagerProcessScannedInstantHotspotDevices"];
      }
      int v13 = 0;
      if (!v7)
      {
LABEL_29:
        int v21 = 1;
        goto LABEL_35;
      }
    }
    id v15 = [*(id *)(a1 + 6744) getHotspotDeviceName:Count];
    if (v7 < 1) {
      goto LABEL_29;
    }
    int v16 = v15;
    CFIndex v17 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 6928), v17);
      if (ValueAtIndex)
      {
        CFArrayRef v19 = ValueAtIndex;
        CFAbsoluteTime v20 = sub_10001A43C(ValueAtIndex);
        if (CFEqual(v16, v20)) {
          break;
        }
      }
      if (v7 == ++v17) {
        goto LABEL_28;
      }
    }
    CFDateRef v22 = (const __CFDate *)sub_10001E404((uint64_t)v19, @"lastDisconnectTimestampKey");
    if (v22 && (CFDateRef v23 = v22, !sub_1000C7A08((uint64_t)v19)))
    {
      double Current = CFAbsoluteTimeGetCurrent();
      double v27 = Current - CFDateGetAbsoluteTime(v23);
      if (v27 >= 3600.0)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Remove Hotspot from Denylist\n", "__WiFiDeviceManagerProcessScannedInstantHotspotDevices")];
        }
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 6928), v17);
LABEL_28:
        int v21 = 1;
        goto LABEL_35;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Hotspot denylisted due to Deauth on %@\n", "__WiFiDeviceManagerProcessScannedInstantHotspotDevices", v23 message];
      }
      int v21 = 0;
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Hotspot %@ denylisted until user Join\n", "__WiFiDeviceManagerProcessScannedInstantHotspotDevices", sub_10001A43C(v19) message];
      }
      int v21 = 0;
    }
LABEL_35:
    if (![*(id *)(a1 + 6744) isHotspotDeviceSupportADHS:Count])
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, "%s: ADHS not Supported. Ignoring hotspot\n", "__WiFiDeviceManagerProcessScannedInstantHotspotDevices"];
      }
      goto LABEL_41;
    }
    if (v45 & v13 & v21) {
      break;
    }
LABEL_41:
    if (++v9 == v44) {
      goto LABEL_51;
    }
  }
  *(void *)(a1 + 6904) = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 6840), v9);
  if (sub_100125A54(a1))
  {
    id v32 = [*(id *)(a1 + 6744) getHotspotDeviceName:*(void *)(a1 + 6904)];
    uint64_t v33 = sub_10001E404(*(void *)(a1 + 3512), @"SSID_STR");
    if (CFEqual(v32, v33)) {
      *(unsigned char *)(a1 + 6968) = 1;
    }
  }
  if (*(_DWORD *)(a1 + 6804) != 1 || *(unsigned char *)(a1 + 6968))
  {
    uint64_t v29 = sub_100135F30(a1, *(void *)(a1 + 6904));
    goto LABEL_52;
  }
  CFStringRef v34 = (const __CFString *)[*(id *)(a1 + 6744) getHotspotDeviceName:*(void *)(a1 + 6904)];
  if (_os_feature_enabled_impl())
  {
    id v35 = [*(id *)(a1 + 6704) dispatchNotificationWithAskToJoinHotspotRecommendation:v34];
    if (v35)
    {
      id v36 = v35;
      uint64_t v37 = *(unsigned int *)(a1 + 3280);
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Hotspot Recommendation notification failed: %d", "__WiFiDeviceManagerProcessScannedInstantHotspotDevices", v36);
      }
    }
    else
    {
      uint64_t v37 = 14;
    }
LABEL_70:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: State %d", "__WiFiDeviceManagerProcessScannedInstantHotspotDevices", v37);
    }
    if (v37 == 14)
    {
      *(_DWORD *)(a1 + 6716) = 1;
      return 17;
    }
LABEL_51:
    sub_1000FB0D0(a1, 0);
    *(void *)(a1 + 6872) = 0;
    uint64_t v29 = *(unsigned int *)(a1 + 6892);
    goto LABEL_52;
  }
  BOOL v39 = sub_1000C5D34(v34);
  if (v39)
  {
    CFTypeRef v40 = v39;
    uint64_t v41 = sub_100017C48(*(void *)(a1 + 64));
    uint64_t v37 = sub_100123384(a1, v41, 10, 0, v40, 0);
    CFRelease(v40);
    goto LABEL_70;
  }
  uint64_t v29 = v43;
LABEL_52:
  if (_os_feature_enabled_impl() && (v29 & 0xFFFFFFFD) != 0x11) {
    sub_10013F200(a1, (uint64_t)[*(id *)(a1 + 6744) getHotspotDeviceName:Count], 45, (CFErrorDomain)NSPOSIXErrorDomain, @"Failed to process candidate hotspot device");
  }
  return v29;
}

uint64_t sub_100135F30(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  CFNumberRef v11 = &v10;
  uint64_t v12 = 0x3052000000;
  int v13 = sub_100022D18;
  BOOL v14 = sub_100022C14;
  uint64_t v15 = a2;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x3052000000;
  void v9[3] = sub_100022D18;
  v9[4] = sub_100022C14;
  void v9[5] = 0;
  v8[0] = 0;
  v8[1] = v8;
  void v8[2] = 0x3052000000;
  v8[3] = sub_100022D18;
  v8[4] = sub_100022C14;
  void v8[5] = 0;
  if (!*(unsigned char *)(a1 + 7008))
  {
    *(_DWORD *)(a1 + 3280) = 19;
    *(unsigned char *)(a1 + 7008) = 1;
    sub_10013F058((uint64_t *)a1, @"userJoinStarted", 0);
    id v3 = (id)v11[5];
    global_queue = dispatch_get_global_queue(0, 0);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10013F484;
    void v7[3] = &unk_100241988;
    v7[4] = v8;
    v7[5] = &v10;
    void v7[6] = v9;
    v7[7] = a1;
    dispatch_async(global_queue, v7);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 3280);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_1001360D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100136108(uint64_t a1, unsigned char *a2)
{
  id v36 = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: Manager is NULL!", @"__WiFiDeviceManagerIsGeotagged5GhzNetworkPresent"];
    }
    goto LABEL_71;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s:LeechLocation field is NULL!", @"__WiFiDeviceManagerIsGeotagged5GhzNetworkPresent"];
    }
LABEL_71:
    CFStringRef v34 = v33;
LABEL_72:
    id v6 = 0;
LABEL_73:
    LOBYTE(v7) = 1;
    double v12 = 0.0;
    goto LABEL_56;
  }
  if (*(unsigned char *)(a1 + 5609))
  {
    *a2 = 1;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s:Debug mode to not consider geotagged results is enabled!", "__WiFiDeviceManagerIsGeotagged5GhzNetworkPresent")];
    }
    id v6 = 0;
    LOBYTE(v7) = 0;
    double v8 = 0.0;
    goto LABEL_60;
  }
  *(_OWORD *)(a1 + 6124) = 0u;
  *a2 = 0;
  id v6 = sub_100005420(a1);
  if (!v6)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Location is NULL!" : @"__WiFiDeviceManagerIsGeotagged5GhzNetworkPresent"];
    }
    CFStringRef v34 = v9;
    goto LABEL_72;
  }
  id v10 = [v6 timestamp];
  if (!v10)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: location timestamp is nil" : @"__WiFiDeviceManagerIsGeotagged5GhzNetworkPresent"];
    }
    goto LABEL_73;
  }
  [v10 timeIntervalSinceNow];
  double v12 = v11;
  if (v12 <= -120.0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: location is older than 120 secs", "__WiFiDeviceManagerIsGeotagged5GhzNetworkPresent"];
    }
    goto LABEL_55;
  }
  if ((objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "copyHigherBandNetworksAvailableAtLocation:intoArray:", v6, &v36) & 1) == 0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Failed in copying high band networks!", @"__WiFiDeviceManagerIsGeotagged5GhzNetworkPresent"];
    }
LABEL_55:
    LOBYTE(v7) = 1;
    goto LABEL_56;
  }
  *a2 = 1;
  double v8 = 0.0;
  if (!v36 || (uint64_t v13 = (uint64_t)[v36 count], v13 < 1))
  {
    LOBYTE(v7) = 0;
    goto LABEL_60;
  }
  uint64_t v14 = v13;
  uint64_t v15 = 0;
  int v7 = 0;
  do
  {
    id v16 = [v36 objectAtIndexedSubscript:v15];
    if (!v16)
    {
      CFDateRef v23 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CLLocationDegrees v24 = "Network NULL from network store!";
        goto LABEL_25;
      }
LABEL_26:
      double v25 = v22;
      goto LABEL_27;
    }
    uint64_t v17 = v16;
    CFIndex v18 = sub_1000CE630(*(const __CFArray **)(a1 + 3528), (uint64_t)v16);
    if (v18 == -1 || (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3528), v18)) == 0)
    {
      CFIndex v20 = sub_1000CE630(*(const __CFArray **)(a1 + 3536), (uint64_t)v17);
      if (v20 == -1)
      {
        ++*(_DWORD *)(a1 + 6136);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "Considering %@ network from store not in known list!", sub_10001A43C(v17) message];
        }
        CFDictionaryRef v28 = v27;
LABEL_35:
        int v7 = 1;
        goto LABEL_36;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3536), v20);
      if (!ValueAtIndex)
      {
        CFDateRef v23 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          CLLocationDegrees v24 = "knownNetwork NULL!";
LABEL_25:
          [v23 WFLog:4 message:v24];
        }
        goto LABEL_26;
      }
    }
    if (sub_10001BB2C((BOOL)ValueAtIndex))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "In proximity of Geotagged hotspot20 %@ - Ignoring!", sub_10001A43C(ValueAtIndex) message];
      }
      ++*(_DWORD *)(a1 + 6124);
      goto LABEL_36;
    }
    if (!sub_1000066FC((uint64_t)ValueAtIndex))
    {
      if (sub_1000199C0((uint64_t)ValueAtIndex))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "In proximity of Geotagged carplay nw %@ - Ignoring!", sub_10001A43C(ValueAtIndex) message];
        }
        goto LABEL_46;
      }
      if (sub_10001E71C((uint64_t)ValueAtIndex))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "In proximity of Geotagged PH %@ - Ignoring!", sub_10001A43C(ValueAtIndex) message];
        }
LABEL_46:
        double v25 = v29;
LABEL_27:
        goto LABEL_36;
      }
      if (sub_10001EA5C(ValueAtIndex)) {
        ++*(_DWORD *)(a1 + 5860);
      }
      else {
        ++*(_DWORD *)(a1 + 6136);
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "In proximity of Geotagged Network %@", sub_10001A43C(ValueAtIndex) message];
      }
      CFDictionaryRef v28 = v30;
      goto LABEL_35;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "In proximity of Geotagged hotspot %@ - Ignoring!", sub_10001A43C(ValueAtIndex) message];
    }
    ++*(_DWORD *)(a1 + 6128);
LABEL_36:
    ++v15;
  }
  while (v14 != v15);
  if (!v7) {
    goto LABEL_60;
  }
LABEL_56:
  if (v12 <= -0.001) {
    double v8 = v12 * -1000.0;
  }
  else {
    double v8 = 1.0;
  }
LABEL_60:
  *(double *)(a1 + 6152) = v8;
  if (v36) {

  }
  if (v6) {
    CFRelease(v6);
  }
  return v7;
}