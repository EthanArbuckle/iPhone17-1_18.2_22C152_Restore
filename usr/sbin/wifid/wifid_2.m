void sub_1001366D0(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  id v6;
  void *v7;
  unint64_t v8;
  int v9;
  id v10;
  unsigned __int16 v11;
  int v13;
  int v14;
  int v15;
  void *v16;
  uint64_t vars8;

  if (!sub_10012EE58(a1, a2, 0))
  {
    v5 = sub_10000AD1C((uint64_t)a2);
    v6 = [*(id *)(a1 + 6648) reasonsForNetworkInDenyListedState:v5 state:1 timestamps:0 reasonData:0];
    if (v6)
    {
      v7 = v6;
      if ([v6 count])
      {
        v8 = 0;
        v9 = 0;
        do
        {
          v10 = [v7 objectAtIndex:v8];
          if (v10)
          {
            v11 = (unsigned __int16)[v10 unsignedIntegerValue];
            if (v11 <= 0xCu && ((1 << v11) & v9) == 0)
            {
              v9 |= (unsigned __int16)(1 << v11);
              ++*(_WORD *)(a1 + 2 * v11 + 5972);
            }
          }
          ++v8;
        }
        while (v8 < (unint64_t)[v7 count]);
      }
      if ([*(id *)(a1 + 6648) isNetworkDenyListedForAutoJoinDueToTrigDisc:v5 RSSI:0 timestamp:0])
      {
        v13 = sub_1000C6FC0((uint64_t)a2, @"RSSI");
        if (v13 > -96)
        {
          if (v13 > -91)
          {
            if (v13 > -86)
            {
              if (v13 > -81)
              {
                if (v13 > -76)
                {
                  v15 = *(_DWORD *)(a1 + 6140);
                  if (v13 > -71) {
                    v14 = v15 | 0x40;
                  }
                  else {
                    v14 = v15 | 0x20;
                  }
                }
                else
                {
                  v14 = *(_DWORD *)(a1 + 6140) | 0x10;
                }
              }
              else
              {
                v14 = *(_DWORD *)(a1 + 6140) | 8;
              }
            }
            else
            {
              v14 = *(_DWORD *)(a1 + 6140) | 4;
            }
          }
          else
          {
            v14 = *(_DWORD *)(a1 + 6140) | 2;
          }
        }
        else
        {
          v14 = *(_DWORD *)(a1 + 6140) | 1;
        }
        *(_DWORD *)(a1 + 6140) = v14;
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s !__WiFiDeviceManagerIsNetworkSuitableForAutojoin but couldn't get problematicNetwork", "__WiFiDeviceManagerTrackBlacklistedNetworksExcludedFromAutoJoin")
      }
    }
  }
}

uint64_t sub_1001368DC(uint64_t a1, _DWORD *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, "%s: NULL manager", "__WiFiDeviceManagerDisallow24GhzAJScans"];
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: ajTestMode.isCarPlay is ON", @"__WiFiDeviceManagerDisallow24GhzAJScans"];
    }
  }
  if (*(unsigned char *)(a1 + 49))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: ajTestMode.isBTA2DP is ON", "__WiFiDeviceManagerDisallow24GhzAJScans")];
    }
  }
  if (*(unsigned char *)(a1 + 50))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: ajTestMode.isBTSCO is ON", @"__WiFiDeviceManagerDisallow24GhzAJScans"];
    }
  }
  if (a2) {
    *a2 = 0;
  }
  if (!*(unsigned char *)(a1 + 5496) && !*(unsigned char *)(a1 + 48))
  {
    if (*(unsigned char *)(a1 + 7056)
      && *(unsigned char *)(a1 + 5219)
      && *(unsigned __int8 *)(a1 + 5216) <= 0xDu
      && (*(unsigned char *)(a1 + 7057) & 4) != 0)
    {
      if (a2) {
        *a2 = 4;
      }
      v10 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_52;
      }
      v11 = "AJScan: Disallowing 2.4Ghz channels due to Active MIS session";
    }
    else if (*(unsigned char *)(a1 + 36) {
           && *(_DWORD *)(a1 + 3352) == 4
    }
           && (*(_DWORD *)(a1 + 5396) == 102 && (*(unsigned char *)(a1 + 5392) & 2) != 0 || *(unsigned char *)(a1 + 49)))
    {
      if (a2) {
        *a2 = 1;
      }
      v10 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_52;
      }
      v11 = "AJScan: Disallowing 2.4Ghz channels due to BT-A2DP active while driving";
    }
    else
    {
      if (!*(unsigned char *)(a1 + 37)
        || (*(_DWORD *)(a1 + 5396) != 102 || (*(unsigned char *)(a1 + 5392) & 1) == 0) && !*(unsigned char *)(a1 + 50))
      {
        return 0;
      }
      if (a2) {
        *a2 = 2;
      }
      v10 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_52;
      }
      v11 = "AJScan: Disallowing 2.4Ghz channels due to BT-SCO active";
    }
    [v10 WFLog:4 message:v11];
LABEL_52:
    uint64_t v8 = 1;
    goto LABEL_23;
  }
  if (a2) {
    *a2 = 3;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "AJScan: Disallowing 2.4Ghz channels due to CarPlay", v12);
  }
LABEL_22:
  uint64_t v8 = 0;
LABEL_23:
  return v8;
}

uint64_t sub_100136B70(unsigned char *a1, _DWORD *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: NULL manager" arguments:("__WiFiDeviceManagerDisallow5GhzChannelAJScans", 0)];
    }
    uint64_t v2 = 0;
    goto LABEL_16;
  }
  if (a2) {
    *a2 = 0;
  }
  if (a1[7056] && a1[5219] && a1[5216] >= 0xFu && (a1[7057] & 4) != 0 && !a1[1064])
  {
    if (a2) {
      *a2 = 4;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"AJScan: Disallowing 5Ghz channels due to Active 5GHz MIS session"];
    }
    uint64_t v2 = 1;
LABEL_16:
    return v2;
  }
  return 0;
}

uint64_t sub_100136C5C(uint64_t a1, const __CFArray *a2, CFArrayRef theArray, unsigned int a4, uint64_t a5)
{
  if (!theArray || !*(unsigned char *)(a1 + 3414) || CFArrayGetCount(theArray) == 1)
  {
    v10 = sub_100120A54(a2, theArray, 0, a4, 1);
    if (!v10) {
      return 4294963396;
    }
    CFDictionaryRef v11 = v10;
    id v12 = sub_100005420(a1);
    if (v12)
    {
      id v14 = [v12 timestamp];
      if (!v14)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: location timestamp is nil" arguments:("__WiFiDeviceManagerCollectAutoJoinMetrics", nil)];
        }
LABEL_41:
        CFRelease(v12);
LABEL_42:
        *(_DWORD *)(a1 + 192) = 18;
        v37 = (uint64_t *)malloc_type_malloc(0x28uLL, 0x10E0040573E0799uLL);
        if (v37)
        {
          v38 = v37;
          [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinUpdatedWithState:2 interfaceName:sub_100017C48(*(void *)(a1 + 64))];
          uint64_t *v38 = a1;
          v38[1] = 0;
          v38[3] = 0;
          if (CFDictionaryContainsKey(v11, @"SSID_STR")) {
            BOOL v39 = 1;
          }
          else {
            BOOL v39 = CFDictionaryContainsKey(v11, @"SCAN_SSID_LIST") != 0;
          }
          *((unsigned char *)v38 + 32) = v39;
          v40 = (const void *)sub_100017C48(*(void *)(a1 + 64));
          uint64_t v24 = sub_100113508(a1, v40, v11, 0, (uint64_t)sub_100137B18, (uint64_t)v38, (void *)(a1 + 3312), a5);
          if (v24)
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Error initiating scan request: %d", v24);
            }
            free(v38);
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4, @"%s: null scanData", @"__WiFiDeviceManagerScan"];
          }
          uint64_t v24 = 4294963396;
        }
        CFRelease(v11);
        return v24;
      }
      [v14 timeIntervalSinceNow];
      *(void *)(a1 + 6104) = v15;
      [v12 horizontalAccuracy];
      *(void *)(a1 + 6080) = v16;
      [v12 coordinate];
      *(void *)(a1 + 6088) = v17;
      [v12 coordinate];
      *(void *)(a1 + 6096) = v18;
      if (*(double *)(a1 + 6088) != 0.0)
      {
        ++*(_WORD *)(a1 + 6112);
        goto LABEL_13;
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4 message:"Location is Nil"];
      }
      *(_OWORD *)(a1 + 6096) = 0u;
      *(_OWORD *)(a1 + 6080) = 0u;
    }
    ++*(_WORD *)(a1 + 6114);
LABEL_13:
    Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
    if (Mutable)
    {
      v20 = Mutable;
      uint64_t v21 = *(int *)(a1 + 5620);
      if (v21 > 0xC) {
        CFStringRef v22 = @"UnknownScan";
      }
      else {
        CFStringRef v22 = off_100242200[v21];
      }
      if (*(unsigned char *)(a1 + 33) && *(unsigned char *)(a1 + 32)) {
        CFStringRef v25 = @"Scan-{";
      }
      else {
        CFStringRef v25 = @"_Scan-{";
      }
      CFStringAppend(Mutable, v25);
      CFStringAppend(v20, v22);
      uint64_t v26 = *(int *)(a1 + 5628);
      if (v26 <= 3)
      {
        CFStringRef v27 = off_100242268[v26];
        CFStringAppend(v20, @" ");
        CFStringAppend(v20, v27);
      }
      uint64_t v28 = *(int *)(a1 + 5632);
      if (v28 > 2)
      {
        CFStringAppendFormat(v20, 0, @" %dsecs", *(unsigned int *)(a1 + 5640));
      }
      else
      {
        CFStringRef v29 = off_100242288[v28];
        CFStringAppend(v20, @" ");
        CFStringAppend(v20, v29);
      }
      uint64_t v30 = *(int *)(a1 + 192);
      if (v30 <= 0xE)
      {
        CFStringRef v31 = off_1002422A0[v30];
        CFStringAppend(v20, @" ");
        CFStringAppend(v20, v31);
      }
      CFStringAppend(v20, @"}  Expecting-[");
      CFStringAppendFormat(v20, 0, @"%dNW, %dHid, %dHS20, %dHS", *(unsigned int *)(a1 + 6136), *(unsigned int *)(a1 + 6132), *(unsigned int *)(a1 + 6124), *(unsigned int *)(a1 + 6128));
      CFStringAppend(v20, @"] @ ");
      CFStringRef v32 = sub_100012FCC(*(_DWORD *)(a1 + 3352));
      CFStringAppendFormat(v20, 0, @"{%@, %.3f, %.3f, %.1fm, %.1fsecs}]", v32, *(void *)(a1 + 6088), *(void *)(a1 + 6096), *(void *)(a1 + 6080), *(void *)(a1 + 6104));
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "AJScan: %@", v20 message];
      }
      CFRelease(v20);
    }
    uint64_t v34 = *(unsigned int *)(a1 + 5620);
    if (v34 <= 0xC)
    {
      *(_DWORD *)(a1 + 5624) = v34;
      ++*(_WORD *)(a1 + 5616 + 2 * v34 + 252);
      ++*(_DWORD *)(a1 + 5616 + 4 * v34 + 304);
    }
    uint64_t v35 = *(unsigned int *)(a1 + 5632);
    if (v35 <= 2) {
      ++*(_DWORD *)(a1 + 4 * v35 + 5664);
    }
    uint64_t v36 = *(unsigned int *)(a1 + 5636);
    if (v36 <= 0x11) {
      ++*(_DWORD *)(a1 + 4 * v36 + 5676);
    }
    *(_DWORD *)(a1 + 5620) = 13;
    *(void *)(a1 + 5632) = 0x1200000003;
    if (!v12) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Multi channel scan attempt not permitted because AWDL real time mode is active"];
  }
  return 4294963366;
}

uint64_t sub_100137200(_DWORD *a1)
{
  int v1 = a1[821];
  if (v1 == 10)
  {
LABEL_9:
    return sub_100137F3C((uint64_t)a1);
  }
  if (v1 == 6)
  {
    unsigned int v2 = a1[166] + 1;
    a1[166] = v2;
    if (a1[172] == 1 && v2 <= 2)
    {
      return sub_100132DC0();
    }
    a1[166] = 0;
    a1[172] = 2;
    goto LABEL_9;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, @"%s: Something went wrong. Should not come here.", @"__WiFiDeviceManagerScheduleCarPlayRetry"];
  }
  return 1;
}

uint64_t sub_1001372E0(uint64_t a1)
{
  unsigned int v2 = *(const void **)(a1 + 1112);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 1112) = 0;
  }
  *(_DWORD *)(a1 + 1136) = 0;
  if (qword_10027DD68)
  {
    CFStringRef v4 = sub_100024BE8(*(_DWORD *)(a1 + 3284));
    v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: last state: %@, current state: %@, topNetwork %@", "__WiFiDeviceManagerScanMRUNetworkChannels", v4, sub_100024BE8(*(_DWORD *)(a1 + 3280)), *(void *)(a1 + 3376)]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v47 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v5 UTF8String]] UTF8String];
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
  }
  CFArrayRef v6 = *(const __CFArray **)(a1 + 3576);
  if (!v6)
  {
    v37 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_81;
    }
    v41 = "__WiFiDeviceManagerScanMRUNetworkChannels";
    v38 = "%s: NULL known filtered networks";
LABEL_74:
    uint64_t v39 = 3;
LABEL_80:
    [v37 WFLog:v39 message:v38];
    goto LABEL_81;
  }
  CFIndex Count = CFArrayGetCount(v6);
  if (!Count)
  {
    v37 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_81;
    }
    v41 = "__WiFiDeviceManagerScanMRUNetworkChannels";
    v38 = "%s: No known filtered networks";
    goto LABEL_74;
  }
  uint64_t v8 = Count;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null mruNetworkChanList" args:("__WiFiDeviceManagerScanMRUNetworkChannels")];
    }
    uint64_t v31 = 4294963394;
    goto LABEL_78;
  }
  CFArrayRef v10 = Mutable;
  *(_DWORD *)(a1 + 5620) = 1;
  CFMutableStringRef v42 = CFStringCreateMutable(kCFAllocatorDefault, 0);
  if (v8 < 1)
  {
    uint64_t v12 = 8;
    goto LABEL_50;
  }
  CFIndex v11 = 0;
  uint64_t v12 = 8;
  while (1)
  {
    if (CFArrayGetCount(v10) > 3) {
      goto LABEL_50;
    }
    if (*(_DWORD *)(a1 + 3284) == 7)
    {
      *(_DWORD *)(a1 + 5620) = 12;
      ValueAtIndex = *(const void **)(a1 + 3376);
      uint64_t v12 = 9;
      if (!ValueAtIndex) {
        goto LABEL_50;
      }
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3576), v11);
      if (!ValueAtIndex) {
        goto LABEL_47;
      }
    }
    id v14 = sub_1000CB630((uint64_t)ValueAtIndex);
    if (v14)
    {
      uint64_t v15 = v14;
      CFIndex v16 = CFDictionaryGetCount(v14);
      if (!v16)
      {
        CFRelease(v15);
        goto LABEL_47;
      }
      uint64_t v17 = v16;
      v44 = &v42;
      __chkstk_darwin();
      v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      memset(v19, 170, v18);
      CFDictionaryGetKeysAndValues(v15, 0, (const void **)v19);
      if (v17 >= 1)
      {
        uint64_t v43 = 0;
        v20 = v19 - 8;
        do
        {
          if (CFArrayGetCount(v10) > 3) {
            break;
          }
          CFDictionaryRef v21 = *(const __CFDictionary **)&v20[8 * v17];
          if (v21)
          {
            CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v21, @"CHANNEL");
            v23 = CFDictionaryGetValue(*(CFDictionaryRef *)&v20[8 * v17], @"CHANNEL_FLAGS");
            if (Value && v23 != 0)
            {
              *(_DWORD *)buf = 0;
              if (sub_1001368DC(a1, buf))
              {
                unsigned int valuePtr = -1431655766;
                CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
                if (!valuePtr) {
                  goto LABEL_43;
                }
                if (valuePtr <= 0xE)
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:message:3, "%s: Disallowing 2.4Ghz MRU channel %d", "__WiFiDeviceManagerScanMRUNetworkChannels", valuePtr];
                  }
LABEL_36:
                  *(_DWORD *)(a1 + 6168) = *(_DWORD *)buf;
                  goto LABEL_43;
                }
              }
              *(_DWORD *)buf = 0;
              if (!sub_100136B70((unsigned char *)a1, buf)) {
                goto LABEL_37;
              }
              unsigned int valuePtr = -1431655766;
              CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
              if (valuePtr)
              {
                if (valuePtr < 0xF)
                {
LABEL_37:
                  if (sub_100138820(*(const __CFArray **)(a1 + 3288), Value) != 1)
                  {
                    CFArrayAppendValue(v10, *(const void **)&v20[8 * v17]);
                    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 3288), *(const void **)&v20[8 * v17]);
                    if (v42)
                    {
                      if (!v43)
                      {
                        uint64_t v26 = sub_10001A43C(ValueAtIndex);
                        CFStringAppendFormat(v42, 0, @" \"%@\" on channels: ", v26);
                      }
                      CFStringAppendFormat(v42, 0, @"%@ ", Value);
                    }
                    ++v43;
                  }
                  goto LABEL_43;
                }
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:message:3, "%s: Disallowing 5Ghz MRU channel %d", "__WiFiDeviceManagerScanMRUNetworkChannels", valuePtr];
                }
                goto LABEL_36;
              }
            }
          }
LABEL_43:
          --v17;
        }
        while ((unint64_t)(v17 + 1) > 1);
      }
      CFRelease(v15);
      if (*(_DWORD *)(a1 + 3284) == 7) {
        break;
      }
    }
LABEL_47:
    if (++v11 == v8) {
      goto LABEL_50;
    }
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Top Networks MRU channels: %@", v42 message];
  }
LABEL_50:
  if (!CFArrayGetCount(v10))
  {
    CFMutableStringRef v33 = v42;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: No MRU channels", "__WiFiDeviceManagerScanMRUNetworkChannels");
    }
    if (v33) {
      CFRelease(v33);
    }
    CFRelease(v10);
    *(_DWORD *)(a1 + 3284) = v12;
    return sub_1001388AC(a1);
  }
  CFMutableStringRef v27 = v42;
  if (v42)
  {
    if (qword_10027DD68)
    {
      CFStringRef v29 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN, SCAN", +[NSString stringWithFormat:@"Scanning(%s) for MRU Networks", "Active"]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v29 UTF8String]] UTF8String];
        *(_DWORD *)buf = 136446210;
        v47 = v30;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      }
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v47 = "Active";
      __int16 v48 = 2112;
      CFMutableStringRef v49 = v27;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "{AUTOJOIN, SCAN} Scanning(%s) for MRU Networks: %@", buf, 0x16u);
    }
    CFRelease(v27);
  }
  uint64_t v31 = sub_100136C5C(a1, *(const __CFArray **)(a1 + 3552), v10, 0, 2);
  CFRelease(v10);
  if (v31)
  {
LABEL_78:
    v37 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      v41 = (const char *)v31;
      v38 = "multi-stage auto-join: Error scanning for MRU Networks, err=%d";
      uint64_t v39 = 4;
      goto LABEL_80;
    }
LABEL_81:
    return sub_1001388AC(a1);
  }
  *(_DWORD *)(a1 + 3284) = v12;
  return v12;
}

void sub_100137B18(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v9 = *a6;
  uint64_t v10 = sub_10006B4B0(*(void *)(*a6 + 64));
  free(a6);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Auto join scan completed (%d) with current state: %@", a5, sub_100024BE8(*(_DWORD *)(v9 + 3280)) message];
  }
  if (v10 == *(void *)(v9 + 3312))
  {
    sub_100137D44(v9, a3);
    *(void *)(v9 + 1096) = a3;
    *(_DWORD *)(v9 + 1088) = a5;
    unsigned int v12 = *(_DWORD *)(v9 + 3280);
    if (v12 <= 0xB)
    {
      if (((1 << v12) & 0xFDC) != 0)
      {
        if (a3 && CFArrayGetCount(a3))
        {
          if (CFArrayGetCount(a3) >= 1)
          {
            CFIndex v13 = 0;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(a3, v13);
              CFArrayRef v15 = *(const __CFArray **)(v9 + 3536);
              v23.length = CFArrayGetCount(v15);
              v23.location = 0;
              LODWORD(v15) = CFArrayContainsValue(v15, v23, ValueAtIndex);
              CFArrayRef v16 = *(const __CFArray **)(v9 + 3528);
              v24.length = CFArrayGetCount(v16);
              v24.location = 0;
              if (v15 | CFArrayContainsValue(v16, v24, ValueAtIndex))
              {
                uint64_t v17 = sub_10001A43C(ValueAtIndex);
                if (v17)
                {
                  size_t v18 = v17;
                  CFStringRef v19 = (const __CFString *)sub_100016E20(*(void *)(v9 + 64));
                  sub_100050E54(v9, v19, v18);
                }
              }
              ++v13;
            }
            while (v13 < CFArrayGetCount(a3));
          }
          v20 = *(__CFArray **)(v9 + 1104);
          v25.length = CFArrayGetCount(a3);
          v25.location = 0;
          CFArrayAppendArray(v20, a3, v25);
        }
        goto LABEL_21;
      }
      if (v12 == 5) {
LABEL_21:
      }
        sub_1000FB1B0(v9);
    }
    *(void *)(v9 + 1096) = 0;
    return;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Ignorning old request.  CurrentCommand=%lld PendingCommand=%lld", v10, *(void *)(v9 + 3312));
  }
}

void sub_100137D44(uint64_t a1, CFArrayRef theArray)
{
  if (!theArray) {
    return;
  }
  if (a1)
  {
    if (*(void *)(a1 + 6056))
    {
      if (*(void *)(a1 + 6064))
      {
        if (CFArrayGetCount(theArray) >= 1)
        {
          CFIndex v4 = 0;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
            CFArrayRef v6 = sub_10001A43C(ValueAtIndex);
            if (v6) {
              CFSetAddValue(*(CFMutableSetRef *)(a1 + 6056), v6);
            }
            ++v4;
          }
          while (v4 < CFArrayGetCount(theArray));
        }
        CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        if (sub_100122284(a1, theArray, Mutable) && CFArrayGetCount(Mutable) >= 1)
        {
          CFIndex v8 = 0;
          do
          {
            uint64_t v9 = CFArrayGetValueAtIndex(Mutable, v8);
            uint64_t v10 = sub_10001A43C(v9);
            if (v10) {
              CFSetAddValue(*(CFMutableSetRef *)(a1 + 6064), v10);
            }
            ++v8;
          }
          while (v8 < CFArrayGetCount(Mutable));
        }
        if (Mutable)
        {
          CFRelease(Mutable);
        }
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: null knownSSIDsScannedThisSession.", @"__WiFiDeviceManagerTrackScanResultsForAWDMetrics"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null scannedSSIDsThisSession."];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: null ajMetrics.", @"__WiFiDeviceManagerTrackScanResultsForAWDMetrics"];
    }
  }
}

uint64_t sub_100137F3C(uint64_t a1)
{
  unsigned int v2 = *(const void **)(a1 + 1112);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 1112) = 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: Couldn't allocate channelList", @"__WiFiDeviceManagerScanCarPlayRemainingChannels"];
    }
    uint64_t v11 = 4294963394;
    goto LABEL_89;
  }
  CFMutableArrayRef v4 = Mutable;
  *(_DWORD *)(a1 + 3284) = 10;
  int v5 = *(_DWORD *)(a1 + 688);
  if (v5 == 4)
  {
    if (*(unsigned char *)(a1 + 672)) {
      goto LABEL_18;
    }
LABEL_15:
    *(_DWORD *)(a1 + 688) = 0;
LABEL_33:
    CFRelease(v4);
    goto LABEL_92;
  }
  if (v5 == 3) {
    goto LABEL_15;
  }
  if (v5 != 2)
  {
    LODWORD(v12) = 0;
    goto LABEL_23;
  }
  int v6 = *(_DWORD *)(a1 + 668);
  if (v6 < 36)
  {
    if (!v6)
    {
      LODWORD(v12) = 0;
      goto LABEL_21;
    }
LABEL_18:
    LODWORD(v12) = 0;
    int v13 = 3;
LABEL_22:
    *(_DWORD *)(a1 + 688) = v13;
    goto LABEL_23;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 664);
  *(_DWORD *)(a1 + 664) = v7 + 1;
  if (v7 > 1)
  {
    LODWORD(v12) = 0;
    *(_DWORD *)(a1 + 664) = 0;
LABEL_21:
    int v13 = 4;
    goto LABEL_22;
  }
  if (v6 > 0x90)
  {
    BOOL v8 = (v6 & 0x80000007) == 5;
    int v9 = 4;
  }
  else
  {
    BOOL v8 = (v6 & 7) == 0;
    int v9 = -4;
  }
  if (!v8) {
    int v9 = -v9;
  }
  uint64_t v12 = (v6 + v9);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: CarPlay channel - orginal(%d) adjacent(%d)", "__WiFiDeviceManagerScanCarPlayRemainingChannels", *(unsigned int *)(a1 + 668), v12);
  }
LABEL_23:
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: CarPlay scan state %d" args:((id)qword_10027DD68), @"__WiFiDeviceManagerScanCarPlayRemainingChannels", *(unsigned int *)(a1 + 688), nil];
  }
  CFMutableArrayRef v15 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!v15)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: Couldn't allocate suppChannelList", @"__WiFiDeviceManagerScanCarPlayRemainingChannels"];
    }
    goto LABEL_33;
  }
  CFArrayRef v16 = v15;
  uint64_t v17 = *(void *)(a1 + 64);
  size_t v18 = (const void *)sub_100017C48(v17);
  uint64_t v19 = sub_10000DE34(v17, v18, v16);
  if (v19)
  {
    uint64_t v11 = v19;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Couldn't get supported channels" : @"__WiFiDeviceManagerScanCarPlayRemainingChannels"];
    }
    goto LABEL_88;
  }
  CFMutableStringRef v22 = CFStringCreateMutable(kCFAllocatorDefault, 0);
  int v57 = 0;
  int v23 = *(_DWORD *)(a1 + 688);
  if (v23 == 4)
  {
LABEL_37:
    if (sub_100136B70((unsigned char *)a1, &v57))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: Disallowing 5Ghz channel", "__WiFiDeviceManagerScanCarPlayRemainingChannels"];
      }
      sub_1001302EC(a1);
LABEL_45:
      uint64_t v11 = 0;
      goto LABEL_86;
    }
    goto LABEL_46;
  }
  if (v23 != 3)
  {
    if (v23 != 2) {
      goto LABEL_46;
    }
    goto LABEL_37;
  }
  int v25 = sub_1001368DC(a1, &v57);
  *(_DWORD *)(a1 + 6168) = v57;
  if (v25)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Disallowing 2Ghz channel", "__WiFiDeviceManagerScanCarPlayRemainingChannels")];
    }
    goto LABEL_45;
  }
LABEL_46:
  theString = v22;
  if (CFArrayGetCount(v16) >= 1)
  {
    for (CFIndex i = 0; i < CFArrayGetCount(v16); ++i)
    {
      int valuePtr = -1431655766;
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, i);
      if (ValueAtIndex)
      {
        CFDictionaryRef v29 = ValueAtIndex;
        CFNumberRef Value = (void *)CFDictionaryGetValue(ValueAtIndex, @"SUP_CHANNEL");
        uint64_t v31 = (void *)CFDictionaryGetValue(v29, @"SUP_CHANNEL_FLAGS");
        if (Value)
        {
          if (v31)
          {
            *(_OWORD *)keys = *(_OWORD *)&off_100241B28;
            values[0] = Value;
            values[1] = v31;
            CFDictionaryRef v32 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            if (!v32)
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4, @"%s: Couldn't allocate channelEntry", @"__WiFiDeviceManagerScanCarPlayRemainingChannels"];
              }
              uint64_t v11 = 4294963394;
LABEL_85:
              CFMutableStringRef v22 = theString;
              goto LABEL_86;
            }
            CFDictionaryRef v33 = v32;
            CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr);
            int v34 = *(_DWORD *)(a1 + 688);
            if (v34 == 4)
            {
              if (valuePtr >= 36) {
                goto LABEL_65;
              }
            }
            else
            {
              if (v34 == 2)
              {
                if (v12 == valuePtr)
                {
                  if (theString) {
                    CFStringAppendFormat(theString, 0, @"%@ ", Value);
                  }
                  CFArrayAppendValue(v4, v33);
                  break;
                }
                goto LABEL_68;
              }
              if (v34 == 3 && valuePtr <= 14)
              {
LABEL_65:
                if (theString) {
                  CFStringAppendFormat(theString, 0, @"%@ ", Value);
                }
                CFArrayAppendValue(v4, v33);
              }
            }
LABEL_68:
            CFRelease(v33);
            continue;
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"%s: Null channel flag" args:("__WiFiDeviceManagerScanCarPlayRemainingChannels")];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"%s: Null channel number" args:("__WiFiDeviceManagerScanCarPlayRemainingChannels")];
          }
        }
      }
    }
  }
  uint64_t v11 = sub_100136C5C(a1, *(const __CFArray **)(a1 + 3552), v4, 0x28u, 24);
  if (v11) {
    goto LABEL_85;
  }
  CFMutableStringRef v22 = theString;
  if (theString)
  {
    if (qword_10027DD68)
    {
      v37 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN, SCAN", +[NSString stringWithFormat:@"Scanning(%s) CarPlay remaining channels: %@", "Active", theString]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        v38 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v37 UTF8String]] UTF8String];
        LODWORD(keys[0]) = 136446210;
        *(void **)((char *)keys + 4) = (void *)v38;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)keys, 0xCu);
      }
    }
    uint64_t v11 = 0;
  }
  else
  {
LABEL_86:
    if (!v22) {
      goto LABEL_88;
    }
  }
  CFRelease(v22);
LABEL_88:
  CFRelease(v16);
  CFRelease(v4);
  if (v11)
  {
LABEL_89:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, @"CarPlay multi-stage auto-join: Error scanning remaining channels, err=%d", v11];
    }
    goto LABEL_94;
  }
LABEL_92:
  if (*(_DWORD *)(a1 + 688)) {
    return 10;
  }
LABEL_94:
  *(_DWORD *)(a1 + 688) = 0;
  double v43 = *(double *)(a1 + 680);
  double v44 = 0.5;
  if (v43 == 0.0 || (v45 = v43 + v43, double v44 = 4.0, v45 > 4.0)) {
    double v45 = v44;
  }
  *(double *)(a1 + 680) = v45;
  double v46 = v45 - v45 * 0.1;
  double v47 = v45 + v45 * 0.1;
  uint32_t v48 = arc4random();
  double v49 = v46 + (double)(v48 + ((v48 / 0x7FFFFFFF) | ((v48 / 0x7FFFFFFF) << 31))) / 2147483650.0 * (v47 - v46);
  v50 = *(NSObject **)(a1 + 312);
  dispatch_time_t v51 = dispatch_time(0, (uint64_t)(v49 * 1000000000.0));
  dispatch_source_set_timer(v50, v51, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (qword_10027DD68)
  {
    v53 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: Performing next automatic assocation in %.3f(%.3f) seconds", "__WiFiDeviceManagerScanCarPlayRemainingChannels", *(void *)&v49, *(void *)(a1 + 680)]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      v54 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v53 UTF8String]] UTF8String];
      LODWORD(keys[0]) = 136446210;
      *(void **)((char *)keys + 4) = (void *)v54;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)keys, 0xCu);
    }
  }
  return 1;
}

uint64_t sub_100138820(const __CFArray *a1, const void *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v6);
    CFNumberRef Value = CFDictionaryGetValue(ValueAtIndex, @"CHANNEL");
    if (CFEqual(a2, Value)) {
      break;
    }
    if (v5 == ++v6) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1001388AC(uint64_t a1)
{
  unsigned int v2 = *(const void **)(a1 + 1112);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 1112) = 0;
  }
  *(_DWORD *)(a1 + 1136) = 0;
  if (qword_10027DD68)
  {
    CFStringRef v4 = sub_100024BE8(*(_DWORD *)(a1 + 3284));
    CFIndex v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: last state: %@, current state: %@, topNetwork %@", "__WiFiDeviceManagerScanRemainingChannels", v4, sub_100024BE8(*(_DWORD *)(a1 + 3280)), *(void *)(a1 + 3376)]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v5 UTF8String]] UTF8String];
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
  }
  int v6 = 10;
  if (*(_DWORD *)(a1 + 3284) == 9)
  {
    if (*(void *)(a1 + 3376)) {
      int v6 = 11;
    }
    else {
      int v6 = 10;
    }
  }
  unsigned int v39 = v6;
  *(_DWORD *)(a1 + 3284) = v6;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableArrayRef v8 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  int v9 = v8;
  if (Mutable) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Failed to create remaining or supp ch list array", "__WiFiDeviceManagerScanRemainingChannels"];
    }
    uint64_t v32 = 4294963394;
LABEL_52:
    char v33 = 1;
    if (!v9) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = (const void *)sub_100017C48(v11);
  uint64_t v13 = sub_10000DE34(v11, v12, v9);
  if (v13)
  {
    uint64_t v32 = v13;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s :Device failed to return supported channels." :@"__WiFiDeviceManagerScanRemainingChannels"];
    }
  }
  else
  {
    if (CFArrayGetCount(v9))
    {
      theArray = Mutable;
      id v14 = CFStringCreateMutable(kCFAllocatorDefault, 0);
      int v42 = 0;
      int v15 = sub_1001368DC(a1, &v42);
      *(_DWORD *)(a1 + 6168) = v42;
      int v41 = sub_100136B70((unsigned char *)a1, &v42);
      if (qword_10027DD68)
      {
        uint64_t v17 = " in 5Ghz only.";
        if (!v15) {
          uint64_t v17 = ".";
        }
        size_t v18 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN, SCAN", +[NSString stringWithFormat:@"multi-stage auto-join: Attempting to scan remaining channels%s", v17]) UTF8String]);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v19 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v18 UTF8String]] UTF8String];
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v19;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        }
      }
      if (CFArrayGetCount(v9) >= 1)
      {
        for (CFIndex i = 0; i < CFArrayGetCount(v9); ++i)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, i);
          if (ValueAtIndex)
          {
            CFDictionaryRef v22 = ValueAtIndex;
            CFNumberRef Value = (void *)CFDictionaryGetValue(ValueAtIndex, @"SUP_CHANNEL");
            CFRange v24 = (void *)CFDictionaryGetValue(v22, @"SUP_CHANNEL_FLAGS");
            if (Value)
            {
              int v25 = v24;
              if (v24)
              {
                if (sub_100138820(*(const __CFArray **)(a1 + 3288), Value) != 1)
                {
                  if (!v15
                    || (*(_DWORD *)buf = 0, !CFNumberGetValue((CFNumberRef)v25, kCFNumberSInt32Type, buf))
                    || (buf[0] & 8) == 0)
                  {
                    if (!v41
                      || (*(_DWORD *)buf = -1431655766,
                          CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, buf),
                          *(_DWORD *)buf)
                      && *(_DWORD *)buf <= 0xEu)
                    {
                      *(_OWORD *)buf = *(_OWORD *)&off_100241B28;
                      values[0] = Value;
                      values[1] = v25;
                      CFDictionaryRef v26 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)buf, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                      if (v26)
                      {
                        CFDictionaryRef v27 = v26;
                        CFArrayAppendValue(theArray, v26);
                        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 3288), v27);
                        CFRelease(v27);
                        if (v14) {
                          CFStringAppendFormat(v14, 0, @"%@ ", Value);
                        }
                      }
                    }
                  }
                }
                continue;
              }
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:3 message:@"%s: Null channel flag" args:("__WiFiDeviceManagerScanRemainingChannels", NULL)];
              }
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:3 message:@"%s: Null channel number" :@"__WiFiDeviceManagerScanRemainingChannels"];
              }
            }
          }
        }
      }
      sub_1001302EC(a1);
      CFMutableArrayRef Mutable = theArray;
      if (v14)
      {
        if (qword_10027DD68)
        {
          uint64_t v30 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN, SCAN", +[NSString stringWithFormat:@"Scanning(%s) remaining channels: %@", "Active", v14]) UTF8String]);
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v31 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v30 UTF8String]] UTF8String];
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = v31;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          }
        }
      }
      if (CFArrayGetCount(theArray))
      {
        *(_DWORD *)(a1 + 5620) = 2;
        uint64_t v32 = sub_100136C5C(a1, *(const __CFArray **)(a1 + 3552), theArray, 0, 3);
        if (!v14) {
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v32 = 4294963394;
        if (!v14) {
          goto LABEL_52;
        }
      }
      CFRelease(v14);
      goto LABEL_52;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: Empty supported channels." arguments:@"__WiFiDeviceManagerScanRemainingChannels"];
    }
    uint64_t v32 = 0;
  }
  char v33 = 0;
LABEL_53:
  CFRelease(v9);
LABEL_54:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v32)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "multi-stage auto-join: Error scanning remaining channels, err=%d", v32);
    }
    return sub_10000C060(a1, v32);
  }
  else
  {
    uint64_t result = v39;
    if ((v33 & 1) == 0)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: Fallback to all channel scans" : @"__WiFiDeviceManagerScanRemainingChannels"];
      }
      return sub_100133720(a1);
    }
  }
  return result;
}

id sub_1001390A0(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFDictionaryRef v3 = (const __CFDictionary *)(*(uint64_t (**)(uint64_t, void))(a1 + 4696))(a1, *(void *)(a1 + 4704));
  if (!v3 || (CFDictionaryRef v4 = v3, !CFDictionaryGetCount(v3)))
  {
    return 0;
  }
  context = v2;
  id v5 = [(__CFDictionary *)v4 allKeys];
  id v24 = [v5 mutableCopy];
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id obj = v5;
  id v6 = [v5 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v27;
    do
    {
      for (CFIndex i = 0; i != v7; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v27 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void *)(*((void *)&v26 + 1) + 8 * i);
        id v11 = [(__CFDictionary *)v4 objectForKey:v10];
        id v12 = [v11 objectForKey:@"type"];
        if (v12)
        {
          uint64_t v13 = v12;
          id v14 = [v11 objectForKey:@"notificationType"];
          if (v14)
          {
            int v15 = v14;
            CFArrayRef v16 = (_UNKNOWN **)[v11 objectForKey:@"count"];
            id v17 = [v13 unsignedIntValue];
            id v18 = [v15 unsignedIntValue];
            id v19 = [v11 objectForKey:@"timestamp"];
            if (v19)
            {
              id v20 = v19;
              if (v16) {
                CFDictionaryRef v21 = v16;
              }
              else {
                CFDictionaryRef v21 = &off_100263370;
              }
              if (+[WiFiUserNotificationManager canRepromptForNotificationType:blacklistType:atDate:count:](WiFiUserNotificationManager, "canRepromptForNotificationType:blacklistType:atDate:count:", v18, v17, v20, [v21 integerValue]))
              {
                [v24 removeObject:v10];
              }
            }
          }
        }
      }
      id v7 = [obj countByEnumeratingWithState:&v26 objects:v30 count:16];
    }
    while (v7);
  }
  return v24;
}

void sub_1001392E4(uint64_t a1)
{
  if (*(void *)(a1 + 376))
  {
    if (*(void *)(a1 + 392))
    {
      if (*(double *)(a1 + 384) != 0.0)
      {
        CFAbsoluteTime valuePtr = CFAbsoluteTimeGetCurrent();
        CFNumberRef v2 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
        if (v2)
        {
          CFNumberRef v3 = v2;
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 376), v2);
          CFRelease(v3);
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: there have been %ld auto-join attempts in the last %f seconds", "__WiFiDeviceManagerUpdateScanThrottleCounter", CFArrayGetCount(*(CFArrayRef *)(a1 + 376)), *(void *)(a1 + 384));
          }
        }
      }
    }
  }
}

void sub_1001393BC(uint64_t a1, const __CFArray *a2)
{
  if (a2)
  {
    CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
    if (Mutable)
    {
      id v5 = Mutable;
      CFIndex Count = CFArrayGetCount(a2);
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
          if (ValueAtIndex)
          {
            CFStringRef v9 = (const __CFString *)sub_10001A43C(ValueAtIndex);
            if (i >= Count - 1) {
              CFStringAppend(v5, v9);
            }
            else {
              CFStringAppendFormat(v5, 0, @"%@, ", v9);
            }
          }
        }
      }
      if (qword_10027DD68)
      {
        id v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN, SCAN", +[NSString stringWithFormat:@"%@ found %d networks", sub_100024BE8(*(_DWORD *)(a1 + 3280)), Count]) UTF8String]);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          id v17 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v11 UTF8String]] UTF8String];
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        }
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v12 = sub_100024BE8(*(_DWORD *)(a1 + 3280));
        *(_DWORD *)buf = 138412546;
        id v17 = (const char *)v12;
        __int16 v18 = 2112;
        id v19 = v5;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "{AUTOJOIN, SCAN} %@ found: %@", buf, 0x16u);
      }
      CFRelease(v5);
      return;
    }
    id v14 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      int v15 = "logMessage is Null!";
      goto LABEL_20;
    }
  }
  else
  {
    id v14 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      int v15 = "ScanResults is Null!";
LABEL_20:
      [v14 WFLog:4 message:v15];
    }
  }
}

void sub_1001396A8(uint64_t a1, const void *a2, __CFString *a3)
{
  if (a1 && a2)
  {
    if (sub_10001EB5C(a2)) {
      id v5 = sub_10001E404((uint64_t)a2, @"BSSID");
    }
    else {
      id v5 = sub_10001A43C(a2);
    }
    CFStringAppendFormat(a3, 0, @"%@", v5);
    if (sub_10001FC1C((uint64_t)a2)) {
      CFStringAppend(a3, @"(E)");
    }
    if (sub_1000C66D0((BOOL)a2)) {
      CFStringAppend(a3, @"(WEP)");
    }
    if (sub_10001ED04((uint64_t)a2)) {
      CFStringAppend(a3, @"(W)");
    }
    if (sub_1000C6FE8((const __CFDictionary *)a2)) {
      CFStringAppend(a3, @"(SAE)");
    }
    CFStringAppendFormat(a3, 0, @", ");
  }
}

void sub_1001397BC(uint64_t a1, const void *a2, __CFString *a3)
{
  if (a1 && a2)
  {
    if (sub_10001EB5C(a2)) {
      CFStringRef v6 = @"*";
    }
    else {
      CFStringRef v6 = (const __CFString *)sub_10001A43C(a2);
    }
    CFStringAppend(a3, v6);
    CFStringAppendFormat(a3, 0, @"-");
    id v7 = sub_10001E404((uint64_t)a2, @"BSSID");
    CFStringAppendFormat(a3, 0, @"%@", v7);
    CFStringAppendFormat(a3, 0, @"-");
    uint64_t v8 = sub_100024070((uint64_t)a2);
    CFStringAppendFormat(a3, 0, @"( C:%@, "), v8;
    CFNumberRef v9 = sub_1000C6FC0((uint64_t)a2, @"RSSI");
    CFStringAppendFormat(a3, 0, @"R:%ld, ", v9);
    CFNumberRef v10 = sub_1000C6FC0((uint64_t)a2, @"AGE");
    CFStringAppendFormat(a3, 0, @"A:%ld,", v10);
    if (sub_10001BB2C((BOOL)a2))
    {
      BOOL v11 = sub_1000C90F4((uint64_t)a2);
      CFStringAppend(a3, @",");
      if (v11) {
        CFStringRef v12 = @" HS2.0-h";
      }
      else {
        CFStringRef v12 = @" HS2.0-r";
      }
      CFStringAppend(a3, v12);
    }
    if (sub_10013C0D4(a1, a2))
    {
      CFStringAppend(a3, @",");
      CFStringAppend(a3, @" HS");
    }
    if (sub_10010CB30(a1, a2))
    {
      CFStringAppend(a3, @",");
      CFStringAppend(a3, @" Cap");
    }
    if (sub_1000199C0((uint64_t)a2))
    {
      CFStringAppend(a3, @",");
      CFStringAppend(a3, @" Car");
    }
    if (sub_10001A680((uint64_t)a2))
    {
      CFStringAppend(a3, @",");
      CFStringAppend(a3, @" Ad");
    }
    if (sub_10001FC1C((uint64_t)a2))
    {
      CFStringAppend(a3, @",");
      CFStringAppend(a3, @" EAP");
    }
    if (sub_1000C66D0((BOOL)a2))
    {
      CFStringAppend(a3, @",");
      CFStringAppend(a3, @" WEP");
    }
    if (sub_10001ED04((uint64_t)a2))
    {
      CFStringAppend(a3, @",");
      CFStringAppend(a3, @" WPA");
    }
    if (sub_1000C6FE8((const __CFDictionary *)a2))
    {
      CFStringAppend(a3, @",");
      CFStringAppend(a3, @" SAE");
    }
    CFStringAppendFormat(a3, 0, @""));
  }
}

void sub_100139ACC(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: manager object is NULL", @"__WiFiDeviceManagerPrepareDeferredNetworkList"];
    }
    goto LABEL_88;
  }
  if (!*(void *)(a1 + 1112))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: scan candidates is NULL" : @"__WiFiDeviceManagerPrepareDeferredNetworkList"];
    }
    goto LABEL_88;
  }
  if (!*(void *)(a1 + 3568))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: deferred network list is NULL" args:("__WiFiDeviceManagerPrepareDeferredNetworkList")];
    }
    goto LABEL_88;
  }
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s  logMessage is NULL", "__WiFiDeviceManagerPrepareDeferredNetworkList"];
    }
LABEL_88:
    return;
  }
  CFNumberRef v3 = Mutable;
  if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 1112))) {
    goto LABEL_77;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 3624));
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 1112)) < 1) {
    goto LABEL_77;
  }
  CFIndex v4 = 0;
  uint64_t v30 = 0;
  id v5 = 0;
  int v6 = 1;
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1112), v4);
    if (!ValueAtIndex) {
      goto LABEL_59;
    }
    uint64_t v8 = ValueAtIndex;
    if (sub_1000199C0((uint64_t)ValueAtIndex))
    {
      if (*(_DWORD *)(a1 + 5520) == 1) {
        goto LABEL_59;
      }
    }
    CFNumberRef v9 = *(const void **)(a1 + 3512);
    if (v9)
    {
      if (CFEqual(v9, v8)
        && !sub_100072AF8(*(void *)(a1 + 64))
        && ![+[WiFiUserInteractionMonitor sharedInstance] isCellularDataUsable])
      {
        goto LABEL_59;
      }
    }
    if (sub_1000D1FFC((uint64_t)v8)
      && (sub_10001FD04((uint64_t)v8)
       || sub_10001E404((uint64_t)v8, @"WiFiNetworkAttributeIsPublic") == kCFBooleanTrue))
    {
      char v10 = 0;
      char v11 = 1;
    }
    else
    {
      char v11 = 0;
      char v10 = 1;
    }
    CFStringRef v12 = *(const void **)(a1 + 3512);
    if (v12
      && (!CFEqual(v12, v8) || sub_10010BF80(a1, v8))
      && (uint64_t v13 = *(const void **)(a1 + 3512)) != 0
      && CFEqual(v13, v8))
    {
      unsigned int v14 = 0;
    }
    else
    {
      unsigned int v14 = [[*(id *)(a1 + 3656) canDeferNetwork:v8 withUsageRank:sub_100105E08(a1, v8) andMotionState:*(unsigned int *)(a1 + 3352)];
      v30 += v14;
      if (v14) {
        goto LABEL_30;
      }
    }
    if (Count < 1)
    {
LABEL_30:
      if (v14) {
        goto LABEL_31;
      }
      goto LABEL_33;
    }
    if (sub_10001BB2C((BOOL)v8))
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 3560), v8);
      char v15 = 0;
      ++v30;
      goto LABEL_32;
    }
LABEL_33:
    if (!sub_10013C0D4(a1, v8))
    {
      if ((v11 ^ 1)) {
        goto LABEL_59;
      }
      ++v30;
LABEL_31:
      char v15 = 1;
LABEL_32:
      char v16 = 1;
      goto LABEL_42;
    }
    CFArrayRef v17 = *(const __CFArray **)(a1 + 3568);
    v32.length = CFArrayGetCount(v17);
    v32.location = 0;
    if (CFArrayGetFirstIndexOfValue(v17, v32, v8) == -1)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 3568), v8);
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: duplicate network %@ found, skipping.", "__WiFiDeviceManagerPrepareDeferredNetworkList", sub_10001A43C(v8) message];
      }
    }
    char v16 = 0;
    ++v30;
    char v15 = 1;
LABEL_42:
    id v19 = sub_10001A43C(v8);
    if (v6)
    {
      if (v19) {
        CFStringRef v20 = (const __CFString *)sub_10001A43C(v8);
      }
      else {
        CFStringRef v20 = @"(null)";
      }
      CFStringAppend(v3, v20);
      if ((v15 & 1) == 0)
      {
LABEL_49:
        CFStringAppend(v3, @"(");
        CFStringAppend(v3, @"HS2.0");
        CFStringAppend(v3, @""));
      }
    }
    else
    {
      CFStringAppendFormat(v3, 0, @", %@", v19);
      if ((v15 & 1) == 0) {
        goto LABEL_49;
      }
    }
    if ((v16 & 1) == 0)
    {
      CFStringAppend(v3, @"(");
      CFStringAppend(v3, @"HS");
      CFStringAppend(v3, @""));
      if (!v14) {
        goto LABEL_53;
      }
LABEL_52:
      CFStringAppend(v3, @"(");
      CFStringAppend(v3, @"time-defer");
      CFStringAppend(v3, @""));
      goto LABEL_53;
    }
    if (v14) {
      goto LABEL_52;
    }
LABEL_53:
    if ((v10 & 1) == 0)
    {
      CFStringAppend(v3, @"(");
      CFStringAppend(v3, @"public");
      CFStringAppend(v3, @""));
    }
    if (v5 || (id v5 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks)) != 0) {
      CFArrayAppendValue(v5, v8);
    }
    int v6 = 0;
LABEL_59:
    ++v4;
  }
  while (v4 < CFArrayGetCount(*(CFArrayRef *)(a1 + 1112)));
  BOOL v21 = v5 == 0;
  if (v5)
  {
    if (CFArrayGetCount(v5) >= 1)
    {
      CFIndex v22 = 0;
      do
      {
        CFArrayRef v23 = *(const __CFArray **)(a1 + 1112);
        CFIndex v24 = CFArrayGetCount(v23);
        int v25 = CFArrayGetValueAtIndex(v5, v22);
        v33.location = 0;
        v33.length = v24;
        FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v23, v33, v25);
        if (FirstIndexOfValue != -1) {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 1112), FirstIndexOfValue);
        }
        ++v22;
      }
      while (v22 < CFArrayGetCount(v5));
    }
  }
  else
  {
    BOOL v21 = 1;
  }
  if (v30 > 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Deferring auto-join attempt for %@ ", v3 message];
    }
  }
  if (!v21) {
    CFRelease(v5);
  }
LABEL_77:

  CFRelease(v3);
}

void sub_10013A10C(uint64_t a1, const __CFArray *a2)
{
  if (a1)
  {
    if (a2)
    {
      CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
      if (CFArrayGetCount(a2) < 1)
      {
        char v6 = 0;
        int v7 = -1431655766;
        if (!Mutable) {
          return;
        }
      }
      else
      {
        CFIndex v5 = 0;
        char v6 = 0;
        int v7 = -1431655766;
        uint64_t v8 = Mutable;
        do
        {
          CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, v5);
          if (ValueAtIndex)
          {
            char v10 = ValueAtIndex;
            *(_DWORD *)buf = -1431655766;
            CFNumberRef v11 = sub_1000C6FC0((uint64_t)ValueAtIndex, @"RSSI");
            int v12 = sub_1001300C8(a1, v10, 1, (int *)buf);
            if ((*(_DWORD *)buf - 1) < 2)
            {
              int v7 = *(_DWORD *)buf;
              char v6 = 1;
            }
            if (*(unsigned char *)(a1 + 40) && *(_DWORD *)(a1 + 44))
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Using Simulated RSSI Value(%d) instead of actual RSSI value(%d)", "__WiFiDeviceManagerFilterCandidatesWithRssiThreshold", *(unsigned int *)(a1 + 44), v11);
              }
              LODWORD(v11) = *(_DWORD *)(a1 + 44);
              CFMutableStringRef Mutable = v8;
            }
            if ((int)v11 < v12)
            {
              if (Mutable)
              {
                int v14 = *(_DWORD *)buf;
                unsigned int v15 = *(_DWORD *)buf - 5;
                BOOL v16 = sub_10001EB5C(v10);
                if (v15 >= 0xFFFFFFFE)
                {
                  if (v16) {
                    __int16 v18 = sub_10001E404((uint64_t)v10, @"BSSID");
                  }
                  else {
                    __int16 v18 = sub_10001A43C(v10);
                  }
                  CFStringRef v20 = v18;
                  CFNumberRef v21 = sub_1000C6FC0((uint64_t)v10, @"RSSI");
                  CFStringRef v22 = @"MovingNw";
                  if (v14 != 3) {
                    CFStringRef v22 = 0;
                  }
                  if (v14 == 4) {
                    CFStringRef v22 = @"OmnipresentNw";
                  }
                  CFMutableStringRef Mutable = v8;
                  CFStringAppendFormat(v8, 0, @"%@(%ld {%@}), ", v20, v21, v22);
                }
                else
                {
                  if (v16) {
                    CFArrayRef v17 = sub_10001E404((uint64_t)v10, @"BSSID");
                  }
                  else {
                    CFArrayRef v17 = sub_10001A43C(v10);
                  }
                  id v19 = v17;
                  CFMutableStringRef Mutable = v8;
                  CFNumberRef v28 = sub_1000C6FC0((uint64_t)v10, @"RSSI");
                  CFStringAppendFormat(v8, 0, @"%@(%ld), ", v19, v28, v29);
                }
              }
              CFArrayRemoveValueAtIndex(a2, v5--);
            }
          }
          ++v5;
        }
        while (v5 < CFArrayGetCount(a2));
        if (!Mutable) {
          return;
        }
      }
      if (!CFStringGetLength(Mutable))
      {
LABEL_45:
        CFRelease(Mutable);
        return;
      }
      if (v6)
      {
        if (!qword_10027DD68) {
          goto LABEL_44;
        }
        CFIndex v24 = (v7 - 1) > 3 ? 0 : off_100242318[v7 - 1];
        int v25 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"Filtering scan results in %@ due to AJ RSSI threshold: %@", v24, Mutable]) UTF8String]);
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_44;
        }
      }
      else
      {
        if (!qword_10027DD68) {
          goto LABEL_44;
        }
        int v25 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"Filtering scan results due to AJ RSSI threshold: %@", Mutable]) UTF8String]);
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_44;
        }
      }
      long long v26 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v25 UTF8String]] UTF8String];
      *(_DWORD *)buf = 136446210;
      uint64_t v31 = v26;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
LABEL_44:
      goto LABEL_45;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: no scan candidate network", "__WiFiDeviceManagerFilterCandidatesWithRssiThreshold"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: manager is Null!", "__WiFiDeviceManagerFilterCandidatesWithRssiThreshold"];
    }
  }
}

void sub_10013A62C(const __CFArray *a1, int a2, CFTypeRef *a3)
{
  CFAllocatorRef v34 = kCFAllocatorDefault;
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  if (!a1 || (int Count = CFArrayGetCount(a1), Count < 1))
  {
    char v10 = 0;
    uint64_t v9 = 0;
    goto LABEL_26;
  }
  CFRange v33 = a3;
  CFIndex v8 = 0;
  uint64_t v9 = 0;
  char v10 = 0;
  CFIndex v11 = Count - 1;
  uint64_t v12 = Count;
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
    if (ValueAtIndex)
    {
      int v14 = ValueAtIndex;
      if (Mutable)
      {
        if (a2 && sub_10001EB5C(ValueAtIndex)) {
          ++v9;
        }
        CFStringRef v15 = (const __CFString *)sub_10001A43C(v14);
        if (v8 >= v11) {
          CFStringAppend(Mutable, v15);
        }
        else {
          CFStringAppendFormat(Mutable, 0, @"%@, ", v15);
        }
      }
      BOOL v16 = sub_10001EB5C(v14);
      if (a2)
      {
        if (v16)
        {
          CFArrayRef v17 = (void *)sub_10001E404((uint64_t)v14, @"CHANNEL");
          if (v17)
          {
            __int16 v18 = v17;
            id v19 = (void *)sub_10001E404((uint64_t)v14, @"CHANNEL_FLAGS");
            if (v19)
            {
              CFStringRef v20 = v19;
              if (v10
                || (char v10 = CFDictionaryCreateMutable(v34, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks)) != 0)
              {
                *(_OWORD *)keys = *(_OWORD *)&off_100241B28;
                values[0] = v18;
                values[1] = v20;
                CFDictionaryRef v21 = CFDictionaryCreate(v34, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                if (v21)
                {
                  CFDictionaryRef v22 = v21;
                  CFDictionarySetValue(v10, v18, v21);
                  CFRelease(v22);
                }
              }
            }
          }
        }
      }
    }
    ++v8;
  }
  while (v12 != v8);
  if (v10)
  {
    a3 = v33;
    if (!CFDictionaryGetCount(v10))
    {
      CFRelease(v10);
      char v10 = 0;
      if (!Mutable) {
        goto LABEL_30;
      }
      goto LABEL_27;
    }
LABEL_26:
    if (!Mutable) {
      goto LABEL_30;
    }
    goto LABEL_27;
  }
  a3 = v33;
  if (!Mutable) {
    goto LABEL_30;
  }
LABEL_27:
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Auto join scan found: %@", Mutable message];
  }
  CFRelease(Mutable);
LABEL_30:
  if (v9)
  {
    if (v10)
    {
      CFIndex v24 = CFDictionaryGetCount(v10);
      CFMutableStringRef v25 = CFStringCreateMutable(v34, 0);
      if (v25)
      {
        long long v26 = v25;
        size_t v27 = 8 * v24;
        __chkstk_darwin();
        CFNumberRef v28 = (char *)&v33 - ((8 * v24 + 15) & 0xFFFFFFFFFFFFFFF0);
        CFRange v33 = a3;
        CFAllocatorRef v34 = v29;
        if (v24) {
          memset((char *)&v33 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), 170, 8 * v24);
        }
        else {
          size_t v27 = 0;
        }
        bzero(v28, v27);
        CFDictionaryGetKeysAndValues(v10, 0, (const void **)v28);
        if (v24 >= 1)
        {
          for (CFIndex i = 0; i != v24; ++i)
          {
            CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)&v28[8 * i], @"CHANNEL");
            if (Value)
            {
              if (i >= v24 - 1) {
                CFStringAppendFormat(v26, 0, @"%@", Value);
              }
              else {
                CFStringAppendFormat(v26, 0, @"%@, ", Value);
              }
            }
          }
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Auto join scan found %ld hidden networks on channels %@", v9, v26 message];
        }
        CFRelease(v26);
        a3 = v33;
      }
    }
  }
  if (a3)
  {
    if (*a3) {
      CFRelease(*a3);
    }
    *a3 = v10;
  }
  else if (v10)
  {
    CFRelease(v10);
  }
}

CFIndex sub_10013AA04(uint64_t a1)
{
  if (qword_10027DD68)
  {
    CFNumberRef v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: current state: %@ ", "__WiFiDeviceManagerPrepareCandidates", sub_100024BE8(*(_DWORD *)(a1 + 3280))]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v64 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v3 UTF8String]] UTF8String];
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
  }
  CFArrayRef v4 = *(const __CFArray **)(a1 + 1112);
  if (v4)
  {
    CFIndex result = CFArrayGetCount(v4);
    if (!result) {
      return result;
    }
    CFIndex v6 = result;
    v65.location = 0;
    v65.length = result;
    CFArraySortValues(*(CFMutableArrayRef *)(a1 + 1112), v65, (CFComparatorFunction)sub_10013C164, (void *)a1);
    if (*(_DWORD *)(a1 + 3280) == 11) {
      goto LABEL_10;
    }
    int v7 = *(const void **)(a1 + 3512);
    if (!v7) {
      goto LABEL_10;
    }
    if (sub_10013C0D4(a1, v7)) {
      goto LABEL_10;
    }
    if (sub_10001BB2C(*(void *)(a1 + 3512))) {
      goto LABEL_10;
    }
    v66.location = 0;
    v66.length = v6;
    FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 1112), v66, *(const void **)(a1 + 3512));
    if (FirstIndexOfValue == -1) {
      goto LABEL_10;
    }
    CFIndex v46 = FirstIndexOfValue;
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1112), FirstIndexOfValue);
    if (sub_10001E71C(*(void *)(a1 + 3512)))
    {
      CFBooleanRef v48 = (CFBooleanRef)sub_10001E404(*(void *)(a1 + 3512), @"WiFiInstantHotspotJoining");
      if (v48 == kCFBooleanTrue)
      {
        sub_10001C6A4((uint64_t)ValueAtIndex, @"WiFiInstantHotspotJoining", v48);
        int v49 = 1;
      }
      else
      {
        int v49 = 0;
      }
      if (sub_10001E404(*(void *)(a1 + 3512), @"WiFiAutoInstantHotspotJoining") == kCFBooleanTrue)
      {
        sub_10001C6A4((uint64_t)ValueAtIndex, @"WiFiAutoInstantHotspotJoining", kCFBooleanTrue);
        char v50 = 1;
        goto LABEL_65;
      }
    }
    else
    {
      int v49 = 0;
    }
    char v50 = 0;
LABEL_65:
    CFRetain(ValueAtIndex);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 1112), v46);
    CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 1112), 0, ValueAtIndex);
    if (ValueAtIndex) {
      CFRelease(ValueAtIndex);
    }
    char v51 = v50 ^ 1;
    if (v49) {
      char v51 = 0;
    }
    if ((v51 & 1) == 0)
    {
      CFDateRef v52 = (const __CFDate *)sub_10001E404(*(void *)(a1 + 3512), @"lastDisconnectTimestampKey");
      if (v52)
      {
        CFDateRef v53 = v52;
        double Current = CFAbsoluteTimeGetCurrent();
        if (Current - CFDateGetAbsoluteTime(v53) > 300.0)
        {
          if (qword_10027DD68)
          {
            v56 = sub_10001A43C(*(const void **)(a1 + 3512));
            int v57 = v49 ? "Instant" : "Auto instant";
            double v58 = CFAbsoluteTimeGetCurrent();
            v59 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s Ignore Previous Hotspot %@ type(%s) disconnect time since linkDown %f", "__WiFiDeviceManagerPrepareCandidates", v56, v57, v58 - CFDateGetAbsoluteTime(v53)]) UTF8String]);
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              v60 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v59 UTF8String]] UTF8String];
              *(_DWORD *)buf = 136446210;
              v64 = v60;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            }
          }
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 1112), 0);
        }
      }
    }
LABEL_10:
    CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
    if (!Mutable)
    {
LABEL_17:
      *(void *)(a1 + 1128) = 0;
      *(void *)(a1 + 1120) = 0;
      return 1;
    }
    uint64_t v9 = Mutable;
    CFArrayRef v10 = *(const __CFArray **)(a1 + 1112);
    if (!v10 || (Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 1112)), CFIndex v12 = Count - 1, Count < 1))
    {
LABEL_13:
      if (qword_10027DD68)
      {
        int v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"Attempting auto-join for networks in following order: %@", v9]) UTF8String]);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v15 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v14 UTF8String]] UTF8String];
          *(_DWORD *)buf = 136446210;
          v64 = v15;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        }
      }
      CFRelease(v9);
      goto LABEL_17;
    }
    CFIndex v16 = Count;
    CFIndex v17 = 0;
    while (1)
    {
      __int16 v18 = CFArrayGetValueAtIndex(v10, v17);
      if (v18)
      {
        id v19 = v18;
        if (sub_10001EB5C(v18)) {
          CFStringRef v20 = (const __CFString *)sub_10001E404((uint64_t)v19, @"BSSID");
        }
        else {
          CFStringRef v20 = (const __CFString *)sub_10001A43C(v19);
        }
        CFStringAppend(v9, v20);
        if (sub_10001BB2C((BOOL)v19))
        {
          BOOL v21 = sub_1000C90F4((uint64_t)v19);
          CFStringAppend(v9, @"(");
          if (v21) {
            CFStringRef v22 = @"HS2.0-h";
          }
          else {
            CFStringRef v22 = @"HS2.0-r";
          }
          CFStringAppend(v9, v22);
          BOOL v23 = sub_10013C0D4(a1, v19);
          CFStringRef v24 = @",";
          if (v23)
          {
LABEL_31:
            CFStringAppend(v9, v24);
            CFStringAppend(v9, @"HS");
          }
          BOOL v26 = sub_10010CB30(a1, v19);
          CFStringRef v27 = @",";
          if (v26)
          {
LABEL_33:
            CFStringAppend(v9, v27);
            CFStringAppend(v9, @"C");
          }
          unsigned int v28 = sub_10001A680((uint64_t)v19);
          CFStringRef v29 = @",";
          if (v28)
          {
LABEL_35:
            CFStringAppend(v9, v29);
            CFStringAppend(v9, @"A");
          }
          BOOL v30 = sub_10001FC1C((uint64_t)v19);
          CFStringRef v31 = @",";
          if (v30)
          {
LABEL_37:
            CFStringAppend(v9, v31);
            CFStringAppend(v9, @"EAP");
          }
          BOOL v32 = sub_1000C66D0((BOOL)v19);
          CFStringRef v33 = @",";
          if (v32)
          {
LABEL_39:
            CFStringAppend(v9, v33);
            CFStringAppend(v9, @"WEP");
          }
          int v34 = sub_10001ED04((uint64_t)v19);
          CFStringRef v35 = @",";
          if (v34)
          {
LABEL_41:
            CFStringAppend(v9, v35);
            CFStringAppend(v9, @"W");
          }
          unsigned int v36 = sub_1000C6FE8((const __CFDictionary *)v19);
          CFStringRef v37 = @",";
          if (v36)
          {
LABEL_43:
            CFStringAppend(v9, v37);
            CFStringAppend(v9, @"SAE");
          }
          v38 = sub_100024070((uint64_t)v19);
          if (v17 >= v12) {
            CFStringAppendFormat(v9, 0, @", %@"), v38);
          }
          else {
            CFStringAppendFormat(v9, 0, @", %@, "), v38);
          }
          goto LABEL_47;
        }
        BOOL v25 = sub_10013C0D4(a1, v19);
        CFStringRef v24 = CFSTR("(");
        if (v25) {
          goto LABEL_31;
        }
        BOOL v39 = sub_10010CB30(a1, v19);
        CFStringRef v27 = CFSTR("(");
        if (v39) {
          goto LABEL_33;
        }
        unsigned int v40 = sub_10001A680((uint64_t)v19);
        CFStringRef v29 = CFSTR("(");
        if (v40) {
          goto LABEL_35;
        }
        BOOL v41 = sub_10001FC1C((uint64_t)v19);
        CFStringRef v31 = CFSTR("(");
        if (v41) {
          goto LABEL_37;
        }
        BOOL v42 = sub_1000C66D0((BOOL)v19);
        CFStringRef v33 = CFSTR("(");
        if (v42) {
          goto LABEL_39;
        }
        int v43 = sub_10001ED04((uint64_t)v19);
        CFStringRef v35 = CFSTR("(");
        if (v43) {
          goto LABEL_41;
        }
        unsigned int v44 = sub_1000C6FE8((const __CFDictionary *)v19);
        CFStringRef v37 = CFSTR("(");
        if (v44) {
          goto LABEL_43;
        }
        v62 = sub_100024070((uint64_t)v19);
        CFStringAppendFormat(v9, 0, @"(%@), ", v62);
      }
LABEL_47:
      if (v16 == ++v17) {
        goto LABEL_13;
      }
    }
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: no scan candidate network" : @"__WiFiDeviceManagerPrepareCandidates"];
  }
  return 0;
}

uint64_t sub_10013B26C(uint64_t a1)
{
  v59 = (unsigned char *)(a1 + 6896);
  int v2 = sub_10010EC7C(a1, 1);
  if (!v2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Autojoin cancelled due to concurrent state %@(%d)", sub_10005ADD0(v59[161]), v59[161] message];
    }
    CFDictionaryRef ValueAtIndex = 0;
    uint64_t v47 = 4294963393;
    goto LABEL_84;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + 1112);
  if (!v3) {
    goto LABEL_110;
  }
  CFIndex Count = CFArrayGetCount(v3);
  int v58 = v2;
  if (!Count || (v5 = Count, CFIndex v6 = *(void *)(a1 + 1120), v6 >= Count))
  {
    CFDictionaryRef ValueAtIndex = 0;
LABEL_112:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Done processing AJ candidates, %ld", "__WiFiDeviceManagerProcessCandidates", *(void *)(a1 + 1120));
    }
    uint64_t v47 = 0;
    int v2 = v58;
    goto LABEL_84;
  }
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1112), v6);
    if (!ValueAtIndex) {
      break;
    }
    if (qword_10027DD68)
    {
      uint64_t v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"Autojoin is processing network %ld of %ld candidates", *(void *)(a1 + 1120) + 1, v5]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        CFArrayRef v10 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v9 UTF8String]] UTF8String];
        *(_DWORD *)buf = 136446210;
        v61 = v10;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      }
    }
    if ((!*(unsigned char *)(a1 + 24) || !sub_100063EA8(*(void *)(a1 + 64)) || *(_DWORD *)(a1 + 28))
      && sub_10001EB5C(ValueAtIndex))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Autojoin candidate contains hidden ssid"];
      }
      char v50 = sub_10001E404((uint64_t)ValueAtIndex, @"CHANNEL");
      return sub_10013C4F4(a1, v50);
    }
    ++*(void *)(a1 + 1120);
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: manager->joinRecommendationMode = %d", "__WiFiDeviceManagerProcessCandidates", *(unsigned int *)(a1 + 6576));
    }
    int v12 = *(_DWORD *)(a1 + 3280);
    if (*(_DWORD *)(a1 + 6576) && *(_DWORD *)(a1 + 108) == 2)
    {
      BOOL v13 = sub_1000CE714((uint64_t)ValueAtIndex);
      if (sub_10001E404((uint64_t)ValueAtIndex, @"WiFiNetworkAttributeIsPublic") == kCFBooleanTrue) {
        unsigned __int8 v15 = 1;
      }
      else {
        unsigned __int8 v15 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") isOmnipresentNetwork:ValueAtIndex];
      }
      if (*(_DWORD *)(a1 + 6576) == 255) {
        goto LABEL_42;
      }
      CFIndex v16 = *(const void **)(a1 + 112);
      if (!v16 || (CFIndex v17 = sub_10001A43C(ValueAtIndex), !CFEqual(v16, v17)))
      {
        if (v13) {
          char v19 = 1;
        }
        else {
          char v19 = v15;
        }
        if (v19) {
          goto LABEL_30;
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: %@ not a public/carrier network. Suppressing approve-to-join alert.", "__WiFiDeviceManagerShowApproveToJoinIfAppropriate", sub_10001A43C(ValueAtIndex), v56, v57 message];
        }
        goto LABEL_50;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: matching ATJ test network %@, bypass network type check.", "__WiFiDeviceManagerShowApproveToJoinIfAppropriate", *(void *)(a1 + 112) message];
      }
LABEL_30:
      id v20 = sub_100005420(a1);
      if (v20)
      {
        BOOL v21 = v20;
        id v22 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") isWithin:v20 fromLocation:*(void *)(a1 + 3512) forNetwork:*(double *)(a1 + 6728)];
        if (v22 == (id)1)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: %@ is not at known location.", "__WiFiDeviceManagerShowApproveToJoinIfAppropriate", sub_10001A43C(*(const void **)(a1 + 3512)) message];
          }
        }

        double v14 = sub_1000C99F4(ValueAtIndex);
        if (v22 == (id)1)
        {
LABEL_42:
          if ([+[WiFiUserInteractionMonitor sharedInstance] isNetworkingAppInForeground])
          {
            unsigned int v26 = *(_DWORD *)(a1 + 3352);
            if (v26 <= 6 && ((1 << v26) & 0x58) != 0)
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: Device in motion (%@). Suppressing approve-to-join alert.", "__WiFiDeviceManagerShowApproveToJoinIfAppropriate", sub_100012FCC(*(_DWORD *)(a1 + 3352)) message];
              }
              goto LABEL_49;
            }
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "Dispatching auto join recommendation for %@", sub_10001A43C(ValueAtIndex) message];
            }
            uint64_t v44 = sub_100017C48(*(void *)(a1 + 64));
            int v12 = sub_100123384(a1, v44, 5, 0, ValueAtIndex, 0);
          }
          else
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Not in networking app. Suppressing approve-to-join alert.", "__WiFiDeviceManagerShowApproveToJoinIfAppropriate", v55);
            }
LABEL_49:
            int v12 = 21;
          }
LABEL_50:
          goto LABEL_51;
        }
      }
      else
      {
        double v14 = sub_1000C99F4(ValueAtIndex);
      }
      double v24 = v14;
      double v14 = *(double *)(a1 + 6736);
      if (v24 >= v14) {
        goto LABEL_42;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: %@ is within range of known location or last joined date. Suppressing approve-to-join alert. (isWithinRange %d, %f seconds)", "__WiFiDeviceManagerShowApproveToJoinIfAppropriate", sub_10001A43C(ValueAtIndex), 1, *(void *)&v24 message];
      }
      goto LABEL_50;
    }
LABEL_51:
    if (v12 == 21)
    {
      BOOL v42 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        v55 = sub_10001A43C(ValueAtIndex);
        [v42 WFLog:3, "%s: not the right time to ask for approval to join for %@. Retrying next candidate.", "__WiFiDeviceManagerProcessCandidates" message];
      }
      goto LABEL_77;
    }
    if (v12 == 14)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: requesting approval to join. Waiting for user input for %@.", "__WiFiDeviceManagerProcessCandidates", sub_10001A43C(ValueAtIndex) message];
      }
      return 14;
    }
    if (*v59)
    {
      CFStringRef v27 = (const void *)sub_100017C48(*(void *)(a1 + 64));
      unsigned int v28 = sub_100018FA8(a1, v27, 1);
      if (v28)
      {
        CFStringRef v29 = v28;
        BOOL v30 = sub_10001A43C(v28);
        CFStringRef v31 = sub_10001A43C(ValueAtIndex);
        LODWORD(v30) = CFEqual(v30, v31);
        CFRelease(v29);
        if (v30) {
          goto LABEL_77;
        }
      }
      CFStringRef v33 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        v55 = sub_10001A43C(ValueAtIndex);
        [v33 WFLog:3, "%s: Disconnect from Hotspot. Attempting network transition to %@!!", "__WiFiDeviceManagerProcessCandidates" message];
      }
      int v34 = (const void *)sub_100017C48(*(void *)(a1 + 64));
      sub_1000FEA7C(a1, v34, 1019, "__WiFiDeviceManagerProcessCandidates", 15494);
    }
    if (_os_feature_enabled_impl())
    {
      CFStringRef v35 = (const void *)sub_100017C48(*(void *)(a1 + 64));
      unsigned int v36 = sub_100018FA8(a1, v35, 1);
      if (v36)
      {
        CFStringRef v37 = v36;
        v38 = sub_10001E404((uint64_t)ValueAtIndex, @"COLOCATED_NETWORK_SCOPE_ID");
        unsigned int v40 = (void *)qword_10027DD68;
        if (v38)
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Link down will be debounced", "__WiFiDeviceManagerProcessCandidates")];
          }
        }
        else
        {
          if (qword_10027DD68)
          {
            v55 = sub_10001A43C(v37);
            v56 = sub_10001A43C(ValueAtIndex);
            [v40 WFLog:3, "%s: Disconnect from '%@', attempting network transition to '%@'", "__WiFiDeviceManagerProcessCandidates" message];
          }
          double v45 = (const void *)sub_100017C48(*(void *)(a1 + 64));
          sub_1000FEA7C(a1, v45, 1013, "__WiFiDeviceManagerProcessCandidates", 15507);
        }
        CFRelease(v37);
      }
    }
    if (!sub_100136B70((unsigned char *)a1, 0) || (sub_100023F30((uint64_t)ValueAtIndex) & 0xFFFFFFFE) != 2)
    {
      if (sub_100136B70((unsigned char *)a1, 0) || sub_1001368DC(a1, 0))
      {
        sub_10001C6A4((uint64_t)ValueAtIndex, @"FORCE_BSSID", kCFBooleanTrue);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Forceing BSSID Join: %@\n", "__WiFiDeviceManagerProcessCandidates", sub_10001E404((uint64_t)ValueAtIndex, @"BSSID" message];
        }
      }
      CFDateRef v52 = sub_10011FC58(a1, ValueAtIndex, 0);
      if (v52) {
        return sub_100133D50(a1, ValueAtIndex, 0, v52);
      }
      sub_1001409B8(a1, @"autoJoinAssociating", ValueAtIndex, 0);
      return 12;
    }
LABEL_77:
    CFIndex v6 = *(void *)(a1 + 1120);
    if (v6 >= v5) {
      goto LABEL_112;
    }
  }
  int v2 = v58;
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "__WiFiDeviceManagerProcessCandidates")];
  }
LABEL_110:
  CFDictionaryRef ValueAtIndex = 0;
  uint64_t v47 = 0;
LABEL_84:
  if (_os_feature_enabled_impl())
  {
    sub_10013CCE8(a1, (uint64_t)ValueAtIndex, (int)v47, CWFManagerErrorDomain, @"Failed to process join candidate");
    return 0;
  }
  else if (*(unsigned char *)(a1 + 24) && sub_100063EA8(*(void *)(a1 + 64)) && !*(_DWORD *)(a1 + 28))
  {
    return sub_10013CE00((_DWORD *)a1, v47);
  }
  else if (v2)
  {
    return sub_10013BCB0(a1);
  }
  else
  {
    return sub_10000C060(a1, v47);
  }
}

uint64_t sub_10013BCB0(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 1112);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 1112) = 0;
  }
  if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 3328)))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: No GAS queries." arguments:("__WiFiDeviceManagerProcessDeferredNetworks", 0x0)];
    }
    goto LABEL_26;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + 3560);
  if (!v3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: No scan results", "__WiFiDeviceManagerProcessDeferredNetworks")];
    }
    goto LABEL_26;
  }
  if (!CFArrayGetCount(v3))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"No HS2.0 networks to query" v24];
    }
LABEL_26:
    goto LABEL_27;
  }
  int valuePtr = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFIndex v5 = Mutable;
    CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
    CFDictionaryAddValue(v5, @"GAS_PROTOCOL", v6);
    CFDictionaryAddValue(v5, @"GAS_QUERY", *(const void **)(a1 + 3328));
    CFDictionaryAddValue(v5, @"GAS_NETWORKS", *(const void **)(a1 + 3560));
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 3560));
    CFIndex v8 = CFStringCreateMutable(kCFAllocatorDefault, 0);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3560), i);
        CFStringRef v11 = (const __CFString *)sub_10001E404((uint64_t)ValueAtIndex, @"BSSID");
        if (v11)
        {
          if (i >= Count - 1) {
            CFStringAppend(v8, v11);
          }
          else {
            CFStringAppendFormat(v8, 0, @"%@, ", v11);
          }
        }
      }
    }
    int v12 = malloc_type_malloc(0x18uLL, 0xA00402214FCE6uLL);
    if (v12)
    {
      BOOL v13 = v12;
      *int v12 = a1;
      v12[1] = sub_10013CFB0;
      v12[2] = a1;
      uint64_t v14 = *(void *)(a1 + 64);
      unsigned __int8 v15 = (const void *)sub_100017C48(v14);
      uint64_t v16 = sub_10006F928(v14, v15, v5, 0, (uint64_t)sub_100119BA0, (uint64_t)v13, (void *)(a1 + 3312));
      if (v16) {
        free(v13);
      }
    }
    else
    {
      uint64_t v16 = 4294963395;
    }
    CFRelease(v5);
    if (v6) {
      CFRelease(v6);
    }
    if (v16)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Unable to send GAS query. Error %d", v16);
      }
      if (v8) {
        CFRelease(v8);
      }
      return sub_10000C060(a1, v16);
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Sending GAS request to %@", "__WiFiDeviceManagerProcessDeferredNetworks", v8 message];
    }
    if (v8) {
      CFRelease(v8);
    }
    return 13;
  }
LABEL_27:
  CFIndex v19 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3568));
  if (v19)
  {
    CFIndex v20 = v19;
    BOOL v21 = *(__CFArray **)(a1 + 1112);
    if (!v21)
    {
      BOOL v21 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      *(void *)(a1 + 1112) = v21;
    }
    v27.location = 0;
    v27.length = v20;
    CFArrayAppendArray(v21, *(CFArrayRef *)(a1 + 3568), v27);
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: Appending deffered networks to candidates list", "__WiFiDeviceManagerProcessDeferredNetworks"];
    }
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3560));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3568));
  [*(id *)(a1 + 3656) clearScanResultsForAutoJoinSessionReset];
  sub_10013A10C(a1, *(const __CFArray **)(a1 + 1112));
  if (!sub_10013AA04(a1))
  {
    uint64_t v16 = 0;
    return sub_10000C060(a1, v16);
  }

  return sub_10013B26C(a1);
}

BOOL sub_10013C0D4(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  if (sub_10001BB2C((BOOL)a2)) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 3576));
  if (!Count) {
    return 0;
  }
  v9.length = Count;
  v9.location = 0;
  FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 3576), v9, a2);
  if (FirstIndexOfValue == -1) {
    return 0;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3576), FirstIndexOfValue);
  if (!ValueAtIndex) {
    return 0;
  }

  return sub_10001FABC((uint64_t)ValueAtIndex);
}

uint64_t sub_10013C164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    goto LABEL_52;
  }
  if (a1 | a2) {
    uint64_t v6 = -1;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = v6;
  }
  if (!a1 || !a2) {
    return result;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a3 + 3576));
  if (!Count)
  {
LABEL_52:
    CFIndex v19 = (const void *)a2;
    CFDictionaryRef ValueAtIndex = (const void *)a1;
LABEL_44:
    return sub_1000C8F18((uint64_t)ValueAtIndex, (uint64_t)v19);
  }
  CFIndex v9 = Count;
  if (*(_DWORD *)(a3 + 3280) != 11) {
    goto LABEL_26;
  }
  CFArrayRef v10 = *(const __CFArray **)(a3 + 3368);
  if (!v10 || !CFArrayGetCount(v10)) {
    goto LABEL_26;
  }
  uint64_t v11 = sub_1000CE630(*(const __CFArray **)(a3 + 3368), a1);
  uint64_t v12 = sub_1000CE630(*(const __CFArray **)(a3 + 3368), a2);
  uint64_t v14 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    unsigned __int8 v15 = sub_10001A43C((const void *)a1);
    [v14 WFLog:3, "%s: ranking: %@(%ld), %@(%ld)", "__WiFiDeviceManagerNetworkCompareAutoJoinPriority", v15, v11, sub_10001A43C((const void *)a2), v12 message];
  }
  if (v11 != -1 && v12 != -1)
  {
    if (v11 > v12) {
      return 1;
    }
    else {
      return -1;
    }
  }
  uint64_t result = v11 == -1 ? 1 : -1;
  if (v11 == -1 && v12 == -1)
  {
LABEL_26:
    v35.location = 0;
    v35.length = v9;
    FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a3 + 3576), v35, (const void *)a1);
    CFDictionaryRef ValueAtIndex = (const void *)a1;
    if (FirstIndexOfValue != -1) {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 3576), FirstIndexOfValue);
    }
    v36.location = 0;
    v36.length = v9;
    CFIndex v18 = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a3 + 3576), v36, (const void *)a2);
    CFIndex v19 = (const void *)a2;
    if (v18 != -1) {
      CFIndex v19 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 3576), v18);
    }
    if (*(unsigned char *)(a3 + 6632))
    {
      uint64_t result = sub_1000CBD24((uint64_t)ValueAtIndex, (uint64_t)v19, 0);
      if (result) {
        return result;
      }
      CFDateRef v20 = (const __CFDate *)sub_10001E404((uint64_t)ValueAtIndex, @"lastUpdated");
      CFDateRef v21 = (const __CFDate *)sub_10001E404((uint64_t)v19, @"lastUpdated");
      CFNumberRef v22 = sub_1000C6FC0(a1, @"RSSI");
      CFNumberRef v23 = sub_1000C6FC0(a2, @"RSSI");
      if (v20)
      {
        if (v21)
        {
          if ((uint64_t)v22 >= -65)
          {
            CFNumberRef v24 = v23;
            if ((uint64_t)v23 >= -65)
            {
              CFComparisonResult v25 = CFDateCompare(v20, v21, 0);
              CFRange v27 = (void *)qword_10027DD68;
              if (v25 == kCFCompareGreaterThan)
              {
                if (qword_10027DD68)
                {
                  unsigned int v28 = sub_10001A43C(ValueAtIndex);
                  [v27 WFLog:4, "Preferred %@(%ld, %@) over %@ (%ld, %@)", v28, v22, v20, sub_10001A43C(v19), v24, v21 message];
                }
                return -1;
              }
              if (qword_10027DD68)
              {
                CFStringRef v33 = sub_10001A43C(v19);
                [v27 WFLog:4, "Preferred %@(%ld, %@) over %@ (%ld, %@)", v33, v24, v21, sub_10001A43C(ValueAtIndex), v22, v20 message];
              }
              return 1;
            }
          }
        }
      }
    }
    if (*(void *)(a3 + 6976))
    {
      CFStringRef v29 = sub_10001A43C((const void *)a1);
      BOOL v30 = sub_10001A43C(*(const void **)(a3 + 6976));
      if (CFEqual(v29, v30)) {
        return -1;
      }
      CFStringRef v31 = sub_10001A43C((const void *)a2);
      BOOL v32 = sub_10001A43C(*(const void **)(a3 + 6976));
      if (CFEqual(v31, v32)) {
        return 1;
      }
    }
    goto LABEL_44;
  }
  return result;
}

uint64_t sub_10013C4F4(uint64_t a1, const void *a2)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 3552));
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  CFArrayRef v6 = *(const __CFArray **)(a1 + 1112);
  if (!v6) {
    goto LABEL_118;
  }
  CFIndex v7 = CFArrayGetCount(v6);
  if (!v7 || (CFIndex v8 = *(void *)(a1 + 1120), v8 >= v7))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: error: scan index invalid, %ld", "__WiFiDeviceManagerScanForHiddenNetworks", *(void *)(a1 + 1120));
    }
LABEL_118:
    uint64_t v50 = 4294963394;
    if (!Mutable) {
      return sub_10000C060(a1, v50);
    }
    goto LABEL_97;
  }
  if (!*(void *)(a1 + 1152)) {
    goto LABEL_102;
  }
  if (*(const void **)(a1 + 1160) != a2) {
    *(void *)(a1 + 1160) = a2;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1112), v8);
  if (!sub_10001EB5C(ValueAtIndex)) {
    goto LABEL_102;
  }
  if (*(void *)(a1 + 1144) >= (int)Count)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Autojoin reset hidden index %ld, hiddenCount %d", *(void *)(a1 + 1144), Count)];
    }
    *(void *)(a1 + 1144) = 0;
    uint64_t v10 = *(void *)(a1 + 1120) + 1;
    *(void *)(a1 + 1120) = v10;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 1120);
  }
  if (v10 < 1) {
    goto LABEL_18;
  }
  uint64_t v12 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1112), v10 - 1);
  if (!v12)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Previous Scan Candidate is Null!, index %ld", *(void *)(a1 + 1120)];
    }
LABEL_18:
    uint64_t v12 = 0;
  }
  CFIndex v14 = CFArrayGetCount(*(CFArrayRef *)(a1 + 1112));
  if (!v12 || *(void *)(a1 + 1144) || (CFIndex v15 = v14, !sub_10001EA5C(v12)))
  {
LABEL_34:
    if (CFStringGetLength(Mutable))
    {
      v63.length = CFStringGetLength(Mutable);
      v63.location = 0;
      CFStringDelete(Mutable, v63);
    }
    CFDateRef v21 = (const __CFDictionary **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1112), *(void *)(a1 + 1120));
    CFIndex v22 = *(void *)(a1 + 1144);
    if (v22 < (int)Count)
    {
      do
      {
        CFNumberRef v23 = (const __CFDictionary **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3552), v22);
        CFArrayRef v24 = *(const __CFArray **)(a1 + 1168);
        v64.length = CFArrayGetCount(v24);
        v64.location = 0;
        if (CFArrayGetFirstIndexOfValue(v24, v64, v23) == -1)
        {
          if (sub_1000C8ABC(v21, v23)) {
            goto LABEL_43;
          }
          if (Mutable) {
            sub_1001396A8(a1, v23, Mutable);
          }
        }
        ++v22;
      }
      while ((int)Count != v22);
      CFIndex v22 = (int)Count;
    }
LABEL_43:
    if (!CFStringGetLength(Mutable)) {
      goto LABEL_70;
    }
    unsigned int v26 = (void *)qword_10027DD68;
    if (!qword_10027DD68)
    {
LABEL_69:
LABEL_70:
      *(void *)(a1 + 1144) = v22;
      if (CFStringGetLength(Mutable))
      {
        v65.length = CFStringGetLength(Mutable);
        v65.location = 0;
        CFStringDelete(Mutable, v65);
      }
      CFIndex v31 = *(void *)(a1 + 1144);
      if (v31 < CFArrayGetCount(*(CFArrayRef *)(a1 + 3552)))
      {
        values = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1152), a2);
        CFArrayRef cf = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
        BOOL v32 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        CFIndex v33 = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 1152));
        int v34 = (const __CFDictionary **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3552), *(void *)(a1 + 1144));
        if (v33)
        {
          CFArrayRef v35 = *(const __CFArray **)(a1 + 1112);
          if (v35)
          {
            CFIndex v36 = CFArrayGetCount(v35);
            if (v36 >= 1)
            {
              CFIndex v37 = v36;
              for (CFIndex i = 0; i != v37; ++i)
              {
                BOOL v39 = (const __CFDictionary **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1112), i);
                if (v39)
                {
                  unsigned int v40 = v39;
                  if (sub_10001EA5C(v39))
                  {
                    if (sub_1000C8ABC(v34, v40))
                    {
                      BOOL v41 = (void *)sub_10001E404((uint64_t)v40, @"CHANNEL");
                      if (v41)
                      {
                        BOOL v42 = v41;
                        int v43 = (void *)sub_10001E404((uint64_t)v40, @"CHANNEL_FLAGS");
                        if (v43)
                        {
                          uint64_t v44 = v43;
                          if (CFArrayGetCount(v32) < 1)
                          {
LABEL_87:
                            *(_OWORD *)keys = *(_OWORD *)&off_100241B28;
                            v59[0] = v42;
                            v59[1] = v44;
                            CFDictionaryRef v48 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)v59, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                            if (v48)
                            {
                              CFDictionaryRef v49 = v48;
                              CFArrayAppendValue(v32, v48);
                              CFRelease(v49);
                            }
                          }
                          else
                          {
                            CFIndex v45 = 0;
                            while (1)
                            {
                              CFDictionaryRef v46 = (const __CFDictionary *)CFArrayGetValueAtIndex(v32, v45);
                              if (v46)
                              {
                                CFNumberRef Value = CFDictionaryGetValue(v46, @"CHANNEL");
                                if (CFEqual(v42, Value)) {
                                  break;
                                }
                              }
                              if (++v45 >= CFArrayGetCount(v32)) {
                                goto LABEL_87;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        sub_1001302EC(a1);
        *(_DWORD *)(a1 + 5620) = 10;
        if (CFArrayGetCount(v32) < 1)
        {
          CFArrayRef v51 = cf;
          uint64_t v50 = sub_100136C5C(a1, (const __CFArray *)v34, cf, 0, 7);
          if (!cf)
          {
LABEL_93:
            if (v32) {
              CFRelease(v32);
            }
            if (v50)
            {
              if (!Mutable) {
                return sub_10000C060(a1, v50);
              }
LABEL_97:
              CFRelease(Mutable);
              return sub_10000C060(a1, v50);
            }
            int v55 = 0;
            uint64_t v54 = 5;
            if (!Mutable)
            {
LABEL_104:
              if (!v55) {
                return v54;
              }
              v56 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1112), *(void *)(a1 + 1120));
              if (!v56 || sub_10001EB5C(v56)) {
                ++*(void *)(a1 + 1120);
              }
              return sub_10013B26C(a1);
            }
LABEL_103:
            CFRelease(Mutable);
            goto LABEL_104;
          }
        }
        else
        {
          uint64_t v50 = sub_100136C5C(a1, (const __CFArray *)v34, v32, 0, 7);
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 1168), v34);
          CFArrayRef v51 = cf;
          if (!cf) {
            goto LABEL_93;
          }
        }
        CFRelease(v51);
        goto LABEL_93;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Autojoin reset hidden index %ld, hiddenCount %d as all directed networks scanned for matching security", *(void *)(a1 + 1144), Count)];
      }
      *(void *)(a1 + 1144) = 0;
LABEL_102:
      uint64_t v54 = 12;
      int v55 = 1;
      if (!Mutable) {
        goto LABEL_104;
      }
      goto LABEL_103;
    }
    if (v21)
    {
      if (sub_10001FC1C((uint64_t)v21))
      {
        CFStringRef v27 = @"EAP";
LABEL_68:
        [v26 WFLog:3, "Autojoin looking for %@ hidden network, so skipping - %@", v27, Mutable message];
        goto LABEL_69;
      }
      if (sub_10001ED04((uint64_t)v21))
      {
        CFStringRef v27 = @"WPA";
        goto LABEL_68;
      }
      if (sub_1000C66D0((BOOL)v21))
      {
        CFStringRef v27 = @"WEP";
        goto LABEL_68;
      }
      if (sub_1000C6FE8((const __CFDictionary *)v21))
      {
        CFStringRef v27 = @"SAE";
        goto LABEL_68;
      }
    }
    CFStringRef v27 = @"OPEN";
    goto LABEL_68;
  }
  for (CFIndex j = *(void *)(a1 + 1120); j < CFArrayGetCount(*(CFArrayRef *)(a1 + 1112)); ++j)
  {
    CFIndex v17 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1112), *(void *)(a1 + 1120));
    if (!sub_10001EB5C(v17))
    {
      if (CFStringGetLength(Mutable))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Autojoin is processing network %ld of %ld candidates, skipped candidate - %@", *(void *)(a1 + 1120) + 1, v15, Mutable message];
        }
      }
      goto LABEL_102;
    }
    if (!sub_1000C8ABC((const __CFDictionary **)v17, (const __CFDictionary **)v12)) {
      break;
    }
    if (Mutable) {
      sub_1001396A8(a1, v17, Mutable);
    }
    ++*(void *)(a1 + 1120);
  }
  CFIndex v18 = *(void *)(a1 + 1120);
  CFIndex Length = CFStringGetLength(Mutable);
  if (v18 < v15)
  {
    if (Length)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Autojoin is processing network %ld of %ld candidates, skipped candidates - %@", *(void *)(a1 + 1120) + 1, v15, Mutable message];
      }
    }
    goto LABEL_34;
  }
  if (Length)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Autojoin completed processing %ld candidates, skipped candidates - %@", *(void *)(a1 + 1120) + 1, Mutable message];
    }
  }
  if (Mutable) {
    CFRelease(Mutable);
  }

  return sub_10013B26C(a1);
}

void sub_10013CCE8(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorDomain a4, uint64_t a5)
{
  if (!a3) {
    a3 = 57;
  }
  if (!a4) {
    a4 = kCFErrorDomainPOSIX;
  }
  if (a5)
  {
    NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
    uint64_t v15 = a5;
    uint64_t v11 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    CFErrorDomain v12 = a4;
    uint64_t v13 = a3;
  }
  else
  {
    CFErrorDomain v12 = a4;
    uint64_t v13 = a3;
    uint64_t v11 = 0;
  }
  sub_10013CE60(a1, a2, (uint64_t)+[NSError errorWithDomain:v12 code:v13 userInfo:v11]);
}

uint64_t sub_10013CE00(_DWORD *a1, uint64_t a2)
{
  if (a1[1380] == 1 || *((unsigned char *)a1 + 5504)) {
    return sub_100137200(a1);
  }
  unsigned int v3 = a1[821];
  if (v3 <= 0xB)
  {
    if (((1 << v3) & 0xC0) != 0) {
      return sub_1001372E0((uint64_t)a1);
    }
    if (((1 << v3) & 0x300) != 0) {
      return sub_1001388AC((uint64_t)a1);
    }
    if (((1 << v3) & 0xC00) != 0) {
      return sub_10013BCB0((uint64_t)a1);
    }
  }
  return sub_10000C060(a1, a2);
}

void sub_10013CE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v7 = *(void *)(a1 + 8840);
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 8832);
      if (v8)
      {
        if (a2)
        {
          if (!sub_1000C8ED4(a2, v8)) {
            goto LABEL_10;
          }
          uint64_t v7 = *(void *)(a1 + 8840);
        }
        (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v7, a3);
        _Block_release(*(const void **)(a1 + 8840));
        *(void *)(a1 + 8840) = 0;
        CFRelease(*(CFTypeRef *)(a1 + 8832));
        *(void *)(a1 + 8832) = 0;
        uint64_t v9 = *(void *)(a1 + 8920);
        uint64_t v10 = v9 + 1;
        BOOL v11 = v9 == -1;
        *(void *)(a1 + 8920) = v10;
        if (*(void *)(a1 + 8912) >= 6uLL && !v11)
        {
          sub_100006E70(*(void *)(a1 + 64), 0, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@", @"AutoJoin", [*(id *)(a1 + 8904) UUIDString]), 0);
          sub_100006E70(*(void *)(a1 + 64), 9, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@", @"AutoJoin", [*(id *)(a1 + 8904) UUIDString]), 0);
        }
      }
    }
  }
LABEL_10:
}

void sub_10013CFB0(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Auto join GAS query completed (%d) with current state: %@", a4, sub_100024BE8(*(_DWORD *)(a1 + 3280)) message];
  }
  uint64_t v8 = sub_10006B4B0(*(void *)(a1 + 64));
  if (v8 == *(void *)(a1 + 3312))
  {
    uint64_t v9 = *(const void **)(a1 + 3336);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 3336) = 0;
    }
    if (a3) {
      CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, a3);
    }
    else {
      CFMutableArrayRef MutableCopy = 0;
    }
    *(void *)(a1 + 3336) = MutableCopy;
    *(_DWORD *)(a1 + 3344) = a4;
    sub_1000FB1B0(a1);
  }
  else
  {
    uint64_t v11 = v8;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Ignorning old request.  CurrentCommand=%lld PendingCommand=%lld", v11, *(void *)(a1 + 3312));
    }
  }
}

void sub_10013D0EC(uint64_t a1, const void *a2)
{
  if (a1 && a2)
  {
    CFArrayRef v5 = *(const __CFArray **)(a1 + 3528);
    if (v5)
    {
      v11.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 3528));
      v11.location = 0;
      FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v5, v11, a2);
      if (FirstIndexOfValue != -1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3528), FirstIndexOfValue);
        if (ValueAtIndex) {
          goto LABEL_9;
        }
      }
    }
    CFArrayRef v8 = *(const __CFArray **)(a1 + 3536);
    if (v8)
    {
      v12.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 3536));
      v12.location = 0;
      CFIndex v9 = CFArrayGetFirstIndexOfValue(v8, v12, a2);
      if (v9 != -1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3536), v9);
        if (ValueAtIndex) {
LABEL_9:
        }
          [*(id *)(a1 + 6624) setNetworkOfInterest:ValueAtIndex];
      }
    }
  }
}

void sub_10013D1C4(uint64_t a1, const void *a2, int a3)
{
  if (a1)
  {
    unsigned int v7 = [*(id *)(a1 + 6648) enabled];
    if (v7)
    {
      CFArrayRef v8 = *(__CFSet **)(a1 + 3504);
      if (a3)
      {
        CFSetAddValue(v8, a2);
      }
      else
      {
        CFSetRemoveValue(v8, a2);
      }
    }
  }
}

void sub_10013D274(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 48);
  if (v2[30])
  {
    unsigned int v3 = (void (*)(uint64_t *, uint64_t, void, void, void, void))v2[484];
    uint64_t v4 = sub_100017C48(v2[8]);
    uint64_t v5 = a1 + 40;
    v3(v2, v4, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), *(unsigned int *)(a1 + 56), *(void *)(*(void *)(a1 + 48) + 3880));
    CFRelease(*(CFTypeRef *)(a1 + 48));
    CFArrayRef v6 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
    unsigned int v7 = *(const void **)(*(void *)(*(void *)v5 + 8) + 24);
    if (!v7) {
      return;
    }
LABEL_10:
    CFRelease(v7);
    *(void *)(*(void *)(*(void *)v5 + 8) + 24) = 0;
    return;
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFArrayRef v8 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v9 = a1 + 40;
  unsigned int v7 = *(const void **)(*(void *)(v10 + 8) + 24);
  if (v7)
  {
    uint64_t v5 = v9;
    goto LABEL_10;
  }
}

void sub_10013D370(uint64_t a1, const void *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, "%s: manager is null", "__WiFiDeviceManagerAsyncQueryLOITypeForLatestLocation"];
    }
    goto LABEL_11;
  }
  if (!+[WiFiLOIManager sharedWiFiLOIManager])
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: sharedWiFiLOIManager is nil", @"__WiFiDeviceManagerAsyncQueryLOITypeForLatestLocation"];
    }
LABEL_11:
    goto LABEL_6;
  }
  if (a2) {
    CFRetain(a2);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10013D73C;
  v6[3] = &unk_100241960;
  v6[5] = a1;
  v6[6] = a2;
  v6[4] = 0;
  [+[WiFiLOIManager sharedWiFiLOIManager](WiFiLOIManager, "sharedWiFiLOIManager") asyncQueryLOITypeAtLatestLocationWithCompletion:v6];
LABEL_6:
}

void sub_10013D4A0(uint64_t a1, uint64_t a2)
{
  if (!sub_1000704FC(*(void *)(a1 + 64))) {
    goto LABEL_28;
  }
  uint64_t v5 = (void *)sub_10001E404(a2, @"JOIN_STATUS_SUBSTATE_INFO");
  if (v5)
  {
    CFArrayRef v6 = v5;
    if ([v5 count])
    {
      unint64_t v7 = 0;
      uint64_t v25 = a2;
      unsigned int v26 = v4;
      do
      {
        id v8 = [v6 objectAtIndex:v7];
        if (v8)
        {
          uint64_t v9 = v8;
          id v10 = [v8 objectForKey:@"JOIN_STATUS_SUBSTATE_FLAGS"];
          if (v10)
          {
            if ([v10 intValue])
            {
              id v11 = [v9 objectForKey:@"BSSID"];
              if (v11)
              {
                CFRange v12 = v11;
                uint64_t v13 = [v11 bytes];
                if (*(_DWORD *)v13 || v13[2] != 0)
                {
                  uint64_t v15 = ether_ntoa((const ether_addr *)[v12 bytes]);
                  uint64_t v16 = v15
                      ? +[NSString stringWithUTF8String:v15]
                      : 0;
                  id v17 = sub_10013D8D0(v9, (uint64_t)v16);
                  if (v17)
                  {
                    CFIndex v18 = v17;
                    if ([v17 count])
                    {
                      CFIndex v19 = sub_10001961C((uint64_t)kCFAllocatorDefault, a2);
                      sub_10001C6A4((uint64_t)v19, @"BSSID", v16);
                      id v20 = sub_10000AD1C((uint64_t)v19);
                      if ([v18 count])
                      {
                        unint64_t v21 = 0;
                        do
                        {
                          id v22 = sub_100103A84(a1, 8, (uint64_t)[v18 objectAtIndex:v21], (uint64_t)v16, 2);
                          [*(id *)(a1 + 6648) setNetworkDenyListInfo:v22 forScanResult:v20];

                          ++v21;
                        }
                        while (v21 < (unint64_t)[v18 count]);
                      }
                      CFNumberRef v23 = *(void **)(a1 + 7368);
                      if (v23) {
                        [v23 addFaultEvent:9 forInterface:sub_100017C48(*(void *)(a1 + 64))];
                      }
                      uint64_t v4 = v26;
                      if (v19) {
                        CFRelease(v19);
                      }

                      a2 = v25;
                    }
                  }
                }
              }
            }
          }
        }
        ++v7;
      }
      while (v7 < (unint64_t)[v6 count]);
    }
LABEL_28:
    if (!a2) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s substatesArray for join status is nil", "__WiFiDeviceManagerProcessJoinStatusSubState")];
  }
  if (a2) {
LABEL_29:
  }
    sub_10001C6A4(a2, @"JOIN_STATUS_SUBSTATE_INFO", 0);
LABEL_30:
}

void sub_10013D73C(void *a1, int a2)
{
  uint64_t v3 = a1[5];
  uint64_t v4 = *(NSObject **)(v3 + 240);
  if (v4)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10013D7EC;
    v7[3] = &unk_100241938;
    uint64_t v5 = a1[6];
    int v8 = a2;
    v7[5] = v5;
    v7[6] = v3;
    v7[4] = a1[4];
    dispatch_sync(v4, v7);
  }
  else
  {
    CFArrayRef v6 = (const void *)a1[6];
    if (v6)
    {
      CFRelease(v6);
    }
  }
}

uint64_t sub_10013D7EC(uint64_t a1)
{
  uint64_t v3 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    uint64_t v4 = sub_10001A43C(*(const void **)(a1 + 40));
    [v3 WFLog:3, "%s: LOI Type for '%@' = %@(%d)", "__WiFiDeviceManagerAsyncQueryLOITypeForLatestLocation_block_invoke_2", v4, sub_10005AF18(*(_DWORD *)(a1 + 56)), *(unsigned int *)(a1 + 56) message];
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  *(_DWORD *)(*(void *)(a1 + 48) + 6664) = *(_DWORD *)(a1 + 56);
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a1 + 56);
    if (v6)
    {
      sub_1000CF69C(v5, v6);
      uint64_t v5 = *(const void **)(a1 + 40);
    }
    CFRelease(v5);
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    int v8 = *(uint64_t (**)(void))(result + 16);
    return v8();
  }
  return result;
}

id sub_10013D8D0(void *a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s dict is nil", "__CopyReasonsFromSubStatesForBssBlacklist");
    }
    goto LABEL_51;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s bssid is nil" args:__CopyReasonsFromSubStatesForBssBlacklist];
    }
LABEL_51:
    id v12 = 0;
    goto LABEL_46;
  }
  id v5 = [a1 objectForKey:@"AUTHEVENT_STATUS"];
  id v6 = [a1 objectForKey:@"AUTHEVENT_REASON"];
  id v7 = [a1 objectForKey:@"ASSOCEVENT_STATUS"];
  id v8 = [a1 objectForKey:@"ASSOCEVENT_REASON"];
  id v23 = [a1 objectForKey:@"SETSSID_STATUS"];
  id v24 = [a1 objectForKey:@"SETSSID_REASON"];
  id v9 = [a1 objectForKey:@"SUPPLICANTEVENT_STATUS"];
  id v10 = [a1 objectForKey:@"SUPPLICANTEVENT_REASON"];
  id v11 = [a1 objectForKey:@"REASSOCEVENT_STATUS"];
  id v25 = [a1 objectForKey:@"REASSOCEVENT_REASON"];
  id v12 = 0;
  if (v5 && v6)
  {
    if (sub_10013DEC0((int)[v5 intValue], (int)objc_msgSend(v6, "intValue")))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Auth Status/Reason for %@ BssBlacklist Eligible - Status:%d ieeeStatus:%d", "__CopyReasonsFromSubStatesForBssBlacklist", a2, (unint64_t)[v5 intValue] & 0x1FF, (unint64_t)[v6 intValue] & 0x1FF message];
      }
      id v12 = objc_alloc_init((Class)NSMutableArray);
      [v12 addObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v6 intValue])]];
    }
    else
    {
      id v12 = 0;
    }
  }
  if (v7 && v8 && sub_10013DEC0((int)[v7 intValue], (int)objc_msgSend(v8, "intValue")))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Assoc Status/Reason for %@ BssBlacklist Eligible - Status:%d ieeeStatus:%d", "__CopyReasonsFromSubStatesForBssBlacklist", a2, (unint64_t)[v7 intValue] & 0x1FF, (unint64_t)[v8 intValue] & 0x1FF message];
    }
    if (!v12) {
      id v12 = objc_alloc_init((Class)NSMutableArray);
    }
    [v12 addObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v8 intValue])]];
  }
  if (v11 && v25 && sub_10013DEC0((int)[v11 intValue], (int)objc_msgSend(v25, "intValue")))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Reassoc Status/Reason for %@ BssBlacklist Eligible - Status:%d ieeeStatus:%d", "__CopyReasonsFromSubStatesForBssBlacklist", a2, (unint64_t)[v11 intValue] & 0x1FF, (unint64_t)[v25 intValue] & 0x1FF message];
    }
    uint64_t v16 = v24;
    if (!v12) {
      id v12 = objc_alloc_init((Class)NSMutableArray);
    }
    [v12 addObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v25 intValue])]];
    if (!v23) {
      goto LABEL_35;
    }
    goto LABEL_28;
  }
  uint64_t v16 = v24;
  if (v23)
  {
LABEL_28:
    if (v16 && sub_10013DEC0((int)[v23 intValue], (int)objc_msgSend(v16, "intValue")))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s SetSsid Status/Reason for %@ BssBlacklist Eligible - Status:%d ieeeStatus:%d", "__CopyReasonsFromSubStatesForBssBlacklist", a2, (unint64_t)[v23 intValue] & 0x1FF, (unint64_t)[v16 intValue] & 0x1FF message];
      }
      if (!v12) {
        id v12 = objc_alloc_init((Class)NSMutableArray);
      }
      [v12 addObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v16 intValue])]];
    }
  }
LABEL_35:
  if (v9 && v10)
  {
    if ((unsigned int v18 = [v9 intValue],
          unsigned int v19 = [v10 intValue],
          v18 + 528350207 <= 7)
      && ((1 << (v18 - 1)) & 0x9F) != 0
      || v18 == -528350133)
    {
      if (v19 + 528339945 >= 0xFFFFFFE9)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s Supplicant Event Status/Reason for %@ BssBlacklist Eligible - Status:%d ieeeStatus:%d", "__CopyReasonsFromSubStatesForBssBlacklist", a2, (unint64_t)[v9 intValue] & 0x1FF, (unint64_t)[v10 intValue] & 0x1FF message];
        }
        if (!v12) {
          id v12 = objc_alloc_init((Class)NSMutableArray);
        }
        [v12 addObject:[NSNumber numberWithInt:objc_msgSend(v10, "intValue")]];
      }
    }
  }
LABEL_46:
  return v12;
}

uint64_t sub_10013DEC0(int a1, int a2)
{
  if (((a1 + 528350207) > 7 || ((1 << (a1 - 1)) & 0x9F) == 0) && a1 != -528350133) {
    return 0;
  }
  uint64_t result = 1;
  if (((a2 + 528347119) > 0x14 || ((1 << (a2 - 17)) & 0x172001) == 0)
    && ((a2 + 528347054) > 0x11 || ((1 << (a2 - 82)) & 0x20C03) == 0))
  {
    return 0;
  }
  return result;
}

void sub_10013DF58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 240))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, void, const __CFString *, const CFBooleanRef, void))(v2 + 4744))(v2, *(void *)(*(void *)(v4 + 8) + 24), @"FailureCountCurrent", kCFBooleanTrue, *(void *)(v2 + 4752));
    CFRelease(v3[1]);
    id v5 = *v3;
  }
  else
  {
    CFRelease((CFTypeRef)v2);
    id v6 = *(void **)(a1 + 32);
    uint64_t v3 = (CFTypeRef *)(a1 + 32);
    id v5 = v6;
  }
  id v7 = *(const void **)(v5[1] + 24);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(*((void *)*v3 + 1) + 24) = 0;
  }
}

void sub_10013DFE4(uint64_t a1, void *a2)
{
  if (a2)
  {
    [*(id *)(*(void *)(a1 + 32) + 7368) setJoinEvent:0 withReason:1 lastDisconnectReason:0 lastJoinFailure:*(int *)(a1 + 40) andNetworkDetails:a2 forInterface:sub_100017C48(*(void *)(*(void *)(a1 + 32) + 64))];
  }
}

uint64_t sub_10013E05C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 3280);
  uint64_t v6 = sub_1000DAD30(a2);
  uint64_t v7 = sub_1000C2DE8(a2);
  if (v7)
  {
    id v8 = (void *)v7;
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: responseType=%d ssid=%@", "__WiFiDeviceManagerProcessPasswordNotification", v6, sub_10001A43C(v8) message];
    }
    switch((int)v6)
    {
      case 1:
        CFDictionaryRef v10 = sub_1000DB060(a2, kCFUserNotificationTextFieldValuesKey);
        if (!v10) {
          break;
        }
        CFArrayRef v11 = v10;
        CFTypeID TypeID = CFArrayGetTypeID();
        if (TypeID == CFGetTypeID(v11))
        {
          if (CFArrayGetCount(v11) <= 1)
          {
            if (CFArrayGetCount(v11) < 1) {
              goto LABEL_24;
            }
            CFArrayRef v14 = v11;
            CFIndex v15 = 0;
          }
          else
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v11, 0);
            sub_10001C6A4((uint64_t)v8, @"UserName", ValueAtIndex);
            CFArrayRef v14 = v11;
            CFIndex v15 = 1;
          }
          CFStringRef v24 = (const __CFString *)CFArrayGetValueAtIndex(v14, v15);
          id v23 = v8;
        }
        else
        {
          CFTypeID v22 = CFStringGetTypeID();
          if (v22 != CFGetTypeID(v11)) {
            goto LABEL_24;
          }
          id v23 = v8;
          CFStringRef v24 = (const __CFString *)v11;
        }
        sub_1000C93E0(v23, v24);
LABEL_24:
        id v25 = sub_10011FC58(a1, v8, 1);
        if (v25)
        {
          uint64_t v19 = sub_100133D50(a1, v8, 0, (uint64_t)v25);
          goto LABEL_13;
        }
        break;
      case 2:
        sub_10013D1C4(a1, v8, 1);
        id v16 = sub_10000AD1C((uint64_t)v8);
        id v17 = sub_10001E404((uint64_t)v8, @"BSSID");
        id v18 = sub_100103A84(a1, 0, 0, (uint64_t)v17, 3);
        [*(id *)(a1 + 6648) setNetworkDenyListInfo:v18 forScanResult:v16];

        goto LABEL_10;
      case 3:
LABEL_10:
        if (_os_feature_enabled_impl()) {
          sub_10013CCE8(a1, (uint64_t)v8, 89, 0, 0);
        }
        uint64_t v19 = sub_10013B26C(a1);
LABEL_13:
        uint64_t v5 = v19;
        break;
      case 4:
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:3 message:@"%s: opening settings to collect credentials" : @"__WiFiDeviceManagerProcessPasswordNotification"];
        }
        sub_10013ECC8(0, (CFDictionaryRef *)v8);
        uint64_t v5 = 14;
        break;
      default:
        break;
    }
  }
  return v5;
}

uint64_t sub_10013E330(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 3280);
  unsigned int v6 = sub_1000DAD30(a2);
  uint64_t v7 = (const void *)sub_1000C2DE8(a2);
  if (v7)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: ResponseType=%@", "__WiFiDeviceManagerProcessEAPTrustNotification", sub_1000DB1B8(v6) message];
    }
    switch(v6)
    {
      case 1u:
      case 4u:
        CFDictionaryRef v9 = (const __CFDictionary *)sub_100016E20(a2);
        if (v9)
        {
          CFNumberRef Value = CFDictionaryGetValue(v9, @"TLSServerCertificateChain");
          if (Value)
          {
            CFArrayRef v11 = Value;
            CFDictionaryRef v12 = sub_10000E5B8((uint64_t)v7);
            CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v12);
            if (v12) {
              CFRelease(v12);
            }
            CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"EnterpriseProfile");
            if (v14)
            {
              CFDictionaryRef v15 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v14);
              if (v15)
              {
                id v16 = v15;
                CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue(v15, @"EAPClientConfiguration");
                if (v17)
                {
                  id v18 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v17);
                  if (v18)
                  {
                    uint64_t v19 = v18;
                    CFDictionarySetValue(v18, @"TLSSaveTrustExceptions", kCFBooleanTrue);
                    CFDictionarySetValue(v19, @"TLSUserTrustProceedCertificateChain", v11);
                    CFDictionarySetValue(v16, @"EAPClientConfiguration", v19);
                    CFRelease(v19);
                    CFDictionarySetValue(MutableCopy, @"EnterpriseProfile", v16);
                    CFRelease(v16);
                    id v20 = (CFDictionaryRef *)sub_100019658((int)kCFAllocatorDefault, MutableCopy);
                    if (v20)
                    {
                      unint64_t v21 = v20;
                      if (v6 == 4)
                      {
                        sub_10013ECC8(1, v20);
                        CFRelease(v21);
                        id v16 = 0;
                        uint64_t v5 = 14;
                        if (!MutableCopy) {
                          goto LABEL_31;
                        }
LABEL_30:
                        CFRelease(MutableCopy);
                        goto LABEL_31;
                      }
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: proceeding with joining %@", "__WiFiDeviceManagerProcessEAPTrustNotification", v21 message];
                      }
                      *(void *)(a1 + 1128) = 0;
                      unsigned int v26 = sub_10011FC58(a1, v21, 1);
                      if (!v26)
                      {
                        sub_1001409B8(a1, @"autoJoinAssociating", v21, 0);
                        id v16 = 0;
                        uint64_t v5 = 12;
                        if (!MutableCopy) {
                          goto LABEL_31;
                        }
                        goto LABEL_30;
                      }
                      uint64_t v5 = sub_100133D50(a1, v21, 0, (uint64_t)v26);
                    }
                    else
                    {
                      if (qword_10027DD68) {
                        [((id)qword_10027DD68) WFLog:4 message:@"%s: failed to create network" : @"__WiFiDeviceManagerProcessEAPTrustNotification"];
                      }
                    }
                    id v16 = 0;
                    if (MutableCopy) {
                      goto LABEL_30;
                    }
LABEL_31:
                    if (v16) {
                      CFRelease(v16);
                    }
                    goto LABEL_33;
                  }
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: failed to make mutable copy of eap client config", "__WiFiDeviceManagerProcessEAPTrustNotification", v33);
                  }
                }
                else
                {
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:4, "%s: eap client config is null for network %@", "__WiFiDeviceManagerProcessEAPTrustNotification", sub_10001A43C(v7) message];
                  }
                }
LABEL_53:
                if (MutableCopy) {
                  goto LABEL_30;
                }
                goto LABEL_31;
              }
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:4, "%s: failed to make mutable copy of eap profile", "__WiFiDeviceManagerProcessEAPTrustNotification", v33];
              }
            }
            else
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:4, "%s: eap profile is null for network %@", "__WiFiDeviceManagerProcessEAPTrustNotification", sub_10001A43C(v7) message];
              }
            }
            id v16 = 0;
            goto LABEL_53;
          }
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s: certificateChain is null for network %@", "__WiFiDeviceManagerProcessEAPTrustNotification", sub_10001A43C(v7) message];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s: notification for %@ is missing additional information", "__WiFiDeviceManagerProcessEAPTrustNotification", sub_10001A43C(v7) message];
          }
        }
        unsigned int v28 = v29;
        goto LABEL_42;
      case 2u:
        sub_10013D1C4(a1, v7, 1);
        id v22 = sub_10000AD1C((uint64_t)v7);
        id v23 = sub_10001E404((uint64_t)v7, @"BSSID");
        id v24 = sub_100103A84(a1, 0, 0, (uint64_t)v23, 3);
        [*(id *)(a1 + 6648) setNetworkDenyListInfo:v24 forScanResult:v22];

        goto LABEL_18;
      case 3u:
LABEL_18:
        if (sub_10001FC1C((uint64_t)v7)) {
          sub_10006DB68(*(void *)(a1 + 64), v7, 1);
        }
        if (_os_feature_enabled_impl()) {
          sub_10013CCE8(a1, (uint64_t)v7, 89, 0, 0);
        }
        uint64_t v5 = sub_10013B26C(a1);
        goto LABEL_33;
      default:
        goto LABEL_33;
    }
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: network is null" args:("__WiFiDeviceManagerProcessEAPTrustNotification")];
  }
  unsigned int v28 = v8;
LABEL_42:
LABEL_33:
  return v5;
}

CFArrayRef sub_10013E8B8(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 3280);
  int v5 = sub_1000DAD30(a2);
  if (v5 == 4)
  {
    sub_10013ECC8(0, 0);
  }
  else if (v5 == 1)
  {
    unsigned int v6 = (const void *)sub_1000C2DE8(a2);
    if (*(void *)(a1 + 3872))
    {
      if (*(void *)(a1 + 240))
      {
        uint64_t v12 = 0;
        uint64_t v13 = &v12;
        uint64_t v14 = 0x2020000000;
        uint64_t v15 = 0;
        if (v6)
        {
          CFTypeRef v7 = CFRetain(v6);
          v13[3] = (uint64_t)v7;
        }
        CFRetain((CFTypeRef)a1);
        id v8 = *(NSObject **)(a1 + 240);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10013EFB8;
        block[3] = &unk_10023F220;
        block[4] = &v12;
        block[5] = a1;
        dispatch_async(v8, block);
        _Block_object_dispose(&v12, 8);
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." arguments:("__WiFiDeviceManagerProcessAskToJoinNotification", 0x0)];
        }
      }
    }
    return 0;
  }
  if (!v4) {
    return 0;
  }

  return sub_100003818(a1);
}

void sub_10013EA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10013EA48(uint64_t a1, int a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 3280);
  id v5 = [*(id *)(a1 + 6744) getHotspotDeviceName:*(void *)(a1 + 6904)];
  if (a2 == 3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: User response System timeout" : @"__WiFiDeviceManagerProcessAskToJoinHotspotNotification"];
    }
    if (_os_feature_enabled_impl() && *(void *)(a1 + 6904))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Adding %@:[%@] to no response Hotspot List", "__WiFiDeviceManagerProcessAskToJoinHotspotNotification", v5, *(void *)(a1 + 6904) message];
      }
      CFDictionaryRef v10 = [[WiFiUserNotRespondedHotspotInfoType alloc] initWithHotspot:*(void *)(a1 + 6904)];
      [*(id *)(a1 + 6936) addObject:v10];
    }
    sub_1000FB0D0(a1, 0);
    uint64_t v4 = *(unsigned int *)(a1 + 6892);
    sub_10013F058((uint64_t *)a1, @"userJoinAborted", 0);
    if (!_os_feature_enabled_impl()) {
      return v4;
    }
    CFStringRef v11 = (const __CFString *)NSPOSIXErrorDomain;
    CFStringRef v12 = @"System canceled hotspot notification";
LABEL_22:
    sub_10013F200(a1, (uint64_t)v5, 89, v11, (uint64_t)v12);
    return v4;
  }
  if (a2 == 2)
  {
    if (*(void *)(a1 + 6904))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Adding %@:[%@] to User Suppressed List until next link state change", "__WiFiDeviceManagerProcessAskToJoinHotspotNotification", v5, *(void *)(a1 + 6904) message];
      }
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 6912), *(const void **)(a1 + 6904));
    }
    *(void *)(a1 + 6904) = 0;
    *(void *)(a1 + 6872) = 0;
    sub_1000FB0D0(a1, 0);
    uint64_t v4 = *(unsigned int *)(a1 + 6892);
    *(_DWORD *)(a1 + 6456) = -3909;
    sub_1000519A4((unsigned int *)(a1 + 6456));
    sub_10013F058((uint64_t *)a1, @"userJoinAborted", 0);
    if (!_os_feature_enabled_impl()) {
      return v4;
    }
    CFStringRef v11 = (const __CFString *)NSPOSIXErrorDomain;
    CFStringRef v12 = @"User canceled hotspot notification";
    goto LABEL_22;
  }
  if (a2 != 1) {
    return v4;
  }
  uint64_t v6 = *(void *)(a1 + 6904);

  return sub_100135F30(a1, v6);
}

void sub_10013ECC8(uint64_t a1, CFDictionaryRef *a2)
{
  if (a1 <= 2 && *off_100242338[(int)a1])
  {
    CFStringRef v4 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"prefs:root=WIFI&path=%@", *off_100242338[(int)a1]);
    if (v4)
    {
      CFStringRef v5 = v4;
      CFURLRef v6 = CFURLCreateWithString(kCFAllocatorDefault, v4, 0);
      if (!v6)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: failed to create url for type %d" : @"__WiFiDeviceManagerOpenSettings" : a1];
        }
        CFDictionaryRef v10 = (__CFString *)v5;
LABEL_14:
        CFRelease(v10);
        return;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: launching settings with url %@", "__WiFiDeviceManagerOpenSettings", v6 message];
      }
      if (a2)
      {
        id v8 = (__CFString *)CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@/%@", @"/var/mobile/Library/Caches/com.apple.wifi/", @"LastEnterpriseNetwork.plist");
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: archiving network to path %@", "__WiFiDeviceManagerOpenSettings", v8 message];
        }
        if (!sub_1000CECEC(a2, v8))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s: failed to archive network to path %@", "__WiFiDeviceManagerOpenSettings", v8 message];
          }
          goto LABEL_12;
        }
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: skip persisting network to disk", "__WiFiDeviceManagerOpenSettings")];
        }
        id v8 = 0;
      }
      [+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace") openSensitiveURL:v6 withOptions:0];
LABEL_12:
      CFRelease(v5);
      CFRelease(v6);
      if (!v8) {
        return;
      }
      CFDictionaryRef v10 = v8;
      goto LABEL_14;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: failed to create urlString for type %d", "__WiFiDeviceManagerOpenSettings", a1);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: failed to create urlPathString for type %d", "__WiFiDeviceManagerOpenSettings", a1];
    }
  }
}

void sub_10013EFB8(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  if (v2[30])
  {
    uint64_t v3 = (void (*)(uint64_t *, uint64_t, void, void, void, void))v2[484];
    uint64_t v4 = sub_100017C48(v2[8]);
    uint64_t v6 = *(void *)(a1 + 32);
    CFStringRef v5 = (CFTypeRef *)(a1 + 32);
    v3(v2, v4, *(void *)(*(void *)(v6 + 8) + 24), 0, 0, *((void *)v5[1] + 485));
    CFRelease(v5[1]);
    CFTypeRef v7 = *v5;
  }
  else
  {
    CFRelease(*(CFTypeRef *)(a1 + 40));
    id v8 = *(void **)(a1 + 32);
    CFStringRef v5 = (CFTypeRef *)(a1 + 32);
    CFTypeRef v7 = v8;
  }
  CFDictionaryRef v9 = *(const void **)(v7[1] + 24);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(*((void *)*v5 + 1) + 24) = 0;
  }
}

void sub_10013F058(uint64_t *a1, const void *a2, const void *a3)
{
  if (a1)
  {
    if (a2)
    {
      if (!a1[511]) {
        return;
      }
      CFMutableStringRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        CFTypeRef v7 = Mutable;
        CFDictionarySetValue(Mutable, @"userJoinStatus", a2);
        if (a3) {
          CFDictionarySetValue(v7, @"userJoinNetwork", a3);
        }
        id v8 = (void (*)(uint64_t *, uint64_t, uint64_t, __CFDictionary *))a1[511];
        uint64_t v9 = sub_100017C48(a1[8]);
        v8(a1, v9, a1[512], v7);
        CFRelease(v7);
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: null detailedState." args:("__WiFiDeviceManagerPostUserJoinNotification")];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, "%s: null status.", "__WiFiDeviceManagerPostUserJoinNotification"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: null manager.", "__WiFiDeviceManagerPostUserJoinNotification"];
    }
  }
}

void sub_10013F200(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorDomain a4, uint64_t a5)
{
  if (!a4) {
    a4 = kCFErrorDomainPOSIX;
  }
  if (a5)
  {
    NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
    uint64_t v15 = a5;
    CFStringRef v11 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    CFErrorDomain v12 = a4;
    uint64_t v13 = a3;
  }
  else
  {
    CFErrorDomain v12 = a4;
    uint64_t v13 = a3;
    CFStringRef v11 = 0;
  }
  +[NSError errorWithDomain:v12 code:v13 userInfo:v11];
  sub_10013F30C(a1, a2);
}

void sub_10013F30C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      if (*(void *)(a1 + 8856))
      {
        uint64_t v5 = *(void *)(a1 + 8848);
        if (v5)
        {
          if ([*(id *)(a1 + 6744) isEqualHotspotDevicesName:v5 compareTo:a2])
          {
            (*(void (**)(void))(*(void *)(a1 + 8856) + 16))();
            _Block_release(*(const void **)(a1 + 8856));
            *(void *)(a1 + 8856) = 0;
            CFRelease(*(CFTypeRef *)(a1 + 8848));
            *(void *)(a1 + 8848) = 0;
          }
        }
      }
    }
  }
}

void sub_10013F3AC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2[30])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: Adding network '%@' to known network list", "__WiFiDeviceManagerProcessAutoHotspotJoinRecommendationNotification_block_invoke", sub_10001A43C(*(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) message];
    }
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v6 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, void, void))(v4 + 4584))(v4, *(void *)(*(void *)(v5 + 8) + 24), *(void *)(v4 + 4592));
    CFRelease(v6[1]);
    CFTypeRef v7 = *v6;
  }
  else
  {
    CFRelease(v2);
    id v8 = *(void **)(a1 + 32);
    uint64_t v6 = (CFTypeRef *)(a1 + 32);
    CFTypeRef v7 = v8;
  }
  uint64_t v9 = *(const void **)(v7[1] + 24);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(*((void *)*v6 + 1) + 24) = 0;
  }
}

void sub_10013F484(void *a1)
{
  *(void *)(*(void *)(a1[4] + 8) + 40) = [*(id *)(a1[7] + 6744) newHotspot:*(void *)(*(void *)(a1[5] + 8) + 40) error:*(void *)(a1[6] + 8) + 40];
  uint64_t v2 = (void *)a1[7];
  v2[874] = *(void *)(*(void *)(a1[6] + 8) + 40);
  v2[875] = *(void *)(*(void *)(a1[4] + 8) + 40);
  uint64_t v3 = v2[30];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10013F55C;
  block[3] = &unk_10023EAF8;
  block[4] = v2;
  dispatch_sync(v3, block);
}

CFAbsoluteTime sub_10013F55C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(unsigned char *)(v2 + 7008) = 0;
  if (*(_DWORD *)(v2 + 3280) == 19)
  {
    sub_1000FB1B0(v2);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Received Enabled Hotspot Devices in state %d", "__WiFiDeviceManagerEnableRemoteHotspotDevice_block_invoke_2", *(unsigned int *)(*(void *)(a1 + 32) + 3280));
    }
    uint64_t v5 = *(void *)(a1 + 32);
    return sub_1000FB0D0(v5, 0);
  }
  return result;
}

void sub_10013F618(uint64_t a1, const __CFString *a2, unsigned int a3)
{
  *(_DWORD *)(a1 + 6972) = a3;
  if (_os_feature_enabled_impl()) {
    sub_10013F200(a1, (uint64_t)a2, a3, CWFManagerErrorDomain, 0);
  }
  uint64_t v6 = *(const void **)(a1 + 6856);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 6856) = 0;
  }
  if (qword_10027DD68) {
    [qword_10027DD68 WFLog:message:3, @"Dispatch Notification: Auto Hotspot Failure %d", *(unsigned int *)(a1 + 6972)];
  }
  if (!*(unsigned char *)(a1 + 6968) && *(_DWORD *)(a1 + 6804) == 1)
  {
    id v8 = sub_1000C5D34(a2);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = sub_100017C48(*(void *)(a1 + 64));
      sub_100123384(a1, v10, 11, 0, v9, 0);
      CFRelease(v9);
      sub_10013F058((uint64_t *)a1, @"userJoinAssociationFailed", 0);
    }
  }
}

uint64_t sub_10013F760(uint64_t a1, const __CFArray *a2, int a3)
{
  int valuePtr = 0;
  if (a1)
  {
    if (a3)
    {
      uint64_t v5 = sub_100120A54(a2, 0, *(_DWORD *)(a1 + 128), 0x6Eu, 1);
      CFDictionaryRef v6 = 0;
      CFNumberRef v7 = 0;
      CFMutableArrayRef Mutable = 0;
      if (!v5)
      {
LABEL_24:
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, @"%s: failed to create scan request", @"__WiFiDeviceManagerAutoInstantHotspotJoin"];
        }
        uint64_t v10 = 0;
        if (!v7) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
    }
    else
    {
      int valuePtr = 130;
      CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
      if (!v11) {
        return 0;
      }
      CFNumberRef v7 = v11;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (!Mutable)
      {
        CFDictionaryRef v6 = 0;
        uint64_t v10 = 0;
LABEL_18:
        CFRelease(v7);
LABEL_19:
        if (v6) {
          CFRelease(v6);
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
        return v10;
      }
      CFErrorDomain v12 = (void *)sub_10001E404((uint64_t)a2, @"CHANNEL");
      *(_OWORD *)keys = *(_OWORD *)&off_100241B28;
      values[0] = v12;
      values[1] = v7;
      CFDictionaryRef v6 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFArrayAppendValue(Mutable, v6);
      uint64_t v13 = sub_100120A54(a2, Mutable, *(_DWORD *)(a1 + 128), 0x6Eu, 1);
      if (!v13) {
        goto LABEL_24;
      }
      uint64_t v5 = v13;
      CFDictionarySetValue(v13, @"SCAN_LOW_LATENCY", kCFBooleanTrue);
    }
    NSErrorUserInfoKey v14 = malloc_type_malloc(0x28uLL, 0x10E0040573E0799uLL);
    if (v14)
    {
      uint64_t v15 = v14;
      *NSErrorUserInfoKey v14 = a1;
      v14[1] = 0;
      v14[3] = 0;
      if (CFDictionaryContainsKey(v5, @"SSID_STR")) {
        BOOL v16 = 1;
      }
      else {
        BOOL v16 = CFDictionaryContainsKey(v5, @"SCAN_SSID_LIST") != 0;
      }
      v15[32] = v16;
      CFDictionaryRef v17 = (const void *)sub_100017C48(*(void *)(a1 + 64));
      uint64_t v10 = sub_100113508(a1, v17, v5, 0, (uint64_t)sub_10013FAD8, (uint64_t)v15, 0, 18);
      if (v10)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"Error initiating scan request: %d", v10];
        }
        free(v15);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null scanData" args:("__WiFiDeviceManagerAutoInstantHotspotJoin")];
      }
      uint64_t v10 = 0;
    }
    CFRelease(v5);
    if (!v7) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: manager NULL" : @"__WiFiDeviceManagerAutoInstantHotspotJoin"];
  }
  return 4294963396;
}

void sub_10013FAD8(int a1, int a2, const __CFArray *a3, int a4, int a5, uint64_t *a6)
{
  uint64_t v6 = *a6;
  if (!*(void *)(*a6 + 6856))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: No Network" : @"__WiFiDeviceManagerAutoInstantHotspotScanCallback"];
    }
    return;
  }
  free(a6);
  CFStringRef v9 = (const __CFString *)sub_10001E404(*(void *)(v6 + 6856), @"SSID_STR");
  CFStringRef v10 = v9;
  if (v9) {
    CFRetain(v9);
  }
  if (a3 && CFArrayGetCount(a3))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Looking for autoInstantHotspot.hotspotAssocNetwork %@", "__WiFiDeviceManagerAutoInstantHotspotScanCallback", *(void *)(v6 + 6856) message];
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: found %ld networks", "__WiFiDeviceManagerAutoInstantHotspotScanCallback", CFArrayGetCount(a3)];
    }
    if (CFArrayGetCount(a3) < 1)
    {
LABEL_15:
      *(_DWORD *)(v6 + 3280) = *(_DWORD *)(v6 + 6892);
      sub_10013F618(v6, v10, 3u);
      *(_DWORD *)(v6 + 6456) = -3906;
      sub_1000519A4((unsigned int *)(v6 + 6456));
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: did not find the top network", "__WiFiDeviceManagerAutoInstantHotspotScanCallback"];
      }
      if (!v10) {
        return;
      }
    }
    else
    {
      CFIndex v13 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v13);
        if (ValueAtIndex)
        {
          uint64_t v15 = ValueAtIndex;
          if (sub_1000C8ED4(*(void *)(v6 + 6856), (uint64_t)ValueAtIndex)) {
            break;
          }
        }
        if (CFArrayGetCount(a3) <= ++v13) {
          goto LABEL_15;
        }
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: found the top network to match scanned network %@", "__WiFiDeviceManagerAutoInstantHotspotScanCallback", sub_10001A43C(v15) message];
      }
      sub_1000C63FC((uint64_t)v15, *(void *)(v6 + 6856));
      if ((_os_feature_enabled_impl() & 1) == 0) {
        sub_10010222C(v6);
      }
      CFStringRef v27 = *(const void **)(v6 + 6856);
      if (v27) {
        CFRelease(v27);
      }
      *(void *)(v6 + 6856) = 0;
      unsigned int v28 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v15);
      *(void *)(v6 + 6856) = v28;
      sub_10001C6A4((uint64_t)v28, @"WiFiAutoInstantHotspotJoining", kCFBooleanTrue);
      sub_10001C6A4(*(void *)(v6 + 6856), @"WiFiInstantHotspotJoining", kCFBooleanFalse);
      CFStringRef v29 = (const void *)sub_100017C48(*(void *)(v6 + 64));
      uint64_t v30 = sub_100113EA0(v6, v29, *(void **)(v6 + 6856), 0, 0, (uint64_t)sub_100140190, 0, 1018);
      if (v30)
      {
        uint64_t v31 = v30;
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Error returned by Associate Async %d", "__WiFiDeviceManagerAutoInstantHotspotAssociate", v31);
        }
        *(void *)(v6 + 6872) = 0;
        *(_DWORD *)(v6 + 3280) = *(_DWORD *)(v6 + 6892);
        sub_1001020F0(v6);
        *(_DWORD *)(v6 + 3280) = *(_DWORD *)(v6 + 6892);
        sub_10013F618(v6, v10, 4u);
        unint64_t v21 = (unsigned int *)(v6 + 6456);
        *(_DWORD *)(v6 + 6456) = v31;
        goto LABEL_26;
      }
      sub_10013F058((uint64_t *)v6, @"userJoinAssociating", *(const void **)(v6 + 6856));
      if (!v10) {
        return;
      }
    }
LABEL_31:
    CFRelease(v10);
    return;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double v18 = *(double *)(v6 + 7016);
  if (Current <= v18 || Current - v18 >= 20.0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: no scan result. ", "__WiFiDeviceManagerAutoInstantHotspotScanCallback"];
    }
    *(_DWORD *)(v6 + 3280) = *(_DWORD *)(v6 + 6892);
    sub_10013F618(v6, v10, 3u);
    unint64_t v21 = (unsigned int *)(v6 + 6456);
    *(_DWORD *)(v6 + 6456) = a5;
LABEL_26:
    sub_1000519A4(v21);
    if (!v10) {
      return;
    }
    goto LABEL_31;
  }
  char v22 = *(unsigned char *)(v6 + 6968);
  if (qword_10027DD68) {
    [qword_10027DD68 WFLog:message:3, "%s: no scan result. retry after 1 second", "__WiFiDeviceManagerAutoInstantHotspotScanCallback"];
  }
  dispatch_time_t v24 = dispatch_time(0, 1000000000);
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10013FFD4;
  block[3] = &unk_100241498;
  char v35 = v22;
  block[4] = v6;
  void block[5] = v10;
  dispatch_after(v24, global_queue, block);
  if (v10) {
    goto LABEL_31;
  }
}

void sub_10013FFD4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[30])
  {
    CFRetain(v2);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001400C8;
    block[3] = &unk_100241498;
    char v5 = *(unsigned char *)(a1 + 48);
    dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 240), block);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue."];
    }
  }
}

void sub_1001400C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[30])
  {
    uint64_t v3 = sub_10013F760(v2, v2[857], *(unsigned __int8 *)(a1 + 48));
    if (v3)
    {
      uint64_t v4 = v3;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, @"%s: error initiating scan = %d", @"__WiFiDeviceManagerAutoInstantHotspotScanCallback_block_invoke_2", v4];
      }
      uint64_t v6 = *(void *)(a1 + 32);
      CFStringRef v7 = *(const __CFString **)(a1 + 40);
      *(_DWORD *)(v6 + 3280) = *(_DWORD *)(v6 + 6892);
      sub_10013F618(v6, v7, 3u);
      id v8 = (unsigned int *)(*(void *)(a1 + 32) + 6456);
      *id v8 = v4;
      sub_1000519A4(v8);
    }
    uint64_t v2 = *(void **)(a1 + 32);
  }

  CFRelease(v2);
}

void sub_100140190(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: manager is NULL" args:("__WiFiDeviceManagerAutoInstantHotspotAssociationCallback")];
    }
    return;
  }
  if (!a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: No Network" :@"__WiFiDeviceManagerAutoInstantHotspotAssociationCallback"];
    }
    CFStringRef v9 = 0;
LABEL_40:
    *(void *)(a1 + 6872) = 0;
    *(_DWORD *)(a1 + 3280) = *(_DWORD *)(a1 + 6892);
    sub_1001020F0(a1);
    if (!v9) {
      return;
    }
    goto LABEL_41;
  }
  CFStringRef v8 = (const __CFString *)sub_10001E404(*(void *)(a1 + 6856), @"SSID_STR");
  CFStringRef v9 = v8;
  if (v8) {
    CFRetain(v8);
  }
  if (!a5)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Hotspot Association to %@ Success.", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback", sub_10001A43C(a3) message];
    }
    *(unsigned char *)(a1 + 6896) = 1;
    *(unsigned char *)(a1 + 6987) = 1;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v17 = CFDateCreate(kCFAllocatorDefault, Current);
    if (v17)
    {
      CFDateRef v18 = v17;
      sub_1000C995C(a3, 0, v17);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: setting auto association date for %@ to %@", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback", sub_10001A43C(a3), v18 message];
      }
      CFRelease(v18);
    }
    sub_10010547C(a1, a3);
    sub_10001C6A4(*(void *)(a1 + 3512), @"WiFiAutoInstantHotspotJoining", kCFBooleanTrue);
    sub_10013F058((uint64_t *)a1, @"userJoinSuccess", a3);
    if (_os_feature_enabled_impl()) {
      sub_10013F30C(a1, (uint64_t)v9);
    }
    id v20 = *(const void **)(a1 + 6856);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(a1 + 6856) = 0;
    }
    *(unsigned char *)(a1 + 5504) = 1;
    unint64_t v21 = *(NSObject **)(a1 + 5512);
    dispatch_time_t v22 = dispatch_time(0, 10000000000);
    dispatch_source_set_timer(v21, v22, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(_DWORD *)(a1 + 688) = 0;
    *(void *)(a1 + 680) = 0;
    *(unsigned char *)(a1 + 6465) = 1;
    if (*(void *)(a1 + 4584))
    {
      if (*(void *)(a1 + 240))
      {
        uint64_t v30 = 0;
        uint64_t v31 = &v30;
        uint64_t v32 = 0x2020000000;
        uint64_t v33 = 0;
        id v23 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)a3);
        v31[3] = (uint64_t)v23;
        if (v23)
        {
          CFRetain((CFTypeRef)a1);
          dispatch_time_t v24 = *(NSObject **)(a1 + 240);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10014087C;
          block[3] = &unk_10023F220;
          void block[4] = &v30;
          void block[5] = a1;
          dispatch_async(v24, block);
        }
        _Block_object_dispose(&v30, 8);
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." arguments:("__WiFiDeviceManagerAutoInstantHotspotAssociationCallback", nil)];
        }
      }
    }
    goto LABEL_40;
  }
  double v10 = CFAbsoluteTimeGetCurrent();
  double v11 = *(double *)(a1 + 7016);
  if (v10 <= v11 || v10 - v11 >= 20.0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Hotspot Association to %@ Failed. %d", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback", sub_10001A43C(a3), a5 message];
    }
    sub_10013F618(a1, v9, 4u);
    *(_DWORD *)(a1 + 6456) = a5;
    sub_1000519A4((unsigned int *)(a1 + 6456));
    goto LABEL_40;
  }
  if (qword_10027DD68) {
    [qword_10027DD68 WFLog:message:3, "%s: retry Assoc after 1 second", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback"];
  }
  dispatch_time_t v25 = dispatch_time(0, 1000000000);
  global_queue = dispatch_get_global_queue(0, 0);
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v34[2] = sub_1001406BC;
  v34[3] = &unk_10023F048;
  v34[4] = a1;
  v34[5] = v9;
  dispatch_after(v25, global_queue, v34);
  if (v9) {
LABEL_41:
  }
    CFRelease(v9);
}

void sub_1001406A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001406BC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[30])
  {
    CFRetain(v2);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001407A8;
    block[3] = &unk_10023F048;
    dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 240), block);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: null queue.", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback_block_invoke"];
    }
  }
}

void sub_1001407A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 240))
  {
    uint64_t v3 = sub_10013F760(v2, *(void *)(v2 + 6856), *(unsigned __int8 *)(v2 + 6968));
    if (v3)
    {
      uint64_t v4 = v3;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: error = %d", @"__WiFiDeviceManagerAutoInstantHotspotAssociationCallback_block_invoke_2", v4];
      }
      uint64_t v6 = *(void *)(a1 + 32);
      CFStringRef v7 = *(const __CFString **)(a1 + 40);
      *(_DWORD *)(v6 + 3280) = *(_DWORD *)(v6 + 6892);
      sub_10013F618(v6, v7, 4u);
      CFStringRef v8 = (unsigned int *)(*(void *)(a1 + 32) + 6456);
      *CFStringRef v8 = v4;
      sub_1000519A4(v8);
      sub_1001020F0(*(void *)(a1 + 32));
    }
    uint64_t v2 = *(void *)(a1 + 32);
  }

  CFRelease((CFTypeRef)v2);
}

void sub_10014087C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2[30])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: Adding network '%@' to known network list", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback_block_invoke_3", sub_10001A43C(*(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) message];
    }
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v6 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, void, void))(v4 + 4584))(v4, *(void *)(*(void *)(v5 + 8) + 24), *(void *)(v4 + 4592));
    CFRelease(v6[1]);
    CFStringRef v7 = *v6;
  }
  else
  {
    CFRelease(v2);
    CFStringRef v8 = *(void **)(a1 + 32);
    uint64_t v6 = (CFTypeRef *)(a1 + 32);
    CFStringRef v7 = v8;
  }
  CFStringRef v9 = *(const void **)(v7[1] + 24);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(*((void *)*v6 + 1) + 24) = 0;
  }
}

void sub_100140954(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 240))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v3 = (const void **)(a1 + 40);
    (*(void (**)(uint64_t, uint64_t, void))(v2 + 4520))(v2, v4, *(void *)(v2 + 4528));
    CFRelease(*(v3 - 1));
  }
  else
  {
    CFRelease((CFTypeRef)v2);
    uint64_t v3 = (const void **)(a1 + 40);
  }
  uint64_t v5 = *v3;

  CFRelease(v5);
}

void sub_1001409B8(uint64_t a1, CFTypeRef cf1, const void *a3, uint64_t a4)
{
  if (a1)
  {
    if (cf1)
    {
      if (!*(void *)(a1 + 4072)) {
        return;
      }
      if (CFEqual(cf1, @"autoJoinNetworkNotFound"))
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: auto-join failed with no network found. Unsuitable network count:%d", "__WiFiDeviceManagerPostAutoJoinNotificationWithMetric", *(unsigned int *)(a1 + 1136));
        }
        if (!*(_DWORD *)(a1 + 1136))
        {
          *(unsigned char *)(a1 + 6897) = 1;
          if (sub_100125970(a1)) {
            sub_1001254F0(a1, 0);
          }
        }
      }
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        double v10 = Mutable;
        CFDictionarySetValue(Mutable, @"autoJoinStatus", cf1);
        if (a3) {
          CFDictionarySetValue(v10, @"autoJoinNetwork", a3);
        }
        double v11 = *(void (**)(uint64_t, uint64_t, void, __CFDictionary *, uint64_t))(a1 + 4072);
        uint64_t v12 = sub_100017C48(*(void *)(a1 + 64));
        v11(a1, v12, *(void *)(a1 + 4080), v10, a4);
        CFRelease(v10);
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: null notificationDict.", "__WiFiDeviceManagerPostAutoJoinNotificationWithMetric"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: null status.", "__WiFiDeviceManagerPostAutoJoinNotificationWithMetric"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null manager.", @"__WiFiDeviceManagerPostAutoJoinNotificationWithMetric"];
    }
  }
}

void sub_100140BFC(uint64_t a1, void *a2)
{
  if (a2)
  {
    [*(id *)(*(void *)(a1 + 32) + 7368) setJoinEvent:0 withReason:0 lastDisconnectReason:0 lastJoinFailure:*(int *)(a1 + 40) andNetworkDetails:a2 forInterface:sub_100017C48(*(void *)(*(void *)(a1 + 32) + 64))];
  }
}

void sub_100140C74(uint64_t a1)
{
  uint64_t v2 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_100140CB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 240))
  {
    (*(void (**)(uint64_t, void, void, void, void, void))(v2 + 3920))(v2, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned int *)(a1 + 64), *(void *)(v2 + 3928));
    CFRelease(*(CFTypeRef *)(a1 + 32));
    uint64_t v3 = *(const void **)(a1 + 40);
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = *(const void **)(a1 + 48);
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = *(const void **)(a1 + 56);
    if (v5)
    {
      CFRelease(v5);
    }
  }
  else
  {
    CFRelease((CFTypeRef)v2);
    uint64_t v6 = *(const void **)(a1 + 40);
    if (v6) {
      CFRetain(v6);
    }
    CFStringRef v7 = *(const void **)(a1 + 48);
    if (v7) {
      CFRetain(v7);
    }
    CFStringRef v8 = *(const void **)(a1 + 56);
    if (v8)
    {
      CFRetain(v8);
    }
  }
}

void sub_100140D7C(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  if (v2[30])
  {
    uint64_t v3 = (void (*)(uint64_t *, uint64_t, void, void, void, void))v2[484];
    uint64_t v4 = sub_100017C48(v2[8]);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v5 = (uint64_t *)(a1 + 32);
    v3(v2, v4, *(void *)(*(void *)(v6 + 8) + 24), 0, *((unsigned int *)v5 + 4), *(void *)(v5[1] + 3880));
    CFRelease((CFTypeRef)v5[1]);
    uint64_t v7 = *v5;
  }
  else
  {
    CFRelease(*(CFTypeRef *)(a1 + 40));
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v5 = (uint64_t *)(a1 + 32);
    uint64_t v7 = v8;
  }
  CFStringRef v9 = *(const void **)(*(void *)(v7 + 8) + 24);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(*(void *)(*v5 + 8) + 24) = 0;
  }
}

void sub_100140E1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 240))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, void, const __CFString *, const CFBooleanRef, void))(v2 + 4744))(v2, *(void *)(*(void *)(v4 + 8) + 24), @"FailureCountCurrent", kCFBooleanTrue, *(void *)(v2 + 4752));
    CFRelease(v3[1]);
    uint64_t v5 = *v3;
  }
  else
  {
    CFRelease((CFTypeRef)v2);
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v3 = (CFTypeRef *)(a1 + 32);
    uint64_t v5 = v6;
  }
  uint64_t v7 = *(const void **)(v5[1] + 24);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(*((void *)*v3 + 1) + 24) = 0;
  }
}

void sub_100140EA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 240))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, void, void))(v2 + 4712))(v2, *(void *)(*(void *)(v4 + 8) + 24), *(void *)(v2 + 4720));
    CFRelease(v3[1]);
    uint64_t v5 = *v3;
  }
  else
  {
    CFRelease((CFTypeRef)v2);
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v3 = (CFTypeRef *)(a1 + 32);
    uint64_t v5 = v6;
  }
  uint64_t v7 = *(const void **)(v5[1] + 24);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(*((void *)*v3 + 1) + 24) = 0;
  }
}

BOOL sub_100140F20(const __CFString *a1)
{
  if (a1)
  {
    return CFEqual(a1, @"RU")
        || CFEqual(a1, @"KG")
        || CFEqual(a1, @"AM")
        || CFEqual(a1, @"KZ");
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, "%s: countryCode is null\n", "__WiFiDeviceManagerIsRegulatoryUNII3Restricted"];
    }
    return 0;
  }
}

void sub_100140FF8(uint64_t a1)
{
  if (!objc_msgSend(objc_msgSend(*(id *)(a1 + 6752), "wapCfg"), "serviceName"))
  {
    id v3 = objc_alloc_init((Class)NSMutableString);
    int v2 = 16;
    do
    {
      [v3 appendString:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%d", arc4random_uniform(9u))];
      --v2;
    }
    while (v2);
    [*(id *)(a1 + 6752) createWAPConfig:v3];
  }
}

void sub_1001410C8(unsigned int a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned char *)(a3 + 5217);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s for stanum %d macAddress %@  \n", "__WiFiDeviceManagerNANPHSSTAArrivingCallback", a1, a2 message];
  }
  unsigned __int16 v15 = *(_WORD *)a2;
  char v16 = a2[2];
  if (v6[2])
  {
    char v8 = v6[1] + 1;
    v6[1] = v8;
    v6[143] = *v6 + v8;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"MIS STA NAN Link Associated: %d associated clients", v6[1]];
    }
    if (qword_10027DD68)
    {
      if (v6[43]) {
        double v11 = " Hidden ";
      }
      else {
        double v11 = "Broadcast";
      }
      [(id)qword_10027DD68 WFLog:3, "%s: MIS Mode: %s, Client Type: NAN Link Client client macAddr: %@", "__WiFiDeviceManagerNANPHSSTAArrivingCallback", v11, a2 message];
    }
    CFSetAddValue(*(CFMutableSetRef *)(a3 + 5312), a2);
    sub_10010F2A8(a3, 0);
    sub_10010E8E0(a3, 0);
    *(CFAbsoluteTime *)(a3 + 5336) = CFAbsoluteTimeGetCurrent() + 3.0;
    v6[111] = 1;
    sub_100122C28(a3, 1, &v15, 0, 1);
    CFIndex v13 = *(void **)(a3 + 7368);
    if (v13) {
      [v13 addSoftApClientEvent:1 identifier:a2 isAppleClient:sub_10005A9E0(&v15) != 0 isInstantHotspot:0 isAutoHotspot:0 isHidden:v6[43] != 0];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: called while MIS is disabled" args:("__WiFiDeviceManagerNANPHSSTAArrivingCallback", 0x0)];
    }
  }
}

void sub_1001412FC(unsigned int a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned char *)(a3 + 5217);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, " %s for stanum %d macAddress %@ \n", "__WiFiDeviceManagerNANPHSSTALeavingCallback", a1, a2 message];
  }
  unsigned __int16 v24 = *(_WORD *)a2;
  char v25 = a2[2];
  if (v6[2])
  {
    if (a1 == 255)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"MIS no traffic for long time. Tear down MIS"];
      }
      int v11 = v6[4];
      v6[1] = 0;
      if (v6[2] && !v11)
      {
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:message:3, @"MIS idle timer expired, disabling tethering"];
        }
        sub_10010E474(a3);
        uint64_t v23 = 0;
        long long v21 = 0u;
        long long v22 = 0u;
        uint64_t v19 = 7;
        memset(v18, 0, sizeof(v18));
        DWORD2(v18[0]) = 7;
        CFStringRef v20 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", @"Last Client Left");
        sub_10010E020(a3, (uint64_t)v18);
      }
    }
    else
    {
      --v6[1];
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS STA NAN Client Disassociated: %d associated clients", v6[1]);
      }
    }
    v6[143] = v6[1] + *v6;
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: misIsHidden: %d, client macAddr: %@ setContainsValue %d", "__WiFiDeviceManagerNANPHSSTALeavingCallback", v6[43], a2, CFSetContainsValue(*(CFSetRef *)(a3 + 5312), a2) message];
    }
    CFSetRemoveValue(*(CFMutableSetRef *)(a3 + 5312), a2);
    sub_10010F2A8(a3, 0);
    if (a1 == 255) {
      goto LABEL_32;
    }
    if (v6[1] == -*v6 && !v6[4])
    {
      uint64_t v15 = 3;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: Starting MIS idle timer" arguments:("__WiFiDeviceManagerNANPHSSTALeavingCallback")];
      }
    }
    else
    {
      if (v6[1])
      {
LABEL_32:
        sub_100122C28(a3, 0, &v24, 0, 1);
        CFDateRef v17 = *(void **)(a3 + 7368);
        if (v17) {
          [v17 addSoftApClientEvent:0 identifier:a2 isAppleClient:sub_10005A9E0(&v24) != 0 isInstantHotspot:0 isAutoHotspot:0 isHidden:v6[43] != 0];
        }
        return;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"NANPHS: All nan clients have left. Should start idle timer for nan publisher"];
      }
      uint64_t v15 = 6;
    }
    sub_10010E8E0(a3, v15);
    goto LABEL_32;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: called while MIS is disabled" arguments:("__WiFiDeviceManagerNANPHSSTALeavingCallback")];
  }
}

double sub_100141684(int a1, unsigned int a2, uint64_t a3)
{
  char v4 = a2;
  uint64_t v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  memset(v8, 0, sizeof(v8));
  switch(a1)
  {
    case 2:
      *((void *)&v13 + 1) = sub_100141770(a2);
      uint64_t v6 = &v13;
LABEL_10:
      *(unsigned char *)uint64_t v6 = v4;
      return sub_10010E020(a3, (uint64_t)v8);
    case 1:
      *((void *)&v14 + 1) = sub_100141770(a2);
      uint64_t v6 = &v14;
      goto LABEL_10;
    case 0:
      if (a2 > 8) {
        CFStringRef v5 = @"Unknown";
      }
      else {
        CFStringRef v5 = off_100242350[(char)a2];
      }
      *(void *)&long long v10 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", v5);
      uint64_t v6 = (long long *)((char *)&v9 + 8);
      goto LABEL_10;
  }
  return sub_10010E020(a3, (uint64_t)v8);
}

CFStringRef sub_100141770(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    CFStringRef v1 = @"Success";
  }
  else {
    CFStringRef v1 = off_100242398[a1 - 1];
  }
  return CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", v1);
}

void sub_1001417D0(uint64_t a1)
{
  int v2 = (unsigned __int8 *)(a1 + 5216);
  int v3 = *(_DWORD *)(a1 + 5344);
  if (v3 == 1)
  {
    if (!*(unsigned char *)(a1 + 5386) && (![*(id *)(a1 + 6752) isNANPublisherStarted] || !v2[6]))
    {
      if (*(_DWORD *)(a1 + 20) != 1)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "WiFi is Powered OFF, Unable to start tethering on wifi");
        }
        uint64_t v182 = 0;
        long long v180 = 0u;
        long long v181 = 0u;
        long long v178 = 0u;
        long long v179 = 0u;
        long long v176 = 0u;
        long long v177 = 0u;
        long long v174 = 0u;
        long long v175 = 0u;
        *(_OWORD *)buffer = 0u;
        long long v173 = 0u;
        *(_DWORD *)&buffer[4] = 8;
        goto LABEL_376;
      }
      CFDateRef v17 = (uint64_t *)(a1 + 4944);
      if (*(void *)(a1 + 4944))
      {
        if (v2[6]) {
          int v18 = 0;
        }
        else {
          int v18 = -1;
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4 message:"__WiFiDeviceManagerStartMISSession: Detected non-NULL misSession"];
        }
LABEL_199:
        if (!*v17)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4 message:"misSession is NULL"];
          }
          int v91 = 9;
          goto LABEL_366;
        }
        if (!_MISIsServiceAvailable || !_MISIsServiceAvailable(*v17))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4 message:"MIS Service is not available"];
          }
          int v91 = 11;
          goto LABEL_366;
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"Preparing MIS Network Configuration Parameters"];
        }
        LOWORD(v170) = -21846;
        LODWORD(values[0]) = -1431655766;
        unsigned int v171 = -1431655766;
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (Mutable)
        {
          int allocator = v18;
          if (CFSetGetCount(*(CFSetRef *)(a1 + 5272)) > 0 || v2[8]) {
            CFDictionaryAddValue(Mutable, @"AP_MODE_FORCE_BI_100", kCFBooleanTrue);
          }
          LOWORD(v170) = 1;
          CFStringRef v82 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v170);
          if (v82)
          {
            v83 = v2;
            CFDictionaryAddValue(Mutable, @"AP_MODE_AUTH_LOWER", v82);
            CFRelease(v82);
            CFDictionaryAddValue(Mutable, @"SSID_STR", @"_AppleWi-FiInternetTetheringSSID_");
            v84 = (CFDictionaryRef *)sub_100019658((int)kCFAllocatorDefault, Mutable);
            CFStringRef v82 = (const __CFString *)v84;
            if (v84)
            {
              CFStringRef v85 = sub_1000C62C8(v84);
              if (!v85) {
                goto LABEL_430;
              }
              CFDictionaryAddValue(Mutable, @"AP_MODE_KEY", v85);
              [*(id *)(a1 + 6752) setPasswordForPHSOverNAN:v85];
              long long v178 = 0u;
              long long v179 = 0u;
              long long v176 = 0u;
              long long v177 = 0u;
              long long v174 = 0u;
              long long v175 = 0u;
              *(_OWORD *)buffer = 0u;
              long long v173 = 0u;
              if (!CFStringGetCString(v85, buffer, 128, 0x8000100u)) {
                goto LABEL_430;
              }
              size_t v86 = strlen(buffer);
              CFRelease(v85);
              CFRelease(v82);
              if (sub_100124CA0(a1) && !*(_DWORD *)(a1 + 7048))
              {
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Both WPA2+WPA3 enabled, softapUserPreferredBand is: %d", "__WiFiDeviceManagerCreateMISStartRequest", *(unsigned int *)(a1 + 7048));
                }
                int v89 = 0;
                __int16 v88 = 4104;
              }
              else
              {
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: softapUserPreferredBand is: %d. Allowing WPA2 keying only", "__WiFiDeviceManagerCreateMISStartRequest", *(unsigned int *)(a1 + 7048));
                }
                __int16 v88 = 8;
                int v89 = 1;
              }
              if (v86 == 64) {
                int v134 = v89;
              }
              else {
                int v134 = 1;
              }
              if (v134) {
                __int16 v135 = v88;
              }
              else {
                __int16 v135 = 8;
              }
              LOWORD(v170) = v135;
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: start hotspot using authtype 0x%X", "__WiFiDeviceManagerCreateMISStartRequest", (unsigned __int16)v170);
              }
              CFStringRef v82 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v170);
              if (v82)
              {
                int v2 = v83;
                CFDictionaryAddValue(Mutable, @"AP_MODE_AUTH_UPPER", v82);
                CFRelease(v82);
                int v137 = (_WORD)v170 ? 10 : 0;
                LODWORD(values[0]) = v137;
                CFStringRef v82 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, values);
                if (v82)
                {
                  CFDictionaryAddValue(Mutable, @"AP_MODE_CYPHER_TYPE", v82);
                  CFRelease(v82);
                  LODWORD(values[0]) = *v83;
                  CFStringRef v82 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, values);
                  if (v82)
                  {
                    if (LODWORD(values[0]) < 0xF) {
                      int v138 = 10;
                    }
                    else {
                      int v138 = *(_DWORD *)(a1 + 5264) == 80 ? 1040 : 18;
                    }
                    unsigned int v171 = v138;
                    CFDictionaryAddValue(Mutable, @"CHANNEL", v82);
                    CFRelease(v82);
                    CFStringRef v82 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v171);
                    if (v82)
                    {
                      CFDictionaryAddValue(Mutable, @"CHANNEL_FLAGS", v82);
                      CFRelease(v82);
                      CFDictionaryRemoveValue(Mutable, @"SSID_STR");
                      CFStringRef v82 = sub_100144054();
                      if (v82)
                      {
                        CFDictionaryAddValue(Mutable, @"SSID_STR", v82);
                        CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(kCFAllocatorDefault, v82, 0x8000100u, 0);
                        if (ExternalRepresentation)
                        {
                          CFDataRef v140 = ExternalRepresentation;
                          CFDictionaryAddValue(Mutable, @"AP_MODE_SSID_BYTES", ExternalRepresentation);
                          CFRelease(v140);
                        }
                        CFRelease(v82);
                        CFNumberRef Value = CFDictionaryGetValue(Mutable, @"SSID_STR");
                        if (!Value)
                        {
                          CFRelease(Mutable);
                          int v91 = 13;
                          goto LABEL_366;
                        }
                        v142 = Value;
                        if (qword_10027DD68) {
                          [(id)qword_10027DD68 WFLog:3, "MIS SSID: %@", v142 message];
                        }
                        v144 = (const void *)sub_100017C48(*(void *)(a1 + 64));
                        v145 = sub_100018FA8(a1, v144, 1);
                        if (v145)
                        {
                          if (!sub_10010EC7C(a1, 4) || v83[169])
                          {
                            if (qword_10027DD68) {
                              [(id)qword_10027DD68 WFLog:3, "Enabling MIS. Now disconnecting from %@", sub_10001A43C(v145) message];
                            }
                            v147 = (const void *)sub_100017C48(*(void *)(a1 + 64));
                            sub_1000FEA7C(a1, v147, 1007, "__WiFiDeviceManagerStartMISSession", 24460);
                          }
                        }
                        else
                        {
                          sub_100102284(a1);
                        }
                        v83[1] = 0;
                        v83[144] = 0;
                        if (_os_feature_enabled_impl()
                          && [*(id *)(a1 + 6752) checkDeviceNanCapabilities])
                        {
                          sub_100140FF8(a1);
                          sub_100064A58(*(void *)(a1 + 64), 1, [objc_msgSend(*(id *)(a1 + 6752), "wapCfg") serviceName]);
                        }
                        v148 = (const void *)sub_100017C48(*(void *)(a1 + 64));
                        int v149 = sub_100117CFC(a1, v148, Mutable, (uint64_t)sub_100143910, 0);
                        if (!v149)
                        {
                          sub_100100A60((char *)a1, 4, 1);
                          v83[3] = 1;
                        }
                        CFRelease(Mutable);
                        if (v145) {
                          CFRelease(v145);
                        }
                        if (v149 | allocator)
                        {
                          int v91 = 0;
LABEL_366:
                          if (*v17)
                          {
                            if (_MISDetach) {
                              _MISDetach(*v17);
                            }
                            *CFDateRef v17 = 0;
                          }
                          v2[3] = 0;
                          if (v2[170]) {
                            v2[170] = 0;
                          }
                          if (_os_feature_enabled_impl()
                            && [*(id *)(a1 + 6752) checkDeviceNanCapabilities])
                          {
                            sub_100140FF8(a1);
                            sub_100064A58(*(void *)(a1 + 64), 0, [objc_msgSend(*(id *)(a1 + 6752), "wapCfg") serviceName]);
                          }
                          sub_10010F7BC((void *)a1);
                          uint64_t v182 = 0;
                          long long v180 = 0u;
                          long long v181 = 0u;
                          long long v178 = 0u;
                          long long v179 = 0u;
                          long long v176 = 0u;
                          long long v177 = 0u;
                          long long v174 = 0u;
                          long long v175 = 0u;
                          *(_OWORD *)buffer = 0u;
                          long long v173 = 0u;
                          *(_DWORD *)&buffer[4] = v91;
LABEL_376:
                          sub_10010E020(a1, (uint64_t)buffer);
                          goto LABEL_377;
                        }
LABEL_391:
                        int v3 = 2;
                        goto LABEL_378;
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            v83 = v2;
          }
        }
        else
        {
          v83 = v2;
          CFStringRef v82 = 0;
        }
        CFStringRef v85 = 0;
LABEL_430:
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4 message:"Error preparing MIS Network Configuration Parameters"];
        }
        if (v85) {
          CFRelease(v85);
        }
        if (v82) {
          CFRelease(v82);
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
        int v91 = 12;
        int v2 = v83;
        goto LABEL_366;
      }
      if (_MISAttach)
      {
        int v79 = _MISAttach((void *)(a1 + 4944));
        if (!v79)
        {
          int v18 = 0;
          goto LABEL_199;
        }
        int v132 = v79;
      }
      else
      {
        int v132 = -1;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"MISAttach failure: %s" :strerror(v132)];
      }
      int v91 = 10;
      goto LABEL_366;
    }
    if (*(_DWORD *)(a1 + 20) != 1)
    {
      uint64_t v15 = (void *)qword_10027DD68;
      if (!qword_10027DD68)
      {
LABEL_195:
LABEL_377:
        int v3 = 0;
        goto LABEL_378;
      }
      char v16 = "WiFi is Powered OFF, Unable to start tethering on wifi";
LABEL_194:
      [v15 WFLog:3 message:v16];
      goto LABEL_195;
    }
    uint64_t v6 = (uint64_t *)(a1 + 4944);
    if (*(void *)(a1 + 4944))
    {
      if (v2[6]) {
        int v7 = 0;
      }
      else {
        int v7 = -1;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: Detected non-NULL misSession" : @"__WiFiDeviceManagerStartNANSession"];
      }
LABEL_77:
      if (!*v6)
      {
        CFDateRef v52 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_146;
        }
        CFDateRef v53 = "misSession is NULL";
        goto LABEL_145;
      }
      if (_MISIsServiceAvailable && _MISIsServiceAvailable(*v6))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"MIS Preparing NAN Publish  Configuration Parameters"];
        }
        LOWORD(v170) = -21846;
        LODWORD(values[0]) = -1431655766;
        unsigned int v171 = -1431655766;
        BOOL v39 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (v39)
        {
          if (CFSetGetCount(*(CFSetRef *)(a1 + 5272)) > 0 || v2[8]) {
            CFDictionaryAddValue(v39, @"AP_MODE_FORCE_BI_100", kCFBooleanTrue);
          }
          LOWORD(v170) = 1;
          CFStringRef v40 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v170);
          if (v40)
          {
            CFDictionaryAddValue(v39, @"AP_MODE_AUTH_LOWER", v40);
            CFRelease(v40);
            CFDictionaryAddValue(v39, @"SSID_STR", @"_AppleWi-FiInternetTetheringSSID_");
            BOOL v41 = (CFDictionaryRef *)sub_100019658((int)kCFAllocatorDefault, v39);
            CFStringRef v40 = (const __CFString *)v41;
            if (v41)
            {
              CFStringRef v42 = sub_1000C62C8(v41);
              if (!v42) {
                goto LABEL_415;
              }
              int v43 = v2;
              [*(id *)(a1 + 6752) setPasswordForPHSOverNAN:v42];
              sub_10010EE4C(a1);
              CFDictionaryAddValue(v39, @"AP_MODE_KEY", v42);
              long long v178 = 0u;
              long long v179 = 0u;
              long long v176 = 0u;
              long long v177 = 0u;
              long long v174 = 0u;
              long long v175 = 0u;
              *(_OWORD *)buffer = 0u;
              long long v173 = 0u;
              if (!CFStringGetCString(v42, buffer, 128, 0x8000100u))
              {
LABEL_415:
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:4 message:"Error preparing NAN Publish Configuration Parameters"];
                }
                if (v42) {
                  CFRelease(v42);
                }
                if (v40) {
                  CFRelease(v40);
                }
                if (!v39) {
                  goto LABEL_183;
                }
                goto LABEL_422;
              }
              size_t v44 = strlen(buffer);
              CFRelease(v42);
              CFRelease(v40);
              int v45 = sub_100124CA0(a1);
              if (v44 == 64 || v45 == 0) {
                __int16 v47 = 8;
              }
              else {
                __int16 v47 = 4104;
              }
              LOWORD(v170) = v47;
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:3, "%s: start hotspot using authtype 0x%X", "__WiFiDeviceManagerCreateNANStartRequest", (unsigned __int16)v170];
              }
              CFStringRef v40 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v170);
              int v2 = v43;
              if (v40)
              {
                CFDictionaryAddValue(v39, @"AP_MODE_AUTH_UPPER", v40);
                CFRelease(v40);
                int v49 = (v170 & 0x1000) != 0 ? 10 : 6;
                LODWORD(values[0]) = v49;
                CFStringRef v40 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, values);
                if (v40)
                {
                  CFDictionaryAddValue(v39, @"AP_MODE_CYPHER_TYPE", v40);
                  CFRelease(v40);
                  LODWORD(values[0]) = *v43;
                  CFStringRef v40 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, values);
                  if (v40)
                  {
                    if (LODWORD(values[0]) < 0xF) {
                      int v50 = 10;
                    }
                    else {
                      int v50 = *(_DWORD *)(a1 + 5264) == 80 ? 1040 : 18;
                    }
                    unsigned int v171 = v50;
                    CFDictionaryAddValue(v39, @"CHANNEL", v40);
                    CFRelease(v40);
                    CFStringRef v40 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v171);
                    if (v40)
                    {
                      CFDictionaryAddValue(v39, @"CHANNEL_FLAGS", v40);
                      CFRelease(v40);
                      CFDictionaryRemoveValue(v39, @"SSID_STR");
                      CFStringRef v40 = sub_100144054();
                      if (v40)
                      {
                        CFDictionaryAddValue(v39, @"SSID_STR", v40);
                        CFDataRef v58 = CFStringCreateExternalRepresentation(kCFAllocatorDefault, v40, 0x8000100u, 0);
                        if (v58)
                        {
                          CFDataRef v59 = v58;
                          CFDictionaryAddValue(v39, @"AP_MODE_SSID_BYTES", v58);
                          CFRelease(v59);
                        }
                        CFRelease(v40);
                        v60 = CFDictionaryGetValue(v39, @"SSID_STR");
                        if (v60)
                        {
                          v61 = v60;
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:3, "MIS SSID: %@", v61 message];
                          }
                          CFRange v63 = (const void *)sub_100017C48(*(void *)(a1 + 64));
                          CFRange v64 = sub_100018FA8(a1, v63, 1);
                          if (v64)
                          {
                            if (!sub_10010EC7C(a1, 8) || v43[169])
                            {
                              if (qword_10027DD68) {
                                [(id)qword_10027DD68 WFLog:3, "Enabling MIS. Now disconnecting from %@", sub_10001A43C(v64) message];
                              }
                              CFRange v66 = (const void *)sub_100017C48(*(void *)(a1 + 64));
                              sub_1000FEA7C(a1, v66, 1007, "__WiFiDeviceManagerStartNANSession", 24335);
                            }
                          }
                          else
                          {
                            sub_100102284(a1);
                          }
                          v43[1] = 0;
                          if (qword_10027DD68) {
                            [((id)qword_10027DD68) WFLog:3 message:@"%s misKeepNanPhsDuringMISStop %d misNanNumAssociatedClients %d" arguments:@"__WiFiDeviceManagerStartNANSession", v43[172], v43[2]];
                          }
                          if (!v43[172]) {
                            v43[2] = 0;
                          }
                          v43[144] = 0;
                          if (_os_feature_enabled_impl()
                            && [*(id *)(a1 + 6752) checkDeviceNanCapabilities])
                          {
                            sub_100140FF8(a1);
                            sub_100064A58(*(void *)(a1 + 64), 1, [objc_msgSend(*(id *)(a1 + 6752), "wapCfg") serviceName]);
                          }
                          v77 = (const void *)sub_100017C48(*(void *)(a1 + 64));
                          int v78 = sub_100117CFC(a1, v77, v39, (uint64_t)sub_100143910, 0);
                          if (!v78)
                          {
                            sub_100100A60((char *)a1, 8, 1);
                            v43[3] = 1;
                          }
                          CFRelease(v39);
                          if (v64) {
                            CFRelease(v64);
                          }
                          if (!(v78 | v7)) {
                            goto LABEL_391;
                          }
                          goto LABEL_183;
                        }
LABEL_422:
                        CFRelease(v39);
                        goto LABEL_183;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          CFStringRef v40 = 0;
        }
        CFStringRef v42 = 0;
        goto LABEL_415;
      }
      CFDateRef v52 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFDateRef v53 = "MIS Service is not available";
LABEL_145:
        [v52 WFLog:4 message:v53, v163];
        goto LABEL_146;
      }
      goto LABEL_146;
    }
    if (_MISAttach)
    {
      int v37 = _MISAttach((void *)(a1 + 4944));
      if (!v37)
      {
        int v7 = 0;
        goto LABEL_77;
      }
      int v67 = v37;
    }
    else
    {
      int v67 = -1;
    }
    uint64_t v68 = qword_10027DD68;
    if (qword_10027DD68)
    {
      v163 = strerror(v67);
      CFDateRef v53 = "MISAttach failure: %s";
      CFDateRef v52 = (void *)v68;
      goto LABEL_145;
    }
LABEL_146:
LABEL_183:
    if (*v6)
    {
      if (_MISDetach) {
        _MISDetach(*v6);
      }
      uint64_t *v6 = 0;
    }
    v2[3] = 0;
    if (v2[170]) {
      v2[170] = 0;
    }
    if (_os_feature_enabled_impl()
      && [*(id *)(a1 + 6752) checkDeviceNanCapabilities])
    {
      sub_100140FF8(a1);
      sub_100064A58(*(void *)(a1 + 64), 0, [objc_msgSend(*(id *)(a1 + 6752), "wapCfg") serviceName]);
    }
    sub_10010F7BC((void *)a1);
    uint64_t v15 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_195;
    }
    char v16 = "Error on Starting NAN MIS session. Return to idle state";
    goto LABEL_194;
  }
  if (v3) {
    goto LABEL_379;
  }
  CFStringRef v4 = CFStringCreateMutable(kCFAllocatorDefault, 0);
  unsigned int valuePtr = 0;
  unsigned int v170 = 0;
  if (*(_DWORD *)(a1 + 20) != 1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"WiFi is Powered OFF, Unable to start MIS Scan"];
    }
    uint64_t v182 = 0;
    long long v180 = 0u;
    long long v181 = 0u;
    long long v178 = 0u;
    long long v179 = 0u;
    long long v176 = 0u;
    long long v177 = 0u;
    long long v174 = 0u;
    long long v175 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v173 = 0u;
    *(_DWORD *)&buffer[4] = 6;
    sub_10010E020(a1, (uint64_t)buffer);
    long long v10 = 0;
    char v11 = 0;
    long long v12 = 0;
LABEL_18:
    long long v13 = 0;
    if (!v4) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (sub_10006F650(*(void *)(a1 + 64))) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = CFEqual(v4, @"XZ")
  }
      || CFEqual(v4, &stru_100248240)
      || CFEqual(v4, @"JP")
      || CFEqual(v4, @"TN")
      || CFEqual(v4, @"YE");
  BOOL v20 = sub_100140F20(v4);
  uint64_t v21 = 0;
  do
  {
    CFComparisonResult v22 = CFStringCompare(v4, off_1002419F0[v21], 0);
    if (v22 == kCFCompareEqualTo) {
      break;
    }
    BOOL v26 = v21++ == 37;
  }
  while (!v26);
  if (v5)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: usage is regulatory restricted. Defaulting to 2.4GHz only", "__WiFiDeviceManagerStartMISScan")];
    }
  }
  else if (!v2[168])
  {
    CFIndex Count = CFSetGetCount(*(CFSetRef *)(a1 + 5272));
    int v25 = *(_DWORD *)(a1 + 7048);
    BOOL v26 = Count >= 1 && v25 == 1;
    if (!v26 && (v25 == 2 || v2[1824] && v2[1827]))
    {
      int v27 = 1;
      goto LABEL_64;
    }
  }
  int v27 = 0;
LABEL_64:
  unsigned int v28 = (const void *)sub_100017C48(*(void *)(a1 + 64));
  CFStringRef v29 = sub_100018FA8(a1, v28, 1);
  uint64_t v30 = v29;
  char v165 = v20;
  if (v29)
  {
    uint64_t v31 = v2;
    CFNumberRef v32 = (const __CFNumber *)sub_10001E404((uint64_t)v29, @"CHANNEL");
    CFNumberRef v33 = (const __CFNumber *)sub_10001E404((uint64_t)v30, @"CHANNEL_FLAGS");
    if (v33) {
      CFNumberGetValue(v33, kCFNumberSInt32Type, &valuePtr);
    }
    if (v32) {
      CFNumberGetValue(v32, kCFNumberSInt32Type, &v170);
    }
    if ((valuePtr & 8) != 0)
    {
      int v166 = 0;
      int v34 = 0;
      int v164 = 1;
      int v2 = v31;
    }
    else
    {
      int v2 = v31;
      int v164 = 0;
      if ((valuePtr & 0x10) != 0)
      {
        int v34 = 0;
        int v166 = 1;
      }
      else
      {
        int v166 = 0;
        int v34 = (valuePtr >> 13) & 1;
      }
    }
    int v35 = (valuePtr >> 11) & 1;
    v2[169] = 0;
    CFIndex v36 = v2 + 169;
    if (!sub_10010EC7C(a1, 4) || v2[170] && !sub_10010EC7C(a1, 8))
    {
      *CFIndex v36 = 1;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s %u forceDisconnectInfra as PHS network going to be started", "__WiFiDeviceManagerStartMISScan", 24730);
      }
      int v2 = v31;
    }
  }
  else
  {
    int v35 = 0;
    int v34 = 0;
    int v166 = 0;
    int v164 = 0;
    v2[169] = 0;
    CFIndex v36 = v2 + 169;
  }
  *int v2 = 0;
  *(_DWORD *)(a1 + 5264) = 20;
  v167 = v2;
  if (!v2[1840])
  {
    if (!v27 || *(unsigned char *)(a1 + 3414))
    {
      uint64_t v57 = "2.4GHz";
      goto LABEL_256;
    }
    v92 = v2;
    uint64_t v93 = 0;
    if (v22) {
      char v94 = v165;
    }
    else {
      char v94 = 1;
    }
    char v95 = 1;
    uint64_t v57 = "5GHz";
    while (1)
    {
      char v96 = v95;
      v97 = &dword_10027CD30[v93];
      if (sub_100068A20(*(void *)(a1 + 64), *v97))
      {
        uint64_t v98 = *v97;
        if (v98 == 138)
        {
          if ((v94 & 1) == 0) {
            goto LABEL_232;
          }
        }
        else
        {
          if ((v98 - 142) < 0x18) {
            char v99 = v94;
          }
          else {
            char v99 = 0;
          }
          if ((v99 & 1) == 0)
          {
LABEL_232:
            int v100 = sub_100119964(a1, v98);
            if (v22 == kCFCompareEqualTo || !v100) {
              goto LABEL_254;
            }
          }
        }
      }
      char v95 = 0;
      uint64_t v93 = 1;
      if ((v96 & 1) == 0)
      {
        int v2 = v92;
        goto LABEL_256;
      }
    }
  }
  if (!v27) {
    goto LABEL_244;
  }
  if (*(unsigned char *)(a1 + 3414))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: setting misBand to 2G due to AWDL RealTime"];
    }
LABEL_150:
    int v35 = 1;
    goto LABEL_151;
  }
  if (*(_DWORD *)(a1 + 7052) == 1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: setting misBand to 2G due to NAN Concurrency" : @"__WiFiDeviceManagerStartMISScan"];
    }
    goto LABEL_150;
  }
  if (v30 && v166)
  {
    if (sub_100068920(*(void *)(a1 + 64), v170) || sub_100119964(a1, v170))
    {
      *CFIndex v36 = 1;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s %u forceDisconnectInfra as its DFS Channel or Coex denylisted channel", "__WiFiDeviceManagerStartMISScan", 24748);
      }
    }
    else
    {
      if (!v35)
      {
        *int v2 = v170;
        goto LABEL_151;
      }
      *CFIndex v36 = 1;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s %u forceDisconnectInfra as its associated bandwidth is > 80MHz" args:("__WiFiDeviceManagerStartMISScan", 24751)];
      }
    }
    goto LABEL_320;
  }
  int v35 = 0;
  if (v30 && v34)
  {
    *CFIndex v36 = 1;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s %u forceDisconnectInfra as connected to 6E "];
    }
LABEL_320:
    int v35 = 0;
  }
LABEL_151:
  if (*v36 || !*v167)
  {
    uint64_t v69 = 0;
    if (v22) {
      char v70 = v165;
    }
    else {
      char v70 = 1;
    }
    char v71 = 1;
    do
    {
      char v72 = v71;
      if (sub_100068A20(*(void *)(a1 + 64), dword_10027CD30[v69]))
      {
        uint64_t v73 = dword_10027CD30[v69];
        if (v73 == 138)
        {
          if (v70) {
            goto LABEL_166;
          }
        }
        else
        {
          if ((v73 - 142) < 0x18) {
            char v74 = v70;
          }
          else {
            char v74 = 0;
          }
          if (v74) {
            goto LABEL_166;
          }
        }
        int v75 = sub_100119964(a1, v73);
        if (v22 == kCFCompareEqualTo || !v75)
        {
          unsigned __int8 *v167 = dword_10027CD30[v69];
          break;
        }
      }
LABEL_166:
      char v71 = 0;
      uint64_t v69 = 1;
    }
    while ((v72 & 1) != 0);
  }
  int v2 = v167;
  if (!v35)
  {
    uint64_t v57 = "5GHz";
    goto LABEL_256;
  }
LABEL_244:
  if (!v30 || !v164 || *v36)
  {
    v92 = v2;
    uint64_t v102 = 0;
    v97 = dword_10027CD24;
    uint64_t v57 = "2.4GHz";
    do
    {
      if (sub_100068A20(*(void *)(a1 + 64), dword_10027CD24[v102])) {
        BOOL v103 = 1;
      }
      else {
        BOOL v103 = v102 == 2;
      }
      ++v102;
    }
    while (!v103);
LABEL_254:
    int v2 = v92;
    unsigned __int8 *v92 = *v97;
LABEL_256:
    if (!v30) {
      goto LABEL_258;
    }
    goto LABEL_257;
  }
  *int v2 = v170;
  uint64_t v57 = "2.4GHz";
LABEL_257:
  CFRelease(v30);
LABEL_258:
  unsigned int v104 = *v2;
  if (*v2)
  {
    int v105 = 20;
    if (v104 >= 0xF)
    {
      if ((sub_100068AE8(*(void *)(a1 + 64), v104) & 4) != 0) {
        int v105 = 80;
      }
      else {
        int v105 = 20;
      }
    }
    *(_DWORD *)(a1 + 5264) = v105;
    *(_DWORD *)(a1 + 5344) = 1;
  }
  if (qword_10027DD68)
  {
    v107 = "YES";
    if ((v2[1841] & 2) != 0) {
      v108 = "YES";
    }
    else {
      v108 = "NO";
    }
    if (v2[1841]) {
      v109 = "YES";
    }
    else {
      v109 = "NO";
    }
    v110 = "5GHz";
    if (!v166) {
      v110 = "2.4GHz";
    }
    if (!v2[169]) {
      v107 = "NO";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS Channel Selection: MIS Ch = %d MIS Band = %s MIS BandWidth = %d AWDL state=%s Infra Connected %s Infra Band %s Should Disconnect Infra %s ", *v2, v57, *(unsigned int *)(a1 + 5264), v108, v109, v110, v107);
  }
  if (*(_DWORD *)(a1 + 5344) && *v2)
  {
    sub_1001417D0(a1);
    if (v4) {
      CFRelease(v4);
    }
    int v3 = *(_DWORD *)(a1 + 5344);
    goto LABEL_378;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Attempting MIS Scan"];
  }
  unsigned int v171 = 0;
  if (!*(void *)(a1 + 5368))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"MIS Scan: mis allowed channels list is empty"];
    }
    goto LABEL_409;
  }
  CFMutableArrayRef v112 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!v112)
  {
LABEL_409:
    long long v12 = 0;
    goto LABEL_303;
  }
  v113 = v112;
  uint64_t v114 = *(void *)(a1 + 64);
  v115 = (const void *)sub_100017C48(v114);
  if (sub_10000DE34(v114, v115, v113))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"MIS Scan: Failed to get supported channel list"];
    }
    goto LABEL_408;
  }
  CFMutableArrayRef v116 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!v116)
  {
LABEL_408:
    CFRelease(v113);
    goto LABEL_409;
  }
  long long v12 = v116;
  if (CFArrayGetCount(v113) >= 1)
  {
    CFIndex v117 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v113, v117);
      if (ValueAtIndex)
      {
        CFDictionaryRef v119 = ValueAtIndex;
        CFNumberRef v120 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"SUP_CHANNEL");
        v121 = (void *)CFDictionaryGetValue(v119, @"SUP_CHANNEL_FLAGS");
        if (v120)
        {
          v122 = v121;
          if (v121)
          {
            CFArrayRef v123 = *(const __CFArray **)(a1 + 5368);
            v184.length = CFArrayGetCount(v123);
            v184.location = 0;
            if (CFArrayContainsValue(v123, v184, v120))
            {
              CFNumberGetValue(v120, kCFNumberIntType, &v171);
              if (sub_100119964(a1, v171))
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:3 message:@"%s: channel %d is blacklisted by coex manager" arguments:v171];
                }
              }
              else
              {
                *(_OWORD *)buffer = *(_OWORD *)&off_100241B28;
                values[0] = v120;
                values[1] = v122;
                CFDictionaryRef v125 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)buffer, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                if (v125)
                {
                  CFDictionaryRef v126 = v125;
                  CFArrayAppendValue(v12, v125);
                  CFRelease(v126);
                }
              }
            }
          }
        }
      }
      ++v117;
    }
    while (v117 < CFArrayGetCount(v113));
  }
  CFRelease(v113);
  if (!CFArrayGetCount(v12))
  {
    CFRelease(v12);
    long long v12 = 0;
  }
  int v2 = v167;
LABEL_303:
  long long v10 = sub_100120A54(0, v12, *(_DWORD *)(a1 + 128), 0, 1);
  if (!v10)
  {
LABEL_404:
    char v11 = 0;
    goto LABEL_18;
  }
  v127 = malloc_type_malloc(0x28uLL, 0x10E0040573E0799uLL);
  if (!v127)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null scanData" args:("__WiFiDeviceManagerStartMISScan")];
    }
    goto LABEL_404;
  }
  long long v13 = v127;
  void *v127 = a1;
  v127[1] = 0;
  v127[3] = 0;
  v128 = v2;
  if (CFDictionaryContainsKey(v10, @"SSID_STR")) {
    BOOL v129 = 1;
  }
  else {
    BOOL v129 = CFDictionaryContainsKey(v10, @"SCAN_SSID_LIST") != 0;
  }
  v13[32] = v129;
  v130 = (const void *)sub_100017C48(*(void *)(a1 + 64));
  uint64_t v131 = sub_100113508(a1, v130, v10, 0, (uint64_t)sub_100143508, (uint64_t)v13, (void *)(a1 + 5352), 19);
  if (v131)
  {
    uint64_t v158 = v131;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Error initiating MIS scan request: %d", v158);
    }
    char v11 = 0;
  }
  else
  {
    char v11 = 1;
  }
  int v2 = v128;
  if (v4) {
LABEL_19:
  }
    CFRelease(v4);
LABEL_20:
  if (v12) {
    CFRelease(v12);
  }
  if (v10) {
    CFRelease(v10);
  }
  if ((v11 & 1) == 0)
  {
    if (v13) {
      free(v13);
    }
    goto LABEL_377;
  }
  int v3 = 1;
LABEL_378:
  *(_DWORD *)(a1 + 5344) = v3;
LABEL_379:
  if (v2[3]) {
    BOOL v150 = 0;
  }
  else {
    BOOL v150 = v3 == 0;
  }
  if (v150)
  {
    IOPMAssertionID v151 = *(_DWORD *)(a1 + 5228);
    if (v151)
    {
      uint64_t v152 = IOPMAssertionRelease(v151);
      if (v152)
      {
        uint64_t v153 = v152;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:4, "%s: MIS session not active: release MIS PM Assertion, error=%d", "__WiFiDeviceManagerMISStateMachineRun", v153];
        }
      }
      *(_DWORD *)(a1 + 5228) = 0;
    }
  }
}

void sub_100143508(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10 = *a6;
  uint64_t v11 = sub_10006B4B0(*(void *)(*a6 + 64));
  BOOL v12 = sub_10010EB14(v10);
  free(a6);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS scan completed (%d) with current state: %d", a5, *(unsigned int *)(v10 + 5344));
  }
  if (v11 == *(void *)(v10 + 5352))
  {
    if (*(unsigned char *)(v10 + 5223) && (*(unsigned char *)(v10 + 5221) ? (BOOL v14 = !v12) : (BOOL v14 = 1), v14))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: Aborting MIS Start" : @"__WiFiDeviceManagerMISScanCallback"];
      }
      *(_DWORD *)(v10 + 5344) = 0;
      uint64_t v30 = 0;
      memset(v29, 0, sizeof(v29));
      DWORD1(v29[0]) = 7;
      sub_10010E020(v10, (uint64_t)v29);
    }
    else
    {
      unsigned int v28 = (unsigned __int8 *)(v10 + 5216);
      if (a1 && a3 && *(void *)(v10 + 5368))
      {
        DWORD2(v29[0]) = 0;
        *(void *)&v29[0] = 0;
        int Count = CFArrayGetCount(a3);
        if (Count >= 1)
        {
          CFIndex v18 = 0;
          uint64_t v19 = Count;
          do
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v18);
            if (ValueAtIndex)
            {
              uint64_t v21 = sub_10001E404((uint64_t)ValueAtIndex, @"CHANNEL");
              v32.location = 0;
              v32.length = 3;
              CFIndex v22 = CFArrayBSearchValues(*(CFArrayRef *)(v10 + 5368), v32, v21, (CFComparatorFunction)&_CFNumberCompare, 0);
              if (v22 <= 2) {
                ++*((_DWORD *)v29 + v22);
              }
            }
            ++v18;
          }
          while (v19 != v18);
        }
        uint64_t v23 = 0;
        LODWORD(v24) = 0;
        do
        {
          if (sub_100119964(v10, dword_10027CD24[v23])) {
            *((_DWORD *)v29 + v23) = 0xFFFF;
          }
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: interfernce on channel %d = %d", "__FindLeastBusyChannelForMIS", dword_10027CD24[v23], *((unsigned int *)v29 + v23));
          }
          if (*((_DWORD *)v29 + (int)v24) > *((_DWORD *)v29 + v23)) {
            LODWORD(v24) = v23;
          }
          ++v23;
        }
        while (v23 != 3);
      }
      else
      {
        uint64_t v24 = 0;
        while (sub_100119964(v10, dword_10027CD24[v24]))
        {
          if (++v24 == 3)
          {
            LODWORD(v24) = 0;
            break;
          }
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"Error: %s: Using default hostAp channel %d" : @"__FindLeastBusyChannelForMIS" : dword_10027CD24[v24]];
        }
      }
      *unsigned int v28 = dword_10027CD24[(int)v24];
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Least Congested channel is %d", *v28);
      }
      if (*(_DWORD *)(v10 + 5344) == 1)
      {
        sub_1001417D0(v10);
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Ignorning old MIS Scan request.  CurrentCommand=%lld PendingCommand=%lld", v11, *(void *)(v10 + 5352));
    }
  }
}

void sub_100143910(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a1 + 5216;
  BOOL v8 = sub_10010EB14(a1);
  int v9 = *(unsigned __int8 *)(v7 + 6);
  uint64_t v10 = (unsigned __int8 *)v7;
  int v11 = *(unsigned __int8 *)(v7 + 7);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "_WiFiDeviceManagerStartMISCallback err=%d, network=%@ state=%d", a3, sub_10001A43C(a4), *(unsigned int *)(a1 + 5344) message];
  }
  if (*(_DWORD *)(a1 + 5344) != 2)
  {
    long long v13 = v10;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Start MIS Session, unexpected state %d", *(unsigned int *)(a1 + 5344));
    }
    if ((v10[1841] & 4) != 0)
    {
      char v16 = (char *)a1;
      int v17 = 0;
LABEL_19:
      sub_100100A60(v16, 4, v17);
      goto LABEL_77;
    }
    goto LABEL_77;
  }
  *(_DWORD *)(a1 + 5344) = 0;
  long long v13 = v10;
  *((_WORD *)v10 + 3) = 0;
  v10[8] = 0;
  *(_WORD *)(v10 + 171) = 0;
  if (a3 || !a4)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"__WiFiDeviceManagerStartMISCallback start network failed"];
    }
    v13[3] = 0;
    if (v13[170]) {
      v13[170] = 0;
    }
    sub_100100A60((char *)a1, 4, 0);
    sub_10010F7BC((void *)a1);
    uint64_t v19 = *(void *)(a1 + 4944);
    if (v19)
    {
      if (_MISDetach) {
        _MISDetach(v19);
      }
      *(void *)(a1 + 4944) = 0;
      *(_DWORD *)(a1 + 192) = 13;
      if (_os_feature_enabled_impl())
      {
        sub_10001FD64(a1, 10);
      }
      else
      {
        [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:10 interfaceName:a2];
        sub_1001028E4(a1, 2, (uint64_t)"__WiFiDeviceManagerStartMISSessionCallback");
      }
    }
    *(void *)&long long v64 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v55 = 0u;
    *(_DWORD *)&buffer[4] = 14;
    sub_10010E020(a1, (uint64_t)buffer);
    goto LABEL_77;
  }
  if (!*(void *)(a1 + 4944))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"__WiFiDeviceManagerStartMISCallback: MIS Session is NULL"];
    }
    uint64_t v21 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    sub_1001190F4(a1, v21, a4, 0, 0);
    v10[3] = 0;
    if (v10[170]) {
      v10[170] = 0;
    }
    sub_10010F7BC((void *)a1);
    goto LABEL_43;
  }
  if (!v8)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: Aborting MIS Start" : @"__WiFiDeviceManagerStartMISSessionCallback"];
    }
    uint64_t v23 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    sub_1001190F4(a1, v23, a4, 0, 0);
    v10[3] = 0;
    if (v10[170]) {
      v10[170] = 0;
    }
    sub_10010F7BC((void *)a1);
    if (_MISDetach) {
      _MISDetach(*(void *)(a1 + 4944));
    }
    *(void *)(a1 + 4944) = 0;
LABEL_43:
    *(_DWORD *)(a1 + 192) = 13;
    sub_100100A60((char *)a1, 4, 0);
LABEL_74:
    if (_os_feature_enabled_impl())
    {
      sub_10001FD64(a1, 10);
    }
    else
    {
      [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:10 interfaceName:a2];
      sub_1001028E4(a1, 2, (uint64_t)"__WiFiDeviceManagerStartMISSessionCallback");
    }
    goto LABEL_77;
  }
  if (!v11 && !v9)
  {
    if (!v10[5] && !*(_DWORD *)(a1 + 5232))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: Starting MIS idle timer", "__WiFiDeviceManagerStartMISSessionCallback"];
      }
      sub_10010E8E0(a1, 2);
    }
    goto LABEL_48;
  }
  if (!v9)
  {
LABEL_48:
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v55 = 0u;
    CFStringRef v25 = sub_10006B8BC();
    CFStringGetCString(v25, buffer, 256, 0);
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Attempting to start DHCP Service on %s", buffer);
    }
    if (_MISStartServiceDHCP)
    {
      int v27 = _MISStartServiceDHCP(*(void *)(a1 + 4944), buffer, (_OWORD *)(a1 + 4952));
      if (!v27)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Successfully started DHCP Service on %@", sub_10006B8BC() message];
        }
        CFStringRef v29 = *(const void **)(a1 + 5208);
        if (v29) {
          CFRelease(v29);
        }
        *(void *)(a1 + 5208) = a4;
        CFRetain(a4);
        if (!*(_DWORD *)(a1 + 5228))
        {
          CFStringRef v30 = sub_10006B8BC();
          uint64_t v31 = IOPMAssertionCreateWithName(@"NoIdleSleepAssertion", 0xFFu, v30, (IOPMAssertionID *)(a1 + 5228));
          if (v31)
          {
            uint64_t v32 = v31;
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Unable to prevent idle sleep during MIS Session, error=%d", v32);
            }
            *(_DWORD *)(a1 + 5228) = 0;
          }
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"Started Internet Connection Sharing over WiFi"];
        }
        sub_1000643C4(*(void *)(a1 + 64), v13[44]);
        uint64_t v53 = 0;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v42 = 0u;
        uint64_t v43 = 0;
        double v44 = sub_10005A994();
        DWORD2(v46) = *v13;
        DWORD1(v42) = 1;
        if (v13[170]) {
          *(void *)&long long v49 = sub_10005A994();
        }
        sub_10010E020(a1, (uint64_t)&v42);
        char v16 = (char *)a1;
        int v17 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      int v27 = -1;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Can't start DHCP service: %s" arguments:strerror(v27)];
    }
    CFIndex v36 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    sub_1001190F4(a1, v36, a4, 0, 0);
    long long v13 = v10;
    v10[3] = 0;
    if (v10[170]) {
      v10[170] = 0;
    }
    sub_10010F7BC((void *)a1);
    if (_MISDetach) {
      _MISDetach(*(void *)(a1 + 4944));
    }
    *(void *)(a1 + 4944) = 0;
    sub_100100A60((char *)a1, 4, 0);
    *(_DWORD *)(a1 + 192) = 13;
    goto LABEL_74;
  }
  sub_1000643C4(*(void *)(a1 + 64), v10[44]);
  if (qword_10027DD68) {
    [qword_10027DD68 WFLog:message:3, "%s: MIS successfully restarted.", "__WiFiDeviceManagerStartMISSessionCallback"];
  }
LABEL_77:
  if (!v13[3])
  {
    IOPMAssertionID v37 = *(_DWORD *)(a1 + 5228);
    if (v37)
    {
      uint64_t v38 = IOPMAssertionRelease(v37);
      if (v38)
      {
        uint64_t v39 = v38;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:4, @"%s: MIS session start failed: release MIS PM Assertion, error=%d", @"__WiFiDeviceManagerStartMISSessionCallbackWrapper", v39];
        }
      }
      *(_DWORD *)(a1 + 5228) = 0;
    }
  }
}

CFMutableStringRef sub_100144054()
{
  if (!&_lockdown_connect || !lockdown_connect())
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"Error connecting to LockDown"];
    }
    return 0;
  }
  CFStringRef v0 = (const __CFString *)MGCopyAnswer();
  if (&_lockdown_disconnect) {
    lockdown_disconnect();
  }
  if (!v0) {
    return 0;
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0, v0);
  CFRelease(v0);
  if (MutableCopy)
  {
    while (1)
    {
      if (!CFStringGetLength(MutableCopy))
      {
        CFRelease(MutableCopy);
        return 0;
      }
      CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(kCFAllocatorDefault, MutableCopy, 0x8000100u, 0);
      if (ExternalRepresentation)
      {
        CFDataRef v3 = ExternalRepresentation;
        CFIndex Length = CFDataGetLength(ExternalRepresentation);
        CFRelease(v3);
        if (Length <= 32) {
          break;
        }
      }
      v8.location = CFStringGetLength(MutableCopy) - 1;
      v8.length = 1;
      CFStringDelete(MutableCopy, v8);
    }
    v9.length = CFStringGetLength(MutableCopy);
    v9.location = 0;
    CFStringFindAndReplace(MutableCopy, @"\n", @" ", v9, 0);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Using SSID %@ for MIS Session, SSID CFIndex Length = %ld", MutableCopy, Length message];
    }
  }
  return MutableCopy;
}

void sub_1001441F8(uint64_t a1)
{
  int v2 = (unsigned char *)(a1 + 5219);
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: MIS stopped Callback" : @"__WiFiDeviceManagerStopNetworkCallback"];
  }
  if (v2[4])
  {
    if (sub_10010EB14(a1) && !*v2)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, "%s: Starting MIS", "__WiFiDeviceManagerStopNetworkCallback"];
      }
      sub_10010EF6C(a1);
    }
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 5272), @"wifid");
    sub_10010F2A8(a1, 0);
    sub_1000643C4(*(void *)(a1 + 64), 0);
    sub_10010E8E0(a1, 5);
  }
}

void sub_100144318(uint64_t a1)
{
  uint64_t v15 = 0;
  if (!_MISAttach)
  {
    int v2 = -1;
    goto LABEL_6;
  }
  int v2 = _MISAttach(&v15);
  if (v2)
  {
LABEL_6:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Failed to attach to MIS Session with error %s"];
    }
    goto LABEL_9;
  }
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v30 = v3;
  long long v31 = v3;
  long long v28 = v3;
  long long v29 = v3;
  long long v26 = v3;
  long long v27 = v3;
  long long v24 = v3;
  long long v25 = v3;
  long long v22 = v3;
  long long v23 = v3;
  long long v20 = v3;
  long long v21 = v3;
  long long v18 = v3;
  long long v19 = v3;
  *(_OWORD *)cStr = v3;
  long long v17 = v3;
  if (_MISGetDynamicStoreKey) {
    BOOL v4 = _MISGetDynamicStoreKey(v15, cStr) != 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v15 && v4)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"Failed to get the MIS key"];
    }
    goto LABEL_23;
  }
  CFStringRef v8 = CFStringCreateWithCString(0, cStr, 0x600u);
  if (!v8)
  {
LABEL_23:
    if (_MISDetach) {
      _MISDetach(v15);
    }
    goto LABEL_9;
  }
  CFStringRef v9 = v8;
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v8);
  uint64_t v10 = *(void **)(a1 + 40);
  if (v10[30])
  {
    CFRetain(v10);
    uint64_t v11 = *(void *)(a1 + 40);
    BOOL v12 = *(NSObject **)(v11 + 240);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001445D8;
    block[3] = &unk_100240BB8;
    void block[4] = v11;
    void block[5] = v9;
    void block[6] = v15;
    dispatch_async(v12, block);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue" : @"__WiFiDeviceManagerAttachToDynamicStore_block_invoke"];
    }
    if (_MISDetach) {
      _MISDetach(v15);
    }
    CFRelease(v9);
  }
LABEL_9:
  if (CFArrayGetCount(*(CFArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) >= 1) {
    SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(*(void *)(a1 + 40) + 5440), *(CFArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0);
  }
  uint64_t v6 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void sub_1001445D8(void *a1)
{
  uint64_t v2 = a1[4];
  if (*(void *)(v2 + 240))
  {
    qword_10027D7A8 = a1[5];
    if (!qword_10027D7A8)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4 message:"Error transfering misKey to CFString"];
      }
      uint64_t v2 = a1[4];
    }
    BOOL v4 = sub_10010EB14(v2);
    uint64_t v2 = a1[4];
    *(unsigned char *)(v2 + 5220) = v4;
    if (_MISDetach)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: MIS dynamic store key: %@", "__WiFiDeviceManagerAttachToDynamicStore_block_invoke_2", qword_10027D7A8 message];
      }
      _MISDetach(a1[6]);
      uint64_t v2 = a1[4];
    }
  }

  CFRelease((CFTypeRef)v2);
}

void sub_1001446D4(id a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Requesting PersonalHotspotControl extension to reload because someone might change MIS state from NETRB"];
  }
  uint64_t v2 = +[CHSControlService sharedInstance];

  [(CHSControlService *)v2 reloadControlsForExtension:@"com.apple.WiFiKit.PersonalHotspotControl" kind:@"PersonalHotspotControl" reason:@"Requesting PersonalHotspotControl extension to reload because MIS state might be changed from NETRB"];
}

void sub_100144754(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count)
  {
    uint64_t v4 = Count;
    CFIndex v5 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3624));
    uint64_t v6 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3632)) + v5;
    if (v6)
    {
      CFIndex v55 = CFArrayGetCount(theArray);
      if (v55)
      {
        CFIndex v7 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3624));
        uint64_t v52 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3632)) + v7;
        CFStringRef v9 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          CFIndex v10 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3624));
          [v9 WFLog:3 message:@"%s: hs20Accounts: enabled %ld, disabled %ld", @"__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v10, CFArrayGetCount(*(CFArrayRef *)(a1 + 3632))];
        }
        if (v52)
        {
          CFMutableStringRef MutableCopy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, *(CFArrayRef *)(a1 + 3624));
          if (CFArrayGetCount(*(CFArrayRef *)(a1 + 3632)))
          {
            CFArrayRef v12 = *(const __CFArray **)(a1 + 3632);
            v58.length = CFArrayGetCount(v12);
            v58.location = 0;
            CFArrayAppendArray(MutableCopy, v12, v58);
          }
          CFArrayRef cf = MutableCopy;
          if (v55 >= 1)
          {
            for (CFIndex i = 0; i != v55; ++i)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
              if (ValueAtIndex) {
                sub_1000CCA3C((uint64_t)ValueAtIndex, 0);
              }
            }
          }
          uint64_t v48 = a1;
          uint64_t v49 = v6;
          uint64_t v50 = v4;
          CFArrayRef v15 = MutableCopy;
          if (v52 >= 1)
          {
            CFIndex v16 = 0;
            do
            {
              CFIndex v53 = v16;
              uint64_t v54 = (void *)CFArrayGetValueAtIndex(v15, v16);
              if (v54)
              {
                CFStringRef v17 = (const __CFString *)sub_10001E404((uint64_t)v54, @"DomainName");
                if (v17)
                {
                  CFStringRef v18 = v17;
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: Home Domain name %@", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v18 message];
                  }
                  if (sub_1000C95F4(v54))
                  {
                    if (v55 >= 1)
                    {
                      for (CFIndex j = 0; j != v55; ++j)
                      {
                        long long v21 = CFArrayGetValueAtIndex(theArray, j);
                        if (v21)
                        {
                          long long v22 = v21;
                          CFDictionaryRef v23 = (const __CFDictionary *)sub_1000CCB38((uint64_t)v21);
                          if (v23)
                          {
                            CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v23, @"ANQP_DOMAIN_NAME_LIST");
                            if (Value)
                            {
                              if (qword_10027DD68) {
                                [(id)qword_10027DD68 WFLog:3, "%s: Checking ANQP domain list against home domain %@", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v18 message];
                              }
                              CFIndex v26 = CFArrayGetCount(Value);
                              if (v26 >= 1)
                              {
                                CFIndex v27 = v26;
                                CFIndex v28 = 0;
                                while (1)
                                {
                                  CFStringRef v29 = (const __CFString *)CFArrayGetValueAtIndex(Value, v28);
                                  if (qword_10027DD68) {
                                    [(id)qword_10027DD68 WFLog:3, "%s: Comparing home domain %@ against ANQP domain result %@", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v18, v29 message];
                                  }
                                  if (v29)
                                  {
                                    if (CFEqual(v18, v29))
                                    {
                                      sub_1000CCA3C((uint64_t)v22, 1);
                                      sub_1000CC9E0((uint64_t)v22, 1);
                                      sub_1000C63FC((uint64_t)v22, (uint64_t)v54);
                                      uint64_t v32 = (void *)qword_10027DD68;
                                      if (qword_10027DD68)
                                      {
                                        CFNumberRef v33 = sub_10001E404((uint64_t)v54, @"DomainName");
                                        [v32 WFLog:3, "%s: found response from home operator %@, marking %@ provisioned", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v33, sub_10001A43C(v22) message];
                                      }
                                      goto LABEL_47;
                                    }
                                    if (qword_10027DD68) {
                                      [(id)qword_10027DD68 WFLog:3, "%s: home domain %@ and ANQP domain result %@ were determined to be different", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v18, v29 message];
                                    }
                                  }
                                  if (v27 == ++v28) {
                                    goto LABEL_48;
                                  }
                                }
                              }
                              continue;
                            }
                            if (qword_10027DD68) {
                              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: ANQP domain list was NULL", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v46, v47);
                            }
                          }
                          else
                          {
                            if (qword_10027DD68) {
                              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: result from WiFiNetworkGetGasResponse() was NULL", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v46, v47);
                            }
                          }
                        }
                        else
                        {
                          if (qword_10027DD68) {
                            [((id)qword_10027DD68) WFLog:message:3, "%s: network ref from responses was NULL.", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v46, v47];
                          }
                        }
LABEL_47:
LABEL_48:
                        ;
                      }
                    }
                  }
                  else
                  {
                    if (qword_10027DD68) {
                      [(id)qword_10027DD68 WFLog:3, "%s: provisioned HS2.0 account %@ has no credentials.", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", sub_10001A43C(v54) message];
                    }
                  }
                }
              }
              CFIndex v16 = v53 + 1;
              CFArrayRef v15 = cf;
            }
            while (v53 + 1 != v52);
          }
          uint64_t v6 = v49;
          uint64_t v4 = v50;
          a1 = v48;
          if (v15) {
            CFRelease(v15);
          }
LABEL_56:
          int v35 = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, *(CFArrayRef *)(a1 + 3624));
          if (CFArrayGetCount(*(CFArrayRef *)(a1 + 3632)))
          {
            CFArrayRef v36 = *(const __CFArray **)(a1 + 3632);
            v59.length = CFArrayGetCount(v36);
            v59.location = 0;
            CFArrayAppendArray(v35, v36, v59);
          }
          if (v4 >= 1)
          {
            for (CFIndex k = 0; k != v4; ++k)
            {
              uint64_t v38 = CFArrayGetValueAtIndex(theArray, k);
              if (v38)
              {
                uint64_t v39 = v38;
                if (!sub_1000CCA08((uint64_t)v38) && v6 >= 1)
                {
                  for (CFIndex m = 0; v6 != m; ++m)
                  {
                    BOOL v41 = (void *)CFArrayGetValueAtIndex(v35, m);
                    if (v41)
                    {
                      long long v42 = v41;
                      if (!sub_1000C95F4(v41))
                      {
                        if (qword_10027DD68) {
                          [(id)qword_10027DD68 WFLog:3, "%s: provisioned HS2.0 account %@ has no credentials.", "__WiFiDeviceManagerFindMatchingHS20Account", sub_10001A43C(v42) message];
                        }
                        if (!v35) {
                          return;
                        }
LABEL_72:
                        CFRelease(v35);
                        return;
                      }
                      if (sub_1000CCC50(v39, v42))
                      {
                        sub_1000CC9E0((uint64_t)v39, 1);
                        sub_1000C63FC((uint64_t)v39, (uint64_t)v42);
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
          if (!v35) {
            return;
          }
          goto LABEL_72;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: No HS2.0 accounts" : @"__WiFiDeviceManagerSetHS20HomeOperatorNetwork"];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: No GAS responses received", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork")];
        }
      }
      goto LABEL_56;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: No HS2.0 accounts", @"__WiFiDeviceManagerFindMatchingHS20Account"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: No GAS responses received", "__WiFiDeviceManagerFindMatchingHS20Account"];
    }
  }
}

void sub_100144E10(uint64_t a1, const void *a2, uint64_t a3, const __CFDictionary **a4)
{
  uint64_t v7 = (uint64_t)*a4;
  *((unsigned char *)*a4 + 5429) = 0;
  if (a3)
  {
    sub_100119218(v7, a2, 0, 0, 0);
    CFStringRef v8 = 0;
  }
  else
  {
    CFStringRef v8 = sub_10001C1B4(a1, a2);
    if (v8)
    {
      CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a4 + 4);
      if (v9)
      {
        CFNumberRef v10 = v9;
        int valuePtr = -1431655766;
        sub_10001C6A4((uint64_t)v8, @"networkRole", v9);
        CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr == 4)
        {
          CFDictionaryRef v11 = a4[3];
          if (v11)
          {
            CFArrayRef Value = CFDictionaryGetValue(a4[3], @"APPLE80211KEY_AWDL_INFO_ASSISTED_DISCOVERY_FOLLOW");
            if (Value) {
              sub_10001C6A4((uint64_t)v8, @"APPLE80211KEY_AWDL_INFO_ASSISTED_DISCOVERY_FOLLOW", Value);
            }
            long long v13 = CFDictionaryGetValue(v11, @"AWDL_INFO_ASSISTED_DISCOVERY_METRIC");
            if (v13)
            {
              sub_10001C6A4((uint64_t)v8, @"AWDL_INFO_ASSISTED_DISCOVERY_METRIC", v13);
              CFStringRef v14 = (const __CFString *)a4[6];
              if (v14)
              {
                if (CFStringCompare(v14, @"mobilewifitool", 0))
                {
                  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
                  CFDateRef v16 = CFDateCreate(kCFAllocatorDefault, Current);
                  sub_10001C6A4((uint64_t)v8, @"lastJoined", v16);
                  if (v16) {
                    CFRelease(v16);
                  }
                }
              }
            }
          }
        }
        CFRelease(v10);
      }
      CFSetAddValue(*(CFMutableSetRef *)(v7 + 3320), v8);
    }
  }
  CFDictionaryRef v17 = a4[1];
  if (v17) {
    ((void (*)(uint64_t, const void *, uint64_t, const void *, void, const __CFDictionary *))v17)(v7, a2, a3, v8, 0, a4[5]);
  }
  CFDictionaryRef v18 = a4[3];
  if (v18)
  {
    CFRelease(v18);
    a4[3] = 0;
  }
  CFDictionaryRef v19 = a4[6];
  if (v19)
  {
    CFRelease(v19);
    a4[6] = 0;
  }
  if (v8) {
    CFRelease(v8);
  }
  free(a4);
}

void sub_100145008(int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  CFIndex v5 = (void (*)(uint64_t, uint64_t, uint64_t, void, uint64_t))a4[1];
  if (v5) {
    v5(*a4, a2, a3, 0, a4[3]);
  }
  uint64_t v7 = (const void *)a4[2];
  if (v7 && CFSetContainsValue(*(CFSetRef *)(v6 + 3320), v7)) {
    CFSetRemoveValue(*(CFMutableSetRef *)(v6 + 3320), (const void *)a4[2]);
  }
  if (*(void *)(v6 + 5408))
  {
    sub_100102708(v6);
  }
  CFNumberRef v9 = (const void *)a4[2];
  if (v9) {
    CFRelease(v9);
  }

  free(a4);
}

__CFDictionary *sub_1001450A8(id *a1)
{
  if (_os_feature_enabled_impl())
  {
    id v2 = [objc_msgSend(a1[1103], "statistics") copy];
    id v3 = [[objc_msgSend(v2, "debugInfo") copy];

    return (__CFDictionary *)v3;
  }
  else
  {
    if (!a1) {
      return 0;
    }
    v44[0] = @"PrevChannelScan";
    v44[1] = @"MRUChannelScan";
    v44[2] = @"RemChannelScan";
    v44[3] = @"Broadcast24GScan";
    v44[4] = @"Broadcast5GScan";
    v44[5] = @"BroadcastGeoBasedAllBandScan";
    v44[6] = @"BroadcastPeriodicAllBandScan";
    v44[7] = @"BroadcastLegacyAllBandScan";
    v44[8] = @"BroadcastLocnInvalidAllBandScan";
    v44[9] = @"BroadcastFake5GScan";
    v44[10] = @"HiddenNetworkScan";
    v44[11] = @"LocnPrevChannelScan";
    v44[12] = @"LocnMRUChannelScan";
    v43[0] = @"DeviceEnable";
    v43[1] = @"ATJOneShot";
    v43[2] = @"BTStateChange";
    v43[3] = @"PowerStateChange";
    v43[4] = @"LinkStateChange";
    v43[5] = @"WiFiDirectDisabled";
    v43[6] = @"ClientAssociateCallback";
    v43[7] = @"AdhocNetworkStopped";
    v43[8] = @"BatteryPowerResource";
    v43[9] = @"AWDLBringup";
    v43[10] = @"AWDLBringdown";
    v43[11] = @"AJDeferralTimer";
    v43[12] = @"MISEvent";
    v43[13] = @"SetNetworkCall";
    v42[0] = @"ResetTypeNone";
    v42[1] = @"ResetTypeModerate";
    v42[2] = @"ResetTypeFull";
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    uint64_t v6 = 0;
    uint64_t v7 = (char *)(a1 + 740);
    do
    {
      CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, v7);
      if (v8)
      {
        CFNumberRef v9 = v8;
        CFDictionarySetValue(Mutable, (const void *)v44[v6], v8);
        CFRelease(v9);
      }
      ++v6;
      v7 += 4;
    }
    while (v6 != 13);
    uint64_t v10 = 0;
    CFDictionaryRef v11 = (char *)a1 + 5676;
    do
    {
      CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, v11);
      if (v12)
      {
        CFNumberRef v13 = v12;
        CFDictionarySetValue(Mutable, (const void *)v43[v10], v12);
        CFRelease(v13);
      }
      ++v10;
      v11 += 4;
    }
    while (v10 != 14);
    uint64_t v14 = 0;
    CFArrayRef v15 = (char *)a1 + 5652;
    do
    {
      CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, v15);
      if (v16)
      {
        CFNumberRef v17 = v16;
        CFDictionarySetValue(Mutable, (const void *)v42[v14], v16);
        CFRelease(v17);
      }
      ++v14;
      v15 += 4;
    }
    while (v14 != 3);
    CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 759);
    if (v18)
    {
      CFNumberRef v19 = v18;
      CFDictionarySetValue(Mutable, @"NetworkTransitionScan", v18);
      CFRelease(v19);
    }
    CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 730);
    if (v20)
    {
      CFNumberRef v21 = v20;
      CFDictionarySetValue(Mutable, @"AJNum5GhzOnlyNetworks", v20);
      CFRelease(v21);
    }
    CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)a1 + 5844);
    if (v22)
    {
      CFNumberRef v23 = v22;
      CFDictionarySetValue(Mutable, @"AJNumDualBandNetworks", v22);
      CFRelease(v23);
    }
    CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 731);
    if (v24)
    {
      CFNumberRef v25 = v24;
      CFDictionarySetValue(Mutable, @"AJNum24GhzOnlyNetworks", v24);
      CFRelease(v25);
    }
    CFNumberRef v26 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 729);
    if (v26)
    {
      CFNumberRef v27 = v26;
      CFDictionarySetValue(Mutable, @"AJ5GhzTriggerForBusy24GhzBand", v26);
      CFRelease(v27);
    }
    CFNumberRef v28 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 728);
    if (v28)
    {
      CFNumberRef v29 = v28;
      CFDictionarySetValue(Mutable, @"AJ5GhzTriggerForHS20Networks", v28);
      CFRelease(v29);
    }
    CFNumberRef v30 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)a1 + 5828);
    if (v30)
    {
      CFNumberRef v31 = v30;
      CFDictionarySetValue(Mutable, @"AJ5GhzTriggerForLegacyHSNetworks", v30);
      CFRelease(v31);
    }
    CFNumberRef v32 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)a1 + 5836);
    if (v32)
    {
      CFNumberRef v33 = v32;
      CFDictionarySetValue(Mutable, @"AJ5GhzTriggerForNetworks", v32);
      CFRelease(v33);
    }
    CFNumberRef v34 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)a1 + 5820);
    if (v34)
    {
      CFNumberRef v35 = v34;
      CFDictionarySetValue(Mutable, @"AJ5GhzTriggerForHiddenNetworks", v34);
      CFRelease(v35);
    }
    CFNumberRef v36 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)a1 + 6172);
    if (v36)
    {
      CFNumberRef v37 = v36;
      CFDictionarySetValue(Mutable, @"AutoHotspotBTScanCount", v36);
      CFRelease(v37);
    }
    CFNumberRef v38 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 772);
    if (v38)
    {
      CFNumberRef v39 = v38;
      CFDictionarySetValue(Mutable, @"AutoHotspotBTScanDuration", v38);
      CFRelease(v39);
    }
    CFNumberRef v40 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 862);
    if (v40)
    {
      CFNumberRef v41 = v40;
      CFDictionarySetValue(Mutable, @"isADHSConnected", v40);
      CFRelease(v41);
    }
    return Mutable;
  }
}

void sub_100145710(uint64_t a1)
{
  if (a1)
  {
    *(void *)(a1 + 7224) = 0;
    id v2 = (unsigned char *)(a1 + 7237);
    if (*(unsigned char *)(a1 + 7237))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"DPS/DNS Symptoms HUD: clearing display and stopping displayTimer"];
      }
      *id v2 = 0;
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 7216), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (MGGetBoolAnswer())
      {
        uint64_t v4 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 4552);
        if (v4) {
          v4(a1, 18, 0, *(void *)(a1 + 4560));
        }
      }
    }
    if (*(_DWORD *)(a1 + 7232))
    {
      uint64_t v5 = *(void *)(a1 + 120);
      sub_10003C338(v5);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager."];
    }
  }
}

void sub_100145858(uint64_t a1)
{
  if (a1)
  {
    id v2 = (unsigned char *)(a1 + 7288);
    *(void *)(a1 + 7272) = 0;
    *(void *)(a1 + 7264) = 0;
    if (*(unsigned char *)(a1 + 7288))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"SlowWiFi HUD: clearing display and stopping displayTimer"];
      }
      *id v2 = 0;
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 7256), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (MGGetBoolAnswer())
      {
        uint64_t v4 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 4552);
        if (v4)
        {
          uint64_t v5 = *(void *)(a1 + 4560);
          v4(a1, 17, 0, v5);
        }
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null manager.", "__WiFiDeviceManagerClearSlowWiFiHUD")];
    }
  }
}

void sub_100145994(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 240))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v3 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, void, void, void, void))(v2 + 4728))(v2, *(void *)(*(void *)(v4 + 8) + 24), 0, 0, *(void *)(v2 + 4736));
    CFRelease(v3[1]);
    uint64_t v5 = *v3;
  }
  else
  {
    CFRelease((CFTypeRef)v2);
    uint64_t v6 = *(void **)(a1 + 32);
    id v3 = (CFTypeRef *)(a1 + 32);
    uint64_t v5 = v6;
  }
  uint64_t v7 = *(const void **)(v5[1] + 24);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(*((void *)*v3 + 1) + 24) = 0;
  }
}

id sub_100145A14(uint64_t a1, const void *a2, int a3)
{
  uint64_t v6 = sub_10001E404((uint64_t)a2, @"BSSID");
  uint64_t v7 = sub_10001A43C(a2);
  int v8 = sub_100073490(*(void *)(a1 + 64));
  BOOL v9 = sub_10001FC1C((uint64_t)a2);
  unsigned int v10 = sub_100019AD4(a1, a2);
  unsigned int v11 = sub_1000C6B08((uint64_t)a2);
  int v12 = sub_1000CF5AC((uint64_t)a2);
  unsigned int v13 = v12;
  if (v8 && !v9 && v10 != 1 && (v11 == 1 || v12 == 2))
  {
    [+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") getAdaptiveRoamParams:v6 ssid:v7];
    char v26 = 1;
  }
  else
  {
    int v35 = v12;
    CFArrayRef v15 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      BOOL v16 = v9;
      BOOL v33 = v8 != 0;
      CFStringRef v17 = sub_10001CC9C(v10);
      int v34 = v8;
      BOOL v18 = v9;
      unsigned int v19 = v10;
      CFNumberRef v20 = v7;
      CFStringRef v21 = v17;
      CFStringRef v32 = sub_10005AE9C(v11);
      CFNumberRef v31 = v20;
      unsigned int v10 = v19;
      BOOL v9 = v18;
      int v8 = v34;
      [v15 WFLog:3, "%s: not enabling adaptive roaming on %@ (forceApply:%u deviceSupport:%u EAP:%u env:%@ networkOfInterestType:%@ LOIType:%@)", "__WiFiDeviceManagerGetAdaptiveRoamParams", v31, a3 != 0, v33, v16, v21, v32, sub_10005AF18(v35) message];
    }
    if (a3)
    {
      unsigned int v22 = v11;
      id v23 = objc_alloc_init((Class)NSMutableDictionary);
      [v23 setObject:[NSNumber numberWithInt:0] forKey:@"IO80211InterfaceAdaptiveRoamRSSITrigger"];
      uint64_t v24 = *(void *)(a1 + 64);
      CFNumberRef v25 = (const void *)sub_100017C48(v24);
      sub_100017D28(v24, v25, 532, 0, (uint64_t)v23);

      unsigned int v11 = v22;
    }
    char v26 = 0;
    unsigned int v13 = v35;
  }
  uint64_t v27 = v11;
  CFNumberRef v28 = *(void **)(a1 + 7368);
  uint64_t v29 = sub_100017C48(*(void *)(a1 + 64));
  v36[0] = v26;
  v36[1] = a3 != 0;
  v36[2] = v8 != 0;
  v36[3] = v9;
  int v37 = -1431655766;
  uint64_t v38 = v10;
  uint64_t v39 = v27;
  uint64_t v40 = v13;
  return [v28 setRoamingARCriteria:v36 forInterface:v29];
}

void sub_100145C94(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (*(void *)(v3 + 240) && *(void *)(v3 + 7072))
  {
    id v5 = a2;
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: WFMeasure result: %@", "__WiFiDeviceManagerPerformThroughputMeasurement_block_invoke", a2 message];
    }
    CFRetain(*(CFTypeRef *)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = *(NSObject **)(v7 + 240);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100145DF0;
    block[3] = &unk_100241B60;
    void block[5] = *(void *)(a1 + 32);
    void block[6] = v7;
    void block[4] = v5;
    char v12 = *(unsigned char *)(a1 + 48);
    dispatch_async(v8, block);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: null queue/measurement handle", "__WiFiDeviceManagerPerformThroughputMeasurement_block_invoke"];
    }
    unsigned int v10 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
  }
}

void sub_100145DF0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2[30])
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v4 = CFDateCreate(kCFAllocatorDefault, Current);
    CFArrayRef v5 = (const __CFArray *)sub_10001E404(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), @"lastTputMeasurementResults");
    if (v5)
    {
      CFMutableStringRef MutableCopy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v5);
      if (CFArrayGetCount(MutableCopy) >= 4) {
        CFArrayRemoveValueAtIndex(MutableCopy, 0);
      }
      if (!MutableCopy) {
        goto LABEL_21;
      }
    }
    else
    {
      CFMutableStringRef MutableCopy = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (!MutableCopy)
      {
LABEL_21:
        sub_10001C6A4(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), @"lastTputMeasurementDate", v4);
        uint64_t v14 = *(void **)(a1 + 48);
        CFArrayRef v15 = (void (*)(void *, void, void))v14[565];
        if (v15)
        {
          v15(v14, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), v14[566]);
          uint64_t v14 = *(void **)(a1 + 48);
        }
        CFRelease(v14);
        if (v4) {
          CFRelease(v4);
        }
        BOOL v16 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        if (v16)
        {
          CFRelease(v16);
          *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
        }

        return;
      }
    }
    if ([*(id *)(a1 + 32) downloadError])
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: throughput measurement completed for %@, errored out (%@)", "__WiFiDeviceManagerPerformThroughputMeasurement_block_invoke_2", sub_10001A43C(*(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24)), objc_msgSend(*(id *)(a1 + 32), "downloadError") message];
      }
    }
    else
    {
      [*(id *)(a1 + 32) backhaulThroughput];
      double v10 = v9;
      double valuePtr = v9;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: throughput measurement completed for %@, result %f Mbps", "__WiFiDeviceManagerPerformThroughputMeasurement_block_invoke_2", sub_10001A43C(*(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24)), *(void *)&v10, *(void *)&valuePtr message];
      }
      if (*(unsigned char *)(a1 + 56)) {
        sub_10014609C(*(void *)(a1 + 48), (int)v10);
      }
      CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
      if (v12)
      {
        CFNumberRef v13 = v12;
        CFArrayAppendValue(MutableCopy, v12);
        sub_10001C6A4(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), @"lastTputMeasurementResults", MutableCopy);
        CFRelease(v13);
      }
    }
    CFRelease(MutableCopy);
    goto LABEL_21;
  }
  CFRelease(v2);
  uint64_t v7 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_10014609C(uint64_t a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    CFArrayRef v5 = (const void *)sub_100017C48(v4);
    sub_100017D28(v4, v5, 536, 0, (uint64_t)v3);
  }
  if (v3) {
    CFRelease(v3);
  }
}

void sub_100146118(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: error (%@) fetching network: %@", "__WiFiDeviceManagerFetchCurrentNetworkFrom3Bars_block_invoke", a3, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) message];
    }
    goto LABEL_47;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v36 = 0;
  int v37 = &v36;
  uint64_t v38 = 0x2020000000;
  uint64_t v39 = 0;
  if (v5)
  {
    if (v6)
    {
      if (objc_msgSend(objc_msgSend(a2, "results"), "count"))
      {
        int v8 = sub_10001E404((uint64_t)v6, @"BSSID");
        if ((unint64_t)objc_msgSend(objc_msgSend(a2, "results"), "count") < 2) {
          id v9 = [[[objc_msgSend(objc_msgSend(a2, "results"), "allValues") firstObject];
        }
        else {
          id v9 = [objc_msgSend(a2, "results") objectForKey:v8];
        }
        double v10 = v9;
        if (v9)
        {
          unsigned int v11 = *(NSObject **)(v5 + 240);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1001468F4;
          block[3] = &unk_10023F220;
          void block[4] = &v36;
          void block[5] = v5;
          dispatch_sync(v11, block);
          CFNumberRef v12 = (const void *)v37[3];
          if (v12)
          {
            if (CFEqual(v6, v12))
            {
              if ([v10 attributes])
              {
                long long v33 = 0u;
                long long v34 = 0u;
                long long v31 = 0u;
                long long v32 = 0u;
                id v13 = [v10 attributes];
                id v14 = [v13 countByEnumeratingWithState:&v31 objects:v40 count:16];
                if (v14)
                {
                  uint64_t v15 = *(void *)v32;
                  do
                  {
                    for (CFIndex i = 0; i != v14; CFIndex i = (char *)i + 1)
                    {
                      if (*(void *)v32 != v15) {
                        objc_enumerationMutation(v13);
                      }
                      switch([*(id *)(*((void *)&v31 + 1) + 8 * i) intValue])
                      {
                        case 1u:
                          sub_10001C6A4(v37[3], @"WiFiNetworkAttributeIsPotentiallyCaptive", kCFBooleanTrue);
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:4, "%s: '%@' isPotentiallyCaptive", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", sub_10001A43C((const void *)v37[3]) message];
                          }
                          goto LABEL_33;
                        case 2u:
                          sub_10001C6A4(v37[3], @"WiFiNetworkAttributeIsSuspicious", kCFBooleanTrue);
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:4, "%s: '%@' isSuspicious", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", sub_10001A43C((const void *)v37[3]) message];
                          }
                          goto LABEL_33;
                        case 4u:
                          sub_10001C6A4(v37[3], @"WiFiNetworkAttributeIsTCPGood", kCFBooleanTrue);
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:4, "%s: '%@' isTCPGood", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", sub_10001A43C((const void *)v37[3]) message];
                          }
                          goto LABEL_33;
                        case 5u:
                          sub_10001C6A4(v37[3], @"WiFiNetworkAttributeIsPotentiallyMoving", kCFBooleanTrue);
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:4, "%s: '%@' isPotentiallyMoving", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", sub_10001A43C((const void *)v37[3]) message];
                          }
                          goto LABEL_33;
                        case 6u:
                          sub_10001C6A4(v37[3], @"WiFiNetworkAttributeIsPublic", kCFBooleanTrue);
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:4, "%s: '%@' isPublic", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", sub_10001A43C((const void *)v37[3]) message];
                          }
                          goto LABEL_33;
                        case 7u:
                          sub_10001C6A4(v37[3], @"WiFiNetworkAttributeIsLowQuality", kCFBooleanTrue);
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:4, "%s: '%@' isLowQuality", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", sub_10001A43C((const void *)v37[3]) message];
                          }
LABEL_33:
                          break;
                        default:
                          continue;
                      }
                    }
                    id v14 = [v13 countByEnumeratingWithState:&v31 objects:v40 count:16];
                  }
                  while (v14);
                  char v18 = 1;
                }
                else
                {
                  char v18 = 1;
                }
              }
              else
              {
                char v18 = 0;
              }
              id v19 = [v10 popularityScore];
              CFNumberRef v20 = v19;
              if (v19)
              {
                sub_10001A610(v37[3], @"WiFiNetworkAttributePopularityScore", (uint64_t)[v19 score]);
                if ((unint64_t)[v20 score] >= 0x3E8) {
                  sub_10001C6A4(v37[3], @"WiFiNetworkAttributeHighPopularity", kCFBooleanTrue);
                }
                char v18 = 1;
              }
              CFStringRef v21 = *(NSObject **)(v5 + 240);
              v29[0] = _NSConcreteStackBlock;
              v29[1] = 3221225472;
              v29[2] = sub_10014693C;
              v29[3] = &unk_100241BD8;
              char v30 = v18;
              v29[4] = &v36;
              v29[5] = v5;
              dispatch_sync(v21, v29);
              goto LABEL_44;
            }
            char v26 = (void *)qword_10027DD68;
            if (qword_10027DD68)
            {
              uint64_t v27 = sub_10001A43C(v6);
              [v26 WFLog:4, "%s: no longer connected to %@ (connected to %@)", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", v27, sub_10001A43C((const void *)v37[3]) message];
            }
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4, @"%s: currentNetwork is null", @"__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork"];
            }
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: fetchedNetwork is null" : @"__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork"];
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: no results from 3bars for network %@", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", v6 message];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: network is null" : @"__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: manager is null", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork"];
    }
  }
LABEL_44:
  unsigned int v22 = (const void *)v37[3];
  if (v22)
  {
    CFRelease(v22);
    v37[3] = 0;
  }
  _Block_object_dispose(&v36, 8);
LABEL_47:
  uint64_t v23 = a1;
  uint64_t v24 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v24)
  {
    CFRelease(v24);
    uint64_t v23 = a1;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_1001468AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

const void *sub_1001468F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 64);
  CFNumberRef v3 = (const void *)sub_100017C48(v2);
  CFAbsoluteTime result = sub_10001C1B4(v2, v3);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_10014693C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    CFNumberRef v3 = *(void (**)(uint64_t, void, void))(v2 + 4520);
    if (v3) {
      v3(v2, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(void *)(v2 + 4528));
    }
  }
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (MGGetBoolAnswer())
  {
    if (v4)
    {
      if (v5)
      {
        CFArrayRef v6 = sub_1000194F8(v4, v5, 1);
        if (v6)
        {
          CFArrayRef v7 = v6;
          if (!sub_1000CFBD8((uint64_t)v6))
          {
            if (*(unsigned __int16 *)(v4 + 6600) <= 2u)
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:3 message:@"%s: network is in top 2 of usage" args:("__WiFiDeviceManagerPromptToChangeSSIDHarvestStatus")];
              }
            }
            else if (sub_100072AF0(*(void *)(v4 + 64)) == 1)
            {
              if (sub_1000C6B08((uint64_t)v7) == 2 && sub_1000CF14C((uint64_t)v7) == 2)
              {
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: prompting for %@ (state %d)", "__WiFiDeviceManagerPromptToChangeSSIDHarvestStatus", v5, sub_1000CFBD8((uint64_t)v5) message];
                }
                id v9 = sub_10001A43C(v5);
                CFStringRef v10 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ “%@”?", @"Allow Collection of ", v9);
                CFStringRef v11 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", @"[Internal Only]\nThe WiFi team is collecting network names to help validate feature work.");
                CFOptionFlags responseFlags = 0;
                CFUserNotificationDisplayAlert(0.0, 0, 0, 0, 0, v10, v11, @"Allow", @"Don't Allow", 0, &responseFlags);
                if ((responseFlags & 3) != 0) {
                  uint64_t v12 = 1;
                }
                else {
                  uint64_t v12 = 2;
                }
                sub_10001A610((uint64_t)v7, @"kWiFiNetworkSSIDHarvestStatusKey", v12);
                id v13 = *(void (**)(uint64_t, const __CFArray *, void))(v4 + 4520);
                if (v13) {
                  v13(v4, v7, *(void *)(v4 + 4528));
                }
                if (v10) {
                  CFRelease(v10);
                }
                if (v11) {
                  CFRelease(v11);
                }
                goto LABEL_24;
              }
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:3, @"%s: network NOI type is home or work", @"__WiFiDeviceManagerPromptToChangeSSIDHarvestStatus"];
              }
            }
            else
            {
              if (qword_10027DD68) {
                [qword_10027DD68 WFLog:message:3, "%s: association was not manual", "__WiFiDeviceManagerPromptToChangeSSIDHarvestStatus"];
              }
            }
          }
LABEL_24:
          CFRelease(v7);
          return;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: knownNetwork is null", @"__WiFiDeviceManagerPromptToChangeSSIDHarvestStatus"];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: network is null", @"__WiFiDeviceManagerPromptToChangeSSIDHarvestStatus"];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:message:4, "%s: manager is null", "__WiFiDeviceManagerPromptToChangeSSIDHarvestStatus"];
      }
    }
  }
}

void sub_100146CBC(uint64_t a1)
{
  uint64_t v5 = 0;
  CFArrayRef v6 = &v5;
  uint64_t v7 = 0x3052000000;
  int v8 = sub_100022D18;
  id v9 = sub_100022C14;
  id v10 = (id)0xAAAAAAAAAAAAAAAALL;
  id v10 = objc_alloc_init((Class)CWFLocalDeviceDiscovery);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100146DC4;
  v4[3] = &unk_100241C28;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v4[5] = &v5;
  v4[6] = v2;
  v4[4] = v3;
  [(id)v6[5] setHandler:v4];
  [(id)v6[5] discover];
  _Block_object_dispose(&v5, 8);
}

void sub_100146DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100146DC4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = *(NSObject **)(v3 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100146E48;
  block[3] = &unk_100241C00;
  block[8] = v3;
  uint64_t v5 = a1[5];
  void block[4] = a1[4];
  void block[5] = a2;
  void block[6] = a3;
  void block[7] = v5;
  dispatch_async(v4, block);
}

void sub_100146E48(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2[30])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: valid=%@", "__WiFiDeviceManagerUpdateLocalNetworkDiscoveredDevices_block_invoke_3", a1[5] message];
    }
    uint64_t v4 = a1[8];
    CFArrayRef v6 = (void *)a1[5];
    uint64_t v5 = (void *)a1[6];
    uint64_t v36 = a1;
    uint64_t v7 = (void *)a1[4];
    int v8 = sub_10012CD64(v4);
    if (objc_msgSend(-[CFDictionaryRef networkName](v8, "networkName"), "isEqualToString:", objc_msgSend(v7, "networkName")))
    {
      if ([v7 discoveredDevices]
        && ((id v9 = [v7 discoveredDevices],
             [v9 objectForKeyedSubscript:CWFNetworkProfilePropertyDiscoveredDevicesCountKey])
         || (id v10 = [v7 discoveredDevices],
             [v10 objectForKeyedSubscript:CWFNetworkProfilePropertyDiscoveredDevicesNamesKey]))
        && ![v6 count])
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: profile='%@' contains discovered devices (%@), disregarding empty update", "__WiFiDeviceManagerUpdateNetworkProfileWithDiscoveredDevices", v7, [v7 discoveredDevices]];
        }
      }
      else
      {
        BOOL v11 = [v7 publicAttribute] == (id)1
           || ([v7 isOpen] & 1) != 0
           || ([v7 isPublicAirPlayNetwork] & 1) != 0
           || ([v7 isPasspoint] & 1) != 0
           || [v7 addReason] == (id)10
           || [v7 addReason] == (id)17
           || [v7 addReason] == (id)16;
        id v12 = objc_alloc_init((Class)NSMutableArray);
        v43[0] = 0;
        v43[1] = v43;
        v43[2] = 0x2020000000;
        v43[3] = 0;
        v42[0] = _NSConcreteStackBlock;
        v42[1] = 3221225472;
        v42[2] = sub_100147734;
        void v42[3] = &unk_100241C50;
        v42[4] = v12;
        v42[5] = v43;
        [v6 enumerateObjectsUsingBlock:v42];
        if ([v7 discoveredDevices]) {
          id v13 = [[objc_msgSend(v7, "discoveredDevices") mutableCopy];
        }
        else {
          id v13 = objc_alloc_init((Class)NSMutableDictionary);
        }
        uint64_t v15 = v13;
        if ([v12 count]) {
          char v16 = v11;
        }
        else {
          char v16 = 1;
        }
        if (v16)
        {
          if (qword_10027DD68)
          {
            if (v11) {
              char v18 = "%s: skipping device names for sensitive network profile='%@'";
            }
            else {
              char v18 = "%s: no device names discovered for profile='%@'";
            }
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, v18, "__WiFiDeviceManagerUpdateNetworkProfileWithDiscoveredDevices", v7);
          }
        }
        else
        {
          [v15 setObject:v12 forKey:CWFNetworkProfilePropertyDiscoveredDevicesNamesKey];
        }
        if ([v6 count])
        {
          id v19 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v6 count]);
          [v15 setObject:v19 forKey:CWFNetworkProfilePropertyDiscoveredDevicesCountKey];
        }
        CFNumberRef v20 = +[NSDate date];
        [v15 setObject:v20 forKey:CWFNetworkProfilePropertyDiscoveredDevicesTimestampKey];
        [v7 setDiscoveredDevices:v15];
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: count='%lu' devices='%@' profile='%@'", "__WiFiDeviceManagerUpdateNetworkProfileWithDiscoveredDevices", [v6 count], v12, v7 message];
        }
        unsigned int v22 = sub_1000CFEE8(v7, 0);
        (*(void (**)(uint64_t, _WORD *, void))(v4 + 4520))(v4, v22, *(void *)(v4 + 4528));
        if (v12) {
          CFRelease(v12);
        }
        if (v15) {
          CFRelease(v15);
        }
        if (v22) {
          CFRelease(v22);
        }
        if (v8) {
          CFRelease(v8);
        }
        _Block_object_dispose(v43, 8);
      }
      if (&_AnalyticsSendEventLazy)
      {
        id cf = objc_alloc_init((Class)NSMutableDictionary);
        if (v5)
        {
          v44[0] = &off_100263340;
          v44[1] = &off_100263328;
          v45[0] = &off_100263388;
          v45[1] = &off_100263388;
          v44[2] = &off_1002633A0;
          v44[3] = &off_1002633B8;
          v45[2] = &off_100263388;
          v45[3] = &off_100263388;
          id v23 = [+[NSDictionary dictionaryWithObjects:v45 forKeys:v44 count:4] mutableCopy];
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          id v24 = [v5 countByEnumeratingWithState:&v38 objects:v43 count:16];
          if (v24)
          {
            uint64_t v25 = *(void *)v39;
            do
            {
              for (CFIndex i = 0; i != v24; CFIndex i = (char *)i + 1)
              {
                if (*(void *)v39 != v25) {
                  objc_enumerationMutation(v5);
                }
                uint64_t v27 = *(void **)(*((void *)&v38 + 1) + 8 * i);
                if (objc_msgSend(v23, "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v27, "reason"))))
                {
                  [v23 setObject:+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)objc_msgSend(objc_msgSend(v23, "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v27, "reason"))), "integerValue")+ 1) forKeyedSubscript:+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v27, "reason"))];
                }
              }
              id v24 = [v5 countByEnumeratingWithState:&v38 objects:v43 count:16];
            }
            while (v24);
          }
          [cf setObject:[v23 objectForKeyedSubscript:&off_100263340] forKey:@"filteredServiceName"];
          [cf setObject:[v23 objectForKeyedSubscript:&off_1002633B8] forKey:@"filteredLexical"];
          [cf setObject:[v23 objectForKeyedSubscript:&off_1002633A0] forKey:@"filteredGenerated"];
          [cf setObject:[v23 objectForKeyedSubscript:&off_100263328] forKey:@"filteredCharacters"];
          if (v23) {
            CFRelease(v23);
          }
        }
        if (v6) {
          CFNumberRef v28 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v6 count]);
        }
        else {
          CFNumberRef v28 = (NSNumber *)&off_100263388;
        }
        [cf setObject:v28 forKey:@"totalCount"];
        if (v5) {
          uint64_t v29 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v5 count]);
        }
        else {
          uint64_t v29 = (NSNumber *)&off_100263388;
        }
        [cf setObject:v29 forKey:@"filteredCount"];
        [cf setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v7, "isOpen"))] forKey:@"open"];
        [cf setObject:[+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v7, "publicAttribute"))] forKey:@"public"];
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: sending metric='%@'", "__WiFiDeviceManagerUpdateNetworkProfileWithDiscoveredDevices", cf message];
        }
        AnalyticsSendEventLazy();
        if (cf) {
          CFRelease(cf);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: disregarding update, profile='%@' expected='%@'", "__WiFiDeviceManagerUpdateNetworkProfileWithDiscoveredDevices", v8, v7 message];
      }
    }
    long long v31 = v36;
    long long v32 = *(const void **)(*(void *)(v36[7] + 8) + 40);
    if (v32)
    {
      CFRelease(v32);
      long long v31 = v36;
      *(void *)(*(void *)(v36[7] + 8) + 40) = 0;
    }
    CFRelease((CFTypeRef)v31[8]);
    CFRelease((CFTypeRef)v36[4]);
  }
  else
  {
    CFRelease(v2);
    id v14 = (const void *)a1[4];
    CFRelease(v14);
  }
}

void sub_10014770C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

id sub_100147734(uint64_t a1, void *a2, unsigned char *a3)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 10) {
    *a3 = 1;
  }
  id result = [*(id *)(a1 + 32) addObject:[a2 name]];
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  return result;
}

uint64_t sub_10014779C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_1001477A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Couldn't send event (%@), error(%@) ", "__WiFiDeviceManagerSendCarConnectionTime_block_invoke", *(void *)(a1 + 32), a3 message];
    }
  }
}

void sub_100147830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Couldn't send event (%@), error(%@) ", "__WiFiDeviceManagerSendCarConnectionTime_block_invoke_2", *(void *)(a1 + 32), a3 message];
    }
  }
}

void sub_1001478BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Couldn't send event (%@), error(%@) ", "__WiFiDeviceManagerSendCarConnectionTime_block_invoke_3", *(void *)(a1 + 32), a3 message];
    }
  }
}

double sub_100147948(uint64_t a1, const void *a2, const void *a3, const void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_10006B4B0(*(void *)(a6 + 64));
  [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") associationDoneWithNetwork:a3 error:a5 interfaceName:a2];
  if (qword_10027DD68)
  {
    CFStringRef v13 = sub_100024BE8(*(_DWORD *)(a6 + 3280));
    id v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN, ASSOC", +[NSString stringWithFormat:@"Auto join association completed (%d) with current state: %@, network: %@", a5, v13, sub_10001A43C(a3)]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      long long v39 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v14 UTF8String]] UTF8String];
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
  }
  if (a5)
  {
    sub_10011E17C(a6, a3, 0);
  }
  else
  {
    if (sub_10001FC1C((uint64_t)a3)) {
      *(unsigned char *)(a6 + 3411) = 1;
    }
    sub_10012FE48(a6, a3, 0);
    if (a3)
    {
      if (sub_10001ED04((uint64_t)a3) || sub_1000C6FE8((const __CFDictionary *)a3))
      {
        *(CFAbsoluteTime *)(a6 + 712) = CFAbsoluteTimeGetCurrent();
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        *(CFAbsoluteTime *)(a6 + 960) = Current;
        CFAbsoluteTime v17 = (Current - *(double *)(a6 + 952)) * 1000.0;
        uint64_t v18 = v17;
        *(_DWORD *)buf = v17;
        id v19 = (const void *)sub_100017C48(*(void *)(a6 + 64));
        CFNumberRef v20 = sub_100018FA8(a6, v19, 1);
        LODWORD(v39) = 0;
        if (v20)
        {
          CFStringRef v21 = v20;
          CFNumberRef v22 = (const __CFNumber *)sub_100024070((uint64_t)v20);
          LODWORD(v23) = sub_100023F30((uint64_t)v21);
          if (v22)
          {
            unsigned __int16 valuePtr = -21846;
            CFNumberGetValue(v22, kCFNumberSInt16Type, &valuePtr);
            LODWORD(v22) = valuePtr;
            LOWORD(v39) = valuePtr;
          }
          if (v23) {
            WORD1(v39) = v23;
          }
          CFRelease(v21);
          uint64_t v23 = (unsigned __int16)v23;
        }
        else
        {
          uint64_t v23 = 0;
          LODWORD(v22) = 0;
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: time4WayHSTaken %u ms, channel %u, band %u", "__WiFiDeviceManagerSubmitInfraConnectionMetrics", v18, v22, v23);
        }
        sub_10005819C((unsigned int *)buf);
      }
      if (sub_1000199C0((uint64_t)a3)
        && (sub_1000CD6C4((uint64_t)a3) && (_os_feature_enabled_impl() & 1) != 0
         || !sub_1000CD6C4((uint64_t)a3) && _os_feature_enabled_impl()))
      {
        long long v32 = (const void *)sub_100017C48(a1);
        sub_100017D28(a1, v32, 513, 0, (uint64_t)kCFBooleanTrue);
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:3 message:@"%s: Enabled LMTPC for CarPlay" args:__WiFiDeviceManagerAssociationCallback];
        }
      }
    }
  }
  if (*(void *)(a6 + 3920))
  {
    if (*(void *)(a6 + 240))
    {
      if (a2) {
        CFRetain(a2);
      }
      if (a3) {
        CFRetain(a3);
      }
      if (a4) {
        CFRetain(a4);
      }
      CFRetain((CFTypeRef)a6);
      uint64_t v15 = *(NSObject **)(a6 + 240);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100147FC0;
      block[3] = &unk_100241698;
      void block[4] = a6;
      void block[5] = a2;
      void block[6] = a3;
      void block[7] = a4;
      int v36 = a5;
      dispatch_async(v15, block);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." arguments:("__WiFiDeviceManagerAssociationCallback", 0)];
      }
    }
  }
  if (v11 == *(void *)(a6 + 3312))
  {
    if (a5)
    {
      if (*(unsigned char *)(a6 + 1200) == 1) {
        sub_10001FD64(a6, 59);
      }
    }
    else
    {
      *(void *)(a6 + 1184) = sub_100018FA8(a6, a2, 1);
    }
    CFTypeRef v28 = *(CFTypeRef *)(a6 + 1184);
    if (a3 && !v28)
    {
      CFTypeRef v28 = CFRetain(a3);
      *(void *)(a6 + 1184) = v28;
    }
    *(void *)(a6 + 1192) = a4;
    *(_DWORD *)(a6 + 1176) = a5;
    int v29 = *(_DWORD *)(a6 + 3280);
    if (v29 == 15 || v29 == 12)
    {
      sub_1000FB1B0(a6);
      CFTypeRef v28 = *(CFTypeRef *)(a6 + 1184);
    }
    char v30 = (_OWORD *)(a6 + 1176);
    if (v28) {
      CFRelease(v28);
    }
    double result = 0.0;
    *char v30 = 0u;
    v30[1] = 0u;
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Ignoring old request.  CurrentCommand=%lld PendingCommand=%lld", v11, *(void *)(a6 + 3312));
    }
    if (a3)
    {
      CFArrayRef v26 = *(const __CFArray **)(a6 + 3528);
      if (v26)
      {
        v40.length = CFArrayGetCount(*(CFArrayRef *)(a6 + 3528));
        v40.location = 0;
        if (CFArrayGetFirstIndexOfValue(v26, v40, a3) == -1 || sub_10001FC1C((uint64_t)a3) && !sub_10006B0CC(a1)) {
          sub_1000FEA7C(a6, a2, 1012, "__WiFiDeviceManagerAssociationCallback", 17402);
        }
      }
    }
    if (_os_feature_enabled_impl()) {
      sub_10013CCE8(a6, (uint64_t)a3, (int)a5, CWFManagerErrorDomain, @"Stale assoc command");
    }
  }
  return result;
}

void sub_100147F4C(uint64_t a1, void *a2)
{
  if (a2)
  {
    [*(id *)(*(void *)(a1 + 32) + 7368) setJoinEvent:1 withReason:*(void *)(a1 + 40) lastDisconnectReason:0 lastJoinFailure:0 andNetworkDetails:a2 forInterface:sub_100017C48(*(void *)(*(void *)(a1 + 32) + 64))];
  }
}

void sub_100147FC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 240))
  {
    (*(void (**)(uint64_t, void, void, void, void, void))(v2 + 3920))(v2, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned int *)(a1 + 64), *(void *)(v2 + 3928));
    uint64_t v2 = *(void *)(a1 + 32);
  }
  CFRelease((CFTypeRef)v2);
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 48);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    CFRelease(v5);
  }
}

void sub_100148048(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: error %d reqInfo %@", "__WiFiDeviceManagerUserForcedAssociationCallback", a5, a4 message];
  }
  if (a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: enabling device manager", @"__WiFiDeviceManagerUserForcedAssociationCallback"];
    }
    sub_1001020F0(a1);
    if (a3 && *(void *)(a1 + 6240))
    {
      if (!a5)
      {
        CFStringRef v11 = (const __CFString *)sub_10001A43C(a3);
        CFStringRef v12 = (const __CFString *)sub_10001A43C(*(const void **)(a1 + 6240));
        if (CFEqual(v11, v12))
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3, "%s: finished forced association successfully", "__WiFiDeviceManagerUserForcedAssociationCallback"];
          }
          id v14 = (void *)a1;
          uint64_t v15 = (uint64_t)a3;
          uint64_t v17 = 0;
          goto LABEL_17;
        }
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: failed forced association", "__WiFiDeviceManagerUserForcedAssociationCallback")];
      }
      id v14 = (void *)a1;
      uint64_t v15 = (uint64_t)a3;
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: network is NULL" args:("__WiFiDeviceManagerUserForcedAssociationCallback")];
      }
      id v14 = (void *)a1;
      uint64_t v15 = 0;
    }
    uint64_t v17 = 2;
LABEL_17:
    sub_100120910(v14, v15, v17);
    return;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: manager is NULL", @"__WiFiDeviceManagerUserForcedAssociationCallback"];
  }
}

void sub_100148248(uint64_t a1, int a2)
{
  uint64_t v4 = (const void *)MRMediaRemoteCopyPlaybackStateDescription();
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: state is %@", "__WiFiDeviceManagerNowPlayingStateDidChange_block_invoke", v4 message];
  }
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 240);
  if (v7)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100148398;
    block[3] = &unk_100240BD8;
    void block[4] = v6;
    int v11 = a2;
    dispatch_async(v7, block);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." : @"__WiFiDeviceManagerNowPlayingStateDidChange_block_invoke"];
    }
    id v9 = *(const void **)(a1 + 32);
    CFRelease(v9);
  }
}

void sub_100148398(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 240)) {
    goto LABEL_12;
  }
  if (*(_DWORD *)(a1 + 40) == 1)
  {
    *(unsigned char *)(v2 + 3410) = 1;
    [+[WiFiUserInteractionMonitor sharedInstance] updateIsMediaPlaying:1];
  }
  else
  {
    *(unsigned char *)(v2 + 3410) = 0;
    [+[WiFiUserInteractionMonitor sharedInstance] updateIsMediaPlaying:0];
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v3 + 6632))
    {
LABEL_7:
      if (*(unsigned char *)(v3 + 433))
      {
        sub_1000157C8(v3, 3);
        uint64_t v3 = *(void *)(a1 + 32);
      }
      goto LABEL_9;
    }
    int v4 = _os_feature_enabled_impl();
    uint64_t v5 = *(void *)(a1 + 32);
    if (v4) {
      sub_10001FD64(v5, 0x1BuLL);
    }
    else {
      sub_100100D74(v5, 2);
    }
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    goto LABEL_7;
  }
LABEL_9:
  if (*(void *)(v3 + 7368))
  {
    [*(id *)(v3 + 7368) setMediaState:*(unsigned char *)(v3 + 3410) != 0];
    uint64_t v3 = *(void *)(a1 + 32);
  }
  sub_100101574(v3, 0);
  uint64_t v2 = *(void *)(a1 + 32);
LABEL_12:

  CFRelease((CFTypeRef)v2);
}

void sub_1001484A4(CFArrayRef *a1, const void *a2)
{
  if (CFArrayGetCount(a1[441]) < 1)
  {
LABEL_5:
    if (CFArrayGetCount(a1[442]) < 1)
    {
LABEL_9:
      if (CFArrayGetCount(a1[455]) < 1) {
        return;
      }
      CFIndex v7 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1[455], v7);
        if (CFEqual(a2, ValueAtIndex)) {
          break;
        }
        if (CFArrayGetCount(a1[455]) <= ++v7) {
          return;
        }
      }
    }
    else
    {
      CFIndex v6 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1[442], v6);
        if (CFEqual(a2, ValueAtIndex)) {
          break;
        }
        if (CFArrayGetCount(a1[442]) <= ++v6) {
          goto LABEL_9;
        }
      }
    }
  }
  else
  {
    CFIndex v4 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1[441], v4);
      if (CFEqual(a2, ValueAtIndex)) {
        break;
      }
      if (CFArrayGetCount(a1[441]) <= ++v4) {
        goto LABEL_5;
      }
    }
  }

  sub_1000198FC((uint64_t)a2, (uint64_t)ValueAtIndex);
}

uint64_t sub_1001485D0(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: manager ref is null", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17];
    }
    goto LABEL_72;
  }
  if (*(unsigned char *)(a1 + 6896) && *(void *)(a1 + 6976))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: Transition OK. Auto Hotspot Network recommendation" : @"__WiFiDeviceManagerIsStateSuitableForNetworkTransition"];
    }
LABEL_29:
    uint64_t v9 = 1;
    goto LABEL_30;
  }
  if (!*(void *)(a1 + 3528))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no known networks", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    }
    goto LABEL_72;
  }
  if (*(_DWORD *)(a1 + 20) != 1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: wifi is off", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    }
    goto LABEL_72;
  }
  if (!*(unsigned char *)(a1 + 3411))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: not associated", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    }
    goto LABEL_72;
  }
  if (*(unsigned char *)(a1 + 3412))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: on a moving network", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    }
    goto LABEL_72;
  }
  if (sub_100112644(a1) && sub_1001116F0(a1))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Active Ranging Session", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    }
    goto LABEL_72;
  }
  if (*(unsigned char *)(a1 + 6632)) {
    goto LABEL_13;
  }
  if (*(unsigned char *)(a1 + 6616))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Transition ok when its within colocated scope", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition"];
    }
    goto LABEL_29;
  }
  CFStringRef v13 = (const void *)sub_100016E20(*(void *)(a1 + 64));
  id v14 = sub_100018FA8(a1, v13, 1);
  uint64_t v15 = v14;
  if (v14)
  {
    if (!sub_10001E71C((uint64_t)v14) && *(unsigned char *)(a1 + 3413)) {
      goto LABEL_39;
    }
    CFRelease(v15);
  }
  else if (*(unsigned char *)(a1 + 3413))
  {
LABEL_39:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: network switched by user", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition")];
    }
    if (v15) {
      CFRelease(v15);
    }
    goto LABEL_43;
  }
  if (*(_DWORD *)(a1 + 176) != 3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: display is on", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    }
    goto LABEL_72;
  }
LABEL_13:
  if (*(int *)(a1 + 3392) >= 5)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: already tried enough times", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    }
    goto LABEL_72;
  }
  if (*(unsigned char *)(a1 + 5496))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: in carplay", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    }
    goto LABEL_72;
  }
  if (*(unsigned char *)(a1 + 3408))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: voip on going", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    }
    goto LABEL_72;
  }
  if (*(unsigned char *)(a1 + 3409))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: call on going", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17];
    }
    goto LABEL_72;
  }
  if (*(unsigned char *)(a1 + 3410))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: media playing", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    }
    goto LABEL_72;
  }
  if (*(unsigned char *)(a1 + 3414))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Awdl RealTime is active", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    }
    goto LABEL_72;
  }
  if (*(unsigned char *)(a1 + 5498))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Airplay over Infra is active", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    }
    goto LABEL_72;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = *(double *)(a1 + 3400);
  if (v5 != 0.0)
  {
    double v6 = Current - v5;
    if (Current - v5 <= 30.0)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: timeSinceLastScan %f", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", *(void *)&v6);
      }
      goto LABEL_72;
    }
  }
  double v7 = CFAbsoluteTimeGetCurrent();
  double v8 = *(double *)(a1 + 3416);
  uint64_t v9 = 1;
  if (v8 != 0.0)
  {
    double v10 = v7 - v8;
    if (v7 - v8 <= 10.0)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: timeSinceLinkUp %f", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", *(void *)&v10);
      }
LABEL_72:
LABEL_43:
      uint64_t v9 = 0;
    }
  }
LABEL_30:
  return v9;
}

void sub_100148B30(uint64_t a1, const void *a2)
{
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 64);
    double v6 = (const void *)sub_100017C48(v5);
    double v7 = sub_10001C1B4(v5, v6);
    uint64_t v9 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      double v10 = sub_10001A43C(a2);
      [v9 WFLog:3, "%s: topNetwork: %@, current: %@", "__WiFiDeviceManagerTransitionToNetwork", v10, sub_10001A43C(v7) message];
    }
    if (v7)
    {
      if (!sub_10001A43C(v7))
      {
LABEL_67:
        CFRelease(v7);
        goto LABEL_68;
      }
      if (CFEqual(v7, a2))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, "%s: no need for transition...", "__WiFiDeviceManagerTransitionToNetwork"];
        }
        *(_DWORD *)(a1 + 3392) = 6;
        goto LABEL_67;
      }
      CFStringRef v13 = sub_1000CB630((uint64_t)a2);
      CFDictionaryRef v14 = v13;
      if (v13) {
        CFIndex Count = CFDictionaryGetCount(v13);
      }
      else {
        CFIndex Count = 0;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: channel count %d", "__WiFiDeviceManagerTransitionToNetwork", Count)];
      }
      if (Count)
      {
        uint64_t v52 = &v50;
        __chkstk_darwin();
        uint64_t v18 = (const void **)((char *)&v50 - v17);
        memset((char *)&v50 - v17, 170, v19);
        CFDictionaryGetKeysAndValues(v14, 0, v18);
        CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        if (Mutable)
        {
          CFDictionaryRef v51 = v14;
          id v21 = [objc_alloc((Class)NSMutableArray) initWithCapacity:2];
          uint64_t v22 = (Count - 1);
          if ((int)Count >= 1)
          {
            do
            {
              if (CFArrayGetCount(Mutable) > 1) {
                break;
              }
              CFDictionaryRef v23 = (const __CFDictionary *)v18[v22];
              if (v23)
              {
                CFArrayRef Value = CFDictionaryGetValue(v23, @"CHANNEL");
                if (Value)
                {
                  uint64_t v25 = Value;
                  if (([v21 containsObject:Value] & 1) == 0)
                  {
                    [v21 addObject:v25];
                    CFArrayAppendValue(Mutable, v18[v22]);
                  }
                }
              }
            }
            while (v22-- >= 1);
          }
          CFDictionaryRef v14 = v51;
        }
        else
        {
          id v21 = 0;
        }
      }
      else
      {
        uint64_t v27 = sub_100024070((uint64_t)a2);
        CFTypeRef v28 = sub_10001E404((uint64_t)a2, @"CHANNEL_FLAGS");
        if (!v27)
        {
          CFArrayRef Mutable = 0;
          id v21 = 0;
          goto LABEL_40;
        }
        int v29 = v28;
        CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        char v30 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        id v21 = 0;
        if (v30 && Mutable)
        {
          long long v31 = v30;
          CFDictionaryAddValue(v30, @"CHANNEL", v27);
          if (v29) {
            CFDictionaryAddValue(v31, @"CHANNEL_FLAGS", v29);
          }
          id v21 = [objc_alloc((Class)NSMutableArray) initWithCapacity:1];
          [v21 addObject:v27];
          CFArrayAppendValue(Mutable, v31);
          CFRelease(v31);
LABEL_37:
          char v32 = 0;
          if (CFArrayGetCount(Mutable)) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }
      }
      if (Mutable) {
        goto LABEL_37;
      }
LABEL_40:
      char v32 = 1;
LABEL_41:
      if (!sub_1000C8140((uint64_t)a2))
      {
        uint64_t v52 = (uint64_t *)v21;
        char v41 = v32;
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no mru channels found", "__WiFiDeviceManagerTransitionToNetwork")];
        }
        goto LABEL_81;
      }
LABEL_42:
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: mru channels: %@", "__WiFiDeviceManagerTransitionToNetwork", v21 message];
      }
      if (sub_1000C8140((uint64_t)a2))
      {
        int v34 = *(_DWORD *)(a1 + 128);
        CFArrayRef v35 = (const __CFArray *)a2;
        CFArrayRef v36 = 0;
      }
      else
      {
        int v37 = sub_10001EE48(a2);
        int v34 = *(_DWORD *)(a1 + 128);
        if (v37) {
          CFArrayRef v35 = (const __CFArray *)a2;
        }
        else {
          CFArrayRef v35 = 0;
        }
        CFArrayRef v36 = Mutable;
      }
      long long v38 = sub_100120A54(v35, v36, v34, 0x6Eu, 1);
      uint64_t v52 = (uint64_t *)v21;
      if (v38)
      {
        if (sub_1001485D0(a1))
        {
          ++*(_DWORD *)(a1 + 6072);
          long long v39 = malloc_type_malloc(0x28uLL, 0x10E0040573E0799uLL);
          if (v39)
          {
            CFRange v40 = v39;
            *long long v39 = a1;
            v39[1] = 0;
            v39[3] = 0;
            char v41 = v32;
            if (CFDictionaryContainsKey(v38, @"SSID_STR")) {
              BOOL v42 = 1;
            }
            else {
              BOOL v42 = CFDictionaryContainsKey(v38, @"SCAN_SSID_LIST") != 0;
            }
            v40[32] = v42;
            uint64_t v43 = (const void *)sub_100017C48(*(void *)(a1 + 64));
            uint64_t v44 = sub_100113508(a1, v43, v38, 0, (uint64_t)sub_10014922C, (uint64_t)v40, 0, 15);
            if (v44)
            {
              uint64_t v48 = v44;
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Error initiating scan request: %d", v48);
              }
              free(v40);
            }
            else
            {
              long long v45 = *(const void **)(a1 + 3376);
              if (v45) {
                CFRelease(v45);
              }
              *(void *)(a1 + 3376) = a2;
              CFRetain(a2);
            }
            goto LABEL_60;
          }
          char v41 = v32;
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: null scanData" args:("__WiFiDeviceManagerTransitionToNetwork")];
          }
        }
        else
        {
          char v41 = v32;
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3, "%s: not now...", "__WiFiDeviceManagerTransitionToNetwork"];
          }
        }
LABEL_60:
        CFRelease(v38);
LABEL_61:
        if (v52) {
          CFRelease(v52);
        }
        if ((v41 & 1) == 0) {
          CFRelease(Mutable);
        }
        if (v14) {
          CFRelease(v14);
        }
        goto LABEL_67;
      }
      char v41 = v32;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, "%s: failed to create scan request", "__WiFiDeviceManagerTransitionToNetwork"];
      }
LABEL_81:
      goto LABEL_61;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: invalid input" args:("__WiFiDeviceManagerTransitionToNetwork")];
    }
  }
LABEL_68:
}

void sub_10014922C(int a1, int a2, const __CFArray *a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8 = *a6;
  free(a6);
  if (!v8)
  {
    char v16 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_16;
    }
    uint64_t v17 = "%s: null manager";
    goto LABEL_15;
  }
  if (a5)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Error in scan: %d" :a5];
    }
    goto LABEL_16;
  }
  if (!a3 || !CFArrayGetCount(a3))
  {
    char v16 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_16;
    }
    uint64_t v17 = "%s: no scan result";
    goto LABEL_15;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: found %ld networks", "__WiFiDeviceManagerNetworkTransitionScanCallback", CFArrayGetCount(a3))];
  }
  sub_100137D44(v8, a3);
  if (CFArrayGetCount(a3) < 1)
  {
LABEL_13:
    char v16 = (void *)qword_10027DD68;
    if (!qword_10027DD68)
    {
LABEL_16:
      return;
    }
    uint64_t v17 = "%s: did not find the top network";
LABEL_15:
    [v16 WFLog:3 message:v17 @"__WiFiDeviceManagerNetworkTransitionScanCallback"];
    goto LABEL_16;
  }
  CFIndex v10 = 0;
  int v11 = (unsigned char *)(v8 + 6616);
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a3, v10);
    if (ValueAtIndex)
    {
      CFStringRef v13 = ValueAtIndex;
      CFDictionaryRef v14 = *(const void **)(v8 + 3376);
      if (v14)
      {
        if (CFEqual(v14, v13)) {
          break;
        }
      }
    }
    if (CFArrayGetCount(a3) <= ++v10) {
      goto LABEL_13;
    }
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: found the top network to match scanned network %@", "__WiFiDeviceManagerNetworkTransitionScanCallback", sub_10001A43C(v13) message];
  }
  if (!sub_1001485D0(v8))
  {
    char v16 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_16;
    }
    uint64_t v17 = "%s: not now...";
    goto LABEL_15;
  }
  if (!*(unsigned char *)(v8 + 6632) && (CFDictionaryRef v23 = *(const void **)(v8 + 3440)) != 0 && CFEqual(v13, v23))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: target network %@ is the same as the one user left, not transitioning.", "__WiFiDeviceManagerNetworkTransitionScanCallback", sub_10001A43C(v13) message];
    }
    if (*v11)
    {
      unsigned char *v11 = 0;
      char v16 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_16;
      }
      uint64_t v17 = "%s:Clearing colocatedScopeTransition state";
      goto LABEL_15;
    }
  }
  else
  {
    ++*(_DWORD *)(v8 + 3392);
    *(CFAbsoluteTime *)(v8 + 3400) = CFAbsoluteTimeGetCurrent();
    sub_10010222C(v8);
    size_t v19 = (const void *)sub_100017C48(*(void *)(v8 + 64));
    if (sub_100113EA0(v8, v19, v13, 0, 0, (uint64_t)sub_100149614, 0, 1013))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: Error returned by Associate Async %d", @"__WiFiDeviceManagerNetworkTransitionScanCallback", 0];
      }
      if (*v11)
      {
        unsigned char *v11 = 0;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, @"%s:Clearing colocatedScopeTransition state", @"__WiFiDeviceManagerNetworkTransitionScanCallback"];
        }
      }
      sub_1001020F0(v8);
      uint64_t v22 = sub_100017C48(*(void *)(v8 + 64));
      sub_100123384(v8, v22, 7, 0, v13, 0);
    }
  }
}

void sub_100149614(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: network %@, error %d", "__WiFiDeviceManagerNetworkTransitionAssociationCallback", sub_10001A43C(a3), a5 message];
    }
    *(unsigned char *)(a1 + 6616) = 0;
    uint64_t v9 = *(const void **)(a1 + 6608);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 6608) = 0;
    }
    sub_1001020F0(a1);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: manager is NULL" args:("__WiFiDeviceManagerNetworkTransitionAssociationCallback")];
    }
  }
}

id sub_100149724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    id v4 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyColocatedScopeIdForNetwork:a2];
    id v5 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyColocatedScopeIdForNetwork:a3];
    double v6 = v5;
    if (v4) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      id v9 = 0;
      id v8 = 0;
      if (!v4)
      {
        if (!v5) {
          return v8;
        }
        goto LABEL_11;
      }
    }
    else
    {
      id v9 = [v4 isEqualToString:v5];
    }

    id v8 = v9;
    if (v6) {
LABEL_11:
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: network1 is NULL!"];
    }
    return 0;
  }
  return v8;
}

void sub_100149810(const void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DAD20((uint64_t)a1);
  uint64_t v5 = sub_1000DAD28((uint64_t)a1);
  unsigned int v6 = sub_1000DAD30((uint64_t)a1);
  id v8 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    CFStringRef v9 = sub_100024BE8(*(_DWORD *)(a2 + 3280));
    [v8 WFLog:3, "%s: state=%@ type=%d responseType=%@ inputType=%d", "__WiFiDeviceManagerNotificationCallback", v9, v4, sub_1000DB1B8(v6), v5 message];
  }
  if (v5 == 2
    || (!v4 ? (v10 = v6 == 4) : (v10 = 0), v10 ? (char v11 = 0) : (char v11 = 1), v4 == 13 || (v11 & 1) == 0))
  {
    if ((int)v4 > 1)
    {
      if (v4 == 13)
      {
        sub_10012CDB8((void *)a2, (uint64_t)a1);
      }
      else if (v4 == 2)
      {
        sub_10013E330(a2, (uint64_t)a1);
      }
    }
    else if (v4)
    {
      if (v4 == 1) {
        sub_10013E05C(a2, (uint64_t)a1);
      }
    }
    else
    {
      sub_10013E8B8(a2, (uint64_t)a1);
    }
  }
  if (*(const void **)(a2 + 224) == a1)
  {
    int v12 = *(_DWORD *)(a2 + 3280);
    if (v12 == 17 || v12 == 14)
    {
      sub_1000FB1B0(a2);
    }
    else if (a1)
    {
      CFRelease(a1);
      *(void *)(a2 + 224) = 0;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:3 message:@"%s: notification in callback is not pending" args:("__WiFiDeviceManagerNotificationCallback")];
    }
  }
}

uint64_t sub_100149A1C()
{
  if (!qword_10027D7B0) {
    qword_10027D7B0 = _sl_dlopen();
  }
  return qword_10027D7B0;
}

uint64_t sub_100149AEC()
{
  uint64_t result = _sl_dlopen();
  qword_10027D7B0 = result;
  return result;
}

void *sub_100149B60(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v2 = (void *)sub_100149A1C();
  if (!v2) {
    sub_100196DF8(&v4);
  }
  uint64_t result = dlsym(v2, "EAPClientConfigurationCopyAndImport");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_10027D7B8 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100149BE4(uint64_t *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: error %d reqInfo %@", "__WiFiDeviceManagerUserNotificationAssociationCallback", a5, a4 message];
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: manager is NULL", "__WiFiDeviceManagerUserNotificationAssociationCallback")
    }
    char v16 = v10;
    goto LABEL_24;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: enabling device manager", "__WiFiDeviceManagerUserNotificationAssociationCallback")];
  }
  sub_1001020F0((uint64_t)a1);
  if (!a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: network is NULL" args:("__WiFiDeviceManagerUserNotificationAssociationCallback")];
    }
LABEL_23:
    char v16 = v15;
LABEL_24:
    return;
  }
  if (a5)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: failed user notification association", @"__WiFiDeviceManagerUserNotificationAssociationCallback"];
    }
    uint64_t v12 = sub_100017C48(a1[8]);
    sub_100123384((uint64_t)a1, v12, 7, 0, a3, 0);
    sub_10013F058(a1, @"userJoinAssociationFailed", a3);
    return;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: finished user notification association successfully", @"__WiFiDeviceManagerUserNotificationAssociationCallback"];
  }
  sub_10013F058(a1, @"userJoinSuccess", a3);
  if (a1[573])
  {
    if (a1[30])
    {
      uint64_t v18 = 0;
      size_t v19 = &v18;
      uint64_t v20 = 0x2020000000;
      uint64_t v21 = 0;
      CFStringRef v13 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)a3);
      v19[3] = (uint64_t)v13;
      if (v13)
      {
        CFRetain(a1);
        CFDictionaryRef v14 = a1[30];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100149F6C;
        block[3] = &unk_10023F220;
        void block[4] = &v18;
        void block[5] = a1;
        dispatch_async(v14, block);
      }
      _Block_object_dispose(&v18, 8);
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue."];
    }
    goto LABEL_23;
  }
}

void sub_100149EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100149EDC(uint64_t a1, uint64_t a2)
{
  if (a2 == 5) {
    return 3;
  }
  uint64_t v2 = a2;
  if (a2 != 1)
  {
    if (a2)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: Unexpected response type: %u", @"__WiFiDeviceManagerHandleUserNotificationResponse_block_invoke", v2];
      }
      return 0;
    }
    else
    {
      return 2;
    }
  }
  return v2;
}

void sub_100149F6C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2[30])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: Adding network '%@' to known network list", "__WiFiDeviceManagerUserNotificationAssociationCallback_block_invoke", sub_10001A43C(*(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) message];
    }
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    unsigned int v6 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, void, void))(v4 + 4584))(v4, *(void *)(*(void *)(v5 + 8) + 24), *(void *)(v4 + 4592));
    CFRelease(v6[1]);
    BOOL v7 = *v6;
  }
  else
  {
    CFRelease(v2);
    id v8 = *(void **)(a1 + 32);
    unsigned int v6 = (CFTypeRef *)(a1 + 32);
    BOOL v7 = v8;
  }
  CFStringRef v9 = *(const void **)(v7[1] + 24);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(*((void *)*v6 + 1) + 24) = 0;
  }
}

void sub_10014A044(uint64_t a1)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"DPS Probe: Cancelling probe on all ACs"];
    }
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 7184;
    do
    {
      uint64_t v5 = *(const void **)(v4 + v3);
      if (v5)
      {
        sub_10003AA24(*(void *)(a1 + 120), v5);
        unsigned int v6 = *(const void **)(v4 + v3);
        if (v6)
        {
          CFRelease(v6);
          *(void *)(v4 + v3) = 0;
        }
      }
      v3 += 8;
    }
    while (v3 != 32);
    *(unsigned char *)(a1 + 7236) = 0;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL !" args:__WiFiDeviceManagerCancelDpsProbing];
    }
  }
}

void sub_10014A130(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = 0;
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is NULL !" args:("__WiFiDeviceManagerTriggerDpsACProbe")];
    }
    return;
  }
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t valuePtr = 1;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  if (!v4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: numProbesRef is NULL !" args:("__WiFiDeviceManagerTriggerDpsACProbe")];
    }
    return;
  }
  CFNumberRef v5 = v4;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"__WiFiDeviceManagerTriggerDpsACProbe: probeSizeArrRef is NULL !"];
    }
    id v24 = v5;
    goto LABEL_43;
  }
  BOOL v7 = Mutable;
  uint64_t v29 = 1300;
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberCFIndexType, &v29);
  if (!v8)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: probeSizeRef is NULL !" : @"__WiFiDeviceManagerTriggerDpsACProbe"];
    }
    goto LABEL_34;
  }
  CFNumberRef v9 = v8;
  CFArrayAppendValue(v7, v8);
  CFRelease(v9);
  unint64_t v28 = 1;
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberCFIndexType, &v28);
  if (!v10)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: probeTimeoutSecsRef is NULL !", @"__WiFiDeviceManagerTriggerDpsACProbe"];
    }
LABEL_34:
    CFRelease(v5);
    id v24 = v7;
LABEL_43:
    CFRelease(v24);
    return;
  }
  CFNumberRef v11 = v10;
  uint64_t v12 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFStringRef v13 = v12;
  if (v12)
  {
    CFDictionarySetValue(v12, @"kWiFiLqaMgrNumProbes", v5);
    CFDictionarySetValue(v13, @"kWiFiLqaMgrProbeSize", v7);
    CFDictionarySetValue(v13, @"kWiFiLqaMgrProbeTimeoutSecs", v11);
    switch((int)a1)
    {
      case 0:
        uint64_t v27 = 0;
        CFDictionaryRef v14 = sub_10014A5B8;
        break;
      case 1:
        uint64_t v27 = 200;
        CFDictionaryRef v14 = sub_10014A5CC;
        break;
      case 2:
        uint64_t v27 = 700;
        CFDictionaryRef v14 = sub_10014A5E0;
        break;
      case 3:
        uint64_t v27 = 800;
        CFDictionaryRef v14 = sub_10014A5F4;
        break;
      default:
        goto LABEL_38;
    }
    uint64_t v15 = (uint64_t)v14;
    CFNumberRef v16 = CFNumberCreate(0, kCFNumberCFIndexType, &v27);
    if (v16) {
      CFDictionarySetValue(v13, @"kWiFiLqaMgrProbeTrafficClass", v16);
    }
    uint64_t v17 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    uint64_t v18 = a2 + 8 * a1;
    *(void *)(v18 + 7184) = v17;
    if (sub_100036E18(*(void *)(a2 + 120), v13, v17, v15, a2))
    {
      size_t v19 = (CFTypeRef *)(v18 + 7184);
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: failed to enqueue DPS probe for ac:%d", @"__WiFiDeviceManagerTriggerDpsACProbe", a1, v27];
      }
      if (*v19)
      {
        CFRelease(*v19);
        CFTypeRef *v19 = 0;
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: probeOptions is NULL !", "__WiFiDeviceManagerTriggerDpsACProbe"];
    }
LABEL_38:
    CFNumberRef v16 = 0;
  }
  CFRelease(v5);
  CFRelease(v11);
  if (v13) {
    CFRelease(v13);
  }
  CFRelease(v7);
  if (v16)
  {
    id v24 = v16;
    goto LABEL_43;
  }
}

void sub_10014A5B8(int a1, CFArrayRef theArray, uint64_t a3, uint64_t a4)
{
}

void sub_10014A5CC(int a1, CFArrayRef theArray, uint64_t a3, uint64_t a4)
{
}

void sub_10014A5E0(int a1, CFArrayRef theArray, uint64_t a3, uint64_t a4)
{
}

void sub_10014A5F4(int a1, CFArrayRef theArray, uint64_t a3, uint64_t a4)
{
}

void sub_10014A608(CFArrayRef theArray, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  int64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
  if (a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: diagnostic probe failed with error %ld", @"__WiFiDeviceManagerUpdateProbeResults", a2];
    }
LABEL_14:
    goto LABEL_15;
  }
  if (!theArray || !CFArrayGetCount(theArray))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: empty DPS probe results.", @"__WiFiDeviceManagerUpdateProbeResults", v24];
    }
    goto LABEL_14;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
  unint64_t v25 = 0;
  int64_t valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrNumProbesSent");
  if (Value) {
    CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
  }
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrNumProbesFail");
  if (v11) {
    CFNumberGetValue(v11, kCFNumberCFIndexType, &v25);
  }
  if (valuePtr)
  {
    BOOL v12 = (uint64_t)(100 * v25) / valuePtr == 0;
    goto LABEL_16;
  }
LABEL_15:
  BOOL v12 = 0;
LABEL_16:
  double Current = CFAbsoluteTimeGetCurrent();
  if (a3)
  {
    double v14 = Current;
    uint64_t v15 = a3 + 8 * a4;
    CFNumberRef v16 = *(const void **)(v15 + 7184);
    if (v16)
    {
      uint64_t v17 = (void *)(v15 + 7184);
      CFRelease(v16);
      *uint64_t v17 = 0;
    }
    if (!v12 && ((double v18 = *(double *)(a3 + 7088), v18 == 0.0) || v18 + 10.0 >= v14))
    {
      sub_10014A130(a4, a3);
    }
    else
    {
      if (qword_10027DD68)
      {
        uint64_t v20 = "fail";
        if (v12) {
          uint64_t v20 = "success";
        }
        uint64_t v21 = "<10s";
        if (*(double *)(a3 + 7088) + 10.0 < v14) {
          uint64_t v21 = "timeout";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "DPS Probe: probeResult:%s ac:%u with %s", v20, a4, v21);
      }
      if (v12 && !*(_DWORD *)(a3 + 7232))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"DPS HUD: clearing on probe success"];
        }
        sub_100145710(a3);
      }
      sub_10014A044(a3);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager."];
    }
  }
}

uint64_t sub_10014A88C(unsigned char *a1)
{
  if (a1)
  {
    if (a1[3408]) {
      uint64_t v1 = (8 * (a1[5496] != 0)) | 4;
    }
    else {
      uint64_t v1 = 8 * (a1[5496] != 0);
    }
    uint64_t v2 = v1 | (a1[5497] != 0);
    if (a1[3410]) {
      v2 |= 0x10uLL;
    }
    if (a1[3409]) {
      v2 |= 2uLL;
    }
    if (a1[5498]) {
      v2 |= 0x20uLL;
    }
    if (a1[5499]) {
      return v2 | 0x40;
    }
    else {
      return v2;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: CATS Invalid arguments\n", "__WiFiDeviceManagerCatsTimeSensitiveAppBitmap"];
    }
    return 0;
  }
}

void sub_10014A974(uint64_t a1)
{
  int v97 = -1431655766;
  unint64_t v96 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&stru_10027CBD0);
  if (*(void *)(*(void *)(a1 + 96) + 240))
  {
    CFArrayRef v86 = sub_1000C6D70(*(const __CFArray **)(*(void *)(*(void *)(a1 + 80) + 8) + 24));
    uint64_t v81 = a1;
    id v2 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyGeoTagsForNetworkAtLocation:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) location:*(void *)(a1 + 40)];
    long long v92 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    id obj = v2;
    id v3 = [v2 countByEnumeratingWithState:&v92 objects:v99 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v84 = *(void *)v93;
      uint64_t v5 = WADeviceAnalyticsGeoTagInfo[0];
      uint64_t v7 = WADeviceAnalyticsGeoTagInfo[4];
      uint64_t v6 = WADeviceAnalyticsGeoTagInfo[5];
      uint64_t v8 = WADeviceAnalyticsGeoTagInfo[3];
      double v9 = 0.0;
      double v10 = 1.79769313e308;
      double v11 = 0.0;
LABEL_4:
      uint64_t v12 = 0;
      while (1)
      {
        if (*(void *)v93 != v84) {
          objc_enumerationMutation(obj);
        }
        CFStringRef v13 = *(void **)(*((void *)&v92 + 1) + 8 * v12);
        id v14 = [v13 objectForKey:v5];
        id v15 = [v13 objectForKey:v6];
        id v16 = [v13 objectForKey:v8];
        id v17 = [v13 objectForKey:v7];
        if (!v86) {
          break;
        }
        double v18 = v17;
        if (objc_msgSend(v14, "isEqualToString:"))
        {
          [v15 doubleValue];
          if (v19 < v10)
          {
            [v15 doubleValue];
            double v10 = v20;
            [v16 doubleValue];
            double v11 = v21;
            [v18 doubleValue];
            double v9 = v22;
          }
        }
        if (v4 == (id)++v12)
        {
          id v4 = [obj countByEnumeratingWithState:&v92 objects:v99 count:16];
          if (v4) {
            goto LABEL_4;
          }
          goto LABEL_15;
        }
      }
    }
    double v9 = 0.0;
    double v11 = 0.0;
LABEL_15:

    uint64_t v23 = v81;
    id v24 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyNetworksAvailableAtLocation:*(void *)(v81 + 40)];
    id v25 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyPreferenceScoreDictionaryForNetwork:*(void *)(*(void *)(*(void *)(v81 + 80) + 8) + 24)];
    id v85 = [v24 count];
    id obja = [[[v25 objectForKey:WADeviceAnalyticsNetworkPreferenceScoreInfo[2]] unsignedIntegerValue];
    id v80 = [[objc_msgSend(v25, "objectForKey:", WADeviceAnalyticsNetworkPreferenceScoreInfo[3]) unsignedIntegerValue];
    id v26 = [[objc_msgSend(v25, "objectForKey:", WADeviceAnalyticsNetworkPreferenceScoreInfo[7]) integerValue];
    unsigned int v79 = [[objc_msgSend(v25, "objectForKey:", WADeviceAnalyticsNetworkPreferenceScoreInfo[0]) boolValue];
    unsigned int v78 = [[objc_msgSend(v25, "objectForKey:", WADeviceAnalyticsNetworkPreferenceScoreInfo[1]) boolValue];

    uint64_t v27 = (void *)sub_10001E404(*(void *)(*(void *)(*(void *)(v81 + 80) + 8) + 24), @"AP_MODE");
    unint64_t v28 = (void *)sub_100024070(*(void *)(*(void *)(*(void *)(v81 + 80) + 8) + 24));
    uint64_t v29 = (void *)sub_10001E404(*(void *)(*(void *)(*(void *)(v81 + 80) + 8) + 24), @"CHANNEL_FLAGS");
    char v30 = (void *)sub_10001E404(*(void *)(*(void *)(*(void *)(v81 + 80) + 8) + 24), @"RSSI");
    id v31 = [v27 integerValue];
    CFNumberRef v32 = sub_1000C9AF8(*(void *)(*(void *)(*(void *)(v81 + 80) + 8) + 24));
    id v33 = [v28 integerValue];
    id v34 = [v29 integerValue];
    uint64_t v35 = sub_1000059B0(*(void *)(*(void *)(*(void *)(v81 + 80) + 8) + 24));
    id v36 = [v30 integerValue];
    LOBYTE(v77) = sub_1000CB75C(*(const void **)(*(void *)(*(void *)(v81 + 80) + 8) + 24), v86) != 0;
    id v37 = +[WiFiUsageBssDetails bssWithIdentifier:v86 apProfile:0 apMode:v31 phyMode:v32 channel:v33 channelFlags:v34 channelWidth:v11 rssi:v9 latitude:v35 longitude:v36 isEdgeBss:v77];
    [v37 setHasAppleIE:sub_10001E404(*(void *)(*(void *)(*(void *)(v81 + 80) + 8) + 24), @"APPLE_IE") != 0];
    [v37 setHasDomainName:sub_10001E404(*(void *)(*(void *)(*(void *)(v81 + 80) + 8) + 24), @"DomainName") != 0];
    [v37 setHasNaiRealms:sub_10001E404(*(void *)(*(void *)(*(void *)(v81 + 80) + 8) + 24), @"NaiRealmName") != 0];
    [v37 setHasRoamingOis:sub_10001E404(*(void *)(*(void *)(*(void *)(v81 + 80) + 8) + 24), @"RoamingConsortiumOIs") != 0];
    long long v38 = (void *)sub_10001E404(*(void *)(*(void *)(*(void *)(v81 + 80) + 8) + 24), @"11U_INTERWORKING_IE");
    if (v38)
    {
      long long v39 = v38;
      [v37 setHasInterworkingIE:1];
      id v40 = [v39 objectForKey:@"INTERWORKING_ACCESS_NETWORK_TYPE"];
      id v41 = [v39 objectForKey:@"INTERWORKING_ACCESS_VENTURE_GRP"];
      id v42 = [v39 objectForKey:@"INTERWORKING_ACCESS_VENTURE_TYPE"];
      if (v40) {
        [v37 setNetworkAccessCode:[v40 integerValue]];
      }
      if (v41) {
        [v37 setVenueGroup:[v41 integerValue]];
      }
      uint64_t v23 = v81;
      if (v42) {
        [v37 setVenueCode:[v42 integerValue]];
      }
    }
    if (sub_10001E404(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24), @"WPS_PROB_RESP_IE")
      || sub_10001E404(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24), @"WPS_BEACON_IE"))
    {
      [v37 setHasWpsIE:1];
      [v37 setModelName:sub_1000D188C(*(const __CFDictionary **)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
      [v37 setModelNumber:sub_1000D18EC(*(const __CFDictionary **)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
      [v37 setManufacturerName:sub_1000D182C(*(const __CFDictionary **)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
      [v37 setDeviceVersion:sub_1000D194C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    }
    uint64_t v43 = *(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24);
    if (v43 && sub_1000199C0(v43))
    {
      if (*(void *)(v23 + 48))
      {
        [v37 setModelName:];
      }
      if (*(void *)(v23 + 56))
      {
        [v37 setManufacturerName:];
      }
      if (*(void *)(v23 + 64))
      {
        [v37 setDeviceVersion:];
      }
    }
    id v44 = [objc_alloc((Class)WiFiUsageNetworkDetails) initWithNetworkName:sub_10001A43C(*(const void **)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    [v44 setConnectedBss:v37];
    [v44 setColocatedNetworkCount:v85];
    [v44 setSwitchedAwayCount:obja];
    [v44 setSwitchedToCount:v80];
    [v44 setNetworkScore:v26];
    [v44 setIsKnown:sub_1000C9930(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    [v44 setIsOpen:sub_1000C8A5C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) == 0];
    [v44 setCaptiveStatus:sub_1000C7590(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    [v44 setIsPublic:sub_10001E404(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24), @"WiFiNetworkAttributeIsPublic") == kCFBooleanTrue];
    [v44 setIsHome:sub_1000C6B08(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) == 1];
    [v44 setIsWork:sub_1000CF14C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) == 1];
    [v44 setIsInternal:sub_1000CF7A8(*(const void **)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    [v44 setIsManaged:sub_1000C8140(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    [v44 setIsCarrierBased:sub_1000CE55C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) == 2];
    [v44 setIsCarPlay:sub_1000199C0(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) != 0];
    BOOL v45 = sub_1000CE55C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) == 1
       || sub_1000CE55C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) == 6;
    [v44 setIsAppBased:v45];
    [v44 setIsWalletBased:sub_1000CE55C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) == 3];
    [v44 setIsPersonalHotspot:sub_10001E71C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) != 0];
    [v44 setIsInstantHotspot:sub_10001E404(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24), @"WiFiInstantHotspotJoining") == kCFBooleanTrue];
    [v44 setIsAutoHotspot:sub_10001E404(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24), @"WiFiAutoInstantHotspotJoining") == kCFBooleanTrue];
    [v44 setIsMoving:v79];
    [v44 setIsWidelyDeployed:v78];
    [v44 setIsAutoJoined:sub_10001E404(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24), @"WiFiNetworkIsAutoJoined") == kCFBooleanTrue];
    [v44 setIsAdhoc:sub_10001A680(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) != 0];
    [v44 setIsHidden:sub_10001EA5C(*(const void **)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) != 0];
    [v44 setIsPasspoint:sub_10001BB2C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    [v44 setIsMetered:sub_1000CDC4C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    [v44 setHasWapi:sub_10001FC6C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    BOOL v50 = sub_1000C7E30(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))
       && !sub_10001E404(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24), @"RSN_IE")
       || sub_1000C66D0(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24));
    [v44 setHasWeakSecurity:v50];
    [v44 setHasWpa3:sub_1000C6FE8(*(const __CFDictionary **)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) != 0];
    [v44 setHasWep:sub_1000C66D0(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    [v44 setHasEnterpriseSecurity:sub_10001FC1C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    [v44 setHasNoMap:sub_1000C745C(*(const void **)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    [v44 setHasAmbiguousSsid:sub_1000C7420(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    [v44 setHasCustomNetworkSettings:*(unsigned __int8 *)(v23 + 120)];
    [v44 setRequiresUsername:sub_1000C890C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    [v44 setRequiresPassword:sub_1000C8798(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    [v44 setRequiresIdentity:sub_1000C8864(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) != 0];
    [v44 setRequiresOtp:sub_1000C8A18(*(const void **)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) != 0];
    [v44 setCanExposeImsi:sub_1000CE830(*(const void **)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) != 0];
    [v44 setUsageRank:sub_1000CEFEC(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    CFDictionaryRef v51 = (void *)sub_10001E404(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24), @"WiFiManagerKnownNetworksEventType");
    if (v51)
    {
      uint64_t v52 = v51;
      [v44 setAddedFromUI:[v51 integerValue] == 1];
      [v44 setAddedFromApp:([v52 integerValue] == (id)8)];
      [v44 setAddedViaSync:[v52 integerValue] == 3];
      [v44 setAddedViaATJ:[v52 integerValue] == 6];
      [v44 setAddedViaRecommendation:[v52 integerValue] == (id)14];
      [v44 setAddedViaSharing:[v52 integerValue] == (id)11];
    }
    CFIndex v53 = (void *)sub_10001E404(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24), @"lastTputMeasurementResults");
    long long v88 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    id v54 = [v53 countByEnumeratingWithState:&v88 objects:v98 count:16];
    if (v54)
    {
      id v55 = v54;
      uint64_t v56 = *(void *)v89;
      do
      {
        for (CFIndex i = 0; i != v55; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v89 != v56) {
            objc_enumerationMutation(v53);
          }
          [*(id *)(*((void *)&v88 + 1) + 8 * i) doubleValue];
          [v44 addDownloadSpeed:];
        }
        id v55 = [v53 countByEnumeratingWithState:&v88 objects:v98 count:16];
      }
      while (v55);
    }
    BOOL v58 = !sub_10001EBB4(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))
       && sub_1000CE79C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) == 0;
    [v44 setAutoJoinDisabled:v58];
    [v44 setAutoLoginDisabled:sub_1000CE2A8(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    [v44 setLowDataModeEnabled:sub_1000CDCE4(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) != 0];
    BOOL v59 = !sub_10001EBB4(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))
       && sub_1000CE79C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24)) != 0;
    [v44 setControlCenterDisabled:v59];
    [v44 setPrivateRelayEnabled:sub_10001ED9C(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    [v44 setPrivateRelayBlockedReason:sub_1000CFE54(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    int v87 = 0;
    long long v60 = (void *)sub_10001E404(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24), @"80211D_IE");
    if (v60)
    {
      id v61 = [v60 objectForKey:@"IE_KEY_80211D_COUNTRY_CODE"];
      if (v61)
      {
        [v61 getBytes:&v87 maxLength:4 usedLength:0 encoding:4 options:0 range:0 remainingRange:objc_msgSend(v61, "length")];
        [v44 setAdvertisedCountryCode:v87];
      }
    }
    if (*(_DWORD *)(v23 + 112)) {
      [v44 setAppliedCountryCode:];
    }
    [v44 setBssEnvironment:sub_10001CC9C(*(_DWORD *)(v23 + 116))];
    [v44 setLocaleSource:*(void *)(v23 + 104)];
    [v44 setLastJoinDate:sub_10001CD58(*(const void **)(*(void *)(*(void *)(v23 + 80) + 8) + 24))];
    uint64_t v62 = *(void *)(*(void *)(*(void *)(v23 + 88) + 8) + 24);
    if (v62)
    {
      sub_1000570A8(v62, (uint64_t)&v96);
      long long v63 = HIDWORD(v96) > 2 ? @"UnknownAddr" : off_1002423B8[SHIDWORD(v96)];
      [v44 setPrivateMacType:v63];
      [v44 setPrivateMacFeatureToggled:v97 == 1];
      [v44 setPrivateMacUnderClassification:BYTE1(v97) == 1];
      [v44 setPrivateMacDisabledByProfile:BYTE2(v97) == 1];
      long long v64 = *(const void **)(*(void *)(*(void *)(v23 + 88) + 8) + 24);
      if (v64)
      {
        CFRelease(v64);
        *(void *)(*(void *)(*(void *)(v23 + 88) + 8) + 24) = 0;
      }
    }
    [v44 setIsAtPrimaryHMHome:*(unsigned __int8 *)(v23 + 121)];
    [v44 setIsAtNonPrimaryHMHome:*(unsigned __int8 *)(v23 + 122)];
    id v65 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyColocatedScopeIdForNetwork:*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24)];
    if (v65)
    {
      long long v66 = v65;
      id v67 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyAllStoredNetworkSsidsWithColocatedScopeId:v65];
      if (v67)
      {
        long long v68 = v67;
        if ((unint64_t)[v67 count] >= 2
          && [v68 containsObject:sub_10001A43C(*(const void **)(*(void *)(*(void *)(v23 + 80) + 8) + 24))])
        {
          long long v69 = (char *)[v68 count] - 1;
        }
        else
        {
          long long v69 = 0;
        }
      }
      else
      {
        long long v69 = 0;
      }
    }
    else
    {
      long long v69 = 0;
    }
    [v44 setColocatedScopeCount:v69];
    char v70 = (void *)sub_10001E404(*(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24), CWFCoreWiFiSpecificAttributesKey);
    if (v70)
    {
      char v71 = v70;
      uint64_t v72 = CWFNetworkProfilePropertyDisable6EModeKey;
      if ([v70 objectForKeyedSubscript:CWFNetworkProfilePropertyDisable6EModeKey])
      {
        id v73 = [[v71 objectForKeyedSubscript:v72] integerValue];
        if (v73 == (id)2)
        {
          CFStringRef v74 = @"off";
          goto LABEL_94;
        }
        if (v73 == (id)1)
        {
          CFStringRef v74 = @"auto";
          goto LABEL_94;
        }
        if (!v73)
        {
          CFStringRef v74 = @"none";
LABEL_94:
          int v75 = v44;
          goto LABEL_95;
        }
      }
    }
    int v75 = v44;
    CFStringRef v74 = 0;
LABEL_95:
    [v75 setDisable6eMode:v74];
    [v44 setIsStandalone6E:[v23 isStandalone6G]];

    v76 = *(const void **)(*(void *)(*(void *)(v23 + 80) + 8) + 24);
    if (v76)
    {
      CFRelease(v76);
      *(void *)(*(void *)(*(void *)(v23 + 80) + 8) + 24) = 0;
    }
    (*(void (**)(void))(*(void *)(v23 + 72) + 16))();
    pthread_mutex_unlock(&stru_10027CBD0);
    CFRelease(*(CFTypeRef *)(v23 + 96));
    return;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null queue.", "__WiFiDeviceManagerCreateNetworkDetailsForUsageMonitor_block_invoke")];
  }

  uint64_t v47 = *(const void **)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
  if (v47)
  {
    CFRelease(v47);
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
  }
  uint64_t v48 = *(const void **)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
  if (v48)
  {
    CFRelease(v48);
    *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = 0;
  }
  pthread_mutex_unlock(&stru_10027CBD0);
  uint64_t v49 = *(const void **)(a1 + 96);

  CFRelease(v49);
}

void sub_10014BB50(uint64_t a1, void *a2)
{
  if (a2)
  {
    BOOL v3 = sub_100072AF0(*(void *)(*(void *)(a1 + 32) + 64)) != 1;
    [*(id *)(*(void *)(a1 + 32) + 7368) setJoinEvent:1 withReason:0 lastDisconnectReason:0 lastJoinFailure:0 andNetworkDetails:a2 forInterface:sub_100017C48(*(void *)(*(void *)(a1 + 32) + 64))];
    [*(id *)(*(void *)(a1 + 32) + 7368) setLinkEvent:1 isInvoluntary:v3 linkChangeReason:0 linkChangeSubreason:0 withNetworkDetails:a2 forInterface:*(void *)(a1 + 40)];
  }
}

uint64_t sub_10014BC04(uint64_t a1, int a2, uint64_t a3)
{
  if (!a1 || !a3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: CATS Register Client: Invalid arguments", "WifiDeviceManagerCatsRegisterClient", v14);
    }
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int8 *)(a1 + 40);
  if (v4 >= 3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: CATS Register Client  Max %d clients registered ", "WifiDeviceManagerCatsRegisterClient", 3];
    }
LABEL_8:
    uint64_t v6 = 0xFFFFFFFFLL;
    goto LABEL_20;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v7 = 0;
    uint64_t v8 = (int *)(a1 + 56);
    while (1)
    {
      int v9 = *v8;
      v8 += 6;
      if (v9 == a2) {
        break;
      }
      if (v4 == ++v7)
      {
        int v10 = *(unsigned __int8 *)(a1 + 40);
        goto LABEL_16;
      }
    }
    int v10 = *(unsigned __int8 *)(a1 + 40);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_17;
    }
  }
  else
  {
    int v10 = 0;
  }
LABEL_16:
  *(unsigned char *)(a1 + 40) = v4 + 1;
  LODWORD(v7) = v10;
LABEL_17:
  uint64_t v11 = a1 + 24 * v7;
  *(_DWORD *)(v11 + 56) = a2;
  uint64_t v12 = (unsigned int *)(v11 + 56);
  *((void *)v12 + 1) = a3;
  *((void *)v12 - 1) = 0;
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: CATS Register Client Type: %d nclients:%d", "WifiDeviceManagerCatsRegisterClient", *v12, *(unsigned __int8 *)(a1 + 40)];
  }
  uint64_t v6 = 0;
LABEL_20:
  return v6;
}

void sub_10014BD8C(uint64_t a1, uint64_t a2)
{
}

void sub_10014BD9C(uint64_t a1, uint64_t a2)
{
}

void sub_10014BDAC(uint64_t a1, uint64_t a2)
{
}

void sub_10014BDBC(uint64_t a1, uint64_t a2)
{
}

void sub_10014BDCC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (a3)
  {
    if (!v5)
    {
      NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
      CFStringRef v47 = @"No device manager configured";
      id v25 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 6, +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1]);
      goto LABEL_79;
    }
    if (*(void *)(v5 + 8824))
    {
      if (*(unsigned char *)(v5 + 3305))
      {
        if (*(unsigned char *)(v5 + 6280) || *(unsigned char *)(v5 + 5504))
        {
          if (*(_DWORD *)(v5 + 20) == 1)
          {
            if (*(unsigned char *)(v5 + 248))
            {
              NSErrorDomain v38 = NSPOSIXErrorDomain;
              NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
              CFStringRef v39 = @"WiFi adhoc is enabled";
            }
            else
            {
              if (!*(unsigned char *)(v5 + 249))
              {
                BOOL v7 = *(unsigned char *)(v5 + 5219)
                  || *(_DWORD *)(v5 + 5344)
                  || *(unsigned __int8 *)(v5 + 5361) != -*(unsigned char *)(v5 + 5360)
                  || sub_100112724(v5);
                char v8 = *(unsigned char *)(v5 + 7056);
                if (v8) {
                  char v8 = sub_10010EC7C(v5, 1) != 0;
                }
                if (!v7 || (v8 & 1) != 0)
                {
                  uint64_t v9 = *(void *)(v5 + 64);
                  int v10 = (const void *)sub_100017C48(v9);
                  uint64_t v11 = sub_10001C1B4(v9, v10);
                  if ((*(_DWORD *)(v5 + 5396) == 102 && (*(unsigned char *)(v5 + 5392) & 1) != 0 || *(unsigned char *)(v5 + 50))
                    && *(_DWORD *)(v5 + 5520) == 1
                    && !*(unsigned char *)(v5 + 37)
                    && (a2 > 0x37 || ((1 << a2) & 0xD0000000000000) == 0))
                  {
                    NSErrorDomain v21 = NSPOSIXErrorDomain;
                    NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
                    CFStringRef v22 = @"BT SCO is enabled";
                  }
                  else if (*(unsigned char *)(v5 + 3414) && (a2 > 0x37 || ((1 << a2) & 0xD0012000000184) == 0))
                  {
                    NSErrorDomain v21 = NSPOSIXErrorDomain;
                    NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
                    CFStringRef v22 = @"AWDL real time mode is active";
                  }
                  else
                  {
                    if (!sub_1001116C8(v5))
                    {
                      if (sub_10010883C(v5))
                      {
                        NSErrorDomain v40 = NSPOSIXErrorDomain;
                        NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
                        CFStringRef v47 = @"Auto-join deferral is active";
LABEL_120:
                        id v26 = +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];
                        NSErrorDomain v27 = v40;
                        uint64_t v28 = 16;
                        goto LABEL_83;
                      }
                      if (!v11 || sub_10001E71C((uint64_t)v11))
                      {
LABEL_69:
                        if (*(_DWORD *)(v5 + 5416))
                        {
                          uint64_t v23 = *(void **)(v5 + 5408);
                          if (v23 && ([v23 isPowerResourceAvailable:0] & 1) == 0)
                          {
                            NSErrorDomain v41 = NSPOSIXErrorDomain;
                            NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
                            CFStringRef v42 = @"Insufficient battery resource";
                          }
                          else if (!*(unsigned char *)(v5 + 3488) && *(_DWORD *)(v5 + 3492) == -528336895)
                          {
                            NSErrorDomain v41 = NSPOSIXErrorDomain;
                            NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
                            CFStringRef v42 = @"Watchdog reset";
                          }
                          else if (sub_10012ECE8(v5))
                          {
                            NSErrorDomain v41 = NSPOSIXErrorDomain;
                            NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
                            CFStringRef v42 = @"Scan throttle limit exceeded";
                          }
                          else
                          {
                            if (*(unsigned char *)(v5 + 9000))
                            {
                              uint64_t v24 = *(unsigned int *)(v5 + 3480);
                              if ((int)v24 < 1)
                              {
                                id v25 = 0;
                                uint64_t v5 = 1;
                                if (!v11)
                                {
LABEL_79:
                                  (*(void (**)(uint64_t, uint64_t, NSError *))(a3 + 16))(a3, v5, v25);
                                  goto LABEL_80;
                                }
LABEL_78:
                                CFRelease(v11);
                                goto LABEL_79;
                              }
                              NSErrorDomain v40 = NSPOSIXErrorDomain;
                              NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
                              CFStringRef v47 = +[NSString stringWithFormat:@"User join is in progress (count=%d)", v24];
                              goto LABEL_120;
                            }
                            NSErrorDomain v41 = NSPOSIXErrorDomain;
                            NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
                            CFStringRef v42 = @"Interface not up";
                          }
                          CFStringRef v47 = v42;
                        }
                        else
                        {
                          NSErrorDomain v41 = NSPOSIXErrorDomain;
                          NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
                          CFStringRef v47 = +[NSString stringWithFormat:@"Thermal index (%d) is below disabled threshold (%d)", 0, 0];
                        }
                        id v26 = +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];
                        NSErrorDomain v27 = v41;
                        uint64_t v28 = 1;
LABEL_83:
                        id v25 = +[NSError errorWithDomain:v27 code:v28 userInfo:v26];
                        uint64_t v5 = 0;
                        if (!v11) {
                          goto LABEL_79;
                        }
                        goto LABEL_78;
                      }
                      if ((a2 > 0x3A || ((1 << a2) & 0x6F0048F1C000200) == 0)
                        && !CWFIsAutoJoinRetryTrigger())
                      {
                        goto LABEL_156;
                      }
                      if (a2 == 28 && *(unsigned char *)(v5 + 6896) && *(void *)(v5 + 6976))
                      {
                        if (qword_10027DD68) {
                          [((id)qword_10027DD68) WFLog:3, "%s: Transition OK. Auto Hotspot Network recommendation", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition"];
                        }
LABEL_67:
                        goto LABEL_68;
                      }
                      if (!*(void *)(v5 + 3528))
                      {
                        if (qword_10027DD68) {
                          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no known networks", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                        }
                        goto LABEL_154;
                      }
                      if (*(_DWORD *)(v5 + 20) != 1)
                      {
                        if (qword_10027DD68) {
                          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: wifi is off", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                        }
                        goto LABEL_154;
                      }
                      if (!*(unsigned char *)(v5 + 3411))
                      {
                        if (qword_10027DD68) {
                          [((id)qword_10027DD68) WFLog:3 message:@"%s: not associated" :v43];
                        }
                        goto LABEL_154;
                      }
                      if (sub_100112644(v5) && sub_1001116F0(v5))
                      {
                        if (qword_10027DD68) {
                          [((id)qword_10027DD68) WFLog:3, @"%s: Active Ranging Session", @"__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43];
                        }
                        goto LABEL_154;
                      }
                      if (*(unsigned char *)(v5 + 6632))
                      {
LABEL_46:
                        if (a2 - 56 > 0xFFFFFFFFFFFFFFFBLL)
                        {
LABEL_68:
                          goto LABEL_69;
                        }
                        if (*(unsigned char *)(v5 + 3408))
                        {
                          if (qword_10027DD68) {
                            [((id)qword_10027DD68) WFLog:3 message:@"%s: voip on going" args:v43, "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", nil];
                          }
                        }
                        else if (*(unsigned char *)(v5 + 3409))
                        {
                          if (qword_10027DD68) {
                            [((id)qword_10027DD68) WFLog:message:3, "%s: call on going", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43];
                          }
                        }
                        else if (*(unsigned char *)(v5 + 3410))
                        {
                          if (qword_10027DD68) {
                            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: media playing", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                          }
                        }
                        else if (*(unsigned char *)(v5 + 3414))
                        {
                          if (qword_10027DD68) {
                            [((id)qword_10027DD68) WFLog:3, @"%s: Awdl RealTime is active", @"__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43];
                          }
                        }
                        else
                        {
                          if (a2 == 32 || a2 == 47) {
                            goto LABEL_68;
                          }
                          if (*(unsigned char *)(v5 + 3412))
                          {
                            if (qword_10027DD68) {
                              [((id)qword_10027DD68) WFLog:3, "%s: on a moving network", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43];
                            }
                          }
                          else if (*(unsigned char *)(v5 + 5498))
                          {
                            if (qword_10027DD68) {
                              [((id)qword_10027DD68) WFLog:@"%s: Airplay over Infra is active" message:3, @"__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43];
                            }
                          }
                          else if (*(unsigned char *)(v5 + 5496))
                          {
                            if (qword_10027DD68) {
                              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: in carplay", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                            }
                          }
                          else if (*(int *)(v5 + 3392) >= 5)
                          {
                            if (qword_10027DD68) {
                              [((id)qword_10027DD68) WFLog:message:3, "%s: already tried enough times", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43];
                            }
                          }
                          else
                          {
                            double Current = CFAbsoluteTimeGetCurrent();
                            double v15 = *(double *)(v5 + 3400);
                            if (v15 == 0.0 || (double v16 = Current - v15, v16 > 30.0))
                            {
                              double v17 = CFAbsoluteTimeGetCurrent();
                              double v18 = *(double *)(v5 + 3416);
                              if (v18 == 0.0) {
                                goto LABEL_68;
                              }
                              double v19 = v17 - v18;
                              if (v19 > 10.0) {
                                goto LABEL_68;
                              }
                              double v44 = v19;
                              if (qword_10027DD68) {
                                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: timeSinceLinkUp %f", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", *(void *)&v44);
                              }
                            }
                            else
                            {
                              double v45 = v16;
                              if (qword_10027DD68) {
                                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: timeSinceLastScan %f", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", *(void *)&v45);
                              }
                            }
                          }
                        }
                        goto LABEL_154;
                      }
                      if (*(unsigned char *)(v5 + 6616))
                      {
                        if (qword_10027DD68) {
                          [((id)qword_10027DD68) WFLog:3, @"%s: Transition ok when its within colocated scope", @"__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition"];
                        }
                        goto LABEL_67;
                      }
                      uint64_t v29 = (const void *)sub_100016E20(*(void *)(v5 + 64));
                      char v30 = sub_100018FA8(v5, v29, 1);
                      id v31 = v30;
                      if (a2 > 0x37 || ((1 << a2) & 0xF0800100000000) == 0)
                      {
                        if (v30 && sub_10001E71C((uint64_t)v30))
                        {
LABEL_88:
                          CFRelease(v31);
LABEL_89:
                          if (a2 == 47
                            || a2 == 32
                            || a2 == 45
                            || (a2 & 0xFFFFFFFFFFFFFFFCLL) == 0x34
                            || *(_DWORD *)(v5 + 176) == 3)
                          {
                            goto LABEL_46;
                          }
                          if (qword_10027DD68) {
                            [((id)qword_10027DD68) WFLog:message:3, "%s: display is on", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43];
                          }
LABEL_154:
LABEL_155:
LABEL_156:
                          NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
                          CFStringRef v47 = @"Already associated, and network transition not permitted";
                          id v25 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 37, +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1]);
                          uint64_t v5 = 0;
                          goto LABEL_78;
                        }
                        if (*(unsigned char *)(v5 + 3413))
                        {
                          if (qword_10027DD68) {
                            [((id)qword_10027DD68) WFLog:3, @"%s: network switched by user", @"__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition"];
                          }
                          if (v31) {
                            CFRelease(v31);
                          }
                          goto LABEL_155;
                        }
                      }
                      if (!v31) {
                        goto LABEL_89;
                      }
                      goto LABEL_88;
                    }
                    NSErrorDomain v21 = NSPOSIXErrorDomain;
                    NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
                    CFStringRef v22 = @"Hosted AWDL session is active";
                  }
                  CFStringRef v47 = v22;
                  id v26 = +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];
                  NSErrorDomain v27 = v21;
                  uint64_t v28 = 37;
                  goto LABEL_83;
                }
                NSErrorDomain v38 = NSPOSIXErrorDomain;
                NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
                CFStringRef v47 = +[NSString stringWithFormat:@"MIS is enabled (wifi_count=%d, bt_count=%d, block_scan=%d, mis_disc_state=%d)", *(unsigned __int8 *)(v5 + 5360), *(unsigned __int8 *)(v5 + 5361), *(unsigned __int8 *)(v5 + 5328), *(unsigned __int8 *)(v5 + 5221)];
                goto LABEL_113;
              }
              NSErrorDomain v38 = NSPOSIXErrorDomain;
              NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
              CFStringRef v39 = @"WiFi direct mode is enabled";
            }
            CFStringRef v47 = v39;
LABEL_113:
            id v33 = +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];
            NSErrorDomain v34 = v38;
            uint64_t v35 = 37;
            goto LABEL_124;
          }
          NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
          CFStringRef v47 = @"WiFi is OFF";
          id v33 = +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];
          NSErrorDomain v34 = NSPOSIXErrorDomain;
          uint64_t v35 = 82;
LABEL_124:
          id v25 = +[NSError errorWithDomain:v34 code:v35 userInfo:v33];
          uint64_t v5 = 0;
          goto LABEL_79;
        }
        NSErrorDomain v36 = NSPOSIXErrorDomain;
        NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
        CFStringRef v37 = @"Auto-join is disabled by user (and not in priority link setup)";
      }
      else
      {
        NSErrorDomain v36 = NSPOSIXErrorDomain;
        NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
        CFStringRef v37 = @"Auto-join is disabled";
      }
      CFStringRef v47 = v37;
      id v33 = +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];
      NSErrorDomain v34 = v36;
      uint64_t v35 = 1;
      goto LABEL_124;
    }
    NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
    CFStringRef v47 = @"No auto-join manager configured";
    id v33 = +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];
    NSErrorDomain v34 = NSPOSIXErrorDomain;
    uint64_t v35 = 6;
    goto LABEL_124;
  }
LABEL_80:
}

void sub_10014CB5C(uint64_t a1, void *a2, uint64_t a3, const void **a4, uint64_t a5)
{
  char v8 = *(uint64_t **)(a1 + 32);
  if (a5)
  {
    if (v8)
    {
      if (v8[1103])
      {
        if (a2)
        {
          int v10 = sub_1000CFEE8(a2, 0);
          if (v10)
          {
            uint64_t v11 = v10;
            if (sub_10012EE58((uint64_t)v8, v10, 1u))
            {
              if (!a4) {
                goto LABEL_11;
              }
              uint64_t v12 = (const void **)sub_1000CFEE8([a4 matchingKnownNetworkProfile], 0);
              if (v12)
              {
                a4 = v12;
                if (sub_1000ABDF4(v8[849], (const void **)v11, v12))
                {
                  uint64_t v13 = v8[849];
                  uint64_t v14 = (const void *)sub_100017C48(v8[8]);
                  if (sub_1000ABECC(v13, v14, a4, v11))
                  {
LABEL_11:
                    BOOL v15 = sub_10014FE78((uint64_t)v8, v11);
                    CFRelease(v11);
                    double v16 = 0;
                    double v17 = 0;
                    uint64_t v18 = 1;
                    if (!a4)
                    {
LABEL_13:
                      (*(void (**)(uint64_t, uint64_t, BOOL, NSError *))(a5 + 16))(a5, v18, v15, v17);
                      goto LABEL_14;
                    }
LABEL_12:
                    CFRelease(a4);
                    double v17 = v16;
                    goto LABEL_13;
                  }
                  NSErrorDomain v29 = NSPOSIXErrorDomain;
                  NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
                  CFStringRef v30 = @"IP configuration not matching for SSID transition";
                }
                else
                {
                  NSErrorDomain v29 = NSPOSIXErrorDomain;
                  NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
                  CFStringRef v30 = @"Known network profile private MAC policy not matching for SSID transition";
                }
                CFStringRef v32 = v30;
                double v16 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v29, 1, +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1]);
                CFRelease(v11);
                BOOL v15 = 0;
                uint64_t v18 = 0;
                goto LABEL_12;
              }
              NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
              CFStringRef v32 = @"Failed to translate CWFNetworkProfile to WiFiNetworkRef";
              id v26 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
              NSErrorDomain v27 = NSPOSIXErrorDomain;
              uint64_t v28 = 22;
            }
            else
            {
              NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
              CFStringRef v32 = @"Known network profile not suitable for auto-join";
              id v26 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
              NSErrorDomain v27 = NSPOSIXErrorDomain;
              uint64_t v28 = 1;
            }
            double v17 = +[NSError errorWithDomain:v27 code:v28 userInfo:v26];
            CFRelease(v11);
LABEL_25:
            BOOL v15 = 0;
            uint64_t v18 = 0;
            goto LABEL_13;
          }
          NSErrorDomain v24 = NSPOSIXErrorDomain;
          NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
          CFStringRef v25 = @"Failed to translate CWFNetworkProfile to WiFiNetworkRef";
        }
        else
        {
          NSErrorDomain v24 = NSPOSIXErrorDomain;
          NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
          CFStringRef v25 = @"No known network specified";
        }
        CFStringRef v32 = v25;
        NSErrorDomain v21 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
        NSErrorDomain v22 = v24;
        uint64_t v23 = 22;
LABEL_21:
        double v17 = +[NSError errorWithDomain:v22 code:v23 userInfo:v21];
        goto LABEL_25;
      }
      NSErrorDomain v19 = NSPOSIXErrorDomain;
      NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
      CFStringRef v20 = @"No auto-join manager configured";
    }
    else
    {
      NSErrorDomain v19 = NSPOSIXErrorDomain;
      NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
      CFStringRef v20 = @"No device manager configured";
    }
    CFStringRef v32 = v20;
    NSErrorDomain v21 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
    NSErrorDomain v22 = v19;
    uint64_t v23 = 6;
    goto LABEL_21;
  }
LABEL_14:
}

uint64_t sub_10014CF50(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5 || !*(void *)(v5 + 8824))
  {
    uint64_t v7 = 0;
    goto LABEL_13;
  }
  uint64_t v7 = 0;
  if (a2 && a3)
  {
    char v8 = sub_1000CFEE8(a2, 0);
    uint64_t v9 = sub_1000CFEE8(a3, 0);
    int v10 = v9;
    if (v8 && v9)
    {
      if (*(unsigned char *)(v5 + 6632)) {
        uint64_t v11 = sub_1000CBD24((uint64_t)v9, (uint64_t)v8, 0);
      }
      else {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v7 = 0;
      if (!v8)
      {
LABEL_11:
        if (v10) {
          CFRelease(v10);
        }
        goto LABEL_13;
      }
    }
    CFRelease(v8);
    uint64_t v7 = v11;
    goto LABEL_11;
  }
LABEL_13:
  return v7;
}

void sub_10014D034(uint64_t a1, void *a2, void (**a3)(void, void, void, void))
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!a3) {
    goto LABEL_66;
  }
  if (!v5)
  {
    NSErrorDomain v38 = NSPOSIXErrorDomain;
    v64[0] = NSLocalizedDescriptionKey;
    CFStringRef v39 = @"No device manager configured";
LABEL_72:
    v67[0] = v39;
    NSErrorDomain v40 = +[NSDictionary dictionaryWithObjects:v67 forKeys:v64 count:1];
    NSErrorDomain v41 = v38;
    uint64_t v42 = 6;
LABEL_74:
    uint64_t v43 = +[NSError errorWithDomain:v41 code:v42 userInfo:v40];
    id v33 = 0;
    goto LABEL_79;
  }
  if (!*(void *)(v5 + 8824))
  {
    NSErrorDomain v38 = NSPOSIXErrorDomain;
    v64[0] = NSLocalizedDescriptionKey;
    CFStringRef v39 = @"No auto-join manager configured";
    goto LABEL_72;
  }
  if (!a2)
  {
    v64[0] = NSLocalizedDescriptionKey;
    v67[0] = @"No scan parameters specified";
    NSErrorDomain v40 = +[NSDictionary dictionaryWithObjects:v67 forKeys:v64 count:1];
    NSErrorDomain v41 = NSPOSIXErrorDomain;
    uint64_t v42 = 22;
    goto LABEL_74;
  }
  uint64_t v7 = *(void *)(v5 + 8928);
  if (v7)
  {
    (*(void (**)(uint64_t, NSError *, void, void))(v7 + 16))(v7, +[NSError errorWithDomain:NSPOSIXErrorDomain code:89 userInfo:0], 0, 0);
    _Block_release(*(const void **)(v5 + 8928));
    *(void *)(v5 + 8928) = 0;
  }
  if (_os_feature_enabled_impl())
  {
    char v8 = a2;
    int v9 = sub_100024498(*(void *)(v5 + 6792));
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: prefer 6E enabled %d", "__WiFiDeviceManagerUnifiedAutoJoinScanForNetworks", v9 == 0);
    }
    [*(id *)(v5 + 8824) setMaxCompatibilityEnabled:v9 == 0];
    a2 = v8;
  }
  *(void *)(v5 + 8928) = _Block_copy(a3);

  *(void *)(v5 + 8936) = [a2 copy];
  id v49 = +[NSMutableDictionary dictionary];
  int v51 = sub_1001368DC(v5, 0);
  int v11 = sub_100136B70((unsigned char *)v5, 0);
  CFStringRef v47 = v6;
  uint64_t v48 = a3;
  uint64_t v46 = v5;
  if (*(unsigned char *)(v5 + 7056)
    && *(unsigned char *)(v5 + 5219)
    && *(unsigned __int8 *)(v5 + 5216) >= 0xFu
    && (*(unsigned char *)(v5 + 7057) & 4) != 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"AJScan: Disallowing 6Ghz channels due to Active 5GHz MIS session"];
    }
    char v12 = 0;
  }
  else
  {
    char v12 = 1;
  }
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id obj = [a2 channels];
  id v13 = [obj countByEnumeratingWithState:&v56 objects:v67 count:16];
  if (v13)
  {
    id v14 = v13;
    id v15 = 0;
    uint64_t v16 = *(void *)v57;
    do
    {
      for (CFIndex i = 0; i != v14; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v57 != v16) {
          objc_enumerationMutation(obj);
        }
        uint64_t v18 = *(void **)(*((void *)&v56 + 1) + 8 * i);
        if ((!v51 || ([*(id *)(*((void *)&v56 + 1) + 8 * i) is2GHz] & 1) == 0)
          && (!v11 || ([v18 is5GHz] & 1) == 0)
          && ((v12 & 1) != 0 || ([v18 is6GHz] & 1) == 0))
        {
          if (!v15) {
            id v15 = +[NSMutableArray array];
          }
          v65[0] = @"CHANNEL";
          NSErrorDomain v19 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v18 channel]);
          v65[1] = @"CHANNEL_FLAGS";
          v66[0] = v19;
          v66[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v18 flags]);
          [v15 addObject:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v66, v65, 2)];
        }
      }
      id v14 = [obj countByEnumeratingWithState:&v56 objects:v67 count:16];
    }
    while (v14);
  }
  else
  {
    id v15 = 0;
  }
  if ([v15 count])
  {
    [v49 setObject:v15 forKeyedSubscript:@"SCAN_CHANNELS"];
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    id v20 = [a2 SSIDList];
    id v21 = [v20 countByEnumeratingWithState:&v52 objects:v64 count:16];
    a3 = v48;
    if (v21)
    {
      id v22 = v21;
      id v23 = 0;
      uint64_t v24 = *(void *)v53;
      uint64_t v25 = v46;
      do
      {
        for (CFIndex j = 0; j != v22; CFIndex j = (char *)j + 1)
        {
          if (*(void *)v53 != v24) {
            objc_enumerationMutation(v20);
          }
          uint64_t v27 = *(void *)(*((void *)&v52 + 1) + 8 * (void)j);
          if (!v23) {
            id v23 = +[NSMutableArray array];
          }
          CFStringRef v62 = @"SSID_STR";
          uint64_t v63 = v27;
          [v23 addObject:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1)];
        }
        id v22 = [v20 countByEnumeratingWithState:&v52 objects:v64 count:16];
      }
      while (v22);
    }
    else
    {
      id v23 = 0;
      uint64_t v25 = v46;
    }
    if ([v23 count])
    {
      CFStringRef v60 = @"SSID_STR";
      CFStringRef v61 = &stru_100248240;
      [v23 addObject:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1)];
    }
    [v49 setObject:v23 forKeyedSubscript:@"SCAN_SSID_LIST"];
    [v49 setObject:objc_msgSend(a2, "SSID") forKeyedSubscript:@"SSID_STR"];
    [v49 setObject:[a2 BSSID] forKeyedSubscript:@"BSSID"];
    uint64_t v6 = v47;
    if ([a2 shortSSID]) {
      uint64_t v28 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a2 shortSSID]);
    }
    else {
      uint64_t v28 = 0;
    }
    [v49 setObject:v28 forKeyedSubscript:@"SCAN_SHORT_SSID"];
    [v49 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [a2 scanType]) forKeyedSubscript:@"SCAN_TYPE"];
    [v49 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [a2 BSSType]) forKeyedSubscript:@"SCAN_BSS_TYPE"];
    [v49 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(a2, "PHYMode"))] forKeyedSubscript:@"SCAN_PHY_MODE"];
    [v49 setObject:[+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(a2, "restTime"))] forKeyedSubscript:@"SCAN_REST_TIME"];
    [v49 setObject:+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a2 dwellTime]) forKeyedSubscript:@"SCAN_DWELL_TIME"];
    [v49 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(a2, "mergeScanResults"))] forKeyedSubscript:@"SCAN_MERGE"];
    if ([a2 numberOfScans]) {
      NSErrorDomain v29 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a2 numberOfScans]);
    }
    else {
      NSErrorDomain v29 = (NSNumber *)&off_100263370;
    }
    [v49 setObject:v29 forKeyedSubscript:@"SCAN_NUM_SCANS"];
    if ([a2 acceptableCacheAge] == (id)-1)
    {
      [v49 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CacheOnly"];
      CFStringRef v30 = (NSNumber *)&off_1002633D0;
    }
    else
    {
      CFStringRef v30 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)(unint64_t)[a2 acceptableCacheAge] / 1000.0);
    }
    [v49 setObject:v30 forKeyedSubscript:@"SCAN_MAXAGE"];
    [v49 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [a2 scanFlags]) forKeyedSubscript:@"SCAN_FLAGS"];
    if ([a2 scanType] != 3 && objc_msgSend(a2, "acceptableCacheAge") != (id)-1)
    {
      uint64_t v31 = *(void *)(v25 + 8912);
      if ((unint64_t)objc_msgSend(objc_msgSend(a2, "channels"), "count") + v31 >= 7)
      {
        sub_100006E70(*(void *)(v25 + 64), 0, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@", @"AutoJoin", [*(id *)(v25 + 8904) UUIDString]), 0);
        sub_100006E70(*(void *)(v25 + 64), 9, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@", @"AutoJoin", [*(id *)(v25 + 8904) UUIDString]), 0);
      }
    }
    CFStringRef v32 = malloc_type_malloc(0x28uLL, 0x10E0040573E0799uLL);
    id v33 = v32;
    if (v32)
    {
      *CFStringRef v32 = v25;
      v32[1] = 0;
      v32[3] = 0;
      if ([v23 count]) {
        uint64_t v34 = 21;
      }
      else {
        uint64_t v34 = 20;
      }
      uint64_t v35 = (const void *)sub_100017C48(*(void *)(v25 + 64));
      int v36 = sub_100113508(v25, v35, v49, 10, (uint64_t)sub_10014FF74, (uint64_t)v33, 0, v34);
      if (!v36) {
        goto LABEL_66;
      }
      NSErrorDomain v44 = (NSErrorDomain)CWFManagerErrorDomain;
      uint64_t v45 = v36;
    }
    else
    {
      NSErrorDomain v44 = NSPOSIXErrorDomain;
      uint64_t v45 = 12;
    }
    uint64_t v43 = +[NSError errorWithDomain:v44 code:v45 userInfo:0];
  }
  else
  {
    uint64_t v43 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:1 userInfo:0];
    id v33 = 0;
    uint64_t v6 = v47;
    a3 = v48;
  }
LABEL_79:
  if (v43)
  {
    if (v33) {
      free(v33);
    }
    ((void (**)(void, NSError *, void, void))a3)[2](a3, v43, 0, 0);
  }
LABEL_66:
}

void sub_10014DA3C(uint64_t a1, void *a2, void (**a3)(void, void, void, void))
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!a3) {
    goto LABEL_22;
  }
  if (!v5)
  {
    NSErrorDomain v24 = NSPOSIXErrorDomain;
    *(void *)&long long v33 = NSLocalizedDescriptionKey;
    CFStringRef v25 = @"No device manager configured";
LABEL_25:
    v32[0] = v25;
    id v26 = +[NSDictionary dictionaryWithObjects:v32 forKeys:&v33 count:1];
    NSErrorDomain v27 = v24;
    uint64_t v28 = 6;
    goto LABEL_28;
  }
  if (!*(void *)(v5 + 8824))
  {
    NSErrorDomain v24 = NSPOSIXErrorDomain;
    *(void *)&long long v33 = NSLocalizedDescriptionKey;
    CFStringRef v25 = @"No auto-join manager configured";
    goto LABEL_25;
  }
  if (a2)
  {
    uint64_t v7 = *(void *)(v5 + 8944);
    if (v7)
    {
      (*(void (**)(uint64_t, NSError *, void, void))(v7 + 16))(v7, +[NSError errorWithDomain:NSPOSIXErrorDomain code:89 userInfo:0], 0, 0);
      _Block_release(*(const void **)(v5 + 8944));
      *(void *)(v5 + 8944) = 0;
    }
    *(void *)(v5 + 8944) = _Block_copy(a3);

    *(void *)(v5 + 8952) = [a2 copy];
    id v8 = +[NSMutableDictionary dictionary];
    [v8 setObject:&off_100263388 forKeyedSubscript:@"GAS_PROTOCOL"];
    [v8 setObject:objc_msgSend(a2, "ANQPElementIDList") forKeyedSubscript:@"GAS_QUERY"];
    id v9 = +[NSMutableArray array];
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v10 = [a2 scanResults];
    id v11 = [v10 countByEnumeratingWithState:&v33 objects:v32 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v34;
      do
      {
        for (CFIndex i = 0; i != v12; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v34 != v13) {
            objc_enumerationMutation(v10);
          }
          id v15 = [*(id *)(*((void *)&v33 + 1) + 8 * i) scanRecord];
          if (v15) {
            [v9 addObject:v15];
          }
        }
        id v12 = [v10 countByEnumeratingWithState:&v33 objects:v32 count:16];
      }
      while (v12);
    }
    uint64_t v16 = sub_10005A4C4((const __CFArray *)v9);
    if (v16)
    {
      double v17 = v16;
      [v8 setObject:v16 forKeyedSubscript:@"GAS_NETWORKS"];
      if ([a2 acceptableCacheAge] == (id)-1)
      {
        [v8 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CacheOnly"];
        uint64_t v18 = (NSNumber *)&off_1002633D0;
      }
      else
      {
        uint64_t v18 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)(unint64_t)[a2 acceptableCacheAge] / 1000.0);
      }
      [v8 setObject:v18 forKeyedSubscript:@"SCAN_MAXAGE"];
      CFRelease(v17);
      NSErrorDomain v19 = malloc_type_malloc(0x18uLL, 0xA00402214FCE6uLL);
      id v20 = v19;
      if (v19)
      {
        v19[1] = 0;
        v19[2] = 0;
        void *v19 = v5;
        uint64_t v21 = *(void *)(v5 + 64);
        id v22 = (const void *)sub_100017C48(v21);
        int v23 = sub_10006F920(v21, v22, v8, 10, (uint64_t)sub_100150288, (uint64_t)v20);
        if (!v23) {
          goto LABEL_22;
        }
        NSErrorDomain v30 = (NSErrorDomain)CWFManagerErrorDomain;
        uint64_t v31 = v23;
      }
      else
      {
        NSErrorDomain v30 = NSPOSIXErrorDomain;
        uint64_t v31 = 12;
      }
      NSErrorDomain v29 = +[NSError errorWithDomain:v30 code:v31 userInfo:0];
      goto LABEL_32;
    }
    NSErrorDomain v27 = NSPOSIXErrorDomain;
    uint64_t v28 = 12;
    id v26 = 0;
  }
  else
  {
    *(void *)&long long v33 = NSLocalizedDescriptionKey;
    v32[0] = @"No ANQP parameters specified";
    id v26 = +[NSDictionary dictionaryWithObjects:v32 forKeys:&v33 count:1];
    NSErrorDomain v27 = NSPOSIXErrorDomain;
    uint64_t v28 = 22;
  }
LABEL_28:
  NSErrorDomain v29 = +[NSError errorWithDomain:v27 code:v28 userInfo:v26];
  id v20 = 0;
LABEL_32:
  if (v29)
  {
    if (v20) {
      free(v20);
    }
    ((void (**)(void, NSError *, void, void))a3)[2](a3, v29, 0, 0);
  }
LABEL_22:
}

void sub_10014DEB8(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 32);
  if (a4)
  {
    if (v7)
    {
      if (*(void *)(v7 + 8824))
      {
        if (a2)
        {
          if ([a2 matchingKnownNetworkProfile])
          {
            id v9 = sub_10015048C(a2);
            if (sub_10012EE58(v7, v9, 0))
            {
              int v10 = sub_1001300C8(v7, v9, 0, 0);
              if ((uint64_t)[a2 RSSI] < v10)
              {
                NSErrorDomain v25 = NSPOSIXErrorDomain;
                NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
                CFStringRef v26 = @"Below minimum RSSI threshold";
              }
              else
              {
                unsigned int v11 = [[objc_msgSend(a2, "matchingKnownNetworkProfile") isPasspoint];
                if (v11 == [a2 isPasspoint])
                {
                  if (a3 == 39)
                  {
                    uint64_t v12 = *(void *)(v7 + 64);
                    uint64_t v13 = (const void *)sub_100017C48(v12);
                    id v14 = sub_10001C1B4(v12, v13);
                    if (!v14 || !sub_100149724(v7, (uint64_t)v14, (uint64_t)v9))
                    {
                      NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
                      CFStringRef v28 = @"Colocated scope ID does not match current network";
                      id v15 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1]);
                      BOOL v16 = 0;
                      uint64_t v17 = 0;
                      goto LABEL_15;
                    }
                  }
                  else
                  {
                    id v14 = 0;
                  }
                  BOOL v16 = sub_10014FE78(v7, v9);
                  id v15 = 0;
                  uint64_t v17 = 1;
LABEL_15:
                  if (v14) {
                    CFRelease(v14);
                  }
                  if (!v9) {
                    goto LABEL_19;
                  }
LABEL_18:
                  CFRelease(v9);
LABEL_19:
                  (*(void (**)(uint64_t, uint64_t, BOOL, NSError *))(a4 + 16))(a4, v17, v16, v15);
                  goto LABEL_20;
                }
                NSErrorDomain v25 = NSPOSIXErrorDomain;
                NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
                CFStringRef v26 = @"Join candidate does not match known network passpoint state";
              }
            }
            else
            {
              NSErrorDomain v25 = NSPOSIXErrorDomain;
              NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
              CFStringRef v26 = @"Join candidate not suitable for auto-join";
            }
            CFStringRef v28 = v26;
            id v15 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v25, 1, +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1]);
            uint64_t v17 = 0;
            BOOL v16 = 0;
            if (!v9) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
          NSErrorDomain v23 = NSPOSIXErrorDomain;
          NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
          CFStringRef v24 = @"No matching known network specified";
        }
        else
        {
          NSErrorDomain v23 = NSPOSIXErrorDomain;
          NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
          CFStringRef v24 = @"No join candidate specified";
        }
        CFStringRef v28 = v24;
        id v20 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
        NSErrorDomain v21 = v23;
        uint64_t v22 = 22;
LABEL_27:
        id v15 = +[NSError errorWithDomain:v21 code:v22 userInfo:v20];
        uint64_t v17 = 0;
        BOOL v16 = 0;
        goto LABEL_19;
      }
      NSErrorDomain v18 = NSPOSIXErrorDomain;
      NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
      CFStringRef v19 = @"No auto-join manager configured";
    }
    else
    {
      NSErrorDomain v18 = NSPOSIXErrorDomain;
      NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
      CFStringRef v19 = @"No device manager configured";
    }
    CFStringRef v28 = v19;
    id v20 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    NSErrorDomain v21 = v18;
    uint64_t v22 = 6;
    goto LABEL_27;
  }
LABEL_20:
}

uint64_t sub_10014E2B4(uint64_t a1, _WORD *a2, _WORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5 || !*(void *)(v5 + 8824))
  {
    uint64_t v7 = 0;
    goto LABEL_13;
  }
  uint64_t v7 = 0;
  if (a2 && a3)
  {
    id v8 = sub_10015048C(a2);
    id v9 = sub_10015048C(a3);
    int v10 = v9;
    if (v8 && v9)
    {
      if (*(unsigned char *)(v5 + 6632)) {
        uint64_t v11 = sub_1000CBD24((uint64_t)v9, (uint64_t)v8, 0);
      }
      else {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v7 = 0;
      if (!v8)
      {
LABEL_11:
        if (v10) {
          CFRelease(v10);
        }
        goto LABEL_13;
      }
    }
    CFRelease(v8);
    uint64_t v7 = v11;
    goto LABEL_11;
  }
LABEL_13:
  return v7;
}

void sub_10014E390(uint64_t a1, void *a2, void (**a3)(void, void))
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!a3) {
    goto LABEL_32;
  }
  if (!v5)
  {
    NSErrorDomain v24 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v32 = NSLocalizedDescriptionKey;
    CFStringRef v25 = @"No device manager configured";
LABEL_41:
    CFStringRef v33 = v25;
    CFStringRef v26 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
    NSErrorDomain v27 = v24;
    uint64_t v28 = 6;
    goto LABEL_46;
  }
  if (!*(void *)(v5 + 8824))
  {
    NSErrorDomain v24 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v32 = NSLocalizedDescriptionKey;
    CFStringRef v25 = @"No auto-join manager configured";
    goto LABEL_41;
  }
  if (a2)
  {
    if ([a2 scanResult])
    {
      CFDictionaryRef v7 = (const __CFDictionary *)sub_10015048C([a2 scanResult]);
      if (v7)
      {
        CFDictionaryRef v8 = v7;
        sub_100128BC0((const __CFDictionary *)[objc_msgSend(objc_msgSend(a2, "scanResult"), "scanRecord") valueForKey:v7]);
        uint64_t v9 = *(void *)(v5 + 8840);
        if (v9)
        {
          (*(void (**)(uint64_t, NSError *))(v9 + 16))(v9, +[NSError errorWithDomain:NSPOSIXErrorDomain code:89 userInfo:0]);
          _Block_release(*(const void **)(v5 + 8840));
          int v10 = *(const void **)(v5 + 8832);
          if (v10) {
            CFRelease(v10);
          }
        }
        *(void *)(v5 + 8840) = _Block_copy(a3);
        *(void *)(v5 + 8832) = CFRetain(v8);
        CFMutableArrayRef Mutable = *(__CFArray **)(v5 + 1112);
        if (!Mutable)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
          *(void *)(v5 + 1112) = Mutable;
        }
        if (*(void *)(v5 + 8920))
        {
          sub_100006E70(*(void *)(v5 + 64), 0, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@", @"AutoJoin", [*(id *)(v5 + 8904) UUIDString]), 0);
          sub_100006E70(*(void *)(v5 + 64), 9, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@", @"AutoJoin", [*(id *)(v5 + 8904) UUIDString]), 0);
          CFMutableArrayRef Mutable = *(__CFArray **)(v5 + 1112);
        }
        CFArrayRemoveAllValues(Mutable);
        if ([a2 forceBSSID]) {
          sub_10001C6A4((uint64_t)v8, @"FORCE_BSSID", kCFBooleanTrue);
        }
        if ([a2 bandPreference]) {
          sub_10001C6A4((uint64_t)v8, @"BAND_PREFERENCE", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [a2 bandPreference]));
        }
        if ([a2 colocatedScopeID]) {
          sub_10001C6A4((uint64_t)v8, @"COLOCATED_NETWORK_SCOPE_ID", [a2 colocatedScopeID]);
        }
        if ([a2 has6GHzOnlyBSS])
        {
          unsigned int v12 = sub_1000C6FC0((uint64_t)v8, @"ASSOC_FLAGS");
          sub_10001A610((uint64_t)v8, @"ASSOC_FLAGS", v12 | 0x100000);
        }
        uint64_t v13 = (const void *)sub_100017C48(*(void *)(v5 + 64));
        id v14 = sub_100018FA8(v5, v13, 1);
        if (v14)
        {
          id v15 = v14;
          BOOL v16 = (void *)sub_10001E404((uint64_t)v14, @"SSID");
          uint64_t v17 = sub_10001E404((uint64_t)v8, @"SSID");
          if (v16 && v17 && [v16 isEqual:v17])
          {
            CFNumberRef v18 = CFNumberCreate(0, kCFNumberIntType, (const void *)(v5 + 3852));
            if ([a2 bandPreference])
            {
              if ([a2 bandPreference]) {
                CFStringRef v19 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [a2 bandPreference]);
              }
              else {
                CFStringRef v19 = 0;
              }
              uint64_t v22 = v5;
              unint64_t v23 = 0;
              NSErrorDomain v21 = 0;
            }
            else
            {
              id v20 = [NSNumber numberWithUnsignedInteger:[objc_msgSend(objc_msgSend(objc_msgSend(a2, "scanResult"), "channel"), "channel") unsignedIntegerValue]];
              NSErrorDomain v21 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [objc_msgSend(objc_msgSend(objc_msgSend(a2, "scanResult"), "channel"), "band")]);
              uint64_t v22 = v5;
              unint64_t v23 = (unint64_t)v20;
              CFStringRef v19 = 0;
            }
            sub_100121A28(v22, @"FF:FF:FF:FF:FF:FF", v23, v21, v19, v18);
            if (v18) {
              CFRelease(v18);
            }
            CFRelease(v15);
            *(_DWORD *)(v5 + 3280) = 0;
            a3[2](a3, 0);
            goto LABEL_31;
          }
          CFRelease(v15);
        }
        CFArrayAppendValue(*(CFMutableArrayRef *)(v5 + 1112), v8);
        *(void *)(v5 + 1128) = 0;
        *(void *)(v5 + 1120) = 0;
        *(_DWORD *)(v5 + 3280) = sub_10013B26C(v5);
LABEL_31:
        CFRelease(v8);
        goto LABEL_32;
      }
      NSErrorDomain v27 = NSPOSIXErrorDomain;
      uint64_t v28 = 22;
      CFStringRef v26 = 0;
      goto LABEL_46;
    }
    NSErrorDomain v29 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v32 = NSLocalizedDescriptionKey;
    CFStringRef v30 = @"No network specified";
  }
  else
  {
    NSErrorDomain v29 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v32 = NSLocalizedDescriptionKey;
    CFStringRef v30 = @"No assoc parameters specified";
  }
  CFStringRef v33 = v30;
  CFStringRef v26 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
  NSErrorDomain v27 = v29;
  uint64_t v28 = 22;
LABEL_46:
  uint64_t v31 = +[NSError errorWithDomain:v27 code:v28 userInfo:v26];
  if (v31) {
    ((void (**)(void, NSError *))a3)[2](a3, v31);
  }
LABEL_32:
}

void sub_10014E920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (!a3) {
    goto LABEL_31;
  }
  if (!v4)
  {
    NSErrorDomain v15 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
    CFStringRef v16 = @"No device manager configured";
LABEL_34:
    CFStringRef v27 = v16;
    uint64_t v13 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v15, 6, +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1]);
    uint64_t v7 = 0;
    goto LABEL_27;
  }
  if (!*(void *)(v4 + 8824))
  {
    NSErrorDomain v15 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
    CFStringRef v16 = @"No auto-join manager configured";
    goto LABEL_34;
  }
  uint64_t v6 = *(unsigned int *)(v4 + 6804);
  if (v6 < 3) {
    uint64_t v7 = v6 + 1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (![+[WiFiUserInteractionMonitor sharedInstance] isSetupCompleted])
  {
    NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
    CFStringRef v27 = @"Device setup not completed";
    uint64_t v17 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
    NSErrorDomain v18 = NSPOSIXErrorDomain;
    uint64_t v19 = 6;
LABEL_50:
    uint64_t v13 = +[NSError errorWithDomain:v18 code:v19 userInfo:v17];
    goto LABEL_27;
  }
  if (!*(_DWORD *)(v4 + 6804))
  {
    NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
    CFStringRef v27 = @"autoHotspotMode==Never";
    uint64_t v17 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
    NSErrorDomain v18 = NSPOSIXErrorDomain;
    uint64_t v19 = 1;
    goto LABEL_50;
  }
  if (sub_100072C58(*(void *)(v4 + 64)))
  {
    NSErrorDomain v20 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
    CFStringRef v21 = @"IPv4/IPv6 network path already available on another interface";
LABEL_44:
    CFStringRef v27 = v21;
    uint64_t v17 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
    NSErrorDomain v18 = v20;
    uint64_t v19 = 37;
    goto LABEL_50;
  }
  if (*(unsigned char *)(v4 + 7024))
  {
    NSErrorDomain v22 = NSPOSIXErrorDomain;
    unint64_t v23 = +[NSString stringWithFormat:@"AutoHotspot disabled via flags (0x%X)", *(unsigned __int8 *)(v4 + 7024), NSLocalizedDescriptionKey];
LABEL_48:
    CFStringRef v27 = (const __CFString *)v23;
    goto LABEL_49;
  }
  if (!sub_100125A54(v4))
  {
    if ((_os_feature_enabled_impl() & 1) == 0 && CFAbsoluteTimeGetCurrent() - *(double *)(v4 + 6952) <= 15.0)
    {
      NSErrorDomain v22 = NSPOSIXErrorDomain;
      unint64_t v23 = +[NSString stringWithFormat:@"AutoHotspot triggered within %d seconds of previous link down", 15, NSLocalizedDescriptionKey];
      goto LABEL_48;
    }
    int v8 = *(unsigned __int8 *)(v4 + 6800);
    if (_os_feature_enabled_impl())
    {
      if ([+[WiFiUserInteractionMonitor sharedInstance] isPersonalHotspotRecommendationAllowed])
      {
        goto LABEL_19;
      }
    }
    else if (v8)
    {
      goto LABEL_19;
    }
    if (*(_DWORD *)(v4 + 6804) == 1)
    {
      NSErrorDomain v22 = NSPOSIXErrorDomain;
      NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
      CFStringRef v24 = @"No foreground networking app and autoHotspotMode==Ask";
      goto LABEL_42;
    }
  }
LABEL_19:
  if ([+[WiFiUserInteractionMonitor sharedInstance] isAnyCallInProgress])
  {
    NSErrorDomain v22 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
    CFStringRef v24 = @"Call in progress";
LABEL_42:
    CFStringRef v27 = v24;
LABEL_49:
    uint64_t v17 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
    NSErrorDomain v18 = v22;
    uint64_t v19 = 35;
    goto LABEL_50;
  }
  int v9 = *(_DWORD *)(v4 + 3280);
  if (v9 == 12)
  {
    NSErrorDomain v22 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
    CFStringRef v24 = @"Association in progress";
    goto LABEL_42;
  }
  if ((v9 - 17) <= 3)
  {
    NSErrorDomain v22 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
    CFStringRef v24 = @"AutoHotspot connection in progress";
    goto LABEL_42;
  }
  if (*(unsigned char *)(v4 + 6896))
  {
    NSErrorDomain v20 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
    CFStringRef v21 = @"Already associated to hotspot";
    goto LABEL_44;
  }
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v11 = (const void *)sub_100017C48(v10);
  unsigned int v12 = sub_10001C1B4(v10, v11);
  if (v12)
  {
    CFStringRef v25 = v12;
    CFStringRef v27 = +[NSString stringWithFormat:@"Already associated to %@", sub_10001A43C(v12), NSLocalizedDescriptionKey];
    uint64_t v13 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 37, +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1]);
    CFRelease(v25);
    goto LABEL_27;
  }
  if ((_os_feature_enabled_impl() & 1) == 0 && CFAbsoluteTimeGetCurrent() - *(double *)(v4 + 6944) <= 180.0)
  {
    NSErrorDomain v22 = NSPOSIXErrorDomain;
    unint64_t v23 = +[NSString stringWithFormat:@"AutoHotspot triggered within %d seconds of previous browse attempt", 180, NSLocalizedDescriptionKey];
    goto LABEL_48;
  }
  uint64_t v13 = 0;
LABEL_27:
  if (v13) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v7;
  }
  (*(void (**)(uint64_t, uint64_t, NSError *))(a3 + 16))(a3, v14, v13);
LABEL_31:
}

void sub_10014EF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (a3)
  {
    if (v5)
    {
      if (*(void *)(v5 + 8824))
      {
        if (!a2)
        {
          NSErrorUserInfoKey v40 = NSLocalizedDescriptionKey;
          CFStringRef v41 = @"No hotspot specified";
          CFStringRef v33 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
          NSErrorDomain v34 = NSPOSIXErrorDomain;
          uint64_t v35 = 22;
          goto LABEL_45;
        }
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v5 + 6912));
        CFIndex v8 = CFArrayGetCount(*(CFArrayRef *)(v5 + 6920));
        CFIndex v9 = CFArrayGetCount(*(CFArrayRef *)(v5 + 6928));
        id v10 = [*(id *)(v5 + 6936) count];
        if (Count >= 1)
        {
          if ([*(id *)(v5 + 6744) isEqualHotspotDevices:CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 6912), 0) compareTo:a2])goto LABEL_7; {
          CFIndex v13 = 1;
          }
          do
          {
            if (Count == v13) {
              goto LABEL_12;
            }
          }
          while (![*(id *)(v5 + 6744) isEqualHotspotDevices:CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 6912), v13++) compareTo:a2]);
          if (Count > v13 - 1)
          {
LABEL_7:
            NSErrorDomain v11 = NSPOSIXErrorDomain;
            NSErrorUserInfoKey v40 = NSLocalizedDescriptionKey;
            CFStringRef v12 = @"Hotspot suppressed/canceled by user";
            goto LABEL_43;
          }
        }
LABEL_12:
        if (v10)
        {
          uint64_t v15 = (v10 - 1);
          if ((int)v10 - 1 >= 0)
          {
            do
            {
              id v16 = [*(id *)(v5 + 6936) objectAtIndexedSubscript:v15];
              if (v16
                && (uint64_t v17 = v16, [v16 hotspotDevice])
                && (-[NSDate timeIntervalSinceDate:](+[NSDate date](NSDate, "date"), "timeIntervalSinceDate:", [v17 lastNotifiedAt]), v18 <= 1800.0))
              {
                if (objc_msgSend(*(id *)(v5 + 6744), "isEqualHotspotDevices:compareTo:", objc_msgSend(v17, "hotspotDevice"), a2))
                {
                  NSErrorDomain v11 = NSPOSIXErrorDomain;
                  NSErrorUserInfoKey v40 = NSLocalizedDescriptionKey;
                  CFStringRef v12 = @"Hotspot not responded by user";
                  goto LABEL_43;
                }
              }
              else
              {
                [*(id *)(v5 + 6936) removeObjectAtIndex:v15];
              }
            }
            while (v15-- >= 1);
          }
        }
        if (v8 >= 1)
        {
          CFIndex v20 = 0;
          while (!objc_msgSend(*(id *)(v5 + 6744), "isEqualHotspotDevices:compareTo:", CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 6920), v20), a2))
          {
            if (v8 == ++v20) {
              goto LABEL_27;
            }
          }
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Hotspot blacklisted: Peer declined \n", "__WiFiDeviceManagerUnifiedAutoJoinAllowHotspot")
          }
          NSErrorDomain v11 = NSPOSIXErrorDomain;
          NSErrorUserInfoKey v40 = NSLocalizedDescriptionKey;
          CFStringRef v12 = @"Hotspot declined/rejected by peer";
          goto LABEL_43;
        }
LABEL_27:
        if (v9)
        {
          id v21 = [*(id *)(v5 + 6744) getHotspotDeviceName:a2];
          if (v9 >= 1)
          {
            NSErrorDomain v22 = v21;
            CFIndex v23 = 0;
            while (1)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 6928), v23);
              if (ValueAtIndex)
              {
                CFStringRef v25 = ValueAtIndex;
                NSErrorUserInfoKey v26 = sub_10001A43C(ValueAtIndex);
                if (CFEqual(v22, v26)) {
                  break;
                }
              }
              if (v9 == ++v23) {
                goto LABEL_33;
              }
            }
            CFDateRef v30 = (const __CFDate *)sub_10001E404((uint64_t)v25, @"lastDisconnectTimestampKey");
            if (!v30 || (CFDateRef v31 = v30, sub_1000C7A08((uint64_t)v25)))
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: Hotspot %@ denylisted until user Join\n", "__WiFiDeviceManagerUnifiedAutoJoinAllowHotspot", sub_10001A43C(v25) message];
              }
              NSErrorDomain v11 = NSPOSIXErrorDomain;
              NSErrorUserInfoKey v40 = NSLocalizedDescriptionKey;
              CFStringRef v12 = @"Hotspot deauthed, disabled until next user join";
LABEL_43:
              CFStringRef v41 = v12;
LABEL_44:
              CFStringRef v33 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
              NSErrorDomain v34 = v11;
              uint64_t v35 = 1;
LABEL_45:
              CFStringRef v27 = +[NSError errorWithDomain:v34 code:v35 userInfo:v33];
              uint64_t v28 = 0;
              goto LABEL_46;
            }
            double Current = CFAbsoluteTimeGetCurrent();
            if (Current - CFDateGetAbsoluteTime(v31) < 3600.0)
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: Hotspot denylisted due to Deauth on %@\n", "__WiFiDeviceManagerUnifiedAutoJoinAllowHotspot", v31 message];
              }
              NSErrorDomain v11 = NSPOSIXErrorDomain;
              NSErrorUserInfoKey v40 = NSLocalizedDescriptionKey;
              CFStringRef v41 = +[NSString stringWithFormat:@"Hotspot deauthed/disconnected within past %d seconds", 3600];
              goto LABEL_44;
            }
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v5 + 6928), v23);
          }
        }
LABEL_33:
        if ([*(id *)(v5 + 6744) isHotspotDeviceSupportADHS:a2])
        {
          CFStringRef v27 = 0;
          uint64_t v28 = 1;
LABEL_46:
          (*(void (**)(uint64_t, uint64_t, NSError *))(a3 + 16))(a3, v28, v27);
          goto LABEL_47;
        }
        NSErrorDomain v11 = NSPOSIXErrorDomain;
        NSErrorUserInfoKey v40 = NSLocalizedDescriptionKey;
        CFStringRef v12 = @"ADHS not supported";
        goto LABEL_43;
      }
      NSErrorDomain v38 = NSPOSIXErrorDomain;
      NSErrorUserInfoKey v40 = NSLocalizedDescriptionKey;
      CFStringRef v39 = @"No auto-join manager configured";
    }
    else
    {
      NSErrorDomain v38 = NSPOSIXErrorDomain;
      NSErrorUserInfoKey v40 = NSLocalizedDescriptionKey;
      CFStringRef v39 = @"No device manager configured";
    }
    CFStringRef v41 = v39;
    CFStringRef v33 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
    NSErrorDomain v34 = v38;
    uint64_t v35 = 6;
    goto LABEL_45;
  }
LABEL_47:
}

void sub_10014F504(uint64_t a1, uint64_t a2, unint64_t a3, char a4, void *a5)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (!a5) {
    goto LABEL_15;
  }
  if (!v9)
  {
    NSErrorDomain v17 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    CFStringRef v18 = @"No device manager configured";
LABEL_19:
    CFStringRef v20 = v18;
    CFIndex v13 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v17, 6, +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1]);
    if (!v13) {
      goto LABEL_15;
    }
    NSErrorDomain v11 = (void (*)(void *, NSError *, void))a5[2];
    CFStringRef v12 = a5;
LABEL_10:
    v11(v12, v13, 0);
    goto LABEL_15;
  }
  if (!*(void *)(v9 + 8824))
  {
    NSErrorDomain v17 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    CFStringRef v18 = @"No auto-join manager configured";
    goto LABEL_19;
  }
  if (!*(void *)(v9 + 6744))
  {
    NSErrorDomain v17 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    CFStringRef v18 = @"No hotspot interface manager configured";
    goto LABEL_19;
  }
  if (CFAbsoluteTimeGetCurrent() - *(double *)(v9 + 6848) <= (double)a3 && [*(id *)(v9 + 6840) count])
  {
    ((void (*)(void *, void, id))a5[2])(a5, 0, [*(id *)(v9 + 6840) copy]);
    goto LABEL_15;
  }
  if (a4)
  {
    NSErrorDomain v11 = (void (*)(void *, NSError *, void))a5[2];
    CFStringRef v12 = a5;
    CFIndex v13 = 0;
    goto LABEL_10;
  }
  uint64_t v14 = *(void *)(v9 + 8864);
  if (v14)
  {
    (*(void (**)(uint64_t, NSError *, void))(v14 + 16))(v14, +[NSError errorWithDomain:NSPOSIXErrorDomain code:89 userInfo:0], 0);
    _Block_release(*(const void **)(v9 + 8864));
  }
  *(void *)(v9 + 8864) = _Block_copy(a5);
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v9 + 6840));
  uint64_t v15 = *(NSObject **)(v9 + 6808);
  dispatch_time_t v16 = dispatch_time(0, 1000000000 * a2);
  dispatch_source_set_timer(v15, v16, 0xFFFFFFFFFFFFFFFFLL, 0);
  *(_DWORD *)(v9 + 3280) = 16;
  [*(id *)(v9 + 6744) startBrowsing];
  *(CFAbsoluteTime *)(v9 + 6960) = CFAbsoluteTimeGetCurrent();
  ++*(_DWORD *)(v9 + 6172);
LABEL_15:
}

void sub_10014F788(uint64_t a1, void *a2, void (**a3)(void, void))
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!a3) {
    goto LABEL_9;
  }
  if (!v5)
  {
    NSErrorDomain v8 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
    CFStringRef v9 = @"No device manager configured";
LABEL_12:
    CFStringRef v17 = v9;
    id v10 = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    NSErrorDomain v11 = v8;
    uint64_t v12 = 6;
    goto LABEL_16;
  }
  if (!*(void *)(v5 + 8824))
  {
    NSErrorDomain v8 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
    CFStringRef v9 = @"No auto-join manager configured";
    goto LABEL_12;
  }
  if (sub_100072C58(*(void *)(v5 + 64)))
  {
    NSErrorDomain v13 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
    CFStringRef v14 = @"IPv4/IPv6 network path already available on another interface";
  }
  else
  {
    if (a2)
    {
      uint64_t v7 = *(const void **)(v5 + 8856);
      if (v7)
      {
        _Block_release(v7);
      }
      *(void *)(v5 + 8856) = _Block_copy(a3);
      *(void *)(v5 + 8848) = a2;
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v5 + 6840));
      CFArrayAppendValue(*(CFMutableArrayRef *)(v5 + 6840), a2);
      *(_DWORD *)(v5 + 6888) = 2;
      *(void *)(v5 + 6880) = 0x300000002;
      *(unsigned char *)(v5 + 6968) = 0;
      *(_DWORD *)(v5 + 3280) = sub_100135978(v5);
      goto LABEL_9;
    }
    NSErrorDomain v13 = NSPOSIXErrorDomain;
    NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
    CFStringRef v14 = @"No hotspot specified";
  }
  CFStringRef v17 = v14;
  id v10 = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
  NSErrorDomain v11 = v13;
  uint64_t v12 = 22;
LABEL_16:
  uint64_t v15 = +[NSError errorWithDomain:v11 code:v12 userInfo:v10];
  if (v15) {
    ((void (**)(void, NSError *))a3)[2](a3, v15);
  }
LABEL_9:
}

void sub_10014F9B4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    CFStringRef v9 = *(void **)(v7 + 8824);
    if (v9)
    {
      if (a4 != 1 || *(void *)(v7 + 8872))
      {
        if (a4)
        {
          [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinUpdatedWithState:a4 interfaceName:sub_100017C48(*(void *)(v7 + 64))];
        }
        else
        {
          id v12 = [v9 metric];
          [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinEndedWithResult:objc_msgSend(v12, "result") interfaceName:sub_100017C48(*(void *)(v7 + 64))];
          if ([v12 result])
          {
            NSErrorDomain v13 = sub_10015048C([v12 network]);
            sub_1001409B8(v7, @"autoJoinSuccess", v13, (uint64_t)v12);
            if (v13) {
              CFRelease(v13);
            }
          }
          else
          {
            if ([v12 error])
            {
              CFStringRef v14 = off_10023FD58;
            }
            else if ([v12 wasAlreadyAssociated])
            {
              CFStringRef v14 = off_10023FD30;
            }
            else
            {
              CFStringRef v14 = off_10023FD48;
            }
            sub_1001409B8(v7, *v14, 0, (uint64_t)v12);
          }
          if (_os_feature_enabled_impl()) {
            double v15 = 30.0;
          }
          else {
            double v15 = 14.0;
          }
          id v16 = [v12 network];
          if (v16)
          {
            CFStringRef v17 = v16;
            if (objc_msgSend(objc_msgSend(v16, "matchingKnownNetworkProfile"), "addReason") == (id)8
              && !objc_msgSend(objc_msgSend(v17, "matchingKnownNetworkProfile"), "lastJoinedBySystemAt")
              && v15 > (double)((unint64_t)[v12 duration] / 0x3E8))
            {
              CFStringRef v18 = sub_1000D1628(v17);
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s Updating 6G standalone property after iCloud sync on %@", "__WiFiDeviceManagerUnifiedAutoJoinCheckForStandalone6G", v18 message];
              }
              sub_10010C8FC(v7, v18);
              if (v18) {
                CFRelease(v18);
              }
            }
          }
          sub_100131ECC(v7);
          if (*(_DWORD *)(v7 + 3280) == 16) {
            sub_1000FB0D0(v7, 0);
          }
        }
      }
      else
      {
        id v10 = *(void **)(v7 + 8904);
        if (v10)
        {
          sub_100006E70(*(void *)(v7 + 64), 0, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@", @"AutoJoin", [v10 UUIDString]), 0);
          sub_100006E70(*(void *)(v7 + 64), 9, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@", @"AutoJoin", [*(id *)(v7 + 8904) UUIDString]), 0);
          NSErrorDomain v11 = *(void **)(v7 + 8904);
        }
        else
        {
          NSErrorDomain v11 = 0;
        }
        *(void *)(v7 + 8920) = 0;
        *(void *)(v7 + 8912) = 0;

        *(void *)(v7 + 8904) = [a2 copy];
        [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") autoJoinStartedWithTrigger:objc_msgSend(a3, "trigger") interfaceName:sub_100017C48(*(void *)(v7 + 64))];
        sub_1001409B8(v7, @"kWiFiAutoJoinStatusBegan", 0, 0);
      }
      *(void *)(v7 + 8872) = a4;
      *(void *)(v7 + 8880) = [a3 trigger];
    }
  }
}

void sub_10014FD54(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v7 = 0;
  if (a2 && a3 && v5)
  {
    if (*(void *)(v5 + 8824) && *(void *)(v5 + 4520) && (NSErrorDomain v8 = sub_1000CFEE8(a2, 0)) != 0)
    {
      CFStringRef v9 = v8;
      id v10 = (CFDictionaryRef *)sub_1000194F8(v5, v8, 0);
      if (!v10)
      {
        uint64_t v7 = 0;
LABEL_13:
        CFRelease(v9);
        goto LABEL_14;
      }
      NSErrorDomain v11 = v10;
      uint64_t v7 = sub_10001CECC(v10);
      if (v7 && (id v12 = (void *)(*(uint64_t (**)(uint64_t, void *))(a3 + 16))(a3, v7)) != 0)
      {
        NSErrorDomain v13 = sub_1000CFEE8(v12, 0);
        if (v13) {
          (*(void (**)(uint64_t, _WORD *, void))(v5 + 4520))(v5, v13, *(void *)(v5 + 4528));
        }
      }
      else
      {
        NSErrorDomain v13 = 0;
      }
      CFRelease(v9);
      CFRelease(v11);
      CFStringRef v9 = v13;
      if (v13) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
LABEL_14:
}

BOOL sub_10014FE78(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  BOOL v3 = 0;
  if (a2 && *(void *)(a1 + 8824))
  {
    CFMutableArrayRef Mutable = *(__CFArray **)(a1 + 1112);
    if (!Mutable)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      *(void *)(a1 + 1112) = Mutable;
    }
    CFArrayRemoveAllValues(Mutable);
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3560));
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3568));
    [*(id *)(a1 + 3656) clearScanResultsForAutoJoinSessionReset];
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 1112), a2);
    sub_100139ACC(a1);
    BOOL v3 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3568)) > 0
      || CFArrayGetCount(*(CFArrayRef *)(a1 + 3560)) > 0
      || !CFArrayGetCount(*(CFArrayRef *)(a1 + 1112));
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3560));
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3568));
    [*(id *)(a1 + 3656) clearScanResultsForAutoJoinSessionReset];
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1112));
  }
  return v3;
}

void sub_10014FF74(uint64_t a1, uint64_t a2, const __CFArray *a3, const __CFDictionary *a4, int a5, uint64_t *a6)
{
  if (a6)
  {
    uint64_t v11 = *a6;
    if (v11)
    {
      if (*(void *)(v11 + 8928))
      {
        NSErrorDomain v13 = *(void **)(v11 + 8936);
        if (v13)
        {
          if (a4)
          {
            CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a4, @"CompletedUsingCache");
            NSErrorDomain v13 = *(void **)(v11 + 8936);
          }
          else
          {
            CFBooleanRef Value = kCFBooleanFalse;
          }
          unsigned int v15 = [v13 scanType];
          if (a5 || (id v17 = +[NSMutableArray array], !a3))
          {
            uint64_t v16 = 0;
          }
          else
          {
            CFStringRef v18 = v17;
            CFBooleanRef v29 = Value;
            NSErrorUserInfoKey v19 = v12;
            if (CFArrayGetCount(a3) >= 1)
            {
              CFIndex v20 = 0;
              do
              {
                CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v20);
                if (ValueAtIndex)
                {
                  id v23 = sub_10000AD1C((uint64_t)ValueAtIndex);
                  if (v23) {
                    [v18 addObject:v23];
                  }
                }
                ++v20;
              }
              while (CFArrayGetCount(a3) > v20);
            }
            uint64_t v16 = CWFFilteredScanResults();
            CFStringRef v24 = *(__CFArray **)(v11 + 1104);
            v31.length = CFArrayGetCount(a3);
            v31.location = 0;
            CFArrayAppendArray(v24, a3, v31);
            id v12 = v19;
            CFBooleanRef Value = v29;
          }
          if (v15 == 3 || Value != kCFBooleanFalse)
          {
            CFStringRef v25 = *(char **)(v11 + 8912);
          }
          else
          {
            CFStringRef v25 = (char *)[[*(id *)(v11 + 8936) channels] count] + *(void *)(v11 + 8912);
            *(void *)(v11 + 8912) = v25;
            if (!*(unsigned char *)(v11 + 9060)) {
              *(unsigned char *)(v11 + 9060) = 1;
            }
          }
          if ((unint64_t)v25 >= 6 && *(void *)(v11 + 8920))
          {
            sub_100006E70(*(void *)(v11 + 64), 0, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@", @"AutoJoin", [*(id *)(v11 + 8904) UUIDString]), 0);
            sub_100006E70(*(void *)(v11 + 64), 9, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@", @"AutoJoin", [*(id *)(v11 + 8904) UUIDString]), 0);
          }
          uint64_t v26 = *(void *)(v11 + 8928);
          if (a5) {
            CFStringRef v27 = +[NSError errorWithDomain:CWFManagerErrorDomain code:a5 userInfo:0];
          }
          else {
            CFStringRef v27 = 0;
          }
          id v28 = 0;
          if (v15 != 3 && Value != kCFBooleanTrue) {
            id v28 = [*(id *)(v11 + 8936) channels];
          }
          (*(void (**)(uint64_t, NSError *, uint64_t, id))(v26 + 16))(v26, v27, v16, v28);
          _Block_release(*(const void **)(v11 + 8928));
          *(void *)(v11 + 8928) = 0;

          *(void *)(v11 + 8936) = 0;
        }
      }
    }
    free(a6);
  }
}

void sub_100150288(uint64_t a1, uint64_t a2, const __CFArray *a3, const __CFDictionary *a4, int a5, uint64_t *a6)
{
  if (a6)
  {
    if (a3 && CFArrayGetCount(a3)) {
      sub_100144754(*a6, a3);
    }
    uint64_t v11 = *a6;
    if (!v11 || !*(void *)(v11 + 8944) || !*(void *)(v11 + 8952)) {
      goto LABEL_26;
    }
    if (a4)
    {
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a4, @"CompletedUsingCache");
      if (a5)
      {
LABEL_10:
        uint64_t v14 = *(void *)(v11 + 8944);
        unsigned int v15 = +[NSError errorWithDomain:CWFManagerErrorDomain code:a5 userInfo:0];
        uint64_t v16 = 0;
LABEL_22:
        if (Value == kCFBooleanTrue) {
          id v23 = 0;
        }
        else {
          id v23 = [*(id *)(v11 + 8952) scanResults];
        }
        (*(void (**)(uint64_t, NSError *, uint64_t, id))(v14 + 16))(v14, v15, v16, v23);
        _Block_release(*(const void **)(v11 + 8944));
        *(void *)(v11 + 8944) = 0;

        *(void *)(v11 + 8952) = 0;
LABEL_26:
        free(a6);
        goto LABEL_27;
      }
    }
    else
    {
      CFBooleanRef Value = kCFBooleanFalse;
      if (a5) {
        goto LABEL_10;
      }
    }
    id v17 = +[NSMutableArray array];
    if (a3)
    {
      CFStringRef v18 = v17;
      if (CFArrayGetCount(a3) >= 1)
      {
        CFIndex v19 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v19);
          if (ValueAtIndex)
          {
            id v22 = sub_10000AD1C((uint64_t)ValueAtIndex);
            if (v22) {
              [v18 addObject:v22];
            }
          }
          ++v19;
        }
        while (CFArrayGetCount(a3) > v19);
      }
      uint64_t v16 = CWFFilteredANQPResults();
    }
    else
    {
      uint64_t v16 = 0;
    }
    unsigned int v15 = 0;
    uint64_t v14 = *(void *)(v11 + 8944);
    goto LABEL_22;
  }
LABEL_27:
}

_WORD *sub_10015048C(_WORD *a1)
{
  if (a1)
  {
    id v3 = [a1 matchingKnownNetworkProfile];
    if (!v3) {
      goto LABEL_9;
    }
    uint64_t v4 = v3;
    a1 = [a1 scanRecord];
    if (!a1) {
      goto LABEL_8;
    }
    CFDictionaryRef v5 = (const __CFDictionary *)sub_1000CFEE8(v4, [v4 properties]);
    if (!v5)
    {
LABEL_9:
      a1 = 0;
      goto LABEL_8;
    }
    CFDictionaryRef v6 = v5;
    CFDictionaryRef v7 = sub_10000E5B8((uint64_t)v5);
    if (v7)
    {
      CFDictionaryRef v8 = v7;
      id v9 = +[NSMutableDictionary dictionary];
      [v9 addEntriesFromDictionary:v8];
      [v9 addEntriesFromDictionary:a1];
      a1 = sub_100019658((int)kCFAllocatorDefault, v9);
      sub_1000C63FC((uint64_t)a1, (uint64_t)v6);
      CFRelease(v6);
      CFDictionaryRef v6 = v8;
    }
    else
    {
      a1 = 0;
    }
    CFRelease(v6);
  }
LABEL_8:
  return a1;
}

uint64_t sub_100150584(uint64_t a1, const void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = a1;
  id v10 = (void *)sub_1000747C4(a1);
  if (a5)
  {
    uint64_t v11 = (void (*)(void, const void *, void *, uint64_t, void))a5[1];
    if (v11) {
      v11(*a5, a2, v10, a3, a5[3]);
    }
  }
  if (CFArrayGetCount((CFArrayRef)v10))
  {
    unsigned int v12 = [[a4 objectForKeyedSubscript:@"SENSING_PARAMS_SUBMIT_METRIC"] boolValue];
    if (_os_feature_enabled_impl())
    {
      int v13 = MGGetBoolAnswer();
      unsigned int v14 = v10 ? v12 : 0;
      if (v13 && v14)
      {
        CFStringRef v39 = a4;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, @"Sensing %s: submitMetric: %d", @"__WiFiDeviceManagerSensingSubmitReport", 1];
        }
        NSErrorDomain v34 = +[NSUserDefaults standardUserDefaults];
        uint64_t v16 = [(NSUserDefaults *)v34 dictionaryForKey:@"WIFI_SENSING"];
        id v17 = v16;
        if (v16)
        {
          [v16 objectForKeyedSubscript:@"SENSING_RESULTS_DATA_TIMESTAMP"] doubleValue];
          uint64_t v19 = v18;
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Sensing lastSensingSubmitTimestamp %lf", v19);
          }
        }
        uint64_t v52 = 0;
        long long v53 = &v52;
        uint64_t v54 = 0x3052000000;
        long long v55 = sub_100022D18;
        long long v56 = sub_100022C14;
        id v57 = (id)0xAAAAAAAAAAAAAAAALL;
        unsigned int v35 = a3;
        long long v36 = a5;
        uint64_t v37 = v9;
        NSErrorDomain v38 = a2;
        id v57 = objc_alloc_init((Class)NSMutableDictionary);
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        id v21 = [v10 countByEnumeratingWithState:&v48 objects:v59 count:16];
        if (v21)
        {
          uint64_t v40 = *(void *)v49;
          do
          {
            id v22 = 0;
            id v41 = v21;
            do
            {
              if (*(void *)v49 != v40) {
                objc_enumerationMutation(v10);
              }
              id v23 = *(void **)(*((void *)&v48 + 1) + 8 * (void)v22);
              long long v44 = 0u;
              long long v45 = 0u;
              long long v46 = 0u;
              long long v47 = 0u;
              id v24 = [&off_100264198 countByEnumeratingWithState:&v44 objects:v58 count:16];
              if (v24)
              {
                uint64_t v25 = *(void *)v45;
                do
                {
                  for (CFIndex i = 0; i != v24; CFIndex i = (char *)i + 1)
                  {
                    if (*(void *)v45 != v25) {
                      objc_enumerationMutation(&off_100264198);
                    }
                    uint64_t v27 = *(void *)(*((void *)&v44 + 1) + 8 * i);
                    id v28 = [[objc_msgSend(v23, "objectForKeyedSubscript:", v27) componentsSeparatedByString:@":"];
                    if ([v28 count] == (id)6) {
                      [v23 setObject:objc_msgSend(v28, "objectAtIndexedSubscript:", 5) forKeyedSubscript:v27];
                    }
                    else {
                      [v23 setObject:@"NA" forKeyedSubscript:v27];
                    }
                  }
                  id v24 = [&off_100264198 countByEnumeratingWithState:&v44 objects:v58 count:16];
                }
                while (v24);
              }
              id v22 = (char *)v22 + 1;
            }
            while (v22 != v41);
            id v21 = [v10 countByEnumeratingWithState:&v48 objects:v59 count:16];
          }
          while (v21);
        }
        [(id)v53[5] setObject:v10 forKey:@"SENSING_RESULTS_DATA"];
        if ([v39 objectForKeyedSubscript:@"SENSING_PARAMS_ACTIVITY_LABELS"]) {
          [v53[5] setObject:objc_msgSend(v39, "objectForKeyedSubscript:", @"SENSING_PARAMS_ACTIVITY_LABELS") forKey:@"SENSING_PARAMS_ACTIVITY_LABELS"];
        }
        if ([v39 objectForKeyedSubscript:@"SENSING_PARAMS_PLACE_LABELS"]) {
          [v53[5] setObject:[v39 objectForKeyedSubscript:@"SENSING_PARAMS_PLACE_LABELS"] forKey:@"SENSING_PARAMS_PLACE_LABELS"];
        }
        if ([v39 objectForKeyedSubscript:@"SENSING_PARAMS_ACTIVITY_VALUE"]) {
          [v53[5] setObject:objc_msgSend(v39, "objectForKeyedSubscript:", @"SENSING_PARAMS_ACTIVITY_VALUE") forKey:@"SENSING_PARAMS_ACTIVITY_VALUE"];
        }
        if ([v39 objectForKeyedSubscript:@"SENSING_PARAMS_COMMENT"]) {
          [v53[5] setObject:objc_msgSend(v39, "objectForKeyedSubscript:", @"SENSING_PARAMS_COMMENT") forKey:@"SENSING_PARAMS_COMMENT"];
        }
        v42[0] = _NSConcreteStackBlock;
        v42[1] = 3221225472;
        v42[2] = sub_100150C34;
        void v42[3] = &unk_100241F30;
        v42[4] = &v52;
        id v43 = 0;
        uint64_t v9 = v37;
        a2 = v38;
        a5 = v36;
        a3 = v35;
        if (+[OSALog createForSubmission:@"235" metadata:0 options:0 error:&v43 writing:v42])
        {
          CFBooleanRef v29 = +[NSMutableDictionary dictionaryWithDictionary:v17];
          [(NSMutableDictionary *)v29 setObject:+[NSNumber numberWithDouble:CFAbsoluteTimeGetCurrent()] forKeyedSubscript:@"SENSING_RESULTS_DATA_TIMESTAMP"];
          [(NSUserDefaults *)v34 setObject:v29 forKey:@"WIFI_SENSING"];
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "Sensing submit - updating the last submitted timestamp %@", v29 message];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "WiFiSensing Failed to write 235 report: %@", [v43 localizedDescription]];
          }
        }
        CFRange v31 = (const void *)v53[5];
        if (v31)
        {
          CFRelease(v31);
          v53[5] = 0;
        }
        _Block_object_dispose(&v52, 8);
      }
    }
  }
  if (a5)
  {
    NSErrorUserInfoKey v32 = (void (*)(void, const void *, void *, uint64_t, void))a5[1];
    if (v32) {
      v32(*a5, a2, v10, a3, a5[3]);
    }
    CFRelease((CFTypeRef)a5[2]);
    free(a5);
  }
  sub_1000747A0(v9, 0);
  sub_100074790(v9);
  return sub_1000745DC(v9, a2);
}

void sub_100150BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void sub_100150C34(uint64_t a1, void *a2)
{
  uint64_t v3 = 0;
  [a2 writeData:[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), 0, &v3)];
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Sensing Finished submitting Record\n"];
  }
}

uint64_t sub_100150CC0(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void sub_100150CC8(uint64_t a1)
{
  memset(__b, 170, sizeof(__b));
  ssize_t v2 = read(*(_DWORD *)(a1 + 40), __b, 0x400uLL);
  if (v2 >= 1)
  {
    ssize_t v3 = v2;
    ssize_t v4 = 0;
    CFDictionaryRef v5 = __b;
    while (1)
    {
      uint64_t v6 = *(unsigned int *)&__b[v4];
      if (v4 + v6 > (unint64_t)v3) {
        break;
      }
      if (v6 <= 0x2F)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: not enough bytes read for event data" args:("__WiFiDeviceManagerSetupKernelEventMonitor_block_invoke_2")];
        }
        goto LABEL_17;
      }
      memset(__str, 170, sizeof(__str));
      snprintf(__str, 0x10uLL, "%s%u", v5 + 32, *((_DWORD *)v5 + 7));
      CFDictionaryRef v7 = +[NSString stringWithCString:__str encoding:4];
      if (!v7)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null ifName", "__WiFiDeviceManagerSetupKernelEventMonitor_block_invoke_2")];
        }
        goto LABEL_17;
      }
      if (*((_DWORD *)v5 + 5) == 1)
      {
        CFDictionaryRef v8 = v7;
        uint64_t v9 = (const void *)sub_100016E20(*(void *)(*(void *)(a1 + 32) + 64));
        if (CFEqual(v9, v8)) {
          sub_100150EB4(*(void *)(a1 + 32));
        }
      }
      v4 += *(unsigned int *)&__b[v4];
      CFDictionaryRef v5 = &__b[v4];
      if (v4 >= v3) {
        return;
      }
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: not enough bytes read", @"__WiFiDeviceManagerSetupKernelEventMonitor_block_invoke_2"];
    }
LABEL_17:
  }
}

void sub_100150EB4(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  if (a1)
  {
    ssize_t v2 = (unsigned char *)(a1 + 9000);
    if (!*(unsigned char *)(a1 + 9000))
    {
      uint64_t v3 = sub_100016E20(*(void *)(a1 + 64));
      if (v3)
      {
        ssize_t v4 = (void *)v3;
        int v5 = socket(30, 2, 0);
        if ((v5 & 0x80000000) == 0)
        {
          int v6 = v5;
          [v4 getCString:&v9 maxLength:16 encoding:4];
          if (!ioctl(v6, 0xC0206911uLL, &v9) && (v10 & 1) != 0)
          {
            *ssize_t v2 = 1;
            sub_100101F2C(a1);
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:3, "%s: interface went up, starting auto-join", "__WiFiDeviceManagerUpdateInterfaceFlags"];
            }
            sub_10001FD64(a1, 0x26uLL);
          }
          close(v6);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:4 message:@"%s: null ifName" args:__WiFiDeviceManagerUpdateInterfaceFlags];
        }
      }
    }
  }
}

void sub_10015106C(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6 = *a6;
  if (*a6)
  {
    *(unsigned char *)(v6 + 3760) = 0;
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: %s: network %@, error %d", "__WiFiDeviceManagerColocatedNetworkTransitionAssociationCallback", sub_10001A43C(a3), a5 message];
    }
    int v10 = sub_100074914(*(void *)(v6 + 64));
    if (a5 && v10)
    {
      ++dword_10027DBC0;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, @"[NWTRANSIT]: Transition Attempt Failed. Retry after %d time", 30];
      }
      if (dword_10027DBC0 <= 3)
      {
        CFRetain((CFTypeRef)v6);
        unsigned int v12 = *(NSObject **)(v6 + 240);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100151224;
        block[3] = &unk_10023EAF8;
        void block[4] = v6;
        dispatch_async(v12, block);
      }
    }
    else
    {
      dword_10027DBC0 = 0;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: manager is NULL", @"__WiFiDeviceManagerColocatedNetworkTransitionAssociationCallback"];
    }
  }
}

void sub_100151224(uint64_t a1)
{
  ssize_t v2 = *(void **)(a1 + 32);
  if (v2[30])
  {
    uint64_t v3 = v2[471];
    dispatch_time_t v4 = dispatch_time(0, 30000000000);
    dispatch_source_set_timer(v3, v4, 0xFFFFFFFFFFFFFFFFLL, 0);
    ssize_t v2 = *(void **)(a1 + 32);
  }

  CFRelease(v2);
}

uint64_t sub_100151290(uint64_t a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Dispatching join for =%@", *(void *)(a1 + 32) message];
  }
  uint64_t v3 = *(void *)(a1 + 40);
  dispatch_time_t v4 = (const void *)sub_100017C48(*(void *)(v3 + 64));
  int v5 = *(void **)(a1 + 32);

  return sub_100113EA0(v3, v4, v5, 0, 0, (uint64_t)sub_10012D39C, 0, 14);
}

void sub_100151338(uint64_t a1)
{
  ssize_t v2 = (__CFString *)sub_100016E20(*(void *)(*(void *)(a1 + 32) + 64));
  [*(id *)(*(void *)(a1 + 32) + 7368) addFaultEvent:25 forInterface:sub_100016E20(*(void *)(*(void *)(a1 + 32) + 64))];
  if (!v2 || ![(__CFString *)v2 length])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Invalid interfaceName %@ reason %lu", "__WiFiDeviceManagerHandleSiriTimedOutNotification_block_invoke", v2, 25 message];
    }
    ssize_t v2 = @"UnknownInterface";
  }
  v5[0] = kWAMessageKeyFaultDate;
  v6[0] = +[NSDate date];
  v5[1] = kWAMessageKeyFaultName;
  uint64_t v4 = WiFiUsageFaultReasonStringMap();
  v5[2] = kWAMessageKeyFaultInterface;
  v6[1] = v4;
  v6[2] = v2;
  sub_100058EC0(+[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:3]);
}

void sub_100151480(uint64_t a1)
{
  ssize_t v2 = (__CFString *)sub_100016E20(*(void *)(*(void *)(a1 + 32) + 64));
  [*(id *)(*(void *)(a1 + 32) + 7368) addFaultEvent:26 forInterface:sub_100016E20(*(void *)(*(void *)(a1 + 32) + 64))];
  if (!v2 || ![(__CFString *)v2 length])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Invalid interfaceName %@ reason %lu", "__WiFiDeviceManagerHandleApsdTimedOutNotification_block_invoke", v2, 26 message];
    }
    ssize_t v2 = @"UnknownInterface";
  }
  v5[0] = kWAMessageKeyFaultDate;
  v6[0] = +[NSDate date];
  v5[1] = kWAMessageKeyFaultName;
  uint64_t v4 = WiFiUsageFaultReasonStringMap();
  v5[2] = kWAMessageKeyFaultInterface;
  v6[1] = v4;
  v6[2] = v2;
  sub_100058EC0(+[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:3]);
}

void sub_1001515C8(uint64_t a1)
{
  ssize_t v2 = (__CFString *)sub_100016E20(*(void *)(*(void *)(a1 + 32) + 64));
  [*(id *)(*(void *)(a1 + 32) + 7368) addFaultEvent:30 forInterface:sub_100016E20(*(void *)(*(void *)(a1 + 32) + 64))];
  if (!v2 || ![(__CFString *)v2 length])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Invalid interfaceName %@ reason %lu", "__WiFiDeviceManagerHandleAirplayConnectionStallNotification_block_invoke", v2, 30 message];
    }
    ssize_t v2 = @"UnknownInterface";
  }
  v5[0] = kWAMessageKeyFaultDate;
  v6[0] = +[NSDate date];
  v5[1] = kWAMessageKeyFaultName;
  uint64_t v4 = WiFiUsageFaultReasonStringMap();
  v5[2] = kWAMessageKeyFaultInterface;
  v6[1] = v4;
  v6[2] = v2;
  sub_100058EC0(+[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:3]);
}

void sub_100151710(uint64_t a1)
{
  ssize_t v2 = (__CFString *)sub_100016E20(*(void *)(*(void *)(a1 + 32) + 64));
  [*(id *)(*(void *)(a1 + 32) + 7368) addFaultEvent:31 forInterface:v2];
  if (!v2 || ![(__CFString *)v2 length])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Invalid interfaceName %@ reason %lu", "__WiFiDeviceManagerHandleAirplayBufferedAudioUnderrunNotification_block_invoke", v2, 31 message];
    }
    ssize_t v2 = @"UnknownInterface";
  }
  v5[0] = kWAMessageKeyFaultDate;
  v6[0] = +[NSDate date];
  v5[1] = kWAMessageKeyFaultName;
  uint64_t v4 = WiFiUsageFaultReasonStringMap();
  v5[2] = kWAMessageKeyFaultInterface;
  v6[1] = v4;
  v6[2] = v2;
  sub_100058EC0(+[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:3]);
}

void sub_10015184C(uint64_t a1)
{
  ssize_t v2 = (__CFString *)sub_100016E20(*(void *)(*(void *)(a1 + 32) + 64));
  [*(id *)(*(void *)(a1 + 32) + 7368) addFaultEvent:32 forInterface:v2];
  if (!v2 || ![(__CFString *)v2 length])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Invalid interfaceName %@ reason %lu", "__WiFiDeviceManagerHandleAirplayRealtimeAudioUnderrunNotification_block_invoke", v2, 32 message];
    }
    ssize_t v2 = @"UnknownInterface";
  }
  v5[0] = kWAMessageKeyFaultDate;
  v6[0] = +[NSDate date];
  v5[1] = kWAMessageKeyFaultName;
  uint64_t v4 = WiFiUsageFaultReasonStringMap();
  v5[2] = kWAMessageKeyFaultInterface;
  v6[1] = v4;
  v6[2] = v2;
  sub_100058EC0(+[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:3]);
}

uint64_t sub_100152AB0()
{
  uint64_t result = qword_10027DBC8;
  if (!qword_10027DBC8)
  {
    pthread_once(&stru_10027CD38, (void (*)(void))sub_100152AF8);
    return qword_10027DBC8;
  }
  return result;
}

uint64_t sub_100152AF8()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_10027DBC8 = result;
  return result;
}

char *sub_100152B20(uint64_t a1, uint64_t a2)
{
  if (!&_EAPOLControlKeyCreate) {
    return 0;
  }
  if (!qword_10027DBC8) {
    pthread_once(&stru_10027CD38, (void (*)(void))sub_100152AF8);
  }
  Instance = (char *)_CFRuntimeCreateInstance();
  uint64_t v4 = Instance;
  if (Instance)
  {
    *((_OWORD *)Instance + 5) = 0u;
    *((_OWORD *)Instance + 6) = 0u;
    *((_OWORD *)Instance + 3) = 0u;
    *((_OWORD *)Instance + 4) = 0u;
    *((_OWORD *)Instance + 1) = 0u;
    *((_OWORD *)Instance + 2) = 0u;
    *((void *)Instance + 2) = a2;
    CFStringRef v5 = (const __CFString *)sub_100016E20(a2);
    CFStringGetCString(v5, v4 + 24, 16, 0);
  }
  return v4;
}

uint64_t sub_100152BD4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    *(void *)(result + 56) = a2;
    *(void *)(result + 64) = a3;
  }
  return result;
}

void sub_100152BE0(uint64_t a1, NSObject *a2)
{
  if (a1 && a2)
  {
    *(void *)(a1 + 48) = a2;
    uint64_t v3 = *(const __SCDynamicStore **)(a1 + 40);
    if (!v3)
    {
      long long v22 = 0u;
      memset(v23, 0, sizeof(v23));
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      *(_OWORD *)__str = 0u;
      context.version = 0;
      memset(&context.retain, 0, 24);
      context.info = (void *)a1;
      snprintf(__str, 0xFFuLL, "WiFiDeviceEAP:%p", *(const void **)(a1 + 16));
      CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, __str, 0);
      if (!v5) {
        return;
      }
      CFStringRef v6 = v5;
      *(void *)(a1 + 40) = SCDynamicStoreCreate(kCFAllocatorDefault, v5, (SCDynamicStoreCallBack)sub_100152D94, &context);
      CFRelease(v6);
      if (!*(void *)(a1 + 40)) {
        return;
      }
      sub_100152E24(a1);
      if (!SCDynamicStoreSetDisconnectCallBack())
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4 message:"Error subscribing to the dynamic store disconnect event."];
        }
      }
      uint64_t v3 = *(const __SCDynamicStore **)(a1 + 40);
      a2 = *(NSObject **)(a1 + 48);
    }
    if (!SCDynamicStoreSetDispatchQueue(v3, a2))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4 message:"Error setting dynamic store queue."];
      }
    }
  }
}

void sub_100152D94(int a1, CFArrayRef theArray, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 96))
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      for (CFIndex i = 0; i != v6; ++i)
      {
        if (CFArrayGetValueAtIndex(theArray, i))
        {
          CFStringRef v8 = (const __CFString *)EAPOLControlKeyCopyInterface();
          if (v8)
          {
            CFStringRef v9 = v8;
            sub_100153DC8(a3, v8);
            CFRelease(v9);
          }
        }
      }
    }
  }
}

void sub_100152E24(uint64_t a1)
{
  values = (void *)EAPOLControlKeyCreate();
  CFArrayRef v2 = CFArrayCreate(0, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  if (values)
  {
    CFRelease(values);
    values = 0;
  }
  SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 40), v2, 0);
  if (v2) {
    CFRelease(v2);
  }
}

void sub_100152EA0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100152E24(a2);
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"Cannot reconnect to the dynamic store - info is NULL"];
    }
  }
}

uint64_t sub_100152F10(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 48))
    {
      uint64_t result = SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(result + 40), 0);
      *(void *)(v1 + 48) = 0;
    }
  }
  return result;
}

uint64_t sub_100152F50(void *a1, CFDictionaryRef *cf1, const void *a3)
{
  uint64_t v3 = 4294963396;
  if (!a1 || !cf1) {
    return v3;
  }
  CFDictionaryRef v7 = (const void *)a1[9];
  if (!v7 || !CFEqual(cf1, v7) || *((_DWORD *)a1 + 24) != 5)
  {
    CFDictionaryRef v9 = sub_1001537C8((uint64_t)a1, cf1, a3);
    if (!v9) {
      return v3;
    }
    CFDictionaryRef v10 = v9;
    sub_1001539AC((uint64_t)a1, v9);
    sub_100153A04((uint64_t)a1, cf1);
    long long v11 = (const void *)a1[11];
    if (v11) {
      CFRelease(v11);
    }
    a1[12] = 0;
    long long v12 = a1 + 12;
    a1[11] = 0;
    a1[13] = 0;
    long long v13 = dispatch_semaphore_create(0);
    uint64_t v22 = 0;
    id v23 = &v22;
    uint64_t v24 = 0x2020000000;
    int v25 = 0;
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100153B00;
    block[3] = &unk_1002423D8;
    void block[5] = &v22;
    void block[6] = a1 + 3;
    void block[4] = v13;
    dispatch_async(global_queue, block);
    dispatch_time_t v15 = dispatch_time(0, 3000000000);
    if (dispatch_semaphore_wait(v13, v15))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4 message:"Gave up waiting for EAPOLControlCopyStateAndStatus. Bailing"];
      }
LABEL_16:
      *long long v12 = 0;
      uint64_t v3 = 4294963394;
LABEL_29:
      dispatch_release(v13);
      CFRelease(v10);
      _Block_object_dispose(&v22, 8);
      return v3;
    }
    int v17 = *((_DWORD *)v23 + 6);
    *((_DWORD *)a1 + 26) = v17;
    if (v17 == 3)
    {
      *long long v12 = 1;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"WiFiDeviceEAPAssociate: EAPOLControl already stopping"];
      }
    }
    else
    {
      if (v17)
      {
        *long long v12 = 1;
        uint64_t v18 = EAPOLControlStop();
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, @"WiFiDeviceEAPAssociate: EAPOLControlStop result=%d", v18];
        }
      }
      else
      {
        *((_DWORD *)a1 + 24) = 2;
        uint64_t v18 = EAPOLControlStart();
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, @"WiFiDeviceEAPAssociate: EAPOLControlStart result=%d", v18];
        }
      }
      if (v18) {
        goto LABEL_16;
      }
    }
    uint64_t v3 = 0;
    goto LABEL_29;
  }

  return sub_100153250((uint64_t)a1, cf1, a3);
}

void sub_100153238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100153250(uint64_t a1, CFDictionaryRef *cf1, const void *a3)
{
  uint64_t v3 = 4294963396;
  if (!a1 || !cf1) {
    return v3;
  }
  CFDictionaryRef v7 = *(const void **)(a1 + 72);
  if (v7 && CFEqual(cf1, v7))
  {
    CFDictionaryRef v8 = sub_1001537C8(a1, cf1, a3);
    if (!v8) {
      return v3;
    }
    CFDictionaryRef v9 = v8;
    sub_1001539AC(a1, v8);
    CFDictionaryRef v10 = (unsigned int *)(a1 + 104);
    EAPOLControlCopyStateAndStatus();
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: EAPOLControlCopyStateAndStatus() returned state %d", "WiFiDeviceEAPUpdate", *v10];
    }
    unsigned int v12 = *v10;
    if (*v10 == 3) {
      goto LABEL_67;
    }
    if (v12 != 2)
    {
      if (v12)
      {
        *(_DWORD *)(a1 + 96) = 1;
        uint64_t v3 = EAPOLControlStop();
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "WiFiDeviceEAPUpdate: EAPOLControlStop result=%d", v3);
        }
      }
      else
      {
        *(_DWORD *)(a1 + 96) = 2;
        uint64_t v3 = EAPOLControlStart();
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"WiFiDeviceEAPUpdate: EAPOLControlStart result=%d" v3];
        }
      }
      if (!v3) {
        goto LABEL_70;
      }
      goto LABEL_66;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Starting...", "__WiFiDeviceEAPCopyUserInput")];
    }
    if (*(void *)(a1 + 88) && (CFDictionaryRef v16 = *(const __CFDictionary **)(a1 + 80)) != 0)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v16, @"EAPClientConfiguration");
      CFDictionaryRef v18 = Value;
      if (Value && CFDictionaryGetCount(Value))
      {
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 88));
        CFIndex v40 = Count;
        if (Count)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:message:3, "%s: required array count was %ld", "__WiFiDeviceEAPCopyUserInput", Count];
          }
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (Mutable)
          {
            uint64_t v22 = Mutable;
            if (Count >= 1)
            {
              CFIndex v23 = 0;
              CFDictionaryRef v39 = v18;
              do
              {
                CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v23);
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: key value at index %ld is %@", "__WiFiDeviceEAPCopyUserInput", v23, ValueAtIndex message];
                }
                if (ValueAtIndex)
                {
                  uint64_t v26 = CFDictionaryGetValue(v18, ValueAtIndex);
                  if (v26)
                  {
                    uint64_t v27 = v26;
                    if (qword_10027DD68) {
                      [(id)qword_10027DD68 WFLog:3, "%s: setting key-value pair in userInput for %@", "__WiFiDeviceEAPCopyUserInput", ValueAtIndex message];
                    }
                    CFDictionarySetValue(v22, ValueAtIndex, v27);
                    CFDictionaryRef v18 = v39;
                  }
                }
                ++v23;
              }
              while (v40 != v23);
            }
            if (CFDictionaryGetCount(v22))
            {
LABEL_58:
              if (qword_10027DD68)
              {
                NSErrorDomain v34 = "non-NULL";
                if (!v22) {
                  NSErrorDomain v34 = "NULL";
                }
                [((id)qword_10027DD68) WFLog:@"%s: __WiFiDeviceEAPCopyUserInput() returned a %s userInput" message:3, "%s: __WiFiDeviceEAPCopyUserInput() returned a %s userInput", "WiFiDeviceEAPUpdate", v34];
              }
              if (v22)
              {
                *(_DWORD *)(a1 + 96) = 4;
                uint64_t v3 = EAPOLControlProvideUserInput();
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:message:3, @"WiFiDeviceEAPUpdate: EAPOLControlProvideUserInput result=%d", v3];
                }
                CFRelease(v22);
                if (!v3) {
                  goto LABEL_70;
                }
LABEL_66:
                *(_DWORD *)(a1 + 96) = 0;
                uint64_t v3 = 4294963394;
LABEL_70:
                CFRelease(v9);
                return v3;
              }
LABEL_67:
              *(_DWORD *)(a1 + 96) = 1;
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3 message:"WiFiDeviceEAPUpdate: EAPOLControl already stopping"];
              }
              uint64_t v3 = 0;
              goto LABEL_70;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3 message:@"%s: CFDictionaryGetCount() is zero for userInput" : @"__WiFiDeviceEAPCopyUserInput"];
            }
            CFRelease(v22);
LABEL_57:
            uint64_t v22 = 0;
            goto LABEL_58;
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3, @"%s: Could not create the userInput dictionary", @"__WiFiDeviceEAPCopyUserInput", v37, v38];
          }
        }
        else if (qword_10027DD68)
        {
          [((id)qword_10027DD68) WFLog:message:3, @"%s: required array count was %ld, returning NULL userInput", @"__WiFiDeviceEAPCopyUserInput", 0, v38];
        }
      }
      else
      {
        if (qword_10027DD68)
        {
          if (v18) {
            NSErrorUserInfoKey v32 = "non-NULL";
          }
          else {
            NSErrorUserInfoKey v32 = "null";
          }
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: configuration (%s) was NULL or count was zero (%ld)", "__WiFiDeviceEAPCopyUserInput", v32, CFDictionaryGetCount(v18))];
        }
      }
    }
    else
    {
      if (qword_10027DD68)
      {
        CFDateRef v30 = "non-NULL";
        if (*(void *)(a1 + 88)) {
          CFRange v31 = "non-NULL";
        }
        else {
          CFRange v31 = "null";
        }
        if (!*(void *)(a1 + 80)) {
          CFDateRef v30 = "null";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: required (%s) or profile (%s) was NULL, returning null userInput", "__WiFiDeviceEAPCopyUserInput", v31, v30)];
      }
    }
    goto LABEL_57;
  }

  return sub_100152F50(a1, cf1);
}

CFDictionaryRef sub_1001537C8(uint64_t a1, CFDictionaryRef *a2, const void *a3)
{
  CFDictionaryRef v6 = sub_1000C5FF4(a2, a3);
  CFDictionaryRef v7 = v6;
  if (!a3)
  {
    if (v6)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v6, @"EAPClientConfiguration");
      if (Value)
      {
        CFDictionaryRef v9 = CFDictionaryGetValue(Value, @"UserPassword");
        CFDictionaryRef v10 = (CFDictionaryRef *)CFRetain(a2);
        if (v10)
        {
          long long v11 = v10;
          if (sub_10001BB2C((BOOL)v10))
          {
            BOOL v12 = v9 != 0;
            while (sub_1000C8798((uint64_t)v11) && !v12)
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:4, "%s: did not manage to find password for HS2.0 account %@. Looking for next matching account...", "__WiFiDeviceCopyPreparedEAPProfile", sub_10001A43C(v11) message];
              }
              uint64_t v14 = *(void *)(a1 + 16);
              uint64_t v15 = sub_100016E20(v14);
              CFDictionaryRef v16 = (CFDictionaryRef *)sub_10006B46C(v14, v15, (uint64_t)v11);
              CFRelease(v11);
              if (!v16)
              {
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:4, "%s: did not manage to find password for HS2.0 network %@. No more matching HS2.0 account", "__WiFiDeviceCopyPreparedEAPProfile", sub_10001A43C(a2) message];
                }
                return v7;
              }
              if (v7) {
                CFRelease(v7);
              }
              long long v11 = v16;
              CFDictionaryRef v17 = sub_1000C5FF4(v16, 0);
              CFDictionaryRef v7 = v17;
              BOOL v12 = v17
                 && (CFDictionaryRef v18 = (const __CFDictionary *)CFDictionaryGetValue(v17, @"EAPClientConfiguration")) != 0
                 && CFDictionaryGetValue(v18, @"UserPassword") != 0;
              if (!sub_10001BB2C((BOOL)v11)) {
                break;
              }
            }
          }
          CFRelease(v11);
        }
      }
    }
  }
  return v7;
}

void sub_1001539AC(uint64_t a1, CFTypeRef cf)
{
  uint64_t v4 = *(const void **)(a1 + 80);
  if (v4) {
    CFRelease(v4);
  }
  *(void *)(a1 + 80) = cf;
  if (cf)
  {
    CFRetain(cf);
  }
}

void sub_100153A04(uint64_t a1, CFTypeRef cf)
{
  uint64_t v4 = *(const void **)(a1 + 72);
  if (v4) {
    CFRelease(v4);
  }
  *(void *)(a1 + 72) = cf;
  if (cf)
  {
    CFRetain(cf);
  }
}

void sub_100153A5C(uint64_t a1, CFTypeRef cf)
{
  uint64_t v4 = *(const void **)(a1 + 88);
  if (v4) {
    CFRelease(v4);
  }
  *(void *)(a1 + 88) = cf;
  if (cf)
  {
    CFRetain(cf);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: eapRef required set to:\n%@", "__WiFiDeviceEAPSetRequired", *(void *)(a1 + 88) message];
    }
  }
}

intptr_t sub_100153B00(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_100153B5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

void sub_100153B64(uint64_t a1, const void *a2, int a3)
{
  if (a1)
  {
    sub_100153BC8(a1, a2, a3);
    if (!*(_DWORD *)(a1 + 96))
    {
      uint64_t v4 = *(const void **)(a1 + 72);
      if (v4) {
        CFRelease(v4);
      }
      *(void *)(a1 + 72) = 0;
      CFStringRef v5 = *(const void **)(a1 + 80);
      if (v5) {
        CFRelease(v5);
      }
      *(void *)(a1 + 80) = 0;
      CFDictionaryRef v6 = *(const void **)(a1 + 88);
      if (v6) {
        CFRelease(v6);
      }
      *(void *)(a1 + 88) = 0;
    }
  }
}

void sub_100153BC8(uint64_t a1, CFTypeRef cf1, int a3)
{
  if (a1)
  {
    uint64_t v4 = *(const void **)(a1 + 72);
    if (v4)
    {
      if (!cf1 || CFEqual(cf1, v4))
      {
        if (a3)
        {
          uint64_t v6 = *(void *)(a1 + 16);
          CFDictionaryRef v7 = (const void *)sub_100017C48(v6);
          sub_10006DCBC(v6, v7, 0, 1012, "__WiFiDeviceEAPCancel", 984);
        }
        unsigned int v8 = *(_DWORD *)(a1 + 96);
        if (v8)
        {
          if (v8 <= 4 && (CFDictionaryRef v9 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 56)) != 0)
          {
            *(_DWORD *)(a1 + 96) = 0;
            v9(a1, 4294963391, 0, *(void *)(a1 + 64));
            if (*(_DWORD *)(a1 + 96)) {
              return;
            }
          }
          else
          {
            *(_DWORD *)(a1 + 96) = 0;
          }
        }
        EAPOLControlCopyStateAndStatus();
        if ((*(_DWORD *)(a1 + 104) - 1) <= 1)
        {
          EAPOLControlStop();
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3 message:"WiFiDeviceEAPCancel: EAPOLControlStop"];
          }
        }
      }
    }
  }
}

void sub_100153CF8(uint64_t a1)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"Aborting EAP"];
    }
    uint64_t v3 = *(const void **)(a1 + 72);
    if (v3)
    {
      sub_100153B64(a1, v3, 1);
    }
  }
}

void sub_100153D78(void *a1)
{
  uint64_t v2 = (const void *)a1[9];
  if (v2)
  {
    CFRelease(v2);
    a1[9] = 0;
  }
  uint64_t v3 = (const void *)a1[10];
  if (v3)
  {
    CFRelease(v3);
    a1[10] = 0;
  }
  uint64_t v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
}

void sub_100153DC8(uint64_t a1, const __CFString *a2)
{
  *(void *)buffer = 0;
  uint64_t v10 = 0;
  if (*(void *)(a1 + 72))
  {
    CFStringGetCString(a2, buffer, 16, 0);
    if (!EAPOLControlCopyStateAndStatus())
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "EAP: eapState=%d", 0);
      }
      if (*(void *)(a1 + 80))
      {
        if (*(_DWORD *)(a1 + 96) == 1)
        {
          *(_DWORD *)(a1 + 108) = 0;
          *(void *)(a1 + 100) = 0;
          *(_DWORD *)(a1 + 96) = 2;
          uint64_t v4 = EAPOLControlStart();
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:@"WiFiDeviceEAPAssociate: EAPOLControlStart from Idle result=%d" message:3];
          }
          if (v4) {
            int v6 = -369033216;
          }
          else {
            int v6 = 0;
          }
          uint64_t v7 = v6 | v4;
          if (!v7) {
            goto LABEL_18;
          }
        }
        else
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3 message:"WiFiDeviceEAP: EAPOLControl state went Idle while joining"];
          }
          uint64_t v7 = 4294963391;
        }
        sub_1001549D8(a1, 0, v7, 0);
      }
    }
  }
LABEL_18:
  *(_DWORD *)(a1 + 104) = 0;
}

void sub_100154738(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3)
  {
    if (qword_10027DD68)
    {
      uint64_t v10 = sub_10001A43C(a3);
      long long v11 = "failed";
      if (!a5) {
        long long v11 = "succeeded";
      }
      BOOL v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"EAP", +[NSString stringWithFormat:@"EAP: Inner Association of %@ %s (%d)", v10, v11, a5]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_11:
        *(_DWORD *)buf = 136446210;
        CFDictionaryRef v16 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v12 UTF8String]] UTF8String];
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%{public}s", buf, 0xCu);
      }
    }
  }
  else if (qword_10027DD68)
  {
    long long v13 = "failed";
    if (!a5) {
      long long v13 = "succeeded";
    }
    BOOL v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"EAP", +[NSString stringWithFormat:@"EAP: Inner Association %s (%d)", v13, a5]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_11;
    }
  }
  if (*(_DWORD *)(a6 + 96) == 3)
  {
    if (a5)
    {
      sub_1001549D8(a6, 0, a5, 0);
    }
    else
    {
      *(_DWORD *)(a6 + 96) = 4;
      uint64_t v14 = sub_100016E20(*(void *)(a6 + 16));
      sub_100153DC8(a6, v14);
    }
  }
}

void sub_1001549D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(a1 + 96) = 0;
  switch(a3)
  {
    case 0:
LABEL_5:
      uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 56);
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 64);
        v7(a1, a3, a2, v8);
      }
      return;
    case 0xEA010014:
      return;
    case 0xEA010003:
      *(_DWORD *)(a1 + 96) = 5;
      goto LABEL_5;
  }
  sub_100153BC8(a1, 0, a4);
  CFDictionaryRef v9 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 56);
  if (v9) {
    v9(a1, a3, a2, *(void *)(a1 + 64));
  }
  if (!*(_DWORD *)(a1 + 96))
  {
    uint64_t v10 = *(const void **)(a1 + 72);
    if (v10) {
      CFRelease(v10);
    }
    *(void *)(a1 + 72) = 0;
    long long v11 = *(const void **)(a1 + 80);
    if (v11) {
      CFRelease(v11);
    }
    *(void *)(a1 + 80) = 0;
    BOOL v12 = *(const void **)(a1 + 88);
    if (v12) {
      CFRelease(v12);
    }
    *(void *)(a1 + 88) = 0;
  }
}

void sub_100154E88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100154ED8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100154F58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100154FD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100155894(void *a1)
{
  if (a1[4] && a1[5])
  {
    id v3 = [*(id *)(a1[6] + 48) objectForKeyedSubscript:];
    if (!v3)
    {
      id v3 = +[NSMutableDictionary dictionary];
      [*(id *)(a1[6] + 48) setObject:v3 forKeyedSubscript:a1[5]];
    }
    [v3 setObject:a1[7] forKeyedSubscript:a1[4]];
  }
}

void sub_100155E14(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (!a4)
  {
    if (a5)
    {
      CFDictionaryRef v7 = sub_10000E5B8(a5);
      if (v7)
      {
        CFDictionaryRef v8 = v7;
        [*(id *)(a1 + 32) __setPeerAssistedDiscoveryNetwork:interfaceName:UUID:v7, *(void *)(a1 + 40), [*(id *)(a1 + 48) UUID]];
        CFRelease(v8);
      }
    }
  }
  if ([*(id *)(a1 + 56) response])
  {
    CFDictionaryRef v9 = (void (**)(id, NSError *, void))[*(id *)(a1 + 56) response];
    if (a4) {
      uint64_t v10 = +[NSError errorWithDomain:CWFManagerErrorDomain code:a4 userInfo:0];
    }
    else {
      uint64_t v10 = 0;
    }
    v9[2](v9, v10, 0);
  }
  long long v11 = *(void **)(a1 + 56);
}

void sub_100155EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (**a6)(void, void, void, void, void, void))
{
  if (a6)
  {
    a6[2](a6, a1, a2, a3, a4, a5);
    _Block_release(a6);
  }
}

void sub_10015619C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a4) {
    [*(id *)(a1 + 32) __setPeerAssistedDiscoveryNetwork:interfaceName:UUID:0, *(void *)(a1 + 40), [*(id *)(a1 + 48) UUID]];
  }
  if ([*(id *)(a1 + 56) response])
  {
    int v6 = (void (**)(id, NSError *, void))[*(id *)(a1 + 56) response];
    if (a4) {
      CFDictionaryRef v7 = +[NSError errorWithDomain:CWFManagerErrorDomain code:a4 userInfo:0];
    }
    else {
      CFDictionaryRef v7 = 0;
    }
    v6[2](v6, v7, 0);
  }
  CFDictionaryRef v8 = *(void **)(a1 + 56);
}

void sub_10015625C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void, void, void, void))
{
  if (a5)
  {
    a5[2](a5, a1, a2, a3, a4);
    _Block_release(a5);
  }
}

void sub_100156708(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  if ([a4 response])
  {
    CFDictionaryRef v7 = (void (**)(id, NSError *, void))[a4 response];
    if (a3) {
      CFDictionaryRef v8 = +[NSError errorWithDomain:CWFManagerErrorDomain code:a3 userInfo:0];
    }
    else {
      CFDictionaryRef v8 = 0;
    }
    v7[2](v7, v8, 0);
  }
}

void sub_10015872C(uint64_t a1, const void *a2, void *a3, uint64_t a4, int a5, void *a6)
{
  id v13 = [a6 info];
  id v14 = [v13 objectForKeyedSubscript:CWFXPCAssocParamsKey];
  if (CWFGetOSLog()) {
    uint64_t v15 = CWFGetOSLog();
  }
  else {
    uint64_t v15 = &_os_log_default;
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    int v43 = 67109120;
    LODWORD(v44) = a5;
    LODWORD(v42) = 8;
    id v41 = &v43;
    _os_log_send_and_compose_impl();
  }
  if (a5)
  {
    CFDictionaryRef v16 = +[NSError errorWithDomain:CWFManagerErrorDomain code:a5 userInfo:a4];
    goto LABEL_47;
  }
  if ([v14 rememberUponSuccessfulAssociation])
  {
    id v17 = [[sub_10001E404((uint64_t)a3, @"WiFiManagerKnownNetworksEventType") intValue];
    sub_1000C995C(a3, 1, +[NSDate date]);
    CFDictionaryRef v18 = sub_10010A748(a1, a3);
    if (CWFGetOSLog()) {
      long long v19 = CWFGetOSLog();
    }
    else {
      long long v19 = &_os_log_default;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      long long v20 = sub_10001A43C(v18);
      int v43 = 136315394;
      long long v44 = "__WiFiDeviceManagerAssociationCallback";
      __int16 v45 = 2112;
      long long v46 = v20;
      LODWORD(v42) = 22;
      id v41 = &v43;
      _os_log_send_and_compose_impl();
    }
    if (v18)
    {
      if (sub_1000CD794((uint64_t)a3) == 2) {
        sub_10009B1AC((uint64_t)[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") getWiFiManager], a3, 1u);
      }
      if (sub_10001E404((uint64_t)a3, @"WiFiNetworkNANServiceID")) {
        sub_10009B1AC((uint64_t)[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") getWiFiManager], a3, 1u);
      }
      sub_10010C8FC(a1, a3);
    }
    else
    {
      long long v21 = sub_10000E5D0(a1, a2);
      if (v21)
      {
        uint64_t v22 = v21;
        sub_1000CA19C(a3, v21);
        CFRelease(v22);
      }
      if (_os_feature_enabled_impl())
      {
        id v23 = sub_100005420(a1);
        if (v23)
        {
          uint64_t v24 = v23;
          int v25 = [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") getWiFiManager];
          [v24 coordinate];
          CLLocationDegrees v27 = v26;
          [v24 coordinate];
          CLLocationDegrees v29 = v28;
          [v24 horizontalAccuracy];
          sub_1000A32E4(v25, a3, v27, v29, v30, [v24 timestamp]);
        }
        if (sub_10011271C(a1))
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CFDateRef v32 = CFDateCreate(kCFAllocatorDefault, Current);
          if (v32)
          {
            CFDateRef v33 = v32;
            sub_1000CAA00(a3, v32);
            CFRelease(v33);
          }
        }
      }
      if (objc_msgSend(objc_msgSend(v14, "knownNetworkProfile", v41, v42), "isPublicAirPlayNetwork")) {
        sub_1000D2F80((uint64_t)a3, (int)[objc_msgSend(objc_msgSend(v14, "knownNetworkProfile"), "isPublicAirPlayNetwork")]);
      }
      sub_100093634([+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") getWiFiManager], a3, v17);
      BOOL v34 = sub_10009010C([+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") getWiFiManager])&& (sub_10010C8FC(a1, a3) & 1) != 0;
      sub_10012B830(a1, a3, v34);
      sub_10012CAF4(a1);
      CFDictionaryRef v18 = CFRetain(a3);
      if (CWFGetOSLog()) {
        unsigned int v35 = CWFGetOSLog();
      }
      else {
        unsigned int v35 = &_os_log_default;
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        long long v36 = sub_10001A43C(v18);
        int v43 = 136315394;
        long long v44 = "__WiFiDeviceManagerAssociationCallback";
        __int16 v45 = 2112;
        long long v46 = v36;
        LODWORD(v42) = 22;
        id v41 = &v43;
        _os_log_send_and_compose_impl();
      }
    }
    if (sub_1000C8798((uint64_t)v18) || sub_1000C80B4((BOOL)v18))
    {
      CFStringRef v37 = (const __CFString *)[v14 EAPCredentials:v41 password:v42];
      if (v37 || (CFStringRef v37 = (const __CFString *)[v14 password]) != 0) {
        sub_1000C93E0(v18, v37);
      }
      if (!v18) {
        goto LABEL_46;
      }
    }
    else
    {
      if (CWFGetOSLog()) {
        CFDictionaryRef v39 = CWFGetOSLog();
      }
      else {
        CFDictionaryRef v39 = &_os_log_default;
      }
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        CFIndex v40 = sub_10001A43C(v18);
        int v43 = 136315650;
        long long v44 = "__WiFiDeviceManagerAssociationCallback";
        __int16 v45 = 2112;
        long long v46 = v40;
        __int16 v47 = 2112;
        long long v48 = v18;
        LODWORD(v42) = 32;
        id v41 = &v43;
        _os_log_send_and_compose_impl();
      }
      sub_1000C94E0(v18);
      if (!v18) {
        goto LABEL_46;
      }
    }
    CFRelease(v18);
  }
LABEL_46:
  CFDictionaryRef v16 = 0;
LABEL_47:
  if (objc_msgSend(a6, "response", v41, v42))
  {
    uint64_t v38 = (void (**)(id, NSError *, void))[a6 response];
    v38[2](v38, v16, 0);
  }
}

void sub_100159614(uint64_t a1, uint64_t a2, const __CFArray *a3, int a4, void *a5)
{
  if (a4)
  {
    if ([a5 response])
    {
      uint64_t v10 = (void (**)(id, NSError *, void))[a5 response];
      v10[2](v10, +[NSError errorWithDomain:CWFManagerErrorDomain code:a4 userInfo:0], 0);
    }
  }
  else
  {
    id v11 = [a5 info];
    id v12 = [v11 objectForKeyedSubscript:CWFXPCScanParamsKey];
    if (_os_feature_enabled_impl())
    {
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      id v13 = [v12 channels];
      id v14 = [v13 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = *(void *)v22;
        while (2)
        {
          for (CFIndex i = 0; i != v15; CFIndex i = (char *)i + 1)
          {
            if (*(void *)v22 != v16) {
              objc_enumerationMutation(v13);
            }
            if ([*(id *)(*((void *)&v21 + 1) + 8 * i) band] == 2)
            {
              if ([v12 mergeScanResults]) {
                sub_10010C2FC(a1, a3);
              }
              goto LABEL_16;
            }
          }
          id v15 = [v13 countByEnumeratingWithState:&v21 objects:v25 count:16];
          if (v15) {
            continue;
          }
          break;
        }
      }
      [v12 mergeScanResults];
    }
LABEL_16:
    id v18 = +[WiFiXPCManager __filteredScanResults:a3 scanParameters:v12];
    id v19 = +[NSMutableDictionary dictionary];
    [v19 setObject:v18 forKeyedSubscript:CWFXPCResultKey];
    if ([a5 response])
    {
      long long v20 = (void (**)(id, void, id))[a5 response];
      v20[2](v20, 0, v19);
    }
  }
}

void sub_100159B80(uint64_t a1, uint64_t a2, const __CFArray *a3, int a4, void *a5)
{
  if (a4)
  {
    if ([a5 response])
    {
      CFDictionaryRef v9 = (void (**)(id, NSError *, void))[a5 response];
      v9[2](v9, +[NSError errorWithDomain:CWFManagerErrorDomain code:a4 userInfo:0], 0);
    }
  }
  else
  {
    id v10 = +[NSMutableArray array];
    if (a3 && CFArrayGetCount(a3) >= 1)
    {
      CFIndex v11 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v11);
        if (ValueAtIndex)
        {
          id v13 = sub_10000AD1C((uint64_t)ValueAtIndex);
          if (v13) {
            [v10 addObject:v13];
          }
        }
        ++v11;
      }
      while (CFArrayGetCount(a3) > v11);
    }
    id v14 = [a5 info];
    [v14 objectForKeyedSubscript:CWFXPCANQPParamsKey];
    uint64_t v15 = CWFFilteredANQPResults();
    id v16 = +[NSMutableDictionary dictionary];
    [v16 setObject:v15 forKeyedSubscript:CWFXPCResultKey];
    if ([a5 response])
    {
      id v17 = (void (**)(id, void, id))[a5 response];
      v17[2](v17, 0, v16);
    }
  }
}

void sub_10015A034(uint64_t a1, uint64_t a2, const __CFArray *a3, int a4, void *a5)
{
  if (a4)
  {
    if ([a5 response])
    {
      CFDictionaryRef v9 = (void (**)(id, NSError *, void))[a5 response];
      v9[2](v9, +[NSError errorWithDomain:CWFManagerErrorDomain code:a4 userInfo:0], 0);
    }
  }
  else
  {
    if (a3)
    {
      id v10 = +[NSMutableArray array];
      if (CFArrayGetCount(a3) >= 1)
      {
        int v25 = v8;
        double v26 = a5;
        CFIndex v11 = 0;
        CFArrayRef v27 = a3;
        double v28 = v10;
        do
        {
          CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a3, v11);
          if (ValueAtIndex)
          {
            id v13 = ValueAtIndex;
            CFIndex v30 = v11;
            id v14 = objc_alloc_init((Class)CWFRangingResult);
            [v14 setMACAddress:[v13 objectForKeyedSubscript:@"STATION_MAC"]];
            [v14 setIdentifier:[v13 objectForKeyedSubscript:@"RANGING_TOKEN_ID"]];
            [v13[@"RANGING_DISTANCE"] doubleValue];
            [v14 setDistance:];
            [objc_msgSend(v13, "objectForKeyedSubscript:", @"RANGING_SD") doubleValue];
            [v14 setStandardDeviation:];
            [v14 setStatus:[objc_msgSend(objc_msgSend(v13, "objectForKeyedSubscript:", @"RANGING_STATUS"), "intValue")];
            CLLocationDegrees v29 = v14;
            [v14 setNumberOfValidMeasurements:[objc_msgSend(objc_msgSend(v13, "objectForKeyedSubscript:", @"RANGING_VALID_COUNT"), "unsignedIntegerValue") unsignedIntegerValue]];
            id v15 = +[NSMutableArray array];
            id v16 = [v13 objectForKeyedSubscript:@"RANGING_RESULTS"];
            long long v31 = 0u;
            long long v32 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            id v17 = [v16 countByEnumeratingWithState:&v31 objects:v35 count:16];
            if (v17)
            {
              id v18 = v17;
              uint64_t v19 = *(void *)v32;
              do
              {
                long long v20 = 0;
                do
                {
                  if (*(void *)v32 != v19) {
                    objc_enumerationMutation(v16);
                  }
                  long long v21 = *(void **)(*((void *)&v31 + 1) + 8 * (void)v20);
                  id v22 = objc_alloc_init((Class)CWFRangingMeasurement);
                  [v22 setRoundTripTime:[objc_msgSend(objc_msgSend(v21, "objectForKeyedSubscript:", @"RANGING_RTT"), "integerValue")];
                  [v22 setRSSI:[objc_msgSend(objc_msgSend(v21, "objectForKeyedSubscript:", @"RANGING_RSSI"), "integerValue") integerValue]];
                  [v22 setChannel:[v21 objectForKeyedSubscript:@"RANGING_CHANNEL"]];
                  [v22 setSNR:[objc_msgSend(objc_msgSend(v21, "objectForKeyedSubscript:", @"RANGING_SNR"), "integerValue") integerValue]];
                  [v22 setCoreID:[objc_msgSend(objc_msgSend(v21, "objectForKeyedSubscript:", @"RANGING_CORE_ID"), "unsignedIntegerValue") unsignedIntegerValue]];
                  [v15 addObject:v22];
                  long long v20 = (char *)v20 + 1;
                }
                while (v18 != v20);
                id v18 = [v16 countByEnumeratingWithState:&v31 objects:v35 count:16];
              }
              while (v18);
            }
            [v29 setMeasurements:v15, v25, v26];
            id v10 = v28;
            [v28 addObject:v29];
            a3 = v27;
            CFIndex v11 = v30;
          }
          ++v11;
        }
        while (CFArrayGetCount(a3) > v11);
        CFDictionaryRef v8 = v25;
        a5 = v26;
      }
    }
    else
    {
      id v10 = 0;
    }
    id v23 = +[NSMutableDictionary dictionary];
    [v23 setObject:v10 forKeyedSubscript:CWFXPCResultKey];
    if ([a5 response])
    {
      long long v24 = (void (**)(id, void, id))[a5 response];
      v24[2](v24, 0, v23);
    }
  }
}

id sub_10015ACB0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) response];
  if (result)
  {
    id v3 = (uint64_t (*)(void))*((void *)[*(id *)(a1 + 32) response] + 2);
    return (id)v3();
  }
  return result;
}

void sub_10015B9FC(id a1)
{
  qword_10027DBD0 = objc_alloc_init(WiFiXPCManager);
}

void sub_10015CE84(uint64_t a1, uint64_t a2, void *a3, int a4, void *a5)
{
  if (a4)
  {
    if ([a5 response])
    {
      CFDictionaryRef v9 = (void (**)(id, NSError *, void))[a5 response];
      v9[2](v9, +[NSError errorWithDomain:CWFManagerErrorDomain code:a4 userInfo:0], 0);
    }
  }
  else
  {
    id v10 = objc_alloc_init((Class)CWFSensingResult);
    [v10 setData:[a3 copy]];
    id v11 = +[NSMutableDictionary dictionary];
    [v11 setObject:v10 forKeyedSubscript:CWFXPCResultKey];
    if ([a5 response])
    {
      id v12 = (void (**)(id, void, id))[a5 response];
      v12[2](v12, 0, v11);
    }
  }
}

void sub_10015D9CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if ([*(id *)(a1 + 32) response])
  {
    int v6 = (void (**)(id, NSError *, void))[*(id *)(a1 + 32) response];
    if (a4) {
      CFDictionaryRef v7 = +[NSError errorWithDomain:CWFManagerErrorDomain code:a4 userInfo:0];
    }
    else {
      CFDictionaryRef v7 = 0;
    }
    v6[2](v6, v7, 0);
  }
  CFDictionaryRef v8 = *(void **)(a1 + 32);
}

void sub_10015DBD4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if ([*(id *)(a1 + 32) response])
  {
    int v6 = (void (**)(id, NSError *, void))[*(id *)(a1 + 32) response];
    if (a4) {
      CFDictionaryRef v7 = +[NSError errorWithDomain:CWFManagerErrorDomain code:a4 userInfo:0];
    }
    else {
      CFDictionaryRef v7 = 0;
    }
    v6[2](v6, v7, 0);
  }
  CFDictionaryRef v8 = *(void **)(a1 + 32);
}

void sub_10015DD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10015DDB0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 56) objectForKeyedSubscript:[objc_msgSend(*(id *)(a1 + 40), "requestParameters") interfaceName] copy];
}

void sub_10015E7B0(id a1)
{
  if (objc_opt_class()) {
    qword_10027DBE0 = objc_alloc_init(WiFiAppStateManager);
  }
}

void sub_10015E844(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    [a2 externalAppUnregistered:a5];
  }
}

void sub_10015EC3C(uint64_t a1)
{
  (*(void (**)(void, void))(*(void *)(a1 + 32) + 120))(*(void *)(*(void *)(a1 + 32) + 112), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
  uint64_t v2 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

uint64_t sub_10015ED70(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 80))(*(void *)(*(void *)(a1 + 32) + 72), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

void sub_10015ED84(uint64_t a1)
{
  (*(void (**)(void, void))(*(void *)(a1 + 32) + 136))(*(void *)(*(void *)(a1 + 32) + 128), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
  uint64_t v2 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_10015EEA4(uint64_t a1)
{
  CFNumberRef v2 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 40));
  (*(void (**)(void, CFNumberRef))(*(void *)(a1 + 32) + 96))(*(void *)(*(void *)(a1 + 32) + 88), v2);
  if (v2)
  {
    CFRelease(v2);
  }
}

void sub_10015EF0C(uint64_t a1)
{
  CFNumberRef v2 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 40));
  (*(void (**)(void, CFNumberRef))(*(void *)(a1 + 32) + 96))(*(void *)(*(void *)(a1 + 32) + 88), v2);
  if (v2)
  {
    CFRelease(v2);
  }
}

WiFiDriverTriggeredTTR *sub_10015F2B0(uint64_t a1)
{
  id result = [[WiFiDriverTriggeredTTR alloc] initWithWiFiManagerwithStringRef:*(void *)(a1 + 32) withInterval:*(double *)(a1 + 40)];
  qword_10027DBF0 = (uint64_t)result;
  return result;
}

void sub_10015F834(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

id sub_10015F854(uint64_t a1, uint64_t a2, void *a3)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s _WiFiDriverTriggeredTTRHandler askToLaunchTapToRadarWithMessage result:%@, error:%@", "-[WiFiDriverTriggeredTTR WiFiDriverTriggeredTTRForReason:]_block_invoke", a2, a3 message];
  }
  id result = [[[a3 userInfo] objectForKey:@"deviceNotInteractive"];
  if (result)
  {
    id result = [[[a3 userInfo] objectForKey:@"deviceNotInteractive"] boolValue];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (_BYTE)result;
  }
  return result;
}

id sub_10015F908(uint64_t a1, uint64_t a2, void *a3)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s WiFiDextCrashSoftError tapToRadarWithURL result:%@, error:%@", "-[WiFiDriverTriggeredTTR WiFiDriverTriggeredTTRForReason:]_block_invoke_2", a2, a3 message];
  }
  id result = [[objc_msgSend(a3, "userInfo") objectForKey:@"deviceNotInteractive"];
  if (result)
  {
    id result = [[[a3 userInfo] objectForKey:@"deviceNotInteractive"] boolValue];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (_BYTE)result;
  }
  return result;
}

uint64_t sub_10015F9E4()
{
  uint64_t result = qword_10027DC00;
  if (!qword_10027DC00)
  {
    pthread_once(&stru_10027CE08, (void (*)(void))sub_10015FA2C);
    return qword_10027DC00;
  }
  return result;
}

uint64_t sub_10015FA2C()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_10027DC00 = result;
  return result;
}

uint64_t sub_10015FA54(const __CFAllocator *a1, CFIndex a2)
{
  if (!qword_10027DC00) {
    pthread_once(&stru_10027CE08, (void (*)(void))sub_10015FA2C);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v5 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(void *)(Instance + 24) = a2;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, a2, &kCFTypeArrayCallBacks);
    *(void *)(v5 + 16) = Mutable;
    if (Mutable
      && (CFMutableSetRef v7 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks), (*(void *)(v5 + 80) = v7) != 0))
    {
      *(unsigned char *)(v5 + 72) = 0;
    }
    else
    {
      CFRelease((CFTypeRef)v5);
      return 0;
    }
  }
  return v5;
}

uint64_t sub_10015FB30(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 32) = a2;
  *(void *)(result + 40) = a3;
  return result;
}

CFIndex sub_10015FB38(uint64_t a1)
{
  return CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
}

uint64_t sub_10015FB40(uint64_t a1, const UInt8 *a2, CFIndex a3, void *a4)
{
  uint64_t result = 4294963394;
  if (a2 && a3)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
    CFIndex v10 = *(void *)(a1 + 24);
    if (v10 && Count >= v10) {
      return 4294963394;
    }
    uint64_t v11 = sub_10015FC60(a1, 0);
    CFMutableArrayRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, a3 + 8);
    if (!Mutable)
    {
      return 4294963394;
    }
    else
    {
      id v13 = Mutable;
      ++qword_10027DC08;
      CFDataAppendBytes(Mutable, (const UInt8 *)&qword_10027DC08, 8);
      CFDataAppendBytes(v13, a2, a3);
      CFDataSetLength(v13, a3 + 8);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), v13);
      if (a4) {
        *a4 = qword_10027DC08;
      }
      if (!v11)
      {
        *(void *)(a1 + 88) = sub_10000D990((uint64_t)"WiFiCommandQueueEnqueue");
        sub_10015FD64(a1, 1);
      }
      CFRelease(v13);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10015FC60(uint64_t a1, uint64_t *a2)
{
  *(void *)buffer = 0;
  if (a1 && (CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16)), Count >= 1))
  {
    CFIndex v7 = Count;
    uint64_t v5 = 0;
    CFIndex v8 = 0;
    uint64_t v6 = -1;
    do
    {
      CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v8);
      if (!ValueAtIndex) {
        break;
      }
      v15.location = 0;
      v15.length = 8;
      CFDataGetBytes(ValueAtIndex, v15, buffer);
      CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, buffer);
      if (!v10) {
        break;
      }
      CFNumberRef v11 = v10;
      int v12 = CFSetContainsValue(*(CFSetRef *)(a1 + 80), v10);
      if (!v12) {
        ++v5;
      }
      if (v12 == 0 && v6 == -1) {
        uint64_t v6 = v8;
      }
      CFRelease(v11);
      ++v8;
    }
    while (v7 != v8);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = -1;
  }
  if (a2) {
    *a2 = v6;
  }
  return v5;
}

uint64_t sub_10015FD64(uint64_t a1, int a2)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  CFIndex v5 = Count;
  if (Count < 11)
  {
    if (!Count) {
      return 0;
    }
    if (!a2)
    {
LABEL_12:
      sub_10015FEFC(a1);
      return 0;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: cmdQueue size %ld exceeding recurse limit of %ld. Back to runloop.", "WiFiCommandQueueSignal", v5, 10];
    }
  }
  if (!*(void *)(a1 + 48)) {
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: timer is running. Will not signal cmdQueue", "WiFiCommandQueueSignal"];
    }
  }
  else
  {
    CFRetain((CFTypeRef)a1);
    CFIndex v8 = *(NSObject **)(a1 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10015FEB8;
    block[3] = &unk_10023EAF8;
    void block[4] = a1;
    dispatch_async(v8, block);
  }
  return 0;
}

void sub_10015FEB8(uint64_t a1)
{
  CFNumberRef v2 = *(void **)(a1 + 32);
  if (v2[6])
  {
    sub_10015FEFC((uint64_t)v2);
    CFNumberRef v2 = *(void **)(a1 + 32);
  }

  CFRelease(v2);
}

void sub_10015FEFC(uint64_t a1)
{
  if (sub_10015FC60(a1, 0))
  {
    CFNumberRef v2 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 40);
      v2(a1, v3);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s:%d cmdQueue is EMPTY!!!!", "__WiFiCommandQueueCallback", 506)];
    }
  }
}

uint64_t sub_10015FFBC(uint64_t a1, void *a2, size_t a3, void *a4)
{
  __src = 0;
  size_t __len = a3;
  uint64_t v10 = 0;
  if (a1)
  {
    CFIndex v7 = *(NSObject **)(a1 + 64);
    if (v7) {
      dispatch_source_set_timer(v7, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
  }
  if (!sub_10015FC60(a1, 0))
  {
    uint64_t result = 4294963394;
    if (!a4) {
      return result;
    }
    goto LABEL_14;
  }
  if (a2) {
    p_src = &__src;
  }
  else {
    p_src = 0;
  }
  if (!sub_10000D7FC(a1, p_src, (CFIndex *)&__len, &v10) && __src) {
    memmove(a2, __src, __len);
  }
  uint64_t result = sub_1001600B8(a1, 0, v10);
  if (!result)
  {
    sub_10015FD64(a1, 0);
    uint64_t result = 0;
  }
  if (a4) {
LABEL_14:
  }
    *a4 = v10;
  return result;
}

void sub_100160098(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 64);
    if (v1) {
      dispatch_source_set_timer(v1, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
  }
}

uint64_t sub_1001600B8(uint64_t a1, void *a2, uint64_t a3)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  if (Count < 1)
  {
LABEL_6:
    uint64_t v10 = 4294963394;
    if (!Count) {
      return v10;
    }
  }
  else
  {
    CFIndex v7 = 0;
    while (1)
    {
      *(void *)buffer = 0xAAAAAAAAAAAAAAAALL;
      CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v7);
      if (ValueAtIndex)
      {
        CFDataRef v9 = ValueAtIndex;
        v19.location = 0;
        v19.length = 8;
        CFDataGetBytes(ValueAtIndex, v19, buffer);
        if (*(void *)buffer == a3) {
          break;
        }
      }
      if (Count == ++v7) {
        goto LABEL_6;
      }
    }
    if (a2)
    {
      CFNumberRef v11 = CFDataGetBytePtr(v9) + 8;
      CFIndex Length = CFDataGetLength(v9);
      memcpy(a2, v11, Length - 8);
    }
    CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), v7, kCFNull);
    CFArrayRef v13 = *(const __CFArray **)(a1 + 16);
    v20.length = CFArrayGetCount(v13);
    v20.location = 0;
    FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v13, v20, kCFNull);
    if (FirstIndexOfValue != -1)
    {
      for (CFIndex i = FirstIndexOfValue; i != -1; CFIndex i = CFArrayGetFirstIndexOfValue(v16, v21, kCFNull))
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), i);
        CFArrayRef v16 = *(const __CFArray **)(a1 + 16);
        v21.length = CFArrayGetCount(v16);
        v21.location = 0;
      }
    }
    uint64_t v10 = 0;
  }
  if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 16))) {

  }
  return v10;
}

void sub_10016022C(uint64_t a1)
{
  CFNumberRef v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_time_t v3 = dispatch_time(0, 500000000);
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  *(unsigned char *)(a1 + 72) = 1;
}

void sub_100160280(uint64_t a1)
{
  CFNumberRef v2 = *(NSObject **)(a1 + 56);
  if (v2) {
    dispatch_source_set_timer(v2, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  *(unsigned char *)(a1 + 72) = 0;
}

void sub_1001602BC(void *context, dispatch_queue_t queue, void (__cdecl *a3)(void *), void *a4)
{
  *((void *)context + 6) = queue;
  CFIndex v8 = *((void *)context + 7);
  if (v8
    || (CFIndex v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, queue),
        (*((void *)context + 7) = v8) != 0))
  {
    dispatch_set_context(v8, context);
    dispatch_source_set_event_handler_f(*((dispatch_source_t *)context + 7), (dispatch_function_t)sub_1001603A4);
    dispatch_activate(*((dispatch_object_t *)context + 7));
  }
  CFDataRef v9 = *((void *)context + 8);
  if (v9
    || (CFDataRef v9 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, queue),
        (*((void *)context + 8) = v9) != 0))
  {
    dispatch_set_context(v9, a4);
    dispatch_source_set_event_handler_f(*((dispatch_source_t *)context + 8), a3);
    uint64_t v10 = *((void *)context + 8);
    dispatch_activate(v10);
  }
}

void sub_1001603A4(uint64_t a1)
{
  *(unsigned char *)(a1 + 72) = 0;
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: retrying command", "__WiFiCommandQueueTimerCallback")];
  }

  sub_10015FEFC(a1);
}

void sub_100160420(uint64_t a1)
{
  CFNumberRef v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 56));
    *(void *)(a1 + 56) = 0;
  }
  dispatch_time_t v3 = *(NSObject **)(a1 + 64);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(a1 + 64));
    *(void *)(a1 + 64) = 0;
  }
  *(void *)(a1 + 48) = 0;
}

void sub_100160474(uint64_t a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      CFIndex v5 = 0;
      while (1)
      {
        unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
        CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v5);
        if (ValueAtIndex)
        {
          v11.location = 0;
          v11.length = 8;
          CFDataGetBytes(ValueAtIndex, v11, (UInt8 *)&v9);
          if (valuePtr == v9)
          {
            CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
            if (v7) {
              break;
            }
          }
        }
        if (v4 == ++v5) {
          return;
        }
      }
      CFNumberRef v8 = v7;
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 80), v7);
      CFRelease(v8);
    }
  }
}

void sub_100160548(uint64_t a1)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"Resetting deferred command queue IDs"];
    }
    CFIndex idx = -1;
    uint64_t v3 = sub_10015FC60(a1, &idx);
    CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 80));
    if (v3)
    {
      CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), 0, ValueAtIndex);
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), idx + 1);
    }
    else
    {
      sub_10015FD64(a1, 0);
    }
  }
}

void sub_100160608(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    CFNumberRef v2 = *(NSObject **)(a1 + 64);
    if (v2)
    {
      dispatch_time_t v3 = dispatch_time(0, 1000000000 * a2);
      dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
  }
}

void sub_100160670(uint64_t a1)
{
  CFNumberRef v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  dispatch_time_t v3 = *(const void **)(a1 + 80);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 80) = 0;
  }
}

uint64_t sub_10016091C()
{
  uint64_t result = _sl_dlopen();
  qword_10027DC10 = result;
  return result;
}

void sub_100161088(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1001610A4(uint64_t a1, void *a2, uint64_t a3)
{
  CFIndex v4 = (id *)(a1 + 32);
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  [WeakRetained _kvsDidChangeWithKeys:v5 isExternal:a3];
}

void sub_100161764(id a1)
{
  if (objc_opt_class())
  {
    id v1 = [[WiFiManagerAnalytics alloc] _initPrivate];
    uint64_t v2 = qword_10027DC18;
    qword_10027DC18 = (uint64_t)v1;
    _objc_release_x1(v1, v2);
  }
}

void sub_1001618A0(id a1, id a2, NSError *a3)
{
  id v6 = a2;
  CFIndex v4 = a3;
  if (v4)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Failed to register for WAGroupTypeWiFi with the WA daemon (wifianalyticsd). Error code: %ld. *** All message/metric submission is likely broken.", -[NSError code](v4, "code"));
    }
  }
}

void sub_10016193C(id a1, id a2, NSError *a3)
{
  id v6 = a2;
  CFIndex v4 = a3;
  if (v4)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Failed to register for WAGroupTypeWiFi with the WA daemon (wifianalyticsd). Error code: %ld. *** All message/metric submission is likely broken.", -[NSError code](v4, "code"));
    }
  }
}

void sub_1001619D8(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Failed to register for WAGroupTypeWiFi with the WA daemon (wifianalyticsd). Error code: %ld. *** All message/metric submission is likely broken.", objc_msgSend(v5, "code"));
    }
  }
  else
  {
    [*(id *)(a1 + 32) setHasRegisteredWithDaemon:1];
  }
}

void sub_100161C8C(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if ([v5 code] == (id)9009)
  {
    [*(id *)(a1 + 32) _register];
  }
  else
  {
    id v7 = (void *)qword_10027DD68;
    if (v5)
    {
      if (qword_10027DD68)
      {
        CFNumberRef v8 = [*(id *)(a1 + 40) key];
        [v7 WFLog:4, "FAILED to submit GeoServices message with key: %@. Error: %@", v8, v5 message];
      }
    }
    else if (qword_10027DD68)
    {
      [((id)qword_10027DD68) WFLog:3 message:@"%s Successfully submitted GEOWiFiConnectionQuality instance" arguments:@"-[WiFiManagerAnalytics submitGeoServicesMessage:]_block_invoke"];
    }
  }
}

void sub_100161E30(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id v7 = (void *)qword_10027DD68;
  if (v5)
  {
    if (qword_10027DD68)
    {
      CFNumberRef v8 = [*(id *)(a1 + 32) key];
      [v7 WFLog:4, "FAILED to submit datapath diagnostics message with key: %@. Error: %@", v8, v5 message];
    }
  }
  else if (qword_10027DD68)
  {
    [((id)qword_10027DD68) WFLog:@"%s Successfully submitted WiFiDiagnostics instance" :message:3 :@"-[WiFiManagerAnalytics triggerDatapathDiagnosticsNoReply:]_block_invoke"];
  }
}

void sub_100161FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100162000(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([v5 code] == (id)9009)
  {
    [WeakRetained _register];
  }
  else if (v5)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"FAILED to  set Device Analytics config."];
    }
  }
}

void sub_10016216C(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (v5)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Failed to trigger perf study! Error: %@ -  %s", v5, "-[WiFiManagerAnalytics getDeviceAnalyticsConfigurationWithCompletion:]_block_invoke" message];
    }
LABEL_4:
    id v7 = 0;
    goto LABEL_7;
  }
  if (!v10)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s result is nil", "-[WiFiManagerAnalytics getDeviceAnalyticsConfigurationWithCompletion:]_block_invoke", v9);
    }
    goto LABEL_4;
  }
  id v7 = +[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:");
LABEL_7:
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v7);
  }
}

void sub_100162330(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  if (v5)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Failed to trigger DeviceAnalyticsStore! Error: %@ -  %s", v5, "-[WiFiManagerAnalytics triggerDeviceAnalyticsStoreMigrationWithCompletion:]_block_invoke" message];
    }
    if ([v5 code] == (id)9009) {
      [*(id *)(a1 + 32) _register];
    }
LABEL_15:
    id v7 = 0;
    goto LABEL_16;
  }
  if (!v12)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s result for triggerDeviceAnalyticsStoreMigration is nil", "-[WiFiManagerAnalytics triggerDeviceAnalyticsStoreMigrationWithCompletion:]_block_invoke");
    }
    goto LABEL_15;
  }
  id v7 = [v12 BOOLValue];
  if (qword_10027DD68)
  {
    uint64_t v9 = "NO";
    if (v7) {
      uint64_t v9 = "YES";
    }
    [((id)qword_10027DD68) WFLog:@"%s triggerDeviceAnalyticsStoreMigration success? %s" message:4, "-[WiFiManagerAnalytics triggerDeviceAnalyticsStoreMigrationWithCompletion:]_block_invoke", v9];
  }
LABEL_16:
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v7);
  }
}

void sub_1001626E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "standard reply produced a null message.. identifier: %u", *(unsigned int *)(a1 + 48));
    }
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v8 = [*(id *)(a1 + 32) serialQ];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100162854;
    block[3] = &unk_100242960;
    uint64_t v9 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v14 = v9;
    id v12 = v5;
    id v13 = v6;
    dispatch_async(v8, block);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s NULL reply supplied trying to process: %u", "-[WiFiManagerAnalytics prepareMessageForSubmission:withData:andReply:]_block_invoke", *(unsigned int *)(a1 + 48)];
    }
  }
}

void sub_100162854(void *a1)
{
  dispatch_time_t v3 = [(id)objc_opt_class() instanceMethodSignatureForSelector:"_runReplyBlock:withMessage:andError:"];
  CFIndex v4 = +[NSInvocation invocationWithMethodSignature:v3];

  [v4 setSelector:"_runReplyBlock:withMessage:andError:"];
  [v4 setTarget:a1[4]];
  if (a1[7]) {
    [v4 setArgument:a1 + 7 atIndex:2];
  }
  if (a1[5]) {
    [v4 setArgument:a1 + 5 atIndex:3];
  }
  id v5 = a1 + 6;
  if (a1[6]) {
    [v4 setArgument:v5 atIndex:4];
  }
  [v4 retainArguments:v5];
  id v6 = *(NSObject **)(a1[4] + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001629D0;
  block[3] = &unk_10023E9B8;
  id v10 = v4;
  id v7 = v4;
  dispatch_block_t v8 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_BACKGROUND, 0, block);
  dispatch_sync(v6, v8);
}

id sub_1001629D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_1001629D8(uint64_t a1)
{
  int v3 = *(_DWORD *)(a1 + 56);
  switch(v3)
  {
    case 11075584:
      [*(id *)(a1 + 32) _populateDPSNotificationMessage:*(void *)(a1 + 48) andReply:*(void *)(a1 + 40)];
      break;
    case 11075585:
      [*(id *)(a1 + 32) _populateDPSProbeResultMessage:*(void *)(a1 + 48) andReply:*(void *)(a1 + 40)];
      break;
    case 11075586:
      [*(id *)(a1 + 32) _populateDPSLinkStateChangeMessage:*(void *)(a1 + 48) andReply:*(void *)(a1 + 40)];
      break;
    case 11075587:
      [*(id *)(a1 + 32) _populateDPSAPInfoMessage:*(void *)(a1 + 48) andReply:*(void *)(a1 + 40)];
      break;
    case 11075588:
      [*(id *)(a1 + 32) _populateSlowWiFiNotificationMessage:*(void *)(a1 + 48) andReply:*(void *)(a1 + 40)];
      break;
    default:
      if (v3 == 10027009)
      {
        [*(id *)(a1 + 32) _populateWiFiConnectionQualityMessageWithScorecard:*(void *)(a1 + 48) andReply:*(void *)(a1 + 40)];
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "[WiFiManagerAnalytics prepareMessageForSubmission] Unhandled message ID: %u", *(unsigned int *)(a1 + 56));
        }
      }
      break;
  }
}

void sub_100162ED8(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x3032000000;
  v25[3] = sub_100022D48;
  v25[4] = sub_100022C38;
  id v26 = 0;
  if (v6)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Failed to register for WAGroupTypeWiFiGeoServices, can't submit ConnectionQuality message");
    }
    (*((void (**)(void))a1[6] + 2))();
  }
  else
  {
    id v7 = dispatch_group_create();
    dispatch_group_enter(v7);
    dispatch_block_t v8 = +[WAClient sharedClient];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1001631BC;
    v20[3] = &unk_1002429D8;
    long long v24 = v25;
    id v21 = 0;
    id v22 = a1[4];
    uint64_t v9 = v7;
    id v23 = v9;
    [v8 getNewMessageForKey:@"CQ" groupType:2 andReply:v20];

    id v10 = [a1[5] serialQ];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100164390;
    block[3] = &unk_100242A28;
    CFRange v19 = v25;
    id v18 = a1[4];
    dispatch_group_notify(v9, v10, block);

    uint64_t v11 = [a1[5] serialQ];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1001648EC;
    v13[3] = &unk_100242A78;
    CFArrayRef v16 = v25;
    id v14 = a1[4];
    id v15 = a1[6];
    dispatch_group_notify(v9, v11, v13);
  }
  _Block_object_dispose(v25, 8);
}

void sub_1001631A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1001631BC(uint64_t a1, void *a2, void *a3)
{
  id v123 = a2;
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  if (v6 || (id v7 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40)) == 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s failed to get CQ message instance, error: %@", "-[WiFiManagerAnalytics _populateWiFiConnectionQualityMessageWithScorecard:andReply:]_block_invoke", *(void *)(a1 + 32) message];
    }
  }
  else
  {
    dispatch_block_t v8 = [v7 fieldForKey:@"CQ_overAllStay"];
    uint64_t v9 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"overallStay"];
    [v8 setUint64Value:[v9 unsignedLongLongValue]];

    id v10 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_lowLQMStay"];
    uint64_t v11 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"lowLqmStay"];
    [v10 setUint64Value:[v11 unsignedLongLongValue]];

    id v12 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_faultyStay"];
    id v13 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"faultyStay"];
    [v12 setUint64Value:[v13 unsignedLongLongValue]];

    id v14 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_lqmTranCount"];
    id v15 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"lqmTransitionCount"];
    [v14 setUint64Value:[v15 unsignedLongLongValue]];

    CFArrayRef v16 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_packetsIn"];
    id v17 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"packetsIn"];
    [v16 setUint64Value:[v17 unsignedLongLongValue]];

    id v18 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_packetsOut"];
    CFRange v19 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"packetsOut"];
    [v18 setUint64Value:[v19 unsignedLongLongValue]];

    CFRange v20 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_bytesInTotal"];
    id v21 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"bytesIn"];
    [v20 setUint64Value:[v21 unsignedLongLongValue]];

    id v22 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_bytesOutTotal"];
    id v23 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"bytesOut"];
    [v22 setUint64Value:[v23 unsignedLongLongValue]];

    long long v24 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_reTxBytes"];
    int v25 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"reTxBytes"];
    [v24 setUint64Value:[v25 unsignedLongLongValue]];

    id v26 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_dataStalls"];
    CFArrayRef v27 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"dataStalls"];
    [v26 setUint64Value:[v27 unsignedLongLongValue]];

    double v28 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_receivedDupes"];
    CLLocationDegrees v29 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"rxDupeBytes"];
    [v28 setUint64Value:[v29 unsignedLongLongValue]];

    CFIndex v30 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_rxOutOfOrderBytes"];
    long long v31 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"rxOOOBytes"];
    [v30 setUint64Value:[v31 unsignedLongLongValue]];

    long long v32 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_roundTripTimeMin"];
    long long v33 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"rttMin"];
    [v33 floatValue];
    [v32 setFloatValue:];

    long long v34 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_roundTripTimeAvg"];
    unsigned int v35 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"rttAvg"];
    [v35 floatValue];
    [v34 setFloatValue:];

    long long v36 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_roundTripTimeVar"];
    CFStringRef v37 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"rttVar"];
    [v37 floatValue];
    [v36 setFloatValue:];

    uint64_t v38 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_successfulConnections"];
    CFDictionaryRef v39 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"connSuccesses"];
    [v38 setUint64Value:[v39 unsignedLongLongValue]];

    CFIndex v40 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_failedConnections"];
    id v41 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"connAttempts"];
    uint64_t v42 = [v41 unsignedLongLongValue];
    int v43 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"connSuccesses"];
    [v40 setUint64Value:v42 - (unsigned char *)[v43 unsignedLongLongValue]];

    long long v44 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_sslConnectionCount"];
    __int16 v45 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"connAttempts"];
    [v44 setUint32Value:[v45 unsignedIntegerValue]];

    long long v46 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_sslErrorCount"];
    __int16 v47 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"certErrors"];
    [v46 setUint32Value:[v47 unsignedIntegerValue]];

    long long v48 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_bytesInActive"];
    long long v49 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaActiveUseBytesIn"];
    [v48 setUint64Value:[v49 unsignedLongLongValue]];

    long long v50 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_bytesOutActive"];
    long long v51 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaActiveUseBytesOut"];
    [v50 setUint64Value:[v51 unsignedLongLongValue]];

    uint64_t v52 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_roundTripTimeAvgActive"];
    long long v53 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaActiveUseRttAvg"];
    [v53 floatValue];
    [v52 setFloatValue:];

    uint64_t v54 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_roundTripTimeMinActive"];
    long long v55 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaActiveUseRttMin"];
    [v55 floatValue];
    [v54 setFloatValue:];

    long long v56 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_roundTripTimeVarActive"];
    id v57 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaAactiveUseRttVar"];
    [v57 floatValue];
    [v56 setFloatValue:];

    long long v58 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_cca"];
    long long v59 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaCCA"];
    [v58 setInt32Value:[v59 integerValue]];

    CFStringRef v60 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_rssi"];
    CFStringRef v61 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaRSSI"];
    [v60 setInt32Value:[v61 integerValue]];

    CFStringRef v62 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_snr"];
    uint64_t v63 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaSNR"];
    [v62 setInt32Value:[v63 integerValue]];

    long long v64 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_uniqueID"];
    id v65 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaBSSIDConnected"];
    [v64 setStringValue:v65];

    long long v66 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_hotspot20"];
    id v67 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaHS2"];
    [v66 setBoolValue:[v67 BOOLValue]];

    long long v68 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_band"];
    long long v69 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaBand"];
    [v68 setUint32Value:[v69 unsignedIntegerValue]];

    char v70 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_channel"];
    char v71 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaChannel"];
    [v70 setUint32Value:[v71 unsignedIntegerValue]];

    uint64_t v72 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_channelWidth"];
    id v73 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaChWidth"];
    [v72 setUint32Value:[v73 unsignedIntegerValue]];

    CFStringRef v74 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_phyMode"];
    int v75 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaPhyMode"];
    [v74 setUint32Value:[v75 unsignedIntegerValue]];

    v76 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_timeOfDay"];
    uint64_t v77 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaTimeOfDay"];
    [v76 setUint64Value:[v77 unsignedLongLongValue]];

    unsigned int v78 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_networkType"];
    unsigned int v79 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaAdvertisedNetworkType"];
    [v78 setInt32Value:[v79 unsignedIntegerValue]];

    id v80 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_wasCaptiveFlag"];
    uint64_t v81 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaWasCaptive"];
    [v80 setUint32Value:[v81 BOOLValue]];

    CFStringRef v82 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_networkOrigin"];
    v83 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaNetworkOriginator"];
    [v82 setInt32Value:[v83 intValue] + 1];

    uint64_t v84 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_topDLRate"];
    id v85 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"topDownloadRate"];
    [v85 floatValue];
    [v84 setFloatValue:];

    CFArrayRef v86 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_isKnownGood"];
    int v87 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"isKnownGood"];
    [v86 setBoolValue:objc_msgSend(v87, "intValue") != 0];

    long long v88 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_lowInternetDL"];
    long long v89 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"isLowInternetDL"];
    [v88 setBoolValue:[v89 BOOLValue]];

    long long v90 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_lowInternetUL"];
    long long v91 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"isLowInternetUL"];
    [v90 setBoolValue:[v91 BOOLValue]];

    long long v92 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_isEdgeBSS"];
    long long v93 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaIsEdgeBSS"];
    [v92 setBoolValue:[v93 BOOLValue]];

    long long v94 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_authTraits"];
    long long v95 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaSecType"];
    if (v95)
    {
      unint64_t v96 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaSecType"];
      unsigned __int8 v97 = [v96 unsignedIntegerValue];
      if ((v97 & 8) != 0)
      {
        uint64_t v98 = 4;
      }
      else if ((v97 & 2) != 0)
      {
        uint64_t v98 = 3;
      }
      else if (v97)
      {
        uint64_t v98 = 2;
      }
      else
      {
        uint64_t v98 = 1;
      }
      [v94 addRepeatableInt32Value:v98];
    }
    else
    {
      [v94 addRepeatableInt32Value:1];
    }

    char v99 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_associationReason"];
    int v100 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaAssocReason"];
    [v99 setInt32Value:[v100 integerValue]];

    v101 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_disassociationReason"];
    uint64_t v102 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaDisassocReason"];
    [v101 setInt32Value:[v102 integerValue]];

    BOOL v103 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_captiveDetermination"];
    unsigned int v104 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaCaptiveFlag"];
    [v103 setInt32Value:[v104 integerValue]];

    int v105 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_apMode"];
    v106 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaAPMode"];
    [v105 setInt32Value:[v106 integerValue]];

    v107 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_associationLength"];
    v108 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaAssociatedTime"];
    [v107 setInt32Value:[v108 integerValue]];

    v109 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_location"];
    v110 = [v109 subMessageValue];
    v111 = [v110 fieldForKey:@"GEOL_latLng"];
    CFMutableArrayRef v112 = [v111 subMessageValue];

    v113 = [v112 fieldForKey:@"GEOLL_lat"];
    uint64_t v114 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaLat"];
    [v114 doubleValue];
    [v113 setDoubleValue:];

    v115 = [v112 fieldForKey:@"GEOLL_lng"];
    CFMutableArrayRef v116 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaLon"];
    [v116 doubleValue];
    [v115 setDoubleValue:];

    CFIndex v117 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_identifier"];
    v118 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaSSID"];
    [v117 setStringValue:v118];

    uint64_t v120 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"ppaColoState"];
    unsigned int v119 = [(id)v120 unsignedIntegerValue];

    LODWORD(v120) = 0;
    do
    {
      if ((v119 >> v120))
      {
        v121 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"CQ_traits"];
        uint64_t v120 = (v120 + 1);
        [v121 addRepeatableInt32Value:v120];
      }
      else
      {
        LODWORD(v120) = v120 + 1;
      }
    }
    while (v120 != 5);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100164390(uint64_t a1)
{
  uint64_t v2 = +[WAClient sharedClient];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10016444C;
  void v5[3] = &unk_100242A00;
  long long v4 = *(_OWORD *)(a1 + 32);
  id v3 = (id)v4;
  long long v6 = v4;
  [v2 getNewMessageForKey:@"AP2" groupType:2 andReply:v5];
}

void sub_10016444C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6 && v5 && *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"ppaBSSIDsMatchingSSID"];
    dispatch_block_t v8 = [v7 allObjects];

    id obj = v8;
    id v9 = [v8 countByEnumeratingWithState:&v46 objects:v51 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v47;
      do
      {
        for (CFIndex i = 0; i != v10; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v47 != v11) {
            objc_enumerationMutation(obj);
          }
          id v13 = *(void **)(*((void *)&v46 + 1) + 8 * i);
          id v14 = [v5 copy];
          id v15 = [v14 fieldForKey:@"AP2_uniqueID"];
          CFArrayRef v16 = [v13 bssid];
          [v15 setStringValue:v16];

          id v17 = [v14 fieldForKey:@"AP2_channel"];
          id v18 = [v13 channel];
          [v17 setUint32Value:[v18 unsignedIntValue]];

          CFRange v19 = [v14 fieldForKey:@"AP2_rssi"];
          CFRange v20 = [v13 rssi];
          [v19 setInt32Value:[v20 intValue]];

          id v21 = [v14 fieldForKey:@"AP2_origin"];
          [v21 setInt32Value:[v13 origin]];

          id v22 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) fieldForKey:@"CQ_essMembers"];
          [v22 addRepeatableSubMessageValue:v14];
        }
        id v10 = [obj countByEnumeratingWithState:&v46 objects:v51 count:16];
      }
      while (v10);
    }

    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    id v23 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"ppaBSSIDsNotMatchSSID"];
    long long v24 = [v23 allObjects];

    id obja = v24;
    id v25 = [v24 countByEnumeratingWithState:&v42 objects:v50 count:16];
    if (v25)
    {
      id v26 = v25;
      uint64_t v27 = *(void *)v43;
      do
      {
        for (CFIndex j = 0; j != v26; CFIndex j = (char *)j + 1)
        {
          if (*(void *)v43 != v27) {
            objc_enumerationMutation(obja);
          }
          CLLocationDegrees v29 = *(void **)(*((void *)&v42 + 1) + 8 * (void)j);
          id v30 = [v5 copy];
          long long v31 = [v30 fieldForKey:@"AP2_uniqueID"];
          long long v32 = [v29 bssid];
          [v31 setStringValue:v32];

          long long v33 = [v30 fieldForKey:@"AP2_channel"];
          long long v34 = [v29 channel];
          [v33 setUint32Value:[v34 unsignedIntValue]];

          unsigned int v35 = [v30 fieldForKey:@"AP2_rssi"];
          long long v36 = [v29 rssi];
          [v35 setInt32Value:[v36 intValue]];

          CFStringRef v37 = [v30 fieldForKey:@"AP2_origin"];
          [v37 setInt32Value:[v29 origin]];

          uint64_t v38 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) fieldForKey:@"CQ_nearbyBSSs"];
          [v38 addRepeatableSubMessageValue:v30];
        }
        id v26 = [obja countByEnumeratingWithState:&v42 objects:v50 count:16];
      }
      while (v26);
    }

    id v6 = 0;
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s Failed to get CQ or AP2 instance: %@", "-[WiFiManagerAnalytics _populateWiFiConnectionQualityMessageWithScorecard:andReply:]_block_invoke_3", v6 message];
    }
  }
}

void sub_1001648EC(uint64_t a1)
{
  uint64_t v2 = +[WAClient sharedClient];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001649B8;
  v3[3] = &unk_100242A50;
  uint64_t v6 = *(void *)(a1 + 48);
  id v4 = *(id *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [v2 getNewMessageForKey:@"CST" groupType:2 andReply:v3];
}

void sub_1001649B8(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  if (!v5 && v12 && *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    uint64_t v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"ppaDLSpeed"];

    if (v6)
    {
      id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"ppaDLSpeed"];
      id v8 = [v12 copy];
      id v9 = [v8 fieldForKey:@"CST_avgDL"];
      [v7 floatValue];
      [v9 setFloatValue:];

      id v10 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) fieldForKey:@"CQ_speedTests"];
      [v10 addRepeatableSubMessageValue:v8];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s Failed to get CQ or CST instance: %@", "-[WiFiManagerAnalytics _populateWiFiConnectionQualityMessageWithScorecard:andReply:]_block_invoke_5", v5 message];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100164CD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: getNewMessageForKey DPSN message error: %@", "-[WiFiManagerAnalytics _populateDPSNotificationMessage:andReply:]_block_invoke", v6 message];
    }
LABEL_4:
    goto LABEL_20;
  }
  CFBooleanRef BOOLean = 0;
  value = 0;
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), @"symptom", (const void **)&value))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s Failed to get key kWiFiDPSSypmtom", @"-[WiFiManagerAnalytics _populateDPSNotificationMessage:andReply:]_block_invoke", v14];
    }
    goto LABEL_4;
  }
  if (value)
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    id v8 = [v5 fieldForKey:@"DPSN_symptom"];
    [v8 setInt32Value:valuePtr];
  }
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), @"DPS_AC", (const void **)&value) && value)
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    id v9 = [v5 fieldForKey:@"DPSN_problemAC"];
    [v9 setUint32Value:valuePtr];
  }
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), @"DPS_CCA", (const void **)&value) && value)
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    id v10 = [v5 fieldForKey:@"DPSN_cca"];
    [v10 setUint32Value:valuePtr];
  }
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), @"DPS_TIMESTAMP", (const void **)&value)
    && value)
  {
    uint64_t valuePtr = 0;
    CFNumberGetValue((CFNumberRef)value, kCFNumberLongLongType, &valuePtr);
    uint64_t v11 = [v5 fieldForKey:@"DPSN_timestamp"];
    [v11 setUint64Value:valuePtr];
  }
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), @"facetimeCallInProgress", (const void **)&BOOLean)&& BOOLean)
  {
    int v12 = CFBooleanGetValue(BOOLean);
    id v13 = [v5 fieldForKey:@"DPSN_facetimeCallInProgress"];
    [v13 setBoolValue:v12 != 0];
  }
LABEL_20:
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10016501C(uint64_t a1, void *a2, void *a3)
{
  id v15 = a2;
  id v5 = a3;
  if (v5)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: getNewMessageForKey DPSAPS message error: %@", "-[WiFiManagerAnalytics _populateDPSProbeResultMessage:andReply:]_block_invoke", v5 message];
    }
  }
  else
  {
    id v7 = [v15 fieldForKey:@"DPSAPS_rttGatewayBE"];
    [v7 setUint32Value:**(unsigned int **)(a1 + 40)];

    id v8 = [v15 fieldForKey:@"DPSAPS_rttGatewayBK"];
    [v8 setUint32Value:*(unsigned int *)(*(void *)(a1 + 40) + 4)];

    id v9 = [v15 fieldForKey:@"DPSAPS_rttGatewayVO"];
    [v9 setUint32Value:*(unsigned int *)(*(void *)(a1 + 40) + 8)];

    id v10 = [v15 fieldForKey:@"DPSAPS_rttGatewayVI"];
    [v10 setUint32Value:*(unsigned int *)(*(void *)(a1 + 40) + 12)];

    uint64_t v11 = [v15 fieldForKey:@"DPSAPS_rttPrimaryDnsBE"];
    [v11 setUint32Value:0];

    int v12 = [v15 fieldForKey:@"DPSAPS_rttPrimaryDnsBK"];
    [v12 setUint32Value:0];

    id v13 = [v15 fieldForKey:@"DPSAPS_rttPrimaryDnsVO"];
    [v13 setUint32Value:0];

    uint64_t v14 = [v15 fieldForKey:@"DPSAPS_rttPrimaryDnsVI"];
    [v14 setUint32Value:0];
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001652C8(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  if (v5)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: getNewMessageForKey WFAAWDWADAAD message error: %@", "-[WiFiManagerAnalytics _populateDPSLinkStateChangeMessage:andReply:]_block_invoke", v5 message];
    }
  }
  else
  {
    id v7 = [v14 fieldForKey:@"WFAAWDWADAAD_newBSSID"];
    [v7 setBoolValue:*(unsigned char *)(*(void *)(a1 + 40) + 1) != 0];

    id v8 = [v14 fieldForKey:@"WFAAWDWADAAD_changedChannel"];
    [v8 setBoolValue:*(unsigned char *)(*(void *)(a1 + 40) + 2) != 0];

    id v9 = [v14 fieldForKey:@"WFAAWDWADAAD_changedDNSPrimary"];
    [v9 setBoolValue:**(unsigned char **)(a1 + 40) != 0];

    id v10 = [v14 fieldForKey:@"WFAAWDWADAAD_changedDNSSecondary"];
    [v10 setBoolValue:**(unsigned char **)(a1 + 40) != 0];

    uint64_t v11 = [v14 fieldForKey:@"WFAAWDWADAAD_changedMAC"];
    [v11 setBoolValue:*(unsigned char *)(*(void *)(a1 + 40) + 3) != 0];

    int v12 = [v14 fieldForKey:@"WFAAWDWADAAD_eventType"];
    [v12 setInt32Value:*(unsigned int *)(*(void *)(a1 + 40) + 8)];

    id v13 = [v14 fieldForKey:@"WFAAWDWADAAD_additionalInfo"];
    [v13 setUint32Value:*(unsigned int *)(*(void *)(a1 + 40) + 12)];
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100165584(uint64_t a1, void *a2, void *a3)
{
  id v22 = a2;
  id v5 = a3;
  if (v5)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: getNewMessageForKey WFAAWDWAAAPI message error: %@", "-[WiFiManagerAnalytics _populateDPSAPInfoMessage:andReply:]_block_invoke", v5 message];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"Got WFAAWDWAAAPI WAGroupTypeWiFiDatapathDiagnostics WAMessage"];
    }
    CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"ManufacturerElement");
    if (Value)
    {
      id v8 = Value;
      id v9 = [v22 fieldForKey:@"WFAAWDWAAAPI_manufacturerElement"];
      [v9 setStringValue:v8];
    }
    id v10 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"ModelName");
    if (v10)
    {
      uint64_t v11 = v10;
      int v12 = [v22 fieldForKey:@"WFAAWDWAAAPI_modelName"];
      [v12 setStringValue:v11];
    }
    id v13 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"ModelNumber");
    if (v13)
    {
      id v14 = v13;
      id v15 = [v22 fieldForKey:@"WFAAWDWAAAPI_modelNumber"];
      [v15 setStringValue:v14];
    }
    CFArrayRef v16 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"DeviceNameElement");
    if (v16)
    {
      id v17 = v16;
      id v18 = [v22 fieldForKey:@"WFAAWDWAAAPI_deviceNameElement"];
      [v18 setStringValue:v17];
    }
    CFRange v19 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"DeviceNameData");
    if (v19)
    {
      CFRange v20 = v19;
      id v21 = [v22 fieldForKey:@"WFAAWDWAAAPI_deviceNameData"];
      [v21 setStringValue:v20];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100165848(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: getNewMessageForKey WFAAWDSWFN message error: %@", "-[WiFiManagerAnalytics _populateSlowWiFiNotificationMessage:andReply:]_block_invoke", v6 message];
    }
  }
  else
  {
    CFBooleanRef BOOLean = 0;
    value = 0;
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), @"SLOWWIFI_ACTION_STAGE", (const void **)&value))
    {
      BOOL v8 = value == 0;
    }
    else
    {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      unsigned int valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
      id v9 = [v5 fieldForKey:@"WFAAWDSWFN_actionField"];
      [v9 setUint32Value:valuePtr];
    }
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), @"SLOWWIFI_ACTION_TYPE", (const void **)&value)&& value)
    {
      unsigned int valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
      id v10 = [v5 fieldForKey:@"WFAAWDSWFN_recoveryAction"];
      [v10 setUint32Value:valuePtr];
    }
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), @"SLOWWIFI_ACTION_REASON", (const void **)&value)&& value)
    {
      unsigned int valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
      uint64_t v11 = [v5 fieldForKey:@"WFAAWDSWFN_recoveryReason"];
      [v11 setUint32Value:valuePtr];
    }
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), @"SLOWWIFI_USER_INPUT", (const void **)&value)&& value)
    {
      unsigned int valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
      int v12 = [v5 fieldForKey:@"WFAAWDSWFN_userInput"];
      [v12 setUint32Value:valuePtr];
    }
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), @"facetimeCallInProgress", (const void **)&BOOLean)&& BOOLean)
    {
      int v13 = CFBooleanGetValue(BOOLean);
      id v14 = [v5 fieldForKey:@"WFAAWDSWFN_facetimeCallInProgress"];
      [v14 setBoolValue:v13 != 0];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100165B58(uint64_t a1)
{
  uint64_t v1 = *(const void **)a1;
  id v2 = *(id *)(a1 + 8);
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: Enter" args:("WiFiMissingPasswordSoftErrorHandler")];
  }
  if (v2) {
    id v4 = [v2 incrementCount];
  }
  id v5 = +[NSString stringWithFormat:@"Password for WiFi network '%@' is not in the keychain. If you did not recently delete or forget this network, please tap Yes to TTR and use \"Add Devices\" to collect data from *all* devices", sub_10001A43C(v1)];
  id v6 = [v2 askToLaunchTapToRadarWithMessage:v5 timeout:&stru_100242B08 completionHandler:60.0];
  if (v6)
  {
    id v7 = +[NSURL URLWithString:@"tap-to-radar://new?Title=WiFi%20Password%20Missing%20From%20Keychain&AutoDiagnostics=phone&Description=WiFi%20Password%20Missing%20From%20Keychain&ComponentID=621547&ComponentName=WiFi%20Connectivity&ComponentVersion=iOS&Classification=Serious%20Bug%20&ExtensionIdentifiers=com.apple.DiagnosticExtensions.WiFi"];
    id v8 = [v2 tapToRadarWithURL:v7 completionHandler:&stru_100242B28];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: User declined the TTR", @"WiFiMissingPasswordSoftErrorHandler"];
    }
  }

  return v6;
}

void sub_100165CB8(id a1, NSDictionary *a2, NSError *a3)
{
  id v6 = a2;
  id v4 = a3;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: askToLaunchTapToRadarWithMessage result:%@, error:%@", "WiFiMissingPasswordSoftErrorHandler_block_invoke", v6, v4 message];
  }
}

void sub_100165D4C(id a1, NSDictionary *a2, NSError *a3)
{
  id v6 = a2;
  id v4 = a3;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: WiFiMissingPasswordSoftError tapToRadarWithURL result:%@, error:%@", "WiFiMissingPasswordSoftErrorHandler_block_invoke_2", v6, v4 message];
  }
}

void sub_100165ED4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10016626C(uint64_t a1)
{
  if (qword_10027DD68)
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 48)) {
      id v3 = "Started";
    }
    else {
      id v3 = "Stopped";
    }
    [((id)qword_10027DD68) WFLog:@"%s: %s tracking NOIs." message:3, "-[WiFiNOIManager asyncTrackNetworksOfInterest:]_block_invoke", v3];
  }
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 8);
  if (*(unsigned char *)(v4 + 48))
  {
    return [v5 trackAllBuiltinNOIsForInterfaceType:1 options:0];
  }
  else
  {
    [v5 stopTrackingNOIs:*(void *)(v4 + 16)];
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 8);
    uint64_t v8 = *(void *)(v6 + 24);
    return [v7 stopTrackingNOIs:v8];
  }
}

void sub_100166460(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id sub_100166478(uint64_t a1)
{
  id v2 = (void *)sub_10001A43C(*(const void **)(a1 + 48));
  if (![*(id *)(*(void *)(a1 + 32) + 72) count])
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  uint64_t v3 = 1;
  if ((objc_msgSend(v2, "isEqualToString:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 72), "firstObject")) & 1) == 0)
  {
    if (![*(id *)(*(void *)(a1 + 32) + 72) containsObject:v2])
    {
      uint64_t v3 = 0;
      goto LABEL_8;
    }
    uint64_t v3 = 2;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
LABEL_8:
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Setting home NOI for %s to : %@(%d)", "-[WiFiNOIManager setNetworkOfInterest:]_block_invoke", objc_msgSend(v2, "UTF8String"), sub_10005AE9C(v3), v3 message];
  }
  sub_1000CF1F0(*(const void **)(a1 + 48), v3);
LABEL_11:
  if (![*(id *)(*(void *)(a1 + 32) + 80) count]) {
    goto LABEL_19;
  }
  unsigned __int8 v5 = [v2 isEqualToString:[*(id *)(*(void *)(a1 + 32) + 80) firstObject]];
  uint64_t v6 = 1;
  if (v5) {
    goto LABEL_15;
  }
  if ([*(id *)(*(void *)(a1 + 32) + 80) containsObject:v2])
  {
    uint64_t v6 = 2;
LABEL_15:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    uint64_t v3 = v6;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Setting work NOI for %s to : %@(%d)", "-[WiFiNOIManager setNetworkOfInterest:]_block_invoke", objc_msgSend(v2, "UTF8String"), sub_10005AEC8(v3), v3 message];
  }
  sub_1000CEFF4(*(const void **)(a1 + 48), v3);
LABEL_19:
  uint64_t v8 = *(void **)(a1 + 32);

  return [v8 asyncTrackNetworksOfInterest:0];
}

id sub_1001666D8(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = *(void **)(*(void *)(a1 + 32) + 16);
  id result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    id v4 = result;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*(void *)(a1 + 32) + 8) networkAttachmentInfoForScopedNOI:_NSConcreteStackBlock reply:3221225472 sub_100166830 unk_100242BB8 *(void *)(*((void *)&v7 + 1) + 8 * (void)v6) *(void *)(a1 + 32)];
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      id v4 = result;
    }
    while (result);
  }
  return result;
}

void sub_100166830(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: %s: error: %s\n", "-[WiFiNOIManager asyncScopeHomeNetworks]_block_invoke_2", objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "typePrettyPrint"), "UTF8String"), objc_msgSend(objc_msgSend(a3, "description"), "UTF8String"));
    }
  }
  else
  {
    id v6 = [a2 keysSortedByValueUsingComparator:&stru_100242B90];
    [*(id *)(*(void *)(a1 + 40) + 72) removeAllObjects];
    long long v7 = *(void **)(*(void *)(a1 + 40) + 72);
    [v7 setArray:v6];
  }
}

int64_t sub_100166924(id a1, id a2, id a3)
{
  [a2 doubleValue];
  double v5 = v4;
  [a3 doubleValue];
  if (v5 > v6) {
    return -1;
  }
  else {
    return v5 < v6;
  }
}

id sub_1001669E0(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = *(void **)(*(void *)(a1 + 32) + 24);
  id result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    id v4 = result;
    uint64_t v5 = *(void *)v8;
    do
    {
      double v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*(void *)(a1 + 32) + 8) networkAttachmentInfoForScopedNOI:_NSConcreteStackBlock reply:3221225472 sub_100166B38 unk_100242BB8 *(void *)(*((void *)&v7 + 1) + 8 * (void)v6) *(void *)(a1 + 32)];
        double v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      id v4 = result;
    }
    while (result);
  }
  return result;
}

void sub_100166B38(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: %s: error: %s\n", "-[WiFiNOIManager asyncScopeWorkNetworks]_block_invoke_2", objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "typePrettyPrint"), "UTF8String"), objc_msgSend(objc_msgSend(a3, "description"), "UTF8String"));
    }
  }
  else
  {
    id v6 = [a2 keysSortedByValueUsingComparator:&stru_100242BD8];
    [*(id *)(*(void *)(a1 + 40) + 80) removeAllObjects];
    long long v7 = *(void **)(*(void *)(a1 + 40) + 80);
    [v7 setArray:v6];
  }
}

int64_t sub_100166C2C(id a1, id a2, id a3)
{
  [a2 doubleValue];
  double v5 = v4;
  [a3 doubleValue];
  if (v5 > v6) {
    return -1;
  }
  else {
    return v5 < v6;
  }
}

void sub_100166CE8(uint64_t a1)
{
  if (*(_DWORD *)(*(void *)(a1 + 32) + 52) == 7)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"NOI Transition Check Timer fired. Triggering NOI Transition Check."];
    }
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 64);
    sub_100123EF8(v3);
  }
}

uint64_t sub_100167354()
{
  uint64_t result = qword_10027DC30;
  if (!qword_10027DC30)
  {
    pthread_once(&stru_10027CED8, (void (*)(void))sub_10016739C);
    return qword_10027DC30;
  }
  return result;
}

uint64_t sub_10016739C()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_10027DC30 = result;
  return result;
}

void *sub_1001673C4()
{
  if (!qword_10027DC30) {
    pthread_once(&stru_10027CED8, (void (*)(void))sub_10016739C);
  }
  uint64_t result = (void *)_CFRuntimeCreateInstance();
  if (result)
  {
    result[2] = 0;
    result[3] = 0;
    result[4] = 0;
  }
  return result;
}

BOOL sub_100167430(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = CFRetain(cf);
  *(void *)(a1 + 16) = v3;
  return v3 != 0;
}

BOOL sub_100167464(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = CFRetain(cf);
  *(void *)(a1 + 24) = v3;
  return v3 != 0;
}

BOOL sub_100167498(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 32) = Current;
  return Current != 0.0;
}

double sub_1001674C8(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

void sub_1001674D0(void *a1)
{
  if (!a1) {
    sub_100196EE0();
  }
  CFTypeID v2 = CFGetTypeID(a1);
  uint64_t v3 = qword_10027DC30;
  if (!qword_10027DC30)
  {
    pthread_once(&stru_10027CED8, (void (*)(void))sub_10016739C);
    uint64_t v3 = qword_10027DC30;
  }
  if (v2 != v3) {
    sub_100196F0C();
  }
  double v5 = a1 + 2;
  double v4 = (const void *)a1[2];
  if (v4)
  {
    CFRelease(v4);
    void *v5 = 0;
  }
  double v6 = (const void *)a1[3];
  if (v6) {
    CFRelease(v6);
  }
  void *v5 = 0;
  a1[3] = 0;
  a1[4] = 0;
}

uint64_t sub_100167568(uint64_t a1, uint64_t a2)
{
  uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16));
  if (result)
  {
    uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 24), *(CFTypeRef *)(a2 + 24));
    if (result) {
      return *(double *)(a1 + 32) == *(double *)(a2 + 32);
    }
  }
  return result;
}

CFStringRef sub_1001675C0(uint64_t a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(kCFAllocatorDefault, a2, @"WiFiCacheEntry@%p", a1);
}

CFStringRef sub_1001675FC(uint64_t a1)
{
  return CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"WiFiCacheEntry@%p", a1);
}

void sub_100167874()
{
  sub_1001678C4();
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();

  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)sub_100167B94, @"com.apple.language.changed", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void sub_1001678C4()
{
  CFURLRef v0 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, @"/System/Library/PrivateFrameworks/MobileWiFi.framework", kCFURLPOSIXPathStyle, 0);
  uint64_t v1 = CFBundleCreate(kCFAllocatorDefault, v0);
  if (v0) {
    CFRelease(v0);
  }
  if (v1)
  {
    CFPreferencesSynchronize(@".GlobalPreferences", @"mobile", kCFPreferencesAnyHost);
    if (qword_10027DC40) {
      CFRelease((CFTypeRef)qword_10027DC40);
    }
    qword_10027DC40 = (uint64_t)v1;
    CFArrayRef v2 = (const __CFArray *)CFPreferencesCopyValue(@"AppleLanguages", @".GlobalPreferences", @"mobile", kCFPreferencesAnyHost);
    if (v2) {
      goto LABEL_10;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "could not get apple languages array, assuming english\n"];
    }
    CFArrayRef v2 = CFArrayCreate(kCFAllocatorDefault, (const void **)&off_100242C70, 1, &kCFTypeArrayCallBacks);
    if (v2)
    {
LABEL_10:
      CFArrayRef v4 = CFBundleCopyBundleLocalizations(v1);
      if (!v4)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"could not get localizations array from bundle\n"];
        }
        CFArrayRef v10 = v2;
LABEL_32:
        CFRelease(v10);
        return;
      }
      CFArrayRef v5 = v4;
      CFArrayRef v6 = CFBundleCopyLocalizationsForPreferences(v4, v2);
      CFArrayRef v7 = v6;
      if (v6)
      {
        if (CFArrayGetCount(v6))
        {
          if (qword_10027DC38)
          {
            CFRelease((CFTypeRef)qword_10027DC38);
            qword_10027DC38 = 0;
          }
          qword_10027DC38 = (uint64_t)CFArrayGetValueAtIndex(v7, 0);
          CFRetain((CFTypeRef)qword_10027DC38);
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: preferred language='%@'", "WiFiLocalizationUpdatePreferredLanguage", qword_10027DC38 message];
          }
          goto LABEL_30;
        }
        uint64_t v11 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          int v12 = "no localizations for preferred languages\n";
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v11 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          int v12 = "could not get localizations for preferred languages\n";
LABEL_29:
          [v11 WFLog:3 message:v12, v14, v15];
        }
      }
LABEL_30:
      CFRelease(v2);
      CFRelease(v5);
      if (!v7) {
        return;
      }
      CFArrayRef v10 = v7;
      goto LABEL_32;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"could not use english as default language\n"];
    }
  }
}

void sub_100167B94()
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"language changed - refresh preferred language"];
  }

  sub_1001678C4();
}

void sub_100167BF0()
{
  if (qword_10027DC38)
  {
    CFRelease((CFTypeRef)qword_10027DC38);
    qword_10027DC38 = 0;
  }
  if (qword_10027DC40)
  {
    CFRelease((CFTypeRef)qword_10027DC40);
    qword_10027DC40 = 0;
  }
}

BOOL sub_100167C34()
{
  return qword_10027DC38 != 0;
}

id sub_100167C48(uint64_t a1)
{
  if (qword_10027DC38)
  {
    CFArrayRef v2 = (void *)CFBundleCopyLocalizedStringForLocalization();
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: lang='%@' key='%@' value='%@'", "WiFiLocalizationGetLocalizedString", qword_10027DC38, a1, v2 message];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"WiFiLocalizationGetLocalizedString"];
    }
    CFArrayRef v2 = 0;
  }

  return v2;
}

uint64_t sub_100167D38()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_10027DC48 = result;
  return result;
}

uint64_t sub_100167D60(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4)
{
  return sub_100167D68(a1, a2, a3, a4, 0);
}

uint64_t sub_100167D68(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t valuePtr = 6;
  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  if (!v9) {
    return 0;
  }
  CFArrayRef v10 = v9;
  if (!a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null intfDictionary.", @"WiFiVirtualInterfaceCreateWithCompletion"];
    }
    goto LABEL_33;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null device." args:("WiFiVirtualInterfaceCreateWithCompletion", NULL)];
    }
    goto LABEL_33;
  }
  if (!qword_10027DC48) {
    pthread_once(&stru_10027CF48, (void (*)(void))sub_100167D38);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Cannot create interface instance" v36];
    }
LABEL_33:
    goto LABEL_25;
  }
  uint64_t v12 = (uint64_t)Instance;
  Instance[1] = 0u;
  int v13 = Instance + 1;
  Instance[13] = 0u;
  Instance[14] = 0u;
  Instance[11] = 0u;
  Instance[12] = 0u;
  Instance[9] = 0u;
  Instance[10] = 0u;
  Instance[7] = 0u;
  Instance[8] = 0u;
  Instance[5] = 0u;
  Instance[6] = 0u;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[2] = 0u;
  CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, a3);
  *((void *)v13 + 2) = MutableCopy;
  if (!MutableCopy)
  {
    long long v31 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_24;
    }
    long long v32 = "Cannot create interface parameters dictionary copy";
    goto LABEL_23;
  }
  *(void *)(v12 + 24) = a1;
  *(void *)(v12 + 48) = a4;
  CFDictionaryRef Value = CFDictionaryGetValue(MutableCopy, @"VIRT_IF_ROLE");
  if (!CFEqual(v10, Value))
  {
    CFDictionaryRef v25 = *(const __CFDictionary **)(v12 + 32);
    if (v25)
    {
      id v26 = CFDictionaryGetValue(v25, @"VIRT_IF_NAME");
      *(void *)(v12 + 40) = v26;
      if (v26)
      {
        uint64_t v27 = Apple80211Open();
        if (v27)
        {
          uint64_t v34 = v27;
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"Cannot open 80211 device, err %d" arguments:v34];
          }
          goto LABEL_24;
        }
        uint64_t v28 = Apple80211BindToInterfaceWithParams();
        if (v28)
        {
          uint64_t v35 = v28;
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4, @"Cannot bind 80211 device, err %d", v35];
          }
          goto LABEL_24;
        }
        uint64_t v29 = sub_100168E64(v12);
        *(void *)(v12 + 16) = v29;
        if (v29)
        {
          if (a5) {
            a5(a1, v12);
          }
          goto LABEL_10;
        }
        long long v31 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_24;
        }
        long long v32 = "Unable to start monitoring events";
        goto LABEL_23;
      }
    }
    else
    {
      *(void *)(v12 + 40) = 0;
    }
    long long v31 = (void *)qword_10027DD68;
    if (!qword_10027DD68)
    {
LABEL_24:
      CFRelease(v10);
      CFArrayRef v10 = (const void *)v12;
LABEL_25:
      uint64_t v12 = 0;
      goto LABEL_11;
    }
    long long v32 = "No virtual interface name returned.";
LABEL_23:
    [v31 WFLog:4 message:v32, v36];
    goto LABEL_24;
  }
  CFArrayRef v16 = objc_alloc_init(WiFiVirtualInterfaceWeakWrapper);
  *(void *)(v12 + 216) = v16;
  [(WiFiVirtualInterfaceWeakWrapper *)v16 setVirtualInterface:v12];
  id location = (id)0xAAAAAAAAAAAAAAAALL;
  objc_initWeak(&location, *(id *)(v12 + 216));
  *(void *)(v12 + 200) = objc_alloc_init((Class)AWDLServiceDiscoveryManager);
  *(void *)(v12 + 192) = objc_alloc_init((Class)WiFiP2PAWDLStateMonitor);
  id v17 = objc_alloc((Class)WiFiP2PDNSServiceDiscoveryManager);
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472;
  v49[2] = sub_1001684A0;
  v49[3] = &unk_100242CA8;
  v49[4] = a4;
  objc_copyWeak(&v50, &location);
  *(void *)(v12 + 208) = [v17 initUsingWiFiAware:0 serviceCallback:v49];
  *(void *)(v12 + 184) = 0;
  id v18 = *(void **)(v12 + 192);
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472;
  v47[2] = sub_1001685C8;
  v47[3] = &unk_100242CF8;
  v47[4] = a4;
  objc_copyWeak(v48, &location);
  v48[1] = a5;
  [v18 setStateUpdatedHandler:v47];
  CFRange v19 = *(void **)(v12 + 192);
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472;
  v45[2] = sub_1001687C8;
  v45[3] = &unk_100242D20;
  void v45[4] = a4;
  objc_copyWeak(&v46, &location);
  [v19 setStatisticsUpdatedHandler:v45];
  CFRange v20 = *(void **)(v12 + 192);
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472;
  v43[2] = sub_1001688F0;
  v43[3] = &unk_100242D70;
  v43[4] = a4;
  objc_copyWeak(&v44, &location);
  [v20 setRealtimeModeUpdatedHandler:v43];
  id v21 = *(void **)(v12 + 192);
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_100168A4C;
  v41[3] = &unk_100242DC0;
  v41[4] = a4;
  objc_copyWeak(&v42, &location);
  [v21 setThreadCoexistenceEventHandler:v41];
  id v22 = *(void **)(v12 + 192);
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_100168BA4;
  v39[3] = &unk_100242E10;
  v39[4] = a4;
  objc_copyWeak(&v40, &location);
  [v22 setSoftAPChannelChangedEventHandler:v39];
  id v23 = *(void **)(v12 + 192);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_100168D50;
  v37[3] = &unk_100242E60;
  v37[4] = a4;
  objc_copyWeak(&v38, &location);
  [v23 setChannelSequenceUpdatedEventHandler:v37];
  [*(id *)(v12 + 192) beginMonitoring];
  objc_destroyWeak(&v38);
  objc_destroyWeak(&v40);
  objc_destroyWeak(&v42);
  objc_destroyWeak(&v44);
  objc_destroyWeak(&v46);
  objc_destroyWeak(v48);
  objc_destroyWeak(&v50);
  objc_destroyWeak(&location);
LABEL_10:
  *(void *)(v12 + 232) = 0;
LABEL_11:
  CFRelease(v10);
  return v12;
}

void sub_1001683F8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak(v7);
  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v3);
  objc_destroyWeak(v4);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v8 - 120));
  _Unwind_Resume(a1);
}

const void *sub_100168480(uint64_t a1)
{
  if (a1 && (CFDictionaryRef v1 = *(const __CFDictionary **)(a1 + 32)) != 0) {
    return CFDictionaryGetValue(v1, @"VIRT_IF_ROLE");
  }
  else {
    return 0;
  }
}

void sub_1001684A0(uint64_t a1)
{
  CFDictionaryRef v1 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100168530;
  block[3] = &unk_100242C80;
  objc_copyWeak(&v3, (id *)(a1 + 40));
  dispatch_async(v1, block);
  objc_destroyWeak(&v3);
}

void sub_100168530(uint64_t a1)
{
  CFDictionaryRef v1 = [objc_loadWeak((id *)(a1 + 32)) virtualInterface];
  if (v1)
  {
    CFArrayRef v2 = v1;
    CFTypeRef cf = 0;
    uint64_t v3 = sub_1001694FC((uint64_t)v1, (__CFDictionary **)&cf);
    CFArrayRef v4 = (void (*)(uint64_t, const void *, CFTypeRef, uint64_t, void))v2[15];
    if (v4)
    {
      uint64_t v5 = v3;
      uint64_t v7 = v2[3];
      CFDictionaryRef v6 = (const __CFDictionary *)v2[4];
      if (v6) {
        CFDictionaryRef Value = CFDictionaryGetValue(v6, @"VIRT_IF_NAME");
      }
      else {
        CFDictionaryRef Value = 0;
      }
      v4(v7, Value, cf, v5, v2[16]);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_1001685C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFArrayRef v4 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100168678;
  block[3] = &unk_100242CD0;
  objc_copyWeak(v7, (id *)(a1 + 40));
  uint64_t v5 = *(void **)(a1 + 48);
  void block[4] = v3;
  v7[1] = v5;
  dispatch_async(v4, block);
  objc_destroyWeak(v7);
}

void sub_100168678(uint64_t a1)
{
  CFArrayRef v2 = [objc_loadWeak((id *)(a1 + 40)) virtualInterface];
  if (v2)
  {
    uint64_t v3 = (uint64_t)v2;
    CFArrayRef v4 = (void *)v2[23];

    uint64_t v5 = *(void **)(a1 + 32);
    *(void *)(v3 + 184) = v5;
    if (v5)
    {
      if (!v4)
      {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 32), @"VIRT_IF_NAME", [v5 interfaceName]);
        CFDictionaryRef Value = *(const __CFDictionary **)(v3 + 32);
        if (Value) {
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, @"VIRT_IF_NAME");
        }
        *(void *)(v3 + 40) = Value;
        uint64_t v7 = *(void (**)(void, uint64_t))(a1 + 48);
        if (v7) {
          v7(*(void *)(v3 + 24), v3);
        }
        sub_10005FAA4(*(void *)(v3 + 24));
      }
      CFTypeRef cf = 0;
      uint64_t v8 = sub_1001694FC(v3, (__CFDictionary **)&cf);
      CFNumberRef v9 = *(void (**)(uint64_t, const void *, CFTypeRef, uint64_t, void))(v3 + 104);
      if (v9)
      {
        uint64_t v10 = v8;
        uint64_t v12 = *(void *)(v3 + 24);
        CFDictionaryRef v11 = *(const __CFDictionary **)(v3 + 32);
        if (v11) {
          int v13 = CFDictionaryGetValue(v11, @"VIRT_IF_NAME");
        }
        else {
          int v13 = 0;
        }
        v9(v12, v13, cf, v10, *(void *)(v3 + 112));
      }
      if (cf) {
        CFRelease(cf);
      }
    }
  }
  else
  {
    uint64_t v14 = *(void **)(a1 + 32);
  }
}

const void *sub_1001687A8(uint64_t a1)
{
  if (a1 && (CFDictionaryRef v1 = *(const __CFDictionary **)(a1 + 32)) != 0) {
    return CFDictionaryGetValue(v1, @"VIRT_IF_NAME");
  }
  else {
    return 0;
  }
}

void sub_1001687C8(uint64_t a1)
{
  CFDictionaryRef v1 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100168858;
  block[3] = &unk_100242C80;
  objc_copyWeak(&v3, (id *)(a1 + 40));
  dispatch_async(v1, block);
  objc_destroyWeak(&v3);
}

void sub_100168858(uint64_t a1)
{
  CFDictionaryRef v1 = [objc_loadWeak((id *)(a1 + 32)) virtualInterface];
  if (v1)
  {
    CFArrayRef v2 = v1;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: received APPLE80211_M_AWDL_STATISTICS event.", @"__WiFiVirtualInterfaceProcessAwdlStatisticsEvent"];
    }
    uint64_t v4 = v2[3];
    sub_100049B0C(v4);
  }
}

void sub_1001688F0(uint64_t a1, char a2)
{
  id v3 = *(NSObject **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100168990;
  v4[3] = &unk_100242D48;
  objc_copyWeak(&v5, (id *)(a1 + 40));
  char v6 = a2;
  dispatch_async(v3, v4);
  objc_destroyWeak(&v5);
}

void sub_100168990(uint64_t a1)
{
  CFArrayRef v2 = [objc_loadWeak((id *)(a1 + 32)) virtualInterface];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(unsigned __int8 *)(a1 + 40);
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: didStart %d", "__WiFiVirtualInterfaceProcessAWDLRealTimeModeEvent", v4);
    }
    char v6 = (void (*)(uint64_t, uint64_t, uint64_t))v3[17];
    if (v6)
    {
      uint64_t v7 = v3[3];
      uint64_t v8 = v3[18];
      v6(v7, v4, v8);
    }
  }
}

void sub_100168A4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100168AF4;
  void v5[3] = &unk_100242D98;
  objc_copyWeak(v6, (id *)(a1 + 40));
  v6[1] = v3;
  dispatch_async(v4, v5);
  objc_destroyWeak(v6);
}

void sub_100168AF4(uint64_t a1)
{
  if ([objc_loadWeak((id *)(a1 + 32)) virtualInterface] && !*(void *)(a1 + 40))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"invalid args: virtInf:%s, eventDict:%s", @"Null", @"non-Null"];
    }
  }
  CFArrayRef v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

void sub_100168BA4(uint64_t a1, char a2, __int16 a3)
{
  id v5 = *(NSObject **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  id v6[2] = sub_100168C4C;
  void v6[3] = &unk_100242DE8;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  char v9 = a2;
  __int16 v8 = a3;
  dispatch_async(v5, v6);
  objc_destroyWeak(&v7);
}

void sub_100168C4C(uint64_t a1)
{
  id v2 = [objc_loadWeak((id *)(a1 + 32)) virtualInterface];
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  HIDWORD(v5) = *(unsigned __int8 *)(a1 + 42);
  LOWORD(v6) = *(_WORD *)(a1 + 40);
  if (v2)
  {
    id v3 = v2;
    CFDictionaryRef v4 = (const __CFDictionary *)*((void *)v2 + 4);
    if (v4) {
      CFDictionaryGetValue(v4, @"VIRT_IF_NAME");
    }
    sub_100168CC0(v3, (uint64_t)&v5);
  }
}

void sub_100168CC0(void *a1, uint64_t a2)
{
  id v3 = (void (*)(void, void, void))a1[19];
  if (v3) {
    v3(a1[3], *(unsigned __int16 *)(a2 + 8), a1[20]);
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: received APPLE80211_M_SOFTAP_CH_CHANGED_EVENT(%u) event", "__WiFiVirtualInterfaceProcessSoftAPChannelChangedEvent", *(unsigned __int16 *)(a2 + 8));
  }
}

void sub_100168D50(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFDictionaryRef v4 = *(NSObject **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100168DF8;
  void v5[3] = &unk_100242E38;
  objc_copyWeak(&v6, (id *)(a1 + 40));
  void v5[4] = v3;
  dispatch_async(v4, v5);
  objc_destroyWeak(&v6);
}

void sub_100168DF8(uint64_t a1)
{
  if ([objc_loadWeak((id *)(a1 + 40)) virtualInterface]) {
    [+[WiFiUsageMonitor sharedInstance] setAwdlSequence:*(void *)(a1 + 32)];
  }
  id v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t sub_100168E64(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    if (Apple80211EventMonitoringInit2())
    {
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:message:4, "%s: Unable to init event monitoring", "WiFiVirtualInterfaceMonitorEvents"];
      }
    }
    else if (!Apple80211StartMonitoringEvent() {
           && !Apple80211StartMonitoringEvent()
    }
           && !Apple80211StartMonitoringEvent())
    {
      return *(void *)(a1 + 16);
    }
    if (*(void *)(a1 + 16))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: failed to start event monitoring on %@", "WiFiVirtualInterfaceMonitorEvents", *(void *)(a1 + 40) message];
      }
      Apple80211EventMonitoringHalt();
      uint64_t result = 0;
      *(void *)(a1 + 16) = 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100168F8C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

CFDataRef sub_100168F98(uint64_t a1)
{
  *(void *)buffer = 0;
  uint64_t v16 = 0;
  id v2 = *(void **)(a1 + 184);
  if (!v2 || ![v2 isEnabled])
  {
    CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 32);
    if (v5)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v5, @"VIRT_IF_NAME");
      if (Value)
      {
        CFStringRef v7 = Value;
        CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
        CFStringGetCString(v7, buffer, 16, SystemEncoding);
        *(_OWORD *)id v17 = xmmword_1001CB9D0;
        int v18 = 3;
        unsigned int v19 = if_nametoindex(buffer);
        size_t size = 0;
        sysctl(v17, 6u, 0, &size, 0, 0);
        if (size)
        {
          char v9 = (unsigned __int8 *)malloc_type_malloc(size, 0x992853B0uLL);
          if (v9)
          {
            uint64_t v10 = v9;
            if (sysctl(v17, 6u, v9, &size, 0, 0) < 0)
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: sysctl failed.", "WiFiVirtualInterfaceCopyMACAddress")];
              }
              CFDataRef v11 = 0;
            }
            else
            {
              CFDataRef v11 = CFDataCreate(kCFAllocatorDefault, &v10[v10[117] + 120], 6);
            }
            free(v10);
            return v11;
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"%s: reqBuff is NULL." : @"WiFiVirtualInterfaceCopyMACAddress"];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: failed to get mib length.", "WiFiVirtualInterfaceCopyMACAddress")];
          }
        }
      }
    }
    return 0;
  }
  id v3 = [[objc_msgSend(*(id *)(a1 + 184), "macAddress") data];
  if (!v3) {
    return 0;
  }

  return (CFDataRef)CFRetain(v3);
}

uint64_t sub_1001691E0(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null virtInf.", @"WiFiVirtualInterfaceSetProperty"];
    }
    goto LABEL_26;
  }
  if (!cf)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null key.", "WiFiVirtualInterfaceSetProperty"];
    }
    goto LABEL_26;
  }
  if (!a3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null property.", "WiFiVirtualInterfaceSetProperty")
    }
LABEL_26:
    return 4294963396;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 == CFNumberGetTypeID() && *(void *)(a1 + 16))
  {
    int valuePtr = 0;
    if (CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr))
    {
      for (int i = 6; ; --i)
      {
        uint64_t result = Apple80211Set();
        if (result != -3905 && result != 61 && result != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      return result;
    }
    return 4294963396;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: unsupported key type for key %@", "WiFiVirtualInterfaceSetProperty", cf message];
  }
  return 4294963393;
}

uint64_t sub_100169388(uint64_t a1, int a2, uint64_t a3, CFDictionaryRef *a4)
{
  int valuePtr = a2;
  if (*(void *)(a1 + 16))
  {
    for (int i = 6; ; --i)
    {
      uint64_t result = Apple80211CopyValue();
      if (result != -3905 && result != 61 && result != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
  }
  else if (a4)
  {
    CFStringRef v8 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = (const void *)sub_100017C48(v9);
    CFDictionaryRef v11 = sub_100063150(v9, v10, v8);
    *a4 = v11;
    if (v8)
    {
      CFRelease(v8);
      CFDictionaryRef v11 = *a4;
    }
    if (v11) {
      return 0;
    }
    else {
      return 4294963365;
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_100169484(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 4294963393;
  }
  for (int i = 6; ; --i)
  {
    uint64_t result = Apple80211GetInfoCopy();
    if (result != -3905 && result != 61 && result != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  return result;
}

uint64_t sub_1001694FC(uint64_t a1, __CFDictionary **a2)
{
  int valuePtr = 0;
  uint64_t result = 4294963396;
  if (!a1 || !a2) {
    return result;
  }
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 32);
  if (!v5) {
    return 4294963393;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v5, @"VIRT_IF_ROLE");
  if (!Value) {
    return 4294963393;
  }
  CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr != 6) {
    return 4294963393;
  }
  CFStringRef v7 = *(void **)(a1 + 184);
  if (v7) {
    unsigned int v8 = [v7 isEnabled] ^ 1;
  }
  else {
    unsigned int v8 = 1;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 4294963395;
  }
  uint64_t v10 = Mutable;
  if (sub_10006F058(*(void *)(a1 + 24), *(const __CFString **)(a1 + 40))) {
    CFBooleanRef v11 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v11 = kCFBooleanFalse;
  }
  CFDictionarySetValue(v10, @"LINK_CHANGED_IS_AVAILABLE", v11);
  if (v8) {
    CFBooleanRef v12 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v12 = kCFBooleanFalse;
  }
  CFDictionarySetValue(v10, @"LINK_CHANGED_IS_LINKDOWN", v12);
  if (*(unsigned char *)(a1 + 224))
  {
    id v13 = [*(id *)(a1 + 192) queryPeerDatabase];
    if (v13)
    {
      CFTypeRef v14 = CFRetain(v13);
      if (v14)
      {
        uint64_t v15 = v14;
        CFDictionarySetValue(v10, @"LINK_CHANGED_PEER_LIST", v14);
        CFRelease(v15);
      }
    }
  }
  CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v16)
  {
    CFRelease(v10);
    return 4294963395;
  }
  id v17 = v16;
  CFDataRef v18 = sub_100168F98(a1);
  if (v18)
  {
    CFDataRef v19 = v18;
    CFDictionarySetValue(v17, @"AWDL_IF_MAC_ADDRESS", v18);
    CFRelease(v19);
  }
  CFDictionaryRef theDict = 0;
  sub_1001698C0(a1, &theDict);
  if (theDict)
  {
    CFRange v20 = CFDictionaryGetValue(theDict, @"AWDL_INFO_PREFERRED_CHANNEL");
    id v21 = CFDictionaryGetValue(theDict, @"AWDL_INFO_PEER_MASTER_CHANNEL");
    id v22 = CFDictionaryGetValue(theDict, @"AWDL_INFO_EXT");
    if (v20) {
      CFDictionarySetValue(v17, @"AWDL_INFO_PREFERRED_CHANNEL", v20);
    }
    if (v21) {
      CFDictionarySetValue(v17, @"AWDL_INFO_PEER_MASTER_CHANNEL", v21);
    }
    if (sub_10006AC44(*(void *)(a1 + 24)) && v22) {
      CFDictionarySetValue(v17, @"AWDL_INFO_EXT", v22);
    }
    id v23 = *(const void **)(a1 + 232);
    if (v23)
    {
      CFRelease(v23);
      *(void *)(a1 + 232) = 0;
    }
    *(void *)(a1 + 232) = CFRetain(theDict);
    if (theDict)
    {
      CFRelease(theDict);
      CFDictionaryRef theDict = 0;
    }
  }
  int v29 = sub_100169AC4(a1);
  CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v29);
  if (v24)
  {
    CFNumberRef v25 = v24;
    CFDictionarySetValue(v17, @"AWDL_INFO_SUPPORTED_CHANNEL_FLAGS", v24);
    CFRelease(v25);
  }
  int v28 = 2;
  CFNumberRef v26 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v28);
  if (v26)
  {
    CFNumberRef v27 = v26;
    CFDictionarySetValue(v17, @"AWDL_INFO_ASSISTED_DISCOVERY_METRIC", v26);
    CFRelease(v27);
  }
  CFDictionarySetValue(v10, @"AWDL_INFO", v17);
  CFRelease(v17);
  uint64_t result = 0;
  *a2 = v10;
  return result;
}

uint64_t sub_100169830(uint64_t a1, unsigned int *a2)
{
  uint64_t result = *(void *)(a1 + 184);
  if (result)
  {
    uint64_t result = (uint64_t)[(id)result isEnabled];
    if (a2)
    {
      if (result)
      {
        *a2 = [*(id *)(a1 + 184) substate];
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL sync state is enabled with schedule state = %d", "WiFiVirtualInterfaceGetAwdlSyncState", *a2);
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1001698C0(uint64_t a1, __CFDictionary **a2)
{
  if (!a1 || !a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null params.", "WiFiVirtualInterfaceCopyAwdlPreferredChannels")];
    }
    goto LABEL_18;
  }
  if (!*(void *)(a1 + 184))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: no awdl state" args:("WiFiVirtualInterfaceCopyAwdlPreferredChannels", 0x0, 0x0)];
    }
LABEL_18:
    return 4294963396;
  }
  *a2 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 4294963395;
  }
  CFDictionaryRef v5 = Mutable;
  *(_WORD *)bytes = -21846;
  unsigned __int16 valuePtr = (unsigned __int16)[[(id)objc_msgSend(*(id *)(a1 + 184), "peerPrimaryPreferredChannel") channelNumber];
  unsigned __int16 v14 = 0;
  if (!sub_10006AE4C(*(void *)(a1 + 24), valuePtr, &v14)) {
    unsigned __int16 valuePtr = v14;
  }
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
  if (!v6) {
    goto LABEL_12;
  }
  CFNumberRef v7 = v6;
  CFDictionarySetValue(v5, @"AWDL_INFO_PREFERRED_CHANNEL", v6);
  CFRelease(v7);
  unsigned __int16 valuePtr = (unsigned __int16)[objc_msgSend(*(id *)(a1 + 184), "peerMasterChannel") channelNumber];
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
  if (!v8
    || (CFNumberRef v9 = v8,
        CFDictionarySetValue(v5, @"AWDL_INFO_PEER_MASTER_CHANNEL", v8),
        CFRelease(v9),
        *(_WORD *)bytes = (unsigned __int16)objc_msgSend(objc_msgSend(*(id *)(a1 + 184), "peerSecondaryPreferredChannel"), "channelNumber"), (CFDataRef v10 = CFDataCreate(kCFAllocatorDefault, bytes, 2)) == 0))
  {
LABEL_12:
    CFRelease(v5);
    return 4294963395;
  }
  CFDataRef v11 = v10;
  CFDictionarySetValue(v5, @"AWDL_INFO_EXT", v10);
  CFRelease(v11);
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t sub_100169AC4(uint64_t a1)
{
  CFArrayRef theArray = 0;
  sub_100169388(a1, 27, 0, &theArray);
  if (theArray)
  {
    if (CFArrayGetCount(theArray) < 1)
    {
      unsigned int v3 = 0;
    }
    else
    {
      CFIndex v2 = 0;
      unsigned int v3 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v2);
        if (ValueAtIndex)
        {
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"SUP_CHANNEL");
          if (Value)
          {
            unsigned int valuePtr = -1431655766;
            CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
            if (valuePtr >= 0xF)
            {
              int v6 = v3 | (valuePtr - 36 < 0xF);
              if (valuePtr - 50 < 0xF) {
                v6 |= 2u;
              }
              if (valuePtr - 100 < 0x2D) {
                v6 |= 4u;
              }
              if (valuePtr - 142 < 0x18 || valuePtr == 138) {
                unsigned int v3 = v6 | 8;
              }
              else {
                unsigned int v3 = v6;
              }
            }
          }
        }
        ++v2;
      }
      while (v2 < CFArrayGetCount(theArray));
    }
    if (theArray)
    {
      CFRelease(theArray);
      CFArrayRef theArray = 0;
    }
  }
  else
  {
    unsigned int v3 = 0;
  }
  if (sub_10006AD48(*(void *)(a1 + 24))) {
    return v3 | 0x20000;
  }
  else {
    return v3;
  }
}

uint64_t sub_100169C00(uint64_t a1, __CFDictionary **a2)
{
  if (!a1 || (CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 32)) == 0)
  {
    int valuePtr = 0;
    goto LABEL_16;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"VIRT_IF_ROLE");
  int valuePtr = 0;
  if (!Value || (CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr), valuePtr != 6))
  {
LABEL_16:
    for (int i = 6; ; --i)
    {
      uint64_t v21 = Apple80211CopyCurrentNetwork();
      uint64_t v18 = v21;
      if (v21 != -3905 && v21 != 61 && v21 != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    return v18;
  }
  *(_OWORD *)bytes = 0u;
  long long v25 = 0u;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 4294963395;
  }
  CFNumberRef v7 = Mutable;
  CFDataRef v8 = sub_100168F98(a1);
  if (v8)
  {
    CFDataRef v9 = v8;
    BytePtr = (const ether_addr *)CFDataGetBytePtr(v8);
    CFDataRef v11 = ether_ntoa(BytePtr);
    if (v11)
    {
      CFBooleanRef v12 = v11;
      CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
      CFStringRef v14 = CFStringCreateWithCString(kCFAllocatorDefault, v12, SystemEncoding);
      if (v14)
      {
        CFStringRef v15 = v14;
        CFDictionarySetValue(v7, @"BSSID", v14);
        CFRelease(v15);
      }
    }
    CFDictionarySetValue(v7, @"STATION_MAC", v9);
    CFRelease(v9);
  }
  CFDictionarySetValue(v7, @"SSID_STR", &stru_100248240);
  CFDataRef v16 = CFDataCreate(kCFAllocatorDefault, bytes, 32);
  if (v16)
  {
    id v17 = v16;
    CFDictionarySetValue(v7, @"SSID", v16);
    uint64_t v18 = 0;
    *a2 = v7;
    CFNumberRef v7 = v17;
  }
  else
  {
    uint64_t v18 = 4294963395;
  }
  CFRelease(v7);
  return v18;
}

uint64_t sub_100169DFC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    for (int i = 6; ; --i)
    {
      uint64_t result = Apple80211GetPowerState();
      if (result != -3905 && result != 61 && result != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = sub_100017C48(v3);
    sub_10006B8D8(v3, v4);
    return 0;
  }
  return result;
}

uint64_t sub_100169E8C(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 4294963393;
  }
  for (int i = 6; ; --i)
  {
    uint64_t result = Apple80211SetPowerState();
    if (result != -3905 && result != 61 && result != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  return result;
}

uint64_t sub_100169F04(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1[2]) {
    return 4294963393;
  }
  a1[9] = a3;
  a1[10] = a4;
  for (int i = 6; ; --i)
  {
    uint64_t v6 = Apple80211ScanAsync();
    uint64_t v7 = v6;
    if ((int)v6 <= 15)
    {
      if (v6 != -3905) {
        break;
      }
    }
    else if (v6 != 61 && v6 != 16)
    {
      goto LABEL_11;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  if (!v6) {
    return v7;
  }
LABEL_11:
  sub_100169FB0(a1, a1[5], 0, v6);
  return v7;
}

void sub_100169FB0(void *a1, uint64_t a2, __CFArray *a3, uint64_t a4)
{
  CFDataRef v9 = (void (*)(void, uint64_t, __CFArray *, void, uint64_t, uint64_t))a1[9];
  uint64_t v8 = a1[10];
  CFDataRef v10 = a1 + 9;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Completed Apple80211ScanAsync on %@ (0x%x)", a2, a4 message];
  }
  if (a3)
  {
    CFTypeID v12 = CFGetTypeID(a3);
    if (v12 == CFArrayGetTypeID()) {
      a3 = sub_10005A4C4(a3);
    }
    else {
      a3 = 0;
    }
  }
  void *v10 = 0;
  v10[1] = 0;
  if (v9) {
    v9(a1[3], a2, a3, 0, a4, v8);
  }
  if (a3) {
    CFRelease(a3);
  }
  uint64_t v13 = a1[3];

  sub_10006E9C0(v13);
}

uint64_t sub_10016A0AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  if (!a1[2]) {
    return 4294963393;
  }
  a1[7] = a6;
  a1[8] = a7;
  int v7 = 6;
  if (a5)
  {
    while (1)
    {
      uint64_t result = Apple80211AssociateAsync();
      if (result != -3905 && result != 61 && result != 16) {
        break;
      }
      if (!v7) {
        break;
      }
      usleep(0x7A120u);
      --v7;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = Apple80211Associate();
      if (result != -3905 && result != 61 && result != 16) {
        break;
      }
      if (!v7) {
        break;
      }
      usleep(0x7A120u);
      --v7;
    }
  }
  return result;
}

uint64_t sub_10016A174(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1[2]) {
    return 4294963393;
  }
  a1[11] = a4;
  a1[12] = a5;
  for (int i = 6; ; --i)
  {
    uint64_t v8 = Apple80211Set();
    uint64_t v9 = v8;
    if ((int)v8 <= 15)
    {
      if (v8 != -3905) {
        break;
      }
    }
    else if (v8 != 61 && v8 != 16)
    {
      goto LABEL_11;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  if (!v8) {
    return v9;
  }
LABEL_11:
  sub_10016A234(a1, a2, v8);
  return v9;
}

void sub_10016A234(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef v5 = (void (*)(void, uint64_t, uint64_t, uint64_t))a1[11];
  uint64_t v4 = a1[12];
  a1[11] = 0;
  a1[12] = 0;
  if (v5) {
    v5(a1[3], a2, a3, v4);
  }
  uint64_t v6 = a1[3];

  sub_10006E9C0(v6);
}

uint64_t sub_10016A27C(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 4294963393;
  }
  for (int i = 6; ; --i)
  {
    uint64_t result = Apple80211Disassociate();
    if (result != -3905 && result != 61 && result != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  return result;
}

void sub_10016A2E4(uint64_t a1, uint64_t a2, int a3, __CFArray *a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    id v14 = (id)sub_10000D990((uint64_t)"__WiFiVirtualInterfaceEventCallback");
    if (sub_10000D630(*(uint64_t **)(a6 + 24), a3) == 1)
    {
      if (a3 > 9)
      {
        if (a3 == 10)
        {
          sub_100169FB0((void *)a6, *(void *)(a6 + 40), a4, a1);
        }
        else if (a3 == 172)
        {
          sub_100168CC0((void *)a6, (uint64_t)a4);
        }
      }
      else if (a3 == 8)
      {
        sub_10016A234((void *)a6, *(void *)(a6 + 40), a1);
      }
      else if (a3 == 9)
      {
        uint64_t v10 = *(void *)(a6 + 40);
        CFTypeID v12 = *(void (**)(void, uint64_t, __CFArray *, void, uint64_t, uint64_t))(a6 + 56);
        uint64_t v11 = *(void *)(a6 + 64);
        *(void *)(a6 + 56) = 0;
        *(void *)(a6 + 64) = 0;
        if (a4)
        {
          CFTypeID v13 = CFGetTypeID(a4);
          if (v13 == CFDictionaryGetTypeID()) {
            a4 = (__CFArray *)sub_100019658((int)kCFAllocatorDefault, a4);
          }
          else {
            a4 = 0;
          }
        }
        if (v12) {
          v12(*(void *)(a6 + 24), v10, a4, 0, a1, v11);
        }
        if (a4) {
          CFRelease(a4);
        }
      }
    }
  }
}

uint64_t sub_10016A448(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 104) = a2;
  *(void *)(result + 112) = a3;
  return result;
}

uint64_t sub_10016A450(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 120) = a2;
  *(void *)(result + 128) = a3;
  return result;
}

uint64_t sub_10016A458(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 136) = a2;
  *(void *)(result + 144) = a3;
  return result;
}

uint64_t sub_10016A460(int a1, const void *a2, CFTypeRef cf1)
{
  if (cf1) {
    BOOL v4 = CFEqual(cf1, kCFBooleanTrue) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (qword_10027DD68)
  {
    uint64_t v6 = "Y";
    if (v4) {
      uint64_t v6 = "N";
    }
    [(id)qword_10027DD68 WFLog:3, "%s: UUID %@, active %s", "WiFiVirtualInterfaceSetAppTrafficPolicy", a2, v6 message];
  }
  if (CFEqual(a2, @"CARPLAY_UUID"))
  {
    uint64_t v7 = 6;
  }
  else if (CFEqual(a2, @"FACETIME_UUID"))
  {
    uint64_t v7 = 10;
  }
  else
  {
    if (!CFEqual(a2, @"WiFiCallingUUID"))
    {
      if (CFEqual(a2, @"airplay")) {
        return 0;
      }
      else {
        return 4294963396;
      }
    }
    uint64_t v7 = 11;
  }
  id v8 = +[WiFiP2PSPITransactionRequestor shared];
  if (v4)
  {
    [v8 endTransaction:v7];
  }
  else
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10016A5F4;
    v10[3] = &unk_100241CF8;
    v10[4] = v7;
    [v8 beginTransaction:v7 completionHandler:v10];
  }
  return 0;
}

void sub_10016A5F4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, @"Transaction %d abruptly ended because %d", *(void *)(a1 + 32), a2];
    }
  }
}

uint64_t sub_10016A674(uint64_t a1, CFArrayRef theArray)
{
  unsigned int Count = CFArrayGetCount(theArray);
  id v5 = +[NSMutableArray array];
  uint64_t v6 = Count;
  if (Count)
  {
    CFIndex v7 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v7);
      if (ValueAtIndex)
      {
        CFDictionaryRef v9 = ValueAtIndex;
        CFTypeID v10 = CFGetTypeID(ValueAtIndex);
        if (v10 == CFDictionaryGetTypeID())
        {
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v9, @"MWS_Channel_Number");
          unsigned int valuePtr = -1431655766;
          if (Value)
          {
            CFNumberRef v12 = Value;
            CFTypeID v13 = CFGetTypeID(Value);
            if (v13 == CFNumberGetTypeID())
            {
              CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
              id v14 = objc_alloc((Class)WiFiChannel);
              LOBYTE(v17) = 0;
              id v15 = [v14 initWithChannelNumber:valuePtr bandwidth:1 is2_4GHz:valuePtr < 0xF is5GHz:valuePtr > 0xE is6GHz:0 isDFS:0 extensionChannelAbove:v17];
              [v5 addObject:v15];
            }
          }
        }
      }
      ++v7;
    }
    while (v6 != v7);
  }
  if ([*(id *)(a1 + 192) updateLTERestrictedChannels:v5 error:0]) {
    return 0;
  }
  else {
    return 4294963365;
  }
}

uint64_t sub_10016A7C8(uint64_t a1, const void *a2, const __CFDictionary *a3, void (*a4)(void, const void *, void, void), uint64_t a5, const __CFString *a6)
{
  uint64_t v11 = dispatch_semaphore_create(0);
  long long v31 = a2;
  if (a3 && CFDictionaryGetValue(a3, @"APPLE80211KEY_AWDL_INFO_ASSISTED_DISCOVERY_FOLLOW"))
  {
    int valuePtr = 1;
    CFAllocatorRef v12 = kCFAllocatorDefault;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (!Mutable)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: null follow mode policy.", @"WiFiVirtualInterfaceStartAwdl"];
      }
      uint64_t v25 = 4294963396;
      if (v11) {
        goto LABEL_30;
      }
      return v25;
    }
    id v14 = Mutable;
    CFNumberRef v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
    if (v15)
    {
      CFNumberRef v16 = v15;
      CFDictionarySetValue(v14, @"APPLE80211KEY_RANGING_FOLLOW_MODE", v15);
      CFRelease(v16);
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"AWDL_INFO_PEER_PREFERRED_BAND");
    if (Value)
    {
      BOOL v33 = 0;
      CFNumberGetValue(Value, kCFNumberSInt32Type, &v33);
      BOOL v33 = v33;
      CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v33);
      CFDictionarySetValue(v14, @"APPLE80211KEY_RANGING_FOLLOW_MODE_BAND", v18);
      if (v18) {
        CFRelease(v18);
      }
    }
    CFDataRef v19 = sub_10016AC0C(a1, a2, (uint64_t)a3, kCFBooleanTrue);
    int v20 = 1;
  }
  else
  {
    CFDataRef v19 = sub_10016AE7C(a1, a2, a3, kCFBooleanTrue, a6);
    id v14 = 0;
    int v20 = 0;
    CFAllocatorRef v12 = kCFAllocatorDefault;
  }
  int v36 = 17563660;
  *(void *)bytes = 0xC064696669775F06;
  CFDataRef v21 = CFDataCreate(v12, bytes, 12);
  if (!v21) {
    goto LABEL_35;
  }
  id v22 = [objc_alloc((Class)AWDLServiceDiscoveryConfiguration) initWithKey:v21];
  id v23 = *(void **)(a1 + 208);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_10016B95C;
  v32[3] = &unk_10023EFA8;
  v32[4] = v11;
  [v23 startServiceDiscoveryWithConfiguration:v22 completionHandler:v32];

  dispatch_time_t v24 = dispatch_time(0, 2000000000);
  if (dispatch_semaphore_wait(v11, v24))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: timed out waiting for assisted discovery registration" : @"WiFiVirtualInterfaceStartAwdl"];
    }
LABEL_35:
    uint64_t v25 = 4294963396;
    goto LABEL_23;
  }
  uint64_t v25 = sub_10016B964(a1, (uint64_t)v19);
  if (v25)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: APPLE80211_IOC_AWDL_PEER_TRAFFIC_REGISTRATION returned error %d.", "WiFiVirtualInterfaceStartAwdl", v25);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: AWDL brought up with wifid assisted policy %@", "WiFiVirtualInterfaceStartAwdl", v19 message];
    }
    if (v20)
    {
      sub_10006FEAC(*(void *)(a1 + 24));
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: AWDL brought up with wifid follow mode %@", "WiFiVirtualInterfaceStartAwdl", v14 message];
      }
    }
    if (a4)
    {
      *(unsigned char *)(a1 + 224) = 1;
      a4(*(void *)(a1 + 24), v31, 0, 0);
    }
    uint64_t v25 = 0;
  }
LABEL_23:
  if (v19) {
    CFRelease(v19);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v11) {
LABEL_30:
  }
    dispatch_release(v11);
  return v25;
}

__CFDictionary *sub_10016AC0C(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  values = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null AWDL interface.", "__WiFiVirtualInterfaceCreateFollowModePolicyFromRequest")];
    }
    goto LABEL_16;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null ifname." arguments:("__WiFiVirtualInterfaceCreateFollowModePolicyFromRequest")];
    }
    goto LABEL_16;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null policy.", "__WiFiVirtualInterfaceCreateFollowModePolicyFromRequest")
    }
LABEL_16:
    id v8 = 0;
    goto LABEL_7;
  }
  id v8 = Mutable;
  CFDictionarySetValue(Mutable, @"TR_SRV_NAME", @"ranging-Intiator");
  values = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (values)
  {
    CFArrayRef v9 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
    if (v9)
    {
      CFArrayRef v10 = v9;
      CFDictionarySetValue(v8, @"TR_PEER_CONTEXTS", v9);
      CFRelease(v10);
      CFDictionarySetValue((CFMutableDictionaryRef)values, @"TR_IFNAME", a2);
      CFDictionarySetValue(v8, @"TR_ACTIVE", a4);
      if (a3) {
        goto LABEL_7;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no AWDL request", "__WiFiVirtualInterfaceCreateFollowModePolicyFromRequest")
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: null peer Context array." : @"__WiFiVirtualInterfaceCreateFollowModePolicyFromRequest"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null peerContext." : @"__WiFiVirtualInterfaceCreateFollowModePolicyFromRequest"];
    }
  }
LABEL_7:
  if (values) {
    CFRelease(values);
  }
  return v8;
}

__CFDictionary *sub_10016AE7C(uint64_t a1, const void *a2, const __CFDictionary *a3, const void *a4, const __CFString *a5)
{
  values = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null AWDL interface.", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest")
    }
    goto LABEL_172;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null ifname." arguments:("__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest", nil)];
    }
    goto LABEL_172;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null policy." args:__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest];
    }
LABEL_172:
    uint64_t v11 = 0;
    goto LABEL_149;
  }
  uint64_t v11 = Mutable;
  CFDictionarySetValue(Mutable, @"TR_SRV_NAME", @"wifid-assisted-discovery");
  values = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!values)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null peerContext.", @"__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest"];
    }
    goto LABEL_179;
  }
  CFArrayRef v12 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  if (!v12)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null peer Context array."];
    }
    goto LABEL_179;
  }
  CFArrayRef v13 = v12;
  CFDictionarySetValue(v11, @"TR_PEER_CONTEXTS", v12);
  CFRelease(v13);
  CFDictionarySetValue((CFMutableDictionaryRef)values, @"TR_IFNAME", a2);
  CFDictionarySetValue(v11, @"TR_ACTIVE", a4);
  if (!a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: no AWDL request", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest"];
    }
LABEL_179:
    goto LABEL_149;
  }
  int valuePtr = 1;
  if (a5 && CFEqual(a5, @"mobilewifitool")) {
    valuePtr |= 0x80u;
  }
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (v14)
  {
    CFNumberRef v15 = v14;
    CFDictionarySetValue(v11, @"TR_SESSION_FLAGS", v14);
    CFRelease(v15);
  }
  int v71 = 0;
  uint64_t v70 = 0;
  int v69 = 0;
  uint64_t v64 = sub_100169AC4(a1);
  CFDictionaryRef theDict = 0;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a3, @"AWDL_INFO_SELF");
  CFStringRef v62 = a5;
  uint64_t v63 = v11;
  CFStringRef v61 = a4;
  if (!Value)
  {
    CFDataRef v21 = *(const void **)(a1 + 232);
    if (v21)
    {
      CFDictionaryRef v22 = (const __CFDictionary *)CFRetain(v21);
      CFDictionaryRef theDict = v22;
      if (v22)
      {
        CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(v22, @"AWDL_INFO_PEER_MASTER_CHANNEL");
        if (v23) {
          CFNumberGetValue(v23, kCFNumberSInt16Type, &v69);
        }
        CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"AWDL_INFO_PREFERRED_CHANNEL");
        if (v24) {
          CFNumberGetValue(v24, kCFNumberSInt16Type, (char *)&v69 + 2);
        }
        CFDictionaryRef v20 = theDict;
        goto LABEL_25;
      }
    }
    else
    {
      Apple80211CopyAwdlPreferredChannels();
    }
    CFDataRef v25 = 0;
    goto LABEL_26;
  }
  CFDictionaryRef v17 = Value;
  CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(Value, @"AWDL_INFO_PEER_MASTER_CHANNEL");
  if (v18) {
    CFNumberGetValue(v18, kCFNumberSInt16Type, &v69);
  }
  CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(v17, @"AWDL_INFO_PREFERRED_CHANNEL");
  if (v19) {
    CFNumberGetValue(v19, kCFNumberSInt16Type, (char *)&v69 + 2);
  }
  CFDictionaryRef v20 = v17;
LABEL_25:
  CFDataRef v25 = (const __CFData *)CFDictionaryGetValue(v20, @"AWDL_INFO_EXT");
LABEL_26:
  unsigned int v26 = (unsigned __int16)v69;
  if (!sub_10006AC44(*(void *)(a1 + 24))
    || !v25
    || (*(_WORD *)buffer = -21846, CFDataGetLength(v25) != 2)
    || (v74.location = 0, v74.length = 2, CFDataGetBytes(v25, v74, buffer), (unsigned __int16 v27 = *(_WORD *)buffer) == 0))
  {
    unsigned __int16 v27 = HIWORD(v69);
  }
  if (theDict)
  {
    CFRelease(theDict);
    CFDictionaryRef theDict = 0;
  }
  CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(a3, @"AWDL_INFO_ASSISTED_DISCOVERY_METRIC");
  CFNumberRef v29 = v28;
  if (v28)
  {
    CFNumberGetValue(v28, kCFNumberSInt32Type, (char *)&v70 + 4);
    uint64_t v30 = 2;
  }
  else
  {
    uint64_t v30 = 0;
  }
  CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(a3, @"AWDL_INFO_PEER_MASTER_CHANNEL");
  if (v31)
  {
    CFNumberGetValue(v31, kCFNumberSInt16Type, &v71);
    BOOL v32 = (unsigned __int16)v71 > 0xEu;
  }
  else
  {
    BOOL v32 = 0;
  }
  CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(a3, @"AWDL_INFO_PREFERRED_CHANNEL");
  if (v33) {
    CFNumberGetValue(v33, kCFNumberSInt16Type, (char *)&v71 + 2);
  }
  CFDataRef v34 = (const __CFData *)CFDictionaryGetValue(a3, @"AWDL_INFO_EXT");
  unsigned __int16 v35 = 255;
  if (sub_10006AC44(*(void *)(a1 + 24)) && v34)
  {
    CFIndex Length = CFDataGetLength(v34);
    *(_WORD *)buffer = -21846;
    if (Length == 2)
    {
      v75.id location = 0;
      v75.length = 2;
      CFDataGetBytes(v34, v75, buffer);
      if (*(_WORD *)buffer) {
        unsigned __int16 v35 = *(_WORD *)buffer;
      }
      else {
        unsigned __int16 v35 = HIWORD(v71);
      }
    }
    else
    {
      unsigned __int16 v35 = 0;
    }
  }
  CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue(a3, @"AWDL_INFO_SUPPORTED_CHANNEL_FLAGS");
  if (v37)
  {
    CFNumberGetValue(v37, kCFNumberSInt32Type, &v70);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: supported channel flags key not found", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest")];
    }
    LODWORD(v70) = v64;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: self(metric=%d): preferred=%d master=%d secondary channel=%d flags=0x%x; peer(metric=%d): preferred=%d master="
  }
      "%d secondary channel=%d flags=0x%x",
      "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest",
      v30,
      HIWORD(v69),
      (unsigned __int16)v69,
      v27,
      v64,
      HIDWORD(v70),
      HIWORD(v71),
      (unsigned __int16)v71,
      v35,
      v70);
  if (v26 <= 0xE || !v32)
  {
    if (HIWORD(v69) >= 0xFu) {
      HIWORD(v69) = 0;
    }
    if (HIWORD(v71) >= 0xFu) {
      HIWORD(v71) = 0;
    }
    if ((unsigned __int16)v69 >= 0xFu) {
      LOWORD(v69) = 0;
    }
    if ((unsigned __int16)v71 >= 0xFu) {
      LOWORD(v71) = 0;
    }
    if (v27 > 0xEu) {
      unsigned __int16 v27 = 0;
    }
    if (v35 != 255 && v35 >= 0xFu) {
      unsigned __int16 v35 = 0;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: reset: self(metric=%d): preferred=%d master=%d secondary channel=%d; peer(metric=%d): preferred=%d  master=%"
    }
        "d secondary channel=%d",
        "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest",
        v30,
        HIWORD(v69),
        (unsigned __int16)v69,
        v27,
        HIDWORD(v70),
        HIWORD(v71),
        (unsigned __int16)v71,
        v35);
  }
  __int16 v66 = 255;
  if (v29 || HIDWORD(v70) == 2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: overriding preferred ranging channel to channel 6 for iPhone/iPad", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest")];
    }
    unsigned int v43 = 6;
    __int16 v66 = 6;
    if ((int)v30 < SHIDWORD(v70))
    {
LABEL_89:
      if (v35)
      {
        if (v35 == 255)
        {
          __int16 v65 = v43;
          unsigned __int16 v35 = v43;
LABEL_111:
          CFStringRef v46 = v62;
          uint64_t v11 = v63;
          long long v47 = v61;
          goto LABEL_112;
        }
LABEL_110:
        __int16 v65 = v35;
        goto LABEL_111;
      }
      if (v27)
      {
        __int16 v65 = v27;
        unsigned __int16 v35 = v27;
        goto LABEL_111;
      }
      if (v43 == 1)
      {
        unsigned __int16 v35 = 6;
        goto LABEL_110;
      }
      CFStringRef v46 = v62;
      uint64_t v11 = v63;
      long long v47 = v61;
      if (v43 > 6)
      {
        if (v43 > 0xB)
        {
          __int16 v65 = v43;
          unsigned __int16 v35 = v43;
LABEL_112:
          CFDataRef v48 = (const __CFData *)CFDictionaryGetValue(a3, @"AWDL_IF_MAC_ADDRESS");
          CFDataRef v45 = v48;
          if (v48) {
            CFRetain(v48);
          }
          goto LABEL_114;
        }
        unsigned __int16 v35 = 1;
      }
      else
      {
        unsigned __int16 v35 = 11;
      }
      __int16 v65 = v35;
      goto LABEL_112;
    }
  }
  else
  {
    if ((int)v30 < SHIDWORD(v70))
    {
      unsigned int v43 = HIWORD(v71);
      if (HIWORD(v71)
        || (unsigned int v43 = HIWORD(v69), HIWORD(v69))
        || (unsigned int v43 = (unsigned __int16)v71, (_WORD)v71)
        || (unsigned int v43 = (unsigned __int16)v69, (_WORD)v69))
      {
        __int16 v66 = v43;
      }
      else
      {
        unsigned int v43 = 255;
      }
      goto LABEL_89;
    }
    unsigned int v43 = HIWORD(v69);
    if (HIWORD(v69)
      || (unsigned int v43 = HIWORD(v71), HIWORD(v71))
      || (unsigned int v43 = (unsigned __int16)v69, (_WORD)v69)
      || (unsigned int v43 = (unsigned __int16)v71, (_WORD)v71))
    {
      __int16 v66 = v43;
    }
    else
    {
      unsigned int v43 = 255;
    }
  }
  if (v35 == 255) {
    goto LABEL_98;
  }
  if (v27)
  {
LABEL_100:
    __int16 v65 = v27;
    goto LABEL_107;
  }
  if (v35)
  {
    __int16 v65 = v35;
    unsigned __int16 v27 = v35;
    goto LABEL_107;
  }
  if (v43 == 1)
  {
    unsigned __int16 v27 = 6;
    goto LABEL_100;
  }
  if (v43 <= 6)
  {
    unsigned __int16 v27 = 11;
    goto LABEL_100;
  }
  if (v43 <= 0xB)
  {
    unsigned __int16 v27 = 1;
    goto LABEL_100;
  }
LABEL_98:
  __int16 v65 = v43;
  unsigned __int16 v27 = v43;
LABEL_107:
  CFDataRef v45 = sub_100168F98(a1);
  unsigned __int16 v35 = v27;
  CFStringRef v46 = v62;
  uint64_t v11 = v63;
  long long v47 = v61;
LABEL_114:
  if (v43 >= 0xF)
  {
    uint64_t v49 = v70 & v64;
    unsigned int v50 = (v70 & v64 & 1) != 0 ? 44 : 6;
    uint64_t v51 = (v70 & v64 & 8) != 0 ? 149 : v50;
    if (v43 - 36 <= 0xE && (v70 & v64 & 1) == 0
      || v43 - 50 <= 0xE && (v70 & v64 & 2) == 0
      || v43 - 100 <= 0x2C && (v70 & v64 & 4) == 0
      || ((unsigned __int16)(v43 - 166) < 0xFFE8u ? (BOOL v52 = v43 == 138) : (BOOL v52 = 1),
          v52 && (v70 & v64 & 8) == 0))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: using fallback channel %d because preferred channel %d is not supported (flags 0x%x)", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest", v51, v43, v49];
      }
      __int16 v66 = v51;
      LOWORD(v43) = v51;
    }
  }
  if (v35 >= 0xFu) {
    __int16 v65 = v43;
  }
  CFNumberRef v54 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v66);
  CFNumberRef v55 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v65);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: preferred AWDL discovery channel = %@ secondary channel = %@ and sync-peer %@", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest", v54, v55, v45 message];
  }
  if (v45)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)values, @"TR_PEER_ADDRESS", v45);
    CFRelease(v45);
  }
  if (v54)
  {
    CFDictionarySetValue(v11, @"AWDL_TR_CHANNEL", v54);
    CFRelease(v54);
  }
  if (v55)
  {
    CFDictionarySetValue(v11, @"AWDL_TR_SEC_CHANNEL", v55);
    CFRelease(v55);
  }
  if (v47 && CFEqual(v47, kCFBooleanTrue))
  {
    id v57 = +[WiFiUsageMonitor sharedInstance];
    [(WiFiUsageMonitor *)v57 rangingSessionRequestedWithSelfPreferredChannel:HIWORD(v69) selfMainChannel:(unsigned __int16)v69 selfChannelFlags:v64 peerPreferredChannel:HIWORD(v71) peerMainChannel:(unsigned __int16)v71 peerChannelFlags:v70 requester:v46];
  }
LABEL_149:
  if (values) {
    CFRelease(values);
  }
  return v11;
}

intptr_t sub_10016B95C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_10016B964(uint64_t a1, uint64_t a2)
{
  char v9 = 0;
  id v3 = [objc_alloc((Class)AWDLTrafficRegistrationConfiguration) initWithDictionary:a2 isActive:&v9];
  if (v3)
  {
    BOOL v4 = *(void **)(a1 + 200);
    if (v9) {
      unsigned int v5 = [v4 setTrafficRegistration:v3 error:0];
    }
    else {
      unsigned int v5 = [v4 clearTrafficRegistration:v3 error:0];
    }
    if (v5) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = 4294963365;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"Failed to send traffic registration because failed to parse dictionary"];
    }
    uint64_t v6 = 4294963396;
  }

  return v6;
}

uint64_t sub_10016BA20(uint64_t a1, const void *a2, uint64_t a3)
{
  *(void *)bytes = 0xC064696669775F06;
  int v19 = 17563660;
  if (a3 && sub_10001E404(a3, @"APPLE80211KEY_AWDL_INFO_ASSISTED_DISCOVERY_FOLLOW"))
  {
    int valuePtr = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (!Mutable)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null follow mode policy.", "WiFiVirtualInterfaceStopAwdl")];
      }
      goto LABEL_18;
    }
    uint64_t v6 = Mutable;
    CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
    if (v7)
    {
      CFNumberRef v8 = v7;
      CFDictionarySetValue(v6, @"APPLE80211KEY_RANGING_FOLLOW_MODE", v7);
      CFRelease(v8);
    }
    sub_10006FEAC(*(void *)(a1 + 24));
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: AWDL bringdown with wifid follow mode %@", "WiFiVirtualInterfaceStopAwdl", v6 message];
    }
    CFRelease(v6);
    CFArrayRef v10 = sub_10016AC0C(a1, a2, 0, kCFBooleanFalse);
  }
  else
  {
    CFArrayRef v10 = sub_10016AE7C(a1, a2, 0, kCFBooleanFalse, 0);
  }
  uint64_t v11 = v10;
  if (v10)
  {
    sub_10016B964(a1, (uint64_t)v10);
    CFRelease(v11);
  }
  CFDataRef v12 = CFDataCreate(kCFAllocatorDefault, bytes, 12);
  if (!v12)
  {
LABEL_18:
    *(unsigned char *)(a1 + 224) = 0;
    return 4294963396;
  }
  CFDataRef v13 = v12;
  id v14 = [objc_alloc((Class)AWDLServiceDiscoveryConfiguration) initWithKey:v12];
  [*(id *)(a1 + 208) stopServiceDiscoveryWithConfiguration:v14];

  *(unsigned char *)(a1 + 224) = 0;
  CFRelease(v13);
  return 0;
}

uint64_t sub_10016BC68(uint64_t a1, void *a2)
{
  uint64_t result = 4294963396;
  if (a2)
  {
    BOOL v4 = *(void **)(a1 + 192);
    if (v4)
    {
      id v6 = [v4 copyStatistics];
      *a2 = v6;
      if (v6) {
        return 0;
      }
      else {
        return 4294963365;
      }
    }
  }
  return result;
}

uint64_t sub_10016BCB8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 152) = a2;
  *(void *)(result + 160) = a3;
  return result;
}

uint64_t sub_10016BCC0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 168) = a2;
  *(void *)(result + 176) = a3;
  return result;
}

uint64_t sub_10016BCC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null virtInf.", "WiFiVirtualInterfaceSetIoctl")];
    }
    goto LABEL_14;
  }
  if (!a4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null property." arguments:qword_10027DD68];
    }
LABEL_14:
    uint64_t v6 = 4294963396;
LABEL_18:
    return v6;
  }
  if (!*(void *)(a1 + 16))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Ioctls are not supported on this interface", "WiFiVirtualInterfaceSetIoctl")];
    }
    uint64_t v6 = 4294963393;
    goto LABEL_18;
  }
  for (int i = 6; ; --i)
  {
    uint64_t v5 = Apple80211Set();
    uint64_t v6 = v5;
    if (v5 != -3905 && v5 != 61 && v5 != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  return v6;
}

void sub_10016BE1C(uint64_t a1)
{
  if (!a1) {
    sub_100196F38();
  }
  CFTypeID v2 = CFGetTypeID((CFTypeRef)a1);
  uint64_t v3 = qword_10027DC48;
  if (!qword_10027DC48)
  {
    pthread_once(&stru_10027CF48, (void (*)(void))sub_100167D38);
    uint64_t v3 = qword_10027DC48;
  }
  if (v2 != v3) {
    sub_100196F64();
  }
  BOOL v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 32) = 0;
  }
  if (*(void *)(a1 + 16))
  {
    Apple80211EventMonitoringHalt();
    Apple80211Close();
    *(void *)(a1 + 16) = 0;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: calling WiFiP2PAWDLStateMonitor endMonitoring.", "__WiFiVirtualInterfaceRelease")];
  }
  [*(id *)(a1 + 192) endMonitoring];

  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;

  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 208) = 0;
  [*(id *)(a1 + 216) setVirtualInterface:0];

  *(void *)(a1 + 216) = 0;
  uint64_t v6 = *(const void **)(a1 + 232);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 232) = 0;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 24) = 0;
}

uint64_t sub_10016BF60(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 32);
    if (v5) {
      BOOL v6 = *(void *)(a2 + 32) == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6) {
      return 0;
    }
    CFDictionaryRef Value = CFDictionaryGetValue(v5, @"VIRT_IF_ROLE");
    CFDictionaryRef v8 = *(const __CFDictionary **)(a2 + 32);
    char v9 = v8 ? CFDictionaryGetValue(v8, @"VIRT_IF_ROLE") : 0;
    uint64_t result = CFEqual(Value, v9);
    if (result)
    {
      CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 32);
      uint64_t v11 = v10 ? CFDictionaryGetValue(v10, @"VIRT_IF_NAME") : 0;
      CFDictionaryRef v12 = *(const __CFDictionary **)(a2 + 32);
      CFDataRef v13 = v12 ? CFDictionaryGetValue(v12, @"VIRT_IF_NAME") : 0;
      uint64_t result = CFEqual(v11, v13);
      if (result)
      {
        CFDataRef v14 = sub_100168F98(a1);
        CFDataRef v15 = sub_100168F98(a2);
        if (CFEqual(v14, v15))
        {
          if (v14) {
            CFRelease(v14);
          }
          uint64_t v16 = 1;
          uint64_t result = 1;
          if (v15)
          {
LABEL_24:
            CFRelease(v15);
            return v16;
          }
        }
        else
        {
          if (v14) {
            CFRelease(v14);
          }
          uint64_t v16 = 0;
          uint64_t result = 0;
          if (v15) {
            goto LABEL_24;
          }
        }
      }
    }
  }
  return result;
}

CFHashCode sub_10016C0A4(uint64_t a1)
{
  CFDataRef v1 = sub_100168F98(a1);
  CFHashCode v2 = CFHash(v1);
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

CFStringRef sub_10016C0E0(uint64_t a1)
{
  unsigned int valuePtr = -1431655766;
  *(void *)buffer = 0;
  uint64_t v10 = 0;
  if (!a1) {
    goto LABEL_8;
  }
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 32);
  if (!v2) {
    goto LABEL_8;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v2, @"VIRT_IF_NAME");
  if (Value) {
    CFStringGetCString(Value, buffer, 16, 0);
  }
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 32);
  if (v4 && (CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(v4, @"VIRT_IF_ROLE")) != 0)
  {
    CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
    uint64_t v6 = valuePtr;
  }
  else
  {
LABEL_8:
    uint64_t v6 = 0;
    unsigned int valuePtr = 0;
  }
  return CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%-40s: ROLE: %d", buffer, v6);
}

uint64_t sub_10016C1C4()
{
  uint64_t result = qword_10027DC50;
  if (!qword_10027DC50)
  {
    pthread_once(&stru_10027CF58, (void (*)(void))sub_10016C20C);
    return qword_10027DC50;
  }
  return result;
}

uint64_t sub_10016C20C()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_10027DC50 = result;
  return result;
}

_OWORD *sub_10016C234()
{
  if (!qword_10027DC50) {
    pthread_once(&stru_10027CF58, (void (*)(void))sub_10016C20C);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  CFDataRef v1 = Instance;
  if (Instance)
  {
    Instance[2] = 0u;
    Instance[3] = 0u;
    Instance[1] = 0u;
    *((unsigned char *)Instance + 16) = 0;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    *((void *)v1 + 3) = Mutable;
    if (Mutable)
    {
      *((unsigned char *)v1 + 57) = 0;
      if (objc_opt_class()) {
        *((unsigned char *)v1 + 58) = [[+[LockdownModeManager shared](LockdownModeManager, "shared") enabled];
      }
    }
    else
    {
      CFRelease(v1);
      return 0;
    }
  }
  return v1;
}

void sub_10016C304(uint64_t a1, int a2)
{
  if (a1 && *(_DWORD *)(a1 + 20) != a2)
  {
    if (qword_10027DD68)
    {
      CFNumberRef v5 = "NonInteractive";
      if (a2 == 1) {
        CFNumberRef v5 = "Interactive";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "ATJManager: setting ask-to-join interaction mode to %s", v5);
    }
    *(_DWORD *)(a1 + 20) = a2;
    *(void *)(a1 + 40) = 0;
    sub_10016C3C4(a1);
  }
}

void sub_10016C3C4(uint64_t a1)
{
  if (!a1) {
    return;
  }
  CFArrayRef v2 = *(const __CFArray **)(a1 + 24);
  if (v2 && CFArrayGetCount(v2))
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 24)) >= 1)
    {
      for (CFIndex i = 0; i < CFArrayGetCount(*(CFArrayRef *)(a1 + 24)); ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), i);
        if (ValueAtIndex)
        {
          CFDictionaryRef v6 = ValueAtIndex;
          double Current = CFAbsoluteTimeGetCurrent();
          double v8 = sub_10016D188(v6);
          CFDateRef Value = (const __CFDate *)CFDictionaryGetValue(v6, @"atjHistTblEntCreationTimeStamp");
          if (!Value) {
            goto LABEL_19;
          }
          double AbsoluteTime = CFDateGetAbsoluteTime(Value);
          if (AbsoluteTime == 0.0 || Current <= AbsoluteTime)
          {
            if (qword_10027DD68)
            {
              CFNumberRef v24 = v16;
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: current time is less than creation time", "__WiFiATJMgrATJHistTblEntGetAverageInRangeTime")];
              uint64_t v16 = v24;
            }
LABEL_19:
            if (!CFEqual(v6, *(CFTypeRef *)(a1 + 32))) {
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), i--);
            }
            continue;
          }
          double v12 = (Current - AbsoluteTime) / 86400.0;
          if (v12 == 0.0) {
            double v12 = 1.0;
          }
          if (v8 / v12 < dbl_1001CB9F0[*(unsigned char *)(a1 + 57) == 0]) {
            goto LABEL_19;
          }
          double v13 = CFAbsoluteTimeGetCurrent();
          CFDateRef v14 = (const __CFDate *)CFDictionaryGetValue(v6, @"atjHistTblEntCreationTimeStamp");
          if (v14)
          {
            double v15 = CFDateGetAbsoluteTime(v14);
            if (v15 == 0.0 || v13 <= v15)
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:3 message:@"%s: current time is less than last seen time" args:("__WiFiATJMgrATJHistTblEntGetTimeElapsedSinceLastSeen")];
              }
              continue;
            }
            if (v13 - v15 > dbl_1001CBA00[*(unsigned char *)(a1 + 57) == 0]) {
              goto LABEL_19;
            }
          }
        }
      }
    }
    uint64_t v19 = qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_32;
    }
    CFIndex v22 = Count;
    CFIndex v23 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
    CFDictionaryRef v20 = "ATJManager: entries before cleanup %ld, entries after cleanup %ld";
    CFDataRef v21 = (void *)v19;
  }
  else
  {
    CFDataRef v21 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_32;
    }
    CFDictionaryRef v20 = "ATJManager: no entries to purge";
  }
  [v21 WFLog:3 message:v20, v22, v23];
LABEL_32:
}

void sub_10016C658(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 58))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: Lockdown Mode is enabled, ignoring SetATJMode %ld", "WiFiATJMgrSetATJMode", a2];
      }
    }
    else if (*(unsigned __int8 *)(a1 + 16) != a2)
    {
      *(unsigned char *)(a1 + 16) = a2;
      if (!a2)
      {
        CFNumberRef v5 = *(const void **)(a1 + 32);
        if (v5)
        {
          CFRelease(v5);
          *(void *)(a1 + 32) = 0;
        }
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        *(unsigned char *)(a1 + 56) = 0;
        CFDictionaryRef v6 = *(__CFArray **)(a1 + 24);
        CFArrayRemoveAllValues(v6);
      }
    }
  }
}

void sub_10016C73C(uint64_t a1, int a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 57) = a2;
    if (qword_10027DD68)
    {
      CFDictionaryRef v4 = "enabled";
      if (!a2) {
        CFDictionaryRef v4 = "disabled";
      }
      [((id)qword_10027DD68) WFLog:3 message:@"ATJManager: atj test mode %s ", v4];
    }
  }
}

uint64_t sub_10016C7C8(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 57);
  }
  return result;
}

uint64_t sub_10016C7D4(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 20);
  }
  return result;
}

uint64_t sub_10016C7E0(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 16);
  }
  return result;
}

BOOL sub_10016C7EC(uint64_t a1, BOOL a2, const __CFArray *a3, uint64_t a4)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (!a1) {
    return 0;
  }
  double v9 = Current;
  if (qword_10027DD68)
  {
    if (*(_DWORD *)(a1 + 20) == 1) {
      uint64_t v11 = "Interactive";
    }
    else {
      uint64_t v11 = "NonInteractive";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "ATJManager: atjAction=%d atjEnabled=%d userInteractionMode=%s discovered %ld networks", a4, *(unsigned __int8 *)(a1 + 16), v11, CFArrayGetCount((CFArrayRef)a2));
  }
  if (a2)
  {
    if (!CFArrayGetCount((CFArrayRef)a2) || *(_DWORD *)(a1 + 20) != 1)
    {
LABEL_33:
      a2 = 0;
      goto LABEL_118;
    }
    CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
    if (a3 && Count && CFArrayGetCount(a3) && CFArrayGetCount((CFArrayRef)a2) >= 1)
    {
      CFIndex v13 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v13);
        if (ValueAtIndex)
        {
          double v15 = ValueAtIndex;
          v84.length = CFArrayGetCount(a3);
          v84.id location = 0;
          if (CFArrayContainsValue(a3, v84, v15)) {
            break;
          }
        }
        if (++v13 >= CFArrayGetCount((CFArrayRef)a2)) {
          goto LABEL_18;
        }
      }
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:message:3, "%s: in range of preferred network.", "__WiFiATJMgrIsPreferredNetworkInRange"];
      }
      goto LABEL_33;
    }
LABEL_18:
    v85.length = CFArrayGetCount((CFArrayRef)a2);
    v85.id location = 0;
    CFArraySortValues((CFMutableArrayRef)a2, v85, (CFComparatorFunction)sub_1000CBB38, 0);
    CFDictionaryRef v16 = *(const __CFDictionary **)(a1 + 32);
    if (!v16) {
      goto LABEL_69;
    }
    if (sub_10016D08C(v16, (CFArrayRef)a2))
    {
      double v17 = *(double *)(a1 + 40);
      double v18 = v9 - v17;
      BOOL v19 = v17 == 0.0;
      double v20 = 0.0;
      if (!v19) {
        double v20 = v18;
      }
      if (v20 > 1800.0) {
        double v20 = 1800.0;
      }
      *(double *)(a1 + 48) = *(double *)(a1 + 48) + v20;
      if (qword_10027DD68)
      {
        CFIndex v22 = "monitored";
        if (!*(unsigned char *)(a1 + 56)) {
          CFIndex v22 = "unmonitored";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "ATJManager: device still at %s atj point for %f seconds", v22, *(void *)(a1 + 48));
      }
      CFIndex v23 = *(__CFDictionary **)(a1 + 32);
      if (v23)
      {
        a2 = 0;
LABEL_101:
        CFAbsoluteTime v69 = CFAbsoluteTimeGetCurrent();
        CFDateRef v70 = CFDateCreate(kCFAllocatorDefault, v69);
        if (v70)
        {
          CFDateRef v71 = v70;
          CFDictionarySetValue(v23, @"atjHistTblEntLastSeenTimeStamp", v70);
          CFRelease(v71);
        }
LABEL_103:
        CFDictionaryRef v72 = *(const __CFDictionary **)(a1 + 32);
        if (v72)
        {
          if (*(unsigned char *)(a1 + 57)) {
            int v73 = 120;
          }
          else {
            int v73 = 18000;
          }
          if (*(unsigned char *)(a1 + 57)) {
            int v74 = 5;
          }
          else {
            int v74 = 60;
          }
          if (a4 != 2) {
            int v73 = v74;
          }
          if (sub_10016D188(v72) + *(double *)(a1 + 48) > (double)v73)
          {
            CFDictionaryRef v75 = *(const __CFDictionary **)(a1 + 32);
            if (v75)
            {
              if (CFDictionaryGetValue(v75, @"atjHistTblEntUserPromptPending") == kCFBooleanTrue)
              {
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "ATJManager: prompt user for action=%d", a4);
                }
                a2 = 1;
              }
            }
          }
        }
        goto LABEL_118;
      }
LABEL_69:
      if (CFArrayGetCount((CFArrayRef)a2) && (CFIndex v49 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24)), v49 >= 1))
      {
        CFIndex v50 = v49;
        CFIndex v51 = 0;
        while (1)
        {
          CFDictionaryRef v52 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v51);
          if (v52)
          {
            if (sub_10016D08C(v52, (CFArrayRef)a2)) {
              break;
            }
          }
          if (v50 == ++v51) {
            goto LABEL_75;
          }
        }
        unsigned int v78 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v51);
        a2 = 0;
        *(void *)(a1 + 32) = CFRetain(v78);
        *(unsigned char *)(a1 + 56) = 1;
      }
      else
      {
LABEL_75:
        double valuePtr = 0.0;
        CFIndex v53 = CFArrayGetCount((CFArrayRef)a2);
        if (v53 && (uint64_t v54 = v53, (v55 = CFDateCreate(kCFAllocatorDefault, v9)) != 0))
        {
          CFDateRef v56 = v55;
          CFNumberRef v57 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
          if (v57)
          {
            CFNumberRef v58 = v57;
            CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
            if (Mutable)
            {
              CFArrayRef v60 = Mutable;
              CFStringRef v61 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              CFStringRef v62 = v61;
              if (v61)
              {
                uint64_t v82 = a4;
                CFDictionaryAddValue(v61, @"atjHistTblEntCreationTimeStamp", v56);
                CFDictionaryAddValue(v62, @"atjHistTblEntLastSeenTimeStamp", v56);
                CFDictionaryAddValue(v62, @"atjHistTblEntInRangeTime", v58);
                CFDictionarySetValue(v62, @"atjHistTblEntUserPromptPending", kCFBooleanTrue);
                if (v54 >= 1)
                {
                  for (CFIndex i = 0; i != v54; ++i)
                  {
                    if (CFArrayGetCount(v60) > 4) {
                      break;
                    }
                    uint64_t v64 = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
                    if (v64)
                    {
                      __int16 v65 = sub_10001E404((uint64_t)v64, @"BSSID");
                      if (v65)
                      {
                        __int16 v66 = v65;
                        v90.length = CFArrayGetCount(v60);
                        v90.id location = 0;
                        if (!CFArrayContainsValue(v60, v90, v66)) {
                          CFArrayAppendValue(v60, v66);
                        }
                      }
                    }
                  }
                }
                CFDictionaryAddValue(v62, @"atjHistTblEntBSSIDList", v60);
                if (!CFArrayGetCount(v60))
                {
                  CFRelease(v62);
                  CFStringRef v62 = 0;
                }
                a4 = v82;
              }
              CFRelease(v60);
            }
            else
            {
              CFStringRef v62 = 0;
            }
            CFRelease(v58);
          }
          else
          {
            CFStringRef v62 = 0;
          }
          CFRelease(v56);
        }
        else
        {
          CFStringRef v62 = 0;
        }
        *(void *)(a1 + 32) = v62;
        *(unsigned char *)(a1 + 56) = 0;
        a2 = a4 == 2;
      }
      *(void *)(a1 + 48) = 0;
      if (qword_10027DD68)
      {
        if (*(unsigned char *)(a1 + 56)) {
          long long v68 = "monitored";
        }
        else {
          long long v68 = "unmonitored";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "ATJManager: device detected at a previously %s atj point", v68);
      }
      CFIndex v23 = *(__CFDictionary **)(a1 + 32);
      if (!v23) {
        goto LABEL_103;
      }
      goto LABEL_101;
    }
    double v25 = *(double *)(a1 + 48);
    double v26 = 60.0;
    if (*(unsigned char *)(a1 + 57)) {
      double v26 = 25.0;
    }
    if (v25 <= v26) {
      goto LABEL_62;
    }
    unsigned __int16 v27 = *(__CFDictionary **)(a1 + 32);
    if (v27)
    {
      double valuePtr = v25 + sub_10016D188(*(const __CFDictionary **)(a1 + 32));
      CFNumberRef v28 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
      if (v28)
      {
        CFNumberRef v29 = v28;
        CFDictionarySetValue(v27, @"atjHistTblEntInRangeTime", v28);
        CFRelease(v29);
      }
    }
    if (*(unsigned char *)(a1 + 56))
    {
LABEL_62:
      if (qword_10027DD68)
      {
        long long v47 = "monitored";
        if (!*(unsigned char *)(a1 + 56)) {
          long long v47 = "unmonitored";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "ATJManager: device moved from %s atj point after %f seconds", v47, *(void *)(a1 + 48));
      }
      CFDataRef v48 = *(const void **)(a1 + 32);
      if (v48)
      {
        CFRelease(v48);
        *(void *)(a1 + 32) = 0;
      }
      *(void *)(a1 + 48) = 0;
      *(unsigned char *)(a1 + 56) = 0;
      goto LABEL_69;
    }
    CFArrayRef v30 = *(const __CFArray **)(a1 + 24);
    if (!v30)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s, ATJManager: atj table is NULL", @"__WiFiATJMgrATJHistTblAddEntry"];
      }
      goto LABEL_61;
    }
    CFNumberRef v31 = *(const void **)(a1 + 32);
    v86.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
    v86.id location = 0;
    if (CFArrayContainsValue(v30, v86, v31))
    {
      CFNumberRef v33 = (void *)qword_10027DD68;
      if (!qword_10027DD68)
      {
LABEL_61:
        goto LABEL_62;
      }
      CFDataRef v34 = "ATJManager: atjTableEntry already exists in table";
    }
    else
    {
      CFIndex v35 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
      uint64_t v36 = 5;
      if (!*(unsigned char *)(a1 + 57)) {
        uint64_t v36 = 64;
      }
      if (v35 >= v36)
      {
        CFArrayRef v37 = *(const __CFArray **)(a1 + 24);
        v87.length = CFArrayGetCount(v37);
        v87.id location = 0;
        CFArraySortValues(v37, v87, (CFComparatorFunction)sub_10016D2D0, 0);
        if (*(void *)(a1 + 32))
        {
          if (*(unsigned char *)(a1 + 56))
          {
            CFArrayRef v38 = *(const __CFArray **)(a1 + 24);
            v88.length = CFArrayGetCount(v38);
            v88.id location = 0;
            FirstIndexOfCFDateRef Value = CFArrayGetFirstIndexOfValue(v38, v88, *(const void **)(a1 + 32));
            if (FirstIndexOfValue != -1)
            {
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), FirstIndexOfValue);
              CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), 0, *(const void **)(a1 + 32));
            }
          }
        }
        id v40 = *(__CFArray **)(a1 + 24);
        if (*(unsigned char *)(a1 + 57)) {
          CFIndex v41 = 4;
        }
        else {
          CFIndex v41 = 63;
        }
        CFIndex v42 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
        uint64_t v43 = -5;
        if (!*(unsigned char *)(a1 + 57)) {
          uint64_t v43 = -64;
        }
        v89.length = v42 + v43 + 1;
        v89.id location = v41;
        CFArrayReplaceValues(v40, v89, 0, 0);
      }
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), v31);
      uint64_t v44 = qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_61;
      }
      CFIndex v45 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
      id v80 = v31;
      uint64_t v81 = *(void *)(a1 + 24);
      CFIndex v79 = v45;
      CFDataRef v34 = "ATJManager: %ld entries in atjHistory Table, add %@ to %@";
      CFNumberRef v33 = (void *)v44;
    }
    [v33 WFLog:3 message:v34, v79, v80, v81];
    goto LABEL_61;
  }
LABEL_118:
  *(double *)(a1 + 40) = v9;
  sub_10016C3C4(a1);
  return a2;
}

uint64_t sub_10016D08C(const __CFDictionary *a1, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  uint64_t result = 0;
  if (theArray)
  {
    if (Count)
    {
      uint64_t result = (uint64_t)CFDictionaryGetValue(a1, @"atjHistTblEntBSSIDList");
      if (result)
      {
        CFArrayRef v6 = (const __CFArray *)result;
        CFIndex v7 = CFArrayGetCount((CFArrayRef)result);
        if (v7 >= 1)
        {
          CFIndex v8 = v7;
          CFIndex v9 = 0;
          while (1)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
            if (ValueAtIndex)
            {
              if (Count >= 1) {
                break;
              }
            }
LABEL_14:
            if (++v9 == v8) {
              return 0;
            }
          }
          uint64_t v11 = ValueAtIndex;
          CFIndex v12 = 0;
          while (1)
          {
            CFIndex v13 = CFArrayGetValueAtIndex(theArray, v12);
            if (v13)
            {
              CFDateRef v14 = sub_10001E404((uint64_t)v13, @"BSSID");
              if (v14)
              {
                if (CFEqual(v11, v14)) {
                  return 1;
                }
              }
            }
            if (Count == ++v12) {
              goto LABEL_14;
            }
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

double sub_10016D188(const __CFDictionary *a1)
{
  uint64_t valuePtr = 0;
  double v1 = 0.0;
  if (a1)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"atjHistTblEntInRangeTime");
    if (Value)
    {
      return (double)CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4 message:"atjTableEntry does not have in range time"];
      }
    }
  }
  return v1;
}

void sub_10016D218(uint64_t a1)
{
  if (a1)
  {
    double v1 = *(__CFDictionary **)(a1 + 32);
    if (v1) {
      CFDictionarySetValue(v1, @"atjHistTblEntUserPromptPending", kCFBooleanFalse);
    }
  }
}

void sub_10016D240(void *a1)
{
  if (!a1) {
    sub_100196F90();
  }
  CFTypeID v2 = CFGetTypeID(a1);
  uint64_t v3 = qword_10027DC50;
  if (!qword_10027DC50)
  {
    pthread_once(&stru_10027CF58, (void (*)(void))sub_10016C20C);
    uint64_t v3 = qword_10027DC50;
  }
  if (v2 != v3) {
    sub_100196FBC();
  }
  CFDictionaryRef v4 = (const void *)a1[3];
  if (v4)
  {
    CFRelease(v4);
    a1[3] = 0;
  }
  CFNumberRef v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0;
  }
}

uint64_t sub_10016D2D0(const __CFDictionary *a1, const __CFDictionary *a2)
{
  if ((unint64_t)a1 | (unint64_t)a2) {
    uint64_t v2 = -1;
  }
  else {
    uint64_t v2 = 0;
  }
  if (a2) {
    uint64_t v2 = 1;
  }
  if (a1 && a2)
  {
    CFDateRef Value = (const __CFDate *)CFDictionaryGetValue(a1, @"atjHistTblEntLastSeenTimeStamp");
    double v5 = 0.0;
    double AbsoluteTime = 0.0;
    if (Value) {
      double AbsoluteTime = CFDateGetAbsoluteTime(Value);
    }
    CFDateRef v7 = (const __CFDate *)CFDictionaryGetValue(a2, @"atjHistTblEntLastSeenTimeStamp");
    if (v7) {
      double v5 = CFDateGetAbsoluteTime(v7);
    }
    uint64_t v2 = -1;
    if (AbsoluteTime <= v5) {
      return 0;
    }
  }
  return v2;
}

void sub_10016D458(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: granted %d error %@", "-[WiFiUserNotificationManager initWithQueue:supportsWAPI:]_block_invoke", v4, a3 message];
  }
}

uint64_t sub_10016DFD4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) callback];
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  uint64_t v4 = *(unsigned int *)(a1 + 52);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 32) callbackContext];
  CFDateRef v7 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, id))v2[2];

  return v7(v2, v3, v5, v4, v6);
}

void sub_10016E550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10016E56C(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: delivered notification is still visible %@", "-[WiFiUserNotificationManager dispatchNotificationWithRecommendation:currentLocation:force:]_block_invoke", a2 message];
    }
  }
  else
  {
    id v5 = [[objc_msgSend(*(id *)(a1 + 32), "notificationMapping") objectForKey:[*(id *)(a1 + 32) visibleRequest]];
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: no delivered notifications, clearing visible request (%@) for recommendation %@", "-[WiFiUserNotificationManager dispatchNotificationWithRecommendation:currentLocation:force:]_block_invoke", [*(id *)(a1 + 32) visibleRequest], v5 message];
    }
    [*(id *)(a1 + 32) setVisibleRequest:0];
    [objc_msgSend(*(id *)(a1 + 32), "notificationMapping") removeAllObjects];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10016E700;
    block[3] = &unk_100242F88;
    long long v8 = *(_OWORD *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 48);
    char v10 = *(unsigned char *)(a1 + 56);
    dispatch_async((dispatch_queue_t)qword_10027DD88, block);
  }
}

id sub_10016E700(uint64_t a1)
{
  return [*(id *)(a1 + 32) dispatchNotificationWithRecommendation:*(void *)(a1 + 40) currentLocation:*(void *)(a1 + 48) force:*(unsigned __int8 *)(a1 + 56)];
}

void sub_10016E714(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Error: %@", "-[WiFiUserNotificationManager dispatchNotificationWithRecommendation:currentLocation:force:]_block_invoke", [a2 localizedDescription]);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Added RequestId: %@", "-[WiFiUserNotificationManager dispatchNotificationWithRecommendation:currentLocation:force:]_block_invoke", *(void *)(a1 + 32) message];
    }
    [v4 setVisibleRequest:*(void *)(a1 + 32)];
    if (*(unsigned char *)(a1 + 64))
    {
      id v6 = objc_alloc_init((Class)NSMutableDictionary);
      [v6 setObject:[*(id *)(a1 + 40) SSID] forKey:@"ssid"];
      [v6 setObject:*(void *)(a1 + 32) forKey:@"identifier"];
      [v6 setObject:&off_100263B38 forKey:@"type"];
      uint64_t v7 = *(void *)(a1 + 48);
      if (v7) {
        [v6 setObject:v7 forKey:@"location"];
      }
      [v4 _startTimerForNotificationWithUserInfo:v6];
      if (v6)
      {
        CFRelease(v6);
      }
    }
  }
}

void sub_10016EBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_10016EC00(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: delivered notification is still visible %@", "-[WiFiUserNotificationManager dispatchNotificationWithRandomMAC:]_block_invoke", a2 message];
    }
  }
  else
  {
    [*(id *)(a1 + 32) setVisibleRequest:0];
    [objc_msgSend(*(id *)(a1 + 32), "notificationMapping") removeAllObjects];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10016ED08;
    block[3] = &unk_10023EC30;
    long long v6 = *(_OWORD *)(a1 + 32);
    dispatch_async((dispatch_queue_t)qword_10027DD88, block);
  }
}

id sub_10016ED08(uint64_t a1)
{
  return [*(id *)(a1 + 32) dispatchNotificationWithRandomMAC:*(void *)(a1 + 40)];
}

void sub_10016ED14(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Error: %@", "-[WiFiUserNotificationManager dispatchNotificationWithRandomMAC:]_block_invoke_3", [a2 localizedDescription]);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Added RequestId: %@", "-[WiFiUserNotificationManager dispatchNotificationWithRandomMAC:]_block_invoke_3", *(void *)(a1 + 32) message];
    }
    uint64_t v6 = *(void *)(a1 + 32);
    [v4 setVisibleRequest:v6];
  }
}

void sub_10016F264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_10016F284(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: delivered notification is still visible %@", "-[WiFiUserNotificationManager dispatchJoinAlertForNetwork:withProviderName:andReason:]_block_invoke", a2 message];
    }
  }
  else
  {
    [*(id *)(a1 + 32) setVisibleRequest:0];
    [objc_msgSend(*(id *)(a1 + 32), "notificationMapping") removeAllObjects];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10016F39C;
    block[3] = &unk_100243050;
    long long v6 = *(_OWORD *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 48);
    int v8 = *(_DWORD *)(a1 + 56);
    dispatch_async((dispatch_queue_t)qword_10027DD88, block);
  }
}

id sub_10016F39C(uint64_t a1)
{
  return [*(id *)(a1 + 32) dispatchJoinAlertForNetwork:*(void *)(a1 + 40) withProviderName:*(void *)(a1 + 48) andReason:*(unsigned int *)(a1 + 56)];
}

void sub_10016F3B0(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Error: %@", "-[WiFiUserNotificationManager dispatchJoinAlertForNetwork:withProviderName:andReason:]_block_invoke_3", [a2 localizedDescription]);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Added RequestId: %@", "-[WiFiUserNotificationManager dispatchJoinAlertForNetwork:withProviderName:andReason:]_block_invoke_3", *(void *)(a1 + 32) message];
    }
    uint64_t v6 = *(void *)(a1 + 32);
    [v4 setVisibleRequest:v6];
  }
}

void sub_10016F8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_10016F8C4(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: delivered notification is still visible %@", "-[WiFiUserNotificationManager dispatchLowDataModeAlertForNetwork:withReason:]_block_invoke", a2 message];
    }
  }
  else
  {
    [*(id *)(a1 + 32) setVisibleRequest:0];
    [objc_msgSend(*(id *)(a1 + 32), "notificationMapping") removeAllObjects];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10016F9D4;
    block[3] = &unk_1002410B8;
    long long v6 = *(_OWORD *)(a1 + 32);
    int v7 = *(_DWORD *)(a1 + 48);
    dispatch_async((dispatch_queue_t)qword_10027DD88, block);
  }
}

id sub_10016F9D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) dispatchLowDataModeAlertForNetwork:*(void *)(a1 + 40) withReason:*(unsigned int *)(a1 + 48)];
}

void sub_10016F9E4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Error: %@", "-[WiFiUserNotificationManager dispatchLowDataModeAlertForNetwork:withReason:]_block_invoke_3", [a2 localizedDescription]);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Added RequestId: %@", "-[WiFiUserNotificationManager dispatchLowDataModeAlertForNetwork:withReason:]_block_invoke_3", *(void *)(a1 + 32) message];
    }
    uint64_t v6 = *(void *)(a1 + 32);
    [v4 setVisibleRequest:v6];
  }
}

void sub_100170060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100170080(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: delivered notification is still visible %@", "-[WiFiUserNotificationManager dispatchNotificationWithColocatedScanResult:fromScanResult:]_block_invoke", a2 message];
    }
  }
  else
  {
    [*(id *)(a1 + 32) setVisibleRequest:0];
    [objc_msgSend(*(id *)(a1 + 32), "notificationMapping") removeAllObjects];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100170190;
    block[3] = &unk_1002425E0;
    long long v6 = *(_OWORD *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 48);
    dispatch_async((dispatch_queue_t)qword_10027DD88, block);
  }
}

id sub_100170190(uint64_t a1)
{
  return [*(id *)(a1 + 32) dispatchNotificationWithColocatedScanResult:*(void *)(a1 + 40) fromScanResult:*(void *)(a1 + 48)];
}

void sub_1001701A0(uint64_t a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Did invoke -[UNUserNotificationCenter didReceiveNotificationResponse:withCompletionHandler:] with test action %@", "-[WiFiUserNotificationManager dispatchNotificationWithColocatedScanResult:fromScanResult:]_block_invoke_3", *(void *)(a1 + 32) message];
  }
}

void sub_100170214(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Error: %@", "-[WiFiUserNotificationManager dispatchNotificationWithColocatedScanResult:fromScanResult:]_block_invoke_4", [a2 localizedDescription]);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Added RequestId: %@", "-[WiFiUserNotificationManager dispatchNotificationWithColocatedScanResult:fromScanResult:]_block_invoke_4", *(void *)(a1 + 32) message];
    }
    uint64_t v6 = *(void *)(a1 + 32);
    [v4 setVisibleRequest:v6];
  }
}

void sub_10017060C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100170628(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: delivered notification is still visible %@", "-[WiFiUserNotificationManager dispatchNotificationWithAskToJoinHotspotRecommendation:]_block_invoke", a2 message];
    }
  }
  else
  {
    id v5 = *(void **)(a1 + 32);
    if (v5[8])
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: canceling timer", @"-[WiFiUserNotificationManager dispatchNotificationWithAskToJoinHotspotRecommendation:]_block_invoke"];
      }
      dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1 + 32) + 64));
      id v5 = *(void **)(a1 + 32);
    }
    [v5 setVisibleRequest:0];
    id v7 = [*(id *)(a1 + 32) notificationMapping];
    [v7 removeAllObjects];
  }
}

void sub_100170730(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Error: %@", "-[WiFiUserNotificationManager dispatchNotificationWithAskToJoinHotspotRecommendation:]_block_invoke_2", [a2 localizedDescription]);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Added RequestId: %@", "-[WiFiUserNotificationManager dispatchNotificationWithAskToJoinHotspotRecommendation:]_block_invoke_2", *(void *)(a1 + 32) message];
    }
    [v4 setVisibleRequest:*(void *)(a1 + 32)];
    if (*(unsigned char *)(a1 + 56))
    {
      id v6 = objc_alloc_init((Class)NSMutableDictionary);
      [v6 setObject:*(void *)(a1 + 40) forKey:@"ssid"];
      [v6 setObject:*(void *)(a1 + 32) forKey:@"identifier"];
      [v6 setObject:&off_100263B50 forKey:@"type"];
      [v4 _startTimerForNotificationWithUserInfo:v6];
      if (v6)
      {
        CFRelease(v6);
      }
    }
  }
}

id sub_100170CA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _timeoutTimerDidFire:*(void *)(a1 + 40)];
}

void sub_100170CAC(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 64) = 0;
}

void sub_100171D24(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

id sub_100171D68(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [a2 doesContain:*(void *)(a1 + 64)];
  if (result)
  {
    [a2 timeSinceFirstDeferral:*(void *)(a1 + 64)];
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v9;
    double v10 = *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    id result = [*(id *)(a1 + 32) deferIntervalSecs];
    if (v10 >= v11)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a3;
      if ((objc_msgSend(objc_msgSend(a2, "ssid"), "isEqualToString:", sub_10001A43C(*(const void **)(*(void *)(a1 + 32) + 32))) & 1) == 0)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: %@ was a time-deferred network for %2.1f secs. No longer time-deferring", "-[WiFiTimeDeferredNetworksAJManager canDeferNetwork:withUsageRank:andMotionState:]_block_invoke", sub_10001A43C(*(const void **)(a1 + 64)), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) message];
        }
      }
      id result = [a2 reset];
      *a4 = 1;
    }
  }
  return result;
}

id sub_10017201C(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  int v8 = *(void **)(a1[4] + 24);
  id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v15;
LABEL_3:
    uint64_t v12 = 0;
    while (1)
    {
      if (*(void *)v15 != v11) {
        objc_enumerationMutation(v8);
      }
      id result = [a2 doesContain:*(void *)(*((void *)&v14 + 1) + 8 * v12)];
      if (result) {
        break;
      }
      if (v10 == (id)++v12)
      {
        id v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v10) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    [*(id *)(*(void *)(a1[5] + 8) + 40) addIndex:a3];
    [objc_msgSend(*(id *)(a1[4] + 16), "objectAtIndex:", a3) reset];
    id result = [[[*(id *)(a1[4] + 16) objectAtIndex:a3] ssid];
    if (result)
    {
      [*(id *)(*(void *)(a1[6] + 8) + 40) appendFormat:@"%@", [*(id *)(a1[4] + 16) objectAtIndex:a3] ssid]];
      id result = [*(id *)(a1[4] + 16) count];
      if ((id)(a3 + 1) == result) {
        *a4 = 1;
      }
      else {
        return [*(id *)(*(void *)(a1[6] + 8) + 40) appendString:@", "];
      }
    }
  }
  return result;
}

void sub_1001722E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001722FC(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [a2 doesContain:*(void *)(a1 + 40)];
  if (result)
  {
    id result = [a2 reset];
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

void sub_100172448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100172460(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [a2 doesContain:*(void *)(*(void *)(a1 + 32) + 32)];
  if (result)
  {
    id result = [a2 reset];
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

void sub_1001726B4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

id sub_1001726E0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [a2 ssid];
  if (result)
  {
    id result = [[*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) appendFormat:@"%@", [a2 ssid]];
    if (a3 + 1 == *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      *a4 = 1;
    }
    else
    {
      id v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      return [v9 appendString:@", "];
    }
  }
  return result;
}

int64_t sub_100172C08(id a1, id a2, id a3)
{
  unint64_t v4 = (unint64_t)a2;
  unint64_t v5 = (unint64_t)a3;
  id v6 = (void *)v5;
  if (v4 | v5) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v4) {
    int64_t v8 = 1;
  }
  else {
    int64_t v8 = v7;
  }
  if (v4 && v5)
  {
    if ([(id)v4 group]) {
      uint64_t v9 = (100 * (3 - [(id)v4 group])) & 0xFCLL;
    }
    else {
      uint64_t v9 = 0;
    }
    if ([v6 group]) {
      uint64_t v10 = (100 * (3 - [v6 group])) & 0xFCLL;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = [(id)v4 batteryLife];
    if ((uint64_t)[v11 integerValue] >= 20)
    {
      uint64_t v12 = [(id)v4 batteryLife];
      v9 += (uint64_t)[v12 integerValue] / 10;
    }
    CFIndex v13 = [v6 batteryLife];
    if ((uint64_t)[v13 integerValue] >= 20)
    {
      long long v14 = [v6 batteryLife];
      v10 += (uint64_t)[v14 integerValue] / 10;
    }
    unsigned __int8 v15 = [(id)v4 networkType];
    long long v16 = [(id)v4 signalStrength];
    unsigned __int8 v17 = v9 + v15 + [v16 integerValue];

    unsigned __int8 v18 = [v6 networkType];
    BOOL v19 = [v6 signalStrength];
    unsigned __int8 v20 = v10 + v18 + [v19 integerValue];

    if (v20 <= v17) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = -1;
    }
    if (v20 < v17) {
      int64_t v8 = 1;
    }
    else {
      int64_t v8 = v21;
    }
  }

  return v8;
}

void sub_10017318C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1001731BC(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  id v6 = v5;
  if (v5)
  {
    uint64_t v7 = (void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    int64_t v8 = v5;
  }
  else
  {
    uint64_t v7 = (void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    int64_t v8 = v11;
  }
  id v9 = v8;
  uint64_t v10 = *v7;
  void *v7 = v9;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_100173308(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8);
  return result;
}

id sub_1001733D0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) hotspotSession];
  [v2 startBrowsing];

  uint64_t v3 = *(void **)(a1 + 32);

  return [v3 setScanning:1];
}

id sub_1001734A8(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Stopping hotspot browsing (isBrowsing %d removeCache %d)", *(unsigned __int8 *)(*(void *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40)];
  }
  uint64_t v3 = [*(id *)(a1 + 32) hotspotSession];
  [v3 stopBrowsing];

  id result = [*(id *)(a1 + 32) setScanning:0];
  if (*(unsigned char *)(a1 + 40))
  {
    id v5 = *(void **)(a1 + 32);
    return [v5 setNetworks:0];
  }
  return result;
}

uint64_t sub_100173D38()
{
  uint64_t result = qword_10027DC58;
  if (!qword_10027DC58)
  {
    pthread_once(&stru_10027D028, (void (*)(void))sub_100173D80);
    return qword_10027DC58;
  }
  return result;
}

uint64_t sub_100173D80()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_10027DC58 = result;
  return result;
}

uint64_t sub_100173DA8()
{
  if (objc_opt_class())
  {
    if (!qword_10027DC58) {
      pthread_once(&stru_10027D028, (void (*)(void))sub_100173D80);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v2 = Instance;
    if (Instance)
    {
      *(_OWORD *)(Instance + 16) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      uint64_t v3 = objc_alloc_init(AudioRouteMonitor);
      *(void *)(v2 + 40) = v3;
      [(AudioRouteMonitor *)v3 initializeWithHandler:v2];
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

void sub_100173E60(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    *(void *)(a1 + 16) = a2;
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100173F08;
    block[3] = &unk_10023EAF8;
    void block[4] = a1;
    dispatch_async(global_queue, block);
  }
}

void sub_100173F08(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 40) startMonitoring];
  uint64_t v2 = *(void *)(a1 + 32);

  sub_100173F48(v2);
}

void sub_100173F48(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 24))
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v3 = [(AVAudioSessionRouteDescription *)[+[AVAudioSession sharedInstance] currentRoute] outputs];
    id v4 = [(NSArray *)v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v13;
      while (2)
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v13 != v6) {
            objc_enumerationMutation(v3);
          }
          if (objc_msgSend(objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * (void)v7), "portType"), "isEqualToString:", AVAudioSessionPortBuiltInReceiver))
          {
            char v8 = 1;
            goto LABEL_13;
          }
          uint64_t v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [(NSArray *)v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
    char v8 = 0;
LABEL_13:
    id v9 = *(NSObject **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100174138;
    v10[3] = &unk_100240768;
    v10[4] = a1;
    char v11 = v8;
    dispatch_async(v9, v10);
  }
}

void sub_1001740E0(uint64_t a1)
{
  if (a1)
  {
    [*(id *)(a1 + 40) stopMonitoring];
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t sub_10017412C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    *(void *)(result + 24) = a2;
    *(void *)(result + 32) = a3;
  }
  return result;
}

uint64_t sub_100174138(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 24))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 32));
}

double sub_10017414C(uint64_t a1)
{
  if (!a1) {
    sub_100196FE8();
  }
  CFTypeID v2 = CFGetTypeID((CFTypeRef)a1);
  uint64_t v3 = qword_10027DC58;
  if (!qword_10027DC58)
  {
    pthread_once(&stru_10027D028, (void (*)(void))sub_100173D80);
    uint64_t v3 = qword_10027DC58;
  }
  if (v2 != v3) {
    sub_100197014();
  }

  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

BOOL sub_1001741CC(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

CFStringRef sub_1001741DC(uint64_t a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(kCFAllocatorDefault, a2, @"WiFiAudioRoute@%p", a1);
}

CFStringRef sub_100174218(uint64_t a1)
{
  return CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"WiFiAudioRoute@%p", a1);
}

BOOL sub_100174258()
{
  CFURLRef v0 = +[NSUserDefaults standardUserDefaults];
  uint64_t v1 = [v0 stringForKey:@"DextCrashBoostMode"];
  CFTypeID v2 = v1;
  BOOL v3 = v1 && ![v1 caseInsensitiveCompare:@"Enable"];

  return v3;
}

id sub_1001742D8()
{
  CFURLRef v0 = +[NSUserDefaults standardUserDefaults];
  id v1 = [v0 integerForKey:@"DextCrashPurgePeriodInMinutes"];

  return v1;
}

id sub_100174324()
{
  CFURLRef v0 = +[NSUserDefaults standardUserDefaults];
  id v1 = [v0 integerForKey:@"DextCrashMaxFilesCount"];

  return v1;
}

void sub_100174370(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((_WORD *)a1 + 25) = 0;
  if (*((unsigned char *)a1 + 48))
  {
    CFTypeID v2 = a1;
    id v4 = (void **)&qword_10027DD68;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s Begin" args:("dextCoreFileProcess", 0x0, 0x0)];
    }
    id v5 = +[NSString stringWithCString:v1 encoding:4];
    uint64_t v6 = +[NSURL URLWithString:v5];

    uint64_t v7 = +[NSFileManager defaultManager];
    NSURLResourceKey v59 = NSURLCreationDateKey;
    char v8 = +[NSArray arrayWithObjects:&v59 count:1];
    id v9 = [v7 contentsOfDirectoryAtURL:v6 includingPropertiesForKeys:v8 options:4 error:0];

    if (v9 && [v9 count])
    {
      uint64_t v10 = +[NSPredicate predicateWithBlock:&stru_1002432A0];
      char v11 = [v9 filteredArrayUsingPredicate:v10];

      long long v12 = [v11 sortedArrayUsingComparator:&stru_1002432E0];
      LODWORD(v10) = *((_DWORD *)v2 + 8);
      unsigned int v13 = [v12 count];
      CFIndex v50 = v12;
      if ((int)v10 < 1441)
      {
        int v14 = *((_DWORD *)v2 + 9);
        if ((int)[v12 count] < 1)
        {
          LOWORD(v13) = 0;
        }
        else
        {
          uint64_t v43 = v11;
          uint64_t v44 = v9;
          CFIndex v45 = v6;
          CFStringRef v46 = v2;
          unsigned int v15 = v13;
          uint64_t v16 = 0;
          id v17 = 0;
          uint64_t v48 = v15 - v14;
          __int16 v51 = 0;
          unsigned __int8 v18 = v12;
          do
          {
            BOOL v19 = [v18 objectAtIndexedSubscript:v16];
            if (v16 >= (int)v48)
            {
              CFNumberRef v24 = +[NSString stringWithUTF8String:v1];
              double v25 = +[NSMutableString stringWithString:v24];

              [v25 appendString:@"/"];
              [v25 appendString:@"wifi-bcmwlan-dextcrash-"];
              id v54 = 0;
              id v55 = 0;
              [v19 getResourceValue:&v55 forKey:NSURLCreationDateKey error:&v54];
              id v26 = v55;
              id v27 = v54;

              id v28 = v26;
              id v29 = objc_alloc_init((Class)NSDateFormatter);
              [v29 setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss"];
              CFArrayRef v30 = +[NSTimeZone systemTimeZone];
              [v29 setTimeZone:v30];

              CFNumberRef v31 = [v29 stringFromDate:v28];

              [v25 appendString:v31];
              [v25 appendString:@".core"];
              BOOL v32 = [v19 path];
              [v7 moveItemAtPath:v32 toPath:v25 error:0];

              uint64_t v53 = 66565;
              id v33 = v25;
              uint64_t v49 = fsctl((const char *)[v33 cStringUsingEncoding:4], 0xC0084A44uLL, &v53, 0);
              NSFileAttributeKey v57 = NSFilePosixPermissions;
              CFNumberRef v58 = &off_100263B68;
              CFDataRef v34 = +[NSDictionary dictionaryWithObjects:&v58 forKeys:&v57 count:1];
              id v52 = v27;
              [v7 setAttributes:v34 ofItemAtPath:v33 error:&v52];
              id v17 = v52;

              uint64_t v36 = *v4;
              if (*v4)
              {
                [v19 path];
                long long v47 = v19;
                id v37 = v17;
                id v38 = v28;
                CFDictionaryRef v39 = v7;
                id v40 = v4;
                CFIndex v42 = v41 = v1;
                [v36 WFLog:3, "%s:process File:'%@' original path:'%@' fsctl ret:%d total_cnt:%lu purge_count:%d", "dextCoreFileProcess", v33, v42, v49, [v50 count], v48 message];

                uint64_t v1 = v41;
                id v4 = v40;
                uint64_t v7 = v39;
                id v28 = v38;
                id v17 = v37;
                BOOL v19 = v47;
              }
              ++v51;

              unsigned __int8 v18 = v50;
            }
            else
            {
              id v56 = v17;
              [v7 removeItemAtURL:v19 error:&v56];
              id v20 = v56;

              CFIndex v22 = *v4;
              if (*v4)
              {
                CFIndex v23 = [v19 path];
                [v22 WFLog:3, "%s removeFile path:'%@' error:%@ total_cnt:%lu purge_count:%d", "dextCoreFileProcess", v23, v20, [v18 count], v48 message];
              }
              id v17 = v20;
            }

            ++v16;
          }
          while (v16 < (int)[v18 count]);

          uint64_t v6 = v45;
          CFTypeID v2 = v46;
          char v11 = v43;
          id v9 = v44;
          LOWORD(v13) = v51;
        }
      }
      *((_WORD *)v2 + 25) = v13;
    }
  }
}

BOOL sub_10017490C(id a1, id a2, NSDictionary *a3)
{
  BOOL v3 = [a2 lastPathComponent:a3];
  unsigned __int8 v4 = [v3 hasPrefix:@"wifi-"];

  return v4;
}

int64_t sub_100174950(id a1, NSURL *a2, NSURL *a3)
{
  id v9 = 0;
  unsigned __int8 v4 = a3;
  [(NSURL *)a2 getResourceValue:&v9 forKey:NSURLCreationDateKey error:0];
  uint64_t v8 = 0;
  id v5 = v9;
  [(NSURL *)v4 getResourceValue:&v8 forKey:NSURLCreationDateKey error:0];

  id v6 = [v5 compare:v8];
  return (int64_t)v6;
}

BOOL sub_1001749EC(uint64_t a1, char a2)
{
  uint64_t v26 = 0;
  id v27 = &v26;
  uint64_t v28 = 0x2020000000;
  char v29 = 0;
  id v4 = *(id *)(a1 + 40);
  if (qword_10027DD68) {
    [qword_10027DD68 WFLog:message:3, "%s: WiFiDextCrashSoftError Enter", "WiFiDextCrashedSoftErrorHandler"];
  }
  if (v4 && (a2 & 1) == 0)
  {
    id v6 = [v4 incrementCount];
    id v7 = [v4 submitMetric];
    id v8 = [v4 submitABCReportWithReason:0];
  }
  if (a2)
  {
    id v9 = +[NSString stringWithCString:*(void *)a1 encoding:4];
    uint64_t v10 = +[NSURL URLWithString:v9];

    char v11 = +[NSFileManager defaultManager];
    NSURLResourceKey v30 = NSURLCreationDateKey;
    long long v12 = +[NSArray arrayWithObjects:&v30 count:1];
    unsigned int v13 = [v11 contentsOfDirectoryAtURL:v10 includingPropertiesForKeys:v12 options:4 error:0];

    if (v13)
    {
      BOOL v14 = [v13 count] == 0;

      if (v14) {
        goto LABEL_11;
      }
    }
    else
    {
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: No Dext corefiles found isRetry:%d", "WiFiDextCrashedSoftErrorHandler", 1);
    }
    goto LABEL_28;
  }
  sub_100174370((uint64_t *)a1);
  if (!*(_WORD *)(a1 + 50))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: No Dext corefiles found isRetry:%d", "WiFiDextCrashedSoftErrorHandler", 0];
    }
    goto LABEL_28;
  }
LABEL_11:
  if (!v4) {
    goto LABEL_26;
  }
  unsigned int v15 = +[NSUserDefaults standardUserDefaults];
  uint64_t v16 = [v15 stringForKey:@"DextCrashUserNotification"];
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:2, "%s WiFiDextCrashSoftError UserNotification setting:%@", "WiFiDextCrashSoftErrorPopupDisabled", v16 message];
  }
  if (v16 && ![v16 caseInsensitiveCompare:@"Disable"])
  {

LABEL_26:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: WiFiDextCrashSoftError Disabled", @"WiFiDextCrashedSoftErrorHandler"];
    }
LABEL_28:
    BOOL v22 = 0;
    goto LABEL_29;
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100174E38;
  v25[3] = &unk_100242758;
  v25[4] = &v26;
  if ([v4 askToLaunchTapToRadarWithMessage:@"WiFi DriverKit Processs Crash Detected" completionHandler:v25])
  {
    unsigned __int8 v18 = +[NSURL URLWithString:@"tap-to-radar://new?Title=WiFi%20Dext%20Crash%20Detected&AutoDiagnostics=phone&Description=Dext%20crash%20detected%20Attaching%20coredumps&ComponentID=621547&ComponentName=WiFi%20Connectivity&ComponentVersion=iOS&Classification=Crash/Hang/Data%20Loss&ExtensionIdentifiers=com.apple.DiagnosticExtensions.WiFi"];
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100174F44;
    v24[3] = &unk_100242758;
    v24[4] = &v26;
    id v19 = [v4 tapToRadarWithURL:v18 completionHandler:v24];
    int v20 = *((unsigned __int8 *)v27 + 24);
  }
  else
  {
    int v20 = *((unsigned __int8 *)v27 + 24);
  }
  BOOL v22 = v20 != 0;
LABEL_29:

  _Block_object_dispose(&v26, 8);
  return v22;
}

void sub_100174E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100174E38(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s WiFiDextCrashSoftError askToLaunchTapToRadarWithMessage result:%@, error:%@", "WiFiDextCrashedSoftErrorHandler_block_invoke", v11, v5 message];
  }
  id v7 = [v5 userInfo];
  id v8 = [v7 objectForKey:@"deviceNotInteractive"];

  if (v8)
  {
    id v9 = [v5 userInfo];
    uint64_t v10 = [v9 objectForKey:@"deviceNotInteractive"];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v10 BOOLValue];
  }
}

void sub_100174F44(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s WiFiDextCrashSoftError tapToRadarWithURL result:%@, error:%@", "WiFiDextCrashedSoftErrorHandler_block_invoke_2", v11, v5 message];
  }
  id v7 = [v5 userInfo];
  id v8 = [v7 objectForKey:@"deviceNotInteractive"];

  if (v8)
  {
    id v9 = [v5 userInfo];
    uint64_t v10 = [v9 objectForKey:@"deviceNotInteractive"];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v10 BOOLValue];
  }
}

void sub_1001750B0(id a1)
{
  qword_10027DC60 = objc_alloc_init(WiFi3BarsObserver);
}

void sub_100175228(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001752A8;
  block[3] = &unk_10023EFA8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)qword_10027DD88, block);
}

id sub_1001752A8(uint64_t a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: xpc connection got invalidated", "-[WiFi3BarsObserver init]_block_invoke_2"];
  }
  BOOL v3 = *(void **)(a1 + 32);

  return [v3 _cleanupMaintenanceTask];
}

void sub_100175320(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001753A0;
  block[3] = &unk_10023EFA8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)qword_10027DD88, block);
}

id sub_1001753A0(uint64_t a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: xpc connection got interrupted", @"-[WiFi3BarsObserver init]_block_invoke_4"];
  }
  BOOL v3 = *(void **)(a1 + 32);

  return [v3 _cleanupMaintenanceTask];
}

void sub_1001755BC(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 24) = 0;
}

void sub_1001755F0(uint64_t a1)
{
  [+[NSDate date] timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 8)];
  if (v2 >= 120.0)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: activity exceeded max time of %d secs", "-[WiFi3BarsObserver _installDeferMonitorForActivity:proxy:]_block_invoke_2", 120);
    }
    [*(id *)(a1 + 40) cancelMaintenanceTask];
    [*(id *)(a1 + 32) _cleanupMaintenanceTask];
    if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 48), 5))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:@"%s: xpc_activity_set_state to \"Done\" failed" message:3];
      }
    }
  }
  else if (xpc_activity_should_defer(*(xpc_activity_t *)(a1 + 48)))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:@"%s: xpc wants to defer activity" message:3];
    }
    if (xpc_activity_set_state(*(xpc_activity_t *)(a1 + 48), 3))
    {
      [*(id *)(a1 + 40) cancelMaintenanceTask];
      id v4 = *(void **)(a1 + 32);
      [v4 _cleanupMaintenanceTask];
    }
  }
}

uint64_t sub_100175964(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s: error getting remote object: %@", "-[WiFi3BarsObserver run3BarsObserver:withActivity:withCompletion:]_block_invoke", a2 message];
  }
  id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

id sub_1001759F4(uint64_t a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: finished running maintenance task", @"-[WiFi3BarsObserver run3BarsObserver:withActivity:withCompletion:]_block_invoke_2"];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  BOOL v3 = *(void **)(a1 + 32);

  return [v3 _cleanupMaintenanceTask];
}

void sub_100175B60(id a1, NSError *a2)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s: error getting synchronous remote object: %@", "-[WiFi3BarsObserver fetch3BarsNetworksForLocation:]_block_invoke", a2 message];
  }
}

void sub_100175C24(id a1, NSError *a2)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s: error getting synchronous remote object: %@", "-[WiFi3BarsObserver prune3BarsNetworks:]_block_invoke", a2 message];
  }
}

void sub_100175CF0(id a1, NSError *a2)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s: error getting synchronous remote object: %@", "-[WiFi3BarsObserver forceFetch3BarsNetworkMatchingBSSID:completionHandler:]_block_invoke", a2 message];
  }
}

uint64_t sub_100176158(uint64_t a1)
{
  uint64_t result = sub_1000915D4(*(void *)(*(void *)(a1 + 32) + 8));
  if (!result) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return result;
}

void sub_10017638C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

BOOL sub_1001763B0(void *a1)
{
  BOOL result = sub_10009E30C(*(unsigned int **)(a1[4] + 8), *(void *)(*(void *)(a1[6] + 8) + 40));
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = result;
  return result;
}

void sub_1001764A4(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v3 = CFDateCreate(kCFAllocatorDefault, Current);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(Mutable, @"countryCodeUserDefault", *(const void **)(a1 + 32));
  CFDictionarySetValue(Mutable, @"countryCodeUserDefaultDate", v3);
  sub_1000AE0DC(*(void *)(*(void *)(a1 + 40) + 8), Mutable);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s WiFiCC : Saving Country Code information to user defaults : [%@]", "-[WiFiLocaleManagerUser setUserDefaultCountryCode:]_block_invoke", *(void *)(a1 + 32) message];
  }
  if (v3) {
    CFRelease(v3);
  }
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

uint64_t sub_1001766B0(uint64_t a1)
{
  uint64_t result = sub_10009E15C(*(void *)(*(void *)(a1 + 32) + 8), *(const __CFString **)(a1 + 40), (char)[*(id *)(*(void *)(a1 + 32) + 16) getLocaleSource], *(unsigned char *)(a1 + 56));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_1001768F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017691C(void *a1)
{
  uint64_t result = sub_10009E52C(*(void *)(a1[4] + 8), *(CFMutableStringRef *)(*(void *)(a1[6] + 8) + 40));
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = result;
  return result;
}

void sub_100176AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

id sub_100176ADC(void *a1)
{
  id result = [*(id *)(*(void *)(a1[5] + 8) + 40) setSet:*(void *)(a1[4] + 24)];
  *(void *)(*(void *)(a1[6] + 8) + 24) = *(void *)(a1[4] + 32);
  return result;
}

void sub_100176D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100176D80(void *a1)
{
  uint64_t result = sub_10009E560(*(void *)(a1[4] + 8), *(__CFString **)(*(void *)(a1[6] + 8) + 40));
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = result;
  return result;
}

void sub_100176DC4(id a1)
{
  qword_10027DC80 = sub_10000D990((uint64_t)"+[WiFiPerfPerAssoc sharedInstance]_block_invoke");
  qword_10027DC78 = [[WiFiPerfPerAssoc alloc] _initPrivate];
}

void sub_100177280(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

id sub_100177298(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) _handleDisplayStateChange];
}

void sub_10017746C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100177484(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 52))
  {
LABEL_4:
    if ([*(id *)(a1 + 32) deviceIsAssociated]
      && [*(id *)(a1 + 32) currentSession])
    {
      if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
        [objc_msgSend(*(id *)(a1 + 32), "currentSession") ingestCurrentNetwork:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)];
      }
      [objc_msgSend(*(id *)(a1 + 32), "currentSession") setDisAssocReason:*(unsigned int *)(a1 + 48)];
      [*(id *)(a1 + 32) _endActiveUsageForSession:[*(id *)(a1 + 32) currentSession]];
      [+[NSDate date] timeIntervalSince1970];
      [objc_msgSend(*(id *)(a1 + 32), "currentSession") setDoNotFinalizePriorToEpoch:v2 + 20.0];
      [objc_msgSend(*(id *)(a1 + 32), "sessionsWaitingForFinalization") addObject:[objc_msgSend(*(id *)(a1 + 32), "currentSession")];
      [*(id *)(a1 + 32) _stopPollingForInstantaneousScorecards];
      [*(id *)(a1 + 32) setDeviceIsAssociated:0];
      [*(id *)(a1 + 32) setCurrentSession:0];
      [*(id *)(a1 + 32) finalizeFirstSessionThatRequiresItWhenAppropriate];
    }
    goto LABEL_12;
  }
  if ([*(id *)(a1 + 32) deviceIsAssociated])
  {
    if (*(unsigned char *)(a1 + 52)) {
      goto LABEL_12;
    }
    goto LABEL_4;
  }
  CFDateRef v3 = [WiFiPerfPerAssocSession alloc];
  [*(id *)(a1 + 32) setCurrentSession:-[WiFiPerfPerAssocSession initWithNetworkRecord:managerRef:andManagerQueue:](v3, "initWithNetworkRecord:managerRef:andManagerQueue:", *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), qword_10027DC88, qword_10027DC90)];
  [objc_msgSend(*(id *)(a1 + 32), "currentSession") setAssocReason:*(unsigned int *)(a1 + 48)];
  [+[NSDate date] timeIntervalSince1970];
  [objc_msgSend(*(id *)(a1 + 32), "currentSession") setEpochAtAssoc:v4];
  [*(id *)(a1 + 32) setDeviceIsAssociated:1];
  [objc_msgSend(*(id *)(a1 + 32), "currentSession") ingestCurrentNetwork:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)];
  [*(id *)(a1 + 32) _beginPollingForInstantaenousScorecards];
  if ([*(id *)(a1 + 32) deviceUnderActiveUse]) {
    [*(id *)(a1 + 32) _beginActiveUsageForSession:[*(id *)(a1 + 32) currentSession]];
  }
  id v5 = *(void **)(a1 + 32);
  id v6 = [v5 currentSession];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001776FC;
  v8[3] = &unk_100242628;
  _OWORD v8[4] = *(void *)(a1 + 32);
  [v5 _getHistoricalScorecardSession:v6 andReply:v8];
LABEL_12:
  id v7 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_1001776FC(uint64_t a1, uint64_t a2)
{
  double v4 = [*(id *)(a1 + 32) wifiPPASerialQ];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100177784;
  void v5[3] = &unk_10023EC30;
  void v5[4] = *(void *)(a1 + 32);
  void v5[5] = a2;
  dispatch_async(v4, v5);
}

id sub_100177784(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "currentSession") setHistoricalScorecardAtAssoc:*(void *)(a1 + 40)];
  uint64_t state64 = 0;
  id result = (id)notify_get_state((int)[*(id *)(a1 + 32) displayStateToken], &state64);
  if (result) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = state64 == 0;
  }
  if (!v3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s display on at start of WiFiPerfPerAssocSession, begin tracking active usage", @"-[WiFiPerfPerAssoc _associatedStateDidChange:withAssociatedNetworkRecord:withChangeReason:]_block_invoke_3"];
    }
    return [*(id *)(a1 + 32) _beginActiveUsageForSession:[*(id *)(a1 + 32) currentSession]];
  }
  return result;
}

void sub_10017795C(uint64_t a1)
{
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "sessionsWaitingForFinalization"), "count"))
  {
    id v2 = [[objc_msgSend(*(id *)(a1 + 32), "sessionsWaitingForFinalization") firstObject];
    [+[NSDate date] timeIntervalSince1970];
    double v4 = v3;
    [v2 doNotFinalizePriorToEpoch];
    if (v4 >= v5)
    {
      [objc_msgSend(*(id *)(a1 + 32), "sessionsWaitingForFinalization") removeObjectAtIndex:0];
      [*(id *)(a1 + 32) finalizeSession:v2];
      [*(id *)(a1 + 32) finalizeFirstSessionThatRequiresItWhenAppropriate];
    }
    else
    {
      [v2 doNotFinalizePriorToEpoch];
      double v7 = v6;
      [+[NSDate date] timeIntervalSince1970];
      dispatch_time_t v9 = dispatch_time(0, (uint64_t)((v7 - v8 + 0.25) * 1000000000.0));
      uint64_t v10 = [*(id *)(a1 + 32) utilityConcurrent];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100177AF0;
      block[3] = &unk_10023EFA8;
      void block[4] = *(void *)(a1 + 32);
      dispatch_after(v9, v10, block);
    }
  }
  else
  {
    fprintf(__stderrp, "AssertMacros: %s, %s file: %s, line: %d, value: %lld\n", "self.sessionsWaitingForFinalization.count", "", "/Library/Caches/com.apple.xbs/Sources/WiFiManager/WiFiPerfPerAssoc.m", 239, 0);
  }
}

id sub_100177AF0(uint64_t a1)
{
  return [*(id *)(a1 + 32) finalizeFirstSessionThatRequiresItWhenAppropriate];
}

void sub_100177C9C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100177CB4(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) calculateTimes];
  if (a2)
  {
    id v4 = [*(id *)(a1 + 32) finalizeWithEndScorecard:a2];
    if (v4) {
      sub_100052018(+[NSDictionary dictionaryWithDictionary:v4]);
    }
  }
  else
  {
    fprintf(__stderrp, "AssertMacros: %s, %s file: %s, line: %d, value: %lld\n", "scoreCard", "", "/Library/Caches/com.apple.xbs/Sources/WiFiManager/WiFiPerfPerAssoc.m", 269, 0);
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: Null scorecard", "-[WiFiPerfPerAssoc finalizeSession:]_block_invoke"];
    }
  }

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = 0;
}

void sub_100177ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100177EF8(void *a1)
{
  [*(id *)(*(void *)(a1[5] + 8) + 40) setDeviceUnderActiveUse:1];
  if (([*(id *)(*(void *)(a1[5] + 8) + 40) activeUseBeingTracked] & 1) != 0
    || ([*(id *)(*(void *)(a1[5] + 8) + 40) deviceIsAssociated] & 1) == 0)
  {
    fprintf(__stderrp, "AssertMacros: %s, %s file: %s, line: %d, value: %lld\n", "!weakSelf.activeUseBeingTracked && weakSelf.deviceIsAssociated", "", "/Library/Caches/com.apple.xbs/Sources/WiFiManager/WiFiPerfPerAssoc.m", 288, 0);

    *(void *)(*(void *)(a1[6] + 8) + 40) = 0;
  }
  else
  {
    [*(id *)(*(void *)(a1[5] + 8) + 40) setActiveUseBeingTracked:1];
    double v3 = *(void **)(a1[4] + 56);
    uint64_t v6 = kSymptomAnalyticsServiceNetworkAttachmentInstant;
    uint64_t v7 = kSymptomAnalyticsServiceNetworkAttachmentCurrent;
    id v4 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1001780B4;
    void v5[3] = &unk_100242758;
    void v5[4] = a1[6];
    [v3 fullScorecardFor:1 options:v4 reply:v5];
  }
}

void sub_1001780B4(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s - [NetworkPerformanceFeed fullScorecardFor: options: reply:] failed. Error: %@", "-[WiFiPerfPerAssoc _beginActiveUsageForSession:]_block_invoke_2", a3 message];
    }
  }
  else if (a2 {
         && objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", @"instant"), "allValues"), "objectAtIndex:", 0))
  }
  {
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) beginTrackingActiveUsageWithScorecard:a2];
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = 0;
}

void sub_1001782A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1001782D0(void *a1)
{
  if ([*(id *)(*(void *)(a1[5] + 8) + 40) deviceUnderActiveUse])
  {
    [*(id *)(*(void *)(a1[5] + 8) + 40) setDeviceUnderActiveUse:0];
    [*(id *)(*(void *)(a1[5] + 8) + 40) setActiveUseBeingTracked:0];
    double v3 = *(void **)(a1[4] + 56);
    uint64_t v6 = kSymptomAnalyticsServiceNetworkAttachmentInstant;
    uint64_t v7 = kSymptomAnalyticsServiceNetworkAttachmentCurrent;
    id v4 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100178478;
    void v5[3] = &unk_100242758;
    void v5[4] = a1[6];
    [v3 fullScorecardFor:1 options:v4 reply:v5];
  }
  else
  {
    fprintf(__stderrp, "AssertMacros: %s, %s file: %s, line: %d, value: %lld\n", "weakSelf.deviceUnderActiveUse", "", "/Library/Caches/com.apple.xbs/Sources/WiFiManager/WiFiPerfPerAssoc.m", 317, 0);

    *(void *)(*(void *)(a1[6] + 8) + 40) = 0;
  }
}

void sub_100178478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s - [NetworkPerformanceFeed fullScorecardFor: options: reply:] failed. Error: %@", "-[WiFiPerfPerAssoc _endActiveUsageForSession:]_block_invoke_2", a3 message];
    }
  }
  else
  {
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) accumulateActiveUsageWithScorecard:a2];
  }
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) resetActiveUsageStats];

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = 0;
}

void sub_1001785F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10017860C(uint64_t a1)
{
  uint64_t state64 = 0;
  if (notify_get_state((int)[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) displayStateToken], &state64))
  {
    fprintf(__stderrp, "AssertMacros: %s, %s file: %s, line: %d, value: %lld\n", "notify_get_state(weakSelf.displayStateToken, &currentDisplayState) == NOTIFY_STATUS_OK", "", "/Library/Caches/com.apple.xbs/Sources/WiFiManager/WiFiPerfPerAssoc.m", 347, 0);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"notify_get_state() failed trying to determine display state"];
    }
  }
  else
  {
    uint64_t v2 = state64;
    double v3 = *(void **)(a1 + 32);
    id v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v5 = [v3 currentSession];
    if (v2) {
      [v4 _beginActiveUsageForSession:v5];
    }
    else {
      [v4 _endActiveUsageForSession:v5];
    }
  }
}

void sub_10017881C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100178848(uint64_t a1)
{
  [objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "currentSession") ingestLQMUpdate: *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
}

id sub_100178A00(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) currentSession];
  [*(id *)(a1 + 40) coordinate];
  double v4 = v3;
  [*(id *)(a1 + 40) coordinate];
  double v6 = v5;
  [*(id *)(a1 + 40) horizontalAccuracy];

  return [v2 ingestLocationUpdateWithLat:v4 andLon:v6 andAccuracy:v7];
}

void sub_100178B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100178B6C(void *a1)
{
  if (a1[4])
  {
    if (a1[5]) {
      [objc_msgSend(*(id *)(*(void *)(a1[7] + 8) + 40), "currentSession") ingestScanResults:a1[4] currentSSID:a1[5]];
    }
    else {
      fprintf(__stderrp, "AssertMacros: %s, %s file: %s, line: %d, value: %lld\n", "currentSSID", "", "/Library/Caches/com.apple.xbs/Sources/WiFiManager/WiFiPerfPerAssoc.m", 402, 0);
    }
  }
  else
  {
    fprintf(__stderrp, "AssertMacros: %s, %s file: %s, line: %d, value: %lld\n", "scanCache", "", "/Library/Caches/com.apple.xbs/Sources/WiFiManager/WiFiPerfPerAssoc.m", 401, 0);
  }
  id v2 = *(uint64_t (**)(void))(a1[6] + 16);

  return v2();
}

id sub_100178D10(uint64_t a1)
{
  [*(id *)(a1 + 32) _pollInstantaenousAndUpdateValues];
  id v2 = *(void **)(a1 + 32);

  return [v2 _beginPollingForInstantaenousScorecards];
}

void sub_100178EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100178EDC(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) currentSession];

  return [v3 ingestInstantaneousScorecardFromPolling:a2];
}

uint64_t sub_1001790A4(uint64_t a1, void *a2)
{
  if (!a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s didn't get a scorecard for query string: %@", "-[WiFiPerfPerAssoc _getHistoricalScorecardSession:andReply:]_block_invoke", [*(id *)(a1 + 32) scorecardIdentifier]);
    }
  }
  if ((unint64_t)objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", @"historical"), "count") >= 2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s AMBIGUOUS HISTORICAL SCORECARD QUERY (multiple results). THIS IS A CRITICAL ERROR", @"-[WiFiPerfPerAssoc _getHistoricalScorecardSession:andReply:]_block_invoke"];
    }
  }
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = [[[a2 objectForKeyedSubscript:@"historical"] allValues] firstObject];
  double v8 = *(uint64_t (**)(uint64_t, id))(v6 + 16);

  return v8(v6, v7);
}

uint64_t sub_100179440()
{
  if (qword_10027DCA0 != -1) {
    dispatch_once(&qword_10027DCA0, &stru_100243548);
  }
  return byte_10027DCA8;
}

void sub_100179484(id a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s WiFiConnectionQuality collection disabled as DNU switch is OFF", "+[WiFiPerfPerAssoc _isCollectionEnabled]_block_invoke")];
  }
}

void sub_1001796A8(id a1)
{
  if (&_DiagnosticLogSubmissionEnabled) {
    byte_10027DCA8 = DiagnosticLogSubmissionEnabled();
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: DiagnosticLogSubmissionEnabled: %d", "_DiagnosticLogSubmissionEnabled_block_invoke", byte_10027DCA8);
  }
}

id sub_100179730(unsigned char *a1)
{
  if (*a1) {
    uint64_t v1 = +[NSString stringWithUTF8String:a1];
  }
  else {
    uint64_t v1 = @"??????";
  }
  id result = [(__CFString *)v1 hasPrefix:@"WiFiDebug"];
  if ((result & 1) == 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:2, "Log collection started (event=DumpLogs, reason=%@)", v1 message];
    }
    id result = objc_alloc_init((Class)sub_1001798B8());
    if (result)
    {
      double v4 = result;
      CFStringRef v8 = @"Reason";
      uint64_t v9 = v1;
      id result = [[(id)sub_1001799AC() requestWithItemID:71 configuration:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1)];
      if (result)
      {
        v6[0] = @"Reason";
        v6[1] = @"Compress";
        v7[0] = v1;
        v7[1] = &__kCFBooleanTrue;
        id v5 = result;
        return [v4 collectLogs:[+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v5, 1) dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2) update:0 reply:&stru_100243588];
      }
    }
  }
  return result;
}

uint64_t sub_1001798B8()
{
  uint64_t v3 = 0;
  double v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = sub_100022DA8;
  id v7 = sub_100022C78;
  uint64_t v0 = qword_10027DCB0;
  uint64_t v8 = qword_10027DCB0;
  if (!qword_10027DCB0)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100179D1C;
    v2[3] = &unk_100240920;
    v2[4] = &v3;
    sub_100179D1C((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100179994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001799AC()
{
  uint64_t v3 = 0;
  double v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = sub_100022DA8;
  id v7 = sub_100022C78;
  uint64_t v0 = qword_10027DCC0;
  uint64_t v8 = qword_10027DCC0;
  if (!qword_10027DCC0)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100179EDC;
    v2[3] = &unk_100240920;
    v2[4] = &v3;
    sub_100179EDC((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100179A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100179AA0(id a1, NSError *a2, NSArray *a3, NSURL *a4)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:2, "Log collection completed (event=DumpLogs error=%ld url=%@)", -[NSError code](a2, "code"), -[NSURL path](a4, "path") message];
  }
}

id sub_100179B2C(unsigned char *a1)
{
  if (*a1) {
    uint64_t v1 = +[NSString stringWithUTF8String:a1];
  }
  else {
    uint64_t v1 = @"??????";
  }
  id result = [(__CFString *)v1 hasPrefix:@"WiFiDebug"];
  if ((result & 1) == 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:2, "Log collection started (event=DatapathStall, reason=%@)", v1 message];
    }
    id result = objc_alloc_init((Class)sub_1001798B8());
    if (result)
    {
      double v4 = result;
      id result = [(id)sub_1001799AC() requestWithItemID:72 configuration:0];
      if (result)
      {
        v6[0] = @"Reason";
        v6[1] = @"Compress";
        v7[0] = v1;
        v7[1] = &__kCFBooleanTrue;
        id v5 = result;
        return [v4 collectLogs:[+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v5, 1) dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2) update:0 reply:&stru_1002435A8];
      }
    }
  }
  return result;
}

void sub_100179C90(id a1, NSError *a2, NSArray *a3, NSURL *a4)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:2, "Log collection completed (event=DatapathStall, error=%ld url=%@)", -[NSError code](a2, "code"), -[NSURL path](a4, "path") message];
  }
}

Class sub_100179D1C(uint64_t a1)
{
  sub_100179D74();
  Class result = objc_getClass("W5Client");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_100197040();
  }
  qword_10027DCB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_100179D74()
{
  v0[0] = 0;
  if (!qword_10027DCB8)
  {
    v0[1] = _NSConcreteStackBlock;
    v0[2] = (void *)3221225472;
    v0[3] = sub_100179E68;
    v0[4] = &unk_10023EAF8;
    v0[5] = v0;
    long long v1 = off_1002435C8;
    uint64_t v2 = 0;
    qword_10027DCB8 = _sl_dlopen();
  }
  if (!qword_10027DCB8) {
    sub_1001970A8(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t sub_100179E68()
{
  uint64_t result = _sl_dlopen();
  qword_10027DCB8 = result;
  return result;
}

Class sub_100179EDC(uint64_t a1)
{
  sub_100179D74();
  Class result = objc_getClass("W5LogItemRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_100197110();
  }
  qword_10027DCC0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_10017A704(id a1)
{
  id v1 = [[WiFiUserInteractionMonitor alloc] _initPrivate];
  uint64_t v2 = qword_10027DCC8;
  qword_10027DCC8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10017ADA4(id a1, void *a2, unint64_t a3)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  double v4 = [a2 clients];
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (CFIndex i = 0; i != v6; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        uint64_t v10 = [v9 callback];
        ((void (**)(void, id, unint64_t))v10)[2](v10, [v9 context], a3);
      }
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
}

void sub_10017AED0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)CXCallObserver);
  [*(id *)(a1 + 32) setCallObserver:v2];

  id v5 = [*(id *)(a1 + 32) callObserver];
  uint64_t v3 = *(void **)(a1 + 32);
  double v4 = [v3 internalQueue];
  [v5 setDelegate:v3 queue:v4];
}

void sub_10017AF64(uint64_t a1)
{
  uint64_t state64 = 0;
  if (notify_get_state(*(_DWORD *)(*(void *)(a1 + 32) + 48), &state64)) {
    return;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: received com.apple.system.console_mode_changed (%llu)", "-[WiFiUserInteractionMonitor _initPrivate]_block_invoke_3", state64)];
  }
  uint64_t v3 = state64;
  if (state64 != 1) {
    goto LABEL_7;
  }
  if ([*(id *)(a1 + 32) isInGameMode])
  {
    uint64_t v3 = state64;
LABEL_7:
    if (v3 || ![*(id *)(a1 + 32) isInGameMode]) {
      return;
    }
    uint64_t v4 = 0;
    goto LABEL_11;
  }
  uint64_t v4 = 1;
LABEL_11:
  [*(id *)(a1 + 32) setIsInGameMode:v4];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v5 = [*(id *)(a1 + 32) clients];
  id v6 = [v5 countByEnumeratingWithState:&v12 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (CFIndex i = 0; i != v7; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        long long v11 = [v10 callback];
        ((void (**)(void, id, uint64_t))v11)[2](v11, [v10 context], 16);
      }
      id v7 = [v5 countByEnumeratingWithState:&v12 objects:v17 count:16];
    }
    while (v7);
  }
}

void sub_10017C0B8(uint64_t a1)
{
  id v2 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:*(void *)(a1 + 32) allowPlaceholder:0 error:0];
  uint64_t v3 = v2;
  if (v2)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v4 = [v2 infoDictionary];
    id v5 = [v4 objectForKey:@"UIBackgroundModes" ofClass:objc_opt_class()];

    id v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v15;
      while (2)
      {
        for (CFIndex i = 0; i != v7; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v15 != v8) {
            objc_enumerationMutation(v5);
          }
          if ([*(id *)(*((void *)&v14 + 1) + 8 * i) isEqualToString:@"voip"])
          {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: detected %@ as VOIP app", "-[WiFiUserInteractionMonitor hasRealTimeAppProperty:]_block_invoke", *(void *)(a1 + 32) message];
            }
            goto LABEL_14;
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
LABEL_14:
  }
  uint64_t v11 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)];
  uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
  long long v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10017D68C(uint64_t a1)
{
  [*(id *)(a1 + 32) updateConnectionState:[objc_msgSend(*(id *)(a1 + 32), "idsService") devices] waitUntilDone:1];
  id v2 = [*(id *)(a1 + 32) copyPairedDestinationID];
  id v3 = [*(id *)(a1 + 32) getPairedVersionID];
  if (v2)
  {
    id v4 = v3;
    id v5 = [*(id *)(a1 + 32) managerQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10017D75C;
    block[3] = &unk_1002425E0;
    void block[4] = *(void *)(a1 + 32);
    void block[5] = v2;
    void block[6] = v4;
    dispatch_sync(v5, block);
  }
}

id sub_10017D75C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updatePairedDeviceID:*(void *)(a1 + 40) versionID:*(void *)(a1 + 48)];
}

void sub_10017D76C(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: knownNetworkStartPoint = %lu, knownNetworkList count= %lu, newReceivedNetworkRecords count = %lu", "__WiFiProcessKnownNetworkTimerCallback", *(void *)(a1 + 280), objc_msgSend(*(id *)(a1 + 264), "count"), objc_msgSend(*(id *)(a1 + 272), "count"));
  }
  if (*(void *)(a1 + 272))
  {

    *(void *)(a1 + 264) = [objc_alloc((Class)NSArray) initWithArray:*(void *)(a1 + 272) copyItems:1];
    *(void *)(a1 + 272) = 0;
  }
  id v3 = *(void **)(a1 + 264);
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 280);
    if (v4 >= (unint64_t)[v3 count])
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: KnownNetworkList has been processed", "__WiFiProcessKnownNetworkTimerCallback"];
      }
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 256), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);

      *(void *)(a1 + 264) = 0;
      *(void *)(a1 + 280) = 0;
    }
    else
    {
      id v5 = (char *)[*(id *)(a1 + 264) count];
      uint64_t v6 = *(void *)(a1 + 280);
      if ((unint64_t)&v5[-v6] >= 0xA) {
        uint64_t v7 = 10;
      }
      else {
        uint64_t v7 = (uint64_t)&v5[-v6];
      }
      id v8 = [*(id *)(a1 + 264) subarrayWithRange:];
      *(void *)(a1 + 280) += v7;
      [(id)a1 processReceivedKnownNetworksInBatch:v8];
    }
  }
}

void sub_10017DC4C(uint64_t a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s: devicePairedNanoregistryNotification from nanoregistry", "-[WiFiIDSSyncEngine registerForInitialSyncTrigger]_block_invoke"];
  }
  notify_cancel(*(_DWORD *)(a1 + 40));
  id v3 = [*(id *)(a1 + 32) managerQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10017DD14;
  block[3] = &unk_10023EFA8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_sync(v3, block);
}

id sub_10017DD14(uint64_t a1)
{
  return [*(id *)(a1 + 32) knownNetworksListChanged];
}

id sub_10017DDB0(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [(NSNotificationCenter *)v2 addObserver:*(void *)(a1 + 32) selector:"enteredCompatibilityState:" name:NRPairedDeviceRegistryDeviceDidEnterCompatibilityStateNotification object:0];
  id v3 = [+[NRPairedDeviceRegistry sharedInstance] compatibilityState];
  unint64_t v4 = *(void **)(a1 + 32);

  return [v4 checkIfSoftwareUpdateStateEntered:v3];
}

id sub_10017DF9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) knownNetworksListChanged];
}

id sub_10017E31C(uint64_t a1)
{
  return [*(id *)(a1 + 32) processReceivedKnownNetworks:*(void *)(a1 + 40)];
}

id sub_10017E328(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"V2"];

  return [v1 processReceivedKnownNetwork:v2];
}

id sub_10017E36C(uint64_t a1)
{
  return [*(id *)(a1 + 32) processReceivedAutoJoinAssist:*(void *)(a1 + 40)];
}

id sub_10017E378(uint64_t a1)
{
  return [*(id *)(a1 + 32) processReceivedLocaleString:*(void *)(a1 + 40)];
}

id sub_10017E738(uint64_t a1)
{
  return [*(id *)(a1 + 32) reSendIdsMessage:*(void *)(a1 + 40)];
}

id sub_10017EDE8(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyStateChanged];
}

id sub_10017EDF0(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyStateChanged];
}

id sub_10017F09C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updatePairedDeviceID:*(void *)(a1 + 40) versionID:*(void *)(a1 + 48)];
}

id sub_10017F290(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyStateChanged];
}

id sub_10017F87C(uint64_t a1)
{
  return [*(id *)(a1 + 32) sendToGizmoOfDataType:*(void *)(a1 + 40)];
}

void sub_10017F888(uint64_t a1)
{
  [*(id *)(a1 + 32) sendCurrentCompanionNetworkWithChannelUpdate:0];
}

void sub_100180588(void *a1, const void *a2)
{
  id v4 = [a1 objectForKey:@"NetworkAtLocationOfInterestType"];
  id v5 = [a1 objectForKey:@"NetworkOfInterestHomeState"];
  if (v4)
  {
    sub_10001C6A4((uint64_t)a2, @"NetworkAtLocationOfInterestType", v4);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : received LOI for network : <%@>", "__WiFiIDSSyncPopulateHomeProperty", sub_10001A43C(a2) message];
    }
  }
  if (v5)
  {
    sub_10001C6A4((uint64_t)a2, @"NetworkOfInterestHomeState", v5);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : received NOI for network : <%@>", "__WiFiIDSSyncPopulateHomeProperty", sub_10001A43C(a2) message];
    }
  }
}

void sub_100181800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_100181834(uint64_t a1)
{
  if ([*(id *)(a1 + 32) objectForKey:@"IS_NETWORK_CAPTIVE"])
  {
    id v2 = [objc_alloc((Class)NSMutableDictionary) initWithObjectsAndKeys:[NSNull null], @"V2", 0];
    id v3 = objc_alloc_init((Class)NSMutableDictionary);
    id v4 = v3;
    uint64_t v5 = *(int *)(a1 + 56);
    if (v5 <= 2)
    {
      [v3 setObject:*(void *)(a1 + 32) forKeyedSubscript:off_100243738[v5]];
      [v2 setObject:v4 forKeyedSubscript:@"V2"];
    }
    NSLog(@"%s %@", "-[WiFiIDSSyncEngine syncKnownWiFiNetwork:withOperation:]_block_invoke", v2);
    [*(id *)(a1 + 40) setLastSyncedKnownNetworkPayloadData:[+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v2, 1, 0)];
    [*(id *)(a1 + 40) sendToGizmoOfDataType:3];

    uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: captive determination is not present for %@, not syncing the network to gizmo yet!!", "-[WiFiIDSSyncEngine syncKnownWiFiNetwork:withOperation:]_block_invoke", [*(id *)(a1 + 32) objectForKey:@"SSID_STR" message];
    }
  }
}

void sub_100181A4C(uint64_t a1)
{
  id v3 = (id *)&qword_10027DD68;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: role %ld, destinationID %@", "-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke", [*(id *)(a1 + 32) role], [*(id *)(a1 + 32) pairedDeviceDestinationID] message];
  }
  if ([*(id *)(a1 + 32) role])
  {
    if (![*(id *)(a1 + 32) pairedDeviceDestinationID])
    {
      [*(id *)(a1 + 32) setIsWaitingForIdsMessageDelivery:1];
      goto LABEL_47;
    }
    uint64_t v31 = a1;
    v37[0] = 0;
    v37[1] = v37;
    v37[2] = 0x3052000000;
    v37[3] = sub_100022DC8;
    v37[4] = sub_100022C8C;
    uint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v38 = sub_10000D990((uint64_t)"-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke");
    id v4 = +[NSMutableDictionary dictionary];
    uint64_t v5 = (void *)sub_1000DD148();
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v6 = [v5 countByEnumeratingWithState:&v33 objects:v39 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v34;
      do
      {
        for (CFIndex i = 0; i != v6; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v34 != v7) {
            objc_enumerationMutation(v5);
          }
          [v4 setObject:*(void *)(*((void *)&v33 + 1) + 8 * i) forKeyedSubscript:objc_msgSend(*(id *)(*((void *)&v33 + 1) + 8 * i), "objectForKeyedSubscript:", kSecAttrAccount)];
        }
        id v6 = [v5 countByEnumeratingWithState:&v33 objects:v39 count:16];
      }
      while (v6);
    }
    id v30 = [objc_alloc((Class)NSMutableArray) initWithCapacity:0];
    uint64_t v9 = (void *)sub_1000830B8((uint64_t)[*(id *)(a1 + 32) manager]);
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: plist network count %lu", "-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke", objc_msgSend(v9, "count"));
    }
    uint64_t v11 = 0;
    char v28 = 0;
    for (unint64_t j = 0; ; ++j)
    {
      if (j >= (unint64_t)[v9 count])
      {
        if (v28)
        {
          unsigned int v24 = sub_100094834((uint64_t)[*(id *)(v31 + 32) manager], (const __CFArray *)v9);
          if (*v3) {
            [*v3 WFLog:3 message:@"%s: modDates have been added to network, changes written to plist: %d", "-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke", v24];
          }
        }
        if (*v3) {
          [*v3 WFLog:3 message:@"%s: ids sync %lu networks" :@"-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke" :[v30 count]];
        }
        id v27 = [*(id *)(v31 + 32) serialIdsDispatchQ];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10018209C;
        block[3] = &unk_1002424A8;
        void block[4] = *(void *)(v31 + 32);
        void block[5] = v30;
        void block[6] = v37;
        dispatch_async(v27, block);

        _Block_object_dispose(v37, 8);
        break;
      }
      id v13 = [v9 objectAtIndex:j];
      if ([*(id *)(v31 + 32) skipSyncForNetwork:v13])
      {
        if (*v3) {
          [*v3 WFLog:3, "%s: Skipping sync for network: <%@>", "-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke", sub_10001A43C(v13) message];
        }
      }
      else
      {

        long long v15 = sub_100185674(v13, (uint64_t)[*(id *)(v31 + 32) manager]);
        uint64_t v11 = v15;
        if (v15 && sub_100186D50(v15))
        {
          long long v16 = v3;
          if (sub_100187080(v11))
          {
            CFStringRef v17 = sub_1000C62C8((CFDictionaryRef *)v13);
            if (v17)
            {
              [v11 setObject:v17 forKey:@"WiFiNetworkPasswordString"];
              if (!sub_1000CD558((uint64_t)v13))
              {
                id v18 = [[objc_msgSend(v4, "objectForKeyedSubscript:", sub_10001A43C(v13)) objectForKeyedSubscript:kSecAttrModificationDate];
                sub_1000CD3F8(v13, v18);
                sub_100093410((uint64_t)[*(id *)(v31 + 32) manager], (CFDictionaryRef *)v13, 0);
                char v28 = 1;
              }
              goto LABEL_27;
            }
          }
          else
          {
            CFStringRef v17 = 0;
LABEL_27:
            id v19 = sub_10001E404((uint64_t)v13, @"NetworkOfInterestHomeState");
            if (v19)
            {
              [v11 setObject:v19 forKey:@"NetworkOfInterestHomeState"];
              id v21 = *v3;
              if (*v16) {
                [v21 WFLog:3, "%s: WFMacRandomisation : syncing NOI for network : <%@>", "-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke", sub_10001A43C(v13) message];
              }
            }
            BOOL v22 = sub_10001E404((uint64_t)v13, @"NetworkAtLocationOfInterestType");
            if (v22)
            {
              [v11 setObject:v22 forKey:@"NetworkAtLocationOfInterestType"];
              if (*v16) {
                [*v16 WFLog:3, "%s: WFMacRandomisation : syncing LOI for network : <%@>", "-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke", sub_10001A43C(v13) message];
              }
            }
            [v30 addObject:v11];
            if (v17)
            {
              CFRelease(v17);
              id v3 = v16;
              continue;
            }
          }
          id v3 = v16;
          continue;
        }
      }
    }
  }
LABEL_47:
}

void sub_100182060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_10018209C(uint64_t a1)
{
  [*(id *)(a1 + 32) setLastSyncedKnownNetworksData:+[NSKeyedArchiver archivedDataWithRootObject:](NSKeyedArchiver, "archivedDataWithRootObject:", *(void *)(a1 + 40))];
  [*(id *)(a1 + 32) sendToGizmoOfDataType:0];

  id v2 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
}

void sub_100182600(uint64_t a1)
{
  if (qword_10027DD68) {
    [[(id)qword_10027DD68 WFLog:@"%s: keychainChangedNotification from securityd" message:3] "-[WiFiIDSSyncEngine subscribeToKeychainChanges]_block_invoke"];
  }
  id v3 = [*(id *)(a1 + 32) managerQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001826C0;
  block[3] = &unk_10023EFA8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v3, block);
}

id sub_1001826C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) checkForWiFiPasswordChange];
}

void sub_1001826C8(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: kWiFiNotificationWiFiPasswordChanged from wifid", "-[WiFiIDSSyncEngine subscribeToKeychainChanges]_block_invoke_3")];
  }
  id v3 = [*(id *)(a1 + 32) managerQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100182788;
  block[3] = &unk_10023EFA8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v3, block);
}

id sub_100182788(uint64_t a1)
{
  return [*(id *)(a1 + 32) knownNetworksListChanged];
}

void sub_100182AB4(uint64_t a1)
{
  [*(id *)(a1 + 32) sendCurrentCompanionNetworkWithChannelUpdate:0];
}

void sub_100182F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100182FA0(uint64_t a1)
{
  if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKey:@"SSID_STR"])
  {
    id v2 = +[NSKeyedArchiver archivedDataWithRootObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) requiringSecureCoding:1 error:0];
    if (!v2
      || ![*(id *)(a1 + 32) lastSyncedKnownNetworksData]
      || !objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "lastSyncedKnownNetworksData"), "isEqual:", v2))
    {
      [*(id *)(a1 + 32) setLastSyncedCompanionAssistedAutoJoinData:v2];
      [*(id *)(a1 + 32) sendToGizmoOfDataType:1];
      goto LABEL_11;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no new assisted autojoin data. Not sending.", "-[WiFiIDSSyncEngine sendCurrentCompanionNetworkWithChannelUpdate:]_block_invoke");
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: ssid is not present for current network , not syncing the network to gizmo !!", @"-[WiFiIDSSyncEngine sendCurrentCompanionNetworkWithChannelUpdate:]_block_invoke"];
    }
  }
LABEL_11:
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
}

void sub_1001830D4(uint64_t a1)
{
  id v2 = +[NSKeyedArchiver archivedDataWithRootObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) requiringSecureCoding:1 error:0];
  if (v2
    && [*(id *)(a1 + 32) lastSyncedKnownNetworksData]
    && objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "lastSyncedKnownNetworksData"), "isEqual:", v2))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no new assisted autojoin data. Not sending.", "-[WiFiIDSSyncEngine sendCurrentCompanionNetworkWithChannelUpdate:]_block_invoke_2")];
    }
  }
  else
  {
    [*(id *)(a1 + 32) setLastSyncedCompanionAssistedAutoJoinData:v2];
    [*(id *)(a1 + 32) sendToGizmoOfDataType:1];
  }
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
}

id sub_1001832A4(uint64_t a1)
{
  [*(id *)(a1 + 32) setLastSyncedCompanionLocaleData:[+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", *(void *)(*(void *)(a1 + 32) + 208), 1, 0)];
  id v2 = *(void **)(a1 + 32);

  return [v2 sendToGizmoOfDataType:2];
}

void sub_100184D2C(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    [a1 setStateChangeCallback:a2];
    [a1 setStateChangeContext:a3];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null wifiIDSSyncEngine" args:("WiFiIDSSyncEngineRegisterStateChangeCallback", nil)];
    }
  }
}

WiFiIDSSyncEngine *sub_100184DDC(uint64_t a1, uint64_t a2)
{
  if (objc_opt_class())
  {
    uint64_t v5 = objc_alloc_init(WiFiIDSSyncEngine);
    [(WiFiIDSSyncEngine *)v5 initializeWithWiFiManager:a1 queue:a2];
  }
  else
  {
    uint64_t v5 = 0;
  }
  return v5;
}

void sub_100184E50(void *a1)
{
  if (a1)
  {
    [a1 keychainAccessibleNow];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null wifiIDSSyncEngine" : @"WiFiIDSSyncEngineNotifyKeychainAccessibleNow"];
    }
  }
}

void sub_100184EE0(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if ([a1 role] && objc_msgSend(a1, "isKeychainUnlocked"))
    {
      [objc_msgSend(a1, "pairedDeviceVersionID") floatValue];
      if (v7 >= 10.0) {
        [a1 syncKnownWiFiNetwork:a2 withOperation:a3];
      }
      else {
        [a1 knownNetworksListChanged];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null wifiIDSSyncEngine", "WiFiIDSSyncEngineNotifyKnownNetworksChanged"];
    }
  }
}

void sub_100184FC0(void *a1, const void *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null wifiIDSSyncEngine" args:("WiFiIDSSyncEngineNotifyCurrentNetworkChange", nil)];
    }
    float v7 = v8;
    goto LABEL_16;
  }
  id v5 = [a1 currentNetwork];
  if (a2 && v5 && CFEqual([a1 currentNetwork], a2))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: same network (%@), not notifying network change.", "WiFiIDSSyncEngineNotifyCurrentNetworkChange", sub_10001A43C(a2) message];
    }
    float v7 = v6;
LABEL_16:
    goto LABEL_17;
  }
  if ([a1 currentNetwork])
  {
    CFRelease([a1 currentNetwork]);
    [a1 setCurrentNetwork:0];
  }
  [a1 setCurrentNetwork:a2];
  if (a2) {
    CFRetain([a1 currentNetwork]);
  }
  [a1 currentNetworkChanged];
LABEL_17:
}

void sub_100185108(void *a1)
{
  if (a1)
  {
    [a1 currentNetworkChannelChanged];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null wifiIDSSyncEngine" : @"WiFiIDSSyncEngineNotifyCurrentChannelChange"];
    }
  }
}

void sub_100185198(void *a1, uint64_t a2)
{
  if (a1)
  {
    [a1 networkRemoved:a2];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null wifiIDSSyncEngine" arguments:("WiFiIDSSyncEngineNetworkRemoved", nil)];
    }
  }
}

void sub_100185238(void *a1, uint64_t a2)
{
  if (a1)
  {
    [a1 sendLocaleToGizmo:a2];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null wifiIDSSyncEngine", @"WiFiIDSSyncEngineNotifyLocaleChange"];
    }
  }
}

void sub_1001852D8(void *a1)
{
  if (a1)
  {
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null wifiIDSSyncEngine", "WiFiIDSSyncEngineRelease"];
    }
  }
}

id sub_100185364(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v5 = [a1 canAttemptAssociationBasedOnBssidGuessingForScannedNetwork:a2];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: null wifiIDSSyncEngine", "WiFiIDSSyncEngineCanAttemptAssociationBasedOnBssidGuessing"];
    }
    id v5 = 0;
  }
  return v5;
}

void sub_100185404(void *a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: null wifiIDSSyncEngine", "WiFiIDSSyncEngineSignalGuessingFailed", v7];
    }
    goto LABEL_9;
  }
  CFNumberRef v5 = (const __CFNumber *)sub_10001E404(a2, @"RSSI");
  if (v5)
  {
    float valuePtr = 0.0;
    CFNumberGetValue(v5, kCFNumberFloatType, &valuePtr);
    if (valuePtr < -75.0)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: ignoring this failure due to poor rssi %f", "WiFiIDSSyncEngineSignalGuessingFailed", valuePtr);
      }
LABEL_9:
      goto LABEL_10;
    }
  }
  [a1 incrementGuessingFailedCountForScannedNetworkWithBssid:sub_10001E404(a2, @"BSSID")];
LABEL_10:
}

void sub_10018551C(void *a1, uint64_t a2)
{
  if (a1)
  {
    [a1 addToKnownNetworkGuessingDictionaryTheNetwork:a2];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null wifiIDSSyncEngine", @"WiFiIDSSyncEngineSignalGuessingSucceeded"];
    }
  }
}

void sub_1001855BC(void *a1)
{
  if ([a1 receivedKnownNetworks] && sub_1000A6F14((uint64_t)objc_msgSend(a1, "manager")))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: apply receivedKnownNetworks", "WiFiIDSSyncReapplyLastSyncKnownNetworks"];
    }
    [a1 processReceivedKnownNetworks:[a1 receivedKnownNetworks]];
  }
}

void *sub_100185674(void *a1, uint64_t a2)
{
  CFNumberRef v5 = +[NSNumber numberWithBool:1];
  id v6 = +[NSNumber numberWithBool:0];
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null networkRef ", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord")];
    }
    goto LABEL_110;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null manager", @"WiFiNetworkSyncHelperCreateSyncableNetworkRecord"];
    }
    goto LABEL_110;
  }
  uint64_t v7 = v6;
  uint64_t v8 = sub_1000C5C14();
  if (v8 != CFGetTypeID(a1))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: network object passed in is not WiFiNetwork type" args:("WiFiNetworkSyncHelperCreateSyncableNetworkRecord")];
    }
    goto LABEL_110;
  }
  id v9 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:7];
  if (!v9)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null cloudNetwork", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord")];
    }
LABEL_110:
    uint64_t v10 = 0;
    goto LABEL_101;
  }
  uint64_t v10 = v9;
  CFDictionaryRef v11 = sub_10000E5B8((uint64_t)a1);
  if (v11)
  {
    CFDictionaryRef v12 = v11;
    CFDateRef Value = CFDictionaryGetValue(v11, @"SSID_STR");
    if (!Value)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: null ssid... abort", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord"];
      }
      goto LABEL_100;
    }
    long long v14 = Value;
    v101 = v4;
    [v10 setObject:Value forKey:@"SSID_STR"];
    CFArrayRef v15 = sub_1000C6D70((const __CFArray *)a1);
    CFArrayRef v16 = v15;
    if (v15 && [(__CFArray *)v15 length]) {
      [v10 setObject:v16 forKey:@"BSSID"];
    }
    CFStringRef v17 = CFDictionaryGetValue(v12, @"AP_MODE");
    if (!v17)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: error - null apMode", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord")];
      }
      id v4 = v101;
      goto LABEL_100;
    }
    [v10 setObject:v17 forKey:@"AP_MODE"];
    CFBooleanRef v18 = (const __CFBoolean *)CFDictionaryGetValue(v12, @"UserDirected");
    id v19 = v7;
    if (v18)
    {
      if (CFBooleanGetValue(v18)) {
        id v19 = v5;
      }
      else {
        id v19 = v7;
      }
    }
    [v10 setObject:v19 forKey:@"UserDirected"];
    CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(v12, @"enabled");
    if (!v20 || (int v21 = CFBooleanGetValue(v20), v22 = v7, v21)) {
      BOOL v22 = v5;
    }
    [v10 setObject:v22 forKey:@"enabled"];
    BOOL v23 = sub_1000C66D0((BOOL)a1);
    CFStringRef v24 = @"WEP";
    if (v23)
    {
      [v10 setObject:v5 forKey:@"WEP"];
      double v25 = CFDictionaryGetValue(v12, @"WEPType");
      if (v25) {
        [v10 setObject:v25 forKey:@"WEPType"];
      }
      uint64_t v26 = (NSNumber *)CFDictionaryGetValue(v12, @"WEP_AUTH_Flags");
      if (!v26)
      {
LABEL_25:
        unsigned int v29 = sub_1000C6FE8((const __CFDictionary *)a1);
        int v30 = sub_10001ED04((uint64_t)a1);
        if (v29)
        {
          if (v30)
          {
            if (sub_1000C7EAC((const __CFDictionary *)a1))
            {
              uint64_t v31 = CFDictionaryGetValue(v12, @"RSN_IE");
              if (!v31) {
                goto LABEL_50;
              }
              BOOL v32 = v31;
              CFStringRef v33 = @"RSN_IE";
              long long v34 = v10;
              goto LABEL_36;
            }
            if (sub_10001E404((uint64_t)a1, @"ALLOW_WPA2_PSK"))
            {
              uint64_t v41 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)a1);
              sub_1000C6FF8((int)v41, 1, 1);
              CFDictionaryRef v42 = sub_10000E5B8((uint64_t)v41);
              uint64_t v43 = CFDictionaryGetValue(v42, @"RSN_IE");
              if (v43)
              {
                [v10 setObject:v43 forKey:@"RSN_IE"];
                if (qword_10027DD68)
                {
                  contexta = v44;
                  [(id)qword_10027DD68 WFLog:3, "%s: inserted WPA2 auth, <%@> will be synced as a WPA2/WPA3 network", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord", sub_10001A43C(a1) message];
                  uint64_t v44 = contexta;
                }
              }
              if (v42) {
                CFRelease(v42);
              }
              if (v41) {
                CFRelease(v41);
              }
            }
          }
          else
          {
            CFDictionaryRef v39 = CFDictionaryGetValue(v12, @"RSN_IE");
            if (v39)
            {
              [v10 setObject:v39 forKey:@"WPA3_RSN_IE"];
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: <%@> will be synced as a WPA3-only network", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord", sub_10001A43C(a1) message];
              }
            }
          }
        }
        else if (v30)
        {
          long long v35 = CFDictionaryGetValue(v12, @"RSN_IE");
          if (v35) {
            [v10 setObject:v35 forKey:@"RSN_IE"];
          }
          long long v36 = CFDictionaryGetValue(v12, @"WPA_IE");
          if (v36)
          {
            id v37 = v36;
            CFTypeID TypeID = CFDictionaryGetTypeID();
            if (sub_10005A924(TypeID, v37))
            {
              CFStringRef v33 = @"WPA_IE";
              long long v34 = v10;
              BOOL v32 = v37;
LABEL_36:
              [v34 setObject:v32 forKey:v33];
            }
          }
        }
LABEL_50:
        if (sub_10001FC1C((uint64_t)a1)) {
          CFIndex v45 = v5;
        }
        else {
          CFIndex v45 = v7;
        }
        [v10 setObject:v45 forKey:@"IS_NETWORK_EAP"];
        if (sub_10001E71C((uint64_t)a1)) {
          CFStringRef v46 = v5;
        }
        else {
          CFStringRef v46 = v7;
        }
        [v10 setObject:v46 forKey:@"IS_PERSONAL_HOTSPOT"];
        if (sub_1000C8140((uint64_t)a1)) {
          long long v47 = v5;
        }
        else {
          long long v47 = v7;
        }
        [v10 setObject:v47 forKey:@"IS_NETWORK_CONFIGURED"];
        CFDictionaryRef v48 = (const __CFDictionary *)sub_100036B30(a2);
        if (v48)
        {
          CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v48);
          if (Copy)
          {
            CFDictionaryRef v50 = Copy;
            int v51 = CFDictionaryContainsKey(Copy, v14);
            CFRelease(v50);
            id v52 = v5;
            if (v51) {
              goto LABEL_63;
            }
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"%s: null customNetworkSetDictRef" args:("__WiFiNetworkSyncHelperIsCustomNetwork")];
          }
        }
        id v52 = v7;
LABEL_63:
        [v10 setObject:v52 forKey:@"IS_NETWORK_CUSTOMIZED"];
        if (sub_1000C83C4((uint64_t)a1)) {
          uint64_t v53 = v5;
        }
        else {
          uint64_t v53 = v7;
        }
        [v10 setObject:v53 forKey:@"IS_NETWORK_EXPIRABLE"];
        if (!&_CNForgetSSID) {
          goto LABEL_74;
        }
        if (sub_10001E404((uint64_t)a1, kCNSIsWhitelistedCaptiveNetworkProperty) == kCFBooleanTrue)
        {
          CFStringRef v55 = @"IS_NETWORK_WHITELISTING_CAPTIVE";
        }
        else
        {
          if (!sub_1000C7590((uint64_t)a1))
          {
LABEL_74:
            if (sub_1000C81DC((uint64_t)a1)) {
              CFNumberRef v58 = v5;
            }
            else {
              CFNumberRef v58 = v7;
            }
            [v10 setObject:v58 forKey:@"IS_NETWORK_APPBASED"];
            CFArrayRef v59 = sub_1000C6E14((const __CFArray *)a1);
            if (v16)
            {
              CFArrayRef v60 = v59;
              if ([(__CFArray *)v16 length])
              {
                if (v60)
                {
                  if ((int)[(__CFArray *)v60 intValue] >= 15)
                  {
                    id v61 = [(__CFArray *)v16 componentsSeparatedByString:@":"];
                    if ([v61 count] == (id)6)
                    {
                      int v102 = -1431655766;
                      -[NSScanner scanHexInt:](+[NSScanner scannerWithString:](NSScanner, "scannerWithString:", [v61 lastObject]), "scanHexInt:", &v102);
                      id v97 = [v61 objectAtIndex:0];
                      id v62 = [v61 objectAtIndex:1];
                      id v63 = [v61 objectAtIndex:2];
                      id v64 = [v61 objectAtIndex:3];
                      id v65 = [v61 objectAtIndex:4];
                      uint64_t v98 = +[NSString stringWithFormat:@"%@:%@:%@:%@:%@:%x", v97, v62, v63, v64, v65, (v102 - 1)];
                      id v95 = [v61 objectAtIndex:0];
                      id v66 = [v61 objectAtIndex:1];
                      id v67 = [v61 objectAtIndex:2];
                      id v68 = [v61 objectAtIndex:3];
                      id v69 = [v61 objectAtIndex:4];
                      unint64_t v96 = +[NSString stringWithFormat:@"%@:%@:%@:%@:%@:%x", v95, v66, v67, v68, v69, (v102 - 2)];
                      id v94 = [v61 objectAtIndex:0];
                      id v70 = [v61 objectAtIndex:1];
                      id v71 = [v61 objectAtIndex:2];
                      id v72 = [v61 objectAtIndex:3];
                      id v73 = [v61 objectAtIndex:4];
                      SCDynamicStoreContext context = +[NSString stringWithFormat:@"%@:%@:%@:%@:%@:%x", v94, v70, v71, v72, v73, (v102 + 1)];
                      id v93 = [v61 objectAtIndex:0];
                      id v74 = [v61 objectAtIndex:1];
                      id v75 = [v61 objectAtIndex:2];
                      id v76 = [v61 objectAtIndex:3];
                      id v77 = [v61 objectAtIndex:4];
                      unsigned int v78 = +[NSString stringWithFormat:@"%@:%@:%@:%@:%@:%x", v93, v74, v75, v76, v77, (v102 + 2)];
                      [v10 setObject:v98 forKey:@"GUESSED_2ghzBSSID1"];
                      [v10 setObject:v96 forKey:@"GUESSED_2ghzBSSID2"];
                      [v10 setObject:context forKey:@"GUESSED_2ghzBSSID3"];
                      [v10 setObject:v78 forKey:@"GUESSED_2ghzBSSID4"];
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: for 5ghz network <%@> %@: guess1 %@, guess2 %@, guess3 %@, guess4 %@", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord", v14, v16, v98, v96, context, v78 message];
                      }
                    }
                  }
                }
              }
            }
            if (sub_1000CD794((uint64_t)a1) == 1) {
              [v10 setObject:v5 forKey:@"IS_NETWORK_CARPLAY_ONLY"];
            }
            [v10 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_10001EBFC((uint64_t)a1))] forKey:@"SHARE_MODE"];
            [v10 setObject:[NSNumber numberWithUnsignedInt:sub_1000CE5DC((uint64_t)a1)] forKey:@"USER_ROLE"];
            id v4 = v101;
            if (sub_10001E404((uint64_t)a1, @"SaveDataMode")) {
              [v10 setObject:sub_10001E404((uint64_t)a1, @"SaveDataMode") forKey:@"LOW_DATA_MODE"];
            }
            [v10 setValue:sub_10001E404((uint64_t)a1, @"addedAt") forKey:@"AddedAt"];
            [v10 setValue:sub_10001E404((uint64_t)a1, @"lastJoined") forKey:@"UserJoinedAt"];
            id v80 = sub_10001CECC((CFDictionaryRef *)a1);
            uint64_t v81 = (NSNumber *)[v80 lastJoinedBySystemAtWeek];
            if (v81) {
              uint64_t v81 = +[NSNumber numberWithUnsignedInteger:v81];
            }
            [v10 setValue:v81 forKey:@"lastJoinedBySystemAtWeek"];
            uint64_t v82 = (NSNumber *)[v80 was6GHzOnlyAtWeek];
            if (v82) {
              uint64_t v82 = +[NSNumber numberWithUnsignedInteger:v82];
            }
            [v10 setValue:v82 forKey:@"was6GHzOnlyAtWeek"];
            [v10 setValue:[v80 seamlessSSIDList] forKey:@"seamlessSSIDList"];

            [v10 setObject:[+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", sub_10001ED9C((uint64_t)a1))] forKey:@"IS_PRIVACY_PROXY_ENABLED"];
            if (sub_10001E404((uint64_t)a1, @"WiFiNetworkAttributeIsMoving"))
            {
              v83 = sub_10001E404((uint64_t)a1, @"WiFiNetworkAttributeIsMoving");
              CFRange v84 = +[NSNumber numberWithBool:CFEqual(v83, kCFBooleanTrue) != 0];
            }
            else
            {
              CFRange v84 = 0;
            }
            if (sub_10001E404((uint64_t)a1, @"WiFiNetworkAttributeIsPublic"))
            {
              CFRange v85 = sub_10001E404((uint64_t)a1, @"WiFiNetworkAttributeIsPublic");
              CFRange v86 = +[NSNumber numberWithBool:CFEqual(v85, kCFBooleanTrue) != 0];
            }
            else
            {
              CFRange v86 = 0;
            }
            [v10 setValue:v84 forKey:@"IS_MOVING"];
            [v10 setValue:v86 forKey:@"IS_PUBLIC"];
LABEL_100:
            CFRelease(v12);
            goto LABEL_101;
          }
          BOOL v54 = sub_1000C74BC((uint64_t)a1);
          CFStringRef v55 = @"IS_NETWORK_CAPTIVE";
          if (!v54)
          {
            id v56 = v10;
            NSFileAttributeKey v57 = v7;
LABEL_73:
            [v56 setObject:v57 forKey:v55];
            goto LABEL_74;
          }
        }
        id v56 = v10;
        NSFileAttributeKey v57 = v5;
        goto LABEL_73;
      }
      id v27 = v26;
      CFStringRef v24 = @"WEP_AUTH_Flags";
      char v28 = v10;
    }
    else
    {
      char v28 = v10;
      id v27 = v7;
    }
    [v28 setObject:v27 forKey:v24];
    goto LABEL_25;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, @"%s: null networkRecord", @"WiFiNetworkSyncHelperCreateSyncableNetworkRecord"];
  }
LABEL_101:
  return v10;
}

void sub_100186394(uint64_t a1)
{
  if (a1)
  {
    sub_1000CFCB4(a1);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkSyncHelperSanitizeNetwork")];
    }
  }
}

_WORD *sub_100186414(void *a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null cloudNetworkDict" args:("WiFiNetworkSyncHelperCreateNetworkRef")];
    }
    goto LABEL_77;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null networkRecord", "WiFiNetworkSyncHelperCreateNetworkRef"];
    }
LABEL_77:
    CFDictionaryRef v39 = 0;
    goto LABEL_70;
  }
  id v4 = Mutable;
  id v5 = [a1 objectForKey:@"SSID_STR"];
  if (v5)
  {
    CFDictionarySetValue(v4, @"SSID_STR", v5);
    id v6 = [a1 objectForKey:@"BSSID"];
    if (v6) {
      CFDictionarySetValue(v4, @"BSSID", v6);
    }
    id v7 = [a1 objectForKey:@"AP_MODE"];
    if (v7) {
      CFDictionarySetValue(v4, @"AP_MODE", v7);
    }
    id v8 = [a1 objectForKey:@"UserDirected"];
    if (v8)
    {
      if ([v8 BOOLValue]) {
        id v9 = (const void **)&kCFBooleanTrue;
      }
      else {
        id v9 = (const void **)&kCFBooleanFalse;
      }
      CFDictionarySetValue(v4, @"UserDirected", *v9);
    }
    id v10 = [a1 objectForKey:@"WEP"];
    if (v10 && [v10 BOOLValue])
    {
      CFDictionarySetValue(v4, @"WEP", kCFBooleanTrue);
      id v11 = [a1 objectForKey:@"WEPType"];
      if (v11) {
        CFDictionarySetValue(v4, @"WEPType", v11);
      }
      id v12 = [a1 objectForKey:@"WEP_AUTH_Flags"];
      if (v12) {
        CFDictionarySetValue(v4, @"WEP_AUTH_Flags", v12);
      }
    }
    id v13 = [a1 objectForKey:@"WPA_IE"];
    if (v13) {
      CFDictionarySetValue(v4, @"WPA_IE", v13);
    }
    id v14 = [a1 objectForKey:@"RSN_IE"];
    if (v14) {
      CFDictionarySetValue(v4, @"RSN_IE", v14);
    }
    id v15 = [a1 objectForKey:@"WPA3_RSN_IE"];
    if (v15) {
      CFDictionarySetValue(v4, @"RSN_IE", v15);
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s for <%@>", "WiFiNetworkSyncHelperCreateNetworkRef", [a1 objectForKey:@"SSID_STR" message];
    }
    id v17 = [a1 objectForKey:@"SHARE_MODE"];
    if (v17) {
      CFDictionarySetValue(v4, @"ShareMode", v17);
    }
    id v18 = [a1 objectForKey:@"USER_ROLE"];
    if (v18) {
      CFDictionarySetValue(v4, @"UserRole", v18);
    }
    id v19 = [a1 objectForKey:@"LOW_DATA_MODE"];
    if (v19) {
      CFDictionarySetValue(v4, @"SaveDataMode", v19);
    }
    if (&_CNForgetSSID)
    {
      id v20 = [a1 objectForKey:@"IS_NETWORK_WHITELISTING_CAPTIVE"];
      if (v20 && [v20 BOOLValue]) {
        CFDictionarySetValue(v4, kCNSIsWhitelistedCaptiveNetworkProperty, kCFBooleanTrue);
      }
      id v21 = [a1 objectForKey:@"IS_NETWORK_CAPTIVE"];
      if (v21 && [v21 BOOLValue]) {
        CFDictionarySetValue(v4, kCNSCaptiveNetworkProperty, kCFBooleanTrue);
      }
    }
    id v22 = [a1 objectForKey:@"IS_PERSONAL_HOTSPOT"];
    if (v22)
    {
      if ([v22 BOOLValue]) {
        BOOL v23 = (const void **)&kCFBooleanTrue;
      }
      else {
        BOOL v23 = (const void **)&kCFBooleanFalse;
      }
      CFDictionarySetValue(v4, @"IsPersonalHotspot", *v23);
    }
    id v24 = [a1 objectForKey:@"AddedAt"];
    if (v24) {
      CFDictionarySetValue(v4, @"addedAt", v24);
    }
    id v25 = [a1 objectForKey:@"UserJoinedAt"];
    if (v25) {
      CFDictionarySetValue(v4, @"lastJoined", v25);
    }
    id v26 = [a1 objectForKey:@"IS_PRIVACY_PROXY_ENABLED"];
    if (v26)
    {
      if ([v26 BOOLValue]) {
        id v27 = (const void **)&kCFBooleanTrue;
      }
      else {
        id v27 = (const void **)&kCFBooleanFalse;
      }
      CFDictionarySetValue(v4, @"PrivacyProxyEnabled", *v27);
    }
    char v28 = (CFDictionaryRef *)sub_100019658((int)kCFAllocatorDefault, v4);
    unsigned int v29 = sub_10001CECC(v28);
    id v30 = [a1 objectForKeyedSubscript:@"lastJoinedBySystemAtWeek"];
    if (v30)
    {
      uint64_t v31 = v30;
      id v32 = [v30 unsignedIntegerValue];
      if (v32 <= [v29 lastJoinedBySystemAtWeek]) {
        id v33 = [v29 lastJoinedBySystemAtWeek];
      }
      else {
        id v33 = [v31 unsignedIntegerValue];
      }
      [v29 setLastJoinedBySystemAtWeek:v33];
    }
    id v34 = [a1 objectForKeyedSubscript:@"was6GHzOnlyAtWeek"];
    if (v34)
    {
      long long v35 = v34;
      id v36 = [v34 unsignedIntegerValue];
      if (v36 <= [v29 was6GHzOnlyAtWeek]) {
        id v37 = [v29 was6GHzOnlyAtWeek];
      }
      else {
        id v37 = [v35 unsignedIntegerValue];
      }
      [v29 setWas6GHzOnlyAtWeek:v37];
    }
    id v38 = [a1 objectForKeyedSubscript:@"seamlessSSIDList"];
    if (v38) {
      [v29 setSeamlessSSIDList:v38];
    }
    if (v28) {
      CFRelease(v28);
    }
    CFDictionaryRef v39 = sub_1000CFEE8(v29, 0);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null WIFICLOUDSYNC_NETWORKKEY_SSID", "WiFiNetworkSyncHelperCreateNetworkRef")];
    }
    CFDictionaryRef v39 = 0;
  }
  CFRelease(v4);
LABEL_70:
  sub_100186394((uint64_t)v39);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: network content to be returned to caller: %@", "WiFiNetworkSyncHelperCreateNetworkRef", v39 message];
  }
  return v39;
}

void sub_100186A24(void *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v4 = sub_1000C5C14();
      CFTypeID v5 = CFGetTypeID(a1);
      if (v4 != v5)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: network object passed in is not WiFiNetwork type", "WiFiNetworkSyncHelperAddNetworkToPlist"];
        }
        id v8 = v6;
        goto LABEL_15;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s", "WiFiNetworkSyncHelperAddNetworkToPlist")];
      }
      if (!sub_1000C6FE8((const __CFDictionary *)a1)
        || sub_10001ED04((uint64_t)a1)
        || sub_1000A7484(a2))
      {
        sub_100093634(a2, a1, 3);
        return;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WPA3 not supported, will not add WPA3-only network", "WiFiNetworkSyncHelperAddNetworkToPlist")];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:message:3, "%s: null manager", "WiFiNetworkSyncHelperAddNetworkToPlist"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null networkRef ", "WiFiNetworkSyncHelperAddNetworkToPlist")
    }
  }
  id v8 = v7;
LABEL_15:
}

void sub_100186BE0(void *a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null networkRef ", "WiFiNetworkSyncHelperRemoveNetworkFromPlist"];
    }
    goto LABEL_13;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager", @"WiFiNetworkSyncHelperRemoveNetworkFromPlist"];
    }
LABEL_13:
    id v8 = v7;
    goto LABEL_17;
  }
  uint64_t v4 = sub_1000C5C14();
  CFTypeID v5 = CFGetTypeID(a1);
  if (v4 == v5)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s", "WiFiNetworkSyncHelperRemoveNetworkFromPlist"];
    }
    sub_10009A098(a2, a1, 4);
    return;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s: network object passed in is not WiFiNetwork type", "WiFiNetworkSyncHelperRemoveNetworkFromPlist"];
  }
  id v8 = v6;
LABEL_17:
}

uint64_t sub_100186D50(void *a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null syncFormattedNetworkRecord", "WiFiNetworkSyncHelperIsNetworkSyncable"];
    }
    goto LABEL_40;
  }
  id v3 = [a1 objectForKey:@"IS_NETWORK_EAP"];
  if (!v3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: missing WIFICLOUDSYNC_NETWORKKEY_ISEAP key, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable");
    }
    goto LABEL_40;
  }
  if ([v3 BOOLValue])
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: EAP network, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable"];
    }
    goto LABEL_40;
  }
  id v4 = [a1 objectForKey:@"IS_NETWORK_CUSTOMIZED"];
  if (!v4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: missing WIFICLOUDSYNC_NETWORKKEY_ISCUSTOMIZED key, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable"];
    }
    goto LABEL_40;
  }
  if ([v4 BOOLValue])
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: customized network, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable")];
    }
    goto LABEL_40;
  }
  id v5 = [a1 objectForKey:@"IS_NETWORK_CONFIGURED"];
  if (!v5)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: missing WIFICLOUDSYNC_NETWORKKEY_ISCONFIGURED key, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable");
    }
    goto LABEL_40;
  }
  if ([v5 BOOLValue])
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: configured network, not syncable", @"WiFiNetworkSyncHelperIsNetworkSyncable"];
    }
    goto LABEL_40;
  }
  id v6 = [a1 objectForKey:@"AP_MODE"];
  if (v6 && [v6 intValue] != 2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: non-infrastructure network, not syncable" : @"WiFiNetworkSyncHelperIsNetworkSyncable"];
    }
    goto LABEL_40;
  }
  id v7 = [a1 objectForKey:@"IS_NETWORK_APPBASED"];
  if (v7 && [v7 BOOLValue])
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: app based network, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable"];
    }
    goto LABEL_40;
  }
  id v8 = [a1 objectForKey:@"IS_NETWORK_EXPIRABLE"];
  if (v8 && [v8 BOOLValue])
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: expirable network, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable"];
    }
    goto LABEL_40;
  }
  id v9 = [a1 objectForKey:@"IS_NETWORK_CARPLAY_ONLY"];
  if (v9 && [v9 BOOLValue])
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: carplay only network, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable")];
    }
LABEL_40:
    uint64_t v10 = 0;
    goto LABEL_17;
  }
  uint64_t v10 = 1;
LABEL_17:
  return v10;
}

uint64_t sub_100187080(void *a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null syncFormattedNetworkRecord", @"WiFiNetworkSyncHelperGetNetworkSecurity"];
    }
    goto LABEL_7;
  }
  id v3 = [a1 objectForKey:@"WEP"];
  if (v3 && ([v3 BOOLValue] & 1) != 0)
  {
    uint64_t v4 = 1;
  }
  else if ([a1 objectForKey:@"WPA3_RSN_IE"])
  {
    uint64_t v4 = 4;
  }
  else if ([a1 objectForKey:@"RSN_IE"])
  {
    uint64_t v4 = 3;
  }
  else
  {
    if (![a1 objectForKey:@"WPA_IE"])
    {
LABEL_7:
      uint64_t v4 = 0;
      goto LABEL_8;
    }
    uint64_t v4 = 2;
  }
LABEL_8:
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: <%@> security %d", "WiFiNetworkSyncHelperGetNetworkSecurity", [a1 objectForKey:@"SSID_STR", v4 message];
  }
  return v4;
}

void sub_1001871D8(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s", "WiFiCoexManagerRegister")];
  }
  if (&WCMEnabled)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    mach_service = xpc_connection_create_mach_service("com.apple.WirelessCoexManager", global_queue, 0);
    if (mach_service)
    {
      id v5 = mach_service;
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_100187424;
      handler[3] = &unk_100243750;
      handler[4] = a1;
      xpc_connection_set_event_handler(mach_service, handler);
      xpc_connection_resume(v5);
      keys = "kWCMRegisterProcess_ProcessId";
      xpc_object_t values = xpc_uint64_create(1uLL);
      xpc_object_t v6 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
      *(_OWORD *)id v11 = *(_OWORD *)off_100243770;
      object[0] = xpc_uint64_create(1uLL);
      object[1] = v6;
      xpc_object_t v7 = xpc_dictionary_create((const char *const *)v11, object, 2uLL);
      xpc_connection_send_message(v5, v7);
      xpc_release(values);
      xpc_release(object[0]);
      xpc_release(v6);
      xpc_release(v7);
      sub_1000A0E70(a1, (uint64_t)v5);
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"Error: %s: failed to create xpc connection" arguments:@"WiFiCoexManagerRegister"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WCM is disabled ", "WiFiCoexManagerRegister")];
    }
  }
}

void sub_100187424(uint64_t a1, xpc_object_t object)
{
  if (!object)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"Error: %s: eventObject is null", @"__WiFiCoexManagerHandleEvent"];
    }
LABEL_16:
    return;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_error) {
    return;
  }
  if (object != &_xpc_error_connection_interrupted)
  {
    if (object == &_xpc_error_termination_imminent)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: about to Die", "__WiFiCoexManagerHandleEvent"];
      }
    }
    else
    {
      if (object != &_xpc_error_connection_invalid) {
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@" %s: Invalid XPC Connection" args:("__WiFiCoexManagerHandleEvent")];
      }
    }
    goto LABEL_16;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: Re-Register"];
  }

  sub_1001871D8(v3);
}

void sub_1001875B4(xpc_object_t *a1)
{
  if (&WCMEnabled)
  {
    id v2 = (_xpc_connection_s *)*a1;
    if (v2)
    {
      xpc_connection_cancel(v2);
      xpc_release(*a1);
      *a1 = 0;
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"Error: %s: coexMgrXpcConnection is null" args:("WiFiCoexManagerUnRegister")];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WCM is disabled ", "WiFiCoexManagerUnRegister")];
    }
  }
}

uint64_t sub_1001879BC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 69846) >= 0xFFFFFF64) {
    return (uint64_t)*(&off_100243780 + 5 * (v1 - 69690) + 5);
  }
  else {
    return 0;
  }
}

uint64_t sub_1001879FC(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v3 = -304;
    goto LABEL_9;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    int v3 = -300;
    goto LABEL_9;
  }
  if (*(_DWORD *)(result + 56) || *(_DWORD *)(result + 60) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  uint64_t v4 = (unsigned int *)(a2 + 28);
  *(void *)(a2 + 32) = 0x11000000000000;
  unsigned int v5 = *(_DWORD *)(result + 12);
  int v6 = *(_DWORD *)(result + 48);
  uint64_t v7 = *(unsigned int *)(result + 52);
  int v8 = *(_DWORD *)(result + 28);
  long long v9 = *(_OWORD *)(result + 92);
  v10[0] = *(_OWORD *)(result + 76);
  v10[1] = v9;
  Class result = sub_1000DE714(v5, v6, v7, v8, v4, (_DWORD *)(a2 + 48), v10);
  if (!result)
  {
    *(NDR_record_t *)(a2 + 40) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 52;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_100187B04(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000DEA6C(result[3]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_100187B60(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = (_DWORD *)sub_1000E0C5C(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_100187C08(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = (_DWORD *)sub_1000E0D64(result[3], result[8], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_100187CB8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    int v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = sub_1000E074C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_100187D9C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  Class result = sub_1000E0920(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100187E70(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      CFIndex v3 = *(unsigned int *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E0E78(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100187F04(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 2 && *(_DWORD *)(result + 4) == 76)
  {
    if (*(unsigned char *)(result + 39) == 1 && *(unsigned char *)(result + 55) == 1)
    {
      CFIndex v3 = *(unsigned int *)(result + 40);
      if (v3 == *(_DWORD *)(result + 68))
      {
        unsigned int v4 = *(_DWORD *)(result + 56);
        if (v4 == *(_DWORD *)(result + 72))
        {
          Class result = sub_1000E10C4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4);
          *(_DWORD *)(a2 + 32) = result;
          return result;
        }
      }
    }
    int v5 = -300;
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100187FB8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      CFIndex v3 = *(unsigned int *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E1230(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018804C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 60)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      CFIndex v3 = *(unsigned int *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E13E0(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(unsigned int *)(result + 56));
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_1001880E4(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E1540(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100188178(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 60)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E1654(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(_DWORD *)(result + 56));
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100188210(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 64)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      CFIndex v3 = *(unsigned int *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E17D0(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(_DWORD *)(result + 56), *(_DWORD *)(result + 60));
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_1001882A8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (CFIndex v3 = *(unsigned int *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  Class result = sub_1000E1994(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_10018835C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 64)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 60))
      {
        Class result = sub_1000E1BE4(*(_DWORD *)(result + 12), *(unsigned int *)(result + 52), *(unsigned int *)(result + 56), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_1001883F4(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 64)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 60))
      {
        Class result = sub_1000E1A9C(*(_DWORD *)(result + 12), *(unsigned int *)(result + 52), *(unsigned int *)(result + 56), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10018848C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E1D2C(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_1001884F0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000DEAB4(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_100188554(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000DEBE8(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_1001885D0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000DECAC(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_100188634(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000DEDE0(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_1001886B0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000DF1CC(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_100188714(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000DF2F8(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_100188790(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 96)
  {
    int v5 = -304;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v5;
    goto LABEL_11;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 84))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 88)))
  {
    int v5 = -300;
    goto LABEL_10;
  }
  Class result = sub_1000DF40C(*(_DWORD *)(result + 12), *(_DWORD *)(result + 68), *(unsigned int *)(result + 72), *(_DWORD *)(result + 76), *(unsigned int *)(result + 80), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, *(_DWORD *)(result + 92));
  *(_DWORD *)(a2 + 32) = result;
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10018885C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000DF634(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_1001888D8(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000DF6F8(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_10018893C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = (_DWORD *)sub_1000DF828(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_1001889E4(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000DFAEC(result[3], result[8], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_100188A68(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000DFC2C(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_100188AE4(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000DFCF0(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_100188B60(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E2578(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_100188BDC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E05C8(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_100188C40(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E0688(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_100188CBC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E1E88(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_100188D20(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E1F9C(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_100188D9C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000DEEA4(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_100188E18(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = sub_1000DEFB8(*(_DWORD *)(result + 12), *(double *)(result + 32));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_100188E7C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000DF0CC(result[3], (void *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 44;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_100188EF8(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E2064(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_100188F5C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E217C(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_100188FD8(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E2244(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t sub_10018903C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = sub_1000E2390(*(_DWORD *)(result + 12), *(void *)(result + 32));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_1001890A0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000DFEBC(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10018911C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = (_DWORD *)sub_1000DFF80(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_1001891C4(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E00B0(result[3]);
    *(_DWORD *)(a2 + 32) = result;
  }
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_100189220(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E01A4(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10018929C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = (_DWORD *)sub_1000E0268(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_100189344(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  Class result = sub_1000E0380(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

_DWORD *sub_1001893F8(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = (_DWORD *)sub_1000E04C0(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_1001894A0(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v3 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 68)
    || *(_DWORD *)(result + 56) != *(_DWORD *)(result + 72))
  {
    int v3 = -300;
    goto LABEL_11;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = sub_1000E2D54(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), *(UInt8 **)(result + 44), *(_DWORD *)(result + 56), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_12:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_1001895A8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 3 && *(_DWORD *)(result + 4) == 96)
  {
    if (*(unsigned char *)(result + 39) == 1 && *(unsigned char *)(result + 55) == 1 && *(unsigned char *)(result + 71) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 84))
      {
        unsigned int v4 = *(_DWORD *)(result + 56);
        if (v4 == *(_DWORD *)(result + 88))
        {
          unsigned int v5 = *(_DWORD *)(result + 72);
          if (v5 == *(_DWORD *)(result + 92))
          {
            Class result = sub_1000E2FE4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, *(UInt8 **)(result + 60), v5);
            *(_DWORD *)(a2 + 32) = result;
            return result;
          }
        }
      }
    }
    int v6 = -300;
  }
  else
  {
    int v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018967C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  Class result = sub_1000E4890(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_100189730(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  Class result = sub_1000E49A8(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(unsigned int *)(result + 56), (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_1001897E8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E31E0(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018987C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 60)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E3338(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(_DWORD *)(result + 56));
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100189914(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  Class result = sub_1000E34AC(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_1001899E8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  Class result = sub_1000E4414(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100189ABC(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 80)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 76)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  Class result = sub_1000E4B60(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(unsigned int *)(result + 72), *(UInt8 **)(result + 44), v4, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100189B94(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  Class result = sub_1000E5334(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100189C68(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    int v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = sub_1000E58A4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), *(unsigned int *)(result + 56), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52), (int *)(a2 + 56));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_100189D54(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  Class result = sub_1000E5BB4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(unsigned int *)(result + 56), (unsigned int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_100189E0C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 64)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E5D90(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(void *)(result + 56));
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100189EA4(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E2448(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100189F38(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E263C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_100189FCC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E2738(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t sub_10018A030(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E2860(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018A0C4(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    int v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = sub_1000E295C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10018A1A8(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = (_DWORD *)sub_1000E2B44(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10018A250(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = (_DWORD *)sub_1000E2C4C(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10018A2F8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  Class result = sub_1000DFDB4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_10018A3AC(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 3 || *(_DWORD *)(result + 4) != 96)
  {
    int v7 = -304;
LABEL_13:
    *(_DWORD *)(a2 + 32) = v7;
    NDR_record_t v6 = NDR_record;
    goto LABEL_14;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || *(unsigned char *)(result + 71) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 84))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 88))
    || (unsigned int v5 = *(_DWORD *)(result + 72), v5 != *(_DWORD *)(result + 92)))
  {
    int v7 = -300;
    goto LABEL_13;
  }
  Class result = sub_1000E5FEC(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, *(UInt8 **)(result + 60), v5, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v6 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_14:
  *(NDR_record_t *)(a2 + 24) = v6;
  return result;
}

uint64_t sub_10018A4A0(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 80)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 76)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  Class result = sub_1000E6438(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(unsigned int *)(result + 72), *(UInt8 **)(result + 44), v4, (unsigned int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10018A578(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 80)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 76)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  Class result = sub_1000E6678(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(_DWORD *)(result + 72), *(UInt8 **)(result + 44), v4, (unsigned int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10018A650(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 80)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  Class result = sub_1000E685C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, *(unsigned int *)(result + 76), (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10018A728(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v3 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 68)
    || *(_DWORD *)(result + 56) != *(_DWORD *)(result + 72))
  {
    int v3 = -300;
    goto LABEL_11;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = sub_1000E6DA4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), *(UInt8 **)(result + 44), *(_DWORD *)(result + 56), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52), (_DWORD *)(a2 + 56));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_12:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10018A834(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    int v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = sub_1000E6FC8(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10018A918(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  Class result = sub_1000E70FC(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10018A9EC(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    int v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = sub_1000E5744(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), *(unsigned int *)(result + 56), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52), (int *)(a2 + 56));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10018AAD8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E7288(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018AB6C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 60)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      CFIndex v3 = *(unsigned int *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E7384(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018AC04(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 60)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      CFIndex v3 = *(unsigned int *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E74F8(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10018AC9C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = (_DWORD *)sub_1000E75F4(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10018AD44(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E76F4(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_10018ADC0(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 60)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 56))
      {
        Class result = sub_1000E77B8(*(_DWORD *)(result + 12), *(_DWORD *)(result + 52), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10018AE58(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E6C1C(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_10018AEBC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E6CDC(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_10018AF38(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v3 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 68)
    || *(_DWORD *)(result + 56) != *(_DWORD *)(result + 72))
  {
    int v3 = -300;
    goto LABEL_11;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = sub_1000E796C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), *(UInt8 **)(result + 44), *(_DWORD *)(result + 56), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52), (_DWORD *)(a2 + 56));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_12:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10018B044(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = (_DWORD *)sub_1000E7BA8(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10018B0EC(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    int v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = sub_1000E7CE0(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(unsigned int *)(result + 40), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10018B1D0(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 72)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      CFIndex v3 = *(unsigned int *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000E7E70(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(double *)(result + 56), *(double *)(result + 64));
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018B268(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 52)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = sub_1000E8094(*(_DWORD *)(result + 12), *(_DWORD *)(result + 48), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52), *(double *)(result + 32), *(double *)(result + 40));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10018B31C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    int v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = sub_1000E82CC(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(unsigned int *)(result + 40), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10018B400(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  Class result = sub_1000E845C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

_DWORD *sub_10018B4D4(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = (_DWORD *)sub_1000E86D0(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10018B57C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = (_DWORD *)sub_1000E87B4(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10018B624(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E88B4(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_10018B688(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E89D4(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10018B704(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E8AE4(result[3]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_10018B760(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E8BE4(result[3]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t sub_10018B7BC(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = sub_1000E8CE4(*(_DWORD *)(result + 12), *(double *)(result + 32));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t sub_10018B820(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 44)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = sub_1000E8DF8(*(_DWORD *)(result + 12), *(unsigned int *)(result + 40), *(double *)(result + 32));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_10018B888(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E8F20(result[3]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t sub_10018B8E4(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v3 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 68)
    || *(_DWORD *)(result + 56) != *(_DWORD *)(result + 72))
  {
    int v3 = -300;
    goto LABEL_11;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = sub_1000E9020(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), *(UInt8 **)(result + 44), *(_DWORD *)(result + 56), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_12:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10018B9EC(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 2 && *(_DWORD *)(result + 4) == 80)
  {
    if (*(unsigned char *)(result + 39) == 1 && *(unsigned char *)(result + 55) == 1)
    {
      CFIndex v3 = *(unsigned int *)(result + 40);
      if (v3 == *(_DWORD *)(result + 68))
      {
        unsigned int v4 = *(_DWORD *)(result + 56);
        if (v4 == *(_DWORD *)(result + 76))
        {
          Class result = sub_1000E9350(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(unsigned int *)(result + 72), *(UInt8 **)(result + 44), v4);
          *(_DWORD *)(a2 + 32) = result;
          return result;
        }
      }
    }
    int v5 = -300;
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018BAA4(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  Class result = sub_1000E9490(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

_DWORD *sub_10018BB58(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E96B8(result[3]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_10018BBB4(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = (_DWORD *)sub_1000E97B8(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10018BC5C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E98C0(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10018BCD8(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E99A0(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10018BD54(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E9B60(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10018BDD0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E9C40(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10018BE4C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E9D20(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_10018BEB0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E9E38(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10018BF2C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E9F00(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_10018BF90(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000EA014(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10018C00C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000EA0DC(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t sub_10018C070(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = sub_1000EA1F0(*(_DWORD *)(result + 12), *(double *)(result + 32));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t sub_10018C0D4(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  Class result = sub_1000EA304(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(unsigned int *)(result + 56), (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_10018C18C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 68)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  Class result = sub_1000EA42C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(void *)(result + 56), *(unsigned int *)(result + 64), (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

_DWORD *sub_10018C248(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000EA584(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10018C2C4(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000EA64C(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_10018C340(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 3 || *(_DWORD *)(result + 4) != 96)
  {
    int v7 = -304;
LABEL_13:
    *(_DWORD *)(a2 + 32) = v7;
    NDR_record_t v6 = NDR_record;
    goto LABEL_14;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || *(unsigned char *)(result + 71) != 1
    || (CFIndex v3 = *(unsigned int *)(result + 40), v3 != *(_DWORD *)(result + 84))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 88))
    || (unsigned int v5 = *(_DWORD *)(result + 72), v5 != *(_DWORD *)(result + 92)))
  {
    int v7 = -300;
    goto LABEL_13;
  }
  Class result = sub_1000EA714(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, *(UInt8 **)(result + 60), v5, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v6 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_14:
  *(NDR_record_t *)(a2 + 24) = v6;
  return result;
}

_DWORD *sub_10018C434(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = (_DWORD *)sub_1000EA944(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10018C4DC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000EAA2C(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10018C558(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000E9A80(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10018C5D4(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000EAAF0(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_10018C638(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000EAC00(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_10018C6B4(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    int v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = sub_1000EACC4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10018C798(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000EAE00(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018C82C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000EAF04(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018C8C0(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000EB000(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018C954(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v3 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 68)
    || *(_DWORD *)(result + 56) != *(_DWORD *)(result + 72))
  {
    int v3 = -300;
    goto LABEL_11;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = sub_1000EB280(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), *(UInt8 **)(result + 44), *(_DWORD *)(result + 56), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_12:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10018CA5C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 80)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 76)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  Class result = sub_1000EB0FC(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(_DWORD *)(result + 72), *(UInt8 **)(result + 44), v4, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10018CB34(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000EB820(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018CBC8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 2 && *(_DWORD *)(result + 4) == 76)
  {
    if (*(unsigned char *)(result + 39) == 1 && *(unsigned char *)(result + 55) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 68))
      {
        CFIndex v4 = *(unsigned int *)(result + 56);
        if (v4 == *(_DWORD *)(result + 72))
        {
          Class result = sub_1000EB638(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4);
          *(_DWORD *)(a2 + 32) = result;
          return result;
        }
      }
    }
    int v5 = -300;
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10018CC7C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  Class result = (_DWORD *)sub_1000DF90C(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10018CD24(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  Class result = sub_1000DF9F0(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_10018CDD8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      CFIndex v3 = *(unsigned int *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000EB91C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018CE6C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (CFIndex v3 = *(unsigned int *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  Class result = sub_1000EBA6C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_10018CF20(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v4 = -304;
LABEL_8:
    *(_DWORD *)(a2 + 32) = v4;
    goto LABEL_9;
  }
  if (*(unsigned char *)(result + 39) != 1 || (CFIndex v3 = *(unsigned int *)(result + 40), v3 != *(_DWORD *)(result + 56)))
  {
    int v4 = -300;
    goto LABEL_8;
  }
  Class result = sub_1000EBBC4(*(_DWORD *)(result + 12), *(unsigned int *)(result + 52), *(UInt8 **)(result + 28), v3);
  *(_DWORD *)(a2 + 32) = result;
LABEL_9:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018CFB8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000EBD14(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10018D04C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000EBE10(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10018D0C8(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000EBED4(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10018D144(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000EBF98(result[3]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_10018D1A0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000EC0A8(result[3]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_10018D1FC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000EC16C(result[3]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t sub_10018D258(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  Class result = sub_1000EC248(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (unsigned int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

_DWORD *sub_10018D30C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    Class result = (_DWORD *)sub_1000EC34C(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018D370(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000EC470(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10018D404(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777472;
  Class result = (_DWORD *)sub_1000EC568(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10018D4A8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v4 = -304;
LABEL_8:
    *(_DWORD *)(a2 + 32) = v4;
    goto LABEL_9;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v4 = -300;
    goto LABEL_8;
  }
  Class result = sub_1000EC6A4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
  *(_DWORD *)(a2 + 32) = result;
LABEL_9:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10018D53C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000EC788(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_10018D5A0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    Class result = (_DWORD *)sub_1000EC8BC(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_10018D61C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(unsigned char *)(result + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        Class result = sub_1000EC97C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10018D6B0(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  int v4 = a1[5];
  if ((v4 - 69846) >= 0xFFFFFF64
    && (int v5 = (void (*)(void))*(&off_100243780 + 5 * (v4 - 69690) + 5)) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t sub_10018D748(int a1, vm_address_t a2, int a3, int a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, mach_msg_timeout_t a10)
{
  vm_address_t v16 = a2;
  int v17 = 27918592;
  v18[0] = a3;
  *(void *)&v18[1] = a6;
  v18[3] = 27918592;
  v19[0] = a7;
  *(void *)&v19[1] = a8;
  v19[3] = 27918592;
  v20[0] = a9;
  *(NDR_record_t *)&v20[1] = NDR_record;
  v20[3] = a3;
  void v20[4] = a4;
  v20[5] = a5;
  v20[6] = a7;
  v20[7] = a9;
  *(void *)msg = 0xAAAAAAAA80000013;
  *(_DWORD *)&msg[8] = a1;
  *(_OWORD *)&msg[12] = xmmword_1001CBA50;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  }
  uint64_t v13 = mach_msg((mach_msg_header_t *)msg, 2097169, 0x68u, 0, 0, a10, 0);
  if (v13 == 268435460)
  {
    if (v16 != a2) {
      mig_deallocate(v16, v18[0]);
    }
    if (*(void *)&v18[1] != a6) {
      mig_deallocate(*(vm_address_t *)&v18[1], v19[0]);
    }
    if (*(void *)&v19[1] != a8) {
      mig_deallocate(*(vm_address_t *)&v19[1], v20[0]);
    }
  }
  return v13;
}

uint64_t sub_10018D868(int a1, vm_address_t a2, int a3, uint64_t a4, int a5, int a6, mach_msg_timeout_t timeout)
{
  vm_address_t v15 = a2;
  int v16 = 27918592;
  v17[0] = a3;
  *(void *)&v17[1] = a4;
  v17[3] = 27918592;
  v18[0] = a5;
  *(NDR_record_t *)&v18[1] = NDR_record;
  v18[3] = a3;
  _DWORD v18[4] = a5;
  v18[5] = a6;
  unint64_t v12 = 0xAAAAAAAA80000013;
  int v13 = a1;
  long long v14 = xmmword_1001CBA60;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set((mach_msg_header_t *)&v12);
  }
  uint64_t v10 = mach_msg((mach_msg_header_t *)&v12, 2097169, 0x50u, 0, 0, timeout, 0);
  if (v10 == 268435460)
  {
    if (v15 != a2) {
      mig_deallocate(v15, v17[0]);
    }
    if (*(void *)&v17[1] != a4) {
      mig_deallocate(*(vm_address_t *)&v17[1], v18[0]);
    }
  }
  return v10;
}

uint64_t sub_10018D964(int a1, vm_address_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, mach_msg_timeout_t timeout)
{
  vm_address_t v15 = a2;
  int v16 = 27918592;
  v17[0] = a3;
  *(void *)&v17[1] = a4;
  v17[3] = 27918592;
  v18[0] = a5;
  *(void *)&v18[1] = a6;
  v18[3] = 27918592;
  v19[0] = a7;
  *(NDR_record_t *)&v19[1] = NDR_record;
  v19[3] = a3;
  _DWORD v19[4] = a5;
  v19[5] = a7;
  v19[6] = a8;
  *(void *)msg = 0xAAAAAAAA80000013;
  *(_DWORD *)&msg[8] = a1;
  *(_OWORD *)&msg[12] = xmmword_1001CBA70;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  }
  uint64_t v12 = mach_msg((mach_msg_header_t *)msg, 2097169, 0x64u, 0, 0, timeout, 0);
  if (v12 == 268435460)
  {
    if (v15 != a2) {
      mig_deallocate(v15, v17[0]);
    }
    if (*(void *)&v17[1] != a4) {
      mig_deallocate(*(vm_address_t *)&v17[1], v18[0]);
    }
    if (*(void *)&v18[1] != a6) {
      mig_deallocate(*(vm_address_t *)&v18[1], v19[0]);
    }
  }
  return v12;
}

uint64_t sub_10018DA80(int a1, vm_address_t a2, int a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, mach_msg_timeout_t timeout)
{
  vm_address_t v15 = a2;
  int v16 = 27918592;
  v17[0] = a3;
  *(void *)&v17[1] = a5;
  v17[3] = 27918592;
  v18[0] = a6;
  *(void *)&v18[1] = a7;
  v18[3] = 27918592;
  v19[0] = a8;
  *(NDR_record_t *)&v19[1] = NDR_record;
  v19[3] = a3;
  _DWORD v19[4] = a4;
  v19[5] = a6;
  v19[6] = a8;
  *(void *)msg = 0xAAAAAAAA80000013;
  *(_DWORD *)&msg[8] = a1;
  *(_OWORD *)&msg[12] = xmmword_1001CBA80;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  }
  uint64_t v12 = mach_msg((mach_msg_header_t *)msg, 2097169, 0x64u, 0, 0, timeout, 0);
  if (v12 == 268435460)
  {
    if (v15 != a2) {
      mig_deallocate(v15, v17[0]);
    }
    if (*(void *)&v17[1] != a5) {
      mig_deallocate(*(vm_address_t *)&v17[1], v18[0]);
    }
    if (*(void *)&v18[1] != a7) {
      mig_deallocate(*(vm_address_t *)&v18[1], v19[0]);
    }
  }
  return v12;
}

uint64_t sub_10018DB9C(int a1, vm_address_t a2, int a3, int a4, uint64_t a5, int a6, mach_msg_timeout_t timeout)
{
  vm_address_t v15 = a2;
  int v16 = 27918592;
  v17[0] = a3;
  *(void *)&v17[1] = a5;
  v17[3] = 27918592;
  v18[0] = a6;
  *(NDR_record_t *)&v18[1] = NDR_record;
  v18[3] = a3;
  _DWORD v18[4] = a4;
  v18[5] = a6;
  unint64_t v12 = 0xAAAAAAAA80000013;
  int v13 = a1;
  long long v14 = xmmword_1001CBA90;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set((mach_msg_header_t *)&v12);
  }
  uint64_t v10 = mach_msg((mach_msg_header_t *)&v12, 2097169, 0x50u, 0, 0, timeout, 0);
  if (v10 == 268435460)
  {
    if (v15 != a2) {
      mig_deallocate(v15, v17[0]);
    }
    if (*(void *)&v17[1] != a5) {
      mig_deallocate(*(vm_address_t *)&v17[1], v18[0]);
    }
  }
  return v10;
}

uint64_t sub_10018DC98(mach_port_t a1, int a2, mach_msg_timeout_t timeout)
{
  NDR_record_t v6 = NDR_record;
  int v7 = a2;
  *(void *)&msg.msgh_bits = 0xAAAAAAAA00000013;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 96966;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set(&msg);
  }
  return mach_msg(&msg, 2097169, 0x24u, 0, 0, timeout, 0);
}

uint64_t sub_10018DD28(int a1, vm_address_t a2, int a3, uint64_t a4, int a5, int a6, mach_msg_timeout_t timeout)
{
  vm_address_t v15 = a2;
  int v16 = 27918592;
  v17[0] = a3;
  *(void *)&v17[1] = a4;
  v17[3] = 27918592;
  v18[0] = a5;
  *(NDR_record_t *)&v18[1] = NDR_record;
  v18[3] = a3;
  _DWORD v18[4] = a5;
  v18[5] = a6;
  unint64_t v12 = 0xAAAAAAAA80000013;
  int v13 = a1;
  long long v14 = xmmword_1001CBAB0;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set((mach_msg_header_t *)&v12);
  }
  uint64_t v10 = mach_msg((mach_msg_header_t *)&v12, 2097169, 0x50u, 0, 0, timeout, 0);
  if (v10 == 268435460)
  {
    if (v15 != a2) {
      mig_deallocate(v15, v17[0]);
    }
    if (*(void *)&v17[1] != a4) {
      mig_deallocate(*(vm_address_t *)&v17[1], v18[0]);
    }
  }
  return v10;
}

uint64_t sub_10018DE24(int a1, vm_address_t a2, int a3, uint64_t a4, int a5, int a6, mach_msg_timeout_t timeout)
{
  vm_address_t v15 = a2;
  int v16 = 27918592;
  v17[0] = a3;
  *(void *)&v17[1] = a4;
  v17[3] = 27918592;
  v18[0] = a5;
  *(NDR_record_t *)&v18[1] = NDR_record;
  v18[3] = a3;
  _DWORD v18[4] = a5;
  v18[5] = a6;
  unint64_t v12 = 0xAAAAAAAA80000013;
  int v13 = a1;
  long long v14 = xmmword_1001CBAC0;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set((mach_msg_header_t *)&v12);
  }
  uint64_t v10 = mach_msg((mach_msg_header_t *)&v12, 2097169, 0x50u, 0, 0, timeout, 0);
  if (v10 == 268435460)
  {
    if (v15 != a2) {
      mig_deallocate(v15, v17[0]);
    }
    if (*(void *)&v17[1] != a4) {
      mig_deallocate(*(vm_address_t *)&v17[1], v18[0]);
    }
  }
  return v10;
}

uint64_t sub_10018DF20(int a1, vm_address_t a2, int a3, int a4, mach_msg_timeout_t timeout)
{
  vm_address_t v12 = a2;
  int v13 = 27918592;
  v14[0] = a3;
  *(NDR_record_t *)&v14[1] = NDR_record;
  v14[3] = a3;
  v14[4] = a4;
  unint64_t v9 = 0xAAAAAAAA80000013;
  int v10 = a1;
  long long v11 = xmmword_1001CBAD0;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set((mach_msg_header_t *)&v9);
  }
  uint64_t v7 = mach_msg((mach_msg_header_t *)&v9, 2097169, 0x3Cu, 0, 0, timeout, 0);
  if (v7 == 268435460 && v12 != a2) {
    mig_deallocate(v12, v14[0]);
  }
  return v7;
}

uint64_t sub_10018DFF0(int a1, int a2, vm_address_t a3, int a4, mach_msg_timeout_t timeout)
{
  vm_address_t v12 = a3;
  int v13 = 27918592;
  v14[0] = a4;
  *(NDR_record_t *)&v14[1] = NDR_record;
  v14[3] = a2;
  v14[4] = a4;
  unint64_t v9 = 0xAAAAAAAA80000013;
  int v10 = a1;
  long long v11 = xmmword_1001CBAE0;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set((mach_msg_header_t *)&v9);
  }
  uint64_t v7 = mach_msg((mach_msg_header_t *)&v9, 2097169, 0x3Cu, 0, 0, timeout, 0);
  if (v7 == 268435460 && v12 != a3) {
    mig_deallocate(v12, v14[0]);
  }
  return v7;
}

uint64_t sub_10018E0C0(int a1, vm_address_t a2, int a3, mach_msg_timeout_t timeout)
{
  vm_address_t v9 = a2;
  int v10 = 27918592;
  v11[0] = a3;
  *(NDR_record_t *)&v11[1] = NDR_record;
  v11[3] = a3;
  *(void *)mach_msg_header_t msg = 0xAAAAAAAA80000013;
  *(_DWORD *)&msg[8] = a1;
  *(_OWORD *)&msg[12] = xmmword_1001CBAF0;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  }
  uint64_t v6 = mach_msg((mach_msg_header_t *)msg, 2097169, 0x38u, 0, 0, timeout, 0);
  if (v6 == 268435460 && v9 != a2) {
    mig_deallocate(v9, v11[0]);
  }
  return v6;
}

uint64_t sub_10018E190(mach_port_t a1, int a2, mach_msg_timeout_t timeout)
{
  NDR_record_t v6 = NDR_record;
  int v7 = a2;
  *(void *)&msg.msgh_bits = 0xAAAAAAAA00000013;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 96972;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set(&msg);
  }
  return mach_msg(&msg, 2097169, 0x24u, 0, 0, timeout, 0);
}

uint64_t sub_10018E220(int a1, vm_address_t a2, int a3, mach_msg_timeout_t timeout)
{
  vm_address_t v9 = a2;
  int v10 = 27918592;
  v11[0] = a3;
  *(NDR_record_t *)&v11[1] = NDR_record;
  v11[3] = a3;
  *(void *)mach_msg_header_t msg = 0xAAAAAAAA80000013;
  *(_DWORD *)&msg[8] = a1;
  *(_OWORD *)&msg[12] = xmmword_1001CBB00;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  }
  uint64_t v6 = mach_msg((mach_msg_header_t *)msg, 2097169, 0x38u, 0, 0, timeout, 0);
  if (v6 == 268435460 && v9 != a2) {
    mig_deallocate(v9, v11[0]);
  }
  return v6;
}

uint64_t netrbInitIfnetTrafficDescriptor(void *a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_3;
  }
  if (xpc_get_type(a1) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_3;
  }
  xpc_object_t value = xpc_dictionary_get_value(a1, netrbClientLowLatencyFlowParam);
  if (!value) {
    goto LABEL_3;
  }
  uint64_t v6 = value;
  if (xpc_get_type(value) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_3;
  }
  long long v30 = 0uLL;
  long long v29 = 0uLL;
  xpc_object_t v7 = xpc_dictionary_get_value(v6, netrbClientIfnetTrafficDescriptorIpVersion);
  if (v7 && (int v8 = v7, xpc_get_type(v7) == (xpc_type_t)&_xpc_type_uint64))
  {
    unsigned __int8 v16 = xpc_uint64_get_value(v8);
    int v17 = v16;
    if (v16 != 4 && v16 != 96) {
      goto LABEL_3;
    }
    if (a2)
    {
      *(unsigned char *)(a2 + 8) |= 1u;
      *(unsigned char *)(a2 + 9) = v16;
    }
    xpc_object_t v18 = xpc_dictionary_get_value(v6, netrbClientIfnetTrafficDescriptorLocalIp);
    if (v18 && (id v19 = v18, xpc_get_type(v18) == (xpc_type_t)&_xpc_type_string))
    {
      string_ptr = xpc_string_get_string_ptr(v19);
      if (a2) {
        *(unsigned char *)(a2 + 8) |= 4u;
      }
    }
    else
    {
      NETRBInfoLog();
      string_ptr = 0;
    }
    xpc_object_t v21 = xpc_dictionary_get_value(v6, netrbClientIfnetTrafficDescriptorRemoteIp);
    if (v21 && (id v22 = v21, xpc_get_type(v21) == (xpc_type_t)&_xpc_type_string))
    {
      BOOL v23 = xpc_string_get_string_ptr(v22);
      if (a2) {
        *(unsigned char *)(a2 + 8) |= 8u;
      }
    }
    else
    {
      NETRBInfoLog();
      BOOL v23 = 0;
    }
    if (v17 == 4)
    {
      if (string_ptr && inet_pton(2, string_ptr, (char *)&v30 + 12) != 1
        || v23 && inet_pton(2, v23, (char *)&v29 + 12) != 1)
      {
        goto LABEL_3;
      }
      if (a2)
      {
        *(_DWORD *)(a2 + 24) = HIDWORD(v30);
        *(_DWORD *)(a2 + 40) = HIDWORD(v29);
      }
    }
    else
    {
      if (string_ptr && inet_pton(30, string_ptr, &v30) != 1 || v23 && inet_pton(30, v23, &v29) != 1) {
        goto LABEL_3;
      }
      if (a2)
      {
        *(_OWORD *)(a2 + 12) = v30;
        *(_OWORD *)(a2 + 28) = v29;
      }
    }
  }
  else
  {
    NETRBErrorLog();
  }
  xpc_object_t v9 = xpc_dictionary_get_value(v6, netrbClientIfnetTrafficDescriptorIpProtocol);
  if (v9 && (int v10 = v9, xpc_get_type(v9) == (xpc_type_t)&_xpc_type_uint64))
  {
    char v24 = xpc_uint64_get_value(v10);
    if (v24 != 17 && v24 != 6) {
      goto LABEL_3;
    }
    if (a2)
    {
      *(unsigned char *)(a2 + 8) |= 2u;
      *(unsigned char *)(a2 + 10) = v24;
    }
  }
  else
  {
    NETRBInfoLog();
  }
  xpc_object_t v11 = xpc_dictionary_get_value(v6, netrbClientIfnetTrafficDescriptorLocalPort);
  if (v11)
  {
    vm_address_t v12 = v11;
    if (xpc_get_type(v11) != (xpc_type_t)&_xpc_type_uint64) {
      goto LABEL_3;
    }
    uint64_t v13 = xpc_uint64_get_value(v12);
    if (v13 - 0x10000 < 0xFFFFFFFFFFFF0001) {
      goto LABEL_3;
    }
    if (a2)
    {
      *(unsigned char *)(a2 + 8) |= 0x10u;
      *(_WORD *)(a2 + 44) = bswap32(v13) >> 16;
    }
  }
  else
  {
    NETRBInfoLog();
  }
  xpc_object_t v14 = xpc_dictionary_get_value(v6, netrbClientIfnetTrafficDescriptorRemotePort);
  if (v14)
  {
    vm_address_t v15 = v14;
    if (xpc_get_type(v14) != (xpc_type_t)&_xpc_type_uint64) {
      goto LABEL_3;
    }
    uint64_t v28 = xpc_uint64_get_value(v15);
    if (v28 - 0x10000 < 0xFFFFFFFFFFFF0001) {
      goto LABEL_3;
    }
    if (a2)
    {
      *(unsigned char *)(a2 + 8) |= 0x20u;
      *(_WORD *)(a2 + 46) = bswap32(v28) >> 16;
    }
  }
  else
  {
    NETRBErrorLog();
  }
  xpc_object_t v26 = xpc_dictionary_get_value(v6, netrbClientIfnetTrafficDescriptorConnectionIdleTimeout);
  if (v26)
  {
    id v27 = v26;
    if (xpc_get_type(v26) != (xpc_type_t)&_xpc_type_uint64 || xpc_uint64_get_value(v27) >= 0x69781)
    {
LABEL_3:
      NETRBErrorLog();
      return 0;
    }
  }
  return 1;
}

void *_NETRBClientCreateInternal(NSObject *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = 0;
  xpc_object_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  char v20 = 0;
  uint64_t v13 = 0;
  xpc_object_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  uint64_t v16 = 2000;
  xpc_object_t v7 = 0;
  if (!NETRBLogCreate())
  {
    if (qword_10027DCF0 != -1) {
      dispatch_once(&qword_10027DCF0, &stru_100245690);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    xpc_object_t v7 = (void *)Instance;
    if (Instance)
    {
      bzero((void *)(Instance + 16), 0x218uLL);
      if (a1)
      {
        void v7[2] = a1;
        dispatch_retain(a1);
        if (a2) {
          v7[3] = _Block_copy(a2);
        }
      }
      if (qword_10027DD00 != -1) {
        dispatch_once(&qword_10027DD00, &stru_100245730);
      }
      int v10 = qword_10027DD08;
      if (!qword_10027DD08) {
        goto LABEL_19;
      }
      if (qword_10027DD10 != -1) {
        dispatch_once(&qword_10027DD10, &stru_100245770);
      }
      if (qword_10027DD18)
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 0x40000000;
        block[2] = sub_10018E9D4;
        block[3] = &unk_100245030;
        void block[6] = v7;
        void block[7] = qword_10027DD18;
        void block[4] = &v17;
        void block[5] = &v13;
        void block[8] = v10;
        void block[9] = a4;
        dispatch_sync(v10, block);
        if (*((unsigned char *)v18 + 24) && (v14[3] | 2) == 0x7D2) {
          *((unsigned char *)v18 + 24) = 0;
        }
      }
      else
      {
LABEL_19:
        NETRBErrorLog();
      }
      if (!*((unsigned char *)v18 + 24))
      {
        CFRelease(v7);
        xpc_object_t v7 = 0;
      }
    }
    else
    {
      xpc_object_t v11 = __error();
      strerror(*v11);
      NETRBErrorLog();
    }
  }
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v7;
}

void sub_10018E9D4(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 48);
  int v3 = (__CFArray *)qword_10027DCE8;
  if (!qword_10027DCE8)
  {
    xpc_object_t v7 = *(NSObject **)(a1 + 56);
    uint64_t v6 = *(NSObject **)(a1 + 64);
    qword_10027DCE8 = (uint64_t)CFArrayCreateMutable(kCFAllocatorDefault, 0, 0);
    if (!qword_10027DCE8)
    {
      int v8 = __error();
      strerror(*v8);
      goto LABEL_12;
    }
    if (NETRBXPCCreate(v7, (uint64_t)v6))
    {
      if (NETRBXPCEndPointCreate(v6))
      {
        int v3 = (__CFArray *)qword_10027DCE8;
        goto LABEL_2;
      }
      NETRBErrorLog();
      NETRBXPCCleanup();
    }
    else
    {
      NETRBErrorLog();
    }
    CFRelease((CFTypeRef)qword_10027DCE8);
    qword_10027DCE8 = 0;
    goto LABEL_16;
  }
LABEL_2:
  CFArrayAppendValue(v3, v2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (!v4)
  {
    sub_10018EBBC(*(const void **)(a1 + 48));
LABEL_12:
    NETRBErrorLog();
LABEL_16:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    return;
  }
  int v5 = v4;
  xpc_dictionary_set_uint64(v4, off_10027D3D8, 0x3E8uLL);
  NETRBInfoLog();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  v9[2] = sub_10018EC58;
  v9[3] = &unk_100245008;
  long long v10 = *(_OWORD *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 72);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v5, (uint64_t)v9);
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_10018EBBC(*(const void **)(a1 + 48));
  }
  xpc_release(v5);
}

void sub_10018EBBC(const void *a1)
{
  if (qword_10027DCE8 && CFArrayGetCount((CFArrayRef)qword_10027DCE8) >= 1)
  {
    CFIndex v2 = 0;
    while (CFArrayGetValueAtIndex((CFArrayRef)qword_10027DCE8, v2) != a1)
    {
      if (++v2 >= CFArrayGetCount((CFArrayRef)qword_10027DCE8)) {
        return;
      }
    }
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10027DCE8, v2);
    if (!CFArrayGetCount((CFArrayRef)qword_10027DCE8))
    {
      NETRBXPCCleanup();
      NETRBEndPointCleanup();
      CFRelease((CFTypeRef)qword_10027DCE8);
      qword_10027DCE8 = 0;
    }
  }
}

void sub_10018EC58(uint64_t a1, void *a2)
{
  NETRBInfoLog();
  if (!a2) {
    goto LABEL_6;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = xpc_dictionary_get_uint64(a2, off_10027D438);
  if (*(void *)(a1 + 48)) {
    **(_DWORD **)(a1 + 48) = xpc_dictionary_get_uint64(a2, off_10027D428);
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) != 2001
    || (xpc_object_t v4 = (char *)(*(void *)(a1 + 40) + 32),
        string = xpc_dictionary_get_string(a2, off_10027D3E0),
        snprintf(v4, 0x100uLL, "%s", string),
        *(unsigned char *)(*(void *)(a1 + 40) + 288) = 1,
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) != 2001))
  {
LABEL_6:
    uint64_t v6 = *(const void **)(a1 + 40);
    sub_10018EBBC(v6);
  }
}

void *_NETRBClientCreate(NSObject *a1, const void *a2, uint64_t a3)
{
  return _NETRBClientCreateInternal(a1, a2, a3, 0);
}

uint64_t _NETRBClientDestroy(uint64_t a1)
{
  uint64_t v9 = 0;
  long long v10 = &v9;
  uint64_t v11 = 0x2000000000;
  char v12 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 2000;
  if (!a1) {
    goto LABEL_7;
  }
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  if (qword_10027DD08)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_10018EEC8;
    block[3] = &unk_100245080;
    void block[4] = &v9;
    void block[5] = &v5;
    void block[6] = a1;
    dispatch_sync((dispatch_queue_t)qword_10027DD08, block);
    if (*((unsigned char *)v10 + 24)) {
      *((unsigned char *)v10 + 24) = v6[3] == 2001;
    }
  }
  else
  {
LABEL_7:
    NETRBErrorLog();
  }
  uint64_t v2 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(&v9, 8);
  return v2;
}

void sub_10018EEC8(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 48)))
  {
    NETRBErrorLog();
LABEL_3:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    return;
  }
  *(unsigned char *)(*(void *)(a1 + 48) + 288) = 0;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (!v2)
  {
    NETRBErrorLog();
    sub_10018EBBC(*(const void **)(a1 + 48));
    CFRelease(*(CFTypeRef *)(a1 + 48));
    goto LABEL_3;
  }
  int v3 = v2;
  xpc_dictionary_set_uint64(v2, off_10027D3D8, 0x3F4uLL);
  xpc_dictionary_set_string(v3, off_10027D3E0, (const char *)(*(void *)(a1 + 48) + 32));
  NETRBInfoLog();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_10018F0FC;
  v4[3] = &unk_100245058;
  long long v5 = *(_OWORD *)(a1 + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v3, (uint64_t)v4);
  xpc_release(v3);
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    sub_10018EBBC(*(const void **)(a1 + 48));
    CFRelease(*(CFTypeRef *)(a1 + 48));
  }
}

uint64_t sub_10018F030(unsigned char *a1)
{
  if (!a1) {
    goto LABEL_9;
  }
  if (!a1[288]) {
    return 22;
  }
  if (!qword_10027DCE8 || (CFIndex Count = CFArrayGetCount((CFArrayRef)qword_10027DCE8)) == 0 || (v3 = Count, Count < 1))
  {
LABEL_9:
    NETRBNoticeLog();
    return 22;
  }
  CFIndex v4 = 0;
  while (CFArrayGetValueAtIndex((CFArrayRef)qword_10027DCE8, v4) != a1)
  {
    if (v3 == ++v4) {
      goto LABEL_9;
    }
  }
  return 0;
}

void sub_10018F0FC(uint64_t a1, void *a2)
{
  NETRBInfoLog();
  if (a2) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = xpc_dictionary_get_uint64(a2, off_10027D438);
  }
  sub_10018EBBC(*(const void **)(a1 + 40));
  CFIndex v4 = *(const void **)(a1 + 40);

  CFRelease(v4);
}

uint64_t _NETRBClientStartService(uint64_t a1, char *__s1, int a3, int a4, void *a5)
{
  uint64_t v63 = 0;
  id v64 = &v63;
  uint64_t v65 = 0x2000000000;
  char v66 = 0;
  if (!a1
    || (a3 - 205) <= 0xFFFFFFFA
    || (a4 - 304) <= 0xFFFFFFFB
    || __s1 && *__s1 && strncmp(__s1, netrbClientAnyExternal, 0x10uLL) && !if_nametoindex(__s1)
    || (xpc_object_t v10 = xpc_dictionary_create(0, 0, 0)) == 0)
  {
    NETRBErrorLog();
    goto LABEL_22;
  }
  uint64_t v11 = v10;
  if (!a5) {
    goto LABEL_18;
  }
  if (xpc_get_type(a5) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_18;
  }
  xpc_object_t value = xpc_dictionary_get_value(a5, netrbClientDeviceType);
  if (!value) {
    goto LABEL_18;
  }
  uint64_t v13 = value;
  if (xpc_get_type(value) != (xpc_type_t)&_xpc_type_uint64) {
    goto LABEL_18;
  }
  uint64_t v14 = xpc_uint64_get_value(v13);
  if (v14 >= 7) {
    goto LABEL_18;
  }
  uint64_t v18 = v14;
  xpc_dictionary_set_uint64(v11, off_10027D4B0, v14);
  if (v18 != 1)
  {
    xpc_object_t v21 = xpc_dictionary_get_value(a5, netrbClientInterfaceName);
    if (!v21) {
      goto LABEL_18;
    }
    id v22 = v21;
    if (xpc_get_type(v21) != (xpc_type_t)&_xpc_type_string) {
      goto LABEL_18;
    }
    string_ptr = xpc_string_get_string_ptr(v22);
    if (!if_nametoindex(string_ptr)) {
      goto LABEL_18;
    }
    uint64_t v28 = off_10027D4A8;
    long long v29 = xpc_string_get_string_ptr(v22);
    xpc_dictionary_set_string(v11, v28, v29);
  }
  xpc_object_t v19 = xpc_dictionary_get_value(a5, netrbClientInterfaceMTU);
  if (v19)
  {
    char v20 = v19;
    if (xpc_get_type(v19) != (xpc_type_t)&_xpc_type_uint64) {
      goto LABEL_18;
    }
    BOOL v23 = off_10027D4C0;
    uint64_t v24 = xpc_uint64_get_value(v20);
    xpc_dictionary_set_uint64(v11, v23, v24);
  }
  xpc_object_t v25 = xpc_dictionary_get_value(a5, netrbClientInterfaceInstance);
  if (v25)
  {
    xpc_object_t v26 = v25;
    if (xpc_get_type(v25) != (xpc_type_t)&_xpc_type_uint64) {
      goto LABEL_18;
    }
    long long v30 = off_10027D4C8;
    uint64_t v31 = xpc_uint64_get_value(v26);
    xpc_dictionary_set_uint64(v11, v30, v31);
  }
  xpc_object_t v32 = xpc_dictionary_get_value(a5, netrbClientInterfaceStartAddress);
  if (v32)
  {
    id v33 = v32;
    if (xpc_get_type(v32) != (xpc_type_t)&_xpc_type_string) {
      goto LABEL_18;
    }
    id v34 = off_10027D4D0;
    long long v35 = xpc_string_get_string_ptr(v33);
    xpc_dictionary_set_string(v11, v34, v35);
  }
  xpc_object_t v36 = xpc_dictionary_get_value(a5, netrbClientInterfaceEndAddress);
  if (v36)
  {
    id v37 = v36;
    if (xpc_get_type(v36) != (xpc_type_t)&_xpc_type_string) {
      goto LABEL_18;
    }
    id v38 = off_10027D4D8;
    CFDictionaryRef v39 = xpc_string_get_string_ptr(v37);
    xpc_dictionary_set_string(v11, v38, v39);
  }
  xpc_object_t v40 = xpc_dictionary_get_value(a5, netrbClientInterfaceNetworkMask);
  if (!v40) {
    goto LABEL_46;
  }
  uint64_t v41 = v40;
  if (xpc_get_type(v40) != (xpc_type_t)&_xpc_type_string)
  {
LABEL_18:
    NETRBErrorLog();
LABEL_19:
    uint64_t v15 = v11;
LABEL_20:
    xpc_release(v15);
    goto LABEL_22;
  }
  CFDictionaryRef v42 = off_10027D4E0;
  uint64_t v43 = xpc_string_get_string_ptr(v41);
  xpc_dictionary_set_string(v11, v42, v43);
LABEL_46:
  xpc_object_t v44 = xpc_dictionary_get_value(a5, netrbClientNatType);
  if (!v44)
  {
    if (a3 != 201)
    {
      xpc_dictionary_set_uint64(v11, off_10027D4F8, 0x1F5uLL);
LABEL_56:
      CFDictionaryRef v48 = 0;
      goto LABEL_57;
    }
    xpc_dictionary_set_uint64(v11, off_10027D4F8, 0x1F4uLL);
LABEL_51:
    if (!sub_10018F828(a5, v11)) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }
  CFIndex v45 = v44;
  if (xpc_get_type(v44) != (xpc_type_t)&_xpc_type_uint64) {
    goto LABEL_18;
  }
  unsigned int v46 = xpc_uint64_get_value(v45);
  unsigned int v47 = v46;
  if (v46 - 503 <= 0xFFFFFFFC) {
    goto LABEL_18;
  }
  xpc_dictionary_set_uint64(v11, off_10027D4F8, v46);
  if (v47 == 500) {
    goto LABEL_51;
  }
  if (v47 != 502) {
    goto LABEL_56;
  }
  xpc_object_t v49 = xpc_dictionary_get_value(a5, netrbClientNat64Param);
  if (!v49) {
    goto LABEL_56;
  }
  CFDictionaryRef v50 = v49;
  if (xpc_get_type(v49) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_18;
  }
  xpc_object_t v51 = xpc_dictionary_create(0, 0, 0);
  if (!v51) {
    goto LABEL_18;
  }
  CFDictionaryRef v48 = v51;
  xpc_object_t v52 = xpc_dictionary_get_value(v50, netrbClientDns64Prefix);
  if (v52)
  {
    uint64_t v53 = v52;
    if (xpc_get_type(v52) != (xpc_type_t)&_xpc_type_string) {
      goto LABEL_76;
    }
    BOOL v54 = off_10027D510;
    CFStringRef v55 = xpc_string_get_string_ptr(v53);
    xpc_dictionary_set_string(v48, v54, v55);
  }
  xpc_object_t v56 = xpc_dictionary_get_value(v50, netrbClientRaPrefix);
  if (v56)
  {
    NSFileAttributeKey v57 = v56;
    if (xpc_get_type(v56) != (xpc_type_t)&_xpc_type_string)
    {
LABEL_76:
      NETRBErrorLog();
      xpc_release(v11);
LABEL_63:
      uint64_t v15 = v48;
      goto LABEL_20;
    }
    CFNumberRef v58 = off_10027D518;
    CFArrayRef v59 = xpc_string_get_string_ptr(v57);
    xpc_dictionary_set_string(v48, v58, v59);
  }
  xpc_dictionary_set_value(v11, off_10027D500, v48);
LABEL_57:
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  if (qword_10027DD08)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_10018F8F4;
    block[3] = &unk_1002450C8;
    void block[4] = &v63;
    void block[5] = a1;
    int v61 = a3;
    int v62 = a4;
    void block[6] = v11;
    void block[7] = __s1;
    void block[8] = qword_10027DD08;
    dispatch_sync((dispatch_queue_t)qword_10027DD08, block);
  }
  else
  {
    NETRBErrorLog();
  }
  xpc_release(v11);
  if (v48) {
    goto LABEL_63;
  }
LABEL_22:
  uint64_t v16 = *((unsigned __int8 *)v64 + 24);
  _Block_object_dispose(&v63, 8);
  return v16;
}

uint64_t sub_10018F828(void *a1, void *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, netrbClientNat66Param);
  if (value)
  {
    CFIndex v4 = value;
    if (xpc_get_type(value) != (xpc_type_t)&_xpc_type_dictionary
      || (string = xpc_dictionary_get_string(v4, netrbClientRaPrefix)) == 0)
    {
      NETRBErrorLog();
      return 0;
    }
    uint64_t v7 = string;
    xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v8, off_10027D518, v7);
    xpc_dictionary_set_value(a2, off_10027D508, v8);
  }
  return 1;
}

double sub_10018F8F4(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 40))
    || *(unsigned char *)(*(void *)(a1 + 40) + 289)
    || (xpc_object_t v3 = xpc_dictionary_create(0, 0, 0)) == 0)
  {
    NETRBErrorLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    CFIndex v4 = v3;
    xpc_dictionary_set_uint64(v3, off_10027D3D8, 0x3E9uLL);
    xpc_dictionary_set_string(v4, off_10027D3E0, (const char *)(*(void *)(a1 + 40) + 32));
    xpc_dictionary_set_uint64(v4, off_10027D440, *(unsigned int *)(a1 + 72));
    xpc_dictionary_set_uint64(v4, off_10027D448, *(unsigned int *)(a1 + 76));
    xpc_dictionary_set_value(v4, off_10027D4A0, *(xpc_object_t *)(a1 + 48));
    long long v5 = *(const char **)(a1 + 56);
    if (v5 && *v5)
    {
      if (!strncmp(*(const char **)(a1 + 56), netrbClientAnyExternal, 0x10uLL))
      {
        uint64_t v7 = off_10027D4F0;
        uint64_t v6 = v4;
      }
      else
      {
        uint64_t v6 = v4;
        uint64_t v7 = v5;
      }
      xpc_dictionary_set_string(v6, off_10027D460, v7);
    }
    NETRBInfoLog();
    snprintf((char *)(*(void *)(a1 + 40) + 289), 0x100uLL, "%s-%p-%u", "com.apple.netrb", *(const void **)(a1 + 40), dword_10027DCE0);
    ++dword_10027DCE0;
    xpc_object_t v8 = *(NSObject **)(a1 + 64);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 0x40000000;
    long long v10[2] = sub_10018FB58;
    v10[3] = &unk_1002450A0;
    v10[4] = *(void *)(a1 + 40);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(v8, v4, (uint64_t)v10);
    xpc_release(v4);
    uint64_t v9 = *(void *)(a1 + 40);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      CFRetain((CFTypeRef)v9);
    }
    else
    {
      double result = 0.0;
      *(_OWORD *)(v9 + 513) = 0u;
      *(_OWORD *)(v9 + 529) = 0u;
      *(_OWORD *)(v9 + 481) = 0u;
      *(_OWORD *)(v9 + 497) = 0u;
      *(_OWORD *)(v9 + 449) = 0u;
      *(_OWORD *)(v9 + 465) = 0u;
      *(_OWORD *)(v9 + 417) = 0u;
      *(_OWORD *)(v9 + 433) = 0u;
      *(_OWORD *)(v9 + 385) = 0u;
      *(_OWORD *)(v9 + 401) = 0u;
      *(_OWORD *)(v9 + 353) = 0u;
      *(_OWORD *)(v9 + 369) = 0u;
      *(_OWORD *)(v9 + 321) = 0u;
      *(_OWORD *)(v9 + 337) = 0u;
      *(_OWORD *)(v9 + 289) = 0u;
      *(_OWORD *)(v9 + 305) = 0u;
    }
  }
  return result;
}

void sub_10018FB58(uint64_t a1, void *a2)
{
}

void sub_10018FB6C(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  NETRBInfoLog();
  if (sub_10018F030((unsigned char *)a1) || !*(void *)(a1 + 16) || !*(void *)(a1 + 24)) {
    goto LABEL_6;
  }
  if (!a3)
  {
    xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
    if (v8) {
      goto LABEL_14;
    }
    goto LABEL_17;
  }
  if (xpc_dictionary_get_uint64(a3, off_10027D438) != 2003)
  {
    xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
    if (v9)
    {
      xpc_object_t v8 = v9;
      if (xpc_dictionary_get_uint64(a3, off_10027D438) != 2002)
      {
        uint64_t uint64 = xpc_dictionary_get_uint64(a3, off_10027D438);
        if (uint64 == 2001) {
          uint64_t v15 = 5002;
        }
        else {
          uint64_t v15 = 5003;
        }
        xpc_dictionary_set_uint64(v8, netrbClientNotificationKey, v15);
        if (a2 != 1014 || uint64 != 2000)
        {
          if (a2 == 1014 && uint64 == 2001) {
            sub_100194268(v8, a3);
          }
          goto LABEL_16;
        }
        uint64_t v16 = xpc_dictionary_get_uint64(a3, off_10027D428);
        if (!v16)
        {
LABEL_16:
          uint64_t v13 = *(NSObject **)(a1 + 16);
          block[0] = _NSConcreteStackBlock;
          block[1] = 0x40000000;
          block[2] = sub_100194450;
          block[3] = &unk_1002457B8;
          int v18 = a2;
          void block[4] = a1;
          void block[5] = a4;
          void block[6] = v8;
          dispatch_async(v13, block);
          return;
        }
        uint64_t v12 = v16;
        xpc_object_t v10 = netrbClientErrorCode;
        uint64_t v11 = v8;
LABEL_15:
        xpc_dictionary_set_uint64(v11, v10, v12);
        goto LABEL_16;
      }
LABEL_14:
      xpc_object_t v10 = netrbClientNotificationKey;
      uint64_t v11 = v8;
      uint64_t v12 = 5003;
      goto LABEL_15;
    }
LABEL_17:
    NETRBErrorLog();
    goto LABEL_7;
  }
LABEL_6:
  NETRBDebugLog();
LABEL_7:

  CFRelease((CFTypeRef)a1);
}

uint64_t _NETRBClientStopService(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  if (!a1) {
    goto LABEL_6;
  }
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  if (qword_10027DD08)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_10018FEC4;
    block[3] = &unk_100245110;
    void block[4] = &v5;
    void block[5] = a1;
    void block[6] = qword_10027DD08;
    dispatch_sync((dispatch_queue_t)qword_10027DD08, block);
  }
  else
  {
LABEL_6:
    NETRBErrorLog();
  }
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_10018FEC4(uint64_t a1)
{
  if (!sub_10018F030(*(unsigned char **)(a1 + 40))
    && *(unsigned char *)(*(void *)(a1 + 40) + 289)
    && (xpc_object_t v2 = xpc_dictionary_create(0, 0, 0)) != 0)
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_uint64(v2, off_10027D3D8, 0x3EAuLL);
    xpc_dictionary_set_string(v3, off_10027D3E0, (const char *)(*(void *)(a1 + 40) + 32));
    NETRBInfoLog();
    CFIndex v4 = (_OWORD *)(*(void *)(a1 + 40) + 289);
    v4[14] = 0u;
    v4[15] = 0u;
    v4[12] = 0u;
    v4[13] = 0u;
    v4[10] = 0u;
    v4[11] = 0u;
    v4[8] = 0u;
    v4[9] = 0u;
    v4[6] = 0u;
    void v4[7] = 0u;
    void v4[4] = 0u;
    v4[5] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    _OWORD *v4 = 0u;
    v4[1] = 0u;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    void v6[2] = sub_100190048;
    void v6[3] = &unk_1002450E8;
    uint64_t v5 = *(NSObject **)(a1 + 48);
    void v6[4] = *(void *)(a1 + 40);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(v5, v3, (uint64_t)v6);
    xpc_release(v3);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      CFRetain(*(CFTypeRef *)(a1 + 40));
    }
  }
  else
  {
    NETRBErrorLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_100190048(uint64_t a1, void *a2)
{
}

uint64_t _NETRBClientGetDynamicStoreKey(uint64_t a1, char *a2)
{
  uint64_t v7 = 0;
  char v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  if (!a1 || !a2) {
    goto LABEL_8;
  }
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  if (qword_10027DD08)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    void v6[2] = sub_10019018C;
    void v6[3] = &unk_100245138;
    void v6[4] = &v7;
    void v6[5] = a1;
    dispatch_sync((dispatch_queue_t)qword_10027DD08, v6);
    if (*((unsigned char *)v8 + 24)) {
      strcpy(a2, "com.apple.MobileInternetSharing");
    }
  }
  else
  {
LABEL_8:
    NETRBErrorLog();
  }
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t sub_10019018C(uint64_t a1)
{
  uint64_t result = sub_10018F030(*(unsigned char **)(a1 + 40));
  if (result) {
    return NETRBErrorLog();
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return result;
}

uint64_t _NETRBClientGetGlobalServiceState(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v21 = 0;
  id v22 = &v21;
  uint64_t v23 = 0x2000000000;
  int v24 = 0;
  uint64_t v17 = 0;
  int v18 = &v17;
  uint64_t v19 = 0x2000000000;
  int v20 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  char v16 = 0;
  uint64_t v9 = 0;
  char v10 = &v9;
  uint64_t v11 = 0x2000000000;
  uint64_t v12 = 2000;
  if (!a1 || !a2 || !a3) {
    goto LABEL_9;
  }
  if (qword_10027DD00 != -1)
  {
    uint64_t v7 = a1;
    dispatch_once(&qword_10027DD00, &stru_100245730);
    a1 = v7;
  }
  if (qword_10027DD08)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_1001903C0;
    block[3] = &unk_100245188;
    void block[4] = &v13;
    void block[5] = &v9;
    void block[6] = &v21;
    void block[7] = &v17;
    void block[8] = a1;
    dispatch_sync((dispatch_queue_t)qword_10027DD08, block);
    if (*((unsigned char *)v14 + 24))
    {
      *((unsigned char *)v14 + 24) = v10[3] == 2001;
      *a2 = *((_DWORD *)v22 + 6);
      *a3 = *((_DWORD *)v18 + 6);
    }
  }
  else
  {
LABEL_9:
    NETRBErrorLog();
  }
  uint64_t v5 = *((unsigned __int8 *)v14 + 24);
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);
  return v5;
}

void sub_1001903C0(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 64)) || (xpc_object_t v2 = xpc_dictionary_create(0, 0, 0)) == 0)
  {
    NETRBErrorLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_uint64(v2, off_10027D3D8, 0x3EBuLL);
    xpc_dictionary_set_string(v3, off_10027D3E0, (const char *)(*(void *)(a1 + 64) + 32));
    NETRBInfoLog();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 0x40000000;
    v5[2] = sub_1001904F4;
    void v5[3] = &unk_100245160;
    long long v4 = *(_OWORD *)(a1 + 56);
    long long v6 = *(_OWORD *)(a1 + 40);
    long long v7 = v4;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v3, (uint64_t)v5);
    xpc_release(v3);
  }
}

uint64_t sub_1001904F4(void *a1, void *a2)
{
  uint64_t result = NETRBInfoLog();
  if (a2)
  {
    uint64_t result = xpc_dictionary_get_uint64(a2, off_10027D438);
    *(void *)(*(void *)(a1[4] + 8) + 24) = result;
    if (*(void *)(*(void *)(a1[4] + 8) + 24) == 2001)
    {
      *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = xpc_dictionary_get_uint64(a2, off_10027D458);
      uint64_t result = xpc_dictionary_get_uint64(a2, off_10027D468);
      *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t _NETRBClientSetGlobalServiceState(uint64_t a1, int a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  char v15 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  uint64_t v11 = 2000;
  if (!a1 || (a2 - 1024) <= 0xFFFFFFFB) {
    goto LABEL_10;
  }
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  if (qword_10027DD08)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_100190718;
    block[3] = &unk_1002451D8;
    int v7 = a2;
    void block[4] = &v12;
    void block[5] = &v8;
    void block[6] = a1;
    dispatch_sync((dispatch_queue_t)qword_10027DD08, block);
    if (*((unsigned char *)v13 + 24)) {
      *((unsigned char *)v13 + 24) = v9[3] == 2001;
    }
  }
  else
  {
LABEL_10:
    NETRBErrorLog();
  }
  uint64_t v4 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
  return v4;
}

void sub_100190718(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 48)) || (xpc_object_t v2 = xpc_dictionary_create(0, 0, 0)) == 0)
  {
    NETRBErrorLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_uint64(v2, off_10027D3D8, 0x3ECuLL);
    xpc_dictionary_set_string(v3, off_10027D3E0, (const char *)(*(void *)(a1 + 48) + 32));
    xpc_dictionary_set_uint64(v3, off_10027D458, *(unsigned int *)(a1 + 56));
    NETRBInfoLog();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 0x40000000;
    v4[2] = sub_100190860;
    v4[3] = &unk_1002451B0;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v3, (uint64_t)v4);
    xpc_release(v3);
  }
}

uint64_t sub_100190860(uint64_t a1, void *a2)
{
  uint64_t result = NETRBInfoLog();
  if (a2)
  {
    uint64_t result = xpc_dictionary_get_uint64(a2, off_10027D438);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t _NETRBClientGetExtName(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 2000;
  if (!a1 || !a2) {
    goto LABEL_8;
  }
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  if (qword_10027DD08)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    void v6[2] = sub_100190A20;
    void v6[3] = &unk_100245228;
    void v6[4] = &v11;
    void v6[5] = &v7;
    void v6[6] = a1;
    void v6[7] = a2;
    dispatch_sync((dispatch_queue_t)qword_10027DD08, v6);
    if (*((unsigned char *)v12 + 24)) {
      *((unsigned char *)v12 + 24) = v8[3] == 2001;
    }
  }
  else
  {
LABEL_8:
    NETRBErrorLog();
  }
  uint64_t v4 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v11, 8);
  return v4;
}

void sub_100190A20(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 48)) || (xpc_object_t v2 = xpc_dictionary_create(0, 0, 0)) == 0)
  {
    NETRBErrorLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_uint64(v2, off_10027D3D8, 0x3F5uLL);
    xpc_dictionary_set_string(v3, off_10027D3E0, (const char *)(*(void *)(a1 + 48) + 32));
    NETRBInfoLog();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 0x40000000;
    v4[2] = sub_100190B58;
    v4[3] = &unk_100245200;
    long long v5 = *(_OWORD *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 56);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v3, (uint64_t)v4);
    xpc_release(v3);
  }
}

uint64_t sub_100190B58(uint64_t a1, void *a2)
{
  uint64_t result = NETRBInfoLog();
  if (a2)
  {
    uint64_t result = xpc_dictionary_get_uint64(a2, off_10027D438);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 2001)
    {
      long long v5 = *(char **)(a1 + 48);
      string = xpc_dictionary_get_string(a2, off_10027D460);
      return snprintf(v5, 0x10uLL, "%s", string);
    }
  }
  return result;
}

void *_NETRBClientCopyFixtureForwardedPorts(void *a1)
{
  int v1 = a1;
  uint64_t v17 = 0;
  int v18 = &v17;
  uint64_t v19 = 0x2000000000;
  __int16 v20 = 0;
  uint64_t v13 = 0;
  char v14 = &v13;
  uint64_t v15 = 0x2000000000;
  __int16 v16 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  char v12 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 2000;
  if (!a1)
  {
    NETRBErrorLog();
    goto LABEL_12;
  }
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  if (!qword_10027DD08)
  {
    NETRBErrorLog();
LABEL_11:
    int v1 = 0;
    goto LABEL_12;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100190DE8;
  block[3] = &unk_100245278;
  void block[4] = &v9;
  void block[5] = &v5;
  void block[6] = &v17;
  void block[7] = &v13;
  void block[8] = v1;
  dispatch_sync((dispatch_queue_t)qword_10027DD08, block);
  if (!*((unsigned char *)v10 + 24) || v6[3] != 2001) {
    goto LABEL_11;
  }
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  int v1 = v2;
  if (v2)
  {
    xpc_dictionary_set_uint64(v2, netrbClientForwardedLowPort, *((unsigned __int16 *)v18 + 12));
    xpc_dictionary_set_uint64(v1, netrbClientForwardedHighPort, *((unsigned __int16 *)v14 + 12));
  }
  else
  {
    NETRBErrorLog();
    *((unsigned char *)v10 + 24) = 0;
  }
LABEL_12:
  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v1;
}

void sub_100190DE8(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 64)) || (xpc_object_t v2 = xpc_dictionary_create(0, 0, 0)) == 0)
  {
    NETRBErrorLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_uint64(v2, off_10027D3D8, 0x3EDuLL);
    xpc_dictionary_set_string(v3, off_10027D3E0, (const char *)(*(void *)(a1 + 64) + 32));
    NETRBInfoLog();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 0x40000000;
    v5[2] = sub_100190F1C;
    void v5[3] = &unk_100245250;
    long long v4 = *(_OWORD *)(a1 + 56);
    long long v6 = *(_OWORD *)(a1 + 40);
    long long v7 = v4;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v3, (uint64_t)v5);
    xpc_release(v3);
  }
}

uint64_t sub_100190F1C(void *a1, void *a2)
{
  uint64_t result = NETRBInfoLog();
  if (a2)
  {
    uint64_t result = xpc_dictionary_get_uint64(a2, off_10027D438);
    *(void *)(*(void *)(a1[4] + 8) + 24) = result;
    if (*(void *)(*(void *)(a1[4] + 8) + 24) == 2001)
    {
      *(_WORD *)(*(void *)(a1[5] + 8) + 24) = xpc_dictionary_get_uint64(a2, off_10027D470);
      uint64_t result = xpc_dictionary_get_uint64(a2, off_10027D478);
      *(_WORD *)(*(void *)(a1[6] + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t _NETRBClientSetFixtureForwardedPorts(uint64_t a1, xpc_object_t object)
{
  uint64_t v11 = 0;
  char v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 2000;
  if (!a1 || !object || xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_4;
  }
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  if (qword_10027DD08)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    void v6[2] = sub_100191148;
    void v6[3] = &unk_1002452C8;
    void v6[6] = a1;
    void v6[7] = object;
    void v6[4] = &v11;
    void v6[5] = &v7;
    dispatch_sync((dispatch_queue_t)qword_10027DD08, v6);
    if (*((unsigned char *)v12 + 24)) {
      *((unsigned char *)v12 + 24) = v8[3] == 2001;
    }
  }
  else
  {
LABEL_4:
    NETRBErrorLog();
  }
  uint64_t v4 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v11, 8);
  return v4;
}

void sub_100191148(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 48)) || (xpc_object_t v2 = xpc_dictionary_create(0, 0, 0)) == 0)
  {
    NETRBErrorLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_uint64(v2, off_10027D3D8, 0x3EEuLL);
    xpc_dictionary_set_string(v3, off_10027D3E0, (const char *)(*(void *)(a1 + 48) + 32));
    uint64_t v4 = off_10027D470;
    uint64_t uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 56), netrbClientForwardedLowPort);
    xpc_dictionary_set_uint64(v3, v4, uint64);
    long long v6 = off_10027D478;
    uint64_t v7 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 56), netrbClientForwardedHighPort);
    xpc_dictionary_set_uint64(v3, v6, v7);
    NETRBInfoLog();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 0x40000000;
    v8[2] = sub_1001912D8;
    v8[3] = &unk_1002452A0;
    long long v9 = *(_OWORD *)(a1 + 40);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v3, (uint64_t)v8);
    xpc_release(v3);
  }
}

uint64_t sub_1001912D8(uint64_t a1, void *a2)
{
  uint64_t result = NETRBInfoLog();
  if (a2)
  {
    uint64_t result = xpc_dictionary_get_uint64(a2, off_10027D438);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t _NETRBClientIsAllowedMoreHost(uint64_t a1)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  char v12 = 0;
  uint64_t v5 = 0;
  long long v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 2000;
  if (!a1) {
    goto LABEL_7;
  }
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  if (qword_10027DD08)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_100191484;
    block[3] = &unk_100245318;
    void block[4] = &v9;
    void block[5] = &v5;
    void block[6] = a1;
    dispatch_sync((dispatch_queue_t)qword_10027DD08, block);
    if (*((unsigned char *)v10 + 24)) {
      *((unsigned char *)v10 + 24) = v6[3] == 2001;
    }
  }
  else
  {
LABEL_7:
    NETRBErrorLog();
  }
  uint64_t v2 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(&v9, 8);
  return v2;
}

void sub_100191484(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 48)) || (xpc_object_t v2 = xpc_dictionary_create(0, 0, 0)) == 0)
  {
    NETRBErrorLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_uint64(v2, off_10027D3D8, 0x3EFuLL);
    xpc_dictionary_set_string(v3, off_10027D3E0, (const char *)(*(void *)(a1 + 48) + 32));
    NETRBInfoLog();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 0x40000000;
    v4[2] = sub_1001915B4;
    v4[3] = &unk_1002452F0;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v3, (uint64_t)v4);
    xpc_release(v3);
  }
}

uint64_t sub_1001915B4(uint64_t a1, void *a2)
{
  uint64_t result = NETRBInfoLog();
  if (a2)
  {
    uint64_t result = xpc_dictionary_get_uint64(a2, off_10027D438);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t _NETRBClientAddHost(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    long long v5 = v4;
    xpc_dictionary_set_uint64(v4, netrbClientHostIftype, a2);
    xpc_dictionary_set_uint64(v5, netrbClientHostDeviceId, 0xFFFFFFFFuLL);
    uint64_t v6 = _NETRBClientAddHostExt(a1, v5);
    xpc_release(v5);
    return v6;
  }
  else
  {
    NETRBErrorLog();
    return 0;
  }
}

uint64_t _NETRBClientAddHostExt(uint64_t a1, xpc_object_t object)
{
  uint64_t v19 = 0;
  __int16 v20 = &v19;
  uint64_t v21 = 0x2000000000;
  char v22 = 0;
  uint64_t v15 = 0;
  __int16 v16 = &v15;
  uint64_t v17 = 0x2000000000;
  uint64_t v18 = 2000;
  if (object
    && xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary
    && (xpc_object_t v6 = xpc_dictionary_get_value(object, netrbClientHostIftype)) != 0
    && (uint64_t v7 = v6, xpc_get_type(v6) == (xpc_type_t)&_xpc_type_uint64)
    && (int v8 = xpc_uint64_get_value(v7), (v9 = xpc_dictionary_get_value(object, netrbClientHostDeviceId)) != 0)
    && (uint64_t v10 = v9, xpc_get_type(v9) == (xpc_type_t)&_xpc_type_uint64))
  {
    uint64_t value = xpc_uint64_get_value(v10);
    if (!a1 || (v8 - 7) <= 0xFFFFFFFA) {
      goto LABEL_20;
    }
    uint64_t v12 = value;
    if (qword_10027DD00 != -1) {
      dispatch_once(&qword_10027DD00, &stru_100245730);
    }
    if (qword_10027DD08)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = sub_1001918D8;
      block[3] = &unk_100245368;
      int v14 = v8;
      void block[6] = a1;
      void block[7] = v12;
      void block[4] = &v19;
      void block[5] = &v15;
      dispatch_sync((dispatch_queue_t)qword_10027DD08, block);
      if (*((unsigned char *)v20 + 24)) {
        *((unsigned char *)v20 + 24) = v16[3] == 2001;
      }
    }
    else
    {
LABEL_20:
      NETRBErrorLog();
    }
  }
  else
  {
    NETRBErrorLog();
    *((unsigned char *)v20 + 24) = 0;
  }
  uint64_t v4 = *((unsigned __int8 *)v20 + 24);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  return v4;
}

void sub_1001918D8(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 48)) || (xpc_object_t v2 = xpc_dictionary_create(0, 0, 0)) == 0)
  {
    NETRBErrorLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_uint64(v2, off_10027D3D8, 0x3F0uLL);
    xpc_dictionary_set_string(v3, off_10027D3E0, (const char *)(*(void *)(a1 + 48) + 32));
    xpc_dictionary_set_uint64(v3, off_10027D480, *(unsigned int *)(a1 + 64));
    xpc_dictionary_set_uint64(v3, off_10027D4B8, *(void *)(a1 + 56));
    NETRBInfoLog();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 0x40000000;
    v4[2] = sub_100191A38;
    v4[3] = &unk_100245340;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v3, (uint64_t)v4);
    xpc_release(v3);
  }
}

uint64_t sub_100191A38(uint64_t a1, void *a2)
{
  uint64_t result = NETRBInfoLog();
  if (a2)
  {
    uint64_t result = xpc_dictionary_get_uint64(a2, off_10027D438);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t _NETRBClientRemoveHostExt(uint64_t a1, xpc_object_t object)
{
  uint64_t v19 = 0;
  __int16 v20 = &v19;
  uint64_t v21 = 0x2000000000;
  char v22 = 0;
  uint64_t v15 = 0;
  __int16 v16 = &v15;
  uint64_t v17 = 0x2000000000;
  uint64_t v18 = 2000;
  if (object
    && xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary
    && (xpc_object_t v6 = xpc_dictionary_get_value(object, netrbClientHostIftype)) != 0
    && (uint64_t v7 = v6, xpc_get_type(v6) == (xpc_type_t)&_xpc_type_uint64)
    && (int v8 = xpc_uint64_get_value(v7), (v9 = xpc_dictionary_get_value(object, netrbClientHostDeviceId)) != 0)
    && (uint64_t v10 = v9, xpc_get_type(v9) == (xpc_type_t)&_xpc_type_uint64))
  {
    uint64_t value = xpc_uint64_get_value(v10);
    if (!a1 || (v8 - 7) <= 0xFFFFFFFA) {
      goto LABEL_20;
    }
    uint64_t v12 = value;
    if (qword_10027DD00 != -1) {
      dispatch_once(&qword_10027DD00, &stru_100245730);
    }
    if (qword_10027DD08)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = sub_100191CC4;
      block[3] = &unk_1002453B8;
      int v14 = v8;
      void block[6] = a1;
      void block[7] = v12;
      void block[4] = &v19;
      void block[5] = &v15;
      dispatch_sync((dispatch_queue_t)qword_10027DD08, block);
      if (*((unsigned char *)v20 + 24)) {
        *((unsigned char *)v20 + 24) = v16[3] == 2001;
      }
    }
    else
    {
LABEL_20:
      NETRBErrorLog();
    }
  }
  else
  {
    NETRBErrorLog();
    *((unsigned char *)v20 + 24) = 0;
  }
  uint64_t v4 = *((unsigned __int8 *)v20 + 24);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  return v4;
}

void sub_100191CC4(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 48)) || (xpc_object_t v2 = xpc_dictionary_create(0, 0, 0)) == 0)
  {
    NETRBErrorLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_uint64(v2, off_10027D3D8, 0x3F1uLL);
    xpc_dictionary_set_string(v3, off_10027D3E0, (const char *)(*(void *)(a1 + 48) + 32));
    xpc_dictionary_set_uint64(v3, off_10027D480, *(unsigned int *)(a1 + 64));
    xpc_dictionary_set_uint64(v3, off_10027D4B0, *(void *)(a1 + 56));
    NETRBInfoLog();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 0x40000000;
    v4[2] = sub_100191E24;
    v4[3] = &unk_100245390;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v3, (uint64_t)v4);
    xpc_release(v3);
  }
}

uint64_t sub_100191E24(uint64_t a1, void *a2)
{
  uint64_t result = NETRBInfoLog();
  if (a2)
  {
    uint64_t result = xpc_dictionary_get_uint64(a2, off_10027D438);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t _NETRBClientRemoveHost(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    long long v5 = v4;
    xpc_dictionary_set_uint64(v4, netrbClientHostIftype, a2);
    xpc_dictionary_set_uint64(v5, netrbClientHostDeviceId, 0xFFFFFFFFuLL);
    uint64_t v6 = _NETRBClientRemoveHostExt(a1, v5);
    xpc_release(v5);
    return v6;
  }
  else
  {
    NETRBErrorLog();
    return 0;
  }
}

uint64_t _NETRBClientGetHostCount(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v21 = 0;
  char v22 = &v21;
  uint64_t v23 = 0x2000000000;
  int v24 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  int v20 = 0;
  uint64_t v13 = 0;
  int v14 = &v13;
  uint64_t v15 = 0x2000000000;
  char v16 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  uint64_t v12 = 2000;
  if (!a1 || !a2 || !a3) {
    goto LABEL_9;
  }
  if (qword_10027DD00 != -1)
  {
    uint64_t v7 = a1;
    dispatch_once(&qword_10027DD00, &stru_100245730);
    a1 = v7;
  }
  if (qword_10027DD08)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_1001920F8;
    block[3] = &unk_100245408;
    void block[4] = &v13;
    void block[5] = &v9;
    void block[6] = &v21;
    void block[7] = &v17;
    void block[8] = a1;
    dispatch_sync((dispatch_queue_t)qword_10027DD08, block);
    if (*((unsigned char *)v14 + 24))
    {
      *((unsigned char *)v14 + 24) = v10[3] == 2001;
      *a2 = *((_DWORD *)v22 + 6);
      *a3 = *((_DWORD *)v18 + 6);
    }
  }
  else
  {
LABEL_9:
    NETRBErrorLog();
  }
  uint64_t v5 = *((unsigned __int8 *)v14 + 24);
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);
  return v5;
}

void sub_1001920F8(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 64)) || (xpc_object_t v2 = xpc_dictionary_create(0, 0, 0)) == 0)
  {
    NETRBErrorLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_uint64(v2, off_10027D3D8, 0x3F2uLL);
    xpc_dictionary_set_string(v3, off_10027D3E0, (const char *)(*(void *)(a1 + 64) + 32));
    NETRBInfoLog();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 0x40000000;
    v5[2] = sub_10019222C;
    void v5[3] = &unk_1002453E0;
    long long v4 = *(_OWORD *)(a1 + 56);
    long long v6 = *(_OWORD *)(a1 + 40);
    long long v7 = v4;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v3, (uint64_t)v5);
    xpc_release(v3);
  }
}

uint64_t sub_10019222C(void *a1, void *a2)
{
  uint64_t result = NETRBInfoLog();
  if (a2)
  {
    uint64_t result = xpc_dictionary_get_uint64(a2, off_10027D438);
    *(void *)(*(void *)(a1[4] + 8) + 24) = result;
    if (*(void *)(*(void *)(a1[4] + 8) + 24) == 2001)
    {
      *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = xpc_dictionary_get_uint64(a2, off_10027D488);
      uint64_t result = xpc_dictionary_get_uint64(a2, off_10027D490);
      *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t _NETRBClientSetHostCount(uint64_t a1, int a2, int a3)
{
  uint64_t v15 = 0;
  char v16 = &v15;
  uint64_t v17 = 0x2000000000;
  char v18 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  uint64_t v14 = 2000;
  if (!a1 || (a2 - 7) <= 0xFFFFFFFA) {
    goto LABEL_10;
  }
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  if (qword_10027DD08)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_10019245C;
    block[3] = &unk_100245458;
    int v9 = a2;
    int v10 = a3;
    void block[4] = &v15;
    void block[5] = &v11;
    void block[6] = a1;
    dispatch_sync((dispatch_queue_t)qword_10027DD08, block);
    if (*((unsigned char *)v16 + 24)) {
      *((unsigned char *)v16 + 24) = v12[3] == 2001;
    }
  }
  else
  {
LABEL_10:
    NETRBErrorLog();
  }
  uint64_t v6 = *((unsigned __int8 *)v16 + 24);
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
  return v6;
}

void sub_10019245C(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 48)) || (xpc_object_t v2 = xpc_dictionary_create(0, 0, 0)) == 0)
  {
    NETRBErrorLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_uint64(v2, off_10027D3D8, 0x3F3uLL);
    xpc_dictionary_set_string(v3, off_10027D3E0, (const char *)(*(void *)(a1 + 48) + 32));
    xpc_dictionary_set_uint64(v3, off_10027D480, *(unsigned int *)(a1 + 56));
    xpc_dictionary_set_uint64(v3, off_10027D498, *(unsigned int *)(a1 + 60));
    NETRBInfoLog();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 0x40000000;
    v4[2] = sub_1001925BC;
    v4[3] = &unk_100245430;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v3, (uint64_t)v4);
    xpc_release(v3);
  }
}

uint64_t sub_1001925BC(uint64_t a1, void *a2)
{
  uint64_t result = NETRBInfoLog();
  if (a2)
  {
    uint64_t result = xpc_dictionary_get_uint64(a2, off_10027D438);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t _NETRBClientNewInterface(uint64_t a1, int a2, uint64_t a3, xpc_object_t xdict)
{
  uint64_t v48 = 0;
  xpc_object_t v49 = &v48;
  uint64_t v50 = 0x2000000000;
  char v51 = 0;
  uint64_t v44 = 0;
  CFIndex v45 = &v44;
  uint64_t v46 = 0x2000000000;
  uint64_t v47 = 0;
  if (!a1) {
    goto LABEL_40;
  }
  if (xdict) {
    string = xpc_dictionary_get_string(xdict, netrbClientExternalInterface);
  }
  else {
    string = 0;
  }
  if ((a2 - 201) >= 3)
  {
    if (a2 != 204 || !string || !*string) {
      goto LABEL_40;
    }
  }
  else
  {
    if (string) {
      goto LABEL_40;
    }
    if (xdict)
    {
      int uint64 = xpc_dictionary_get_uint64(xdict, netrbClientInterfaceMTU);
      goto LABEL_17;
    }
  }
  int uint64 = 0;
LABEL_17:
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  int v10 = qword_10027DD08;
  if (!qword_10027DD08) {
    goto LABEL_40;
  }
  v45[3] = (uint64_t)xpc_dictionary_create(0, 0, 0);
  if (xdict)
  {
    if (xpc_dictionary_get_value(xdict, netrbClientAllocateMACAddress)) {
      BOOL v33 = xpc_dictionary_get_BOOL(xdict, netrbClientAllocateMACAddress);
    }
    else {
      BOOL v33 = 1;
    }
    if (xpc_dictionary_get_value(xdict, netrbClientEnableTSO)) {
      BOOL v32 = xpc_dictionary_get_BOOL(xdict, netrbClientEnableTSO);
    }
    else {
      BOOL v32 = 0;
    }
    if (xpc_dictionary_get_value(xdict, netrbClientEnableIsolation)) {
      BOOL v31 = xpc_dictionary_get_BOOL(xdict, netrbClientEnableIsolation);
    }
    else {
      BOOL v31 = 0;
    }
    long long v35 = v10;
    if (xpc_dictionary_get_value(xdict, netrbClientEnableChecksumOffload)) {
      BOOL v30 = xpc_dictionary_get_BOOL(xdict, netrbClientEnableChecksumOffload);
    }
    else {
      BOOL v30 = 0;
    }
    BOOL v34 = xpc_dictionary_get_BOOL(xdict, netrbClientEnableMACNAT);
    char v16 = (void *)v45[3];
    uint64_t v17 = xpc_dictionary_get_string(xdict, netrbClientInterfaceStartAddress);
    char v18 = xpc_dictionary_get_string(xdict, netrbClientInterfaceEndAddress);
    uint64_t v19 = xpc_dictionary_get_string(xdict, netrbClientInterfaceNetworkMask);
    if (v17 && v18 && (int v20 = v19) != 0)
    {
      xpc_dictionary_set_string(v16, off_10027D4D0, v17);
      xpc_dictionary_set_string(v16, off_10027D4D8, v18);
      xpc_dictionary_set_string(v16, off_10027D4E0, v20);
    }
    else if ((unint64_t)v17 | (unint64_t)v18)
    {
      goto LABEL_40;
    }
    if (!sub_10018F828(xdict, (void *)v45[3])) {
      goto LABEL_41;
    }
    int v24 = (void *)v45[3];
    uuid = xpc_dictionary_get_uuid(xdict, netrbClientNetworkIdentifier);
    if (!uuid) {
      goto LABEL_52;
    }
    xpc_dictionary_set_uuid(v24, off_10027D528, uuid);
    xpc_object_t v26 = xpc_dictionary_get_string(xdict, netrbClientInterfaceIPv4Address);
    id v27 = xpc_dictionary_get_string(xdict, netrbClientInterfaceNetworkMask);
    uint64_t v28 = v27;
    if (v26 && v27)
    {
      xpc_dictionary_set_string(v24, off_10027D530, v26);
      xpc_dictionary_set_string(v24, off_10027D4E0, v28);
      goto LABEL_50;
    }
    if (!((unint64_t)v26 | (unint64_t)v27))
    {
LABEL_50:
      long long v29 = xpc_dictionary_get_string(xdict, netrbClientInterfaceIPv6Address);
      if (v29) {
        xpc_dictionary_set_string(v24, off_10027D538, v29);
      }
LABEL_52:
      int v10 = v35;
      BOOL v13 = v32;
      char v15 = v33;
      BOOL v11 = v30;
      BOOL v12 = v31;
      BOOL v14 = v34;
      goto LABEL_53;
    }
LABEL_40:
    NETRBErrorLog();
    goto LABEL_41;
  }
  BOOL v11 = 0;
  BOOL v12 = 0;
  BOOL v13 = 0;
  BOOL v14 = 0;
  char v15 = 1;
LABEL_53:
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100192B04;
  block[3] = &unk_1002454A0;
  char v39 = v15;
  void block[6] = a1;
  void block[7] = a3;
  BOOL v40 = v13;
  BOOL v41 = v14;
  BOOL v42 = v12;
  BOOL v43 = v11;
  int v37 = a2;
  int v38 = uint64;
  void block[4] = &v44;
  void block[5] = &v48;
  void block[8] = string;
  void block[9] = v10;
  dispatch_sync(v10, block);
LABEL_41:
  uint64_t v21 = (void *)v45[3];
  if (v21) {
    xpc_release(v21);
  }
  uint64_t v22 = *((unsigned __int8 *)v49 + 24);
  _Block_object_dispose(&v44, 8);
  _Block_object_dispose(&v48, 8);
  return v22;
}

unsigned char *sub_100192B04(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 48))) {
    return (unsigned char *)NETRBErrorLog();
  }
  if (*(unsigned char *)(*(void *)(a1 + 48) + 545))
  {
    return (unsigned char *)NETRBErrorLog();
  }
  xpc_dictionary_set_uint64(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), off_10027D3D8, 0x3F6uLL);
  xpc_dictionary_set_uint64(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), off_10027D440, *(unsigned int *)(a1 + 80));
  xpc_dictionary_set_string(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), off_10027D3E0, (const char *)(*(void *)(a1 + 48) + 32));
  if (*(unsigned char *)(a1 + 88))
  {
    if (!uuid_is_null(*(const unsigned __int8 **)(a1 + 56))) {
      xpc_dictionary_set_uuid(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), off_10027D3E8, *(const unsigned __int8 **)(a1 + 56));
    }
  }
  else
  {
    xpc_dictionary_set_BOOL(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), off_10027D400, 0);
  }
  xpc_object_t v3 = *(const char **)(a1 + 64);
  if (v3) {
    xpc_dictionary_set_string(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), off_10027D460, v3);
  }
  if (*(unsigned char *)(a1 + 89)) {
    xpc_dictionary_set_BOOL(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), off_10027D408, 1);
  }
  if (*(unsigned char *)(a1 + 90)) {
    xpc_dictionary_set_BOOL(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), off_10027D410, 1);
  }
  if (*(unsigned char *)(a1 + 91)) {
    xpc_dictionary_set_BOOL(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), off_10027D418, 1);
  }
  if (*(unsigned char *)(a1 + 92)) {
    xpc_dictionary_set_BOOL(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), off_10027D420, 1);
  }
  uint64_t v4 = *(int *)(a1 + 84);
  if (v4) {
    xpc_dictionary_set_uint64(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), off_10027D4C0, v4);
  }
  NETRBInfoLog();
  uint64_t v5 = *(void *)(a1 + 48);
  *(unsigned char *)(v5 + 545) = 1;
  uint64_t v6 = *(NSObject **)(a1 + 72);
  long long v7 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  v9[2] = sub_100192E30;
  v9[3] = &unk_100245478;
  void v9[4] = v5;
  BOOL v8 = NETRBXPCSetupAndSend(v6, v7, (uint64_t)v9);
  uint64_t result = *(unsigned char **)(a1 + 48);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v8;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    return CFRetain(result);
  }
  result[545] = 0;
  return result;
}

void sub_100192E30(uint64_t a1, void *a2)
{
}

uint64_t _NETRBClientAddIPPortForwardingRule(CFTypeRef cf, char a2, __int16 a3, int a4, uint64_t a5, __int16 a6, uint64_t a7)
{
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2000000000;
  char v25 = 0;
  if (!cf) {
    goto LABEL_9;
  }
  char v10 = a4;
  if (a4 != 2 && a4 != 30) {
    goto LABEL_9;
  }
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  BOOL v14 = qword_10027DD08;
  if (qword_10027DD08)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_100192FD0;
    block[3] = &unk_100245518;
    char v20 = a2;
    __int16 v18 = a3;
    char v21 = v10;
    void block[6] = cf;
    void block[7] = a5;
    __int16 v19 = a6;
    void block[4] = a7;
    void block[5] = &v22;
    void block[8] = qword_10027DD08;
    CFRetain(cf);
    dispatch_sync(v14, block);
    if (!*((unsigned char *)v23 + 24)) {
      CFRelease(cf);
    }
  }
  else
  {
LABEL_9:
    NETRBErrorLog();
  }
  uint64_t v15 = *((unsigned __int8 *)v23 + 24);
  _Block_object_dispose(&v22, 8);
  return v15;
}

void sub_100192FD0(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 48)))
  {
    NETRBErrorLog();
  }
  else
  {
    xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v2, off_10027D3E0, (const char *)(*(void *)(a1 + 48) + 32));
    xpc_dictionary_set_uint64(v2, off_10027D3D8, 0x3F7uLL);
    xpc_object_t v3 = sub_100193128(*(unsigned __int8 *)(a1 + 76), *(unsigned __int16 *)(a1 + 72), *(unsigned __int8 *)(a1 + 77), *(void **)(a1 + 56), *(unsigned __int16 *)(a1 + 74));
    xpc_dictionary_set_value(v2, off_10027D540, v3);
    xpc_release(v3);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 0x40000000;
    v5[2] = sub_100193280;
    void v5[3] = &unk_1002454F0;
    uint64_t v4 = *(void *)(a1 + 48);
    void v5[4] = *(void *)(a1 + 32);
    void v5[5] = v4;
    NETRBInfoLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = NETRBXPCSetupAndSend(*(NSObject **)(a1 + 64), v2, (uint64_t)v5);
    xpc_release(v2);
  }
}

void *sub_100193128(unsigned int a1, unsigned int a2, unsigned int a3, void *a4, unsigned int a5)
{
  if (a3 != 30 && a3 != 2 || !a4 && a5 || a4 && !a5 || a4 && !inet_ntop(a3, a4, string, 0x2Eu)) {
    return 0;
  }
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  char v10 = v12;
  if (a1) {
    xpc_dictionary_set_uint64(v12, off_10027D550, a1);
  }
  if (a2) {
    xpc_dictionary_set_uint64(v10, off_10027D558, a2);
  }
  xpc_dictionary_set_uint64(v10, off_10027D568, a3);
  if (a5) {
    xpc_dictionary_set_uint64(v10, off_10027D570, a5);
  }
  if (a4) {
    xpc_dictionary_set_string(v10, off_10027D560, string);
  }
  return v10;
}

void sub_100193280(uint64_t a1, void *a2)
{
  CFRelease(*(CFTypeRef *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (a2)
    {
      LOBYTE(a2) = xpc_dictionary_get_uint64(a2, off_10027D438) == 2001;
      uint64_t v4 = *(void *)(a1 + 32);
    }
    global_queue = dispatch_get_global_queue(0, 0);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    void v6[2] = sub_100193348;
    void v6[3] = &unk_1002454C8;
    void v6[4] = v4;
    char v7 = (char)a2;
    dispatch_async(global_queue, v6);
  }
}

uint64_t sub_100193348(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t _NETRBClientRemoveIPPortForwardingRule(CFTypeRef cf, char a2, __int16 a3, int a4, uint64_t a5)
{
  uint64_t v17 = 0;
  __int16 v18 = &v17;
  uint64_t v19 = 0x2000000000;
  char v20 = 0;
  if (!cf) {
    goto LABEL_9;
  }
  char v6 = a4;
  if (a4 != 2 && a4 != 30) {
    goto LABEL_9;
  }
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  char v10 = qword_10027DD08;
  if (qword_10027DD08)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_1001934D4;
    block[3] = &unk_100245590;
    char v15 = a2;
    __int16 v14 = a3;
    char v16 = v6;
    void block[4] = a5;
    void block[5] = &v17;
    void block[6] = cf;
    void block[7] = qword_10027DD08;
    CFRetain(cf);
    dispatch_sync(v10, block);
    if (!*((unsigned char *)v18 + 24)) {
      CFRelease(cf);
    }
  }
  else
  {
LABEL_9:
    NETRBErrorLog();
  }
  uint64_t v11 = *((unsigned __int8 *)v18 + 24);
  _Block_object_dispose(&v17, 8);
  return v11;
}

void sub_1001934D4(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 48)))
  {
    NETRBErrorLog();
  }
  else
  {
    xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v2, off_10027D3E0, (const char *)(*(void *)(a1 + 48) + 32));
    xpc_dictionary_set_uint64(v2, off_10027D3D8, 0x3F8uLL);
    uint64_t v3 = *(unsigned __int8 *)(a1 + 67);
    if (v3 == 30 || v3 == 2)
    {
      uint64_t v5 = *(unsigned __int8 *)(a1 + 66);
      uint64_t v6 = *(unsigned __int16 *)(a1 + 64);
      xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
      BOOL v8 = v7;
      if (v5) {
        xpc_dictionary_set_uint64(v7, off_10027D550, v5);
      }
      if (v6) {
        xpc_dictionary_set_uint64(v8, off_10027D558, v6);
      }
      xpc_dictionary_set_uint64(v8, off_10027D568, v3);
    }
    else
    {
      BOOL v8 = 0;
    }
    xpc_dictionary_set_value(v2, off_10027D540, v8);
    xpc_release(v8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 0x40000000;
    long long v10[2] = sub_10019369C;
    v10[3] = &unk_100245568;
    uint64_t v9 = *(void *)(a1 + 48);
    v10[4] = *(void *)(a1 + 32);
    void v10[5] = v9;
    NETRBInfoLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = NETRBXPCSetupAndSend(*(NSObject **)(a1 + 56), v2, (uint64_t)v10);
    xpc_release(v2);
  }
}

void sub_10019369C(uint64_t a1, void *a2)
{
  CFRelease(*(CFTypeRef *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (a2)
    {
      LOBYTE(a2) = xpc_dictionary_get_uint64(a2, off_10027D438) == 2001;
      uint64_t v4 = *(void *)(a1 + 32);
    }
    global_queue = dispatch_get_global_queue(0, 0);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    void v6[2] = sub_100193764;
    void v6[3] = &unk_100245540;
    void v6[4] = v4;
    char v7 = (char)a2;
    dispatch_async(global_queue, v6);
  }
}

uint64_t sub_100193764(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t _NETRBClientGetIPPortForwardingRules(CFTypeRef cf, int a2, uint64_t a3)
{
  uint64_t v11 = 0;
  xpc_object_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  if (!cf) {
    goto LABEL_9;
  }
  char v4 = a2;
  if (a2 != 2 && a2 != 30) {
    goto LABEL_9;
  }
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  uint64_t v6 = qword_10027DD08;
  if (qword_10027DD08)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_1001938D8;
    block[3] = &unk_100245608;
    char v10 = v4;
    void block[4] = a3;
    void block[5] = &v11;
    void block[6] = cf;
    void block[7] = qword_10027DD08;
    CFRetain(cf);
    dispatch_sync(v6, block);
    if (!*((unsigned char *)v12 + 24)) {
      CFRelease(cf);
    }
  }
  else
  {
LABEL_9:
    NETRBErrorLog();
  }
  uint64_t v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1001938D8(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 48)))
  {
    NETRBErrorLog();
  }
  else
  {
    xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v2, off_10027D3E0, (const char *)(*(void *)(a1 + 48) + 32));
    xpc_dictionary_set_uint64(v2, off_10027D3D8, 0x3F9uLL);
    uint64_t v3 = *(unsigned __int8 *)(a1 + 64);
    if (v3 == 30 || v3 == 2)
    {
      xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v5, off_10027D568, v3);
    }
    else
    {
      xpc_object_t v5 = 0;
    }
    xpc_dictionary_set_value(v2, off_10027D540, v5);
    xpc_release(v5);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 0x40000000;
    void v7[2] = sub_100193A54;
    v7[3] = &unk_1002455E0;
    uint64_t v6 = *(void *)(a1 + 48);
    v7[4] = *(void *)(a1 + 32);
    v7[5] = v6;
    NETRBInfoLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = NETRBXPCSetupAndSend(*(NSObject **)(a1 + 56), v2, (uint64_t)v7);
    xpc_release(v2);
  }
}

void sub_100193A54(uint64_t a1, void *a2)
{
  CFRelease(*(CFTypeRef *)(a1 + 40));
  if (a2)
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, off_10027D548);
    a2 = value;
    if (value) {
      xpc_retain(value);
    }
  }
  global_queue = dispatch_get_global_queue(0, 0);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  void v6[2] = sub_100193B10;
  void v6[3] = &unk_1002455B8;
  void v6[4] = *(void *)(a1 + 32);
  void v6[5] = a2;
  dispatch_async(global_queue, v6);
}

void sub_100193B10(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  xpc_object_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    xpc_release(v2);
  }
}

const char *_NETRBIPPortForwardingDictGetDetails(xpc_object_t xdict, unsigned char *a2, _WORD *a3, int a4, void *a5, _WORD *a6)
{
  if (!xdict || a4 != 2 && a4 != 30) {
    goto LABEL_10;
  }
  char uint64 = xpc_dictionary_get_uint64(xdict, off_10027D550);
  *a2 = uint64;
  if (!uint64) {
    return 0;
  }
  __int16 v13 = xpc_dictionary_get_uint64(xdict, off_10027D558);
  *a3 = v13;
  if (!v13) {
    return 0;
  }
  __int16 v14 = xpc_dictionary_get_uint64(xdict, off_10027D570);
  *a6 = v14;
  if (!v14) {
    return 0;
  }
  if (xpc_dictionary_get_uint64(xdict, off_10027D568) != a4)
  {
LABEL_10:
    NETRBErrorLog();
    return 0;
  }
  uint64_t result = xpc_dictionary_get_string(xdict, off_10027D560);
  if (result) {
    return (const char *)(inet_pton(a4, result, a5) != 0);
  }
  return result;
}

uint64_t NETRBClientSendNotification(void *a1)
{
  if (qword_10027DCE8
    && (CFIndex Count = CFArrayGetCount((CFArrayRef)qword_10027DCE8)) != 0
    && (v3 = Count, (xpc_object_t v4 = xpc_dictionary_create(0, 0, 0)) != 0))
  {
    xpc_object_t v5 = v4;
    uint64_t v6 = netrbClientNotificationKey;
    uint64_t uint64 = xpc_dictionary_get_uint64(a1, off_10027D4E8);
    xpc_dictionary_set_uint64(v5, v6, uint64);
    if (v3 >= 1)
    {
      for (CFIndex i = 0; i != v3; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)qword_10027DCE8, i);
        if (ValueAtIndex)
        {
          char v10 = ValueAtIndex;
          if (ValueAtIndex[2])
          {
            if (ValueAtIndex[3])
            {
              xpc_retain(v5);
              CFRetain(v10);
              uint64_t v11 = v10[2];
              v13[0] = _NSConcreteStackBlock;
              v13[1] = 0x40000000;
              v13[2] = sub_100193E1C;
              v13[3] = &unk_100245650;
              void v13[4] = v10;
              v13[5] = v5;
              dispatch_async(v11, v13);
            }
          }
        }
      }
    }
    xpc_release(v5);
    return 1;
  }
  else
  {
    NETRBErrorLog();
    return 0;
  }
}

void sub_100193E1C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x2000000000;
  int v5 = 0;
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100193F04;
  block[3] = &unk_100245630;
  void block[4] = v4;
  long long v3 = *(_OWORD *)(a1 + 32);
  dispatch_sync((dispatch_queue_t)qword_10027DD08, block);
  xpc_release(*(xpc_object_t *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  _Block_object_dispose(v4, 8);
}

uint64_t sub_100193F04(uint64_t a1)
{
  uint64_t result = sub_10018F030(*(unsigned char **)(a1 + 40));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!result)
  {
    long long v3 = *(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 40) + 24) + 16);
    return v3();
  }
  return result;
}

uint64_t _NETRBClientAddLowLatencyFlow(uint64_t a1, void *a2)
{
  return sub_100193F74(a1, a2, 0);
}

uint64_t sub_100193F74(uint64_t a1, void *a2, char a3)
{
  uint64_t v11 = 0;
  xpc_object_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  char inited = netrbInitIfnetTrafficDescriptor(a2, 0);
  *((unsigned char *)v12 + 24) = inited;
  if ((inited & 1) == 0) {
    goto LABEL_6;
  }
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  if (qword_10027DD08)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 0x40000000;
    v9[2] = sub_100194654;
    v9[3] = &unk_100245808;
    void v9[4] = &v11;
    void v9[5] = a1;
    v9[6] = a2;
    char v10 = a3;
    dispatch_sync((dispatch_queue_t)qword_10027DD08, v9);
  }
  else
  {
LABEL_6:
    NETRBErrorLog();
  }
  uint64_t v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

uint64_t _NETRBClientRemoveLowLatencyFlow(uint64_t a1, void *a2)
{
  return sub_100193F74(a1, a2, 1);
}

void sub_1001940A8(id a1)
{
  qword_10027DCF8 = _CFRuntimeRegisterClass();
}

uint64_t sub_1001940D0(uint64_t a1)
{
  xpc_object_t v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    _Block_release(v2);
    *(void *)(a1 + 24) = 0;
  }
  long long v3 = *(NSObject **)(a1 + 16);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 16) = 0;
  }
  return NETRBInfoLog();
}

void sub_100194128(id a1)
{
  snprintf(__str, 0x2DuLL, "com.apple.framework.netrb.%p", &qword_10027DCF8);
  __str[44] = 0;
  qword_10027DD08 = (uint64_t)dispatch_queue_create(__str, 0);
  if (!qword_10027DD08)
  {
    int v1 = __error();
    strerror(*v1);
    NETRBErrorLog();
  }
}

void sub_1001941C8(id a1)
{
  snprintf(__str, 0x31uLL, "com.apple.framework.netrb.xpc.%p", &qword_10027DCF8);
  __str[48] = 0;
  qword_10027DD18 = (uint64_t)dispatch_queue_create(__str, 0);
  if (!qword_10027DD18)
  {
    int v1 = __error();
    strerror(*v1);
    NETRBErrorLog();
  }
}

void sub_100194268(void *a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, off_10027D3F0);
  if (string) {
    xpc_dictionary_set_string(a1, netrbClientMACAddress, string);
  }
  *(_OWORD *)char v15 = 0uLL;
  uuid = xpc_dictionary_get_uuid(xdict, off_10027D3E8);
  if (uuid)
  {
    *(_OWORD *)char v15 = *(_OWORD *)uuid;
    xpc_dictionary_set_uuid(a1, netrbClientMACUUID, v15);
  }
  int v6 = xpc_dictionary_dup_fd(xdict, off_10027D3F8);
  if (v6 != -1) {
    xpc_dictionary_set_uint64(a1, netrbClientSocketFD, v6);
  }
  uint64_t v7 = xpc_dictionary_get_string(xdict, off_10027D4D0);
  BOOL v8 = xpc_dictionary_get_string(xdict, off_10027D4D8);
  uint64_t v9 = xpc_dictionary_get_string(xdict, off_10027D4E0);
  if (v7) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v9 != 0)
  {
    xpc_object_t v12 = v9;
    xpc_dictionary_set_string(a1, netrbClientInterfaceStartAddress, v7);
    xpc_dictionary_set_string(a1, netrbClientInterfaceEndAddress, v8);
    xpc_dictionary_set_string(a1, netrbClientInterfaceNetworkMask, v12);
  }
  xpc_object_t value = xpc_dictionary_get_value(xdict, off_10027D4C0);
  if (value) {
    xpc_dictionary_set_value(a1, netrbClientInterfaceMTU, value);
  }
  xpc_object_t v14 = xpc_dictionary_get_value(xdict, off_10027D508);
  if (v14) {
    xpc_dictionary_set_value(a1, netrbClientNat66Param, v14);
  }
}

void sub_100194450(uint64_t a1)
{
  uint64_t v7 = 0;
  BOOL v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  if (qword_10027DD00 != -1) {
    dispatch_once(&qword_10027DD00, &stru_100245730);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100194598;
  block[3] = &unk_100245798;
  void block[4] = &v7;
  int v6 = *(_DWORD *)(a1 + 56);
  long long v4 = *(_OWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  dispatch_sync((dispatch_queue_t)qword_10027DD08, block);
  if (!*((_DWORD *)v8 + 6)) {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 24) + 16))();
  }
  xpc_object_t v2 = *(void **)(a1 + 48);
  if (v2) {
    xpc_release(v2);
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
  _Block_object_dispose(&v7, 8);
}

double sub_100194598(uint64_t a1)
{
  int v2 = sub_10018F030(*(unsigned char **)(a1 + 40));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2;
  if (!v2 && *(_DWORD *)(a1 + 64) == 1001)
  {
    if (!strncmp(*(const char **)(a1 + 48), (const char *)(*(void *)(a1 + 40) + 289), 0x100uLL)
      || (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1, *(_DWORD *)(a1 + 64) == 1001))
    {
      if (xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 56), netrbClientNotificationKey) == 5003)
      {
        long long v4 = (_OWORD *)(*(void *)(a1 + 40) + 289);
        double result = 0.0;
        v4[14] = 0u;
        v4[15] = 0u;
        v4[12] = 0u;
        v4[13] = 0u;
        v4[10] = 0u;
        v4[11] = 0u;
        v4[8] = 0u;
        v4[9] = 0u;
        v4[6] = 0u;
        void v4[7] = 0u;
        void v4[4] = 0u;
        v4[5] = 0u;
        v4[2] = 0u;
        void v4[3] = 0u;
        _OWORD *v4 = 0u;
        v4[1] = 0u;
      }
    }
  }
  return result;
}

uint64_t sub_100194654(uint64_t a1)
{
  if (sub_10018F030(*(unsigned char **)(a1 + 40)))
  {
    uint64_t result = NETRBErrorLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 48), off_10027D3E0, (const char *)(*(void *)(a1 + 40) + 32));
    if (*(unsigned char *)(a1 + 56)) {
      uint64_t v3 = 1019;
    }
    else {
      uint64_t v3 = 1018;
    }
    xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 48), off_10027D3D8, v3);
    NETRBInfoLog();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    long long v4 = *(void **)(a1 + 48);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 0x40000000;
    v5[2] = sub_100194774;
    void v5[3] = &unk_1002457E0;
    long long v6 = *(_OWORD *)(a1 + 32);
    return NETRBXPCSetupAndSend(0, v4, (uint64_t)v5);
  }
  return result;
}

uint64_t sub_100194774(uint64_t a1, xpc_object_t object)
{
  if (object
    && xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary
    && (xpc_object_t value = xpc_dictionary_get_value(object, off_10027D438)) != 0
    && (long long v6 = value, xpc_get_type(value) == (xpc_type_t)&_xpc_type_uint64))
  {
    if (xpc_uint64_get_value(v6) == 2001) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  else
  {
    NETRBErrorLog();
  }
  return NETRBInfoLog();
}

uint64_t NETRBLogCreate()
{
  if (qword_10027DD20 != -1) {
    dispatch_once(&qword_10027DD20, &stru_1002458B8);
  }
  if (byte_10027DD28) {
    return 12;
  }
  else {
    return 0;
  }
}

void sub_100194894(id a1)
{
  qword_10027DD30 = (uint64_t)os_log_create("com.apple.MobileInternetSharing", "framework.netrb");
  if (!qword_10027DD30)
  {
    byte_10027DD28 = 1;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100197178();
    }
  }
}

uint64_t NETRBErrorLog()
{
  return os_log_with_args();
}

uint64_t NETRBNoticeLog()
{
  return os_log_with_args();
}

uint64_t NETRBInfoLog()
{
  return os_log_with_args();
}

uint64_t NETRBDebugLog()
{
  return os_log_with_args();
}

uint64_t NETRBXPCEndPointCreate(dispatch_queue_t targetq)
{
  if (qword_10027DD38)
  {
    NETRBDebugLog();
  }
  else
  {
    xpc_connection_t v2 = xpc_connection_create(0, targetq);
    qword_10027DD38 = (uint64_t)v2;
    if (!v2)
    {
      NETRBErrorLog();
      return 0;
    }
    uint64_t v3 = v2;
    NETRBInfoLog();
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = sub_100194AE8;
    handler[3] = &unk_1002458D8;
    handler[4] = v3;
    void handler[5] = targetq;
    xpc_connection_set_event_handler(v3, handler);
    xpc_connection_resume((xpc_connection_t)qword_10027DD38);
  }
  return 1;
}

void sub_100194AE8(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 && (v5 == qword_10027DD38 ? (BOOL v6 = type == (xpc_type_t)&_xpc_type_error) : (BOOL v6 = 0), v6))
  {
    if (object == &_xpc_error_termination_imminent || object == &_xpc_error_connection_invalid) {
      NETRBInfoLog();
    }
  }
  else if (type == (xpc_type_t)&_xpc_type_connection)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    NETRBInfoLog();
    if (qword_10027DD48)
    {
      xpc_connection_cancel((xpc_connection_t)qword_10027DD48);
      xpc_release((xpc_object_t)qword_10027DD48);
      qword_10027DD48 = 0;
    }
    qword_10027DD48 = (uint64_t)xpc_retain(object);
    xpc_connection_set_target_queue((xpc_connection_t)object, v7);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = sub_100195150;
    handler[3] = &unk_100245938;
    handler[4] = object;
    xpc_connection_set_event_handler((xpc_connection_t)object, handler);
    xpc_connection_resume((xpc_connection_t)object);
  }
}

BOOL NETRBXPCCreate(dispatch_queue_t targetq, uint64_t a2)
{
  if (qword_10027DD40)
  {
    NETRBDebugLog();
    return 1;
  }
  xpc_connection_t mach_service = xpc_connection_create_mach_service(off_10027D3D0, targetq, 2uLL);
  qword_10027DD40 = (uint64_t)mach_service;
  if (!mach_service) {
    goto LABEL_7;
  }
  if (xpc_get_type(mach_service) != (xpc_type_t)&_xpc_type_connection)
  {
    if (qword_10027DD40)
    {
      xpc_release((xpc_object_t)qword_10027DD40);
LABEL_8:
      BOOL result = 0;
      qword_10027DD40 = 0;
      return result;
    }
LABEL_7:
    NETRBErrorLog();
    goto LABEL_8;
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000;
  handler[2] = sub_100194D70;
  handler[3] = &unk_100245918;
  handler[4] = qword_10027DD40;
  void handler[5] = a2;
  xpc_connection_set_event_handler((xpc_connection_t)qword_10027DD40, handler);
  NETRBInfoLog();
  xpc_connection_resume((xpc_connection_t)qword_10027DD40);
  return qword_10027DD40 != 0;
}

void sub_100194D70(uint64_t a1, xpc_object_t object)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_100194DF8;
  void v4[3] = &unk_1002458F8;
  uint64_t v3 = *(void *)(a1 + 32);
  void v4[4] = object;
  v4[5] = v3;
  xpc_retain(object);
  dispatch_async(*(dispatch_queue_t *)(a1 + 40), v4);
}

void sub_100194DF8(uint64_t a1)
{
  if (xpc_get_type(*(xpc_object_t *)(a1 + 32)) == (xpc_type_t)&_xpc_type_error)
  {
    if (*(void *)(a1 + 40) == qword_10027DD40)
    {
      xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 32), _xpc_error_key_description);
      NETRBErrorLog();
      NETRBXPCCleanup();
    }
  }
  else
  {
    NETRBErrorLog();
  }
  xpc_connection_t v2 = *(void **)(a1 + 32);

  xpc_release(v2);
}

BOOL NETRBXPCCleanup()
{
  uint64_t v0 = qword_10027DD40;
  if (qword_10027DD40)
  {
    NETRBInfoLog();
    xpc_connection_cancel((xpc_connection_t)qword_10027DD40);
    xpc_release((xpc_object_t)qword_10027DD40);
    qword_10027DD40 = 0;
  }
  return v0 != 0;
}

BOOL NETRBXPCSetupAndSend(NSObject *a1, xpc_object_t xdict, uint64_t a3)
{
  if (xpc_dictionary_get_uint64(xdict, off_10027D3D8) == 1000)
  {
    if (!qword_10027DD38) {
      return 0;
    }
    xpc_dictionary_set_connection(xdict, off_10027D430, (xpc_connection_t)qword_10027DD38);
  }
  if (a1)
  {
    BOOL v6 = qword_10027DD40 != 0;
    if (qword_10027DD40)
    {
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 0x40000000;
      handler[2] = sub_10019528C;
      handler[3] = &unk_100245960;
      handler[4] = a3;
      xpc_connection_send_message_with_reply((xpc_connection_t)qword_10027DD40, xdict, a1, handler);
    }
    else
    {
      NETRBDebugLog();
    }
    return v6;
  }
  if (!qword_10027DD40)
  {
    NETRBDebugLog();
    return 0;
  }
  xpc_object_t v7 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_10027DD40, xdict);
  BOOL v8 = v7;
  if (v7)
  {
    xpc_type_t type = xpc_get_type(v7);
    if (type != (xpc_type_t)&_xpc_type_error)
    {
      xpc_type_t v10 = type;
      if (type == (xpc_type_t)&_xpc_type_dictionary)
      {
        if (xpc_dictionary_get_uint64(v8, off_10027D438) == 2002)
        {
          NETRBErrorLog();
          NETRBXPCCleanup();
        }
        xpc_type_t v10 = (xpc_type_t)&_xpc_type_dictionary;
      }
      else
      {
        NETRBErrorLog();
        NETRBXPCCleanup();
      }
      goto LABEL_18;
    }
    xpc_dictionary_get_string(v8, _xpc_error_key_description);
    NETRBErrorLog();
    NETRBXPCCleanup();
  }
  else
  {
    NETRBXPCCleanup();
    NETRBErrorLog();
  }
  xpc_type_t v10 = (xpc_type_t)&_xpc_type_error;
LABEL_18:
  if (v10 == (xpc_type_t)&_xpc_type_dictionary) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = 0;
  }
  (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v11);
  if (v8) {
    xpc_release(v8);
  }
  return 1;
}

BOOL NETRBEndPointCleanup()
{
  uint64_t v0 = qword_10027DD38;
  if (qword_10027DD38)
  {
    NETRBInfoLog();
    xpc_connection_cancel((xpc_connection_t)qword_10027DD38);
    xpc_release((xpc_object_t)qword_10027DD38);
    qword_10027DD38 = 0;
  }
  return v0 != 0;
}

void sub_100195150(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  uint64_t v5 = xpc_copy_description(object);
  if (v5)
  {
    BOOL v6 = v5;
    NETRBInfoLog();
    free(v6);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    BOOL v8 = v7 == qword_10027DD48;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 && type == (xpc_type_t)&_xpc_type_error)
  {
    xpc_dictionary_get_string(object, _xpc_error_key_description);
    NETRBInfoLog();
    xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
    xpc_release(*(xpc_object_t *)(a1 + 32));
    qword_10027DD48 = 0;
  }
  else
  {
    if (qword_10027DD48) {
      BOOL v10 = type == (xpc_type_t)&_xpc_type_dictionary;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      NETRBClientSendNotification(object);
    }
    else
    {
      NETRBNoticeLog();
    }
  }
}

uint64_t sub_10019528C(uint64_t a1, xpc_object_t object)
{
  if (!object)
  {
    NETRBXPCCleanup();
    NETRBErrorLog();
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    goto LABEL_11;
  }
  xpc_type_t type = xpc_get_type(object);
  if (type != (xpc_type_t)&_xpc_type_dictionary)
  {
    if (type == (xpc_type_t)&_xpc_type_error) {
      xpc_dictionary_get_string(object, _xpc_error_key_description);
    }
    goto LABEL_9;
  }
  if (xpc_dictionary_get_uint64(object, off_10027D438) == 2002)
  {
LABEL_9:
    NETRBErrorLog();
    NETRBXPCCleanup();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_11:

  return v5();
}

uint64_t _MISAttach(void *a1)
{
  if (!a1) {
    return 22;
  }
  if (qword_10027DD50 != -1) {
    dispatch_once(&qword_10027DD50, &stru_1002459E0);
  }
  xpc_connection_t v2 = qword_10027DD58;
  if (!qword_10027DD58) {
    return 12;
  }
  *a1 = 0;
  uint64_t v3 = _NETRBClientCreate(v2, &stru_1002459A0, 0);
  if (!v3) {
    return 12;
  }
  long long v4 = v3;
  uint64_t result = 0;
  *a1 = v4;
  return result;
}

int sub_100195418(id a1, int a2, void *a3)
{
  return 0;
}

uint64_t _MISDetach(uint64_t a1)
{
  uint64_t v1 = 22;
  if (a1)
  {
    if (_NETRBClientDestroy(a1)) {
      return 0;
    }
    else {
      return 22;
    }
  }
  return v1;
}

uint64_t _MISIsServiceAvailable(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v5 = 0;
    int GlobalServiceState = _NETRBClientGetGlobalServiceState(result, (_DWORD *)&v5 + 1, &v5);
    uint64_t result = 0;
    if (GlobalServiceState)
    {
      if (HIDWORD(v5) == 1022) {
        return 0;
      }
      if (HIDWORD(v5) == 1023) {
        return 1;
      }
      uint64_t result = (uint64_t)xpc_dictionary_create(0, 0, 0);
      if (result)
      {
        uint64_t v3 = (void *)result;
        xpc_dictionary_set_uint64((xpc_object_t)result, netrbClientDeviceType, 1uLL);
        int started = _NETRBClientStartService(v1, 0, 201, 301, v3);
        xpc_release(v3);
        if (started)
        {
          uint64_t result = _NETRBClientGetGlobalServiceState(v1, (_DWORD *)&v5 + 1, &v5);
          if (result) {
            return HIDWORD(v5) == 1023;
          }
          return result;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t _MISGetGlobalServiceState(uint64_t a1, _DWORD *a2, int *a3)
{
  int v5 = 0;
  uint64_t v3 = 22;
  if (a1)
  {
    if (!a3) {
      a3 = &v5;
    }
    if (_NETRBClientGetGlobalServiceState(a1, a2, a3)) {
      return 0;
    }
    else {
      return 22;
    }
  }
  return v3;
}

uint64_t _MISGetDynamicStoreKey(uint64_t a1, char *a2)
{
  if (!a1) {
    return 22;
  }
  memset(v4, 0, sizeof(v4));
  if (!_NETRBClientGetDynamicStoreKey(a1, (char *)v4)) {
    return 22;
  }
  snprintf(a2, 0x100uLL, "%s", (const char *)v4);
  return 0;
}

uint64_t _MISSetGlobalServiceState(uint64_t a1, int a2)
{
  uint64_t v2 = 22;
  if (a1)
  {
    if (_NETRBClientSetGlobalServiceState(a1, a2)) {
      return 0;
    }
    else {
      return 22;
    }
  }
  return v2;
}

uint64_t _MISStartServiceDHCP(uint64_t a1, const char *a2, _OWORD *a3)
{
  if (!a1) {
    return 22;
  }
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (!v5) {
    return 12;
  }
  BOOL v6 = v5;
  xpc_dictionary_set_string(v5, netrbClientInterfaceName, a2);
  uint64_t v7 = netrbClientDeviceType;
  size_t v8 = strlen(a2);
  if (!strncmp("ap1", a2, v8)) {
    uint64_t v9 = 3;
  }
  else {
    uint64_t v9 = 0;
  }
  xpc_dictionary_set_uint64(v6, v7, v9);
  int started = _NETRBClientStartService(a1, 0, 201, 302, v6);
  xpc_release(v6);
  if (started) {
    return 0;
  }
  else {
    return 22;
  }
}

uint64_t _MISStartServiceDHCPLocal(uint64_t a1, const char *a2, _OWORD *a3)
{
  if (!a1) {
    return 22;
  }
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (!v5) {
    return 12;
  }
  BOOL v6 = v5;
  xpc_dictionary_set_string(v5, netrbClientInterfaceName, a2);
  uint64_t v7 = netrbClientDeviceType;
  size_t v8 = strlen(a2);
  if (!strncmp("ap1", a2, v8)) {
    uint64_t v9 = 3;
  }
  else {
    uint64_t v9 = 0;
  }
  xpc_dictionary_set_uint64(v6, v7, v9);
  int started = _NETRBClientStartService(a1, 0, 203, 302, v6);
  xpc_release(v6);
  if (started) {
    return 0;
  }
  else {
    return 22;
  }
}

uint64_t _MISStartServiceDHCPCustom(uint64_t a1, const char *a2, unsigned int a3, unsigned int a4, int a5, _OWORD *a6)
{
  if (!a1) {
    return 22;
  }
  a6[14] = 0u;
  a6[15] = 0u;
  a6[12] = 0u;
  a6[13] = 0u;
  a6[10] = 0u;
  a6[11] = 0u;
  a6[8] = 0u;
  a6[9] = 0u;
  a6[6] = 0u;
  a6[7] = 0u;
  a6[4] = 0u;
  a6[5] = 0u;
  a6[2] = 0u;
  a6[3] = 0u;
  *a6 = 0u;
  a6[1] = 0u;
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  if (!v11) {
    return 12;
  }
  xpc_object_t v12 = v11;
  xpc_dictionary_set_string(v11, netrbClientInterfaceName, a2);
  xpc_dictionary_set_uint64(v12, netrbClientInterfaceMTU, a3);
  xpc_dictionary_set_uint64(v12, netrbClientInterfaceInstance, a4);
  uint64_t v13 = netrbClientDeviceType;
  size_t v14 = strlen(a2);
  if (!strncmp("ap1", a2, v14)) {
    uint64_t v15 = 3;
  }
  else {
    uint64_t v15 = 0;
  }
  xpc_dictionary_set_uint64(v12, v13, v15);
  if (a5 == 1) {
    int v16 = 203;
  }
  else {
    int v16 = 201;
  }
  int started = _NETRBClientStartService(a1, 0, v16, 302, v12);
  xpc_release(v12);
  if (started) {
    return 0;
  }
  else {
    return 22;
  }
}

uint64_t _MISStartServiceDHCPWithOptions(uint64_t a1, const char *a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8, _OWORD *a9)
{
  if (!a1) {
    return 22;
  }
  a9[14] = 0u;
  a9[15] = 0u;
  a9[12] = 0u;
  a9[13] = 0u;
  a9[10] = 0u;
  a9[11] = 0u;
  a9[8] = 0u;
  a9[9] = 0u;
  a9[6] = 0u;
  a9[7] = 0u;
  a9[4] = 0u;
  a9[5] = 0u;
  a9[2] = 0u;
  a9[3] = 0u;
  *a9 = 0u;
  a9[1] = 0u;
  xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
  if (!v15) {
    return 12;
  }
  int v16 = v15;
  xpc_dictionary_set_string(v15, netrbClientInterfaceName, a2);
  xpc_dictionary_set_uint64(v16, netrbClientDeviceType, a3);
  xpc_dictionary_set_uint64(v16, netrbClientInterfaceMTU, a4);
  xpc_dictionary_set_uint64(v16, netrbClientInterfaceInstance, a5);
  if (a6 == 1) {
    int v17 = 203;
  }
  else {
    int v17 = 201;
  }
  int started = _NETRBClientStartService(a1, 0, v17, 302, v16);
  xpc_release(v16);
  if (started) {
    return 0;
  }
  else {
    return 22;
  }
}

uint64_t _MISStopService(uint64_t a1)
{
  uint64_t v1 = 22;
  if (a1)
  {
    if (_NETRBClientStopService(a1)) {
      return 0;
    }
    else {
      return 22;
    }
  }
  return v1;
}

uint64_t _MISSetFixtureForwardedPorts(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (!a1) {
    return 22;
  }
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (!v6) {
    return 12;
  }
  uint64_t v7 = v6;
  xpc_dictionary_set_uint64(v6, netrbClientForwardedLowPort, a2);
  xpc_dictionary_set_uint64(v7, netrbClientForwardedHighPort, a3);
  int v8 = _NETRBClientSetFixtureForwardedPorts(a1, v7);
  xpc_release(v7);
  if (v8) {
    return 0;
  }
  else {
    return 22;
  }
}

uint64_t _MISGetFixtureForwardedPorts(void *a1, _WORD *a2, _WORD *a3)
{
  if (!a1) {
    return 22;
  }
  xpc_object_t v5 = _NETRBClientCopyFixtureForwardedPorts(a1);
  if (!v5) {
    return 22;
  }
  xpc_object_t v6 = v5;
  if (xpc_get_type(v5) != (xpc_type_t)&_xpc_type_dictionary) {
    return 22;
  }
  *a2 = xpc_dictionary_get_uint64(v6, netrbClientForwardedLowPort);
  __int16 uint64 = xpc_dictionary_get_uint64(v6, netrbClientForwardedHighPort);
  uint64_t result = 0;
  *a3 = uint64;
  return result;
}

uint64_t _MISIsAllowedMoreHost(uint64_t a1)
{
  if (a1) {
    return _NETRBClientIsAllowedMoreHost(a1);
  }
  else {
    return 22;
  }
}

uint64_t _MISAddHost(uint64_t a1, int a2)
{
  uint64_t v2 = 22;
  if (a1)
  {
    if ((a2 - 1) < 5) {
      unsigned int v3 = a2 + 1;
    }
    else {
      unsigned int v3 = 0;
    }
    if (_NETRBClientAddHost(a1, v3)) {
      return 0;
    }
    else {
      return 22;
    }
  }
  return v2;
}

uint64_t _MISRemoveHost(uint64_t a1, int a2)
{
  uint64_t v2 = 22;
  if (a1)
  {
    if ((a2 - 1) < 5) {
      unsigned int v3 = a2 + 1;
    }
    else {
      unsigned int v3 = 0;
    }
    if (_NETRBClientRemoveHost(a1, v3)) {
      return 0;
    }
    else {
      return 22;
    }
  }
  return v2;
}

uint64_t _MISGetHostCount(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = 22;
  if (a1)
  {
    if (_NETRBClientGetHostCount(a1, a2, a3)) {
      return 0;
    }
    else {
      return 22;
    }
  }
  return v3;
}

uint64_t _MISSetHostCount(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = 22;
  if (a1)
  {
    if ((a2 - 1) < 5) {
      int v4 = a2 + 1;
    }
    else {
      int v4 = 0;
    }
    if (_NETRBClientSetHostCount(a1, v4, a3)) {
      return 0;
    }
    else {
      return 22;
    }
  }
  return v3;
}

uint64_t _MISGetExt(uint64_t a1, char *a2)
{
  if (!a1) {
    return 22;
  }
  v4[0] = 0;
  v4[1] = 0;
  if (!_NETRBClientGetExtName(a1, (uint64_t)v4)) {
    return 22;
  }
  snprintf(a2, 0x10uLL, "%s", (const char *)v4);
  return 0;
}

void sub_100195E3C(id a1)
{
  snprintf(__str, 0x22uLL, "com.apple.misd.%p", &qword_10027DD58);
  __str[33] = 0;
  qword_10027DD58 = (uint64_t)dispatch_queue_create(__str, 0);
}

void sub_100195EC4()
{
}

void sub_100195EF0()
{
  __assert_rtn("__WiFiPolicyRelease", "WiFiPolicy.c", 200, "CFGetTypeID(object) == WiFiPolicyGetTypeID()");
}

void sub_100195F1C()
{
  __assert_rtn("__WiFiLQAMgrAvgValidPerCoreRssiSamples", "WiFiLinkQualityManager.c", 4123, "validCore0RssiCount <= arrayCount");
}

void sub_100195F48()
{
  __assert_rtn("__WiFiLQAMgrAvgValidPerCoreRssiSamples", "WiFiLinkQualityManager.c", 4124, "validCore1RssiCount <= arrayCount");
}

void sub_100195F74()
{
}

void sub_100195FA0()
{
  __assert_rtn("__WiFiLQAMgrRelease", "WiFiLinkQualityManager.c", 1235, "CFGetTypeID(object) == WiFiLQAMgrGetTypeID()");
}

void sub_100195FCC()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "Fatal chip watchdog with missing reason or subreason", v0, 2u);
}

void sub_100196014()
{
  v0[0] = 136315394;
  sub_10005B0F0();
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%s: CFPropertyListCreateWithData returned with error %@", (uint8_t *)v0, 0x16u);
}

void sub_1001960A0()
{
  int v0 = 136315138;
  uint64_t v1 = "_WiFiCopyUnserialized";
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%s: Invalid buffer/buffersize.", (uint8_t *)&v0, 0xCu);
}

void sub_100196128()
{
  v0[0] = 136315394;
  sub_10005B0F0();
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%s: CFPropertyListWrite returned with error %@", (uint8_t *)v0, 0x16u);
}

void sub_1001961B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100196230(uint64_t a1, char a2, char a3)
{
  uint64_t v3 = "NO";
  xpc_object_t v6 = "-[WiFiFindAndJoinRequest _canPerformRetry:]";
  __int16 v7 = 2112;
  if (a2) {
    int v4 = "YES";
  }
  else {
    int v4 = "NO";
  }
  int v5 = 136315906;
  uint64_t v8 = a1;
  __int16 v9 = 2080;
  BOOL v10 = v4;
  if ((a3 & 1) == 0) {
    uint64_t v3 = "YES";
  }
  __int16 v11 = 2080;
  xpc_object_t v12 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%s: last error (%@), retry expired=%s exceeded=%s", (uint8_t *)&v5, 0x2Au);
}

void sub_1001962F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100196374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001963F0(void *a1, double a2)
{
  int v4 = [a1 scanFailureList];
  unsigned int v5 = [v4 count];
  xpc_object_t v6 = [a1 joinFailureList];
  int v7 = 136315650;
  uint64_t v8 = "-[WiFiFindAndJoinRequest _checkAndRequestChipResetIfNeeded]";
  __int16 v9 = 1024;
  unsigned int v10 = [v6 count] + v5;
  __int16 v11 = 1024;
  int v12 = (int)a2;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%s: encountered multiple (%d) failures, performing chip reset before retrying (remaining time %ds)...", (uint8_t *)&v7, 0x18u);
}

void sub_1001964E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100196560(uint8_t *buf, void *a2)
{
  *(_DWORD *)buf = 136315138;
  *a2 = "-[WiFiFindAndJoinRequest _runFindAndJoinOnInterface:outError:]";
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%s: no match in scan results, performing scan retry...", buf, 0xCu);
}

void sub_1001965B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100196630(uint8_t *buf, void *a2)
{
  *(_DWORD *)buf = 136315138;
  *a2 = "-[WiFiFindAndJoinRequest _runFindAndJoinOnInterface:outError:]";
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%s: no join candidate, performing scan retry...", buf, 0xCu);
}

void sub_100196684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100196700(void *a1)
{
  int v1 = 136315394;
  uint64_t v2 = "-[WiFiFindAndJoinRequest _runFindAndJoinOnInterface:outError:]";
  __int16 v3 = 1024;
  unsigned int v4 = [a1 channelBand];
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%s: invalid band specified (%d), forcing to 2.4GHz", (uint8_t *)&v1, 0x12u);
}

void sub_100196798()
{
  *(_WORD *)int v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "_set_user_dir_suffix failed!\n", v0, 2u);
}

void sub_1001967E0(const void *a1, char a2, uint64_t a3)
{
  unsigned int v5 = sub_10001A43C(a1);
  xpc_object_t v6 = "enabled";
  int v7 = 136315906;
  uint64_t v8 = "WiFiNetworkSetStateWithReason";
  unsigned int v10 = v5;
  __int16 v9 = 2112;
  __int16 v11 = 2080;
  if (!a2) {
    xpc_object_t v6 = "disabled";
  }
  int v12 = v6;
  __int16 v13 = 2112;
  uint64_t v14 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%s: Network '%@' %s for auto-join due to %@", (uint8_t *)&v7, 0x2Au);
}

void sub_1001968B4()
{
}

void sub_10019691C()
{
}

void sub_100196984()
{
}

void sub_1001969EC(void *a1)
{
}

void sub_100196A54()
{
}

void sub_100196ABC()
{
}

void sub_100196B24()
{
}

void sub_100196B8C(void *a1)
{
}

void sub_100196BF4()
{
}

void sub_100196C5C(int a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    unsigned int v4 = "ENABLED";
  }
  else {
    unsigned int v4 = "DISABLED";
  }
  int v5 = 136315650;
  xpc_object_t v6 = v4;
  __int16 v7 = 2112;
  uint64_t v8 = sub_100016E18(a2);
  __int16 v9 = 2112;
  uint64_t v10 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Auto join %s by \"%@\" for %@", (uint8_t *)&v5, 0x20u);
}

void sub_100196D1C()
{
  __assert_rtn("__WiFiDeviceManagerRegister", "WiFiDeviceManager.c", 2523, "__kWiFiDeviceManagerTypeID != _kCFRuntimeNotATypeID");
}

void sub_100196D48()
{
  *(_WORD *)int v0 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "Will request to chip reset with no triggerReason", v0, 2u);
}

void sub_100196D90()
{
}

void sub_100196DF8(void *a1)
{
}

void sub_100196E60(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  __int16 v3 = +[NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"WiFiSmartCoverStateObserver.h" lineNumber:16 description:@"%s", *a1];

  __break(1u);
}

void sub_100196EE0()
{
}

void sub_100196F0C()
{
  __assert_rtn("__WiFiCacheEntryRelease", "WiFiCacheEntry.c", 135, "CFGetTypeID(object) == WiFiCacheEntryGetTypeID()");
}

void sub_100196F38()
{
}

void sub_100196F64()
{
  __assert_rtn("__WiFiVirtualInterfaceRelease", "WiFiVirtualInterface.c", 342, "CFGetTypeID(virtIntf) == WiFiVirtualInterfaceGetTypeID()");
}

void sub_100196F90()
{
}

void sub_100196FBC()
{
  __assert_rtn("__WiFiATJMgrRelease", "WiFiAskToJoinManager.c", 176, "CFGetTypeID(object) == WiFiATJMgrGetTypeID()");
}

void sub_100196FE8()
{
}

void sub_100197014()
{
  __assert_rtn("__WiFiAudioRouteRelease", "WiFiAudioRoute.c", 145, "CFGetTypeID(object) == WiFiAudioRouteGetTypeID()");
}

void sub_100197040()
{
}

void sub_1001970A8(void *a1)
{
}

void sub_100197110()
{
}

void sub_100197178()
{
  *(_WORD *)int v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Couldn't create os log object", v0, 2u);
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

uint64_t Apple80211Associate()
{
  return _Apple80211Associate();
}

uint64_t Apple80211AssociateAsync()
{
  return _Apple80211AssociateAsync();
}

uint64_t Apple80211BindToInterfaceWithParams()
{
  return _Apple80211BindToInterfaceWithParams();
}

uint64_t Apple80211Close()
{
  return _Apple80211Close();
}

uint64_t Apple80211CopyAwdlPreferredChannels()
{
  return _Apple80211CopyAwdlPreferredChannels();
}

uint64_t Apple80211CopyCurrentNetwork()
{
  return _Apple80211CopyCurrentNetwork();
}

uint64_t Apple80211CopyLeakyAPStatus()
{
  return _Apple80211CopyLeakyAPStatus();
}

uint64_t Apple80211CopyRangingCapabilities()
{
  return _Apple80211CopyRangingCapabilities();
}

uint64_t Apple80211CopyValue()
{
  return _Apple80211CopyValue();
}

uint64_t Apple80211Disassociate()
{
  return _Apple80211Disassociate();
}

uint64_t Apple80211DisassociateExt()
{
  return _Apple80211DisassociateExt();
}

uint64_t Apple80211EventMonitoringHalt()
{
  return _Apple80211EventMonitoringHalt();
}

uint64_t Apple80211EventMonitoringInit2()
{
  return _Apple80211EventMonitoringInit2();
}

uint64_t Apple80211GasRequest()
{
  return _Apple80211GasRequest();
}

uint64_t Apple80211Get()
{
  return _Apple80211Get();
}

uint64_t Apple80211GetInfoCopy()
{
  return _Apple80211GetInfoCopy();
}

uint64_t Apple80211GetPowerState()
{
  return _Apple80211GetPowerState();
}

uint64_t Apple80211GetRangingPhyErrorString()
{
  return _Apple80211GetRangingPhyErrorString();
}

uint64_t Apple80211Open()
{
  return _Apple80211Open();
}

uint64_t Apple80211ParseWPAPassword()
{
  return _Apple80211ParseWPAPassword();
}

uint64_t Apple80211RangeAsync()
{
  return _Apple80211RangeAsync();
}

uint64_t Apple80211RangingStopAsync()
{
  return _Apple80211RangingStopAsync();
}

uint64_t Apple80211RawGet()
{
  return _Apple80211RawGet();
}

uint64_t Apple80211ReturnToString()
{
  return _Apple80211ReturnToString();
}

uint64_t Apple80211ScanAsync()
{
  return _Apple80211ScanAsync();
}

uint64_t Apple80211Set()
{
  return _Apple80211Set();
}

uint64_t Apple80211SetPowerState()
{
  return _Apple80211SetPowerState();
}

uint64_t Apple80211SetProperty()
{
  return _Apple80211SetProperty();
}

uint64_t Apple80211StartMonitoringEvent()
{
  return _Apple80211StartMonitoringEvent();
}

uint64_t BTLocalDeviceAddCallbacks()
{
  return _BTLocalDeviceAddCallbacks();
}

uint64_t BTLocalDeviceGetDefault()
{
  return _BTLocalDeviceGetDefault();
}

uint64_t BTLocalDeviceGetPower()
{
  return _BTLocalDeviceGetPower();
}

uint64_t BTServiceAddCallbacksWithFilter()
{
  return _BTServiceAddCallbacksWithFilter();
}

uint64_t BTSessionAttachWithQueue()
{
  return _BTSessionAttachWithQueue();
}

uint64_t BYSetupAssistantHasCompletedInitialRun()
{
  return _BYSetupAssistantHasCompletedInitialRun();
}

uint64_t BYSetupAssistantNeedsToRun()
{
  return _BYSetupAssistantNeedsToRun();
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return _CC_SHA256_Final(md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return _CC_SHA256_Init(c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return _CC_SHA256_Update(c, data, len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return _CFAllocatorAllocate(allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return _CFAllocatorGetDefault();
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

CFIndex CFArrayBSearchValues(CFArrayRef theArray, CFRange range, const void *value, CFComparatorFunction comparator, void *context)
{
  return _CFArrayBSearchValues(theArray, range, value, comparator, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return _CFArrayContainsValue(theArray, range, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreate(allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return _CFArrayCreateCopy(allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreateMutable(allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return _CFArrayCreateMutableCopy(allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return _CFArrayGetFirstIndexOfValue(theArray, range, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return _CFArrayGetTypeID();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return _CFAutorelease(arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle)
{
  return _CFBundleCopyBundleLocalizations(bundle);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return _CFBundleCopyBundleURL(bundle);
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return _CFBundleCopyLocalizationsForPreferences(locArray, prefArray);
}

uint64_t CFBundleCopyLocalizedStringForLocalization()
{
  return _CFBundleCopyLocalizedStringForLocalization();
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return _CFBundleCreate(allocator, bundleURL);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return _CFBundleGetBundleWithIdentifier(bundleID);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return _CFDataCreate(allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return _CFDataCreateCopy(allocator, theData);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return _CFDataCreateMutable(allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return _CFDataCreateWithBytesNoCopy(allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return _CFDataGetBytePtr(theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return _CFDataGetLength(theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return _CFDataGetMutableBytePtr(theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return _CFDataGetTypeID();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context)
{
  return _CFDateCompare(theDate, otherDate, context);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return _CFDateCreate(allocator, at);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return _CFDateFormatterCreate(allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at)
{
  return _CFDateFormatterCreateStringWithAbsoluteTime(allocator, formatter, at);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return _CFDateFormatterCreateStringWithDate(allocator, formatter, date);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  return _CFDateGetAbsoluteTime(theDate);
}

CFTimeInterval CFDateGetTimeIntervalSinceDate(CFDateRef theDate, CFDateRef otherDate)
{
  return _CFDateGetTimeIntervalSinceDate(theDate, otherDate);
}

CFTypeID CFDateGetTypeID(void)
{
  return _CFDateGetTypeID();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryContainsKey(theDict, key);
}

Boolean CFDictionaryContainsValue(CFDictionaryRef theDict, const void *value)
{
  return _CFDictionaryContainsValue(theDict, value);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreate(allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateCopy(allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateMutableCopy(allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return _CFDictionaryGetCount(theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return _CFDictionaryGetTypeID();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return _CFDictionaryGetValueIfPresent(theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return _CFHash(cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return _CFLocaleCopyCurrent();
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return _CFLocaleCreate(allocator, localeIdentifier);
}

CFMachPortRef CFMachPortCreate(CFAllocatorRef allocator, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return _CFMachPortCreate(allocator, callout, context, shouldFreeInfo);
}

CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order)
{
  return _CFMachPortCreateRunLoopSource(allocator, port, order);
}

void CFMachPortInvalidate(CFMachPortRef port)
{
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return _CFMakeCollectable(cf);
}

uint64_t CFNetDiagnosticPingWithOptions()
{
  return _CFNetDiagnosticPingWithOptions();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

CFNotificationCenterRef CFNotificationCenterGetDistributedCenter(void)
{
  return _CFNotificationCenterGetDistributedCenter();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return _CFNotificationCenterGetLocalCenter();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return _CFNumberCompare(number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return _CFNumberCreate(allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return _CFNumberGetTypeID();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return _CFPreferencesAppSynchronize(applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesCopyValue(key, applicationID, userName, hostName);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesSynchronize(applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return _CFPropertyListCreateWithData(allocator, data, options, format, error);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return _CFPropertyListCreateWithStream(allocator, stream, streamLength, options, format, error);
}

CFIndex CFPropertyListWrite(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return _CFPropertyListWrite(propertyList, stream, format, options, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return _CFReadStreamCreateWithFile(alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return _CFReadStreamOpen(stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return _CFRunLoopGetCurrent();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return _CFRunLoopGetMain();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return _CFSetContainsValue(theSet, value);
}

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
{
  return _CFSetCreate(allocator, values, numValues, callBacks);
}

CFSetRef CFSetCreateCopy(CFAllocatorRef allocator, CFSetRef theSet)
{
  return _CFSetCreateCopy(allocator, theSet);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return _CFSetCreateMutable(allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return _CFSetGetCount(theSet);
}

CFTypeID CFSetGetTypeID(void)
{
  return _CFSetGetTypeID();
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return _CFSetGetValue(theSet, value);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return _CFStringCompare(theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return _CFStringCreateArrayBySeparatingStrings(alloc, theString, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return _CFStringCreateCopy(alloc, theString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return _CFStringCreateExternalRepresentation(alloc, theString, encoding, lossByte);
}

CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return _CFStringCreateFromExternalRepresentation(alloc, data, encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return _CFStringCreateMutable(alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return _CFStringCreateMutableCopy(alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return _CFStringCreateWithBytes(alloc, bytes, numBytes, encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return _CFStringCreateWithFormat(alloc, formatOptions, format);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFRange v5 = _CFStringFind(theString, stringToFind, compareOptions);
  CFIndex length = v5.length;
  CFIndex location = v5.location;
  result.CFIndex length = length;
  result.CFIndex location = location;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return _CFStringFindAndReplace(theString, stringToFind, replacementString, rangeToSearch, compareOptions);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return _CFStringGetBytes(theString, range, encoding, lossByte, isExternalRepresentation, buffer, maxBufLen, usedBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return _CFStringGetCString(theString, buffer, bufferSize, encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return _CFStringGetCStringPtr(theString, encoding);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return _CFStringGetIntValue(str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return _CFStringGetSystemEncoding();
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return _CFStringHasPrefix(theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return _CFStringHasSuffix(theString, suffix);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return _CFURLCreateWithFileSystemPath(allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return _CFURLCreateWithString(allocator, URLString, baseURL);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return _CFUUIDCreate(alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return _CFUUIDCreateString(alloc, uuid);
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return _CFUserNotificationCancel(userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order)
{
  return _CFUserNotificationCreateRunLoopSource(allocator, userNotification, callout, order);
}

SInt32 CFUserNotificationDisplayAlert(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle, CFStringRef alternateButtonTitle, CFStringRef otherButtonTitle, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationDisplayAlert(timeout, flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, alternateButtonTitle, otherButtonTitle, responseFlags);
}

CFDictionaryRef CFUserNotificationGetResponseDictionary(CFUserNotificationRef userNotification)
{
  return _CFUserNotificationGetResponseDictionary(userNotification);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
}

CFTypeRef CFWriteStreamCopyProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName)
{
  return _CFWriteStreamCopyProperty(stream, propertyName);
}

CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc, CFAllocatorRef bufferAllocator)
{
  return _CFWriteStreamCreateWithAllocatedBuffers(alloc, bufferAllocator);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return _CFWriteStreamOpen(stream);
}

CLLocationCoordinate2D CLLocationCoordinate2DMake(CLLocationDegrees latitude, CLLocationDegrees longitude)
{
  CLLocationCoordinate2D v4 = _CLLocationCoordinate2DMake(latitude, longitude);
  double v3 = v4.longitude;
  double v2 = v4.latitude;
  result.longitude = v3;
  result.latitude = v2;
  return result;
}

uint64_t CNForgetSSID()
{
  return _CNForgetSSID();
}

uint64_t CWFBootArgs()
{
  return _CWFBootArgs();
}

uint64_t CWFColocatedNetworksMatchingScanResult()
{
  return _CWFColocatedNetworksMatchingScanResult();
}

uint64_t CWFConvertPropertyListToJSON()
{
  return _CWFConvertPropertyListToJSON();
}

uint64_t CWFCorrectEthernetAddressString()
{
  return _CWFCorrectEthernetAddressString();
}

uint64_t CWFFilteredANQPResults()
{
  return _CWFFilteredANQPResults();
}

uint64_t CWFFilteredScanResults()
{
  return _CWFFilteredScanResults();
}

uint64_t CWFGetOSLog()
{
  return _CWFGetOSLog();
}

uint64_t CWFIsAutoJoinRetryTrigger()
{
  return _CWFIsAutoJoinRetryTrigger();
}

uint64_t CWFKnownNetworkAssociatedDuringAWDLRealTimeMode()
{
  return _CWFKnownNetworkAssociatedDuringAWDLRealTimeMode();
}

uint64_t CWFKnownNetworksSupportingSeamlessSSIDTransitionForScanResult()
{
  return _CWFKnownNetworksSupportingSeamlessSSIDTransitionForScanResult();
}

uint64_t CWFScanResultHas6GHzOnlyBSS()
{
  return _CWFScanResultHas6GHzOnlyBSS();
}

uint64_t CWFStringFromDenyListAddReason()
{
  return _CWFStringFromDenyListAddReason();
}

CFDateRef DHCPInfoGetLeaseExpirationTime(CFDictionaryRef info)
{
  return _DHCPInfoGetLeaseExpirationTime(info);
}

CFDateRef DHCPInfoGetLeaseStartTime(CFDictionaryRef info)
{
  return _DHCPInfoGetLeaseStartTime(info);
}

uint64_t DHCPSDHCPLeaseListCreate()
{
  return _DHCPSDHCPLeaseListCreate();
}

uint64_t DiagnosticLogSubmissionEnabled()
{
  return _DiagnosticLogSubmissionEnabled();
}

uint64_t EAPClientConfigurationCopyShareable()
{
  return _EAPClientConfigurationCopyShareable();
}

uint64_t EAPOLControlCopyStateAndStatus()
{
  return _EAPOLControlCopyStateAndStatus();
}

uint64_t EAPOLControlKeyCopyInterface()
{
  return _EAPOLControlKeyCopyInterface();
}

uint64_t EAPOLControlKeyCreate()
{
  return _EAPOLControlKeyCreate();
}

uint64_t EAPOLControlProvideUserInput()
{
  return _EAPOLControlProvideUserInput();
}

uint64_t EAPOLControlStart()
{
  return _EAPOLControlStart();
}

uint64_t EAPOLControlStop()
{
  return _EAPOLControlStop();
}

uint64_t EAPTLSCopyTrustExceptionBindings()
{
  return _EAPTLSCopyTrustExceptionBindings();
}

uint64_t EAPTLSRemoveTrustExceptionsBindings()
{
  return _EAPTLSRemoveTrustExceptionsBindings();
}

uint64_t EAPTLSSetTrustExceptionBindings()
{
  return _EAPTLSSetTrustExceptionBindings();
}

uint64_t IDSCopyIDForDevice()
{
  return _IDSCopyIDForDevice();
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return _IOAllowPowerChange(kernelPort, notificationID);
}

IOReturn IODeregisterForSystemPower(io_object_t *notifier)
{
  return _IODeregisterForSystemPower(notifier);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return _IOIteratorNext(iterator);
}

kern_return_t IOMasterPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return _IOMasterPort(bootstrapPort, mainPort);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return _IONotificationPortCreate(mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

IOReturn IOPMAssertionCreateWithName(CFStringRef AssertionType, IOPMAssertionLevel AssertionLevel, CFStringRef AssertionName, IOPMAssertionID *AssertionID)
{
  return _IOPMAssertionCreateWithName(AssertionType, AssertionLevel, AssertionName, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return _IOPMAssertionRelease(AssertionID);
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return _IORegisterForSystemPower(refcon, thePortRef, callback, notifier);
}

kern_return_t IORegistryEntryCreateCFProperties(io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntryCreateCFProperties(entry, properties, allocator, options);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntryCreateCFProperty(entry, key, allocator, options);
}

kern_return_t IORegistryEntryGetName(io_registry_entry_t entry, io_name_t name)
{
  return _IORegistryEntryGetName(entry, name);
}

kern_return_t IORegistryEntryGetParentEntry(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t *parent)
{
  return _IORegistryEntryGetParentEntry(entry, plane, parent);
}

kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID)
{
  return _IORegistryEntryGetRegistryEntryID(entry, entryID);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntrySearchCFProperty(entry, plane, key, allocator, options);
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return _IOServiceAddInterestNotification(notifyPort, service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return _IOServiceAddMatchingNotification(notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return _IOServiceNameMatching(name);
}

uint64_t IPConfigurationForgetNetwork()
{
  return _IPConfigurationForgetNetwork();
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MGCopyAnswerWithError()
{
  return _MGCopyAnswerWithError();
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

uint64_t MGGetProductType()
{
  return _MGGetProductType();
}

uint64_t MGGetSInt32Answer()
{
  return _MGGetSInt32Answer();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

uint64_t MKBUserUnlockedSinceBoot()
{
  return _MKBUserUnlockedSinceBoot();
}

uint64_t MRMediaRemoteCopyPlaybackStateDescription()
{
  return _MRMediaRemoteCopyPlaybackStateDescription();
}

uint64_t MRMediaRemoteGetNowPlayingApplicationPlaybackState()
{
  return _MRMediaRemoteGetNowPlayingApplicationPlaybackState();
}

uint64_t MRMediaRemoteRegisterForNowPlayingNotifications()
{
  return _MRMediaRemoteRegisterForNowPlayingNotifications();
}

uint64_t MRMediaRemoteUnregisterForNowPlayingNotifications()
{
  return _MRMediaRemoteUnregisterForNowPlayingNotifications();
}

Class NSClassFromString(NSString *aClassName)
{
  return _NSClassFromString(aClassName);
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

uint64_t RDUpdateCountryCodeFromWiFiAPs()
{
  return _RDUpdateCountryCodeFromWiFiAPs();
}

CFDictionaryRef SCDynamicStoreCopyDHCPInfo(SCDynamicStoreRef store, CFStringRef serviceID)
{
  return _SCDynamicStoreCopyDHCPInfo(store, serviceID);
}

CFPropertyListRef SCDynamicStoreCopyValue(SCDynamicStoreRef store, CFStringRef key)
{
  return _SCDynamicStoreCopyValue(store, key);
}

SCDynamicStoreRef SCDynamicStoreCreate(CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return _SCDynamicStoreCreate(allocator, name, callout, context);
}

CFStringRef SCDynamicStoreKeyCreate(CFAllocatorRef allocator, CFStringRef fmt, ...)
{
  return _SCDynamicStoreKeyCreate(allocator, fmt);
}

CFStringRef SCDynamicStoreKeyCreateNetworkGlobalEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef entity)
{
  return _SCDynamicStoreKeyCreateNetworkGlobalEntity(allocator, domain, entity);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterface(CFAllocatorRef allocator, CFStringRef domain)
{
  return _SCDynamicStoreKeyCreateNetworkInterface(allocator, domain);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterfaceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef ifname, CFStringRef entity)
{
  return _SCDynamicStoreKeyCreateNetworkInterfaceEntity(allocator, domain, ifname, entity);
}

CFStringRef SCDynamicStoreKeyCreateNetworkServiceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef serviceID, CFStringRef entity)
{
  return _SCDynamicStoreKeyCreateNetworkServiceEntity(allocator, domain, serviceID, entity);
}

Boolean SCDynamicStoreRemoveValue(SCDynamicStoreRef store, CFStringRef key)
{
  return _SCDynamicStoreRemoveValue(store, key);
}

uint64_t SCDynamicStoreSetDisconnectCallBack()
{
  return _SCDynamicStoreSetDisconnectCallBack();
}

Boolean SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef store, dispatch_queue_t queue)
{
  return _SCDynamicStoreSetDispatchQueue(store, queue);
}

Boolean SCDynamicStoreSetNotificationKeys(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return _SCDynamicStoreSetNotificationKeys(store, keys, patterns);
}

Boolean SCDynamicStoreSetValue(SCDynamicStoreRef store, CFStringRef key, CFPropertyListRef value)
{
  return _SCDynamicStoreSetValue(store, key, value);
}

int SCError(void)
{
  return _SCError();
}

const char *__cdecl SCErrorString(int status)
{
  return _SCErrorString(status);
}

CFArrayRef SCNetworkInterfaceCopyAll(void)
{
  return _SCNetworkInterfaceCopyAll();
}

CFStringRef SCNetworkInterfaceGetBSDName(SCNetworkInterfaceRef interface)
{
  return _SCNetworkInterfaceGetBSDName(interface);
}

SCNetworkInterfaceRef SCNetworkInterfaceGetInterface(SCNetworkInterfaceRef interface)
{
  return _SCNetworkInterfaceGetInterface(interface);
}

CFStringRef SCNetworkInterfaceGetInterfaceType(SCNetworkInterfaceRef interface)
{
  return _SCNetworkInterfaceGetInterfaceType(interface);
}

CFStringRef SCNetworkInterfaceGetLocalizedDisplayName(SCNetworkInterfaceRef interface)
{
  return _SCNetworkInterfaceGetLocalizedDisplayName(interface);
}

uint64_t SCNetworkInterfaceSetPrimaryRank()
{
  return _SCNetworkInterfaceSetPrimaryRank();
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithAddress(CFAllocatorRef allocator, const sockaddr *address)
{
  return _SCNetworkReachabilityCreateWithAddress(allocator, address);
}

Boolean SCNetworkReachabilityGetFlags(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags *flags)
{
  return _SCNetworkReachabilityGetFlags(target, flags);
}

SCNetworkServiceRef SCNetworkServiceCreate(SCPreferencesRef prefs, SCNetworkInterfaceRef interface)
{
  return _SCNetworkServiceCreate(prefs, interface);
}

Boolean SCNetworkServiceEstablishDefaultConfiguration(SCNetworkServiceRef service)
{
  return _SCNetworkServiceEstablishDefaultConfiguration(service);
}

Boolean SCNetworkServiceGetEnabled(SCNetworkServiceRef service)
{
  return _SCNetworkServiceGetEnabled(service);
}

SCNetworkInterfaceRef SCNetworkServiceGetInterface(SCNetworkServiceRef service)
{
  return _SCNetworkServiceGetInterface(service);
}

CFStringRef SCNetworkServiceGetName(SCNetworkServiceRef service)
{
  return _SCNetworkServiceGetName(service);
}

CFStringRef SCNetworkServiceGetServiceID(SCNetworkServiceRef service)
{
  return _SCNetworkServiceGetServiceID(service);
}

Boolean SCNetworkServiceRemove(SCNetworkServiceRef service)
{
  return _SCNetworkServiceRemove(service);
}

Boolean SCNetworkServiceSetName(SCNetworkServiceRef service, CFStringRef name)
{
  return _SCNetworkServiceSetName(service, name);
}

Boolean SCNetworkSetAddService(SCNetworkSetRef set, SCNetworkServiceRef service)
{
  return _SCNetworkSetAddService(set, service);
}

Boolean SCNetworkSetContainsInterface(SCNetworkSetRef set, SCNetworkInterfaceRef interface)
{
  return _SCNetworkSetContainsInterface(set, interface);
}

CFArrayRef SCNetworkSetCopyAll(SCPreferencesRef prefs)
{
  return _SCNetworkSetCopyAll(prefs);
}

SCNetworkSetRef SCNetworkSetCopyCurrent(SCPreferencesRef prefs)
{
  return _SCNetworkSetCopyCurrent(prefs);
}

CFArrayRef SCNetworkSetCopyServices(SCNetworkSetRef set)
{
  return _SCNetworkSetCopyServices(set);
}

uint64_t SCNetworkSetEstablishDefaultInterfaceConfiguration()
{
  return _SCNetworkSetEstablishDefaultInterfaceConfiguration();
}

CFStringRef SCNetworkSetGetName(SCNetworkSetRef set)
{
  return _SCNetworkSetGetName(set);
}

CFArrayRef SCNetworkSetGetServiceOrder(SCNetworkSetRef set)
{
  return _SCNetworkSetGetServiceOrder(set);
}

CFStringRef SCNetworkSetGetSetID(SCNetworkSetRef set)
{
  return _SCNetworkSetGetSetID(set);
}

Boolean SCNetworkSetRemove(SCNetworkSetRef set)
{
  return _SCNetworkSetRemove(set);
}

Boolean SCNetworkSetSetCurrent(SCNetworkSetRef set)
{
  return _SCNetworkSetSetCurrent(set);
}

Boolean SCPreferencesApplyChanges(SCPreferencesRef prefs)
{
  return _SCPreferencesApplyChanges(prefs);
}

Boolean SCPreferencesCommitChanges(SCPreferencesRef prefs)
{
  return _SCPreferencesCommitChanges(prefs);
}

CFArrayRef SCPreferencesCopyKeyList(SCPreferencesRef prefs)
{
  return _SCPreferencesCopyKeyList(prefs);
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  return _SCPreferencesCreate(allocator, name, prefsID);
}

uint64_t SCPreferencesCreateWithOptions()
{
  return _SCPreferencesCreateWithOptions();
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  return _SCPreferencesGetValue(prefs, key);
}

Boolean SCPreferencesLock(SCPreferencesRef prefs, Boolean wait)
{
  return _SCPreferencesLock(prefs, wait);
}

Boolean SCPreferencesRemoveValue(SCPreferencesRef prefs, CFStringRef key)
{
  return _SCPreferencesRemoveValue(prefs, key);
}

Boolean SCPreferencesSetCallback(SCPreferencesRef prefs, SCPreferencesCallBack callout, SCPreferencesContext *context)
{
  return _SCPreferencesSetCallback(prefs, callout, context);
}

Boolean SCPreferencesSetDispatchQueue(SCPreferencesRef prefs, dispatch_queue_t queue)
{
  return _SCPreferencesSetDispatchQueue(prefs, queue);
}

Boolean SCPreferencesSetValue(SCPreferencesRef prefs, CFStringRef key, CFPropertyListRef value)
{
  return _SCPreferencesSetValue(prefs, key, value);
}

void SCPreferencesSynchronize(SCPreferencesRef prefs)
{
}

Boolean SCPreferencesUnlock(SCPreferencesRef prefs)
{
  return _SCPreferencesUnlock(prefs);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return _SecItemDelete(query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return _SecItemUpdate(query, attributesToUpdate);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return _SecRandomCopyBytes(rnd, count, bytes);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return _SecTaskCopyValueForEntitlement(task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

uint64_t TCCAccessCopyBundleIdentifiersDisabledForService()
{
  return _TCCAccessCopyBundleIdentifiersDisabledForService();
}

uint64_t TCCAccessCopyBundleIdentifiersForService()
{
  return _TCCAccessCopyBundleIdentifiersForService();
}

uint64_t WiFiCloudSyncEngineAddNetworkToCloud()
{
  return _WiFiCloudSyncEngineAddNetworkToCloud();
}

uint64_t WiFiCloudSyncEngineCheckKeychainSyncState()
{
  return _WiFiCloudSyncEngineCheckKeychainSyncState();
}

uint64_t WiFiCloudSyncEngineCopyCompleteKVS()
{
  return _WiFiCloudSyncEngineCopyCompleteKVS();
}

uint64_t WiFiCloudSyncEngineCreate()
{
  return _WiFiCloudSyncEngineCreate();
}

uint64_t WiFiCloudSyncEngineRegisterCallbacksWithQueue()
{
  return _WiFiCloudSyncEngineRegisterCallbacksWithQueue();
}

uint64_t WiFiCloudSyncEngineRemoveNetworkFromCloud()
{
  return _WiFiCloudSyncEngineRemoveNetworkFromCloud();
}

uint64_t WiFiCloudSyncEngineScheduleWithQueue()
{
  return _WiFiCloudSyncEngineScheduleWithQueue();
}

uint64_t WiFiCloudSyncEngineUnScheduleWithQueue()
{
  return _WiFiCloudSyncEngineUnScheduleWithQueue();
}

uint64_t WiFiUsageFaultReasonStringMap()
{
  return _WiFiUsageFaultReasonStringMap();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return __CFRuntimeCreateInstance();
}

uint64_t _CFRuntimeRegisterClass()
{
  return __CFRuntimeRegisterClass();
}

uint64_t _CTServerConnectionCopyCellularTransmitState()
{
  return __CTServerConnectionCopyCellularTransmitState();
}

uint64_t _CTServerConnectionCopyCellularUsagePolicy()
{
  return __CTServerConnectionCopyCellularUsagePolicy();
}

uint64_t _CTServerConnectionCopyDataStatus()
{
  return __CTServerConnectionCopyDataStatus();
}

uint64_t _CTServerConnectionCopyPacketContextInterfaceNameByServiceType()
{
  return __CTServerConnectionCopyPacketContextInterfaceNameByServiceType();
}

uint64_t _CTServerConnectionCopyProviderNameUsingCarrierBundle()
{
  return __CTServerConnectionCopyProviderNameUsingCarrierBundle();
}

uint64_t _CTServerConnectionCopyReliableNetworkFallbackSettings()
{
  return __CTServerConnectionCopyReliableNetworkFallbackSettings();
}

uint64_t _CTServerConnectionCreateWithIdentifier()
{
  return __CTServerConnectionCreateWithIdentifier();
}

uint64_t _CTServerConnectionGetRadioAccessTechnology()
{
  return __CTServerConnectionGetRadioAccessTechnology();
}

uint64_t _CTServerConnectionGetRegistrationStatus()
{
  return __CTServerConnectionGetRegistrationStatus();
}

uint64_t _CTServerConnectionRegisterBlockForNotification()
{
  return __CTServerConnectionRegisterBlockForNotification();
}

uint64_t _CTServerConnectionSetTargetQueue()
{
  return __CTServerConnectionSetTargetQueue();
}

uint64_t _CTServerConnectionUnregisterForNotification()
{
  return __CTServerConnectionUnregisterForNotification();
}

uint64_t _SCNetworkInterfaceCreateWithBSDName()
{
  return __SCNetworkInterfaceCreateWithBSDName();
}

uint64_t _SCNetworkInterfaceCreateWithIONetworkInterfaceObject()
{
  return __SCNetworkInterfaceCreateWithIONetworkInterfaceObject();
}

uint64_t _SCNetworkInterfaceIsQoSMarkingProfileInstalled()
{
  return __SCNetworkInterfaceIsQoSMarkingProfileInstalled();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return ___error();
}

double __exp10(double a1)
{
  return ___exp10(a1);
}

uint64_t __memcpy_chk()
{
  return ___memcpy_chk();
}

uint64_t __strlcpy_chk()
{
  return ___strlcpy_chk();
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_send_and_compose_impl()
{
  return __os_log_send_and_compose_impl();
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint32_t arc4random(void)
{
  return _arc4random();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

kern_return_t bootstrap_check_in(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return _bootstrap_check_in(bp, service_name, sp);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return _close(a1);
}

int closedir(DIR *a1)
{
  return _closedir(a1);
}

uint64_t ct_green_tea_logger_create()
{
  return _ct_green_tea_logger_create();
}

uint64_t ct_green_tea_logger_destroy()
{
  return _ct_green_tea_logger_destroy();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return _dispatch_block_create(flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return _dispatch_block_create_with_qos_class(flags, qos_class, relative_priority, block);
}

intptr_t dispatch_block_testcancel(dispatch_block_t block)
{
  return _dispatch_block_testcancel(block);
}

void *__cdecl dispatch_get_context(dispatch_object_t object)
{
  return _dispatch_get_context(object);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

uint64_t dispatch_mach_cancel()
{
  return _dispatch_mach_cancel();
}

uint64_t dispatch_mach_connect()
{
  return _dispatch_mach_connect();
}

uint64_t dispatch_mach_create_f()
{
  return _dispatch_mach_create_f();
}

uint64_t dispatch_mach_mig_demux()
{
  return _dispatch_mach_mig_demux();
}

uint64_t dispatch_mach_msg_get_msg()
{
  return _dispatch_mach_msg_get_msg();
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

ether_addr *__cdecl ether_aton(const char *a1)
{
  return _ether_aton(a1);
}

char *__cdecl ether_ntoa(const ether_addr *a1)
{
  return _ether_ntoa(a1);
}

void exit(int a1)
{
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

void free(void *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

int fsctl(const char *a1, unint64_t a2, void *a3, unsigned int a4)
{
  return _fsctl(a1, a2, a3, a4);
}

uint64_t getCTGreenTeaOsLogHandle()
{
  return _getCTGreenTeaOsLogHandle();
}

int getifaddrs(ifaddrs **a1)
{
  return _getifaddrs(a1);
}

const char *getprogname(void)
{
  return _getprogname();
}

int gettimeofday(timeval *a1, void *a2)
{
  return _gettimeofday(a1, a2);
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return _if_indextoname(a1, a2);
}

unsigned int if_nametoindex(const char *a1)
{
  return _if_nametoindex(a1);
}

int inet_aton(const char *a1, in_addr *a2)
{
  return _inet_aton(a1, a2);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return _inet_ntop(a1, a2, a3, a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return _inet_pton(a1, a2, a3);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return _ioctl(a1, a2);
}

uint64_t kdebug_trace()
{
  return _kdebug_trace();
}

uint64_t lockdown_connect()
{
  return _lockdown_connect();
}

uint64_t lockdown_disconnect()
{
  return _lockdown_disconnect();
}

long double log10(long double __x)
{
  return _log10(__x);
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return _mach_msg(msg, option, send_size, rcv_size, rcv_name, timeout, notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return _mach_port_allocate(task, right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return _mach_port_deallocate(task, name);
}

kern_return_t mach_port_get_attributes(ipc_space_read_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info_out, mach_msg_type_number_t *port_info_outCnt)
{
  return _mach_port_get_attributes(task, name, flavor, port_info_out, port_info_outCnt);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return _mach_port_insert_right(task, name, poly, polyPoly);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return _mach_port_mod_refs(task, name, right, delta);
}

kern_return_t mach_port_request_notification(ipc_space_t task, mach_port_name_t name, mach_msg_id_t msgid, mach_port_mscount_t sync, mach_port_t notify, mach_msg_type_name_t notifyPoly, mach_port_t *previous)
{
  return _mach_port_request_notification(task, name, msgid, sync, notify, notifyPoly, previous);
}

kern_return_t mach_port_set_attributes(ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info, mach_msg_type_number_t port_infoCnt)
{
  return _mach_port_set_attributes(task, name, flavor, port_info, port_infoCnt);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_realloc(ptr, size, type_id);
}

uint64_t managed_event_fetch()
{
  return _managed_event_fetch();
}

uint64_t managed_event_fetch_series()
{
  return _managed_event_fetch_series();
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return _memchr(__s, __c, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void mig_deallocate(vm_address_t a1, vm_size_t a2)
{
}

uint64_t network_config_set_interface_constrained()
{
  return _network_config_set_interface_constrained();
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

BOOL notify_is_valid_token(int val)
{
  return _notify_is_valid_token(val);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_register_mach_port(const char *name, mach_port_t *notify_port, int flags, int *out_token)
{
  return _notify_register_mach_port(name, notify_port, flags, out_token);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeak(id *location)
{
  return _objc_loadWeak(location);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

DIR *__cdecl opendir(const char *a1)
{
  return _opendir(a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_log_with_args()
{
  return _os_log_with_args();
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

uint64_t os_variant_is_darwinos()
{
  return _os_variant_is_darwinos();
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return _proc_name(pid, buffer, buffersize);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return _pthread_mutex_init(a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return _pthread_mutex_lock(a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return _pthread_mutex_unlock(a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return _pthread_once(a1, a2);
}

qos_class_t qos_class_self(void)
{
  return _qos_class_self();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return _read(a1, a2, a3);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return _socket(a1, a2, a3);
}

char *__cdecl strcasestr(const char *__big, const char *__little)
{
  return _strcasestr(__big, __little);
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  return _strcat(__s1, __s2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return _strncmp(__s1, __s2, __n);
}

uint64_t symptom_create()
{
  return _symptom_create();
}

uint64_t symptom_send()
{
  return _symptom_send();
}

uint64_t symptom_set_qualifier()
{
  return _symptom_set_qualifier();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

uint64_t tcp_connection_fallback_watcher_create()
{
  return _tcp_connection_fallback_watcher_create();
}

uint64_t tcp_connection_fallback_watcher_destroy()
{
  return _tcp_connection_fallback_watcher_destroy();
}

uint64_t tcp_fallback_watcher_fallback_inuse()
{
  return _tcp_fallback_watcher_fallback_inuse();
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

int uuid_is_null(const uuid_t uu)
{
  return _uuid_is_null(uu);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return _vm_deallocate(target_task, address, size);
}

kern_return_t vm_read(vm_map_read_t target_task, vm_address_t address, vm_size_t size, vm_offset_t *data, mach_msg_type_number_t *dataCnt)
{
  return _vm_read(target_task, address, size, data, dataCnt);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return _voucher_mach_msg_set(msg);
}

uint64_t wd_endpoint_activate()
{
  return _wd_endpoint_activate();
}

uint64_t wd_endpoint_add_queue()
{
  return _wd_endpoint_add_queue();
}

uint64_t wd_endpoint_register()
{
  return _wd_endpoint_register();
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return _xpc_activity_set_state(activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return _xpc_activity_should_defer(activity);
}

void xpc_activity_unregister(const char *identifier)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return _xpc_connection_create(name, targetq);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return _xpc_connection_create_mach_service(name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return _xpc_connection_send_message_with_reply_sync(connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return _xpc_copy_description(object);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

int xpc_dictionary_dup_fd(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_dup_fd(xdict, key);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_BOOL(xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_uint64(xdict, key);
}

const uint8_t *__cdecl xpc_dictionary_get_uuid(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_uuid(xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_value(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_connection(xpc_object_t xdict, const char *key, xpc_connection_t connection)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_uuid(xpc_object_t xdict, const char *key, const unsigned __int8 *uuid)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return _xpc_retain(object);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return _xpc_string_get_string_ptr(xstring);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return _xpc_uint64_create(value);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return _xpc_uint64_get_value(xuint);
}

id objc_msgSend_ANQPElementIDList(void *a1, const char *a2, ...)
{
  return [a1 ANQPElementIDList];
}

id objc_msgSend_AVSystemMonitorCb(void *a1, const char *a2, ...)
{
  return [a1 AVSystemMonitorCb];
}

id objc_msgSend_AWDLRealTimeModeTimestamp(void *a1, const char *a2, ...)
{
  return [a1 AWDLRealTimeModeTimestamp];
}

id objc_msgSend_BSSID(void *a1, const char *a2, ...)
{
  return [a1 BSSID];
}

id objc_msgSend_BSSIDThresholds(void *a1, const char *a2, ...)
{
  return [a1 BSSIDThresholds];
}

id objc_msgSend_BSSList(void *a1, const char *a2, ...)
{
  return [a1 BSSList];
}

id objc_msgSend_BSSType(void *a1, const char *a2, ...)
{
  return [a1 BSSType];
}

id objc_msgSend_DHCPServerID(void *a1, const char *a2, ...)
{
  return [a1 DHCPServerID];
}

id objc_msgSend_DHCPv6ServerID(void *a1, const char *a2, ...)
{
  return [a1 DHCPv6ServerID];
}

id objc_msgSend_DNSHeuristicsFailureStateInfo(void *a1, const char *a2, ...)
{
  return [a1 DNSHeuristicsFailureStateInfo];
}

id objc_msgSend_EAPCredentials(void *a1, const char *a2, ...)
{
  return [a1 EAPCredentials];
}

id objc_msgSend_EAPProfile(void *a1, const char *a2, ...)
{
  return [a1 EAPProfile];
}

id objc_msgSend_IEList(void *a1, const char *a2, ...)
{
  return [a1 IEList];
}

id objc_msgSend_IPv4NetworkSignature(void *a1, const char *a2, ...)
{
  return [a1 IPv4NetworkSignature];
}

id objc_msgSend_IPv6NetworkSignature(void *a1, const char *a2, ...)
{
  return [a1 IPv6NetworkSignature];
}

id objc_msgSend_MACAddress(void *a1, const char *a2, ...)
{
  return [a1 MACAddress];
}

id objc_msgSend_MCInitialize(void *a1, const char *a2, ...)
{
  return [a1 MCInitialize];
}

id objc_msgSend_NAIRealmNameList(void *a1, const char *a2, ...)
{
  return [a1 NAIRealmNameList];
}

id objc_msgSend_NANServiceID(void *a1, const char *a2, ...)
{
  return [a1 NANServiceID];
}

id objc_msgSend_OSSpecificAttributes(void *a1, const char *a2, ...)
{
  return [a1 OSSpecificAttributes];
}

id objc_msgSend_PHYMode(void *a1, const char *a2, ...)
{
  return [a1 PHYMode];
}

id objc_msgSend_PMK(void *a1, const char *a2, ...)
{
  return [a1 PMK];
}

id objc_msgSend_RSSI(void *a1, const char *a2, ...)
{
  return [a1 RSSI];
}

id objc_msgSend_SSID(void *a1, const char *a2, ...)
{
  return [a1 SSID];
}

id objc_msgSend_SSIDList(void *a1, const char *a2, ...)
{
  return [a1 SSIDList];
}

id objc_msgSend_SSIDThresholds(void *a1, const char *a2, ...)
{
  return [a1 SSIDThresholds];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return [a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return [a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return [a1 UUIDString];
}

id objc_msgSend_WAPISubtype(void *a1, const char *a2, ...)
{
  return [a1 WAPISubtype];
}

id objc_msgSend_WEPSubtype(void *a1, const char *a2, ...)
{
  return [a1 WEPSubtype];
}

id objc_msgSend_WiFiBatteryManagerPopulatePowerTable(void *a1, const char *a2, ...)
{
  return [a1 WiFiBatteryManagerPopulatePowerTable];
}

id objc_msgSend_WiFiSoftErrorDriverAvailableEventhandler(void *a1, const char *a2, ...)
{
  return [a1 WiFiSoftErrorDriverAvailableEventhandler];
}

id objc_msgSend_WiFiSoftErrorDriverLinkupEventhandler(void *a1, const char *a2, ...)
{
  return [a1 WiFiSoftErrorDriverLinkupEventhandler];
}

id objc_msgSend_XPCConnection(void *a1, const char *a2, ...)
{
  return [a1 XPCConnection];
}

id objc_msgSend__applicationNotifyState(void *a1, const char *a2, ...)
{
  return [a1 _applicationNotifyState];
}

id objc_msgSend__beginPollingForInstantaenousScorecards(void *a1, const char *a2, ...)
{
  return [a1 _beginPollingForInstantaenousScorecards];
}

id objc_msgSend__checkAndRequestChipResetIfNeeded(void *a1, const char *a2, ...)
{
  return [a1 _checkAndRequestChipResetIfNeeded];
}

id objc_msgSend__cleanup(void *a1, const char *a2, ...)
{
  return [a1 _cleanup];
}

id objc_msgSend__cleanupExistingRetiredStores(void *a1, const char *a2, ...)
{
  return [a1 _cleanupExistingRetiredStores];
}

id objc_msgSend__cleanupMaintenanceTask(void *a1, const char *a2, ...)
{
  return [a1 _cleanupMaintenanceTask];
}

id objc_msgSend__createAlertDictionary(void *a1, const char *a2, ...)
{
  return [a1 _createAlertDictionary];
}

id objc_msgSend__eventHandlers(void *a1, const char *a2, ...)
{
  return [a1 _eventHandlers];
}

id objc_msgSend__homeManager(void *a1, const char *a2, ...)
{
  return [a1 _homeManager];
}

id objc_msgSend__initPrivate(void *a1, const char *a2, ...)
{
  return [a1 _initPrivate];
}

id objc_msgSend__isCollectionEnabled(void *a1, const char *a2, ...)
{
  return [a1 _isCollectionEnabled];
}

id objc_msgSend__lastTriggeredTTR(void *a1, const char *a2, ...)
{
  return [a1 _lastTriggeredTTR];
}

id objc_msgSend__pollInstantaenousAndUpdateValues(void *a1, const char *a2, ...)
{
  return [a1 _pollInstantaenousAndUpdateValues];
}

id objc_msgSend__populateSupportedChannels(void *a1, const char *a2, ...)
{
  return [a1 _populateSupportedChannels];
}

id objc_msgSend__printSupportedChannels(void *a1, const char *a2, ...)
{
  return [a1 _printSupportedChannels];
}

id objc_msgSend__reduceNetworks(void *a1, const char *a2, ...)
{
  return [a1 _reduceNetworks];
}

id objc_msgSend__register(void *a1, const char *a2, ...)
{
  return [a1 _register];
}

id objc_msgSend__setupKVSHandler(void *a1, const char *a2, ...)
{
  return [a1 _setupKVSHandler];
}

id objc_msgSend__softError(void *a1, const char *a2, ...)
{
  return [a1 _softError];
}

id objc_msgSend__stateInfo(void *a1, const char *a2, ...)
{
  return [a1 _stateInfo];
}

id objc_msgSend__stopPollingForInstantaneousScorecards(void *a1, const char *a2, ...)
{
  return [a1 _stopPollingForInstantaneousScorecards];
}

id objc_msgSend_abort(void *a1, const char *a2, ...)
{
  return [a1 abort];
}

id objc_msgSend_acceptableCacheAge(void *a1, const char *a2, ...)
{
  return [a1 acceptableCacheAge];
}

id objc_msgSend_accessPoints(void *a1, const char *a2, ...)
{
  return [a1 accessPoints];
}

id objc_msgSend_accountStore(void *a1, const char *a2, ...)
{
  return [a1 accountStore];
}

id objc_msgSend_actionIdentifier(void *a1, const char *a2, ...)
{
  return [a1 actionIdentifier];
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return [a1 activate];
}

id objc_msgSend_activeUseBeingTracked(void *a1, const char *a2, ...)
{
  return [a1 activeUseBeingTracked];
}

id objc_msgSend_activityAlarmAvailable(void *a1, const char *a2, ...)
{
  return [a1 activityAlarmAvailable];
}

id objc_msgSend_activityLabels(void *a1, const char *a2, ...)
{
  return [a1 activityLabels];
}

id objc_msgSend_activityManager(void *a1, const char *a2, ...)
{
  return [a1 activityManager];
}

id objc_msgSend_addReason(void *a1, const char *a2, ...)
{
  return [a1 addReason];
}

id objc_msgSend_addedAt(void *a1, const char *a2, ...)
{
  return [a1 addedAt];
}

id objc_msgSend_admissionCheck(void *a1, const char *a2, ...)
{
  return [a1 admissionCheck];
}

id objc_msgSend_agentUUID(void *a1, const char *a2, ...)
{
  return [a1 agentUUID];
}

id objc_msgSend_alertDictionary(void *a1, const char *a2, ...)
{
  return [a1 alertDictionary];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return [a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return [a1 allObjects];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return [a1 allValues];
}

id objc_msgSend_allowRoam(void *a1, const char *a2, ...)
{
  return [a1 allowRoam];
}

id objc_msgSend_altDSID(void *a1, const char *a2, ...)
{
  return [a1 altDSID];
}

id objc_msgSend_ambiguousSSIDs(void *a1, const char *a2, ...)
{
  return [a1 ambiguousSSIDs];
}

id objc_msgSend_anyCallInProgress(void *a1, const char *a2, ...)
{
  return [a1 anyCallInProgress];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return [a1 anyObject];
}

id objc_msgSend_apMode(void *a1, const char *a2, ...)
{
  return [a1 apMode];
}

id objc_msgSend_apProfileID(void *a1, const char *a2, ...)
{
  return [a1 apProfileID];
}

id objc_msgSend_apProfileWPSInfo(void *a1, const char *a2, ...)
{
  return [a1 apProfileWPSInfo];
}

id objc_msgSend_appAccessInfoMap(void *a1, const char *a2, ...)
{
  return [a1 appAccessInfoMap];
}

id objc_msgSend_appAttributes(void *a1, const char *a2, ...)
{
  return [a1 appAttributes];
}

id objc_msgSend_appAwareDetails(void *a1, const char *a2, ...)
{
  return [a1 appAwareDetails];
}

id objc_msgSend_appInForeground(void *a1, const char *a2, ...)
{
  return [a1 appInForeground];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return [a1 array];
}

id objc_msgSend_askToJoinMode(void *a1, const char *a2, ...)
{
  return [a1 askToJoinMode];
}

id objc_msgSend_askToLaunchUserDisconnectRadar(void *a1, const char *a2, ...)
{
  return [a1 askToLaunchUserDisconnectRadar];
}

id objc_msgSend_assertCount(void *a1, const char *a2, ...)
{
  return [a1 assertCount];
}

id objc_msgSend_assocIsToApplePH(void *a1, const char *a2, ...)
{
  return [a1 assocIsToApplePH];
}

id objc_msgSend_assocIsToNoMap(void *a1, const char *a2, ...)
{
  return [a1 assocIsToNoMap];
}

id objc_msgSend_assocReason(void *a1, const char *a2, ...)
{
  return [a1 assocReason];
}

id objc_msgSend_associatedTime(void *a1, const char *a2, ...)
{
  return [a1 associatedTime];
}

id objc_msgSend_asyncPPMBudgetTimestamp(void *a1, const char *a2, ...)
{
  return [a1 asyncPPMBudgetTimestamp];
}

id objc_msgSend_asyncScopeHomeNetworks(void *a1, const char *a2, ...)
{
  return [a1 asyncScopeHomeNetworks];
}

id objc_msgSend_atHomeScopedNOI(void *a1, const char *a2, ...)
{
  return [a1 atHomeScopedNOI];
}

id objc_msgSend_atWorkScopedNOI(void *a1, const char *a2, ...)
{
  return [a1 atWorkScopedNOI];
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return [a1 attributes];
}

id objc_msgSend_audioRouteHandler(void *a1, const char *a2, ...)
{
  return [a1 audioRouteHandler];
}

id objc_msgSend_authGuessingDictionary(void *a1, const char *a2, ...)
{
  return [a1 authGuessingDictionary];
}

id objc_msgSend_autoHotspotMode(void *a1, const char *a2, ...)
{
  return [a1 autoHotspotMode];
}

id objc_msgSend_autoJoinParameters(void *a1, const char *a2, ...)
{
  return [a1 autoJoinParameters];
}

id objc_msgSend_automotive(void *a1, const char *a2, ...)
{
  return [a1 automotive];
}

id objc_msgSend_availableNetworks(void *a1, const char *a2, ...)
{
  return [a1 availableNetworks];
}

id objc_msgSend_availableResource(void *a1, const char *a2, ...)
{
  return [a1 availableResource];
}

id objc_msgSend_avcMinJB(void *a1, const char *a2, ...)
{
  return [a1 avcMinJB];
}

id objc_msgSend_avgDLSpeed(void *a1, const char *a2, ...)
{
  return [a1 avgDLSpeed];
}

id objc_msgSend_awdlRealTimeModeActive(void *a1, const char *a2, ...)
{
  return [a1 awdlRealTimeModeActive];
}

id objc_msgSend_backhaulThroughput(void *a1, const char *a2, ...)
{
  return [a1 backhaulThroughput];
}

id objc_msgSend_band(void *a1, const char *a2, ...)
{
  return [a1 band];
}

id objc_msgSend_bandPreference(void *a1, const char *a2, ...)
{
  return [a1 bandPreference];
}

id objc_msgSend_batteryLife(void *a1, const char *a2, ...)
{
  return [a1 batteryLife];
}

id objc_msgSend_beacon(void *a1, const char *a2, ...)
{
  return [a1 beacon];
}

id objc_msgSend_beaconsAndWPSInfo(void *a1, const char *a2, ...)
{
  return [a1 beaconsAndWPSInfo];
}

id objc_msgSend_beginMonitoring(void *a1, const char *a2, ...)
{
  return [a1 beginMonitoring];
}

id objc_msgSend_bestLatitudeReading(void *a1, const char *a2, ...)
{
  return [a1 bestLatitudeReading];
}

id objc_msgSend_bestLongitudeReading(void *a1, const char *a2, ...)
{
  return [a1 bestLongitudeReading];
}

id objc_msgSend_blacklistedSSIDs(void *a1, const char *a2, ...)
{
  return [a1 blacklistedSSIDs];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return [a1 BOOLValue];
}

id objc_msgSend_bssEnvironment(void *a1, const char *a2, ...)
{
  return [a1 bssEnvironment];
}

id objc_msgSend_bssid(void *a1, const char *a2, ...)
{
  return [a1 bssid];
}

id objc_msgSend_bssidGuessingDictionary(void *a1, const char *a2, ...)
{
  return [a1 bssidGuessingDictionary];
}

id objc_msgSend_btState(void *a1, const char *a2, ...)
{
  return [a1 btState];
}

id objc_msgSend_btType(void *a1, const char *a2, ...)
{
  return [a1 btType];
}

id objc_msgSend_build(void *a1, const char *a2, ...)
{
  return [a1 build];
}

id objc_msgSend_bundleID(void *a1, const char *a2, ...)
{
  return [a1 bundleID];
}

id objc_msgSend_bundleId(void *a1, const char *a2, ...)
{
  return [a1 bundleId];
}

id objc_msgSend_bypassPrompt(void *a1, const char *a2, ...)
{
  return [a1 bypassPrompt];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return [a1 bytes];
}

id objc_msgSend_bytesInTotalActiveUsageSession(void *a1, const char *a2, ...)
{
  return [a1 bytesInTotalActiveUsageSession];
}

id objc_msgSend_bytesOutTotalActiveUsageSession(void *a1, const char *a2, ...)
{
  return [a1 bytesOutTotalActiveUsageSession];
}

id objc_msgSend_cacheEnabled(void *a1, const char *a2, ...)
{
  return [a1 cacheEnabled];
}

id objc_msgSend_cacheRollover(void *a1, const char *a2, ...)
{
  return [a1 cacheRollover];
}

id objc_msgSend_cachedBudget(void *a1, const char *a2, ...)
{
  return [a1 cachedBudget];
}

id objc_msgSend_calculateTimes(void *a1, const char *a2, ...)
{
  return [a1 calculateTimes];
}

id objc_msgSend_callHostedOnThisDevice(void *a1, const char *a2, ...)
{
  return [a1 callHostedOnThisDevice];
}

id objc_msgSend_callObserver(void *a1, const char *a2, ...)
{
  return [a1 callObserver];
}

id objc_msgSend_callback(void *a1, const char *a2, ...)
{
  return [a1 callback];
}

id objc_msgSend_callbackContext(void *a1, const char *a2, ...)
{
  return [a1 callbackContext];
}

id objc_msgSend_callbacks(void *a1, const char *a2, ...)
{
  return [a1 callbacks];
}

id objc_msgSend_calls(void *a1, const char *a2, ...)
{
  return [a1 calls];
}

id objc_msgSend_canSubmitMetrics(void *a1, const char *a2, ...)
{
  return [a1 canSubmitMetrics];
}

id objc_msgSend_cancelMaintenanceTask(void *a1, const char *a2, ...)
{
  return [a1 cancelMaintenanceTask];
}

id objc_msgSend_captiveFlag(void *a1, const char *a2, ...)
{
  return [a1 captiveFlag];
}

id objc_msgSend_captiveProfile(void *a1, const char *a2, ...)
{
  return [a1 captiveProfile];
}

id objc_msgSend_carModeActive(void *a1, const char *a2, ...)
{
  return [a1 carModeActive];
}

id objc_msgSend_carplayUUID(void *a1, const char *a2, ...)
{
  return [a1 carplayUUID];
}

id objc_msgSend_categoryIdentifier(void *a1, const char *a2, ...)
{
  return [a1 categoryIdentifier];
}

id objc_msgSend_ccaAverage(void *a1, const char *a2, ...)
{
  return [a1 ccaAverage];
}

id objc_msgSend_cellularDataStatusMap(void *a1, const char *a2, ...)
{
  return [a1 cellularDataStatusMap];
}

id objc_msgSend_cellularICCID(void *a1, const char *a2, ...)
{
  return [a1 cellularICCID];
}

id objc_msgSend_cellularIfTotalBytes(void *a1, const char *a2, ...)
{
  return [a1 cellularIfTotalBytes];
}

id objc_msgSend_cellularIfTotalPackets(void *a1, const char *a2, ...)
{
  return [a1 cellularIfTotalPackets];
}

id objc_msgSend_cellularInterfaceName(void *a1, const char *a2, ...)
{
  return [a1 cellularInterfaceName];
}

id objc_msgSend_cellularL3MBPS(void *a1, const char *a2, ...)
{
  return [a1 cellularL3MBPS];
}

id objc_msgSend_cellularL3PPS(void *a1, const char *a2, ...)
{
  return [a1 cellularL3PPS];
}

id objc_msgSend_cellularNetworkInfo(void *a1, const char *a2, ...)
{
  return [a1 cellularNetworkInfo];
}

id objc_msgSend_channel(void *a1, const char *a2, ...)
{
  return [a1 channel];
}

id objc_msgSend_channelBand(void *a1, const char *a2, ...)
{
  return [a1 channelBand];
}

id objc_msgSend_channelFlags(void *a1, const char *a2, ...)
{
  return [a1 channelFlags];
}

id objc_msgSend_channelNumber(void *a1, const char *a2, ...)
{
  return [a1 channelNumber];
}

id objc_msgSend_channelWidth(void *a1, const char *a2, ...)
{
  return [a1 channelWidth];
}

id objc_msgSend_channels(void *a1, const char *a2, ...)
{
  return [a1 channels];
}

id objc_msgSend_checkDeviceNanCapabilities(void *a1, const char *a2, ...)
{
  return [a1 checkDeviceNanCapabilities];
}

id objc_msgSend_checkForWiFiPasswordChange(void *a1, const char *a2, ...)
{
  return [a1 checkForWiFiPasswordChange];
}

id objc_msgSend_chipResetWaiter(void *a1, const char *a2, ...)
{
  return [a1 chipResetWaiter];
}

id objc_msgSend_claimedResource(void *a1, const char *a2, ...)
{
  return [a1 claimedResource];
}

id objc_msgSend_clearScanResultsForAutoJoinSessionReset(void *a1, const char *a2, ...)
{
  return [a1 clearScanResultsForAutoJoinSessionReset];
}

id objc_msgSend_client(void *a1, const char *a2, ...)
{
  return [a1 client];
}

id objc_msgSend_clients(void *a1, const char *a2, ...)
{
  return [a1 clients];
}

id objc_msgSend_coalesceKnownNetworksSyncTimer(void *a1, const char *a2, ...)
{
  return [a1 coalesceKnownNetworksSyncTimer];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return [a1 code];
}

id objc_msgSend_colocated2GHzRNRChannel(void *a1, const char *a2, ...)
{
  return [a1 colocated2GHzRNRChannel];
}

id objc_msgSend_colocated5GHzRNRChannel(void *a1, const char *a2, ...)
{
  return [a1 colocated5GHzRNRChannel];
}

id objc_msgSend_colocatedNetworks(void *a1, const char *a2, ...)
{
  return [a1 colocatedNetworks];
}

id objc_msgSend_colocatedScopeID(void *a1, const char *a2, ...)
{
  return [a1 colocatedScopeID];
}

id objc_msgSend_colocatedState(void *a1, const char *a2, ...)
{
  return [a1 colocatedState];
}

id objc_msgSend_comment(void *a1, const char *a2, ...)
{
  return [a1 comment];
}

id objc_msgSend_compatibilityMode(void *a1, const char *a2, ...)
{
  return [a1 compatibilityMode];
}

id objc_msgSend_compatibilityState(void *a1, const char *a2, ...)
{
  return [a1 compatibilityState];
}

id objc_msgSend_confidence(void *a1, const char *a2, ...)
{
  return [a1 confidence];
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return [a1 configuration];
}

id objc_msgSend_connectedBSSID(void *a1, const char *a2, ...)
{
  return [a1 connectedBSSID];
}

id objc_msgSend_connectedSSID(void *a1, const char *a2, ...)
{
  return [a1 connectedSSID];
}

id objc_msgSend_connectionState(void *a1, const char *a2, ...)
{
  return [a1 connectionState];
}

id objc_msgSend_content(void *a1, const char *a2, ...)
{
  return [a1 content];
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return [a1 context];
}

id objc_msgSend_coordinate(void *a1, const char *a2, ...)
{
  return [a1 coordinate];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return [a1 copy];
}

id objc_msgSend_copyActiveServiceUniqueIdentifiers(void *a1, const char *a2, ...)
{
  return [a1 copyActiveServiceUniqueIdentifiers];
}

id objc_msgSend_copyAggregatePathRules(void *a1, const char *a2, ...)
{
  return [a1 copyAggregatePathRules];
}

id objc_msgSend_copyAllStoredNetworkSsids(void *a1, const char *a2, ...)
{
  return [a1 copyAllStoredNetworkSsids];
}

id objc_msgSend_copyCachedCurrentHotspotNetwork(void *a1, const char *a2, ...)
{
  return [a1 copyCachedCurrentHotspotNetwork];
}

id objc_msgSend_copyCachedCurrentSessionBasedNetworkRef(void *a1, const char *a2, ...)
{
  return [a1 copyCachedCurrentSessionBasedNetworkRef];
}

id objc_msgSend_copyHomeNetworkTransitionDate(void *a1, const char *a2, ...)
{
  return [a1 copyHomeNetworkTransitionDate];
}

id objc_msgSend_copyPairedDestinationID(void *a1, const char *a2, ...)
{
  return [a1 copyPairedDestinationID];
}

id objc_msgSend_copyRoamStatus(void *a1, const char *a2, ...)
{
  return [a1 copyRoamStatus];
}

id objc_msgSend_copySortedHotspotDevicesByAutoPreferences(void *a1, const char *a2, ...)
{
  return [a1 copySortedHotspotDevicesByAutoPreferences];
}

id objc_msgSend_copyStatistics(void *a1, const char *a2, ...)
{
  return [a1 copyStatistics];
}

id objc_msgSend_coreWiFiSpecificAttributes(void *a1, const char *a2, ...)
{
  return [a1 coreWiFiSpecificAttributes];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return [a1 count];
}

id objc_msgSend_countryCodeStr(void *a1, const char *a2, ...)
{
  return [a1 countryCodeStr];
}

id objc_msgSend_cpmsActive(void *a1, const char *a2, ...)
{
  return [a1 cpmsActive];
}

id objc_msgSend_cpmsAsyncNotificationCallback(void *a1, const char *a2, ...)
{
  return [a1 cpmsAsyncNotificationCallback];
}

id objc_msgSend_ctServerConnection(void *a1, const char *a2, ...)
{
  return [a1 ctServerConnection];
}

id objc_msgSend_currentBand(void *a1, const char *a2, ...)
{
  return [a1 currentBand];
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return [a1 currentCalendar];
}

id objc_msgSend_currentCalls(void *a1, const char *a2, ...)
{
  return [a1 currentCalls];
}

id objc_msgSend_currentDeviceCapabilities(void *a1, const char *a2, ...)
{
  return [a1 currentDeviceCapabilities];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return [a1 currentHandler];
}

id objc_msgSend_currentNetwork(void *a1, const char *a2, ...)
{
  return [a1 currentNetwork];
}

id objc_msgSend_currentNetworkChanged(void *a1, const char *a2, ...)
{
  return [a1 currentNetworkChanged];
}

id objc_msgSend_currentNetworkChannelChanged(void *a1, const char *a2, ...)
{
  return [a1 currentNetworkChannelChanged];
}

id objc_msgSend_currentRoute(void *a1, const char *a2, ...)
{
  return [a1 currentRoute];
}

id objc_msgSend_currentSession(void *a1, const char *a2, ...)
{
  return [a1 currentSession];
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return [a1 currentState];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return [a1 data];
}

id objc_msgSend_datapathID(void *a1, const char *a2, ...)
{
  return [a1 datapathID];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return [a1 date];
}

id objc_msgSend_dateTraitCachesUpdated(void *a1, const char *a2, ...)
{
  return [a1 dateTraitCachesUpdated];
}

id objc_msgSend_debugInfo(void *a1, const char *a2, ...)
{
  return [a1 debugInfo];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return [a1 defaultCenter];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return [a1 defaultManager];
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return [a1 defaultWorkspace];
}

id objc_msgSend_deferIntervalSecs(void *a1, const char *a2, ...)
{
  return [a1 deferIntervalSecs];
}

id objc_msgSend_denyListedNetworkCount(void *a1, const char *a2, ...)
{
  return [a1 denyListedNetworkCount];
}

id objc_msgSend_denyMulticast(void *a1, const char *a2, ...)
{
  return [a1 denyMulticast];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return [a1 description];
}

id objc_msgSend_detectLateRoam(void *a1, const char *a2, ...)
{
  return [a1 detectLateRoam];
}

id objc_msgSend_detectPingPong(void *a1, const char *a2, ...)
{
  return [a1 detectPingPong];
}

id objc_msgSend_deviceAnalyticsClient(void *a1, const char *a2, ...)
{
  return [a1 deviceAnalyticsClient];
}

id objc_msgSend_deviceClass(void *a1, const char *a2, ...)
{
  return [a1 deviceClass];
}

id objc_msgSend_deviceIdentifier(void *a1, const char *a2, ...)
{
  return [a1 deviceIdentifier];
}

id objc_msgSend_deviceIdentifierForVendor(void *a1, const char *a2, ...)
{
  return [a1 deviceIdentifierForVendor];
}

id objc_msgSend_deviceIsAssociated(void *a1, const char *a2, ...)
{
  return [a1 deviceIsAssociated];
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return [a1 deviceName];
}

id objc_msgSend_deviceStationary(void *a1, const char *a2, ...)
{
  return [a1 deviceStationary];
}

id objc_msgSend_deviceUnderActiveUse(void *a1, const char *a2, ...)
{
  return [a1 deviceUnderActiveUse];
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return [a1 devices];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return [a1 dictionary];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return [a1 dictionaryRepresentation];
}

id objc_msgSend_didSubmitMetrics(void *a1, const char *a2, ...)
{
  return [a1 didSubmitMetrics];
}

id objc_msgSend_disAssocReason(void *a1, const char *a2, ...)
{
  return [a1 disAssocReason];
}

id objc_msgSend_disable6EMode(void *a1, const char *a2, ...)
{
  return [a1 disable6EMode];
}

id objc_msgSend_disableProminentFiltering(void *a1, const char *a2, ...)
{
  return [a1 disableProminentFiltering];
}

id objc_msgSend_disarmHomeNetworkTransitionTimer(void *a1, const char *a2, ...)
{
  return [a1 disarmHomeNetworkTransitionTimer];
}

id objc_msgSend_discover(void *a1, const char *a2, ...)
{
  return [a1 discover];
}

id objc_msgSend_discoveredDevices(void *a1, const char *a2, ...)
{
  return [a1 discoveredDevices];
}

id objc_msgSend_discoveryResult(void *a1, const char *a2, ...)
{
  return [a1 discoveryResult];
}

id objc_msgSend_dismissJoinAlerts(void *a1, const char *a2, ...)
{
  return [a1 dismissJoinAlerts];
}

id objc_msgSend_dispatchQueue(void *a1, const char *a2, ...)
{
  return [a1 dispatchQueue];
}

id objc_msgSend_displayStateToken(void *a1, const char *a2, ...)
{
  return [a1 displayStateToken];
}

id objc_msgSend_displayedOperatorName(void *a1, const char *a2, ...)
{
  return [a1 displayedOperatorName];
}

id objc_msgSend_dndStatus(void *a1, const char *a2, ...)
{
  return [a1 dndStatus];
}

id objc_msgSend_doNotFinalizePriorToEpoch(void *a1, const char *a2, ...)
{
  return [a1 doNotFinalizePriorToEpoch];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return [a1 domain];
}

id objc_msgSend_domainName(void *a1, const char *a2, ...)
{
  return [a1 domainName];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return [a1 doubleValue];
}

id objc_msgSend_downloadError(void *a1, const char *a2, ...)
{
  return [a1 downloadError];
}

id objc_msgSend_drain(void *a1, const char *a2, ...)
{
  return [a1 drain];
}

id objc_msgSend_drivingEndedAlarmTriggerDuration(void *a1, const char *a2, ...)
{
  return [a1 drivingEndedAlarmTriggerDuration];
}

id objc_msgSend_drivingStartedAlarmTriggerDuration(void *a1, const char *a2, ...)
{
  return [a1 drivingStartedAlarmTriggerDuration];
}

id objc_msgSend_dumpOverrideNetworkState(void *a1, const char *a2, ...)
{
  return [a1 dumpOverrideNetworkState];
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return [a1 duration];
}

id objc_msgSend_dwellTime(void *a1, const char *a2, ...)
{
  return [a1 dwellTime];
}

id objc_msgSend_elements(void *a1, const char *a2, ...)
{
  return [a1 elements];
}

id objc_msgSend_enableXCTestNotifications(void *a1, const char *a2, ...)
{
  return [a1 enableXCTestNotifications];
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return [a1 enabled];
}

id objc_msgSend_endMonitoring(void *a1, const char *a2, ...)
{
  return [a1 endMonitoring];
}

id objc_msgSend_endpoint(void *a1, const char *a2, ...)
{
  return [a1 endpoint];
}

id objc_msgSend_engine(void *a1, const char *a2, ...)
{
  return [a1 engine];
}

id objc_msgSend_entry(void *a1, const char *a2, ...)
{
  return [a1 entry];
}

id objc_msgSend_ephemeralSessionConfiguration(void *a1, const char *a2, ...)
{
  return [a1 ephemeralSessionConfiguration];
}

id objc_msgSend_epochAtAssoc(void *a1, const char *a2, ...)
{
  return [a1 epochAtAssoc];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return [a1 error];
}

id objc_msgSend_essMembers(void *a1, const char *a2, ...)
{
  return [a1 essMembers];
}

id objc_msgSend_establishedLinkNetwork(void *a1, const char *a2, ...)
{
  return [a1 establishedLinkNetwork];
}

id objc_msgSend_exit(void *a1, const char *a2, ...)
{
  return [a1 exit];
}

id objc_msgSend_expiredWalletIDs(void *a1, const char *a2, ...)
{
  return [a1 expiredWalletIDs];
}

id objc_msgSend_externalForm(void *a1, const char *a2, ...)
{
  return [a1 externalForm];
}

id objc_msgSend_fetchSoftErrorContextData(void *a1, const char *a2, ...)
{
  return [a1 fetchSoftErrorContextData];
}

id objc_msgSend_fetchWiFiAssetsFromServer(void *a1, const char *a2, ...)
{
  return [a1 fetchWiFiAssetsFromServer];
}

id objc_msgSend_finalizeFirstSessionThatRequiresItWhenAppropriate(void *a1, const char *a2, ...)
{
  return [a1 finalizeFirstSessionThatRequiresItWhenAppropriate];
}

id objc_msgSend_findAndJoinNetwork(void *a1, const char *a2, ...)
{
  return [a1 findAndJoinNetwork];
}

id objc_msgSend_firstName(void *a1, const char *a2, ...)
{
  return [a1 firstName];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return [a1 firstObject];
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return [a1 flags];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return [a1 floatValue];
}

id objc_msgSend_followMode(void *a1, const char *a2, ...)
{
  return [a1 followMode];
}

id objc_msgSend_followModePreferredBand(void *a1, const char *a2, ...)
{
  return [a1 followModePreferredBand];
}

id objc_msgSend_forceBSSID(void *a1, const char *a2, ...)
{
  return [a1 forceBSSID];
}

id objc_msgSend_forceBeaconInterval100ms(void *a1, const char *a2, ...)
{
  return [a1 forceBeaconInterval100ms];
}

id objc_msgSend_forceHiddenMode(void *a1, const char *a2, ...)
{
  return [a1 forceHiddenMode];
}

id objc_msgSend_getBSSIDForCurrentSession(void *a1, const char *a2, ...)
{
  return [a1 getBSSIDForCurrentSession];
}

id objc_msgSend_getErrorCounters(void *a1, const char *a2, ...)
{
  return [a1 getErrorCounters];
}

id objc_msgSend_getHomeBundleIds(void *a1, const char *a2, ...)
{
  return [a1 getHomeBundleIds];
}

id objc_msgSend_getKnownNonNetworkingBundleIds(void *a1, const char *a2, ...)
{
  return [a1 getKnownNonNetworkingBundleIds];
}

id objc_msgSend_getLocaleCountryCode(void *a1, const char *a2, ...)
{
  return [a1 getLocaleCountryCode];
}

id objc_msgSend_getLocaleLastUpdatedTime(void *a1, const char *a2, ...)
{
  return [a1 getLocaleLastUpdatedTime];
}

id objc_msgSend_getLocaleSource(void *a1, const char *a2, ...)
{
  return [a1 getLocaleSource];
}

id objc_msgSend_getLogLevelEnable(void *a1, const char *a2, ...)
{
  return [a1 getLogLevelEnable];
}

id objc_msgSend_getPairedVersionID(void *a1, const char *a2, ...)
{
  return [a1 getPairedVersionID];
}

id objc_msgSend_getReachabilityStatus(void *a1, const char *a2, ...)
{
  return [a1 getReachabilityStatus];
}

id objc_msgSend_getWiFiManager(void *a1, const char *a2, ...)
{
  return [a1 getWiFiManager];
}

id objc_msgSend_group(void *a1, const char *a2, ...)
{
  return [a1 group];
}

id objc_msgSend_has6GHzOnlyBSS(void *a1, const char *a2, ...)
{
  return [a1 has6GHzOnlyBSS];
}

id objc_msgSend_hasBeenFinalized(void *a1, const char *a2, ...)
{
  return [a1 hasBeenFinalized];
}

id objc_msgSend_hasConnected(void *a1, const char *a2, ...)
{
  return [a1 hasConnected];
}

id objc_msgSend_hasRegisteredWithDaemon(void *a1, const char *a2, ...)
{
  return [a1 hasRegisteredWithDaemon];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return [a1 hash];
}

id objc_msgSend_hiddenState(void *a1, const char *a2, ...)
{
  return [a1 hiddenState];
}

id objc_msgSend_historicalScorecardAtAssoc(void *a1, const char *a2, ...)
{
  return [a1 historicalScorecardAtAssoc];
}

id objc_msgSend_historicallyBadLinkQualityNetworkSsidsCache(void *a1, const char *a2, ...)
{
  return [a1 historicallyBadLinkQualityNetworkSsidsCache];
}

id objc_msgSend_horizontalAccuracy(void *a1, const char *a2, ...)
{
  return [a1 horizontalAccuracy];
}

id objc_msgSend_hotspotDevice(void *a1, const char *a2, ...)
{
  return [a1 hotspotDevice];
}

id objc_msgSend_hotspotSession(void *a1, const char *a2, ...)
{
  return [a1 hotspotSession];
}

id objc_msgSend_hotspotUpdateNetworkcallback(void *a1, const char *a2, ...)
{
  return [a1 hotspotUpdateNetworkcallback];
}

id objc_msgSend_hour(void *a1, const char *a2, ...)
{
  return [a1 hour];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return [a1 identifier];
}

id objc_msgSend_idsSendFailureCount(void *a1, const char *a2, ...)
{
  return [a1 idsSendFailureCount];
}

id objc_msgSend_idsService(void *a1, const char *a2, ...)
{
  return [a1 idsService];
}

id objc_msgSend_incrementCount(void *a1, const char *a2, ...)
{
  return [a1 incrementCount];
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return [a1 indexSet];
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return [a1 info];
}

id objc_msgSend_infoDictionary(void *a1, const char *a2, ...)
{
  return [a1 infoDictionary];
}

id objc_msgSend_initEventMitigation(void *a1, const char *a2, ...)
{
  return [a1 initEventMitigation];
}

id objc_msgSend_initialSetupCompleted(void *a1, const char *a2, ...)
{
  return [a1 initialSetupCompleted];
}

id objc_msgSend_initiatorDataAddress(void *a1, const char *a2, ...)
{
  return [a1 initiatorDataAddress];
}

id objc_msgSend_installMegaWiFiProfile(void *a1, const char *a2, ...)
{
  return [a1 installMegaWiFiProfile];
}

id objc_msgSend_instanceName(void *a1, const char *a2, ...)
{
  return [a1 instanceName];
}

id objc_msgSend_int32Value(void *a1, const char *a2, ...)
{
  return [a1 int32Value];
}

id objc_msgSend_int64Value(void *a1, const char *a2, ...)
{
  return [a1 int64Value];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return [a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return [a1 integerValue];
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return [a1 interface];
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return [a1 interfaceName];
}

id objc_msgSend_internalQueue(void *a1, const char *a2, ...)
{
  return [a1 internalQueue];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return [a1 invalidate];
}

id objc_msgSend_invalidateAndCancel(void *a1, const char *a2, ...)
{
  return [a1 invalidateAndCancel];
}

id objc_msgSend_ipAddrAssigned(void *a1, const char *a2, ...)
{
  return [a1 ipAddrAssigned];
}

id objc_msgSend_is2GHz(void *a1, const char *a2, ...)
{
  return [a1 is2GHz];
}

id objc_msgSend_is5GHz(void *a1, const char *a2, ...)
{
  return [a1 is5GHz];
}

id objc_msgSend_is6GHz(void *a1, const char *a2, ...)
{
  return [a1 is6GHz];
}

id objc_msgSend_isAVConferenceActive(void *a1, const char *a2, ...)
{
  return [a1 isAVConferenceActive];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return [a1 isActive];
}

id objc_msgSend_isActivityAvailable(void *a1, const char *a2, ...)
{
  return [a1 isActivityAvailable];
}

id objc_msgSend_isAirplayActiveOverInfra(void *a1, const char *a2, ...)
{
  return [a1 isAirplayActiveOverInfra];
}

id objc_msgSend_isAllowedInLockdownMode(void *a1, const char *a2, ...)
{
  return [a1 isAllowedInLockdownMode];
}

id objc_msgSend_isAnyCallInProgress(void *a1, const char *a2, ...)
{
  return [a1 isAnyCallInProgress];
}

id objc_msgSend_isAskToJoinAllowed(void *a1, const char *a2, ...)
{
  return [a1 isAskToJoinAllowed];
}

id objc_msgSend_isAtNonPrimaryHomeLocation(void *a1, const char *a2, ...)
{
  return [a1 isAtNonPrimaryHomeLocation];
}

id objc_msgSend_isAtPrimaryHomeLocation(void *a1, const char *a2, ...)
{
  return [a1 isAtPrimaryHomeLocation];
}

id objc_msgSend_isAuthorized(void *a1, const char *a2, ...)
{
  return [a1 isAuthorized];
}

id objc_msgSend_isAutoJoinDisabled(void *a1, const char *a2, ...)
{
  return [a1 isAutoJoinDisabled];
}

id objc_msgSend_isAutoJoined(void *a1, const char *a2, ...)
{
  return [a1 isAutoJoined];
}

id objc_msgSend_isBackgroundActivityRegistered(void *a1, const char *a2, ...)
{
  return [a1 isBackgroundActivityRegistered];
}

id objc_msgSend_isCPMSSupported(void *a1, const char *a2, ...)
{
  return [a1 isCPMSSupported];
}

id objc_msgSend_isCallHostedOnThisDevice(void *a1, const char *a2, ...)
{
  return [a1 isCallHostedOnThisDevice];
}

id objc_msgSend_isCallKitActive(void *a1, const char *a2, ...)
{
  return [a1 isCallKitActive];
}

id objc_msgSend_isCarDNDActive(void *a1, const char *a2, ...)
{
  return [a1 isCarDNDActive];
}

id objc_msgSend_isCarModeActive(void *a1, const char *a2, ...)
{
  return [a1 isCarModeActive];
}

id objc_msgSend_isCarPlay(void *a1, const char *a2, ...)
{
  return [a1 isCarPlay];
}

id objc_msgSend_isCellularDataUsable(void *a1, const char *a2, ...)
{
  return [a1 isCellularDataUsable];
}

id objc_msgSend_isCellularInexpensive5G(void *a1, const char *a2, ...)
{
  return [a1 isCellularInexpensive5G];
}

id objc_msgSend_isClientAssociated(void *a1, const char *a2, ...)
{
  return [a1 isClientAssociated];
}

id objc_msgSend_isCoPresenceActive(void *a1, const char *a2, ...)
{
  return [a1 isCoPresenceActive];
}

id objc_msgSend_isDNSHeuristicsFilteredNetwork(void *a1, const char *a2, ...)
{
  return [a1 isDNSHeuristicsFilteredNetwork];
}

id objc_msgSend_isDefaultPairedDevice(void *a1, const char *a2, ...)
{
  return [a1 isDefaultPairedDevice];
}

id objc_msgSend_isDeviceLocked(void *a1, const char *a2, ...)
{
  return [a1 isDeviceLocked];
}

id objc_msgSend_isDisableAutoJoinActivityRegistered(void *a1, const char *a2, ...)
{
  return [a1 isDisableAutoJoinActivityRegistered];
}

id objc_msgSend_isDisplayOn(void *a1, const char *a2, ...)
{
  return [a1 isDisplayOn];
}

id objc_msgSend_isEAP(void *a1, const char *a2, ...)
{
  return [a1 isEAP];
}

id objc_msgSend_isEAPShareBlockedByManagedDefault(void *a1, const char *a2, ...)
{
  return [a1 isEAPShareBlockedByManagedDefault];
}

id objc_msgSend_isEdgeBSS(void *a1, const char *a2, ...)
{
  return [a1 isEdgeBSS];
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return [a1 isEnabled];
}

id objc_msgSend_isFirstUserUnlocked(void *a1, const char *a2, ...)
{
  return [a1 isFirstUserUnlocked];
}

id objc_msgSend_isForegroundActivityRegistered(void *a1, const char *a2, ...)
{
  return [a1 isForegroundActivityRegistered];
}

id objc_msgSend_isGameModeActive(void *a1, const char *a2, ...)
{
  return [a1 isGameModeActive];
}

id objc_msgSend_isHS2(void *a1, const char *a2, ...)
{
  return [a1 isHS2];
}

id objc_msgSend_isHostedOnCurrentDevice(void *a1, const char *a2, ...)
{
  return [a1 isHostedOnCurrentDevice];
}

id objc_msgSend_isInGameMode(void *a1, const char *a2, ...)
{
  return [a1 isInGameMode];
}

id objc_msgSend_isInHomeScreen(void *a1, const char *a2, ...)
{
  return [a1 isInHomeScreen];
}

id objc_msgSend_isInNonNetworkingApp(void *a1, const char *a2, ...)
{
  return [a1 isInNonNetworkingApp];
}

id objc_msgSend_isInProgress(void *a1, const char *a2, ...)
{
  return [a1 isInProgress];
}

id objc_msgSend_isInitialSetupCompleted(void *a1, const char *a2, ...)
{
  return [a1 isInitialSetupCompleted];
}

id objc_msgSend_isInterfaceRankingInProgress(void *a1, const char *a2, ...)
{
  return [a1 isInterfaceRankingInProgress];
}

id objc_msgSend_isKeychainUnlocked(void *a1, const char *a2, ...)
{
  return [a1 isKeychainUnlocked];
}

id objc_msgSend_isLQAIndicatingTxStall(void *a1, const char *a2, ...)
{
  return [a1 isLQAIndicatingTxStall];
}

id objc_msgSend_isLastRoamDueToBeaconLost(void *a1, const char *a2, ...)
{
  return [a1 isLastRoamDueToBeaconLost];
}

id objc_msgSend_isMCInitialized(void *a1, const char *a2, ...)
{
  return [a1 isMCInitialized];
}

id objc_msgSend_isManagedAppleID(void *a1, const char *a2, ...)
{
  return [a1 isManagedAppleID];
}

id objc_msgSend_isMe(void *a1, const char *a2, ...)
{
  return [a1 isMe];
}

id objc_msgSend_isMediaPlaying(void *a1, const char *a2, ...)
{
  return [a1 isMediaPlaying];
}

id objc_msgSend_isMegaWiFiProfileInstalled(void *a1, const char *a2, ...)
{
  return [a1 isMegaWiFiProfileInstalled];
}

id objc_msgSend_isNANPublisherStarted(void *a1, const char *a2, ...)
{
  return [a1 isNANPublisherStarted];
}

id objc_msgSend_isNearby(void *a1, const char *a2, ...)
{
  return [a1 isNearby];
}

id objc_msgSend_isNetworkRecommendationAllowed(void *a1, const char *a2, ...)
{
  return [a1 isNetworkRecommendationAllowed];
}

id objc_msgSend_isNetworkTraitsCacheValid(void *a1, const char *a2, ...)
{
  return [a1 isNetworkTraitsCacheValid];
}

id objc_msgSend_isNetworkingAppInForeground(void *a1, const char *a2, ...)
{
  return [a1 isNetworkingAppInForeground];
}

id objc_msgSend_isOpen(void *a1, const char *a2, ...)
{
  return [a1 isOpen];
}

id objc_msgSend_isPasspoint(void *a1, const char *a2, ...)
{
  return [a1 isPasspoint];
}

id objc_msgSend_isPasswordSharingDisabled(void *a1, const char *a2, ...)
{
  return [a1 isPasswordSharingDisabled];
}

id objc_msgSend_isPersonalHotspot(void *a1, const char *a2, ...)
{
  return [a1 isPersonalHotspot];
}

id objc_msgSend_isPersonalHotspotModificationAllowed(void *a1, const char *a2, ...)
{
  return [a1 isPersonalHotspotModificationAllowed];
}

id objc_msgSend_isPersonalHotspotRecommendationAllowed(void *a1, const char *a2, ...)
{
  return [a1 isPersonalHotspotRecommendationAllowed];
}

id objc_msgSend_isPrivacyProxyEnabled(void *a1, const char *a2, ...)
{
  return [a1 isPrivacyProxyEnabled];
}

id objc_msgSend_isProfileBased(void *a1, const char *a2, ...)
{
  return [a1 isProfileBased];
}

id objc_msgSend_isPublicAirPlayNetwork(void *a1, const char *a2, ...)
{
  return [a1 isPublicAirPlayNetwork];
}

id objc_msgSend_isQuiesceWiFiActivityRegistered(void *a1, const char *a2, ...)
{
  return [a1 isQuiesceWiFiActivityRegistered];
}

id objc_msgSend_isRealTimeAppActive(void *a1, const char *a2, ...)
{
  return [a1 isRealTimeAppActive];
}

id objc_msgSend_isRepeatable(void *a1, const char *a2, ...)
{
  return [a1 isRepeatable];
}

id objc_msgSend_isRoamLateDueToDelta(void *a1, const char *a2, ...)
{
  return [a1 isRoamLateDueToDelta];
}

id objc_msgSend_isScanning(void *a1, const char *a2, ...)
{
  return [a1 isScanning];
}

id objc_msgSend_isServiceProviderRoamingEnabled(void *a1, const char *a2, ...)
{
  return [a1 isServiceProviderRoamingEnabled];
}

id objc_msgSend_isSessionBased(void *a1, const char *a2, ...)
{
  return [a1 isSessionBased];
}

id objc_msgSend_isSessionTerminated(void *a1, const char *a2, ...)
{
  return [a1 isSessionTerminated];
}

id objc_msgSend_isSetupCompleted(void *a1, const char *a2, ...)
{
  return [a1 isSetupCompleted];
}

id objc_msgSend_isStandalone6G(void *a1, const char *a2, ...)
{
  return [a1 isStandalone6G];
}

id objc_msgSend_isSubscriberStopped(void *a1, const char *a2, ...)
{
  return [a1 isSubscriberStopped];
}

id objc_msgSend_isSupervised(void *a1, const char *a2, ...)
{
  return [a1 isSupervised];
}

id objc_msgSend_isSupervisedDevice(void *a1, const char *a2, ...)
{
  return [a1 isSupervisedDevice];
}

id objc_msgSend_isTimeDeferredNetworksPresent(void *a1, const char *a2, ...)
{
  return [a1 isTimeDeferredNetworksPresent];
}

id objc_msgSend_isUsingSustainedCellularData(void *a1, const char *a2, ...)
{
  return [a1 isUsingSustainedCellularData];
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return [a1 isValid];
}

id objc_msgSend_isWPA2(void *a1, const char *a2, ...)
{
  return [a1 isWPA2];
}

id objc_msgSend_isWaitingForIdsMessageDelivery(void *a1, const char *a2, ...)
{
  return [a1 isWaitingForIdsMessageDelivery];
}

id objc_msgSend_isWaitingForIdsSendResponse(void *a1, const char *a2, ...)
{
  return [a1 isWaitingForIdsSendResponse];
}

id objc_msgSend_isWiFiBoundActivityRegistered(void *a1, const char *a2, ...)
{
  return [a1 isWiFiBoundActivityRegistered];
}

id objc_msgSend_isWiFiCallInProgress(void *a1, const char *a2, ...)
{
  return [a1 isWiFiCallInProgress];
}

id objc_msgSend_isWiFiPowerModificationAllowed(void *a1, const char *a2, ...)
{
  return [a1 isWiFiPowerModificationAllowed];
}

id objc_msgSend_isWiFiPowerModificationDisabled(void *a1, const char *a2, ...)
{
  return [a1 isWiFiPowerModificationDisabled];
}

id objc_msgSend_isWiFiWithAllowedNetworksOnlyEnforced(void *a1, const char *a2, ...)
{
  return [a1 isWiFiWithAllowedNetworksOnlyEnforced];
}

id objc_msgSend_isWoWActivityRegistered(void *a1, const char *a2, ...)
{
  return [a1 isWoWActivityRegistered];
}

id objc_msgSend_joinCandidates(void *a1, const char *a2, ...)
{
  return [a1 joinCandidates];
}

id objc_msgSend_joinFailureList(void *a1, const char *a2, ...)
{
  return [a1 joinFailureList];
}

id objc_msgSend_joinedNetwork(void *a1, const char *a2, ...)
{
  return [a1 joinedNetwork];
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return [a1 key];
}

id objc_msgSend_keyDidChangeHandler(void *a1, const char *a2, ...)
{
  return [a1 keyDidChangeHandler];
}

id objc_msgSend_keychainAccessibleNow(void *a1, const char *a2, ...)
{
  return [a1 keychainAccessibleNow];
}

id objc_msgSend_knownNetworkProfile(void *a1, const char *a2, ...)
{
  return [a1 knownNetworkProfile];
}

id objc_msgSend_knownNetworks(void *a1, const char *a2, ...)
{
  return [a1 knownNetworks];
}

id objc_msgSend_knownNetworksListChanged(void *a1, const char *a2, ...)
{
  return [a1 knownNetworksListChanged];
}

id objc_msgSend_lastAssociatedAt(void *a1, const char *a2, ...)
{
  return [a1 lastAssociatedAt];
}

id objc_msgSend_lastBytesInSample(void *a1, const char *a2, ...)
{
  return [a1 lastBytesInSample];
}

id objc_msgSend_lastBytesOutSample(void *a1, const char *a2, ...)
{
  return [a1 lastBytesOutSample];
}

id objc_msgSend_lastDiscoveredAt(void *a1, const char *a2, ...)
{
  return [a1 lastDiscoveredAt];
}

id objc_msgSend_lastHostTriggeredRoamReason(void *a1, const char *a2, ...)
{
  return [a1 lastHostTriggeredRoamReason];
}

id objc_msgSend_lastJoinedAt(void *a1, const char *a2, ...)
{
  return [a1 lastJoinedAt];
}

id objc_msgSend_lastJoinedBySystemAt(void *a1, const char *a2, ...)
{
  return [a1 lastJoinedBySystemAt];
}

id objc_msgSend_lastJoinedBySystemAtWeek(void *a1, const char *a2, ...)
{
  return [a1 lastJoinedBySystemAtWeek];
}

id objc_msgSend_lastJoinedByUserAt(void *a1, const char *a2, ...)
{
  return [a1 lastJoinedByUserAt];
}

id objc_msgSend_lastLocation(void *a1, const char *a2, ...)
{
  return [a1 lastLocation];
}

id objc_msgSend_lastName(void *a1, const char *a2, ...)
{
  return [a1 lastName];
}

id objc_msgSend_lastNotifiedAt(void *a1, const char *a2, ...)
{
  return [a1 lastNotifiedAt];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return [a1 lastObject];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return [a1 lastPathComponent];
}

id objc_msgSend_lastRangingSessionMetric(void *a1, const char *a2, ...)
{
  return [a1 lastRangingSessionMetric];
}

id objc_msgSend_lastRecommendationLocation(void *a1, const char *a2, ...)
{
  return [a1 lastRecommendationLocation];
}

id objc_msgSend_lastRecommendedSSID(void *a1, const char *a2, ...)
{
  return [a1 lastRecommendedSSID];
}

id objc_msgSend_lastRoamAttemptTimestamp(void *a1, const char *a2, ...)
{
  return [a1 lastRoamAttemptTimestamp];
}

id objc_msgSend_lastRoamStatusFailedNoCandidateTs(void *a1, const char *a2, ...)
{
  return [a1 lastRoamStatusFailedNoCandidateTs];
}

id objc_msgSend_lastRoamSuppressionRemovalTime(void *a1, const char *a2, ...)
{
  return [a1 lastRoamSuppressionRemovalTime];
}

id objc_msgSend_lastSyncedCompanionAssistedAutoJoinData(void *a1, const char *a2, ...)
{
  return [a1 lastSyncedCompanionAssistedAutoJoinData];
}

id objc_msgSend_lastSyncedCompanionAssistedAutoJoinDataGUID(void *a1, const char *a2, ...)
{
  return [a1 lastSyncedCompanionAssistedAutoJoinDataGUID];
}

id objc_msgSend_lastSyncedCompanionLocaleData(void *a1, const char *a2, ...)
{
  return [a1 lastSyncedCompanionLocaleData];
}

id objc_msgSend_lastSyncedCompanionLocaleGUID(void *a1, const char *a2, ...)
{
  return [a1 lastSyncedCompanionLocaleGUID];
}

id objc_msgSend_lastSyncedKnownNetworkPayloadData(void *a1, const char *a2, ...)
{
  return [a1 lastSyncedKnownNetworkPayloadData];
}

id objc_msgSend_lastSyncedKnownNetworkPayloadDataGUID(void *a1, const char *a2, ...)
{
  return [a1 lastSyncedKnownNetworkPayloadDataGUID];
}

id objc_msgSend_lastSyncedKnownNetworksData(void *a1, const char *a2, ...)
{
  return [a1 lastSyncedKnownNetworksData];
}

id objc_msgSend_lastSyncedKnownNetworksDataGUID(void *a1, const char *a2, ...)
{
  return [a1 lastSyncedKnownNetworksDataGUID];
}

id objc_msgSend_latestLocation(void *a1, const char *a2, ...)
{
  return [a1 latestLocation];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return [a1 length];
}

id objc_msgSend_linkEstablishedCallbackContext(void *a1, const char *a2, ...)
{
  return [a1 linkEstablishedCallbackContext];
}

id objc_msgSend_linkTerminatedCallbackContext(void *a1, const char *a2, ...)
{
  return [a1 linkTerminatedCallbackContext];
}

id objc_msgSend_linkUpTimestamp(void *a1, const char *a2, ...)
{
  return [a1 linkUpTimestamp];
}

id objc_msgSend_localAssistedDiscoveryMetric(void *a1, const char *a2, ...)
{
  return [a1 localAssistedDiscoveryMetric];
}

id objc_msgSend_localDataAddress(void *a1, const char *a2, ...)
{
  return [a1 localDataAddress];
}

id objc_msgSend_localInterfaceIndex(void *a1, const char *a2, ...)
{
  return [a1 localInterfaceIndex];
}

id objc_msgSend_localMasterChannel(void *a1, const char *a2, ...)
{
  return [a1 localMasterChannel];
}

id objc_msgSend_localPreferredChannel(void *a1, const char *a2, ...)
{
  return [a1 localPreferredChannel];
}

id objc_msgSend_localSecondaryPreferredChannel(void *a1, const char *a2, ...)
{
  return [a1 localSecondaryPreferredChannel];
}

id objc_msgSend_localTimeZone(void *a1, const char *a2, ...)
{
  return [a1 localTimeZone];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return [a1 localizedDescription];
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return [a1 localizedName];
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return [a1 location];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return [a1 longLongValue];
}

id objc_msgSend_lostNetworkScanCount(void *a1, const char *a2, ...)
{
  return [a1 lostNetworkScanCount];
}

id objc_msgSend_lowDataMode(void *a1, const char *a2, ...)
{
  return [a1 lowDataMode];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return [a1 lowercaseString];
}

id objc_msgSend_lqaMgr(void *a1, const char *a2, ...)
{
  return [a1 lqaMgr];
}

id objc_msgSend_macAddress(void *a1, const char *a2, ...)
{
  return [a1 macAddress];
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return [a1 mainRunLoop];
}

id objc_msgSend_managedEventDispatchPort(void *a1, const char *a2, ...)
{
  return [a1 managedEventDispatchPort];
}

id objc_msgSend_managedEventNotifyPort(void *a1, const char *a2, ...)
{
  return [a1 managedEventNotifyPort];
}

id objc_msgSend_managedEventNotifyToken(void *a1, const char *a2, ...)
{
  return [a1 managedEventNotifyToken];
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return [a1 manager];
}

id objc_msgSend_managerQueue(void *a1, const char *a2, ...)
{
  return [a1 managerQueue];
}

id objc_msgSend_matchFrameType(void *a1, const char *a2, ...)
{
  return [a1 matchFrameType];
}

id objc_msgSend_matchMACAddresses(void *a1, const char *a2, ...)
{
  return [a1 matchMACAddresses];
}

id objc_msgSend_matchSigningIdentifier(void *a1, const char *a2, ...)
{
  return [a1 matchSigningIdentifier];
}

id objc_msgSend_matchingKnownNetworkProfile(void *a1, const char *a2, ...)
{
  return [a1 matchingKnownNetworkProfile];
}

id objc_msgSend_maxRssiDeltaInRoamCache(void *a1, const char *a2, ...)
{
  return [a1 maxRssiDeltaInRoamCache];
}

id objc_msgSend_mcConnection(void *a1, const char *a2, ...)
{
  return [a1 mcConnection];
}

id objc_msgSend_mcInitialized(void *a1, const char *a2, ...)
{
  return [a1 mcInitialized];
}

id objc_msgSend_members(void *a1, const char *a2, ...)
{
  return [a1 members];
}

id objc_msgSend_mergeScanResults(void *a1, const char *a2, ...)
{
  return [a1 mergeScanResults];
}

id objc_msgSend_metric(void *a1, const char *a2, ...)
{
  return [a1 metric];
}

id objc_msgSend_metricName(void *a1, const char *a2, ...)
{
  return [a1 metricName];
}

id objc_msgSend_minBatteryIndex(void *a1, const char *a2, ...)
{
  return [a1 minBatteryIndex];
}

id objc_msgSend_minRssiDeltaInRoamCache(void *a1, const char *a2, ...)
{
  return [a1 minRssiDeltaInRoamCache];
}

id objc_msgSend_minimumTimestamp(void *a1, const char *a2, ...)
{
  return [a1 minimumTimestamp];
}

id objc_msgSend_minute(void *a1, const char *a2, ...)
{
  return [a1 minute];
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return [a1 mode];
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return [a1 model];
}

id objc_msgSend_modifyMap(void *a1, const char *a2, ...)
{
  return [a1 modifyMap];
}

id objc_msgSend_monitoredInterfaceNames(void *a1, const char *a2, ...)
{
  return [a1 monitoredInterfaceNames];
}

id objc_msgSend_monitoring(void *a1, const char *a2, ...)
{
  return [a1 monitoring];
}

id objc_msgSend_motionQ(void *a1, const char *a2, ...)
{
  return [a1 motionQ];
}

id objc_msgSend_motionStartTime(void *a1, const char *a2, ...)
{
  return [a1 motionStartTime];
}

id objc_msgSend_motionState(void *a1, const char *a2, ...)
{
  return [a1 motionState];
}

id objc_msgSend_motionStateChangeCb(void *a1, const char *a2, ...)
{
  return [a1 motionStateChangeCb];
}

id objc_msgSend_movingAttribute(void *a1, const char *a2, ...)
{
  return [a1 movingAttribute];
}

id objc_msgSend_movingNetworkSsidsCache(void *a1, const char *a2, ...)
{
  return [a1 movingNetworkSsidsCache];
}

id objc_msgSend_multicastPreferenceSet(void *a1, const char *a2, ...)
{
  return [a1 multicastPreferenceSet];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return [a1 mutableCopy];
}

id objc_msgSend_mutableFields(void *a1, const char *a2, ...)
{
  return [a1 mutableFields];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return [a1 name];
}

id objc_msgSend_nanAssocData(void *a1, const char *a2, ...)
{
  return [a1 nanAssocData];
}

id objc_msgSend_navigating(void *a1, const char *a2, ...)
{
  return [a1 navigating];
}

id objc_msgSend_navigationListener(void *a1, const char *a2, ...)
{
  return [a1 navigationListener];
}

id objc_msgSend_network(void *a1, const char *a2, ...)
{
  return [a1 network];
}

id objc_msgSend_networkDenyList(void *a1, const char *a2, ...)
{
  return [a1 networkDenyList];
}

id objc_msgSend_networkGroupID(void *a1, const char *a2, ...)
{
  return [a1 networkGroupID];
}

id objc_msgSend_networkGroupPriority(void *a1, const char *a2, ...)
{
  return [a1 networkGroupPriority];
}

id objc_msgSend_networkName(void *a1, const char *a2, ...)
{
  return [a1 networkName];
}

id objc_msgSend_networkOriginator(void *a1, const char *a2, ...)
{
  return [a1 networkOriginator];
}

id objc_msgSend_networkRecord(void *a1, const char *a2, ...)
{
  return [a1 networkRecord];
}

id objc_msgSend_networkType(void *a1, const char *a2, ...)
{
  return [a1 networkType];
}

id objc_msgSend_networks(void *a1, const char *a2, ...)
{
  return [a1 networks];
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return [a1 nextObject];
}

id objc_msgSend_notification(void *a1, const char *a2, ...)
{
  return [a1 notification];
}

id objc_msgSend_notificationHistory(void *a1, const char *a2, ...)
{
  return [a1 notificationHistory];
}

id objc_msgSend_notificationMapping(void *a1, const char *a2, ...)
{
  return [a1 notificationMapping];
}

id objc_msgSend_notifications(void *a1, const char *a2, ...)
{
  return [a1 notifications];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return [a1 now];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return [a1 null];
}

id objc_msgSend_numDaysSinceAssocOverrideDeferral(void *a1, const char *a2, ...)
{
  return [a1 numDaysSinceAssocOverrideDeferral];
}

id objc_msgSend_numberOfActiveEndpoints(void *a1, const char *a2, ...)
{
  return [a1 numberOfActiveEndpoints];
}

id objc_msgSend_numberOfCandidates(void *a1, const char *a2, ...)
{
  return [a1 numberOfCandidates];
}

id objc_msgSend_numberOfMeasurements(void *a1, const char *a2, ...)
{
  return [a1 numberOfMeasurements];
}

id objc_msgSend_numberOfReports(void *a1, const char *a2, ...)
{
  return [a1 numberOfReports];
}

id objc_msgSend_numberOfScans(void *a1, const char *a2, ...)
{
  return [a1 numberOfScans];
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return [a1 object];
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return [a1 objectEnumerator];
}

id objc_msgSend_omnipresentNetworkSsidsCache(void *a1, const char *a2, ...)
{
  return [a1 omnipresentNetworkSsidsCache];
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return [a1 options];
}

id objc_msgSend_orderedSet(void *a1, const char *a2, ...)
{
  return [a1 orderedSet];
}

id objc_msgSend_origin(void *a1, const char *a2, ...)
{
  return [a1 origin];
}

id objc_msgSend_originator(void *a1, const char *a2, ...)
{
  return [a1 originator];
}

id objc_msgSend_osSupportsAutoHotspot(void *a1, const char *a2, ...)
{
  return [a1 osSupportsAutoHotspot];
}

id objc_msgSend_outputs(void *a1, const char *a2, ...)
{
  return [a1 outputs];
}

id objc_msgSend_overrideApplicationState(void *a1, const char *a2, ...)
{
  return [a1 overrideApplicationState];
}

id objc_msgSend_overrideNetworkState(void *a1, const char *a2, ...)
{
  return [a1 overrideNetworkState];
}

id objc_msgSend_pairedDeviceDestinationID(void *a1, const char *a2, ...)
{
  return [a1 pairedDeviceDestinationID];
}

id objc_msgSend_pairedDeviceVersionID(void *a1, const char *a2, ...)
{
  return [a1 pairedDeviceVersionID];
}

id objc_msgSend_paramMaxRoamRetriesInWindow(void *a1, const char *a2, ...)
{
  return [a1 paramMaxRoamRetriesInWindow];
}

id objc_msgSend_paramMinRoamRetryWaitTime(void *a1, const char *a2, ...)
{
  return [a1 paramMinRoamRetryWaitTime];
}

id objc_msgSend_paramMinRoamWaitTimeFromLinkUpInSec(void *a1, const char *a2, ...)
{
  return [a1 paramMinRoamWaitTimeFromLinkUpInSec];
}

id objc_msgSend_paramWindowSizeInSec(void *a1, const char *a2, ...)
{
  return [a1 paramWindowSizeInSec];
}

id objc_msgSend_password(void *a1, const char *a2, ...)
{
  return [a1 password];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return [a1 path];
}

id objc_msgSend_payloadUUID(void *a1, const char *a2, ...)
{
  return [a1 payloadUUID];
}

id objc_msgSend_peerAddress(void *a1, const char *a2, ...)
{
  return [a1 peerAddress];
}

id objc_msgSend_peerAssistedDiscoveryMetric(void *a1, const char *a2, ...)
{
  return [a1 peerAssistedDiscoveryMetric];
}

id objc_msgSend_peerMACAddress(void *a1, const char *a2, ...)
{
  return [a1 peerMACAddress];
}

id objc_msgSend_peerMasterChannel(void *a1, const char *a2, ...)
{
  return [a1 peerMasterChannel];
}

id objc_msgSend_peerPreferredChannel(void *a1, const char *a2, ...)
{
  return [a1 peerPreferredChannel];
}

id objc_msgSend_peerPrimaryPreferredChannel(void *a1, const char *a2, ...)
{
  return [a1 peerPrimaryPreferredChannel];
}

id objc_msgSend_peerSecondaryPreferredChannel(void *a1, const char *a2, ...)
{
  return [a1 peerSecondaryPreferredChannel];
}

id objc_msgSend_peerSupportedChannelFlags(void *a1, const char *a2, ...)
{
  return [a1 peerSupportedChannelFlags];
}

id objc_msgSend_pendingRequests(void *a1, const char *a2, ...)
{
  return [a1 pendingRequests];
}

id objc_msgSend_performSensing(void *a1, const char *a2, ...)
{
  return [a1 performSensing];
}

id objc_msgSend_periodicTasksLastRanAt(void *a1, const char *a2, ...)
{
  return [a1 periodicTasksLastRanAt];
}

id objc_msgSend_phyMode(void *a1, const char *a2, ...)
{
  return [a1 phyMode];
}

id objc_msgSend_placeLabels(void *a1, const char *a2, ...)
{
  return [a1 placeLabels];
}

id objc_msgSend_popularityScore(void *a1, const char *a2, ...)
{
  return [a1 popularityScore];
}

id objc_msgSend_portType(void *a1, const char *a2, ...)
{
  return [a1 portType];
}

id objc_msgSend_preparedScanResults(void *a1, const char *a2, ...)
{
  return [a1 preparedScanResults];
}

id objc_msgSend_previousRoams(void *a1, const char *a2, ...)
{
  return [a1 previousRoams];
}

id objc_msgSend_printDeferredNetworks(void *a1, const char *a2, ...)
{
  return [a1 printDeferredNetworks];
}

id objc_msgSend_privacyProxyBlockedReason(void *a1, const char *a2, ...)
{
  return [a1 privacyProxyBlockedReason];
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return [a1 processIdentifier];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return [a1 processInfo];
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return [a1 processName];
}

id objc_msgSend_productVersion(void *a1, const char *a2, ...)
{
  return [a1 productVersion];
}

id objc_msgSend_profileIdentifier(void *a1, const char *a2, ...)
{
  return [a1 profileIdentifier];
}

id objc_msgSend_prominentScanResultsCount(void *a1, const char *a2, ...)
{
  return [a1 prominentScanResultsCount];
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return [a1 properties];
}

id objc_msgSend_providerContext(void *a1, const char *a2, ...)
{
  return [a1 providerContext];
}

id objc_msgSend_publicAttribute(void *a1, const char *a2, ...)
{
  return [a1 publicAttribute];
}

id objc_msgSend_publisherMetricsCallback(void *a1, const char *a2, ...)
{
  return [a1 publisherMetricsCallback];
}

id objc_msgSend_publisherMetricsCallbackContext(void *a1, const char *a2, ...)
{
  return [a1 publisherMetricsCallbackContext];
}

id objc_msgSend_queryLOITypeAtLastLocation(void *a1, const char *a2, ...)
{
  return [a1 queryLOITypeAtLastLocation];
}

id objc_msgSend_queryLOITypeAtLatestLocation(void *a1, const char *a2, ...)
{
  return [a1 queryLOITypeAtLatestLocation];
}

id objc_msgSend_queryPeerDatabase(void *a1, const char *a2, ...)
{
  return [a1 queryPeerDatabase];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return [a1 queue];
}

id objc_msgSend_reSendIdsMessageBitMap(void *a1, const char *a2, ...)
{
  return [a1 reSendIdsMessageBitMap];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return [a1 reason];
}

id objc_msgSend_receivedAt(void *a1, const char *a2, ...)
{
  return [a1 receivedAt];
}

id objc_msgSend_receivedKnownNetworks(void *a1, const char *a2, ...)
{
  return [a1 receivedKnownNetworks];
}

id objc_msgSend_recentNotifications(void *a1, const char *a2, ...)
{
  return [a1 recentNotifications];
}

id objc_msgSend_registerForInitialSyncTrigger(void *a1, const char *a2, ...)
{
  return [a1 registerForInitialSyncTrigger];
}

id objc_msgSend_registerForSoftwareUpdateTrigger(void *a1, const char *a2, ...)
{
  return [a1 registerForSoftwareUpdateTrigger];
}

id objc_msgSend_registerSmartCoverStateCallback(void *a1, const char *a2, ...)
{
  return [a1 registerSmartCoverStateCallback];
}

id objc_msgSend_registeredActivities(void *a1, const char *a2, ...)
{
  return [a1 registeredActivities];
}

id objc_msgSend_registration(void *a1, const char *a2, ...)
{
  return [a1 registration];
}

id objc_msgSend_releaseKnownNetworkGuessingDictionary(void *a1, const char *a2, ...)
{
  return [a1 releaseKnownNetworkGuessingDictionary];
}

id objc_msgSend_releasePowerResources(void *a1, const char *a2, ...)
{
  return [a1 releasePowerResources];
}

id objc_msgSend_rememberUponSuccessfulAssociation(void *a1, const char *a2, ...)
{
  return [a1 rememberUponSuccessfulAssociation];
}

id objc_msgSend_removeAllDeliveredNotifications(void *a1, const char *a2, ...)
{
  return [a1 removeAllDeliveredNotifications];
}

id objc_msgSend_removeAllDenyListedItems(void *a1, const char *a2, ...)
{
  return [a1 removeAllDenyListedItems];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return [a1 removeAllObjects];
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return [a1 removeLastObject];
}

id objc_msgSend_repeatableValues(void *a1, const char *a2, ...)
{
  return [a1 repeatableValues];
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return [a1 request];
}

id objc_msgSend_requestHighAccuracyLocationUpdate(void *a1, const char *a2, ...)
{
  return [a1 requestHighAccuracyLocationUpdate];
}

id objc_msgSend_requestInterentFromResponder(void *a1, const char *a2, ...)
{
  return [a1 requestInterentFromResponder];
}

id objc_msgSend_requestParameters(void *a1, const char *a2, ...)
{
  return [a1 requestParameters];
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return [a1 reset];
}

id objc_msgSend_resetActiveUsageStats(void *a1, const char *a2, ...)
{
  return [a1 resetActiveUsageStats];
}

id objc_msgSend_resetBackgroundApps(void *a1, const char *a2, ...)
{
  return [a1 resetBackgroundApps];
}

id objc_msgSend_resetDevice(void *a1, const char *a2, ...)
{
  return [a1 resetDevice];
}

id objc_msgSend_resetSettlement(void *a1, const char *a2, ...)
{
  return [a1 resetSettlement];
}

id objc_msgSend_resetStats(void *a1, const char *a2, ...)
{
  return [a1 resetStats];
}

id objc_msgSend_response(void *a1, const char *a2, ...)
{
  return [a1 response];
}

id objc_msgSend_restTime(void *a1, const char *a2, ...)
{
  return [a1 restTime];
}

id objc_msgSend_result(void *a1, const char *a2, ...)
{
  return [a1 result];
}

id objc_msgSend_results(void *a1, const char *a2, ...)
{
  return [a1 results];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return [a1 resume];
}

id objc_msgSend_retainArguments(void *a1, const char *a2, ...)
{
  return [a1 retainArguments];
}

id objc_msgSend_retrieveNextCandidate(void *a1, const char *a2, ...)
{
  return [a1 retrieveNextCandidate];
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return [a1 reverseObjectEnumerator];
}

id objc_msgSend_roamAttemptCount(void *a1, const char *a2, ...)
{
  return [a1 roamAttemptCount];
}

id objc_msgSend_roamParamsQueryPending(void *a1, const char *a2, ...)
{
  return [a1 roamParamsQueryPending];
}

id objc_msgSend_roamScanEndTimestamp(void *a1, const char *a2, ...)
{
  return [a1 roamScanEndTimestamp];
}

id objc_msgSend_roamState(void *a1, const char *a2, ...)
{
  return [a1 roamState];
}

id objc_msgSend_roamingConsortiumList(void *a1, const char *a2, ...)
{
  return [a1 roamingConsortiumList];
}

id objc_msgSend_role(void *a1, const char *a2, ...)
{
  return [a1 role];
}

id objc_msgSend_rssi(void *a1, const char *a2, ...)
{
  return [a1 rssi];
}

id objc_msgSend_rssiAverage(void *a1, const char *a2, ...)
{
  return [a1 rssiAverage];
}

id objc_msgSend_rtTrafficAgent(void *a1, const char *a2, ...)
{
  return [a1 rtTrafficAgent];
}

id objc_msgSend_rttAverageActiveSession(void *a1, const char *a2, ...)
{
  return [a1 rttAverageActiveSession];
}

id objc_msgSend_rttAverageAsPolledViaInstantaneousScorecard(void *a1, const char *a2, ...)
{
  return [a1 rttAverageAsPolledViaInstantaneousScorecard];
}

id objc_msgSend_rttAverageAtBeginActiveSession(void *a1, const char *a2, ...)
{
  return [a1 rttAverageAtBeginActiveSession];
}

id objc_msgSend_rttMinActiveSession(void *a1, const char *a2, ...)
{
  return [a1 rttMinActiveSession];
}

id objc_msgSend_rttMinAtBeginActiveSession(void *a1, const char *a2, ...)
{
  return [a1 rttMinAtBeginActiveSession];
}

id objc_msgSend_rttVarianceActiveSession(void *a1, const char *a2, ...)
{
  return [a1 rttVarianceActiveSession];
}

id objc_msgSend_rttVarianceAsPolledViaInstantaneousScorecard(void *a1, const char *a2, ...)
{
  return [a1 rttVarianceAsPolledViaInstantaneousScorecard];
}

id objc_msgSend_rttVarianceAtBeginActiveSession(void *a1, const char *a2, ...)
{
  return [a1 rttVarianceAtBeginActiveSession];
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return [a1 run];
}

id objc_msgSend_runPeriodicTasks(void *a1, const char *a2, ...)
{
  return [a1 runPeriodicTasks];
}

id objc_msgSend_running(void *a1, const char *a2, ...)
{
  return [a1 running];
}

id objc_msgSend_runningForegroundApps(void *a1, const char *a2, ...)
{
  return [a1 runningForegroundApps];
}

id objc_msgSend_runningNetworkingApps(void *a1, const char *a2, ...)
{
  return [a1 runningNetworkingApps];
}

id objc_msgSend_scanFailureList(void *a1, const char *a2, ...)
{
  return [a1 scanFailureList];
}

id objc_msgSend_scanFlags(void *a1, const char *a2, ...)
{
  return [a1 scanFlags];
}

id objc_msgSend_scanFrequency(void *a1, const char *a2, ...)
{
  return [a1 scanFrequency];
}

id objc_msgSend_scanProperties(void *a1, const char *a2, ...)
{
  return [a1 scanProperties];
}

id objc_msgSend_scanRecord(void *a1, const char *a2, ...)
{
  return [a1 scanRecord];
}

id objc_msgSend_scanResult(void *a1, const char *a2, ...)
{
  return [a1 scanResult];
}

id objc_msgSend_scanResults(void *a1, const char *a2, ...)
{
  return [a1 scanResults];
}

id objc_msgSend_scanType(void *a1, const char *a2, ...)
{
  return [a1 scanType];
}

id objc_msgSend_scannedChannels(void *a1, const char *a2, ...)
{
  return [a1 scannedChannels];
}

id objc_msgSend_scannedNetwork(void *a1, const char *a2, ...)
{
  return [a1 scannedNetwork];
}

id objc_msgSend_schedule3BarsObserver(void *a1, const char *a2, ...)
{
  return [a1 schedule3BarsObserver];
}

id objc_msgSend_scheduleDailyAt(void *a1, const char *a2, ...)
{
  return [a1 scheduleDailyAt];
}

id objc_msgSend_scheduleHistoricNetworkPerformanceFeedSync(void *a1, const char *a2, ...)
{
  return [a1 scheduleHistoricNetworkPerformanceFeedSync];
}

id objc_msgSend_scheduleOnceAfter(void *a1, const char *a2, ...)
{
  return [a1 scheduleOnceAfter];
}

id objc_msgSend_scheduleOrphanedSetsCleanUp(void *a1, const char *a2, ...)
{
  return [a1 scheduleOrphanedSetsCleanUp];
}

id objc_msgSend_scheduleOutdatedListEntriesCleanUp(void *a1, const char *a2, ...)
{
  return [a1 scheduleOutdatedListEntriesCleanUp];
}

id objc_msgSend_schedulePNLMigration(void *a1, const char *a2, ...)
{
  return [a1 schedulePNLMigration];
}

id objc_msgSend_scheduleWCADownloadObserver(void *a1, const char *a2, ...)
{
  return [a1 scheduleWCADownloadObserver];
}

id objc_msgSend_score(void *a1, const char *a2, ...)
{
  return [a1 score];
}

id objc_msgSend_scorecardIdentifier(void *a1, const char *a2, ...)
{
  return [a1 scorecardIdentifier];
}

id objc_msgSend_seamlessSSIDList(void *a1, const char *a2, ...)
{
  return [a1 seamlessSSIDList];
}

id objc_msgSend_securityType(void *a1, const char *a2, ...)
{
  return [a1 securityType];
}

id objc_msgSend_sendAutoHotspotModeDidChangeEvent(void *a1, const char *a2, ...)
{
  return [a1 sendAutoHotspotModeDidChangeEvent];
}

id objc_msgSend_sendUserAutoJoinStateDidChangeEvent(void *a1, const char *a2, ...)
{
  return [a1 sendUserAutoJoinStateDidChangeEvent];
}

id objc_msgSend_sendUserSettingsDidChangeEvent(void *a1, const char *a2, ...)
{
  return [a1 sendUserSettingsDidChangeEvent];
}

id objc_msgSend_serialActivityDispatchQ(void *a1, const char *a2, ...)
{
  return [a1 serialActivityDispatchQ];
}

id objc_msgSend_serialIdsDispatchQ(void *a1, const char *a2, ...)
{
  return [a1 serialIdsDispatchQ];
}

id objc_msgSend_serialQ(void *a1, const char *a2, ...)
{
  return [a1 serialQ];
}

id objc_msgSend_serialQForNetworkPerformanceFeed(void *a1, const char *a2, ...)
{
  return [a1 serialQForNetworkPerformanceFeed];
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return [a1 serviceName];
}

id objc_msgSend_serviceSpecificInfo(void *a1, const char *a2, ...)
{
  return [a1 serviceSpecificInfo];
}

id objc_msgSend_sessionBased(void *a1, const char *a2, ...)
{
  return [a1 sessionBased];
}

id objc_msgSend_sessionsWaitingForFinalization(void *a1, const char *a2, ...)
{
  return [a1 sessionsWaitingForFinalization];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return [a1 set];
}

id objc_msgSend_setDefaultDenyListThresholds(void *a1, const char *a2, ...)
{
  return [a1 setDefaultDenyListThresholds];
}

id objc_msgSend_setLinkDown(void *a1, const char *a2, ...)
{
  return [a1 setLinkDown];
}

id objc_msgSend_setUpIDS(void *a1, const char *a2, ...)
{
  return [a1 setUpIDS];
}

id objc_msgSend_setWantsNotificationResponsesDelivered(void *a1, const char *a2, ...)
{
  return [a1 setWantsNotificationResponsesDelivered];
}

id objc_msgSend_settledDate(void *a1, const char *a2, ...)
{
  return [a1 settledDate];
}

id objc_msgSend_setupCompleted(void *a1, const char *a2, ...)
{
  return [a1 setupCompleted];
}

id objc_msgSend_setupDrivingEndedAlarm(void *a1, const char *a2, ...)
{
  return [a1 setupDrivingEndedAlarm];
}

id objc_msgSend_setupDrivingStartedAlarm(void *a1, const char *a2, ...)
{
  return [a1 setupDrivingStartedAlarm];
}

id objc_msgSend_setupWalkingEndedAlarm(void *a1, const char *a2, ...)
{
  return [a1 setupWalkingEndedAlarm];
}

id objc_msgSend_setupWalkingStartedAlarm(void *a1, const char *a2, ...)
{
  return [a1 setupWalkingStartedAlarm];
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return [a1 shared];
}

id objc_msgSend_sharedAVSystemController(void *a1, const char *a2, ...)
{
  return [a1 sharedAVSystemController];
}

id objc_msgSend_sharedAnalyticsProcessor(void *a1, const char *a2, ...)
{
  return [a1 sharedAnalyticsProcessor];
}

id objc_msgSend_sharedCPMSAgent(void *a1, const char *a2, ...)
{
  return [a1 sharedCPMSAgent];
}

id objc_msgSend_sharedClient(void *a1, const char *a2, ...)
{
  return [a1 sharedClient];
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return [a1 sharedConnection];
}

id objc_msgSend_sharedDeviceAnalyticsClientWithPersist(void *a1, const char *a2, ...)
{
  return [a1 sharedDeviceAnalyticsClientWithPersist];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return [a1 sharedInstance];
}

id objc_msgSend_sharedWiFi3BarsObserver(void *a1, const char *a2, ...)
{
  return [a1 sharedWiFi3BarsObserver];
}

id objc_msgSend_sharedWiFiAccountStoreManager(void *a1, const char *a2, ...)
{
  return [a1 sharedWiFiAccountStoreManager];
}

id objc_msgSend_sharedWiFiAnalyticsManager(void *a1, const char *a2, ...)
{
  return [a1 sharedWiFiAnalyticsManager];
}

id objc_msgSend_sharedWiFiAppStateManager(void *a1, const char *a2, ...)
{
  return [a1 sharedWiFiAppStateManager];
}

id objc_msgSend_sharedWiFiLOIManager(void *a1, const char *a2, ...)
{
  return [a1 sharedWiFiLOIManager];
}

id objc_msgSend_sharedWiFiLocationManager(void *a1, const char *a2, ...)
{
  return [a1 sharedWiFiLocationManager];
}

id objc_msgSend_sharedWiFiMaintenanceTaskManager(void *a1, const char *a2, ...)
{
  return [a1 sharedWiFiMaintenanceTaskManager];
}

id objc_msgSend_sharedWiFiRoamManager(void *a1, const char *a2, ...)
{
  return [a1 sharedWiFiRoamManager];
}

id objc_msgSend_sharedXPCManager(void *a1, const char *a2, ...)
{
  return [a1 sharedXPCManager];
}

id objc_msgSend_shortSSID(void *a1, const char *a2, ...)
{
  return [a1 shortSSID];
}

id objc_msgSend_shouldTimeOutRecommendation(void *a1, const char *a2, ...)
{
  return [a1 shouldTimeOutRecommendation];
}

id objc_msgSend_signalStrength(void *a1, const char *a2, ...)
{
  return [a1 signalStrength];
}

id objc_msgSend_snrAverage(void *a1, const char *a2, ...)
{
  return [a1 snrAverage];
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return [a1 source];
}

id objc_msgSend_ssid(void *a1, const char *a2, ...)
{
  return [a1 ssid];
}

id objc_msgSend_ssidHarvestStatus(void *a1, const char *a2, ...)
{
  return [a1 ssidHarvestStatus];
}

id objc_msgSend_staArrivecallback(void *a1, const char *a2, ...)
{
  return [a1 staArrivecallback];
}

id objc_msgSend_staDatapathEstablishedcallback(void *a1, const char *a2, ...)
{
  return [a1 staDatapathEstablishedcallback];
}

id objc_msgSend_staDatapathTerminatedcallback(void *a1, const char *a2, ...)
{
  return [a1 staDatapathTerminatedcallback];
}

id objc_msgSend_staLeavecallback(void *a1, const char *a2, ...)
{
  return [a1 staLeavecallback];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return [a1 standardUserDefaults];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return [a1 start];
}

id objc_msgSend_startBrowsing(void *a1, const char *a2, ...)
{
  return [a1 startBrowsing];
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return [a1 startDate];
}

id objc_msgSend_startListening(void *a1, const char *a2, ...)
{
  return [a1 startListening];
}

id objc_msgSend_startMonitoring(void *a1, const char *a2, ...)
{
  return [a1 startMonitoring];
}

id objc_msgSend_startMonitoringAVSystem(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringAVSystem];
}

id objc_msgSend_startMonitoringMotionState(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringMotionState];
}

id objc_msgSend_startPublisherForPHSOverNAN(void *a1, const char *a2, ...)
{
  return [a1 startPublisherForPHSOverNAN];
}

id objc_msgSend_startedAt(void *a1, const char *a2, ...)
{
  return [a1 startedAt];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return [a1 state];
}

id objc_msgSend_stateChangeCallback(void *a1, const char *a2, ...)
{
  return [a1 stateChangeCallback];
}

id objc_msgSend_stateChangeContext(void *a1, const char *a2, ...)
{
  return [a1 stateChangeContext];
}

id objc_msgSend_stateFlags(void *a1, const char *a2, ...)
{
  return [a1 stateFlags];
}

id objc_msgSend_stateUpdatedCallback(void *a1, const char *a2, ...)
{
  return [a1 stateUpdatedCallback];
}

id objc_msgSend_stationary(void *a1, const char *a2, ...)
{
  return [a1 stationary];
}

id objc_msgSend_statistics(void *a1, const char *a2, ...)
{
  return [a1 statistics];
}

id objc_msgSend_statsDictionary(void *a1, const char *a2, ...)
{
  return [a1 statsDictionary];
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return [a1 status];
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return [a1 stop];
}

id objc_msgSend_stopActivityUpdates(void *a1, const char *a2, ...)
{
  return [a1 stopActivityUpdates];
}

id objc_msgSend_stopBrowsing(void *a1, const char *a2, ...)
{
  return [a1 stopBrowsing];
}

id objc_msgSend_stopMonitoring(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoring];
}

id objc_msgSend_stopMonitoringAVSystem(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringAVSystem];
}

id objc_msgSend_stopMonitoringCarSession(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringCarSession];
}

id objc_msgSend_stopMonitoringMotionState(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringMotionState];
}

id objc_msgSend_stopPublisherForPHSOverNAN(void *a1, const char *a2, ...)
{
  return [a1 stopPublisherForPHSOverNAN];
}

id objc_msgSend_stopSubscriberForPHSOverNAN(void *a1, const char *a2, ...)
{
  return [a1 stopSubscriberForPHSOverNAN];
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return [a1 string];
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return [a1 stringByDeletingLastPathComponent];
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return [a1 stringValue];
}

id objc_msgSend_subMessageValue(void *a1, const char *a2, ...)
{
  return [a1 subMessageValue];
}

id objc_msgSend_submitMetric(void *a1, const char *a2, ...)
{
  return [a1 submitMetric];
}

id objc_msgSend_subscribeToKeychainChanges(void *a1, const char *a2, ...)
{
  return [a1 subscribeToKeychainChanges];
}

id objc_msgSend_subscriberCancelTimerCallback(void *a1, const char *a2, ...)
{
  return [a1 subscriberCancelTimerCallback];
}

id objc_msgSend_subscriberCancelTimerCallbackContext(void *a1, const char *a2, ...)
{
  return [a1 subscriberCancelTimerCallbackContext];
}

id objc_msgSend_subscriberMetricsCallback(void *a1, const char *a2, ...)
{
  return [a1 subscriberMetricsCallback];
}

id objc_msgSend_subscriberMetricsCallbackContext(void *a1, const char *a2, ...)
{
  return [a1 subscriberMetricsCallbackContext];
}

id objc_msgSend_substate(void *a1, const char *a2, ...)
{
  return [a1 substate];
}

id objc_msgSend_supported2GHzChannels(void *a1, const char *a2, ...)
{
  return [a1 supported2GHzChannels];
}

id objc_msgSend_supported5GHzChannels(void *a1, const char *a2, ...)
{
  return [a1 supported5GHzChannels];
}

id objc_msgSend_supported6GHzChannels(void *a1, const char *a2, ...)
{
  return [a1 supported6GHzChannels];
}

id objc_msgSend_supportedOSSpecificKeys(void *a1, const char *a2, ...)
{
  return [a1 supportedOSSpecificKeys];
}

id objc_msgSend_supportedSecurityTypes(void *a1, const char *a2, ...)
{
  return [a1 supportedSecurityTypes];
}

id objc_msgSend_symptomBackgroundFlowClassification(void *a1, const char *a2, ...)
{
  return [a1 symptomBackgroundFlowClassification];
}

id objc_msgSend_symptomBackgroundFlowProperties(void *a1, const char *a2, ...)
{
  return [a1 symptomBackgroundFlowProperties];
}

id objc_msgSend_symptomForegroundFlowClassification(void *a1, const char *a2, ...)
{
  return [a1 symptomForegroundFlowClassification];
}

id objc_msgSend_symptomForegroundFlowProperties(void *a1, const char *a2, ...)
{
  return [a1 symptomForegroundFlowProperties];
}

id objc_msgSend_symptomsNetworkHistoryFeed(void *a1, const char *a2, ...)
{
  return [a1 symptomsNetworkHistoryFeed];
}

id objc_msgSend_syncMode(void *a1, const char *a2, ...)
{
  return [a1 syncMode];
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return [a1 synchronize];
}

id objc_msgSend_syncingEnabled(void *a1, const char *a2, ...)
{
  return [a1 syncingEnabled];
}

id objc_msgSend_systemTimeZone(void *a1, const char *a2, ...)
{
  return [a1 systemTimeZone];
}

id objc_msgSend_systemUptime(void *a1, const char *a2, ...)
{
  return [a1 systemUptime];
}

id objc_msgSend_terminateNetworkReliabilityEvaluation(void *a1, const char *a2, ...)
{
  return [a1 terminateNetworkReliabilityEvaluation];
}

id objc_msgSend_terminateRequest(void *a1, const char *a2, ...)
{
  return [a1 terminateRequest];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timeOfDay(void *a1, const char *a2, ...)
{
  return [a1 timeOfDay];
}

id objc_msgSend_timeout(void *a1, const char *a2, ...)
{
  return [a1 timeout];
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return [a1 timestamp];
}

id objc_msgSend_topRecommendableNetwork(void *a1, const char *a2, ...)
{
  return [a1 topRecommendableNetwork];
}

id objc_msgSend_totalJoinTime(void *a1, const char *a2, ...)
{
  return [a1 totalJoinTime];
}

id objc_msgSend_totalScanTime(void *a1, const char *a2, ...)
{
  return [a1 totalScanTime];
}

id objc_msgSend_trafficEng(void *a1, const char *a2, ...)
{
  return [a1 trafficEng];
}

id objc_msgSend_traitsCacheUpdateBusy(void *a1, const char *a2, ...)
{
  return [a1 traitsCacheUpdateBusy];
}

id objc_msgSend_transitionDisabledFlags(void *a1, const char *a2, ...)
{
  return [a1 transitionDisabledFlags];
}

id objc_msgSend_trigger(void *a1, const char *a2, ...)
{
  return [a1 trigger];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return [a1 type];
}

id objc_msgSend_typePrettyPrint(void *a1, const char *a2, ...)
{
  return [a1 typePrettyPrint];
}

id objc_msgSend_uint32Value(void *a1, const char *a2, ...)
{
  return [a1 uint32Value];
}

id objc_msgSend_uint64Value(void *a1, const char *a2, ...)
{
  return [a1 uint64Value];
}

id objc_msgSend_unSchedule3BarsObserver(void *a1, const char *a2, ...)
{
  return [a1 unSchedule3BarsObserver];
}

id objc_msgSend_unScheduleHistoricNetworkPerformanceFeedSync(void *a1, const char *a2, ...)
{
  return [a1 unScheduleHistoricNetworkPerformanceFeedSync];
}

id objc_msgSend_unScheduleOrphanedSetsCleanUp(void *a1, const char *a2, ...)
{
  return [a1 unScheduleOrphanedSetsCleanUp];
}

id objc_msgSend_unSchedulePNLMigration(void *a1, const char *a2, ...)
{
  return [a1 unSchedulePNLMigration];
}

id objc_msgSend_unScheduleWCADownloadObserver(void *a1, const char *a2, ...)
{
  return [a1 unScheduleWCADownloadObserver];
}

id objc_msgSend_uninstallMegaWiFiProfile(void *a1, const char *a2, ...)
{
  return [a1 uninstallMegaWiFiProfile];
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return [a1 uniqueIdentifier];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedLongValue];
}

id objc_msgSend_unwantedNetworkName(void *a1, const char *a2, ...)
{
  return [a1 unwantedNetworkName];
}

id objc_msgSend_updateNetworkTraitsCache(void *a1, const char *a2, ...)
{
  return [a1 updateNetworkTraitsCache];
}

id objc_msgSend_updateReportingPreference(void *a1, const char *a2, ...)
{
  return [a1 updateReportingPreference];
}

id objc_msgSend_updatedAt(void *a1, const char *a2, ...)
{
  return [a1 updatedAt];
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return [a1 uppercaseString];
}

id objc_msgSend_usageCache(void *a1, const char *a2, ...)
{
  return [a1 usageCache];
}

id objc_msgSend_usageRankForDeferral(void *a1, const char *a2, ...)
{
  return [a1 usageRankForDeferral];
}

id objc_msgSend_useCoreRotation(void *a1, const char *a2, ...)
{
  return [a1 useCoreRotation];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return [a1 userInfo];
}

id objc_msgSend_userNotificationCenterWiFi(void *a1, const char *a2, ...)
{
  return [a1 userNotificationCenterWiFi];
}

id objc_msgSend_userPreferredNetworkNames(void *a1, const char *a2, ...)
{
  return [a1 userPreferredNetworkNames];
}

id objc_msgSend_userPreferredPasspointDomains(void *a1, const char *a2, ...)
{
  return [a1 userPreferredPasspointDomains];
}

id objc_msgSend_userSettingsKVS(void *a1, const char *a2, ...)
{
  return [a1 userSettingsKVS];
}

id objc_msgSend_usingPrefix(void *a1, const char *a2, ...)
{
  return [a1 usingPrefix];
}

id objc_msgSend_utilityConcurrent(void *a1, const char *a2, ...)
{
  return [a1 utilityConcurrent];
}

id objc_msgSend_vehicleHardwareVersion(void *a1, const char *a2, ...)
{
  return [a1 vehicleHardwareVersion];
}

id objc_msgSend_vehicleManufacturer(void *a1, const char *a2, ...)
{
  return [a1 vehicleManufacturer];
}

id objc_msgSend_vehicleModelName(void *a1, const char *a2, ...)
{
  return [a1 vehicleModelName];
}

id objc_msgSend_virtualInterface(void *a1, const char *a2, ...)
{
  return [a1 virtualInterface];
}

id objc_msgSend_virtualInterfaceRole(void *a1, const char *a2, ...)
{
  return [a1 virtualInterfaceRole];
}

id objc_msgSend_visibleRequest(void *a1, const char *a2, ...)
{
  return [a1 visibleRequest];
}

id objc_msgSend_waClient(void *a1, const char *a2, ...)
{
  return [a1 waClient];
}

id objc_msgSend_waDiscoveryResult(void *a1, const char *a2, ...)
{
  return [a1 waDiscoveryResult];
}

id objc_msgSend_waitForReAssociationTimer(void *a1, const char *a2, ...)
{
  return [a1 waitForReAssociationTimer];
}

id objc_msgSend_walking(void *a1, const char *a2, ...)
{
  return [a1 walking];
}

id objc_msgSend_walkingEndedAlarmTriggerDuration(void *a1, const char *a2, ...)
{
  return [a1 walkingEndedAlarmTriggerDuration];
}

id objc_msgSend_walkingStartedAlarmTriggerDuration(void *a1, const char *a2, ...)
{
  return [a1 walkingStartedAlarmTriggerDuration];
}

id objc_msgSend_wapCfg(void *a1, const char *a2, ...)
{
  return [a1 wapCfg];
}

id objc_msgSend_was6GHzOnlyAtWeek(void *a1, const char *a2, ...)
{
  return [a1 was6GHzOnlyAtWeek];
}

id objc_msgSend_wasAlreadyAssociated(void *a1, const char *a2, ...)
{
  return [a1 wasAlreadyAssociated];
}

id objc_msgSend_wasCaptive(void *a1, const char *a2, ...)
{
  return [a1 wasCaptive];
}

id objc_msgSend_wasRecently6GHzOnlyOnAnyDevice(void *a1, const char *a2, ...)
{
  return [a1 wasRecently6GHzOnlyOnAnyDevice];
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return [a1 whitespaceCharacterSet];
}

id objc_msgSend_width(void *a1, const char *a2, ...)
{
  return [a1 width];
}

id objc_msgSend_wifiCPMSHandle(void *a1, const char *a2, ...)
{
  return [a1 wifiCPMSHandle];
}

id objc_msgSend_wifiCallInProgress(void *a1, const char *a2, ...)
{
  return [a1 wifiCallInProgress];
}

id objc_msgSend_wifiDevicePowerLevels100ms(void *a1, const char *a2, ...)
{
  return [a1 wifiDevicePowerLevels100ms];
}

id objc_msgSend_wifiDisplayName(void *a1, const char *a2, ...)
{
  return [a1 wifiDisplayName];
}

id objc_msgSend_wifiIfTotalBytes(void *a1, const char *a2, ...)
{
  return [a1 wifiIfTotalBytes];
}

id objc_msgSend_wifiIfTotalInputBytes(void *a1, const char *a2, ...)
{
  return [a1 wifiIfTotalInputBytes];
}

id objc_msgSend_wifiIfTotalInputPackets(void *a1, const char *a2, ...)
{
  return [a1 wifiIfTotalInputPackets];
}

id objc_msgSend_wifiIfTotalOutputBytes(void *a1, const char *a2, ...)
{
  return [a1 wifiIfTotalOutputBytes];
}

id objc_msgSend_wifiIfTotalOutputPackets(void *a1, const char *a2, ...)
{
  return [a1 wifiIfTotalOutputPackets];
}

id objc_msgSend_wifiIfTotalPackets(void *a1, const char *a2, ...)
{
  return [a1 wifiIfTotalPackets];
}

id objc_msgSend_wifiL3MBPS(void *a1, const char *a2, ...)
{
  return [a1 wifiL3MBPS];
}

id objc_msgSend_wifiL3PPS(void *a1, const char *a2, ...)
{
  return [a1 wifiL3PPS];
}

id objc_msgSend_wifiManager(void *a1, const char *a2, ...)
{
  return [a1 wifiManager];
}

id objc_msgSend_wifiPPASerialQ(void *a1, const char *a2, ...)
{
  return [a1 wifiPPASerialQ];
}

id objc_msgSend_windowTimestamp(void *a1, const char *a2, ...)
{
  return [a1 windowTimestamp];
}

id objc_msgSend_wowDenyListExpiry(void *a1, const char *a2, ...)
{
  return [a1 wowDenyListExpiry];
}

id objc_msgSend_writeToURL_atomically_encoding_error_(void *a1, const char *a2, ...)
{
  return [a1 writeToURL:x0 atomically:x1 encoding:x2 error:x3];
}