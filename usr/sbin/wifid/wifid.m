void sub_100003454(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  const void *v9;

  v2 = *(void *)(a1 + 40);
  if ((unint64_t)(v2 - 1) <= 1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: call state changed to %d", "WiFiManagerScheduleWithQueue_block_invoke_14", -[WiFiUserInteractionMonitor isWiFiCallInProgress](+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance"), "isWiFiCallInProgress"));
    }
    v4 = [+[WiFiUserInteractionMonitor sharedInstance] isWiFiCallInProgress];
    v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v4) {
      sub_10008D3EC(v5);
    }
    else {
      sub_10008D59C(v5);
    }
    v2 = *(void *)(a1 + 40);
  }
  if (v2 == 16)
  {
    v6 = [+[WiFiUserInteractionMonitor sharedInstance] isGameModeActive];
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"%s: game state changed to %d", @"WiFiManagerScheduleWithQueue_block_invoke_14", v6];
    }
    v8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v6) {
      sub_10008D704(v8);
    }
    else {
      sub_10008D80C(v8);
    }
  }
  v9 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_1000035AC(void *a1)
{
  v2 = *(void **)(*(void *)(a1[4] + 8) + 24);
  if (v2[30])
  {
    uint64_t v3 = a1[5];
    if ((unint64_t)(v3 - 1) <= 1)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: call state changed to %d", "WiFiDeviceManagerScheduleWithQueue_block_invoke_2", -[WiFiUserInteractionMonitor isWiFiCallInProgress](+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance"), "isWiFiCallInProgress")];
      }
      unsigned int v5 = [+[WiFiUserInteractionMonitor sharedInstance] isWiFiCallInProgress];
      uint64_t v6 = *(void *)(*(void *)(a1[4] + 8) + 24);
      if (v5)
      {
        *(unsigned char *)(v6 + 3409) = 1;
      }
      else
      {
        *(unsigned char *)(v6 + 3409) = 0;
        int v7 = _os_feature_enabled_impl();
        uint64_t v8 = *(void *)(*(void *)(a1[4] + 8) + 24);
        if (v7) {
          sub_10001FD64(v8, 0x1AuLL);
        }
        else {
          sub_100100D74(v8, 5);
        }
      }
      uint64_t v9 = *(void *)(*(void *)(a1[4] + 8) + 24);
      v10 = *(void **)(v9 + 7368);
      if (v10)
      {
        if (*(unsigned char *)(v9 + 3409)) {
          BOOL v11 = 1;
        }
        else {
          BOOL v11 = *(unsigned __int8 *)(v9 + 3408) != 0;
        }
        [v10 setCallState:v11];
        uint64_t v9 = *(void *)(*(void *)(a1[4] + 8) + 24);
      }
      sub_100101574(v9, 0);
      uint64_t v12 = a1[6];
      if (v12 && *(unsigned char *)(v12 + 433)) {
        sub_1000157C8(v12, 5);
      }
      uint64_t v3 = a1[5];
    }
    if (v3 == 16)
    {
      if ([+[WiFiUserInteractionMonitor sharedInstance] isGameModeActive])
      {
        uint64_t v13 = *(void *)(*(void *)(a1[4] + 8) + 24);
        v14 = (const void *)sub_100016E20(*(void *)(v13 + 64));
        v15 = sub_100018FA8(v13, v14, 1);
        if (v15)
        {
          v16 = v15;
          if (sub_1000CD6C4((uint64_t)v15))
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: in game mode. Inducing roam to try to get to the best AP on %@", "WiFiDeviceManagerScheduleWithQueue_block_invoke_2", v16 message];
            }
            [+[WiFiRoamManager sharedWiFiRoamManager](WiFiRoamManager, "sharedWiFiRoamManager") roamWithReason:5 bandPreference:0];
          }
          CFRelease(v16);
        }
      }
    }
    v18 = *(const void **)(*(void *)(a1[4] + 8) + 24);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(*(void *)(a1[4] + 8) + 24) = 0;
    }
  }
  else
  {
    CFRelease(v2);
  }
}

CFArrayRef sub_100003818(uint64_t a1)
{
  if (_os_feature_enabled_impl())
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s not allowed with Unified Auto-Join", "__WiFiDeviceManagerScheduleNextRetry"];
    }
    return 0;
  }
  CFArrayRef result = *(const __CFArray **)(a1 + 320);
  if (!result) {
    return result;
  }
  double valuePtr = NAN;
  int v3 = *(_DWORD *)(a1 + 348);
  if (v3)
  {
    *(_DWORD *)(a1 + 348) = v3 - 1;
    if (v3 != 1)
    {
      double valuePtr = 1.0;
      double v4 = 1.0;
      goto LABEL_9;
    }
  }
  CFArrayRef result = (const __CFArray *)CFArrayGetValueAtIndex(result, *(void *)(a1 + 328));
  if (!result) {
    return result;
  }
  CFNumberGetValue(result, kCFNumberDoubleType, &valuePtr);
  double v4 = valuePtr;
  if (valuePtr <= 0.0) {
    return 0;
  }
  *(double *)(a1 + 336) = valuePtr;
LABEL_9:
  *(_DWORD *)(a1 + 5644) = *(void *)(a1 + 328);
  if (*(_DWORD *)(a1 + 3280) == 2)
  {
    double v4 = v4 + 2.0;
    double valuePtr = v4;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 344);
  if (v5)
  {
    if (v4 >= (double)v5) {
      double v4 = (double)v5;
    }
    double valuePtr = v4;
    double v6 = v4 - v4 * 0.1;
    double v7 = v4 + v4 * 0.1;
    uint32_t v8 = arc4random();
    double v9 = v6 + (double)(v8 + ((v8 / 0x7FFFFFFF) | ((v8 / 0x7FFFFFFF) << 31))) / 2147483650.0 * (v7 - v6);
    v10 = *(NSObject **)(a1 + 312);
    dispatch_time_t v11 = dispatch_time(0, (uint64_t)(v9 * 1000000000.0));
    dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0);
    if (!qword_10027DD68) {
      goto LABEL_20;
    }
    uint64_t v13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: Performing next automatic assocation in %.3f(%.3f) seconds, retry cap=%d", "__WiFiDeviceManagerScheduleNextRetry", *(void *)&v9, *(void *)&valuePtr, *(unsigned int *)(a1 + 344)]) UTF8String]);
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
  }
  else
  {
    double v14 = v4 - v4 * 0.1;
    double v15 = v4 + v4 * 0.1;
    uint32_t v16 = arc4random();
    double v17 = v14 + (double)(v16 + ((v16 / 0x7FFFFFFF) | ((v16 / 0x7FFFFFFF) << 31))) / 2147483650.0 * (v15 - v14);
    v18 = *(NSObject **)(a1 + 312);
    dispatch_time_t v19 = dispatch_time(0, (uint64_t)(v17 * 1000000000.0));
    dispatch_source_set_timer(v18, v19, 0xFFFFFFFFFFFFFFFFLL, 0);
    if (!qword_10027DD68) {
      goto LABEL_20;
    }
    uint64_t v13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: Performing next automatic assocation in %.3f(%.3f) seconds", "__WiFiDeviceManagerScheduleNextRetry", *(void *)&v17, *(void *)&valuePtr]) UTF8String]);
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
  }
  v20 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v13 UTF8String]] UTF8String];
  *(_DWORD *)buf = 136446210;
  v29 = v20;
  _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
LABEL_20:
  *(_DWORD *)(a1 + 5640) = valuePtr;
  if (*(unsigned char *)(a1 + 24) && sub_100063EA8(*(void *)(a1 + 64)) && !*(_DWORD *)(a1 + 28)) {
    *(_DWORD *)(a1 + 28) = 1;
  }
  if (v3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:@"%s: in quick autojoin retry, %d more remaining." message:3, @"__WiFiDeviceManagerScheduleNextRetry", *(unsigned int *)(a1 + 348)];
    }
  }
  else
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 320));
    uint64_t v22 = *(void *)(a1 + 328);
    uint64_t v23 = v22 + 1;
    if (v22 + 1 < Count)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 320), v22 + 1);
      if (ValueAtIndex)
      {
        CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, &valuePtr);
        if (valuePtr > 0.0) {
          *(void *)(a1 + 328) = v23;
        }
      }
    }
  }
  return (const __CFArray *)1;
}

void sub_100003D18(uint64_t a1, int a2)
{
  BOOL v4 = sub_100004688(a1);
  if (*(_DWORD *)(a1 + 788) == 2)
  {
    BOOL v5 = v4;
    int v6 = a2 && *(unsigned char *)(a1 + 25) && *(unsigned char *)(a1 + 1328) && (*(unsigned char *)(a1 + 832) & 0x3F | v4) != 0;
    if (qword_10027DD68)
    {
      uint32_t v8 = "TRUE";
      if (a2) {
        double v9 = "TRUE";
      }
      else {
        double v9 = "FALSE";
      }
      if (*(unsigned char *)(a1 + 25)) {
        v10 = "TRUE";
      }
      else {
        v10 = "FALSE";
      }
      if (*(unsigned char *)(a1 + 1328)) {
        dispatch_time_t v11 = "TRUE";
      }
      else {
        dispatch_time_t v11 = "FALSE";
      }
      uint64_t v12 = *(void *)(a1 + 832);
      if ((v12 & 4) != 0) {
        uint64_t v13 = "TRUE";
      }
      else {
        uint64_t v13 = "FALSE";
      }
      if ((v12 & 0x3B) == 0) {
        uint32_t v8 = "FALSE";
      }
      double v14 = "Enabled";
      if (!v5) {
        double v14 = "Disabled";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: state %s, manager->enable.setting %s, manager->unlockedSinceBoot %s, SB state %s, Process state %s AlwaysOnWiFi %s manager app state %llu", "__WiFiManagerSetEnableState", v9, v10, v11, v13, v8, v14, v12)];
    }
  }
  else
  {
    int v6 = a2 && *(unsigned char *)(a1 + 25) && *(unsigned char *)(a1 + 1328) != 0;
    if (qword_10027DD68)
    {
      double v15 = "TRUE";
      if (a2) {
        uint32_t v16 = "TRUE";
      }
      else {
        uint32_t v16 = "FALSE";
      }
      if (*(unsigned char *)(a1 + 25)) {
        double v17 = "TRUE";
      }
      else {
        double v17 = "FALSE";
      }
      if (!*(unsigned char *)(a1 + 1328)) {
        double v15 = "FALSE";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: state %s, manager->enable.setting %s, manager->unlockedSinceBoot %s", "__WiFiManagerSetEnableState", v16, v17, v15, v18, v19, v20, v21)];
    }
  }
  *(unsigned char *)(a1 + 24) = v6;

  sub_100022FC8(a1, v6, 0);
}

void sub_100003EE4(uint64_t a1, int a2)
{
  if (qword_10027DD68)
  {
    if ((a2 - 1) > 6) {
      CFStringRef v6 = @"none";
    }
    else {
      CFStringRef v6 = off_100242018[a2 - 1];
    }
    [(id)qword_10027DD68 WFLog:3, "%s: type=%@", "WiFiDeviceManagerReset", v6 message];
  }
  uint64_t v7 = 2;
  switch(a2)
  {
    case 1:
      sub_1001036A4(a1);
      uint64_t v7 = 7;
      goto LABEL_8;
    case 3:
LABEL_8:
      [*(id *)(a1 + 6648) removeDenyListStateWithDenyListRemoveReason:v7];
      if ([*(id *)(a1 + 6648) denyListedNetworkCount]) {
        sub_100102284(a1);
      }
      if ([*(id *)(a1 + 6936) count]) {
        [*(id *)(a1 + 6936) removeAllObjects];
      }
      break;
    case 4:
      uint32_t v8 = *(void **)(a1 + 6648);
      uint64_t v9 = 5;
      goto LABEL_16;
    case 5:
      sub_1001036A4(a1);
      break;
    case 6:
      sub_1001036A4(a1);
      uint32_t v8 = *(void **)(a1 + 6648);
      uint64_t v9 = 3;
      goto LABEL_16;
    case 7:
      sub_1001036A4(a1);
      uint32_t v8 = *(void **)(a1 + 6648);
      uint64_t v9 = 4;
LABEL_16:
      [v8 removeDenyListStateWithDenyListRemoveReason:v9];
      if ([*(id *)(a1 + 6648) denyListedNetworkCount]) {
        sub_100102284(a1);
      }
      break;
    default:
      break;
  }
}

uint64_t sub_100004058(uint64_t a1, int a2, int a3, int a4)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: manager is NULL", "WiFiManagerFlushKnownNetworksCache", v22, v23);
    }
    goto LABEL_9;
  }
  if (sub_1000233A8((void *)a1)) {
    goto LABEL_10;
  }
  if (!*(unsigned char *)(a1 + 1328)) {
    goto LABEL_10;
  }
  CFArrayRef v9 = *(const __CFArray **)(a1 + 224);
  if (!v9) {
    goto LABEL_10;
  }
  CFIndex Count = CFArrayGetCount(v9);
  double Current = CFAbsoluteTimeGetCurrent();
  if (!a3)
  {
    double v12 = Current - *(double *)(a1 + 232);
    if (v12 < 30.0)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Skip this flush attempt, flush %d seconds later, networks were fetched from the plist just %f seconds ago", "WiFiManagerFlushKnownNetworksCache", 30, *(void *)&v12);
      }
LABEL_9:
LABEL_10:
      uint64_t v14 = 0;
      goto LABEL_23;
    }
  }
  double v15 = sub_10005A3FC(*(const __CFArray **)(a1 + 224), a2);
  if (!v15) {
    goto LABEL_10;
  }
  uint32_t v16 = v15;
  uint64_t v14 = sub_100083E60((void *)a1, @"List of known networks", v15, a4);
  if (qword_10027DD68)
  {
    uint64_t v18 = "Successfully flushed";
    if (!v14) {
      uint64_t v18 = "Failed to flush";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: %s %ld known networks to the plist", "WiFiManagerFlushKnownNetworksCache", v18, Count)];
  }
  if (!Count)
  {
    uint64_t v19 = *(const void **)(a1 + 224);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(a1 + 224) = 0;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Cleared known networks cache", @"WiFiManagerFlushKnownNetworksCache"];
    }
  }
  CFRelease(v16);
LABEL_23:
  return v14;
}

uint64_t sub_100004258(const __CFArray *a1)
{
  if (!a1)
  {
LABEL_14:
    LOBYTE(v6) = 0;
    return v6;
  }
  CFArrayRef v1 = sub_10000500C(a1);
  if (!v1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: failed to get device managers"];
    }
    goto LABEL_14;
  }
  CFArrayRef v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  if (Count < 1)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    CFIndex v4 = Count;
    CFIndex v5 = 0;
    int v6 = 0;
    do
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
      uint64_t v8 = sub_100016E18((uint64_t)ValueAtIndex);
      if (v8 && sub_100016E20(v8)) {
        v6 |= sub_1000248AC((uint64_t)ValueAtIndex);
      }
      ++v5;
    }
    while (v4 != v5);
  }
  CFRelease(v2);
  return v6;
}

void sub_1000043B8(uint64_t a1, int a2, const __CFString *a3)
{
  if (a1)
  {
    uint64_t v6 = *(void *)(a1 + 832);
    switch(a2)
    {
      case 1:
        unint64_t v7 = v6 | 1;
        if (a3)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: %@ is in foreground.", "__WiFiManagerAppStateManagerCallback", a3 message];
          }
        }
        goto LABEL_14;
      case 2:
        if (v6)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3, @"%s: no more foreground app.", @"__WiFiManagerAppStateManagerCallback"];
          }
        }
        unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_14;
      case 4:
        unint64_t v7 = v6 | 2;
        goto LABEL_14;
      case 8:
        unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFDLL;
LABEL_14:
        *(void *)(a1 + 832) = v7;
        sub_10001315C(a1, v6);
        sub_1000052B0(a1, a3, a2);
        break;
      default:
        return;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: null manager", "__WiFiManagerAppStateManagerCallback"];
    }
  }
}

void sub_10000456C(uint64_t a1, const void *a2, int a3)
{
  if (_os_feature_enabled_impl())
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s not allowed with Unified Auto-Join" arguments:@"WiFiManagerSetRetryIntervals"];
    }
  }
  else if (!a2 || (unint64_t v7 = *(const void **)(a1 + 264)) == 0 || !CFEqual(a2, v7))
  {
    uint64_t v8 = *(const void **)(a1 + 264);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 264) = 0;
    }
    if (a2)
    {
      *(void *)(a1 + 264) = CFRetain(a2);
      *(_DWORD *)(a1 + 272) = a3;
    }
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000001CLL;
    context[2] = 0;
    context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  }
}

BOOL sub_100004688(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: null manager.", @"WiFiManagerIsAlwaysOnWiFiEnabled"];
    }
    goto LABEL_16;
  }
  if (!sub_100004CF8(a1))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: user auto-join disabled.", "WiFiManagerIsAlwaysOnWiFiEnabled")];
    }
LABEL_16:
    return 0;
  }
  context[0] = a1;
  context[1] = 0xAAAAAAAA00000048;
  context[2] = 0;
  uint64_t v8 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  if ((_BYTE)v8) {
    BOOL v2 = sub_1000A191C(a1) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (qword_10027DD68)
  {
    CFIndex v4 = "Disabled";
    if (v2) {
      CFIndex v4 = "Enabled";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "AlwaysOnWiFi: %s", v4);
  }
  return v2;
}

void sub_1000047D4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  int v3 = _os_feature_enabled_impl();
  if (a1)
  {
    if (v3)
    {
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000079;
      context[2] = &v5;
      void context[3] = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    }
  }
}

void sub_100004854(uint64_t a1, void *a2)
{
  if (a1 && a2 && *a2 && a2[1])
  {
    CFDictionaryRef v2 = (const __CFDictionary *)a2[2];
    uint64_t v3 = a2[1];
    sub_100020948(a1, v3, v2);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: Invalid arguments", "__WiFiManagerDispatchCatsUcmUpdateEvent"];
    }
  }
}

void sub_100004B78(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100004BA4(void *a1)
{
  uint64_t v3 = (void *)a1[4];
  if ((a1[5] & 0xFFFFFFFFFFFFFFFELL) == 0x36 && v3)
  {
    if ([v3 code] == (id)37)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: SSID transition arbitrator is running, ignore duplicated steering request", "WiFiDeviceManagerStartAutoJoinAndReply_block_invoke_2")];
      }
    }
    else
    {
      int valuePtr = 4;
      CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFNumberRef v7 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1[6] + 3852));
      sub_100121A28(a1[6], @"FF:FF:FF:FF:FF:FF", 0, 0, v6, v7);
      if (v6) {
        CFRelease(v6);
      }
      if (v7) {
        CFRelease(v7);
      }
    }
  }
  else
  {
    sub_10000C060(a1[6], (int)[v3 code]);
  }
  [*(id *)(a1[6] + 3656) setScanResultsWithAutoJoinSessionCompletion:*(void *)(a1[6] + 1104) complete:1];
  uint64_t v5 = (CFMutableArrayRef *)a1[6];
  if (v5[138])
  {
    CFArrayRemoveAllValues(v5[138]);
    uint64_t v5 = (CFMutableArrayRef *)a1[6];
  }
  CFRelease(v5);
}

uint64_t sub_100004CF8(uint64_t a1)
{
  if (a1)
  {
    if (!*(unsigned char *)(a1 + 1955))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: fetching user auto join state from the plist", "WiFiManagerGetUserAutoJoinState"];
      }
      *(unsigned char *)(a1 + 1954) = sub_100023220((void *)a1, @"UserAutoJoinState", 1);
      *(unsigned char *)(a1 + 1953) = 1;
      CFIndex v4 = sub_10000D934((void *)a1, @"UserAutoJoinDisabledLoc");
      if (v4)
      {
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:3 message:@"%s: found location data for user auto join disabled", @"WiFiManagerGetUserAutoJoinState"];
        }
        id v6 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v4 error:0];
        if (v6 && (CFNumberRef v7 = v6, objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: setting disabled location to %@", "WiFiManagerGetUserAutoJoinState", v7 message];
          }
          *(void *)(a1 + 1960) = v7;
          id v9 = v7;
          *(unsigned char *)(a1 + 1953) = 0;
        }
        else
        {
          if (qword_10027DD68) {
            [qword_10027DD68 WFLog:message:3, "%s: invalid location property in the plist, clearing out", "WiFiManagerGetUserAutoJoinState"];
          }
          sub_100083E60((void *)a1, @"UserAutoJoinDisabledLoc", 0, 0);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no location data in plist", "WiFiManagerGetUserAutoJoinState")];
        }
      }
      dispatch_time_t v11 = sub_10000D934((void *)a1, @"UserAutoJoinDisableTimestamp");
      if (v11)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: found disabled date %@", "WiFiManagerGetUserAutoJoinState", v11 message];
        }
        *(void *)(a1 + 1968) = v11;
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: no disabled date in plist" : @"WiFiManagerGetUserAutoJoinState"];
        }
      }
      *(unsigned char *)(a1 + 1955) = 1;
    }
    uint64_t v13 = *(unsigned __int8 *)(a1 + 1954);
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: user auto join state %d", "WiFiManagerGetUserAutoJoinState", v13];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: manager is NULL", "WiFiManagerGetUserAutoJoinState"];
    }
    uint64_t v13 = 1;
  }
  return v13;
}

CFArrayRef sub_10000500C(CFArrayRef result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    CFArrayRef result = (CFArrayRef)*((void *)result + 13);
    if (result)
    {
      CFArrayRef result = (CFArrayRef)CFSetGetCount(result);
      if (result)
      {
        CFIndex v2 = (CFIndex)result;
        __chkstk_darwin();
        CFIndex v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
        memset(v4, 170, v3);
        CFSetGetValues(*((CFSetRef *)v1 + 13), (const void **)v4);
        return CFArrayCreate(kCFAllocatorDefault, (const void **)v4, v2, &kCFTypeArrayCallBacks);
      }
    }
  }
  return result;
}

void sub_1000050EC(void *a1, CFDictionaryRef theDict)
{
  char valuePtr = 0;
  if (theDict)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"CCA");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt8Type, &valuePtr);
      char v4 = valuePtr;
      double Current = CFAbsoluteTimeGetCurrent();
      double v6 = Current;
      CFNumberRef v7 = a1 + 225;
      uint64_t v8 = a1[286];
      uint64_t v9 = a1[287];
      if (v8)
      {
        uint64_t v10 = v9 - 1;
        if (!v9) {
          uint64_t v10 = 29;
        }
        dispatch_time_t v11 = (double *)&v7[2 * v10];
        double v13 = v11[1];
        double v12 = v11 + 1;
        double v14 = Current - v13;
        double v15 = -(v6 - v13);
        if (v6 - v13 < 0.0) {
          double v14 = v15;
        }
        if (v14 < 5.0)
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Too frequent(%f secs) CCA event from driver\n", v6 - *v12);
          }
          uint64_t v9 = a1[287];
          uint64_t v8 = a1[286];
        }
      }
      if (v9 == 30) {
        uint64_t v9 = 0;
      }
      double v17 = (double *)&v7[2 * v9];
      *(unsigned char *)double v17 = v4;
      v17[1] = v6;
      if (v8 > 29)
      {
        if (v9 == a1[285])
        {
          if (v9 == 29) {
            uint64_t v18 = 0;
          }
          else {
            uint64_t v18 = v9 + 1;
          }
          a1[285] = v18;
        }
      }
      else
      {
        a1[286] = v8 + 1;
      }
      a1[287] = v9 + 1;
      return;
    }
    uint64_t v20 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v21 = "null ccaNum";
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v20 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v21 = "null ccaDict";
LABEL_26:
      [v20 WFLog:3 message:v21];
    }
  }
}

void sub_1000052B0(uint64_t a1, const __CFString *a2, int a3)
{
  if ((a3 == 4 || a3 == 1)
    && [+[WiFiUserInteractionMonitor sharedInstance] isRealTimeAppActive])
  {
    if (a2)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "[TrafficEngineering]: Currently Running Critical Apps %@", a2 message];
      }
    }
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
  }
  CFIndex length = CFStringFind(a2, @"icloud.restore", 1uLL).length;
  CFIndex v8 = CFStringFind(a2, @"mobile.backup", 1uLL).length;
  CFIndex v9 = CFStringFind(a2, @"nfa", 1uLL).length;
  BOOL v10 = (CFStringFind(a2, @"druva", 1uLL).length | v9 | v8 | length) == 0;
  if (a2 && !v10)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "[TrafficEngineering]: Currently Running NonCritical Apps %@", a2 message];
    }
  }
  *(unsigned char *)(a1 + 2274) = v6;
  *(unsigned char *)(a1 + 2275) = !v10;

  sub_1000240F0(a1);
}

id sub_100005420(uint64_t a1)
{
  unsigned int v4 = [*(id *)(a1 + 5600) isAuthorized];
  if (v4)
  {
    id v5 = [[objc_msgSend(*(id *)(a1 + 5600), "latestLocation") copy];
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: not authorized to use location", "WiFiDeviceManagerCopyLeechedLocation")];
    }
    id v5 = 0;
  }
  return v5;
}

uint64_t sub_1000054D8(uint64_t a1)
{
  notify_set_state(dword_10027DCD8, *(void *)(a1 + 32));

  return notify_post("com.apple.airport.userNotification");
}

void sub_100005518(int a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict)
{
  if (a3)
  {
    char v6 = *(void (**)(uint64_t, uint64_t, void, CFDictionaryRef))(a3 + 4296);
    if (v6) {
      v6(a3, a2, *(void *)(a3 + 4304), theDict);
    }
    sub_100007E38(*(void *)(a3 + 120), theDict);
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"QUAL_SCORE");
    if (Value)
    {
      int valuePtr = 0;
      CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(Value, @"LINK_RECOMMENDATION_FLAGS");
      if (v8)
      {
        CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
        char v11 = 0;
        CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RT_TRAFFIC_STATE");
        if (v9)
        {
          CFNumberGetValue(v9, kCFNumberSInt8Type, &v11);
          *(unsigned char *)(a3 + 3477) = v11 & 3;
          if (_os_feature_enabled_impl())
          {
            int v10 = *(unsigned __int8 *)(a3 + 7042);
            if (*(unsigned char *)(a3 + 7042))
            {
              if ([+[WiFiUserInteractionMonitor sharedInstance])
              {
                int v10 = (*(_DWORD *)(a3 + 3468) & 1) == 0;
              }
            }
          }
          else
          {
            int v10 = 0;
          }
          if (valuePtr != *(_DWORD *)(a3 + 3468) || v10 != *(unsigned __int8 *)(a3 + 3476))
          {
            *(_DWORD *)(a3 + 3468) = valuePtr;
            sub_1000FD3D4(a3);
          }
        }
      }
    }
  }
}

void sub_100005650(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  size_t v3 = *(NSObject **)(v2 + 104);
  if (v3)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100022DD8;
    v4[3] = &unk_10023EC30;
    v4[4] = v2;
    v4[5] = a2;
    dispatch_async(v3, v4);
  }
}

void sub_1000056C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained wifiSoftErrorEventHandler:*(void *)(a1 + 40) eventType:*(unsigned int *)(a1 + 56) eventData:*(void *)(a1 + 48)];
}

void sub_10000571C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  if (a3)
  {
    if (a4)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAA01;
      context[0] = a3;
      context[1] = a1;
      CFTypeRef cf = sub_100016E34(kCFAllocatorDefault, a4);
      CFIndex Count = CFSetGetCount(*(CFSetRef *)(a3 + 136));
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      CFIndex v11 = Count;
      CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_100016004, context);
      if (cf) {
        CFRelease(cf);
      }
      [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") sendWiFiAssistEventWithInterfaceName:a2 linkQualityMetricInfo:a4];
    }
    CFNumberRef v8 = *(void **)(a3 + 1728);
    if (v8) {
      sub_100008778((void *)a3, v8, 12, a4);
    }
  }
}

uint64_t sub_1000057F0(uint64_t a1)
{
  int v2 = _os_feature_enabled_impl();
  if (!a1
    || (int v3 = v2, (_os_feature_enabled_impl() & 1) == 0) && !_os_feature_enabled_impl()
    || sub_1000199C0(*(void *)(a1 + 48))
    || sub_10001E71C(*(void *)(a1 + 48))
    || *(_DWORD *)(a1 + 2796) >= *(_DWORD *)(a1 + 648))
  {
    BOOL v4 = 0;
    uint64_t v8 = 0;
    BOOL v5 = 0;
    goto LABEL_28;
  }
  BOOL v4 = [+[WiFiUserInteractionMonitor sharedInstance] isCarModeActive]|| (*(_DWORD *)(a1 + 2776) & 0xFFFFFFFD) == 4;
  if (sub_1000D2F10(*(CFDictionaryRef **)(a1 + 48))) {
    BOOL v5 = *(_DWORD *)(a1 + 2776) == 2;
  }
  else {
    BOOL v5 = 0;
  }
  if ([+[WiFiUserInteractionMonitor sharedInstance] isRealTimeAppActive])
  {
    BOOL v6 = 1;
    if (!v3)
    {
LABEL_15:
      unsigned int v7 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    BOOL v6 = *(unsigned char *)(a1 + 2952) != 0;
    if (!v3) {
      goto LABEL_15;
    }
  }
  unsigned int v7 = (*(unsigned __int8 *)(a1 + 2948) >> 1) & 1;
LABEL_18:
  if (v6) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  if (*(unsigned char *)(a1 + 248))
  {
    if (*(_DWORD *)(a1 + 56)) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = v8;
    }
    if (*(_DWORD *)(a1 + 2776) == 2) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v9;
    }
  }
LABEL_28:
  if (v8) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = v4 | v5;
  }
  if (v10 == 1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: inHighMobility:%d isUsingPublicNetwork:%d tdMonitoringRequired:%d", "__WiFiLQAMgrIsUnderEvaluationForFastDisconnect", v4, v5, v8);
    }
  }
  return v10;
}

uint64_t sub_1000059B0(uint64_t a1)
{
  unsigned __int16 valuePtr = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: null network", "WiFiNetworkGetChannelWidthInMHz"];
    }
    goto LABEL_9;
  }
  CFNumberRef v1 = (const __CFNumber *)sub_10001E404(a1, @"CHANNEL_WIDTH");
  if (!v1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null APPLE80211KEY_CHANNEL_WIDTH" args:("WiFiNetworkGetChannelWidthInMHz", nil)];
    }
LABEL_9:
    return 0;
  }
  CFNumberGetValue(v1, kCFNumberSInt16Type, &valuePtr);
  return valuePtr;
}

BOOL sub_100005A70(void *a1, double *a2)
{
  if (a1)
  {
    BOOL v5 = sub_100023220(a1, @"DisableSoftErrorReporting", 0);
    if (a2) {
      *a2 = (double)sub_1000231B0(a1, @"SoftErrorReportingTimeout", 0);
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  return v5;
}

void sub_100005AFC(uint64_t a1)
{
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: UAJM feature is disabled", "__WiFiDeviceManagerUnifiedAutoJoinUpdateAssociatedNetwork"];
    }
    goto LABEL_19;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: manager is null", "__WiFiDeviceManagerUnifiedAutoJoinUpdateAssociatedNetwork"];
    }
LABEL_19:
    uint64_t v13 = v12;
LABEL_23:
    goto LABEL_12;
  }
  uint64_t v3 = *(void *)(a1 + 8824);
  if (!v3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: UAJM is null", @"__WiFiDeviceManagerUnifiedAutoJoinUpdateAssociatedNetwork"];
    }
    uint64_t v13 = v4;
    goto LABEL_23;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5)
  {
    BOOL v6 = (const void *)sub_100017C48(v5);
    unsigned int v7 = (CFDictionaryRef *)sub_100018FA8(a1, v6, 1);
    uint64_t v8 = v7;
    if (v7)
    {
      id v9 = sub_10000AD1C((uint64_t)v7);
      if (v9)
      {
        uint64_t v10 = sub_10001CECC(v8);
        if (v10)
        {
          id v11 = [v9 scanResultWithMatchingKnownNetworkProfile:v10];

          id v9 = v11;
        }
        goto LABEL_9;
      }
    }
    else
    {
      id v9 = 0;
    }
    uint64_t v10 = 0;
  }
  else
  {
    id v9 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = 0;
  }
LABEL_9:

  if (v8) {
    CFRelease(v8);
  }
  [*(id *)(a1 + 8824) setAssociatedNetwork:v9];

LABEL_12:
}

uint64_t sub_100005CCC(uint64_t a1, const void *a2)
{
  uint64_t v3 = sub_10001C9E8(a1, a2);
  if (!v3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: unknown interface %@", "WiFiDeviceCopyLQMSummary", a2 message];
    }
    goto LABEL_19;
  }
  CFTypeID v4 = CFGetTypeID(v3);
  if (v4 == sub_10001CADC())
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: not supported on virtual interface %@", "WiFiDeviceCopyLQMSummary", a2 message];
    }
    uint64_t v6 = 4294963393;
LABEL_17:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: returned error %d", "WiFiDeviceCopyLQMSummary", v6];
    }
LABEL_19:
    return 0;
  }
  for (int i = 6; ; --i)
  {
    uint64_t v8 = Apple80211CopyValue();
    uint64_t v6 = v8;
    if ((int)v8 <= 15)
    {
      if (v8 != -3905) {
        break;
      }
    }
    else if (v8 != 61 && v8 != 16)
    {
      goto LABEL_17;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  if (v8) {
    goto LABEL_17;
  }
  return 0;
}

uint64_t sub_100005EFC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

void sub_100006364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000065B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100006650(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100006664(uint64_t *a1)
{
  uint64_t v2 = a1[1111];
  if (v2 != 5)
  {
    uint64_t v3 = (const void *)sub_100017C48(a1[8]);
    CFTypeID v4 = sub_100018FA8((uint64_t)a1, v3, 1);
    if (v4)
    {
      uint64_t v5 = v4;
      if (sub_10001E71C((uint64_t)v4))
      {
        uint64_t v2 = 4;
      }
      else if (sub_1000066FC((uint64_t)v5))
      {
        uint64_t v2 = 4;
      }
      else
      {
        uint64_t v2 = 3;
      }
      CFRelease(v5);
    }
  }
  uint64_t v6 = (void *)a1[1103];

  return [v6 setRetrySchedule:v2];
}

BOOL sub_1000066FC(uint64_t a1)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"IsHotspot") == kCFBooleanTrue
      || sub_10001FABC(a1)
      || sub_10001BB2C(a1);
}

void sub_100006A34(uint64_t a1, int a2, uint64_t a3, int a4, void *value)
{
  if (a3)
  {
    int valuePtr = -1431655766;
    switch(a4)
    {
      case 0:
        uint64_t v8 = *(__CFDictionary **)(a3 + 1864);
        id v9 = off_10023FB08;
        goto LABEL_14;
      case 2:
        int valuePtr = (int)value;
        CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 1864), @"DiagnosticsBssEnv", v10);
        if (v10) {
          CFRelease(v10);
        }
        break;
      case 3:
        uint64_t v8 = *(__CFDictionary **)(a3 + 1864);
        id v9 = off_10023FB40;
        goto LABEL_14;
      case 4:
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 1864), @"DiagnosticsScan", value);
        uint64_t v8 = *(__CFDictionary **)(a3 + 1864);
        CFStringRef v11 = @"DiagnosticsScanDone";
        unint64_t v12 = &kCFBooleanFalse;
        goto LABEL_9;
      case 5:
        uint64_t v8 = *(__CFDictionary **)(a3 + 1864);
        CFStringRef v11 = @"DiagnosticsScanDone";
        unint64_t v12 = &kCFBooleanTrue;
LABEL_9:
        CFBooleanRef v13 = *v12;
        goto LABEL_15;
      case 6:
        unsigned int v14 = [[(id)CFArrayGetValueAtIndex((CFArrayRef)value, 1) isEqualToString:@"www.apple.com"];
        uint64_t v8 = *(__CFDictionary **)(a3 + 1864);
        if (v14) {
          id v9 = off_10023FB48;
        }
        else {
          id v9 = off_10023FB50;
        }
        goto LABEL_14;
      case 7:
        uint64_t v8 = *(__CFDictionary **)(a3 + 1864);
        id v9 = off_10023FB58;
LABEL_14:
        CFStringRef v11 = *v9;
        CFBooleanRef v13 = (CFBooleanRef)value;
LABEL_15:
        CFDictionarySetValue(v8, v11, v13);
        break;
      default:
        break;
    }
    CFNumberRef v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, (const void *)(a3 + 1052));
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 1864), @"DiagnosticsBluetooth", v15);
    if (v15) {
      CFRelease(v15);
    }
    uint32_t v16 = *(__CFDictionary **)(a3 + 1864);
    CFStringRef v17 = sub_100012FCC(*(_DWORD *)(a3 + 1408));
    CFDictionarySetValue(v16, @"DiagnosticsMotion", v17);
    if (*(void *)(a3 + 1888))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: diagnostics report %@", "__WiFiManagerDiagnosticsStartCallback", *(void *)(a3 + 1864) message];
      }
      uint64_t v19 = *(const void **)(a3 + 1864);
      uint64_t context = a1;
      CFTypeRef cf = sub_100016E34(kCFAllocatorDefault, v19);
      CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_1000B92DC, &context);
      if (cf) {
        CFRelease(cf);
      }
    }
  }
}

void sub_100006CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 48);
  if (v5[30])
  {
    CFRetain(v5);
    uint64_t v6 = *(void *)(a1 + 48);
    unsigned int v7 = *(NSObject **)(v6 + 240);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100004BA4;
    block[3] = &unk_100241D20;
    uint64_t v8 = *(void *)(a1 + 56);
    block[4] = a2;
    block[5] = v8;
    block[6] = v6;
    dispatch_async(v7, block);
    sub_100006E70(*(void *)(*(void *)(a1 + 48) + 64), 0, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@", @"AutoJoin", [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) UUIDString]), 0);
    sub_100006E70(*(void *)(*(void *)(a1 + 48) + 64), 9, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@", @"AutoJoin", [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) UUIDString]), 0);
    if (*(void *)(a1 + 56) == 39) {
      *(unsigned char *)(*(void *)(a1 + 48) + 6616) = 0;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: null queue.", "WiFiDeviceManagerStartAutoJoinAndReply_block_invoke"];
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void sub_100006E70(uint64_t a1, int a2, const void *a3, CFNumberRef a4)
{
  unsigned int valuePtr = a2;
  CFNumberRef v22 = a4;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: NULL device", "WiFiDeviceSetMinimumCommandPriority", v21];
    }
    goto LABEL_31;
  }
  if (!a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: NULL UUID" :@"WiFiDeviceSetMinimumCommandPriority" :v21];
    }
    goto LABEL_31;
  }
  if (((unint64_t)a4 & 0x8000000000000000) != 0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: invalid priority (%ld)", "WiFiDeviceSetMinimumCommandPriority", a4];
    }
LABEL_31:
    return;
  }
  CFNumberRef v7 = sub_100007180((CFNumberRef)a1, a3, a2);
  if (v7 != a4)
  {
    CFNumberRef v8 = v7;
    CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v9)
    {
      CFNumberRef v10 = v9;
      CFDictionaryRef Value = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 200), a3);
      if (Value)
      {
        CFMutableDictionaryRef Mutable = Value;
        CFRetain(Value);
      }
      else
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 200), a3, Mutable);
        if (!Mutable)
        {
          CFNumberRef v19 = v10;
LABEL_23:
          CFRelease(v19);
          return;
        }
      }
      CFNumberRef v13 = sub_100007180((CFNumberRef)a1, 0, valuePtr);
      if (a4)
      {
        CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &v22);
        if (!v14)
        {
LABEL_21:
          CFRelease(Mutable);
          CFRelease(v10);
          if (!v14) {
            return;
          }
          CFNumberRef v19 = v14;
          goto LABEL_23;
        }
        CFDictionarySetValue(Mutable, v10, v14);
      }
      else
      {
        CFDictionaryRemoveValue(Mutable, v10);
        if (!CFDictionaryGetCount(Mutable)) {
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 200), a3);
        }
        CFNumberRef v14 = 0;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Updated minimum command queue priority for UUID '%@' (%ld -> %ld, type=%@)", a3, v8, v22, sub_100068900(valuePtr) message];
      }
      CFNumberRef v16 = sub_100007180((CFNumberRef)a1, 0, valuePtr);
      if (v13 != v16)
      {
        CFNumberRef v17 = v16;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Updated prevailing minimum command queue priority (%ld -> %ld, type=%@)", v13, v17, sub_100068900(valuePtr) message];
        }
        sub_100160548(*(void *)(a1 + 176));
      }
      goto LABEL_21;
    }
  }
}

CFNumberRef sub_100007180(CFNumberRef result, const void *a2, int a3)
{
  int valuePtr = a3;
  uint64_t v17 = 0;
  if (result)
  {
    CFNumberRef v4 = result;
    CFArrayRef result = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (result)
    {
      CFNumberRef v5 = result;
      CFDictionaryRef v6 = (const __CFDictionary *)*((void *)v4 + 25);
      if (a2)
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v6, a2);
        if (Value)
        {
          CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(Value, v5);
          if (v8) {
            CFNumberGetValue(v8, kCFNumberCFIndexType, &v17);
          }
        }
      }
      else
      {
        CFIndex Count = CFDictionaryGetCount(v6);
        if (Count)
        {
          uint64_t v10 = Count;
          __chkstk_darwin();
          unint64_t v12 = (const void **)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
          memset(v12, 170, v11);
          CFDictionaryGetKeysAndValues(*((CFDictionaryRef *)v4 + 25), v12, 0);
          if (v10 >= 1)
          {
            uint64_t v13 = 0;
            do
            {
              CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)v4 + 25), *v12);
              if (v14)
              {
                CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v14, v5);
                if (v15)
                {
                  uint64_t v16 = 0;
                  CFNumberGetValue(v15, kCFNumberCFIndexType, &v16);
                  if (v16 > v13) {
                    uint64_t v13 = v16;
                  }
                  uint64_t v17 = v13;
                }
              }
              ++v12;
              --v10;
            }
            while (v10);
          }
        }
      }
      CFRelease(v5);
      return (CFNumberRef)v17;
    }
  }
  return result;
}

void sub_100007300(int a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict)
{
  __int16 v38 = 0;
  __int16 v37 = 0;
  __int16 v36 = 0;
  value = 0;
  uint64_t v35 = 0;
  CFNumberRef v32 = 0;
  CFNumberRef number = 0;
  CFNumberRef v30 = 0;
  CFNumberRef v31 = 0;
  CFNumberRef v28 = 0;
  CFNumberRef v29 = 0;
  CFNumberRef v27 = 0;
  if (a3 && theDict)
  {
    unsigned __int8 valuePtr = -86;
    CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ASR_SESSION_STATE");
    if (v7)
    {
      CFNumberGetValue(v7, kCFNumberSInt8Type, &valuePtr);
      int v8 = *(unsigned __int8 *)(a3 + 2232);
      int v9 = v8;
      if (v8 != valuePtr)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "11ax ASR session: new-state = 0x%x, prev-state = 0x%x", valuePtr, *(unsigned __int8 *)(a3 + 2232)];
        }
        int v9 = *(unsigned __int8 *)(a3 + 2232);
        int v8 = valuePtr;
      }
      if (!v9 && v8)
      {
        *(CFAbsoluteTime *)(a3 + 2240) = CFAbsoluteTimeGetCurrent();
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"11ax ASR session: STARTED"];
        }
        int v9 = *(unsigned __int8 *)(a3 + 2232);
        int v8 = valuePtr;
      }
      if (v9 && !v8)
      {
        double v12 = CFAbsoluteTimeGetCurrent() - *(double *)(a3 + 2240);
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:message:4, @"11ax ASR session: duration = %f seconds", v12];
        }
        sub_10005768C(v12);
        LOBYTE(v8) = valuePtr;
      }
      *(unsigned char *)(a3 + 2232) = v8;
    }
    CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RT_TRAFFIC_STATE");
    CFNumberRef v15 = v14;
    if (v14) {
      CFNumberGetValue(v14, kCFNumberSInt8Type, (char *)&v38 + 1);
    }
    int ValueIfPresent = CFDictionaryGetValueIfPresent(theDict, @"QUAL_SCORE", (const void **)&value);
    uint64_t v17 = 0;
    if (ValueIfPresent)
    {
      CFNumberRef v18 = 0;
      if (value)
      {
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"CHANQUAL_SCORE", (const void **)&number)
          && number)
        {
          CFNumberGetValue(number, kCFNumberSInt8Type, &v38);
        }
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"TX_LATENCY_SCORE", (const void **)&v30)
          && v30)
        {
          CFNumberGetValue(v30, kCFNumberSInt8Type, (char *)&v37 + 1);
        }
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"RX_LATENCY_SCORE", (const void **)&v29)
          && v29)
        {
          CFNumberGetValue(v29, kCFNumberSInt8Type, &v37);
        }
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"TX_LOSS_SCORE", (const void **)&v28) && v28) {
          CFNumberGetValue(v28, kCFNumberSInt8Type, (char *)&v36 + 1);
        }
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"RX_LOSS_SCORE", (const void **)&v27) && v27) {
          CFNumberGetValue(v27, kCFNumberSInt8Type, &v36);
        }
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"P95_TX_LATENCY_SCORE", (const void **)&v32)
          && v32)
        {
          CFNumberGetValue(v32, kCFNumberSInt32Type, (char *)&v35 + 4);
        }
        int v19 = CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"LINK_RECOMMENDATION_FLAGS", (const void **)&v31);
        uint64_t v17 = 0;
        CFNumberRef v18 = v31;
        if (v19 && v31)
        {
          CFNumberGetValue(v31, kCFNumberSInt32Type, &v35);
          CFNumberRef v18 = v31;
          uint64_t v17 = (int)v35;
        }
      }
    }
    else
    {
      CFNumberRef v18 = 0;
    }
    uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
    if (number) {
      uint64_t v21 = (char)v38;
    }
    else {
      uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if (v30) {
      uint64_t v22 = SHIBYTE(v37);
    }
    else {
      uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if (v29) {
      uint64_t v23 = (char)v37;
    }
    else {
      uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if (v28) {
      uint64_t v24 = SHIBYTE(v36);
    }
    else {
      uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if (v27) {
      uint64_t v25 = (char)v36;
    }
    else {
      uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if (v32) {
      uint64_t v26 = SHIDWORD(v35);
    }
    else {
      uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if (!v18) {
      uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if (v15) {
      uint64_t v20 = HIBYTE(v38);
    }
    [*(id *)(a3 + 2416) updateWithChQualScore:v21 txLatencyScore:v22 rxLatencyScore:v23 txLossScore:v24 rxLossScore:v25 txLatencyP95:v26 linkRecommendationFlags:v17 rtTrafficStatus:v20 forInterface:a2];
  }
}

void sub_1000076B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: CATSUpdate UCM\n", "WiFiDeviceManagerCatsUcmUpdate"];
    }
    CFNumberRef v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 4776);
    if (v7)
    {
      v7(a1, a2, a3);
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: catsUcmUpdate callback is NULL!", "WiFiDeviceManagerCatsUcmUpdate"];
    }
  }
  else if (qword_10027DD68)
  {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: CATSUpdate UCM Invalid arguments", "WiFiDeviceManagerCatsUcmUpdate")];
  }
}

void sub_1000077D4(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v44 = 0;
  uint64_t valuePtr = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v41 = 0;
  int v40 = 0;
  if (theDict)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LQM_TX_STATS_TX_SUCCESS");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 4);
      int v5 = HIDWORD(valuePtr);
    }
    else
    {
      int v5 = 0;
    }
    CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_DROP_MISC");
    if (v6)
    {
      CFNumberGetValue(v6, kCFNumberSInt32Type, (char *)&v44 + 4);
      int v7 = HIDWORD(v44);
    }
    else
    {
      int v7 = 0;
    }
    int v8 = v7 + v5;
    CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_NO_BUFF");
    if (v9)
    {
      CFNumberGetValue(v9, kCFNumberSInt32Type, &v44);
      int v10 = v44;
    }
    else
    {
      int v10 = 0;
    }
    int v11 = v8 + v10;
    CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_NO_RESOURCE");
    if (v12)
    {
      CFNumberGetValue(v12, kCFNumberSInt32Type, (char *)&v43 + 4);
      int v13 = HIDWORD(v43);
    }
    else
    {
      int v13 = 0;
    }
    int v14 = v11 + v13;
    CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_NO_ACK");
    if (v15)
    {
      CFNumberGetValue(v15, kCFNumberSInt32Type, &v43);
      int v16 = v43;
    }
    else
    {
      int v16 = 0;
    }
    int v17 = v14 + v16;
    CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_CHIP_MODE_ERROR");
    if (v18)
    {
      CFNumberGetValue(v18, kCFNumberSInt32Type, (char *)&v42 + 4);
      int v19 = HIDWORD(v42);
    }
    else
    {
      int v19 = 0;
    }
    int v20 = v17 + v19;
    CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_EXPIRED");
    if (v21)
    {
      CFNumberGetValue(v21, kCFNumberSInt32Type, &v42);
      int v22 = v42;
    }
    else
    {
      int v22 = 0;
    }
    int v23 = v20 + v22;
    CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_FAIL");
    if (v24)
    {
      CFNumberGetValue(v24, kCFNumberSInt32Type, &valuePtr);
      int v25 = valuePtr;
    }
    else
    {
      int v25 = 0;
    }
    int v26 = v23 + v25;
    CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_FW_FREE_PACKET");
    if (v27)
    {
      CFNumberGetValue(v27, kCFNumberSInt32Type, (char *)&v41 + 4);
      int v28 = HIDWORD(v41);
    }
    else
    {
      int v28 = 0;
    }
    int v29 = v26 + v28;
    CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_MAX_RETRIES");
    if (v30)
    {
      CFNumberGetValue(v30, kCFNumberSInt32Type, &v41);
      int v31 = v41;
    }
    else
    {
      int v31 = 0;
    }
    int v32 = v29 + v31;
    CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_FORCE_LIFETIME_EXPIRED");
    if (v33)
    {
      CFNumberGetValue(v33, kCFNumberSInt32Type, &v40);
      int v34 = v40;
    }
    else
    {
      int v34 = 0;
    }
    int v35 = v32 + v34;
    if (v35)
    {
      double v36 = (double)v35;
      float v37 = (double)(v35 - HIDWORD(valuePtr)) / (double)v35 * 100.0;
      *(float *)(a1 + 2960) = v37;
      if (qword_10027DD68) {
        objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "LQM-TX: Success:%d(%.1f%%) FwFail:%d(%.1f%%) FwMaxRetries:%d(%.1f%%) NoACK:%d(%.1f%%) MiscDrops:%d(%.1f%%) NoBuf:%d(%.1f%%) FwNoRes:%d(%.1f%%) ChipErr:%d(%.1f%%) Exp:%d(%.1f%%) FwFcdExpiry:%d(%.1f%%) FwFree:%d(%.1f%%)", HIDWORD(valuePtr), (double)SHIDWORD(valuePtr) / v36 * 100.0, valuePtr, (double)(int)valuePtr / v36 * 100.0, v41, (double)(int)v41 / v36 * 100.0, v43, (double)(int)v43 / v36 * 100.0, HIDWORD(v44), (double)SHIDWORD(v44) / v36 * 100.0, v44, (double)(int)v44 / v36 * 100.0, HIDWORD(v43), (double)SHIDWORD(v43) / v36 * 100.0,
      }
          HIDWORD(v42),
          (double)SHIDWORD(v42) / v36 * 100.0,
          v42,
          (double)(int)v42 / v36 * 100.0,
          v40,
          (double)v40 / v36 * 100.0,
          HIDWORD(v41),
          (double)SHIDWORD(v41) / v36 * 100.0);
    }
    else
    {
      *(_DWORD *)(a1 + 2960) = 0;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: txStatsRef is null" args:("WiFiLQAMgrLqmTxNotify", nil)];
    }
  }
}

void sub_100007E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

double sub_100007E38(uint64_t a1, CFDictionaryRef theDict)
{
  __int16 valuePtr = 0;
  __int16 v15 = 0;
  __int16 v14 = 0;
  value = 0;
  uint64_t v13 = 0;
  int v11 = 0;
  if (a1 && theDict)
  {
    CFNumberRef v4 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RT_TRAFFIC_STATE");
    if (v4) {
      CFNumberGetValue(v4, kCFNumberSInt8Type, (char *)&valuePtr + 1);
    }
    unsigned __int8 v5 = [+[WiFiUserInteractionMonitor sharedInstance] isRealTimeAppActive];
    unsigned __int8 v6 = [+[WiFiUserInteractionMonitor sharedInstance] isInHomeScreen];
    if ((v5 & 1) == 0 && ((v6 & 1) != 0 || *(int *)(a1 + 2796) > -70)) {
      sub_100017494(a1);
    }
    else {
      sub_1000383E0(a1);
    }
    int ValueIfPresent = CFDictionaryGetValueIfPresent(theDict, @"QUAL_SCORE", (const void **)&value);
    int v8 = value;
    if (ValueIfPresent && value)
    {
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"CHANQUAL_SCORE", (const void **)&v11) && v11) {
        CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt8Type, &valuePtr);
      }
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"TX_LATENCY_SCORE", (const void **)&v11) && v11) {
        CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt8Type, (char *)&v15 + 1);
      }
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"RX_LATENCY_SCORE", (const void **)&v11) && v11) {
        CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt8Type, &v15);
      }
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"TX_LOSS_SCORE", (const void **)&v11) && v11) {
        CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt8Type, (char *)&v14 + 1);
      }
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"RX_LOSS_SCORE", (const void **)&v11) && v11) {
        CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt8Type, &v14);
      }
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"P95_TX_LATENCY_SCORE", (const void **)&v11)
        && v11)
      {
        CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt32Type, (char *)&v13 + 4);
      }
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"LINK_RECOMMENDATION_FLAGS", (const void **)&v11)&& v11)
      {
        CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt32Type, &v13);
      }
      int v8 = value;
    }
    if (v8)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: channel score: chq=%u, tx-lat=%u, rx-lat=%u, tx-loss=%u, rx-loss=%u, txPer=%.1f%%, p95-lat=%u, RT=0x%x, link-recommendation=0x%x\n", "WiFiLQAMgrLinkRecommendationNotify", (char)valuePtr, SHIBYTE(v15), (char)v15, SHIBYTE(v14), (char)v14, *(float *)(a1 + 2960), HIDWORD(v13), HIBYTE(valuePtr), v13);
      }
      *(unsigned char *)(a1 + 2953) = valuePtr;
      *(unsigned char *)(a1 + 2954) = HIBYTE(v15);
      *(unsigned char *)(a1 + 2955) = v15;
      *(unsigned char *)(a1 + 2956) = HIBYTE(v14);
      *(unsigned char *)(a1 + 2957) = v14;
      *(unsigned char *)(a1 + 2952) = HIBYTE(valuePtr);
      *(_DWORD *)(a1 + 2944) = HIDWORD(v13);
      *(_DWORD *)(a1 + 2948) = v13;
    }
    else
    {
      double result = 0.0;
      *(_OWORD *)(a1 + 2944) = 0u;
    }
  }
  return result;
}

void sub_10000810C(uint64_t a1)
{
  (*(void (**)(void, void))(*(void *)(a1 + 32) + 136))(*(void *)(*(void *)(a1 + 32) + 128), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
  uint64_t v2 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_100008160(uint64_t a1, CFTypeRef cf)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x2020000000;
  uint64_t v10 = 0;
  if (a1)
  {
    if (cf)
    {
      CFTypeRef v3 = CFRetain(cf);
      v8[3] = (uint64_t)v3;
    }
    CFNumberRef v4 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100008274;
    block[3] = &unk_10023F220;
    block[4] = &v7;
    block[5] = a1;
    dispatch_async(v4, block);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager" : @"__WiFiManagerForegroundAppChangeCallback"];
    }
  }
  _Block_object_dispose(&v7, 8);
}

void sub_10000825C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_100008274(uint64_t a1)
{
  if ([+[WiFiUserInteractionMonitor sharedInstance] isInHomeScreen])
  {
    uint64_t v2 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
  }
  uint64_t v3 = *(void *)(a1 + 32);
  v5[0] = *(void *)(a1 + 40);
  v5[1] = 0xAAAAAAAA0000006ALL;
  v5[2] = *(void *)(*(void *)(v3 + 8) + 24);
  v5[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(v5[0] + 104), (CFSetApplierFunction)sub_100020954, v5);
  CFNumberRef v4 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_100008330(void *a1)
{
  if (a1[4])
  {
    id v3 = +[NSMutableDictionary dictionary];
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v4 = [*(id *)(a1[5] + 48) allKeys];
    id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v10;
      do
      {
        int v8 = 0;
        do
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v4);
          }
          [v3 setObject:[objc_msgSend(*(id *)(a1[5] + 48), "objectForKeyedSubscript:", *(void *)(*((void *)&v9 + 1) + 8 * (void)v8)) objectForKeyedSubscript:a1[4]] forKeyedSubscript:[objc_msgSend(*(id *)(a1[5] + 48), "objectForKeyedSubscript:", *(void *)(*((void *)&v9 + 1) + 8 * (void)v8)) objectForKeyedSubscript:a1[4]]];
          int v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v6);
    }
    if ([v3 count]) {
      *(void *)(*(void *)(a1[6] + 8) + 40) = [v3 copy];
    }
  }
}

id sub_10000849C(uint64_t a1)
{
  sub_100008638(*(void *)(*(void *)(a1 + 32) + 8), (uint64_t)[(*(id *)(a1 + 40)) UUID UUIDString]);
  id v2 = [[*(id *)(a1 + 32) __peerAssistedDiscoveryNetworksForUUID:[*(id *)(a1 + 40) UUID]];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = [v2 allKeys];
  id result = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (result)
  {
    id v5 = result;
    uint64_t v6 = *(void *)v13;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(const void **)(*((void *)&v12 + 1) + 8 * (void)v7);
        long long v9 = sub_100019658((int)kCFAllocatorDefault, [v2 objectForKeyedSubscript:v8]);
        if (v9)
        {
          long long v10 = v9;
          id v11 = [*(id *)(a1 + 32) __deviceManagerWithInterfaceName:v8];
          if (v11) {
            sub_1001190F4((uint64_t)v11, v8, v10, 0, 0);
          }
          CFRelease(v10);
        }
        [*(id *)(a1 + 32) __setPeerAssistedDiscoveryNetwork:interfaceName:UUID:0, v8, [*(id *)(a1 + 40) UUID]];
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id result = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      id v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_100008638(uint64_t a1, uint64_t a2)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000068;
  v2[2] = a2;
  v2[3] = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
}

void sub_100008760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100008778(void *a1, void *a2, int a3, CFTypeRef a4)
{
  id v8 = objc_initWeak(&location, a2);

  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s:SoftErrorManagerRef is NULL!", "WiFiSoftErrorManagerEvent"];
    }
    goto LABEL_14;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: deviceManager is NULL!", @"WiFiSoftErrorManagerEvent"];
    }
LABEL_14:
    goto LABEL_9;
  }
  if (a3 == 4) {
    goto LABEL_7;
  }
  if (a3 != 12 && a3 != 6) {
    goto LABEL_8;
  }
  if (a4)
  {
LABEL_7:
    a4 = CFRetain(a4);
LABEL_8:
    id v9 = objc_loadWeakRetained(&location);
    [v9 updateReportingPreference];

    long long v10 = qword_10027DD88;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000056C8;
    block[3] = &unk_10023ED88;
    objc_copyWeak(v13, &location);
    int v14 = a3;
    v13[1] = a1;
    v13[2] = (id)a4;
    dispatch_async(v10, block);
    objc_destroyWeak(v13);
  }
LABEL_9:
  objc_destroyWeak(&location);
}

void sub_10000891C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_100008930(uint64_t *a1, CFTypeRef cf)
{
  if (a1)
  {
    id v4 = (const void *)a1[25];
    if (v4)
    {
      CFRelease(v4);
      a1[25] = 0;
    }
    if (cf) {
      a1[25] = (uint64_t)CFRetain(cf);
    }
    sub_100008B7C(a1[15], cf);
    sub_100008A24((uint64_t)a1, 1, cf);
    id v5 = (void *)a1[921];
    if (v5)
    {
      [v5 setCurrentApplicationName:cf withAttributes:0];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager." args:("WiFiDeviceManagerSetForegroundAppBundleId")];
    }
  }
}

void sub_100008A24(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  if (a1 && *(unsigned char *)(a1 + 433))
  {
    if (a2 == 1)
    {
      if (!sub_100008A8C(a1, cf)) {
        return;
      }
      a2 = 1;
    }
    sub_1000157C8(a1, a2);
  }
}

BOOL sub_100008A8C(uint64_t a1, CFTypeRef cf)
{
  int v4 = cf != 0;
  int v5 = *(unsigned __int8 *)(a1 + 456);
  uint64_t v6 = *(const void **)(a1 + 448);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 448) = 0;
  }
  if (cf)
  {
    CFTypeRef v7 = CFRetain(cf);
  }
  else
  {
    CFTypeRef v7 = 0;
    int v4 = 0;
  }
  *(void *)(a1 + 448) = v7;
  *(unsigned char *)(a1 + 456) = v4;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: CATS %@:  deviceManager:%p FgApp:%@ stateChange:%d whitelisted=%d\n", "WifiDeviceManagerCatsWhitelistedApp", sub_100016F3C(a1), a1, *(void *)(a1 + 448), v5 != v4, cf != 0 message];
  }
  return v5 != v4;
}

void sub_100008B7C(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    int v4 = *(const void **)(a1 + 208);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 208) = 0;
    }
    if (cf) {
      *(void *)(a1 + 208) = CFRetain(cf);
    }
  }
}

void sub_100008BC8(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 8:
      dispatch_release(*(dispatch_object_t *)(a1 + 72));
      CFRelease((CFTypeRef)a1);
      break;
    case 7:
      mach_port_name_t v5 = *(_DWORD *)(dispatch_mach_msg_get_msg() + 12);
      mach_port_t v6 = mach_task_self_;
      mach_port_mod_refs(v6, v5, 1u, -1);
      break;
    case 2:
      if (*(_DWORD *)(dispatch_mach_msg_get_msg() + 20) == 70)
      {
        id v3 = *(void (**)(uint64_t, uint64_t))(a1 + 96);
        if (v3)
        {
          uint64_t v4 = *(void *)(a1 + 104);
          v3(a1, v4);
        }
      }
      else if ((dispatch_mach_mig_demux() & 1) == 0)
      {
        msg = (mach_msg_header_t *)dispatch_mach_msg_get_msg();
        mach_msg_destroy(msg);
      }
      break;
  }
}

uint64_t sub_100008CF8(uint64_t a1)
{
  int valuePtr = 0;
  if (!a1) {
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a1 + 24);
  if (!v2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: LQM table is NULL", @"__WiFiLQAMgrGetLongWindowRSSI"];
    }
    goto LABEL_23;
  }
  if (!*(void *)(a1 + 48))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s, LQAManager: Current Network is NULL", "__WiFiLQAMgrGetLongWindowRSSI")];
    }
    goto LABEL_23;
  }
  int Count = CFArrayGetCount(v2);
  int v4 = Count;
  if (!Count)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: No LQM reports available", @"__WiFiLQAMgrGetLongWindowRSSI"];
    }
LABEL_23:
    return 0;
  }
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = Count;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v5);
    if (!ValueAtIndex) {
      break;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"RSSI");
    if (!Value) {
      goto LABEL_15;
    }
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    uint64_t v6 = (valuePtr + v6);
    if (v7 == ++v5)
    {
      if (!v4) {
        return v6;
      }
      return ((int)v6 / v4);
    }
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s, LQAManager: LQM Report at %d index is NULL", "__WiFiLQAMgrGetLongWindowRSSI", v5);
  }
LABEL_15:
  int v4 = v5;
  if (v5) {
    return ((int)v6 / v4);
  }
  return v6;
}

CFDictionaryRef sub_100008EA4(uint64_t a1)
{
  if (!a1)
  {
    long long v15 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      int v16 = "%s: WiFiLQAMgrRef is NULL";
LABEL_10:
      int v17 = v12;
      [v15 WFLog:4 message:v16 WiFiLQAMgrCopyCoalescedUndispatchedLQMEvent];
      long long v12 = v17;
    }
LABEL_11:
    CFDictionaryRef Copy = 0;
    goto LABEL_5;
  }
  CFDictionaryRef v1 = *(const __CFDictionary **)(a1 + 152);
  if (!v1)
  {
    long long v15 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      int v16 = "%s: coalescedUndispatchedLQMEvent is NULL";
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v1);
  CFNumberRef Value = CFDictionaryGetValue(Copy, @"RSSI");
  int v23 = CFDictionaryGetValue(Copy, @"CCA");
  int v22 = CFDictionaryGetValue(Copy, @"SNR");
  CFNumberRef v21 = CFDictionaryGetValue(Copy, @"TXFAIL");
  int v20 = CFDictionaryGetValue(Copy, @"TXFRAMES");
  int v19 = CFDictionaryGetValue(Copy, @"TXFWFRAMES");
  id v3 = CFDictionaryGetValue(Copy, @"TXFWFAIL");
  int v4 = CFDictionaryGetValue(Copy, @"TXRETRANS");
  CFIndex v5 = CFDictionaryGetValue(Copy, @"RXFRAMES");
  uint64_t v6 = CFDictionaryGetValue(Copy, @"RXRETRYFRMS");
  uint64_t v7 = CFDictionaryGetValue(Copy, @"RXBEACONFRMS");
  id v8 = CFDictionaryGetValue(Copy, @"RXBEACONSCHED");
  id v9 = CFDictionaryGetValue(Copy, @"RXRATE");
  long long v10 = CFDictionaryGetValue(Copy, @"TXRATE");
  id v11 = CFDictionaryGetValue(Copy, @"TXFBRATE");
  if (qword_10027DD68)
  {
    CFNumberRef v18 = v5;
    long long v13 = v12;
    objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Rssi: %@ Snr:%@ Cca: %@ TxFrames: %@ TxFail: %@ BcnRx: %@ BcnSch: %@  RxFrames: %@ RxRetries: %@ TxRate: %@ RxRate: %@ FBRate: %@ TxFwFrms: %@ TxFwFail:%@ TxRetries: %@", "WiFiLQAMgrCopyCoalescedUndispatchedLQMEvent", Value, v22, v23, v20, v21, v7, v8, v18, v6, v10, v9, v11, v19,
      v3,
      v4);
    long long v12 = v13;
  }
LABEL_5:
  return Copy;
}

void sub_100009128(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFIndex v5 = v4;
  if (!a2)
  {
    CFNumberRef v18 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      int v19 = "FrontBoard Display Layout is Null!";
      uint64_t v20 = 4;
LABEL_31:
      [v18 WFLog:v20 message:v19];
      goto LABEL_32;
    }
    goto LABEL_32;
  }
  if (!v3)
  {
    CFNumberRef v18 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFNumberRef v21 = "__WiFiManagerFrontBoardDisplayCallback";
      int v19 = "%s: null manager.";
LABEL_30:
      uint64_t v20 = 3;
      goto LABEL_31;
    }
LABEL_32:
    goto LABEL_23;
  }
  if (!*(void *)(v3 + 32))
  {
    CFNumberRef v18 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFNumberRef v21 = "__WiFiManagerFrontBoardDisplayCallback";
      int v19 = "%s: nil manager queue.";
      goto LABEL_30;
    }
    goto LABEL_32;
  }
  uint64_t v22 = v3;
  uint64_t context = v4;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v6 = [a2 elements];
  id v7 = [v6 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v7)
  {
    id v8 = v7;
    char v9 = 0;
    char v10 = 0;
    char v11 = 0;
    uint64_t v12 = *(void *)v29;
    do
    {
      for (int i = 0; i != v8; int i = (char *)i + 1)
      {
        if (*(void *)v29 != v12) {
          objc_enumerationMutation(v6);
        }
        int v14 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        if (v14)
        {
          if (objc_msgSend(objc_msgSend(*(id *)(*((void *)&v28 + 1) + 8 * i), "identifier"), "isEqualToString:", @"com.apple.control-center"))
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4 message:"Control Center launched"];
            }
            char v9 = 1;
          }
          if ([v14 identifier] isEqualToString:@"com.apple.springboard.home-screen") char v10 = 1; {
          if ([v14 identifier] == @"sceneID:com.apple.camera-default")char v11 = 1;
          }
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v28 objects:v32 count:16];
    }
    while (v8);
  }
  else
  {
    char v9 = 0;
    char v10 = 0;
    char v11 = 0;
  }
  int v16 = *(NSObject **)(v22 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000228CC;
  block[3] = &unk_100240B60;
  void block[4] = v22;
  char v25 = v10;
  char v26 = v11;
  char v27 = v9;
  dispatch_async(v16, block);
  CFIndex v5 = context;
LABEL_23:
}

uint64_t sub_1000093F4(uint64_t a1, const void *a2, const void *a3, uint64_t a4)
{
  id v7 = sub_10001C9E8(a1, a2);
  if (!v7)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2 message];
    }
    return 0;
  }
  uint64_t v8 = (uint64_t)v7;
  CFTypeID v9 = CFGetTypeID(v7);
  if (v9 == sub_10001CADC())
  {
    sub_1001691E0(v8, a3, a4);
    return 0;
  }
  CFTypeID v12 = CFGetTypeID(a3);
  if (v12 == CFNumberGetTypeID())
  {
    int valuePtr = 0;
    if (!CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &valuePtr)) {
      return 0;
    }
    for (int i = 6; ; --i)
    {
      uint64_t v14 = Apple80211Set();
      uint64_t v10 = v14;
      if (v14 != -3905 && v14 != 61 && v14 != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
  }
  else
  {
    CFTypeID v16 = CFGetTypeID(a3);
    if (v16 != CFStringGetTypeID()) {
      return 0;
    }
    if (CFEqual(a3, @"IO80211InterfaceBGScanParams")
      || CFEqual(a3, @"IO80211InterfaceBGDynamicProfileParams"))
    {
      for (int j = 6; ; --j)
      {
        uint64_t v18 = Apple80211Set();
        uint64_t v10 = v18;
        if (v18 != -3905 && v18 != 61 && v18 != 16) {
          break;
        }
        if (!j) {
          break;
        }
        usleep(0x7A120u);
      }
    }
    else
    {
      for (int k = 6; ; --k)
      {
        uint64_t v21 = Apple80211SetProperty();
        uint64_t v10 = v21;
        if (v21 != -3905 && v21 != 61 && v21 != 16) {
          break;
        }
        if (!k) {
          break;
        }
        usleep(0x7A120u);
      }
    }
    if (v10)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "WiFiDeviceSetProperty", a3, v10);
      }
    }
  }
  return v10;
}

void sub_10000963C(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  if (a1 && a2 && a3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: CATSUpdate Scan Manager\n", "WiFiDeviceManagerCatsScanUpdate")];
    }
    unsigned __int8 valuePtr = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"CATS_APP_PRIORITY");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberCharType, &valuePtr);
      *(unsigned char *)(a2 + 416) = valuePtr;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: CATSUpdate appPolicy=%d", "WiFiDeviceManagerCatsScanUpdate", valuePtr)];
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: CATSUpdate APPLE80211KEY_CATS_APP_PRIORITY key not found", @"WiFiDeviceManagerCatsScanUpdate"];
    }
    CFTypeID v9 = v10;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: CATSUpdate Scan Manager Invalid arguments" args:("WiFiDeviceManagerCatsScanUpdate")];
    }
    CFTypeID v9 = v6;
  }
}

void sub_1000097A8(uint64_t a1)
{
  ++*(void *)(a1 + 1496);
  if (*(unsigned char *)(a1 + 1328)) {
    goto LABEL_200;
  }
  if (MKBUserUnlockedSinceBoot())
  {
    BOOL v2 = MKBGetDeviceLockState() == 1;
    int v4 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      [+[NSProcessInfo processInfo] systemUptime];
      [v4 WFLog:3, "%s: First unlock polled %.2fs since boot", "__WiFiManagerHeartBeatFire", v5 message];
    }
    sub_100089CC4(a1, v2, 1);
  }
  if (*(unsigned char *)(a1 + 1328))
  {
LABEL_200:
    if (*(void *)(a1 + 240) <= 0x13uLL)
    {
      if ([+[WiFiUserInteractionMonitor sharedInstance] isSetupCompleted])
      {
        CFArrayRef v6 = *(const __CFArray **)(a1 + 224);
        if (!v6 || !CFArrayGetCount(v6))
        {
          sub_1000830B8(a1);
          CFArrayRef v7 = *(const __CFArray **)(a1 + 224);
          if (v7 && CFArrayGetCount(v7))
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Setting %d known networks", "__WiFiManagerHeartBeatFire", CFArrayGetCount(*(CFArrayRef *)(a1 + 224)));
            }
            sub_100083534(a1, *(const __CFArray **)(a1 + 224));
          }
          ++*(void *)(a1 + 240);
        }
      }
    }
    if (*(unsigned char *)(a1 + 1328))
    {
      if (*(void *)(a1 + 248) <= 0x13uLL)
      {
        CFArrayRef v9 = *(const __CFArray **)(a1 + 352);
        if (!v9 || !CFArrayGetCount(v9))
        {
          sub_100083F8C(a1);
          CFArrayRef v10 = *(const __CFArray **)(a1 + 352);
          if (v10 && CFArrayGetCount(v10))
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Setting %d private Mac networks after %d attempts", "__WiFiManagerHeartBeatFire", CFArrayGetCount(*(CFArrayRef *)(a1 + 352)), *(void *)(a1 + 248));
            }
            sub_100084BB4(a1);
          }
          ++*(void *)(a1 + 248);
        }
      }
    }
  }
  context[0] = a1;
  context[1] = 0xAAAAAAAA0000003ELL;
  void context[2] = 0;
  void context[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  [+[WiFiUserInteractionMonitor sharedInstance] runPeriodicTasks];
  if (*(unsigned char *)(a1 + 1208) || *(unsigned char *)(a1 + 1209))
  {
    CFTypeID v12 = *(void **)(a1 + 2520);
    if (v12 && (id v13 = [v12 cellularICCID]) != 0)
    {
      uint64_t v14 = v13;
      CFDictionaryRef v15 = sub_1000A84D4((void *)a1);
      if (v15)
      {
        CFDictionaryRef v16 = v15;
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v15);
        CFRelease(v16);
      }
      else
      {
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      }
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(MutableCopy, v14);
      if (Value)
      {
        CFArrayRef v21 = Value;
        if (CFArrayGetCount(Value) >= 1)
        {
          CFIndex v22 = 0;
          do
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, v22);
            if (ValueAtIndex)
            {
              CFDictionaryRef v24 = ValueAtIndex;
              CFDateRef v25 = (const __CFDate *)CFDictionaryGetValue(ValueAtIndex, @"DataUsageDate");
              if (!v25
                || (v26 = v25, double Current = CFAbsoluteTimeGetCurrent(), Current - CFDateGetAbsoluteTime(v26) <= 5356800.0))
              {
                CFMutableDictionaryRef v28 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v24);
                if (v28)
                {
                  CFMutableDictionaryRef v29 = v28;
                  CFArrayAppendValue(Mutable, v28);
                  CFRelease(v29);
                }
              }
            }
            ++v22;
          }
          while (v22 < CFArrayGetCount(v21));
        }
      }
      uint64_t v90 = a1;
      unint64_t v91 = 0xAAAAAAAA00000065;
      v92 = Mutable;
      uint64_t v93 = 0;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &v90);
      CFDictionarySetValue(MutableCopy, v14, Mutable);
      [+[NSUserDefaults standardUserDefaults] setObject:MutableCopy forKey:@"InterfaceDataUsageV1"];
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: failed to retrieve ICCID." args:("__WiFiManagerRunDataUsageCheck")];
      }
    }
  }
  if (MGGetBoolAnswer()
    && !*(unsigned char *)(a1 + 2288)
    && *(double *)(a1 + 2280) != 0.0
    && *(unsigned char *)(a1 + 2276))
  {
    double v51 = CFAbsoluteTimeGetCurrent();
    double v52 = *(double *)(a1 + 2280);
    double v53 = v51 <= v52 ? v52 - v51 : v51 - v52;
    if (!*(unsigned char *)(a1 + 314) || v53 > 1800.0)
    {
      v54 = *(void **)(a1 + 1480);
      if ([v54 isMegaWiFiProfileInstalled])
      {
        [v54 uninstallMegaWiFiProfile];
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: MegaWiFiProfile has been uninstalled, charging=%d timeElapsed=%d", "__WiFiManagerHeartBeatFire", *(unsigned __int8 *)(a1 + 314), (int)v53)];
        }
      }
      *(void *)(a1 + 2280) = 0;
      *(unsigned char *)(a1 + 2276) = 0;
    }
  }
  if ([+[WiFiUserInteractionMonitor sharedInstance] isSetupCompleted]&& !*(unsigned char *)(a1 + 528)&& MKBUserUnlockedSinceBoot() == 1)
  {
    *(unsigned char *)(a1 + 528) = 1;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WFMacRandomisation : kWiFiPrivateMacFirstUnlockAfterSWUpgrade is : <%hhu>", "__WiFiManagerHeartBeatFire", *(unsigned __int8 *)(a1 + 528));
    }
  }
  uint64_t v31 = *(void *)(a1 + 1496);
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * v31, 1) <= 0x2AAAAAAAAAAAAAAAuLL)
  {
    sub_100004058(a1, 1, 0, 0);
    uint64_t v90 = a1;
    unint64_t v91 = 0xAAAAAAAA0000003DLL;
    v92 = 0;
    uint64_t v93 = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &v90);
    uint64_t v31 = *(void *)(a1 + 1496);
  }
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * v31, 2) > 0x1555555555555555uLL) {
    return;
  }
  if (!sub_100004258((const __CFArray *)a1))
  {
    CFArrayRef v32 = sub_10008ECB4((CFArrayRef)a1);
    if (v32)
    {
      CFArrayRef v33 = v32;
      int v34 = CFArrayGetValueAtIndex(v32, 0);
      int v35 = (const void *)sub_100017C48((uint64_t)v34);
      sub_10008E218(a1, v35, 1);
      CFRelease(v33);
    }
  }
  CFAbsoluteTime v36 = CFAbsoluteTimeGetCurrent();
  CFDateRef v37 = CFDateCreate(kCFAllocatorDefault, v36);
  if (+[WiFiSoftApUsageMonitor sharedInstance])
  {
    CFDictionaryRef v38 = (const __CFDictionary *)[+[WiFiSoftApUsageMonitor sharedInstance] statsDictionary];
    CFBooleanRef v39 = (const __CFBoolean *)CFDictionaryGetValue(v38, kSoftApStatsValid);
    if (v39)
    {
      if (v39 == kCFBooleanTrue)
      {
        CFDateRef v40 = (const __CFDate *)CFDictionaryGetValue(v38, kSoftApOldestActiveTime);
        if (v40)
        {
          if (CFDateGetTimeIntervalSinceDate(v37, v40) >= 1209600.0) {
            [+[WiFiSoftApUsageMonitor sharedInstance] resetStats];
          }
        }
      }
    }
  }
  if (v37) {
    CFRelease(v37);
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Check for networks with deleted keychain password, count: %ld", "WiFiManagerCheckDeletedPasswordNetworks", CFArrayGetCount(*(CFArrayRef *)(a1 + 2528)));
  }
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 2528)) < 1) {
    goto LABEL_118;
  }
  uint64_t v42 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 2528), 0);
  if (!v42)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null networkWithDeletedKeychainPassword", @"WiFiManagerCheckDeletedPasswordNetworks"];
    }
    goto LABEL_117;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Checking network %@ to see if we need to prompt for the missing password TTR", "WiFiManagerCheckDeletedPasswordNetworks", sub_10001A43C(v42) message];
  }
  CFArrayRef v44 = sub_10000500C((CFArrayRef)a1);
  if (!v44)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null device managers array", "WiFiManagerCheckDeletedPasswordNetworks")];
    }
LABEL_117:
LABEL_118:
    CFArrayRef v45 = 0;
LABEL_119:
    CFStringRef v49 = 0;
    CFArrayRef v48 = 0;
    goto LABEL_120;
  }
  CFArrayRef v45 = v44;
  v46 = CFArrayGetValueAtIndex(v44, 0);
  if (!v46)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null device manager", "WiFiManagerCheckDeletedPasswordNetworks")];
    }
    goto LABEL_119;
  }
  CFArrayRef v47 = sub_10010AC8C((uint64_t)v46, v42);
  if (!v47)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Network %@ is no longer in the known networks list. No need to remember it for missing password purposes. ", "WiFiManagerCheckDeletedPasswordNetworks", sub_10001A43C(v42) message];
    }
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 2528));
    goto LABEL_119;
  }
  CFArrayRef v48 = v47;
  CFStringRef v49 = sub_1000C62C8((CFDictionaryRef *)v42);
  if (sub_1000C8798((uint64_t)v42) && v49)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Password for %@ is now present in the keychain. No need to remember it for missing password purposes", "WiFiManagerCheckDeletedPasswordNetworks", sub_10001A43C(v42) message];
    }
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 2528));
  }
  else
  {
    CFAbsoluteTime v57 = CFAbsoluteTimeGetCurrent();
    CFDateRef v58 = CFDateCreate(kCFAllocatorDefault, v57);
    CFDateRef v59 = (const __CFDate *)sub_1000CD558((uint64_t)v42);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Checking password mod date %@ against current time", "WiFiManagerCheckDeletedPasswordNetworks", v59 message];
    }
    if (v59 && CFDateGetTimeIntervalSinceDate(v58, v59) > 900.0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: %@ is present in known networks and its password has not been in the keychain for > %d seconds in the keychain. Prompting user for TTR", "WiFiManagerCheckDeletedPasswordNetworks", sub_10001A43C(v42), 900 message];
      }
      *(void *)(a1 + 2536) = v42;
      if (sub_100165B58(a1 + 2536))
      {
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:message:3, "%s: User accepted the TTR prompt. Removing all entries from the networksWithDeletedKeychainPassword array", "WiFiManagerCheckDeletedPasswordNetworks"];
        }
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 2528));
      }
    }
    if (v58) {
      CFRelease(v58);
    }
  }
LABEL_120:
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: End of deleted password network checks, network count: %ld", "WiFiManagerCheckDeletedPasswordNetworks", CFArrayGetCount(*(CFArrayRef *)(a1 + 2528)));
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v49) {
    CFRelease(v49);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (*(unsigned char *)(a1 + 2552)) {
    return;
  }
  CFStringRef v64 = CFStringCreateWithCString(kCFAllocatorDefault, "", 0x8000100u);
  LOBYTE(v90) = 0;
  LOBYTE(context[0]) = 0;
  if (qword_10027DD68) {
    [qword_10027DD68 WFLog:message:3, "%s: Start", "WiFiManagerMigrateWiFiKeychainEntries"];
  }
  if (*(unsigned char *)(a1 + 2552))
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: Empty account name password migration already completed", "WiFiManagerMigrateWiFiKeychainEntries"];
    }
    char v87 = 0;
LABEL_197:
    *(unsigned char *)(a1 + 2552) = v87;
    if (!v64) {
      return;
    }
    goto LABEL_160;
  }
  CFStringRef v66 = (const __CFString *)sub_1000DB6C0(v64, (BOOL *)&v90, 0.1);
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:@"%s: passwordFetchTimedOut: %d" message:3, "WiFiManagerMigrateWiFiKeychainEntries", v90];
  }
  if ((_BYTE)v90)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Empty account name password fetch timed out", "WiFiManagerMigrateWiFiKeychainEntries")];
    }
    v77 = 0;
    char v79 = 0;
    goto LABEL_154;
  }
  if (!v66)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: No AirPort keychain entry with an empty account name. Migration complete.", "WiFiManagerMigrateWiFiKeychainEntries"];
    }
    char v87 = 1;
    goto LABEL_197;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, @"%s: emptyStringAccountPassword is: %s", @"WiFiManagerMigrateWiFiKeychainEntries", @"non-null"];
  }
  CFArrayRef v69 = *(const __CFArray **)(a1 + 224);
  if (v69 && CFArrayGetCount(v69))
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 224));
    if (Count < 1)
    {
      v77 = 0;
    }
    else
    {
      CFIndex v71 = Count;
      CFIndex v72 = 0;
      BOOL v73 = 1;
      while (1)
      {
        v74 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 224), v72);
        if (v74)
        {
          v75 = v74;
          if (sub_1000CE55C((uint64_t)v74) == 1 && sub_1000C8798((uint64_t)v75))
          {
            CFStringRef v76 = (const __CFString *)sub_10001A43C(v75);
            if (CFEqual(v76, v64)) {
              break;
            }
          }
        }
        BOOL v73 = ++v72 < v71;
        if (v71 == v72)
        {
          v77 = 0;
          goto LABEL_151;
        }
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Found network profile with empty string account name: %@", "WiFiManagerMigrateWiFiKeychainEntries", sub_1000C6758(v75) message];
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Checking if empty-string account password has already been migrated", "WiFiManagerMigrateWiFiKeychainEntries")];
      }
      v77 = (const void *)sub_1000C91E4((CFDictionaryRef *)v75, (BOOL *)&v90, 0.1);
      if (qword_10027DD68)
      {
        v83 = "non-null";
        if (!v77) {
          v83 = "null";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: attempted migrated password fetch returned, passwordFetchTimedOut: %d, migratedPassword is: %s", "WiFiManagerMigrateWiFiKeychainEntries", v90, v83);
      }
      if ((_BYTE)v90)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: password fetch for %@ timed out", "WiFiManagerMigrateWiFiKeychainEntries", sub_1000C6758(v75) message];
        }
        if (v73)
        {
LABEL_174:
          char v79 = 0;
LABEL_155:
          *(unsigned char *)(a1 + 2552) = v79;
          if (!v66) {
            goto LABEL_157;
          }
          goto LABEL_156;
        }
      }
      else
      {
        if (v77)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: keychain entry for %@ already present, migration complete", "WiFiManagerMigrateWiFiKeychainEntries", sub_1000C6758(v75) message];
          }
          goto LABEL_153;
        }
        sub_1000C92F8(v75, v66, (BOOL *)context, 0.1);
        int v85 = LOBYTE(context[0]);
        v77 = (const void *)qword_10027DD68;
        if (!v85)
        {
          if (qword_10027DD68)
          {
            [(id)qword_10027DD68 WFLog:3, "%s: password for %@ successfully migrated", "WiFiManagerMigrateWiFiKeychainEntries", sub_1000C6758(v75) message];
            v77 = 0;
          }
          goto LABEL_153;
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Attempted password set/migration for %@ timed out", "WiFiManagerMigrateWiFiKeychainEntries", sub_1000C6758(v75) message];
        }
        v77 = 0;
        if (v73) {
          goto LABEL_174;
        }
      }
    }
LABEL_151:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: No known network matched criteria for empty-account migration", @"WiFiManagerMigrateWiFiKeychainEntries", v88];
    }
LABEL_153:
    char v79 = 1;
LABEL_154:
    goto LABEL_155;
  }
  v77 = 0;
  *(unsigned char *)(a1 + 2552) = 0;
LABEL_156:
  CFRelease(v66);
LABEL_157:
  if (v77) {
    CFRelease(v77);
  }
  if (v64) {
LABEL_160:
  }
    CFRelease(v64);
}

void sub_10000A688(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  if (a1 && a2 && a3)
  {
    id v5 = +[WiFiP2PSPITransactionRequestor shared];
    if (v5)
    {
      CFArrayRef v6 = v5;
      unsigned __int8 valuePtr = 0;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"CATS_APP_PRIORITY");
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberCharType, &valuePtr);
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: CATSUpdate appPolicy (%d -> %d)", "WiFiDeviceManagerCatsP2PUpdate", *(unsigned __int8 *)(a2 + 435), valuePtr);
        }
        uint64_t v24 = 0;
        CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(a3, @"CATS_APP_BITMAP");
        if (v9)
        {
          CFNumberGetValue(v9, kCFNumberLongLongType, &v24);
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: CATSUpdate appBitMap (0x%llx -> 0x%llx)", "WiFiDeviceManagerCatsP2PUpdate", *(void *)(a2 + 440), v24)];
          }
          unint64_t v11 = (v24 ^ *(_DWORD *)(a2 + 440)) & 0x40;
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:@"%s: CATSUpdate coPresenceBitChanged = %d" :3 :@"WiFiDeviceManagerCatsP2PUpdate" :v11 >> 6];
          }
          if (*(unsigned __int8 *)(a2 + 435) != valuePtr || v11)
          {
            uint64_t v13 = 2;
            switch(*(unsigned char *)(a2 + 435))
            {
              case 0:
                uint64_t v13 = 3;
                goto LABEL_33;
              case 1:
                goto LABEL_33;
              case 2:
                if ((*(unsigned char *)(a2 + 440) & 0x40) != 0) {
                  uint64_t v13 = 12;
                }
                else {
                  uint64_t v13 = 1;
                }
                goto LABEL_33;
              case 3:
                uint64_t v13 = 12;
LABEL_33:
                [v6 endTransaction:v13];
                switch(valuePtr)
                {
                  case 0u:
                    v20[0] = _NSConcreteStackBlock;
                    v20[1] = 3221225472;
                    v20[2] = sub_10014BDAC;
                    v20[3] = &unk_100241CF8;
                    v20[4] = a2;
                    CFDictionaryRef v16 = v20;
                    int v17 = v6;
                    uint64_t v18 = 3;
                    goto LABEL_41;
                  case 1u:
                    v21[0] = _NSConcreteStackBlock;
                    v21[1] = 3221225472;
                    v21[2] = sub_100023C0C;
                    v21[3] = &unk_100241CF8;
                    v21[4] = a2;
                    CFDictionaryRef v16 = v21;
                    int v17 = v6;
                    uint64_t v18 = 2;
                    goto LABEL_41;
                  case 2u:
                    if ((v24 & 0x40) != 0)
                    {
                      v23[0] = _NSConcreteStackBlock;
                      v23[1] = 3221225472;
                      v23[2] = sub_10014BD8C;
                      v23[3] = &unk_100241CF8;
                      v23[4] = a2;
                      CFDictionaryRef v16 = v23;
LABEL_40:
                      int v17 = v6;
                      uint64_t v18 = 12;
                    }
                    else
                    {
                      v22[0] = _NSConcreteStackBlock;
                      v22[1] = 3221225472;
                      v22[2] = sub_10014BD9C;
                      v22[3] = &unk_100241CF8;
                      v22[4] = a2;
                      CFDictionaryRef v16 = v22;
                      int v17 = v6;
                      uint64_t v18 = 1;
                    }
LABEL_41:
                    [v17 beginTransaction:v18 completionHandler:v16];
                    break;
                  case 3u:
                    v19[0] = _NSConcreteStackBlock;
                    v19[1] = 3221225472;
                    v19[2] = sub_10014BDBC;
                    v19[3] = &unk_100241CF8;
                    v19[4] = a2;
                    CFDictionaryRef v16 = v19;
                    goto LABEL_40;
                  default:
                    return;
                }
                break;
              default:
                return;
            }
          }
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: CATSUpdate APPLE80211KEY_CATS_APP_BITMAP key not found", "WiFiDeviceManagerCatsP2PUpdate")];
          }
        }
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: CATSUpdate APPLE80211KEY_CATS_APP_PRIORITY key not found" args:("WiFiDeviceManagerCatsP2PUpdate")];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: Fails to create WiFiP2PSPITransactionRequestor", @"WiFiDeviceManagerCatsP2PUpdate"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: CATSUpdate P2P Invalid arguments" arguments:("WiFiDeviceManagerCatsP2PUpdate")];
    }
  }
}

uint64_t sub_10000AB40(const __CFString *a1)
{
  if (CFEqual(a1, @"MWS_BT_COEX_ULOFDMA_DISABLE")) {
    return 358;
  }
  if (CFEqual(a1, @"MWS_RC1_COEX_ULOFDMA_DISABLE")) {
    return 519;
  }
  if (CFEqual(a1, @"MWS_RC2_COEX_ULOFDMA_DISABLE")) {
    return 520;
  }
  if (CFEqual(a1, @"MWS_LE_SCAN_PARAM_INFO")) {
    return 521;
  }
  if (CFEqual(a1, @"MWSType7BITMAPWiFiEnh")) {
    return 540;
  }
  if (CFEqual(a1, @"MWSCOEXBITMAPWiFiEnh")) {
    return 541;
  }
  if (CFEqual(a1, @"MWSOCLBITMAPWiFiEnh")) {
    return 542;
  }
  if (CFEqual(a1, @"MWS_RFEM_CONFIG_Enh")) {
    return 543;
  }
  if (CFEqual(a1, @"MWS_ASSOC_PROTECTION_BITMAP_Enh")) {
    return 544;
  }
  if (CFEqual(a1, @"MWS_SCAN_FREQ_Enh")) {
    return 545;
  }
  if (CFEqual(a1, @"MWS_SCAN_FREQ_MODE_Enh")) {
    return 546;
  }
  if (CFEqual(a1, @"MWS_CONDITION_ID_BITMAP_Enh")) {
    return 547;
  }
  if (CFEqual(a1, @"MWS_ANTENNA_SELECTION_Enh")) {
    return 548;
  }
  if (CFStringCompare(a1, @"MWS_TIME_SHARING_Enh", 0)) {
    return 0;
  }
  return 539;
}

id sub_10000AD1C(uint64_t a1)
{
  if (sub_10000B58C()
    && (uint64_t v3 = sub_10000B490(), a1)
    && v3
    && (CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, *(CFDictionaryRef *)(a1 + 16))) != 0)
  {
    CFDictionaryRef v5 = Copy;
    CFIndex v22 = v2;
    id v6 = [[(id)sub_10001E404(a1, @"HS20GasResponse") mutableCopy];
    [v6 setObject:0 forKeyedSubscript:@"ANQP_STATUS"];
    [v6 setObject:0 forKeyedSubscript:@"BSSID"];
    [v6 setObject:0 forKeyedSubscript:@"CHANNEL"];
    [v6 setObject:0 forKeyedSubscript:@"CHANNEL_FLAGS"];
    id v7 = [(__CFDictionary *)v5 mutableCopy];
    [v7 setObject:v6 forKeyedSubscript:@"ANQP_PARSED"];
    id v8 = +[NSMutableDictionary dictionary];
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v9 = +[CWFScanResult supportedOSSpecificKeys];
    id v10 = [v9 countByEnumeratingWithState:&v27 objects:v32 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v28;
      do
      {
        for (int i = 0; i != v11; int i = (char *)i + 1)
        {
          if (*(void *)v28 != v12) {
            objc_enumerationMutation(v9);
          }
          [v8 setObject:sub_10001E404(a1, *(void **)(*((void *)&v27 + 1) + 8 * i)) forKeyedSubscript:*(void *)(*((void *)&v27 + 1) + 8 * i)];
        }
        id v11 = [v9 countByEnumeratingWithState:&v27 objects:v32 count:16];
      }
      while (v11);
    }
    if ([v8 count]) {
      id v14 = v8;
    }
    else {
      id v14 = 0;
    }
    [v7 setObject:v14 forKeyedSubscript:sub_10000B490()];
    v34[0] = @"IsWiFiNetworkShareble";
    v34[1] = @"NetworkOriginator";
    v34[2] = @"CaptiveBypass";
    v34[3] = @"DiagnosticsBssEnv";
    v34[4] = @"DisableWiFiAutoJoinUntilFirstUserJoin";
    v34[5] = @"DisplayedOperatorName";
    v34[6] = @"DomainName";
    v34[7] = @"HS20GasResponse";
    v34[8] = @"HS20HomeOperatorNetwork";
    v34[9] = @"HS20ProvisionedNetwork";
    v34[10] = @"HS2NetworkBadge";
    v34[11] = @"HS20AccountName";
    v34[12] = @"MCCandMNC";
    v34[13] = @"NaiRealmName";
    v34[14] = @"NetworkAtLocationOfInterestType";
    v34[15] = @"WiFiNetworkAttributeHighPopularity";
    v34[16] = @"WiFiNetworkAttributeHighQuality";
    v34[17] = @"WiFiNetworkAttributeIsMoving";
    v34[18] = @"WiFiNetworkAttributeIsPotentiallyCaptive";
    v34[19] = @"WiFiNetworkAttributeIsPotentiallyMoving";
    v34[20] = @"WiFiNetworkAttributeIsSuspicious";
    v34[21] = @"WiFiNetworkAttributeIsTCPGood";
    v34[22] = @"WiFiNetworkAttributeLowPopularity";
    v34[23] = @"WiFiNetworkAttributeLowQuality";
    v34[24] = @"WiFiNetworkAttributePopularityScore";
    v34[25] = @"WiFiNetworkAttributeProminentDisplay";
    v34[26] = @"WiFiNetworkAttributeQualityScore";
    v34[27] = @"WiFiNetworkAttributeSource";
    v34[28] = @"BundleIdentifier";
    v34[29] = @"SIMIdentifiers";
    v34[30] = @"WiFiNetworkDisabledUntilDate";
    v34[31] = @"EnterpriseProfile";
    v34[32] = @"WiFiNetworkExpirationDate";
    v34[33] = @"NetworkForcedHomeFix";
    v34[34] = @"kWiFiNetworkLastHomeForceFixDateKey";
    v34[35] = @"NetworkOfInterestHomeState";
    v34[36] = @"NetworkOfInterestWorkState";
    v34[37] = @"WiFiNetworkPasswordModificationDate";
    v34[38] = @"PayloadUUID";
    v34[39] = @"SaveDataMode";
    v34[40] = @"NetworkQualityResponsiveness";
    v34[41] = @"NetworkQualityDate";
    v34[42] = @"ShareableEAPConfig";
    v34[43] = @"ShareableEAPTrustExceptions";
    v34[44] = @"ShareableStatus";
    v34[45] = @"ShareMode";
    v34[46] = @"kWiFiNetworkSSIDHarvestStatusKey";
    v34[47] = @"UserRole";
    v34[48] = @"WalletIdentifier";
    v34[49] = @"addedAt";
    v34[50] = @"knownBSSUpdatedDate";
    v34[51] = @"lastAutoJoined";
    v34[52] = @"lastJoined";
    v34[53] = @"lastRoamed";
    v34[54] = @"lastUpdated";
    v34[55] = @"WiFiManagerKnownNetworksEventType";
    v34[56] = @"networkDisabledClientName";
    v34[57] = @"networkDisabledReason";
    v34[58] = @"networkDisabledTimestamp";
    v34[59] = @"enabled";
    v34[60] = @"networkKnownBSSListKey";
    v34[61] = @"scanWasDirected";
    v34[62] = @"prevJoined";
    v34[63] = @"UserDirected";
    v34[64] = @"networkUsage";
    v34[65] = @"RoamingConsortiumOIs";
    v34[66] = @"SPRoaming";
    v34[67] = @"PolicyUUID";
    v34[68] = @"PrivacyProxyEnabled";
    v34[69] = @"TransitionDisabledFlags";
    v34[70] = @"Standalone";
    v34[71] = @"PublicAirPlayNetwork";
    v34[72] = @"PrivacyProxyBlockedReason";
    v34[73] = @"FilteredNetwork";
    v34[74] = @"DNSFailures";
    CFDictionaryRef v15 = +[NSArray arrayWithObjects:v34 count:75];
    if (&_CNForgetSSID)
    {
      v33[0] = kCNSCaptiveNetworkProperty;
      v33[1] = kCNSNetworkWasCaptiveProperty;
      CFDictionaryRef v15 = [(NSArray *)v15 arrayByAddingObjectsFromArray:+[NSArray arrayWithObjects:v33 count:2]];
    }
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v16 = [(NSArray *)v15 countByEnumeratingWithState:&v23 objects:v31 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v24;
      do
      {
        for (int j = 0; j != v17; int j = (char *)j + 1)
        {
          if (*(void *)v24 != v18) {
            objc_enumerationMutation(v15);
          }
          [v7 setObject:0 forKeyedSubscript:*(void *)(*((void *)&v23 + 1) + 8 * (void)j)];
        }
        id v17 = [(NSArray *)v15 countByEnumeratingWithState:&v23 objects:v31 count:16];
      }
      while (v17);
    }
    id v20 = [objc_alloc((Class)sub_10000B58C()) initWithScanRecord:v7 includeProperties:0];
    CFRelease(v5);
  }
  else
  {
    return 0;
  }
  return v20;
}

uint64_t sub_10000B490()
{
  uint64_t v3 = 0;
  int v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_10027D768;
  uint64_t v6 = qword_10027D768;
  if (!qword_10027D768)
  {
    CFDictionaryRef v1 = (void *)sub_1000D38A4();
    v4[3] = (uint64_t)dlsym(v1, "CWFScanResultPropertyOSSpecificAttributesKey");
    qword_10027D768 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    sub_10019691C();
  }
  return *(void *)v0;
}

void sub_10000B574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000B58C()
{
  uint64_t v3 = 0;
  int v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = sub_100022CF8;
  id v7 = sub_100022C00;
  uint64_t v0 = qword_10027D760;
  uint64_t v8 = qword_10027D760;
  if (!qword_10027D760)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1000D3CD4;
    v2[3] = &unk_100240920;
    void v2[4] = &v3;
    sub_1000D3CD4((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10000B668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000B680(unsigned char *a1, uint64_t a2, CFDictionaryRef theDict)
{
  uint64_t valuePtr = 0;
  int v70 = 0;
  CFNumberRef v68 = 0;
  CFNumberRef v69 = 0;
  v67 = 0;
  if (!theDict)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: lqmDict is null" arguments:@"__WiFiDeviceProcessRSSIEvent"];
    }
    return;
  }
  CFDictionaryRef v3 = theDict;
  if (a1[208])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s - Hijacking the RSSI event with simulated link:%@", "__WiFiDeviceProcessRSSIEvent", *((void *)a1 + 27) message];
    }
    CFDictionaryRef v3 = (const __CFDictionary *)*((void *)a1 + 27);
  }
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(v3, @"RSSI");
  if (!v7) {
    return;
  }
  CFNumberGetValue(v7, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  float v8 = sub_100023EF4(SHIDWORD(valuePtr));
  *(float *)&uint64_t valuePtr = v8;
  *((_DWORD *)a1 + 66) = HIDWORD(valuePtr);
  *((float *)a1 + 67) = v8;
  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
  if (!v9)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null scaledRSSINumRef" args:("__WiFiDeviceProcessRSSIEvent")];
    }
    return;
  }
  CFNumberRef v10 = v9;
  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v3);
  if (!MutableCopy)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null lqmMutableDict" args:("__WiFiDeviceProcessRSSIEvent", nil)];
    }
    CFDateRef v59 = v10;
    goto LABEL_131;
  }
  uint64_t v12 = MutableCopy;
  CFDictionaryAddValue(MutableCopy, @"SCALED_RSSI", v10);
  CFDictionaryRef theDicta = 0;
  value = 0;
  a1[307] = 0;
  if (CFDictionaryGetValueIfPresent(v3, @"CCA", (const void **)&value))
  {
    CFNumberRef v13 = (const __CFNumber *)value;
    if (value)
    {
      a1[308] = 0;
      CFNumberGetValue(v13, kCFNumberSInt8Type, a1 + 308);
      a1[307] = 1;
    }
  }
  if (CFDictionaryGetValueIfPresent(v3, @"CCA_STATS", (const void **)&theDicta))
  {
    CFDictionaryRef v14 = theDicta;
    if (theDicta)
    {
      v77 = 0;
      CFNumberRef v75 = 0;
      CFNumberRef number = 0;
      *(_WORD *)(a1 + 309) = 0;
      a1[311] = 0;
      if (CFDictionaryGetValueIfPresent(v14, @"CCA_SELF_TOTAL", (const void **)&v77) && v77) {
        CFNumberGetValue((CFNumberRef)v77, kCFNumberSInt8Type, a1 + 309);
      }
      if (CFDictionaryGetValueIfPresent(theDicta, @"CCA_OTHER_TOTAL", (const void **)&number) && number) {
        CFNumberGetValue(number, kCFNumberSInt8Type, a1 + 310);
      }
      if (CFDictionaryGetValueIfPresent(theDicta, @"CCA_INTERFERENCE_TOTAL", (const void **)&v75) && v75) {
        CFNumberGetValue(v75, kCFNumberSInt8Type, a1 + 311);
      }
      if (!a1[307])
      {
        a1[308] = a1[310] + a1[309] + a1[311];
        a1[307] = 1;
      }
    }
  }
  a1[272] = 0;
  if (CFDictionaryGetValueIfPresent(v3, @"SNR", (const void **)&v69))
  {
    CFNumberRef v15 = v69;
    if (v69)
    {
      *((void *)a1 + 35) = 0;
      CFNumberGetValue(v15, kCFNumberSInt16Type, &v70);
      *((void *)a1 + 35) = (__int16)v70;
      a1[272] = 1;
      CFDictionaryAddValue(v12, @"SNR", v69);
    }
  }
  a1[288] = 0;
  if (CFDictionaryGetValueIfPresent(v3, @"NOISE", (const void **)&v68))
  {
    CFNumberRef v16 = v68;
    if (v68)
    {
      *((void *)a1 + 37) = 0;
      CFNumberGetValue(v16, kCFNumberSInt16Type, (char *)&v70 + 2);
      *((void *)a1 + 37) = SHIWORD(v70);
      a1[288] = 1;
      CFDictionaryAddValue(v12, @"NOISE", v68);
    }
  }
  id v17 = a1 + 305;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  if (CFDictionaryGetValueIfPresent(v3, @"PER_CORE_RSSI", (const void **)&v67))
  {
    int v18 = sub_10001301C((const __CFArray *)v67, &v64, &v63);
    a1[304] = v18;
    if (v18)
    {
      _WORD *v17 = 0;
      a1[305] = v64;
      a1[306] = v63;
      CFDictionaryAddValue(v12, @"PER_CORE_RSSI", v67);
    }
  }
  else
  {
    a1[304] = 0;
  }
  if (CFDictionaryGetValueIfPresent(v3, @"PER_CORE_NOISE", (const void **)&v67) && v67) {
    CFDictionaryAddValue(v12, @"PER_CORE_NOISE", v67);
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v20 = CFDateCreate(kCFAllocatorDefault, Current);
  if (v20) {
    CFDictionaryAddValue(v12, @"LQMTIMESTAMP", v20);
  }
  CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 4316);
  CFDictionaryAddValue(v12, @"WiFiIPState", v21);
  CFIndex v22 = (const void **)&kCFBooleanTrue;
  if (!a1[4312]) {
    CFIndex v22 = (const void **)&kCFBooleanFalse;
  }
  CFDictionaryAddValue(v12, @"WiFiHasNoGatewayIP", *v22);
  if (v21) {
    CFRelease(v21);
  }
  double v23 = CFAbsoluteTimeGetCurrent();
  long long v24 = a1 + 312;
  uint64_t v25 = *((void *)a1 + 161);
  uint64_t v26 = *((void *)a1 + 160);
  if (v26)
  {
    uint64_t v27 = v25 - 1;
    if (!v25) {
      uint64_t v27 = 29;
    }
    double v28 = v23 - *(double *)&v24[32 * v27 + 24];
    double v29 = -v28;
    if (v28 >= 0.0) {
      double v29 = v23 - *(double *)&v24[32 * v27 + 24];
    }
    if (v29 < 1.0)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Too frequent(%f secs) rssi event from driver, ignore updating RSSI in RSSI history\n", *(void *)&v28);
      }
LABEL_114:
      goto LABEL_125;
    }
  }
  if (v25 == 30) {
    uint64_t v25 = 0;
  }
  uint64_t v31 = &v24[32 * v25];
  uint64_t v32 = *((void *)a1 + 37);
  *(void *)uint64_t v31 = *((int *)a1 + 66);
  *((void *)v31 + 1) = v32;
  *((void *)v31 + 2) = *((void *)a1 + 35);
  *((double *)v31 + 3) = v23;
  if (v26 > 29)
  {
    if (v25 == *((void *)a1 + 159))
    {
      if (v25 == 29) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = v25 + 1;
      }
      *((void *)a1 + 159) = v33;
    }
  }
  else
  {
    *((void *)a1 + 160) = v26 + 1;
  }
  *((void *)a1 + 161) = v25 + 1;
  double v34 = CFAbsoluteTimeGetCurrent();
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  v77 = 0;
  uint64_t v78 = 0;
  CFNumberRef v75 = 0;
  CFNumberRef number = 0;
  CFNumberRef v73 = 0;
  CFNumberRef v74 = 0;
  CFNumberRef v72 = 0;
  if (CFDictionaryGetValueIfPresent(v12, @"TXFRAMES", (const void **)&number) && number) {
    CFNumberGetValue(number, kCFNumberIntType, &v80);
  }
  if (CFDictionaryGetValueIfPresent(v12, @"TXFAIL", (const void **)&v77) && v77) {
    CFNumberGetValue((CFNumberRef)v77, kCFNumberIntType, (char *)&v80 + 4);
  }
  if (CFDictionaryGetValueIfPresent(v12, @"RXBEACONFRMS", (const void **)&v75) && v75) {
    CFNumberGetValue(v75, kCFNumberIntType, (char *)&v79 + 4);
  }
  if (CFDictionaryGetValueIfPresent(v12, @"RXBEACONSCHED", (const void **)&v74) && v74) {
    CFNumberGetValue(v74, kCFNumberIntType, &v79);
  }
  if (CFDictionaryGetValueIfPresent(v12, @"TXFWFAIL", (const void **)&v73) && v73) {
    CFNumberGetValue(v73, kCFNumberIntType, (char *)&v78 + 4);
  }
  if (CFDictionaryGetValueIfPresent(v12, @"TXFWFRAMES", (const void **)&v72) && v72) {
    CFNumberGetValue(v72, kCFNumberIntType, &v78);
  }
  unint64_t v36 = *((void *)a1 + 499);
  if (v36 >= 0x1F)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s, Invalid currIndx %ld. Resetting!\n", "__WiFiDeviceUpdateTransmitReceiveHistory", *((void *)a1 + 499)];
    }
    goto LABEL_84;
  }
  if (v36 == 30)
  {
LABEL_84:
    unint64_t v36 = 0;
    *((void *)a1 + 499) = 0;
  }
  CFDictionaryRef v38 = a1 + 2304;
  uint64_t v39 = *((void *)a1 + 498);
  if (!v39) {
    goto LABEL_94;
  }
  uint64_t v40 = v36 - 1;
  if (!v36) {
    uint64_t v40 = 29;
  }
  double v41 = v34 - *(double *)&v38[56 * v40 + 48];
  double v35 = -v41;
  if (v41 >= 0.0) {
    double v35 = v34 - *(double *)&v38[56 * v40 + 48];
  }
  if (v35 < 1.0)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Too frequent(%f secs) LQM event from driver, ignore updating txrx history\n", *(void *)&v41);
    }
  }
  else
  {
LABEL_94:
    unsigned int v43 = v80;
    CFArrayRef v44 = &v38[56 * v36];
    *CFArrayRef v44 = v80;
    unsigned int v45 = v78;
    v44[2] = v78;
    unsigned int v46 = v79;
    v44[4] = v79;
    if (v43)
    {
      LODWORD(v35) = HIDWORD(v80);
      double v35 = (double)*(unint64_t *)&v35 / (double)v43 * 100.0;
      unsigned int v43 = (int)v35;
    }
    v38[56 * v36 + 8] = v43;
    if (v45)
    {
      LODWORD(v35) = HIDWORD(v78);
      unsigned int v45 = (int)((double)*(unint64_t *)&v35 / (double)v45 * 100.0);
    }
    v38[56 * v36 + 24] = v45;
    if (v46)
    {
      if (v46 > HIDWORD(v79)) {
        unsigned int v46 = (int)((double)(v46 - HIDWORD(v79)) / (double)v46 * 100.0);
      }
      else {
        LOBYTE(v46) = 0;
      }
    }
    CFArrayRef v47 = (double *)&v38[56 * v36];
    *((unsigned char *)v47 + 40) = v46;
    v47[6] = v34;
    if (v39 <= 29) {
      *((void *)a1 + 498) = v39 + 1;
    }
    *((void *)a1 + 499) = v36 + 1;
  }
  if (CFDictionaryContainsKey(v12, @"PER_CORE_RSSI"))
  {
    double v48 = CFAbsoluteTimeGetCurrent();
    CFStringRef v49 = a1 + 1296;
    uint64_t v50 = *((void *)a1 + 224);
    uint64_t v51 = *((void *)a1 + 223);
    if (v51)
    {
      uint64_t v52 = v50 - 1;
      if (!v50) {
        uint64_t v52 = 29;
      }
      double v53 = v48 - *(double *)&v49[16 * v52 + 8];
      double v54 = -v53;
      if (v53 >= 0.0) {
        double v54 = v48 - *(double *)&v49[16 * v52 + 8];
      }
      if (v54 < 1.0)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Too frequent(%f secs) per-Core Rssi event from driver, ignore updating Core0, Core1 RSSI in Per Core RSSI History\n", *(void *)&v53);
        }
        goto LABEL_114;
      }
    }
    if (v50 == 30) {
      uint64_t v50 = 0;
    }
    v55 = (double *)&v49[16 * v50];
    *(_WORD *)v55 = *v17;
    v55[1] = v48;
    if (v51 > 29)
    {
      if (v50 == *((void *)a1 + 222))
      {
        if (v50 == 29) {
          uint64_t v56 = 0;
        }
        else {
          uint64_t v56 = v50 + 1;
        }
        *((void *)a1 + 222) = v56;
      }
    }
    else
    {
      *((void *)a1 + 223) = v51 + 1;
    }
    *((void *)a1 + 224) = v50 + 1;
  }
LABEL_125:
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Feeding RSSI data to LQM - RSSI:%d Core0-RSSI:%d Core1-RSSI:%d \n", "__WiFiDeviceProcessRSSIEvent", *((unsigned int *)a1 + 66), (char)a1[305], (char)a1[306]);
  }
  CFDateRef v58 = (void (*)(unsigned char *, uint64_t, void, __CFDictionary *))*((void *)a1 + 605);
  if (v58) {
    v58(a1, a2, *((void *)a1 + 606), v12);
  }
  CFRelease(v10);
  CFRelease(v12);
  if (v20)
  {
    CFDateRef v59 = v20;
LABEL_131:
    CFRelease(v59);
  }
}

CFArrayRef sub_10000C060(uint64_t a1, int a2)
{
  if (qword_10027DD68)
  {
    uint64_t v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s: current state: %@", "__WiFiDeviceManagerDetermineNextAction", sub_100024BE8(*(_DWORD *)(a1 + 3280))]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v84 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v5 UTF8String]] UTF8String];
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
  }
  if (a2)
  {
    if (a2 == 82)
    {
      sub_100102284(a1);
      return 0;
    }
    return sub_100003818(a1);
  }
  CFArrayRef v6 = *(const __CFArray **)(a1 + 1104);
  if (v6 && *(unsigned char *)(a1 + 6896) && *(unsigned char *)(a1 + 6987) && *(void *)(a1 + 6976))
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 1104));
    CFIndex v8 = Count;
    if (Count < 1)
    {
      if (Count)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: null network." arguments:("__WiFiDeviceManagerProcessAutoHotspotJoinRecommendedFromScanResults", nil)];
        }
      }
    }
    else
    {
      CFIndex v9 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
        if (ValueAtIndex)
        {
          id v11 = ValueAtIndex;
          uint64_t v12 = sub_10001A43C(ValueAtIndex);
          CFNumberRef v13 = sub_10001A43C(*(const void **)(a1 + 6976));
          if (CFEqual(v12, v13)) {
            break;
          }
        }
        if (v8 == ++v9) {
          goto LABEL_21;
        }
      }
      if (v8 != v9)
      {
        uint64_t v15 = sub_100017C48(*(void *)(a1 + 64));
        *(_DWORD *)(a1 + 3280) = sub_100123384(a1, v15, 12, 0, v11, 0);
      }
    }
  }
LABEL_21:
  if (*(_DWORD *)(a1 + 3280) == 14) {
    return (const __CFArray *)14;
  }
  int v17 = *(_DWORD *)(a1 + 3352);
  switch(v17)
  {
    case 4:
      CFArrayRef v47 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_101;
      }
      double v48 = "Not prompting ATJ, driving";
      goto LABEL_100;
    case 6:
      CFArrayRef v47 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_101;
      }
      double v48 = "Not prompting ATJ, still driving";
      goto LABEL_100;
    case 3:
      CFArrayRef v47 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_101;
      }
      double v48 = "Not prompting ATJ, running";
      goto LABEL_100;
  }
  if (!*(unsigned char *)(a1 + 6280))
  {
    CFArrayRef v47 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_101;
    }
    double v48 = "Not prompting ATJ, due to user disabled auto join";
    goto LABEL_100;
  }
  if (!*(_DWORD *)(a1 + 108))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: ask-to-join is set to off", "__WiFiDeviceManagerDetermineNextAction", v68);
    }
    goto LABEL_101;
  }
  int v18 = *(_DWORD *)(a1 + 176);
  if (v18 != 1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: not interactive. Suppressing ATJ action", @"__WiFiDeviceManagerDetermineNextAction"];
    }
    CFStringRef v49 = v19;
    goto LABEL_102;
  }
  if ((*(_DWORD *)(a1 + 3280) - 2) <= 2)
  {
    [*(id *)(a1 + 6680) ingestScanResults:*(void *)(a1 + 1104) ofType:1 clientName:@"wifid" directed:0];
    if (*(unsigned char *)(a1 + 6712))
    {
      id v20 = sub_1001390A0(a1);
      CFNumberRef v21 = [[WiFiScanResultsPreparer alloc] initWithManager:a1 availabilityEngine:*(void *)(a1 + 6672) scanResults:*(void *)(a1 + 1104) disableProminentFiltering:0 blacklistedSSIDs:v20];
      if (v20) {
        CFRelease(v20);
      }
      CFIndex v22 = [(WiFiScanResultsPreparer *)v21 preparedScanResults];
      CFIndex v71 = v19;
      CFTypeRef cf = (NSObject **)a1;
      int v70 = v21;
      if (v22)
      {
        double v23 = +[NSMutableArray arrayWithArray:*(void *)(a1 + 3528)];
        [(NSMutableArray *)v23 addObjectsFromArray:*(void *)(a1 + 3536)];
        CFNumberRef v74 = v23;
        [(NSMutableArray *)v23 addObjectsFromArray:*(void *)(a1 + 3640)];
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s count %lu", "__WiFiDeviceManagerUpdateKnownNetworksWithPreparedScanResults", -[NSArray count](v22, "count"));
        }
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        id v25 = [(NSArray *)v22 countByEnumeratingWithState:&v79 objects:buf count:16];
        if (v25)
        {
          id v26 = v25;
          uint64_t v27 = *(void *)v80;
          CFBooleanRef v28 = kCFBooleanTrue;
          CFNumberRef v73 = v22;
          do
          {
            for (int i = 0; i != v26; int i = (char *)i + 1)
            {
              if (*(void *)v80 != v27) {
                objc_enumerationMutation(v22);
              }
              uint64_t v30 = *(void *)(*((void *)&v79 + 1) + 8 * i);
              if (!v30) {
                continue;
              }
              if (v28 != sub_10001E404(*(void *)(*((void *)&v79 + 1) + 8 * i), @"WiFiNetworkAttributeIsKnown"))continue; {
              id v31 = [(NSMutableArray *)v74 objectAtIndex:[(NSMutableArray *)v74 indexOfObject:v30]];
              }
              if (!v31) {
                continue;
              }
              uint64_t v32 = v31;
              uint64_t v33 = v27;
              CFBooleanRef v34 = v28;
              double v35 = sub_10001E404(v30, @"WiFiNetworkAttributeIsPotentiallyCaptive");
              unint64_t v36 = sub_10001E404(v30, @"WiFiNetworkAttributeIsSuspicious");
              CFDateRef v37 = sub_10001E404(v30, @"WiFiNetworkAttributeIsTCPGood");
              CFStringRef v76 = sub_10001E404(v30, @"WiFiNetworkAttributeIsPotentiallyMoving");
              v77 = sub_10001E404(v30, @"WiFiNetworkAttributeIsPublic");
              CFNumberRef v75 = sub_10001E404(v30, @"WiFiNetworkAttributeHighPopularity");
              if (!v35 || v35 == sub_10001E404((uint64_t)v32, @"WiFiNetworkAttributeIsPotentiallyCaptive"))
              {
                int v39 = 0;
              }
              else
              {
                sub_10001C6A4((uint64_t)v32, @"WiFiNetworkAttributeIsPotentiallyCaptive", v35);
                if (CFBooleanGetValue((CFBooleanRef)v35))
                {
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:4, "%s: '%@' isPotentiallyCaptive", "__WiFiDeviceManagerUpdateKnownNetworksWithPreparedScanResults", sub_10001A43C(v32) message];
                  }
                }
                int v39 = 1;
              }
              CFBooleanRef v28 = v34;
              if (v36)
              {
                uint64_t v27 = v33;
                if (v36 != sub_10001E404((uint64_t)v32, @"WiFiNetworkAttributeIsSuspicious"))
                {
                  sub_10001C6A4((uint64_t)v32, @"WiFiNetworkAttributeIsSuspicious", v36);
                  if (CFBooleanGetValue((CFBooleanRef)v36))
                  {
                    if (qword_10027DD68) {
                      [(id)qword_10027DD68 WFLog:4, "%s: '%@' isSuspicious", "__WiFiDeviceManagerUpdateKnownNetworksWithPreparedScanResults", sub_10001A43C(v32) message];
                    }
                  }
                  int v39 = 1;
                }
                if (!v37) {
                  goto LABEL_68;
                }
              }
              else
              {
                uint64_t v27 = v33;
                if (!v37) {
                  goto LABEL_68;
                }
              }
              double v41 = v77;
              if (v37 == sub_10001E404((uint64_t)v32, @"WiFiNetworkAttributeIsTCPGood")) {
                goto LABEL_69;
              }
              sub_10001C6A4((uint64_t)v32, @"WiFiNetworkAttributeIsTCPGood", v37);
              if (CFBooleanGetValue((CFBooleanRef)v37))
              {
                int v39 = 1;
                goto LABEL_69;
              }
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:4, "%s: '%@' isTCPGood is false", "__WiFiDeviceManagerUpdateKnownNetworksWithPreparedScanResults", sub_10001A43C(v32) message];
              }
              int v39 = 1;
LABEL_68:
              double v41 = v77;
LABEL_69:
              if (!v76)
              {
                CFIndex v22 = v73;
LABEL_77:
                if (v41) {
                  goto LABEL_78;
                }
                goto LABEL_86;
              }
              CFIndex v22 = v73;
              if (v76 == sub_10001E404((uint64_t)v32, @"WiFiNetworkAttributeIsPotentiallyMoving")) {
                goto LABEL_77;
              }
              sub_10001C6A4((uint64_t)v32, @"WiFiNetworkAttributeIsPotentiallyMoving", v76);
              if (CFBooleanGetValue((CFBooleanRef)v76))
              {
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:4, "%s: '%@' isPotentiallyMoving", "__WiFiDeviceManagerUpdateKnownNetworksWithPreparedScanResults", sub_10001A43C(v32) message];
                }
                int v39 = 1;
                double v41 = v77;
                if (!v77) {
                  goto LABEL_86;
                }
LABEL_78:
                if (v41 != sub_10001E404((uint64_t)v32, @"WiFiNetworkAttributeIsPublic"))
                {
                  sub_10001C6A4((uint64_t)v32, @"WiFiNetworkAttributeIsPublic", v41);
                  if (CFBooleanGetValue((CFBooleanRef)v41))
                  {
                    if (qword_10027DD68) {
                      [(id)qword_10027DD68 WFLog:4, "%s: '%@' isPublic", "__WiFiDeviceManagerUpdateKnownNetworksWithPreparedScanResults", sub_10001A43C(v32) message];
                    }
                    int v39 = 1;
                  }
                  else
                  {
                    int v39 = 1;
                  }
                }
                goto LABEL_86;
              }
              int v39 = 1;
              if (v41) {
                goto LABEL_78;
              }
LABEL_86:
              if (!v75 || v75 == sub_10001E404((uint64_t)v32, @"WiFiNetworkAttributeHighPopularity"))
              {
                if (!v39) {
                  continue;
                }
              }
              else
              {
                sub_10001C6A4((uint64_t)v32, @"WiFiNetworkAttributeHighPopularity", v75);
                if (CFBooleanGetValue((CFBooleanRef)v75))
                {
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:4, "%s: '%@' isHighlyPopular", "__WiFiDeviceManagerUpdateKnownNetworksWithPreparedScanResults", sub_10001A43C(v32) message];
                  }
                }
              }
              sub_10010C6B4(cf, v32);
            }
            id v26 = [(NSArray *)v22 countByEnumeratingWithState:&v79 objects:buf count:16];
          }
          while (v26);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, @"%s: Null preparedScanResults!", @"__WiFiDeviceManagerUpdateKnownNetworksWithPreparedScanResults"];
        }
      }

      int v19 = v71;
      a1 = (uint64_t)cf;
    }
  }
  unsigned int v78 = 0;
  if (sub_1001368DC(a1, &v78))
  {
    CFArrayRef v47 = (void *)qword_10027DD68;
    if (!qword_10027DD68)
    {
LABEL_101:
      CFStringRef v49 = v46;
LABEL_102:
      return sub_100003818(a1);
    }
    uint64_t v67 = v78;
    double v48 = "Not prompting ATJ, auto-join scan suppressed due to reason=%d";
LABEL_100:
    [v47 WFLog:3 message:v48, v67, v68];
    goto LABEL_101;
  }
  CFArrayRef v50 = *(const __CFArray **)(a1 + 1104);
  if (!*(_DWORD *)(a1 + 108))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"%s: ask-to-join is set to off", @"__WiFiDeviceManagerDetermineAskToJoinActionFromScanResults"];
    }
    goto LABEL_166;
  }
  if ([+[WiFiUserInteractionMonitor sharedInstance] isAskToJoinAllowed])
  {
    if (*(_DWORD *)(a1 + 176) != 1) {
      goto LABEL_167;
    }
  }
  else
  {
    unsigned __int8 v52 = [+[WiFiUserInteractionMonitor sharedInstance] isNetworkRecommendationAllowed];
    if (*(_DWORD *)(a1 + 176) != 1)
    {
LABEL_167:
      id v56 = 0;
      uint64_t v57 = 0;
      double v54 = 0;
      goto LABEL_126;
    }
    if ((v52 & 1) == 0)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: ask to join not allowed due to user interaction state", @"__WiFiDeviceManagerDetermineAskToJoinActionFromScanResults"];
      }
      goto LABEL_166;
    }
  }
  if (!v50)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: scanResults is null", "__WiFiDeviceManagerDetermineAskToJoinActionFromScanResults"];
    }
    goto LABEL_166;
  }
  if (!CFArrayGetCount(v50))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: scanResults is empty", @"__WiFiDeviceManagerDetermineAskToJoinActionFromScanResults"];
    }
LABEL_166:
    goto LABEL_167;
  }
  id v53 = sub_1001390A0(a1);
  double v54 = [[WiFiScanResultsPreparer alloc] initWithManager:a1 availabilityEngine:*(void *)(a1 + 6672) scanResults:v50 disableProminentFiltering:0 blacklistedSSIDs:v53];
  if (v53) {
    CFRelease(v53);
  }
  if ([(WiFiScanResultsPreparer *)v54 topRecommendableNetwork])
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: found recommended network %@", "__WiFiDeviceManagerDetermineAskToJoinActionFromScanResults", -[WiFiScanResultsPreparer topRecommendableNetwork](v54, "topRecommendableNetwork") message];
    }
    id v56 = [(WiFiScanResultsPreparer *)v54 topRecommendableNetwork];
    uint64_t v57 = 1;
  }
  else if ([(WiFiScanResultsPreparer *)v54 prominentScanResultsCount])
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: prominent display network count: %ld", "__WiFiDeviceManagerDetermineAskToJoinActionFromScanResults", -[WiFiScanResultsPreparer prominentScanResultsCount](v54, "prominentScanResultsCount"));
    }
    id v56 = 0;
    if ([+[WiFiUserInteractionMonitor sharedInstance] isNetworkingAppInForeground])
    {
      uint64_t v57 = 2;
    }
    else
    {
      uint64_t v57 = 0;
    }
  }
  else
  {
    id v56 = 0;
    uint64_t v57 = 0;
  }
LABEL_126:

  if (!v57)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: scan results do not qualify for ask to join", "__WiFiDeviceManagerDetermineNextAction", v68];
    }
    goto LABEL_101;
  }
  if (!sub_10016C7EC(*(void *)(a1 + 96), *(void *)(a1 + 1104), *(const __CFArray **)(a1 + 3576), v57))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: not prompting ATJ action (%d), condition not fulfilled", "__WiFiDeviceManagerDetermineNextAction", v57);
    }
    goto LABEL_101;
  }
  if (v57 == 1)
  {
    CFArrayRef result = (const __CFArray *)sub_100122EF4(a1, v56, 0);
  }
  else
  {
    uint64_t v59 = *(void *)(a1 + 64);
    v60 = (const void *)sub_100017C48(v59);
    v61 = sub_10001C1B4(v59, v60);
    if (v61)
    {
      v62 = v61;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Already connected to %@. Not prompting ATJ.", "__WiFiDeviceManagerDetermineNextAction", sub_10001A43C(v62) message];
      }
      CFRelease(v62);
      return sub_100003818(a1);
    }
    if (!sub_10016C7E0(*(void *)(a1 + 96)) && !*(unsigned char *)(a1 + 104))
    {
      CFArrayRef v47 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_101;
      }
      double v48 = "Not prompting ATJ";
      goto LABEL_100;
    }
    sub_100103488(a1, 0);
    uint64_t v64 = sub_100017C48(*(void *)(a1 + 64));
    CFArrayRef result = (const __CFArray *)sub_100123384(a1, v64, 0, 0, 0, 0);
  }
  if (result != 14) {
    return sub_100003818(a1);
  }
  return result;
}

void sub_10000CEF8(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, CFTypeID a6)
{
  if (a6)
  {
    uint64_t v12 = (void *)sub_10000D990((uint64_t)"__WiFiDeviceEventCallback");
    *(void *)(a6 + 5912) = 0;
    CFNumberRef v13 = *(const void **)(a6 + 5920);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(a6 + 5920) = 0;
    }
    if (sub_10000D630((uint64_t *)a6, a3))
    {
      if ((int)a3 <= 136)
      {
        switch((int)a3)
        {
          case 1:
            sub_1000785F4(a6, *(const void **)(a6 + 112));
            goto LABEL_33;
          case 2:
          case 5:
          case 6:
          case 7:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 33:
          case 34:
            goto LABEL_109;
          case 3:
            sub_100078564(a6, *(void *)(a6 + 112));
LABEL_33:
            sub_10006A104(a6);
            goto LABEL_109;
          case 4:
            sub_100077648(a6, *(const void **)(a6 + 112), a4);
            goto LABEL_109;
          case 8:
            sub_100076860(a6, *(void *)(a6 + 112), a1);
            sub_1000786D8(a6, *(void *)(a6 + 112), a1);
            goto LABEL_109;
          case 9:
            sub_10007756C(a6, *(void *)(a6 + 112), a4, a1);
            goto LABEL_109;
          case 10:
            sub_100074E8C(a6, *(void *)(a6 + 112), a4, 0, a1);
            goto LABEL_109;
          case 11:
            sub_100079FD0((void *)a6, *(void *)(a6 + 112));
            goto LABEL_109;
          case 12:
            sub_1000788AC(a6, *(void *)(a6 + 112), (uint64_t)a4);
            goto LABEL_109;
          case 13:
            sub_100078980(a6, *(void *)(a6 + 112), (uint64_t)a4);
            goto LABEL_109;
          case 14:
            int v19 = *(void (**)(CFTypeID, uint64_t, uint64_t))(a6 + 4368);
            if (!v19) {
              goto LABEL_109;
            }
            uint64_t v20 = *(void *)(a6 + 112);
            uint64_t v21 = *(void *)(a6 + 4376);
            goto LABEL_103;
          case 30:
            sub_100064260(a6, *(void *)(a6 + 112), a1);
            goto LABEL_109;
          case 31:
            sub_1000787A4(a6, *(void *)(a6 + 112), a4);
            goto LABEL_109;
          case 32:
            int v19 = *(void (**)(CFTypeID, uint64_t, uint64_t))(a6 + 4464);
            if (!v19) {
              goto LABEL_109;
            }
            uint64_t v20 = *(void *)(a6 + 112);
            uint64_t v21 = *(void *)(a6 + 4472);
            goto LABEL_103;
          case 35:
            int v19 = *(void (**)(CFTypeID, uint64_t, uint64_t))(a6 + 4480);
            if (!v19) {
              goto LABEL_109;
            }
            uint64_t v20 = *(void *)(a6 + 112);
            uint64_t v21 = *(void *)(a6 + 4488);
            goto LABEL_103;
          case 36:
            int v19 = *(void (**)(CFTypeID, uint64_t, uint64_t))(a6 + 4496);
            if (!v19) {
              goto LABEL_109;
            }
            uint64_t v20 = *(void *)(a6 + 112);
            uint64_t v21 = *(void *)(a6 + 4504);
            goto LABEL_103;
          case 37:
            CFDictionaryRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 4824);
            if (!v14) {
              goto LABEL_109;
            }
            uint64_t v15 = *(void *)(a6 + 112);
            CFDictionaryRef v17 = *(const __CFDictionary **)(a6 + 4832);
            CFTypeID v18 = a6;
            uint64_t v16 = 1;
            goto LABEL_55;
          case 38:
            CFDictionaryRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 4824);
            if (!v14) {
              goto LABEL_109;
            }
            uint64_t v15 = *(void *)(a6 + 112);
            CFDictionaryRef v17 = *(const __CFDictionary **)(a6 + 4832);
            CFTypeID v18 = a6;
            uint64_t v16 = 0;
            goto LABEL_55;
          case 39:
            sub_10000B680((unsigned char *)a6, *(void *)(a6 + 112), a4);
            goto LABEL_109;
          default:
            switch((int)a3)
            {
              case 'K':
                sub_100079F28(a6, *(void *)(a6 + 112), (uint64_t)a4);
                break;
              case 'L':
                if (a4)
                {
                  CFDictionaryRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 4592);
                  if (v14)
                  {
                    uint64_t v15 = *(void *)(a6 + 112);
                    uint64_t v16 = *(void *)(a6 + 4600);
                    goto LABEL_99;
                  }
                }
                break;
              case 'M':
              case 'N':
              case 'R':
              case 'T':
              case 'U':
              case 'V':
              case 'W':
              case 'X':
              case '[':
                goto LABEL_109;
              case 'O':
                if (a5 == 140 && [(id)qword_10027DD68 getLogLevelEnable] == (id)1) {
                  sub_100179730((unsigned char *)a4 + 12);
                }
                break;
              case 'P':
                sub_100078358(a6, *(const void **)(a6 + 112), a4);
                break;
              case 'Q':
                sub_1000797B4(a6, *(void *)(a6 + 112), (uint64_t)a4);
                break;
              case 'S':
                sub_100065590((uint64_t *)a6, *(void *)(a6 + 112), a4, a1);
                break;
              case 'Y':
                sub_100079850(a6, *(void *)(a6 + 112), (uint64_t)a4);
                break;
              case 'Z':
                sub_100079734(a6, *(void *)(a6 + 112), a4);
                break;
              case '\\':
                sub_100050D08(*(unsigned char *)a4 != 0);
                break;
              default:
                switch((int)a3)
                {
                  case '7':
                    sub_100078C6C(a6, *(const void **)(a6 + 112), a4);
                    break;
                  case '9':
                    sub_100076E74((void *)a6, *(void *)(a6 + 112), a4, 0, a1);
                    break;
                  case '<':
                    sub_1000050EC((void *)a6, a4);
                    break;
                  case '?':
                    sub_1000795D0(a6, *(void *)(a6 + 112), a4);
                    break;
                  default:
                    goto LABEL_109;
                }
                break;
            }
            goto LABEL_109;
        }
      }
      if ((int)a3 > 179)
      {
        if ((int)a3 > 216)
        {
          if ((int)a3 <= 237)
          {
            if (a3 == 217)
            {
              CFDictionaryRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 5560);
              if (v14)
              {
                uint64_t v15 = *(void *)(a6 + 112);
                CFDictionaryRef v17 = *(const __CFDictionary **)(a6 + 5568);
                CFTypeID v18 = a6;
                uint64_t v16 = (uint64_t)a4;
LABEL_55:
                v14(v18, v15, v16, v17);
              }
            }
            else if (a3 == 218)
            {
              sub_100078BBC(a6, *(void *)(a6 + 112), (uint64_t)a4);
            }
          }
          else if ((a3 - 238) >= 2)
          {
            if (a3 == 240) {
              sub_10007A86C(a6, *(void *)(a6 + 112), (uint64_t)a4);
            }
          }
          else
          {
            sub_10007A7AC(a6, *(void *)(a6 + 112), (uint64_t)a4, a5, a3);
          }
        }
        else
        {
          switch((int)a3)
          {
            case 180:
              sub_10007A490(a6, *(void *)(a6 + 112), (uint64_t)a4);
              break;
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 188:
            case 194:
            case 195:
            case 197:
            case 198:
              break;
            case 189:
              CFDictionaryRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 5416);
              if (v14)
              {
                uint64_t v15 = *(void *)(a6 + 112);
                uint64_t v16 = *(void *)(a6 + 5424);
LABEL_99:
                CFTypeID v18 = a6;
                CFDictionaryRef v17 = a4;
                goto LABEL_55;
              }
              break;
            case 190:
              sub_100078A5C(a6, *(void *)(a6 + 112), (uint64_t)a4);
              break;
            case 191:
              int v19 = *(void (**)(CFTypeID, uint64_t, uint64_t))(a6 + 4904);
              if (v19)
              {
                uint64_t v20 = *(void *)(a6 + 112);
                uint64_t v21 = *(void *)(a6 + 4912);
LABEL_103:
                v19(a6, v20, v21);
              }
              break;
            case 192:
              sub_100078B0C(a6, *(void *)(a6 + 112), (uint64_t)a4);
              break;
            case 193:
              sub_1000773B8(a6, *(void *)(a6 + 112), a4, a1);
              break;
            case 196:
              sub_10007A540(a6, *(void *)(a6 + 112), (uint64_t)a4);
              break;
            case 199:
              sub_10007A5F0(a6, *(void *)(a6 + 112), a4);
              break;
            default:
              if (a3 == 210) {
                sub_10007A700(a6, *(void *)(a6 + 112), (uint64_t)a4);
              }
              break;
          }
        }
      }
      else
      {
        switch((int)a3)
        {
          case 137:
            if (a4)
            {
              CFDictionaryRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 4528);
              if (v14)
              {
                uint64_t v15 = *(void *)(a6 + 112);
                uint64_t v16 = *(void *)(a6 + 4536);
                goto LABEL_99;
              }
            }
            break;
          case 138:
            if (a4)
            {
              CFDictionaryRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 4544);
              if (v14)
              {
                uint64_t v15 = *(void *)(a6 + 112);
                uint64_t v16 = *(void *)(a6 + 4552);
                goto LABEL_99;
              }
            }
            break;
          case 139:
            if (a4)
            {
              CFDictionaryRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 4560);
              if (v14)
              {
                uint64_t v15 = *(void *)(a6 + 112);
                uint64_t v16 = *(void *)(a6 + 4568);
                goto LABEL_99;
              }
            }
            break;
          case 140:
            sub_100079900(a6, *(void *)(a6 + 112), (uint64_t)a4);
            break;
          case 141:
            CFIndex v22 = *(void (**)(CFTypeID, void, const __CFDictionary *, void, void))(a6 + 5272);
            if (v22) {
              v22(a6, *(void *)(a6 + 112), a4, 0, *(void *)(a6 + 5280));
            }
            break;
          case 142:
          case 144:
          case 146:
          case 147:
          case 149:
          case 152:
          case 153:
          case 154:
          case 155:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 166:
          case 167:
          case 168:
            break;
          case 143:
            if (a4)
            {
              CFDictionaryRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 5208);
              if (v14)
              {
                uint64_t v15 = *(void *)(a6 + 112);
                uint64_t v16 = *(void *)(a6 + 5216);
                goto LABEL_99;
              }
            }
            break;
          case 145:
            sub_100023A78(a6, *(void *)(a6 + 112), (uint64_t)a4);
            break;
          case 148:
            if (a5 > 0x2B)
            {
              sub_1000799B4(a6, *(void *)(a6 + 112), (uint64_t)a4);
            }
            else
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3 message:"WiFi Network Info eventdata len mismatch\n"];
              }
            }
            break;
          case 150:
            sub_100079C1C(a6, *(void *)(a6 + 112), (uint64_t)a4);
            break;
          case 151:
            sub_100079CEC(a6, *(void *)(a6 + 112), a4);
            break;
          case 156:
            sub_10002384C(a6, *(void *)(a6 + 112), a4);
            break;
          case 164:
            sub_100079DC8(a6, *(void *)(a6 + 112), (uint64_t)a4);
            break;
          case 165:
            sub_100079E78(a6, *(void *)(a6 + 112), (uint64_t)a4);
            break;
          case 169:
            sub_100023B28(a6, *(void *)(a6 + 112), (uint64_t)a4);
            break;
          default:
            if (a3 == 176) {
              sub_10007A2B0(a6, (uint64_t)a4);
            }
            break;
        }
      }
    }
LABEL_109:
  }
}

uint64_t sub_10000D630(uint64_t *a1, int a2)
{
  CFIndex v11 = 72;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = 0;
  if (sub_10000D7FC(a1[22], &v12, &v11, &v10) || *(unsigned char *)(v12 + 56) != 1)
  {
    uint64_t result = 1;
    if (a2 <= 0x39 && ((1 << a2) & 0x200000040000600) != 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "Event %@ is not expected while there is no command pending", sub_1000682E4(a2), v9 message];
      }
      goto LABEL_14;
    }
    return result;
  }
  uint64_t result = 1;
  if (a2 > 56)
  {
    if (a2 == 57)
    {
      if (*(_DWORD *)v12 == 9) {
        return result;
      }
    }
    else if (a2 == 83)
    {
      if (*(_DWORD *)v12 == 12) {
        return result;
      }
    }
    else if (a2 != 193 || *(_DWORD *)v12 == 14)
    {
      return result;
    }
LABEL_28:
    CFNumberRef v7 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFStringRef v8 = sub_1000682E4(a2);
      [v7 WFLog:4, "Event %@ is not expected while command %@ is pending", v8, sub_100068900(*(_DWORD *)v12) message];
    }
LABEL_14:
    return 0;
  }
  if (a2 == 9)
  {
    if (*(_DWORD *)v12 == 1) {
      return result;
    }
    goto LABEL_28;
  }
  if (a2 == 10)
  {
    if (!*(_DWORD *)v12) {
      return result;
    }
    goto LABEL_28;
  }
  if (a2 == 30 && *(_DWORD *)v12 != 5)
  {
    uint64_t v5 = (void (*)(uint64_t *, void, uint64_t, uint64_t))a1[623];
    if (v5) {
      v5(a1, 0, a1[624], 1);
    }
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_10000D7FC(uint64_t a1, void *a2, CFIndex *a3, void *a4)
{
  *(void *)buffer = 0;
  if (!a2 || a3)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
    if (Count >= 1)
    {
      CFIndex v9 = Count;
      uint64_t v10 = 1;
      do
      {
        CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v10 - 1);
        if (!ValueAtIndex) {
          return 4294963394;
        }
        CFDataRef v12 = ValueAtIndex;
        v20.id location = 0;
        v20.CFIndex length = 8;
        CFDataGetBytes(ValueAtIndex, v20, buffer);
        CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, buffer);
        if (!v13) {
          return 4294963394;
        }
        CFNumberRef v14 = v13;
        int v15 = CFSetContainsValue(*(CFSetRef *)(a1 + 80), v13);
        CFRelease(v14);
        if (v10 >= v9) {
          break;
        }
        ++v10;
      }
      while (v15);
      if (v15) {
        return 4294963394;
      }
      if (!a2)
      {
LABEL_14:
        uint64_t result = 0;
        if (a4) {
          *a4 = *(void *)buffer;
        }
        return result;
      }
      CFIndex Length = CFDataGetLength(v12);
      CFIndex v17 = Length - 8;
      if (Length != 8 && v17 <= *a3)
      {
        *a3 = v17;
        *a2 = CFDataGetBytePtr(v12) + 8;
        goto LABEL_14;
      }
    }
  }
  return 4294963394;
}

const __SCPreferences *sub_10000D934(void *a1, const __CFString *a2)
{
  uint64_t result = (const __SCPreferences *)sub_10000D9F0(a1, a2);
  if (result)
  {
    int v4 = result;
    uint64_t v5 = (void *)sub_10000D990((uint64_t)"__WiFiManagerGetProperty");
    CFPropertyListRef Value = SCPreferencesGetValue(v4, a2);

    return (const __SCPreferences *)Value;
  }
  return result;
}

uint64_t sub_10000D990(uint64_t a1)
{
  [+[NSString stringWithFormat:@"com.apple.wifid.%s", a1] UTF8String];
  uint64_t v3 = os_transaction_create();
  return v3;
}

void *sub_10000D9F0(void *a1, CFStringRef theString1)
{
  BOOL v2 = a1;
  SInt32 valuePtr = 0;
  if (a1)
  {
    if (CFStringCompare(theString1, @"isWiFiPNLMigrationComplete", 0))
    {
      int v4 = (void *)sub_10000D990((uint64_t)"__WiFiManagerGetWiFiNetworksOrPreferencesRef");
      uint64_t v5 = v2 + 134;
      CFNumberRef Value = (const __CFNumber *)SCPreferencesGetValue((SCPreferencesRef)v2[134], @"isWiFiPNLMigrationComplete");
      if (Value)
      {
        CFNumberRef v7 = Value;
        CFTypeID TypeID = CFNumberGetTypeID();
        if (TypeID == CFGetTypeID(v7))
        {
          CFNumberGetValue(v7, kCFNumberIntType, &valuePtr);
          if (!valuePtr) {
            goto LABEL_18;
          }
LABEL_13:
          if (CFStringCompare(theString1, @"List of known networks", 0))
          {
            if (CFEqual(theString1, @"List of scanned networks with private mac")) {
              uint64_t v5 = v2 + 137;
            }
          }
          else
          {
            uint64_t v5 = v2 + 135;
          }
          goto LABEL_18;
        }
        CFTypeID v9 = CFBooleanGetTypeID();
        if (v9 == CFGetTypeID(v7))
        {
          IntCFNumberRef Value = CFEqual(v7, kCFBooleanTrue);
        }
        else
        {
          CFTypeID v11 = CFStringGetTypeID();
          if (v11 != CFGetTypeID(v7)) {
            goto LABEL_18;
          }
          IntCFNumberRef Value = CFStringGetIntValue((CFStringRef)v7);
        }
        SInt32 valuePtr = IntValue;
        if (IntValue) {
          goto LABEL_13;
        }
      }
LABEL_18:
      BOOL v2 = (void *)*v5;

      return v2;
    }
    return (void *)v2[134];
  }
  return v2;
}

void sub_10000DB5C(uint64_t a1, CFDictionaryRef theDict)
{
  if (a1)
  {
    if (theDict)
    {
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
      if (MutableCopy)
      {
        uint64_t v5 = MutableCopy;
        if (*(void *)(a1 + 152)
          || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks), (*(void *)(a1 + 152) = Mutable) != 0))
        {
          for (uint64_t i = 0; i != 9; ++i)
          {
            value = 0;
            int valuePtr = 0;
            CFStringRef v8 = off_10023F128[i];
            if (CFDictionaryGetValueIfPresent(theDict, v8, (const void **)&value)) {
              BOOL v9 = value == 0;
            }
            else {
              BOOL v9 = 1;
            }
            if (!v9)
            {
              CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
              CFNumberRef number = 0;
              int v16 = 0;
              if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 152), v8, (const void **)&number)) {
                BOOL v10 = number == 0;
              }
              else {
                BOOL v10 = 1;
              }
              if (!v10) {
                CFNumberGetValue(number, kCFNumberIntType, &v16);
              }
              v16 += valuePtr;
              CFNumberRef v11 = CFNumberCreate(0, kCFNumberIntType, &v16);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 152), v8, v11);
              CFDictionarySetValue(v5, v8, v11);
              if (v11) {
                CFRelease(v11);
              }
            }
          }
          CFDataRef v12 = *(const void **)(a1 + 152);
          if (v12)
          {
            CFRelease(v12);
            *(void *)(a1 + 152) = 0;
          }
          CFMutableDictionaryRef v13 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v5);
          *(void *)(a1 + 152) = v13;
          if (v13) {
            goto LABEL_25;
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s coalescedUndispatchedLQMEvent is NULL!!!", @"WiFiLQAMgrCoalesceUndispatchedLQMEvent"];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: coalescedUndispatchedLQMEvent create failed", "WiFiLQAMgrCoalesceUndispatchedLQMEvent")];
          }
        }
LABEL_25:
        CFRelease(v5);
        return;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: lqmDictCopy is NULL", "WiFiLQAMgrCoalesceUndispatchedLQMEvent");
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: lqmDict is NULL" arguments:("WiFiLQAMgrCoalesceUndispatchedLQMEvent", nil)];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: WiFiLQAMgrRef is NULL" arguments:("WiFiLQAMgrCoalesceUndispatchedLQMEvent", nil)];
    }
  }
}

uint64_t sub_10000DE34(uint64_t a1, const void *a2, __CFArray *a3)
{
  CFArrayRef theArray = 0;
  if (!a3) {
    return 4294963396;
  }
  CFArrayRef v6 = sub_10001C9E8(a1, a2);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    CFTypeID v8 = CFGetTypeID(v6);
    if (v8 == sub_10001CADC())
    {
      uint64_t v9 = sub_100169388(v7, 254, 0, &theArray);
LABEL_23:
      MutableCFDictionaryRef Copy = theArray;
      if (theArray) {
        goto LABEL_24;
      }
    }
    else
    {
      for (int i = 6; ; --i)
      {
        uint64_t v11 = Apple80211CopyValue();
        uint64_t v9 = v11;
        if ((int)v11 <= 15)
        {
          if (v11 != -3905) {
            break;
          }
        }
        else if (v11 != 61 && v11 != 16)
        {
          goto LABEL_17;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (!v11) {
        goto LABEL_23;
      }
LABEL_17:
      CFArrayRef v13 = *(const __CFArray **)(a1 + 5656);
      if (v13 && CFArrayGetCount(v13))
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: failed getting HW supported channels, err=%d, returning cached HW channels (count=%ld)", "WiFiDeviceSupportedChannels", v9, CFArrayGetCount(*(CFArrayRef *)(a1 + 5656)));
        }
        MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, *(CFArrayRef *)(a1 + 5656));
        uint64_t v9 = 0;
        CFArrayRef theArray = MutableCopy;
        if (MutableCopy)
        {
LABEL_24:
          CFIndex Count = CFArrayGetCount(MutableCopy);
          if (Count >= 1)
          {
            CFIndex v17 = Count;
            for (CFIndex j = 0; j != v17; ++j)
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, j);
              if (ValueAtIndex)
              {
                CFDictionaryRef v20 = ValueAtIndex;
                if (CFDictionaryGetValue(ValueAtIndex, @"SUP_CHANNEL")) {
                  CFArrayAppendValue(a3, v20);
                }
              }
            }
          }
          if (theArray) {
            CFRelease(theArray);
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Could not read APPLE80211_IOC_HW_SUPPORTED_CHANNELS err=%d", v9);
        }
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2 message];
    }
    return 0;
  }
  return v9;
}

void sub_10000E080(void *a1)
{
  if (a1)
  {
    CFTypeID v2 = CFGetTypeID(a1);
    uint64_t v3 = qword_10027D710;
    if (!qword_10027D710)
    {
      pthread_once(&stru_10027CCA8, (void (*)(void))sub_1000C5C5C);
      uint64_t v3 = qword_10027D710;
    }
    if (v2 == v3)
    {
      int v4 = (const void *)a1[2];
      if (v4)
      {
        CFRelease(v4);
        a1[2] = 0;
      }
    }
  }
}

uint64_t sub_10000E0FC(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    int v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  uint64_t result = sub_10000E1E0(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10000E1E0(unsigned int a1, UInt8 *a2, unsigned int a3, vm_offset_t *a4, mach_msg_type_number_t *a5)
{
  int valuePtr = 0;
  *a4 = 0;
  *a5 = 0;
  uint64_t v10 = sub_10000E5D8();
  uint64_t v11 = sub_10000E504(a1, v10);
  if (v11)
  {
    CFDataRef v12 = v11;
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Copy current network requested by \"%@\"", sub_100016E18((uint64_t)v12) message];
    }
    if ((sub_10000E620((uint64_t)v12) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_copy_current_network(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v12) message];
      }
      goto LABEL_26;
    }
    CFDictionaryRef v15 = (const __CFDictionary *)sub_10000EA08(a2, a3);
    if (!v15)
    {
LABEL_26:
      CFRelease(v12);
      goto LABEL_27;
    }
    CFDictionaryRef v16 = v15;
    CFIndex v17 = sub_10000E628((uint64_t)v12, v15);
    if (!v17 || (CFTypeID v18 = sub_10000E5D0((uint64_t)v17, v16)) == 0)
    {
      CFDictionaryRef v26 = v16;
LABEL_25:
      CFRelease(v26);
      goto LABEL_26;
    }
    int v19 = v18;
    if (sub_10001FC1C((uint64_t)v18))
    {
      if ((sub_10000E620((uint64_t)v12) & 0x11) == 1)
      {
        if (!sub_10005D610((uint64_t)v12, @"com.apple.wifi.eap-nearby-device-setup-config-copy"))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s Client %@ is not entitled for EAPNearbySetup", "kern_return_t _wifi_device_copy_current_network(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t *, mach_msg_type_number_t *)", sub_100016E18((uint64_t)v12) message];
          }
          goto LABEL_22;
        }
        sub_10005B254((uint64_t)v12, 17);
      }
      int valuePtr = sub_1001245BC(v19);
      if (valuePtr == 1 && !sub_100124628(v19))
      {
        int valuePtr = 4;
        CFAllocatorRef Default = CFAllocatorGetDefault();
        CFNumberRef v21 = CFNumberCreate(Default, kCFNumberIntType, &valuePtr);
        if (v21)
        {
          CFNumberRef v22 = v21;
          sub_10001C6A4((uint64_t)v19, @"ShareableStatus", v21);
          CFRelease(v22);
        }
      }
    }
LABEL_22:
    CFDictionaryRef v24 = sub_10000E5B8((uint64_t)v19);
    if (v24)
    {
      CFDictionaryRef v25 = v24;
      sub_10000E45C(v24, a4, a5);
      CFRelease(v16);
      CFDictionaryRef v16 = v25;
    }
    CFRelease(v16);
    CFDictionaryRef v26 = (CFDictionaryRef)v19;
    goto LABEL_25;
  }
LABEL_27:
  sub_10000E9E4((vm_address_t)a2, a3);
  return 0;
}

void sub_10000E45C(const void *a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  kern_return_t v9;
  mach_msg_type_number_t dataCnt;

  CFDataRef v5 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a1);
  if (v5)
  {
    CFDataRef v6 = v5;
    dataCnt = -1431655766;
    *a3 = CFDataGetLength(v5);
    vm_map_read_t v7 = mach_task_self_;
    BytePtr = CFDataGetBytePtr(v6);
    uint64_t v9 = vm_read(v7, (vm_address_t)BytePtr, *a3, a2, &dataCnt);
    CFRelease(v6);
    if (v9) {
      *a2 = 0;
    }
    *a3 = dataCnt;
  }
}

const void *sub_10000E504(unsigned int a1, uint64_t a2)
{
  int v3 = sub_10000E550(a1);
  int v4 = v3;
  if (v3 && CFGetTypeID(v3) != a2)
  {
    CFRelease(v4);
    return 0;
  }
  return v4;
}

const void *sub_10000E550(unsigned int a1)
{
  pthread_mutex_lock(&stru_10027CB50);
  if (qword_10027D700)
  {
    CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_10027D700, (const void *)a1);
    int v3 = Value;
    if (Value) {
      CFRetain(Value);
    }
  }
  else
  {
    int v3 = 0;
  }
  pthread_mutex_unlock(&stru_10027CB50);
  return v3;
}

CFDictionaryRef sub_10000E5B8(uint64_t a1)
{
  return CFDictionaryCreateCopy(kCFAllocatorDefault, *(CFDictionaryRef *)(a1 + 16));
}

void *sub_10000E5D0(uint64_t a1, const void *a2)
{
  return sub_100018FA8(a1, a2, 1);
}

uint64_t sub_10000E5D8()
{
  uint64_t result = qword_10027D650;
  if (!qword_10027D650)
  {
    pthread_once(&stru_10027C9E0, (void (*)(void))sub_10005B104);
    return qword_10027D650;
  }
  return result;
}

uint64_t sub_10000E620(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

const void *sub_10000E628(uint64_t a1, const void *a2)
{
  if (a1 && a2 && (CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 112)) != 0) {
    return CFDictionaryGetValue(v2, a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000E644(unsigned int a1, UInt8 *a2, unsigned int a3, UInt8 *a4, unsigned int a5, UInt8 *a6, unsigned int a7, _DWORD *a8)
{
  uint64_t v16 = sub_10000E5D8();
  CFIndex v17 = sub_10000E504(a1, v16);
  if (v17)
  {
    CFTypeID v18 = v17;
    CFDictionaryRef v38 = a4;
    if ((sub_10000E620((uint64_t)v17) & 1) == 0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_set_coex_parameters(mach_port_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, vm_offset_t, mach_msg_type_number_t, int *)", sub_100016E18((uint64_t)v18) message];
      }
      *a8 = 1;
LABEL_34:
      CFRelease(v18);
      a4 = v38;
      goto LABEL_35;
    }
    CFPropertyListRef v20 = sub_10000EA08(a2, a3);
    CFStringRef v21 = (const __CFString *)sub_10000EA08(a4, a5);
    unsigned int v37 = a7;
    CFDictionaryRef v22 = (const __CFDictionary *)sub_10000EA08(a6, a7);
    CFDictionaryRef v23 = v22;
    if (!v20 || !v21 || !v22)
    {
      *a8 = 22;
      if (!v20) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
    CFDictionaryRef v24 = sub_10000E628((uint64_t)v18, v20);
    if (!v24)
    {
      *a8 = 6;
      goto LABEL_29;
    }
    uint64_t v25 = (uint64_t)v24;
    unint64_t v36 = a6;
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID != CFGetTypeID(v21)) {
      goto LABEL_17;
    }
    if (CFEqual(v21, @"BSP_Command"))
    {
      sub_1001291D4(v25, v23);
      goto LABEL_28;
    }
    if (CFEqual(v21, @"MWS_BT_A2DP_LLA_TRAFFIC_INDICATION"))
    {
      int valuePtr = 0;
      a6 = v36;
      if (qword_10027DD68)
      {
        uint64_t context = v31;
        [(id)qword_10027DD68 WFLog:3, "%s: client \"%@\" calling APPLE80211KEY_MWS_BT_A2DP_LLA_TRAFFIC_INDICATION", "_wifi_device_set_coex_parameters", sub_100016E18((uint64_t)v18) message];
        id v31 = context;
      }
      CFNumberGetValue(v23, kCFNumberIntType, &valuePtr);
      sub_100128F2C(v25, valuePtr);
      goto LABEL_29;
    }
    if (CFEqual(v21, @"MWS_Blacklisted_Channels"))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: client \"%@\" calling APPLE80211KEY_MWS_BLACKLISTED_CHANNELS", "_wifi_device_set_coex_parameters", sub_100016E18((uint64_t)v18) message];
      }
      sub_100108FD4(v25, v23);
      goto LABEL_28;
    }
    if (CFEqual(v21, @"MWS_BT_CONNECTION_REPORT"))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: client \"%@\" calling APPLE80211KEY_MWS_BT_CONNECTION_REPORT", "_wifi_device_set_coex_parameters", sub_100016E18((uint64_t)v18) message];
      }
      sub_100108C68(v25, v23);
      goto LABEL_28;
    }
    uint64_t v27 = sub_10000AB40(v21);
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = sub_100016E18(v25);
      sub_100017D28(v29, v20, v28, 0, (uint64_t)v23);
    }
    else
    {
LABEL_17:
      uint64_t v30 = sub_100016E18(v25);
      *a8 = sub_1000093F4(v30, v20, v21, (uint64_t)v23);
    }
LABEL_28:
    a6 = v36;
LABEL_29:
    CFRelease(v20);
LABEL_30:
    if (v23) {
      CFRelease(v23);
    }
    a7 = v37;
    if (v21) {
      CFRelease(v21);
    }
    goto LABEL_34;
  }
LABEL_35:
  sub_10000E9E4((vm_address_t)a2, a3);
  sub_10000E9E4((vm_address_t)a4, a5);
  sub_10000E9E4((vm_address_t)a6, a7);
  return 0;
}

vm_address_t sub_10000E9E4(vm_address_t address, vm_size_t size)
{
  if (address)
  {
    if (size) {
      return vm_deallocate(mach_task_self_, address, size);
    }
  }
  return address;
}

CFPropertyListRef sub_10000EA08(UInt8 *bytes, CFIndex length)
{
  if (!bytes || !length)
  {
    BOOL v6 = bytes != 0;
    if (length)
    {
      BOOL v6 = 0;
      BOOL v7 = bytes == 0;
    }
    else
    {
      BOOL v7 = 0;
    }
    if ((v7 || v6) && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1001960A0();
    }
    return 0;
  }
  CFDataRef v2 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, bytes, length, kCFAllocatorNull);
  if (!v2) {
    return 0;
  }
  CFDataRef v3 = v2;
  CFErrorRef error = 0;
  CFPropertyListRef v4 = CFPropertyListCreateWithData(kCFAllocatorDefault, v2, 1uLL, 0, &error);
  if (error)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: CFPropertyListCreateWithData returned with error %@", "_WiFiCopyUnserialized", error message];
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100196014();
    }
    CFRelease(error);
  }
  CFRelease(v3);
  return v4;
}

void sub_10000EB48(int a1, const void *a2, uint64_t a3, CFDictionaryRef theDict)
{
  float v69 = 0.0;
  if (!a3) {
    return;
  }
  BOOL v7 = (unsigned char *)(a3 + 7042);
  if (theDict)
  {
    if (!*(unsigned char *)(a3 + 7400) || !*(unsigned char *)(a3 + 8606) || *(unsigned char *)(a3 + 8608))
    {
LABEL_67:
      value = 0;
      v80[0] = 0;
      v77 = 0;
      unsigned int v78 = 0;
      CFNumberRef v74 = 0;
      CFNumberRef v75 = 0;
      uint64_t v72 = 0;
      uint64_t valuePtr = 0;
      uint64_t v71 = 0;
      int v70 = 0;
      uint64_t v35 = *(void *)(a3 + 3512);
      if (v35)
      {
        if (sub_1000199C0(v35))
        {
          CFStringRef v76 = (void *)CFDictionaryGetValue(theDict, @"RSSI");
          if (v76)
          {
            if (CFAbsoluteTimeGetCurrent() - *(double *)(a3 + 736) >= 5.0 && *(unsigned char *)(a3 + 940))
            {
              ++*(_DWORD *)(a3 + 880);
              if (CFDictionaryGetValueIfPresent(theDict, @"TXFAIL", (const void **)&v75) && v75) {
                CFNumberGetValue((CFNumberRef)v75, kCFNumberIntType, &v71);
              }
              if (CFDictionaryGetValueIfPresent(theDict, @"SNR", (const void **)v80) && v80[0]) {
                CFNumberGetValue((CFNumberRef)v80[0], kCFNumberSInt32Type, (char *)&valuePtr + 4);
              }
              if (CFDictionaryGetValueIfPresent(theDict, @"CCA", (const void **)&value) && value) {
                CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
              }
              if (CFDictionaryGetValueIfPresent(theDict, @"RXRATE", (const void **)&v77) && v77) {
                CFNumberGetValue((CFNumberRef)v77, kCFNumberSInt32Type, &v72);
              }
              if (CFDictionaryGetValueIfPresent(theDict, @"TXRATE", (const void **)&v78) && v78) {
                CFNumberGetValue((CFNumberRef)v78, kCFNumberSInt32Type, (char *)&v72 + 4);
              }
              if (CFDictionaryGetValueIfPresent(theDict, @"RSSI", (const void **)&v76) && v76) {
                CFNumberGetValue((CFNumberRef)v76, kCFNumberSInt32Type, (char *)&v71 + 4);
              }
              if (CFDictionaryGetValueIfPresent(theDict, @"TXFRAMES", (const void **)&v74) && v74) {
                CFNumberGetValue((CFNumberRef)v74, kCFNumberSInt32Type, &v70);
              }
              int v36 = HIDWORD(v72);
              unsigned int v37 = *(_DWORD *)(a3 + 880);
              if (SHIDWORD(v72) >= 1)
              {
                int v38 = *(_DWORD *)(a3 + 748);
                if (v38 >= SHIDWORD(v72)) {
                  int v38 = HIDWORD(v72);
                }
                *(_DWORD *)(a3 + 748) = v38;
                int v39 = *(_DWORD *)(a3 + 752);
                if (v39 <= v36) {
                  int v39 = v36;
                }
                *(_DWORD *)(a3 + 752) = v39;
                *(double *)(a3 + 760) = *(double *)(a3 + 760) + ((double)v36 - *(double *)(a3 + 760)) / (double)v37;
                *(_DWORD *)(a3 + 756) = v36;
              }
              int v40 = v72;
              if ((int)v72 >= 1)
              {
                int v41 = *(_DWORD *)(a3 + 768);
                if (v41 >= (int)v72) {
                  int v41 = v72;
                }
                *(_DWORD *)(a3 + 768) = v41;
                int v42 = *(_DWORD *)(a3 + 772);
                if (v42 <= v40) {
                  int v42 = v40;
                }
                *(_DWORD *)(a3 + 772) = v42;
                *(double *)(a3 + 784) = *(double *)(a3 + 784) + ((double)v40 - *(double *)(a3 + 784)) / (double)v37;
                *(_DWORD *)(a3 + 776) = v40;
              }
              int v43 = valuePtr;
              if ((int)valuePtr >= 1)
              {
                int v44 = *(_DWORD *)(a3 + 840);
                if (v44 >= (int)valuePtr) {
                  int v44 = valuePtr;
                }
                *(_DWORD *)(a3 + 840) = v44;
                int v45 = *(_DWORD *)(a3 + 844);
                if (v45 <= v43) {
                  int v45 = v43;
                }
                *(_DWORD *)(a3 + 844) = v45;
                *(double *)(a3 + 856) = *(double *)(a3 + 856) + ((double)v43 - *(double *)(a3 + 856)) / (double)v37;
                *(_DWORD *)(a3 + 848) = v43;
              }
              int v46 = HIDWORD(valuePtr);
              if (SHIDWORD(valuePtr) >= 1)
              {
                int v47 = *(_DWORD *)(a3 + 792);
                if (v47 >= SHIDWORD(valuePtr)) {
                  int v47 = HIDWORD(valuePtr);
                }
                *(_DWORD *)(a3 + 792) = v47;
                int v48 = *(_DWORD *)(a3 + 796);
                if (v48 <= v46) {
                  int v48 = v46;
                }
                *(_DWORD *)(a3 + 796) = v48;
                *(double *)(a3 + 808) = *(double *)(a3 + 808) + ((double)v46 - *(double *)(a3 + 808)) / (double)v37;
                *(_DWORD *)(a3 + 800) = v46;
              }
              int v49 = HIDWORD(v71);
              if (v71 < 0)
              {
                int v50 = *(_DWORD *)(a3 + 816);
                if (v50 >= SHIDWORD(v71)) {
                  int v50 = HIDWORD(v71);
                }
                *(_DWORD *)(a3 + 816) = v50;
                int v51 = *(_DWORD *)(a3 + 820);
                if (v51 <= v49) {
                  int v51 = v49;
                }
                *(_DWORD *)(a3 + 820) = v51;
                *(double *)(a3 + 832) = *(double *)(a3 + 832) + ((double)v49 - *(double *)(a3 + 832)) / (double)v37;
                *(_DWORD *)(a3 + 824) = v49;
              }
              int v52 = v71;
              *(_DWORD *)(a3 + 4 * ((v37 - 1) % 0xC) + 888) = v71;
              if (v52)
              {
                unsigned int v53 = *(_DWORD *)(a3 + 936) + 1;
                *(_DWORD *)(a3 + 936) = v53;
                if (v53 >= 3
                  && (*(double *)(a3 + 872) == 0.0 || CFAbsoluteTimeGetCurrent() - *(double *)(a3 + 872) >= 60.0))
                {
                  ++*(_DWORD *)(a3 + 864);
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: numberOfTxErrorEvents increased to %d", "__WiFiDeviceManagerTrackCarPlayLinkQuality", *(unsigned int *)(a3 + 864)];
                  }
                  *(CFAbsoluteTime *)(a3 + 872) = CFAbsoluteTimeGetCurrent();
                }
              }
              if (*(_DWORD *)(a3 + 4 * (*(_DWORD *)(a3 + 880) % 0xCu) + 888)) {
                --*(_DWORD *)(a3 + 936);
              }
              *(void *)(a3 + 944) += v70;
              if (qword_10027DD68) {
                objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: rssi(max:min:avg:last) %d:%d:%d:%d, snr %d:%d:%d:%d, cca %d:%d:%d:%d, txRate %d:%d:%d:%d, rxRate %d:%d:%d:%d, numberOfTxErrorEvents %u, numberOfNoneZeroPer %u, roamedCount %u, totalTxFrames %llu", "__WiFiDeviceManagerTrackCarPlayLinkQuality", *(unsigned int *)(a3 + 820), *(unsigned int *)(a3 + 816), (int)*(double *)(a3 + 832), *(unsigned int *)(a3 + 824), *(unsigned int *)(a3 + 796), *(unsigned int *)(a3 + 792), (int)*(double *)(a3 + 808), *(unsigned int *)(a3 + 800), *(unsigned int *)(a3 + 844), *(unsigned int *)(a3 + 840), (int)*(double *)(a3 + 856), *(unsigned int *)(a3 + 848), *(unsigned int *)(a3 + 752),
              }
                  *(unsigned int *)(a3 + 748),
                  (int)*(double *)(a3 + 760),
                  *(unsigned int *)(a3 + 756),
                  *(unsigned int *)(a3 + 772),
                  *(unsigned int *)(a3 + 768),
                  (int)*(double *)(a3 + 784),
                  *(unsigned int *)(a3 + 776),
                  *(unsigned int *)(a3 + 864),
                  *(unsigned int *)(a3 + 936),
                  *(unsigned int *)(a3 + 744),
                  *(void *)(a3 + 944));
            }
          }
        }
      }
      goto LABEL_135;
    }
    value = 0;
    v80[0] = 0;
    v77 = 0;
    unsigned int v78 = 0;
    CFNumberRef v75 = 0;
    CFStringRef v76 = 0;
    uint64_t valuePtr = 0;
    CFNumberRef v74 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    int v70 = 0;
    if (CFDictionaryGetValueIfPresent(theDict, @"SNR", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"CCA", (const void **)&v78) && v78) {
      CFNumberGetValue((CFNumberRef)v78, kCFNumberSInt32Type, &valuePtr);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"TXFRAMES", (const void **)&v77) && v77) {
      CFNumberGetValue((CFNumberRef)v77, kCFNumberSInt32Type, (char *)&v72 + 4);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"TXFWFRAMES", (const void **)v80) && v80[0]) {
      CFNumberGetValue((CFNumberRef)v80[0], kCFNumberSInt32Type, &v70);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"RXFRAMES", (const void **)&v76) && v76) {
      CFNumberGetValue((CFNumberRef)v76, kCFNumberSInt32Type, &v72);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"RXRATE", (const void **)&v74) && v74) {
      CFNumberGetValue((CFNumberRef)v74, kCFNumberSInt32Type, &v71);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"TXRATE", (const void **)&v75) && v75) {
      CFNumberGetValue((CFNumberRef)v75, kCFNumberSInt32Type, (char *)&v71 + 4);
    }
    double v8 = *(double *)(a3 + 8544);
    if (v8 == 0.0) {
      double v9 = (double)SHIDWORD(valuePtr);
    }
    else {
      double v9 = v8 * 0.6 + (double)SHIDWORD(valuePtr) * 0.4;
    }
    *(double *)(a3 + 8544) = v9;
    int v10 = (int)v9;
    double v11 = 1.0;
    if (v10 <= 39) {
      double v11 = *(double *)(a3 + 8 * (v10 & ~(v10 >> 31)) + 7408);
    }
    double v12 = *(double *)(a3 + 8552);
    if (v12 == 0.0) {
      double v13 = (double)(int)valuePtr;
    }
    else {
      double v13 = v12 * 0.6 + (double)(int)valuePtr * 0.4;
    }
    *(double *)(a3 + 8552) = v13;
    unsigned int v14 = (int)v13 & ~((int)v13 >> 31);
    if (v14 >= 0x63) {
      unsigned int v14 = 99;
    }
    double v15 = *(double *)(a3 + 8 * v14 + 7728);
    double v16 = *(double *)(a3 + 8560);
    if (v16 <= (double)SHIDWORD(v71)) {
      double v16 = (double)SHIDWORD(v71);
    }
    *(double *)(a3 + 8560) = v16;
    double v17 = *(double *)(a3 + 8568);
    if (v17 <= (double)(int)v71) {
      double v17 = (double)(int)v71;
    }
    *(double *)(a3 + 8568) = v17;
    double v18 = v11 * v16;
    double v19 = v11 * v17;
    double v20 = *(double *)(a3 + 8528);
    if (v20 == 0.0) {
      double v21 = (double)(v70 + HIDWORD(v72));
    }
    else {
      double v21 = v20 * 0.6 + (double)(v70 + HIDWORD(v72)) * 0.4;
    }
    double v22 = v15 * v18;
    double v23 = v15 * v19;
    *(double *)(a3 + 8528) = v21;
    double v24 = *(double *)(a3 + 8536);
    if (v24 == 0.0) {
      double v25 = (double)(int)v72;
    }
    else {
      double v25 = v24 * 0.6 + (double)(int)v72 * 0.4;
    }
    *(double *)(a3 + 8536) = v25;
    double Current = CFAbsoluteTimeGetCurrent();
    double v27 = Current - *(double *)(a3 + 8576);
    if (v27 <= 0.0) {
      double v27 = 5.0;
    }
    *(double *)(a3 + 8576) = Current;
    double v28 = *(double *)(a3 + 8528) * 800.0 * 8.0 / 1000.0 / v27;
    double v29 = *(double *)(a3 + 8536) * 800.0 * 8.0 / 1000.0 / v27;
    if (v28 / (v22 + 0.01) <= 0.99) {
      double v30 = v28 / (v22 + 0.01);
    }
    else {
      double v30 = 0.99;
    }
    if (v29 / (v23 + 0.01) <= 0.99) {
      double v31 = v29 / (v23 + 0.01);
    }
    else {
      double v31 = 0.99;
    }
    char v32 = 1;
    if (v30 <= 0.05 && v31 <= 0.05)
    {
      if (v30 >= 0.01 || v31 >= 0.01) {
        goto LABEL_61;
      }
      char v32 = 0;
    }
    *(unsigned char *)(a3 + 8609) = v32;
LABEL_61:
    if (qword_10027DD68)
    {
      if (*(unsigned char *)(a3 + 8609)) {
        CFBooleanRef v34 = "Yes";
      }
      else {
        CFBooleanRef v34 = "No";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: SNR %.1lf, CCA %.1lf, Tx bandwidth %.1lf (kbps), Rx bandwidth %.1lf, Tx data rate %.1lf (kbps), Rx data rate  %.1lf, Tx air time %.3lf %%, Rx air time %.3lf %%, Good background traffic ? %s", "__WiFiDeviceManagerMonitor24GHzInfraNetworkTraffic", *(void *)(a3 + 8544), *(void *)(a3 + 8552), *(void *)&v22, *(void *)&v23, *(void *)&v28, *(void *)&v29, v30 * 100.0, v31 * 100.0, v34);
    }
    sub_100101574(a3, (uint64_t)a2);
    goto LABEL_67;
  }
LABEL_135:
  id v56 = sub_100018FA8(a3, a2, 1);
  float v69 = sub_10000F784(*(void *)(a3 + 120), v56, theDict, *v7 != 0);
  if (v69 != 0.0)
  {
    CFNumberRef v57 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &v69);
    if (v57)
    {
      CFNumberRef v58 = v57;
      CFDictionaryAddValue(theDict, @"SCALED_LQM", v57);
      CFRelease(v58);
    }
  }
  if (+[WiFiAIRAgent sharedInstance]
    && [+[WiFiAIRAgent sharedInstance] isInterfaceRankingInProgress])
  {
    sub_1000175A0(*(void *)(a3 + 120), 1, 0);
  }
  CFNumberRef v59 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RSSI");
  if (v59)
  {
    CFNumberGetValue(v59, kCFNumberSInt32Type, (void *)(a3 + 6208));
    CFNumberRef v60 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"CCA");
    if (v60) {
      CFNumberGetValue(v60, kCFNumberSInt8Type, (void *)(a3 + 6212));
    }
    CFNumberRef v61 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"SNR");
    if (v61) {
      CFNumberGetValue(v61, kCFNumberSInt16Type, (void *)(a3 + 6214));
    }
    CFDictionaryRemoveValue(theDict, @"ROAM_STATE");
    id v63 = [(__CFDictionary *)theDict objectForKey:@"CCA_STATS"];
    if (v63)
    {
      uint64_t v64 = v63;
      [v63 removeObjectForKey:@"CCA_TIMESTAMP_TOTAL"];
      [v64 removeObjectForKey:@"CCA_SELF_TOTAL"];
      [v64 removeObjectForKey:@"CCA_OTHER_TOTAL"];
      [v64 removeObjectForKey:@"CCA_INTERFERENCE_TOTAL"];
      [v64 removeObjectForKey:@"CCA_TIMESTAMP_SLEEP"];
      [v64 removeObjectForKey:@"CCA_SELF_SLEEP"];
      [v64 removeObjectForKey:@"CCA_OTHER_SLEEP"];
      [v64 removeObjectForKey:@"CCA_INTERFERENCE_SLEEP"];
      [v64 removeObjectForKey:@"CCA_TIMESTAMP_WAKE"];
    }
    int v68 = *(_DWORD *)(a3 + 6664);
    if (!v68 && *(unsigned __int16 *)(a3 + 6600) - 1 <= 1) {
      int v68 = 5;
    }
    CFNumberRef v65 = CFNumberCreate(0, kCFNumberIntType, &v68);
    CFDictionarySetValue(theDict, @"kLQM_HOME_WORK_STATUS", v65);
    if (v65) {
      CFRelease(v65);
    }
    CFStringRef v66 = *(void (**)(uint64_t, const void *, void, CFDictionaryRef))(a3 + 4232);
    if (v66) {
      v66(a3, a2, *(void *)(a3 + 4240), theDict);
    }
    uint64_t v67 = *(void (**)(uint64_t, const void *, void, void, CFDictionaryRef))(a3 + 4392);
    if (v67) {
      v67(a3, a2, *(void *)(a3 + 4400), 0, theDict);
    }
    sub_1000130BC(a3);
  }
  if (v56) {
    CFRelease(v56);
  }
}

float sub_10000F784(uint64_t a1, const void *a2, const __CFDictionary *a3, unsigned int a4)
{
  char valuePtr = 0;
  double v8 = +[WiFiUsageMonitor sharedInstance];
  double Current = CFAbsoluteTimeGetCurrent();
  float v10 = 0.0;
  if (!a1) {
    goto LABEL_499;
  }
  if (!a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: lqmDict is null" args:v316];
    }
    goto LABEL_198;
  }
  double v11 = Current;
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a3, @"LINK_CHANGED_IS_LINKDOWN");
  if (v12)
  {
    CFNumberGetValue(v12, kCFNumberSInt8Type, &valuePtr);
    if (valuePtr) {
      goto LABEL_499;
    }
  }
  CFStringRef v13 = (const __CFString *)sub_100017C48(*(void *)(a1 + 32));
  CFStringRef v14 = v13;
  uint64_t v345 = a1;
  if (v13)
  {
    double v15 = *(const void **)(a1 + 40);
    if (v15)
    {
      if (CFEqual(v13, v15)) {
        goto LABEL_14;
      }
      double v16 = *(const void **)(a1 + 40);
      if (v16)
      {
        CFRelease(v16);
        *(void *)(a1 + 40) = 0;
      }
    }
    *(void *)(a1 + 40) = CFStringCreateCopy(kCFAllocatorDefault, v14);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Main Interface is Null" : @"WiFiLQAMgrLQMNotify"];
    }
    a1 = v345;
  }
LABEL_14:
  if (*(_DWORD *)(a1 + 20)) {
    goto LABEL_28;
  }
  if (a2) {
    CFTypeRef v18 = CFRetain(a2);
  }
  else {
    CFTypeRef v18 = sub_10001C1B4(*(void *)(a1 + 32), v14);
  }
  double v19 = v18;
  if (!v18)
  {
    if (qword_10027DD68)
    {
      uint64_t v24 = *(int *)(a1 + 20);
      if (v24 > 4) {
        CFStringRef v25 = @"Bogus";
      }
      else {
        CFStringRef v25 = *(&off_10023F260 + v24);
      }
      [(id)qword_10027DD68 WFLog:4, "%s: LQAManager LQM Event in %@", "WiFiLQAMgrLQMNotify", v25 message];
    }
LABEL_198:
    goto LABEL_499;
  }
  sub_100037FCC(a1, v18);
  *(_DWORD *)(a1 + 20) = 1;
  if (qword_10027DD68)
  {
    uint64_t v21 = *(int *)(a1 + 20);
    if (v21 > 4) {
      CFStringRef v22 = @"Bogus";
    }
    else {
      CFStringRef v22 = *(&off_10023F260 + v21);
    }
    [(id)qword_10027DD68 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v22 message];
  }
  *(CFAbsoluteTime *)(a1 + 64) = CFAbsoluteTimeGetCurrent();
  CFRelease(v19);
LABEL_28:
  v338 = v8;
  v339 = v7;
  [+[WiFiPerfPerAssoc sharedInstance] ingestLQMUpdate:a3];
  CFDictionaryRef v26 = (const __CFDictionary *)CFDictionaryGetValue(a3, @"ROAM_STATE");
  CFDictionaryRef v344 = a3;
  if (v26)
  {
    CFDictionaryRef v27 = v26;
    CFArrayRef v28 = (const __CFArray *)CFDictionaryGetValue(v26, @"ROAM_CACHE");
    CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
    if (Mutable)
    {
      double v30 = Mutable;
      double v31 = sub_10001A43C(*(const void **)(a1 + 48));
      CFArrayRef v32 = sub_1000C6D70(*(const __CFArray **)(v345 + 48));
      uint64_t v33 = CFDictionaryGetValue(v27, @"RSSI");
      CFBooleanRef v34 = CFDictionaryGetValue(v27, @"ROAM_SCAN_COUNT");
      uint64_t v35 = CFDictionaryGetValue(v27, @"ROAM_SCAN_AGE");
      v315 = v31;
      a1 = v345;
      CFStringAppendFormat(v30, 0, @"CurrentBSS {%@ - %@} {%@dbm, %@, %@ms ", v315, v32, v33, v34, v35);
      if (*(unsigned char *)(v345 + 248)) {
        int v36 = "edgeBSS";
      }
      else {
        int v36 = "";
      }
      CFStringAppendFormat(v30, 0, @"%s} RoamCache - {", v36);
      if (v28)
      {
        int Count = CFArrayGetCount(v28);
        if (!Count)
        {
LABEL_42:
          CFRelease(v30);
          a3 = v344;
          goto LABEL_43;
        }
        if (Count >= 1)
        {
          CFIndex v38 = 0;
          uint64_t v39 = Count;
          do
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v28, v38);
            if (!ValueAtIndex) {
              goto LABEL_42;
            }
            CFDictionaryRef v41 = ValueAtIndex;
            int v42 = CFDictionaryGetValue(ValueAtIndex, @"BSSID");
            int v43 = CFDictionaryGetValue(v41, @"RSSI");
            int v44 = CFDictionaryGetValue(v41, @"CHANNEL");
            int v45 = CFDictionaryGetValue(v41, @"CHANNEL_FLAGS");
            v317 = v43;
            a1 = v345;
            CFStringAppendFormat(v30, 0, @"{%@, %@, %@, %@}", v42, v317, v44, v45);
          }
          while (v39 != ++v38);
        }
      }
      CFStringAppend(v30, @"}");
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%@", v30 message];
      }
      goto LABEL_42;
    }
  }
LABEL_43:
  value = 0;
  if (*(void *)(a1 + 24))
  {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, a3);
    if (MutableCopy)
    {
      int v48 = MutableCopy;
      CFAbsoluteTime v347 = CFAbsoluteTimeGetCurrent();
      CFNumberRef v49 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &v347);
      if (!v49)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: CFNumberCreate for timestamp failed", @"__WiFiLQAMgrAddLQMEntry"];
        }
        goto LABEL_380;
      }
      CFNumberRef cf = v49;
      CFDictionaryAddValue(v48, @"kWiFiLqaMgrLqmSampleLocalTimestamp", v49);
      int ValueIfPresent = CFDictionaryGetValueIfPresent(a3, @"TXRX_STATS_VALID", (const void **)&value);
      int v51 = value;
      if (ValueIfPresent) {
        BOOL v52 = value == 0;
      }
      else {
        BOOL v52 = 1;
      }
      int v54 = v52 || value == kCFBooleanTrue;
      int v342 = v54;
      int v389 = 0;
      unsigned int v390 = 0;
      __int16 v388 = 0;
      __int16 v387 = 0;
      int v386 = 0;
      uint64_t v384 = 0;
      uint64_t v385 = 0;
      uint64_t v382 = 0;
      uint64_t v383 = 0;
      uint64_t v381 = 0;
      unsigned int v380 = 0;
      v391 = 0;
      v392 = 0;
      v378 = 0;
      v379 = 0;
      v376 = 0;
      v377 = 0;
      v374 = 0;
      v375 = 0;
      v372 = 0;
      v373 = 0;
      v370 = 0;
      v371 = 0;
      v368 = 0;
      v369 = 0;
      v366 = 0;
      v367 = 0;
      v364 = 0;
      v365 = 0;
      v362 = 0;
      v363 = 0;
      v360 = 0;
      v361 = 0;
      uint64_t v358 = 0;
      v359 = 0;
      uint64_t v357 = 0;
      uint64_t v356 = 0;
      uint64_t v355 = 0;
      CFNumberRef v55 = (const __CFNumber *)CFDictionaryGetValue(v48, @"RSSI");
      if (v55)
      {
        CFNumberGetValue(v55, kCFNumberSInt32Type, &v390);
        uint64_t v56 = v345;
        *(_DWORD *)(v345 + 2796) = v390;
        if (CFDictionaryGetValueIfPresent(v48, @"PER_CORE_RSSI", (const void **)&v366))
        {
          sub_10001301C((const __CFArray *)v366, &v358, &v357);
          v352[0] = 0;
          if (CFDictionaryGetValueIfPresent(v48, @"PER_CORE_RSSI", (const void **)v352))
          {
            if (v352[0])
            {
              CFNumberRef v57 = CFDictionaryGetValue(v48, @"LQMTIMESTAMP");
              if (v57)
              {
                keys[0] = *(_OWORD *)off_10023F1E8;
                *(void *)&long long values = v57;
                *((CFNumberRef *)&values + 1) = v352[0];
                CFDictionaryRef v58 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)&values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v345 + 264), 0, v58);
                int v59 = CFArrayGetCount(*(CFArrayRef *)(v345 + 264));
                if (v59 >= 4)
                {
                  do
                  {
                    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v345 + 264), (v59 - 1));
                    int v59 = CFArrayGetCount(*(CFArrayRef *)(v345 + 264));
                  }
                  while (v59 > 3);
                }
                if (v58) {
                  CFRelease(v58);
                }
              }
            }
          }
        }
        if (CFDictionaryGetValueIfPresent(v48, @"SNR", (const void **)&v379) && v379) {
          CFNumberGetValue((CFNumberRef)v379, kCFNumberSInt16Type, (char *)&v389 + 2);
        }
        if (CFDictionaryGetValueIfPresent(v48, @"NOISE", (const void **)&v378) && v378) {
          CFNumberGetValue((CFNumberRef)v378, kCFNumberSInt16Type, &v389);
        }
        if (CFDictionaryGetValueIfPresent(v48, @"PER_CORE_NOISE", (const void **)&v365)
          && !sub_10001301C((const __CFArray *)v365, &v356, &v355))
        {
          v365 = 0;
        }
        if (CFDictionaryGetValueIfPresent(v48, @"CCA", (const void **)&v377) && v377) {
          CFNumberGetValue((CFNumberRef)v377, kCFNumberSInt8Type, (char *)&v388 + 1);
        }
        if (CFDictionaryGetValueIfPresent(v48, @"CCA_STATS", (const void **)&v361) && v361)
        {
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v361, @"CCA_SELF_TOTAL", (const void **)&v364)
            && v364)
          {
            CFNumberGetValue((CFNumberRef)v364, kCFNumberSInt8Type, &v388);
          }
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v361, @"CCA_OTHER_TOTAL", (const void **)&v362)
            && v362)
          {
            CFNumberGetValue((CFNumberRef)v362, kCFNumberSInt8Type, (char *)&v387 + 1);
          }
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v361, @"CCA_INTERFERENCE_TOTAL", (const void **)&v363)&& v363)
          {
            CFNumberGetValue((CFNumberRef)v363, kCFNumberSInt8Type, &v387);
          }
        }
        if (CFDictionaryGetValueIfPresent(v48, @"TXFAIL", (const void **)&v376) && v376) {
          CFNumberGetValue((CFNumberRef)v376, kCFNumberIntType, &v386);
        }
        if (CFDictionaryGetValueIfPresent(v48, @"TXFRAMES", (const void **)&v374) && v374) {
          CFNumberGetValue((CFNumberRef)v374, kCFNumberIntType, (char *)&v385 + 4);
        }
        if (CFDictionaryGetValueIfPresent(v48, @"TXFWFRAMES", (const void **)&v392) && v392) {
          CFNumberGetValue((CFNumberRef)v392, kCFNumberIntType, &v381);
        }
        if (CFDictionaryGetValueIfPresent(v48, @"TXFWFAIL", (const void **)&v391) && v391) {
          CFNumberGetValue((CFNumberRef)v391, kCFNumberIntType, &v380);
        }
        if (CFDictionaryGetValueIfPresent(v48, @"TXRETRANS", (const void **)&v375) && v375) {
          CFNumberGetValue((CFNumberRef)v375, kCFNumberIntType, &v385);
        }
        if (CFDictionaryGetValueIfPresent(v48, @"RXFRAMES", (const void **)&v373) && v373) {
          CFNumberGetValue((CFNumberRef)v373, kCFNumberIntType, (char *)&v384 + 4);
        }
        if (CFDictionaryGetValueIfPresent(v48, @"RXRETRYFRMS", (const void **)&v372) && v372) {
          CFNumberGetValue((CFNumberRef)v372, kCFNumberIntType, &v384);
        }
        if (CFDictionaryGetValueIfPresent(v48, @"RXBEACONFRMS", (const void **)&v371) && v371) {
          CFNumberGetValue((CFNumberRef)v371, kCFNumberIntType, (char *)&v383 + 4);
        }
        if (CFDictionaryGetValueIfPresent(v48, @"RXBEACONSCHED", (const void **)&v370) && v370) {
          CFNumberGetValue((CFNumberRef)v370, kCFNumberIntType, &v383);
        }
        if (CFDictionaryGetValueIfPresent(v48, @"RXRATE", (const void **)&v368) && v368) {
          CFNumberGetValue((CFNumberRef)v368, kCFNumberIntType, &v382);
        }
        if (CFDictionaryGetValueIfPresent(v48, @"TXRATE", (const void **)&v369) && v369) {
          CFNumberGetValue((CFNumberRef)v369, kCFNumberIntType, (char *)&v382 + 4);
        }
        if (CFDictionaryGetValueIfPresent(v48, @"TXFBRATE", (const void **)&v367) && v367) {
          CFNumberGetValue((CFNumberRef)v367, kCFNumberIntType, (char *)&v381 + 4);
        }
        unint64_t v354 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v60 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v60 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)v352 = v60;
        long long v353 = v60;
        if (CFDictionaryGetValueIfPresent(v48, @"MLO_OP_STATS", (const void **)&v360) && v360) {
          sub_10003B26C(v345, (CFDictionaryRef)v360);
        }
        if (CFDictionaryGetValueIfPresent(v48, @"MLO_LQM_STATS", (const void **)&v359))
        {
          if (*(_DWORD *)(v345 + 3044))
          {
            uint64_t v61 = 0;
            uint64_t v62 = v345 + 3048;
            do
            {
              uint64_t v63 = v62 + v61;
              if (*(unsigned char *)(v62 + v61))
              {
                long long v64 = *(_OWORD *)(v63 + 16);
                *(_OWORD *)v352 = *(_OWORD *)v63;
                long long v353 = v64;
                unint64_t v354 = *(void *)(v63 + 32);
              }
              v61 += 40;
            }
            while (v61 != 120);
          }
          if (v359 && CFArrayGetCount((CFArrayRef)v359) >= 1)
          {
            CFIndex v65 = 0;
            do
            {
              CFDictionaryRef v66 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v359, v65);
              if (v66) {
                sub_10003B3E4(v345, v66, v65);
              }
              ++v65;
            }
            while (CFArrayGetCount((CFArrayRef)v359) > v65);
          }
          if (*(_DWORD *)(v345 + 3044))
          {
            uint64_t v67 = 0;
            uint64_t v68 = 0;
            uint64_t v69 = v345 + 3048;
            do
            {
              if (*(unsigned char *)(v69 + v67)) {
                uint64_t v68 = v69 + v67;
              }
              v67 += 40;
            }
            while (v67 != 120);
            if (v68) {
              sub_10010B514((uint64_t)v352, v68);
            }
          }
          int v70 = +[WiFiUsageMonitor sharedInstance];
          if (v70)
          {
            uint64_t v71 = *(void *)(v345 + 40);
            long long v72 = *(_OWORD *)(v345 + 3184);
            keys[0] = *(_OWORD *)(v345 + 3168);
            keys[1] = v72;
            [(WiFiUsageMonitor *)v70 updateWithMLORuntimeConfig:keys forInterface:v71];
          }
        }
        CFNumberRef v73 = (const __CFNumber *)sub_100024070(*(void *)(v345 + 48));
        if (v73) {
          CFNumberGetValue(v73, kCFNumberSInt16Type, (void *)(v345 + 2848));
        }
        *(_WORD *)(v345 + 2850) = sub_1000059B0(*(void *)(v345 + 48));
        if (v383) {
          BOOL v74 = SHIDWORD(v383) < (int)v383 / 2 && *(_DWORD *)(v345 + 2796) < *(_DWORD *)(v345 + 648)
        }
             || HIDWORD(v383) == 0;
        else {
          BOOL v74 = 0;
        }
        LOBYTE(values) = 0;
        LOBYTE(number[0]) = 0;
        *(void *)&keys[0] = 0;
        int v75 = CFArrayGetCount(*(CFArrayRef *)(v345 + 264));
        v340 = v48;
        if (v75 > 0)
        {
          BOOL v331 = v74;
          v335 = v51;
          __int16 v76 = 0;
          __int16 v77 = 0;
          int v78 = 0;
          unsigned __int8 v79 = 0;
          if (v75 >= 3) {
            uint64_t v80 = 3;
          }
          else {
            uint64_t v80 = v75;
          }
          unint64_t v81 = v80 + 1;
          int v333 = v80;
          unsigned int v82 = v80 - 1;
          while (1)
          {
            CFDictionaryRef v83 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v56 + 264), v82);
            if (!v83) {
              break;
            }
            if (CFDictionaryGetValueIfPresent(v83, @"PER_CORE_RSSI", (const void **)keys)) {
              BOOL v84 = *(void *)&keys[0] == 0;
            }
            else {
              BOOL v84 = 1;
            }
            if (!v84 && CFArrayGetCount(*(CFArrayRef *)&keys[0]) == 2)
            {
              CFNumberRef v85 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)&keys[0], 0);
              CFNumberRef v86 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)&keys[0], 1);
              if (v85)
              {
                CFNumberGetValue(v85, kCFNumberSInt8Type, &values);
                if ((char)values >= 0xFFFFFF81)
                {
                  ++v79;
                  v77 += (char)values;
                }
              }
              uint64_t v56 = v345;
              if (v86)
              {
                CFNumberGetValue(v86, kCFNumberSInt8Type, number);
                if (SLOBYTE(number[0]) >= 0xFFFFFF81)
                {
                  ++v78;
                  v76 += SLOBYTE(number[0]);
                }
              }
            }
            --v81;
            --v82;
            if (v81 <= 1)
            {
              if (v333 < v79) {
                sub_100195F1C();
              }
              if (v333 < v78) {
                sub_100195F48();
              }
              if (v79) {
                v77 /= (__int16)v79;
              }
              if ((_BYTE)v78) {
                v76 /= (__int16)v78;
              }
              int v87 = v77;
              if (!v79) {
                int v87 = -1;
              }
              *(_DWORD *)(v56 + 2800) = v87;
              int v88 = v76;
              if (!v79) {
                int v88 = -1;
              }
              *(_DWORD *)(v56 + 2804) = v88;
              if ((v331 & _os_feature_enabled_impl()) == 1)
              {
                int v51 = v335;
                int v90 = (char)v77;
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Last RSSI:%d Core0 AvgRssint i = %d Core1 AvgRssint i = %d", *(unsigned int *)(v56 + 2796), (char)v77, (char)v76)];
                }
                if ((_BYTE)v77)
                {
                  a3 = v344;
                  int v48 = v340;
                  if (*(_DWORD *)(v56 + 2796) <= v90)
                  {
                    uint64_t v91 = 0;
                  }
                  else
                  {
                    *(_DWORD *)(v56 + 2796) = v90;
                    uint64_t v91 = 1;
                  }
                }
                else
                {
                  a3 = v344;
                  if ((_BYTE)v76)
                  {
                    if (*(_DWORD *)(v56 + 2796) <= (char)v76)
                    {
                      uint64_t v91 = 0;
                    }
                    else
                    {
                      *(_DWORD *)(v56 + 2796) = (char)v76;
                      uint64_t v91 = 2;
                    }
                  }
                  else
                  {
                    uint64_t v91 = 0;
                  }
                  int v48 = v340;
                }
                goto LABEL_203;
              }
LABEL_202:
              uint64_t v91 = 0;
              a3 = v344;
              int v48 = v340;
              int v51 = v335;
              goto LABEL_203;
            }
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: LQAManager: paramDict is NULL!"];
          }
          goto LABEL_202;
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: LQAManager: perCoreRssiHistory is Empty!", "__WiFiLQAMgrAvgValidPerCoreRssiSamples")];
        }
        uint64_t v91 = 0;
        a3 = v344;
LABEL_203:
        if (v51) {
          int v93 = v342;
        }
        else {
          int v93 = 0;
        }
        if ((v93 & 1) != 0 || CFAbsoluteTimeGetCurrent() - *(double *)(v345 + 88) > *(double *)(v345 + 96))
        {
          uint64_t v336 = v91;
          *(CFAbsoluteTime *)(v345 + 88) = CFAbsoluteTimeGetCurrent();
          double v94 = 0.0;
          double v95 = 0.0;
          if (*(double *)(v345 + 2784) != 0.0) {
            double v95 = CFAbsoluteTimeGetCurrent() - *(double *)(v345 + 2784);
          }
          if (*(double *)(v345 + 64) != 0.0) {
            double v94 = CFAbsoluteTimeGetCurrent() - *(double *)(v345 + 64);
          }
          if (HIDWORD(v385) && v386)
          {
            kdebug_trace();
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4 message:"Tx failure is observed"];
            }
          }
          v97 = v361;
          v98 = v366;
          v100 = (void *)qword_10027DD68;
          if (v97)
          {
            if (v98)
            {
              if (qword_10027DD68)
              {
                v101 = sub_10001A43C(*(const void **)(v345 + 48));
                CFStringRef v102 = sub_100012FCC(*(_DWORD *)(v345 + 2776));
                double v103 = 0.0;
                if (v383 && (int)v383 > SHIDWORD(v383)) {
                  double v103 = (double)((int)v383 - HIDWORD(v383)) / (double)(int)v383 * 100.0;
                }
                if (HIDWORD(v385))
                {
                  double v104 = (double)v386 / (double)SHIDWORD(v385) * 100.0;
                  uint64_t v105 = v385;
                  double v106 = (double)(int)v385 / (double)SHIDWORD(v385) * 100.0;
                }
                else
                {
                  double v104 = 0.0;
                  uint64_t v105 = v385;
                  double v106 = 0.0;
                }
                if (HIDWORD(v384)) {
                  double v116 = (double)(int)v384 / (double)SHIDWORD(v384) * 100.0;
                }
                else {
                  double v116 = 0.0;
                }
                if (v93) {
                  v117 = "T";
                }
                else {
                  v117 = "F";
                }
                objc_msgSend(v100, "WFLog:message:", 3, "%s(%@:%@): InfraUptime:%.1fsecs Channel: %d Bandwidth: %dMhz Rssi: %d {%ld %ld} Cca: %d (S:%d O:%d I:%d) Snr: %hd BcnPer: %.1f%% (%d, %.1f%%) TxFrameCnt: %d TxPer: %.1f%% TxReTrans: %d TxRetryRatio: %0.1f%% RxFrameCnt: %d RxRetryFrames: %d RxRetryRatio: %0.1f%% TxRate: %d RxRate: %d FBRate: %d TxFwFrms: %d TxFwFail: %d Noise: %d {%ld %ld %ld} time: %.1fsecs fgApp: %@ V: %s", "__WiFiLQAMgrLogStats", v101, v102, *(void *)&v94, *(unsigned __int16 *)(v345 + 2848), *(unsigned __int16 *)(v345 + 2850), v390, v358, v357, SHIBYTE(v388), (char)v388, SHIBYTE(v387),
                  (char)v387,
                  SHIWORD(v389),
                  *(void *)&v103,
                  v383,
                  (float)(*(float *)(v345 + 1084) * 100.0),
                  HIDWORD(v385),
                  *(void *)&v104,
                  v105,
                  *(void *)&v106,
                  HIDWORD(v384),
                  v384,
                  *(void *)&v116,
                  HIDWORD(v382),
                  v382,
                  HIDWORD(v381),
                  v381,
                  v380,
                  (__int16)v389,
                  v356,
                  v355,
                  v355 - v356,
                  *(void *)&v95,
                  *(void *)(v345 + 208),
                  v117);
                a3 = v344;
                int v48 = v340;
              }
            }
            else if (qword_10027DD68)
            {
              v110 = sub_10001A43C(*(const void **)(v345 + 48));
              CFStringRef v111 = sub_100012FCC(*(_DWORD *)(v345 + 2776));
              if (v383)
              {
                double v112 = 0.0;
                if ((int)v383 > SHIDWORD(v383)) {
                  double v112 = (double)((int)v383 - HIDWORD(v383)) / (double)(int)v383 * 100.0;
                }
              }
              else
              {
                double v112 = 0.0;
              }
              if (HIDWORD(v385))
              {
                double v121 = (double)v386 / (double)SHIDWORD(v385) * 100.0;
                uint64_t v122 = v385;
                double v123 = (double)(int)v385 / (double)SHIDWORD(v385) * 100.0;
              }
              else
              {
                double v121 = 0.0;
                uint64_t v122 = v385;
                double v123 = 0.0;
              }
              double v126 = 0.0;
              if (HIDWORD(v384)) {
                double v126 = (double)(int)v384 / (double)SHIDWORD(v384) * 100.0;
              }
              v127 = "F";
              if (v93) {
                v127 = "T";
              }
              objc_msgSend(v100, "WFLog:message:", 3, "%s(%@:%@): InfraUptime:%.1fsecs Channel: %d Bandwidth: %dMhz Rssi: %d Cca: %d (S:%d O:%d I:%d) Snr: %hd BcnPer: %.1f%% (%d, %.1f%%) TxFrameCnt: %d TxPer: %.1f%% TxReTrans: %d TxRetryRatio: %0.1f%% RxFrameCnt: %d RxRetryFrames: %d RxRetryRatio: %0.1f%% TxRate: %d RxRate: %d FBRate: %d TxFwFrms: %d TxFwFail: %d  time: %.1fsecs fgApp: %@ V: %s", *(void *)(v345 + 208), "__WiFiLQAMgrLogStats", v110, v111, *(void *)&v94, *(unsigned __int16 *)(v345 + 2848), *(unsigned __int16 *)(v345 + 2850), v390, SHIBYTE(v388), (char)v388, SHIBYTE(v387), (char)v387,
                SHIWORD(v389),
                *(void *)&v112,
                v383,
                (float)(*(float *)(v345 + 1084) * 100.0),
                HIDWORD(v385),
                *(void *)&v121,
                v122,
                *(void *)&v123,
                HIDWORD(v384),
                v384,
                *(void *)&v126,
                HIDWORD(v382),
                v382,
                HIDWORD(v381),
                v381,
                v380,
                *(void *)&v95,
                *(void *)(v345 + 208),
                v127);
            }
          }
          else if (v98)
          {
            if (qword_10027DD68)
            {
              v107 = sub_10001A43C(*(const void **)(v345 + 48));
              CFStringRef v108 = sub_100012FCC(*(_DWORD *)(v345 + 2776));
              if (v383)
              {
                double v109 = 0.0;
                if ((int)v383 > SHIDWORD(v383)) {
                  double v109 = (double)((int)v383 - HIDWORD(v383)) / (double)(int)v383 * 100.0;
                }
              }
              else
              {
                double v109 = 0.0;
              }
              if (HIDWORD(v385))
              {
                double v118 = (double)v386 / (double)SHIDWORD(v385) * 100.0;
                uint64_t v119 = v385;
                double v120 = (double)(int)v385 / (double)SHIDWORD(v385) * 100.0;
              }
              else
              {
                double v118 = 0.0;
                uint64_t v119 = v385;
                double v120 = 0.0;
              }
              double v124 = 0.0;
              if (HIDWORD(v384)) {
                double v124 = (double)(int)v384 / (double)SHIDWORD(v384) * 100.0;
              }
              v125 = "F";
              if (v93) {
                v125 = "T";
              }
              objc_msgSend(v100, "WFLog:message:", 3, "%s(%@:%@): InfraUptime:%.1fsecs Channel: %d Bandwidth: %dMhz Rssi: %d {%ld %ld} Cca: %d Snr: %hd BcnPer: %.1f%% (%d, %.1f%%) TxFrameCnt: %d TxPer: %.1f%% TxReTrans: %d TxRetryRatio: %0.1f%% RxFrameCnt: %d RxRetryFrames: %d RxRetryRatio: %0.1f%% TxRate: %d RxRate: %d FBRate: %d TxFwFrms: %d TxFwFail: %d Noise: %d {%ld %ld %ld} time: %.1fsecs fgApp: %@ V: %s", "__WiFiLQAMgrLogStats", v107, v108, *(void *)&v94, *(unsigned __int16 *)(v345 + 2848), *(unsigned __int16 *)(v345 + 2850), v390, v358, v357, SHIBYTE(v388), SHIWORD(v389), *(void *)&v109,
                v383,
                (float)(*(float *)(v345 + 1084) * 100.0),
                HIDWORD(v385),
                *(void *)&v118,
                v119,
                *(void *)&v120,
                HIDWORD(v384),
                v384,
                *(void *)&v124,
                HIDWORD(v382),
                v382,
                HIDWORD(v381),
                v381,
                v380,
                (__int16)v389,
                v356,
                v355,
                v355 - v356,
                *(void *)&v95,
                *(void *)(v345 + 208),
                v125);
              a3 = v344;
              int v48 = v340;
            }
          }
          else if (qword_10027DD68)
          {
            v113 = sub_10001A43C(*(const void **)(v345 + 48));
            CFStringRef v114 = sub_100012FCC(*(_DWORD *)(v345 + 2776));
            if (v383)
            {
              double v115 = 0.0;
              if ((int)v383 > SHIDWORD(v383)) {
                double v115 = (double)((int)v383 - HIDWORD(v383)) / (double)(int)v383 * 100.0;
              }
            }
            else
            {
              double v115 = 0.0;
            }
            if (HIDWORD(v385))
            {
              double v128 = (double)v386 / (double)SHIDWORD(v385) * 100.0;
              uint64_t v129 = v385;
              double v130 = (double)(int)v385 / (double)SHIDWORD(v385) * 100.0;
            }
            else
            {
              double v128 = 0.0;
              uint64_t v129 = v385;
              double v130 = 0.0;
            }
            double v131 = 0.0;
            if (HIDWORD(v384)) {
              double v131 = (double)(int)v384 / (double)SHIDWORD(v384) * 100.0;
            }
            v132 = "F";
            if (v93) {
              v132 = "T";
            }
            objc_msgSend(v100, "WFLog:message:", 3, "%s(%@:%@): InfraUptime:%.1fsecs Channel: %d Bandwidth: %dMhz Rssi: %d Cca: %d Snr: %hd  BcnPer: %.1f%% (%d, %.1f%%) TxFrameCnt: %d TxPer: %.1f%% TxReTrans: %d TxRetryRatio: %0.1f%% RxFrameCnt : %d RxRetryFrames: %d RxRetryRatio: %0.1f%% TxRate: %d RxRate: %d FBRate: %d TxFwFrms: %d TxFwFail: %d time: %.1fsecs fgApp: %@ V: %s", v382, "__WiFiLQAMgrLogStats", v113, v114, *(void *)&v94, *(unsigned __int16 *)(v345 + 2848), *(unsigned __int16 *)(v345 + 2850), v390, SHIBYTE(v388), SHIWORD(v389), *(void *)&v115, v383, (float)(*(float *)(v345 + 1084) * 100.0),
              HIDWORD(v385),
              *(void *)&v128,
              v129,
              *(void *)&v130,
              HIDWORD(v384),
              v384,
              *(void *)&v131,
              HIDWORD(v382),
              v382,
              HIDWORD(v381),
              v381,
              v380,
              *(void *)&v95,
              *(void *)(v345 + 208),
              v132,
              v318,
              v319,
              v320);
          }
          if (+[WiFiUsageMonitor sharedInstance])
          {
            uint64_t v134 = 0;
            v334 = v133;
            if (v383)
            {
              uint64_t v135 = v345;
              if ((int)v383 >= SHIDWORD(v383)) {
                uint64_t v134 = (uint64_t)((double)((int)v383 - HIDWORD(v383)) / (double)(int)v383 * 100.0);
              }
            }
            else
            {
              uint64_t v135 = v345;
            }
            uint64_t v329 = v134;
            v136 = (void *)sub_100005CCC(*(void *)(v135 + 32), *(const void **)(v135 + 40));
            id v327 = [v136 objectForKey:@"LQM_SUMMARY_RX_CRS"];
            id v137 = [v136 objectForKey:@"LQM_SUMMARY_RX_PLCP"];
            id v328 = [v136 objectForKey:@"LQM_SUMMARY_RX_GOOD_PLCPS"];
            v332 = v136;
            id v138 = [v136 objectForKey:@"LQM_SUMMARY_DBG_LOG_LIST"];
            long long values = 0u;
            long long v395 = 0u;
            long long v396 = 0u;
            long long v397 = 0u;
            id v139 = [v138 countByEnumeratingWithState:&values objects:keys count:16];
            if (v139)
            {
              id v140 = v139;
              uint64_t v141 = *(void *)v395;
              do
              {
                for (int i = 0; i != v140; int i = (char *)i + 1)
                {
                  if (*(void *)v395 != v141) {
                    objc_enumerationMutation(v138);
                  }
                  uint64_t v143 = *(void *)(*((void *)&values + 1) + 8 * i);
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:4, "LQM-WiFi: %@\n", v143 message];
                  }
                }
                id v140 = [v138 countByEnumeratingWithState:&values objects:keys count:16];
              }
              while (v140);
            }
            id v145 = [objc_alloc((Class)WiFiUsageLQMUserSample) initWithInterfaceName:*(void *)(v345 + 40)];
            *(void *)(v345 + 3200) = v145;
            uint64_t v326 = (int)v390;
            uint64_t v146 = 0x7FFFFFFFFFFFFFFFLL;
            if (v366) {
              uint64_t v147 = v358;
            }
            else {
              uint64_t v147 = 0x7FFFFFFFFFFFFFFFLL;
            }
            uint64_t v148 = v357;
            if (!v366) {
              uint64_t v148 = 0x7FFFFFFFFFFFFFFFLL;
            }
            uint64_t v322 = v148;
            uint64_t v323 = v147;
            uint64_t v149 = v356;
            if (!v365) {
              uint64_t v149 = 0x7FFFFFFFFFFFFFFFLL;
            }
            uint64_t v324 = v149;
            uint64_t v325 = (__int16)v389;
            uint64_t v150 = v355;
            if (!v365) {
              uint64_t v150 = 0x7FFFFFFFFFFFFFFFLL;
            }
            uint64_t v321 = v150;
            uint64_t v151 = SHIWORD(v389);
            uint64_t v152 = (char)v388;
            uint64_t v153 = SHIBYTE(v387);
            uint64_t v154 = (char)v387;
            uint64_t v155 = SHIBYTE(v388);
            if (v327) {
              uint64_t v146 = (uint64_t)[v327 unsignedIntegerValue];
            }
            if (v137) {
              uint64_t v156 = (uint64_t)[v137 unsignedIntegerValue];
            }
            else {
              uint64_t v156 = 0x7FFFFFFFFFFFFFFFLL;
            }
            if (v328) {
              uint64_t v157 = (uint64_t)[v328 unsignedIntegerValue];
            }
            else {
              uint64_t v157 = 0x7FFFFFFFFFFFFFFFLL;
            }
            objc_msgSend(v145, "populateWithRssi:rssi0:rssi1:rssiMode:noise:noise0:noise1:snr:selfCca:otherCca:interference:totalReportedCca:beaconPer:rxCrsGlitch:rxBadPLCP:rxStart:rxBphyCrsGlitch:rxBphyBadPLCP:sampleDuration:", v326, v323, v322, v336, v325, v324, v321, v151, v152, v153, v154, v155, v329, v146, v156, v157,
              0x7FFFFFFFFFFFFFFFLL,
              0x7FFFFFFFFFFFFFFFLL,
              (unint64_t)*(double *)(v345 + 96));
            [*(id *)(v345 + 3200) populateWithTxFrames:SHIDWORD(v385) RxFrames:SHIDWORD(v384) TxFails:v386 TxRetries:(int)v385 RxRetries:(int)v384 TxRate:SHIDWORD(v382) RxRate:(int)v382 txRTS:0x7FFFFFFFFFFFFFFFLL txRTSFail:0x7FFFFFFFFFFFFFFFLL txMpdu:0x7FFFFFFFFFFFFFFFLL txAMPDU:0x7FFFFFFFFFFFFFFFLL];
            int v158 = sub_1000170CC();
            [*(id *)(v345 + 3200) populateWithMotionState:sub_100012FCC(*(_DWORD *)(v345 + 2776)) andAppState:v158 & 0xFFFFFF];
            if (v359 && CFArrayGetCount((CFArrayRef)v359) >= 1)
            {
              CFIndex v159 = 0;
              uint64_t v160 = v345 + 3048;
              do
              {
                v161 = *(void **)(v345 + 3200);
                long long v162 = *(_OWORD *)(v160 + 16);
                *(_OWORD *)CFNumberRef number = *(_OWORD *)v160;
                long long v350 = v162;
                uint64_t v351 = *(void *)(v160 + 32);
                [v161 populateWithPerMLOLinkStats:number];
                ++v159;
                v160 += 40;
              }
              while (CFArrayGetCount((CFArrayRef)v359) > v159);
            }

            a3 = v344;
            int v48 = v340;
            v133 = v334;
          }
        }
      }
      a1 = v345;
      if (!v342)
      {
LABEL_379:
        CFRelease(cf);
LABEL_380:
        CFRelease(v48);
        goto LABEL_381;
      }
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v345 + 24), 0, v48);
      int v163 = CFArrayGetCount(*(CFArrayRef *)(v345 + 24));
      double v164 = CFAbsoluteTimeGetCurrent();
      v352[0] = 0;
      if (v163 >= 7)
      {
        double v165 = v164;
        while (1)
        {
          CFIndex v166 = (v163 - 1);
          CFDictionaryRef v167 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v345 + 24), v166);
          if (!v167) {
            break;
          }
          CFNumberRef v168 = (const __CFNumber *)CFDictionaryGetValue(v167, @"kWiFiLqaMgrLqmSampleLocalTimestamp");
          if (!v168)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:4, "%s LqmSampleLocalTimestamp numberRef is NULL at index:%d!", "__WiFiLQAMgrAddLQMEntry", v166];
            }
            goto LABEL_531;
          }
          CFNumberGetValue(v168, kCFNumberDoubleType, v352);
          if (*(double *)v352 == 0.0)
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s LqmSampleLocalTimestamp Value is NULL at index:%d!", "__WiFiLQAMgrAddLQMEntry", v166);
            }
            goto LABEL_531;
          }
          if (v165 - *(double *)v352 > 30.0)
          {
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v345 + 24), v166);
            int v163 = CFArrayGetCount(*(CFArrayRef *)(v345 + 24));
            if (v163 > 6) {
              continue;
            }
          }
          goto LABEL_321;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: LQM Report at %d index is NULL", @"__WiFiLQAMgrAddLQMEntry", v166];
        }
LABEL_531:
        goto LABEL_379;
      }
LABEL_321:
      LODWORD(number[0]) = 0;
      LODWORD(v392) = 0;
      LODWORD(v391) = 0;
      *(void *)&keys[0] = 0;
      *(void *)&long long values = 0;
      if (*(void *)(v345 + 24))
      {
        int v169 = *(_DWORD *)(v345 + 2776);
        if (CFDictionaryGetValueIfPresent(a3, @"RXBEACONFRMS", (const void **)keys) && *(void *)&keys[0]) {
          CFNumberGetValue(*(CFNumberRef *)&keys[0], kCFNumberIntType, number);
        }
        if (CFDictionaryGetValueIfPresent(a3, @"RXBEACONSCHED", (const void **)&values) && (void)values) {
          CFNumberGetValue((CFNumberRef)values, kCFNumberIntType, &v392);
        }
        CFDictionaryRef v170 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v345 + 24), 0);
        if (v170)
        {
          double v171 = 0.0;
          if (v392 && (int)v392 > SLODWORD(number[0])) {
            double v171 = (double)((int)v392 - LODWORD(number[0])) / (double)(int)v392 * 100.0;
          }
          float v172 = v171;
          if (*(unsigned char *)(v345 + 2832))
          {
            int v173 = sub_100008CF8(v345);
            LODWORD(v391) = v173;
          }
          else
          {
            int v173 = *(_DWORD *)(v345 + 2796);
            LODWORD(v391) = v173;
            if (!v173)
            {
              CFNumberRef v174 = (const __CFNumber *)CFDictionaryGetValue(v170, @"RSSI");
              if (!v174) {
                goto LABEL_378;
              }
              CFNumberGetValue(v174, kCFNumberSInt32Type, &v391);
              int v173 = (int)v391;
            }
          }
          if (v173 > -70 || v169 == 1)
          {
            if (v173 >= -64)
            {
              *(unsigned char *)(v345 + 2986) = 0;
              sub_100017494(v345);
            }
          }
          else
          {
            *(unsigned char *)(v345 + 2986) = 1;
            sub_1000383E0(v345);
          }
          if (v172 < 20.0)
          {
            if (dword_10027C968 == -1)
            {
              ++dword_10027D600;
            }
            else if (dword_10027C968 < 21)
            {
              int v177 = dword_10027D600;
              if (dword_10027C968 <= 0x14) {
                int v177 = ++dword_10027D600;
              }
              if (v177 >= 10)
              {
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3 message:"RSSI_WIN: Beacon PER is consistenyly below < 20Percent. Switch to default RSSI Window"];
                }
                if (*(unsigned char *)(v345 + 2985) != 8)
                {
                  *(unsigned char *)(v345 + 2985) = 8;
                  sub_10003EEB0(v345);
                }
                dword_10027D600 = 0;
              }
            }
            else
            {
              dword_10027D600 = 1;
            }
            goto LABEL_378;
          }
          if (v172 > 20.0 && v172 < 60.0)
          {
            if (dword_10027C968 == -1)
            {
              int v175 = dword_10027D604 + 1;
            }
            else
            {
              if ((dword_10027C968 - 61) > 0xFFFFFFD6)
              {
                int v179 = dword_10027D604;
                if ((dword_10027C968 - 21) <= 0x26) {
                  int v179 = ++dword_10027D604;
                }
                if (v179 >= 5)
                {
                  if (*(unsigned char *)(v345 + 2985) != 4 && v169 != 1)
                  {
                    if (qword_10027DD68) {
                      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "RSSI_WIN: Beacon PER is consistenyly below > 20Percent. Switch to RSSI Win = %d", 4);
                    }
                    *(unsigned char *)(v345 + 2985) = 4;
                    sub_10003EEB0(v345);
                  }
                  dword_10027D604 = 0;
                }
                goto LABEL_377;
              }
              int v175 = 1;
            }
            dword_10027D604 = v175;
LABEL_377:
            a1 = v345;
            goto LABEL_378;
          }
          if (v172 > 60.0)
          {
            if (dword_10027C968 == -1)
            {
              int v176 = dword_10027D608 + 1;
            }
            else
            {
              if (dword_10027C968 > 59)
              {
                int v240 = dword_10027D608;
                if (dword_10027C968 != 60) {
                  int v240 = ++dword_10027D608;
                }
                if (v240 >= 5)
                {
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3 message:"RSSI_WIN: Collected more than 5 samples of High Beacon PER > 60 Percent "];
                  }
                  if (*(unsigned char *)(v345 + 2985) != 2 && v169 != 1)
                  {
                    if (qword_10027DD68) {
                      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "RSSI_WIN: Beacon PER is consistenyly below > 60Percent. Switch to RSSI Win = %d", 2);
                    }
                    *(unsigned char *)(v345 + 2985) = 2;
                    sub_10003EEB0(v345);
                  }
                  dword_10027D608 = 0;
                }
                goto LABEL_377;
              }
              int v176 = 1;
            }
            dword_10027D608 = v176;
            goto LABEL_377;
          }
LABEL_378:
          dword_10027C968 = (int)v172;
          goto LABEL_379;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: Latest LQM Report is NULL", @"__WiFiLQAMgrMonitorBeaconPER"];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: LQM table is NULL", @"__WiFiLQAMgrMonitorBeaconPER"];
        }
      }
      float v172 = 0.0;
      goto LABEL_378;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: CFDictionaryCreateMutableCopy failed", @"__WiFiLQAMgrAddLQMEntry"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: LQM table is NULL", @"__WiFiLQAMgrAddLQMEntry"];
    }
  }
LABEL_381:
  CFArrayRef v181 = *(const __CFArray **)(a1 + 24);
  if (!v181)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: LQM table is NULL", @"__WiFiLQAMgrAddRSSIHistory"];
    }
    goto LABEL_558;
  }
  if (!CFArrayGetCount(v181))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: LQM table is empty", "__WiFiLQAMgrAddRSSIHistory")];
    }
    goto LABEL_558;
  }
  CFDictionaryRef v182 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
  if (!v182)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: Latest LQM Report is NULL", @"__WiFiLQAMgrAddRSSIHistory"];
    }
LABEL_558:
    goto LABEL_391;
  }
  CFDictionaryRef v183 = v182;
  v184 = CFDictionaryGetValue(v182, @"RSSI");
  if (v184)
  {
    v185 = v184;
    v186 = CFDictionaryGetValue(v183, @"LQMTIMESTAMP");
    if (v186)
    {
      v187 = v186;
      CFNumberRef v188 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 2776));
      if (v188)
      {
        CFNumberRef v189 = v188;
        keys[0] = *(_OWORD *)off_10023F1D0;
        *(void *)&keys[1] = @"motion-state";
        *(void *)&long long values = v187;
        *((void *)&values + 1) = v185;
        *(void *)&long long v395 = v188;
        CFDictionaryRef v190 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)&values, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 256), 0, v190);
        int v191 = CFArrayGetCount(*(CFArrayRef *)(a1 + 256));
        if (v191 >= 21)
        {
          do
          {
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 256), (v191 - 1));
            int v191 = CFArrayGetCount(*(CFArrayRef *)(a1 + 256));
          }
          while (v191 > 20);
        }
        CFRelease(v189);
        if (v190) {
          CFRelease(v190);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: LQAManager: failed to allocate motionStateRef!", @"__WiFiLQAMgrAddRSSIHistory"];
        }
        a1 = v345;
      }
    }
  }
LABEL_391:
  if (+[WiFiAIRAgent sharedInstance]
    && [+[WiFiAIRAgent sharedInstance] isInterfaceRankingInProgress])
  {
    [+[WiFiAIRAgent sharedInstance] ingestLQMUpdate:a3];
  }
  *(unsigned char *)(a1 + 508) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(void *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 2808) = 0;
  *(unsigned char *)(a1 + 2824) = 0;
  if (*(void *)(a1 + 24))
  {
    if (*(void *)(a1 + 48))
    {
      int v192 = sub_100008CF8(a1);
      int v193 = sub_100023F30(0);
      uint64_t v194 = 0;
      BOOL v195 = v192 > -66 && v193 == 2;
      int v196 = v192 + 50;
      if (!v195) {
        int v196 = v192;
      }
      while (v196 < dword_10027C810[v194 + 1] || v196 > dword_10027C810[v194])
      {
        v194 += 3;
        if (v194 == 18) {
          goto LABEL_404;
        }
      }
      float v10 = *(float *)&dword_10027C810[v194 + 2];
    }
    else
    {
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:4 message:@"%s, LQAManager: Current Network is NULL" args:__WiFiLQAMgrComputeLinkScore];
      }
LABEL_404:
      float v10 = 0.0;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: LQM table is NULL", @"__WiFiLQAMgrComputeLinkScore"];
    }
    float v10 = 0.0;
  }
  if (!*(unsigned char *)(a1 + 640)) {
    goto LABEL_498;
  }
  int v197 = *(_DWORD *)(a1 + 20);
  if ((v197 - 2) < 3)
  {
    if (*(double *)(a1 + 2816) == 0.0 && *(_DWORD *)(a1 + 2796) > *(_DWORD *)(a1 + 652)) {
      *(CFAbsoluteTime *)(a1 + 2816) = CFAbsoluteTimeGetCurrent();
    }
    CFArrayRef v198 = *(const __CFArray **)(a1 + 24);
    if (v198)
    {
      if (CFArrayGetCount(v198))
      {
        CFDictionaryRef v199 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
        if (v199)
        {
          if (*(unsigned char *)(a1 + 2832))
          {
            int v200 = sub_100008CF8(a1);
            LODWORD(keys[0]) = v200;
          }
          else
          {
            CFDictionaryRef v204 = v199;
            int v200 = *(_DWORD *)(a1 + 2796);
            LODWORD(keys[0]) = v200;
            if (!v200)
            {
              CFNumberRef v205 = (const __CFNumber *)CFDictionaryGetValue(v204, @"RSSI");
              if (!v205) {
                goto LABEL_437;
              }
              CFNumberGetValue(v205, kCFNumberSInt32Type, keys);
              int v200 = keys[0];
            }
          }
          if (v200 > *(_DWORD *)(a1 + 648)
            || v200 > *(_DWORD *)(a1 + 652)
            && *(double *)(a1 + 2816) != 0.0
            && CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 2816) >= 5.0)
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: LQAManager: GoodLinkRssi %d +veCrossTime %.1f", "__WiFiLQAMgrIsLinkGood", LODWORD(keys[0]), CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 2816) + 5.0)];
            }
            if (!sub_1000057F0(a1))
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:3, "%s: LinkIsGood, ending Evaluation", "WiFiLQAMgrLQMNotify"];
              }
              [+[WiFiUsageMonitor sharedInstance] setTdLogic_end:0 evalTime:*(int *)(a1 + 2796) rssi:*(void *)(a1 + 40) roamTime:CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 136) forInterface:*(double *)(a1 + 192)];
              *(unsigned char *)(a1 + 2793) = 0;
              *(void *)(a1 + 136) = 0;
              *(unsigned char *)(a1 + 392) = 0;
              sub_100017494(a1);
              *(_DWORD *)(a1 + 20) = 1;
              if (qword_10027DD68)
              {
                uint64_t v209 = *(int *)(a1 + 20);
                if (v209 > 4) {
                  CFStringRef v210 = @"Bogus";
                }
                else {
                  CFStringRef v210 = *(&off_10023F260 + v209);
                }
                [(id)qword_10027DD68 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v210 message];
              }
              dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 336), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
              dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 544), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
              if (!*(unsigned char *)(a1 + 288) && &_symptom_create && (*(_DWORD *)(a1 + 16) - 1) <= 1)
              {
                symptom_create();
                symptom_set_qualifier();
                unint64_t v229 = sub_10003A8CC(*(void *)(a1 + 48));
                symptom_set_qualifier();
                symptom_send();
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 2, "%s: Notified Symptoms that Bssid: %llX +ve crossed good link", "WiFiLQAMgrLQMNotify", v229);
                }
              }
              *(unsigned char *)(a1 + 288) = 0;
              *(_DWORD *)(a1 + 488) = 0;
              *(unsigned char *)(a1 + 356) = 0;
              sub_10003AA24(a1, *(CFTypeRef *)(a1 + 376));
              v231 = *(const void **)(a1 + 376);
              if (v231)
              {
                CFRelease(v231);
                *(void *)(a1 + 376) = 0;
              }
              if (sub_10003AB0C(a1) && *(unsigned char *)(a1 + 177))
              {
                *(unsigned char *)(a1 + 177) = 0;
                double v232 = *(double *)(a1 + 184);
                if (v232 != 0.0) {
                  *(double *)(a1 + 192) = v11 - v232;
                }
                *(void *)(a1 + 184) = 0;
                sub_10005DD54(*(void *)(a1 + 32), *(void *)(a1 + 40), *(const void **)(a1 + 48), *(_DWORD *)(a1 + 224), 0, 1, 0);
              }
              if (sub_100023450((unsigned char *)a1)) {
                goto LABEL_498;
              }
              if (a4) {
                BOOL v235 = (*(unsigned char *)(a1 + 2948) & 1) == 0;
              }
              else {
                BOOL v235 = 0;
              }
              if (!sub_1000236AC(a1) && !v235 && sub_10003A620(a1))
              {
                *(unsigned char *)(a1 + 2833) = 1;
                CFDictionarySetValue(a3, @"WIFI_ASSIST_OVERRIDE", kCFBooleanTrue);
                LODWORD(keys[0]) = 3;
                CFNumberRef v236 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, keys);
                if (v236)
                {
                  CFNumberRef v237 = v236;
                  CFDictionarySetValue(a3, @"WIFI_ASSIST_OVERRIDE_REASON", v236);
                  v239 = (void *)qword_10027DD68;
                  double v8 = v338;
                  BOOL v7 = v339;
                  if (qword_10027DD68) {
LABEL_511:
                  }
                    [v239 WFLog:4 message:@"%s wifi-assist override On for high channel congestion" args:v239, @"WiFiLQAMgrLQMNotify"];
LABEL_512:
LABEL_513:
                  CFRelease(v237);
                  goto LABEL_499;
                }
                goto LABEL_766;
              }
              goto LABEL_752;
            }
          }
LABEL_437:
          sub_1000383E0(a1);
          if (!*(unsigned char *)(a1 + 288)) {
            goto LABEL_456;
          }
          CFArrayRef v211 = *(const __CFArray **)(a1 + 24);
          if (v211)
          {
            if (CFArrayGetCount(v211))
            {
              CFDictionaryRef v212 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
              if (v212)
              {
                if (*(unsigned char *)(a1 + 2832))
                {
                  int v213 = sub_100008CF8(a1);
                  LODWORD(keys[0]) = v213;
                }
                else
                {
                  int v213 = *(_DWORD *)(a1 + 2796);
                  LODWORD(keys[0]) = v213;
                  if (!v213)
                  {
                    CFNumberRef v215 = (const __CFNumber *)CFDictionaryGetValue(v212, @"RSSI");
                    if (!v215) {
                      goto LABEL_456;
                    }
                    CFNumberGetValue(v215, kCFNumberSInt32Type, keys);
                    int v213 = keys[0];
                  }
                }
                if (v213 > *(_DWORD *)(a1 + 652) || !&_symptom_create || (*(_DWORD *)(a1 + 16) - 1) > 1)
                {
LABEL_456:
                  *(_DWORD *)(a1 + 2828) = 1;
                  if (sub_100038478(a1, 0, 0)) {
                    sub_1000366F0(a1, 0);
                  }
                  goto LABEL_498;
                }
                symptom_create();
                symptom_set_qualifier();
                unint64_t v216 = sub_10003A8CC(*(void *)(a1 + 48));
                symptom_set_qualifier();
                symptom_send();
                *(unsigned char *)(a1 + 288) = 0;
                v218 = (void *)qword_10027DD68;
                if (!qword_10027DD68)
                {
LABEL_455:
                  goto LABEL_456;
                }
                unint64_t v316 = v216;
                v219 = "%s: Notified Symptoms that Bssid: %llX -ve crossed poor link";
                uint64_t v220 = 2;
LABEL_454:
                [v218 WFLog:v220 message:v219 stringByAppendingFormat:@"__WiFiLQAMgrSendPendingSymptomsEventIfLinkBad" v316];
                goto LABEL_455;
              }
              v218 = (void *)qword_10027DD68;
              if (!qword_10027DD68) {
                goto LABEL_455;
              }
              v219 = "%s, LQAManager: Latest LQM Report is NULL";
            }
            else
            {
              v218 = (void *)qword_10027DD68;
              if (!qword_10027DD68) {
                goto LABEL_455;
              }
              v219 = "%s: LQM table is empty";
            }
          }
          else
          {
            v218 = (void *)qword_10027DD68;
            if (!qword_10027DD68) {
              goto LABEL_455;
            }
            v219 = "%s, LQAManager: LQM table is NULL";
          }
          uint64_t v220 = 4;
          goto LABEL_454;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: Latest LQM Report is NULL", @"__WiFiLQAMgrIsLinkGood"];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: LQM table is empty", "__WiFiLQAMgrIsLinkGood")];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s, LQAManager: LQM table is NULL", "__WiFiLQAMgrIsLinkGood");
      }
    }
    goto LABEL_437;
  }
  if (v197 != 1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Bogus state %d", "WiFiLQAMgrLQMNotify", *(unsigned int *)(a1 + 20));
    }
    goto LABEL_498;
  }
  *(void *)(a1 + 2816) = 0;
  CFArrayRef v201 = *(const __CFArray **)(a1 + 24);
  if (!v201)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: LQM table is NULL", @"__WiFiLQAMgrIsLinkBad"];
    }
    goto LABEL_589;
  }
  if (!CFArrayGetCount(v201))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: LQM table is empty" args:("__WiFiLQAMgrIsLinkBad")];
    }
    goto LABEL_589;
  }
  CFDictionaryRef v202 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
  if (!v202)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: Latest LQM Report is NULL", @"__WiFiLQAMgrIsLinkBad"];
    }
LABEL_589:
    goto LABEL_590;
  }
  if (*(unsigned char *)(a1 + 2832))
  {
    int v203 = sub_100008CF8(a1);
    LODWORD(keys[0]) = v203;
  }
  else
  {
    int v203 = *(_DWORD *)(a1 + 2796);
    LODWORD(keys[0]) = v203;
    if (!v203)
    {
      CFNumberRef v221 = (const __CFNumber *)CFDictionaryGetValue(v202, @"RSSI");
      if (!v221) {
        goto LABEL_590;
      }
      CFNumberGetValue(v221, kCFNumberSInt32Type, keys);
      int v203 = keys[0];
    }
  }
  if (v203 <= *(_DWORD *)(a1 + 652))
  {
    double v8 = v338;
    BOOL v7 = v339;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: LQAManager BadLinkRssi %d", "__WiFiLQAMgrIsLinkBad", LODWORD(keys[0]))];
    }
    sub_1000057F0(a1);
    if (&_symptom_create && (*(_DWORD *)(a1 + 16) - 1) <= 1)
    {
      symptom_create();
      symptom_set_qualifier();
      unint64_t v223 = sub_10003A8CC(*(void *)(a1 + 48));
      symptom_set_qualifier();
      symptom_send();
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 2, "%s: Notified Symptoms that Bssid: %llX -ve crossed poor link", "__WiFiLQAMgrIsLinkBad", v223);
      }
    }
    goto LABEL_471;
  }
  if (sub_1000057F0(a1))
  {
    *(unsigned char *)(a1 + 288) = 1;
    double v8 = v338;
    BOOL v7 = v339;
LABEL_471:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: LinkIsBad, starting Evaluation"];
    }
    if (*(double *)(a1 + 136) == 0.0) {
      *(CFAbsoluteTime *)(a1 + 136) = CFAbsoluteTimeGetCurrent();
    }
    sub_1000383E0(a1);
    *(_DWORD *)(a1 + 20) = 2;
    if (qword_10027DD68)
    {
      uint64_t v227 = *(int *)(a1 + 20);
      if (v227 > 4) {
        CFStringRef v228 = @"Bogus";
      }
      else {
        CFStringRef v228 = *(&off_10023F260 + v227);
      }
      [(id)qword_10027DD68 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v228 message];
    }
    *(_DWORD *)(a1 + 488) = 0;
    *(_DWORD *)(a1 + 2828) = 1;
    if (sub_100038478(a1, 0, 0)) {
      sub_1000366F0(a1, 0);
    }
    goto LABEL_499;
  }
LABEL_590:
  v378 = 0;
  v379 = 0;
  LODWORD(v374) = 0;
  LODWORD(v373) = 0;
  *(void *)(a1 + 136) = 0;
  sub_100017494(a1);
  if (CFDictionaryGetValueIfPresent(a3, @"RXBEACONFRMS", (const void **)&v379) && v379) {
    CFNumberGetValue((CFNumberRef)v379, kCFNumberIntType, &v374);
  }
  int v254 = CFDictionaryGetValueIfPresent(a3, @"RXBEACONSCHED", (const void **)&v378);
  v255 = v378;
  if (v254 && v378)
  {
    CFNumberGetValue((CFNumberRef)v378, kCFNumberIntType, &v373);
    v255 = v378;
  }
  if (v379)
  {
    if (v255)
    {
      unint64_t v256 = *(void *)(a1 + 240) + (int)v374;
      unint64_t v257 = *(void *)(a1 + 232) + (int)v373;
      *(void *)(a1 + 232) = v257;
      *(void *)(a1 + 240) = v256;
      if (v257)
      {
        float v258 = (float)((float)((float)v256 / (float)v257) * -0.5) + 1.0;
        *(float *)(a1 + 1084) = v258;
        *(float *)(a1 + 1248) = v258;
      }
    }
  }
  uint64_t v259 = *(unsigned __int8 *)(a1 + 248);
  if (*(unsigned char *)(a1 + 248) && CFArrayGetCount(*(CFArrayRef *)(a1 + 24)))
  {
    CFDictionaryRef v260 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
    unsigned int v261 = sub_100039D00(a1, v260);
    int v262 = sub_10003A0C8(a1, v260, *(unsigned __int8 *)(a1 + 248));
    if (v262)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s PossibleRoam:%d UserWalkOutScenario:%d  EdgeBss:%d", "WiFiLQAMgrLQMNotify", v261, 1, v259);
      }
      a1 = v345;
    }
    if (v262) {
      BOOL v264 = v261 == 0;
    }
    else {
      BOOL v264 = 0;
    }
    int v265 = v264;
  }
  else
  {
    int v265 = 0;
  }
  if (sub_100023450((unsigned char *)a1))
  {
    BOOL v266 = 0;
LABEL_615:
    char v267 = v265;
    goto LABEL_622;
  }
  if (a4) {
    int v268 = *(_DWORD *)(a1 + 2948) & 1;
  }
  else {
    int v268 = 1;
  }
  int v269 = sub_1000236AC(a1);
  BOOL v266 = 0;
  if (v269) {
    goto LABEL_615;
  }
  char v267 = v265;
  if (v268)
  {
    BOOL v266 = sub_10003A620(a1);
    char v267 = v266 + v265;
  }
LABEL_622:
  BOOL v343 = v266;
  if (sub_100024D68(*(void *)(a1 + 32)) && sub_10005D9B4(*(void *)(a1 + 32)))
  {
    char v341 = v267;
    v392 = 0;
    *(void *)&keys[0] = 0;
    *(void *)&long long values = 0;
    v352[0] = 0;
    number[0] = 0;
    LODWORD(v377) = 0;
    LODWORD(v376) = 0;
    LODWORD(v375) = 0;
    LOBYTE(v372) = 0;
    v391 = 0;
    CFArrayRef v270 = *(const __CFArray **)(a1 + 24);
    if (v270)
    {
      CFIndex v271 = CFArrayGetCount(v270);
      if (v271 >= 3)
      {
        CFDictionaryRef v272 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v271 - 1);
        if (v272)
        {
          if (CFDictionaryGetValueIfPresent(v272, @"LQMTIMESTAMP", (const void **)&v391))
          {
            if (v391)
            {
              double AbsoluteTime = CFDateGetAbsoluteTime((CFDateRef)v391);
              double v274 = CFAbsoluteTimeGetCurrent();
              if (v274 - AbsoluteTime >= *(double *)(a1 + 672))
              {
                CFIndex v275 = 0;
                while (1)
                {
                  CFDictionaryRef v276 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v345 + 24), v275);
                  if (v276)
                  {
                    CFDictionaryRef v277 = v276;
                    if (CFDictionaryGetValueIfPresent(v276, @"LQMTIMESTAMP", (const void **)&v391)) {
                      BOOL v278 = v391 == 0;
                    }
                    else {
                      BOOL v278 = 1;
                    }
                    if (v278)
                    {
                      if (v391) {
                        goto LABEL_638;
                      }
                    }
                    else
                    {
                      double AbsoluteTime = CFDateGetAbsoluteTime((CFDateRef)v391);
                      if (v391)
                      {
LABEL_638:
                        if (v274 - AbsoluteTime <= *(double *)(v345 + 672))
                        {
                          if (CFDictionaryGetValueIfPresent(v277, @"CCA", (const void **)number) && number[0]) {
                            CFNumberGetValue(number[0], kCFNumberSInt8Type, &v372);
                          }
                          if (CFDictionaryGetValueIfPresent(v277, @"CCA_STATS", (const void **)&v392))
                          {
                            if (v392)
                            {
                              if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v392, @"CCA_SELF_WAKE", (const void **)keys)&& *(void *)&keys[0])
                              {
                                CFNumberGetValue(*(CFNumberRef *)&keys[0], kCFNumberIntType, &v377);
                              }
                              if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v392, @"CCA_OTHER_WAKE", (const void **)v352)&& v352[0])
                              {
                                CFNumberGetValue(v352[0], kCFNumberIntType, &v376);
                              }
                              if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v392, @"CCA_INTERFERENCE_WAKE", (const void **)&values)&& (void)values)
                              {
                                CFNumberGetValue((CFNumberRef)values, kCFNumberIntType, &v375);
                              }
                              if ((v375 + v376) < 0x3D)
                              {
                                char v280 = 0;
                                uint64_t v279 = v345;
                              }
                              else
                              {
                                uint64_t v279 = v345;
                                char v280 = *(unsigned char *)(v345 + 2898) + 1;
                              }
                              *(unsigned char *)(v279 + 2898) = v280;
                              if (v377 < 0x1F) {
                                *(unsigned char *)(v279 + 2899) = 0;
                              }
                              else {
                                ++*(unsigned char *)(v279 + 2899);
                              }
                            }
                          }
                          else
                          {
                            unsigned int v282 = v377;
                            if (!v377) {
                              unsigned int v282 = v372;
                            }
                            LODWORD(v377) = v282;
                            if (v282 >= 0x1F) {
                              *(unsigned char *)(v345 + 2897) = 1;
                            }
                          }
                        }
                        goto LABEL_659;
                      }
                    }
                    if (qword_10027DD68) {
                      [((id)qword_10027DD68) WFLog:4 message:@"%s: No Timestamp in LQM Record" : @"__WiFiLQAMgrCheckCCA"];
                    }
                  }
LABEL_659:
                  if (++v275 == 3)
                  {
                    a1 = v345;
                    unsigned int v283 = *(unsigned __int8 *)(v345 + 2898);
                    *(unsigned char *)(v345 + 2896) = v283 > 2;
                    unsigned int v284 = *(unsigned __int8 *)(v345 + 2899);
                    *(unsigned char *)(v345 + 2897) = v284 > 2;
                    if (v283 < 3)
                    {
                      a3 = v344;
                      if (v284 < 3) {
                        goto LABEL_678;
                      }
                    }
                    else
                    {
                      a3 = v344;
                      if (qword_10027DD68) {
                        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "CCA is consistently higher than %d since last %d LQM samples", 60, *(unsigned __int8 *)(v345 + 2898));
                      }
                      if (*(unsigned char *)(v345 + 2897) != 1)
                      {
LABEL_678:
                        char v287 = (char)v377;
                        *(unsigned char *)(v345 + 2893) = (_BYTE)v377;
                        char v288 = (char)v376;
                        char v289 = (char)v375;
                        *(unsigned char *)(v345 + 2892) = (_BYTE)v376 + v287 + (_BYTE)v375;
                        *(unsigned char *)(v345 + 2894) = v288;
                        *(unsigned char *)(v345 + 2895) = v289;
                        break;
                      }
                    }
                    if (qword_10027DD68) {
                      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Self CCA is consistently higher than %d since last %d LQM samples", 30, *(unsigned __int8 *)(v345 + 2899));
                    }
                    goto LABEL_678;
                  }
                }
              }
            }
          }
        }
      }
    }
    memset(keys, 0, 44);
    if (sub_10003CAAC(a1, keys))
    {
      uint64_t v290 = 0;
      while (!*(unsigned char *)(a1 + v290 + 724)
           || SDWORD1(keys[0]) < *(_DWORD *)(a1 + v290 + 728)
           || (float)(*(float *)(a1 + v290 + 732) * (float)SDWORD1(keys[0])) > (float)SLODWORD(keys[0])
           || SDWORD2(keys[0]) <= *(_DWORD *)(a1 + v290 + 736) * DWORD1(keys[0]))
      {
        v290 += 16;
        if (v290 == 64)
        {
          *(unsigned char *)(a1 + 2902) = 0;
          int v291 = 2;
          goto LABEL_687;
        }
      }
      *(unsigned char *)(a1 + 2902) = 1;
      int v291 = 4;
LABEL_687:
      if (*(unsigned char *)(a1 + 2896)) {
        int v292 = v291;
      }
      else {
        int v292 = 1;
      }
      *(_DWORD *)(a1 + 2856) = v292;
      *(_DWORD *)(a1 + 2872) = v292;
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: Failed to extract metrics from Lqm, exiting!", @"__WiFiLQAMrgCheckTxPer"];
      }
      int v292 = 8;
    }
    if (qword_10027DD68)
    {
      v295 = "Poor";
      if (v292 == 2) {
        v295 = "Avg";
      }
      if (v292 == 1) {
        v295 = "Good";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "[TrafficEngineering]: Health of the Link is %s with TotalCCA=%d SelfCCA=%d CCAOther=%d CCAInterferece=%d HighTxPER=%d", v295, *(char *)(a1 + 2892), *(char *)(a1 + 2893), *(char *)(a1 + 2894), *(char *)(a1 + 2895), *(unsigned __int8 *)(a1 + 2902));
    }
    if (v292 == 4 || v292 == 2)
    {
      char v267 = v341;
      if (*(unsigned char *)(a1 + 2900))
      {
        if (!*(unsigned char *)(a1 + 2936))
        {
          sub_10007415C(*(void *)(a1 + 32), 1);
          *(unsigned char *)(a1 + 2936) = 1;
        }
        int v297 = *(unsigned __int8 *)(a1 + 2913);
        if (!*(unsigned char *)(a1 + 2913))
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "[TrafficEngineering]: Critical Apps are running in congested environment, talk to nearby devices to reduce congestion");
          }
          dispatch_async_f(*(dispatch_queue_t *)(a1 + 2920), (void *)a1, (dispatch_function_t)sub_100043008);
          int v297 = *(unsigned __int8 *)(a1 + 2913);
          char v267 = v341;
        }
        if (v297 == 1 && !*(unsigned char *)(a1 + 2912)) {
          sub_10003EBFC(a1);
        }
      }
      else if (*(unsigned char *)(a1 + 2936) == 1)
      {
        sub_10007415C(*(void *)(a1 + 32), 0);
        *(unsigned char *)(a1 + 2936) = 0;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 2936) = 0;
      char v267 = v341;
    }
    if (!*(unsigned char *)(a1 + 2900))
    {
      if (*(unsigned char *)(a1 + 2897) != 1 || *(unsigned char *)(a1 + 2913)) {
        goto LABEL_731;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"[TrafficEngineering]: Non Critical App is consuming significant bandwith, Make way for Critical applications in the ecosystem"];
      }
      dispatch_async_f(*(dispatch_queue_t *)(a1 + 2920), (void *)a1, (dispatch_function_t)sub_100043008);
      char v267 = v341;
      if (!*(unsigned char *)(a1 + 2900)) {
        goto LABEL_731;
      }
    }
    if (*(unsigned char *)(a1 + 2901))
    {
      int v299 = *(unsigned __int8 *)(a1 + 2936);
      if (*(unsigned char *)(a1 + 2897) == 1)
      {
        if (!*(unsigned char *)(a1 + 2936))
        {
          sub_10007415C(*(void *)(a1 + 32), 1);
          *(unsigned char *)(a1 + 2936) = 1;
        }
LABEL_731:
        if (*(double *)(a1 + 2928) != 0.0 && CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 2928) > 60.0)
        {
          sub_10007415C(*(void *)(a1 + 32), 0);
          *(unsigned char *)(a1 + 2936) = 0;
          sub_1000740EC(*(void *)(a1 + 32), 1);
          *(void *)(a1 + 2928) = 0;
        }
        if (!*(unsigned char *)(a1 + 2900) && *(unsigned char *)(a1 + 2912) == 1)
        {
          [*(id *)(a1 + 2976) __sendEventToPeers];
          v301 = *(NSObject **)(a1 + 2904);
          if (v301) {
            dispatch_source_set_timer(v301, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          }
          *(unsigned char *)(a1 + 2912) = 0;
          *(unsigned char *)(a1 + 2936) = 0;
          sub_10007415C(*(void *)(a1 + 32), 0);
        }
        goto LABEL_739;
      }
    }
    else
    {
      int v299 = *(unsigned __int8 *)(a1 + 2936);
    }
    if (v299 == 1)
    {
      sub_10007415C(*(void *)(a1 + 32), 0);
      *(unsigned char *)(a1 + 2936) = 0;
    }
    goto LABEL_731;
  }
LABEL_739:
  if (!v267)
  {
LABEL_752:
    double v8 = v338;
    BOOL v7 = v339;
    if (*(unsigned char *)(a1 + 2833))
    {
      *(unsigned char *)(a1 + 2833) = 0;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:@"%s: wifi-assist override to auto" message:4];
      }
    }
    CFDictionarySetValue(a3, @"WIFI_ASSIST_OVERRIDE", kCFBooleanFalse);
    goto LABEL_499;
  }
  *(unsigned char *)(a1 + 2833) = 1;
  CFDictionarySetValue(a3, @"WIFI_ASSIST_OVERRIDE", kCFBooleanTrue);
  if (v267 == 1)
  {
    if (v265) {
      int v302 = 2;
    }
    else {
      int v302 = 3;
    }
    LODWORD(keys[0]) = v302;
    CFNumberRef v303 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, keys);
    if (v303)
    {
      CFNumberRef v237 = v303;
      CFDictionarySetValue(a3, @"WIFI_ASSIST_OVERRIDE_REASON", v303);
      double v8 = v338;
      BOOL v7 = v339;
      if (v265)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s wifi-assist override On for edge bss walkout", "WiFiLQAMgrLQMNotify");
        }
      }
      if (!v343) {
        goto LABEL_513;
      }
      v239 = (void *)qword_10027DD68;
      if (qword_10027DD68) {
        goto LABEL_511;
      }
      goto LABEL_512;
    }
    goto LABEL_766;
  }
  CFMutableArrayRef v306 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!v306)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, @"%s: CFArrayCreateMutable failed", @"WiFiLQAMgrLQMNotify"];
    }
    goto LABEL_768;
  }
  v307 = v306;
  LODWORD(keys[0]) = 2;
  CFNumberRef v308 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, keys);
  if (!v308) {
    goto LABEL_766;
  }
  CFNumberRef v309 = v308;
  CFArrayAppendValue(v307, v308);
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, @"%s wifi-assist override On for edge bss walkout", @"WiFiLQAMgrLQMNotify"];
  }
  CFRelease(v309);
  LODWORD(keys[0]) = 3;
  CFNumberRef v311 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, keys);
  if (!v311)
  {
LABEL_766:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: CFNumberCreate failed", "WiFiLQAMgrLQMNotify")];
    }
LABEL_768:
    a1 = v345;
LABEL_498:
    double v8 = v338;
    BOOL v7 = v339;
    goto LABEL_499;
  }
  CFNumberRef v312 = v311;
  CFArrayAppendValue(v307, v311);
  double v8 = v338;
  BOOL v7 = v339;
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s wifi-assist override On for high channel congestion" args:("WiFiLQAMgrLQMNotify")];
  }
  CFRelease(v312);
  CFDictionarySetValue(a3, @"WIFI_ASSIST_OVERRIDE_REASONS", v307);
  a1 = v345;
LABEL_499:
  if (v8)
  {
    uint64_t v233 = *(void *)(a1 + 3200);
    if (v233)
    {
      -[WiFiUsageMonitor updateLinkQuality:forInterface:supportsLinkRecommendations:](v8, "updateLinkQuality:forInterface:supportsLinkRecommendations:", v233, *(void *)(a1 + 40), a4, Current);

      *(void *)(a1 + 3200) = 0;
    }
  }
  return v10;
}

CFStringRef sub_100012FCC(int a1)
{
  if ((a1 - 1) > 5) {
    CFStringRef v3 = @"Unknown";
  }
  else {
    CFStringRef v3 = *(&off_100240EF8 + a1 - 1);
  }
  return v3;
}

uint64_t sub_10001301C(const __CFArray *a1, void *a2, void *a3)
{
  if (a1 && CFArrayGetCount(a1) == 2)
  {
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 0);
    CFNumberRef v7 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 1);
    if (ValueAtIndex) {
      CFNumberGetValue(ValueAtIndex, kCFNumberNSIntegerType, a2);
    }
    if (v7)
    {
      CFNumberGetValue(v7, kCFNumberNSIntegerType, a3);
      unsigned int v8 = 1;
      goto LABEL_9;
    }
  }
  else
  {
    CFNumberRef ValueAtIndex = 0;
  }
  unsigned int v8 = 0;
LABEL_9:
  if (ValueAtIndex) {
    return 1;
  }
  else {
    return v8;
  }
}

void sub_1000130BC(uint64_t a1)
{
  if (a1)
  {
    CFDataRef v2 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    CFStringRef v3 = sub_100018FA8(a1, v2, 1);
    if (v3) {
      CFRelease(v3);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager.", @"WiFiDeviceManagerForceUpdateCachedCurrentNetwork"];
    }
  }
}

void sub_10001315C(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 2217)) {
    sub_100089AB0(a1);
  }
  int v4 = *(_DWORD *)(a1 + 788);
  if (v4 == 2)
  {
    char v5 = 0;
  }
  else if (v4 == 1)
  {
    char v5 = *(void *)(a1 + 848) == 0;
  }
  else
  {
    char v5 = *(unsigned char *)(a1 + 864);
  }
  if (CFSetGetCount(*(CFSetRef *)(a1 + 144))
    || objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "isBackgroundActivityRegistered"))
  {
    unint64_t v6 = *(void *)(a1 + 832) | 8;
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 832) & 0xFFFFFFFFFFFFFFF7;
  }
  *(void *)(a1 + 832) = v6;
  if (CFSetGetCount(*(CFSetRef *)(a1 + 152))
    || objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "isForegroundActivityRegistered"))
  {
    unint64_t v7 = *(void *)(a1 + 832) | 0x10;
  }
  else
  {
    unint64_t v7 = *(void *)(a1 + 832) & 0xFFFFFFFFFFFFFFEFLL;
  }
  *(void *)(a1 + 832) = v7;
  if (CFSetGetCount(*(CFSetRef *)(a1 + 168))
    || objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "isWiFiBoundActivityRegistered"))
  {
    unint64_t v8 = *(void *)(a1 + 832) | 0x20;
  }
  else
  {
    unint64_t v8 = *(void *)(a1 + 832) & 0xFFFFFFFFFFFFFFDFLL;
  }
  *(void *)(a1 + 832) = v8;
  unint64_t v9 = v8 ^ a2;
  if (*(void *)(a1 + 864)) {
    unint64_t v8 = 0;
  }
  unint64_t v57 = v8;
  uint64_t context = a1;
  unint64_t v59 = 0xAAAAAAAA0000003BLL;
  long long v60 = &v57;
  uint64_t v61 = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, @"%s: Delta state =%lld", @"__WiFiManagerApplicationStateUpdate", v9];
  }
  if ((v9 & 0x11) != 0)
  {
    if (qword_10027DD68)
    {
      CFNumberRef v12 = "entered";
      if ((*(void *)(a1 + 832) & 0x11) == 0) {
        CFNumberRef v12 = "exited";
      }
      [((id)qword_10027DD68) WFLog:3 message:@"Foreground Network Application %s."];
    }
    if ((*(unsigned char *)(a1 + 832) & 0x11) != 0)
    {
      uint64_t v13 = 1144;
      if (!v5) {
        uint64_t v13 = 1128;
      }
      sub_10000456C(a1, *(const void **)(a1 + v13), 2 * (v5 != 0));
      BOOL v14 = 0;
      char v15 = 0;
      char v16 = 0;
      int v17 = 3;
      char v53 = 1;
      char v18 = 1;
      int v19 = 1;
      BOOL v20 = 1;
    }
    else
    {
      char v53 = 1;
      if (v5) {
        int v23 = 2;
      }
      else {
        int v23 = 1;
      }
      uint64_t v24 = 1144;
      if (!v5) {
        uint64_t v24 = 1136;
      }
      sub_10000456C(a1, *(const void **)(a1 + v24), v23);
      sub_1000BB7B4(a1);
      char v15 = 0;
      char v16 = 0;
      int v19 = 0;
      int v17 = 0;
      BOOL v20 = 0;
      BOOL v14 = (*(unsigned char *)(a1 + 832) & 4) == 0;
      char v18 = 1;
    }
  }
  else
  {
    BOOL v14 = 0;
    uint64_t v21 = *(void *)(a1 + 832);
    if ((v21 & 0x11) != 0)
    {
      char v53 = 1;
      char v15 = 0;
      char v18 = 1;
      char v16 = 0;
      int v19 = 0;
      int v17 = 0;
      BOOL v20 = 0;
    }
    else
    {
      char v53 = 1;
      char v15 = 0;
      char v18 = 1;
      char v16 = 0;
      int v19 = 0;
      int v17 = 0;
      BOOL v20 = 0;
      if ((v9 & 0x2A) != 0)
      {
        int v22 = *(_DWORD *)(a1 + 788);
        if ((v21 & 0x2A) != 0)
        {
          BOOL v14 = 0;
          char v53 = 0;
          char v16 = 0;
          int v17 = 0;
          BOOL v20 = v22 == 2;
          char v15 = v5;
          int v19 = 1;
        }
        else
        {
          BOOL v14 = 0;
          char v15 = 0;
          char v18 = 0;
          int v19 = 0;
          BOOL v20 = 0;
          if (v22 == 2) {
            int v17 = 3;
          }
          else {
            int v17 = 0;
          }
          char v53 = 1;
          char v16 = v5;
        }
      }
    }
  }
  BOOL v54 = v14;
  char v55 = v18;
  char v56 = v15;
  int v52 = v19;
  if ((v9 & 0x2A) != 0)
  {
    if ((v9 & 2) != 0)
    {
      if (qword_10027DD68)
      {
        if ((*(void *)(a1 + 832) & 2) != 0) {
          CFDictionaryRef v27 = "entered";
        }
        else {
          CFDictionaryRef v27 = "exited";
        }
        [((id)qword_10027DD68) WFLog:3 message:@"Background Network Application %s" v27];
      }
    }
    else if ((v9 & 8) != 0)
    {
      if (qword_10027DD68)
      {
        if ((*(void *)(a1 + 832) & 8) != 0) {
          CFArrayRef v28 = "entered";
        }
        else {
          CFArrayRef v28 = "exited";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Background Daemon Application %s", v28);
      }
    }
    else
    {
      if ((v9 & 0x20) == 0) {
        goto LABEL_68;
      }
      if (qword_10027DD68)
      {
        if ((*(void *)(a1 + 832) & 0x20) != 0) {
          CFDictionaryRef v26 = "entered";
        }
        else {
          CFDictionaryRef v26 = "exited";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Direct to Cloud Daemon %s", v26);
      }
    }
  }
LABEL_68:
  if ((*(unsigned char *)(a1 + 832) & 0x2A) != 0)
  {
    BOOL v51 = v20;
    CFMutableStringRef v29 = sub_100013B88(a1);
    CFMutableStringRef v30 = sub_100013B2C(a1);
    CFArrayRef v32 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v33 = *(void *)(a1 + 832);
      if ((v33 & 2) != 0) {
        CFBooleanRef v34 = "Present";
      }
      else {
        CFBooleanRef v34 = "Not Present";
      }
      if ((v33 & 8) != 0) {
        uint64_t v35 = "Present";
      }
      else {
        uint64_t v35 = "Not Present";
      }
      int v48 = v35;
      CFNumberRef v49 = v34;
      char v50 = v16;
      int v36 = v17;
      CFStringRef v37 = @"none";
      if (v29) {
        CFStringRef v38 = v29;
      }
      else {
        CFStringRef v38 = @"none";
      }
      CFStringRef v47 = v38;
      unsigned int v39 = [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") isBackgroundActivityRegistered];
      if (v30) {
        CFStringRef v37 = v30;
      }
      CFStringRef v46 = v37;
      int v17 = v36;
      char v16 = v50;
      [v32 WFLog:3, "BG Application: %s, BG Daemon: %s. Daemons: %@ (activity=%d) Cloud Clients: %@ (activity=%d)", v49, v48, v47, v39, v46, [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") isWiFiBoundActivityRegistered] message];
    }
    if (v29) {
      CFRelease(v29);
    }
    BOOL v20 = v51;
    if (v30) {
      CFRelease(v30);
    }
  }
  if ((v9 & 4) == 0)
  {
    int v40 = v52;
    goto LABEL_92;
  }
  uint64_t v41 = *(void *)(a1 + 832);
  if ((v41 & 4) != 0)
  {
    int v17 = 2;
    int v40 = 1;
LABEL_92:
    if (!v54) {
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  int v40 = v52;
  if ((v41 & 0x11) != 0) {
    goto LABEL_92;
  }
LABEL_93:
  sub_1000241A4(a1);
  if ((*(unsigned char *)(a1 + 832) & 0x2A) != 0)
  {
LABEL_95:
    sub_100024374(a1);
    goto LABEL_96;
  }
LABEL_94:
  if ((v53 & 1) == 0) {
    goto LABEL_95;
  }
LABEL_96:
  if ((v55 & 1) == 0 && !*(unsigned char *)(a1 + 1176) && !*(unsigned char *)(a1 + 1160)) {
    sub_10009277C(a1);
  }
  if (v56) {
    sub_10000456C(a1, *(const void **)(a1 + 1144), 2);
  }
  if (v16)
  {
    if (*(unsigned char *)(a1 + 1176))
    {
      int v42 = (const void **)(a1 + 1152);
      int v43 = 3;
LABEL_105:
      sub_10000456C(a1, *v42, v43);
      goto LABEL_107;
    }
    if (!*(unsigned char *)(a1 + 1160))
    {
      sub_100003D18(a1, 0);
      int v42 = (const void **)(a1 + 1136);
      int v43 = 1;
      goto LABEL_105;
    }
  }
LABEL_107:
  if (v17) {
    sub_1000242F8(a1, v17);
  }
  unsigned int v44 = [+[WiFiUserInteractionMonitor sharedInstance] isNetworkRecommendationAllowed];
  if (_os_feature_enabled_impl())
  {
    if (!v40
      || ![+[WiFiUserInteractionMonitor sharedInstance] isPersonalHotspotRecommendationAllowed])
    {
      goto LABEL_112;
    }
  }
  else if (!v44)
  {
LABEL_112:
    LOBYTE(v57) = 0;
    goto LABEL_115;
  }
  LOBYTE(v57) = 1;
LABEL_115:
  uint64_t context = a1;
  unint64_t v59 = 0xAAAAAAAA0000005CLL;
  long long v60 = &v57;
  uint64_t v61 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
  if (_os_feature_enabled_impl()) {
    sub_100013A1C(a1);
  }
  if (v40)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s triggering Auto-Join for CWFAutoJoinTriggerApplicationState" arguments:("__WiFiManagerApplicationStateUpdate")];
    }
    sub_100003D18(a1, 1);
    if (_os_feature_enabled_impl()) {
      sub_1000047D4(a1, 31);
    }
    else {
      sub_10008DE74(a1, v20);
    }
    if (*(_DWORD *)(a1 + 788) == 2)
    {
      if (*(unsigned char *)(a1 + 314)) {
        sub_100086500(a1, 1, 6, 0);
      }
    }
  }
}

void sub_100013A1C(uint64_t a1)
{
  int v2 = _os_feature_enabled_impl();
  if (a1 && v2)
  {
    uint64_t v5 = 1;
    if (*(unsigned char *)(a1 + 1504))
    {
      uint64_t v3 = 5;
    }
    else if (*(unsigned char *)(a1 + 314))
    {
      uint64_t v3 = 2;
    }
    else if ([+[WiFiUserInteractionMonitor sharedInstance] isCellularDataUsable]|| *(void *)(a1 + 864)|| !*(void *)(a1 + 848))
    {
      if (![+[WiFiUserInteractionMonitor sharedInstance] isAVConferenceActive])
      {
        if (!*(void *)(a1 + 848))
        {
          if (!*(void *)(a1 + 864)) {
            goto LABEL_14;
          }
          uint64_t v3 = 7;
          goto LABEL_13;
        }
        if (![+[WiFiUserInteractionMonitor sharedInstance] isNetworkingAppInForeground])
        {
LABEL_14:
          context[0] = a1;
          context[1] = 0xAAAAAAAA0000007ALL;
          void context[2] = &v5;
          void context[3] = 1;
          CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
          return;
        }
      }
      uint64_t v3 = 6;
    }
    else
    {
      uint64_t v3 = 11;
    }
LABEL_13:
    uint64_t v5 = v3;
    goto LABEL_14;
  }
}

CFMutableStringRef sub_100013B2C(uint64_t a1)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  if (Mutable) {
    CFSetApplyFunction(*(CFSetRef *)(a1 + 168), (CFSetApplierFunction)sub_100093054, Mutable);
  }
  return Mutable;
}

CFMutableStringRef sub_100013B88(uint64_t a1)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  if (Mutable) {
    CFSetApplyFunction(*(CFSetRef *)(a1 + 144), (CFSetApplierFunction)sub_10001577C, Mutable);
  }
  return Mutable;
}

void sub_1000143D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100014404(uint64_t a1)
{
  -[WiFiUserInteractionMonitor setApplicationRunningState:foregroundState:andNetworkingState:forBundleId:](+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance"), "setApplicationRunningState:foregroundState:andNetworkingState:forBundleId:", *(unsigned __int8 *)(a1 + 52), *(unsigned __int8 *)(a1 + 53), [*(id *)(a1 + 32) _appUsesWiFiNetwork:*(unsigned int *)(a1 + 48)], *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  int v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
}

void sub_100014BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, @"%s: Error %d from Managed Event Fetch", @"-[WiFiUserInteractionMonitor _handleManagedEventNotification]_block_invoke", a2];
    }
LABEL_4:
    return;
  }
  if (!a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: Fetched managed event is %@", "-[WiFiUserInteractionMonitor _handleManagedEventNotification]_block_invoke", 0 message];
    }
    goto LABEL_4;
  }
  id v6 = *(id *)(a3 + 48);
  unint64_t v7 = v6;
  if (v6)
  {
    id v8 = [v6 copy];
    [*(id *)(a1 + 32) setAppAwareDetails:v8];

    unint64_t v9 = +[NSString stringWithUTF8String:kManagedEventKeyBackgroundCombinedFlowProperties];
    float v10 = [v7 objectForKeyedSubscript:v9];
    [*(id *)(a1 + 32) setSymptomBackgroundFlowProperties:[v10 unsignedLongLongValue]];

    double v11 = +[NSString stringWithUTF8String:kManagedEventKeyForegroundCombinedFlowProperties];
    CFNumberRef v12 = [v7 objectForKeyedSubscript:v11];
    [*(id *)(a1 + 32) setSymptomForegroundFlowProperties:[v12 unsignedLongLongValue]];

    uint64_t v13 = +[NSString stringWithUTF8String:kManagedEventKeyBackgroundSpecificFlowClassifications];
    BOOL v14 = [v7 objectForKeyedSubscript:v13];
    [*(id *)(a1 + 32) setSymptomBackgroundFlowClassification:[v14 unsignedIntValue]];

    uint64_t v15 = +[NSString stringWithUTF8String:kManagedEventKeyForegroundSpecificFlowClassifications];
    char v16 = [v7 objectForKeyedSubscript:v15];
    [*(id *)(a1 + 32) setSymptomForegroundFlowClassification:[v16 unsignedIntValue]];

    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    int v17 = [*(id *)(a1 + 32) clients];
    id v18 = [v17 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v25;
      do
      {
        for (int i = 0; i != v19; int i = (char *)i + 1)
        {
          if (*(void *)v25 != v20) {
            objc_enumerationMutation(v17);
          }
          int v22 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          int v23 = [v22 callback];
          ((void (**)(void, id, uint64_t))v23)[2](v23, [v22 context], 4);
        }
        id v19 = [v17 countByEnumeratingWithState:&v24 objects:v28 count:16];
      }
      while (v19);
    }
  }
}

void sub_100014F38(id a1, void *a2, unint64_t a3)
{
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000;
  float v10 = a2;
  if (a2 && *((void *)a2 + 4))
  {
    CFRetain(a2);
    int v4 = *(NSObject **)(v8[3] + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100003454;
    block[3] = &unk_10023F220;
    void block[4] = &v7;
    void block[5] = a3;
    dispatch_async(v4, block);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null manager or queue", "WiFiManagerScheduleWithQueue_block_invoke_13"];
    }
  }
  _Block_object_dispose(&v7, 8);
}

void sub_100015038(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_100015050(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  CFTypeRef v11 = cf;
  if (cf && *((void *)cf + 30))
  {
    CFRetain(cf);
    uint64_t v5 = *(NSObject **)(v9[3] + 240);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000035AC;
    block[3] = &unk_100240AD0;
    void block[4] = &v8;
    void block[5] = a3;
    void block[6] = *(void *)(a1 + 32);
    dispatch_async(v5, block);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"%s: null deviceManager or queue", @"WiFiDeviceManagerScheduleWithQueue_block_invoke"];
    }
  }
  _Block_object_dispose(&v8, 8);
}

void sub_10001515C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100015400(const __CFString *a1)
{
  *(void *)buffer = 0;
  uint64_t v10 = 0;
  if (!a1) {
    return 0;
  }
  CFStringGetCString(a1, buffer, 16, 0);
  if (!buffer[0])
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s, interfaceCName is zero length.", "WiFiIsInterfaceExpensive");
    }
    goto LABEL_16;
  }
  int v1 = socket(2, 2, 0);
  if (v1 == -1)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:4 message:@"%s: socket creation failed" args:("WiFiIsInterfaceExpensive")];
    }
LABEL_16:
    return 0;
  }
  int v2 = v1;
  long long v11 = 0u;
  long long v12 = 0u;
  __strlcpy_chk();
  if (ioctl(v2, 0xC02069A0uLL, &v11) == -1 && *__error() != 1)
  {
    id v6 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v7 = __error();
      [v6 WFLog:4 message:@"%s: ioctl(SIOCGIFEXPENSIVE) failed: %s", buffer, strerror(*v7)];
    }
    unsigned __int8 v3 = 0;
  }
  else
  {
    unsigned __int8 v3 = v12;
  }
  close(v2);
  return v3;
}

void sub_10001577C(uint64_t a1, __CFString *a2)
{
  CFStringRef v3 = (const __CFString *)sub_100016E18(a1);
  CFStringAppend(a2, v3);

  CFStringAppend(a2, @" ");
}

void sub_1000157C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 424);
  if (v4)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s(): CATS Update %@: Enter deviceManager:%p  source:%d enable:%d appPolicy:%d bitmap:0x%llx\n", "WifiDeviceManagerCatsUpdateEvent", sub_100016F3C(a1), a1, a2, *(unsigned __int8 *)(a1 + 433), *(unsigned __int8 *)(a1 + 435), *(void *)(a1 + 440) message];
    }
    if (*(unsigned char *)(a1 + 433))
    {
      uint64_t v6 = *(void *)(a1 + 424);
      uint64_t v7 = *(unsigned __int8 *)(a1 + 435);
      uint64_t v8 = *(void *)(a1 + 440);
      int v9 = *(unsigned __int8 *)(a1 + 434);
      uint64_t v57 = v8;
      int v58 = v9;
      if (a2 == 8)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        long long v12 = (unsigned char *)0xAAAAAAAAAAAAAAAALL;
        unsigned __int8 v13 = -86;
        char v54 = -86;
      }
      else
      {
        if (*(unsigned char *)(a1 + 5496)
          || *(unsigned char *)(a1 + 3410)
          || *(unsigned char *)(a1 + 5498)
          || [+[WiFiUserInteractionMonitor sharedInstance] isRealTimeAppActive])
        {
          uint64_t v14 = sub_10014A88C((unsigned char *)a1);
          uint64_t v10 = v14;
          if (v9) {
            char v15 = 0;
          }
          else {
            char v15 = -86;
          }
          unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
          if (v9) {
            unint64_t v16 = v14;
          }
          unint64_t v55 = v16;
          unsigned int v17 = 1;
        }
        else
        {
          uint64_t v10 = 0;
          unsigned int v17 = 0;
          unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
          char v15 = -86;
        }
        id v19 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          uint64_t v20 = *(void *)(a1 + 64);
          if (v20) {
            uint64_t v20 = sub_100016E20(v20);
          }
          [v19 WFLog:3, "%s: CATSUpdate %@: fgApp:%@ b=0x%llx rc=%d\n", "WiFiDeviceManagerCatsSetLowLatencyApp", v20, *(void *)(a1 + 448), v10, v17 message];
        }
        if (v17)
        {
          uint64_t v11 = 2;
          char v54 = -86;
          uint64_t v8 = v57;
          unsigned __int8 v13 = v15;
        }
        else
        {
          unsigned int v21 = [+[WiFiUserInteractionMonitor sharedInstance] isInHomeScreen];
          unsigned int v22 = v21;
          uint64_t v23 = *(unsigned __int8 *)(a1 + 456);
          if (*(unsigned char *)(a1 + 456)) {
            uint64_t v24 = v21 ^ 1;
          }
          else {
            uint64_t v24 = 0;
          }
          if (v58) {
            char v25 = 1;
          }
          else {
            char v25 = v15;
          }
          char v52 = v25;
          if (v58) {
            char v26 = v21;
          }
          else {
            char v26 = -86;
          }
          char v54 = v26;
          CFArrayRef v28 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            uint64_t v29 = *(void *)(a1 + 64);
            if (v29) {
              uint64_t v29 = sub_100016E20(v29);
            }
            [v28 WFLog:3, "%s: CATSUpdate %@: fgApp:%@ hs=%d t=%d wl=%d rc=%d\n", "WiFiDeviceManagerCatsSetForegroundApp", v29, *(void *)(a1 + 448), v22, 1, v23, v24 message];
          }
          uint64_t v10 = 0;
          if (v24)
          {
            uint64_t v11 = 1;
            unsigned __int8 v13 = v52;
          }
          else
          {
            uint64_t v11 = 0;
            if (v58) {
              unsigned __int8 v13 = 2;
            }
            else {
              unsigned __int8 v13 = v15;
            }
            char v54 = -86;
          }
          uint64_t v8 = v57;
        }
        long long v12 = (unsigned char *)v55;
      }
      BOOL v30 = v7 == v11 && v8 == v10;
      uint64_t v31 = !v30;
      uint64_t v56 = v31;
      if (v30)
      {
LABEL_83:
        if (v58)
        {
          if (a2 >= 9u)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4, "%s: CATS Stats invalid AppPolicy(%d) or Notify source (%d)\n", "WifiDeviceManagerCatsUpdateStats", v11, a2];
            }
            goto LABEL_102;
          }
          ++*(_DWORD *)(a1 + 652);
          if (v56)
          {
            ++*(_DWORD *)(a1 + 544);
            ++*(_DWORD *)(a1 + 544 + 4 * v11 + 4);
            ++*(_DWORD *)(a1 + 564);
            int v45 = (_DWORD *)(a1 + 564 + 4 * a2 + 4);
          }
          else
          {
            int v45 = (_DWORD *)(a1 + 656);
          }
          ++*v45;
          if (v11 == 1)
          {
            if (v13 == 1)
            {
              ++*(_DWORD *)(a1 + 652);
              ++*(_DWORD *)(a1 + 608);
              if (v54) {
                ++*(_DWORD *)(a1 + 616);
              }
              ++*(_DWORD *)(a1 + 612);
              goto LABEL_103;
            }
            CFStringRef v46 = (void *)qword_10027DD68;
            if (!qword_10027DD68) {
              goto LABEL_102;
            }
            CFStringRef v47 = "WifiDeviceManagerCatsFgAppActivityStats";
            uint64_t v48 = v13;
            goto LABEL_101;
          }
          if (v11 == 2)
          {
            if (!v13)
            {
              ++*(_DWORD *)(a1 + 620);
              if ((*v12 & 2) != 0)
              {
                ++*(_DWORD *)(a1 + 628);
              }
              else if ((*v12 & 4) != 0)
              {
                ++*(_DWORD *)(a1 + 632);
              }
              else if (v12[1])
              {
                ++*(_DWORD *)(a1 + 640);
              }
              else if (v12[4])
              {
                ++*(_DWORD *)(a1 + 644);
              }
              else if (*v12 & 0x10) != 0 || (v12[2])
              {
                ++*(_DWORD *)(a1 + 636);
              }
              else
              {
                ++*(_DWORD *)(a1 + 624);
              }
              goto LABEL_103;
            }
            CFStringRef v46 = (void *)qword_10027DD68;
            if (!qword_10027DD68) {
              goto LABEL_102;
            }
            CFStringRef v47 = "WifiDeviceManagerCatsLowLatencyEventStats";
            uint64_t v48 = v13;
LABEL_101:
            [v46 WFLog:4 message:@"%s: CATS Stats Invalid Report type (%d)  \n", v47, v48, v51];
LABEL_102:
          }
        }
LABEL_103:
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: CATSUpdate %@: Exit deviceManager=%p Source:%d stateChange:%d (P:%d-->%d B:0x%llx-->0x%llx)\n", "WifiDeviceManagerCatsUpdateEvent", sub_100016F3C(a1), a1, a2, v56, v7, v11, v57, v10 message];
        }
        return;
      }
      if (v6)
      {
        if (*(unsigned __int8 *)(a1 + 464) < 4u)
        {
          unsigned __int8 v53 = v13;
          char valuePtr = v11;
          uint64_t v59 = v10;
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (Mutable)
          {
            CFBooleanRef v34 = Mutable;
            CFNumberRef v35 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
            if (v35)
            {
              CFNumberRef v36 = v35;
              CFNumberRef v37 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v59);
              if (v37)
              {
                CFNumberRef v38 = v37;
                CFDictionarySetValue(v34, @"CATS_APP_PRIORITY", v36);
                CFDictionarySetValue(v34, @"CATS_APP_BITMAP", v38);
                CFRelease(v36);
                CFRelease(v38);
                unsigned int v39 = *(unsigned __int8 *)(a1 + 464);
                if (*(unsigned char *)(a1 + 464))
                {
                  unint64_t v40 = 0;
                  uint64_t v41 = (void (**)(uint64_t, uint64_t, __CFDictionary *, void))(a1 + 488);
                  do
                  {
                    if (*v41)
                    {
                      (*v41)(v6, a1, v34, *(v41 - 2));
                      unsigned int v39 = *(unsigned __int8 *)(a1 + 464);
                    }
                    ++v40;
                    v41 += 3;
                  }
                  while (v40 < v39);
                }
                CFRelease(v34);
                unsigned __int8 v13 = v53;
                goto LABEL_82;
              }
              CFRelease(v34);
              CFRelease(v36);
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"%s:CATSUpdate deviceManager:0x%p CATSUpdate not allocate app bitmap CATS dictionary entry" arguments:("WifiDeviceManagerCatsCreateDictionary", a1)];
              }
            }
            else
            {
              CFRelease(v34);
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s:CATSUpdate deviceManager:0x%p CATSUpdate not allocate app policy CATS dictionary entry", "WifiDeviceManagerCatsCreateDictionary", a1);
              }
            }
          }
          else
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s:CATSUpdate deviceManager:0x%p CATSUpdate not allocate CATS dictionary", "WifiDeviceManagerCatsCreateDictionary", a1)];
            }
          }
          unsigned __int8 v13 = v53;
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:@"%s:CATSUpdate deviceManager:%p CATS Update not allocate CATS dictionary" message:4, "WifiDeviceManagerCatsUpdateClients", a1, v51];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: CATS Update Clients: Num Clients(%d) > Max Clients(%d)", "WifiDeviceManagerCatsUpdateClients", *(unsigned __int8 *)(a1 + 464), 3)];
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:4, "%s: CATS Update Clients: Invalid arguments", "WifiDeviceManagerCatsUpdateClients", v50, v51];
        }
      }
LABEL_82:
      *(unsigned char *)(a1 + 435) = v11;
      *(void *)(a1 + 440) = v10;
      goto LABEL_83;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: CATS %@: Update Invalid deviceManager args device=%p deviceManager:%p WifiManager:%p Enab:%d\n", "WifiDeviceManagerCatsUpdateEvent", sub_100016F3C(a1), *(void *)(a1 + 64), a1, *(void *)(a1 + 424), *(unsigned __int8 *)(a1 + 433) message];
    }
  }
}

void sub_100016004(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return;
  }
  uint64_t v3 = *(void *)a2;
  if (!*(void *)a2) {
    return;
  }
  if (!*(void *)(a2 + 8)) {
    return;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4) {
    return;
  }
  int v6 = *(unsigned __int8 *)(a2 + 32);
  if (v6 == 1)
  {
    CFDataRef v7 = *(const __CFData **)(a2 + 16);
    if (v7)
    {
      BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a2 + 16));
      CFIndex Length = CFDataGetLength(v7);
      CFPropertyListRef v10 = sub_10000EA08(BytePtr, Length);
      if (v10)
      {
        uint64_t v11 = v10;
        double context = *(double *)&v3;
        unint64_t v55 = 0xAAAAAAAA0000005FLL;
        CFTypeRef cf = v10;
        uint64_t v57 = 1;
        CFSetApplyFunction(*(CFSetRef *)(v3 + 104), (CFSetApplierFunction)sub_100020954, &context);
        CFRelease(v11);
LABEL_9:
        *(unsigned char *)(a2 + 32) = 0;
        uint64_t v3 = *(void *)a2;
        uint64_t v4 = *(void *)(a2 + 24);
        goto LABEL_10;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, "%s: null payload", "__WiFiManagerEventCoalesceUndispatchedEventData"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null serializedEventData" args:((id)qword_10027DD68, "__WiFiManagerEventCoalesceUndispatchedEventData")];
      }
    }
    goto LABEL_9;
  }
LABEL_10:
  double context = 0.0;
  CFStringRef v12 = (const __CFString *)sub_100016E18(a1);
  CFStringRef v13 = v12;
  int valuePtr = 0;
  if (v12)
  {
    if (CFStringCompare(v12, @"SpringBoard", 1uLL) == kCFCompareEqualTo
      || CFStringCompare(v13, @"symptomsd", 1uLL) == kCFCompareEqualTo
      || (char v14 = 1, CFStringCompare(v13, @"WirelessRadioMan", 1uLL) == kCFCompareEqualTo))
    {
      char v14 = 0;
    }
  }
  else
  {
    char v14 = 1;
  }
  CFStringRef v15 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%d", 14);
  if (v15)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 2128), v15);
    if (Value)
    {
      CFDictionaryRef v17 = Value;
      CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(Value, @"EventRateRateDispachedCount");
      if (!v18 || !CFNumberGetValue(v18, kCFNumberIntType, &valuePtr))
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Unable to get pending clients", "__WiFiManagerEventIsRateDispatchable");
        }
        int v30 = 0;
        int v25 = 1;
        goto LABEL_60;
      }
      double Current = NAN;
      double Current = CFAbsoluteTimeGetCurrent();
      CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(v17, v13);
      if (v19)
      {
        CFDictionaryRef v20 = v19;
        CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(v19, @"EventRateClientPrevDispatchTimestampKey");
        if (v21 && CFNumberGetValue(v21, kCFNumberDoubleType, &context))
        {
          int v52 = 0;
          CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(v20, @"EventRateClientIntervalKey");
          if (v22 && CFNumberGetValue(v22, kCFNumberIntType, &v52))
          {
            if (context == 0.0 || Current - context < 0.01 || Current - context > (double)v52 + -0.1)
            {
              ++valuePtr;
              CFNumberRef v23 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &Current);
              if (v23)
              {
                CFNumberRef v24 = v23;
                CFDictionarySetValue(v20, @"EventRateClientPrevDispatchTimestampKey", v23);
                CFDictionarySetValue(v17, v13, v20);
                CFRelease(v24);
              }
              int v25 = 1;
              goto LABEL_49;
            }
            if (v14)
            {
LABEL_48:
              int v25 = 0;
LABEL_49:
              int v30 = 0;
              goto LABEL_56;
            }
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4, "%s: Client RLEvent %d NOT allowed - %@ Remaining: %2.4f Interval: %2.2f clientCount: %d numClients: %d", "__WiFiManagerEventIsRateDispatchable", 14, v13, Current - (context + (double)v52), (double)v52, valuePtr, v4 message];
            }
            CFArrayRef v32 = v41;
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"__WiFiManagerEventIsRateDispatchable: ERROR: client interval not set"];
            }
            CFArrayRef v32 = v31;
          }
          goto LABEL_48;
        }
LABEL_43:
        int v30 = 0;
        int v25 = 0;
LABEL_56:
        if (v4 <= valuePtr) {
          int valuePtr = 0;
        }
        CFNumberRef v34 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue(v17, @"EventRateRateDispachedCount", v34);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 2128), v15, v17);
        if (v34) {
          CFRelease(v34);
        }
LABEL_60:
        CFRelease(v15);
        goto LABEL_61;
      }
      CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(v17, @"EventRatePrevDispatchTimestampKey");
      if (!v26 || !CFNumberGetValue(v26, kCFNumberDoubleType, &context)) {
        goto LABEL_43;
      }
      int v52 = 0;
      CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(v17, @"EventRateDefaultIntervalKey");
      if (v27 && CFNumberGetValue(v27, kCFNumberIntType, &v52))
      {
        if ((context == 0.0 || Current - context < 0.5 || Current - context > (double)v52 + -0.5)
          && valuePtr <= (int)v4)
        {
          if (!valuePtr)
          {
            CFNumberRef v39 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &Current);
            if (v39)
            {
              CFNumberRef v40 = v39;
              CFDictionarySetValue(v17, @"EventRatePrevDispatchTimestampKey", v39);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 2128), v15, v17);
              CFRelease(v40);
            }
          }
          ++valuePtr;
          int v30 = 1;
          goto LABEL_55;
        }
        if (v14)
        {
LABEL_54:
          int v30 = 0;
LABEL_55:
          int v25 = v30;
          goto LABEL_56;
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s: Event %d not allowed - %@ Remaining: %2.4f DefInterval: %2.2f clientCount: %d numClients: %d", "__WiFiManagerEventIsRateDispatchable", 14, v13, Current - (context + (double)v52), (double)v52, valuePtr, v4 message];
        }
        uint64_t v29 = v28;
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"__WiFiManagerEventIsRateDispatchable: ERROR: default interval not set"];
        }
        uint64_t v29 = v33;
      }
      goto LABEL_54;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null eventDict" args:("__WiFiManagerEventIsRateDispatchable", NULL)];
    }
  }
  double v44 = CFAbsoluteTimeGetCurrent();
  double Current = v44;
  double v45 = *(double *)(v3 + 2136);
  BOOL v46 = v45 == 0.0;
  double v47 = v44 - v45;
  if (!v46 && v47 >= 0.5 && v47 <= 4.5)
  {
    int v30 = 0;
  }
  else
  {
    if (v6) {
      *(double *)(v3 + 2136) = v44;
    }
    int v30 = 1;
  }
  int v25 = v30;
  if (v15) {
    goto LABEL_60;
  }
LABEL_61:
  if (!v25) {
    goto LABEL_71;
  }
  if (!v30)
  {
    ++*(void *)(a2 + 40);
    sub_100016E28(a1, *(void *)(a2 + 8), *(const __CFDictionary **)(a2 + 16));
    return;
  }
  CFDictionaryRef v35 = *(const __CFDictionary **)(a2 + 48);
  if (v35) {
    goto LABEL_70;
  }
  uint64_t v36 = *(void *)a2;
  if (*(void *)a2)
  {
    double Current = 0.0;
    double context = *(double *)&v36;
    unint64_t v55 = 0xAAAAAAAA00000060;
    CFTypeRef cf = &Current;
    uint64_t v57 = 1;
    CFSetApplyFunction(*(CFSetRef *)(v36 + 104), (CFSetApplierFunction)sub_100020954, &context);
    if (cf)
    {
      CFDictionaryRef v35 = (const __CFDictionary *)sub_100016E34(kCFAllocatorDefault, cf);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (v35)
      {
        *(void *)(a2 + 48) = v35;
LABEL_70:
        sub_100016E28(a1, *(void *)(a2 + 8), v35);
        goto LABEL_71;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null serializedEventData" : @"__WiFiManagerEventCopyCoalescedUndispatchedEventData"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null data.arg" args:("__WiFiManagerEventCopyCoalescedUndispatchedEventData", NULL)];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager" args:("__WiFiManagerEventCopyCoalescedUndispatchedEventData", nil)];
    }
  }
  *(void *)(a2 + 48) = 0;
LABEL_71:
  uint64_t v37 = *(void *)(a2 + 40) + 1;
  *(void *)(a2 + 40) = v37;
  if (v37 == *(void *)(a2 + 24))
  {
    if (v30) {
      sub_1000232EC(*(void *)a2, 14);
    }
    CFNumberRef v38 = *(const void **)(a2 + 48);
    if (v38)
    {
      CFRelease(v38);
      *(void *)(a2 + 48) = 0;
    }
  }
}

void sub_10001684C(uint64_t a1, uint64_t a2, unsigned int a3, const __CFDictionary *a4)
{
  if (a1
    && (CFStringRef v8 = *(const __CFString **)(a1 + 64)) != 0
    && (CFComparisonResult v9 = CFStringCompare(v8, @"SpringBoard", 0), a3 == 1)
    && v9 == kCFCompareEqualTo)
  {
    unsigned int Value = CFDictionaryGetValue(a4, @"LINK_CHANGED_IS_LINKDOWN");
    if (CFDictionaryGetValue(a4, @"LINKDOWN_REASON_CODE") == 7)
    {
      *(_WORD *)(a1 + 180) = 256;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "link recovery started, suppressing transient UI state for %d seconds", 4);
      }
      CFDataRef v12 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a4);
      uint64_t v13 = sub_100016E18(a2);
      char v14 = (const void *)sub_100016E20(v13);
      if (v14)
      {
        CFDataRef v15 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, v14);
        CFDataRef v16 = v15;
        if (v15)
        {
          BytePtr = CFDataGetBytePtr(v15);
          CFIndex Length = CFDataGetLength(v16);
          if (!v12) {
            goto LABEL_49;
          }
LABEL_36:
          CFNumberRef v40 = CFDataGetBytePtr(v12);
          CFIndex v41 = CFDataGetLength(v12);
LABEL_50:
          dispatch_time_t v49 = dispatch_time(0, 4000000000);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10005D8D0;
          block[3] = &unk_10023F7E0;
          void block[4] = a1;
          void block[5] = BytePtr;
          int v51 = 1;
          void block[6] = Length;
          void block[7] = v40;
          block[8] = v41;
          dispatch_after(v49, (dispatch_queue_t)qword_10027DD88, block);
          if (v12) {
            CFRelease(v12);
          }
          if (v16) {
            CFRelease(v16);
          }
          return;
        }
        CFIndex Length = 0;
        BytePtr = 0;
        if (v12) {
          goto LABEL_36;
        }
      }
      else
      {
        CFIndex Length = 0;
        BytePtr = 0;
        CFDataRef v16 = 0;
        if (v12) {
          goto LABEL_36;
        }
      }
LABEL_49:
      CFNumberRef v40 = 0;
      CFIndex v41 = 0;
      goto LABEL_50;
    }
    if (!Value && *(unsigned char *)(a1 + 181)) {
      *(unsigned char *)(a1 + 180) = 1;
    }
  }
  else if (a3 <= 0x2C)
  {
    if (((1 << a3) & 0x100000060004) != 0)
    {
      unint64_t v19 = 1 << a3;
      goto LABEL_21;
    }
    if (((1 << a3) & 0x2200200) != 0)
    {
      unint64_t v19 = *(void *)(a1 + 128);
      goto LABEL_21;
    }
  }
  unint64_t v19 = (unint64_t)sub_100016CD4(a1, a2);
LABEL_21:
  if (((v19 >> a3) & 1) == 0) {
    return;
  }
  uint64_t v20 = a3;
  uint64_t v21 = sub_100016E18(a2);
  CFNumberRef v22 = (const void *)sub_100016E20(v21);
  if (v22)
  {
    CFDataRef v23 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, v22);
    CFDataRef v24 = v23;
    if (v23)
    {
      int v25 = CFDataGetBytePtr(v23);
      int v26 = CFDataGetLength(v24);
      if (!a4) {
        goto LABEL_41;
      }
    }
    else
    {
      int v26 = 0;
      int v25 = 0;
      if (!a4) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    int v26 = 0;
    int v25 = 0;
    CFDataRef v24 = 0;
    if (!a4) {
      goto LABEL_41;
    }
  }
  CFTypeID v27 = CFGetTypeID(a4);
  if (v27 == CFDataGetTypeID())
  {
    CFArrayRef v28 = CFDataGetBytePtr(a4);
    int v29 = CFDataGetLength(a4);
LABEL_43:
    int v44 = *(_DWORD *)(a1 + 96);
    vm_address_t v45 = (vm_address_t)v25;
    int v46 = v26;
    uint64_t v47 = v20;
    uint64_t v48 = (uint64_t)v28;
    goto LABEL_44;
  }
  if (a3 != 10)
  {
    CFDataRef v42 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a4);
    if (v42)
    {
      CFDataRef v31 = v42;
      int v43 = CFDataGetBytePtr(v42);
      int v39 = CFDataGetLength(v31);
      int v34 = *(_DWORD *)(a1 + 96);
      vm_address_t v35 = (vm_address_t)v25;
      int v36 = v26;
      uint64_t v37 = v20;
      uint64_t v38 = (uint64_t)v43;
      goto LABEL_39;
    }
LABEL_41:
    CFArrayRef v28 = 0;
    goto LABEL_42;
  }
  CFArrayRef v28 = sub_10000E5B8((uint64_t)a4);
  if (!v28)
  {
LABEL_42:
    int v29 = 0;
    goto LABEL_43;
  }
  CFDataRef v30 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, v28);
  if (!v30)
  {
    CFRelease(v28);
    int v44 = *(_DWORD *)(a1 + 96);
    vm_address_t v45 = (vm_address_t)v25;
    int v46 = v26;
    uint64_t v47 = v20;
    uint64_t v48 = 0;
    int v29 = 0;
LABEL_44:
    sub_100016FCC(v44, v45, v46, v47, v48, v29, 0);
    if (!v24) {
      return;
    }
    goto LABEL_45;
  }
  CFDataRef v31 = v30;
  CFArrayRef v32 = CFDataGetBytePtr(v30);
  int v33 = CFDataGetLength(v31);
  CFRelease(v28);
  int v34 = *(_DWORD *)(a1 + 96);
  vm_address_t v35 = (vm_address_t)v25;
  int v36 = v26;
  uint64_t v37 = v20;
  uint64_t v38 = (uint64_t)v32;
  int v39 = v33;
LABEL_39:
  sub_100016FCC(v34, v35, v36, v37, v38, v39, 0);
  CFRelease(v31);
  if (!v24) {
    return;
  }
LABEL_45:

  CFRelease(v24);
}

CFNumberRef sub_100016CD4(uint64_t a1, uint64_t a2)
{
  uint64_t valuePtr = 0;
  if (!a1 || !*(void *)(a1 + 120))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: invalid wifi client ref" :@"WiFiClientGetDeviceEventMask"];
    }
    goto LABEL_10;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null device." arguments:("WiFiClientGetDeviceEventMask", NULL)];
    }
    goto LABEL_10;
  }
  uint64_t v3 = sub_100016E18(a2);
  if (!v3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null deviceRef." args:("WiFiClientGetDeviceEventMask")];
    }
    goto LABEL_10;
  }
  uint64_t v4 = (const void *)sub_100016E20(v3);
  if (!v4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null ifName.", "WiFiClientGetDeviceEventMask"];
    }
LABEL_10:
    return 0;
  }
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 120), v4);
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

uint64_t sub_100016E18(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t sub_100016E20(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

void sub_100016E28(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

CFTypeRef sub_100016E34(CFAllocatorRef bufferAllocator, const void *a2)
{
  uint64_t v3 = CFWriteStreamCreateWithAllocatedBuffers(bufferAllocator, bufferAllocator);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  if (CFWriteStreamOpen(v3))
  {
    CFErrorRef error = 0;
    CFPropertyListWrite(a2, v4, kCFPropertyListBinaryFormat_v1_0, 0, &error);
    CFWriteStreamClose(v4);
    if (error)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: CFPropertyListCreateWithData returned with error %@", "_CFPropertyListCreateBinaryData", error message];
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100196128();
      }
      CFRelease(error);
    }
    CFTypeRef v6 = CFWriteStreamCopyProperty(v4, kCFStreamPropertyDataWritten);
  }
  else
  {
    CFTypeRef v6 = 0;
  }
  CFRelease(v4);
  return v6;
}

uint64_t sub_100016F3C(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: CATSUpdate Invalid arguments" : @"WifiDeviceManagerCatsIfname"];
    }
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 64);
  if (!v1) {
    return 0;
  }

  return sub_100016E20(v1);
}

uint64_t sub_100016FCC(int a1, vm_address_t a2, int a3, uint64_t a4, uint64_t a5, int a6, mach_msg_timeout_t timeout)
{
  vm_address_t v13 = a2;
  int v14 = 27918592;
  v15[0] = a3;
  *(void *)&v15[1] = a5;
  v15[3] = 27918592;
  v16[0] = a6;
  *(NDR_record_t *)&v16[1] = NDR_record;
  v16[3] = a3;
  uint64_t v17 = a4;
  int v18 = a6;
  *(void *)msg = 0xAAAAAAAA80000013;
  *(_DWORD *)&msg[8] = a1;
  *(_OWORD *)&msg[12] = xmmword_1001CBAA0;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  }
  uint64_t v10 = mach_msg((mach_msg_header_t *)msg, 2097169, 0x54u, 0, 0, timeout, 0);
  if (v10 == 268435460)
  {
    if (v13 != a2) {
      mig_deallocate(v13, v15[0]);
    }
    if (*(void *)&v15[1] != a5) {
      mig_deallocate(*(vm_address_t *)&v15[1], v16[0]);
    }
  }
  return v10;
}

uint64_t sub_1000170CC()
{
  if ([+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance") isCarPlay]|| [+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance") isMediaPlaying]|| [+[WiFiUserInteractionMonitor sharedInstance] isAirplayActiveOverInfra])
  {
    unsigned int v0 = 1;
  }
  else
  {
    unsigned int v0 = [+[WiFiUserInteractionMonitor sharedInstance] isRealTimeAppActive];
  }
  unsigned int v1 = [+[WiFiUserInteractionMonitor sharedInstance] isInHomeScreen];
  unsigned int v2 = [+[WiFiUserInteractionMonitor sharedInstance] isAVConferenceActive];
  if (v0) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = v1;
  }
  if (qword_10027DD68)
  {
    uint64_t v5 = "Foreground";
    if (v3) {
      uint64_t v5 = "Background";
    }
    CFTypeRef v6 = "yes";
    if (v1) {
      CFDataRef v7 = "no";
    }
    else {
      CFDataRef v7 = "yes";
    }
    if (v2) {
      CFStringRef v8 = "yes";
    }
    else {
      CFStringRef v8 = "no";
    }
    if (!v0) {
      CFTypeRef v6 = "no";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: app state for DPS action : %s isAnyAppInFG:%s isFTactive:%s isLatencySensitiveAppActive:%s", "WiFiDeviceManagerGetAppState", v5, v7, v8, v6);
  }
  int v9 = v1 ^ 1;
  if (v3) {
    int v10 = 0;
  }
  else {
    int v10 = 0x1000000;
  }
  int v11 = v10 | (v0 << 16);
  if (v2) {
    int v12 = 256;
  }
  else {
    int v12 = 0;
  }
  return v12 | v9 | v11;
}

uint64_t sub_100017274(uint64_t a1, uint64_t *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null deviceManager", "WiFiDeviceManagerSetAppNetworkUsageState")];
    }
    goto LABEL_24;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null appWiFiUsageState" args:("WiFiDeviceManagerSetAppNetworkUsageState")];
    }
LABEL_24:
    return 4294963396;
  }
  if (*(void *)(a1 + 184) == *a2) {
    return 0;
  }
  uint64_t v4 = (unsigned char *)(a1 + 5496);
  *(void *)(a1 + 184) = *a2;
  uint64_t v3 = sub_100017C54(*(void *)(a1 + 120), *a2);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (*v4 || *(unsigned char *)(a1 + 3410) || *(unsigned char *)(a1 + 5498))
  {
    CFBooleanRef v6 = kCFBooleanTrue;
    CFBooleanRef v7 = kCFBooleanFalse;
  }
  else
  {
    CFBooleanRef v6 = kCFBooleanTrue;
    CFBooleanRef v7 = kCFBooleanFalse;
    CFBooleanRef v8 = kCFBooleanFalse;
    if (![+[WiFiUserInteractionMonitor sharedInstance] isRealTimeAppActive])goto LABEL_10; {
  }
    }
  CFBooleanRef v8 = v6;
LABEL_10:
  if ([+[WiFiUserInteractionMonitor sharedInstance] isInHomeScreen])
  {
    CFBooleanRef v9 = v6;
  }
  else
  {
    CFBooleanRef v9 = v7;
  }
  CFDictionarySetValue(Mutable, @"IO80211IsInHomeScreen", v9);
  CFDictionarySetValue(Mutable, @"IO80211IsLatencySensitiveAppActive", v8);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "App state params %@", Mutable message];
  }
  uint64_t v11 = *(void *)(a1 + 64);
  int v12 = (const void *)sub_100017C48(v11);
  sub_100017D28(v11, v12, 485, 0, (uint64_t)Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v3;
}

void sub_100017494(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 2986))
  {
    if (*(_DWORD *)(a1 + 2796))
    {
      unsigned __int8 v2 = [+[WiFiUserInteractionMonitor sharedInstance] isRealTimeAppActive];
      unsigned __int8 v3 = [+[WiFiUserInteractionMonitor sharedInstance] isInHomeScreen];
      if ((v2 & 1) == 0 && ((v3 & 1) != 0 || *(int *)(a1 + 2796) >= -69))
      {
        *(unsigned char *)(a1 + 3208) = 0;
        if (!+[WiFiAIRAgent sharedInstance]
          || ![+[WiFiAIRAgent sharedInstance] isInterfaceRankingInProgress])
        {
          uint64_t v4 = sub_1000175A0(a1, 0, 0);
          if (v4)
          {
            uint64_t v5 = v4;
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4, @"%s: ERROR: %d Failed to disable rapid LQM", @"__WiFiLQAMgrSetDefaultLQMInterval", v5];
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1000175A0(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Error: %s: WiFiLQAMgrRef is NULL", @"WiFiLQAMgrSetLQMInterval", v40];
    }
    goto LABEL_43;
  }
  if (!*(unsigned char *)(a1 + 108)) {
    return 4294963393;
  }
  if (*(_DWORD *)(a1 + 104) != a2)
  {
    if (a2 != 1)
    {
      if (!a2)
      {
        CFSetRef v12 = *(const __CFSet **)(a1 + 112);
        if (a3)
        {
          vm_address_t v13 = (const void *)sub_100016E18((uint64_t)a3);
          uint64_t result = CFSetContainsValue(v12, v13);
          if (!result) {
            goto LABEL_47;
          }
          if (CFSetGetCount(*(CFSetRef *)(a1 + 112)) != 1)
          {
LABEL_46:
            uint64_t result = 0;
LABEL_47:
            if (!a3) {
              return result;
            }
LABEL_48:
            if (result) {
              return result;
            }
            CFSetRef v25 = *(const __CFSet **)(a1 + 112);
            int v26 = (const void *)sub_100016E18((uint64_t)a3);
            uint64_t result = CFSetContainsValue(v25, v26);
            goto LABEL_50;
          }
        }
        else if (CFSetGetCount(*(CFSetRef *)(a1 + 112)))
        {
          return 0;
        }
        if (!*(unsigned char *)(a1 + 3208))
        {
          if (qword_10027DD68) {
            [qword_10027DD68 WFLog:message:3, "%s: Disabling Rapid LQM", "WiFiLQAMgrSetLQMInterval"];
          }
          uint64_t result = sub_100036144(a1, 5.0);
          if (!a3) {
            return result;
          }
          goto LABEL_48;
        }
        goto LABEL_46;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, "%s: ERROR: %d is invalid LQM interval", "WiFiLQAMgrSetLQMInterval", a2];
      }
LABEL_43:
      return 4294963396;
    }
    LODWORD(valuePtr) = 0;
    value[0] = 0;
    CFArrayRef v14 = *(const __CFArray **)(a1 + 24);
    if (v14)
    {
      if (CFArrayGetCount(v14))
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
        if (!ValueAtIndex
          || !CFDictionaryGetValueIfPresent(ValueAtIndex, @"RSSI", (const void **)value)
          || !value[0])
        {
          goto LABEL_72;
        }
        CFNumberGetValue((CFNumberRef)value[0], kCFNumberIntType, &valuePtr);
        BOOL v16 = (int)valuePtr >= -69 || a3 == 0;
        BOOL v17 = 1;
        if (v16 && a3) {
          BOOL v17 = sub_10005D2B4(a3) != 0;
        }
        if (!a3 || !v17 || *(double *)(a1 + 128) == 0.0 || CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 128) > 10.0)
        {
          if (v17)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:3, "%s: Enabling Rapid LQM", "WiFiLQAMgrSetLQMInterval"];
            }
            uint64_t result = sub_100036144(a1, 1.0);
            if (a3 && !result)
            {
              CFSetRef v19 = *(const __CFSet **)(a1 + 112);
              uint64_t v20 = (const void *)sub_100016E18((uint64_t)a3);
              if (!CFSetContainsValue(v19, v20))
              {
                uint64_t v21 = *(__CFSet **)(a1 + 112);
                CFNumberRef v22 = (const void *)sub_100016E18((uint64_t)a3);
                CFSetAddValue(v21, v22);
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: Added '%@'", "WiFiLQAMgrSetLQMInterval", sub_100016E18((uint64_t)a3) message];
                }
              }
              return 0;
            }
            return result;
          }
LABEL_72:
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: ERROR: Interval change not allowed" arguments:qword_10027DD68, "WiFiLQAMgrSetLQMInterval"];
          }
          return 4294963390;
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "ERROR: %s: Too frequent LQM interval change not allowed", "__WiFiLQAMgrIsIntervalChangeAllowed")
        }
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "ERROR: %s: LQM table is empty", "__WiFiLQAMgrIsIntervalChangeAllowed");
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"ERROR: %s: LQM table is NULL" args:__WiFiLQAMgrIsIntervalChangeAllowed];
      }
    }
    goto LABEL_72;
  }
  if (!a3) {
    return 0;
  }
  CFSetRef v6 = *(const __CFSet **)(a1 + 112);
  CFBooleanRef v7 = (const void *)sub_100016E18((uint64_t)a3);
  uint64_t result = CFSetContainsValue(v6, v7);
  if (a2)
  {
    if (!result)
    {
      CFBooleanRef v9 = *(__CFSet **)(a1 + 112);
      int v10 = (const void *)sub_100016E18((uint64_t)a3);
      CFSetAddValue(v9, v10);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Added '%@'", "WiFiLQAMgrSetLQMInterval", sub_100016E18((uint64_t)a3) message];
      }
LABEL_53:
      id v30 = objc_alloc_init((Class)NSMutableString);
      long long valuePtr = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      CFDataRef v31 = *(void **)(a1 + 112);
      id v32 = [v31 countByEnumeratingWithState:&valuePtr objects:value count:16];
      if (v32)
      {
        id v33 = v32;
        uint64_t v34 = *(void *)v42;
        do
        {
          for (int i = 0; i != v33; int i = (char *)i + 1)
          {
            if (*(void *)v42 != v34) {
              objc_enumerationMutation(v31);
            }
            [v30 appendString:*(void *)(*((void *)&valuePtr + 1) + 8 * i)];
            [v30 appendString:@" "];
          }
          id v33 = [v31 countByEnumeratingWithState:&valuePtr objects:value count:16];
        }
        while (v33);
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: %ld Rapid LQM clients [%@] \n", "WiFiLQAMgrSetLQMInterval", CFSetGetCount(*(CFSetRef *)(a1 + 112)), v30 message];
      }
      if (v30) {
        CFRelease(v30);
      }
    }
    return 0;
  }
LABEL_50:
  if (result)
  {
    CFTypeID v27 = *(__CFSet **)(a1 + 112);
    CFArrayRef v28 = (const void *)sub_100016E18((uint64_t)a3);
    CFSetRemoveValue(v27, v28);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Removed '%@'", "WiFiLQAMgrSetLQMInterval", sub_100016E18((uint64_t)a3) message];
    }
    goto LABEL_53;
  }
  return result;
}

uint64_t sub_100017C48(uint64_t result)
{
  if (result) {
    return *(void *)(result + 112);
  }
  return result;
}

uint64_t sub_100017C54(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t result = 0;
    *(void *)(a1 + 168) = a2;
    if ((a2 & 0x11) != 0 && *(unsigned char *)(a1 + 2793))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4 message:"Trigger Disconnecting using Cached decision"];
      }
      *(_DWORD *)(a1 + 2828) = 10;
      sub_1000366F0(a1, 0);
      return 0;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManagerRef is NULL", @"WiFiLQAMgrSetAppNetworkUsageState"];
    }
    return 4294963396;
  }
  return result;
}

uint64_t sub_100017D28(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFBooleanRef v9 = sub_10001C9E8(a1, a2);
  if (!v9)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2 message];
    }
    return 0;
  }
  uint64_t v10 = (uint64_t)v9;
  CFTypeID v11 = CFGetTypeID(v9);
  if (v11 == sub_10001CADC())
  {
    sub_10016BCC8(v10, a3, a4, a5);
    return 0;
  }
  for (int i = 6; ; --i)
  {
    uint64_t result = Apple80211Set();
    if (result != -3905 && result != 61 && result != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  return result;
}

void sub_100018AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void *sub_100018FA8(uint64_t a1, const void *a2, int a3)
{
  CFSetRef v6 = sub_10001C1B4(*(void *)(a1 + 64), a2);
  if (v6)
  {
    CFBooleanRef v7 = v6;
    CFArrayRef v8 = sub_1000194F8(a1, v6, 1);
    if (v8)
    {
      CFBooleanRef v9 = v8;
      if (sub_10001BB2C((BOOL)v7))
      {
        CFStringRef v10 = (const __CFString *)sub_10001A43C(v7);
        uint64_t v11 = sub_10001A43C(v9);
        if (v10)
        {
          CFSetRef v12 = v11;
          if (v11)
          {
            if (!CFEqual(v10, v11))
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: updating known SSID %@ to connected SSID %@", "__WiFiDeviceManagerCopyCurrentNetwork", v12, v10 message];
              }
              sub_10001C6A4((uint64_t)v9, @"SSID_STR", v10);
              CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(kCFAllocatorDefault, v10, 0x8000100u, 0);
              if (ExternalRepresentation)
              {
                CFDataRef v15 = ExternalRepresentation;
                sub_10001C6A4((uint64_t)v9, @"SSID", ExternalRepresentation);
                CFRelease(v15);
              }
            }
          }
        }
      }
    }
    else
    {
      CFBooleanRef v9 = (void *)CFRetain(v7);
      if (!v9)
      {
        [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") setCachedCurrentNetworkRef:0 interfaceName:a2];
        [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") setCachedCurrentKnownNetworkRef:0 interfaceName:a2];
        CFBooleanRef v9 = 0;
LABEL_46:
        CFRelease(v7);
        return v9;
      }
    }
    unsigned int v16 = sub_100019AD4(a1, v9);
    sub_10001A610((uint64_t)v9, @"DiagnosticsBssEnv", v16);
    sub_10001BB8C(*(void *)(a1 + 64), v9);
    BOOL v17 = sub_10001A5A8(*(const __CFArray **)(a1 + 3704), (const void **)v9);
    if (!v17)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "WFMacRandomisation : Network <%@> not present in Private MAC Cache", sub_10001A43C(v9) message];
      }
      goto LABEL_24;
    }
    uint64_t v18 = (uint64_t)v17;
    CFSetRef v19 = sub_10001E404((uint64_t)v17, @"PRIVATE_MAC_ADDRESS");
    if (v19)
    {
      uint64_t v20 = v19;
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(v20))
      {
        sub_10001C6A4((uint64_t)v9, @"PRIVATE_MAC_ADDRESS", v20);
        CFDataRef Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v20, @"PRIVATE_MAC_ADDRESS_VALUE");
        if (!sub_10001A6DC(Value))
        {
          if (!sub_10001A680((uint64_t)v9))
          {
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            sub_10001BD9C(v18, Mutable);
            sub_10001C6A4((uint64_t)v9, @"PrivateMacInfoDictionary", Mutable);
            if (Mutable) {
              CFRelease(Mutable);
            }
          }
          goto LABEL_24;
        }
        sub_10001C6A4((uint64_t)v9, @"PrivateMacInfoDictionary", 0);
        CFBooleanRef v23 = (const __CFBoolean *)sub_10001E404(v18, @"FailureThresholdMet");
        if (v23 && (CFBooleanRef v24 = v23, v23 == kCFBooleanTrue))
        {
          if (sub_10001A680((uint64_t)v9)) {
            goto LABEL_24;
          }
          uint64_t v25 = (uint64_t)v9;
          CFBooleanRef v26 = v24;
        }
        else
        {
          uint64_t v25 = (uint64_t)v9;
          CFBooleanRef v26 = 0;
        }
        sub_10001C6A4(v25, @"FailureThresholdMet", v26);
      }
    }
LABEL_24:
    CFArrayRef v28 = sub_10001A43C(v9);
    if (v28
      && (int v29 = v28, (v30 = *(void **)(a1 + 3720)) != 0)
      && ([v30 containsObject:v29] & 1) != 0)
    {
      CFDataRef v31 = (const void **)&kCFBooleanTrue;
    }
    else
    {
      CFDataRef v31 = (const void **)&kCFBooleanFalse;
    }
    sub_10001C6A4((uint64_t)v9, @"AmbiguousSSIDs", *v31);
    [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") setCachedCurrentKnownNetworkRef:v9 interfaceName:a2];
    id v32 = sub_10001E404((uint64_t)v9, @"WPA_IE");
    id v33 = sub_10001E404((uint64_t)v7, @"WPA_IE");
    uint64_t v34 = sub_10001E404((uint64_t)v9, @"RSN_IE");
    vm_address_t v35 = sub_10001E404((uint64_t)v7, @"RSN_IE");
    int v36 = v35;
    if (a3 && v34 && v32 && v35 && !v33) {
      sub_10001C6A4((uint64_t)v9, @"WPA_IE", 0);
    }
    uint64_t v37 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v9);
    if (v37)
    {
      uint64_t v38 = v37;
      if (sub_1000199C0((uint64_t)v7)) {
        sub_10001C6A4((uint64_t)v38, @"CARPLAY_NETWORK", kCFBooleanTrue);
      }
      if (v34 && v32 && v36 && !v33) {
        sub_10001C6A4((uint64_t)v38, @"WPA_IE", 0);
      }
      [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") setCachedCurrentNetworkRef:v38 interfaceName:a2];
      CFRelease(v38);
    }
    else
    {
      [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") setCachedCurrentNetworkRef:v9 interfaceName:a2];
    }
    goto LABEL_46;
  }
  [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") setCachedCurrentNetworkRef:0 interfaceName:a2];
  [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") setCachedCurrentKnownNetworkRef:0 interfaceName:a2];
  return 0;
}

CFArrayRef sub_1000194F8(uint64_t a1, const void *a2, int a3)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: manager is NULL!", "__WiFiDeviceManagerCopyMatchingMergedNetwork"];
    }
    goto LABEL_13;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: network is NULL!", "__WiFiDeviceManagerCopyMatchingMergedNetwork")
    }
LABEL_13:
    return 0;
  }
  CFArrayRef v5 = (const __CFArray *)sub_100019950(*(void *)(a1 + 6792));
  CFArrayRef v6 = v5;
  if (!v5) {
    return v6;
  }
  v12.CFIndex length = CFArrayGetCount(v5);
  v12.id location = 0;
  FirstIndexOfCFDataRef Value = CFArrayGetFirstIndexOfValue(v6, v12, a2);
  if (FirstIndexOfValue == -1) {
    return 0;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v6, FirstIndexOfValue);
  if (!ValueAtIndex) {
    return 0;
  }
  CFArrayRef v9 = (const __CFArray *)sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)ValueAtIndex);
  CFArrayRef v6 = v9;
  if (a3 && v9) {
    sub_1000198FC((uint64_t)v9, (uint64_t)a2);
  }
  return v6;
}

_WORD *sub_10001961C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100019658((int)kCFAllocatorDefault, *(CFTypeRef *)(a2 + 16));
  result[12] = *(_WORD *)(a2 + 24);
  return result;
}

_WORD *sub_100019658(int a1, CFTypeRef cf)
{
  if (!cf) {
    goto LABEL_9;
  }
  CFTypeID v3 = CFGetTypeID(cf);
  if (v3 != CFDictionaryGetTypeID())
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: record is of type %ld!!", "__WiFiNetworkIsRecordValid", CFGetTypeID(cf)];
    }
    goto LABEL_29;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"SSID_STR");
  if (Value)
  {
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID != CFGetTypeID(Value)) {
      return 0;
    }
  }
  if (!sub_1000198A0(Value) && !CFDictionaryGetValue((CFDictionaryRef)cf, @"DomainName"))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: SSID not valid length", "__WiFiNetworkIsRecordValid", v18];
    }
LABEL_29:
    return 0;
  }
  CFArrayRef v6 = CFDictionaryGetValue((CFDictionaryRef)cf, @"SSID");
  if (v6)
  {
    CFBooleanRef v7 = v6;
    CFTypeID v8 = CFDataGetTypeID();
    if (v8 != CFGetTypeID(v7)) {
      return 0;
    }
  }
LABEL_9:
  if (!qword_10027D710) {
    pthread_once(&stru_10027CCA8, (void (*)(void))sub_1000C5C5C);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  CFStringRef v10 = (_WORD *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0;
    *(void *)(Instance + 24) = 0;
    uint64_t v11 = (CFMutableDictionaryRef *)(Instance + 16);
    if (cf) {
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, (CFDictionaryRef)cf);
    }
    else {
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    *uint64_t v11 = MutableCopy;
    if (MutableCopy)
    {
      CFBooleanRef v13 = (CFBooleanRef)CFDictionaryGetValue(MutableCopy, @"HIDDEN_NETWORK");
      if (v13) {
        BOOL v14 = v13 == kCFBooleanTrue;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14)
      {
        CFBooleanRef v15 = v13;
        CFDictionaryRemoveValue(*v11, @"HIDDEN_NETWORK");
        CFDictionarySetValue(*v11, @"UserDirected", v15);
      }
      v10[12] = -1;
      return v10;
    }
    CFRelease(v10);
    return 0;
  }
  return v10;
}

BOOL sub_1000198A0(const __CFString *a1)
{
  if (!a1) {
    return 1;
  }
  if (CFEqual(a1, @"_AppleWi-FiInternetTetheringSSID_")) {
    return 1;
  }
  return CFStringGetLength(a1) < 33;
}

void sub_1000198FC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10001B4F4((CFMutableDictionaryRef *)a1, *(CFDictionaryRef *)(a2 + 16));
    if (*(__int16 *)(a1 + 24) == -1)
    {
      int v4 = *(unsigned __int16 *)(a2 + 24);
      if (v4 != 0xFFFF) {
        *(_WORD *)(a1 + 24) = v4;
      }
    }
  }
}

uint64_t sub_100019950(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 224);
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: manager is NULL" args:("WiFiManagerGetKnownNetworks")];
  }
  return 0;
}

uint64_t sub_1000199C0(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" args:("WiFiNetworkIsCarPlay", nil)];
    }
    goto LABEL_20;
  }
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 16);
  if (!v2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network record" : @"WiFiNetworkIsCarPlay"];
    }
LABEL_20:
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v2, @"APPLE_DEVICE_IE");
  if (Value)
  {
    CFBooleanRef v4 = (CFBooleanRef)CFDictionaryGetValue(Value, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_CARPLAY");
    if (v4) {
      BOOL v5 = v4 == kCFBooleanTrue;
    }
    else {
      BOOL v5 = 0;
    }
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  CFBooleanRef v7 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"CARPLAY_NETWORK");
  if (v7)
  {
    if (CFEqual(v7, kCFBooleanTrue)) {
      return 1;
    }
    else {
      return v6;
    }
  }
  return v6;
}

uint64_t sub_100019AD4(uint64_t a1, const void *a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v5 = CFDateCreate(kCFAllocatorDefault, Current);
  CFArrayRef v6 = 0;
  uint64_t v7 = 1;
  if (!a1 || !a2) {
    goto LABEL_153;
  }
  CFStringRef v8 = (const __CFString *)sub_10001A43C(a2);
  if (*(unsigned char *)(a1 + 3788))
  {
    CFStringRef v9 = v8;
    CFStringRef v10 = CFStringCreateWithBytes(kCFAllocatorDefault, (const UInt8 *)(a1 + 3789), *(unsigned __int8 *)(a1 + 3821), 0x8000100u, 0);
    CFStringRef v11 = v10;
    if (v10) {
      BOOL v12 = v9 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      uint64_t v13 = 0;
      if (!v10) {
        goto LABEL_18;
      }
    }
    else if (CFStringCompare(v9, v10, 0))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "WiFiRoam : using bssList. Network from scan results : [%@] and network ssid : [%@]", v11, v9 message];
      }
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = 1;
    }
    CFRelease(v11);
  }
  else
  {
    uint64_t v13 = 0;
  }
LABEL_18:
  if (*(unsigned char *)(a1 + 256) && *(_DWORD *)(a1 + 268))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Roam test mode enabled. AP Environment is forced to type %d", *(unsigned int *)(a1 + 268));
    }
    if (v5) {
      CFRelease(v5);
    }
    return *(unsigned int *)(a1 + 268);
  }
  uint64_t v16 = 2592000;
  CFArrayRef v6 = sub_1000194F8(a1, a2, 1);
  if (*(unsigned char *)(a1 + 256))
  {
    uint64_t v60 = *(unsigned int *)(a1 + 260);
    unsigned int v17 = *(_DWORD *)(a1 + 264);
    if (v17) {
      uint64_t v16 = v17;
    }
    else {
      uint64_t v16 = 2592000;
    }
  }
  else
  {
    uint64_t v60 = 259200;
  }
  CFDictionaryRef v66 = sub_10001E404((uint64_t)a2, @"BSSID");
  CFArrayRef v18 = (const __CFArray *)sub_10001A6D0((uint64_t)a2);
  CFArrayRef v19 = v18;
  if (v13 || v18)
  {
    uint64_t v62 = v13;
    CFArrayRef v63 = v6;
    CFIndex v65 = a2;
    if (v18)
    {
      if (CFArrayGetCount(v18) < 1)
      {
        CFArrayRef theArray = 0;
        uint64_t v21 = 0;
        uint64_t v61 = 0;
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v61 = 0;
        uint64_t v21 = 0;
        CFIndex v22 = 0;
        CFArrayRef theArray = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, v22);
          if (ValueAtIndex)
          {
            CFDictionaryRef v24 = ValueAtIndex;
            CFDateRef Value = (const __CFDate *)CFDictionaryGetValue(ValueAtIndex, @"lastRoamed");
            if (Value)
            {
              CFDateRef v26 = Value;
              CFTypeID v27 = CFDictionaryGetValue(v24, @"BSSID");
              if (v27)
              {
                if (!v66
                  || (CFArrayRef v28 = v27, CFEqual(v66, v27))
                  || CFDateGetTimeIntervalSinceDate(v5, v26) <= (double)v16)
                {
                  CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(v24, @"CHANNEL_FLAGS");
                  if (v31)
                  {
                    valuePtr[0] = 0;
                    CFNumberGetValue(v31, kCFNumberIntType, valuePtr);
                    if ((valuePtr[0] & 8) != 0)
                    {
                      uint64_t v21 = (v21 + 1);
                    }
                    else if ((valuePtr[0] & 0x10) != 0)
                    {
                      uint64_t v61 = (v61 + 1);
                    }
                    else
                    {
                      uint64_t v20 = ((valuePtr[0] >> 13) & 1) + v20;
                    }
                  }
                }
                else
                {
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: BSSID %@ has not been seen for more than %d secs.", "__WiFiDeviceManagerEvaluateAPEnvironment", v28, v16 message];
                  }
                  CFMutableDictionaryRef Mutable = theArray;
                  if (theArray
                    || (CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks)) != 0)
                  {
                    CFArrayRef theArray = Mutable;
                    CFArrayAppendValue(Mutable, v28);
                  }
                  else
                  {
                    CFArrayRef theArray = 0;
                  }
                }
              }
            }
          }
          ++v22;
        }
        while (v22 < CFArrayGetCount(v19));
      }
      uint64_t v32 = v61;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: WiFiRoam : BSS List info for network : %@ : chanCount5GHz: [%d] chanCount24GHz: [%d] chanCount6GHz: [%d]", "__WiFiDeviceManagerEvaluateAPEnvironment", sub_10001A43C(v65), v61, v21, v20 message];
      }
      if (v62)
      {
        if (v21 <= *(unsigned __int8 *)(a1 + 3822)) {
          uint64_t v21 = *(unsigned __int8 *)(a1 + 3822);
        }
        else {
          uint64_t v21 = v21;
        }
        if (v61 <= *(unsigned __int8 *)(a1 + 3823)) {
          uint64_t v32 = *(unsigned __int8 *)(a1 + 3823);
        }
        else {
          uint64_t v32 = v61;
        }
        if (v20 <= *(unsigned __int8 *)(a1 + 3824)) {
          uint64_t v20 = *(unsigned __int8 *)(a1 + 3824);
        }
        else {
          uint64_t v20 = v20;
        }
      }
    }
    else
    {
      CFArrayRef theArray = 0;
      uint64_t v21 = *(unsigned __int8 *)(a1 + 3822);
      uint64_t v32 = *(unsigned __int8 *)(a1 + 3823);
      uint64_t v20 = *(unsigned __int8 *)(a1 + 3824);
    }
    uint64_t v34 = (v32 + v21 + v20);
    if (sub_10001C1A8(*(void *)(a1 + 64)))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: WiFiRoam : AP environment for network : %@ : bssCount: [%d] chanCount5GHz: [%d] chanCount24GHz: [%d] chanCount6GHz: [%d]", "__WiFiDeviceManagerEvaluateAPEnvironment", sub_10001A43C(v65), v34, v32, v21, v20 message];
      }
      if (v34 >= 4)
      {
        unsigned int v36 = 0;
        if (v20) {
          BOOL v37 = v21 == 0;
        }
        else {
          BOOL v37 = 1;
        }
        if (v37 || v32 == 0) {
          uint64_t v7 = 4;
        }
        else {
          uint64_t v7 = 6;
        }
        goto LABEL_129;
      }
      if (v34 == 3 || v32 > 1 || v21 > 1 || v20 >= 2)
      {
        if (v20 <= 1) {
          unsigned int v45 = 5;
        }
        else {
          unsigned int v45 = 6;
        }
        if (v20) {
          uint64_t v7 = v45;
        }
        else {
          uint64_t v7 = 4;
        }
        unsigned int v36 = 1;
LABEL_129:
        if (v20 && _os_feature_enabled_impl())
        {
          if (v7 == 4) {
            unsigned int v51 = 6;
          }
          else {
            unsigned int v51 = v7;
          }
          if (v51 == 3) {
            uint64_t v7 = 5;
          }
          else {
            uint64_t v7 = v51;
          }
        }
        goto LABEL_137;
      }
      if (v63)
      {
        double v43 = sub_10001CD28((uint64_t)v63);
        CFDateRef v44 = (const __CFDate *)sub_10001CD58(v63);
        if (v44)
        {
          double v43 = v43 + CFDateGetTimeIntervalSinceDate(v5, v44);
LABEL_123:
          if (v43 < (double)v60)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:3, "%s: WiFiRoam : network usage requirement has not been met (%f < %d). Returning learning environment.", "__WiFiDeviceManagerEvaluateAPEnvironment", *(void *)&v43, v60];
            }
            uint64_t v7 = 1;
            uint64_t v40 = v65;
            CFArrayRef v6 = v63;
            goto LABEL_150;
          }
          if (v34 == 2)
          {
            unsigned int v36 = 0;
            uint64_t v7 = 3;
          }
          else
          {
            unsigned int v36 = 0;
            if (v34 == 1) {
              uint64_t v7 = 2;
            }
            else {
              uint64_t v7 = 1;
            }
          }
          goto LABEL_129;
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Network : %@ is not in known network list", "__WiFiDeviceManagerEvaluateAPEnvironment", sub_10001A43C(v65) message];
        }
        double v43 = 0.0;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: WiFiRoam : failed to get last association date for %@.", "__WiFiDeviceManagerEvaluateAPEnvironment", sub_10001A43C(v65) message];
      }
      goto LABEL_123;
    }
    unsigned int v39 = v32;
    unsigned int v36 = 0;
    uint64_t v7 = 4;
    if (v34 > 2)
    {
LABEL_137:
      uint64_t v40 = v65;
      goto LABEL_138;
    }
    uint64_t v40 = v65;
    if (v39 > 1 || v21 > 1)
    {
LABEL_138:
      CFArrayRef v6 = v63;
      if (v63 && sub_10001CE24((uint64_t)v63))
      {
        if (v7 == 5)
        {
          uint64_t v7 = 3;
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3, @"%s: WiFiRoam : AP environment downgraded from TriBandSingleAP to DualBandSingleAp due to 6Emode", @"__WiFiDeviceManagerEvaluateAPEnvironment"];
          }
        }
        else
        {
          if (v7 != 6) {
            goto LABEL_148;
          }
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFiRoam : AP environment downgraded from TriBandMultiAP to MultiAp due to 6Emode", "__WiFiDeviceManagerEvaluateAPEnvironment");
          }
          uint64_t v7 = 4;
        }
      }
LABEL_148:
      char v54 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFStringRef v55 = sub_10001CC9C(v7);
        uint64_t v56 = sub_10001A43C(v40);
        unsigned int v57 = sub_10001CEC0(*(void *)(a1 + 64));
        [v54 WFLog:3, "%s: WiFiRoam : AP environment is %@ for %@(%@). Last applied environment is %@. Early exit ? : [%hhu]. augmented from scan results ? : [%hhu]", "__WiFiDeviceManagerEvaluateAPEnvironment", v55, v56, v66, sub_10001CC9C(v57), v36, v62 message];
      }
LABEL_150:
      goto LABEL_151;
    }
    if (v63)
    {
      double v41 = sub_10001CD28((uint64_t)v63);
      CFDateRef v42 = (const __CFDate *)sub_10001CD58(v63);
      if (v42)
      {
        double v41 = v41 + CFDateGetTimeIntervalSinceDate(v5, v42);
LABEL_108:
        if (v41 < (double)v60)
        {
          uint64_t v7 = 1;
          CFArrayRef v6 = v63;
LABEL_151:
          if (theArray)
          {
            sub_1000C9FC4((uint64_t)v40, theArray);
            CFRelease(theArray);
          }
LABEL_153:
          if (!v5) {
            goto LABEL_155;
          }
          goto LABEL_154;
        }
        if (v34 == 1)
        {
          unsigned int v36 = 0;
          uint64_t v7 = 2;
        }
        else
        {
          unsigned int v36 = 0;
          if (v21 == 1 && v39 == 1) {
            uint64_t v7 = 3;
          }
          else {
            uint64_t v7 = 1;
          }
        }
        goto LABEL_138;
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Network : %@ is not in known network list", "__WiFiDeviceManagerEvaluateAPEnvironment", sub_10001A43C(v65) message];
      }
      double v41 = 0.0;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: failed to get last association date for %@.", "__WiFiDeviceManagerEvaluateAPEnvironment", sub_10001A43C(v65) message];
    }
    goto LABEL_108;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: no known BSS for this network. Learning environment.", @"__WiFiDeviceManagerEvaluateAPEnvironment"];
  }
  uint64_t v7 = 1;
  if (!v5) {
    goto LABEL_155;
  }
LABEL_154:
  CFRelease(v5);
LABEL_155:
  if (v6) {
    CFRelease(v6);
  }
  return v7;
}

const void *sub_10001A43C(const void *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t result = sub_10001E404((uint64_t)result, @"SSID_STR");
    if (!result)
    {
      CFDataRef v2 = (const __CFData *)sub_10001E404(v1, @"SSID");
      if (v2
        && ((CFDataRef v3 = v2, (v4 = CFStringCreateFromExternalRepresentation(kCFAllocatorDefault, v2, 0x8000100u)) != 0)
         || (CFStringRef v4 = CFStringCreateFromExternalRepresentation(kCFAllocatorDefault, v3, 0)) != 0)
        || (CFStringRef v4 = CFStringCreateWithCString(kCFAllocatorDefault, "", 0x8000100u)) != 0)
      {
        sub_10001C6A4(v1, @"SSID_STR", v4);
        CFRelease(v4);
      }
      return sub_10001E404(v1, @"SSID_STR");
    }
  }
  return result;
}

void sub_10001A538(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionarySetValue(a1, a2, v5);
    CFRelease(v6);
  }
}

const void *sub_10001A5A8(const __CFArray *a1, const void **a2)
{
  uint64_t result = 0;
  uint64_t v4 = 0;
  CFIndex idx = -1;
  if (a1 && a2)
  {
    sub_10001A734(a1, a2, &idx, &v4);
    if (idx == -1) {
      return 0;
    }
    else {
      return CFArrayGetValueAtIndex(a1, idx);
    }
  }
  return result;
}

void sub_10001A610(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    sub_10001C6A4(a1, a2, v5);
    CFRelease(v6);
  }
}

CFNumberRef sub_10001A680(uint64_t a1)
{
  CFNumberRef result = (const __CFNumber *)sub_10001E404(a1, @"AP_MODE");
  if (result)
  {
    __int16 valuePtr = -21846;
    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt16Type, &valuePtr);
    if (result) {
      return (const __CFNumber *)(valuePtr == 1);
    }
  }
  return result;
}

const void *sub_10001A6D0(uint64_t a1)
{
  return sub_10001E404(a1, @"networkKnownBSSListKey");
}

CFDataRef sub_10001A6DC(const __CFData *result)
{
  if (result)
  {
    CFDataRef v1 = result;
    CFTypeID TypeID = CFDataGetTypeID();
    if (TypeID == CFGetTypeID(v1)) {
      return (const __CFData *)((*CFDataGetBytePtr(v1) >> 1) & 1);
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_10001A734(const __CFArray *a1, const void **a2, CFIndex *a3, void *a4)
{
  if (!a1) {
    goto LABEL_12;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (!Count) {
    goto LABEL_12;
  }
  if (!a2) {
    goto LABEL_18;
  }
  uint64_t v9 = Count;
  CFTypeID v10 = CFGetTypeID(a2);
  uint64_t v11 = qword_10027D710;
  if (!qword_10027D710)
  {
    pthread_once(&stru_10027CCA8, (void (*)(void))sub_1000C5C5C);
    uint64_t v11 = qword_10027D710;
  }
  if (v10 != v11)
  {
LABEL_18:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: invalid network ref" arguments:("WiFiGetPrivateMacNetworkIndices",)];
    }
    goto LABEL_12;
  }
  if (v9 < 1)
  {
LABEL_12:
    CFIndex v12 = -1;
    goto LABEL_13;
  }
  CFIndex v12 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (CFTypeRef *)CFArrayGetValueAtIndex(a1, v12);
    if (ValueAtIndex)
    {
      if (sub_10001AE0C(ValueAtIndex[2], a2[2], @"SSID_STR")) {
        break;
      }
    }
    if (v9 == ++v12) {
      goto LABEL_12;
    }
  }
LABEL_13:
  if (a4) {
    *a4 = 0;
  }
  if (a3) {
    *a3 = v12;
  }
}

uint64_t sub_10001A86C(const void *a1, const void *a2)
{
  uint64_t v3 = sub_10001AE0C(a1, a2, @"SSID_STR");
  uint64_t v4 = v3;
  if (a1)
  {
    if (v3)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a1, @"SSID_STR");
      if (Value)
      {
        if (!CFStringGetLength(Value)) {
          return 0;
        }
      }
    }
  }
  return v4;
}

BOOL sub_10001A8C8(void *a1, void *a2)
{
  uint64_t v2 = 0;
  if (a1)
  {
    uint64_t v3 = a2;
    if (a2)
    {
      uint64_t v4 = a1;
      CFTypeID v5 = CFGetTypeID(a1);
      uint64_t v6 = qword_10027D710;
      if (!qword_10027D710)
      {
        pthread_once(&stru_10027CCA8, (void (*)(void))sub_1000C5C5C);
        uint64_t v6 = qword_10027D710;
      }
      if (v5 == v6) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = 0;
      }
      CFTypeID v8 = CFGetTypeID(v3);
      uint64_t v9 = qword_10027D710;
      if (!qword_10027D710)
      {
        pthread_once(&stru_10027CCA8, (void (*)(void))sub_1000C5C5C);
        uint64_t v9 = qword_10027D710;
      }
      if (v8 == v9) {
        CFTypeID v10 = v3;
      }
      else {
        CFTypeID v10 = 0;
      }
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID != CFGetTypeID(v4))
      {
        uint64_t v12 = qword_10027D710;
        if (!qword_10027D710)
        {
          pthread_once(&stru_10027CCA8, (void (*)(void))sub_1000C5C5C);
          uint64_t v12 = qword_10027D710;
        }
        if (v12 == CFGetTypeID(v4)) {
          uint64_t v4 = (void *)v4[2];
        }
        else {
          uint64_t v4 = 0;
        }
      }
      CFTypeID v13 = CFDictionaryGetTypeID();
      if (v13 != CFGetTypeID(v3))
      {
        uint64_t v14 = qword_10027D710;
        if (!qword_10027D710)
        {
          pthread_once(&stru_10027CCA8, (void (*)(void))sub_1000C5C5C);
          uint64_t v14 = qword_10027D710;
        }
        if (v14 != CFGetTypeID(v3)) {
          return 0;
        }
        uint64_t v3 = (void *)v3[2];
      }
      uint64_t v2 = 0;
      if (v4)
      {
        if (v3)
        {
          if (sub_10001A86C(v4, v3))
          {
            if (sub_10001BB2C((BOOL)v7) && !sub_10001BB2C((BOOL)v10)
              || !sub_10001BB2C((BOOL)v7) && sub_10001BB2C((BOOL)v10))
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: SSIDs match (%@), but networks have different HS20 properties.", "__WiFiNetworkEqual", sub_10001A43C(v7) message];
              }
              return 0;
            }
            if (!sub_10001B42C((const __CFDictionary *)v4, (const __CFDictionary *)v3)
              || !sub_10001AE0C(v4, v3, @"AP_MODE"))
            {
              return 0;
            }
            int v44 = sub_10001AF70((const __CFDictionary *)v4);
            int v43 = sub_10001AF70((const __CFDictionary *)v3);
            int v15 = sub_10001B168((const __CFDictionary *)v4)
               && !sub_10001B360((const __CFDictionary *)v4)
               && sub_10001B2A8((const __CFDictionary *)v4) == 0;
            int v25 = sub_10001B168((const __CFDictionary *)v3)
               && !sub_10001B360((const __CFDictionary *)v3)
               && sub_10001B2A8((const __CFDictionary *)v3) == 0;
            unsigned int v45 = sub_10001AEF8((const __CFDictionary *)v4);
            unsigned int v46 = sub_10001AEF8((const __CFDictionary *)v3);
            CFBooleanRef Value = (CFBooleanRef)CFDictionaryGetValue((CFDictionaryRef)v4, @"ALLOW_WPA2_PSK");
            CFBooleanRef v27 = (CFBooleanRef)CFDictionaryGetValue((CFDictionaryRef)v3, @"ALLOW_WPA2_PSK");
            CFBooleanRef v28 = (CFBooleanRef)CFDictionaryGetValue((CFDictionaryRef)v4, @"ALLOW_OWE_TSN");
            unint64_t v29 = (unint64_t)CFDictionaryGetValue((CFDictionaryRef)v3, @"ALLOW_OWE_TSN");
            int v30 = ((unint64_t)Value | (unint64_t)v28) == 0;
            int v31 = ((unint64_t)v27 | v29) == 0;
            if (v30 != v31)
            {
              CFBooleanRef v32 = (const __CFBoolean *)v29;
              if (v15) {
                BOOL v33 = sub_100023F30((uint64_t)v7) != 3;
              }
              else {
                BOOL v33 = 0;
              }
              if ((v25 & 1) == 0)
              {
                CFBooleanRef v35 = kCFBooleanTrue;
                goto LABEL_72;
              }
              BOOL v42 = v33;
              int v34 = sub_100023F30((uint64_t)v10);
              BOOL v20 = Value == kCFBooleanTrue;
              CFBooleanRef v35 = kCFBooleanTrue;
              if (!v20)
              {
                BOOL v33 = v42;
                goto LABEL_72;
              }
              BOOL v33 = v42;
              if (v34 == 3)
              {
LABEL_72:
                if (v27 == v35 && v33) {
                  return 0;
                }
                if ((v30 & v15) == 1)
                {
                  int v36 = sub_100023F30((uint64_t)v7);
                  int v37 = v44;
                  if (v36 == 3) {
                    int v37 = v44 | 2;
                  }
                  int v44 = v37;
                }
                if ((v31 & v25) == 1)
                {
                  int v38 = sub_100023F30((uint64_t)v10);
                  int v39 = v43;
                  if (v38 == 3) {
                    int v39 = v43 | 2;
                  }
                  int v43 = v39;
                }
                BOOL v40 = v45 && sub_100023F30((uint64_t)v7) != 3;
                if (v46)
                {
                  int v41 = sub_100023F30((uint64_t)v10);
                  if (v28 == v35 && v41 != 3) {
                    return 0;
                  }
                }
                if (v32 == v35 && v40) {
                  return 0;
                }
LABEL_61:
                if (!v44 || !v43 || (v43 & v44) != 0) {
                  return (v44 == 0) ^ (v43 != 0);
                }
              }
              return 0;
            }
            uint64_t v2 = 0;
            if (v15 == v25 && v45 == v46) {
              goto LABEL_61;
            }
          }
          else
          {
            CFNumberRef v16 = (const __CFNumber *)sub_10001E404((uint64_t)v7, @"networkRole");
            unsigned int v17 = sub_10001EACC(v16);
            CFNumberRef v18 = (const __CFNumber *)sub_10001E404((uint64_t)v10, @"networkRole");
            unsigned int v19 = sub_10001EACC(v18);
            BOOL v20 = (v17 & 0xFFFFFFFE) == 2 || v17 == 4;
            if (v20 || v19 - 2 <= 2)
            {
              return v17 == v19;
            }
            else
            {
              uint64_t v2 = 1;
              if (!sub_1000D35E8(v7, v10, 1u))
              {
                CFStringRef v21 = (const __CFString *)sub_10001A43C(v7);
                if (CFStringGetLength(v21)) {
                  return 0;
                }
                CFStringRef v22 = (const __CFString *)sub_10001A43C(v10);
                if (CFStringGetLength(v22)) {
                  return 0;
                }
                return sub_1000C8E60((uint64_t)v7, (uint64_t)v10) != 0;
              }
            }
          }
        }
      }
    }
  }
  return v2;
}

uint64_t sub_10001AE0C(CFTypeRef cf, const void *a2, const void *a3)
{
  uint64_t result = 0;
  if (!cf || !a2) {
    return result;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 != CFGetTypeID(a2)) {
    return 0;
  }
  CFTypeID v8 = CFGetTypeID(cf);
  if (v8 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFTypeRef v9 = cf;
  if (!a3)
  {
    uint64_t v12 = a2;
    goto LABEL_12;
  }
  CFBooleanRef Value = CFDictionaryGetValue((CFDictionaryRef)cf, a3);
  uint64_t v11 = CFDictionaryGetValue((CFDictionaryRef)a2, a3);
  if (Value == v11) {
    return 1;
  }
  uint64_t v12 = v11;
  if ((Value != 0) == (v11 == 0)) {
    return 0;
  }
  CFTypeRef v9 = Value;
LABEL_12:

  return CFEqual(v9, v12);
}

CFDictionaryRef sub_10001AEF8(const __CFDictionary *a1)
{
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(a1, @"RSN_IE");
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)sub_10001B1E0(result, 18);
    if (result)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_RESULT_OWE_MULTI_SSID");
      if (sub_10001EACC(Value))
      {
        return 0;
      }
      else
      {
        CFNumberRef v4 = (const __CFNumber *)CFDictionaryGetValue(a1, @"ALLOW_OWE_TSN");
        return (const __CFDictionary *)(sub_10001EACC(v4) == 0);
      }
    }
  }
  return result;
}

uint64_t sub_10001AF70(const __CFDictionary *a1)
{
  if (sub_10001B360(a1)) {
    int v2 = 2;
  }
  else {
    int v2 = 2 * (sub_10001B2A8(a1) != 0);
  }
  if (sub_10001B018(a1)) {
    v2 |= 8u;
  }
  unsigned int v3 = v2 | (CFDictionaryGetValue(a1, @"WEP") == kCFBooleanTrue);
  if (sub_10001B168(a1)) {
    v3 |= 4u;
  }
  if (sub_10001B3C8(a1)) {
    return v3 | 0x10;
  }
  else {
    return v3;
  }
}

BOOL sub_10001B018(const __CFDictionary *a1)
{
  return sub_10001B064(a1) || CFDictionaryGetValue(a1, @"EnterpriseProfile") != 0;
}

BOOL sub_10001B064(const __CFDictionary *a1)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"WPA_IE");
  CFDictionaryRef v3 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"RSN_IE");
  if (Value && (CFTypeID TypeID = CFDictionaryGetTypeID(), sub_10005A924(TypeID, Value)))
  {
    BOOL v5 = 1;
    if (!sub_10001B1E0(Value, 1)) {
      BOOL v5 = sub_10001B1E0(Value, 0) != 0;
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    if (v3)
    {
      BOOL v5 = 1;
      if (!sub_10001B1E0(v3, 1)
        && !sub_10001B1E0(v3, 0)
        && !sub_10001B1E0(v3, 3)
        && !sub_10001B1E0(v3, 5)
        && !sub_10001B1E0(v3, 12))
      {
        return sub_10001B1E0(v3, 13) != 0;
      }
    }
  }
  return v5;
}

CFDictionaryRef sub_10001B168(const __CFDictionary *a1)
{
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(a1, @"RSN_IE");
  if (result)
  {
    CFDictionaryRef v2 = result;
    int v3 = sub_10001B1E0(result, 8);
    int v4 = sub_10001B1E0(v2, 9) | v3;
    int v5 = sub_10001B1E0(v2, 24);
    return (const __CFDictionary *)(v4 | v5 | sub_10001B1E0(v2, 25));
  }
  return result;
}

uint64_t sub_10001B1E0(const __CFDictionary *a1, int a2)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"IE_KEY_RSN_AUTHSELS");
  if (Value
    || (uint64_t result = (uint64_t)CFDictionaryGetValue(a1, @"IE_KEY_WPA_AUTHSELS"),
        (CFArrayRef Value = (const __CFArray *)result) != 0))
  {
    CFIndex Count = CFArrayGetCount(Value);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      while (1)
      {
        int valuePtr = -1431655766;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(Value, v8);
        if (CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr))
        {
          if (valuePtr == a2) {
            break;
          }
        }
        if (v7 == ++v8) {
          return 0;
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_10001B2A8(const __CFDictionary *a1)
{
  if (sub_10001B2F0(a1))
  {
    LOBYTE(result) = 1;
  }
  else
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"ALLOW_WPA2_PSK");
    LOBYTE(result) = sub_10001EACC(Value);
  }
  return result;
}

CFDictionaryRef sub_10001B2F0(const __CFDictionary *result)
{
  if (result)
  {
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, @"RSN_IE");
    if (result)
    {
      CFDictionaryRef v1 = result;
      if (sub_10001B1E0(result, 2) || sub_10001B1E0(v1, 4)) {
        return (const __CFDictionary *)1;
      }
      else {
        return (const __CFDictionary *)(sub_10001B1E0(v1, 6) != 0);
      }
    }
  }
  return result;
}

uint64_t sub_10001B360(const __CFDictionary *a1)
{
  CFNumberRef Value = CFDictionaryGetValue(a1, @"WPA_IE");
  if (!Value) {
    return 0;
  }
  CFDictionaryRef v2 = Value;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!sub_10005A924(TypeID, v2)) {
    return 0;
  }

  return sub_10001B1E0((const __CFDictionary *)v2, 2);
}

CFDictionaryRef sub_10001B3C8(const __CFDictionary *a1)
{
  CFDictionaryRef result = sub_10001B168(a1);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(a1, @"RSN_XE");
    if (result)
    {
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"IE_KEY_RSNXE_CAPS");
      if (result)
      {
        CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(result, @"RSNXE_SAE_PK");
        return (const __CFDictionary *)(CFBooleanGetValue(Value) == 1);
      }
    }
  }
  return result;
}

uint64_t sub_10001B42C(const __CFDictionary *a1, const __CFDictionary *a2)
{
  if (CFDictionaryGetValue(a1, @"forceBGScanParamsCompare") != kCFBooleanTrue
    && CFDictionaryGetValue(a2, @"forceBGScanParamsCompare") != kCFBooleanTrue)
  {
    return 1;
  }
  uint64_t result = sub_10001AE0C(a1, a2, @"BSSID");
  if (result)
  {
    uint64_t result = sub_10001AE0C(a1, a2, @"ENTRY_NETWORK");
    if (result)
    {
      return sub_10001AE0C(a1, a2, @"EXIT_NETWORK");
    }
  }
  return result;
}

void sub_10001B4F4(CFMutableDictionaryRef *a1, CFDictionaryRef theDict)
{
  if (!a1) {
    return;
  }
  if (!theDict) {
    return;
  }
  int v3 = a1;
  unsigned int Count = CFDictionaryGetCount(theDict);
  uint64_t v5 = Count;
  if (!Count) {
    return;
  }
  size_t v6 = 8 * Count;
  CFIndex v7 = (const void **)malloc_type_malloc(v6, 0x6004044C4A2DFuLL);
  BOOL v40 = (const void **)malloc_type_malloc(v6, 0xC0040B8AA526DuLL);
  CFDictionaryGetKeysAndValues(theDict, v7, v40);
  uint64_t v8 = 0;
  int v9 = 0;
  char v43 = 0;
  uint64_t v39 = v5;
  do
  {
    if (CFEqual(@"LEAKY_AP_LEARNED_DATA", (CFStringRef)v7[v8]))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Found APPLE80211KEY_LEAKY_AP_LEARNED_DATA for network %@", "WiFiNetworkMergeProperties", sub_10001A43C(v3) message];
      }
      char v43 = 1;
    }
    if (!sub_10001BB2C((BOOL)v3)
      || CFStringCompare(@"SSID_STR", (CFStringRef)v7[v8], 0)
      && CFStringCompare(@"SSID", (CFStringRef)v7[v8], 0))
    {
      if (CFEqual(@"PRIVATE_MAC_ADDRESS", (CFStringRef)v7[v8])) {
        goto LABEL_68;
      }
      if (CFEqual(@"EnterpriseProfile", (CFStringRef)v7[v8]))
      {
        CFDictionaryRef v13 = (const __CFDictionary *)sub_10001E404((uint64_t)v3, @"EnterpriseProfile");
        CFDictionaryRef Mutable = v13;
        if (!v13) {
          CFDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        }
        CFDictionaryRef v15 = (const __CFDictionary *)v40[v8];
        CFDictionaryRef v16 = sub_1000C69D0(Mutable, v15);
        CFDictionaryRef valuePtr = 0;
        value = 0;
        CFDictionaryGetValueIfPresent(v15, @"EAPClientConfiguration", (const void **)&valuePtr);
        CFDictionaryGetValueIfPresent(Mutable, @"EAPClientConfiguration", (const void **)&value);
        CFDictionaryRef v17 = valuePtr;
        if (valuePtr)
        {
          CFNumberRef v18 = value;
          unsigned int v19 = value;
          if (!value)
          {
            unsigned int v19 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            value = v19;
            CFDictionaryRef v17 = valuePtr;
          }
          CFDictionaryRef v20 = sub_1000C69D0((CFDictionaryRef)v19, v17);
          CFAllocatorRef Default = CFAllocatorGetDefault();
          MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(Default, 0, v16);
          CFDictionarySetValue(MutableCopy, @"EAPClientConfiguration", v20);
          sub_10001C6A4((uint64_t)v3, @"EnterpriseProfile", MutableCopy);
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
          if (v20) {
            CFRelease(v20);
          }
          if (!v18 && value)
          {
            CFRelease(value);
            value = 0;
          }
          if (v16) {
LABEL_40:
          }
            CFRelease(v16);
        }
        else
        {
          sub_10001C6A4((uint64_t)v3, @"EnterpriseProfile", v16);
          if (v16) {
            goto LABEL_40;
          }
        }
        if (!v13 && Mutable) {
          CFRelease(Mutable);
        }
        int v9 = 1;
        uint64_t v5 = v39;
        goto LABEL_68;
      }
      if (CFStringCompare(@"HomePropertyFromMobilewifitool", (CFStringRef)v7[v8], 0)
        && CFStringCompare(@"COLOCATED_NETWORK_SCOPE_ID", (CFStringRef)v7[v8], 0))
      {
        if (CFEqual(@"NetworkOfInterestHomeState", (CFStringRef)v7[v8]))
        {
          CFNumberRef v11 = (const __CFNumber *)v40[v8];
          LODWORD(valuePtr) = 0;
          if (sub_1000C6B08((uint64_t)v3))
          {
            if (v11) {
              CFNumberGetValue(v11, kCFNumberSInt32Type, &valuePtr);
            }
          }
        }
        if (CFEqual(@"networkKnownBSSListKey", (CFStringRef)v7[v8])
          && (CFArrayRef v23 = (const __CFArray *)sub_10001E404((uint64_t)v3, @"networkKnownBSSListKey"),
              (CFArrayRef theArray = (const __CFArray *)v40[v8]) != 0)
          && (CFArrayRef v24 = v23) != 0)
        {
          CFIndex v25 = CFArrayGetCount(theArray);
          CFIndex v26 = CFArrayGetCount(v24);
          CFMutableArrayRef v27 = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v24);
          CFIndex v41 = v25;
          if (v25 >= 1)
          {
            CFIndex v28 = 0;
            int v38 = v3;
            do
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v28);
              if (ValueAtIndex)
              {
                CFDictionaryRef v30 = ValueAtIndex;
                int v31 = v27;
                CFStringRef v32 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"BSSID");
                if (v26 < 1)
                {
LABEL_60:
                  CFMutableArrayRef v27 = v31;
                  CFArrayAppendValue(v31, v30);
                }
                else
                {
                  CFStringRef v33 = v32;
                  CFStringRef v34 = 0;
                  CFIndex v35 = 0;
                  while (1)
                  {
                    CFDictionaryRef v36 = (const __CFDictionary *)CFArrayGetValueAtIndex(v24, v35);
                    if (v36) {
                      CFStringRef v34 = (const __CFString *)CFDictionaryGetValue(v36, @"BSSID");
                    }
                    if (v34 && v33 && CFStringCompare(v34, v33, 1uLL) == kCFCompareEqualTo) {
                      break;
                    }
                    if (v26 == ++v35) {
                      goto LABEL_60;
                    }
                  }
                  CFMutableArrayRef v27 = v31;
                  CFArraySetValueAtIndex(v31, v35, v30);
                }
                int v3 = v38;
              }
              ++v28;
            }
            while (v28 != v41);
          }
          sub_10001C6A4((uint64_t)v3, @"networkKnownBSSListKey", v27);
          if (v27) {
            CFRelease(v27);
          }
          int v9 = 1;
        }
        else if (CFStringCompare(@"lastUpdated", (CFStringRef)v7[v8], 0) || v9 != 1)
        {
          CFRetain(v40[v8]);
          CFDictionarySetValue(v3[2], v7[v8], v40[v8]);
          CFRelease(v40[v8]);
        }
        uint64_t v5 = v39;
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: skip %@ merge for hs20 network %@", "WiFiNetworkMergeProperties", v7[v8], sub_10001A43C(v3) message];
      }
    }
LABEL_68:
    ++v8;
  }
  while (v8 != v5);
  if ((v43 & 1) == 0 && sub_10001E404((uint64_t)v3, @"LEAKY_AP_LEARNED_DATA"))
  {
    CFDictionaryRemoveValue(v3[2], @"LEAKY_AP_LEARNED_DATA");
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Removing APPLE80211KEY_LEAKY_AP_LEARNED_DATA for network %@", "WiFiNetworkMergeProperties", sub_10001A43C(v3) message];
    }
  }
  free(v40);
  free(v7);
}

BOOL sub_10001BB2C(BOOL result)
{
  if (result)
  {
    uint64_t v1 = result;
    return CFDictionaryGetValue(*(CFDictionaryRef *)(result + 16), @"HOTSPOT20_IE")
        || CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 16), @"DomainName") != 0;
  }
  return result;
}

void sub_10001BB8C(uint64_t a1, const void *a2)
{
  if (!a1 || !a2)
  {
    uint64_t v14 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_15;
    }
    CFNumberRef v18 = "Device";
    if (!a2) {
      CFNumberRef v18 = "Network";
    }
    unsigned int v19 = (void *)v18;
    CFDictionaryRef v15 = "%s: %s is NULL";
    goto LABEL_13;
  }
  CFStringRef v4 = (const __CFString *)sub_10001E404((uint64_t)a2, @"BSSID");
  if (!v4)
  {
    uint64_t v14 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_15;
    }
    CFDictionaryRef v15 = "%s: bssid is NULL!";
    goto LABEL_29;
  }
  CFStringRef v5 = v4;
  CFStringRef v6 = (const __CFString *)sub_10001A43C(a2);
  if (!v6)
  {
    uint64_t v14 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_15;
    }
    CFDictionaryRef v15 = "%s: ssid is NULL!";
LABEL_29:
    uint64_t v16 = 4;
    goto LABEL_14;
  }
  CFStringRef v7 = v6;
  CFStringRef v8 = *(const __CFString **)(a1 + 5880);
  if (v8)
  {
    if (CFStringCompare(v8, v5, 1uLL) == kCFCompareEqualTo)
    {
      CFStringRef v17 = *(const __CFString **)(a1 + 5888);
      if (v17)
      {
        if (CFEqual(v17, v7)) {
          return;
        }
      }
    }
    int v9 = *(const void **)(a1 + 5880);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 5880) = 0;
    }
  }
  CFTypeID v10 = *(const void **)(a1 + 5888);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 5888) = 0;
  }
  CFStringRef v11 = (const __CFString *)sub_10001E404((uint64_t)a2, @"BSSID");
  *(void *)(a1 + 5880) = CFStringCreateCopy(kCFAllocatorDefault, v11);
  CFStringRef v12 = (const __CFString *)sub_10001A43C(a2);
  *(void *)(a1 + 5888) = CFStringCreateCopy(kCFAllocatorDefault, v12);
  uint64_t v14 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    unsigned int v19 = (void *)v7;
    CFStringRef v20 = v5;
    CFDictionaryRef v15 = "%s: LastLinkedBSSInfo updated to: {%@},{%@}";
LABEL_13:
    uint64_t v16 = 3;
LABEL_14:
    [v14 WFLog:v16 message:v15 WFLogMessageTypeWiFiDeviceRecordLastLinkedBSSInfo v19 v20];
  }
LABEL_15:
}

void sub_10001BD9C(uint64_t a1, __CFDictionary *a2)
{
  if (!a1 || !a2) {
    return;
  }
  CFBooleanRef v29 = kCFBooleanFalse;
  CFBooleanRef value = (const __CFBoolean *)sub_10001E404(a1, @"MacAddressRandomisationTagMigratedNetwork");
  CFStringRef v4 = sub_10001E404(a1, @"isHs20BasedNetwork");
  CFStringRef v5 = sub_10001E404(a1, @"DomainName");
  CFBooleanRef v26 = (const __CFBoolean *)sub_10001E404(a1, @"isProfileBasedNetwork");
  CFBooleanRef v6 = (CFBooleanRef)sub_10001E404(a1, @"PrivateMacDefaultToOFF");
  int v31 = (void *)sub_10001E404(a1, @"isCarrierBundleBased");
  CFStringRef v32 = (void *)sub_10001E404(a1, @"DisplayedOperatorName");
  CFBooleanRef v28 = (const __CFBoolean *)sub_10001E404(a1, @"FeatureOffBySystemForHome");
  CFBooleanRef v27 = (const __CFBoolean *)sub_10001E404(a1, @"FeatureOFFBySystemForFrequentlyUsedNetworks");
  CFBooleanRef v7 = (const __CFBoolean *)sub_10001E404(a1, @"FeatureOffBySystemForCarplay");
  [sub_10001E404(a1, @"PrivateMacJoinDateAfterUpgrade") timeIntervalSinceNow];
  double v9 = v8;
  CFBooleanRef v25 = (const __CFBoolean *)sub_10001E404(a1, @"ExperiencedFallback");
  CFTypeID v10 = sub_10001E404(a1, @"PrivateMacControlledDevice");
  CFDictionaryRef v11 = (const __CFDictionary *)sub_10001E404(a1, @"PRIVATE_MAC_ADDRESS");
  CFStringRef v12 = v4;
  if (v11 && (CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(v11, @"PRIVATE_MAC_ADDRESS_TYPE")) != 0)
  {
    unsigned int v14 = sub_10001C140(v13);
    CFBooleanRef v15 = (CFBooleanRef)sub_10001E404(a1, @"PrivateMacPrefChanged");
    CFBooleanRef v16 = value;
    if (v15)
    {
      BOOL v17 = v14 == 1 && v15 == kCFBooleanTrue;
      CFBooleanRef v18 = kCFBooleanFalse;
      if (v17) {
        CFBooleanRef v18 = kCFBooleanTrue;
      }
      CFBooleanRef v29 = v18;
    }
  }
  else
  {
    CFBooleanRef v16 = value;
  }
  if (v10) {
    CFDictionarySetValue(a2, @"PrivateMacControlledDevice", v10);
  }
  if (v6) {
    CFDictionarySetValue(a2, @"PrivateMacDefaultToOFF", v6);
  }
  if (v5) {
    CFDictionarySetValue(a2, @"DomainName", v5);
  }
  if (v16) {
    CFDictionarySetValue(a2, @"MacAddressRandomisationTagMigratedNetwork", v16);
  }
  if (v12) {
    CFDictionarySetValue(a2, @"isHs20BasedNetwork", v12);
  }
  if (v31) {
    CFDictionarySetValue(a2, @"isCarrierBundleBased", v31);
  }
  if (v32) {
    CFDictionarySetValue(a2, @"DisplayedOperatorName", v32);
  }
  if (v7 && v7 == kCFBooleanTrue)
  {
    uint64_t v19 = 5;
  }
  else if (v28 && v28 == kCFBooleanTrue || v27 && v27 == kCFBooleanTrue)
  {
    uint64_t v19 = 4;
  }
  else
  {
    if (!v29 || v29 != kCFBooleanTrue)
    {
      if (v26)
      {
        uint64_t v19 = v26 == kCFBooleanTrue && v6 == kCFBooleanTrue && v6 != 0;
        if (!v16 || (v19 & 1) != 0) {
          goto LABEL_35;
        }
      }
      else if (!v16)
      {
        uint64_t v19 = 0;
        goto LABEL_35;
      }
      if (v25 == kCFBooleanTrue && v25 != 0 && v9 < -86400.0 && v16 == kCFBooleanTrue) {
        uint64_t v19 = 2;
      }
      else {
        uint64_t v19 = 0;
      }
      goto LABEL_35;
    }
    uint64_t v19 = 3;
  }
LABEL_35:

  sub_10001A538(a2, @"PrivateMacDisbaleReason", v19);
}

CFNumberRef sub_10001C140(const __CFNumber *result)
{
  if (result)
  {
    CFNumberRef v1 = result;
    unsigned int valuePtr = 0;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
      return (const __CFNumber *)valuePtr;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10001C1A8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 39) >> 6) & 1;
}

const void *sub_10001C1B4(uint64_t a1, const void *a2)
{
  CFDictionaryRef theDict = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "nil device", v46, v47);
    }
    goto LABEL_10;
  }
  CFStringRef v4 = *(NSObject **)(a1 + 64);
  if (v4) {
    dispatch_assert_queue_V2(v4);
  }
  CFStringRef v5 = sub_10001C9E8(a1, a2);
  if (!v5)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2, v47 message];
    }
    goto LABEL_10;
  }
  uint64_t v6 = (uint64_t)v5;
  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 == sub_10001CADC())
  {
    if (sub_100169C00(v6, &theDict)) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(unsigned char *)(a1 + 5904))
  {
    double v11 = *(double *)(a1 + 5912);
    if (v11 != 0.0 && Current > v11 && Current - v11 < 1.0)
    {
      CFDictionaryRef v12 = *(const __CFDictionary **)(a1 + 5920);
      if (v12)
      {
        CFAllocatorRef v13 = kCFAllocatorDefault;
        CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v12);
        CFDictionaryRef theDict = Copy;
        goto LABEL_34;
      }
      CFDictionaryRef theDict = 0;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: Cached current network is NULL on interface %@", "WiFiDeviceCopyCurrentNetwork", a2 message];
      }
LABEL_10:
LABEL_11:
      double v9 = 0;
      goto LABEL_75;
    }
  }
  for (int i = 6; ; --i)
  {
    int v16 = Apple80211CopyCurrentNetwork();
    int v17 = v16;
    if (v16 != -3905 && v16 != 61 && v16 != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  uint64_t v19 = *(const void **)(a1 + 5920);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 5920) = 0;
  }
  if (theDict)
  {
    CFDictionaryRef v20 = CFDictionaryCreateCopy(kCFAllocatorDefault, theDict);
    double v21 = Current;
  }
  else
  {
    CFDictionaryRef v20 = 0;
    double v21 = 0.0;
  }
  *(void *)(a1 + 5920) = v20;
  *(double *)(a1 + 5912) = v21;
  if (v17) {
    goto LABEL_11;
  }
LABEL_33:
  CFAllocatorRef v13 = kCFAllocatorDefault;
  CFDictionaryRef Copy = theDict;
LABEL_34:
  CFStringRef v22 = sub_100019658((int)v13, Copy);
  double v9 = v22;
  if (v22)
  {
    CFArrayRef v23 = (const void **)&kCFBooleanTrue;
    if (*(_DWORD *)(a1 + 5936)) {
      CFArrayRef v23 = (const void **)&kCFBooleanFalse;
    }
    sub_10001C6A4((uint64_t)v22, @"WiFiNetworkIsAutoJoined", *v23);
    if (sub_10001BB2C((BOOL)v9) && !sub_1000CCB38((uint64_t)v9))
    {
      CFBooleanRef v25 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFBooleanRef v26 = sub_10001A43C(v9);
        CFBooleanRef v27 = sub_10001A43C(*(const void **)(a1 + 5832));
        CFBooleanRef v28 = sub_1000CCB38(*(void *)(a1 + 5832));
        CFBooleanRef v29 = "present";
        if (!v28) {
          CFBooleanRef v29 = "not present";
        }
        [v25 WFLog:3, "%s: attempting to match current HS2.0 network %@ with last attempted network %@, GAS response is %s", "WiFiDeviceCopyCurrentNetwork", v26, v27, v29 message];
      }
      CFDictionaryRef v30 = *(const void **)(a1 + 5832);
      if (v30 && CFEqual(v30, v9) && sub_1000CCB38(*(void *)(a1 + 5832)))
      {
        int v31 = sub_1000CCB38(*(void *)(a1 + 5832));
        uint64_t v32 = (uint64_t)v9;
LABEL_64:
        sub_1000CCBE8(v32, v31);
      }
      else
      {
        CFArrayRef v33 = *(const __CFArray **)(a1 + 5752);
        if (v33)
        {
          CFIndex v34 = 0;
          while (v34 < CFArrayGetCount(v33))
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5752), v34);
            if (ValueAtIndex)
            {
              CFArrayRef v36 = (const __CFArray *)sub_1000C2DE8((uint64_t)ValueAtIndex);
              if (v36)
              {
                CFArrayRef v37 = v36;
                if (CFArrayGetCount(v36) >= 1)
                {
                  CFIndex v38 = 0;
                  while (1)
                  {
                    CFDictionaryRef v39 = (const __CFDictionary *)CFArrayGetValueAtIndex(v37, v38);
                    if (v39)
                    {
                      CFDictionaryRef v40 = v39;
                      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v39, @"BSSID");
                      if (Value)
                      {
                        CFStringRef v42 = Value;
                        if (sub_1000C6D70((const __CFArray *)v9))
                        {
                          CFStringRef v43 = (const __CFString *)sub_1000C6D70((const __CFArray *)v9);
                          if (CFStringCompare(v42, v43, 1uLL) == kCFCompareEqualTo) {
                            break;
                          }
                        }
                      }
                    }
                    if (++v38 >= CFArrayGetCount(v37)) {
                      goto LABEL_59;
                    }
                  }
                  uint64_t v32 = (uint64_t)v9;
                  int v31 = v40;
                  goto LABEL_64;
                }
              }
            }
LABEL_59:
            ++v34;
            CFArrayRef v33 = *(const __CFArray **)(a1 + 5752);
            if (!v33) {
              break;
            }
          }
        }
      }
    }
    if (!*(void *)(a1 + 5816)) {
      sub_10006B6D8(a1, v9, 1);
    }
    if (!*(void *)(a1 + 5824))
    {
      sub_10006B7F0(a1, (uint64_t)v9);
      int v44 = *(const void **)(a1 + 5832);
      if (v44)
      {
        CFRelease(v44);
        *(void *)(a1 + 5832) = 0;
      }
      *(void *)(a1 + 5832) = sub_10001961C((uint64_t)v13, (uint64_t)v9);
    }
    sub_10001C6A4((uint64_t)v9, @"WiFiNetworkRouterMac", *(const void **)(a1 + 4328));
    sub_10001C6A4((uint64_t)v9, @"WiFiNetworkRouterIP", *(const void **)(a1 + 4336));
    if (*(unsigned char *)(a1 + 272)) {
      sub_10001C6A4((uint64_t)v9, @"SNR", +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 280)]);
    }
    if (*(unsigned char *)(a1 + 307)) {
      sub_10001C6A4((uint64_t)v9, @"CCA", +[NSNumber numberWithUnsignedInt:*(unsigned __int8 *)(a1 + 308)]);
    }
  }
LABEL_75:
  if (theDict) {
    CFRelease(theDict);
  }
  return v9;
}

void sub_10001C6A4(uint64_t a1, void *key, const void *a3)
{
  if (a1)
  {
    CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 16);
    if (v4)
    {
      CFArrayRef v7 = (const __CFArray *)qword_10027D718;
      if (qword_10027D718
        && (v29.CFIndex length = CFArrayGetCount((CFArrayRef)qword_10027D718),
            v29.id location = 0,
            int v8 = CFArrayContainsValue(v7, v29, key),
            CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 16),
            v8))
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, @"EnterpriseProfile");
        if (!Value
          || (CFDictionaryRef v10 = Value, (MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, Value)) == 0))
        {
          BOOL v20 = 0;
          int v17 = 0;
LABEL_28:
          if (a3 && !v17)
          {
LABEL_30:
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            CFDateRef v24 = CFDateCreate(kCFAllocatorDefault, Current);
            if (v24)
            {
              CFDateRef v25 = v24;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), @"lastUpdated", v24);
              CFRelease(v25);
              if (!v20) {
                return;
              }
              goto LABEL_39;
            }
LABEL_38:
            if (!v20) {
              return;
            }
            goto LABEL_39;
          }
          char v26 = !v20;
          if (!a3) {
            char v26 = 1;
          }
          if (v26) {
            goto LABEL_38;
          }
          if (CFEqual(a3, v17))
          {
LABEL_39:
            CFRelease(v17);
            return;
          }
LABEL_27:
          BOOL v20 = 1;
          goto LABEL_30;
        }
        CFDictionaryRef v12 = MutableCopy;
        CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue(v10, @"EAPClientConfiguration");
        if (v13 && (CFDictionaryRef v14 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v13)) != 0)
        {
          CFBooleanRef v15 = v14;
          int v16 = CFDictionaryGetValue(v14, key);
          int v17 = v16;
          if (v16) {
            CFRetain(v16);
          }
          CFDictionarySetValue(v15, key, a3);
          CFDictionarySetValue(v12, @"EAPClientConfiguration", v15);
          CFRelease(v15);
        }
        else
        {
          int v17 = 0;
        }
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), @"EnterpriseProfile", v12);
        CFRelease(v12);
      }
      else
      {
        CFBooleanRef v18 = CFDictionaryGetValue(v4, key);
        int v17 = v18;
        if (v18) {
          CFRetain(v18);
        }
        uint64_t v19 = *(__CFDictionary **)(a1 + 16);
        if (a3) {
          CFDictionarySetValue(v19, key, a3);
        }
        else {
          CFDictionaryRemoveValue(v19, key);
        }
        if (CFEqual(key, @"EnterpriseProfile") && !sub_10001B064(*(const __CFDictionary **)(a1 + 16)))
        {
          unsigned int v21 = sub_10001B168(*(const __CFDictionary **)(a1 + 16));
          int v22 = sub_10001ED04(a1);
          if (v21) {
            sub_1000C6FF8(a1, 1, v22);
          }
          else {
            sub_1000C7184(a1, v22);
          }
        }
      }
      BOOL v20 = v17 != 0;
      if (!a3 && v17) {
        goto LABEL_27;
      }
      goto LABEL_28;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null network record", @"WiFiNetworkSetProperty"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" args:("WiFiNetworkSetProperty")];
    }
  }
}

const void *sub_10001C9E8(uint64_t a1, const void *a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: device is NULL" arguments:("__WiFiDeviceVirtualInterfaceGet")];
    }
    goto LABEL_13;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: interfaceName is NULL" args:__WiFiDeviceVirtualInterfaceGet];
    }
    goto LABEL_13;
  }
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 5784);
  if (!v2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: device->interfaces is NULL"];
    }
LABEL_13:
    return 0;
  }

  return CFDictionaryGetValue(v2, a2);
}

uint64_t sub_10001CADC()
{
  uint64_t result = qword_10027DC48;
  if (!qword_10027DC48)
  {
    pthread_once(&stru_10027CF48, (void (*)(void))sub_100167D38);
    return qword_10027DC48;
  }
  return result;
}

void sub_10001CBC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001CC84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

CFStringRef sub_10001CC9C(unsigned int a1)
{
  if (a1 > 6) {
    return @"Unknown";
  }
  else {
    return off_10023F648[a1];
  }
}

double sub_10001CCC0(const void *a1)
{
  double valuePtr = 0.0;
  double v1 = 0.0;
  if (a1)
  {
    CFTypeID v3 = CFGetTypeID(a1);
    if (v3 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, &valuePtr);
      return valuePtr;
    }
  }
  return v1;
}

double sub_10001CD28(uint64_t a1)
{
  double v1 = sub_10001E404(a1, @"networkUsage");

  return sub_10001CCC0(v1);
}

unint64_t sub_10001CD58(const void *a1)
{
  unint64_t v2 = (unint64_t)sub_10001E404((uint64_t)a1, @"lastJoined");
  unint64_t result = (unint64_t)sub_10001E404((uint64_t)a1, @"lastAutoJoined");
  if (v2 | result)
  {
    CFDateRef v5 = (const __CFDate *)result;
    if (!result) {
      unint64_t result = v2;
    }
    if (v2 && v5)
    {
      if (CFDateCompare((CFDateRef)v2, v5, 0) == kCFCompareGreaterThan) {
        return v2;
      }
      else {
        return (unint64_t)v5;
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Network %@ Both autojoin and user join dates are NULL", sub_10001A43C(a1) message];
    }
    return 0;
  }
  return result;
}

void *sub_10001CE24(uint64_t a1)
{
  if (a1)
  {
    unint64_t result = (void *)sub_10001E404(a1, CWFCoreWiFiSpecificAttributesKey);
    if (result) {
      return [(objc_msgSend(objc_msgSend(result, "objectForKey:", CWFNetworkProfilePropertyDisable6EModeKey), "integerValue") == (id)2);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkIs6EModeOff")];
    }
    return 0;
  }
  return result;
}

uint64_t sub_10001CEC0(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 5944);
  }
  return result;
}

void *sub_10001CECC(CFDictionaryRef *a1)
{
  if (!a1 || !sub_10001E534())
  {
    CFDictionaryRef v83 = 0;
    goto LABEL_141;
  }
  id v2 = objc_alloc_init((Class)sub_10001E534());
  [v2 setSSID:sub_10001F928(a1) context];
  sub_10001BB2C((BOOL)a1);
  [v2 setSupportedSecurityTypes:0];
  CFDictionaryRef v83 = v2;
  if (!sub_10001FC6C((BOOL)a1))
  {
    if (sub_10001EA00((uint64_t)a1))
    {
      uint64_t v6 = v2;
      unint64_t v7 = 768;
    }
    else
    {
      if (!sub_10001AEF8(a1[2]))
      {
        if (CFDictionaryGetValue(a1[2], @"WEP") == kCFBooleanTrue)
        {
          [v2 setSupportedSecurityTypes:([v2 supportedSecurityTypes] | 1)];
          if (sub_10001FC1C((uint64_t)a1))
          {
            unsigned int v21 = v2;
            uint64_t v22 = 5;
          }
          else
          {
            int v78 = (void *)sub_10001E404((uint64_t)a1, @"WEP_AUTH_Flags");
            if (!v78) {
              goto LABEL_14;
            }
            unsigned __int8 v79 = v78;
            unsigned __int8 v80 = [v78 intValue];
            [v79 intValue];
            unsigned __int8 v81 = [v79 intValue];
            if (v80)
            {
              if ((v81 & 4) == 0) {
                goto LABEL_14;
              }
              unsigned int v21 = v83;
              uint64_t v22 = 3;
            }
            else
            {
              if ((v81 & 4) == 0) {
                goto LABEL_14;
              }
              unsigned int v21 = v83;
              uint64_t v22 = 4;
            }
          }
          [v21 setWEPSubtype:v22];
        }
        goto LABEL_14;
      }
      unint64_t v7 = (unint64_t)[v2 supportedSecurityTypes] | 0x100;
      uint64_t v6 = v2;
    }
    [v6 setSupportedSecurityTypes:v7];
    goto LABEL_14;
  }
  [v2 setSupportedSecurityTypes:((unint64_t)[v2 supportedSecurityTypes] | 2)];
  unsigned int v3 = [[sub_10001E404((uint64_t)a1, @"WAPI") intValue];
  if ((~v3 & 0xB) == 0)
  {
    CFDictionaryRef v4 = v2;
    uint64_t v5 = 2;
LABEL_10:
    [v4 setWAPISubtype:v5];
    goto LABEL_14;
  }
  if ((~v3 & 7) == 0)
  {
    CFDictionaryRef v4 = v2;
    uint64_t v5 = 1;
    goto LABEL_10;
  }
LABEL_14:
  int v8 = (void *)sub_10001E404((uint64_t)a1, @"RSN_IE");
  if (v8)
  {
    id v9 = [v8 objectForKey:@"IE_KEY_RSN_AUTHSELS"];
    if (([v9 containsObject:&off_100262E48] & 1) != 0
      || [v9 containsObject:&off_100262E60])
    {
      [v83 setSupportedSecurityTypes:([v83 supportedSecurityTypes] | 0x80)];
    }
    if (([v9 containsObject:&off_100262E78] & 1) != 0
      || ([v9 containsObject:&off_100262E90] & 1) != 0
      || ([v9 containsObject:&off_100262EA8] & 1) != 0
      || [v9 containsObject:&off_100262EC0])
    {
      [v83 setSupportedSecurityTypes:([v83 supportedSecurityTypes] | 0x20)];
    }
    if (([v9 containsObject:&off_100262ED8] & 1) != 0
      || ([v9 containsObject:&off_100262EF0] & 1) != 0
      || ([v9 containsObject:&off_100262F08] & 1) != 0
      || [v9 containsObject:&off_100262F20])
    {
      [v83 setSupportedSecurityTypes:[v83 supportedSecurityTypes] | 0x40];
      if (sub_10001B2A8(a1[2])) {
        [v83 setSupportedSecurityTypes:((unint64_t)[v83 supportedSecurityTypes] | 0x10)];
      }
    }
    if (([v9 containsObject:&off_100262F38] & 1) != 0
      || ([v9 containsObject:&off_100262F50] & 1) != 0
      || [v9 containsObject:&off_100262F68])
    {
      [v83 setSupportedSecurityTypes:[v83 supportedSecurityTypes] | 0x10];
    }
  }
  CFDictionaryRef v10 = (void *)sub_10001E404((uint64_t)a1, @"WPA_IE");
  if (v10)
  {
    id v11 = [v10 objectForKey:@"IE_KEY_WPA_AUTHSELS"];
    if (([v11 containsObject:&off_100262E78] & 1) != 0
      || [v11 containsObject:&off_100262E90])
    {
      [v83 setSupportedSecurityTypes:((unint64_t)[v83 supportedSecurityTypes] | 8)];
    }
    if ([v11 containsObject:&off_100262F38]) {
      [v83 setSupportedSecurityTypes:[v83 supportedSecurityTypes] | 4];
    }
  }
  if (![v83 supportedSecurityTypes]) {
    [v83 setSupportedSecurityTypes:512];
  }
  if (&_CNForgetSSID)
  {
    id v12 = +[NSMutableDictionary dictionary];
    [v12 setObject:sub_10001E404((uint64_t)a1, kCNSCaptiveNetworkProperty) forKeyedSubscript:kCNSCaptiveNetworkProperty];
    [v12 setObject:sub_10001E404((uint64_t)a1, kCNSCaptivePortalAPIProperty) forKeyedSubscript:kCNSCaptivePortalAPIProperty];
    [v12 setObject:sub_10001E404((uint64_t)a1, kCNSCaptivePortalUserPortalURLProperty) forKeyedSubscript:kCNSCaptivePortalUserPortalURLProperty];
    [v12 setObject:sub_10001E404((uint64_t)a1, kCNSCaptivePortalVenueInfoURLProperty) forKeyedSubscript:kCNSCaptivePortalVenueInfoURLProperty];
    [v12 setObject:sub_10001E404((uint64_t)a1, kCNSCaptivePortalCanExtendSessionProperty) forKeyedSubscript:kCNSCaptivePortalCanExtendSessionProperty];
    [v12 setObject:sub_10001E404((uint64_t)a1, kCNSCaptivePortalSessionExpirationProperty) forKeyedSubscript:kCNSCaptivePortalSessionExpirationProperty];
    [v12 setObject:sub_10001E404((uint64_t)a1, kCNSNetworkWasCaptiveProperty) forKeyedSubscript:kCNSNetworkWasCaptiveProperty];
    [v12 setObject:sub_10001E404((uint64_t)a1, kCNSDisabledByCaptiveProperty) forKeyedSubscript:kCNSDisabledByCaptiveProperty];
    [v12 setObject:sub_10001E404((uint64_t)a1, kCNSCaptiveBypassProperty) forKeyedSubscript:kCNSCaptiveBypassProperty];
    [v12 setObject:sub_10001E404((uint64_t)a1, kCNSIsWhitelistedCaptiveNetworkProperty) forKeyedSubscript:kCNSIsWhitelistedCaptiveNetworkProperty];
    [v12 setObject:sub_10001E404((uint64_t)a1, kCNSWhitelistedCaptiveNetworkProbeDateProperty) forKeyedSubscript:kCNSWhitelistedCaptiveNetworkProbeDateProperty];
    [v12 setObject:sub_10001E404((uint64_t)a1, kCNSBrokenBackhaulPromptDateProperty) forKeyedSubscript:kCNSBrokenBackhaulPromptDateProperty];
    [v12 setObject:sub_10001E404((uint64_t)a1, kCNSBrokenBackhaulUseCellularProperty) forKeyedSubscript:kCNSBrokenBackhaulUseCellularProperty];
    [v12 setObject:sub_10001E404((uint64_t)a1, kCNSCaptiveNetworkWebSheetLoginDateProperty) forKeyedSubscript:kCNSCaptiveNetworkWebSheetLoginDateProperty];
    [v12 setObject:sub_10001E404((uint64_t)a1, @"DisabledByCaptiveReason") forKeyedSubscript:@"DisabledByCaptiveReason"];
    if ([v12 count]) {
      id v13 = v12;
    }
    else {
      id v13 = 0;
    }
    [v83 setCaptiveProfile:v13];
  }
  if (sub_10001EE48(a1)) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = 2;
  }
  [v83 setHiddenState:v14];
  if (sub_10001EBFC((uint64_t)a1) == 2) {
    [v83 setPasswordSharingDisabled:1];
  }
  [v83 setPayloadUUID:sub_10001E404((uint64_t)a1, @"PayloadUUID")];
  [v83 setAutoJoinDisabled:!sub_10001EBB4((uint64_t)a1)];
  unsigned int v15 = sub_10001ED58((uint64_t)a1);
  if (v15 == 1) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = 2 * (v15 == 2);
  }
  [v83 setLowDataMode:v16];
  [v83 setBundleID:sub_10001E404((uint64_t)a1, @"BundleIdentifier")];
  [v83 setLastJoinedBySystemAt:sub_10001E404((uint64_t)a1, @"lastAutoJoined")];
  [v83 setLastJoinedByUserAt:sub_10001E404((uint64_t)a1, @"lastJoined")];
  unsigned int v17 = [[sub_10001E404((uint64_t)a1, @"WiFiManagerKnownNetworksEventType") intValue];
  unsigned int v18 = [[sub_10001E404((uint64_t)a1, @"WiFiNetworkAttributeSource") intValue];
  unsigned int v19 = [[(id)sub_10001E404((uint64_t)a1, @"NetworkOriginator") intValue];
  uint64_t v20 = 10;
  switch(v19)
  {
    case 0u:
      if (!objc_msgSend(v83, "bundleID", 10)) {
        goto LABEL_58;
      }
      uint64_t v20 = 14;
      break;
    case 1u:
    case 6u:
      uint64_t v20 = 15;
      break;
    case 2u:
      break;
    default:
LABEL_58:
      uint64_t v20 = 17;
      if (v19 != 3 && v18 != 1)
      {
        if (v19 == 4)
        {
          uint64_t v20 = 7;
        }
        else if (v19 == 5)
        {
          uint64_t v20 = 12;
        }
        else if (objc_msgSend(v83, "payloadUUID", 17))
        {
LABEL_69:
          uint64_t v20 = 9;
        }
        else
        {
          uint64_t v20 = 16;
          if (v17 != 14 && v18 != 2)
          {
            uint64_t v20 = 5;
            switch(v17)
            {
              case 1u:
                goto LABEL_70;
              case 2u:
              case 4u:
              case 7u:
              case 8u:
              case 9u:
              case 0xAu:
                goto LABEL_154;
              case 3u:
                uint64_t v20 = 8;
                break;
              case 5u:
                uint64_t v20 = 13;
                break;
              case 6u:
                uint64_t v20 = 6;
                break;
              case 0xBu:
                uint64_t v20 = 11;
                break;
              default:
                if (v17 == 17) {
                  goto LABEL_69;
                }
LABEL_154:
                uint64_t v20 = 0;
                break;
            }
          }
        }
      }
      break;
  }
LABEL_70:
  [v83 setAddReason:v20];
  [v83 setAddedAt:sub_10001E404((uint64_t)a1, @"addedAt")];
  [v83 setUpdatedAt:sub_10001E404((uint64_t)a1, @"lastUpdated")];
  [v83 setEAPProfile:[sub_10001E404((uint64_t)a1, @"EnterpriseProfile") objectForKeyedSubscript:@"EAPClientConfiguration"]];
  [v83 setDomainName:sub_10001E404((uint64_t)a1, @"DomainName")];
  [v83 setDisplayedOperatorName:sub_10001E404((uint64_t)a1, @"DisplayedOperatorName")];
  [v83 setServiceProviderRoamingEnabled:sub_10001E404((uint64_t)a1, @"SPRoaming") != kCFBooleanFalse];
  [v83 setCellularNetworkInfo:sub_10001E404((uint64_t)a1, @"MCCandMNC")];
  [v83 setNAIRealmNameList:sub_10001E404((uint64_t)a1, @"NaiRealmName")];
  [v83 setRoamingConsortiumList:sub_10001E404((uint64_t)a1, @"RoamingConsortiumOIs")];
  [v83 setUserPreferredNetworkNames:sub_10001E404((uint64_t)a1, @"userPreferredNetworkNames")];
  [v83 setUserPreferredPasspointDomains:sub_10001E404((uint64_t)a1, @"userPreferredPasspointDomains")];
  [v83 setNetworkGroupID:sub_10001E404((uint64_t)a1, @"networkGroupID")];
  [v83 setNetworkGroupPriority:[sub_10001E404((uint64_t)a1, @"networkGroupPriority") unsignedIntegerValue]];
  [v83 setLastDiscoveredAt:sub_10001E404((uint64_t)a1, @"discoveredAt")];
  CFArrayRef v23 = (void *)sub_10001E404((uint64_t)a1, @"TransitionDisabledFlags");
  if (v23) {
    [v83 setTransitionDisabledFlags:[v23 unsignedIntegerValue]];
  }
  [v83 setStandalone6G:sub_10001E404((uint64_t)a1, @"Standalone") == kCFBooleanTrue];
  CFArrayRef v24 = (const __CFArray *)sub_10001E404((uint64_t)a1, @"networkKnownBSSListKey");
  if (v24)
  {
    CFArrayRef v25 = v24;
    if (CFArrayGetCount(v24))
    {
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      obCFIndex j = v25;
      id v87 = [(__CFArray *)v25 countByEnumeratingWithState:&v97 objects:v114 count:16];
      if (v87)
      {
        id v88 = 0;
        uint64_t v86 = *(void *)v98;
        uint64_t v85 = CWFCoreWiFiSpecificAttributesKey;
        do
        {
          for (int i = 0; i != v87; int i = (char *)i + 1)
          {
            if (*(void *)v98 != v86) {
              objc_enumerationMutation(obj);
            }
            CFBooleanRef v27 = *(void **)(*((void *)&v97 + 1) + 8 * i);
            double v106 = 0;
            uint64_t v107 = (uint64_t)&v106;
            uint64_t v108 = 0x3052000000;
            double v109 = sub_100022CF8;
            v110 = sub_100022C00;
            CFBooleanRef v28 = (objc_class *)qword_10027D738;
            uint64_t v111 = qword_10027D738;
            if (!qword_10027D738)
            {
              v101 = _NSConcreteStackBlock;
              uint64_t v102 = 3221225472;
              uint64_t v103 = (uint64_t)sub_1000D3A10;
              double v104 = &unk_100240920;
              uint64_t v105 = &v106;
              sub_1000D3A10((uint64_t)&v101);
              CFBooleanRef v28 = *(objc_class **)(v107 + 40);
            }
            _Block_object_dispose(&v106, 8);
            id v29 = objc_alloc_init(v28);
            [v27 objectForKeyedSubscript:@"BSSID"];
            [v29 setBSSID:CWFCorrectEthernetAddressString()];
            id v30 = [v27 objectForKeyedSubscript:@"CHANNEL"];
            id v31 = [v27 objectForKeyedSubscript:@"CHANNEL_FLAGS"];
            if (v30)
            {
              uint64_t v32 = v31;
              if (v31)
              {
                id v33 = objc_alloc_init((Class)sub_10001E628());
                [v33 setChannel:[v30 integerValue]];
                [v33 setFlags:[v32 unsignedIntegerValue]];
                [v29 setChannel:v33];
              }
            }
            if ([v29 BSSID] && objc_msgSend(v29, "channel"))
            {
              [v29 setLastAssociatedAt:[v27 objectForKeyedSubscript:@"lastRoamed"]];
              id v34 = [v27 objectForKeyedSubscript:@"networkLocnLat"];
              id v35 = [v27 objectForKeyedSubscript:@"networkLocnLong"];
              id v36 = [v27 objectForKeyedSubscript:@"networkLocnAccuracy"];
              id v37 = [v27 objectForKeyedSubscript:@"networkLocnTimestamp"];
              if (v34)
              {
                if (v35)
                {
                  if (v36)
                  {
                    id v38 = v37;
                    if (v37)
                    {
                      double v106 = 0;
                      uint64_t v107 = (uint64_t)&v106;
                      uint64_t v108 = 0x3052000000;
                      double v109 = sub_100022CF8;
                      v110 = sub_100022C00;
                      CFDictionaryRef v39 = (objc_class *)qword_10027D748;
                      uint64_t v111 = qword_10027D748;
                      if (!qword_10027D748)
                      {
                        v101 = _NSConcreteStackBlock;
                        uint64_t v102 = 3221225472;
                        uint64_t v103 = (uint64_t)sub_1000D3AC0;
                        double v104 = &unk_100240920;
                        uint64_t v105 = &v106;
                        sub_1000D3AC0((uint64_t)&v101);
                        CFDictionaryRef v39 = *(objc_class **)(v107 + 40);
                      }
                      _Block_object_dispose(&v106, 8);
                      id v40 = [v39 alloc];
                      [v34 doubleValue];
                      double v42 = v41;
                      [v35 doubleValue];
                      double v44 = v43;
                      v101 = 0;
                      uint64_t v102 = (uint64_t)&v101;
                      uint64_t v103 = 0x2020000000;
                      unsigned int v45 = (double (*)(double, double))off_10027D758;
                      double v104 = off_10027D758;
                      if (!off_10027D758)
                      {
                        double v106 = _NSConcreteStackBlock;
                        uint64_t v107 = 3221225472;
                        uint64_t v108 = (uint64_t)sub_1000D3C84;
                        double v109 = (void (*)(uint64_t, uint64_t))&unk_100240920;
                        v110 = (void (*)(uint64_t))&v101;
                        uint64_t v46 = (void *)sub_1000D3B18();
                        uint64_t v47 = dlsym(v46, "CLLocationCoordinate2DMake");
                        *(void *)(*((void *)v110 + 1) + 24) = v47;
                        off_10027D758 = *(_UNKNOWN **)(*((void *)v110 + 1) + 24);
                        unsigned int v45 = *(double (**)(double, double))(v102 + 24);
                      }
                      _Block_object_dispose(&v101, 8);
                      if (!v45) {
                        sub_1001968B4();
                      }
                      double v48 = v45(v42, v44);
                      double v50 = v49;
                      [v36 doubleValue];
                      [v29 setLocation:[v40 initWithCoordinate:v38 altitude:v48 horizontalAccuracy:v50 verticalAccuracy:0.0 timestamp:v51]];
                    }
                  }
                }
              }
              id v52 = [v27 objectForKeyedSubscript:@"colocated2GHzRNRChannel"];
              id v53 = [v27 objectForKeyedSubscript:@"colocated2GHzRNRChannelFlags"];
              if (v52)
              {
                char v54 = v53;
                if (v53)
                {
                  id v55 = objc_alloc_init((Class)sub_10001E628());
                  [v55 setChannel:[v52 integerValue]];
                  [v55 setFlags:[v54 unsignedIntegerValue]];
                  [v29 setColocated2GHzRNRChannel:v55];
                }
              }
              id v56 = [v27 objectForKeyedSubscript:@"colocated5GHzRNRChannel"];
              id v57 = [v27 objectForKeyedSubscript:@"colocated5GHzRNRChannelFlags"];
              if (v56)
              {
                int v58 = v57;
                if (v57)
                {
                  id v59 = objc_alloc_init((Class)sub_10001E628());
                  [v59 setChannel:[v56 integerValue]];
                  [v59 setFlags:[v58 unsignedIntegerValue]];
                  [v29 setColocated5GHzRNRChannel:v59];
                }
              }
              [v29 setAWDLRealTimeModeTimestamp:[v27 objectForKeyedSubscript:@"AWDLRealTimeModeTimestamp"]];
              [v29 setIPv4NetworkSignature:[v27 objectForKeyedSubscript:@"IPv4NetworkSignature"]];
              [v29 setIPv6NetworkSignature:[v27 objectForKeyedSubscript:@"IPv6NetworkSignature"]];
              [v29 setDHCPServerID:[v27 objectForKeyedSubscript:@"DHCPServerID"]];
              [v29 setDHCPv6ServerID:[v27 objectForKeyedSubscript:@"DHCPv6ServerID"]];
              id v60 = +[NSMutableDictionary dictionary];
              long long v95 = 0u;
              long long v96 = 0u;
              long long v93 = 0u;
              long long v94 = 0u;
              id v61 = +[CWFBSS supportedOSSpecificKeys];
              id v62 = [v61 countByEnumeratingWithState:&v93 objects:v113 count:16];
              if (v62)
              {
                uint64_t v63 = *(void *)v94;
                do
                {
                  for (CFIndex j = 0; j != v62; CFIndex j = (char *)j + 1)
                  {
                    if (*(void *)v94 != v63) {
                      objc_enumerationMutation(v61);
                    }
                    [v60 setObject:sub_10001E404((uint64_t)a1, *(void **)(*((void *)&v93 + 1) + 8 * (void)j)) forKeyedSubscript:*(void *)(*((void *)&v93 + 1) + 8 * (void)j)];
                  }
                  id v62 = [v61 countByEnumeratingWithState:&v93 objects:v113 count:16];
                }
                while (v62);
              }
              if ([v60 count]) {
                id v65 = v60;
              }
              else {
                id v65 = 0;
              }
              [v29 setOSSpecificAttributes:v65];
              [v29 setCoreWiFiSpecificAttributes:[v27 objectForKeyedSubscript:v85]];
              id v66 = v88;
              if (!v88) {
                id v66 = +[NSMutableSet set];
              }
              id v88 = v66;
              [v66 addObject:v29];
            }
          }
          id v87 = [(__CFArray *)obj countByEnumeratingWithState:&v97 objects:v114 count:16];
        }
        while (v87);
      }
      else
      {
        id v88 = 0;
      }
      [v83 setBSSList:v88];
    }
  }
  [v83 setPrivacyProxyEnabled:sub_10001ED9C((uint64_t)a1)];
  [v83 setPrivacyProxyBlockedReason:sub_10001E404((uint64_t)a1, @"PrivacyProxyBlockedReason")];
  if (sub_10001E404((uint64_t)a1, @"WiFiNetworkAttributeIsMoving"))
  {
    uint64_t v67 = sub_10001E404((uint64_t)a1, @"WiFiNetworkAttributeIsMoving");
    if (CFEqual(v67, kCFBooleanTrue)) {
      uint64_t v68 = 1;
    }
    else {
      uint64_t v68 = 2;
    }
  }
  else
  {
    uint64_t v68 = 0;
  }
  [v83 setMovingAttribute:v68];
  if (sub_10001E404((uint64_t)a1, @"WiFiNetworkAttributeIsPublic"))
  {
    uint64_t v69 = sub_10001E404((uint64_t)a1, @"WiFiNetworkAttributeIsPublic");
    if (CFEqual(v69, kCFBooleanTrue)) {
      uint64_t v70 = 1;
    }
    else {
      uint64_t v70 = 2;
    }
  }
  else
  {
    uint64_t v70 = 0;
  }
  [v83 setPublicAttribute:v70];
  [v83 setCarplayUUID:sub_10001E404((uint64_t)a1, @"CARPLAY_UUID")];
  [v83 setCarplayNetwork:sub_1000199C0((uint64_t)a1) != 0];
  [v83 setPersonalHotspot:sub_10001E71C((uint64_t)a1) != 0];
  [v83 setNANServiceID:sub_10001E404((uint64_t)a1, @"WiFiNetworkNANServiceID")];
  [v83 setPublicAirPlayNetwork:sub_10001E954((uint64_t)a1) != 0];
  [v83 setDNSHeuristicsFilteredNetwork:sub_10001E404((uint64_t)a1, @"FilteredNetwork") == kCFBooleanTrue];
  [v83 setDNSHeuristicsFailureStateInfo:sub_10001E404((uint64_t)a1, @"DNSFailures")];
  id v71 = +[NSMutableDictionary dictionary];
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  id v72 = +[CWFNetworkProfile supportedOSSpecificKeys];
  id v73 = [v72 countByEnumeratingWithState:&v89 objects:v112 count:16];
  if (v73)
  {
    uint64_t v74 = *(void *)v90;
    do
    {
      for (int k = 0; k != v73; int k = (char *)k + 1)
      {
        if (*(void *)v90 != v74) {
          objc_enumerationMutation(v72);
        }
        [v71 setObject:sub_10001E404((uint64_t)a1, *(void **)(*((void *)&v89 + 1) + 8 * (void)k)) forKeyedSubscript:*(void *)(*((void *)&v89 + 1) + 8 * (void)k)];
      }
      id v73 = [v72 countByEnumeratingWithState:&v89 objects:v112 count:16];
    }
    while (v73);
  }
  if ([v71 count]) {
    id v76 = v71;
  }
  else {
    id v76 = 0;
  }
  [v83 setOSSpecificAttributes:v76];
  [v83 setCoreWiFiSpecificAttributes:sub_10001E404((uint64_t)a1, CWFCoreWiFiSpecificAttributesKey)];
LABEL_141:
  return v83;
}

void sub_10001E3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

const void *sub_10001E404(uint64_t a1, void *key)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkGetProperty")];
    }
    goto LABEL_14;
  }
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 16);
  if (!v3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network record", "WiFiNetworkGetProperty")];
    }
LABEL_14:
    return 0;
  }
  CFArrayRef v5 = (const __CFArray *)qword_10027D718;
  if (qword_10027D718)
  {
    v11.CFIndex length = CFArrayGetCount((CFArrayRef)qword_10027D718);
    v11.id location = 0;
    int v6 = CFArrayContainsValue(v5, v11, key);
    CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 16);
    if (v6)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v3, @"EnterpriseProfile");
      if (!Value) {
        return 0;
      }
      CFDictionaryRef v3 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"EAPClientConfiguration");
      if (!v3) {
        return 0;
      }
    }
  }

  return CFDictionaryGetValue(v3, key);
}

uint64_t sub_10001E534()
{
  uint64_t v3 = 0;
  CFDictionaryRef v4 = &v3;
  uint64_t v5 = 0x3052000000;
  int v6 = sub_100022CF8;
  unint64_t v7 = sub_100022C00;
  uint64_t v0 = qword_10027D728;
  uint64_t v8 = qword_10027D728;
  if (!qword_10027D728)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1000D384C;
    v2[3] = &unk_100240920;
    void v2[4] = &v3;
    sub_1000D384C((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10001E610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001E628()
{
  uint64_t v3 = 0;
  CFDictionaryRef v4 = &v3;
  uint64_t v5 = 0x3052000000;
  int v6 = sub_100022CF8;
  unint64_t v7 = sub_100022C00;
  uint64_t v0 = qword_10027D740;
  uint64_t v8 = qword_10027D740;
  if (!qword_10027D740)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1000D3A68;
    v2[3] = &unk_100240920;
    void v2[4] = &v3;
    sub_1000D3A68((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10001E704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001E71C(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null network." arguments:v16];
    }
    goto LABEL_11;
  }
  id v2 = *(const void **)(a1 + 16);
  if (!v2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: null network record.", "WiFiNetworkIsApplePersonalHotspot", v16];
    }
    goto LABEL_11;
  }
  CFTypeID v3 = CFGetTypeID(v2);
  if (v3 != CFDictionaryGetTypeID())
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: bad record type %ld", "WiFiNetworkIsApplePersonalHotspot", CFGetTypeID(*(CFTypeRef *)(a1 + 16))];
    }
    unint64_t v7 = v8;
    goto LABEL_15;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"IsPersonalHotspot");
  if (Value && CFEqual(Value, kCFBooleanTrue)) {
    return 1;
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"IE");
  if (!result) {
    return result;
  }
  id v9 = (const void *)result;
  CFTypeID v10 = CFGetTypeID((CFTypeRef)result);
  if (v10 != CFDataGetTypeID())
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: bad ieList type %ld", @"__WiFiNetworkIsAppleDevice", CFGetTypeID(v9)];
    }
LABEL_11:
    unint64_t v7 = v6;
LABEL_15:
    return 0;
  }
  uint64_t result = (uint64_t)CFDataGetBytePtr((CFDataRef)v9);
  if (result)
  {
    CFRange v11 = (unsigned __int8 *)result;
    CFIndex Length = CFDataGetLength((CFDataRef)v9);
    if (Length << 32 >= 1)
    {
      uint64_t v13 = 0;
      while (*v11 != 221 || v11[1] != 10 || *(_DWORD *)(v11 + 2) != 116528896 || *(_DWORD *)(v11 + 5) != 50397446)
      {
        uint64_t v15 = v11[1] + 2;
        v13 += v15;
        v11 += v15;
        if (v13 >= (int)Length) {
          return 0;
        }
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_10001E954(uint64_t a1)
{
  if (a1)
  {
    uint64_t result = CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"PublicAirPlayNetwork");
    if (result) {
      return sub_10001E404(a1, @"PublicAirPlayNetwork") == kCFBooleanTrue;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" args:("WiFiNetworkIsPublicAirPlayNetwork", 0x0)];
    }
    return 0;
  }
  return result;
}

uint64_t sub_10001EA00(uint64_t result)
{
  if (result)
  {
    CFDictionaryRef v1 = *(const __CFDictionary **)(result + 16);
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v1, @"SCAN_RESULT_OWE_MULTI_SSID");
    LOBYTE(result) = sub_10001EACC(Value);
    if (!(_BYTE)result)
    {
      CFNumberRef v3 = (const __CFNumber *)CFDictionaryGetValue(v1, @"ALLOW_OWE_TSN");
      LOBYTE(result) = sub_10001EACC(v3);
    }
  }
  return result;
}

uint64_t sub_10001EA5C(const void *a1)
{
  CFNumberRef v2 = (const __CFNumber *)sub_10001E404((uint64_t)a1, @"HIDDEN_NETWORK");
  unsigned int v3 = sub_10001EACC(v2);
  if (v3) {
    goto LABEL_2;
  }
  CFNumberRef v5 = (const __CFNumber *)sub_10001E404((uint64_t)a1, @"scanWasDirected");
  if (!sub_10001EACC(v5))
  {
    unsigned int v3 = sub_10001EB5C(a1);
LABEL_2:
    unsigned int v4 = 0;
    goto LABEL_5;
  }
  unsigned int v3 = 0;
  unsigned int v4 = 1;
LABEL_5:
  if (v3) {
    return 1;
  }
  else {
    return v4;
  }
}

CFNumberRef sub_10001EACC(const __CFNumber *result)
{
  uint64_t valuePtr = 0;
  if (result)
  {
    CFNumberRef v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
      return (const __CFNumber *)valuePtr;
    }
    else
    {
      CFTypeID v3 = CFGetTypeID(v1);
      if (v3 == CFBooleanGetTypeID()) {
        return (const __CFNumber *)(kCFBooleanTrue == v1);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_10001EB5C(const void *a1)
{
  CFNumberRef v1 = sub_10001A43C(a1);
  if (v1 && (CFTypeID v2 = v1, !CFEqual(v1, &stru_100248240))) {
    return CFEqual(v2, @" ") != 0;
  }
  else {
    return 1;
  }
}

BOOL sub_10001EBB4(uint64_t a1)
{
  CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"enabled");
  return !Value || CFEqual(Value, kCFBooleanFalse) == 0;
}

uint64_t sub_10001EBFC(uint64_t a1)
{
  unsigned int valuePtr = 3;
  CFNumberRef v2 = (const __CFNumber *)sub_10001E404(a1, @"ShareMode");
  if (v2) {
    CFNumberGetValue(v2, kCFNumberIntType, &valuePtr);
  }
  BOOL v3 = a1 && CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"PayloadUUID");
  BOOL v4 = sub_10001FC1C(a1);
  int v5 = sub_10001ED04(a1);
  if (a1)
  {
    BOOL v6 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"WEP") == kCFBooleanTrue;
    BOOL v7 = sub_10001B168(*(const __CFDictionary **)(a1 + 16)) == 0;
  }
  else
  {
    BOOL v6 = 0;
    BOOL v7 = 1;
  }
  if (v5) {
    BOOL v7 = 0;
  }
  if (v4) {
    BOOL v7 = 1;
  }
  if (v3 || v6 || v7) {
    return 1;
  }
  else {
    return valuePtr;
  }
}

uint64_t sub_10001ED04(uint64_t result)
{
  if (result)
  {
    CFDictionaryRef v1 = *(const __CFDictionary **)(result + 16);
    if (sub_10001B360(v1))
    {
      return 1;
    }
    else
    {
      return sub_10001B2A8(v1);
    }
  }
  return result;
}

CFNumberRef sub_10001ED58(uint64_t a1)
{
  unsigned int valuePtr = 0;
  CFNumberRef result = (const __CFNumber *)sub_10001E404(a1, @"SaveDataMode");
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

BOOL sub_10001ED9C(uint64_t a1)
{
  if (a1)
  {
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), @"PrivacyProxyEnabled")) {
      return sub_10001E404(a1, @"PrivacyProxyEnabled") == kCFBooleanTrue;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkGetPrivacyProxyEnabled")];
    }
  }
  return 1;
}

uint64_t sub_10001EE48(const void *a1)
{
  CFNumberRef v2 = (const __CFNumber *)sub_10001E404((uint64_t)a1, @"UserDirected");
  uint64_t v3 = sub_10001EACC(v2);
  if (v3 || !sub_10001EA5C(a1))
  {
    unsigned int v4 = 0;
  }
  else
  {
    sub_10001C6A4((uint64_t)a1, @"UserDirected", kCFBooleanTrue);
    unsigned int v4 = 1;
  }
  if (v3) {
    return 1;
  }
  else {
    return v4;
  }
}

void sub_10001F06C(uint64_t a1)
{
  if (CWFGetOSLog()) {
    CFNumberRef v2 = CWFGetOSLog();
  }
  else {
    CFNumberRef v2 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v12 = 138543618;
    uint64_t v13 = v3;
    __int16 v14 = 1024;
    qos_class_t v15 = qos_class_self();
    LODWORD(v11) = 18;
    CFTypeID v10 = &v12;
    _os_log_send_and_compose_impl();
  }
  uint64_t v5 = (uint64_t)[*(id *)(a1 + 32) type];
  if (v5 <= 144)
  {
    if (v5 <= 35)
    {
      switch(v5)
      {
        case 6:
          [*(id *)(a1 + 40) __setPower:XPCConnection:*(void *)(a1 + 32) XPCConnection:*(void *)(a1 + 48)];
          break;
        case 23:
          [*(id *)(a1 + 40) __setCompanionCountryCode: *(void *)(a1 + 32)];
          break;
        case 35:
          [*(id *)(a1 + 40) __getThermalIndex:*(void *)(a1 + 32)];
          break;
        default:
LABEL_25:
          if (CWFGetOSLog()) {
            BOOL v7 = CWFGetOSLog();
          }
          else {
            BOOL v7 = &_os_log_default;
          }
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v8 = *(void *)(a1 + 32);
            int v12 = 138412290;
            uint64_t v13 = v8;
            LODWORD(v11) = 12;
            CFTypeID v10 = &v12;
            _os_log_send_and_compose_impl();
          }
          if (objc_msgSend(*(id *)(a1 + 32), "response", v10, v11))
          {
            id v9 = (void (**)(id, NSError *, void))[*(id *)(a1 + 32) response];
            v9[2](v9, +[NSError errorWithDomain:NSPOSIXErrorDomain code:45 userInfo:0], 0);
          }
          break;
      }
    }
    else
    {
      switch(v5)
      {
        case '6':
          [*(id *)(a1 + 40) __getKnownNetworkProfiles:*(void *)(a1 + 32)];
          break;
        case '7':
        case '8':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '[':
        case '\\':
        case ']':
        case '^':
        case 'b':
        case 'c':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
          goto LABEL_25;
        case '9':
          [*(id *)(a1 + 40) __getCurrentScanResult:*(void *)(a1 + 32)];
          break;
        case ':':
          [*(id *)(a1 + 40) __getCurrentNetworkProfile:XPCConnection:*(void *)(a1 + 32) XPCConnection:*(void *)(a1 + 48)];
          break;
        case ';':
          [*(id *)(a1 + 40) __addKnownNetworkProfile:*(void *)(a1 + 32)];
          break;
        case '<':
          [*(id *)(a1 + 40) __removeKnownNetworkProfile:*(void *)(a1 + 32)];
          break;
        case '=':
          [*(id *)(a1 + 40) __updateKnownNetworkProfile:XPCConnection:*(void *)(a1 + 32) XPCConnection:*(void *)(a1 + 48)];
          break;
        case '>':
          [*(id *)(a1 + 40) __associate:XPCConnection:*(void *)(a1 + 32) :*(void *)(a1 + 48)];
          break;
        case '?':
          [*(id *)(a1 + 40) __disassociate:XPCConnection:*(void *)(a1 + 32) *(void *)(a1 + 48)];
          break;
        case '@':
          [*(id *)(a1 + 40) __performScan:XPCConnection:*(void *)(a1 + 32) *(void *)(a1 + 48)];
          break;
        case 'A':
          [*(id *)(a1 + 40) __performANQP:*(void *)(a1 + 32)];
          break;
        case 'B':
          [*(id *)(a1 + 40) __startAWDLPeerAssistedDiscovery:XPCConnection:*(void *)(a1 + 32) XPCConnection:*(void *)(a1 + 48)];
          break;
        case 'C':
          [*(id *)(a1 + 40) __stopAWDLPeerAssistedDiscovery:XPCConnection:*(void *)(a1 + 32) XPCConnection:*(void *)(a1 + 48)];
          break;
        case 'D':
          [*(id *)(a1 + 40) __setRangeable:*(void *)(a1 + 32)];
          break;
        case 'E':
          [*(id *)(a1 + 40) __performRanging:*(void *)(a1 + 32)];
          break;
        case 'O':
        case '_':
        case 'a':
LABEL_12:
          if (objc_msgSend(*(id *)(a1 + 32), "response", v10, v11))
          {
            id v6 = [*(id *)(a1 + 32) response];
            (*((void (**)(id, void, void))v6 + 2))(v6, 0, 0);
          }
          break;
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'l':
        case 'o':
          [*(id *)(a1 + 40) __handleActivity:*(void *)(a1 + 32)];
          break;
        default:
          if (v5 != 36) {
            goto LABEL_25;
          }
          [*(id *)(a1 + 40) __setThermalIndex:*(void *)(a1 + 32)];
          break;
      }
    }
  }
  else
  {
    switch(v5)
    {
      case 174:
        [*(id *)(a1 + 40) __setRangingIdentifier:*(void *)(a1 + 32)];
        break;
      case 175:
      case 176:
      case 178:
      case 185:
      case 186:
      case 187:
      case 192:
      case 196:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 222:
      case 223:
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 239:
      case 240:
      case 241:
      case 242:
        goto LABEL_25;
      case 177:
        [*(id *)(a1 + 40) __performAutoJoin:*(void *)(a1 + 32)];
        break;
      case 179:
        [*(id *)(a1 + 40) __getUserAutoJoinState:*(void *)(a1 + 32)];
        break;
      case 180:
        [*(id *)(a1 + 40) __setUserAutoJoinState:XPCConnection:*(void *)(a1 + 32) XPCConnection:*(void *)(a1 + 48)];
        break;
      case 181:
      case 184:
      case 191:
      case 237:
        goto LABEL_12;
      case 182:
        [*(id *)(a1 + 40) __getAutoHotspotMode:*(void *)(a1 + 32)];
        break;
      case 183:
        [*(id *)(a1 + 40) __setAutoHotspotMode:*(void *)(a1 + 32)];
        break;
      case 188:
        [*(id *)(a1 + 40) __performSensing:*(void *)(a1 + 32)];
        break;
      case 189:
        [*(id *)(a1 + 40) __getUserSettings:*(void *)(a1 + 32)];
        break;
      case 190:
        [*(id *)(a1 + 40) __setUserSettings:*(void *)(a1 + 32)];
        break;
      case 193:
        [*(id *)(a1 + 40) __getAutoJoinMetric:*(void *)(a1 + 32)];
        break;
      case 194:
        [*(id *)(a1 + 40) __getAutoJoinStatistics:*(void *)(a1 + 32)];
        break;
      case 195:
        [*(id *)(a1 + 40) __resetAutoJoinStatistics:*(void *)(a1 + 32)];
        break;
      case 197:
        [*(id *)(a1 + 40) __getCountryBandSupport:*(void *)(a1 + 32)];
        break;
      case 198:
        [*(id *)(a1 + 40) __addKnownBSS:*(void *)(a1 + 32)];
        break;
      case 199:
        [*(id *)(a1 + 40) __removeKnownBSS:*(void *)(a1 + 32)];
        break;
      case 200:
        [*(id *)(a1 + 40) __updateKnownBSS:*(void *)(a1 + 32)];
        break;
      case 201:
        [*(id *)(a1 + 40) __getPassword:*(void *)(a1 + 32)];
        break;
      case 202:
        [*(id *)(a1 + 40) __setPassword:*(void *)(a1 + 32)];
        break;
      case 218:
        [*(id *)(a1 + 40) __setBlockedBands:*(void *)(a1 + 32)];
        break;
      case 219:
        [*(id *)(a1 + 40) __updateSoftAPBand:XPCConnection:*(void *)(a1 + 32) XPCConnection:*(void *)(a1 + 48)];
        break;
      case 220:
        [*(id *)(a1 + 40) __startHostAPMode:XPCConnection:*(void *)(a1 + 32) XPCConnection:*(void *)(a1 + 48)];
        break;
      case 221:
        [*(id *)(a1 + 40) __stopHostAPMode:XPCConnection:*(void *)(a1 + 32) XPCConnection:*(void *)(a1 + 48)];
        break;
      case 236:
        [*(id *)(a1 + 40) __getWiFiAssistOverrideReasons:*(void *)(a1 + 32)];
        break;
      case 238:
        [*(id *)(a1 + 40) __performNDD:XPCConnection:*(void *)(a1 + 32) XPCConnection:*(void *)(a1 + 48)];
        break;
      case 243:
        [*(id *)(a1 + 40) __getBackgroundScanConfiguration:*(void *)(a1 + 32)];
        break;
      case 244:
        [*(id *)(a1 + 40) __setBackgroundScanConfiguration:*(void *)(a1 + 32)];
        break;
      case 245:
        [*(id *)(a1 + 40) __getAutoJoinDenyList:*(void *)(a1 + 32)];
        break;
      case 246:
        [*(id *)(a1 + 40) __setAutoJoinDenyList:*(void *)(a1 + 32)];
        break;
      case 247:
        [*(id *)(a1 + 40) __clearAutoJoinDenyList:*(void *)(a1 + 32)];
        break;
      default:
        if (v5 != 145) {
          goto LABEL_25;
        }
        [*(id *)(a1 + 40) __getDeviceUUID:*(void *)(a1 + 32)];
        break;
    }
  }
}

CFStringRef sub_10001F928(const void *a1)
{
  CFStringRef result = (const __CFString *)sub_10001E404((uint64_t)a1, @"SSID");
  if (!result)
  {
    CFStringRef result = (const __CFString *)sub_10001A43C(a1);
    if (result)
    {
      CFStringRef result = (const __CFString *)CFStringCreateExternalRepresentation(kCFAllocatorDefault, result, 0x8000100u, 0);
      if (result)
      {
        CFStringRef v3 = result;
        sub_10001C6A4((uint64_t)a1, @"SSID", result);
        CFRelease(v3);
        return (const __CFString *)sub_10001E404((uint64_t)a1, @"SSID");
      }
    }
  }
  return result;
}

void sub_10001FA30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001FAA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10001FABC(uint64_t a1)
{
  if (sub_10001E404(a1, @"DomainName")) {
    return 0;
  }
  if (sub_10001E404(a1, @"IsHotspot") == kCFBooleanTrue
    || &_CNForgetSSID
    && CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), kCNSCaptiveNetworkProperty) == kCFBooleanTrue
    || sub_10001FB80(a1, 18)
    || sub_10001FB80(a1, 23))
  {
    return 1;
  }
  return sub_10001FD04(a1) != 0;
}

CFArrayRef sub_10001FB80(uint64_t a1, int a2)
{
  int valuePtr = a2;
  CFArrayRef result = (const __CFArray *)sub_10001FC1C(a1);
  if (result)
  {
    CFArrayRef result = (const __CFArray *)sub_10001E404(a1, @"AcceptEAPTypes");
    if (result)
    {
      CFArrayRef v4 = result;
      CFArrayRef result = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
      if (result)
      {
        uint64_t v5 = result;
        v8.CFIndex length = CFArrayGetCount(v4);
        v8.id location = 0;
        FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v4, v8, v5);
        CFRelease(v5);
        return (const __CFArray *)(FirstIndexOfValue != -1);
      }
    }
  }
  return result;
}

BOOL sub_10001FC1C(uint64_t a1)
{
  if (!a1 || sub_10001FC6C(a1)) {
    return 0;
  }
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 16);

  return sub_10001B018(v3);
}

BOOL sub_10001FC6C(BOOL result)
{
  if (result)
  {
    uint64_t v1 = result;
    return (~sub_10001FCC4(*(const __CFDictionary **)(result + 16)) & 0xB) == 0
        || (~sub_10001FCC4(*(const __CFDictionary **)(v1 + 16)) & 7) == 0;
  }
  return result;
}

CFNumberRef sub_10001FCC4(const __CFDictionary *a1)
{
  unsigned int valuePtr = 0;
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(a1, @"WAPI");
  if (result)
  {
    CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

CFDictionaryRef sub_10001FD04(uint64_t a1)
{
  char valuePtr = 0;
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"11U_INTERWORKING_IE");
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"INTERWORKING_ACCESS_NETWORK_TYPE");
    if (result)
    {
      CFNumberGetValue(result, kCFNumberSInt8Type, &valuePtr);
      return (const __CFDictionary *)((valuePtr & 0xFE) == 2);
    }
  }
  return result;
}

void sub_10001FD64(uint64_t a1, unint64_t a2)
{
  uint64_t v55 = 0;
  id v56 = &v55;
  uint64_t v57 = 0x3052000000;
  int v58 = sub_100022D18;
  id v59 = sub_100022C14;
  uint64_t v60 = 0;
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AUTO-JOIN: Triggered (trigger=%d)", "WiFiDeviceManagerStartAutoJoinAndReply", a2);
  }
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: UAJM feature is disabled" args:("WiFiDeviceManagerStartAutoJoinAndReply")];
    }
    goto LABEL_98;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is null" arguments:@"WiFiDeviceManagerStartAutoJoinAndReply"];
    }
    goto LABEL_98;
  }
  if (!*(void *)(a1 + 8824))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: UAJM is null" arguments:["WiFiDeviceManagerStartAutoJoinAndReply"]];
    }
    goto LABEL_98;
  }
  sub_100017C48(*(void *)(a1 + 64));
  if (*(_DWORD *)(a1 + 20) != 1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: WiFi is OFF", "WiFiDeviceManagerStartAutoJoinAndReply")];
    }
LABEL_98:
    CFDictionaryRef Mutable = 0;
    goto LABEL_77;
  }
  CFDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!Mutable) {
    goto LABEL_77;
  }
  uint64_t v6 = *(void *)(a1 + 64);
  BOOL v7 = (const void *)sub_100017C48(v6);
  uint64_t v8 = sub_10000DE34(v6, v7, Mutable);
  if (v8)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: FAILED to get supported channels (err=%d)", @"WiFiDeviceManagerStartAutoJoinAndReply", v8];
    }
    goto LABEL_103;
  }
  if (!CFArrayGetCount(Mutable))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Supported channels list is empty" arguments:@"WiFiDeviceManagerStartAutoJoinAndReply"];
    }
LABEL_103:
    goto LABEL_77;
  }
  id v9 = +[NSMutableArray array];
  for (CFIndex i = 0; i < CFArrayGetCount(Mutable); ++i)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, i);
    if (ValueAtIndex)
    {
      id v12 = objc_alloc_init((Class)CWFChannel);
      [v12 setChannel:[((id)CFDictionaryGetValue(ValueAtIndex, @"SUP_CHANNEL")) unsignedIntegerValue]];
      [v12 setFlags:[(id)CFDictionaryGetValue(ValueAtIndex, @"SUP_CHANNEL_FLAGS") unsignedIntegerValue]];
      [v9 addObject:v12];
    }
  }
  if ([v9 count]) {
    [*(id *)(a1 + 8824) setSupportedChannels:[+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v9)]];
  }
  id v13 = sub_100005420(a1);
  __int16 v14 = *(void **)(a1 + 8824);
  if (v13)
  {
    [v14 setLocation:v13];
  }
  else
  {
    [v14 setLocation:0];
  }
  sub_100005AFC(a1);
  id v15 = objc_alloc_init((Class)CWFAutoJoinParameters);
  [v15 setMode:1];
  [v15 setTrigger:a2];
  if (*(_DWORD *)(a1 + 5520) != 1 && !*(unsigned char *)(a1 + 5504))
  {
    if (*(unsigned char *)(a1 + 8821) && *(void *)(a1 + 8800))
    {
      id v23 = objc_alloc_init((Class)CWFChannel);
      [v23 setChannel:[*(id *)(a1 + 8800) unsignedIntegerValue]];
      [v23 setFlags:[*(id *)(a1 + 8808) unsignedIntValue]];
      id v63 = v23;
      CFArrayRef v24 = +[NSArray arrayWithObjects:&v63 count:1];
    }
    else
    {
      if (a2 != 55)
      {
LABEL_34:
        uint64_t v22 = 0;
        goto LABEL_37;
      }
      id v25 = objc_alloc_init((Class)CWFChannel);
      [v25 setChannel:*(unsigned int *)(a1 + 3840)];
      [v25 setFlags:*(unsigned int *)(a1 + 3844)];
      id v62 = v25;
      CFArrayRef v24 = +[NSArray arrayWithObjects:&v62 count:1];
    }
    uint64_t v22 = v24;
    goto LABEL_37;
  }
  id v16 = [[objc_msgSend(*(id *)(a1 + 8824), "knownNetworks") anyObject];
  if (![v16 isCarPlay]) {
    goto LABEL_34;
  }
  unsigned int v17 = sub_1000CFEE8(v16, 0);
  unsigned int v18 = v17;
  if (!v17) {
    goto LABEL_34;
  }
  unsigned int v19 = (void *)sub_10001E404((uint64_t)v17, @"CHANNEL");
  if (v19)
  {
    id v20 = objc_alloc_init((Class)CWFChannel);
    [v20 setChannel:[v19 unsignedIntegerValue]];
    unsigned int v21 = sub_100023F30((uint64_t)v18) - 1;
    if (v21 < 3) {
      [v20 setFlags:dword_1001CB988[v21]];
    }
    id v64 = v20;
    uint64_t v22 = +[NSArray arrayWithObjects:&v64 count:1];
  }
  else
  {
    uint64_t v22 = 0;
  }
  CFRelease(v18);
LABEL_37:
  [v15 setPreferredChannels:v22];
  if (a2 == 7
    || a2 == 2 && ((uint64_t v26 = *(void *)(a1 + 3512)) == 0 || !sub_1000199C0(v26) || !*(unsigned char *)(a1 + 992)))
  {
    CFBooleanRef v27 = (CFDictionaryRef *)sub_1000194F8(a1, *(const void **)(a1 + 3512), 0);
    CFBooleanRef v28 = v27;
    if (v27)
    {
      id v29 = sub_10001CECC(v27);
      if (v29)
      {
        if (sub_10001E71C((uint64_t)v28)
          && (sub_10001E404((uint64_t)v28, @"WiFiInstantHotspotJoining") == kCFBooleanTrue
           || sub_10001E404((uint64_t)v28, @"WiFiAutoInstantHotspotJoining") == kCFBooleanTrue))
        {
          CFNumberRef v30 = (const __CFNumber *)sub_10001E404((uint64_t)v28, @"lastDisconnectReasonKey");
          if (v30)
          {
            CFDateRef v31 = (const __CFDate *)sub_10001E404((uint64_t)v28, @"lastDisconnectTimestampKey");
            if (v31)
            {
              unsigned int valuePtr = -1431655766;
              CFNumberGetValue(v30, kCFNumberIntType, &valuePtr);
              if (valuePtr <= 2)
              {
                double Current = CFAbsoluteTimeGetCurrent();
                if (Current - CFDateGetAbsoluteTime(v31) < 300.0)
                {
                  id v34 = v33;
                  if (qword_10027DD68)
                  {
                    id v52 = v33;
                    id v35 = sub_10001A43C(v28);
                    uint64_t v36 = valuePtr;
                    double v37 = CFAbsoluteTimeGetCurrent();
                    id v38 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"AUTOJOIN", +[NSString stringWithFormat:@"%s Previous Hotspot %@ disconnect reason %d time since linkDown %.1f", "__WiFiDeviceManagerUnifiedAutoJoinForceDirectedScanForAutoHotspotLinkDownRecovery", v35, v36, v37 - CFDateGetAbsoluteTime(v31)]) UTF8String]);
                    BOOL v39 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT);
                    id v34 = v52;
                    if (v39)
                    {
                      id v40 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v38 UTF8String]] UTF8String];
                      *(_DWORD *)buf = 136446210;
                      id v66 = v40;
                      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                      id v34 = v52;
                    }
                  }
                  [v29 setHiddenState:1];
                }
              }
            }
          }
        }
        [v15 setTargetNetworkProfile:v29];
      }
      CFRelease(v28);
    }
  }
  if (*(unsigned char *)(a1 + 3414))
  {
    uint64_t v41 = 4;
    goto LABEL_59;
  }
  if (a2 > 0x37 || ((1 << a2) & 0xC0000100000084) == 0)
  {
    if (*(_DWORD *)(a1 + 176) != 3
      && (a2 > 0x3A || ((1 << a2) & 0x630048F1C000200) == 0)
      && !CWFIsAutoJoinRetryTrigger())
    {
LABEL_60:
      if (a2 == 39) {
        *(unsigned char *)(a1 + 6616) = 1;
      }
      goto LABEL_64;
    }
    uint64_t v41 = 2;
LABEL_59:
    [v15 setMode:v41];
    goto LABEL_60;
  }
LABEL_64:
  uint64_t v42 = sub_10000D990((uint64_t)"WiFiDeviceManagerStartAutoJoinAndReply");
  CFRetain((CFTypeRef)a1);
  if (_os_feature_enabled_impl())
  {
    int v43 = sub_100024498(*(void *)(a1 + 6792));
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: prefer 6E enabled %d", "WiFiDeviceManagerStartAutoJoinAndReply", v43 == 0);
    }
    [*(id *)(a1 + 8824) setMaxCompatibilityEnabled:v43 == 0];
  }
  unsigned int v45 = *(void **)(a1 + 8824);
  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3221225472;
  v54[2] = sub_100006CA8;
  v54[3] = &unk_100241D48;
  v54[6] = a1;
  v54[7] = a2;
  v54[4] = v42;
  v54[5] = &v55;
  id v46 = [v45 performAutoJoinWithParameters:v15 reply:v54];
  v56[5] = (uint64_t)v46;
  if (v46 || (CFRelease((CFTypeRef)a1), v56[5]))
  {
    if (!*(void *)(a1 + 8872))
    {
      if ([+[WiFiUserInteractionMonitor sharedInstance] isSetupCompleted])
      {
        if (a2 <= 0x28 && ((1 << a2) & 0x10000010104) != 0)
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AUTO-JOIN: Auto-join is running (trigger=%ld), defer user-interactive scans", "__WiFiDeviceManagerUnifiedAutoJoinShouldDeferUserInteractiveScan", a2);
          }
          sub_100006E70(*(void *)(a1 + 64), 0, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@", @"AutoJoin", [(id)v56[5] UUIDString]), (CFNumberRef)0xA);
          sub_100006E70(*(void *)(a1 + 64), 9, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@", @"AutoJoin", [(id)v56[5] UUIDString]), (CFNumberRef)0xA);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AUTO-JOIN: Setup not completed, allow user-interactive scans", "__WiFiDeviceManagerUnifiedAutoJoinShouldDeferUserInteractiveScan");
        }
      }
    }
  }
LABEL_77:
  if (!v56[5])
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AUTO-JOIN: FAILED to start auto-join (trigger=%d)", "WiFiDeviceManagerStartAutoJoinAndReply", a2);
    }
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  _Block_object_dispose(&v55, 8);
}

void sub_1000208F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100020948(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_100020954(CFMutableArrayRef *a1, int *a2)
{
  switch(a2[2])
  {
    case 0:
      if (*(unsigned char *)(*(void *)a2 + 16))
      {
        *((void *)a2 + 3) = sub_1000FD8E0((uint64_t)a1);
        unsigned int v4 = sub_10011052C((uint64_t)a1);
        uint64_t v5 = *(unsigned int *)(*(void *)a2 + 316);
        if (v4 != v5)
        {
          unsigned int v6 = v4;
          if ((MGGetBoolAnswer() & 1) == 0
            && !*(void *)(*(void *)a2 + 320)
            && !*(unsigned char *)(*(void *)a2 + 1328))
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:3, "%s: device hasn't been unlocked since boot. Overriding power state to OFF.", "__WiFiManagerDeviceManagerApplier"];
            }
            uint64_t v5 = 0;
          }
          id v9 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            CFTypeID v10 = sub_10005A970(v6);
            uint64_t v11 = sub_10005A970(*(_DWORD *)(*(void *)a2 + 316));
            [v9 WFLog:3 message:@"Device power = %s and prefences power = %s.  Setting device power to %s (unlockedSinceBoot=%d)", v10, v11, sub_10005A970(v5), *(unsigned __int8 *)(*(void *)a2 + 1328)];
          }
          uint64_t v12 = sub_10011110C((uint64_t)a1, v5);
          if (v12)
          {
            uint64_t v13 = v12;
            id v15 = (void *)qword_10027DD68;
            if (qword_10027DD68)
            {
              id v16 = sub_10005A970(v6);
              [v15 WFLog:4 message:@"Unable to set power state (%s) to %s (err = %d). deviceManager=%p", v16, sub_10005A970(*(_DWORD *)(*(void *)a2 + 316)), v13, a1];
            }
            unsigned int v17 = v14;
            goto LABEL_221;
          }
        }
      }
      return;
    case 2:
      if (*(unsigned char *)(*(void *)a2 + 16))
      {
        unsigned int v18 = *(NSObject **)(*(void *)a2 + 32);
        sub_1000FDC90((uint64_t)a1, v18);
      }
      return;
    case 3:
      uint64_t v19 = *(void *)a2;
      if (*(unsigned char *)(*(void *)a2 + 1560) || *(unsigned char *)(v19 + 1504))
      {
        sub_100003EE4((uint64_t)a1, 1);
        CFArrayRef v20 = *(const __CFArray **)(*(void *)a2 + 256);
      }
      else
      {
        CFArrayRef v20 = *(const __CFArray **)(v19 + 216);
      }
      sub_100103B64((uint64_t)a1, v20);
      return;
    case 4:
      unsigned int v21 = *(const void **)(*(void *)a2 + 208);
      sub_100107184((uint64_t)a1, v21);
      return;
    case 5:
      uint64_t v22 = (int)sub_10011F404((uint64_t)a1, *(void *)(*(void *)a2 + 2504));
      goto LABEL_392;
    case 6:
      if (*(unsigned char *)(*(void *)a2 + 16) && *(unsigned char *)(*(void *)a2 + 24))
      {
        sub_1001020F0((uint64_t)a1);
      }
      return;
    case 7:
      int v23 = *(unsigned __int8 *)(*(void *)a2 + 1161);
      int v24 = *(unsigned __int8 *)(*(void *)a2 + 1176);
      int v25 = *(unsigned __int8 *)(*(void *)a2 + 1164);
      sub_10010FA58((uint64_t)a1, v23, v24, v25);
      return;
    case 8:
      CFArrayRef v26 = (const __CFArray *)*((void *)a2 + 2);
      sub_100108AD0(a1, v26, 1);
      return;
    case 9:
      uint64_t v27 = *(void *)a2;
      int v28 = *(_DWORD *)(*(void *)a2 + 1468);
      if (v28 == -1) {
        int v28 = *(_DWORD *)(v27 + 1456);
      }
      int v29 = *(_DWORD *)(v27 + 1472);
      if (v29 == -1) {
        int v29 = *(_DWORD *)(v27 + 1460);
      }
      int v30 = *(_DWORD *)(v27 + 1476);
      if (v30 == -1) {
        int v31 = *(unsigned __int8 *)(v27 + 1464);
      }
      else {
        int v31 = v30 == 1;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: current:builtInReceiver=%d,cellularTxStarted=%d,isShort=%d, overrides:builtInReceiver=%d,cellularTxStarted=%d,isShort=%d", "__WiFiManagerDeviceManagerApplier", *(unsigned int *)(*(void *)a2 + 1456), *(unsigned int *)(*(void *)a2 + 1460), *(unsigned __int8 *)(*(void *)a2 + 1464), *(unsigned int *)(*(void *)a2 + 1468), *(unsigned int *)(*(void *)a2 + 1472), *(unsigned int *)(*(void *)a2 + 1476)];
      }
      sub_10011DDCC((uint64_t)a1, v28, v29, v31);
      return;
    case 10:
      sub_100107650((uint64_t)a1, *(unsigned int *)(*(void *)a2 + 1312), *(unsigned __int8 *)(*(void *)a2 + 864));
      if ((*(_DWORD *)(*(void *)a2 + 1312) - 1) <= 1)
      {
        uint64_t v32 = sub_10012225C((uint64_t)a1);
        if (*(double *)(v32 + 424) == 0.0) {
          *(double *)(v32 + 424) = sub_10005A994();
        }
      }
      return;
    case 11:
      sub_100103634((uint64_t)a1);
      return;
    case 12:
      unsigned int v33 = *(_DWORD *)(*(void *)a2 + 1060);
      unsigned int v34 = *(_DWORD *)(*(void *)a2 + 1056);
      sub_100108BEC((uint64_t)a1, v33, v34);
      return;
    case 13:
      if (*(unsigned char *)(*(void *)a2 + 16) && *(unsigned char *)(*(void *)a2 + 24))
      {
        uint64_t v35 = **((unsigned int **)a2 + 2);
        sub_1001028E4((uint64_t)a1, v35, (uint64_t)"__WiFiManagerDeviceManagerApplier");
      }
      return;
    case 14:
      sub_100112090((uint64_t)a1);
      return;
    case 15:
      sub_10010222C((uint64_t)a1);
      return;
    case 16:
      uint64_t v36 = *(void *)(*(void *)a2 + 32);
      sub_1000FF740((uint64_t)a1, v36);
      return;
    case 17:
      sub_1000FF6DC((uint64_t)a1);
      return;
    case 18:
      uint64_t v37 = *(unsigned int *)(*(void *)a2 + 316);
      if ((MGGetBoolAnswer() & 1) == 0 && !*(void *)(*(void *)a2 + 320) && !*(unsigned char *)(*(void *)a2 + 1328))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, "%s: device hasn't been unlocked since boot. Overriding power state to OFF.", "__WiFiManagerDeviceManagerApplier"];
        }
        uint64_t v37 = 0;
      }
      sub_10011110C((uint64_t)a1, v37);
      return;
    case 19:
      sub_100102284((uint64_t)a1);
      return;
    case 20:
      int v39 = **((_DWORD **)a2 + 2);
      sub_100003EE4((uint64_t)a1, v39);
      return;
    case 21:
      sub_10011EDBC((uint64_t)a1, *(unsigned int *)(*(void *)a2 + 1904), (unsigned int *)(*(void *)a2 + 1912), 1u, *(double *)(*(void *)a2 + 1920), 0);
      uint64_t v40 = *(unsigned int *)(*(void *)a2 + 1904);
      uint64_t v41 = (unsigned int *)(*(void *)a2 + 1912);
      unsigned int v42 = *(double *)(*(void *)a2 + 1920);
      int v43 = *(const void **)(*(void *)a2 + 1896);
      sub_10011EDBC((uint64_t)a1, v40, v41, 1u, v42, v43);
      return;
    case 22:
      double v44 = (const void *)*((void *)a2 + 2);
      sub_100103980((uint64_t)a1, v44);
      return;
    case 23:
      int v45 = *(_DWORD *)(*(void *)a2 + 304);
      sub_100107544((uint64_t)a1, v45);
      return;
    case 24:
      uint64_t v46 = *(unsigned int *)(*(void *)a2 + 788);
      sub_10010755C((uint64_t)a1, v46);
      return;
    case 25:
      int v47 = *(_DWORD *)(*(void *)a2 + 300);
      sub_1001089F8((uint64_t)a1, v47);
      return;
    case 26:
      int v48 = a2[4];
      sub_100107480((uint64_t)a1, v48);
      return;
    case 27:
      unsigned int v49 = *(_DWORD *)(*(void *)a2 + 824);
      sub_10010893C((uint64_t)a1, v49);
      return;
    case 28:
      double v50 = *(const void **)(*(void *)a2 + 264);
      int v51 = *(_DWORD *)(*(void *)a2 + 272);
      sub_100107290((uint64_t)a1, v50, v51);
      return;
    case 29:
      char v52 = *(unsigned char *)(*(void *)a2 + 308);
      sub_100108910((uint64_t)a1, v52);
      return;
    case 30:
      char v53 = *(unsigned char *)(*(void *)a2 + 309);
      char v54 = *(unsigned char *)(*(void *)a2 + 310);
      char v55 = *(unsigned char *)(*(void *)a2 + 311);
      sub_100108928(a1, v53, v54, v55);
      return;
    case 31:
      if (*(void *)a2)
      {
        int v56 = *(unsigned __int8 *)(*(void *)a2 + 312);
        sub_1001089F0((uint64_t)a1, v56);
      }
      return;
    case 32:
      uint64_t v57 = *(unsigned __int8 *)(*(void *)a2 + 1208);
      int v58 = (unsigned int *)*((void *)a2 + 2);
      sub_10010D78C((uint64_t)a1, v57, v58);
      return;
    case 33:
      uint64_t v59 = *(unsigned __int8 *)(*(void *)a2 + 1211);
      int v60 = *(unsigned __int8 *)(*(void *)a2 + 1210);
      int v61 = *(unsigned __int8 *)(*(void *)a2 + 1212);
      id v62 = (unsigned int *)*((void *)a2 + 2);
      sub_10010D96C((uint64_t)a1, v59, v60, v61, v62);
      return;
    case 34:
      id v63 = (unsigned __int8 *)*((void *)a2 + 2);
      int v64 = *v63;
      int v65 = v63[1];
      int v66 = v63[2];
      uint64_t v67 = (void *)*((void *)v63 + 1);
      sub_10010F568((uint64_t)a1, v64, v65, v66, v67);
      return;
    case 35:
      int v68 = *(_DWORD *)(*(void *)a2 + 276);
      sub_1001198B4((uint64_t)a1, v68);
      return;
    case 36:
      uint64_t v69 = *(void *)(*(void *)a2 + 280);
      double v70 = *(double *)(*(void *)a2 + 288);
      sub_1001198C0((uint64_t)a1, v69, v70);
      return;
    case 37:
      unsigned int v71 = *(unsigned __int8 *)(*(void *)a2 + 328);
      sub_100108A00((uint64_t)a1, v71);
      return;
    case 38:
      unsigned int v72 = sub_10010FEC8((uint64_t)a1, *(const __CFString **)(*(void *)a2 + 1216));
      goto LABEL_381;
    case 39:
      int v73 = *(unsigned __int8 *)(*(void *)a2 + 1232);
      sub_10010F97C((uint64_t)a1, v73);
      return;
    case 40:
      uint64_t v74 = *(void *)a2;
      if (*(void *)a2)
      {
        int v75 = *(unsigned __int8 *)(v74 + 808);
        id v76 = *(const void **)(v74 + 816);
        sub_1001075C8((uint64_t *)a1, v75, v76);
      }
      return;
    case 41:
      uint64_t v77 = *(void *)a2 + 1384;
      sub_10011C4DC((uint64_t)a1, v77);
      return;
    case 42:
      int v78 = *(unsigned __int8 *)(*(void *)a2 + 1392);
      sub_10011C58C((uint64_t)a1, v78);
      return;
    case 43:
      sub_10011C618((uint64_t)a1);
      return;
    case 44:
      sub_10011F41C((uint64_t)a1);
      return;
    case 45:
      if (*(void *)a2)
      {
        int v79 = *(unsigned __int8 *)(*(void *)a2 + 2065);
        sub_100108AB8((uint64_t)a1, v79);
      }
      return;
    case 47:
      unsigned int v80 = sub_10011052C((uint64_t)a1);
      goto LABEL_391;
    case 48:
      unsigned int v80 = sub_10010FA10((uint64_t)a1);
      goto LABEL_391;
    case 49:
      unsigned int v80 = sub_10010FA08((uint64_t)a1);
      goto LABEL_391;
    case 50:
      unsigned int v80 = sub_10010FD54((uint64_t)a1);
      goto LABEL_391;
    case 51:
      unsigned int v80 = sub_1000FFC58((uint64_t)a1);
      goto LABEL_391;
    case 52:
      unsigned int v80 = sub_10010E8C8((uint64_t)a1);
      goto LABEL_391;
    case 53:
      unsigned __int8 v81 = (CFStringRef *)(*(void *)a2 + 1216);
      sub_100110478((uint64_t)a1, v81);
      return;
    case 54:
      if (*(void *)a2)
      {
        CFDictionaryRef v82 = (const __CFDictionary *)*((void *)a2 + 2);
        sub_10011B804((uint64_t)a1, v82, 1);
      }
      return;
    case 55:
      if (*(void *)a2)
      {
        unsigned int v83 = **((_DWORD **)a2 + 2);
        sub_10011BA80((uint64_t)a1, v83);
      }
      return;
    case 56:
      if (*(void *)a2)
      {
        CFDictionaryRef v84 = (const __CFDictionary *)*((void *)a2 + 2);
        sub_10011BB2C((uint64_t)a1, v84);
      }
      return;
    case 57:
      CFArrayRef v85 = (const __CFArray *)*((void *)a2 + 2);
      sub_1001194C4((uint64_t)a1, v85);
      return;
    case 58:
      uint64_t v86 = *(void *)a2;
      if (*(void *)a2)
      {
        id v87 = (_DWORD *)*((void *)a2 + 2);
        if (*v87 == -536870144) {
          uint64_t v88 = v86 + 530;
        }
        else {
          uint64_t v88 = 0;
        }
        sub_10011C698((uint64_t)a1, v87, v88);
      }
      return;
    case 59:
      long long v89 = (uint64_t *)*((void *)a2 + 2);
      sub_100017274((uint64_t)a1, v89);
      return;
    case 60:
      int v90 = *(_DWORD *)(*(void *)a2 + 1408);
      double v91 = *(double *)(*(void *)a2 + 1416);
      sub_10011D480((uint64_t)a1, v90, v91);
      return;
    case 61:
      sub_1000248B8((uint64_t)a1);
      return;
    case 62:
      sub_1000247DC((uint64_t)a1);
      return;
    case 63:
      unsigned int v80 = sub_10010FA4C((uint64_t)a1);
      goto LABEL_391;
    case 64:
      if (*(void *)a2)
      {
        int v92 = a2[4];
        sub_10011E3B0((uint64_t)a1, v92);
      }
      return;
    case 65:
      if (*(void *)a2)
      {
        CFDictionaryRef v93 = (const __CFDictionary *)*((void *)a2 + 2);
        sub_10011E510((uint64_t)a1, v93);
      }
      return;
    case 66:
      if (*(void *)a2)
      {
        sub_10011F230((uint64_t)a1, *((unsigned __int8 *)a2 + 12));
        int v94 = a2[4];
        sub_10011F298((uint64_t)a1, v94);
      }
      return;
    case 67:
      if (*(void *)a2)
      {
        sub_10011F3B4((uint64_t)a1, *((CFArrayRef *)a2 + 2));
        if (*((void *)a2 + 2))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: set policies %@", "__WiFiManagerDeviceManagerApplier", *((void *)a2 + 2) message];
          }
          unsigned int v17 = v95;
LABEL_221:
        }
      }
      return;
    case 68:
      uint64_t v96 = a2[4];
      sub_10011A0A4((uint64_t)a1, v96);
      return;
    case 69:
      long long v97 = (const void *)*((void *)a2 + 2);
      uint64_t v98 = *(void *)a2;
      sub_1001205D0((uint64_t)a1, v97, (uint64_t)sub_1000AEABC, v98);
      return;
    case 71:
      unsigned int v99 = *((unsigned __int8 *)a2 + 32);
      uint64_t v100 = **((unsigned int **)a2 + 2);
      uint64_t v101 = **((unsigned int **)a2 + 3);
      sub_100122424((uint64_t)a1, v99, v100, v101);
      return;
    case 74:
      int v102 = *(unsigned __int8 *)(*(void *)a2 + 314);
      sub_100122D68((uint64_t)a1, v102);
      return;
    case 77:
      if (*(void *)a2)
      {
        uint64_t v103 = *((void *)a2 + 2);
        if (v103)
        {
          sub_10010E020((uint64_t)a1, v103);
        }
      }
      return;
    case 78:
      sub_10010C2B4((uint64_t)a1);
      return;
    case 79:
      int v104 = **((unsigned __int8 **)a2 + 2);
      sub_100123FE8((uint64_t)a1, v104);
      return;
    case 80:
      sub_100123EF8((uint64_t)a1);
      return;
    case 81:
      uint64_t v105 = (const void *)*((void *)a2 + 2);
      sub_1001070C4((uint64_t)a1, v105);
      return;
    case 82:
      double v106 = (const void *)*((void *)a2 + 2);
      sub_10011F630((uint64_t)a1, v106);
      return;
    case 83:
      unsigned int v107 = **((unsigned __int8 **)a2 + 2);
      sub_100124BB8((uint64_t)a1, v107);
      return;
    case 84:
      unsigned int v72 = sub_100124C80((uint64_t)a1);
      goto LABEL_381;
    case 85:
      unsigned int v72 = sub_100124C90((uint64_t)a1);
      goto LABEL_381;
    case 86:
      unsigned int v72 = sub_100124CA0((uint64_t)a1);
      goto LABEL_381;
    case 88:
      unsigned int v72 = sub_100124CFC((uint64_t)a1);
      goto LABEL_381;
    case 89:
      uint64_t v108 = (void *)*((void *)a2 + 2);
      sub_10011FBA0((uint64_t)a1, v108);
      return;
    case 90:
      uint64_t v109 = **((unsigned int **)a2 + 2);
      sub_1001253A8((uint64_t)a1, v109);
      return;
    case 91:
      uint64_t v110 = **((unsigned __int8 **)a2 + 2);
      sub_1001257D4((uint64_t)a1, v110);
      return;
    case 92:
      int v111 = **((unsigned __int8 **)a2 + 2);
      sub_100022E04((uint64_t)a1, v111);
      return;
    case 93:
      double v112 = **((double **)a2 + 2);
      sub_1001258A8((uint64_t)a1, v112);
      return;
    case 95:
      CFDictionaryRef v113 = (const __CFDictionary *)*((void *)a2 + 2);
      sub_100024CD0((uint64_t)a1, v113);
      return;
    case 96:
      CFStringRef v114 = (const __CFDictionary **)(a2 + 4);
      sub_100024C0C((uint64_t)a1, v114);
      return;
    case 97:
      sub_100024748((uint64_t)a1);
      return;
    case 98:
      uint64_t v115 = *((void *)a2 + 2);
      sub_100125B94((uint64_t)a1, v115);
      return;
    case 99:
      uint64_t v116 = *((void *)a2 + 2);
      double v117 = *((double *)a2 + 3);
      double v118 = *((double *)a2 + 4);
      sub_100125DCC(a1, v116, v117, v118);
      return;
    case 100:
      uint64_t v119 = (const void *)**((void **)a2 + 2);
      sub_10010547C((uint64_t)a1, v119);
      return;
    case 101:
      CFArrayRef v120 = (const __CFArray *)*((void *)a2 + 2);
      sub_100125ED0((uint64_t)a1, v120);
      return;
    case 102:
      double v121 = *(const void **)(*(void *)a2 + 1240);
      uint64_t v122 = *(const void **)(*(void *)a2 + 1272);
      sub_10010AC94(a1, v121, v122);
      return;
    case 103:
      unsigned int v123 = **((unsigned __int8 **)a2 + 2);
      sub_10012676C((uint64_t)a1, v123);
      return;
    case 104:
      double v124 = (const void *)*((void *)a2 + 2);
      sub_100022DE4((uint64_t)a1, v124);
      return;
    case 105:
      v125 = (const void *)*((void *)a2 + 2);
      uint64_t v126 = *(void *)a2;
      sub_1001211D0((uint64_t)a1, v125, (uint64_t)sub_1000AF3EC, v126);
      return;
    case 106:
      v127 = (const void *)*((void *)a2 + 2);
      sub_100008930((uint64_t *)a1, v127);
      return;
    case 107:
      if (!*(void *)a2) {
        return;
      }
      unsigned int v80 = sub_10011F2F0((uint64_t)a1);
      goto LABEL_391;
    case 108:
      uint64_t v128 = *((void *)a2 + 2);
      sub_10010722C((uint64_t)a1, v128);
      return;
    case 109:
      unsigned int v129 = *(_DWORD *)(*(void *)a2 + 848);
      sub_100127C7C((uint64_t)a1, v129);
      return;
    case 110:
      double v130 = *(const void **)(*(void *)a2 + 352);
      sub_1001071C8((uint64_t)a1, v130);
      return;
    case 111:
      uint64_t v131 = **((unsigned __int8 **)a2 + 2);
      sub_100107314((uint64_t)a1, v131);
      return;
    case 112:
      if (*(void *)a2)
      {
        CFDictionaryRef v132 = (const __CFDictionary *)*((void *)a2 + 2);
        sub_100127CC4((uint64_t)a1, v132);
      }
      return;
    case 113:
      v133 = (const void *)*((void *)a2 + 2);
      sub_10011F98C((uint64_t)a1, v133);
      return;
    case 114:
      unsigned int v134 = **((unsigned __int8 **)a2 + 2);
      sub_100126830((uint64_t)a1, v134);
      return;
    case 115:
      sub_100127FD8((uint64_t)a1);
      return;
    case 117:
      char v135 = *(unsigned char *)(*(void *)a2 + 2253);
      sub_100128618((uint64_t)a1, v135);
      return;
    case 118:
      int v136 = *(unsigned __int8 *)(*(void *)a2 + 1280);
      sub_10010AE40((uint64_t)a1, v136);
      return;
    case 119:
      int v137 = **((unsigned __int8 **)a2 + 2);
      sub_10010B27C((uint64_t)a1, v137);
      return;
    case 120:
      int v138 = *(unsigned __int8 *)(*(void *)a2 + 1424);
      sub_10011CB5C((uint64_t)a1, v138);
      return;
    case 121:
      unint64_t v139 = **((void **)a2 + 2);
      sub_1000246D0((uint64_t)a1, v139);
      return;
    case 122:
      uint64_t v140 = **((void **)a2 + 2);
      sub_100022F74((uint64_t *)a1, v140);
      return;
    case 123:
      int v141 = **((unsigned __int8 **)a2 + 2);
      sub_100128F24((uint64_t)a1, v141);
      return;
    case 124:
      sub_1000246D4((uint64_t)a1);
      return;
    case 125:
      v142 = (unsigned int *)*((void *)a2 + 2);
      sub_10011D0E8((uint64_t)a1, v142);
      return;
    case 126:
      uint64_t v143 = *(const void **)(*(void *)a2 + 800);
      sub_1001073AC((uint64_t)a1, v143);
      return;
    case 127:
      uint64_t v144 = *((void *)a2 + 2);
      sub_10011CC4C((uint64_t)a1, v144);
      return;
    case 128:
      int v145 = *((unsigned __int8 *)a2 + 24);
      sub_100128FD4((uint64_t)a1, v145);
      return;
    case 129:
      uint64_t v146 = *((void *)a2 + 2);
      sub_1001290F0((uint64_t)a1, v146);
      return;
    case 130:
      unsigned int v72 = sub_100129790((uint64_t)a1);
LABEL_381:
      uint64_t v147 = v72;
      goto LABEL_393;
    case 131:
      unsigned int v80 = sub_100111154((uint64_t)a1);
      goto LABEL_391;
    case 133:
      CFDictionaryRef v148 = (const __CFDictionary *)*((void *)a2 + 2);
      sub_10012AFD4((uint64_t)a1, v148);
      return;
    case 134:
      CFDictionaryRef v149 = (const __CFDictionary *)*((void *)a2 + 2);
      sub_10012B478((uint64_t)a1, v149);
      return;
    case 135:
      unsigned int v80 = sub_10012B814((uint64_t)a1);
      goto LABEL_391;
    case 136:
      unsigned int v80 = sub_10010088C((uint64_t)a1);
LABEL_391:
      uint64_t v22 = v80;
LABEL_392:
      uint64_t v147 = *((void *)a2 + 3) | v22;
LABEL_393:
      *((void *)a2 + 3) = v147;
      break;
    case 137:
      sub_10010C090((uint64_t)a1);
      break;
    case 138:
      sub_10010C1EC((uint64_t)a1);
      break;
    case 139:
      char v150 = **((unsigned char **)a2 + 2);
      sub_10012B824((uint64_t)a1, v150);
      break;
    case 140:
      if (*(void *)a2)
      {
        uint64_t v151 = *((void *)a2 + 2);
        sub_10010FD64((uint64_t)a1, v151);
      }
      break;
    case 141:
      if (*(void *)a2)
      {
        uint64_t v152 = *((void *)a2 + 2);
        sub_10010FD88((uint64_t)a1, v152);
      }
      break;
    default:
      return;
  }
}

void sub_10002289C(uint64_t a1, uint64_t a2)
{
  if (a2 && *(void *)a2)
  {
    if (*(void *)(a2 + 8)) {
      sub_1000228C0(a1, *(void *)(a2 + 8), *(const __CFDictionary **)(a2 + 16));
    }
  }
}

void sub_1000228C0(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_1000228CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    uint64_t v4 = *(void *)(v2 + 832);
    if (*(unsigned __int8 *)(v2 + 840) != v3)
    {
      *(unsigned char *)(v2 + 840) = v3;
      if (v3) {
        unint64_t v7 = v4 | 4;
      }
      else {
        unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFBLL;
      }
LABEL_13:
      *(void *)(v2 + 832) = v7;
      sub_10001315C(v2, v4);
      goto LABEL_14;
    }
    if (*(unsigned char *)(a1 + 40)) {
      BOOL v5 = (*(void *)(v2 + 832) & 1) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: in home screen, force-unset foreground app mask."];
      }
      unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_13;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager" args:("__WiFiManagerSBHomeScreenStateUpdate")];
    }
  }
LABEL_14:
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    int v9 = *(unsigned __int8 *)(a1 + 41);
    if (*(unsigned __int8 *)(v8 + 912) != v9) {
      *(unsigned char *)(v8 + 912) = v9;
    }
LABEL_17:
    int v10 = *(unsigned __int8 *)(a1 + 42);
    if (*(unsigned __int8 *)(v8 + 841) != v10)
    {
      if (qword_10027DD68)
      {
        CFStringRef v12 = @"visible";
        if (*(unsigned char *)(v8 + 841)) {
          CFStringRef v13 = @"visible";
        }
        else {
          CFStringRef v13 = @"non-visible";
        }
        if (!v10) {
          CFStringRef v12 = @"non-visible";
        }
        [(id)qword_10027DD68 WFLog:3, "%s: control center state changed from '%@' -> '%@'", "__WiFiManagerControlCenterStateChanged", v13, v12 message];
      }
      *(unsigned char *)(v8 + 841) = v10;
      if (v10)
      {
        sub_10008A49C(v8, 1);
      }
      else if (*(void *)(v8 + 1224))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: disabling MIS discovery due to control center dismissal", "__WiFiManagerControlCenterStateChanged"];
        }
        uint64_t v15 = sub_100016E18(*(void *)(v8 + 1224));
        v20[0] = 0xAAAAAAAAAA000000;
        v20[1] = v15;
        context[0] = v8;
        context[1] = 0xAAAAAAAA00000022;
        void context[2] = v20;
        void context[3] = 1;
        CFSetApplyFunction(*(CFSetRef *)(v8 + 104), (CFSetApplierFunction)sub_100020954, context);
        sub_1000906C0(v8, *(const __CFString **)(v8 + 1224), 0, 0, 0, 0);
      }
    }
    return;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: Null manager" : @"__WiFiManagerCameraStateUpdate"];
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    goto LABEL_17;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4 message:"manager is Null"];
  }
}

void sub_100022BBC(uint64_t a1)
{
}

void sub_100022BC8(uint64_t a1)
{
}

void sub_100022BD4(uint64_t a1)
{
}

void sub_100022BE0(uint64_t a1)
{
}

void sub_100022BE8(uint64_t a1)
{
}

void sub_100022BF4(uint64_t a1)
{
}

void sub_100022C00(uint64_t a1)
{
}

void sub_100022C0C(uint64_t a1)
{
}

void sub_100022C14(uint64_t a1)
{
}

void sub_100022C20(uint64_t a1)
{
}

void sub_100022C2C(uint64_t a1)
{
}

void sub_100022C38(uint64_t a1)
{
}

void sub_100022C40(uint64_t a1)
{
}

void sub_100022C4C(uint64_t a1)
{
}

void sub_100022C58(uint64_t a1)
{
}

void sub_100022C60(uint64_t a1)
{
}

void sub_100022C6C(uint64_t a1)
{
}

void sub_100022C78(uint64_t a1)
{
}

void sub_100022C84(uint64_t a1)
{
}

void sub_100022C8C(uint64_t a1)
{
}

void sub_100022C98(uint64_t a1, uint64_t a2)
{
}

void sub_100022CA8(uint64_t a1, uint64_t a2)
{
}

void sub_100022CB8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100022CC8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100022CD8(uint64_t a1, uint64_t a2)
{
}

void sub_100022CE8(uint64_t a1, uint64_t a2)
{
}

void sub_100022CF8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100022D08(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100022D18(uint64_t a1, uint64_t a2)
{
}

void sub_100022D28(uint64_t a1, uint64_t a2)
{
}

void sub_100022D38(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100022D48(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100022D58(uint64_t a1, uint64_t a2)
{
}

void sub_100022D68(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100022D78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100022D88(uint64_t a1, uint64_t a2)
{
}

void sub_100022D98(uint64_t a1, uint64_t a2)
{
}

void sub_100022DA8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100022DB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100022DC8(uint64_t a1, uint64_t a2)
{
}

id sub_100022DD8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _applicationStateMonitorHandler:*(void *)(a1 + 40)];
}

void sub_100022DE4(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (a2) {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 7064), a2);
    }
  }
}

id sub_100022DF8(id result)
{
  if (result) {
    return [result _handleManagedEventNotification];
  }
  return result;
}

void sub_100022E04(uint64_t a1, int a2)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 6804))
    {
      *(unsigned char *)(a1 + 6800) = a2;
      if (a2)
      {
        *(void *)(a1 + 6952) = 0;
        if (_os_feature_enabled_impl())
        {
          int v3 = (const void *)sub_100017C48(*(void *)(a1 + 64));
          uint64_t v4 = sub_100018FA8(a1, v3, 1);
          if (v4)
          {
            CFRelease(v4);
          }
          else
          {
            sub_10001FD64(a1, 0x3DuLL);
          }
        }
        else
        {
          sub_1001254F0(a1, 1);
        }
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: autoHotspotMode is not set", "WiFiDeviceManagerStartAutoInstantHotspotAssociation"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: manager is NULL" :@"WiFiDeviceManagerStartAutoInstantHotspotAssociation"];
    }
  }
}

id sub_100022F74(uint64_t *a1, uint64_t a2)
{
  a1[1111] = a2;
  return sub_100006664(a1);
}

void sub_100022F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    if (a4)
    {
      context[0] = a3;
      context[1] = a1;
      void context[2] = a4;
      CFSetApplyFunction(*(CFSetRef *)(a3 + 136), (CFSetApplierFunction)sub_10002289C, context);
    }
  }
}

void sub_100022FC8(uint64_t a1, int a2, int a3)
{
  unsigned int v6 = [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") isDisableAutoJoinActivityRegistered];
  if (!a2 || (CFSetGetCount(*(CFSetRef *)(a1 + 160)) ? (int v7 = 1) : (int v7 = v6), v7 == 1))
  {
    if (CFSetGetCount(*(CFSetRef *)(a1 + 160))) {
      int v8 = 1;
    }
    else {
      int v8 = v6;
    }
    if (v8 == 1)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: auto-join disabled by %@ (activity=%d)", "__WiFiManagerSetEnableInternal", *(void *)(a1 + 160), v6 message];
      }
    }
    int v10 = 0;
    if (a3) {
      goto LABEL_17;
    }
LABEL_16:
    if (*(unsigned __int8 *)(a1 + 26) == v10) {
      return;
    }
    goto LABEL_17;
  }
  int v10 = 1;
  if (!a3) {
    goto LABEL_16;
  }
LABEL_17:
  if (qword_10027DD68)
  {
    CFStringRef v12 = "Disabling";
    if (v10) {
      CFStringRef v12 = "Enabling";
    }
    [qword_10027DD68 WFLog:3 message:@"%s automatic association"];
  }
  *(unsigned char *)(a1 + 26) = v10;
  if (v10 && *(unsigned char *)(a1 + 1560))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: start the priority autojoin timer ###START_CAAJ", "__WiFiManagerSetEnableInternal")];
    }
    __int16 v14 = *(NSObject **)(a1 + 1576);
    dispatch_time_t v15 = dispatch_time(0, 30000000000);
    dispatch_source_set_timer(v14, v15, 0xFFFFFFFFFFFFFFFFLL, 0);
    int v10 = *(unsigned __int8 *)(a1 + 26);
  }
  uint64_t context = a1;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  if (v10) {
    int v16 = 6;
  }
  else {
    int v16 = 15;
  }
  LODWORD(v18) = v16;
  uint64_t v19 = 0;
  uint64_t v20 = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
}

uint64_t sub_1000231B0(void *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v4 = sub_10000D934(a1, a2);
  uint64_t valuePtr = a3;
  if (v4)
  {
    CFNumberRef v5 = v4;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v5))
    {
      CFNumberGetValue(v5, kCFNumberCFIndexType, &valuePtr);
      return valuePtr;
    }
  }
  return a3;
}

BOOL sub_100023220(void *a1, const __CFString *a2, SInt32 a3)
{
  uint64_t v4 = sub_10000D934(a1, a2);
  SInt32 valuePtr = a3;
  if (v4)
  {
    CFStringRef v5 = (const __CFString *)v4;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID != CFGetTypeID(v5))
    {
      CFTypeID v7 = CFBooleanGetTypeID();
      if (v7 == CFGetTypeID(v5))
      {
        IntCFNumberRef Value = CFEqual(v5, kCFBooleanTrue);
      }
      else
      {
        CFTypeID v9 = CFStringGetTypeID();
        if (v9 != CFGetTypeID(v5)) {
          return a3 != 0;
        }
        IntCFNumberRef Value = CFStringGetIntValue(v5);
      }
      a3 = IntValue;
      return a3 != 0;
    }
    CFNumberGetValue((CFNumberRef)v5, kCFNumberIntType, &valuePtr);
    a3 = valuePtr;
  }
  return a3 != 0;
}

void sub_1000232EC(uint64_t a1, int a2)
{
  if (a1)
  {
    if (a2 == 14)
    {
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000061;
      void context[2] = 0;
      void context[3] = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager" : @"__WiFiManagerEventResetCoalescedUndispatchedEventData"];
    }
  }
}

uint64_t sub_1000233A8(void *a1)
{
  if (a1)
  {
    uint64_t result = _os_feature_enabled_impl();
    if (result) {
      return (int)[(__SCPreferences *)sub_10000D934(a1, @"Version") intValue] > 13;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: manager is NULL", @"__WiFiManagerAllowUnifiedKVS"];
    }
    return 0;
  }
  return result;
}

id sub_100023450(unsigned char *cf)
{
  if (!&_managed_event_fetch) {
    return 0;
  }
  if (!cf)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: LQAMgr is NULL", @"__WiFiLQAMgrCheckReassoc"];
    }
    goto LABEL_37;
  }
  if (cf[2834])
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: isAwdlRealTimeModeActive" args:("__WiFiLQAMgrCheckReassoc")];
    }
LABEL_37:
    return 0;
  }
  unsigned int v2 = *((_DWORD *)cf + 56);
  if (v2 < 3) {
    return 0;
  }
  if (cf[640])
  {
    if (cf[2844])
    {
      if ((~*((_DWORD *)cf + 710) & 3) == 0)
      {
        int v3 = *((_DWORD *)cf + 699);
        if (v3 > -65)
        {
          int v4 = *((_DWORD *)cf + 709);
          unsigned int v5 = v3 - v4;
          if (v3 - v4 < 0) {
            unsigned int v5 = v4 - v3;
          }
          if (v5 >= 0xA && (v2 == 4 || v2 == 3 && v3 > v4))
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:4, "%s: Attempting host triggered roam to 5GHz band due to RSSI change on 2.4GHz(Env: %d linkUpRssi: %d lastRssi: %d)", "__WiFiLQAMgrCheckPref5GhzReAssoc", *((unsigned int *)cf + 56), *((unsigned int *)cf + 709), *((unsigned int *)cf + 699)];
            }
            unsigned int v7 = [[+[WiFiRoamManager sharedWiFiRoamManager](WiFiRoamManager, "sharedWiFiRoamManager") roamWithReason:5 bandPreference:0];
            id result = 0;
            if (v7)
            {
              id result = 0;
              cf[2844] = 0;
            }
            return result;
          }
        }
      }
    }
  }
  if (*((int *)cf + 699) >= -65 || cf[200]) {
    return 0;
  }
  if (!cf[2832] && &_managed_event_fetch)
  {
    *((_DWORD *)cf + 123) = 0;
    *((_DWORD *)cf + 707) = 12;
    if (sub_10003EF28(cf))
    {
      id result = 0;
      cf[200] = 1;
      return result;
    }
    if (cf[200]) {
      return 0;
    }
  }
  id result = (id)sub_10003F024((uint64_t)cf);
  if (result)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: Attempting host triggered roam based on MacStats", "__WiFiLQAMgrCheckReassoc"];
    }
    return [[+[WiFiRoamManager sharedWiFiRoamManager](WiFiRoamManager, "sharedWiFiRoamManager") roamWithReason:4 bandPreference:0];
  }
  return result;
}

uint64_t sub_1000236AC(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: WiFiLQAMgrRef null" arguments:v11];
    }
    goto LABEL_11;
  }
  if (*(void *)(a1 + 608) < 2uLL || *(unsigned char *)(a1 + 600)) {
    return 0;
  }
  if (*(double *)(a1 + 64) == 0.0)
  {
    double v2 = 0.0;
LABEL_9:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Wait for atleast 10 seconds before transition (%f)", @"__WiFiLQAMgrCheckColocatedScopeTransition", *(void *)&v2];
    }
LABEL_11:
    return 0;
  }
  double v2 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 64);
  if (v2 <= 10.0) {
    goto LABEL_9;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 2796);
  if (sub_100023F30(*(void *)(a1 + 48)) == 1)
  {
    uint64_t v4 = 2;
    uint64_t v3 = 4294967221;
    goto LABEL_16;
  }
  if (sub_100023F30(*(void *)(a1 + 48)) == 2)
  {
    if (*(int *)(a1 + 2796) <= -76)
    {
      uint64_t v4 = 1;
      uint64_t v3 = 4294967211;
      goto LABEL_16;
    }
    return 0;
  }
  uint64_t v4 = 0;
LABEL_16:
  id v6 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyColocatedScopeTransitionNetwork:v3 minRssi:0xFFFFFFFFLL maxRssi:v4 band:v4];
  if (!v6) {
    return 0;
  }
  unsigned int v7 = v6;
  int v8 = *(uint64_t (**)(uint64_t, void, id, void))(a1 + 584);
  if (v8)
  {
    *(unsigned char *)(a1 + 600) = v8(a1, *(void *)(a1 + 40), v6, *(void *)(a1 + 592));
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
  }
  CFRelease(v7);
  return v9;
}

void sub_10002384C(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  if (a1)
  {
    if (a3)
    {
      if (*(unsigned char *)(a1 + 208)
        && (id v6 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 216), @"recommendationFlags")) != 0)
      {
        unsigned int v7 = v6;
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, a3);
        uint64_t v9 = MutableCopy;
        if (MutableCopy)
        {
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"QUAL_SCORE");
          uint64_t v11 = Value
              ? CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, Value)
              : CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFStringRef v12 = v11;
          if (v11)
          {
            CFDictionarySetValue(v11, @"LINK_RECOMMENDATION_FLAGS", v7);
            CFDictionarySetValue(v9, @"QUAL_SCORE", v12);
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: hi-jacking real-time session recommendation flags: %@", "__WiFiDeviceRealtimeSessionEvent", v9 message];
            }
            CFRelease(v12);
          }
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
      __int16 v14 = *(void (**)(uint64_t, uint64_t, void, __CFDictionary *))(a1 + 4920);
      if (v14)
      {
        if (v9) {
          dispatch_time_t v15 = v9;
        }
        else {
          dispatch_time_t v15 = a3;
        }
        v14(a1, a2, *(void *)(a1 + 4928), v15);
      }
      if (v9)
      {
        CFRelease(v9);
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null eventData" args:("__WiFiDeviceRealtimeSessionEvent")];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null device", "__WiFiDeviceRealtimeSessionEvent")];
    }
  }
}

void sub_100023A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 4872);
    if (v3)
    {
      uint64_t v5 = *(void *)(a1 + 4880);
      v3(a1, a2, v5, a3);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null eventData" args:("__WiFiDeviceProcessWeightAvgLQMEvent")];
    }
  }
}

void sub_100023B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 4856);
    if (v3)
    {
      uint64_t v5 = *(void *)(a1 + 4864);
      v3(a1, a2, v5, a3);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: txStatsRef is null", @"__WiFiDeviceProcessLqmTxStatsEvent"];
    }
  }
}

uint64_t sub_100023BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(a3 + 4248);
    if (v3) {
      return v3(a3, a2, *(void *)(a3 + 4256));
    }
  }
  return result;
}

void sub_100023BF8(int a1, int a2, uint64_t a3, CFDictionaryRef theDict)
{
  if (a3) {
    sub_1000077D4(*(void *)(a3 + 120), theDict);
  }
}

void sub_100023C0C(uint64_t a1, uint64_t a2)
{
}

void sub_100023C1C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (!a1) {
      return;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: CATSUpdate P2P Error: %ld device:%p deviceManager:%p manager:%p\n", "__CatsP2PUpdateCallback", a1, *(void *)(a2 + 64), a2, *(void *)(a2 + 424));
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: CATS P2P callback Invalid argument\n", "__CatsP2PUpdateCallback", v5, v6, v7, v8);
    }
  }
}

void sub_100023CF4(uint64_t a1)
{
  id v3 = [*(id *)(*(void *)(a1 + 32) + 56) objectForKeyedSubscript:*(void *)(a1 + 40)];
  if ([*(id *)(a1 + 48) array] != v3)
  {
    BOOL v4 = ![*(id *)(a1 + 48) array] || v3 == 0;
    if (v4 || (objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "array"), "isEqual:", v3) & 1) == 0)
    {
      [*(id *)(*(void *)(a1 + 32) + 56) setObject:*(id *)(a1 + 48) forKeyedSubscript:*(void *)(a1 + 40)];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    }
  }
}

void sub_100023DA8(uint64_t a1)
{
  (*(void (**)(void, void, void))(*(void *)(a1 + 32) + 64))(*(void *)(*(void *)(a1 + 32) + 56), *(unsigned int *)(a1 + 48), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
  double v2 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

uint64_t sub_100023E00(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 3 || *(_DWORD *)(result + 4) != 96)
  {
    int v7 = -304;
LABEL_13:
    *(_DWORD *)(a2 + 32) = v7;
    NDR_record_t v6 = NDR_record;
    goto LABEL_14;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || *(unsigned char *)(result + 71) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 84))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 88))
    || (unsigned int v5 = *(_DWORD *)(result + 72), v5 != *(_DWORD *)(result + 92)))
  {
    int v7 = -300;
    goto LABEL_13;
  }
  uint64_t result = sub_10000E644(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, *(UInt8 **)(result + 60), v5, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v6 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_14:
  *(NDR_record_t *)(a2 + 24) = v6;
  return result;
}

float sub_100023EF4(int a1)
{
  float v1 = (float)a1 + 77.5;
  float v2 = fabsf(sqrtf((float)(v1 * v1) + 450.0));
  return (float)(v1 / (float)(v2 + v2)) + 0.5;
}

uint64_t sub_100023F30(uint64_t result)
{
  int v9 = 0;
  if (result)
  {
    float v1 = (const void *)result;
    CFTypeID v2 = CFGetTypeID((CFTypeRef)result);
    uint64_t v3 = qword_10027D710;
    if (!qword_10027D710)
    {
      pthread_once(&stru_10027CCA8, (void (*)(void))sub_1000C5C5C);
      uint64_t v3 = qword_10027D710;
    }
    if (v2 == v3)
    {
      unsigned int v4 = sub_10001E404((uint64_t)v1, @"CHANNEL");
      CFNumberRef v5 = (const __CFNumber *)sub_10001E404((uint64_t)v1, @"CHANNEL_FLAGS");
      if (v5)
      {
        int valuePtr = 0;
        CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
        if ((valuePtr & 8) != 0) {
          return 1;
        }
        if ((valuePtr & 0x10) != 0) {
          return 2;
        }
        if ((valuePtr & 0x2000) != 0) {
          return 3;
        }
      }
      float v1 = v4;
      if (!v4) {
        return 0;
      }
    }
    else
    {
      CFTypeID v6 = CFGetTypeID(v1);
      if (v6 != CFNumberGetTypeID()) {
        return 0;
      }
    }
    CFNumberGetValue((CFNumberRef)v1, kCFNumberIntType, &v9);
    if (v9)
    {
      if (v9 < 15) {
        return 1;
      }
      uint64_t v7 = 0;
      while (v9 != dword_10027CC20[v7])
      {
        if (++v7 == 33) {
          return 0;
        }
      }
      return 2;
    }
    return 0;
  }
  return result;
}

const void *sub_100024070(uint64_t a1)
{
  if (a1)
  {
    return sub_10001E404(a1, @"CHANNEL");
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiNetworkGetChannel")];
    }
    return 0;
  }
}

void sub_1000240F0(uint64_t a1)
{
  if (a1)
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000007CLL;
    void context[2] = 0;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null manager", "WiFiManagerTraficEngrAppInfo")];
    }
  }
}

void sub_1000241A4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 314) || *(_DWORD *)(a1 + 788) == 2)
  {
    uint64_t context = a1;
    unint64_t v7 = 0xAAAAAAAA00000030;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
    if ((_BYTE)v9 || sub_1000913EC(a1))
    {
      uint64_t v3 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        uint64_t context = a1;
        unint64_t v7 = 0xAAAAAAAA00000030;
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
        if ((_BYTE)v9) {
          unsigned int v4 = "WoW";
        }
        else {
          unsigned int v4 = "LPAS";
        }
        [v3 WFLog:3 message:@"%s Enabled, Skip starting Disassocation timer"];
      }
    }
    else if (!*(_DWORD *)(a1 + 952))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Starting Disassociation Timer"];
      }
      sub_100092678(a1, 1, *(double *)(a1 + 928));
      *(_DWORD *)(a1 + 952) = 2;
    }
  }
}

void sub_1000242F8(uint64_t a1, int a2)
{
  int v4 = a2;
  if (a2)
  {
    if (*(_DWORD *)(a1 + 788) != 2) {
      sub_10002454C(a1);
    }
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000014;
    void context[2] = &v4;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  }
}

void sub_100024374(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 952);
  if (v2 == 3)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:3 message:@"Disassociation timer already fired, so not pausing"];
    }
    sub_100003D18(a1, 1);
  }
  else if (v2 == 2)
  {
    *(_DWORD *)(a1 + 952) = 1;
    double v3 = *(double *)(a1 + 944);
    *(double *)(a1 + 936) = v3 - CFAbsoluteTimeGetCurrent();
    sub_100092678(a1, 0, 315360000.0);
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Pausing disassociation timer with remaing interval of %f s", *(void *)(a1 + 936));
    }
  }
}

uint64_t sub_100024498(uint64_t a1)
{
  return *(unsigned int *)(a1 + 336);
}

void sub_1000244A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
  {
    context[0] = a1;
    context[1] = a2;
    void context[2] = a3;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_100004854, context);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Invalid arguments" :@"WiFiManagerCatsUcmUpdate"];
    }
  }
}

void sub_10002454C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 952);
  if ((v2 - 1) < 2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"Canceling disassociation timer"];
    }
    sub_100092678(a1, 1, 315360000.0);
  }
  else
  {
    if (!v2) {
      return;
    }
    if (v2 == 3)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Disassociation timer already fired, so no need to cancel")];
      }
      sub_100003D18(a1, 1);
    }
  }
  *(_DWORD *)(a1 + 952) = 0;
}

void sub_100024610(uint64_t a1)
{
  if (a1)
  {
    int v2 = *(const void **)(a1 + 152);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 152) = 0;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: WiFiLQAMgrRef is NULL" : @"WiFiLQAMgrResetCoalescedUndispatchedLQMEvent"];
    }
  }
}

BOOL sub_1000246A4(const __CFString *a1)
{
  return CFStringFind(a1, @"facetime", 1uLL).length != 0;
}

uint64_t sub_1000246D4(uint64_t a1)
{
  if (a1) {
    return 0;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: NULL Device Manager !" arguments:("WiFiDeviceManagerSetTrafficEngrAppInfo", nil)];
  }
  return 4294963396;
}

void sub_100024748(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 120);
    sub_100024610(v1);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Error: %s: device manager is NULL" arguments:("WiFiDeviceManagerResetCoalescedUndispatchedLQMEvent")];
    }
  }
}

void sub_1000247DC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 6580))
  {
    if (*(double *)(a1 + 6584) != 0.0)
    {
      double v2 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 6584);
      if (v2 >= 10.0)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Auto Join PM Assertion timeout autoJoinPMAssertionTimestamp:%f timeSincePMAssertion:%f", "WiFiDeviceManagerJoinPMAssertionExpirationHandler", *(void *)(a1 + 6584), *(void *)&v2);
        }
        int v4 = *(const void **)(a1 + 6592);
        sub_10011E17C(a1, v4, 1);
      }
    }
  }
}

uint64_t sub_1000248AC(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 3448);
  }
  return result;
}

void sub_1000248B8(uint64_t a1)
{
  double v2 = (unsigned char *)(a1 + 5219);
  uint64_t v3 = *(void *)(a1 + 64);
  int v4 = (const void *)sub_100017C48(v3);
  sub_100017D28(v3, v4, 481, 0, 0);
  if (![+[WiFiUserInteractionMonitor sharedInstance] isRealTimeAppActive]&& *(unsigned char *)(a1 + 3476))
  {
    sub_1000FD3D4(a1);
  }
  if (*(_DWORD *)(a1 + 5424))
  {
    CFNumberRef v5 = (const void *)sub_10005FC0C(*(void *)(a1 + 64));
    if (sub_1001116C8(a1))
    {
      CFTypeID v6 = sub_1001195F0(a1, 1);
      if (v6)
      {
        unint64_t v7 = v6;
        CFDateRef v8 = (const __CFDate *)sub_10001E404((uint64_t)v6, @"lastJoined");
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v10 = CFDateCreate(kCFAllocatorDefault, Current);
        CFDateRef v11 = v10;
        if (v8 && v10)
        {
          if (CFDateGetTimeIntervalSinceDate(v10, v8) >= 20.0)
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: remove AWDL network(Assisted Discovery) due to Timeout", "__WiFiDeviceManagerAssistedDiscoverySessionTimeout")];
            }
            if (sub_100119218(a1, v5, v7, 0, 0))
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:3, @"%s: Failed remove AWDL network", @"__WiFiDeviceManagerAssistedDiscoverySessionTimeout"];
              }
            }
          }
        }
        else if (!v10)
        {
LABEL_18:
          CFRelease(v7);
          goto LABEL_19;
        }
        CFRelease(v11);
        goto LABEL_18;
      }
    }
  }
LABEL_19:
  if (v2[1677] && v2[1825])
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Disconnect from Hotspot. LTE/5G Available!!", @"WiFiDeviceManagerHeartbeatHadler"];
    }
    dispatch_time_t v15 = (const void *)sub_100017C48(*(void *)(a1 + 64));
    sub_1000FEA7C(a1, v15, 1019, "WiFiDeviceManagerHeartbeatHadler", 30147);
  }
  if ([*(id *)(a1 + 6752) isClientAssociated])
  {
    double v16 = *(double *)(a1 + 6768);
    if (v16 != 0.0)
    {
      double v16 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 6768);
      if (v16 >= *(double *)(a1 + 6784))
      {
        *(double *)(a1 + 6488) = sub_10005A994();
        *(_DWORD *)(a1 + 6544) = 3;
        unsigned int v17 = *(const void **)(a1 + 6552);
        if (v17)
        {
          CFRelease(v17);
          *(void *)(a1 + 6552) = 0;
        }
        *(void *)(a1 + 6552) = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", @"Off Head");
        [*(id *)(a1 + 6752) stopSubscriberForPHSOverNAN];
        double v16 = sub_1000519A4((unsigned int *)(a1 + 6456));
      }
    }
  }
  if (v2[3846]) {
    [*(id *)(a1 + 6648) removeExpiredDenyListedState:3, v16];
  }
  if (!*v2 && !*(_DWORD *)(a1 + 5344))
  {
    IOPMAssertionID v18 = *(_DWORD *)(a1 + 5228);
    if (v18)
    {
      uint64_t v19 = IOPMAssertionRelease(v18);
      if (v19)
      {
        uint64_t v20 = v19;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:4, @"%s MIS session not active: release MIS PM Assertion, error=%d", @"WiFiDeviceManagerHeartbeatHadler", v20];
        }
      }
      *(_DWORD *)(a1 + 5228) = 0;
    }
  }
}

CFStringRef sub_100024BE8(unsigned int a1)
{
  if (a1 > 0x14) {
    return @"Bogus";
  }
  else {
    return off_100241F70[a1];
  }
}

void sub_100024C0C(uint64_t a1, const __CFDictionary **a2)
{
  if (a1)
  {
    if (a2)
    {
      *a2 = sub_100008EA4(*(void *)(a1 + 120));
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"Error: %s: dictCopy is NULL", @"WiFiDeviceManagerCopyCoalescedUndispatchedLQMEvent"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Error: %s: device manager is NULL", "WiFiDeviceManagerCopyCoalescedUndispatchedLQMEvent")];
    }
  }
}

void sub_100024CD0(uint64_t a1, const __CFDictionary *a2)
{
  if (a1 && a2)
  {
    uint64_t v2 = *(void *)(a1 + 120);
    sub_10000DB5C(v2, a2);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Error: %s: device manager is NULL" arguments:("WiFiDeviceManagerCoalesceUndispatchedLQMEvent", 0)];
    }
  }
}

uint64_t sub_100024D68(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 39) >> 2) & 1;
}

void sub_100025830(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10002584C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
}

void sub_10002585C(uint64_t a1)
{
  uint64_t v2 = +[NSDate date];
  [v2 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 40)];
  double v4 = v3;
  double v5 = (double)*(unint64_t *)(a1 + 48);

  if (v4 >= v5)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: learning period exceeded max time of %llu seconds", "-[WiFiNWReliabilityMonitor waitForNetworkToBeReliableWithTimeout:withTimeout:withMgrCallback:]_block_invoke_2", *(void *)(a1 + 48));
    }
LABEL_37:
    *(unsigned char *)(*(void *)(a1 + 32) + 65) = 0;
    [*(id *)(a1 + 32) _evaluationComplete:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)];
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = *(unsigned __int8 *)(v6 + 65);
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id v8 = *(id *)(v6 + 16);
    id v9 = [v8 countByEnumeratingWithState:&v40 objects:v45 count:16];
    if (v9)
    {
      id v10 = v9;
      LODWORD(v11) = 0;
      if (v7) {
        unint64_t v12 = 16;
      }
      else {
        unint64_t v12 = 8;
      }
      uint64_t v13 = *(void *)v41;
      while (2)
      {
        for (CFIndex i = 0; i != v10; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v41 != v13) {
            objc_enumerationMutation(v8);
          }
          dispatch_time_t v15 = *(void **)(*((void *)&v40 + 1) + 8 * i);
          if (([v15 isSessionReliable:v12] & 1) == 0)
          {
            unsigned int v21 = (void *)qword_10027DD68;
            if (qword_10027DD68)
            {
              uint64_t v22 = [v15 description];
              [v21 WFLog:3, "%s: session:%@ is not yet reliable for atleast %lu samples", "-[WiFiNWReliabilityMonitor waitForNetworkToBeReliableWithTimeout:withTimeout:withMgrCallback:]_block_invoke_2", v22, v12 message];
            }

            goto LABEL_25;
          }
          unint64_t v16 = (unint64_t)[v15 getSampleCount:1];
          BOOL v17 = v12 > v16;
          v12 -= v16;
          if (!v17)
          {

            *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
            uint64_t v32 = v31;
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3, "%s: network is reliable!", "-[WiFiNWReliabilityMonitor waitForNetworkToBeReliableWithTimeout:withTimeout:withMgrCallback:]_block_invoke_2", v35];
            }
            goto LABEL_37;
          }
          uint64_t v11 = (v11 + v16);
        }
        id v10 = [v8 countByEnumeratingWithState:&v40 objects:v45 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }

    if (qword_10027DD68)
    {
      uint64_t v19 = 16;
      if (!*(unsigned char *)(*(void *)(a1 + 32) + 65)) {
        uint64_t v19 = 8;
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Available samples: %d less than threshold: %d!", "-[WiFiNWReliabilityMonitor waitForNetworkToBeReliableWithTimeout:withTimeout:withMgrCallback:]_block_invoke_2", v11, v19);
    }
LABEL_25:
    *(unsigned char *)(*(void *)(a1 + 32) + 65) = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v23 = *(id *)(*(void *)(a1 + 32) + 16);
    id v24 = [v23 countByEnumeratingWithState:&v36 objects:v44 count:16];
    if (v24)
    {
      id v25 = v24;
      unint64_t v26 = 0;
      int v27 = 0;
      uint64_t v28 = *(void *)v37;
      while (2)
      {
        int v29 = 0;
        int v30 = v27 + v25;
        do
        {
          if (*(void *)v37 != v28) {
            objc_enumerationMutation(v23);
          }
          v26 += (unint64_t)[*(id *)(*((void *)&v36 + 1) + 8 * (void)v29) getSampleCount:1];
          if (v26 > 0xF)
          {
            int v30 = v27 + v29 + 1;
            goto LABEL_39;
          }
          int v29 = (char *)v29 + 1;
        }
        while (v25 != v29);
        id v25 = [v23 countByEnumeratingWithState:&v36 objects:v44 count:16];
        int v27 = v30;
        if (v25) {
          continue;
        }
        break;
      }
    }
    else
    {
      int v30 = 0;
    }
LABEL_39:

    uint64_t v33 = [*(id *)(*(void *)(a1 + 32) + 16) count] - v30;
    if ((int)v33 >= 1)
    {
      [*(id *)(*(void *)(a1 + 32) + 16) removeObjectsInRange:v30, v33];
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:@"%s: Discarded %d sessions" message:3, @"-[WiFiNWReliabilityMonitor waitForNetworkToBeReliableWithTimeout:withTimeout:withMgrCallback:]_block_invoke_2", v33];
      }
    }
  }
}

void sub_1000263C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

id sub_1000263E4(uint64_t a1, void *a2, unsigned char *a3)
{
  id result = [a2 data];
  if ((int)result <= -76)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    *a3 = 1;
  }
  if (++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) >= *(_DWORD *)(a1 + 48)) {
    *a3 = 1;
  }
  return result;
}

void sub_100026610(id a1)
{
  id v1 = [[WiFiAIRAgent alloc] _initPrivate];
  uint64_t v2 = qword_10027D580;
  qword_10027D580 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10002679C(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 25))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2 == 8 || v2 == 1)
    {
      double v5 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        uint64_t v6 = +[WiFiUserInteractionMonitor sharedInstance];
        [v5 WFLog:3 message:@"%s: realtime app state changed to %d", @"-[WiFiAIRAgent _userInteractivityChangedCallback:]_block_invoke", [v6 isRealTimeAppActive]];
      }
      int v7 = +[WiFiUserInteractionMonitor sharedInstance];
      unsigned __int8 v8 = [v7 isRealTimeAppActive];

      if ((v8 & 1) == 0)
      {
        [*(id *)(*(void *)(a1 + 32) + 8) terminateNetworkReliabilityEvaluation];
        uint64_t v9 = *(void **)(a1 + 32);
        [v9 _evaluationComplete:5];
      }
    }
  }
}

void sub_100026B20(id a1, void *a2, unint64_t a3)
{
  id v5 = a2;
  if (v5)
  {
    [v5 _userInteractivityChangedCallback:a3];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:@"%s: null agent" message:3];
    }
  }
}

id sub_100026BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [v2 convertFromNWReliabilityMonitorResult:a2];

  return [v2 _evaluationComplete:v3];
}

uint64_t sub_100026EE8(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = qword_10027D588;
  qword_10027D588 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

void sub_100026F98(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = [v3 ambiguousSSIDs];
  uint64_t v6 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    id v7 = [@"AmbiguousSSIDs" UTF8String];
    id v8 = [v4 description];
    [v6 WFLog:3 message:@"%s: %s\n", v7, [v8 UTF8String]];
  }
  uint64_t v9 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000270D4;
  block[3] = &unk_10023EB20;
  void block[4] = *(void *)(a1 + 32);
  id v12 = v4;
  id v10 = v4;
  dispatch_sync(v9, block);
}

void sub_1000270D4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) wifiManager];
  CFArrayRef v3 = *(const __CFArray **)(a1 + 40);

  sub_1000A9770((uint64_t)v2, v3);
}

uint64_t sub_100027614(uint64_t a1)
{
  [*(id *)(a1 + 32) queryLOITypeAtLatestLocation];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    CFArrayRef v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_1000279B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Block_object_dispose((const void *)(v29 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_1000279FC(id result, void *a2, uint64_t a3)
{
  id v3 = result;
  if (a2)
  {
    if (!a3)
    {
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      uint64_t result = [a2 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (result)
      {
        id v5 = result;
        uint64_t v6 = *(void *)v10;
        do
        {
          id v7 = 0;
          do
          {
            if (*(void *)v10 != v6) {
              objc_enumerationMutation(a2);
            }
            id v8 = *(void **)(*((void *)&v9 + 1) + 8 * (void)v7);
            if (![v8 type]) {
              *(unsigned char *)(*(void *)(*((void *)v3 + 5) + 8) + 24) = 1;
            }
            if ([v8 type] == (id)1) {
              *(unsigned char *)(*(void *)(*((void *)v3 + 6) + 8) + 24) = 1;
            }
            id v7 = (char *)v7 + 1;
          }
          while (v5 != v7);
          uint64_t result = [a2 countByEnumeratingWithState:&v9 objects:v13 count:16];
          id v5 = result;
        }
        while (result);
      }
    }
  }
  if (!*(unsigned char *)(*(void *)(*((void *)v3 + 7) + 8) + 24)) {
    return (id)dispatch_semaphore_signal(*((dispatch_semaphore_t *)v3 + 4));
  }
  return result;
}

id sub_100027B40(id result, void *a2, uint64_t a3)
{
  id v3 = result;
  if (a2)
  {
    if (!a3)
    {
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      uint64_t result = [a2 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (result)
      {
        id v5 = result;
        uint64_t v6 = *(void *)v10;
        do
        {
          id v7 = 0;
          do
          {
            if (*(void *)v10 != v6) {
              objc_enumerationMutation(a2);
            }
            id v8 = *(void **)(*((void *)&v9 + 1) + 8 * (void)v7);
            if (![v8 type] || objc_msgSend(v8, "type") == (id)1) {
              *(unsigned char *)(*(void *)(*((void *)v3 + 5) + 8) + 24) = 1;
            }
            id v7 = (char *)v7 + 1;
          }
          while (v5 != v7);
          uint64_t result = [a2 countByEnumeratingWithState:&v9 objects:v13 count:16];
          id v5 = result;
        }
        while (result);
      }
    }
  }
  if (!*(unsigned char *)(*(void *)(*((void *)v3 + 6) + 8) + 24)) {
    return (id)dispatch_semaphore_signal(*((dispatch_semaphore_t *)v3 + 4));
  }
  return result;
}

id sub_100027C78(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setAccuracyOfBestReading:*(double *)(a1 + 40)];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setBestLatitudeReading:*(double *)(a1 + 48)];
  double v2 = *(double *)(a1 + 56);
  id v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);

  return [v3 setBestLongitudeReading:v2];
}

void sub_100028244(id a1)
{
  qword_10027D5A0 = objc_alloc_init(WiFiAnalyticsManager);
}

void sub_100028DD4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100028DEC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) deviceAnalyticsClient])
  {
    [*(id *)(a1 + 32) deviceAnalyticsClient] neighborChannelsForBSS:*(void *)(a1 + 40) ssid:*(void *)(a1 + 48);
    double v2 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    id v3 = +[NSMutableArray array];
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v4 = [v2 countByEnumeratingWithState:&v24 objects:v29 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v25;
      do
      {
        id v7 = 0;
        do
        {
          if (*(void *)v25 != v6) {
            objc_enumerationMutation(v2);
          }
          [v3 addObject:*(void *)(*((void *)&v24 + 1) + 8 * (void)v7)];
          id v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v2 countByEnumeratingWithState:&v24 objects:v29 count:16];
      }
      while (v5);
    }
    id v8 = [NSNumber numberWithInteger:[objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "deviceAnalyticsClient"), "rssiRoamTriggerForBSS:ssid:", *(void *)(a1 + 40), *(void *)(a1 + 48))];
    id v9 = [objc_msgSend(*(id *)(a1 + 32), "deviceAnalyticsClient") neighborsForBSS:*(void *)(a1 + 40) ssid:*(void *)(a1 + 48)];
    id v10 = +[NSMutableArray array];
    if (v9)
    {
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      id v11 = [v9 countByEnumeratingWithState:&v20 objects:v28 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v21;
        do
        {
          __int16 v14 = 0;
          do
          {
            if (*(void *)v21 != v13) {
              objc_enumerationMutation(v9);
            }
            [v10 addObject:*(void *)(*((void *)&v20 + 1) + 8 * (void)v14)];
            __int16 v14 = (char *)v14 + 1;
          }
          while (v12 != v14);
          id v12 = [v9 countByEnumeratingWithState:&v20 objects:v28 count:16];
        }
        while (v12);
      }
    }
    id v15 = +[NSMutableDictionary dictionary];
    id v16 = v15;
    if (v3) {
      [v15 setObject:v3 forKey:@"ADAPTIVE_ROAM_CHANNELS_INFO"];
    }
    if (v10) {
      [v16 setObject:v10 forKey:@"SCAN_BSSID_LIST"];
    }
  }
  else
  {
    id v16 = +[NSMutableDictionary dictionary];
    id v8 = (NSNumber *)&off_100262D58;
  }
  [v16 setObject:v8 forKey:@"ADAPTIVE_ROAM_RSSI_TRIGGER"];
  if ([*(id *)(a1 + 32) wifiManager])
  {
    if (sub_100005EFC((uint64_t)[*(id *)(a1 + 32) wifiManager]))
    {
      BOOL v17 = sub_100005EFC((uint64_t)[*(id *)(a1 + 32) wifiManager]);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_1000290E0;
      v19[3] = &unk_10023EC30;
      uint64_t v18 = *(void *)(a1 + 32);
      v19[4] = v16;
      void v19[5] = v18;
      dispatch_sync(v17, v19);
    }
  }
}

id sub_1000290E0(uint64_t a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: request %@", "-[WiFiAnalyticsManager getAdaptiveRoamParams:ssid:]_block_invoke", *(void *)(a1 + 32) message];
  }
  sub_1000AC374((uint64_t)[*(id *)(a1 + 40) wifiManager], *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);

  return [v3 setRoamParamsQueryPending:0];
}

int sub_100029878(id a1, unsigned int a2, unsigned int a3)
{
  return sub_1000C8A64(a2, a3);
}

void sub_100029D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100029D5C(uint64_t a1)
{
  double v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v3 = [[objc_msgSend(v2, "deviceAnalyticsClient") copyAllStoredNetworkSsidsWithTrait:0];
  if (v3)
  {
    id v4 = v3;
    [objc_msgSend(v2, "movingNetworkSsidsCache") removeAllObjects];
    [*(id *)(*(void *)(a1 + 32) + 40) addObjectsFromArray:v4];
  }
  id v5 = [[objc_msgSend(v2, "deviceAnalyticsClient") copyAllStoredNetworkSsidsWithTrait:1];
  if (v5)
  {
    uint64_t v6 = v5;
    [objc_msgSend(v2, "omnipresentNetworkSsidsCache") removeAllObjects];
    [objc_msgSend(v2, "omnipresentNetworkSsidsCache") addObjectsFromArray:v6];
  }
  id v7 = [[objc_msgSend(v2, "deviceAnalyticsClient") copyAllStoredNetworkSsidsWithTrait:2];
  if (v7)
  {
    id v8 = v7;
    [objc_msgSend(v2, "historicallyBadLinkQualityNetworkSsidsCache") removeAllObjects];
    [objc_msgSend(v2, "historicallyBadLinkQualityNetworkSsidsCache") addObjectsFromArray:v8];
  }
  [v2 setDateTraitCachesUpdated:[NSDate date]];
  [v2 setTraitsCacheUpdateBusy:0];
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Network traits caches updated at %@", "-[WiFiAnalyticsManager updateNetworkTraitsCache]_block_invoke", [v2 dateTraitCachesUpdated]);
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Moving Networks: %@", "-[WiFiAnalyticsManager updateNetworkTraitsCache]_block_invoke", [v2 movingNetworkSsidsCache]);
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Omnipresent Networks: %@", "-[WiFiAnalyticsManager updateNetworkTraitsCache]_block_invoke", [v2 omnipresentNetworkSsidsCache]);
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: HistoricallyBadQuality networks: %@", "-[WiFiAnalyticsManager updateNetworkTraitsCache]_block_invoke", [v2 historicallyBadLinkQualityNetworkSsidsCache]);
  }
}

void sub_10002AD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_10002ADD8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v8 = [a2 objectForKeyedSubscript:@"cachedSsid"];
  id v9 = [a2 objectForKeyedSubscript:@"cachedDate"];
  id v10 = [a2 objectForKeyedSubscript:@"cachedUsageDict"];
  if (v8 && v9 && (id v11 = v10) != 0)
  {
    [v9 timeIntervalSinceNow];
    if (v12 < -43200.0)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Will remove object from usageCache for ssid %@", "-[WiFiAnalyticsManager getNetworkUsageDictionary:]_block_invoke", v8 message];
      }
      [*(id *)(a1 + 32) addIndex:a3];
      if ([v8 isEqualToString:*(void *)(a1 + 40)]) {
        goto LABEL_17;
      }
    }
    else
    {
      double v13 = -v12;
      uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
      if (*(double *)(v14 + 24) < v13)
      {
        *(double *)(v14 + 24) = v13;
        *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a3;
        *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) = v8;
      }
      if ([v8 isEqualToString:*(void *)(a1 + 40)])
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Using object from usageCache for ssid %@", "-[WiFiAnalyticsManager getNetworkUsageDictionary:]_block_invoke", *(void *)(a1 + 40) message];
        }
        *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) = v11;
LABEL_17:
        *a4 = 1;
      }
    }
  }
  else
  {
    id v16 = *(void **)(a1 + 32);
    [v16 addIndex:a3];
  }
}

uint64_t sub_10002B050(void *a1, const void *a2, void *a3, void *a4)
{
  id v7 = a1;
  if (!_os_feature_enabled_impl())
  {
    id v8 = 0;
    id v9 = 0;
    goto LABEL_26;
  }
  id v17 = 0;
  id v8 = sub_10002B220(v7, a2, &v17);
  id v9 = v17;
  if (!v8)
  {
LABEL_26:
    uint64_t v10 = 0;
    goto LABEL_24;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if ([v8 state] == (id)25) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = 2;
    }
    if (a3 && v9) {
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (([v8 performSelector:"accessoryOptions"] & 2) != 0)
  {
    if ([v8 state] == (id)25) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = 2;
    }
    if (a3 && v9)
    {
LABEL_17:
      *a3 = [v9 name];
    }
LABEL_18:
    if (a4 && v9)
    {
      *a4 = [v9 identifier];
    }
    goto LABEL_21;
  }
  uint64_t v10 = 3;
LABEL_21:
  double v12 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    id v13 = [v8 state];
    uint64_t v14 = [v9 name];
    id v15 = [v9 identifier];
    [v12 WFLog:3, "%s: info.state=%ld deviceName='%@' deviceIdentifier='%@'", "WiFiDeviceAccessCheckIfAppIsAuthorizedForNetwork", v13, v14, v15 message];
  }
LABEL_24:

  return v10;
}

id sub_10002B220(void *a1, const void *a2, void *a3)
{
  id v32 = a1;
  if (objc_opt_class())
  {
    id v5 = sub_10001A43C(a2);
    id v6 = objc_alloc_init((Class)DASession);
    id v7 = +[DASession getDevicesWithFlags:8 session:v6 error:0];
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: devices found = '%@'", "__WiFiDeviceAccessGetAppAccessInfoForNetwork", v7 message];
    }
    if (v7)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      obCFIndex j = v7;
      id v9 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
      if (v9)
      {
        id v10 = v9;
        uint64_t v28 = a3;
        uint64_t v29 = v7;
        id v30 = v6;
        uint64_t v11 = *(void *)v34;
        while (2)
        {
          for (CFIndex i = 0; i != v10; CFIndex i = (char *)i + 1)
          {
            if (*(void *)v34 != v11) {
              objc_enumerationMutation(obj);
            }
            id v13 = *(void **)(*((void *)&v33 + 1) + 8 * i);
            id v15 = (void *)qword_10027DD68;
            if (qword_10027DD68)
            {
              id v16 = [v13 SSID];
              [v15 WFLog:3, "%s: device='%@' SSID='%@'", "__WiFiDeviceAccessGetAppAccessInfoForNetwork", v13, v16 message];
            }
            id v17 = [v13 SSID];
            unsigned int v18 = [v17 isEqualToString:v5];

            if (v18)
            {
              long long v20 = (void *)qword_10027DD68;
              if (qword_10027DD68)
              {
                long long v21 = [v13 appAccessInfoMap];
                [v20 WFLog:3, "%s: appAccessInfoMap '%@'", "__WiFiDeviceAccessGetAppAccessInfoForNetwork", v21 message];
              }
              long long v22 = [v13 appAccessInfoMap];
              long long v23 = [v22 objectForKey:v32];

              if (v23)
              {
                id v25 = v23;
                id v6 = v30;
                if (v28) {
                  *uint64_t v28 = v13;
                }
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: matching device found for '%@' with state = '%ld'", "__WiFiDeviceAccessGetAppAccessInfoForNetwork", v5, [v25 state]];
                }

                goto LABEL_28;
              }
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: matching device found for '%@' with no access info for bundle = '%@'", "__WiFiDeviceAccessGetAppAccessInfoForNetwork", v5, v32 message];
              }
            }
          }
          id v10 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
          if (v10) {
            continue;
          }
          break;
        }
        id v25 = 0;
        id v6 = v30;
LABEL_28:
        id v7 = v29;
      }
      else
      {
        id v25 = 0;
      }
    }
    else
    {
      id v25 = 0;
    }
  }
  else
  {
    id v25 = 0;
  }

  return v25;
}

uint64_t sub_10002B574(void *a1, const void *a2)
{
  id v3 = a1;
  if (_os_feature_enabled_impl())
  {
    id v10 = 0;
    id v4 = sub_10002B220(v3, a2, &v10);
    id v5 = v10;
    if (v4)
    {
      if (objc_opt_class())
      {
        id v6 = objc_alloc_init((Class)DASession);
        [v4 setState:0];
        +[DASession setDeviceAppAccessInfo:v4 device:v5 session:v6 error:0];
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: removed device access device = '%@' for networint k = '%@'", "WiFiDeviceAccessRemoveAccessForNetwork", v5, a2 message];
        }
      }
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    id v5 = 0;
    id v4 = 0;
  }

  return v8;
}

void sub_10002B6A8(void *a1, const void *a2, char a3)
{
  id v5 = a1;
  if (!_os_feature_enabled_impl())
  {
    uint64_t v8 = 0;
    id v6 = 0;
    goto LABEL_20;
  }
  id v15 = 0;
  id v6 = sub_10002B220(v5, a2, &v15);
  id v7 = v15;
  uint64_t v8 = v7;
  if (v6 && v7 && objc_opt_class())
  {
    id v9 = objc_alloc_init((Class)DASession);
    unint64_t v10 = (unint64_t)[v8 flags];
    uint64_t v11 = v10 & 0x80;
    if ((a3 & 2) == 0 || (v10 & 0x80) != 0)
    {
      if ((a3 & 2) != 0 || (v10 & 0x80) == 0)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no changes to device flags (%lu)", "WiFiDeviceAccessUpdateDeviceFlags", v10, v14);
        }
        goto LABEL_19;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: removed unsecured flag" arguments:("WiFiDeviceAccessUpdateDeviceFlags")];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: added unsecured flag", "WiFiDeviceAccessUpdateDeviceFlags")];
      }
      uint64_t v11 = v10 | 0x80;
    }
    [v8 setFlags:v11];
    +[DASession setDeviceAppAccessInfo:v6 device:v8 session:v9 error:0];
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: updated device flags to = '%lu' for networint k = '%@'", "WiFiDeviceAccessUpdateDeviceFlags", v11, a2 message];
    }
LABEL_19:
  }
LABEL_20:
}

void sub_10002DB74(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Launching TapToRadar:errorType:%u", "-[WiFiSoftErrorManager WiFiSoftErrorReporting:deviceContext:displayString:]_block_invoke", *(unsigned int *)(a1 + 64));
  }
  [*(id *)(a1 + 32) launchTapToRadar:*(unsigned int *)(a1 + 64) displayString:*(void *)(a1 + 48) deviceContext:*(void *)(a1 + 56)];
  id v3 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_10002DD0C(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Perform mitigation action: for Event:%u", *(unsigned int *)(a1 + 48));
  }
  int v3 = *(_DWORD *)(a1 + 48);
  switch(v3)
  {
    case 1:
      id v4 = *(void **)(a1 + 32);
      uint64_t v5 = 1;
      goto LABEL_10;
    case 2:
      sub_1000F4564(*(void *)(a1 + 40), 0);
      id v6 = *(void **)(a1 + 32);
      uint64_t v7 = 2;
      goto LABEL_14;
    case 3:
    case 5:
    case 6:
    case 7:
      return;
    case 4:
      id v4 = *(void **)(a1 + 32);
      uint64_t v5 = 4;
      goto LABEL_10;
    case 8:
      sub_100121A28(*(void *)(a1 + 40), 0, 0, 0, 0, 0);
      id v6 = *(void **)(a1 + 32);
      uint64_t v7 = 8;
LABEL_14:
      [v6 recordMitigation:v7];
      break;
    default:
      if (v3 == 16)
      {
        id v4 = *(void **)(a1 + 32);
        uint64_t v5 = 16;
LABEL_10:
        [v4 wifiSoftErrorsInProcessStateUnset:v5];
      }
      break;
  }
}

id sub_10002F928(void *a1)
{
  id v1 = a1;
  double v2 = v1;
  if (v1)
  {
    id v3 = [v1 getErrorCounters];
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s:SoftErrorManagerRef is NULL!", "WiFiSoftErrorManagerGetErrorCounters")];
    }
    id v3 = 0;
  }

  return v3;
}

void sub_10002FC1C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100031E98(id a1)
{
  if (objc_opt_class()) {
    qword_10027D5C0 = objc_alloc_init(ManagedConfigWrapper);
  }
}

void sub_10003219C(uint64_t a1)
{
  sub_1000A9350(*(void *)(*(void *)(a1 + 32) + 16), *(unsigned __int8 *)(a1 + 40));
  sub_1000A94A0(*(void *)(*(void *)(a1 + 32) + 16), *(unsigned __int8 *)(a1 + 41));
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16);
  int v3 = *(unsigned __int8 *)(a1 + 42);

  sub_1000A2E34(v2, v3);
}

void sub_1000322D8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: failed to initialize ManagedConfiguration <%@>", "-[ManagedConfigWrapper MCInitialize]_block_invoke", a2 message];
    }
  }
  else
  {
    [*(id *)(a1 + 32) setMcInitialized:1];
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: ManagedConfiguration initialized", "-[ManagedConfigWrapper MCInitialize]_block_invoke", v4);
    }
  }
}

id sub_100032434(uint64_t a1)
{
  [*(id *)(a1 + 32) MCInitialize];
  [*(id *)(a1 + 32) startMonitoring];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 MCSettingsDidChange:0];
}

uint64_t sub_100032B2C()
{
  uint64_t result = qword_10027D5D0;
  if (!qword_10027D5D0)
  {
    pthread_once(&stru_10027C500, (void (*)(void))sub_100032B74);
    return qword_10027D5D0;
  }
  return result;
}

uint64_t sub_100032B74()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_10027D5D0 = result;
  return result;
}

void *sub_100032B9C(const __CFAllocator *a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"PolicyType");
    if (Value)
    {
      uint64_t v5 = Value;
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID != CFGetTypeID(v5)) {
        return 0;
      }
    }
  }
  if (!qword_10027D5D0) {
    pthread_once(&stru_10027C500, (void (*)(void))sub_100032B74);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v8 = (void *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0;
    CFMutableDictionaryRef v9 = theDict
       ? CFDictionaryCreateMutableCopy(a1, 0, theDict)
       : CFDictionaryCreateMutable(a1, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v8[2] = v9;
    if (!v9)
    {
      CFRelease(v8);
      return 0;
    }
  }
  return v8;
}

void *sub_100032C94(const __CFAllocator *a1, const void *a2, const void *a3, const void *a4)
{
  if (!a2) {
    return 0;
  }
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 0;
  }
  CFMutableDictionaryRef v9 = Mutable;
  CFDictionaryAddValue(Mutable, @"PolicyType", a2);
  if (a3)
  {
    CFDictionaryAddValue(v9, @"PolicyUUID", a3);
    CFUUIDRef v10 = 0;
    CFStringRef v11 = 0;
    if (!a4)
    {
LABEL_6:
      double v12 = sub_100032B9C(a1, v9);
      if (v11) {
        CFRelease(v11);
      }
      if (v10) {
        CFRelease(v10);
      }
      goto LABEL_10;
    }
LABEL_5:
    CFDictionaryAddValue(v9, @"PolicyProperties", a4);
    goto LABEL_6;
  }
  CFUUIDRef v14 = CFUUIDCreate(a1);
  if (v14)
  {
    CFUUIDRef v10 = v14;
    CFStringRef v11 = CFUUIDCreateString(a1, v14);
    CFDictionaryAddValue(v9, @"PolicyUUID", v11);
    if (!a4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  double v12 = 0;
LABEL_10:
  CFRelease(v9);
  return v12;
}

void sub_100032DBC(uint64_t a1, void *value)
{
  if (a1)
  {
    if (value) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), @"PolicyUUID", value);
    }
  }
}

const void *sub_100032DDC(uint64_t a1)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"PolicyUUID");
}

void sub_100032DEC(uint64_t a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (v3)
  {
    CFNumberRef v4 = v3;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), @"PolicyType", v3);
    CFRelease(v4);
  }
}

uint64_t sub_100032E54(uint64_t a1)
{
  uint64_t v1 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"PolicyType");
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    return valuePtr;
  }
  return v1;
}

void sub_100032EA8(uint64_t a1, const void *a2, const void *a3)
{
  CFNumberRef Value = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"PolicyProperties");
  if (Value)
  {
    if (a3)
    {
      CFDictionarySetValue(Value, a2, a3);
    }
    else
    {
      CFDictionaryRemoveValue(Value, a2);
    }
  }
}

CFDictionaryRef sub_100032F24(uint64_t a1, const void *a2)
{
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"PolicyProperties");
  if (result)
  {
    return (const __CFDictionary *)CFDictionaryGetValue(result, a2);
  }
  return result;
}

__CFArray *sub_100032F78(const __CFArray *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFNumberRef v3 = Mutable;
  if (a1)
  {
    if (Mutable)
    {
      CFIndex Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        CFIndex v5 = Count;
        for (CFIndex i = 0; i != v5; ++i)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, i);
          if (ValueAtIndex)
          {
            uint64_t v8 = sub_100032B9C(kCFAllocatorDefault, ValueAtIndex);
            if (v8)
            {
              CFMutableDictionaryRef v9 = v8;
              CFArrayAppendValue(v3, v8);
              CFRelease(v9);
            }
          }
        }
      }
    }
  }
  return v3;
}

__CFArray *sub_100033034(const __CFArray *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFNumberRef v3 = Mutable;
  if (a1)
  {
    if (Mutable)
    {
      CFIndex Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        CFIndex v5 = Count;
        for (CFIndex i = 0; i != v5; ++i)
        {
          CFDictionaryRef ValueAtIndex = (CFDictionaryRef *)CFArrayGetValueAtIndex(a1, i);
          if (ValueAtIndex)
          {
            CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, ValueAtIndex[2]);
            if (Copy)
            {
              CFDictionaryRef v9 = Copy;
              CFArrayAppendValue(v3, Copy);
              CFRelease(v9);
            }
          }
        }
      }
    }
  }
  return v3;
}

void sub_1000330F0(void *a1)
{
  if (!a1) {
    sub_100195EC4();
  }
  CFTypeID v2 = CFGetTypeID(a1);
  uint64_t v3 = qword_10027D5D0;
  if (!qword_10027D5D0)
  {
    pthread_once(&stru_10027C500, (void (*)(void))sub_100032B74);
    uint64_t v3 = qword_10027D5D0;
  }
  if (v2 != v3) {
    sub_100195EF0();
  }
  CFNumberRef v4 = (const void *)a1[2];
  if (v4)
  {
    CFRelease(v4);
    a1[2] = 0;
  }
}

BOOL sub_100033170(uint64_t a1, uint64_t a2)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"PolicyUUID");
  CFStringRef v4 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 16), @"PolicyUUID");
  if (Value) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  return !v5 && CFEqual(Value, v4);
}

CFStringRef sub_1000331EC(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v4 = sub_100032E54(a1);
  CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"PolicyUUID");
  return CFStringCreateWithFormat(kCFAllocatorDefault, a2, @"%d %@", v4, Value);
}

CFStringRef sub_10003325C(uint64_t a1)
{
  uint64_t v2 = sub_100032E54(a1);
  CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"PolicyUUID");
  return CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%d %@", v2, Value);
}

NSString *sub_1000334A8(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const char *)[a1 UTF8String];
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = ether_aton(v2);
      if (v4) {
        return +[NSString stringWithFormat:@"%02x:%02x:%02x:%02x:%02x:%02x", v4->octet[0], v4->octet[1], v4->octet[2], v4->octet[3], v4->octet[4], v4->octet[5]];
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: badly formatted MAC address: %s", "_reformatMacAddress", v3);
      }
      uint64_t v7 = v8;
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: invalid MAC address: %@", "_reformatMacAddress", a1 message];
      }
      uint64_t v7 = v6;
    }
  }
  return 0;
}

void sub_1000337DC(id a1)
{
  qword_10027D5D8 = objc_alloc_init(WiFiCWFInterface);
}

id sub_100033C04(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  id v8 = objc_alloc_init((Class)CWFSensingResult);
  [v8 setData:[a3 copy]];
  id v9 = +[NSMutableDictionary dictionary];
  [v9 setObject:a5 forKeyedSubscript:@"CWF_ACCESSORY_UUID"];
  [v9 setObject:v8 forKeyedSubscript:@"SensingResult"];
  [v9 setObject:+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"CWFHomeKitErrorDomain", a4, 0) forKeyedSubscript:@"WiFiInterfaceReturn"];
  CFUUIDRef v10 = +[NSNotificationCenter defaultCenter];

  return [(NSNotificationCenter *)v10 postNotificationName:@"SensingResult" object:0 userInfo:v9];
}

void sub_10003430C(uint64_t a1, uint64_t a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100034388;
  v2[3] = &unk_10023F048;
  void v2[4] = a2;
  void v2[5] = a1;
  dispatch_async((dispatch_queue_t)qword_10027DD88, v2);
}

void sub_100034388(uint64_t a1)
{
  CFTypeRef cf = 0;
  unsigned __int8 v11 = 1;
  unsigned __int8 v10 = 0;
  if (*(void *)(a1 + 32))
  {
    unint64_t v2 = _CTServerConnectionCopyCellularTransmitState();
    if (v2) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = cf == 0;
    }
    if (!v3)
    {
      sub_1000344E0((const __CFDictionary *)cf, &v11, &v10);
      unsigned int v5 = v11;
      unsigned int v6 = v10;
      goto LABEL_10;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: error getting cellular trnasmit state. error=%d, domain=%d", "WiFiCellularNotificationsUpdateTxState_block_invoke", HIDWORD(v2), v2];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:@"%s: no CTServer reference" message:4, v8, v9];
    }
  }
  unsigned int v6 = 0;
  unsigned int v5 = 1;
LABEL_10:
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: update cellularTxStarted %d, isShort %d", "WiFiCellularNotificationsUpdateTxState_block_invoke", v5, v6);
  }
  sub_1000A1160(*(void *)(a1 + 40), v5, v6);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1000344E0(const __CFDictionary *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  CFTypeID TypeID = CFStringGetTypeID();
  CFStringRef v7 = (const __CFString *)kCTCellularTransmitStateConnected;
  if (TypeID != CFGetTypeID(kCTCellularTransmitStateConnected))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: bad kCTCellularTransmitStateConnected type %ld", "__WiFiCellularNotificationsGetState", CFGetTypeID(v7)];
    }
    goto LABEL_60;
  }
  CFTypeID v8 = CFStringGetTypeID();
  CFStringRef v9 = (const __CFString *)kCTCellularTransmitStateIdle;
  if (v8 != CFGetTypeID(kCTCellularTransmitStateIdle))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: bad kCTCellularTransmitStateIdle type %ld", "__WiFiCellularNotificationsGetState", CFGetTypeID(v9));
    }
    goto LABEL_60;
  }
  CFTypeID v10 = CFStringGetTypeID();
  CFStringRef v11 = (const __CFString *)kCTCellularShortTransmitStart;
  if (v10 != CFGetTypeID(kCTCellularShortTransmitStart))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: bad kCTCellularShortTransmitStart type %ld", "__WiFiCellularNotificationsGetState", CFGetTypeID(v11));
    }
    goto LABEL_60;
  }
  CFTypeID v12 = CFStringGetTypeID();
  CFStringRef v13 = (const __CFString *)kCTCellularShortTransmitEnd;
  if (v12 != CFGetTypeID(kCTCellularShortTransmitEnd))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: bad kCTCellularShortTransmitEnd type %ld", "__WiFiCellularNotificationsGetState", CFGetTypeID(v13));
    }
    goto LABEL_60;
  }
  CFTypeID v14 = CFStringGetTypeID();
  CFStringRef v15 = (const __CFString *)kCTCellularLongTransmitEnd;
  if (v14 != CFGetTypeID(kCTCellularLongTransmitEnd))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: bad kCTCellularLongTransmitEnd type %ld", "__WiFiCellularNotificationsGetState", CFGetTypeID(v15));
    }
    goto LABEL_60;
  }
  CFTypeID v16 = CFStringGetTypeID();
  CFStringRef v17 = (const __CFString *)kCTCellularLongTransmitStart;
  if (v16 != CFGetTypeID(kCTCellularLongTransmitStart))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: bad kCTCellularLongTransmitStart type %ld", "__WiFiCellularNotificationsGetState", CFGetTypeID(v17));
    }
LABEL_60:
    long long v27 = v32;
    goto LABEL_44;
  }
  *a2 = 1;
  *a3 = 1;
  unsigned int v18 = (const void *)kKeyCTCellularTransmitState;
  if (CFDictionaryContainsKey(a1, kKeyCTCellularTransmitState))
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, v18);
    if (!Value) {
      goto LABEL_47;
    }
    CFStringRef v20 = Value;
    long long v34 = a3;
    CFTypeID v21 = CFStringGetTypeID();
    BOOL v22 = v21 == CFGetTypeID(v20);
    a3 = v34;
    if (!v22) {
      goto LABEL_47;
    }
    if (CFStringCompare(v20, v7, 0) && CFStringCompare(v20, v9, 0))
    {
      if (CFEqual(v20, kCTCellularTransmitStopped))
      {
        *a2 = 0;
        *long long v34 = 0;
      }
      if (qword_10027DD68)
      {
        long long v24 = "TRUE";
        if (*a2) {
          id v25 = "TRUE";
        }
        else {
          id v25 = "FALSE";
        }
        if (!*v34) {
          long long v24 = "FALSE";
        }
        [(id)qword_10027DD68 WFLog:3, "%s: old scheme transmitState %@, cellularTxStarted %s, isShort %s", "__WiFiCellularNotificationsGetState", v20, v25, v24, v33 message];
      }
    }
    else
    {
      if (CFEqual(v20, v9))
      {
LABEL_47:
        *a2 = 0;
        *a3 = 0;
        return;
      }
      CFStringRef v28 = (const __CFString *)CFDictionaryGetValue(a1, kKeyCTCellularTransmitTrigger);
      if (!v28) {
        goto LABEL_35;
      }
      CFTypeID v29 = CFStringGetTypeID();
      BOOL v22 = v29 == CFGetTypeID(v28);
      a3 = v34;
      if (!v22) {
        goto LABEL_35;
      }
      if (CFEqual(v28, v11))
      {
        *a2 = 1;
        *long long v34 = 1;
      }
      if (CFEqual(v28, v13) || CFEqual(v28, v15))
      {
        *a2 = 0;
        *long long v34 = 1;
      }
      if (CFEqual(v28, v17))
      {
LABEL_35:
        *a2 = 1;
        *a3 = 0;
      }
      if (qword_10027DD68)
      {
        id v30 = "TRUE";
        if (*a2) {
          int v31 = "TRUE";
        }
        else {
          int v31 = "FALSE";
        }
        if (!*a3) {
          id v30 = "FALSE";
        }
        [(id)qword_10027DD68 WFLog:3, "%s: new scheme transmitState %@, transmitTrigger %@, cellularTxStarted %s, isShort %s", "__WiFiCellularNotificationsGetState", v20, v28, v31, v30 message];
      }
    }
    long long v27 = v23;
  }
  else
  {
    *a2 = 0;
    *a3 = 0;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Baseband appears to be dead. cellularTxStarted %d, isShort %d", @"__WiFiCellularNotificationsGetState", *a2, *a3];
    }
    long long v27 = v26;
  }
LABEL_44:
}

void sub_100034A1C(uint64_t a1, uint64_t a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100034A98;
  v2[3] = &unk_10023F048;
  void v2[4] = a2;
  void v2[5] = a1;
  dispatch_async((dispatch_queue_t)qword_10027DD88, v2);
}

void sub_100034A98(uint64_t a1)
{
  CFBooleanRef value = 0;
  CFDictionaryRef theDict = 0;
  if (*(void *)(a1 + 32))
  {
    unint64_t v2 = _CTServerConnectionCopyReliableNetworkFallbackSettings();
    if (v2) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = theDict == 0;
    }
    if (!v3)
    {
      if (CFDictionaryGetValueIfPresent(theDict, kCTReliableNetworkFallbackToCellularUserPreferenceKey, (const void **)&value))
      {
        BOOL v7 = value == 0;
      }
      else
      {
        BOOL v7 = 1;
      }
      char v5 = !v7 && value == kCFBooleanTrue;
      goto LABEL_19;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: error getting RNF state. error=%d, domain=%d", "WiFiCellularNotificationsUpdateRNFState_block_invoke", HIDWORD(v2), v2);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: no CTServer reference", "WiFiCellularNotificationsUpdateRNFState_block_invoke", v9, v10);
    }
  }
  char v5 = 0;
LABEL_19:
  sub_1000A0D28(*(void *)(a1 + 40), v5);
  if (theDict) {
    CFRelease(theDict);
  }
}

void sub_100034BB8(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: start monitoring", "void WiFiCellularNotificationsStartMonitoring(WiFiManagerRef, CTServerConnectionRef)");
  }
  if (a2)
  {
    _CTServerConnectionSetTargetQueue();
    uint64_t v4 = kCTCellularTransmitStateNotification;
    unint64_t v5 = _CTServerConnectionRegisterBlockForNotification();
    if (v5)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: error subscribing to %@ notification error=%d, domain=%d", "WiFiCellularNotificationsStartMonitoring", v4, HIDWORD(v5), v5 message];
      }
    }
    uint64_t v7 = kCTReliableNetworkFallbackToCellularChangedNotification;
    unint64_t v8 = _CTServerConnectionRegisterBlockForNotification();
    if (v8)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: error subscribing to %@ notification error=%d, domain=%d", "WiFiCellularNotificationsStartMonitoring", v7, HIDWORD(v8), v8 message];
      }
    }
    uint64_t v10 = kCTIMSConnectionChangedNotification;
    unint64_t v11 = _CTServerConnectionRegisterBlockForNotification();
    if (v11)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: error subscribing to %@ notification error=%d, domain=%d", "WiFiCellularNotificationsStartMonitoring", v10, HIDWORD(v11), v11 message];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: error creating CTServer reference" args:("WiFiCellularNotificationsStartMonitoring", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    }
  }
}

void sub_100034EA8(uint64_t a1, const __CFDictionary *a2)
{
  char v8 = 1;
  char v7 = 0;
  if (a2)
  {
    sub_1000344E0(a2, (unsigned __int8 *)&v8, (unsigned __int8 *)&v7);
    char v4 = v8;
    char v5 = v7;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: update cellularTxStarted %d, isShort %d", "WiFiCellularNotificationsStartMonitoring_block_invoke", v8, v7)];
    }
    uint64_t v6 = *(void *)(a1 + 32);
    sub_1000A1160(v6, v4, v5);
  }
}

void sub_100034F74(uint64_t a1, CFDictionaryRef theDict)
{
  CFBooleanRef value = 0;
  if (theDict)
  {
    if (CFDictionaryGetValueIfPresent(theDict, kCTReliableNetworkFallbackToCellularUserPreferenceKey, (const void **)&value))
    {
      BOOL v3 = value == 0;
    }
    else
    {
      BOOL v3 = 1;
    }
    char v5 = !v3 && value == kCFBooleanTrue;
    sub_1000A0D28(*(void *)(a1 + 32), v5);
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"No Info from CT for RNF State Change !"];
    }
  }
}

void sub_100035034(uint64_t a1, CFDictionaryRef theDict)
{
  CFStringRef theString1 = 0;
  CFBooleanRef value = 0;
  if (theDict)
  {
    if (CFDictionaryGetValueIfPresent(theDict, kCTIMSIsConnectionUp, (const void **)&value)) {
      BOOL v4 = value == 0;
    }
    else {
      BOOL v4 = 1;
    }
    char v6 = !v4 && value == kCFBooleanTrue;
    if (CFDictionaryGetValueIfPresent(theDict, kCTIMSConnectionType, (const void **)&theString1)) {
      BOOL v7 = theString1 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    char v9 = !v7 && CFEqual(theString1, kCTIMSConnectionTypeWifi);
    sub_1000A1270(*(void *)(a1 + 32), v6, v9);
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"No Info from CT for IMS State Change !"];
    }
  }
}

void sub_100035154(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: removing observer", "void WiFiCellularNotificationsStopMonitoring(WiFiManagerRef, CTServerConnectionRef)"]
  }
  if (a2)
  {
    _CTServerConnectionUnregisterForNotification();
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: error no CTServer reference", @"WiFiCellularNotificationsStopMonitoring"];
    }
  }
}

uint64_t sub_100035238(uint64_t a1, uint64_t a2, NSObject *a3)
{
  if (!a2) {
    goto LABEL_65;
  }
  if (!qword_10027D5F8) {
    pthread_once(&stru_10027C958, (void (*)(void))sub_10003EC54);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    goto LABEL_65;
  }
  uint64_t v6 = Instance;
  bzero((void *)(Instance + 16), 0xC80uLL);
  *(void *)(v6 + 32) = a2;
  *(_WORD *)(v6 + 220) = 256;
  *(_DWORD *)(v6 + 224) = 0;
  *(_DWORD *)(v6 + 2760) = 0;
  *(unsigned char *)(v6 + 160) = 1;
  *(CFAbsoluteTime *)(v6 + 80) = CFAbsoluteTimeGetCurrent();
  *(void *)(v6 + 16) = 1;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v6 + 24) = Mutable;
  if (!Mutable
    || (CFMutableArrayRef v8 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks), (*(void *)(v6 + 320) = v8) == 0)
    || (char v9 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM),
        dispatch_queue_t v10 = dispatch_queue_create("WiFiLQAManager", v9),
        (*(void *)(v6 + 296) = v10) == 0))
  {
LABEL_48:
    long long v34 = *(NSObject **)(v6 + 296);
    if (v34) {
      dispatch_release(v34);
    }
    long long v35 = *(NSObject **)(v6 + 544);
    if (v35)
    {
      dispatch_release(v35);
      *(void *)(v6 + 544) = 0;
    }
    long long v36 = *(NSObject **)(v6 + 336);
    if (v36)
    {
      dispatch_release(v36);
      *(void *)(v6 + 336) = 0;
    }
    long long v37 = *(NSObject **)(v6 + 2904);
    if (v37)
    {
      dispatch_release(v37);
      *(void *)(v6 + 2904) = 0;
    }
    long long v38 = *(NSObject **)(v6 + 2920);
    if (v38) {
      dispatch_release(v38);
    }
    long long v39 = *(const void **)(v6 + 24);
    if (v39)
    {
      CFRelease(v39);
      *(void *)(v6 + 24) = 0;
    }
    long long v40 = *(const void **)(v6 + 320);
    if (v40)
    {
      CFRelease(v40);
      *(void *)(v6 + 320) = 0;
    }
    long long v41 = *(const void **)(v6 + 112);
    if (v41)
    {
      CFRelease(v41);
      *(void *)(v6 + 112) = 0;
    }
    CFRelease((CFTypeRef)v6);
LABEL_65:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: LQAManager Create Failed\n", "WiFiLQAMgrCreate"];
    }
    uint64_t v6 = 0;
    goto LABEL_68;
  }
  unint64_t v11 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v6 + 336) = v11;
  if (!v11)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: failed to create activeProbe.timer", "WiFiLQAMgrCreate")
    }
    goto LABEL_73;
  }
  dispatch_set_context(v11, (void *)v6);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v6 + 336), (dispatch_function_t)sub_100035AF8);
  *(void *)(v6 + 344) = 0x100000005B8;
  *(_DWORD *)(v6 + 352) = 32;
  uint64_t v12 = sub_100017C48(*(void *)(v6 + 32));
  if (!v12)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: IfName is NULL" : @"__WiFiLQAMgrSetActiveProbeSize"];
    }
    goto LABEL_20;
  }
  CFStringRef v13 = (const __CFString *)v12;
  *(_OWORD *)buffer = 0u;
  long long v47 = 0u;
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  CFStringGetCString(v13, buffer, 16, SystemEncoding);
  int v15 = socket(2, 2, 0);
  if (v15 == -1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Socket failed to open" : @"__WiFiLQAMgrSetActiveProbeSize"];
    }
LABEL_20:
    goto LABEL_24;
  }
  int v16 = v15;
  if (ioctl(v15, 0xC0206933uLL, buffer) == -1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: ioctl(SIOCGIFMTU) failed" args:("__WiFiLQAMgrSetActiveProbeSize", v44)];
    }
  }
  else
  {
    uint64_t v17 = v47;
    if ((int)v47 >= 37)
    {
      *(int32x2_t *)(v6 + 344) = vmin_s32(vdup_n_s32(v47), (int32x2_t)0x100000005B8);
      *(_DWORD *)(v6 + 352) = 32;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:2, "%s: MTU Size: %d", "__WiFiLQAMgrSetActiveProbeSize", v17];
    }
  }
  close(v16);
LABEL_24:
  *(unsigned char *)(v6 + 645) = 0;
  *(_DWORD *)(v6 + 640) = 1;
  *(void *)(v6 + 648) = 0xFFFFFFB0FFFFFFB5;
  *(_DWORD *)(v6 + 664) = 10;
  *(_OWORD *)(v6 + 672) = xmmword_1001CB300;
  *(void *)(v6 + 688) = 0x4028000000000000;
  *(unsigned char *)(v6 + 647) = 1;
  *(unsigned char *)(v6 + 724) = 1;
  *(void *)(v6 + 728) = 0x3F00000000000005;
  *(_DWORD *)(v6 + 736) = 3;
  *(unsigned char *)(v6 + 788) = 1;
  *(void *)(v6 + 792) = 0x3F4000000000000FLL;
  *(void *)(v6 + 800) = 0x3F0000000000000FLL;
  *(unsigned char *)(v6 + 868) = 1;
  *(void *)(v6 + 872) = 0x3F4CCCCD00000005;
  *(void *)(v6 + 880) = 0x3F0000000000000FLL;
  *(unsigned char *)(v6 + 888) = 1;
  *(void *)(v6 + 892) = 0x3F00000000000003;
  *(unsigned char *)(v6 + 904) = 1;
  *(void *)(v6 + 912) = 0x4024000000000000;
  *(unsigned char *)(v6 + 920) = 1;
  *(_DWORD *)(v6 + 924) = 1;
  *(_WORD *)(v6 + 928) = 20481;
  *(unsigned char *)(v6 + 1296) = 0;
  *(unsigned char *)(v6 + 932) = 1;
  *(void *)(v6 + 936) = 0x3E80000000000005;
  *(_DWORD *)(v6 + 944) = 0;
  *(void *)(v6 + 712) = 0x3DCCCCCD3E99999ALL;
  *(unsigned char *)(v6 + 996) = 1;
  *(void *)(v6 + 1000) = 0x3F4000000000000FLL;
  *(void *)(v6 + 1008) = 0xFFFFFFFFLL;
  *(unsigned char *)(v6 + 1076) = 1;
  *(void *)(v6 + 1080) = 0x3F4CCCCD00000005;
  *(void *)(v6 + 1088) = 0xFFFFFFFFLL;
  *(unsigned char *)(v6 + 1096) = 1;
  *(void *)(v6 + 1100) = 0x3DCCCCCD00000005;
  *(_DWORD *)(v6 + 1108) = 0;
  *(_DWORD *)(v6 + 720) = 1028443341;
  *(unsigned char *)(v6 + 1160) = 1;
  *(void *)(v6 + 1164) = 0x3F0000000000000FLL;
  *(void *)(v6 + 1172) = 0xFFFFFFFFLL;
  *(unsigned char *)(v6 + 1240) = 1;
  *(void *)(v6 + 1244) = 0x3F00000000000005;
  *(void *)(v6 + 1252) = 0xFFFFFFFFLL;
  *(void *)(v6 + 656) = 0xFFFFFFA6FFFFFFABLL;
  *(void *)(v6 + 696) = 0x4024000000000000;
  *(void *)(v6 + 704) = 0x4014000000000000;
  *(_OWORD *)(v6 + 88) = xmmword_1001CB310;
  *(_DWORD *)(v6 + 104) = 0;
  *(unsigned char *)(v6 + 108) = 1;
  *(_DWORD *)(v6 + 2796) = 0;
  *(void *)(v6 + 2816) = 0;
  *(unsigned char *)(v6 + 2824) = 0;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(void *)(v6 + 152) = 0;
  CFMutableSetRef v20 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v6 + 112) = v20;
  if (!v20) {
    goto LABEL_48;
  }
  CFTypeID v21 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
  *(void *)(v6 + 544) = v21;
  if (!v21)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: failed to create roamTimer", "WiFiLQAMgrCreate")];
    }
LABEL_73:
    goto LABEL_48;
  }
  dispatch_set_context(v21, (void *)v6);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v6 + 544), (dispatch_function_t)sub_100035B78);
  if (!*(_DWORD *)(v6 + 420)
    && notify_register_mach_port("com.apple.symptoms.managed_events.wifi-trigger-disconnect", (mach_port_t *)(v6 + 420), 0, (int *)(v6 + 416)))
  {
    goto LABEL_48;
  }
  if (!*(_DWORD *)(v6 + 444)
    && notify_register_mach_port("com.apple.symptoms.managed_events.dns-failure", (mach_port_t *)(v6 + 444), 0, (int *)(v6 + 440)))
  {
    goto LABEL_48;
  }
  *(_DWORD *)(v6 + 1264) = 0;
  qword_10027D5E8 = v6;
  CFMutableArrayRef v22 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v6 + 256) = v22;
  if (!v22) {
    goto LABEL_48;
  }
  CFMutableArrayRef v23 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v6 + 264) = v23;
  if (!v23) {
    goto LABEL_48;
  }
  *(void *)(v6 + 528) = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100035D64;
  block[3] = &unk_10023EAF8;
  void block[4] = v6;
  *(void *)(v6 + 528) = tcp_connection_fallback_watcher_create();
  dispatch_async(*(dispatch_queue_t *)(v6 + 296), block);
  if (MGGetSInt32Answer() == 7)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"Audio accessory detected\n"];
    }
    *(unsigned char *)(v6 + 2832) = 1;
    *(void *)(v6 + 648) = 0xFFFFFFABFFFFFFB0;
  }
  *(unsigned char *)(v6 + 2792) = 0;
  *(_WORD *)(v6 + 2833) = 0;
  *(unsigned char *)(v6 + 2844) = 0;
  *(void *)(v6 + 2836) = 0;
  long long v26 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    int v27 = _os_feature_enabled_impl();
    CFStringRef v28 = "disabled";
    if (v27) {
      CFStringRef v28 = "enabled";
    }
    [v26 WFLog:3 message:@"%s: ColocatedScopeTransition Feature is %s", "WiFiLQAMgrCreate", v28];
  }
  CFTypeID v29 = [[WiFiTrafficEngManager alloc] initWithArgs:v6];
  *(void *)(v6 + 2968) = v29;
  if (!v29) {
    goto LABEL_48;
  }
  id v30 = [(WiFiTrafficEngManager *)v29 trafficEng];
  *(void *)(v6 + 2976) = v30;
  if (!v30) {
    goto LABEL_48;
  }
  *(_WORD *)(v6 + 2913) = 0;
  *(_DWORD *)(v6 + 2916) = 1;
  *(unsigned char *)(v6 + 2936) = 0;
  dispatch_queue_t v31 = dispatch_queue_create("TrafficEngineering", 0);
  *(void *)(v6 + 2920) = v31;
  if (!v31) {
    goto LABEL_48;
  }
  if (sub_100024D68(*(void *)(v6 + 32)))
  {
    id v32 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a3);
    *(void *)(v6 + 2904) = v32;
    dispatch_set_context(v32, (void *)v6);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v6 + 2904), (dispatch_function_t)sub_100035E80);
  }
  *(unsigned char *)(v6 + 2912) = 0;
  *(void *)(v6 + 2928) = 0;
  *(_WORD *)(v6 + 2985) = 8;
  *(void *)(v6 + 3200) = 0;
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:2, "%s: LQAManager Created\n", "WiFiLQAMgrCreate"];
  }
LABEL_68:
  return v6;
}

void sub_100035AF8(uint64_t a1)
{
  if (a1)
  {
    sub_1000413A0(a1);
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4,"%s: LQA mgr is null", "__WiFiLQAMgrActiveProbeTimerCallback"];
    }
  }
}

void sub_100035B78(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: LQA mgr is null" args:("__WiFiLQAMgrRoamTimerCallback")];
    }
    goto LABEL_24;
  }
  if (!*(unsigned char *)(a1 + 640))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: LQA mgr is disabled" : @"__WiFiLQAMgrRoamTimerCallback"];
    }
    goto LABEL_24;
  }
  CFArrayRef v2 = *(const __CFArray **)(a1 + 24);
  if (!v2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: LQM table is NULL", @"__WiFiLQAMgrRoamTimerCallback"];
    }
    goto LABEL_24;
  }
  if (!CFArrayGetCount(v2))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: LQM table is empty", "__WiFiLQAMgrRoamTimerCallback")];
    }
    goto LABEL_24;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
  if (!ValueAtIndex)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: Latest LQM Report is NULL", @"__WiFiLQAMgrRoamTimerCallback"];
    }
LABEL_24:
    return;
  }
  unsigned int valuePtr = *(_DWORD *)(a1 + 2796);
  if (!valuePtr)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"RSSI");
    if (!Value) {
      return;
    }
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  }
  if (*(_DWORD *)(a1 + 20) == 4)
  {
    char v5 = *(void (**)(uint64_t, void, void, void, void))(a1 + 552);
    if (v5) {
      v5(a1, *(void *)(a1 + 40), *(void *)(a1 + 560), valuePtr, 0);
    }
    *(unsigned char *)(a1 + 392) = 0;
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 336), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 544), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
}

void sub_100035D64(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 528))
  {
    uint64_t v2 = tcp_fallback_watcher_fallback_inuse();
    if (qword_10027DD68)
    {
      BOOL v4 = "off";
      if (v2) {
        BOOL v4 = "on";
      }
      [((id)qword_10027DD68) WFLog:message:4, "%s: cellular fallback is %s\n", "WiFiLQAMgrCreate_block_invoke", v4];
    }
    char v5 = +[WiFiUsageMonitor sharedInstance];
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 40);
    [(WiFiUsageMonitor *)v5 setCellularFallbackState:v2 forInterface:v6];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: cellular fallback watcher is NULL !" args:("WiFiLQAMgrCreate_block_invoke")];
    }
  }
}

void sub_100035E80(uint64_t a1)
{
  if (a1)
  {
    [*(id *)(a1 + 2976) __sendEventToPeers];
    sub_10003EBFC(a1);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: LQA mgr is null", @"__WiFiLQAMgrTrafficEngTimerCallback"];
    }
  }
}

uint64_t sub_100035F20(uint64_t a1, char a2, int a3)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 640) = a2;
    *(unsigned char *)(a1 + 645) = a3;
    if (a3) {
      BOOL v4 = *(unsigned char *)(a1 + 646) != 0;
    }
    else {
      BOOL v4 = 0;
    }
    sub_100036068(a1, v4);
    uint64_t v5 = sub_100036144(a1, 5.0);
    if (v5)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s, Failed to set default LQM interval", "WiFiLQAMgrSetLQAEnable")];
      }
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: LQAConfigChange En: %d lqaMode: %d fallbackPref %d override %d askToDisc %d AggrTD %d rnfState %d", "WiFiLQAMgrSetLQAEnable", *(unsigned __int8 *)(a1 + 640), *(unsigned int *)(a1 + 16), *(unsigned __int8 *)(a1 + 221), *(unsigned __int8 *)(a1 + 642), *(unsigned __int8 *)(a1 + 644), *(unsigned __int8 *)(a1 + 645), *(unsigned __int8 *)(a1 + 646)];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManagerRef is NULL", @"WiFiLQAMgrSetLQAEnable"];
    }
    uint64_t v5 = 4294963396;
  }
  return v5;
}

void sub_100036068(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v2 = (_OWORD *)(a1 + 724);
    if (a2)
    {
      long long v3 = unk_10027C8A8;
      _OWORD *v2 = xmmword_10027C898;
      *(_OWORD *)(a1 + 740) = v3;
      long long v4 = unk_10027C8C8;
      *(_OWORD *)(a1 + 756) = xmmword_10027C8B8;
      *(_OWORD *)(a1 + 772) = v4;
      long long v5 = unk_10027C8E8;
      *(_OWORD *)(a1 + 932) = xmmword_10027C8D8;
      *(_OWORD *)(a1 + 948) = v5;
      long long v6 = unk_10027C908;
      *(_OWORD *)(a1 + 964) = xmmword_10027C8F8;
      *(_OWORD *)(a1 + 980) = v6;
      long long v7 = xmmword_10027C918;
      long long v8 = unk_10027C928;
      long long v9 = unk_10027C948;
      *(_OWORD *)(a1 + 1128) = xmmword_10027C938;
      *(_OWORD *)(a1 + 1144) = v9;
      *(_OWORD *)(a1 + 1096) = v7;
      *(_OWORD *)(a1 + 1112) = v8;
    }
    else
    {
      long long v10 = unk_10027C868;
      _OWORD *v2 = xmmword_10027C858;
      *(_OWORD *)(a1 + 740) = v10;
      long long v11 = unk_10027C888;
      *(_OWORD *)(a1 + 756) = xmmword_10027C878;
      *(_OWORD *)(a1 + 772) = v11;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"manager is NULL!"];
    }
  }
}

uint64_t sub_100036144(uint64_t a1, double a2)
{
  unsigned int valuePtr = 0;
  if (!a1 || !*(unsigned char *)(a1 + 640)) {
    return 0;
  }
  CFDictionaryRef v4 = sub_1000710E4();
  if (!v4)
  {
    CFNumberRef v6 = 0;
    MutableCFDictionaryRef Copy = 0;
    goto LABEL_29;
  }
  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v4);
  if (!MutableCopy)
  {
    CFNumberRef v6 = 0;
    goto LABEL_29;
  }
  unsigned int valuePtr = (a2 * 1000.0);
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (!v6)
  {
LABEL_29:
    uint64_t v8 = 4294963395;
    goto LABEL_12;
  }
  CFDictionarySetValue(MutableCopy, @"LQM_UPDATE_INTERVAL", v6);
  uint64_t v7 = sub_10007122C();
  uint64_t v8 = v7;
  if (a2 >= 1.0 && !v7)
  {
    *(double *)(a1 + 96) = a2;
    if (a2 == 5.0)
    {
      *(_DWORD *)(a1 + 104) = 0;
      if (*(double *)(a1 + 120) != 0.0) {
        *(void *)(a1 + 120) = 0;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 104) = 1;
      *(CFAbsoluteTime *)(a1 + 120) = CFAbsoluteTimeGetCurrent();
    }
    *(CFAbsoluteTime *)(a1 + 128) = CFAbsoluteTimeGetCurrent();
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: LQM interval updated to %2.2f seconds", "__WiFiLQAMgrSetIntervalInSec", *(void *)&a2];
    }
    uint64_t v8 = 0;
    goto LABEL_24;
  }
  if (!v7) {
    goto LABEL_24;
  }
LABEL_12:
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:4, "%s: ERROR: %d Failed to update LQM interval %2.2f", "__WiFiLQAMgrSetIntervalInSec", v8, *(void *)&a2];
  }
  if (!v4)
  {
    if (!MutableCopy) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_24:
  CFRelease(v4);
  if (MutableCopy) {
LABEL_16:
  }
    CFRelease(MutableCopy);
LABEL_17:
  if (v6) {
    CFRelease(v6);
  }
  return v8;
}

uint64_t sub_100036344(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 647) = a2 == 0;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManagerRef is NULL", @"WiFiLQAMgrSetXCTestMode"];
    }
    return 4294963396;
  }
  return result;
}

uint64_t sub_1000363C4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 642) = *(unsigned char *)(a2 + 4);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    *(unsigned char *)(a1 + 645) = *(unsigned char *)(a2 + 6);
    byte_10027D5F0 = *(unsigned char *)(a1 + 644) != 0;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: LQAConfigChange En: %d lqaMode: %d fallbackPref %d override %d askToDisc %d AggrTD %d rnfState %d", "WiFiLQAMgrSetLQAConfig", *(unsigned __int8 *)(a1 + 640), *(unsigned int *)(a1 + 16), *(unsigned __int8 *)(a1 + 221), *(unsigned __int8 *)(a1 + 642), *(unsigned __int8 *)(a1 + 644), *(unsigned __int8 *)(a1 + 645), *(unsigned __int8 *)(a1 + 646)];
    }
    uint64_t v4 = 0;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManagerRef is NULL", @"WiFiLQAMgrSetLQAConfig"];
    }
    uint64_t v4 = 4294963396;
  }
  return v4;
}

uint64_t sub_1000364C4(uint64_t a1, int a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 646) = a2;
    if (a2) {
      BOOL v3 = *(unsigned char *)(a1 + 645) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    int v4 = !v3;
    sub_100036068(a1, v4);
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: LQAConfigChange En: %d lqaMode: %d fallbackPref %d override %d askToDisc %d AggrTD %d rnfState %d", "WiFiLQAMgrSetRNFState", *(unsigned __int8 *)(a1 + 640), *(unsigned int *)(a1 + 16), *(unsigned __int8 *)(a1 + 221), *(unsigned __int8 *)(a1 + 642), *(unsigned __int8 *)(a1 + 644), *(unsigned __int8 *)(a1 + 645), *(unsigned __int8 *)(a1 + 646)];
    }
    uint64_t v6 = 0;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManagerRef is NULL", @"WiFiLQAMgrSetRNFState"];
    }
    uint64_t v6 = 4294963396;
  }
  return v6;
}

uint64_t sub_1000365B0(unsigned __int8 *context, uint64_t a2)
{
  if (!context)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManagerRef is NULL", @"WiFiLQAMgrSetSystemWakeState", v6];
    }
    goto LABEL_11;
  }
  if (context[160] == a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s, systemPowerOn was set to %d", "WiFiLQAMgrSetSystemWakeState", a2];
    }
LABEL_11:
    return 4294963396;
  }
  context[160] = a2;
  if (a2) {
    *((CFAbsoluteTime *)context + 10) = CFAbsoluteTimeGetCurrent();
  }
  else {
    dispatch_async_f(*((dispatch_queue_t *)context + 365), context, (dispatch_function_t)sub_10003669C);
  }
  uint64_t result = 0;
  context[177] = 0;
  *((void *)context + 23) = 0;
  return result;
}

void sub_10003669C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2913) == 1)
  {
    [*(id *)(a1 + 2976) __invalidateDiscovery];
    *(unsigned char *)(a1 + 2913) = 0;
  }
}

void sub_1000366F0(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return;
  }
  if (!*(unsigned char *)(a1 + 640))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: LQA is disabled" : @"__WiFiLQAMgrTriggerDisconnect"];
    }
    goto LABEL_35;
  }
  if (*(unsigned char *)(a1 + 176))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: LinkEvent happened, Do not Trigger Disconnect" : @"__WiFiLQAMgrTriggerDisconnect"];
    }
    goto LABEL_35;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + 24);
  if (!v3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: LQM table is NULL", @"__WiFiLQAMgrTriggerDisconnect"];
    }
    goto LABEL_35;
  }
  if (!CFArrayGetCount(v3))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: LQM table is empty", "__WiFiLQAMgrTriggerDisconnect")];
    }
    goto LABEL_35;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
  if (!ValueAtIndex)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager: Latest LQM Report is NULL", @"__WiFiLQAMgrTriggerDisconnect"];
    }
LABEL_35:
    return;
  }
  unsigned int valuePtr = *(_DWORD *)(a1 + 2796);
  if (!valuePtr)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"RSSI");
    if (!Value) {
      return;
    }
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  }
  sub_100017494(a1);
  if (*(double *)(a1 + 136) == 0.0)
  {
    double v7 = 0.0;
  }
  else
  {
    double v7 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 136);
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Trigger disconnect evaluation took %2.2f", "__WiFiLQAMgrTriggerDisconnect", *(void *)&v7];
    }
    *(void *)(a1 + 136) = 0;
  }
  long long v9 = *(void (**)(uint64_t, void, void, void, uint64_t))(a1 + 552);
  if (v9) {
    v9(a1, *(void *)(a1 + 40), *(void *)(a1 + 560), valuePtr, a2);
  }
  [+[WiFiUsageMonitor sharedInstance] addTriggerDisconnectEvent:*(void *)(a1 + 40) isAlerted:0 isConfirmed:0 isExecuted:1];
  long long v10 = +[WiFiUsageMonitor sharedInstance];
  [(WiFiUsageMonitor *)v10 setTdLogic_end:*(unsigned int *)(a1 + 2828) evalTime:(int)valuePtr rssi:*(void *)(a1 + 40) roamTime:v7 forInterface:*(double *)(a1 + 192)];
  if (&_symptom_create)
  {
    symptom_create();
    symptom_send();
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:2, @"%s: Notified Symptoms about Trigger Disconnected network", @"__WiFiLQAMgrTriggerDisconnect"];
    }
  }
  *(unsigned char *)(a1 + 392) = 0;
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 336), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 544), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  uint64_t v12 = *(NSObject **)(a1 + 2904);
  if (v12) {
    dispatch_source_set_timer(v12, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  *(unsigned char *)(a1 + 2912) = 0;
}

uint64_t sub_100036A14(uint64_t a1, uint64_t a2, int a3)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 2760) == a3) {
      return 4294963396;
    }
    *(_DWORD *)(a1 + 2760) = a3;
    *(CFAbsoluteTime *)(a1 + 2768) = CFAbsoluteTimeGetCurrent();
    if (qword_10027DD68)
    {
      long long v5 = "Alive";
      if (a3 == 1) {
        long long v5 = "Expired";
      }
      [((id)qword_10027DD68) WFLog:message:3, "%s: GatewayARPState %s", "WiFiLQAMgrSetGatewayARPState", v5];
    }
    uint64_t v6 = 0;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManagerRef is NULL", @"WiFiLQAMgrSetGatewayARPState"];
    }
    uint64_t v6 = 4294963396;
  }
  return v6;
}

uint64_t sub_100036AFC(uint64_t result, char a2)
{
  if (result)
  {
    if (*(unsigned char *)(result + 640)) {
      *(unsigned char *)(result + 220) = a2;
    }
  }
  return result;
}

uint64_t sub_100036B10(uint64_t result, char a2)
{
  if (result)
  {
    if (*(unsigned char *)(result + 640)) {
      *(unsigned char *)(result + 221) = a2;
    }
  }
  return result;
}

uint64_t sub_100036B24(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 216) = a2;
  }
  return result;
}

uint64_t sub_100036B30(uint64_t result)
{
  if (result) {
    return *(void *)(result + 208);
  }
  return result;
}

void sub_100036B3C(uint64_t a1, double a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (a1 && *(unsigned char *)(a1 + 640))
  {
    double v5 = Current - a2;
    if (a2 == 0.0) {
      double v5 = -1.0;
    }
    *(double *)(a1 + 280) = v5;
  }
}

void sub_100036B8C(uint64_t a1)
{
  uint64_t valuePtr = 32;
  uint64_t v13 = 3;
  if (a1 && *(unsigned char *)(a1 + 640) && *(_DWORD *)(a1 + 16) == 2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: initProbeHappened %d lqaState %d", "WiFiLQAMgrSetWiFiPrimaryInterface", *(unsigned __int8 *)(a1 + 357), *(unsigned int *)(a1 + 20));
    }
    if (*(_DWORD *)(a1 + 20))
    {
      uint64_t v3 = *(void *)(a1 + 400);
      if (*(unsigned char *)(a1 + 357))
      {
        if (v3) {
          return;
        }
        goto LABEL_24;
      }
      if (!v3)
      {
LABEL_24:
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: No Router IP Address" : @"WiFiLQAMgrSetWiFiPrimaryInterface"];
        }
        return;
      }
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFNumberRef v5 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
      uint64_t v6 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      double v7 = v6;
      if (v5 && v6)
      {
        CFArrayAppendValue(v6, v5);
        CFDictionarySetValue(Mutable, @"kWiFiLqaMgrProbeSize", v7);
        CFNumberRef v8 = CFNumberCreate(0, kCFNumberCFIndexType, &v13);
        CFDictionarySetValue(Mutable, @"kWiFiLqaMgrNumProbes", v8);
        *(unsigned char *)(a1 + 357) = 1;
        long long v9 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        *(void *)(a1 + 384) = v9;
        if (sub_100036E18(a1, Mutable, v9, (uint64_t)sub_100037420, a1))
        {
          long long v10 = *(const void **)(a1 + 384);
          if (v10)
          {
            CFRelease(v10);
            *(void *)(a1 + 384) = 0;
          }
        }
        if (v8) {
          CFRelease(v8);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s, probeSizeRef OR probeSizeArr is NULL", "WiFiLQAMgrSetWiFiPrimaryInterface");
        }
        if (!v5) {
          goto LABEL_19;
        }
      }
      CFRelease(v5);
LABEL_19:
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v7) {
        CFRelease(v7);
      }
    }
  }
}

uint64_t sub_100036E18(uint64_t a1, const __CFDictionary *a2, __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  uint64_t valuePtr = *(unsigned int *)(a1 + 352);
  uint64_t v41 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 1;
  if (*(_DWORD *)(a1 + 20))
  {
    double v7 = a3;
    CFMutableDictionaryRef Mutable = a3;
    if (!a3
      && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks)) == 0|| (TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(Mutable)))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: probeHandle is NULL or incorrect type" args:("WiFiLQAMgrEnqueueDiagnosticProbe")];
      }
      uint64_t v31 = 4294963394;
      goto LABEL_44;
    }
    long long v37 = v7;
    if (a2)
    {
      CFNumberRef Value = CFDictionaryGetValue(a2, @"kWiFiLqaMgrNumProbes");
      uint64_t v13 = CFDictionaryGetValue(a2, @"kWiFiLqaMgrProbeSize");
      CFTypeID v14 = CFDictionaryGetValue(a2, @"kWiFiLqaMgrProbeTimeoutSecs");
      int v15 = CFDictionaryGetValue(a2, @"kWiFiLqaMgrIpv4Addr");
      int v16 = CFDictionaryGetValue(a2, @"kWiFiLqaMgrProbeTrafficClass");
      uint64_t v41 = *(unsigned int *)(a1 + 892);
      if (Value)
      {
        CFDictionarySetValue(Mutable, @"kWiFiLqaMgrNumProbes", Value);
        if (!v13) {
          goto LABEL_8;
        }
        goto LABEL_14;
      }
    }
    else
    {
      int v16 = 0;
      int v15 = 0;
      CFTypeID v14 = 0;
      uint64_t v13 = 0;
      uint64_t v41 = *(unsigned int *)(a1 + 892);
    }
    CFNumberRef v21 = CFNumberCreate(0, kCFNumberCFIndexType, &v41);
    if (!v21)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: numProbesDefRef is NULL", "WiFiLQAMgrEnqueueDiagnosticProbe")];
      }
      goto LABEL_62;
    }
    CFNumberRef v22 = v21;
    CFDictionarySetValue(Mutable, @"kWiFiLqaMgrNumProbes", v21);
    CFRelease(v22);
    if (!v13)
    {
LABEL_8:
      CFNumberRef v17 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
      if (v17)
      {
        CFNumberRef v18 = v17;
        uint64_t v19 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        if (!v19)
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: probeSizeArr is NULL", "WiFiLQAMgrEnqueueDiagnosticProbe")
          }
          CFMutableSetRef v20 = 0;
          uint64_t v31 = 4294963394;
          double v7 = v37;
          goto LABEL_41;
        }
        uint64_t v13 = v19;
        CFArrayAppendValue(v19, v18);
        CFMutableSetRef v20 = v13;
LABEL_15:
        CFDictionarySetValue(Mutable, @"kWiFiLqaMgrProbeSize", v13);
        if (v14)
        {
          CFDictionarySetValue(Mutable, @"kWiFiLqaMgrProbeTimeoutSecs", v14);
          if (v15) {
            goto LABEL_21;
          }
        }
        else
        {
          CFNumberRef v23 = CFNumberCreate(0, kCFNumberCFIndexType, &v39);
          if (!v23)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4, @"%s: probeTimeoutSecsDefRef is NULL", @"WiFiLQAMgrEnqueueDiagnosticProbe"];
            }
            goto LABEL_39;
          }
          CFNumberRef v24 = v23;
          CFDictionarySetValue(Mutable, @"kWiFiLqaMgrProbeTimeoutSecs", v23);
          CFRelease(v24);
          if (v15) {
            goto LABEL_21;
          }
        }
        int v15 = *(const void **)(a1 + 400);
        if (v15)
        {
LABEL_21:
          CFDictionarySetValue(Mutable, @"kWiFiLqaMgrIpv4Addr", v15);
          if (v16) {
            CFDictionarySetValue(Mutable, @"kWiFiLqaMgrProbeTrafficClass", v16);
          }
          CFDictionarySetValue(Mutable, @"kWiFiLqaMgrIgnoreProbe", kCFBooleanFalse);
          if (a4)
          {
            uint64_t v38 = a4;
            CFNumberRef v25 = CFNumberCreate(0, kCFNumberCFIndexType, &v38);
            double v7 = v37;
            if (!v25)
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"%s: probeCallback is NULL" args:("WiFiLQAMgrEnqueueDiagnosticProbe")];
              }
              goto LABEL_40;
            }
            CFNumberRef v26 = v25;
            CFDictionarySetValue(Mutable, @"kWiFiLqaMgrDiagCallback", v25);
            CFRelease(v26);
            if (!a5) {
              goto LABEL_32;
            }
          }
          else
          {
            double v7 = v37;
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Callback is NULL", "WiFiLQAMgrEnqueueDiagnosticProbe")
            }
            if (!a5) {
              goto LABEL_32;
            }
          }
          uint64_t v38 = a5;
          CFNumberRef v28 = CFNumberCreate(0, kCFNumberCFIndexType, &v38);
          if (v28)
          {
            CFNumberRef v29 = v28;
            CFDictionarySetValue(Mutable, @"kWiFiLqaMgrDiagCbContext", v28);
            CFRelease(v29);
LABEL_32:
            if (sub_10003BC98((void *)a1, Mutable))
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:4, "%s: Scheduling Probe Failed", "WiFiLQAMgrEnqueueDiagnosticProbe"];
              }
              goto LABEL_40;
            }
            uint64_t v31 = 0;
            if (!v18)
            {
LABEL_42:
              if (v20) {
                CFRelease(v20);
              }
              goto LABEL_44;
            }
LABEL_41:
            CFRelease(v18);
            goto LABEL_42;
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: callbackCtxt is NULL" args:("WiFiLQAMgrEnqueueDiagnosticProbe", 0, 0, 0, 0)];
          }
LABEL_40:
          uint64_t v31 = 4294963394;
          if (!v18) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: DiagProbe ipv4Addr is NULL" args:("WiFiLQAMgrEnqueueDiagnosticProbe", nil)];
        }
LABEL_39:
        double v7 = v37;
        goto LABEL_40;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: probeSizeDefRef is NULL" arguments:("WiFiLQAMgrEnqueueDiagnosticProbe", "probeSizeDefRef is NULL")];
      }
LABEL_62:
      uint64_t v31 = 4294963394;
      double v7 = v37;
LABEL_44:
      if (!v7 && Mutable) {
        CFRelease(Mutable);
      }
      return v31;
    }
LABEL_14:
    CFNumberRef v18 = 0;
    CFMutableSetRef v20 = 0;
    goto LABEL_15;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, @"%s: Ignoring diagnostic probe in unassociated state and submitting empty metric", @"WiFiLQAMgrEnqueueDiagnosticProbe"];
  }
  return 4294963394;
}

void sub_100037420(int a1, CFArrayRef theArray, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = 0;
  uint64_t valuePtr = 0;
  if (a4)
  {
    double v7 = *(const void **)(a4 + 384);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a4 + 384) = 0;
    }
    if (*(unsigned char *)(a4 + 640))
    {
      if (a3)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:4, "%s: Init Probe gave an error %ld", "__WiFiLQAMgrInitProbeResultCallBack", a3];
        }
      }
      else if (theArray)
      {
        if (CFArrayGetCount(theArray))
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrNumProbesSent");
          if (Value) {
            CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
          }
          CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrNumProbesFail");
          if (v10)
          {
            CFNumberGetValue(v10, kCFNumberCFIndexType, &v16);
            uint64_t v11 = v16;
          }
          else
          {
            uint64_t v11 = 0;
          }
          uint64_t v12 = valuePtr;
          if (v12 && v11 == v12)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: Gateway NOT pingeable" : @"__WiFiLQAMgrInitProbeResultCallBack"];
            }
            *(unsigned char *)(a4 + 358) = 0;
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: Gateway pingeable" : @"__WiFiLQAMgrInitProbeResultCallBack"];
            }
            *(unsigned char *)(a4 + 358) = 1;
          }
          return;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: zero elements in probeResultRef", @"__WiFiLQAMgrInitProbeResultCallBack", v15];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: probeResultRef is null", @"__WiFiLQAMgrInitProbeResultCallBack", v15];
        }
      }
    }
  }
}

void sub_100037624(uint64_t a1, const __CFString *a2, CFDictionaryRef theDict)
{
  if (a1 && *(unsigned char *)(a1 + 640))
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, kSCPropNetIPv4ARPResolvedIPAddress);
    if (Value)
    {
      CFStringRef v6 = Value;
      *(_DWORD *)(a1 + 2840) |= 2u;
      if (+[WiFiRoamManager sharedWiFiRoamManager]) {
        [+[WiFiRoamManager sharedWiFiRoamManager](WiFiRoamManager, "sharedWiFiRoamManager") setIpAddrAssigned:1];
      }
      double v7 = *(const void **)(a1 + 400);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(a1 + 400) = 0;
      }
      CFNumberRef v8 = *(const void **)(a1 + 40);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(a1 + 40) = 0;
      }
      *(void *)(a1 + 400) = CFStringCreateCopy(kCFAllocatorDefault, v6);
      *(void *)(a1 + 40) = CFStringCreateCopy(kCFAllocatorDefault, a2);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s, LQAManager IPAddr is NULL", @"WiFiLQAMgrSetRouterIpv4Addr"];
      }
    }
  }
}

uint64_t sub_100037754(uint64_t result, int a2, double a3)
{
  if (result && *(unsigned char *)(result + 640) && *(_DWORD *)(result + 2776) != a2)
  {
    *(_DWORD *)(result + 2776) = a2;
    *(double *)(result + 2784) = a3;
  }
  return result;
}

uint64_t sub_100037778(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 2792) = a2;
  }
  return result;
}

void sub_100037784(uint64_t *a1, uint64_t a2)
{
  if (a1 && a2)
  {
    a1[160] = a2;
    uint64_t f = dispatch_mach_create_f();
    a1[53] = f;
    if (f) {
      dispatch_mach_connect();
    }
    uint64_t v4 = dispatch_mach_create_f();
    a1[56] = v4;
    if (v4) {
      dispatch_mach_connect();
    }
    CFNumberRef v5 = a1[42];
    if (v5) {
      dispatch_activate(v5);
    }
    CFStringRef v6 = a1[68];
    if (v6) {
      dispatch_activate(v6);
    }
    if (sub_100024D68(a1[4]))
    {
      double v7 = a1[363];
      if (v7)
      {
        dispatch_activate(v7);
      }
    }
  }
  else
  {
    if (qword_10027DD68)
    {
      long long v9 = "manager";
      if (a1) {
        long long v9 = "queue";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: LQA %s is null", "WiFiLQAMgrScheduleWithQueue", v9);
    }
  }
}

void sub_1000378F0(uint64_t a1, unint64_t a2)
{
  uint64_t state64 = 0;
  if (!&_managed_event_fetch) {
    return;
  }
  if (a1)
  {
    if (a2 <= 8 && ((1 << a2) & 0x182) != 0) {
      return;
    }
    if (*(unsigned char *)(a1 + 640))
    {
      uint64_t state = notify_get_state(*(_DWORD *)(a1 + 416), &state64);
      if (state)
      {
        uint64_t v4 = state;
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s Unable to get Symptoms Event ID Error %d", "__WiFiLQAMgrTriggetDisconnectSymptomsCallback", v4);
        }
      }
      else
      {
        CFRetain((CFTypeRef)a1);
        managed_event_fetch_series();
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: LQA mgr is disabled", "__WiFiLQAMgrTriggetDisconnectSymptomsCallback"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: LQA mgr is null", "__WiFiLQAMgrTriggetDisconnectSymptomsCallback"];
    }
  }
}

void sub_100037A90(uint64_t a1, unint64_t a2)
{
  uint64_t state64 = 0;
  if (&_managed_event_fetch && (a2 > 8 || ((1 << a2) & 0x182) == 0))
  {
    if (a1)
    {
      uint64_t state = notify_get_state(*(_DWORD *)(a1 + 440), &state64);
      if (state)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s Unable to get Symptoms Event ID Error %d", @"__WiFiLQAMgrDNSFailureSymptomsCallback", state];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, @"%s called at %f", @"__WiFiLQAMgrDNSFailureSymptomsCallback", CFAbsoluteTimeGetCurrent()];
        }
        *(_DWORD *)(a1 + 2828) = 8;
        sub_10003EF28((CFTypeRef)a1);
        [+[WiFiUsageMonitor sharedInstance] addFaultEvent:18 forInterface:*(void *)(a1 + 40)];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: LQA mgr is null", @"__WiFiLQAMgrDNSFailureSymptomsCallback"];
      }
    }
  }
}

void sub_100037C0C(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    *(unsigned char *)(a1 + 2984) = 1;
    uint64_t v3 = *(NSObject **)(a1 + 544);
    if (v3) {
      dispatch_source_cancel(v3);
    }
    uint64_t v4 = *(NSObject **)(a1 + 336);
    if (v4) {
      dispatch_source_cancel(v4);
    }
    CFNumberRef v5 = *(NSObject **)(a1 + 2904);
    if (v5) {
      dispatch_source_cancel(v5);
    }
    *(unsigned char *)(a1 + 2912) = 0;
    if (*(void *)(a1 + 424))
    {
      dispatch_mach_cancel();
      dispatch_release(*(dispatch_object_t *)(a1 + 424));
      *(void *)(a1 + 424) = 0;
    }
    if (*(void *)(a1 + 448))
    {
      dispatch_mach_cancel();
      dispatch_release(*(dispatch_object_t *)(a1 + 448));
      *(void *)(a1 + 448) = 0;
    }
    if (*(void *)(a1 + 1272))
    {
      Main = CFRunLoopGetMain();
      CFRunLoopRemoveSource(Main, *(CFRunLoopSourceRef *)(a1 + 1272), kCFRunLoopDefaultMode);
    }
    *(void *)(a1 + 1280) = 0;
  }
  else
  {
    if (qword_10027DD68)
    {
      CFNumberRef v8 = "manager";
      if (a1) {
        CFNumberRef v8 = "queue";
      }
      [((id)qword_10027DD68) WFLog:4 message:@"%s: LQA %s is null", @"WiFiLQAMgrUnscheduleFromQueue", v8];
    }
  }
}

void sub_100037D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 552) = a2;
      *(void *)(a1 + 560) = a3;
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, Triggered Disconnect Callback is NULL", @"WiFiLQAMgrRegisterTriggerDisconnectCallback"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManagerRef is NULL", @"WiFiLQAMgrRegisterTriggerDisconnectCallback"];
    }
  }
}

void sub_100037DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    *(void *)(a1 + 624) = a2;
    *(void *)(a1 + 632) = a3;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManagerRef is NULL", @"WiFiLQAMgrRegisterTDConfirmedCallback"];
    }
  }
}

void sub_100037E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 568) = a2;
      *(void *)(a1 + 576) = a3;
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, GetApEnvironment Callback is NULL", @"WiFiLQAMgrRegisterGetAPEnvironmentCallback"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManagerRef is NULL", @"WiFiLQAMgrRegisterGetAPEnvironmentCallback"];
    }
  }
}

uint64_t sub_100037F30(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 584) = a2;
  *(void *)(result + 592) = a3;
  return result;
}

id sub_100037F3C(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: lqaMgr null", @"WiFiLQAMgrCopyColocatedScopeSsids"];
    }
    return 0;
  }
  uint64_t v1 = *(void **)(a1 + 616);
  if (!v1) {
    return 0;
  }

  return [v1 copy];
}

void sub_100037FCC(uint64_t a1, const void *a2)
{
  unsigned int valuePtr = 0;
  id v4 = +[WiFiRoamManager sharedWiFiRoamManager];
  if (a1)
  {
    CFNumberRef v5 = v4;
    CFStringRef v6 = *(const void **)(a1 + 48);
    if (a2) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    uint64_t v8 = !v7;
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 48) = 0;
    }
    *(unsigned char *)(a1 + 600) = 0;
    if (a2)
    {
      *(void *)(a1 + 48) = CFRetain(a2);
      long long v9 = *(uint64_t (**)(uint64_t, const void *, void))(a1 + 568);
      if (v9) {
        int v10 = v9(a1, a2, *(void *)(a1 + 576));
      }
      else {
        int v10 = 0;
      }
      *(_DWORD *)(a1 + 224) = v10;
      CFNumberRef v12 = (const __CFNumber *)sub_100024070((uint64_t)a2);
      if (v12) {
        CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
      }
      uint64_t v13 = sub_100023F30((uint64_t)a2);
      uint64_t v14 = v13;
      if (v5) {
        [v5 setLinkUpWithBSSEnvironment:*(int *)(a1 + 224) band:v13 roam:v8 inCharging:*(unsigned char *)(a1 + 2792) != 0 motionState:*(unsigned int *)(a1 + 2776)];
      }
      if (v14 == 1 && *(_DWORD *)(a1 + 224) > 2u)
      {
        *(unsigned char *)(a1 + 2844) = 1;
        *(_DWORD *)(a1 + 2840) |= 1u;
        *(_DWORD *)(a1 + 2836) = sub_1000C6FC0((uint64_t)a2, @"RSSI");
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Reassoc Needed. linkUpRssi (%d) Current band (%d) Env (%d) ", *(unsigned int *)(a1 + 2836), v14, *(unsigned int *)(a1 + 224)];
        }
      }
      else
      {
        *(unsigned char *)(a1 + 2844) = 0;
      }
      *(_DWORD *)(a1 + 56) = 0;
      uint64_t v17 = *(void *)(a1 + 48);
      if (v17)
      {
        CFNumberRef v18 = sub_10001E404(v17, @"BSSID");
        uint64_t v19 = sub_10001A43C(*(const void **)(a1 + 48));
        if (+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager")&& objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "deviceAnalyticsClient"))
        {
          *(_DWORD *)(a1 + 56) = [objc_msgSend(objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "deviceAnalyticsClient"), "autoLeaveRssiForBSS:ssid:", v18, v19);
        }
        if ((v8 & 1) == 0)
        {
          if (_os_feature_enabled_impl())
          {
            id v20 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyColocatedScopeIdForNetwork:*(void *)(a1 + 48)];
            if (v20)
            {
              CFNumberRef v21 = v20;
              CFNumberRef v22 = *(const void **)(a1 + 616);
              if (v22)
              {
                CFRelease(v22);
                *(void *)(a1 + 616) = 0;
              }
              id v23 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") copyAllStoredNetworkSsidsWithColocatedScopeId:v21];
              if (v23)
              {
                CFNumberRef v24 = v23;
                if ((unint64_t)[v23 count] >= 2
                  && [v24 containsObject:v19])
                {
                  *(void *)(a1 + 608) = [v24 count];
                  *(void *)(a1 + 616) = v24;
                }
                else
                {
                  CFRelease(v24);
                }
              }
            }
          }
        }
        CFMutableDictionaryRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
        CFNumberRef v25 = Mutable;
        if (Mutable)
        {
          if (*(_DWORD *)(a1 + 56)) {
            CFStringAppendFormat(Mutable, 0, @" AutoLeaveRssi %d ", *(unsigned int *)(a1 + 56));
          }
          if (*(void *)(a1 + 608)) {
            CFStringAppendFormat(v25, 0, @" colocatedScope networks %lu ", *(void *)(a1 + 608));
          }
        }
      }
      else
      {
        CFNumberRef v25 = 0;
      }
      CFNumberRef v28 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        if (v8) {
          CFNumberRef v29 = "Roamed";
        }
        else {
          CFNumberRef v29 = "Joined";
        }
        id v30 = sub_10001A43C(a2);
        uint64_t v31 = sub_10001E404((uint64_t)a2, @"BSSID");
        CFNumberRef v32 = sub_1000C6FC0((uint64_t)a2, @"RSSI");
        uint64_t v33 = valuePtr;
        CFStringRef v34 = sub_10001CC9C(*(_DWORD *)(a1 + 224));
        CFStringRef v35 = &stru_100248240;
        if (v25) {
          CFStringRef v35 = v25;
        }
        [v28 WFLog:3, "%s: %s SSID: %@ BSSID: %@ RSSI: %ld Chan: %d ApEnv: %@(%d) %@", "__WiFiLQAMgrSetCurrentNetwork", v29, v30, v31, v32, v33, v34, *(unsigned int *)(a1 + 224), v35 message];
      }
      if (v25) {
        CFRelease(v25);
      }
    }
    else
    {
      *(void *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 224) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      *(unsigned char *)(a1 + 2844) = 0;
      *(void *)(a1 + 2836) = 0;
      if (v5)
      {
        [v5 setIpAddrAssigned:0];
        [v5 setLinkDown];
      }
      *(void *)(a1 + 608) = 0;
      uint64_t v11 = *(const void **)(a1 + 616);
      if (v11)
      {
        CFRelease(v11);
        *(void *)(a1 + 616) = 0;
      }
    }
    *(_DWORD *)(a1 + 1084) = 1061997773;
    *(_DWORD *)(a1 + 1248) = 1061997773;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
  }
}

void sub_1000383E0(uint64_t a1)
{
  *(unsigned char *)(a1 + 3208) = 1;
  uint64_t v1 = sub_1000175A0(a1, 1, 0);
  if (v1)
  {
    uint64_t v2 = v1;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: ERROR: %d Failed to enable rapid LQM" arguments:("__WiFiLQAMgrSetRapidLQMInterval", v2)];
    }
  }
}

uint64_t sub_100038478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v169 = 0;
  int v168 = 0;
  __int16 v167 = 0;
  if (!a1)
  {
    uint64_t v11 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_11;
    }
    CFNumberRef v12 = "%s: LQAMgrRef is null";
    goto LABEL_64;
  }
  if (!*(unsigned char *)(a1 + 640))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 2, "%s: LQA is disabled", "__WiFiLQAMgrCheckTriggerDisconnect", *(void *)&v131);
    }
    goto LABEL_11;
  }
  int v4 = *(_DWORD *)(a1 + 20);
  if (v4 == 1)
  {
    uint64_t v11 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_11;
    }
    CFNumberRef v12 = "%s: Trigger Disconnect check in GoodLinkState";
    goto LABEL_64;
  }
  if (!v4)
  {
    uint64_t v11 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_11;
    }
    CFNumberRef v12 = "%s: Trigger Disconnect check in UnassociatedState";
    goto LABEL_64;
  }
  int v7 = *(_DWORD *)(a1 + 16);
  int v8 = *(unsigned __int8 *)(a1 + 641);
  *(unsigned char *)(a1 + 2793) = 0;
  if (!*(unsigned char *)(a1 + 2832) && *(unsigned char *)(a1 + 221) && !(*(unsigned __int8 *)(a1 + 642) | v8))
  {
    uint64_t v11 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_11;
    }
    CFNumberRef v12 = "%s: Better inf not available";
    goto LABEL_9;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(unsigned char *)(a1 + 161))
  {
    uint64_t v11 = (void *)qword_10027DD68;
    if (!qword_10027DD68)
    {
LABEL_11:
      goto LABEL_12;
    }
    CFNumberRef v12 = "%s Wait for callback";
    goto LABEL_9;
  }
  double v16 = Current;
  [+[WiFiUsageMonitor sharedInstance] addTriggerDisconnectEvent:*(void *)(a1 + 40) isAlerted:1 isConfirmed:0 isExecuted:0];
  [+[WiFiUsageMonitor sharedInstance] setTdLogic_alertedBy:*(unsigned int *)(a1 + 2828) forInterface:*(void *)(a1 + 40)];
  *(unsigned char *)(a1 + 176) = 0;
  double v17 = *(double *)(a1 + 64);
  if (v17 == 0.0) {
    double v18 = 0.0;
  }
  else {
    double v18 = v16 - v17;
  }
  if (!sub_1000057F0(a1) && *(double *)(a1 + 64) != 0.0 && v18 <= *(double *)(a1 + 688))
  {
    uint64_t v11 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_11;
    }
    double v131 = v18;
    CFNumberRef v12 = "%s: Bypassed, Link established just before %2.2f secs";
    goto LABEL_9;
  }
  double v19 = *(double *)(a1 + 80);
  if (v19 == 0.0) {
    double v20 = 0.0;
  }
  else {
    double v20 = v16 - v19;
  }
  if (!sub_1000057F0(a1) && *(double *)(a1 + 80) != 0.0 && v20 <= *(double *)(a1 + 680))
  {
    uint64_t v11 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_11;
    }
    double v131 = v20;
    CFNumberRef v12 = "%s: Bypassed, System woke up before %2.2f secs";
LABEL_9:
    uint64_t v13 = 3;
LABEL_10:
    [v11 WFLog:v13 message:v12 __WiFiLQAMgrCheckTriggerDisconnect *(void *)&v131];
    goto LABEL_11;
  }
  int v21 = sub_10003AB0C(a1);
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 24)))
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
    if (ValueAtIndex)
    {
      CFDictionaryRef v23 = ValueAtIndex;
      LOBYTE(v167) = sub_100039D00(a1, ValueAtIndex);
      HIBYTE(v167) = sub_10003A0C8(a1, v23, *(unsigned __int8 *)(a1 + 248));
    }
  }
  memset(v166, 0, sizeof(v166));
  if (!sub_10003CAAC(a1, v166))
  {
    uint64_t v11 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_11;
    }
    CFNumberRef v12 = "%s: Failed to extract metrics from Lqm, exiting!";
    goto LABEL_64;
  }
  int v24 = 0;
  int v25 = *(unsigned __int8 *)(a1 + 646);
  if (*(unsigned char *)(a1 + 645)) {
    BOOL v26 = v25 == 0;
  }
  else {
    BOOL v26 = 1;
  }
  uint64_t v27 = !v26;
  double v28 = *(double *)(a1 + 2784);
  if (v28 == 0.0) {
    double v29 = 0.0;
  }
  else {
    double v29 = v16 - v28;
  }
  int v30 = *(_DWORD *)(a1 + 2776);
  if (v30 == 2 && v27)
  {
    if (v29 <= *(double *)(a1 + 696))
    {
      int v24 = 0;
      goto LABEL_66;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: Usr walking for %.2f secs, using aggressive TD checks", "__WiFiLQAMgrCheckTriggerDisconnect", *(void *)&v29 message];
    }
    int v30 = *(_DWORD *)(a1 + 2776);
    int v24 = 1;
  }
  if (v30 == 4) {
    int v32 = v27;
  }
  else {
    int v32 = 0;
  }
  if (v32 == 1)
  {
    if (v29 > *(double *)(a1 + 704))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: Usr in Automotive for %.2f secs, using aggressive TD checks", "__WiFiLQAMgrCheckTriggerDisconnect", *(void *)&v29 message];
      }
      int v24 = 1;
    }
    float v34 = *(float *)(a1 + 712);
    goto LABEL_67;
  }
LABEL_66:
  float v34 = *(float *)(a1 + 712);
  if (v27)
  {
LABEL_67:
    int v35 = *(_DWORD *)(a1 + 2796);
    if (v35 <= *(_DWORD *)(a1 + 660))
    {
      float v34 = *(float *)(a1 + 720);
    }
    else if (v35 <= *(_DWORD *)(a1 + 656))
    {
      float v34 = *(float *)(a1 + 716);
    }
    if (*(unsigned char *)(a1 + 740)
      && *(int *)&v166[4] >= *(_DWORD *)(a1 + 744)
      && (float)(*(float *)(a1 + 748) * (float)*(int *)&v166[4]) <= (float)*(int *)v166
      && *(int *)&v166[8] > *(_DWORD *)(a1 + 752) * *(_DWORD *)&v166[4])
    {
      int v142 = 1;
      *(unsigned char *)(a1 + 2824) = 1;
    }
    else
    {
      int v142 = 0;
    }
    goto LABEL_78;
  }
  int v142 = 0;
  int v35 = *(_DWORD *)(a1 + 2796);
LABEL_78:
  uint64_t v36 = 0;
  int v37 = v27 ^ 1;
  int v38 = *(_DWORD *)(a1 + 656);
  if (v35 <= v38) {
    char v39 = v27;
  }
  else {
    char v39 = 0;
  }
  float v40 = (float)*(int *)v166;
  int v41 = *(_DWORD *)&v166[4];
  float v42 = (float)*(int *)&v166[4];
  uint64_t v43 = -64;
  do
  {
    if (v39)
    {
      uint64_t v44 = a1 + 16 * v36;
      uint64_t v45 = v44 + 1096;
      uint64_t v46 = v44 + 932;
      if (v35 <= *(_DWORD *)(a1 + 660)) {
        uint64_t v46 = v45;
      }
    }
    else
    {
      uint64_t v46 = a1 + v43 + 788;
    }
    uint64_t v47 = a1 + v43 + 1160;
    if (v35 > v38) {
      uint64_t v47 = v46;
    }
    if (v24) {
      uint64_t v46 = v47;
    }
    if (*(unsigned char *)v46
      && *(int *)&v166[4] >= *(_DWORD *)(v46 + 4)
      && (float)(*(float *)(v46 + 8) * v42) <= v40
      && *(int *)&v166[8] > *(_DWORD *)(v46 + 12) * *(_DWORD *)&v166[4])
    {
      int v142 = 1;
      if (v27) {
        goto LABEL_97;
      }
      goto LABEL_110;
    }
    ++v36;
    v43 += 16;
  }
  while (v43);
  if ((v27 & 1) == 0)
  {
LABEL_110:
    int v141 = 0;
    BOOL v49 = v35 > v38;
LABEL_111:
    uint64_t v50 = a1 + 868;
    int v51 = 1;
    goto LABEL_112;
  }
LABEL_97:
  if (*(unsigned char *)(a1 + 868)
    && *(int *)&v166[28] > *(_DWORD *)(a1 + 872)
    && (float)((float)(1.0 - *(float *)(a1 + 876)) * (float)*(int *)&v166[28]) > (float)*(int *)&v166[32]
    && (*(int *)&v166[4] < *(_DWORD *)(a1 + 880) || (float)(*(float *)(a1 + 884) * v42) <= v40))
  {
    int v141 = 1;
    *(unsigned char *)(a1 + 2824) = 1;
  }
  else
  {
    int v141 = 0;
  }
  BOOL v48 = v35 <= v38;
  BOOL v49 = v35 > v38;
  if (!v48) {
    int v37 = 1;
  }
  if (v37 == 1) {
    goto LABEL_111;
  }
  uint64_t v50 = a1 + 1240;
  int v51 = 0;
  BOOL v49 = 0;
  if (v35 > *(_DWORD *)(a1 + 660)) {
    uint64_t v50 = a1 + 1076;
  }
LABEL_112:
  if (!v24) {
    BOOL v49 = 1;
  }
  if (!v49) {
    uint64_t v50 = a1 + 1240;
  }
  if (*(unsigned char *)v50
    && *(int *)&v166[28] > *(_DWORD *)(v50 + 4)
    && (float)((float)(1.0 - *(float *)(v50 + 8)) * (float)*(int *)&v166[28]) > (float)*(int *)&v166[32]
    && (v41 < *(_DWORD *)(v50 + 12) || (float)(*(float *)(v50 + 16) * v42) <= v40))
  {
    int v141 = 1;
  }
  if (v27
    && *(unsigned char *)(a1 + 788)
    && *(int *)&v166[20] >= *(_DWORD *)(a1 + 792)
    && (float)(*(float *)(a1 + 796) * (float)*(int *)&v166[20]) <= (float)*(int *)&v166[16]
    && (v41 < *(_DWORD *)(a1 + 800) || (float)(*(float *)(a1 + 804) * v42) <= v40))
  {
    int v143 = 1;
    *(unsigned char *)(a1 + 2824) = 1;
  }
  else
  {
    int v143 = 0;
  }
  uint64_t v52 = 0;
  uint64_t v53 = -80;
  while (1)
  {
    if (v51)
    {
      uint64_t v54 = a1 + v53 + 868;
    }
    else
    {
      uint64_t v54 = a1 + 20 * v52 + 1160;
      if (v35 > *(_DWORD *)(a1 + 660)) {
        uint64_t v54 = a1 + 20 * v52 + 996;
      }
    }
    if (!v49) {
      uint64_t v54 = a1 + v53 + 1240;
    }
    if (*(unsigned char *)v54
      && *(int *)&v166[20] >= *(_DWORD *)(v54 + 4)
      && (float)(*(float *)(v54 + 8) * (float)*(int *)&v166[20]) <= (float)*(int *)&v166[16]
      && (v41 < *(_DWORD *)(v54 + 12) || (float)(*(float *)(v54 + 16) * v42) <= v40))
    {
      break;
    }
    ++v52;
    v53 += 20;
    if (!v53) {
      goto LABEL_144;
    }
  }
  int v143 = 1;
LABEL_144:
  double v55 = 0.0;
  if (*(_DWORD *)(a1 + 2760) == 1) {
    double v55 = v16 - *(double *)(a1 + 2768);
  }
  if (*(unsigned char *)(a1 + 904) && v55 >= *(double *)(a1 + 912))
  {
    int v148 = 1;
    *(unsigned char *)(a1 + 2824) = 1;
  }
  else
  {
    int v148 = 0;
  }
  if (*(unsigned char *)(a1 + 920) && *(_DWORD *)(a1 + 488) >= *(_DWORD *)(a1 + 924))
  {
    int v144 = 1;
    *(unsigned char *)(a1 + 2824) = 1;
  }
  else
  {
    int v144 = 0;
  }
  uint64_t v136 = v27;
  uint64_t v137 = *(int *)(a1 + 56);
  if (!v137)
  {
    if (!*(unsigned char *)(a1 + 888))
    {
      unsigned int v145 = 0;
      goto LABEL_174;
    }
    goto LABEL_169;
  }
  int valuePtr = 0;
  CFArrayRef v56 = *(const __CFArray **)(a1 + 24);
  if (!v56)
  {
    uint64_t v11 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_11;
    }
    CFNumberRef v12 = "%s, LQAManager: LQM table is NULL";
    goto LABEL_64;
  }
  if (!CFArrayGetCount(v56))
  {
    uint64_t v11 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_11;
    }
    CFNumberRef v12 = "%s: LQM table is empty";
    goto LABEL_64;
  }
  CFDictionaryRef v57 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
  if (!v57)
  {
    uint64_t v11 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_11;
    }
    CFNumberRef v12 = "%s, LQAManager: Latest LQM Report is NULL";
LABEL_64:
    uint64_t v13 = 4;
    goto LABEL_10;
  }
  if (*(unsigned char *)(a1 + 2832))
  {
    int v58 = sub_100008CF8(a1);
    goto LABEL_165;
  }
  CFDictionaryRef v59 = v57;
  int v58 = *(_DWORD *)(a1 + 2796);
  int valuePtr = v58;
  if (v58)
  {
LABEL_165:
    int v61 = *(_DWORD *)(a1 + 56);
    if (!*(unsigned char *)(a1 + 888))
    {
      unsigned int v145 = v61 >= v58;
      goto LABEL_174;
    }
    if (v61 >= v58)
    {
      unsigned int v145 = 1;
      if (!a2)
      {
        int v146 = 0;
        goto LABEL_182;
      }
LABEL_171:
      if ((float)(*(float *)(a1 + 896) * (float)a2) < (float)a3) {
        goto LABEL_179;
      }
      goto LABEL_174;
    }
LABEL_169:
    unsigned int v145 = 0;
    if (a2 && *(unsigned char *)(a1 + 358)) {
      goto LABEL_171;
    }
LABEL_174:
    int v146 = 0;
    if (!a2 || !*(unsigned char *)(a1 + 643)) {
      goto LABEL_182;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s Simulating probe failure decision" : @"__WiFiLQAMgrCheckTriggerDisconnect"];
    }
LABEL_179:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s autoLeaveDecision:%d probesSent:%ld probesFailed:%ld", "__WiFiLQAMgrCheckTriggerDisconnect", v145, a2, a3)];
    }
    int v146 = 1;
LABEL_182:
    BOOL v64 = sub_100040448(a1, &v167, (unsigned char *)&v167 + 1);
    unsigned int v65 = v141 | v142 | v143 | v148;
    if (v145) {
      unsigned int v65 = 1;
    }
    int v138 = v7;
    int v140 = v64;
    if (v64) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v65;
    }
    int v66 = *(_DWORD *)(a1 + 16);
    int v135 = v25;
    int v132 = v21;
    char v133 = a2;
    char v134 = a3;
    if (v66)
    {
      if (v66 == 2)
      {
        if (v146)
        {
          uint64_t v14 = 1;
        }
        else if (*(unsigned char *)(a1 + 358))
        {
          uint64_t v14 = 0;
        }
        else
        {
          uint64_t v14 = v14;
        }
      }
      else if (v66 == 1)
      {
        uint64_t v14 = v144 | v14;
      }
      else
      {
        uint64_t v14 = v64 || v145 != 0;
      }
    }
    int v67 = HIBYTE(v167);
    BOOL v68 = HIBYTE(v167) != 0;
    if ((_BYTE)v167) {
      int v69 = v14;
    }
    else {
      int v69 = 0;
    }
    BOOL v70 = *(unsigned char *)(a1 + 248) != 0;
    BOOL v71 = (*(void *)(a1 + 168) & 0x11) != 0;
    BOOL v72 = *(unsigned char *)(a1 + 641) != 0;
    [+[WiFiUsageMonitor sharedInstance] addTriggerDisconnectEvent:*(void *)(a1 + 40) isAlerted:0 isConfirmed:v14 isExecuted:0];
    int v73 = +[WiFiUsageMonitor sharedInstance];
    uint64_t v74 = *(void *)(a1 + 40);
    LOBYTE(valuePtr) = v142;
    BYTE1(valuePtr) = v141;
    BYTE2(valuePtr) = v143;
    HIBYTE(valuePtr) = v148;
    char v152 = v144;
    char v153 = v145;
    char v154 = v146;
    int v75 = v140;
    char v155 = v140;
    int v156 = v138;
    char v157 = v24;
    BOOL v158 = v68;
    int v139 = v69;
    char v159 = v69;
    BOOL v160 = v70;
    BOOL v161 = v71;
    BOOL v162 = v72;
    int v163 = v168;
    __int16 v164 = v169;
    uint64_t v165 = v137;
    [(WiFiUsageMonitor *)v73 setTdLogic_decisionState:&valuePtr forInterface:v74];
    if (v14)
    {
      id v76 = *(void (**)(void, void))(a1 + 624);
      if (v76) {
        v76(*(void *)(a1 + 632), 0);
      }
    }
    int v77 = v67;
    char v78 = HIBYTE(v167);
    *(unsigned char *)(a1 + 273) = HIBYTE(v167);
    char v79 = v167;
    *(unsigned char *)(a1 + 272) = v167;
    if (v144) {
      int v80 = 16;
    }
    else {
      int v80 = 0;
    }
    if (v146) {
      int v81 = 32;
    }
    else {
      int v81 = 0;
    }
    if (v148) {
      int v82 = 64;
    }
    else {
      int v82 = 0;
    }
    unsigned int v83 = v145;
    int v84 = v80 | v82 | v81 | (2 * v142) | (8 * v141) | (4 * v143) | v14 | (v145 << 22) | (v140 << 23);
    if (v139) {
      int v85 = 0;
    }
    else {
      int v85 = 1024;
    }
    int v86 = *(unsigned __int8 *)(a1 + 248);
    uint64_t v87 = (v24 << 7) | ((v67 != 0) << 8) | v85 | v84 | (v86 << 9) | (*(unsigned __int8 *)(a1 + 2824) << 21) | (((*(unsigned char *)(a1 + 168) & 0x11) != 0) << 14);
    unsigned int v88 = *(unsigned __int8 *)(a1 + 2752);
    if (v88 >= 0xA)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Invalid curRecord %d", "__WiFiLQAMgrGetNextLQAMetricsRecordIdx", *(unsigned __int8 *)(a1 + 2752));
      }
    }
    else if (*(unsigned char *)(a1 + 2753))
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 2, "%s: curRecord %d is busy", "__WiFiLQAMgrGetNextLQAMetricsRecordIdx", *(unsigned __int8 *)(a1 + 2752));
      }
    }
    else
    {
      long long v89 = (unsigned __int8 *)(a1 + 1304);
      unsigned int v90 = *(unsigned __int8 *)(a1 + 1304);
      if (v90 < 0xB)
      {
        if (v90 == 10)
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 2, "%s: submittotalRecords %d", "__WiFiLQAMgrGetNextLQAMetricsRecordIdx", *v89);
          }
          sub_10004E974((unsigned char *)(a1 + 1304));
          unsigned int v88 = 0;
          *(unsigned char *)(a1 + 1304) = 0;
          *(unsigned char *)(a1 + 2752) = 0;
          char v78 = HIBYTE(v167);
          char v79 = v167;
          LOBYTE(v86) = *(unsigned char *)(a1 + 248);
        }
        int v92 = 1;
        *(unsigned char *)(a1 + 2753) = 1;
        uint64_t v93 = a1 + 144 * v88;
        *(int32x2_t *)&long long v94 = vrev64_s32(*(int32x2_t *)v166);
        *((void *)&v94 + 1) = __PAIR64__(*(unsigned int *)&v166[28], *(unsigned int *)&v166[8]);
        *(_OWORD *)(v93 + 1312) = v94;
        char v95 = v166[36];
        *(_DWORD *)(v93 + 1328) = *(_DWORD *)&v166[32];
        *(int32x4_t *)(v93 + 1332) = vzip2q_s32(*(int32x4_t *)&v166[12], vzip1q_s32(*(int32x4_t *)&v166[12], vdupq_lane_s32(*(int32x2_t *)&v166[12], 0)));
        *(unsigned char *)(v93 + 1349) = v14;
        *(unsigned char *)(v93 + 1348) = v95;
        *(unsigned char *)(v93 + 1350) = v148;
        *(unsigned char *)(v93 + 1352) = v78;
        *(unsigned char *)(v93 + 1353) = v79;
        *(unsigned char *)(v93 + 1354) = v86;
        *(unsigned char *)(v93 + 1355) = v144;
        *(double *)(v93 + 1384) = v29;
        *(unsigned char *)(v93 + 1351) = *(_DWORD *)(a1 + 2776);
        *(void *)(v93 + 1408) = *(void *)(a1 + 280);
        *(unsigned char *)(v93 + 1448) = v145;
        *(unsigned char *)(v93 + 1449) = *(_DWORD *)(a1 + 56);
        *(unsigned char *)(v93 + 1450) = v146;
        *(unsigned char *)(v93 + 1451) = v133;
        *(unsigned char *)(v93 + 1452) = v134;
LABEL_225:
        if (*(unsigned char *)(a1 + 641))
        {
          uint64_t v96 = v87;
          uint64_t v97 = v136;
          goto LABEL_227;
        }
        if (((v14 ^ 1) & 1) == 0 && v83 && !v75)
        {
          if (!*(unsigned char *)(a1 + 357))
          {
            uint64_t v149 = v87;
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Overriding AutoLeave (User Preference Adaptive) TriggerDisconnect decision for Probes", "__WiFiLQAMgrCheckTriggerDisconnect")];
            }
            *(unsigned char *)(a1 + 357) = 1;
            *(unsigned char *)(a1 + 392) = 1;
            sub_1000413A0(a1);
            uint64_t v102 = 0;
            int v104 = 0;
            uint64_t v14 = 0;
            uint64_t v103 = 0x1000000;
            unsigned int v99 = &objc_retainAutoreleaseReturnValue_ptr;
            goto LABEL_262;
          }
          if (v146)
          {
            uint64_t v149 = v87;
            unsigned int v99 = &objc_retainAutoreleaseReturnValue_ptr;
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:message:3, "%s: Proceeding with AutoLeave (User Preference Adaptive) TriggerDisconnect", "__WiFiLQAMgrCheckTriggerDisconnect"];
            }
            uint64_t v102 = 0;
            uint64_t v103 = 0;
            int v104 = 0;
LABEL_262:
            uint64_t v97 = v136;
LABEL_335:
            char v126 = v92 ^ 1;
            if (*(unsigned char *)(a1 + 161)) {
              char v126 = 1;
            }
            if ((v126 & 1) == 0)
            {
              *(unsigned char *)(a1 + 144 * v88 + 1349) = v14;
              if (v14)
              {
                if (*(double *)(a1 + 136) != 0.0) {
                  *(void *)(a1 + 144 * v88 + 1432) = (unint64_t)(CFAbsoluteTimeGetCurrent()
                }
                                                                          - *(double *)(a1 + 136));
                if (*(double *)(a1 + 120) != 0.0) {
                  *(void *)(a1 + 144 * v88 + 1424) = (unint64_t)(CFAbsoluteTimeGetCurrent()
                }
                                                                          - *(double *)(a1 + 120));
              }
              sub_100040F1C((unsigned char *)a1, v88);
            }
LABEL_344:
            double v127 = *(double *)(a1 + 184);
            if (v127 != 0.0) {
              *(double *)(a1 + 192) = v16 - v127;
            }
            [objc_msgSend(v99[366], "sharedInstance") setTdLogic_execState:forInterface:v97 | ((unint64_t)(v135 != 0) << 8) | v102 forInterface:v103 forInterface:*(void *)(a1 + 40)];
            if (*(unsigned char *)(a1 + 161)) {
              goto LABEL_13;
            }
            if (v104)
            {
              unsigned int v129 = (void *)qword_10027DD68;
              if (qword_10027DD68)
              {
LABEL_352:
                uint64_t v147 = v128;
                objc_msgSend(v129, "WFLog:message:", 3, "%s: TrgDiscStatus %u [Rssi %d TxFrms %d TxFail %d TxRet %d fwFrms %d fwFail %d fwRtry %d RxFrms %d BcnSch %d BcnRx %d walkout %d possibleRoam %d Awd %d initPr %ld UnGw %f FgApp %ld SympScore %ld UsrInput %ld]", "__WiFiLQAMgrCheckTriggerDisconnect", v149, *(unsigned int *)&v166[36], *(unsigned int *)&v166[4], *(unsigned int *)v166, *(unsigned int *)&v166[8], *(unsigned int *)&v166[20], *(unsigned int *)&v166[16], *(unsigned int *)&v166[24], *(unsigned int *)&v166[12], *(unsigned int *)&v166[28], *(unsigned int *)&v166[32], HIBYTE(v167), v167,
                  0,
                  *(unsigned __int8 *)(a1 + 358),
                  *(void *)&v55,
                  sub_10003C710(a1),
                  0,
                  *(unsigned __int8 *)(a1 + 1296));
                uint64_t v128 = v147;
              }
            }
            else
            {
              if (byte_10027D5F0 != 1) {
                goto LABEL_13;
              }
              unsigned int v129 = (void *)qword_10027DD68;
              if (qword_10027DD68) {
                goto LABEL_352;
              }
            }
            goto LABEL_13;
          }
        }
        uint64_t v96 = v87;
        uint64_t v97 = v136;
        if (v132)
        {
          int v150 = v87;
          id v105 = +[WiFiRoamManager sharedWiFiRoamManager];
          if (v136 & v14)
          {
            int v106 = v139 ^ 1;
            if (v77) {
              int v106 = 1;
            }
            int v107 = v140;
            if (*(_DWORD *)(a1 + 2796) <= *(_DWORD *)(a1 + 656) && v106)
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Not Triggering Roaming - userWalkout %d, possibleRoam %d\n", "__WiFiLQAMgrCheckTriggerDisconnect", HIBYTE(v167), v167);
              }
              uint64_t v100 = v150 | 0xC0000u;
              goto LABEL_312;
            }
          }
          else
          {
            int v107 = v140;
            int v106 = v139 ^ 1;
            if (v77) {
              int v106 = 1;
            }
          }
          if (v107) {
            int v109 = v106;
          }
          else {
            int v109 = 0;
          }
          if (v109 == 1)
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Use Reduced Roam time for fast disconnect - userWalkout %d, possibleRoam %d\n", "__WiFiLQAMgrCheckTriggerDisconnect", HIBYTE(v167), v167);
            }
          }
          if (*(unsigned char *)(a1 + 177))
          {
            if (_os_feature_enabled_impl()) {
              int v111 = (*(unsigned __int8 *)(a1 + 2948) >> 1) & 1;
            }
            else {
              LOBYTE(v111) = 0;
            }
            if (*(int *)&v166[4] >= 5)
            {
              if ((float)(v34 * (float)*(int *)&v166[4]) <= (float)*(int *)v166) {
                LOBYTE(v111) = 1;
              }
              if ((v111 & 1) == 0)
              {
                sub_10005DD54(*(void *)(a1 + 32), *(void *)(a1 + 40), *(const void **)(a1 + 48), *(_DWORD *)(a1 + 224), 0, 1, 0);
                *(unsigned char *)(a1 + 177) = 0;
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Improved PER, TxFrms %d TxFail %d", "__WiFiLQAMgrCheckTriggerDisconnect", *(unsigned int *)&v166[4], *(unsigned int *)v166);
                }
                uint64_t v102 = 0;
                int v104 = 0;
                uint64_t v14 = 0;
                uint64_t v149 = v150 | 0x60000u;
                uint64_t v103 = 0x10000;
                unsigned int v99 = &objc_retainAutoreleaseReturnValue_ptr;
                goto LABEL_335;
              }
            }
          }
          if (v14 && !*(unsigned char *)(a1 + 177))
          {
            *(double *)(a1 + 184) = v16;
            *(void *)(a1 + 192) = 0;
            sub_10005DD54(*(void *)(a1 + 32), *(void *)(a1 + 40), *(const void **)(a1 + 48), *(_DWORD *)(a1 + 224), 1, 0, 0);
            unsigned int v99 = &objc_retainAutoreleaseReturnValue_ptr;
            if (sub_100072C4C(*(void *)(a1 + 32)) && v105)
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4, @"%s: Attempting host triggered roam based on TdCheck", @"__WiFiLQAMgrCheckTriggerDisconnect"];
              }
              [v105 setLastRoamStatusFailedNoCandidateTs:0.0];
              [[+[WiFiRoamManager sharedWiFiRoamManager](WiFiRoamManager, "sharedWiFiRoamManager") roamWithReason:6 bandPreference:0];
            }
            *(unsigned char *)(a1 + 177) = 1;
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Overriding TriggerDisconnect decision for Roam", "__WiFiLQAMgrCheckTriggerDisconnect")];
            }
            uint64_t v102 = 0;
            uint64_t v14 = 0;
            uint64_t v149 = v150 | 0x50000u;
LABEL_299:
            int v104 = 1;
            uint64_t v103 = (uint64_t)&_mh_execute_header;
            goto LABEL_335;
          }
          uint64_t v96 = v150 | 0x40000u;
          double v113 = *(double *)(a1 + 184);
          if (v113 == 0.0) {
            double v114 = 0.0;
          }
          else {
            double v114 = v16 - v113;
          }
          if (!v105
            || (([v105 lastRoamStatusFailedNoCandidateTs], v115 == 0.0)
              ? (double v116 = 0.0)
              : (double v116 = v16 - v115),
                v114 == 0.0 || v116 == 0.0))
          {
            if (!v14) {
              goto LABEL_227;
            }
          }
          else
          {
            if (v114 > v116)
            {
              if (v92)
              {
                [v105 lastRoamStatusFailedNoCandidateTs];
                unsigned int v98 = v88;
                *(void *)(a1 + 144 * v88 + 1440) = (unint64_t)(v16 - v117);
                *(_DWORD *)(a1 + 2808) = v96;
                goto LABEL_229;
              }
              *(_DWORD *)(a1 + 2808) = v96;
              goto LABEL_311;
            }
            double v122 = v16 - *(double *)(a1 + 184);
            if (v122 > 10.0) {
              goto LABEL_227;
            }
            int v123 = v122 > 5.0 ? v109 : 0;
            if ((v123 | v14 ^ 1)) {
              goto LABEL_227;
            }
          }
          if (*(unsigned char *)(a1 + 177) && v114 <= 10.0)
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Not Roamed for %2.2f secs", "__WiFiLQAMgrCheckTriggerDisconnect", *(void *)&v114);
            }
            uint64_t v149 = v150 | 0x140000u;
            unsigned int v99 = &objc_retainAutoreleaseReturnValue_ptr;
            if (!v92)
            {
              uint64_t v14 = 0;
              uint64_t v102 = 0;
              uint64_t v103 = (uint64_t)&_mh_execute_header;
              int v104 = 1;
              goto LABEL_344;
            }
            uint64_t v102 = 0;
            uint64_t v14 = 0;
            *(void *)(a1 + 144 * v88 + 1440) = 10;
            goto LABEL_299;
          }
        }
LABEL_227:
        *(_DWORD *)(a1 + 2808) = v96;
        if (v92)
        {
          unsigned int v98 = v88;
LABEL_229:
          unsigned int v99 = &objc_retainAutoreleaseReturnValue_ptr;
          *(_DWORD *)(a1 + 144 * v98 + 1392) = v96;
          uint64_t v100 = v96;
          goto LABEL_313;
        }
LABEL_311:
        uint64_t v100 = v96;
LABEL_312:
        unsigned int v99 = &objc_retainAutoreleaseReturnValue_ptr;
LABEL_313:
        uint64_t v149 = v100;
        if (!v14)
        {
          uint64_t v102 = 0;
          uint64_t v103 = 0;
          int v104 = 0;
          goto LABEL_335;
        }
        if (!*(unsigned char *)(a1 + 2832))
        {
          if (&_managed_event_fetch)
          {
            *(_DWORD *)(a1 + 492) = 0;
            if (sub_10003EF28((CFTypeRef)a1))
            {
              uint64_t v102 = 0;
              uint64_t v103 = 0;
              int v104 = 0;
              uint64_t v14 = 0;
              *(unsigned char *)(a1 + 161) = 1;
              goto LABEL_335;
            }
          }
        }
        if (!sub_10003C710(a1))
        {
          *(unsigned char *)(a1 + 161) = 0;
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:2, @"%s Foreground Networking App not present. Cache TrgDisc decision", @"__WiFiLQAMgrCheckTriggerDisconnect"];
          }
          uint64_t v103 = 0;
          uint64_t v14 = 0;
          int v104 = 1;
          *(unsigned char *)(a1 + 2793) = 1;
          uint64_t v102 = 0x100000000000000;
          goto LABEL_335;
        }
        if (*(unsigned char *)(a1 + 641))
        {
          uint64_t v102 = 0;
          uint64_t v103 = 0;
          uint64_t v14 = 0;
          *(unsigned char *)(a1 + 161) = 0;
LABEL_322:
          int v104 = 1;
          goto LABEL_335;
        }
        if (*(unsigned char *)(a1 + 644))
        {
          if (*(unsigned char *)(a1 + 1296))
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 2, "%s Suppress TrgDisc decision with User's previous input", "__WiFiLQAMgrCheckTriggerDisconnect");
            }
            uint64_t v102 = 0;
            uint64_t v14 = 0;
            *(unsigned char *)(a1 + 161) = 0;
            uint64_t v103 = 1;
            goto LABEL_322;
          }
          if (*(void *)(a1 + 1288) || !sub_100040C28(a1))
          {
            uint64_t v102 = 0;
            int v104 = 0;
            uint64_t v14 = 0;
            *(unsigned char *)(a1 + 161) = 1;
            uint64_t v103 = 256;
            goto LABEL_335;
          }
        }
        uint64_t v102 = 0;
        uint64_t v103 = 0;
        int v104 = 0;
        uint64_t v14 = 1;
        goto LABEL_335;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Err total records %d", "__WiFiLQAMgrGetNextLQAMetricsRecordIdx", *v89)];
      }
    }
    int v92 = 0;
    unsigned int v88 = 255;
    int v75 = v140;
    unsigned int v83 = v145;
    goto LABEL_225;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v59, @"RSSI");
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    int v58 = valuePtr;
    goto LABEL_165;
  }
LABEL_12:
  uint64_t v14 = 0;
LABEL_13:
  *(_DWORD *)(a1 + 488) = 0;
  return v14;
}

uint64_t sub_100039D00(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  double valuePtr = 0.0;
  if (!a1 || !*(unsigned char *)(a1 + 645) || !*(unsigned char *)(a1 + 646)) {
    return 1;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"kWiFiLqaMgrLqmSampleLocalTimestamp");
  if (!Value)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s LqmSampleLocalTimestamp numberRef is NULL!", "__WiFiLQAMgrCheckForPossibleRoam"];
    }
    goto LABEL_57;
  }
  CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
  if (valuePtr == 0.0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s sampleTimestamp is NULL!" args:__WiFiLQAMgrCheckForPossibleRoam];
    }
LABEL_57:
    return 1;
  }
  id v5 = +[WiFiRoamManager sharedWiFiRoamManager];
  CFStringRef v6 = v5;
  if (!v5) {
    goto LABEL_60;
  }
  [v5 roamScanEndTimestamp];
  if (v7 == 0.0 || v7 < valuePtr) {
    goto LABEL_60;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s Using roam state from WiFiRoamManager" args:("__WiFiLQAMgrCheckForPossibleRoam")];
  }
  CFDictionaryRef v10 = (const __CFDictionary *)[v6 roamState];
  if (!v10)
  {
LABEL_60:
    CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ROAM_STATE");
    if (!v10) {
      return 1;
    }
  }
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v10, @"ROAM_SCAN_COUNT");
  if (!v11) {
    return 1;
  }
  CFNumberGetValue(v11, kCFNumberIntType, &v32);
  if (!v32) {
    return 1;
  }
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(v10, @"ROAM_SCAN_AGE");
  if (!v12) {
    return 1;
  }
  CFNumberGetValue(v12, kCFNumberIntType, (char *)&v32 + 4);
  if (v32 && SHIDWORD(v32) < 2000) {
    return 0;
  }
  if (v32 && SHIDWORD(v32) > 10000) {
    return 1;
  }
  CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v10, @"RSSI");
  if (!v15) {
    return 1;
  }
  CFNumberGetValue(v15, kCFNumberIntType, (char *)&v31 + 4);
  CFArrayRef v16 = (const __CFArray *)CFDictionaryGetValue(v10, @"ROAM_CACHE");
  if (!v16 || (CFArrayRef v17 = v16, Count = CFArrayGetCount(v16), Count < 1))
  {
LABEL_41:
    uint64_t v13 = 0;
    if (!v6) {
      return v13;
    }
LABEL_42:
    if (![v6 isLastRoamDueToBeaconLost]) {
      return v13;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: latest roam was due to beacon lost, skip waiting for roam for trigger disconnect", "__WiFiLQAMgrCheckForPossibleRoam")];
    }
    return 0;
  }
  CFIndex v19 = 0;
  CFIndex v20 = Count;
  uint64_t v21 = Count;
  BOOL v22 = 1;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, v19);
    if (!ValueAtIndex)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"__WiFiLQAMgrCheckForPossibleRoam: roamCandidateDictRef is NULL!"];
      }
      goto LABEL_57;
    }
    CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"RSSI");
    if (!v24)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: roamCandidateRssi is NULL!", @"__WiFiLQAMgrCheckForPossibleRoam"];
      }
      goto LABEL_57;
    }
    CFNumberGetValue(v24, kCFNumberIntType, &v31);
    if ((int)v31 >= -89)
    {
      if ((int)v31 > -76) {
        goto LABEL_47;
      }
      if ((int)v31 - HIDWORD(v31) >= 5)
      {
        double v25 = *(double *)(a1 + 184);
        if (v25 == 0.0)
        {
          double v27 = 0.0;
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          double v25 = *(double *)(a1 + 184);
          double v27 = Current - v25;
        }
        if (v25 == 0.0) {
          goto LABEL_47;
        }
        if (*(unsigned char *)(a1 + 177) && v27 < 5.0) {
          break;
        }
      }
    }
    BOOL v22 = ++v19 < v20;
    if (v21 == v19) {
      goto LABEL_41;
    }
  }
  if (!v22) {
    goto LABEL_41;
  }
LABEL_47:
  uint64_t v13 = 1;
  if (v6) {
    goto LABEL_42;
  }
  return v13;
}

uint64_t sub_10003A0C8(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  uint64_t result = 0;
  uint64_t valuePtr = 0;
  v51[0] = 0;
  unsigned int v49 = 0;
  if (!a1 || !a2) {
    return result;
  }
  if (!*(unsigned char *)(a1 + 645) || !*(unsigned char *)(a1 + 646)) {
    return 0;
  }
  int Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 256));
  if (Count <= 3)
  {
    uint64_t v43 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v44 = "Insufficient samples for walk out detection";
      uint64_t v45 = 2;
LABEL_93:
      [v43 WFLog:v45 message:v44];
      goto LABEL_94;
    }
    goto LABEL_94;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"RSSI");
  if (!Value)
  {
    uint64_t v43 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_94;
    }
    uint64_t v46 = "__WiFiLQAMgrDetectWalkOut";
    uint64_t v44 = "%s: LQAManager: rssiNumRef from lqmDict is NULL!";
LABEL_92:
    uint64_t v45 = 4;
    goto LABEL_93;
  }
  CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 256), Count - 1);
  if (!ValueAtIndex)
  {
    uint64_t v43 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_94;
    }
    uint64_t v46 = "__WiFiLQAMgrDetectWalkOut";
    uint64_t v44 = "%s: LQAManager: paramDict is NULL!";
    goto LABEL_92;
  }
  CFDictionaryRef v9 = ValueAtIndex;
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"RSSI");
  if (!v10)
  {
    uint64_t v43 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_94;
    }
    uint64_t v46 = "__WiFiLQAMgrDetectWalkOut";
    uint64_t v44 = "%s: LQAManager: rssiNumRef is NULL!";
    goto LABEL_92;
  }
  CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v9, @"motion-state");
  if (!v11)
  {
    uint64_t v43 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v46 = "__WiFiLQAMgrDetectWalkOut";
      uint64_t v44 = "%s: LQAManager: motionStateRef is NULL!";
      goto LABEL_92;
    }
LABEL_94:
    return 0;
  }
  uint64_t v47 = a2;
  CFNumberGetValue(v11, kCFNumberIntType, (char *)v51 + 4);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  CFIndex v19 = (Count - 2);
  double v20 = 0.0;
  do
  {
    CFDictionaryRef v21 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 256), v19);
    if (!v21)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: LQAManager: paramDict is NULL!", @"__WiFiLQAMgrDetectWalkOut"];
      }
      goto LABEL_63;
    }
    CFDictionaryRef v22 = v21;
    CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(v21, @"RSSI");
    if (!v23)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: LQAManager: rssiNumRef is NULL!", @"__WiFiLQAMgrDetectWalkOut"];
      }
      goto LABEL_63;
    }
    CFNumberGetValue(v23, kCFNumberSInt32Type, &v49);
    CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v22, @"motion-state");
    if (!v24)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: LQAManager: motionStateRef is NULL!", @"__WiFiLQAMgrDetectWalkOut"];
      }
      goto LABEL_63;
    }
    CFNumberGetValue(v24, kCFNumberIntType, v51);
    int v25 = v51[0];
    unsigned int v26 = v49;
    if (v51[0] == 0x200000002)
    {
      if ((int)v49 <= (int)valuePtr)
      {
        uint64_t v16 = 0;
        uint64_t v13 = 0;
        uint64_t v12 = 0;
        uint64_t v17 = (v17 + 1);
        if (v15) {
          uint64_t v15 = v15;
        }
        else {
          uint64_t v15 = valuePtr;
        }
        uint64_t v14 = v49;
      }
      else if ((int)(v49 - valuePtr) >= 2)
      {
        uint64_t v17 = 0;
        uint64_t v15 = 0;
        uint64_t v14 = 0;
        int v27 = 0;
        uint64_t v16 = (v16 + 1);
        if (v12) {
          uint64_t v12 = v12;
        }
        else {
          uint64_t v12 = valuePtr;
        }
        uint64_t v13 = v49;
        goto LABEL_31;
      }
      int v27 = v15 - v14;
      if ((int)v17 > 2 && v27 > 11)
      {
        int v28 = 1;
        double v29 = 0.9;
        goto LABEL_43;
      }
      if ((int)v17 >= 3 && v27 > 7)
      {
        double v29 = 0.75;
        int v28 = 1;
        goto LABEL_43;
      }
LABEL_31:
      BOOL v30 = v17 == 3 && (int)v15 < -80;
      int v31 = v30;
      BOOL v32 = v27 > 4;
      BOOL v33 = (v31 & v32) == 0;
      if ((v31 & v32) != 0) {
        int v28 = 1;
      }
      else {
        int v28 = v18;
      }
      if (v33) {
        double v29 = v20;
      }
      else {
        double v29 = 0.5;
      }
LABEL_43:
      BOOL v34 = (int)v16 > 2;
      BOOL v35 = (int)v13 - (int)v12 > 5;
      if (v34 && v35) {
        int v18 = 0;
      }
      else {
        int v18 = v28;
      }
      if (v34 && v35) {
        double v20 = 0.0;
      }
      else {
        double v20 = v29;
      }
      int v25 = 2;
      if (a3 && SHIDWORD(valuePtr) <= -70)
      {
        if (qword_10027DD68)
        {
          int v37 = "YES";
          if (!v18) {
            int v37 = "NO";
          }
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Walkout(%d %d): %s (%f) +veSlope{ %d %d %d } -veSlope { %d %d %d }", a3, valuePtr, v37, *(void *)&v20, v16, v13, v12, v17, v15, v14)];
        }
        unsigned int v26 = v49;
        int v25 = v51[0];
      }
    }
    LODWORD(valuePtr) = v26;
    HIDWORD(v51[0]) = v25;
    BOOL v30 = v19-- <= 0;
  }
  while (!v30);
  if (a3 && v18 && SHIDWORD(valuePtr) <= -70)
  {
    int v18 = 1;
    sub_10001A538(v47, @"userCoverageWalkout", 1);
    sub_10005A8B4(v47, @"userCoverageWalkoutConfidenceScore", v20);
    if (qword_10027DD68)
    {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "User Walkout detected with score %f", *(void *)&v20);
      int v18 = 1;
    }
LABEL_63:
  }
  if (a3) {
    BOOL v39 = v18 == 0;
  }
  else {
    BOOL v39 = 1;
  }
  unsigned int v41 = !v39 && (int)v14 < -70;
  if (v20 >= 0.5) {
    return v41;
  }
  else {
    return 0;
  }
}

BOOL sub_10003A620(uint64_t a1)
{
  CFNumberRef v26 = 0;
  CFNumberRef number = 0;
  CFDictionaryRef theDict = 0;
  CFNumberRef v25 = 0;
  uint64_t valuePtr = 0;
  int v22 = 0;
  CFBooleanRef value = 0;
  if (a1)
  {
    CFArrayRef v2 = *(const __CFArray **)(a1 + 24);
    if (v2)
    {
      CFIndex Count = CFArrayGetCount(v2);
      if (Count >= 3)
      {
        CFIndex v4 = Count;
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), Count - 1);
        if (ValueAtIndex)
        {
          if (CFDictionaryGetValueIfPresent(ValueAtIndex, @"LQMTIMESTAMP", (const void **)&value) && value != 0)
          {
            double AbsoluteTime = CFDateGetAbsoluteTime((CFDateRef)value);
            double Current = CFAbsoluteTimeGetCurrent();
            if (Current - AbsoluteTime >= *(double *)(a1 + 672))
            {
              CFIndex v11 = 0;
              int v10 = 0;
              unsigned __int8 v9 = 0;
              while (1)
              {
                CFDictionaryRef v12 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v11);
                if (v12)
                {
                  CFDictionaryRef v13 = v12;
                  int ValueIfPresent = CFDictionaryGetValueIfPresent(v12, @"LQMTIMESTAMP", (const void **)&value);
                  uint64_t v15 = value;
                  if (ValueIfPresent) {
                    BOOL v16 = value == 0;
                  }
                  else {
                    BOOL v16 = 1;
                  }
                  if (!v16)
                  {
                    double AbsoluteTime = CFDateGetAbsoluteTime((CFDateRef)value);
                    uint64_t v15 = value;
                  }
                  if (v15)
                  {
                    if (Current - AbsoluteTime <= *(double *)(a1 + 672))
                    {
                      if (CFDictionaryGetValueIfPresent(v13, @"CCA_STATS", (const void **)&theDict) && theDict)
                      {
                        if (CFDictionaryGetValueIfPresent(theDict, @"CCA_SELF_WAKE", (const void **)&number)
                          && number)
                        {
                          CFNumberGetValue(number, kCFNumberIntType, (char *)&valuePtr + 4);
                        }
                        if (CFDictionaryGetValueIfPresent(theDict, @"CCA_OTHER_WAKE", (const void **)&v25) && v25) {
                          CFNumberGetValue(v25, kCFNumberIntType, &valuePtr);
                        }
                        if (CFDictionaryGetValueIfPresent(theDict, @"CCA_INTERFERENCE_WAKE", (const void **)&v26)
                          && v26)
                        {
                          CFNumberGetValue(v26, kCFNumberIntType, &v22);
                        }
                        if ((v22 + valuePtr) > 0x50) {
                          ++v9;
                        }
                      }
                      if (v11 + 1 != v9) {
                        goto LABEL_11;
                      }
                      int v10 = 1;
                    }
                  }
                  else
                  {
                    if (qword_10027DD68) {
                      [((id)qword_10027DD68) WFLog:4, @"%s: No Timestamp in LQM Record", @"__WiFiLQAMgrCheckCcaWiFiAssist"];
                    }
                  }
                }
                if (v4 == ++v11) {
                  return v10 && v9 > 2u;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: WiFiLQAMgrRef is NULL", @"__WiFiLQAMgrCheckCcaWiFiAssist"];
    }
  }
  unsigned __int8 v9 = 0;
LABEL_11:
  int v10 = 0;
  return v10 && v9 > 2u;
}

unint64_t sub_10003A8CC(uint64_t a1)
{
  memset(buffer, 170, 19);
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: curNetwork is NULL" args:__WiFiLQAMgrGetCurBssid];
    }
    goto LABEL_12;
  }
  CFStringRef v1 = (const __CFString *)sub_10001E404(a1, @"BSSID");
  if (!v1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: curNetwork BSSID is NULL" args:("__WiFiLQAMgrGetCurBssid")];
    }
    goto LABEL_12;
  }
  if (!CFStringGetCString(v1, buffer, 19, 0))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: CString conversion failure" :@"__WiFiLQAMgrGetCurBssid"];
    }
LABEL_12:
    return 0;
  }
  unint64_t result = (unint64_t)ether_aton(buffer);
  if (result)
  {
    uint64_t v3 = (unsigned __int8 *)result;
    uint64_t v4 = 0;
    unint64_t result = 0;
    do
    {
      unsigned int v5 = *v3++;
      result |= (unint64_t)v5 << v4;
      v4 += 8;
    }
    while (v4 != 48);
  }
  return result;
}

void sub_10003AA24(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    if (cf)
    {
      CFRetain(cf);
      uint64_t v4 = *(NSObject **)(a1 + 296);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10003BDC4;
      block[3] = &unk_10023F048;
      void block[4] = a1;
      void block[5] = cf;
      dispatch_async(v4, block);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: LQAMgr is NULL" : @"WiFiLQAMgrIgnoreDiagnosticProbe"];
    }
  }
}

uint64_t sub_10003AB0C(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    BOOL v3 = sub_100023F30(v2) != 1;
  }
  else {
    BOOL v3 = 1;
  }
  if (!*(unsigned char *)(a1 + 645) || !*(unsigned char *)(a1 + 646)) {
    return (*(_DWORD *)(a1 + 224) - 3) < 4;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 224);
  if (v4 != 3) {
    BOOL v3 = 0;
  }
  BOOL v5 = v4 > 6;
  int v6 = (1 << v4) & 0x52;
  return !v5 && v6 != 0 || v3;
}

void sub_10003ABA4(uint64_t a1, const void *a2, uint64_t a3, char a4)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (a1)
  {
    double v9 = Current;
    if (a3 != 2)
    {
      if (a3 == 1)
      {
        if (*(unsigned char *)(a1 + 1304))
        {
          sub_10004E974((unsigned char *)(a1 + 1304));
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:message:4, "%s: submittotalRecords %d", "WiFiLQAMgrLinkStateNotify", *(unsigned __int8 *)(a1 + 1304)];
          }
        }
        *(unsigned char *)(a1 + 1304) = 0;
        *(unsigned char *)(a1 + 2752) = 0;
        *(unsigned char *)(a1 + 161) = 0;
        *(unsigned char *)(a1 + 200) = 0;
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 24));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 256));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 264));
        *(_DWORD *)(a1 + 2796) = 0;
        *(unsigned char *)(a1 + 288) = 0;
        *(_DWORD *)(a1 + 20) = 0;
        if (qword_10027DD68)
        {
          uint64_t v12 = *(int *)(a1 + 20);
          if (v12 > 4) {
            CFStringRef v13 = @"Bogus";
          }
          else {
            CFStringRef v13 = *(&off_10023F260 + v12);
          }
          [(id)qword_10027DD68 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v13 message];
        }
        if (*(double *)(a1 + 136) != 0.0)
        {
          int v18 = +[WiFiUsageMonitor sharedInstance];
          if (*(double *)(a1 + 136) == 0.0) {
            double v19 = 0.0;
          }
          else {
            double v19 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 136);
          }
          [(WiFiUsageMonitor *)v18 setTdLogic_end:13 evalTime:*(int *)(a1 + 2796) rssi:*(void *)(a1 + 40) roamTime:v19 forInterface:*(double *)(a1 + 192)];
        }
        *(unsigned char *)(a1 + 392) = 0;
        dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 336), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 544), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        double v20 = *(NSObject **)(a1 + 2904);
        if (v20) {
          dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        }
        *(unsigned char *)(a1 + 2912) = 0;
        *(unsigned char *)(a1 + 356) = 0;
        sub_10003AA24(a1, *(CFTypeRef *)(a1 + 376));
        CFDictionaryRef v21 = *(const void **)(a1 + 376);
        if (v21)
        {
          CFRelease(v21);
          *(void *)(a1 + 376) = 0;
        }
        *(_WORD *)(a1 + 357) = 0;
        sub_10003AA24(a1, *(CFTypeRef *)(a1 + 384));
        int v22 = *(const void **)(a1 + 384);
        if (v22)
        {
          CFRelease(v22);
          *(void *)(a1 + 384) = 0;
        }
        *(void *)(a1 + 360) = 0;
        *(_DWORD *)(a1 + 2760) = 0;
        sub_100037FCC(a1, 0);
        *(unsigned char *)(a1 + 1296) = 0;
        *(_WORD *)(a1 + 176) = 1;
        double v23 = *(double *)(a1 + 184);
        if (v23 != 0.0) {
          *(double *)(a1 + 192) = v9 - v23;
        }
        *(void *)(a1 + 184) = 0;
        dispatch_async_f(*(dispatch_queue_t *)(a1 + 2920), (void *)a1, (dispatch_function_t)sub_10003669C);
        *(_OWORD *)(a1 + 2944) = 0u;
        goto LABEL_72;
      }
      if (a3)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:4, "%s: Unknown Link State Notification %d", "WiFiLQAMgrLinkStateNotify", a3];
        }
        goto LABEL_72;
      }
    }
    if (a2)
    {
      if (a3)
      {
        if (*(_DWORD *)(a1 + 20))
        {
LABEL_42:
          if (a3 == 2 && *(unsigned char *)(a1 + 1304))
          {
            sub_10004E974((unsigned char *)(a1 + 1304));
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: submittotalRecords %d", "WiFiLQAMgrLinkStateNotify", *(unsigned __int8 *)(a1 + 1304));
            }
          }
          goto LABEL_47;
        }
      }
      else if (!*(_DWORD *)(a1 + 20))
      {
LABEL_47:
        *(unsigned char *)(a1 + 1304) = 0;
        *(unsigned char *)(a1 + 2752) = 0;
        *(unsigned char *)(a1 + 161) = 0;
        *(unsigned char *)(a1 + 200) = 0;
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 24));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 256));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 264));
        *(unsigned char *)(a1 + 248) = a4;
        sub_100037FCC(a1, a2);
        *(unsigned char *)(a1 + 288) = 0;
        *(_DWORD *)(a1 + 20) = 1;
        if (qword_10027DD68)
        {
          uint64_t v26 = *(int *)(a1 + 20);
          if (v26 > 4) {
            CFStringRef v27 = @"Bogus";
          }
          else {
            CFStringRef v27 = *(&off_10023F260 + v26);
          }
          [(id)qword_10027DD68 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v27 message];
        }
        if (a3)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"%s: Roam: ending Evaluation" arguments:("WiFiLQAMgrLinkStateNotify", nil)];
          }
          if (*(double *)(a1 + 136) != 0.0)
          {
            double v29 = +[WiFiUsageMonitor sharedInstance];
            if (*(double *)(a1 + 136) == 0.0) {
              double v30 = 0.0;
            }
            else {
              double v30 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 136);
            }
            [(WiFiUsageMonitor *)v29 setTdLogic_end:14 evalTime:*(int *)(a1 + 2796) rssi:*(void *)(a1 + 40) roamTime:v30 forInterface:*(double *)(a1 + 192)];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: LinkUp: ending Evaluation", "WiFiLQAMgrLinkStateNotify")];
          }
        }
        *(unsigned char *)(a1 + 392) = 0;
        dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 336), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 544), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        *(unsigned char *)(a1 + 356) = 0;
        sub_10003AA24(a1, *(CFTypeRef *)(a1 + 376));
        BOOL v32 = *(const void **)(a1 + 376);
        if (v32)
        {
          CFRelease(v32);
          *(void *)(a1 + 376) = 0;
        }
        *(void *)(a1 + 360) = 0;
        *(unsigned char *)(a1 + 1296) = 0;
        if (!a3) {
          *(CFAbsoluteTime *)(a1 + 64) = CFAbsoluteTimeGetCurrent();
        }
        *(_WORD *)(a1 + 176) = 1;
        double v33 = *(double *)(a1 + 184);
        if (v33 != 0.0) {
          *(double *)(a1 + 192) = v9 - v33;
        }
        *(void *)(a1 + 184) = 0;
        if (&_symptom_create)
        {
          if ((*(_DWORD *)(a1 + 16) - 1) <= 1)
          {
            symptom_create();
            symptom_set_qualifier();
            sub_10003A8CC(*(void *)(a1 + 48));
            symptom_set_qualifier();
            symptom_send();
          }
        }
LABEL_72:
        *(void *)(a1 + 2816) = 0;
        *(unsigned char *)(a1 + 2824) = 0;
        return;
      }
      if (qword_10027DD68)
      {
        uint64_t v16 = *(int *)(a1 + 20);
        if (v16 > 4) {
          CFStringRef v17 = @"Bogus";
        }
        else {
          CFStringRef v17 = *(&off_10023F260 + v16);
        }
        [(id)qword_10027DD68 WFLog:4, "%s: Unexpected Event %d currState %@", "WiFiLQAMgrLinkStateNotify", a3, v17 message];
      }
      goto LABEL_42;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: curNetwork is NULL in Event %d", "WiFiLQAMgrLinkStateNotify", a3];
    }
  }
}

void sub_10003B210(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 2904);
  if (v2) {
    dispatch_source_set_timer(v2, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  *(unsigned char *)(a1 + 2912) = 0;
}

uint64_t sub_10003B24C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 2944);
}

__n128 sub_10003B254(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a1 + 2988);
  long long v3 = *(_OWORD *)(a1 + 3004);
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(a1 + 3016);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void sub_10003B26C(uint64_t a1, CFDictionaryRef theDict)
{
  CFBooleanRef value = 0;
  __int16 valuePtr = 0;
  int v9 = 0;
  uint64_t v8 = 0;
  if (a1 && theDict)
  {
    if (CFDictionaryGetValueIfPresent(theDict, @"MLO_NUM_LINKS", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, (char *)&valuePtr + 1);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"MLO_TRAF_SWITCH_ENABLED", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &valuePtr);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"MLO_LINK_ADD_CNT", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v9);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"MLO_LINK_DELETE_CNT", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, (char *)&v8 + 4);
    }
    int ValueIfPresent = CFDictionaryGetValueIfPresent(theDict, @"MLO_PREF_BAND_CHANGE_CNT", (const void **)&value);
    int v5 = 0;
    if (ValueIfPresent)
    {
      if (value)
      {
        CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v8);
        int v5 = v8;
      }
    }
    uint64_t v6 = HIBYTE(valuePtr);
    *(unsigned char *)(a1 + 3032) = HIBYTE(valuePtr);
    int v7 = valuePtr;
    *(unsigned char *)(a1 + 3033) = valuePtr;
    *(_DWORD *)(a1 + 3040) = v9;
    *(_DWORD *)(a1 + 3036) = HIDWORD(v8);
    *(_DWORD *)(a1 + 3044) = v5;
    *(void *)(a1 + 3168) = v6;
    memset_pattern16((void *)(a1 + 3176), &unk_1001CB320, 0xCuLL);
    *(_DWORD *)(a1 + 3188) = 3;
    *(unsigned char *)(a1 + 3192) = v7 != 0;
  }
}

uint64_t sub_10003B3E4(uint64_t result, CFDictionaryRef theDict, unsigned int a3)
{
  CFArrayRef theArray = 0;
  CFBooleanRef value = 0;
  CFStringRef theString = 0;
  char valuePtr = 0;
  __int16 v21 = 0;
  int v20 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  int v16 = 0;
  __int16 v15 = 0;
  memset(buffer, 170, 19);
  if (result && theDict)
  {
    uint64_t v5 = result;
    if (CFDictionaryGetValueIfPresent(theDict, @"MLO_IS_PREF_LINK", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &valuePtr);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"MLO_LINK_PRI_CHANNEL", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt16Type, (char *)&v16 + 2);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"MLO_LINK_FREQ_BAND", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt16Type, &v16);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"MLO_LINK_BW", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt16Type, &v15);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"MLO_LINK_TX_CNT", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, (char *)&v19 + 4);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"MLO_LINK_RX_CNT", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, (char *)&v18 + 4);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"MLO_LINK_TX_RATE", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, (char *)&v17 + 4);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"MLO_LINK_RX_RATE", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v17);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"MLO_LINK_TX_FAIL", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v19);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"MLO_LINK_TX_EX_RETRY", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v18);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"MLO_LINK_IDLE_TIME", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v20);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"PER_CORE_RSSI", (const void **)&theArray)
      && theArray
      && CFArrayGetCount(theArray) >= 1)
    {
      CFIndex v6 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, v6);
        CFBooleanRef value = ValueAtIndex;
        if (ValueAtIndex) {
          CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt8Type, (char *)&v21 + v6);
        }
        ++v6;
      }
      while (CFArrayGetCount(theArray) > v6);
    }
    __n128 result = CFDictionaryGetValueIfPresent(theDict, @"BSSID", (const void **)&theString);
    if (result)
    {
      __n128 result = (uint64_t)theString;
      if (theString)
      {
        CFStringGetCString(theString, buffer, 19, 0);
        __n128 result = (uint64_t)ether_aton(buffer);
        if (result)
        {
          int v8 = *(_DWORD *)result;
          uint64_t v9 = v5 + 40 * a3 + 3048;
          *(_WORD *)(v9 + 7) = *(_WORD *)(result + 4);
          *(_DWORD *)(v9 + 3) = v8;
        }
      }
    }
    uint64_t v10 = v5 + 40 * a3;
    *(unsigned char *)(v10 + 3048) = valuePtr;
    char v11 = v16;
    *(_WORD *)(v10 + 3049) = *(_WORD *)(v10 + 3049) & 0x700 | BYTE2(v16) | ((_WORD)v16 << 14) | ((v15 & 7) << 11);
    *(_DWORD *)(v10 + 3060) = v20;
    *(_DWORD *)(v10 + 3084) = v17;
    *(_DWORD *)(v10 + 3080) = HIDWORD(v17);
    *(_DWORD *)(v10 + 3072) = HIDWORD(v18);
    *(_DWORD *)(v10 + 3064) = HIDWORD(v19);
    *(_DWORD *)(v10 + 3068) = v19;
    *(_DWORD *)(v10 + 3076) = v18;
    *(_WORD *)(v10 + 3057) = v21;
    if ((v11 & 3) << 14)
    {
      int v13 = v11 & 3;
      if (v13 == 1)
      {
        uint64_t v14 = v5 + 4 * a3;
        int v12 = 2;
      }
      else
      {
        if (v13 != 3) {
          return result;
        }
        uint64_t v14 = v5 + 4 * a3;
        int v12 = 1;
      }
      *(_DWORD *)(v14 + 3176) = v12;
    }
    else
    {
      int v12 = 0;
      *(_DWORD *)(v5 + 4 * a3 + 3176) = 0;
    }
    if (*(unsigned char *)(v10 + 3048)) {
      *(_DWORD *)(v5 + 3188) = v12;
    }
  }
  return result;
}

void sub_10003B7F8(uint64_t a1, CFDictionaryRef theDict)
{
  int v20 = 0;
  CFBooleanRef value = 0;
  unsigned int valuePtr = 0;
  __int16 v18 = 0;
  __int16 v17 = 0;
  unsigned int v16 = 0;
  unsigned int v15 = 0;
  uint64_t v14 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  __int16 v13 = 0;
  if (a1 && theDict)
  {
    if (CFDictionaryGetValueIfPresent(theDict, @"LAST_OBSS_STATS_TIME", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"SHOULD_APPLY_OBSS_MIT", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, (char *)&v18 + 1);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"IS_OBSS_MIT_APPLIED", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &v18);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"CURRENT_OP_BW", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, (char *)&v17 + 1);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"RECOMM_OBSS_MIT_BW", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &v17);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"OBSS_RX_PLCP_ERR", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v16);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"OBSS_RX_BAD_FCS_ERR", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v15);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"OBSS_RX_FRAMES", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, (char *)&v14 + 4);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"OBSS_RX_PER_PCT", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v14);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"OBSS_PWREST_CORE0", (const void **)&v20)
      && v20
      && CFArrayGetCount((CFArrayRef)v20) >= 1)
    {
      CFIndex v4 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex((CFArrayRef)v20, v4);
        CFBooleanRef value = ValueAtIndex;
        if (ValueAtIndex) {
          CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt8Type, (char *)&v23 + v4);
        }
        ++v4;
      }
      while (v4 < CFArrayGetCount((CFArrayRef)v20));
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"OBSS_PWREST_CORE1", (const void **)&v20)
      && v20
      && CFArrayGetCount((CFArrayRef)v20) >= 1)
    {
      CFIndex v6 = 0;
      do
      {
        int v7 = (void *)CFArrayGetValueAtIndex((CFArrayRef)v20, v6);
        CFBooleanRef value = v7;
        if (v7) {
          CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt8Type, (char *)&v22 + v6);
        }
        ++v6;
      }
      while (v6 < CFArrayGetCount((CFArrayRef)v20));
    }
    if (!CFDictionaryGetValueIfPresent(theDict, @"OBSS_MIT_SOI", (const void **)&v20)
      || !v20
      || CFArrayGetCount((CFArrayRef)v20) < 1)
    {
      goto LABEL_52;
    }
    CFIndex v8 = 0;
    do
    {
      uint64_t v9 = (void *)CFArrayGetValueAtIndex((CFArrayRef)v20, v8);
      CFBooleanRef value = v9;
      if (v9) {
        CFNumberGetValue((CFNumberRef)v9, kCFNumberSInt8Type, (char *)&v13 + v8);
      }
      ++v8;
    }
    while (v8 < CFArrayGetCount((CFArrayRef)v20));
    if (!(_BYTE)v13)
    {
LABEL_52:
      LOBYTE(v13) = *(_DWORD *)(a1 + 2800);
      HIBYTE(v13) = *(_DWORD *)(a1 + 2804);
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s OBSS MIT -> time = %u sec, shouldApply = %u, IsApplied = %u, currBw = %u, mitBw = %u, plcp %u, fcs %u, rxframes %u rxPer %u%%\n", "WiFiLQAMgrObssMitInfoNotify", valuePtr, HIBYTE(v18), v18, HIBYTE(v17), v17, v16, v15, HIDWORD(v14), v14);
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s OBSS MIT -> soi (%d, %d), pwr0 (%d, %d, %d, %d, %d, %d, %d, %d)\n", "WiFiLQAMgrObssMitInfoNotify", (char)v13, SHIBYTE(v13), (char)v23, SBYTE1(v23), SBYTE2(v23), SBYTE3(v23), SBYTE4(v23), SBYTE5(v23), SBYTE6(v23), SHIBYTE(v23));
    }
    *(unsigned char *)(a1 + 2990) = HIBYTE(v17);
    *(unsigned char *)(a1 + 2989) = v18;
    *(_DWORD *)(a1 + 3008) = valuePtr;
    *(unsigned char *)(a1 + 2991) = v17;
    *(_DWORD *)(a1 + 2996) = v15;
    *(_DWORD *)(a1 + 3000) = HIDWORD(v14);
    *(_DWORD *)(a1 + 3004) = v14;
    *(_DWORD *)(a1 + 2992) = v16;
    *(unsigned char *)(a1 + 2988) = HIBYTE(v18);
    *(_WORD *)(a1 + 3028) = v13;
    uint64_t v12 = v22;
    *(void *)(a1 + 3012) = v23;
    *(void *)(a1 + 3020) = v12;
  }
}

uint64_t sub_10003BC98(void *a1, CFTypeRef cf)
{
  if (a1)
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x2020000000;
    unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
    if (cf) {
      CFTypeRef v3 = CFRetain(cf);
    }
    else {
      CFTypeRef v3 = 0;
    }
    unint64_t v9 = (unint64_t)v3;
    CFRetain(a1);
    CFIndex v6 = a1[37];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100041C34;
    block[3] = &unk_10023F220;
    void block[4] = v8;
    void block[5] = a1;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
    return 0;
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:4 message:@"__WiFiLQAMgrScheduleProbe: LQAMgr is NULL"];
    }
    return 4294963365;
  }
}

void sub_10003BDAC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_10003BDC4(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(*(void *)(a1 + 32) + 320);
  v8.CFIndex length = CFArrayGetCount(v2);
  v8.id location = 0;
  int v3 = CFArrayContainsValue(v2, v8, *(const void **)(a1 + 40));
  CFIndex v4 = *(__CFDictionary **)(a1 + 40);
  if (v3 || *(__CFDictionary **)(*(void *)(a1 + 32) + 312) == v4)
  {
    CFDictionarySetValue(v4, @"kWiFiLqaMgrIgnoreProbe", kCFBooleanTrue);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: Invalid Handle", "WiFiLQAMgrIgnoreDiagnosticProbe_block_invoke"];
    }
  }
  CFIndex v6 = *(const void **)(a1 + 40);

  CFRelease(v6);
}

uint64_t sub_10003BE98(uint64_t a1)
{
  if (a1) {
    return (*(_DWORD *)(a1 + 652) + *(_DWORD *)(a1 + 664));
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, @"%s: LQAMgr is NULL", @"WiFiLQAMgrTrgDiscPnoRssiThres"];
  }
  return 0;
}

uint64_t sub_10003BF10(_DWORD *a1, const void *a2, int a3, double a4)
{
  [+[NSDate date] timeIntervalSince1970];
  if (!a1)
  {
    uint64_t v22 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_16;
    }
    uint64_t v23 = "%s: LQAMgr is NULL";
    goto LABEL_34;
  }
  if (!a2)
  {
    uint64_t v22 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_16;
    }
    uint64_t v23 = "%s: network is NULL";
    goto LABEL_34;
  }
  double v9 = v8;
  CFNumberRef v10 = sub_1000C6FC0((uint64_t)a2, @"RSSI");
  CFNumberRef v11 = v10;
  if (!v10)
  {
    uint64_t v22 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_16;
    }
    uint64_t v23 = "%s: rssi is 0";
LABEL_34:
    uint64_t v24 = 4;
    goto LABEL_15;
  }
  double v12 = v9 - a4;
  int v13 = a1[166];
  int v14 = v13 + a1[163];
  int v15 = v13 + a3;
  if ((v13 + a3 <= (int)v10 || v14 <= (int)v10) && (v12 >= 60.0 || a1[694] == 1 || a1[162] + 5 <= (int)v10))
  {
    CFNumberRef v25 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v26 = sub_10001A43C(a2);
      if (v15 >= v14) {
        uint64_t v27 = v14;
      }
      else {
        uint64_t v27 = v15;
      }
      [v25 WFLog:4, "%s: Allowed TriggerDisconnected network %@ for auto-join, RSSI: %d, Thres: %d timeFromLastTD:%2.2f seconds", "WiFiLQAMgrAllowNetworkForAutoJoin", v26, v11, v27, *(void *)&v12 message];
    }
    uint64_t v20 = 1;
    goto LABEL_26;
  }
  __int16 v17 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    __int16 v18 = sub_10001A43C(a2);
    if (v15 >= v14) {
      uint64_t v19 = v14;
    }
    else {
      uint64_t v19 = v15;
    }
    [v17 WFLog:4, "%s: Skipping TriggerDisconnected network %@ for auto-join, RSSI: %d, Thres: %d timeFromLastTD:%2.2f seconds", "WiFiLQAMgrAllowNetworkForAutoJoin", v18, v11, v19, *(void *)&v12 message];
  }
  uint64_t v20 = 0;
  if ((int)v11 >= -89 && &_symptom_create)
  {
    symptom_create();
    symptom_send();
    uint64_t v22 = (void *)qword_10027DD68;
    if (!qword_10027DD68)
    {
LABEL_16:
      uint64_t v20 = 0;
LABEL_26:
      return v20;
    }
    uint64_t v23 = "%s: Notified Symptoms about found Trigger Disconnected network";
    uint64_t v24 = 2;
LABEL_15:
    [v22 WFLog:v24 message:v23];
    goto LABEL_16;
  }
  return v20;
}

uint64_t sub_10003C194(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = *(unsigned __int8 *)(a1 + 2900);
  }
  else {
    uint64_t v1 = 0;
  }
  if (qword_10027DD68)
  {
    int v3 = "TRUE";
    if (!v1) {
      int v3 = "FALSE";
    }
    [((id)qword_10027DD68) WFLog:@"%s: criticalAppState:%s" message:3, "WiFiLQAMgrIsCriticalAppState", v3];
  }
  return v1;
}

BOOL sub_10003C220(BOOL result)
{
  if (result)
  {
    uint64_t v1 = (unsigned int *)result;
    uint64_t state64 = 0;
    uint64_t state = notify_get_state(*(_DWORD *)(result + 440), &state64);
    if (state)
    {
      uint64_t v3 = state;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Unable to get Symptoms Event ID Error %d", "__WiFiLQAMgrForceSymptomsScoreFetch", v3);
      }
    }
    else
    {
      v1[707] = 7;
      sub_10003EF28(v1);
    }
    uint64_t v5 = v1[126];
    uint64_t v6 = v1[131];
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: DNS Symptoms netscore:%d datastallscore:%d", "WiFiLQAMgrIsSymptomsScorePoor", v5, v6)];
    }
    return (v5 < 0x1A || v6 <= 0x19) && v1[129] == v1[130];
  }
  return result;
}

void sub_10003C338(uint64_t a1)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: DNS Symptoms reseting scores", "WiFiLQAMgrResetDNSFailureSymptomsScores")];
    }
    *(_DWORD *)(a1 + 504) = 50;
    *(_DWORD *)(a1 + 524) = 0xFFFF;
    sub_10003C3D4(a1);
    sub_10003C65C(a1, 0);
  }
}

void sub_10003C3D4(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return;
  }
  uint64_t v3 = Mutable;
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 512));
  if (!v4)
  {
    CFNumberRef v10 = v3;
LABEL_23:
    CFRelease(v10);
    return;
  }
  CFNumberRef v5 = v4;
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 516));
  if (!v6)
  {
    CFNumberRef v7 = 0;
    goto LABEL_29;
  }
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 520));
  if (!v7)
  {
LABEL_29:
    CFNumberRef v8 = 0;
    goto LABEL_30;
  }
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 492));
  if (!v8)
  {
LABEL_30:
    CFNumberRef v9 = 0;
    goto LABEL_31;
  }
  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 524));
  if (!v9)
  {
LABEL_31:
    CFNumberRef v10 = 0;
    goto LABEL_32;
  }
  CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 500));
  if (!v10)
  {
LABEL_32:
    CFNumberRef v11 = 0;
    goto LABEL_12;
  }
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 504));
  if (v11)
  {
    CFDictionarySetValue(v3, @"IO80211DPSSymptomsInputARPFail", v5);
    CFDictionarySetValue(v3, @"IO80211DPSSymptomsInputDNSServersTotal", v6);
    CFDictionarySetValue(v3, @"IO80211DPSSymptomsInputDNSServersImpacted", v7);
    CFDictionarySetValue(v3, @"IO80211DPSSymptomsInputUserImpactFlags", v8);
    CFDictionarySetValue(v3, @"IO80211DPSSymptomsInputDataStallScore", v9);
    CFDictionarySetValue(v3, @"IO80211DPSSymptomsInputAppPolicyScore", v10);
    CFDictionarySetValue(v3, @"IO80211DPSSymptomsInputNetScore", v11);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"DNS Symptoms: updating APPLE80211_IOC_DPS_SYMPTOMS_INPUT"];
    }
    sub_100017D28(*(void *)(a1 + 32), *(const void **)(a1 + 40), 487, 0, (uint64_t)v3);
  }
LABEL_12:
  CFRelease(v3);
  CFRelease(v5);
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    goto LABEL_23;
  }
}

void sub_10003C65C(uint64_t a1, int a2)
{
  if (a1)
  {
    if (qword_10027DD68)
    {
      CFNumberRef v5 = "true";
      if (!a2) {
        CFNumberRef v5 = "false";
      }
      [((id)qword_10027DD68) WFLog:message:3, "%s: setting dnsFailureHandled to %s", "WiFiLQAMgrSetDNSFailureTriggerStatus", v5];
    }
    *(unsigned char *)(a1 + 539) = a2;
  }
}

uint64_t sub_10003C6F0(uint64_t a1)
{
  if (a1) {
    return *(int *)(a1 + 652);
  }
  else {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
}

uint64_t sub_10003C710(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: LQAMgr is NULL" : @"__WiFiLQAMgrDoesForegroundAppUseWiFi"];
    }
    uint64_t v3 = 0;
LABEL_17:
    return v3;
  }
  if (!*(unsigned char *)(a1 + 2832))
  {
    BOOL v1 = (~*(_DWORD *)(a1 + 492) & 5) != 0 && (*(_DWORD *)(a1 + 492) & 0x20) == 0;
    if (v1 && (*(_DWORD *)(a1 + 492) & 0xB) != 9)
    {
      if (![+[WiFiUserInteractionMonitor sharedInstance] isNetworkingAppInForeground])return 0; {
      if (qword_10027DD68)
      }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: user interaction monitor indicates FG networking app active", "__WiFiLQAMgrDoesForegroundAppUseWiFi")];
      uint64_t v3 = 1;
      goto LABEL_17;
    }
  }
  return 1;
}

BOOL sub_10003C80C(uint64_t a1)
{
  if (a1) {
    return sub_10003C710(a1) != 0;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: LQAMgr is NULL" arguments:("WiFiLQAMgrForegroundAppUsesWiFi", nil)];
  }
  return 0;
}

void sub_10003C884(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: WiFiLQAMgrRef is NULL" args:("WiFiLQAMgrCaptureInstantaneousLQForMetricsReporting")];
    }
    goto LABEL_24;
  }
  CFArrayRef v2 = *(const __CFArray **)(a1 + 24);
  if (!v2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: LQAManager: LQM table is NULL", @"WiFiLQAMgrCaptureInstantaneousLQForMetricsReporting"];
    }
    goto LABEL_24;
  }
  if (!CFArrayGetCount(v2))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: LQAManager: LQM table is empty", @"WiFiLQAMgrCaptureInstantaneousLQForMetricsReporting"];
    }
LABEL_24:
    return;
  }
  uint64_t v3 = *(const void **)(a1 + 144);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 144) = 0;
  }
  *(_OWORD *)bytes = 0u;
  memset(v11, 0, sizeof(v11));
  int v4 = sub_10003CAAC(a1, bytes);
  if (!v4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Failed to extract metrics from Lqm, exiting!", @"WiFiLQAMgrCaptureInstantaneousLQForMetricsReporting"];
    }
    CFNumberRef v8 = v5;
    goto LABEL_16;
  }
  if (qword_10027DD68) {
    objc_msgSend((id)qword_10027DD68, "WFLog:message:", 2, "%s: TxFail:%d TxFrames:%d TxReTrans:%d rxFrames:%d FwTxFail:%d FwTxFrames:%d FwTxReTrans:%d beaconSched:%d beaconRecv:%d rssi:%d ccaTotal:%d ccaSelf:%d ccaOther:%d ccaInterference:%d", "WiFiLQAMgrCaptureInstantaneousLQForMetricsReporting", *(unsigned int *)bytes, *(unsigned int *)&bytes[4], *(unsigned int *)&bytes[8], *(unsigned int *)&bytes[12], v11[0], v11[1], v11[2], v11[3], v11[4], v11[5], SLOBYTE(v11[6]), SBYTE1(v11[6]), SBYTE2(v11[6]),
  }
      SHIBYTE(v11[6]));
  CFDataRef v6 = CFDataCreate(kCFAllocatorDefault, bytes, 44);
  *(void *)(a1 + 144) = v6;
  if (!v6)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Failed to create CFData" : @"WiFiLQAMgrCaptureInstantaneousLQForMetricsReporting"];
    }
    CFNumberRef v8 = v7;
LABEL_16:
  }
}

uint64_t sub_10003CAAC(uint64_t a1, _DWORD *a2)
{
  uint64_t v39 = 0;
  valuePtr[0] = 0;
  uint64_t v38 = 0;
  CFNumberRef v36 = 0;
  CFNumberRef v37 = 0;
  CFNumberRef v34 = 0;
  CFNumberRef number = 0;
  CFNumberRef v32 = 0;
  CFNumberRef v33 = 0;
  CFNumberRef v30 = 0;
  CFNumberRef v31 = 0;
  CFNumberRef v28 = 0;
  CFNumberRef v29 = 0;
  CFNumberRef v26 = 0;
  CFNumberRef v27 = 0;
  CFNumberRef v24 = 0;
  CFNumberRef v25 = 0;
  CFBooleanRef value = 0;
  CFDictionaryRef theDict = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: WiFiLQAMgrRef is NULL" args:("__WiFiLQAMgrExtractFromLqm", 0)];
    }
    goto LABEL_73;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: metrics is NULL" arguments:__WiFiLQAMgrExtractFromLqm];
    }
LABEL_73:
    return 0;
  }
  if (*(void *)(a1 + 24))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
    if (Count < 1)
    {
LABEL_71:
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, "%s: LQAManager No LQMDicts", "__WiFiLQAMgrExtractFromLqm"];
      }
    }
    else
    {
      CFIndex v6 = Count;
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
      uint64_t v7 = 0;
      CFIndex v8 = 0;
      double AbsoluteTime = 0.0;
      do
      {
        CFDictionaryRef v10 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v8);
        CFDictionaryRef v11 = v10;
        if (v10)
        {
          int ValueIfPresent = CFDictionaryGetValueIfPresent(v10, @"LQMTIMESTAMP", (const void **)&value);
          int v13 = value;
          if (ValueIfPresent) {
            BOOL v14 = value == 0;
          }
          else {
            BOOL v14 = 1;
          }
          if (!v14)
          {
            double AbsoluteTime = CFDateGetAbsoluteTime((CFDateRef)value);
            int v13 = value;
          }
          if (v13)
          {
            if (Current - AbsoluteTime <= *(double *)(a1 + 672))
            {
              if (CFDictionaryGetValueIfPresent(v11, @"TXFAIL", (const void **)&number) && number) {
                CFNumberGetValue(number, kCFNumberIntType, (char *)valuePtr + 4);
              }
              if (CFDictionaryGetValueIfPresent(v11, @"TXFRAMES", (const void **)&v33) && v33) {
                CFNumberGetValue(v33, kCFNumberIntType, valuePtr);
              }
              if (CFDictionaryGetValueIfPresent(v11, @"TXRETRANS", (const void **)&v34) && v34) {
                CFNumberGetValue(v34, kCFNumberIntType, (char *)&v39 + 4);
              }
              if (CFDictionaryGetValueIfPresent(v11, @"TXFWFAIL", (const void **)&v32) && v32)
              {
                CFNumberGetValue(v32, kCFNumberIntType, &v39);
                a2[4] += v39;
              }
              if (CFDictionaryGetValueIfPresent(v11, @"TXFWFRAMES", (const void **)&v30) && v30)
              {
                CFNumberGetValue(v30, kCFNumberIntType, (char *)&v38 + 4);
                a2[5] += HIDWORD(v38);
              }
              if (CFDictionaryGetValueIfPresent(v11, @"TXFWRETRANS", (const void **)&v31) && v31)
              {
                CFNumberGetValue(v31, kCFNumberIntType, &v38);
                a2[6] += v38;
              }
              if (!number || !v34 || !v33)
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4, @"%s: txFailRef / txReTransRef / txFramesRef NULL", @"__WiFiLQAMgrExtractFromLqm"];
                }
                goto LABEL_73;
              }
              ++v7;
              int v15 = a2[1] + LODWORD(valuePtr[0]);
              *a2 += HIDWORD(valuePtr[0]);
              a2[1] = v15;
              a2[2] += HIDWORD(v39);
            }
          }
          else
          {
            if (qword_10027DD68) {
              [qword_10027DD68 WFLog:4 message:@"__WiFiLQAMgrExtractFromLqm: No Timestamp in LQM Record"];
            }
          }
        }
        ++v8;
      }
      while (v6 != v8);
      if (!v7 || !ValueAtIndex) {
        goto LABEL_71;
      }
      if (CFArrayGetCount(*(CFArrayRef *)(a1 + 24))) {
        CFDictionaryRef v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
      }
      if (v11)
      {
        if (CFDictionaryGetValueIfPresent(v11, @"RXBEACONFRMS", (const void **)&v28) && v28) {
          CFNumberGetValue(v28, kCFNumberIntType, a2 + 8);
        }
        if (CFDictionaryGetValueIfPresent(v11, @"RXBEACONSCHED", (const void **)&v29) && v29) {
          CFNumberGetValue(v29, kCFNumberIntType, a2 + 7);
        }
        if (CFDictionaryGetValueIfPresent(v11, @"RXFRAMES", (const void **)&v36) && v36) {
          CFNumberGetValue(v36, kCFNumberIntType, a2 + 3);
        }
        if (CFDictionaryGetValueIfPresent(v11, @"RSSI", (const void **)&v37) && v37) {
          CFNumberGetValue(v37, kCFNumberIntType, a2 + 9);
        }
        if (CFDictionaryGetValueIfPresent(v11, @"CCA", (const void **)&v24) && v24) {
          CFNumberGetValue(v24, kCFNumberSInt8Type, a2 + 10);
        }
        int v17 = CFDictionaryGetValueIfPresent(v11, @"CCA_STATS", (const void **)&theDict);
        uint64_t v18 = 1;
        if (v17 && theDict)
        {
          if (CFDictionaryGetValueIfPresent(theDict, @"CCA_SELF_TOTAL", (const void **)&v27) && v27) {
            CFNumberGetValue(v27, kCFNumberSInt8Type, (char *)a2 + 41);
          }
          if (CFDictionaryGetValueIfPresent(theDict, @"CCA_OTHER_TOTAL", (const void **)&v25) && v25) {
            CFNumberGetValue(v25, kCFNumberSInt8Type, (char *)a2 + 42);
          }
          uint64_t v18 = 1;
          if (CFDictionaryGetValueIfPresent(theDict, @"CCA_INTERFERENCE_TOTAL", (const void **)&v26) && v26)
          {
            uint64_t v18 = 1;
            CFNumberGetValue(v26, kCFNumberSInt8Type, (char *)a2 + 43);
          }
        }
        return v18;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: lqmDict is NULL!", @"__WiFiLQAMgrExtractFromLqm"];
      }
    }
    goto LABEL_73;
  }
  return 0;
}

void sub_10003D040(uint64_t a1)
{
  CFArrayRef v2 = *(const void **)(a1 + 144);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 144) = 0;
  }
}

void sub_10003D070(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, unint64_t *a6, unint64_t *a7, unint64_t *a8)
{
  if (a1)
  {
    CFDataRef v8 = *(const __CFData **)(a1 + 144);
    if (v8)
    {
      BytePtr = CFDataGetBytePtr(v8);
      if (qword_10027DD68) {
        objc_msgSend((id)qword_10027DD68, "WFLog:message:", 2, "%s: TxFail:%d TxFrames:%d TxReTrans:%d rxFrames:%d FwTxFail:%d FwTxFrames:%d FwTxReTrans:%d beaconSched:%d beaconRecv:%d rssi:%d ccaTotal:%d ccaSelf:%d ccaOther:%d ccaInterference:%d", "WiFiLQAMgrGetInstantaneousLQForMetricsReporting", *(unsigned int *)BytePtr, *((unsigned int *)BytePtr + 1), *((unsigned int *)BytePtr + 2), *((unsigned int *)BytePtr + 3), *((unsigned int *)BytePtr + 4), *((unsigned int *)BytePtr + 5), *((unsigned int *)BytePtr + 6), *((unsigned int *)BytePtr + 7), *((unsigned int *)BytePtr + 8), *((unsigned int *)BytePtr + 9), *((char *)BytePtr + 40), *((char *)BytePtr + 41), *((char *)BytePtr + 42),
      }
          *((char *)BytePtr + 43));
      if (a2) {
        *a2 = *((char *)BytePtr + 40);
      }
      if (a3) {
        *a3 = *((char *)BytePtr + 41);
      }
      if (a4) {
        *a4 = *((char *)BytePtr + 42);
      }
      if (a5) {
        *a5 = *((char *)BytePtr + 43);
      }
      if (a6)
      {
        int v18 = *((_DWORD *)BytePtr + 1);
        if (v18) {
          unint64_t v19 = (unint64_t)((double)*(int *)BytePtr / (double)v18 * 100.0);
        }
        else {
          unint64_t v19 = 0;
        }
        *a6 = v19;
      }
      if (a7)
      {
        int v20 = *((_DWORD *)BytePtr + 7);
        if (!v20
          || (v21 = *((_DWORD *)BytePtr + 8), BOOL v22 = __OFSUB__(v20, v21), v23 = v20 - v21, (v23 < 0) ^ v22 | (v23 == 0)))
        {
          unint64_t v24 = 0;
        }
        else
        {
          unint64_t v24 = (unint64_t)((double)v23 / (double)v20 * 100.0);
        }
        *a7 = v24;
      }
      if (a8)
      {
        int v25 = *((_DWORD *)BytePtr + 5);
        if (v25) {
          unint64_t v26 = (unint64_t)((double)*((int *)BytePtr + 4) / (double)v25 * 100.0);
        }
        else {
          unint64_t v26 = 0;
        }
        *a8 = v26;
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: CFData not allocated" :@"WiFiLQAMgrGetInstantaneousLQForMetricsReporting"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: WiFiLQAMgrRef is NULL", @"WiFiLQAMgrGetInstantaneousLQForMetricsReporting"];
    }
  }
}

void sub_10003D2D8(uint64_t a1, char a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 2834) = a2;
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: WiFiLQAMgrRef is NULL", "WiFiLQAMgrAwdlRealTimeModeStatus")];
    }
  }
}

uint64_t sub_10003D35C(uint64_t a1, CFDictionaryRef theDict)
{
  CFBooleanRef value = 0;
  CFDictionaryRef v57 = 0;
  uint64_t result = 4294963396;
  int valuePtr = 0;
  if (!a1 || !theDict) {
    return result;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscEnable", (const void **)&value) && value) {
    *(unsigned char *)(a1 + 640) = CFEqual(value, kCFBooleanTrue) != 0;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscMonitorOnlyMode", (const void **)&value) && value) {
    *(unsigned char *)(a1 + 641) = CFEqual(value, kCFBooleanTrue) != 0;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscPoorRssiThres", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(_DWORD *)(a1 + 652) = valuePtr;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscRssiHysterisis", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(_DWORD *)(a1 + 648) = valuePtr + *(_DWORD *)(a1 + 652);
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscAjoinRssiHysterisis", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(_DWORD *)(a1 + 664) = valuePtr;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscNumActiveProbes", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(_DWORD *)(a1 + 892) = valuePtr;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscActiveProbePer", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    float v5 = (double)valuePtr * 0.01;
    *(float *)(a1 + 896) = v5;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscCcaSigEnable", (const void **)&value) && value) {
    *(unsigned char *)(a1 + 928) = CFEqual(value, kCFBooleanTrue) != 0;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscCcaThres", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(unsigned char *)(a1 + 929) = valuePtr;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscRapidLqmEnable", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(unsigned char *)(a1 + 108) = valuePtr;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscGwArpSigEnable", (const void **)&value) && value) {
    *(unsigned char *)(a1 + 904) = CFEqual(value, kCFBooleanTrue) != 0;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscActProbeSigEnable", (const void **)&value) && value) {
    *(unsigned char *)(a1 + 888) = CFEqual(value, kCFBooleanTrue) != 0;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscSympSigEnable", (const void **)&value) && value) {
    *(unsigned char *)(a1 + 920) = CFEqual(value, kCFBooleanTrue) != 0;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscSympFailCreditThres", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(_DWORD *)(a1 + 924) = valuePtr;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscMode", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(_DWORD *)(a1 + 16) = valuePtr;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscLoggingEnable", (const void **)&value) && value) {
    byte_10027D5F0 = CFEqual(value, kCFBooleanTrue) != 0;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscTxPerSigEnable", (const void **)&value) && value)
  {
    Boolean v6 = CFEqual(value, kCFBooleanTrue);
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v52 = 0;
    LODWORD(v50) = 0;
    LODWORD(number) = 0;
    int v51 = 0;
    if (!CFDictionaryGetValueIfPresent(theDict, @"trgDiscTblIndex", (const void **)&v54)
      || !CFDictionaryGetValueIfPresent(theDict, @"trgDiscTxPerThres", (const void **)&v53)
      || !CFDictionaryGetValueIfPresent(theDict, @"trgDiscMinTxFrames", (const void **)&v52)
      || !v54
      || !v53
      || !v52)
    {
      goto LABEL_162;
    }
    CFNumberGetValue((CFNumberRef)v54, kCFNumberIntType, &v50);
    CFNumberGetValue((CFNumberRef)v53, kCFNumberIntType, &number);
    CFNumberGetValue((CFNumberRef)v52, kCFNumberIntType, &v51);
    if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscRetryFactor", (const void **)&v57) && v57) {
      CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    }
    if (v50 == 2)
    {
      *(unsigned char *)(a1 + 1096) = v6;
      *(_DWORD *)(a1 + 1100) = v51;
      float v8 = (double)(int)number * 0.01;
      *(float *)(a1 + 1104) = v8;
      if (v57) {
        *(_DWORD *)(a1 + 1108) = valuePtr;
      }
    }
    else if (v50 == 1)
    {
      *(unsigned char *)(a1 + 932) = v6;
      *(_DWORD *)(a1 + 936) = v51;
      float v9 = (double)(int)number * 0.01;
      *(float *)(a1 + 940) = v9;
      if (v57) {
        *(_DWORD *)(a1 + 944) = valuePtr;
      }
    }
    else
    {
      if (v50) {
        goto LABEL_92;
      }
      *(unsigned char *)(a1 + 724) = v6;
      *(_DWORD *)(a1 + 728) = v51;
      float v7 = (double)(int)number * 0.01;
      *(float *)(a1 + 732) = v7;
      if (v57) {
        *(_DWORD *)(a1 + 736) = valuePtr;
      }
    }
  }
  if (!CFDictionaryGetValueIfPresent(theDict, @"trgDiscFwTxPerSigEnable", (const void **)&value) || !value) {
    goto LABEL_102;
  }
  Boolean v10 = CFEqual(value, kCFBooleanTrue);
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v52 = 0;
  CFNumberRef number = 0;
  CFNumberRef v50 = 0;
  int v51 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  if (!CFDictionaryGetValueIfPresent(theDict, @"trgDiscTblIndex", (const void **)&v54)
    || !CFDictionaryGetValueIfPresent(theDict, @"trgDiscFwTxPerThres", (const void **)&v53)
    || !CFDictionaryGetValueIfPresent(theDict, @"trgDiscMinFwTxFrames", (const void **)&v52)
    || !v54
    || !v53
    || !v52)
  {
LABEL_162:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: TrgDiscTxPerThres - Missing Params\n", "WiFiLQAMgrSetTrgDiscParams", v46];
    }
LABEL_164:
    return 0;
  }
  CFNumberGetValue((CFNumberRef)v54, kCFNumberIntType, &v51);
  CFNumberGetValue((CFNumberRef)v53, kCFNumberIntType, (char *)&v48 + 4);
  CFNumberGetValue((CFNumberRef)v52, kCFNumberIntType, &v48);
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscTxPerThres", (const void **)&number) && number) {
    CFNumberGetValue(number, kCFNumberIntType, (char *)&v47 + 4);
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscMinTxFrames", (const void **)&v50) && v50) {
    CFNumberGetValue(v50, kCFNumberIntType, &v47);
  }
  switch(v51)
  {
    case 2:
      *(unsigned char *)(a1 + 1160) = v10;
      *(_DWORD *)(a1 + 1164) = v48;
      float v14 = (double)SHIDWORD(v48) * 0.01;
      *(float *)(a1 + 1168) = v14;
      if (number)
      {
        float v15 = (double)SHIDWORD(v47) * 0.01;
        *(float *)(a1 + 1176) = v15;
      }
      if (v50) {
        *(_DWORD *)(a1 + 1172) = v47;
      }
      break;
    case 1:
      *(unsigned char *)(a1 + 996) = v10;
      *(_DWORD *)(a1 + 1000) = v48;
      float v16 = (double)SHIDWORD(v48) * 0.01;
      *(float *)(a1 + 1004) = v16;
      if (number)
      {
        float v17 = (double)SHIDWORD(v47) * 0.01;
        *(float *)(a1 + 1012) = v17;
      }
      if (v50) {
        *(_DWORD *)(a1 + 1008) = v47;
      }
      break;
    case 0:
      *(unsigned char *)(a1 + 788) = v10;
      *(_DWORD *)(a1 + 792) = v48;
      float v11 = (double)SHIDWORD(v48) * 0.01;
      *(float *)(a1 + 796) = v11;
      if (number)
      {
        float v12 = (double)SHIDWORD(v47) * 0.01;
        *(float *)(a1 + 804) = v12;
      }
      if (v50) {
        *(_DWORD *)(a1 + 800) = v47;
      }
      break;
    default:
LABEL_92:
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: TrgDiscTxPerThres - Invalid TblIndex <0, %d>\n", "WiFiLQAMgrSetTrgDiscParams", 3);
      }
      goto LABEL_164;
  }
LABEL_102:
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscBcnPerSigEnable", (const void **)&value))
  {
    if (value)
    {
      Boolean v18 = CFEqual(value, kCFBooleanTrue);
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      LODWORD(v52) = 0;
      LODWORD(v50) = 0;
      if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscBcnPerThres", (const void **)&v54))
      {
        if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscMinBcnSched", (const void **)&v53))
        {
          if (v54 && v53)
          {
            CFNumberGetValue((CFNumberRef)v54, kCFNumberIntType, &v52);
            CFNumberGetValue((CFNumberRef)v53, kCFNumberIntType, &v50);
            *(unsigned char *)(a1 + 868) = v18;
            int v19 = (int)v52;
            *(_DWORD *)(a1 + 872) = v50;
            float v20 = (double)v19 * 0.01;
            *(float *)(a1 + 876) = v20;
            if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscTxPerThres", (const void **)&v57) && v57)
            {
              CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
              float v21 = (double)valuePtr * 0.01;
              *(float *)(a1 + 884) = v21;
            }
            if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscMinTxFrames", (const void **)&v57) && v57)
            {
              CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
              *(_DWORD *)(a1 + 880) = valuePtr;
            }
          }
          goto LABEL_114;
        }
      }
    }
    goto LABEL_162;
  }
LABEL_114:
  if (CFDictionaryGetValueIfPresent(theDict, @"simulateProbeFailureState", (const void **)&value) && value) {
    *(unsigned char *)(a1 + 643) = CFEqual(value, kCFBooleanTrue) != 0;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: TrgDiscConfig - RSSI Configs\n", "WiFiLQAMgrSetTrgDiscParams")];
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s:--------------------------------------------------\n" args:("WiFiLQAMgrSetTrgDiscParams", nil)];
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: RssiBrcks: {%2d %2d %2d} GoodRssi: %3d ajRssi: %3d lqaEnable: %1d monitorOnly: %1d wifiFallPref: %1d lqaMode: %1d askToTD: %1d rnf: %d atd: %d\n", "WiFiLQAMgrSetTrgDiscParams", *(unsigned int *)(a1 + 652), *(unsigned int *)(a1 + 656), *(unsigned int *)(a1 + 660), *(unsigned int *)(a1 + 648), *(unsigned int *)(a1 + 664), *(unsigned __int8 *)(a1 + 640), *(unsigned __int8 *)(a1 + 641), *(unsigned __int8 *)(a1 + 642), *(unsigned int *)(a1 + 16), *(unsigned __int8 *)(a1 + 644), *(unsigned __int8 *)(a1 + 646), *(unsigned __int8 *)(a1 + 645)];
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s:--------------------------------------------------\n", "WiFiLQAMgrSetTrgDiscParams")
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:4, "%s: TrgDiscConfig - Tx PER Sig\n", "WiFiLQAMgrSetTrgDiscParams"];
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s:--------------------------------------------------\n", "WiFiLQAMgrSetTrgDiscParams");
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  do
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s:Indx: %1d Enable: %1d TxPer: {%2.1f %2.1f %2.1f} MinTxFrms: {%2u %2u %2u} RetryFactor: {%2u %2u %2u}\n", "WiFiLQAMgrSetTrgDiscParams", v29, *(unsigned __int8 *)(a1 + v28 + 724), (float)(*(float *)(a1 + v28 + 732) * 100.0), (float)(*(float *)(a1 + v28 + 940) * 100.0), (float)(*(float *)(a1 + v28 + 1104) * 100.0), *(unsigned int *)(a1 + v28 + 728), *(unsigned int *)(a1 + v28 + 936), *(unsigned int *)(a1 + v28 + 1100), *(unsigned int *)(a1 + v28 + 736), *(unsigned int *)(a1 + v28 + 944), *(unsigned int *)(a1 + v28 + 1108));
    }
    uint64_t v29 = (v29 + 1);
    v28 += 16;
  }
  while (v28 != 64);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s:--------------------------------------------------\n", "WiFiLQAMgrSetTrgDiscParams");
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: TrgDiscConfig - FW Tx PER Sig\n", "WiFiLQAMgrSetTrgDiscParams");
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s:--------------------------------------------------\n" args:("WiFiLQAMgrSetTrgDiscParams")];
  }
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  do
  {
    if (qword_10027DD68) {
      objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s:Indx: %1d Enable: %1d FwTxPer: {%2.1f %2.1f %2.1f} FwMinTxFrms: {%2u %2u %2u} TxPer: {%02.1f %02.1f %02.1f} minHostFrames: {%2u %2u %2u}\n", "WiFiLQAMgrSetTrgDiscParams", v35, *(unsigned __int8 *)(a1 + v34 + 788), (float)(*(float *)(a1 + v34 + 796) * 100.0), (float)(*(float *)(a1 + v34 + 1004) * 100.0), (float)(*(float *)(a1 + v34 + 1168) * 100.0), *(unsigned int *)(a1 + v34 + 792), *(unsigned int *)(a1 + v34 + 1000), *(unsigned int *)(a1 + v34 + 1164), (float)(*(float *)(a1 + v34 + 804) * 100.0), (float)(*(float *)(a1 + v34 + 1012) * 100.0), (float)(*(float *)(a1 + v34 + 1176) * 100.0), *(unsigned int *)(a1 + v34 + 800), *(unsigned int *)(a1 + v34 + 1008),
    }
        *(unsigned int *)(a1 + v34 + 1172));
    uint64_t v35 = (v35 + 1);
    v34 += 20;
  }
  while (v34 != 80);
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, "%s:--------------------------------------------------\n", "WiFiLQAMgrSetTrgDiscParams"];
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:4, "%s: TrgDiscConfig - BCN PER Sig\n", "WiFiLQAMgrSetTrgDiscParams"];
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s:--------------------------------------------------\n" with:@"WiFiLQAMgrSetTrgDiscParams"];
  }
  if (qword_10027DD68) {
    [qword_10027DD68 WFLog:message:4, "%s: Enable: %1d BcnTxPer: {%2.1f %2.1f %2.1f} MinBcnSched: {%2d %2d %2d} TxPer: {%2.1f %2.1f %2.1f} minHostFrames: {%2u %2u %2u}\n", "WiFiLQAMgrSetTrgDiscParams", *(unsigned __int8 *)(a1 + 868), (float)(*(float *)(a1 + 876) * 100.0), (float)(*(float *)(a1 + 1084) * 100.0), (float)(*(float *)(a1 + 1248) * 100.0), *(unsigned int *)(a1 + 872), *(unsigned int *)(a1 + 1080), *(unsigned int *)(a1 + 1244), (float)(*(float *)(a1 + 884) * 100.0), (float)(*(float *)(a1 + 1092) * 100.0), (float)(*(float *)(a1 + 1256) * 100.0), *(unsigned int *)(a1 + 880), *(unsigned int *)(a1 + 1088), *(unsigned int *)(a1 + 1252)];
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, "%s:--------------------------------------------------\n", "WiFiLQAMgrSetTrgDiscParams"];
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: TrgDiscConfig - Misc Sig\n", "WiFiLQAMgrSetTrgDiscParams");
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:4, "%s:--------------------------------------------------\n", "WiFiLQAMgrSetTrgDiscParams"];
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: ActPrEnable: %1d NumActProbes: %3d ActPrTxPer: %2.1f simulateProbeFailureState: %1d sympSigEnable: %1d sympThres: %3d GwArpSigEnable: %1d gwArpTime: %f ccaSigEnable: %1d ccaThres: %3d\n", "WiFiLQAMgrSetTrgDiscParams", *(unsigned __int8 *)(a1 + 888), *(unsigned int *)(a1 + 892), (float)(*(float *)(a1 + 896) * 100.0), *(unsigned __int8 *)(a1 + 643), *(unsigned __int8 *)(a1 + 920), *(unsigned int *)(a1 + 924), *(unsigned __int8 *)(a1 + 904), *(void *)(a1 + 912), *(unsigned __int8 *)(a1 + 928), *(unsigned __int8 *)(a1 + 929)];
  }
  if (qword_10027DD68) {
    [qword_10027DD68 WFLog:message:4, "%s:--------------------------------------------------\n", "WiFiLQAMgrSetTrgDiscParams"];
  }
  return 4294963396;
}

uint64_t sub_10003E360(uint64_t a1, __int16 a2)
{
  if (a1)
  {
    *(_WORD *)(a1 + 2900) = a2;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"[TrafficEngineering]: Critical AppState = %d NonCritical AppState = %d", a2, HIBYTE(a2)];
    }
    uint64_t v4 = 0;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s, LQAManagerRef is NULL", @"WiFiLQAMgrSetLQATrafficConfig"];
    }
    uint64_t v4 = 4294963396;
  }
  return v4;
}

__CFDictionary *sub_10003E410(const UInt8 *a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFDataRef v3 = CFDataCreate(kCFAllocatorDefault, a1 + 2864, 8);
    if (v3)
    {
      CFDataRef v4 = v3;
      CFDictionaryAddValue(Mutable, @"BSSID", v3);
      CFRelease(v4);
      CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a1 + 2872);
      if (!v5) {
        goto LABEL_12;
      }
      CFNumberRef v6 = v5;
      CFDictionarySetValue(Mutable, @"LINK_HEALTH", v5);
      CFRelease(v6);
      CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a1 + 2880);
      if (!v7) {
        goto LABEL_12;
      }
      CFNumberRef v8 = v7;
      CFDictionarySetValue(Mutable, @"CHANNEL", v7);
      CFRelease(v8);
      CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, a1 + 2884);
      if (!v9) {
        goto LABEL_12;
      }
      CFNumberRef v10 = v9;
      CFDictionarySetValue(Mutable, @"CHANNEL_WIDTH", v9);
      CFRelease(v10);
      CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, a1 + 2893);
      if (!v11) {
        goto LABEL_12;
      }
      CFNumberRef v12 = v11;
      CFDictionarySetValue(Mutable, @"CCA_SELF_TOTAL", v11);
      CFRelease(v12);
      CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, a1 + 2894);
      if (!v13) {
        goto LABEL_12;
      }
      CFNumberRef v14 = v13;
      CFDictionarySetValue(Mutable, @"CCA_OTHER_TOTAL", v13);
      CFRelease(v14);
      CFNumberRef v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, a1 + 2895);
      if (!v15) {
        goto LABEL_12;
      }
      CFNumberRef v16 = v15;
      CFDictionarySetValue(Mutable, @"CCA_INTERFERENCE_TOTAL", v15);
      CFRelease(v16);
      CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a1 + 2888);
      if (v17)
      {
        CFNumberRef v18 = v17;
        CFDictionarySetValue(Mutable, @"RSSI", v17);
        CFRelease(v18);
      }
      else
      {
LABEL_12:
        CFRelease(Mutable);
        return 0;
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 136315138;
      float v21 = "WiFiLQAMgrGetCurLinkHealthDictionary";
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s: bssid allocation Failed!\n", (uint8_t *)&v20, 0xCu);
    }
  }
  return Mutable;
}

uint64_t sub_10003E6A8(uint64_t a1, void *a2)
{
  uint64_t result = sub_100024D68(*(void *)(a1 + 32));
  if (result != 1) {
    return result;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "[TrafficEngineering]: Critical App Event %@", a2 message];
  }
  unsigned int v6 = *(_DWORD *)(a1 + 2916);
  ++dword_10027D5F4;
  id v7 = [a2 objectForKey:@"CHANNEL"];
  id v8 = [a2 objectForKey:@"RSSI"];
  id v9 = [a2 objectForKey:@"BSSID"];
  id v10 = [a2 objectForKey:@"LINK_HEALTH"];
  CFNumberRef v11 = sub_10001E404(*(void *)(a1 + 48), @"BSSID");
  id v12 = [a2 objectForKey:@"CRITICAL_TRAFFIC_STATE"];
  unsigned __int16 v13 = (unsigned __int16)[v7 intValue];
  unsigned int v14 = [v8 intValue];
  unsigned __int16 v15 = (unsigned __int16)[v10 intValue];
  unsigned __int16 v16 = (unsigned __int16)[v12 intValue];
  *(CFAbsoluteTime *)(a1 + 2928) = CFAbsoluteTimeGetCurrent();
  if (*(unsigned __int16 *)(a1 + 2848) != v13
    || (uint64_t result = (uint64_t)[v9 isEqual:v11], (result & 1) == 0))
  {
    CFNumberRef v18 = (void *)qword_10027DD68;
    if (!qword_10027DD68)
    {
LABEL_12:
      unsigned int v6 = 1;
      goto LABEL_13;
    }
    int v19 = "[TrafficEngineering]: Peer on different BSS, Switch/Continue default behavior";
LABEL_11:
    [v18 WFLog:3 message:v19];
    goto LABEL_12;
  }
  if (!v16)
  {
    CFNumberRef v18 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_12;
    }
    int v19 = "[TrafficEngineering]: Critical App terminated, Revert to default behavior";
    goto LABEL_11;
  }
  switch(v15)
  {
    case 1u:
    case 8u:
      unsigned int v6 = 1;
      break;
    case 2u:
      unsigned int v6 = 2;
      break;
    case 4u:
      if ((int)(v14 << 16) < -4915200) {
        unsigned int v6 = 1;
      }
      else {
        unsigned int v6 = 4;
      }
      break;
    default:
      break;
  }
  if (*(_DWORD *)(a1 + 2916) != v6)
  {
    if (*(unsigned char *)(a1 + 2897) == 1)
    {
      if (v6 > 4 || ((1 << v6) & 0x16) == 0) {
        goto LABEL_14;
      }
    }
    else if (v6 != 1)
    {
      goto LABEL_14;
    }
LABEL_13:
    uint64_t result = sub_1000740EC(*(void *)(a1 + 32), v6);
LABEL_14:
    dword_10027D5F4 = 0;
  }
  return result;
}

__CFDictionary *sub_10003E944(uint64_t *a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFDataRef v3 = sub_10001E404(a1[6], @"BSSID");
    CFDictionaryAddValue(Mutable, @"BSSID", v3);
    CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a1 + 359);
    if (!v4) {
      goto LABEL_14;
    }
    CFNumberRef v5 = v4;
    CFDictionarySetValue(Mutable, @"LINK_HEALTH", v4);
    CFRelease(v5);
    CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (char *)a1 + 2900);
    if (!v6) {
      goto LABEL_14;
    }
    CFNumberRef v7 = v6;
    CFDictionarySetValue(Mutable, @"CRITICAL_TRAFFIC_STATE", v6);
    CFRelease(v7);
    CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (char *)a1 + 2901);
    if (!v8) {
      goto LABEL_14;
    }
    CFNumberRef v9 = v8;
    CFDictionarySetValue(Mutable, @"NON_CRITICAL_TRAFFIC_STATE", v8);
    CFRelease(v9);
    unsigned int valuePtr = sub_1000C6FC0(a1[6], @"CHANNEL");
    CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
    if (!v10) {
      goto LABEL_14;
    }
    CFNumberRef v11 = v10;
    CFDictionarySetValue(Mutable, @"CHANNEL", v10);
    CFRelease(v11);
    id v12 = sub_10001E404(a1[6], @"CHANNEL_WIDTH");
    CFDictionarySetValue(Mutable, @"CHANNEL_WIDTH", v12);
    CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (char *)a1 + 2893);
    if (!v13) {
      goto LABEL_14;
    }
    CFNumberRef v14 = v13;
    CFDictionarySetValue(Mutable, @"CCA_SELF_TOTAL", v13);
    CFRelease(v14);
    CFNumberRef v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (char *)a1 + 2894);
    if (!v15) {
      goto LABEL_14;
    }
    CFNumberRef v16 = v15;
    CFDictionarySetValue(Mutable, @"CCA_OTHER_TOTAL", v15);
    CFRelease(v16);
    CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (char *)a1 + 2895);
    if (!v17) {
      goto LABEL_14;
    }
    CFNumberRef v18 = v17;
    CFDictionarySetValue(Mutable, @"CCA_INTERFERENCE_TOTAL", v17);
    CFRelease(v18);
    unsigned int v23 = sub_1000C6FC0(a1[6], @"RSSI");
    CFNumberRef v19 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v23);
    if (v19)
    {
      CFNumberRef v20 = v19;
      CFDictionarySetValue(Mutable, @"RSSI", v19);
      CFRelease(v20);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Link Health: %@", Mutable message];
      }
    }
    else
    {
LABEL_14:
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

void sub_10003EBFC(uint64_t a1)
{
  CFArrayRef v2 = *(NSObject **)(a1 + 2904);
  if (v2)
  {
    dispatch_time_t v3 = dispatch_time(0, 30000000000);
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  *(unsigned char *)(a1 + 2912) = 1;
}

uint64_t sub_10003EC54()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_10027D5F8 = result;
  return result;
}

void sub_10003EC7C(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "enter:%s: \n", "__WiFiLQAMgrRelease");
  }
  if (!a1) {
    sub_100195F74();
  }
  CFTypeID v3 = CFGetTypeID((CFTypeRef)a1);
  uint64_t v4 = qword_10027D5F8;
  if (!qword_10027D5F8)
  {
    pthread_once(&stru_10027C958, (void (*)(void))sub_10003EC54);
    uint64_t v4 = qword_10027D5F8;
  }
  if (v3 != v4) {
    sub_100195FA0();
  }
  qword_10027D5E8 = 0;
  if (*(void *)(a1 + 528)) {
    tcp_connection_fallback_watcher_destroy();
  }
  *(void *)(a1 + 528) = 0;
  CFNumberRef v5 = *(const void **)(a1 + 40);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 40) = 0;
  }
  CFNumberRef v6 = *(const void **)(a1 + 400);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 400) = 0;
  }
  CFNumberRef v7 = *(NSObject **)(a1 + 544);
  if (v7)
  {
    dispatch_release(v7);
    *(void *)(a1 + 544) = 0;
  }
  CFNumberRef v8 = *(NSObject **)(a1 + 336);
  if (v8)
  {
    dispatch_release(v8);
    *(void *)(a1 + 336) = 0;
  }
  CFNumberRef v9 = *(NSObject **)(a1 + 2904);
  if (v9)
  {
    dispatch_release(v9);
    *(void *)(a1 + 2904) = 0;
  }
  *(unsigned char *)(a1 + 2912) = 0;
  CFNumberRef v10 = *(NSObject **)(a1 + 296);
  if (v10) {
    dispatch_release(v10);
  }
  CFNumberRef v11 = *(NSObject **)(a1 + 2920);
  if (v11) {
    dispatch_release(v11);
  }
  id v12 = *(void **)(a1 + 2968);
  if (v12) {

  }
  CFNumberRef v13 = *(const void **)(a1 + 24);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 24) = 0;
  }
  CFNumberRef v14 = *(const void **)(a1 + 320);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 320) = 0;
  }
  CFNumberRef v15 = *(const void **)(a1 + 1288);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 1288) = 0;
  }
  CFNumberRef v16 = *(const void **)(a1 + 1272);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 1272) = 0;
  }
  CFNumberRef v17 = *(const void **)(a1 + 256);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 256) = 0;
  }
  CFNumberRef v18 = *(const void **)(a1 + 264);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 264) = 0;
  }
  CFNumberRef v19 = *(const void **)(a1 + 144);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 144) = 0;
  }
  CFNumberRef v20 = *(const void **)(a1 + 152);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(a1 + 152) = 0;
  }
  float v21 = *(const void **)(a1 + 112);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(a1 + 112) = 0;
  }
  BOOL v22 = *(const void **)(a1 + 208);
  if (v22) {
    CFRelease(v22);
  }
  bzero((void *)(a1 + 16), 0xC80uLL);
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"exit: %s: \n" args:__WiFiLQAMgrRelease];
  }
}

void sub_10003EEB0(uint64_t a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"RSSI_WIN: Configure Dynamic RSSI Window = %u" arguments:*(unsigned __int8 *)(a1 + 2985)];
  }
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 2985);

  sub_1000747D0(v3, v4);
}

uint64_t sub_10003EF28(CFTypeRef cf)
{
  if (!&_managed_event_fetch) {
    return 0;
  }
  if (cf)
  {
    CFRetain(cf);
    return managed_event_fetch();
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: LQAMgr is NULL", "__WiFiLQAMgrFetchSymptomsViewOfLink"];
    }
    return 0;
  }
}

uint64_t sub_10003F024(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: LQAMgr is NULL", @"__WiFiLQAMgrCheckReassocRequiredMacStatsBased"];
    }
    goto LABEL_31;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  memset(v21, 0, 44);
  if (!sub_10003CAAC(a1, v21))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Failed to extract metrics from Lqm, exiting!", "__WiFiLQAMgrCheckReassocRequiredMacStatsBased");
    }
    goto LABEL_31;
  }
  if (*(int *)(a1 + 2796) > -66) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 2834))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: isAwdlRealTimeModeActive" args:("__WiFiLQAMgrCheckReassocRequiredMacStatsBased", NULL)];
    }
LABEL_31:
    return 0;
  }
  if (SBYTE8(v21[2]) <= SBYTE9(v21[2])) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 928)) {
    return 0;
  }
  uint64_t v3 = (BYTE8(v21[2]) - BYTE9(v21[2]));
  if (v3 < *(unsigned __int8 *)(a1 + 929)) {
    return 0;
  }
  unint64_t v4 = 0;
  float v5 = (float)SLODWORD(v21[0]);
  int v6 = DWORD1(v21[0]);
  float v7 = (float)SDWORD1(v21[0]);
  CFNumberRef v8 = (_DWORD *)(a1 + 736);
  BOOL v9 = 1;
  while (!*((unsigned char *)v8 - 12)
       || SDWORD1(v21[0]) < *(v8 - 2)
       || (float)(*((float *)v8 - 1) * v7) > v5
       || SDWORD2(v21[0]) <= *v8 * DWORD1(v21[0]))
  {
    v8 += 4;
    BOOL v9 = v4++ < 3;
    if (v4 == 4)
    {
      uint64_t v10 = 0;
      goto LABEL_15;
    }
  }
  uint64_t v10 = 1;
LABEL_15:
  if (*(unsigned char *)(a1 + 868)
    && SHIDWORD(v21[1]) > *(_DWORD *)(a1 + 872)
    && (float)((float)(1.0 - *(float *)(a1 + 876)) * (float)SHIDWORD(v21[1])) > (float)SLODWORD(v21[2])
    && (SDWORD1(v21[0]) < *(_DWORD *)(a1 + 880) || (float)(*(float *)(a1 + 884) * v7) <= v5))
  {
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 2824) = 1;
  }
  else
  {
    uint64_t v11 = 0;
  }
  unint64_t v12 = 0;
  CFNumberRef v13 = (float *)(a1 + 804);
  BOOL v14 = 1;
  while (!*((unsigned char *)v13 - 16)
       || SDWORD1(v21[1]) < *((_DWORD *)v13 - 3)
       || (float)(*(v13 - 2) * (float)SDWORD1(v21[1])) > (float)SLODWORD(v21[1])
       || v6 >= *((_DWORD *)v13 - 1) && (float)(*v13 * v7) > v5)
  {
    v13 += 5;
    BOOL v14 = v12++ < 3;
    if (v12 == 4)
    {
      uint64_t v15 = 0;
      goto LABEL_33;
    }
  }
  uint64_t v15 = 1;
LABEL_33:
  double v17 = 0.0;
  if (*(_DWORD *)(a1 + 2760) == 1) {
    double v17 = Current - *(double *)(a1 + 2768);
  }
  BOOL v18 = *(unsigned char *)(a1 + 904) && (unint64_t)(v17 >= *(double *)(a1 + 912));
  if (((v9 | v11 | v14) & 1) == 0 && !v18) {
    return 0;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: isReassocRequired:%d cca:%d txPerDecision:%d bcnPerDecision:%d fwPerDecision:%d gwArpDecision:%d", "__WiFiLQAMgrCheckReassocRequiredMacStatsBased", 1, v3, v10, v11, v15, v18)];
  }
  return 1;
}

void sub_10003F368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFBooleanRef value = 0;
  int valuePtr = 0;
  CFNumberRef v30 = 0;
  CFNumberRef v31 = 0;
  uint64_t v29 = 0;
  CFNumberRef v27 = 0;
  CFNumberRef v28 = 0;
  CFNumberRef number = 0;
  CFNumberRef v26 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  pthread_mutex_lock(&stru_10027CB90);
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v6 + 2984))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s LQA manager is in closing \n", "__WiFiLQAMgrFetchSymptomsViewOfLink_block_invoke"];
    }
    pthread_mutex_unlock(&stru_10027CB90);
    CFNumberRef v8 = *(const void **)(a1 + 32);
    CFRelease(v8);
    return;
  }
  *(void *)(v6 + 496) = 0x400000000000FFFFLL;
  *(_DWORD *)(v6 + 520) = 0;
  *(void *)(v6 + 512) = 0;
  *(unsigned char *)(v6 + 536) = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(v6 + 537) = *(unsigned char *)(a1 + 41);
  if (a2 || !a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: Error %d from Managed Event Fetch", @"__WiFiLQAMgrFetchSymptomsViewOfLink_block_invoke", a2];
    }
  }
  else
  {
    CFDictionaryRef v9 = *(const __CFDictionary **)(a3 + 48);
    if (v9)
    {
      if (CFDictionaryGetValueIfPresent(v9, @"impact-flags", (const void **)&value) && value)
      {
        CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
        *(_DWORD *)(*(void *)(a1 + 32) + 492) = valuePtr;
      }
      char v10 = 0;
      if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a3 + 48), @"net-score", (const void **)&number)
        && number)
      {
        CFNumberGetValue(number, kCFNumberIntType, &v22);
        uint64_t v11 = *(void *)(a1 + 32);
        int v12 = *(_DWORD *)(v11 + 504);
        if (v12 == v22)
        {
          char v10 = 0;
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Change in netscore observed from %d to %d", "__WiFiLQAMgrFetchSymptomsViewOfLink_block_invoke", *(unsigned int *)(*(void *)(a1 + 32) + 504), v22);
          }
          int v12 = v22;
          uint64_t v11 = *(void *)(a1 + 32);
          char v10 = 1;
        }
        *(_DWORD *)(v11 + 504) = v12;
      }
      if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a3 + 48), @"AWD-info", (const void **)&v31) && v31)
      {
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v31, @"ARP-failures", (const void **)&v30) && v30)
        {
          CFNumberGetValue((CFNumberRef)v30, kCFNumberIntType, (char *)&v24 + 4);
          *(_DWORD *)(*(void *)(a1 + 32) + 512) = HIDWORD(v24);
        }
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v31, @"dns-total", (const void **)&v28) && v28)
        {
          CFNumberGetValue(v28, kCFNumberIntType, (char *)&v23 + 4);
          *(_DWORD *)(*(void *)(a1 + 32) + 516) = HIDWORD(v23);
        }
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v31, @"dns-impacted", (const void **)&v29) && v29)
        {
          CFNumberGetValue((CFNumberRef)v29, kCFNumberIntType, &v24);
          *(_DWORD *)(*(void *)(a1 + 32) + 520) = v24;
        }
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v31, @"data-stalls-score", (const void **)&v27) && v27)
        {
          CFNumberGetValue(v27, kCFNumberIntType, &v23);
          uint64_t v15 = *(void *)(a1 + 32);
          int v16 = *(_DWORD *)(v15 + 524);
          if (v16 != v23)
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Change in datastallscore observed from %d to %d", "__WiFiLQAMgrFetchSymptomsViewOfLink_block_invoke", *(unsigned int *)(*(void *)(a1 + 32) + 524), v23);
            }
            int v16 = v23;
            uint64_t v15 = *(void *)(a1 + 32);
            *(_DWORD *)(v15 + 524) = v23;
            char v10 = 1;
          }
          *(_DWORD *)(v15 + 496) = v16;
        }
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v31, @"rnf-denials-score", (const void **)&v26) && v26)
        {
          CFNumberGetValue(v26, kCFNumberFloatType, (char *)&v22 + 4);
          *(_DWORD *)(*(void *)(a1 + 32) + 500) = HIDWORD(v22);
        }
      }
      if (*(unsigned char *)(a1 + 40))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s Symptoms Input: %@", "__WiFiLQAMgrFetchSymptomsViewOfLink_block_invoke", *(void *)(a3 + 48) message];
        }
      }
      goto LABEL_51;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: additional_info NULL from Managed Event Fetch", "__WiFiLQAMgrFetchSymptomsViewOfLink_block_invoke", v21);
    }
  }
  char v10 = 0;
LABEL_51:
  uint64_t v19 = *(void *)(a1 + 32);
  *(unsigned char *)(v19 + 538) = v10;
  CFNumberRef v20 = *(NSObject **)(v19 + 1280);
  if (v20) {
    dispatch_async_f(v20, (void *)v19, (dispatch_function_t)sub_10003F7E8);
  }
  pthread_mutex_unlock(&stru_10027CB90);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_10003F7E8(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: LQAMgr is NULL", "__WiFiLQAMgrSymptomsInputCallBack")];
    }
    goto LABEL_176;
  }
  if (*(unsigned char *)(a1 + 537) && (*(unsigned char *)(a1 + 538) || !*(unsigned char *)(a1 + 539))) {
    sub_10003C3D4(a1);
  }
  if (*(unsigned char *)(a1 + 200) != 1)
  {
    if (!*(unsigned char *)(a1 + 536))
    {
LABEL_177:
      CFMutableStringRef Mutable = 0;
      BOOL v49 = 0;
      BOOL v50 = 0;
      LODWORD(v4) = 0;
      unsigned int v5 = 0;
      uint64_t v42 = 0;
      uint64_t v23 = 0;
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      uint64_t v51 = 0;
LABEL_114:
      char v28 = 1;
LABEL_115:
      uint64_t v52 = +[WiFiUsageMonitor sharedInstance];
      uint64_t v53 = 256;
      if (!v50) {
        uint64_t v53 = 0;
      }
      -[WiFiUsageMonitor setTdLogic_execState:forInterface:](v52, "setTdLogic_execState:forInterface:", (v73 << 48) | (v72 << 56) | (v23 << 40) | (v42 << 32) | ((unint64_t)v5 << 24) | ((unint64_t)v4 << 16) | v53 | v49, v51, *(void *)(a1 + 40));
      if (Mutable) {
        CFRelease(Mutable);
      }
      char v54 = v28 ^ 1;
      if (!a1) {
        char v54 = 1;
      }
      if ((v54 & 1) == 0) {
        *(unsigned char *)(a1 + 161) = 0;
      }
      goto LABEL_123;
    }
    int v2 = *(_DWORD *)(a1 + 20);
    if (v2 == 1)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: Trigger Disconnect in GoodLinkState" args:("__WiFiLQAMgrSymptomsInputCallBack")];
      }
    }
    else
    {
      if (v2)
      {
        BOOL v3 = sub_100040448(a1, 0, 0);
        BOOL v4 = v3;
        if (!*(unsigned char *)(a1 + 645))
        {
          uint64_t v9 = 0;
          unsigned int v5 = 0;
          char v8 = 0;
          int v7 = 1;
          goto LABEL_31;
        }
        if (!*(unsigned char *)(a1 + 646) || *(_DWORD *)(a1 + 2796) <= *(_DWORD *)(a1 + 660))
        {
          char v8 = 0;
          unsigned int v5 = 0;
          uint64_t v9 = 0;
          int v7 = 1;
          goto LABEL_29;
        }
        if (*(unsigned char *)(a1 + 2824) || (unsigned int v11 = *(_DWORD *)(a1 + 496), v11 < 0x1A) || v11 == 0xFFFF || v3)
        {
          unsigned int v5 = 0;
          double v6 = *(float *)(a1 + 500);
          int v7 = 1;
          if (v6 < 0.01)
          {
            char v8 = 1;
            uint64_t v9 = 0;
LABEL_29:
            if (*(unsigned char *)(a1 + 645))
            {
              int v12 = *(unsigned __int8 *)(a1 + 646);
              BOOL v69 = *(unsigned char *)(a1 + 646) != 0;
              goto LABEL_32;
            }
LABEL_31:
            BOOL v69 = 0;
            int v12 = *(unsigned __int8 *)(a1 + 646);
LABEL_32:
            BOOL v70 = v12 != 0;
            int v13 = *(_DWORD *)(a1 + 2808);
            unsigned int v14 = sub_10003C710(a1) << 14;
            int v15 = *(unsigned __int8 *)(a1 + 645);
            uint64_t v71 = v9;
            if (*(unsigned char *)(a1 + 645)) {
              int v15 = (*(unsigned char *)(a1 + 646) != 0) << 13;
            }
            int v16 = v13 | (v4 << 23) | v14 | v15 | 0x9800;
            unsigned int v17 = *(_DWORD *)(a1 + 496);
            if (v17 != 0xFFFF && v17 >= 0x1A) {
              v16 &= ~0x800u;
            }
            double v19 = *(float *)(a1 + 500);
            if (v19 > 1.01 || v19 < 0.01) {
              unsigned int v21 = v16;
            }
            else {
              unsigned int v21 = v16 & 0xFFFFEFFF;
            }
            if ([+[WiFiUserInteractionMonitor sharedInstance] isCellularDataUsable])
            {
              unsigned int v22 = v21;
            }
            else
            {
              unsigned int v22 = v21 & 0xFFFF7FFE;
            }
            if (*(unsigned char *)(a1 + 647)
              && *(unsigned char *)(a1 + 645)
              && *(unsigned char *)(a1 + 646)
              && ![+[WiFiUserInteractionMonitor sharedInstance] isCellularDataUsable])
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"%s CellData setting overriding TrgDisc decision" args:__WiFiLQAMgrSymptomsInputCallBack];
              }
              int v7 = 0;
              uint64_t v23 = 1;
            }
            else
            {
              uint64_t v23 = 0;
            }
            if (sub_100072AF0(*(void *)(a1 + 32)) == 1
              && (*(_DWORD *)(a1 + 216) == 1 || !*(unsigned char *)(a1 + 645) || !*(unsigned char *)(a1 + 646)))
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4, @"%s Manual Join: User Interactive or RNF disabled, overriding TrgDisc decision", @"__WiFiLQAMgrSymptomsInputCallBack"];
              }
              uint64_t v27 = 0;
              uint64_t v72 = 0;
              goto LABEL_80;
            }
            char v24 = v8 ^ 1;
            if (!v7) {
              char v24 = 1;
            }
            if (v24)
            {
              if (v4 || !v7)
              {
                if (!v7)
                {
LABEL_76:
                  uint64_t v68 = 0;
                  uint64_t v72 = 0;
LABEL_81:
                  uint64_t v73 = 0;
                  char v28 = 1;
                  goto LABEL_82;
                }
              }
              else if (*(_DWORD *)(a1 + 2796) > *(_DWORD *)(a1 + 656) - 2)
              {
                int v7 = 0;
                uint64_t v68 = 0;
                uint64_t v72 = 0;
                char v28 = 1;
                uint64_t v29 = 1;
                goto LABEL_71;
              }
            }
            else
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s Proceeding with Trigger Discconect - DataStallScore %d AppPolicyScore %f", "__WiFiLQAMgrSymptomsInputCallBack", *(unsigned int *)(a1 + 496), *(float *)(a1 + 500));
              }
            }
            if (!sub_10003C710(a1))
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"%s Foreground Networking App not present. Overriding TrgDisc decision" : @"__WiFiLQAMgrSymptomsInputCallBack"];
              }
              uint64_t v27 = 0;
              uint64_t v72 = 1;
              goto LABEL_80;
            }
            if (*(unsigned char *)(a1 + 641))
            {
              int v7 = 0;
              goto LABEL_76;
            }
            if (!*(unsigned char *)(a1 + 644))
            {
              char v28 = 0;
              uint64_t v68 = 0;
              uint64_t v72 = 0;
              uint64_t v73 = 0;
              int v7 = 1;
LABEL_82:
              unsigned int v30 = sub_100040E54(a1);
              if (v30 == 255)
              {
                CFMutableStringRef Mutable = 0;
                uint64_t v42 = v71;
LABEL_112:
                BOOL v49 = v69;
                BOOL v50 = v70;
                uint64_t v51 = v68;
                if ((v28 & 1) == 0) {
                  sub_1000366F0(a1, (uint64_t)Mutable);
                }
                goto LABEL_114;
              }
              int v31 = v30;
              unsigned int v66 = v5;
              BOOL v67 = v4;
              unsigned int v32 = v30;
              uint64_t v33 = a1 + 144 * v30;
              uint64_t v34 = (unsigned int *)(v33 + 1312);
              *(unsigned char *)(v33 + 1349) = v7;
              uint64_t v35 = (const float *)(a1 + 492);
              *(_DWORD *)(v33 + 1368) = *(_DWORD *)(a1 + 512);
              *(int32x2_t *)(v33 + 1372) = vrev64_s32(*(int32x2_t *)(a1 + 516));
              *(double *)(v33 + 1400) = *(float *)(a1 + 500);
              *(_DWORD *)(v33 + 1416) = *(_DWORD *)(a1 + 496);
              float32x2_t v36 = vld1_dup_f32(v35);
              *(float32x2_t *)(v33 + 1356) = v36;
              CFNumberRef v37 = (unsigned int *)(v33 + 1356);
              uint64_t v38 = v7 | v22 & 0xFFFFFFFE;
              *(_DWORD *)(v33 + 1392) = v38;
              double Current = CFAbsoluteTimeGetCurrent();
              double v40 = 0.0;
              if (*(_DWORD *)(a1 + 2760) == 1) {
                double v40 = Current - *(double *)(a1 + 2768);
              }
              uint64_t v65 = v23;
              if (v28)
              {
                CFMutableStringRef Mutable = 0;
LABEL_109:
                uint64_t v42 = v71;
                if (qword_10027DD68)
                {
                  uint64_t v48 = a1 + 144 * v32;
                  objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: TrgDiscStatus %u [Rssi %d TxFrms %ld TxFail %ld TxRet %ld fwFrms %ld fwFail %ld fwRtry %ld RxFrms %ld BcnSch %ld BcnRx %ld Awd %ld UnGw %f FgApp %ld Walkout %d possibleRoam %d DataStallScore %ld DeltaTime %fsecs TD1 %d FastDisconnect %d]", "__WiFiLQAMgrSymptomsInputCallBack", v38, *(char *)(v48 + 1348), *v34, *(unsigned int *)(v48 + 1316), *(unsigned int *)(v48 + 1320), *(unsigned int *)(v48 + 1332), *(unsigned int *)(v48 + 1336), *(unsigned int *)(v48 + 1340), *(unsigned int *)(v48 + 1344), *(unsigned int *)(v48 + 1324), *(unsigned int *)(v48 + 1328), *(unsigned __int8 *)(v48 + 1364),
                    *(void *)&v40,
                    *v37,
                    *(unsigned __int8 *)(a1 + 273),
                    *(unsigned __int8 *)(a1 + 272),
                    *(unsigned int *)(a1 + 496),
                    *(void *)(a1 + 280),
                    *(unsigned __int8 *)(a1 + 2824),
                    v67);
                }
                sub_100040F1C((unsigned char *)a1, v31);
                LODWORD(v4) = v67;
                unsigned int v5 = v66;
                uint64_t v23 = v65;
                goto LABEL_112;
              }
              if (*(double *)(a1 + 136) != 0.0) {
                *(void *)(a1 + 144 * v32 + 1432) = (unint64_t)(CFAbsoluteTimeGetCurrent()
              }
                                                                        - *(double *)(a1 + 136));
              if (*(double *)(a1 + 120) != 0.0) {
                *(void *)(a1 + 144 * v32 + 1424) = (unint64_t)(CFAbsoluteTimeGetCurrent()
              }
                                                                        - *(double *)(a1 + 120));
              CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
              uint64_t v43 = sub_10001A43C(*(const void **)(a1 + 48));
              CFStringAppendFormat(Mutable, 0, @"Your WiFi %@ was automatically disconnected due to poor connectivity\n", v43);
              uint64_t v44 = CFStringCreateMutable(kCFAllocatorDefault, 0);
              if (!v44) {
                goto LABEL_109;
              }
              uint64_t v45 = v44;
              CFStringAppendFormat(v44, 0, @"Trigger Disconnect with signatures - ");
              if ((v22 & 2) != 0)
              {
                CFStringAppendFormat(v45, 0, @"TxPER, ");
                if ((v22 & 4) == 0)
                {
LABEL_95:
                  if ((v22 & 8) == 0) {
                    goto LABEL_96;
                  }
                  goto LABEL_145;
                }
              }
              else if ((v22 & 4) == 0)
              {
                goto LABEL_95;
              }
              CFStringAppendFormat(v45, 0, @"FwTxPER, ");
              if ((v22 & 8) == 0)
              {
LABEL_96:
                if ((v22 & 0x10) == 0) {
                  goto LABEL_97;
                }
                goto LABEL_146;
              }
LABEL_145:
              CFStringAppendFormat(v45, 0, @"BeaconPER, ");
              if ((v22 & 0x10) == 0)
              {
LABEL_97:
                if ((v22 & 0x40) == 0) {
                  goto LABEL_98;
                }
                goto LABEL_147;
              }
LABEL_146:
              CFStringAppendFormat(v45, 0, @"Symptoms, ");
              if ((v22 & 0x40) == 0)
              {
LABEL_98:
                if ((v22 & 0x80) == 0) {
                  goto LABEL_99;
                }
                goto LABEL_148;
              }
LABEL_147:
              CFStringAppendFormat(v45, 0, @"ARP, ");
              if ((v22 & 0x80) == 0)
              {
LABEL_99:
                if ((v22 & 0x100) == 0) {
                  goto LABEL_100;
                }
                goto LABEL_149;
              }
LABEL_148:
              CFStringAppendFormat(v45, 0, @"MotionAggr, ");
              if ((v22 & 0x100) == 0)
              {
LABEL_100:
                if ((v22 & 0x200) == 0) {
                  goto LABEL_101;
                }
                goto LABEL_150;
              }
LABEL_149:
              CFStringAppendFormat(v45, 0, @"UsrWalkout, ");
              if ((v22 & 0x200) == 0)
              {
LABEL_101:
                if ((v22 & 0x400) == 0) {
                  goto LABEL_102;
                }
                goto LABEL_151;
              }
LABEL_150:
              CFStringAppendFormat(v45, 0, @"EdgeBss, ");
              if ((v22 & 0x400) == 0)
              {
LABEL_102:
                if ((v22 & 0x20) == 0) {
                  goto LABEL_103;
                }
                goto LABEL_152;
              }
LABEL_151:
              CFStringAppendFormat(v45, 0, @"RoamCache, ");
              if ((v22 & 0x20) == 0)
              {
LABEL_103:
                if ((v22 & 0x200000) == 0) {
                  goto LABEL_104;
                }
                goto LABEL_153;
              }
LABEL_152:
              CFStringAppendFormat(v45, 0, @"Probe, ");
              if ((v22 & 0x200000) == 0)
              {
LABEL_104:
                if ((v22 & 0x800000) == 0)
                {
LABEL_106:
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%@", v45 message];
                  }
                  CFRelease(v45);
                  goto LABEL_109;
                }
LABEL_105:
                CFStringAppendFormat(v45, 0, @"Recommendation, ");
                goto LABEL_106;
              }
LABEL_153:
              CFStringAppendFormat(v45, 0, @"TD1.0, ");
              if ((v22 & 0x800000) == 0) {
                goto LABEL_106;
              }
              goto LABEL_105;
            }
            if (*(unsigned char *)(a1 + 1296))
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s Suppress TrgDisc decision with User's previous input", "__WiFiLQAMgrSymptomsInputCallBack");
              }
              uint64_t v72 = 0;
              uint64_t v27 = 1;
LABEL_80:
              uint64_t v68 = v27;
              int v7 = 0;
              goto LABEL_81;
            }
            if (*(void *)(a1 + 1288))
            {
              char v28 = 0;
              CFMutableStringRef Mutable = 0;
              uint64_t v72 = 0;
              uint64_t v73 = 0;
              uint64_t v51 = 0;
LABEL_166:
              uint64_t v42 = v71;
              BOOL v49 = v69;
              BOOL v50 = v70;
              goto LABEL_115;
            }
            char v28 = 0;
            if (!sub_100040C28(a1))
            {
              CFMutableStringRef Mutable = 0;
              uint64_t v51 = 0;
              uint64_t v72 = 0;
              uint64_t v73 = 0;
              goto LABEL_166;
            }
            uint64_t v68 = 0;
            int v7 = 1;
            uint64_t v29 = 0;
            uint64_t v72 = 0;
LABEL_71:
            uint64_t v73 = v29;
            goto LABEL_82;
          }
          char v8 = 1;
          uint64_t v9 = 0;
          if (v6 > 1.01) {
            goto LABEL_29;
          }
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s Symptoms overriding TrgDisc decision - AppPolicyScore %f", "__WiFiLQAMgrSymptomsInputCallBack", *(float *)(a1 + 500)];
          }
          unsigned int v5 = 0;
          uint64_t v9 = 1;
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s Symptoms overriding TrgDisc decision - DataStallScore %d", "__WiFiLQAMgrSymptomsInputCallBack", *(unsigned int *)(a1 + 496)];
          }
          uint64_t v9 = 0;
          unsigned int v5 = 1;
        }
        int v7 = 0;
        char v8 = 1;
        goto LABEL_29;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: Trigger Disconnect in UnassociatedState", @"__WiFiLQAMgrSymptomsInputCallBack"];
      }
    }
LABEL_176:
    goto LABEL_177;
  }
LABEL_123:
  if (*(unsigned char *)(a1 + 200))
  {
    *(unsigned char *)(a1 + 200) = 0;
    if (*(int *)(a1 + 2796) <= -66)
    {
      if (*(unsigned char *)(a1 + 2834))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: isAwdlRealTimeModeActive" args:("__WiFiLQAMgrCheckReassocRequiredSymptomsScoreBased", 0x0)];
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 496)) {
          goto LABEL_127;
        }
        int v58 = sub_10003C710(a1);
        if (qword_10027DD68)
        {
          int v60 = "Yes";
          if (!v58) {
            int v60 = "No";
          }
          [((id)qword_10027DD68) WFLog:4, @"%s: SymptomsScore indicates WiFi data stall. FG app:%s", @"__WiFiLQAMgrCheckReassocRequiredSymptomsScoreBased", v60];
        }
        if (!v58)
        {
LABEL_127:
          if (!sub_10003F024(a1)) {
            return;
          }
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Attempting host triggered roam based on MacStats", "__WiFiLQAMgrCheckReassocRequiredSymptomsScoreBased");
          }
          id v56 = +[WiFiRoamManager sharedWiFiRoamManager];
          uint64_t v57 = 4;
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Attempting host triggered roam based on SymptomsScore", "__WiFiLQAMgrCheckReassocRequiredSymptomsScoreBased");
          }
          id v56 = +[WiFiRoamManager sharedWiFiRoamManager];
          uint64_t v57 = 3;
        }
        [v56 roamWithReason:v57 bandPreference:0];
      }
    }
  }
}

BOOL sub_100040448(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  int v6 = _os_feature_enabled_impl();
  int v7 = _os_feature_enabled_impl();
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: LQAMgrRef is null" : @"__WiFiLQAMgrShouldPerformFastDisconnect"];
    }
    goto LABEL_148;
  }
  BOOL v8 = v7;
  if (((_os_feature_enabled_impl() | v6) & 1) == 0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Fast Disconnect not enabled" args:("__WiFiLQAMgrShouldPerformFastDisconnect", nil)];
    }
    goto LABEL_148;
  }
  if (sub_1000199C0(*(void *)(a1 + 48)) || sub_10001E71C(*(void *)(a1 + 48)))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Fast Disconnect not supported on CarPlay/Personal Hotspot networks", "__WiFiLQAMgrShouldPerformFastDisconnect")];
    }
    goto LABEL_148;
  }
  if (*(_DWORD *)(a1 + 2796) >= *(_DWORD *)(a1 + 648))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Fast Disconnect not triggered - Last RSSI: %d >= Good Link RSSI: %d", "__WiFiLQAMgrShouldPerformFastDisconnect", *(unsigned int *)(a1 + 2796), *(unsigned int *)(a1 + 648)];
    }
    uint64_t v65 = v64;
    goto LABEL_149;
  }
  if (*(unsigned char *)(a1 + 220))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Fast Disconnect not triggered - FaceTime call active", "__WiFiLQAMgrShouldPerformFastDisconnect")];
    }
    goto LABEL_148;
  }
  if (*(unsigned char *)(a1 + 645)) {
    BOOL v69 = *(unsigned char *)(a1 + 646) != 0;
  }
  else {
    BOOL v69 = 0;
  }
  if ([+[WiFiUserInteractionMonitor sharedInstance] isRealTimeAppActive]|| *(unsigned char *)(a1 + 2952))
  {
    uint64_t v9 = &_mh_execute_header;
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
    uint64_t v9 = 0;
  }
  unsigned int v11 = [+[WiFiUserInteractionMonitor sharedInstance] isCellularInexpensive5G];
  uint64_t v12 = 0x10000000000;
  if (!v11) {
    uint64_t v12 = 0;
  }
  if ((v10 & 1) == 0 && (v6 & v11 & 1) == 0)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Fast Disconnect not triggered - neither realtime app active nor cheap 5g available", "__WiFiLQAMgrShouldPerformFastDisconnect")];
    }
    goto LABEL_148;
  }
  unint64_t v13 = v12 | (unint64_t)v9;
  if (v6)
  {
    unint64_t v14 = (*(_DWORD *)(a1 + 2948) >> 1) & 1;
    v13 |= v14;
  }
  else
  {
    unint64_t v14 = 0;
  }
  memset(v70, 0, 44);
  if (!sub_10003CAAC(a1, v70))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: failed to extract metrics from LQM, exiting!", "__WiFiLQAMgrShouldPerformFastDisconnect")];
    }
LABEL_148:
    uint64_t v65 = v63;
LABEL_149:
    return 0;
  }
  if (v8) {
    BOOL v8 = (*(unsigned char *)(a1 + 2948) & 1) == 0;
  }
  int v15 = *(_DWORD *)(a1 + 2796);
  int v16 = *(_DWORD *)(a1 + 656);
  float v17 = (float)SLODWORD(v70[0]);
  float v18 = (float)SDWORD1(v70[0]);
  uint64_t v19 = -64;
  while (1)
  {
    uint64_t v20 = a1 + v19 + 996;
    if (v15 <= v16) {
      uint64_t v20 = a1 + v19 + 1160;
    }
    if (*(unsigned char *)v20
      && SDWORD1(v70[0]) >= *(_DWORD *)(v20 + 4)
      && (float)(*(float *)(v20 + 8) * v18) <= v17
      && SDWORD2(v70[0]) > *(_DWORD *)(v20 + 12) * DWORD1(v70[0]))
    {
      break;
    }
    v19 += 16;
    if (!v19) {
      goto LABEL_31;
    }
  }
  v13 |= 0x100uLL;
  ++v14;
LABEL_31:
  uint64_t v21 = a1 + 1240;
  uint64_t v22 = 1240;
  if (v15 > v16)
  {
    uint64_t v22 = 1076;
    uint64_t v21 = a1 + 1076;
  }
  if (*(unsigned char *)(a1 + v22)
    && SHIDWORD(v70[1]) > *(_DWORD *)(v21 + 4)
    && (float)((float)(1.0 - *(float *)(v21 + 8)) * (float)SHIDWORD(v70[1])) > (float)SLODWORD(v70[2]))
  {
    unint64_t v13 = v13 & 0xFFFFFFFFFF00FFFFLL | 0x10000;
    ++v14;
  }
  uint64_t v23 = -80;
  while (1)
  {
    uint64_t v24 = a1 + v23 + 1076;
    if (v15 <= v16) {
      uint64_t v24 = a1 + v23 + 1240;
    }
    if (*(unsigned char *)v24
      && SDWORD1(v70[1]) >= *(_DWORD *)(v24 + 4)
      && (float)(*(float *)(v24 + 8) * (float)SDWORD1(v70[1])) <= (float)SLODWORD(v70[1])
      && (SDWORD1(v70[0]) < *(_DWORD *)(v24 + 12) || (float)(*(float *)(v24 + 16) * v18) <= v17))
    {
      break;
    }
    v23 += 20;
    if (!v23) {
      goto LABEL_48;
    }
  }
  unint64_t v13 = v13 & 0xFFFFFFFF00FFFFFFLL | 0x1000000;
  ++v14;
LABEL_48:
  if (a2)
  {
    if (v14 >= 2)
    {
      int v25 = *(_DWORD *)(a1 + 56);
      if (v25)
      {
        if (v15 < v25) {
          *a2 = 0;
        }
      }
    }
  }
  if (a3
    && v14 >= 2
    && ([+[WiFiUserInteractionMonitor sharedInstance] isCarModeActive]|| (*(_DWORD *)(a1 + 2776) | 2) == 6))
  {
    *a3 = 1;
    if (a2) {
      *a2 = 0;
    }
  }
  -[WiFiUsageMonitor setTdLogic_fastTdState:forInterface:](+[WiFiUsageMonitor sharedInstance](WiFiUsageMonitor, "sharedInstance"), "setTdLogic_fastTdState:forInterface:", v14, v13, *(void *)(a1 + 40));
  if (v15 <= v16)
  {
    if (qword_10027DD68)
    {
      int v31 = "NO";
      unsigned int v32 = "YES";
      if (v14 <= 1) {
        uint64_t v33 = "NO";
      }
      else {
        uint64_t v33 = "YES";
      }
      if (a2 && *a2) {
        int v31 = "YES";
      }
      if (a3)
      {
        if (*a3) {
          uint64_t v34 = "YES";
        }
        else {
          uint64_t v34 = "NO";
        }
      }
      else
      {
        uint64_t v34 = "NO";
      }
      if ((v13 & 0x100) != 0) {
        BOOL v50 = "YES";
      }
      else {
        BOOL v50 = "NO";
      }
      double v51 = 0.0;
      double v52 = 0.0;
      if (DWORD1(v70[0])) {
        double v52 = (double)SLODWORD(v70[0]) / (double)SDWORD1(v70[0]) * 100.0;
      }
      uint64_t v53 = *(unsigned int *)(a1 + 2796);
      uint64_t v54 = *(unsigned int *)(a1 + 1100);
      uint64_t v55 = *(unsigned int *)(a1 + 1108);
      double v56 = (float)(*(float *)(a1 + 1104) * 100.0);
      if ((v13 & 0x10000) != 0) {
        uint64_t v57 = "YES";
      }
      else {
        uint64_t v57 = "NO";
      }
      if (HIDWORD(v70[1]) && SHIDWORD(v70[1]) > SLODWORD(v70[2])) {
        double v51 = (double)(HIDWORD(v70[1]) - LODWORD(v70[2])) / (double)SHIDWORD(v70[1]) * 100.0;
      }
      double v58 = (float)(*(float *)(a1 + 1248) * 100.0);
      if ((v13 & 0x1000000) != 0) {
        CFDictionaryRef v59 = "YES";
      }
      else {
        CFDictionaryRef v59 = "NO";
      }
      if (v13) {
        int v60 = "YES";
      }
      else {
        int v60 = "NO";
      }
      if (v8) {
        int v61 = "YES";
      }
      else {
        int v61 = "NO";
      }
      if (!v69) {
        unsigned int v32 = "NO";
      }
      objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: LastRSSI:%d FastDisconnect:%s WaitForRoam:%s UserWalkout:%s TxPerMet:%s [TxPer: %.1f%%, %d, %d, %d, (%d, %d, %.1f%%)] BeaconPerMet:%s [BcnPer: %.1f%% (%d, %d, %.1f%%)] FwTxPerMet:%s [%d, %d] TDRecommended:%s RoamSuppressed:%s aggressiveTD:%s", "__WiFiLQAMgrShouldPerformFastDisconnect", v53, v33, v31, v34, v50, *(void *)&v52, DWORD1(v70[0]), LODWORD(v70[0]), DWORD2(v70[0]), v54, v55, *(void *)&v56,
        v57,
        *(void *)&v51,
        HIDWORD(v70[1]),
        LODWORD(v70[2]),
        *(void *)&v58,
        v59,
        DWORD1(v70[1]),
        LODWORD(v70[1]),
        v60,
        v61,
        v32,
        v66,
        v67,
        v68);
    }
  }
  else if (qword_10027DD68)
  {
    uint64_t v27 = "NO";
    char v28 = "YES";
    if (v14 <= 1) {
      uint64_t v29 = "NO";
    }
    else {
      uint64_t v29 = "YES";
    }
    if (a2 && *a2) {
      uint64_t v27 = "YES";
    }
    if (a3)
    {
      if (*a3) {
        unsigned int v30 = "YES";
      }
      else {
        unsigned int v30 = "NO";
      }
    }
    else
    {
      unsigned int v30 = "NO";
    }
    if ((v13 & 0x100) != 0) {
      uint64_t v35 = "YES";
    }
    else {
      uint64_t v35 = "NO";
    }
    double v36 = 0.0;
    double v37 = 0.0;
    if (DWORD1(v70[0])) {
      double v37 = (double)SLODWORD(v70[0]) / (double)SDWORD1(v70[0]) * 100.0;
    }
    uint64_t v38 = *(unsigned int *)(a1 + 2796);
    uint64_t v39 = *(unsigned int *)(a1 + 936);
    uint64_t v40 = *(unsigned int *)(a1 + 944);
    double v41 = (float)(*(float *)(a1 + 940) * 100.0);
    uint64_t v42 = *(unsigned int *)(a1 + 952);
    uint64_t v43 = *(unsigned int *)(a1 + 960);
    double v44 = (float)(*(float *)(a1 + 956) * 100.0);
    if ((v13 & 0x10000) != 0) {
      uint64_t v45 = "YES";
    }
    else {
      uint64_t v45 = "NO";
    }
    if (HIDWORD(v70[1]) && SHIDWORD(v70[1]) > SLODWORD(v70[2])) {
      double v36 = (double)(HIDWORD(v70[1]) - LODWORD(v70[2])) / (double)SHIDWORD(v70[1]) * 100.0;
    }
    double v46 = (float)(*(float *)(a1 + 1084) * 100.0);
    if ((v13 & 0x1000000) != 0) {
      uint64_t v47 = "YES";
    }
    else {
      uint64_t v47 = "NO";
    }
    if (v13) {
      uint64_t v48 = "YES";
    }
    else {
      uint64_t v48 = "NO";
    }
    if (v8) {
      BOOL v49 = "YES";
    }
    else {
      BOOL v49 = "NO";
    }
    if (!v69) {
      char v28 = "NO";
    }
    objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: LastRSSI:%d FastDisconnect:%s WaitForRoam:%s UserWalkout:%s TxPerMet:%s [TxPer: %.1f%%, %d, %d, %d, (%d, %d, %.1f%%), (%d, %d, %.1f%%)] BeaconPerMet:%s [BcnPer: %.1f%% (%d, %d, %.1f%%)] FwTxPerMet:%s [%d, %d] TDRecommended:%s RoamSuppressed:%s aggressiveTD:%s", "__WiFiLQAMgrShouldPerformFastDisconnect", v38, v29, v27, v30, v35, *(void *)&v37, DWORD1(v70[0]), LODWORD(v70[0]), DWORD2(v70[0]), v39, v40, *(void *)&v41,
      v42,
      v43,
      *(void *)&v44,
      v45,
      *(void *)&v36,
      HIDWORD(v70[1]),
      LODWORD(v70[2]),
      *(void *)&v46,
      v47,
      DWORD1(v70[1]),
      LODWORD(v70[1]),
      v48,
      v49,
      v28);
  }
  return v14 > 1;
}

uint64_t sub_100040C28(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  SInt32 error = -1431655766;
  if (*(void *)(a1 + 1288))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"__WiFiLQAMgrCheckUsrInput: Notification already pending. Ignoring it"];
    }
    BOOL v3 = 0;
    goto LABEL_6;
  }
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  BOOL v3 = Mutable;
  if (!Mutable)
  {
LABEL_6:
    uint64_t v4 = 1;
    goto LABEL_16;
  }
  CFDictionarySetValue(Mutable, kCFUserNotificationAlertHeaderKey, @"WiFi Trigger Disconnect");
  CFDictionarySetValue(v3, kCFUserNotificationDefaultButtonTitleKey, @"Accept");
  CFDictionarySetValue(v3, kCFUserNotificationAlternateButtonTitleKey, @"Tap To Radar");
  if (SBUserNotificationDismissOnLock)
  {
    CFDictionarySetValue(v3, SBUserNotificationDismissOnLock, kCFBooleanTrue);
    CFDictionarySetValue(v3, SBUserNotificationAlertMessageDelimiterKey, &stru_100248240);
  }
  int v6 = CFUserNotificationCreate(kCFAllocatorDefault, 10.0, 0, &error, v3);
  *(void *)(a1 + 1288) = v6;
  uint64_t v4 = 1;
  if (!error && v6)
  {
    CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v6, (CFUserNotificationCallBack)sub_100041020, 0);
    *(void *)(a1 + 1272) = RunLoopSource;
    if (!RunLoopSource) {
      goto LABEL_17;
    }
    Main = CFRunLoopGetMain();
    CFRunLoopAddSource(Main, *(CFRunLoopSourceRef *)(a1 + 1272), kCFRunLoopDefaultMode);
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:2 message:@"__WiFiLQAMgrCheckUsrInput: Notification created"];
    }
    uint64_t v4 = 0;
  }
LABEL_16:
  if (!*(void *)(a1 + 1272))
  {
LABEL_17:
    char v10 = *(const void **)(a1 + 1288);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 1288) = 0;
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

uint64_t sub_100040E54(uint64_t a1)
{
  if (!a1) {
    return 255;
  }
  uint64_t result = *(unsigned __int8 *)(a1 + 2752);
  if (result >= 0xA)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Invalid curRecord %d", "__WiFiLQAMgrGetCurrentLQAMetricsRecordIdx", *(unsigned __int8 *)(a1 + 2752));
    }
    goto LABEL_10;
  }
  if (!*(unsigned char *)(a1 + 2753))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: curRecord %d is not busy", "__WiFiLQAMgrGetCurrentLQAMetricsRecordIdx", *(unsigned __int8 *)(a1 + 2752));
    }
LABEL_10:
    return 255;
  }
  return result;
}

void sub_100040F1C(unsigned char *a1, int a2)
{
  if (a1)
  {
    if (a1[2753])
    {
      if (a2 != 255)
      {
        a1[2752] = a1[2752] + 1 - 10 * ((6554 * (a1[2752] + 1)) >> 16);
        ++a1[1304];
        a1[2753] = 0;
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:2, @"%s: recordIdx invalid", @"__WiFiLQAMgrFinishCurLQAMetricsRecord"];
      }
      uint64_t v4 = v5;
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, "%s: curRecord %d is not busy", "__WiFiLQAMgrFinishCurLQAMetricsRecord", a1[2752]];
      }
      uint64_t v4 = v3;
    }
  }
}

void sub_100041020(uint64_t a1, uint64_t a2)
{
  if (qword_10027D5E8)
  {
    int v2 = *(NSObject **)(qword_10027D5E8 + 1280);
    if (v2)
    {
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472;
      v3[2] = sub_1000410A0;
      v3[3] = &unk_10023F048;
      v3[4] = qword_10027D5E8;
      v3[5] = a2;
      dispatch_async(v2, v3);
    }
  }
}

void sub_1000410A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = sub_100040E54(v2);
  if (v3 != 255)
  {
    unsigned int v4 = v3;
    sub_100040F1C(*(unsigned char **)(a1 + 32), v3);
    uint64_t v5 = v2 + 144 * v4;
    int v6 = *(unsigned __int8 *)(v5 + 1349);
    int v7 = *(unsigned __int8 *)(v5 + 1352);
    int v8 = *(unsigned __int8 *)(v5 + 1353);
    int v9 = *(unsigned __int8 *)(v5 + 1354);
    int v10 = *(unsigned __int8 *)(v5 + 1355);
    int v11 = *(unsigned __int8 *)(v5 + 1350);
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v13 = *(void *)(a1 + 32);
    double v14 = 0.0;
    if (*(_DWORD *)(v13 + 2760) == 1) {
      double v14 = Current - *(double *)(v13 + 2768);
    }
    if (qword_10027DD68)
    {
      uint64_t v16 = v2 + 144 * v4;
      uint64_t v17 = v6 | (2 * v7) | (4 * v8) | (8 * v9) | (16 * v10) | (v11 << 6);
      float v18 = v15;
      objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: TrgDiscStatus %u [Rssi %d TxFrms %ld TxFail %ld TxRet %ld fwFrms %ld fwFail %ld fwRtry %ld RxFrms %ld BcnSch %ld BcnRx %ld PrSent %ld PrFail %ld Awd %ld initPr %ld UnGw %f FgApp %ld SympScore %ld UsrInput %ld]", "__WiFiLQAMgrTrgDiscUsrNotificationCallback_block_invoke", v17, *(char *)(v16 + 1348), *(unsigned int *)(v5 + 1312), *(unsigned int *)(v16 + 1316), *(unsigned int *)(v16 + 1320), *(unsigned int *)(v16 + 1332), *(unsigned int *)(v16 + 1336), *(unsigned int *)(v16 + 1340), *(unsigned int *)(v16 + 1344), *(unsigned int *)(v16 + 1324), *(unsigned int *)(v16 + 1328), 0, 0,
        *(unsigned __int8 *)(v16 + 1364),
        0,
        *(void *)&v14,
        *(unsigned int *)(v16 + 1356),
        *(unsigned int *)(v16 + 1360),
        *(unsigned __int8 *)(v16 + 1351));
      int v15 = v18;
    }
  }
  uint64_t v19 = *(void *)(a1 + 32);
  if (*(void *)(v19 + 1288))
  {
    if (*(_DWORD *)(v19 + 20))
    {
      if (*(unsigned char *)(v19 + 644))
      {
        uint64_t v20 = *(void *)(a1 + 40) & 3;
        if (v20 == 1)
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: UserCancelled Trigger Disconnect", "__WiFiLQAMgrTrgDiscUsrNotificationCallback_block_invoke")];
          }
          *(unsigned char *)(*(void *)(a1 + 32) + 1296) = 1;
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: User Response %d", "__WiFiLQAMgrTrgDiscUsrNotificationCallback_block_invoke", *(_DWORD *)(a1 + 40) & 3);
          }
          uint64_t v22 = *(void *)(a1 + 32);
          *(_DWORD *)(v22 + 2828) = 11;
          sub_1000366F0(v22, 0);
        }
        goto LABEL_17;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"__WiFiLQAMgrTrgDiscUsrNotificationCallback_block_invoke: AskTo TrigDisc is FALSE"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"__WiFiLQAMgrTrgDiscUsrNotificationCallback_block_invoke: TDUsr Callback in UnassociatedState"];
      }
    }
  }
LABEL_17:
  uint64_t v23 = *(void *)(a1 + 32);
  if (*(void *)(v23 + 1272))
  {
    Main = CFRunLoopGetMain();
    CFRunLoopRemoveSource(Main, *(CFRunLoopSourceRef *)(*(void *)(a1 + 32) + 1272), kCFRunLoopDefaultMode);
    uint64_t v23 = *(void *)(a1 + 32);
  }
  int v25 = *(const void **)(v23 + 1288);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(*(void *)(a1 + 32) + 1288) = 0;
    uint64_t v23 = *(void *)(a1 + 32);
  }
  CFNumberRef v26 = *(const void **)(v23 + 1272);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(*(void *)(a1 + 32) + 1272) = 0;
    uint64_t v23 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v23 + 161) = 0;
}

void sub_1000413A0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 640))
  {
    int v2 = *(_DWORD *)(a1 + 20);
    if (v2)
    {
      if (v2 == 1)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: ActProbe Callback in GoodLinkState" args:("__WiFiLQAMgrDoActiveProbe", nil)];
        }
      }
      else
      {
        if (v2 != 3)
        {
          if (qword_10027DD68)
          {
            uint64_t v4 = *(int *)(a1 + 20);
            if (v4 > 4) {
              CFStringRef v5 = @"Bogus";
            }
            else {
              CFStringRef v5 = *(&off_10023F260 + v4);
            }
            [(id)qword_10027DD68 WFLog:2, "%s: ActProbeTimer Credits: %d lqaState: %@", "__WiFiLQAMgrDoActiveProbe", *(unsigned int *)(a1 + 488), v5 message];
          }
          int v6 = *(__CFDictionary **)(a1 + 376);
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          double v8 = *(double *)(a1 + 368);
          double v9 = Current - v8;
          if (v8 == 0.0) {
            double v10 = 0.0;
          }
          else {
            double v10 = v9;
          }
          if (*(unsigned char *)(a1 + 392)) {
            double v11 = 3.0;
          }
          else {
            double v11 = 10.0;
          }
          if (*(_DWORD *)(a1 + 20) > 2u)
          {
            uint64_t v13 = *(NSObject **)(a1 + 544);
            dispatch_time_t v14 = -1;
LABEL_32:
            dispatch_source_set_timer(v13, v14, 0xFFFFFFFFFFFFFFFFLL, 0);
            return;
          }
          if (*(unsigned char *)(a1 + 356))
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: ActProbe ongoing for %f many seconds", "__WiFiLQAMgrDoActiveProbe", *(void *)&v10);
            }
            goto LABEL_31;
          }
          if (v10 != 0.0 && v11 > v10)
          {
LABEL_31:
            uint64_t v23 = *(NSObject **)(a1 + 336);
            dispatch_time_t v14 = dispatch_time(0, (uint64_t)(v11 * 1000000000.0));
            uint64_t v13 = v23;
            goto LABEL_32;
          }
          CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          uint64_t valuePtr = *(unsigned int *)(a1 + 344);
          CFNumberRef v17 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
          CFNumberRef v18 = v17;
          if (valuePtr && v17)
          {
            uint64_t v19 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
            CFArrayAppendValue(v19, v18);
            CFDictionarySetValue(Mutable, @"kWiFiLqaMgrProbeSize", v19);
            *(_DWORD *)(a1 + 20) = 3;
            if (qword_10027DD68)
            {
              uint64_t v21 = *(int *)(a1 + 20);
              if (v21 > 4) {
                CFStringRef v22 = @"Bogus";
              }
              else {
                CFStringRef v22 = *(&off_10023F260 + v21);
              }
              [(id)qword_10027DD68 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v22 message];
            }
            if (sub_100036E18(a1, Mutable, v6, (uint64_t)sub_100041904, a1))
            {
              *(_DWORD *)(a1 + 20) = 2;
              if (qword_10027DD68)
              {
                uint64_t v25 = *(int *)(a1 + 20);
                if (v25 > 4) {
                  CFStringRef v26 = @"Bogus";
                }
                else {
                  CFStringRef v26 = *(&off_10023F260 + v25);
                }
                [(id)qword_10027DD68 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v26 message];
              }
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:4, "%s: ActProbeEnqueue Failed, reverting to BadLinkState", "__WiFiLQAMgrDoActiveProbe"];
              }
              unsigned int v30 = *(NSObject **)(a1 + 336);
              dispatch_time_t v31 = dispatch_time(0, (uint64_t)(v11 * 1000000000.0));
              dispatch_source_set_timer(v30, v31, 0xFFFFFFFFFFFFFFFFLL, 0);
              if (!Mutable) {
                goto LABEL_54;
              }
            }
            else
            {
              if (qword_10027DD68)
              {
                if (*(unsigned char *)(a1 + 392)) {
                  char v28 = " for auto leave evaluation.";
                }
                else {
                  char v28 = ".";
                }
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: ActProbeEnqueue Enqueued%s", "__WiFiLQAMgrDoActiveProbe", v28);
              }
              *(unsigned char *)(a1 + 356) = 1;
              *(_DWORD *)(a1 + 488) = 0;
              *(CFAbsoluteTime *)(a1 + 368) = CFAbsoluteTimeGetCurrent();
              *(_OWORD *)(a1 + 456) = 0u;
              *(_OWORD *)(a1 + 472) = 0u;
              if (!Mutable) {
                goto LABEL_54;
              }
            }
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: Null probe size or Null probeSizeRef" : @"__WiFiLQAMgrDoActiveProbe"];
            }
            uint64_t v19 = 0;
            if (!Mutable) {
              goto LABEL_54;
            }
          }
          CFRelease(Mutable);
LABEL_54:
          if (v18) {
            CFRelease(v18);
          }
          if (v19) {
            CFRelease(v19);
          }
          return;
        }
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:4 message:@"__WiFiLQAMgrDoActiveProbe: ActProbe ongoing"];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: ActProbe Callback in UnassociatedState", @"__WiFiLQAMgrDoActiveProbe"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: LQA mgr is disabled" arguments:((id)qword_10027DD68), @"__WiFiLQAMgrDoActiveProbe"];
    }
  }
}

void sub_100041904(int a1, CFArrayRef theArray, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = 0;
  uint64_t valuePtr = 0;
  if (a4 && *(unsigned char *)(a4 + 640))
  {
    *(unsigned char *)(a4 + 356) = 0;
    ++*(void *)(a4 + 360);
    if (a3)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, "%s: Active Probe gave an error %ld", "__WiFiLQAMgrActiveProbeResultCallBack", a3];
      }
    }
    else if (theArray)
    {
      if (CFArrayGetCount(theArray))
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrNumProbesSent");
        if (Value) {
          CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
        }
        CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrNumProbesFail");
        if (v9) {
          CFNumberGetValue(v9, kCFNumberCFIndexType, &v25);
        }
        if (*(unsigned char *)(a4 + 392)) {
          int64_t v10 = 3000000000;
        }
        else {
          int64_t v10 = 10000000000;
        }
        if (*(_DWORD *)(a4 + 20) != 3)
        {
          if (qword_10027DD68)
          {
            uint64_t v13 = *(int *)(a4 + 20);
            if (v13 > 4) {
              CFStringRef v14 = @"Bogus";
            }
            else {
              CFStringRef v14 = *(&off_10023F260 + v13);
            }
            [(id)qword_10027DD68 WFLog:4, "%s: Called from lqaState: %@", "__WiFiLQAMgrActiveProbeResultCallBack", v14 message];
          }
          goto LABEL_31;
        }
        uint64_t v11 = valuePtr;
        if (valuePtr)
        {
          *(_DWORD *)(a4 + 2828) = 9;
          if (sub_100038478(a4, v11, v25))
          {
            sub_1000366F0(a4, 0);
            return;
          }
          uint64_t v19 = *(NSObject **)(a4 + 336);
          dispatch_time_t v20 = dispatch_time(0, v10);
          dispatch_source_set_timer(v19, v20, 0xFFFFFFFFFFFFFFFFLL, 0);
          *(_DWORD *)(a4 + 20) = 2;
          CFNumberRef v18 = (void *)qword_10027DD68;
          if (!qword_10027DD68) {
            goto LABEL_31;
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4, "%s: LQA mgr No Probes sent\n", "__WiFiLQAMgrActiveProbeResultCallBack"];
          }
          uint64_t v16 = *(NSObject **)(a4 + 336);
          dispatch_time_t v17 = dispatch_time(0, v10);
          dispatch_source_set_timer(v16, v17, 0xFFFFFFFFFFFFFFFFLL, 0);
          *(_DWORD *)(a4 + 20) = 2;
          CFNumberRef v18 = (void *)qword_10027DD68;
          if (!qword_10027DD68) {
            goto LABEL_31;
          }
        }
        uint64_t v21 = *(int *)(a4 + 20);
        if (v21 > 4) {
          CFStringRef v22 = @"Bogus";
        }
        else {
          CFStringRef v22 = *(&off_10023F260 + v21);
        }
        [v18 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v22 message];
LABEL_31:
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: zero elements in probeResultRef" : @"__WiFiLQAMgrActiveProbeResultCallBack" : v24];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, "%s: probeResultRef is null", "__WiFiLQAMgrActiveProbeResultCallBack", v24];
      }
    }
  }
}

void sub_100041C34(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
    || (uint64_t v2 = *(void *)(a1 + 40),
        ++*(_DWORD *)(v2 + 328),
        CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 320), *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24)), !*(void *)(*(void *)(*(void *)(v1 + 32) + 8) + 24)))
  {
    int v3 = *(const void **)(*(void *)(v1 + 40) + 312);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(*(void *)(v1 + 40) + 312) = 0;
    }
  }
  uint64_t v4 = *(void *)(v1 + 40);
  if (!*(void *)(v4 + 312) && CFArrayGetCount(*(CFArrayRef *)(v4 + 320)))
  {
    *(void *)(*(void *)(v1 + 40) + 312) = CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(v1 + 40) + 320), 0);
    CFRetain(*(CFTypeRef *)(*(void *)(v1 + 40) + 312));
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(*(void *)(v1 + 40) + 320), 0);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    int v7 = *(void **)(v1 + 40);
    *((CFAbsoluteTime *)v7 + 38) = Current;
    uint64_t v66 = 0;
    uint64_t valuePtr = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    CFTypeRef cf = 0;
    uint64_t v63 = 1;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v59 = 0;
    CFDictionaryRef v8 = (const __CFDictionary *)*((void *)v7 + 39);
    if (v8)
    {
      CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(*((CFDictionaryRef *)v7 + 39), @"kWiFiLqaMgrNumProbes");
      CFArrayRef v10 = (const __CFArray *)CFDictionaryGetValue(v8, @"kWiFiLqaMgrProbeSize");
      CFBooleanRef value = (void *)CFDictionaryGetValue(v8, @"kWiFiLqaMgrProbeTimeoutSecs");
      uint64_t v11 = CFDictionaryGetValue(v8, @"kWiFiLqaMgrIpv4Addr");
      uint64_t v12 = (void *)CFDictionaryGetValue(v8, @"kWiFiLqaMgrProbeTrafficClass");
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (Mutable)
      {
        CFStringRef v14 = Mutable;
        if (v9 && v10 && CFArrayGetCount(v10) && value && v11)
        {
          double v56 = v12;
          CFNumberGetValue(v9, kCFNumberCFIndexType, &valuePtr);
          CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (v15)
          {
            uint64_t v16 = v15;
            CFNumberRef v17 = CFNumberCreate(0, kCFNumberCFIndexType, &v63);
            if (v17)
            {
              CFArrayRef theArray = v14;
              uint64_t context = v7;
              uint64_t v52 = v1;
              CFNumberRef v50 = v17;
              CFDictionaryAddValue(v16, @"kCFNetDiagnosticPingOptionPacketCount", v17);
              CFDictionaryAddValue(v16, @"kCFNetDiagnosticPingOptionTimeout", value);
              if (v56) {
                CFDictionaryAddValue(v16, @"kCFNetDiagnosticPingOptionTrafficClass", v56);
              }
              uint64_t v57 = 0;
              CFIndex v18 = 0;
              CFArrayRef v54 = v10;
              do
              {
                if (v18 >= CFArrayGetCount(v10)) {
                  break;
                }
                CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v10, v18);
                CFDictionarySetValue(v16, @"kCFNetDiagnosticPingOptionDataLength", ValueAtIndex);
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:2, "Triggered probe to %@ with %@ bytes and %ld tries with timeout as %@ secs", v11, ValueAtIndex, valuePtr, value message];
                }
                double v58 = (void *)ValueAtIndex;
                uint64_t v65 = 0;
                uint64_t v66 = 0;
                double v21 = 0.0;
                if (valuePtr < 1)
                {
                  uint64_t v33 = 0;
                  double v25 = 0.0;
                  double v24 = 0.0;
                  double v23 = 0.0;
                }
                else
                {
                  uint64_t v22 = 0;
                  double v23 = 0.0;
                  double v24 = 0.0;
                  double v25 = 0.0;
                  while (1)
                  {
                    CFBooleanRef v26 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"kWiFiLqaMgrIgnoreProbe");
                    if (v26)
                    {
                      if (CFBooleanGetValue(v26)) {
                        break;
                      }
                    }
                    double v27 = CFAbsoluteTimeGetCurrent();
                    int v28 = CFNetDiagnosticPingWithOptions();
                    double v29 = CFAbsoluteTimeGetCurrent();
                    if (v28)
                    {
                      double v30 = v29 - v27;
                      if (v25 > v30) {
                        double v31 = v30;
                      }
                      else {
                        double v31 = v25;
                      }
                      if (v25 == 0.0) {
                        double v25 = v30;
                      }
                      else {
                        double v25 = v31;
                      }
                      double v32 = v30;
                      if (v24 != 0.0)
                      {
                        double v32 = v24;
                        if (v24 < v30) {
                          double v32 = v30;
                        }
                      }
                      double v23 = v23 + v30;
                      double v24 = v32;
                    }
                    if (cf)
                    {
                      CFRelease(cf);
                      CFTypeRef cf = 0;
                    }
                    uint64_t v33 = ++v66;
                    if (!v28) {
                      ++v65;
                    }
                    if (++v22 >= valuePtr) {
                      goto LABEL_48;
                    }
                  }
                  uint64_t v64 = 2;
                  uint64_t v33 = v66;
                  uint64_t v57 = 2;
                }
LABEL_48:
                uint64_t v34 = v33 - v65;
                if (v34) {
                  double v21 = v23 / (double)v34;
                }
                CFMutableDictionaryRef v35 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                if (!v35)
                {
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: probeResult is null", "__WiFiLQAMgrDoDiagnosticProbe")
                  }
                  goto LABEL_95;
                }
                double v36 = v35;
                CFNumberRef v37 = CFNumberCreate(0, kCFNumberCFIndexType, &v66);
                CFNumberRef v38 = CFNumberCreate(0, kCFNumberCFIndexType, &v65);
                uint64_t v61 = (uint64_t)(v25 * 1000.0);
                uint64_t v59 = (uint64_t)(v21 * 1000.0);
                uint64_t v60 = (uint64_t)(v24 * 1000.0);
                CFNumberRef v39 = CFNumberCreate(0, kCFNumberCFIndexType, &v59);
                CFNumberRef v40 = CFNumberCreate(0, kCFNumberCFIndexType, &v61);
                CFNumberRef v41 = CFNumberCreate(0, kCFNumberCFIndexType, &v60);
                if (v37) {
                  CFDictionarySetValue(v36, @"kWiFiLqaMgrNumProbesSent", v37);
                }
                if (v38) {
                  CFDictionarySetValue(v36, @"kWiFiLqaMgrNumProbesFail", v38);
                }
                if (v39) {
                  CFDictionarySetValue(v36, @"kWiFiLqaMgrAverageRTT", v39);
                }
                if (v40) {
                  CFDictionarySetValue(v36, @"kWiFiLqaMgrMinimumRTT", v40);
                }
                if (v41) {
                  CFDictionarySetValue(v36, @"kWiFiLqaMgrMaximumRTT", v41);
                }
                if (v56) {
                  CFDictionaryAddValue(v36, @"kWiFiLqaMgrProbeTrafficClass", v56);
                }
                if (v58) {
                  CFDictionaryAddValue(v36, @"kWiFiLqaMgrProbeSize", v58);
                }
                CFArrayAppendValue(theArray, v36);
                if (v37) {
                  CFRelease(v37);
                }
                if (v38) {
                  CFRelease(v38);
                }
                if (v39) {
                  CFRelease(v39);
                }
                CFArrayRef v10 = v54;
                if (v40) {
                  CFRelease(v40);
                }
                if (v41) {
                  CFRelease(v41);
                }
                CFRelease(v36);
                ++v18;
              }
              while (v57 != 2);
              CFStringRef v14 = theArray;
              CFDictionaryAddValue(v8, @"kWiFiLqaMgrProbeStats", theArray);
              CFNumberRef v42 = CFNumberCreate(0, kCFNumberCFIndexType, &v64);
              uint64_t v1 = v52;
              if (v42)
              {
                CFNumberRef v43 = v42;
                CFDictionaryAddValue(v8, @"kWiFiLqaMgrError", v42);
                int v7 = context;
                goto LABEL_78;
              }
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: errRef is null", "__WiFiLQAMgrDoDiagnosticProbe")
              }
LABEL_95:
              CFNumberRef v43 = 0;
              int v7 = context;
              uint64_t v1 = v52;
              CFStringRef v14 = theArray;
LABEL_78:
              CFNumberRef v44 = v50;
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4, @"%s: numProbes is null", @"__WiFiLQAMgrDoDiagnosticProbe"];
              }
              CFNumberRef v44 = 0;
              CFNumberRef v43 = 0;
            }
            goto LABEL_83;
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: Probe Options is null" args:("__WiFiLQAMgrDoDiagnosticProbe")];
          }
        }
        else
        {
          uint64_t v64 = 1;
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: Probe failed due to missing params" : @"__WiFiLQAMgrDoDiagnosticProbe"];
          }
        }
LABEL_82:
        CFNumberRef v44 = 0;
        CFNumberRef v43 = 0;
        uint64_t v16 = 0;
LABEL_83:
        double v46 = *((void *)v7 + 160);
        if (v46) {
          dispatch_async_f(v46, v7, (dispatch_function_t)sub_100042498);
        }
        if (v16) {
          CFRelease(v16);
        }
        if (v44) {
          CFRelease(v44);
        }
        if (v43) {
          CFRelease(v43);
        }
        if (v14) {
          CFRelease(v14);
        }
        goto LABEL_6;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: resultArrRef is null" : @"__WiFiLQAMgrDoDiagnosticProbe"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: Probe Context is null" arguments:("__WiFiLQAMgrDoDiagnosticProbe")];
      }
    }
    CFStringRef v14 = 0;
    goto LABEL_82;
  }
LABEL_6:
  CFStringRef v5 = *(const void **)(*(void *)(*(void *)(v1 + 32) + 8) + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = 0;
  }
  CFRelease(*(CFTypeRef *)(v1 + 40));
}

void sub_100042498(uint64_t a1)
{
  uint64_t v33 = 0;
  uint64_t v34 = &v33;
  uint64_t v35 = 0x2020000000;
  uint64_t v36 = 0;
  double v32 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t valuePtr = 0;
  double Current = CFAbsoluteTimeGetCurrent();
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: LQAMgr is NULL", "__WiFiLQAMgrDiagProbeResultCallBack"];
    }
    goto LABEL_45;
  }
  double v2 = Current;
  int v3 = *(NSObject **)(a1 + 296);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000428BC;
  block[3] = &unk_10023F220;
  void block[4] = &v33;
  void block[5] = a1;
  dispatch_sync(v3, block);
  CFDictionaryRef v4 = (const __CFDictionary *)v34[3];
  if (!v4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: CurrentProbe is NULL" args:("__WiFiLQAMgrDiagProbeResultCallBack")];
    }
    goto LABEL_45;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"kWiFiLqaMgrError");
  if (Value) {
    CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
  }
  double v6 = *(double *)(a1 + 304);
  if (v6 == 0.0) {
    double v7 = 0.0;
  }
  else {
    double v7 = v2 - v6;
  }
  CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v34[3], @"kWiFiLqaMgrProbeStats");
  if (!v8)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: probeResultsRef is NULL", @"__WiFiLQAMgrDiagProbeResultCallBack"];
    }
LABEL_45:
    goto LABEL_36;
  }
  if (qword_10027DD68)
  {
    CFArrayRef v10 = "";
    if (!valuePtr) {
      CFArrayRef v10 = "no ";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 2, "-------- DiagProbe finished in %f secs with %serror (%ld) ---------", *(void *)&v7, v10, valuePtr);
  }
  for (CFIndex i = 0; i < CFArrayGetCount(v8); ++i)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, i);
    CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrNumProbesSent");
    if (v13) {
      CFNumberGetValue(v13, kCFNumberCFIndexType, &v30);
    }
    CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrNumProbesFail");
    if (v14) {
      CFNumberGetValue(v14, kCFNumberCFIndexType, &v29);
    }
    CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrAverageRTT");
    if (v15) {
      CFNumberGetValue(v15, kCFNumberCFIndexType, &v28);
    }
    CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrMinimumRTT");
    if (v16) {
      CFNumberGetValue(v16, kCFNumberCFIndexType, &v27);
    }
    CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrMaximumRTT");
    if (v17) {
      CFNumberGetValue(v17, kCFNumberCFIndexType, &v26);
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 2, "Probes Sent %ld, Fail %ld Error %ld avgRtt %ld minRtt %ld maxRtt %ld", v30, v29, valuePtr, v28, v27, v26);
    }
  }
  CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v34[3], @"kWiFiLqaMgrDiagCallback");
  if (v19) {
    CFNumberGetValue(v19, kCFNumberCFIndexType, &v32);
  }
  CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v34[3], @"kWiFiLqaMgrDiagCbContext");
  if (v20) {
    CFNumberGetValue(v20, kCFNumberCFIndexType, &v31);
  }
  if (v32 && valuePtr != 2)
  {
    double v21 = CFDictionaryGetValue((CFDictionaryRef)v34[3], @"kWiFiLqaMgrIpv4Addr");
    v32(v21, v8, valuePtr, v31);
  }
  sub_10003BC98(a1, 0);
LABEL_36:
  uint64_t v22 = (const void *)v34[3];
  if (v22)
  {
    CFRelease(v22);
    v34[3] = 0;
  }
  _Block_object_dispose(&v33, 8);
}

void sub_10004289C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1000428BC(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(*(void *)(a1 + 40) + 312);
  CFTypeRef result = *(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_1000428E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  pthread_mutex_lock(&stru_10027CB90);
  int v8 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 2984);
  if (v8)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s LQA manager is in closing\n", "__WiFiLQAMgrTriggetDisconnectSymptomsCallback_block_invoke");
    }
    CFArrayRef v10 = v9;
    goto LABEL_5;
  }
  if (qword_10027DD68)
  {
    uint64_t v12 = "failure";
    if (!a2) {
      uint64_t v12 = "success";
    }
    [((id)qword_10027DD68) WFLog:2, @"%s Symptom Fetch Result %s", @"__WiFiLQAMgrTriggetDisconnectSymptomsCallback_block_invoke", v12];
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 508) = 0;
  CFNumberRef v13 = +[WiFiUsageMonitor sharedInstance];
  if (!a2)
  {
    if (a3)
    {
      CFNumberRef v14 = v13;
      CFNumberRef v15 = (CFAbsoluteTime *)(a4 + 48);
      do
      {
        CFDateRef v16 = CFDateCreate(0, *(v15 - 3));
        CFLocaleRef v17 = CFLocaleCreate(0, @"en_US");
        CFIndex v18 = CFDateFormatterCreate(0, v17, kCFDateFormatterShortStyle, kCFDateFormatterShortStyle);
        CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(0, v18, v16);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s Symptoms Event (id/class/time/reason/code): %lld %s %@ %s %lld", "__WiFiLQAMgrTriggetDisconnectSymptomsCallback_block_invoke", *((void *)v15 - 5), *((void *)v15 - 4), StringWithDate, *((void *)v15 - 1), *((void *)v15 - 2) message];
        }
        if (*(void *)v15)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s Symptoms Event Details: %@", "__WiFiLQAMgrTriggetDisconnectSymptomsCallback_block_invoke", *(void *)v15 message];
          }
        }
        switch(*((void *)v15 - 2))
        {
          case 1:
            uint64_t v22 = *(void *)(a1 + 32);
            ++*(_DWORD *)(v22 + 472);
            *(_DWORD *)(v22 + 2828) = 4;
            char v23 = 1;
            uint64_t v24 = 4;
            break;
          case 2:
            uint64_t v22 = *(void *)(a1 + 32);
            *(_DWORD *)(v22 + 2828) = 2;
            char v23 = 1;
            uint64_t v24 = 2;
            break;
          case 3:
            uint64_t v22 = *(void *)(a1 + 32);
            ++*(_DWORD *)(v22 + 456);
            char v23 = 1;
            *(unsigned char *)(v22 + 508) = 1;
            *(_DWORD *)(v22 + 2828) = 3;
            uint64_t v24 = 1;
            break;
          case 4:
            uint64_t v22 = *(void *)(a1 + 32);
            ++*(_DWORD *)(v22 + 476);
            *(_DWORD *)(v22 + 2828) = 5;
            char v23 = 1;
            uint64_t v24 = 5;
            break;
          case 7:
            uint64_t v22 = *(void *)(a1 + 32);
            ++*(_DWORD *)(v22 + 484);
            *(_DWORD *)(v22 + 2828) = 6;
            char v23 = 1;
            uint64_t v24 = 3;
            break;
          default:
            char v23 = 0;
            uint64_t v24 = 0;
            uint64_t v22 = *(void *)(a1 + 32);
            ++*(_DWORD *)(v22 + 480);
            break;
        }
        unsigned int v25 = sub_100040E54(v22);
        if (v25 != 255) {
          *(unsigned char *)(*(void *)(a1 + 32) + 144 * v25 + 1364) = *((void *)v15 - 2);
        }
        char v26 = v23 ^ 1;
        if (!v14) {
          char v26 = 1;
        }
        if ((v26 & 1) == 0) {
          [(WiFiUsageMonitor *)v14 addFaultEvent:v24 forInterface:*(void *)(*(void *)(a1 + 32) + 40)];
        }
        CFRelease(v16);
        CFRelease(v17);
        CFRelease(v18);
        CFRelease(StringWithDate);
        v15 += 7;
        --a3;
      }
      while (a3);
    }
    uint64_t v27 = *(void *)(a1 + 32);
    if (!*(_DWORD *)(v27 + 16))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:2, @"%s: Ignore SymptomFmwk Event in MacStatsBased Mode", @"__WiFiLQAMgrTriggetDisconnectSymptomsCallback_block_invoke"];
      }
      goto LABEL_58;
    }
    int v28 = *(_DWORD *)(v27 + 20);
    switch(v28)
    {
      case 1:
        uint64_t v31 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_58;
        }
        double v32 = "%s: Ignore SymptomFmwk Event in GoodLinkState";
        break;
      case 0:
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: SymptomFmwk Event in UnassociatedState", @"__WiFiLQAMgrTriggetDisconnectSymptomsCallback_block_invoke"];
        }
        goto LABEL_58;
      case 4:
        uint64_t v31 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_58;
        }
        double v32 = "%s: Ignore SymptomFmwk Event in RoamwaitState";
        break;
      default:
        if (*(unsigned char *)(v27 + 508))
        {
          if (!*(unsigned char *)(v27 + 645) || !*(unsigned char *)(v27 + 646))
          {
            uint64_t v29 = *(NSObject **)(v27 + 1280);
            if (v29) {
              dispatch_async_f(v29, (void *)v27, (dispatch_function_t)sub_100042DF8);
            }
            goto LABEL_6;
          }
          uint64_t v31 = (void *)qword_10027DD68;
          if (!qword_10027DD68) {
            goto LABEL_58;
          }
          double v32 = "%s: Ignore SymptomFmwk Event when WiFi-Assist enabled ";
          break;
        }
        uint64_t v31 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          double v32 = "%s: Ignore SymptomFmwk Event ";
          break;
        }
LABEL_58:
        CFArrayRef v10 = v30;
LABEL_5:
LABEL_6:
        pthread_mutex_unlock(&stru_10027CB90);
        uint64_t v11 = *(const void **)(a1 + 32);
        CFRelease(v11);
        return;
    }
    [v31 WFLog:3 message:v32 "__WiFiLQAMgrTriggetDisconnectSymptomsCallback_block_invoke"];
    goto LABEL_58;
  }
}

void sub_100042DF8(uint64_t a1)
{
  if (!&_managed_event_fetch) {
    return;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: LQAMgr is NULL", @"__WiFiLQAMgrSymptomsDNSFailureInputCallBack"];
    }
    goto LABEL_25;
  }
  int v2 = *(_DWORD *)(a1 + 20);
  if (v2 == 1)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:4 message:@"__WiFiLQAMgrSymptomsDNSFailureInputCallBack: Trigger Disconnect in GoodLinkState"];
    }
    goto LABEL_25;
  }
  if (!v2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Trigger Disconnect in UnassociatedState", "__WiFiLQAMgrSymptomsDNSFailureInputCallBack")];
    }
LABEL_25:
    int v8 = v7;
    goto LABEL_29;
  }
  if (*(int *)(a1 + 2796) < -84)
  {
    ++*(_DWORD *)(a1 + 488);
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: Symptoms Notification, failcredits %d", @"__WiFiLQAMgrSymptomsDNSFailureInputCallBack", *(unsigned int *)(a1 + 488)];
    }
    int v4 = *(_DWORD *)(a1 + 16);
    if (v4 == 1)
    {
      if (sub_100038478(a1, 0, 0)) {
        sub_1000366F0(a1, 0);
      }
      int v4 = *(_DWORD *)(a1 + 16);
    }
    if (v4 == 2) {
      sub_1000413A0(a1);
    }
    if (*(_DWORD *)(a1 + 516) == *(_DWORD *)(a1 + 520))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      sub_100072548(v5, v6, 3);
    }
    return;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Discarding DNS symptom in rssi %d", "__WiFiLQAMgrSymptomsDNSFailureInputCallBack", *(unsigned int *)(a1 + 2796));
  }
  int v8 = v9;
LABEL_29:
}

void sub_100043008(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 2913)) {
    *(unsigned char *)(a1 + 2913) = [*(id *)(a1 + 2976) __configureRapportDiscoveryClient];
  }
}

void sub_10004309C(id a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: creating WiFiMaintenanceTaskManager", "+[WiFiMaintenanceTaskManager sharedWiFiMaintenanceTaskManager]_block_invoke"];
  }
  qword_10027D610 = objc_alloc_init(WiFiMaintenanceTaskManager);
}

void sub_1000434EC(uint64_t a1, _xpc_activity_s *a2)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: state %ld", "-[WiFiMaintenanceTaskManager scheduleOrphanedSetsCleanUp]_block_invoke", xpc_activity_get_state(a2));
  }
  if ([*(id *)(a1 + 32) wifiManager])
  {
    if ([*(id *)(a1 + 32) queue])
    {
      uint64_t v5 = [*(id *)(a1 + 32) queue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100043664;
      block[3] = &unk_10023EFA8;
      void block[4] = *(void *)(a1 + 32);
      dispatch_async(v5, block);
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: Nil queue", @"-[WiFiMaintenanceTaskManager scheduleOrphanedSetsCleanUp]_block_invoke"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: null wifi manager ref", @"-[WiFiMaintenanceTaskManager scheduleOrphanedSetsCleanUp]_block_invoke"];
    }
  }
}

void sub_100043664(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) wifiManager];

  sub_1000A4BD8((uint64_t)v1);
}

void sub_1000438A0(uint64_t a1, _xpc_activity_s *a2)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: state %ld", "-[WiFiMaintenanceTaskManager scheduleOutdatedListEntriesCleanUp]_block_invoke", xpc_activity_get_state(a2));
  }
  if ([*(id *)(a1 + 32) wifiManager])
  {
    if ([*(id *)(a1 + 32) queue])
    {
      uint64_t v5 = [*(id *)(a1 + 32) queue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100043A18;
      block[3] = &unk_10023EFA8;
      void block[4] = *(void *)(a1 + 32);
      dispatch_async(v5, block);
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: Nil queue", "-[WiFiMaintenanceTaskManager scheduleOutdatedListEntriesCleanUp]_block_invoke"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: null wifi manager ref", @"-[WiFiMaintenanceTaskManager scheduleOutdatedListEntriesCleanUp]_block_invoke"];
    }
  }
}

void sub_100043A18(uint64_t a1)
{
  sub_1000A5660((uint64_t)[*(id *)(a1 + 32) wifiManager]);
  int v2 = [*(id *)(a1 + 32) wifiManager];

  sub_1000A5378(v2);
}

void sub_100043C24(uint64_t a1, xpc_activity_t activity)
{
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: state %ld", "-[WiFiMaintenanceTaskManager schedule3BarsObserver]_block_invoke", state);
  }
  if (xpc_activity_should_defer(activity))
  {
    BOOL v6 = xpc_activity_set_state(activity, 3);
    if (v6)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:@"%s: Deferring 3Bars activity" message:3];
      }
    }
    else if (qword_10027DD68)
    {
      [((id)qword_10027DD68) WFLog:4, @"%s: Failed to defer the periodic 3Bars xpc activity", @"-[WiFiMaintenanceTaskManager schedule3BarsObserver]_block_invoke"];
    }
  }
  else if (state == 2 && xpc_activity_set_state(activity, 4))
  {
    id v8 = +[WiFi3BarsObserver sharedWiFi3BarsObserver];
    id v9 = [*(id *)(a1 + 32) wifiManager];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100043DCC;
    v10[3] = &unk_10023EF80;
    v10[4] = activity;
    [v8 run3BarsObserver:v9 withActivity:activity withCompletion:v10];
  }
}

BOOL sub_100043DCC(uint64_t a1)
{
  return xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5);
}

void sub_100044060(uint64_t a1, _xpc_activity_s *a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: state %ld", "-[WiFiMaintenanceTaskManager schedulePNLMigration]_block_invoke", xpc_activity_get_state(a2)];
  }
  if ([*(id *)(a1 + 32) wifiManager])
  {
    if ([*(id *)(a1 + 32) queue])
    {
      uint64_t v5 = [*(id *)(a1 + 32) queue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000441D8;
      block[3] = &unk_10023EFA8;
      void block[4] = *(void *)(a1 + 32);
      dispatch_async(v5, block);
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Nil queue" :@"-[WiFiMaintenanceTaskManager schedulePNLMigration]_block_invoke"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null wifi manager ref" arguments:("-[WiFiMaintenanceTaskManager schedulePNLMigration]_block_invoke")];
    }
  }
}

void sub_1000441D8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) wifiManager];

  sub_1000A5AD8((uint64_t)v1);
}

id sub_10004442C(uint64_t a1, _xpc_activity_s *a2)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: state %ld", "-[WiFiMaintenanceTaskManager scheduleHistoricNetworkPerformanceFeedSync]_block_invoke", xpc_activity_get_state(a2));
  }
  uint64_t v5 = *(void **)(a1 + 32);

  return [v5 networkPerformanceFeedSync];
}

intptr_t sub_10004479C(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: failed (SInt32 error = %@ data = %@)", "-[WiFiMaintenanceTaskManager networkPerformanceFeedSync]_block_invoke", a3, a2 message];
    }
  }
  else
  {
    id v6 = [a2 objectForKeyedSubscript:@"historical"];
    if (v6)
    {
      double v7 = v6;
      id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:kSymptomAnalyticsServiceNetworkAttachmentHistorical];
      if (v8)
      {
        id v9 = v8;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        id v10 = [v7 countByEnumeratingWithState:&v25 objects:v29 count:16];
        if (v10)
        {
          id v11 = v10;
          int v12 = 0;
          int v13 = 0;
          uint64_t v14 = *(void *)v26;
          do
          {
            for (CFIndex i = 0; i != v11; CFIndex i = (char *)i + 1)
            {
              if (*(void *)v26 != v14) {
                objc_enumerationMutation(v7);
              }
              CFDateRef v16 = *(void **)(*((void *)&v25 + 1) + 8 * i);
              if (objc_msgSend(objc_msgSend(v16, "commonPrefixWithString:options:", v9, 0), "isEqualToString:", v9))
              {
                id v17 = [v7 objectForKey:v16];
                if (v17)
                {
                  CFIndex v18 = v17;
                  if ([v17 objectForKeyedSubscript:@"isKnownGood"])
                  {
                    unsigned int v19 = [[v18 objectForKeyedSubscript:@"isKnownGood"] BOOLValue];
                    v12 += v19;
                    v13 += v19 ^ 1;
                  }
                }
              }
            }
            id v11 = [v7 countByEnumeratingWithState:&v25 objects:v29 count:16];
          }
          while (v11);
        }
        else
        {
          int v12 = 0;
          int v13 = 0;
        }
        if (v12 | v13)
        {
          id v22 = +[NSMutableDictionary dictionary];
          [v22 setObject:*(void *)(a1 + 40) forKey:@"ssid"];
          [v22 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v12 >= v13)] forKey:@"isTCPGood"];
          if (qword_10027DD68)
          {
            CFStringRef v24 = @"bad";
            if (v12 >= v13) {
              CFStringRef v24 = @"good";
            }
            [(id)qword_10027DD68 WFLog:3, "%s: step 2 - %@ is known %@", "-[WiFiMaintenanceTaskManager networkPerformanceFeedSync]_block_invoke", v9, v24 message];
          }
          [*(id *)(a1 + 48) addObject:v22];
        }
      }
    }
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

void sub_100044B60(id a1, OS_xpc_object *a2)
{
  xpc_activity_state_t state = xpc_activity_get_state(a2);
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: state %ld", "-[WiFiMaintenanceTaskManager scheduleWCADownloadObserver]_block_invoke", state];
  }
  if (xpc_activity_should_defer(a2))
  {
    BOOL v5 = xpc_activity_set_state(a2, 3);
    if (v5)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Deferring WCA download activity", "-[WiFiMaintenanceTaskManager scheduleWCADownloadObserver]_block_invoke")];
      }
    }
    else if (qword_10027DD68)
    {
      [[(id)qword_10027DD68 WFLog:message:4, "%s: Failed to defer the periodic WCA download xpc activity", "-[WiFiMaintenanceTaskManager scheduleWCADownloadObserver]_block_invoke"];
    }
  }
  else if (state == 2 && xpc_activity_set_state(a2, 4))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100044CE0;
    block[3] = &unk_10023EFA8;
    void block[4] = a2;
    dispatch_async((dispatch_queue_t)qword_10027DD88, block);
  }
}

BOOL sub_100044CE0(uint64_t a1)
{
  [+[WCAClient sharedClient](WCAClient, "sharedClient") fetchWiFiAssetsFromServer];
  int v2 = *(_xpc_activity_s **)(a1 + 32);

  return xpc_activity_set_state(v2, 5);
}

void sub_100044DF0(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      WiFiCloudSyncEngineRegisterCallbacksWithQueue();
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, "%s", "WiFiCloudSyncInitSyncEngine"];
      }
      goto LABEL_12;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null syncEngine" args:("WiFiCloudSyncInitSyncEngine", nil)];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager" arguments:@"WiFiCloudSyncInitSyncEngine"];
    }
  }

LABEL_12:
}

void sub_100044F20(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s", "__WiFiCloudSyncAddNetworkToPlist"];
  }
  if (a2)
  {
    BOOL v5 = sub_100005EFC(a2);
    if (v5)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000456D0;
      block[3] = &unk_10023F048;
      void block[4] = a1;
      void block[5] = a2;
      dispatch_sync(v5, block);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: null queue" : @"__WiFiCloudSyncAddNetworkToPlist"];
      }
    }
  }
}

void sub_100045044(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s", "__WiFiCloudSyncRemoveNetworkFromPlist"];
  }
  if (a2)
  {
    BOOL v5 = sub_100005EFC(a2);
    if (v5)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000456DC;
      block[3] = &unk_10023F048;
      void block[4] = a1;
      void block[5] = a2;
      dispatch_sync(v5, block);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: null queue" : @"__WiFiCloudSyncRemoveNetworkFromPlist"];
      }
    }
  }
}

CFStringRef sub_100045168(void *a1)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s - for network %@", "__WiFiCloudSyncIsPasswordPresent", sub_10001A43C(a1) message];
    }
    return sub_1000C95D0((CFDictionaryRef *)a1);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null networkRef" : @"__WiFiCloudSyncIsPasswordPresent"];
    }
    return 0;
  }
}

void sub_10004523C(const void *a1)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s - for network %@", "__WiFiCloudSyncSetPasswordSyncState", sub_10001A43C(a1) message];
    }
    sub_1000C967C();
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null networkRef" args:("__WiFiCloudSyncSetPasswordSyncState")];
    }
  }
}

uint64_t sub_100045320(uint64_t a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s", "__WiFiCloudSyncCopyAllNetworks"];
  }
  uint64_t v8 = 0;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  if (a1)
  {
    int v3 = sub_100005EFC(a1);
    if (v3)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000456E8;
      block[3] = &unk_10023F220;
      void block[4] = &v8;
      void block[5] = a1;
      dispatch_sync(v3, block);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, "%s: null queue", "__WiFiCloudSyncCopyAllNetworks"];
      }
    }
  }
  uint64_t v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_100045458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100045470(uint64_t a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%@", a1 message];
  }
}

void sub_1000454D8(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null syncEngine", @"WiFiCloudSyncAddNetworkToCloud"];
    }
    goto LABEL_13;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiCloudSyncAddNetworkToCloud")];
    }
LABEL_13:
    goto LABEL_6;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s", "WiFiCloudSyncAddNetworkToCloud");
  }
  WiFiCloudSyncEngineAddNetworkToCloud();
LABEL_6:
}

void sub_1000455D4(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: null syncEngine", "WiFiCloudSyncRemoveNetworkFromCloud"];
    }
    goto LABEL_13;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiCloudSyncRemoveNetworkFromCloud")];
    }
LABEL_13:
    goto LABEL_6;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s", "WiFiCloudSyncRemoveNetworkFromCloud")];
  }
  WiFiCloudSyncEngineRemoveNetworkFromCloud();
LABEL_6:
}

void sub_1000456D0(uint64_t a1)
{
}

void sub_1000456DC(uint64_t a1)
{
}

__CFArray *sub_1000456E8(uint64_t a1)
{
  CFTypeRef result = sub_10008EEF4(*(void *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_10004571C(const void *a1)
{
  if (a1)
  {
    if (qword_10027D620)
    {
      if (*(void *)(qword_10027D620 + 32))
      {
        int v2 = (char *)malloc_type_malloc(0x570uLL, 0x10300402A4F60A2uLL);
        if (!v2) {
          return;
        }
        int v3 = v2;
        bzero(v2, 0x570uLL);
        *((CFAbsoluteTime *)v3 + 1) = CFAbsoluteTimeGetCurrent();
        *(void *)int v3 = a1;
        CFRetain(a1);
        *((void *)v3 + 88) = sub_1000C2CD0((uint64_t)kCFAllocatorDefault, 10, 216);
        *(_OWORD *)(v3 + 488) = 0u;
        *(_OWORD *)(v3 + 504) = 0u;
        *(_OWORD *)(v3 + 520) = 0u;
        *(_OWORD *)(v3 + 536) = 0u;
        *(_OWORD *)(v3 + 552) = 0u;
        *(_OWORD *)(v3 + 568) = 0u;
        *(_OWORD *)(v3 + 584) = 0u;
        *(_OWORD *)(v3 + 600) = 0u;
        *(_OWORD *)(v3 + 616) = 0u;
        *(_OWORD *)(v3 + 632) = 0u;
        *(_OWORD *)(v3 + 648) = 0u;
        *(_OWORD *)(v3 + 664) = 0u;
        *(_OWORD *)(v3 + 680) = 0u;
        *((void *)v3 + 87) = 0;
        *((void *)v3 + 89) = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
        CFArrayAppendValue(*(CFMutableArrayRef *)(qword_10027D620 + 32), v3);
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s # %ld", "WiFiMetricsManagerRegisterDevice", CFArrayGetCount(*(CFArrayRef *)(qword_10027D620 + 32)));
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: null deviceMetricsArray !!", "WiFiMetricsManagerRegisterDevice", v5];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null metrics !!", "WiFiMetricsManagerRegisterDevice", v5);
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null device !!", "WiFiMetricsManagerRegisterDevice", v5);
    }
  }
}

void sub_10004590C(const void *a1)
{
  if (a1)
  {
    if (qword_10027D620)
    {
      CFArrayRef v2 = *(const __CFArray **)(qword_10027D620 + 32);
      if (v2)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
        if (ValueAtIndex)
        {
          uint64_t v4 = ValueAtIndex;
          if (*ValueAtIndex)
          {
            if ((const void *)*ValueAtIndex == a1) {
              CFRelease(a1);
            }
            uint64_t v5 = (const void *)v4[88];
            if (v5)
            {
              CFRelease(v5);
              v4[88] = 0;
            }
            id v6 = (const void *)v4[89];
            if (v6)
            {
              CFRelease(v6);
              v4[89] = 0;
            }
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(qword_10027D620 + 32), 0);
            free(v4);
          }
        }
        return;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null deviceMetricsArray !!", "WiFiMetricsManagerUnRegisterDevice")];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: null metrics !!", @"WiFiMetricsManagerUnRegisterDevice"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null device !!", "WiFiMetricsManagerUnRegisterDevice")];
    }
  }
}

uint64_t sub_100045A90(uint64_t a1, uint64_t a2)
{
  if (a2 && objc_opt_class())
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s", "WiFiMetricsManagerCreate")];
    }
    if (!qword_10027D630) {
      pthread_once(&stru_10027C970, (void (*)(void))sub_1000591F0);
    }
    uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
    qword_10027D620 = (uint64_t)Instance;
    if (Instance)
    {
      Instance[4] = 0u;
      Instance[5] = 0u;
      Instance[2] = 0u;
      Instance[3] = 0u;
      Instance[1] = 0u;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      double v7 = (void *)qword_10027D620;
      *(CFAbsoluteTime *)(qword_10027D620 + 24) = Current;
      v7[2] = a2;
      v7[10] = 0;
      v7[11] = 0;
      char v8 = MGGetBoolAnswer();
      uint64_t v9 = qword_10027D620;
      *(unsigned char *)(qword_10027D620 + 40) = v8;
      *(void *)(v9 + 48) = 0;
      dispatch_async((dispatch_queue_t)qword_10027DD88, &stru_10023F380);
      memset(&callBacks, 0, sizeof(callBacks));
      CFMutableArrayRef v10 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &callBacks);
      uint64_t v11 = qword_10027D620;
      *(void *)(qword_10027D620 + 32) = v10;
      if (v10)
      {
        *(void *)(v11 + 72) = qword_10027DD88;
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: null metrics->deviceMetricsArray !!", @"WiFiMetricsManagerCreate"];
        }
      }
    }
  }
  uint64_t v12 = qword_10027D620;
  return v12;
}

void sub_100045C40(id a1)
{
}

void sub_100045C5C(uint64_t a1, unsigned int a2, const void *a3, unsigned int a4)
{
  if (!a1)
  {
    uint64_t v9 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFMutableArrayRef v10 = "%s: Invalid device!";
LABEL_11:
      [v9 WFLog:4 message:v10 WiFiMetricsManagerSubmitAssociationFailure];
    }
LABEL_12:
    return;
  }
  if (!a3)
  {
    uint64_t v9 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFMutableArrayRef v10 = "%s: no Network object!";
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  if (!qword_10027D620) {
    return;
  }
  if (sub_1000931BC(*(void *)(qword_10027D620 + 16)))
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: Camera is in Foreground", "WiFiMetricsManagerSubmitAssociationFailure"];
    }
    goto LABEL_12;
  }
  unsigned int v11 = sub_1000C6FC0((uint64_t)a3, @"CHANNEL");
  unsigned int v62 = sub_1000C6FC0((uint64_t)a3, @"RSSI");
  CFStringRef v12 = (const __CFString *)sub_10001E404((uint64_t)a3, @"BSSID");
  if (!sub_1000C66D0((BOOL)a3))
  {
    unsigned int v60 = v11;
    CFStringRef theString = v12;
    CFStringRef v19 = 0;
    CFNumberRef v20 = 0;
    CFAllocatorRef v66 = kCFAllocatorDefault;
LABEL_30:
    char v22 = 1;
LABEL_31:
    int v23 = sub_10001EE48(a3);
    CFStringRef v24 = "Hidden ";
    if (!v23) {
      CFStringRef v24 = "";
    }
    uint64_t v65 = v24;
    if (sub_10001FC1C((uint64_t)a3)) {
      long long v25 = "EAP ";
    }
    else {
      long long v25 = "";
    }
    if (sub_1000C6FE8((const __CFDictionary *)a3)) {
      long long v26 = "SAE ";
    }
    else {
      long long v26 = "";
    }
    CFStringRef cf = v19;
    char v64 = v22;
    if (sub_1000C6FE8((const __CFDictionary *)a3))
    {
      long long v27 = "WPA3 ";
    }
    else if (sub_1000C7E9C((uint64_t)a3))
    {
      long long v27 = "WPA2 ";
    }
    else if (sub_1000C7E8C((uint64_t)a3))
    {
      long long v27 = "WPA ";
    }
    else
    {
      long long v27 = "";
    }
    uint64_t v67 = v20;
    if (!v20) {
      CFNumberRef v20 = "";
    }
    if (sub_1000C8044((BOOL)a3)) {
      uint64_t v30 = "WAPI PSK ";
    }
    else {
      uint64_t v30 = "";
    }
    BOOL v31 = sub_1000C8074((BOOL)a3);
    double v32 = "WAPI CERT ";
    if (!v31) {
      double v32 = "";
    }
    CFStringRef v29 = CFStringCreateWithFormat(v66, 0, @"%s%s%s%s%s%s%s", v65, v25, v26, v27, v20, v30, v32);
    CFIndex Length = CFStringGetLength(v29);
    uint64_t v34 = (unsigned int *)malloc_type_malloc((int)Length + 27, 0x5E5F08B7uLL);
    if (v34)
    {
      uint64_t v35 = v34;
      bzero(v34, (int)Length + 27);
      if (Length) {
        CFStringGetCString(v29, (char *)v35 + 26, ((uint64_t)&_mh_execute_header + (Length << 32)) >> 32, 0);
      }
      *uint64_t v35 = a2;
      *(unsigned int *)((char *)v35 + 11) = v60;
      *(unsigned int *)((char *)v35 + 15) = v62;
      *(unsigned int *)((char *)v35 + 19) = a4;
      uint64_t v36 = (const void *)sub_100017C48(a1);
      CFDictionaryRef v37 = sub_10006380C(a1, v36);
      if (v37)
      {
        CFDictionaryRef v38 = v37;
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v37, @"DEAUTH_EA");
        if (Value)
        {
          CFStringRef v40 = Value;
          size_t v41 = (int)(CFStringGetLength(Value) + 1);
          CFNumberRef v42 = (char *)malloc_type_malloc(v41, 0xE0AABCE6uLL);
          if (v42)
          {
            CFNumberRef v43 = v42;
            bzero(v42, v41);
            if (CFStringGetCString(v40, v43, v41, 0))
            {
              CFNumberRef v44 = ether_aton(v43);
              if (v44)
              {
                __int16 v45 = *(_WORD *)v44->octet;
                *((unsigned char *)v35 + 10) = v44->octet[2];
                *((_WORD *)v35 + 4) = v45;
              }
            }
            free(v43);
          }
        }
        CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(v38, @"DEAUTH_REASON");
        if (v46) {
          CFNumberGetValue(v46, kCFNumberIntType, v35 + 1);
        }
        CFRelease(v38);
      }
      if (theString)
      {
        size_t v47 = (int)(CFStringGetLength(theString) + 1);
        uint64_t v48 = (char *)malloc_type_malloc(v47, 0xB0AA74B1uLL);
        if (v48)
        {
          BOOL v49 = v48;
          bzero(v48, v47);
          if (CFStringGetCString(theString, v49, v47, 0))
          {
            CFNumberRef v50 = ether_aton(v49);
            if (v50)
            {
              __int16 v51 = *(_WORD *)v50->octet;
              *((unsigned char *)v35 + 25) = v50->octet[2];
              *(_WORD *)((char *)v35 + 23) = v51;
            }
          }
          free(v49);
        }
      }
      id v54 = objc_alloc((Class)WAMessage);
      id v55 = [v54 initWithMetricName:kWAMessageMetricNameAssociationFailure options:7];
      if (v55)
      {
        double v56 = v55;
        [v55 addFieldForKey:kWAMessageKeyError value:[NSNumber numberWithInt:*v35] options:7];
        [v56 addFieldForKey:kWAMessageKeyDeauthReason value:[NSNumber numberWithInt:v35[1]] options:7];
        sub_1000593C0(v56, kWAMessageKeyDeauthSourceOUI, (uint64_t)(v35 + 2), 3u, 1);
        [v56 addFieldForKey:kWAMessageKeyChannel value:[NSNumber numberWithInt:*((unsigned int *)((char *)v35 + 11))] options:7];
        [v56 addFieldForKey:kWAMessageKeyRSSI value:[NSNumber numberWithInt:*(unsigned int *)((char *)v35 + 15)] options:7];
        sub_1000593C0(v56, kWAMessageKeyBSSIDOUI, (uint64_t)v35 + 23, 3u, 1);
        [v56 addFieldForKey:kWAMessageKeySecurityString value:[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", (char *)v35 + 26, 1) options:7];
        if (!sub_10005655C(v56, a3, 6))
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4, @"%s: Failed to append SSID/BSSID to WAMessage", @"__WiFiMetricsManagerWAMessageSubmitAssociationFailure"];
          }
        }
        uint64_t v58 = kWAMessageKeyMetricDate;
        [+[NSDate date] timeIntervalSinceReferenceDate];
        [v56 addFieldForKey:v58 value:[NSNumber numberWithDouble:6] options:];
        sub_1000476E8(v56);
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Failed to alloc WAMessage for AssociationFailure", @"__WiFiMetricsManagerWAMessageSubmitAssociationFailure"];
        }
      }
      free(v35);
    }
    if (v64) {
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  if (sub_10001E404((uint64_t)a3, @"WEP_AUTH_Flags"))
  {
    CFNumberRef v13 = sub_1000C6FC0((uint64_t)a3, @"WEP_AUTH_Flags");
    CFAllocatorRef v14 = kCFAllocatorDefault;
    CFNumberRef v15 = "40 Bit";
    if ((v13 & 1) == 0) {
      CFNumberRef v15 = "104 Bit";
    }
    CFDateRef v16 = "Open";
    if ((v13 & 4) == 0) {
      CFDateRef v16 = "Shared";
    }
    id v17 = "Hashed";
    if ((v13 & 2) == 0) {
      id v17 = "Unhashed";
    }
    CFStringRef v18 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"WEP network: %s %s %s (0x%lx)", v15, v16, v17, v13);
  }
  else
  {
    CFAllocatorRef v14 = kCFAllocatorDefault;
    CFStringRef v18 = CFStringCreateWithCString(kCFAllocatorDefault, "WEP network", 0);
  }
  CFStringRef v19 = v18;
  if (!v18)
  {
    CFAllocatorRef v66 = v14;
    unsigned int v60 = v11;
    CFStringRef theString = v12;
    CFNumberRef v20 = 0;
    goto LABEL_30;
  }
  size_t v21 = (int)(CFStringGetLength(v18) + 1);
  CFNumberRef v20 = (char *)malloc_type_malloc(v21, 0x6D532889uLL);
  bzero(v20, v21);
  if (CFStringGetCString(v19, v20, v21, 0))
  {
    char v22 = 0;
    CFAllocatorRef v66 = v14;
    unsigned int v60 = v11;
    CFStringRef theString = v12;
    goto LABEL_31;
  }
  uint64_t v67 = v20;
  CFStringRef cf = v19;
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: unable to retrieve WEP security string!", "WiFiMetricsManagerSubmitAssociationFailure"];
  }
  CFStringRef v29 = 0;
LABEL_83:
  CFRelease(cf);
LABEL_84:
  if (v29) {
    CFRelease(v29);
  }
  if (v67)
  {
    free(v67);
  }
}

void sub_1000464B4(uint64_t a1)
{
  if (a1)
  {
    CFArrayRef v2 = (unsigned __int8 *)malloc_type_malloc(3uLL, 0x100004033FC2DF1uLL);
    if (v2)
    {
      int v3 = v2;
      *(_WORD *)CFArrayRef v2 = *(_WORD *)a1;
      v2[2] = *(unsigned char *)(a1 + 2);
      id v6 = objc_alloc((Class)WAMessage);
      id v7 = [v6 initWithMetricName:kWAMessageMetricNameHotspotTransportUsed options:5];
      if (v7)
      {
        char v8 = v7;
        [v7 addFieldForKey:kWAMessageKeyWiFiHotspotCount value:[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *v3) options:5];
        [v8 addFieldForKey:kWAMessageKeyBTHotspotCount value:[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v3[1]) options:5];
        [v8 addFieldForKey:kWAMessageKeyUSBHotspotCount value:[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v3[2]) options:5];
        sub_1000476E8(v8);
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, "%s: Failed to alloc WAMessage for HotspotTransportType", "__WiFiMetricsManagerWAMessageSubmitHotspotTransportType"];
        }
      }
      free(v3);
    }
  }
}

void sub_100046668(uint64_t a1, int a2, unsigned int a3, unsigned int a4, void *a5, char a6)
{
  if (a1)
  {
    if (!qword_10027D620) {
      return;
    }
    if (sub_1000931BC(*(void *)(qword_10027D620 + 16)) != 1)
    {
      CFStringRef v12 = (const void *)sub_100017C48(a1);
      CFNumberRef v13 = sub_10001C1B4(a1, v12);
      if (!v13) {
        return;
      }
      CFAllocatorRef v14 = v13;
      if (a2)
      {
        double Current = CFAbsoluteTimeGetCurrent();
        if (Current == 0.0 || (double v16 = Current, v17 = sub_10006E37C(a1), v17 == 0.0) || (v18 = v17, v16 <= v17))
        {
LABEL_27:
          CFRelease(v14);
          return;
        }
        sub_10006E390(a1, 0.0);
        unsigned int v19 = ((v16 - v18) * 1000.0);
      }
      else
      {
        unsigned int v19 = -1;
      }
      CFNumberRef v20 = (unsigned int *)malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
      if (v20)
      {
        size_t v21 = v20;
        unsigned int *v20 = v19;
        v20[1] = sub_1000C8A5C((uint64_t)v14);
        v21[2] = a3;
        _OWORD v21[3] = a4;
        if ((a6 & 1) == 0)
        {
          id v24 = objc_alloc((Class)WAMessage);
          id v25 = [v24 initWithMetricName:kWAMessageMetricNameIpv4Latency options:7];
          if (v25)
          {
            long long v26 = v25;
            [v25 addFieldForKey:kWAMessageKeyDHCPLatencyMilliSec value:[NSNumber numberWithUnsignedInt:*v21] options:7];
            [v26 addFieldForKey:kWAMessageKeyNetworkAuthFlags value:[NSNumber numberWithUnsignedInt:v21[1]] options:7];
            [v26 addFieldForKey:kWAMessageKeyDHCPLeaseMins value:[NSNumber numberWithUnsignedInt:v21[2]] options:7];
            [v26 addFieldForKey:kWAMessageKeyDHCPSuccess value:[NSNumber numberWithBool:a2 != 0] options:6];
            if (a5)
            {
              uint64_t v35 = v23;
              id v27 = +[NSMutableDictionary dictionary];
              id v28 = [a5 valueForKey:@"IO80211InterfaceIPV4Address"];
              id v29 = [a5 valueForKey:@"IO80211InterfaceIPV4RouterAddress"];
              id v30 = [a5 valueForKey:@"IO80211InterfaceRouterMACAddress"];
              [v27 setValue:v28 forKey:@"IO80211InterfaceIPV4Address"];
              [v27 setValue:v29 forKey:@"IO80211InterfaceIPV4RouterAddress"];
              if (v30) {
                [v27 setValue:[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", ether_ntoa((const ether_addr *)objc_msgSend(v30, "bytes"))) forKey:@"IO80211InterfaceRouterMACAddress"];
              }
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: %@", "__WiFiMetricsManagerWAMessageSubmitIpv4Latency", v27 message];
              }
              [v26 addFieldForKey:kWAMessageKeyDHCPAddresses value:v27 options:6];
              int v23 = v35;
            }
            if (!sub_10005655C(v26, v14, 6))
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Failed to append SSID/BSSID to to WAMessage", "__WiFiMetricsManagerWAMessageSubmitIpv4Latency")];
              }
            }
            sub_1000476E8(v26);
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4, "%s: Failed to alloc WAMessage for Ipv4Latency", "__WiFiMetricsManagerWAMessageSubmitIpv4Latency"];
            }
          }
        }
        free(v21);
      }
      goto LABEL_27;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Camera is in Foreground", "WiFiMetricsManagerSubmitIPv4DHCPLatency"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null device", "WiFiMetricsManagerSubmitIPv4DHCPLatency"];
    }
  }
}

uint64_t sub_100046B20(uint64_t a1, int a2, int a3)
{
  if ((int)a1 > 255)
  {
    if ((int)a1 >= 0x2000)
    {
      if ((int)a1 < 0x8000)
      {
        if (a1 != 0x2000)
        {
          if (a1 == 0x4000) {
            return 15;
          }
          goto LABEL_40;
        }
      }
      else
      {
        if (a1 == 0x8000) {
          return 16;
        }
        if (a1 != 0x10000 && a1 != 0x20000) {
          goto LABEL_40;
        }
      }
    }
    else
    {
      if ((int)a1 <= 1023)
      {
        if (a1 == 256) {
          return 18;
        }
        if (a1 == 512) {
          return 20;
        }
        goto LABEL_40;
      }
      if (a1 == 1024) {
        return 9;
      }
      if (a1 == 2048) {
        return 8;
      }
      if (a1 != 4096)
      {
LABEL_40:
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: unknownt auth type (%d)", "WiFiMetricEnhancedSecurityTypeFromAuthType", a1);
        }
        return 111;
      }
    }
    goto LABEL_26;
  }
  if ((int)a1 > 15)
  {
    if ((int)a1 > 63)
    {
      if (a1 == 64) {
        return 17;
      }
      if (a1 == 128) {
        return 6;
      }
      goto LABEL_40;
    }
    if (a1 != 16)
    {
      if (a1 == 32) {
        return 19;
      }
      goto LABEL_40;
    }
LABEL_26:
    if (a3) {
      return 11;
    }
    else {
      return 5;
    }
  }
  uint64_t result = 2;
  switch((int)a1)
  {
    case 0:
      uint64_t result = a2 != 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 3;
      break;
    case 4:
      uint64_t result = 4;
      break;
    case 8:
      goto LABEL_26;
    default:
      goto LABEL_40;
  }
  return result;
}

void sub_100046CF8(const __CFArray *a1, unsigned int a2, int a3)
{
  int v81 = a3;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Posting metrics for AJ"];
  }
  int valuePtr = 115;
  CFStringRef v6 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "External power state is %d", a2);
  }
  CFArrayRef v8 = sub_10000500C(a1);
  if (v8)
  {
    CFArrayRef v9 = v8;
    p_inst_props = &OBJC_PROTOCOL___SFRemoteHotspotSessionDelegate.inst_props;
    if (qword_10027D620)
    {
      if (*(unsigned __int8 *)(qword_10027D620 + 64) == a2)
      {
        CFStringRef v12 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          uint64_t v67 = (const char *)*(unsigned __int8 *)(qword_10027D620 + 64);
          CFNumberRef v13 = "External power state is same as before %d, bailing out";
          goto LABEL_10;
        }
        goto LABEL_11;
      }
      *(unsigned char *)(qword_10027D620 + 64) = a2;
      unsigned int Current = CFAbsoluteTimeGetCurrent();
      if (CFArrayGetCount(v9) >= 1)
      {
        CFIndex v14 = 0;
        uint64_t v69 = kWAMessageMetricNameAJPowerMetric;
        CFStringRef v70 = v6;
        CFArrayRef v71 = v9;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v9, v14);
          if (ValueAtIndex)
          {
            uint64_t v16 = sub_100016E18((uint64_t)ValueAtIndex);
            if (!v16)
            {
              CFStringRef v12 = (void *)qword_10027DD68;
              if (!qword_10027DD68) {
                goto LABEL_11;
              }
              CFNumberRef v13 = "Device not present";
              goto LABEL_10;
            }
            uint64_t v17 = v16;
            double v18 = (const void *)sub_100017C48(v16);
            CFDictionaryRef v19 = sub_100063150(v17, v18, v6);
            if (!v19)
            {
              CFStringRef v12 = (void *)qword_10027DD68;
              if (!qword_10027DD68) {
                goto LABEL_11;
              }
              CFNumberRef v13 = "Failed to get property";
LABEL_10:
              [v12 WFLog:3 message:v13, v67];
              goto LABEL_11;
            }
            CFDictionaryRef v20 = v19;
            CFIndex v72 = v14;
            CFIndex Count = CFDictionaryGetCount(v19);
            char v22 = malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
            bzero(v22, 8 * Count);
            int v23 = malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
            bzero(v23, 8 * Count);
            CFDictionaryGetKeysAndValues(v20, (const void **)v22, (const void **)v23);
            id v24 = p_inst_props[196];
            if (LOBYTE(v24[8].entrysize))
            {
              CFDictionaryRef v25 = (const __CFDictionary *)v24[7];
              if (!v25)
              {
                char v64 = (void *)qword_10027DD68;
                if (qword_10027DD68)
                {
                  uint64_t v65 = "Inital metrics dictionary not present";
                  goto LABEL_98;
                }
LABEL_99:
                CFArrayRef v9 = v71;
                if (v22) {
                  goto LABEL_83;
                }
                goto LABEL_84;
              }
              uint64_t v78 = 0;
              CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v25, @"metricsTotalTime");
              if (Value) {
                CFNumberGetValue(Value, kCFNumberIntType, (char *)&v78 + 4);
              }
              HIDWORD(v78) = Current - HIDWORD(v78);
              if (HIDWORD(v78) <= 0x707)
              {
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "System not on puck time is %u s < 30min, not posting", HIDWORD(v78))];
                }
                unsigned int v62 = (const void *)p_inst_props[196][7];
                CFArrayRef v9 = v71;
                if (v62)
                {
                  CFRelease(v62);
                  p_inst_props[196][7] = 0;
                }
                if (v22) {
LABEL_83:
                }
                  free(v22);
LABEL_84:
                if (v23) {
                  free(v23);
                }
                CFRelease(v20);
                break;
              }
              id v27 = [objc_alloc((Class)WAMessage) initWithMetricName:v69 options:5];
              if (!v27)
              {
                char v64 = (void *)qword_10027DD68;
                if (qword_10027DD68)
                {
                  uint64_t v67 = "WiFiMetricsManagerSubmitWiFiAJPowerMetrics";
                  uint64_t v65 = "%s: null waMsg";
LABEL_98:
                  [v64 WFLog:3 message:v65 v67];
                }
                goto LABEL_99;
              }
              id v28 = v27;
              CFDictionaryRef v73 = v20;
              CFNumberRef v29 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)&v78 + 4);
              [v28 addFieldForKey:@"metricsTotalTime" value:v29 options:5];
              if (v29) {
                CFRelease(v29);
              }
              CFNumberRef v30 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v81);
              [v28 addFieldForKey:@"finalChargeLevel" value:v30 options:5];
              if (v30) {
                CFRelease(v30);
              }
              [v28 addFieldForKey:@"initialChargeLevel" value:CFDictionaryGetValue(*(CFDictionaryRef *)&p_inst_props[196][7], @"initialChargeLevel") options:5];
              if (Count >= 1)
              {
                uint64_t v31 = 0;
                int v75 = v23;
                do
                {
                  if (!CFStringHasPrefix(*((CFStringRef *)v22 + v31), @"CACHED")
                    && !CFEqual(*((CFTypeRef *)v22 + v31), @"AutoHotspotLPHSPowerStats"))
                  {
                    if (CFEqual(*((CFTypeRef *)v22 + v31), @"AutoJoinPowerDiag"))
                    {
                      CFDictionaryRef v32 = (const __CFDictionary *)*((void *)v23 + v31);
                      CFIndex v33 = CFDictionaryGetCount(v32);
                      uint64_t v34 = malloc_type_malloc(8 * v33, 0x6004044C4A2DFuLL);
                      bzero(v34, 8 * v33);
                      uint64_t v35 = malloc_type_malloc(8 * v33, 0x6004044C4A2DFuLL);
                      bzero(v35, 8 * v33);
                      int v77 = v34;
                      CFDictionaryGetKeysAndValues(v32, (const void **)v34, (const void **)v35);
                      if (v33 >= 1)
                      {
                        uint64_t v36 = (CFTypeRef *)v35;
                        do
                        {
                          uint64_t v78 = 0;
                          CFTypeID v37 = CFGetTypeID(*v36);
                          if (v37 == CFNumberGetTypeID())
                          {
                            CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(qword_10027D620 + 56), (const void *)*v34);
                            if (v38)
                            {
                              CFNumberRef v39 = v38;
                              CFTypeID v40 = CFGetTypeID(v38);
                              if (v40 == CFNumberGetTypeID()) {
                                CFNumberGetValue(v39, kCFNumberIntType, (char *)&v78 + 4);
                              }
                            }
                            CFNumberGetValue((CFNumberRef)*v36, kCFNumberIntType, &v78);
                            HIDWORD(v78) = v78 - HIDWORD(v78);
                            CFNumberRef v41 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)&v78 + 4);
                            [v28 addFieldForKey:*v34 value:v41 options:5];
                            if (v41) {
                              CFRelease(v41);
                            }
                          }
                          ++v34;
                          ++v36;
                          --v33;
                        }
                        while (v33);
                      }
                      free(v77);
                      free(v35);
                      p_inst_props = (__objc2_prop_list **)(&OBJC_PROTOCOL___SFRemoteHotspotSessionDelegate + 56);
                      int v23 = v75;
                    }
                    else
                    {
                      uint64_t v78 = 0;
                      CFTypeID v42 = CFGetTypeID(*((CFTypeRef *)v23 + v31));
                      if (v42 == CFNumberGetTypeID())
                      {
                        CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)&p_inst_props[196][7], *((const void **)v22 + v31));
                        if (v43)
                        {
                          CFNumberRef v44 = v43;
                          CFTypeID v45 = CFGetTypeID(v43);
                          if (v45 == CFNumberGetTypeID()) {
                            CFNumberGetValue(v44, kCFNumberIntType, (char *)&v78 + 4);
                          }
                        }
                        CFNumberGetValue(*((CFNumberRef *)v23 + v31), kCFNumberIntType, &v78);
                        HIDWORD(v78) = v78 - HIDWORD(v78);
                        CFNumberRef v46 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)&v78 + 4);
                        [v28 addFieldForKey:*((void *)v22 + v31) value:v46 options:5];
                        if (v46) {
                          CFRelease(v46);
                        }
                      }
                    }
                  }
                  ++v31;
                }
                while (v31 != Count);
              }
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3 message:"Posting AJ power metrics\n"];
              }
              sub_1000476E8(v28);
              uint64_t v48 = (const void *)p_inst_props[196][7];
              CFDictionaryRef v20 = v73;
              if (v48)
              {
                CFRelease(v48);
                p_inst_props[196][7] = 0;
              }
            }
            else
            {
              p_inst_props[196][7] = (__objc2_prop_list)CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              CFNumberRef v49 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &Current);
              CFDictionaryAddValue(*(CFMutableDictionaryRef *)&p_inst_props[196][7], @"metricsTotalTime", v49);
              if (v49) {
                CFRelease(v49);
              }
              CFNumberRef v50 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v81);
              CFDictionaryAddValue(*(CFMutableDictionaryRef *)&p_inst_props[196][7], @"initialChargeLevel", v50);
              if (v50) {
                CFRelease(v50);
              }
              if (Count >= 1)
              {
                uint64_t v51 = 0;
                CFDictionaryRef v74 = v20;
                id v76 = v23;
                do
                {
                  if (!CFStringHasPrefix(*((CFStringRef *)v22 + v51), @"CACHED")
                    && !CFEqual(*((CFTypeRef *)v22 + v51), @"AutoHotspotLPHSPowerStats"))
                  {
                    int v52 = CFEqual(*((CFTypeRef *)v22 + v51), @"AutoJoinPowerDiag");
                    CFDictionaryRef v53 = (const __CFDictionary *)*((void *)v23 + v51);
                    if (v52)
                    {
                      CFIndex v54 = CFDictionaryGetCount(*((CFDictionaryRef *)v23 + v51));
                      id v55 = malloc_type_malloc(8 * v54, 0x6004044C4A2DFuLL);
                      bzero(v55, 8 * v54);
                      double v56 = malloc_type_malloc(8 * v54, 0x6004044C4A2DFuLL);
                      bzero(v56, 8 * v54);
                      CFDictionaryGetKeysAndValues(v53, (const void **)v55, (const void **)v56);
                      p_inst_props = &OBJC_PROTOCOL___SFRemoteHotspotSessionDelegate.inst_props;
                      if (v54 >= 1)
                      {
                        uint64_t v57 = (CFTypeRef *)v56;
                        uint64_t v58 = (const void **)v55;
                        do
                        {
                          CFTypeID v59 = CFGetTypeID(*v57);
                          if (v59 == CFNumberGetTypeID()) {
                            CFDictionaryAddValue(*(CFMutableDictionaryRef *)(qword_10027D620 + 56), *v58, *v57);
                          }
                          ++v58;
                          ++v57;
                          --v54;
                        }
                        while (v54);
                      }
                      free(v55);
                      free(v56);
                      CFDictionaryRef v20 = v74;
                      int v23 = v76;
                    }
                    else
                    {
                      CFTypeID v60 = CFGetTypeID(*((CFTypeRef *)v23 + v51));
                      p_inst_props = &OBJC_PROTOCOL___SFRemoteHotspotSessionDelegate.inst_props;
                      if (v60 == CFNumberGetTypeID()) {
                        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(qword_10027D620 + 56), *((const void **)v22 + v51), *((const void **)v23 + v51));
                      }
                    }
                  }
                  ++v51;
                }
                while (v51 != Count);
              }
            }
            CFRelease(v20);
            if (v22) {
              free(v22);
            }
            CFStringRef v6 = v70;
            CFArrayRef v9 = v71;
            CFIndex v14 = v72;
            if (v23) {
              free(v23);
            }
          }
          ++v14;
        }
        while (v14 < CFArrayGetCount(v9));
      }
    }
    else
    {
      CFStringRef v12 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFNumberRef v13 = "metrics not present";
        goto LABEL_10;
      }
LABEL_11:
    }
    CFRelease(v9);
    if (v6) {
      goto LABEL_88;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"Device manager not present"];
    }
    if (v6) {
LABEL_88:
    }
      CFRelease(v6);
  }
}

void sub_1000476E8(void *a1)
{
  if (!qword_10027D620)
  {
LABEL_10:
    if (!a1) {
      return;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: Failed to submit message: %@", "__WiFiMetricsManagerSubmitWAMessage", [a1 metricName] message];
    }
    uint64_t v5 = v4;
    goto LABEL_17;
  }
  if (sub_1000931BC(*(void *)(qword_10027D620 + 16)) == 1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Camera is in Foreground", "__WiFiMetricsManagerSubmitWAMessage")];
    }
    goto LABEL_10;
  }
  if (a1)
  {
    CFArrayRef v2 = +[WiFiManagerAnalytics sharedInstance];
    [(WiFiManagerAnalytics *)v2 submitWiFiAnalyticsMessage:a1];
    return;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Null message", "__WiFiMetricsManagerSubmitWAMessage")
  }
  uint64_t v5 = v6;
LABEL_17:
}

void sub_100047850(uint64_t a1, int a2, int a3, int a4, int a5, int a6, const void *a7, int a8)
{
  unsigned int v37 = 0;
  if (!a1 || !qword_10027D620)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null device or metrics", @"WiFiMetricsManagerSubmitWiFiLinkChangeData"];
    }
    goto LABEL_48;
  }
  if (sub_1000931BC(*(void *)(qword_10027D620 + 16)) == 1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Camera is in Foreground", "WiFiMetricsManagerSubmitWiFiLinkChangeData")];
    }
    goto LABEL_48;
  }
  uint64_t v17 = malloc_type_malloc(0x430uLL, 0x1060040CDC2EB47uLL);
  if (!v17)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null wifiLinkChangeDataMetric", "WiFiMetricsManagerSubmitWiFiLinkChangeData"];
    }
LABEL_48:
    goto LABEL_41;
  }
  uint64_t v18 = (uint64_t)v17;
  bzero(v17, 0x430uLL);
  *(unsigned char *)(v18 + 844) = a2 != 0;
  *(unsigned char *)(v18 + 845) = a3 != 0;
  *(_DWORD *)(v18 + 848) = a4;
  *(_DWORD *)(v18 + 852) = a5;
  *(_DWORD *)(v18 + 856) = a6;
  *(_DWORD *)(v18 + 1064) = a8;
  if (!sub_100047BE4(a1, v18))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: lqm history preparation failed", "WiFiMetricsManagerSubmitWiFiLinkChangeData")];
    }
LABEL_53:
    goto LABEL_16;
  }
  CFDictionaryRef v19 = (const void *)sub_10005FC0C(a1);
  if (sub_10006F1D0(a1, v19, &v37))
  {
    *(_DWORD *)(v18 + 884) = 16;
    *(unsigned char *)(v18 + 881) = v37;
  }
  if (!a7)
  {
    if (!a2)
    {
      if (*(double *)&qword_10027D628 == 0.0) {
        double v20 = 0.0;
      }
      else {
        double v20 = CFAbsoluteTimeGetCurrent() - *(double *)&qword_10027D628;
      }
      *(double *)(v18 + 952) = v20;
      size_t v21 = sub_100071800(a1);
      if (v21)
      {
        char v22 = v21;
        sub_100047E2C(a1, v18, v21);
        sub_100049044(a1, v22, v18);
        CFRelease(v22);
      }
      goto LABEL_16;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: QFALOG Link up event but there is no valid network. Nothing to submit here.", "WiFiMetricsManagerSubmitWiFiLinkChangeData")];
    }
    goto LABEL_53;
  }
  qword_10027D628 = CFAbsoluteTimeGetCurrent();
  *(void *)(v18 + 952) = 0;
  sub_100047E2C(a1, v18, a7);
  sub_100049044(a1, a7, v18);
LABEL_16:
  int v23 = *(const void **)(v18 + 960);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(v18 + 960) = 0;
  }
  id v24 = *(const void **)(v18 + 968);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(v18 + 968) = 0;
  }
  CFDictionaryRef v25 = *(const void **)(v18 + 976);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(v18 + 976) = 0;
  }
  long long v26 = *(const void **)(v18 + 984);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(v18 + 984) = 0;
  }
  id v27 = *(const void **)(v18 + 992);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(v18 + 992) = 0;
  }
  id v28 = *(const void **)(v18 + 1000);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(v18 + 1000) = 0;
  }
  CFNumberRef v29 = *(const void **)(v18 + 1008);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(v18 + 1008) = 0;
  }
  CFNumberRef v30 = *(const void **)(v18 + 1016);
  if (v30)
  {
    CFRelease(v30);
    *(void *)(v18 + 1016) = 0;
  }
  uint64_t v31 = *(const void **)(v18 + 1024);
  if (v31)
  {
    CFRelease(v31);
    *(void *)(v18 + 1024) = 0;
  }
  CFDictionaryRef v32 = *(const void **)(v18 + 1032);
  if (v32)
  {
    CFRelease(v32);
    *(void *)(v18 + 1032) = 0;
  }
  CFIndex v33 = *(const void **)(v18 + 1040);
  if (v33)
  {
    CFRelease(v33);
    *(void *)(v18 + 1040) = 0;
  }
  uint64_t v34 = *(const void **)(v18 + 1048);
  if (v34) {
    CFRelease(v34);
  }
  free((void *)v18);
LABEL_41:
}

uint64_t sub_100047BE4(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: device is NULL", "__WiFiMetricsManagerPrepareLqmHistoryArray"];
    }
    goto LABEL_23;
  }
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  if (!sub_100068C2C(a1, (uint64_t)v9, 0))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: cca history preparation failed", "__WiFiMetricsManagerPrepareLqmHistoryArray")];
    }
    goto LABEL_23;
  }
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  if (!sub_100068C2C(a1, (uint64_t)v7, 1))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: rssi history preparation failed", @"__WiFiMetricsManagerPrepareLqmHistoryArray"];
    }
    goto LABEL_23;
  }
  for (uint64_t i = 0; i != 120; i += 4)
    *(_DWORD *)(a2 + i) = *(_DWORD *)((char *)v7 + i) | (*(_DWORD *)((char *)v9 + i) << 24);
  if (!sub_100068D8C(a1, a2))
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: tx rx history preparation failed", "__WiFiMetricsManagerPrepareLqmHistoryArray"];
    }
    goto LABEL_23;
  }
  if (!sub_100068F14(a1, a2))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Encoding PerCore Rssi failed", @"__WiFiMetricsManagerPrepareLqmHistoryArray"];
    }
    goto LABEL_23;
  }
  if (!sub_100069070(a1, a2))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: GateWay ARP history preparation failed", "__WiFiMetricsManagerPrepareLqmHistoryArray"];
    }
LABEL_23:
    return 0;
  }
  return 1;
}

void sub_100047E2C(uint64_t a1, uint64_t a2, const void *a3)
{
  CFStringRef v6 = (const __CFString *)sub_10001E404((uint64_t)a3, @"BSSID");
  id v7 = (void *)sub_10000D990((uint64_t)"__WiFiMetricsManagerCopyLinkChangeNetworkParams");
  if (!qword_10027D620)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null metrics", "__WiFiMetricsManagerCopyLinkChangeNetworkParams")];
    }
    goto LABEL_234;
  }
  if (!v6)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null networkBSSID", "__WiFiMetricsManagerCopyLinkChangeNetworkParams"];
    }
LABEL_234:
    goto LABEL_226;
  }
  CFDictionaryRef v8 = (const __CFDictionary *)sub_10001E404((uint64_t)a3, @"WPS_PROB_RESP_IE");
  CFDictionaryRef v139 = (const __CFDictionary *)sub_10001E404((uint64_t)a3, @"APPLE_IE");
  CFDictionaryRef v138 = (const __CFDictionary *)sub_10001E404((uint64_t)a3, @"80211D_IE");
  if (v8)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s QFA WPS PROBE RESPONSE IE found in link change metric", "__WiFiMetricsManagerCopyLinkChangeNetworkParams")];
    }
LABEL_6:
    goto LABEL_14;
  }
  CFArrayRef v10 = (const __CFArray *)sub_1000830B8(*(void *)(qword_10027D620 + 16));
  if (!v10) {
    goto LABEL_13;
  }
  CFArrayRef v11 = v10;
  uint64_t Count = CFArrayGetCount(v10);
  if (Count < 1) {
    goto LABEL_13;
  }
  v145.CFIndex length = Count;
  v145.id location = 0;
  FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v11, v145, a3);
  if ((FirstIndexOfValue & 0x8000000000000000) == 0
    && (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v11, FirstIndexOfValue)) != 0
    && (uint64_t v15 = (uint64_t)ValueAtIndex,
        (CFStringRef v16 = (const __CFString *)sub_10001E404((uint64_t)ValueAtIndex, @"BSSID")) != 0)
    && CFStringCompare(v6, v16, 1uLL) == kCFCompareEqualTo)
  {
    CFDictionaryRef v8 = (const __CFDictionary *)sub_10001E404(v15, @"WPS_PROB_RESP_IE");
    if (v8)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s QFA WPS PROBE RESPONSE IE found in Known networks cache", "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
      }
      goto LABEL_6;
    }
  }
  else
  {
LABEL_13:
    CFDictionaryRef v8 = 0;
  }
LABEL_14:
  CFStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  if (sub_10009E30C(*(unsigned int **)(qword_10027D620 + 16), (uint64_t)Mutable)) {
    *(void *)(a2 + 960) = CFStringCreateCopy(kCFAllocatorDefault, Mutable);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  unsigned int v18 = sub_10009E464(*(void *)(qword_10027D620 + 16));
  *(void *)(a2 + 968) = CFStringCreateWithFormat(0, 0, @"%d", v18);
  CFDataRef v19 = sub_1000C6CA8((uint64_t)a3);
  if (v19)
  {
    CFDataRef v20 = v19;
    v146.id location = 0;
    v146.CFIndex length = 3;
    CFDataGetBytes(v19, v146, (UInt8 *)(a2 + 888));
    CFRelease(v20);
  }
  CFNumberRef v21 = (const __CFNumber *)sub_100024070((uint64_t)a3);
  if (v21) {
    CFNumberGetValue(v21, kCFNumberSInt32Type, (void *)(a2 + 864));
  }
  CFNumberRef v22 = (const __CFNumber *)sub_1000C9A78((uint64_t)a3);
  if (v22) {
    CFNumberGetValue(v22, kCFNumberSInt32Type, (void *)(a2 + 868));
  }
  *(_DWORD *)(a2 + 872) = sub_1000059B0((uint64_t)a3);
  *(_DWORD *)(a2 + 876) = sub_1000C9AF8((uint64_t)a3);
  int v23 = sub_1000C745C(a3);
  if (sub_10001BB2C((BOOL)a3)) {
    v23 |= 0x20u;
  }
  if (sub_1000C7420((uint64_t)a3)) {
    v23 |= 0x40u;
  }
  if (sub_10001E404((uint64_t)a3, @"80211D_IE")) {
    v23 |= 8u;
  }
  if (sub_10009EB70(*(void *)(qword_10027D620 + 16))) {
    v23 |= 0x80u;
  }
  if (sub_1000199C0((uint64_t)a3)) {
    v23 |= 0x100u;
  }
  if (sub_1000CE714((uint64_t)a3)) {
    v23 |= 0x800u;
  }
  if (sub_1000CDCE4((uint64_t)a3)) {
    v23 |= 0x400u;
  }
  CFNumberRef v24 = (const __CFNumber *)sub_10001E404((uint64_t)a3, @"NetworkAtLocationOfInterestType");
  if (v24)
  {
    *(_DWORD *)int valuePtr = 0;
    CFNumberGetValue(v24, kCFNumberSInt32Type, valuePtr);
    int v25 = v23 | 0x1000;
    if (*(_DWORD *)valuePtr != 2) {
      int v25 = v23;
    }
    if (*(_DWORD *)valuePtr == 5) {
      int v23 = v25 | 0x2000;
    }
    else {
      int v23 = v25;
    }
  }
  if (sub_1000CF7A8(a3)) {
    v23 |= 0x4000u;
  }
  if (sub_1000CBBE4((uint64_t)a3)) {
    v23 |= 2u;
  }
  if (sub_1000C74BC((uint64_t)a3)) {
    v23 |= 4u;
  }
  if (sub_10001E71C((uint64_t)a3)) {
    v23 |= 0x20000u;
  }
  if (sub_10001E404((uint64_t)a3, @"WiFiInstantHotspotJoining") == kCFBooleanTrue) {
    v23 |= 0x40000u;
  }
  if (sub_10001E404((uint64_t)a3, @"WiFiAutoInstantHotspotJoining") == kCFBooleanTrue)
  {
    if (sub_1000A7E70(*(void *)(qword_10027D620 + 16)) == 2) {
      int v26 = 0x100000;
    }
    else {
      int v26 = 0x80000;
    }
    v23 |= v26;
  }
  if (sub_10001E404((uint64_t)a3, @"WiFiNetworkAttributeIsPublic")) {
    v23 |= 0x200000u;
  }
  if (sub_10001E404((uint64_t)a3, @"WiFiNetworkAttributeIsMoving")) {
    v23 |= 0x400000u;
  }
  id v27 = sub_10001E404((uint64_t)a3, @"WiFiNetworkAttributeIsLowQuality");
  int v28 = v23 | 0x800000;
  if (!v27) {
    int v28 = v23;
  }
  *(_DWORD *)(a2 + 884) = v28;
  CFDictionaryRef v29 = v138;
  if (v8)
  {
    *(_DWORD *)(a2 + 884) = v28 | 0x8000;
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s QFALOG : wps in probe response present ", "__WiFiMetricsManagerCopyLinkChangeNetworkParams")];
    }
  }
  if (v139) {
    *(_DWORD *)(a2 + 884) |= 0x10000u;
  }
  if (v138) {
    *(_DWORD *)(a2 + 884) |= 8u;
  }
  *(unsigned char *)(a2 + 892) = sub_1000C8A5C((uint64_t)a3);
  if (sub_100072C28(a1)) {
    BOOL v31 = sub_1000C6FE8((const __CFDictionary *)a3) != 0;
  }
  else {
    BOOL v31 = 0;
  }
  *(_DWORD *)int valuePtr = -1431655766;
  uint64_t v32 = sub_1000732F4(a1, valuePtr);
  uint64_t v137 = a1;
  if (v32)
  {
    uint64_t v33 = v32;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, @"%s: fail to get auth type (%d)", @"__WiFiGetAuthType", v33];
    }
    int v35 = 111;
  }
  else
  {
    uint64_t v36 = *(unsigned int *)valuePtr;
    BOOL v37 = sub_1000C66D0((BOOL)a3);
    int v35 = sub_100046B20(v36, v37, v31);
  }
  *(_DWORD *)(a2 + 908) = v35;
  if (sub_1000C7E30((BOOL)a3) || sub_10001FC1C((uint64_t)a3))
  {
    unint64_t v38 = (unint64_t)sub_10001E404((uint64_t)a3, @"WPA_IE");
    CFDictionaryRef v39 = (const __CFDictionary *)sub_10001E404((uint64_t)a3, @"RSN_IE");
    if ((unint64_t)v39 | v38)
    {
      CFDictionaryRef v40 = v39;
      if (v39)
      {
        *(_WORD *)(a2 + 894) = 2;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v39, @"IE_KEY_RSN_MCIPHER");
        CFArrayRef v42 = (const __CFArray *)CFDictionaryGetValue(v40, @"IE_KEY_RSN_UCIPHERS");
        CFArrayRef v43 = (const __CFArray *)CFDictionaryGetValue(v40, @"IE_KEY_RSN_AUTHSELS");
        CFDictionaryRef v44 = (const __CFDictionary *)CFDictionaryGetValue(v40, @"IE_KEY_RSN_CAPS");
        if (!Value) {
          goto LABEL_87;
        }
      }
      else
      {
        if (!v38) {
          goto LABEL_111;
        }
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (!sub_10005A924(TypeID, (CFTypeRef)v38)) {
          goto LABEL_111;
        }
        *(_WORD *)(a2 + 894) = 1;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v38, @"IE_KEY_WPA_MCIPHER");
        CFArrayRef v42 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v38, @"IE_KEY_WPA_UCIPHERS");
        CFArrayRef v43 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v38, @"IE_KEY_WPA_AUTHSELS");
        CFDictionaryRef v44 = 0;
        if (!Value) {
          goto LABEL_87;
        }
      }
      *(_WORD *)(a2 + 896) = (unsigned __int16)sub_100059360(Value);
LABEL_87:
      if (v42)
      {
        *(_WORD *)(a2 + 898) = 0;
        if (CFArrayGetCount(v42) >= 1)
        {
          CFIndex v45 = 0;
          do
          {
            CFNumberRef v46 = (const __CFNumber *)CFArrayGetValueAtIndex(v42, v45);
            *(_WORD *)(a2 + 898) |= (unsigned __int16)sub_100059360(v46);
            ++v45;
          }
          while (v45 < CFArrayGetCount(v42));
        }
      }
      if (v43)
      {
        *(_DWORD *)(a2 + 900) = 0;
        if (CFArrayGetCount(v43) >= 1)
        {
          CFIndex v47 = 0;
          do
          {
            CFNumberRef v48 = (const __CFNumber *)CFArrayGetValueAtIndex(v43, v47);
            if (v48
              && (*(_DWORD *)int valuePtr = -1431655766, CFNumberGetValue(v48, kCFNumberSInt32Type, valuePtr))
              && (*(_DWORD *)valuePtr - 1) <= 0x18)
            {
              int v49 = dword_1001CB340[*(_DWORD *)valuePtr - 1];
            }
            else
            {
              int v49 = 0;
            }
            *(_DWORD *)(a2 + 900) |= v49;
            ++v47;
          }
          while (v47 < CFArrayGetCount(v43));
        }
      }
      CFDictionaryRef v29 = v138;
      if (v44)
      {
        *(_DWORD *)(a2 + 904) = 0;
        CFBooleanRef v50 = (const __CFBoolean *)CFDictionaryGetValue(v44, @"PRE_AUTH");
        if (v50 && CFBooleanGetValue(v50)) {
          *(_DWORD *)(a2 + 904) |= 1u;
        }
        CFBooleanRef v51 = (const __CFBoolean *)CFDictionaryGetValue(v44, @"NO_PAIRWISE");
        if (v51 && CFBooleanGetValue(v51)) {
          *(_DWORD *)(a2 + 904) |= 2u;
        }
      }
    }
  }
LABEL_111:
  CFDictionaryRef v53 = (const __CFDictionary *)sub_10001E404((uint64_t)a3, @"HT_CAPS_IE");
  if (v53)
  {
    CFDictionaryRef v54 = v53;
    CFNumberRef v55 = (const __CFNumber *)CFDictionaryGetValue(v53, @"CAPS");
    if (v55) {
      CFNumberGetValue(v55, kCFNumberSInt16Type, (void *)(a2 + 912));
    }
    CFNumberRef v56 = (const __CFNumber *)CFDictionaryGetValue(v54, @"AMPDU_PARAMS");
    if (v56) {
      CFNumberGetValue(v56, kCFNumberSInt8Type, (void *)(a2 + 921));
    }
    CFNumberRef v57 = (const __CFNumber *)CFDictionaryGetValue(v54, @"TXBF_CAPS");
    if (v57) {
      CFNumberGetValue(v57, kCFNumberSInt32Type, (void *)(a2 + 916));
    }
    CFNumberRef v58 = (const __CFNumber *)CFDictionaryGetValue(v54, @"EXT_CAPS");
    if (v58) {
      CFNumberGetValue(v58, kCFNumberSInt16Type, (void *)(a2 + 914));
    }
    CFNumberRef v59 = (const __CFNumber *)CFDictionaryGetValue(v54, @"ASEL_CAPS");
    if (v59) {
      CFNumberGetValue(v59, kCFNumberSInt8Type, (void *)(a2 + 920));
    }
    CFDataRef v60 = (const __CFData *)CFDictionaryGetValue(v54, @"MCS_SET");
    if (v60)
    {
      v147.id location = 0;
      v147.CFIndex length = 16;
      CFDataGetBytes(v60, v147, (UInt8 *)(a2 + 922));
    }
  }
  if (!v8) {
    goto LABEL_182;
  }
  CFDictionaryRef v61 = (const __CFDictionary *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_PRIMARY_DEV_TYPE");
  valuePtr[0] = -21846;
  CFNumberRef v62 = (const __CFNumber *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_CFG_METHODS");
  if (v62 && (v63 = v62, CFTypeID v64 = CFNumberGetTypeID(), v64 == CFGetTypeID(v63)))
  {
    CFNumberGetValue(v63, kCFNumberSInt16Type, valuePtr);
    CFStringRef v65 = CFStringCreateWithFormat(0, 0, @"%d", valuePtr[0]);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: bad type for wpsConfigMethods. Not a CFNumber or NULL", "__WiFiMetricsManagerCopyLinkChangeNetworkParams")
    }
    CFStringRef v65 = 0;
  }
  *(void *)(a2 + 1048) = v65;
  CFStringRef v67 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_MODEL_NAME");
  if (v67 && (v68 = v67, CFTypeID v69 = CFStringGetTypeID(), v69 == CFGetTypeID(v68)))
  {
    CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v68);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: bad type for wpsModelName. Not a CFString or NULL" args:("__WiFiMetricsManagerCopyLinkChangeNetworkParams")];
    }
    CFStringRef Copy = 0;
  }
  *(void *)(a2 + 1000) = Copy;
  CFStringRef v72 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_MODEL_NUM");
  if (v72 && (CFStringRef v73 = v72, v74 = CFStringGetTypeID(), v74 == CFGetTypeID(v73)))
  {
    CFStringRef v75 = CFStringCreateCopy(kCFAllocatorDefault, v73);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: bad type for wpsModelNumber. Not a CFString or NULL", @"__WiFiMetricsManagerCopyLinkChangeNetworkParams"];
    }
    CFStringRef v75 = 0;
  }
  *(void *)(a2 + 1008) = v75;
  CFStringRef v77 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_MANUFACTURER");
  if (v77 && (v78 = v77, CFTypeID v79 = CFStringGetTypeID(), v79 == CFGetTypeID(v78)))
  {
    CFStringRef v80 = CFStringCreateCopy(kCFAllocatorDefault, v78);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: bad type for wpsManufacturerElement. Not a CFString or NULL", "__WiFiMetricsManagerCopyLinkChangeNetworkParams")];
    }
    CFStringRef v80 = 0;
  }
  *(void *)(a2 + 992) = v80;
  CFStringRef v82 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_DEV_NAME");
  if (v82 && (CFStringRef v83 = v82, v84 = CFStringGetTypeID(), v84 == CFGetTypeID(v83)))
  {
    CFStringRef v85 = CFStringCreateCopy(kCFAllocatorDefault, v83);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: bad type for wpsDeviceNameElement. Not a CFString or NULL", @"__WiFiMetricsManagerCopyLinkChangeNetworkParams"];
    }
    CFStringRef v85 = 0;
  }
  *(void *)(a2 + 1032) = v85;
  uint64_t v87 = CFDictionaryGetValue(v8, @"IE_KEY_WPS_DEV_NAME_DATA");
  if (!v87 || (unsigned int v88 = v87, v89 = CFDataGetTypeID(), v89 != CFGetTypeID(v88)))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: wpsDeviceNameData value is NULL or bad type for wpsDeviceNameData. Not a CFDataType ", @"__WiFiMetricsManagerCopyLinkChangeNetworkParams"];
    }
    *(void *)(a2 + 1040) = 0;
    if (!v61) {
      goto LABEL_175;
    }
    goto LABEL_162;
  }
  CFIndex Length = CFDataGetLength((CFDataRef)v88);
  double v91 = (UInt8 *)malloc_type_malloc(Length, 0x100004077774924uLL);
  v148.id location = 0;
  v148.CFIndex length = Length;
  CFDataGetBytes((CFDataRef)v88, v148, v91);
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  *(void *)(a2 + 1040) = CFStringCreateWithBytes(kCFAllocatorDefault, v91, Length, SystemEncoding, 0);
  uint64_t v93 = v91;
  CFDictionaryRef v29 = v138;
  free(v93);
  if (v61)
  {
LABEL_162:
    unsigned __int16 v143 = -21846;
    unsigned __int16 v142 = -21846;
    CFNumberRef v95 = (const __CFNumber *)CFDictionaryGetValue(v61, @"WPS_DEV_TYPE_CAT");
    if (v95 && (CFNumberRef v96 = v95, v97 = CFNumberGetTypeID(), v97 == CFGetTypeID(v96)))
    {
      CFNumberGetValue(v96, kCFNumberSInt16Type, &v143);
      CFStringRef v98 = CFStringCreateWithFormat(0, 0, @"%d", v143);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: bad type for wpsPrimaryDeviceTypeCategory. Not a CFNumberType or NULL", @"__WiFiMetricsManagerCopyLinkChangeNetworkParams"];
      }
      CFStringRef v98 = 0;
    }
    *(void *)(a2 + 1016) = v98;
    CFNumberRef v100 = (const __CFNumber *)CFDictionaryGetValue(v61, @"WPS_DEV_TYPE_SUB_CAT");
    if (v100 && (v101 = v100, CFTypeID v102 = CFNumberGetTypeID(), v102 == CFGetTypeID(v101)))
    {
      CFNumberGetValue(v101, kCFNumberSInt16Type, &v142);
      CFStringRef v103 = CFStringCreateWithFormat(0, 0, @"%d", v142);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: bad type for wpsPrimaryDeviceTypeSubCategory. Not a CFNumberType or NULL", @"__WiFiMetricsManagerCopyLinkChangeNetworkParams"];
      }
      CFStringRef v103 = 0;
    }
    *(void *)(a2 + 1024) = v103;
  }
LABEL_175:
  LOBYTE(v143) = -86;
  CFNumberRef v105 = (const __CFNumber *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_RESP_TYPE");
  if (v105 && (CFNumberRef v106 = v105, v107 = CFNumberGetTypeID(), v107 == CFGetTypeID(v106)))
  {
    CFNumberGetValue(v106, kCFNumberSInt8Type, &v143);
    CFStringRef v108 = CFStringCreateWithFormat(0, 0, @"%d", v143);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: bad type for wpsResponseType. Not a CFNumberType or NULL", @"__WiFiMetricsManagerCopyLinkChangeNetworkParams"];
    }
    CFStringRef v108 = 0;
  }
  *(void *)(a2 + 984) = v108;
LABEL_182:
  if (v139)
  {
    LOBYTE(valuePtr[0]) = -86;
    CFNumberRef v110 = (const __CFNumber *)CFDictionaryGetValue(v139, @"APPLE_IE_PRODUCT_ID");
    if (v110 && (CFNumberRef v111 = v110, v112 = CFNumberGetTypeID(), v112 == CFGetTypeID(v111)))
    {
      CFNumberGetValue(v111, kCFNumberSInt8Type, valuePtr);
      CFStringRef v113 = CFStringCreateWithFormat(0, 0, @"%d", LOBYTE(valuePtr[0]));
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: bad type for wpsResponseType. Not a CFNumberType or NULL", @"__WiFiMetricsManagerCopyLinkChangeNetworkParams"];
      }
      CFStringRef v113 = 0;
    }
    *(void *)(a2 + 1008) = v113;
  }
  if (v29)
  {
    CFStringRef v115 = (const __CFString *)CFDictionaryGetValue(v29, @"IE_KEY_80211D_COUNTRY_CODE");
    if (v115 && (CFStringRef v116 = v115, v117 = CFStringGetTypeID(), v117 == CFGetTypeID(v116)))
    {
      CFStringRef v118 = CFStringCreateCopy(kCFAllocatorDefault, v116);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: bad type for countryCode. Not a CFString or NULL", @"__WiFiMetricsManagerCopyLinkChangeNetworkParams"];
      }
      CFStringRef v118 = 0;
    }
    *(void *)(a2 + 976) = v118;
  }
  CFDictionaryRef v120 = (const __CFDictionary *)sub_10001E404((uint64_t)a3, @"VHT_CAPS_IE");
  if (v120)
  {
    CFDictionaryRef v121 = v120;
    CFNumberRef v122 = (const __CFNumber *)CFDictionaryGetValue(v120, @"VHT_CAPS");
    if (v122) {
      CFNumberGetValue(v122, kCFNumberSInt32Type, (void *)(a2 + 940));
    }
    CFDataRef v123 = (const __CFData *)CFDictionaryGetValue(v121, @"VHT_SUPPORTED_MCS_SET");
    if (v123)
    {
      v149.id location = 0;
      v149.CFIndex length = 8;
      CFDataGetBytes(v123, v149, (UInt8 *)(a2 + 944));
    }
  }
  if (qword_10027DD68) {
    objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: OUI:%02x:%02x:%02x Channel:%d(%dMHz) Flags:0x%x PhyMode:0x%x Security:0x%x WPA:[Prot:0x%x McastCipher:0x%x UcastCipher:0x%x AKM:0x%x Caps:0x%x] HT:[Info:0x%x AMPDU:0x%x TXBF:0x%x Ext:0x%x ASEL:0x%x] VHT:[Info:0x%x]", "__WiFiMetricsManagerCopyLinkChangeNetworkParams", *(unsigned __int8 *)(a2 + 888), *(unsigned __int8 *)(a2 + 889), *(unsigned __int8 *)(a2 + 890), *(unsigned int *)(a2 + 864), *(unsigned int *)(a2 + 872), *(unsigned int *)(a2 + 884), *(unsigned int *)(a2 + 876), *(unsigned __int8 *)(a2 + 892), *(unsigned __int16 *)(a2 + 894), *(unsigned __int16 *)(a2 + 896), *(unsigned __int16 *)(a2 + 898), *(unsigned int *)(a2 + 900), *(unsigned int *)(a2 + 904),
  }
      *(unsigned __int16 *)(a2 + 912),
      *(unsigned __int8 *)(a2 + 921),
      *(unsigned int *)(a2 + 916),
      *(unsigned __int16 *)(a2 + 914),
      *(unsigned __int8 *)(a2 + 920),
      *(unsigned int *)(a2 + 940));
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: QFALOG Metrics in link change metric: Metric Container has: Locale: %@ LocaleSource: %@ CountryCode: %@ wpsDeviceNameElement: %@ wpsManufacturerElement: %@ wpsModelName: %@ wpsModelNumber: %@ ", "__WiFiMetricsManagerCopyLinkChangeNetworkParams", *(void *)(a2 + 960), *(void *)(a2 + 968), *(void *)(a2 + 976), *(void *)(a2 + 1032), *(void *)(a2 + 992), *(void *)(a2 + 1000), *(void *)(a2 + 1008) message];
  }
  char v126 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  double v127 = v126;
  uint64_t v128 = *(const void **)(a2 + 992);
  if (v128) {
    CFDictionaryAddValue(v126, @"ManufacturerElement", v128);
  }
  unsigned int v129 = *(const void **)(a2 + 1000);
  if (v129) {
    CFDictionaryAddValue(v127, @"ModelName", v129);
  }
  double v130 = *(const void **)(a2 + 1008);
  if (v130) {
    CFDictionaryAddValue(v127, @"ModelNumber", v130);
  }
  double v131 = *(const void **)(a2 + 1032);
  if (v131) {
    CFDictionaryAddValue(v127, @"DeviceNameElement", v131);
  }
  int v132 = *(const void **)(a2 + 1040);
  if (v132) {
    CFDictionaryAddValue(v127, @"DeviceNameData", v132);
  }
  CFIndex v133 = CFDictionaryGetCount(v127);
  if (v137 && v133)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: updating AccessPointInfo: %@", "__WiFiMetricsManagerCopyLinkChangeNetworkParams", v127 message];
    }
    sub_100073C40(v137, v127);
  }
  unint64_t v140 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v141 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000C6EA4((uint64_t)a3, &v141, &v140);
  *(_DWORD *)(a2 + 1056) = v141;
  *(_DWORD *)(a2 + 1060) = v140;
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: minSupportDataRate %d, maxSupportDataRate %d", "__WiFiMetricsManagerCopyLinkChangeNetworkParams", *(unsigned int *)(a2 + 1056), *(unsigned int *)(a2 + 1060)];
  }
  if (v127) {
    CFRelease(v127);
  }
LABEL_226:
}

void sub_100049044(uint64_t a1, const void *a2, uint64_t a3)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null device", @"__WiFiMetricsManagerWAMessageUpdateDBWithLinkChange"];
    }
    goto LABEL_53;
  }
  if (!a3)
  {
    CFNumberRef v21 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFNumberRef v22 = "%s: wifiLinkChangeDataMetric null";
LABEL_52:
      [v21 WFLog:4 message:v22 __WiFiMetricsManagerWAMessageUpdateDBWithLinkChange];
    }
LABEL_53:
    goto LABEL_45;
  }
  id v7 = objc_alloc((Class)WAMessage);
  id v8 = [v7 initWithMetricName:kWAMessageMetricNameLinkChange options:6];
  if (!v8)
  {
    CFNumberRef v21 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFNumberRef v22 = "%s: Failed to alloc WAMessage for LinkChange";
      goto LABEL_52;
    }
    goto LABEL_53;
  }
  CFArrayRef v9 = v8;
  [v8 addFieldForKey:kWAMessageKeyIsLinkUp value:[NSNumber numberWithBool:*(unsigned __int8 *)(a3 + 844)] options:7];
  [v9 addFieldForKey:kWAMessageKeyIsInVoluntary value:[NSNumber numberWithBool:*((unsigned __int8 *)(a3 + 845))] options:7];
  [v9 addFieldForKey:kWAMessageKeyReason value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a3 + 848)] options:7];
  [v9 addFieldForKey:kWAMessageKeySubReason value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a3 + 852)] options:7];
  [v9 addFieldForKey:kWAMessageKeyCachedRSSI value:[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a3 + 856)) options:7];
  [v9 addFieldForKey:kWAMessageKeyNetworkAuthFlags value:[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a3 + 892)) options:7];
  if (!*(unsigned char *)(a3 + 844))
  {
    sub_100059528(v9, a1, 1, a3);
    [v9 addFieldForKey:kWAMessageKeyChannelWidth value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a3 + 872)] options:7];
    [v9 addFieldForKey:kWAMessageKeyPhyMode value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a3 + 876)] options:7];
    [v9 addFieldForKey:kWAMessageKeyReserved value:[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a3 + 880)) options:7];
    [v9 addFieldForKey:kWAMessageKeyAwdlState value:[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a3 + 881)) options:7];
    [v9 addFieldForKey:kWAMessageKeyNetworkFlags value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a3 + 884)] options:7];
    sub_1000593C0(v9, kWAMessageKeyOUI, a3 + 888, 3u, 1);
    [v9 addFieldForKey:kWAMessageKeyWPAProtocol value:[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)(a3 + 894))] options:7];
    [v9 addFieldForKey:kWAMessageKeyMCastCipher value:[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a3 + 896)] options:7];
    [v9 addFieldForKey:kWAMessageKeyUCastCiphers value:[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a3 + 898)] options:7];
    [v9 addFieldForKey:kWAMessageKeyAKMSuites value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a3 + 900)] options:7];
    [v9 addFieldForKey:kWAMessageKeyCapabilities value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a3 + 904)] options:7];
    [v9 addFieldForKey:kWAMessageKeyEnhancedSecurityType value:[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a3 + 908)] options:7];
    [v9 addFieldForKey:kWAMessageKeyHTInfo value:[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a3 + 912)] options:7];
    [v9 addFieldForKey:kWAMessageKeyHTCapExt value:[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a3 + 914)] options:7];
    [v9 addFieldForKey:kWAMessageKeyHTCapTxBF value:[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a3 + 916)] options:7];
    [v9 addFieldForKey:kWAMessageKeyHTCapASel value:[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a3 + 920)) options:7];
    [v9 addFieldForKey:kWAMessageKeyAMPDUParams value:[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a3 + 921)) options:7];
    [v9 addFieldForKey:kWAMessageKeyVHTInfo value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a3 + 940)] options:7];
    [v9 addFieldForKey:kWAMessageKeyAssociationDuration value:[NSNumber numberWithDouble:*((double *)(a3 + 952))] options:7];
    if (*(void *)(a3 + 960)) {
      [v9 addFieldForKey:kWAMessageKeyLocale value:[NSString stringWithString:@"stringWithString:" options:7];
    }
    if (*(void *)(a3 + 968)) {
      [v9 addFieldForKey:kWAMessageKeyLocaleSource value:[NSString stringWithString:@"stringWithString:" options:7];
    }
    if (*(void *)(a3 + 976)) {
      [v9 addFieldForKey:kWAMessageKeyCountryCode value:[NSString stringWithString:@"stringWithString:"] options:7];
    }
    if (*(void *)(a3 + 984)) {
      [v9 addFieldForKey:kWAMessageKeyWPSResponseType value:[NSString stringWithString:@"stringWithString:" options:7];
    }
    if (*(void *)(a3 + 992)) {
      [v9 addFieldForKey:kWAMessageKeyWPSMfgElement value:[NSString stringWithString:@"stringWithString:"] options:7];
    }
    if (*(void *)(a3 + 1000)) {
      [v9 addFieldForKey:kWAMessageKeyWPSModelName value:[NSString stringWithString:@"stringWithString:" options:7];
    }
    if (*(void *)(a3 + 1008)) {
      [v9 addFieldForKey:kWAMessageKeyWPSModelNum value:[NSString stringWithString:@"stringWithString:" options:7];
    }
    if (*(void *)(a3 + 1016)) {
      [v9 addFieldForKey:kWAMessageKeyWPSPrimaryDeviceTypeCategory value:[NSString stringWithString:@"stringWithString:"] options:7];
    }
    if (*(void *)(a3 + 1024)) {
      [v9 addFieldForKey:kWAMessageKeyWPSPrimaryDeviceTypeSubCategory value:[NSString stringWithString:@"stringWithString:"] options:7];
    }
    if (*(void *)(a3 + 1032)) {
      [v9 addFieldForKey:kWAMessageKeyWPSPrimaryDeviceNameElement value:[NSString stringWithString:](NSString, "stringWithString:") options:7];
    }
    if (*(void *)(a3 + 1040)) {
      [v9 addFieldForKey:kWAMessageKeyWPSPrimaryDeviceNameData value:[NSString stringWithString:@"stringWithString:" options:7];
    }
    if (*(void *)(a3 + 1048)) {
      [v9 addFieldForKey:kWAMessageKeyWPSPrimaryConfigMethods value:[NSString stringWithString:@"stringWithString:"] options:7];
    }
  }
  CFArrayRef v10 = sub_10001A43C(a2);
  CFArrayRef v11 = sub_10001E404((uint64_t)a2, @"BSSID");
  if (v10) {
    [v9 addFieldForKey:kWAMessageKeySSID value:[NSString stringWithString:v10] options:6];
  }
  if (v11)
  {
    [v9 addFieldForKey:kWAMessageKeyBSSID value:[NSString stringWithString:v11] options:6];
    id v12 = +[WiFiUsageAccessPointProfile profileForBSSID:v11];
    if (v12) {
      [v9 addFieldForKey:kWAMessageKeyApProfile value:v12 options:6];
    }
  }
  [v9 addFieldForKey:kWAMessageKeyChannel value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a3 + 864)] options:7];
  [v9 addFieldForKey:kWAMessageKeyChannelFlags value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a3 + 868)] options:7];
  if (*(unsigned char *)(a3 + 844))
  {
    [v9 addFieldForKey:kWAMessageKeyNetworkUsageRank value:[NSNumber numberWithUnsignedShort:sub_1000CEFEC((uint64_t)a2)] options:6];
    uint64_t v13 = kWAMessageKeyNOIHomeType;
    unsigned int v14 = sub_1000C6B08((uint64_t)a2);
    if (v14 >= 3) {
      uint64_t v15 = 3;
    }
    else {
      uint64_t v15 = v14;
    }
    [v9 addFieldForKey:v13 value:[NSNumber numberWithUnsignedShort:v15] options:6];
    uint64_t v16 = kWAMessageKeyNOIWorkType;
    unsigned int v17 = sub_1000CF14C((uint64_t)a2);
    if (v17 >= 3) {
      uint64_t v18 = 3;
    }
    else {
      uint64_t v18 = v17;
    }
    [v9 addFieldForKey:v16 value:[NSNumber numberWithUnsignedShort:v18] options:6];
    [v9 addFieldForKey:kWAMessageKeyLOIType value:[NSNumber numberWithUnsignedShort:sub_1000CF5AC((uint64_t)a2)] options:6];
    [v9 addFieldForKey:kWAMessageKeyMinSupportDataRate value:[NSNumber numberWithInt:*(unsigned int *)(a3 + 1056)] options:7];
    [v9 addFieldForKey:kWAMessageKeyMaxSupportDataRate value:[NSNumber numberWithInt:*(unsigned int *)(a3 + 1060)] options:7];
  }
  unsigned int v24 = -1431655766;
  uint64_t v23 = 0;
  if (!sub_1000A4494(*(void *)(qword_10027D620 + 16), &v24, &v23)) {
    [v9 addFieldForKey:kWAMessageKeyMotionState value:[NSNumber numberWithUnsignedInt:v24] options:6];
  }
  uint64_t v19 = kWAMessageKeyMetricDate;
  [+[NSDate date] timeIntervalSinceReferenceDate];
  [v9 addFieldForKey:v19 value:[NSNumber numberWithDouble:6]];
  sub_1000476E8(v9);

LABEL_45:
}

void sub_100049B0C(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null device", "WiFiMetricsManagerCollectAwdlUsageAsync"];
    }
    goto LABEL_14;
  }
  if (!qword_10027D620 || !*(void *)(qword_10027D620 + 16))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null metrics manager", "WiFiMetricsManagerCollectAwdlUsageAsync"];
    }
    goto LABEL_14;
  }
  uint64_t v1 = a1;
  int64_t v2 = sub_10005FC0C(a1);
  if (!v2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null awdlIfName" args:("WiFiMetricsManagerCollectAwdlUsageAsync")];
    }
    goto LABEL_14;
  }
  int v3 = (const void *)v2;
  if (CFArrayGetCount(*(CFArrayRef *)(qword_10027D620 + 32)) < 1)
  {
LABEL_12:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: AWDL interface not found in deviceMetricsArray.", @"WiFiMetricsManagerCollectAwdlUsageAsync"];
    }
LABEL_14:
    return;
  }
  CFIndex v4 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(qword_10027D620 + 32), v4);
    if (ValueAtIndex)
    {
      CFStringRef v6 = ValueAtIndex;
      uint64_t v7 = *ValueAtIndex;
      if (v7)
      {
        if (sub_10005FC0C(v7))
        {
          id v8 = (const void *)sub_10005FC0C(*v6);
          if (CFEqual(v3, v8)) {
            break;
          }
        }
      }
    }
    if (++v4 >= CFArrayGetCount(*(CFArrayRef *)(qword_10027D620 + 32))) {
      goto LABEL_12;
    }
  }
  CFArrayRef v10 = (void *)v6[30];
  if (v10)
  {
    free(v10);
    v6[30] = 0;
  }
  CFArrayRef v11 = (void *)v6[32];
  if (v11)
  {
    free(v11);
    v6[32] = 0;
  }
  id v12 = (void *)v6[39];
  if (v12)
  {
    free(v12);
    v6[39] = 0;
  }
  uint64_t v13 = (void *)v6[41];
  if (v13)
  {
    free(v13);
    v6[41] = 0;
  }
  unsigned int v14 = (void *)v6[43];
  if (v14)
  {
    free(v14);
    v6[43] = 0;
  }
  uint64_t v15 = (void *)v6[47];
  if (v15)
  {
    free(v15);
    v6[47] = 0;
  }
  v6[58] = 0;
  *((_OWORD *)v6 + 27) = 0u;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 19) = 0u;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 17) = 0u;
  *((_OWORD *)v6 + 18) = 0u;
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  *((_OWORD *)v6 + 13) = 0u;
  *((_OWORD *)v6 + 14) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  uint64_t v16 = (const void *)sub_10005FC0C(v1);
  CFDictionaryRef v17 = (const __CFDictionary *)sub_10006B628(v1, v16);
  if (!v17)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null stats" args:("WiFiMetricsManagerCollectAwdlUsageAsync", nil)];
    }
    goto LABEL_14;
  }
  CFDictionaryRef v18 = v17;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v17, @"AWDL_STATS_FLAGS");
  if (Value) {
    CFNumberGetValue(Value, kCFNumberSInt32Type, v6 + 24);
  }
  CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_RXBYTES");
  if (v20) {
    CFNumberGetValue(v20, kCFNumberSInt32Type, v6 + 25);
  }
  CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_TXBYTES");
  if (v21) {
    CFNumberGetValue(v21, kCFNumberSInt32Type, (char *)v6 + 204);
  }
  CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PACKET_FAILURES");
  if (v22) {
    CFNumberGetValue(v22, kCFNumberSInt32Type, (char *)v6 + 196);
  }
  CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_SELF_INFRA_CHANNEL");
  if (v23) {
    CFNumberGetValue(v23, kCFNumberSInt32Type, v6 + 22);
  }
  CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_SELF_INFRA_CHANNEL_FLAGS");
  if (v24) {
    CFNumberGetValue(v24, kCFNumberSInt32Type, v6 + 44);
  }
  CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PEER_INFRA_CHANNEL");
  if (v25) {
    CFNumberGetValue(v25, kCFNumberSInt8Type, (char *)v6 + 180);
  }
  CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PEER_INFRA_CHANNEL_FLAGS");
  if (v26) {
    CFNumberGetValue(v26, kCFNumberSInt32Type, (char *)v6 + 356);
  }
  CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_PEERS");
  if (v27) {
    CFNumberGetValue(v27, kCFNumberSInt8Type, (char *)v6 + 181);
  }
  CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS");
  if (v28) {
    CFNumberGetValue(v28, kCFNumberSInt8Type, (char *)v6 + 182);
  }
  CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS_2GHZ");
  if (v29) {
    CFNumberGetValue(v29, kCFNumberSInt8Type, (char *)v6 + 183);
  }
  CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS_5GHZ");
  if (v30) {
    CFNumberGetValue(v30, kCFNumberSInt8Type, v6 + 23);
  }
  CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS_DFS");
  if (v31) {
    CFNumberGetValue(v31, kCFNumberSInt8Type, (char *)v6 + 185);
  }
  CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS_UNASSOC");
  if (v32) {
    CFNumberGetValue(v32, kCFNumberSInt8Type, (char *)v6 + 186);
  }
  CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS_DIFF_INFRA");
  if (v33) {
    CFNumberGetValue(v33, kCFNumberSInt8Type, (char *)v6 + 187);
  }
  CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS_SAME_INFRA");
  if (v34) {
    CFNumberGetValue(v34, kCFNumberSInt8Type, (char *)v6 + 188);
  }
  CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NO_SERVICE_IDLE_TIME");
  if (v35) {
    CFNumberGetValue(v35, kCFNumberSInt32Type, v6 + 28);
  }
  CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PEER_CHANNEL_STEER_BEFORE");
  if (v36) {
    CFNumberGetValue(v36, kCFNumberSInt32Type, v6 + 49);
  }
  CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PEER_CHANNEL_STEER_AFTER");
  if (v37) {
    CFNumberGetValue(v37, kCFNumberSInt32Type, (char *)v6 + 396);
  }
  CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_STATS_DWELL_SESSION_COUNT");
  if (v38) {
    CFNumberGetValue(v38, kCFNumberSInt32Type, v6 + 50);
  }
  CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_AWDL_STATS_SERVICE_COUNT");
  if (v39) {
    CFNumberGetValue(v39, kCFNumberSInt32Type, v6 + 31);
  }
  CFNumberRef v40 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_TOTAL_DURATION");
  if (v40) {
    CFNumberGetValue(v40, kCFNumberSInt32Type, (char *)v6 + 404);
  }
  CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_STATS_INACTIVITY_DURATION");
  if (v41) {
    CFNumberGetValue(v41, kCFNumberSInt32Type, v6 + 51);
  }
  CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_STATS_ACTIVITY_DURATION");
  if (v42) {
    CFNumberGetValue(v42, kCFNumberSInt32Type, (char *)v6 + 412);
  }
  CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PERCENTAGE_INACTIVITY");
  if (v43) {
    CFNumberGetValue(v43, kCFNumberSInt32Type, v6 + 52);
  }
  CFNumberRef v44 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_TIME_TO_SERVICE");
  if (v44) {
    CFNumberGetValue(v44, kCFNumberSInt32Type, (char *)v6 + 420);
  }
  CFNumberRef v45 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PERCENTAGE_INFRA_IDLE");
  if (v45) {
    CFNumberGetValue(v45, kCFNumberSInt32Type, v6 + 53);
  }
  CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PERCENTAGE_INFRA_REAL");
  if (v46) {
    CFNumberGetValue(v46, kCFNumberSInt32Type, (char *)v6 + 428);
  }
  CFNumberRef v47 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PERCENTAGE_INFRA_NONREAL");
  if (v47) {
    CFNumberGetValue(v47, kCFNumberSInt32Type, v6 + 54);
  }
  CFBooleanRef v48 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_AIRPLAY_ACTIVE");
  if (v48) {
    *((unsigned char *)v6 + 448) = CFBooleanGetValue(v48);
  }
  CFBooleanRef v49 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_REMOTECAMERA_ACTIVE");
  if (v49) {
    *((unsigned char *)v6 + 449) = CFBooleanGetValue(v49);
  }
  CFBooleanRef v50 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_REMOTESCREEN_ACTIVE");
  if (v50) {
    *((unsigned char *)v6 + 450) = CFBooleanGetValue(v50);
  }
  CFBooleanRef v51 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_SIDECAR_ACTIVE");
  if (v51) {
    *((unsigned char *)v6 + 451) = CFBooleanGetValue(v51);
  }
  CFBooleanRef v52 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_TVREMOTECAMERA_ACTIVE");
  if (v52) {
    *((unsigned char *)v6 + 452) = CFBooleanGetValue(v52);
  }
  CFBooleanRef v53 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_UNIVERSALCONTROL_ACTIVE");
  if (v53) {
    *((unsigned char *)v6 + 453) = CFBooleanGetValue(v53);
  }
  CFBooleanRef v54 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_STEREOPAIR_ACTIVE ");
  if (v54) {
    *((unsigned char *)v6 + 454) = CFBooleanGetValue(v54);
  }
  CFBooleanRef v55 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_AIRDROP");
  if (v55) {
    *((unsigned char *)v6 + 455) = CFBooleanGetValue(v55);
  }
  CFBooleanRef v56 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_AIRPLAY-P2P");
  if (v56) {
    *((unsigned char *)v6 + 456) = CFBooleanGetValue(v56);
  }
  CFBooleanRef v57 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_AIRPLAY");
  if (v57) {
    *((unsigned char *)v6 + 457) = CFBooleanGetValue(v57);
  }
  CFBooleanRef v58 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_ATP");
  if (v58) {
    *((unsigned char *)v6 + 458) = CFBooleanGetValue(v58);
  }
  CFBooleanRef v59 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_COMPANION-LINK");
  if (v59) {
    *((unsigned char *)v6 + 459) = CFBooleanGetValue(v59);
  }
  CFBooleanRef v60 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_IEEE1588");
  if (v60) {
    *((unsigned char *)v6 + 460) = CFBooleanGetValue(v60);
  }
  CFBooleanRef v61 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_RAOP");
  if (v61) {
    *((unsigned char *)v6 + 461) = CFBooleanGetValue(v61);
  }
  CFBooleanRef v62 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_RDLINK");
  if (v62) {
    *((unsigned char *)v6 + 462) = CFBooleanGetValue(v62);
  }
  CFBooleanRef v63 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_DFSMON");
  if (v63) {
    *((unsigned char *)v6 + 463) = CFBooleanGetValue(v63);
  }
  CFBooleanRef v64 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_WIFID");
  if (v64) {
    *((unsigned char *)v6 + 464) = CFBooleanGetValue(v64);
  }
  CFBooleanRef v65 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_TEST");
  if (v65) {
    *((unsigned char *)v6 + 465) = CFBooleanGetValue(v65);
  }
  CFDataRef v66 = (const __CFData *)CFDictionaryGetValue(v18, @"AWDL_STATS_OUI");
  if (v66)
  {
    CFDataRef v67 = v66;
    v159.CFIndex length = CFDataGetLength(v66);
    v159.id location = 0;
    CFDataGetBytes(v67, v159, (UInt8 *)v6 + 466);
  }
  CFArrayRef v68 = (const __CFArray *)CFDictionaryGetValue(v18, @"AWDL_STATS_STATES");
  if (v68)
  {
    CFArrayRef v69 = v68;
    int64_t Count = CFArrayGetCount(v68);
    int64_t v71 = Count;
    if (Count >= 1)
    {
      CFStringRef v72 = malloc_type_calloc(Count, 0x10uLL, 0x1000040F7F8B94BuLL);
      v6[30] = (uint64_t)v72;
      if (!v72)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: null states" arguments:("WiFiMetricsManagerCollectAwdlUsageAsync", nil)];
        }
        goto LABEL_266;
      }
      uint64_t v73 = 0;
      CFIndex v74 = 0;
      do
      {
        CFDictionaryRef v75 = (const __CFDictionary *)CFArrayGetValueAtIndex(v69, v74);
        if (v75)
        {
          CFDictionaryRef v76 = v75;
          CFNumberRef v77 = (const __CFNumber *)CFDictionaryGetValue(v75, @"AWDL_STATS_STATE_COUNT");
          if (v77) {
            CFNumberGetValue(v77, kCFNumberSInt32Type, (void *)(v6[30] + v73));
          }
          CFNumberRef v78 = (const __CFNumber *)CFDictionaryGetValue(v76, @"AWDL_STATS_STATE_DURATION");
          if (v78) {
            CFNumberGetValue(v78, kCFNumberSInt64Type, (void *)(v6[30] + v73 + 8));
          }
        }
        ++v74;
        v73 += 16;
      }
      while (v71 != v74);
    }
    *((_DWORD *)v6 + 58) = v71;
  }
  CFArrayRef v79 = (const __CFArray *)CFDictionaryGetValue(v18, @"AWDL_STATS_SERVICES");
  uint64_t v157 = v1;
  if (v79)
  {
    CFArrayRef v80 = v79;
    int64_t v81 = CFArrayGetCount(v79);
    int64_t v82 = v81;
    if (v81 >= 1)
    {
      CFStringRef v83 = malloc_type_calloc(v81, 0x30uLL, 0x1000040634EFA27uLL);
      v6[32] = (uint64_t)v83;
      if (!v83)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null services", "WiFiMetricsManagerCollectAwdlUsageAsync")];
        }
        goto LABEL_266;
      }
      uint64_t v84 = 0;
      CFIndex v85 = 0;
      do
      {
        CFDictionaryRef v86 = (const __CFDictionary *)CFArrayGetValueAtIndex(v80, v85);
        if (v86)
        {
          CFDictionaryRef v87 = v86;
          CFNumberRef v88 = (const __CFNumber *)CFDictionaryGetValue(v86, @"AWDL_STATS_SERVICE_DURATION");
          if (v88) {
            CFNumberGetValue(v88, kCFNumberSInt64Type, (void *)(v6[32] + v84 + 8));
          }
          CFNumberRef v89 = (const __CFNumber *)CFDictionaryGetValue(v87, @"AWDL_STATS_SERVICE_ID");
          if (v89) {
            CFNumberGetValue(v89, kCFNumberSInt32Type, (void *)(v6[32] + v84 + 4));
          }
          CFNumberRef v90 = (const __CFNumber *)CFDictionaryGetValue(v87, @"AWDL_STATS_SERVICE_TYPE");
          if (v90) {
            CFNumberGetValue(v90, kCFNumberSInt8Type, (void *)(v6[32] + v84 + 1));
          }
          CFNumberRef v91 = (const __CFNumber *)CFDictionaryGetValue(v87, @"AWDL_STATS_SERVICE_OPCODE");
          if (v91) {
            CFNumberGetValue(v91, kCFNumberSInt8Type, (void *)(v6[32] + v84));
          }
          CFDataRef v92 = (const __CFData *)CFDictionaryGetValue(v87, @"AWDL_STATS_SERVICE_KEY");
          if (v92)
          {
            CFDataRef v93 = v92;
            CFIndex Length = CFDataGetLength(v92);
            v95.CFIndex length = Length >= 32 ? 32 : Length;
            if (v95.length)
            {
              v95.id location = 0;
              CFDataGetBytes(v93, v95, (UInt8 *)(v6[32] + v84 + 16));
            }
          }
        }
        ++v85;
        v84 += 48;
      }
      while (v82 != v85);
    }
    *((_DWORD *)v6 + 62) = v82;
  }
  CFArrayRef v96 = (const __CFArray *)CFDictionaryGetValue(v18, @"AWDL_STATS_HOPCOUNT");
  if (v96)
  {
    CFArrayRef v97 = v96;
    int64_t v98 = CFArrayGetCount(v96);
    int64_t v99 = v98;
    if (v98 >= 1)
    {
      CFNumberRef v100 = malloc_type_calloc(v98, 0x18uLL, 0x1000040504FFAC1uLL);
      v6[39] = (uint64_t)v100;
      if (!v100) {
        goto LABEL_256;
      }
      uint64_t v101 = 0;
      CFIndex v102 = 0;
      do
      {
        CFDictionaryRef v103 = (const __CFDictionary *)CFArrayGetValueAtIndex(v97, v102);
        if (v103)
        {
          CFDictionaryRef v104 = v103;
          CFNumberRef v105 = (const __CFNumber *)CFDictionaryGetValue(v103, @"AWDL_STATS_HISTOGRAM_BIN_START");
          if (v105) {
            CFNumberGetValue(v105, kCFNumberDoubleType, (void *)(v6[39] + v101));
          }
          CFNumberRef v106 = (const __CFNumber *)CFDictionaryGetValue(v104, @"AWDL_STATS_HISTOGRAM_BIN_END");
          if (v106) {
            CFNumberGetValue(v106, kCFNumberDoubleType, (void *)(v6[39] + v101 + 8));
          }
          CFNumberRef v107 = (const __CFNumber *)CFDictionaryGetValue(v104, @"AWDL_STATS_HISTOGRAM_BIN_VALUE");
          if (v107) {
            CFNumberGetValue(v107, kCFNumberDoubleType, (void *)(v6[39] + v101 + 16));
          }
        }
        ++v102;
        v101 += 24;
      }
      while (v99 != v102);
    }
    *((_DWORD *)v6 + 80) = v99;
    uint64_t v1 = v157;
  }
  CFArrayRef v108 = (const __CFArray *)CFDictionaryGetValue(v18, @"AWDL_STATS_PARENTRSSI");
  if (!v108) {
    goto LABEL_184;
  }
  CFArrayRef v109 = v108;
  int64_t v110 = CFArrayGetCount(v108);
  int64_t v111 = v110;
  if (v110 >= 1)
  {
    CFTypeID v112 = malloc_type_calloc(v110, 0x18uLL, 0x1000040504FFAC1uLL);
    v6[41] = (uint64_t)v112;
    if (v112)
    {
      uint64_t v113 = 0;
      CFIndex v114 = 0;
      do
      {
        CFDictionaryRef v115 = (const __CFDictionary *)CFArrayGetValueAtIndex(v109, v114);
        if (v115)
        {
          CFDictionaryRef v116 = v115;
          CFNumberRef v117 = (const __CFNumber *)CFDictionaryGetValue(v115, @"AWDL_STATS_HISTOGRAM_BIN_START");
          if (v117) {
            CFNumberGetValue(v117, kCFNumberDoubleType, (void *)(v6[41] + v113));
          }
          CFNumberRef v118 = (const __CFNumber *)CFDictionaryGetValue(v116, @"AWDL_STATS_HISTOGRAM_BIN_END");
          if (v118) {
            CFNumberGetValue(v118, kCFNumberDoubleType, (void *)(v6[41] + v113 + 8));
          }
          CFNumberRef v119 = (const __CFNumber *)CFDictionaryGetValue(v116, @"AWDL_STATS_HISTOGRAM_BIN_VALUE");
          if (v119) {
            CFNumberGetValue(v119, kCFNumberDoubleType, (void *)(v6[41] + v113 + 16));
          }
        }
        ++v114;
        v113 += 24;
      }
      while (v111 != v114);
      goto LABEL_183;
    }
LABEL_256:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"%s: null hop count histogram container", @"WiFiMetricsManagerCollectAwdlUsageAsync"];
    }
    goto LABEL_266;
  }
LABEL_183:
  *((_DWORD *)v6 + 84) = v111;
  uint64_t v1 = v157;
LABEL_184:
  CFNumberRef v120 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_SUSPEND_DURATION");
  if (v120) {
    CFNumberGetValue(v120, kCFNumberSInt32Type, v6 + 55);
  }
  CFNumberRef v121 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_SUSPEND_COUNT");
  if (v121) {
    CFNumberGetValue(v121, kCFNumberSInt32Type, (char *)v6 + 364);
  }
  CFNumberRef v122 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_DFSP_CSA_PEER");
  if (v122) {
    CFNumberGetValue(v122, kCFNumberSInt32Type, v6 + 33);
  }
  CFNumberRef v123 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_DFSP_CSA_AP");
  if (v123) {
    CFNumberGetValue(v123, kCFNumberSInt32Type, (char *)v6 + 268);
  }
  CFNumberRef v124 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_DFSP_CSA_SUSPECT");
  if (v124) {
    CFNumberGetValue(v124, kCFNumberSInt32Type, v6 + 34);
  }
  CFNumberRef v125 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_DFSP_CSA_RESUME");
  if (v125) {
    CFNumberGetValue(v125, kCFNumberSInt32Type, (char *)v6 + 276);
  }
  CFNumberRef v126 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_RT_SESSION");
  if (v126) {
    CFNumberGetValue(v126, kCFNumberSInt32Type, v6 + 38);
  }
  CFNumberRef v127 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_DFSPAIRPLAY_CONNECTED");
  if (v127) {
    CFNumberGetValue(v127, kCFNumberSInt32Type, v6 + 35);
  }
  CFNumberRef v128 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_DFSPAIRPLAY_FAILED");
  if (v128) {
    CFNumberGetValue(v128, kCFNumberSInt32Type, v6 + 35);
  }
  CFNumberRef v129 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_SYNC_CHANGES");
  if (v129) {
    CFNumberGetValue(v129, kCFNumberSInt64Type, v6 + 36);
  }
  CFNumberRef v130 = (const __CFNumber *)CFDictionaryGetValue(v18, @"APPLE80211KEY_AWDL_STATS_NUM_INPUT_PKTS_DROPPED");
  if (v130) {
    CFNumberGetValue(v130, kCFNumberSInt32Type, v6 + 37);
  }
  CFNumberRef v131 = (const __CFNumber *)CFDictionaryGetValue(v18, @"APPLE80211KEY_AWDL_STATS_NUM_PEERS_ZERO_EXT_LEN");
  if (v131) {
    CFNumberGetValue(v131, kCFNumberSInt32Type, (char *)v6 + 300);
  }
  CFDictionaryRef v132 = (const __CFDictionary *)CFDictionaryGetValue(v18, @"AWDL_D2D_MIGRATION_STATS");
  if (v132)
  {
    CFDictionaryRef v133 = v132;
    char v134 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040E0EAB150uLL);
    v6[43] = (uint64_t)v134;
    if (!v134)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:@"%s: null D2D migration statistics container" message:3];
      }
      goto LABEL_266;
    }
    CFNumberRef v135 = (const __CFNumber *)CFDictionaryGetValue(v133, @"D2D_MIGRATION_SESSION_DURATION");
    if (v135) {
      CFNumberGetValue(v135, kCFNumberSInt64Type, (void *)v6[43]);
    }
    CFNumberRef v136 = (const __CFNumber *)CFDictionaryGetValue(v133, @"D2D_MIGRATION_TOTAL_TX_BYTES");
    if (v136) {
      CFNumberGetValue(v136, kCFNumberSInt64Type, (void *)(v6[43] + 8));
    }
    CFNumberRef v137 = (const __CFNumber *)CFDictionaryGetValue(v133, @"D2D_MIGRATION_TOTAL_RX_BYTES");
    if (v137) {
      CFNumberGetValue(v137, kCFNumberSInt64Type, (void *)(v6[43] + 16));
    }
    CFNumberRef v138 = (const __CFNumber *)CFDictionaryGetValue(v133, @"D2D_MIGRATION_AVG_RSSI");
    if (v138) {
      CFNumberGetValue(v138, kCFNumberSInt32Type, (void *)(v6[43] + 24));
    }
    CFNumberRef v139 = (const __CFNumber *)CFDictionaryGetValue(v133, @"D2D_MIGRATION_ROLE");
    if (v139) {
      CFNumberGetValue(v139, kCFNumberSInt8Type, (void *)(v6[43] + 30));
    }
    CFNumberRef v140 = (const __CFNumber *)CFDictionaryGetValue(v133, @"D2D_MIGRATION_ACTIVE_CHANNEL");
    if (v140) {
      CFNumberGetValue(v140, kCFNumberSInt8Type, (void *)(v6[43] + 28));
    }
    CFNumberRef v141 = (const __CFNumber *)CFDictionaryGetValue(v133, @"D2D_MIGRATION_AVG_CCA");
    if (v141) {
      CFNumberGetValue(v141, kCFNumberSInt8Type, (void *)(v6[43] + 31));
    }
    CFNumberRef v142 = (const __CFNumber *)CFDictionaryGetValue(v133, @"D2D_MIGRATION_TX_FAILURE_COUNT");
    if (v142) {
      CFNumberGetValue(v142, kCFNumberSInt8Type, (void *)(v6[43] + 29));
    }
  }
  CFNumberRef v143 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PEER_CHANNEL_STEER_COUNT_2G");
  if (v143) {
    CFNumberGetValue(v143, kCFNumberSInt32Type, v6 + 48);
  }
  CFNumberRef v144 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PEER_CHANNEL_STEER_COUNT_5G");
  if (v144) {
    CFNumberGetValue(v144, kCFNumberSInt32Type, (char *)v6 + 388);
  }
  CFNumberRef v145 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS_6GHZ");
  if (v145) {
    CFNumberGetValue(v145, kCFNumberSInt8Type, v6 + 45);
  }
  CFNumberRef v146 = (const __CFNumber *)CFDictionaryGetValue(v18, @"APPLE80211KEY_AWDL_STATS_SELF_6E_CAPABLE");
  if (v146) {
    CFNumberGetValue(v146, kCFNumberSInt8Type, (char *)v6 + 361);
  }
  CFNumberRef v147 = (const __CFNumber *)CFDictionaryGetValue(v18, @"APPLE80211KEY_AWDL_STATS_PEER_6E_CAP_COUNT");
  if (v147) {
    CFNumberGetValue(v147, kCFNumberSInt8Type, (char *)v6 + 362);
  }
  CFArrayRef v148 = (const __CFArray *)CFDictionaryGetValue(v18, @"APPLE80211KEY_AWDL_STATS_LTE_RESTRICTED_CHANNELS");
  if (!v148) {
    goto LABEL_244;
  }
  CFArrayRef v149 = v148;
  int64_t v150 = CFArrayGetCount(v148);
  int64_t v151 = v150;
  if (v150 >= 1)
  {
    char v152 = malloc_type_calloc(v150, 2uLL, 0x1000040BDFB0063uLL);
    v6[47] = (uint64_t)v152;
    if (v152)
    {
      uint64_t v153 = 0;
      CFIndex v154 = 0;
      do
      {
        CFNumberRef v155 = (const __CFNumber *)CFArrayGetValueAtIndex(v149, v154);
        if (v155) {
          CFNumberGetValue(v155, kCFNumberSInt16Type, (void *)(v6[47] + v153));
        }
        ++v154;
        v153 += 2;
      }
      while (v151 != v154);
      goto LABEL_243;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null LTE restricted channels used list", "WiFiMetricsManagerCollectAwdlUsageAsync"];
    }
LABEL_266:
    goto LABEL_245;
  }
LABEL_243:
  *((_DWORD *)v6 + 92) = v151;
LABEL_244:
  sub_10004ACD4(v1, 0.0, 0.0);
LABEL_245:

  CFRelease(v18);
}

void sub_10004ACD4(uint64_t a1, float64_t a2, float64_t a3)
{
  int64_t v4 = sub_10005FC0C(a1);
  if (a1)
  {
    if (qword_10027D620)
    {
      CFStringRef v5 = (const __CFString *)v4;
      if (sub_1000931BC(*(void *)(qword_10027D620 + 16)) == 1)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: Camera is in Foreground" arguments:("WiFiMetricsManagerProcessAwdlUsageData", nil)];
        }
      }
      else
      {
        CFArrayRef v6 = *(const __CFArray **)(qword_10027D620 + 32);
        if (v6)
        {
          if (v5)
          {
            if (CFArrayGetCount(v6) < 1)
            {
LABEL_13:
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:3, @"%s: AWDL interface not found in deviceMetricsArray.", @"WiFiMetricsManagerProcessAwdlUsageData"];
              }
            }
            else
            {
              CFIndex v7 = 0;
              while (1)
              {
                CFDictionaryRef ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(qword_10027D620 + 32), v7);
                if (ValueAtIndex)
                {
                  CFArrayRef v9 = ValueAtIndex;
                  uint64_t v10 = *ValueAtIndex;
                  if (*ValueAtIndex)
                  {
                    if (sub_10005FC0C(*ValueAtIndex))
                    {
                      CFStringRef v11 = (const __CFString *)sub_10005FC0C(v10);
                      if (CFEqual(v5, v11)) {
                        break;
                      }
                    }
                  }
                }
                if (++v7 >= CFArrayGetCount(*(CFArrayRef *)(qword_10027D620 + 32))) {
                  goto LABEL_13;
                }
              }
              double Current = CFAbsoluteTimeGetCurrent();
              double v14 = *((double *)v9 + 21);
              if (v14 == 0.0)
              {
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: initializing AWDL metrics collection: timestamp:%f rx:%f bytes tx:%f bytes", "WiFiMetricsManagerProcessAwdlUsageData", *(void *)&Current, *(void *)&a2, *(void *)&a3)];
                }
                unsigned int v87 = a2;
                unsigned int v88 = a3;
                goto LABEL_140;
              }
              if (Current <= v14)
              {
                *((_DWORD *)v9 + 54) = 0;
              }
              else
              {
                unsigned int v15 = ((Current - v14) / 60.0);
                *((_DWORD *)v9 + 54) = v15;
                if (v15)
                {
                  v16.f64[0] = a2;
                  v16.f64[1] = a3;
                  uint32x2_t v92 = (uint32x2_t)vmovn_s64((int64x2_t)vcvtq_u64_f64(v16));
                  uint32x2_t v17 = vqsub_u32(v92, (uint32x2_t)v9[20]);
                  v9[26] = (uint64_t)vsra_n_u32((uint32x2_t)vand_s8((int8x8_t)vshr_n_u32(v17, 9uLL), (int8x8_t)0x100000001), v17, 0xAuLL);
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:message:3, "%s: submitting AWDL metrics: duration:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned int *)v9 + 54)];
                  }
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL peerChannelsteerAttemptCount_2G:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned int *)v9 + 96));
                  }
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL peerChannelsteerAttemptCount_5G:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned int *)v9 + 97));
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:message:3, "%s: AWDL peerChannelsteerBefore:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned int *)v9 + 98)];
                  }
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL peerChannelsteerAfter:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned int *)v9 + 99));
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:message:3, "%s: AWDL psfDwellSessionCount:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned int *)v9 + 100)];
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:3, @"%s: AWDL serviceCount:%d", @"WiFiMetricsManagerProcessAwdlUsageData", *((unsigned int *)v9 + 62)];
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:@"%s: AWDL totalDuration:%d" message:3, "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned int *)v9 + 101)];
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:message:3, "%s: AWDL inActiveDuration:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned int *)v9 + 102)];
                  }
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL activeDuration:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned int *)v9 + 103));
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:@"%s: AWDL percentageInactiveTime:%d" message:3, "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned int *)v9 + 104)];
                  }
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL timeToService:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned int *)v9 + 105));
                  }
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL percentageInfraIdleTime:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned int *)v9 + 106));
                  }
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL percentageInfraRealTime:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned int *)v9 + 107));
                  }
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL percentageInfraNonRealTime:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned int *)v9 + 108));
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:3, @"%s: AWDL isAirPlayActive:%d", @"WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 448)];
                  }
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL isRemoteCameraActive:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 449));
                  }
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL isRemoteScreenActive:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 450));
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:@"%s: AWDL isSideCarActive:%d" message:3, "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 451)];
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:@"%s: AWDL isTvRemoteCameraActive:%d" message:3, "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 452)];
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:message:3, "%s: AWDL isUniversalControlActive:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 453)];
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:message:3, "%s: AWDL isStereoPairActive:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 454)];
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:message:3, "%s: AWDL isAirDropServiceActive:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 455)];
                  }
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL isAirplayP2PServiceActive:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 456));
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:message:3, "%s: AWDL isAirplayServiceActive:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 457)];
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:message:3, "%s: AWDL isATPServiceActive:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 458)];
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:3, @"%s: AWDL isCompanionLinkServiceActive:%d", @"WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 459)];
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:@"%s: AWDL isIEEE1588ServiceActive:%d" message:3, "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 460)];
                  }
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL isRaopServiceActive:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 461));
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:@"%s: AWDL isRDLinkServiceActive:%d" message:3, "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 462)];
                  }
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL isDFSMonServiceActive:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 463));
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:message:3, "%s: AWDL isWiFidServiceActive:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 464)];
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:3, "%s: AWDL isTestServiceActive:%d", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 465)];
                  }
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL peerChannelOui:%x:%x:%x", "WiFiMetricsManagerProcessAwdlUsageData", *((unsigned __int8 *)v9 + 466), *((unsigned __int8 *)v9 + 467), *((unsigned __int8 *)v9 + 468)];
                  }
                  CFBooleanRef v52 = (unsigned int *)malloc_type_malloc(0x128uLL, 0x1030040B7FBC384uLL);
                  memcpy(v52, v9 + 22, 0x128uLL);
                  *((void *)v52 + 8) = 0;
                  *((void *)v52 + 10) = 0;
                  *((void *)v52 + 17) = 0;
                  *((void *)v52 + 19) = 0;
                  if (v9[30])
                  {
                    size_t v53 = *((unsigned int *)v9 + 58);
                    if (v53)
                    {
                      CFBooleanRef v54 = malloc_type_calloc(v53, 0x10uLL, 0x1000040F7F8B94BuLL);
                      *((void *)v52 + 8) = v54;
                      memcpy(v54, (const void *)v9[30], 16 * *((unsigned int *)v9 + 58));
                    }
                  }
                  if (v9[32])
                  {
                    size_t v55 = *((unsigned int *)v9 + 62);
                    if (v55)
                    {
                      CFBooleanRef v56 = malloc_type_calloc(v55, 0x30uLL, 0x1000040634EFA27uLL);
                      *((void *)v52 + 10) = v56;
                      memcpy(v56, (const void *)v9[32], 48 * *((unsigned int *)v9 + 62));
                    }
                  }
                  if (v9[39])
                  {
                    size_t v57 = *((unsigned int *)v9 + 80);
                    if (v57)
                    {
                      CFBooleanRef v58 = malloc_type_calloc(v57, 0x18uLL, 0x1000040504FFAC1uLL);
                      *((void *)v52 + 17) = v58;
                      memcpy(v58, (const void *)v9[39], 24 * *((unsigned int *)v9 + 80));
                    }
                  }
                  if (v9[41])
                  {
                    size_t v59 = *((unsigned int *)v9 + 84);
                    if (v59)
                    {
                      CFBooleanRef v60 = malloc_type_calloc(v59, 0x18uLL, 0x1000040504FFAC1uLL);
                      *((void *)v52 + 19) = v60;
                      memcpy(v60, (const void *)v9[41], 24 * *((unsigned int *)v9 + 84));
                    }
                  }
                  if (v9[43])
                  {
                    CFBooleanRef v61 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040E0EAB150uLL);
                    *((void *)v52 + 21) = v61;
                    CFBooleanRef v62 = (_OWORD *)v9[43];
                    long long v63 = v62[1];
                    _OWORD *v61 = *v62;
                    v61[1] = v63;
                  }
                  if (v9[47])
                  {
                    CFBooleanRef v64 = malloc_type_calloc(*((unsigned int *)v9 + 92), 2uLL, 0x1000040BDFB0063uLL);
                    *((void *)v52 + 25) = v64;
                    memcpy(v64, (const void *)v9[47], 2 * *((unsigned int *)v9 + 92));
                  }
                  id v66 = objc_alloc((Class)WAMessage);
                  id v67 = [v66 initWithMetricName:kWAMessageMetricNameAwdlUsage options:7];
                  if (v67)
                  {
                    CFArrayRef v68 = v67;
                    [v67 addFieldForKey:@"periodInMinutes" value:[NSNumber numberWithUnsignedInt:v52[10]] options:7];
                    [v68 addFieldForKey:@"flags" value:[NSNumber numberWithUnsignedInt:v52[4]] options:7];
                    [v68 addFieldForKey:@"cachedPeersOn24G" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)v52 + 7)] options:7];
                    [v68 addFieldForKey:@"appTxBytes" value:[NSNumber numberWithUnsignedInt:v52[9]] options:7];
                    [v68 addFieldForKey:@"appRxBytes" value:[NSNumber numberWithUnsignedInt:v52[8]] options:7];
                    [v68 addFieldForKey:@"ifTxBytes" value:[NSNumber numberWithUnsignedInt:v52[7]] options:7];
                    [v68 addFieldForKey:@"ifRxBytes" value:[NSNumber numberWithUnsignedInt:v52[6]] options:7];
                    [v68 addFieldForKey:@"noServiceIdleTime" value:[NSNumber numberWithUnsignedInt:v52[12]] options:7];
                    [v68 addFieldForKey:@"suspendedDuration" value:[NSNumber numberWithUnsignedInt:v52[66]] options:7];
                    [v68 addFieldForKey:@"suspendCount" value:[NSNumber numberWithUnsignedInt:v52[47]] options:7];
                    [v68 addFieldForKey:@"dfspCSAReceivedFromPeer" value:[NSNumber numberWithUnsignedInt:v52[22]] options:7];
                    [v68 addFieldForKey:@"cachedPeersNotAssociated" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)v52 + 10)] options:7];
                    [v68 addFieldForKey:@"dfspSuspect" value:[NSNumber numberWithUnsignedInt:v52[24]] options:7];
                    [v68 addFieldForKey:@"dfspResume" value:[NSNumber numberWithUnsignedInt:v52[25]] options:7];
                    [v68 addFieldForKey:@"numRTSessions" value:[NSNumber numberWithUnsignedInt:v52[32]] options:7];
                    [v68 addFieldForKey:@"dfspAirplayFailed" value:[NSNumber numberWithUnsignedInt:v52[27]] options:7];
                    [v68 addFieldForKey:@"peerInfraChannel" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)v52 + 4)] options:7];
                    [v68 addFieldForKey:@"peerInfraChannelFlags" value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[45]) options:7];
                    [v68 addFieldForKey:@"dfspCSAReceivedFromAP" value:[NSNumber numberWithUnsignedInt:v52[23]] options:7];
                    [v68 addFieldForKey:@"cachedPeersDiffInfra" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)v52 + 11)] options:7];
                    [v68 addFieldForKey:@"cachedPeersSameInfra" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)v52 + 12)] options:7];
                    [v68 addFieldForKey:@"cachedPeersOn5G" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)v52 + 8)] options:7];
                    [v68 addFieldForKey:@"numOfPeers" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)v52 + 5)] options:7];
                    [v68 addFieldForKey:@"dfspAirplayConnected" value:[NSNumber numberWithUnsignedInt:v52[26]] options:7];
                    [v68 addFieldForKey:@"numSyncChanges" value:[NSNumber numberWithUnsignedInt:v52[28]] options:7];
                    [v68 addFieldForKey:@"cachedPeersOnDFS" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)v52 + 9)] options:7];
                    [v68 addFieldForKey:@"ifPacketFailures" value:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[5]) numberWithUnsignedInt:7];
                    [v68 addFieldForKey:@"selfInfraChannel" value:[NSNumber numberWithUnsignedInt:*v52] options:7];
                    [v68 addFieldForKey:@"selfInfraChannelFlags" value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[44]) options:7];
                    [v68 addFieldForKey:@"numOfCachedPeers" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)v52 + 6)] options:7];
                    [v68 addFieldForKey:@"numInputPacketsDropped" value:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[30]) numberWithUnsignedInt:v52[30]] options:7];
                    [v68 addFieldForKey:@"numPeersWithZeroExtLen" value:[NSNumber numberWithUnsignedInt:v52[31]] options:7];
                    [v68 addFieldForKey:@"peerChannelsteerBefore" value:[NSNumber numberWithUnsignedInt:v52[54]] options:7];
                    [v68 addFieldForKey:@"peerChannelsteerAfter" value:[NSNumber numberWithUnsignedInt:v52[55]] options:7];
                    [v68 addFieldForKey:@"psfDwellSessionCount" value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[56]) options:7];
                    [v68 addFieldForKey:@"serviceCount" value:[NSNumber numberWithUnsignedInt:v52[18]] options:7];
                    [v68 addFieldForKey:@"totalDuration" value:[NSNumber numberWithUnsignedInt:v52[57]] options:7];
                    [v68 addFieldForKey:@"inActiveDuration" value:[NSNumber numberWithUnsignedInt:v52[58]] options:7];
                    [v68 addFieldForKey:@"activeDuration" value:[NSNumber numberWithUnsignedInt:v52[59]] options:7];
                    [v68 addFieldForKey:@"percentageInactiveTime" value:[NSNumber numberWithUnsignedInt:v52[60]] options:7];
                    [v68 addFieldForKey:@"timeToService" value:[NSNumber numberWithUnsignedInt:v52[61]] options:7];
                    [v68 addFieldForKey:@"percentageInfraIdleTime" value:[NSNumber numberWithUnsignedInt:v52[62]] options:7];
                    [v68 addFieldForKey:@"percentageInfraRealTime" value:[NSNumber numberWithUnsignedInt:v52[63]] options:7];
                    [v68 addFieldForKey:@"percentageInfraNonRealTime" value:[NSNumber numberWithUnsignedInt:v52[64]] options:7];
                    [v68 addFieldForKey:@"isAirPlayActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 272) != 0) options:7];
                    [v68 addFieldForKey:@"isRemoteCameraActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 273) != 0) options:7];
                    [v68 addFieldForKey:@"isRemoteScreenActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 274) != 0) options:7];
                    [v68 addFieldForKey:@"isSideCarActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 275) != 0) options:7];
                    [v68 addFieldForKey:@"isTvRemoteCameraActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 276) != 0) options:7];
                    [v68 addFieldForKey:@"isUniversalControlActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 277) != 0) options:7];
                    [v68 addFieldForKey:@"isStereoPairActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 278) != 0) options:7];
                    [v68 addFieldForKey:@"isAirDropServiceActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 279) != 0) options:7];
                    [v68 addFieldForKey:@"isAirplayP2PServiceActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 280) != 0) options:7];
                    [v68 addFieldForKey:@"isAirplayServiceActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 281) != 0) options:7];
                    [v68 addFieldForKey:@"isATPServiceActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 282) != 0) options:7];
                    [v68 addFieldForKey:@"isCompanionLinkServiceActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 283) != 0) options:7];
                    [v68 addFieldForKey:@"isIEEE1588ServiceActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 284) != 0) options:7];
                    [v68 addFieldForKey:@"isRaopServiceActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 285) != 0) options:7];
                    [v68 addFieldForKey:@"isRDLinkServiceActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 286) != 0) options:7];
                    [v68 addFieldForKey:@"isDFSMonServiceActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 287) != 0) options:7];
                    [v68 addFieldForKey:@"isWiFidServiceActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 288) != 0) options:7];
                    [v68 addFieldForKey:@"isTestServiceActive" value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)v52 + 289) != 0) options:7];
                    [v68 addFieldForKey:@"peerChannelsteerOUI" value:[NSString stringWithString:sub_10004C9BC((uint64_t)v52 + 290, 3u)] options:7];
                    if (v52[36])
                    {
                      uint64_t v69 = 0;
                      unint64_t v70 = 0;
                      do
                      {
                        int64_t v71 = (double *)(*((void *)v52 + 17) + v69);
                        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"hopCountHistogramBins_%u_binStart", v70), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *v71), 7 value options];
                        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"hopCountHistogramBins_%u_value", v70), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v71[2]), 7 value options];
                        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"hopCountHistogramBins_%u_binEnd", v70++), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v71[1]), 7 value options];
                        v69 += 24;
                      }
                      while (v70 < v52[36]);
                    }
                    if (v52[40])
                    {
                      uint64_t v72 = 0;
                      unint64_t v73 = 0;
                      do
                      {
                        CFIndex v74 = (double *)(*((void *)v52 + 19) + v72);
                        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"parentRSSIHistogramBins_%u_binStart", v73), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *v74), 7 value options];
                        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"parentRSSIHistogramBins_%u_value", v73), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v74[2]), 7 value options];
                        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"parentRSSIHistogramBins_%u_binEnd", v73++), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v74[1]), 7 value options];
                        v72 += 24;
                      }
                      while (v73 < v52[40]);
                    }
                    if (v52[18])
                    {
                      uint64_t v75 = 0;
                      unint64_t v76 = 0;
                      do
                      {
                        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"services_%u_serviceKey", v76), [objc_alloc((Class)NSString) initWithData:+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *((void *)v52 + 10) + v75 + 16, 32) encoding:1], 7, value, options];
                        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"services_%u_serviceId", v76), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*((void *)v52 + 10) + v75 + 4)), 7 value options];
                        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"services_%u_opCode", v76), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned __int8 *)(*((void *)v52 + 10) + v75)), 7 value options];
                        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"services_%u_type", v76), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned __int8 *)(*((void *)v52 + 10) + v75 + 1)), 7 value options];
                        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"services_%u_duration", v76++), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*((void *)v52 + 10) + v75 + 8)), 7 value options];
                        v75 += 48;
                      }
                      while (v76 < v52[18]);
                    }
                    if (v52[14])
                    {
                      uint64_t v77 = 0;
                      unint64_t v78 = 0;
                      do
                      {
                        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"states_%u_count", v78), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*((void *)v52 + 8) + v77)), 7 value options];
                        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"states_%u_duration", v78++), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*((void *)v52 + 8) + v77 + 8)), 7 value options];
                        v77 += 16;
                      }
                      while (v78 < v52[14]);
                    }
                    uint64_t v79 = *((void *)v52 + 21);
                    if (v79)
                    {
                      [v68 addFieldForKey:@"d2dMigrationStats_peerRssi" value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v79 + 24)) options:7];
                      [v68 addFieldForKey:@"d2dMigrationStats_rxBytes" value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*((void *)v52 + 21) + 16)) options:7];
                      [v68 addFieldForKey:@"d2dMigrationStats_txBytes" value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*((void *)v52 + 21) + 8)) options:7];
                      [v68 addFieldForKey:@"d2dMigrationStats_avgCCA" value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned __int8 *)(*((void *)v52 + 21) + 31)) options:7];
                      [v68 addFieldForKey:@"d2dMigrationStats_channel" value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned __int8 *)(*((void *)v52 + 21) + 28)) options:7];
                      [v68 addFieldForKey:@"d2dMigrationStats_txFailureCount" value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned __int8 *)(*((void *)v52 + 21) + 29)) options:7];
                      [v68 addFieldForKey:@"d2dMigrationStats_sessionDuration" value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", **((unsigned int **)v52 + 21)) options:7];
                      [v68 addFieldForKey:@"d2dMigrationStats_migrationRole" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)(*((void *)v52 + 21) + 30))] options:7];
                    }
                    [v68 addFieldForKey:@"cachedPeersOn6G" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)v52 + 184)] options:7];
                    [v68 addFieldForKey:@"self6ECapable" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)v52 + 185)] options:7];
                    [v68 addFieldForKey:@"cachedPeers6ECapable" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)v52 + 186)] options:7];
                    [v68 addFieldForKey:@"peerChannelsteerAttemptCount_2G" value:[NSNumber numberWithUnsignedInt:v52[52]] options:7];
                    [v68 addFieldForKey:@"peerChannelsteerAttemptCount_5G" value:[NSNumber numberWithUnsignedInt:v52[53]] options:7];
                    if (v52[48])
                    {
                      unint64_t v80 = 0;
                      do
                      {
                        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"lteRestrictedChannelsUsed_%u", v80), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned __int16 *)(*((void *)v52 + 25) + 2 * v80)), 7 value options];
                        ++v80;
                      }
                      while (v80 < v52[48]);
                    }
                    sub_1000476E8(v68);

                    int64_t v81 = (void *)*((void *)v52 + 10);
                    if (v81) {
                      free(v81);
                    }
                    int64_t v82 = (void *)*((void *)v52 + 8);
                    if (v82) {
                      free(v82);
                    }
                    CFStringRef v83 = (void *)*((void *)v52 + 19);
                    if (v83) {
                      free(v83);
                    }
                    uint64_t v84 = (void *)*((void *)v52 + 17);
                    if (v84) {
                      free(v84);
                    }
                    CFIndex v85 = (void *)*((void *)v52 + 21);
                    if (v85) {
                      free(v85);
                    }
                    CFDictionaryRef v86 = (void *)*((void *)v52 + 25);
                    if (v86) {
                      free(v86);
                    }
                    free(v52);
                  }
                  unsigned int v87 = v92.i32[0];
                  unsigned int v88 = v92.u32[1];
LABEL_140:
                  *((double *)v9 + 21) = Current;
                  *((_DWORD *)v9 + 40) = v87;
                  *((_DWORD *)v9 + 41) = v88;
                  return;
                }
              }
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:3, @"%s: not submitting zero duration AWDL metrics.", @"WiFiMetricsManagerProcessAwdlUsageData"];
              }
            }
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3, @"%s: null awdlIfName", @"WiFiMetricsManagerProcessAwdlUsageData"];
            }
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:message:3, "%s: null deviceMetricsArray !!", "WiFiMetricsManagerProcessAwdlUsageData"];
          }
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: null metrics", "WiFiMetricsManagerProcessAwdlUsageData"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null device", "WiFiMetricsManagerProcessAwdlUsageData")];
    }
  }
}

id sub_10004C9BC(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    id v4 = +[NSMutableString string];
    if (a2)
    {
      uint64_t v5 = 0;
      do
      {
        [v4 appendFormat:@"%02x", *(unsigned __int8 *)(a1 + v5)];
        if (v5 < a2 - 1) {
          [v4 appendFormat:@":"];
        }
        ++v5;
      }
      while (a2 != v5);
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: returning %@", "__WiFiMetricsManagerGetColonHexdecFormat", v4 message];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: addr is NULL", "__WiFiMetricsManagerGetColonHexdecFormat")];
    }
    id v4 = 0;
  }
  return v4;
}

uint64_t sub_10004CAE4()
{
  unsigned int valuePtr = 0;
  if (!qword_10027D620)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null metrics" : @"__WiFiMetricsManagerGetDeviceInitFailureReason"];
    }
    goto LABEL_19;
  }
  CFDictionaryRef v0 = IOServiceNameMatching("wlan");
  if (!v0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: Class  \"wlan\" NOT found "];
    }
    goto LABEL_19;
  }
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v0);
  if (!MatchingService)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: service for Class \"wlan\" NOT found ", "__WiFiMetricsManagerGetDeviceInitFailureReason")];
    }
LABEL_19:
    return 0;
  }
  io_registry_entry_t v2 = MatchingService;
  CFTypeRef v3 = IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"com.apple.wlan.init_failure", kCFAllocatorDefault, 3u);
  if (v3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: data for com.apple.wlan.init_failure found", "__WiFiMetricsManagerGetDeviceInitFailureReason"];
    }
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v3) && CFNumberGetValue((CFNumberRef)v3, kCFNumberSInt32Type, &valuePtr))
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: deviceInitFailureReason:0x%0x ", "__WiFiMetricsManagerGetDeviceInitFailureReason", valuePtr);
      }
    }
    CFRelease(v3);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFi: \"com.apple.wlan.init_failure\" property not found.", "__WiFiMetricsManagerGetDeviceInitFailureReason")
    }
  }
  CFTypeRef v9 = IORegistryEntrySearchCFProperty(v2, "IOService", @"com.apple.wlan.init_failure_string", kCFAllocatorDefault, 3u);
  if (v9)
  {
    uint64_t v10 = v9;
    CFTypeID v11 = CFStringGetTypeID();
    if (v11 == CFGetTypeID(v10))
    {
      double v12 = CFAbsoluteTimeGetCurrent() - *(double *)(qword_10027D620 + 24);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: deviceInitFailureReason:%@ ", "__WiFiMetricsManagerGetDeviceInitFailureReason", v10 message];
      }
      [+[WiFiUsageMonitor sharedInstance] setDeviceInitializationFailureReason:v10 timeSinceBoot:v12];
    }
    CFRelease(v10);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFi: \"com.apple.wlan.init_failure\" property not found.", "__WiFiMetricsManagerGetDeviceInitFailureReason")];
    }
  }
  IOObjectRelease(v2);
  return valuePtr;
}

void sub_10004CDEC(uint64_t a1, const __CFDictionary *a2)
{
  if (!qword_10027D620) {
    return;
  }
  id v4 = (const void *)sub_100017C48(a1);
  uint64_t v5 = (void *)sub_10001C1B4(a1, v4);
  CFBooleanRef value = v5;
  if (!v5)
  {
    CFDictionaryRef v9 = 0;
    CFDictionaryRef v8 = 0;
LABEL_16:
    if (!a1) {
      goto LABEL_220;
    }
    goto LABEL_17;
  }
  uint64_t v6 = (uint64_t)v5;
  CFStringRef v7 = (const __CFString *)sub_10001E404((uint64_t)v5, @"BSSID");
  CFDictionaryRef v8 = (const __CFDictionary *)sub_10001E404(v6, @"WPS_PROB_RESP_IE");
  CFDictionaryRef v9 = (const __CFDictionary *)sub_10001E404(v6, @"APPLE_IE");
  if (v8) {
    goto LABEL_16;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s QFA Watchdog metric WPS PROBE RESPONSE IE not found in driverAvailableEventDict. Looking in cache...", "WiFiMetricsManagerSubmitWatchdogEvent")];
  }
  CFArrayRef v11 = (const __CFArray *)sub_1000830B8(*(void *)(qword_10027D620 + 16));
  if (!v11) {
    goto LABEL_12;
  }
  CFArrayRef v12 = v11;
  uint64_t Count = CFArrayGetCount(v11);
  if (Count < 1) {
    goto LABEL_12;
  }
  v147.CFIndex length = Count;
  v147.id location = 0;
  FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v12, v147, value);
  if ((FirstIndexOfValue & 0x8000000000000000) == 0
    && (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v12, FirstIndexOfValue)) != 0
    && (uint64_t v16 = (uint64_t)ValueAtIndex,
        (CFStringRef v17 = (const __CFString *)sub_10001E404((uint64_t)ValueAtIndex, @"BSSID")) != 0)
    && CFStringCompare(v7, v17, 1uLL) == kCFCompareEqualTo)
  {
    CFDictionaryRef v8 = (const __CFDictionary *)sub_10001E404(v16, @"WPS_PROB_RESP_IE");
    if (v8)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s QFA Watchdog metricWPS PROBE RESPONSE IE found in Known networks cache", "WiFiMetricsManagerSubmitWatchdogEvent")];
      }
      if (!a1) {
        goto LABEL_220;
      }
      goto LABEL_17;
    }
  }
  else
  {
LABEL_12:
    CFDictionaryRef v8 = 0;
  }
  if (!a1)
  {
LABEL_220:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: null device", "WiFiMetricsManagerSubmitWatchdogEvent"];
    }
    goto LABEL_226;
  }
LABEL_17:
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null driverAvailableEventDict", "WiFiMetricsManagerSubmitWatchdogEvent"];
    }
LABEL_226:
    CFNumberRef v126 = value;
    if (!value) {
      return;
    }
LABEL_214:
    CFRelease(v126);
    return;
  }
  CFDictionaryRef v18 = (char *)malloc_type_malloc(0x1310uLL, 0x10600406BF74C50uLL);
  if (!v18)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null watchdogEventMetric", "WiFiMetricsManagerSubmitWatchdogEvent")];
    }
    goto LABEL_226;
  }
  uint64_t v19 = v18;
  bzero(v18, 0x1310uLL);
  CFNumberRef v20 = sub_100071800(a1);
  if (v20)
  {
    CFNumberRef v21 = v20;
    CFDataRef v22 = sub_1000C6CA8((uint64_t)v20);
    if (v22)
    {
      CFDataRef v23 = v22;
      CFStringRef v24 = (const __CFString *)sub_10001E404((uint64_t)v21, @"BSSID");
      *((void *)v19 + 608) = CFStringCreateCopy(kCFAllocatorDefault, v24);
      v148.id location = 0;
      v148.CFIndex length = 3;
      CFDataGetBytes(v23, v148, (UInt8 *)v19 + 4876);
      CFRelease(v23);
    }
    CFRelease(v21);
  }
  CFBooleanRef v25 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE");
  if (v25)
  {
    *((_DWORD *)v19 + 2) = CFBooleanGetValue(v25);
    CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_FLAGS");
    if (v26)
    {
      CFNumberGetValue(v26, kCFNumberSInt32Type, v19 + 4);
      if (!*((_DWORD *)v19 + 2)
        || *(double *)(qword_10027D620 + 80) != 0.0
        && (*((_DWORD *)v19 + 1218) = ((CFAbsoluteTimeGetCurrent() - *(double *)(qword_10027D620 + 80))
                                                   * 1000.0),
            !*((_DWORD *)v19 + 2)))
      {
        if ((v19[4] & 2) != 0)
        {
          *(void *)(qword_10027D620 + 88) = 0;
        }
        else
        {
          if (*(double *)(qword_10027D620 + 80) != 0.0) {
            *(void *)(qword_10027D620 + 88) = (unint64_t)((CFAbsoluteTimeGetCurrent()
          }
                                                                  - *(double *)(qword_10027D620 + 80))
                                                                 * 1000.0);
          *(CFAbsoluteTime *)(qword_10027D620 + 80) = CFAbsoluteTimeGetCurrent();
        }
      }
      CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_REASON");
      if (v27)
      {
        CFNumberGetValue(v27, kCFNumberSInt32Type, v19 + 12);
        CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_SUBREASON");
        if (v28)
        {
          CFNumberGetValue(v28, kCFNumberSInt32Type, v19 + 16);
          CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_VERSION");
          if (v29)
          {
            CFNumberGetValue(v29, kCFNumberSInt32Type, v19);
            CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_PROGRAM_COUNTER");
            if (v30) {
              CFNumberGetValue(v30, kCFNumberSInt64Type, v19 + 160);
            }
            CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_LINK_REGISTER");
            if (v31) {
              CFNumberGetValue(v31, kCFNumberSInt64Type, v19 + 168);
            }
            CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_LINENUMBER");
            if (v32) {
              CFNumberGetValue(v32, kCFNumberSInt32Type, v19 + 208);
            }
            if (CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_HAVE_EXT_TRAP") == kCFBooleanTrue)
            {
              v19[244] = 1;
              CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_TRAP_SEQUENCE");
              if (v33) {
                CFNumberGetValue(v33, kCFNumberSInt32Type, v19 + 248);
              }
              sub_10004E3F0(v19 + 252, (_DWORD *)v19 + 143, a2, @"DRIVER_AVAILABLE_TRAP_SIGNATURE");
              sub_10004E3F0(v19 + 576, (_DWORD *)v19 + 224, a2, @"DRIVER_AVAILABLE_TRAP_STACK");
              sub_10004E3F0(v19 + 900, (_DWORD *)v19 + 305, a2, @"DRIVER_AVAILABLE_TRAP_MEMORY");
              sub_10004E3F0(v19 + 1224, (_DWORD *)v19 + 386, a2, @"DRIVER_AVAILABLE_TRAP_UCODE");
              sub_10004E3F0(v19 + 1548, (_DWORD *)v19 + 467, a2, @"DRIVER_AVAILABLE_TRAP_DEEP_SLEEP");
              sub_10004E3F0(v19 + 1872, (_DWORD *)v19 + 548, a2, @"DRIVER_AVAILABLE_TRAP_PSM_WD");
              sub_10004E3F0(v19 + 2196, (_DWORD *)v19 + 629, a2, @"DRIVER_AVAILABLE_TRAP_PHY");
              sub_10004E3F0(v19 + 2520, (_DWORD *)v19 + 710, a2, @"DRIVER_AVAILABLE_TRAP_BUS");
              sub_10004E3F0(v19 + 2844, (_DWORD *)v19 + 791, a2, @"DRIVER_AVAILABLE_TRAP_MAC");
              sub_10004E3F0(v19 + 3168, (_DWORD *)v19 + 872, a2, @"DRIVER_AVAILABLE_TRAP_BACKPLANE");
              sub_10004E3F0(v19 + 3492, (_DWORD *)v19 + 953, a2, @"DRIVER_AVAILABLE_KEY_PCIE_QUEUE");
              sub_10004E3F0(v19 + 3816, (_DWORD *)v19 + 1034, a2, @"DRIVER_AVAILABLE_KEY_WLAN_STATE");
              sub_10004E3F0(v19 + 4140, (_DWORD *)v19 + 1115, a2, @"DRIVER_AVAILABLE_KEY_MAC_ENAB");
              sub_10004E3F0(v19 + 4464, (_DWORD *)v19 + 1196, a2, @"DRIVER_AVAILABLE_KEY_TX_ERR_THRESH");
            }
            CFStringRef v34 = (const __CFString *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_REASON_STRING");
            CFStringRef v35 = v34;
            if (v34 && (CFTypeID v36 = CFGetTypeID(v34), v36 == CFStringGetTypeID()))
            {
              CFStringGetCString(v35, v19 + 28, 63, 0);
            }
            else
            {
              if (qword_10027DD68)
              {
                CFNumberRef v38 = "Not a string";
                if (!v35) {
                  CFNumberRef v38 = "is Null or Key-not-present";
                }
                [((id)qword_10027DD68) WFLog:message:3, "%s: reasonString :%s", "WiFiMetricsManagerSubmitWatchdogEvent", v38];
              }
            }
            CFStringRef v39 = (const __CFString *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_KEY_SUBREASON_STRING");
            CFStringRef v40 = v39;
            if (v39 && (CFTypeID v41 = CFGetTypeID(v39), v41 == CFStringGetTypeID()))
            {
              CFStringGetCString(v40, v19 + 92, 63, 0);
            }
            else
            {
              if (qword_10027DD68)
              {
                CFNumberRef v43 = "Not a string";
                if (!v40) {
                  CFNumberRef v43 = "is Null or Key-not-present";
                }
                [((id)qword_10027DD68) WFLog:message:3, "%s: subReasonString :%s", "WiFiMetricsManagerSubmitWatchdogEvent", v43];
              }
            }
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: reason:%s(0x%8x or %d), subreason:%s(0x%8x or %u) flag: %u", "WiFiMetricsManagerSubmitWatchdogEvent", v19 + 28, *((unsigned int *)v19 + 3), *((unsigned int *)v19 + 3), v19 + 92, *((unsigned int *)v19 + 4), *((unsigned int *)v19 + 4), *((unsigned int *)v19 + 1)];
            }
            CFStringRef v45 = (const __CFString *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_FILENAME");
            CFStringRef v46 = v45;
            if (v45 && (CFTypeID v47 = CFGetTypeID(v45), v47 == CFStringGetTypeID()))
            {
              CFStringGetCString(v46, v19 + 176, 31, 0);
            }
            else
            {
              if (qword_10027DD68)
              {
                CFBooleanRef v49 = "Not a string";
                if (!v46) {
                  CFBooleanRef v49 = "is Null or Key-not-present";
                }
                [((id)qword_10027DD68) WFLog:message:3, "%s: Filename :%s", "WiFiMetricsManagerSubmitWatchdogEvent", v49];
              }
            }
            CFStringRef v50 = (const __CFString *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_FUNCTION ");
            CFStringRef v51 = v50;
            if (v50 && (CFTypeID v52 = CFGetTypeID(v50), v52 == CFStringGetTypeID()))
            {
              CFStringGetCString(v51, v19 + 212, 31, 0);
              if (!v8) {
                goto LABEL_138;
              }
            }
            else
            {
              if (qword_10027DD68)
              {
                CFBooleanRef v54 = "Not a string";
                if (!v51) {
                  CFBooleanRef v54 = "is Null or Key-not-present";
                }
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Function name :%s", "WiFiMetricsManagerSubmitWatchdogEvent", v54);
              }
              if (!v8)
              {
LABEL_138:
                if (v9)
                {
                  unsigned __int8 v142 = -86;
                  CFNumberRef v103 = (const __CFNumber *)CFDictionaryGetValue(v9, @"APPLE_IE_PRODUCT_ID");
                  if (v103 && (v104 = v103, CFTypeID TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(v104)))
                  {
                    CFNumberGetValue(v104, kCFNumberSInt8Type, &v142);
                    CFStringRef v106 = CFStringCreateWithFormat(0, 0, @"%d", v142);
                  }
                  else
                  {
                    if (qword_10027DD68) {
                      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: bad type for wpsResponseType. Not a CFNumberType or NULL", "WiFiMetricsManagerSubmitWatchdogEvent")];
                    }
                    CFStringRef v106 = 0;
                  }
                  *((void *)v19 + 602) = v106;
                }
                if (!*((_DWORD *)v19 + 2)) {
                  goto LABEL_192;
                }
                if (qword_10027D620)
                {
                  id v109 = objc_alloc((Class)WAMessage);
                  id v110 = [v109 initWithMetricName:kWAMessageMetricNameWatchdogEvent options:5];
                  if (v110)
                  {
                    int64_t v111 = v110;
                    [v110 addFieldForKey:kWAMessageKeyReason value:[NSNumber numberWithInt:*((unsigned int *)v19 + 3)] options:5];
                    [v111 addFieldForKey:kWAMessageKeySubReason value:[NSNumber numberWithUnsignedInt:*((unsigned int *)v19 + 4)] options:5];
                    CFTypeID v112 = v19 + 28;
                    [v111 addFieldForKey:kWAMessageKeyReasonString, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", v19 + 28), 5 value options];
                    uint64_t v113 = v19 + 92;
                    [v111 addFieldForKey:kWAMessageKeySubReasonString, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", v19 + 92), 5 value options];
                    if (*((void *)v19 + 600)) {
                      [v111 addFieldForKey:kWAMessageKeyWPSMfgElement value:[NSString stringWithString:@"stringWithString:"] options:5];
                    }
                    if (*((void *)v19 + 601)) {
                      [v111 addFieldForKey:kWAMessageKeyWPSModelName value:[NSString stringWithString:@"stringWithString:"] options:5];
                    }
                    if (*((void *)v19 + 602)) {
                      [v111 addFieldForKey:kWAMessageKeyWPSModelNum value:[NSString stringWithString:@"stringWithString:" options:5];
                    }
                    if (*((void *)v19 + 605)) {
                      [v111 addFieldForKey:kWAMessageKeyWPSPrimaryDeviceNameElement value:[NSString stringWithString:@"stringWithString:"] options:5];
                    }
                    if (*((void *)v19 + 606)) {
                      [v111 addFieldForKey:kWAMessageKeyWPSDeviceNameData value:[NSString stringWithString:@"stringWithString:"] options:5];
                    }
                    [v111 addFieldForKey:kWAMessageKeyForegroundActivity value:[NSNumber numberWithBool:sub_1000AA6E4(*(void *)(qword_10027D620 + 16)) != 0] options:5];
                    uint64_t v114 = qword_10027D620;
                    if (*(void *)(qword_10027D620 + 88))
                    {
                      [v111 addFieldForKey:kWAMessageKeyTimeBetweenFailure value:[NSNumber numberWithUnsignedLongLong:5] options:];
                      uint64_t v114 = qword_10027D620;
                    }
                    if (*(double *)(v114 + 80) != 0.0) {
                      [v111 addFieldForKey:kWAMessageKeyRecoveryLatency value:[NSNumber numberWithUnsignedInt:*((unsigned int *)v19 + 1218)] options:5];
                    }
                    unsigned int v115 = *((_DWORD *)v19 + 1);
                    [v111 addFieldForKey:kWAMessageKeyIsDriverAvailabilityNonFatal value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v115 >> 1) & 1) options:5];
                    sub_1000593C0(v111, kWAMessageKeyOUI, (uint64_t)(v19 + 4876), 3u, 1);
                    if (*((void *)v19 + 608))
                    {
                      id v116 = +[WiFiUsageAccessPointProfile profileForBSSID:](WiFiUsageAccessPointProfile, "profileForBSSID:");
                      if (v116) {
                        [v111 addFieldForKey:kWAMessageKeyApProfile value:v116 options:5];
                      }
                    }
                    sub_1000476E8(v111);
                    if ((v115 & 2) == 0 && MGGetBoolAnswer() && (!*v112 || !*v113))
                    {
                      if (qword_10027DD68) {
                        [((id)qword_10027DD68) WFLog:4, @"%s: Fatal chip watchdog with missing reason or subreason", @"__WiFiMetricsManagerWAMessageSubmitWatchdogEvent"];
                      }
                      if (qword_10027DD68)
                      {
                        if (*v112) {
                          CFNumberRef v119 = v19 + 28;
                        }
                        else {
                          CFNumberRef v119 = "zeroLen";
                        }
                        if (*v113) {
                          CFNumberRef v120 = v19 + 92;
                        }
                        else {
                          CFNumberRef v120 = "zeroLen";
                        }
                        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: reason: 0x%x reasonString: %s subreason: 0x%x subreasonString: %s", "__WiFiMetricsManagerWAMessageSubmitWatchdogEvent", *((unsigned int *)v19 + 3), v119, *((unsigned int *)v19 + 4), v120)];
                      }
                      if (qword_10027DD68)
                      {
                        if (v19[176]) {
                          CFNumberRef v122 = v19 + 176;
                        }
                        else {
                          CFNumberRef v122 = "zeroLen";
                        }
                        CFNumberRef v123 = v19 + 212;
                        if (!v19[212]) {
                          CFNumberRef v123 = "zeroLen";
                        }
                        [((id)qword_10027DD68) WFLog:@"%s: flags: 0x%x available: 0x%x minor_reason: 0x%x filename: %s function: %s" message:4, "__WiFiMetricsManagerWAMessageSubmitWatchdogEvent", *((unsigned int *)v19 + 1), *((unsigned int *)v19 + 2), *((unsigned int *)v19 + 6), v122, v123];
                      }
                      if (qword_10027DD68) {
                        [((id)qword_10027DD68) WFLog:message:4, "%s: hasExtTrapInfo: 0x%x sequenceNum: %d signatureCount: %d stackTraceCount: %d recoveryLatency: %d", "__WiFiMetricsManagerWAMessageSubmitWatchdogEvent", v19[244], *((unsigned int *)v19 + 62), *((unsigned int *)v19 + 143), *((unsigned int *)v19 + 224), *((unsigned int *)v19 + 1218)];
                      }
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
                        sub_100195FCC();
                      }
                    }

                    goto LABEL_192;
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:4, @"%s: Failed to alloc WAMessage for WatchdogEvent", @"__WiFiMetricsManagerWAMessageSubmitWatchdogEvent"];
                  }
                }
                else
                {
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: metrics null", "__WiFiMetricsManagerWAMessageSubmitWatchdogEvent")
                  }
                }
LABEL_192:
                CFNumberRef v125 = v108;
                goto LABEL_193;
              }
            }
            CFDictionaryRef v55 = (const __CFDictionary *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_PRIMARY_DEV_TYPE");
            unsigned __int16 valuePtr = -21846;
            CFNumberRef v56 = (const __CFNumber *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_CFG_METHODS");
            if (v56 && (CFNumberRef v57 = v56, v58 = CFNumberGetTypeID(), v58 == CFGetTypeID(v57)))
            {
              CFNumberGetValue(v57, kCFNumberSInt16Type, &valuePtr);
              CFStringRef v59 = CFStringCreateWithFormat(0, 0, @"%d", valuePtr);
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4, @"%s: bad type for wpsConfigMethods. Not a CFNumber or NULL", @"WiFiMetricsManagerSubmitWatchdogEvent"];
              }
              CFStringRef v59 = 0;
            }
            *((void *)v19 + 607) = v59;
            CFStringRef v61 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_MODEL_NAME");
            if (v61 && (v62 = v61, CFTypeID v63 = CFStringGetTypeID(), v63 == CFGetTypeID(v62)))
            {
              CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v62);
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"%s: bad type for wpsModelName. Not a CFString or NULL" arguments:@"WiFiMetricsManagerSubmitWatchdogEvent"];
              }
              CFStringRef Copy = 0;
            }
            *((void *)v19 + 601) = Copy;
            CFStringRef v66 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_MODEL_NUM");
            if (v66 && (v67 = v66, CFTypeID v68 = CFStringGetTypeID(), v68 == CFGetTypeID(v67)))
            {
              CFStringRef v69 = CFStringCreateCopy(kCFAllocatorDefault, v67);
            }
            else
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: bad type for wpsModelNumber. Not a CFString or NULL", "WiFiMetricsManagerSubmitWatchdogEvent")];
              }
              CFStringRef v69 = 0;
            }
            *((void *)v19 + 602) = v69;
            CFStringRef v71 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_MANUFACTURER");
            if (v71 && (CFStringRef v72 = v71, v73 = CFStringGetTypeID(), v73 == CFGetTypeID(v72)))
            {
              CFStringRef v74 = CFStringCreateCopy(kCFAllocatorDefault, v72);
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4, @"%s: bad type for wpsManufacturerElement. Not a CFString or NULL", @"WiFiMetricsManagerSubmitWatchdogEvent"];
              }
              CFStringRef v74 = 0;
            }
            *((void *)v19 + 600) = v74;
            CFStringRef v76 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_DEV_NAME");
            if (v76 && (v77 = v76, CFTypeID v78 = CFStringGetTypeID(), v78 == CFGetTypeID(v77)))
            {
              CFStringRef v79 = CFStringCreateCopy(kCFAllocatorDefault, v77);
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:4, "%s: bad type for wpsDeviceNameElement. Not a CFString or NULL", "WiFiMetricsManagerSubmitWatchdogEvent"];
              }
              CFStringRef v79 = 0;
            }
            *((void *)v19 + 605) = v79;
            CFDataRef v81 = (const __CFData *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_DEV_NAME_DATA");
            if (v81 && (CFDataRef v82 = v81, v83 = CFDataGetTypeID(), v83 == CFGetTypeID(v82)))
            {
              CFIndex Length = CFDataGetLength(v82);
              CFIndex v85 = (UInt8 *)malloc_type_malloc(Length, 0x100004077774924uLL);
              v149.id location = 0;
              v149.CFIndex length = Length;
              CFDataGetBytes(v82, v149, v85);
              CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
              *((void *)v19 + 606) = CFStringCreateWithBytes(kCFAllocatorDefault, v85, Length, SystemEncoding, 0);
              free(v85);
              if (!v55)
              {
LABEL_131:
                unsigned __int8 v143 = -86;
                CFNumberRef v98 = (const __CFNumber *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_RESP_TYPE");
                if (v98 && (CFNumberRef v99 = v98, v100 = CFNumberGetTypeID(), v100 == CFGetTypeID(v99)))
                {
                  CFNumberGetValue(v99, kCFNumberSInt8Type, &v143);
                  CFStringRef v101 = CFStringCreateWithFormat(0, 0, @"%d", v143);
                }
                else
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:message:4, "%s: bad type for wpsResponseType. Not a CFNumberType or NULL", "WiFiMetricsManagerSubmitWatchdogEvent"];
                  }
                  CFStringRef v101 = 0;
                }
                *((void *)v19 + 599) = v101;
                goto LABEL_138;
              }
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:4, "%s: wpsDeviceNameData value is NULL or bad type for wpsDeviceNameData. Not a CFDataType ", "WiFiMetricsManagerSubmitWatchdogEvent"];
              }
              *((void *)v19 + 606) = 0;
              if (!v55) {
                goto LABEL_131;
              }
            }
            unsigned __int16 v145 = -21846;
            unsigned __int16 v144 = -21846;
            CFNumberRef v88 = (const __CFNumber *)CFDictionaryGetValue(v55, @"WPS_DEV_TYPE_CAT");
            if (v88 && (v89 = v88, CFTypeID v90 = CFNumberGetTypeID(), v90 == CFGetTypeID(v89)))
            {
              CFNumberGetValue(v89, kCFNumberSInt16Type, &v145);
              CFStringRef v91 = CFStringCreateWithFormat(0, 0, @"%d", v145);
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"%s: bad type for wpsPrimaryDeviceTypeCategory. Not a CFNumberType or NULL" args:((id)qword_10027DD68), @"WiFiMetricsManagerSubmitWatchdogEvent"];
              }
              CFStringRef v91 = 0;
            }
            *((void *)v19 + 603) = v91;
            CFNumberRef v93 = (const __CFNumber *)CFDictionaryGetValue(v55, @"WPS_DEV_TYPE_SUB_CAT");
            if (v93 && (CFNumberRef v94 = v93, v95 = CFNumberGetTypeID(), v95 == CFGetTypeID(v94)))
            {
              CFNumberGetValue(v94, kCFNumberSInt16Type, &v144);
              CFStringRef v96 = CFStringCreateWithFormat(0, 0, @"%d", v144);
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:4, @"%s: bad type for wpsPrimaryDeviceTypeSubCategory. Not a CFNumberType or NULL", @"WiFiMetricsManagerSubmitWatchdogEvent"];
              }
              CFStringRef v96 = 0;
            }
            *((void *)v19 + 604) = v96;
            goto LABEL_131;
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"%s: null version" arguments:("WiFiMetricsManagerSubmitWatchdogEvent", NULL)];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3, @"%s: null subreason", @"WiFiMetricsManagerSubmitWatchdogEvent"];
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:@"%s: null reason" message:3];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null flags", "WiFiMetricsManagerSubmitWatchdogEvent")];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null available BOOLRef" : @"WiFiMetricsManagerSubmitWatchdogEvent"];
    }
  }
  CFNumberRef v125 = v139;
LABEL_193:
  CFNumberRef v126 = value;
  CFNumberRef v127 = (const void *)*((void *)v19 + 599);
  if (v127)
  {
    CFRelease(v127);
    *((void *)v19 + 599) = 0;
  }
  CFNumberRef v128 = (const void *)*((void *)v19 + 600);
  if (v128)
  {
    CFRelease(v128);
    *((void *)v19 + 600) = 0;
  }
  CFNumberRef v129 = (const void *)*((void *)v19 + 601);
  if (v129)
  {
    CFRelease(v129);
    *((void *)v19 + 601) = 0;
  }
  CFNumberRef v130 = (const void *)*((void *)v19 + 602);
  if (v130)
  {
    CFRelease(v130);
    *((void *)v19 + 602) = 0;
  }
  CFNumberRef v131 = (const void *)*((void *)v19 + 603);
  if (v131)
  {
    CFRelease(v131);
    *((void *)v19 + 603) = 0;
  }
  CFDictionaryRef v132 = (const void *)*((void *)v19 + 604);
  if (v132)
  {
    CFRelease(v132);
    *((void *)v19 + 604) = 0;
  }
  CFDictionaryRef v133 = (const void *)*((void *)v19 + 605);
  if (v133)
  {
    CFRelease(v133);
    *((void *)v19 + 605) = 0;
  }
  char v134 = (const void *)*((void *)v19 + 606);
  if (v134)
  {
    CFRelease(v134);
    *((void *)v19 + 606) = 0;
  }
  CFNumberRef v135 = (const void *)*((void *)v19 + 607);
  if (v135)
  {
    CFRelease(v135);
    *((void *)v19 + 607) = 0;
  }
  CFNumberRef v136 = (const void *)*((void *)v19 + 608);
  if (v136) {
    CFRelease(v136);
  }
  free(v19);
  if (value) {
    goto LABEL_214;
  }
}

void sub_10004E3F0(void *a1, _DWORD *a2, CFDictionaryRef theDict, void *key)
{
  if (CFDictionaryContainsKey(theDict, key))
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFArrayRef v9 = Value;
      CFIndex Count = CFArrayGetCount(Value);
      int v11 = 4 * Count;
      if (4 * (int)Count >= 80) {
        int v11 = 80;
      }
      bzero(a1, v11);
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, i);
          int valuePtr = 0;
          if (ValueAtIndex)
          {
            CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
            int v14 = valuePtr;
          }
          else
          {
            int v14 = 0;
          }
          *((_DWORD *)a1 + i) = v14;
        }
      }
      *a2 = Count;
    }
  }
}

void sub_10004E4C8(void *a1, int a2, const void *a3)
{
  if (qword_10027D620 && (uint64_t v4 = *(void *)(qword_10027D620 + 16)) != 0)
  {
    if (sub_1000931BC(v4) == 1)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Camera is in Foreground", "WiFiMetricsManagerSubmitWiFiKnownNetworksEvent")];
      }
    }
    else
    {
      CFStringRef v7 = (UInt8 *)malloc_type_malloc(0x10uLL, 0x1000040A0FC927FuLL);
      if (v7)
      {
        CFDictionaryRef v8 = v7;
        *(void *)CFStringRef v7 = 0;
        *((void *)v7 + 1) = 0;
        CFDataRef v9 = sub_1000C6CA8((uint64_t)a3);
        if (v9)
        {
          CFDataRef v10 = v9;
          v26.id location = 0;
          v26.CFIndex length = 3;
          CFDataGetBytes(v9, v26, v8 + 12);
          CFRelease(v10);
        }
        *(_DWORD *)CFDictionaryRef v8 = a2;
        *((_DWORD *)v8 + 2) = sub_1000C8A5C((uint64_t)a3);
        *((_DWORD *)v8 + 1) |= 16 * (sub_10001EE48(a3) != 0);
        *((_DWORD *)v8 + 1) |= 8 * (sub_10001A680((uint64_t)a3) != 0);
        *((_DWORD *)v8 + 1) |= 4 * sub_1000C74BC((uint64_t)a3);
        *((_DWORD *)v8 + 1) |= 32 * (sub_1000CC4AC((uint64_t)a3) != 0);
        *((_DWORD *)v8 + 1) |= (sub_1000C6B08((uint64_t)a3) == 1) << 6;
        if (sub_1000C8140((uint64_t)a3)) {
          *((_DWORD *)v8 + 1) |= 2u;
        }
        int v11 = sub_10001A43C(a3);
        CFDictionaryRef v12 = sub_1000A86C8(a1);
        if (v12)
        {
          CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v12);
          CFDictionaryRef v14 = Copy;
          if (v11 && Copy && CFDictionaryContainsKey(Copy, v11)) {
            *((_DWORD *)v8 + 1) |= 1u;
          }
        }
        else
        {
          CFDictionaryRef v14 = 0;
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: eventType %d, networkSecurity %d, networkTypeBitMap 0x%X, oui %X:%X:%X", "WiFiMetricsManagerSubmitWiFiKnownNetworksEvent", *(unsigned int *)v8, *((unsigned int *)v8 + 2), *((unsigned int *)v8 + 1), v8[12], v8[13], v8[14]);
        }
        id v18 = objc_alloc((Class)WAMessage);
        id v19 = [v18 initWithMetricName:kWAMessageMetricNameKnownNetworkEvent options:6];
        if (v19)
        {
          CFNumberRef v20 = v19;
          if ((*(_DWORD *)v8 - 1) >= 0xF) {
            uint64_t v21 = 16;
          }
          else {
            uint64_t v21 = *(unsigned int *)v8;
          }
          [v19 addFieldForKey:kWAMessageKeyKnownNetworkEventType value:[NSNumber numberWithUnsignedInt:v21] options:7];
          [v20 addFieldForKey:kWAMessageKeyKnownNetworkTypeBitmap value:[NSNumber numberWithUnsignedInt:*((unsigned int *)v8 + 1)] options:7];
          [v20 addFieldForKey:kWAMessageKeyNetworkAuthFlags value:[NSNumber numberWithUnsignedInt:*((unsigned int *)v8 + 2)] options:7];
          sub_1000593C0(v20, kWAMessageKeyOUI, (uint64_t)(v8 + 12), 3u, 1);
          if (!sub_10005655C(v20, a3, 6))
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4, @"%s: Failed to append SSID/BSSID to WAMessage", @"__WiFiMetricsManagerWAMessageUpdateKnownNetworkEvent"];
            }
          }
          sub_1000476E8(v20);
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4, @"%s: Failed to alloc WAMessage for KnownNetworksEvent", @"__WiFiMetricsManagerWAMessageUpdateKnownNetworkEvent"];
          }
        }
        if (v12) {
          CFRelease(v12);
        }
        if (v14) {
          CFRelease(v14);
        }
        free(v8);
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:@"%s: null knownNetworksEventMetric" message:3];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null metrics", "WiFiMetricsManagerSubmitWiFiKnownNetworksEvent"];
    }
  }
}

void sub_10004E974(unsigned char *a1)
{
  if (a1)
  {
    io_registry_entry_t v2 = malloc_type_malloc(0x5A8uLL, 0x1000040C09493A1uLL);
    if (v2)
    {
      CFTypeRef v3 = v2;
      bzero(v2, 0x5A8uLL);
      memmove(v3, a1, 0x5A8uLL);
      if (*a1)
      {
        id v6 = objc_alloc((Class)WAMessage);
        id v7 = [v6 initWithMetricName:kWAMessageMetricNameLinkQualityStats options:5];
        if (v7)
        {
          unsigned int v15 = v7;
          uint64_t context = v5;
          CFStringRef v17 = v4;
          id v19 = +[NSMutableString string];
          id v20 = +[NSMutableString string];
          id v21 = +[NSMutableString string];
          id v22 = +[NSMutableString string];
          id v23 = +[NSMutableString string];
          id v24 = +[NSMutableString string];
          id v32 = +[NSMutableString string];
          id v18 = +[NSMutableString string];
          id v25 = +[NSMutableString string];
          id v26 = +[NSMutableString string];
          id v27 = +[NSMutableString string];
          id v28 = +[NSMutableString string];
          id v29 = +[NSMutableString string];
          id v30 = +[NSMutableString string];
          id v31 = +[NSMutableString string];
          id v33 = +[NSMutableString string];
          id v34 = +[NSMutableString string];
          id v35 = +[NSMutableString string];
          id v36 = +[NSMutableString string];
          id v37 = +[NSMutableString string];
          id v38 = +[NSMutableString string];
          id v39 = +[NSMutableString string];
          id v40 = +[NSMutableString string];
          id v41 = +[NSMutableString string];
          id v42 = +[NSMutableString string];
          id v43 = +[NSMutableString string];
          id v44 = +[NSMutableString string];
          id v45 = +[NSMutableString string];
          id v46 = +[NSMutableString string];
          id v47 = +[NSMutableString string];
          id v48 = +[NSMutableString string];
          id v49 = +[NSMutableString string];
          id v50 = +[NSMutableString string];
          id v51 = +[NSMutableString string];
          id v52 = +[NSMutableString string];
          id v53 = +[NSMutableString string];
          id v8 = +[NSMutableString string];
          LODWORD(v9) = *a1;
          if (*a1)
          {
            uint64_t v10 = 0;
            unint64_t v11 = 0;
            do
            {
              if (v11 >= (v9 - 1)) {
                CFStringRef v12 = &stru_100248240;
              }
              else {
                CFStringRef v12 = @":";
              }
              [v19 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 8]), "stringValue"), v12];
              [v20 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 12]), "stringValue"), v12];
              [v21 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 16]), "stringValue"), v12];
              [v22 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 20]), "stringValue"), v12];
              [v23 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 24]), "stringValue"), v12];
              [v24 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 28]), "stringValue"), v12];
              [v18 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 32]), "stringValue"), v12];
              [v32 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 36]), "stringValue"), v12];
              [v25 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 40]), "stringValue"), v12];
              [v26 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", (char)a1[v10 + 44]), "stringValue"), v12];
              [v27 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[v10 + 45]), "stringValue"), v12];
              [v28 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[v10 + 46]), "stringValue"), v12];
              [v29 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[v10 + 47]), "stringValue"), v12];
              [v30 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[v10 + 48]), "stringValue"), v12];
              [v31 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[v10 + 49]), "stringValue"), v12];
              [v33 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[v10 + 50]), "stringValue"), v12];
              [v34 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[v10 + 51]), "stringValue"), v12];
              [v35 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 52]), "stringValue"), v12];
              [v36 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 56]), "stringValue"), v12];
              [v37 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[v10 + 60]), "stringValue"), v12];
              [v38 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 64]), "stringValue"), v12];
              [v39 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 68]), "stringValue"), v12];
              [v40 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 72]), "stringValue"), v12];
              [v41 appendFormat:@"%@%@", +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%.2f", *(void *)&a1[v10 + 80]), v12];
              [v42 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 88]), "stringValue"), v12];
              [v43 appendFormat:@"%@%@", +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%.2f", *(void *)&a1[v10 + 96]), v12];
              [v44 appendFormat:@"%@%@", +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%.2f", *(void *)&a1[v10 + 104]), v12];
              [v45 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 112]), "stringValue"), v12];
              [v46 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v10 + 116]), "stringValue"), v12];
              [v47 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(void *)&a1[v10 + 120]), "stringValue"), v12];
              [v48 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(void *)&a1[v10 + 128]), "stringValue"), v12];
              [v49 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(void *)&a1[v10 + 136]), "stringValue"), v12];
              [v50 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[v10 + 144]), "stringValue"), v12];
              [v51 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", (char)a1[v10 + 145]), "stringValue"), v12];
              [v52 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[v10 + 146]), "stringValue"), v12];
              [v53 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[v10 + 147]), "stringValue"), v12];
              [v8 appendFormat:@"%@%@", -[NSNumber stringValue](+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[v10 + 148]), "stringValue"), v12];
              ++v11;
              unint64_t v9 = *a1;
              v10 += 144;
            }
            while (v11 < v9);
          }
          [v15 addFieldForKey:@"txFrames" value:v19 options:5];
          [v15 addFieldForKey:@"txFail" value:v20 options:5];
          [v15 addFieldForKey:@"txRetrans" value:v21 options:5];
          [v15 addFieldForKey:@"bcnSched" value:v22 options:5];
          [v15 addFieldForKey:@"bcnRcvs" value:v23 options:5];
          [v15 addFieldForKey:@"fwTxFrames" value:v24 options:5];
          [v15 addFieldForKey:@"fwTxFail" value:v18 options:5];
          [v15 addFieldForKey:@"fwTxRetrans" value:v32 options:5];
          [v15 addFieldForKey:@"rxFrames" value:v25 options:5];
          [v15 addFieldForKey:@"rssi" value:v26 options:5];
          [v15 addFieldForKey:@"trgDisc" value:v27 options:5];
          [v15 addFieldForKey:@"gwArpExpiry" value:v28 options:5];
          [v15 addFieldForKey:@"usrInput" value:v29 options:5];
          [v15 addFieldForKey:@"txPerSign" value:v30 options:5];
          [v15 addFieldForKey:@"fwTxPerSign" value:v31 options:5];
          [v15 addFieldForKey:@"bcnPerSign" value:v33 options:5];
          [v15 addFieldForKey:@"sympSign" value:v34 options:5];
          [v15 addFieldForKey:@"fgAppNetUsage" value:v35 options:5];
          [v15 addFieldForKey:@"sympUsrImpact" value:v36 options:5];
          [v15 addFieldForKey:@"sympAwdCode" value:v37 options:5];
          [v15 addFieldForKey:@"arpFailureCount" value:v38 options:5];
          [v15 addFieldForKey:@"dnsServersImpacted" value:v39 options:5];
          [v15 addFieldForKey:@"dnsServersTotal" value:v40 options:5];
          [v15 addFieldForKey:@"gateOpenTime" value:v41 options:5];
          [v15 addFieldForKey:@"trafficWatchRx" value:v42 options:5];
          [v15 addFieldForKey:@"trafficWatchDuration" value:v43 options:5];
          [v15 addFieldForKey:@"trafficWatchTime" value:v44 options:5];
          [v15 addFieldForKey:@"validState" value:v45 options:5];
          [v15 addFieldForKey:@"metricReason" value:v46 options:5];
          [v15 addFieldForKey:@"rapidLqmDuration" value:v47 options:5];
          [v15 addFieldForKey:@"tdEvalDuration" value:v48 options:5];
          [v15 addFieldForKey:@"roamWaitTime" value:v49 options:5];
          [v15 addFieldForKey:@"autoLeaveSign" value:v50 options:5];
          [v15 addFieldForKey:@"autoLeaveRssi" value:v51 options:5];
          [v15 addFieldForKey:@"actProbeSign" value:v52 options:5];
          [v15 addFieldForKey:@"probesSent" value:v53 options:5];
          [v15 addFieldForKey:@"probesFailed" value:v8 options:5];
          sub_1000476E8(v15);

          uint64_t v4 = v17;
          uint64_t v5 = context;
          goto LABEL_12;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: Failed to alloc WAMessage for TriggerDisconnectData"];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:message:3, "%s: No records in data.. bailing", "__WiFiMetricsManagerWAMessageSubmitTriggerDisconnectData"];
        }
      }
LABEL_12:
      free(v3);
      return;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null linkStatsMetric", "WiFiMetricsManagerSubmitTriggerDisconnectData")];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null stats", @"WiFiMetricsManagerSubmitTriggerDisconnectData"];
    }
  }
}

void sub_10004F5C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a2 || !qword_10027D620) {
    return;
  }
  int v7 = sub_1000931BC(*(void *)(qword_10027D620 + 16));
  if (!v7)
  {
    if (a3)
    {
      id v10 = objc_alloc((Class)WAMessage);
      id v11 = [v10 initWithMetricName:kWAMessageMetricNameRoamStatus options:7];
      if (v11)
      {
        CFStringRef v12 = v11;
        [v11 addFieldForKey:kWAMessageKeyTimeStarted value:[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(void *)a2) options:7];
        [v12 addFieldForKey:kWAMessageKeyTimeEnded value:[NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 8)] options:7];
        [v12 addFieldForKey:kWAMessageKeyNetworkAuthFlags value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 16)] options:7];
        [v12 addFieldForKey:kWAMessageKeyRoamFlags value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 20)] options:7];
        [v12 addFieldForKey:kWAMessageKeyStatus value:[NSNumber numberWithInt:*(unsigned int *)(a2 + 24)] options:7];
        [v12 addFieldForKey:kWAMessageKeyReason value:[NSNumber numberWithInt:*(unsigned int *)(a2 + 28)] options:7];
        [v12 addFieldForKey:kWAMessageKeyStatusString value:[WiFiRoamManager stringRepresentationWithStatus:](WiFiRoamManager, "stringRepresentationWithStatus:", *(unsigned int *)(a2 + 24)) options:7];
        [v12 addFieldForKey:kWAMessageKeyReasonString value:[WiFiRoamManager stringRepresentationWithReason:](WiFiRoamManager, "stringRepresentationWithReason:", *(unsigned int *)(a2 + 28)) options:7];
        [v12 addFieldForKey:kWAMessageKeyProfileType value:[NSNumber numberWithInt:*(unsigned int *)(a2 + 32)] options:7];
        [v12 addFieldForKey:kWAMessageKeyOriginRSSI value:[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 36)) options:7];
        [v12 addFieldForKey:kWAMessageKeyTargetRSSI value:[NSNumber numberWithInt:*(unsigned int *)(a2 + 40)] options:7];
        [v12 addFieldForKey:kWAMessageKeyOriginChannel value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 44)] options:7];
        [v12 addFieldForKey:kWAMessageKeyTargetChannel value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 48)] options:7];
        [v12 addFieldForKey:kWAMessageKeyOriginChannelFlags value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 52)] options:7];
        [v12 addFieldForKey:kWAMessageKeyTargetChannelFlags value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 56)) options:7];
        sub_1000593C0(v12, kWAMessageKeyOriginOUI, a2 + 60, 3u, 1);
        sub_1000593C0(v12, kWAMessageKeyTargetOUI, a2 + 63, 3u, 1);
        [v12 addFieldForKey:kWAMessageKeyCCATotal value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 68)] options:7];
        [v12 addFieldForKey:kWAMessageKeyCCAOthers value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 76)] options:7];
        [v12 addFieldForKey:kWAMessageKeyCCAInt value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 80)] options:7];
        [v12 addFieldForKey:kWAMessageKeyOriginTxPER value:[NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 88)] options:7];
        [v12 addFieldForKey:kWAMessageKeyOffChannelDwellTime value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 96)] options:7];
        [v12 addFieldForKey:kWAMessageKeyRoamScanDuration value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 100)] options:7];
        [v12 addFieldForKey:kWAMessageKeyAssociationDuration value:[NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 104)] options:7];
        [v12 addFieldForKey:kWAMessageKeyHostReason value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 112)] options:7];
        [v12 addFieldForKey:kWAMessageKeyHostReasonString value:[WiFiRoamManager stringRepresentationWithHostReason:](WiFiRoamManager, "stringRepresentationWithHostReason:", *(unsigned int *)(a2 + 112)) options:7];
        [v12 addFieldForKey:kWAMessageKeyMotionState value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 116)] options:7];
        [v12 addFieldForKey:kWAMessageKeyVoipActive value:[NSNumber numberWithBool:*(unsigned __int8 *)(a2 + 120)] options:7];
        [v12 addFieldForKey:kWAMessageKeyLateRoam value:[NSNumber numberWithBool:*(unsigned __int8 *)(a2 + 121)] options:7];
        [v12 addFieldForKey:kWAMessageKeyOriginBcnPER value:[NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 128)] options:7];
        [v12 addFieldForKey:kWAMessageKeyOriginFWTxPER value:[NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 136)] options:7];
        [v12 addFieldForKey:kWAMessageKeyOriginEnhancedSecurityType value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 144)] options:7];
        [v12 addFieldForKey:kWAMessageKeyTargetEnhancedSecurityType value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 148)] options:7];
        [v12 addFieldForKey:kWAMessageKeyOriginAKMs value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 152)] options:7];
        [v12 addFieldForKey:kWAMessageKeyTargetAKMs value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 156)] options:7];
        [v12 addFieldForKey:kWAMessageKeyOriginPhyMode value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 160)] options:7];
        [v12 addFieldForKey:kWAMessageKeyTargetPhyMode value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 164)] options:7];
        [v12 addFieldForKey:kWAMessageKeyScannedChannelCount value:[NSNumber numberWithUnsignedInt:*(unsigned __int16 *)(a2 + 180)] options:7];
        sub_1000593C0(v12, kWAMessageKeyOriginAddr, a2 + 168, 6u, 0);
        uint64_t v13 = a2 + 174;
        sub_1000593C0(v12, kWAMessageKeyTargetAddr, a2 + 174, 6u, 0);
        [v12 addFieldForKey:kWAMessageKeySSID value:[NSString stringWithString:a3] options:6];
        if (a4 && [a4 count])
        {
          uint64_t v37 = a1;
          id v38 = v12;
          id v39 = v8;
          id v44 = +[NSMutableArray array];
          long long v46 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          id v14 = [a4 countByEnumeratingWithState:&v46 objects:v50 count:16];
          if (v14)
          {
            id v15 = v14;
            uint64_t v16 = a4;
            uint64_t v17 = *(void *)v47;
            uint64_t v43 = kWAMessageKeyChannel;
            uint64_t v42 = kWAMessageKeyChannelFlags;
            uint64_t v41 = kWAMessageKeyRSSI;
            uint64_t v40 = kWAMessageKeyBSSID;
            do
            {
              for (CFIndex i = 0; i != v15; CFIndex i = (char *)i + 1)
              {
                if (*(void *)v47 != v17) {
                  objc_enumerationMutation(v16);
                }
                id v19 = *(void **)(*((void *)&v46 + 1) + 8 * i);
                id v20 = [v19 objectForKey:@"CHANNEL"];
                id v21 = [v19 objectForKey:@"CHANNEL_FLAGS"];
                id v22 = [v19 objectForKey:@"RSSI"];
                id v23 = [v19 objectForKey:@"BSSID"];
                if (v20) {
                  BOOL v24 = v22 == 0;
                }
                else {
                  BOOL v24 = 1;
                }
                if (!v24 && v23 != 0 && v21 != 0)
                {
                  id v27 = v23;
                  id v28 = +[NSMutableDictionary dictionary];
                  [v28 setObject:v20 forKey:v43];
                  [v28 setObject:v21 forKey:v42];
                  [v28 setObject:v22 forKey:v41];
                  [v28 setObject:v27 forKey:v40];
                  id v29 = v28;
                  uint64_t v16 = a4;
                  [v44 addObject:v29];
                }
              }
              id v15 = [v16 countByEnumeratingWithState:&v46 objects:v50 count:16];
            }
            while (v15);
          }
          CFStringRef v12 = v38;
          [v38 addFieldForKey:kWAMessageKeyRoamCache value:[NSArray arrayWithArray:v44] options:6];
          id v8 = v39;
          a1 = v37;
          uint64_t v13 = a2 + 174;
        }
        if (a1)
        {
          id v30 = malloc_type_malloc(0x34CuLL, 0x1000040503055D5uLL);
          if (!v30)
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null lqmHistoryMetric", "__WiFiMetricsManagerWAMessageSubmitRoamStatus")
            }
            goto LABEL_39;
          }
          id v31 = v30;
          bzero(v30, 0x34CuLL);
          if (sub_100047BE4(a1, (uint64_t)v31)) {
            sub_100059528(v12, a1, 0, (uint64_t)v31);
          }
          free(v31);
        }
        uint64_t v32 = kWAMessageKeyMetricDate;
        [+[NSDate date] timeIntervalSinceReferenceDate];
        [v12 addFieldForKey:v32 value:[NSNumber numberWithDouble:6]];
        if (!*(_DWORD *)(a2 + 24))
        {
          id v33 = sub_10004C9BC(v13, 6u);
          if (v33)
          {
            id v34 = +[WiFiUsageAccessPointProfile profileForBSSID:v33];
            if (v34) {
              [v12 addFieldForKey:kWAMessageKeyApProfile value:v34 options:6];
            }
          }
        }
        sub_1000476E8(v12);
LABEL_39:

LABEL_40:
        return;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: Failed to alloc WAMessage for RoamStatus"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: ssid null" args:("__WiFiMetricsManagerWAMessageSubmitRoamStatus")];
      }
    }
    goto LABEL_40;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: Camera is in Foreground" :@"WiFiMetricsManagerSubmitRoamStatus"];
  }
}

void sub_1000501A4(long long *a1)
{
  if (a1)
  {
    io_registry_entry_t v2 = malloc_type_malloc(0x38uLL, 0x10600406BF8FC03uLL);
    if (v2)
    {
      uint64_t v3 = (uint64_t)v2;
      void v2[6] = 0;
      *((_OWORD *)v2 + 1) = 0u;
      *((_OWORD *)v2 + 2) = 0u;
      *(_OWORD *)io_registry_entry_t v2 = 0u;
      long long v4 = *a1;
      long long v5 = a1[1];
      long long v6 = a1[2];
      void v2[6] = *((void *)a1 + 6);
      *((_OWORD *)v2 + 1) = v5;
      *((_OWORD *)v2 + 2) = v6;
      *(_OWORD *)io_registry_entry_t v2 = v4;
      CFStringRef v7 = (const __CFString *)*((void *)a1 + 5);
      if (v7) {
        void v2[5] = CFStringCreateCopy(kCFAllocatorDefault, v7);
      }
      CFStringRef v8 = (const __CFString *)*((void *)a1 + 6);
      if (v8) {
        *(void *)(v3 + 48) = CFStringCreateCopy(kCFAllocatorDefault, v8);
      }
      id v11 = objc_alloc((Class)WAMessage);
      id v12 = [v11 initWithMetricName:kWAMessageMetricNameActionFrameEvent options:5];
      if (v12)
      {
        uint64_t v13 = v12;
        sub_1000593C0(v12, kWAMessageKeyOUI, v3, 3u, 1);
        [v13 addFieldForKey:kWAMessageKeyEnvironmentType value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(v3 + 4)] options:5];
        [v13 addFieldForKey:kWAMessageKeyCategoryCode value:[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(char *)(v3 + 8)) options:5];
        [v13 addFieldForKey:kWAMessageKeyActionCode value:[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(char *)(v3 + 9)) options:5];
        [v13 addFieldForKey:kWAMessageKeyDialogToken value:[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(char *)(v3 + 10)) options:5];
        [v13 addFieldForKey:kWAMessageKeyStatus value:[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(char *)(v3 + 11)) options:5];
        [v13 addFieldForKey:kWAMessageKeyFrameType value:[NSNumber numberWithChar:*(char *)(v3 + 12)] options:5];
        [v13 addFieldForKey:kWAMessageKeyBtmDisassociationTimeout value:[NSNumber numberWithShort:*(__int16 *)(v3 + 14)] options:5];
        [v13 addFieldForKey:kWAMessageKeyBtmValidityInterval value:[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(char *)(v3 + 16)) options:5];
        [v13 addFieldForKey:kWAMessageKeyBtmTerminationDuration value:[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(char *)(v3 + 17)) options:5];
        [v13 addFieldForKey:kWAMessageKeyBtmHasPreferredCandidateList value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned char *)(v3 + 18) != 0) options:5];
        [v13 addFieldForKey:kWAMessageKeyBtmAbridged value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned char *)(v3 + 19) != 0) options:5];
        [v13 addFieldForKey:kWAMessageKeyBtmDisassociationImminent value:[NSNumber numberWithBool:][v3 + 20] != 0 options:5];
        [v13 addFieldForKey:kWAMessageKeyBtmBssTerminationIncluded value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned char *)(v3 + 21) != 0) options:5];
        [v13 addFieldForKey:kWAMessageKeyBtmEssTerminationIncluded value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned char *)(v3 + 22) != 0) options:5];
        [v13 addFieldForKey:kWAMessageKeyChannel value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(v3 + 24)] options:5];
        [v13 addFieldForKey:kWAMessageKeyChannelWidth value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(v3 + 28)] options:5];
        [v13 addFieldForKey:kWAMessageKeyChannelFlags value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(v3 + 36)] options:5];
        [v13 addFieldForKey:kWAMessageKeyPhyMode value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(v3 + 32)] options:5];
        if (*(void *)(v3 + 40)) {
          [v13 addFieldForKey:kWAMessageKeyWPSModelName value:[NSString stringWithString:@"stringWithString:"] options:5];
        }
        if (*(void *)(v3 + 48)) {
          [v13 addFieldForKey:kWAMessageKeyWPSModelNum value:[NSString stringWithString:@"stringWithString:"] options:5];
        }
        sub_1000476E8(v13);
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Failed to alloc WAMessage for ActionFrameEvent", "__WiFiMetricsManagerWAMessageSubmitActionFrameEvent");
        }
      }
      id v14 = *(const void **)(v3 + 48);
      if (v14)
      {
        CFRelease(v14);
        *(void *)(v3 + 48) = 0;
      }
      id v15 = *(const void **)(v3 + 40);
      if (v15) {
        CFRelease(v15);
      }
      free((void *)v3);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: null afMetricCopy" args:("WiFiMetricsManagerSubmitActionFrameEvent", NULL)];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null afMetric" args:("WiFiMetricsManagerSubmitActionFrameEvent", nil)];
    }
  }
}

uint64_t sub_100050748(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t valuePtr = 0;
  CFBooleanRef value = 0;
  unsigned int v33 = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s received invalid type (%d)", "WiFiMetricsManagerCheckQueryableWatchdogInfo", 0];
    }
    return 0;
  }
  CFNumberRef v4 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DRIVER_AVAILABLE_FLAGS");
  if (!v4) {
    return 0;
  }
  long long v5 = v4;
  CFNumberGetValue(v4, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 0;
  }
  CFStringRef v7 = Mutable;
  unsigned int v32 = a1 - 1;
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v32);
  if (v8) {
    CFDictionarySetValue(v7, @"APPLE80211KEY_AWD_TRAP_TYPE", v8);
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s requesting info type (%d) - trap dict: %@", "WiFiMetricsManagerCheckQueryableWatchdogInfo", v32, v7 message];
  }
  for (int i = 6; ; --i)
  {
    uint64_t v11 = Apple80211Get();
    uint64_t v12 = v11;
    if ((int)v11 <= 15)
    {
      if (v11 != -3905) {
        break;
      }
    }
    else if (v11 != 61 && v11 != 16)
    {
      goto LABEL_74;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  if (!v11)
  {
    CFDictionaryGetValueIfPresent(v7, @"TRAP_SEQUENECE_NUM", (const void **)&value);
    if (value)
    {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v33);
      CFDictionaryGetValueIfPresent(theDict, @"DRIVER_AVAILABLE_TRAP_SEQUENCE", (const void **)&value);
      if (value)
      {
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
        if (v33 == valuePtr)
        {
          if (a1 == 2)
          {
            for (unsigned int j = 10; j < 0xF; ++j)
            {
              CFNumberRef v21 = CFNumberCreate(0, kCFNumberIntType, &j);
              if (v21)
              {
                CFNumberRef v22 = v21;
                if (CFDictionaryContainsKey(v7, v21))
                {
                  id v23 = CFDictionaryGetValue(v7, v22);
                  if (v23)
                  {
                    if (j - 10 <= 4) {
                      CFDictionaryAddValue(theDict, off_10023F508[j - 10], v23);
                    }
                  }
                }
                CFRelease(v22);
              }
            }
            if (CFDictionaryContainsKey(v7, @"TRAP_SEQUENECE_NUM")) {
              long long v5 = CFDictionaryGetValue(v7, @"TRAP_SEQUENECE_NUM");
            }
            if (v5) {
              CFDictionaryAddValue(theDict, @"DRIVER_AVAILABLE_JOIN_TIMEOUT_SEQUENCE", v5);
            }
            CFBooleanRef v19 = kCFBooleanTrue;
            CFStringRef v20 = @"DRIVER_AVAILABLE_HAVE_JOIN_TIMEOUT_INFO";
            goto LABEL_56;
          }
          if (a1 == 1)
          {
            for (unsigned int j = 1; j < 0xA; ++j)
            {
              CFNumberRef v13 = CFNumberCreate(0, kCFNumberIntType, &j);
              if (v13)
              {
                CFNumberRef v14 = v13;
                if (CFDictionaryContainsKey(v7, v13))
                {
                  id v15 = CFDictionaryGetValue(v7, v14);
                  if (v15)
                  {
                    if (j - 1 <= 8) {
                      CFDictionaryAddValue(theDict, off_10023F4A0[j - 1], v15);
                    }
                  }
                }
                CFRelease(v14);
              }
            }
            for (unsigned int j = 15; j < 0x13; ++j)
            {
              CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &j);
              if (v16)
              {
                CFNumberRef v17 = v16;
                if (CFDictionaryContainsKey(v7, v16))
                {
                  id v18 = CFDictionaryGetValue(v7, v17);
                  if (v18)
                  {
                    if (j - 15 <= 3) {
                      CFDictionaryAddValue(theDict, off_10023F4E8[j - 15], v18);
                    }
                  }
                }
                CFRelease(v17);
              }
            }
            if (CFDictionaryContainsKey(v7, @"TRAP_SEQUENECE_NUM")) {
              long long v5 = CFDictionaryGetValue(v7, @"TRAP_SEQUENECE_NUM");
            }
            if (v5) {
              CFDictionaryAddValue(theDict, @"DRIVER_AVAILABLE_TRAP_SEQUENCE", v5);
            }
            CFBooleanRef v19 = kCFBooleanTrue;
            CFStringRef v20 = @"DRIVER_AVAILABLE_HAVE_EXT_TRAP";
LABEL_56:
            CFDictionaryAddValue(theDict, v20, v19);
LABEL_60:
            uint64_t v12 = 0;
            goto LABEL_61;
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:message:4, "%s unrecognized kWiFiMetricsManagerExtWatchDogInfoType (%d)", "WiFiMetricsManagerCheckQueryableWatchdogInfo", a1, v30];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s driver availability sequence (%u) vs trap dict sequence (%u) mismatch", "WiFiMetricsManagerCheckQueryableWatchdogInfo", valuePtr, v33);
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s driver availability didn't contain a sequence number", "WiFiMetricsManagerCheckQueryableWatchdogInfo", v29, v30);
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, @"%s trap dict didn't contain a sequence number", @"WiFiMetricsManagerCheckQueryableWatchdogInfo", v29, v30];
      }
    }
    goto LABEL_60;
  }
LABEL_74:
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s Apple80211Get(APPLE80211_IOC_TRAP_INFO) failed: %d", "WiFiMetricsManagerCheckQueryableWatchdogInfo", v12);
  }
  if (v12)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s WiFiMetricsManagerCheckQueryableWatchdogInfo() finished with error: %d", "WiFiMetricsManagerCheckQueryableWatchdogInfo", v12);
    }
  }
LABEL_61:
  CFRelease(v7);
  if (v8) {
    CFRelease(v8);
  }
  return v12;
}

void sub_100050D08(unsigned __int8 a1)
{
  io_registry_entry_t v2 = (unsigned __int8 *)malloc_type_malloc(1uLL, 0x100004077774924uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    unsigned __int8 *v2 = a1;
    id v6 = objc_alloc((Class)WAMessage);
    id v7 = [v6 initWithMetricName:kWAMessageMetricNameTxInhibit options:5];
    if (v7)
    {
      CFNumberRef v8 = v7;
      [v7 addFieldForKey:kWAMessageKeyTxInhibitState value:[NSNumber numberWithBool:*v3] options:5];
      sub_1000476E8(v8);
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Failed to alloc WAMessage for TxInhibit", "__WiFiMetricsManagerWAMessageSubmitTxInhibitState")];
      }
    }
    free(v3);
  }
}

void sub_100050E54(uint64_t a1, const __CFString *a2, const void *a3)
{
  if (!a1 || !a2) {
    return;
  }
  if (!qword_10027D620 || CFArrayGetCount(*(CFArrayRef *)(qword_10027D620 + 32)) < 1)
  {
LABEL_20:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s WiFiMetricsManagerRecordColocatedSSIDData: Failed to find WiFiMetricsDeviceMetricsRef for event", "WiFiMetricsManagerRecordColocatedSSIDData"];
    }
    return;
  }
  CFIndex v5 = 0;
  while (1)
  {
    CFNumberRef ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(qword_10027D620 + 32), v5);
    if (!ValueAtIndex)
    {
      uint64_t v11 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_19;
      }
      uint64_t v12 = "WiFiMetricsManagerGetDeviceMetricsFromInterfaceName: Couldn't get WiFiMetricsDeviceMetricsRef";
LABEL_18:
      [v11 WFLog:3 message:v12];
      goto LABEL_19;
    }
    id v7 = ValueAtIndex;
    uint64_t v8 = *ValueAtIndex;
    if (!v8)
    {
      uint64_t v11 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_19;
      }
      uint64_t v12 = "WiFiMetricsManagerGetDeviceMetricsFromInterfaceName: Couldn't get WiFiDeviceRef";
      goto LABEL_18;
    }
    CFStringRef v9 = (const __CFString *)sub_100017C48(v8);
    if (!v9)
    {
      uint64_t v11 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        uint64_t v12 = "WiFiMetricsManagerGetDeviceMetricsFromInterfaceName: Couldn't get WiFiDevice ifname";
        goto LABEL_18;
      }
LABEL_19:
      goto LABEL_10;
    }
    if (CFEqual(v9, a2)) {
      break;
    }
LABEL_10:
    if (++v5 >= CFArrayGetCount(*(CFArrayRef *)(qword_10027D620 + 32))) {
      goto LABEL_20;
    }
  }
  CFNumberRef v14 = (__CFSet *)v7[89];
  if (a3)
  {
    CFSetAddValue(v14, a3);
  }
  else
  {
    CFSetRemoveAllValues(v14);
  }
}

BOOL sub_100051068()
{
  *(void *)uint64_t v8 = 0x1500000001;
  uint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  size_t v5 = 16;
  if (!qword_10027D620)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null metrics", "WiFiMetricsManagerIsFirstBoot")];
    }
    goto LABEL_11;
  }
  if (sysctl(v8, 2u, &v6, &v5, 0, 0) == -1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: unable to get boot timestamp", "WiFiMetricsManagerIsFirstBoot"];
    }
LABEL_11:
    return 0;
  }
  double v0 = *(double *)(qword_10027D620 + 24) - ((double)(int)v7 / 1000000.0 + (double)v6 - kCFAbsoluteTimeIntervalSince1970);
  BOOL v1 = v0 < 30.0;
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: managerBootTime %fsecs, firstBoot %d", "WiFiMetricsManagerIsFirstBoot", *(void *)&v0, v0 < 30.0, v5);
  }
  return v1;
}

double sub_100051218(double *a1)
{
  id v4 = objc_alloc((Class)WAMessage);
  id v5 = [v4 initWithMetricName:kWAMessageMetricNameSoftAP options:5];
  if (v5)
  {
    uint64_t v6 = v5;
    [v5 addFieldForKey:kWAMessageKeyBringUpMethod value:[NSNumber numberWithInt:*(unsigned int *)a1] options:5];
    [v6 addFieldForKey:kWAMessageKeyBringUpEndState value:[NSNumber numberWithInt:*((unsigned int *)a1 + 1)] options:5];
    [v6 addFieldForKey:kWAMessageKeyTeardownReason value:[NSNumber numberWithInt:*((unsigned int *)a1 + 2)] options:5];
    [v6 addFieldForKey:kWAMessageKeyMisStartTime value:[NSNumber numberWithDouble:a1[2]] options:5];
    [v6 addFieldForKey:kWAMessageKeySoftAPUpTime value:[NSNumber numberWithDouble:a1[3]] options:5];
    [v6 addFieldForKey:kWAMessageKeySessionEndTime value:[NSNumber numberWithDouble:a1[4]] options:5];
    [v6 addFieldForKey:kWAMessageKeyAppleDeviceConnectCount value:[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)a1 + 20)] options:5];
    [v6 addFieldForKey:kWAMessageKeyAppleDeviceConnectionFlags value:[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)a1 + 21)] options:5];
    [v6 addFieldForKey:kWAMessageKeyNonAppleDeviceConnectCount value:[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)a1 + 22)] options:5];
    [v6 addFieldForKey:kWAMessageKeyDeviceDisconnectCount value:[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)a1 + 23)] options:5];
    [v6 addFieldForKey:kWAMessageKeyLowPowerModeDuration value:[NSNumber numberWithUnsignedLongLong:*((void *)a1 + 6)] options:5];
    [v6 addFieldForKey:kWAMessageKeyNanPhPublisherFailure value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)a1 + 72)] options:5];
    [v6 addFieldForKey:kWAMessageKeyNanPhNanStationCount value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)a1 + 88)] options:5];
    [v6 addFieldForKey:kWAMessageKeyNanPhNanSessionStartTime value:[NSNumber numberWithDouble:a1[12]] options:5];
    [v6 addFieldForKey:kWAMessageKeyNanPhNanSessionEndTime value:[NSNumber numberWithDouble:a1[13]] options:5];
    double v7 = (a1[13] - a1[12]) / 1000000.0;
    double v8 = a1[4] - a1[2];
    double v9 = v8 / 1000000.0;
    if (v8 / 1000000.0 == 0.0)
    {
      double v12 = 0.0;
    }
    else
    {
      *(float *)&double v8 = v7;
      float v10 = v9;
      *(float *)&double v8 = *(float *)&v8 / v10;
      float v11 = *(float *)&v8;
      [v6 addFieldForKey:kWAMessageKeyNanPhNanSessionOverSoftApSessionTime value:[NSNumber numberWithFloat:v8] options:5];
      double v12 = v11;
    }
    [v6 addFieldForKey:kWAMessageKeyNanPhNanSessionTime value:[NSNumber numberWithDouble:v7] options:5];
    [v6 addFieldForKey:kWAMessageKeyNanPhPublisherTeardownReason value:[NSNumber numberWithUnsignedInt:*((unsigned int *)a1 + 28)] options:5];
    [v6 addFieldForKey:kWAMessageKeyNANPhPublisherAwdlStartedWhileInSession value:[NSNumber numberWithBool:*((unsigned char *)a1 + 160) != 0] options:5];
    [v6 addFieldForKey:kWAMessageKeyNanPhPublisherTerminateP2pReasonCode value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)a1 + 128)] options:5];
    [v6 addFieldForKey:kWAMessageKeyNanPhPublisherDataSessionTerminateP2pReasonCode value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)a1 + 144)] options:5];
    if (*((void *)a1 + 19))
    {
      [v6 addFieldForKey:kWAMessageKeyNanPhPublisherDataSessionTerminateP2pReasonCodeString value:[NSString stringWithString:@"stringWithString:"] options:5];
      CFNumberRef v13 = (const void *)*((void *)a1 + 19);
      if (v13)
      {
        CFRelease(v13);
        a1[19] = 0.0;
      }
    }
    else
    {
      [v6 addFieldForKey:kWAMessageKeyNanPhPublisherDataSessionTerminateP2pReasonCodeString value:@"N/A" options:5];
    }
    if (*((void *)a1 + 17))
    {
      [v6 addFieldForKey:kWAMessageKeyNanPhPublisherTerminateP2pReasonCodeString value:[NSString stringWithString:@"stringWithString:"] options:5];
      CFNumberRef v14 = (const void *)*((void *)a1 + 17);
      if (v14)
      {
        CFRelease(v14);
        a1[17] = 0.0;
      }
    }
    else
    {
      [v6 addFieldForKey:kWAMessageKeyNanPhPublisherTerminateP2pReasonCodeString value:@"N/A" options:5];
    }
    if (*((void *)a1 + 15))
    {
      [v6 addFieldForKey:kWAMessageKeyNanPhPublisherTeardownReasonString value:[NSString stringWithString:@"stringWithString:"] options:5];
      id v15 = (const void *)*((void *)a1 + 15);
      if (v15)
      {
        CFRelease(v15);
        a1[15] = 0.0;
      }
    }
    else
    {
      [v6 addFieldForKey:kWAMessageKeyNanPhPublisherTeardownReasonString value:@"N/A" options:5];
    }
    if (*((void *)a1 + 10))
    {
      [v6 addFieldForKey:kWAMessageKeyNanPhPublisherFailureString value:[NSString stringWithString:@"stringWithString:"] options:5];
      CFNumberRef v16 = (const void *)*((void *)a1 + 10);
      if (v16)
      {
        CFRelease(v16);
        a1[10] = 0.0;
      }
    }
    else
    {
      [v6 addFieldForKey:kWAMessageKeyNanPhPublisherFailureString value:@"N/A" options:5];
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s nanPhPublisherFailureReason=%d nanPhNanStationCount=%d nanPhNanSessionStartTime=%f nanPhNanSessionEndTime=%f nanSessionTime=%f softapSessionTime=%f kWAMessageKeyNanPhNanSessionOverSoftApSessionTime=%f nanPhPublisherTeardownReason=%d awdlStartedWhileInSession=%d nanPhPublisherTerminateP2pReasonCode=%d nanPhPublisherDataSessionTerminateP2pReasonCode=%d", "__WiFiMetricsManagerWAMessageSubmitPHSessionMetric", *((unsigned __int8 *)a1 + 72), *((unsigned __int8 *)a1 + 88), *((void *)a1 + 12), *((void *)a1 + 13), *(void *)&v7, *(void *)&v9, *(void *)&v12, *((unsigned int *)a1 + 28), *((unsigned __int8 *)a1 + 160), *((unsigned __int8 *)a1 + 128), *((unsigned __int8 *)a1 + 144)];
    }
    if (*((_DWORD *)a1 + 14)) {
      [v6 addFieldForKey:kWAMessageKeyChannel value:[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:") options:5];
    }
    [v6 addFieldForKey:kWAMessageKeySSIDChanged value:[NSNumber numberWithUnsignedLong:*((unsigned int *)a1 + 15)] options:5];
    [v6 addFieldForKey:kWAMessageKeyIsPendingSubmission value:[NSNumber numberWithBool:*((unsigned char *)a1 + 64) != 0] options:5];
    [v6 addFieldForKey:kWAMessageKeySecurityTypes value:[NSNumber numberWithUnsignedLong:*((unsigned int *)a1 + 17)] options:5];
    sub_1000476E8(v6);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Failed to alloc WAMessage for SoftAPEvent", @"__WiFiMetricsManagerWAMessageSubmitPHSessionMetric"];
    }
  }
  a1[20] = 0.0;
  double result = 0.0;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  return result;
}

double sub_1000519A4(unsigned int *a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: PHClientMetric: failureReason=%d rssi=%d isFamily=%d isAutoJoin=%d switchedToAnotherNetwork=%d enhancedSecurityType 0x%X nanPhClientSessionTime=%f nanPhSubscriberEndState=%d nanPhSubscriberDatapathEndState=%d  wifip2pdCrashWhileInNanPhSession=%d", "WiFiMetricsManagerSubmitPHClientMetric", *a1, a1[1], *((unsigned __int8 *)a1 + 8), *((unsigned __int8 *)a1 + 9), *((unsigned __int8 *)a1 + 10), a1[3], *((void *)a1 + 3), a1[18], a1[10], *((unsigned __int8 *)a1 + 16)];
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: pHClientMetric null" args:("__WiFiMetricsManagerWAMessageSubmitPHClientMetric")];
    }
    goto LABEL_29;
  }
  id v5 = objc_alloc((Class)WAMessage);
  id v6 = [v5 initWithMetricName:kWAMessageMetricNameSoftAPClient options:5];
  if (!v6)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Failed to alloc WAMessage for SoftAPClient", "__WiFiMetricsManagerWAMessageSubmitPHClientMetric")];
    }
LABEL_29:
    goto LABEL_24;
  }
  double v7 = v6;
  [v6 addFieldForKey:kWAMessageKeyFailureReason value:[NSNumber numberWithUnsignedInt:*a1] options:5];
  [v7 addFieldForKey:kWAMessageKeyRSSI value:[NSNumber numberWithUnsignedInt:a1[1]] options:5];
  [v7 addFieldForKey:kWAMessageKeyIsFamilyHotspot value:[NSNumber numberWithBool:*((unsigned char *)a1 + 8) != 0] options:5];
  [v7 addFieldForKey:kWAMessageKeyIsAutoJoined value:[NSNumber numberWithBool:*((unsigned char *)a1 + 9) != 0] options:5];
  [v7 addFieldForKey:kWAMessageKeySwitchedtoAnotherNetwork value:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned char *)a1 + 10) != 0) options:5];
  [v7 addFieldForKey:kWAMessageKeyEnhancedSecurityType value:[NSNumber numberWithUnsignedInt:a1[3]] options:5];
  [v7 addFieldForKey:kWAMessageKeyNanPhClientSessionStartTime value:[NSNumber numberWithDouble:*((double *)a1 + 3)] options:5];
  [v7 addFieldForKey:kWAMessageKeyNanPhClientSessionEndTime value:[NSNumber numberWithDouble:*((double *)a1 + 4)] options:5];
  double v8 = (*((double *)a1 + 4) - *((double *)a1 + 3)) / 1000000.0;
  [v7 addFieldForKey:kWAMessageKeyNanPhClientSessionTime value:[NSNumber numberWithDouble:v8] options:5];
  [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberEndState value:[NSNumber numberWithUnsignedInt:a1[18]] options:5];
  [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberDatapathEndState value:[NSNumber numberWithUnsignedInt:a1[10]] options:5];
  [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberWifip2pdCrashWhileInSession value:[NSNumber numberWithBool:*((unsigned char *)a1 + 16) != 0] options:5];
  [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberCopresenceStartedDuringSession value:[NSNumber numberWithBool:*((unsigned char *)a1 + 104) != 0] options:5];
  [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberTeardownReason value:[NSNumber numberWithUnsignedInt:a1[22]] options:5];
  [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberStartError value:[NSNumber numberWithUnsignedInt:a1[14]] options:5];
  [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberAwdlStartedDuringSession value:[NSNumber numberWithBool:*((unsigned char *)a1 + 105) != 0] options:5];
  if (*((void *)a1 + 12))
  {
    [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberTeardownReasonString value:[NSString stringWithString:@"stringWithString:"] options:5];
    double v9 = (const void *)*((void *)a1 + 12);
    if (v9)
    {
      CFRelease(v9);
      *((void *)a1 + 12) = 0;
    }
  }
  else
  {
    [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberTeardownReasonString value:@"N/A" options:5];
  }
  if (*((void *)a1 + 10))
  {
    [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberEndStateString value:[NSString stringWithString:@"stringWithString:"] options:5];
    float v10 = (const void *)*((void *)a1 + 10);
    if (v10)
    {
      CFRelease(v10);
      *((void *)a1 + 10) = 0;
    }
  }
  else
  {
    [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberEndStateString value:@"N/A" options:5];
  }
  if (*((void *)a1 + 8))
  {
    [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberStartErrorString value:[NSString stringWithString:@"stringWithString:"] options:5];
    float v11 = (const void *)*((void *)a1 + 8);
    if (v11)
    {
      CFRelease(v11);
      *((void *)a1 + 8) = 0;
    }
  }
  else
  {
    [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberStartErrorString value:@"SUCCESS" options:5];
  }
  if (*((void *)a1 + 6))
  {
    [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberDatapathEndStateString value:[NSString stringWithString:@"stringWithString:"] options:5];
    double v12 = (const void *)*((void *)a1 + 6);
    if (v12)
    {
      CFRelease(v12);
      *((void *)a1 + 6) = 0;
    }
  }
  else
  {
    [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberDatapathEndStateString value:@"N/A" options:5];
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s kWAMessageKeyNanPhClientSessionStartTime=%f kWAMessageKeyNanPhClientSessionEndTime=%f kWAMessageKeyNanPhClientSessionTime=%f kWAMessageKeyNanPhSubscriberEndState=%d nanPhSubscriberDatapathEndState=%d wifip2pdCrashWhileInNanPhSession=%d copresenceStartedDuringSession=%d nanPhClientTeardownReason=%d nanPhSubscriberStartError=%d awdlStartedDuringSession=%d", "__WiFiMetricsManagerWAMessageSubmitPHClientMetric", *((void *)a1 + 3), *((void *)a1 + 4), *(void *)&v8, a1[18], a1[10], *((unsigned __int8 *)a1 + 16), *((unsigned __int8 *)a1 + 104), a1[22], a1[14], *((unsigned __int8 *)a1 + 105));
  }
  sub_1000476E8(v7);

LABEL_24:
  double result = 0.0;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void sub_100052018(void *a1)
{
  if (!qword_10027D620) {
    return;
  }
  int v2 = sub_1000931BC(*(void *)(qword_10027D620 + 16));
  if (!v2)
  {
    uint64_t v29 = 0;
    uint64_t v30 = &v29;
    uint64_t v31 = 0x3052000000;
    unsigned int v32 = sub_100022CB8;
    unsigned int v33 = sub_100022BD4;
    id v34 = (id)0xAAAAAAAAAAAAAAAALL;
    id v34 = [a1 copy];
    uint64_t v23 = 0;
    BOOL v24 = &v23;
    uint64_t v25 = 0x3052000000;
    id v26 = sub_100022CB8;
    id v27 = sub_100022BD4;
    uint64_t v28 = 0;
    v22[0] = 0;
    v22[1] = v22;
    v22[2] = 0x2020000000;
    v22[3] = 0;
    int v4 = sub_1000A6454(*(void *)(qword_10027D620 + 16));
    int v5 = sub_1000A6D60(*(void *)(qword_10027D620 + 16));
    if (+[WiFiPerfPerAssoc sharedInstance])
    {
      id v7 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v8 = *(void *)(qword_10027D620 + 16);
      if (v8)
      {
        double v9 = (void *)sub_1000830B8(v8);
        if (v9)
        {
          float v10 = +[NSMutableArray arrayWithArray:v9];
          float v11 = (__CFArray *)v10;
          if (v10)
          {
            if ([(NSMutableArray *)v10 count])
            {
              v36.CFIndex length = (CFIndex)[v9 count];
              v36.id location = 0;
              CFArraySortValues(v11, v36, (CFComparatorFunction)sub_1000CB914, 0);
              for (unint64_t i = 0; ; ++i)
              {
                if ((unint64_t)[(__CFArray *)v11 count] > 1) {
                  unint64_t v13 = 2;
                }
                else {
                  unint64_t v13 = (unint64_t)[(__CFArray *)v11 count];
                }
                if (i >= v13) {
                  goto LABEL_28;
                }
                id v14 = [(__CFArray *)v11 objectAtIndexedSubscript:i];
                if (v14)
                {
                  id v15 = sub_10001E404((uint64_t)v14, @"BSSID");
                  if (v15)
                  {
                    [v7 addObject:v15];
                    continue;
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:3 message:@"%s failed to get BSSID of network from sorted list" args:context, @"__WiFiMetricsManagerCopyBSSIDsOfTwoMostUsedNetworks", context];
                  }
                }
                else
                {
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s failed to get WiFiNetworkRef from sorted list", "__WiFiMetricsManagerCopyBSSIDsOfTwoMostUsedNetworks", context);
                  }
                }
              }
            }
          }
        }
      }

      id v7 = 0;
LABEL_28:
      v24[5] = (uint64_t)v7;
      CFNumberRef v16 = *(NSObject **)(qword_10027D620 + 72);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10005245C;
      block[3] = &unk_10023F3F8;
      BOOL v20 = v5 != 0;
      void block[6] = v22;
      void block[7] = &v23;
      void block[4] = a1;
      void block[5] = &v29;
      BOOL v21 = v4 != 0;
      dispatch_async(v16, block);
    }
    else
    {

      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s WiFiConnectionQuality doesn't seem to be tasked", "WiFiMetricsManagerSubmitConnectionQualityForAssociation")];
      }
    }
    _Block_object_dispose(v22, 8);
    _Block_object_dispose(&v23, 8);
    _Block_object_dispose(&v29, 8);
    return;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Camera is in Foreground", "WiFiMetricsManagerSubmitConnectionQualityForAssociation")];
  }
}

void sub_100052424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v12 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_10005245C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:@"ppaBSSIDConnected"];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [+[WiFiLOIManager sharedWiFiLOIManager](WiFiLOIManager, "sharedWiFiLOIManager") queryLOITypeAtLastLocation];
  if (*(unsigned char *)(a1 + 64)) {
    goto LABEL_18;
  }
  if (objc_msgSend(objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "objectForKeyedSubscript:", @"ppaIsNoMap"), "BOOLValue"))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s not submitting GEOWiFiConnectionQuality as current SSID has the _nomap suffix", "WiFiMetricsManagerSubmitConnectionQualityForAssociation_block_invoke", v21, v22);
    }
    goto LABEL_27;
  }
  if (objc_msgSend(objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "objectForKeyedSubscript:", @"ppaIsApplePH"), "BOOLValue"))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s not submitting GEOWiFiConnectionQuality as this association was to an Apple device (IE check)", "WiFiMetricsManagerSubmitConnectionQualityForAssociation_block_invoke", v21, v22);
    }
    goto LABEL_27;
  }
  if ((unint64_t)(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) - 4) >= 0xFFFFFFFFFFFFFFFELL)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s not submitting GEOWiFiConnectionQuality as CoreRoutine feels this device is likely at home or work", "WiFiMetricsManagerSubmitConnectionQualityForAssociation_block_invoke", v21, v22)];
    }
    goto LABEL_27;
  }
  if (!v2
    || !*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)
    || [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) containsObject:v2])
  {
    if (qword_10027DD68)
    {
      CFStringRef v19 = *(const __CFString **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      if (!v19) {
        CFStringRef v19 = @"NULL";
      }
      [(id)qword_10027DD68 WFLog:3, "%s not submitting GEOWiFiConnectionQuality as BSSID for network described (%@) in scorecard matches a BSSID of the top two most used networks (%@)", "WiFiMetricsManagerSubmitConnectionQualityForAssociation_block_invoke", v2, v19 message];
    }
    goto LABEL_27;
  }
  BOOL v3 = (unint64_t)[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:@"bytesIn"] > 5|| (unint64_t)[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:@"packetsIn"] > 0xD05;
  if ((unint64_t)objc_msgSend(objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "objectForKeyedSubscript:", @"ppaAssociatedTime"), "unsignedIntegerValue") > 1|| v3)
  {
    uint64_t v10 = arc4random_uniform(0x63u);
    if (v10 >= 0x32)
    {
      uint64_t v20 = v10;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s not submitting GEOWiFiConnectionQuality as this sample didn't win the coin toss (%u > %d)", "WiFiMetricsManagerSubmitConnectionQualityForAssociation_block_invoke", v20, 49)];
      }
      goto LABEL_27;
    }
LABEL_18:

    float v11 = +[WiFiManagerAnalytics sharedInstance];
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_1000528B8;
    v23[3] = &unk_10023F3D0;
    char v24 = *(unsigned char *)(a1 + 65);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    v23[4] = v2;
    void v23[5] = v13;
    [(WiFiManagerAnalytics *)v11 prepareMessageForSubmission:10027009 withData:v12 andReply:v23];
    return;
  }
  int v5 = (void *)qword_10027DD68;
  if (!qword_10027DD68) {
    goto LABEL_22;
  }
  id v6 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (!v6)
  {
    uint64_t v7 = 99;
    goto LABEL_20;
  }
  uint64_t v7 = [(uint64_t)[v6 objectForKeyedSubscript:@"bytesIn"] unsignedIntegerValue];
  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (!v8)
  {
LABEL_20:
    uint64_t v9 = 99;
    goto LABEL_21;
  }
  uint64_t v9 = [(uint64_t)[v8 objectForKeyedSubscript:@"packetsIn"] unsignedIntegerValue];
LABEL_21:
  [v5 WFLog:3 message:@"%s not submitting GEOWiFiConnectionQuality as scorecard lacks Rx value (scorecard bytesIn value: %lu packetsIn value %lu)", "WiFiMetricsManagerSubmitConnectionQualityForAssociation_block_invoke", v7, v9];
LABEL_22:
  id v15 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    uint64_t v16 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (v16) {
      uint64_t v17 = [(uint64_t)[v16 objectForKeyedSubscript:@"ppaAssociatedTime"] unsignedIntegerValue];
    }
    else {
      uint64_t v17 = 99;
    }
    [v15 WFLog:3 message:@"%s not submitting GEOWiFiConnectionQuality as scorecard lacks associated time value, or (likely) we weren't associated long enough (scorecard assoc time value: %lu)", "WiFiMetricsManagerSubmitConnectionQualityForAssociation_block_invoke", v17, v22];
  }
LABEL_27:

  uint64_t v18 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
}

void sub_1000528B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Error back preparing WiFiConnectionQuality for submission: %@, or null WAMessageAWD", "WiFiMetricsManagerSubmitConnectionQualityForAssociation_block_invoke_2", a3 message];
    }
  }
  else
  {
    [+[WiFiManagerAnalytics sharedInstance] submitGeoServicesMessage:a2];
    if (*(unsigned char *)(a1 + 48))
    {
      id v6 = *(NSObject **)(qword_10027D620 + 72);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000529C8;
      block[3] = &unk_10023F3A8;
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      void block[5] = a2;
      void block[6] = v7;
      void block[4] = v8;
      dispatch_async(v6, block);
    }
  }
}

void sub_1000529C8(void *a1)
{
  id v2 = [*(id *)(*(void *)(a1[6] + 8) + 40) objectForKey:@"identifier"];
  if (!v2) {
    id v2 = (id)a1[4];
  }
  id v3 = [v2 stringByReplacingOccurrencesOfString:@":" withString:&stru_100248240];
  int v4 = (void *)a1[5];

  sub_100052A34(v4, (uint64_t)v3);
}

void sub_100052A34(void *a1, uint64_t a2)
{
  if (!a1)
  {
    uint64_t v17 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_25;
    }
    uint64_t v18 = "%s: nil message";
    goto LABEL_23;
  }
  uint64_t v36 = 0;
  int v5 = [+[NSFileManager defaultManager] URLForDirectory:14 inDomain:1 appropriateForURL:0 create:1 error:&v36];
  if (v36)
  {
    uint64_t v17 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_25;
    }
    uint64_t v28 = v36;
    uint64_t v18 = "%s: failed to create application support directory with error %@";
    goto LABEL_20;
  }
  id v6 = [(NSURL *)v5 URLByAppendingPathComponent:@"com.apple.wifid"];
  if (![+[NSFileManager defaultManager](NSFileManager, "defaultManager") fileExistsAtPath:[(NSURL *)v6 path] isDirectory:0])[+[NSFileManager defaultManager] createDirectoryAtURL:v6 withIntermediateDirectories:1 attributes:0 error:&v36]; {
  if (v36)
  }
  {
    uint64_t v17 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_25;
    }
    uint64_t v28 = v36;
    uint64_t v18 = "%s: failed to create wifid support directory with error %@";
    goto LABEL_20;
  }
  if (!v6)
  {
    uint64_t v17 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_25;
    }
    uint64_t v28 = 0;
    uint64_t v18 = "%s: failed to create wifid support directory (path %@)";
LABEL_20:
    uint64_t v19 = 4;
LABEL_24:
    [v17 WFLog:v19 message:v18 __WiFiMetircsManagerWriteConnectionQualityMessageToFile:v28];
    goto LABEL_25;
  }
  id v7 = objc_alloc_init((Class)NSDateFormatter);
  [v7 setDateFormat:@"yyyy'-'MM'-'dd-HHmmss"];
  id v8 = [v7 stringFromDate:[NSDate date]];

  uint64_t v9 = [(NSURL *)v6 URLByAppendingPathComponent:+[NSString stringWithFormat:@"%@_%@.json", a2, v8] isDirectory:0];
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: path %@", "__WiFiMetircsManagerWriteConnectionQualityMessageToFile", v9 message];
  }
  id v11 = [a1 dictionaryRepresentation];
  if (!v11)
  {
    uint64_t v17 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v18 = "%s: missing instant scorecard";
LABEL_23:
      uint64_t v19 = 3;
      goto LABEL_24;
    }
LABEL_25:
    goto LABEL_38;
  }
  uint64_t v12 = v11;
  uint64_t v35 = 0;
  uint64_t v30 = v4;
  if (+[NSJSONSerialization isValidJSONObject:v11])
  {
    uint64_t v13 = +[NSJSONSerialization dataWithJSONObject:v12 options:3 error:&v35];
    if (v35) {
      goto LABEL_15;
    }
    id v14 = [objc_alloc((Class)NSString) initWithData:v13 encoding:4];
    [v14 writeToURL:v9 atomically:1 encoding:4 error:&v35];
    if (v14) {
      CFRelease(v14);
    }
    if (v35)
    {
LABEL_15:
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: failed to write to path %@ error %@", "__WiFiMetircsManagerWriteConnectionQualityMessageToFile", v9, v35 message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: local collection is enabled, writing to filesystem path %@", "__WiFiMetircsManagerWriteConnectionQualityMessageToFile", v9, v29 message];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Invalid data passed to JSON serialization. Dumping data...", "__WiFiMetircsManagerWriteConnectionQualityMessageToFile"];
    }
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v21 = [v12 allKeys];
    id v22 = [v21 countByEnumeratingWithState:&v31 objects:v37 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v32;
      do
      {
        for (unint64_t i = 0; i != v23; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v32 != v24) {
            objc_enumerationMutation(v21);
          }
          uint64_t v26 = *(void *)(*((void *)&v31 + 1) + 8 * i);
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%@ Key: %@ Value: ", v26, [v12 objectForKey:v26] message];
          }
        }
        id v23 = [v21 countByEnumeratingWithState:&v31 objects:v37 count:16];
      }
      while (v23);
    }
  }
  int v4 = v30;
LABEL_38:
}

void sub_100052EE8(uint64_t a1, const __CFDictionary *a2, unsigned int a3, int a4)
{
  unsigned int valuePtr = a3;
  if (!a1)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: null device", "WiFiMetricsManagerTriggerDPSNotification"];
    }
    goto LABEL_35;
  }
  if (!qword_10027D620)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null metrics", "WiFiMetricsManagerTriggerDPSNotification"];
    }
    goto LABEL_35;
  }
  if (sub_1000931BC(*(void *)(qword_10027D620 + 16)) == 1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"%s: Camera is in Foreground", @"WiFiMetricsManagerTriggerDPSNotification"];
    }
    goto LABEL_35;
  }
  if (!*(void *)(qword_10027D620 + 32))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null deviceMetricsArray !!", "WiFiMetricsManagerTriggerDPSNotification"];
    }
    goto LABEL_35;
  }
  if (a2) {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, a2);
  }
  else {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  id v7 = MutableCopy;
  if (!MutableCopy)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null symptomDict", "WiFiMetricsManagerTriggerDPSNotification"];
    }
LABEL_35:
    return;
  }
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (!v8)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null symptomRef", "WiFiMetricsManagerTriggerDPSNotification")];
    }
    uint64_t v18 = v7;
    goto LABEL_23;
  }
  CFNumberRef v9 = v8;
  CFDictionaryAddValue(v7, @"symptom", v8);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Sending DPSNotification with symptom=%d!!", "WiFiMetricsManagerTriggerDPSNotification", valuePtr)];
  }
  if (a4) {
    CFBooleanRef v11 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v11 = kCFBooleanFalse;
  }
  CFDictionaryAddValue(v7, @"facetimeCallInProgress", v11);
  if (qword_10027DD68)
  {
    uint64_t v13 = "false";
    if (v11 == kCFBooleanTrue) {
      uint64_t v13 = "true";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Sending DPSNotification with facetimeStatus: %s!!", "WiFiMetricsManagerTriggerDPSNotification", v13);
  }
  uint64_t v22 = 0;
  id v23 = &v22;
  uint64_t v24 = 0x2020000000;
  CFTypeRef v25 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v25 = CFRetain(v7);
  id v15 = +[WiFiManagerAnalytics sharedInstance];
  uint64_t v16 = v23[3];
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1000532FC;
  _OWORD v21[3] = &unk_10023F420;
  v21[4] = &v22;
  [(WiFiManagerAnalytics *)v15 prepareMessageForSubmission:11075584 withData:v16 andReply:v21];
  _Block_object_dispose(&v22, 8);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Done DPSNotification !!", "WiFiMetricsManagerTriggerDPSNotification");
  }
  CFRelease(v7);
  CFRelease(v9);
  if (v11)
  {
    uint64_t v18 = v11;
LABEL_23:
    CFRelease(v18);
  }
}

void sub_1000532E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000532FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:@"%s:  DPSNotification !!", @"WiFiMetricsManagerTriggerDPSNotification_block_invoke"];
  }
  if (!a2 || a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Error back preparing DPSNotification for submission: %@, or null WAMessageAWD", "WiFiMetricsManagerTriggerDPSNotification_block_invoke", a3 message];
    }
  }
  else
  {
    [+[WiFiManagerAnalytics sharedInstance] triggerDatapathDiagnosticsNoReply:a2];
  }
  CFNumberRef v8 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_1000533EC(uint64_t a1, const __CFDictionary *a2)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Sending SlowWiFi Notification !!", "WiFiMetricsManagerTriggerSlowWiFiNotification");
  }
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null device", "WiFiMetricsManagerTriggerSlowWiFiNotification"];
    }
    goto LABEL_33;
  }
  if (!qword_10027D620)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null metrics", "WiFiMetricsManagerTriggerSlowWiFiNotification"];
    }
    goto LABEL_33;
  }
  if (sub_1000931BC(*(void *)(qword_10027D620 + 16)) == 1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Camera is in Foreground", "WiFiMetricsManagerTriggerSlowWiFiNotification");
    }
    goto LABEL_33;
  }
  if (!*(void *)(qword_10027D620 + 32))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null deviceMetricsArray !!", @"WiFiMetricsManagerTriggerSlowWiFiNotification"];
    }
    goto LABEL_33;
  }
  if ((+[WiFiUsagePrivacyFilter canPerformActionWithSampleRate:3] & 1) == 0)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: skipping this metric submission", @"WiFiMetricsManagerTriggerSlowWiFiNotification"];
    }
    goto LABEL_33;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: no dict", @"WiFiMetricsManagerTriggerSlowWiFiNotification"];
    }
LABEL_33:
    goto LABEL_20;
  }
  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, a2);
  v16[3] = (uint64_t)MutableCopy;
  if (sub_100073E24(a1)) {
    CFBooleanRef v6 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v6 = kCFBooleanFalse;
  }
  CFDictionaryAddValue((CFMutableDictionaryRef)v16[3], @"facetimeCallInProgress", v6);
  if (qword_10027DD68)
  {
    CFNumberRef v8 = "false";
    if (v6 == kCFBooleanTrue) {
      CFNumberRef v8 = "true";
    }
    [((id)qword_10027DD68) WFLog:message:3, "%s: Sending SlowWiFiNotification with facetimeStatus: %s!!", "WiFiMetricsManagerTriggerSlowWiFiNotification", v8];
  }
  uint64_t v10 = +[WiFiManagerAnalytics sharedInstance];
  uint64_t v11 = v16[3];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100053738;
  v14[3] = &unk_10023F420;
  v14[4] = &v15;
  [(WiFiManagerAnalytics *)v10 prepareMessageForSubmission:11075588 withData:v11 andReply:v14];
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s: Done SlowWiFi Notification !!", "WiFiMetricsManagerTriggerSlowWiFiNotification"];
  }
  if (v6) {
    CFRelease(v6);
  }
LABEL_20:
  _Block_object_dispose(&v15, 8);
}

void sub_100053720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100053738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s:  SlowWiFi Notification !!", "WiFiMetricsManagerTriggerSlowWiFiNotification_block_invoke"];
  }
  if (!a2 || a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Error back preparing SlowWiFi Notification for submission: %@, or null WAMessageAWD", "WiFiMetricsManagerTriggerSlowWiFiNotification_block_invoke", a3 message];
    }
  }
  else
  {
    [+[WiFiManagerAnalytics sharedInstance] triggerDatapathDiagnosticsNoReply:a2];
  }
  CFNumberRef v8 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_100053828(uint64_t a1, const void *a2, const void *a3)
{
  if (!a1)
  {
    id v7 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_12;
    }
    CFNumberRef v8 = "%s: deviceManager null ";
    goto LABEL_19;
  }
  if (!a2)
  {
    id v7 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_12;
    }
    CFNumberRef v8 = "%s: network null ";
LABEL_19:
    uint64_t v9 = 4;
    goto LABEL_7;
  }
  if (!qword_10027D620) {
    return;
  }
  int v5 = sub_1000931BC(*(void *)(qword_10027D620 + 16));
  if (!v5)
  {
    id v10 = objc_alloc((Class)WAMessage);
    id v11 = [v10 initWithMetricName:kWAMessageMetricNameClientAssociation options:6];
    if (v11)
    {
      uint64_t v12 = v11;
      [v11 addFieldForKey:kWAMessageKeySSID value:[NSString stringWithString:sub_10001A43C(a2)] options:6];
      [v12 addFieldForKey:kWAMessageKeyNetworkAuthFlags value:[NSNumber numberWithUnsignedInt:sub_1000C8A5C((uint64_t)a2)] options:6];
      if (a3)
      {
        [v12 addFieldForKey:kWAMessageKeyMetricProcessImmediately value:[NSNumber numberWithBool:1] options:6];
        [v12 addFieldForKey:kWAMessageKeySwitchedFromNetworkSSID value:[NSString stringWithString:sub_10001A43C(a3)] options:6];
        [v12 addFieldForKey:kWAMessageKeySwitchedFromNetworkAuthFlags value:[NSNumber numberWithUnsignedInt:sub_1000C8A5C((uint64_t)a3)] options:6];
      }
      sub_1000476E8(v12);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: Failed to alloc WAMessage for RoamStatus", @"__WiFiMetricsManagerWAMessageUpdateClientAssociationData"];
      }
    }
    goto LABEL_12;
  }
  id v7 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    CFNumberRef v8 = "%s: Camera is in Foreground";
    uint64_t v9 = 3;
LABEL_7:
    [v7 WFLog:v9 message:v8 __WiFiMetricsManagerWAMessageUpdateClientAssociationData];
  }
LABEL_12:
}

void sub_100053AE8(const void *a1, void *a2)
{
  if (!+[WiFiLocationManager isLocationValid:a2 uptoSeconds:1 isHighAccuracy:60.0])return; {
  if (!a2)
  }
  {
    CFBooleanRef v6 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_16;
    }
    id v7 = "%s: location null ";
    goto LABEL_23;
  }
  if (!a1)
  {
    CFBooleanRef v6 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_16;
    }
    id v7 = "%s: network null ";
LABEL_23:
    uint64_t v8 = 4;
    goto LABEL_8;
  }
  if (!qword_10027D620) {
    return;
  }
  int v4 = sub_1000931BC(*(void *)(qword_10027D620 + 16));
  if (!v4)
  {
    id v9 = objc_alloc((Class)WAMessage);
    id v10 = [v9 initWithMetricName:kWAMessageMetricNameNetworkGeotag options:6];
    if (v10)
    {
      id v11 = v10;
      if (!sub_10005655C(v10, a1, 6))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Failed to append SSID/BSSID to WAMessage"];
        }
      }
      [v11 addFieldForKey:kWAMessageKeyNetworkAuthFlags value:[NSNumber numberWithUnsignedInt:sub_1000C8A5C((uint64_t)a1)] options:6];
      uint64_t v13 = kWAMessageKeyLatitude;
      [a2 coordinate];
      [v11 addFieldForKey:v13 value:[NSNumber numberWithDouble:6]];
      uint64_t v14 = kWAMessageKeyLongitude;
      [a2 coordinate];
      [v11 addFieldForKey:v14 value:[NSNumber numberWithDouble:v15] options:6];
      id v16 = [a2 timestamp];
      uint64_t v17 = kWAMessageKeyMetricDate;
      [v16 timeIntervalSinceReferenceDate];
      [v11 addFieldForKey:v17 value:[NSNumber numberWithDouble:6]];
      sub_1000476E8(v11);
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Failed to alloc WAMessage for RoamStatus", "__WiFiMetricsManagerWAMessageUpdateNetworkGeoTag")];
      }
    }
    goto LABEL_16;
  }
  CFBooleanRef v6 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    id v7 = "%s: Camera is in Foreground";
    uint64_t v8 = 3;
LABEL_8:
    [v6 WFLog:v8 message:v7 __WiFiMetricsManagerWAMessageUpdateNetworkGeoTag];
  }
LABEL_16:
}

void sub_100053DDC(uint64_t a1, const void *a2, int a3)
{
  CFTypeID v90 = 0;
  CFBooleanRef value = 0;
  CFNumberRef v89 = 0;
  if (a3) {
    uint64_t v7 = 7;
  }
  else {
    uint64_t v7 = 6;
  }
  if (!qword_10027D620)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null metrics" args:("WiFiMetricsManagerUpdateParsedBeaconInfo")];
    }
    goto LABEL_428;
  }
  uint64_t v8 = *(void *)(qword_10027D620 + 16);
  if (!v8)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null metrics manager" args:("WiFiMetricsManagerUpdateParsedBeaconInfo", 0)];
    }
    goto LABEL_428;
  }
  if (sub_1000931BC(v8) == 1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Camera is in Foreground", @"WiFiMetricsManagerUpdateParsedBeaconInfo"];
    }
    goto LABEL_428;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null WiFiManagerRef" args:("WiFiMetricsManagerUpdateParsedBeaconInfo")];
    }
    goto LABEL_428;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null WiFiNetworkRef" : @"WiFiMetricsManagerUpdateParsedBeaconInfo"];
    }
    goto LABEL_428;
  }
  id v9 = objc_alloc((Class)WAMessage);
  id v10 = [v9 initWithMetricName:kWAMessageMetricNameParsedBeaconInfo options:v7];
  if (!v10)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null waMsg" args:("WiFiMetricsManagerUpdateParsedBeaconInfo")];
    }
LABEL_428:
    goto LABEL_415;
  }
  id v11 = v10;
  if (MGGetBoolAnswer()) {
    uint64_t v12 = 7;
  }
  else {
    uint64_t v12 = 6;
  }
  if (!sub_10005655C(v11, a2, v12))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: Failed to append SSID/BSSID to WAMessage", @"WiFiMetricsManagerUpdateParsedBeaconInfo"];
    }
  }
  double v15 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    id v16 = sub_10001A43C(a2);
    uint64_t v17 = sub_10001E404((uint64_t)a2, @"BSSID");
    uint64_t v18 = "Remote";
    if (!a3) {
      uint64_t v18 = "Local";
    }
    [v15 WFLog:3, "%s: Submitting ParsedBeaconInfo waMsg for ssid:%@ bssid:%@ with %s opts.", "WiFiMetricsManagerUpdateParsedBeaconInfo", v16, v17, v18 message];
  }
  uint64_t v19 = sub_10001E404((uint64_t)a2, @"CHANNEL");
  if (v19) {
    [v11 addFieldForKey:@"channel" value:v19 options:v7];
  }
  uint64_t v20 = sub_10001E404((uint64_t)a2, @"CHANNEL_FLAGS");
  if (v20) {
    [v11 addFieldForKey:@"channelFlags" value:v20 options:v7];
  }
  id v21 = (void *)sub_10001E404((uint64_t)a2, @"NOISE");
  CFBooleanRef value = v21;
  if (v21) {
    [v11 addFieldForKey:@"noise" value:v21 options:v7];
  }
  uint64_t v22 = sub_10001E404((uint64_t)a2, @"SNR");
  if (v22) {
    [v11 addFieldForKey:@"snr" value:v22 options:v7];
  }
  id v23 = sub_10001E404((uint64_t)a2, @"RSSI");
  if (v23) {
    [v11 addFieldForKey:@"rssi" value:v23 options:v7];
  }
  uint64_t v24 = sub_10001E404((uint64_t)a2, @"BEACON_INT");
  if (v24) {
    [v11 addFieldForKey:@"beaconInt" value:v24 options:v7];
  }
  CFTypeRef v25 = (void *)sub_10001E404((uint64_t)a2, @"AP_MODE");
  CFBooleanRef value = v25;
  if (v25) {
    [v11 addFieldForKey:@"apMode" value:v25 options:v7];
  }
  uint64_t v26 = sub_10001E404((uint64_t)a2, @"PHY_MODE");
  if (v26) {
    [v11 addFieldForKey:@"phyMode" value:v26 options:v7];
  }
  id v27 = sub_10001E404((uint64_t)a2, @"CAPABILITIES");
  if (v27) {
    [v11 addFieldForKey:@"capabilities" value:v27 options:v7];
  }
  uint64_t v28 = (void *)sub_10001E404((uint64_t)a2, @"RATES");
  CFNumberRef v88 = v28;
  if (v28) {
    [v11 addFieldForKey:@"rates" value:[v28 componentsJoinedByString:@":"] options:v7];
  }
  uint64_t v29 = (void *)sub_10001E404((uint64_t)a2, @"AGE");
  CFBooleanRef value = v29;
  if (v29) {
    [v11 addFieldForKey:@"age" value:v29 options:v7];
  }
  CFDictionaryRef v30 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"WPA_IE");
  if (v30)
  {
    CFDictionaryRef v31 = v30;
    if (CFDictionaryGetValueIfPresent(v30, @"IE_KEY_WPA_VERSION", (const void **)&value)) {
      [v11 addFieldForKey:@"wpaIEVersion" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v31, @"IE_KEY_WPA_MCIPHER", (const void **)&value)) {
      [v11 addFieldForKey:@"wpaIEMCipher" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v31, @"IE_KEY_WPA_UCIPHERS", (const void **)&v88)) {
      [v11 addFieldForKey:@"wpaIEUCiphers" value:[v88 componentsJoinedByString:@":"] options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v31, @"IE_KEY_WPA_AUTHSELS", (const void **)&v88)) {
      [v11 addFieldForKey:@"wpaIEAuthSels" value:[v88 componentsJoinedByString:@":"] options:v7];
    }
  }
  CFDictionaryRef v32 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"RSN_IE");
  if (v32)
  {
    CFDictionaryRef v33 = v32;
    if (CFDictionaryGetValueIfPresent(v32, @"IE_KEY_RSN_VERSION", (const void **)&value)) {
      [v11 addFieldForKey:@"rsnIEVersion" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v33, @"IE_KEY_RSN_MCIPHER", (const void **)&value)) {
      [v11 addFieldForKey:@"rsnIEMCipher" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v33, @"IE_KEY_RSN_UCIPHERS", (const void **)&v88)) {
      [v11 addFieldForKey:@"rsnIEUCiphers" value:[v88 componentsJoinedByString:@":"] options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v33, @"IE_KEY_RSN_AUTHSELS", (const void **)&v88)) {
      [v11 addFieldForKey:@"rsnIEAuthSels" value:[v88 componentsJoinedByString:@":"] options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v33, @"IE_KEY_RSN_BCIPHER", (const void **)&value)) {
      [v11 addFieldForKey:@"rsnIEBCipher" value:value options:v7];
    }
    CFDictionaryRef v34 = (const __CFDictionary *)CFDictionaryGetValue(v33, @"IE_KEY_RSN_CAPS");
    if (v34)
    {
      CFDictionaryRef v35 = v34;
      if (CFDictionaryGetValueIfPresent(v34, @"PRE_AUTH", (const void **)&value)) {
        [v11 addFieldForKey:@"rsnIERSNCapsPreAuth" value:value options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v35, @"NO_PAIRWISE", (const void **)&value)) {
        [v11 addFieldForKey:@"rsnIERSNCapsNoPairwise" value:value options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v35, @"MFP_REQUIRED", (const void **)&value)) {
        [v11 addFieldForKey:@"rsnIERSNCapsMfpRequired" value:value options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v35, @"MFP_CAPABLE", (const void **)&value)) {
        [v11 addFieldForKey:@"rsnIERSNCapsMfpCapable" value:value options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v33, @"PTKSA_REPLAY_COUNTERS", (const void **)&value)) {
        [v11 addFieldForKey:@"rsnIERSNCapsPTKSAReplayCounters" value:value options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v33, @"GTKSA_REPLAY_COUNTERS", (const void **)&value)) {
        [v11 addFieldForKey:@"rsnIERSNCapsGTKSAReplayCounters" value:value options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v33, @"RSN_CAPABILITIES", (const void **)&value)) {
        [v11 addFieldForKey:@"rsnIERSNCapsCapabilities" value:value options:v7];
      }
    }
  }
  uint64_t v36 = (void *)sub_10001E404((uint64_t)a2, @"WAPI");
  CFBooleanRef value = v36;
  if (v36) {
    [v11 addFieldForKey:@"wapiPolicy" value:v36 options:v7];
  }
  uint64_t v37 = (void *)sub_10001E404((uint64_t)a2, @"WEP");
  CFBooleanRef value = v37;
  if (v37) {
    [v11 addFieldForKey:@"wep" value:v37 options:v7];
  }
  id v38 = (void *)sub_10001E404((uint64_t)a2, @"SCAN_RESULT_FROM_PROBE_RSP");
  CFBooleanRef value = v38;
  if (v38) {
    [v11 addFieldForKey:@"scanResultFromProbeRSP" value:v38 options:v7];
  }
  CFDictionaryRef v39 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"APPLE_IE");
  if (v39)
  {
    CFDictionaryRef v40 = v39;
    if (CFDictionaryGetValueIfPresent(v39, @"APPLE_IE_VERSION", (const void **)&value)) {
      [v11 addFieldForKey:@"appleIEVersion" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v40, @"APPLE_IE_PRODUCT_ID", (const void **)&value)) {
      [v11 addFieldForKey:@"appleIEProdId" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v40, @"APPLE_IE_INT_MIT", (const void **)&value)) {
      [v11 addFieldForKey:@"appleIEIntMit" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v40, @"APPLE_IE_UNCONFIGURED", (const void **)&value)) {
      [v11 addFieldForKey:@"appleIEUnConfigured" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v40, @"APPLE_IE_FOUND_PPPOE", (const void **)&value)) {
      [v11 addFieldForKey:@"appleIEFoundPPPOE" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v40, @"APPLE_IE_GUEST_NETWORK", (const void **)&value)) {
      [v11 addFieldForKey:@"appleIEGuestNetwork" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v40, @"APPLE_IE_LEGACY_WDS", (const void **)&value)) {
      [v11 addFieldForKey:@"appleIELegacyWDS" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v40, @"APPLE_IE_WSC_CAP", (const void **)&value)) {
      [v11 addFieldForKey:@"appleIEWSCCap" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v40, @"APPLE_IE_WSC_ACTIVE", (const void **)&value)) {
      [v11 addFieldForKey:@"appleIEWSCActive" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v40, @"APPLE_IE_WSC_SOLICITABLE", (const void **)&value)) {
      [v11 addFieldForKey:@"appleIEWSCSolicitable" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v40, @"APPLE_IE_WOW_SUPPORTED", (const void **)&value)) {
      [v11 addFieldForKey:@"appleIEWowSupported" value:value options:v7];
    }
  }
  CFDictionaryRef v41 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"IOS_IE");
  if (v41)
  {
    CFDictionaryRef v42 = v41;
    if (CFDictionaryGetValueIfPresent(v41, @"IOS_IE_FEATURE_VERSION", (const void **)&value)) {
      [v11 addFieldForKey:@"iosIEVersion" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v42, @"IOS_IE_FEATURES", (const void **)&v89)) {
      [v11 addFieldForKey:@"iosIEFeatures" value:v89 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v42, @"IOS_IE_FEATURE_WOW_DISALLOWED", (const void **)&value)) {
      [v11 addFieldForKey:@"iosIEWowDisabled" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v42, @"IOS_IE_BTMAC_VERSION", (const void **)&value)) {
      [v11 addFieldForKey:@"iosIEBtMacVersion" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v42, @"IOS_IE_BTMAC", (const void **)&v89)) {
      [v11 addFieldForKey:@"iosIEBtMac" value:v89 options:v7];
    }
  }
  CFDictionaryRef v43 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"APPLE_DEVICE_IE");
  if (v43)
  {
    CFDictionaryRef v44 = v43;
    if (CFDictionaryGetValueIfPresent(v43, @"APPLE_DEVICE_IE_FEATURE_FLAGS", (const void **)&v89)) {
      [v11 addFieldForKey:@"deviceIEFlags" value:v89 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_AIRPLAY", (const void **)&value)) {
      [v11 addFieldForKey:@"deviceIESupportsAirplay" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_UNCONFIGURED", (const void **)&value)) {
      [v11 addFieldForKey:@"deviceIEFeatureUnConfigured" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_MFI_CONFIG_V1", (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupportsMFIConfigV1" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_WOW", (const void **)&value)) {
      [v11 addFieldForKey:@"deviceIESupportsWow" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_INTERFERENCE_ROBUSTNESS", (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIEInterferenceRobustness" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_REMOTE_PPPOE_SERVER", (const void **)&value)) {
      [v11 addFieldForKey:@"deviceIERemotePPOEServer" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_WPS", (const void **)&value)) {
      [v11 addFieldForKey:@"deviceIESupportsWPS" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_WPS_ACTIVE", (const void **)&value)) {
      [v11 addFieldForKey:@"deviceIEWpsActive" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_AIRPRINT", (const void **)&value)) {
      [v11 addFieldForKey:@"deviceIESupportsAirPrint" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_IAP_OVER_WIFI", (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupportsIAPOverWiFi" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_CARPLAY", (const void **)&value)) {
      [v11 addFieldForKey:@"deviceIESupportsCarplay" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_PROVIDES_INTERNET_ACCESS", (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIEProvidesInternetAccess" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_ACP_CONFIG_V1", (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupportsACPConfigV1" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_RECENT_PHYSICAL_CONTACT", (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIERecentPhysicalContact" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_24GHZ_WIFI_NETWORKS", (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupports24GHzWiFi" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_5GHZ_WIFI_NETWORKS", (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupports5GHzWiFi" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_HOMEKIT", (const void **)&value)) {
      [v11 addFieldForKey:@"deviceIESupportsHomeKit" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_HOMEKIT_V2", (const void **)&value)) {
      [v11 addFieldForKey:@"deviceIESupportsHomeKitV2" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_BUFFERED_AIRPLAY", (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupportsBufferedAirPlay" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_SECURE_WAC", (const void **)&value)) {
      [v11 addFieldForKey:@"deviceIESupportsSecureWAC" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_MFI_HARDWARE_AUTH", (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupportsMFIHardwareAuth" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_SOFTWARE_TOKEN_AUTH", (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupportsSoftwareTokenAuth" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_SOFTWARE_CERT_AUTH", (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupportsCertAuth" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_FRIENDLY_NAME", (const void **)&v90)) {
      [v11 addFieldForKey:@"deviceIEFriendlyName" value:v90 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_MANUFACTURER_NAME", (const void **)&v90)) {
      [v11 addFieldForKey:@"deviceIEManufacturerName" value:v90 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_MODEL_NAME", (const void **)&v90)) {
      [v11 addFieldForKey:@"deviceIEModelName" value:v90 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_OUI", (const void **)&v89)) {
      [v11 addFieldForKey:@"deviceIEOUI" value:v89 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_DWDS_ROLE", (const void **)&value)) {
      [v11 addFieldForKey:@"deviceIEDWDSRole" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_DWDS_FLAGS", (const void **)&value)) {
      [v11 addFieldForKey:@"deviceIEDWDSFlags" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_BLUETOOTH_MAC", (const void **)&v89)) {
      [v11 addFieldForKey:@"deviceIEBtMac" value:v89 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v44, @"APPLE_DEVICE_IE_DEVICE_ID", (const void **)&v89)) {
      [v11 addFieldForKey:@"deviceIEDeviceID" value:v89 options:v7];
    }
  }
  CFDictionaryRef v45 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"APPLE_SWAP_IE");
  if (v45)
  {
    CFDictionaryRef v46 = v45;
    if (CFDictionaryGetValueIfPresent(v45, @"SWAP_IE_FEATURE_VERSION", (const void **)&value)) {
      [v11 addFieldForKey:@"swapIEVersion" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v46, @"SWAP_IE_FEATURES", (const void **)&v89)) {
      [v11 addFieldForKey:@"swapIEFeatures" value:v89 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v46, @"SWAP_IE_FEATURE_INTERNET_CONNECTION_SHARING_ENABLED", (const void **)&value))
    {
      [v11 addFieldForKey:@"swapIEInternetConnectionSharingEnabled" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v46, @"SWAP_IE_MODEL_IDENTIFIER_VERSION", (const void **)&value)) {
      [v11 addFieldForKey:@"swapIEModelIdentifierVersion" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v46, @"SWAP_IE_MODEL_IDENTIFIER", (const void **)&v90)) {
      [v11 addFieldForKey:@"swapIEModelIdentifier" value:v90 options:v7];
    }
  }
  CFDictionaryRef v47 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"80211D_IE");
  if (v47)
  {
    CFDictionaryRef v48 = v47;
    if (CFDictionaryGetValueIfPresent(v47, @"IE_KEY_80211D_COUNTRY_CODE", (const void **)&v90)) {
      [v11 addFieldForKey:@"dot11DIECountryCode" value:v90 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v48, @"IE_KEY_80211D_CHAN_INFO_ARRAY", (const void **)&v88)) {
      [v11 addFieldForKey:@"dot11DIEChannelInfoArray" value:[v88 componentsJoinedByString:@":" options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v48, @"IE_KEY_80211D_FIRST_CHANNEL", (const void **)&value)) {
      [v11 addFieldForKey:@"dot11DIEFirstChannel" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v48, @"IE_KEY_80211D_NUM_CHANNELS", (const void **)&value)) {
      [v11 addFieldForKey:@"dot11DIENumChannels" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v48, @"IE_KEY_80211D_MAX_POWER", (const void **)&value)) {
      [v11 addFieldForKey:@"dot11DIEMaxPower" value:value options:v7];
    }
  }
  CFDictionaryRef v49 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"SES_IE");
  if (v49)
  {
    CFDictionaryRef v50 = v49;
    if (CFDictionaryGetValueIfPresent(v49, @"IE_KEY_SES_VERSION", (const void **)&value)) {
      [v11 addFieldForKey:@"SESIEVersion" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v50, @"IE_KEY_SES_RWO", (const void **)&value)) {
      [v11 addFieldForKey:@"SESIERWO" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v50, @"IE_KEY_SES_WDS_RWO", (const void **)&value)) {
      [v11 addFieldForKey:@"SESIEWDSRWO" value:value options:v7];
    }
  }
  CFDictionaryRef v51 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"HT_CAPS_IE");
  if (v51)
  {
    CFDictionaryRef v52 = v51;
    if (CFDictionaryGetValueIfPresent(v51, @"CAPS", (const void **)&value)) {
      [v11 addFieldForKey:@"htCapsIEcapabilities" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v52, @"AMPDU_PARAMS", (const void **)&value)) {
      [v11 addFieldForKey:@"htCapsIEAMPDUCaps" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v52, @"MCS_SET", (const void **)&v89)) {
      [v11 addFieldForKey:@"htCapsIEMCSSet" value:v89 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v52, @"EXT_CAPS", (const void **)&value)) {
      [v11 addFieldForKey:@"htCapsIEExtCaps" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v52, @"TXBF_CAPS", (const void **)&value)) {
      [v11 addFieldForKey:@"htCapsIETxBfCaps" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v52, @"ASEL_CAPS", (const void **)&value)) {
      [v11 addFieldForKey:@"htCapsIEAselCaps" value:value options:v7];
    }
  }
  CFDictionaryRef v53 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"HT_IE");
  if (v53)
  {
    CFDictionaryRef v54 = v53;
    if (CFDictionaryGetValueIfPresent(v53, @"HT_PRIMARY_CHAN", (const void **)&value)) {
      [v11 addFieldForKey:@"htIEPrimaryChannel" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_SECONDARY_CHAN_OFFSET", (const void **)&value)) {
      [v11 addFieldForKey:@"htIESecondaryChannelOffset" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_STA_CHAN_WIDTH", (const void **)&value)) {
      [v11 addFieldForKey:@"htIESTAChannelWidth" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_RIFS_MODE", (const void **)&value)) {
      [v11 addFieldForKey:@"htIERIFSMode" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_PSMP_STAS_ONLY", (const void **)&value)) {
      [v11 addFieldForKey:@"htIEPSMPSTASOnly" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_SERVICE_INT", (const void **)&value)) {
      [v11 addFieldForKey:@"htIEServiceInt" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_OP_MODE", (const void **)&value)) {
      [v11 addFieldForKey:@"htIEOpMode" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_NON_GF_STAS_PRESENT", (const void **)&value)) {
      [v11 addFieldForKey:@"htIENonGFSTAsPresent" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_TX_BURST_LIMIT", (const void **)&value)) {
      [v11 addFieldForKey:@"htIETXBurstLimit" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_OBSS_NON_HT_STAS_PRESENT", (const void **)&value)) {
      [v11 addFieldForKey:@"htIEOBSSNonHTSTAsPresent" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_DUAL_BEACON", (const void **)&value)) {
      [v11 addFieldForKey:@"htIEDualVersion" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_DUAL_CTS_PROT", (const void **)&value)) {
      [v11 addFieldForKey:@"htIEDualCTSProt" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_SECONDARY_BEACON", (const void **)&value)) {
      [v11 addFieldForKey:@"htIESecondaryBeacon" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_LSIG_TXOP_PROT_FULL", (const void **)&value)) {
      [v11 addFieldForKey:@"htIELSIGTXOPProtFull" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_PCO_ACTIVE", (const void **)&value)) {
      [v11 addFieldForKey:@"htIEPCOActive" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_PCO_PHASE", (const void **)&value)) {
      [v11 addFieldForKey:@"htIEPCOPhase" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v54, @"HT_BASIC_MCS_SET", (const void **)&v89)) {
      [v11 addFieldForKey:@"htIEBasicMCSSet" value:v89 options:v7];
    }
  }
  CFDictionaryRef v55 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"VHT_CAPS_IE");
  if (v55)
  {
    CFDictionaryRef v56 = v55;
    if (CFDictionaryGetValueIfPresent(v55, @"VHT_CAPS", (const void **)&value)) {
      [v11 addFieldForKey:@"vhtCapsIECapsInfo" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v56, @"VHT_SUPPORTED_MCS_SET", (const void **)&v89)) {
      [v11 addFieldForKey:@"vhtCapsIESupportedMCSSet" value:v89 options:v7];
    }
  }
  CFDictionaryRef v57 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"VHT_IE");
  if (v57)
  {
    CFDictionaryRef v58 = v57;
    if (CFDictionaryGetValueIfPresent(v57, @"VHT_CHAN_WIDTH", (const void **)&value)) {
      [v11 addFieldForKey:@"vhtIEChanWidth" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v58, @"VHT_CENTER_CHAN_SEGMENT0", (const void **)&value)) {
      [v11 addFieldForKey:@"vhtIEChanSeg0" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v58, @"VHT_CENTER_CHAN_SEGMENT1", (const void **)&value)) {
      [v11 addFieldForKey:@"vhtIEChanSeg1" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v58, @"VHT_BASIC_MCS_SET", (const void **)&value)) {
      [v11 addFieldForKey:@"vhtIEBasicMcsSet" value:value options:v7];
    }
  }
  CFDictionaryRef v59 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"11U_INTERWORKING_IE");
  if (v59)
  {
    CFDictionaryRef v60 = v59;
    if (CFDictionaryGetValueIfPresent(v59, @"INTERWORKING_ACCESS_NETWORK_TYPE", (const void **)&value)) {
      [v11 addFieldForKey:@"dot11uInternetworkingIENetworkType" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v60, @"INTERWORKING_ACCESS_INTERNET", (const void **)&value)) {
      [v11 addFieldForKey:@"dot11uInternetworkingIEInternet" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v60, @"INTERWORKING_ACCESS_ASRA", (const void **)&value)) {
      [v11 addFieldForKey:@"dot11uInternetworkingIEASRA" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v60, @"INTERWORKING_ACCESS_ESR", (const void **)&value)) {
      [v11 addFieldForKey:@"dot11uInternetworkingIEESR" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v60, @"INTERWORKING_ACCESS_UESA", (const void **)&value)) {
      [v11 addFieldForKey:@"dot11uInternetworkingIEUESA" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v60, @"INTERWORKING_ACCESS_VENTURE_GRP", (const void **)&value)) {
      [v11 addFieldForKey:@"dot11uInternetworkingIEVentureGrp" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v60, @"INTERWORKING_ACCESS_VENTURE_TYPE", (const void **)&value)) {
      [v11 addFieldForKey:@"dot11uInternetworkingIEVentureType" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v60, @"INTERWORKING_ACCESS_HESSID", (const void **)&v90)) {
      [v11 addFieldForKey:@"dot11uInternetworkingIEHeSSID" value:v90 options:v7];
    }
  }
  CFDictionaryRef v61 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"HOTSPOT20_IE");
  if (v61)
  {
    CFDictionaryRef v62 = v61;
    if (CFDictionaryGetValueIfPresent(v61, @"DGAF_DISABLED", (const void **)&value)) {
      [v11 addFieldForKey:@"hotspotIEConfigDgafDisabled" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v62, @"RELEASE_NUMBER", (const void **)&value)) {
      [v11 addFieldForKey:@"hotspotIEConfigReleaseNumber" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v62, @"PPS_MO_ID", (const void **)&value)) {
      [v11 addFieldForKey:@"hotspotIEConfigPPSMoId" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v62, @"ANQP_DOMAIN_ID", (const void **)&value)) {
      [v11 addFieldForKey:@"hotspotIEConfigAnqpSomainId" value:value options:v7];
    }
  }
  CFDictionaryRef v63 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"QBSS_LOAD_IE");
  if (v63)
  {
    CFDictionaryRef v64 = v63;
    if (CFDictionaryGetValueIfPresent(v63, @"QBSS_STA_COUNT", (const void **)&value)) {
      [v11 addFieldForKey:@"qBSSLoadIESTACount" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v64, @"QBSS_CHAN_UTIL", (const void **)&value)) {
      [v11 addFieldForKey:@"qBSSLoadIEChanUtilization" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v64, @"QBSS_AAC", (const void **)&value)) {
      [v11 addFieldForKey:@"qBSSLoadIEAAC" value:value options:v7];
    }
  }
  CFDictionaryRef v65 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"MOBILITY_DOMAIN_IE");
  if (v65)
  {
    CFDictionaryRef v66 = v65;
    if (CFDictionaryGetValueIfPresent(v65, @"MOBILITY_DOMAIN_IDENTIFIER", (const void **)&value)) {
      [v11 addFieldForKey:@"mobilityDomainIEIdentifier" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v66, @"MOBILITY_DOMAIN_FT_OVER_DS", (const void **)&value)) {
      [v11 addFieldForKey:@"mobilityDomainIEFTOverDS" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v66, @"MOBILITY_DOMAIN_RESOURCE_REQ_PROTO", (const void **)&value)) {
      [v11 addFieldForKey:@"mobilityDomainIEReqProto" value:value options:v7];
    }
  }
  CFDictionaryRef v67 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"EXT_CAPS");
  if (v67 && CFDictionaryGetValueIfPresent(v67, @"BSS_TRANS_MGMT", (const void **)&value)) {
    [v11 addFieldForKey:@"extendedCapabilityBSSTransMgmt" value:value options:v7];
  }
  CFDictionaryRef v68 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"FAST_ENTERPRISE_NETWORK");
  if (v68)
  {
    CFDictionaryRef v69 = v68;
    if (CFDictionaryGetValueIfPresent(v68, @"FT_STATE", (const void **)&value)) {
      [v11 addFieldForKey:@"ftEnterpriseState" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v69, @"FASTLANE_STATE", (const void **)&value)) {
      [v11 addFieldForKey:@"ftEnterpriseFastlaneState" value:value options:v7];
    }
  }
  unint64_t v70 = (void *)sub_10001E404((uint64_t)a2, @"HE_CAP");
  CFNumberRef v89 = v70;
  if (v70) {
    [v11 addFieldForKey:@"heCap" value:v70 options:v7];
  }
  CFStringRef v71 = (void *)sub_10001E404((uint64_t)a2, @"HE_OP");
  CFNumberRef v89 = v71;
  if (v71) {
    [v11 addFieldForKey:@"heOp" value:v71 options:v7];
  }
  CFStringRef v72 = (void *)sub_10001E404((uint64_t)a2, @"HE_MU_EDCA");
  CFNumberRef v89 = v72;
  if (v72) {
    [v11 addFieldForKey:@"heMuEdca" value:v72 options:v7];
  }
  CFTypeID v73 = (void *)sub_10001E404((uint64_t)a2, @"HE_QBSS_LOAD");
  CFNumberRef v89 = v73;
  if (v73) {
    [v11 addFieldForKey:@"heQBSSLoad" value:v73 options:v7];
  }
  CFDictionaryRef v74 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"WPS_BEACON_IE");
  if (v74)
  {
    CFDictionaryRef v75 = v74;
    if (CFDictionaryGetValueIfPresent(v74, @"IE_KEY_WPS_SC_STATE", (const void **)&value)) {
      [v11 addFieldForKey:@"wpsBeaconIESCState" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v75, @"IE_KEY_WPS_AP_SETUP_LOCKED", (const void **)&value)) {
      [v11 addFieldForKey:@"wpsBeaconIEAPSetupLocked" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v75, @"IE_KEY_WPS_SEL_REG", (const void **)&value)) {
      [v11 addFieldForKey:@"wpsBeaconIESelReg" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v75, @"IE_KEY_WPS_DEV_PW_ID", (const void **)&value)) {
      [v11 addFieldForKey:@"wpsBeaconIEDevPWId" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v75, @"IE_KEY_WPS_REG_CFG_METHODS", (const void **)&value)) {
      [v11 addFieldForKey:@"wpsBeaconIERegCfgMethods" value:value options:v7];
    }
    CFDictionaryRef v76 = (const __CFDictionary *)CFDictionaryGetValue(v75, @"WPS_PROB_RESP_IE");
    if (v76)
    {
      CFDictionaryRef v77 = v76;
      if (CFDictionaryGetValueIfPresent(v76, @"IE_KEY_WPS_RESP_TYPE", (const void **)&value)) {
        [v11 addFieldForKey:@"wpsProbRespIEType" value:value options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v77, @"IE_KEY_WPS_UUID_E", (const void **)&v89)) {
        [v11 addFieldForKey:@"wpsProbRespIETypeUUIDE" value:v89 options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v77, @"IE_KEY_WPS_MANUFACTURER", (const void **)&v90)) {
        [v11 addFieldForKey:@"wpsProbRespIEManufacturer" value:v90 options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v77, @"IE_KEY_WPS_MODEL_NAME", (const void **)&v90)) {
        [v11 addFieldForKey:@"wpsProbRespIEModelName" value:v90 options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v77, @"IE_KEY_WPS_MODEL_NUM", (const void **)&v90)) {
        [v11 addFieldForKey:@"wpsProbRespIEModelNum" value:v90 options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v77, @"IE_KEY_WPS_SERIAL_NUM", (const void **)&v90)) {
        [v11 addFieldForKey:@"wpsProbRespIESerialNum" value:v90 options:v7];
      }
      CFDictionaryRef v78 = (const __CFDictionary *)CFDictionaryGetValue(v77, @"IE_KEY_WPS_PRIMARY_DEV_TYPE");
      if (v78)
      {
        CFDictionaryRef v79 = v78;
        if (CFDictionaryGetValueIfPresent(v78, @"WPS_DEV_TYPE_CAT", (const void **)&value)) {
          [v11 addFieldForKey:@"wpsProbRespIEPrimaryDevTypeCat" value:value options:v7];
        }
        if (CFDictionaryGetValueIfPresent(v79, @"WPS_DEV_TYPE_OUI", (const void **)&v89)) {
          [v11 addFieldForKey:@"wpsProbRespIEPrimaryDevTypeOUI" value:v89 options:v7];
        }
        if (CFDictionaryGetValueIfPresent(v79, @"WPS_DEV_TYPE_SUB_CAT", (const void **)&value)) {
          [v11 addFieldForKey:@"wpsProbRespIEPrimaryDevTypeSubCat" value:value options:v7];
        }
      }
      if (CFDictionaryGetValueIfPresent(v77, @"IE_KEY_WPS_DEV_NAME", (const void **)&v90)) {
        [v11 addFieldForKey:@"wpsProbRespIEDevName" value:v90 options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v77, @"IE_KEY_WPS_DEV_NAME_DATA", (const void **)&v89)) {
        [v11 addFieldForKey:@"wpsProbRespIEDevNameData" value:v89 options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v77, @"IE_KEY_WPS_CFG_METHODS", (const void **)&value)) {
        [v11 addFieldForKey:@"wpsProbRespIECfgMethods" value:value options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v77, @"IE_KEY_WPS_RF_BANDS", (const void **)&value)) {
        [v11 addFieldForKey:@"wpsProbRespIERFBands" value:value options:v7];
      }
    }
  }
  CFDictionaryRef v80 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"WPS_PROB_RESP_IE");
  if (v80)
  {
    CFDictionaryRef v81 = v80;
    if (CFDictionaryGetValueIfPresent(v80, @"IE_KEY_WPS_RESP_TYPE", (const void **)&value)) {
      [v11 addFieldForKey:@"wpsProbRespIEType" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v81, @"IE_KEY_WPS_UUID_E", (const void **)&v89)) {
      [v11 addFieldForKey:@"wpsProbRespIETypeUUIDE" value:v89 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v81, @"IE_KEY_WPS_UUID_R", (const void **)&v89)) {
      [v11 addFieldForKey:@"wpsProbRespIETypeUUIDR" value:v89 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v81, @"IE_KEY_WPS_SC_STATE", (const void **)&value)) {
      [v11 addFieldForKey:@"wpsProbRespIEScState" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v81, @"IE_KEY_WPS_MANUFACTURER", (const void **)&v90)) {
      [v11 addFieldForKey:@"wpsProbRespIEManufacturer" value:v90 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v81, @"IE_KEY_WPS_MODEL_NAME", (const void **)&v90)) {
      [v11 addFieldForKey:@"wpsProbRespIEModelName" value:v90 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v81, @"IE_KEY_WPS_MODEL_NUM", (const void **)&v90)) {
      [v11 addFieldForKey:@"wpsProbRespIEModelNum" value:v90 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v81, @"IE_KEY_WPS_SERIAL_NUM", (const void **)&v90)) {
      [v11 addFieldForKey:@"wpsProbRespIESerialNum" value:v90 options:v7];
    }
    CFDictionaryRef v82 = (const __CFDictionary *)CFDictionaryGetValue(v81, @"IE_KEY_WPS_PRIMARY_DEV_TYPE");
    CFDictionaryRef v83 = v82;
    if (v82)
    {
      if (CFDictionaryGetValueIfPresent(v82, @"WPS_DEV_TYPE_CAT", (const void **)&value)) {
        [v11 addFieldForKey:@"wpsProbRespIEPrimaryDevTypeCat" value:value options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v83, @"WPS_DEV_TYPE_OUI", (const void **)&v89)) {
        [v11 addFieldForKey:@"wpsProbRespIEPrimaryDevTypeOUI" value:v89 options:v7];
      }
      if (CFDictionaryGetValueIfPresent(v83, @"WPS_DEV_TYPE_SUB_CAT", (const void **)&value)) {
        [v11 addFieldForKey:@"wpsProbRespIEPrimaryDevTypeSubCat" value:value options:v7];
      }
    }
    if (CFDictionaryGetValueIfPresent(v83, @"IE_KEY_WPS_DEV_NAME", (const void **)&v90)) {
      [v11 addFieldForKey:@"wpsProbRespIEDevName" value:v90 options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v83, @"IE_KEY_WPS_CFG_METHODS", (const void **)&value)) {
      [v11 addFieldForKey:@"wpsProbRespIECfgMethods" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v81, @"IE_KEY_WPS_SEL_REG", (const void **)&value)) {
      [v11 addFieldForKey:@"wpsBeaconIESelReg" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v81, @"IE_KEY_WPS_AP_SETUP_LOCKED", (const void **)&value)) {
      [v11 addFieldForKey:@"wpsBeaconIEAPSetupLocked" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v81, @"IE_KEY_WPS_REG_CFG_METHODS", (const void **)&value)) {
      [v11 addFieldForKey:@"wpsBeaconIERegCfgMethods" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v81, @"IE_KEY_WPS_DEV_PW_ID", (const void **)&value)) {
      [v11 addFieldForKey:@"wpsBeaconIEDevPWId" value:value options:v7];
    }
    if (CFDictionaryGetValueIfPresent(v81, @"IE_KEY_WPS_ENRL_NONCE", (const void **)&v89)) {
      [v11 addFieldForKey:@"wpsProbRespIEEnrlNonce" value:v89 options:v7];
    }
  }
  uint64_t v84 = (void *)sub_10001E404((uint64_t)a2, @"CHANNEL_WIDTH");
  CFBooleanRef value = v84;
  if (v84) {
    [v11 addFieldForKey:@"channelWidth" value:v84 options:v7];
  }
  CFIndex v85 = (void *)sub_10001E404((uint64_t)a2, @"SCAN_DIRECTED");
  CFBooleanRef value = v85;
  if (v85) {
    [v11 addFieldForKey:@"scanDirected" value:v85 options:v7];
  }
  if (MGGetBoolAnswer())
  {
    CFDictionaryRef v86 = (void *)sub_10001E404((uint64_t)a2, @"SCAN_BSSID_LIST");
    CFNumberRef v88 = v86;
    if (v86) {
      [v11 addFieldForKey:@"scanBssidList" value:[v86 componentsJoinedByString:@":"] options:v7];
    }
  }
  sub_1000476E8(v11);

LABEL_415:
}

uint64_t sub_10005655C(void *a1, const void *a2, uint64_t a3)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: waMsg is NULL", @"__WiFiMetricsManagerWAMessageAppendSSIDandBSSID"];
    }
    goto LABEL_17;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: network is NULL" : @"__WiFiMetricsManagerWAMessageAppendSSIDandBSSID"];
    }
    goto LABEL_17;
  }
  uint64_t v7 = sub_10001A43C(a2);
  uint64_t v8 = sub_10001E404((uint64_t)a2, @"BSSID");
  if (!v7)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: ssid is NULL" args:("__WiFiMetricsManagerWAMessageAppendSSIDandBSSID", 0x0)];
    }
    goto LABEL_16;
  }
  id v9 = v8;
  if (!v8)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: bssid is NULL", @"__WiFiMetricsManagerWAMessageAppendSSIDandBSSID"];
    }
LABEL_16:
LABEL_17:
    uint64_t v10 = 0;
    goto LABEL_6;
  }
  [a1 addFieldForKey:kWAMessageKeySSID value:[NSString stringWithString:v7] options:a3];
  [a1 addFieldForKey:kWAMessageKeyBSSID value:[NSString stringWithString:v9] options:a3];
  uint64_t v10 = 1;
LABEL_6:
  return v10;
}

void sub_10005671C(_OWORD *a1)
{
  uint64_t v8 = 0;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null stats", "WiFiMetricsManagerSubmitDpsProbeStats"];
    }
    goto LABEL_5;
  }
  if (qword_10027D620)
  {
    if (sub_1000931BC(*(void *)(qword_10027D620 + 16)) == 1)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: Camera is in Foreground" :@"WiFiMetricsManagerSubmitDpsProbeStats"];
      }
    }
    else
    {
      id v2 = malloc_type_malloc(0x20uLL, 0x1000040E0EAB150uLL);
      v9[3] = (uint64_t)v2;
      long long v3 = a1[1];
      _OWORD *v2 = *a1;
      v2[1] = v3;
      int v5 = +[WiFiManagerAnalytics sharedInstance];
      uint64_t v6 = v9[3];
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_1000568B8;
      v7[3] = &unk_10023F420;
      v7[4] = &v8;
      [(WiFiManagerAnalytics *)v5 prepareMessageForSubmission:11075585 withData:v6 andReply:v7];
    }
LABEL_5:
  }
  _Block_object_dispose(&v8, 8);
}

void sub_1000568A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000568B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Error back preparing DPSActiveProbeStats for submission: %@, or null WAMessage", "WiFiMetricsManagerSubmitDpsProbeStats_block_invoke", a3 message];
    }
  }
  else
  {
    [+[WiFiManagerAnalytics sharedInstance] triggerDatapathDiagnosticsNoReply:a2];
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = *(void **)(v6 + 24);
  if (v7)
  {
    free(v7);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  *(void *)(v6 + 24) = 0;
}

void sub_10005696C(_OWORD *a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  uint64_t v10 = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null stats", "WiFiMetricsManagerSubmitDpsLinkStateChangeEvent"];
    }
    goto LABEL_5;
  }
  if (qword_10027D620)
  {
    if (sub_1000931BC(*(void *)(qword_10027D620 + 16)) == 1)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Camera is in Foreground", "WiFiMetricsManagerSubmitDpsLinkStateChangeEvent")];
      }
    }
    else
    {
      id v2 = malloc_type_malloc(0x10uLL, 0x1000040A517B1A3uLL);
      void v8[3] = (uint64_t)v2;
      _OWORD *v2 = *a1;
      int v4 = +[WiFiManagerAnalytics sharedInstance];
      uint64_t v5 = v8[3];
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_100056B08;
      v6[3] = &unk_10023F420;
      v6[4] = &v7;
      [(WiFiManagerAnalytics *)v4 prepareMessageForSubmission:11075586 withData:v5 andReply:v6];
    }
LABEL_5:
  }
  _Block_object_dispose(&v7, 8);
}

void sub_100056AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100056B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Error back preparing DPSLinkStateChangeEvent for submission: %@, or null WAMessage", "WiFiMetricsManagerSubmitDpsLinkStateChangeEvent_block_invoke", a3 message];
    }
  }
  else
  {
    [+[WiFiManagerAnalytics sharedInstance] triggerDatapathDiagnosticsNoReply:a2];
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = *(void **)(v6 + 24);
  if (v7)
  {
    free(v7);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  *(void *)(v6 + 24) = 0;
}

void sub_100056BBC(const __CFDictionary *a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  uint64_t v10 = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null info", "WiFiMetricsManagerSubmitDpsAccessPointInfo")];
    }
    goto LABEL_5;
  }
  if (qword_10027D620)
  {
    if (sub_1000931BC(*(void *)(qword_10027D620 + 16)) == 1)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: Camera is in Foreground" arguments:@"WiFiMetricsManagerSubmitDpsAccessPointInfo"];
      }
    }
    else
    {
      CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, a1);
      void v8[3] = (uint64_t)Copy;
      int v4 = +[WiFiManagerAnalytics sharedInstance];
      uint64_t v5 = v8[3];
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_100056D4C;
      v6[3] = &unk_10023F420;
      v6[4] = &v7;
      [(WiFiManagerAnalytics *)v4 prepareMessageForSubmission:11075587 withData:v5 andReply:v6];
    }
LABEL_5:
  }
  _Block_object_dispose(&v7, 8);
}

void sub_100056D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100056D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s Error back preparing DpsAccessPointInfo for submission: %@, or null WAMessage", "WiFiMetricsManagerSubmitDpsAccessPointInfo_block_invoke", a3 message];
    }
  }
  else
  {
    [+[WiFiManagerAnalytics sharedInstance] triggerDatapathDiagnosticsNoReply:a2];
  }
  uint64_t v6 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_100056E00(unsigned int *a1)
{
  if (a1 && qword_10027D620)
  {
    int v2 = sub_1000931BC(*(void *)(qword_10027D620 + 16));
    if (v2 == 1)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: Camera is in Foreground", "WiFiMetricsManagerSubmitPrivateMacStats"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WFMacRandomisation : Submitting PrivateMacStats for WA. event type <%u>, private mac type <%u>, toggled? <%d>, underClassification? <%d>, disabledByProfile? <%d>", "WiFiMetricsManagerSubmitPrivateMacStats", *a1, a1[1], *((unsigned __int8 *)a1 + 8), *((unsigned __int8 *)a1 + 9), *((unsigned __int8 *)a1 + 10)];
      }
      id v5 = objc_alloc((Class)WAMessage);
      id v6 = [v5 initWithMetricName:kWAMessageMetricNamePrivateMacStats options:5];
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = (int)*a1;
        if (v8 > 7) {
          CFStringRef v9 = @"UnknownEvent";
        }
        else {
          CFStringRef v9 = off_10023F530[v8];
        }
        [v6 addFieldForKey:kWAMessageKeyPrivateMacEvent value:[NSString stringWithString:v9] options:5];
        uint64_t v10 = (int)a1[1];
        if (v10 > 2) {
          CFStringRef v11 = @"UnknownAddr";
        }
        else {
          CFStringRef v11 = off_10023F570[v10];
        }
        [v7 addFieldForKey:kWAMessageKeyPrivateMacType value:[NSString stringWithString:v11] options:5];
        [v7 addFieldForKey:kWAMessageKeyPrivateMacToggled value:[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)a1 + 8)] options:5];
        [v7 addFieldForKey:kWAMessageKeyPrivateMacUnderClassification value:[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)a1 + 9)] options:5];
        [v7 addFieldForKey:kWAMessageKeyPrivateMacDisabledByProfile value:[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)a1 + 10)] options:5];
        sub_1000476E8(v7);
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Failed to alloc WAMessage for PrivateMacStats", "__WiFiMetricsManagerWAMessageSubmitPrivateMacStats")];
        }
      }
    }
  }
}

uint64_t sub_1000570A8(uint64_t result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  if (!a2) {
    return result;
  }
  long long v3 = (const void *)result;
  *(void *)(a2 + 4) = 1;
  double result = (uint64_t)sub_10001E404(result, @"PRIVATE_MAC_ADDRESS");
  if (!result) {
    return result;
  }
  int v4 = (const void *)result;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  double result = CFGetTypeID(v4);
  if (TypeID != result) {
    return result;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v4, @"PRIVATE_MAC_ADDRESS_TYPE");
  unsigned int v7 = sub_10001C140(Value);
  if (v7 == 3)
  {
    *(_DWORD *)(a2 + 4) = 0;
  }
  else
  {
    if (v7 == 2)
    {
      int v8 = 2;
    }
    else
    {
      if (v7 != 1)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "WFMacRandomisation : Unknow private MAC type for network [%@]", sub_10001A43C(v3) message];
        }
        goto LABEL_15;
      }
      int v8 = 1;
    }
    *(_DWORD *)(a2 + 4) = v8;
  }
LABEL_15:
  CFBooleanRef v10 = (CFBooleanRef)sub_10001E404((uint64_t)v3, @"MacAddressRandomisationTagMigratedNetwork");
  if (v10) {
    *(unsigned char *)(a2 + 9) = v10 == kCFBooleanTrue;
  }
  CFBooleanRef v11 = (CFBooleanRef)sub_10001E404((uint64_t)v3, @"PrivateMacFeatureToggled");
  if (v11) {
    BOOL v12 = v11 == kCFBooleanTrue;
  }
  else {
    BOOL v12 = 0;
  }
  char v13 = v12;
  *(unsigned char *)(a2 + 8) = v13;
  CFBooleanRef v14 = (CFBooleanRef)sub_10001E404((uint64_t)v3, @"PrivateMacDefaultToOFF");
  if (v14) {
    BOOL v15 = v14 == kCFBooleanTrue;
  }
  else {
    BOOL v15 = 0;
  }
  char v16 = v15;
  *(unsigned char *)(a2 + 10) = v16;
  double result = (uint64_t)sub_1000C6B08((uint64_t)v3);
  if (result == 1)
  {
    BOOL v17 = 1;
  }
  else
  {
    double result = sub_1000CF5AC((uint64_t)v3);
    BOOL v17 = result == 2;
  }
  *(unsigned char *)(a2 + 11) = v17;
  return result;
}

void sub_10005724C(uint64_t a1, const void *a2)
{
  if (!a1)
  {
    id v21 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_25;
    }
    uint64_t v22 = "%s: null Companion Info";
LABEL_21:
    uint64_t v23 = 3;
LABEL_24:
    [v21 WFLog:v23 message:v22 __WiFiMetricsManagerWAMessageSubmitCompanionAssistedAJInfo];
    goto LABEL_25;
  }
  if (!qword_10027D620) {
    goto LABEL_16;
  }
  if (sub_1000931BC(*(void *)(qword_10027D620 + 16)) == 1)
  {
    id v21 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_25;
    }
    uint64_t v22 = "%s: Camera is in Foreground";
    goto LABEL_21;
  }
  id v5 = objc_alloc((Class)WAMessage);
  id v6 = [v5 initWithMetricName:kWAMessageMetricNameCompanionAssistedAJ options:7];
  if (!v6)
  {
    id v21 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v22 = "%s: Failed to alloc WAMessage for Companion Assisted AJ";
      uint64_t v23 = 4;
      goto LABEL_24;
    }
LABEL_25:
    goto LABEL_16;
  }
  unsigned int v7 = v6;
  [v6 addFieldForKey:@"CompanionRSSI" value:[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 8)) options:7];
  [v7 addFieldForKey:@"CompanionChannel" value:[NSNumber numberWithInt:*(unsigned int *)(a1 + 12)] options:7];
  if (a2)
  {
    CFStringRef v8 = (const __CFString *)sub_10001A43C(a2);
    if (CFStringCompare(v8, *(CFStringRef *)a1, 0))
    {
      uint64_t v9 = 0;
      BOOL v10 = 0;
      uint64_t v11 = 1;
    }
    else
    {
      int valuePtr = 0;
      CFNumberRef v12 = (const __CFNumber *)sub_100024070((uint64_t)a2);
      if (v12)
      {
        CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
        int v13 = valuePtr;
      }
      else
      {
        int v13 = 0;
      }
      BOOL v10 = v13 == *(_DWORD *)(a1 + 12);
      uint64_t v11 = 1;
      uint64_t v9 = 1;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v9 = 0;
    BOOL v10 = 0;
  }
  [v7 addFieldForKey:@"GizmoConnected" value:[NSNumber numberWithInt:v11] options:7];
  [v7 addFieldForKey:@"GizmoConnectedToSameSSID" value:[NSNumber numberWithInt:v9] options:7];
  [v7 addFieldForKey:@"GizmoConnectedToSameChannel" value:[NSNumber numberWithInt:v10] options:7];
  BOOL v15 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    CFStringRef v16 = *(CFStringRef *)a1;
    uint64_t v17 = *(unsigned int *)(a1 + 8);
    uint64_t v18 = *(unsigned int *)(a1 + 12);
    uint64_t v19 = sub_10001A43C(a2);
    [v15 WFLog:3, "%s: CompanionSSID %@, CompanionRSSI %d, CompanionChannel %d, GizmoSSID %@, GizmoChannel %@", "__WiFiMetricsManagerWAMessageSubmitCompanionAssistedAJInfo", v16, v17, v18, v19, sub_100024070((uint64_t)a2) message];
  }
  sub_1000476E8(v7);

LABEL_16:
}

void sub_100057530(uint64_t a1)
{
  if (!a1)
  {
    unsigned int v7 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_17;
    }
    CFStringRef v8 = "%s: null ssidAndQualityArr";
LABEL_13:
    uint64_t v9 = 3;
LABEL_16:
    [v7 WFLog:v9 message:v8 __WiFiMetricsManagerWAMessageUpdateHistoricalKnownNetworkQuality];
    goto LABEL_17;
  }
  if (!qword_10027D620) {
    goto LABEL_6;
  }
  if (sub_1000931BC(*(void *)(qword_10027D620 + 16)) == 1)
  {
    unsigned int v7 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_17;
    }
    CFStringRef v8 = "%s: Camera is in Foreground";
    goto LABEL_13;
  }
  id v3 = objc_alloc((Class)WAMessage);
  id v4 = [v3 initWithMetricName:kWAMessageMetricNameHistoricalKnownNetworkQuality options:6];
  if (v4)
  {
    id v5 = v4;
    [v4 addFieldForKey:kWAMessageKeyNetworkHistoricalQuality value:a1 options:6];
    sub_1000476E8(v5);

    goto LABEL_6;
  }
  unsigned int v7 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    CFStringRef v8 = "%s: Failed to alloc WAMessage for HistoricalKnownNetworkQuality";
    uint64_t v9 = 4;
    goto LABEL_16;
  }
LABEL_17:
LABEL_6:
}

void sub_10005768C(double a1)
{
  id v3 = objc_alloc((Class)WAMessage);
  id v4 = [v3 initWithMetricName:kWAMessageMetricName11axAsrDuration options:5];
  if (v4)
  {
    id v5 = v4;
    [v4 addFieldForKey:kWAMessageKey11axAsrDuration value:[NSNumber numberWithDouble:a1] options:5];
    sub_1000476E8(v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Null message", "WiFiMetricsManagerSubmit11axAsrDuration"];
    }
  }
}

void sub_100057788(const __CFDictionary *a1)
{
  if (!qword_10027D620) {
    goto LABEL_9;
  }
  if (sub_1000931BC(*(void *)(qword_10027D620 + 16)) == 1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Camera is in Foreground", "WiFiMetricsManagerSubmitCatsScanManagerMetrics"];
    }
    goto LABEL_14;
  }
  id v3 = objc_alloc((Class)WAMessage);
  id v4 = [v3 initWithMetricName:kWAMessageMetricNameCatsScanMetrics options:5];
  if (!v4)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Null message", @"WiFiMetricsManagerSubmitCatsScanManagerMetrics"];
    }
LABEL_14:
    goto LABEL_9;
  }
  id v5 = v4;
  unsigned int valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"CATS_SCAN_METRIC_CACHE_HITS");
  if (Value) {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  }
  unsigned int v9 = 0;
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(a1, @"CATS_SCAN_METRIC_CACHE_MISS");
  if (v7) {
    CFNumberGetValue(v7, kCFNumberSInt32Type, &v9);
  }
  [v5 addFieldForKey:kWAMessageKeyCatsScanCacheHit value:[NSNumber numberWithInt:*valuePtr] options:5];
  [v5 addFieldForKey:kWAMessageKeyCatsScanCacheMiss value:[NSNumber numberWithInt:v9] options:5];
  sub_1000476E8(v5);
  CFRelease(v5);
LABEL_9:
}

void sub_100057930(uint64_t a1)
{
  id v3 = objc_alloc((Class)WAMessage);
  id v4 = [v3 initWithMetricName:kWAMessageMetricNameCarPlayLinkQualityMetrics options:5];
  if (v4)
  {
    id v5 = v4;
    [v4 addFieldForKey:@"txRateMax" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 36)] options:5];
    [v5 addFieldForKey:@"txRateMin" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 32)] options:5];
    [v5 addFieldForKey:@"txRateAvg" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)] options:5];
    [v5 addFieldForKey:@"txRateLast" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 44)] options:5];
    [v5 addFieldForKey:@"rxRateMax" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 52)] options:5];
    [v5 addFieldForKey:@"rxRateMin" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 48)] options:5];
    [v5 addFieldForKey:@"rxRateAvg" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 56)] options:5];
    [v5 addFieldForKey:@"rxRateLast" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 60)] options:5];
    [v5 addFieldForKey:@"ccaMax" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 100)] options:5];
    [v5 addFieldForKey:@"ccaMin" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 96)] options:5];
    [v5 addFieldForKey:@"ccaAvg" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 104)] options:5];
    [v5 addFieldForKey:@"ccaLast" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 108)] options:5];
    [v5 addFieldForKey:@"snrMax" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 68)] options:5];
    [v5 addFieldForKey:@"snrMin" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 64)] options:5];
    [v5 addFieldForKey:@"snrAvg" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 72)] options:5];
    [v5 addFieldForKey:@"snrLast" value:[NSNumber numberWithUnsignedInt:*((unsigned int *)(a1 + 76))] options:5];
    [v5 addFieldForKey:@"rssiMax" value:[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 84)) options:5];
    [v5 addFieldForKey:@"rssiMin" value:[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)] options:5];
    [v5 addFieldForKey:@"rssiAvg" value:[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 88)) options:5];
    [v5 addFieldForKey:@"rssiLast" value:[NSNumber numberWithInt:*(unsigned int *)(a1 + 92)] options:5];
    [v5 addFieldForKey:@"linkDuration" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 24)] options:5];
    [v5 addFieldForKey:@"roamedCount" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 28)] options:5];
    [v5 addFieldForKey:@"channel" value:[NSNumber numberWithUnsignedInt:*(__int16 *)(a1 + 112)] options:5];
    [v5 addFieldForKey:@"bandWidth" value:[NSNumber numberWithUnsignedInt:*(unsigned __int16 *)(a1 + 114)] options:5];
    [v5 addFieldForKey:@"numberOfTxErrorEvents" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 116)] options:5];
    [v5 addFieldForKey:@"lqmInterval" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 120)] options:5];
    [v5 addFieldForKey:@"linkDownSubReason" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 136)] options:5];
    [v5 addFieldForKey:@"linkDownReason" value:[NSString stringWithString:*(NSString *)(a1 + 128)] options:5];
    [v5 addFieldForKey:@"phyMode" value:[NSString stringWithString:*(void *)(a1 + 144)] options:5];
    [v5 addFieldForKey:@"vehicleModelName" value:[NSString stringWithString:a1] options:5];
    [v5 addFieldForKey:@"vehicleManufacturer" value:[NSString stringWithString:*(NSString *)(a1 + 8)] options:5];
    [v5 addFieldForKey:@"hardwareVersion" value:[NSString stringWithString:*(NSString *)(a1 + 16)] options:5];
    [v5 addFieldForKey:@"isLpcValid" value:[NSNumber numberWithUnsignedInt:*(unsigned __int8 *)(a1 + 152)] options:5];
    [v5 addFieldForKey:@"lpcMinOffset" value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(double *)(a1 + 160)) options:5];
    [v5 addFieldForKey:@"lpcTxOffset0" value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 168)) options:5];
    [v5 addFieldForKey:@"lpcTxOffset1" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 172)] options:5];
    [v5 addFieldForKey:@"lpcTxOffset2" value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 176)) options:5];
    [v5 addFieldForKey:@"lpcTxOffset3" value:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 180)] options:5];
    [v5 addFieldForKey:@"estimatedPowerReduction" value:[NSNumber numberWithUnsignedInt:*(double *)(a1 + 192)] options:5];
    sub_1000476E8(v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Null message", "WiFiMetricsManagerSubmitCarPlayLinkQualityMetrics"];
    }
  }
}

void sub_100057F88(unsigned int *a1)
{
  id v3 = objc_alloc((Class)WAMessage);
  id v4 = [v3 initWithMetricName:kWAMessageMetricNameCarPlayConnectMetrics options:5];
  if (v4)
  {
    id v5 = v4;
    [v4 addFieldForKey:kWAMessageKeyCarPlayTimeBasicAssocTaken value:[NSNumber numberWithUnsignedInt:*a1] options:5];
    [v5 addFieldForKey:kWAMessageKeyCarPlayTime4WayHSTaken value:[NSNumber numberWithUnsignedInt:a1[1]] options:5];
    [v5 addFieldForKey:kWAMessageKeyCarPlayTimeDhcpTaken value:[NSNumber numberWithUnsignedInt:a1[2]] options:5];
    [v5 addFieldForKey:kWAMessageKeyCarPlayWasScanCanceledBeforeJoin value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)a1 + 12)] options:5];
    [v5 addFieldForKey:@"Channel" value:[NSNumber numberWithUnsignedInt:*((unsigned __int16 *)a1 + 7)] options:5];
    [v5 addFieldForKey:@"vehicleModelName" value:[NSString stringWithString:*((void *)a1 + 2)] options:5];
    [v5 addFieldForKey:@"vehicleManufacturer" value:[NSString stringWithString:*((void *)a1 + 3)] options:5];
    [v5 addFieldForKey:@"hardwareVersion" value:[NSString stringWithString:*((void *)a1 + 4)] options:5];
    sub_1000476E8(v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Null message", "WiFiMetricsManagerSubmitCarPlayConnectMetrics")];
    }
  }
}

void sub_10005819C(unsigned int *a1)
{
  if (qword_10027D620)
  {
    if (sub_1000931BC(*(void *)(qword_10027D620 + 16)) == 1)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Camera is in Foreground", "WiFiMetricsManagerSubmitInfraConnectionMetrics")];
      }
    }
    else
    {
      id v3 = objc_alloc((Class)WAMessage);
      id v4 = [v3 initWithMetricName:kWAMessageMetricNameInfraConnectionMetrics options:5];
      if (v4)
      {
        id v5 = v4;
        [v4 addFieldForKey:kWAMessageKeyInfraConnectionTime4WayHSTaken value:[NSNumber numberWithUnsignedInt:*a1] options:5];
        [v5 addFieldForKey:@"Channel" value:[NSNumber numberWithUnsignedInt:*((unsigned __int16 *)a1 + 2)] options:5];
        [v5 addFieldForKey:@"Band" value:[NSNumber numberWithUnsignedInt:*((unsigned __int16 *)a1 + 3)] options:5];
        sub_1000476E8(v5);
        CFRelease(v5);
        goto LABEL_5;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: Null message", @"WiFiMetricsManagerSubmitInfraConnectionMetrics"];
      }
    }
  }
LABEL_5:
}

void sub_10005832C(unsigned int *a1)
{
  if (qword_10027D620)
  {
    id v3 = objc_alloc((Class)WAMessage);
    id v4 = [v3 initWithMetricName:kWAMessageMetricNameDetailedInfraConnectionMetrics options:5];
    if (v4)
    {
      id v5 = v4;
      [v4 addFieldForKey:kWAMessageKeyDetailedInfraConnectionEapolStartM1Dur value:[NSNumber numberWithUnsignedInt:*a1] options:5];
      [v5 addFieldForKey:kWAMessageKeyDetailedInfraConnectionM1M2Dur value:[NSNumber numberWithUnsignedInt:a1[1]] options:5];
      [v5 addFieldForKey:kWAMessageKeyDetailedInfraConnectionM2M3Dur value:[NSNumber numberWithUnsignedInt:a1[2]] options:5];
      [v5 addFieldForKey:kWAMessageKeyDetailedInfraConnectionM3M4Dur value:[NSNumber numberWithUnsignedInt:a1[3]] options:5];
      [v5 addFieldForKey:kWAMessageKeyDetailedInfraConnectionTotal4WayHSDur value:[NSNumber numberWithUnsignedInt:a1[4]] options:5];
      [v5 addFieldForKey:@"Channel" value:[NSNumber numberWithUnsignedInt:*((unsigned __int16 *)a1 + 10)] options:5];
      [v5 addFieldForKey:@"Band" value:[NSNumber numberWithUnsignedInt:*((unsigned __int16 *)a1 + 11)] options:5];
      [v5 addFieldForKey:kWAMessageKeyDetailedInfraConnectionA2DPActive value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)a1 + 24)] options:5];
      [v5 addFieldForKey:kWAMessageKeyDetailedInfraConnectionSCOActive value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)a1 + 25)] options:5];
      [v5 addFieldForKey:kWAMessageKeyDetailedInfraConnectionRSSI value:[NSNumber numberWithInt:a1[7]] options:5];
      [v5 addFieldForKey:kWAMessageKeyDetailedInfraConnectionAPProfile value:[NSString stringWithString:*((void *)a1 + 4)] options:5];
      [v5 addFieldForKey:kWAMessageKeyDetailedInfraConnectionAutoJoinHandshake value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)a1 + 40)] options:5];
      sub_1000476E8(v5);
      CFRelease(v5);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: Null message", "WiFiMetricsManagerSubmitDetailedInfraConnectionMetrics"];
      }
    }
  }
}

void sub_10005860C(unsigned int *a1)
{
  id v3 = objc_alloc((Class)WAMessage);
  id v4 = [v3 initWithMetricName:kWAMessageMetricNameCarPlayLinkDownSuppressionMetrics options:5];
  if (v4)
  {
    id v5 = v4;
    [v4 addFieldForKey:@"linkDownDuration" value:[NSNumber numberWithUnsignedInt:*a1] options:5];
    [v5 addFieldForKey:@"linkDownSubReason" value:[NSNumber numberWithUnsignedInt:a1[4]] options:5];
    [v5 addFieldForKey:@"timedOut" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)a1 + 20)] options:5];
    [v5 addFieldForKey:@"linkDebounceSucceeded" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)a1 + 21)] options:5];
    [v5 addFieldForKey:@"SessionDownSuppressionSucceeded" value:[NSNumber numberWithUnsignedInt:*((unsigned __int8 *)a1 + 22)] options:5];
    [v5 addFieldForKey:@"linkDownReason" value:[NSString stringWithString:*((void *)a1 + 1)] options:5];
    [v5 addFieldForKey:@"vehicleModelName" value:[NSString stringWithString:*((void *)a1 + 3)] options:5];
    [v5 addFieldForKey:@"vehicleManufacturer" value:[NSString stringWithString:*((void *)a1 + 4)] options:5];
    [v5 addFieldForKey:@"hardwareVersion" value:[NSString stringWithString:*((void *)a1 + 5)] options:5];
    sub_1000476E8(v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Null message", "WiFiMetricsManagerSubmitCarPlayLinkDownSuppressionMetrics"];
    }
  }
}

void sub_10005881C(unsigned int *a1)
{
  id v3 = objc_alloc((Class)WAMessage);
  id v4 = [v3 initWithMetricName:kWAMessageMetricNameSidekickMetrics options:5];
  if (v4)
  {
    id v5 = v4;
    [v4 addFieldForKey:kWAMessageKeyWiFiCriticalDuration value:[NSNumber numberWithUnsignedInt:*a1] options:5];
    sub_1000476E8(v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Null message", @"WiFiMetricsManagerSubmitSidekickMetrics"];
    }
  }
}

void sub_100058910(const void *a1, void *a2, void *a3)
{
  if (!a1)
  {
    CFDictionaryRef v33 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_43;
    }
    CFDictionaryRef v34 = "%s: null network";
LABEL_39:
    uint64_t v35 = 4;
LABEL_42:
    [v33 WFLog:v35 message:v34 WiFiMetricsManagerUpdateBeaconCacheResults];
    goto LABEL_43;
  }
  if (!a2)
  {
    CFDictionaryRef v33 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_43;
    }
    CFDictionaryRef v34 = "%s: null beaconCacheResults";
    goto LABEL_39;
  }
  if (qword_10027D620)
  {
    if (sub_1000931BC(*(void *)(qword_10027D620 + 16)) != 1)
    {
      uint64_t v37 = a1;
      id v38 = v6;
      id v43 = +[NSMutableArray array];
      long long v45 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id v7 = [a2 countByEnumeratingWithState:&v45 objects:v49 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v46;
        uint64_t v42 = kWAMessageKeyRSSI;
        uint64_t v41 = kWAMessageKeySSID;
        uint64_t v40 = kWAMessageKeyChannel;
        BOOL v10 = @"RSSI";
        uint64_t v39 = kWAMessageKeyBSSID;
        do
        {
          uint64_t v11 = 0;
          id v44 = v8;
          do
          {
            if (*(void *)v46 != v9) {
              objc_enumerationMutation(a2);
            }
            uint64_t v12 = *(void *)(*((void *)&v45 + 1) + 8 * (void)v11);
            if (v12)
            {
              int v13 = sub_10001A43C(*(const void **)(*((void *)&v45 + 1) + 8 * (void)v11));
              if (!a3 || [a3 containsObject:v13])
              {
                CFBooleanRef v14 = sub_10001E404(v12, v10);
                BOOL v15 = sub_10001E404(v12, @"CHANNEL");
                CFStringRef v16 = sub_10001E404(v12, @"BSSID");
                BOOL v17 = !v14 || v13 == 0;
                BOOL v18 = v17 || v15 == 0;
                if (!v18 && v16 != 0)
                {
                  uint64_t v20 = v16;
                  uint64_t v21 = v9;
                  uint64_t v22 = a3;
                  uint64_t v23 = a2;
                  uint64_t v24 = v10;
                  id v25 = +[NSMutableDictionary dictionary];
                  [v25 setObject:v14 forKey:v42];
                  [v25 setObject:v13 forKey:v41];
                  [v25 setObject:v15 forKey:v40];
                  [v25 setObject:v20 forKey:v39];
                  id v26 = v25;
                  BOOL v10 = v24;
                  a2 = v23;
                  a3 = v22;
                  uint64_t v9 = v21;
                  id v8 = v44;
                  [v43 addObject:v26];
                }
              }
            }
            uint64_t v11 = (char *)v11 + 1;
          }
          while (v8 != v11);
          id v8 = [a2 countByEnumeratingWithState:&v45 objects:v49 count:16];
        }
        while (v8);
      }
      if ((unint64_t)[v43 count] <= 1)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Not enough trimmedResults" : @"WiFiMetricsManagerUpdateBeaconCacheResults"];
        }
      }
      else
      {
        id v27 = objc_alloc((Class)WAMessage);
        id v28 = [v27 initWithMetricName:kWAMessageMetricNameBeaconCache options:6];
        if (v28)
        {
          uint64_t v29 = v28;
          [v28 addFieldForKey:kWAMessageKeyBeaconCacheResults value:v43 options:6];
          uint64_t v30 = kWAMessageKeyMetricDate;
          [+[NSDate date] timeIntervalSinceReferenceDate];
          [v29 addFieldForKey:v30 value:[NSNumber numberWithDouble:6]];
          if (!sub_10005655C(v29, v37, 6))
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4, @"%s: Failed to append SSID/BSSID to WAMessage", @"WiFiMetricsManagerUpdateBeaconCacheResults"];
            }
          }
          [v29 addFieldForKey:kWAMessageKeyChannel value:sub_10001E404((uint64_t)v37, @"CHANNEL") options:6];
          sub_1000476E8(v29);

          goto LABEL_33;
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Failed to alloc WAMessage for kWAMessageMetricNameBeaconCache", "WiFiMetricsManagerUpdateBeaconCacheResults")];
        }
      }
LABEL_33:
      id v6 = v38;
      goto LABEL_34;
    }
    CFDictionaryRef v33 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFDictionaryRef v34 = "%s: Camera is in Foreground";
      uint64_t v35 = 3;
      goto LABEL_42;
    }
LABEL_43:
  }
LABEL_34:
}

void sub_100058DBC(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    id v5 = [objc_alloc((Class)WAMessage) initWithMetricName:a1 options:5];
    if (v5)
    {
      id v6 = v5;
      [v5 addFieldsFromDictionary:a2 options:5];
      sub_1000476E8(v6);
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Failed to alloc WAMessage for %@", "__WiFiMetricsManagerWAMessageSubmitFromDictionary", a1 message];
      }
    }
  }
  else if (qword_10027DD68)
  {
    [(id)qword_10027DD68 WFLog:3, "%s: Null param (name:%@ dict:%@)", "__WiFiMetricsManagerWAMessageSubmitFromDictionary", a1, a2 message];
  }
}

void sub_100058EC0(void *a1)
{
  if (a1)
  {
    uint64_t v3 = kWAMessageKeyFaultName;
    if (objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", kWAMessageKeyFaultName), "isEqual:", WiFiUsageFaultReasonStringMap()))
    {
      if (!qword_10027D620) {
        goto LABEL_35;
      }
      int v4 = sub_1000931C8(*(void *)(qword_10027D620 + 16));
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: Got kWiFiUsageFaultReasonAirplayConnectionStall, checking audio state", @"WiFiMetricsManagerSubmitFaultDictionary"];
      }
      if (qword_10027DD68)
      {
        if (v4) {
          id v7 = "%s: linkRecoveryDisabled == TRUE implies Audio Playing, setting WiFiAnalyticsMessageTypeManagedFault";
        }
        else {
          id v7 = "%s: linkRecoveryDisabled == FALSE implies No Audio Playing, removing WiFiAnalyticsMessageTypeManagedFault";
        }
        [((id)qword_10027DD68) WFLog:3 message:v7 WiFiMetricsManagerSubmitFaultDictionary];
      }
      if ([+[NSUserDefaults standardUserDefaults] objectForKey:@"ManagedFaultConnectionStallOverrideAllow"])
      {
        unsigned int v8 = [[+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults") objectForKey:@"ManagedFaultConnectionStallOverrideAllow"] BOOLValue];
        BOOL v10 = (void *)qword_10027DD68;
        if (v8) {
          uint64_t v11 = 16;
        }
        else {
          uint64_t v11 = 0;
        }
        if (qword_10027DD68)
        {
          if (v8) {
            uint64_t v12 = "%s: Found NSUserDefaults kManagedFaultConnectionStallOverrideAllow TRUE, setting WiFiAnalyticsMessageT"
          }
                  "ypeManagedFault for %@";
          else {
            uint64_t v12 = "%s: Found NSUserDefaults kManagedFaultConnectionStallOverrideAllow FALSE, removing WiFiAnalyticsMessag"
          }
                  "eTypeManagedFault for %@";
          [a1 objectForKeyedSubscript:v3];
          [v10 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v12 WFLog:3 message:v1
        }
      }
      else
      {
        uint64_t v11 = 16 * (v4 != 0);
      }
    }
    else
    {
      uint64_t v11 = 16;
    }
    if ([+[NSUserDefaults standardUserDefaults] objectForKey:@"ManagedFaultOverrideAll"])
    {
      unsigned int v13 = [[+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults") objectForKey:@"ManagedFaultOverrideAll"] BOOLValue];
      BOOL v15 = (void *)qword_10027DD68;
      if (v13) {
        uint64_t v11 = 16;
      }
      else {
        uint64_t v11 = 0;
      }
      if (qword_10027DD68)
      {
        if (v13) {
          CFStringRef v16 = "%s: Found NSUserDefaults kManagedFaultOverrideAll TRUE, setting WiFiAnalyticsMessageTypeManagedFault for %@";
        }
        else {
          CFStringRef v16 = "%s: Found NSUserDefaults kManagedFaultOverrideAll FALSE, removing WiFiAnalyticsMessageTypeManagedFault for %@";
        }
        [a1 objectForKeyedSubscript:v3];
        [v15 WFLog:3 message:v16 WiFiMetricsManagerSubmitFaultDictionary:WiFiUsageFaultReasonStringMap()];
      }
    }
    id v17 = objc_alloc((Class)WAMessage);
    id v18 = [v17 initWithMetricName:kWAMessageMetricNameFault options:v11];
    if (v18)
    {
      uint64_t v19 = v18;
      [v18 addFieldsFromDictionary:a1 options:v11];
      sub_1000476E8(v19);
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Failed to alloc WAMessage for kWAMessageMetricNameFault", "WiFiMetricsManagerSubmitFaultDictionary")
      }
    }
  }
  else if (qword_10027DD68)
  {
    [(id)qword_10027DD68 WFLog:3, "%s: Null param (dict:%@)", "WiFiMetricsManagerSubmitFaultDictionary", 0 message];
  }
LABEL_35:
}

uint64_t sub_1000591F0()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_10027D630 = result;
  return result;
}

void sub_100059218()
{
  uint64_t v0 = qword_10027D620;
  if (qword_10027D620)
  {
    CFArrayRef v1 = *(const __CFArray **)(qword_10027D620 + 32);
    if (v1)
    {
      if (CFArrayGetCount(v1) >= 1)
      {
        CFIndex v2 = 0;
        do
        {
          CFNumberRef ValueAtIndex = (CFTypeRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(qword_10027D620 + 32), v2);
          CFTypeRef v4 = ValueAtIndex[88];
          if (v4)
          {
            CFRelease(v4);
            ValueAtIndex[88] = 0;
          }
          CFTypeRef v5 = ValueAtIndex[89];
          if (v5)
          {
            CFRelease(v5);
            ValueAtIndex[89] = 0;
          }
          if (*ValueAtIndex)
          {
            CFRelease(*ValueAtIndex);
            *CFNumberRef ValueAtIndex = 0;
          }
          id v6 = (void *)ValueAtIndex[30];
          if (v6)
          {
            free(v6);
            ValueAtIndex[30] = 0;
          }
          id v7 = (void *)ValueAtIndex[32];
          if (v7)
          {
            free(v7);
            ValueAtIndex[32] = 0;
          }
          unsigned int v8 = (void *)ValueAtIndex[39];
          if (v8)
          {
            free(v8);
            ValueAtIndex[39] = 0;
          }
          uint64_t v9 = (void *)ValueAtIndex[41];
          if (v9)
          {
            free(v9);
            ValueAtIndex[41] = 0;
          }
          BOOL v10 = (void *)ValueAtIndex[43];
          if (v10)
          {
            free(v10);
            ValueAtIndex[43] = 0;
          }
          uint64_t v11 = (void *)ValueAtIndex[47];
          if (v11) {
            free(v11);
          }
          free(ValueAtIndex);
          ++v2;
        }
        while (v2 < CFArrayGetCount(*(CFArrayRef *)(qword_10027D620 + 32)));
      }
      uint64_t v0 = qword_10027D620;
      uint64_t v12 = *(const void **)(qword_10027D620 + 32);
      if (v12)
      {
        CFRelease(v12);
        uint64_t v0 = qword_10027D620;
        *(void *)(qword_10027D620 + 32) = 0;
      }
    }
    unsigned int v13 = *(const void **)(v0 + 56);
    if (v13)
    {
      CFRelease(v13);
      uint64_t v0 = qword_10027D620;
      *(void *)(qword_10027D620 + 56) = 0;
    }
    CFBooleanRef v14 = *(const void **)(v0 + 48);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(qword_10027D620 + 48) = 0;
    }
  }
}

CFNumberRef sub_100059360(const __CFNumber *result)
{
  if (result)
  {
    int valuePtr = -1431655766;
    uint64_t result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    if (result)
    {
      if ((valuePtr - 1) > 8) {
        return 0;
      }
      else {
        return (const __CFNumber *)dword_1001CB3A4[valuePtr - 1];
      }
    }
  }
  return result;
}

void sub_1000593C0(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  if (a1)
  {
    uint64_t v11 = v10;
    if (a3)
    {
      uint64_t context = v10;
      if (a5) {
        uint64_t v12 = 7;
      }
      else {
        uint64_t v12 = 6;
      }
      id v13 = +[NSMutableString string];
      if (a4)
      {
        uint64_t v14 = 0;
        do
        {
          [v13 appendFormat:@"%02x", *(unsigned __int8 *)(a3 + v14)];
          if (v14 < a4 - 1) {
            [v13 appendFormat:@":"];
          }
          ++v14;
        }
        while (a4 != v14);
      }
      [a1 addFieldForKey:a2 value:v13 options:v12];
      uint64_t v11 = context;
    }
    else if (qword_10027DD68)
    {
      [((id)qword_10027DD68) WFLog:message:3, "%s: addr is NULL", "__WiFiMetricsManagerWAMessageAppendFieldInColonHexdecFormat"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: waMsg is NULL", "__WiFiMetricsManagerWAMessageAppendFieldInColonHexdecFormat")];
    }
  }
}

void sub_100059528(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v8 = a4;
      if (a4) {
        goto LABEL_6;
      }
      uint64_t v9 = malloc_type_malloc(0x34CuLL, 0x1000040503055D5uLL);
      if (v9)
      {
        uint64_t v8 = (uint64_t)v9;
        bzero(v9, 0x34CuLL);
        if (!sub_100047BE4(a2, v8))
        {
          uint64_t v20 = (void *)v8;
LABEL_14:
          free(v20);
          return;
        }
LABEL_6:
        int v22 = a3;
        id v25 = a1;
        id v10 = +[NSMutableArray array];
        uint64_t v11 = (unsigned int *)v8;
        id v12 = +[NSMutableArray array];
        id v13 = +[NSMutableArray array];
        id v14 = +[NSMutableArray array];
        id v15 = +[NSMutableArray array];
        id v16 = +[NSMutableArray array];
        id v17 = +[NSMutableArray array];
        uint64_t v18 = 0;
        uint64_t v24 = v11;
        do
        {
          [v10 insertObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *v11) numberWithInt:*v11] atIndex:v18];
          [v12 insertObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11[30])] atIndex:v18];
          [v13 insertObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11[60])] atIndex:v18];
          [v14 insertObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11[90])] atIndex:v18];
          [v15 insertObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11[120])] atIndex:v18];
          [v16 insertObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11[150])] atIndex:v18];
          [v17 insertObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11[180])] atIndex:v18++];
          ++v11;
        }
        while (v18 != 30);
        if (v22) {
          uint64_t v19 = 7;
        }
        else {
          uint64_t v19 = 6;
        }
        [v25 addFieldForKey:kWAMessageKeyRSSI value:[NSArray arrayWithArray:v10] options:v19];
        [v25 addFieldForKey:kWAMessageKeyTxPER value:[NSArray arrayWithArray:v12] options:v19];
        [v25 addFieldForKey:kWAMessageKeyTxFrameCount value:[NSArray arrayWithArray:v13] options:v19];
        [v25 addFieldForKey:kWAMessageKeyFwTxPER value:[NSArray arrayWithArray:v14] options:v19];
        [v25 addFieldForKey:kWAMessageKeyFwTxFrameCount value:[NSArray arrayWithArray:v15] options:v19];
        [v25 addFieldForKey:kWAMessageKeyBeaconsSched value:[NSArray arrayWithArray:v16] options:v19];
        [v25 addFieldForKey:kWAMessageKeyBeaconsPer value:[NSArray arrayWithArray:v17] options:v19];
        [v25 addFieldForKey:kWAMessageKeyGatewayARPHistory value:[NSNumber numberWithUnsignedInt:v24[210]] options:v19];
        if (a4) {
          return;
        }
        uint64_t v20 = v24;
        goto LABEL_14;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: null lqmHistoryMetric", @"__WiFiMetricsManagerWAMessageAppendLQM"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: device is NULL", "__WiFiMetricsManagerWAMessageAppendLQM")];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: waMsg is NULL", "__WiFiMetricsManagerWAMessageAppendLQM")];
    }
  }
}

uint64_t sub_100059A48(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = qword_10027D638;
  qword_10027D638 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

id sub_100059B34(uint64_t a1, void *a2)
{
  return [a2 _updateDNDStatus];
}

void sub_100059D94(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) manager];
  uint64_t v3 = *(void **)(a1 + 40);
  CFTypeRef v4 = *(void **)(a1 + 48);
  CFTypeRef v5 = *(void **)(a1 + 56);

  sub_10008DBF4((uint64_t)v2, v3, v4, v5, 1);
}

void sub_100059EB8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) manager];

  sub_10008DBF4((uint64_t)v1, 0, 0, 0, 0);
}

void sub_100059FD8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) dndStatus];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10005A068;
  v3[3] = &unk_10023F5B8;
  v3[4] = *(void *)(a1 + 32);
  [v2 fetchAutomaticDNDAssertionWithReply:v3];
}

void sub_10005A068(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  [*(id *)(a1 + 32) setCarDNDActive:a2];
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: updated DND status: %i", "-[WiFiManagerCarSessionMonitor _updateDNDStatus]_block_invoke_2", a2)];
  }
  id v6 = +[WiFiUserInteractionMonitor sharedInstance];
  [v6 setCarModeActive:[*(id *)(a1 + 32) isCarDNDActive]];
}

uint64_t sub_10005A1D4(uint64_t result)
{
  qword_10027D648 = result;
  return result;
}

const __SCPreferences *sub_10005A1E0(const __SCPreferences *prefs)
{
  if (prefs)
  {
    id v1 = prefs;
    if (qword_10027D648) {
      dispatch_assert_queue_V2((dispatch_queue_t)qword_10027D648);
    }
    prefs = (const __SCPreferences *)SCPreferencesLock(v1, 1u);
    if (!prefs)
    {
      SCPreferencesSynchronize(v1);
      prefs = (const __SCPreferences *)SCPreferencesLock(v1, 1u);
      if (!prefs)
      {
        int v2 = SCError();
        uint64_t v3 = SCErrorString(v2);
        if (qword_10027DD68)
        {
          CFTypeRef v5 = "SCError Unavailable";
          if (v3) {
            CFTypeRef v5 = v3;
          }
          [((id)qword_10027DD68) WFLog:4 message:@"SCPreferencesLock() %s"];
        }
        return 0;
      }
    }
  }
  return prefs;
}

uint64_t sub_10005A29C(SCPreferencesRef prefs, int a2)
{
  if (qword_10027D648) {
    dispatch_assert_queue_V2((dispatch_queue_t)qword_10027D648);
  }
  if (a2)
  {
    if (SCPreferencesCommitChanges(prefs))
    {
      if (SCPreferencesApplyChanges(prefs)) {
        goto LABEL_15;
      }
      int v4 = SCError();
      CFTypeRef v5 = SCErrorString(v4);
      if (qword_10027DD68)
      {
        id v7 = "SCError Unavailable";
        if (v5) {
          id v7 = v5;
        }
        [((id)qword_10027DD68) WFLog:4 message:@"SCPreferencesApplyChanges() %s" v7];
      }
    }
    else
    {
      int v8 = SCError();
      uint64_t v9 = SCErrorString(v8);
      if (qword_10027DD68)
      {
        id v10 = "SCError Unavailable";
        if (v9) {
          id v10 = v9;
        }
        [((id)qword_10027DD68) WFLog:4 message:@"SCPreferencesCommitChanges() %s" v10];
      }
    }
  }
LABEL_15:
  uint64_t v11 = SCPreferencesUnlock(prefs);
  if (!v11)
  {
    int v12 = SCError();
    id v13 = SCErrorString(v12);
    if (qword_10027DD68)
    {
      id v15 = "SCError Unavailable";
      if (v13) {
        id v15 = v13;
      }
      [((id)qword_10027DD68) WFLog:4 message:@"SCPreferencesUnlock() %s" v15];
    }
  }
  return v11;
}

__CFArray *sub_10005A3F4(const __CFArray *a1)
{
  return sub_10005A3FC(a1, 0);
}

__CFArray *sub_10005A3FC(const __CFArray *a1, int a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFTypeRef v5 = Mutable;
  if (a1)
  {
    if (Mutable)
    {
      CFIndex Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        CFIndex v7 = Count;
        for (CFIndex i = 0; v7 != i; ++i)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          if (ValueAtIndex)
          {
            if (a2 == 1)
            {
              CFDictionaryRef v10 = sub_1000C5ECC((uint64_t)ValueAtIndex);
LABEL_10:
              CFDictionaryRef v11 = v10;
              if (v10)
              {
                CFArrayAppendValue(v5, v10);
                CFRelease(v11);
              }
              continue;
            }
            if (!a2)
            {
              CFDictionaryRef v10 = sub_10000E5B8((uint64_t)ValueAtIndex);
              goto LABEL_10;
            }
          }
        }
      }
    }
  }
  return v5;
}

__CFArray *sub_10005A4C4(const __CFArray *a1)
{
  return sub_10005A4D0(a1, 0, 0);
}

__CFArray *sub_10005A4D0(const __CFArray *a1, int a2, int a3)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFIndex v7 = Mutable;
  if (a1)
  {
    if (Mutable)
    {
      CFIndex Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        CFIndex v9 = Count;
        for (CFIndex i = 0; i != v9; ++i)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          if (ValueAtIndex)
          {
            int v12 = sub_100019658((int)kCFAllocatorDefault, ValueAtIndex);
            if (v12)
            {
              id v13 = v12;
              if (a2 != a3)
              {
                float v14 = (float)(int)sub_1000C6FC0((uint64_t)v12, @"RSSI") + 77.5;
                float v15 = fabsf(sqrtf((float)(v14 * v14) + 450.0));
                double v16 = (float)((float)(v14 / (float)(v15 + v15)) + 0.5);
                sub_1000C73B0((uint64_t)v13, @"ScaledRSSI", v16);
                sub_1000C73B0((uint64_t)v13, @"ScaledRate", 1.0);
                sub_1000C73B0((uint64_t)v13, @"Strength", v16);
              }
              CFArrayAppendValue(v7, v13);
              CFRelease(v13);
            }
          }
        }
      }
    }
  }
  return v7;
}

__CFArray *sub_10005A660(const __CFArray *a1)
{
  if (!a1) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0; i != v4; ++i)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        if (ValueAtIndex)
        {
          CFIndex v7 = ValueAtIndex;
          if (sub_10001EBB4((uint64_t)ValueAtIndex)) {
            CFArrayAppendValue(Mutable, v7);
          }
        }
      }
    }
    if (!CFArrayGetCount(Mutable))
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

CFMutableArrayRef sub_10005A720(const __CFDictionary *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (Mutable) {
    CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_10005A784, Mutable);
  }
  return Mutable;
}

void sub_10005A784(int a1, const void *a2, CFMutableArrayRef theArray)
{
}

CFMutableArrayRef sub_10005A78C(const __CFSet *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (Mutable) {
    CFSetApplyFunction(a1, (CFSetApplierFunction)sub_10005A7F0, Mutable);
  }
  return Mutable;
}

void sub_10005A7F0(void *value, CFMutableArrayRef theArray)
{
}

CFMutableSetRef sub_10005A800(const __CFArray *a1)
{
  CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  if (Mutable)
  {
    v4.CFIndex length = CFArrayGetCount(a1);
    v4.id location = 0;
    CFArrayApplyFunction(a1, v4, (CFArrayApplierFunction)sub_10005A874, Mutable);
  }
  return Mutable;
}

void sub_10005A874(void *value, CFMutableSetRef theSet)
{
}

float sub_10005A884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float result = (float)(a1 - a2) / (float)(a3 - a2);
  if (result > 1.0) {
    float result = 1.0;
  }
  if (result < 0.0) {
    return 0.0;
  }
  return result;
}

void sub_10005A8B4(__CFDictionary *a1, const void *a2, double a3)
{
  double valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionarySetValue(a1, a2, v5);
    CFRelease(v6);
  }
}

BOOL sub_10005A924(uint64_t a1, CFTypeRef cf)
{
  return cf && CFGetTypeID(cf) == a1;
}

uint64_t sub_10005A964()
{
  return __SC_CFMachPortCreateWithPort("WiFiManager/base");
}

const char *sub_10005A970(unsigned int a1)
{
  if (a1 > 4) {
    return "UNKNOWN";
  }
  else {
    return off_10023F5D8[a1];
  }
}

double sub_10005A994()
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v1.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v1, 0);
  return (double)v1.tv_usec + (double)v1.tv_sec * 1000000.0;
}

uint64_t sub_10005A9E0(unsigned __int16 *a1)
{
  uint64_t v1 = 0;
  while (*(unsigned __int16 *)&byte_1001CB3D0[v1] != *a1 || byte_1001CB3D0[v1 + 2] != *((unsigned __int8 *)a1 + 2))
  {
    v1 += 3;
    if (v1 == 33) {
      return 0;
    }
  }
  return 1;
}

NSDate *sub_10005AA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = objc_alloc_init((Class)NSAutoreleasePool);
  CFDictionaryRef v10 = objc_opt_new();
  [v10 setHour:a2];
  [v10 setMinute:a3];
  [v10 setSecond:a4];
  CFDictionaryRef v11 = [+[NSCalendar currentCalendar] nextDateAfterDate:a1 matchingComponents:v10 options:1024];
  int v12 = v11;
  if (v11) {
    id v13 = v11;
  }

  [v9 drain];
  return v12;
}

void *sub_10005AAF4(void *a1, unint64_t a2, unint64_t a3)
{
  if (is_mul_ok(a2, a3))
  {
    size_t v5 = a2 * a3;
    return malloc_type_realloc(a1, v5, 0x939E6BCFuLL);
  }
  else
  {
    *__error() = 12;
    return 0;
  }
}

CFStringRef sub_10005AB40(int a1)
{
  switch(a1)
  {
    case 1000:
      CFStringRef result = @"Trigger Disconnect";
      break;
    case 1001:
      CFStringRef result = @"Client Disconnect";
      break;
    case 1002:
      CFStringRef result = @"Temporarily Disabled";
      break;
    case 1003:
      CFStringRef result = @"Network Changed";
      break;
    case 1004:
      CFStringRef result = @"Decryption Failure";
      break;
    case 1005:
      CFStringRef result = @"Not Primary Interface";
      break;
    case 1006:
      CFStringRef result = @"CLTM";
      break;
    case 1007:
      CFStringRef result = @"Internet Sharing";
      break;
    case 1008:
      CFStringRef result = @"User Preference";
      break;
    case 1009:
      CFStringRef result = @"Misc.";
      break;
    case 1010:
      CFStringRef result = @"EAP Restart";
      break;
    case 1011:
      CFStringRef result = @"Control Center/3rd Party Client";
      break;
    case 1012:
      CFStringRef result = @"802.1X Failure";
      break;
    case 1013:
      CFStringRef result = @"Network Transition";
      break;
    case 1014:
      CFStringRef result = @"Auto Unlock";
      break;
    case 1015:
      CFStringRef result = @"Captive";
      break;
    case 1016:
      CFStringRef result = @"Banner Association";
      break;
    case 1017:
      CFStringRef result = @"BSS Steering";
      break;
    case 1018:
      CFStringRef result = @"Auto Hotspot Association";
      break;
    case 1019:
      CFStringRef result = @"Auto Hotspot Transition";
      break;
    case 1020:
      CFStringRef result = @"Perf Roam";
      break;
    case 1021:
      CFStringRef result = @"CarPlay Disabled";
      break;
    case 1022:
      CFStringRef result = @"Battery Save Mode Enabled";
      break;
    case 1023:
      CFStringRef result = @"AirPlay Started";
      break;
    case 1024:
      CFStringRef result = @"Prefer 6E Off";
      break;
    case 1025:
      CFStringRef result = @"Prefer 6E On";
      break;
    default:
      int v2 = a1 - 1;
      CFStringRef result = @"Deauth";
      switch(v2)
      {
        case 0:
          return result;
        case 1:
          CFStringRef result = @"Beacon Lost";
          break;
        case 2:
          CFStringRef result = @"Internal Error";
          break;
        case 3:
          CFStringRef result = @"System Sleep";
          break;
        case 4:
          CFStringRef result = @"Powered Off";
          break;
        case 5:
          CFStringRef result = @"Join Failure";
          break;
        case 6:
          CFStringRef result = @"Colocated scope transition";
          break;
        case 7:
          CFStringRef result = @"Disassociate";
          break;
        case 8:
          CFStringRef result = @"Invalid SSID";
          break;
        default:
          CFStringRef result = @"Unknown";
          break;
      }
      break;
  }
  return result;
}

CFStringRef sub_10005ADD0(unsigned int a1)
{
  if (a1 < 9 && ((0x117u >> a1) & 1) != 0) {
    return off_10023F600[a1];
  }
  CFStringRef v1 = @"Unknown";
  if ((~a1 & 3) == 0) {
    CFStringRef v1 = @"STA + AWDL";
  }
  if ((~a1 & 5) == 0) {
    CFStringRef v1 = @"STA + SoftAP";
  }
  if ((~a1 & 6) == 0) {
    CFStringRef v1 = @"AWDL + SoftAP";
  }
  if ((~a1 & 7) == 0) {
    CFStringRef v1 = @"STA + AWDL + SoftAP";
  }
  if ((~a1 & 0xC) == 0) {
    CFStringRef v1 = @"SoftAp + NanPh";
  }
  if ((~a1 & 0xE) != 0) {
    return v1;
  }
  else {
    return @"AWDL + SoftAp + NanPh";
  }
}

CFStringRef sub_10005AE78(unsigned int a1)
{
  if (a1 > 3) {
    return @"Unknown";
  }
  else {
    return off_10023F680[a1];
  }
}

CFStringRef sub_10005AE9C(int a1)
{
  CFStringRef v1 = @"Unknown";
  if (a1 == 2) {
    CFStringRef v1 = @"Not Home";
  }
  if (a1 == 1) {
    return @"Home";
  }
  else {
    return v1;
  }
}

CFStringRef sub_10005AEC8(int a1)
{
  CFStringRef v1 = @"Unknown";
  if (a1 == 2) {
    CFStringRef v1 = @"Not Work";
  }
  if (a1 == 1) {
    return @"Work";
  }
  else {
    return v1;
  }
}

CFStringRef sub_10005AEF4(unsigned int a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_10023F6A0[a1];
  }
}

CFStringRef sub_10005AF18(int a1)
{
  if ((a1 - 1) > 4) {
    return @"Unknown";
  }
  else {
    return off_10023F6B8[a1 - 1];
  }
}

CFStringRef sub_10005AF40(unsigned int a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_10023F6E0[a1];
  }
}

CFStringRef sub_10005AF64(int a1)
{
  CFStringRef v1 = @"Unknown";
  if (a1 == 2) {
    CFStringRef v1 = @"Captive";
  }
  if (a1 == 1) {
    return @"Control Center";
  }
  else {
    return v1;
  }
}

CFStringRef sub_10005AF90(unsigned int a1)
{
  if (a1 > 0xD) {
    return @"Unknown";
  }
  else {
    return off_10023F6F8[a1];
  }
}

CFStringRef sub_10005AFB4(unsigned int a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_10023F768[a1];
  }
}

BOOL sub_10005AFD8()
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  *(_OWORD *)__big = 0u;
  long long v3 = 0u;
  size_t v1 = 255;
  sysctlbyname("kern.wakereason", __big, &v1, 0, 0);
  if (!__big[0]) {
    return 0;
  }
  if (strcasestr(__big, "wlan")) {
    return 1;
  }
  return strcasestr(__big, "wifibt") != 0;
}

CFNumberRef sub_10005B0B8(int a1)
{
  int valuePtr = a1;
  return CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
}

uint64_t sub_10005B104()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_10027D650 = result;
  return result;
}

uint64_t sub_10005B12C(uint64_t a1)
{
  CFErrorRef error = 0;
  long long v2 = *(_OWORD *)(a1 + 36);
  *(_OWORD *)token.val = *(_OWORD *)(a1 + 20);
  *(_OWORD *)&token.val[4] = v2;
  long long v3 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
  long long v4 = v3;
  if (!v3)
  {
LABEL_17:
    uint64_t v8 = 0;
    long long v6 = 0;
    goto LABEL_6;
  }
  CFTypeRef v5 = SecTaskCopyValueForEntitlement(v3, @"com.apple.wifi.manager-access", &error);
  if (!v5)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Client \"%@\" has no entitlement", *(void *)(a1 + 64) message];
    }
    goto LABEL_17;
  }
  long long v6 = v5;
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID == CFGetTypeID(v6) && CFEqual(v6, kCFBooleanTrue))
  {
    uint64_t v8 = 1;
    *(_DWORD *)(a1 + 136) = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
LABEL_6:
  if (error)
  {
    CFRelease(error);
    CFErrorRef error = 0;
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v8;
}

uint64_t sub_10005B254(uint64_t result, int a2)
{
  *(_DWORD *)(result + 136) = a2;
  return result;
}

uint64_t sub_10005B25C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, long long *a7)
{
  mach_port_t previous = -1431655766;
  mach_port_name_t name = 0;
  integer_t port_info_out = -1431655766;
  mach_msg_type_number_t port_info_outCnt = 1;
  if (!a5)
  {
LABEL_25:
    uint64_t v14 = 0;
LABEL_38:
    if (name) {
      mach_port_mod_refs(mach_task_self_, name, 1u, -1);
    }
    if (v14)
    {
      CFRelease((CFTypeRef)v14);
      return 0;
    }
    return v14;
  }
  if (!qword_10027D650) {
    pthread_once(&stru_10027C9E0, (void (*)(void))sub_10005B104);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"Failed to create WiFiClientRef in CFRuntime"];
    }
    goto LABEL_25;
  }
  uint64_t v14 = Instance;
  *(void *)(Instance + 176) = 0;
  *(_OWORD *)(Instance + 144) = 0u;
  *(_OWORD *)(Instance + 160) = 0u;
  *(_OWORD *)(Instance + 112) = 0u;
  *(_OWORD *)(Instance + 128) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_DWORD *)(Instance + 16) = a2;
  *(_DWORD *)(Instance + 96) = a6;
  mach_port_allocate(mach_task_self_, 1u, &name);
  if (mach_port_request_notification(mach_task_self_, name, 70, 1u, name, 0x15u, &previous))
  {
    CFDictionaryRef v33 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_37;
    }
    CFDictionaryRef v34 = "Failed to request MACH_NOTIFY_NO_SENDERS";
LABEL_36:
    [v33 WFLog:4 message:v34];
    goto LABEL_37;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)(v14 + 104) = Mutable;
  if (!Mutable)
  {
    CFDictionaryRef v33 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_37;
    }
    CFDictionaryRef v34 = "Failed to allocate device client backing store";
    goto LABEL_36;
  }
  long long v16 = sub_1000C1E20((uint64_t)kCFAllocatorDefault, a5, name, 0);
  *(void *)(v14 + 88) = v16;
  if (!v16)
  {
    CFDictionaryRef v33 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_37;
    }
    CFDictionaryRef v34 = "Failed to allocate client port";
    goto LABEL_36;
  }
  mach_port_insert_right(mach_task_self_, name, name, 0x14u);
  mach_port_t v17 = mach_task_self_;
  mach_port_name_t v18 = sub_10005B6C8(*(void *)(v14 + 88));
  if (mach_port_get_attributes(v17, v18, 1, &port_info_out, &port_info_outCnt))
  {
    CFDictionaryRef v33 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_37;
    }
    CFDictionaryRef v34 = "Unable to allocate acquire client reply port attributes";
    goto LABEL_36;
  }
  integer_t port_info_out = 64;
  mach_port_t v19 = mach_task_self_;
  mach_port_name_t v20 = sub_10005B6C8(*(void *)(v14 + 88));
  if (mach_port_set_attributes(v19, v20, 1, &port_info_out, port_info_outCnt))
  {
    CFDictionaryRef v33 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFDictionaryRef v34 = "Unable to allocate set client reply port attributes";
      goto LABEL_36;
    }
LABEL_37:
    goto LABEL_38;
  }
  sub_1000C2270(*(void *)(v14 + 88), (uint64_t)sub_10005B6B0, v14);
  *(void *)(v14 + 80) = a3;
  *(_DWORD *)(v14 + 56) = a4;
  *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  buffer[0] = v21;
  buffer[1] = v21;
  if (proc_name(a4, buffer, 0x20u) < 1) {
    CFStringRef v22 = 0;
  }
  else {
    CFStringRef v22 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)buffer, 0x8000100u);
  }
  *(void *)(v14 + 64) = v22;
  CFUUIDRef v23 = CFUUIDCreate(kCFAllocatorDefault);
  *(void *)(v14 + 72) = v23;
  if (!v23) {
    goto LABEL_38;
  }
  CFStringRef v24 = CFUUIDCreateString(kCFAllocatorDefault, v23);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Creating client for \"%@\" (%@)", v22, v24 message];
  }
  if (v24) {
    CFRelease(v24);
  }
  long long v26 = *a7;
  *(_OWORD *)(v14 + 36) = a7[1];
  *(_OWORD *)(v14 + 20) = v26;
  CFMutableDictionaryRef v27 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)(v14 + 120) = v27;
  if (!v27) {
    goto LABEL_38;
  }
  CFMutableArrayRef v28 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v14 + 160) = v28;
  if (!v28) {
    goto LABEL_38;
  }
  CFMutableArrayRef v29 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v14 + 168) = v29;
  if (!v29) {
    goto LABEL_38;
  }
  return v14;
}

void sub_10005B6B0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10005B6B8(uint64_t a1)
{
  return sub_1000C20C8(*(void *)(a1 + 88));
}

uint64_t sub_10005B6C0(uint64_t a1)
{
  return sub_1000C2138(*(void *)(a1 + 88));
}

uint64_t sub_10005B6C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_10005B6D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_10005B6D8(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_10005B6E0(uint64_t a1)
{
  return sub_10005B6C8(*(void *)(a1 + 88));
}

uint64_t sub_10005B6E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_10005B6F0(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

__CFArray *sub_10005B6F8(uint64_t a1, const __CFArray *a2)
{
  long long v4 = *(const void **)(a1 + 112);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 112) = 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFMutableArrayRef v6 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  long long v7 = v6;
  if (!a2 || !v6)
  {
LABEL_14:
    if (!v7) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  CFIndex Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    CFIndex v9 = Count;
    for (CFIndex i = 0; i != v9; ++i)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      if (ValueAtIndex)
      {
        long long v12 = ValueAtIndex;
        uint64_t v13 = sub_100016E18((uint64_t)ValueAtIndex);
        uint64_t v14 = sub_1000680F8(v13);
        if (v14)
        {
          CFArrayRef v15 = v14;
          v21.CFIndex length = CFArrayGetCount(v14);
          v21.id location = 0;
          CFArrayAppendArray(v7, v15, v21);
          if (CFArrayGetCount(v15) >= 1)
          {
            CFIndex v16 = 0;
            do
            {
              CFDictionaryRef v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, v16);
              CFNumberRef Value = CFDictionaryGetValue(v17, @"VIRT_IF_NAME");
              CFDictionaryAddValue(Mutable, Value, v12);
              ++v16;
            }
            while (v16 < CFArrayGetCount(v15));
          }
          CFRelease(v15);
        }
      }
    }
    goto LABEL_14;
  }
LABEL_15:
  CFIndex v19 = CFDictionaryGetCount(Mutable);
  if (v19) {
    CFIndex v19 = (CFIndex)CFRetain(Mutable);
  }
  *(void *)(a1 + 112) = v19;
LABEL_18:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v7;
}

void sub_10005B880(uint64_t a1, const void *a2, const void *a3)
{
  long long v3 = *(__CFDictionary **)(a1 + 112);
  if (v3) {
    CFDictionaryAddValue(v3, a2, a3);
  }
}

void sub_10005B890(uint64_t a1, const void *a2)
{
  long long v2 = *(__CFDictionary **)(a1 + 112);
  if (v2) {
    CFDictionaryRemoveValue(v2, a2);
  }
}

uint64_t sub_10005B8A0(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

void sub_10005B8A8(uint64_t a1, const void *a2, const void *a3)
{
}

void sub_10005B8B0(uint64_t a1, const void *a2)
{
}

uint64_t sub_10005B8B8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_10005B8C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 52) = a2;
  return result;
}

uint64_t sub_10005B8C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 176);
}

uint64_t sub_10005B8D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 176) = a2;
  return result;
}

uint64_t sub_10005B8D8(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

uint64_t sub_10005B8E0(uint64_t a1)
{
  return *(void *)(a1 + 168);
}

void sub_10005B8E8(uint64_t a1, const __CFArray *a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 160))) {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 160));
  }
  if (a2 && CFArrayGetCount(a2))
  {
    long long v4 = *(__CFArray **)(a1 + 160);
    v5.CFIndex length = CFArrayGetCount(a2);
    v5.id location = 0;
    CFArrayAppendArray(v4, a2, v5);
  }
}

void sub_10005B968(uint64_t a1, const __CFArray *a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 168))) {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 168));
  }
  if (a2 && CFArrayGetCount(a2))
  {
    long long v4 = *(__CFArray **)(a1 + 168);
    v5.CFIndex length = CFArrayGetCount(a2);
    v5.id location = 0;
    CFArrayAppendArray(v4, a2, v5);
  }
}

uint64_t sub_10005B9E8(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 128) & 0x20) == 0) {
    return 4294963393;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null notification." :@"WiFiClientDispatchNotification"];
    }
    goto LABEL_33;
  }
  if (!sub_1000DAD40(a2))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null device manager." args:("WiFiClientDispatchNotification")];
    }
LABEL_33:
    return 4294963396;
  }
  uint64_t v5 = sub_1000DAD40(a2);
  uint64_t v6 = sub_100016E18(v5);
  long long v7 = (const void *)sub_100016E20(v6);
  if (!v7)
  {
    CFDataRef v9 = 0;
    goto LABEL_9;
  }
  CFDataRef v8 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, v7);
  CFDataRef v9 = v8;
  if (!v8)
  {
LABEL_9:
    int Length = 0;
    BytePtr = 0;
    goto LABEL_10;
  }
  BytePtr = CFDataGetBytePtr(v8);
  int Length = CFDataGetLength(v9);
LABEL_10:
  uint64_t v10 = sub_1000C2DE8(a2);
  if (v10 && (CFDictionaryRef v11 = sub_10000E5B8(v10)) != 0)
  {
    CFDictionaryRef v12 = v11;
    CFDataRef v13 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, v11);
    CFDataRef v14 = v13;
    if (v13)
    {
      CFArrayRef v15 = CFDataGetBytePtr(v13);
      int v16 = CFDataGetLength(v14);
    }
    else
    {
      CFArrayRef v15 = 0;
      int v16 = 0;
    }
    CFRelease(v12);
  }
  else
  {
    CFDataRef v14 = 0;
    CFArrayRef v15 = 0;
    int v16 = 0;
  }
  CFDictionaryRef v17 = (const void *)sub_100016E20(a2);
  if (!v17)
  {
    CFDataRef v19 = 0;
    goto LABEL_21;
  }
  CFDataRef v18 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, v17);
  CFDataRef v19 = v18;
  if (!v18)
  {
LABEL_21:
    mach_port_name_t v20 = 0;
    int v21 = 0;
    goto LABEL_22;
  }
  mach_port_name_t v20 = CFDataGetBytePtr(v18);
  int v21 = CFDataGetLength(v19);
LABEL_22:
  int v22 = *(_DWORD *)(a1 + 96);
  int v23 = sub_1000DAD38(a2);
  int v24 = sub_1000DAD20(a2);
  sub_10018D748(v22, (vm_address_t)BytePtr, Length, v23, v24, (uint64_t)v15, v16, (uint64_t)v20, v21, 0);
  if (v19) {
    CFRelease(v19);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v9) {
    CFRelease(v9);
  }
  return 0;
}

uint64_t sub_10005BC30(uint64_t a1, int a2)
{
  return sub_10018DC98(*(_DWORD *)(a1 + 96), a2, 0);
}

void sub_10005BC3C(uint64_t a1, uint64_t a2, const void *a3, const __CFArray *a4, int a5)
{
  if (!a3)
  {
    CFDataRef v9 = 0;
LABEL_6:
    BytePtr = 0;
    int Length = 0;
    if (!a4) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  CFDataRef v8 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a3);
  CFDataRef v9 = v8;
  if (!v8) {
    goto LABEL_6;
  }
  BytePtr = CFDataGetBytePtr(v8);
  int Length = CFDataGetLength(v9);
  if (!a4)
  {
LABEL_12:
    sub_10018D868(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 0, 0, a5, 0);
    if (!v9) {
      return;
    }
    goto LABEL_13;
  }
LABEL_7:
  CFDictionaryRef v12 = sub_10005A3F4(a4);
  if (!v12) {
    goto LABEL_12;
  }
  CFDataRef v13 = v12;
  CFDataRef v14 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, v12);
  if (!v14)
  {
    CFRelease(v13);
    goto LABEL_12;
  }
  CFDataRef v15 = v14;
  int v16 = CFDataGetBytePtr(v14);
  int v17 = CFDataGetLength(v15);
  CFRelease(v13);
  sub_10018D868(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, (uint64_t)v16, v17, a5, 0);
  CFRelease(v15);
  if (!v9) {
    return;
  }
LABEL_13:

  CFRelease(v9);
}

void sub_10005BD9C(uint64_t a1, const void *a2, const __CFData *a3, const __CFData *value, const __CFData *a5, int a6)
{
  CFDataRef v8 = value;
  CFDictionaryRef v11 = *(__CFDictionary **)(a1 + 104);
  if (value && a6 == -369033213) {
    CFDictionarySetValue(v11, a2, value);
  }
  else {
    CFDictionaryRemoveValue(v11, a2);
  }
  if (a3 && (CFDataRef v12 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a3), (a3 = v12) != 0))
  {
    BytePtr = CFDataGetBytePtr(v12);
    int Length = CFDataGetLength(a3);
    if (!v8)
    {
LABEL_8:
      int v14 = a6;
      goto LABEL_14;
    }
  }
  else
  {
    BytePtr = 0;
    int Length = 0;
    if (!v8) {
      goto LABEL_8;
    }
  }
  CFDictionaryRef v15 = sub_10000E5B8((uint64_t)v8);
  if (!v15)
  {
    int v14 = a6;
    CFDataRef v8 = 0;
LABEL_14:
    CFDataRef v18 = 0;
    int v19 = 0;
    if (!a5) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  CFDictionaryRef v16 = v15;
  int v14 = a6;
  CFDataRef v17 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, v15);
  CFDataRef v8 = v17;
  if (v17)
  {
    CFDataRef v18 = CFDataGetBytePtr(v17);
    int v19 = CFDataGetLength(v8);
  }
  else
  {
    CFDataRef v18 = 0;
    int v19 = 0;
  }
  CFRelease(v16);
  if (!a5) {
    goto LABEL_20;
  }
LABEL_18:
  CFDataRef v20 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a5);
  a5 = v20;
  if (v20)
  {
    int v21 = CFDataGetBytePtr(v20);
    int v22 = CFDataGetLength(a5);
    goto LABEL_21;
  }
LABEL_20:
  int v21 = 0;
  int v22 = 0;
LABEL_21:
  sub_10018D964(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, (uint64_t)v18, v19, (uint64_t)v21, v22, v14, 0);
  if (v8) {
    CFRelease(v8);
  }
  if (a5) {
    CFRelease(a5);
  }
  if (a3)
  {
    CFRelease(a3);
  }
}

void sub_10005BF94(uint64_t a1, uint64_t a2, const void *a3, int a4, uint64_t a5, const __CFData *a6)
{
  if (!a3) {
    return;
  }
  CFDataRef v10 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a3);
  if (!v10) {
    return;
  }
  CFDataRef v11 = v10;
  if (!a5)
  {
    CFDictionaryRef v13 = 0;
    CFDataRef v15 = 0;
    BytePtr = 0;
    goto LABEL_8;
  }
  CFDictionaryRef v12 = sub_10000E5B8(a5);
  if (v12)
  {
    CFDictionaryRef v13 = v12;
    CFDataRef v14 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, v12);
    if (!v14)
    {
LABEL_17:
      CFRelease(v13);
      goto LABEL_18;
    }
    CFDataRef v15 = v14;
    BytePtr = CFDataGetBytePtr(v14);
    LODWORD(a5) = CFDataGetLength(v15);
LABEL_8:
    CFDictionaryRef v24 = v13;
    if (a6)
    {
      CFDataRef v17 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a6);
      if (!v17) {
        goto LABEL_14;
      }
      a6 = v17;
      int v18 = a4;
      int v19 = CFDataGetBytePtr(v17);
      int Length = CFDataGetLength(a6);
    }
    else
    {
      int v18 = a4;
      int v19 = 0;
      int Length = 0;
    }
    int v21 = *(_DWORD *)(a1 + 96);
    int v22 = CFDataGetBytePtr(v11);
    int v23 = CFDataGetLength(v11);
    sub_10018DA80(v21, (vm_address_t)v22, v23, v18, (uint64_t)BytePtr, a5, (uint64_t)v19, Length, 0);
    CFDictionaryRef v13 = v24;
    if (a6) {
      CFRelease(a6);
    }
LABEL_14:
    if (v15) {
      CFRelease(v15);
    }
    if (!v13) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_18:

  CFRelease(v11);
}

void sub_10005C138(uint64_t a1, uint64_t a2, const void *a3, int a4, const __CFData *a5)
{
  if (!a3) {
    return;
  }
  CFDataRef v8 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a3);
  if (!v8) {
    return;
  }
  CFDataRef v9 = v8;
  if (!a5)
  {
    CFDataRef v11 = 0;
    int v12 = 0;
LABEL_7:
    int v13 = *(_DWORD *)(a1 + 96);
    BytePtr = CFDataGetBytePtr(v9);
    int Length = CFDataGetLength(v9);
    sub_10018DB9C(v13, (vm_address_t)BytePtr, Length, a4, (uint64_t)v11, v12, 0);
    if (a5) {
      CFRelease(a5);
    }
    goto LABEL_9;
  }
  CFDataRef v10 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a5);
  if (v10)
  {
    a5 = v10;
    CFDataRef v11 = CFDataGetBytePtr(v10);
    int v12 = CFDataGetLength(a5);
    goto LABEL_7;
  }
LABEL_9:

  CFRelease(v9);
}

void sub_10005C244(uint64_t a1, uint64_t a2, const void *a3, const __CFArray *a4, int a5)
{
  if (!a3)
  {
    CFDataRef v9 = 0;
LABEL_6:
    BytePtr = 0;
    int Length = 0;
    if (!a4) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  CFDataRef v8 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a3);
  CFDataRef v9 = v8;
  if (!v8) {
    goto LABEL_6;
  }
  BytePtr = CFDataGetBytePtr(v8);
  int Length = CFDataGetLength(v9);
  if (!a4)
  {
LABEL_12:
    sub_10018DD28(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 0, 0, a5, 0);
    if (!v9) {
      return;
    }
    goto LABEL_13;
  }
LABEL_7:
  int v12 = sub_10005A3F4(a4);
  if (!v12) {
    goto LABEL_12;
  }
  int v13 = v12;
  CFDataRef v14 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, v12);
  if (!v14)
  {
    CFRelease(v13);
    goto LABEL_12;
  }
  CFDataRef v15 = v14;
  CFDictionaryRef v16 = CFDataGetBytePtr(v14);
  int v17 = CFDataGetLength(v15);
  CFRelease(v13);
  sub_10018DD28(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, (uint64_t)v16, v17, a5, 0);
  CFRelease(v15);
  if (!v9) {
    return;
  }
LABEL_13:

  CFRelease(v9);
}

void sub_10005C3A4(uint64_t a1, uint64_t a2)
{
  CFArrayRef v4 = *(const __CFArray **)(a1 + 80);
  if (!v4)
  {
    CFDataRef v9 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFDataRef v10 = "Error gettitng manager";
LABEL_13:
      [v9 WFLog:4 message:v10];
    }
LABEL_14:
    goto LABEL_6;
  }
  CFArrayRef v5 = sub_10000500C(v4);
  if (!v5)
  {
    CFDataRef v9 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFDataRef v10 = "Error copying devices";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  CFArrayRef v6 = v5;
  long long v7 = sub_10005B6F8(a1, v5);
  if (v7) {
    CFRelease(v7);
  }
  CFRelease(v6);
LABEL_6:

  sub_10001684C(a1, a2, 2u, 0);
}

void sub_10005C478(uint64_t a1, uint64_t a2)
{
  sub_10001684C(a1, a2, 3u, 0);
  CFArrayRef v3 = *(const __CFArray **)(a1 + 80);
  if (v3)
  {
    CFArrayRef v4 = sub_10000500C(v3);
    if (v4)
    {
      CFArrayRef v5 = v4;
      CFArrayRef v6 = sub_10005B6F8(a1, v4);
      if (v6) {
        CFRelease(v6);
      }
      CFRelease(v5);
      return;
    }
    CFDataRef v8 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFDataRef v9 = "Error copying devices";
      goto LABEL_12;
    }
  }
  else
  {
    CFDataRef v8 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFDataRef v9 = "Error gettitng manager";
LABEL_12:
      [v8 WFLog:4 message:v9];
    }
  }
}

void sub_10005C54C(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  CFArrayRef v6 = *(const __CFArray **)(a1 + 80);
  if (!v6)
  {
    CFDataRef v11 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      int v12 = "Error getting manager";
LABEL_13:
      [v11 WFLog:4 message:v12];
    }
LABEL_14:
    goto LABEL_6;
  }
  CFArrayRef v7 = sub_10000500C(v6);
  if (!v7)
  {
    CFDataRef v11 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      int v12 = "Error copying devices";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  CFArrayRef v8 = v7;
  CFDataRef v9 = sub_10005B6F8(a1, v7);
  if (v9) {
    CFRelease(v9);
  }
  CFRelease(v8);
LABEL_6:

  sub_10001684C(a1, a2, 0x11u, a3);
}

void sub_10005C624(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  if (sub_1000FD8D4(a2)) {
    unsigned int v6 = 44;
  }
  else {
    unsigned int v6 = 18;
  }
  sub_10001684C(a1, a2, v6, a3);
  CFArrayRef v7 = *(const __CFArray **)(a1 + 80);
  if (v7)
  {
    CFArrayRef v8 = sub_10000500C(v7);
    if (v8)
    {
      CFArrayRef v9 = v8;
      CFDataRef v10 = sub_10005B6F8(a1, v8);
      if (v10) {
        CFRelease(v10);
      }
      CFRelease(v9);
      return;
    }
    int v12 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      int v13 = "Error copying devices";
      goto LABEL_15;
    }
  }
  else
  {
    int v12 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      int v13 = "Error getting manager";
LABEL_15:
      [v12 WFLog:4 message:v13];
    }
  }
}

void sub_10005C728(uint64_t a1, uint64_t a2, const void *a3, const void *a4, int a5)
{
  if (!a3)
  {
    CFDataRef v9 = 0;
LABEL_6:
    BytePtr = 0;
    int Length = 0;
    if (!a4) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  CFDataRef v8 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a3);
  CFDataRef v9 = v8;
  if (!v8) {
    goto LABEL_6;
  }
  BytePtr = CFDataGetBytePtr(v8);
  int Length = CFDataGetLength(v9);
  if (!a4)
  {
LABEL_10:
    sub_10018DE24(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 0, 0, a5, 0);
    if (!v9) {
      return;
    }
    goto LABEL_11;
  }
LABEL_7:
  CFDataRef v12 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a4);
  if (!v12) {
    goto LABEL_10;
  }
  CFDataRef v13 = v12;
  CFDataRef v14 = CFDataGetBytePtr(v12);
  int v15 = CFDataGetLength(v13);
  sub_10018DE24(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, (uint64_t)v14, v15, a5, 0);
  CFRelease(v13);
  if (!v9) {
    return;
  }
LABEL_11:

  CFRelease(v9);
}

void sub_10005C858(uint64_t a1, uint64_t a2, void *key, const void *a4)
{
  uint64_t valuePtr = 0;
  if (a1 && a2 && key)
  {
    CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 120);
    if (v6)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v6, key);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr);
        if ((valuePtr & 0x1000000) != 0)
        {
          if ((*(unsigned char *)(a1 + 52) & 0x10) == 0)
          {
            CFDataRef v9 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, key);
            CFDataRef v10 = v9;
            if (v9)
            {
              BytePtr = CFDataGetBytePtr(v9);
              int Length = CFDataGetLength(v10);
              if (!a4) {
                goto LABEL_18;
              }
            }
            else
            {
              BytePtr = 0;
              int Length = 0;
              if (!a4) {
                goto LABEL_18;
              }
            }
            CFDataRef v14 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a4);
            if (v14)
            {
              CFDataRef v15 = v14;
              CFDictionaryRef v16 = CFDataGetBytePtr(v14);
              int v17 = CFDataGetLength(v15);
              sub_100016FCC(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 24, (uint64_t)v16, v17, 0);
              CFRelease(v15);
              if (!v10) {
                return;
              }
LABEL_19:
              CFRelease(v10);
              return;
            }
LABEL_18:
            sub_100016FCC(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 24, 0, 0, 0);
            if (!v10) {
              return;
            }
            goto LABEL_19;
          }
          if (qword_10027DD68) {
            [qword_10027DD68 WFLog:message:4, @"Already ranging, will not dispatch report."];
          }
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null deviceEventMasks", @"WiFiClientDispatchRangingReportEvent", valuePtr];
      }
    }
  }
}

void sub_10005CA38(uint64_t a1, uint64_t a2, void *key, const void *a4)
{
  uint64_t valuePtr = 0;
  if (a1 && a2 && key)
  {
    CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 120);
    if (v6)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v6, key);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr);
        if ((valuePtr & 0x400000000000) != 0)
        {
          CFDataRef v9 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, key);
          CFDataRef v10 = v9;
          if (v9)
          {
            BytePtr = CFDataGetBytePtr(v9);
            int Length = CFDataGetLength(v10);
            if (!a4) {
              goto LABEL_14;
            }
          }
          else
          {
            BytePtr = 0;
            int Length = 0;
            if (!a4) {
              goto LABEL_14;
            }
          }
          CFDataRef v13 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a4);
          if (v13)
          {
            CFDataRef v14 = v13;
            CFDataRef v15 = CFDataGetBytePtr(v13);
            int v16 = CFDataGetLength(v14);
            sub_100016FCC(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 46, (uint64_t)v15, v16, 0);
            CFRelease(v14);
            if (!v10) {
              return;
            }
LABEL_15:
            CFRelease(v10);
            return;
          }
LABEL_14:
          sub_100016FCC(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 46, 0, 0, 0);
          if (!v10) {
            return;
          }
          goto LABEL_15;
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, @"%s: null deviceEventMasks", @"WiFiClientDispatchTdConfirmedEvent", valuePtr];
      }
    }
  }
}

void sub_10005CBDC(uint64_t a1, uint64_t a2, void *key, const void *a4)
{
  uint64_t valuePtr = 0;
  if (a1 && a2 && key)
  {
    CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 120);
    if (v6)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v6, key);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr);
        if ((valuePtr & 0x400000) != 0)
        {
          CFDataRef v9 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, key);
          CFDataRef v10 = v9;
          if (v9)
          {
            BytePtr = CFDataGetBytePtr(v9);
            int Length = CFDataGetLength(v10);
            if (!a4) {
              goto LABEL_14;
            }
          }
          else
          {
            BytePtr = 0;
            int Length = 0;
            if (!a4) {
              goto LABEL_14;
            }
          }
          CFDataRef v13 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a4);
          if (v13)
          {
            CFDataRef v14 = v13;
            CFDataRef v15 = CFDataGetBytePtr(v13);
            int v16 = CFDataGetLength(v14);
            sub_100016FCC(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 22, (uint64_t)v15, v16, 0);
            CFRelease(v14);
            if (!v10) {
              return;
            }
LABEL_15:
            CFRelease(v10);
            return;
          }
LABEL_14:
          sub_100016FCC(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 22, 0, 0, 0);
          if (!v10) {
            return;
          }
          goto LABEL_15;
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, "%s: null deviceEventMasks", "WiFiClientDispatchVirtInterfaceStateChangeEvent", valuePtr];
      }
    }
  }
}

void sub_10005CD80(uint64_t a1, uint64_t a2)
{
}

void sub_10005CD8C(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_10005CD98(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_10005CDA4(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_10005CDB0(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_10005CDBC(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_10005CDC8(uint64_t a1, uint64_t a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  sub_10001684C(a1, a2, 6u, a3);
  sub_10001684C(a1, a2, 7u, a3);

  sub_10001684C(a1, a2, 8u, a4);
}

void sub_10005CE3C(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_10005CE48(uint64_t a1, uint64_t a2)
{
}

void sub_10005CE54(uint64_t a1, int a2, uint64_t a3)
{
  BOOL valuePtr = a2 != 0;
  CFDictionaryRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  sub_10001684C(a1, a3, 0xCu, v5);
  if (v5) {
    CFRelease(v5);
  }
}

void sub_10005CED0(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_10005CEDC(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_10005CEE8(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_10005CEF4(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_10005CF00(uint64_t a1, uint64_t a2, int a3)
{
  CFArrayRef v3 = (const __CFDictionary **)&kCFBooleanTrue;
  if (!a3) {
    CFArrayRef v3 = (const __CFDictionary **)&kCFBooleanFalse;
  }
  sub_10001684C(a1, a2, 0x26u, *v3);
}

void sub_10005CF24(uint64_t a1, uint64_t a2, int a3)
{
  int valuePtr = a3;
  CFDictionaryRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    CFDictionaryRef v6 = v5;
    sub_10001684C(a1, a2, 0x27u, v5);
    CFRelease(v6);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: Could not allocate M1M4Handshake24GHzCountRef", "WiFiClientDispatchM1M4Handshake24GHzCountEvent"];
    }
  }
}

void sub_10005CFD8(uint64_t a1, uint64_t a2, int a3)
{
  int valuePtr = a3;
  CFDictionaryRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    CFDictionaryRef v6 = v5;
    sub_10001684C(a1, a2, 0x25u, v5);
    CFRelease(v6);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Could not allocate numRef", "WiFiClientDispatchCarPlayNetworkTypeChangeEvent")
    }
  }
}

void sub_10005D08C(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_10005D098(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_10005D0A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a3)
  {
    CFDictionaryRef v6 = sub_10000E5B8(a3);
    if (v6)
    {
      CFDictionaryRef v7 = v6;
      CFDataRef v8 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, v6);
      if (v8)
      {
        CFDataRef v9 = v8;
        BytePtr = CFDataGetBytePtr(v8);
        int Length = CFDataGetLength(v9);
        sub_10018DF20(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, a4, 0);
        CFRelease(v9);
      }
      CFRelease(v7);
    }
  }
}

uint64_t sub_10005D160(uint64_t result, uint64_t a2)
{
  *(void *)(result + 128) = a2;
  return result;
}

uint64_t sub_10005D168(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

void sub_10005D170(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t valuePtr = a4;
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
  CFNumberRef v7 = v6;
  if (a3 && v6)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 120), a3, v6);
LABEL_4:
    CFRelease(v7);
    return;
  }
  if (v6) {
    goto LABEL_4;
  }
}

uint64_t sub_10005D1EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 144) = a2;
  *(void *)(result + 152) = a3;
  return result;
}

void sub_10005D1F4(uint64_t a1)
{
  if (*(void *)(a1 + 144))
  {
    CFRetain((CFTypeRef)a1);
    uint64_t v2 = *(void *)(a1 + 88);
    if (v2) {
      sub_1000C2270(v2, 0, 0);
    }
    (*(void (**)(uint64_t, void))(a1 + 144))(a1, *(void *)(a1 + 152));
    CFRelease((CFTypeRef)a1);
  }
}

void sub_10005D260(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_10005D26C(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

CFStringRef sub_10005D278(const __CFString *result)
{
  if (result)
  {
    uint64_t result = (const __CFString *)result[2].isa;
    if (result) {
      return (const __CFString *)(CFEqual(result, @"SpringBoard"));
    }
  }
  return result;
}

CFStringRef sub_10005D2B4(const __CFString *result)
{
  if (result)
  {
    uint64_t result = (const __CFString *)result[2].isa;
    if (result) {
      return (const __CFString *)(CFStringCompare(result, @"Preferences", 1uLL) == kCFCompareEqualTo);
    }
  }
  return result;
}

CFStringRef sub_10005D2F0(const __CFString *result)
{
  if (result)
  {
    uint64_t result = (const __CFString *)result[2].isa;
    if (result) {
      return (const __CFString *)(CFStringCompare(result, @"mobilewifitool", 1uLL) == kCFCompareEqualTo);
    }
  }
  return result;
}

CFStringRef sub_10005D32C(const __CFString *result)
{
  if (result)
  {
    uint64_t result = (const __CFString *)result[2].isa;
    if (result) {
      return (const __CFString *)(CFStringCompare(result, @"sharingd", 1uLL) == kCFCompareEqualTo);
    }
  }
  return result;
}

CFStringRef sub_10005D368(const __CFString *result)
{
  if (result)
  {
    uint64_t result = (const __CFString *)result[2].isa;
    if (result) {
      return (const __CFString *)(CFStringCompare(result, @"PersonalHotspotControlExtension", 1uLL) == kCFCompareEqualTo);
    }
  }
  return result;
}

void sub_10005D3A4(uint64_t a1, int a2, const void *a3)
{
  if ((*(unsigned char *)(a1 + 131) & 4) != 0)
  {
    if (a3)
    {
      CFDataRef v5 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a3);
      CFDataRef v6 = v5;
      if (v5)
      {
        BytePtr = CFDataGetBytePtr(v5);
        int Length = CFDataGetLength(v6);
      }
      else
      {
        BytePtr = 0;
        int Length = 0;
      }
    }
    else
    {
      BytePtr = 0;
      int Length = 0;
      CFDataRef v6 = 0;
    }
    sub_10018DFF0(*(_DWORD *)(a1 + 96), a2, (vm_address_t)BytePtr, Length, 0);
    if (v6)
    {
      CFRelease(v6);
    }
  }
}

uint64_t sub_10005D468(uint64_t a1, int a2)
{
  return sub_10018E190(*(_DWORD *)(a1 + 96), a2, 0);
}

void sub_10005D474(uint64_t a1, const void *a2)
{
  if ((*(unsigned char *)(a1 + 131) & 0x20) != 0)
  {
    if (a2 && (CFDataRef v3 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a2)) != 0)
    {
      CFDataRef v4 = v3;
      BytePtr = CFDataGetBytePtr(v3);
      int Length = CFDataGetLength(v4);
      sub_10018E0C0(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 0);
      CFRelease(v4);
    }
    else
    {
      int v7 = *(_DWORD *)(a1 + 96);
      sub_10018E0C0(v7, 0, 0, 0);
    }
  }
}

void sub_10005D538(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

void sub_10005D544(uint64_t a1, const void *a2)
{
  if ((*(unsigned char *)(a1 + 132) & 2) != 0)
  {
    CFDataRef v3 = (const __CFData *)sub_100016E34(kCFAllocatorDefault, a2);
    if (v3)
    {
      CFDataRef v4 = v3;
      BytePtr = CFDataGetBytePtr(v3);
      int Length = CFDataGetLength(v4);
      sub_10018E220(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 0);
      CFRelease(v4);
    }
    else
    {
      int v7 = *(_DWORD *)(a1 + 96);
      sub_10018E220(v7, 0, 0, 0);
    }
  }
}

void sub_10005D604(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
}

BOOL sub_10005D610(uint64_t a1, const __CFString *a2)
{
  CFErrorRef error = 0;
  long long v3 = *(_OWORD *)(a1 + 36);
  *(_OWORD *)v11.val = *(_OWORD *)(a1 + 20);
  *(_OWORD *)&v11.val[4] = v3;
  CFDataRef v4 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &v11);
  if (v4)
  {
    CFDataRef v5 = v4;
    CFDataRef v6 = (__SecTask *)SecTaskCopyValueForEntitlement(v4, a2, &error);
    if (v6)
    {
      int v7 = v6;
      CFTypeID TypeID = CFBooleanGetTypeID();
      BOOL v9 = TypeID == CFGetTypeID(v7) && CFEqual(v7, kCFBooleanTrue) != 0;
      CFRelease(v5);
    }
    else
    {
      BOOL v9 = 0;
      int v7 = v5;
    }
    CFRelease(v7);
  }
  else
  {
    BOOL v9 = 0;
  }
  if (error) {
    CFRelease(error);
  }
  return v9;
}

void sub_10005D6F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2)
  {
    unsigned int v3 = sub_10005B6C8(v2);
    sub_1000C22D8(v3);
    uint64_t v2 = *(void *)(a1 + 88);
  }
  sub_1000C2138(v2);
  mach_port_name_t v4 = *(_DWORD *)(a1 + 96);
  if (v4) {
    mach_port_deallocate(mach_task_self_, v4);
  }
  CFDataRef v5 = *(const void **)(a1 + 112);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 112) = 0;
  }
  CFDataRef v6 = *(const void **)(a1 + 120);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 120) = 0;
  }
  CFStringRef v7 = CFUUIDCreateString(kCFAllocatorDefault, *(CFUUIDRef *)(a1 + 72));
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Removing client for \"%@\" (%@)", *(void *)(a1 + 64), v7 message];
  }
  if (v7) {
    CFRelease(v7);
  }
  BOOL v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 64) = 0;
  }
  CFDataRef v10 = *(const void **)(a1 + 72);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 72) = 0;
  }
  audit_token_t v11 = *(const void **)(a1 + 104);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 104) = 0;
  }
  CFDataRef v12 = *(const void **)(a1 + 160);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 160) = 0;
  }
  CFDataRef v13 = *(const void **)(a1 + 168);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 168) = 0;
  }
}

CFStringRef sub_10005D824(void *cf)
{
  if (!cf) {
    return @"Invalid client ref";
  }
  uint64_t v2 = qword_10027D650;
  if (!qword_10027D650)
  {
    pthread_once(&stru_10027C9E0, (void (*)(void))sub_10005B104);
    uint64_t v2 = qword_10027D650;
  }
  if (v2 == CFGetTypeID(cf)) {
    return CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@: pid=%d uuid=%@ type=%d", cf[8], *((unsigned int *)cf + 14), cf[9], *((unsigned int *)cf + 4));
  }
  else {
    return @"Invalid client ref";
  }
}

void sub_10005D8D0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 180);
  if (v2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "link recovery from SSID transition did finish within %d seconds ", 4);
    }
    *(_WORD *)(*(void *)(a1 + 32) + 180) = 0;
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "link recovery did not complete within %d seconds, dispatching link down event to SpringBoard", 4);
    }
    uint64_t v5 = *(void *)(a1 + 32);
    vm_address_t v4 = *(void *)(a1 + 40);
    *(unsigned char *)(v5 + 181) = 0;
    int v6 = *(_DWORD *)(v5 + 96);
    int v7 = *(_DWORD *)(a1 + 48);
    uint64_t v8 = *(unsigned int *)(a1 + 72);
    uint64_t v9 = *(void *)(a1 + 56);
    int v10 = *(_DWORD *)(a1 + 64);
    sub_100016FCC(v6, v4, v7, v8, v9, v10, 0);
  }
}

uint64_t sub_10005D9B4(uint64_t a1)
{
  if (qword_10027D658)
  {
    CFRelease((CFTypeRef)qword_10027D658);
    qword_10027D658 = 0;
  }
  if (qword_10027D660)
  {
    CFRelease((CFTypeRef)qword_10027D660);
    qword_10027D660 = 0;
  }
  CFDictionaryRef v2 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), (CFStringRef)qword_10027D668);
  CFDictionaryRef v3 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), (CFStringRef)qword_10027D670);
  CFDictionaryRef v4 = v3;
  if (!v2)
  {
    uint64_t v6 = 0;
    qword_10027D658 = 0;
    if (v3) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
  CFNumberRef Value = CFDictionaryGetValue(v2, kSCDynamicStorePropNetPrimaryInterface);
  qword_10027D658 = (uint64_t)Value;
  if (!Value)
  {
    uint64_t v6 = 0;
    if (v4) {
      goto LABEL_10;
    }
LABEL_16:
    qword_10027D660 = 0;
    goto LABEL_17;
  }
  uint64_t v6 = CFEqual(Value, *(CFTypeRef *)(a1 + 112)) != 0;
  CFRetain((CFTypeRef)qword_10027D658);
  if (!v4) {
    goto LABEL_16;
  }
LABEL_10:
  int v7 = CFDictionaryGetValue(v4, kSCDynamicStorePropNetPrimaryInterface);
  qword_10027D660 = (uint64_t)v7;
  if (v7)
  {
    if (CFEqual(v7, *(CFTypeRef *)(a1 + 112))) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v6;
    }
    CFRetain((CFTypeRef)qword_10027D660);
  }
LABEL_17:
  if (qword_10027DD68)
  {
    uint64_t v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"IP", +[NSString stringWithFormat:@"IPv4 Primary interface is %@ and IPv6 Primary Interface is %@", qword_10027D658, qword_10027D660]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buuint64_t f = 136446210;
      CFDataRef v12 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v9 UTF8String]] UTF8String];
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v6;
}

const void *sub_10005DC04(int a1, CFDictionaryRef theDict)
{
  if (theDict) {
    return CFDictionaryGetValue(theDict, kSCDynamicStorePropNetPrimaryInterface);
  }
  else {
    return 0;
  }
}

BOOL sub_10005DC28(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4296)) {
    BOOL v2 = (unsigned __int16)*(_DWORD *)(a1 + 4296) == 65193;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = v2;
  if (qword_10027DD68)
  {
    if (v3) {
      uint64_t v5 = "%s: interface is IPv4 not routable";
    }
    else {
      uint64_t v5 = "%s: interface is IPv4 routable";
    }
    [qword_10027DD68 WFLog:3 message:v5, "WiFiDeviceIsInterfaceRoutable"];
  }
  uint64_t v6 = (unsigned char *)(a1 + 4300);
  if (*(unsigned char *)(a1 + 4300))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: interface is IPv6 routable", "WiFiDeviceIsInterfaceRoutable")];
    }
  }
  return !v3 || *v6 != 0;
}

BOOL sub_10005DD18(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4296)) {
    BOOL v1 = (unsigned __int16)*(_DWORD *)(a1 + 4296) == 65193;
  }
  else {
    BOOL v1 = 1;
  }
  return !v1;
}

uint64_t sub_10005DD34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4300);
}

BOOL sub_10005DD40(uint64_t a1)
{
  return *(unsigned char *)(a1 + 4312) == 0;
}

void sub_10005DD54(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7)
{
  __int16 v34 = a7;
  if (a1)
  {
    CFAllocatorRef v12 = kCFAllocatorDefault;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      CFMutableDictionaryRef v14 = Mutable;
      switch(a4)
      {
        case 2u:
          int v15 = 1;
          goto LABEL_12;
        case 3u:
          int v15 = 2;
          goto LABEL_12;
        case 4u:
          int v15 = 3;
          goto LABEL_12;
        case 5u:
          int v15 = 5;
          goto LABEL_12;
        case 6u:
          int v15 = 6;
          goto LABEL_12;
        case 7u:
          int v15 = 7;
          goto LABEL_12;
        case 8u:
          int v15 = 8;
LABEL_12:
          unsigned int valuePtr = v15;
          break;
        default:
          unsigned int valuePtr = 0;
          break;
      }
      int v16 = *(_DWORD *)(a1 + 5940);
      if ((v16 & a6) != 0)
      {
        int v18 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          CFStringRef v19 = sub_10005AE78(a6);
          [v18 WFLog:4, "%s: Clearing roam offset %@(%d) for %@", "WiFiDeviceSetRoamParams", v19, a6, sub_10001A43C(a3) message];
        }
        int v16 = *(_DWORD *)(a1 + 5940);
      }
      if ((v16 & a5) != 0)
      {
        int v21 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          CFStringRef v22 = sub_10005AE78(a5);
          [v21 WFLog:4, "%s: Setting roam offset %@(%d) for %@", "WiFiDeviceSetRoamParams", v22, a5, sub_10001A43C(a3) message];
        }
        int v16 = *(_DWORD *)(a1 + 5940);
        CFAllocatorRef v12 = kCFAllocatorDefault;
      }
      *(_DWORD *)(a1 + 5940) = v16 & ~a6 | a5;
      CFNumberRef v23 = CFNumberCreate(v12, kCFNumberIntType, &valuePtr);
      if (!v23)
      {
LABEL_36:
        CFRelease(v14);
        return;
      }
      CFNumberRef v24 = v23;
      CFDictionarySetValue(v14, @"IO80211InterfaceRoamProfile", v23);
      int v25 = *(_DWORD *)(a1 + 5940);
      if (v25)
      {
        CFDictionarySetValue(v14, @"IO80211InterfaceRoamProfilePoorLinkQuality", kCFBooleanTrue);
        int v25 = *(_DWORD *)(a1 + 5940);
      }
      if ((v25 & 2) != 0)
      {
        if (!a7)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: motionRssiDelta is 0. Exiting!"];
          }
          CFNumberRef v26 = 0;
LABEL_35:
          CFRelease(v24);
          CFRelease(v14);
          CFMutableDictionaryRef v14 = v26;
          if (!v26) {
            return;
          }
          goto LABEL_36;
        }
        CFDictionarySetValue(v14, @"IO80211InterfaceRoamProfileMotion", kCFBooleanTrue);
        CFNumberRef v26 = CFNumberCreate(v12, kCFNumberIntType, &v34);
        if (!v26) {
          goto LABEL_35;
        }
        CFDictionarySetValue(v14, @"IO80211InterfaceRoamProfileMotionRssiDelta", v26);
      }
      else
      {
        CFNumberRef v26 = 0;
      }
      if (a4 <= 8 && ((1 << a4) & 0x150) != 0) {
        CFDictionarySetValue(v14, @"IO80211InterfaceRoamMultiAP", kCFBooleanTrue);
      }
      CFMutableArrayRef v28 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFMutableArrayRef v29 = sub_10001A43C(a3);
        CFStringRef v30 = sub_10001CC9C(a4);
        [v28 WFLog:3, "%s: setting roam profile for %@ to type %@(%d) with offsets %@(0x%x)", "WiFiDeviceSetRoamParams", v29, v30, valuePtr, sub_10005AE78(*(_DWORD *)(a1 + 5940)), *(unsigned int *)(a1 + 5940) message];
      }
      sub_100017D28(a1, *(const void **)(a1 + 112), 531, 0, (uint64_t)v14);
      *(_DWORD *)(a1 + 5944) = a4;
      goto LABEL_35;
    }
  }
}

void sub_10005E11C(uint64_t a1, const __CFString *a2)
{
  uint64_t valuePtr = 0;
  uint64_t v133 = 0;
  *(_DWORD *)bytes = 0;
  __int16 v132 = 0;
  CFAllocatorRef v5 = kCFAllocatorDefault;
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(kCFAllocatorDefault, a2, @"/");
  if (CFArrayGetCount(ArrayBySeparatingStrings) == 5)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3);
    if (!ValueAtIndex) {
      goto LABEL_184;
    }
    uint64_t v8 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 4);
    if (v8)
    {
      if (CFEqual(v8, kSCEntNetIPv4))
      {
        CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainSetup, ValueAtIndex, kSCEntNetInterface);
        if (NetworkServiceEntity)
        {
          CFStringRef v10 = NetworkServiceEntity;
          CFDictionaryRef v11 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), NetworkServiceEntity);
          if (!v11)
          {
            CFStringRef ValueAtIndex = 0;
            CFNumberRef v63 = 0;
            CFDictionaryRef v126 = 0;
            CFDictionaryRef v127 = 0;
            CFStringRef v117 = 0;
LABEL_167:
            CFRelease(v10);
            if (!ArrayBySeparatingStrings) {
              goto LABEL_169;
            }
            goto LABEL_168;
          }
          CFDictionaryRef v12 = v11;
          CFNumberRef Value = CFDictionaryGetValue(v11, kSCPropNetInterfaceDeviceName);
          CFDictionaryRef cf = v12;
          if (!Value || (CFNumberRef v118 = Value, !CFEqual(*(CFTypeRef *)(a1 + 112), Value)))
          {
            CFStringRef v117 = 0;
            CFDictionaryRef v126 = 0;
            CFDictionaryRef v127 = 0;
            CFNumberRef v63 = 0;
            CFStringRef ValueAtIndex = 0;
            goto LABEL_166;
          }
          CFStringRef v122 = v10;
          CFArrayRef v123 = ArrayBySeparatingStrings;
          CFNumberRef v124 = v4;
          int v15 = &objc_retainAutoreleaseReturnValue_ptr;
          if (qword_10027DD68)
          {
            int v16 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@+} %@", @"IP", +[NSString stringWithFormat:@"IPV4 State change for %@", *(void *)(a1 + 112)]) UTF8String]);
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buuint64_t f = 136446210;
              *(void *)&uint8_t buf[4] = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v16 UTF8String]] UTF8String];
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            }
          }
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (!Mutable)
          {
            CFStringRef v117 = 0;
            CFDictionaryRef v126 = 0;
            CFDictionaryRef v127 = 0;
            CFNumberRef v63 = 0;
            CFStringRef ValueAtIndex = 0;
            CFStringRef v10 = v122;
            goto LABEL_166;
          }
          int v18 = Mutable;
          CFStringRef v19 = (unsigned char *)(a1 + 4300);
          CFDictionaryRef v20 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), a2);
          CFDictionaryRef v21 = v20;
          if (!v20)
          {
            CFDictionaryRef v127 = 0;
            CFStringRef v128 = 0;
            CFNumberRef v63 = 0;
            unint64_t v120 = 0;
            CFStringRef v121 = 0;
            CFDictionaryRef v126 = 0;
LABEL_133:
            CFNumberRef v103 = CFNumberCreate(v5, kCFNumberIntType, (char *)&v133 + 4);
            if (v103)
            {
              CFNumberRef v104 = v103;
              CFDictionaryAddValue(v18, @"IO80211InterfaceIPV4Address", v103);
              CFRelease(v104);
            }
            if (valuePtr != *(_DWORD *)(a1 + 4316)) {
              *(_DWORD *)(a1 + 4316) = valuePtr;
            }
            CFNumberRef v105 = CFNumberCreate(v5, kCFNumberIntType, &v133);
            if (v105)
            {
              CFNumberRef v106 = v105;
              CFDictionaryAddValue(v18, @"IO80211InterfaceIPV4RouterAddress", v105);
              CFRelease(v106);
            }
            CFDataRef v107 = CFDataCreate(v5, bytes, 6);
            if (v107)
            {
              CFDataRef v108 = v107;
              CFDictionaryAddValue(v18, @"IO80211InterfaceRouterMACAddress", v107);
              CFRelease(v108);
            }
            for (int i = 6; ; --i)
            {
              uint64_t v110 = Apple80211Set();
              uint64_t v111 = v110;
              if ((int)v110 <= 15)
              {
                if (v110 != -3905) {
                  break;
                }
              }
              else if (v110 != 61 && v110 != 16)
              {
                goto LABEL_152;
              }
              if (!i) {
                break;
              }
              usleep(0x7A120u);
            }
            if (!v110) {
              goto LABEL_155;
            }
LABEL_152:
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"__WiFiDeviceCheckForIPV4ParamsChange" v111];
            }
LABEL_155:
            if (sub_10005DC28(a1))
            {
              unint64_t v114 = v120;
              if (a1)
              {
                if (v19[20]) {
                  sub_100046668(a1, 1, v120, *(_DWORD *)(a1 + 5872), v18, 0);
                }
                unsigned int v115 = +[WiFiUsageMonitor sharedInstance];
                goto LABEL_161;
              }
              unsigned int v115 = +[WiFiUsageMonitor sharedInstance];
            }
            else
            {
              unsigned int v115 = +[WiFiUsageMonitor sharedInstance];
              unint64_t v114 = v120;
              if (a1)
              {
LABEL_161:
                BOOL v116 = v19[20] != 0;
                goto LABEL_164;
              }
            }
            BOOL v116 = 0;
LABEL_164:
            [(WiFiUsageMonitor *)v115 notifyIpConfigurationStateWithMethod:v116 dhcpLeaseDuration:*(_DWORD *)(a1 + 4316) == 2 hasRoutableIpV4:*v19 != 0 hasRoutableIpV6:(double)v114];
            [+[WiFiUsageMonitor sharedInstance] notifyIPv4Changes:[(__CFDictionary *)v21 copy]];
            v19[44] = 0;
            CFRelease(v18);
            CFArrayRef ArrayBySeparatingStrings = v123;
            CFDictionaryRef v4 = v124;
            CFStringRef v117 = v121;
            CFStringRef v10 = v122;
            CFStringRef ValueAtIndex = v128;
            if (!v21)
            {
LABEL_166:
              CFRelease(cf);
              goto LABEL_167;
            }
LABEL_165:
            CFRelease(v21);
            goto LABEL_166;
          }
          CFArrayRef v22 = (const __CFArray *)CFDictionaryGetValue(v20, kSCPropNetIPv4Addresses);
          if (v22 && (CFArrayRef v23 = v22, CFArrayGetCount(v22) >= 1))
          {
            CFStringRef v24 = (const __CFString *)CFArrayGetValueAtIndex(v23, 0);
            if (v24)
            {
              CFStringRef v25 = v24;
              if (qword_10027DD68)
              {
                CFMutableDictionaryRef v27 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"IP", +[NSString stringWithFormat:@"IP Address: %@", v25]) UTF8String]);
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                {
                  CFMutableArrayRef v28 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v27 UTF8String]] UTF8String];
                  *(_DWORD *)buuint64_t f = 136446210;
                  *(void *)&uint8_t buf[4] = v28;
                  _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                }
              }
              sub_10005F770(v25, (in_addr *)&v133 + 1);
              if (BYTE5(v133) == 254 && BYTE4(v133) == 169) {
                int v30 = 1;
              }
              else {
                int v30 = 2;
              }
              LODWORD(valuePtr) = v30;
              int v15 = &objc_retainAutoreleaseReturnValue_ptr;
            }
          }
          else
          {
            if (qword_10027DD68)
            {
              CFDictionaryRef v32 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"IP", +[NSString stringWithFormat:@"No IP address\n"]) UTF8String]);
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                CFDictionaryRef v33 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v32 UTF8String]] UTF8String];
                *(_DWORD *)buuint64_t f = 136446210;
                *(void *)&uint8_t buf[4] = v33;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              }
            }
          }
          *(_DWORD *)(a1 + 4296) = HIDWORD(v133);
          CFBooleanRef v34 = (const __CFBoolean *)CFDictionaryGetValue(v21, kSCPropNetIPv4CLAT46);
          if (v34 && CFBooleanGetValue(v34) == 1)
          {
            if (qword_10027DD68)
            {
              id v36 = [v15[298] stringWithFormat:@"%s", [v15[298] stringWithFormat:@"{%@*} %@", @"IP", [v15[298] stringWithFormat:@"IPv4CLAT46 network - not propagating IPv4 information to device\n", "UTF8String"]];
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                id v37 = [[[v15[298] stringWithFormat:@"[WiFiPolicy] %s", [v36 UTF8String]] UTF8String];
                *(_DWORD *)buuint64_t f = 136446210;
                *(void *)&uint8_t buf[4] = v37;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              }
            }
            HIDWORD(v133) = 0;
          }
          CFStringRef v38 = (const __CFString *)CFDictionaryGetValue(v21, kSCPropNetIPv4ARPResolvedIPAddress);
          if (v38)
          {
            if (qword_10027DD68)
            {
              uint64_t v40 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"IP", +[NSString stringWithFormat:@"Router IP Address: %@", v38]) UTF8String]);
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v41 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v40 UTF8String]] UTF8String];
                *(_DWORD *)buuint64_t f = 136446210;
                *(void *)&uint8_t buf[4] = v41;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              }
            }
            sub_10005F770(v38, (in_addr *)&v133);
          }
          else
          {
            if (qword_10027DD68)
            {
              id v42 = [[v15[298] stringWithFormat:@"%s", [v15[298] stringWithFormat:@"{%@*} %@", @"IP", [v15[298] stringWithFormat:@"No Router IP Address", "UTF8String"]];
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                id v43 = [[[v15[298] stringWithFormat:@"[WiFiPolicy] %s", [v42 UTF8String]] UTF8String];
                *(_DWORD *)buuint64_t f = 136446210;
                *(void *)&uint8_t buf[4] = v43;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              }
            }
          }
          v129.in_addr_t s_addr = 0;
          CFStringRef v44 = (const __CFString *)CFDictionaryGetValue(v21, kSCPropNetIPv4Router);
          if (v44)
          {
            if (qword_10027DD68)
            {
              long long v46 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"IP", +[NSString stringWithFormat:@"Default Gateway IP Address: %@", v44]) UTF8String]);
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                long long v47 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v46 UTF8String]] UTF8String];
                *(_DWORD *)buuint64_t f = 136446210;
                *(void *)&uint8_t buf[4] = v47;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              }
            }
            sub_10005F770(v44, &v129);
          }
          else
          {
            if (qword_10027DD68)
            {
              long long v48 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"IP", +[NSString stringWithFormat:@"No Default Gateway IP Address"]) UTF8String]);
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                CFDictionaryRef v49 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v48 UTF8String]] UTF8String];
                *(_DWORD *)buuint64_t f = 136446210;
                *(void *)&uint8_t buf[4] = v49;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              }
            }
          }
          in_addr_t s_addr = v129.s_addr;
          int v51 = v129.s_addr == 0;
          CFStringRef v52 = (const __CFString *)sub_10001C1B4(a1, *(const void **)(a1 + 112));
          CFStringRef v128 = v52;
          if (v52 && sub_1000199C0((uint64_t)v52))
          {
            if (s_addr)
            {
              HIDWORD(valuePtr) = 2;
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:3 message:@"%s: Setting power mode to kA11PowerProfileCarPlayWithInternet" args:__WiFiDeviceCheckForIPV4ParamsChange, "__WiFiDeviceCheckForIPV4ParamsChange"];
              }
            }
            else
            {
              HIDWORD(valuePtr) = 1;
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Setting power mode to kA11PowerProfileCarPlayOnly", "__WiFiDeviceCheckForIPV4ParamsChange")];
              }
            }
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3 message:@"%s: Setting power mode to kA11PowerProfileDefault" args:("__WiFiDeviceCheckForIPV4ParamsChange")];
            }
          }
          BOOL v54 = s_addr == 0;
          int v55 = valuePtr;
          if (*(unsigned __int8 *)(a1 + 4312) == v51 && valuePtr == *(_DWORD *)(a1 + 4316))
          {
LABEL_85:
            CFNumberRef v63 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&valuePtr + 4);
            if (!v63)
            {
              CFRelease(v18);
              CFDictionaryRef v126 = 0;
              CFDictionaryRef v127 = 0;
              CFStringRef v117 = 0;
              CFArrayRef ArrayBySeparatingStrings = v123;
              CFDictionaryRef v4 = v124;
              CFStringRef v10 = v122;
              CFStringRef ValueAtIndex = v128;
              goto LABEL_165;
            }
            CFStringRef v119 = v44;
            sub_100017D28(a1, *(const void **)(a1 + 112), 479, 0, (uint64_t)v63);
            sub_10005F904(a1);
            CFStringRef v64 = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainSetup, ValueAtIndex, kSCEntNetIPv4);
            CFStringRef v121 = v64;
            if (v64)
            {
              CFDictionaryRef v65 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), v64);
              CFDictionaryRef v66 = v65;
              CFStringRef v19 = (unsigned char *)(a1 + 4300);
              if (v65)
              {
                CFStringRef v67 = (const __CFString *)CFDictionaryGetValue(v65, kSCPropNetIPv4ConfigMethod);
                CFStringRef v68 = v67;
                if (v67 && CFEqual(v67, kSCValNetIPv4ConfigMethodDHCP))
                {
                  char v69 = 1;
                  goto LABEL_94;
                }
              }
              else
              {
                CFStringRef v68 = 0;
              }
            }
            else
            {
              CFStringRef v68 = 0;
              CFDictionaryRef v66 = 0;
              CFStringRef v19 = (unsigned char *)(a1 + 4300);
            }
            char v69 = 0;
LABEL_94:
            v19[20] = v69;
            CFDictionaryRef v127 = v66;
            if (!sub_10005DC28(a1))
            {
              unint64_t v79 = 0;
              CFDictionaryRef v126 = 0;
              goto LABEL_108;
            }
            dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
            CFDictionaryRef v70 = SCDynamicStoreCopyDHCPInfo(0, ValueAtIndex);
            CFDictionaryRef v126 = v70;
            if (v70)
            {
              CFDictionaryRef v71 = v70;
              CFDateRef LeaseStartTime = DHCPInfoGetLeaseStartTime(v70);
              CFDateRef LeaseExpirationTime = DHCPInfoGetLeaseExpirationTime(v71);
              if (LeaseStartTime)
              {
                CFDateRef v74 = LeaseExpirationTime;
                if (!LeaseExpirationTime)
                {
                  CFDictionaryRef v77 = v21;
                  unint64_t v79 = 0xFFFFFFFFLL;
LABEL_103:
                  if (qword_10027DD68)
                  {
                    CFDictionaryRef v81 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"IP", +[NSString stringWithFormat:@"%s: configMethod %@, leaseExpiryDuration %llu mins on %@", "__WiFiDeviceCheckForIPV4ParamsChange", v68, v79, sub_10001A43C(v128)]) UTF8String]);
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                    {
                      CFDictionaryRef v82 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v81 UTF8String]] UTF8String];
                      *(_DWORD *)buuint64_t f = 136446210;
                      *(void *)&uint8_t buf[4] = v82;
                      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                    }
                  }
                  CFDictionaryRef v21 = v77;
LABEL_108:
                  unint64_t v120 = v79;
                  *(_DWORD *)(a1 + 4324) = v79;
                  CFStringRef v83 = (const __CFString *)CFDictionaryGetValue(v21, kSCPropNetIPv4ARPResolvedHardwareAddress);
                  if (v83)
                  {
                    if (qword_10027DD68)
                    {
                      CFIndex v85 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"IP", +[NSString stringWithFormat:@"Router MAC Address: %@", v83]) UTF8String]);
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                      {
                        CFStringRef v19 = (unsigned char *)(a1 + 4300);
                        CFDictionaryRef v86 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v85 UTF8String]] UTF8String];
                        *(_DWORD *)buuint64_t f = 136446210;
                        *(void *)&uint8_t buf[4] = v86;
                        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                      }
                    }
                    *(_DWORD *)bytes = 0;
                    __int16 v132 = 0;
                    CFTypeID TypeID = CFStringGetTypeID();
                    if (CFGetTypeID(v83) == TypeID)
                    {
                      *(void *)&long long v88 = 0xAAAAAAAAAAAAAAAALL;
                      *((void *)&v88 + 1) = 0xAAAAAAAAAAAAAAAALL;
                      long long v136 = v88;
                      long long v137 = v88;
                      *(_OWORD *)buuint64_t f = v88;
                      long long v135 = v88;
                      if (CFStringGetCString(v83, (char *)buf, 64, 0x600u))
                      {
                        CFNumberRef v89 = ether_aton((const char *)buf);
                        __int16 v90 = *(_WORD *)&v89->octet[4];
                        *(_DWORD *)bytes = *(_DWORD *)v89->octet;
                        __int16 v132 = v90;
                      }
                    }
                  }
                  else
                  {
                    if (qword_10027DD68)
                    {
                      CFStringRef v91 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"IP", +[NSString stringWithFormat:@"No Router MAC Address"]) UTF8String]);
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                      {
                        CFStringRef v19 = (unsigned char *)(a1 + 4300);
                        uint32x2_t v92 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v91 UTF8String]] UTF8String];
                        *(_DWORD *)buuint64_t f = 136446210;
                        *(void *)&uint8_t buf[4] = v92;
                        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                      }
                    }
                  }
                  sub_10005FA18(a1, v83, v119);
                  CFArrayRef v93 = (const __CFArray *)CFDictionaryGetValue(v21, kSCPropNetIPv4SubnetMasks);
                  if (v93 && (CFArrayRef v94 = v93, CFArrayGetCount(v93) >= 1))
                  {
                    CFTypeID v95 = CFArrayGetValueAtIndex(v94, 0);
                    CFAllocatorRef v5 = kCFAllocatorDefault;
                    if (!v95) {
                      goto LABEL_131;
                    }
                    CFStringRef v96 = v95;
                    if (qword_10027DD68)
                    {
                      CFNumberRef v98 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"IP", +[NSString stringWithFormat:@"IP subnet mask: %@", v96]) UTF8String]);
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                      {
                        CFNumberRef v99 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v98 UTF8String]] UTF8String];
                        *(_DWORD *)buuint64_t f = 136446210;
                        *(void *)&uint8_t buf[4] = v99;
                        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                      }
                    }
                  }
                  else
                  {
                    if (qword_10027DD68)
                    {
                      CFTypeID v100 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"IP", +[NSString stringWithFormat:@"No IP subnet mask\n"]) UTF8String]);
                      CFAllocatorRef v5 = kCFAllocatorDefault;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                      {
                        CFStringRef v101 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v100 UTF8String]] UTF8String];
                        *(_DWORD *)buuint64_t f = 136446210;
                        *(void *)&uint8_t buf[4] = v101;
                        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                      }
                    }
                    else
                    {
                      CFAllocatorRef v5 = kCFAllocatorDefault;
                    }
                  }
LABEL_131:
                  CFIndex v102 = *(void (**)(uint64_t, const void *, const __CFDictionary *, void))(a1 + 5032);
                  if (v102) {
                    v102(a1, v118, v21, *(void *)(a1 + 5040));
                  }
                  goto LABEL_133;
                }
                double AbsoluteTime = CFDateGetAbsoluteTime(LeaseStartTime);
                double v76 = CFDateGetAbsoluteTime(v74);
                if (v76 > AbsoluteTime)
                {
                  CFDictionaryRef v77 = v21;
                  double v78 = (v76 - AbsoluteTime) / 60.0;
                  if ((unint64_t)v78 >= 0xFFFFFFFE) {
                    unint64_t v79 = 4294967294;
                  }
                  else {
                    unint64_t v79 = (unint64_t)v78;
                  }
                  goto LABEL_103;
                }
              }
            }
            CFDictionaryRef v77 = v21;
            unint64_t v79 = 0;
            goto LABEL_103;
          }
          uint64_t v56 = a1 + 4300;
          if (valuePtr == 1)
          {
            if (*(_DWORD *)(a1 + 4316) == 2)
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Device lost a valid IP address. Resetting routability.", "__WiFiDeviceCheckForIPV4ParamsChange")];
              }
              uint64_t v56 = a1 + 4300;
              *(unsigned char *)(a1 + 4300) = 0;
              int v55 = valuePtr;
            }
            else
            {
              int v55 = 1;
            }
          }
          *(unsigned char *)(v56 + 12) = v51;
          *(_DWORD *)(a1 + 4316) = v55;
          if (s_addr) {
            CFDictionaryRef v58 = (const void **)&kCFBooleanFalse;
          }
          else {
            CFDictionaryRef v58 = (const void **)&kCFBooleanTrue;
          }
          CFNumberRef v59 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
          CFDictionaryRef v60 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFDictionaryRef v61 = v60;
          if (v59 && *v58 && v60)
          {
            CFDictionarySetValue(v60, @"WiFiHasNoGatewayIP", *v58);
            CFDictionarySetValue(v61, @"WiFiIPState", v59);
          }
          else if (!v59)
          {
            goto LABEL_79;
          }
          CFRelease(v59);
LABEL_79:
          if (v61)
          {
            if (*(void *)(a1 + 4840))
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Dispatch LQM with hasNoGatewayIP %d, wifiIPState %d", "__WiFiDeviceCheckForIPV4ParamsChange", v54, valuePtr);
              }
              (*(void (**)(uint64_t, const void *, void, __CFDictionary *))(a1 + 4840))(a1, v118, *(void *)(a1 + 4848), v61);
            }
            CFRelease(v61);
          }
          goto LABEL_85;
        }
      }
    }
  }
  CFStringRef ValueAtIndex = 0;
LABEL_184:
  CFNumberRef v63 = 0;
  CFDictionaryRef v126 = 0;
  CFDictionaryRef v127 = 0;
  CFStringRef v117 = 0;
  if (ArrayBySeparatingStrings) {
LABEL_168:
  }
    CFRelease(ArrayBySeparatingStrings);
LABEL_169:
  if (v117) {
    CFRelease(v117);
  }
  if (v127) {
    CFRelease(v127);
  }
  if (v126) {
    CFRelease(v126);
  }
  if (v63) {
    CFRelease(v63);
  }
  if (ValueAtIndex) {
    CFRelease(ValueAtIndex);
  }
}

void sub_10005F770(const __CFString *a1, in_addr *a2)
{
  memset(buffer, 170, sizeof(buffer));
  a2->in_addr_t s_addr = 0;
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    if (CFStringGetCString(a1, buffer, 16, 0x600u))
    {
      if (inet_aton(buffer, a2) == 1) {
        return;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Error converting IPv4 address %@ to network type", "__WiFiDeviceConvertStrToIPv4Addr", a1 message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Error converting IPv4 address %@ to ASCII", "__WiFiDeviceConvertStrToIPv4Addr", a1 message];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: Not a valid CFString" arguments:("__WiFiDeviceConvertStrToIPv4Addr")];
    }
  }
}

void sub_10005F904(uint64_t a1)
{
  uint64_t v2 = _SCNetworkInterfaceCreateWithBSDName();
  if (!v2) {
    goto LABEL_6;
  }
  int v3 = (const void *)v2;
  unsigned int IsQoSMarkingProfileInstalled = _SCNetworkInterfaceIsQoSMarkingProfileInstalled();
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, @"FASTLANE Profile installed: %d\n", IsQoSMarkingProfileInstalled];
  }
  CFRelease(v3);
  if (IsQoSMarkingProfileInstalled) {
    uint64_t v6 = (uint64_t *)&kCFBooleanTrue;
  }
  else {
LABEL_6:
  }
    uint64_t v6 = (uint64_t *)&kCFBooleanFalse;
  int v7 = (const void *)*v6;
  sub_100017D28(a1, *(const void **)(a1 + 112), 480, 0, *v6);
  if (v7)
  {
    CFRelease(v7);
  }
}

uint64_t sub_10005F9F4(uint64_t result, char a2)
{
  if (result)
  {
    *(unsigned char *)(result + 4320) = a2;
    return 1;
  }
  return result;
}

uint64_t sub_10005FA08(uint64_t result, int a2)
{
  if (result)
  {
    *(_DWORD *)(result + 4324) = a2;
    return 1;
  }
  return result;
}

uint64_t sub_10005FA18(uint64_t result, CFTypeRef cf, CFTypeRef a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(const void **)(result + 4328);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v5 + 4328) = 0;
    }
    int v7 = *(const void **)(v5 + 4336);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(v5 + 4336) = 0;
    }
    if (cf) {
      *(void *)(v5 + 4328) = CFRetain(cf);
    }
    if (a3) {
      *(void *)(v5 + 4336) = CFRetain(a3);
    }
    return 1;
  }
  return result;
}

uint64_t sub_10005FA94(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 4320);
  }
  return result;
}

void sub_10005FAA4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)sub_10005FC0C(a1);
    int v3 = sub_10005FB34(a1, v2);
    CFDictionaryRef v4 = *(void (**)(uint64_t, int64_t, __CFDictionary *, void, void))(a1 + 5080);
    if (v4)
    {
      int64_t v5 = sub_10005FC0C(a1);
      v4(a1, v5, v3, 0, *(void *)(a1 + 5088));
    }
    if (v3)
    {
      CFRelease(v3);
    }
  }
}

__CFDictionary *sub_10005FB34(uint64_t a1, const void *a2)
{
  uint64_t v9 = 0;
  int v3 = sub_10001C9E8(a1, a2);
  if (v3)
  {
    uint64_t v4 = (uint64_t)v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == sub_10001CADC())
    {
      uint64_t v6 = sub_1001694FC(v4, &v9);
      if (!v6) {
        return v9;
      }
    }
    else
    {
      uint64_t v6 = 4294963393;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: error %d" :@"WiFiDeviceCopyInterfaceStateInfo" :v6];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: unknown interface %@", "WiFiDeviceCopyInterfaceStateInfo", a2 message];
    }
  }
  return v9;
}

int64_t sub_10005FC0C(uint64_t a1)
{
  uint64_t valuePtr = 6;
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784));
  if (!Count)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: no virtual interfaces found.", "WiFiDeviceGetAwdlInterfaceName", valuePtr];
    }
    return 0;
  }
  int64_t v3 = Count;
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  if (!v4) {
    return 0;
  }
  CFNumberRef v5 = v4;
  uint64_t v6 = (const void **)sub_10005AAF4(0, v3, 8uLL);
  if (v6)
  {
    int v7 = v6;
    uint64_t v8 = (const void **)sub_10005AAF4(0, v3, 8uLL);
    if (v8)
    {
      uint64_t v9 = v8;
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 5784), v7, v8);
      if (v3 < 1)
      {
        int64_t v3 = 0;
      }
      else
      {
        CFStringRef v10 = v9;
        CFDictionaryRef v11 = (int64_t *)v7;
        while (1)
        {
          CFTypeID v12 = CFGetTypeID(*v10);
          if (v12 == sub_10001CADC())
          {
            CFDataRef v13 = sub_100168480((uint64_t)*v10);
            if (CFEqual(v13, v5)) {
              break;
            }
          }
          ++v11;
          ++v10;
          if (!--v3) {
            goto LABEL_14;
          }
        }
        int64_t v3 = *v11;
      }
LABEL_14:
      free(v9);
    }
    else
    {
      int64_t v3 = 0;
    }
    free(v7);
  }
  else
  {
    int64_t v3 = 0;
  }
  CFRelease(v5);
  return v3;
}

uint64_t sub_10005FD94()
{
  uint64_t result = qword_10027D678;
  if (!qword_10027D678)
  {
    pthread_once(&stru_10027C9F0, (void (*)(void))sub_10005FDDC);
    return qword_10027D678;
  }
  return result;
}

CFStringRef sub_10005FDDC()
{
  qword_10027D678 = _CFRuntimeRegisterClass();
  IOMasterPort(0, (mach_port_t *)&dword_10027D680);
  qword_10027D668 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, kSCEntNetIPv4);
  CFStringRef result = SCDynamicStoreKeyCreateNetworkGlobalEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, kSCEntNetIPv6);
  qword_10027D670 = (uint64_t)result;
  return result;
}

uint64_t sub_10005FE74(const __CFAllocator *a1, io_registry_entry_t a2)
{
  if (qword_10027DD68) {
    [qword_10027DD68 WFLog:message:4, "%s: entering", "WiFiDeviceCreate"];
  }
  if (a2)
  {
    if (!qword_10027D678) {
      pthread_once(&stru_10027C9F0, (void (*)(void))sub_10005FDDC);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v6 = Instance;
      int v7 = (unsigned char *)(Instance + 4300);
      bzero((void *)(Instance + 16), 0x1758uLL);
      unsigned int v8 = 0;
      *(_WORD *)(v6 + 54) = 0;
      *(_OWORD *)(v6 + 240) = xmmword_1001CB410;
      *(void *)(v6 + 256) = 7;
      *(void *)(v6 + 264) = 4294967277;
      do
      {
        CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(a2, @"IOInterfaceName", a1, 0);
        *(void *)(v6 + 112) = CFProperty;
        if (CFProperty) {
          goto LABEL_29;
        }
        usleep(0x2710u);
        uint64_t v10 = *(void *)(v6 + 112);
        if (v10) {
          BOOL v11 = 1;
        }
        else {
          BOOL v11 = v8 >= 0x1F;
        }
        ++v8;
      }
      while (!v11);
      if (v10)
      {
LABEL_28:
        if (*(void *)(v6 + 112))
        {
LABEL_29:
          IORegistryEntryGetParentEntry(a2, "IOService", (io_registry_entry_t *)(v6 + 24));
          if (!*(_DWORD *)(v6 + 24))
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: No Matching Parent Service Found for interface %@", "WiFiDeviceCreate", *(void *)(v6 + 112) message];
            }
            goto LABEL_61;
          }
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          *(void *)(v6 + 120) = Mutable;
          if (!Mutable) {
            goto LABEL_62;
          }
          IONotificationPortRef v20 = IONotificationPortCreate(dword_10027D680);
          *(void *)(v6 + 96) = v20;
          if (v20)
          {
            *(void *)(v6 + 144) = sub_100152B20((uint64_t)a1, v6);
            uint64_t v21 = sub_10015FA54(a1, 0);
            *(void *)(v6 + 176) = v21;
            if (v21)
            {
              CFMutableDictionaryRef v22 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              *(void *)(v6 + 200) = v22;
              if (v22)
              {
                CFMutableArrayRef v23 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                *(void *)(v6 + 5696) = v23;
                if (v23)
                {
                  v7[1404] = 1;
                  v7[1420] = 0;
                  CFMutableArrayRef v24 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                  *(void *)(v6 + 5752) = v24;
                  if (v24)
                  {
                    v7[1460] = 1;
                    v7[1476] = 0;
                    CFMutableArrayRef v25 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                    *(void *)(v6 + 5656) = v25;
                    if (v25)
                    {
                      CFMutableArrayRef v26 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                      *(void *)(v6 + 5664) = v26;
                      if (v26)
                      {
                        sub_10015FB30(*(void *)(v6 + 176), (uint64_t)sub_100060464, v6);
                        CFNumberRef v27 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, (const void *)(v6 + 256));
                        if (v27)
                        {
                          CFNumberRef v28 = v27;
                          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 120), @"SignalStrengthThreshold", v27);
                          CFRelease(v28);
                        }
                        CFMutableArrayRef v29 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                        *(void *)(v6 + 5784) = v29;
                        if (v29)
                        {
                          CFDictionaryAddValue(v29, *(const void **)(v6 + 112), (const void *)v6);
                          sub_10004571C((const void *)v6);
                          *(_DWORD *)(v6 + 4296) = 0;
                          *int v7 = 0;
                          sub_100062D6C(v6);
                          *(unsigned char *)(v6 + 208) = 0;
                          *(void *)(v6 + 216) = 0;
                          *(void *)(v6 + 5920) = 0;
                          *(void *)(v6 + 5928) = 0x6400000064;
                          *(_DWORD *)(v6 + 5936) = 0;
                          *(_WORD *)(v6 + 224) = 257;
                          if (byte_10027DDAA) {
                            *(_WORD *)(v6 + 224) = 0;
                          }
                          *(void *)(v6 + 232) = MGCopyAnswer();
                          *(_DWORD *)(v6 + 5944) = 0;
                          CFMutableArrayRef v30 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                          *(void *)(v6 + 5968) = v30;
                          if (v30)
                          {
                            if (qword_10027DD68) {
                              [((id)qword_10027DD68) WFLog:4 message:@"%s: exiting" withFormat:@"WiFiDeviceCreate"];
                            }
                            goto LABEL_46;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_62:
              CFRelease((CFTypeRef)v6);
              goto LABEL_63;
            }
            uint64_t v35 = (void *)qword_10027DD68;
            if (qword_10027DD68)
            {
              id v36 = "%s: Error: WiFiCommandQueueCreate failed";
              goto LABEL_60;
            }
          }
          else
          {
            uint64_t v35 = (void *)qword_10027DD68;
            if (qword_10027DD68)
            {
              id v36 = "%s: Error: IONotificationPortCreate failed";
LABEL_60:
              [v35 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v36 WFLog:4 message:v3
            }
          }
        }
        else
        {
          uint64_t v35 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            id v36 = "%s: Error: Could not obtain IO80211Interface bsd name";
            goto LABEL_60;
          }
        }
LABEL_61:
        goto LABEL_62;
      }
      CFTypeRef v12 = IORegistryEntryCreateCFProperty(a2, @"IOInterfaceNamePrefix", a1, 0);
      CFTypeRef v13 = IORegistryEntryCreateCFProperty(a2, @"IOInterfaceUnit", a1, 0);
      CFMutableDictionaryRef v14 = v13;
      if (v12
        && v13
        && (CFTypeID v15 = CFGetTypeID(v12), v15 == CFStringGetTypeID())
        && (CFTypeID v16 = CFGetTypeID(v14), v16 == CFNumberGetTypeID()))
      {
        *(void *)(v6 + 112) = CFStringCreateWithFormat(0, 0, @"%@%@", v12, v14);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s: device->ifName : %@ ", "WiFiDeviceCreate", *(void *)(v6 + 112) message];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: Could not obtain ifPrefix and ifUnit"];
        }
        if (!v12) {
          goto LABEL_26;
        }
      }
      CFRelease(v12);
LABEL_26:
      if (v14) {
        CFRelease(v14);
      }
      goto LABEL_28;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: no device", "WiFiDeviceCreate")];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: no interface", "WiFiDeviceCreate")];
    }
  }
LABEL_63:
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: exiting, Error: Failed to create device ref", @"WiFiDeviceCreate"];
  }
  uint64_t v6 = 0;
LABEL_46:
  return v6;
}

uint64_t sub_100060464(uint64_t a1, uint64_t a2)
{
  CFIndex v324 = 72;
  if (!a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null device", "__WiFiDeviceCommandQueueCallback")];
    }
    goto LABEL_476;
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null command queue ref "];
    }
LABEL_476:
    return 4294963394;
  }
  unint64_t v325 = 0xAAAAAAAAAAAAAAAALL;
  CFNumberRef v4 = (void *)(a2 + 184);
  if (sub_10000D7FC(a1, &v325, &v324, (void *)(a2 + 184))) {
    return 4294963394;
  }
  while (1)
  {
    CFNumberRef v5 = sub_100007180((CFNumberRef)a2, 0, *(_DWORD *)v325);
    if ((uint64_t)v5 <= *(void *)(v325 + 64)) {
      break;
    }
    CFNumberRef v6 = v5;
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "Deferring command type: \"%@\" because its priority (%ld) is less than the minimum allowed priority (%ld) for this command type", sub_100068900(*(_DWORD *)v325), *(void *)(v325 + 64), v6 message];
    }
    sub_100160474(*(void *)(a2 + 176), *(void *)(a2 + 184));
    if (sub_10000D7FC(a1, &v325, &v324, v4)) {
      return 4294963394;
    }
  }
  *(unsigned char *)(v325 + 56) = 1;
  BOOL v11 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    unint64_t v12 = sub_100068900(*(_DWORD *)v325);
    [v11 WFLog:3, "Dequeuing command type: \"%@\" pending commands: %ld", v12, sub_10015FB38(*(void *)(a2 + 176)) - 1 message];
  }
  uint64_t v13 = *(void *)(a2 + 176);
  if (v325)
  {
    if (*(_DWORD *)v325 == 1)
    {
      if (sub_10001FC1C(*(void *)(v325 + 16))) {
        uint64_t v14 = 40;
      }
      else {
        uint64_t v14 = 30;
      }
    }
    else
    {
      uint64_t v14 = 30;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  sub_100160608(v13, v14);
  switch(*(_DWORD *)v325)
  {
    case 0:
      CFTypeID v16 = *(const void **)(v325 + 8);
      CFDictionaryRef v17 = *(const __CFDictionary **)(v325 + 16);
      uint64_t v18 = *(void *)(v325 + 24);
      CFStringRef v19 = *(CFTypeRef **)(v325 + 32);
      double v327 = 0.0;
      IONotificationPortRef v20 = sub_10001C9E8(a2, v16);
      if (!v20)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", v16 message];
        }
        char v69 = v21;
        goto LABEL_96;
      }
      if (qword_10027DD68)
      {
        CFMutableDictionaryRef v22 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@+} %@", @"SCAN", +[NSString stringWithFormat:@"Attempting Apple80211ScanAsync on %@", v16]) UTF8String]);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          CFMutableArrayRef v23 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v22 UTF8String]] UTF8String];
          *(_DWORD *)buuint64_t f = 136446210;
          uint64_t v329 = v23;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        }
      }
      CFTypeID v24 = CFGetTypeID(v20);
      if (v24 == sub_10001CADC()) {
        return sub_100169F04(v20, (uint64_t)v17, v18, (uint64_t)v19);
      }
      *(void *)(a2 + 4728) = v18;
      *(void *)(a2 + 4736) = v19;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v17, @"SCAN_MAXAGE");
      if (Value && !CFNumberGetValue(Value, kCFNumberDoubleType, &v327)) {
        double v327 = 0.0;
      }
      double v138 = v327;
      if (_os_feature_enabled_impl()) {
        double v139 = 30.0;
      }
      else {
        double v139 = 14.0;
      }
      CFAllocatorRef v140 = kCFAllocatorDefault;
      if (v138 >= v139)
      {
        if (_os_feature_enabled_impl()) {
          double v141 = 30.0;
        }
        else {
          double v141 = 14.0;
        }
      }
      else
      {
        double v141 = v327;
      }
      double v327 = v141;
      CFBooleanRef v154 = (const __CFBoolean *)CFDictionaryGetValue(v17, @"BeaconCacheOnly");
      if (v154 && CFBooleanGetValue(v154))
      {
        CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        sub_10006C744();
        if (CFArrayGetCount(Mutable))
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: using scan cache (%ld) to serve scan request", "__WiFiDeviceScanAsyncQueued", CFArrayGetCount(Mutable));
          }
          uint64_t v157 = sub_10006C8A8(a2, v156, v17, Mutable, 1);
          sub_100074D10(a2, v157, 1);
          sub_100074D70(a2, v17);
          if (v157) {
            CFRelease(v157);
          }
          if (*(void *)(a2 + 64))
          {
            CFRetain((CFTypeRef)a2);
            BOOL v158 = *(NSObject **)(a2 + 64);
            *(void *)&long long valuePtr = _NSConcreteStackBlock;
            *((void *)&valuePtr + 1) = 3221225472;
            BOOL v331 = sub_100074DB4;
            v332 = &unk_10023EAF8;
            uint64_t v333 = a2;
            dispatch_async(v158, &valuePtr);
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue."];
            }
          }
          uint64_t v8 = 0;
        }
        else
        {
          sub_100074E8C(a2, *(void *)(a2 + 112), 0, 0, 0);
          uint64_t v8 = 4294963396;
        }
LABEL_102:
        if (!Mutable) {
          return v8;
        }
        goto LABEL_103;
      }
      CFBooleanRef v159 = (const __CFBoolean *)CFDictionaryGetValue(v17, @"CacheOnly");
      if (v159) {
        int v300 = CFBooleanGetValue(v159);
      }
      else {
        int v300 = 0;
      }
      double v213 = v327;
      if (v327 == 0.0)
      {
        v255 = 0;
      }
      else
      {
        int v302 = v19;
        v304 = v16;
        v307 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        if (v307)
        {
          CFMutableSetRef v214 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
          if (!v214) {
            goto LABEL_434;
          }
          CFSetRef v215 = v214;
          int v216 = _os_feature_enabled_impl();
          double v217 = 14.0;
          if (v216) {
            double v217 = 30.0;
          }
          sub_100075810(*(const __CFArray **)(a2 + 5696), v217);
          CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 5696));
          int v219 = sub_100075AE0(a2, v17, v215);
          LOBYTE(v220) = 0;
          if (!v219 && Count >= 1)
          {
            int v220 = 0;
            CFDictionaryRef theDicta = v17;
            while (1)
            {
              CFTypeRef cf1a = (CFTypeRef)(Count - 1);
              CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 5696), Count - 1);
              double Current = CFAbsoluteTimeGetCurrent();
              uint64_t v223 = sub_1000DAD40((uint64_t)ValueAtIndex);
              if (!v223
                || (CFDictionaryRef v224 = (const __CFDictionary *)v223, v225 = sub_1001674C8((uint64_t)ValueAtIndex), v225 == 0.0)
                || (double v226 = Current - v225, v213 >= 0.0) && v226 > v213
                || (CFMutableArrayRef v227 = CFArrayCreateMutable(v140, 0, &kCFTypeArrayCallBacks)) == 0)
              {
                int v251 = 0;
                goto LABEL_425;
              }
              CFStringRef v228 = v227;
              CFArrayRef v313 = (CFArrayRef)Count;
              int v316 = v220;
              CFMutableArrayRef v229 = CFArrayCreateMutable(v140, 0, &kCFTypeArrayCallBacks);
              if (v229) {
                break;
              }
              int v251 = 0;
              CFMutableArrayRef v232 = v228;
LABEL_424:
              CFRelease(v232);
LABEL_425:
              v220 |= v251;
              int v219 = sub_100075AE0(a2, v17, v215);
              if (Count >= 2)
              {
                CFIndex Count = (CFIndex)cf1a;
                CFAllocatorRef v140 = kCFAllocatorDefault;
                if (!v219) {
                  continue;
                }
              }
              goto LABEL_427;
            }
            v230 = v229;
            v231 = CFArrayCreateMutable(v140, 0, &kCFTypeArrayCallBacks);
            if (v231)
            {
              CFMutableArrayRef v232 = CFArrayCreateMutable(v140, 0, &kCFTypeArrayCallBacks);
              if (v232)
              {
                sub_100075E98(v17, v228);
                sub_100075E98(v224, v230);
                if (CFArrayGetCount(v228) >= 1)
                {
                  CFIndex v233 = 0;
                  do
                  {
                    CFIndex v234 = CFArrayGetCount(v230);
                    BOOL v235 = CFArrayGetValueAtIndex(v228, v233);
                    v335.id location = 0;
                    v335.CFIndex length = v234;
                    if (CFArrayGetFirstIndexOfValue(v230, v335, v235) == -1) {
                      goto LABEL_414;
                    }
                  }
                  while (++v233 < CFArrayGetCount(v228));
                }
                CFDictionaryRef v17 = theDicta;
                sub_100075BA8(a2, theDicta, v231);
                sub_100075BA8(a2, v224, v232);
                if (CFArrayGetCount(v231) >= 1)
                {
                  int v236 = 0;
                  CFIndex v237 = 0;
                  do
                  {
                    CFIndex v238 = CFArrayGetCount(v232);
                    v239 = CFArrayGetValueAtIndex(v231, v237);
                    v336.id location = 0;
                    v336.CFIndex length = v238;
                    if (CFArrayGetFirstIndexOfValue(v232, v336, v239) != -1)
                    {
                      int v240 = CFArrayGetValueAtIndex(v231, v237);
                      CFSetAddValue(v215, v240);
                      int v236 = 1;
                    }
                    ++v237;
                  }
                  while (v237 < CFArrayGetCount(v231));
                  if (!v236)
                  {
LABEL_414:
                    int v251 = 0;
                    goto LABEL_415;
                  }
                  CFArrayRef v241 = (const __CFArray *)sub_1000C2DE8((uint64_t)ValueAtIndex);
                  if (!v241)
                  {
LABEL_413:
                    int v251 = 1;
LABEL_415:
                    CFDictionaryRef v17 = theDicta;
                    goto LABEL_421;
                  }
                  CFArrayRef v242 = v241;
                  CFDictionaryRef v17 = theDicta;
                  if (CFArrayGetCount(v241))
                  {
                    v337.CFIndex length = CFArrayGetCount(v228);
                    v337.id location = 0;
                    FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v228, v337, &stru_100248240);
                    if (CFArrayGetCount(v242) >= 1)
                    {
                      CFIndex v243 = 0;
                      do
                      {
                        v244 = CFArrayGetValueAtIndex(v242, v243);
                        if (v244)
                        {
                          v245 = v244;
                          if (FirstIndexOfValue != -1
                            || (CFIndex v246 = CFArrayGetCount(v228),
                                v247 = sub_10001A43C(v245),
                                v338.id location = 0,
                                v338.CFIndex length = v246,
                                CFArrayGetFirstIndexOfValue(v228, v338, v247) != -1))
                          {
                            v248 = sub_100075FA0((uint64_t)v245);
                            if (v248)
                            {
                              v249 = v248;
                              v339.CFIndex length = CFArrayGetCount(v231);
                              v339.id location = 0;
                              if (CFArrayGetFirstIndexOfValue(v231, v339, v249) != -1)
                              {
                                CFNumberRef v250 = sub_1000C6FC0((uint64_t)v245, @"ORIG_AGE");
                                sub_10001A610((uint64_t)v245, @"AGE", (uint64_t)v250 + (v226 * 1000.0));
                                CFArrayAppendValue(v307, v245);
                              }
                              CFRelease(v249);
                            }
                          }
                        }
                        ++v243;
                      }
                      while (v243 < CFArrayGetCount(v242));
                      goto LABEL_413;
                    }
                  }
                  int v251 = 1;
LABEL_421:
                  CFRelease(v228);
                  CFRelease(v230);
                  if (v231) {
                    CFRelease(v231);
                  }
                  int v220 = v316;
                  CFIndex Count = (CFIndex)v313;
                  if (!v232) {
                    goto LABEL_425;
                  }
                  goto LABEL_424;
                }
              }
            }
            else
            {
              CFMutableArrayRef v232 = 0;
            }
            int v251 = 0;
            goto LABEL_421;
          }
LABEL_427:
          unsigned __int8 v252 = v213 >= 0.0 ? v219 : v220;
          int v253 = v252;
          CFRelease(v215);
          if (v253)
          {
            CFStringRef v19 = v302;
            CFTypeID v16 = v304;
            if (CFArrayGetCount(v307))
            {
              int v254 = sub_10006CC68(v307, 0, v17);
              v255 = sub_10005A3F4(v254);
              if (v254) {
                CFRelease(v254);
              }
            }
            else
            {
              v255 = 0;
            }
          }
          else
          {
LABEL_434:
            v255 = 0;
            CFStringRef v19 = v302;
            CFTypeID v16 = v304;
          }
          CFRelease(v307);
        }
        else
        {
          v255 = 0;
        }
      }
      float v258 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        if (v255) {
          CFIndex v259 = CFArrayGetCount(v255);
        }
        else {
          CFIndex v259 = 0;
        }
        [v258 WFLog:3 message:@"%s: network records count: %lu ", @"__WiFiDeviceCopyPreparedScanResults", v259];
      }
      if (v255)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"ScanCache: Successfully Retrieved Scan Results from Scan Cache."];
        }
        sub_100074D10(a2, v255, 1);
        sub_100074D70(a2, v17);
        CFRelease(v255);
        if (*(void *)(a2 + 64))
        {
          CFRetain((CFTypeRef)a2);
          unsigned int v261 = *(NSObject **)(a2 + 64);
          *(void *)&block[0] = _NSConcreteStackBlock;
          *(void *)&block[1] = 3221225472;
          *(void *)&block[2] = sub_1000756F8;
          *(void *)&block[3] = &unk_10023EAF8;
          *(void *)&void block[4] = a2;
          dispatch_async(v261, block);
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." : @"__WiFiDeviceScanAsyncQueued"];
          }
        }
        return 0;
      }
      else
      {
        if (v300)
        {
          sub_100074E8C(a2, *(void *)(a2 + 112), 0, 0, 0);
          return 4294963396;
        }
        uint64_t v8 = Apple80211ScanAsync();
        if (v8)
        {
          if (v19)
          {
            if (*v19)
            {
              CFRetain(*v19);
              CFTypeRef v265 = *v19;
              if (*v19)
              {
                CFTypeID v266 = CFGetTypeID(v265);
                uint64_t v267 = sub_1000ED1DC();
                CFTypeRef v265 = *v19;
                if (v266 == v267)
                {
                  *(_WORD *)(sub_10012225C((uint64_t)v265) + 434) = v8;
                  CFTypeRef v265 = *v19;
                }
              }
              CFRelease(v265);
              sub_100074E8C(a2, (uint64_t)v16, 0, 0, v8);
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"__WiFiDeviceScanAsyncQueued: null manager from scan data"];
              }
            }
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: null scanData" args:("__WiFiDeviceScanAsyncQueued")];
            }
            return 12;
          }
        }
        else
        {
          sub_100074D70(a2, v17);
        }
      }
      return v8;
    case 1:
      CFIndex v85 = *(void **)(v325 + 16);
      allocatora = *(const void **)(v325 + 8);
      CFDictionaryRef v86 = *(const void **)(v325 + 24);
      long long v315 = *(_OWORD *)(v325 + 32);
      if (sub_10001FC1C((uint64_t)v85)) {
        uint64_t v87 = 40;
      }
      else {
        uint64_t v87 = 30;
      }
      *(_OWORD *)(a2 + 4776) = v315;
      if (qword_10027DD68)
      {
        CFNumberRef v89 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@+} %@", @"ASSOC", +[NSString stringWithFormat:@"Attempting Apple80211AssociateAsync to %@", sub_10001A43C(v85)]) UTF8String]);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v90 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v89 UTF8String]] UTF8String];
          LODWORD(valuePtr) = 136446210;
          *(void *)((char *)&valuePtr + 4) = v90;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&valuePtr, 0xCu);
        }
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Starting %d second(s) timer to complete association", "__WiFiDeviceAssociateAsyncQueued", v87);
      }
      LOBYTE(valuePtr) = 0;
      if (!v85)
      {
        uint64_t v8 = 4294963396;
        goto LABEL_503;
      }
      uint32x2_t v92 = sub_10001A43C(v85);
      BOOL v93 = sub_1000C8798((uint64_t)v85);
      CFArrayRef v94 = allocatora;
      if (sub_10001FC1C((uint64_t)v85))
      {
        if (v93)
        {
          unsigned int v95 = sub_1000C8A18(v85);
          CFStringRef v96 = 0;
          if (!v86)
          {
            if (v95)
            {
              CFStringRef v96 = sub_1000C62C8((CFDictionaryRef *)v85);
              if (!v96)
              {
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:4, "No password for one time password network %@ ", sub_10001A43C(v85), v296, v297 message];
                }
LABEL_502:
                uint64_t v8 = 4294967196;
LABEL_503:
                CFArrayRef v94 = allocatora;
                goto LABEL_446;
              }
            }
          }
        }
        else
        {
          CFStringRef v96 = 0;
        }
        if (v86) {
          BOOL v160 = v86;
        }
        else {
          BOOL v160 = v96;
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Attempting to join EAP network: %@", sub_10001A43C(v85) message];
        }
        BOOL v162 = sub_10001C1B4(a2, allocatora);
        if (v162)
        {
          int v163 = v162;
          if (!CFEqual(v162, v85) || sub_1000DAD30(*(void *)(a2 + 144)) != 5) {
            sub_10006DCBC(a2, allocatora, v164, *(_DWORD *)(a2 + 5800), "__WiFiDeviceAssociateEAP", 10602);
          }
          CFRelease(v163);
        }
        uint64_t v8 = sub_100152F50(*(void **)(a2 + 144), (CFDictionaryRef *)v85, v160);
        if (v8 != -3900 || sub_10001E404((uint64_t)v85, @"EnterpriseProfile"))
        {
          if (!v96) {
            goto LABEL_445;
          }
          goto LABEL_444;
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: EAP association failed with param error and no configuration. Falling back to non-EAP association...", "__WiFiDeviceAssociate")
        }
      }
      else
      {
        CFStringRef v96 = 0;
      }
      if (!v93) {
        goto LABEL_439;
      }
      if (!v86)
      {
        CFStringRef v96 = (const void *)sub_1000C91E4((CFDictionaryRef *)v85, (BOOL *)&valuePtr, 3.0);
        if (!v96)
        {
          CFStringRef v96 = (const void *)sub_1000C9398(v85, (BOOL *)&valuePtr, 3.0);
          CFArrayRef v211 = (void *)qword_10027DD68;
          if (!v96)
          {
            if (qword_10027DD68)
            {
              CFDictionaryRef v272 = sub_10001A43C(v85);
              if ((_BYTE)valuePtr) {
                v273 = ", although keychain fetch did time out";
              }
              else {
                v273 = "";
              }
              [v211 WFLog:4, "%s: No password returned for %@%s", "__WiFiDeviceAssociate", v272, v273 message];
            }
            goto LABEL_502;
          }
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s: found password with non-syncable attribute for network %@.", "__WiFiDeviceAssociate", sub_10001A43C(v85) message];
          }
          CFArrayRef v94 = allocatora;
        }
      }
      if (sub_1000C6FE8((const __CFDictionary *)v85))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Attempting to join SAE (transition mode = %d) network: %@", sub_10001ED04((uint64_t)v85), v92, v297, v298, v299 message];
        }
      }
      else
      {
        if (sub_10001ED04((uint64_t)v85))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "Attempting to join WPA network: %@", v92 message];
          }
          goto LABEL_438;
        }
        if (!sub_1000C66D0((BOOL)v85))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "Attempting to join: %@", v92 message];
          }
          goto LABEL_438;
        }
        if (sub_10001E404((uint64_t)v85, @"WEP_AUTH_Flags"))
        {
          CFNumberRef v268 = sub_1000C6FC0((uint64_t)v85, @"WEP_AUTH_Flags");
          if (qword_10027DD68)
          {
            if (v268) {
              int v269 = "40 Bit";
            }
            else {
              int v269 = "104 Bit";
            }
            if ((v268 & 4) != 0) {
              CFArrayRef v270 = "Open";
            }
            else {
              CFArrayRef v270 = "Shared";
            }
            if ((v268 & 2) != 0) {
              CFIndex v271 = "Hashed";
            }
            else {
              CFIndex v271 = "Unhashed";
            }
            [(id)qword_10027DD68 WFLog:3, "Attempting to join %s %s %s (0x%lx) WEP network: %@", v269, v270, v271, v268, sub_10001A43C(v85) message];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "Attempting to join WEP network: %@", sub_10001A43C(v85), v296, v297, v298, v299 message];
          }
        }
      }
      CFArrayRef v94 = allocatora;
LABEL_438:
LABEL_439:
      if (v86) {
        uint64_t v256 = (uint64_t)v86;
      }
      else {
        uint64_t v256 = (uint64_t)v96;
      }
      uint64_t v8 = sub_10006D0E4(a2, v94, v85, v256, (uint64_t)sub_10007685C, 0);
      if (!v96 || (_BYTE)valuePtr) {
        goto LABEL_445;
      }
LABEL_444:
      CFRelease(v96);
LABEL_445:
      if (!v8) {
        return v8;
      }
LABEL_446:
      sub_1000760B0(a2, (uint64_t)v94, v85, 0, v8);
      return v8;
    case 2:
      kdebug_trace();
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4 message:"Disassociating."];
      }
      uint64_t v72 = sub_10006DCBC(a2, *(const void **)(v325 + 8), v71, *(_DWORD *)(a2 + 5800), "__WiFiDeviceDisassociateQueued", 10660);
      goto LABEL_151;
    case 3:
      CFDateRef v74 = *(const void **)(v325 + 8);
      uint64_t v75 = *(void *)(v325 + 16);
      uint64_t v77 = *(void *)(v325 + 24);
      uint64_t v76 = *(void *)(v325 + 32);
      double v78 = sub_10001C9E8(a2, v74);
      if (!v78) {
        goto LABEL_524;
      }
      unint64_t v79 = v78;
      CFTypeID v80 = CFGetTypeID(v78);
      if (v80 != sub_10001CADC())
      {
        *(void *)(a2 + 4656) = v77;
        *(void *)(a2 + 4664) = v76;
        for (int i = 6; ; --i)
        {
          uint64_t v132 = Apple80211Set();
          uint64_t v8 = v132;
          if ((int)v132 <= 15)
          {
            if (v132 != -3905) {
              goto LABEL_236;
            }
          }
          else if (v132 != 61 && v132 != 16)
          {
            goto LABEL_237;
          }
          if (!i)
          {
LABEL_236:
            if (!v132) {
              return v8;
            }
LABEL_237:
            sub_100076860(a2, (uint64_t)v74, v132);
            return v8;
          }
          usleep(0x7A120u);
        }
      }
      return sub_10016A174(v79, (uint64_t)v74, v75, v77, v76);
    case 4:
      uint64_t v35 = *(const void **)(v325 + 8);
      id v36 = *(void (**)(uint64_t, const void *, uint64_t, uint64_t))(v325 + 16);
      uint64_t v37 = *(void *)(v325 + 24);
      CFStringRef v38 = sub_10001C9E8(a2, v35);
      if (!v38)
      {
        CFStringRef v67 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_95;
        }
        v295 = v35;
LABEL_534:
        CFStringRef v68 = "Unknown interface %@";
LABEL_94:
        [v67 WFLog:4 message:v68, v295];
LABEL_95:
        char v69 = v66;
LABEL_96:
        return 4294963396;
      }
      CFTypeID v39 = CFGetTypeID(v38);
      if (v39 == sub_10001CADC()) {
        goto LABEL_357;
      }
      IOPMAssertionID v41 = *(_DWORD *)(a2 + 4024);
      if (v41) {
        IOPMAssertionRelease(v41);
      }
      uint64_t v42 = *(void *)(a2 + 4032);
      if (!v42) {
        goto LABEL_357;
      }
      if (_MISStopService)
      {
        int v43 = _MISStopService(v42);
        if (!v43)
        {
LABEL_357:
          uint64_t v8 = sub_10006DCBC(a2, v35, v40, *(_DWORD *)(a2 + 5800), "__WiFiDeviceStopNetworkQueued", 3105);
          if (v36) {
            v36(a2, v35, v8, v37);
          }
          goto LABEL_359;
        }
      }
      else
      {
        int v43 = -1;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"Unable to shutdown mobile internet sharing: %s\n" args:(strerror(v43))];
      }
      goto LABEL_357;
    case 5:
      CFNumberRef v98 = *(const void **)(v325 + 8);
      *(_OWORD *)allocatorb = *(_OWORD *)(v325 + 24);
      CFNumberRef v99 = sub_10001C9E8(a2, v98);
      *(_OWORD *)(a2 + 4672) = *(_OWORD *)allocatorb;
      CFTypeID v100 = CFGetTypeID(v99);
      if (v100 != sub_10001CADC())
      {
        for (int j = 6; ; --j)
        {
          uint64_t v127 = Apple80211Set();
          uint64_t v8 = v127;
          if ((int)v127 <= 15)
          {
            if (v127 != -3905) {
              goto LABEL_233;
            }
          }
          else if (v127 != 61 && v127 != 16)
          {
            goto LABEL_234;
          }
          if (!j)
          {
LABEL_233:
            if (!v127) {
              return v8;
            }
LABEL_234:
            uint64_t v102 = a2;
            uint64_t v103 = (uint64_t)v98;
            uint64_t v104 = v8;
            goto LABEL_235;
          }
          usleep(0x7A120u);
        }
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "Start WiFi Direct Group is not supported by %@", v98 message];
      }
      uint64_t v8 = 4294963396;
      uint64_t v102 = a2;
      uint64_t v103 = (uint64_t)v98;
      uint64_t v104 = 4294963396;
LABEL_235:
      sub_100064260(v102, v103, v104);
      return v8;
    case 6:
      CFDateRef v74 = *(const void **)(v325 + 8);
      CFDataRef v108 = *(void (**)(uint64_t, const void *, uint64_t, uint64_t))(v325 + 16);
      uint64_t v109 = *(void *)(v325 + 24);
      uint64_t v110 = sub_10001C9E8(a2, v74);
      if (!v110)
      {
LABEL_524:
        CFStringRef v67 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_95;
        }
        v295 = v74;
        goto LABEL_534;
      }
      CFTypeID v111 = CFGetTypeID(v110);
      if (v111 == sub_10001CADC())
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "Stop WiFi Direct Group is not suported by %@", v74 message];
        }
        CFDataRef v107 = v112;
        goto LABEL_142;
      }
      for (int k = 6; ; --k)
      {
        uint64_t v146 = Apple80211Set();
        uint64_t v8 = v146;
        if (v146 != -3905 && v146 != 61 && v146 != 16) {
          break;
        }
        if (!k) {
          break;
        }
        usleep(0x7A120u);
      }
      if (v108) {
        v108(a2, v74, v146, v109);
      }
      goto LABEL_359;
    case 7:
      CFDictionaryRef v81 = *(const void **)(v325 + 8);
      LODWORD(valuePtr) = *(void *)(v325 + 24);
      CFDictionaryRef v82 = sub_10001C9E8(a2, v81);
      if (!v82) {
        goto LABEL_522;
      }
      CFTypeID v83 = CFGetTypeID(v82);
      if (v83 != sub_10001CADC())
      {
        for (int m = 6; ; --m)
        {
          uint64_t v135 = Apple80211Set();
          uint64_t v8 = v135;
          if (v135 != -3905 && v135 != 61 && v135 != 16) {
            break;
          }
          if (!m) {
            break;
          }
          usleep(0x7A120u);
        }
        goto LABEL_359;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "Set Bluetooth State command is not supported by %@", v81 message];
      }
      goto LABEL_136;
    case 8:
      CFDictionaryRef v81 = *(const void **)(v325 + 8);
      CFStringRef v122 = sub_10001C9E8(a2, v81);
      if (!v122) {
        goto LABEL_522;
      }
      uint64_t v123 = (uint64_t)v122;
      CFTypeID v124 = CFGetTypeID(v122);
      if (v124 == sub_10001CADC())
      {
        uint64_t v72 = sub_100169E8C(v123);
LABEL_151:
        uint64_t v8 = v72;
      }
      else
      {
        for (int n = 6; ; --n)
        {
          uint64_t v149 = Apple80211SetPowerState();
          uint64_t v8 = v149;
          if (v149 != -3905 && v149 != 61 && v149 != 16) {
            break;
          }
          if (!n) {
            break;
          }
          usleep(0x7A120u);
        }
      }
      goto LABEL_359;
    case 9:
      CFDictionaryRef v61 = *(const void **)(v325 + 8);
      CFDictionaryRef v62 = *(const __CFDictionary **)(v325 + 16);
      *(_OWORD *)uint64_t v318 = *(_OWORD *)(v325 + 24);
      CFNumberRef v63 = sub_10001C9E8(a2, v61);
      if (!v63)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", v61 message];
        }
        char v69 = v64;
        goto LABEL_96;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Attempting Apple80211GasRequest on %@", v61 message];
      }
      CFTypeID v65 = CFGetTypeID(v63);
      if (v65 == sub_10001CADC())
      {
        CFStringRef v67 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_95;
        }
        CFStringRef v68 = "Gas request is not supported on virtual interfaces.";
        goto LABEL_94;
      }
      *(_OWORD *)(a2 + 5000) = *(_OWORD *)v318;
      block[0] = -1.0;
      CFNumberRef v129 = (const __CFNumber *)CFDictionaryGetValue(v62, @"SCAN_MAXAGE");
      if (v129) {
        CFNumberGetValue(v129, kCFNumberDoubleType, block);
      }
      CFBooleanRef v130 = (const __CFBoolean *)CFDictionaryGetValue(v62, @"CacheOnly");
      if (v130) {
        int theDict = CFBooleanGetValue(v130);
      }
      else {
        int theDict = 0;
      }
      if (!v62) {
        goto LABEL_342;
      }
      double v165 = block[0];
      if (block[0] == 0.0) {
        goto LABEL_342;
      }
      sub_100075810(*(const __CFArray **)(a2 + 5752), 3600.0);
      CFIndex v166 = CFArrayGetCount(*(CFArrayRef *)(a2 + 5752));
      if (!v166) {
        goto LABEL_342;
      }
      uint64_t v167 = v166;
      CFArrayRef v168 = (const __CFArray *)CFDictionaryGetValue(v62, @"GAS_NETWORKS");
      __int16 v169 = (void *)CFDictionaryGetValue(v62, @"GAS_QUERY");
      CFTypeRef cf1 = CFDictionaryGetValue(v62, @"GAS_PROTOCOL");
      if (v167 < 1 || !v168 || !v169 || !cf1) {
        goto LABEL_342;
      }
      while (1)
      {
        CFDictionaryRef v170 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 5752), v167 - 1);
        if (!v170) {
          goto LABEL_335;
        }
        uint64_t v171 = (uint64_t)v170;
        uint64_t v172 = sub_1000DAD40((uint64_t)v170);
        if (!v172) {
          goto LABEL_335;
        }
        CFDictionaryRef v173 = (const __CFDictionary *)v172;
        if (v165 > 0.0)
        {
          double v174 = CFAbsoluteTimeGetCurrent();
          if (v174 - sub_1001674C8(v171) > v165) {
            goto LABEL_335;
          }
        }
        int v175 = CFDictionaryGetValue(v173, @"GAS_PROTOCOL");
        if (!v175) {
          goto LABEL_335;
        }
        if (!CFEqual(cf1, v175)) {
          goto LABEL_335;
        }
        int v176 = CFDictionaryGetValue(v173, @"GAS_QUERY");
        if (!v176) {
          goto LABEL_335;
        }
        if (!CFEqual(v169, v176)) {
          goto LABEL_335;
        }
        CFArrayRef v319 = (const __CFArray *)sub_1000C2DE8(v171);
        if (!v319) {
          goto LABEL_335;
        }
        CFMutableArrayRef v306 = (CFMutableArrayRef)v169;
        int v177 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        CFMutableArrayRef v178 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        BOOL v179 = 0;
        v180 = 0;
        if (!v177) {
          break;
        }
        CFArrayRef theArray = 0;
        if (!v178) {
          goto LABEL_326;
        }
        CFArrayRef v181 = v178;
        CFNumberRef v312 = sub_100077098(v168);
        CFArrayRef theArray = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        if (theArray)
        {
          CFIndex v182 = CFArrayGetCount(v168);
          if (v182 >= 1)
          {
            CFIndex v183 = v182;
            for (iint i = 0; ii != v183; ++ii)
            {
              v185 = CFArrayGetValueAtIndex(v168, ii);
              if (v185)
              {
                v186 = sub_10001E404((uint64_t)v185, @"CHANNEL");
                if (v186) {
                  CFArrayAppendValue(theArray, v186);
                }
              }
            }
          }
          CFArrayRef v305 = v168;
          BOOL v179 = (int)v312;
          if (v312)
          {
            CFIndex v187 = CFArrayGetCount(v319);
            CFIndex v188 = CFArrayGetCount(v312);
            BOOL v179 = 0;
            if (v188)
            {
              CFDictionaryRef v303 = v62;
              if (v187)
              {
                uint64_t v189 = v188;
                v301 = v61;
                if (v187 >= v188)
                {
                  if (v187 >= 1)
                  {
                    for (jint j = 0; jj != v187; ++jj)
                    {
                      CFDictionaryRef v191 = (const __CFDictionary *)CFArrayGetValueAtIndex(v319, jj);
                      if (v191)
                      {
                        CFDictionaryRef v192 = v191;
                        int v193 = CFDictionaryGetValue(v191, @"BSSID");
                        uint64_t v194 = CFDictionaryGetValue(v192, @"CHANNEL");
                        if (v193)
                        {
                          BOOL v195 = v194;
                          if (v194)
                          {
                            CFArrayAppendValue(v177, v193);
                            CFArrayAppendValue(v181, v195);
                          }
                        }
                      }
                    }
                  }
                  if (v189 < 1)
                  {
                    CFIndex v196 = 0;
                    CFDictionaryRef v62 = v303;
                  }
                  else
                  {
                    CFIndex v196 = 0;
                    CFDictionaryRef v62 = v303;
                    while (1)
                    {
                      int v197 = CFArrayGetValueAtIndex(v312, v196);
                      CFArrayRef v198 = CFArrayGetValueAtIndex(theArray, v196);
                      if (v197)
                      {
                        v334.CFIndex length = CFArrayGetCount(v177);
                        v334.id location = 0;
                        if (!CFArrayContainsValue(v177, v334, v197)) {
                          break;
                        }
                      }
                      CFDictionaryRef v199 = CFArrayGetValueAtIndex(v181, v196);
                      if (v198)
                      {
                        if (v199 && !CFEqual(v198, v199)) {
                          break;
                        }
                      }
                      if (v189 == ++v196)
                      {
                        CFIndex v196 = v189;
                        break;
                      }
                    }
                  }
                  BOOL v179 = v196 == v189;
                  CFDictionaryRef v61 = v301;
                }
              }
            }
            CFArrayRef v168 = v305;
            CFMutableArrayRef v178 = v181;
            v180 = v312;
          }
          else
          {
            CFMutableArrayRef v178 = v181;
            v180 = 0;
          }
LABEL_326:
          if (!v177) {
            goto LABEL_328;
          }
          goto LABEL_327;
        }
        BOOL v179 = 0;
        CFArrayRef theArray = 0;
        CFMutableArrayRef v178 = v181;
        v180 = v312;
LABEL_327:
        int v200 = v178;
        CFRelease(v177);
        CFMutableArrayRef v178 = v200;
LABEL_328:
        if (v178) {
          CFRelease(v178);
        }
        __int16 v169 = v306;
        if (v180) {
          CFRelease(v180);
        }
        if (theArray) {
          CFRelease(theArray);
        }
        if (v179)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3, @"%s: found matching request. Using cached result", @"__WiFiDeviceCopyCachedGasResponse"];
          }
          CFIndex v275 = CFArrayGetCount(v319);
          if (v275)
          {
            uint64_t v276 = v275;
            CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
            if (Mutable)
            {
              CFDictionaryRef v277 = sub_100077098(v168);
              if (!v277)
              {
                BOOL v203 = 1;
                goto LABEL_566;
              }
              CFArrayRef v278 = v277;
              if (v276 >= 1)
              {
                for (kint k = 0; kk != v276; ++kk)
                {
                  CFDictionaryRef v280 = (const __CFDictionary *)CFArrayGetValueAtIndex(v319, kk);
                  if (v280)
                  {
                    v281 = CFDictionaryGetValue(v280, @"BSSID");
                    if (v281)
                    {
                      unsigned int v282 = v281;
                      v340.CFIndex length = CFArrayGetCount(v278);
                      v340.id location = 0;
                      if (CFArrayContainsValue(v278, v340, v282))
                      {
                        unsigned int v283 = CFArrayGetValueAtIndex(v319, kk);
                        CFArrayAppendValue(Mutable, v283);
                      }
                    }
                  }
                }
              }
              CFRelease(v278);
            }
LABEL_346:
            BOOL v203 = Mutable != 0;
            if (!Mutable && !theDict)
            {
              CFArrayRef v204 = (const __CFArray *)CFDictionaryGetValue(v62, @"GAS_NETWORKS");
              if (!v204) {
                return 4294963396;
              }
              CFArrayRef v205 = v204;
              MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v62);
              if (!MutableCopy) {
                return 4294963396;
              }
              CFArrayRef Mutable = MutableCopy;
              v207 = sub_10005A3F4(v205);
              if (v207)
              {
                v208 = v207;
                CFDictionaryReplaceValue(Mutable, @"GAS_NETWORKS", v207);
                uint64_t v8 = Apple80211GasRequest();
                if (v8) {
                  sub_100076E74((void *)a2, (uint64_t)v61, 0, 0, v8);
                }
                else {
                  sub_100077054(a2, v62);
                }
                CFRelease(v208);
              }
              else
              {
                uint64_t v8 = 4294963396;
              }
              goto LABEL_103;
            }
LABEL_566:
            CFArrayRef v290 = (const __CFArray *)CFDictionaryGetValue(v62, @"GAS_NETWORKS");
            if (v290)
            {
              CFArrayRef v291 = v290;
              sub_100076C04(v290, Mutable);
              sub_100076D58(a2, v291);
              if (*(void *)(a2 + 64))
              {
                CFRetain((CFTypeRef)a2);
                int v292 = *(NSObject **)(a2 + 64);
                *(void *)&long long valuePtr = _NSConcreteStackBlock;
                *((void *)&valuePtr + 1) = 3221225472;
                BOOL v331 = sub_100076D9C;
                v332 = &unk_10023EAF8;
                uint64_t v333 = a2;
                dispatch_async(v292, &valuePtr);
              }
              else
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." args:("__WiFiDeviceGasStartAsyncQueued")];
                }
              }
              uint64_t v8 = 0;
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:3, "%s: Oops - no networks in request", "__WiFiDeviceGasStartAsyncQueued"];
              }
              uint64_t v8 = 4294963396;
              sub_100076E74((void *)a2, (uint64_t)v61, 0, 0, 4294963396);
            }
            if (!v203) {
              return v8;
            }
LABEL_103:
            CFArrayRef v73 = Mutable;
LABEL_157:
            CFRelease(v73);
            return v8;
          }
LABEL_345:
          CFArrayRef Mutable = 0;
          goto LABEL_346;
        }
LABEL_335:
        if (v167-- <= 1)
        {
LABEL_342:
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3, @"%s: No matching cache entry found. Will send GAS request.", @"__WiFiDeviceCopyCachedGasResponse"];
          }
          goto LABEL_345;
        }
      }
      CFArrayRef theArray = 0;
      goto LABEL_326;
    case 0xA:
      unint64_t v114 = *(const void **)(v325 + 8);
      uint64_t v113 = *(const void **)(v325 + 16);
      BOOL v116 = *(void (**)(uint64_t, const void *, uint64_t, uint64_t))(v325 + 24);
      uint64_t v115 = *(void *)(v325 + 32);
      CFStringRef v117 = *(const __CFString **)(v325 + 40);
      CFNumberRef v118 = sub_10006EB84(a2);
      if (v118)
      {
        uint64_t v119 = (uint64_t)v118;
        *(void *)(a2 + 4688) = v116;
        *(void *)(a2 + 4696) = v115;
        unint64_t v120 = *(const void **)(a2 + 4704);
        if (v120)
        {
          CFRelease(v120);
          *(void *)(a2 + 4704) = 0;
        }
        if (v113) {
          CFTypeRef v121 = CFRetain(v113);
        }
        else {
          CFTypeRef v121 = 0;
        }
        *(void *)(a2 + 4704) = v121;
        int64_t v151 = *(const void **)(a2 + 4712);
        if (v151)
        {
          CFRelease(v151);
          *(void *)(a2 + 4712) = 0;
        }
        if (v117) {
          CFTypeRef v152 = CFRetain(v117);
        }
        else {
          CFTypeRef v152 = 0;
        }
        *(void *)(a2 + 4712) = v152;
        *(CFAbsoluteTime *)(a2 + 4720) = CFAbsoluteTimeGetCurrent();
        uint64_t v8 = sub_10016A7C8(v119, v114, (const __CFDictionary *)v113, (void (*)(void, const void *, void, void))sub_100076A2C, a2, v117);
        if (!v8) {
          return v8;
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: WiFiVirtualInterfaceStartAwdl() returned error %d.", "__WiFiDeviceStartAwdlQueued", v8);
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: not an AWDL interface." : @"__WiFiDeviceStartAwdlQueued"];
        }
        uint64_t v8 = 4294963393;
      }
      if (v116)
      {
        v116(a2, v114, v8, v115);
        sub_10006E9C0(a2);
        *(void *)(a2 + 4688) = 0;
        *(void *)(a2 + 4696) = 0;
        v285 = *(const void **)(a2 + 4704);
        if (v285)
        {
          CFRelease(v285);
          *(void *)(a2 + 4704) = 0;
        }
        v286 = *(const void **)(a2 + 4712);
        if (v286)
        {
          CFRelease(v286);
          *(void *)(a2 + 4712) = 0;
        }
      }
      return v8;
    case 0xB:
      CFBooleanRef v34 = *(const void **)(v325 + 8);
      CFArrayRef Mutable = *(const __CFArray **)(v325 + 16);
      uint64_t v8 = sub_100076B44(a2, v34, (uint64_t)Mutable, *(void (**)(uint64_t, const void *, uint64_t, uint64_t))(v325 + 24), *(void *)(v325 + 32));
      sub_10015FFBC(*(void *)(a2 + 176), 0, 0, 0);
      if (v34) {
        CFRelease(v34);
      }
      goto LABEL_102;
    case 0xC:
      uint64_t v44 = *(void *)(v325 + 8);
      CFArrayRef v45 = *(const __CFArray **)(v325 + 16);
      *(_OWORD *)(a2 + 5144) = *(_OWORD *)(v325 + 24);
      uint64_t v317 = v44;
      if (!v44)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: null ifName.", "__WiFiDeviceRangingStartAsyncQueued"];
        }
        goto LABEL_537;
      }
      CFAllocatorRef v46 = kCFAllocatorDefault;
      if (!v45 || !CFArrayGetCount(v45))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: empty peers." args:("__WiFiDeviceRangingStartAsyncQueued")];
        }
LABEL_537:
        long long v47 = 0;
        uint64_t v8 = 4294963396;
        uint64_t v57 = v317;
        goto LABEL_154;
      }
      long long v47 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (CFArrayGetCount(v45) >= 1)
      {
        CFIndex v48 = 0;
        do
        {
          CFDictionaryRef v49 = (const __CFDictionary *)CFArrayGetValueAtIndex(v45, v48);
          if (v49)
          {
            CFDictionaryRef v50 = CFDictionaryCreateMutableCopy(v46, 0, v49);
            if (v50)
            {
              int v51 = v50;
              LOBYTE(valuePtr) = 0;
              CFNumberRef v52 = (const __CFNumber *)CFDictionaryGetValue(v50, @"RANGING_PEER_FLAGS");
              if (v52) {
                CFNumberGetValue(v52, kCFNumberSInt8Type, &valuePtr);
              }
              if (*(unsigned char *)(a2 + 5956)) {
                LOBYTE(valuePtr) = valuePtr | 2;
              }
              if (_os_feature_enabled_impl()) {
                LOBYTE(valuePtr) = valuePtr | 4;
              }
              if (*(unsigned char *)(a2 + 5957)) {
                LOBYTE(valuePtr) = valuePtr | 8;
              }
              if ((MGGetBoolAnswer() & 1) == 0 && sub_10007C9C0())
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:3, "%s: debug profile installed, enabling ranging log dump", "__WiFiDeviceRangingStartAsyncQueued"];
                }
                LOBYTE(valuePtr) = valuePtr | 2;
                CFAllocatorRef v46 = kCFAllocatorDefault;
              }
              CFNumberRef v54 = CFNumberCreate(v46, kCFNumberSInt8Type, &valuePtr);
              if (v54)
              {
                CFNumberRef v55 = v54;
                CFDictionarySetValue(v51, @"RANGING_PEER_FLAGS", v54);
                CFRelease(v55);
              }
              CFArrayAppendValue(v47, v51);
              CFRelease(v51);
              CFAllocatorRef v46 = kCFAllocatorDefault;
            }
          }
          ++v48;
        }
        while (v48 < CFArrayGetCount(v45));
      }
      uint64_t v57 = v317;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Attempting APPLE80211_IOC_RANGING_START on %@ to %ld peers", v317, CFArrayGetCount(v47) message];
      }
      for (int mm = 6; ; --mm)
      {
        uint64_t v59 = Apple80211RangeAsync();
        uint64_t v8 = v59;
        if ((int)v59 <= 15)
        {
          if (v59 != -3905) {
            break;
          }
        }
        else if (v59 != 61 && v59 != 16)
        {
          goto LABEL_154;
        }
        if (!mm) {
          break;
        }
        usleep(0x7A120u);
      }
      if (!v59) {
        goto LABEL_155;
      }
LABEL_154:
      sub_100065590((uint64_t *)a2, v57, 0, v8);
LABEL_155:
      if (v47)
      {
        CFArrayRef v73 = v47;
        goto LABEL_157;
      }
      return v8;
    case 0xD:
      CFDictionaryRef v81 = *(const void **)(v325 + 8);
      LODWORD(valuePtr) = *(void *)(v325 + 16);
      CFNumberRef v105 = sub_10001C9E8(a2, v81);
      if (v105)
      {
        CFTypeID v106 = CFGetTypeID(v105);
        if (v106 == sub_10001CADC())
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "Set display State command is not supported by %@", v81 message];
          }
LABEL_136:
          CFDataRef v107 = v84;
LABEL_142:
          uint64_t v8 = 4294963396;
        }
        else
        {
          for (int nn = 6; ; --nn)
          {
            uint64_t v143 = Apple80211Set();
            uint64_t v8 = v143;
            if (v143 != -3905 && v143 != 61 && v143 != 16) {
              break;
            }
            if (!nn) {
              break;
            }
            usleep(0x7A120u);
          }
        }
LABEL_359:
        sub_10015FFBC(*(void *)(a2 + 176), 0, 0, 0);
        return v8;
      }
LABEL_522:
      CFStringRef v67 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_95;
      }
      v295 = v81;
      goto LABEL_534;
    case 0xE:
      CFMutableArrayRef v26 = *(const void **)(v325 + 8);
      if (v26)
      {
        if ((*(unsigned char *)(a2 + 40) & 2) == 0)
        {
          uint64_t v8 = 4294963389;
          goto LABEL_162;
        }
        *(_OWORD *)allocator = *(_OWORD *)(v325 + 24);
        CFNumberRef v27 = sub_10001C9E8(a2, v26);
        if (v27)
        {
          CFTypeID v28 = CFGetTypeID(v27);
          if (v28 != sub_10001CADC())
          {
            *(_OWORD *)(a2 + 5464) = *(_OWORD *)allocator;
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "Attempting APPLE80211_IOC_SENSING_ENABLE on %@", v26 message];
            }
            for (int i1 = 6; ; --i1)
            {
              uint64_t v31 = Apple80211Set();
              uint64_t v8 = v31;
              if ((int)v31 <= 15)
              {
                if (v31 != -3905) {
                  break;
                }
              }
              else if (v31 != 61 && v31 != 16)
              {
                goto LABEL_159;
              }
              if (!i1) {
                break;
              }
              usleep(0x7A120u);
            }
            if (!v31) {
              return v8;
            }
LABEL_159:
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: IOC %d returned error %d", "__WiFiDeviceSensingEnableAsyncQueued", 408, v8);
            }
            if (!v8) {
              return v8;
            }
LABEL_162:
            sub_1000773B8(a2, (uint64_t)v26, 0, v8);
            return v8;
          }
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s: unsupported interface %@", "__WiFiDeviceSensingEnableAsyncQueued", v26 message];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s: unknown interface %@", "__WiFiDeviceSensingEnableAsyncQueued", v26 message];
          }
        }
        uint64_t v8 = 4294963393;
        goto LABEL_162;
      }
      uint64_t v8 = 4294963396;
      goto LABEL_162;
    case 0xF:
      CFArrayRef Mutable = *(const __CFArray **)(v325 + 8);
      uint64_t v8 = sub_10006DFEC(a2, v15, *(unsigned int *)(v325 + 16));
      sub_10015FFBC(*(void *)(a2 + 176), 0, 0, 0);
      goto LABEL_102;
    default:
      *(unsigned char *)(v325 + 56) = 0;
      return 4294963394;
  }
}

void sub_100062D6C(uint64_t a1)
{
  if (a1)
  {
    *(_OWORD *)(a1 + 2264) = 0u;
    *(_OWORD *)(a1 + 2280) = 0u;
    *(_OWORD *)(a1 + 2232) = 0u;
    *(_OWORD *)(a1 + 2248) = 0u;
    *(_OWORD *)(a1 + 2200) = 0u;
    *(_OWORD *)(a1 + 2216) = 0u;
    *(_OWORD *)(a1 + 2168) = 0u;
    *(_OWORD *)(a1 + 2184) = 0u;
    *(_OWORD *)(a1 + 2136) = 0u;
    *(_OWORD *)(a1 + 2152) = 0u;
    *(_OWORD *)(a1 + 2104) = 0u;
    *(_OWORD *)(a1 + 2120) = 0u;
    *(_OWORD *)(a1 + 2072) = 0u;
    *(_OWORD *)(a1 + 2088) = 0u;
    *(_OWORD *)(a1 + 2040) = 0u;
    *(_OWORD *)(a1 + 2056) = 0u;
    *(_OWORD *)(a1 + 2008) = 0u;
    *(_OWORD *)(a1 + 2024) = 0u;
    *(_OWORD *)(a1 + 1976) = 0u;
    *(_OWORD *)(a1 + 1992) = 0u;
    *(_OWORD *)(a1 + 1944) = 0u;
    *(_OWORD *)(a1 + 1960) = 0u;
    *(_OWORD *)(a1 + 1912) = 0u;
    *(_OWORD *)(a1 + 1928) = 0u;
    *(_OWORD *)(a1 + 1880) = 0u;
    *(_OWORD *)(a1 + 1896) = 0u;
    *(_OWORD *)(a1 + 1848) = 0u;
    *(_OWORD *)(a1 + 1864) = 0u;
    *(_OWORD *)(a1 + 1816) = 0u;
    *(_OWORD *)(a1 + 1832) = 0u;
    *(_OWORD *)(a1 + 1800) = 0u;
    *(void *)(a1 + 2296) = 0;
    bzero((void *)(a1 + 312), 0x3D8uLL);
    *(void *)(a1 + 1792) = 0;
    *(_OWORD *)(a1 + 1776) = 0u;
    *(_OWORD *)(a1 + 1760) = 0u;
    *(_OWORD *)(a1 + 1744) = 0u;
    *(_OWORD *)(a1 + 1728) = 0u;
    *(_OWORD *)(a1 + 1712) = 0u;
    *(_OWORD *)(a1 + 1696) = 0u;
    *(_OWORD *)(a1 + 1680) = 0u;
    *(_OWORD *)(a1 + 1664) = 0u;
    *(_OWORD *)(a1 + 1648) = 0u;
    *(_OWORD *)(a1 + 1632) = 0u;
    *(_OWORD *)(a1 + 1616) = 0u;
    *(_OWORD *)(a1 + 1600) = 0u;
    *(_OWORD *)(a1 + 1584) = 0u;
    *(_OWORD *)(a1 + 1568) = 0u;
    *(_OWORD *)(a1 + 1552) = 0u;
    *(_OWORD *)(a1 + 1536) = 0u;
    *(_OWORD *)(a1 + 1520) = 0u;
    *(_OWORD *)(a1 + 1504) = 0u;
    *(_OWORD *)(a1 + 1488) = 0u;
    *(_OWORD *)(a1 + 1472) = 0u;
    *(_OWORD *)(a1 + 1456) = 0u;
    *(_OWORD *)(a1 + 1440) = 0u;
    *(_OWORD *)(a1 + 1424) = 0u;
    *(_OWORD *)(a1 + 1408) = 0u;
    *(_OWORD *)(a1 + 1392) = 0u;
    *(_OWORD *)(a1 + 1376) = 0u;
    *(_OWORD *)(a1 + 1360) = 0u;
    *(_OWORD *)(a1 + 1344) = 0u;
    *(_OWORD *)(a1 + 1328) = 0u;
    *(_OWORD *)(a1 + 1312) = 0u;
    *(_OWORD *)(a1 + 1296) = 0u;
    bzero((void *)(a1 + 2304), 0x6A0uLL);
    *(void *)(a1 + 4016) = 0;
    *(_OWORD *)(a1 + 4000) = 0u;
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null device", "__WiFiDeviceResetCCAHistory")];
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null device", @"__WiFiDeviceResetRssiHistory"];
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null device", "__WiFiDeviceResetPerCoreRssiHistory")];
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null device" args:("__WiFiDeviceResetTxRxHistory")];
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null device", "__WiFiDeviceResetGatewayARPHistory")
    }
  }
}

uint64_t sub_100062FB4(uint64_t a1)
{
  uint64_t valuePtr = 7;
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784));
  if (!Count)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: no virtual interfaces found." : @"WiFiDeviceGetHostApInterfaceName" : valuePtr];
    }
    return 0;
  }
  uint64_t v3 = Count;
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  if (!v4) {
    return 0;
  }
  CFNumberRef v5 = v4;
  CFNumberRef v6 = (const void **)malloc_type_malloc(8 * v3, 0x6004044C4A2DFuLL);
  if (v6)
  {
    int v7 = v6;
    uint64_t v8 = (const void **)malloc_type_malloc(8 * v3, 0x2004093837F09uLL);
    if (v8)
    {
      uint64_t v9 = v8;
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 5784), v7, v8);
      if (v3 < 1)
      {
        uint64_t v3 = 0;
      }
      else
      {
        uint64_t v10 = v9;
        BOOL v11 = (uint64_t *)v7;
        while (1)
        {
          CFTypeID v12 = CFGetTypeID(*v10);
          if (v12 == sub_10001CADC())
          {
            uint64_t v13 = sub_100168480((uint64_t)*v10);
            if (CFEqual(v13, v5)) {
              break;
            }
          }
          ++v11;
          ++v10;
          if (!--v3) {
            goto LABEL_14;
          }
        }
        uint64_t v3 = *v11;
      }
LABEL_14:
      free(v9);
    }
    else
    {
      uint64_t v3 = 0;
    }
    free(v7);
  }
  else
  {
    uint64_t v3 = 0;
  }
  CFRelease(v5);
  return v3;
}

CFDictionaryRef sub_100063150(uint64_t a1, const void *a2, const __CFString *a3)
{
  CFTypeRef cf = 0;
  CFNumberRef v6 = sub_10001C9E8(a1, a2);
  if (!v6)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2 message];
    }
    uint64_t v35 = v41;
LABEL_84:
    return (CFDictionaryRef)cf;
  }
  int v7 = v6;
  CFTypeID v8 = CFGetTypeID(a3);
  if (v8 == CFNumberGetTypeID())
  {
    LODWORD(valuePtr) = 0;
    if (CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &valuePtr))
    {
      CFTypeID v9 = CFGetTypeID(v7);
      if (v9 == sub_10001CADC())
      {
        sub_100169388(v7, valuePtr, 0, &cf);
      }
      else
      {
        for (int i = 6; ; --i)
        {
          int v12 = Apple80211CopyValue();
          if (v12 != -3905 && v12 != 61 && v12 != 16) {
            break;
          }
          if (!i) {
            break;
          }
          usleep(0x7A120u);
        }
        if (valuePtr == 115 && cf != 0)
        {
          CFTypeID v15 = CFGetTypeID(cf);
          if (v15 == CFDictionaryGetTypeID())
          {
            CFTypeID v16 = *(void (**)(uint64_t, void, void, void **))(a1 + 5224);
            if (v16)
            {
              CFBooleanRef value = (void *)0xAAAAAAAAAAAAAAAALL;
              v16(a1, *(void *)(a1 + 112), *(void *)(a1 + 5232), &value);
              if (value)
              {
                CFDictionaryAddValue((CFMutableDictionaryRef)cf, @"AutoJoinPowerDiag", value);
                if (value)
                {
                  CFRelease(value);
                  CFBooleanRef value = 0;
                }
              }
              CFDictionaryRef v17 = *(void (**)(uint64_t, void, void, CFTypeRef *))(a1 + 5240);
              if (v17)
              {
                v46[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
                v17(a1, *(void *)(a1 + 112), *(void *)(a1 + 5248), v46);
                if (v46[0])
                {
                  CFDictionaryAddValue((CFMutableDictionaryRef)cf, @"AutoHotspotLPHSPowerStats", v46[0]);
                  if (v46[0]) {
                    CFRelease(v46[0]);
                  }
                }
              }
            }
          }
        }
      }
    }
    return (CFDictionaryRef)cf;
  }
  CFTypeID v10 = CFGetTypeID(a3);
  if (v10 != CFStringGetTypeID()) {
    return (CFDictionaryRef)cf;
  }
  if (a3 && CFEqual(a3, @"LastRangingSessionMetric")) {
    return (CFDictionaryRef)[+[WiFiUsageMonitor sharedInstance](WiFiUsageMonitor, "sharedInstance") lastRangingSessionMetric];
  }
  uint64_t v18 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 120), a3);
  CFTypeRef cf = v18;
  if (v18)
  {
    CFTypeRef CFProperty = v18;
    CFRetain(v18);
    if (!a3) {
      return (CFDictionaryRef)cf;
    }
    CFTypeID v20 = CFGetTypeID(a3);
    if (v20 == CFStringGetTypeID() && CFEqual(a3, @"IO80211InterfaceWoWWakeUpParams"))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Querying %@ on %@ from device->properties returned %@", "WiFiDeviceCopyProperty", a3, a2, CFProperty message];
      }
    }
    goto LABEL_79;
  }
  float v45 = NAN;
  *(_OWORD *)CFAllocatorRef v46 = *(_OWORD *)&off_10023F878;
  if (CFEqual(a3, @"RSSI"))
  {
    int v44 = *(_DWORD *)(a1 + 264);
    CFAllocatorRef v22 = kCFAllocatorDefault;
    CFBooleanRef value = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v44);
    CFTypeRef v48 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v45);
    CFDictionaryRef v23 = CFDictionaryCreate(kCFAllocatorDefault, v46, (const void **)&value, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v23);
    if (value)
    {
      CFRelease(value);
      CFBooleanRef value = 0;
    }
    if (v48)
    {
      CFRelease(v48);
      CFTypeRef v48 = 0;
    }
    if (v23) {
      CFRelease(v23);
    }
  }
  else
  {
    if (!CFEqual(a3, @"ScaledRSSI") && !CFEqual(a3, @"Strength"))
    {
      CFTypeRef cf = 0;
      CFAllocatorRef v22 = kCFAllocatorDefault;
LABEL_50:
      CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(*(_DWORD *)(a1 + 24), a3, v22, 0);
      CFTypeRef cf = CFProperty;
      if (!CFProperty)
      {
        if (a3)
        {
          CFTypeID v25 = CFGetTypeID(a3);
          if (v25 == CFStringGetTypeID())
          {
            if (CFEqual(a3, @"IO80211InterfaceWoWWakeUpParams"))
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: Querying %@ on %@ from IORegistryEntryCreateCFProperty returned NULL", "WiFiDeviceCopyProperty", a3, a2 message];
              }
            }
          }
        }
        CFBooleanRef value = 0;
        CFTypeID v27 = CFGetTypeID(v7);
        if (v27 == sub_10001CADC())
        {
          InfoCFDictionaryRef Copy = sub_100169484((uint64_t)v7);
        }
        else
        {
          for (int j = 6; ; --j)
          {
            InfoCFDictionaryRef Copy = Apple80211GetInfoCopy();
            if (InfoCopy != -3905 && InfoCopy != 61 && InfoCopy != 16) {
              break;
            }
            if (!j) {
              break;
            }
            usleep(0x7A120u);
          }
        }
        if (InfoCopy) {
          BOOL v29 = 1;
        }
        else {
          BOOL v29 = value == 0;
        }
        if (v29)
        {
          CFTypeRef CFProperty = 0;
        }
        else
        {
          CFDictionaryRef v32 = CFDictionaryGetValue((CFDictionaryRef)value, a3);
          CFTypeRef cf = v32;
          if (v32)
          {
            CFTypeRef CFProperty = v32;
            CFRetain(v32);
          }
          else if (CFEqual(a3, @"ScaledRate"))
          {
            uint64_t v37 = sub_10001C1B4(a1, a2);
            v46[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            CFTypeRef valuePtr = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            float v45 = 1.0;
            if (v37)
            {
              CFStringRef v38 = v37;
              sub_1000C6EA4((uint64_t)v37, &valuePtr, v46);
              if (valuePtr != v46[0])
              {
                CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)value, @"RATE");
                CFNumberRef v40 = sub_10001EACC(v39);
                float v45 = sub_10005A884((uint64_t)v40, (uint64_t)valuePtr, (uint64_t)v46[0]);
              }
              CFTypeRef CFProperty = CFNumberCreate(v22, kCFNumberFloatType, &v45);
              CFTypeRef cf = CFProperty;
              CFRelease(v38);
            }
            else
            {
              CFTypeRef CFProperty = CFNumberCreate(v22, kCFNumberFloatType, &v45);
              CFTypeRef cf = CFProperty;
            }
          }
          else
          {
            CFTypeRef CFProperty = 0;
          }
          if (value) {
            CFRelease(value);
          }
        }
      }
      if (!a3) {
        return (CFDictionaryRef)cf;
      }
LABEL_79:
      CFTypeID v33 = CFGetTypeID(a3);
      if (v33 != CFStringGetTypeID() || !CFEqual(a3, @"IO80211InterfaceWoWWakeUpParams")) {
        return (CFDictionaryRef)cf;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Querying %@ on %@ received %@", "WiFiDeviceCopyProperty", a3, a2, CFProperty message];
      }
      uint64_t v35 = v34;
      goto LABEL_84;
    }
    LODWORD(valuePtr) = *(_DWORD *)(a1 + 268);
    CFAllocatorRef v22 = kCFAllocatorDefault;
    CFDictionaryRef Copy = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
  }
  CFTypeRef cf = Copy;
  if (!Copy) {
    goto LABEL_50;
  }
  return Copy;
}

CFDictionaryRef sub_10006380C(uint64_t a1, const void *a2)
{
  CFDictionaryRef v11 = 0;
  uint64_t v3 = sub_10001C9E8(a1, a2);
  if (v3)
  {
    uint64_t v4 = (uint64_t)v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == sub_10001CADC())
    {
      sub_100169388(v4, 29, 0, &v11);
    }
    else
    {
      for (int i = 6; ; --i)
      {
        int v8 = Apple80211CopyValue();
        if (v8 != -3905 && v8 != 61 && v8 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2 message];
    }
  }
  return v11;
}

uint64_t sub_1000638F8(int a1, CFStringRef theString, const char *a3, const char *a4, int a5, void *a6, unsigned int a7)
{
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v25 = v13;
  long long v26 = v13;
  CFIndex Length = CFStringGetLength(theString);
  CFTypeID v15 = (char *)malloc_type_malloc(Length + 1, 0x75BE8482uLL);
  if (v15)
  {
    CFTypeID v16 = v15;
    CFIndex v17 = CFStringGetLength(theString);
    CFStringGetCString(theString, v16, v17 + 1, 0);
    bzero(a6, a7);
    strcat((char *)a6, a3);
    *((unsigned char *)a6 + strlen(a3)) = 0;
    size_t v18 = strlen(a3);
    strcat((char *)a6 + v18 + 1, a4);
    size_t v19 = strlen(a3);
    *((unsigned char *)a6 + v19 + strlen(a4) + 1) = 32;
    long long v25 = 0u;
    long long v26 = 0u;
    __strlcpy_chk();
    if (a5) {
      int v20 = 263;
    }
    else {
      int v20 = 262;
    }
    LODWORD(v26) = -1;
    *(void *)((char *)&v26 + 4) = __PAIR64__(a7, v20);
    unint64_t v27 = (unint64_t)a6;
    uint64_t v21 = Apple80211RawGet();
    free(v16);
    if (!v21) {
      return v21;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: failed to alloc interfaceName"];
    }
    uint64_t v21 = 4294963395;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: error %d", "WiFiDeviceGetSetWLDump", v21, v25, v26, v27);
  }
  return v21;
}

uint64_t sub_100063B04(uint64_t a1, void *a2)
{
  CFArrayRef v4 = *(const __CFArray **)(a1 + 5664);
  if (v4 && CFArrayGetCount(v4))
  {
    [a2 addObjectsFromArray:*(void *)(a1 + 5664)];
    return 0;
  }
  CFNumberRef v6 = sub_10001C9E8(a1, *(const void **)(a1 + 112));
  if (!v6)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", *(void *)(a1 + 112) message];
    }
    return 0;
  }
  uint64_t v7 = (uint64_t)v6;
  CFArrayRef theArray = 0;
  CFTypeID v8 = CFGetTypeID(v6);
  if (v8 == sub_10001CADC())
  {
    uint64_t v5 = sub_100169388(v7, 207, 0, &theArray);
LABEL_19:
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        CFIndex v13 = Count;
        for (CFIndex i = 0; i != v13; ++i)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, i);
          if (ValueAtIndex)
          {
            CFDictionaryRef v16 = ValueAtIndex;
            if (CFDictionaryGetValue(ValueAtIndex, @"CHANNELINFO_CH_NUM")) {
              CFArrayAppendValue((CFMutableArrayRef)a2, v16);
            }
          }
        }
      }
      if (theArray) {
        CFRelease(theArray);
      }
    }
  }
  else
  {
    for (int j = 6; ; --j)
    {
      uint64_t v10 = Apple80211CopyValue();
      uint64_t v5 = v10;
      if ((int)v10 <= 15)
      {
        if (v10 != -3905) {
          break;
        }
      }
      else if (v10 != 61 && v10 != 16)
      {
        goto LABEL_32;
      }
      if (!j) {
        break;
      }
      usleep(0x7A120u);
    }
    if (!v10) {
      goto LABEL_19;
    }
LABEL_32:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Could not read APPLE80211_IOC_CHANNELS_INFO err=%d" v5];
    }
  }
  return v5;
}

uint64_t sub_100063CE4(uint64_t a1, const void *a2, __CFArray *a3)
{
  CFArrayRef theArray = 0;
  if (!a3) {
    return 4294963396;
  }
  uint64_t v5 = sub_10001C9E8(a1, a2);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == sub_10001CADC())
    {
      uint64_t v8 = sub_100169388(v6, 27, 0, &theArray);
LABEL_17:
      if (theArray)
      {
        CFIndex Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          CFIndex v13 = Count;
          for (CFIndex i = 0; i != v13; ++i)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, i);
            if (ValueAtIndex)
            {
              CFDictionaryRef v16 = ValueAtIndex;
              if (CFDictionaryGetValue(ValueAtIndex, @"SUP_CHANNEL")) {
                CFArrayAppendValue(a3, v16);
              }
            }
          }
        }
        if (theArray) {
          CFRelease(theArray);
        }
      }
    }
    else
    {
      for (int j = 6; ; --j)
      {
        uint64_t v10 = Apple80211CopyValue();
        uint64_t v8 = v10;
        if ((int)v10 <= 15)
        {
          if (v10 != -3905) {
            break;
          }
        }
        else if (v10 != 61 && v10 != 16)
        {
          goto LABEL_30;
        }
        if (!j) {
          break;
        }
        usleep(0x7A120u);
      }
      if (!v10) {
        goto LABEL_17;
      }
LABEL_30:
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Could not read APPLE80211_IOC_SUPPORTED_CHANNELS err=%d", v8);
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2 message];
    }
    return 0;
  }
  return v8;
}

uint64_t sub_100063EA8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 31) >> 5) & 1;
}

uint64_t sub_100063EB4(uint64_t a1, CFTypeRef cf, const void *a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef v10 = CFRetain(cf);
  CFTypeRef v11 = CFRetain(a3);
  uint64_t v12 = sub_100063F5C(a1, 3u, 0, (uint64_t)v10, (uint64_t)v11, a4, a5, 0, 0);
  if (v12)
  {
    if (a3) {
      CFRelease(a3);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return v12;
}

uint64_t sub_100063F5C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 48) == 1)
    {
      v17[1] = -1431655766;
      unint64_t v24 = 0xAAAAAAAAAAAAAA00;
      v17[0] = a2;
      uint64_t v18 = a4;
      uint64_t v19 = a5;
      uint64_t v20 = a6;
      uint64_t v21 = a7;
      uint64_t v22 = a8;
      uint64_t v23 = 0;
      uint64_t v25 = a3;
      CFIndex v13 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        unint64_t v14 = sub_100068900(a2);
        [v13 WFLog:3, "Enqueuing command type: \"%@\" priority:%ld pending commands: %ld", v14, a3, sub_10015FB38(*(void *)(a1 + 176)) message];
      }
      return sub_10015FB40(*(void *)(a1 + 176), (const UInt8 *)v17, 72, a9);
    }
    else
    {
      return 82;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: null device", "__WiFiDeviceCommandEnqueue"];
    }
    return 4294963396;
  }
}

uint64_t sub_100064084(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4)
{
  CFTypeRef v7 = CFRetain(cf);
  return sub_100063F5C(a1, 4u, 0, (uint64_t)v7, a3, a4, 0, 0, 0);
}

uint64_t sub_1000640EC(uint64_t a1, CFTypeRef cf, const void *a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef v10 = CFRetain(cf);
  CFTypeRef v11 = CFRetain(a3);
  uint64_t v12 = sub_100063F5C(a1, 5u, 0, (uint64_t)v10, (uint64_t)v11, a4, a5, 0, 0);
  if (v12)
  {
    if (a3) {
      CFRelease(a3);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return v12;
}

uint64_t sub_100064194(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4)
{
  if (a1 && *(void *)(a1 + 4672))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: hostap never started. Invoking error callback."];
    }
    sub_100064260(a1, (uint64_t)cf, 4294963391);
  }
  CFTypeRef v9 = CFRetain(cf);
  return sub_100063F5C(a1, 6u, 0, (uint64_t)v9, a3, a4, 0, 0, 0);
}

void sub_100064260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(a1 + 4672);
  CFTypeRef v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 4672);
  uint64_t v8 = *(void *)(a1 + 4680);
  if (a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"Error %d starting WiFi Direct Group, requesting stop...", a3];
    }
    for (int i = 6; ; --i)
    {
      int v11 = Apple80211Set();
      if (v11 != -3905 && v11 != 61 && v11 != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"Successfully started WiFi Direct Group"];
    }
    *(unsigned char *)(a1 + 56) = 1;
  }
  *uint64_t v6 = 0;
  v6[1] = 0;
  if (v7) {
    v7(a1, a2, a3, v8);
  }
  sub_10006E9C0(a1);
  CFIndex v13 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(a1 + 4984);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 4992);
    uint64_t v15 = *(unsigned __int8 *)(a1 + 56);
    v13(a1, 0, v14, v15);
  }
}

void sub_1000643C4(uint64_t a1, int a2)
{
  if (a1)
  {
    if (qword_10027DD68)
    {
      CFArrayRef v4 = "hidden";
      if (!a2) {
        CFArrayRef v4 = "broadcast";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Setting host ap to %s mode", "WiFiDeviceSetMISHiddenOrBroadcastState", v4);
    }
    for (int i = 6; ; --i)
    {
      uint64_t v6 = Apple80211Set();
      uint64_t v7 = v6;
      if ((int)v6 <= 15)
      {
        if (v6 != -3905) {
          break;
        }
      }
      else if (v6 != 61 && v6 != 16)
      {
        goto LABEL_18;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    if (!v6) {
      return;
    }
LABEL_18:
    if (qword_10027DD68)
    {
      if (a2) {
        CFTypeRef v10 = "hidden";
      }
      else {
        CFTypeRef v10 = "broadcast";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Error setting host ap to %s mode, %d", v10, v7);
    }
  }
}

void sub_1000644FC(uint64_t a1, int a2)
{
  BOOL valuePtr = a2 != 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    uint64_t v3 = Mutable;
    for (int i = 6; ; --i)
    {
      uint64_t v5 = Apple80211Get();
      uint64_t v6 = v5;
      if ((int)v5 <= 15)
      {
        if (v5 != -3905) {
          break;
        }
      }
      else if (v5 != 61 && v5 != 16)
      {
        goto LABEL_31;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    if (v5)
    {
LABEL_31:
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, @"%s Failed to get SoftAP LowPower config: err %d", @"WiFiDeviceSetLowPowerMISActive", v6];
      }
      goto LABEL_35;
    }
    CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (!v8) {
      goto LABEL_25;
    }
    CFNumberRef v9 = v8;
    CFDictionaryReplaceValue(v3, @"SOFTAP_LOWPOWER_PS_STATE", v8);
    CFRelease(v9);
    for (int j = 6; ; --j)
    {
      uint64_t v11 = Apple80211Set();
      uint64_t v12 = v11;
      if ((int)v11 <= 15)
      {
        if (v11 != -3905) {
          break;
        }
      }
      else if (v11 != 61 && v11 != 16)
      {
        goto LABEL_33;
      }
      if (!j) {
        break;
      }
      usleep(0x7A120u);
    }
    if (!v11) {
      goto LABEL_25;
    }
LABEL_33:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, @"%s Failed to set SoftAP LowPower config: err %d", @"WiFiDeviceSetLowPowerMISActive", v12];
    }
LABEL_35:
LABEL_25:
    CFRelease(v3);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s Failed to create dict" : @"WiFiDeviceSetLowPowerMISActive"];
    }
  }
}

CFMutableDictionaryRef sub_100064734()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v2 = Apple80211Get();
      uint64_t v3 = v2;
      if ((int)v2 <= 15)
      {
        if (v2 != -3905) {
          break;
        }
      }
      else if (v2 != 61 && v2 != 16)
      {
        goto LABEL_16;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    if (!v2) {
      return Mutable;
    }
LABEL_16:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s Failed to get SoftAP LowPower Stats: err %d", "WiFiDeviceCopyHotspotLowPowerStats", v3)];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s Failed to create dict" args:v7];
    }
  }
  return Mutable;
}

void sub_100064860(uint64_t a1, char a2, __int16 a3, const void *a4)
{
  char valuePtr = a2;
  __int16 v17 = a3;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    uint64_t v6 = Mutable;
    CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
    if (v7)
    {
      CFNumberRef v8 = v7;
      CFDictionarySetValue(v6, @"HostApBatteryLevel", v7);
      CFRelease(v8);
      if (!a4) {
        goto LABEL_6;
      }
      CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v17);
      if (v9)
      {
        CFNumberRef v10 = v9;
        CFDictionarySetValue(v6, @"HostApWiFiNetworkFlag", v9);
        CFRelease(v10);
        CFDictionarySetValue(v6, @"SSID_STR", a4);
LABEL_6:
        for (int i = 6; ; --i)
        {
          uint64_t v12 = Apple80211Set();
          uint64_t v13 = v12;
          if ((int)v12 <= 15)
          {
            if (v12 != -3905) {
              break;
            }
          }
          else if (v12 != 61 && v12 != 16)
          {
            goto LABEL_23;
          }
          if (!i) {
            break;
          }
          usleep(0x7A120u);
        }
        if (!v12) {
          goto LABEL_17;
        }
LABEL_23:
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:4, "%s Failed to set SoftAP IE config: err %d", "WiFiDeviceSetWiFiNetworkInHotspotIe", v13];
        }
      }
    }
LABEL_17:
    CFRelease(v6);
    return;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s Failed to create dict" : @"WiFiDeviceSetWiFiNetworkInHotspotIe"];
  }
}

void sub_100064A58(uint64_t a1, char a2, const void *a3)
{
  char valuePtr = a2;
  if (a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      uint64_t v5 = Mutable;
      CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
      if (v6)
      {
        CFNumberRef v7 = v6;
        CFDictionarySetValue(v5, @"HostSoftapNanCapabilityFlag", v6);
        CFRelease(v7);
        CFDictionarySetValue(v5, @"HostSoftapNanServiceName", a3);
        for (int i = 6; ; --i)
        {
          uint64_t v9 = Apple80211Set();
          uint64_t v10 = v9;
          if ((int)v9 <= 15)
          {
            if (v9 != -3905) {
              break;
            }
          }
          else if (v9 != 61 && v9 != 16)
          {
            goto LABEL_22;
          }
          if (!i) {
            break;
          }
          usleep(0x7A120u);
        }
        if (!v9) {
          goto LABEL_15;
        }
LABEL_22:
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s Failed to set SoftAP NAN IE config: err %d" arguments:((id)qword_10027DD68), @"WiFiDeviceSetNanCapabilityInHotspotIe", v10];
        }
      }
LABEL_15:
      CFRelease(v5);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s Failed to create dict" : @"WiFiDeviceSetNanCapabilityInHotspotIe"];
      }
    }
  }
}

void sub_100064C0C(uint64_t a1)
{
  char valuePtr = 1;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    uint64_t v3 = Mutable;
    CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
    if (v4)
    {
      CFNumberRef v5 = v4;
      CFDictionarySetValue(v3, @"HostApEnabled", v4);
      CFRelease(v5);
      if (*(void *)(a1 + 16))
      {
        for (int i = 6; ; --i)
        {
          uint64_t v7 = Apple80211Set();
          uint64_t v8 = v7;
          if ((int)v7 <= 15)
          {
            if (v7 != -3905) {
              break;
            }
          }
          else if (v7 != 61 && v7 != 16)
          {
            goto LABEL_19;
          }
          if (!i) {
            break;
          }
          usleep(0x7A120u);
        }
        if (!v7) {
          goto LABEL_13;
        }
LABEL_19:
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s Failed to set SoftAP CSA config: err %d", "WiFiDeviceSetSoftApCsaNanPh", v8);
        }
      }
    }
LABEL_13:
    CFRelease(v3);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s Failed to create dict" : @"WiFiDeviceSetSoftApCsaNanPh"];
    }
  }
}

void sub_100064DB4(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned int a10)
{
  unsigned int v16 = a10;
  uint64_t v18 = *(void (**)(uint64_t, const void *, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, unsigned int))(a6 + 5496);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s for ssid [%@] bssid [%@] rssi [%ld] ifname [%@] linkEvent %d", "WiFiDeviceSetNanNetworkAssociation", a2, a1, a3, a4, a10 message];
  }
  uint64_t v20 = a8;
  if (a10 == 1)
  {
    uint64_t valuePtr = 10;
    CFBooleanRef v34 = a4;
    if (sub_10006EE64(a6))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Internet Relay Interface Already Exists %@", "__WiFiDeviceCreateInternetRelayInterface", a4 message];
      }
    }
    else
    {
      CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
      if (v21)
      {
        CFNumberRef v22 = v21;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (Mutable)
        {
          unint64_t v24 = Mutable;
          CFDictionaryAddValue(Mutable, @"VIRT_IF_ROLE", v22);
          uint64_t v25 = a4;
          CFDictionaryAddValue(v24, @"VIRT_IF_NAME", a4);
          uint64_t v27 = sub_10006E3AC(a6, v26, v24, &v34);
          if (v27)
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4, "Error creating %@  interface %d", v34, v27 message];
            }
          }
          else if (qword_10027DD68)
          {
            [(id)qword_10027DD68 WFLog:4, "%s: Created %@ interface", "__WiFiDeviceCreateInternetRelayInterface", v34 message];
          }
          CFRelease(v22);
          CFRelease(v24);
          uint64_t v20 = a8;
          a4 = v25;
          unsigned int v16 = a10;
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: null intfDict."];
          }
          CFRelease(v22);
        }
        goto LABEL_13;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, "%s: null role.", "__WiFiDeviceCreateInternetRelayInterface", v31];
      }
    }
  }
LABEL_13:
  if (v18) {
    v18(a6, a4, a3, a5, *(void *)(a6 + 5504), a7, v20, a9, v16);
  }
}

void sub_10006508C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(a6 + 5512);
  if (v10) {
    v10(a6, a4, a3, a5, *(void *)(a6 + 5520));
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s for ssid [%@] bssid [%@] rssi [%ld] ifname [%@]", "WiFiDeviceSetNanNetworkTerminated", a2, a1, a3, a4 message];
  }
}

uint64_t sub_100065144(uint64_t a1, CFTypeRef cf, const void *a3, uint64_t a4, uint64_t a5, const void *a6)
{
  CFTypeRef v12 = CFRetain(cf);
  if (a3)
  {
    CFTypeRef v13 = CFRetain(a3);
    if (a6)
    {
LABEL_3:
      CFTypeRef v14 = CFRetain(a6);
      goto LABEL_6;
    }
  }
  else
  {
    CFTypeRef v13 = 0;
    if (a6) {
      goto LABEL_3;
    }
  }
  CFTypeRef v14 = 0;
LABEL_6:
  uint64_t v15 = sub_100063F5C(a1, 0xAu, 0, (uint64_t)v12, (uint64_t)v13, a4, a5, (uint64_t)v14, 0);
  if (v15)
  {
    if (cf) {
      CFRelease(cf);
    }
    if (a3) {
      CFRelease(a3);
    }
    if (a6) {
      CFRelease(a6);
    }
  }
  return v15;
}

uint64_t sub_100065228(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  CFIndex v35 = 72;
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v34 = 0;
  if (!sub_10000D7FC(*(void *)(a1 + 176), &v36, &v35, &v34)
    && *(unsigned char *)(v36 + 56) == 1
    && *(_DWORD *)v36 == 12)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Flushing out pending ranging request...", @"WiFiDeviceStopAwdl"];
    }
    sub_100065590((uint64_t *)a1, (uint64_t)a2, 0, 4294963365);
    sub_100065DEC(a1, (uint64_t)a2);
  }
  int v12 = MGGetBoolAnswer();
  id v13 = [+[WiFiUsageMonitor sharedInstance] lastRangingSessionMetric];
  CFDictionaryRef v14 = *(const __CFDictionary **)(a1 + 4704);
  if (v14)
  {
    CFNumberRef Value = CFDictionaryGetValue(v14, @"AWDL_INFO_ASSISTED_DISCOVERY_METRIC");
    if (v12)
    {
      if (v13 && Value)
      {
        id v33 = [v13 objectForKeyedSubscript:@"LinkLatency"];
        id v16 = [v13 objectForKeyedSubscript:@"RangingLatency"];
        id v17 = [v13 objectForKeyedSubscript:@"MeasurementStatus"];
        id v18 = [v13 objectForKeyedSubscript:@"MeasurementFlags"];
        double Current = CFAbsoluteTimeGetCurrent();
        double v20 = *(double *)(a1 + 4720);
        if (([v18 unsignedIntegerValue] & 0x8000) != 0) {
          CFNumberRef v21 = +[NSString stringWithFormat:@"Ranging Failure (Corrupted Sample)"];
        }
        else {
          CFNumberRef v21 = 0;
        }
        if ([v17 integerValue])
        {
          id v32 = [v17 integerValue];
          CFStringRef v22 = @"Ranging Failure (%d)";
        }
        else
        {
          if ((unint64_t)[v16 unsignedIntegerValue] < 0x3E9)
          {
            if ((unint64_t)[v33 unsignedIntegerValue] < 0x3E9)
            {
              if (*(double *)(a1 + 4720) == 0.0 || Current - v20 <= 4.0)
              {
LABEL_20:
                if (v21)
                {
                  CFDictionaryRef v24 = (const __CFDictionary *)+[NSMutableDictionary dictionary];
                  if (v24)
                  {
                    CFDictionaryRef v25 = v24;
                    [(__CFDictionary *)v24 setObject:v21 forKey:@"CHIP_RESET_TRIGGER"];
                    sub_100065EC0(a1, v25);
                  }
                }
                goto LABEL_23;
              }
              uint64_t v23 = +[NSString stringWithFormat:@"Slow PAU Attempt (%ds)", (int)(Current - v20)];
            }
            else
            {
              uint64_t v23 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Slow PAU Bringup (%dms)", [v33 unsignedIntegerValue]);
            }
LABEL_19:
            CFNumberRef v21 = v23;
            goto LABEL_20;
          }
          id v32 = [v16 unsignedIntegerValue];
          CFStringRef v22 = @"Slow PAU Ranging (%dms)";
        }
        uint64_t v23 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v22, v32);
        goto LABEL_19;
      }
    }
  }
LABEL_23:
  uint64_t v26 = *(const void **)(a1 + 4704);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a1 + 4704) = 0;
  }
  uint64_t v27 = *(const void **)(a1 + 4712);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(a1 + 4712) = 0;
  }
  *(void *)(a1 + 4720) = 0;
  CFTypeRef v28 = CFRetain(a2);
  if (a3) {
    CFTypeRef v29 = CFRetain(a3);
  }
  else {
    CFTypeRef v29 = 0;
  }
  uint64_t v30 = sub_100063F5C(a1, 0xBu, 0, (uint64_t)v28, (uint64_t)v29, a4, a5, 0, 0);
  if (v30)
  {
    if (a2) {
      CFRelease(a2);
    }
    if (a3) {
      CFRelease(a3);
    }
  }
  return v30;
}

void sub_100065590(uint64_t *a1, uint64_t a2, const __CFArray *a3, uint64_t a4)
{
  uint64_t v7 = a1;
  uint64_t v57 = (void (*)(uint64_t *, uint64_t, __CFArray *, uint64_t, uint64_t))a1[643];
  uint64_t v55 = a1[644];
  uint64_t v75 = 0;
  CFIndex v76 = 72;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Completed APPLE80211_IOC_RANGING_START on %@ (%d)", a2, a4 message];
  }
  if ((a4 + 3933) <= 1 && !v7[588])
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: ranging error while AWDL session not requested. Overriding error code to %d", "__WiFiDeviceProcessRangingDoneEvent", 4294963368);
    }
    a4 = 4294963368;
  }
  uint64_t v58 = a4;
  uint64_t v56 = v7 + 643;
  unint64_t v77 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 && (CFArrayGetCount(a3) > 4 ? (CFIndex v10 = 4) : (CFIndex v10 = CFArrayGetCount(a3)), v10 >= 1))
  {
    CFIndex v11 = v10;
    CFIndex v12 = 0;
    id v13 = 0;
    CFArrayRef v59 = a3;
    CFDictionaryRef v60 = v7;
    CFIndex v61 = v10;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v12);
      if (ValueAtIndex)
      {
        CFDictionaryRef v15 = ValueAtIndex;
        CFDictionaryRef v62 = v13;
        CFNumberRef Value = CFDictionaryGetValue(ValueAtIndex, @"STATION_MAC");
        id v17 = CFDictionaryGetValue(v15, @"RANGING_DISTANCE");
        char valuePtr = 0;
        __int16 v73 = 0;
        __int16 v72 = 0;
        CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(v15, @"RANGING_VALID_COUNT");
        if (v18) {
          CFNumberGetValue(v18, kCFNumberSInt8Type, &valuePtr);
        }
        CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(v15, @"RANGING_STATUS");
        if (v19) {
          CFNumberGetValue(v19, kCFNumberSInt16Type, &v72);
        }
        CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(v15, @"RANGING_FLAGS");
        if (v20) {
          CFNumberGetValue(v20, kCFNumberSInt16Type, &v73);
        }
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: peer %@ status %d flags 0x%x distance %@m validSamples %d", "__WiFiDeviceProcessRangingDoneEvent", Value, v72, v73, v17, valuePtr message];
        }
        CFArrayRef v22 = (const __CFArray *)CFDictionaryGetValue(v15, @"RANGING_RESULTS");
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v15);
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        if (v22 && CFArrayGetCount(v22) >= 1)
        {
          CFIndex v25 = 0;
          do
          {
            CFDictionaryRef v26 = (const __CFDictionary *)CFArrayGetValueAtIndex(v22, v25);
            if (v26)
            {
              CFDictionaryRef v27 = v26;
              __int16 v71 = 0;
              unsigned int v70 = 0;
              __int16 v69 = 0;
              __int16 v68 = 0;
              int v66 = 0;
              unsigned int v67 = 0;
              unsigned int v64 = 0;
              int v65 = 0;
              unsigned __int16 v63 = 0;
              CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(v26, @"RANGING_RTT_STATUS");
              if (v28) {
                CFNumberGetValue(v28, kCFNumberSInt16Type, &v66);
              }
              CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_RSSI");
              if (v29) {
                CFNumberGetValue(v29, kCFNumberSInt16Type, (char *)&v65 + 2);
              }
              CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_RTT_FLAGS");
              if (v30) {
                CFNumberGetValue(v30, kCFNumberSInt16Type, &v65);
              }
              CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_RTT");
              if (v31) {
                CFNumberGetValue(v31, kCFNumberSInt32Type, &v64);
              }
              CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_CHANNEL");
              if (v32) {
                CFNumberGetValue(v32, kCFNumberSInt16Type, &v63);
              }
              CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_PHY_ERROR");
              if (v33) {
                CFNumberGetValue(v33, kCFNumberSInt32Type, &v70);
              }
              CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_CORE_ID");
              if (v34) {
                CFNumberGetValue(v34, kCFNumberSInt8Type, (char *)&v71 + 1);
              }
              CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_BER");
              if (v35) {
                CFNumberGetValue(v35, kCFNumberSInt8Type, &v71);
              }
              CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_SNR");
              if (v36) {
                CFNumberGetValue(v36, kCFNumberSInt16Type, &v69);
              }
              CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_PEER_CORE_ID");
              if (v37) {
                CFNumberGetValue(v37, kCFNumberSInt8Type, (char *)&v68 + 1);
              }
              CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_PEER_PHY_ERROR");
              if (v38) {
                CFNumberGetValue(v38, kCFNumberSInt32Type, &v67);
              }
              CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_PEER_BER");
              if (v39) {
                CFNumberGetValue(v39, kCFNumberSInt8Type, &v68);
              }
              CFNumberRef v40 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_PEER_SNR");
              if (v40) {
                CFNumberGetValue(v40, kCFNumberSInt16Type, (char *)&v66 + 2);
              }
              memset(v79, 0, 64);
              memset(v78, 0, sizeof(v78));
              Apple80211GetRangingPhyErrorString();
              Apple80211GetRangingPhyErrorString();
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:3, @"RTT[%ld]: Status=%d, RTT=%d RSSI=%d SNR=%d Core=%d BitFlip=%d PHYErr=%d(%s) Peer-SNR=%d Peer-BitFlip=%d Peer-PHYErr=%d(%s)", v25, (__int16)v66, v64, SHIWORD(v65), v69, SHIBYTE(v71), (char)v71, v70, v79, SHIWORD(v66), (char)v68, v67, v78];
              }
              unsigned int v42 = v67;
              unsigned int v43 = v67 & 0xFFFFFD13;
              v67 &= 0xFFFFFD13;
              if ((char)v68 < 0)
              {
                unsigned int v43 = v42 & 0xFFFFFD03;
                unsigned int v67 = v42 & 0xFFFFFD03;
              }
              if (!(_WORD)v66
                && !v43
                && (v63 - 1 > 0xC || (char)v71 <= 10)
                && (v63 - 36 >= 0x1D && v63 - 100 >= 0x2D && v63 - 142 > 0x17
                 || (char)v71 <= 40))
              {
                CFArrayAppendValue(Mutable, v27);
              }
              int v44 = +[WiFiUsageMonitor sharedInstance];
              [(WiFiUsageMonitor *)v44 addRangingRttSampleWithRssi:SHIWORD(v65) rtt:(int)v64 snr:v69 flags:(__int16)v65 channel:(__int16)v63 coreId:SHIBYTE(v71) bitErrorRate:(char)v71 phyError:(int)v70 andPeerSnr:SHIWORD(v66) andPeerCoreId:SHIBYTE(v68) andPeerBitErrorRate:(char)v68 andPeerPhyError:(int)v67];
            }
            CFIndex Count = CFArrayGetCount(v22);
            if ((unint64_t)v25 > 7) {
              break;
            }
            ++v25;
          }
          while (v25 < Count);
        }
        LOWORD(v70) = -21846;
        if (Mutable) {
          __int16 v46 = CFArrayGetCount(Mutable);
        }
        else {
          __int16 v46 = 0;
        }
        uint64_t v7 = v60;
        LOWORD(v70) = v46;
        id v13 = v62;
        CFNumberRef v47 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v70);
        CFDictionarySetValue(MutableCopy, @"RANGING_VALID_COUNT", v47);
        if (v47) {
          CFRelease(v47);
        }
        CFDictionaryRef v48 = (const __CFDictionary *)v60[588];
        CFIndex v11 = v61;
        if (v48)
        {
          v79[0] = 0;
          CFNumberRef v49 = (const __CFNumber *)CFDictionaryGetValue(v48, @"AWDL_INFO_SUPPORTED_CHANNEL_FLAGS");
          if (v49) {
            CFNumberGetValue(v49, kCFNumberSInt32Type, v79);
          }
          if (v79[0])
          {
            LODWORD(v78[0]) = HIWORD(v79[0]);
            CFNumberRef v50 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v78);
            if (v50)
            {
              CFNumberRef v51 = v50;
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: setting ranging feature flag to %@", "__WiFiDeviceProcessRangingDoneEvent", v51 message];
              }
              CFDictionarySetValue(MutableCopy, @"RANGING_FEATURES", v51);
              CFRelease(v51);
              id v13 = v62;
            }
            CFIndex v11 = v61;
          }
        }
        CFDictionarySetValue(MutableCopy, @"RANGING_RESULTS", Mutable);
        if (v13 || (id v13 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks)) != 0) {
          CFArrayAppendValue(v13, MutableCopy);
        }
        CFDictionaryRef v53 = +[WiFiUsageMonitor sharedInstance];
        [(WiFiUsageMonitor *)v53 rangingCompletedWithValidCount:valuePtr resultStatus:(int)v58 resultFlags:v73];
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
        a3 = v59;
      }
      ++v12;
    }
    while (v12 < v11);
  }
  else
  {
    id v13 = 0;
  }
  CFNumberRef v54 = (void (*)(uint64_t *, uint64_t, __CFArray *, uint64_t))v7[645];
  if (v54) {
    v54(v7, a2, v13, v7[646]);
  }
  void *v56 = 0;
  v56[1] = 0;
  if (v57) {
    v57(v7, a2, v13, v58, v55);
  }
  if (!sub_10000D7FC(v7[22], &v77, &v76, &v75) && *(unsigned char *)(v77 + 56) == 1 && *(_DWORD *)v77 == 12) {
    sub_10006E9C0((uint64_t)v7);
  }
  if (v13) {
    CFRelease(v13);
  }
}

uint64_t sub_100065DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294963396;
  if (a1 && a2)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v5 = Apple80211RangingStopAsync();
      uint64_t v2 = v5;
      if (v5 != -3905 && v5 != 61 && v5 != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: ifName %@, error %d", "WiFiDeviceAbortRanging", a2, v2 message];
    }
  }
  return v2;
}

void sub_100065EC0(uint64_t a1, const __CFDictionary *a2)
{
  if (a1)
  {
    if (a2)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Calling ChipREset", "WiFiDeviceChipReset")];
      }
      for (int i = 6; ; --i)
      {
        uint64_t v5 = Apple80211Set();
        uint64_t v6 = v5;
        if (v5 != -3905 && v5 != 61 && v5 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (_os_feature_enabled_impl())
      {
        id v8 = objc_alloc_init((Class)NSMutableDictionary);
        if (CFDictionaryGetValue(a2, @"CHIP_RESET_TRIGGER")) {
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, @"CHIP_RESET_TRIGGER");
        }
        else {
          CFStringRef Value = @"UnknownReason";
        }
        uint64_t v13 = *((void *)&WADeviceAnalyticsRecoveryInfo + 1);
        v16[0] = +[NSDate date];
        v16[1] = @"APPLE80211_IOC_RESET_CHIP";
        long long v14 = *((_OWORD *)&WADeviceAnalyticsRecoveryInfo + 2);
        v16[2] = Value;
        uint64_t v15 = *((void *)&WADeviceAnalyticsRecoveryInfo + 6);
        v16[3] = +[NSNumber numberWithInt:v6];
        [v8 addEntriesFromDictionary:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, &v13, 4)];
        id v10 = +[AnalyticsProcessor sharedAnalyticsProcessor];
        [v10 processWAMessageMetric:WADeviceAnalyticsRecoveryInfo data:v8];
      }
      return;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: triggerReasonInfo is NULL!", "WiFiDeviceChipReset");
    }
    CFIndex v12 = v3;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: deviceRef is NULL!", @"WiFiDeviceChipReset"];
    }
    CFIndex v12 = v11;
  }
}

uint64_t sub_100066150(uint64_t a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: entering" args:("WiFiDeviceOpen", 0x0)];
  }
  if (*(unsigned char *)(a1 + 52))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: exiting, Error: already open", @"WiFiDeviceOpen"];
    }
LABEL_41:
    return 1;
  }
  *(unsigned char *)(a1 + 52) = 1;
  uint64_t v4 = Apple80211Open();
  if (v4)
  {
    uint64_t v18 = v4;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: Error: Apple80211Open failed, %d", @"WiFiDeviceOpen", v18];
    }
  }
  else
  {
    uint64_t v5 = Apple80211BindToInterfaceWithParams();
    if (!v5)
    {
      for (int i = 6; ; --i)
      {
        int PowerState = Apple80211GetPowerState();
        if (PowerState != -3905 && PowerState != 61 && PowerState != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Device power xpc_activity_state_t state = %s", sub_10005A970(*(_DWORD *)(a1 + 48)));
      }
      for (int j = 6; ; --j)
      {
        int v11 = Apple80211CopyValue();
        if (v11 != -3905 && v11 != 61 && v11 != 16) {
          break;
        }
        if (!j) {
          break;
        }
        usleep(0x7A120u);
      }
      for (int k = 6; ; --k)
      {
        int v14 = Apple80211CopyValue();
        if (v14 != -3905 && v14 != 61 && v14 != 16) {
          break;
        }
        if (!k) {
          break;
        }
        usleep(0x7A120u);
      }
      sub_10000DE34(a1, *(const void **)(a1 + 112), *(__CFArray **)(a1 + 5656));
      sub_1000666E8(a1);
      id v16 = *(NSObject **)(a1 + 64);
      if (v16) {
        sub_10006695C(a1, v16);
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: exiting", "WiFiDeviceOpen")];
      }
      goto LABEL_41;
    }
    uint64_t v20 = v5;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: Error: Apple80211BindToInterface failed, %d", @"WiFiDeviceOpen", v20];
    }
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: exiting, Error: found", "WiFiDeviceOpen")];
  }
  return 0;
}

void sub_100066578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"Enter: %s:%d\n" args:@"__WiFiDeviceServiceNotificationCallback", 4108];
  }
  if (a5)
  {
    sub_10006A7DC((uint64_t)a5, 0);
    uint64_t v7 = (void (*)(void *, void, void))a5[544];
    if (v7) {
      v7(a5, a5[14], a5[545]);
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Exit: %s:%d\n", "__WiFiDeviceServiceNotificationCallback", 4121);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s:%d\n", "__WiFiDeviceServiceNotificationCallback", 4111);
    }
  }
}

CFNumberRef sub_100066670(const __CFNumber *result, uint64_t a2)
{
  if (result)
  {
    unsigned int valuePtr = -1431655766;
    CFStringRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    if (valuePtr <= 0x92) {
      *(unsigned char *)(a2 + ((unint64_t)valuePtr >> 3)) |= 1 << (valuePtr & 7);
    }
  }
  return result;
}

uint64_t sub_1000666DC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 30) >> 4) & 1;
}

CFMutableArrayRef sub_1000666E8(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 5664);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 5664) = 0;
  }
  CFMutableArrayRef result = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(a1 + 5664) = result;
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(const void **)(a1 + 112);
    CFArrayRef theArray = 0;
    uint64_t v6 = sub_10001C9E8(a1, v5);
    if (v6)
    {
      uint64_t v7 = (uint64_t)v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == sub_10001CADC())
      {
        uint64_t v9 = sub_100169388(v7, 207, 0, &theArray);
LABEL_18:
        if (theArray)
        {
          CFIndex Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            CFIndex v14 = Count;
            for (CFIndex i = 0; i != v14; ++i)
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, i);
              if (ValueAtIndex)
              {
                CFDictionaryRef v17 = ValueAtIndex;
                if (CFDictionaryGetValue(ValueAtIndex, @"CHANNELINFO_CH_NUM")) {
                  CFArrayAppendValue(v4, v17);
                }
              }
            }
          }
          if (theArray)
          {
            CFRelease(theArray);
            CFArrayRef theArray = 0;
          }
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: APPLE80211_IOC_CHANNELS_INFO returned %ld channels in list", "WiFiDeviceCopyChannelInfo", CFArrayGetCount(v4)];
        }
      }
      else
      {
        for (int j = 6; ; --j)
        {
          uint64_t v11 = Apple80211CopyValue();
          uint64_t v9 = v11;
          if ((int)v11 <= 15)
          {
            if (v11 != -3905) {
              break;
            }
          }
          else if (v11 != 61 && v11 != 16)
          {
            goto LABEL_38;
          }
          if (!j) {
            break;
          }
          usleep(0x7A120u);
        }
        if (!v11) {
          goto LABEL_18;
        }
LABEL_38:
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"Could not read APPLE80211_IOC_CHANNELS_INFO err=%d" v9, v21];
        }
      }
      if (v9)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Device return error %d for supported channels\n", "WiFiDeviceUpdateChannelInfo", v9);
        }
        return 0;
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", v5 message];
      }
    }
    return (CFMutableArrayRef)1;
  }
  return result;
}

void sub_10006695C(uint64_t a1, NSObject *a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: entering" : @"WiFiDeviceScheduleWithQueue"];
  }
  *(void *)(a1 + 64) = a2;
  if (*(unsigned char *)(a1 + 52))
  {
    uint64_t v5 = *(NSObject **)(a1 + 72);
    if (v5
      || (uint64_t v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2),
          (*(void *)(a1 + 72) = v5) != 0))
    {
      dispatch_set_context(v5, (void *)a1);
      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)sub_1000692CC);
      dispatch_activate(*(dispatch_object_t *)(a1 + 72));
    }
    uint64_t v6 = *(NSObject **)(a1 + 80);
    if (v6
      || (uint64_t v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2),
          (*(void *)(a1 + 80) = v6) != 0))
    {
      dispatch_set_context(v6, (void *)a1);
      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 80), (dispatch_function_t)sub_10006938C);
      dispatch_activate(*(dispatch_object_t *)(a1 + 80));
    }
    uint64_t v7 = *(NSObject **)(a1 + 88);
    if (v7
      || (uint64_t v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2),
          (*(void *)(a1 + 88) = v7) != 0))
    {
      dispatch_set_context(v7, (void *)a1);
      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 88), (dispatch_function_t)sub_10006946C);
      dispatch_activate(*(dispatch_object_t *)(a1 + 88));
    }
    CFTypeID v8 = *(NSObject **)(a1 + 5712);
    if (v8
      || (CFTypeID v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2),
          (*(void *)(a1 + 5712) = v8) != 0))
    {
      dispatch_set_context(v8, (void *)a1);
      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 5712), (dispatch_function_t)sub_1000694C0);
      dispatch_activate(*(dispatch_object_t *)(a1 + 5712));
    }
    uint64_t v9 = *(NSObject **)(a1 + 5768);
    if (v9
      || (uint64_t v9 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2),
          (*(void *)(a1 + 5768) = v9) != 0))
    {
      dispatch_set_context(v9, (void *)a1);
      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 5768), (dispatch_function_t)sub_1000694D0);
      dispatch_activate(*(dispatch_object_t *)(a1 + 5768));
    }
    if (!*(_DWORD *)(a1 + 104)
      && IOServiceAddInterestNotification(*(IONotificationPortRef *)(a1 + 96), *(_DWORD *)(a1 + 24), "IOGeneralInterest", (IOServiceInterestCallback)nullsub_4, (void *)a1, (io_object_t *)(a1 + 104)))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: IOServiceAddInterestNotification failed" : @"WiFiDeviceScheduleWithQueue"];
      }
    }
    else
    {
      IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)(a1 + 96), *(dispatch_queue_t *)(a1 + 64));
      if (Apple80211EventMonitoringInit2())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: Unable to init event monitoring" args:("WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_ASSOC_DONE failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_SCAN_DONE failed" withArguments:@"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Error: monitoring APPLE80211_M_POWER_CHANGED failed", @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:4, "%s: Error: monitoring APPLE80211_M_SSID_CHANGED failed", "WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_BSSID_CHANGED failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_ROAMED failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_ROAM_STATUS failed" : @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Error: monitoring APPLE80211_M_SUPPLICANT_EVENT failed", @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_ROAM_SCAN_START failed" arguments:@"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Error: monitoring APPLE80211_M_ROAM_SCAN_END failed", @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_ROAM_PREP failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_LINK_CHANGED failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Error: monitoring APPLE80211_M_MIC_ERROR_UCAST failed", @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_MIC_ERROR_MCAST failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:4, "%s: Error: monitoring APPLE80211_M_INT_MIT_CHANGED failed", "WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_MODE_CHANGED failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_DECRYPTION_FAILURE failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Error: monitoring APPLE80211_M_BGSCAN_NET_DISCOVERED failed", @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_WIFI_DIRECT_GROUP_STARTED failed", "WiFiDeviceScheduleWithQueue")
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_STA_ARRIVE failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_STA_LEAVE failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_BLACKLIST_NETWORK failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_RESUME_SCAN failed" arguments:@"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Error: monitoring APPLE80211_M_BGSCAN_SUSPENDED failed", @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_BGSCAN_RESUMED failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_RSSI_CHANGED failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_LQM_TX_STATS failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_HOMECHAN_QUAL_CHANGED failed" : @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Error: monitoring APPLE80211_M_WEIGHT_AVG_LQM_UPDATE failed", @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_BT_COEX_MODE_STATS_EVENT failed" args:("WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_SIB_EVENT failed" arguments:qword_10027DD70];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_LINK_DOWN_DEBOUNCE_FAILED failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, "%s: Error: monitoring APPLE80211_M_REALTIME_SESSION_NOTIFICATION failed", "WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_OBSS_MIT_NOTIFICATION failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Error: monitoring APPLE80211_M_DRIVER_AVAILABLE failed", @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_GAS_DONE failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_BGSCAN_CACHED_NETWORK_AVAILABLE failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:4, "%s: Error: monitoring APPLE80211_M_SCAN_BACKOFF_REPORT failed", "WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_DUMP_LOGS failed" : @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Error: monitoring APPLE80211_M_RANGING_MEASUREMENT_DONE failed", @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Error: monitoring APPLE80211_M_TX_FAIL_HISTORY_EVENT failed", @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_TX_INHIBIT failed" : @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_LOCAL_THERMAL_MITIGATION failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, "%s: Error: monitoring APPLE80211_M_BSS_STEERING_REQUEST_EVENT failed", "WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Error: monitoring APPLE80211_M_SOFTAP_LPM failed", @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_WIFI_NETWORK_INFO_UPDATE failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_ACTION_FRAME_EVENT failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_DPS failed" arguments:@"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_SLOW_WIFI failed" : @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_PRUNE failed" : @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_SLOWWIFI_PROBE_TRIGGER failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_SLOWWIFI_USERINPUT_TRIGGER failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_COUNTRY_CODE_CHANGED failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_LQM_CRASHTRACER failed" : @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Error: monitoring APPLE80211_M_TE_CRITICAL_TRAFFIC_IND failed", @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_BEACON_CACHE_UPDATED failed" arguments:("WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_TRIGGER_TTR failed" arguments:&"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (_os_feature_enabled_impl() && Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_SENSING_DONE failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: monitoring APPLE80211_M_COLOCATED_CACHE_EVENT failed" : @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_P2P_PEER_COUNTRY_CODE failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_ENV_BSS_INFO failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: monitoring APPLE80211_M_NDD_REPORT failed", "WiFiDeviceScheduleWithQueue")];
        }
      }
      else if (Apple80211StartMonitoringEvent())
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Error: monitoring APPLE80211_M_NDD_DONE failed", @"WiFiDeviceScheduleWithQueue"];
        }
      }
      else
      {
        if (!Apple80211StartMonitoringEvent())
        {
          sub_100152BD4(*(void *)(a1 + 144), (uint64_t)sub_1000696BC, a1);
          sub_100152BE0(*(void *)(a1 + 144), *(NSObject **)(a1 + 64));
          if (*(void *)(a1 + 152)) {
            goto LABEL_104;
          }
          context.versioint n = 0;
          memset(&context.retain, 0, 24);
          context.info = (void *)a1;
          SCDynamicStoreRef v10 = SCDynamicStoreCreate(kCFAllocatorDefault, @"WiFiDevice", (SCDynamicStoreCallBack)sub_100069718, &context);
          *(void *)(a1 + 152) = v10;
          if (v10)
          {
            sub_100069B28(a1);
            if (!SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 152), *(dispatch_queue_t *)(a1 + 64)))
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error setting dynamic store queue.", "WiFiDeviceScheduleWithQueue")];
              }
            }
            if (SCDynamicStoreSetDisconnectCallBack())
            {
LABEL_104:
              CFIndex v14 = *(void **)(a1 + 176);
              if (v14) {
                sub_1001602BC(v14, *(dispatch_queue_t *)(a1 + 64), (void (__cdecl *)(void *))sub_100069EF8, (void *)a1);
              }
              sub_10006A104(a1);
              if (*(unsigned char *)(a1 + 32))
              {
                context.versioint n = 6;
                CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &context);
                if (v16)
                {
                  CFNumberRef v17 = v16;
                  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                  if (Mutable)
                  {
                    CFDictionaryRef v19 = Mutable;
                    CFDictionaryAddValue(Mutable, @"VIRT_IF_ROLE", v17);
                    uint64_t v20 = *(const void **)(a1 + 5976);
                    if (v20)
                    {
                      CFRelease(v20);
                      *(void *)(a1 + 5976) = 0;
                    }
                    *(void *)(a1 + 5976) = sub_100167D68(a1, (uint64_t)kCFAllocatorDefault, v19, *(void *)(a1 + 64), (void (*)(uint64_t, uint64_t))sub_10007BB90);
                    CFRelease(v17);
                    CFDictionaryRef v21 = v19;
                  }
                  else
                  {
                    if (qword_10027DD68) {
                      [((id)qword_10027DD68) WFLog:4 message:@"%s: null intfDict." args:("__WiFiDeviceCreateAwdlInterface")];
                    }
                    CFDictionaryRef v21 = v17;
                  }
                  CFRelease(v21);
                  goto LABEL_116;
                }
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4 message:@"%s: null role." args:__WiFiDeviceCreateAwdlInterface];
                }
              }
              else
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:3 message:@"%s: AWDL is not supported" arguments:@"WiFiDeviceScheduleWithQueue"];
                }
              }
LABEL_116:
              if (*(char *)(a1 + 28) < 0)
              {
                context.versioint n = (CFIndex)@"ap1";
                uint64_t valuePtr = 7;
                CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
                if (v22)
                {
                  CFNumberRef v23 = v22;
                  CFDictionaryRef v24 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                  if (v24)
                  {
                    CFIndex v25 = v24;
                    CFDictionaryAddValue(v24, @"VIRT_IF_ROLE", v23);
                    CFDictionaryAddValue(v25, @"VIRT_IF_NAME", @"ap1");
                    uint64_t v27 = sub_10006E3AC(a1, v26, v25, &context);
                    if (v27)
                    {
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:4, "Error creating %@  interface %d", context.version, v27 message];
                      }
                    }
                    else if (qword_10027DD68)
                    {
                      [(id)qword_10027DD68 WFLog:4, "%s: Created %@ interface", "__WiFiDeviceCreateHostApInterface", context.version message];
                    }
                    CFRelease(v23);
                    CFNumberRef v29 = v25;
                  }
                  else
                  {
                    if (qword_10027DD68) {
                      [((id)qword_10027DD68) WFLog:4, @"%s: null intfDict.", @"__WiFiDeviceCreateHostApInterface"];
                    }
                    CFNumberRef v29 = v23;
                  }
                  CFRelease(v29);
                }
                else
                {
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null role.", "__WiFiDeviceCreateHostApInterface")
                  }
                }
              }
              sub_10006A3A4(a1);
              *(unsigned char *)(a1 + 5904) = 1;
              CFNumberRef v30 = *(unsigned int (**)(uint64_t, void))(a1 + 4968);
              if (v30 && v30(a1, *(void *)(a1 + 4976))) {
                sub_10006A7DC(a1, 1);
              }
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"%s: exiting" :@"WiFiDeviceScheduleWithQueue"];
              }
              return;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: Error subscribing to the dynamic store disconnect event." arguments:("WiFiDeviceScheduleWithQueue", "Error subscribing to the dynamic store disconnect event.")]
            }
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: SCDynamicStoreCreate failed" : @"WiFiDeviceScheduleWithQueue"];
            }
          }
          goto LABEL_104;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Error: monitoring APPLE80211_M_SCAN_FWD_STATS_EVENT failed", @"WiFiDeviceScheduleWithQueue"];
        }
      }
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: exiting, Error: found", "WiFiDeviceScheduleWithQueue")];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, @"%s: exiting, Error: already open", @"WiFiDeviceScheduleWithQueue"];
    }
  }
}

void sub_100067D28(uint64_t a1)
{
  if (*(void *)(a1 + 64)) {
    sub_100067DAC(a1);
  }
  if (*(void *)(a1 + 16))
  {
    Apple80211Close();
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v2 = *(const void **)(a1 + 5920);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 5920) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 128);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 128) = 0;
  }
  *(unsigned char *)(a1 + 52) = 0;
  sub_10004590C((const void *)a1);
  uint64_t v4 = *(__CFDictionary **)(a1 + 5784);
  uint64_t v5 = *(const void **)(a1 + 112);

  CFDictionaryRemoveValue(v4, v5);
}

void sub_100067DAC(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: entering", "WiFiDeviceUnscheduleFromQueue")
  }
  SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 152), 0);
  sub_100152BD4(*(void *)(a1 + 144), 0, 0);
  sub_100152F10(*(void *)(a1 + 144));
  uint64_t v3 = *(NSObject **)(a1 + 72);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(a1 + 72));
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v4 = *(NSObject **)(a1 + 80);
  if (v4)
  {
    dispatch_source_cancel(v4);
    dispatch_release(*(dispatch_object_t *)(a1 + 80));
    *(void *)(a1 + 80) = 0;
  }
  uint64_t v5 = *(NSObject **)(a1 + 88);
  if (v5)
  {
    dispatch_source_cancel(v5);
    dispatch_release(*(dispatch_object_t *)(a1 + 88));
    *(void *)(a1 + 88) = 0;
  }
  uint64_t v6 = *(NSObject **)(a1 + 5712);
  if (v6)
  {
    dispatch_source_cancel(v6);
    dispatch_release(*(dispatch_object_t *)(a1 + 5712));
    *(void *)(a1 + 5712) = 0;
  }
  uint64_t v7 = *(NSObject **)(a1 + 5768);
  if (v7)
  {
    dispatch_source_cancel(v7);
    dispatch_release(*(dispatch_object_t *)(a1 + 5768));
    *(void *)(a1 + 5768) = 0;
  }
  IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)(a1 + 96), 0);
  Apple80211EventMonitoringHalt();
  uint64_t v8 = *(void *)(a1 + 176);
  if (v8) {
    sub_100160420(v8);
  }
  int v9 = *(char *)(a1 + 28);
  if (v9 < 0)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Enter: %s:%d %ld \n", "__WiFiDeviceDeleteHostApInterface", 12056, CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784)));
    }
    uint64_t v11 = sub_10006ECF4(a1);
    if (v11)
    {
      CFIndex v12 = sub_1001687A8((uint64_t)v11);
      if (v12)
      {
        uint64_t v13 = v12;
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 5784), v12);
        CFIndex v14 = *(void (**)(uint64_t, const void *, void, void))(a1 + 5096);
        if (v14) {
          v14(a1, v13, *(void *)(a1 + 5104), 0);
        }
      }
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Exit: %s:%d %ld \n", "__WiFiDeviceDeleteHostApInterface", 12071, CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784)));
    }
  }
  else if (qword_10027DD68)
  {
    [((id)qword_10027DD68) WFLog:3, "%s: HostAP is not supported", "WiFiDeviceUnscheduleFromQueue", v23, v24];
  }
  char v15 = *(unsigned char *)(a1 + 32);
  if (v15)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Enter: %s:%d %ld \n", "__WiFiDeviceDeleteAwdlInterface", 12033, CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784)));
    }
    CFNumberRef v17 = *(const void **)(a1 + 5976);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(a1 + 5976) = 0;
    }
    uint64_t v18 = sub_10006EB84(a1);
    if (v18)
    {
      CFDictionaryRef v19 = sub_1001687A8((uint64_t)v18);
      if (v19)
      {
        uint64_t v20 = v19;
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 5784), v19);
        CFDictionaryRef v21 = *(void (**)(uint64_t, const void *, void, void))(a1 + 5096);
        if (v21) {
          v21(a1, v20, *(void *)(a1 + 5104), 0);
        }
      }
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Exit: %s:%d %ld \n", "__WiFiDeviceDeleteAwdlInterface", 12051, CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784)));
    }
  }
  else if (qword_10027DD68)
  {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: AWDL is not supported", "WiFiDeviceUnscheduleFromQueue", v23, v24);
  }
  *(void *)(a1 + 64) = 0;
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, @"%s: exiting", @"WiFiDeviceUnscheduleFromQueue"];
  }
}

__CFArray *sub_1000680F8(uint64_t a1)
{
  uint64_t valuePtr = 0;
  CFNumberRef cf = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  if (!cf) {
    return 0;
  }
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784));
  if (Count)
  {
    uint64_t v3 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (const void **)malloc_type_malloc(8 * Count, 0x2004093837F09uLL);
      if (v5)
      {
        uint64_t v6 = v5;
        CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 5784), v4, v5);
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, Count, &kCFTypeArrayCallBacks);
        for (uint64_t i = 0; i != Count; ++i)
        {
          int v9 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (v9)
          {
            SCDynamicStoreRef v10 = v9;
            CFDictionaryAddValue(v9, @"VIRT_IF_NAME", v4[i]);
            CFTypeID v11 = CFGetTypeID(v6[i]);
            uint64_t v12 = sub_10001CADC();
            uint64_t v13 = cf;
            if (v11 != v12 || (uint64_t v13 = sub_100168480((uint64_t)v6[i])) != 0) {
              CFDictionaryAddValue(v10, @"VIRT_IF_ROLE", v13);
            }
            CFArrayAppendValue(Mutable, v10);
            CFRelease(v10);
          }
        }
        free(v6);
      }
      else
      {
        CFMutableDictionaryRef Mutable = 0;
      }
      free(v4);
      goto LABEL_14;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"No virtual interfaces found"];
    }
  }
  CFMutableDictionaryRef Mutable = 0;
LABEL_14:
  CFRelease(cf);
  return Mutable;
}

CFStringRef sub_1000682E4(int a1)
{
  if (a1 <= 130)
  {
    int v2 = a1 - 1;
    CFStringRef result = @"APPLE80211_M_ASSOC_DONE";
    switch(v2)
    {
      case 0:
        CFStringRef result = @"APPLE80211_M_POWER_CHANGED";
        break;
      case 1:
      case 4:
      case 5:
      case 6:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 32:
      case 33:
        return @"Unknown";
      case 2:
        CFStringRef result = @"APPLE80211_M_BSSID_CHANGED";
        break;
      case 3:
        CFStringRef result = @"APPLE80211_M_LINK_CHANGED";
        break;
      case 7:
        CFStringRef result = @"APPLE80211_M_MODE_CHANGED";
        break;
      case 8:
        return result;
      case 9:
        CFStringRef result = @"APPLE80211_M_SCAN_DONE";
        break;
      case 10:
        CFStringRef result = @"APPLE80211_M_COUNTRY_CODE_CHANGED";
        break;
      case 11:
        CFStringRef result = @"APPLE80211_M_STA_ARRIVE";
        break;
      case 12:
        CFStringRef result = @"APPLE80211_M_STA_LEAVE";
        break;
      case 13:
        CFStringRef result = @"APPLE80211_M_DECRYPTION_FAILURE";
        break;
      case 29:
        CFStringRef result = @"APPLE80211_M_WIFI_DIRECT_GROUP_STARTED";
        break;
      case 30:
        CFStringRef result = @"APPLE80211_M_BGSCAN_NET_DISCOVERED";
        break;
      case 31:
        CFStringRef result = @"APPLE80211_M_ROAMED";
        break;
      case 34:
        CFStringRef result = @"APPLE80211_M_BLACKLIST_NETWORK";
        break;
      case 35:
        CFStringRef result = @"APPLE80211_M_RESUME_SCAN";
        break;
      case 36:
        CFStringRef result = @"APPLE80211_M_BGSCAN_SUSPENDED";
        break;
      case 37:
        CFStringRef result = @"APPLE80211_M_BGSCAN_RESUMED";
        break;
      case 38:
        CFStringRef result = @"APPLE80211_M_RSSI_CHANGED";
        break;
      default:
        switch(@"APPLE80211_M_ASSOC_DONE")
        {
          case 'K':
            CFStringRef result = @"APPLE80211_M_PRUNE";
            break;
          case 'L':
            CFStringRef result = @"APPLE80211_M_SUPPLICANT_EVENT";
            break;
          case 'M':
          case 'N':
          case 'R':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
            return @"Unknown";
          case 'O':
            CFStringRef result = @"APPLE80211_M_DUMP_LOGS";
            break;
          case 'P':
            CFStringRef result = @"APPLE80211_M_ROAM_STATUS";
            break;
          case 'Q':
            CFStringRef result = @"APPLE80211_M_LEAKY_AP_STATS";
            break;
          case 'S':
            CFStringRef result = @"APPLE80211_M_RANGING_MEASUREMENT_DONE";
            break;
          case 'Y':
            CFStringRef result = @"APPLE80211_M_TX_FAIL_HISTORY_EVENT";
            break;
          case 'Z':
            CFStringRef result = @"APPLE80211_M_SCAN_BACKOFF_REPORT";
            break;
          default:
            switch(@"APPLE80211_M_ASSOC_DONE")
            {
              case '7':
                CFStringRef result = @"APPLE80211_M_DRIVER_AVAILABLE";
                break;
              case '9':
                CFStringRef result = @"APPLE80211_M_GAS_DONE";
                break;
              case '<':
                CFStringRef result = @"APPLE80211_M_HOMECHAN_QUAL_CHANGED";
                break;
              case '=':
                CFStringRef result = @"APPLE80211_M_POWER_STATS_UPDATE";
                break;
              case '?':
                CFStringRef result = @"APPLE80211_M_BGSCAN_CACHED_NETWORK_AVAILABLE";
                break;
              default:
                return @"Unknown";
            }
            break;
        }
        break;
    }
  }
  else if (a1 > 179)
  {
    if (a1 > 209)
    {
      if (a1 > 237)
      {
        switch(a1)
        {
          case 238:
            return @"APPLE80211_M_NDD_DONE";
          case 239:
            return @"APPLE80211_M_NDD_REPORT";
          case 240:
            return @"APPLE80211_M_SCAN_FWD_STATS_EVENT";
        }
      }
      else
      {
        switch(a1)
        {
          case 210:
            return @"APPLE80211_M_P2P_PEER_COUNTRY_CODE";
          case 217:
            return @"APPLE80211_M_ENV_BSS_INFO";
          case 218:
            return @"APPLE80211_M_OBSS_MIT_NOTIFICATION";
        }
      }
      return @"Unknown";
    }
    else
    {
      switch(a1)
      {
        case 180:
          CFStringRef result = @"APPLE80211_M_BEACON_CACHE_UPDATED";
          break;
        case 189:
          CFStringRef result = @"APPLE80211_M_TE_CRITICAL_TRAFFIC_IND";
          break;
        case 190:
          CFStringRef result = @"APPLE80211_M_BT_COEX_MODE_STATS_EVENT";
          break;
        case 191:
          CFStringRef result = @"APPLE80211_M_LINK_DOWN_DEBOUNCE_FAILED";
          break;
        case 192:
          CFStringRef result = @"APPLE80211_M_SIB_EVENT";
          break;
        case 193:
          CFStringRef result = @"APPLE80211_M_SENSING_DONE";
          break;
        case 196:
          CFStringRef result = @"APPLE80211_M_TRIGGER_TTR";
          break;
        case 199:
          CFStringRef result = @"APPLE80211_M_COLOCATED_CACHE_EVENT";
          break;
        default:
          return @"Unknown";
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 131:
        CFStringRef result = @"APPLE80211_M_LSM_UPDATE";
        break;
      case 132:
        CFStringRef result = @"APPLE80211_M_LOW_POWER_MODE";
        break;
      case 133:
        CFStringRef result = @"APPLE80211_M_LPAS_STATE";
        break;
      case 134:
        CFStringRef result = @"APPLE80211_M_TEMP_DISABLE_NETWORK";
        break;
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 142:
      case 144:
      case 146:
      case 147:
      case 149:
      case 152:
      case 153:
      case 154:
      case 155:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 168:
        return @"Unknown";
      case 140:
        CFStringRef result = @"APPLE80211_M_BSS_STEERING_REQUEST_EVENT";
        break;
      case 141:
        CFStringRef result = @"APPLE80211_M_SOFTAP_LPM";
        break;
      case 143:
        CFStringRef result = @"APPLE80211_M_ACTION_FRAME_EVENT";
        break;
      case 145:
        CFStringRef result = @"APPLE80211_M_WEIGHT_AVG_LQM_UPDATE";
        break;
      case 148:
        CFStringRef result = @"APPLE80211_M_WIFI_NETWORK_INFO_UPDATE";
        break;
      case 150:
        CFStringRef result = @"APPLE80211_M_DPS";
        break;
      case 151:
        CFStringRef result = @"APPLE80211_M_SLOW_WIFI";
        break;
      case 156:
        CFStringRef result = @"APPLE80211_M_REALTIME_SESSION_NOTIFICATION";
        break;
      case 164:
        CFStringRef result = @"APPLE80211_M_SLOWWIFI_PROBE_TRIGGER";
        break;
      case 165:
        CFStringRef result = @"APPLE80211_M_SLOWWIFI_USERINPUT_TRIGGER";
        break;
      case 166:
        CFStringRef result = @"APPLE80211_M_SLOWWIFI_PROBE_RESULT";
        break;
      case 167:
        CFStringRef result = @"APPLE80211_M_SLOWWIFI_USERINPUT_RESULT";
        break;
      case 169:
        CFStringRef result = @"APPLE80211_M_LQM_TX_STATS";
        break;
      default:
        if (a1 != 176) {
          return @"Unknown";
        }
        CFStringRef result = @"APPLE80211_M_LQM_CRASHTRACER";
        break;
    }
  }
  return result;
}

unint64_t sub_100068900(unsigned int a1)
{
  if (a1 > 0xF) {
    return 0xAAAAAAAAAAAAAAAALL;
  }
  else {
    return (unint64_t)*(&off_10023F8F8 + (int)a1);
  }
}

CFMutableArrayRef sub_100068920(uint64_t a1, int a2)
{
  CFArrayRef v4 = *(const __CFArray **)(a1 + 5664);
  if (v4 && CFArrayGetCount(v4) || (CFMutableArrayRef result = sub_1000666E8(a1), result))
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 5664));
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      while (1)
      {
        int valuePtr = -1431655766;
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5664), v8);
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CHANNELINFO_CH_NUM");
        if (Value)
        {
          CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr == a2)
          {
            CFDictionaryRef v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5664), v8);
            if (kCFBooleanTrue == CFDictionaryGetValue(v11, @"CHANNELINFO_DFS")) {
              break;
            }
          }
        }
        if (v7 == ++v8) {
          return 0;
        }
      }
      return (CFMutableArrayRef)1;
    }
  }
  return result;
}

CFMutableArrayRef sub_100068A20(uint64_t a1, int a2)
{
  CFArrayRef v4 = *(const __CFArray **)(a1 + 5664);
  if (v4 && CFArrayGetCount(v4) || (CFMutableArrayRef result = sub_1000666E8(a1), result))
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 5664));
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      while (1)
      {
        int valuePtr = -1431655766;
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5664), v8);
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CHANNELINFO_CH_NUM");
        if (Value)
        {
          CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr == a2) {
            break;
          }
        }
        if (v7 == ++v8) {
          return 0;
        }
      }
      return (CFMutableArrayRef)1;
    }
  }
  return result;
}

uint64_t sub_100068AE8(uint64_t a1, int a2)
{
  CFArrayRef v4 = *(const __CFArray **)(a1 + 5664);
  if ((!v4 || !CFArrayGetCount(v4)) && !sub_1000666E8(a1)) {
    return 1;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 5664));
  if (Count < 1) {
    return 1;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  uint64_t v8 = 1;
  do
  {
    int valuePtr = -1431655766;
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5664), v7);
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CHANNELINFO_CH_NUM");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      int v11 = valuePtr;
      if (valuePtr == a2)
      {
        CFDictionaryRef v12 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5664), v7);
        if (kCFBooleanTrue == CFDictionaryGetValue(v12, @"CHANNELINFO_40MHZ")) {
          uint64_t v8 = v8 | 2;
        }
        else {
          uint64_t v8 = v8;
        }
        int v11 = valuePtr;
      }
      if (v11 == a2)
      {
        CFDictionaryRef v13 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5664), v7);
        if (kCFBooleanTrue == CFDictionaryGetValue(v13, @"CHANNELINFO_80MHZ")) {
          uint64_t v8 = v8 | 4;
        }
        else {
          uint64_t v8 = v8;
        }
      }
    }
    ++v7;
  }
  while (v6 != v7);
  return v8;
}

uint64_t sub_100068C2C(uint64_t a1, uint64_t a2, int a3)
{
  if (a1)
  {
    uint64_t v3 = 1280;
    if (!a3) {
      uint64_t v3 = 2288;
    }
    int v4 = *(_DWORD *)(a1 + v3);
    if (v4)
    {
      unint64_t v5 = 0;
      int v6 = 0;
      uint64_t v7 = 1288;
      if (!a3) {
        uint64_t v7 = 2296;
      }
      uint64_t v8 = *(void *)(a1 + v7) - 1;
      uint64_t v9 = a1 + 312;
      uint64_t v10 = a1 + 1800;
      double v11 = 0.0;
      uint64_t result = 1;
      while (1)
      {
        if (v8 < 0) {
          uint64_t v8 = 29;
        }
        CFDictionaryRef v13 = (double *)(v9 + 32 * v8 + 24);
        if (v11 == 0.0
          || (a3 ? (CFIndex v14 = (double *)(v9 + 32 * v8 + 24)) : (CFIndex v14 = (double *)(v10 + 16 * v8 + 8)), v11 - *v14 <= 1.0))
        {
          if (a3)
          {
            int v6 = *(unsigned __int8 *)(v9 + 32 * v8) | (unsigned __int16)(*(_DWORD *)(v9 + 32 * v8 + 8) << 8) | (*(_DWORD *)(v9 + 32 * v8 + 16) << 16);
          }
          else
          {
            int v6 = *(char *)(v10 + 16 * v8);
            CFDictionaryRef v13 = (double *)(v10 + 16 * v8 + 8);
          }
          double v11 = *v13;
          *(_DWORD *)(a2 + 4 * v5) = v6;
          --v4;
          --v8;
          if (!v4) {
            return result;
          }
        }
        else
        {
          *(_DWORD *)(a2 + 4 * v5) = v6;
          double v11 = v11 + -1.0;
        }
        if (v5++ >= 0x1D) {
          return result;
        }
      }
    }
    return 1;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null device", "WiFiDevicePrepareLqmHistoryArray"];
    }
    return 0;
  }
}

uint64_t sub_100068D8C(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null device" : @"WiFiDevicePrepareTxRxHistoryArray"];
    }
    goto LABEL_21;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: lqm null" arguments:qword_10027DD68];
    }
LABEL_21:
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 3984);
  if (!v2) {
    return 1;
  }
  unint64_t v3 = 0;
  int v4 = 0;
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  int v8 = 0;
  uint64_t v9 = a1 + 2304;
  uint64_t v10 = *(void *)(a1 + 3992) - 1;
  double v11 = (_DWORD *)(a2 + 360);
  double v12 = 0.0;
  do
  {
    if (v10 < 0) {
      uint64_t v10 = 29;
    }
    double v13 = *(double *)(v9 + 56 * v10 + 48);
    if (v12 == 0.0 || v12 - v13 <= 1.0)
    {
      CFIndex v14 = (int *)(v9 + 56 * v10);
      int v8 = *v14;
      *(v11 - 30) = *v14;
      int v6 = *((char *)v14 + 8);
      *(v11 - 60) = v6;
      int v7 = v14[4];
      v11[30] = v7;
      *double v11 = v6;
      int v5 = v14[8];
      v11[60] = v5;
      int v4 = *((char *)v14 + 40);
      v11[90] = v4;
      --v2;
      --v10;
    }
    else
    {
      *(v11 - 30) = v8;
      *(v11 - 60) = v6;
      v11[30] = v7;
      *double v11 = v6;
      v11[60] = v5;
      double v13 = v12 + -1.0;
      v11[90] = v4;
    }
    uint64_t result = 1;
    if (!v2) {
      break;
    }
    ++v11;
    double v12 = v13;
  }
  while (v3++ < 0x1D);
  return result;
}

uint64_t sub_100068F14(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null device", "WiFiDevicePrepareEncodedPerCoreRssiHistoryArray"];
    }
    goto LABEL_20;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: lqm null", "WiFiDevicePrepareEncodedPerCoreRssiHistoryArray");
    }
LABEL_20:
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 1784);
  if (!v2) {
    return 1;
  }
  unint64_t v3 = 0;
  LOBYTE(v4) = 0;
  LOBYTE(v5) = 0;
  uint64_t v6 = a1 + 1296;
  uint64_t v7 = *(void *)(a1 + 1792) - 1;
  uint64_t v8 = a2 + 720;
  double v9 = 0.0;
  uint64_t result = 1;
  do
  {
    if (v7 < 0) {
      uint64_t v7 = 29;
    }
    double v11 = (double *)(v6 + 16 * v7);
    double v12 = v11[1];
    if (v9 == 0.0 || v9 - v12 <= 1.0)
    {
      int v5 = *(unsigned __int8 *)v11;
      int v4 = *((unsigned __int8 *)v11 + 1);
      *(_DWORD *)(v8 + 4 * v3) |= (v5 << 8) | (v4 << 16);
      --v2;
      --v7;
      if (!v2) {
        return result;
      }
    }
    else
    {
      *(_DWORD *)(v8 + 4 * v3) |= (unsigned __int16)(v5 << 8) | (v4 << 16);
      double v12 = v9 + -1.0;
    }
    double v9 = v12;
  }
  while (v3++ < 0x1D);
  return result;
}

uint64_t sub_100069070(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      sub_10006912C(a1, *(_DWORD *)(a1 + 4016));
      *(_DWORD *)(a2 + 840) = *(_DWORD *)(a1 + 4000);
      return 1;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: lqm null", "WiFiDevicePrepareGatewayARPHistory"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null device" :@"WiFiDevicePrepareGatewayARPHistory"];
    }
  }
  return 0;
}

void sub_10006912C(uint64_t a1, int a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (a1)
  {
    double v5 = Current;
    double v6 = *(double *)(a1 + 4008);
    if (v6 == 0.0)
    {
      *(_DWORD *)(a1 + 4016) = a2;
      *(double *)(a1 + 4008) = v5;
      *(_DWORD *)(a1 + 4000) = 0;
    }
    else
    {
      unsigned int v7 = (v5 - v6);
      if (*(_DWORD *)(a1 + 4016) == 1)
      {
        if (!*(_DWORD *)(a1 + 4000)) {
          [+[WiFiUsageMonitor sharedInstance] addFaultEvent:17 forInterface:*(void *)(a1 + 112)];
        }
        if (v7 <= 1) {
          unsigned int v8 = 1;
        }
        else {
          unsigned int v8 = v7;
        }
        if (v8 <= 0x1F)
        {
          unsigned int v10 = (v8 + 3) & 0xFFFFFFFC;
          uint32x4_t v11 = (uint32x4_t)vdupq_n_s32(v8 - 1);
          int8x16_t v12 = (int8x16_t)(*(_DWORD *)(a1 + 4000) << v8);
          int32x4_t v13 = (int32x4_t)xmmword_1001CB420;
          v14.i64[0] = 0x100000001;
          v14.i64[1] = 0x100000001;
          v15.i64[0] = 0x400000004;
          v15.i64[1] = 0x400000004;
          do
          {
            int8x16_t v16 = v12;
            uint32x4_t v17 = (uint32x4_t)v13;
            int8x16_t v12 = vorrq_s8(v12, (int8x16_t)vshlq_u32(v14, (uint32x4_t)v13));
            int32x4_t v13 = vaddq_s32(v13, v15);
            v10 -= 4;
          }
          while (v10);
          int8x16_t v18 = vbslq_s8((int8x16_t)vcgtq_u32(v17, v11), v16, v12);
          *(int8x8_t *)v18.i8 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
          int v9 = v18.i32[0] | v18.i32[1];
        }
        else
        {
          int v9 = -1;
        }
      }
      else if (v7 <= 0x1F)
      {
        int v9 = *(_DWORD *)(a1 + 4000) << v7;
      }
      else
      {
        int v9 = 0;
      }
      *(_DWORD *)(a1 + 4000) = v9;
      *(_DWORD *)(a1 + 4016) = a2;
      *(double *)(a1 + 4008) = v5;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null device" args:("__WiFiDeviceUpdateGatewayARPHistory")];
    }
  }
}

void sub_1000692CC(uint64_t a1)
{
  if (a1)
  {
    if (qword_10027DD68)
    {
      CFStringRef v3 = *(const __CFString **)(a1 + 5840);
      if (!v3) {
        CFStringRef v3 = @"Unknown";
      }
      [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : id mac address private : <%d> for network ? <%@>", "__WiFiDevicePrimaryTimerCallback", *(unsigned __int8 *)(a1 + 5864), v3 message];
    }
    int v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 4400);
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 112);
      uint64_t v6 = *(void *)(a1 + 4408);
      v4(a1, v5, v6);
    }
  }
}

void sub_10006938C(uint64_t a1)
{
  if (!sub_10005DC28(a1))
  {
    sub_100046668(a1, 0, 0, *(_DWORD *)(a1 + 5872), 0, 0);
    if (qword_10027DD68)
    {
      CFStringRef v3 = *(const __CFString **)(a1 + 5840);
      if (!v3) {
        CFStringRef v3 = @"Unknown";
      }
      [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : is mac address private : <%d> for network ? <%@>", "__WiFiDeviceRoutableTimerCallback", *(unsigned __int8 *)(a1 + 5864), v3 message];
    }
    int v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 4416);
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 112);
      uint64_t v6 = *(void *)(a1 + 4424);
      v4(a1, v5, v6);
    }
  }
}

CFMutableArrayRef sub_10006946C(void *a1)
{
  CFMutableArrayRef result = sub_1000666E8((uint64_t)a1);
  CFStringRef v3 = (uint64_t (*)(void *, uint64_t, uint64_t))a1[679];
  if (v3)
  {
    uint64_t v4 = a1[14];
    uint64_t v5 = a1[680];
    return (CFMutableArrayRef)v3(a1, v4, v5);
  }
  return result;
}

void sub_1000694C0(uint64_t a1)
{
  if (a1) {
    sub_10006E1F8(a1, 1);
  }
}

void sub_1000694D0(uint64_t a1)
{
  if (a1) {
    sub_10006E2F8(a1);
  }
}

void sub_1000696BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 112);
  unsigned int v8 = (const void *)sub_10005B6F0(a1);

  sub_1000760B0(a4, v7, v8, a3, a2);
}

void sub_100069718(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  uint64_t v23 = a1;
  CFArrayRef v22 = a2;
  uint64_t v21 = a3;
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(v22);
    uint64_t v19 = v21;
    if (v21)
    {
      for (CFIndex i = 0; i < Count; ++i)
      {
        CFTypeRef cf1 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        CFTypeRef cf1 = CFArrayGetValueAtIndex(v22, i);
        if (sub_10007AB64(cf1))
        {
          if (CFEqual(cf1, (CFTypeRef)qword_10027D668) || CFEqual(cf1, (CFTypeRef)qword_10027D670))
          {
            if (sub_10005D9B4(v19) == 1)
            {
              dispatch_source_set_timer(*(dispatch_source_t *)(v19 + 72), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
              uint64_t v5 = v19;
              uint64_t v6 = (const void *)sub_100017C48(v19);
              sub_100017D28(v5, v6, 482, 0, (uint64_t)kCFBooleanTrue);
              if (*(void *)(v19 + 5048)) {
                (*(void (**)(uint64_t, void, void))(v19 + 5048))(v19, *(void *)(v19 + 112), *(void *)(v19 + 5056));
              }
            }
            else
            {
              uint64_t v7 = v19;
              unsigned int v8 = (const void *)sub_100017C48(v19);
              sub_100017D28(v7, v8, 482, 0, (uint64_t)kCFBooleanFalse);
            }
            int v9 = +[WiFiUsageMonitor sharedInstance];
            BOOL v10 = sub_10005D9B4(v19) != 0;
            [(WiFiUsageMonitor *)v9 notifyInterfaceRankingState:v10 forInterface:sub_100017C48(v19)];
          }
          else
          {
            CFRange v15 = CFStringFind((CFStringRef)cf1, kSCEntNetInterfaceActiveDuringSleepSupported, 0);
            if (v15.location == -1)
            {
              CFRange v14 = CFStringFind((CFStringRef)cf1, @"IPConfigurationBusy", 0);
              if (v14.location == -1)
              {
                CFRange v13 = CFStringFind((CFStringRef)cf1, kSCEntNetIPv4RouterARPAlive, 0);
                if (v13.location == -1
                  && (CFRange v12 = CFStringFind((CFStringRef)cf1, kSCEntNetIPv4RouterARPFailure, 0), v12.location == -1))
                {
                  sub_10005E11C(v19, (const __CFString *)cf1);
                  sub_10007B118(v19, (const __CFString *)cf1);
                }
                else
                {
                  unsigned int v11 = -1431655766;
                  if (sub_10007B08C((const __CFString *)cf1, (int *)&v11))
                  {
                    sub_10006912C(v19, v11);
                    if (*(void *)(v19 + 5064)) {
                      (*(void (**)(uint64_t, void, void, void))(v19 + 5064))(v19, *(void *)(v19 + 112), *(void *)(v19 + 5072), v11);
                    }
                  }
                }
              }
              else
              {
                sub_10007AE30(v19, (CFStringRef)cf1);
              }
            }
            else
            {
              sub_10007ABA8(v19, (CFStringRef)cf1);
            }
          }
          int v17 = 0;
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3, @"%s: Not a valid CFString", @"__WiFiDeviceDynamicStoreCallback"];
          }
          int v17 = 7;
        }
      }
      int v17 = 5;
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4 message:"__WiFiDeviceDynamicStoreCallback: device reference is NULL"];
      }
    }
  }
}

void sub_100069B28(uint64_t a1)
{
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetIPv4);
  CFStringRef v3 = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetIPv6);
  CFStringRef value = SCDynamicStoreKeyCreateNetworkInterfaceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, *(CFStringRef *)(a1 + 112), kSCEntNetIPv6);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetInterfaceActiveDuringSleepSupported);
  CFStringRef v5 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetIPv4RouterARPAlive);
  CFStringRef v6 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetIPv4RouterARPFailure);
  CFStringRef v7 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, *(CFStringRef *)(a1 + 112), @"IPConfigurationBusy");
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  int v9 = Mutable;
  if (Mutable)
  {
    if (qword_10027D668) {
      CFArrayAppendValue(Mutable, (const void *)qword_10027D668);
    }
    if (qword_10027D670) {
      CFArrayAppendValue(v9, (const void *)qword_10027D670);
    }
    BOOL v10 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    unsigned int v11 = v10;
    if (v10)
    {
      if (NetworkServiceEntity) {
        CFArrayAppendValue(v10, NetworkServiceEntity);
      }
      if (v3) {
        CFArrayAppendValue(v11, v3);
      }
      if (NetworkInterfaceEntity)
      {
        CFArrayAppendValue(v11, NetworkInterfaceEntity);
        sub_10007ABA8(a1, 0);
      }
      if (v7)
      {
        CFArrayAppendValue(v11, v7);
        sub_10007AE30(a1, 0);
      }
      if (v5) {
        CFArrayAppendValue(v11, v5);
      }
      if (v6) {
        CFArrayAppendValue(v11, v6);
      }
      if (value) {
        CFArrayAppendValue(v11, value);
      }
      if (CFArrayGetCount(v9) >= 1 && CFArrayGetCount(v11) >= 1)
      {
        SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 152), v9, v11);
        CFRange v12 = *(const void **)(a1 + 160);
        if (v12)
        {
          CFRelease(v12);
          *(void *)(a1 + 160) = 0;
        }
        CFRange v13 = *(const void **)(a1 + 168);
        if (v13)
        {
          CFRelease(v13);
          *(void *)(a1 + 168) = 0;
        }
        *(void *)(a1 + 160) = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v9);
        *(void *)(a1 + 168) = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v11);
      }
    }
    if (NetworkServiceEntity) {
      goto LABEL_29;
    }
  }
  else
  {
    unsigned int v11 = 0;
    if (NetworkServiceEntity) {
LABEL_29:
    }
      CFRelease(NetworkServiceEntity);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (NetworkInterfaceEntity) {
    CFRelease(NetworkInterfaceEntity);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (value) {
    CFRelease(value);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v9)
  {
    CFRelease(v9);
  }
}

void sub_100069E70(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100069B28(a2);
    sub_10006A104(a2);
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"Cannot reconnect to the dynamic store - info is NULL"];
    }
  }
}

void sub_100069EF8(uint64_t *a1)
{
  CFIndex v7 = 72;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = 0;
  if (!sub_10000D7FC(a1[22], &v8, &v7, &v6) && *(unsigned char *)(v8 + 56) == 1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: Flushing out pending command %@", "__WiFiDeviceCommandAbortTimerCallback", sub_100068900(*(_DWORD *)v8) message];
    }
    switch(*(_DWORD *)v8)
    {
      case 0:
        sub_100074E8C((uint64_t)a1, a1[14], 0, 0, 4294963391);
        return;
      case 1:
        sub_10007756C((uint64_t)a1, a1[14], 0, 4294963391);
        sub_100153CF8(a1[18]);
        return;
      case 2:
      case 7:
      case 8:
      case 0xD:
      case 0xF:
        goto LABEL_11;
      case 3:
        sub_100076860((uint64_t)a1, *(void *)(v8 + 8), 4294963391);
        return;
      case 4:
      case 6:
        CFStringRef v3 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v8 + 16);
        if (!v3) {
          goto LABEL_11;
        }
        uint64_t v4 = *(void *)(v8 + 8);
        uint64_t v5 = *(void *)(v8 + 24);
        break;
      case 5:
        sub_100064260((uint64_t)a1, *(void *)(v8 + 8), 4294963391);
        return;
      case 9:
        sub_100076E74(a1, *(void *)(v8 + 8), 0, 0, 4294963391);
        return;
      case 0xA:
      case 0xB:
        CFStringRef v3 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v8 + 24);
        if (!v3) {
          goto LABEL_11;
        }
        uint64_t v4 = *(void *)(v8 + 8);
        uint64_t v5 = *(void *)(v8 + 32);
        break;
      case 0xC:
        sub_100065590(a1, *(void *)(v8 + 8), 0, 4294963391);
        return;
      case 0xE:
        sub_1000773B8((uint64_t)a1, *(void *)(v8 + 8), 0, 4294963391);
        return;
      default:
        return;
    }
    v3(a1, v4, 4294963391, v5);
LABEL_11:
    sub_10006E9C0((uint64_t)a1);
  }
}

void sub_10006A104(uint64_t a1)
{
  CFDictionaryRef theDict = 0;
  if (a1 && *(void *)(a1 + 16) && *(void *)(a1 + 112))
  {
    for (int i = 6; ; --i)
    {
      InfoCFDictionaryRef Copy = Apple80211GetInfoCopy();
      if (InfoCopy != -3905 && InfoCopy != 61 && InfoCopy != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
  }
}

uint64_t sub_10006A38C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 32) & 1;
}

uint64_t sub_10006A398(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 28) >> 7;
}

void sub_10006A3A4(uint64_t a1)
{
  if (a1) {
    int v2 = *(const void **)(a1 + 112);
  }
  else {
    int v2 = 0;
  }
  CFStringRef v3 = (const __CFString *)sub_10001C1B4(a1, v2);
  if (!v3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: Not associated" : @"__WiFiDeviceInitializeIPParams"];
    }
    return;
  }
  CFStringRef v4 = v3;
  uint64_t v5 = (void *)sub_10000D990((uint64_t)"__copyAirPortService");
  uint64_t v6 = SCPreferencesCreate(0, @"WIFID-DEVICE", 0);
  if (!v6)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"Unable to create preferences %d" arguments:SCError()];
    }
    goto LABEL_33;
  }
  CFIndex v7 = v6;
  if (!sub_10005A1E0(v6))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: failed to get prefs lock", "__copyAirPortService")];
    }
    CFRelease(v7);
LABEL_33:

LABEL_34:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: No airportService" args:("__WiFiDeviceInitializeIPParams")];
    }
    CFStringRef v26 = v4;
    goto LABEL_52;
  }
  unint64_t v8 = SCNetworkSetCopyCurrent(v7);
  int v9 = v8;
  if (!v8)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: failed to get currentSet", "__copyAirPortService"];
    }
    goto LABEL_41;
  }
  CFArrayRef v10 = SCNetworkSetCopyServices(v8);
  if (!v10)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: failed to get services", "__copyAirPortService")];
    }
LABEL_41:
    CFArrayRef v11 = 0;
    goto LABEL_42;
  }
  CFArrayRef v11 = v10;
  CFIndex Count = CFArrayGetCount(v10);
  if (Count < 1)
  {
LABEL_42:
    uint64_t v19 = 0;
    goto LABEL_43;
  }
  CFIndex v13 = Count;
  CFStringRef v31 = v4;
  CFRange v14 = v5;
  CFIndex v15 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v11, v15);
    Interface = SCNetworkServiceGetInterface(ValueAtIndex);
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(Interface);
    if (InterfaceType)
    {
      if (CFEqual(InterfaceType, kSCNetworkInterfaceTypeIEEE80211)) {
        break;
      }
    }
    if (v13 == ++v15) {
      goto LABEL_14;
    }
  }
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
  if (!a1)
  {
LABEL_14:
    uint64_t v19 = 0;
    uint64_t v5 = v14;
    CFStringRef v4 = v31;
    goto LABEL_43;
  }
  uint64_t v19 = 0;
  if (BSDName)
  {
    CFStringRef v21 = *(const __CFString **)(a1 + 112);
    if (v21)
    {
      if (CFStringCompare(BSDName, v21, 0))
      {
        uint64_t v19 = 0;
      }
      else
      {
        CFRetain(ValueAtIndex);
        uint64_t v19 = ValueAtIndex;
      }
    }
  }
  uint64_t v5 = v14;
  CFStringRef v4 = v31;
LABEL_43:
  sub_10005A29C(v7, 0);
  CFRelease(v7);
  if (v11) {
    CFRelease(v11);
  }
  if (v9) {
    CFRelease(v9);
  }

  if (!v19) {
    goto LABEL_34;
  }
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(v19);
  CFStringRef v29 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@/%@/%@/%@/%@", kSCDynamicStoreDomainState, kSCCompNetwork, kSCCompService, ServiceID, kSCEntNetIPv4);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s - ipv4 state key: %@", "__WiFiDeviceInitializeIPParams", v29 message];
  }
  sub_10005E11C(a1, v29);
  CFRelease(v4);
  CFRelease(v19);
  if (v29)
  {
    CFStringRef v26 = v29;
LABEL_52:
    CFRelease(v26);
  }
}

void sub_10006A7DC(uint64_t a1, int a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s: entering \n", "__WiFiDevicePrepareAndSendDriverAvailableEvent"];
  }
  long long valuePtr = 0u;
  long long v37 = 0u;
  uint64_t v47 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v38 = 0u;
  LODWORD(valuePtr) = 3;
  DWORD2(valuePtr) = a2;
  LODWORD(v37) = -528340989;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v6 = Mutable;
  if (!Mutable) {
    goto LABEL_25;
  }
  CFIndex v7 = (const void **)&kCFBooleanFalse;
  if (a2) {
    CFIndex v7 = (const void **)&kCFBooleanTrue;
  }
  CFDictionarySetValue(Mutable, @"DRIVER_AVAILABLE", *v7);
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v37);
  if (!v8) {
    goto LABEL_25;
  }
  CFNumberRef v9 = v8;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_REASON", v8);
  CFRelease(v9);
  CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&v37 + 4);
  if (!v10) {
    goto LABEL_25;
  }
  CFNumberRef v11 = v10;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_SUBREASON", v10);
  CFRelease(v11);
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&v37 + 8);
  if (!v12) {
    goto LABEL_25;
  }
  CFNumberRef v13 = v12;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_MINORREASON", v12);
  CFRelease(v13);
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (!v14) {
    goto LABEL_25;
  }
  CFNumberRef v15 = v14;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_VERSION", v14);
  CFRelease(v15);
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  if (!v16) {
    goto LABEL_25;
  }
  CFNumberRef v17 = v16;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_FLAGS", v16);
  CFRelease(v17);
  CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (const void *)((unint64_t)&valuePtr | 0xC));
  if (!v18) {
    goto LABEL_25;
  }
  CFNumberRef v19 = v18;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_EVENTID", v18);
  CFRelease(v19);
  CFStringRef v20 = CFStringCreateWithCString(kCFAllocatorDefault, "DextCrashed", 0x8000100u);
  if (!v20) {
    goto LABEL_25;
  }
  CFStringRef v21 = v20;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_REASON_STRING", v20);
  CFRelease(v21);
  CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &v42);
  if (!v22) {
    goto LABEL_25;
  }
  CFNumberRef v23 = v22;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_PROGRAM_COUNTER", v22);
  CFRelease(v23);
  CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, (char *)&v42 + 8);
  if (!v24) {
    goto LABEL_25;
  }
  CFNumberRef v25 = v24;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_LINK_REGISTER", v24);
  CFRelease(v25);
  CFStringRef v26 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)&v43, 0x8000100u);
  if (!v26) {
    goto LABEL_25;
  }
  CFStringRef v27 = v26;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_FILENAME", v26);
  CFRelease(v27);
  CFNumberRef v28 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v45);
  if (!v28) {
    goto LABEL_25;
  }
  CFNumberRef v29 = v28;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_LINENUMBER", v28);
  CFRelease(v29);
  CFStringRef v30 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)&v45 + 4, 0x8000100u);
  if (!v30) {
    goto LABEL_25;
  }
  CFStringRef v31 = v30;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_FUNCTION ", v30);
  CFRelease(v31);
  CFNumberRef v32 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&v47 + 4);
  if (v32)
  {
    CFNumberRef v33 = v32;
    CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_TRAP_SEQUENCE", v32);
    CFRelease(v33);
    sub_100078C6C(a1, *(const void **)(a1 + 112), v6);
    uint64_t v34 = 0;
  }
  else
  {
LABEL_25:
    uint64_t v34 = 4294963395;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: exiting, err:0x%x \n", "__WiFiDevicePrepareAndSendDriverAvailableEvent", v34, valuePtr, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47);
  }
  if (v6) {
    CFRelease(v6);
  }
}

BOOL sub_10006AC44(uint64_t a1)
{
  int valuePtr = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null device" args:@"WiFiDeviceIsMultipleChannelRangingSupported"];
    }
    goto LABEL_14;
  }
  CFDictionaryRef v1 = *(const __CFDictionary **)(a1 + 128);
  if (!v1)
  {
LABEL_14:
    BOOL v4 = 1;
    CFStringRef v3 = "supported";
    goto LABEL_8;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v1, @"RANGING_FEATURES");
  CFStringRef v3 = "supported";
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    BOOL v4 = (valuePtr & 1) == 0;
    if (valuePtr) {
      CFStringRef v3 = "not supported";
    }
  }
  else
  {
    BOOL v4 = 1;
  }
LABEL_8:
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: multiple channel ranging is %s", "WiFiDeviceIsMultipleChannelRangingSupported", v3);
  }
  return v4;
}

uint64_t sub_10006AD48(uint64_t a1)
{
  int valuePtr = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null device" args:("WiFiDeviceIsSWCorrectionRequiredForRanging", NULL)];
    }
    goto LABEL_14;
  }
  CFDictionaryRef v1 = *(const __CFDictionary **)(a1 + 128);
  if (!v1)
  {
LABEL_14:
    LOBYTE(v4) = 0;
    CFStringRef v3 = "not needed";
    goto LABEL_8;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v1, @"RANGING_FEATURES");
  CFStringRef v3 = "not needed";
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    if ((valuePtr & 2) != 0) {
      CFStringRef v3 = "needed";
    }
    int v4 = (valuePtr & 2) >> 1;
  }
  else
  {
    LOBYTE(v4) = 0;
  }
LABEL_8:
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, "%s: SW correction is %s for ranging on this device", "WiFiDeviceIsSWCorrectionRequiredForRanging", v3];
  }
  return v4;
}

uint64_t sub_10006AE4C(uint64_t a1, unsigned __int16 a2, _WORD *a3)
{
  unsigned __int16 valuePtr = a2;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null device" : @"WiFiDeviceIsChannelSupportedForRanging"];
    }
    goto LABEL_29;
  }
  if (!*(void *)(a1 + 128))
  {
LABEL_30:
    CFNumberRef v6 = 0;
    goto LABEL_31;
  }
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
  if (!v5)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null numRef" args:("WiFiDeviceIsChannelSupportedForRanging", 0, 0, 0, 0)];
    }
LABEL_29:
    goto LABEL_30;
  }
  CFNumberRef v6 = v5;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 128), @"RANGING_SUPP_CHANNELS");
  if (!Value)
  {
LABEL_31:
    BOOL v14 = 0;
    BOOL v15 = a3 != 0;
    LOBYTE(v10) = 1;
    goto LABEL_32;
  }
  CFArrayRef v8 = Value;
  if (CFArrayGetCount(Value) < 1)
  {
    int v10 = 1;
  }
  else
  {
    CFIndex v9 = 0;
    int v10 = 1;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, v9);
      if (ValueAtIndex)
      {
        CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"RANGING_CHANNEL");
        if (v12)
        {
          CFNumberRef v13 = v12;
          if (CFEqual(v12, v6)) {
            goto LABEL_31;
          }
          if (a3 && !*a3) {
            CFNumberGetValue(v13, kCFNumberSInt16Type, a3);
          }
          int v10 = 0;
        }
      }
      ++v9;
    }
    while (v9 < CFArrayGetCount(v8));
  }
  BOOL v14 = v10 == 0;
  BOOL v15 = a3 != 0;
  if (a3 && !v10)
  {
    uint64_t v16 = (unsigned __int16)*a3;
    if ((v16 - 12) > 0xFFFFFFF4)
    {
      LOBYTE(v10) = 0;
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: over-writing suggested channel from %d to fallback %d", "WiFiDeviceIsChannelSupportedForRanging", v16, 6)];
      }
      LOBYTE(v10) = 0;
      *a3 = 6;
    }
    BOOL v15 = 1;
    BOOL v14 = 1;
  }
LABEL_32:
  if (qword_10027DD68)
  {
    CFStringRef v20 = "supported";
    if (v14) {
      CFStringRef v20 = "not supported";
    }
    if (v15) {
      uint64_t v21 = (unsigned __int16)*a3;
    }
    else {
      uint64_t v21 = 0;
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: channel %d is %s for ranging, suggested channel %d", "WiFiDeviceIsChannelSupportedForRanging", valuePtr, v20, v21)];
  }
  if (v6) {
    CFRelease(v6);
  }
  return v10;
}

BOOL sub_10006B0CC(uint64_t a1)
{
  return sub_1000DAD30(*(void *)(a1 + 144)) == 0;
}

uint64_t sub_10006B0F0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4352) = a2;
  *(void *)(result + 4360) = a3;
  return result;
}

uint64_t sub_10006B0FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4384) = a2;
  *(void *)(result + 4392) = a3;
  return result;
}

uint64_t sub_10006B108(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4952) = a2;
  *(void *)(result + 4960) = a3;
  return result;
}

uint64_t sub_10006B114(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4968) = a2;
  *(void *)(result + 4976) = a3;
  return result;
}

uint64_t sub_10006B120(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4984) = a2;
  *(void *)(result + 4992) = a3;
  return result;
}

uint64_t sub_10006B12C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5096) = a2;
  *(void *)(result + 5104) = a3;
  return result;
}

uint64_t sub_10006B138(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4744) = a2;
  *(void *)(result + 4752) = a3;
  return result;
}

uint64_t sub_10006B144(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4432) = a2;
  *(void *)(result + 4440) = a3;
  return result;
}

uint64_t sub_10006B150(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4448) = a2;
  *(void *)(result + 4456) = a3;
  return result;
}

uint64_t sub_10006B15C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4464) = a2;
  *(void *)(result + 4472) = a3;
  return result;
}

uint64_t sub_10006B168(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4528) = a2;
  *(void *)(result + 4536) = a3;
  return result;
}

uint64_t sub_10006B174(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4592) = a2;
  *(void *)(result + 4600) = a3;
  return result;
}

uint64_t sub_10006B180(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4544) = a2;
  *(void *)(result + 4552) = a3;
  return result;
}

uint64_t sub_10006B18C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4560) = a2;
  *(void *)(result + 4568) = a3;
  return result;
}

uint64_t sub_10006B198(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4368) = a2;
  *(void *)(result + 4376) = a3;
  return result;
}

uint64_t sub_10006B1A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4400) = a2;
  *(void *)(result + 4408) = a3;
  return result;
}

uint64_t sub_10006B1B0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4416) = a2;
  *(void *)(result + 4424) = a3;
  return result;
}

uint64_t sub_10006B1BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4608) = a2;
  *(void *)(result + 4616) = a3;
  return result;
}

uint64_t sub_10006B1C8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4624) = a2;
  *(void *)(result + 4632) = a3;
  return result;
}

uint64_t sub_10006B1D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4640) = a2;
  *(void *)(result + 4648) = a3;
  return result;
}

uint64_t sub_10006B1E0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4792) = a2;
  *(void *)(result + 4800) = a3;
  return result;
}

uint64_t sub_10006B1EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4808) = a2;
  *(void *)(result + 4816) = a3;
  return result;
}

uint64_t sub_10006B1F8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4480) = a2;
  *(void *)(result + 4488) = a3;
  return result;
}

uint64_t sub_10006B204(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4496) = a2;
  *(void *)(result + 4504) = a3;
  return result;
}

uint64_t sub_10006B210(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4824) = a2;
  *(void *)(result + 4832) = a3;
  return result;
}

uint64_t sub_10006B21C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4840) = a2;
  *(void *)(result + 4848) = a3;
  return result;
}

uint64_t sub_10006B228(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4872) = a2;
  *(void *)(result + 4880) = a3;
  return result;
}

uint64_t sub_10006B234(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4888) = a2;
  *(void *)(result + 4896) = a3;
  return result;
}

uint64_t sub_10006B240(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5448) = a2;
  *(void *)(result + 5456) = a3;
  return result;
}

uint64_t sub_10006B24C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5480) = a2;
  *(void *)(result + 5488) = a3;
  return result;
}

uint64_t sub_10006B258(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4904) = a2;
  *(void *)(result + 4912) = a3;
  return result;
}

uint64_t sub_10006B264(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4856) = a2;
  *(void *)(result + 4864) = a3;
  return result;
}

uint64_t sub_10006B270(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4920) = a2;
  *(void *)(result + 4928) = a3;
  return result;
}

uint64_t sub_10006B27C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4936) = a2;
  *(void *)(result + 4944) = a3;
  return result;
}

uint64_t sub_10006B288(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5016) = a2;
  *(void *)(result + 5024) = a3;
  return result;
}

uint64_t sub_10006B294(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5032) = a2;
  *(void *)(result + 5040) = a3;
  return result;
}

uint64_t sub_10006B2A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5048) = a2;
  *(void *)(result + 5056) = a3;
  return result;
}

uint64_t sub_10006B2AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5064) = a2;
  *(void *)(result + 5072) = a3;
  return result;
}

uint64_t sub_10006B2B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5112) = a2;
  *(void *)(result + 5120) = a3;
  return result;
}

uint64_t sub_10006B2C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5128) = a2;
  *(void *)(result + 5136) = a3;
  return result;
}

uint64_t sub_10006B2D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5160) = a2;
  *(void *)(result + 5168) = a3;
  return result;
}

uint64_t sub_10006B2DC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5176) = a2;
  *(void *)(result + 5184) = a3;
  return result;
}

uint64_t sub_10006B2E8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5192) = a2;
  *(void *)(result + 5200) = a3;
  return result;
}

uint64_t sub_10006B2F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4576) = a2;
  *(void *)(result + 4584) = a3;
  return result;
}

uint64_t sub_10006B300(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5208) = a2;
  *(void *)(result + 5216) = a3;
  return result;
}

uint64_t sub_10006B30C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5224) = a2;
  *(void *)(result + 5232) = a3;
  return result;
}

uint64_t sub_10006B318(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5240) = a2;
  *(void *)(result + 5248) = a3;
  return result;
}

uint64_t sub_10006B324(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5256) = a2;
  *(void *)(result + 5264) = a3;
  return result;
}

uint64_t sub_10006B330(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  CFNumberRef v6 = sub_10001C9E8(a1, a2);

  return sub_10016A458((uint64_t)v6, a3, a4);
}

uint64_t sub_10006B370(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5272) = a2;
  *(void *)(result + 5280) = a3;
  return result;
}

uint64_t sub_10006B37C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5288) = a2;
  *(void *)(result + 5296) = a3;
  return result;
}

uint64_t sub_10006B388(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5624) = a2;
  *(void *)(result + 5632) = a3;
  return result;
}

uint64_t sub_10006B394(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5304) = a2;
  *(void *)(result + 5312) = a3;
  return result;
}

uint64_t sub_10006B3A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5320) = a2;
  *(void *)(result + 5328) = a3;
  return result;
}

uint64_t sub_10006B3AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5336) = a2;
  *(void *)(result + 5344) = a3;
  return result;
}

uint64_t sub_10006B3B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5352) = a2;
  *(void *)(result + 5360) = a3;
  return result;
}

uint64_t sub_10006B3C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5368) = a2;
  *(void *)(result + 5376) = a3;
  return result;
}

uint64_t sub_10006B3D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5384) = a2;
  *(void *)(result + 5392) = a3;
  return result;
}

uint64_t sub_10006B3DC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5400) = a2;
  *(void *)(result + 5408) = a3;
  return result;
}

uint64_t sub_10006B3E8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5416) = a2;
  *(void *)(result + 5424) = a3;
  return result;
}

uint64_t sub_10006B3F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5432) = a2;
  *(void *)(result + 5440) = a3;
  return result;
}

uint64_t sub_10006B400(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5496) = a2;
  *(void *)(result + 5504) = a3;
  return result;
}

uint64_t sub_10006B40C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5512) = a2;
  *(void *)(result + 5520) = a3;
  return result;
}

uint64_t sub_10006B418(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5528) = a2;
  *(void *)(result + 5536) = a3;
  return result;
}

uint64_t sub_10006B424(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5560) = a2;
  *(void *)(result + 5568) = a3;
  return result;
}

uint64_t sub_10006B430(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5544) = a2;
  *(void *)(result + 5552) = a3;
  return result;
}

uint64_t sub_10006B43C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5576) = a2;
  *(void *)(result + 5584) = a3;
  return result;
}

uint64_t sub_10006B448(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5592) = a2;
  *(void *)(result + 5600) = a3;
  return result;
}

uint64_t sub_10006B454(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5608) = a2;
  *(void *)(result + 5616) = a3;
  return result;
}

uint64_t sub_10006B460(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5640) = a2;
  *(void *)(result + 5648) = a3;
  return result;
}

uint64_t sub_10006B46C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  CFStringRef v3 = *(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *))(a1 + 5640);
  if (!v3) {
    return 0;
  }
  v3(a1, a2, *(void *)(a1 + 5648), a3, &v5);
  return v5;
}

uint64_t sub_10006B4B0(uint64_t a1)
{
  return *(void *)(a1 + 184);
}

void sub_10006B4B8(uint64_t a1, uint64_t a2)
{
  CFIndex v12 = 72;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v11 = 0;
  if (!sub_10000D7FC(*(void *)(a1 + 176), &v13, &v12, &v11))
  {
    uint64_t v10 = 0;
    *(_OWORD *)CFArrayRef v8 = 0u;
    long long v9 = 0u;
    *(_OWORD *)CFNumberRef v6 = 0u;
    *(_OWORD *)CFNumberRef cf = 0u;
    if (v11 != a2 && !sub_1001600B8(*(void *)(a1 + 176), v6, a2))
    {
      switch(LODWORD(v6[0]))
      {
        case 0:
          if (cf[0])
          {
            CFRelease(cf[0]);
            cf[0] = 0;
          }
          if (v8[0])
          {
            uint64_t v5 = v8;
            free(v8[0]);
            goto LABEL_8;
          }
          goto LABEL_9;
        case 1:
          if (cf[1])
          {
            CFRelease(cf[1]);
            cf[1] = 0;
          }
          goto LABEL_5;
        case 3:
        case 5:
        case 9:
        case 0xC:
        case 0xE:
LABEL_5:
          CFTypeRef v4 = cf[0];
          if (!cf[0]) {
            goto LABEL_9;
          }
          uint64_t v5 = (void **)cf;
          break;
        case 0xA:
          if (cf[0])
          {
            CFRelease(cf[0]);
            cf[0] = 0;
          }
          CFTypeRef v4 = v8[1];
          if (!v8[1]) {
            goto LABEL_9;
          }
          uint64_t v5 = &v8[1];
          break;
        default:
          goto LABEL_9;
      }
      CFRelease(v4);
LABEL_8:
      *uint64_t v5 = 0;
LABEL_9:
      if (v6[1]) {
        CFRelease(v6[1]);
      }
    }
  }
}

CFTypeRef sub_10006B628(uint64_t a1, const void *a2)
{
  CFTypeRef cf = 0;
  CFStringRef v3 = sub_10001C9E8(a1, a2);
  if (!v3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: unknown interface %@", "WiFiDeviceCopyInterfaceStats", a2 message];
    }
    return 0;
  }
  uint64_t v4 = (uint64_t)v3;
  CFTypeID v5 = CFGetTypeID(v3);
  if (v5 != sub_10001CADC()) {
    return 0;
  }
  int v6 = sub_10016BC68(v4, &cf);
  CFTypeRef result = cf;
  if (v6 && cf)
  {
    CFRelease(cf);
    return 0;
  }
  return result;
}

void sub_10006B6D8(uint64_t a1, const void *a2, int a3)
{
  if (a1 && a2)
  {
    CFStringRef v6 = sub_10001F928(a2);
    CFIndex v7 = *(const void **)(a1 + 5808);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 5808) = 0;
    }
    *(void *)(a1 + 5808) = CFDataCreateCopy(kCFAllocatorDefault, (CFDataRef)v6);
    if (v6)
    {
      CFArrayRef v8 = *(const void **)(a1 + 5816);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(a1 + 5816) = 0;
      }
    }
    if (a3 == 1) {
      *(void *)(a1 + 5816) = CFDataCreateCopy(kCFAllocatorDefault, (CFDataRef)v6);
    }
  }
  else
  {
    if (qword_10027DD68)
    {
      uint64_t v10 = "Device";
      if (!a2) {
        uint64_t v10 = "Network";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: %s is NULL", "__WiFiDeviceRecordLastSSIDInfo", v10);
    }
  }
}

void sub_10006B7F0(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = *(const void **)(a1 + 5824);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 5824) = 0;
    }
    *(void *)(a1 + 5824) = sub_10001961C((uint64_t)kCFAllocatorDefault, a2);
  }
  else
  {
    if (qword_10027DD68)
    {
      CFStringRef v6 = "Device";
      if (!a2) {
        CFStringRef v6 = "Network";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: %s is NULL", "__WiFiDeviceRecordLastNetworkInfo", v6);
    }
  }
}

CFStringRef sub_10006B8BC()
{
  return @"ap1";
}

uint64_t sub_10006B8C8(uint64_t a1)
{
  return *(void *)(a1 + 256);
}

uint64_t sub_10006B8D0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 264);
}

uint64_t sub_10006B8D8(uint64_t a1, const void *a2)
{
  unsigned int v12 = *(_DWORD *)(a1 + 48);
  uint64_t v4 = sub_10001C9E8(a1, a2);
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == sub_10001CADC())
    {
      sub_100169DFC(v5);
    }
    else
    {
      for (int i = 6; ; --i)
      {
        int PowerState = Apple80211GetPowerState();
        if (PowerState <= 15)
        {
          if (PowerState != -3905) {
            break;
          }
        }
        else if (PowerState != 61 && PowerState != 16)
        {
          return v12;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (!PowerState) {
        *(_DWORD *)(a1 + 48) = v12;
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2 message];
    }
  }
  return v12;
}

uint64_t sub_10006B9D4(uint64_t a1, const void *a2, unsigned int a3)
{
  CFIndex v7 = sub_10001C9E8(a1, a2);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Setting power to %s on interface %@", "WiFiDeviceSetPower", sub_10005A970(a3), a2 message];
  }
  if (v7)
  {
    CFTypeID v9 = CFGetTypeID(v7);
    if (v9 == sub_10001CADC())
    {
      uint64_t v10 = sub_100169E8C((uint64_t)v7);
    }
    else if (*(_DWORD *)(a1 + 48) == a3)
    {
      uint64_t v10 = 0;
    }
    else
    {
      if (!a3)
      {
        *(void *)(a1 + 5912) = 0;
        uint64_t v11 = *(const void **)(a1 + 5920);
        if (v11)
        {
          CFRelease(v11);
          *(void *)(a1 + 5920) = 0;
        }
      }
      sub_10006BB7C((uint64_t *)a1);
      for (int i = 6; ; --i)
      {
        uint64_t v13 = Apple80211SetPowerState();
        uint64_t v10 = v13;
        if ((int)v13 <= 15)
        {
          if (v13 != -3905) {
            break;
          }
        }
        else if (v13 != 61 && v13 != 16)
        {
          goto LABEL_23;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (!v13)
      {
        uint64_t v10 = 0;
        *(_DWORD *)(a1 + 48) = a3;
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2 message];
    }
    uint64_t v10 = 4294963396;
  }
LABEL_23:
  return v10;
}

void sub_10006BB7C(uint64_t *a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null device" : @"__WiFiDeviceCommandFlush"];
    }
    goto LABEL_67;
  }
  if (!a1[22])
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null cmdqueue ref"];
    }
LABEL_67:
    goto LABEL_7;
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)CFTypeID v9 = v2;
  long long v10 = v2;
  *(_OWORD *)CFIndex v7 = v2;
  *(_OWORD *)CFTypeRef cf = v2;
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Beginning command queue flush with error %d", 82);
  }
  sub_100160280(a1[22]);
  sub_10015FB30(a1[22], 0, 0);
  while (!sub_10015FFBC(a1[22], v7, 0x48uLL, a1 + 23))
  {
    switch(LODWORD(v7[0]))
    {
      case 0:
        if (BYTE8(v10))
        {
          a1[591] = 0;
          a1[592] = 0;
        }
        goto LABEL_29;
      case 1:
        if (BYTE8(v10))
        {
          a1[597] = 0;
          a1[598] = 0;
        }
        CFTypeRef v5 = cf[0];
        if (v9[0]) {
          ((void (*)(uint64_t *, CFTypeRef, CFTypeRef, void, uint64_t, CFTypeRef))v9[0])(a1, v7[1], cf[0], 0, 82, v9[1]);
        }
        if (cf[1])
        {
          CFRelease(cf[1]);
          cf[1] = 0;
        }
        goto LABEL_49;
      case 3:
        if (BYTE8(v10))
        {
          a1[582] = 0;
          a1[583] = 0;
        }
        goto LABEL_25;
      case 4:
      case 6:
        if (cf[0]) {
          ((void (*)(uint64_t *, CFTypeRef, uint64_t, CFTypeRef))cf[0])(a1, v7[1], 82, cf[1]);
        }
        break;
      case 5:
        if (BYTE8(v10))
        {
          a1[584] = 0;
          a1[585] = 0;
        }
LABEL_25:
        CFTypeRef v5 = cf[0];
        if (cf[1]) {
          ((void (*)(uint64_t *, CFTypeRef, uint64_t, CFTypeRef))cf[1])(a1, v7[1], 82, v9[0]);
        }
        goto LABEL_51;
      case 9:
        if (BYTE8(v10))
        {
          a1[625] = 0;
          a1[626] = 0;
        }
LABEL_29:
        CFTypeRef v5 = cf[0];
        if (cf[1]) {
          ((void (*)(uint64_t *, CFTypeRef, void, void, uint64_t, CFTypeRef))cf[1])(a1, v7[1], 0, 0, 82, v9[0]);
        }
        goto LABEL_49;
      case 0xA:
        if (BYTE8(v10))
        {
          a1[586] = 0;
          a1[587] = 0;
        }
        if (cf[1]) {
          ((void (*)(uint64_t *, CFTypeRef, uint64_t, CFTypeRef))cf[1])(a1, v7[1], 82, v9[0]);
        }
        if (v7[1])
        {
          CFRelease(v7[1]);
          v7[1] = 0;
        }
        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0;
        }
        if (v9[1])
        {
          CFRelease(v9[1]);
          v9[1] = 0;
        }
        break;
      case 0xB:
        sub_100076B44((uint64_t)a1, v7[1], (uint64_t)cf[0], (void (*)(uint64_t, const void *, uint64_t, uint64_t))cf[1], (uint64_t)v9[0]);
        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0;
        }
        if (v7[1])
        {
          CFRelease(v7[1]);
          v7[1] = 0;
        }
        break;
      case 0xC:
        if (BYTE8(v10))
        {
          a1[643] = 0;
          a1[644] = 0;
        }
        CFTypeRef v5 = cf[0];
        if (cf[1]) {
          ((void (*)(uint64_t *, CFTypeRef, void, uint64_t, CFTypeRef))cf[1])(a1, v7[1], 0, 82, v9[0]);
        }
LABEL_49:
        if (v7[1])
        {
          CFRelease(v7[1]);
          v7[1] = 0;
        }
LABEL_51:
        if (v5) {
          CFRelease(v5);
        }
        break;
      case 0xE:
        if (BYTE8(v10))
        {
          a1[683] = 0;
          a1[684] = 0;
        }
        if (cf[1]) {
          ((void (*)(uint64_t *, CFTypeRef, uint64_t, CFTypeRef))cf[1])(a1, v7[1], 82, v9[0]);
        }
        if (v7[1])
        {
          CFRelease(v7[1]);
          v7[1] = 0;
        }
        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0;
        }
        break;
      default:
        break;
    }
  }
  sub_10015FB30(a1[22], (uint64_t)sub_100060464, (uint64_t)a1);
LABEL_7:
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:@"Finished command queue flush with error %d" :3];
  }
}

uint64_t sub_10006BFDC()
{
  return 4294963396;
}

uint64_t sub_10006BFE4(uint64_t a1, CFTypeRef cf, unsigned int a3, unsigned int a4)
{
  unint64_t v5 = a3 | 0xAAAAAAAA00000000;
  unint64_t v6 = a4 | 0xAAAAAAAA00000000;
  CFTypeRef v7 = CFRetain(cf);
  return sub_100063F5C(a1, 7u, 0, (uint64_t)v7, v5, v6, 0, 0, 0);
}

uint64_t sub_10006C05C(uint64_t a1, CFTypeRef cf, unsigned int a3)
{
  unint64_t v4 = a3 | 0xAAAAAAAA00000000;
  CFTypeRef v5 = CFRetain(cf);
  return sub_100063F5C(a1, 0xDu, 0, (uint64_t)v5, v4, 0, 0, 0, 0);
}

uint64_t sub_10006C0C4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 32) >> 1) & 1;
}

uint64_t sub_10006C0D0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 34) >> 4) & 1;
}

uint64_t sub_10006C0DC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 35) >> 3) & 1;
}

uint64_t sub_10006C0E8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 46) >> 1) & 1;
}

uint64_t sub_10006C0F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 44) >> 7;
}

uint64_t sub_10006C100(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 36) >> 2) & 1;
}

uint64_t sub_10006C10C(uint64_t a1, BOOL *a2)
{
  if ((*(unsigned char *)(a1 + 34) & 0x20) == 0)
  {
    uint64_t v2 = (*(unsigned __int8 *)(a1 + 36) >> 1) & 1;
    if (!a2) {
      return v2;
    }
    goto LABEL_5;
  }
  uint64_t v2 = 1;
  if (a2) {
LABEL_5:
  }
    *a2 = (*(unsigned char *)(a1 + 36) & 2) != 0;
  return v2;
}

uint64_t sub_10006C140(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 33) >> 5) & 1;
}

uint64_t sub_10006C14C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 34) >> 6) & 1;
}

BOOL sub_10006C158(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 35) & 0x44) != 0;
}

uint64_t sub_10006C16C(const __CFString *a1)
{
  return CFStringHasSuffix(a1, @"Device14,1");
}

uint64_t sub_10006C178(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 37) >> 6) & 1;
}

uint64_t sub_10006C184(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 38) >> 7;
}

uint64_t sub_10006C190(uint64_t a1)
{
  return *(unsigned char *)(a1 + 39) & 1;
}

uint64_t sub_10006C19C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 44) >> 3) & 1;
}

uint64_t sub_10006C1A8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 41) >> 1) & 1;
}

uint64_t sub_10006C1B4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 41) >> 2) & 1;
}

uint64_t sub_10006C1C0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 41) >> 3) & 1;
}

uint64_t sub_10006C1CC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 41) >> 5) & 1;
}

uint64_t sub_10006C1D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 54);
}

uint64_t sub_10006C1E0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 55);
}

uint64_t sub_10006C1E8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 42) >> 1) & 1;
}

uint64_t sub_10006C1F4(uint64_t a1, const void *a2)
{
  CFStringRef v3 = sub_10001C9E8(a1, a2);
  if (!v3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2 message];
    }
    goto LABEL_5;
  }
  CFTypeID v4 = CFGetTypeID(v3);
  if (v4 == sub_10001CADC())
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Set Background Scan is not supported by %@", a2 message];
    }
LABEL_5:
    return 4294963396;
  }
  for (int i = 6; ; --i)
  {
    uint64_t result = Apple80211Set();
    if (result != -3905 && result != 61 && result != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  return result;
}

uint64_t sub_10006C2F0(uint64_t a1, const void *a2, unsigned int a3)
{
  CFTypeID v4 = sub_10001C9E8(a1, a2);
  if (!v4)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2 message];
    }
    goto LABEL_6;
  }
  CFTypeRef v5 = v4;
  if ((MGGetBoolAnswer() & 1) == 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"Scan backoff reporting blocked on customer builds"];
    }
    CFArrayRef v8 = v15;
    goto LABEL_7;
  }
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 == sub_10001CADC())
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Set scan backoff report is not supported by %@", a2 message];
    }
LABEL_6:
    CFArrayRef v8 = v7;
LABEL_7:
    return 4294963396;
  }
  for (int i = 6; ; --i)
  {
    uint64_t v11 = Apple80211Set();
    uint64_t v9 = v11;
    if (v11 != -3905 && v11 != 61 && v11 != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: ifName %@, state 0x%x, error %d", "WiFiDeviceSetScanBackoffReport", a2, a3, v9 message];
  }
  return v9;
}

uint64_t sub_10006C484(uint64_t a1, int a2)
{
  if (a1)
  {
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, *(CFStringRef *)(a1 + 112), kSCEntNetInterfaceActiveDuringSleepRequested);
    if (NetworkInterfaceEntity)
    {
      CFStringRef v5 = NetworkInterfaceEntity;
      CFTypeID v6 = *(const __SCDynamicStore **)(a1 + 152);
      if (v6)
      {
        CFStringRef v7 = (const __CFString *)SCDynamicStoreCopyValue(v6, v5);
        CFStringRef v8 = v7;
        if (!a2 || v7)
        {
          if (a2 || !v7)
          {
            if (qword_10027DD68)
            {
              unsigned int v12 = "removed";
              if (a2) {
                unsigned int v12 = "set";
              }
              [(id)qword_10027DD68 WFLog:3, "%s: ActiveDuringSleepRequested is already %s (%@).", "WiFiDeviceRequestAssociatedSleep", v12, v8 message];
            }
            CFRelease(v5);
            if (!v8) {
              return 0;
            }
            int v10 = 1;
          }
          else
          {
            int v10 = SCDynamicStoreRemoveValue(*(SCDynamicStoreRef *)(a1 + 152), v5);
            CFRelease(v5);
          }
          CFStringRef v5 = v8;
        }
        else
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          int v10 = SCDynamicStoreSetValue(*(SCDynamicStoreRef *)(a1 + 152), v5, Mutable);
          if (Mutable) {
            CFRelease(Mutable);
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: dynamicStoreRef is NULL", "WiFiDeviceRequestAssociatedSleep"];
        }
        int v10 = 0;
      }
      CFRelease(v5);
      if (v10) {
        return 0;
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: stateKey is NULL", @"WiFiDeviceRequestAssociatedSleep"];
      }
    }
  }
  return 4294963396;
}

uint64_t sub_10006C684(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10006C68C(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_10006C68C(uint64_t a1, CFTypeRef cf, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  CFTypeRef v14 = CFRetain(cf);
  CFTypeRef v15 = CFRetain(a3);
  uint64_t v16 = sub_100063F5C(a1, 0, a4, (uint64_t)v14, (uint64_t)v15, a5, a6, 0, a7);
  if (v16)
  {
    if (cf) {
      CFRelease(cf);
    }
    if (a3) {
      CFRelease(a3);
    }
  }
  return v16;
}

uint64_t sub_10006C744()
{
  for (int i = 6; ; --i)
  {
    uint64_t result = Apple80211Get();
    if (result != -3905 && result != 61 && result != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  return result;
}

CFMutableArrayRef sub_10006C7B8()
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s beaconScanCache alloc cache failed" :@"WiFiDeviceCopyScanCache"];
    }
    return 0;
  }
  CFMutableArrayRef v1 = Mutable;
  sub_10006C744();
  if (!CFArrayGetCount(v1))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s - beaconScanCache not available", "WiFiDeviceCopyScanCache"];
    }
    CFRelease(v1);
    return 0;
  }
  return v1;
}

__CFArray *sub_10006C8A8(uint64_t a1, uint64_t a2, const __CFDictionary *a3, const __CFArray *a4, int a5)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!Mutable) {
    return Mutable;
  }
  int v10 = sub_10005A4D0(a4, *(_DWORD *)(a1 + 240), *(_DWORD *)(a1 + 248));
  CFArrayRef v11 = v10;
  if (*(unsigned char *)(a1 + 5896)) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = v10 == 0;
  }
  if (v12) {
    goto LABEL_20;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Filtering WAPI networks", "__processScanBeaconCacheEntry")];
  }
  CFMutableArrayRef v14 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!v14)
  {
LABEL_20:
    CFTypeRef v15 = v11;
    if (!a3) {
      goto LABEL_16;
    }
  }
  else
  {
    CFTypeRef v15 = v14;
    if (CFArrayGetCount(v11) >= 1)
    {
      CFIndex v16 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v11, v16);
        CFNumberRef v18 = ValueAtIndex;
        if (!ValueAtIndex || !sub_10001FC6C((BOOL)ValueAtIndex)) {
          CFArrayAppendValue(v15, v18);
        }
        ++v16;
      }
      while (v16 < CFArrayGetCount(v11));
    }
    CFRelease(v11);
    if (!a3)
    {
LABEL_16:
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: scanRequest is NULL. Not filtering based on SSID/Channel matching.", "__processScanBeaconCacheEntry"];
      }
      v42.CFIndex length = CFArrayGetCount(v15);
      v42.id location = 0;
      CFArrayAppendArray(Mutable, v15, v42);
      int v20 = 1;
      if (!v15) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
  }
  CFMutableArrayRef v21 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!v21)
  {
LABEL_45:
    int v20 = 0;
    if (!v15) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  CFMutableArrayRef v22 = v21;
  CFMutableArrayRef v23 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!v23)
  {
    CFRelease(v22);
    goto LABEL_45;
  }
  CFNumberRef v24 = v23;
  sub_100075E98(a3, v22);
  CFDictionaryRef v38 = a3;
  sub_100075BA8(a1, a3, v24);
  v39.CFIndex length = CFArrayGetCount(v22);
  v39.id location = 0;
  FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v22, v39, &stru_100248240);
  if (CFArrayGetCount(v15) < 1)
  {
    int v20 = 0;
  }
  else
  {
    int v20 = 0;
    CFIndex v26 = 0;
    do
    {
      CFStringRef v27 = CFArrayGetValueAtIndex(v15, v26);
      if (v27)
      {
        CFNumberRef v28 = v27;
        if (FirstIndexOfValue != -1
          || (CFIndex Count = CFArrayGetCount(v22),
              CFStringRef v30 = sub_10001A43C(v28),
              v40.id location = 0,
              v40.CFIndex length = Count,
              CFArrayGetFirstIndexOfValue(v22, v40, v30) != -1))
        {
          CFStringRef v31 = sub_100075FA0((uint64_t)v28);
          if (v31)
          {
            CFNumberRef v32 = v31;
            v41.CFIndex length = CFArrayGetCount(v24);
            v41.id location = 0;
            if (CFArrayGetFirstIndexOfValue(v24, v41, v32) != -1)
            {
              CFNumberRef v33 = sub_1000C6FC0((uint64_t)v28, @"ORIG_AGE");
              sub_10001A610((uint64_t)v28, @"AGE", (uint64_t)v33);
              CFArrayAppendValue(Mutable, v28);
              int v20 = 1;
            }
            CFRelease(v32);
          }
        }
      }
      ++v26;
    }
    while (v26 < CFArrayGetCount(v15));
  }
  CFRelease(v22);
  CFRelease(v24);
  a3 = v38;
  if (!v15) {
    goto LABEL_37;
  }
LABEL_36:
  CFRelease(v15);
LABEL_37:
  if (v20)
  {
    CFIndex v34 = CFArrayGetCount(Mutable);
    if (a5)
    {
      if (v34)
      {
        CFNumberRef v35 = sub_10006CC68(Mutable, 0, a3);
        CFNumberRef v36 = sub_10005A3F4(v35);
        if (v35) {
          CFRelease(v35);
        }
        CFRelease(Mutable);
        return v36;
      }
    }
  }
  return Mutable;
}

__CFArray *sub_10006CC68(const __CFArray *a1, const __CFArray *a2, CFDictionaryRef theDict)
{
  int valuePtr = 0;
  if (theDict && (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"SCAN_RSSI_THRESHOLD")) != 0)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    int v7 = valuePtr;
  }
  else
  {
    int v7 = 0;
  }
  int v8 = sub_1000757D0(theDict);
  if (!a1) {
    return 0;
  }
  int v9 = v8;
  if (v7) {
    goto LABEL_7;
  }
  if (!v8) {
    return (__CFArray *)CFRetain(a1);
  }
  if (a2)
  {
    a1 = a2;
    return (__CFArray *)CFRetain(a1);
  }
LABEL_7:
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v12 = Count;
      for (CFIndex i = 0; i != v12; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        if (ValueAtIndex)
        {
          CFTypeRef v15 = ValueAtIndex;
          CFNumberRef v16 = sub_1000C6FC0((uint64_t)ValueAtIndex, @"RSSI");
          BOOL v17 = v7 && (uint64_t)v16 < v7;
          BOOL v18 = !v17;
          if (v16 && v18)
          {
            if (v9)
            {
              if (a2)
              {
                CFNumberRef v19 = CFArrayGetValueAtIndex(a2, i);
                int v20 = (void *)CFRetain(v19);
              }
              else
              {
                int v20 = sub_1000758DC((uint64_t)v15);
              }
              CFMutableArrayRef v21 = v20;
              if (v20) {
                CFMutableArrayRef v22 = v20;
              }
              else {
                CFMutableArrayRef v22 = v15;
              }
              CFArrayAppendValue(Mutable, v22);
              if (v21) {
                CFRelease(v21);
              }
            }
            else
            {
              CFArrayAppendValue(Mutable, v15);
            }
          }
        }
      }
    }
  }
  return Mutable;
}

void sub_10006CE04(uint64_t a1)
{
  CFStringRef v5 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = 0;
  CFIndex v4 = 72;
  if (!sub_10000D7FC(*(void *)(a1 + 176), &v5, &v4, &v3) && *((unsigned char *)v5 + 56) == 1 && *v5 <= 1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: Starting %d second(s) timer to clear pending command type %d", "WiFiDeviceClearPendingCommand", 1, *v5];
    }
    sub_100160608(*(void *)(a1 + 176), 1);
  }
}

uint64_t sub_10006CEC8(uint64_t a1, const void *a2, const void *a3, const void *a4, uint64_t a5, uint64_t a6, int a7)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 5936) = a7;
    return sub_10006CF68(a1, a2, a3, a4, a7, a5, a6, 0);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null device" arguments:@"WiFiDeviceAssociateAsync"];
    }
    return 4294963396;
  }
}

uint64_t sub_10006CF68(uint64_t a1, const void *a2, const void *a3, const void *a4, int a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 5936) = a5;
    if (sub_10001FC6C((BOOL)a3) && !*(unsigned char *)(a1 + 5896))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: WAPI support is disabled. Error connecting to %@ ", "WiFiDeviceAssociateAsyncWithCommand", sub_10001A43C(a3) message];
      }
      return 4294963393;
    }
    else
    {
      CFTypeRef v15 = CFRetain(a2);
      CFTypeRef v16 = CFRetain(a3);
      if (a4) {
        CFTypeRef v17 = CFRetain(a4);
      }
      else {
        CFTypeRef v17 = 0;
      }
      uint64_t v20 = sub_100063F5C(a1, 1u, 0, (uint64_t)v15, (uint64_t)v16, (uint64_t)v17, a6, a7, a8);
      uint64_t v19 = v20;
      if (a3 && v20) {
        CFRelease(a3);
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null device", @"WiFiDeviceAssociateAsyncWithCommand"];
    }
    return 4294963396;
  }
  return v19;
}

uint64_t sub_10006D0E4(uint64_t a1, const void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9 = sub_10001A43C(a3);
  uint64_t v75 = 0;
  CFIndex v76 = &v75;
  uint64_t v77 = 0x2020000000;
  uint64_t v78 = 0;
  int v10 = sub_10001CECC((CFDictionaryRef *)a3);
  id v68 = sub_10000AD1C((uint64_t)a3);
  uint64_t v11 = *(unsigned int *)(a1 + 5948);
  if (v11)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "(Simulated) Failed to associate with %@: %d", sub_10001A43C(a3), v11 message];
    }
    goto LABEL_99;
  }
  CFDictionaryRef v13 = sub_1000C5EB0((uint64_t)a3);
  CFMutableArrayRef v14 = v13;
  if (!v13)
  {
    uint64_t v11 = 4294963396;
    goto LABEL_99;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v13, @"PRIVATE_MAC_ADDRESS");
  if (Value && (CFTypeID TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(Value)))
  {
    CFDataRef v67 = (const __CFData *)CFDictionaryGetValue(Value, @"PRIVATE_MAC_ADDRESS_VALUE");
    CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(Value, @"PRIVATE_MAC_ADDRESS_TYPE");
    unsigned int v18 = sub_10001A6DC(v67);
    if (*(unsigned char *)(a1 + 224))
    {
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, Value);
      if (v18)
      {
        if (v17 && sub_10001C140(v17) == 2)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Attempting association for network <%@>. Using Private Mac:  %@", "__WiFiDeviceAssociateLowLevel", v9, v67 message];
          }
          CFMutableArrayRef v21 = (const void **)&kCFBooleanTrue;
        }
        else
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Attempting association for network <%@>. Using Static Private Mac:  %@", "__WiFiDeviceAssociateLowLevel", v9, v67 message];
          }
          CFMutableArrayRef v21 = (const void **)&kCFBooleanFalse;
        }
        CFDictionarySetValue(MutableCopy, @"PRIVATE_MAC_ADDRESS_VALID", *v21);
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Attempting association for network <%@>. Not using Private Mac", "__WiFiDeviceAssociateLowLevel", v9 message];
        }
        CFDictionarySetValue(MutableCopy, @"PRIVATE_MAC_ADDRESS_VALID", kCFBooleanFalse);
        CFDataRef v67 = *(const __CFData **)(a1 + 232);
      }
      CFDictionarySetValue(v14, @"PRIVATE_MAC_ADDRESS", MutableCopy);
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      goto LABEL_19;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Global Feature is disabled for this type of network <%@>", "__WiFiDeviceAssociateLowLevel", v9 message];
    }
    if (v18)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4 message:"WFMacRandomisation : Randomisation Global Feature is disabled. Private Mac is is being used for the network"];
      }
      unsigned __int16 v63 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, Value);
      CFDictionarySetValue(v63, @"PRIVATE_MAC_ADDRESS_VALID", kCFBooleanFalse);
      CFDictionarySetValue(v63, @"PRIVATE_MAC_ADDRESS", *(const void **)(a1 + 232));
      CFDictionarySetValue(v14, @"PRIVATE_MAC_ADDRESS", v63);
      if (v63) {
        CFRelease(v63);
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Using HW mac address. Network : %@", "__WiFiDeviceAssociateLowLevel", sub_10001A43C(a3) message];
    }
  }
  CFDataRef v67 = *(const __CFData **)(a1 + 232);
LABEL_19:
  if (a3)
  {
    CFMutableArrayRef v23 = *(const void **)(a1 + 5840);
    if (v23)
    {
      CFRelease(v23);
      *(void *)(a1 + 5840) = 0;
    }
    CFNumberRef v24 = *(const void **)(a1 + 5848);
    if (v24)
    {
      CFRelease(v24);
      *(void *)(a1 + 5848) = 0;
    }
    CFNumberRef v25 = *(const void **)(a1 + 5856);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(a1 + 5856) = 0;
    }
    CFStringRef v26 = (const __CFString *)sub_10001A43C(a3);
    *(void *)(a1 + 5840) = CFStringCreateCopy(kCFAllocatorDefault, v26);
    CFStringRef v27 = (const __CFString *)sub_10001E404((uint64_t)a3, @"BSSID");
    if (v27)
    {
      CFTypeID v28 = CFStringGetTypeID();
      if (v28 == CFGetTypeID(v27)) {
        *(void *)(a1 + 5848) = CFStringCreateCopy(kCFAllocatorDefault, v27);
      }
    }
    CFNumberRef v29 = sub_10001E404((uint64_t)a3, @"PRIVATE_MAC_ADDRESS");
    CFStringRef v30 = (unsigned char *)(a1 + 5864);
    if (v29
      && (CFTypeID v31 = CFDictionaryGetTypeID(), v31 == CFGetTypeID(v29))
      && (CFDataRef v32 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v29, @"PRIVATE_MAC_ADDRESS_VALUE"),
          sub_10001A6DC(v32)))
    {
      *CFStringRef v30 = 1;
      if (v32)
      {
        CFTypeID v33 = CFDataGetTypeID();
        if (v33 == CFGetTypeID(v32)) {
          *(void *)(a1 + 5856) = CFDataCreateCopy(kCFAllocatorDefault, v32);
        }
      }
    }
    else
    {
      *CFStringRef v30 = 0;
    }
    CFBooleanRef v34 = (const __CFBoolean *)sub_10001E404((uint64_t)a3, @"MacAddressRandomisationTagMigratedNetwork");
    if (v34 && v34 == kCFBooleanTrue)
    {
      *(unsigned char *)(a1 + 5865) = 1;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Network <%@> we are associating to is a migrated network", "__WiFiDeviceRecordLastAttemptedMacInfo", sub_10001A43C(a3) message];
      }
    }
    else
    {
      *(unsigned char *)(a1 + 5865) = 0;
    }
    sub_1000570A8((uint64_t)a3, a1 + 5868);
  }
  if (*(void *)(a1 + 64))
  {
    CFStringRef v36 = (const __CFString *)sub_10001A43C(a3);
    CFDataRef v37 = sub_1000D1E5C(v67, v36);
    v76[3] = (uint64_t)v37;
    CFRetain((CFTypeRef)a1);
    CFDictionaryRef v38 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007B924;
    block[3] = &unk_10023F220;
    void block[4] = &v75;
    double block[5] = a1;
    dispatch_async(v38, block);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: null queue.", "__WiFiDeviceAssociateLowLevel")];
    }
  }
  CFRange v40 = (const void **)&kCFBooleanFalse;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    CFRange v40 = (const void **)&kCFBooleanTrue;
  }
  CFDictionarySetValue(v14, @"FT_ENABLED", *v40);
  CFRange v41 = (const void **)&kCFBooleanFalse;
  if ((*(unsigned char *)(a1 + 34) & 0x10) != 0) {
    CFRange v41 = (const void **)&kCFBooleanTrue;
  }
  CFDictionarySetValue(v14, @"80211W_ENABLED", *v41);
  CFRange v42 = (const void **)&kCFBooleanFalse;
  if ((*(unsigned char *)(a1 + 35) & 8) != 0) {
    CFRange v42 = (const void **)&kCFBooleanTrue;
  }
  CFDictionarySetValue(v14, @"FAST_ENTERPRISE_NETWORK_SUPPORTED_DEVICE", *v42);
  CFBooleanRef v43 = (const __CFBoolean *)sub_10001E404((uint64_t)a3, @"WiFiInstantHotspotJoining");
  if (v43 == kCFBooleanTrue) {
    CFBooleanRef v44 = v43;
  }
  else {
    CFBooleanRef v44 = kCFBooleanFalse;
  }
  CFDictionarySetValue(v14, @"INSTANT_HOTSPOT_ASSOC", v44);
  if (sub_10001E404((uint64_t)a3, @"WiFiAutoInstantHotspotJoining") == kCFBooleanTrue) {
    CFBooleanRef v45 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v45 = kCFBooleanFalse;
  }
  CFDictionarySetValue(v14, @"AUTO_INSTANT_HOTSPOT_ASSOC", v45);
  unint64_t valuePtr = (unint64_t)sub_1000C6FC0((uint64_t)a3, @"TransitionDisabledFlags");
  if (byte_10027DDA9 && (!*(_DWORD *)(a1 + 5936) || [v68 isAllowedInLockdownMode]))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Applying APPLE80211_TRANS_DISABLED_TKIP because lockdown mode is enabled while joining secure network (%@)", "__WiFiDeviceAssociateLowLevel", v68 message];
    }
    valuePtr |= 0x10uLL;
  }
  CFNumberRef v47 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  if (v47)
  {
    CFDictionarySetValue(v14, @"TRANS_DISABLED_FLAGS_ASSOC", v47);
    CFRelease(v47);
  }
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    BOOL v48 = a3 && sub_1000199C0((uint64_t)a3);
    sub_100072774(a1, v48);
  }
  sub_10006B6D8(a1, a3, 0);
  CFNumberRef v49 = sub_10001C9E8(a1, a2);
  CFNumberRef v50 = v49;
  if (v49)
  {
    CFTypeID v51 = CFGetTypeID(v49);
    if (v51 == sub_10001CADC())
    {
      uint64_t v52 = sub_10016A0AC(v50, (uint64_t)a2, (uint64_t)v14, a4, 1, a5, a6);
    }
    else
    {
      unsigned int v53 = 0;
      uint64_t v11 = 3766617154;
      *(void *)(a1 + 4760) = a5;
      *(void *)(a1 + 4768) = a6;
      while (1)
      {
        [v10 disable6EMode];
        int v54 = 7;
        while (1)
        {
          int v55 = Apple80211Set();
          if (v55 != -3905 && v55 != 61 && v55 != 16) {
            break;
          }
          if (!--v54) {
            break;
          }
          usleep(0x7A120u);
        }
        uint64_t v52 = Apple80211AssociateAsync();
        if (v52 != -528350142) {
          break;
        }
        usleep(0xC8u);
        if (v53++ >= 5) {
          goto LABEL_92;
        }
      }
    }
    uint64_t v11 = v52;
LABEL_92:
    uint64_t v58 = *(const void **)(a1 + 5832);
    if (v58)
    {
      CFRelease(v58);
      *(void *)(a1 + 5832) = 0;
    }
    *(void *)(a1 + 5832) = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)a3);
    if (v11)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "Failed to associate with %@: %d", sub_10001A43C(a3), v11 message];
      }
      sub_100045C5C(a1, v11, a3, *(_DWORD *)(a1 + 5872));
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2 message];
    }
    uint64_t v11 = 0;
  }
  CFRelease(v14);
LABEL_99:
  _Block_object_dispose(&v75, 8);
  return v11;
}

void sub_10006DB44(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_10006DB68(uint64_t a1, const void *a2, int a3)
{
}

void sub_10006DB70(uint64_t a1)
{
}

uint64_t sub_10006DB78(uint64_t a1, CFTypeRef cf, unsigned int a3, int a4)
{
  *(_DWORD *)(a1 + 5800) = a4;
  *(void *)(a1 + 5912) = 0;
  int v8 = *(const void **)(a1 + 5920);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 5920) = 0;
  }
  if ((a4 - 1000) <= 0xB && ((1 << (a4 + 24)) & 0x80B) != 0)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: user-initiated disconnect or Trigger Disconnect (reason=%@)", "WiFiDeviceDisassociate", sub_10005AB40(a4) message];
    }
    int v11 = *(_DWORD *)(a1 + 5800);
    return sub_10006DCBC(a1, cf, v10, v11, "WiFiDeviceDisassociate", 10627);
  }
  else
  {
    CFTypeRef v13 = CFRetain(cf);
    return sub_100063F5C(a1, 2u, 0, (uint64_t)v13, a3 | 0xAAAAAAAA00000000, 0, 0, 0, 0);
  }
}

uint64_t sub_10006DCBC(uint64_t a1, const void *a2, uint64_t a3, int a4, const char *a5, uint64_t a6)
{
  CFIndex v12 = sub_10001C9E8(a1, a2);
  *(void *)(a1 + 5912) = 0;
  CFTypeRef v13 = *(const void **)(a1 + 5920);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 5920) = 0;
  }
  if (!v12)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2 message];
    }
    goto LABEL_39;
  }
  CFTypeID v14 = CFGetTypeID(v12);
  if (v14 == sub_10001CADC())
  {
    uint64_t v15 = sub_10016A27C((uint64_t)v12);
    goto LABEL_34;
  }
  uint64_t v16 = 9;
  switch(a4)
  {
    case 1000:
    case 1003:
    case 1009:
    case 1010:
      break;
    case 1001:
    case 1008:
    case 1013:
      uint64_t v16 = 8;
      break;
    case 1002:
      uint64_t v16 = 5;
      break;
    case 1004:
      uint64_t v16 = 6;
      break;
    case 1005:
      uint64_t v16 = 1;
      break;
    case 1006:
    case 1007:
      uint64_t v16 = 7;
      break;
    case 1011:
      goto LABEL_10;
    case 1012:
      uint64_t v16 = 3;
      break;
    default:
      if (a4) {
LABEL_10:
      }
        uint64_t v16 = 10;
      break;
  }
  int valuePtr = v16;
  if (qword_10027DD68)
  {
    unsigned int v18 = "";
    if (a5) {
      unsigned int v18 = a5;
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "asked to Disassociate by <%s:%d> reason =<%d> \n", v18, a6, v16);
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
LABEL_39:
    uint64_t v15 = 4294963396;
    goto LABEL_34;
  }
  CFMutableDictionaryRef v20 = Mutable;
  CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (!v21)
  {
    CFRelease(v20);
    goto LABEL_39;
  }
  CFNumberRef v22 = v21;
  if (a4 && !*(_DWORD *)(a1 + 5800)) {
    *(_DWORD *)(a1 + 5800) = a4;
  }
  CFDictionaryAddValue(v20, @"DISASSOC_REASON", v21);
  for (int i = 6; ; --i)
  {
    uint64_t v24 = Apple80211DisassociateExt();
    uint64_t v15 = v24;
    if (v24 != -3905 && v24 != 61 && v24 != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  CFRelease(v20);
  CFRelease(v22);
LABEL_34:
  return v15;
}

uint64_t sub_10006DF60(uint64_t a1, CFTypeRef cf, unsigned int a3)
{
  unint64_t v5 = a3 | 0xAAAAAAAA00000000;
  CFTypeRef v6 = CFRetain(cf);
  uint64_t v7 = sub_100063F5C(a1, 0xFu, 0, (uint64_t)v6, v5, 0, 0, 0, 0);
  uint64_t v8 = v7;
  if (cf && v7) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t sub_10006DFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s, mode: %d", "_WiFiDeviceSet6GDisableMode", a3];
  }
  for (int i = 6; ; --i)
  {
    uint64_t v7 = Apple80211Set();
    uint64_t v8 = v7;
    if (v7 != -3905 && v7 != 61 && v7 != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  return v8;
}

uint64_t sub_10006E0C0(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null device", @"WiFiDeviceGetHardwareVersion"];
    }
LABEL_21:
    return 0;
  }
  uint64_t result = *(void *)(a1 + 5792);
  if (!result)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v4 = Apple80211CopyValue();
      uint64_t v5 = v4;
      if ((int)v4 <= 15)
      {
        if (v4 != -3905) {
          break;
        }
      }
      else if (v4 != 61 && v4 != 16)
      {
        goto LABEL_14;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    if (!v4)
    {
      uint64_t result = 0;
      *(void *)(a1 + 5792) = 0;
      return result;
    }
LABEL_14:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Error copying hardware version %d", "WiFiDeviceGetHardwareVersion", v5);
    }
    goto LABEL_21;
  }
  return result;
}

void sub_10006E1F8(uint64_t a1, int a2)
{
  uint64_t v4 = (unsigned char *)(a1 + 5688);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 5696));
  if (a2 && *(void *)(a1 + 5672))
  {
    v4[32] = 1;
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"scanCache: Defering purging scan cache"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"scanCache: Purging scan cache"];
    }
    if (Count) {
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 5696));
    }
    uint64_t v8 = *(const void **)(a1 + 5672);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 5672) = 0;
    }
    int v9 = *(const void **)(a1 + 5680);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 5680) = 0;
    }
    unsigned char *v4 = 0;
  }
}

void sub_10006E2F8(uint64_t a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"gasCache: Purging GAS cache"];
  }
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 5752))) {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 5752));
  }
  uint64_t v3 = *(const void **)(a1 + 5728);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 5728) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 5736);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 5736) = 0;
  }
}

double sub_10006E37C(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 4304);
  }
  else {
    return 0.0;
  }
}

uint64_t sub_10006E390(uint64_t result, double a2)
{
  if (result)
  {
    *(double *)(result + 4304) = a2;
    return 1;
  }
  return result;
}

uint64_t sub_10006E3A0(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 4324);
  }
  return result;
}

uint64_t sub_10006E3AC(uint64_t a1, uint64_t a2, const __CFDictionary *a3, void *a4)
{
  uint64_t v17 = 0;
  unsigned int v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v20 = 0;
  *a4 = 0;
  uint64_t v6 = sub_100167D60(a1, (uint64_t)kCFAllocatorDefault, a3, *(void *)(a1 + 64));
  uint64_t v7 = (const void *)v6;
  if (v6)
  {
    uint64_t v8 = sub_1001687A8(v6);
    *a4 = v8;
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 5784), v8, v7);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: Created Virtual Interface %@ with role %@", "WiFiDeviceVirtualInterfaceCreate", *a4, sub_100168480((uint64_t)v7) message];
    }
    if (*(void *)(a1 + 64))
    {
      CFTypeRef v10 = (CFTypeRef)*a4;
      if (*a4) {
        CFTypeRef v10 = CFRetain(v10);
      }
      v18[3] = (uint64_t)v10;
      CFRetain((CFTypeRef)a1);
      int v11 = *(NSObject **)(a1 + 64);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10006E5B4;
      block[3] = &unk_10023F220;
      void block[4] = &v17;
      double block[5] = a1;
      dispatch_async(v11, block);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." arguments:qword_10027DD68, "WiFiDeviceVirtualInterfaceCreate"];
      }
    }
    CFRelease(v7);
    uint64_t v13 = 0;
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"Error creating virtual interface instance"];
    }
    uint64_t v13 = 4294963394;
  }
  _Block_object_dispose(&v17, 8);
  return v13;
}

void sub_10006E59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006E5B4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2[8])
  {
    uint64_t v3 = (void (*)(void *, uint64_t, void, uint64_t))v2[637];
    if (v3)
    {
      uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (v4)
      {
        v3(v2, v4, v2[638], 1);
        uint64_t v5 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        if (v5)
        {
          CFRelease(v5);
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
        }
      }
    }
    uint64_t v6 = *(const void **)(a1 + 40);
    CFRelease(v6);
  }
  else
  {
    CFRelease(v2);
    uint64_t v7 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
  }
}

uint64_t sub_10006E668(void *a1, const void *a2)
{
  uint64_t v4 = sub_10001C9E8((uint64_t)a1, a2);
  uint64_t v22 = 0;
  CFMutableArrayRef v23 = &v22;
  uint64_t v24 = 0x2020000000;
  uint64_t v25 = 0;
  if (!v4)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2 message];
    }
    goto LABEL_31;
  }
  uint64_t v5 = (uint64_t)v4;
  CFTypeID v6 = CFGetTypeID(v4);
  if (v6 != sub_10001CADC())
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%@ is not a virtual interface", a2 message];
    }
LABEL_31:
    goto LABEL_32;
  }
  if (!sub_100005EFC(v5))
  {
LABEL_32:
    uint64_t v9 = 4294963396;
    goto LABEL_26;
  }
  int v7 = 7;
  while (1)
  {
    uint64_t v8 = Apple80211Set();
    uint64_t v9 = v8;
    if ((int)v8 <= 15)
    {
      if (v8 != -3905) {
        break;
      }
    }
    else if (v8 != 61 && v8 != 16)
    {
      goto LABEL_26;
    }
    if (!--v7) {
      break;
    }
    usleep(0x7A120u);
  }
  if (!v8)
  {
    int v11 = (__CFDictionary *)a1[723];
    CFIndex v12 = sub_1001687A8(v5);
    CFDictionaryRemoveValue(v11, v12);
    CFTypeID v14 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v15 = sub_1001687A8(v5);
      [v14 WFLog:3, "WiFiDeviceDeleteWiFiDirectInterface: Deleting Virtual Interface %@ with role %@", v15, sub_100168480(v5) message];
    }
    if (a1[8])
    {
      if (a2) {
        CFTypeRef v16 = CFRetain(a2);
      }
      else {
        CFTypeRef v16 = 0;
      }
      v23[3] = (uint64_t)v16;
      CFRetain(a1);
      unsigned int v18 = a1[8];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10006E90C;
      block[3] = &unk_10023F220;
      void block[4] = &v22;
      double block[5] = a1;
      dispatch_async(v18, block);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue.", @"WiFiDeviceVirtualInterfaceDelete"];
      }
    }
    uint64_t v9 = 0;
  }
LABEL_26:
  _Block_object_dispose(&v22, 8);
  return v9;
}

void sub_10006E8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006E90C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2[8])
  {
    uint64_t v3 = (void (*)(void *, uint64_t, void, void))v2[637];
    if (v3)
    {
      uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (v4)
      {
        v3(v2, v4, v2[638], 0);
        uint64_t v5 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        if (v5)
        {
          CFRelease(v5);
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
        }
      }
    }
    CFTypeID v6 = *(const void **)(a1 + 40);
    CFRelease(v6);
  }
  else
  {
    CFRelease(v2);
    int v7 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
  }
}

void sub_10006E9C0(uint64_t a1)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v1 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v5 = v1;
  long long v6 = v1;
  *(_OWORD *)CFTypeRef cf = v1;
  *(_OWORD *)uint64_t v4 = v1;
  if (!sub_10015FFBC(*(void *)(a1 + 176), cf, 0x48uLL, 0))
  {
    switch(LODWORD(cf[0]))
    {
      case 0:
      case 3:
      case 5:
      case 9:
      case 0xB:
      case 0xC:
      case 0xE:
        if (cf[1])
        {
          CFRelease(cf[1]);
          cf[1] = 0;
        }
        CFTypeRef v2 = v4[0];
        if (v4[0]) {
          goto LABEL_8;
        }
        break;
      case 1:
        if (cf[1])
        {
          CFRelease(cf[1]);
          cf[1] = 0;
        }
        if (v4[0])
        {
          CFRelease(v4[0]);
          v4[0] = 0;
        }
        CFTypeRef v2 = v4[1];
        if (v4[1]) {
          goto LABEL_8;
        }
        break;
      case 2:
      case 4:
      case 6:
      case 7:
      case 8:
      case 0xD:
      case 0xF:
        CFTypeRef v2 = cf[1];
        if (cf[1]) {
          goto LABEL_8;
        }
        break;
      case 0xA:
        if (cf[1])
        {
          CFRelease(cf[1]);
          cf[1] = 0;
        }
        if (v4[0])
        {
          CFRelease(v4[0]);
          v4[0] = 0;
        }
        CFTypeRef v2 = (CFTypeRef)*((void *)&v5 + 1);
        if (*((void *)&v5 + 1)) {
LABEL_8:
        }
          CFRelease(v2);
        break;
      default:
        return;
    }
  }
}

uint64_t sub_10006EAF4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(result + 5080) = a3;
  *(void *)(result + 5088) = a4;
  return result;
}

uint64_t sub_10006EB00(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  long long v6 = sub_10001C9E8(a1, a2);

  return sub_10016A448((uint64_t)v6, a3, a4);
}

uint64_t sub_10006EB40(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  long long v6 = sub_10001C9E8(a1, a2);

  return sub_10016A450((uint64_t)v6, a3, a4);
}

const void *sub_10006EB84(uint64_t a1)
{
  uint64_t valuePtr = 6;
  CFNumberRef v2 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  unsigned int Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784));
  uint64_t v4 = Count;
  if (!Count)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"No virtual interfaces found"];
    }
LABEL_17:
    CFTypeID v14 = 0;
    if (!v2) {
      return v14;
    }
    goto LABEL_12;
  }
  size_t v5 = 8 * Count;
  long long v6 = (const void **)malloc_type_malloc(v5, 0x6004044C4A2DFuLL);
  if (!v6) {
    goto LABEL_17;
  }
  unint64_t v7 = v6;
  uint64_t v8 = (const void **)malloc_type_malloc(v5, 0x2004093837F09uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 5784), v7, v8);
    unint64_t v10 = 0;
    uint64_t v11 = 8 * v4;
    while (1)
    {
      CFTypeID v12 = CFGetTypeID(v9[v10 / 8]);
      if (v12 == sub_10001CADC())
      {
        uint64_t v13 = sub_100168480((uint64_t)v9[v10 / 8]);
        if (CFEqual(v13, v2)) {
          break;
        }
      }
      v10 += 8;
      if (v11 == v10)
      {
        CFTypeID v14 = 0;
        goto LABEL_10;
      }
    }
    CFTypeID v14 = v9[v10 / 8];
LABEL_10:
    free(v9);
  }
  else
  {
    CFTypeID v14 = 0;
  }
  free(v7);
  if (v2) {
LABEL_12:
  }
    CFRelease(v2);
  return v14;
}

const void *sub_10006ECF4(uint64_t a1)
{
  uint64_t valuePtr = 7;
  CFNumberRef v2 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  unsigned int Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784));
  uint64_t v4 = Count;
  if (!Count)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"No virtual interfaces found"];
    }
LABEL_17:
    CFTypeID v14 = 0;
    if (!v2) {
      return v14;
    }
    goto LABEL_12;
  }
  size_t v5 = 8 * Count;
  long long v6 = (const void **)malloc_type_malloc(v5, 0x6004044C4A2DFuLL);
  if (!v6) {
    goto LABEL_17;
  }
  unint64_t v7 = v6;
  uint64_t v8 = (const void **)malloc_type_malloc(v5, 0x2004093837F09uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 5784), v7, v8);
    unint64_t v10 = 0;
    uint64_t v11 = 8 * v4;
    while (1)
    {
      CFTypeID v12 = CFGetTypeID(v9[v10 / 8]);
      if (v12 == sub_10001CADC())
      {
        uint64_t v13 = sub_100168480((uint64_t)v9[v10 / 8]);
        if (CFEqual(v13, v2)) {
          break;
        }
      }
      v10 += 8;
      if (v11 == v10)
      {
        CFTypeID v14 = 0;
        goto LABEL_10;
      }
    }
    CFTypeID v14 = v9[v10 / 8];
LABEL_10:
    free(v9);
  }
  else
  {
    CFTypeID v14 = 0;
  }
  free(v7);
  if (v2) {
LABEL_12:
  }
    CFRelease(v2);
  return v14;
}

const void *sub_10006EE64(uint64_t a1)
{
  uint64_t valuePtr = 10;
  CFNumberRef v2 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  unsigned int Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784));
  uint64_t v4 = Count;
  if (!Count)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"No virtual interfaces found"];
    }
LABEL_17:
    CFTypeID v14 = 0;
    if (!v2) {
      return v14;
    }
    goto LABEL_12;
  }
  size_t v5 = 8 * Count;
  long long v6 = (const void **)malloc_type_malloc(v5, 0x6004044C4A2DFuLL);
  if (!v6) {
    goto LABEL_17;
  }
  unint64_t v7 = v6;
  uint64_t v8 = (const void **)malloc_type_malloc(v5, 0x2004093837F09uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 5784), v7, v8);
    unint64_t v10 = 0;
    uint64_t v11 = 8 * v4;
    while (1)
    {
      CFTypeID v12 = CFGetTypeID(v9[v10 / 8]);
      if (v12 == sub_10001CADC())
      {
        uint64_t v13 = sub_100168480((uint64_t)v9[v10 / 8]);
        if (CFEqual(v13, v2)) {
          break;
        }
      }
      v10 += 8;
      if (v11 == v10)
      {
        CFTypeID v14 = 0;
        goto LABEL_10;
      }
    }
    CFTypeID v14 = v9[v10 / 8];
LABEL_10:
    free(v9);
  }
  else
  {
    CFTypeID v14 = 0;
  }
  free(v7);
  if (v2) {
LABEL_12:
  }
    CFRelease(v2);
  return v14;
}

uint64_t sub_10006EFD4(uint64_t a1, const void *a2, const void *a3)
{
  size_t v5 = sub_10006EB84(a1);
  if (v5)
  {
    return sub_10016A460((int)v5, a2, a3);
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"No AWDL interface found."];
    }
    return 4294963393;
  }
}

uint64_t sub_10006F058(uint64_t a1, const __CFString *a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (sub_10005FC0C(a1)
      && (size_t v5 = (const void *)sub_10005FC0C(a1), CFEqual(a2, v5))
      && (CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, a2, kSCEntNetLink)) != 0)
    {
      CFStringRef v7 = NetworkInterfaceEntity;
      CFDictionaryRef v8 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), NetworkInterfaceEntity);
      if (v8)
      {
        CFDictionaryRef v9 = v8;
        CFDictionaryRef Value = CFDictionaryGetValue(v8, kSCPropNetLinkActive);
        if (Value)
        {
          uint64_t v2 = CFEqual(Value, kCFBooleanTrue);
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"%s: null availabilityRef.", @"WiFiDeviceGetAwdlAvailability"];
          }
          uint64_t v2 = 0;
        }
        CFRelease(v7);
        CFStringRef v7 = (const __CFString *)v9;
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: null state dictRef.", "WiFiDeviceGetAwdlAvailability"];
        }
        uint64_t v2 = 0;
      }
      CFRelease(v7);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_10006F1D0(uint64_t a1, const void *a2, unsigned int *a3)
{
  size_t v5 = sub_10001C9E8(a1, a2);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == sub_10001CADC())
    {
      return sub_100169830(v6, a3);
    }
    else
    {
      for (int i = 6; ; --i)
      {
        int v10 = Apple80211Get();
        if (v10 != -3905 && v10 != 61 && v10 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      return 0;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2 message];
    }
    return 0;
  }
}

uint64_t sub_10006F2E0(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t v3 = 4294963396;
  if (a1 && a3)
  {
    uint64_t v6 = sub_10001C9E8(a1, a2);
    if (!v6)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "Unknown interface %@", a2 message];
      }
      uint64_t v3 = 4294963396;
      goto LABEL_13;
    }
    uint64_t v7 = (uint64_t)v6;
    CFTypeID v8 = CFGetTypeID(v6);
    if (v8 == sub_10001CADC())
    {
      uint64_t v3 = sub_10016A674(v7, a3);
      if (v3)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"Error setting LTE restricted channels %d"];
        }
LABEL_13:
      }
    }
    else
    {
      return 4294963396;
    }
  }
  return v3;
}

uint64_t sub_10006F3C8(uint64_t a1, uint64_t a2)
{
  LOBYTE(v2) = -60;
  if (a1 && a2)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v4 = Apple80211Set();
      uint64_t v2 = v4;
      if ((int)v4 <= 15)
      {
        if (v4 != -3905) {
          break;
        }
      }
      else if (v4 != 61 && v4 != 16)
      {
        goto LABEL_15;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    if (!v4) {
      return v2;
    }
LABEL_15:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"Error setting Usb Host Notification %d" v2];
    }
  }
  return v2;
}

uint64_t sub_10006F4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294963396;
  if (a1 && a2)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v4 = Apple80211Get();
      uint64_t v2 = v4;
      if ((int)v4 <= 15)
      {
        if (v4 != -3905) {
          break;
        }
      }
      else if (v4 != 61 && v4 != 16)
      {
        goto LABEL_15;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    if (!v4) {
      return v2;
    }
LABEL_15:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Could not read APPLE80211_IOC_WIFI_NOISE_PER_ANT err=%d", v2);
    }
  }
  return v2;
}

uint64_t sub_10006F578(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294963396;
  if (a1 && a2)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v4 = Apple80211Set();
      uint64_t v2 = v4;
      if ((int)v4 <= 15)
      {
        if (v4 != -3905) {
          break;
        }
      }
      else if (v4 != 61 && v4 != 16)
      {
        goto LABEL_15;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    if (!v4) {
      return v2;
    }
LABEL_15:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"Error setting locale %d", v2];
    }
  }
  return v2;
}

uint64_t sub_10006F650(uint64_t a1)
{
  if (!a1) {
    return 4294963396;
  }
  for (int i = 6; ; --i)
  {
    uint64_t v2 = Apple80211Get();
    uint64_t v3 = v2;
    if ((int)v2 <= 15)
    {
      if (v2 != -3905) {
        break;
      }
    }
    else if (v2 != 61 && v2 != 16)
    {
      goto LABEL_15;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  if (!v2) {
    return v3;
  }
LABEL_15:
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Error copying locale %d", v3);
  }
  return v3;
}

uint64_t sub_10006F728(uint64_t a1)
{
  if (!a1) {
    return 4294963396;
  }
  for (int i = 6; ; --i)
  {
    uint64_t v2 = Apple80211Get();
    uint64_t v3 = v2;
    if ((int)v2 <= 15)
    {
      if (v2 != -3905) {
        break;
      }
    }
    else if (v2 != 61 && v2 != 16)
    {
      goto LABEL_15;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  if (!v2) {
    return v3;
  }
LABEL_15:
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "WiFiMC : Error getting band support %d", v3);
  }
  return v3;
}

uint64_t sub_10006F800(uint64_t a1)
{
  int v2 = _os_feature_enabled_impl();
  if (!a1) {
    return 4294963396;
  }
  if (v2)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v4 = Apple80211Get();
      uint64_t v5 = v4;
      if ((int)v4 <= 15)
      {
        if (v4 != -3905) {
          break;
        }
      }
      else if (v4 != 61 && v4 != 16)
      {
        goto LABEL_20;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    if (!v4) {
      return v5;
    }
LABEL_20:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "WiFiMC : Error getting APPLE80211_IOC_DEVICE_TYPE_IN_DHCP_ALLOW %d", v5);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"WFMacRandomisation Rotation disabled "];
    }
    uint64_t v5 = 4294963396;
  }
  return v5;
}

uint64_t sub_10006F920(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10006F928(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_10006F928(uint64_t a1, CFTypeRef cf, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  CFTypeRef v13 = CFRetain(cf);
  CFTypeRef v14 = CFRetain(a3);
  uint64_t v15 = sub_100063F5C(a1, 9u, a4, (uint64_t)v13, (uint64_t)v14, a5, a6, 0, a7);
  uint64_t v16 = v15;
  if (a3 && v15) {
    CFRelease(a3);
  }
  return v16;
}

uint64_t sub_10006F9D0(uint64_t a1, uint64_t a2, uint64_t a3, CFArrayRef theArray)
{
  uint64_t v4 = 4294963396;
  if (a1 && a2)
  {
    if ((*(unsigned char *)(a1 + 35) & 0x44) != 0)
    {
      CFArrayRef v7 = theArray;
      CFMutableDictionaryRef Mutable = 0;
      if (a3 && theArray)
      {
        if (CFArrayGetCount(theArray)
          && (CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 4704)) != 0
          && (int valuePtr = 0,
              (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v10, @"AWDL_INFO_ASSISTED_DISCOVERY_METRIC")) != 0)
          && (CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr), valuePtr == 2))
        {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
          if (Mutable)
          {
            if (CFArrayGetCount(v7) < 1)
            {
              CFArrayRef v7 = Mutable;
            }
            else
            {
              CFIndex v12 = 0;
              do
              {
                CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v12);
                if (ValueAtIndex)
                {
                  CFDictionaryRef v14 = ValueAtIndex;
                  CFTypeID v15 = CFGetTypeID(ValueAtIndex);
                  if (v15 == CFDictionaryGetTypeID())
                  {
                    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v14);
                    if (!CFDictionaryGetValue(MutableCopy, @"RANGING_PEER_FLAGS"))
                    {
                      char v25 = 1;
                      CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &v25);
                      CFDictionarySetValue(MutableCopy, @"RANGING_PEER_FLAGS", v17);
                      if (v17) {
                        CFRelease(v17);
                      }
                      if (qword_10027DD68) {
                        [((id)qword_10027DD68) WFLog:3 message:@"%s: setting peer flag to indicate Phone Auto Unlock"];
                      }
                    }
                    if (MutableCopy) {
                      uint64_t v19 = MutableCopy;
                    }
                    else {
                      uint64_t v19 = v14;
                    }
                    CFArrayAppendValue(Mutable, v19);
                    if (MutableCopy) {
                      CFRelease(MutableCopy);
                    }
                  }
                  else
                  {
                    CFArrayAppendValue(Mutable, v14);
                  }
                }
                ++v12;
              }
              while (v12 < CFArrayGetCount(v7));
              CFArrayRef v7 = Mutable;
            }
          }
        }
        else
        {
          CFMutableDictionaryRef Mutable = 0;
        }
      }
      for (int i = 6; ; --i)
      {
        if (v7) {
          CFArrayGetCount(v7);
        }
        uint64_t v21 = Apple80211Set();
        uint64_t v4 = v21;
        if (v21 != -3905 && v21 != 61 && v21 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: ifName %@, set %d, error %d", "WiFiDeviceSetRangeable", a2, a3, v4 message];
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    else
    {
      return 4294963389;
    }
  }
  return v4;
}

uint64_t sub_10006FCA8(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t result = 4294963396;
  if (a1 && a2)
  {
    if ((*(unsigned char *)(a1 + 35) & 0x44) != 0) {
      return sub_10006FCD8(a1, a2, a3, a4, a5, 0, a6);
    }
    else {
      return 4294963389;
    }
  }
  return result;
}

uint64_t sub_10006FCD8(uint64_t a1, CFTypeRef cf, const void *a3, uint64_t a4, uint64_t a5, void *a6, double a7)
{
  unint64_t v12 = a7 | 0xAAAAAAAA00000000;
  CFTypeRef v13 = CFRetain(cf);
  CFTypeRef v14 = CFRetain(a3);
  uint64_t v15 = sub_100063F5C(a1, 0xCu, 0, (uint64_t)v13, (uint64_t)v14, a4, a5, v12, a6);
  uint64_t v16 = v15;
  if (a3 && v15) {
    CFRelease(a3);
  }
  return v16;
}

uint64_t sub_10006FD8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = 4294963396;
  if (a1 && a2)
  {
    if ((*(unsigned char *)(a1 + 35) & 0x44) != 0)
    {
      for (int i = 6; ; --i)
      {
        uint64_t v9 = Apple80211Set();
        uint64_t v4 = v9;
        if (v9 != -3905 && v9 != 61 && v9 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (qword_10027DD68)
      {
        unint64_t v12 = "Removed";
        if (a3) {
          unint64_t v12 = " Added";
        }
        [(id)qword_10027DD68 WFLog:3, "%s: Identifier %s on ifName %@: %@, error %d", "WiFiDeviceSetRangingIdentifier", v12, a2, a4, v4 message];
      }
    }
    else
    {
      return 4294963389;
    }
  }
  return v4;
}

uint64_t sub_10006FEAC(uint64_t a1)
{
  if (!a1) {
    return 4294963396;
  }
  for (int i = 6; ; --i)
  {
    uint64_t result = Apple80211Set();
    if (result != -3905 && result != 61 && result != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  return result;
}

uint64_t sub_10006FF30(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = 4294963396;
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 112);
    if (v4)
    {
      for (int i = 6; ; --i)
      {
        uint64_t v6 = Apple80211Set();
        uint64_t v2 = v6;
        if (v6 != -3905 && v6 != 61 && v6 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: ifName %@, set %d, error %d", "WiFiDeviceSetThermalIndex", v4, a2, v2 message];
      }
      *(_DWORD *)(a1 + 5932) = a2;
      [+[WiFiUsageMonitor sharedInstance] setPowerBudget:*(int *)(a1 + 5928) andThermalIndex:*(int *)(a1 + 5932) forInterface:*(void *)(a1 + 112)];
    }
  }
  return v2;
}

uint64_t sub_10007002C(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 4294963396;
  if (a1 && *(void *)(a1 + 112))
  {
    for (int i = 6; ; --i)
    {
      uint64_t result = Apple80211Get();
      if (result != -3905 && result != 61 && result != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    if (a2) {
      *(_DWORD *)(a1 + 5932) = *a2;
    }
  }
  return result;
}

uint64_t sub_1000700BC(uint64_t a1)
{
  uint64_t result = 4294963396;
  if (a1 && *(void *)(a1 + 112))
  {
    for (int i = 6; ; --i)
    {
      uint64_t result = Apple80211Get();
      if (result != -3905 && result != 61 && result != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
  }
  return result;
}

uint64_t sub_100070140(uint64_t a1)
{
  uint64_t v1 = 4294963396;
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 112);
    if (v2)
    {
      for (int i = 6; ; --i)
      {
        uint64_t v4 = Apple80211Set();
        uint64_t v1 = v4;
        if (v4 != -3905 && v4 != 61 && v4 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: ifName %@, error %d", "WiFiDeviceSetPmMode", v2, v1 message];
      }
    }
  }
  return v1;
}

uint64_t sub_100070214(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = 4294963396;
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 112);
    if (v4)
    {
      for (int i = 6; ; --i)
      {
        uint64_t v6 = Apple80211Set();
        uint64_t v2 = v6;
        if (v6 != -3905 && v6 != 61 && v6 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: ifName %@, set %d, error %d", "WiFiDeviceSetPowerBudget", v4, a2, v2 message];
      }
      *(_DWORD *)(a1 + 5928) = a2;
      [+[WiFiUsageMonitor sharedInstance] setPowerBudget:*(int *)(a1 + 5928) andThermalIndex:*(int *)(a1 + 5932) forInterface:*(void *)(a1 + 112)];
    }
  }
  return v2;
}

uint64_t sub_100070310(uint64_t a1)
{
  uint64_t v1 = 4294963396;
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 112);
    if (v2)
    {
      for (int i = 6; ; --i)
      {
        uint64_t v4 = Apple80211Set();
        uint64_t v1 = v4;
        if (v4 != -3905 && v4 != 61 && v4 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: ifName %@, error %d", "WiFiDeviceAbortScan", v2, v1 message];
      }
    }
  }
  return v1;
}

uint64_t sub_1000703E0(uint64_t a1)
{
  uint64_t result = 4294963396;
  if (a1 && *(void *)(a1 + 112))
  {
    for (int i = 6; ; --i)
    {
      uint64_t result = Apple80211Get();
      if (result != -3905 && result != 61 && result != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
  }
  return result;
}

uint64_t sub_100070464(uint64_t a1)
{
  uint64_t result = 4294963396;
  if (a1 && *(void *)(a1 + 112))
  {
    for (int i = 6; ; --i)
    {
      uint64_t result = Apple80211Get();
      if (result != -3905 && result != 61 && result != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
  }
  return result;
}

uint64_t sub_1000704E8(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 5928);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1000704FC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 38) >> 4) & 1;
}

uint64_t sub_100070508(uint64_t a1, int a2, CFDictionaryRef theDict, CFMutableDictionaryRef *a4)
{
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugModule");
  if (!Value) {
    return 4294963396;
  }
  CFTypeID v8 = (unsigned char *)(a1 + 5760);
  int valuePtr = -1431655766;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  if (valuePtr > 8)
  {
    switch(valuePtr)
    {
      case 9:
        unsigned int v62 = 0;
        if (a1)
        {
          if (theDict)
          {
            CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"DebugCommandValueDict");
            if (v9)
            {
              CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(v9, @"errorCode");
              if (v10)
              {
                CFNumberGetValue(v10, kCFNumberIntType, &v62);
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:@"%s: received request to simulate join failure with error code %d" : @"__WiFiDeviceSimulateJoinFailure" : v62];
                }
                uint64_t v12 = 0;
                *(_DWORD *)(a1 + 5948) = v62;
                return v12;
              }
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4, @"%s: errorCodeRef is NULL", @"__WiFiDeviceSimulateJoinFailure"];
              }
            }
            else
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: joinFailureDict is NULL", "__WiFiDeviceSimulateJoinFailure")
              }
            }
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: request is NULL" : @"__WiFiDeviceSimulateJoinFailure"];
            }
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: device is NULL" arguments:("__WiFiDeviceSimulateJoinFailure")];
          }
        }
        goto LABEL_77;
      case 10:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
        goto LABEL_23;
      case 11:
        id v16 = +[NSMutableDictionary dictionary];
        if (!theDict)
        {
          int v55 = (void *)qword_10027DD68;
          if (!qword_10027DD68) {
            goto LABEL_141;
          }
          uint64_t v56 = "__WiFiDeviceSimulateJoinOrRoamStatusSubState";
          goto LABEL_122;
        }
        CFNumberRef v17 = v16;
        id v18 = [(__CFDictionary *)theDict objectForKey:@"DebugCommandValueDict"];
        if (!v18)
        {
          uint64_t v57 = (void *)qword_10027DD68;
          if (!qword_10027DD68) {
            goto LABEL_141;
          }
          uint64_t v58 = "__WiFiDeviceSimulateJoinOrRoamStatusSubState";
          goto LABEL_125;
        }
        uint64_t v19 = v18;
        id v20 = [v18 objectForKey:@"mode"];
        id v21 = [v19 objectForKey:@"type"];
        if (v21)
        {
          uint64_t v22 = v21;
          if ([v20 isEqualToString:@"clear"])
          {
            CFMutableArrayRef v23 = +[NSNumber numberWithBool:1];
            CFStringRef v24 = @"IO80211InterfaceSimulateSubStateClear";
LABEL_61:
            [v17 setObject:v23 forKey:v24];
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: %@", "__WiFiDeviceSimulateJoinOrRoamStatusSubState", v17 message];
            }
            if ([v22 isEqualToString:@"join"])
            {
              if (a1) {
                long long v46 = *(const void **)(a1 + 112);
              }
              else {
                long long v46 = 0;
              }
              CFStringRef v51 = @"IO80211InterfaceSimulateJoinStatusSubStateParams";
            }
            else
            {
              if (![v22 isEqualToString:@"roam"]) {
                goto LABEL_142;
              }
              if (a1) {
                long long v46 = *(const void **)(a1 + 112);
              }
              else {
                long long v46 = 0;
              }
              CFStringRef v51 = @"IO80211InterfaceSimulateRoamStatusSubStateParams";
            }
            sub_1000093F4(a1, v46, v51, (uint64_t)v17);
            goto LABEL_91;
          }
          if ([v19 objectForKey:@"type"])
          {
            if (![v19 objectForKey:@"subState"])
            {
              if (qword_10027DD68) {
                [qword_10027DD68 WFLog:message:4, "%s: subState is nil", "__WiFiDeviceSimulateJoinOrRoamStatusSubState"];
              }
              goto LABEL_141;
            }
            if (![v19 objectForKey:@"idx"])
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: idx is nil", "__WiFiDeviceSimulateJoinOrRoamStatusSubState")
              }
              goto LABEL_141;
            }
            if (![v19 objectForKey:@"status"])
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4, @"%s: status is nil", @"__WiFiDeviceSimulateJoinOrRoamStatusSubState"];
              }
              goto LABEL_141;
            }
            if (![v19 objectForKey:@"reason"])
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: reason is nil", "__WiFiDeviceSimulateJoinOrRoamStatusSubState")];
              }
              goto LABEL_141;
            }
            [v17 setObject:[v19 objectForKey:@"subState"] forKey:@"IO80211InterfaceSimulateSubStateType"];
            [v17 setObject:[v19 objectForKey:@"idx"] forKey:@"IO80211InterfaceSimulateSubStateIdx"];
            [v17 setObject:[v19 objectForKey:@"status"] forKey:@"IO80211InterfaceSimulateSubStateStatus"];
            CFMutableArrayRef v23 = (NSNumber *)[v19 objectForKey:@"reason"];
            CFStringRef v24 = @"IO80211InterfaceSimulateSubStateReason";
            goto LABEL_61;
          }
        }
        unsigned int v53 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_141;
        }
        int v54 = "__WiFiDeviceSimulateJoinOrRoamStatusSubState";
        goto LABEL_128;
      case 12:
        id v25 = +[NSMutableDictionary dictionary];
        if ((*(unsigned char *)(a1 + 38) & 0x10) == 0)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: BssBlacklist not supported.. Bailing!", "__WiFiDeviceConfigBssBlacklist"];
          }
          uint64_t v12 = 4294963393;
LABEL_143:
          return v12;
        }
        if (theDict)
        {
          CFStringRef v26 = v25;
          id v27 = [(__CFDictionary *)theDict objectForKey:@"DebugCommandValueDict"];
          if (v27)
          {
            CFTypeID v28 = v27;
            if ([v27 objectForKey:@"type"])
            {
              id v29 = [v28 objectForKey:@"type"];
              if ([v29 isEqualToString:@"set"])
              {
                if ([v28 objectForKey:@"mode"])
                {
                  if (![v28 objectForKey:@"bssids"])
                  {
                    if (qword_10027DD68) {
                      [((id)qword_10027DD68) WFLog:4 message:@"%s: bssids nil" : @"__WiFiDeviceConfigBssBlacklist"];
                    }
                    goto LABEL_141;
                  }
                  CFStringRef v30 = +[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", [v28 objectForKey:@"bssids"]);
                  [v26 setObject:[v28 objectForKey:@"mode"] forKey:@"IO80211InterfaceBssidBlacklistMode"];
                  CFStringRef v31 = @"IO80211InterfaceBssidBlacklistBssids";
                  CFDataRef v32 = v26;
                  CFTypeID v33 = v30;
                  goto LABEL_69;
                }
              }
              else
              {
                if (![v29 isEqualToString:@"clear"]) {
                  goto LABEL_142;
                }
                if ([v28 objectForKey:@"mode"])
                {
                  CFTypeID v33 = (NSMutableArray *)[v28 objectForKey:@"mode"];
                  CFStringRef v31 = @"IO80211InterfaceBssidBlacklistMode";
                  CFDataRef v32 = v26;
LABEL_69:
                  [v32 setObject:v33 forKey:v31];
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: %@", "__WiFiDeviceConfigBssBlacklist", v26 message];
                  }
                  sub_100017D28(a1, *(const void **)(a1 + 112), 372, 0, (uint64_t)v26);
LABEL_91:
                  uint64_t v12 = 0;
                  goto LABEL_143;
                }
              }
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"%s: mode is nil" args:("__WiFiDeviceConfigBssBlacklist", nil)];
              }
              goto LABEL_141;
            }
            unsigned int v53 = (void *)qword_10027DD68;
            if (!qword_10027DD68) {
              goto LABEL_141;
            }
            int v54 = "__WiFiDeviceConfigBssBlacklist";
LABEL_128:
            [v53 WFLog:4 message:@"%s: type is nil"];
          }
          else
          {
            uint64_t v57 = (void *)qword_10027DD68;
            if (!qword_10027DD68) {
              goto LABEL_141;
            }
            uint64_t v58 = "__WiFiDeviceConfigBssBlacklist";
LABEL_125:
            [v57 WFLog:4 message:@"%s: valuesDict is nil"];
          }
        }
        else
        {
          int v55 = (void *)qword_10027DD68;
          if (!qword_10027DD68) {
            goto LABEL_141;
          }
          uint64_t v56 = "__WiFiDeviceConfigBssBlacklist";
LABEL_122:
          [v55 WFLog:4 message:@"%s: request is nil"];
        }
LABEL_141:
LABEL_142:
        uint64_t v12 = 4294963396;
        goto LABEL_143;
      case 18:
        uint64_t v12 = 0;
        *(unsigned char *)(a1 + 5952) = 1;
        return v12;
      default:
        if (valuePtr != 23) {
          goto LABEL_23;
        }
        -[WiFiUsageMonitor addFaultEvent:forInterface:](+[WiFiUsageMonitor sharedInstance](WiFiUsageMonitor, "sharedInstance"), "addFaultEvent:forInterface:", [theDict objectForKeyedSubscript:@"faultReason"], *(void *)(a1 + 112));
        return 0;
    }
  }
  if (valuePtr)
  {
    if (valuePtr == 4)
    {
      if (a1)
      {
        if (!theDict)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s request is NULL" arguments:__WiFiDeviceDebugLqmConfig];
          }
          goto LABEL_77;
        }
        CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommand");
        if (!v13) {
          return 4294963396;
        }
        unsigned int v62 = -1431655766;
        if (!CFNumberGetValue(v13, kCFNumberIntType, &v62)) {
          return 4294963396;
        }
        if (v62 == 1)
        {
          if (CFDictionaryGetValue(theDict, @"DebugCommandValueDict")) {
            return sub_10007122C();
          }
          return 4294963396;
        }
        if (v62)
        {
LABEL_75:
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"Unknown debug command %d"];
          }
          goto LABEL_77;
        }
        if (a4)
        {
          *a4 = sub_1000710E4();
          return 4294963396;
        }
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s Device is NULL", "__WiFiDeviceDebugLqmConfig");
      }
    }
    else
    {
LABEL_23:
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Unknown debug module %d", valuePtr)];
      }
    }
LABEL_77:
    return 4294963396;
  }
  CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommand");
  if (!v34) {
    return 4294963396;
  }
  unsigned int v62 = -1431655766;
  CFNumberGetValue(v34, kCFNumberIntType, &v62);
  switch(v62)
  {
    case 0u:
      if (!*v8)
      {
        CFNumberRef v49 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          CFNumberRef v50 = "GAS cache is disabled";
LABEL_96:
          [v49 WFLog:3 message:v50];
        }
LABEL_97:
        return 0;
      }
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 5752));
      if (!Count)
      {
        CFNumberRef v49 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          CFNumberRef v50 = "GAS cache is empty";
          goto LABEL_96;
        }
        goto LABEL_97;
      }
      CFIndex v36 = Count;
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != v36; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5752), i);
          if (ValueAtIndex)
          {
            uint64_t v39 = (uint64_t)ValueAtIndex;
            uint64_t v40 = sub_1000DAD40((uint64_t)ValueAtIndex);
            uint64_t v41 = sub_1000C2DE8(v39);
            if (v40 && v41 != 0)
            {
              uint64_t v43 = v41;
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%@ %@", v40, v43 message];
              }
            }
          }
        }
      }
      return 0;
    case 1u:
      sub_10006E2F8(a1);
      return 0;
    case 2u:
      *CFTypeID v8 = 0;
      sub_10006E2F8(a1);
      CFNumberRef v49 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_97;
      }
      CFNumberRef v50 = "Disabled GAS cache";
      goto LABEL_96;
    case 3u:
      *CFTypeID v8 = 1;
      CFNumberRef v49 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_97;
      }
      CFNumberRef v50 = "Enabled GAS cache";
      goto LABEL_96;
    default:
      goto LABEL_75;
  }
}

CFMutableDictionaryRef sub_1000710E4()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFMutableDictionaryRef v1 = Mutable;
    for (int i = 6; ; --i)
    {
      uint64_t v3 = Apple80211Get();
      uint64_t v4 = v3;
      if ((int)v3 <= 15)
      {
        if (v3 != -3905) {
          break;
        }
      }
      else if (v3 != 61 && v3 != 16)
      {
        goto LABEL_17;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    if (!v3) {
      return v1;
    }
LABEL_17:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s Failed to get LQM config: err %d", "WiFiDeviceCopyCurrentLqmConfig", v4];
    }
    CFRelease(v1);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s Failed to create dict" args:&"WiFiDeviceCopyCurrentLqmConfig"];
    }
  }
  return 0;
}

uint64_t sub_10007122C()
{
  for (int i = 6; ; --i)
  {
    uint64_t v1 = Apple80211Set();
    uint64_t v2 = v1;
    if ((int)v1 <= 15)
    {
      if (v1 != -3905) {
        break;
      }
    }
    else if (v1 != 61 && v1 != 16)
    {
      goto LABEL_13;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  if (!v1) {
    return v2;
  }
LABEL_13:
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s Failed to set LQM config: err %d", "WiFiDeviceSetLqmConfig", v2);
  }
  return v2;
}

uint64_t sub_100071300(uint64_t a1, uint64_t a2, int a3)
{
  keys = @"LEAKY_AP_LEARNING_MODE";
  uint64_t v3 = (void **)&kCFBooleanTrue;
  if (!a3) {
    uint64_t v3 = (void **)&kCFBooleanFalse;
  }
  long long values = *v3;
  CFDictionaryRef v4 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v4) {
    return 4294963395;
  }
  CFDictionaryRef v5 = v4;
  for (int i = 6; ; --i)
  {
    uint64_t v7 = Apple80211Set();
    uint64_t v8 = v7;
    if (v7 != -3905 && v7 != 61 && v7 != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  CFRelease(v5);
  return v8;
}

void sub_10007141C()
{
  for (int i = 6; ; --i)
  {
    uint64_t v1 = Apple80211Set();
    uint64_t v2 = v1;
    if ((int)v1 <= 15)
    {
      if (v1 != -3905) {
        break;
      }
    }
    else if (v1 != 61 && v1 != 16)
    {
      goto LABEL_12;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  if (!v1) {
    return;
  }
LABEL_12:
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:4, "%s Failed to set leaky ap SSID stats: err %d", "WiFiDeviceSetLeakyAPInfo", v2];
  }
}

uint64_t sub_100071508(uint64_t a1)
{
  if (a1)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v2 = Apple80211CopyValue();
      uint64_t v3 = v2;
      if (v2 != -3905 && v2 != 61 && v2 != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: AssocHistory is Not Valid! Error:0x%0x. AssocHistoryString:%p", "WiFiDeviceCopyAssociationHistory", v3, 0);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: device NULL" : @"WiFiDeviceCopyAssociationHistory"];
    }
  }
  return 0;
}

uint64_t sub_100071628(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 5880);
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: Device is NULL!" args:("WiFiDeviceGetLastLinkedBSSID")];
  }
  return 0;
}

uint64_t sub_100071698(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 5888);
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Device is NULL!", "WiFiDeviceGetLastLinkedSSID")];
  }
  return 0;
}

void sub_100071708(uint64_t a1, CFDataRef *a2)
{
  if (a1)
  {
    if (a2)
    {
      CFDataRef v4 = *(const __CFData **)(a1 + 5808);
      if (v4) {
        *a2 = CFDataCreateCopy(kCFAllocatorDefault, v4);
      }
      CFDataRef v5 = *(const __CFData **)(a1 + 5816);
      if (v5) {
        a2[1] = CFDataCreateCopy(kCFAllocatorDefault, v5);
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: lastSSIDInfo is NULL!" args:("WiFiDeviceCopyLastSSIDInfo", NULL)];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Device is NULL!", "WiFiDeviceCopyLastSSIDInfo")];
    }
  }
}

_WORD *sub_100071800(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: Device is NULL!", "WiFiDeviceCopyLastNetworkInfo"];
    }
    goto LABEL_12;
  }
  uint64_t v1 = *(void *)(a1 + 5832);
  if (!v1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: lastAttemptedNetworkInfo" :@"WiFiDeviceCopyLastNetworkInfo"];
    }
LABEL_12:
    return 0;
  }
  if (*(void *)(a1 + 5824)) {
    uint64_t v1 = *(void *)(a1 + 5824);
  }

  return sub_10001961C((uint64_t)kCFAllocatorDefault, v1);
}

void sub_1000718D8(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      sub_10006B7F0(a1, a2);
      return;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: network is null.", "WiFiDeviceUpdateLastNetworkInfo")];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Device is NULL!", "WiFiDeviceUpdateLastNetworkInfo")];
    }
  }
}

void sub_10007199C(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 5896) = a2;
  if (qword_10027DD68)
  {
    CFDataRef v4 = "ENABLED";
    if (!a2) {
      CFDataRef v4 = "DISABLED";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Set WAPI %s", "WiFiDeviceSetWapiEnabled", v4);
  }
}

void sub_100071A2C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 224) != a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WFMacRandomisation : Toggled. Old = %d and New = %d", "WiFiDeviceConfigureMacRadomisationFeature", *(unsigned __int8 *)(a1 + 224), a2)];
    }
    *(unsigned char *)(a1 + 224) = a2;
  }
}

void sub_100071AB4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 225) != a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WFMacRandomisation : for Secure Networks Toggled. Old = %d and New = %d", "WiFiDeviceConfigureMacRadomisationFeatureSecureNetworks", *(unsigned __int8 *)(a1 + 225), a2)];
    }
    *(unsigned char *)(a1 + 225) = a2;
  }
}

void sub_100071B3C(uint64_t a1, CFDictionaryRef theDict)
{
  int valuePtr = 0;
  if (a1)
  {
    if (theDict)
    {
      CFStringRef v4 = *(const __CFString **)(a1 + 112);
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"WiFiTestCommandInterfaceName");
      if (CFStringCompare(Value, v4, 0))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: ignore this device %@, test interface %@", "WiFiDeviceSetTestParams", v4, Value message];
        }
      }
      else
      {
        CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"WiFiTestCommandType");
        if (v6)
        {
          CFNumberGetValue(v6, kCFNumberIntType, &valuePtr);
          CFDictionaryRemoveValue(theDict, @"WiFiTestCommandType");
          if (valuePtr != 201) {
            return;
          }
          int v74 = 0;
          CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"enable");
          if (v7)
          {
            CFNumberGetValue(v7, kCFNumberCFIndexType, &v74);
            *(unsigned char *)(a1 + 208) = v74;
          }
          CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"doNotDownsampleAnalytics");
          if (v8)
          {
            CFNumberGetValue(v8, kCFNumberCFIndexType, &v74);
            BOOL v9 = v74 != 0;
          }
          else
          {
            BOOL v9 = 0;
          }
          CFNumberRef v10 = *(void (**)(uint64_t, void, void, void, BOOL))(a1 + 5576);
          if (v10) {
            v10(a1, *(void *)(a1 + 112), *(void *)(a1 + 5584), *(unsigned __int8 *)(a1 + 208), v9);
          }
          uint64_t v11 = *(const void **)(a1 + 216);
          if (v11)
          {
            CFRelease(v11);
            *(void *)(a1 + 216) = 0;
          }
          if (!*(unsigned char *)(a1 + 208))
          {
            CFNumberRef v13 = 0;
            uint64_t v15 = 0;
            goto LABEL_88;
          }
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (Mutable)
          {
            CFNumberRef v13 = Mutable;
            CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            if (v14)
            {
              uint64_t v15 = v14;
              id v16 = CFDictionaryGetValue(theDict, @"rssi");
              if (v16) {
                CFDictionarySetValue(v13, @"RSSI", v16);
              }
              CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"hasPerCoreRssi");
              if (v17)
              {
                int v73 = 0;
                CFNumberGetValue(v17, kCFNumberIntType, &v73);
                if (v73)
                {
                  CFMutableArrayRef v18 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                  if (v18)
                  {
                    uint64_t v19 = v18;
                    id v20 = (_UNKNOWN **)CFDictionaryGetValue(theDict, @"rssicore0");
                    if (v20) {
                      id v21 = v20;
                    }
                    else {
                      id v21 = &off_100262D88;
                    }
                    CFArrayAppendValue(v19, v21);
                    uint64_t v22 = (_UNKNOWN **)CFDictionaryGetValue(theDict, @"rssicore1");
                    if (v22) {
                      CFMutableArrayRef v23 = v22;
                    }
                    else {
                      CFMutableArrayRef v23 = &off_100262D88;
                    }
                    CFArrayAppendValue(v19, v23);
                    CFDictionarySetValue(v13, @"PER_CORE_RSSI", v19);
                    CFRelease(v19);
                  }
                }
              }
              CFStringRef v24 = CFDictionaryGetValue(theDict, @"snr");
              if (v24) {
                CFDictionarySetValue(v13, @"SNR", v24);
              }
              id v25 = CFDictionaryGetValue(theDict, @"cca");
              if (v25) {
                CFDictionarySetValue(v13, @"CCA", v25);
              }
              CFStringRef v26 = CFDictionaryGetValue(theDict, @"ccaSelfTotal");
              if (v26) {
                CFDictionarySetValue(v15, @"CCA_SELF_TOTAL", v26);
              }
              id v27 = CFDictionaryGetValue(theDict, @"ccaOtherWake");
              if (v27) {
                CFDictionarySetValue(v15, @"CCA_OTHER_WAKE", v27);
              }
              CFTypeID v28 = CFDictionaryGetValue(theDict, @"ccaIntfWake");
              if (v28) {
                CFDictionarySetValue(v15, @"CCA_INTERFERENCE_WAKE", v28);
              }
              if (CFDictionaryGetCount(v15)) {
                CFDictionarySetValue(v13, @"CCA_STATS", v15);
              }
              id v29 = CFDictionaryGetValue(theDict, @"noise");
              if (v29) {
                CFDictionarySetValue(v13, @"NOISE", v29);
              }
              CFStringRef v30 = CFDictionaryGetValue(theDict, @"txFail");
              if (v30) {
                CFDictionarySetValue(v13, @"TXFAIL", v30);
              }
              CFStringRef v31 = CFDictionaryGetValue(theDict, @"txFrames");
              if (v31) {
                CFDictionarySetValue(v13, @"TXFRAMES", v31);
              }
              CFDataRef v32 = CFDictionaryGetValue(theDict, @"txRetries");
              if (v32) {
                CFDictionarySetValue(v13, @"TXRETRANS", v32);
              }
              CFTypeID v33 = CFDictionaryGetValue(theDict, @"rxFrames");
              if (v33) {
                CFDictionarySetValue(v13, @"RXFRAMES", v33);
              }
              CFNumberRef v34 = CFDictionaryGetValue(theDict, @"rxRetries");
              if (v34) {
                CFDictionarySetValue(v13, @"RXRETRYFRMS", v34);
              }
              CFNumberRef v35 = CFDictionaryGetValue(theDict, @"bcnRecv");
              if (v35) {
                CFDictionarySetValue(v13, @"RXBEACONFRMS", v35);
              }
              CFIndex v36 = CFDictionaryGetValue(theDict, @"bcnSched");
              if (v36) {
                CFDictionarySetValue(v13, @"RXBEACONSCHED", v36);
              }
              CFDataRef v37 = CFDictionaryGetValue(theDict, @"fwFrames");
              if (v37) {
                CFDictionarySetValue(v13, @"TXFWFRAMES", v37);
              }
              CFDictionaryRef v38 = CFDictionaryGetValue(theDict, @"fwFail");
              if (v38) {
                CFDictionarySetValue(v13, @"TXFWFAIL", v38);
              }
              uint64_t v39 = CFDictionaryGetValue(theDict, @"fwRetries");
              if (v39) {
                CFDictionarySetValue(v13, @"TXFWRETRANS", v39);
              }
              uint64_t v40 = CFDictionaryGetValue(theDict, @"curBssRssi");
              if (!v40)
              {
LABEL_85:
                unsigned int v62 = CFDictionaryGetValue(theDict, @"recommendationFlags");
                if (v62)
                {
                  CFDictionarySetValue(v13, @"recommendationFlags", v62);
                  char v63 = 0;
                  goto LABEL_89;
                }
LABEL_88:
                char v63 = 1;
LABEL_89:
                *(void *)(a1 + 216) = v13;
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "Simulated LQM Dict: %@", *(void *)(a1 + 216) message];
                }
                if ((v63 & 1) == 0)
                {
                  CFDictionaryRef v65 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                  sub_10002384C(a1, *(void *)(a1 + 112), v65);
                  if (v65) {
                    CFRelease(v65);
                  }
                }
                if (!v15) {
                  goto LABEL_96;
                }
                goto LABEL_95;
              }
              uint64_t v41 = v40;
              CFRange v42 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              if (!v42)
              {
LABEL_95:
                CFRelease(v15);
LABEL_96:
                if (qword_10027DD68)
                {
                  if (*(unsigned char *)(a1 + 208)) {
                    CFDataRef v67 = "ENABLED";
                  }
                  else {
                    CFDataRef v67 = "DISABLED";
                  }
                  [((id)qword_10027DD68) WFLog:4, "Simulate Link Conditions is %s", v67];
                }
                return;
              }
              uint64_t v43 = v42;
              CFDictionaryAddValue(v42, @"RSSI", v41);
              CFBooleanRef v44 = CFDictionaryGetValue(theDict, @"roamReason");
              if (v44) {
                CFDictionarySetValue(v43, @"ROAM_SCAN_REASON", v44);
              }
              CFBooleanRef v45 = CFDictionaryGetValue(theDict, @"roamScanAge");
              if (v45) {
                CFDictionarySetValue(v43, @"ROAM_SCAN_AGE", v45);
              }
              long long v46 = CFDictionaryGetValue(theDict, @"roamStatus");
              if (v46) {
                CFDictionarySetValue(v43, @"ROAM_LAST_STATUS", v46);
              }
              CFNumberRef v47 = CFDictionaryGetValue(theDict, @"roamScanCount");
              if (v47) {
                CFDictionarySetValue(v43, @"ROAM_SCAN_COUNT", v47);
              }
              BOOL v48 = CFDictionaryGetValue(theDict, @"roamCand1Rssi");
              if (!v48) {
                goto LABEL_84;
              }
              CFNumberRef v49 = v48;
              CFMutableArrayRef v50 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
              if (!v50)
              {
LABEL_120:
                CFRelease(v43);
                goto LABEL_95;
              }
              CFStringRef v51 = v50;
              uint64_t v52 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              if (v52)
              {
                unsigned int v53 = v52;
                CFDictionaryAddValue(v52, @"RSSI", v49);
                CFArrayAppendValue(v51, v53);
                CFRelease(v53);
                int v54 = CFDictionaryGetValue(theDict, @"roamCand2Rssi");
                if (!v54)
                {
LABEL_80:
                  uint64_t v58 = CFDictionaryGetValue(theDict, @"roamCand3Rssi");
                  if (!v58)
                  {
LABEL_83:
                    CFDictionaryAddValue(v43, @"ROAM_CACHE", v51);
                    CFRelease(v51);
LABEL_84:
                    CFDictionaryAddValue(v13, @"ROAM_STATE", v43);
                    CFRelease(v43);
                    goto LABEL_85;
                  }
                  CFArrayRef v59 = v58;
                  CFDictionaryRef v60 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                  if (v60)
                  {
                    CFIndex v61 = v60;
                    CFDictionaryAddValue(v60, @"RSSI", v59);
                    CFArrayAppendValue(v51, v61);
                    CFRelease(v61);
                    goto LABEL_83;
                  }
                  goto LABEL_119;
                }
                int v55 = v54;
                uint64_t v56 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                if (v56)
                {
                  uint64_t v57 = v56;
                  CFDictionaryAddValue(v56, @"RSSI", v55);
                  CFArrayAppendValue(v51, v57);
                  CFRelease(v57);
                  goto LABEL_80;
                }
              }
LABEL_119:
              CFRelease(v51);
              goto LABEL_120;
            }
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s ccaStatsDict is NULL!", "__WiFiDeviceSetSimulateLinkTestParams")
            }
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4, "%s lqmDict is NULL!", "__WiFiDeviceSetSimulateLinkTestParams"];
            }
          }
          goto LABEL_96;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: null cmdNum", "WiFiDeviceSetTestParams", v70, v71];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: null testParams", "WiFiDeviceSetTestParams", v70, v71];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null device", "WiFiDeviceSetTestParams", v70, v71];
    }
  }
}

void sub_100072548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:@"%s: Reporting Symptoms Event:failureCode:%llu" message:3, "WiFiDeviceReportSymptomsEvent", a3];
    }
    CFNumberRef v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 5176);
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 5184);
      v7(a1, a2, v8, a3);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: deviceRef is NULL!", "WiFiDeviceReportSymptomsEvent"];
    }
  }
}

void sub_100072644(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      for (int i = 6; ; --i)
      {
        uint64_t v3 = Apple80211Set();
        uint64_t v4 = v3;
        if (v3 != -3905 && v3 != 61 && v3 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s SetRoam status:%u\n", "WiFiDeviceSetRoam", v4];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: bssidInfo is NULL!", "WiFiDeviceSetRoam", v7);
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: deviceRef is NULL!", "WiFiDeviceSetRoam", v7];
    }
  }
}

void sub_100072774(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 112);
    if (v2)
    {
      for (int i = 6; ; --i)
      {
        uint64_t v5 = Apple80211Set();
        uint64_t v6 = v5;
        if (v5 != -3905 && v5 != 61 && v5 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (qword_10027DD68)
      {
        BOOL v9 = "no delay / TDD";
        if (a2 == 1) {
          BOOL v9 = "delay";
        }
        [(id)qword_10027DD68 WFLog:3, "%s: ifName %@ WiFiBT5GPolicy %s error %d", "WiFiDeviceSetWiFiBT5GPolicy", v2, v9, v6 message];
      }
    }
  }
}

__CFArray *sub_100072870(uint64_t a1)
{
  if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 5696))) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (Mutable && CFArrayGetCount(*(CFArrayRef *)(a1 + 5696)) >= 1)
  {
    CFIndex v3 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5696), v3);
      if (ValueAtIndex)
      {
        CFArrayRef v5 = (const __CFArray *)sub_1000C2DE8((uint64_t)ValueAtIndex);
        if (v5)
        {
          CFArrayRef v6 = v5;
          if (CFArrayGetCount(v5) >= 1)
          {
            CFIndex v7 = 0;
            do
            {
              uint64_t v8 = CFArrayGetValueAtIndex(v6, v7);
              CFMutableDictionaryRef v9 = sub_1000C5EB0((uint64_t)v8);
              CFArrayAppendValue(Mutable, v9);
              if (v9) {
                CFRelease(v9);
              }
              ++v7;
            }
            while (v7 < CFArrayGetCount(v6));
          }
        }
      }
      ++v3;
    }
    while (v3 < CFArrayGetCount(*(CFArrayRef *)(a1 + 5696)));
  }
  return Mutable;
}

__CFArray *sub_100072970(uint64_t a1, unsigned int a2)
{
  if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 5696))) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (Mutable && CFArrayGetCount(*(CFArrayRef *)(a1 + 5696)) >= 1)
  {
    CFIndex v5 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5696), v5);
      if (ValueAtIndex)
      {
        uint64_t v7 = (uint64_t)ValueAtIndex;
        double v8 = sub_1001674C8((uint64_t)ValueAtIndex);
        double Current = CFAbsoluteTimeGetCurrent();
        double v10 = Current <= v8 ? 0.0 : (Current - v8) * 1000.0;
        CFArrayRef v11 = (const __CFArray *)sub_1000C2DE8(v7);
        if (v11)
        {
          CFArrayRef v12 = v11;
          if (CFArrayGetCount(v11) >= 1)
          {
            CFIndex v13 = 0;
            do
            {
              CFMutableDictionaryRef v14 = CFArrayGetValueAtIndex(v12, v13);
              if (v14)
              {
                uint64_t v15 = v14;
                uint64_t v16 = sub_1000C6FC0((uint64_t)v14, @"ORIG_AGE") + v10;
                if (!a2 || v16 <= a2)
                {
                  sub_10001A610((uint64_t)v15, @"AGE", v16);
                  CFArrayAppendValue(Mutable, v15);
                }
              }
              ++v13;
            }
            while (v13 < CFArrayGetCount(v12));
          }
        }
      }
      ++v5;
    }
    while (v5 < CFArrayGetCount(*(CFArrayRef *)(a1 + 5696)));
  }
  return Mutable;
}

uint64_t sub_100072AF0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 5936);
}

uint64_t sub_100072AF8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 5800);
}

void sub_100072B00(uint64_t a1, int a2)
{
  if (a1)
  {
    if (qword_10027DD68)
    {
      CFIndex v5 = "enabled";
      if (!a2) {
        CFIndex v5 = "disabled";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: %s power save mode", "WiFiDeviceAllowPowerSaveMode", v5);
    }
    for (int i = 6; ; --i)
    {
      int v7 = Apple80211Set();
      if (v7 != -3905 && v7 != 61 && v7 != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: deviceRef is NULL!", "WiFiDeviceAllowPowerSaveMode"];
    }
  }
}

uint64_t sub_100072C28(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 37) >> 3) & 1;
}

uint64_t sub_100072C34(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 37) >> 4) & 1;
}

uint64_t sub_100072C40(uint64_t a1)
{
  return *(unsigned char *)(a1 + 38) & 1;
}

uint64_t sub_100072C4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 37) >> 7;
}

uint64_t sub_100072C58(uint64_t a1)
{
  if (qword_10027D658)
  {
    CFRelease((CFTypeRef)qword_10027D658);
    qword_10027D658 = 0;
  }
  if (qword_10027D660)
  {
    CFRelease((CFTypeRef)qword_10027D660);
    qword_10027D660 = 0;
  }
  CFDictionaryRef v2 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), (CFStringRef)qword_10027D668);
  CFDictionaryRef v3 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), (CFStringRef)qword_10027D670);
  CFDictionaryRef v4 = v3;
  if (!v2)
  {
    uint64_t v6 = 0;
    qword_10027D658 = 0;
    if (v3) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  CFStringRef Value = CFDictionaryGetValue(v2, kSCDynamicStorePropNetPrimaryInterface);
  qword_10027D658 = (uint64_t)Value;
  if (!Value)
  {
    uint64_t v6 = 0;
    if (v4) {
      goto LABEL_10;
    }
LABEL_13:
    qword_10027D660 = 0;
    goto LABEL_14;
  }
  CFRetain(Value);
  uint64_t v6 = 1;
  if (!v4) {
    goto LABEL_13;
  }
LABEL_10:
  int v7 = CFDictionaryGetValue(v4, kSCDynamicStorePropNetPrimaryInterface);
  qword_10027D660 = (uint64_t)v7;
  if (v7)
  {
    CFRetain(v7);
    uint64_t v6 = 1;
  }
LABEL_14:
  if (qword_10027DD68)
  {
    CFMutableDictionaryRef v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"IP", +[NSString stringWithFormat:@"IPv4 Primary interface is %@ and IPv6 Primary Interface is %@", qword_10027D658, qword_10027D660]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buuint64_t f = 136446210;
      CFArrayRef v12 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v9 UTF8String]] UTF8String];
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v6;
}

__CFDictionary *sub_100072E88(uint64_t a1, const void *a2)
{
  CFArrayRef theArray = 0;
  CFDictionaryRef v3 = sub_10001C9E8(a1, a2);
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == sub_10001CADC())
    {
      LODWORD(v6) = sub_100169388((uint64_t)v4, 42, 0, &theArray);
    }
    else
    {
      for (int i = 6; ; --i)
      {
        int v25 = Apple80211CopyValue();
        LODWORD(v6) = v25;
        if (v25 != -3905 && v25 != 61 && v25 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
    }
    if (!theArray) {
      return 0;
    }
    double v8 = "WiFiDeviceCopyInterfaceDataUsage";
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: station list %@", "WiFiDeviceCopyInterfaceDataUsage", theArray message];
    }
    CFStringRef value = (void *)a2;
    if (CFArrayGetCount(theArray) < 1)
    {
      CFMutableDictionaryRef Mutable = 0;
    }
    else
    {
      CFIndex v9 = 0;
      CFMutableDictionaryRef Mutable = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v9);
        if (ValueAtIndex)
        {
          MutableCFDictionaryRef Copy = (CFDictionaryRef *)CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, ValueAtIndex);
          CFTypeID v13 = CFGetTypeID(v4);
          if (v13 == sub_10001CADC())
          {
            uint64_t v6 = sub_100169388((uint64_t)v4, 79, 0, MutableCopy);
          }
          else
          {
            for (int j = 6; ; --j)
            {
              uint64_t v22 = Apple80211CopyValue();
              uint64_t v6 = v22;
              if (v22 != -3905 && v22 != 61 && v22 != 16) {
                break;
              }
              if (!j) {
                break;
              }
              usleep(0x7A120u);
            }
          }
          if (!v6)
          {
            if (!Mutable) {
              CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
            }
            CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            uint64_t v15 = CFDictionaryGetValue((CFDictionaryRef)MutableCopy, @"STATION_MAC");
            CFDictionarySetValue(v14, @"DataUsageInterfacePeerAddr", v15);
            uint64_t v32 = 0;
            uint64_t valuePtr = 0;
            CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)MutableCopy, @"STA_RXBYTES");
            if (v16) {
              CFNumberGetValue(v16, kCFNumberSInt32Type, (char *)&valuePtr + 4);
            }
            CFNumberRef v17 = v8;
            CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)MutableCopy, @"STA_TXBYTES");
            if (v18) {
              CFNumberGetValue(v18, kCFNumberSInt32Type, &valuePtr);
            }
            uint64_t v32 = (valuePtr + HIDWORD(valuePtr));
            CFNumberRef v19 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &v32);
            CFDictionarySetValue(v14, @"DataUsageInterfacePeerLastBytes", v19);
            if (v19) {
              CFRelease(v19);
            }
            CFArrayAppendValue(Mutable, v14);
            if (v14) {
              CFRelease(v14);
            }
            double v8 = v17;
          }
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: err=%d, client stats %@", v8, v6, MutableCopy message];
          }
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
        }
        ++v9;
      }
      while (v9 < CFArrayGetCount(theArray));
    }
    id v27 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionarySetValue(v27, @"DataUsageInterfaceName", value);
    if (Mutable && CFArrayGetCount(Mutable)) {
      CFDictionarySetValue(v27, @"DataUsageInterfacePeerList", Mutable);
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: interface data usage %@", v8, v27 message];
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: unknown interface %@", "WiFiDeviceCopyInterfaceDataUsage", a2 message];
    }
    id v27 = 0;
    LODWORD(v6) = 0;
  }
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
  if (v27 && v6)
  {
    CFRelease(v27);
    return 0;
  }
  return v27;
}

uint64_t sub_1000732F4(uint64_t a1, _DWORD *a2)
{
  CFStringRef value = 0;
  if (!a2) {
    return 4294963396;
  }
  uint64_t v2 = 4294963396;
  if (!a1 || !*(void *)(a1 + 112)) {
    return v2;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 4294963396;
  }
  CFDictionaryRef v5 = Mutable;
  *a2 = 0;
  for (int i = 6; ; --i)
  {
    uint64_t v7 = Apple80211Get();
    uint64_t v2 = v7;
    if ((int)v7 <= 15)
    {
      if (v7 != -3905) {
        break;
      }
    }
    else if (v7 != 61 && v7 != 16)
    {
      goto LABEL_21;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  if (v7)
  {
LABEL_21:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s Apple80211Get(APPLE80211_IOC_AUTH_TYPE) failed: %d", @"WiFiDeviceGetAuthType", v2];
    }
    goto LABEL_18;
  }
  CFDictionaryGetValueIfPresent(v5, @"AUTH_UPPER", (const void **)&value);
  if (value) {
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, a2);
  }
LABEL_18:
  CFRelease(v5);
  return v2;
}

uint64_t sub_100073450(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_10001C9E8(a1, a2);

  return sub_10016BCB8((uint64_t)v6, a3, a4);
}

uint64_t sub_100073490(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 38) >> 5) & 1;
}

uint64_t sub_10007349C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 39) >> 5) & 1;
}

void sub_1000734A8(uint64_t a1)
{
  uint64_t valuePtr = 0;
  CFDictionaryRef v3 = (void *)qword_10027DD68;
  if (a1)
  {
    if (qword_10027DD68)
    {
      if (_os_feature_enabled_impl()) {
        CFDictionaryRef v4 = "enabled";
      }
      else {
        CFDictionaryRef v4 = "disabled";
      }
      [v3 WFLog:3 message:@"%s: LBT is %s", @"WiFiDeviceApplyFeatureFlags", v4];
    }
    if (_os_feature_enabled_impl())
    {
      uint64_t v5 = 1;
      uint64_t valuePtr = 1;
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v7 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      if (_os_feature_enabled_impl()) {
        double v8 = "enabled";
      }
      else {
        double v8 = "disabled";
      }
      [v7 WFLog:3 message:@"%s: WiFi LQM CrashTracer is %s", @"WiFiDeviceApplyFeatureFlags", v8];
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 2uLL;
      uint64_t valuePtr = v5;
    }
    double v10 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      if (_os_feature_enabled_impl()) {
        CFArrayRef v11 = "enabled";
      }
      else {
        CFArrayRef v11 = "disabled";
      }
      [v10 WFLog:3, "%s: WiFi DNSSymptoms is %s", "WiFiDeviceApplyFeatureFlags", v11];
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x200uLL;
      uint64_t valuePtr = v5;
    }
    CFTypeID v13 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      if (_os_feature_enabled_impl()) {
        CFMutableDictionaryRef v14 = "enabled";
      }
      else {
        CFMutableDictionaryRef v14 = "disabled";
      }
      [v13 WFLog:3 message:@"%s: WiFi ViVoDatapathTuning is %s", @"WiFiDeviceApplyFeatureFlags", v14];
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x100uLL;
      uint64_t valuePtr = v5;
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x1000uLL;
      uint64_t valuePtr = v5;
    }
    CFNumberRef v16 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      if (_os_feature_enabled_impl()) {
        CFNumberRef v17 = "enabled";
      }
      else {
        CFNumberRef v17 = "disabled";
      }
      [v16 WFLog:3 message:@"%s: WiFi One Core Tx is %s", @"WiFiDeviceApplyFeatureFlags", v17];
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x800uLL;
      uint64_t valuePtr = v5;
    }
    CFNumberRef v19 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      if (_os_feature_enabled_impl()) {
        id v20 = "enabled";
      }
      else {
        id v20 = "disabled";
      }
      [v19 WFLog:3, "%s: WiFi Sensing is %s", "WiFiDeviceApplyFeatureFlags", v20];
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x4000uLL;
      uint64_t valuePtr = v5;
    }
    uint64_t v22 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      if (_os_feature_enabled_impl()) {
        CFMutableArrayRef v23 = "enabled";
      }
      else {
        CFMutableArrayRef v23 = "disabled";
      }
      [v22 WFLog:3 message:@"%s: WiFi QoS MSCS is %s", @"WiFiDeviceApplyFeatureFlags", v23];
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x2000uLL;
      uint64_t valuePtr = v5;
    }
    int v25 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      if (_os_feature_enabled_impl()) {
        CFStringRef v26 = "enabled";
      }
      else {
        CFStringRef v26 = "disabled";
      }
      [v25 WFLog:3 message:@"%s: P2P Optimization for Ultra Low Latency Realtime Infra is %s", @"WiFiDeviceApplyFeatureFlags", v26];
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x8000uLL;
      uint64_t valuePtr = v5;
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x10000uLL;
      uint64_t valuePtr = v5;
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x80000uLL;
      uint64_t valuePtr = v5;
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x20000uLL;
      uint64_t valuePtr = v5;
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x40000uLL;
      uint64_t valuePtr = v5;
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x100000uLL;
      uint64_t valuePtr = v5;
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x200000uLL;
      uint64_t valuePtr = v5;
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x400000uLL;
      uint64_t valuePtr = v5;
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x800000uLL;
      uint64_t valuePtr = v5;
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x1000000uLL;
      uint64_t valuePtr = v5;
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x2000000uLL;
      uint64_t valuePtr = v5;
    }
    if (_os_feature_enabled_impl())
    {
      v5 |= 0x4000000uLL;
      uint64_t valuePtr = v5;
    }
    if (_os_feature_enabled_impl()) {
      uint64_t valuePtr = v5 | 0x8000000;
    }
    CFNumberRef v27 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
    if (v27)
    {
      CFNumberRef v28 = v27;
      sub_100017D28(a1, *(const void **)(a1 + 112), 469, 0, (uint64_t)v27);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: ifName %@ FeatureFlags 0x%llx error %d\n", "WiFiDeviceApplyFeatureFlags", *(void *)(a1 + 112), valuePtr, 4294963396 message];
      }
      CFRelease(v28);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s:cannot allocate valueRef"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: null device", @"WiFiDeviceApplyFeatureFlags"];
    }
  }
}

const void *sub_100073B18(uint64_t a1, const void *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (!*(void *)(a1 + 5840) || !*(void *)(a1 + 5848)) {
      return 0;
    }
    uint64_t result = sub_10001A43C(a2);
    if (result)
    {
      uint64_t result = sub_10001E404((uint64_t)a2, @"BSSID");
      if (result)
      {
        CFStringRef v5 = *(const __CFString **)(a1 + 5840);
        CFStringRef v6 = (const __CFString *)sub_10001A43C(a2);
        if (CFEqual(v5, v6))
        {
          CFStringRef v7 = *(const __CFString **)(a1 + 5848);
          CFStringRef v8 = (const __CFString *)sub_10001E404((uint64_t)a2, @"BSSID");
          if (CFEqual(v7, v8))
          {
            if (*(unsigned char *)(a1 + 5864)) {
              return (const void *)(*(unsigned char *)(a1 + 5865) != 0);
            }
          }
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100073BEC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  CFStringRef v6 = sub_10001C9E8(a1, a2);

  return sub_10016BCC0((uint64_t)v6, a3, a4);
}

uint64_t sub_100073C2C(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 5872);
  }
  else {
    return 4294967274;
  }
}

void sub_100073C40(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    if (*(void *)(a1 + 120))
    {
      if (cf)
      {
        CFTypeID v4 = CFGetTypeID(cf);
        if (v4 == CFDictionaryGetTypeID())
        {
          CFStringRef v5 = *(__CFDictionary **)(a1 + 120);
          CFDictionarySetValue(v5, @"ApInfoParams", cf);
        }
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null properties." :@"WiFiDeviceSetAPInfo"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null device." arguments:("WiFiDeviceSetAPInfo", nil)];
    }
  }
}

const void *sub_100073D5C(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: null device.", "WiFiDeviceGetAPInfo"];
    }
    goto LABEL_10;
  }
  CFDictionaryRef v1 = *(const __CFDictionary **)(a1 + 120);
  if (!v1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null properties.":@"WiFiDeviceGetAPInfo"];
    }
LABEL_10:
    return 0;
  }

  return CFDictionaryGetValue(v1, @"ApInfoParams");
}

BOOL sub_100073E24(uint64_t a1)
{
  CFBooleanRef Value = (CFBooleanRef)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 120), @"facetimeCallInProgress");
  return Value && Value == kCFBooleanTrue;
}

void sub_100073E60(uint64_t a1, const void *a2)
{
  if (a1)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      CFDictionaryRef v5 = Mutable;
      CFDictionaryAddValue(Mutable, @"CHIP_RESET_TRIGGER", a2);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Trigger CoreCapture at driver:%@", "WiFiDeviceTriggerCoreCapture", a2 message];
      }
      sub_100065EC0(a1, v5);
      CFRelease(v5);
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: CoreCaptureTriggerInfo allocation failed!", "WiFiDeviceTriggerCoreCapture"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: device is NULL", "WiFiDeviceTriggerCoreCapture"];
    }
  }
}

void sub_100073FBC(uint64_t a1, int a2)
{
  if (a1)
  {
    if (qword_10027DD68)
    {
      CFDictionaryRef v5 = "enabled";
      if (!a2) {
        CFDictionaryRef v5 = "disabled";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: ranging log dump is %s", "WiFiDeviceSetEnableRangingLogDump", v5);
    }
    *(unsigned char *)(a1 + 5956) = a2;
  }
}

void sub_100074054(uint64_t a1, int a2)
{
  if (a1)
  {
    if (qword_10027DD68)
    {
      CFDictionaryRef v5 = "Enabled";
      if (!a2) {
        CFDictionaryRef v5 = "Disabled";
      }
      [((id)qword_10027DD68) WFLog:message:3, "%s: BT A2DP LLA Traffic Status = %s", "WiFiDeviceUpdateBTA2DPLLATrafficStatus", v5];
    }
    *(unsigned char *)(a1 + 5957) = a2;
  }
}

uint64_t sub_1000740EC(uint64_t a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (v3)
  {
    CFNumberRef v4 = v3;
    sub_100017D28(a1, *(const void **)(a1 + 112), 514, 0, (uint64_t)v3);
    CFRelease(v4);
  }
  return 1;
}

uint64_t sub_10007415C(uint64_t a1, int a2)
{
  if (a1) {
    uint64_t v2 = *(const void **)(a1 + 112);
  }
  else {
    uint64_t v2 = 0;
  }
  CFNumberRef v3 = (uint64_t *)&kCFBooleanTrue;
  if (a2 != 1) {
    CFNumberRef v3 = (uint64_t *)&kCFBooleanFalse;
  }
  return sub_100017D28(a1, v2, 507, 0, *v3);
}

void sub_100074198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a3 > 2 || *(_DWORD *)(a1 + 5936) > 2u)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: association type changed from %d to %d", "WiFiDeviceOverrideAssociationType", *(unsigned int *)(a1 + 5936), a3)];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: association type changed from %@ to %@", "WiFiDeviceOverrideAssociationType", off_10023F800[*(unsigned int *)(a1 + 5936)], off_10023F800[a3] message];
      }
    }
    *(_DWORD *)(a1 + 5936) = a3;
  }
}

uint64_t sub_10007427C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 46) & 1;
}

uint64_t sub_100074288(uint64_t a1, uint64_t a2, const __CFData *a3)
{
  uint64_t v3 = 4294963396;
  if (a1 && a2 && a3)
  {
    if (*(unsigned char *)(a1 + 46))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Attempting APPLE80211_IOC_NDD_REQ on %@", a2 message];
      }
      for (int i = 6; ; --i)
      {
        CFDataGetBytePtr(a3);
        CFDataGetLength(a3);
        uint64_t v8 = Apple80211Set();
        uint64_t v3 = v8;
        if ((int)v8 <= 15)
        {
          if (v8 != -3905) {
            break;
          }
        }
        else if (v8 != 61 && v8 != 16)
        {
          goto LABEL_18;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (!v8) {
        return v3;
      }
LABEL_18:
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: IOC %d returned error %d", @"WiFiDevicePerformNDD", 551, v3];
      }
    }
    else
    {
      return 4294963389;
    }
  }
  return v3;
}

uint64_t sub_1000743D0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 40) >> 1) & 1;
}

uint64_t sub_1000743DC(uint64_t a1, const void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 4294963396;
  if (a1 && a2 && a3)
  {
    if ((*(unsigned char *)(a1 + 40) & 2) != 0)
    {
      id v11 = [a3 objectForKeyedSubscript:@"SENSING_PARAMS_MATCH_MAC_ADDRESS"];
      uint64_t v12 = [v11 count];
      if (v12)
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          id v14 = [a3 mutableCopy];
          [v14 setObject:objc_msgSend(v11, "objectAtIndexedSubscript:", i) forKeyedSubscript:@"SENSING_PARAMS_MATCH_MAC_ADDRESS"];
          ++*(_DWORD *)(a1 + 5964);
          CFTypeRef v15 = CFRetain(a2);
          uint64_t v5 = sub_100063F5C(a1, 0xEu, 0, (uint64_t)v15, (uint64_t)v14, a4, a5, 0, 0);
          if (v5)
          {
            --*(_DWORD *)(a1 + 5964);
            CFRelease(a2);
            if (v14) {
              CFRelease(v14);
            }
          }
        }
      }
      else
      {
        id v18 = [a3 mutableCopy];
        [v18 setObject:@"00:00:00:00:00:00" forKeyedSubscript:@"SENSING_PARAMS_MATCH_MAC_ADDRESS"];
        ++*(_DWORD *)(a1 + 5964);
        CFTypeRef v19 = CFRetain(a2);
        uint64_t v5 = sub_100063F5C(a1, 0xEu, 0, (uint64_t)v19, (uint64_t)v18, a4, a5, 0, 0);
        if (v5)
        {
          --*(_DWORD *)(a1 + 5964);
          CFRelease(a2);
          if (v18) {
            CFRelease(v18);
          }
        }
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Sending kWiFiDeviceCommandTypeSensing on %@ (%d), expected result[%d]", a2, v5, *(unsigned int *)(a1 + 5964) message];
      }
    }
    else
    {
      return 4294963389;
    }
  }
  return v5;
}

uint64_t sub_1000745DC(uint64_t a1, const void *a2)
{
  uint64_t v2 = 4294963396;
  if (a1 && a2)
  {
    if ((*(unsigned char *)(a1 + 40) & 2) == 0) {
      return 4294963389;
    }
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 5968));
    *(_DWORD *)(a1 + 5960) = 0;
    uint64_t v5 = sub_10001C9E8(a1, a2);
    if (v5)
    {
      CFTypeID v6 = CFGetTypeID(v5);
      uint64_t v7 = sub_10001CADC();
      if (v6 != v7)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "Attempting APPLE80211_IOC_SENSING_DISABLE on %@", a2 message];
        }
        for (int i = 6; ; --i)
        {
          uint64_t v10 = Apple80211Set();
          uint64_t v2 = v10;
          if ((int)v10 <= 15)
          {
            if (v10 != -3905) {
              break;
            }
          }
          else if (v10 != 61 && v10 != 16)
          {
            goto LABEL_19;
          }
          if (!i) {
            break;
          }
          usleep(0x7A120u);
        }
        if (!v10) {
          return v2;
        }
LABEL_19:
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:4, @"%s: IOC %d returned error %d", @"WiFiDeviceSensingDisable", 409, v2];
        }
        goto LABEL_21;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: unsupported interface %@", "WiFiDeviceSensingDisable", a2 message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: unknown interface %@", "WiFiDeviceSensingDisable", a2 message];
      }
    }
    uint64_t v2 = 4294963393;
LABEL_21:
  }
  return v2;
}

void sub_100074790(uint64_t a1)
{
  if (a1) {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 5968));
  }
}

uint64_t sub_1000747A0(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 5960) = a2;
  }
  return result;
}

uint64_t sub_1000747AC(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 5960);
  }
  return result;
}

uint64_t sub_1000747B8(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 5964);
  }
  return result;
}

uint64_t sub_1000747C4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 5968);
  }
  return result;
}

void sub_1000747D0(uint64_t a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (v3)
  {
    CFNumberRef v4 = v3;
    sub_100017D28(a1, *(const void **)(a1 + 112), 345, 0, (uint64_t)v3);
    CFRelease(v4);
  }
}

uint64_t sub_10007483C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 6;
  if (a1 && a2)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v5 = Apple80211Set();
      uint64_t v2 = v5;
      if ((int)v5 <= 15)
      {
        if (v5 != -3905) {
          break;
        }
      }
      else if (v5 != 61 && v5 != 16)
      {
        goto LABEL_15;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    if (!v5) {
      return v2;
    }
LABEL_15:
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Error %d setting blocked bands %@", v2, a2 message];
    }
  }
  return v2;
}

uint64_t sub_100074914(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 40) >> 4) & 1;
}

uint64_t sub_100074920(uint64_t result, char a2)
{
  *(unsigned char *)(result + 5958) = a2;
  return result;
}

uint64_t sub_10007492C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 5959) = a2;
  return result;
}

uint64_t sub_100074938(uint64_t result, char a2, char a3)
{
  *(unsigned char *)(result + 54) = a2;
  *(unsigned char *)(result + 55) = a3;
  return result;
}

uint64_t sub_100074944(uint64_t a1, int a2)
{
  if (!a1) {
    return 4294963396;
  }
  HIDWORD(v9) = 0;
  if (a2) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  LODWORD(v9) = v2;
  for (int i = 6; ; --i)
  {
    uint64_t v4 = Apple80211Set();
    uint64_t v5 = v4;
    if ((int)v4 <= 15)
    {
      if (v4 != -3905) {
        break;
      }
    }
    else if (v4 != 61 && v4 != 16)
    {
      goto LABEL_18;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  if (!v4) {
    return v5;
  }
LABEL_18:
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Error sending sleep state notification %d", v5, v9);
  }
  return v5;
}

uint64_t sub_100074A2C(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v5 = sub_100017D28(a1, a2, 488, 0, (uint64_t)a3);
  if (a3)
  {
    CFTypeID v6 = CFGetTypeID(a3);
    if (v6 == CFDictionaryGetTypeID())
    {
      CFBooleanRef Value = CFDictionaryGetValue((CFDictionaryRef)a3, @"IO80211InterfaceCallStatus");
      if (Value) {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 120), @"facetimeCallInProgress", Value);
      }
    }
  }
  return v5;
}

void sub_100074AB4(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Enter: %s:%d\n", "__WiFiDeviceRelease", 2234);
  }
  CFNumberRef v3 = *(const void **)(a1 + 5784);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 5784) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 176);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 176) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 200);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 200) = 0;
  }
  CFTypeID v6 = *(const void **)(a1 + 144);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 144) = 0;
  }
  io_object_t v7 = *(_DWORD *)(a1 + 104);
  if (v7)
  {
    IOObjectRelease(v7);
    *(_DWORD *)(a1 + 104) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 112);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 112) = 0;
  }
  uint64_t v9 = *(const void **)(a1 + 120);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v10 = *(IONotificationPort **)(a1 + 96);
  if (v10)
  {
    IONotificationPortDestroy(v10);
    *(void *)(a1 + 96) = 0;
  }
  io_object_t v11 = *(_DWORD *)(a1 + 24);
  if (v11)
  {
    IOObjectRelease(v11);
    *(_DWORD *)(a1 + 24) = 0;
  }
  uint64_t v12 = *(const void **)(a1 + 152);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 152) = 0;
  }
  CFTypeID v13 = *(const void **)(a1 + 5696);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 5696) = 0;
  }
  id v14 = *(const void **)(a1 + 5752);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 5752) = 0;
  }
  CFTypeRef v15 = *(const void **)(a1 + 5656);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 5656) = 0;
  }
  CFNumberRef v16 = *(const void **)(a1 + 5664);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 5664) = 0;
  }
  CFNumberRef v17 = *(const void **)(a1 + 5792);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 5792) = 0;
  }
  id v18 = *(const void **)(a1 + 216);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 216) = 0;
  }
  CFTypeRef v19 = *(const void **)(a1 + 5840);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 5840) = 0;
  }
  id v20 = *(const void **)(a1 + 5848);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(a1 + 5848) = 0;
  }
  id v21 = *(const void **)(a1 + 232);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(a1 + 232) = 0;
  }
  uint64_t v22 = *(const void **)(a1 + 5968);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(a1 + 5968) = 0;
  }
  CFMutableArrayRef v23 = *(const void **)(a1 + 160);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(a1 + 160) = 0;
  }
  CFStringRef v24 = *(const void **)(a1 + 168);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(a1 + 168) = 0;
  }
  int v25 = *(const void **)(a1 + 5824);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(a1 + 5824) = 0;
  }
  CFStringRef v26 = *(const void **)(a1 + 5832);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a1 + 5832) = 0;
  }
  CFNumberRef v27 = *(const void **)(a1 + 5920);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(a1 + 5920) = 0;
  }
  CFNumberRef v28 = *(const void **)(a1 + 4336);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(a1 + 4336) = 0;
  }
  id v29 = *(const void **)(a1 + 4328);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(a1 + 4328) = 0;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"Exit : %s:%d\n" args:@"__WiFiDeviceRelease", 2294];
  }
}

void sub_100074D10(uint64_t a1, CFTypeRef cf, char a3)
{
  CFTypeID v6 = *(const void **)(a1 + 5680);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 5680) = 0;
  }
  *(unsigned char *)(a1 + 5688) = 0;
  if (cf)
  {
    *(void *)(a1 + 5680) = CFRetain(cf);
    *(unsigned char *)(a1 + 5688) = a3;
  }
}

void sub_100074D70(uint64_t a1, CFTypeRef cf)
{
  uint64_t v4 = *(const void **)(a1 + 5672);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 5672) = 0;
  }
  if (cf) {
    *(void *)(a1 + 5672) = CFRetain(cf);
  }
}

void sub_100074DB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 64))
  {
    if (*(void *)(v1 + 5680))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        uint64_t v4 = Mutable;
        CFDictionarySetValue(Mutable, @"CompletedUsingBeaconCache", kCFBooleanTrue);
        sub_100074E8C(v1, *(void *)(v1 + 112), *(CFTypeRef *)(v1 + 5680), (uint64_t)v4, 0);
        CFRelease(v4);
      }
      else
      {
        sub_100074E8C(v1, *(void *)(v1 + 112), *(CFTypeRef *)(v1 + 5680), 0, 0);
      }
    }
    uint64_t v5 = *(const void **)(a1 + 32);
  }
  else
  {
    uint64_t v5 = *(const void **)(a1 + 32);
  }

  CFRelease(v5);
}

void sub_100074E8C(uint64_t a1, uint64_t a2, CFTypeRef cf, uint64_t a4, uint64_t a5)
{
  io_object_t v7 = (unsigned char *)(a1 + 5688);
  uint64_t v8 = *(const void **)(a1 + 5672);
  id v68 = *(void (**)(uint64_t, uint64_t, __CFArray *, uint64_t, uint64_t, uint64_t))(a1 + 4728);
  uint64_t v66 = *(void *)(a1 + 4736);
  if (!cf || (CFTypeID v10 = CFGetTypeID(cf), v10 != CFArrayGetTypeID()))
  {
    id v14 = 0;
    goto LABEL_11;
  }
  io_object_t v11 = sub_10005A4D0((const __CFArray *)cf, *(_DWORD *)(a1 + 240), *(_DWORD *)(a1 + 248));
  CFArrayRef v12 = v11;
  if (v7[208]) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = v11 == 0;
  }
  if (v13)
  {
    id v14 = v11;
    if (v11)
    {
LABEL_25:
      CFAllocatorRef v17 = kCFAllocatorDefault;
      CFArrayRef v12 = v14;
      goto LABEL_26;
    }
LABEL_11:
    CFArrayRef v12 = 0;
    goto LABEL_33;
  }
  CFNumberRef v16 = v15;
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: Filtering WAPI networks", @"__WiFiDeviceProcessScanDoneEvent"];
  }
  CFAllocatorRef v17 = kCFAllocatorDefault;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    id v14 = Mutable;
    if (CFArrayGetCount(v12) >= 1)
    {
      CFIndex v19 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v12, v19);
        id v21 = ValueAtIndex;
        if (ValueAtIndex && sub_10001FC6C((BOOL)ValueAtIndex))
        {
          uint64_t v22 = v7;
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: filtered out WAPI network %@", "__WiFiDeviceProcessScanDoneEvent", sub_10001A43C(v21) message];
          }
          io_object_t v7 = v22;
        }
        else
        {
          CFArrayAppendValue(v14, v21);
        }
        ++v19;
      }
      while (v19 < CFArrayGetCount(v12));
    }
    CFRelease(v12);
    goto LABEL_25;
  }
LABEL_26:
  id v14 = CFArrayCreateMutable(v17, 0, &kCFTypeArrayCallBacks);
  if (v14)
  {
    CFIndex Count = CFArrayGetCount(v12);
    if (Count >= 1)
    {
      CFIndex v25 = Count;
      for (CFIndex i = 0; i != v25; ++i)
      {
        CFNumberRef v27 = CFArrayGetValueAtIndex(v12, i);
        if (v27)
        {
          CFMutableDictionaryRef v28 = sub_1000758DC((uint64_t)v27);
          if (!v28) {
            break;
          }
          CFMutableDictionaryRef v29 = v28;
          CFArrayAppendValue(v14, v28);
          CFRelease(v29);
        }
      }
    }
  }
LABEL_33:
  if (qword_10027DD68)
  {
    CFIndex v31 = v12 ? CFArrayGetCount(v12) : 0;
    uint64_t v32 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"SCAN", +[NSString stringWithFormat:@"Completed Apple80211ScanAsync on %@ (0x%x) with %ld networks", a2, a5, v31]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buuint64_t f = 136446210;
      uint64_t v71 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v32 UTF8String]] UTF8String];
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
  }
  if ((a5 & 0xFFFFFFFD) == 0xE0820445 || a5 == -528350142) {
    uint64_t v34 = 16;
  }
  else {
    uint64_t v34 = a5;
  }
  if (v8) {
    CFRetain(v8);
  }
  if (v7[32])
  {
    sub_10006E1F8(a1, 0);
    v7[32] = 0;
  }
  CFNumberRef v35 = sub_10006CC68(v12, v14, (CFDictionaryRef)v8);
  if (v14 && v8 && !v34 && v12)
  {
    *(_DWORD *)buuint64_t f = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v8, @"SCAN_TYPE");
    if (Value) {
      CFNumberGetValue(Value, kCFNumberIntType, buf);
    }
    if (*(_DWORD *)buf != 3 && !*v7 && !sub_1000757D0((const __CFDictionary *)v8))
    {
      if (!*(void *)(a1 + 5696))
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: scanRequest or scanResults or cache empty", "__WiFiDeviceAddScanCacheEntry")];
        }
        CFAllocatorRef v42 = kCFAllocatorDefault;
        goto LABEL_71;
      }
      CFArrayRef theArray = *(__CFArray **)(a1 + 5696);
      CFDataRef v37 = sub_1001673C4();
      if (!v37)
      {
        CFAllocatorRef v42 = kCFAllocatorDefault;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: WiFiCacheEntryCreateMutable failed" : @"__WiFiDeviceAddScanCacheEntry"];
        }
        goto LABEL_71;
      }
      uint64_t v38 = (uint64_t)v37;
      CFTypeRef cfa = v37;
      if (sub_100167430((uint64_t)v37, v8))
      {
        if (sub_100167498(v38))
        {
          if (CFArrayGetCount(v12) >= 1)
          {
            CFIndex v39 = 0;
            do
            {
              uint64_t v40 = CFArrayGetValueAtIndex(v12, v39);
              CFNumberRef v41 = sub_1000C6FC0((uint64_t)v40, @"AGE");
              sub_10001A610((uint64_t)v40, @"ORIG_AGE", (uint64_t)v41);
              ++v39;
            }
            while (v39 < CFArrayGetCount(v12));
          }
          if (sub_100167464((uint64_t)cfa, v12))
          {
            CFArrayAppendValue(theArray, cfa);
            CFAllocatorRef v42 = kCFAllocatorDefault;
            uint64_t v43 = cfa;
LABEL_67:
            CFRelease(v43);
LABEL_71:
            if (_os_feature_enabled_impl()) {
              double v45 = 30.0;
            }
            else {
              double v45 = 14.0;
            }
            sub_100075810(*(const __CFArray **)(a1 + 5696), v45);
            long long v46 = *(NSObject **)(a1 + 5712);
            dispatch_time_t v47 = dispatch_time(0, (uint64_t)(v45 * 1000000000.0));
            dispatch_source_set_timer(v46, v47, 0xFFFFFFFFFFFFFFFFLL, 0);
            BOOL v48 = CFDictionaryCreateMutable(v42, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            cfb = v48;
            if (v48
              && (CFNumberRef v49 = v48, CFDictionaryAddValue(v48, @"scanRequest", v8), (v50 = sub_10005A3F4(v12)) != 0))
            {
              CFStringRef v51 = v49;
              uint64_t v52 = v50;
              CFDictionaryAddValue(v51, @"scanResults", v50);
              CFRelease(v52);
              unsigned int v53 = CFDictionaryCreateMutable(v42, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              int v54 = v53;
              if (v53)
              {
                CFDictionaryAddValue(v53, @"scanRequest", v8);
                int v55 = sub_10005A3F4(v14);
                if (v55)
                {
                  uint64_t v56 = v55;
                  CFDictionaryAddValue(v54, @"scanResults", v55);
                  CFRelease(v56);
                }
              }
            }
            else
            {
              int v54 = 0;
            }
            uint64_t v57 = *(void (**)(uint64_t, uint64_t, __CFDictionary *, __CFDictionary *, void, void))(a1 + 4744);
            if (v57) {
              v57(a1, a2, cfb, v54, 0, *(void *)(a1 + 4752));
            }
            if (cfb) {
              CFRelease(cfb);
            }
            if (v54) {
              CFRelease(v54);
            }
            goto LABEL_85;
          }
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: WiFiCacheEntrySetResults failed", "__WiFiDeviceAddScanCacheEntry")
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: WiFiCacheEntrySetTimestampNow failed" args:("__WiFiDeviceAddScanCacheEntry")];
          }
        }
        CFAllocatorRef v42 = kCFAllocatorDefault;
      }
      else
      {
        CFAllocatorRef v42 = kCFAllocatorDefault;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: WiFiCacheEntrySetRequest failed" : @"__WiFiDeviceAddScanCacheEntry"];
        }
      }
      uint64_t v43 = cfa;
      goto LABEL_67;
    }
  }
LABEL_85:
  uint64_t v58 = *(const void **)(a1 + 5672);
  if (v58)
  {
    CFRelease(v58);
    *(void *)(a1 + 5672) = 0;
  }
  *(void *)(a1 + 4728) = 0;
  *(void *)(a1 + 4736) = 0;
  if (v68) {
    v68(a1, a2, v35, a4, v34, v66);
  }
  CFArrayRef v59 = *(const void **)(a1 + 5680);
  if (v59)
  {
    CFRelease(v59);
    *(void *)(a1 + 5680) = 0;
  }
  *io_object_t v7 = 0;
  sub_10006E9C0(a1);
  if (v12) {
    CFRelease(v12);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1000756F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 64))
  {
    if (*(void *)(v1 + 5680))
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        uint64_t v4 = Mutable;
        CFDictionarySetValue(Mutable, @"CompletedUsingCache", kCFBooleanTrue);
        sub_100074E8C(v1, *(void *)(v1 + 112), *(CFTypeRef *)(v1 + 5680), (uint64_t)v4, 0);
        CFRelease(v4);
      }
      else
      {
        sub_100074E8C(v1, *(void *)(v1 + 112), *(CFTypeRef *)(v1 + 5680), 0, 0);
      }
    }
    uint64_t v5 = *(const void **)(a1 + 32);
  }
  else
  {
    uint64_t v5 = *(const void **)(a1 + 32);
  }

  CFRelease(v5);
}

uint64_t sub_1000757D0(const __CFDictionary *a1)
{
  if (!a1) {
    return 0;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a1, @"SCAN_TRIM_RESULTS");
  if (!Value) {
    return 0;
  }

  return CFBooleanGetValue(Value);
}

void sub_100075810(const __CFArray *a1, double a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  double Current = CFAbsoluteTimeGetCurrent();
  if (Count)
  {
    double v6 = Current;
    if (Current != 0.0)
    {
      CFIndex v7 = 0;
      uint64_t v8 = Count & ~(Count >> 63);
      while (v8 != v7)
      {
        CFIndex v9 = v7;
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
        if (ValueAtIndex)
        {
          double v11 = sub_1001674C8((uint64_t)ValueAtIndex);
          CFIndex v7 = v9 + 1;
          if (v6 - v11 > a2) {
            continue;
          }
        }
        if (!v9) {
          return;
        }
        goto LABEL_8;
      }
      CFIndex v9 = v8;
      if (!v8) {
        return;
      }
LABEL_8:
      v12.id location = 0;
      v12.CFIndex length = v9;
      CFArrayReplaceValues(a1, v12, 0, 0);
    }
  }
}

CFMutableDictionaryRef sub_1000758DC(uint64_t a1)
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (result)
  {
    CFNumberRef v3 = result;
    uint64_t v4 = sub_10001E404(a1, @"RSSI");
    if (v4) {
      CFDictionaryAddValue(v3, @"RSSI", v4);
    }
    uint64_t v5 = sub_10001E404(a1, @"BSSID");
    if (v5) {
      CFDictionaryAddValue(v3, @"BSSID", v5);
    }
    double v6 = sub_10001E404(a1, @"CHANNEL");
    if (v6) {
      CFDictionaryAddValue(v3, @"CHANNEL", v6);
    }
    CFIndex v7 = sub_10001E404(a1, @"CHANNEL_FLAGS");
    if (v7) {
      CFDictionaryAddValue(v3, @"CHANNEL_FLAGS", v7);
    }
    uint64_t v8 = sub_10001E404(a1, @"AGE");
    if (v8) {
      CFDictionaryAddValue(v3, @"AGE", v8);
    }
    CFIndex v9 = sub_10001E404(a1, @"IE");
    if (v9) {
      CFDictionaryAddValue(v3, @"IE", v9);
    }
    CFTypeID v10 = sub_10001E404(a1, @"80211D_IE");
    if (v10) {
      CFDictionaryAddValue(v3, @"80211D_IE", v10);
    }
    double v11 = sub_10001E404(a1, @"AP_MODE");
    if (v11) {
      CFDictionaryAddValue(v3, @"AP_MODE", v11);
    }
    CFRange v12 = sub_10001E404(a1, @"SSID_STR");
    if (v12) {
      CFDictionaryAddValue(v3, @"SSID_STR", v12);
    }
    BOOL v13 = sub_10001E404(a1, @"SSID");
    if (v13) {
      CFDictionaryAddValue(v3, @"SSID", v13);
    }
    id v14 = sub_100019658((int)kCFAllocatorDefault, v3);
    CFRelease(v3);
    return (CFMutableDictionaryRef)v14;
  }
  return result;
}

uint64_t sub_100075AE0(uint64_t a1, const __CFDictionary *a2, const __CFSet *a3)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!Mutable) {
    return 1;
  }
  CFArrayRef v7 = Mutable;
  sub_100075BA8(a1, a2, Mutable);
  if (CFArrayGetCount(v7) < 1)
  {
LABEL_6:
    uint64_t v10 = 1;
  }
  else
  {
    CFIndex v8 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v8);
      if (!CFSetContainsValue(a3, ValueAtIndex)) {
        break;
      }
      if (++v8 >= CFArrayGetCount(v7)) {
        goto LABEL_6;
      }
    }
    uint64_t v10 = 0;
  }
  CFRelease(v7);
  return v10;
}

void sub_100075BA8(uint64_t a1, CFDictionaryRef theDict, __CFArray *a3)
{
  uint64_t valuePtr = 0;
  int v20 = 0;
  if (a3 && theDict && *(void *)(a1 + 5656))
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"SCAN_CHANNELS");
    if (Value)
    {
      CFArrayRef v6 = Value;
      if (CFArrayGetCount(Value) >= 1 && CFArrayGetCount(v6) >= 1)
      {
        CFIndex v7 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v7);
          CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CHANNEL");
          CFNumberGetValue(v9, kCFNumberCFIndexType, &valuePtr);
          CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CHANNEL_FLAGS");
          CFNumberGetValue(v10, kCFNumberSInt32Type, &v20);
          v20 &= 0x2018u;
          CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v20);
          *(_OWORD *)keys = *(_OWORD *)&off_10023F888;
          long long values = v9;
          CFNumberRef v23 = v11;
          CFDictionaryRef v12 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)&values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFRelease(v11);
          CFArrayAppendValue(a3, v12);
          CFRelease(v12);
          ++v7;
        }
        while (v7 < CFArrayGetCount(v6));
      }
    }
    if (!CFArrayGetCount(a3))
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 5656));
      if (!Count)
      {
        sub_10000DE34(a1, *(const void **)(a1 + 112), *(__CFArray **)(a1 + 5656));
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 5656));
      }
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFDictionaryRef v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5656), i);
          CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(v15, @"SUP_CHANNEL");
          CFNumberGetValue(v16, kCFNumberCFIndexType, &valuePtr);
          CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(v15, @"SUP_CHANNEL_FLAGS");
          CFNumberGetValue(v17, kCFNumberSInt32Type, &v20);
          v20 &= 0x2018u;
          CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v20);
          *(_OWORD *)keys = *(_OWORD *)&off_10023F888;
          long long values = v16;
          CFNumberRef v23 = v18;
          CFDictionaryRef v19 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)&values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFRelease(v18);
          CFArrayAppendValue(a3, v19);
          CFRelease(v19);
        }
      }
    }
  }
}

void sub_100075E98(const __CFDictionary *a1, __CFArray *a2)
{
  if (a1 && a2)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"SCAN_SSID_LIST");
    if (Value && (CFArrayRef v5 = Value, CFArrayGetCount(Value) >= 1))
    {
      if (CFArrayGetCount(v5) >= 1)
      {
        CFIndex v6 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v6);
          if (ValueAtIndex)
          {
            CFIndex v8 = CFDictionaryGetValue(ValueAtIndex, @"SSID_STR");
            if (v8) {
              CFArrayAppendValue(a2, v8);
            }
          }
          ++v6;
        }
        while (v6 < CFArrayGetCount(v5));
      }
    }
    else
    {
      CFNumberRef v9 = CFDictionaryGetValue(a1, @"SSID_STR");
      if (v9) {
        CFArrayAppendValue(a2, v9);
      }
    }
    if (!CFArrayGetCount(a2))
    {
      CFArrayAppendValue(a2, &stru_100248240);
    }
  }
}

__CFDictionary *sub_100075FA0(uint64_t a1)
{
  uint64_t v11 = 0;
  uint64_t valuePtr = 0;
  CFNumberRef v2 = (const __CFNumber *)sub_10001E404(a1, @"CHANNEL");
  if (!v2) {
    return 0;
  }
  CFNumberRef v3 = v2;
  CFNumberGetValue(v2, kCFNumberSInt64Type, &v11);
  CFNumberRef v4 = (const __CFNumber *)sub_10001E404(a1, @"CHANNEL_FLAGS");
  if (v4)
  {
    CFNumberGetValue(v4, kCFNumberSInt64Type, &valuePtr);
    uint64_t v5 = valuePtr & 0x2018;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t valuePtr = v5;
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
  if (!v6) {
    return 0;
  }
  CFNumberRef v7 = v6;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v9 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, @"CHANNEL", v3);
    CFDictionarySetValue(v9, @"CHANNEL_FLAGS", v7);
  }
  CFRelease(v7);
  return v9;
}

void sub_1000760B0(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v9 = (void *)(a1 + 4776);
  CFNumberRef v10 = *(void (**)(void, void, void, void, void, void))(a1 + 4776);
  uint64_t v11 = *(void *)(a1 + 4784);
  if (qword_10027DD68)
  {
    BOOL v13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"ASSOC", +[NSString stringWithFormat:@"Completed Apple80211AssociateAsync (%d - 0x%X) to %@", a5, a5, sub_10001A43C(a3)]) UTF8String]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buuint64_t f = 136446210;
      uint64_t v40 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v13 UTF8String]] UTF8String];
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
  }
  if (a3 && !a5)
  {
    if (qword_10027DD68)
    {
      uint64_t v15 = a4;
      CFNumberRef v16 = *(_DWORD *)(a1 + 5936) ? "Manually" : "Auto";
      CFNumberRef v35 = v16;
      a4 = v15;
      CFNumberRef v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"ASSOC", +[NSString stringWithFormat:@"%s Joined: %@", v35, sub_10001A43C(a3)]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        CFNumberRef v18 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v17 UTF8String]] UTF8String];
        *(_DWORD *)buuint64_t f = 136446210;
        uint64_t v40 = v18;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      }
    }
    a5 = 0;
    goto LABEL_42;
  }
  *(void *)(a1 + 5912) = 0;
  CFDictionaryRef v19 = *(const void **)(a1 + 5920);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 5920) = 0;
  }
  CFDataRef v37 = v10;
  if (a3)
  {
    id v21 = (void *)sub_10001E404((uint64_t)a3, @"JOIN_EXTENDED_STATUS");
    CFIndex v36 = v9;
    if (v21) {
      uint64_t v22 = (uint64_t)[v21 intValue];
    }
    else {
      uint64_t v22 = 4294963393;
    }
    if (qword_10027DD68)
    {
      CFMutableDictionaryRef v28 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"ASSOC", +[NSString stringWithFormat:@"Failed to join(%d - 0x%X)/(%d): %@", a5, a5, v22, sub_10001A43C(a3)]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        CFMutableDictionaryRef v29 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v28 UTF8String]] UTF8String];
        *(_DWORD *)buuint64_t f = 136446210;
        uint64_t v40 = v29;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%{public}s", buf, 0xCu);
      }
    }
    if (qword_10027DD68)
    {
      CFIndex v31 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"ASSOC", +[NSString stringWithFormat:@"TRACER:%s %d/%d: %@", "__WiFiDeviceDispatchQueuedAssociationEvent", a5, v22, sub_10001A43C(a3)]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v31 UTF8String]] UTF8String];
        *(_DWORD *)buuint64_t f = 136446210;
        uint64_t v40 = v32;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%{public}s", buf, 0xCu);
      }
    }
    CFNumberRef v9 = v36;
  }
  else
  {
    if (qword_10027DD68)
    {
      CFNumberRef v23 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"ASSOC", +[NSString stringWithFormat:@"Failed to join(%d - 0x%X)/(%d)", a5, a5, 4294963394]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v24 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v23 UTF8String]] UTF8String];
        *(_DWORD *)buuint64_t f = 136446210;
        uint64_t v40 = v24;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%{public}s", buf, 0xCu);
      }
    }
    if (qword_10027DD68)
    {
      LODWORD(v22) = -3902;
      CFIndex v25 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"ASSOC", +[NSString stringWithFormat:@"TRACER:%s %d/%d", "__WiFiDeviceDispatchQueuedAssociationEvent", a5, 4294963394]) UTF8String]);
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_34;
      }
      CFStringRef v26 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v25 UTF8String]] UTF8String];
      *(_DWORD *)buuint64_t f = 136446210;
      uint64_t v40 = v26;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%{public}s", buf, 0xCu);
    }
    LODWORD(v22) = -3902;
  }
LABEL_34:
  if ((v22 + 3901) < 0xFFFFFFFE && (a5 & 0xFFFFFFFE) == -3906) {
    a5 = v22;
  }
  else {
    a5 = a5;
  }
  CFNumberRef v10 = v37;
  if (a5)
  {
    sub_100045C5C(a1, a5, a3, *(_DWORD *)(a1 + 5872));
    int v34 = 0;
    goto LABEL_43;
  }
LABEL_42:
  int v34 = 1;
LABEL_43:
  *CFNumberRef v9 = 0;
  v9[1] = 0;
  if (v10) {
    v10(a1, a2, a3, a4, a5, v11);
  }
  sub_10006B6D8(a1, a3, v34);
  sub_10006E9C0(a1);
}

void sub_100076860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFNumberRef v6 = (void *)(a1 + 4656);
  CFNumberRef v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 4656);
  uint64_t v8 = *(void *)(a1 + 4664);
  if (!a3 && v7)
  {
    sub_10006E9C0(a1);
    *CFNumberRef v6 = 0;
    v6[1] = 0;
LABEL_4:
    v7(a1, a2, a3, v8);
    goto LABEL_5;
  }
  *CFNumberRef v6 = 0;
  *(void *)(a1 + 4664) = 0;
  if (v7) {
    goto LABEL_4;
  }
LABEL_5:
  CFNumberRef number = 0;
  int valuePtr = 0;
  if (*(void *)(a1 + 4984))
  {
    for (int i = 6; ; --i)
    {
      uint64_t v10 = Apple80211CopyValue();
      uint64_t v11 = v10;
      if ((int)v10 <= 15)
      {
        if (v10 != -3905) {
          break;
        }
      }
      else if (v10 != 61 && v10 != 16)
      {
        goto LABEL_29;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    if (v10)
    {
LABEL_29:
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, @"%s: WiFiError: %d ", @"__WiFiDeviceProcessHostApStateChange", v11];
      }
      goto LABEL_31;
    }
    if (CFNumberGetValue(number, kCFNumberIntType, &valuePtr) && (valuePtr & 8) == 0 && *(unsigned char *)(a1 + 56))
    {
      *(unsigned char *)(a1 + 56) = 0;
      (*(void (**)(uint64_t, void, void, void))(a1 + 4984))(a1, 0, *(void *)(a1 + 4960), 0);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Error: null callback", "__WiFiDeviceProcessHostApStateChange")];
    }
LABEL_31:
  }
}

void sub_100076A2C(void *a1, uint64_t a2, uint64_t a3)
{
  CFNumberRef v6 = a1 + 586;
  CFNumberRef v7 = (void (*)(void *, uint64_t, uint64_t, uint64_t))a1[586];
  uint64_t v8 = a1[587];
  if (a3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: error %d bringing AWDL up", "__WiFiDeviceProcessAwdlStartedEvent", a3);
    }
    uint64_t v10 = (const void *)a1[588];
    if (v10)
    {
      CFRelease(v10);
      a1[588] = 0;
    }
    uint64_t v11 = (const void *)a1[589];
    if (v11)
    {
      CFRelease(v11);
      a1[589] = 0;
    }
    a1[590] = 0;
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: successfully started AWDL", "__WiFiDeviceProcessAwdlStartedEvent")];
    }
  }
  *CFNumberRef v6 = 0;
  v6[1] = 0;
  if (v7) {
    v7(a1, a2, a3, v8);
  }

  sub_10006E9C0((uint64_t)a1);
}

uint64_t sub_100076B44(uint64_t a1, const void *a2, uint64_t a3, void (*a4)(uint64_t, const void *, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v10 = sub_10006EB84(a1);
  if (v10)
  {
    uint64_t v11 = sub_10016BA20((uint64_t)v10, a2, a3);
    if (a4) {
      a4(a1, a2, v11, a5);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: not an AWDL interface.", "__WiFiDeviceStopAwdl")];
    }
    return 4294963393;
  }
  return v11;
}

void sub_100076C04(const __CFArray *a1, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count)
  {
    CFIndex v5 = Count;
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != v5; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, i);
        if (ValueAtIndex)
        {
          CFDictionaryRef v8 = ValueAtIndex;
          CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, @"BSSID");
          if (Value)
          {
            uint64_t v10 = Value;
            if (CFArrayGetCount(a1) >= 1)
            {
              CFIndex v11 = 0;
              while (1)
              {
                CFDictionaryRef v12 = CFArrayGetValueAtIndex(a1, v11);
                if (v12)
                {
                  uint64_t v13 = (uint64_t)v12;
                  id v14 = sub_10001E404((uint64_t)v12, @"BSSID");
                  if (CFEqual(v10, v14)) {
                    break;
                  }
                }
                if (++v11 >= CFArrayGetCount(a1)) {
                  goto LABEL_13;
                }
              }
              sub_1000CCBE8(v13, v8);
            }
          }
        }
LABEL_13:
        ;
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4 message:"No GAS responses found"];
    }
  }
}

void sub_100076D58(uint64_t a1, CFTypeRef cf)
{
  CFNumberRef v4 = *(const void **)(a1 + 5736);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 5736) = 0;
  }
  if (cf) {
    *(void *)(a1 + 5736) = CFRetain(cf);
  }
}

void sub_100076D9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 64))
  {
    if (*(void *)(v1 + 5736))
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        CFNumberRef v4 = Mutable;
        CFDictionarySetValue(Mutable, @"CompletedUsingCache", kCFBooleanTrue);
        sub_100076E74((void *)v1, *(void *)(v1 + 112), *(const __CFArray **)(v1 + 5736), (uint64_t)v4, 0);
        CFRelease(v4);
      }
      else
      {
        sub_100076E74((void *)v1, *(void *)(v1 + 112), *(const __CFArray **)(v1 + 5736), 0, 0);
      }
    }
    CFIndex v5 = *(const void **)(a1 + 32);
  }
  else
  {
    CFIndex v5 = *(const void **)(a1 + 32);
  }

  CFRelease(v5);
}

void sub_100076E74(void *a1, uint64_t a2, const __CFArray *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a1 + 625;
  CFIndex v11 = (void (*)(void *, uint64_t, const __CFArray *, uint64_t, uint64_t, uint64_t))a1[625];
  uint64_t v12 = a1[626];
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Completed Apple80211GasRequest on %@ (%d)", a2, a5 message];
  }
  void *v10 = 0;
  v10[1] = 0;
  if (a3 && (CFTypeID v14 = CFGetTypeID(a3), v14 == CFArrayGetTypeID()))
  {
    if (!a5 && a1[716] && !a1[717] && CFArrayGetCount(a3)) {
      sub_100077144((uint64_t)a1, a3);
    }
    if (v11)
    {
      CFDictionaryRef v15 = (const __CFDictionary *)a1[716];
      if (v15)
      {
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v15, @"GAS_NETWORKS");
        CFArrayRef v17 = Value;
        if (Value) {
          sub_100076C04(Value, a3);
        }
        v11(a1, a2, v17, a4, a5, v12);
        CFNumberRef v18 = (const void *)a1[716];
        if (v18)
        {
          CFRelease(v18);
          a1[716] = 0;
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: calling CB with cached GAS response"];
        }
        v11(a1, a2, (const __CFArray *)a1[717], a4, a5, v12);
      }
    }
    int v20 = (const void *)a1[717];
    if (v20)
    {
      CFRelease(v20);
      a1[717] = 0;
    }
  }
  else if (v11)
  {
    v11(a1, a2, 0, a4, a5, v12);
  }

  sub_10006E9C0((uint64_t)a1);
}

void sub_100077054(uint64_t a1, CFTypeRef cf)
{
  CFNumberRef v4 = *(const void **)(a1 + 5728);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 5728) = 0;
  }
  if (cf) {
    *(void *)(a1 + 5728) = CFRetain(cf);
  }
}

__CFArray *sub_100077098(const __CFArray *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0; i != v4; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        if (ValueAtIndex)
        {
          CFNumberRef v7 = sub_10001E404((uint64_t)ValueAtIndex, @"BSSID");
          if (v7) {
            CFArrayAppendValue(Mutable, v7);
          }
        }
      }
    }
  }
  return Mutable;
}

void sub_100077144(uint64_t a1, CFArrayRef theArray)
{
  if (*(unsigned char *)(a1 + 5760))
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count)
    {
      CFIndex v5 = Count;
      unsigned __int16 valuePtr = -21846;
      unsigned __int16 v23 = -21846;
      if (Count < 1) {
        goto LABEL_16;
      }
      CFIndex v6 = 0;
      char v7 = 1;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v6);
        if (ValueAtIndex)
        {
          CFDictionaryRef v9 = ValueAtIndex;
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ANQP_STATUS");
          if (Value)
          {
            CFNumberGetValue(Value, kCFNumberSInt16Type, &valuePtr);
            if (valuePtr) {
              char v7 = 0;
            }
            CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v9, @"CHANNEL");
            if (v11)
            {
              CFNumberGetValue(v11, kCFNumberSInt16Type, &v23);
              uint64_t v12 = CFDictionaryGetValue(v9, @"BSSID");
              if (v12)
              {
                uint64_t v13 = v12;
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "GAS response from %@ ch %3d status %d", v13, v23, valuePtr message];
                }
              }
            }
          }
        }
        ++v6;
      }
      while (v5 != v6);
      if (v7)
      {
LABEL_16:
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: Adding GAS cache entry"];
        }
        CFNumberRef v16 = *(__CFArray **)(a1 + 5752);
        if (v16)
        {
          CFArrayRef v17 = *(const void **)(a1 + 5728);
          if (v17)
          {
            CFNumberRef v18 = sub_1001673C4();
            if (v18)
            {
              CFDictionaryRef v19 = v18;
              if (sub_100167430((uint64_t)v18, v17)
                && sub_100167498((uint64_t)v19)
                && sub_100167464((uint64_t)v19, theArray))
              {
                CFArrayAppendValue(v16, v19);
              }
              CFRelease(v19);
            }
          }
        }
        sub_100075810(*(const __CFArray **)(a1 + 5752), 3600.0);
        int v20 = *(NSObject **)(a1 + 5768);
        dispatch_time_t v21 = dispatch_time(0, 3600000000000);
        dispatch_source_set_timer(v20, v21, 0xFFFFFFFFFFFFFFFFLL, 0);
      }
      else
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: One or more GAS results status is not OK.", "__WiFiDeviceUpdateGasCache")];
        }
      }
    }
  }
}

void sub_1000773B8(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4)
{
  int v5 = *(_DWORD *)(a1 + 5964);
  if (!v5) {
    goto LABEL_17;
  }
  CFDictionaryRef v9 = (void *)(a1 + 5464);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 5464);
  uint64_t v11 = *(void *)(a1 + 5472);
  *(_DWORD *)(a1 + 5964) = v5 - 1;
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "Received APPLE80211_M_SENSING_DONE on %@ (%d), expected remaing result[%d]", a2, a4, *(unsigned int *)(a1 + 5964) message];
  }
  *CFDictionaryRef v9 = 0;
  *(void *)(a1 + 5472) = 0;
  if (!a3 || a4 || !CFDictionaryGetCount(a3)) {
    goto LABEL_15;
  }
  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, a3);
  if (MutableCopy)
  {
    CFTypeID v14 = MutableCopy;
    if (*(unsigned char *)(a1 + 5958)) {
      CFBooleanRef v15 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v15 = kCFBooleanFalse;
    }
    CFDictionaryAddValue(MutableCopy, @"SENSING_RESULTS_DATA_DEVICE_MOTION_STATE", v15);
    if (*(unsigned char *)(a1 + 5959)) {
      CFBooleanRef v16 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v16 = kCFBooleanFalse;
    }
    CFDictionaryAddValue(v14, @"SENSING_RESULTS_DATA_DEVICE_CHARGING_STATE", v16);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 5968), v14);
    CFRelease(v14);
LABEL_15:
    if (v10) {
      v10(a1, a2, a4, v11);
    }
    goto LABEL_17;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: null sensingUpdateResult" args:__WiFiDeviceProcessSensingDoneEvent];
  }
LABEL_17:

  sub_10006E9C0(a1);
}

void sub_10007756C(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4)
{
  CFDictionaryRef v9 = *(void (**)(uint64_t, uint64_t, _WORD *, void, uint64_t, uint64_t))(a1 + 4760);
  uint64_t v10 = *(void *)(a1 + 4768);
  *(void *)(a1 + 4768) = 0;
  *(void *)(a1 + 4760) = 0;
  if (!a3)
  {
LABEL_4:
    if (!v9) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  CFTypeID v11 = CFGetTypeID(a3);
  if (v11 == CFDictionaryGetTypeID())
  {
    a3 = sub_100019658((int)kCFAllocatorDefault, a3);
    goto LABEL_4;
  }
  a3 = 0;
  if (v9) {
LABEL_5:
  }
    v9(a1, a2, a3, 0, a4, v10);
LABEL_6:
  if (a3) {
    CFRelease(a3);
  }
}

void sub_100077648(uint64_t a1, const void *a2, CFDictionaryRef theDict)
{
  char valuePtr = 0;
  int v73 = 0;
  char v72 = 0;
  int v71 = 0;
  if (!theDict)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: linkChangedEventDataDict is NULL", "__WiFiDeviceProcessLinkEvent"];
    }
    goto LABEL_100;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINK_CHANGED_IS_LINKDOWN");
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RSSI");
  if (!Value)
  {
    CFDictionaryRef v65 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v66 = "%s: isLinkDownNumRef is null";
LABEL_99:
      [v65 WFLog:4 message:v66 @"__WiFiDeviceProcessLinkEvent"];
    }
LABEL_100:
    return;
  }
  CFNumberRef v8 = v7;
  if (!v7)
  {
    CFDictionaryRef v65 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v66 = "%s: rssiNumRef is null";
      goto LABEL_99;
    }
    goto LABEL_100;
  }
  CFNumberGetValue(Value, kCFNumberSInt8Type, &valuePtr);
  CFNumberGetValue(v8, kCFNumberSInt32Type, &v73);
  if (valuePtr)
  {
    *(_DWORD *)(a1 + 5944) = 0;
    CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_IS_INVOL");
    CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_REASON_CODE");
    CFTypeID v11 = 0;
    if (v9)
    {
      CFNumberRef v12 = v10;
      if (v10)
      {
        CFNumberGetValue(v9, kCFNumberSInt8Type, &v72);
        CFNumberGetValue(v12, kCFNumberIntType, &v71);
        uint64_t v13 = (_DWORD *)(a1 + 5800);
        if (v72)
        {
          CFAllocatorRef v14 = kCFAllocatorDefault;
        }
        else
        {
          CFAllocatorRef v14 = kCFAllocatorDefault;
          if (*v13)
          {
            if ((v71 & 0xFFFFFFF7) == 0)
            {
              CFNumberRef v29 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 5800));
              CFDictionarySetValue(theDict, @"LINKDOWN_REASON_CODE", v29);
              if (v29) {
                CFRelease(v29);
              }
            }
          }
        }
        if (*v13 == 1015) {
          int v15 = 2;
        }
        else {
          int v15 = *v13 == 1011;
        }
        *(_DWORD *)buuint64_t f = v15;
        CFNumberRef v16 = CFNumberCreate(v14, kCFNumberIntType, buf);
        CFDictionarySetValue(theDict, @"CLIENT_REASON", v16);
        if (v16) {
          CFRelease(v16);
        }
        CFTypeID v11 = 0;
      }
    }
  }
  else
  {
    unsigned int v76 = 0;
    int v17 = sub_10006F800(a1);
    if (v17)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s WFMacRandomisation : Cannot read APPLE80211_IOC_DEVICE_TYPE_IN_DHCP_ALLOW." arguments:v70];
      }
    }
    else if (qword_10027DD68)
    {
      [((id)qword_10027DD68) WFLog:message:3, "%s WFMacRandomisation : Device Type allowed in DHCP request ? [%d]", "__WiFiDeviceProcessLinkEvent", v76];
    }
    CFDictionaryRef v19 = sub_10001C1B4(a1, a2);
    if (!v19)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4 message:"Link up event with no current network detected. Dropping."];
      }
      return;
    }
    CFTypeID v11 = v19;
    CFDictionaryAddValue(theDict, @"LINK_CHANGED_NETWORK", v19);
    if (qword_10027DD68)
    {
      dispatch_time_t v21 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@+} %@", @"LINK", +[NSString stringWithFormat:@"%s: link up to %@", "__WiFiDeviceProcessLinkEvent", sub_10001A43C(v11)]) UTF8String]);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v21 UTF8String]] UTF8String];
        *(_DWORD *)buuint64_t f = 136446210;
        unint64_t v79 = v22;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      }
    }
    if (_os_feature_enabled_impl())
    {
      CFStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
      for (int i = 6; ; --i)
      {
        uint64_t v25 = Apple80211Get();
        uint64_t v26 = v25;
        if ((int)v25 <= 15)
        {
          if (v25 != -3905) {
            break;
          }
        }
        else if (v25 != 61 && v25 != 16)
        {
          goto LABEL_36;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (v25)
      {
LABEL_36:
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Failed APPLE80211_IOC_COLOCATED_NETWORK_SCOPE_ID - %d", v26, v70);
        }
        goto LABEL_45;
      }
      if (!CFStringGetLength(Mutable)) {
        goto LABEL_46;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "ColocatedScopeId for %@ - '%@'", sub_10001A43C(v11), Mutable message];
      }
LABEL_45:
LABEL_46:
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
  }
  if (!valuePtr && *(unsigned char *)(a1 + 5952) && MGGetBoolAnswer())
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: 3 2 1 crashing because of debug command", "__WiFiDeviceProcessLinkEvent")];
    }
    exit(14);
  }
  CFStringRef v30 = *(void (**)(uint64_t, const void *, void, CFDictionaryRef))(a1 + 4952);
  if (v30) {
    v30(a1, a2, *(void *)(a1 + 4960), theDict);
  }
  if (!valuePtr)
  {
    sub_100062D6C(a1);
    sub_10000B680((unsigned char *)a1, (uint64_t)a2, theDict);
    if (qword_10027DD68)
    {
      uint64_t v40 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"LINK", +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s: %@ - Initializing lqm value: rawRssi %d, scaledRssi %f, noise %ld, snr %ld", "__WiFiDeviceProcessLinkEvent", sub_10001A43C(v11), *(unsigned int *)(a1 + 264), *(float *)(a1 + 268), *(void *)(a1 + 296), *(void *)(a1 + 280))),
                "UTF8String"));
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        CFNumberRef v41 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v40 UTF8String]] UTF8String];
        *(_DWORD *)buuint64_t f = 136446210;
        unint64_t v79 = v41;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      }
    }
    int64_t v42 = 300000000000;
    int64_t v43 = 60000000000;
    if (v11 && sub_100073B18(a1, v11))
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s WFMacRandomisation : Using aggressive timeouts for primary <%d seconds> and routable <%d seconds> timeouts for classification", "__WiFiDeviceProcessLinkEvent", 120, 30)];
      }
      int64_t v43 = 30000000000;
      int64_t v42 = 120000000000;
    }
    double v45 = *(NSObject **)(a1 + 72);
    dispatch_time_t v46 = dispatch_time(0, v42);
    dispatch_source_set_timer(v45, v46, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_time_t v47 = *(NSObject **)(a1 + 80);
    dispatch_time_t v48 = dispatch_time(0, v43);
    dispatch_source_set_timer(v47, v48, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(CFAbsoluteTime *)(a1 + 4304) = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)(a1 + 5800) = 0;
    if (v11) {
      goto LABEL_91;
    }
    return;
  }
  sub_10000B680((unsigned char *)a1, (uint64_t)a2, theDict);
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 72), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_IS_INVOL");
  CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_REASON_CODE");
  CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_SUBREASON_CODE");
  if (v31)
  {
    if (v32)
    {
      CFNumberRef v34 = v33;
      if (v33)
      {
        char v77 = -86;
        unsigned int v75 = -1431655766;
        unsigned int v76 = -1431655766;
        CFNumberGetValue(v31, kCFNumberSInt8Type, &v77);
        CFNumberGetValue(v32, kCFNumberIntType, &v76);
        CFNumberGetValue(v34, kCFNumberIntType, &v75);
        sub_100047850(a1, 0, v77, v76, v75, *(_DWORD *)(a1 + 264), 0, *(_DWORD *)(a1 + 5872));
        if (v76 == 7)
        {
          CFNumberRef v35 = sub_100071800(a1);
          if (v35)
          {
            CFIndex v36 = v35;
            CFStringRef v37 = (const __CFString *)sub_10001A43C(v35);
            CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v37);
            CFRelease(v36);
LABEL_75:
            int v55 = "went down";
            goto LABEL_76;
          }
        }
        else
        {
          CFDataRef v49 = *(const __CFData **)(a1 + 5816);
          if (v49)
          {
            BytePtr = CFDataGetBytePtr(v49);
            CFIndex Length = CFDataGetLength(*(CFDataRef *)(a1 + 5816));
            CFStringRef Copy = CFStringCreateWithBytes(kCFAllocatorDefault, BytePtr, Length, 0x8000100u, 0);
            goto LABEL_75;
          }
          CFDataRef v52 = *(const __CFData **)(a1 + 5808);
          if (v52)
          {
            unsigned int v53 = CFDataGetBytePtr(v52);
            CFIndex v54 = CFDataGetLength(*(CFDataRef *)(a1 + 5808));
            CFStringRef Copy = CFStringCreateWithBytes(kCFAllocatorDefault, v53, v54, 0x8000100u, 0);
            int v55 = "up failed";
LABEL_76:
            if (v76 == 3)
            {
              CFStringRef v56 = sub_10007A918();
              if (qword_10027DD68)
              {
                uint64_t v58 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"LINK", +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Link %s: %@ - isInVoluntary %d, reason %@(0x%x), subreason %@(0x%x), rssi %d", v55, Copy, v77, sub_10005AB40(v76), v76, v56,
                              v75,
                              *(unsigned int *)(a1 + 264))),
                          "UTF8String"));
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  CFArrayRef v59 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v58 UTF8String]] UTF8String];
                  *(_DWORD *)buuint64_t f = 136446210;
                  unint64_t v79 = v59;
                  _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%{public}s", buf, 0xCu);
                }
              }
              if (v56) {
                CFRelease(v56);
              }
            }
            else
            {
              if (qword_10027DD68)
              {
                CFIndex v61 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@-} %@", @"LINK", +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Link %s: %@ - isInVoluntary %d, reason %@(%d), subreason %d, rssi %d", v55, Copy, v77, sub_10005AB40(v76), v76, v75,
                              *(unsigned int *)(a1 + 264))),
                          "UTF8String"));
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  unsigned int v62 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v61 UTF8String]] UTF8String];
                  *(_DWORD *)buuint64_t f = 136446210;
                  unint64_t v79 = v62;
                  _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%{public}s", buf, 0xCu);
                }
              }
            }
            if (Copy) {
              CFRelease(Copy);
            }
            goto LABEL_88;
          }
        }
        CFStringRef Copy = 0;
        goto LABEL_75;
      }
    }
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: linkChangedEventDataDict has null key values", "__WiFiDeviceProcessLinkDownData")];
  }
LABEL_88:
  kdebug_trace();
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4 message:"Disassociated."];
  }
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 264) = *(void *)(a1 + 240);
  sub_100062D6C(a1);
  if (v11) {
LABEL_91:
  }
    CFRelease(v11);
}

void sub_100078358(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  if (a3)
  {
    CFIndex v6 = sub_10001C1B4(a1, a2);
    if (v6)
    {
      CFNumberRef v7 = v6;
      if (qword_10027DD68)
      {
        CFNumberRef v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"LINK, ROAM", +[NSString stringWithFormat:@"%s: received roam status event for network %@", "__WiFiDeviceProcessRoamStatusEvent", sub_10001A43C(v7)]) UTF8String]);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buuint64_t f = 136446210;
          CFAllocatorRef v14 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v9 UTF8String]] UTF8String];
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        }
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Reporting RoamStatus Event", "__WiFiDeviceReportRoamStatusEvent")];
      }
      CFTypeID v11 = *(void (**)(uint64_t, const void *, void, const __CFDictionary *))(a1 + 4576);
      if (v11) {
        v11(a1, a2, *(void *)(a1 + 4584), a3);
      }
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_STATUS");
      *(_DWORD *)buuint64_t f = 0;
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberSInt32Type, buf);
        if (!*(_DWORD *)buf) {
          sub_10005F904(a1);
        }
      }
      CFRelease(v7);
    }
  }
}

void sub_100078564(uint64_t a1, uint64_t a2)
{
  CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, void))(a1 + 4432);
  if (v3) {
    v3(a1, a2, *(void *)(a1 + 4440));
  }
  if (*(_DWORD *)(a1 + 4316) == 2 || *(unsigned char *)(a1 + 4300))
  {
    CFIndex v4 = *(NSObject **)(a1 + 80);
    dispatch_time_t v5 = dispatch_time(0, 30000000000);
    dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
}

void sub_1000785F4(uint64_t a1, const void *a2)
{
  int v4 = sub_10006B8D8(a1, a2);
  *(_DWORD *)(a1 + 48) = v4;
  if (v4 != 1)
  {
    sub_10006BB7C((uint64_t *)a1);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 72), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 88), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 5712), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    sub_10006E1F8(a1, 0);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 5768), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    sub_10006E2F8(a1);
  }
  dispatch_time_t v5 = *(void (**)(uint64_t, const void *, uint64_t))(a1 + 4384);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 4392);
    v5(a1, a2, v6);
  }
}

void sub_1000786D8(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    int v4 = *(void (**)(uint64_t, uint64_t, void, void, uint64_t))(a1 + 5624);
    if (v4)
    {
      uint64_t v6 = *(void *)(a1 + 5632);
      uint64_t v7 = Apple80211Get();
      if (v7)
      {
        uint64_t v8 = v7;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, @"Apple80211Get(..., APPLE80211_IOC_OP_MODE) failed. CFErrorRef error = %i\n", v8];
        }
      }
      else
      {
        v4(a1, a2, 0, 0, v6);
      }
    }
  }
}

void sub_1000787A4(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  if (cf && (CFTypeRef v5 = cf, v6 = CFGetTypeID(cf), v6 == CFArrayGetTypeID()))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Discovered networks=%@", "__WiFiDeviceProcessBGScanNetworkDiscoveredEvent", v5 message];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: NULL evendata" args:("__WiFiDeviceProcessBGScanNetworkDiscoveredEvent", NULL, NULL)];
    }
    CFTypeRef v5 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, CFTypeRef, uint64_t))(a1 + 4608);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 4616);
    v8(a1, a2, v5, v9);
  }
}

void sub_1000788AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v6 = *(unsigned __int8 *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: staNum %d", @"__WiFiDeviceProcessSTAArriveEvent", v6];
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 1;
  }
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, void))(a1 + 4792);
  if (v9)
  {
    __int16 v11 = -21846;
    char v12 = -86;
    if (a3) {
      CFNumberRef v10 = &v11;
    }
    else {
      CFNumberRef v10 = 0;
    }
    v9(a1, a2, v6, v7, a3, v10, *(void *)(a1 + 4800));
  }
}

void sub_100078980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v10 = -21846;
  char v11 = -86;
  if (a3)
  {
    uint64_t v6 = *(unsigned __int8 *)(a3 + 8);
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: staNum %d", @"__WiFiDeviceProcessSTALeaveEvent", v6];
    }
    __int16 v10 = *(_WORD *)a3;
    char v11 = *(unsigned char *)(a3 + 2);
  }
  else
  {
    uint64_t v6 = 1;
  }
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, __int16 *, void))(a1 + 4808);
  if (v8)
  {
    if (a3) {
      uint64_t v9 = &v10;
    }
    else {
      uint64_t v9 = 0;
    }
    v8(a1, a2, v6, 0, a3, v9, *(void *)(a1 + 4816));
  }
}

void sub_100078A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 4888);
    if (v3)
    {
      uint64_t v5 = *(void *)(a1 + 4896);
      v3(a1, a2, v5, a3);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null eventData" args:("__WiFiDeviceProcessBTCoexStatsEvent")];
    }
  }
}

void sub_100078B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 5448);
    if (v3)
    {
      uint64_t v5 = *(void *)(a1 + 5456);
      v3(a1, a2, v5, a3);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null eventData" args:("__WiFiDeviceProcessBSPEvent", 0, 0, 0)];
    }
  }
}

void sub_100078BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 4936);
    if (v3)
    {
      uint64_t v5 = *(void *)(a1 + 4944);
      v3(a1, a2, v5, a3);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null eventData", @"__WiFiDeviceObssMitEvent"];
    }
  }
}

void sub_100078C6C(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  int v65 = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null device", @"__WiFiDeviceProcessDriverAvailableEvent"];
    }
    goto LABEL_133;
  }
  if (!a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: null eventData", "__WiFiDeviceProcessDriverAvailableEvent"];
    }
    goto LABEL_133;
  }
  BOOLeaint n = (const __CFBoolean *)CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE");
  if (!BOOLean)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: available key missing" : @"__WiFiDeviceProcessDriverAvailableEvent"];
    }
LABEL_133:
    goto LABEL_126;
  }
  uint64_t v6 = *(const void **)(a1 + 5840);
  if (v6) {
    CFDictionarySetValue(a3, @"SSID_STR", v6);
  }
  if (*(unsigned char *)(a1 + 5864))
  {
    int v7 = *(_DWORD *)(a1 + 5872);
    int v8 = v7 == 1 ? 1 : 2;
    int v9 = v7 ? v8 : 3;
    CFNumberRef v10 = sub_10005B0B8(v9);
    CFDictionarySetValue(a3, @"PRIVATE_MAC_ADDRESS_TYPE", v10);
    if (v10) {
      CFRelease(v10);
    }
  }
  char v11 = *(const void **)(a1 + 5856);
  if (v11) {
    CFDictionarySetValue(a3, @"PRIVATE_MAC_ADDRESS_VALUE", v11);
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_REASON");
  CFNumberRef v13 = Value;
  unsigned int valuePtr = 0;
  if (Value) {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  }
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_SUBREASON");
  CFNumberRef v15 = v14;
  unsigned int v63 = 0;
  if (v14) {
    CFNumberGetValue(v14, kCFNumberSInt32Type, &v63);
  }
  CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_FLAGS");
  if (v16) {
    CFNumberGetValue(v16, kCFNumberSInt32Type, &v65);
  }
  if (v63)
  {
    CFStringRef v17 = sub_10007A918();
    if (v17) {
      CFDictionarySetValue(a3, @"DRIVER_AVAILABLE_KEY_SUBREASON_STRING", v17);
    }
  }
  else
  {
    CFStringRef v17 = 0;
  }
  unsigned int v62 = 0;
  if (CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_PROGRAM_COUNTER")) {
    CFNumberGetValue(v15, kCFNumberSInt32Type, &v62);
  }
  CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_LINK_REGISTER");
  unsigned int v61 = 0;
  if (v18) {
    CFNumberGetValue(v18, kCFNumberSInt32Type, &v61);
  }
  CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_LINENUMBER");
  unsigned int v60 = 0;
  if (v19) {
    CFNumberGetValue(v19, kCFNumberSInt32Type, &v60);
  }
  CFStringRef v20 = (const __CFString *)CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_REASON_STRING");
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: driver reason string: %@ \n", "__WiFiDeviceProcessDriverAvailableEvent", v20 message];
  }
  SCDynamicStoreContext context = v5;
  if (v20 && CFStringCompare(v20, &stru_100248240, 0))
  {
    if (!v63)
    {
      CFDictionarySetValue(a3, @"DRIVER_AVAILABLE_SUBREASON", v13);
      CFStringRef v17 = sub_10007A918();
      if (v17) {
        CFDictionarySetValue(a3, @"DRIVER_AVAILABLE_KEY_SUBREASON_STRING", v17);
      }
    }
    CFStringRef v22 = 0;
  }
  else
  {
    if ((int)valuePtr <= -528340991)
    {
      switch(valuePtr)
      {
        case 0xE0821801:
          CFStringRef v22 = @"ShutdownPending";
          break;
        case 0xE0821802:
          CFStringRef v22 = @"UnInited";
          break;
        case 0xE0821803:
          CFStringRef v22 = @"Initializing";
          break;
        case 0xE0821804:
          CFStringRef v22 = @"PowerOff";
          break;
        case 0xE0821805:
          CFStringRef v22 = @"PoweringOff";
          break;
        default:
          if (valuePtr == -528340991) {
            CFStringRef v22 = @"OnThread";
          }
          else {
LABEL_51:
          }
            CFStringRef v22 = +[NSString stringWithFormat:@"Unknown=%d", valuePtr];
          break;
      }
    }
    else
    {
      switch(valuePtr)
      {
        case 0xE0823801:
          CFStringRef v22 = @"Watchdog";
          break;
        case 0xE0823802:
          CFStringRef v22 = @"WDRunning";
          break;
        case 0xE0823803:
          CFStringRef v22 = @"WDTriggered";
          break;
        case 0xE0823804:
          CFStringRef v22 = @"WDFailed";
          break;
        case 0xE0823805:
          goto LABEL_51;
        case 0xE0823806:
          CFStringRef v22 = @"FWTrap";
          break;
        default:
          if (valuePtr == -528340989)
          {
            CFStringRef v22 = @"BootedImage";
          }
          else
          {
            if (valuePtr != -528340990) {
              goto LABEL_51;
            }
            CFStringRef v22 = @"NotInGate";
          }
          break;
      }
    }
    CFDictionarySetValue(a3, @"DRIVER_AVAILABLE_REASON_STRING", v22);
  }
  int v23 = CFBooleanGetValue(BOOLean);
  if (!v23)
  {
    if (valuePtr == -528336895)
    {
      uint64_t v24 = 7;
    }
    else
    {
      if (valuePtr != -528336890) {
        goto LABEL_68;
      }
      uint64_t v24 = 21;
    }
    [+[WiFiUsageMonitor sharedInstance] addFaultEvent:v24 forInterface:a2];
LABEL_68:
    if (*(void *)(a1 + 4672))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: hostap never started. Invoking error callback on watchdog.", @"__WiFiDeviceProcessDriverAvailableEvent"];
      }
      sub_100064260(a1, (uint64_t)a2, 4294963390);
    }
  }
  if (!v17 || (CFStringRef v26 = v17, !CFStringGetLength(v17)))
  {
    if (!v22 || (CFStringRef v26 = v22, !CFStringGetLength(v22))) {
      CFStringRef v26 = v20;
    }
  }
  CFNumberRef v27 = +[WiFiUsageMonitor sharedInstance];
  [(WiFiUsageMonitor *)v27 notifyDriverAvailability:a2 available:v23 != 0 version:0 flags:0 eventID:0 reason:valuePtr subReason:(int)v63 minorReason:0 reasonString:v26];
  CFNumberRef v29 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    CFStringRef v56 = CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE");
    CFStringRef v30 = CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_REASON_STRING");
    uint64_t v31 = valuePtr;
    CFNumberRef v32 = CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_KEY_SUBREASON_STRING");
    [v29 WFLog:3, "%s: driver availability:%@, reason:%@(0x%x), subreason:%@(0x%x) flag: %@ \n", "__WiFiDeviceProcessDriverAvailableEvent", v56, v30, v31, v32, v63, CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_FLAGS" message];
  }
  if (valuePtr == -528345084) {
    goto LABEL_122;
  }
  CFNumberRef v33 = CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_FUNCTION ");
  if (v33)
  {
    CFNumberRef v34 = v33;
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v34)) {
      CFIndex v36 = v34;
    }
    else {
      CFIndex v36 = 0;
    }
  }
  else
  {
    CFIndex v36 = 0;
  }
  CFStringRef v37 = CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_FILENAME");
  if (v37)
  {
    uint64_t v38 = v37;
    CFTypeID v39 = CFStringGetTypeID();
    if (v39 == CFGetTypeID(v38)) {
      uint64_t v40 = v38;
    }
    else {
      uint64_t v40 = 0;
    }
  }
  else
  {
    uint64_t v40 = 0;
  }
  if (CFBooleanGetValue(BOOLean) == 1)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v42 = Apple80211SetPowerState();
      uint64_t v43 = v42;
      if (v42 != -3905 && v42 != 61 && v42 != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Setting power to %s[%d]", "__WiFiDeviceProcessDriverAvailableEvent", sub_10005A970(*(_DWORD *)(a1 + 48)), v43);
    }
    char v46 = v65;
    if ((v65 & 0x10) != 0)
    {
      [+[WAClient sharedClientWithIdentifier:](WAClient, "sharedClientWithIdentifier:", @"wifid") trapCrashMiniTracerDumpReadyForInterfaceWithName:*(void *)(a1 + 112) andReply:&stru_10023F8B8];
      char v46 = v65;
    }
    if ((v46 & 8) != 0)
    {
      uint64_t v47 = 2;
LABEL_108:
      uint64_t v48 = sub_100050748(v47, a3);
      if (v48)
      {
        uint64_t v49 = v48;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s WiFiMetricsManagerCheckQueryableWatchdogInfo() returned error %d", "__WiFiDeviceProcessDriverAvailableEvent", v49];
        }
      }
      goto LABEL_112;
    }
    if ((v46 & 4) != 0)
    {
      uint64_t v47 = 1;
      goto LABEL_108;
    }
  }
LABEL_112:
  if (valuePtr != -528345085 || v62 || v61)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: driver programCounter:(0x%0x), linkRegister:(0x%x), fileName:%@ lineNumber:(%u) functionName:%@ \n", "__WiFiDeviceProcessDriverAvailableEvent", v62, v61, v40, v60, v36 message];
    }
    sub_10004CDEC(a1, a3);
  }
  else if (CFBooleanGetValue(BOOLean))
  {
    if (sub_10005AFD8())
    {
      CFDictionaryRef v51 = sub_100063150(a1, a2, @"IO80211InterfaceWoWWakeUpParams");
      if (v51)
      {
        CFDictionaryRef v52 = v51;
        CFDictionarySetValue(a3, @"IO80211InterfaceWoWWakeUpParams", v51);
        CFRelease(v52);
      }
    }
  }
LABEL_122:
  CFIndex v54 = *(void (**)(uint64_t, const void *, const __CFDictionary *, void))(a1 + 5016);
  uint64_t v5 = context;
  if (v54) {
    v54(a1, a2, a3, *(void *)(a1 + 5024));
  }
  if (v17) {
    CFRelease(v17);
  }
LABEL_126:
}

void sub_1000795D0(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  if (Mutable)
  {
    int v7 = Mutable;
    if (a3 && (CFTypeID v8 = CFGetTypeID(a3), v8 == CFArrayGetTypeID()))
    {
      CFIndex Count = CFArrayGetCount(a3);
      CFStringAppendFormat(v7, 0, @"network count=%ld, ", Count);
      v13.CFIndex length = CFArrayGetCount(a3);
      v13.id location = 0;
      CFArrayApplyFunction(a3, v13, (CFArrayApplierFunction)sub_10007AA48, v7);
    }
    else
    {
      CFStringAppendFormat(v7, 0, @"NULL eventData");
      a3 = 0;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: %@", "__WiFiDeviceProcessBGScanCachedNetworkEvent", v7 message];
    }
    char v11 = *(void (**)(uint64_t, uint64_t, const __CFArray *, void))(a1 + 4624);
    if (v11) {
      v11(a1, a2, a3, *(void *)(a1 + 4632));
    }
    CFRelease(v7);
  }
}

CFTypeID sub_100079734(CFTypeID result, uint64_t a2, CFTypeRef cf)
{
  uint64_t v4 = result;
  if (cf)
  {
    CFTypeRef v5 = cf;
    CFTypeID v6 = CFGetTypeID(cf);
    CFMutableDictionaryRef result = CFDictionaryGetTypeID();
    if (v6 == result) {
      CFTypeRef cf = v5;
    }
    else {
      CFTypeRef cf = 0;
    }
  }
  int v7 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, uint64_t))(v4 + 4640);
  if (v7)
  {
    uint64_t v8 = *(void *)(v4 + 4648);
    return v7(v4, a2, cf, v8);
  }
  return result;
}

void sub_1000797B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 5112);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 5120);
    v3(a1, a2, v5, a3);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s Callback not registered" :@"__WiFiDeviceProcessLeakyAPStatsEvent"];
    }
  }
}

void sub_100079850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 5192);
    if (v3)
    {
      uint64_t v5 = *(void *)(a1 + 5200);
      v3(a1, a2, v5, a3);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:3, "%s: eventData is NULL!", "__WiFiDeviceProcessTxFailEvent"];
    }
  }
}

void sub_100079900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(a1 + 5256);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "BSS steer event: %@\n", a3 message];
  }
  if (v8)
  {
    uint64_t v7 = *(void *)(a1 + 5264);
    v8(a1, a2, a3, 0, v7);
  }
}

void sub_1000799B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return;
  }
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v7 = Mutable;
  if (*(unsigned char *)(a3 + 40))
  {
    CFDictionaryAddValue(Mutable, @"kWiFiHostApWiFiNetworkIeValidKey", kCFBooleanTrue);
    CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (const void *)(a3 + 2));
    if (v8)
    {
      CFNumberRef v9 = v8;
      CFDictionarySetValue(v7, @"WiFiHostApWiFiNetworkIeBatteryKey", v8);
      CFRelease(v9);
      CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, (const void *)a3);
      if (v10)
      {
        CFNumberRef v11 = v10;
        CFDictionarySetValue(v7, @"WiFiHostApWiFiNetworkIeFlagKey", v10);
        CFRelease(v11);
        if (!*(unsigned char *)(a3 + 3)) {
          goto LABEL_8;
        }
        CFStringRef v12 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)(a3 + 4), 0x8000100u);
        if (v12)
        {
          CFStringRef v13 = v12;
          CFDictionarySetValue(v7, @"WiFiHostApWiFiNetworkIeSsidKey", v12);
          CFRelease(v13);
          goto LABEL_8;
        }
        CFNumberRef v19 = (void *)qword_10027DD68;
        if (!qword_10027DD68)
        {
LABEL_31:
          if (!v7) {
            return;
          }
          goto LABEL_21;
        }
        CFStringRef v20 = "Failed to get SSID Info from Event data";
      }
      else
      {
        CFNumberRef v19 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_31;
        }
        CFStringRef v20 = "Failed to get Flag Info from Event data";
      }
    }
    else
    {
      CFNumberRef v19 = (void *)qword_10027DD68;
      if (!qword_10027DD68) {
        goto LABEL_31;
      }
      CFStringRef v20 = "Failed to get Battery Info from Event data";
    }
    [v19 WFLog:3 message:v20];
    goto LABEL_31;
  }
LABEL_8:
  int v14 = *(_DWORD *)(a3 + 36);
  if (v14)
  {
    if ((v14 & 2) != 0) {
      CFNumberRef v15 = (const void **)&kCFBooleanTrue;
    }
    else {
      CFNumberRef v15 = (const void **)&kCFBooleanFalse;
    }
    CFDictionaryAddValue(v7, @"DIRECTED_NETWORK", *v15);
    int v14 = *(_DWORD *)(a3 + 36);
  }
  if ((v14 & 4) != 0)
  {
    if ((v14 & 8) != 0) {
      CFNumberRef v16 = (const void **)&kCFBooleanTrue;
    }
    else {
      CFNumberRef v16 = (const void **)&kCFBooleanFalse;
    }
    CFDictionaryAddValue(v7, @"INTERNET_ACCESS", *v16);
  }
  CFStringRef v17 = *(void (**)(uint64_t, uint64_t, __CFDictionary *, void, void))(a1 + 5288);
  if (v17) {
    v17(a1, a2, v7, 0, *(void *)(a1 + 5296));
  }
  if (v7)
  {
LABEL_21:
    CFRelease(v7);
  }
}

void sub_100079C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: DPS Received on AC ", "__WiFiDeviceProcessDPSEvent")];
  }
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 5304);
  if (v7) {
    v7(a1, a2, *(void *)(a1 + 5312), a3);
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: Sent DPS Notification "];
  }
}

void sub_100079CEC(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s: SlowWiFi Received %@", "__WiFiDeviceProcessSlowWiFiEvent", a3 message];
  }
  sub_1000533EC(a1, a3);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, void, const __CFDictionary *))(a1 + 5320);
  if (v7) {
    v7(a1, a2, *(void *)(a1 + 5328), a3);
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: Sent SlowWiFi Notification "];
  }
}

void sub_100079DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s: SlowWiFiLinkProbeTrigger Received %@", "__WiFiDeviceProcessSlowWiFiLinkProbeTrigger", a3 message];
  }
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 5336);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 5344);
    v7(a1, a2, v8, a3);
  }
}

void sub_100079E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s: SlowWiFiUserInputTrigger Received %@", "__WiFiDeviceProcessSlowWiFiUserInputTrigger", a3 message];
  }
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 5352);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 5360);
    v7(a1, a2, v8, a3);
  }
}

void sub_100079F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 5368);
  if (v4) {
    v4(a1, a2, *(void *)(a1 + 5376), a3);
  }
  if (a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Prune Event Notification %@ ", "__WiFiDeviceProcessPruneEvent", a3 message];
    }
  }
  else if (qword_10027DD68)
  {
    [((id)qword_10027DD68) WFLog:4, "%s: Prune Event Notification with nil ", "__WiFiDeviceProcessPruneEvent", v6];
  }
}

void sub_100079FD0(void *a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: ", "__WiFiDeviceProcessCountryCodeChangedEvent")];
  }
  uint64_t v5 = a1[11];
  dispatch_time_t v6 = dispatch_time(0, 1000000000);
  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, 0);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s:cannot allocate dictRef", "__WiFiDeviceSendBSPCountryCodeChangeEvent"];
    }
    goto LABEL_14;
  }
  uint64_t v8 = Mutable;
  int valuePtr = 10;
  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (!v9)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s:cannot allocate eventTypeRef", "__WiFiDeviceSendBSPCountryCodeChangeEvent")];
    }
    CFNumberRef v15 = v8;
    goto LABEL_13;
  }
  CFNumberRef v10 = v9;
  CFDictionarySetValue(v8, @"BSP_EventType", v9);
  CFNumberRef v11 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v11)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s:cannot allocate eventParamsRef", @"__WiFiDeviceSendBSPCountryCodeChangeEvent"];
    }
    goto LABEL_29;
  }
  uint64_t v21 = 0;
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v21);
  if (!v12)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s:cannot allocate dummyRef" :@"__WiFiDeviceSendBSPCountryCodeChangeEvent"];
    }
LABEL_29:
    CFNumberRef v13 = 0;
    goto LABEL_9;
  }
  CFNumberRef v13 = v12;
  CFDictionarySetValue(v11, @"dummy", v12);
  CFDictionarySetValue(v8, @"BSP_EventParams", v11);
  int v14 = (void (*)(void *, uint64_t, void, __CFDictionary *))a1[681];
  if (v14) {
    v14(a1, a2, a1[682], v8);
  }
LABEL_9:
  CFRelease(v8);
  CFRelease(v10);
  if (v11) {
    CFRelease(v11);
  }
  if (v13)
  {
    CFNumberRef v15 = v13;
LABEL_13:
    CFRelease(v15);
  }
LABEL_14:
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s:Country code changed, purging scan cache\n", "__WiFiDeviceProcessCountryCodeChangedEvent")];
  }
  sub_10006E1F8((uint64_t)a1, 1);
  CFStringRef v17 = (void (*)(void *, uint64_t, void))a1[556];
  if (v17) {
    v17(a1, a2, a1[557]);
  }
}

void sub_10007A2B0(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s: LQMCrashTracerEvent Received %@", "__WiFiDeviceProcessLQMCrashTracerEvent", a2 message];
  }
  CFStringRef value = 0;
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  for (int i = 6; ; --i)
  {
    uint64_t v7 = Apple80211Get();
    uint64_t v8 = v7;
    if ((int)v7 <= 15)
    {
      if (v7 != -3905) {
        break;
      }
    }
    else if (v7 != 61 && v7 != 16)
    {
      goto LABEL_21;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }
  if (v7)
  {
LABEL_21:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s - Apple80211Get(APPLE80211_IOC_LQM_METRICS_CRASHTRACER_DATA) failed: %d (%s)", "__WiFiDeviceProcessLQMCrashTracerEvent", v8, strerror(v8)];
    }
  }
  else
  {
    if (CFDictionaryGetValueIfPresent(Mutable, &off_100262D70, (const void **)&value) && value)
    {
      id v10 = +[WAClient sharedClientWithIdentifier:@"wifid"];
      [v10 lqmCrashTracerReceiveBlock:value forInterfaceWithName:*(void *)(a1 + 112) andReply:&stru_10023F8D8];
      CFNumberRef v11 = +[WiFiUsageMonitor sharedInstance];
      [(WiFiUsageMonitor *)v11 receiveKernelLQMRollingWindow:value ForInterface:*(void *)(a1 + 112)];
      if (!Mutable) {
        return;
      }
      goto LABEL_17;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s - No LQM binary tag represented in APPLE80211_IOC_LQM_METRICS_CRASHTRACER_DATA dictionary, skipping.", "__WiFiDeviceProcessLQMCrashTracerEvent", v13, v14];
    }
  }
  if (Mutable) {
LABEL_17:
  }
    CFRelease(Mutable);
}

void sub_10007A490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: BeaconCacheUpdatedEvent Received %@", "__WiFiDeviceProcessBeaconCacheUpdatedEvent", a3 message];
  }
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 5384);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 5392);
    v7(a1, a2, v8, a3);
  }
}

void sub_10007A540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: WiFiTTRProcessEvent Received %@", "__WiFiDeviceProcessTTREvent", a3 message];
  }
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 5400);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 5408);
    v7(a1, a2, v8, a3);
  }
}

void sub_10007A5F0(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  if ((*(unsigned char *)(a1 + 40) & 0x10) != 0)
  {
    CFTypeRef v3 = cf;
    if (cf && (CFTypeID v6 = CFGetTypeID(cf), v6 == CFArrayGetTypeID()))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "[NWTRANSIT]: %s: Colocated networks=%@", "__WiFiDeviceProcessColocatedCacheEvent", v3 message];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: NULL evendata" : @"__WiFiDeviceProcessColocatedCacheEvent"];
      }
      CFTypeRef v3 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, CFTypeRef, uint64_t))(a1 + 5528);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 5536);
      v8(a1, a2, v3, v9);
    }
  }
}

void sub_10007A700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    CFTypeRef v3 = *(void (**)(void))(a1 + 5544);
    if (v3)
    {
      v3();
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s : NULL event data or null device", @"__WiFiDeviceProcessPeerCountryCode"];
    }
  }
}

void sub_10007A7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 5592);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 5600);
      v5(a1, a3, a5, a2, a4, v6);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: NULL event data" args:("__WiFiDeviceProcessNDDEvent")];
    }
  }
}

void sub_10007A86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    CFTypeRef v3 = *(void (**)(void))(a1 + 5608);
    if (v3)
    {
      v3();
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s : NULL event data or null device" : @"__WiFiDeviceProcessScanForwardStats"];
    }
  }
}

CFStringRef sub_10007A918()
{
  *(void *)&long long v0 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v0 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v6[15] = v0;
  *(_OWORD *)uint64_t v6 = v0;
  long long v5 = v0;
  long long v4 = v0;
  char cStr = 0;
  if (Apple80211ReturnToString()) {
    return 0;
  }
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  return CFStringCreateWithCString(kCFAllocatorDefault, &cStr, SystemEncoding);
}

void sub_10007A9B8(id a1, id a2, NSError *a3)
{
  if (a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s Error received after alerting wifianalyticsd to the availability of trap mini dump: %@", "__WiFiDeviceProcessDriverAvailableEvent_block_invoke", a3 message];
    }
  }
  else if (qword_10027DD68)
  {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s Alerted wifianalyticsd to the availability of trap mini dump, no error was returned", "__WiFiDeviceProcessDriverAvailableEvent_block_invoke", v5);
  }
}

void sub_10007AA48(const __CFDictionary *a1, __CFString *a2)
{
  if (a1)
  {
    if (a2)
    {
      CFNumberRef Value = CFDictionaryGetValue(a1, @"BSSID");
      uint64_t v5 = CFDictionaryGetValue(a1, @"TIMESTAMP");
      uint64_t v6 = CFDictionaryGetValue(a1, @"AGE");
      CFStringAppendFormat(a2, 0, @" %@/%@/%@s", Value, v5, v6);
    }
  }
}

void sub_10007AAD4(id a1, id a2, NSError *a3)
{
  if (a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s Error received after sending LQM CrashTracer block to wifianalyticsd: %@", "__WiFiDeviceProcessLQMCrashTracerEvent_block_invoke", a3 message];
    }
  }
  else if (qword_10027DD68)
  {
    [((id)qword_10027DD68) WFLog:@"%s Successfully sent LQM CrashTracer block to wifianalyticsd" :3 :@"__WiFiDeviceProcessLQMCrashTracerEvent_block_invoke" :v5];
  }
}

const void *sub_10007AB64(const void *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0;
}

void sub_10007ABA8(uint64_t a1, CFStringRef key)
{
  if (a1)
  {
    CFStringRef NetworkInterfaceEntity = key;
    if (key) {
      goto LABEL_6;
    }
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, *(CFStringRef *)(a1 + 112), kSCEntNetInterfaceActiveDuringSleepSupported);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: using default key %@", "__WiFiDeviceCheckForIPRenewalWakeupSupport", NetworkInterfaceEntity message];
    }
    if (NetworkInterfaceEntity)
    {
LABEL_6:
      CFPropertyListRef v6 = SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), NetworkInterfaceEntity);
      if (qword_10027DD68)
      {
        uint64_t v8 = "TRUE";
        if (!v6) {
          uint64_t v8 = "FALSE";
        }
        [(id)qword_10027DD68 WFLog:3, "%s: %@ = %s", "__WiFiDeviceCheckForIPRenewalWakeupSupport", NetworkInterfaceEntity, v8 message];
      }
      uint64_t v9 = &kCFBooleanTrue;
      if (!v6) {
        uint64_t v9 = &kCFBooleanFalse;
      }
      CFBooleanRef v10 = *v9;
      for (int i = 6; ; --i)
      {
        uint64_t v12 = Apple80211Set();
        uint64_t v13 = v12;
        if ((int)v12 <= 15)
        {
          if (v12 != -3905) {
            break;
          }
        }
        else if (v12 != 61 && v12 != 16)
        {
          goto LABEL_23;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
      if (!v12) {
        goto LABEL_28;
      }
LABEL_23:
      if (qword_10027DD68)
      {
        CFNumberRef v16 = "scheduled";
        if (!v6) {
          CFNumberRef v16 = "un-scheduled";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "__WiFiDeviceCheckForIPRenewalWakeupSupport", v16, v13);
      }
LABEL_28:
      if (v10) {
        CFRelease(v10);
      }
      if (v6) {
        CFRelease(v6);
      }
      if (!key && NetworkInterfaceEntity)
      {
        CFRelease(NetworkInterfaceEntity);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: null serviceKey" : @"__WiFiDeviceCheckForIPRenewalWakeupSupport"];
      }
    }
  }
}

void sub_10007AE30(uint64_t a1, CFStringRef key)
{
  if (!a1) {
    return;
  }
  CFStringRef NetworkInterfaceEntity = key;
  if (key) {
    goto LABEL_6;
  }
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, *(CFStringRef *)(a1 + 112), @"IPConfigurationBusy");
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: using default key %@", "__WiFiDeviceCheckForIPConfigurationBusy", NetworkInterfaceEntity message];
  }
  if (NetworkInterfaceEntity)
  {
LABEL_6:
    CFPropertyListRef v6 = SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), NetworkInterfaceEntity);
    if (qword_10027DD68)
    {
      uint64_t v8 = "TRUE";
      if (!v6) {
        uint64_t v8 = "FALSE";
      }
      [(id)qword_10027DD68 WFLog:3, "%s: %@ = %s", "__WiFiDeviceCheckForIPConfigurationBusy", NetworkInterfaceEntity, v8 message];
    }
    if (v6)
    {
      if (*(_DWORD *)(a1 + 4316) == 2)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: waiting for IP configuration update", "__WiFiDeviceCheckForIPConfigurationBusy")];
        }
        char v10 = 1;
      }
      else
      {
        char v10 = 0;
      }
      *(unsigned char *)(a1 + 4344) = v10;
      CFRelease(v6);
      if (key) {
        return;
      }
      goto LABEL_24;
    }
    CFNumberRef v11 = (unsigned char *)(a1 + 4344);
    if (!*(unsigned char *)(a1 + 4344))
    {
      *CFNumberRef v11 = 0;
      if (key) {
        return;
      }
      goto LABEL_24;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: checking for IP configuration update", @"__WiFiDeviceCheckForIPConfigurationBusy"];
    }
    *CFNumberRef v11 = 0;
    sub_10006A3A4(a1);
    if (!key)
    {
LABEL_24:
      CFRelease(NetworkInterfaceEntity);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null serviceKey" : @"__WiFiDeviceCheckForIPConfigurationBusy"];
    }
  }
}

uint64_t sub_10007B08C(const __CFString *a1, int *a2)
{
  if (!a2) {
    return 0;
  }
  *a2 = 0;
  CFIndex location = CFStringFind(a1, kSCEntNetIPv4RouterARPAlive, 0).location;
  int v5 = 0;
  if (location != -1)
  {
LABEL_5:
    *a2 = v5;
    return 1;
  }
  if (CFStringFind(a1, kSCEntNetIPv4RouterARPFailure, 0).location != -1)
  {
    int v5 = 1;
    goto LABEL_5;
  }
  return 0;
}

void sub_10007B118(uint64_t a1, const __CFString *a2)
{
  memset(bytes, 170, sizeof(bytes));
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(kCFAllocatorDefault, a2, @"/");
  if (CFArrayGetCount(ArrayBySeparatingStrings) == 5)
  {
    if (CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2))
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3);
      if (ValueAtIndex)
      {
        CFStringRef v5 = ValueAtIndex;
        CFPropertyListRef v6 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 4);
        if (v6)
        {
          if (CFEqual(v6, kSCEntNetIPv6))
          {
            uint64_t v7 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2);
            if (CFEqual(v7, @"Service")) {
              *(unsigned char *)(a1 + 4300) = 0;
            }
            CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainSetup, v5, kSCEntNetInterface);
            if (NetworkServiceEntity)
            {
              CFStringRef v9 = NetworkServiceEntity;
              char v10 = sub_10001C1B4(a1, *(const void **)(a1 + 112));
              CFNumberRef v11 = v10;
              if (v10 && sub_1000199C0((uint64_t)v10))
              {
                if (CFEqual(v5, *(CFTypeRef *)(a1 + 112)))
                {
                  CFDictionaryRef v53 = 0;
                  goto LABEL_17;
                }
              }
              else
              {
                CFDictionaryRef v12 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), v9);
                if (v12)
                {
                  CFDictionaryRef v13 = v12;
                  CFNumberRef Value = CFDictionaryGetValue(v12, kSCPropNetInterfaceDeviceName);
                  if (!Value || !CFEqual(*(CFTypeRef *)(a1 + 112), Value))
                  {
                    CFStringRef NetworkInterfaceEntity = 0;
                    goto LABEL_71;
                  }
                  CFDictionaryRef v53 = v13;
LABEL_17:
                  if (qword_10027DD68)
                  {
                    CFNumberRef v16 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@+} %@", @"IP", +[NSString stringWithFormat:@"IPV6 State change for %@", *(void *)(a1 + 112)]) UTF8String]);
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buuint64_t f = 136446210;
                      *(void *)&uint8_t buf[4] = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v16 UTF8String]] UTF8String];
                      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                    }
                  }
                  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                  if (Mutable)
                  {
                    CFNumberRef v18 = Mutable;
                    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, *(CFStringRef *)(a1 + 112), kSCEntNetIPv6);
                    if (NetworkInterfaceEntity)
                    {
                      CFDictionaryRef v20 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), NetworkInterfaceEntity);
                      if (v20)
                      {
                        CFStringRef v52 = NetworkInterfaceEntity;
                        CFDictionaryRef cf = v20;
                        CFArrayRef v21 = (const __CFArray *)CFDictionaryGetValue(v20, kSCPropNetIPv6Addresses);
                        if (!v21) {
                          goto LABEL_81;
                        }
                        CFArrayRef v22 = v21;
                        int v23 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2);
                        if (CFEqual(v23, @"Service") && CFArrayGetCount(v22))
                        {
                          *(unsigned char *)(a1 + 4300) = 1;
                          if (qword_10027DD68) {
                            [((id)qword_10027DD68) WFLog:3 message:@"%s : IPv6 address is routable" : @"__WiFiDeviceCheckForIPV6ParamsChange"];
                          }
                        }
                        CFIndex Count = CFArrayGetCount(v22);
                        CFArrayRef theArray = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                        if (theArray)
                        {
                          CFStringRef v48 = v9;
                          uint64_t v49 = v11;
                          CFArrayRef v50 = ArrayBySeparatingStrings;
                          CFAllocatorRef v26 = kCFAllocatorDefault;
                          if (Count >= 1)
                          {
                            unsigned __int8 v27 = 0;
                            CFIndex v28 = Count + 1;
                            while (1)
                            {
                              CFStringRef v29 = (const __CFString *)CFArrayGetValueAtIndex(v22, v27);
                              if (v29) {
                                break;
                              }
LABEL_53:
                              ++v27;
                              if (--v28 <= 1) {
                                goto LABEL_54;
                              }
                            }
                            CFStringRef v30 = v29;
                            if (qword_10027DD68)
                            {
                              CFNumberRef v32 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", [+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{%@*} %@", @"IP", +[NSString stringWithFormat:@"IP Address: %@", v30]) UTF8String]);
                              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                              {
                                CFAllocatorRef v26 = kCFAllocatorDefault;
                                CFNumberRef v33 = [+[NSString stringWithFormat:@"[WiFiPolicy] %s", [(NSString *)v32 UTF8String]] UTF8String];
                                *(_DWORD *)buuint64_t f = 136446210;
                                *(void *)&uint8_t buf[4] = v33;
                                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                              }
                            }
                            memset(bytes, 0, sizeof(bytes));
                            CFTypeID TypeID = CFStringGetTypeID();
                            if (CFGetTypeID(v30) == TypeID)
                            {
                              *(void *)&long long v35 = 0xAAAAAAAAAAAAAAAALL;
                              *((void *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
                              *(_OWORD *)&v57[14] = v35;
                              *(_OWORD *)buuint64_t f = v35;
                              *(_OWORD *)uint64_t v57 = v35;
                              if (CFStringGetCString(v30, (char *)buf, 46, 0x600u))
                              {
                                if (inet_pton(30, (const char *)buf, bytes) == 1) {
                                  goto LABEL_46;
                                }
                                if (qword_10027DD68) {
                                  [(id)qword_10027DD68 WFLog:3, "%s: Error converting IPv6 address %@ to network type", "__WiFiDeviceConvertStrToIPv6Addr", v30 message];
                                }
                              }
                              else
                              {
                                if (qword_10027DD68) {
                                  [(id)qword_10027DD68 WFLog:3, "%s: Error converting IPv6 address %@ to ASCII", "__WiFiDeviceConvertStrToIPv6Addr", v30 message];
                                }
                              }
                            }
                            else
                            {
                              if (qword_10027DD68) {
                                [((id)qword_10027DD68) WFLog:3 message:@"%s: Not a valid CFString" : @"__WiFiDeviceConvertStrToIPv6Addr" : v47];
                              }
                            }
LABEL_46:
                            if (bytes[0] == 254 && bytes[1] == 128)
                            {
                              kdebug_trace();
                              if (qword_10027DD68) {
                                [(id)qword_10027DD68 WFLog:4 message:"IPv6 address is assigned"];
                              }
                            }
                            CFDataRef v38 = CFDataCreate(v26, bytes, 16);
                            if (v38)
                            {
                              CFDataRef v39 = v38;
                              CFArrayAppendValue(theArray, v38);
                              CFRelease(v39);
                            }
                            goto LABEL_53;
                          }
LABEL_54:
                          CFDictionaryAddValue(v18, @"IO80211InterfaceIPV6Address", theArray);
                          int v40 = 6;
                          CFNumberRef v11 = v49;
                          CFArrayRef ArrayBySeparatingStrings = v50;
                          CFStringRef v9 = v48;
                          CFStringRef NetworkInterfaceEntity = v52;
                          CFDictionaryRef v13 = v53;
                          while (1)
                          {
                            uint64_t v41 = Apple80211Set();
                            uint64_t v42 = v41;
                            if ((int)v41 <= 15)
                            {
                              if (v41 != -3905) {
                                break;
                              }
                            }
                            else if (v41 != 61 && v41 != 16)
                            {
                              goto LABEL_65;
                            }
                            if (!v40) {
                              break;
                            }
                            usleep(0x7A120u);
                            --v40;
                          }
                          if (!v41) {
                            goto LABEL_68;
                          }
LABEL_65:
                          if (qword_10027DD68) {
                            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "__WiFiDeviceCheckForIPV6ParamsChange", "APPLE80211_IOC_IPV6_PARAMS", v42);
                          }
LABEL_68:
                          [+[WiFiUsageMonitor sharedInstance] notifyIPv6Changes:[(__CFDictionary *)v18 copy]];
                          CFRelease(theArray);
                          CFRelease(v18);
                        }
                        else
                        {
LABEL_81:
                          CFRelease(v18);
                          CFStringRef NetworkInterfaceEntity = v52;
                          CFDictionaryRef v13 = v53;
                        }
                        double v45 = cf;
LABEL_70:
                        CFRelease(v45);
                        if (!v13) {
                          goto LABEL_72;
                        }
                        goto LABEL_71;
                      }
                    }
                    else
                    {
                      if (qword_10027DD68) {
                        [((id)qword_10027DD68) WFLog:4 message:@"%s: interface_key is NULL." args:__WiFiDeviceCheckForIPV6ParamsChange];
                      }
                    }
                    double v45 = v18;
                    CFDictionaryRef v13 = v53;
                    goto LABEL_70;
                  }
                  CFStringRef NetworkInterfaceEntity = 0;
                  CFDictionaryRef v13 = v53;
                  if (!v53)
                  {
LABEL_72:
                    CFRelease(v9);
                    CFStringRef v9 = NetworkInterfaceEntity;
                    if (!NetworkInterfaceEntity) {
                      goto LABEL_74;
                    }
                    goto LABEL_73;
                  }
LABEL_71:
                  CFRelease(v13);
                  goto LABEL_72;
                }
              }
LABEL_73:
              CFRelease(v9);
LABEL_74:
              if (!ArrayBySeparatingStrings) {
                goto LABEL_76;
              }
              goto LABEL_75;
            }
          }
        }
      }
    }
  }
  CFNumberRef v11 = 0;
  if (ArrayBySeparatingStrings) {
LABEL_75:
  }
    CFRelease(ArrayBySeparatingStrings);
LABEL_76:
  if (v11) {
    CFRelease(v11);
  }
}

void sub_10007B924(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (!*(void *)(v2 + 64))
  {
    CFRelease(*(CFTypeRef *)(a1 + 40));
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v14 = a1 + 32;
    CFNumberRef v16 = *(const void **)(*(void *)(v15 + 8) + 24);
    if (!v16) {
      return;
    }
    CFRelease(v16);
    uint64_t v3 = v14;
    goto LABEL_18;
  }
  uint64_t v3 = a1 + 32;
  CFDataRef v4 = *(const __CFData **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v4)
  {
    CFTypeID TypeID = CFDataGetTypeID();
    if (TypeID == CFGetTypeID(v4))
    {
      BytePtr = CFDataGetBytePtr(v4);
      CFStringRef v7 = *(const __CFString **)(v2 + 112);
      if (v7)
      {
        uint64_t v8 = BytePtr;
        int v9 = socket(2, 2, 0);
        if (v9 == -1)
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WFMacRandomisation Socket open failed", "__WiFiDeviceSetNetworkIDForAssociation", v19, *(void *)buffer, *(void *)&buffer[8]);
          }
        }
        else
        {
          int v10 = v9;
          memset(v21, 0, sizeof(v21));
          *(_OWORD *)buffer = 0u;
          CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
          CFStringGetCString(v7, buffer, 16, SystemEncoding);
          v21[0] = 32;
          long long v12 = *((_OWORD *)v8 + 1);
          *(_OWORD *)&v21[1] = *(_OWORD *)v8;
          *(_OWORD *)&v21[17] = v12;
          if (ioctl(v10, 0xC03169D2uLL, buffer) == -1)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3, @"%s: WFMacRandomisation ioctl(SIOCSIFNETWORKID) failed", @"__WiFiDeviceSetNetworkIDForAssociation"];
            }
            close(v10);
            goto LABEL_16;
          }
          close(v10);
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Successfully set network ID <%@> ", "__WiFiDeviceAssociateLowLevel_block_invoke", *(void *)(*(void *)(*(void *)v3 + 8) + 24), *(void *)buffer, *(void *)&buffer[8] message];
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: WFMacRandomisation IfName is NULL", "__WiFiDeviceSetNetworkIDForAssociation", v19, *(void *)buffer, *(void *)&buffer[8]];
        }
      }
    }
  }
LABEL_16:
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFStringRef v17 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (!v17) {
    return;
  }
  CFRelease(v17);
LABEL_18:
  *(void *)(*(void *)(*(void *)v3 + 8) + 24) = 0;
}

void sub_10007BB90(uint64_t a1, const void *a2)
{
  CFDataRef v4 = sub_1001687A8((uint64_t)a2);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "%s: Created AWDL interface %@", "__WiFiDeviceAWDLInterfaceCreationCompleted", v4 message];
  }
  sub_10016BA20((uint64_t)a2, v4, 0);
  sub_100049B0C(a1);
  Apple80211CopyRangingCapabilities();
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 5784), v4, a2);
  CFPropertyListRef v6 = *(const void **)(a1 + 5976);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 5976) = 0;
  }
  if (*(void *)(a1 + 64))
  {
    v10[0] = 0;
    v10[1] = v10;
    v10[2] = 0x2020000000;
    CFTypeRef v11 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    CFTypeRef v11 = CFRetain(v4);
    CFRetain((CFTypeRef)a1);
    CFStringRef v7 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007BD60;
    block[3] = &unk_10023F220;
    void block[4] = v10;
    double block[5] = a1;
    dispatch_async(v7, block);
    _Block_object_dispose(v10, 8);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null queue." : @"__WiFiDeviceAWDLInterfaceCreationCompleted"];
    }
  }
}

void sub_10007BD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007BD60(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2[8])
  {
    uint64_t v3 = (void (*)(void *, uint64_t, void, uint64_t))v2[637];
    if (v3)
    {
      uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (v4)
      {
        v3(v2, v4, v2[638], 1);
        CFStringRef v5 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        if (v5)
        {
          CFRelease(v5);
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
        }
      }
    }
    CFPropertyListRef v6 = *(const void **)(a1 + 40);
    CFRelease(v6);
  }
  else
  {
    CFRelease(v2);
    CFStringRef v7 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
  }
}

void sub_10007BE58(id a1)
{
  if (objc_opt_class())
  {
    if (objc_opt_class()) {
      qword_10027D688 = objc_alloc_init(WiFiAccountStoreManager);
    }
  }
}

void sub_10007C18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C1A4(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8);
  return result;
}

void sub_10007C280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007C298(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (*(unsigned __int8 *)(v2 + 8) == v3)
  {
    if (qword_10027DD68)
    {
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
        CFStringRef v7 = "Managed";
      }
      else {
        CFStringRef v7 = "Non-Managed";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: No change Current (%s Account)", "-[WiFiAccountStoreManager _updateIsManagedAppleIDAndNotify:]_block_invoke", v7);
    }
  }
  else
  {
    *(unsigned char *)(v2 + 8) = v3;
    if (*(unsigned char *)(a1 + 48) && [*(id *)(a1 + 32) callback] && objc_msgSend(*(id *)(a1 + 32), "context"))
    {
      uint64_t v8 = (void (*)(id, uint64_t))[*(id *)(a1 + 32) callback];
      id v4 = [*(id *)(a1 + 32) context];
      uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      v8(v4, v5);
    }
  }
}

void sub_10007C404(void *a1)
{
  CFURLRef v2 = CFURLCreateWithString(kCFAllocatorDefault, @"file:///private/var/Managed%20Preferences/mobile/com.apple.MobileWiFi.debug.plist", 0);
  CFErrorRef error = 0;
  qword_10027DD78 = (uint64_t)a1;
  qword_10027DD80 = (uint64_t)CFRunLoopGetCurrent();
  if (v2)
  {
    int v3 = CFReadStreamCreateWithFile(kCFAllocatorDefault, v2);
    if (!v3)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: null fileStreamRef" arguments:@"WiFiLoggingLoadDebugSettings"];
      }
      CFURLRef v19 = v2;
LABEL_37:
      CFRelease(v19);
      goto LABEL_38;
    }
    id v4 = v3;
    int v5 = CFReadStreamOpen(v3);
    if (v5)
    {
      CFDictionaryRef v6 = (const __CFDictionary *)CFPropertyListCreateWithStream(kCFAllocatorDefault, v4, 0, 0, 0, &error);
      CFDictionaryRef v7 = v6;
      if (error)
      {
        int v9 = (void *)qword_10027DD68;
        if (!qword_10027DD68)
        {
LABEL_9:
LABEL_34:
          CFReadStreamClose(v4);
LABEL_35:
          CFRelease(v4);
          CFRelease(v2);
          if (!v7) {
            goto LABEL_38;
          }
          CFURLRef v19 = v7;
          goto LABEL_37;
        }
        CFArrayRef v22 = "WiFiLoggingLoadDebugSettings";
        CFErrorRef v23 = error;
        int v10 = "%s: plist creation returned error %@";
        goto LABEL_7;
      }
      if (v6)
      {
        CFTypeID v12 = CFGetTypeID(v6);
        if (v12 == CFDictionaryGetTypeID())
        {
          if (byte_10027D698 != 1)
          {
            if (CFDictionaryGetCount(v7))
            {
              CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v7, @"WiFiManagerLoggingEnabled");
              CFComparisonResult v14 = CFStringCompare(Value, @"true", 0);
              if (v14 == kCFCompareEqualTo)
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4, @"%s: WiFi Diagnostic Profile enabled", @"WiFiLoggingLoadDebugSettings"];
                }
                byte_10027D698 = 1;
                if (qword_10027DD78)
                {
                  sub_10009317C((void *)qword_10027DD78, @"LoggingFileClassC", kCFBooleanFalse);
                  sub_10009317C((void *)qword_10027DD78, @"LoggingFileEnabled", kCFBooleanTrue);
                  sub_10009317C((void *)qword_10027DD78, @"WiFiSettingsLogging", kCFBooleanTrue);
                  sub_10009317C((void *)qword_10027DD78, @"WiFiATJPickerLogging", kCFBooleanTrue);
                  sub_10009317C((void *)qword_10027DD78, @"DiagnosticsEnabled", kCFBooleanTrue);
                  goto LABEL_34;
                }
                int v9 = (void *)qword_10027DD68;
                if (!qword_10027DD68) {
                  goto LABEL_9;
                }
                CFArrayRef v22 = "__WiFiLoggingTurnOnWiFiLogging";
                int v10 = "%s: wifimanager is NULL";
LABEL_7:
                uint64_t v11 = 4;
LABEL_8:
                [v9 WFLog:v11 message:v10, v22, v23];
                goto LABEL_9;
              }
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"%s: WiFi Diagnostic Profile disabled" :@"WiFiLoggingLoadDebugSettings"];
              }
              byte_10027D698 = 0;
            }
            else
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: plist does not even have a single entry in Dictionary", "WiFiLoggingLoadDebugSettings")
              }
              byte_10027D698 = 0;
              sub_10009317C(a1, @"DiagnosticsEnabled", kCFBooleanFalse);
            }
            sub_10007C884();
            goto LABEL_34;
          }
          int v9 = (void *)qword_10027DD68;
          if (!qword_10027DD68) {
            goto LABEL_9;
          }
          int v10 = "wifi debug profile is already installed";
        }
        else
        {
          int v9 = (void *)qword_10027DD68;
          if (!qword_10027DD68) {
            goto LABEL_9;
          }
          CFArrayRef v22 = "WiFiLoggingLoadDebugSettings";
          int v10 = "%s: unknown property format";
        }
        uint64_t v11 = 3;
        goto LABEL_8;
      }
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"WiFi debug profile is not installed"];
    }
    if (byte_10027D698 == 1)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Uninstalling logging profile"];
      }
      byte_10027D698 = 0;
      sub_10009317C(a1, @"DiagnosticsEnabled", kCFBooleanFalse);
      sub_10007C884();
    }
    CFDictionaryRef v7 = 0;
    if (!v5) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: null url", "WiFiLoggingLoadDebugSettings"];
  }
LABEL_38:
  if (error) {
    CFRelease(error);
  }
}

void sub_10007C884()
{
  if (qword_10027DD78)
  {
    if (byte_10027DD61) {
      CFBooleanRef v0 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v0 = kCFBooleanFalse;
    }
    sub_10009317C((void *)qword_10027DD78, @"LoggingFileClassC", v0);
    if (byte_10027DD60) {
      CFBooleanRef v1 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v1 = kCFBooleanFalse;
    }
    sub_10009317C((void *)qword_10027DD78, @"LoggingFileEnabled", v1);
    sub_10009317C((void *)qword_10027DD78, @"WiFiSettingsLogging", kCFBooleanFalse);
    sub_10009317C((void *)qword_10027DD78, @"WiFiATJPickerLogging", kCFBooleanFalse);
    CFURLRef v2 = (void *)qword_10027DD78;
    sub_10009317C(v2, @"DiagnosticsEnabled", kCFBooleanFalse);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, "%s: wifimanager is NULL", "__WiFiLoggingTurnOffWiFiLogging"];
    }
  }
}

uint64_t sub_10007C9C0()
{
  return byte_10027D698;
}

id sub_10007C9CC()
{
  CFBooleanRef v0 = +[NSFileManager defaultManager];
  uint64_t v12 = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  CFBooleanRef v1 = [(NSArray *)[(NSFileManager *)v0 contentsOfDirectoryAtPath:@"/var/mobile/Library/Logs/CrashReporter/WiFi/WiFiManager" error:&v12] objectEnumerator];
  id result = [(NSEnumerator *)v1 countByEnumeratingWithState:&v8 objects:v13 count:16];
  if (result)
  {
    id v3 = result;
    uint64_t v4 = *(void *)v9;
    do
    {
      int v5 = 0;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        CFDictionaryRef v6 = *(void **)(*((void *)&v8 + 1) + 8 * (void)v5);
        if ([v6 hasPrefix:@"wifi-buf-"]
          && [v6 hasSuffix:@".log"])
        {
          if (-[NSFileManager removeItemAtPath:error:](v0, "removeItemAtPath:error:", [@"/var/mobile/Library/Logs/CrashReporter/WiFi/WiFiManager" stringByAppendingPathComponent:v6], &v12))
          {
            BOOL v7 = v12 == 0;
          }
          else
          {
            BOOL v7 = 0;
          }
          if (!v7) {
            NSLog(@"Error removing %@: %@", v6, v12);
          }
        }
        int v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id result = [(NSEnumerator *)v1 countByEnumeratingWithState:&v8 objects:v13 count:16];
      id v3 = result;
    }
    while (result);
  }
  return result;
}

void sub_10007CB58(uint64_t a1, int a2, uint64_t a3, const __CFString **a4)
{
  qword_10027DD78 = a1;
  qword_10027DD80 = (uint64_t)CFRunLoopGetCurrent();
  if (!qword_10027DD68) {
    qword_10027DD68 = sub_1000A65A4(qword_10027DD78);
  }
  byte_10027DD70 = a2;
  CFStringRef v9 = a4[1];
  uint64_t v10 = 5;
  if (v9)
  {
    IntCFStringRef Value = CFStringGetIntValue(v9);
    if (IntValue >= 5) {
      uint64_t v10 = 5;
    }
    else {
      uint64_t v10 = IntValue;
    }
  }
  CFStringRef v12 = a4[2];
  uint64_t v13 = 3;
  if (v12)
  {
    SInt32 v14 = CFStringGetIntValue(v12);
    if ((v14 - 6) >= 0xFFFFFFFB) {
      int v15 = v14;
    }
    else {
      int v15 = 3;
    }
    uint64_t v13 = v15;
  }
  CFStringRef v16 = a4[4];
  uint64_t v17 = 2;
  if (v16)
  {
    SInt32 v18 = CFStringGetIntValue(v16);
    if ((v18 - 3) >= 0xFFFFFFFE) {
      int v19 = v18;
    }
    else {
      int v19 = 2;
    }
    uint64_t v17 = v19;
  }
  CFStringRef v20 = a4[3];
  uint64_t v21 = 7;
  if (v20)
  {
    unsigned int v22 = CFStringGetIntValue(v20);
    if (v22 <= 0x1E) {
      int v23 = v22;
    }
    else {
      int v23 = 7;
    }
    uint64_t v21 = v23;
  }
  if (a2)
  {
    if (byte_10027D698 == 1)
    {
      [(id)qword_10027DD68 setDestinationFileLocation:@"/var/mobile/Library/Logs/CrashReporter/WiFi" fileNamePrefix:@"wifimanager" runLoopRef:qword_10027DD80 runLoopMode:kCFRunLoopDefaultMode classC:a3 dateFormatter:qword_10027DDA0 maxFileSizeInMB:v10 logLifespanInDays:v21];
    }
    else
    {
      if (*a4) {
        CFStringRef v24 = *a4;
      }
      else {
        CFStringRef v24 = @"/Library/Logs/wifimanager.log";
      }
      [(id)qword_10027DD68 setDestinationFile:v24 runLoopRef:qword_10027DD80 runLoopMode:kCFRunLoopDefaultMode classC:a3 dateFormatter:qword_10027DDA0 maxFileSizeInMB:v10 logLifespanInDays:v21];
    }
  }
  else
  {
    [(id)qword_10027DD68 setDestinationOsLog:@"com.apple.WiFiManager" category:&stru_100248240 logLifespanInDays:v21 logLevel:v13 logPrivacy:v17];
  }
}

id sub_10007EEE4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10007F05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10007F080(uint64_t a1)
{
  CFURLRef v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  obint j = *(id *)(v4 + 40);
  unsigned __int8 v5 = [v2 _runFindAndJoinOnInterface:v3 outError:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v5;
  if (*(void *)(a1 + 64)) {
    **(void **)(a1 + 64) = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) copy];
  }
}

void sub_10007F23C(void *a1)
{
  CFURLRef v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v12 = 0;
  unsigned __int8 v4 = [v2 _runFindAndJoinOnInterface:v3 outError:&v12];
  id v5 = v12;
  CFDictionaryRef v6 = (void *)a1[7];
  if (v6)
  {
    BOOL v7 = a1[6];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    int v8[2] = sub_10007F314;
    void v8[3] = &unk_1002406E8;
    id v10 = v6;
    unsigned __int8 v11 = v4;
    id v9 = v5;
    dispatch_sync(v7, v8);
  }
}

uint64_t sub_10007F314(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

void sub_10007F538(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

BOOL sub_10007F814()
{
  CFStringRef v0 = (const __CFString *)MGCopyAnswer();
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  BOOL v3 = v2 == CFStringGetTypeID() && CFEqual(v1, @"NonUI");
  CFRelease(v1);
  return v3;
}

uint64_t sub_10007F894()
{
  uint64_t result = qword_10027D6A0;
  if (!qword_10027D6A0)
  {
    pthread_once(&stru_10027CA08, (void (*)(void))sub_10007F8DC);
    return qword_10027D6A0;
  }
  return result;
}

__CFArray *sub_10007F8DC()
{
  qword_10027D6A0 = _CFRuntimeRegisterClass();
  IOMasterPort(0, (mach_port_t *)&dword_10027D6D0);
  long long v9 = xmmword_1001CB618;
  long long v10 = unk_1001CB628;
  long long v11 = xmmword_1001CB638;
  long long v5 = xmmword_1001CB5D8;
  long long v6 = unk_1001CB5E8;
  long long v7 = xmmword_1001CB5F8;
  long long v8 = unk_1001CB608;
  long long v1 = xmmword_1001CB598;
  long long v2 = unk_1001CB5A8;
  long long v3 = xmmword_1001CB5B8;
  long long v4 = unk_1001CB5C8;
  qword_10027D6A8 = (uint64_t)sub_1000AE45C((char *)&v1, 22);
  long long v3 = xmmword_1001CB668;
  long long v4 = unk_1001CB678;
  long long v5 = xmmword_1001CB688;
  long long v6 = unk_1001CB698;
  long long v1 = xmmword_1001CB648;
  long long v2 = unk_1001CB658;
  qword_10027D6B0 = (uint64_t)sub_1000AE45C((char *)&v1, 12);
  *(void *)&long long v4 = 0;
  long long v1 = xmmword_1001CB450;
  long long v2 = xmmword_1001CB460;
  long long v3 = xmmword_1001CB470;
  qword_10027D6B8 = (uint64_t)sub_1000AE45C((char *)&v1, 7);
  *(void *)&long long v4 = 0;
  long long v1 = xmmword_1001CB450;
  long long v2 = xmmword_1001CB460;
  long long v3 = xmmword_1001CB470;
  uint64_t result = sub_1000AE45C((char *)&v1, 7);
  qword_10027D6C0 = (uint64_t)result;
  return result;
}

uint64_t sub_10007FA3C(uint64_t a1, NSObject *a2)
{
  long long v4 = (void *)sub_10000D990((uint64_t)"WiFiManagerCreate");
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, "%s: entering", "WiFiManagerCreate"];
  }
  NSLog(@"%s: entering", "WiFiManagerCreate");
  if (!qword_10027D6A0) {
    pthread_once(&stru_10027CA08, (void (*)(void))sub_10007F8DC);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    goto LABEL_79;
  }
  uint64_t v7 = Instance;
  bzero((void *)(Instance + 16), 0x9F0uLL);
  *(_DWORD *)(v7 + 316) = 1;
  *(void *)(v7 + 792) = 0;
  *(void *)(v7 + 1216) = 0;
  *(void *)(v7 + 1992) = MGCopyAnswer();
  id v8 = objc_alloc_init((Class)WFLogger);
  *(void *)(v7 + 2048) = v8;
  [v8 setDestinationOsLog:@"com.apple.WiFiManager" category:&stru_100248240 logLifespanInDays:7 logLevel:3 logPrivacy:2];
  *(void *)(v7 + 2056) = 0;
  if (&_ct_green_tea_logger_create && !byte_10027DDA8) {
    *(void *)(v7 + 2056) = ct_green_tea_logger_create();
  }
  CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v7 + 96) = Mutable;
  if (!Mutable) {
    goto LABEL_78;
  }
  CFMutableSetRef v10 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v7 + 104) = v10;
  if (!v10) {
    goto LABEL_78;
  }
  *(_DWORD *)(v7 + 112) = MGGetSInt32Answer();
  *(unsigned char *)(v7 + 129) = MGGetBoolAnswer();
  *(void *)(v7 + 120) = MGGetProductType();
  *(unsigned char *)(v7 + 128) = MGGetBoolAnswer();
  CFMutableSetRef v11 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v7 + 136) = v11;
  if (!v11) {
    goto LABEL_78;
  }
  CFMutableSetRef v12 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v7 + 144) = v12;
  if (!v12) {
    goto LABEL_78;
  }
  CFMutableSetRef v13 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v7 + 152) = v13;
  if (!v13) {
    goto LABEL_78;
  }
  CFMutableSetRef v14 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v7 + 160) = v14;
  if (!v14) {
    goto LABEL_78;
  }
  CFMutableSetRef v15 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v7 + 1168) = v15;
  if (!v15) {
    goto LABEL_78;
  }
  CFMutableSetRef v16 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v7 + 1192) = v16;
  if (!v16) {
    goto LABEL_78;
  }
  CFMutableArrayRef v17 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(v7 + 1976) = v17;
  if (!v17) {
    goto LABEL_78;
  }
  CFMutableSetRef v18 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(v7 + 168) = v18;
  if (!v18) {
    goto LABEL_78;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(kCFAllocatorDefault, @"Preferences SpringBoard Carousel WiFiPickerExtens Setup budd sharingd demod BundledIntentHandler SiriViewService assistantd assistant_service Siri SettingsIntentExtension NanoSettings PineBoard TVSettings SoundBoard RealityControlCenter MuseBuddyApp mobilewifitool WirelessStress coreautomationd wifiutil NanoWiFiViewService ATKWiFiFramework WiFiViewService hQT XCTestInternalAngel HPSetup AirPlaySenderUIApp TVSetup deviceaccessd AccessorySetupUI", @" ");
  *(void *)(v7 + 176) = ArrayBySeparatingStrings;
  if (!ArrayBySeparatingStrings) {
    goto LABEL_78;
  }
  *(void *)(v7 + 1696) = +[WiFiLocationManager sharedWiFiLocationManager];
  *(void *)(v7 + 192) = [[WiFiLocaleManagerUser alloc] initWithContext:v7];
  *(unsigned char *)(v7 + 2012) = 0;
  uint64_t v20 = sub_100045A90((uint64_t)kCFAllocatorDefault, v7);
  *(void *)(v7 + 200) = v20;
  if (!v20)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: Disabling WiFiMetricsManager", "WiFiManagerCreate"];
    }
  }
  *(_OWORD *)(v7 + 2032) = 0u;
  unsigned int v22 = +[WiFiCloudAssetsClient sharedInstance];
  *(void *)(v7 + 1624) = v22;
  [(WiFiCloudAssetsClient *)v22 initializeWithManager:v7 queue:a2];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100081110;
  block[3] = &unk_10023EAF8;
  void block[4] = v7;
  dispatch_async((dispatch_queue_t)qword_10027DD88, block);
  if (&_WiFiCloudSyncEngineCreate)
  {
    uint64_t v23 = WiFiCloudSyncEngineCreate();
    *(void *)(v7 + 1304) = v23;
    sub_100044DF0(v7, v23);
  }
  +[WiFiPerfPerAssoc initWithWiFiManager:v7 queue:a2];
  if (!byte_10027DDA8)
  {
    id v24 = +[WiFiMaintenanceTaskManager sharedWiFiMaintenanceTaskManager];
    *(void *)(v7 + 2000) = v24;
    if (v24)
    {
      [v24 setWifiManager:v7];
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: failed to create maintenance task manager", "WiFiManagerCreate"];
      }
    }
  }
  SCPreferencesRef v26 = SCPreferencesCreate(kCFAllocatorDefault, @"com.apple.wifi.manager", 0);
  *(void *)(v7 + 1064) = v26;
  if (!v26)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: SCPreferencesCreate preferences.system failed", "WiFiManagerCreate")];
    }
    goto LABEL_138;
  }
  unsigned __int8 v27 = SCPreferencesCreate(kCFAllocatorDefault, @"com.apple.wifi.manager", @"com.apple.wifi.plist");
  *(void *)(v7 + 1072) = v27;
  if (!v27)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: SCPreferencesCreate preferences.wifi failed" arguments:&"WiFiManagerCreate"];
    }
    goto LABEL_138;
  }
  context.versioint n = 0;
  memset(&context.retain, 0, 24);
  context.info = (void *)v7;
  if (!SCPreferencesSetCallback(v27, (SCPreferencesCallBack)sub_10008111C, &context))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: Error: SCPreferencesSetCallback preferences.wifi failed", "WiFiManagerCreate"];
    }
LABEL_138:
    goto LABEL_78;
  }
  CFIndex v28 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v28)
  {
    CFStringRef v29 = v28;
    CFDictionarySetValue(v28, @"ProtectionClass", @"C");
    uint64_t v30 = SCPreferencesCreateWithOptions();
    *(void *)(v7 + 1080) = v30;
    if (!v30)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, @"%s: Error: SCPreferencesCreateWithOptions preferences.wifiNetworks failed", @"WiFiManagerCreate"];
      }
      goto LABEL_76;
    }
    uint64_t v31 = SCPreferencesCreateWithOptions();
    *(void *)(v7 + 1096) = v31;
    if (!v31)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: SCPreferencesCreateWithOptions preferences.wifiPrivateMacNetworks failed"
      }
      goto LABEL_76;
    }
    CFNumberRef v32 = SCPreferencesCreate(kCFAllocatorDefault, @"com.apple.wifi.manager", @"com.apple.radios.plist");
    *(void *)(v7 + 1088) = v32;
    if (!v32)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, "%s: Error: SCPreferencesCreate preferences.radios failed", "WiFiManagerCreate"];
      }
      goto LABEL_76;
    }
    v94.versioint n = 0;
    memset(&v94.retain, 0, 24);
    v94.info = (void *)v7;
    if (!SCPreferencesSetCallback(v32, (SCPreferencesCallBack)sub_100082194, &v94))
    {
      if (qword_10027DD68) {
        [[(id)qword_10027DD68 WFLog:@"%s: Error: SCPreferencesSetCallback preferences.radios failed" message:4];
      }
      goto LABEL_76;
    }
    id v33 = objc_alloc((Class)CWFKeyValueStore);
    id v34 = [v33 initWithType:4 identifier:CWFKnownNetworksStoreIdentifier];
    *(void *)(v7 + 1104) = v34;
    if (!v34)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: CWFKeyValueStore alloc failed"];
      }
      goto LABEL_76;
    }
    *(void *)(v7 + 1120) = [(id)CWFBootArgs() copy];
    long long v35 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
    *(void *)(v7 + 1360) = v35;
    if (!v35)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: failed to create networkExpiry.timer"];
      }
      goto LABEL_76;
    }
    dispatch_set_context(v35, (void *)v7);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 1360), (dispatch_function_t)sub_100082844);
    *(void *)(v7 + 1368) = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    CFIndex v36 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
    *(void *)(v7 + 2352) = v36;
    if (!v36)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4, @"%s: Error: failed to create carPlayLinkDownSuppressionMetrics.timer", @"WiFiManagerCreate"];
      }
      goto LABEL_76;
    }
    dispatch_set_context(v36, (void *)v7);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 2352), (dispatch_function_t)sub_100082C80);
    global_queue = dispatch_get_global_queue(0, 0);
    v93[0] = _NSConcreteStackBlock;
    v93[1] = 3221225472;
    v93[2] = sub_100082CF8;
    v93[3] = &unk_100240790;
    v93[4] = a2;
    v93[5] = v7;
    dispatch_async(global_queue, v93);
    *(_DWORD *)(v7 + 824) = 0;
    if (byte_10027DDA8) {
      char v38 = 1;
    }
    else {
      char v38 = MKBUserUnlockedSinceBoot();
    }
    *(unsigned char *)(v7 + 1328) = v38;
    if (qword_10027DD68)
    {
      if (byte_10027DDA8) {
        int v40 = "Running";
      }
      else {
        int v40 = "Not running";
      }
      [((id)qword_10027DD68) WFLog:4, "%s: %s in darwinOS mode", "WiFiManagerCreate", v40];
    }
    if (qword_10027DD68)
    {
      if (byte_10027DDA9) {
        uint64_t v42 = "Running";
      }
      else {
        uint64_t v42 = "Not running";
      }
      [((id)qword_10027DD68) WFLog:4, "%s: %s in Lockdown mode", "WiFiManagerCreate", v42];
    }
    if (qword_10027DD68)
    {
      if (byte_10027DDAA) {
        CFBooleanRef v44 = "Running";
      }
      else {
        CFBooleanRef v44 = "Not running";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: %s in store demo mode", "WiFiManagerCreate", v44);
    }
    sub_10008111C(v45, 2, v7);
    sub_1000830B8(v7);
    sub_100083534(v7, *(const __CFArray **)(v7 + 224));
    sub_100083D54(v7);
    *(unsigned char *)(v7 + 361) = 1;
    *(unsigned char *)(v7 + 529) = 1;
    *(unsigned char *)(v7 + 362) = sub_100023220((void *)v7, @"PrivateMacForcedDisassocPending", 0);
    CFDataRef v46 = sub_10000D934((void *)v7, @"deviceSpecificKeyMacRandomisation");
    if (v46 && (CFDataRef v47 = v46, CFDataGetLength(v46)))
    {
      CFDataRef Copy = CFDataCreateCopy(kCFAllocatorDefault, v47);
      *(void *)(v7 + 416) = Copy;
    }
    else
    {
      *(void *)&long long v49 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v49 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long bytes = v49;
      long long v98 = v49;
      if (SecRandomCopyBytes(kSecRandomDefault, 0x20uLL, &bytes))
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: Failed to generate device Specific Key for mac randomisation", "WiFiManagerCreate")];
        }
        goto LABEL_76;
      }
      CFDataRef Copy = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&bytes, 32);
      *(void *)(v7 + 416) = Copy;
    }
    sub_100083E60((void *)v7, @"deviceSpecificKeyMacRandomisation", Copy, 0);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : INIT : device specific key used : %@", "WiFiManagerCreate", *(void *)(v7 + 416) message];
    }
    CFDataRef v52 = sub_10000D934((void *)v7, @"RotationKeyMacRandomisation");
    if (v52 && (CFDataRef v53 = v52, CFDataGetLength(v52)))
    {
      CFDataRef v54 = CFDataCreateCopy(kCFAllocatorDefault, v53);
    }
    else
    {
      *(void *)&long long v55 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v55 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long bytes = v55;
      long long v98 = v55;
      if (SecRandomCopyBytes(kSecRandomDefault, 0x20uLL, &bytes))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:4, "%s: Error: Failed to generate rotation Key for mac randomisation", "WiFiManagerCreate"];
        }
        goto LABEL_76;
      }
      CFDataRef v54 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&bytes, 32);
    }
    *(void *)(v7 + 408) = v54;
    sub_100083E60((void *)v7, @"RotationKeyMacRandomisation", v54, 0);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : INIT : rotation key used : %@", "WiFiManagerCreate", *(void *)(v7 + 408) message];
    }
    if (!sub_10000D934((void *)v7, @"RotationKeyDateMacRandomisation"))
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFDateRef v60 = CFDateCreate(kCFAllocatorDefault, Current);
      sub_100083E60((void *)v7, @"RotationKeyDateMacRandomisation", v60, 0);
      if (v60) {
        CFRelease(v60);
      }
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : INIT : rotation key date : %@", "WiFiManagerCreate", sub_10000D934((void *)v7, @"RotationKeyDateMacRandomisation" message];
    }
    unsigned int v62 = (const void *)MGCopyAnswer();
    *(void *)(v7 + 488) = v62;
    if (v62)
    {
      sub_100083E60((void *)v7, @"hwMacAddressMacRandomisation", v62, 1);
      BytePtr = CFDataGetBytePtr(*(CFDataRef *)(v7 + 488));
      __int16 v64 = *((_WORD *)BytePtr + 2);
      *(_DWORD *)(v7 + 480) = *(_DWORD *)BytePtr;
      *(_WORD *)(v7 + 484) = v64;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "WFMacRandomisation : INIT : device mac HW address read: %s", ether_ntoa((const ether_addr *)(v7 + 480)));
      }
    }
    sub_100083F8C(v7);
    sub_100084BB4(v7);
    *(unsigned char *)(v7 + 528) = 0;
    if (byte_10027DDAA)
    {
      *(unsigned char *)(v7 + 376) = 0;
    }
    else if (*(unsigned char *)(v7 + 376))
    {
      uint64_t v66 = (const void **)&kCFBooleanTrue;
LABEL_99:
      sub_100083E60((void *)v7, @"WiFiMacRandomizationInternalUI", *v66, 1);
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s WFMacRandomisation : INIT : Initializing Private mac with feature enable [%d]\n", "WiFiManagerCreate", *(unsigned __int8 *)(v7 + 376));
      }
      *(unsigned char *)(v7 + 377) = sub_100023220((void *)v7, @"enableForceCarPlayMACRandomization", 0);
      id v68 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
      *(void *)(v7 + 496) = v68;
      if (v68)
      {
        dispatch_set_context(v68, (void *)v7);
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 496), (dispatch_function_t)sub_100084C0C);
        __int16 v69 = *(NSObject **)(v7 + 496);
        dispatch_time_t v70 = dispatch_time(0, 1800000000000);
        dispatch_source_set_timer(v69, v70, 0x1A3185C5000uLL, 0);
        int v71 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
        *(void *)(v7 + 432) = v71;
        if (v71)
        {
          dispatch_set_context(v71, (void *)v7);
          dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 432), (dispatch_function_t)sub_100085B58);
          sub_1000DE5C8((uint64_t)kCFAllocatorDefault, (uint64_t)"com.apple.wifi.manager", v7);
          *(void *)(v7 + 80) = v72;
          if (v72)
          {
            *(void *)(v7 + 1128) = qword_10027D6A8;
            *(void *)(v7 + 1136) = qword_10027D6B0;
            *(void *)(v7 + 1144) = qword_10027D6B8;
            *(void *)(v7 + 1152) = qword_10027D6C0;
            if (_os_feature_enabled_impl()) {
              sub_100013A1C(v7);
            }
            sub_10000456C(v7, *(const void **)(v7 + 1136), 1);
            int v73 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
            *(void *)(v7 + 920) = v73;
            if (v73)
            {
              dispatch_set_context(v73, (void *)v7);
              dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 920), (dispatch_function_t)sub_100085D68);
              *(void *)(v7 + 1888) = 0;
              int v74 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
              *(void *)(v7 + 1872) = v74;
              if (v74)
              {
                dispatch_set_context(v74, (void *)v7);
                dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 1872), (dispatch_function_t)sub_100085EC0);
                *(void *)(v7 + 864) = MKBGetDeviceLockState() == 1;
                unsigned int v75 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
                *(void *)(v7 + 1336) = v75;
                if (v75)
                {
                  dispatch_set_context(v75, (void *)v7);
                  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 1336), (dispatch_function_t)sub_100085F8C);
                  unsigned int v76 = *(NSObject **)(v7 + 1336);
                  dispatch_time_t v77 = dispatch_time(0, 60000000000);
                  dispatch_source_set_timer(v76, v77, 0xFFFFFFFFFFFFFFFFLL, 0);
                  if (!sub_10007F814() && *(_DWORD *)(v7 + 112) != 7) {
                    *(void *)(v7 + 1432) = sub_100184DDC(v7, (uint64_t)a2);
                  }
                  *(unsigned char *)(v7 + 1440) = 0;
                  *(void *)(v7 + 1400) = 0;
                  *(unsigned char *)(v7 + 1329) = 0;
                  *(void *)(v7 + 1448) = sub_100173DA8();
                  *(void *)(v7 + 1456) = -1;
                  *(_DWORD *)(v7 + 1468) = -1;
                  *(void *)(v7 + 1472) = -1;
                  uint64_t v78 = +[ManagedConfigWrapper sharedInstance];
                  *(void *)(v7 + 1480) = v78;
                  [(ManagedConfigWrapper *)v78 initializeWithHandler:v7];
                  unint64_t v79 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
                  *(void *)(v7 + 1488) = v79;
                  if (v79)
                  {
                    dispatch_set_context(v79, (void *)v7);
                    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 1488), (dispatch_function_t)sub_1000097A8);
                    CFTypeID v80 = *(NSObject **)(v7 + 1488);
                    dispatch_time_t v81 = dispatch_time(0, 5000000000);
                    dispatch_source_set_timer(v80, v81, 0x12A05F200uLL, 0);
                    CFDictionaryRef v82 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
                    *(void *)(v7 + 1536) = v82;
                    if (v82)
                    {
                      dispatch_set_context(v82, (void *)v7);
                      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 1536), (dispatch_function_t)sub_100086080);
                      CFTypeID v83 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
                      *(void *)(v7 + 1576) = v83;
                      if (v83)
                      {
                        dispatch_set_context(v83, (void *)v7);
                        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 1576), (dispatch_function_t)sub_10008611C);
                        *(unsigned char *)(v7 + 1672) = 0;
                        uint64_t v84 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
                        *(void *)(v7 + 1680) = v84;
                        if (v84)
                        {
                          dispatch_set_context(v84, (void *)v7);
                          dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 1680), (dispatch_function_t)sub_10008639C);
                          *(_DWORD *)(v7 + 1552) = 100;
                          *(void *)(v7 + 1688) = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                          qword_10027D6C8 = v7;
                          BOOL v85 = sub_100051068();
                          int v86 = sub_100004CF8(v7);
                          if (!v85 || v86)
                          {
                            if (!v86) {
                              sub_100086F2C(v7, "WiFiManagerCreate", 3994);
                            }
                          }
                          else
                          {
                            int v87 = *(unsigned __int8 *)(v7 + 1328);
                            if (v87)
                            {
                              if (qword_10027DD68) {
                                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s reseting user auto join due to restart", "WiFiManagerCreate")];
                              }
                              sub_100086500(v7, 1, 3, 0);
                            }
                            else
                            {
                              if (qword_10027DD68) {
                                [((id)qword_10027DD68) WFLog:3 message:@"%s user auto join needs reset" :@"WiFiManagerCreate"];
                              }
                              *(unsigned char *)(v7 + 2254) = 1;
                            }
                          }
                          *(_WORD *)(v7 + 2088) = 257;
                          *(CFAbsoluteTime *)(v7 + 2096) = CFAbsoluteTimeGetCurrent();
                          *(unsigned char *)(v7 + 2104) = 0;
                          *(unsigned char *)(v7 + 2105) = *(_DWORD *)(v7 + 112) == 7;
                          *(_WORD *)(v7 + 2176) = 0;
                          *(_WORD *)(v7 + 2202) = 1;
                          *(unsigned char *)(v7 + 2217) = 0;
                          *(void *)(v7 + 2152) = 0x40AC200000000000;
                          CFMutableDictionaryRef v89 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                          *(void *)(v7 + 2128) = v89;
                          if (v89)
                          {
                            *(void *)(v7 + 2136) = 0;
                            *(unsigned char *)(v7 + 2232) = 0;
                            *(void *)(v7 + 2240) = 0;
                            *(void *)(v7 + 440) = 0x4008000000000000;
                            *(void *)(v7 + 456) = 0x1400000002;
                            *(_DWORD *)(v7 + 464) = 2;
                            *(_OWORD *)(v7 + 380) = xmmword_1001CB480;
                            *(void *)(v7 + 396) = 0x1518000127500;
                            *(unsigned char *)(v7 + 2276) = 0;
                            *(void *)(v7 + 2280) = 0;
                            *(_WORD *)(v7 + 2288) = 0;
                            *(unsigned char *)(v7 + 2409) = 0;
                            *(unsigned char *)(v7 + 1232) = 1;
                            v92[0] = _NSConcreteStackBlock;
                            v92[1] = 3221225472;
                            v92[2] = sub_100086FDC;
                            v92[3] = &unk_10023EAF8;
                            v92[4] = v7;
                            dispatch_async((dispatch_queue_t)qword_10027DD88, v92);
                            *(void *)(v7 + 2416) = +[WiFiUsageMonitor sharedInstance];
                            sub_1000BF024((void *)(v7 + 1800), qword_10027DD88);
                            *(unsigned char *)(v7 + 2448) = 1;
                            *(_DWORD *)(v7 + 2452) = 1;
                            *(void *)(v7 + 2456) = 2;
                            *(unsigned char *)(v7 + 2464) = 0;
                            *(void *)(v7 + 2480) = 0;
                            *(void *)(v7 + 2488) = objc_alloc_init((Class)NSMutableArray);
                            *(void *)(v7 + 2496) = objc_alloc_init((Class)NSMutableDictionary);
                            *(void *)(v7 + 2520) = +[WiFiTelephonyClient sharedInstance];
                            *(void *)(v7 + 2528) = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                            *(_WORD *)(v7 + 2552) = 0;
                            CFRelease(v29);

                            if (qword_10027DD68) {
                              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: exiting", "WiFiManagerCreate")];
                            }
                            uint64_t v57 = @"%s: exiting";
                            goto LABEL_131;
                          }
                          goto LABEL_77;
                        }
                        if (qword_10027DD68) {
                          [((id)qword_10027DD68) WFLog:message:4, "%s: Error: failed to create sessionBasedAddAsync.disassocTimer", "WiFiManagerCreate"];
                        }
                      }
                      else
                      {
                        if (qword_10027DD68) {
                          [((id)qword_10027DD68) WFLog:message:4, "%s: Error: failed to create autojoinAssist timer", "WiFiManagerCreate"];
                        }
                      }
                    }
                    else
                    {
                      if (qword_10027DD68) {
                        [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: failed to create CarPlay timer" args:("WiFiManagerCreate",)];
                      }
                    }
                  }
                  else
                  {
                    if (qword_10027DD68) {
                      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: failed to create heartBeatTimer", "WiFiManagerCreate")
                    }
                  }
                }
                else
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: failed to create metricDelayedSubmissionTimer"];
                  }
                }
              }
              else
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: failed to create diagnostics timer" : @"WiFiManagerCreate"];
                }
              }
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:4, "%s: Error: failed to create disassociation timer", "WiFiManagerCreate"];
              }
            }
          }
          else
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: WiFiServerCreate failed" args:("WiFiManagerCreate")];
            }
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: failed to create backhaulLinkCheckTimer timer" args:("WiFiManagerCreate")];
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: failed to create privateMacScanDataCleanup timer"];
        }
      }
LABEL_76:
LABEL_77:
      CFRelease(v29);
      goto LABEL_78;
    }
    uint64_t v66 = (const void **)&kCFBooleanFalse;
    goto LABEL_99;
  }
LABEL_78:
  CFRelease((CFTypeRef)v7);
LABEL_79:

  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: exiting, Error: failed to create manager ref" : @"WiFiManagerCreate"];
  }
  uint64_t v7 = 0;
  uint64_t v57 = @"%s: exiting, Error: failed to create manager ref";
LABEL_131:
  NSLog(&v57->isa, "WiFiManagerCreate");
  return v7;
}

id sub_100081110(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1624) runAssetQuery];
}

void sub_10008111C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: notification %d", "__WiFiManagerPreferencesCallback", a2);
    }
    if ((a2 & 2) != 0)
    {
      sub_10005A1E0(*(const __SCPreferences **)(a3 + 1072));
      uint64_t v6 = sub_10000D990((uint64_t)"__WiFiManagerPreferencesCallback");
      if (sub_10000D934((void *)a3, @"DeviceUUID") || (CFUUIDRef v8 = CFUUIDCreate(kCFAllocatorDefault)) == 0)
      {
        int v7 = 0;
      }
      else
      {
        CFUUIDRef v9 = v8;
        CFStringRef v10 = CFUUIDCreateString(kCFAllocatorDefault, v8);
        if (v10)
        {
          CFStringRef v11 = v10;
          int v7 = 1;
          sub_100083E60((void *)a3, @"DeviceUUID", v10, 1);
          CFRelease(v11);
        }
        else
        {
          int v7 = 0;
        }
        CFRelease(v9);
      }
      sub_1000BAD9C((void *)a3, 1);
      *(unsigned char *)(a3 + 296) = sub_100023220((void *)a3, @"AllowDisassociation", 1);
      *(unsigned char *)(a3 + 313) = sub_100023220((void *)a3, @"alwaysScan", 0);
      *(_DWORD *)(a3 + 788) = sub_1000231B0((void *)a3, @"WakeMode", 1);
      BOOL v12 = sub_100023220((void *)a3, @"lpasEnable", 1);
      *(unsigned char *)(a3 + 312) = -1;
      CFMutableSetRef v13 = sub_10000D934((void *)a3, @"WAPIEnabled");
      int v86 = v13
         && (CFMutableSetRef v14 = v13, TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(v14))
         && CFEqual(v14, kCFBooleanTrue) != 0;
      if (!sub_10000D934((void *)a3, @"DiagnosticsEnabled"))
      {
        int v16 = sub_10007C9C0();
        CFMutableArrayRef v17 = (const void **)&kCFBooleanFalse;
        if (v16) {
          CFMutableArrayRef v17 = (const void **)&kCFBooleanTrue;
        }
        sub_100083E60((void *)a3, @"DiagnosticsEnabled", *v17, 1);
      }
      BOOL v18 = sub_100023220((void *)a3, @"EnableRangingLogDump", 0);
      BOOL v19 = sub_10008D060((void *)a3);
      BOOL v20 = sub_10007F814();
      int v21 = !v20;
      unsigned int v22 = sub_10000D934((void *)a3, kSCPropNetAirPortJoinMode);
      uint64_t v23 = (const void **)&kSCValNetAirPortJoinModeAutomatic;
      int v94 = v12;
      __int16 v90 = (void *)v6;
      BOOL v82 = v19;
      if (!v22)
      {
        BOOL v67 = !v20;
        if (!v20) {
          uint64_t v23 = (const void **)&kSCValNetAirPortJoinModePreferred;
        }
        int v25 = 1;
        sub_100083E60((void *)a3, kSCPropNetAirPortJoinMode, *v23, 1);
LABEL_34:
        unsigned int v27 = sub_1000231B0((void *)a3, @"Fallback Preference", 2);
        double v28 = sub_10008C5B4((void *)a3, @"DisassociationInterval", 1800.0);
        CFDictionaryRef v29 = sub_10009F9C4((void *)a3, 1);
        BOOL v73 = sub_100023220((void *)a3, @"mStageAutoJoin", 1);
        BOOL v76 = sub_100023220((void *)a3, @"DisableBlackList", byte_10027DDA8 != 0);
        BOOL v75 = sub_100023220((void *)a3, @"isWiFiPowerModificationDisabled", 0);
        BOOL v74 = sub_100023220((void *)a3, @"isPersonalHotspotModificationDisabled", 0);
        BOOL v65 = sub_100023220((void *)a3, @"ATJTestModeEnabled", 0);
        BOOL v81 = sub_100023220((void *)a3, @"OverrideWiFiFallBackPrefMode", 0);
        int v80 = sub_1000231B0((void *)a3, @"LinkQualityAssessmentMode", 1);
        BOOL v78 = sub_100023220((void *)a3, @"TrgDiscAskIfAppropriateDisconnect", 1);
        BOOL v77 = sub_100023220((void *)a3, @"EnableAggressiveTrgDisc", 1);
        CFArrayRef v30 = sub_10000D934((void *)a3, @"List of policies");
        BOOL v71 = sub_100023220((void *)a3, @"optimizedAutoJoin", 1);
        BOOL v70 = sub_100023220((void *)a3, @"Enable5GhzAutoJoinScan", 0);
        __int16 v69 = sub_10000D934((void *)a3, @"deviceUpdatedDate");
        BOOLeaint n = sub_10000D934((void *)a3, @"IsOrphanedSCCleanUpRequired");
        CFBooleanRef v88 = sub_10000D934((void *)a3, @"isWiFiPNLMigrationComplete");
        BOOL v31 = sub_100023220((void *)a3, @"ConnectionQualityLocalCollectionEnabled", 0);
        CFNumberRef v32 = sub_10000D934((void *)a3, @"JoinRecommendationMode");
        BOOL v97 = v18;
        CFDictionaryRef v96 = v29;
        BOOL v92 = v31;
        unsigned int v85 = v27;
        if (v32)
        {
          id v33 = v32;
          if (CFEqual(@"None", v32))
          {
            unsigned int v66 = 0;
            goto LABEL_42;
          }
          if (CFEqual(@"Captive", v33))
          {
            int v34 = 2;
LABEL_41:
            unsigned int v66 = v34;
LABEL_42:
            int v35 = v25 | v7;
            CFDictionaryRef cf = sub_10000D934((void *)a3, @"JoinRecommendationDisabledUntil");
            BOOL v89 = sub_100023220((void *)a3, @"ConnectionQualityPrivacyRestrictionsDisabled", 0);
            BOOL v93 = sub_100023220((void *)a3, @"WiFiMacRandomizationInternalUI", 1);
            BOOL v95 = sub_100023220((void *)a3, @"enableForceCarPlayMACRandomization", 0);
            *(unsigned char *)(a3 + 362) = sub_100023220((void *)a3, @"PrivateMacForcedDisassocPending", 0);
            CFIndex v36 = sub_10000D934((void *)a3, @"ATJTestNetworkSSID");
            unsigned int v37 = sub_1000231B0((void *)a3, @"ATJPreference", 1);
            uint64_t v38 = sub_1000231B0((void *)a3, @"Compatibility", 0);
            SInt32 v39 = 0;
            if (!byte_10027DDA8) {
              SInt32 v39 = (*(_DWORD *)(a3 + 112) - 1) < 3;
            }
            BOOL v84 = sub_100023220((void *)a3, @"AvailabilityEngineV2Enabled", v39);
            int v83 = sub_1000A7E70(a3);
            double v40 = sub_10008C5B4((void *)a3, @"AutoInstantHotspotTriggerInterval", 120.0);
            unsigned int v68 = sub_1000231B0((void *)a3, @"UserPreferenceJoinAlertMode", 1);
            uint64_t v41 = sub_1000231B0((void *)a3, @"JoinAlertDistanceThreshold", 7776000);
            double v42 = sub_10008C5B4((void *)a3, @"JoinAlertDistanceThreshold", 30000.0);
            unsigned int v43 = sub_100023220((void *)a3, @"DebugCoreCaptureEnabled", 1);
            unsigned int v87 = sub_100023220((void *)a3, @"CoreCaptureOnAssistedAJFailure", 0);
            CFDictionaryRef v91 = sub_1000A9590((void *)a3, 1);
            CFBooleanRef v44 = sub_10000D934((void *)a3, @"SessionBasedNetworkList");
            if (v44)
            {
              CFDictionaryRef v45 = v44;
              CFTypeID v46 = CFGetTypeID(v44);
              if (v46 == CFDictionaryGetTypeID())
              {
                CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v45);
LABEL_51:
                CFDictionaryRef v98 = Copy;
                goto LABEL_53;
              }
              CFTypeID v48 = CFGetTypeID(v45);
              if (v48 == CFSetGetTypeID())
              {
                CFDictionaryRef Copy = CFSetCreateCopy(kCFAllocatorDefault, v45);
                goto LABEL_51;
              }
              CFTypeID v49 = CFGetTypeID(v45);
              if (v49 == CFArrayGetTypeID())
              {
                CFDictionaryRef Copy = CFArrayCreateCopy(kCFAllocatorDefault, v45);
                goto LABEL_51;
              }
            }
            CFDictionaryRef v98 = 0;
LABEL_53:
            sub_100023220((void *)a3, @"StandALoneLPASTestModeEnabled", 0);
            BOOL v50 = sub_1000231B0((void *)a3, @"phBandPreference", 0) == 1;
            sub_10005A29C(*(SCPreferencesRef *)(a3 + 1072), v35);

            if (v30)
            {
              CFDictionaryRef v51 = sub_100032F78(v30);
              sub_1000A2934(a3, v51);
              if (v51) {
                CFRelease(v51);
              }
            }
            else
            {
              sub_1000A2934(a3, 0);
            }
            sub_100090164(a3, v73);
            sub_100090208(a3, v71, v70, v69);
            if (*(unsigned __int8 *)(a3 + 312) != v86)
            {
              *(unsigned char *)(a3 + 312) = v86;
              uint64_t context = a3;
              unint64_t context_8 = 0xAAAAAAAA0000001FLL;
              unint64_t v101 = 0;
              uint64_t v102 = 1;
              CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_100020954, &context);
            }
            if (*(unsigned char *)(a3 + 2404)) {
              unsigned int v52 = 0;
            }
            else {
              unsigned int v52 = v82;
            }
            if (*(unsigned char *)(a3 + 2404)) {
              CFStringRef v53 = @"LPEM";
            }
            else {
              CFStringRef v53 = 0;
            }
            sub_10008CB00(a3, v52, v53);
            sub_100092374(a3, v76);
            sub_1000A9350(a3, v75);
            sub_1000A94A0(a3, v74);
            if (sub_1000995D0(a3))
            {
              if (qword_10027DD68) {
                [qword_10027DD68 WFLog:message:3, "%s: Overwriting ATJ to false due to active restriction policy", "__WiFiManagerPreferencesCallback"];
              }
              int v55 = 0;
            }
            else
            {
              int v55 = v65;
            }
            sub_100092468(a3, v55, v36);
            sub_10008FE4C(a3, v37, 0);
            sub_10008FF98(a3, v38, 0);
            sub_10008F1F8(a3, v96);
            if (*(double *)(a3 + 928) != v28)
            {
              *(double *)(a3 + 928) = v28;
              sub_100091E50((void *)a3, @"DisassociationInterval", v28);
            }
            if (*(double *)(a3 + 1880) != 7.0)
            {
              *(void *)(a3 + 1880) = 0x401C000000000000;
              sub_100091E50((void *)a3, @"DiagnosticsInterval", 7.0);
            }
            sub_10008F368(a3, v67, 0);
            sub_100091D2C(a3, v85);
            sub_1000925CC(a3, v94);
            sub_1000A0D7C(a3, v80, v81, v78, v77);
            *(void *)(a3 + 280) = 0;
            *(void *)(a3 + 288) = 0;
            uint64_t context = a3;
            unint64_t context_8 = 0xAAAAAAAA00000024;
            unint64_t v101 = 0;
            uint64_t v102 = 1;
            CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_100020954, &context);
            sub_10008DF64(a3, v66, cf, 0);
            uint64_t context = a3;
            unint64_t context_8 = 0xAAAAAAAA00000063;
            unint64_t v101 = v68;
            uint64_t v102 = *(void *)&v42;
            double v103 = (double)v41;
            CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_100020954, &context);
            if (BOOLean)
            {
              if (CFBooleanGetValue(BOOLean))
              {
                int v56 = *(unsigned __int8 *)(a3 + 2008);
                if (v56)
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:3 message:@"%s: Already Scheduled"];
                  }
LABEL_79:
                  goto LABEL_87;
                }
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4 message:@"%s: Schedule"];
                }
                *(_WORD *)(a3 + 2008) = 1;
                [*(id *)(a3 + 2000) scheduleOrphanedSetsCleanUp];
              }
              else if (!*(unsigned char *)(a3 + 2009))
              {
                *(_WORD *)(a3 + 2008) = 256;
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4, @"%s: Unschedule", @"__WiFiManagerCheckSCCleanUpScheduling"];
                }
                [*(id *)(a3 + 2000) unScheduleOrphanedSetsCleanUp];
              }
LABEL_87:
              if (v88)
              {
                if (CFBooleanGetValue(v88))
                {
                  if (!*(unsigned char *)(a3 + 2011))
                  {
                    if (qword_10027DD68) {
                      [((id)qword_10027DD68) WFLog:4 message:@"%s: Unschedule" :"__WiFiManagerCheckPNLMigrationScheduling"];
                    }
                    *(_WORD *)(a3 + 2010) = 256;
                    [*(id *)(a3 + 2000) unSchedulePNLMigration];
                  }
                  goto LABEL_100;
                }
                int v60 = *(unsigned __int8 *)(a3 + 2010);
                if (!v60)
                {
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Schedule", "__WiFiManagerCheckPNLMigrationScheduling")
                  }
                  *(_WORD *)(a3 + 2010) = 1;
                  [*(id *)(a3 + 2000) schedulePNLMigration];
                  goto LABEL_100;
                }
                if (qword_10027DD68) {
                  [qword_10027DD68 WFLog:3 message:@"__WiFiManagerCheckPNLMigrationScheduling: Already Scheduled"];
                }
              }
              else
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:3, "%s: Null isWiFiPNLMigrationNeededRef", "__WiFiManagerCheckPNLMigrationScheduling"];
                }
              }
LABEL_100:
              sub_1000A64C4(a3, v92);
              sub_1000A6DD0(a3, v89);
              sub_1000A3218(a3, v84);
              LODWORD(v104[0]) = v83;
              uint64_t context = a3;
              unint64_t context_8 = 0xAAAAAAAA0000005BLL;
              unint64_t v101 = (unint64_t)v104;
              uint64_t v102 = 1;
              CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_100020954, &context);
              *(double *)uint64_t v104 = v40;
              uint64_t context = a3;
              unint64_t context_8 = 0xAAAAAAAA0000005DLL;
              unint64_t v101 = (unint64_t)v104;
              uint64_t v102 = 1;
              CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_100020954, &context);
              LOBYTE(v104[0]) = v43;
              if (*(unsigned __int8 *)(a3 + 2202) != v43)
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:3 message:@"%s: Debug CoreCapture %d" args:("__WiFiManagerSetDebugCoreCapture", v43)];
                }
                *(unsigned char *)(a3 + 2202) = v43;
                uint64_t context = a3;
                unint64_t context_8 = 0xAAAAAAAA00000067;
                unint64_t v101 = (unint64_t)v104;
                uint64_t v102 = 1;
                CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_100020954, &context);
              }
              LOBYTE(v104[0]) = v87;
              if (*(unsigned __int8 *)(a3 + 2203) != v87)
              {
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: CoreCapture On Assisted AJ Failure %d", "__WiFiManagerSetCoreCaptureOnAssistedAJFailure", v87);
                }
                *(unsigned char *)(a3 + 2203) = v87;
                uint64_t context = a3;
                unint64_t context_8 = 0xAAAAAAAA00000072;
                unint64_t v101 = (unint64_t)v104;
                uint64_t v102 = 1;
                CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_100020954, &context);
              }
              sub_1000A9674(a3, v93);
              if (*(unsigned char *)(a3 + 377) != v95)
              {
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WFMacRandomisation: Mac Randomisation CarPlay test mode toggled. Old state : %hhu, new state : %hhu", "__WiFiManagerSetMacRandomisationCarPlayTestMode", *(unsigned __int8 *)(a3 + 377), v95)];
                }
                *(unsigned char *)(a3 + 377) = v95;
              }
              sub_1000A59D4(a3, v91);
              sub_1000A55A0(a3, v98);
              if (v98) {
                CFRelease(v98);
              }
              LOBYTE(v104[0]) = v50;
              uint64_t context = a3;
              unint64_t context_8 = 0xAAAAAAAA00000077;
              unint64_t v101 = (unint64_t)v104;
              uint64_t v102 = 1;
              CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_100020954, &context);
              LOBYTE(v104[0]) = v97;
              uint64_t context = a3;
              unint64_t context_8 = 0xAAAAAAAA0000007BLL;
              unint64_t v101 = (unint64_t)v104;
              uint64_t v102 = 1;
              CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_100020954, &context);
              sub_1000ADD54();
              if (v96) {
                CFRelease(v96);
              }
              if (v91) {
                CFRelease(v91);
              }
              return;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3, @"%s: null isOrphanedSCCleanUpRequiredRef", @"__WiFiManagerCheckSCCleanUpScheduling"];
            }
            goto LABEL_79;
          }
          if (!CFEqual(@"Quality", v33))
          {
            if (CFEqual(@"Public", v33))
            {
              int v34 = 252;
            }
            else if (CFEqual(@"NewLocation", v33))
            {
              int v34 = 253;
            }
            else if (CFEqual(@"InfrequentNetwork", v33))
            {
              int v34 = 254;
            }
            else if (CFEqual(@"All", v33))
            {
              int v34 = 255;
            }
            else
            {
              int v34 = 1;
            }
            goto LABEL_41;
          }
        }
        int v34 = 1;
        goto LABEL_41;
      }
      id v24 = v22;
      if (CFEqual(kSCValNetAirPortJoinModeAutomatic, v22))
      {
        BOOL v67 = 0;
      }
      else
      {
        if (CFEqual(kSCValNetAirPortJoinModePreferred, v24))
        {
          int v26 = 1;
        }
        else if (CFEqual(kSCValNetAirPortJoinModeRecent, v24))
        {
          int v26 = 2;
        }
        else
        {
          if (!CFEqual(kSCValNetAirPortJoinModeStrongest, v24))
          {
            if (CFEqual(kSCValNetAirPortJoinModeRanked, v24)) {
              int v21 = 4;
            }
            BOOL v67 = v21;
            goto LABEL_33;
          }
          int v26 = 3;
        }
        BOOL v67 = v26;
      }
LABEL_33:
      int v25 = v7;
      goto LABEL_34;
    }
  }
}

void sub_100082194(const __SCPreferences *a1, char a2, uint64_t a3)
{
  if ((a2 & 2) == 0 || !a3) {
    return;
  }
  if (*(unsigned char *)(a3 + 2201))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: WiFi Power Modification disabled" :@"__WiFiManagerRadioPreferencesCallback"];
    }
    return;
  }
  SCPreferencesSynchronize(a1);
  CFPreferencesAppSynchronize(@"com.apple.preferences.network");
  CFBooleanRef Value = (const __CFBoolean *)SCPreferencesGetValue(a1, @"AirplaneMode");
  if (Value) {
    CFBooleanRef v7 = Value;
  }
  else {
    CFBooleanRef v7 = kCFBooleanFalse;
  }
  CFBooleanRef v8 = (const __CFBoolean *)CFPreferencesCopyAppValue(@"AirplaneModeEnabled", @"com.apple.preferences.network");
  if (v8) {
    CFBooleanRef v9 = v8;
  }
  else {
    CFBooleanRef v9 = kCFBooleanFalse;
  }
  CFBooleanRef v10 = (const __CFBoolean *)SCPreferencesGetValue(a1, @"LowPowerMode");
  if (v10) {
    CFBooleanRef v11 = v10;
  }
  else {
    CFBooleanRef v11 = kCFBooleanFalse;
  }
  CFBooleanRef v12 = (const __CFBoolean *)CFPreferencesCopyAppValue(@"LowPowerMode", @"com.apple.preferences.network");
  if (v12) {
    CFBooleanRef v13 = v12;
  }
  else {
    CFBooleanRef v13 = kCFBooleanFalse;
  }
  if (!CFEqual(v7, v9))
  {
    if (qword_10027DD68)
    {
      if (v7 == kCFBooleanTrue) {
        CFMutableSetRef v15 = "Enabled";
      }
      else {
        CFMutableSetRef v15 = "Disabled";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Airplane mode %s", v15);
    }
    CFPreferencesSetAppValue(@"AirplaneModeEnabled", v7, @"com.apple.preferences.network");
    [*(id *)(a3 + 2416) setCellularDataStatus:*(void *)(a3 + 1288) inAirplaneMode:sub_1000BA84C() != 0];
    if (CFEqual(v11, v13))
    {
LABEL_36:
      BOOL v18 = sub_100023220((void *)a3, @"KeepWiFiPoweredAirplaneMode", 0);
      BOOL v19 = sub_100023220((void *)a3, @"KeepWiFiPoweredAirplaneModeEnabled", 1);
      uint64_t v20 = *(unsigned int *)(a3 + 316);
      if (v7 != kCFBooleanTrue && v11 != kCFBooleanTrue)
      {
        uint64_t valuePtr = 0;
        CFDictionaryRef v21 = (const __CFDictionary *)CFPreferencesCopyAppValue(@"original-network-state", @"com.apple.preferences.network");
        CFDictionaryRef v22 = v21;
        if (v21 && (CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(v21, @"wifi-network")) != 0)
        {
          CFNumberGetValue(v23, kCFNumberCFIndexType, &valuePtr);
        }
        else
        {
          if (qword_10027DD68) {
            [qword_10027DD68 WFLog:message:3, "%s: original radio setting state missing. Assuming enabled.", "__WiFiManagerRadioPreferencesCallback"];
          }
          uint64_t valuePtr = 1;
        }
        if (v19)
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: airplane mode stickiness is enabled", "__WiFiManagerRadioPreferencesCallback")];
          }
          if (sub_100023220((void *)a3, @"KeepWiFiPoweredAirplaneMode", 0) != (v20 == 1))
          {
            if (qword_10027DD68)
            {
              id v33 = "OFF";
              if (v20 == 1) {
                id v33 = "ON";
              }
              [((id)qword_10027DD68) WFLog:message:3, "%s: setting airplane mode stickiness preference to %s", "__WiFiManagerRadioPreferencesCallback", v33];
            }
            sub_1000BAF00((void *)a3, v20 == 1);
          }
        }
        else
        {
          if (qword_10027DD68) {
            [qword_10027DD68 WFLog:message:3, "%s: airplane mode stickiness is disabled", "__WiFiManagerRadioPreferencesCallback"];
          }
        }
        if (valuePtr != v20)
        {
          int v35 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            CFIndex v36 = sub_10005A970(valuePtr);
            [v35 WFLog:3 message:@"WiFi previous state: %s current state: %s" v36 sub_10005A970(v20)];
          }
          if (valuePtr == 4 && !v20
            || (v20 != 4 ? (BOOL v37 = v20 == 0) : (BOOL v37 = 1),
                !v37 ? (int v38 = 0) : (int v38 = 1),
                valuePtr == 1 && v38))
          {
            sub_100091EE8(a3, valuePtr == 1, 0);
          }
        }
        sub_100086500(a3, 1, 8, 0);
        CFPreferencesSetAppValue(@"original-network-state", 0, @"com.apple.preferences.network");
        CFPreferencesAppSynchronize(@"com.apple.preferences.network");
        if (v22) {
          CFRelease(v22);
        }
        goto LABEL_90;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "WiFi current state: %s", sub_10005A970(v20));
      }
      int v25 = (__CFDictionary *)CFPreferencesCopyAppValue(@"original-network-state", @"com.apple.preferences.network");
      if (!v25)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (!Mutable)
        {
          CFPreferencesAppSynchronize(@"com.apple.preferences.network");
          if (!v18) {
            goto LABEL_85;
          }
          goto LABEL_49;
        }
        int v25 = Mutable;
        uint64_t valuePtr = v20;
        CFNumberRef v27 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
        if (v27)
        {
          CFNumberRef v28 = v27;
          CFDictionarySetValue(v25, @"wifi-network", v27);
          CFPreferencesSetAppValue(@"original-network-state", v25, @"com.apple.preferences.network");
          CFRelease(v28);
        }
        CFPreferencesAppSynchronize(@"com.apple.preferences.network");
      }
      CFRelease(v25);
      if (!v18) {
        goto LABEL_85;
      }
LABEL_49:
      if (!v19)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: User preference is to leave WiFi powered, but power stickiness is disabled.", "__WiFiManagerRadioPreferencesCallback");
        }
LABEL_89:
        sub_100091EE8(a3, 0, 0);
        goto LABEL_90;
      }
LABEL_85:
      if (v18)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: Leaving WiFi powered due to user preference" :@"__WiFiManagerRadioPreferencesCallback"];
        }
        goto LABEL_90;
      }
      goto LABEL_89;
    }
LABEL_30:
    if (qword_10027DD68)
    {
      if (v11 == kCFBooleanTrue) {
        CFMutableArrayRef v17 = "Enabled";
      }
      else {
        CFMutableArrayRef v17 = "Disabled";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Low Power Mode %s", v17);
    }
    CFPreferencesSetAppValue(@"LowPowerMode", v11, @"com.apple.preferences.network");
    goto LABEL_36;
  }
  if (!CFEqual(v11, v13)) {
    goto LABEL_30;
  }
LABEL_90:
  if (v13) {
    CFRelease(v13);
  }
  if (v9) {
    CFRelease(v9);
  }
}

void sub_100082844(uint64_t a1)
{
  if (a1)
  {
    CFArrayRef v2 = *(const __CFArray **)(a1 + 216);
    if (v2)
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 216));
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: network count %d", "__WiFiManagerCheckNetworkExpiry", Count];
      }
      if ((int)Count < 1)
      {
        double v6 = 0.0;
      }
      else
      {
        CFIndex v5 = 0;
        double v6 = 0.0;
        do
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
          if (ValueAtIndex)
          {
            CFBooleanRef v8 = ValueAtIndex;
            if (sub_1000C83C4((uint64_t)ValueAtIndex))
            {
              sub_1000C821C((uint64_t)v8);
              double v10 = v9;
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: network %@, Texpire %f", "__WiFiManagerCheckNetworkExpiry", sub_10001A43C(v8), *(void *)&v10 message];
              }
              if ((int)v10 <= 0)
              {
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "Network %@ has expired. Removing it from known networks list", sub_10001A43C(v8) message];
                }
                CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 1368), v8);
              }
              else if (v10 < v6 || v6 == 0.0)
              {
                double v6 = v10;
              }
            }
          }
          ++v5;
        }
        while (Count != v5);
      }
      double v14 = vabdd_f64(*(double *)(a1 + 1376) - CFAbsoluteTimeGetCurrent(), v6);
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: minTexpire %f, deltaTexpire %f", "__WiFiManagerCheckNetworkExpiry", *(void *)&v6, *(void *)&v14);
      }
      if (v6 == 0.0 || v14 <= 60.0)
      {
        if (!(int)v6 && *(double *)(a1 + 1344) != 0.0)
        {
          *(void *)(a1 + 1344) = 0;
          *(void *)(a1 + 1352) = 0;
          dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 1360), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
          CFNotificationCenterRemoveObserver(DarwinNotifyCenter, 0, @"SignificantTimeChangeNotification", 0);
        }
        StringWithdouble AbsoluteTime = 0;
      }
      else
      {
        double v16 = v6 + CFAbsoluteTimeGetCurrent();
        StringWithdouble AbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(0, (CFDateFormatterRef)qword_10027DDA0, v16);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: starting expiry timer:: set next fire date %@", "__WiFiManagerCheckNetworkExpiry", StringWithAbsoluteTime message];
        }
        BOOL v19 = *(NSObject **)(a1 + 1360);
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(v6 * 1000000000.0));
        dispatch_source_set_timer(v19, v20, 0xFFFFFFFFFFFFFFFFLL, 0);
        *(double *)(a1 + 1376) = v16;
        *(double *)(a1 + 1344) = v6;
        CFDictionaryRef v21 = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterAddObserver(v21, (const void *)a1, (CFNotificationCallback)nullsub_6, @"SignificantTimeChangeNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      }
      CFArrayRef v23 = *(const __CFArray **)(a1 + 1368);
      if (v23)
      {
        int v24 = CFArrayGetCount(v23);
        if (v24 >= 1)
        {
          CFIndex v25 = 0;
          uint64_t v26 = v24;
          do
          {
            CFNumberRef v27 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1368), v25);
            sub_10009A098(a1, v27, 27);
            sub_1000C94E0(v27);
            ++v25;
          }
          while (v26 != v25);
        }
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1368));
      }
      if (StringWithAbsoluteTime)
      {
        CFRelease(StringWithAbsoluteTime);
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null networks", @"__WiFiManagerCheckNetworkExpiry"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager" args:("__WiFiManagerCheckNetworkExpiry", NULL)];
    }
  }
}

void sub_100082C80(uint64_t a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3, @"%s: timed out", @"__WiFiManagerCarPlaySessionDownWaitTimerCallback"];
  }

  sub_1000B899C(a1);
}

void sub_100082CF8(uint64_t a1)
{
  id v3 = +[WiFiAccountStoreManager sharedWiFiAccountStoreManager];
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)(v4 + 2208) = v3;
  unsigned __int8 v5 = sub_100082DC8(v4);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  int v8[2] = sub_100082E58;
  void v8[3] = &unk_100240768;
  double v6 = *(NSObject **)(a1 + 32);
  void v8[4] = *(void *)(a1 + 40);
  unsigned __int8 v9 = v5;
  dispatch_async(v6, v8);
  CFBooleanRef v7 = *(void **)(*(void *)(a1 + 40) + 2208);
  if (v7) {
    [v7 registerCallback:sub_100082FA4];
  }
}

id sub_100082DC8(uint64_t a1)
{
  id v3 = *(void **)(a1 + 2208);
  if (v3)
  {
    id v4 = [v3 isManagedAppleID];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: Null accountStoreManager" args:("__WiFiManagerIsManagedAppleID")];
    }
    id v4 = 0;
  }
  return v4;
}

void sub_100082E58(uint64_t a1)
{
}

void sub_100082E6C(uint64_t a1, int a2, int a3)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: Null manager" : @"__WiFiManagerSetManagedAppleID"];
    }
    unsigned __int8 v9 = v8;
    goto LABEL_18;
  }
  if (*(unsigned __int8 *)(a1 + 2216) == a2)
  {
    if (qword_10027DD68)
    {
      CFBooleanRef v11 = "Managed";
      if (!a2) {
        CFBooleanRef v11 = "Non-Managed";
      }
      [((id)qword_10027DD68) WFLog:message:3, "%s: No change Current (%s Account)", "__WiFiManagerSetManagedAppleID", v11];
    }
    unsigned __int8 v9 = v10;
LABEL_18:
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 2216) = a2;
  if (a2)
  {
    int v7 = 0;
  }
  else
  {
    if (a3) {
      goto LABEL_7;
    }
    int v7 = 1;
  }
  sub_1000A7D80((_DWORD *)a1, v7, 0);
LABEL_7:
  char context = a2;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_1000BB90C, &context);
LABEL_8:
}

void sub_100082FA4(uint64_t a1, char a2)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager." arguments:("__WiFiManagerHandleAccountStoreChangesForManagedID", 0)];
    }
    goto LABEL_9;
  }
  unsigned __int8 v5 = *(NSObject **)(a1 + 32);
  if (!v5)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null queue." args:("__WiFiManagerHandleAccountStoreChangesForManagedID")];
    }
LABEL_9:
    goto LABEL_4;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000BB8F8;
  block[3] = &unk_100240768;
  void block[4] = a1;
  char v8 = a2;
  dispatch_async(v5, block);
LABEL_4:
}

uint64_t sub_1000830B8(uint64_t a1)
{
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x3052000000;
  v18[3] = sub_100022CD8;
  v18[4] = sub_100022BE8;
  v18[5] = 0;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: manager is NULL" : @"WiFiManagerGetKnownNetworksCache"];
    }
    goto LABEL_18;
  }
  if (!*(unsigned char *)(a1 + 1328))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: device not yet unlocked. Not fetching network list.", @"WiFiManagerGetKnownNetworksCache"];
    }
    goto LABEL_18;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + 224);
  if (v3 && CFArrayGetCount(v3))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Fetched %ld known networks from the cache", "WiFiManagerGetKnownNetworksCache", CFArrayGetCount(*(CFArrayRef *)(a1 + 224))];
    }
LABEL_18:
    goto LABEL_41;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A68D0;
  block[3] = &unk_100240920;
  void block[4] = v18;
  if (qword_10027D6E0 != -1) {
    dispatch_once(&qword_10027D6E0, block);
  }
  if (sub_1000233A8((void *)a1))
  {
    unsigned __int8 v5 = *(const void **)(a1 + 224);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 224) = 0;
    }
    double v6 = sub_10009DFC0([*(id *)(a1 + 1104) dictionaryRepresentation]);
    *(void *)(a1 + 224) = v6;
    if (v6 && CFArrayGetCount(v6) >= 1)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, @"%s: unified KVS returned %d networks", @"WiFiManagerGetKnownNetworksCache", CFArrayGetCount(*(CFArrayRef *)(a1 + 224))];
      }
    }
    else
    {
      if (qword_10027DD68)
      {
        if (*(void *)(a1 + 224)) {
          char v8 = "empty list";
        }
        else {
          char v8 = "nil";
        }
        [((id)qword_10027DD68) WFLog:message:3, "%s: unified KVS returned %s", "WiFiManagerGetKnownNetworksCache", v8];
      }
    }
  }
  else
  {
    SCPreferencesSynchronize(*(SCPreferencesRef *)(a1 + 1080));
    CFArrayRef v9 = sub_10000D934((void *)a1, @"List of known networks");
    double v10 = *(const void **)(a1 + 224);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 224) = 0;
    }
    CFBooleanRef v11 = sub_10005A4C4(v9);
    *(void *)(a1 + 224) = v11;
    if (v11 && CFArrayGetCount(v11) >= 1)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: legacy KVS returned %d networks", "WiFiManagerGetKnownNetworksCache", CFArrayGetCount(*(CFArrayRef *)(a1 + 224)));
      }
    }
    else
    {
      if (qword_10027DD68)
      {
        if (*(void *)(a1 + 224)) {
          CFBooleanRef v12 = "empty list";
        }
        else {
          CFBooleanRef v12 = "nil";
        }
        [((id)qword_10027DD68) WFLog:message:3, "%s: legacy KVS returned %s", "WiFiManagerGetKnownNetworksCache", v12];
      }
    }
  }
  if (*(void *)(a1 + 224))
  {
    *(CFAbsoluteTime *)(a1 + 232) = CFAbsoluteTimeGetCurrent();
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Fetched %ld known networks from the plist", "WiFiManagerGetKnownNetworksCache", CFArrayGetCount(*(CFArrayRef *)(a1 + 224)));
    }
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1000A6908;
    v16[3] = &unk_10023F220;
    void v16[4] = v18;
    v16[5] = a1;
    if (qword_10027D6E8 != -1) {
      dispatch_once(&qword_10027D6E8, v16);
    }
  }
LABEL_41:
  uint64_t v14 = *(void *)(a1 + 224);
  _Block_object_dispose(v18, 8);
  return v14;
}

void sub_100083518(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100083534(uint64_t a1, const __CFArray *a2)
{
  CFArrayRef v2 = a2;
  if (!a2) {
    goto LABEL_100;
  }
  CFArrayRef v4 = *(const __CFArray **)(a1 + 1608);
  if (v4)
  {
    CFIndex Count = CFArrayGetCount(v4);
    CFAllocatorRef v6 = kCFAllocatorDefault;
    if (Count)
    {
      uint64_t v7 = Count;
      CFMutableDictionaryRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
      if (v7 >= 1)
      {
        for (CFIndex i = 0; i != v7; ++i)
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1608), i);
          if (ValueAtIndex)
          {
            uint64_t v11 = (uint64_t)ValueAtIndex;
            if (sub_100032E54((uint64_t)ValueAtIndex) == 1)
            {
              CFBooleanRef v12 = sub_100032DDC(v11);
              CFSetAddValue(Mutable, v12);
            }
          }
        }
      }
      if (Mutable)
      {
        if (CFSetGetCount(Mutable) && CFArrayGetCount(v2))
        {
          MutableCFDictionaryRef Copy = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
          if (MutableCopy)
          {
            CFIndex v14 = CFArrayGetCount(v2);
            if (v14 >= 1)
            {
              CFIndex v15 = v14;
              for (CFIndex j = 0; j != v15; ++j)
              {
                CFMutableArrayRef v17 = CFArrayGetValueAtIndex(v2, j);
                if (v17)
                {
                  BOOL v18 = v17;
                  BOOL v19 = sub_10001E404((uint64_t)v17, @"PolicyUUID");
                  if (v19)
                  {
                    dispatch_time_t v20 = v19;
                    if (CFSetContainsValue(Mutable, v19))
                    {
                      if (!sub_1000CE714((uint64_t)v18))
                      {
                        if (qword_10027DD68) {
                          [(id)qword_10027DD68 WFLog:3, "%s: network %@ allowed. Restriction UUID %@", "__WiFiManagerCreateRestrictedList", sub_10001A43C(v18), v20 message];
                        }
                        CFArrayAppendValue(MutableCopy, v18);
                        CFAllocatorRef v6 = kCFAllocatorDefault;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v2);
        }
        CFRelease(Mutable);
        goto LABEL_29;
      }
    }
  }
  else
  {
    CFAllocatorRef v6 = kCFAllocatorDefault;
  }
  MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(v6, 0, v2);
LABEL_29:
  if (*(unsigned char *)(a1 + 312))
  {
    CFArrayRef v2 = MutableCopy;
  }
  else
  {
    CFArrayRef v2 = CFArrayCreateMutable(v6, 0, &kCFTypeArrayCallBacks);
    CFIndex v22 = CFArrayGetCount(MutableCopy);
    if (v22 >= 1 && v2)
    {
      CFIndex v23 = v22;
      for (CFIndex k = 0; k != v23; ++k)
      {
        CFIndex v25 = CFArrayGetValueAtIndex(MutableCopy, k);
        if (v25)
        {
          uint64_t v26 = v25;
          if (!sub_10001FC6C((BOOL)v25)) {
            CFArrayAppendValue(v2, v26);
          }
        }
      }
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
  CFNumberRef v27 = *(const void **)(a1 + 216);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(a1 + 216) = 0;
  }
  CFAllocatorRef allocator = v6;
  CFArrayRef theArray = CFArrayCreateMutable(v6, 0, &kCFTypeArrayCallBacks);
  CFIndex v28 = CFArrayGetCount(v2);
  CFDictionaryRef v29 = sub_10000D934((void *)a1, @"IsNewInstall");
  if (v28 >= 1)
  {
    CFBooleanRef v30 = v29;
    for (CFIndex m = 0; m != v28; ++m)
    {
      CFNumberRef v32 = (void *)CFArrayGetValueAtIndex(v2, m);
      if (v32)
      {
        id v33 = v32;
        if (*(unsigned char *)(a1 + 1560))
        {
          CFStringRef v34 = (const __CFString *)sub_10001A43C(v32);
          if ((_os_feature_enabled_impl() & 1) == 0)
          {
            if (v34)
            {
              CFStringRef v35 = *(const __CFString **)(a1 + 1568);
              if (v35)
              {
                if (CFEqual(v34, v35))
                {
                  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
                  CFDateRef v37 = CFDateCreate(allocator, Current);
                  if (v37)
                  {
                    CFDateRef v38 = v37;
                    sub_1000C995C(v33, 1, v37);
                    CFRelease(v38);
                  }
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: CompanionAssisted: adjusted autojoin date of network for ssid %@", "__WiFiManagerCopyAdjustedNetworks", sub_10001A43C(v33) message];
                  }
                }
              }
            }
          }
        }
        double v40 = sub_1000C99D8((uint64_t)v33, 1);
        BOOL v41 = sub_1000CE714((uint64_t)v33);
        if (sub_10001FC1C((uint64_t)v33)) {
          unsigned int v42 = sub_1000CE830(v33);
        }
        else {
          unsigned int v42 = 0;
        }
        unsigned int v43 = sub_10001E404((uint64_t)v33, @"DisableWiFiAutoJoinUntilFirstUserJoin");
        if (v30 != kCFBooleanFalse && !v40 && v41 && v42 && !v43)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: carrier network %@ can expose IMSI. Disabling until first join.", "__WiFiManagerCopyAdjustedNetworks", sub_10001A43C(v33) message];
          }
          sub_10001C6A4((uint64_t)v33, @"DisableWiFiAutoJoinUntilFirstUserJoin", kCFBooleanTrue);
        }
        if (sub_1000CE1A0((const __CFDictionary **)v33))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: %@ is infrequently joined public network, skipping.", "__WiFiManagerCopyAdjustedNetworks", sub_10001A43C(v33) message];
          }
        }
        else
        {
          CFArrayAppendValue(theArray, v33);
        }
      }
    }
  }
  *(void *)(a1 + 216) = theArray;
  sub_10008F008(a1);
  CFTypeID v46 = *(const void **)(a1 + 256);
  if (v46)
  {
    CFRelease(v46);
    *(void *)(a1 + 256) = 0;
  }
  CFDataRef v47 = CFArrayCreateMutable(allocator, 0, &kCFTypeArrayCallBacks);
  CFIndex v48 = CFArrayGetCount(v2);
  if (v48 < 1) {
    goto LABEL_87;
  }
  CFIndex v49 = v48;
  CFIndex v50 = 0;
  while (1)
  {
    CFDictionaryRef v51 = CFArrayGetValueAtIndex(v2, v50);
    if (!v51) {
      goto LABEL_86;
    }
    unsigned int v52 = v51;
    if (!*(unsigned char *)(a1 + 1504)) {
      break;
    }
    CFStringRef v53 = (const __CFString *)sub_10001E404((uint64_t)v51, @"CARPLAY_UUID");
    if (v53)
    {
      CFStringRef v54 = *(const __CFString **)(a1 + 1512);
      if (v54)
      {
        if (CFEqual(v53, v54))
        {
          CFArrayAppendValue(v47, v52);
          unsigned int v61 = v60;
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: CarPlay: found matching UUID %@ network for ssid %@", "__WiFiManagerCopyPriorityNetworks", *(void *)(a1 + 1512), sub_10001A43C(v52) message];
          }
          goto LABEL_107;
        }
      }
    }
LABEL_86:
    if (v49 == ++v50) {
      goto LABEL_87;
    }
  }
  if (!*(unsigned char *)(a1 + 1560)) {
    goto LABEL_86;
  }
  CFStringRef v55 = (const __CFString *)sub_10001A43C(v51);
  if (!v55) {
    goto LABEL_86;
  }
  CFStringRef v56 = *(const __CFString **)(a1 + 1568);
  if (!v56 || CFStringCompare(v55, v56, 0)) {
    goto LABEL_86;
  }
  CFArrayAppendValue(v47, v52);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: CompanionAssisted: found matching SSID network %@", "__WiFiManagerCopyPriorityNetworks", sub_10001A43C(v52), v62 message];
  }
LABEL_107:
LABEL_87:
  if (!CFArrayGetCount(v47))
  {
    if (*(unsigned char *)(a1 + 1504))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: no matching Carplay network found for UUID %@. Reverting to normal mode.", "__WiFiManagerCopyPriorityNetworks", *(void *)(a1 + 1512) message];
      }
      *(unsigned char *)(a1 + 1504) = 0;
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 1536), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      uint64_t context = a1;
      unint64_t v66 = 0xAAAAAA0000000042;
      unint64_t v67 = 0xAAAAAAAA00000000;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
      uint64_t v58 = *(const void **)(a1 + 1512);
      if (v58)
      {
        CFRelease(v58);
        *(void *)(a1 + 1512) = 0;
      }
    }
    else if (*(unsigned char *)(a1 + 1560))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: no matching autojoin assist network found for SSID %@. Reverting to normal mode. ###STOP_CAAJ", "__WiFiManagerCopyPriorityNetworks", *(void *)(a1 + 1568) message];
      }
      *(unsigned char *)(a1 + 1560) = 0;
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 1576), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      uint64_t context = *(void *)(a1 + 1568);
      unint64_t v66 = *(void *)(a1 + 1584);
      sub_10005724C((uint64_t)&context, 0);
    }
    if (v47)
    {
      CFRelease(v47);
      CFDataRef v47 = 0;
    }
  }
  *(void *)(a1 + 256) = v47;
LABEL_100:
  uint64_t context = a1;
  unint64_t v66 = 0xAAAAAAAA00000003;
  unint64_t v67 = 0;
  uint64_t v68 = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
  if (v2) {
    CFRelease(v2);
  }
}

void sub_100083D54(uint64_t a1)
{
  *(unsigned char *)(a1 + 360) = 0;
  if (sub_10000D934((void *)a1, @"IsNewInstall") == kCFBooleanFalse
    || (objc_msgSend(-[NSUserDefaults objectForKey:](+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"), "objectForKey:", @"PrivateMacListCloudRestoreSanitized"), "BOOLValue") & 1) != 0)
  {
    if (!*(unsigned char *)(a1 + 360))
    {
      *(unsigned char *)(a1 + 360) = 1;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s WFMacRandomisation : private MAC networks need to be sanitized due to device reboot [%hhu]", "WiFiManagerPrivateMacNetworksEvaluateSanitizeRequired", *(unsigned __int8 *)(a1 + 360));
      }
      goto LABEL_9;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 360) = 1;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s WFMacRandomisation : private MAC networks need to be sanitized due to iCloud restore on a new device [%hhu]", "WiFiManagerPrivateMacNetworksEvaluateSanitizeRequired", *(unsigned __int8 *)(a1 + 360));
  }
LABEL_9:
}

uint64_t sub_100083E60(void *a1, const __CFString *a2, const void *a3, int a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = (const __SCPreferences *)sub_10000D9F0(a1, a2);
  if (!v7) {
    return 0;
  }
  char v8 = v7;
  if (!a4)
  {
    if (sub_10005A1E0(v7))
    {
      CFArrayRef v9 = (void *)sub_10000D990((uint64_t)"__WiFiManagerSetProperty");
      goto LABEL_7;
    }
    return 0;
  }
  CFArrayRef v9 = 0;
LABEL_7:
  if (a3)
  {
    uint64_t v10 = SCPreferencesSetValue(v8, a2, a3);
  }
  else
  {
    if (!SCPreferencesGetValue(v8, a2))
    {
      uint64_t v11 = 1;
      if (a4) {
        return v11;
      }
      goto LABEL_17;
    }
    uint64_t v10 = SCPreferencesRemoveValue(v8, a2);
  }
  uint64_t v11 = v10;
  if (!v10)
  {
    CFBooleanRef v13 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      int v14 = SCError();
      [v13 WFLog:4, "SCPreferencesSetValue() %s key=%@ value=%@", SCErrorString(v14), a2, a3 message];
    }
    uint64_t v11 = 0;
  }
  if (!a4)
  {
LABEL_17:
    uint64_t v11 = sub_10005A29C(v8, v11);
  }
  return v11;
}

uint64_t sub_100083F8C(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: manager is NULL", "WiFiManagerGetPrivateMacNetworksCache", Count];
    }
    goto LABEL_20;
  }
  if (!*(unsigned char *)(a1 + 1328))
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: device not yet unlocked. Not fetching network list.", "WiFiManagerGetPrivateMacNetworksCache", Count);
    }
    goto LABEL_20;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + 352);
  if (v3 && CFArrayGetCount(v3))
  {
    uint64_t v5 = qword_10027DD68;
    if (qword_10027DD68)
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 352));
      CFAllocatorRef v6 = "%s:  WFMacRandomisation : Fetched %ld known networks from the cache";
LABEL_13:
      uint64_t v10 = (void *)v5;
LABEL_19:
      [v10 WFLog:3 message:v6 WiFiManagerGetPrivateMacNetworksCache Count];
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  SCPreferencesSynchronize(*(SCPreferencesRef *)(a1 + 1096));
  CFArrayRef v7 = sub_10000D934((void *)a1, @"List of scanned networks with private mac");
  char v8 = *(const void **)(a1 + 352);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 352) = 0;
  }
  if (v7)
  {
    CFArrayRef v9 = sub_10005A4C4(v7);
    *(void *)(a1 + 352) = v9;
    if (v9)
    {
      *(CFAbsoluteTime *)(a1 + 368) = CFAbsoluteTimeGetCurrent();
      uint64_t v5 = qword_10027DD68;
      if (qword_10027DD68)
      {
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 352));
        CFAllocatorRef v6 = "%s: WFMacRandomisation : Fetched %ld known networks from the plist";
        goto LABEL_13;
      }
LABEL_20:
    }
  }
  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    *(void *)(a1 + 352) = Mutable;
    if (Mutable)
    {
      uint64_t v10 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFAllocatorRef v6 = "%s: WFMacRandomisation : No networks present in plist. Create empty array";
        goto LABEL_19;
      }
      goto LABEL_20;
    }
  }
  if (*(unsigned char *)(a1 + 360))
  {
    CFArrayRef v12 = *(const __CFArray **)(a1 + 352);
    if (v12)
    {
      if (CFArrayGetCount(v12))
      {
        CFBooleanRef v13 = +[NSUserDefaults standardUserDefaults];
        BOOL v14 = sub_100023220((void *)a1, @"PrivateMacUpgradeHS20Networks", 0);
        CFArrayRef v15 = *(const __CFArray **)(a1 + 352);
        int v94 = v2;
        if (v15)
        {
          CFIndex v16 = CFArrayGetCount(v15);
          if (v16)
          {
            CFIndex v17 = v16;
            uint64_t context = v13;
            BOOL v91 = v14;
            if (v16 < 1)
            {
              int v92 = 0;
            }
            else
            {
              CFIndex v18 = 0;
              int v92 = 0;
              CFStringRef v19 = @"PrivateMacFutureMacAddress";
              CFIndex v97 = v16;
              do
              {
                CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 352), v18);
                if (ValueAtIndex)
                {
                  CFDictionaryRef v21 = ValueAtIndex;
                  CFIndex v22 = (__CFString *)v19;
                  CFDataRef v23 = (const __CFData *)sub_10001E404((uint64_t)ValueAtIndex, @"RotationKeyUsed");
                  CFDataRef v24 = *(const __CFData **)(a1 + 416);
                  CFDataRef v25 = *(const __CFData **)(a1 + 488);
                  CFStringRef v26 = (const __CFString *)sub_10001A43C(v21);
                  if (v23) {
                    CFDataRef v27 = v23;
                  }
                  else {
                    CFDataRef v27 = 0;
                  }
                  CFDataRef v28 = sub_1000D1978(v24, v27, v25, v26);
                  if (v28)
                  {
                    CFDictionaryRef v29 = (const __CFDictionary *)sub_10001E404((uint64_t)v21, @"PRIVATE_MAC_ADDRESS");
                    if (v29 && (CFDictionaryRef v30 = v29, TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(v30)))
                    {
                      CFBooleanRef Value = CFDictionaryGetValue(v30, @"PRIVATE_MAC_ADDRESS_TYPE");
                      CFDataRef v33 = (const __CFData *)CFDictionaryGetValue(v30, @"PRIVATE_MAC_ADDRESS_VALUE");
                      CFStringRef v34 = CFDictionaryGetValue(v30, @"PRIVATE_MAC_ADDRESS_IN_USE");
                      unsigned int v35 = sub_10001A6DC(v33);
                      if (Value)
                      {
                        if (v35)
                        {
                          CFIndex v36 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                          if (v33 && !sub_1000BD3F4(v33, v28))
                          {
                            sub_10001C6A4((uint64_t)v21, @"ResetCaptiveProbe", kCFBooleanTrue);
                            int v92 = 1;
                          }
                          else if (v34)
                          {
                            CFDictionarySetValue(v36, @"PRIVATE_MAC_ADDRESS_IN_USE", v34);
                            if (qword_10027DD68) {
                              [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation :%s: Sanitized network <%@> updated in use address %@", "__WiFiManagerSanitizePrivateMacNetworks", sub_10001A43C(v21), v34 message];
                            }
                          }
                          CFDictionarySetValue(v36, @"PRIVATE_MAC_ADDRESS_TYPE", Value);
                          CFDictionarySetValue(v36, @"PRIVATE_MAC_ADDRESS_VALUE", v28);
                          sub_10001C6A4((uint64_t)v21, @"PRIVATE_MAC_ADDRESS", v36);
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation :%s: Sanitized network <%@> to use static MAC [%@]", "__WiFiManagerSanitizePrivateMacNetworks", sub_10001A43C(v21), v28 message];
                          }
                        }
                        else
                        {
                          if (v33)
                          {
                            CFDataRef v39 = *(const __CFData **)(a1 + 488);
                            if (v39)
                            {
                              if (!sub_1000BD3F4(v33, v39))
                              {
                                sub_10001C6A4((uint64_t)v21, @"ResetCaptiveProbe", kCFBooleanTrue);
                                int v92 = 1;
                              }
                            }
                          }
                          CFIndex v36 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                          CFDictionarySetValue(v36, @"PRIVATE_MAC_ADDRESS_TYPE", Value);
                          CFDictionarySetValue(v36, @"PRIVATE_MAC_ADDRESS_VALUE", *(const void **)(a1 + 488));
                          sub_10001C6A4((uint64_t)v21, @"PRIVATE_MAC_ADDRESS", v36);
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation :%s: Sanitized network <%@> to make sure correct physical MAC is used", "__WiFiManagerSanitizePrivateMacNetworks", sub_10001A43C(v21), v88 message];
                          }
                        }
                        if (v36) {
                          CFRelease(v36);
                        }
                      }
                      CFStringRef v19 = v22;
                      if (sub_10001E404((uint64_t)v21, v22)) {
                        sub_10001C6A4((uint64_t)v21, v22, v28);
                      }
                    }
                    else
                    {
                      CFStringRef v19 = v22;
                    }
                    CFIndex v17 = v97;
                    CFRelease(v28);
                  }
                  else
                  {
                    if (qword_10027DD68) {
                      [((id)qword_10027DD68) WFLog:4 message:@"WFMacRandomisation :%s: Unable to generate a static MAC. Will fail sanitization" :@"__WiFiManagerSanitizePrivateMacNetworks"];
                    }
                    CFStringRef v19 = v22;
                    CFIndex v17 = v97;
                  }
                }
                ++v18;
              }
              while (v17 != v18);
            }
            sub_1000A69BC(a1, *(const __CFArray **)(a1 + 352));
            sub_1000A6B7C(a1, 1, 0);
            CFArrayRef v2 = v94;
            BOOL v14 = v91;
            CFBooleanRef v13 = context;
            int v41 = v92;
          }
          else
          {
            int v41 = 0;
          }
        }
        else
        {
          int v41 = 0;
        }
        *(unsigned char *)(a1 + 360) = 0;
        if (v13) {
          [(NSUserDefaults *)v13 setValue:&__kCFBooleanTrue forKey:@"PrivateMacListCloudRestoreSanitized"];
        }
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WFMacRandomisation : Sanitized Private Mac plist", "WiFiManagerGetPrivateMacNetworksCache")];
        }
        if (v41)
        {
          *(unsigned char *)(a1 + 362) = 1;
          sub_100083E60((void *)a1, @"PrivateMacForcedDisassocPending", kCFBooleanTrue, 0);
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:message:3, "%s: WFMacRandomisation : This private MAC sanitization is because of private MAC data migration from a different device", "WiFiManagerGetPrivateMacNetworksCache"];
          }
        }
        if (v14)
        {
          CFArrayRef v44 = *(const __CFArray **)(a1 + 352);
          if (v44)
          {
            CFIndex v45 = CFArrayGetCount(v44);
            if (v45 >= 1)
            {
              CFIndex v46 = v45;
              for (CFIndex i = 0; i != v46; ++i)
              {
                CFIndex v48 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 352), i);
                if (v48)
                {
                  uint64_t v49 = (uint64_t)v48;
                  if (sub_10001BB2C((BOOL)v48))
                  {
                    CFBooleanRef v50 = (CFBooleanRef)sub_10001E404(v49, @"NetworkAddedByProfile");
                    if (!v50 || v50 != kCFBooleanTrue)
                    {
                      unsigned int v52 = sub_10001961C((uint64_t)kCFAllocatorDefault, v49);
                      int v53 = sub_100095E1C(a1, v52, 9);
                      if (qword_10027DD68)
                      {
                        if (v53) {
                          CFStringRef v55 = "WFMacRandomisation :%s: upgraded child hs20 network <%@> to Rotation";
                        }
                        else {
                          CFStringRef v55 = "WFMacRandomisation :%s: failed to upgrade child hs20 network <%@> to Rotation";
                        }
                        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, v55, "__WiFiManagerUpgradeChildHS20PrivateMacNetworks", sub_10001A43C(v52));
                      }
                      int v56 = sub_100095E1C(a1, v52, 10);
                      if (qword_10027DD68)
                      {
                        if (v56) {
                          uint64_t v58 = "WFMacRandomisation :%s: upgraded child hs20 network <%@> to tri-state";
                        }
                        else {
                          uint64_t v58 = "WFMacRandomisation :%s: failed to upgrade child hs20 network <%@> to tri-state";
                        }
                        [((id)qword_10027DD68) WFLog:3 message:v58 @"__WiFiManagerUpgradeChildHS20PrivateMacNetworks" sub_10001A43C(v52)];
                      }
                      if (v52) {
                        CFRelease(v52);
                      }
                    }
                  }
                }
              }
            }
          }
          sub_10009317C((void *)a1, @"PrivateMacUpgradeHS20Networks", 0);
          CFArrayRef v2 = v94;
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 361))
  {
    CFArrayRef v59 = *(const __CFArray **)(a1 + 352);
    if (v59)
    {
      if (CFArrayGetCount(v59))
      {
        CFArrayRef v60 = *(const __CFArray **)(a1 + 352);
        if (v60)
        {
          CFIndex v61 = CFArrayGetCount(v60);
          if (v61)
          {
            uint64_t v62 = v61;
            BOOL v95 = v2;
            BOOL v93 = +[NSUserDefaults standardUserDefaults];
            uint64_t v63 = sub_1000830B8(a1);
            if (v62 >= 1)
            {
              CFArrayRef v64 = (const __CFArray *)v63;
              int v65 = 0;
              int v66 = 0;
              CFIndex v67 = 0;
              key = (void *)v62;
              do
              {
                uint64_t v68 = (const void **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 352), v67);
                if (v68)
                {
                  __int16 v69 = v68;
                  if (v64)
                  {
                    BOOL v70 = sub_10001A5A8(v64, v68);
                    if (v70)
                    {
                      uint64_t v71 = (uint64_t)v70;
                      if ((_os_feature_enabled_impl() & 1) != 0
                        || [(NSUserDefaults *)v93 BOOLForKey:@"PrivateMACAirplayNetworkEnabled"])
                      {
                        int v66 = sub_10001E954(v71);
                      }
                      if (sub_1000D2230(v71)) {
                        int v65 = 1;
                      }
                    }
                  }
                  if (v66 | v65)
                  {
                    CFArrayRef v72 = v64;
                    CFDataRef v73 = *(const __CFData **)(a1 + 416);
                    CFDataRef v74 = *(const __CFData **)(a1 + 488);
                    CFStringRef v75 = (const __CFString *)sub_10001A43C(v69);
                    CFDataRef v76 = sub_1000D1BF0(v73, v74, v75);
                    CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                    CFDictionaryRef v77 = (const __CFDictionary *)sub_10001E404((uint64_t)v69, @"PRIVATE_MAC_ADDRESS");
                    if (v77)
                    {
                      CFDictionaryRef v78 = v77;
                      CFTypeID v79 = CFDictionaryGetTypeID();
                      if (v79 == CFGetTypeID(v78))
                      {
                        CFNumberRef v80 = (const __CFNumber *)CFDictionaryGetValue(v78, @"PRIVATE_MAC_ADDRESS_TYPE");
                        if (v80)
                        {
                          CFNumberRef v81 = v80;
                          if (sub_10001C140(v80) == 2)
                          {
                            BOOL v82 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                            CFDictionarySetValue(v82, @"PRIVATE_MAC_ADDRESS_TYPE", v81);
                            CFDictionarySetValue(v82, @"PRIVATE_MAC_ADDRESS_VALUE", v76);
                            sub_10001C6A4((uint64_t)v69, @"PRIVATE_MAC_ADDRESS", v82);
                            if (qword_10027DD68)
                            {
                              contexta = v83;
                              [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation :%s: Temp network <%@> gets new mac address: %@", "__WiFiManagerPrivateMacUpdateTempNetworks", sub_10001A43C(v69), v76 message];
                              int v83 = contexta;
                            }
                            if (v82) {
                              CFRelease(v82);
                            }
                            if (sub_10001E404((uint64_t)v69, @"PrivateMacFutureMacAddress")) {
                              sub_10001C6A4((uint64_t)v69, @"PrivateMacFutureMacAddress", v76);
                            }
                            sub_10001C6A4((uint64_t)v69, @"ResetCaptiveProbe", kCFBooleanTrue);
                          }
                        }
                      }
                    }
                    CFArrayRef v64 = v72;
                    if (v76) {
                      CFRelease(v76);
                    }
                    uint64_t v62 = (uint64_t)key;
                  }
                  else
                  {
                    int v66 = 0;
                    int v65 = 0;
                  }
                }
                ++v67;
              }
              while (v62 != v67);
            }
            sub_1000A69BC(a1, *(const __CFArray **)(a1 + 352));
            sub_1000A6B7C(a1, 1, 0);
            CFArrayRef v2 = v95;
          }
        }
        *(unsigned char *)(a1 + 361) = 0;
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WFMacRandomisation : Temp networks updated with new MAC address", "WiFiManagerGetPrivateMacNetworksCache")];
        }
      }
    }
  }
  uint64_t v85 = *(void *)(a1 + 352);
  return v85;
}

void sub_100084BB4(uint64_t a1)
{
  if (a1)
  {
    v1[0] = a1;
    v1[1] = 0xAAAAAAAA0000006ELL;
    v1[2] = 0;
    v1[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v1);
  }
}

void sub_100084C0C(uint64_t a1)
{
  double v2 = *(double *)(a1 + 504);
  double Current = CFAbsoluteTimeGetCurrent();
  double v4 = CFAbsoluteTimeGetCurrent();
  CFDateRef v5 = CFDateCreate(kCFAllocatorDefault, v4);
  CFAllocatorRef v6 = +[NSUserDefaults standardUserDefaults];
  if (_os_feature_enabled_impl()) {
    unsigned int v109 = 1;
  }
  else {
    unsigned int v109 = [(NSUserDefaults *)v6 BOOLForKey:@"PrivateMACAirplayNetworkEnabled"];
  }
  char v103 = _os_feature_enabled_impl();
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  bytes[0] = v7;
  bytes[1] = v7;
  if (v5)
  {
    char v8 = sub_10000D934((void *)a1, @"RotationKeyDateMacRandomisation");
    CFDateRef v9 = v8;
    double AbsoluteTime = 0.0;
    if (v8)
    {
      CFTypeID v11 = CFGetTypeID(v8);
      if (v11 == CFDateGetTypeID()) {
        double AbsoluteTime = CFDateGetAbsoluteTime(v9);
      }
    }
    double v12 = CFDateGetAbsoluteTime(v5);
    if (v12 > 0.0 && AbsoluteTime > 0.0 && v12 - AbsoluteTime >= (double)*(int *)(a1 + 392))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : rotation Key being updated. Last generated time : <%@>", "__WiFiManagerPrivateMacProcessRotationKey", v9 message];
      }
      if (SecRandomCopyBytes(kSecRandomDefault, 0x20uLL, bytes))
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: Failed to generate rotation Key for mac randomisation", "__WiFiManagerPrivateMacProcessRotationKey", v98);
        }
      }
      else
      {
        CFArrayRef v15 = *(const void **)(a1 + 408);
        if (v15)
        {
          CFRelease(v15);
          *(void *)(a1 + 408) = 0;
        }
        CFDataRef v16 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)bytes, 32);
        *(void *)(a1 + 408) = v16;
        sub_100083E60((void *)a1, @"RotationKeyMacRandomisation", v16, 0);
        sub_100083E60((void *)a1, @"RotationKeyDateMacRandomisation", v5, 0);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : rotation : new rotation key  : %@", "__WiFiManagerPrivateMacProcessRotationKey", *(void *)(a1 + 408) message];
        }
      }
    }
  }
  if (*(void *)(a1 + 352)
    && (CFArrayRef v17 = (const __CFArray *)sub_100083F8C(a1)) != 0
    && (CFArrayRef theArray = v17, (v111 = CFArrayGetCount(v17)) != 0))
  {
    CFArrayRef v108 = (const __CFArray *)sub_1000830B8(a1);
    CFIndex v18 = sub_1000A2050((const __CFArray *)a1);
    double v19 = CFAbsoluteTimeGetCurrent();
    CFDateRef v104 = v5;
    CFDateRef cf = CFDateCreate(kCFAllocatorDefault, v19);
    uint64_t v107 = a1;
    uint64_t v102 = v18;
    BOOL v100 = *(unsigned char *)(a1 + 528)
        && [+[WiFiUserInteractionMonitor sharedInstance] isSetupCompleted];
    CFArrayRef v20 = theArray;
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v22 = Count;
      for (CFIndex i = 0; v22 != i; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v20, i);
        if (ValueAtIndex)
        {
          CFDataRef v25 = ValueAtIndex;
          CFTypeID v26 = CFGetTypeID(ValueAtIndex);
          if (v26 == sub_1000C5C14())
          {
            if (*(unsigned char *)(v107 + 376))
            {
              CFDataRef v27 = sub_10001A43C(v25);
              CFBooleanRef v28 = (const __CFBoolean *)sub_10001E404((uint64_t)v25, @"MacAddressRandomisationTagMigratedNetwork");
              CFBooleanRef v29 = (const __CFBoolean *)sub_10001E404((uint64_t)v25, @"NetworkUsedForSWUpgrade");
              if (v28)
              {
                if (v28 == kCFBooleanTrue)
                {
                  CFBooleanRef v30 = v29;
                  CFDateRef v31 = (const __CFDate *)sub_10001E404((uint64_t)v25, @"PrivateMacJoinDateAfterUpgrade");
                  if (v31)
                  {
                    CFDateRef v32 = v31;
                    CFNumberRef v33 = sub_1000C6FC0((uint64_t)v25, @"MacAddressRandomisationClassificationAttempts");
                    if (!v33)
                    {
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Migrated Network <%@> ran out of assoc attempts", "__WiFiManagerPrivateMacProcessMigratedNetworks", v27 message];
                      }
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Migrated Network <%@> no more tagged as migrated ", "__WiFiManagerPrivateMacProcessMigratedNetworks", v27 message];
                      }
                      sub_10001C6A4((uint64_t)v25, @"MacAddressRandomisationTagMigratedNetwork", 0);
                      sub_10001C6A4((uint64_t)v25, @"MacAddressRandomisationClassificationAttempts", 0);
                      sub_10001C6A4((uint64_t)v25, @"PrivateMacClassifyInterval", 0);
                      sub_10001C6A4((uint64_t)v25, @"PrivateMacJoinDateAfterUpgrade", 0);
                      continue;
                    }
                    CFDictionaryRef v34 = (const __CFDictionary *)sub_10001E404((uint64_t)v25, @"PRIVATE_MAC_ADDRESS");
                    if (v34 && (CFDictionaryRef v35 = v34, TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(v35)))
                    {
                      CFNumberRef v37 = sub_1000C6FC0((uint64_t)v25, @"PrivateMacClassifyInterval");
                      double v38 = CFDateGetAbsoluteTime(v32);
                      if (sub_10001E404((uint64_t)v25, @"PrivateMacFutureMacAddress")) {
                        continue;
                      }
                      unint64_t v39 = 86400;
                      if (v37) {
                        unint64_t v39 = (unint64_t)v37;
                      }
                      if (v19 - v38 <= (double)v39)
                      {
                        BOOL v40 = v100;
                        if (!v30) {
                          BOOL v40 = 0;
                        }
                        if (!v40 || v30 != kCFBooleanTrue) {
                          continue;
                        }
                      }
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Classification : Elapsed an Interval or early attempt for setup network. Generating private MAC. Migrated Network <%@> associated at : <%@> after upgrading. Num assoc attempts pending = <%d>", "__WiFiManagerPrivateMacProcessMigratedNetworks", v27, v32, v33 message];
                      }
                      CFDataRef v42 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)(v107 + 480), 6);
                      CFDataRef v44 = *(const __CFData **)(v107 + 408);
                      CFDataRef v43 = *(const __CFData **)(v107 + 416);
                      CFStringRef v45 = (const __CFString *)sub_10001A43C(v25);
                      CFDataRef v46 = sub_1000D1978(v43, v44, v42, v45);
                      sub_10001C6A4((uint64_t)v25, @"RotationKeyUsed", *(const void **)(v107 + 408));
                      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v35);
                      CFNumberRef v48 = sub_10005B0B8(1);
                      CFDictionarySetValue(MutableCopy, @"PRIVATE_MAC_ADDRESS_TYPE", v48);
                      if (v48) {
                        CFRelease(v48);
                      }
                      sub_10001C6A4((uint64_t)v25, @"PrivateMacFutureMacAddress", v46);
                      sub_10001C6A4((uint64_t)v25, @"NetworkUsedForSWUpgrade", 0);
                      if (v46) {
                        CFRelease(v46);
                      }
                      CFArrayRef v20 = theArray;
                      if (v42) {
                        CFRelease(v42);
                      }
                      sub_10001C6A4((uint64_t)v25, @"PRIVATE_MAC_ADDRESS", MutableCopy);
                      if (MutableCopy) {
                        CFRelease(MutableCopy);
                      }
                      sub_10001C6A4((uint64_t)v25, @"MacGenerationTimeStamp", cf);
                      sub_10001C6A4((uint64_t)v25, @"ResetCaptiveProbe", kCFBooleanTrue);
                      sub_10001C6A4((uint64_t)v25, @"NoAssociationWithNewMac", kCFBooleanTrue);
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Migrated Network <%@> retrying private mac address", "__WiFiManagerPrivateMacProcessMigratedNetworks", v27, v99 message];
                      }
                    }
                    else
                    {
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Migrated Network <%@> associated at : <%@> after upgrading. Private Mac Dict not present", "__WiFiManagerPrivateMacProcessMigratedNetworks", v27, v32 message];
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v111 >= 1)
    {
      int v106 = 0;
      unsigned int v52 = 0;
      CFIndex v53 = 0;
      while (1)
      {
        CFStringRef v54 = (const void **)CFArrayGetValueAtIndex(v20, v53);
        if (!v54 || (v55 = v54, CFTypeID v56 = CFGetTypeID(v54), v56 != sub_1000C5C14()))
        {
          CFDateRef v5 = v104;
          BOOL v93 = v102;
          goto LABEL_145;
        }
        if (v108) {
          unsigned int v52 = sub_10001A5A8(v108, v55);
        }
        CFDateRef v57 = (const __CFDate *)sub_10001E404((uint64_t)v55, @"LinkDownTimestamp");
        CFDateRef v58 = (const __CFDate *)sub_10001E404((uint64_t)v55, @"lastUpdated");
        CFBooleanRef v59 = (const __CFBoolean *)sub_10001E404((uint64_t)v55, @"MacAddressRandomisationTagMigratedNetwork");
        CFArrayRef v60 = sub_10001E404((uint64_t)v55, @"BlockRotation");
        CFBooleanRef v61 = (const __CFBoolean *)sub_10001E404((uint64_t)v55, @"PresentInKnownNetworks");
        if (v109) {
          int v106 = sub_10001E954((uint64_t)v52);
        }
        BOOL v62 = sub_1000D2230((uint64_t)v52);
        if (v57)
        {
          double v63 = v4 - CFDateGetAbsoluteTime(v57);
          if (!v61) {
            goto LABEL_98;
          }
        }
        else
        {
          double v63 = 0.0;
          if (!v61) {
            goto LABEL_98;
          }
        }
        if (v61 != kCFBooleanTrue)
        {
LABEL_98:
          if (v58)
          {
            CFArrayRef v20 = theArray;
            if (v4 - CFDateGetAbsoluteTime(v58) > (double)*(int *)(v107 + 380))
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : Removing a scanned network <%@> from cache", sub_10001A43C(v55) message];
              }
              CFArrayRemoveValueAtIndex(theArray, v53);
              CFIndex v111 = CFArrayGetCount(theArray);
              --v53;
            }
            goto LABEL_130;
          }
LABEL_103:
          CFArrayRef v20 = theArray;
          goto LABEL_130;
        }
        CFBooleanRef v64 = (const __CFBoolean *)sub_10001E404((uint64_t)v55, @"NoAssociationWithNewMac");
        if (v59 == kCFBooleanTrue && v59 != 0) {
          goto LABEL_103;
        }
        CFArrayRef v20 = theArray;
        if (!v64 || v64 == kCFBooleanTrue || v60 || v64 != kCFBooleanFalse) {
          goto LABEL_130;
        }
        CFDateRef v66 = (const __CFDate *)sub_10001E404((uint64_t)v55, @"FirstJoinWithNewMacTimestamp");
        double v67 = CFDateGetAbsoluteTime(v66);
        CFDictionaryRef v68 = (const __CFDictionary *)sub_10001E404((uint64_t)v55, @"PRIVATE_MAC_ADDRESS");
        CFDataRef v69 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)(v107 + 480), 6);
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v68, @"PRIVATE_MAC_ADDRESS_TYPE");
        unsigned int v71 = sub_10001C140(Value);
        if (!(v106 | v62) || v71 != 2) {
          break;
        }
        if (v63 < (double)*(int *)(v107 + 400))
        {
          if (v4 - CFDateGetAbsoluteTime(v66) < (double)(7 * *(_DWORD *)(v107 + 392))) {
            goto LABEL_128;
          }
          CFDataRef v72 = *(const __CFData **)(v107 + 416);
          CFStringRef v73 = (const __CFString *)sub_10001A43C(v55);
          CFDataRef v74 = sub_1000D1BF0(v72, v69, v73);
          sub_10001C6A4((uint64_t)v55, @"RotationKeyUsed", 0);
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : public airplay/Accessory network <%@> gets new macaddress", "__WiFiManagerPrivateMacScanDataCleanupTimerCallback", sub_10001A43C(v55) message];
          }
          goto LABEL_117;
        }
        CFDataRef v81 = *(const __CFData **)(v107 + 416);
        CFStringRef v82 = (const __CFString *)sub_10001A43C(v55);
        CFDataRef v101 = sub_1000D1BF0(v81, v69, v82);
        sub_10001C6A4((uint64_t)v55, @"RotationKeyUsed", 0);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : public airplay/Accessory network <%@> gets new macaddress after inactive [%d] period", "__WiFiManagerPrivateMacScanDataCleanupTimerCallback", sub_10001A43C(v55), *(unsigned int *)(v107 + 400) message];
        }
        if (&_CNForgetSSID)
        {
          CFStringRef v84 = sub_10001F928(v52);
          sub_10009BD74(v84);
          CFDataRef v74 = v101;
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : forgetSSID called for network <%@>", sub_10001A43C(v52), v98 message];
          }
          goto LABEL_117;
        }
        CFDataRef v74 = v101;
        if (!v101) {
          goto LABEL_126;
        }
LABEL_120:
        if (!v68)
        {
LABEL_126:
          if (!v74) {
            goto LABEL_128;
          }
          goto LABEL_127;
        }
        CFMutableDictionaryRef v88 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v68);
        sub_10001C6A4((uint64_t)v55, @"PrivateMacFutureMacAddress", v74);
        sub_10001C6A4((uint64_t)v55, @"PRIVATE_MAC_ADDRESS", v88);
        if (v88) {
          CFRelease(v88);
        }
        sub_10001C6A4((uint64_t)v55, @"MacGenerationTimeStamp", v104);
        sub_10001C6A4((uint64_t)v55, @"ResetCaptiveProbe", kCFBooleanTrue);
        sub_10001C6A4((uint64_t)v55, @"NoAssociationWithNewMac", kCFBooleanTrue);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : rotation Mac Address rotated for network <%@> at <%@> New address : <%@>", "__WiFiManagerPrivateMacScanDataCleanupTimerCallback", sub_10001A43C(v55), v104, v74 message];
        }
        unsigned int v90 = sub_1000C6FC0((uint64_t)v55, @"TotalRotationsThisBuild");
        sub_10001A610((uint64_t)v55, @"TotalRotationsThisBuild", v90 + 1);
LABEL_127:
        CFRelease(v74);
LABEL_128:
        if (v69) {
          goto LABEL_129;
        }
LABEL_130:
        if (++v53 >= v111) {
          goto LABEL_136;
        }
      }
      double v77 = (double)*(int *)(v107 + 396);
      if (v103)
      {
        if (v4 - v67 < v77) {
          goto LABEL_128;
        }
        if (v71 != 2)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Mac address rotation for network <%@> not allowed.", "__WiFiManagerPrivateMacScanDataCleanupTimerCallback", sub_10001A43C(v55) message];
          }
          if (!v69) {
            goto LABEL_130;
          }
LABEL_129:
          CFRelease(v69);
          goto LABEL_130;
        }
        CFDataRef v79 = *(const __CFData **)(v107 + 408);
        CFDataRef v78 = *(const __CFData **)(v107 + 416);
        CFStringRef v80 = (const __CFString *)sub_10001A43C(v55);
        CFDataRef v74 = sub_1000D1978(v78, v79, v69, v80);
        sub_10001C6A4((uint64_t)v55, @"RotationKeyUsed", *(const void **)(v107 + 408));
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : network <%@> gets new macaddress", "__WiFiManagerPrivateMacScanDataCleanupTimerCallback", sub_10001A43C(v55) message];
        }
      }
      else
      {
        if (v63 < v77) {
          goto LABEL_128;
        }
        CFDataRef v86 = *(const __CFData **)(v107 + 408);
        CFDataRef v85 = *(const __CFData **)(v107 + 416);
        CFStringRef v87 = (const __CFString *)sub_10001A43C(v55);
        CFDataRef v74 = sub_1000D1978(v85, v86, v69, v87);
        sub_10001C6A4((uint64_t)v55, @"RotationKeyUsed", *(const void **)(v107 + 408));
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Inactive network <%@> gets new macaddress", "__WiFiManagerPrivateMacScanDataCleanupTimerCallback", sub_10001A43C(v55) message];
        }
      }
LABEL_117:
      if (!v74) {
        goto LABEL_126;
      }
      goto LABEL_120;
    }
LABEL_136:
    double v92 = v2 + Current;
    CFDateRef v5 = v104;
    BOOL v93 = v102;
    if (sub_1000A69BC(v107, v20) && !sub_1000A6B7C(v107, 1, 0))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : Scheduled cleanup complete but unable to flush private mac networks to cache %@", v104 message];
      }
    }
    CFDateRef v95 = CFDateCreate(kCFAllocatorDefault, v92);
    if (v95)
    {
      CFDateRef v96 = v95;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : Private Mac scan database cleanup complete. Next scheduled cleanup check at %@", v96 message];
      }
      CFRelease(v96);
    }
  }
  else
  {
    BOOL v93 = 0;
  }
LABEL_145:
  if (v5) {
    CFRelease(v5);
  }
  if (v93) {
    CFRelease(v93);
  }
}

void sub_100085B58(uint64_t a1)
{
  CFArrayRef v3 = *(const void **)(a1 + 472);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 472) = 0;
  }
  double v4 = sub_1000A2050((const __CFArray *)a1);
  *(void *)(a1 + 472) = v4;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2020000000;
  char v16 = 0;
  if (v4)
  {
    BOOL v5 = sub_1000C74BC((uint64_t)v4);
    CFAllocatorRef v6 = *(const void **)(a1 + 472);
    if (v6)
    {
      if (*(void *)(a1 + 448))
      {
        CFStringRef v7 = (const __CFString *)sub_10001A43C(v6);
        if (CFEqual(v7, *(CFStringRef *)(a1 + 448)) && !v5)
        {
          char v8 = +[NSURL URLWithString:@"https://captive.apple.com"];
          if (v8)
          {
            CFDateRef v9 = +[NSURLRequest requestWithURL:v8 cachePolicy:1 timeoutInterval:1.6];
            if (v9)
            {
              uint64_t v10 = *(NSURLSession **)(a1 + 520);
              if (v10) {
                goto LABEL_13;
              }
              CFTypeID v11 = +[NSURLSessionConfiguration ephemeralSessionConfiguration];
              double v12 = v11;
              if (v11)
              {
                [(NSURLSessionConfiguration *)v11 setRequestCachePolicy:1];
                [(NSURLSessionConfiguration *)v12 setTimeoutIntervalForRequest:1.6];
                [(NSURLSessionConfiguration *)v12 setTimeoutIntervalForResource:1.6];
                [(NSURLSessionConfiguration *)v12 setHTTPMaximumConnectionsPerHost:1];
                [(NSURLSessionConfiguration *)v12 setAllowsCellularAccess:0];
                uint64_t v10 = +[NSURLSession sessionWithConfiguration:v12];
                *(void *)(a1 + 520) = v10;
                if (v10)
                {
LABEL_13:
                  v14[0] = _NSConcreteStackBlock;
                  v14[1] = 3221225472;
                  v14[2] = sub_1000BD2E8;
                  v14[3] = &unk_100240CD8;
                  v14[4] = v15;
                  void v14[5] = a1;
                  [(NSURLSessionDataTask *)[(NSURLSession *)v10 dataTaskWithRequest:v9 completionHandler:v14] resume];
                  [*(id *)(a1 + 520) resetWithCompletionHandler:&stru_100240CF8];
                }
              }
            }
          }
        }
      }
    }
  }
  CFBooleanRef v13 = *(const void **)(a1 + 448);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 448) = 0;
  }
  _Block_object_dispose(v15, 8);
}

void sub_100085D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100085D68(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 952) == 2)
  {
    uint64_t context = a1;
    unint64_t v7 = 0xAAAAAAAA00000030;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
    if ((_BYTE)v9 || sub_1000913EC(a1))
    {
      CFArrayRef v3 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        uint64_t context = a1;
        unint64_t v7 = 0xAAAAAAAA00000030;
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
        if ((_BYTE)v9) {
          double v4 = "WoW";
        }
        else {
          double v4 = "LPAS";
        }
        [v3 WFLog:3 message:@"%s Enabled, Skip Disassocation", v4];
      }
      *(_DWORD *)(a1 + 952) = 0;
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Disassociation timer fired.  Disassociating."];
      }
      *(_DWORD *)(a1 + 952) = 3;
      sub_100003D18(a1, 0);
      sub_100086F2C(a1, "__WiFiManagerDisassociationTimerCallback", 12797);
    }
  }
}

void sub_100085EC0(uint64_t a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Diagnostics timer fired. Diagnosing."];
  }
  if (*(uint64_t *)(a1 + 1888) >= 1)
  {
    CFArrayRef v3 = *(NSObject **)(a1 + 1872);
    dispatch_time_t v4 = dispatch_time(0, (uint64_t)(*(double *)(a1 + 1880) * 1000000000.0));
    dispatch_source_set_timer(v3, v4, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  v5[0] = a1;
  v5[1] = 0xAAAAAAAA00000015;
  v5[2] = 0;
  v5[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v5);
}

void sub_100085F8C(uint64_t a1)
{
  if (a1)
  {
    if (objc_opt_class())
    {
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472;
      CFTypeRef v4[2] = sub_100009128;
      v4[3] = &unk_100240B40;
      v4[4] = a1;
      *(void *)(a1 + 1936) = [objc_alloc((Class)FBSDisplayLayoutMonitor) initWithDisplayType:0 handler:v4];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: manager is Null!", "__WiFiManagerTrackFrontBoardDisplayState"];
    }
  }
}

void sub_100086080(uint64_t a1)
{
  kdebug_trace();
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, @"%s: did not connect to Carplay network. Reverting to regular mode", @"__WiFiManagerCarplayTimeout"];
  }

  sub_1000A1C68(a1, 0, 0);
}

void sub_10008611C(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: did not connect to companion network in time. Reverting to regular mode, companion RSSI %d, Channel %d", "__WiFiManagerCompanionAssistedAJTimeout", *(unsigned int *)(a1 + 1584), *(unsigned int *)(a1 + 1588));
  }
  v11[0] = *(void *)(a1 + 1568);
  v11[1] = *(void *)(a1 + 1584);
  sub_10005724C((uint64_t)v11, 0);
  if (*(unsigned char *)(a1 + 2203))
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000032;
    void context[2] = 0;
    uint64_t v13 = 0;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    int v3 = *(_DWORD *)(a1 + 1584);
    if ((_BYTE)v13)
    {
      if (v3 <= -56) {
        goto LABEL_23;
      }
    }
    else if (v3 < -55 || *(int *)(a1 + 1588) > 14)
    {
      goto LABEL_23;
    }
    CFArrayRef v4 = sub_10000500C((CFArrayRef)a1);
    CFArrayRef v5 = v4;
    if (v4 && CFArrayGetCount(v4))
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
      if (ValueAtIndex)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, @"%s: Gizmo didn't join Companion's network, triggering CoreCapture", @"__WiFiManagerCompanionAssistedAJTimeout"];
        }
        sub_100121ED8((uint64_t)ValueAtIndex, @"TriggerCoreCapture");
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: device manager is null" : @"__WiFiManagerCompanionAssistedAJTimeout"];
        }
      }
LABEL_22:
      CFRelease(v5);
      goto LABEL_23;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: invalid device managers info", "__WiFiManagerCompanionAssistedAJTimeout")];
    }
    if (v5) {
      goto LABEL_22;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: corecaptureOnAssistedAJFailure not enabled", @"__WiFiManagerCompanionAssistedAJTimeout"];
    }
  }
LABEL_23:
  if (*(unsigned char *)(a1 + 2104) == 1)
  {
    sub_100003D18(a1, 1);
  }
  else
  {
    *(unsigned char *)(a1 + 1560) = 0;
    sub_1000A18BC(a1, 0, 0);
    uint64_t v9 = *(const void **)(a1 + 1568);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 1568) = 0;
    }
    sub_10008111C((uint64_t)v9, 2, a1);
    sub_1000830B8(a1);
    sub_100083534(a1, *(const __CFArray **)(a1 + 224));
  }
}

void sub_10008639C(const void **a1)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: disassociation timer fired" : @"__WiFiManagerSessionBasedDisassociationTimerCallback"];
  }
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager is null" args:v9];
    }
    goto LABEL_12;
  }
  int v3 = a1[207];
  if (!v3)
  {
    uint64_t v8 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_12;
    }
    unint64_t v7 = "%s: session based network is null";
    goto LABEL_11;
  }
  int v4 = sub_100094718((const __CFArray *)a1, v3);
  uint64_t v6 = qword_10027DD68;
  if (!v4)
  {
    if (!qword_10027DD68)
    {
LABEL_12:
      goto LABEL_13;
    }
    uint64_t v9 = sub_10001A43C(a1[207]);
    unint64_t v7 = "%s: no longer associated to %@, not disassociating";
    uint64_t v8 = (void *)v6;
LABEL_11:
    [v8 WFLog:3 message:v7 "__WiFiManagerSessionBasedDisassociationTimerCallback" v9];
    goto LABEL_12;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: diassociating to %@ application is no longer active", "__WiFiManagerSessionBasedDisassociationTimerCallback", sub_10001A43C(a1[207]) message];
  }
  sub_100086F2C((uint64_t)a1, "__WiFiManagerSessionBasedDisassociationTimerCallback", 16781);
LABEL_13:

  sub_1000B7E88((uint64_t)a1);
}

void sub_100086500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int valuePtr = a3;
  uint64_t v9 = sub_1000A2050((const __CFArray *)a1);
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: wifiManagerRef is NULL!", @"WiFiManagerSetUserAutoJoinState"];
    }
    goto LABEL_52;
  }
  unsigned int v61 = 0;
  int v10 = *(unsigned __int8 *)(a1 + 1954);
  if (v10 == a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: current state is already %d", "WiFiManagerSetUserAutoJoinState", a2);
    }
    unsigned int v12 = a3 - 1;
    BOOL v14 = a3 == 8 || v12 < 3;
    if (a2 && v14)
    {
      if (qword_10027DD68)
      {
        if (v12 > 7) {
          CFStringRef v16 = @"Unknown";
        }
        else {
          CFStringRef v16 = off_100240D18[v12];
        }
        [(id)qword_10027DD68 WFLog:3, "%s: checking for networks disabled due to trigger %@ (%d)", "WiFiManagerSetUserAutoJoinState", v16, a3 message];
      }
      sub_10008F008(a1);
      sub_10008FAFC(a1, 1u);
      goto LABEL_109;
    }
    if (a2 || !v9) {
      goto LABEL_109;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: state is disabled while connected to network %@", "WiFiManagerSetUserAutoJoinState", v9 message];
    }
    sub_100086F2C(a1, "WiFiManagerSetUserAutoJoinState", 22834);
LABEL_49:
    if (sub_100023220((void *)a1, @"UserAutoJoinAutomaticEnablingDisabled", 0))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: automatic re-enabling is disabled", "WiFiManagerSetUserAutoJoinState"];
      }
LABEL_52:
      goto LABEL_109;
    }
    if ([*(id *)(a1 + 1696) isAuthorized])
    {
      id v28 = [*(id *)(a1 + 1696) latestLocation];
      unsigned int v29 = +[WiFiLocationManager isLocationValid:v28 uptoSeconds:1 isHighAccuracy:60.0];
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: location update %@ isValid %d", "WiFiManagerSetUserAutoJoinState", v28, v29 != 0 message];
      }
      if (v29)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: disabled location for user auto join", "WiFiManagerSetUserAutoJoinState"];
        }
        *(void *)(a1 + 1960) = [v28 copy];
        *(_WORD *)(a1 + 1952) = 0;
        CFDateRef v32 = +[NSKeyedArchiver archivedDataWithRootObject:v28];
        if (v32)
        {
          CFNumberRef v33 = v32;
          sub_100083E60((void *)a1, @"UserAutoJoinDisabledLoc", v32, 0);
          sub_100083E60((void *)a1, @"UserAutoJoinLocationMetric", v33, 0);
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: failed to create archive of location", "WiFiManagerSetUserAutoJoinState")];
          }
        }
      }
      else
      {
        unsigned int v61 = 1;
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: requesting high accuracy location", "WiFiManagerSetUserAutoJoinState")];
        }
        *(unsigned char *)(a1 + 1952) = 1;
        [*(id *)(a1 + 1696) requestHighAccuracyLocationUpdate];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: wifi not authroized for location services", "WiFiManagerSetUserAutoJoinState")];
      }
      *(unsigned char *)(a1 + 1953) = 1;
      unsigned int v61 = 2;
    }
    id v37 = objc_alloc_init((Class)NSDate);
    double v38 = sub_10005AA28((uint64_t)v37, 5, 0, 0);
    sub_100083E60((void *)a1, @"UserAutoJoinDisableTimestamp", v38, 0);
    unint64_t v39 = *(const void **)(a1 + 1968);
    if (v39) {
      CFRelease(v39);
    }
    *(void *)(a1 + 1968) = v38;
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: date to enable user auto join: %@", "WiFiManagerSetUserAutoJoinState", v38 message];
    }
    if (!v9) {
      goto LABEL_107;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: connected to %@, disabling network from auto join until %@", "WiFiManagerSetUserAutoJoinState", sub_10001A43C(v9), v38 message];
    }
    CFArrayRef v42 = *(const __CFArray **)(a1 + 216);
    if (v42)
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 216));
      if (Count)
      {
        CFIndex v44 = Count;
        CFTypeID v45 = CFGetTypeID(v9);
        if (v45 == sub_1000C5C14())
        {
          v70.CFIndex location = 0;
          v70.CFIndex length = v44;
          FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v42, v70, v9);
          if (FirstIndexOfValue != -1)
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 216), FirstIndexOfValue);
            if (sub_10001EBB4((uint64_t)ValueAtIndex))
            {
              id v58 = v37;
              CFBooleanRef v59 = v8;
              sub_1000C977C((uint64_t)v9, v38);
              sub_1000C984C((CFMutableDictionaryRef *)v9, 0, @"UserAutoJoin");
              sub_10009B1AC(a1, v9, 1u);
              CFArrayRef v48 = *(const __CFArray **)(a1 + 224);
              CFIndex v49 = CFArrayGetCount(v48);
              if (v49 >= 1)
              {
                CFIndex v50 = v49;
                for (CFIndex i = 0; i != v50; ++i)
                {
                  unsigned int v52 = (CFMutableDictionaryRef *)CFArrayGetValueAtIndex(v48, i);
                  unsigned int v53 = sub_1000C6B08((uint64_t)v52);
                  unsigned int v54 = sub_1000CF14C((uint64_t)v52);
                  if (sub_10001E404((uint64_t)v52, @"WiFiNetworkAttributeIsPublic")
                    && ([v9 isEqual:v52] & 1) == 0
                    && !sub_1000C8A5C((uint64_t)v52)
                    && v53 != 1
                    && v54 != 1)
                  {
                    if (qword_10027DD68) {
                      [(id)qword_10027DD68 WFLog:3, "%s: disabling network %@ from auto join until %@", "WiFiManagerSetUserAutoJoinState", v52, v38 message];
                    }
                    sub_1000C977C((uint64_t)v52, v38);
                    sub_1000C984C(v52, 0, @"UserAutoJoin");
                    sub_10009B1AC(a1, v52, 1u);
                  }
                }
              }
              sub_10008F008(a1);
              id v37 = v58;
              uint64_t v8 = v59;
              goto LABEL_107;
            }
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:@"%s network has auto join disabled, skipping disabled until date" message:3];
            }
LABEL_106:
LABEL_107:
            if (v37) {
              CFRelease(v37);
            }
            goto LABEL_109;
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: invalid network ref"];
          }
        }
      }
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"%s: couldn't find matching known network", @"WiFiManagerSetUserAutoJoinState"];
    }
    goto LABEL_106;
  }
  if (qword_10027DD68)
  {
    if ((a3 + 1) > 9) {
      CFStringRef v17 = @"Unknown";
    }
    else {
      CFStringRef v17 = off_100240D58[(int)a3 + 1];
    }
    [(id)qword_10027DD68 WFLog:3, "%s: user auto join state %d trigger %@ (%d)", "WiFiManagerSetUserAutoJoinState", a2, v17, a3 message];
  }
  if (a4)
  {
    if (*(void *)(a1 + 2056))
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
      if (CTGreenTeaOsLogHandle)
      {
        CFArrayRef v20 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          CFDictionaryRef v21 = "yes";
          *(_DWORD *)buuint64_t f = 138413314;
          *(void *)&uint8_t buf[4] = a4;
          *(void *)&buf[14] = "com.apple.wifi.manager";
          *(_WORD *)&buf[12] = 2080;
          if (!a2) {
            CFDictionaryRef v21 = "no";
          }
          __int16 v64 = 2080;
          int v65 = "wifid";
          __int16 v66 = 2080;
          double v67 = "WiFiManagerSetUserAutoJoinState";
          __int16 v68 = 2080;
          CFDataRef v69 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "<%@>[%s][%s]:[%s]WLAN enabled..%s", buf, 0x34u);
        }
      }
    }
  }
  CFIndex v22 = (const void **)&kCFBooleanFalse;
  if (a2) {
    CFIndex v22 = (const void **)&kCFBooleanTrue;
  }
  sub_100083E60((void *)a1, @"UserAutoJoinState", *v22, 0);
  *(unsigned char *)(a1 + 1954) = a2;
  context[0] = a1;
  context[1] = 0xAAAAAAAA00000047;
  void context[2] = &valuePtr;
  void context[3] = &v61;
  void context[4] = a2;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(Mutable, @"trigger", v24);
  *(void *)buuint64_t f = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&buf[8] = Mutable;
  buf[0] = a2;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_1000BCA74, buf);
  [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager")] sendUserAutoJoinStateDidChangeEvent];
  if (v24) {
    CFRelease(v24);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (!a2) {
    goto LABEL_49;
  }
  sub_1000231B0((void *)a1, @"UserAutoJoinLocStateMetric", v61);
  if (![*(id *)(a1 + 1696) isAuthorized]) {
    unsigned int v61 = 2;
  }
  *(_WORD *)(a1 + 1952) = 0;
  CFDataRef v25 = *(const void **)(a1 + 1960);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(a1 + 1960) = 0;
  }
  CFTypeID v26 = *(const void **)(a1 + 1968);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a1 + 1968) = 0;
  }
  sub_100083E60((void *)a1, @"UserAutoJoinDisableTimestamp", 0, 0);
  sub_100083E60((void *)a1, @"UserAutoJoinDisabledLoc", 0, 0);
  if (valuePtr != 4) {
    sub_10008FAFC(a1, 1u);
  }
  sub_1000231B0((void *)a1, @"UserAutoJoinSecurityTypeMetric", 0);
LABEL_109:
  if (v9) {
    CFRelease(v9);
  }
}

void sub_100086F2C(uint64_t a1, const char *a2, uint64_t a3)
{
  if (qword_10027DD68)
  {
    unint64_t v7 = "";
    if (a2) {
      unint64_t v7 = a2;
    }
    [((id)qword_10027DD68) WFLog:3 message:@"asked to Disassociate by <%s:%d> \n", v7, a3];
  }
  context[0] = a1;
  context[1] = 0xAAAAAAAA0000000ELL;
  void context[2] = 0;
  void context[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
}

void sub_100086FDC(uint64_t a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Posting hardware failure status in WiFiManagerCreate"];
  }
  int v3 = *(void **)(a1 + 32);

  sub_100087040(v3);
}

void sub_100087040(void *a1)
{
  unsigned int v1 = sub_1000917B4(a1);
  if (objc_opt_class())
  {
    id v2 = objc_alloc_init((Class)SystemHealthManager);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100091844;
    v3[3] = &unk_100240890;
    unsigned int v4 = v1;
    [v2 postComponentStatusEventFor:3 status:v1 withReply:v3];
    if (v2) {
      CFRelease(v2);
    }
  }
}

uint64_t sub_1000870EC(uint64_t a1, int a2)
{
  int v11 = a2;
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, "%s: entering", "WiFiManagerOpen"];
  }
  if (a1)
  {
    unsigned __int8 v5 = 1;
    if (!*(unsigned char *)(a1 + 16))
    {
      *(unsigned char *)(a1 + 16) = 1;
      *(_DWORD *)(a1 + 20) = a2;
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000000;
      void context[2] = &v11;
      uint64_t v10 = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
      uint64_t v6 = *(void *)(a1 + 32);
      if (v6) {
        sub_100087434(a1, v6);
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: exiting", @"WiFiManagerOpen"];
      }
      return v10;
    }
  }
  else
  {
    return 0;
  }
  return v5;
}

void sub_100087434(uint64_t a1, uint64_t a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: entering" :@"WiFiManagerScheduleWithQueue"];
  }
  if (a1)
  {
    *(void *)(a1 + 32) = a2;
    sub_10005A1D4(a2);
    if (*(unsigned char *)(a1 + 16))
    {
      [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") setWiFiManager:a1];
      [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") activate];
      [*(id *)(a1 + 1104) activate];
      sub_1000830B8(a1);
      sub_100083534(a1, *(const __CFArray **)(a1 + 224));
      *(unsigned char *)(a1 + 88) = sub_1000DE654(*(void *)(a1 + 80), a2);
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WFMacRandomisation : DEBUG buddy completed check is done. result is : <%hhu>", "WiFiManagerScheduleWithQueue", -[WiFiUserInteractionMonitor isSetupCompleted](+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance"), "isSetupCompleted"));
      }
      if ([+[WiFiUserInteractionMonitor sharedInstance] isSetupCompleted]&& !*(unsigned char *)(a1 + 528)&& MKBUserUnlockedSinceBoot() == 1)
      {
        *(unsigned char *)(a1 + 528) = 1;
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WFMacRandomisation : kWiFiPrivateMacFirstUnlockAfterSWUpgrade is : <%hhu>", "WiFiManagerScheduleWithQueue", *(unsigned __int8 *)(a1 + 528));
        }
      }
      [*(id *)(a1 + 1696) registerCallbackFunctionPtr:sub_1000890F4 withContext:a1];
      if (*(_DWORD *)(a1 + 112) != 7)
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000892CC;
        block[3] = &unk_10023EAF8;
        void block[4] = a1;
        dispatch_async((dispatch_queue_t)qword_10027DD88, block);
      }
      [+[WiFiManagerAnalytics sharedInstance] setWiFiManagerQueue:*(void *)(a1 + 32)];
      [+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") setWiFiManager:a1];
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)a1, (CFNotificationCallback)sub_100089968, @"com.apple.mobile.keybagd.lock_status", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      sub_100089AB0(a1);
      if (objc_opt_class())
      {
        uint64_t v9 = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterAddObserver(v9, (const void *)a1, (CFNotificationCallback)sub_100089C40, FAFamilyUpdateNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      }
      if (MKBUserUnlockedSinceBoot())
      {
        int v10 = MKBGetDeviceLockState();
        sub_100089CC4(a1, v10 == 1, 1);
        if (v10 != 1) {
          sub_100184E50(*(void **)(a1 + 1432));
        }
      }
      else
      {
        sub_100089CC4(a1, 1, 1);
      }
      sub_10007C404((void *)a1);
      unsigned int v12 = *(NSObject **)(a1 + 32);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_10008A478;
      handler[3] = &unk_1002407B0;
      handler[4] = a1;
      notify_register_dispatch("com.apple.MCX._managementStatusChangedForDomains", (int *)(a1 + 904), v12, handler);
      sub_100167874();
      uint64_t v13 = *(NSObject **)(a1 + 32);
      v84[0] = _NSConcreteStackBlock;
      v84[1] = 3221225472;
      v84[2] = sub_10008A488;
      v84[3] = &unk_1002407B0;
      v84[4] = a1;
      notify_register_dispatch("com.apple.iokit.hid.displayStatus", (int *)(a1 + 856), v13, v84);
      sub_10008A49C(a1, 1);
      BOOL v14 = *(NSObject **)(a1 + 32);
      v83[0] = _NSConcreteStackBlock;
      v83[1] = 3221225472;
      v83[2] = sub_10008A76C;
      v83[3] = &unk_1002407B0;
      v83[4] = a1;
      notify_register_dispatch("com.apple.symptoms.celloutrankrecommendation", (int *)(a1 + 2304), v14, v83);
      if (!notify_is_valid_token(*(_DWORD *)(a1 + 2304)))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4 message:"Failed to notify_register_dispatch com.apple.symptoms.celloutrankrecommendation"];
        }
      }
      sub_10008A778(a1, 1);
      CFStringRef v17 = [[WiFiBatteryManager alloc] initWithContext:a1];
      *(void *)(a1 + 2312) = v17;
      if (qword_10027DD68)
      {
        if (v17) {
          double v19 = "%s: WiFiBatteryMgmt batteryManager alloced and inited ";
        }
        else {
          double v19 = "%s: WiFiBatteryMgmt No Battery Power Manager support from CoreOS. WiFi will default to full throttle.";
        }
        [((id)qword_10027DD68) WFLog:3 message:v19];
      }
      context.versioint n = 0;
      memset(&context.retain, 0, 24);
      context.info = (void *)a1;
      SCDynamicStoreRef v20 = SCDynamicStoreCreate(kCFAllocatorDefault, @"WiFiManager", (SCDynamicStoreCallBack)sub_1000AFCD0, &context);
      *(void *)(a1 + 72) = v20;
      if (v20)
      {
        sub_1000AFF7C(a1);
        if (SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 72), *(dispatch_queue_t *)(a1 + 32)))
        {
          if (SCDynamicStoreSetDisconnectCallBack())
          {
            sub_1000AFCD0(*(const __SCDynamicStore **)(a1 + 72), 0, (const __CFArray *)a1);
            if (!*(void *)(a1 + 960))
            {
              IONotificationPortRef v21 = IONotificationPortCreate(dword_10027D6D0);
              *(void *)(a1 + 960) = v21;
              if (!v21)
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4, @"%s: Error: IONotificationPortCreate failed", @"WiFiManagerScheduleWithQueue", v71];
                }
                goto LABEL_142;
              }
              CFIndex v22 = v21;
              CFDictionaryRef v23 = (const __CFDictionary *)CFRetain(&off_100264020);
              if (IOServiceAddMatchingNotification(v22, "IOServiceMatched", v23, (IOServiceMatchingCallback)sub_10008A904, (void *)a1, (io_iterator_t *)(a1 + 968)))
              {
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Error: IOServiceAddMatchingNotification IO80211SkywalkInterface failed", "WiFiManagerScheduleWithQueue", v71);
                }
                goto LABEL_142;
              }
              sub_10008A904(a1, *(_DWORD *)(a1 + 968));
              CFNumberRef v24 = *(IONotificationPort **)(a1 + 960);
              CFDictionaryRef v25 = IOServiceMatching("IOPMPowerSource");
              if (IOServiceAddMatchingNotification(v24, "IOServiceFirstMatch", v25, (IOServiceMatchingCallback)sub_10008A9F0, (void *)a1, (io_iterator_t *)(a1 + 976)))
              {
                if (qword_10027DD68) {
                  [[(id)qword_10027DD68 WFLog:message:4, "%s: Error: IOServiceAddMatchingNotification IOPMPowerSource failed", "WiFiManagerScheduleWithQueue", v71];
                }
                goto LABEL_142;
              }
              sub_10008A9F0(a1, *(_DWORD *)(a1 + 976));
              if (sub_10008AA98(a1))
              {
                CFTypeID v26 = *(IONotificationPort **)(a1 + 960);
                CFDictionaryRef v27 = IOServiceMatching("IOUSBDevice");
                uint64_t v28 = IOServiceAddMatchingNotification(v26, "IOServiceFirstPublish", v27, (IOServiceMatchingCallback)sub_10008AB0C, (void *)a1, (io_iterator_t *)(a1 + 1000));
                if (v28
                  || (sub_10008AB0C(a1, *(_DWORD *)(a1 + 1000)),
                      unsigned int v29 = *(IONotificationPort **)(a1 + 960),
                      CFDictionaryRef v30 = IOServiceMatching("IOUSBDevice"),
                      uint64_t v28 = IOServiceAddMatchingNotification(v29, "IOServiceTerminate", v30, (IOServiceMatchingCallback)sub_10008AE68, (void *)a1, (io_iterator_t *)(a1 + 1004)), v28))
                {
                  uint64_t v69 = v28;
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Usb Host Notification IOServiceAddMatchingNotification for device insertion failed (0x%x)\n", "WiFiManagerScheduleWithQueue", v69);
                  }
                  goto LABEL_142;
                }
                sub_10008AE68(a1, *(_DWORD *)(a1 + 1004));
                CFMutableDictionaryRef v31 = IOServiceMatching("IOPortTransportState");
                CFDateRef v32 = (id)CFMakeCollectable(v31);
                [v32 setObject:&off_100264138 forKey:@"IOPropertyMatch"];
                CFMutableDictionaryRef v33 = IOServiceMatching("IOPort");
                CFDictionaryRef v34 = (id)CFMakeCollectable(v33);
                [v34 setObject:&off_1002640C0 forKey:@"IOPropertyMatch"];
                [v32 setObject:v34 forKey:@"IOParentMatch"];
                CFDictionaryRef v35 = *(IONotificationPort **)(a1 + 960);
                if (v32) {
                  CFDictionaryRef v36 = (const __CFDictionary *)CFRetain(v32);
                }
                else {
                  CFDictionaryRef v36 = 0;
                }
                uint64_t v37 = IOServiceAddMatchingNotification(v35, "IOServiceMatched", v36, (IOServiceMatchingCallback)sub_10008B354, (void *)a1, (io_iterator_t *)(a1 + 1008));
                if (v37)
                {
                  uint64_t v70 = v37;
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:message:4, "%s: IOServiceAddMatchingNotification failed: %08x", "WiFiManagerScheduleWithQueue", v70];
                  }
                  goto LABEL_142;
                }
                sub_10008B354(a1, *(_DWORD *)(a1 + 1008));
              }
            }
            if (!*(void *)(a1 + 1016))
            {
              io_connect_t v38 = IORegisterForSystemPower((void *)a1, (IONotificationPortRef *)(a1 + 1016), (IOServiceInterestCallback)sub_10008B720, (io_object_t *)(a1 + 1024));
              *(_DWORD *)(a1 + 1028) = v38;
              if (!v38)
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:4 message:@"%s: IORegisterForSystemPower failed" : @"WiFiManagerScheduleWithQueue"];
                }
              }
            }
            if (*(_DWORD *)(a1 + 1028) && *(void *)(a1 + 1016))
            {
              IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)(a1 + 960), *(dispatch_queue_t *)(a1 + 32));
              IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)(a1 + 1016), *(dispatch_queue_t *)(a1 + 32));
            }
            BOOL v40 = *(NSObject **)(a1 + 920);
            if (v40) {
              dispatch_activate(v40);
            }
            int v41 = *(NSObject **)(a1 + 1872);
            if (v41) {
              dispatch_activate(v41);
            }
            *(void *)(a1 + 1864) = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            *(void *)(a1 + 1896) = CFStringCreateWithCString(kCFAllocatorDefault, "www.apple.com", 1u);
            *(_OWORD *)(a1 + 1904) = xmmword_1001CB490;
            *(void *)(a1 + 1920) = 0x4008000000000000;
            if (SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 1072), *(dispatch_queue_t *)(a1 + 32)))
            {
              if (SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 1080), *(dispatch_queue_t *)(a1 + 32)))
              {
                if (SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 1096), *(dispatch_queue_t *)(a1 + 32)))
                {
                  if (SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 1088), *(dispatch_queue_t *)(a1 + 32)))
                  {
                    if (&_BTSessionAttachWithQueue)
                    {
                      context.versioint n = (CFIndex)sub_10008BBFC;
                      uint64_t v42 = BTSessionAttachWithQueue();
                      if (v42)
                      {
                        uint64_t v43 = v42;
                        if (qword_10027DD68) {
                          [((id)qword_10027DD68) WFLog:message:4, "%s: Unable to attach to Mobile Bluetooth result=0x%X", "WiFiManagerScheduleWithQueue", v43];
                        }
                      }
                    }
                    CFTypeID v45 = *(void **)(a1 + 2520);
                    if (v45)
                    {
                      v82[0] = _NSConcreteStackBlock;
                      v82[1] = 3221225472;
                      v82[2] = sub_10008BFD0;
                      v82[3] = &unk_10023EAF8;
                      v82[4] = a1;
                      [v45 setImsRegistrationStatusChangedHandler:v82];
                      CFDataRef v46 = *(void **)(a1 + 2520);
                      v81[0] = _NSConcreteStackBlock;
                      v81[1] = 3221225472;
                      v81[2] = sub_10008C0C0;
                      v81[3] = &unk_10023EAF8;
                      v81[4] = a1;
                      [v46 setCellularDataStatusChangedHandler:v81];
                      CFDataRef v47 = *(void **)(a1 + 2520);
                      v80[0] = _NSConcreteStackBlock;
                      v80[1] = 3221225472;
                      v80[2] = sub_10008C0C8;
                      v80[3] = &unk_10023EAF8;
                      v80[4] = a1;
                      [v47 setCellularFallbackStatusChangedHandler:v80];
                    }
                    else if (&CTTelephonyCenterGetDefault)
                    {
                      v79[0] = _NSConcreteStackBlock;
                      v79[1] = 3221225472;
                      v79[2] = sub_10008C0D0;
                      v79[3] = &unk_10023EAF8;
                      v79[4] = a1;
                      dispatch_async((dispatch_queue_t)qword_10027DD88, v79);
                    }
                    v78[0] = a1;
                    v78[1] = 0xAAAAAAAA00000002;
                    v78[2] = 0;
                    v78[3] = 1;
                    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v78);
                    if (*(_DWORD *)(a1 + 316) == 1)
                    {
                      if (qword_10027DD68) {
                        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: registering with coex manager", "WiFiManagerScheduleWithQueue")];
                      }
                      sub_1001871D8(a1);
                    }
                    CFIndex v49 = *(NSObject **)(a1 + 1336);
                    if (v49) {
                      dispatch_activate(v49);
                    }
                    CFIndex v50 = *(NSObject **)(a1 + 1360);
                    if (v50) {
                      dispatch_activate(v50);
                    }
                    CFDictionaryRef v51 = *(NSObject **)(a1 + 2352);
                    if (v51) {
                      dispatch_activate(v51);
                    }
                    if (&CTTelephonyCenterGetDefault)
                    {
                      sub_100034BB8(a1, (uint64_t)[+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection]);
                      sub_10003430C(a1, (uint64_t)[+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection]);
                      sub_100034A1C(a1, (uint64_t)[+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection]);
                    }
                    sub_10017412C(*(void *)(a1 + 1448), (uint64_t)sub_10008C290, a1);
                    sub_100173E60(*(void *)(a1 + 1448), *(void *)(a1 + 32));
                    [*(id *)(a1 + 1480) scheduleWithQueue:*(void *)(a1 + 32)];
                    sub_10008C364(a1);
                    unsigned int v52 = *(NSObject **)(a1 + 1488);
                    if (v52) {
                      dispatch_activate(v52);
                    }
                    unsigned int v53 = *(NSObject **)(a1 + 1536);
                    if (v53) {
                      dispatch_activate(v53);
                    }
                    unsigned int v54 = *(NSObject **)(a1 + 1576);
                    if (v54) {
                      dispatch_activate(v54);
                    }
                    CFStringRef v55 = *(NSObject **)(a1 + 496);
                    if (v55) {
                      dispatch_activate(v55);
                    }
                    CFTypeID v56 = *(NSObject **)(a1 + 1680);
                    if (v56) {
                      dispatch_activate(v56);
                    }
                    CFDateRef v57 = *(NSObject **)(a1 + 432);
                    if (v57) {
                      dispatch_activate(v57);
                    }
                    *(void *)(a1 + 1728) = [[WiFiSoftErrorManager alloc] initWithWiFiManager:a1 queue:*(void *)(a1 + 32)];
                    *(void *)(a1 + 1736) = sub_10008C49C((void *)a1, @"SlowWiFi");
                    *(void *)(a1 + 1744) = sub_10008C49C((void *)a1, @"Dps");
                    *(void *)(a1 + 1760) = sub_10008C49C((void *)a1, @"CountryCode");
                    *(void *)(a1 + 1768) = [objc_alloc((Class)NSMutableString) initWithString:&stru_100248240];
                    double v58 = sub_10008C5B4((void *)a1, @"SoftErrorUIReportingTimeout", 86400.0);
                    if (sub_100174258()
                      || [*(id *)(a1 + 1120) containsObject:@"wlan.dk=1"])
                    {
                      uint64_t v59 = 200;
                      uint64_t v60 = 12;
                    }
                    else
                    {
                      uint64_t v59 = 100;
                      uint64_t v60 = 2;
                    }
                    if (v58 < 0.0) {
                      double v58 = 86400.0;
                    }
                    v88[0] = @"maxUIActions";
                    context.versioint n = (CFIndex)+[NSNumber numberWithInteger:v60];
                    v88[1] = @"intervalForMaxUIActions";
                    context.info = +[NSNumber numberWithDouble:v58];
                    v88[2] = @"maxOccurrences";
                    unsigned int v61 = +[NSNumber numberWithInteger:v59];
                    v88[3] = @"metricSubmissionSamplingRate";
                    context.retaiint n = (const void *(__cdecl *)(const void *))v61;
                    context.release = (void (__cdecl *)(const void *))&off_100262E00;
                    *(void *)(a1 + 1840) = [objc_alloc((Class)WiFiSoftError) initWithName:@"Dext Crashed" andParams:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &context, v88, 4)];
                    *(void *)(a1 + 2544) = sub_10008C49C((void *)a1, @"Missing Password");
                    *(void *)(a1 + 1776) = +[WiFiDriverTriggeredTTR sharedWiFiDriverTriggeredTTRManagerwithStringRef:@"Driver triggered TTR" withInterval:sub_10008C5B4((void *)a1, @"SoftErrorUIReportingTimeout", 86400.0)];
                    [*(id *)(a1 + 2000) scheduleWithQueue:*(void *)(a1 + 32)];
                    [*(id *)(a1 + 2000) scheduleHistoricNetworkPerformanceFeedSync];
                    [*(id *)(a1 + 2000) schedule3BarsObserver];
                    [*(id *)(a1 + 2000) scheduleOutdatedListEntriesCleanUp];
                    [*(id *)(a1 + 2000) scheduleWCADownloadObserver];
                    v77[0] = _NSConcreteStackBlock;
                    v77[1] = 3221225472;
                    v77[2] = sub_10008C624;
                    v77[3] = &unk_10023EAF8;
                    v77[4] = a1;
                    dispatch_async((dispatch_queue_t)qword_10027DD88, v77);
                    *(void *)(a1 + 56) = sub_1000D8648(a1, *(void *)(a1 + 32), (uint64_t)sub_10008C7CC);
                    if (*(_DWORD *)(a1 + 112) == 1)
                    {
                      *(void *)(a1 + 64) = +[WiFiManagerCarSessionMonitor sharedInstance];
                      v76[0] = _NSConcreteStackBlock;
                      v76[1] = 3221225472;
                      v76[2] = sub_10008C908;
                      v76[3] = &unk_10023EAF8;
                      v76[4] = a1;
                      dispatch_async((dispatch_queue_t)qword_10027DD88, v76);
                    }
                    BOOL v62 = sub_10000D934((void *)a1, @"LocaleTestParams");
                    sub_10008C950(a1, v62);
                    *(unsigned char *)(a1 + 2404) = 0;
                    *(_DWORD *)(a1 + 2400) = -1;
                    *(void *)(a1 + 2424) = 0;
                    *(void *)(a1 + 2440) = 0;
                    *(unsigned char *)(a1 + 2432) = 0;
                    double v63 = *(NSObject **)(a1 + 32);
                    v75[0] = _NSConcreteStackBlock;
                    v75[1] = 3221225472;
                    v75[2] = sub_10008CA14;
                    v75[3] = &unk_1002407B0;
                    v75[4] = a1;
                    notify_register_dispatch("com.apple.bluetooth.low-power-mode", (int *)(a1 + 2400), v63, v75);
                    if (!byte_10027DDA8 && objc_opt_class())
                    {
                      v74[0] = _NSConcreteStackBlock;
                      v74[1] = 3221225472;
                      v74[2] = sub_10008D32C;
                      v74[3] = &unk_10023EAF8;
                      v74[4] = a1;
                      dispatch_async((dispatch_queue_t)qword_10027DD88, v74);
                    }
                    [+[WiFiUserInteractionMonitor sharedInstance] registerStateChangeCallback:&stru_1002407D0 withCallbackContext:a1];
                    [*(id *)(a1 + 192) determineAndSetLocale:0];
                    if (_os_feature_enabled_impl())
                    {
                      id v64 = objc_alloc_init((Class)CWFNearbyDeviceDiscoveryManager);
                      *(void *)(a1 + 1792) = v64;
                      if (v64)
                      {
                        v73[0] = _NSConcreteStackBlock;
                        v73[1] = 3221225472;
                        v73[2] = sub_10008D910;
                        v73[3] = &unk_1002407F0;
                        v73[4] = a1;
                        [v64 setIsNDDAllowed:v73];
                        v72[0] = _NSConcreteStackBlock;
                        v72[1] = 3221225472;
                        v72[2] = sub_10008D9D0;
                        v72[3] = &unk_100240810;
                        v72[4] = a1;
                        [*(id *)(a1 + 1792) setSendNDDRequest:v72];
                        [*(id *)(a1 + 1792) setSendNDDXPCEvent:&stru_100240850];
                      }
                    }
                    goto LABEL_112;
                  }
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:message:4, "%s: Error: SCPreferencesSetDispatchQueue preferences.radios failed", "WiFiManagerScheduleWithQueue", v71];
                  }
                }
                else
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:4 message:@"%s: SCPreferencesSetDispatchQueue preferences.wifiPrivateMacNetworks failed" arguments:v71];
                  }
                }
              }
              else
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:message:4, "%s: Error: SCPreferencesSetDispatchQueue preferences.wifiNetworks failed", "WiFiManagerScheduleWithQueue", v71];
                }
              }
            }
            else
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:message:4, "%s: Error: SCPreferencesSetDispatchQueue preferences.wifi failed", "WiFiManagerScheduleWithQueue", v71];
              }
            }
LABEL_142:
LABEL_112:
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: exiting", "WiFiManagerScheduleWithQueue")];
            }
            goto LABEL_114;
          }
          __int16 v66 = (void *)qword_10027DD68;
          if (!qword_10027DD68)
          {
LABEL_122:
            sub_10008DCFC(a1);
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"%s: Error: __WiFiManagerRegisterDynamicStore failed" : @"WiFiManagerScheduleWithQueue" : v71];
            }
            goto LABEL_142;
          }
          double v67 = "Error subscribing to the dynamic store disconnect event.";
        }
        else
        {
          __int16 v66 = (void *)qword_10027DD68;
          if (!qword_10027DD68) {
            goto LABEL_122;
          }
          double v67 = "Error setting dynamic store queue.";
        }
      }
      else
      {
        __int16 v66 = (void *)qword_10027DD68;
        if (!qword_10027DD68) {
          goto LABEL_122;
        }
        double v67 = "Error creating dynamic store.";
      }
      [v66 WFLog:4 message:v67];
      goto LABEL_122;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: exiting, Error: not open", "WiFiManagerScheduleWithQueue"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: exiting, Error: manager NULL", "WiFiManagerScheduleWithQueue"];
    }
  }
LABEL_114:
}

void sub_10008875C(uint64_t a1, int a2)
{
  int v5 = a2;
  if (a1)
  {
    int v3 = *(const void **)(a1 + 32);
    if (v3) {
      sub_1000887D8(a1, v3);
    }
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000011;
    void context[2] = &v5;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    *(unsigned char *)(a1 + 16) = 0;
  }
}

void sub_1000887D8(uint64_t a1, const void *a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4, "%s: entering", "WiFiManagerUnscheduleFromQueue"];
  }
  if (a1)
  {
    if (a2 && (uint64_t v6 = *(const void **)(a1 + 32)) != 0)
    {
      if (CFEqual(v6, a2))
      {
        sub_1000DE70C(*(void *)(a1 + 80));
        [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") invalidate];
        [*(id *)(a1 + 1104) invalidate];
        context[0] = a1;
        context[1] = 0xAAAAAAAA00000010;
        void context[2] = 0;
        void context[3] = 1;
        CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
        if ([+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection]&& &CTTelephonyCenterGetDefault)
        {
          [+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection];
          _CTServerConnectionUnregisterForNotification();
          [+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection];
          _CTServerConnectionUnregisterForNotification();
          [+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection];
          _CTServerConnectionUnregisterForNotification();
        }
        unint64_t v7 = *(void **)(a1 + 2520);
        if (v7)
        {
          [v7 setImsRegistrationStatusChangedHandler:0];
          [*(id *)(a1 + 2520) setCellularDataStatusChangedHandler:0];
          [*(id *)(a1 + 2520) setCellularFallbackStatusChangedHandler:0];
        }
        SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 1088), 0);
        SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 1080), 0);
        SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 1096), 0);
        SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 1072), 0);
        *(void *)(a1 + 1032) = 0;
        sub_100167BF0();
        uint64_t v8 = *(NSObject **)(a1 + 1680);
        if (v8) {
          dispatch_source_cancel(v8);
        }
        uint64_t v9 = *(NSObject **)(a1 + 496);
        if (v9) {
          dispatch_source_cancel(v9);
        }
        int v10 = *(NSObject **)(a1 + 432);
        if (v10) {
          dispatch_source_cancel(v10);
        }
        [*(id *)(a1 + 520) invalidateAndCancel];

        int v11 = *(NSObject **)(a1 + 1576);
        if (v11) {
          dispatch_source_cancel(v11);
        }
        unsigned int v12 = *(NSObject **)(a1 + 1536);
        if (v12) {
          dispatch_source_cancel(v12);
        }
        uint64_t v13 = *(NSObject **)(a1 + 1488);
        if (v13) {
          dispatch_source_cancel(v13);
        }
        BOOL v14 = *(NSObject **)(a1 + 1336);
        if (v14) {
          dispatch_source_cancel(v14);
        }
        CFArrayRef v15 = *(NSObject **)(a1 + 1872);
        if (v15) {
          dispatch_source_cancel(v15);
        }
        CFStringRef v16 = *(NSObject **)(a1 + 920);
        if (v16) {
          dispatch_source_cancel(v16);
        }
        CFStringRef v17 = *(NSObject **)(a1 + 1360);
        if (v17) {
          dispatch_source_cancel(v17);
        }
        CFIndex v18 = *(NSObject **)(a1 + 2352);
        if (v18) {
          dispatch_source_cancel(v18);
        }
        int v19 = *(_DWORD *)(a1 + 856);
        if (v19) {
          notify_cancel(v19);
        }
        int v20 = *(_DWORD *)(a1 + 904);
        if (v20) {
          notify_cancel(v20);
        }
        sub_10008DCFC(a1);
        if (*(_DWORD *)(a1 + 1028))
        {
          IODeregisterForSystemPower((io_object_t *)(a1 + 1028));
          IOServiceClose(*(_DWORD *)(a1 + 1028));
          *(_DWORD *)(a1 + 1028) = 0;
        }
        DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterRemoveObserver(DarwinNotifyCenter, 0, @"SignificantTimeChangeNotification", 0);
        CFIndex v22 = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterRemoveObserver(v22, 0, @"com.apple.mobile.keybagd.lock_status", 0);
        if (objc_opt_class())
        {
          CFDictionaryRef v23 = CFNotificationCenterGetDarwinNotifyCenter();
          CFNotificationCenterRemoveObserver(v23, 0, FAFamilyUpdateNotification, 0);
        }
        sub_1001875B4((xpc_object_t *)(a1 + 1320));
        if (&_WiFiCloudSyncEngineCreate && *(void *)(a1 + 1304)) {
          WiFiCloudSyncEngineUnScheduleWithQueue();
        }
        sub_1000BEF90(*(void **)(a1 + 40));
        sub_1000D8820(*(void **)(a1 + 56));
        if (*(_DWORD *)(a1 + 112) == 1)
        {
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10008DD3C;
          block[3] = &unk_10023EAF8;
          void block[4] = a1;
          dispatch_async((dispatch_queue_t)qword_10027DD88, block);
        }
        sub_10008DD7C(a1);
        sub_100035154(a1, (uint64_t)[+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection]);
        sub_1001740E0(*(void *)(a1 + 1448));
        if (notify_is_valid_token(*(_DWORD *)(a1 + 1984)))
        {
          notify_cancel(*(_DWORD *)(a1 + 1984));
          *(_DWORD *)(a1 + 1984) = -1;
        }
        [*(id *)(a1 + 1480) unscheduleFromQueue:*(void *)(a1 + 32)];
        [*(id *)(a1 + 2000) unScheduleHistoricNetworkPerformanceFeedSync];
        [*(id *)(a1 + 2000) unSchedule3BarsObserver];
        [*(id *)(a1 + 2000) unScheduleWCADownloadObserver];
        [*(id *)(a1 + 2000) unscheduleFromQueue:*(void *)(a1 + 32)];
        [*(id *)(a1 + 2112) unscheduleFromQueue:*(void *)(a1 + 32)];
        CFNumberRef v24 = *(const void **)(a1 + 1896);
        if (v24)
        {
          CFRelease(v24);
          *(void *)(a1 + 1896) = 0;
        }
        [+[WiFiUserInteractionMonitor sharedInstance] unregisterStateChangeCallback:a1];
        *(void *)(a1 + 32) = 0;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: exiting", @"WiFiManagerUnscheduleFromQueue"];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:4, "%s: exiting, Error: queue mismatch", "WiFiManagerUnscheduleFromQueue"];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, "%s: exiting, Error: no queue", "WiFiManagerUnscheduleFromQueue"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: exiting, Error: manager NULL", "WiFiManagerUnscheduleFromQueue"];
    }
  }
}

void sub_100088CD0(uint64_t a1)
{
  if (a1)
  {
    int v2 = *(_DWORD *)(a1 + 2456);
    if (v2 != 2 && (v2 != 1 || *(int *)(a1 + 2460) >= 1))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        unsigned int v4 = Mutable;
        unsigned int valuePtr = *(_DWORD *)(a1 + 2452);
        CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
        if (v5)
        {
          CFNumberRef v6 = v5;
          CFDictionaryAddValue(v4, @"USB_HOST_NOTIFICATION_SEQUENCE_NUM", v5);
          CFRelease(v6);
          int v17 = *(_DWORD *)(a1 + 2456);
          CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v17);
          if (v7)
          {
            CFNumberRef v8 = v7;
            CFDictionaryAddValue(v4, @"USB_HOST_NOTIFICATION_USB_CHANGE", v7);
            CFRelease(v8);
            BOOL v16 = *(_DWORD *)(a1 + 2460) != 0;
            CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v16);
            if (v9)
            {
              CFNumberRef v10 = v9;
              CFDictionaryAddValue(v4, @"USB_HOST_NOTIFICATION_USB_PRESENCE", v9);
              CFRelease(v10);
              context[0] = a1;
              context[1] = 0xAAAAAAAA0000008CLL;
              void context[2] = v4;
              void context[3] = 1;
              CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Usb Host Notification Apple80211Set: seqNum %d Total %d chg %d Presence %d \n", valuePtr, *(unsigned int *)(a1 + 2460), *(unsigned int *)(a1 + 2456), v16);
              }
              ++*(_DWORD *)(a1 + 2452);
              goto LABEL_12;
            }
            BOOL v14 = (void *)qword_10027DD68;
            if (qword_10027DD68)
            {
              CFArrayRef v15 = "Usb Host Notification Error CFNumberCreate usbPresence\n";
              goto LABEL_25;
            }
LABEL_26:
LABEL_12:
            CFRelease(v4);
            return;
          }
          BOOL v14 = (void *)qword_10027DD68;
          if (!qword_10027DD68) {
            goto LABEL_26;
          }
          CFArrayRef v15 = "Usb Host Notification Error CFNumberCreate usbChange\n";
        }
        else
        {
          BOOL v14 = (void *)qword_10027DD68;
          if (!qword_10027DD68) {
            goto LABEL_26;
          }
          CFArrayRef v15 = "Usb Host Notification Error CFNumberCreate sequenceNum\n";
        }
LABEL_25:
        [v14 WFLog:4 message:v15];
        goto LABEL_26;
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4 message:"Usb Host Notification Error creating notificationDict\n"];
      }
    }
  }
}

void sub_100088F6C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      v2[0] = a1;
      v2[1] = 0xAAAAAAAA0000008CLL;
      v2[2] = a2;
      v2[3] = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
    }
  }
}

void sub_100088FC8(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      v2[0] = a1;
      v2[1] = 0xAAAAAAAA0000008DLL;
      v2[2] = a2;
      v2[3] = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
    }
  }
}

uint64_t sub_100089024(uint64_t a1, int a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!Mutable) {
    return 0;
  }
  CFArrayRef v4 = Mutable;
  sub_100088FC8(a1, (uint64_t)Mutable);
  if (CFArrayGetCount(v4) == 2)
  {
    __int16 valuePtr = 0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v4, 0);
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt8Type, (char *)&valuePtr + 1);
    CFNumberRef v6 = (const __CFNumber *)CFArrayGetValueAtIndex(v4, 1);
    CFNumberGetValue(v6, kCFNumberSInt8Type, &valuePtr);
    uint64_t v7 = ((char)valuePtr - SHIBYTE(valuePtr));
  }
  else
  {
    uint64_t v7 = 0;
  }
  CFRelease(v4);
  return v7;
}

void sub_1000890F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: callbackType %@, error %@", "__WiFiManagerLocationManagerCallback", +[WiFiLocationManager getStringOfCallbackType:](WiFiLocationManager, "getStringOfCallbackType:", a1), [a4 userInfo] message];
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null manager ref", @"__WiFiManagerLocationManagerCallback"];
    }
    goto LABEL_16;
  }
  if (!a4)
  {
    if (a1 == 1)
    {
      int v11 = *(NSObject **)(a2 + 32);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000BC6CC;
      block[3] = &unk_10023EAF8;
      void block[4] = a2;
      dispatch_async(v11, block);
      goto LABEL_17;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: ignoring callback", "__WiFiManagerLocationManagerCallback")];
    }
LABEL_16:
    goto LABEL_17;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: errored %@", "__WiFiManagerLocationManagerCallback", a4 message];
  }
  if (a1 == 3 && [a4 code] == (id)1) {
    sub_1000A8020(a2, 0);
  }
LABEL_17:
}

void sub_1000892CC(uint64_t a1)
{
  id v2 = +[WiFiAppStateManager sharedWiFiAppStateManager];
  if (v2)
  {
    *(void *)(*(void *)(a1 + 32) + 2112) = v2;
    [v2 registerCallbackFunctionPtr:sub_1000043B8 withContext:];
    if (sub_100089448(*(void *)(a1 + 32)))
    {
      [*(id *)(*(void *)(a1 + 32) + 2112) registerBundleCallbackFunctionPtr:sub_1000894B8 withContext:];
      [*(id *)(*(void *)(a1 + 32) + 2112) startMonitoringBundleId:@"com.apple.Preferences"];
    }
    [*(id *)(*(void *)(a1 + 32) + 2112) registerForegroundAppTrackerFunctionPtr:sub_100008160 withContext:];
    [*(id *)(*(void *)(a1 + 32) + 2112) registerAppReporterCallbackFunctionPtr:sub_100089618 withContext:];
    [*(id *)(*(void *)(a1 + 32) + 2112) registerAppUnregistrationFunctionPtr:sub_1000896CC withContext:];
    uint64_t v3 = *(void *)(a1 + 32);
    CFArrayRef v4 = *(void **)(v3 + 2112);
    uint64_t v5 = *(void *)(v3 + 32);
    [v4 scheduleWithQueue:v5];
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:@"%s:%d manager->appStateManager is NULL " message:3];
    }
  }
}

uint64_t sub_100089448(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 2120);
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:4 message:@"%s: manager ref is null" arguments:("WiFiManagerGetAvailabilityEngineIsEnabled")];
  }
  return 0;
}

void sub_1000894B8(uint64_t a1, uint64_t a2, int a3)
{
  if (a1)
  {
    int v6 = *(unsigned __int8 *)(a1 + 2120);
    if (v6)
    {
      if (qword_10027DD68)
      {
        if ((a3 - 1) > 7) {
          CFStringRef v8 = @"Unknown";
        }
        else {
          CFStringRef v8 = off_100240E48[a3 - 1];
        }
        [(id)qword_10027DD68 WFLog:3, "%s: bundleId: %@ state: %@", "__WiFiManagerAppStateManagerBundleIdCallback", a2, v8 message];
      }
      if (a3 == 8)
      {
        sub_1000A80CC((id *)a1);
      }
      return;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: availabilty engine v2 is not enabed", "__WiFiManagerAppStateManagerBundleIdCallback"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"%s: null manager", @"__WiFiManagerAppStateManagerBundleIdCallback"];
    }
  }
}

void sub_100089618(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000006CLL;
    void context[2] = a2;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"%s: null manager", @"__WiFiManagerAppStateManagerAppReporterCallback"];
    }
  }
}

void sub_1000896CC(uint64_t a1, void *a2)
{
  if (a1)
  {
    CFArrayRef v3 = sub_10008EE94(a1);
    if (v3)
    {
      CFArrayRef v4 = v3;
      CFIndex Count = CFArrayGetCount(v3);
      if (Count >= 1)
      {
        CFIndex v5 = 0;
        CFArrayRef v18 = v4;
        do
        {
          CFIndex v20 = v5;
          CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v4, v5);
          if (ValueAtIndex)
          {
            uint64_t v7 = ValueAtIndex;
            CFStringRef v8 = (const __CFString *)sub_1000CE384((uint64_t)ValueAtIndex);
            id v9 = [a2 objectForKeyedSubscript:@"bundleIDs"];
            long long v21 = 0u;
            long long v22 = 0u;
            long long v23 = 0u;
            long long v24 = 0u;
            id v10 = [v9 countByEnumeratingWithState:&v21 objects:v25 count:16];
            if (v10)
            {
              id v11 = v10;
              uint64_t v12 = *(void *)v22;
              do
              {
                for (CFIndex i = 0; i != v11; CFIndex i = (char *)i + 1)
                {
                  if (*(void *)v22 != v12) {
                    objc_enumerationMutation(v9);
                  }
                  if (v8
                    && CFEqual(v8, *(CFStringRef *)(*((void *)&v21 + 1) + 8 * i))
                    && sub_1000CE55C((uint64_t)v7) == 1)
                  {
                    if (sub_1000C6B08((uint64_t)v7) && sub_1000CF14C((uint64_t)v7))
                    {
                      if (qword_10027DD68) {
                        [qword_10027DD68 WFLog:message:3, "%s: can't remove network as its type Home or Work", "__WiFiAppStateManagerAppUnregisteredCallbackFunctionPtr"];
                      }
                    }
                    else
                    {
                      if (qword_10027DD68) {
                        [qword_10027DD68 WFLog:3 message:@"%s: removing network" : @"__WiFiAppStateManagerAppUnregisteredCallbackFunctionPtr"];
                      }
                      sub_10009A098(a1, v7, 15);
                    }
                  }
                }
                id v11 = [v9 countByEnumeratingWithState:&v21 objects:v25 count:16];
              }
              while (v11);
            }
          }
          CFIndex v5 = v20 + 1;
          CFArrayRef v4 = v18;
        }
        while (v20 + 1 != Count);
      }
      CFRelease(v4);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:@"%s: null manager" :3, "__WiFiAppStateManagerAppUnregisteredCallbackFunctionPtr"];
    }
  }
}

void sub_100089968(uint64_t a1, dispatch_queue_t *a2)
{
  if (a2)
  {
    if (a2[4])
    {
      BOOL v3 = MKBGetDeviceLockState() == 1;
      CFRetain(a2);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000BB8B4;
      block[3] = &unk_10023F048;
      void block[4] = a2;
      void block[5] = v3;
      dispatch_block_t v4 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INTERACTIVE, 0, block);
      dispatch_async(a2[4], v4);
      _Block_release(v4);
      return;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null queue", "__WiFiManagerHandleKeybagLockStatus")];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager."];
    }
  }
}

void sub_100089AB0(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: null manager.", "__WiFiManagerUpdateFamilyPreferences"];
    }
    goto LABEL_14;
  }
  if ([+[WiFiUserInteractionMonitor sharedInstance] isSetupCompleted])
  {
    if (*(unsigned char *)(a1 + 1328))
    {
      *(_DWORD *)(a1 + 340) = 0;
      if (objc_opt_class())
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000BCCF0;
        block[3] = &unk_100240790;
        void block[4] = sub_1000A832C((void *)a1);
        void block[5] = a1;
        dispatch_async((dispatch_queue_t)qword_10027DD88, block);
      }
      return;
    }
    dispatch_block_t v4 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFIndex v5 = "%s: Device not unlocked since boot. Not querying family circle.";
      goto LABEL_13;
    }
  }
  else
  {
    dispatch_block_t v4 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFIndex v5 = "%s: Setup not completed. Not querying family circle.";
LABEL_13:
      [v4 WFLog:4 message:v5 "__WiFiManagerUpdateFamilyPreferences"];
    }
  }
LABEL_14:
}

void sub_100089C40(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100089AB0(a2);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager."];
    }
  }
}

void sub_100089CC4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = *(void *)(a1 + 864);
  *(void *)(a1 + 864) = a2;
  if (MKBUserUnlockedSinceBoot())
  {
    if (!*(unsigned char *)(a1 + 1328))
    {
      id v9 = (void **)&qword_10027DD68;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"First unlock since launch"];
      }
      *(unsigned char *)(a1 + 1328) = 1;
      sub_1000830B8(a1);
      sub_100083534(a1, *(const __CFArray **)(a1 + 224));
      sub_100083F8C(a1);
      sub_100084BB4(a1);
      unsigned int v10 = sub_10008D060((void *)a1);
      sub_10008CB00(a1, v10, 0);
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterRemoveObserver(DarwinNotifyCenter, 0, @"com.apple.mobile.keybagd.lock_status", 0);
      sub_10008F5C0(a1);
      sub_1000BAD9C((void *)a1, 0);
      if (*(unsigned char *)(a1 + 2254))
      {
        *(unsigned char *)(a1 + 2254) = 0;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, @"%s reseting user auto join due after first unlock due to device restart", @"__WiFiManagerLockStateUpdate"];
        }
        sub_100086500(a1, 1, 3, 0);
      }
      sub_1000242F8(a1, 1);
      sub_100003D18(a1, 1);
      if ((*(unsigned char *)(a1 + 832) & 0xF) != 0) {
        sub_10002454C(a1);
      }
      else {
        sub_1000241A4(a1);
      }
      if (_os_feature_enabled_impl()) {
        sub_1000047D4(a1, 29);
      }
      else {
        sub_10008DE74(a1, 2);
      }
      sub_100184E50(*(void **)(a1 + 1432));
      if (&_WiFiCloudSyncEngineCreate && *(void *)(a1 + 1304))
      {
        CFRetain((CFTypeRef)a1);
        dispatch_time_t v14 = dispatch_time(0, 30000000000);
        CFArrayRef v15 = *(NSObject **)(a1 + 32);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000BB914;
        block[3] = &unk_10023EAF8;
        void block[4] = a1;
        dispatch_after(v14, v15, block);
      }
      if (sub_1000233A8((void *)a1))
      {
        BOOL v16 = sub_10009DFC0([*(id *)(a1 + 1104) dictionaryRepresentation]);
        if (v16)
        {
          CFArrayRef v17 = v16;
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CFDateRef otherDate = CFDateCreate(0, Current + -63072000.0);
          if (otherDate)
          {
            int v43 = a3;
            uint64_t v44 = v7;
            CFTypeID v45 = v6;
            CFIndex Count = CFArrayGetCount(v17);
            if (Count >= 1)
            {
              CFIndex v20 = Count;
              for (CFIndex i = 0; i != v20; ++i)
              {
                CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v17, i);
                if (ValueAtIndex)
                {
                  long long v23 = ValueAtIndex;
                  CFDateRef v24 = (const __CFDate *)sub_10001E404((uint64_t)ValueAtIndex, @"prevJoined");
                  if (v24)
                  {
                    CFDateRef v25 = v24;
                    if (sub_1000D1FFC((uint64_t)v23))
                    {
                      CFComparisonResult v26 = CFDateCompare(v25, otherDate, 0);
                      uint64_t v28 = v9;
                      unsigned int v29 = *v9;
                      if (v26 == kCFCompareGreaterThan)
                      {
                        if (v29) {
                          [v29 WFLog:2, "This open network was joined in less than two years %@: %@: %@", v25, otherDate, sub_10001A43C(v23) message];
                        }
                      }
                      else
                      {
                        if (v29) {
                          [v29 WFLog:3, "Removing this open network that is older than two years since last joined %@: %@", v25, sub_10001A43C(v23) message];
                        }
                        sub_10009A098(a1, v23, 19);
                      }
                      id v9 = v28;
                    }
                  }
                }
              }
            }
            CFRelease(otherDate);
            uint64_t v7 = v44;
            int v6 = v45;
            a3 = v43;
          }
          CFRelease(v17);
        }
      }
      sub_1000AD698(a1);
    }
    uint64_t v30 = *(void *)(a1 + 864);
    sub_10008F5C0(a1);
    if (!a3 && v7 == v30) {
      goto LABEL_43;
    }
    if (qword_10027DD68)
    {
      if (*(void *)(a1 + 864)) {
        CFDateRef v32 = "DISABLED";
      }
      else {
        CFDateRef v32 = "ENABLED";
      }
      [((id)qword_10027DD68) WFLog:3 message:@"User interaction %s" v32];
    }
    if (!*(void *)(a1 + 864))
    {
      if (*(unsigned char *)(a1 + 2404))
      {
        *(unsigned char *)(a1 + 2404) = 0;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: lock state changed while in LPEM. Restoring power state."];
        }
        unsigned int v34 = sub_10008D060((void *)a1);
        sub_10008CB00(a1, v34, @"LPEM");
      }
      if (!*(void *)(a1 + 2184))
      {
        if (sub_100089448(a1))
        {
          id v36 = [objc_alloc((Class)WiFi3BarsSource) initWithChangeHandler:0 localStoreType:0];
          *(void *)(a1 + 2184) = v36;
          context[0] = a1;
          context[1] = 0xAAAAAAAA00000062;
          void context[2] = v36;
          void context[3] = 0;
          CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
        }
      }
      if (!objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "deviceAnalyticsClient"))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s initDeviceAnalyticsClient failed. Will retry", "__WiFiManagerLockStateUpdate"];
        }
        [+[WiFiManagerAnalytics sharedInstance] triggerDeviceAnalyticsStoreMigrationWithCompletion:&stru_100240C38];
      }
    }
    if ((*(_DWORD *)(a1 + 788) | 2) != 2)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Ignoring lock state manager->wakeMode %d\n", *(unsigned int *)(a1 + 788));
      }
      if (v7 == v30 || *(void *)(a1 + 864)) {
        goto LABEL_43;
      }
      sub_1000242F8(a1, 1);
      if (_os_feature_enabled_impl())
      {
LABEL_91:
        sub_1000047D4(a1, 29);
        if (_os_feature_enabled_impl()
          && [+[WiFiUserInteractionMonitor sharedInstance] isPersonalHotspotRecommendationAllowed])
        {
          sub_1000BB860(a1, 1);
        }
        goto LABEL_43;
      }
LABEL_90:
      sub_10008DE74(a1, 2);
      goto LABEL_43;
    }
    unint64_t v39 = *(const void **)(a1 + 1136);
    uint64_t v40 = *(void *)(a1 + 864);
    if (!v40)
    {
      int v41 = 1;
      sub_1000242F8(a1, 1);
      if ((*(unsigned char *)(a1 + 832) & 0x11) != 0)
      {
        int v41 = 0;
        unint64_t v39 = *(const void **)(a1 + 1128);
      }
      sub_100003D18(a1, 1);
      if ((*(unsigned char *)(a1 + 832) & 0xF) != 0) {
        sub_10002454C(a1);
      }
      else {
        sub_1000241A4(a1);
      }
      if (v7 != v30) {
        *(void *)(a1 + 880) = 0;
      }
      goto LABEL_82;
    }
    sub_1000BB7B4(a1);
    if ((*(unsigned char *)(a1 + 832) & 0x2A) == 0)
    {
      if (*(unsigned char *)(a1 + 1176))
      {
        unint64_t v39 = *(const void **)(a1 + 1152);
        int v41 = 3;
        goto LABEL_82;
      }
      if (!*(unsigned char *)(a1 + 1160)) {
        sub_100003D18(a1, 0);
      }
    }
    int v41 = 1;
LABEL_82:
    if (_os_feature_enabled_impl()) {
      sub_100013A1C(a1);
    }
    else {
      sub_10000456C(a1, v39, v41);
    }
    if (_os_feature_enabled_impl())
    {
      if (*(void *)(a1 + 864))
      {
        if (!*(void *)(a1 + 848)) {
          sub_1000047D4(a1, 34);
        }
        goto LABEL_43;
      }
      goto LABEL_91;
    }
    if (v40) {
      goto LABEL_43;
    }
    goto LABEL_90;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Device has not been unlocked since boot"];
  }
  sub_10008F5C0(a1);
LABEL_43:
}

void sub_10008A478(uint64_t a1)
{
  unsigned int v1 = *(void **)(a1 + 32);
  if (v1) {
    sub_10007C404(v1);
  }
}

void sub_10008A488(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    sub_10008A49C(v1, 0);
  }
}

void sub_10008A49C(uint64_t a1, int a2)
{
  dispatch_block_t v4 = (uint64_t *)(a1 + 848);
  uint64_t v5 = *(void *)(a1 + 848);
  if (notify_get_state(*(_DWORD *)(a1 + 856), (uint64_t *)(a1 + 848))) {
    return;
  }
  if (byte_10027DDA8)
  {
    uint64_t v6 = 1;
    uint64_t *v4 = 1;
    if (a2) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (a2) {
      goto LABEL_8;
    }
  }
  if (v5 == v6) {
    return;
  }
LABEL_8:
  if (qword_10027DD68)
  {
    if (*v4) {
      CFStringRef v8 = "ON";
    }
    else {
      CFStringRef v8 = "OFF";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Device display is %s", v8);
  }
  if (!*(_DWORD *)(a1 + 788))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"Ignoring display state"];
    }
    return;
  }
  id v9 = *(const void **)(a1 + 1136);
  sub_10008F5C0(a1);
  uint64_t v10 = *(void *)(a1 + 848);
  if (v10)
  {
    if (*(void *)(a1 + 864)) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = v5 == v6;
    }
    int v12 = !v11;
    int v13 = *(_DWORD *)(a1 + 788);
    if (a2) {
      int v14 = 3;
    }
    else {
      int v14 = 4;
    }
    if (v13 == 2) {
      int v15 = v14;
    }
    else {
      int v15 = v12;
    }
    int v16 = 1;
    if (v13 == 2) {
      int v17 = 1;
    }
    else {
      int v17 = 2;
    }
    if ((*(unsigned char *)(a1 + 832) & 0x11) != 0)
    {
      int v16 = 0;
      id v9 = *(const void **)(a1 + 1128);
    }
    sub_100003D18(a1, 1);
    if ((*(unsigned char *)(a1 + 832) & 0xF) != 0) {
      sub_10002454C(a1);
    }
    else {
      sub_1000241A4(a1);
    }
    if (v5 != v6) {
      *(void *)(a1 + 880) = 0;
    }
    goto LABEL_47;
  }
  sub_1000BB7B4(a1);
  if ((*(unsigned char *)(a1 + 832) & 0x2A) == 0)
  {
    if (*(unsigned char *)(a1 + 1176))
    {
      int v15 = 0;
      id v9 = *(const void **)(a1 + 1152);
      int v16 = 3;
      goto LABEL_46;
    }
    if (!*(unsigned char *)(a1 + 1160)) {
      sub_100003D18(a1, 0);
    }
  }
  int v15 = 0;
  int v16 = 1;
LABEL_46:
  int v17 = 2;
LABEL_47:
  context[0] = a1;
  context[1] = 0xAAAAAAAA0000006DLL;
  void context[2] = 0;
  void context[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  if (v15) {
    sub_1000242F8(a1, v15);
  }
  if (_os_feature_enabled_impl())
  {
    sub_100013A1C(a1);
    if (!v10) {
      return;
    }
  }
  else
  {
    sub_10000456C(a1, v9, v16);
    if (!v10) {
      return;
    }
  }
  if (_os_feature_enabled_impl()) {
    sub_1000047D4(a1, 19);
  }
  else {
    sub_10008DE74(a1, v17);
  }
}

void sub_10008A76C(uint64_t a1)
{
}

void sub_10008A778(uint64_t a1, int a2)
{
  if (a1)
  {
    dispatch_block_t v4 = (void *)(a1 + 2296);
    uint64_t v5 = *(void *)(a1 + 2296);
    if (notify_get_state(*(_DWORD *)(a1 + 2304), (uint64_t *)(a1 + 2296)))
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: notify_get_state returned error", @"__WiFiManagerSymptomsRecommendationUpdate"];
      }
    }
    uint64_t v7 = *v4;
    if (a2 || v5 != v7)
    {
      uint64_t v9 = v7 & 1;
      if (qword_10027DD68)
      {
        uint64_t v10 = "TRUE";
        if (!v9) {
          uint64_t v10 = "FALSE";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: LQM-WiFi : symptoms cellular outrank recommendation is set to %s (state=0x%llx)", "__WiFiManagerSymptomsRecommendationUpdate", v10, *v4)];
      }
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000080;
      void context[2] = 0;
      void context[3] = v9;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: null manager", "__WiFiManagerSymptomsRecommendationUpdate"];
    }
  }
}

uint64_t sub_10008A904(uint64_t a1, io_iterator_t iterator)
{
  uint64_t result = IOIteratorNext(iterator);
  if (result)
  {
    io_registry_entry_t v5 = result;
    do
    {
      CFStringRef CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(v5, @"IOInterfaceName", kCFAllocatorDefault, 0);
      if (CFProperty)
      {
        CFStringRef v7 = CFProperty;
        if (sub_1000B1024((uint64_t)CFProperty)) {
          sub_1000B0150(a1, v7);
        }
        CFRelease(v7);
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3 message:"No interface name for IOService"];
        }
      }
      IOObjectRelease(v5);
      uint64_t result = IOIteratorNext(iterator);
      io_registry_entry_t v5 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_10008A9F0(uint64_t a1, io_iterator_t iterator)
{
  uint64_t result = IOIteratorNext(iterator);
  if (result)
  {
    io_registry_entry_t v5 = result;
    do
    {
      if (a1)
      {
        sub_1000BA9AC(a1, v5, -536723200);
        IOServiceAddInterestNotification(*(IONotificationPortRef *)(a1 + 960), v5, "IOGeneralInterest", (IOServiceInterestCallback)sub_1000BA9AC, (void *)a1, (io_object_t *)(a1 + 980));
      }
      IOObjectRelease(v5);
      uint64_t result = IOIteratorNext(iterator);
      io_registry_entry_t v5 = result;
    }
    while (result);
  }
  return result;
}

BOOL sub_10008AA98(uint64_t a1)
{
  return ([*(id *)(a1 + 1120) containsObject:@"wifi_usb_host_notification_override=1"] & 1) != 0|| _os_feature_enabled_impl() && MGGetBoolAnswer() && *(_DWORD *)(a1 + 112) == 1;
}

void sub_10008AB0C(uint64_t a1, io_iterator_t iterator)
{
  io_object_t v4 = IOIteratorNext(iterator);
  if (v4)
  {
    io_registry_entry_t v5 = v4;
    CFStringRef v6 = 0;
    do
    {
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      memset(name, 0, sizeof(name));
      CFMutableDictionaryRef properties = 0;
      uint64_t valuePtr = 0;
      IORegistryEntryCreateCFProperties(v5, &properties, kCFAllocatorDefault, 0);
      if (properties)
      {
        if (IORegistryEntryGetName(v5, name))
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s:%d Usb Host Notification: Failed to get device name \n", "__WiFiManagerhostNotificationUSBDeviceInserted", 4306);
          }
        }
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(properties, @"idVendor");
        if (Value)
        {
          CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr);
          if (valuePtr == 1452)
          {
            int v9 = 1;
            *(unsigned char *)(a1 + 2464) = 1;
          }
          else
          {
            int v9 = 0;
            *(unsigned char *)(a1 + 2464) = 0;
          }
        }
        else
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s:%d Usb Host Notification Insertion: Failed to get Vendor ID \n", "__WiFiManagerhostNotificationUSBDeviceInserted", 4312);
          }
          int v9 = 0;
        }
        if (properties)
        {
          CFRelease(properties);
          CFMutableDictionaryRef properties = 0;
        }
      }
      else
      {
        int v9 = 0;
      }
      int v11 = *(_DWORD *)(a1 + 2460);
      if (v11 >= 0) {
        int v12 = v11 + 1;
      }
      else {
        int v12 = 1;
      }
      *(_DWORD *)(a1 + 2460) = v12;
      if (v6) {
        CFRelease(v6);
      }
      CFStringRef v6 = CFStringCreateWithCString(kCFAllocatorDefault, name, 0x8000100u);
      if (qword_10027DD68)
      {
        if (v9) {
          int v14 = "Y";
        }
        else {
          int v14 = "N";
        }
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s - Usb Insertion Host Notification for %s isApple %s seqNum %d Total %d\n", "__WiFiManagerhostNotificationUSBDeviceInserted", name, v14, *(unsigned int *)(a1 + 2452), *(unsigned int *)(a1 + 2460)];
      }
      IOObjectRelease(v5);
      id v15 = objc_alloc((Class)WiFiUsageMonitor_UsbDevice);
      id v16 = [v15 initWithName:v6 vid:valuePtr isApple:*(unsigned char *)(a1 + 2464) != 0 locationID:0];
      if (v16)
      {
        int v17 = v16;
        [*(id *)(a1 + 2488) addObject:v16];
      }
      io_registry_entry_t v5 = IOIteratorNext(iterator);
    }
    while (v5);
    if (v6) {
      CFRelease(v6);
    }
  }
  if (*(_DWORD *)(a1 + 2460))
  {
    *(_DWORD *)(a1 + 2456) = 1;
    *(CFAbsoluteTime *)(a1 + 2480) = CFAbsoluteTimeGetCurrent();
    sub_100088CD0(a1);
    int v18 = sub_100089024(a1, 1);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s - usbDevices(%lu) %@ \n", "__WiFiManagerhostNotificationUSBDeviceInserted", [*(id *)(a1 + 2488) count], *(void *)(a1 + 2488) message];
    }
    [+[WiFiUsageMonitor sharedInstance] setUsbStatus:1 currentDevices:*(void *)(a1 + 2488) currentNoiseDelta:v18];
  }
}

void sub_10008AE68(uint64_t a1, io_iterator_t iterator)
{
  int v16 = *(_DWORD *)(a1 + 2460);
  io_object_t v4 = IOIteratorNext(iterator);
  if (!v4) {
    goto LABEL_38;
  }
  io_registry_entry_t v5 = v4;
  CFStringRef v6 = 0;
  do
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    memset(name, 0, sizeof(name));
    CFMutableDictionaryRef properties = 0;
    uint64_t valuePtr = 0;
    --*(_DWORD *)(a1 + 2460);
    IORegistryEntryCreateCFProperties(v5, &properties, kCFAllocatorDefault, 0);
    if (properties)
    {
      if (IORegistryEntryGetName(v5, name))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:4, "%s:%d Usb Host Notification: Failed to get IORegistryEntryGetName \n", "__WiFiManagerhostNotificationUSBDeviceRemoved", 4380];
        }
      }
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(properties, @"idVendor");
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr);
        *(unsigned char *)(a1 + 2464) = valuePtr == 1452;
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, "%s:%d Usb Host Notification Removal: Failed to get Vendor ID \n", "__WiFiManagerhostNotificationUSBDeviceRemoved", 4386];
        }
      }
      if (properties)
      {
        CFRelease(properties);
        CFMutableDictionaryRef properties = 0;
      }
    }
    if (v6) {
      CFRelease(v6);
    }
    CFStringRef v6 = CFStringCreateWithCString(kCFAllocatorDefault, name, 0x8000100u);
    if (!v6)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s - Usb Removal Host Notification for %s failed CFStringCreateWithCString seqNum %d Total %d\n", "__WiFiManagerhostNotificationUSBDeviceRemoved", name, *(unsigned int *)(a1 + 2452), *(unsigned int *)(a1 + 2460));
      }
      goto LABEL_28;
    }
    if (![*(id *)(a1 + 2488) count])
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s - Usb Removal Host Notification for %s seqNum %d Total %d\n", "__WiFiManagerhostNotificationUSBDeviceRemoved", name, *(unsigned int *)(a1 + 2452), *(unsigned int *)(a1 + 2460));
      }
LABEL_28:
      goto LABEL_35;
    }
    uint64_t v18 = 0;
    int v19 = &v18;
    uint64_t v20 = 0x2020000000;
    uint64_t v21 = -1;
    uint64_t v10 = *(void **)(a1 + 2488);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    _DWORD v17[2] = sub_1000B993C;
    v17[3] = &unk_100240AF8;
    v17[4] = &v18;
    v17[5] = v6;
    [v10 enumerateObjectsUsingBlock:v17];
    unint64_t v11 = v19[3];
    BOOL v12 = v11 < (unint64_t)[*(id *)(a1 + 2488) count];
    if (v12)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s - Usb Removal Host Notification for %s -- Removing device at index %lu from %@\n", "__WiFiManagerhostNotificationUSBDeviceRemoved", name, v19[3], *(void *)(a1 + 2488) message];
      }
      [*(id *)(a1 + 2488) removeObjectAtIndex:v19[3]];
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s - Usb Removal Host Notification for %s seqNum %d managerTotal %d setTotal:%ld\n", "__WiFiManagerhostNotificationUSBDeviceRemoved", name, *(unsigned int *)(a1 + 2452), *(unsigned int *)(a1 + 2460), objc_msgSend(*(id *)(a1 + 2488), "count"));
      }
    }
    else if (qword_10027DD68)
    {
      [(id)qword_10027DD68 WFLog:4, "%s - Usb Removal Host Notification for %s -- unable to find in %@\n", "__WiFiManagerhostNotificationUSBDeviceRemoved", name, *(void *)(a1 + 2488) message];
    }
    _Block_object_dispose(&v18, 8);
LABEL_35:
    IOObjectRelease(v5);
    io_registry_entry_t v5 = IOIteratorNext(iterator);
  }
  while (v5);
  if (v6) {
    CFRelease(v6);
  }
LABEL_38:
  if (v16 > *(_DWORD *)(a1 + 2460))
  {
    *(_DWORD *)(a1 + 2456) = 0;
    *(CFAbsoluteTime *)(a1 + 2480) = CFAbsoluteTimeGetCurrent();
    sub_100088CD0(a1);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "Usb Host Notification metrics usbDevices removal count %lu %@ \n", [*(id *)(a1 + 2488) count], *(void *)(a1 + 2488) message];
    }
    [+[WiFiUsageMonitor sharedInstance] setUsbStatus:0 currentDevices:*(void *)(a1 + 2488) currentNoiseDelta:-1];
  }
}

void sub_10008B334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008B354(uint64_t a1, io_iterator_t iterator)
{
  uint64_t result = IOIteratorNext(iterator);
  if (result)
  {
    io_registry_entry_t v5 = result;
    do
    {
      uint64_t entryID = 0;
      uint64_t RegistryEntryID = IORegistryEntryGetRegistryEntryID(v5, &entryID);
      if (RegistryEntryID)
      {
        uint64_t v26 = RegistryEntryID;
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Usb Host Notification IORegistryEntryGetRegistryEntryID failed: %08x", v26);
        }
      }
      else if (objc_msgSend(*(id *)(a1 + 2496), "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", entryID)))
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Usb Host Notification Port object already exists for service, ignoring... (registryEntryID: %llu)", entryID);
        }
      }
      else
      {
        CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v5, @"DataRole", kCFAllocatorDefault, 0);
        unsigned int v8 = [(id)(id)CFMakeCollectable(CFProperty) intValue];
        CFTypeRef v9 = IORegistryEntryCreateCFProperty(v5, @"TransportDescription", kCFAllocatorDefault, 0);
        CFTypeRef v10 = (id)CFMakeCollectable(v9);
        CFTypeRef v11 = IORegistryEntryCreateCFProperty(v5, @"TransportType", kCFAllocatorDefault, 0);
        unsigned int v12 = [(id)(id)CFMakeCollectable(v11) intValue];
        unsigned int v13 = v12;
        if (v8 || v12 != 5)
        {
          CFTypeRef v15 = IORegistryEntryCreateCFProperty(v5, @"Vendor ID", kCFAllocatorDefault, 0);
          int v14 = (id)CFMakeCollectable(v15);
        }
        else
        {
          int v14 = +[NSNumber numberWithInt:0xFFFFLL];
        }
        int v16 = v14;
        BOOL v17 = [(NSNumber *)v14 intValue] == 1452 || [(NSNumber *)v16 intValue] == 1452;
        *(unsigned char *)(a1 + 2464) = v17;
        if (v8 <= 1)
        {
          int v18 = *(_DWORD *)(a1 + 2460);
          if (v18 >= 0) {
            int v19 = v18 + 1;
          }
          else {
            int v19 = 1;
          }
          *(_DWORD *)(a1 + 2460) = v19;
          id v20 = [objc_alloc((Class)WiFiUsageMonitor_UsbDevice) initWithName:v10 vid:-[NSNumber intValue](v16, "intValue") isApple:*(unsigned char *)(a1 + 2464) != 0 locationID:0];
          if (v20)
          {
            uint64_t v21 = v20;
            [*(id *)(a1 + 2488) addObject:v20];
          }
          if (*(_DWORD *)(a1 + 2460))
          {
            *(_DWORD *)(a1 + 2456) = 1;
            *(CFAbsoluteTime *)(a1 + 2480) = CFAbsoluteTimeGetCurrent();
            if (v13 == 2)
            {
              --*(_DWORD *)(a1 + 2460);
            }
            else if (v13 == 3)
            {
              sub_100088CD0(a1);
            }
            int v22 = sub_100089024(a1, 1);
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s - Usb Host Notification usbDevices  (%lu) %@ \n", "__WiFiManagerhandleUnifiedE85ServiceAdded", [*(id *)(a1 + 2488) count], *(void *)(a1 + 2488) message];
            }
            [+[WiFiUsageMonitor sharedInstance] setUsbStatus:1 currentDevices:*(void *)(a1 + 2488) currentNoiseDelta:v22];
          }
        }
        notificatioint n = 0;
        if (!IOServiceAddInterestNotification(*(IONotificationPortRef *)(a1 + 960), v5, "IOGeneralInterest", (IOServiceInterestCallback)sub_1000B99B8, (void *)a1, &notification))
        {
          if (notification)
          {
            long long v24 = *(void **)(a1 + 2496);
            long long v25 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
            [v24 setObject:v25 forKey:[NSNumber numberWithUnsignedLongLong:entryID]];
          }
          goto LABEL_29;
        }
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4, @"%s: Usb Host Notification Error: IOServiceAddInterestNotification failed", @"__WiFiManagerhandleUnifiedE85ServiceAdded"];
        }
      }
LABEL_29:
      IOObjectRelease(v5);
      uint64_t result = IOIteratorNext(iterator);
      io_registry_entry_t v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_10008B720(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  size_t v26 = 255;
  if (a3 <= -536870145)
  {
    if (a3 == -536870272)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Received kIOMessageSystemWillSleep"];
      }
      char v14 = *(unsigned char *)(a1 + 26);
      if (v14)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "System Sleep notification, Disabling auto-join");
        }
        sub_100003D18(a1, 0);
        char v14 = 1;
      }
      *(unsigned char *)(a1 + 1329) = v14;
      sub_10002454C(a1);
      sub_1000BA8CC(a1, -536870272);
      uint64_t context = a1;
      unint64_t v28 = 0xAAAAAAAA00000051;
      uint64_t v29 = 0;
      uint64_t v30 = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
    }
    else if (a3 == -536870256)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Received kIOMessageSystemWillNotSleep"];
      }
      if ((*(unsigned char *)(a1 + 1329) || *(unsigned char *)(a1 + 1176)) && !*(unsigned char *)(a1 + 26))
      {
        if (qword_10027DD68)
        {
          if (*(unsigned char *)(a1 + 1329)) {
            CFTypeRef v10 = "Re-enabling auto-join";
          }
          else {
            CFTypeRef v10 = "Enabling auto-join for LPAS";
          }
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "System Sleep Cancelled notification, %s", v10, v26);
        }
        sub_100003D18(a1, 1);
      }
      *(unsigned char *)(a1 + 1329) = 0;
      if ((*(unsigned char *)(a1 + 832) & 0xF) == 0) {
        sub_1000241A4(a1);
      }
      int v11 = -536870256;
LABEL_23:
      sub_1000BA8CC(a1, v11);
      goto LABEL_59;
    }
    goto LABEL_59;
  }
  if (a3 == -536870144)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"Received kIOMessageSystemHasPoweredOn"];
    }
    sysctlbyname("kern.wakereason", (void *)(a1 + 530), &v26, 0, 0);
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"System wake reason: %s" args:(a1 + 530, v26)];
    }
    if (!*(unsigned char *)(a1 + 1329) && !*(unsigned char *)(a1 + 1176) || *(unsigned char *)(a1 + 26)) {
      goto LABEL_53;
    }
    if (qword_10027DD68)
    {
      if (*(unsigned char *)(a1 + 1329)) {
        int v19 = "Re-enabling auto-join";
      }
      else {
        int v19 = "Enabling auto-join for LPAS";
      }
      [((id)qword_10027DD68) WFLog:3 message:@"System Powered ON notification %s" v19];
    }
    *(unsigned char *)(a1 + 2104) = 0;
    if (sub_100004688(a1))
    {
      if (*(double *)(a1 + 2096) <= 0.0 || CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 2096) <= 360.0)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "AlwaysOnWiFi: Reschedule Scan after %d Seconds ", 360);
        }
        *(unsigned char *)(a1 + 2104) = 1;
        int v22 = *(NSObject **)(a1 + 1576);
        dispatch_time_t v23 = dispatch_time(0, 360000000000);
        dispatch_source_set_timer(v22, v23, 0xFFFFFFFFFFFFFFFFLL, 0);
        goto LABEL_53;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "AlwaysOnWiFi: Scan time expired, Re-Enable Auto-Join");
      }
      *(CFAbsoluteTime *)(a1 + 2096) = CFAbsoluteTimeGetCurrent();
    }
    sub_100003D18(a1, 1);
LABEL_53:
    *(unsigned char *)(a1 + 1329) = 0;
    if ((*(unsigned char *)(a1 + 832) & 0xF) == 0) {
      sub_1000241A4(a1);
    }
    uint64_t context = a1;
    unint64_t v28 = 0xAAAAAAAA0000004ELL;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
    sub_1000BA8CC(a1, -536870144);
    if (*(unsigned char *)(a1 + 1520))
    {
      CFStringRef v24 = *(const __CFString **)(a1 + 1512);
      if (v24)
      {
        CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v24);
        sub_1000A1C68(a1, 1, Copy);
        if (Copy) {
          CFRelease(Copy);
        }
      }
    }
    goto LABEL_59;
  }
  if (a3 == -536870112)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"Received kIOMessageSystemWillPowerOn"];
    }
    int v11 = -536870112;
    goto LABEL_23;
  }
LABEL_59:
  IOAllowPowerChange(*(_DWORD *)(a1 + 1028), a4);
}

void sub_10008BBFC(uint64_t a1, int a2, uint64_t a3, NSObject **cf)
{
  if (a3)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: BT callback failure, result %d", "__WiFiManagerBluetoothCallback", a3];
    }
    goto LABEL_21;
  }
  if (!cf)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: BT callback failure, null userData", @"__WiFiManagerBluetoothCallback", v21];
    }
    goto LABEL_21;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  uint64_t v8 = qword_10027D6A0;
  if (!qword_10027D6A0)
  {
    pthread_once(&stru_10027CA08, (void (*)(void))sub_10007F8DC);
    uint64_t v8 = qword_10027D6A0;
  }
  if (v7 != v8)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: BT callback failure, invalid userData type", "__WiFiManagerBluetoothCallback", v21];
    }
    goto LABEL_21;
  }
  if (!cf[4])
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager queue null" : @"__WiFiManagerBluetoothCallback" : v21];
    }
    goto LABEL_21;
  }
  if ((a2 - 1) < 2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"Mobile Bluetooth session terminated"];
    }
    unsigned int v13 = cf[4];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000BB438;
    block[3] = &unk_100240BD8;
    void block[4] = cf;
    int v23 = a2;
    char v14 = block;
LABEL_17:
    dispatch_async(v13, v14);
    return;
  }
  if (a2 == 3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Failed to attach to Mobile Bluetooth", v20, v21);
    }
    goto LABEL_21;
  }
  if (!a2)
  {
    if (!a1)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: session null" : @"__WiFiManagerBluetoothCallback" : v21];
      }
      goto LABEL_21;
    }
    uint64_t v9 = BTServiceAddCallbacksWithFilter();
    if (v9)
    {
      uint64_t v10 = v9;
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Failed to obtain Bluetooth AudioJack. result=0x%X", v10, v21);
      }
LABEL_21:
LABEL_23:
      return;
    }
    unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t Default = BTLocalDeviceGetDefault();
    if (Default)
    {
      uint64_t v16 = Default;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, @"Failed to obtain Bluetooth Local Device. result=0x%X", v16];
      }
      goto LABEL_23;
    }
    long long v25 = off_100240BA0;
    uint64_t v26 = 0;
    uint64_t v17 = BTLocalDeviceAddCallbacks();
    if (v17)
    {
      uint64_t v18 = v17;
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:4, @"Failed to set Bluetooth Local Device callbacks.  result=0x%X", v18];
      }
      goto LABEL_23;
    }
    unsigned int v13 = cf[4];
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_1000BB418;
    v24[3] = &unk_100240BB8;
    v24[4] = cf;
    v24[5] = a1;
    v24[6] = v27;
    char v14 = v24;
    goto LABEL_17;
  }
}

void sub_10008BFD0(uint64_t a1)
{
}

void sub_10008BFD8(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 32))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000B9EB8;
    block[3] = &unk_10023EAF8;
    void block[4] = a1;
    dispatch_async((dispatch_queue_t)qword_10027DD88, block);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager or queue." arguments:("__WiFiManagerCellularDataRegistrationCallback", 0x0)];
    }
  }
}

void sub_10008C0C0(uint64_t a1)
{
}

void sub_10008C0C8(uint64_t a1)
{
}

void sub_10008C0D0(uint64_t a1)
{
  if ([+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection])
  {
    [+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection];
    _CTServerConnectionRegisterBlockForNotification();
    [+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection];
    _CTServerConnectionRegisterBlockForNotification();
    [+[WiFiUserInteractionMonitor sharedInstance] ctServerConnection];
    _CTServerConnectionRegisterBlockForNotification();
    sub_10008BFD8(*(void *)(a1 + 32));
  }
}

__CTServerConnection *sub_10008C248()
{
  CFStringRef v0 = +[WiFiUserInteractionMonitor sharedInstance];

  return [(WiFiUserInteractionMonitor *)v0 ctServerConnection];
}

void sub_10008C278(uint64_t a1)
{
}

void sub_10008C280(uint64_t a1)
{
}

void sub_10008C288(uint64_t a1)
{
}

void sub_10008C290(uint64_t a1, int a2, uint64_t a3)
{
  int v5 = a2 != 0;
  if (qword_10027DD68)
  {
    CFTypeID v7 = "FALSE";
    if (a2) {
      CFTypeID v7 = "TRUE";
    }
    [((id)qword_10027DD68) WFLog:message:3, "%s: builtInReceiver = %s", "__WiFiManagerAudioRouteCallback", v7];
  }
  if (*(_DWORD *)(a3 + 1456) != v5)
  {
    *(_DWORD *)(a3 + 1456) = v5;
    context[0] = a3;
    context[1] = 0xAAAAAAAA00000009;
    void context[2] = 0;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_100020954, context);
  }
}

void sub_10008C364(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 1592);
  *(_DWORD *)(a1 + 1592) = -1;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1000A236C;
  handler[3] = &unk_1002407B0;
  handler[4] = a1;
  notify_register_dispatch("com.apple.system.lowpowermode", (int *)(a1 + 1592), (dispatch_queue_t)qword_10027DD88, handler);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: battery save mode registered. Token=%d", "WiFiBatterySaveModeConfiguration", *v2);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A2374;
  block[3] = &unk_10023EAF8;
  void block[4] = a1;
  dispatch_async((dispatch_queue_t)qword_10027DD88, block);
}

id sub_10008C49C(void *a1, uint64_t a2)
{
  double v4 = 120.0;
  double v5 = sub_10008C5B4(a1, @"SoftErrorReportingTimeout", 120.0);
  if (v5 >= 0.0) {
    double v4 = v5;
  }
  double v6 = 86400.0;
  double v7 = sub_10008C5B4(a1, @"SoftErrorUIReportingTimeout", 86400.0);
  if (v7 >= 0.0) {
    double v6 = v7;
  }
  v9[0] = @"intervalForMaxNonUIActions";
  v9[1] = @"intervalForMaxUIActions";
  v10[0] = +[NSNumber numberWithDouble:v4];
  v10[1] = +[NSNumber numberWithDouble:v6];
  return [objc_alloc((Class)WiFiSoftError) initWithName:a2 andParams:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 2)];
}

double sub_10008C5B4(void *a1, const __CFString *a2, double a3)
{
  double v4 = sub_10000D934(a1, a2);
  double valuePtr = a3;
  if (v4)
  {
    CFNumberRef v5 = v4;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v5))
    {
      CFNumberGetValue(v5, kCFNumberDoubleType, &valuePtr);
      return valuePtr;
    }
  }
  return a3;
}

void sub_10008C624(uint64_t a1)
{
  uint64_t v2 = sub_1000BEE54(*(void *)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 32), (uint64_t)sub_10008C6C8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    double v4 = *(NSObject **)(v3 + 32);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10008C758;
    v5[3] = &unk_100240790;
    void v5[4] = v2;
    v5[5] = v3;
    dispatch_async(v4, v5);
  }
}

void sub_10008C6C8(uint64_t a1, int a2, double a3)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 1408) = a2;
    *(double *)(a1 + 1416) = a3;
    v7[0] = a1;
    v7[1] = 0xAAAAAAAA0000003CLL;
    CFTypeRef v7[2] = 0;
    v7[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v7);
  }
}

void sub_10008C758(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 40) + 40) = *(void *)(a1 + 32);
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: WiFiManagerMotionServices initialized", "WiFiManagerScheduleWithQueue_block_invoke_9"];
  }
}

void sub_10008C7CC(uint64_t a1, void *a2)
{
  if (a1 && _os_feature_enabled_impl())
  {
    if ([a2 isEqualToString:@"Short"])
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: voicePromptStyle is Short"];
      }
      char v6 = 1;
LABEL_11:
      *(unsigned char *)(a1 + 1424) = v6;
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000078;
      void context[2] = 0;
      void context[3] = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
      goto LABEL_12;
    }
    if ([a2 isEqualToString:@"Normal"])
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: voicePromptStyle is Normal", "__WiFiManagerAVSystemMonitorCallback")
      }
      char v6 = 0;
      goto LABEL_11;
    }
  }
LABEL_12:
}

id sub_10008C908(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 64) initializeWithManager:*(void *)(a1 + 32) queue:*(void *)(*(void *)(a1 + 32) + 32)];
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 64);

  return [v2 startMonitoringCarSession];
}

void sub_10008C950(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (a2)
    {
      if (*(void *)(a1 + 192))
      {
        CFTypeID v5 = CFGetTypeID(a2);
        if (v5 == CFDictionaryGetTypeID()) {
          [*(id *)(a1 + 192) setLocaleTestParams:a2];
        }
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: manager is null" args:("__WiFiManagerSetLocaleTestParams")];
    }
  }
}

void sub_10008CA14(uint64_t a1, int val)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && *(_DWORD *)(v2 + 2400) == val)
  {
    uint64_t state64 = 0;
    if (notify_is_valid_token(val)) {
      notify_get_state(val, &state64);
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"%s: received LPEM notification with reason code (%llu)", @"WiFiManagerScheduleWithQueue_block_invoke_11", state64];
    }
    uint64_t v6 = *(void *)(a1 + 32);
    if (state64)
    {
      *(unsigned char *)(v6 + 2404) = 1;
      uint64_t v7 = v6;
      unsigned int v8 = 0;
    }
    else
    {
      if (!*(unsigned char *)(v6 + 2404)) {
        return;
      }
      *(unsigned char *)(v6 + 2404) = 0;
      unsigned int v8 = sub_10008D060((void *)v6);
      uint64_t v7 = v6;
    }
    sub_10008CB00(v7, v8, @"LPEM");
  }
}

void sub_10008CB00(uint64_t a1, unsigned int a2, const void *a3)
{
  if (!a1) {
    goto LABEL_62;
  }
  if (*(unsigned char *)(a1 + 1328))
  {
LABEL_3:
    uint64_t v7 = *(const void **)(a1 + 320);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 320) = 0;
    }
    goto LABEL_5;
  }
  if (!a3 || (unsigned int v20 = [&off_100264150 containsObject:a3], a2 != 1) || !v20)
  {
    if (a2 || !*(void *)(a1 + 320)) {
      goto LABEL_5;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: power turned OFF before first unlock by %@, overrides earlier power ON by %@", "WiFiManagerSetPowerExt", a3, *(void *)(a1 + 320) message];
    }
    goto LABEL_3;
  }
  uint64_t v21 = *(const void **)(a1 + 320);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(a1 + 320) = 0;
  }
  *(void *)(a1 + 320) = CFRetain(a3);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: power turned ON before first unlock by %@", "WiFiManagerSetPowerExt", *(void *)(a1 + 320) message];
  }
LABEL_5:
  unsigned int v8 = a2;
  if ((MGGetBoolAnswer() & 1) == 0)
  {
    unsigned int v8 = a2;
    if (!*(void *)(a1 + 320))
    {
      unsigned int v8 = a2;
      if (!*(unsigned char *)(a1 + 1328))
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: device hasn't been unlocked since boot. Overriding power state to OFF.", "WiFiManagerSetPowerExt")];
        }
        unsigned int v8 = 0;
      }
    }
  }
  if (*(_DWORD *)(a1 + 316) != v8)
  {
    if (a3)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Turning WiFiManager %s by %@", sub_10005A970(v8), a3 message];
      }
      if (*(void *)(a1 + 2056))
      {
        CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
        if (CTGreenTeaOsLogHandle)
        {
          uint64_t v18 = CTGreenTeaOsLogHandle;
          if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
          {
            int v19 = "yes";
            *(_DWORD *)double valuePtr = 138413314;
            *(void *)&valuePtr[4] = a3;
            *(void *)&v29[2] = "com.apple.wifi.manager";
            *(_WORD *)uint64_t v29 = 2080;
            if (!v8) {
              int v19 = "no";
            }
            *(_WORD *)&v29[10] = 2080;
            uint64_t v30 = "wifid";
            __int16 v31 = 2080;
            long long v32 = "WiFiManagerSetPowerExt";
            __int16 v33 = 2080;
            unsigned int v34 = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "<%@>[%s][%s]:[%s]WLAN enabled..%s", valuePtr, 0x34u);
          }
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Turning WiFiManager %s", sub_10005A970(v8));
      }
    }
    *(_DWORD *)(a1 + 316) = v8;
    if (*(unsigned char *)(a1 + 1328) == 1)
    {
      if (v8 == 1)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: Registering with coex manager" arguments:("WiFiManagerSetPowerExt", 0)];
        }
        sub_1001871D8(a1);
        [*(id *)(a1 + 192) determineAndSetLocale:0];
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, "%s: Un-registering with coex manager", "WiFiManagerSetPowerExt"];
        }
        sub_1001875B4((xpc_object_t *)(a1 + 1320));
        if (&_RDUpdateCountryCodeFromWiFiAPs) {
          sub_10009211C(a1, 0, 1u);
        }
      }
    }
    *(void *)double valuePtr = a1;
    *(_DWORD *)uint64_t v29 = -1431655766;
    *(_DWORD *)&valuePtr[8] = 18;
    long long v25 = (const char *)*(unsigned int *)(a1 + 316);
    *(void *)&v29[4] = 0;
    uint64_t v30 = v25;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, valuePtr);
    if (*(_DWORD *)(a1 + 316) == 1)
    {
      if (!_os_feature_enabled_impl())
      {
        sub_10008DE74(a1, 2);
        if (a2) {
          goto LABEL_61;
        }
LABEL_64:
        BOOL v26 = sub_1000920B4(a1, a3);
        if (a3 && !v26)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: %@ is not a user-interactive client, not persisting its requested power state %s to disk", "WiFiManagerSetPowerExt", a3, sub_10005A970(0) message];
          }
          goto LABEL_62;
        }
LABEL_61:
        sub_100091DB4((void *)a1, @"AllowEnable", a2, 0);
        goto LABEL_62;
      }
      sub_1000047D4(a1, 8);
    }
    if (a2) {
      goto LABEL_61;
    }
    goto LABEL_64;
  }
  uint64_t v10 = sub_10000D934((void *)a1, @"AllowEnable");
  if (!v10) {
    goto LABEL_21;
  }
  CFNumberRef v11 = v10;
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(v11))
  {
    *(_DWORD *)double valuePtr = -1431655766;
    CFNumberGetValue(v11, kCFNumberIntType, valuePtr);
    int v13 = *(_DWORD *)valuePtr;
    if (*(_DWORD *)valuePtr >= 5u)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: Invalid saved power state: %d ", "WiFiManagerSetPowerExt", *(unsigned int *)valuePtr);
      }
      int v13 = *(_DWORD *)valuePtr;
    }
    if (v13 != a2)
    {
LABEL_21:
      if (a2) {
        goto LABEL_61;
      }
      BOOL v15 = sub_1000920B4(a1, a3);
      if (!a3 || v15) {
        goto LABEL_61;
      }
    }
  }
LABEL_62:
}

BOOL sub_10008D060(void *a1)
{
  BOOL valuePtr = 1;
  uint64_t v2 = sub_10000D934(a1, @"AllowEnable");
  if (!v2) {
    return valuePtr;
  }
  CFNumberRef v3 = v2;
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(v3))
  {
    CFNumberGetValue(v3, kCFNumberCFIndexType, &valuePtr);
    return valuePtr;
  }
  CFTypeID v5 = CFBooleanGetTypeID();
  if (v5 != CFGetTypeID(v3))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"__WiFiManagerReadPowerState: cannot read BOOLean value"];
    }
    goto LABEL_9;
  }
  BOOL valuePtr = v3 == kCFBooleanTrue;
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  if (v6)
  {
    CFNumberRef v7 = v6;
    sub_100083E60(a1, @"AllowEnable", v6, 1);
    CFRelease(v7);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: error creating CFNumber" : @"__WiFiManagerReadPowerState"];
    }
  }
  CFDictionaryRef v10 = (const __CFDictionary *)CFPreferencesCopyAppValue(@"original-network-state", @"com.apple.preferences.network");
  if (v10)
  {
    CFDictionaryRef v11 = v10;
    MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v10);
    CFRelease(v11);
    if (MutableCopy)
    {
      uint64_t v21 = 1;
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(MutableCopy, @"wifi-network");
      if (Value)
      {
        CFBooleanRef v14 = Value;
        CFTypeID v15 = CFBooleanGetTypeID();
        if (v15 == CFGetTypeID(v14))
        {
          uint64_t v16 = 4;
          if (v14 == kCFBooleanTrue) {
            uint64_t v16 = 1;
          }
          uint64_t v21 = v16;
          CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &v21);
          if (v17)
          {
            CFNumberRef v18 = v17;
            CFDictionarySetValue(MutableCopy, @"wifi-network", v17);
            CFPreferencesSetAppValue(@"original-network-state", MutableCopy, @"com.apple.preferences.network");
            CFRelease(v18);
          }
          else
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: error creating CFNumber", "__WiFiManagerReadPowerState")];
            }
          }
        }
      }
      CFPreferencesAppSynchronize(@"com.apple.preferences.network");
      CFRelease(MutableCopy);
      return valuePtr;
    }
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, "%s: no previousSettings", "__WiFiManagerReadPowerState"];
    }
LABEL_9:
  }
  return valuePtr;
}

void sub_10008D32C(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(WiFiSmartCoverStateObserver);
  if (v2)
  {
    CFNumberRef v3 = v2;
    [(WiFiSmartCoverStateObserver *)v2 registerSmartCoverStateCallback];
    *(void *)(*(void *)(a1 + 32) + 48) = v3;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, @"%s: WiFiManager Smart Cover Observer initialized", @"WiFiManagerScheduleWithQueue_block_invoke_12"];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: WiFiManager Unable to register smartCoverCallback", @"WiFiManagerScheduleWithQueue_block_invoke_12"];
    }
  }
}

void sub_10008D3EC(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"CB06911C-82BE-44A9-8359-F8C02AAF82DB";
  values[1] = kCFBooleanTrue;
  CFDictionaryRef v2 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    if (!*(unsigned char *)(a1 + 2288))
    {
      *(unsigned char *)(a1 + 2288) = 1;
      if (MGGetBoolAnswer())
      {
        if (*(unsigned char *)(a1 + 314)
          && [+[WiFiUserInteractionMonitor sharedInstance] isCallKitActive])
        {
          double v4 = *(void **)(a1 + 1480);
          if ([v4 isMegaWiFiProfileInstalled])
          {
            if (*(double *)(a1 + 2280) != 0.0) {
              *(void *)(a1 + 2280) = 0;
            }
          }
          else
          {
            [v4 installMegaWiFiProfile];
            *(unsigned char *)(a1 + 2276) = 1;
            *(void *)(a1 + 2280) = 0;
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3, @"%s: MegaWiFiProfile has been installed", @"WiFiManagerWiFiFaceTimeCallStart"];
            }
          }
        }
      }
    }
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041;
    void context[2] = v3;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    CFRelease(v3);
  }
}

void sub_10008D59C(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"CB06911C-82BE-44A9-8359-F8C02AAF82DB";
  values[1] = kCFBooleanFalse;
  CFDictionaryRef v2 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    if (*(unsigned char *)(a1 + 2288))
    {
      *(unsigned char *)(a1 + 2288) = 0;
      if (MGGetBoolAnswer())
      {
        if (*(unsigned char *)(a1 + 2276))
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:message:3, @"%s: MegaWiFiProfile has been scheduled for removal", @"WiFiManagerWiFiFaceTimeCallEnd"];
          }
          *(CFAbsoluteTime *)(a1 + 2280) = CFAbsoluteTimeGetCurrent();
        }
      }
    }
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041;
    void context[2] = v3;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    CFRelease(v3);
  }
}

void sub_10008D704(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"kApple80211KeyGameModeUUIDString";
  values[1] = kCFBooleanTrue;
  CFDictionaryRef v2 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    if (!*(unsigned char *)(a1 + 2289)) {
      *(unsigned char *)(a1 + 2289) = 1;
    }
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041;
    void context[2] = v2;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    CFRelease(v3);
  }
}

void sub_10008D80C(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"kApple80211KeyGameModeUUIDString";
  values[1] = kCFBooleanFalse;
  CFDictionaryRef v2 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    if (*(unsigned char *)(a1 + 2289)) {
      *(unsigned char *)(a1 + 2289) = 0;
    }
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041;
    void context[2] = v2;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    CFRelease(v3);
  }
}

uint64_t sub_10008D910(uint64_t a1, const void *a2, int a3)
{
  CFArrayRef v5 = sub_10000500C(*(CFArrayRef *)(a1 + 32));
  if (v5)
  {
    CFArrayRef v6 = v5;
    CFIndex Count = CFArrayGetCount(v5);
    if (Count < 1)
    {
      char v10 = 0;
    }
    else
    {
      CFIndex v8 = Count;
      CFIndex v9 = 0;
      char v10 = 0;
      do
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
        uint64_t v12 = sub_100016E18((uint64_t)ValueAtIndex);
        if (v12 && sub_100016E20(v12)) {
          char v10 = sub_1001123A0(ValueAtIndex, a2, a3);
        }
        ++v9;
      }
      while (v8 != v9);
    }
    CFRelease(v6);
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t sub_10008D9D0(uint64_t a1, const __CFData *a2)
{
  CFArrayRef v3 = sub_10000500C(*(CFArrayRef *)(a1 + 32));
  if (!v3) {
    return 4294963365;
  }
  CFArrayRef v4 = v3;
  CFIndex Count = CFArrayGetCount(v3);
  if (Count < 1)
  {
    uint64_t v8 = 4294963365;
  }
  else
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    uint64_t v8 = 0;
    do
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v7);
      uint64_t v10 = sub_100016E18((uint64_t)ValueAtIndex);
      if (v10)
      {
        uint64_t v11 = sub_100016E20(v10);
        if (v11)
        {
          uint64_t v8 = sub_100129C58((uint64_t)ValueAtIndex, v11, a2);
          if (v8)
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:3, "%s: NDD trigger failed[%d]\n", "__WiFiManagerPerformNDD", v8];
            }
          }
        }
      }
      ++v7;
    }
    while (v6 != v7);
  }
  CFRelease(v4);
  return v8;
}

void sub_10008DAE0(id a1, CWFXPCEvent *a2)
{
  id v3 = +[WiFiXPCManager sharedXPCManager];

  [v3 sendXPCEvent:a2];
}

uint64_t sub_10008DB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1 || !*(void *)(a1 + 1792)) {
    return 4294963389;
  }
  uint64_t result = 4294963396;
  if (a3 && a4)
  {
    if (a5)
    {
      v7[0] = CWFNDDREQUESTPARAMSKEY;
      v7[1] = CWFNDDREQUESTCLIENTKEY;
      v8[0] = a3;
      v8[1] = a4;
      return (uint64_t)[*(id *)(a1 + 1792) handleRequest:a2 withData:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 2) interface:a5];
    }
  }
  return result;
}

void sub_10008DBF4(uint64_t a1, void *a2, void *a3, void *a4, int a5)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 2346) = 0;
    uint64_t v11 = (CFTypeRef *)(a1 + 2368);
    *(unsigned char *)(a1 + 2392) = 0;
    if (a5)
    {
      if (*v11)
      {
        CFRelease(*v11);
        *uint64_t v11 = 0;
      }
      uint64_t v12 = *(const void **)(a1 + 2376);
      if (v12)
      {
        CFRelease(v12);
        *(void *)(a1 + 2376) = 0;
      }
      int v13 = *(const void **)(a1 + 2384);
      if (v13)
      {
        CFRelease(v13);
        *(void *)(a1 + 2384) = 0;
      }
      *(void *)(a1 + 2368) = [a2 copy];
      *(void *)(a1 + 2376) = [a3 copy];
      *(void *)(a1 + 2384) = [a4 copy];
      *(unsigned char *)(a1 + 2392) = 1;
      *(unsigned char *)(a1 + 2346) = 1;
    }
    v14[0] = a1;
    v14[1] = 0xAAAAAAAA0000007FLL;
    v14[2] = a1 + 2368;
    v14[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v14);
  }
}

void sub_10008DCFC(uint64_t a1)
{
  CFDictionaryRef v2 = *(const __SCDynamicStore **)(a1 + 72);
  if (v2)
  {
    SCDynamicStoreSetDispatchQueue(v2, 0);
    id v3 = *(const void **)(a1 + 72);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 72) = 0;
    }
  }
}

void sub_10008DD3C(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 64) = 0;
}

uint64_t sub_10008DD7C(uint64_t a1)
{
  uint64_t result = notify_is_valid_token(*(_DWORD *)(a1 + 1592));
  if (result)
  {
    uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1592));
    *(_DWORD *)(a1 + 1592) = -1;
  }
  return result;
}

void sub_10008DDB8(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s", "WiFiManagerEnable")];
  }
  if (a1 && !*(unsigned char *)(a1 + 25))
  {
    *(unsigned char *)(a1 + 25) = 1;
    sub_100003D18(a1, 1);
  }
}

void sub_10008DE58(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 25))
    {
      *(unsigned char *)(a1 + 25) = 0;
      sub_100003D18(a1, 0);
    }
  }
}

void sub_10008DE74(uint64_t a1, int a2)
{
  int v5 = a2;
  if (_os_feature_enabled_impl())
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s not allowed with Unified Auto-Join" :@"WiFiManagerAssociate"];
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    sub_10008DF64(a1, *(_DWORD *)(a1 + 2072), *(CFTypeRef *)(a1 + 2080), 0);
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000000DLL;
    void context[2] = &v5;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  }
}

void sub_10008DF64(uint64_t a1, unsigned int a2, CFTypeRef cf, int a4)
{
  int v8 = *(_DWORD *)(a1 + 2072);
  if (v8 == a2)
  {
    unsigned int v9 = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 2072) = a2;
    unsigned int v9 = a2;
  }
  uint64_t v10 = *(const void **)(a1 + 2080);
  if (!cf)
  {
    if (!v10)
    {
      int v13 = 0;
      goto LABEL_25;
    }
    CFBooleanRef v14 = *(const void **)(a1 + 2080);
LABEL_22:
    CFRelease(v14);
    *(void *)(a1 + 2080) = 0;
LABEL_23:
    unsigned int v9 = *(_DWORD *)(a1 + 2072);
    int v13 = 1;
    goto LABEL_25;
  }
  if (v10)
  {
    int v11 = CFEqual(cf, v10);
    CFTypeRef v12 = *(CFTypeRef *)(a1 + 2080);
    if (v11)
    {
      int v13 = 0;
      goto LABEL_13;
    }
    if (v12)
    {
      CFRelease(v12);
      *(void *)(a1 + 2080) = 0;
    }
  }
  CFTypeRef v12 = CFRetain(cf);
  *(void *)(a1 + 2080) = v12;
  int v13 = 1;
LABEL_13:
  if (!v12) {
    goto LABEL_25;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  if (Current >= CFDateGetAbsoluteTime(*(CFDateRef *)(a1 + 2080)))
  {
    if (!*(_DWORD *)(a1 + 2072)) {
      goto LABEL_25;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: no longer in disabled period. Re-enabling join recommendation for %@ networks", "WiFiManagerSetJoinRecommendationMode", sub_10008F50C(*(_DWORD *)(a1 + 2072)) message];
    }
    CFBooleanRef v14 = *(const void **)(a1 + 2080);
    if (!v14) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: join recommendation is disabled by user until %@", "WiFiManagerSetJoinRecommendationMode", *(void *)(a1 + 2080) message];
  }
  unsigned int v9 = 0;
LABEL_25:
  context[0] = a1;
  context[1] = 0xAAAAAAAA0000001ALL;
  void context[2] = v9;
  void context[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  if (v8 == a2)
  {
    if (!v13) {
      return;
    }
  }
  else
  {
    CFStringRef v18 = sub_10008F50C(*(_DWORD *)(a1 + 2072));
    if (v18) {
      sub_100083E60((void *)a1, @"JoinRecommendationMode", v18, a4);
    }
    if (!v13) {
      goto LABEL_32;
    }
  }
  sub_100083E60((void *)a1, @"JoinRecommendationDisabledUntil", *(const void **)(a1 + 2080), a4);
LABEL_32:
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: JoinRecommendation: mode: %@, disabledUntil: %@", "WiFiManagerSetJoinRecommendationMode", sub_10008F50C(*(_DWORD *)(a1 + 2072)), *(void *)(a1 + 2080) message];
  }
}

void sub_10008E1C8(uint64_t a1)
{
  v1[0] = a1;
  v1[1] = 0xAAAAAAAA00000013;
  v1[2] = 0;
  v1[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v1);
}

void sub_10008E218(uint64_t a1, const void *a2, int a3)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  uint64_t v78 = a1;
  CFIndex v6 = *(const __SCPreferences **)(a1 + 1064);
  CFStringRef v84 = a2;
  id v76 = (id)sub_10000D990((uint64_t)"WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent");
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null ifName." : @"WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent"];
    }
    if (Mutable) {
      goto LABEL_105;
    }
    goto LABEL_106;
  }
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: null scSetsToModify.", @"WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent"];
    }
    goto LABEL_106;
  }
  if (!v6)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null preferences." args:("WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent")];
    }
    goto LABEL_138;
  }
  if (!sub_10005A1E0(v6))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: prefLock failed", @"WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent"];
    }
LABEL_138:
    goto LABEL_105;
  }
  SCPreferencesRef prefs = v6;
  CFArrayRef v7 = SCNetworkSetCopyAll(v6);
  CFArrayRef v8 = v7;
  if (!v7)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:4, "%s: null scSets.", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent"];
    }
    CFArrayRef v39 = 0;
    goto LABEL_89;
  }
  CFMutableArrayRef theArray = Mutable;
  CFArrayRef v80 = v7;
  if (CFArrayGetCount(v7) < 1) {
    goto LABEL_66;
  }
  CFIndex v9 = 0;
  while (2)
  {
    CFNumberRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v8, v9);
    if (!ValueAtIndex) {
      goto LABEL_60;
    }
    int v11 = ValueAtIndex;
    CFStringRef SetID = SCNetworkSetGetSetID(ValueAtIndex);
    CFStringRef Name = SCNetworkSetGetName(v11);
    if (Name)
    {
      BOOL v14 = CFEqual(@"Automatic", Name) != 0;
      if (!SetID) {
        goto LABEL_24;
      }
    }
    else
    {
      BOOL v14 = 0;
      if (!SetID) {
        goto LABEL_24;
      }
    }
    CFDictionaryRef v15 = *(const __CFDictionary **)(v78 + 208);
    if (v15)
    {
      int v16 = CFDictionaryContainsValue(v15, SetID);
      BOOL v17 = v16 != 0;
      if (v16) {
        BOOL v18 = v14;
      }
      else {
        BOOL v18 = 0;
      }
      if (v18)
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:4, "%s: network set %@ is in both automatic and custom network sets", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", SetID message];
        }
        BOOL v17 = 1;
      }
      if (!v14) {
        goto LABEL_25;
      }
      goto LABEL_22;
    }
LABEL_24:
    BOOL v17 = 0;
    if (!v14)
    {
LABEL_25:
      char v21 = !v17;
      if (a3) {
        char v21 = 1;
      }
      if (v21) {
        goto LABEL_60;
      }
      BOOL v82 = v14;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: examining <%@> network set %@ for a network service matching BSD name %@ and interface type %@", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", Name, SetID, v84, kSCNetworkInterfaceTypeIEEE80211 message];
      }
      goto LABEL_30;
    }
LABEL_22:
    BOOL v82 = v14;
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: examining <Automatic> network set %@ for a network service matching BSD name %@ and interface type %@", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", SetID, v84, kSCNetworkInterfaceTypeIEEE80211, v75 message];
    }
LABEL_30:
    CFArrayRef v22 = SCNetworkSetCopyServices(v11);
    CFArrayRef v23 = v22;
    if (!v22 || CFArrayGetCount(v22) < 1) {
      goto LABEL_62;
    }
    CFIndex v24 = 0;
    int v25 = 1;
    do
    {
      BOOL v26 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v23, v24);
      if (v26)
      {
        unint64_t v27 = v26;
        Interface = SCNetworkServiceGetInterface(v26);
        if (Interface)
        {
          uint64_t v29 = Interface;
          CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
          CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(v29);
          CFStringRef v32 = InterfaceType;
          if (!BSDName)
          {
            if (!InterfaceType) {
              goto LABEL_53;
            }
            int v35 = CFEqual(InterfaceType, kSCNetworkInterfaceTypeIEEE80211);
            goto LABEL_49;
          }
          int v33 = CFEqual(BSDName, v84);
          int v34 = v33;
          if (v32)
          {
            int v35 = CFEqual(v32, kSCNetworkInterfaceTypeIEEE80211);
            if (v34 && v35)
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:4, "%s: FOUND network service %@ with matching BSD name %@ and interface type %@", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", SCNetworkServiceGetServiceID(v27), BSDName, v32 message];
              }
              int v25 = 0;
LABEL_52:
              goto LABEL_53;
            }
            if (v34)
            {
LABEL_47:
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:4, "%s: network service %@ with matching BSD name %@ but interface type %@ is present", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", SCNetworkServiceGetServiceID(v27), BSDName, v32 message];
              }
              goto LABEL_52;
            }
LABEL_49:
            if (!v35) {
              goto LABEL_53;
            }
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4, "%s: network service %@ with matching interface type %@ but BSD name %@ is present", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", SCNetworkServiceGetServiceID(v27), v32, BSDName message];
            }
            goto LABEL_52;
          }
          if (v33) {
            goto LABEL_47;
          }
        }
      }
LABEL_53:
      ++v24;
    }
    while (v24 < CFArrayGetCount(v23));
    if (!v25)
    {
      if (v23) {
        goto LABEL_56;
      }
      goto LABEL_57;
    }
LABEL_62:
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: ADDING examined network set to list for adding WiFi network service", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent")];
    }
    CFArrayAppendValue(Mutable, v11);
    if (v23) {
LABEL_56:
    }
      CFRelease(v23);
LABEL_57:
    BOOL v37 = v82;
    if (!a3) {
      BOOL v37 = 0;
    }
    CFArrayRef v8 = v80;
    if (!v37)
    {
LABEL_60:
      if (++v9 >= CFArrayGetCount(v8)) {
        break;
      }
      continue;
    }
    break;
  }
LABEL_66:
  if (!CFArrayGetCount(Mutable))
  {
    BOOL v51 = 0;
    CFArrayRef v39 = 0;
    goto LABEL_91;
  }
  CFArrayRef v39 = SCNetworkInterfaceCopyAll();
  if (CFArrayGetCount(v39) < 1) {
    goto LABEL_86;
  }
  CFIndex v40 = 0;
  while (2)
  {
    int v41 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v39, v40);
    if (!v41)
    {
LABEL_85:
      if (++v40 >= CFArrayGetCount(v39)) {
        goto LABEL_86;
      }
      continue;
    }
    break;
  }
  uint64_t v42 = v41;
  CFStringRef v43 = SCNetworkInterfaceGetBSDName(v41);
  CFStringRef v44 = SCNetworkInterfaceGetInterfaceType(v42);
  CFStringRef v45 = v44;
  if (!v43)
  {
    if (!v44 || !CFEqual(v44, kSCNetworkInterfaceTypeIEEE80211)) {
      goto LABEL_85;
    }
    goto LABEL_79;
  }
  int v46 = CFEqual(v43, v84);
  int v47 = v46;
  if (!v45)
  {
    if (v46) {
      goto LABEL_82;
    }
    goto LABEL_85;
  }
  int v48 = CFEqual(v45, kSCNetworkInterfaceTypeIEEE80211);
  if (!v47 || !v48)
  {
    if (v47)
    {
LABEL_82:
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: network interface %@ with matching BSD name %@ but interface type %@ is present", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", SCNetworkInterfaceGetLocalizedDisplayName(v42), v43, v45 message];
      }
    }
    else
    {
      if (!v48) {
        goto LABEL_85;
      }
LABEL_79:
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:4, "%s: network interface %@ with matching interface type %@ but BSD name %@ is present", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", SCNetworkInterfaceGetLocalizedDisplayName(v42), v45, v43 message];
      }
    }
    goto LABEL_85;
  }
  double v58 = (const __SCNetworkInterface *)CFRetain(v42);
  if (!v58)
  {
LABEL_86:
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "%s: failed to find any SC network interface matching BSD name %@ and interface type %@", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", v84, kSCNetworkInterfaceTypeIEEE80211 message];
    }
    CFArrayRef v8 = v80;
LABEL_89:
    BOOL v51 = 0;
LABEL_91:
    unsigned int v52 = 0;
LABEL_92:
    unsigned int v53 = prefs;
    goto LABEL_93;
  }
  unsigned int v52 = v58;
  if (CFArrayGetCount(Mutable) < 1)
  {
    BOOL v51 = 0;
    CFArrayRef v8 = v80;
    goto LABEL_92;
  }
  CFIndex v59 = 0;
  BOOL v85 = 0;
  CFArrayRef v8 = v80;
  unsigned int v53 = prefs;
  cf2 = v52;
  do
  {
    uint64_t v60 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(Mutable, v59);
    if (v60)
    {
      unsigned int v61 = v60;
      BOOL v62 = SCNetworkServiceCreate(v53, v52);
      double v63 = v62;
      if (v62)
      {
        SCNetworkServiceSetName(v62, @"Wi-Fi by wifid");
        SCNetworkServiceEstablishDefaultConfiguration(v63);
        int v64 = SCNetworkSetAddService(v61, v63);
        BOOL v85 = (v85 | v64) != 0;
      }
      else
      {
        int v64 = 0;
      }
      __int16 v66 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        if (v64) {
          double v67 = "success";
        }
        else {
          double v67 = "failure";
        }
        CFStringRef v68 = SCNetworkServiceGetName(v63);
        CFStringRef ServiceID = SCNetworkServiceGetServiceID(v63);
        CFStringRef v70 = SCNetworkSetGetName(v61);
        CFDataRef v74 = v67;
        unsigned int v53 = prefs;
        [v66 WFLog:4, "%s: %s ADDING <%@> network service %@ to <%@> network set %@", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", v74, v68, ServiceID, v70, SCNetworkSetGetSetID(v61) message];
      }
      if (v63) {
        CFRelease(v63);
      }
      CFMutableArrayRef Mutable = theArray;
      CFArrayRef v8 = v80;
      unsigned int v52 = cf2;
    }
    ++v59;
  }
  while (v59 < CFArrayGetCount(Mutable));
  BOOL v51 = v85;
LABEL_93:
  int v54 = sub_10005A29C(v53, v51);
  if (qword_10027DD68)
  {
    CFTypeID v56 = "changes";
    if (!v51) {
      CFTypeID v56 = "no changes";
    }
    CFDateRef v57 = "successfully";
    if (!v54) {
      CFDateRef v57 = "unsuccessfully";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: %s committed, prefs %s unlocked", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", v56, v57);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v8) {
    CFRelease(v8);
  }
LABEL_105:
  CFRelease(Mutable);
LABEL_106:
}

uint64_t sub_10008EBD4(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 314);
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: managerRef is NULL", "WiFiManagerGetDeviceExternallyPowered"];
  }
  return 0;
}

uint64_t sub_10008EC44(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 984);
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: managerRef is NULL", "WiFiManagerGetDeviceBatteryLevel")];
  }
  return 0;
}

CFArrayRef sub_10008ECB4(CFArrayRef result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    uint64_t result = (CFArrayRef)*((void *)result + 12);
    if (result)
    {
      uint64_t result = (CFArrayRef)CFSetGetCount(result);
      if (result)
      {
        CFIndex v2 = (CFIndex)result;
        __chkstk_darwin();
        CFArrayRef v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
        memset(v4, 170, v3);
        CFSetGetValues(*((CFSetRef *)v1 + 12), (const void **)v4);
        return CFArrayCreate(kCFAllocatorDefault, (const void **)v4, v2, &kCFTypeArrayCallBacks);
      }
    }
  }
  return result;
}

BOOL sub_10008ED94(uint64_t a1)
{
  return *(void *)(a1 + 880) == 0;
}

__CFArray *sub_10008EDA4(uint64_t a1, const __CFString *a2)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef v3 = sub_10008EE94(a1);
  if (!v3) {
    return 0;
  }
  CFArrayRef v4 = v3;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    CFIndex Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; i != v7; ++i)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
        if (ValueAtIndex)
        {
          uint64_t v10 = ValueAtIndex;
          CFStringRef v11 = (const __CFString *)sub_1000CE384((uint64_t)ValueAtIndex);
          if (v11)
          {
            if (CFEqual(v11, a2))
            {
              CFArrayAppendValue(Mutable, v10);
              if (!CFArrayGetCount(Mutable))
              {
                if (Mutable)
                {
                  CFRelease(Mutable);
                  CFMutableArrayRef Mutable = 0;
                }
              }
            }
          }
        }
      }
    }
  }
  CFRelease(v4);
  return Mutable;
}

CFArrayRef sub_10008EE94(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 216);
  if (!v2 || !CFArrayGetCount(v2)) {
    return 0;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + 216);

  return CFArrayCreateCopy(kCFAllocatorDefault, v3);
}

__CFArray *sub_10008EEF4(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 216);
  if (!v2 || !CFArrayGetCount(v2)) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 216));
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, Count, &kCFTypeArrayCallBacks);
  if (Mutable && CFArrayGetCount(*(CFArrayRef *)(a1 + 216)) >= 1)
  {
    CFIndex v5 = 0;
    do
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 216), v5);
      if (ValueAtIndex)
      {
        CFIndex v7 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)ValueAtIndex);
        CFArrayAppendValue(Mutable, v7);
        CFRelease(v7);
      }
      ++v5;
    }
    while (v5 < CFArrayGetCount(*(CFArrayRef *)(a1 + 216)));
  }
  return Mutable;
}

CFArrayRef sub_10008EFCC(uint64_t a1)
{
  CFArrayRef result = sub_10008EE94(a1);
  if (result)
  {
    CFArrayRef v2 = result;
    CFArrayRef v3 = sub_10005A660(result);
    CFRelease(v2);
    return v3;
  }
  return result;
}

void sub_10008F008(uint64_t a1)
{
  if (a1)
  {
    CFArrayRef v2 = *(const __CFArray **)(a1 + 216);
    if (v2)
    {
      CFIndex Count = CFArrayGetCount(v2);
      if (Count >= 1)
      {
        CFIndex v4 = Count;
        CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        for (CFIndex i = 0; i != v4; ++i)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 216), i);
          if (!sub_10001EBB4((uint64_t)ValueAtIndex))
          {
            CFArrayRef v8 = sub_1000CE79C((uint64_t)ValueAtIndex);
            if (v8)
            {
              CFIndex v9 = v8;
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: Adding %@ disabled until %@", "WiFiManagerReloadNetworksDisabledUntil", sub_10001A43C(ValueAtIndex), v9 message];
              }
              CFArrayAppendValue(Mutable, ValueAtIndex);
            }
          }
        }
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1976));
        if (CFArrayGetCount(Mutable) >= 1)
        {
          CFStringRef v11 = *(__CFArray **)(a1 + 1976);
          v14.CFIndex length = CFArrayGetCount(Mutable);
          v14.CFIndex location = 0;
          CFArrayAppendArray(v11, Mutable, v14);
        }
        if (Mutable)
        {
          CFRelease(Mutable);
        }
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null manager", "WiFiManagerReloadNetworksDisabledUntil"];
    }
  }
}

void sub_10008F1F8(uint64_t a1, const __CFDictionary *cf1)
{
  if (!cf1 || (CFIndex v4 = *(const void **)(a1 + 208)) == 0 || !CFEqual(cf1, v4))
  {
    CFIndex v5 = *(const void **)(a1 + 208);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 208) = 0;
    }
    if (cf1) {
      *(void *)(a1 + 208) = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, cf1);
    }
    v6[0] = a1;
    v6[1] = 0xAAAAAAAA00000004;
    CFTypeRef v6[2] = 0;
    v6[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v6);
    if (cf1) {
      [+[NSUserDefaults standardUserDefaults] setObject:cf1 forKey:@"Custom network settings"];
    }
  }
}

void sub_10008F2C4(uint64_t a1, uint64_t a2)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000051;
  v2[2] = a2;
  v2[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
}

void sub_10008F314(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 1232) = a2;
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000027;
  v2[2] = 0;
  v2[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
}

void sub_10008F368(uint64_t a1, int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 304);
  if (v3 != a2)
  {
    *(_DWORD *)(a1 + 304) = a2;
    v10[0] = a1;
    v10[1] = 0xAAAAAAAA00000017;
    void v10[2] = 0;
    void v10[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v10);
    CFIndex v7 = &kSCValNetAirPortJoinModeAutomatic;
    switch(a2)
    {
      case 0:
        goto LABEL_7;
      case 1:
        CFIndex v7 = &kSCValNetAirPortJoinModePreferred;
        goto LABEL_7;
      case 2:
        CFIndex v7 = &kSCValNetAirPortJoinModeRecent;
        goto LABEL_7;
      case 3:
        CFIndex v7 = &kSCValNetAirPortJoinModeStrongest;
        goto LABEL_7;
      case 4:
        CFIndex v7 = &kSCValNetAirPortJoinModeRanked;
LABEL_7:
        if (*v7)
        {
          switch(a2)
          {
            case 0:
              CFStringRef v8 = kSCValNetAirPortJoinModeAutomatic;
              break;
            case 1:
              CFIndex v9 = &kSCValNetAirPortJoinModePreferred;
              goto LABEL_15;
            case 2:
              CFIndex v9 = &kSCValNetAirPortJoinModeRecent;
              goto LABEL_15;
            case 3:
              CFIndex v9 = &kSCValNetAirPortJoinModeStrongest;
              goto LABEL_15;
            case 4:
              CFIndex v9 = &kSCValNetAirPortJoinModeRanked;
LABEL_15:
              CFStringRef v8 = *v9;
              break;
            default:
              CFStringRef v8 = 0;
              break;
          }
          sub_100083E60((void *)a1, kSCPropNetAirPortJoinMode, v8, a3);
        }
        break;
      case 5:
        *(_DWORD *)(a1 + 304) = v3;
        break;
      default:
        return;
    }
  }
}

CFStringRef sub_10008F50C(int a1)
{
  if (a1 <= 251)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        return @"Quality";
      }
      else if (a1 == 2)
      {
        return @"Captive";
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return @"None";
    }
  }
  else
  {
    switch(a1)
    {
      case 252:
        CFStringRef result = @"Public";
        break;
      case 253:
        CFStringRef result = @"NewLocation";
        break;
      case 254:
        CFStringRef result = @"InfrequentNetwork";
        break;
      case 255:
        CFStringRef result = @"All";
        break;
      default:
        return 0;
    }
  }
  return result;
}

void sub_10008F5C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1328))
  {
    if (*(void *)(a1 + 848)) {
      int v2 = 1;
    }
    else {
      int v2 = 3;
    }
    if (*(void *)(a1 + 848)) {
      int v3 = 2;
    }
    else {
      int v3 = 3;
    }
    if (*(void *)(a1 + 864)) {
      int v4 = v3;
    }
    else {
      int v4 = v2;
    }
  }
  else
  {
    int v4 = 0;
  }
  [+[WiFiUserInteractionMonitor sharedInstance] setCurrentDisplayState:*(void *)(a1 + 848) != 0 andLockState:*(void *)(a1 + 864) != 0];
  if (*(_DWORD *)(a1 + 1312) != v4)
  {
    *(_DWORD *)(a1 + 1312) = v4;
    if (v4 == 1)
    {
      if (*(unsigned char *)(a1 + 1808))
      {
        *(unsigned char *)(a1 + 1808) = 0;
        blocCFIndex k = _NSConcreteStackBlock;
        unint64_t v29 = 3221225472;
        uint64_t v30 = sub_1000BCA3C;
        uint64_t v31 = (uint64_t)&unk_10023EAF8;
        uint64_t v32 = a1;
        dispatch_async((dispatch_queue_t)qword_10027DD88, &block);
      }
    }
    else if ((v4 - 1) > 1)
    {
      goto LABEL_40;
    }
    if (sub_100004CF8(a1)) {
      goto LABEL_37;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: user auto join state is disabled, checking to re-enable", @"__WiFiManagerCheckUserAutoJoinEnable"];
    }
    CFIndex v7 = *(void **)(a1 + 1960);
    if ([*(id *)(a1 + 1696) isAuthorized])
    {
      if (*(unsigned char *)(a1 + 1953))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: no location was available when disabled" args:("__WiFiManagerCheckUserAutoJoinEnable")];
        }
      }
      else
      {
        if (v7)
        {
          id v8 = [[objc_msgSend(*(id *)(a1 + 1696), "latestLocation") copy];
          if (+[WiFiLocationManager isLocationValid:v8 uptoSeconds:1 isHighAccuracy:60.0])
          {
            [v7 horizontalAccuracy];
            double v10 = v9;
            [v8 horizontalAccuracy];
            double v12 = v11;
            [v8 distanceFromLocation:v7];
            double v14 = v13 - v10 - v12;
            if (v14 > 300.0)
            {
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: distance (%f) passed fence size (%f)", "__WiFiManagerCheckUserAutoJoinEnable", *(void *)&v14, 0x4072C00000000000);
              }
              *(unsigned char *)(a1 + 1952) = 0;
              int v16 = *(const void **)(a1 + 1960);
              if (v16)
              {
                CFRelease(v16);
                *(void *)(a1 + 1960) = 0;
              }
              sub_100083E60((void *)a1, @"UserAutoJoinDisabledLoc", 0, 0);
LABEL_30:
              int v17 = *(_DWORD *)(a1 + 1408);
              uint64_t v18 = *(void *)(a1 + 1416);
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: motionState %@ (time %f)", "__WiFiManagerCheckUserAutoJoinEnable", sub_100012FCC(v17), v18 message];
              }
              if (qword_10027DD68) {
                [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: enabling user auto join due to motion state", "__WiFiManagerCheckUserAutoJoinEnable")];
              }
              sub_100086500(a1, 1, 4, 0);
LABEL_35:
              if (v8) {
                CFRelease(v8);
              }
LABEL_37:
              sub_10008FAFC(a1, 0);
              if ([+[WiFiUserInteractionMonitor sharedInstance] isSetupCompleted]&& !*(unsigned char *)(a1 + 2217))
              {
                sub_100089AB0(a1);
              }
              goto LABEL_40;
            }
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s, distance (%f) from disabling is less than fence size (%f)", "__WiFiManagerCheckUserAutoJoinEnable", *(void *)&v14, 0x4072C00000000000);
            }
          }
          else
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: leeched location is not high accuracy", "__WiFiManagerCheckUserAutoJoinEnable", v26, v27);
            }
          }
LABEL_45:
          if (*(void *)(a1 + 1968))
          {
            id v22 = objc_alloc_init((Class)NSDate);
            id v23 = [*(id *)(a1 + 1968) compare:v22];
            if (v23 == (id)-1)
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: enabling user auto join due to time (date: %@)", "__WiFiManagerCheckUserAutoJoinEnable", *(void *)(a1 + 1968) message];
              }
              sub_100086500(a1, 1, 5, 0);
            }
            else
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: keeping user auto join disabled, not past date %@", "__WiFiManagerCheckUserAutoJoinEnable", *(void *)(a1 + 1968) message];
              }
            }
            if (v22) {
              CFRelease(v22);
            }
          }
          else
          {
            if (qword_10027DD68) {
              [qword_10027DD68 WFLog:3 message:@"%s: no user auto join expiration date" args:__WiFiManagerCheckUserAutoJoinEnable];
            }
          }
          goto LABEL_35;
        }
        int v21 = *(unsigned __int8 *)(a1 + 1952);
        if (!v21)
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3, @"%s: already past geofence. Checking motion activity.", @"__WiFiManagerCheckUserAutoJoinEnable"];
          }
          id v8 = 0;
          goto LABEL_30;
        }
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:message:3, "%s: no disabled location", "__WiFiManagerCheckUserAutoJoinEnable"];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: wifi not authroized for location services", @"__WiFiManagerCheckUserAutoJoinEnable"];
      }
    }
    id v8 = 0;
    goto LABEL_45;
  }
LABEL_40:
  blocCFIndex k = (void **)a1;
  unint64_t v29 = 0xAAAAAAAA0000000ALL;
  uint64_t v30 = 0;
  uint64_t v31 = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &block);
}

void sub_10008FAFC(uint64_t a1, unsigned int a2)
{
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: Checking networks disabled until date (removeAll %d)", "WiFiManagerCheckNetworksDisabledUntil", a2];
  }
  if (a1)
  {
    if (*(void *)(a1 + 1976))
    {
      if (sub_100004CF8(a1))
      {
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 1976));
        if (Count >= 1)
        {
          CFIndex v6 = Count;
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CFDateRef theDate = CFDateCreate(kCFAllocatorDefault, Current);
          CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
          for (CFIndex i = 0; i != v6; ++i)
          {
            CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1976), i);
            if (!sub_10001EBB4((uint64_t)ValueAtIndex))
            {
              CFDateRef v11 = (const __CFDate *)sub_1000CE79C((uint64_t)ValueAtIndex);
              if (v11)
              {
                CFDateRef v12 = v11;
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: %@ disabled until %@", "WiFiManagerCheckNetworksDisabledUntil", sub_10001A43C(ValueAtIndex), v12 message];
                }
                if (a2 || CFDateCompare(theDate, v12, 0) == kCFCompareGreaterThan)
                {
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: enabling network %@", "WiFiManagerCheckNetworksDisabledUntil", sub_10001A43C(ValueAtIndex) message];
                  }
                  CFArrayAppendValue(Mutable, ValueAtIndex);
                }
              }
            }
          }
          CFIndex v15 = CFArrayGetCount(Mutable);
          if (v15 >= 1)
          {
            CFIndex v16 = v15;
            for (CFIndex j = 0; j != v16; ++j)
            {
              uint64_t v18 = (void *)CFArrayGetValueAtIndex(Mutable, j);
              sub_1000C977C((uint64_t)v18, 0);
              sub_1000C96AC((uint64_t)v18, 1);
              sub_10009B1AC(a1, v18, 1u);
            }
            sub_10008F008(a1);
          }
          if (Mutable) {
            CFRelease(Mutable);
          }
          if (theDate)
          {
            CFRelease(theDate);
          }
        }
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null manager", @"WiFiManagerCheckNetworksDisabledUntil"];
    }
  }
}

uint64_t sub_10008FDD4(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 1312);
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: manager Param is NULL!", "WiFiManagerGetUserInteractionMode"];
  }
  return 3;
}

uint64_t sub_10008FE44(uint64_t a1)
{
  return *(unsigned int *)(a1 + 304);
}

void sub_10008FE4C(uint64_t a1, unsigned int a2, int a3)
{
  if (byte_10027DDA9)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Lockdown Mode is enabled, ignoring set WiFiAskToJoinPreferenceType %ld", "WiFiManagerSetAskToJoinPreference", a2];
    }
  }
  else if (*(_DWORD *)(a1 + 824) != a2)
  {
    *(_DWORD *)(a1 + 824) = a2;
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000001BLL;
    void context[2] = 0;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    unsigned int valuePtr = a2;
    CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v7)
    {
      CFNumberRef v8 = v7;
      sub_100083E60((void *)a1, @"ATJPreference", v7, a3);
      CFRelease(v8);
    }
    [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") sendUserSettingsDidChangeEvent];
  }
}

uint64_t sub_10008FF90(uint64_t a1)
{
  return *(unsigned int *)(a1 + 824);
}

void sub_10008FF98(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_DWORD *)(a1 + 336) != a2)
  {
    *(_DWORD *)(a1 + 336) = a2;
    LODWORD(valuePtr) = a2;
    CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      sub_100083E60((void *)a1, @"Compatibility", v6, a3);
      CFRelease(v7);
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: mode:%u", "WiFiManagerSet6ECompatibilityMode", a2];
    }
    double v9 = *(void **)(a1 + 2416);
    if (v9) {
      [v9 updateWithCompatibilityMode:a2 == 0];
    }
    [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager")] sendUserSettingsDidChangeEvent];
    uint64_t valuePtr = a1;
    unint64_t v12 = 0xAAAAAAAA00000088;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &valuePtr);
    if ((_BYTE)v14)
    {
      if (a2)
      {
        if (a2 != 1) {
          return;
        }
        uint64_t valuePtr = a1;
        unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
        int v10 = 137;
      }
      else
      {
        uint64_t valuePtr = a1;
        unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
        int v10 = 138;
      }
      LODWORD(v12) = v10;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &valuePtr);
    }
  }
}

uint64_t sub_10009010C(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000088;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

uint64_t sub_10009015C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 2072);
}

uint64_t sub_100090164(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 308) != a2)
  {
    uint64_t v3 = (void *)result;
    *(unsigned char *)(result + 308) = a2;
    v5[0] = result;
    v5[1] = 0xAAAAAAAA0000001DLL;
    v5[2] = 0;
    v5[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(result + 104), (CFSetApplierFunction)sub_100020954, v5);
    int v4 = (const void **)&kCFBooleanFalse;
    if (a2) {
      int v4 = (const void **)&kCFBooleanTrue;
    }
    return sub_100083E60(v3, @"mStageAutoJoin", *v4, 0);
  }
  return result;
}

void sub_100090208(uint64_t a1, int a2, int a3, CFTypeRef cf)
{
  if (!cf || (CFTypeID v8 = CFGetTypeID(cf), v8 != CFDateGetTypeID()))
  {
    int v10 = 1;
    goto LABEL_6;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  int v10 = 0;
  if (Current - CFDateGetAbsoluteTime((CFDateRef)cf) < 604800.0)
  {
LABEL_6:
    int v11 = 1;
    unint64_t v12 = "ENABLED";
    goto LABEL_7;
  }
  int v11 = 0;
  unint64_t v12 = "DISABLED";
LABEL_7:
  if (*(unsigned __int8 *)(a1 + 309) != a2
    || *(unsigned __int8 *)(a1 + 310) != a3
    || *(unsigned __int8 *)(a1 + 311) != v11)
  {
    if (*(unsigned __int8 *)(a1 + 311) != v11)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "Device updated learning phase to %s", v12);
      }
    }
    *(unsigned char *)(a1 + 309) = a2;
    *(unsigned char *)(a1 + 310) = a3;
    *(unsigned char *)(a1 + 311) = v11;
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000001ELL;
    void context[2] = 0;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    if (a2) {
      CFBooleanRef v14 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v14 = kCFBooleanFalse;
    }
    sub_100083E60((void *)a1, @"optimizedAutoJoin", v14, 0);
    if (a3) {
      CFBooleanRef v15 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v15 = kCFBooleanFalse;
    }
    sub_100083E60((void *)a1, @"Enable5GhzAutoJoinScan", v15, 0);
    if (v10)
    {
      CFAbsoluteTime v16 = CFAbsoluteTimeGetCurrent();
      CFDateRef v17 = CFDateCreate(kCFAllocatorDefault, v16);
      sub_100083E60((void *)a1, @"deviceUpdatedDate", v17, 0);
      if (v17) {
        CFRelease(v17);
      }
    }
  }
}

void sub_100090400(uint64_t a1, char a2)
{
  char v3 = a2;
  context[0] = a1;
  context[1] = 0xAAAAAAAA00000077;
  void context[2] = &v3;
  void context[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
}

void sub_100090458(uint64_t a1, const __CFString *a2, int a3)
{
  uint64_t context = a1;
  unint64_t v15 = 0xAAAAAAAA00000034;
  CFAbsoluteTime v16 = 0;
  uint64_t v17 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
  int v6 = v17;
  *(unsigned char *)(a1 + 1208) = v17;
  if (v6 == a3)
  {
    if (qword_10027DD68)
    {
      if (*(unsigned char *)(a1 + 1208) == 1) {
        CFTypeID v8 = "enabled";
      }
      else {
        CFTypeID v8 = "disabled";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS is already %s", v8);
    }
    return;
  }
  *(unsigned char *)(a1 + 1208) = a3;
  if (!a3)
  {
    int v13 = 0;
    if (sub_10005D32C(a2))
    {
      int v9 = *(_DWORD *)(a1 + 340);
      if (v9 == 1)
      {
        int v10 = 7;
      }
      else if (v9 == 2)
      {
        int v10 = 6;
      }
      else
      {
        int v10 = 3;
      }
    }
    else if (sub_10005D2B4(a2))
    {
      int v10 = 2;
    }
    else
    {
      if (!sub_10005D278(a2) && !sub_10005D368(a2)) {
        goto LABEL_22;
      }
      int v10 = 1;
    }
    int v13 = v10;
LABEL_22:
    uint64_t context = a1;
    unint64_t v15 = 0xAAAAAAAA00000020;
    CFAbsoluteTime v16 = &v13;
    uint64_t v17 = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
    *(unsigned char *)(a1 + 1209) = 0;
    goto LABEL_23;
  }
  sub_1000906C0(a1, a2, a3, 0, 0, 0);
LABEL_23:
  if (qword_10027DD68)
  {
    if (*(unsigned char *)(a1 + 1208) == 1) {
      unint64_t v12 = "enabled";
    }
    else {
      unint64_t v12 = "disabled";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS state set to %s", v12);
  }
  if (objc_opt_class()) {
    dispatch_async((dispatch_queue_t)qword_10027DD88, &stru_100240870);
  }
}

uint64_t sub_100090670(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000034;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

void sub_1000906C0(uint64_t a1, const __CFString *a2, int a3, char a4, int a5, int a6)
{
  int v39 = 0;
  if (sub_10005D32C(a2))
  {
    int v12 = *(_DWORD *)(a1 + 340);
    if (v12 == 1)
    {
      int v13 = 7;
LABEL_8:
      int v39 = v13;
      int v15 = _os_feature_enabled_impl();
      int v14 = 0;
      if (!a6) {
        goto LABEL_19;
      }
      goto LABEL_9;
    }
    if (v12 == 2)
    {
      int v13 = 6;
      goto LABEL_8;
    }
    int v16 = _os_feature_enabled_impl();
    if (a6 && v16) {
      goto LABEL_13;
    }
    int v14 = 0;
    int v13 = 3;
LABEL_18:
    int v39 = v13;
    goto LABEL_19;
  }
  if (sub_10005D2B4(a2))
  {
    int v14 = 0;
    int v13 = 2;
    goto LABEL_18;
  }
  if (sub_10005D278(a2) || sub_10005D368(a2))
  {
    int v14 = 0;
    int v13 = 1;
    goto LABEL_18;
  }
  if (!sub_10005D2F0(a2))
  {
    int v14 = 0;
    int v13 = 0;
    goto LABEL_19;
  }
  int v15 = _os_feature_enabled_impl();
  int v14 = 0;
  int v13 = 0;
  if (a6)
  {
LABEL_9:
    if (!v15) {
      goto LABEL_19;
    }
LABEL_13:
    int v13 = 8;
    int v39 = 8;
    int v14 = 1;
  }
LABEL_19:
  unsigned int v17 = sub_10005D368(a2);
  if (a3)
  {
    if (v17)
    {
      uint64_t v18 = *(const void **)(a1 + 1224);
      if (v18) {
        CFRelease(v18);
      }
      *(void *)(a1 + 1224) = a2;
      CFRetain(a2);
    }
    if (a5) {
      goto LABEL_25;
    }
  }
  else if (v17)
  {
    unsigned int v20 = *(const void **)(a1 + 1224);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(a1 + 1224) = 0;
    }
  }
  if (*(unsigned __int8 *)(a1 + 1209) != a3 || *(unsigned __int8 *)(a1 + 1211) != a3)
  {
    *(unsigned char *)(a1 + 1211) = a3;
    if (a3) {
      char v19 = 0;
    }
    else {
      char v19 = a4;
    }
    if (!a3) {
      LOBYTE(a5) = 0;
    }
    goto LABEL_41;
  }
  if (a3 && (_os_feature_enabled_impl() & v14) == 1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"Bringing up NANPHS MIS Discovery is already enabled"];
    }
LABEL_25:
    char v19 = 0;
    *(unsigned char *)(a1 + 1211) = a3;
LABEL_41:
    *(unsigned char *)(a1 + 1210) = v19;
    *(unsigned char *)(a1 + 1212) = a5;
    *(void *)&long long context = a1;
    *((void *)&context + 1) = 0xAAAAAAAA00000021;
    *(void *)&long long v29 = &v39;
    *((void *)&v29 + 1) = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
    if (qword_10027DD68)
    {
      id v23 = "disabled";
      if (*(unsigned char *)(a1 + 1211) == 1) {
        CFIndex v24 = "enabled";
      }
      else {
        CFIndex v24 = "disabled";
      }
      if (*(unsigned char *)(a1 + 1209) == 1) {
        id v23 = "enabled";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS Discovery Req state %s Current state %s", v24, v23)];
    }
    return;
  }
  if (qword_10027DD68)
  {
    if (*(unsigned char *)(a1 + 1209) == 1) {
      uint64_t v26 = "enabled";
    }
    else {
      uint64_t v26 = "disabled";
    }
    [((id)qword_10027DD68) WFLog:3, @"MIS Discovery is already %s", v26];
  }
  if (a3)
  {
    uint64_t v38 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long context = 0u;
    long long v29 = 0u;
    LODWORD(context) = v13;
    v27[0] = a1;
    v27[1] = 0xAAAAAAAA0000004DLL;
    v27[2] = &context;
    v27[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v27);
  }
}

void sub_100090A3C(id a1)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3 message:"Requesting PersonalHotspotControl extension to reload"];
  }
  int v2 = +[CHSControlService sharedInstance];

  [(CHSControlService *)v2 reloadControlsForExtension:@"com.apple.WiFiKit.PersonalHotspotControl" kind:@"PersonalHotspotControl" reason:@"wifi manager set MIS state request PH widget to reload"];
}

uint64_t sub_100090ABC(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000083;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

uint64_t sub_100090B0C(uint64_t a1)
{
  if (qword_10027DD68)
  {
    if (*(unsigned char *)(a1 + 1209)) {
      uint64_t v3 = "Enabled";
    }
    else {
      uint64_t v3 = "Disabled";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "MIS Discovery is %s", v3);
  }
  return *(unsigned __int8 *)(a1 + 1209);
}

void sub_100090B88(uint64_t a1, char a2, char a3, char a4, uint64_t a5)
{
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = a5;
  LOBYTE(v6[0]) = a2;
  BYTE1(v6[0]) = a3;
  BYTE2(v6[0]) = a4;
  v5[0] = a1;
  v5[1] = 0xAAAAAAAA00000022;
  v5[2] = v6;
  v5[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v5);
}

uint64_t sub_100090BEC(uint64_t a1, uint64_t a2)
{
  CFArrayRef v4 = (const __CFArray *)sub_10005B8E0(a2);
  if (v4)
  {
    CFArrayRef v5 = v4;
    if (CFArrayGetCount(v4))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: removing hosted networks for client %@ - %@", "WiFiManagerRemoveHostedNetworks", sub_100016E18(a2), v5 message];
      }
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000039;
      void context[2] = v5;
      void context[3] = 0;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    }
  }
  return 0;
}

void sub_100090CC0(uint64_t a1, const void *a2, int a3, int a4)
{
  int Count = CFSetGetCount(*(CFSetRef *)(a1 + 1168));
  if (a2)
  {
    int v9 = CFSetContainsValue(*(CFSetRef *)(a1 + 1168), a2);
    if (a3)
    {
      if (v9) {
        return;
      }
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 1168), a2);
    }
    else
    {
      if (!v9) {
        return;
      }
      CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 1168), a2);
    }
  }
  unsigned int v10 = [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") isWoWActivityRegistered];
  unsigned int v34 = v10;
  if (*(unsigned char *)(a1 + 1163))
  {
    int v11 = 0;
    int v12 = 0;
  }
  else
  {
    int v11 = v10;
    int v13 = CFSetGetCount(*(CFSetRef *)(a1 + 1168));
    if (v13) {
      int v11 = 1;
    }
    if (v11) {
      int v12 = v13;
    }
    else {
      int v12 = 0;
    }
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "manager->wow.lpasSetting %d CFSetGetCount(manager->wow.wowClients) %ld isWowActivityRegistered=%d manager->wow.overrideWoWState %d manager->externalPower %d manager->iokit.battery.chargeLevel %d", *(unsigned __int8 *)(a1 + 1162), CFSetGetCount(*(CFSetRef *)(a1 + 1168)), v34, *(unsigned __int8 *)(a1 + 1163), *(unsigned __int8 *)(a1 + 314), *(unsigned int *)(a1 + 984)];
  }
  int v15 = *(unsigned __int8 *)(a1 + 1162);
  if (!*(unsigned char *)(a1 + 1162)) {
    goto LABEL_24;
  }
  CFIndex v16 = CFSetGetCount(*(CFSetRef *)(a1 + 1168));
  int v17 = v34;
  if (v16) {
    int v17 = 1;
  }
  if (v17 == 1)
  {
    int v15 = *(unsigned __int8 *)(a1 + 1163);
    if (!*(unsigned char *)(a1 + 1163))
    {
LABEL_24:
      if (a4) {
        goto LABEL_25;
      }
LABEL_29:
      int v18 = 1;
      goto LABEL_30;
    }
  }
  if (*(unsigned char *)(a1 + 314) || *(_DWORD *)(a1 + 984) >= 0xAu)
  {
    int v15 = 1;
    goto LABEL_24;
  }
  int v15 = 0;
  if (!a4) {
    goto LABEL_29;
  }
LABEL_25:
  if (a4 == 1) {
    int v18 = 0;
  }
  else {
    int v18 = *(unsigned __int8 *)(a1 + 1164);
  }
LABEL_30:
  if (*(unsigned __int8 *)(a1 + 1160) != v11
    || *(unsigned __int8 *)(a1 + 1176) != v15
    || *(unsigned __int8 *)(a1 + 1164) != v18)
  {
    *(unsigned char *)(a1 + 1161) = v11;
    *(unsigned char *)(a1 + 1176) = v15;
    *(unsigned char *)(a1 + 1164) = v18;
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000007;
    void context[2] = 0;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    v36[0] = a1;
    v36[1] = 0xAAAAAAAA00000030;
    v36[2] = 0;
    uint64_t v37 = 0;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v36);
    int v19 = v37;
    *(unsigned char *)(a1 + 1160) = v37;
    if (!a2 || *(unsigned __int8 *)(a1 + 1161) == v19)
    {
      if (!v19) {
        goto LABEL_52;
      }
    }
    else
    {
      unsigned int v20 = *(__CFSet **)(a1 + 1168);
      if (a3) {
        CFSetRemoveValue(v20, a2);
      }
      else {
        CFSetAddValue(v20, a2);
      }
      if (!*(unsigned char *)(a1 + 1160)) {
        goto LABEL_52;
      }
    }
    if (CFSetGetCount(*(CFSetRef *)(a1 + 1168)))
    {
      id v22 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFIndex v23 = CFSetGetCount(*(CFSetRef *)(a1 + 1168));
        CFIndex v24 = "Enabled";
        if (*(unsigned char *)(a1 + 1176)) {
          int v25 = "Enabled";
        }
        else {
          int v25 = "Disabled";
        }
        if (*(unsigned char *)(a1 + 1163)) {
          uint64_t v26 = "Enabled";
        }
        else {
          uint64_t v26 = "Disabled";
        }
        if (!*(unsigned char *)(a1 + 1164)) {
          CFIndex v24 = "Disabled";
        }
        [v22 WFLog:3 message:@"WoW Enabled by %ld Clients, lpas is %s, WoW Override is %s, Captive %s", v23, v25, v26, v24];
      }
LABEL_62:
      if (!*(unsigned char *)(a1 + 26) && !*(unsigned char *)(a1 + 1329) && (*(unsigned char *)(a1 + 1160) || *(unsigned char *)(a1 + 1176)))
      {
        if (qword_10027DD68)
        {
          if (*(unsigned char *)(a1 + 1160)) {
            long long v33 = "WoW";
          }
          else {
            long long v33 = "LPAS";
          }
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: re-enabling auto-join for %s", "WiFiManagerSetWoWState", v33);
        }
        sub_100003D18(a1, 1);
      }
      [*(id *)(a1 + 2416) updateWowState:*(unsigned char *)(a1 + 1160) != 0 lpasState:*(unsigned char *)(a1 + 1176) != 0 lowPowerState:*(unsigned char *)(a1 + 1162) != 0 batterySaverState:*(void *)(a1 + 1600) != 0];
      goto LABEL_73;
    }
LABEL_52:
    uint64_t v27 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFIndex v28 = CFSetGetCount(*(CFSetRef *)(a1 + 1168));
      long long v29 = "Enabled";
      if (*(unsigned char *)(a1 + 1176)) {
        long long v30 = "Enabled";
      }
      else {
        long long v30 = "Disabled";
      }
      if (*(unsigned char *)(a1 + 1163)) {
        long long v31 = "Enabled";
      }
      else {
        long long v31 = "Disabled";
      }
      if (!*(unsigned char *)(a1 + 1164)) {
        long long v29 = "Disabled";
      }
      [v27 WFLog:3 message:@"WoW Disabled, %ld WoW Clients, lpas is %s, WoW Override is %s, Captive %s", v28, v30, v31, v29];
    }
    goto LABEL_62;
  }
LABEL_73:
  if (a2)
  {
    if (v12 != Count)
    {
      LOBYTE(v36[0]) = *(unsigned char *)(a1 + 1160);
      CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_1000BAFB0, v36);
    }
  }
}

uint64_t sub_10009112C(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000030;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

__CFDictionary *sub_10009117C(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v3 = Mutable;
  if (Mutable)
  {
    CFArrayRef v4 = (const void **)&kCFBooleanTrue;
    if (!*(unsigned char *)(a1 + 1160)) {
      CFArrayRef v4 = (const void **)&kCFBooleanFalse;
    }
    CFDictionaryAddValue(Mutable, @"WoWEnabled", *v4);
    if (*(unsigned char *)(a1 + 1160)) {
      unsigned int Count = CFSetGetCount(*(CFSetRef *)(a1 + 1168));
    }
    else {
      unsigned int Count = 0;
    }
    unsigned int valuePtr = Count;
    CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionaryAddValue(v3, @"WoWClientCount", v6);
      CFRelease(v7);
    }
    if (valuePtr)
    {
      CFMutableArrayRef v8 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      CFSetApplyFunction(*(CFSetRef *)(a1 + 1168), (CFSetApplierFunction)sub_100091328, v8);
      CFDictionaryAddValue(v3, @"WoWClientPidList", v8);
      if (v8) {
        CFRelease(v8);
      }
    }
    if (qword_10027DD68)
    {
      unsigned int v10 = "Enabled";
      if (!*(unsigned char *)(a1 + 1160)) {
        unsigned int v10 = "Disabled";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "WoW is %s, %d WoW Clients", v10, valuePtr);
    }
  }
  return v3;
}

void sub_100091328(uint64_t a1, __CFArray *a2)
{
  if (a1)
  {
    if (a2)
    {
      int valuePtr = sub_10005B6E8(a1);
      CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
      if (v4)
      {
        CFNumberRef v5 = v4;
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%@[%@] is a wow client", sub_100016E18(a1), v5 message];
        }
        CFArrayAppendValue(a2, v5);
        CFRelease(v5);
      }
    }
  }
}

uint64_t sub_1000913EC(uint64_t a1)
{
  if (qword_10027DD68)
  {
    if (*(unsigned char *)(a1 + 1176)) {
      uint64_t v3 = "Enabled";
    }
    else {
      uint64_t v3 = "Disabled";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "LPAS is %s", v3);
  }
  return *(unsigned __int8 *)(a1 + 1176);
}

uint64_t sub_100091468(uint64_t a1, void *value, int a3)
{
  int v5 = *(unsigned __int8 *)(a1 + 1184);
  if (!value) {
    goto LABEL_8;
  }
  int v7 = CFSetContainsValue(*(CFSetRef *)(a1 + 1192), value);
  if (a3)
  {
    if (v7) {
      goto LABEL_8;
    }
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 1192), value);
    int v8 = 1;
  }
  else
  {
    if (!v7) {
      goto LABEL_8;
    }
    CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 1192), value);
    int v8 = -1;
  }
  *(_DWORD *)(a1 + 1200) += v8;
LABEL_8:
  unsigned int v9 = [[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") isQuiesceWiFiActivityRegistered];
  CFIndex Count = CFSetGetCount(*(CFSetRef *)(a1 + 1192));
  if (Count > 0) {
    int v11 = 1;
  }
  else {
    int v11 = v9;
  }
  if (v5 == v11) {
    return 0;
  }
  CFIndex v12 = Count;
  *(unsigned char *)(a1 + 1184) = v11;
  if (v11)
  {
    unsigned int v13 = 0;
    *(_DWORD *)(a1 + 1204) = *(_DWORD *)(a1 + 316);
LABEL_15:
    int v14 = (const void *)sub_100016E18((uint64_t)value);
    sub_10008CB00(a1, v13, v14);
    goto LABEL_16;
  }
  unsigned int v13 = *(_DWORD *)(a1 + 1204);
  if (v13 != *(_DWORD *)(a1 + 316)) {
    goto LABEL_15;
  }
LABEL_16:
  if (qword_10027DD68)
  {
    CFIndex v16 = "unquiesced";
    if (v11) {
      CFIndex v16 = "quiesced";
    }
    int v17 = "no";
    if (v9) {
      int v17 = "yes";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "WiFi is %s (clients=%ld activity=%s)", v16, v12, v17);
  }
  return 0;
}

uint64_t sub_1000915D4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 316);
}

uint64_t sub_1000915DC(uint64_t a1)
{
  if (qword_10027DD68)
  {
    if (*(unsigned char *)(a1 + 1184)) {
      uint64_t v3 = "quiesced";
    }
    else {
      uint64_t v3 = "unquiesced";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "WiFi is %s (clients=%ld activity=%d)", v3, CFSetGetCount(*(CFSetRef *)(a1 + 1192)), objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "isQuiesceWiFiActivityRegistered"));
  }
  return *(unsigned __int8 *)(a1 + 1184);
}

void sub_100091690(uint64_t a1, CFArrayRef theArray)
{
  if (a1)
  {
    if (theArray && CFArrayGetCount(theArray) >= 1)
    {
      CFIndex v4 = 0;
      do
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
        if (ValueAtIndex) {
          sub_10001C6A4((uint64_t)ValueAtIndex, @"forceBGScanParamsCompare", kCFBooleanTrue);
        }
        ++v4;
      }
      while (v4 < CFArrayGetCount(theArray));
    }
    v6[0] = a1;
    v6[1] = 0xAAAAAAAA00000008;
    void v6[2] = theArray;
    v6[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v6);
  }
}

uint64_t sub_100091764(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000032;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

uint64_t sub_1000917B4(void *a1)
{
  if (sub_10000D934(a1, @"SimulatedHardwareFailureStatus"))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: Simulating a hardware failure", @"WiFiManagerGetHardwareStatus"];
    }
    return 2;
  }
  else if (sub_10004CAE4())
  {
    return 2;
  }
  else
  {
    return 1;
  }
}

void sub_100091844(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "hardware failure status -- error %@", a3, v7 message];
    }
  }
  else if (qword_10027DD68)
  {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "hardware failure status -- success %d with status %d", a2, *(unsigned int *)(a1 + 32));
  }
}

uint64_t sub_1000918E0(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000031;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

uint64_t sub_100091930(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000031;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

uint64_t sub_100091980(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA0000003FLL;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

uint64_t sub_1000919D0(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA0000003FLL;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

uint64_t sub_100091A20(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000033;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

uint64_t sub_100091A70(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000033;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

uint64_t sub_100091AC0(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000048;
  v2[2] = 0;
  uint64_t v3 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  return v3;
}

uint64_t sub_100091B10(uint64_t a1, CFStringRef theString)
{
  CFIndex v4 = *(const void **)(a1 + 1216);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 1216) = 0;
  }
  if (theString) {
    CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, theString);
  }
  else {
    CFStringRef Copy = 0;
  }
  *(void *)(a1 + 1216) = Copy;
  v7[0] = a1;
  v7[1] = 0xAAAAAAAA00000026;
  void v7[2] = 0;
  uint64_t v8 = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v7);
  return v8;
}

CFStringRef sub_100091BA4(uint64_t a1)
{
  v4[0] = a1;
  v4[1] = 0xAAAAAAAA00000035;
  CFTypeRef v4[2] = 0;
  v4[3] = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v4);
  CFStringRef v2 = *(const __CFString **)(a1 + 1216);
  if (v2) {
    return CFStringCreateCopy(kCFAllocatorDefault, v2);
  }
  else {
    return 0;
  }
}

void sub_100091C1C(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 276) = a2;
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000023;
  v2[2] = 0;
  void v2[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
}

uint64_t sub_100091C70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 276);
}

void sub_100091C78(uint64_t a1, uint64_t a2, double a3)
{
  *(void *)(a1 + 280) = a2;
  *(double *)(a1 + 288) = a3;
  v3[0] = a1;
  v3[1] = 0xAAAAAAAA00000024;
  v3[2] = 0;
  v3[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v3);
}

void sub_100091CD0(uint64_t a1, uint64_t a2, double a3, double a4)
{
  v4[0] = a1;
  v4[1] = 0xAAAAAAAA00000063;
  CFTypeRef v4[2] = a2;
  *(double *)&v4[3] = a3;
  *(double *)&void v4[4] = a4;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v4);
}

void sub_100091D2C(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 300) != a2)
  {
    *(_DWORD *)(a1 + 300) = a2;
    v4[0] = a1;
    v4[1] = 0xAAAAAAAA00000019;
    CFTypeRef v4[2] = 0;
    v4[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v4);
    sub_100091DB4((void *)a1, @"Fallback Preference", a2, 0);
  }
}

void sub_100091DB4(void *a1, const __CFString *a2, uint64_t a3, int a4)
{
  uint64_t valuePtr = a3;
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  sub_100083E60(a1, a2, v7, a4);
  if (v7) {
    CFRelease(v7);
  }
}

void sub_100091E2C(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 928) != a2)
  {
    *(double *)(a1 + 928) = a2;
    sub_100091E50((void *)a1, @"DisassociationInterval", a2);
  }
}

void sub_100091E50(void *a1, const __CFString *a2, double a3)
{
  double valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
  sub_100083E60(a1, a2, v5, 0);
  if (v5) {
    CFRelease(v5);
  }
}

void sub_100091EC4(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 1880) != a2)
  {
    *(double *)(a1 + 1880) = a2;
    sub_100091E50((void *)a1, @"DiagnosticsInterval", a2);
  }
}

void sub_100091EE8(uint64_t a1, int a2, const __CFString *a3)
{
  if (a1)
  {
    if ([*(id *)(a1 + 1480) isWiFiPowerModificationDisabled])
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: wifi power cannot be modified, since modification is disabled %d", "WiFiManagerSetPower", 1];
      }
    }
    else
    {
      unsigned int v7 = a2 != 0;
      int v8 = *(_DWORD *)(a1 + 316);
      sub_10008CB00(a1, v7, a3);
      if (a3)
      {
        if (CFStringCompare(a3, @"Preferences", 1uLL) == kCFCompareEqualTo && v8 != v7)
        {
          context[0] = a1;
          context[1] = 0xAAAAAAAA00000034;
          void context[2] = 0;
          uint64_t v10 = 0;
          CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
          if (!(_BYTE)v10 && !*(unsigned char *)(a1 + 2201)) {
            sub_10009208C((void **)a1, v7);
          }
        }
      }
    }
  }
}

uint64_t sub_10009201C(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 2201);
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: Null manager" :"WiFiManagerIsPowerModificationDisabled"];
  }
  return 0;
}

void sub_10009208C(void **a1, unsigned int a2)
{
  if (a2 <= 1)
  {
    if (a1[216]) {
      sub_100008778(a1, a1[216], a2 == 1, 0);
    }
  }
}

BOOL sub_1000920B4(uint64_t a1, const void *a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    CFArrayRef v5 = *(const __CFArray **)(a1 + 176);
    if (v5)
    {
      v6.CFIndex length = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
      v6.CFIndex location = 0;
      return CFArrayContainsValue(v5, v6, a2) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_10009211C(uint64_t a1, const __CFString *a2, unsigned int a3)
{
  if (a2 || *(void *)(a1 + 2032))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: countryCode %@, manager->ieCountryCode %@, force %d", "__WiFiManagerUpdateRegulatoryDomainCountryCode", a2, *(void *)(a1 + 2032), a3 message];
    }
    if (a2 && (CFStringRef v7 = *(const __CFString **)(a1 + 2032)) != 0 && CFEqual(a2, v7))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: Country code %@ refreshed.", "__WiFiManagerUpdateRegulatoryDomainCountryCode", *(void *)(a1 + 2032) message];
      }
      *(CFAbsoluteTime *)(a1 + 2040) = CFAbsoluteTimeGetCurrent();
    }
    else
    {
      double Current = CFAbsoluteTimeGetCurrent();
      if (a2 || (a3 & 1) != 0 || (double v9 = Current - *(double *)(a1 + 2040), v9 >= 600.0))
      {
        int v11 = *(const void **)(a1 + 2032);
        if (v11)
        {
          CFRelease(v11);
          *(void *)(a1 + 2032) = 0;
        }
        if (a2) {
          CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, a2);
        }
        else {
          CFStringRef Copy = 0;
        }
        *(void *)(a1 + 2032) = Copy;
        *(CFAbsoluteTime *)(a1 + 2040) = CFAbsoluteTimeGetCurrent();
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Updating CountryCodeFromWiFiAPs to %@", "__WiFiManagerUpdateRegulatoryDomainCountryCode", a2 message];
        }
        RDUpdateCountryCodeFromWiFiAPs();
        if (objc_msgSend(*(id *)(a1 + 192), "isDefaultCountryCode:", objc_msgSend(*(id *)(a1 + 192), "getLocaleCountryCode")))
        {
          int v14 = *(void **)(a1 + 192);
          [v14 determineAndSetLocale:0];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Country code %@ refreshed %.2fs ago < %ds, not resetting", "__WiFiManagerUpdateRegulatoryDomainCountryCode", *(void *)(a1 + 2032), *(void *)&v9, 600 message];
        }
      }
    }
  }
}

uint64_t sub_10009236C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 328);
}

uint64_t sub_100092374(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 328) != a2)
  {
    uint64_t v3 = result;
    if (qword_10027DD68)
    {
      CFArrayRef v5 = "Disabling";
      if (!a2) {
        CFArrayRef v5 = "Enabling";
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s BlackListing", v5);
    }
    *(unsigned char *)(v3 + 328) = a2;
    context[0] = v3;
    context[1] = 0xAAAAAAAA00000025;
    void context[2] = 0;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(v3 + 104), (CFSetApplierFunction)sub_100020954, context);
    CFRange v6 = (const void **)&kCFBooleanTrue;
    if (!a2) {
      CFRange v6 = (const void **)&kCFBooleanFalse;
    }
    return sub_100083E60((void *)v3, @"DisableBlackList", *v6, 0);
  }
  return result;
}

uint64_t sub_100092468(uint64_t a1, int a2, CFTypeRef cf)
{
  uint64_t result = *(void *)(a1 + 816);
  if ((cf != 0) == (result != 0))
  {
    int v7 = *(unsigned __int8 *)(a1 + 808);
    if (cf && result)
    {
      uint64_t result = CFEqual((CFTypeRef)result, cf);
      if (result && v7 == a2) {
        return result;
      }
      uint64_t result = *(void *)(a1 + 816);
    }
    else if (v7 == a2)
    {
      return result;
    }
  }
  *(unsigned char *)(a1 + 808) = a2;
  if (result)
  {
    CFRelease((CFTypeRef)result);
    *(void *)(a1 + 816) = 0;
  }
  if (cf)
  {
    *(void *)(a1 + 816) = CFRetain(cf);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: test network %@", "WiFiManagerSetATJTestModeEnabled", cf message];
    }
  }
  context[0] = a1;
  context[1] = 0xAAAAAAAA00000028;
  void context[2] = 0;
  void context[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  double v9 = (const void **)&kCFBooleanFalse;
  if (a2) {
    double v9 = (const void **)&kCFBooleanTrue;
  }
  sub_100083E60((void *)a1, @"ATJTestModeEnabled", *v9, 0);
  return sub_100083E60((void *)a1, @"ATJTestNetworkSSID", cf, 0);
}

void sub_1000925CC(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 1162) != a2)
  {
    *(unsigned char *)(a1 + 1162) = a2;
    uint64_t v3 = (const void **)&kCFBooleanTrue;
    if (!a2) {
      uint64_t v3 = (const void **)&kCFBooleanFalse;
    }
    sub_100083E60((void *)a1, @"lpasEnable", *v3, 0);
    int v4 = *(unsigned __int8 *)(a1 + 1162);
    sub_100090CC0(a1, 0, v4, 2);
  }
}

_DWORD *sub_10009265C(_DWORD *result, _DWORD *a2)
{
  *uint64_t result = dword_10027D6D4;
  *a2 = dword_10027D6D8;
  return result;
}

void sub_100092678(uint64_t a1, int a2, double a3)
{
  *(CFAbsoluteTime *)(a1 + 944) = CFAbsoluteTimeGetCurrent() + a3;
  if (a2) {
    *(void *)(a1 + 936) = 0;
  }
  CFRange v6 = *(NSObject **)(a1 + 920);
  dispatch_time_t v7 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
  dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (a3 != 315360000.0)
  {
    CFDateRef v8 = CFDateCreate(kCFAllocatorDefault, *(CFAbsoluteTime *)(a1 + 944));
    if (v8)
    {
      CFDateRef v9 = v8;
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "Disassociation timer scheduled to fire at %@", v9 message];
      }
      CFRelease(v9);
    }
  }
}

void sub_10009277C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 952);
  if (v2 == 3)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:3 message:@"Disassociation timer already fired, so not resuming"];
    }
    sub_100003D18(a1, 0);
    sub_100086F2C(a1, "WiFiManagerResumeDisassociationTimer", 12731);
  }
  else
  {
    if (v2 == 1)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "Resuming disassociation timer with remaing interval of %f s", *(void *)(a1 + 936));
      }
      double v4 = *(double *)(a1 + 936);
      goto LABEL_17;
    }
    if (!v2 && (!*(unsigned char *)(a1 + 314) || *(_DWORD *)(a1 + 788) == 2))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Restart requested when Disassociation Timer is Idle. Starting timer"];
      }
      double v4 = *(double *)(a1 + 928);
LABEL_17:
      sub_100092678(a1, 1, v4);
      *(_DWORD *)(a1 + 952) = 2;
    }
  }
}

void sub_1000928C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1888);
  *(void *)(a1 + 1888) = v2 + 1;
  if (v2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: refCount %ld", "WiFiManagerStartDiagnosticsTimer", *(void *)(a1 + 1888)];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"Starting Diagnostics Timer"];
    }
    double v4 = *(NSObject **)(a1 + 1872);
    dispatch_time_t v5 = dispatch_time(0, (uint64_t)(*(double *)(a1 + 1880) * 1000000000.0));
    dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0);
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000015;
    void context[2] = 0;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  }
}

void sub_1000929E8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 == 0x4000000000)
  {
    context[1] = a2;
    unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
    context[0] = a1;
    LOBYTE(v6) = *(unsigned char *)(a1 + 913);
    CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_1000BAFB8, context);
  }
  sub_10011DCBC(a2, (a3 >> 46) & 1);
}

void sub_100092A5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1888);
  uint64_t v2 = v1 - 1;
  if (v1 >= 1)
  {
    *(void *)(a1 + 1888) = v2;
    if (v2)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: refCount %ld", @"WiFiManagerStopDiagnosticsTimer", *(void *)(a1 + 1888)];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3 message:"Stopping Diagnostics Timer"];
      }
      dispatch_time_t v5 = *(NSObject **)(a1 + 1872);
      dispatch_source_set_timer(v5, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
  }
}

void sub_100092B50(uint64_t a1, const void *a2)
{
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 136), a2);
  if (sub_10005B6C8((uint64_t)a2) == 1)
  {
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 144), a2);
    sub_10001315C(a1, *(void *)(a1 + 832));
    if (CFSetGetCount(*(CFSetRef *)(a1 + 144)) >= 2)
    {
      if (_os_feature_enabled_impl())
      {
        sub_1000047D4(a1, 30);
      }
      else
      {
        sub_10008DE74(a1, 0);
      }
    }
  }
  else if (sub_10005B6C8((uint64_t)a2) == 2)
  {
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 152), a2);
    uint64_t v4 = *(void *)(a1 + 832);
    sub_10001315C(a1, v4);
  }
}

void sub_100092C54(uint64_t a1, const void *a2)
{
  int v4 = CFSetContainsValue(*(CFSetRef *)(a1 + 160), a2);
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 136), a2);
  sub_100092D78((CFDictionaryRef *)a1, (uint64_t)a2);
  sub_100092F7C(a1, a2);
  if (sub_10005B6C8((uint64_t)a2) == 1)
  {
    dispatch_time_t v5 = *(__CFSet **)(a1 + 144);
LABEL_5:
    CFSetRemoveValue(v5, a2);
    uint64_t v6 = *(void *)(a1 + 832);
    sub_10001315C(a1, v6);
    return;
  }
  if (sub_10005B6C8((uint64_t)a2) == 2)
  {
    dispatch_time_t v5 = *(__CFSet **)(a1 + 152);
    goto LABEL_5;
  }
  if (v4)
  {
    if (_os_feature_enabled_impl())
    {
      sub_1000047D4(a1, 30);
    }
    else
    {
      sub_10008DE74(a1, 0);
    }
  }
}

void sub_100092D78(CFDictionaryRef *a1, uint64_t a2)
{
  if (!a2) {
    return;
  }
  CFStringRef v4 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%d", 14);
  if (!v4) {
    return;
  }
  CFStringRef v5 = v4;
  CFBooleanRef Value = (__CFDictionary *)CFDictionaryGetValue(a1[266], v4);
  if (Value)
  {
    dispatch_time_t v7 = Value;
    CFDateRef v8 = (const void *)sub_100016E18(a2);
    CFDictionaryRemoveValue(v7, v8);
    if (CFDictionaryGetCount(v7) == 3)
    {
      CFDictionaryRemoveValue(a1[266], v5);
      CFArrayRef v9 = sub_10000500C((CFArrayRef)a1);
      if (!v9)
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:4 message:@"%s: failed to get device managers"];
        }
        goto LABEL_14;
      }
      CFArrayRef v10 = v9;
      if (CFArrayGetCount(v9))
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v10, 0);
        if (ValueAtIndex && (uint64_t v12 = (uint64_t)ValueAtIndex, (v13 = sub_100016E18((uint64_t)ValueAtIndex)) != 0))
        {
          sub_100016E20(v13);
          if (!sub_100124D0C(v12))
          {
LABEL_13:
            CFRelease(v10);
            goto LABEL_14;
          }
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: Failed to set default LQM interval" : @"__WiFiManagerEventClearRateLimit"];
          }
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:4 message:@"%s: device manager is null" : @"__WiFiManagerEventClearRateLimit"];
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:message:4, "%s: device managers array is empty", "__WiFiManagerEventClearRateLimit"];
        }
      }
      goto LABEL_13;
    }
  }
LABEL_14:

  CFRelease(v5);
}

void sub_100092F7C(uint64_t a1, const void *a2)
{
  CFDictionaryRef v4 = (const __CFDictionary *)sub_10005B8A0((uint64_t)a2);
  CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)sub_1000930A0, 0);
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 160), a2);
  int v5 = *(unsigned __int8 *)(a1 + 24);

  sub_100003D18(a1, v5);
}

void sub_100092FE4(uint64_t a1)
{
}

void sub_100092FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_100093028, v3);
}

void sub_100093028(uint64_t a1, const void **a2)
{
}

void sub_100093034(uint64_t a1, void *context)
{
}

void sub_100093054(uint64_t a1, __CFString *a2)
{
  CFStringRef v3 = (const __CFString *)sub_100016E18(a1);
  CFStringAppend(a2, v3);

  CFStringAppend(a2, @" ");
}

void sub_1000930A0(uint64_t a1, const void *a2)
{
  if (a1 && a2)
  {
    uint64_t v3 = sub_100016E18(a1);
    sub_10006DB68(v3, a2, 1);
  }
}

void sub_1000930F0(uint64_t a1, const void *a2)
{
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 160), a2);
  int v3 = *(unsigned __int8 *)(a1 + 24);

  sub_100003D18(a1, v3);
}

void sub_100093130(uint64_t a1)
{
}

id sub_100093138(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 2553) = a2;
  int v3 = +[WiFiUsageMonitor sharedInstance];

  return [(WiFiUsageMonitor *)v3 updateLinkRecoveryDisabled:a2];
}

uint64_t sub_10009317C(void *a1, const __CFString *a2, const void *a3)
{
  uint64_t v4 = sub_100083E60(a1, a2, a3, 0);
  uint64_t v5 = v4;
  if (v4) {
    sub_10008111C(v4, 2, (uint64_t)a1);
  }
  return v5;
}

uint64_t sub_1000931BC(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 912);
  }
  return result;
}

uint64_t sub_1000931C8(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 2553);
  }
  return result;
}

void sub_1000931D8(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v6 = *(void *)(a1 + 184);
  if (v6 && ((int v9 = sub_1000DAD38(v6), a2 == -1) || v9 == a2))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: notificationId %d response %d", "WiFiManagerDispatchNotificationResponse", a2, a3];
    }
    uint64_t v12 = *(void **)(a1 + 184);
    sub_1000DAF5C(v12, a3, a4);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "SpringBoard has responded to older request(%d). Ignoring.", a2);
    }
  }
}

void sub_1000932EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_10027DD68)
  {
    int v9 = "yes";
    if (!*(unsigned char *)(a1 + 314)) {
      int v9 = "no";
    }
    [(id)qword_10027DD68 WFLog:3, "%s: priority %d, duration %u, type %@, external powered ? %s, battery level %u", "WiFiManagerIndicateCarPlayHIDEventReceived", a2, a3, a4, v9, *(unsigned int *)(a1 + 984) message];
  }
  else
  {
    if (!a1) {
      return;
    }
  }
  if (_os_feature_enabled_impl())
  {
    v11[0] = a2;
    v11[1] = a3;
    uint64_t v12 = a4;
    if (*(unsigned char *)(a1 + 314) || *(_DWORD *)(a1 + 984) >= 0x15u)
    {
      context[0] = a1;
      context[1] = 0xAAAAAAAA0000007DLL;
      void context[2] = v11;
      void context[3] = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    }
  }
}

uint64_t sub_100093410(uint64_t a1, CFDictionaryRef *a2, int a3)
{
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: manager is NULL", "WiFiManagerUpdateCoreWiFiProfile"];
    }
    return 0;
  }
  if (!sub_1000233A8((void *)a1)) {
    return 0;
  }
  uint64_t v6 = 0;
  if (!a2 || !*(unsigned char *)(a1 + 1328)) {
    return v6;
  }
  if (!a3)
  {
    if (*(unsigned char *)(a1 + 1328) && (CFDictionaryRef v11 = sub_1000C5ECC((uint64_t)a2)) != 0)
    {
      CFDictionaryRef v12 = v11;
      uint64_t v13 = (CFDictionaryRef *)sub_100019658((int)kCFAllocatorDefault, v11);
      if (v13)
      {
        int v14 = v13;
        int v15 = sub_10001CECC(v13);
        CFIndex v16 = v15;
        if (v15)
        {
          uint64_t v6 = (uint64_t)[v15 identifier];
          if (!v6)
          {
LABEL_21:
            CFRelease(v12);
            CFRelease(v14);
LABEL_22:

            return v6;
          }
          id v17 = [v16 externalForm];
          if (v17)
          {
            id v18 = v17;
            id v19 = [*(id *)(a1 + 1104) objectForKey:v6];
            [*(id *)(a1 + 1104) setObject:v18 forKey:v6];
            [*(id *)(a1 + 1104) synchronize];
            id v20 = +[WiFiXPCManager sharedXPCManager];
            uint64_t v6 = 1;
            if (v19) {
              uint64_t v21 = 2;
            }
            else {
              uint64_t v21 = 1;
            }
            [v20 sendKnownNetworkDidChangeEventForProfile:v16 eventType:v21];
            goto LABEL_21;
          }
        }
        uint64_t v6 = 0;
        goto LABEL_21;
      }
      CFRelease(v12);
    }
    else
    {
    }
    uint64_t v6 = 0;
    CFIndex v16 = 0;
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 1328))
  {
    CFDateRef v8 = sub_10001CECC(a2);
    int v9 = v8;
    if (v8 && (id v10 = [v8 identifier]) != 0)
    {
      [*(id *)(a1 + 1104) setObject:0 forKey:v10];
      [*(id *)(a1 + 1104) synchronize];
      [+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") sendKnownNetworkDidChangeEventForProfile:v9 eventType:3];
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    int v9 = 0;
  }

  return v6;
}

uint64_t sub_100093634(uint64_t a1, void *a2, uint64_t a3)
{
  int v3 = a2;
  unsigned int v90 = a2;
  int valuePtr = a3;
  CFIndex Count = 0;
  CFIndex idx = -1;
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null manager", "WiFiManagerAddNetwork")];
    }
    goto LABEL_178;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" args:("WiFiManagerAddNetwork", 0)];
    }
LABEL_178:
    CFMutableDictionaryRef v14 = 0;
    goto LABEL_179;
  }
  BOOL v85 = sub_10001A43C(a2);
  BOOL v6 = sub_10001BB2C((BOOL)v3);
  CFDateRef v8 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    if (v6) {
      int v9 = "domain";
    }
    else {
      int v9 = "SSID";
    }
    id v10 = v85;
    if (v6) {
      id v10 = sub_10001E404((uint64_t)v3, @"DomainName");
    }
    [v8 WFLog:3, "%s: reason %d, with %s %@", "WiFiManagerAddNetwork", a3, v9, v10 message];
  }
  if (a3 == 17 && sub_1000C66D0((BOOL)v3) && sub_1000C7E8C((uint64_t)v3))
  {
    sub_10001C6A4((uint64_t)v3, @"WPA_IE", 0);
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: Both WEP & WPA-PSK are set incorrectly.  Removing WPA-PSK", "WiFiManagerAddNetwork"];
    }
  }
  sub_100115C5C(v3);
  CFDictionaryRef v12 = sub_10000D934((void *)a1, @"kWiFiWhitelistingUUIDKey");
  if (sub_1000C8140((uint64_t)v3) && v12)
  {
    sub_10001C6A4((uint64_t)v3, @"PolicyUUID", v12);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Added policyUUID %@ to network %@", "__WiFiManagerApplyWhitelistingPolicy", v12, sub_10001A43C(v3) message];
    }
  }
  CFMutableDictionaryRef v14 = sub_1000C5EB0((uint64_t)v3);
  if (v14)
  {
    int v15 = (const __SCPreferences *)sub_10000D9F0((void *)a1, @"List of known networks");
    if (v15)
    {
      CFIndex v16 = v15;
      sub_100094568(v3);
      if (sub_10005A1E0(v16))
      {
        uint64_t v82 = sub_10000D990((uint64_t)"WiFiManagerAddNetwork");
        uint64_t v17 = sub_1000830B8(a1);
        CFDateRef cf = v14;
        BOOL v80 = v6;
        if (!v17)
        {
          int v31 = 0;
          CFNumberRef v21 = 0;
          int v83 = 0;
          int v59 = 1;
          BOOL v62 = (void *)v82;
          goto LABEL_128;
        }
        CFArrayRef v18 = (const __CFArray *)v17;
        SCPreferencesRef prefs = v16;
        if (sub_1000CCA08((uint64_t)v3))
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Will not add HS2.0 network to known networks list", "WiFiManagerAddNetwork")];
          }
          CFNumberRef v21 = 0;
          int v83 = 0;
          int v31 = 1;
          int v59 = 1;
          goto LABEL_127;
        }
        sub_1000945D4(*(_DWORD *)(a1 + 304), v18, v3, &idx, &Count);
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s:existingIndex %ld, insertIndex %ld", "WiFiManagerAddNetwork", idx, Count)];
        }
        if (idx == -1 && CFArrayGetCount(v18))
        {
          CFMutableArrayRef Mutable = 0;
          if ([+[WiFiUserInteractionMonitor sharedInstance] isInitialSetupCompleted]|| valuePtr != 1)
          {
            goto LABEL_30;
          }
          if (sub_10000D934((void *)a1, @"IsNewInstall") != kCFBooleanFalse)
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: setup not completed, filtering out non-managed known networks to retain only the new one", "WiFiManagerAddNetwork")];
            }
            CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
            if (Mutable)
            {
              if (CFArrayGetCount(v18) >= 1)
              {
                CFIndex v33 = 0;
                unsigned int v34 = Mutable;
                do
                {
                  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v18, v33);
                  if (ValueAtIndex)
                  {
                    long long v36 = ValueAtIndex;
                    int v37 = sub_100094718((const __CFArray *)a1, ValueAtIndex);
                    LODWORD(context) = 1;
                    CFNumberRef v38 = (const __CFNumber *)sub_10001E404((uint64_t)v36, @"WiFiManagerKnownNetworksEventType");
                    if (v38) {
                      CFNumberGetValue(v38, kCFNumberIntType, &context);
                    }
                    if (v37)
                    {
                      CFArrayAppendValue(Mutable, v36);
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: retaining currently connected network %@", "WiFiManagerAddNetwork", sub_10001A43C(v36) message];
                      }
                    }
                    else if (sub_1000C8140((uint64_t)v36) || sub_1000CE714((uint64_t)v36))
                    {
                      CFArrayAppendValue(Mutable, v36);
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: retaining carrier/profile-based network %@", "WiFiManagerAddNetwork", sub_10001A43C(v36) message];
                      }
                    }
                    else if (context == 3)
                    {
                      CFArrayAppendValue(Mutable, v36);
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: retaining cloud-synced network %@", "WiFiManagerAddNetwork", sub_10001A43C(v36) message];
                      }
                    }
                    else
                    {
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: removing network %@ during Setup", "WiFiManagerAddNetwork", sub_10001A43C(v36) message];
                      }
                    }
                    CFMutableArrayRef Mutable = v34;
                  }
                  ++v33;
                }
                while (v33 < CFArrayGetCount(v18));
              }
              CFIndex v77 = Count;
              if (v77 > CFArrayGetCount(Mutable)) {
                CFIndex Count = CFArrayGetCount(Mutable);
              }
              CFArrayRef v18 = Mutable;
            }
LABEL_30:
            CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
            if (v21) {
              sub_10001C6A4((uint64_t)v3, @"WiFiManagerKnownNetworksEventType", v21);
            }
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            CFDateRef v23 = CFDateCreate(kCFAllocatorDefault, Current);
            if (v23)
            {
              CFDateRef v24 = v23;
              if (!sub_10001E404((uint64_t)v3, @"addedAt")) {
                sub_10001C6A4((uint64_t)v3, @"addedAt", v24);
              }
              CFRelease(v24);
            }
            int v83 = Mutable;
            if (idx == -1)
            {
              if (!sub_1000949CC(a1, v3, v18)) {
                goto LABEL_79;
              }
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:3, @"%s: Different network with same ssid found and replaced", @"WiFiManagerAddNetwork"];
              }
            }
            else
            {
              int v25 = (CFDictionaryRef *)CFArrayGetValueAtIndex(v18, idx);
              if (!v25) {
                goto LABEL_79;
              }
              uint64_t v26 = v25;
              int v27 = sub_10001EE48(v25);
              int v28 = sub_10001EE48(v3);
              if (*(unsigned char *)(a1 + 2105))
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:3, @"%s preferAutoJoinHomeNetwork, enabling added network", @"WiFiManagerAddNetwork"];
                }
                sub_1000C96AC((uint64_t)v3, 1);
                sub_10001C6A4((uint64_t)v26, @"WiFiNetworkDisabledUntilDate", 0);
              }
              if (v28 && !v27)
              {
                sub_1000C7494((uint64_t)v26, v28);
                sub_100093410(a1, v26, 0);
                if (sub_100094834(a1, v18))
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:3 message:@"%s: Marked network as hidden" args:("WiFiManagerAddNetwork", 0x0)];
                  }
                  int v31 = 1;
LABEL_80:
                  if (sub_10001A680((uint64_t)v3))
                  {
                    CFStringRef v41 = @"AdHoc";
                  }
                  else
                  {
                    if (!sub_1000D2230((uint64_t)v3))
                    {
                      sub_1000C96AC((uint64_t)v3, 1);
LABEL_85:
                      if (*(unsigned char *)(a1 + 2105))
                      {
                        if (qword_10027DD68) {
                          [((id)qword_10027DD68) WFLog:message:3, @"%s:NOI home-state: %d", @"WiFiManagerAddNetwork", sub_1000C6B08((uint64_t)v3)];
                        }
                        sub_100095734(a1, 0, v3);
                      }
                      if (idx == -1)
                      {
                        CFBooleanRef v43 = kCFBooleanFalse;
                        if (sub_1000C7E9C((uint64_t)v3)) {
                          CFBooleanRef v44 = kCFBooleanTrue;
                        }
                        else {
                          CFBooleanRef v44 = kCFBooleanFalse;
                        }
                        sub_10001C6A4((uint64_t)v3, @"ALLOW_WPA2_PSK", v44);
                        if (!sub_1000C8A5C((uint64_t)v3)
                          && !sub_1000C80A4((const __CFDictionary *)v3))
                        {
                          CFBooleanRef v43 = kCFBooleanTrue;
                        }
                        sub_10001C6A4((uint64_t)v3, @"ALLOW_OWE_TSN", v43);
                        if (CWFScanResultHas6GHzOnlyBSS())
                        {
                          CFStringRef v45 = sub_10001CECC((CFDictionaryRef *)v3);
                          [v45 setWas6GHzOnlyAt:[NSDate date]];
                          int v46 = sub_1000CFEE8(v45, 0);
                          if (v46)
                          {
                            int v47 = v46;
                            sub_1000C63FC((uint64_t)v3, (uint64_t)v46);
                            CFRelease(v47);
                          }
                        }
                        sub_1000C9B68(v3);
                        if (valuePtr == 23
                          || sub_1000CE714((uint64_t)v3) && sub_10001EBB4((uint64_t)v3) && valuePtr == 17)
                        {
                          CFAbsoluteTime v48 = CFAbsoluteTimeGetCurrent();
                          CFDateRef v49 = CFDateCreate(kCFAllocatorDefault, v48);
                          CFArrayRef v50 = *(const __CFArray **)(a1 + 2512);
                          if (v50)
                          {
                            CFIndex v51 = 0;
                            CFIndex v52 = -1;
                            do
                            {
                              if (v51 >= CFArrayGetCount(v50)) {
                                break;
                              }
                              unsigned int v53 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 2512), v51);
                              if (v53)
                              {
                                uint64_t v54 = (uint64_t)v53;
                                if (CFEqual(v3, v53))
                                {
                                  CFDateRef v55 = (const __CFDate *)sub_10001E404(v54, @"removedAt");
                                  if (v55 && (CFDateRef v56 = v55, CFDateGetTimeIntervalSinceDate(v49, v55) < 86400.0))
                                  {
                                    if (qword_10027DD68)
                                    {
                                      [(id)qword_10027DD68 WFLog:3, "%s: previously disabled carrier-based network %@ re-added at %@ (was removed at %@), disabling the network", "WiFiManagerAddNetwork", sub_10001A43C(v3), v49, v56 message];
                                      int v3 = v90;
                                    }
                                    sub_1000C96AC((uint64_t)v3, 0);
                                    CFIndex v52 = v51;
                                  }
                                  else
                                  {
                                    CFIndex v52 = v51;
                                  }
                                }
                              }
                              ++v51;
                              CFArrayRef v50 = *(const __CFArray **)(a1 + 2512);
                            }
                            while (v50);
                            if (v52 != -1) {
                              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 2512), v52);
                            }
                          }
                          if (v49) {
                            CFRelease(v49);
                          }
                        }
                        int v3 = v90;
                        CFArrayInsertValueAtIndex(v18, Count, v90);
                        int v58 = sub_100094834(a1, v18);
                        int v59 = 1;
                        sub_100004058(a1, 1, 1, 1);
                        sub_100093410(a1, (CFDictionaryRef *)v3, 0);
                        if (v58)
                        {
                          unsigned int v61 = (void *)qword_10027DD68;
                          BOOL v62 = (void *)v82;
                          if (qword_10027DD68)
                          {
                            double v63 = v85;
                            if (v80) {
                              double v63 = sub_10001E404((uint64_t)v3, @"DomainName");
                            }
                            [v61 WFLog:3, "%s: Added %@ to list of known networks", "WiFiManagerAddNetwork", v63 message];
                          }
                          int v31 = 1;
                          CFIndex v16 = prefs;
LABEL_128:
                          sub_10005A29C(v16, v31);

                          if (v31)
                          {
                            if (valuePtr == 6 || valuePtr == 1)
                            {
                              if (qword_10027DD68) {
                                [(id)qword_10027DD68 WFLog:3, "%s: sync the added network <%@>", "WiFiManagerAddNetwork", v85 message];
                              }
                              if (&_WiFiCloudSyncEngineCreate)
                              {
                                int v65 = *(const void **)(a1 + 1304);
                                if (v65)
                                {
                                  if (v3)
                                  {
                                    CFRetain(v65);
                                    CFRetain(v3);
                                    block[0] = _NSConcreteStackBlock;
                                    block[1] = 3221225472;
                                    block[2] = sub_1000959D8;
                                    block[3] = &unk_10023F048;
                                    void block[4] = a1;
                                    void block[5] = v3;
                                    dispatch_async((dispatch_queue_t)qword_10027DD90, block);
                                  }
                                }
                              }
                              sub_100184EE0(*(void **)(a1 + 1432), (uint64_t)v3, 0);
                            }
                            else
                            {
                              CFStringRef v70 = (void *)qword_10027DD68;
                              if (qword_10027DD68)
                              {
                                uint64_t v71 = v85;
                                if (v80) {
                                  uint64_t v71 = sub_10001E404((uint64_t)v3, @"DomainName");
                                }
                                [v70 WFLog:3, "%s: <%@> added due to sync", "WiFiManagerAddNetwork", v71 message];
                              }
                            }
                            CFStringRef v68 = v83;
                            sub_10008111C(v66, 2, a1);
                            sub_100082844(a1);
                            sub_10004E4C8((void *)a1, valuePtr, v3);
                            if (v59) {
                              unsigned int v72 = 0;
                            }
                            else {
                              unsigned int v72 = 2;
                            }
                            sub_100095A24(a1, v3, v72);
                            if (v3) {
                              char v73 = v59 ^ 1;
                            }
                            else {
                              char v73 = 1;
                            }
                            if ((v73 & 1) == 0) {
                              sub_100095CAC((void *)a1, v85);
                            }
                            if (*(unsigned char *)(a1 + 2105))
                            {
                              if (qword_10027DD68) {
                                [(id)qword_10027DD68 WFLog:3 message:"Attempting NOI Transition"];
                              }
                              if (sub_1000C8140((uint64_t)v3))
                              {
                                if (qword_10027DD68) {
                                  [(id)qword_10027DD68 WFLog:3, "Added network is profile based, set previous network prior to __WiFiManagerAttemptNetworkTransition so wifid transitions to this newly added network (%@)", v85 message];
                                }
                                uint64_t context = a1;
                                unint64_t v92 = 0xAAAAAAAA00000064;
                                BOOL v93 = &v90;
                                uint64_t v94 = 0;
                                CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
                              }
                              if (!_os_feature_enabled_impl())
                              {
                                uint64_t context = a1;
                                unint64_t v92 = 0xAAAAAAAA00000050;
                                uint64_t v67 = 1;
                                BOOL v93 = 0;
                                uint64_t v94 = 1;
                                CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
                                goto LABEL_163;
                              }
                              sub_1000047D4(a1, 28);
                            }
                            uint64_t v67 = 1;
                          }
                          else
                          {
                            uint64_t v67 = 0;
                            CFStringRef v68 = v83;
                          }
LABEL_163:
                          sub_100095E1C(a1, v90, 11);
                          if (v21) {
                            CFRelease(v21);
                          }
                          CFMutableDictionaryRef v14 = cf;
                          goto LABEL_166;
                        }
                        int v31 = 0;
                      }
                      else
                      {
                        int v59 = 1;
                      }
LABEL_127:
                      CFIndex v16 = prefs;
                      BOOL v62 = (void *)v82;
                      goto LABEL_128;
                    }
                    CFStringRef v41 = @"Accessory";
                  }
                  sub_1000C984C((CFMutableDictionaryRef *)v3, 0, v41);
                  goto LABEL_85;
                }
LABEL_79:
                int v31 = 0;
                goto LABEL_80;
              }
              if (!sub_1000949CC(a1, v3, v18)) {
                goto LABEL_79;
              }
              if (qword_10027DD68) {
                [qword_10027DD68 WFLog:message:3, "%s: Replaced the existing network", "WiFiManagerAddNetwork"];
              }
            }
            int v59 = 0;
            int v31 = 1;
            goto LABEL_127;
          }
        }
        CFMutableArrayRef Mutable = 0;
        goto LABEL_30;
      }
    }
  }
LABEL_179:
  sub_100095E1C(a1, v3, 11);
  uint64_t v67 = 0;
  CFStringRef v68 = 0;
  if (v14) {
LABEL_166:
  }
    CFRelease(v14);
  if (v68) {
    CFRelease(v68);
  }
  return v67;
}

void sub_100094568(const void *a1)
{
  CFStringRef v2 = (const __CFString *)sub_10001E404((uint64_t)a1, @"WiFiNetworkPasswordString");
  if (v2)
  {
    sub_1000C93E0(a1, v2);
    sub_10001C6A4((uint64_t)a1, @"WiFiNetworkPasswordString", 0);
  }
}

void sub_1000945D4(int a1, CFArrayRef theArray, void *a3, CFIndex *a4, CFIndex *a5)
{
  if (!theArray)
  {
LABEL_14:
    CFIndex Count = 0;
    goto LABEL_15;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (!Count) {
    goto LABEL_15;
  }
  if (!a3 || (CFTypeID v11 = CFGetTypeID(a3), v11 != sub_1000C5C14()))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: invalid network ref" : @"__GetKnownNetworkIndices"];
    }
    goto LABEL_14;
  }
  if (a1 != 4)
  {
    if (Count >= 1)
    {
      CFIndex v12 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = (const void **)CFArrayGetValueAtIndex(theArray, v12);
        if (sub_1000D14A4(ValueAtIndex, (const void **)a3)) {
          break;
        }
        if (Count == ++v12) {
          goto LABEL_14;
        }
      }
      CFIndex Count = 0;
      if (a5) {
        goto LABEL_17;
      }
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  CFIndex v12 = Count;
  while (v12)
  {
    uint64_t v13 = (const void **)CFArrayGetValueAtIndex(theArray, --v12);
    if (sub_1000D14A4(v13, (const void **)a3)) {
      goto LABEL_16;
    }
  }
LABEL_15:
  CFIndex v12 = -1;
LABEL_16:
  if (a5) {
LABEL_17:
  }
    *a5 = Count;
LABEL_18:
  if (a4) {
    *a4 = v12;
  }
}

uint64_t sub_100094718(const __CFArray *a1, const void *a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    CFArrayRef v4 = sub_10000500C(a1);
    if (v4)
    {
      CFArrayRef v5 = v4;
      CFIndex Count = CFArrayGetCount(v4);
      if (Count < 1)
      {
LABEL_11:
        uint64_t v2 = 0;
      }
      else
      {
        CFIndex v7 = Count;
        CFIndex v8 = 0;
        while (1)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v5, v8);
          uint64_t v10 = sub_100016E18((uint64_t)ValueAtIndex);
          if (v10)
          {
            CFTypeID v11 = (const void *)sub_100016E20(v10);
            if (v11)
            {
              CFIndex v12 = sub_10000E5D0((uint64_t)ValueAtIndex, v11);
              if (v12)
              {
                uint64_t v13 = v12;
                int v14 = CFEqual(a2, v12);
                CFRelease(v13);
                if (v14) {
                  break;
                }
              }
            }
          }
          if (v7 == ++v8) {
            goto LABEL_11;
          }
        }
        uint64_t v2 = 1;
      }
      CFRelease(v5);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: failed to get device managers" args:("__WiFiManagerIsAssociatedToNetwork")];
      }
      return 0;
    }
  }
  return v2;
}

uint64_t sub_100094834(uint64_t a1, const __CFArray *a2)
{
  if (a1)
  {
    uint64_t v5 = 0;
    if (a2 && *(unsigned char *)(a1 + 1328))
    {
      CFIndex v7 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        CFArrayRef v8 = *(const __CFArray **)(a1 + 224);
        if (v8) {
          CFIndex Count = CFArrayGetCount(v8);
        }
        else {
          CFIndex Count = 0;
        }
        [v7 WFLog:3 message:@"%s: Switching cached list from %ld to %ld known networks", @"WiFiManagerSetKnownNetworksCache", Count, CFArrayGetCount(a2)];
      }
      CFArrayRef v10 = *(const __CFArray **)(a1 + 224);
      if (v10 == a2) {
        CFArrayRef v10 = 0;
      }
      else {
        *(void *)(a1 + 224) = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, a2);
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Updated %ld known networks in the cache", "WiFiManagerSetKnownNetworksCache", CFArrayGetCount(*(CFArrayRef *)(a1 + 224)));
      }
      sub_100083534(a1, *(const __CFArray **)(a1 + 224));
      if (v10) {
        CFRelease(v10);
      }
      uint64_t v5 = 1;
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: manager is NULL" :@"WiFiManagerSetKnownNetworksCache"];
    }
    uint64_t v5 = 0;
  }
  return v5;
}

uint64_t sub_1000949CC(uint64_t a1, void *a2, const __CFArray *a3)
{
  CFIndex idx = -1;
  BOOL v6 = sub_10001BB2C((BOOL)a2);
  sub_1000BBADC(a3, a2, &idx);
  CFIndex v7 = idx;
  if (idx == -1 && v6)
  {
    CFIndex idx = -1;
    if (!a3) {
      return 0;
    }
    CFIndex Count = CFArrayGetCount(a3);
    if (Count)
    {
      CFIndex v10 = Count;
      if (Count < 1)
      {
        CFIndex v11 = 0;
      }
      else
      {
        CFIndex v11 = 0;
        while (1)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v11);
          if (sub_1000C8E4C((uint64_t)a2, (uint64_t)ValueAtIndex)) {
            break;
          }
          if (v10 == ++v11) {
            goto LABEL_15;
          }
        }
        CFIndex idx = v11;
      }
      if (v11 == v10)
      {
LABEL_15:
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: network with domain name %@ not found", "FindMatchingHS20Network", sub_1000CCB44((uint64_t)a2) message];
        }
      }
    }
    CFIndex v7 = idx;
  }
  if (v7 == -1) {
    return 0;
  }
  int v15 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    if (v6) {
      CFIndex v16 = "domain name";
    }
    else {
      CFIndex v16 = "SSID";
    }
    if (v6) {
      uint64_t v17 = sub_1000CCB44((uint64_t)a2);
    }
    else {
      uint64_t v17 = sub_10001A43C(a2);
    }
    [v15 WFLog:3, "%s: Network with the same %s %@ found at index %ld", "__WiFiManagerModifyExistingNetwork", v16, v17, idx message];
  }
  CFArrayRef v18 = CFArrayGetValueAtIndex(a3, idx);
  if (!v18)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null existingNetwork" args:("__WiFiManagerModifyExistingNetwork")];
    }
    return 0;
  }
  id v19 = v18;
  uint64_t v20 = sub_1000C8A5C((uint64_t)v18);
  uint64_t v21 = sub_1000C8A5C((uint64_t)a2);
  if (v21 != v20)
  {
    uint64_t v22 = v21;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: auth flag changed from 0x%0x to 0x%0x", "__WiFiManagerModifyExistingNetwork", v20, v22];
    }
  }
  CFArrayRef v24 = (const __CFArray *)sub_10001E404((uint64_t)v19, @"networkKnownBSSListKey");
  if (v24)
  {
    CFArrayRef v25 = v24;
    if (CFArrayGetCount(v24)) {
      sub_10001C6A4((uint64_t)a2, @"networkKnownBSSListKey", v25);
    }
  }
  uint64_t v26 = sub_100024070((uint64_t)v19);
  if (v26)
  {
    sub_10001C6A4((uint64_t)a2, @"CHANNEL", v26);
    int v27 = sub_10001E404((uint64_t)v19, @"CHANNEL_FLAGS");
    sub_10001C6A4((uint64_t)a2, @"CHANNEL_FLAGS", v27);
  }
  int v28 = sub_10001E404((uint64_t)v19, @"BSSID");
  sub_10001C6A4((uint64_t)a2, @"BSSID", v28);
  long long v29 = sub_10001E404((uint64_t)v19, @"Standalone");
  sub_10001C6A4((uint64_t)a2, @"Standalone", v29);
  BOOL v30 = sub_1000C9930((uint64_t)a2);
  if (v30)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: AJ prefs detected in incoming WiFiNetworkRef %@. AJ settings from existing network %@ will not be copied over", "__WiFiManagerModifyExistingNetwork", a2, v19 message];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: No AJ prefs detected for incoming network %@, so preserve AJ settings in existing network %@", "__WiFiManagerModifyExistingNetwork", sub_10001A43C(a2), v19 message];
    }
    sub_1000C67C8(a2, (uint64_t)v19);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: network properties after AJ properties merge: %@", "__WiFiManagerModifyExistingNetwork", a2, v88 message];
    }
  }
  if (&_CNForgetSSID)
  {
    if (sub_10001E404((uint64_t)v19, kCNSNetworkWasCaptiveProperty))
    {
      long long v32 = (void *)kCNSNetworkWasCaptiveProperty;
      CFIndex v33 = sub_10001E404((uint64_t)v19, kCNSNetworkWasCaptiveProperty);
      sub_10001C6A4((uint64_t)a2, v32, v33);
    }
    if (sub_10001E404((uint64_t)v19, kCNSCaptiveNetworkProperty))
    {
      unsigned int v34 = (void *)kCNSCaptiveNetworkProperty;
      long long v35 = sub_10001E404((uint64_t)v19, kCNSCaptiveNetworkProperty);
      sub_10001C6A4((uint64_t)a2, v34, v35);
    }
    if (sub_10001E404((uint64_t)v19, kCNSDisabledByCaptiveProperty)
      && !sub_10001E404((uint64_t)a2, kCNSDisabledByCaptiveProperty))
    {
      long long v36 = (void *)kCNSDisabledByCaptiveProperty;
      int v37 = sub_10001E404((uint64_t)v19, kCNSDisabledByCaptiveProperty);
      sub_10001C6A4((uint64_t)a2, v36, v37);
    }
  }
  if (sub_10001E404((uint64_t)v19, @"NetworkOriginator")
    && !sub_10001E404((uint64_t)a2, @"NetworkOriginator"))
  {
    CFNumberRef v38 = sub_10001E404((uint64_t)v19, @"NetworkOriginator");
    sub_10001C6A4((uint64_t)a2, @"NetworkOriginator", v38);
  }
  int v39 = (void *)CWFCoreWiFiSpecificAttributesKey;
  if (sub_10001E404((uint64_t)v19, CWFCoreWiFiSpecificAttributesKey) && !sub_10001E404((uint64_t)a2, v39))
  {
    CFIndex v40 = sub_10001E404((uint64_t)v19, v39);
    sub_10001C6A4((uint64_t)a2, v39, v40);
  }
  if (sub_10001E404((uint64_t)v19, @"WiFiNetworkAttributeIsPublic")
    && !sub_10001E404((uint64_t)a2, @"WiFiNetworkAttributeIsPublic"))
  {
    CFStringRef v41 = sub_10001E404((uint64_t)v19, @"WiFiNetworkAttributeIsPublic");
    sub_10001C6A4((uint64_t)a2, @"WiFiNetworkAttributeIsPublic", v41);
  }
  if (sub_10001EE48(v19) && !sub_10001EE48(a2))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Force Directed setting for %@", "__WiFiManagerModifyExistingNetwork", sub_10001A43C(a2) message];
    }
    sub_1000C7494((uint64_t)a2, 1);
  }
  if (!sub_10001ED58((uint64_t)a2))
  {
    unsigned int v43 = sub_10001ED58((uint64_t)a2);
    if (v43 != sub_10001ED58((uint64_t)v19))
    {
      CFBooleanRef v44 = sub_10001E404((uint64_t)v19, @"SaveDataMode");
      sub_10001C6A4((uint64_t)a2, @"SaveDataMode", v44);
    }
  }
  CFStringRef v45 = sub_1000CDE04((uint64_t)v19);
  CFDateRef v46 = (const __CFDate *)sub_1000CDE04((uint64_t)a2);
  if (v45 && (!v46 || CFDateCompare((CFDateRef)v45, v46, 0) == kCFCompareGreaterThan))
  {
    double v47 = sub_1000CDD74((uint64_t)v19);
    sub_1000CDE7C(a2, v45, v47);
    CFDateRef v49 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      double v50 = sub_1000CDD74((uint64_t)v19);
      [v49 WFLog:3, "%s: setting networkQuality to %.3f at %@ for network %@", "__WiFiManagerModifyExistingNetwork", *(void *)&v50, v45, sub_10001A43C(a2) message];
    }
  }
  if (sub_1000C99D8((uint64_t)v19, 1) && !sub_1000C99D8((uint64_t)a2, 1))
  {
    CFIndex v51 = sub_1000C99D8((uint64_t)v19, 1);
    sub_1000C995C(a2, 1, v51);
  }
  if (sub_1000C99D8((uint64_t)v19, 0) && !sub_1000C99D8((uint64_t)a2, 0))
  {
    CFIndex v52 = sub_1000C99D8((uint64_t)v19, 0);
    sub_1000C995C(a2, 0, v52);
  }
  unsigned int v53 = sub_10001E404((uint64_t)v19, @"prevJoined");
  CFDateRef v54 = (const __CFDate *)sub_10001E404((uint64_t)a2, @"prevJoined");
  if (v53)
  {
    CFDateRef v55 = v54;
    if (v54)
    {
      if (CFDateCompare((CFDateRef)v53, v54, 0) == kCFCompareGreaterThan)
      {
        sub_10001C6A4((uint64_t)a2, @"prevJoined", v53);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: overriding previous join date from %@ to %@ for network %@", "__WiFiManagerModifyExistingNetwork", v55, v53, sub_10001A43C(a2) message];
        }
      }
    }
  }
  if (sub_10001E404((uint64_t)v19, @"WiFiManagerKnownNetworksEventType"))
  {
    CFDateRef v57 = sub_10001E404((uint64_t)v19, @"WiFiManagerKnownNetworksEventType");
    sub_10001C6A4((uint64_t)a2, @"WiFiManagerKnownNetworksEventType", v57);
  }
  if (sub_10001E404((uint64_t)v19, @"addedAt"))
  {
    int v58 = sub_10001E404((uint64_t)v19, @"addedAt");
    sub_10001C6A4((uint64_t)a2, @"addedAt", v58);
  }
  if (sub_10001CD28((uint64_t)v19) != 0.0 && sub_10001CD28((uint64_t)a2) == 0.0)
  {
    double v59 = sub_10001CD28((uint64_t)v19);
    sub_1000C9A68((uint64_t)a2, v59);
  }
  if (sub_10001E404((uint64_t)v19, @"userPreferredNetworkNames")
    && !sub_10001E404((uint64_t)a2, @"userPreferredNetworkNames"))
  {
    uint64_t v60 = sub_10001E404((uint64_t)v19, @"userPreferredNetworkNames");
    sub_10001C6A4((uint64_t)a2, @"userPreferredNetworkNames", v60);
  }
  if (sub_1000C6B08((uint64_t)v19) && !sub_1000C6B08((uint64_t)a2))
  {
    int v61 = sub_1000C6B08((uint64_t)v19);
    sub_1000CF1F0(a2, v61);
  }
  if (sub_1000CF14C((uint64_t)v19) && !sub_1000CF14C((uint64_t)a2))
  {
    int v62 = sub_1000CF14C((uint64_t)v19);
    sub_1000CEFF4(a2, v62);
  }
  if (sub_1000CFBD8((uint64_t)v19))
  {
    unsigned int v63 = sub_1000CFBD8((uint64_t)v19);
    sub_10001A610((uint64_t)a2, @"kWiFiNetworkSSIDHarvestStatusKey", v63);
  }
  if (*(unsigned char *)(a1 + 2105)) {
    sub_100095734(a1, v19, a2);
  }
  BOOL v64 = sub_10001ED9C((uint64_t)a2);
  if (v64 != sub_10001ED9C((uint64_t)v19))
  {
    uint64_t v66 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      BOOL v67 = sub_10001ED9C((uint64_t)v19);
      [v66 WFLog:3 message:@"%s: privacy proxy enabled changed from %d to %d", @"__WiFiManagerModifyExistingNetwork", v67, sub_10001ED9C((uint64_t)a2)];
    }
  }
  if (!sub_10001FC1C((uint64_t)v19) || !sub_10001FC1C((uint64_t)a2)) {
    goto LABEL_140;
  }
  CFDictionaryRef v68 = (const __CFDictionary *)sub_10001E404((uint64_t)v19, @"EnterpriseProfile");
  CFDictionaryRef v69 = (const __CFDictionary *)sub_10001E404((uint64_t)a2, @"EnterpriseProfile");
  CFDictionaryRef theDict = 0;
  CFStringRef value = 0;
  if (v68) {
    CFDictionaryGetValueIfPresent(v68, @"EAPClientConfiguration", (const void **)&value);
  }
  if (v69) {
    CFDictionaryGetValueIfPresent(v69, @"EAPClientConfiguration", (const void **)&theDict);
  }
  if (!value)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: No existing EAP config for %@, using new one", "__WiFiManagerModifyExistingNetwork", sub_10001A43C(a2) message];
    }
    goto LABEL_140;
  }
  if (theDict)
  {
    CFArrayRef v91 = 0;
    CFArrayRef theArray = 0;
    CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"AcceptEAPTypes", (const void **)&theArray);
    CFDictionaryGetValueIfPresent(theDict, @"AcceptEAPTypes", (const void **)&v91);
    if (!theArray) {
      goto LABEL_140;
    }
    if (CFArrayGetCount(theArray) >= 1)
    {
      CFIndex v70 = 0;
      int v71 = 1;
      do
      {
        unsigned int v72 = CFArrayGetValueAtIndex(theArray, v70);
        CFArrayRef v73 = v91;
        if (!v91
          || (v74 = v72, v96.CFIndex length = CFArrayGetCount(v91), v96.location = 0, !CFArrayContainsValue(v73, v96, v74)))
        {
          int v71 = 0;
        }
        ++v70;
      }
      while (v70 < CFArrayGetCount(theArray));
      if (!v71) {
        goto LABEL_140;
      }
    }
    BOOL v89 = 0;
    unsigned int v90 = 0;
    CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"UserName", (const void **)&v90);
    CFDictionaryGetValueIfPresent(theDict, @"UserName", (const void **)&v89);
    if (v89 || !v90) {
      goto LABEL_140;
    }
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Keeping EXISTING username for %@", "__WiFiManagerModifyExistingNetwork", sub_10001A43C(a2) message];
    }
    id v76 = v90;
    CFIndex v77 = @"UserName";
    uint64_t v78 = (uint64_t)a2;
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Keeping EXISTING EAP config for %@", "__WiFiManagerModifyExistingNetwork", sub_10001A43C(a2) message];
    }
    id v76 = sub_10001E404((uint64_t)v19, @"EnterpriseProfile");
    uint64_t v78 = (uint64_t)a2;
    CFIndex v77 = @"EnterpriseProfile";
  }
  sub_10001C6A4(v78, v77, v76);
LABEL_140:
  if (!sub_10001ED04((uint64_t)a2)
    && !sub_1000C66D0((BOOL)a2)
    && !sub_10001FC1C((uint64_t)a2)
    && !sub_10001FC6C((BOOL)a2)
    && !sub_1000C6FE8((const __CFDictionary *)a2))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: new network is open, so remove existing password", @"__WiFiManagerModifyExistingNetwork"];
    }
    sub_1000C94E0(a2);
  }
  if (!sub_10001E404((uint64_t)a2, @"WiFiNetworkNANServiceID")
    && sub_10001E404((uint64_t)v19, @"WiFiNetworkNANServiceID"))
  {
    uint64_t v82 = sub_10001E404((uint64_t)v19, @"WiFiNetworkNANServiceID");
    sub_10001C6A4((uint64_t)a2, @"WiFiNetworkNANServiceID", v82);
  }
  if (!sub_10001E404((uint64_t)a2, @"PublicAirPlayNetwork")
    && sub_10001E404((uint64_t)v19, @"PublicAirPlayNetwork"))
  {
    int v83 = sub_10001E404((uint64_t)v19, @"PublicAirPlayNetwork");
    sub_10001C6A4((uint64_t)a2, @"PublicAirPlayNetwork", v83);
  }
  CFBooleanRef v84 = kCFBooleanFalse;
  if (sub_1000C7E9C((uint64_t)a2)) {
    CFBooleanRef v85 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v85 = kCFBooleanFalse;
  }
  sub_10001C6A4((uint64_t)a2, @"ALLOW_WPA2_PSK", v85);
  if (!sub_1000C8A5C((uint64_t)a2) && !sub_1000C80A4((const __CFDictionary *)a2)) {
    CFBooleanRef v84 = kCFBooleanTrue;
  }
  sub_10001C6A4((uint64_t)a2, @"ALLOW_OWE_TSN", v84);
  CFArrayRemoveValueAtIndex(a3, idx);
  CFArrayInsertValueAtIndex(a3, idx, a2);
  sub_100093410(a1, (CFDictionaryRef *)a2, 0);
  sub_100094834(a1, a3);
  return 1;
}

void sub_100095734(uint64_t a1, const void *a2, const void *a3)
{
  char v15 = 0;
  if (sub_1000CC4AC((uint64_t)a3) != 1)
  {
    uint64_t v7 = sub_1000CBD24((uint64_t)a2, (uint64_t)a3, &v15);
    if (v7 == 1)
    {
      char v20 = 1;
      uint64_t context = a1;
      unint64_t v17 = 0xAAAAAAAA0000004FLL;
      CFArrayRef v18 = &v20;
      uint64_t v19 = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
      sub_1000CF1F0(a3, 1);
      return;
    }
    if (v7 == -1)
    {
      CFArrayRef v8 = a3;
      int v9 = 2;
    }
    else
    {
      if (!v15)
      {
LABEL_18:
        char v20 = 0;
        uint64_t context = a1;
        unint64_t v17 = 0xAAAAAAAA0000004FLL;
        CFArrayRef v18 = &v20;
        uint64_t v19 = 1;
        goto LABEL_19;
      }
      if (a2)
      {
        CFStringRef v10 = (const __CFString *)sub_10001A43C(a2);
        CFStringRef v11 = (const __CFString *)sub_10001A43C(a3);
        if (CFStringCompare(v10, v11, 0))
        {
          uint64_t v13 = (void *)qword_10027DD68;
          if (qword_10027DD68)
          {
            int v14 = sub_10001A43C(a2);
            [v13 WFLog:4, "NOI home-state: ERROR Multiple home networks exist '%@', '%@' ", v14, sub_10001A43C(a3) message];
          }
          char v20 = 1;
          uint64_t context = a1;
          unint64_t v17 = 0xAAAAAAAA0000004FLL;
          CFArrayRef v18 = &v20;
          uint64_t v19 = 1;
          CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
        }
      }
      CFArrayRef v8 = a3;
      int v9 = 1;
    }
    sub_1000CF1F0(v8, v9);
    sub_1000C977C((uint64_t)a3, 0);
    sub_1000C96AC((uint64_t)a3, 1);
    return;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s Forced fix network. Setting '%@' as NOI", "__WiFiManagerApplyHomeNetworkPolicy", sub_10001A43C(a3) message];
  }
  sub_1000CF344(a3, 1);
  if (sub_1000C6B08((uint64_t)a3) != 1) {
    goto LABEL_18;
  }
  char v20 = 1;
  uint64_t context = a1;
  unint64_t v17 = 0xAAAAAAAA0000004FLL;
  CFArrayRef v18 = &v20;
  uint64_t v19 = 1;
LABEL_19:
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
}

NSDictionary *__cdecl sub_1000959A8(id a1, id a2)
{
  CFDictionaryRef v2 = sub_10000E5B8((uint64_t)a2);
  int v3 = (void *)CFMakeCollectable(v2);

  return (NSDictionary *)v3;
}

void sub_1000959D8(uint64_t a1)
{
  sub_1000454D8(*(void *)(*(void *)(a1 + 32) + 1304), *(void *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFDictionaryRef v2 = *(const void **)(*(void *)(a1 + 32) + 1304);

  CFRelease(v2);
}

void sub_100095A24(uint64_t a1, const void *a2, unsigned int a3)
{
  long long values = 0;
  if (!a2)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:4 message:@"%s: network is null" :@"__WiFiManagerDispatchClientsNetworksChangedEvent"];
    }
    goto LABEL_27;
  }
  long long values = sub_10000E5B8((uint64_t)a2);
  if (!values)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, "%s: network attributes is null", "__WiFiManagerDispatchClientsNetworksChangedEvent"];
    }
    goto LABEL_27;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: failed to create dictionary", "__WiFiManagerDispatchClientsNetworksChangedEvent")];
    }
LABEL_27:
    uint64_t v7 = 0;
    goto LABEL_13;
  }
  uint64_t v7 = Mutable;
  if (a3 > 2 || (CFArrayRef v8 = *off_100240DA8[a3]) == 0)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:4, "%s: failed to create changeTypeKey", "__WiFiManagerDispatchClientsNetworksChangedEvent"];
    }
    goto LABEL_12;
  }
  CFArrayRef v9 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  if (!v9)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4, @"%s: failed to create changes array", @"__WiFiManagerDispatchClientsNetworksChangedEvent"];
    }
LABEL_12:
LABEL_13:
    CFArrayRef v10 = 0;
    goto LABEL_14;
  }
  CFArrayRef v10 = v9;
  CFDictionarySetValue(v7, v8, v9);
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: type %@ network %@", "__WiFiManagerDispatchClientsNetworksChangedEvent", v8, sub_10001A43C(a2) message];
  }
  uint64_t context = v7;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_1000BBBF4, &context);
LABEL_14:
  if (values)
  {
    CFRelease(values);
    long long values = 0;
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v7) {
    CFRelease(v7);
  }
}

void sub_100095CAC(void *a1, const void *a2)
{
  if (a1)
  {
    if (a2)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: ssid: %@", "WiFiManagerRemoveNetworkNameFromUserNotificationBlacklist", a2 message];
      }
      CFDictionaryRef v5 = sub_1000A9590(a1, 0);
      if (v5)
      {
        CFDictionaryRef v6 = v5;
        if (CFDictionaryContainsKey(v5, a2))
        {
          CFIndex Count = CFDictionaryGetCount(v6);
          MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count, v6);
          CFDictionaryRemoveValue(MutableCopy, a2);
          [+[NSUserDefaults standardUserDefaults] setObject:MutableCopy forKey:@"UserNotificationBlacklist"];
          sub_1000A59D4((uint64_t)a1, MutableCopy);
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
        }
        CFRelease(v6);
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: ssid is null" arguments:("WiFiManagerRemoveNetworkNameFromUserNotificationBlacklist", nil)];
      }
    }
  }
}

uint64_t sub_100095E1C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v243 = 0;
  CFIndex v244 = -1;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v7 = CFDateCreate(kCFAllocatorDefault, Current);
  int v8 = _os_feature_enabled_impl();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: networkRecord create fail" args:("WiFiManagerAddPrivateMacNetwork")];
    }
LABEL_384:
    uint64_t v194 = 0;
    if (!v7) {
      goto LABEL_329;
    }
    goto LABEL_328;
  }
  CFMutableDictionaryRef v10 = Mutable;
  if (!a1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null manager", "WiFiManagerAddPrivateMacNetwork")];
    }
    goto LABEL_378;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiManagerAddPrivateMacNetwork")];
    }
LABEL_378:
    goto LABEL_383;
  }
  uint64_t v11 = sub_100083F8C(a1, 0);
  if (!v11)
  {
LABEL_383:
    CFRelease(v10);
    goto LABEL_384;
  }
  CFArrayRef v12 = (const __CFArray *)v11;
  CFStringRef value = (const __CFString *)sub_10001A43C(a2);
  sub_1000D1FFC((uint64_t)a2);
  BOOL v13 = sub_1000C8140((uint64_t)a2);
  uint64_t v241 = a3;
  if (a3 == 7 && v13)
  {
    *(unsigned char *)(a1 + 529) = 1;
    sub_10001C6A4((uint64_t)a2, @"NetworkAddedByProfile", kCFBooleanTrue);
    if (sub_1000C6710((BOOL)a2))
    {
      sub_1000AB298(v12, a2, &v244, &v243);
      if (v244 != -1)
      {
        int v14 = sub_10009C2E8(a1, a2, @"PresentInKnownNetworks", kCFBooleanFalse);
        if (qword_10027DD68)
        {
          if (v14) {
            CFIndex v16 = "%s: HS20 provisioning already exists. Removing existing provisioning and matched networks. provisionin"
          }
                  "g profile : <%@>";
          else {
            CFIndex v16 = "%s: Unable to remove existing HS20 account <%@>";
          }
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, v16, "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(a2));
        }
      }
      unint64_t v17 = (const void **)sub_1000A2050((const __CFArray *)a1);
      if (v17)
      {
        CFArrayRef v18 = v17;
        if (sub_1000D14A4(v17, (const void **)a2))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, " %s WFMacRandomisation : Disassociating because a HS2.0 profile is being added while being associated to the provisioned network <%@>", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v18) message];
          }
          sub_100086F2C(a1, "WiFiManagerAddPrivateMacNetwork", 28353);
        }
      }
    }
    else
    {
      char v20 = (const void **)sub_1000A2050((const __CFArray *)a1);
      sub_1000AB1D8(a1, (const void **)a2);
      if (v20)
      {
        if (sub_1000D14A4(v20, (const void **)a2))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, " %s WFMacRandomisation : Disassociating because a profile based network (with private MAC key) is being added while we are associated to that network <%@>", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(a2) message];
          }
          sub_100086F2C(a1, "WiFiManagerAddPrivateMacNetwork", 28331);
        }
        CFRelease(v20);
      }
      context[0] = a1;
      context[1] = 0xAAAAAAAA0000006ELL;
      void context[2] = 0;
      void context[3] = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
      sub_1000A6B7C(a1, 1, 0);
    }
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, " %s WFMacRandomisation : Checking if network already present : Retrieving private mac cache version of the network <%@>", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(a2) message];
  }
  CFDateRef v23 = sub_1000AB3E0(a1, (const void **)a2);
  CFDateRef cf = v10;
  if (!v23) {
    goto LABEL_37;
  }
  CFArrayRef v24 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v23);
  BOOL v25 = sub_10001BB2C((BOOL)a2);
  if (a3 != 7 && v25)
  {
    uint64_t v26 = (uint64_t)v24;
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, " %s WFMacRandomisation : HS2.0 network <%@> add reason :<%u>. Merge HS20 records", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(a2), a3 message];
    }
    CFArrayRef v24 = (_WORD *)v26;
    sub_1000198FC(v26, (uint64_t)a2);
  }
  if (!v24)
  {
LABEL_37:
    BOOL v30 = sub_10001BB2C((BOOL)a2);
    if (a3 == 7 && v30)
    {
      long long v29 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)a2);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, " %s WFMacRandomisation : HS2.0 provisioning being added by profile addition. Storing the entire record: <%@>", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(a2) message];
      }
    }
    else
    {
      if (value) {
        CFDictionarySetValue(v10, @"SSID_STR", value);
      }
      long long v29 = sub_100019658((int)kCFAllocatorDefault, v10);
    }
    if (v29)
    {
      CFArrayRef v24 = 0;
      int v28 = v29;
      goto LABEL_47;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: new Network create fail" : @"WiFiManagerAddPrivateMacNetwork"];
    }
    CFMutableDictionaryRef v10 = cf;
    goto LABEL_383;
  }
  int v28 = 0;
  long long v29 = v24;
LABEL_47:
  sub_1000AB4B0((uint64_t)v29, (uint64_t)a2);
  CFDateRef v242 = v7;
  CFTypeRef v238 = v24;
  switch((int)a3)
  {
    case 2:
      sub_10001C6A4((uint64_t)v29, @"MacGenerationTimeStamp", v7);
      sub_10001C6A4((uint64_t)v29, @"ResetCaptiveProbe", kCFBooleanTrue);
      sub_10001C6A4((uint64_t)v29, @"NoAssociationWithNewMac", kCFBooleanTrue);
      long long v32 = sub_10001E404((uint64_t)a2, @"PRIVATE_MAC_ADDRESS");
      if (!v32) {
        goto LABEL_60;
      }
      CFIndex v33 = v32;
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID != CFGetTypeID(v33)) {
        goto LABEL_60;
      }
      sub_10001C6A4((uint64_t)v29, @"PRIVATE_MAC_ADDRESS", v33);
      long long v35 = *(const void **)(a1 + 408);
      goto LABEL_59;
    case 3:
      sub_10001C6A4((uint64_t)v29, @"MacGenerationTimeStamp", v7);
      sub_10001C6A4((uint64_t)v29, @"NoAssociationWithNewMac", kCFBooleanTrue);
      int v37 = sub_10001E404((uint64_t)a2, @"PRIVATE_MAC_ADDRESS");
      if (v37)
      {
        CFNumberRef v38 = v37;
        CFTypeID v39 = CFDictionaryGetTypeID();
        if (v39 == CFGetTypeID(v38)) {
          sub_10001C6A4((uint64_t)v29, @"PRIVATE_MAC_ADDRESS", v38);
        }
      }
      CFIndex v40 = sub_10001E404((uint64_t)a2, @"RotationKeyUsed");
      if (v40)
      {
        long long v35 = v40;
LABEL_59:
        sub_10001C6A4((uint64_t)v29, @"RotationKeyUsed", v35);
      }
LABEL_60:
      sub_10001A610((uint64_t)v29, @"FailureCountThresholdCurrent", *(unsigned int *)(a1 + 456));
      goto LABEL_313;
    case 4:
      sub_10001C6A4((uint64_t)v29, @"preSwUpdateNetwork", kCFBooleanTrue);
      sub_10001C6A4((uint64_t)v29, @"FeatureOffBySystemForHome", 0);
      if (!sub_1000AB8E8((BOOL)v29) && sub_1000AB8E8((BOOL)a2))
      {
        CFStringRef v41 = sub_10001E404((uint64_t)a2, @"NetworkOfInterestHomeState");
        uint64_t v42 = v28;
        unsigned int v43 = sub_10001E404((uint64_t)a2, @"NetworkAtLocationOfInterestType");
        sub_10001C6A4((uint64_t)v29, @"NetworkOfInterestHomeState", v41);
        CFBooleanRef v44 = v43;
        int v28 = v42;
        sub_10001C6A4((uint64_t)v29, @"NetworkAtLocationOfInterestType", v44);
      }
      goto LABEL_64;
    case 5:
LABEL_64:
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation :%s: Processing migrated network: <%@>", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v29) message];
      }
      unsigned int v228 = sub_1000199C0((uint64_t)a2);
      BOOL key = sub_1000AB8E8((BOOL)v29);
      CFAbsoluteTime v46 = CFAbsoluteTimeGetCurrent();
      CFDateRef v47 = CFDateCreate(kCFAllocatorDefault, v46);
      CFAbsoluteTime v48 = sub_10001A43C(a2);
      double v49 = sub_10001CD28((uint64_t)a2);
      uint64_t v50 = sub_1000C7E9C((uint64_t)a2);
      CFDictionaryRef v51 = sub_1000C6FE8((const __CFDictionary *)a2);
      BOOL v52 = sub_10001FC1C((uint64_t)a2);
      CFMutableArrayRef v232 = v28;
      if (sub_1000AB8E8((BOOL)a2)) {
        goto LABEL_259;
      }
      if (sub_1000CF14C((uint64_t)a2) == 1) {
        goto LABEL_259;
      }
      if (sub_1000CF5AC((uint64_t)a2) == 3) {
        goto LABEL_259;
      }
      CFDateRef v53 = (const __CFDate *)sub_10001E404((uint64_t)a2, @"addedAt");
      if (v49 == 0.0) {
        goto LABEL_259;
      }
      int v220 = v48;
      BOOL v221 = v52;
      CFDateRef otherDate = v53;
      if (!v53)
      {
        uint64_t v222 = 0;
        uint64_t v56 = 0;
        uint64_t v54 = 0;
LABEL_251:
        char v225 = 1;
        goto LABEL_256;
      }
      uint64_t v54 = (int)(CFDateGetTimeIntervalSinceDate(v47, v53) / 86400.0);
      if (!v54) {
        goto LABEL_250;
      }
      double v55 = v49 / (double)(int)v54;
      if ((int)v54 > 6)
      {
        if (v55 > 10800.0)
        {
          char v225 = 0;
          uint64_t v56 = 0;
          uint64_t v222 = 1;
          goto LABEL_256;
        }
LABEL_250:
        uint64_t v222 = 0;
        uint64_t v56 = 0;
        goto LABEL_251;
      }
      if (v55 <= 14400.0)
      {
        uint64_t v222 = 0;
        char v225 = 1;
      }
      else
      {
        char v225 = 0;
        uint64_t v222 = 1;
      }
      uint64_t v56 = 1;
LABEL_256:
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : %s, current Date : [%@], recentlyAdded [%hhu], Timesinceadded :[%f], daysSinceAdded : [%d], FrequentlyUSed [%hhu]", "__WiFiManagerPrivateMacIsSpecialFrequentlyUsedNetwork", v47, v56, CFDateGetTimeIntervalSinceDate(v47, otherDate), v54, v222 message];
      }
      if (v225)
      {
LABEL_259:
        uint64_t v160 = 0;
        if (!v47) {
          goto LABEL_261;
        }
        goto LABEL_260;
      }
      if (!(v50 | v51) || v221)
      {
        if (qword_10027DD68)
        {
          int v216 = v208;
          [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Frequently used network <%@>. suppoerts WPA2 : [%hhu], supports WPA3 : [%hhu], is EAP : [%hhu]", "__WiFiManagerPrivateMacIsSpecialFrequentlyUsedNetwork", v220, v50, v51, v221 message];
          v208 = v216;
        }
        uint64_t v160 = 0;
      }
      else
      {
        if (qword_10027DD68)
        {
          uint64_t v209 = v208;
          [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : frequently used, secure and non enterprise network <%@> ", "__WiFiManagerPrivateMacIsSpecialFrequentlyUsedNetwork", v220 message];
          v208 = v209;
        }
        uint64_t v160 = 1;
      }
      if (v47) {
LABEL_260:
      }
        CFRelease(v47);
LABEL_261:
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s WFMacRandomisation : migrated network type. isCarplay <%hhu>, isHome <%hhu>, isSpecialFrequentlyUsed <%hhu>", "WiFiManagerAddPrivateMacNetwork", v228, key, v160);
      }
      int v163 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        uint64_t v164 = sub_10001E404((uint64_t)a2, @"NetworkOfInterestHomeState");
        [v163 WFLog:3, "%s WFMacRandomisation : migrated network Home state: from known networks <%@>, From privateMac cache <%@>,", "WiFiManagerAddPrivateMacNetwork", v164, sub_10001E404((uint64_t)v29, @"NetworkOfInterestHomeState" message];
      }
      CFBooleanRef v165 = sub_10000D934((void *)a1, @"PrivateMacForceDisableForHome");
      CFIndex v166 = sub_10000D934((void *)a1, @"PrivateMacTurnOffCarplayNetworks");
      CFBooleanRef v227 = sub_10000D934((void *)a1, @"ForceUseStaticMac");
      CFBooleanRef v167 = (const __CFBoolean *)sub_10001E404((uint64_t)v29, @"NetworkUsedForSWUpgrade");
      CFArrayRef v168 = sub_10001E404((uint64_t)v29, @"PrivateMacDefaultToOFF");
      __int16 v169 = sub_10001E404((uint64_t)v29, @"PrivateMacProfileDefaultInitialValue");
      if (v169) {
        sub_10001C6A4((uint64_t)v29, @"PrivateMacProfileDefaultInitialValue", v169);
      }
      if (v228)
      {
        int v28 = v232;
        if (v166 && v166 == kCFBooleanTrue)
        {
          sub_1000AB938(a1, v29);
          sub_10001C6A4((uint64_t)v29, @"FeatureOffBySystemForCarplay", v166);
        }
      }
      else
      {
        int v28 = v232;
        if (v168)
        {
          sub_10001C6A4((uint64_t)v29, @"PrivateMacDefaultToOFF", v168);
          CFDictionaryRef v170 = sub_10001E404((uint64_t)v29, @"PayloadUUID");
          if (v170
            || (context[0] = -1, (CFArrayRef v175 = (const __CFArray *)sub_1000830B8(a1)) != 0)
            && (CFArrayRef v176 = v175, sub_1000945D4(1, v175, a2, context, 0), context[0] != -1)
            && (CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v176, context[0])) != 0
            && (CFDictionaryRef v170 = sub_10001E404((uint64_t)ValueAtIndex, @"PayloadUUID")) != 0)
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Found payloadUUID for network %@", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v29) message];
            }
            sub_10001C6A4((uint64_t)v29, @"PayloadUUID", v170);
            CFDictionaryRef v173 = *(void **)(a1 + 1480);
            if ([v173 isWiFiNetworkMDMNetwork:v29])
            {
            }
            else
            {
              unsigned __int8 v178 = [v173 isSupervisedDevice];
              if ((v178 & 1) == 0) {
                goto LABEL_291;
              }
            }
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Network <%@> has/had profile based disable key ", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v29) message];
            }
            sub_1000AB938(a1, v29);
            *(unsigned char *)(a1 + 529) = 1;
          }
        }
        else if (v167 && v167 == kCFBooleanTrue)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Network <%@> used during setup already. Skip data migration.", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v29) message];
          }
        }
        else
        {
          BOOL v199 = sub_1000ABB2C(a1, (uint64_t)v29);
          int v200 = v241;
          if (!v199)
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Network <%@> evaluated eligible for classification as FALSE. ", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v29) message];
            }
            int v200 = v241;
          }
          if (key && v165 && v165 == kCFBooleanTrue)
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s WFMacRandomisation : Skipping home network disable", "WiFiManagerAddPrivateMacNetwork")];
            }
          }
          if (v199)
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Migrated Network <%@> eligible for classification. Tagged. ", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v29) message];
            }
            v231 = sub_1000A2050((const __CFArray *)a1);
            CFArrayRef v204 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            if (v200 == 5)
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Downgrading to physical MAC for setup network <%@>", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v29) message];
              }
              CFNumberRef v206 = sub_10005B0B8(1);
              CFDictionarySetValue(v204, @"PRIVATE_MAC_ADDRESS_TYPE", v206);
              CFDictionarySetValue(v204, @"PRIVATE_MAC_ADDRESS_VALUE", *(const void **)(a1 + 488));
              sub_10001C6A4((uint64_t)v29, @"NetworkUsedForSWUpgrade", kCFBooleanTrue);
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation :%s: Setup network detected <%@> and using physical MAC. Flag NetworkUsedForSWUpgrade", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v29) message];
              }
            }
            else
            {
              CFDataRef v211 = *(const __CFData **)(a1 + 408);
              CFDataRef v210 = *(const __CFData **)(a1 + 416);
              CFDataRef v212 = *(const __CFData **)(a1 + 488);
              CFStringRef v213 = (const __CFString *)sub_10001A43C(v29);
              CFDataRef v214 = sub_1000D1978(v210, v211, v212, v213);
              CFNumberRef v206 = sub_10005B0B8(2);
              CFDictionarySetValue(v204, @"PRIVATE_MAC_ADDRESS_TYPE", v206);
              CFDictionarySetValue(v204, @"PRIVATE_MAC_ADDRESS_VALUE", v214);
              sub_10001C6A4((uint64_t)v29, @"RotationKeyUsed", *(const void **)(a1 + 408));
              if (v214) {
                CFRelease(v214);
              }
              int v28 = v232;
            }
            if (v206) {
              CFRelease(v206);
            }
            sub_10001C6A4((uint64_t)v29, @"PrivateMacJoinDateAfterUpgrade", 0);
            sub_10001C6A4((uint64_t)v29, @"MacAddressRandomisationTagMigratedNetwork", kCFBooleanTrue);
            sub_10001A610((uint64_t)v29, @"MacAddressRandomisationClassificationAttempts", *(int *)(a1 + 388));
            sub_10001A610((uint64_t)v29, @"PrivateMacClassifyInterval", *(int *)(a1 + 384));
            sub_10001C6A4((uint64_t)v29, @"PRIVATE_MAC_ADDRESS", v204);
            sub_10001C6A4((uint64_t)v29, @"PresentInKnownNetworks", kCFBooleanTrue);
            sub_10001C6A4((uint64_t)v29, @"BlockRotation", kCFBooleanTrue);
            sub_10001C6A4((uint64_t)v29, @"PrivateMacFutureMacAddress", 0);
            sub_10001C6A4((uint64_t)v29, @"privateMacSuccessfulAssocAtleastOnce", 0);
            if (v231)
            {
              CFStringRef v215 = (const __CFString *)sub_10001A43C(v231);
              if (CFEqual(v215, value)) {
                sub_10001C6A4((uint64_t)v29, @"PrivateMacJoinDateAfterUpgrade", v242);
              }
            }
            if (v204) {
              CFRelease(v204);
            }
            if (v231) {
              CFRelease(v231);
            }
          }
        }
      }
LABEL_291:
      if (v227 && v227 == kCFBooleanTrue)
      {
        CFDataRef v180 = (const __CFData *)sub_10001E404((uint64_t)v29, @"RotationKeyUsed");
        CFDataRef v181 = *(const __CFData **)(a1 + 416);
        CFDataRef v182 = *(const __CFData **)(a1 + 488);
        CFStringRef v183 = (const __CFString *)sub_10001A43C(v29);
        if (v180) {
          CFDataRef v184 = v180;
        }
        else {
          CFDataRef v184 = 0;
        }
        CFDataRef v185 = sub_1000D1978(v181, v184, v182, v183);
        CFDictionaryRef v186 = (const __CFDictionary *)sub_10001E404((uint64_t)v29, @"PRIVATE_MAC_ADDRESS");
        if (v186)
        {
          CFDictionaryRef v187 = v186;
          CFTypeID v188 = CFDictionaryGetTypeID();
          if (v188 == CFGetTypeID(v187))
          {
            CFNumberRef v189 = (const __CFNumber *)CFDictionaryGetValue(v187, @"PRIVATE_MAC_ADDRESS_TYPE");
            if (v189 && sub_10001C140(v189) == 3)
            {
              CFDictionaryRef v190 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              CFNumberRef v191 = sub_10005B0B8(3);
              CFDictionarySetValue(v190, @"PRIVATE_MAC_ADDRESS_TYPE", v191);
              CFDictionarySetValue(v190, @"PRIVATE_MAC_ADDRESS_VALUE", v185);
              sub_10001C6A4((uint64_t)v29, @"PRIVATE_MAC_ADDRESS", v190);
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation :%s: Force moved network <%@> to use static MAC", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v29) message];
              }
              if (v190) {
                CFRelease(v190);
              }
              if (v191) {
                CFRelease(v191);
              }
            }
            if (sub_10001E404((uint64_t)v29, @"PrivateMacFutureMacAddress")) {
              sub_10001C6A4((uint64_t)v29, @"PrivateMacFutureMacAddress", v185);
            }
          }
        }
        if (v185) {
          CFRelease(v185);
        }
      }
      uint64_t v102 = @"TotalRotationsThisBuild";
      goto LABEL_311;
    case 6:
      sub_10001C6A4((uint64_t)v29, @"PresentInKnownNetworks", kCFBooleanTrue);
      CFDictionaryRef v57 = (const __CFDictionary *)sub_10001E404((uint64_t)v29, @"PRIVATE_MAC_ADDRESS");
      CFBooleanRef v229 = (const __CFBoolean *)sub_10001E404((uint64_t)v29, @"NetworkUsedForSWUpgrade");
      CFIndex v233 = v28;
      if (v57 && (CFTypeID v58 = CFDictionaryGetTypeID(), v58 == CFGetTypeID(v57)))
      {
        CFDataRef v59 = (const __CFData *)CFDictionaryGetValue(v57, @"PRIVATE_MAC_ADDRESS_IN_USE");
        unsigned int v60 = sub_10001A6DC(v59);
        MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v57);
      }
      else
      {
        MutableCFStringRef Copy = 0;
        unsigned int v60 = 0;
      }
      CFBooleanRef v117 = (CFBooleanRef)sub_10001E404((uint64_t)v29, @"MacAddressRandomisationTagMigratedNetwork");
      CFBooleanRef v118 = kCFBooleanTrue;
      if (v117) {
        BOOL v119 = v117 == kCFBooleanTrue;
      }
      else {
        BOOL v119 = 0;
      }
      char v120 = !v119;
      sub_10001C6A4((uint64_t)v29, @"lastJoined", v7);
      if (v60)
      {
        sub_10001C6A4((uint64_t)v29, @"BlockRotation", 0);
        sub_10001C6A4((uint64_t)v29, @"LinkDownTimestamp", 0);
        CFBooleanRef v121 = (const __CFBoolean *)sub_10001E404((uint64_t)v29, @"NoAssociationWithNewMac");
        sub_10001A610((uint64_t)v29, @"FailureCountThresholdCurrent", *(unsigned int *)(a1 + 460));
        sub_10001C6A4((uint64_t)v29, @"privateMacSuccessfulAssocAtleastOnce", kCFBooleanTrue);
        if (v121 && v121 == kCFBooleanTrue)
        {
          sub_10001C6A4((uint64_t)v29, @"NoAssociationWithNewMac", kCFBooleanFalse);
          sub_10001C6A4((uint64_t)v29, @"FirstJoinWithNewMacTimestamp", v7);
          sub_10001C6A4((uint64_t)v29, @"PrivateMacFutureMacAddress", 0);
        }
        if (sub_1000199C0((uint64_t)a2))
        {
          if (*(unsigned char *)(a1 + 377))
          {
            CFDataRef v122 = *(const __CFData **)(a1 + 416);
            CFDataRef v123 = *(const __CFData **)(a1 + 488);
            CFStringRef v124 = (const __CFString *)sub_10001A43C(a2);
            CFDataRef v125 = v123;
            CFBooleanRef v118 = kCFBooleanTrue;
            CFDataRef v126 = sub_1000D1BF0(v122, v125, v124);
            sub_10001C6A4((uint64_t)v29, @"PrivateMacFutureMacAddress", v126);
            if (v126) {
              CFRelease(v126);
            }
          }
        }
        if (v120)
        {
          if ((v8 & 1) == 0 || !v229 || v229 != v118) {
            goto LABEL_206;
          }
        }
        else
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Migrated network <%@> associated successfully with private Mac", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v29) message];
          }
          sub_10001C6A4((uint64_t)v29, @"MacAddressRandomisationTagMigratedNetwork", 0);
          sub_10001C6A4((uint64_t)v29, @"MacAddressRandomisationClassificationAttempts", 0);
          sub_10001C6A4((uint64_t)v29, @"PrivateMacJoinDateAfterUpgrade", 0);
          sub_10001C6A4((uint64_t)v29, @"NetworkUsedForSWUpgrade", 0);
          if ((v8 & 1) == 0) {
            goto LABEL_206;
          }
        }
        if (sub_1000D20B8((CFDictionaryRef *)a2)) {
          int v148 = 2;
        }
        else {
          int v148 = 3;
        }
        CFNumberRef v145 = sub_10005B0B8(v148);
        if (MutableCopy)
        {
          CFDictionarySetValue(MutableCopy, @"PRIVATE_MAC_ADDRESS_TYPE", v145);
          sub_10001C6A4((uint64_t)v29, @"PRIVATE_MAC_ADDRESS", MutableCopy);
        }
        if (v145) {
LABEL_205:
        }
          CFRelease(v145);
      }
      else
      {
        long long v136 = sub_10001E404((uint64_t)v29, @"PrivateMacFutureMacAddress");
        if (v136)
        {
          long long v137 = v136;
          CFTypeID v138 = CFDataGetTypeID();
          if (v138 == CFGetTypeID(v137))
          {
            if (MutableCopy)
            {
              CFDictionarySetValue(MutableCopy, @"PRIVATE_MAC_ADDRESS_VALUE", v137);
              sub_10001C6A4((uint64_t)v29, @"PRIVATE_MAC_ADDRESS", MutableCopy);
            }
          }
        }
        if ((v120 & 1) == 0)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Migrated network <%@> associated successfully with physical Mac", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v29) message];
          }
          if (!sub_10001E404((uint64_t)v29, @"PrivateMacJoinDateAfterUpgrade")) {
            sub_10001C6A4((uint64_t)v29, @"PrivateMacJoinDateAfterUpgrade", v7);
          }
          if (v229)
          {
            if (v229 == kCFBooleanTrue)
            {
              CFDataRef v141 = *(const __CFData **)(a1 + 408);
              CFDataRef v140 = *(const __CFData **)(a1 + 416);
              CFDataRef v142 = *(const __CFData **)(a1 + 488);
              CFStringRef v143 = (const __CFString *)sub_10001A43C(v29);
              CFDataRef v144 = sub_1000D1978(v140, v141, v142, v143);
              if (v144)
              {
                CFNumberRef v145 = v144;
                sub_10001C6A4((uint64_t)v29, @"PrivateMacFutureMacAddress", v144);
                sub_10001C6A4((uint64_t)v29, @"MacGenerationTimeStamp", v7);
                sub_10001C6A4((uint64_t)v29, @"ResetCaptiveProbe", kCFBooleanTrue);
                sub_10001C6A4((uint64_t)v29, @"NoAssociationWithNewMac", kCFBooleanTrue);
                sub_10001C6A4((uint64_t)v29, @"RotationKeyUsed", *(const void **)(a1 + 408));
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : Network <%@> used during setup marked to use private MAC next", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v29) message];
                }
                goto LABEL_205;
              }
            }
          }
        }
      }
LABEL_206:
      int v28 = v233;
      if (MutableCopy)
      {
        BOOL v116 = MutableCopy;
LABEL_208:
        CFRelease(v116);
      }
      goto LABEL_313;
    case 7:
      CFIndex v234 = v28;
      sub_10001C6A4((uint64_t)v29, @"PresentInKnownNetworks", kCFBooleanTrue);
      int v62 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)a2);
      BOOL v63 = sub_1000C8140((uint64_t)a2);
      BOOL v64 = sub_10001BB2C((BOOL)a2);
      BOOL v65 = sub_1000CE714((uint64_t)a2);
      CFBooleanRef v66 = (CFBooleanRef)sub_10001E404((uint64_t)v29, @"PrivateMacDefaultToOFF");
      sub_10001C6A4((uint64_t)v62, @"PrivateMacDefaultToOFF", v66);
      if (v62) {
        CFRelease(v62);
      }
      if (!v63 && !v64 && !v65) {
        goto LABEL_313;
      }
      CFMutableDictionaryRef v67 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (!v67) {
        goto LABEL_223;
      }
      CFDictionaryRef v68 = v67;
      if (!*(unsigned char *)(a1 + 376)) {
        goto LABEL_220;
      }
      if (v66)
      {
        CFBooleanRef v69 = kCFBooleanTrue;
        if (v66 == kCFBooleanTrue)
        {
LABEL_220:
          CFNumberRef v75 = sub_10005B0B8(1);
          CFDictionarySetValue(v68, @"PRIVATE_MAC_ADDRESS_TYPE", v75);
          CFDictionarySetValue(v68, @"PRIVATE_MAC_ADDRESS_VALUE", *(const void **)(a1 + 488));
          if (!v75) {
            goto LABEL_222;
          }
          goto LABEL_221;
        }
        CFNumberRef v70 = sub_10005B0B8(2);
        CFDictionarySetValue(v68, @"PRIVATE_MAC_ADDRESS_TYPE", v70);
        if (v70) {
          goto LABEL_88;
        }
      }
      else
      {
        if (sub_1000D20B8((CFDictionaryRef *)a2)) {
          int v158 = 2;
        }
        else {
          int v158 = 3;
        }
        CFNumberRef v70 = sub_10005B0B8(v158);
        CFDictionarySetValue(v68, @"PRIVATE_MAC_ADDRESS_TYPE", v70);
        CFBooleanRef v69 = kCFBooleanTrue;
        if (v70) {
LABEL_88:
        }
          CFRelease(v70);
      }
      CFDataRef v72 = *(const __CFData **)(a1 + 408);
      CFDataRef v71 = *(const __CFData **)(a1 + 416);
      CFDataRef v73 = *(const __CFData **)(a1 + 488);
      CFStringRef v74 = (const __CFString *)sub_10001A43C(a2);
      CFNumberRef v75 = sub_1000D1978(v71, v72, v73, v74);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Generated private mac address <%@> for profile network<%@> ", "WiFiManagerAddPrivateMacNetwork", v75, sub_10001A43C(a2) message];
      }
      int v28 = v234;
      if (v75)
      {
        CFDictionarySetValue(v68, @"PRIVATE_MAC_ADDRESS_VALUE", v75);
        sub_10001C6A4((uint64_t)v29, @"MacGenerationTimeStamp", v242);
        sub_10001C6A4((uint64_t)v29, @"NoAssociationWithNewMac", v69);
        sub_10001C6A4((uint64_t)v29, @"ResetCaptiveProbe", v69);
        sub_10001C6A4((uint64_t)v29, @"RotationKeyUsed", *(const void **)(a1 + 408));
LABEL_221:
        CFRelease(v75);
      }
LABEL_222:
      sub_10001C6A4((uint64_t)v29, @"PRIVATE_MAC_ADDRESS", v68);
      sub_10001A610((uint64_t)v29, @"FailureCountThresholdCurrent", *(unsigned int *)(a1 + 456));
      CFRelease(v68);
LABEL_223:
      if (v66)
      {
        sub_10001C6A4((uint64_t)v29, @"MacAddressRandomisationTagMigratedNetwork", 0);
        sub_10001C6A4((uint64_t)v29, @"MacAddressRandomisationClassificationAttempts", 0);
        sub_10001C6A4((uint64_t)v29, @"PrivateMacJoinDateAfterUpgrade", 0);
        uint64_t v102 = @"PrivateMacFutureMacAddress";
LABEL_311:
        uint64_t v150 = (uint64_t)v29;
        CFBooleanRef v151 = 0;
LABEL_312:
        sub_10001C6A4(v150, v102, v151);
      }
LABEL_313:
      CFArrayRef v193 = (const __CFArray *)sub_100083F8C(a1, 0);
      uint64_t v194 = (uint64_t)v193;
      if (v193)
      {
        sub_10001A734(v193, (const void **)a2, &v244, &v243);
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "WFMacRandomisation :%s:Adding network to private mac cache with reason <%u>  existingIndex %ld, insertIndex %ld", "WiFiManagerAddPrivateMacNetwork", v241, v244, v243)];
        }
        if (v244 == -1) {
          CFArrayAppendValue((CFMutableArrayRef)v194, v29);
        }
        else {
          CFArraySetValueAtIndex((CFMutableArrayRef)v194, v244, v29);
        }
        CFDateRef v7 = v242;
        uint64_t v194 = sub_1000A69BC(a1, (const __CFArray *)v194);
        sub_1000A6B7C(a1, 1, 0);
        CFIndex v196 = cf;
        if (v194)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "WFMacRandomisation : Added/replaced network <%@> to list of known private mac networks", value message];
          }
          uint64_t v194 = 1;
        }
      }
      else
      {
        CFDateRef v7 = v242;
        CFIndex v196 = cf;
      }
      CFRelease(v196);
      if (v28) {
        CFRelease(v28);
      }
      if (v238) {
        CFRelease(v238);
      }
      if (v7) {
LABEL_328:
      }
        CFRelease(v7);
LABEL_329:
      return v194;
    case 8:
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : HS20 network <%@> being updated", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v29) message];
      }
      CFBooleanRef v78 = (CFBooleanRef)sub_10001E404((uint64_t)a2, @"PrivateMacDefaultToOFF");
      CFBooleanRef v79 = (const __CFBoolean *)sub_10001E404((uint64_t)a2, @"PrivateMacPrefChanged");
      CFBooleanRef v80 = (const __CFBoolean *)sub_10001E404((uint64_t)a2, @"PrivateMacControlledDevice");
      if (v79)
      {
        CFBooleanRef v81 = kCFBooleanTrue;
        if (v79 == kCFBooleanTrue || !v78) {
          goto LABEL_313;
        }
      }
      else
      {
        if (!v78) {
          goto LABEL_313;
        }
        CFBooleanRef v81 = kCFBooleanTrue;
      }
      CFBooleanRef v226 = v80;
      uint64_t v127 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFBooleanRef v230 = v78;
      if (v78 == v81)
      {
        CFNumberRef v128 = sub_10005B0B8(1);
        CFDictionarySetValue(v127, @"PRIVATE_MAC_ADDRESS_VALUE", *(const void **)(a1 + 488));
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : HS20 network <%@> default OFF provisioned", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v29) message];
        }
      }
      else
      {
        int v236 = v28;
        CFNumberRef v128 = sub_10005B0B8(2);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation : HS20 network <%@> default Rotating provisioned", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(v29) message];
        }
        CFDataRef v131 = *(const __CFData **)(a1 + 408);
        CFDataRef v130 = *(const __CFData **)(a1 + 416);
        CFDataRef v132 = *(const __CFData **)(a1 + 488);
        CFStringRef v133 = (const __CFString *)sub_10001A43C(a2);
        CFDataRef v134 = sub_1000D1978(v130, v131, v132, v133);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Generated private mac address <%@> for profile network<%@> ", "WiFiManagerAddPrivateMacNetwork", v134, sub_10001A43C(a2) message];
        }
        if (v134)
        {
          CFDictionarySetValue(v127, @"PRIVATE_MAC_ADDRESS_VALUE", v134);
          sub_10001C6A4((uint64_t)v29, @"MacGenerationTimeStamp", v242);
          sub_10001C6A4((uint64_t)v29, @"NoAssociationWithNewMac", v81);
          sub_10001C6A4((uint64_t)v29, @"ResetCaptiveProbe", v81);
          sub_10001C6A4((uint64_t)v29, @"RotationKeyUsed", *(const void **)(a1 + 408));
          CFRelease(v134);
        }
        int v28 = v236;
      }
      sub_10001C6A4((uint64_t)v29, @"PrivateMacFutureMacAddress", 0);
      CFDictionarySetValue(v127, @"PRIVATE_MAC_ADDRESS_TYPE", v128);
      sub_10001C6A4((uint64_t)v29, @"PRIVATE_MAC_ADDRESS", v127);
      if (v127) {
        CFRelease(v127);
      }
      if (v128) {
        CFRelease(v128);
      }
      if (v226 && v226 == v81) {
        sub_10001C6A4((uint64_t)v29, @"PrivateMacControlledDevice", v226);
      }
      sub_10001C6A4((uint64_t)v29, @"MacAddressRandomisationTagMigratedNetwork", 0);
      sub_10001C6A4((uint64_t)v29, @"MacAddressRandomisationClassificationAttempts", 0);
      sub_10001C6A4((uint64_t)v29, @"PrivateMacJoinDateAfterUpgrade", 0);
      uint64_t v150 = (uint64_t)v29;
      uint64_t v102 = @"PrivateMacDefaultToOFF";
      CFBooleanRef v151 = v230;
      goto LABEL_312;
    case 9:
      if (!v8) {
        goto LABEL_313;
      }
      CFBooleanRef v82 = (const __CFBoolean *)sub_10001E404((uint64_t)v29, @"MacAddressRandomisationTagMigratedNetwork");
      if (v82)
      {
        if (v82 == kCFBooleanTrue) {
          goto LABEL_313;
        }
      }
      CFDictionaryRef v83 = (const __CFDictionary *)sub_10001E404((uint64_t)v29, @"PRIVATE_MAC_ADDRESS");
      if (v83) {
        CFDictionaryRef v84 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v83);
      }
      else {
        CFDictionaryRef v84 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      }
      uint64_t v153 = v84;
      CFBooleanRef v154 = (const __CFBoolean *)CFDictionaryGetValue(v84, @"PRIVATE_MAC_ADDRESS_VALID");
      if (v154 && (CFBooleanRef v155 = v154, v154 == kCFBooleanFalse))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : rotation upgrade for network<%@>, maintain switch OFF with HW MAC ", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(a2) message];
        }
        CFDictionarySetValue(v153, @"PRIVATE_MAC_ADDRESS_VALID", v155);
        CFDictionarySetValue(v153, @"PRIVATE_MAC_ADDRESS_VALUE", *(const void **)(a1 + 488));
      }
      else
      {
        if (sub_1000D20B8((CFDictionaryRef *)a2))
        {
          CFDictionarySetValue(v153, @"PRIVATE_MAC_ADDRESS_VALID", kCFBooleanTrue);
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : rotation upgrade for network<%@>, using rotating MAC with switch ON ", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(a2) message];
          }
        }
        else
        {
          CFDictionarySetValue(v153, @"PRIVATE_MAC_ADDRESS_VALID", kCFBooleanFalse);
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : rotation upgrade for network<%@>, using static MAC with switch OFF ", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(a2) message];
          }
        }
      }
      uint64_t v102 = @"PRIVATE_MAC_ADDRESS";
      uint64_t v150 = (uint64_t)v29;
      CFBooleanRef v151 = v153;
      goto LABEL_312;
    case 10:
      CFDictionaryRef v85 = (const __CFDictionary *)sub_10001E404((uint64_t)v29, @"PRIVATE_MAC_ADDRESS");
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Attempting to tri state upgrade for network<%@>", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(a2) message];
      }
      if (!v85) {
        goto LABEL_313;
      }
      CFBooleanRef v87 = (const __CFBoolean *)CFDictionaryGetValue(v85, @"PRIVATE_MAC_ADDRESS_VALID");
      if (!v87) {
        goto LABEL_313;
      }
      CFBooleanRef v88 = v87;
      BOOL v89 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFDataRef v90 = (const __CFData *)CFDictionaryGetValue(v85, @"PRIVATE_MAC_ADDRESS_VALUE");
      if (!v90) {
        CFDataRef v90 = (const __CFData *)CFDictionaryGetValue(v85, @"PRIVATE_MAC_ADDRESS_IN_USE");
      }
      unsigned int v91 = sub_10001A6DC(v90);
      if (v88 == kCFBooleanTrue) {
        unsigned int v92 = 2;
      }
      else {
        unsigned int v92 = 3;
      }
      if (v91) {
        uint64_t v93 = v92;
      }
      else {
        uint64_t v93 = 1;
      }
      CFNumberRef v94 = sub_10005B0B8(v93);
      CFDictionarySetValue(v89, @"PRIVATE_MAC_ADDRESS_TYPE", v94);
      if (v90) {
        CFDictionarySetValue(v89, @"PRIVATE_MAC_ADDRESS_VALUE", v90);
      }
      if (v94) {
        CFRelease(v94);
      }
      sub_10001C6A4((uint64_t)v29, @"PRIVATE_MAC_ADDRESS", v89);
      if (v89) {
        CFRelease(v89);
      }
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : tri state upgrade for network<%@>, using switch state : %d ", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(a2), v93 message];
      }
      CFBooleanRef v96 = (const __CFBoolean *)sub_10001E404((uint64_t)v29, @"PrivateMacFeatureTurnedONtoOFF");
      CFBooleanRef v97 = (const __CFBoolean *)sub_10001E404((uint64_t)v29, @"PrivateMacFeatureTurnedOFFtoON");
      if (v96 && v96 == kCFBooleanTrue || v97 && v97 == kCFBooleanTrue)
      {
        sub_10001C6A4((uint64_t)v29, @"PrivateMacPrefChanged", kCFBooleanTrue);
        sub_10001C6A4((uint64_t)v29, @"PrivateMacFeatureTurnedONtoOFF", 0);
        sub_10001C6A4((uint64_t)v29, @"PrivateMacFeatureTurnedOFFtoON", 0);
      }
      unint64_t v98 = (unint64_t)sub_10001E404((uint64_t)v29, @"PrivateMacFeatureTurnedONtoOFFTimestamp");
      CFDateRef v99 = (const __CFDate *)sub_10001E404((uint64_t)v29, @"PrivateMacFeatureTurnedOFFtoONTimestamp");
      if (!(v98 | (unint64_t)v99)) {
        goto LABEL_313;
      }
      CFDateRef v100 = v99;
      if (CFDateCompare((CFDateRef)v98, v99, 0) == kCFCompareGreaterThan) {
        CFDataRef v101 = (const void *)v98;
      }
      else {
        CFDataRef v101 = v100;
      }
      sub_10001C6A4((uint64_t)v29, @"PrivateMacPrefChangedTimestamp", v101);
      sub_10001C6A4((uint64_t)v29, @"PrivateMacFeatureTurnedONtoOFFTimestamp", 0);
      uint64_t v102 = @"PrivateMacFeatureTurnedOFFtoONTimestamp";
      goto LABEL_311;
    case 11:
      if (!sub_10001E404((uint64_t)v29, @"PRIVATE_MAC_ADDRESS"))
      {
        BOOL v235 = v28;
        char v103 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (sub_1000D20B8((CFDictionaryRef *)a2)) {
          uint64_t v104 = 2;
        }
        else {
          uint64_t v104 = 3;
        }
        CFNumberRef v105 = sub_10005B0B8(v104);
        CFDictionarySetValue(v103, @"PRIVATE_MAC_ADDRESS_TYPE", v105);
        if (v105) {
          CFRelease(v105);
        }
        CFDataRef v107 = *(const __CFData **)(a1 + 408);
        CFDataRef v106 = *(const __CFData **)(a1 + 416);
        CFDataRef v108 = *(const __CFData **)(a1 + 488);
        CFStringRef v109 = (const __CFString *)sub_10001A43C(a2);
        CFDataRef v110 = sub_1000D1978(v106, v107, v108, v109);
        if (v110)
        {
          CFDataRef v111 = v110;
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Generated private mac address <%@> for network<%@> with private MAC mode<%d>", "WiFiManagerAddPrivateMacNetwork", v111, sub_10001A43C(a2), v104 message];
          }
          CFDictionarySetValue(v103, @"PRIVATE_MAC_ADDRESS_VALUE", v111);
          sub_10001C6A4((uint64_t)v29, @"MacGenerationTimeStamp", v7);
          sub_10001C6A4((uint64_t)v29, @"NoAssociationWithNewMac", kCFBooleanTrue);
          sub_10001C6A4((uint64_t)v29, @"ResetCaptiveProbe", kCFBooleanTrue);
          sub_10001C6A4((uint64_t)v29, @"RotationKeyUsed", *(const void **)(a1 + 408));
          CFRelease(v111);
        }
        else
        {
          CFNumberRef v152 = sub_10005B0B8(1);
          CFDictionarySetValue(v103, @"PRIVATE_MAC_ADDRESS_TYPE", v152);
          if (v152) {
            CFRelease(v152);
          }
          CFDictionarySetValue(v103, @"PRIVATE_MAC_ADDRESS_VALUE", *(const void **)(a1 + 488));
        }
        int v28 = v235;
        sub_10001C6A4((uint64_t)v29, @"PRIVATE_MAC_ADDRESS", v103);
        if (v103) {
          CFRelease(v103);
        }
      }
      CFBooleanRef v151 = kCFBooleanTrue;
      uint64_t v102 = @"PresentInKnownNetworks";
      uint64_t v150 = (uint64_t)v29;
      goto LABEL_312;
    case 12:
      sub_10001C6A4((uint64_t)v29, @"PresentInKnownNetworks", kCFBooleanTrue);
      if (sub_10001E404((uint64_t)v29, @"PRIVATE_MAC_ADDRESS")) {
        goto LABEL_313;
      }
      uint64_t v113 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFNumberRef v114 = sub_10005B0B8(1);
      CFDictionarySetValue(v113, @"PRIVATE_MAC_ADDRESS_TYPE", v114);
      CFDictionarySetValue(v113, @"PRIVATE_MAC_ADDRESS_VALUE", *(const void **)(a1 + 488));
      sub_10001C6A4((uint64_t)v29, @"PRIVATE_MAC_ADDRESS", v113);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Legacy Carplay network<%@> updated to tristate", "WiFiManagerAddPrivateMacNetwork", sub_10001A43C(a2) message];
      }
      if (v113) {
        CFRelease(v113);
      }
      if (!v114) {
        goto LABEL_313;
      }
      BOOL v116 = v114;
      goto LABEL_208;
    default:
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "WFMacRandomisation :%s:Invalid Add reason", "WiFiManagerAddPrivateMacNetwork")];
      }
      goto LABEL_313;
  }
}

uint64_t sub_10009865C(uint64_t a1, uint64_t a2, const void *a3, const __CFDictionary *a4, void (*a5)(uint64_t, const void *, uint64_t, uint64_t), uint64_t a6)
{
  CFDataRef v108 = 0;
  CFTypeRef v109 = 0;
  CFDataRef v107 = 0;
  if (a1)
  {
    uint64_t v99 = a2;
    if (a4)
    {
      if (sub_1000995D0(a1))
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: restriction policy is active" args:("WiFiManagerAddNetworkAsync", nil)];
        }
        uint64_t v59 = 5;
        goto LABEL_165;
      }
      CFBooleanRef Value = (__CFString *)CFDictionaryGetValue(a4, @"BundleIdentifier");
      if (Value)
      {
        CFArrayRef v12 = Value;
        CFDictionaryRef theDict = a4;
        uint64_t v104 = a1;
        CFDataRef v101 = v10;
        id v13 = objc_alloc((Class)NSMutableDictionary);
        int v14 = +[NSString stringWithFormat:@"WiFiKnownNetworkAdded"];
        char v15 = +[NSString stringWithString:v12];
        CFIndex v16 = +[NSString stringWithString:sub_100016E18(a2)];
        unint64_t v17 = +[NSString stringWithString:sub_10009964C((uint64_t)v12)];
        CFNumberRef v105 = a3;
        CFArrayRef v18 = +[NSString stringWithString:sub_100099720((uint64_t)v12)];
        uint64_t v19 = +[NSString stringWithString:@"kWiFiAddNetworkOriginatorUser"];
        char v20 = +[NSString stringWithString:@"kWiFiManagerAddNetworkResultSuccess"];
        char v21 = sub_1000C8A5C((uint64_t)v105);
        CFStringRef v22 = @"kWiFiNetworkAuthFlagsWPA";
        CFStringRef v23 = @"kWiFiNetworkAuthFlagsWEP";
        if ((v21 & 1) == 0) {
          CFStringRef v23 = @"kWiFiNetworkAuthFlagsOpen";
        }
        if ((v21 & 2) == 0) {
          CFStringRef v22 = v23;
        }
        if ((v21 & 8) != 0) {
          CFStringRef v24 = @"kWiFiNetworkAuthFlagsEAP";
        }
        else {
          CFStringRef v24 = v22;
        }
        CFBooleanRef v96 = v18;
        a3 = v105;
        id v25 = [v13 initWithObjectsAndKeys:v14, @"Operation", v15, @"AppBundleID", v16, @"Process", v17, @"BTTCCState", v96, @"LocalNetworkTCCState", v19, @"AddReason", v20, @"Result", +[NSString stringWithString:](NSString, "stringWithString:", v24), @"SecurityType", 0];
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Request to add network with content: %@", "WiFiManagerAddNetworkAsync", v105 message];
        }
        if (sub_1000C6710((BOOL)v105))
        {
          CFMutableDictionaryRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
          if (Mutable)
          {
            int v28 = Mutable;
            sub_1000CC628((uint64_t)v105, Mutable);
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: HS20 Account Info:%@", "WiFiManagerAddNetworkAsync", v28 message];
            }
            CFRelease(v28);
          }
          else
          {
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Could not allocate buffer for HS 2.0 info", "WiFiManagerAddNetworkAsync")];
            }
          }
        }
        if (CFDictionaryContainsKey(theDict, @"NetworkOriginator"))
        {
          int v31 = CFDictionaryGetValue(theDict, @"NetworkOriginator");
          CFTypeID v32 = CFGetTypeID(v31);
          if (v32 == CFNumberGetTypeID())
          {
            LODWORD(valuePtr) = -1431655766;
            CFNumberGetValue((CFNumberRef)v31, kCFNumberIntType, &valuePtr);
            BOOL v33 = valuePtr == 1;
            if (valuePtr == 6) {
              BOOL v33 = 1;
            }
            unsigned int v102 = v33;
            if (valuePtr == 6 || valuePtr == 1)
            {
              uint64_t valuePtr = 0;
              id v34 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v12 allowPlaceholder:1 error:&valuePtr];
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: error %@", "WiFiManagerAddNetworkAsync", valuePtr message];
              }
              if (!v34)
              {
                uint64_t valuePtr = 0;
                id v34 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v12 allowPlaceholder:1 error:&valuePtr];
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "%s: error %@", "WiFiManagerAddNetworkAsync", valuePtr message];
                }
                if (!v34)
                {
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%@ bundle identifier is not installed", v12 message];
                  }
                  uint64_t v57 = 0;
                  id v37 = 0;
                  CFTypeID v58 = 0;
                  uint64_t v59 = 4;
                  if (!v25) {
                    goto LABEL_123;
                  }
                  goto LABEL_121;
                }
              }
              id v37 = [[[v34 localizedName] copy];
              sub_10001C6A4((uint64_t)v105, @"OriginatingApp", v37);

              char v38 = 1;
LABEL_40:
              CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 1688));
              if (Count >= 1)
              {
                CFIndex v41 = Count;
                CFIndex v42 = 0;
                while (1)
                {
                  CFStringRef v43 = (const __CFString *)[((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1688), v42)) bundleId];
                  if (CFEqual(v12, v43)) {
                    break;
                  }
                  if (v41 == ++v42) {
                    goto LABEL_44;
                  }
                }
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:3, "Add network async request is already queued for bundleId %@", v12 message];
                }
                uint64_t v57 = 0;
                CFTypeID v58 = 0;
                uint64_t v59 = 3;
                if (!v25)
                {
LABEL_123:
                  CFMutableDictionaryRef v10 = v101;
                  if (v57) {
                    goto LABEL_128;
                  }
                  goto LABEL_124;
                }
LABEL_121:
                if (&_AnalyticsSendEventLazy)
                {
                  [v25 setObject:+[NSString stringWithString:](NSString, "stringWithString:", off_100240DC0[v102]) forKey:@"AddReason"];
                  [v25 setObject:[NSString stringWithString:sub_1000998D4(v59)] forKey:@"Result"];
                  NSLog(@"CoreAnalytics metricsDict %@", v25);
                  AnalyticsSendEventLazy();
                }
                goto LABEL_123;
              }
LABEL_44:
              BOOL v44 = sub_10001BB2C((BOOL)v105);
              if (v44) {
                char v45 = v38;
              }
              else {
                char v45 = 1;
              }
              [v25 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v44)] forKey:@"Hotspot20"];
              CFDateRef v47 = (void *)qword_10027DD68;
              if ((v45 & 1) == 0)
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:message:4, @"%s HS20 network must use originator type kWiFiAddNetworkOriginator3rdParty", @"WiFiManagerAddNetworkAsync"];
                }
                uint64_t v57 = 0;
                CFTypeID v58 = 0;
                goto LABEL_66;
              }
              if (qword_10027DD68)
              {
                CFAbsoluteTime v48 = sub_10001A43C(v105);
                CFStringRef v49 = @"3rd Party";
                if (!v102) {
                  CFStringRef v49 = @"user";
                }
                [v47 WFLog:3, "%s: adding ssid='%@' bundleId='%@' appName='%@' originator='%@' HS20=%d", "WiFiManagerAddNetworkAsync", v48, v12, v37, v49, v44 message];
              }
              BOOL v97 = CFDictionaryContainsKey(theDict, @"AddNetworkUseSSIDPrefix") != 0;
              if (v44)
              {
                CFArrayRef v50 = *(const __CFArray **)(a1 + 216);
                if (v50)
                {
                  CFIndex v51 = CFArrayGetCount(v50);
                  if (v51 >= 1)
                  {
                    CFIndex v52 = v51;
                    CFIndex v53 = 0;
                    while (1)
                    {
                      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 216), v53);
                      double v55 = sub_1000CE384((uint64_t)ValueAtIndex);
                      if (v55)
                      {
                        if (CFEqual(v55, v12) && sub_1000C8E4C((uint64_t)v105, (uint64_t)ValueAtIndex)) {
                          break;
                        }
                      }
                      if (v52 == ++v53) {
                        goto LABEL_60;
                      }
                    }
                    CFNumberRef v70 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 216), v53);
                    if (v70)
                    {
                      CFDataRef v71 = v70;
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: matching HS20 network found at index %ld: %@", "__WiFiManagerCopyExistingHS20Network", v53, v71 message];
                      }
                      CFTypeRef v109 = CFRetain(v71);
                      a3 = v105;
                      if (!v109) {
                        goto LABEL_92;
                      }
                      goto LABEL_73;
                    }
                  }
LABEL_60:
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:3, "%s: no matching HS20 network found", "__WiFiManagerCopyExistingHS20Network"];
                  }
                  a3 = v105;
                }
                else
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:3, "%s: manager->networks is NULL", "__WiFiManagerCopyExistingHS20Network"];
                  }
                }
              }
              else
              {
                sub_100099A2C(a1, v105, &v109);
              }
              if (!v109)
              {
LABEL_92:
                char v69 = 0;
                BOOL v65 = 0;
                CFMutableDictionaryRef v67 = 0;
                goto LABEL_93;
              }
LABEL_73:
              int v62 = (void *)qword_10027DD68;
              if (qword_10027DD68)
              {
                if (v44) {
                  BOOL v63 = "domain";
                }
                else {
                  BOOL v63 = "SSID";
                }
                if (v44) {
                  BOOL v64 = sub_10001E404((uint64_t)a3, @"DomainName");
                }
                else {
                  BOOL v64 = sub_10001A43C(a3);
                }
                [v62 WFLog:3 message:@"%s: Found existing network matching network to be added; %s %@",
                  "WiFiManagerAddNetworkAsync",
                  v63,
                  v64);
              }
              BOOL v65 = sub_1000C8140((uint64_t)v109);
              CFBooleanRef v66 = sub_1000CE384((uint64_t)v109);
              CFMutableDictionaryRef v67 = v66;
              if (v66 && CFEqual(v66, v12))
              {
                if (qword_10027DD68) {
                  [((id)qword_10027DD68) WFLog:3 message:@"%s: network is already owned by the same application." arguments:@"WiFiManagerAddNetworkAsync"];
                }
                BOOL v97 = 0;
                char v69 = 1;
              }
              else
              {
                BOOL v97 = 0;
                char v69 = 0;
              }
LABEL_93:
              uint64_t v73 = sub_10002B050(v12, a3, &v108, &v107);
              uint64_t v74 = v73;
              switch(v73)
              {
                case 1:
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: '%@' is authorized to join '%@'", "WiFiManagerAddNetworkAsync", v12, v105 message];
                  }
                  if (CFDictionaryGetValue(theDict, @"isAccessory"))
                  {
                    unsigned int v102 = 6;
LABEL_109:
                    a3 = v105;
LABEL_110:
                    [v25 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v97) numberWithBool:v97] forKey:@"UsedPrefix"];
                    if (v67 && v65)
                    {
                      sub_1000CE2E4((uint64_t)a3, v67);
                    }
                    else
                    {
                      sub_1000CE2E4((uint64_t)a3, v12);
                      sub_1000CE418((uint64_t)a3, v102);
                    }
                    int v79 = sub_100094718((const __CFArray *)a1, a3);
                    char v80 = v69 ^ 1;
                    if (!v79) {
                      char v80 = 1;
                    }
                    if ((v80 & 1) == 0)
                    {
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: Already owned and associated to %@", "WiFiManagerAddNetworkAsync", sub_10001A43C(a3) message];
                      }
                      uint64_t v57 = 0;
                      CFTypeID v58 = 0;
                      uint64_t v59 = 6;
                      break;
                    }
                    int v83 = CFDictionaryContainsKey(theDict, @"DisassociateOnSessionEnd");
                    if (v83)
                    {
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: Session based add requested by %@", "WiFiManagerAddNetworkAsync", v12 message];
                      }
                    }
                    [v25 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v83 != 0)] forKey:@"SessionBased"];
                    if (v108)
                    {
                      sub_1000D303C((uint64_t)a3, v108);
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: setting accessory display friendly name='%@' for %@", "WiFiManagerAddNetworkAsync", v108, sub_10001A43C(a3) message];
                      }
                    }
                    if (v107)
                    {
                      sub_1000D3170((uint64_t)a3, v107);
                      if (qword_10027DD68) {
                        [(id)qword_10027DD68 WFLog:3, "%s: setting accessory identifier='%@' for %@", "WiFiManagerAddNetworkAsync", v107, sub_10001A43C(a3) message];
                      }
                    }
                    int v87 = *(_DWORD *)(a1 + 316);
                    int v88 = *(unsigned __int8 *)(v104 + 129);
                    if (qword_10027DD68) {
                      [qword_10027DD68 WFLog:message:3, "%s: Add network async- prompting for user consent", "WiFiManagerAddNetworkAsync"];
                    }
                    LOBYTE(v95) = v74 == 1;
                    BYTE2(v94) = v97;
                    BYTE1(v94) = v83 != 0;
                    LOBYTE(v94) = v88 != 0;
                    CFTypeID v58 = -[WiFiAddNetworkRequest initWithClient:network:bundleId:localizedAppName:originator:poweredOff:wapi:sessionBased:useSSIDPrefix:callback:context:bypassPrompt:]([WiFiAddNetworkRequest alloc], "initWithClient:network:bundleId:localizedAppName:originator:poweredOff:wapi:sessionBased:useSSIDPrefix:callback:context:bypassPrompt:", v99, a3, v12, v37, v102, v87 == 0, v94, a5, a6, v95);
                    if (v58)
                    {
                      a1 = v104;
                      CFArrayAppendValue(*(CFMutableArrayRef *)(v104 + 1688), v58);
                      sub_100099B04(v104);
                      CFDictionaryContainsKey(theDict, @"DisassociateOnSessionEnd");
                      uint64_t v59 = 0;
                      uint64_t v57 = 1;
                      if (!v25) {
                        goto LABEL_123;
                      }
                      goto LABEL_121;
                    }
                    uint64_t v57 = 0;
LABEL_66:
                    uint64_t v59 = 4;
                    break;
                  }
                  a3 = v105;
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:4, "%s: '%@' did not use joinAccessory API with authorized accessory", "WiFiManagerAddNetworkAsync", v12 message];
                  }
                  uint64_t v57 = 0;
                  CFTypeID v58 = 0;
                  uint64_t v59 = 11;
                  break;
                case 3:
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: '%@' has DA record but did not declare WiFi support", "WiFiManagerAddNetworkAsync", v12 message];
                  }
                  goto LABEL_109;
                case 2:
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: '%@' is not authorized to join '%@'", "WiFiManagerAddNetworkAsync", v12, a3 message];
                  }
                  uint64_t v57 = 0;
                  CFTypeID v58 = 0;
                  uint64_t v59 = 10;
                  break;
                default:
                  goto LABEL_110;
              }
              a1 = v104;
              if (!v25) {
                goto LABEL_123;
              }
              goto LABEL_121;
            }
            char v38 = 0;
LABEL_39:
            id v37 = 0;
            goto LABEL_40;
          }
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: wrong input type specified for originator", "WiFiManagerAddNetworkAsync")
          }
        }
        char v38 = 0;
        unsigned int v102 = 0;
        goto LABEL_39;
      }
      if (qword_10027DD68)
      {
        uint64_t v59 = 4;
        [((id)qword_10027DD68) WFLog:4 message:@"%s missing bundle identifier from request" :@"WiFiManagerAddNetworkAsync"];
LABEL_165:
        uint64_t v57 = 0;
        id v37 = 0;
        CFTypeID v58 = 0;
        id v25 = 0;
LABEL_124:
        if (v99) {
          sub_10005D0A4(v99, a1, (uint64_t)a3, v59);
        }
        if (a5) {
          a5(a1, a3, v59, a6);
        }
        goto LABEL_128;
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: options is NULL" arguments:("WiFiManagerAddNetworkAsync", nil)];
      }
    }
    uint64_t v59 = 4;
    goto LABEL_165;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: manager is NULL" args:("WiFiManagerAddNetworkAsync")];
  }
  uint64_t v57 = 0;
  id v37 = 0;
  CFTypeID v58 = 0;
  id v25 = 0;
LABEL_128:
  if (v109)
  {
    CFRelease(v109);
    CFTypeRef v109 = 0;
  }
  if (v58) {
    CFRelease(v58);
  }

  return v57;
}

CFArrayRef sub_1000995D0(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 1608);
  if (result)
  {
    CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
    if (result)
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 1608));
      if (Count < 1)
      {
        return 0;
      }
      else
      {
        CFIndex v4 = Count;
        CFIndex v5 = 0;
        while (1)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1608), v5);
          if (ValueAtIndex)
          {
            CFArrayRef result = (const __CFArray *)sub_100032E54((uint64_t)ValueAtIndex);
            if (result == 1) {
              break;
            }
          }
          if (v4 == ++v5) {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

CFStringRef sub_10009964C(uint64_t a1)
{
  int v3 = (const void *)TCCAccessCopyBundleIdentifiersForService();
  CFIndex v4 = (id)CFMakeCollectable(v3);
  CFIndex v5 = (const void *)TCCAccessCopyBundleIdentifiersDisabledForService();
  CFDictionaryRef v6 = (id)CFMakeCollectable(v5);
  if ([v4 containsObject:a1])
  {
    CFStringRef v7 = @"BluetoothTCCEnabled";
    NSLog(@"%s bundleId present in fAllowedAppBundles %@", "__WiFiManagerBluetoothTCCState", a1);
  }
  else if ([v6 containsObject:a1])
  {
    CFStringRef v7 = @"BluetoothTCCDisabled";
    NSLog(@"%s bundleId present in fDisallowedAppBundles %@", "__WiFiManagerBluetoothTCCState", a1);
  }
  else
  {
    CFStringRef v7 = @"BluetoothTCCUnknown";
  }
  return v7;
}

CFStringRef sub_100099720(uint64_t a1)
{
  if (!objc_opt_class()) {
    return @"LocalNetworkTCCUnknown";
  }
  id v2 = +[NEPathController copyAggregatePathRules];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    CFStringRef v5 = @"LocalNetworkTCCUnknown";
    uint64_t v6 = *(void *)v12;
    do
    {
      for (CFIndex i = 0; i != v4; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v2);
        }
        int v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if (objc_msgSend(objc_msgSend(v8, "matchSigningIdentifier"), "isEqualToString:", a1)
          && [v8 multicastPreferenceSet])
        {
          unsigned int v9 = [v8 denyMulticast];
          NSLog(@"%s bundleId has multicastAllow = %d set", "__WiFiManagerLocalNetworkTCCState", v9 ^ 1);
          if (v9) {
            CFStringRef v5 = @"LocalNetworkTCCDisabled";
          }
          else {
            CFStringRef v5 = @"LocalNetworkTCCEnabled";
          }
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v4);
  }
  else
  {
    CFStringRef v5 = @"LocalNetworkTCCUnknown";
  }

  return v5;
}

__CFString *sub_1000998B4(unsigned int a1)
{
  if (a1 > 6) {
    return 0;
  }
  else {
    return off_100240DC0[a1];
  }
}

CFStringRef sub_1000998D4(int a1)
{
  switch(a1)
  {
    case 0:
      CFStringRef result = @"kWiFiManagerAddNetworkResultSuccess";
      break;
    case 1:
      CFStringRef result = @"kWiFiManagerAddNetworkResultUserCancelled";
      break;
    case 2:
      CFStringRef result = @"kWiFiManagerAddNetworkResultSystemCancelled";
      break;
    case 3:
      CFStringRef result = @"kWiFiManagerAddNetworkResultRequestPending";
      break;
    case 4:
      CFStringRef result = @"kWiFiManagerAddNetworkResultInvalidBundleId";
      break;
    case 5:
      CFStringRef result = @"kWiFiManagerAddNetworkResultExistingNetwork";
      break;
    case 6:
      CFStringRef result = @"kWiFiManagerAddNetworkResultAlreadyAssociated";
      break;
    case 7:
      CFStringRef result = @"kWiFiManagerAddNetworkResultAssociationFailed";
      break;
    case 8:
      CFStringRef result = @"kWiFiManagerAddNetworkResultApplicationIsNotInForeground";
      break;
    case 9:
      CFStringRef result = @"kWiFiManagerAddNetworkResultNetworkNotFound";
      break;
    case 10:
      CFStringRef result = @"kWiFiManagerAddNetworkResultAccessoryNotAuthorized";
      break;
    case 11:
      CFStringRef result = @"kWiFiManagerAddNetworkResultAccessoryNetwork";
      break;
    default:
      if (a1 == 0x7FFFFFFF) {
        CFStringRef result = @"kWiFiManagerAddNetworkResultUnknownError";
      }
      else {
        CFStringRef result = 0;
      }
      break;
  }
  return result;
}

CFStringRef sub_1000999D8(uint64_t a1)
{
  char v1 = sub_1000C8A5C(a1);
  CFStringRef v2 = @"kWiFiNetworkAuthFlagsWPA";
  CFStringRef v3 = @"kWiFiNetworkAuthFlagsWEP";
  if ((v1 & 1) == 0) {
    CFStringRef v3 = @"kWiFiNetworkAuthFlagsOpen";
  }
  if ((v1 & 2) == 0) {
    CFStringRef v2 = v3;
  }
  if ((v1 & 8) != 0) {
    return @"kWiFiNetworkAuthFlagsEAP";
  }
  else {
    return v2;
  }
}

uint64_t sub_100099A2C(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  CFIndex idx = 0xAAAAAAAAAAAAAAAALL;
  sub_1000BBADC(*(CFArrayRef *)(a1 + 216), a2, &idx);
  if (idx == -1) {
    return 0;
  }
  CFStringRef v7 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    int v8 = sub_10001A43C(a2);
    [v7 WFLog:3, "%s: Network with the same SSID %@ found at index %ld", "__WiFiManagerCopyExistingNetwork", v8, idx message];
  }
  uint64_t result = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 216), idx);
  if (result)
  {
    if (a3) {
      *a3 = CFRetain((CFTypeRef)result);
    }
    return 1;
  }
  return result;
}

void sub_100099B04(uint64_t a1)
{
  SInt32 error = -1431655766;
  if (!*(void *)(a1 + 1648))
  {
    CFArrayRef v3 = *(const __CFArray **)(a1 + 1688);
    if (!v3) {
      goto LABEL_31;
    }
    if (!CFArrayGetCount(v3)) {
      goto LABEL_31;
    }
    CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1688), 0);
    if (!ValueAtIndex) {
      goto LABEL_31;
    }
    CFStringRef v5 = ValueAtIndex;
    if ([ValueAtIndex sessionBased])
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: session based add, checking if application is in foreground", @"__WiFiManagerDispatchNextAddNetworkAsyncRequest"];
      }
      if (!objc_opt_class())
      {
LABEL_47:
        uint64_t v28 = 0x7FFFFFFFLL;
LABEL_48:
        if ([v5 client]) {
          sub_10005D0A4([v5 client], a1, [v5 network], v28);
        }
        if ([v5 callback]) {
          ((void (*)(uint64_t, id, uint64_t, id))[v5 callback])(a1, [v5 network], v28, [v5 context]);
        }
        CFArrayRef v29 = *(const __CFArray **)(a1 + 1688);
        v38.CFIndex length = CFArrayGetCount(v29);
        v38.CFIndex location = 0;
        FirstIndexOfCFBooleanRef Value = CFArrayGetFirstIndexOfValue(v29, v38, v5);
        if (FirstIndexOfValue != -1) {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 1688), FirstIndexOfValue);
        }
        sub_100099B04(a1);
        goto LABEL_31;
      }
      id v7 = objc_alloc_init((Class)BKSApplicationStateMonitor);
      unsigned int v8 = [v7 applicationStateForApplication:[v5 bundleId]];

      if (v8 != 8)
      {
        id v25 = (void *)qword_10027DD68;
        if (qword_10027DD68)
        {
          id v26 = [v5 bundleId];
          if (v8 - 1 > 3) {
            CFStringRef v27 = @"Unknown";
          }
          else {
            CFStringRef v27 = off_100240DF8[v8 - 1];
          }
          [v25 WFLog:3, "%s: bundleId %@ is not in the foreground, current xpc_activity_state_t state = %@", "__WiFiManagerDispatchNextAddNetworkAsyncRequest", v26, v27 message];
        }
        uint64_t v28 = 8;
        goto LABEL_48;
      }
    }
    if ([v5 usingPrefix])
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: add network request using prefix, checking if matching network is nearby" args:("__WiFiManagerDispatchNextAddNetworkAsyncRequest")];
      }
      blocCFIndex k = (void **)a1;
      unint64_t v33 = 0xAAAAAAAA00000069;
      id v34 = (void (*)(uint64_t))[v5 network];
      long long v35 = 0;
LABEL_30:
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &block);
      goto LABEL_31;
    }
    if ([v5 sessionBased] && *(void *)(a1 + 1616))
    {
      id v11 = [[(id)sub_10001A43C(objc_msgSend(v5, "network")) stringByAppendingString:objc_msgSend(v5, "bundleId")];
      id v12 = [*(id *)(a1 + 1616) objectForKey:v11];
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: sessionKey = %@, object = %@", "__WiFiManagerDispatchNextAddNetworkAsyncRequest", v11, v12 message];
      }
      if (v12)
      {
        [objc_msgSend(v12, "objectForKeyedSubscript:", @"timestamp") timeIntervalSinceNow];
        LODWORD(v12) = v14 > -21600.0;
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
    if ([v5 bypassPrompt])
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: Don't show popup as user has already given consent for this accessory network.", @"__WiFiManagerDispatchNextAddNetworkAsyncRequest"];
      }
      CFIndex v16 = *(NSObject **)(qword_10027D6C8 + 32);
      blocCFIndex k = _NSConcreteStackBlock;
      unint64_t v33 = 3221225472;
      id v34 = sub_1000BBE18;
      long long v35 = &unk_10023F048;
      uint64_t v36 = 0;
      uint64_t v37 = qword_10027D6C8;
      dispatch_async(v16, &block);
      goto LABEL_31;
    }
    if (v12)
    {
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:message:3, "%s: Don't show popup as user has already given consent for this session based network.", "__WiFiManagerDispatchNextAddNetworkAsyncRequest"];
      }
      blocCFIndex k = (void **)a1;
      unint64_t v33 = 0xAAAAAAAA00000045;
      id v34 = (void (*)(uint64_t))[v5 network];
      long long v35 = 0;
      sub_1000BBC74((void *)a1, [v5 network]);
      goto LABEL_30;
    }
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: Show user consent popup", "__WiFiManagerDispatchNextAddNetworkAsyncRequest"];
    }
    CFArrayRef v18 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0, &error, (CFDictionaryRef)[v5 alertDictionary]);
    if (v18)
    {
      uint64_t v19 = v18;
      CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v18, (CFUserNotificationCallBack)sub_1000BBBFC, 0);
      if (RunLoopSource)
      {
        char v21 = RunLoopSource;
        *(void *)(a1 + 1640) = RunLoopSource;
        *(void *)(a1 + 1648) = v19;
        Maiint n = CFRunLoopGetMain();
        CFRunLoopAddSource(Main, v21, kCFRunLoopDefaultMode);
        goto LABEL_31;
      }
      CFRelease(v19);
    }
    goto LABEL_47;
  }
  if (qword_10027DD68) {
    [qword_10027DD68 WFLog:3 message:@"Add network request is in progress, cancelling dispatch"];
  }
LABEL_31:
}

uint64_t sub_10009A090(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_10009A098(uint64_t a1, void *a2, uint64_t a3)
{
  CFIndex v124 = -1;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager", @"WiFiManagerRemoveNetwork"];
    }
    goto LABEL_190;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null network", "WiFiManagerRemoveNetwork")];
    }
LABEL_190:
    goto LABEL_191;
  }
  BOOL v118 = sub_10001BB2C((BOOL)a2);
  CFBooleanRef v117 = sub_10001E404((uint64_t)a2, @"DomainName");
  unsigned int v8 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    if (v118) {
      unsigned int v9 = "domain";
    }
    else {
      unsigned int v9 = "SSID";
    }
    CFMutableDictionaryRef v10 = v117;
    if (!v118) {
      CFMutableDictionaryRef v10 = sub_10001A43C(a2);
    }
    [v8 WFLog:3, "%s: reason %d, with %s %@", "WiFiManagerRemoveNetwork", a3, v9, v10 message];
  }
  if (sub_1000CD794((uint64_t)a2) != 2)
  {
    if (sub_1000CD794((uint64_t)a2) != 1) {
      goto LABEL_30;
    }
LABEL_20:
    CFArrayRef v13 = sub_10000500C((CFArrayRef)a1);
    if (!v13)
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: failed to get device managers", "__WiFiManagerRemoveCarPlay")];
      }
      goto LABEL_30;
    }
    CFArrayRef v14 = v13;
    char v15 = v6;
    CFIndex Count = CFArrayGetCount(v13);
    if (Count < 1) {
      goto LABEL_29;
    }
    CFIndex v17 = Count;
    CFIndex v18 = 0;
    while (1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v14, v18);
      uint64_t v20 = sub_100016E18((uint64_t)ValueAtIndex);
      if (!v20) {
        goto LABEL_28;
      }
      char v21 = (const void *)sub_100016E20(v20);
      if (!v21) {
        goto LABEL_28;
      }
      CFStringRef v22 = v21;
      CFStringRef v23 = sub_10000E5D0((uint64_t)ValueAtIndex, v21);
      if (!v23) {
        goto LABEL_28;
      }
      CFStringRef v24 = v23;
      if (CFEqual(a2, v23)) {
        break;
      }
      CFRelease(v24);
LABEL_28:
      if (v17 == ++v18) {
        goto LABEL_29;
      }
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: Current network is CarPlay. Disconnect\n", @"__WiFiManagerRemoveCarPlay"];
    }
    sub_1000FEA7C((uint64_t)ValueAtIndex, v22, 7, "__WiFiManagerRemoveCarPlay", 16907);
    CFRelease(v24);
LABEL_29:
    CFRelease(v14);
    uint64_t v6 = v15;
LABEL_30:
    int v25 = sub_10001E71C((uint64_t)a2);
    if (a3 == 2 && v25) {
      sub_10001C6A4((uint64_t)a2, @"AutoHotspotDisableWiFiAutoJoinUntilUserJoin", kCFBooleanTrue);
    }
    id v26 = (const __SCPreferences *)sub_10000D9F0((void *)a1, @"List of known networks");
    CFStringRef v27 = v26;
    if (!v26) {
      goto LABEL_119;
    }
    if (sub_10005A1E0(v26))
    {
      uint64_t v115 = (void *)sub_10000D990((uint64_t)"WiFiManagerRemoveNetwork");
      CFArrayRef v28 = (const __CFArray *)sub_1000830B8(a1);
      SCPreferencesRef prefs = v27;
      if (!v28) {
        goto LABEL_185;
      }
      CFArrayRef v29 = v28;
      if (a3 == 4)
      {
        sub_10009BC5C(v28, a2, &v124);
        BOOL v30 = sub_10001A43C(a2);
        uint64_t context = a1;
        p_uint64_t context = (uint64_t *)0xAAAAAAAA00000051;
        uint64_t v127 = (uint64_t)v30;
        uint64_t v128 = 1;
        CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
      }
      else
      {
        sub_1000945D4(1, v28, a2, &v124, 0);
      }
      CFTypeID v32 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        unint64_t v33 = v6;
        CFIndex v34 = v124;
        if (v118) {
          long long v35 = "domain ";
        }
        else {
          long long v35 = "";
        }
        uint64_t v36 = v117;
        if (!v118) {
          uint64_t v36 = sub_10001A43C(a2);
        }
        [v32 WFLog:3, "%s:existingIndex %ld of %s%@", "WiFiManagerRemoveNetwork", v34, v35, v36 message];
        uint64_t v6 = v33;
      }
      if (v124 == -1)
      {
LABEL_185:
        int v69 = 0;
        CFStringRef v27 = 0;
        goto LABEL_108;
      }
      CFDictionaryRef v37 = (const __CFDictionary *)CFArrayGetValueAtIndex(v29, v124);
      CFDictionaryRef v38 = v37;
      if (a3 == 4
        && !sub_10001FC1C((uint64_t)v37)
        && !sub_1000C66D0((BOOL)v38)
        && !sub_10001ED04((uint64_t)v38)
        && !sub_10001FC6C((BOOL)v38)
        && !sub_1000C6FE8(v38))
      {
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: Remove network event from iCloud ignored because this is an open network (%@)", "WiFiManagerRemoveNetwork", sub_10001A43C(a2) message];
        }
        int v69 = 0;
        CFStringRef v27 = 0;
LABEL_108:
        sub_10005A29C(prefs, v69);

        if (v69)
        {
          sub_10008111C(v72, 2, a1);
          if (a3 == 2)
          {
            if (qword_10027DD68)
            {
              uint64_t v74 = (const __SCPreferences *)v117;
              if (!v118) {
                uint64_t v74 = v27;
              }
              [(id)qword_10027DD68 WFLog:3, "%s: sync the removal of <%@>", "WiFiManagerRemoveNetwork", v74 message];
            }
            if (&_WiFiCloudSyncEngineCreate)
            {
              CFNumberRef v75 = *(const void **)(a1 + 1304);
              if (v75)
              {
                CFRetain(v75);
                CFRetain(a2);
                v122[0] = _NSConcreteStackBlock;
                v122[1] = 3221225472;
                v122[2] = sub_10009C29C;
                v122[3] = &unk_10023F048;
                v122[4] = a1;
                v122[5] = a2;
                dispatch_async((dispatch_queue_t)qword_10027DD90, v122);
              }
            }
            sub_100184EE0(*(void **)(a1 + 1432), (uint64_t)a2, 1);
            if (!v27) {
              goto LABEL_126;
            }
          }
          else
          {
            if (qword_10027DD68)
            {
              CFIndex v77 = (const __SCPreferences *)v117;
              if (!v118) {
                CFIndex v77 = v27;
              }
              [(id)qword_10027DD68 WFLog:3, "%s: <%@> removed due to sync", "WiFiManagerRemoveNetwork", v77 message];
            }
            if (!v27) {
              goto LABEL_126;
            }
          }
          CFRelease(v27);
LABEL_126:
          uint64_t v76 = 1;
          sub_100095A24(a1, a2, 1u);
LABEL_127:
          CFStringRef v27 = 0;
LABEL_128:
          if (!sub_10009C2E8(a1, a2, @"PresentInKnownNetworks", kCFBooleanFalse))
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s:Unable to update known network property in private mac network record for <%@>", "WiFiManagerRemoveNetwork", v27 message];
            }
          }
          goto LABEL_142;
        }
LABEL_119:
        uint64_t v76 = 0;
        goto LABEL_128;
      }
      sub_10004E4C8((void *)a1, a3, v38);
      CFStringRef v39 = sub_10001F928(a2);
      sub_10009BD74(v39);
      uint64_t context = a1;
      p_uint64_t context = (uint64_t *)0xAAAAAAAA00000052;
      uint64_t v127 = (uint64_t)a2;
      uint64_t v128 = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
      CFAllocatorRef v40 = kCFAllocatorDefault;
      CFMutableArrayRef cf = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: %@", "__WiFiManagerRemoveNetworkSetting", sub_10001A43C(a2) message];
      }
      CFDictionaryRef v42 = *(const __CFDictionary **)(a1 + 208);
      if (!v42)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null wifi network sets", "__WiFiManagerRemoveNetworkSetting")];
        }
        goto LABEL_85;
      }
      MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v42);
      if (!MutableCopy)
      {
LABEL_85:
        if (cf) {
          CFRelease(cf);
        }
        if (!sub_10001EBB4((uint64_t)a2))
        {
          if (a3 == 24 || (BOOL v64 = sub_1000CE714((uint64_t)a2), a3 == 22) && v64)
          {
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            CFDateRef v66 = CFDateCreate(v40, Current);
            sub_10001C6A4((uint64_t)a2, @"removedAt", v66);
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: removing carrier-based auto-join disabled network %@ at %@", "WiFiManagerRemoveNetwork", sub_10001A43C(a2), v66 message];
            }
            CFMutableDictionaryRef Mutable = *(__CFArray **)(a1 + 2512);
            if (Mutable
              || (CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v40, 0, &kCFTypeArrayCallBacks),
                  (*(void *)(a1 + 2512) = Mutable) != 0))
            {
              CFArrayAppendValue(Mutable, a2);
              if (CFArrayGetCount(*(CFArrayRef *)(a1 + 2512)) >= 11) {
                CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 2512), 0);
              }
            }
            if (v66) {
              CFRelease(v66);
            }
          }
        }
        CFArrayRemoveValueAtIndex(v29, v124);
        int v69 = sub_100094834(a1, v29);
        sub_100004058(a1, 1, 1, 1);
        sub_100093410(a1, (CFDictionaryRef *)a2, 1);
        if (v69)
        {
          CFStringRef v27 = (const __SCPreferences *)sub_10001A43C(a2);
          CFRetain(v27);
          if (qword_10027DD68)
          {
            CFDataRef v71 = (const __SCPreferences *)v117;
            if (!v118) {
              CFDataRef v71 = v27;
            }
            [(id)qword_10027DD68 WFLog:3, "Removed %@ from list of known networks", v71 message];
          }
        }
        else
        {
          CFStringRef v27 = 0;
        }
        sub_10009BE94((void *)a1, v27, 1, 0, 0);
        if (sub_1000C81DC((uint64_t)a2))
        {
          uint64_t context = 0;
          p_uint64_t context = &context;
          uint64_t v127 = 0x2020000000;
          uint64_t v128 = (uint64_t)a2;
          CFRetain(a2);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10009C1F8;
          block[3] = &unk_100240920;
          void block[4] = &context;
          dispatch_async((dispatch_queue_t)qword_10027DD88, block);
          _Block_object_dispose(&context, 8);
        }
        goto LABEL_108;
      }
      CFDictionaryRef v44 = MutableCopy;
      char v45 = sub_10001A43C(a2);
      CFBooleanRef Value = CFDictionaryGetValue(v44, v45);
      if (!Value)
      {
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: not a custom network", "__WiFiManagerRemoveNetworkSetting")
        }
        CFDictionaryRef v63 = v44;
        goto LABEL_84;
      }
      CFTypeRef v47 = Value;
      CFRetain(Value);
      CFAbsoluteTime v48 = sub_10001A43C(a2);
      CFDictionaryRemoveValue(v44, v48);
      [+[NSUserDefaults standardUserDefaults] setObject:v44 forKey:@"Custom network settings"];
      if (!sub_10005A1E0(*(const __SCPreferences **)(a1 + 1064)))
      {
        CFTypeRef cf2a = v47;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3 message:@"%s: failed to get sc prefs lock" : @"__WiFiManagerRemoveNetworkSetting"];
        }
        CFTypeRef v47 = cf2a;
        goto LABEL_83;
      }
      CFArrayRef v113 = v29;
      CFNumberRef v114 = v6;
      CFTypeID v112 = (void *)sub_10000D990((uint64_t)"__WiFiManagerRemoveNetworkSetting");
      CFArrayRef v49 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(a1 + 1064));
      if (!v49)
      {
        unsigned int v61 = 0;
        goto LABEL_82;
      }
      CFArrayRef v50 = v49;
      CFTypeRef cf2 = v47;
      CFIndex v51 = CFArrayGetCount(v49);
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: remove set ID %@, total sets %ld", "__WiFiManagerRemoveNetworkSetting", cf2, v51 message];
      }
      if (v51 < 1)
      {
LABEL_75:
        unsigned int v61 = 0;
      }
      else
      {
        int v111 = a3;
        for (CFIndex i = 0; i != v51; ++i)
        {
          uint64_t v54 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v50, i);
          if (v54)
          {
            if ((double v55 = v54, Name = SCNetworkSetGetName(v54), SetID = SCNetworkSetGetSetID(v55), Name)
              && CFEqual(Name, @"Automatic")
              || SetID && CFDictionaryContainsValue(v44, SetID))
            {
              sub_1000A5238(cf, v55);
            }
          }
        }
        CFIndex v58 = 0;
        LODWORD(a3) = v111;
        while (1)
        {
          uint64_t v59 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v50, v58);
          if (SCNetworkSetGetSetID(v59))
          {
            CFStringRef v60 = SCNetworkSetGetSetID(v59);
            if (CFEqual(v60, cf2)) {
              break;
            }
          }
          if (v51 == ++v58) {
            goto LABEL_75;
          }
        }
        if (SCNetworkSetGetName(v59))
        {
          CFStringRef v86 = SCNetworkSetGetName(v59);
          if (CFEqual(v86, @"Automatic"))
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: skipping automatic set from removal! automatic/custom network set ID: %@", "__WiFiManagerRemoveNetworkSetting", cf2 message];
            }
            goto LABEL_75;
          }
        }
        sub_1000BCA84(v59, cf);
        unsigned int v61 = SCNetworkSetRemove(v59);
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: set removal status %d", "__WiFiManagerRemoveNetworkSetting", v61];
        }
        CFTypeRef v47 = cf2;
        if (v61) {
          goto LABEL_77;
        }
        CFIndex v110 = CFArrayGetCount(v50);
        CFTypeRef v109 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        if (v59)
        {
          if (SCNetworkSetGetName(v59))
          {
            CFStringRef v89 = SCNetworkSetGetName(v59);
            if (CFEqual(v89, @"Automatic"))
            {
              unsigned int v61 = qword_10027DD68;
              if (qword_10027DD68)
              {
                [(id)qword_10027DD68 WFLog:4, "%s: aborting request to remove automatic network set! ID: %@", "__WiFiManagerRemoveCurrentNetworkSet", SCNetworkSetGetSetID(v59) message];
                unsigned int v61 = 0;
              }
              goto LABEL_183;
            }
          }
        }
        if (v110 >= 1)
        {
          for (CFIndex j = 0; v110 != j; ++j)
          {
            unsigned int v92 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v50, j);
            CFStringRef v93 = SCNetworkSetGetName(v92);
            uint64_t v94 = v92;
            CFStringRef v95 = SCNetworkSetGetSetID(v92);
            CFStringRef v96 = v95;
            if (v93)
            {
              int v97 = CFEqual(@"Automatic", v93);
              int v98 = v97;
              if (!v96)
              {
                if (!v97) {
                  continue;
                }
LABEL_173:
                unsigned int v101 = SCNetworkSetSetCurrent(v94);
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: SCNetworkSetSetCurrent(Automatic) %d", "__WiFiManagerRemoveCurrentNetworkSet", v101, v108);
                }
LABEL_178:
                sub_1000A5238(v109, v94);
                continue;
              }
              int v99 = CFDictionaryContainsValue(v44, v96);
              if (v98 && v99)
              {
                if (qword_10027DD68) {
                  [(id)qword_10027DD68 WFLog:4, "%s: network set %@ (%@) is in both automatic and custom network sets!!.", "__WiFiManagerRemoveCurrentNetworkSet", v96, v93 message];
                }
                goto LABEL_173;
              }
              if (v98) {
                goto LABEL_173;
              }
            }
            else
            {
              if (!v95) {
                continue;
              }
              int v99 = CFDictionaryContainsValue(v44, v95);
            }
            if (v99)
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: Excluding services from set id %@ (%@)", "__WiFiManagerRemoveCurrentNetworkSet", v96, v93 message];
              }
              goto LABEL_178;
            }
          }
        }
        sub_1000BCA84(v59, v109);
        unsigned int v61 = SCNetworkSetRemove(v59);
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: set removal status %d", "__WiFiManagerRemoveCurrentNetworkSet", v61];
        }
        LODWORD(a3) = v111;
LABEL_183:
        if (v109) {
          CFRelease(v109);
        }
      }
      CFTypeRef v47 = cf2;
LABEL_77:
      CFRelease(v50);
      CFArrayRef v29 = v113;
      CFAllocatorRef v40 = kCFAllocatorDefault;
LABEL_82:
      sub_10005A29C(*(SCPreferencesRef *)(a1 + 1064), v61);

      uint64_t v6 = v114;
LABEL_83:
      CFRelease(v44);
      CFDictionaryRef v63 = (const __CFDictionary *)v47;
LABEL_84:
      CFRelease(v63);
      goto LABEL_85;
    }
LABEL_191:
    uint64_t v76 = 0;
    goto LABEL_127;
  }
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Carplay network + UserConfigured", "WiFiManagerRemoveNetwork")];
  }
  switch(a3)
  {
    case 2:
      sub_10001C6A4((uint64_t)a2, @"lastJoined", 0);
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: removed kWiFiPreferenceLastJoinedKey" : @"WiFiManagerRemoveNetwork"];
      }
      CFArrayRef v80 = (const __CFArray *)sub_1000830B8(a1);
      if (v80)
      {
        CFArrayRef v81 = v80;
        sub_1000945D4(1, v80, a2, &v124, 0);
        if (v124 != -1)
        {
          CFBooleanRef v82 = CFArrayGetValueAtIndex(v81, v124);
          if (v82) {
            sub_10001C6A4((uint64_t)v82, @"lastJoined", 0);
          }
        }
      }
      goto LABEL_138;
    case 0x1B:
      goto LABEL_20;
    case 7:
      sub_1000CD8E4((uint64_t)a2);
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: removed CarPlay settings", "WiFiManagerRemoveNetwork")];
      }
LABEL_138:
      uint64_t v76 = sub_10009B1AC(a1, a2, 0);
      goto LABEL_142;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:4, "%s: unexpected reason %d", "WiFiManagerRemoveNetwork", a3];
  }
  uint64_t v76 = 1;
LABEL_142:
  return v76;
}

void sub_10009B194(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009B1AC(uint64_t a1, void *a2, unsigned int a3)
{
  CFIndex v71 = 0;
  v72[0] = -1;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null manager", "WiFiManagerUpdateNetwork"];
    }
    goto LABEL_127;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null network", "WiFiManagerUpdateNetwork"];
    }
    double v55 = v6;
    goto LABEL_128;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: merge %d, %@", "WiFiManagerUpdateNetwork", a3, a2 message];
  }
  sub_100094568(a2);
  id v7 = (const __SCPreferences *)sub_10000D9F0((void *)a1, @"List of known networks");
  if (!v7) {
    return 0;
  }
  unsigned int v8 = v7;
  if (!sub_10005A1E0(v7))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: failed to get prefs lock" : @"WiFiManagerUpdateNetwork"];
    }
LABEL_127:
    double v55 = v54;
LABEL_128:
    return 0;
  }
  unsigned int v9 = (void *)sub_10000D990((uint64_t)"WiFiManagerUpdateNetwork");
  CFArrayRef v10 = (const __CFArray *)sub_1000830B8(a1);
  if (v10)
  {
    CFArrayRef v11 = v10;
    SCPreferencesRef prefs = v8;
    sub_1000945D4(*(_DWORD *)(a1 + 304), v10, a2, v72, &v71);
    if (v72[0] == -1)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: %@ does not  exist", "WiFiManagerUpdateNetwork", sub_10001A43C(a2) message];
      }
    }
    else
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v11, v72[0]);
      if (ValueAtIndex)
      {
        CFDictionaryRef v13 = ValueAtIndex;
        int v59 = sub_10001EE48(ValueAtIndex);
        if (sub_1000C7590((uint64_t)a2))
        {
          int v14 = sub_1000C7590((uint64_t)v13);
          if (v14 == sub_1000C7590((uint64_t)a2))
          {
            BOOL v15 = sub_1000C7514((uint64_t)v13);
            BOOL v16 = v15 != sub_1000C7514((uint64_t)a2);
          }
          else
          {
            BOOL v16 = 1;
          }
        }
        else
        {
          BOOL v16 = 0;
        }
        if (sub_10001FC1C((uint64_t)v13))
        {
          BOOL v63 = 0;
        }
        else
        {
          BOOL v17 = sub_10001ED04((uint64_t)v13)
             || sub_1000C66D0((BOOL)v13)
             || sub_1000C6FE8(v13) != 0;
          BOOL v63 = v17;
        }
        BOOL v62 = !sub_10001FC1C((uint64_t)a2)
           && !sub_1000C66D0((BOOL)a2)
           && !sub_10001ED04((uint64_t)a2)
           && !sub_10001FC6C((BOOL)a2)
           && sub_1000C6FE8((const __CFDictionary *)a2) == 0;
        unsigned int v65 = a3;
        if (sub_1000C6FE8(v13)) {
          BOOL v18 = sub_10001ED04((uint64_t)v13) == 0;
        }
        else {
          BOOL v18 = 0;
        }
        if (sub_1000C6FE8((const __CFDictionary *)a2) && !sub_1000C7E9C((uint64_t)a2))
        {
          sub_10001C6A4((uint64_t)a2, @"WPA_IE", 0);
          sub_10001C6A4((uint64_t)v13, @"WPA_IE", 0);
        }
        if (v16 && sub_1000C7590((uint64_t)a2) != 2 && !sub_10001EBB4((uint64_t)a2))
        {
          CFIndex v51 = sub_10001E404((uint64_t)a2, @"networkDisabledReason");
          CFIndex v52 = sub_10001E404((uint64_t)a2, @"networkDisabledClientName");
          if (v52)
          {
            if (v51 && CFEqual(v52, @"configd"))
            {
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: Enabling auto-join for network %@ since captive status changed and was disabled by configd", "WiFiManagerUpdateNetwork", sub_10001A43C(a2) message];
              }
              sub_1000C96AC((uint64_t)a2, 1);
            }
          }
        }
        if (sub_1000C6FE8((const __CFDictionary *)a2)) {
          BOOL v19 = sub_10001ED04((uint64_t)a2) == 0;
        }
        else {
          BOOL v19 = 0;
        }
        if (sub_10001ED58((uint64_t)a2))
        {
          unsigned int v20 = sub_10001ED58((uint64_t)v13);
          LODWORD(v60) = v20 != sub_10001ED58((uint64_t)a2);
        }
        else
        {
          LODWORD(v60) = 0;
        }
        char v21 = sub_10001E404((uint64_t)v13, @"addedAt");
        CFStringRef v22 = sub_10001E404((uint64_t)a2, @"addedAt");
        if ((v21 || !v22) && (v22 || !v21))
        {
          HIDWORD(v60) = 0;
          if (!v21 || !v22)
          {
LABEL_46:
            CFStringRef v23 = sub_10001E404((uint64_t)v13, @"lastJoined");
            CFStringRef v24 = sub_10001E404((uint64_t)a2, @"lastJoined");
            if (!v23 && v24 || !v24 && v23) {
              goto LABEL_50;
            }
            HIDWORD(v67) = 0;
            if (!v23 || !v24) {
              goto LABEL_51;
            }
            if (CFEqual(v23, v24)) {
              HIDWORD(v67) = 0;
            }
            else {
LABEL_50:
            }
              HIDWORD(v67) = 1;
LABEL_51:
            int v25 = sub_10001E404((uint64_t)v13, @"lastAutoJoined");
            id v26 = sub_10001E404((uint64_t)a2, @"lastAutoJoined");
            if ((v25 || !v26) && (v26 || !v25))
            {
              LODWORD(v67) = 0;
              if (!v25 || !v26)
              {
LABEL_56:
                BOOL v27 = sub_10001ED9C((uint64_t)a2);
                BOOL v61 = v27 != sub_10001ED9C((uint64_t)v13);
                CFDateRef v28 = (const __CFDate *)sub_1000CDE04((uint64_t)v13);
                CFDateRef v29 = (const __CFDate *)sub_1000CDE04((uint64_t)a2);
                if (v29 && (!v28 || CFDateCompare(v28, v29, 0) == kCFCompareLessThan))
                {
                  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                  int v31 = sub_10001E404((uint64_t)a2, @"NetworkQualityResponsiveness");
                  CFDictionaryAddValue(Mutable, @"networkQualityResponsiveness", v31);
                  context[0] = a1;
                  context[1] = 0xAAAAAAAA00000081;
                  void context[2] = Mutable;
                  void context[3] = 1;
                  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
                  if (Mutable) {
                    CFRelease(Mutable);
                  }
                }
                unsigned int v32 = v63 && v62;
                unsigned int v64 = v18 ^ v19;
                if (v65)
                {
                  sub_1000198FC((uint64_t)v13, (uint64_t)a2);
                  if (sub_1000C9930((uint64_t)a2) && sub_1000CE79C((uint64_t)v13) && !sub_1000CE79C((uint64_t)a2)) {
                    sub_1000C977C((uint64_t)v13, 0);
                  }
                  unint64_t v33 = sub_10001E404((uint64_t)v13, @"WiFiNetworkUserAcceptedRecommendationAt");
                  CFIndex v34 = sub_10001E404((uint64_t)a2, @"WiFiNetworkUserAcceptedRecommendationAt");
                  if (v33 && !v34) {
                    sub_10001C6A4((uint64_t)v13, @"WiFiNetworkUserAcceptedRecommendationAt", 0);
                  }
                  CFRetain(v13);
                  CFArrayRemoveValueAtIndex(v11, v72[0]);
                  CFIndex v35 = v71;
                  if (*(_DWORD *)(a1 + 304) == 4) {
                    CFIndex v35 = --v71;
                  }
                  CFArrayInsertValueAtIndex(v11, v35, v13);
                  BOOL v36 = v59 != sub_10001EE48(v13);
                  BOOL v37 = sub_10001EBB4((uint64_t)v13);
                  BOOL v38 = v37 != sub_10001EBB4((uint64_t)a2);
                  CFStringRef v39 = (CFDictionaryRef *)sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)v13);
                  CFRelease(v13);
                }
                else
                {
                  CFArrayRemoveValueAtIndex(v11, v72[0]);
                  CFArrayInsertValueAtIndex(v11, v72[0], a2);
                  CFStringRef v39 = (CFDictionaryRef *)sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)a2);
                  BOOL v36 = 0;
                  BOOL v38 = 0;
                }
                int v40 = sub_100094834(a1, v11);
                sub_100093410(a1, v39, 0);
                goto LABEL_74;
              }
              if (CFEqual(v25, v26))
              {
                LODWORD(v67) = 0;
                goto LABEL_56;
              }
            }
            LODWORD(v67) = 1;
            goto LABEL_56;
          }
          if (CFEqual(v21, v22))
          {
            HIDWORD(v60) = 0;
            goto LABEL_46;
          }
        }
        HIDWORD(v60) = 1;
        goto LABEL_46;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: Null existingNetwork" args:v58];
      }
    }
    BOOL v36 = 0;
    BOOL v16 = 0;
    unsigned int v32 = 0;
    uint64_t v60 = 0;
    BOOL v61 = 0;
    uint64_t v67 = 0;
    BOOL v38 = 0;
    CFStringRef v39 = 0;
    unsigned int v64 = 0;
    int v40 = 0;
LABEL_74:
    unsigned int v8 = prefs;
    goto LABEL_75;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: Null networks" args:@"WiFiManagerUpdateNetwork"];
  }
  BOOL v36 = 0;
  BOOL v16 = 0;
  unsigned int v32 = 0;
  uint64_t v60 = 0;
  BOOL v61 = 0;
  uint64_t v67 = 0;
  BOOL v38 = 0;
  CFStringRef v39 = 0;
  unsigned int v64 = 0;
  int v40 = 0;
LABEL_75:
  sub_10005A29C(v8, v40);

  if (!v40)
  {
    uint64_t v46 = 0;
    if (!v39) {
      return v46;
    }
    goto LABEL_110;
  }
  if (v32)
  {
    unsigned int v41 = v60;
    unsigned int v42 = HIDWORD(v60);
    if (&_WiFiCloudSyncEngineCreate)
    {
      CFStringRef v43 = *(const void **)(a1 + 1304);
      if (v43)
      {
        if (v39)
        {
          CFRetain(v43);
          CFRetain(v39);
          CFDictionaryRef v44 = qword_10027DD90;
          v69[0] = _NSConcreteStackBlock;
          v69[1] = 3221225472;
          v69[2] = sub_10009D1EC;
          v69[3] = &unk_10023F048;
          v69[4] = a1;
          v69[5] = v39;
          char v45 = v69;
LABEL_99:
          dispatch_async(v44, v45);
        }
      }
    }
  }
  else
  {
    unsigned int v41 = v60;
    unsigned int v42 = HIDWORD(v60);
    if (&_WiFiCloudSyncEngineCreate)
    {
      CFTypeRef v47 = *(const void **)(a1 + 1304);
      if (v47)
      {
        if (v39)
        {
          CFRetain(v47);
          CFRetain(v39);
          CFDictionaryRef v44 = qword_10027DD90;
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10009D238;
          block[3] = &unk_10023F048;
          void block[4] = a1;
          void block[5] = v39;
          char v45 = block;
          goto LABEL_99;
        }
      }
    }
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:4, "%s: hiddenChanged=%d captiveChanged=%d pskToOpen=%d didLowDataModeChanged=%d didWpa3Change=%d addedAtChanged=%d userJoinedAtChanged=%d autoJoinedAtChanged=%d, didPrivacyProxyPreferenceChange=%d autoJoinChanged=%d", "WiFiManagerUpdateNetwork", v36, v16, v32, v41, v64, v42, HIDWORD(v67), v67, v61, v38];
  }
  if (v36 || v16 || v32 || v41 || v67 | HIDWORD(v67) | v42 | v64 || v61) {
    sub_100184EE0(*(void **)(a1 + 1432), (uint64_t)a2, 2);
  }
  uint64_t v49 = sub_100082844(a1);
  sub_10008111C(v49, 2, a1);
  sub_100095A24(a1, v39, 2u);
  uint64_t v46 = 1;
  if (v39) {
LABEL_110:
  }
    CFRelease(v39);
  return v46;
}

void sub_10009BC5C(CFArrayRef theArray, const void *a2, CFIndex *a3)
{
  if (a3)
  {
    *a3 = -1;
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count)
      {
        CFIndex v7 = Count;
        if (Count < 1)
        {
          CFIndex v8 = 0;
        }
        else
        {
          CFIndex v8 = 0;
          while (1)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
            if (sub_1000C8ED4((uint64_t)a2, (uint64_t)ValueAtIndex)) {
              break;
            }
            if (v7 == ++v8) {
              goto LABEL_12;
            }
          }
          *a3 = v8;
        }
        if (v8 == v7)
        {
LABEL_12:
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: network %@ not found", "__GetNetworkIndicesMatchingSSIDOnly", sub_10001A43C(a2) message];
          }
        }
      }
    }
  }
}

void sub_10009BD74(const void *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  if (&_CNForgetSSID)
  {
    if (a1)
    {
      CFTypeRef v1 = CFRetain(a1);
      v6[3] = (uint64_t)v1;
      global_queue = dispatch_get_global_queue(0, 0);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000BC1A0;
      block[3] = &unk_100240920;
      void block[4] = &v5;
      dispatch_async(global_queue, block);
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: null ssidDataRef." args:("__AsyncCNForgetSSID")];
      }
    }
  }
  _Block_object_dispose(&v5, 8);
}

void sub_10009BE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009BE94(void *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return;
  }
  if (a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: blacklisting ssid: %@", "WiFiManagerAddNetworkNameToUserNotificationBlacklist", a2 message];
    }
    CFDictionaryRef v10 = sub_1000A9590(a1, 0);
    CFDictionaryRef v11 = v10;
    if (v10)
    {
      CFIndex Count = CFDictionaryGetCount(v10);
      MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count + 1, v11);
    }
    else
    {
      MutableCFStringRef Copy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    CFDictionaryRef v14 = MutableCopy;
    if (CFDictionaryContainsKey(MutableCopy, a2))
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v14, a2);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutableCopy(0, 0, Value);
      if (CFDictionaryContainsKey(Mutable, @"timestamp")) {
        CFDictionaryRemoveValue(Mutable, @"timestamp");
      }
    }
    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v18 = CFDateCreate(kCFAllocatorDefault, Current);
    if (v18)
    {
      CFDictionarySetValue(Mutable, @"timestamp", v18);
      CFDictionarySetValue(Mutable, @"type", +[NSNumber numberWithUnsignedInt:a3]);
      CFDictionarySetValue(Mutable, @"notificationType", +[NSNumber numberWithUnsignedInt:a5]);
      if (CFDictionaryContainsKey(Mutable, @"count")) {
        BOOL v19 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (char *)[[-[__CFDictionary objectForKey:](Mutable, "objectForKey:", @"count") integerValue]+ 1);
      }
      else {
        BOOL v19 = (NSNumber *)&off_100262DE8;
      }
      CFDictionarySetValue(Mutable, @"count", v19);
      CFDictionarySetValue(v14, a2, Mutable);
      [+[NSUserDefaults standardUserDefaults] setObject:v14 forKey:@"UserNotificationBlacklist"];
      sub_1000A59D4((uint64_t)a1, v14);
      if (!Mutable) {
        goto LABEL_18;
      }
    }
    else
    {
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: timestamp is null", "WiFiManagerAddNetworkNameToUserNotificationBlacklist")];
      }
      if (!Mutable) {
        goto LABEL_18;
      }
    }
    CFRelease(Mutable);
LABEL_18:
    if (v18) {
      CFRelease(v18);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (v11)
    {
      CFRelease(v11);
    }
    return;
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: ssid is null" args:("WiFiManagerAddNetworkNameToUserNotificationBlacklist")];
  }
}

void sub_10009C1F8(uint64_t a1)
{
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: network is app based, removing access in DA", "WiFiManagerRemoveNetwork_block_invoke")];
  }
  CFArrayRef v3 = (void *)sub_1000CE384(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  sub_10002B574(v3, *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  id v4 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_10009C29C(uint64_t a1)
{
  sub_1000455D4(*(void *)(*(void *)(a1 + 32) + 1304), *(void *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFStringRef v2 = *(const void **)(*(void *)(a1 + 32) + 1304);

  CFRelease(v2);
}

uint64_t sub_10009C2E8(uint64_t a1, void *a2, const __CFString *a3, CFBooleanRef a4)
{
  uint64_t v47 = 0;
  CFIndex idx = -1;
  if (!a1)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: null manager", "WiFiManagerPrivateMacUpdateProperty"];
    }
    goto LABEL_108;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" : @"WiFiManagerPrivateMacUpdateProperty"];
    }
    goto LABEL_108;
  }
  unsigned int v9 = sub_10001A43C(a2);
  CFArrayRef v10 = (const __CFArray *)sub_100083F8C(a1);
  if (!v10)
  {
LABEL_52:
    uint64_t v25 = 0;
    goto LABEL_53;
  }
  CFArrayRef v11 = v10;
  sub_10001A734(v10, (const void **)a2, &idx, &v47);
  CFIndex v12 = idx;
  if (idx == -1)
  {
    if (sub_1000C6710((BOOL)a2))
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation :  Updating original HS2.0 Provisioning. SSID <%@> for <%@> with value <%@>", "WiFiManagerPrivateMacUpdateProperty", v9, a3, a4, v47 message];
      }
      sub_1000AB298(v11, a2, &idx, &v47);
    }
    CFIndex v12 = idx;
    if (idx == -1)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: WFMacRandomisation :  Network not found in the private mac cache. Avoiding any updates. Requested update for : <%@> with value : <%@> for network : <%@>", "WiFiManagerPrivateMacUpdateProperty", a3, a4, v9 message];
      }
      BOOL v30 = v29;
      goto LABEL_51;
    }
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v11, v12);
  if (!ValueAtIndex || (uint64_t v15 = (uint64_t)ValueAtIndex, v16 = CFGetTypeID(ValueAtIndex), v16 != sub_1000C5C14()))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: WFMacRandomisation : privateMacCache network invalid", @"WiFiManagerPrivateMacUpdateProperty"];
    }
LABEL_108:
    BOOL v30 = v46;
LABEL_51:
    goto LABEL_52;
  }
  if (CFStringCompare(a3, @"BSSID", 1uLL) == kCFCompareEqualTo)
  {
    unsigned int v20 = @"BSSID";
    goto LABEL_30;
  }
  if (CFStringCompare(a3, @"PresentInKnownNetworks", 1uLL) == kCFCompareEqualTo)
  {
    if (!a4) {
      goto LABEL_33;
    }
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (TypeID != CFGetTypeID(a4)) {
      goto LABEL_33;
    }
    if (kCFBooleanFalse != a4 || idx == -1)
    {
      unsigned int v20 = @"PresentInKnownNetworks";
      goto LABEL_30;
    }
    CFBooleanRef v27 = (const __CFBoolean *)sub_10001E404(v15, @"NetworkAddedByProfile");
    if (!sub_10001BB2C(v15) || !v27 || v27 != kCFBooleanTrue)
    {
      CFArrayRemoveValueAtIndex(v11, idx);
      goto LABEL_33;
    }
    if (!sub_1000ABC9C(a1, v15)) {
      goto LABEL_33;
    }
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "WFMacRandomisation : %s removed HS20 entries", "WiFiManagerPrivateMacUpdateProperty")];
    }
LABEL_47:
    goto LABEL_33;
  }
  if (CFStringCompare(a3, @"PRIVATE_MAC_ADDRESS", 1uLL) == kCFCompareEqualTo)
  {
    if (a4)
    {
      CFTypeID v32 = CFDictionaryGetTypeID();
      if (v32 == CFGetTypeID(a4))
      {
        unsigned int v20 = @"PRIVATE_MAC_ADDRESS";
        goto LABEL_30;
      }
    }
    goto LABEL_33;
  }
  if (CFStringCompare(a3, @"PrivateMacFeatureToggled", 1uLL) == kCFCompareEqualTo)
  {
    if (!a4) {
      goto LABEL_33;
    }
    CFTypeID v33 = CFBooleanGetTypeID();
    if (v33 != CFGetTypeID(a4) || kCFBooleanFalse != a4) {
      goto LABEL_33;
    }
    unsigned int v20 = @"PrivateMacFeatureToggled";
    goto LABEL_61;
  }
  if (CFStringCompare(a3, @"MacAddressRandomisationClassificationAttempts", 1uLL) == kCFCompareEqualTo)
  {
    if (!a4) {
      goto LABEL_33;
    }
    CFTypeID v34 = CFBooleanGetTypeID();
    if (v34 != CFGetTypeID(a4)) {
      goto LABEL_33;
    }
    if (kCFBooleanTrue != a4) {
      goto LABEL_33;
    }
    int v35 = sub_1000C6FC0(v15, @"MacAddressRandomisationClassificationAttempts");
    uint64_t v36 = (v35 - 1);
    if (v35 < 1) {
      goto LABEL_33;
    }
    if (v35 != 1)
    {
      uint64_t v37 = v15;
      BOOL v38 = @"MacAddressRandomisationClassificationAttempts";
LABEL_83:
      sub_10001A610(v37, v38, v36);
      goto LABEL_33;
    }
    sub_10001C6A4(v15, @"MacAddressRandomisationTagMigratedNetwork", 0);
    sub_10001C6A4(v15, @"MacAddressRandomisationClassificationAttempts", 0);
    sub_10001C6A4(v15, @"PrivateMacClassifyInterval", 0);
    unsigned int v20 = @"PrivateMacJoinDateAfterUpgrade";
LABEL_61:
    uint64_t v21 = v15;
    CFBooleanRef v22 = 0;
    goto LABEL_32;
  }
  CFStringRef v17 = @"RandomMACBannerDisplayed";
  if (CFStringCompare(a3, @"RandomMACBannerDisplayed", 1uLL) == kCFCompareEqualTo) {
    goto LABEL_84;
  }
  if (CFStringCompare(a3, @"isBackhaulLinkUp", 1uLL) == kCFCompareEqualTo)
  {
    unsigned int v20 = @"isBackhaulLinkUp";
    goto LABEL_30;
  }
  if (CFStringCompare(a3, @"FeatureOffBySystemForCarplay", 1uLL) == kCFCompareEqualTo)
  {
    unsigned int v20 = @"FeatureOffBySystemForCarplay";
    goto LABEL_30;
  }
  CFStringRef v17 = @"FailureThresholdMet";
  if (CFStringCompare(a3, @"FailureThresholdMet", 1uLL) == kCFCompareEqualTo)
  {
    if (kCFBooleanFalse != a4) {
      goto LABEL_33;
    }
    unsigned int v39 = sub_1000C6FC0(v15, @"FailureCountThresholdCurrent");
    if (*(_DWORD *)(a1 + 456) > v39)
    {
      sub_10001C6A4(v15, @"FailureThresholdMet", a4);
    }
    else
    {
      unsigned int v40 = *(_DWORD *)(a1 + 464) + v39;
      unsigned int v41 = *(_DWORD *)(a1 + 460);
      if (v40 >= v41) {
        uint64_t v42 = v41;
      }
      else {
        uint64_t v42 = v40;
      }
      sub_10001C6A4(v15, @"FailureThresholdMet", a4);
      if (v42) {
        sub_10001A610(v15, @"FailureCountThresholdCurrent", v42);
      }
    }
    BOOL v38 = @"FailureCountCurrent";
    uint64_t v37 = v15;
    uint64_t v36 = 0;
    goto LABEL_83;
  }
  if (CFStringCompare(a3, @"FailureCountCurrent", 1uLL) == kCFCompareEqualTo)
  {
    if (kCFBooleanTrue != a4) {
      goto LABEL_33;
    }
    unsigned int v43 = sub_1000C6FC0(v15, @"FailureCountCurrent");
    unsigned int v44 = sub_1000C6FC0(v15, @"FailureCountThresholdCurrent");
    uint64_t v36 = v43 + 1;
    if (v36 < v44)
    {
      BOOL v38 = @"FailureCountCurrent";
      uint64_t v37 = v15;
      goto LABEL_83;
    }
LABEL_84:
    uint64_t v21 = v15;
    unsigned int v20 = (__CFString *)v17;
    goto LABEL_31;
  }
  if (CFStringCompare(a3, @"ResetCaptiveProbe", 1uLL) == kCFCompareEqualTo)
  {
    if (kCFBooleanFalse == a4 || kCFBooleanTrue == a4)
    {
      unsigned int v20 = @"ResetCaptiveProbe";
      goto LABEL_30;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s WFMacRandomisation : Incorrect value being set for kWiFiPrivateMacResetCaptiveProbe", "WiFiManagerPrivateMacUpdateProperty"];
    }
    goto LABEL_47;
  }
  if (CFStringCompare(a3, @"IsPrivateMacAddressCarriedOver", 1uLL) == kCFCompareEqualTo)
  {
    if (kCFBooleanFalse == a4 || kCFBooleanTrue == a4)
    {
      unsigned int v20 = @"IsPrivateMacAddressCarriedOver";
      goto LABEL_30;
    }
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s WFMacRandomisation : Incorrect value being set for kWiFiPrivateMacIsCarriedOver" : @"WiFiManagerPrivateMacUpdateProperty"];
    }
    goto LABEL_47;
  }
  if (CFStringCompare(a3, @"ForcedDisassoc", 1uLL))
  {
    CFComparisonResult v18 = CFStringCompare(a3, @"LinkDownTimestamp", 1uLL);
    if (a4)
    {
      if (v18 == kCFCompareEqualTo)
      {
        CFTypeID v19 = CFGetTypeID(a4);
        if (v19 == CFDateGetTypeID())
        {
          unsigned int v20 = @"LinkDownTimestamp";
LABEL_30:
          uint64_t v21 = v15;
LABEL_31:
          CFBooleanRef v22 = a4;
LABEL_32:
          sub_10001C6A4(v21, v20, v22);
        }
      }
    }
  }
  else if (kCFBooleanTrue == a4 && *(unsigned char *)(a1 + 362))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s WFMacRandomisation : Manually disassociating from network : <%@> to apply new private MAC properties", "WiFiManagerPrivateMacUpdateProperty", v9 message];
    }
    if (sub_100083E60((void *)a1, @"PrivateMacForcedDisassocPending", 0, 0))
    {
      *(unsigned char *)(a1 + 362) = 0;
      sub_100086F2C(a1, "WiFiManagerPrivateMacUpdateProperty", 29143);
      unsigned int v20 = @"ForcedDisassoc";
      goto LABEL_30;
    }
  }
LABEL_33:
  int v23 = sub_1000A69BC(a1, v11);
  sub_1000A6B7C(a1, 1, 0);
  if (!v23) {
    goto LABEL_52;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, " %s WFMacRandomisation : Updated property <%@> of network <%@> with value <%@> to the list of private mac networks", "WiFiManagerPrivateMacUpdateProperty", a3, v9, a4 message];
  }
  uint64_t v25 = 1;
LABEL_53:
  return v25;
}

void sub_10009CB84(uint64_t a1, const __CFString *a2)
{
  if (a1 && a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: bundleId %@", "WiFiManagerRemoveNetworksWithBundleIdentifier", a2 message];
    }
    uint64_t v5 = sub_10008EDA4(a1, a2);
    if (v5)
    {
      CFArrayRef v6 = v5;
      CFIndex Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        for (CFIndex i = 0; i != v8; ++i)
        {
          CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v6, i);
          if (ValueAtIndex)
          {
            CFArrayRef v11 = ValueAtIndex;
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4, "Network %@ is no longer app owned, removing...", sub_10001A43C(v11) message];
            }
            sub_10009A098(a1, v11, 9);
            sub_1000C94E0(v11);
          }
        }
      }
      CFRelease(v6);
    }
  }
}

uint64_t sub_10009CCE4(uint64_t a1, void *a2, int a3, char a4)
{
  if (a4)
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000016;
    void context[2] = a2;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    if (qword_10027DD68)
    {
      if (a3) {
        CFArrayRef v11 = "Enabling";
      }
      else {
        CFArrayRef v11 = "Disabling";
      }
      [(id)qword_10027DD68 WFLog:3, "Temporarily %s %@ from list of know networks", v11, sub_10001A43C(a2) message];
    }
    return 1;
  }
  else
  {
    sub_1000C984C((CFMutableDictionaryRef *)a2, a3, @"SetNetworkState");
    uint64_t v7 = sub_10009B1AC(a1, a2, 1u);
    if (v7)
    {
      if (qword_10027DD68)
      {
        if (a3) {
          unsigned int v9 = "Enabled";
        }
        else {
          unsigned int v9 = "Disabled";
        }
        [(id)qword_10027DD68 WFLog:3, "%s auto join for %@ (%@)", v9, sub_10001A43C(a2), a2 message];
      }
    }
    if (a3)
    {
      sub_1000242F8(a1, 1);
      if (_os_feature_enabled_impl()) {
        sub_1000047D4(a1, 5);
      }
      else {
        sub_10008DE74(a1, 2);
      }
    }
  }
  return v7;
}

BOOL sub_10009CE94(uint64_t a1, const void *a2)
{
  CFArrayRef v3 = *(const __CFArray **)(a1 + 216);
  if (!v3) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v3);
  if (!Count) {
    return 0;
  }
  v10.CFIndex length = Count;
  v10.CFIndex location = 0;
  FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 216), v10, a2);
  if (FirstIndexOfValue == -1) {
    return 0;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 216), FirstIndexOfValue);

  return sub_10001EBB4((uint64_t)ValueAtIndex);
}

uint64_t sub_10009CF10(uint64_t a1, const void *a2)
{
  CFArrayRef v3 = *(const __CFArray **)(a1 + 216);
  if (!v3) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v3);
  if (!Count) {
    return 0;
  }
  v10.CFIndex length = Count;
  v10.CFIndex location = 0;
  FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 216), v10, a2);
  if (FirstIndexOfValue == -1) {
    return 0;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 216), FirstIndexOfValue);

  return sub_1000CE0B8((uint64_t)ValueAtIndex);
}

uint64_t sub_10009CF8C(uint64_t a1, void *a2, const void *a3)
{
  CFIndex v19 = 0;
  CFIndex idx = -1;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager" : @"WiFiManagerUpdateNetworkForAutoJoinDisablementProperties"];
    }
    goto LABEL_26;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [qword_10027DD68 WFLog:message:3, "%s: null network", "WiFiManagerUpdateNetworkForAutoJoinDisablementProperties"];
    }
    goto LABEL_26;
  }
  CFArrayRef v6 = (const __CFArray *)sub_1000830B8(a1);
  if (!v6)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Null networks", "WiFiManagerUpdateNetworkForAutoJoinDisablementProperties")
    }
    goto LABEL_26;
  }
  CFArrayRef v7 = v6;
  sub_1000945D4(*(_DWORD *)(a1 + 304), v6, a2, &idx, &v19);
  if (idx == -1)
  {
    CFTypeID v16 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      CFStringRef v17 = sub_10001A43C(a2);
      [v16 WFLog:3, "%s: %@ does not  exist", "WiFiManagerUpdateNetworkForAutoJoinDisablementProperties", v17, v19 message];
    }
    CFComparisonResult v18 = v15;
    goto LABEL_27;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v7, idx);
  if (!ValueAtIndex)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Null existingNetwork", "WiFiManagerUpdateNetworkForAutoJoinDisablementProperties")];
    }
LABEL_26:
    CFComparisonResult v18 = v14;
LABEL_27:
    return 0;
  }
  if (sub_10001EBB4((uint64_t)ValueAtIndex) && !sub_10001EBB4((uint64_t)a2))
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Auto join disabled by %@", "WiFiManagerUpdateNetworkForAutoJoinDisablementProperties", a3, v19 message];
    }
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v11 = CFDateCreate(kCFAllocatorDefault, Current);
    if (v11)
    {
      CFDateRef v12 = v11;
      sub_10001C6A4((uint64_t)a2, @"networkDisabledTimestamp", v11);
      CFRelease(v12);
    }
    sub_10001C6A4((uint64_t)a2, @"networkDisabledClientName", a3);
    sub_10001C6A4((uint64_t)a2, @"networkDisabledReason", @"ByClient");
  }
  return 1;
}

void sub_10009D1EC(uint64_t a1)
{
  sub_1000455D4(*(void *)(*(void *)(a1 + 32) + 1304), *(void *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFStringRef v2 = *(const void **)(*(void *)(a1 + 32) + 1304);

  CFRelease(v2);
}

void sub_10009D238(uint64_t a1)
{
  sub_1000454D8(*(void *)(*(void *)(a1 + 32) + 1304), *(void *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFStringRef v2 = *(const void **)(*(void *)(a1 + 32) + 1304);

  CFRelease(v2);
}

uint64_t sub_10009D284(void *a1, const __CFString *a2, const void *a3, const void *a4)
{
  CFIndex idx = -1;
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager" : @"WiFiManagerUpdateNetworksGuessingFailureCount"];
    }
    goto LABEL_32;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null network" : @"WiFiManagerUpdateNetworksGuessingFailureCount"];
    }
    goto LABEL_32;
  }
  if (!a3)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null bssid", "WiFiManagerUpdateNetworksGuessingFailureCount")];
    }
    goto LABEL_32;
  }
  CFIndex v8 = sub_1000C5D34(a2);
  if (!v8)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: null known5GhzNetwork", "WiFiManagerUpdateNetworksGuessingFailureCount"];
    }
LABEL_32:
    return 0;
  }
  unsigned int v9 = v8;
  CFRange v10 = (const __SCPreferences *)sub_10000D9F0(a1, @"List of known networks");
  if (!v10)
  {
LABEL_36:
    CFRelease(v9);
    return 0;
  }
  CFDateRef v11 = v10;
  if (!sub_10005A1E0(v10))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: failed to get prefs lock", "WiFiManagerUpdateNetworksGuessingFailureCount"];
    }
    goto LABEL_36;
  }
  CFDateRef v12 = (void *)sub_10000D990((uint64_t)"WiFiManagerUpdateNetworksGuessingFailureCount");
  CFArrayRef v13 = (const __CFArray *)sub_1000830B8((uint64_t)a1);
  if (v13)
  {
    CFArrayRef v14 = v13;
    sub_10009BC5C(v13, v9, &idx);
    if (idx == -1)
    {
      if (qword_10027DD68) {
        [(id)qword_10027DD68 WFLog:3, "%s: %@ does not  exist", "WiFiManagerUpdateNetworksGuessingFailureCount", a2 message];
      }
    }
    else
    {
      uint64_t v15 = v12;
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v14, idx);
      if (ValueAtIndex)
      {
        uint64_t v17 = (uint64_t)ValueAtIndex;
        CFDictionaryRef v18 = (const __CFDictionary *)sub_10001E404((uint64_t)ValueAtIndex, @"WiFiPreference2GhzGuessingAttemptsPerBSSID");
        if (v18) {
          MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v18);
        }
        else {
          MutableCFStringRef Copy = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        }
        unsigned int v20 = MutableCopy;
        if (MutableCopy)
        {
          if (CFDictionaryContainsKey(MutableCopy, a3)) {
            CFDictionaryReplaceValue(v20, a3, a4);
          }
          else {
            CFDictionaryAddValue(v20, a3, a4);
          }
          uint64_t v21 = sub_10001961C((uint64_t)kCFAllocatorDefault, v17);
          sub_10001C6A4((uint64_t)v21, @"WiFiPreference2GhzGuessingAttemptsPerBSSID", v20);
          CFArrayRemoveValueAtIndex(v14, idx);
          CFArrayInsertValueAtIndex(v14, idx, v21);
          uint64_t v22 = sub_100094834((uint64_t)a1, v14);
          sub_100093410((uint64_t)a1, (CFDictionaryRef *)v21, 0);
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"%s: Null guessingAttemptPerBssidDict" : @"WiFiManagerUpdateNetworksGuessingFailureCount"];
          }
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          unsigned int v20 = 0;
        }
        CFDateRef v12 = v15;
        goto LABEL_19;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Null existingNetwork", "WiFiManagerUpdateNetworksGuessingFailureCount", v28);
      }
    }
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  unsigned int v20 = 0;
LABEL_19:
  sub_10005A29C(v11, v22);

  CFRelease(v9);
  if (v21) {
    CFRelease(v21);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v22;
}

uint64_t sub_10009D66C(uint64_t a1, void *a2, void *a3, const void *a4)
{
  CFIndex idx = -1;
  CFIndex v20 = -1;
  if (!a1)
  {
    CFTypeID v16 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_20;
    }
    uint64_t v17 = "%s: null manager";
LABEL_19:
    [v16 WFLog:3 message:v17 WiFiManagerSetNetworkProperty:v18];
    goto LABEL_20;
  }
  if (!a2)
  {
    CFTypeID v16 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_20;
    }
    uint64_t v17 = "%s: null network";
    goto LABEL_19;
  }
  CFArrayRef v8 = (const __CFArray *)sub_1000830B8(a1);
  if (!v8)
  {
    CFTypeID v16 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_20;
    }
    uint64_t v17 = "%s: null networks";
    goto LABEL_19;
  }
  CFArrayRef v9 = v8;
  sub_1000945D4(*(_DWORD *)(a1 + 304), v8, a2, &idx, &v20);
  if (idx == -1)
  {
    CFTypeID v16 = (void *)qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_20;
    }
    CFDictionaryRef v18 = a2;
    uint64_t v17 = "%s: %@ does not  exist";
    goto LABEL_19;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v9, idx);
  if (!ValueAtIndex)
  {
    CFTypeID v16 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      uint64_t v17 = "%s: null existingNetwork";
      goto LABEL_19;
    }
LABEL_20:
    return 0;
  }
  CFDateRef v11 = sub_10001961C((uint64_t)kCFAllocatorDefault, (uint64_t)ValueAtIndex);
  if (!v11)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null networkCopy" : @"WiFiManagerSetNetworkProperty" : v18];
    }
    goto LABEL_20;
  }
  CFDateRef v12 = v11;
  sub_10001C6A4((uint64_t)v11, a3, a4);
  uint64_t v13 = sub_10009B1AC(a1, v12, 1u);
  CFRelease(v12);
  return v13;
}

uint64_t sub_10009D880(uint64_t a1, void *a2)
{
  id v4 = (void *)sub_10000D990((uint64_t)"WiFiManagerMergeKnownNetworksToList");
  if (!a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null manager", @"WiFiManagerMergeKnownNetworksToList"];
    }
    uint64_t v47 = v46;
    goto LABEL_89;
  }
  if (!a2)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: null path", @"WiFiManagerMergeKnownNetworksToList"];
    }
    uint64_t v47 = v5;
LABEL_89:
    uint64_t v35 = 0;
    id v6 = 0;
    goto LABEL_82;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "<%s> Merging known networks to backup file '%@'", "WiFiManagerMergeKnownNetworksToList", a2 message];
  }
  id v6 = [+[NSDictionary dictionaryWithContentsOfFile:a2] mutableCopy];
  if (v6)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "<%s> Backup file contents: %@", "WiFiManagerMergeKnownNetworksToList", v6 message];
    }
  }
  else
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:4, "<%s> Backup file at specified path does not exist '%@'", "WiFiManagerMergeKnownNetworksToList", a2 message];
    }
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
  }
  if (([a2 hasSuffix:@"com.apple.wifi.plist"] & 1) != 0
    || [a2 hasSuffix:@"com.apple.wifi-networks.plist"])
  {
    CFArrayRef v8 = (const __CFArray *)[v6 objectForKey:@"List of known networks"];
    if (v8)
    {
      CFArrayRef v9 = sub_10005A4C4(v8);
      goto LABEL_18;
    }
  }
  else if ([a2 hasSuffix:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@.plist", CWFKnownNetworksStoreIdentifier)])
  {
    CFArrayRef v9 = sub_10009DFC0(v6);
LABEL_18:
    CFArrayRef Mutable = v9;
    if (v9) {
      goto LABEL_20;
    }
  }
  CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
LABEL_20:
  CFAbsoluteTime v48 = a2;
  CFArrayRef v50 = v4;
  if (sub_1000233A8((void *)a1))
  {
    CFDateRef v11 = sub_10009DFC0([*(id *)(a1 + 1104) dictionaryRepresentation]);
    goto LABEL_24;
  }
  sub_100004058(a1, 1, 1, 1);
  SCPreferencesSynchronize(*(SCPreferencesRef *)(a1 + 1080));
  CFArrayRef v12 = sub_10000D934((void *)a1, @"List of known networks");
  if (v12)
  {
    CFDateRef v11 = sub_10005A4C4(v12);
LABEL_24:
    CFArrayRef v13 = v11;
    if (v11) {
      goto LABEL_26;
    }
  }
  CFArrayRef v13 = CFArrayCreate(kCFAllocatorDefault, 0, 0, &kCFTypeArrayCallBacks);
LABEL_26:
  CFIndex Count = CFArrayGetCount(v13);
  if (!Count || (uint64_t v15 = Count, range = CFArrayGetCount(Mutable), v15 < 1))
  {
LABEL_58:
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"<%s> No new networks found in known networks list" arguments:@"WiFiManagerMergeKnownNetworksToList"];
    }
    uint64_t v35 = 1;
    id v4 = v50;
    goto LABEL_78;
  }
  CFIndex v16 = 0;
  char v17 = 1;
  CFArrayRef v51 = v13;
  while (2)
  {
    char v49 = v17;
    CFIndex v18 = v16;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v13, v18);
      if (ValueAtIndex) {
        break;
      }
LABEL_51:
      if (v15 == ++v18)
      {
        if (v49) {
          goto LABEL_58;
        }
        goto LABEL_61;
      }
    }
    CFIndex v20 = ValueAtIndex;
    uint64_t v21 = sub_1000C99D8((uint64_t)ValueAtIndex, 0);
    uint64_t v22 = sub_1000C99D8((uint64_t)v20, 1);
    int v23 = sub_10001E404((uint64_t)v20, @"prevJoined");
    v53.CFIndex location = 0;
    v53.CFIndex length = range;
    FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(Mutable, v53, v20);
    if (FirstIndexOfValue != -1)
    {
      uint64_t v25 = CFArrayGetValueAtIndex(Mutable, FirstIndexOfValue);
      if (v25)
      {
        id v26 = v25;
        if (v21)
        {
          CFDateRef v27 = (const __CFDate *)sub_1000C99D8((uint64_t)v25, 0);
          if (!v27 || CFDateCompare((CFDateRef)v21, v27, 0) == kCFCompareGreaterThan)
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: found newer auto-join date %@ for network %@", "__MergeNetworkLists", v21, sub_10001A43C(v20) message];
            }
            sub_1000C995C(v26, 0, v21);
            CFArrayRef v13 = v51;
          }
        }
        if (v22)
        {
          CFDateRef v29 = (const __CFDate *)sub_1000C99D8((uint64_t)v26, 1);
          if (!v29 || CFDateCompare((CFDateRef)v22, v29, 0) == kCFCompareGreaterThan)
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: found newer last-join date %@ for network %@", "__MergeNetworkLists", v22, sub_10001A43C(v20) message];
            }
            sub_1000C995C(v26, 1, v22);
            CFArrayRef v13 = v51;
          }
        }
        if (v23)
        {
          CFDateRef v31 = (const __CFDate *)sub_10001E404((uint64_t)v26, @"prevJoined");
          if (!v31 || CFDateCompare((CFDateRef)v23, v31, 0) == kCFCompareGreaterThan)
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s: found newer prev-join date %@ for network %@", "__MergeNetworkLists", v23, sub_10001A43C(v20) message];
            }
            sub_10001C6A4((uint64_t)v26, @"prevJoined", v23);
          }
        }
      }
      goto LABEL_51;
    }
    CFArrayAppendValue(Mutable, v20);
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: added network %@ to the list", "__MergeNetworkLists", sub_10001A43C(v20) message];
    }
    char v17 = 0;
    CFIndex v16 = v18 + 1;
    if (v15 - 1 != v18) {
      continue;
    }
    break;
  }
LABEL_61:
  if (([v48 hasSuffix:@"com.apple.wifi.plist"] & 1) != 0
    || ([v48 hasSuffix:@"com.apple.wifi-networks.plist"] & 1) != 0)
  {
    uint64_t v36 = sub_10005A3FC(Mutable, 1);
    id v4 = v50;
    if (v36)
    {
      uint64_t v37 = v36;
      [v6 setObject:v36 forKey:@"List of known networks"];
      CFRelease(v37);
    }
  }
  else
  {
    id v4 = v50;
    if (CFArrayGetCount(Mutable) >= 1)
    {
      CFIndex v38 = 0;
      do
      {
        unsigned int v39 = (CFDictionaryRef *)CFArrayGetValueAtIndex(Mutable, v38);
        if (v39)
        {
          unsigned int v40 = sub_10001CECC(v39);
          if (v40)
          {
            unsigned int v41 = v40;
            id v42 = [v40 identifier];
            id v43 = [v41 externalForm];
            if (v42 && v43) {
              [v6 setObject:v43 forKey:v42];
            }
          }
        }
        ++v38;
      }
      while (CFArrayGetCount(Mutable) > v38);
    }
  }
  uint64_t v35 = (uint64_t)[v6 writeToFile:v48 atomically:1];
  if (qword_10027DD68)
  {
    unsigned int v44 = "FAILED to";
    if (v35) {
      unsigned int v44 = "SUCCEEDED to";
    }
    [(id)qword_10027DD68 WFLog:4, "<%s> %s write backup file contents: %@", "WiFiManagerMergeKnownNetworksToList", v44, v6 message];
  }
LABEL_78:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v13) {
    CFRelease(v13);
  }
LABEL_82:

  return v35;
}

__CFArray *sub_10009DFC0(void *a1)
{
  if (a1)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    if (Mutable)
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      id v4 = [a1 allValues];
      id v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v5)
      {
        id v6 = v5;
        uint64_t v7 = *(void *)v16;
        do
        {
          CFArrayRef v8 = 0;
          do
          {
            if (*(void *)v16 != v7) {
              objc_enumerationMutation(v4);
            }
            uint64_t v9 = *(void *)(*((void *)&v15 + 1) + 8 * (void)v8);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v10 = [objc_alloc((Class)CWFNetworkProfile) initWithExternalForm:v9];
              if (v10)
              {
                CFDateRef v11 = v10;
                CFArrayRef v12 = sub_1000CFEE8(v10, 0);
                if (v12)
                {
                  CFArrayRef v13 = v12;
                  CFArrayAppendValue(Mutable, v12);
                  CFRelease(v13);
                }
              }
            }
            CFArrayRef v8 = (char *)v8 + 1;
          }
          while (v6 != v8);
          id v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }
        while (v6);
      }
    }
  }
  else
  {
    CFArrayRef Mutable = 0;
  }
  return Mutable;
}

uint64_t sub_10009E15C(uint64_t a1, const __CFString *a2, char a3, char a4)
{
  CFArrayRef v8 = sub_10000500C((CFArrayRef)a1);
  CFArrayRef v9 = v8;
  if (a2 && v8)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v8, 0);
    if (CFStringCompare(a2, &stru_100248240, 0)) {
      CFStringRef v11 = a2;
    }
    else {
      CFStringRef v11 = @"XZ";
    }
    if (ValueAtIndex)
    {
      uint64_t v12 = sub_10010FDAC((uint64_t)ValueAtIndex, v11, a3);
      if (v12)
      {
        uint64_t v13 = sub_10010FE4C((uint64_t)ValueAtIndex);
        if (*(_DWORD *)(a1 + 2016) != v13)
        {
          uint64_t v14 = v13;
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "WiFiMC : band support changed. Before : %d, after : %d", *(unsigned int *)(a1 + 2016), v14);
          }
          *(_DWORD *)(a1 + 2016) = v14;
          sub_100091DB4((void *)a1, @"WiFiCountryBandSupportKey", v14, 1);
        }
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    goto LABEL_15;
  }
  uint64_t v12 = 0;
  CFStringRef v11 = a2;
  if (v8) {
LABEL_15:
  }
    CFRelease(v9);
  if (qword_10027DD68)
  {
    long long v17 = "succeeded";
    if (!v12) {
      long long v17 = "failed";
    }
    [(id)qword_10027DD68 WFLog:3, "%s: <%@> %s", "WiFiManagerSetLocale", v11, v17 message];
  }
  if (v12 == 1)
  {
    *(unsigned char *)(a1 + 2012) = a4;
    sub_100185238(*(void **)(a1 + 1432), (uint64_t)a2);
  }
  return v12;
}

BOOL sub_10009E30C(unsigned int *a1, uint64_t a2)
{
  CFArrayRef v4 = sub_10000500C((CFArrayRef)a1);
  CFArrayRef v5 = v4;
  if (a2 && v4)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v4, 0);
    if (ValueAtIndex)
    {
      uint64_t v7 = (uint64_t)ValueAtIndex;
      BOOL v8 = sub_10010FE28((uint64_t)ValueAtIndex);
      if (v8)
      {
        uint64_t v9 = sub_10010FE4C(v7);
        if (a1[504] != v9)
        {
          uint64_t v10 = v9;
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:message:3, @"WiFiMC : band support changed. Before : %d, after : %d", a1[504], v10];
          }
          a1[504] = v10;
          sub_100091DB4(a1, @"WiFiCountryBandSupportKey", v10, 1);
        }
      }
    }
    else
    {
      BOOL v8 = 0;
    }
    goto LABEL_12;
  }
  BOOL v8 = 0;
  if (v4) {
LABEL_12:
  }
    CFRelease(v5);
  if (qword_10027DD68)
  {
    uint64_t v13 = "succeeded";
    if (!v8) {
      uint64_t v13 = "failed";
    }
    [(id)qword_10027DD68 WFLog:3, "%s: <%@> %s", "WiFiManagerGetLocale", a2, v13 message];
  }
  return v8;
}

uint64_t sub_10009E464(uint64_t result)
{
  if (result) {
    LOBYTE(result) = [*(id *)(result + 192) getLocaleSource];
  }
  return result;
}

void sub_10009E48C(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: Received companion based country code: %@, was %@", "WiFiManagerSetCompanionCountryCode", a2, *(void *)(a1 + 2024) message];
    }
    CFArrayRef v5 = *(const void **)(a1 + 2024);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 2024) = 0;
    }
    if (a2) {
      *(void *)(a1 + 2024) = CFRetain(a2);
    }
  }
}

uint64_t sub_10009E52C(uint64_t result, CFMutableStringRef theString)
{
  if (result)
  {
    CFStringRef v2 = *(const __CFString **)(result + 2024);
    if (v2) {
      CFStringAppend(theString, v2);
    }
    return 1;
  }
  return result;
}

uint64_t sub_10009E560(uint64_t a1, __CFString *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (!a1) {
    return 0;
  }
  double v5 = Current;
  CFDictionaryRef v6 = sub_10009E768();
  if (v6)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(v6))
    {
      CFDateRef Value = (const __CFDate *)CFDictionaryGetValue(v6, @"countryCodeUserDefaultDate");
      if (Value)
      {
        double AbsoluteTime = CFDateGetAbsoluteTime(Value);
        if (v5 <= AbsoluteTime)
        {
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFiCC : last used time is [%f]", "WiFiManagerGetCountryCodeFromUserDefaults", *(void *)&AbsoluteTime);
          }
        }
        else
        {
          if (v5 - AbsoluteTime < 5400.0)
          {
            uint64_t v10 = (uint64_t)CFDictionaryGetValue(v6, @"countryCodeUserDefault");
            if (!v10)
            {
LABEL_15:
              CFRelease(v6);
              return v10;
            }
            CFStringAppend(a2, (CFStringRef)v10);
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s WiFiCC : Getting Country Code from user defaults : [%@]", "WiFiManagerGetCountryCodeFromUserDefaults", v10 message];
            }
            uint64_t v10 = 1;
LABEL_14:
            goto LABEL_15;
          }
          if (qword_10027DD68) {
            [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s WiFiCC : Country Code Data too old. Not using.", "WiFiManagerGetCountryCodeFromUserDefaults", v14);
          }
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: WiFiCC : last used date is NULL", "WiFiManagerGetCountryCodeFromUserDefaults", v14];
        }
      }
      uint64_t v10 = 0;
      goto LABEL_14;
    }
  }
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:3 message:@"%s: WiFiCC : No Country Code info present in user defaults" : @"WiFiManagerGetCountryCodeFromUserDefaults"];
  }
  uint64_t v10 = 0;
  uint64_t result = 0;
  if (v6) {
    goto LABEL_15;
  }
  return result;
}

CFDictionaryRef sub_10009E768()
{
  CFStringRef v0 = +[NSUserDefaults standardUserDefaults];
  if (!v0) {
    return 0;
  }
  CFTypeRef v1 = [(NSUserDefaults *)v0 dictionaryForKey:@"countryCodeUserDefaultData"];
  if (!v1) {
    return 0;
  }
  CFStringRef v2 = v1;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(v2)) {
    return 0;
  }

  return CFDictionaryCreateCopy(kCFAllocatorDefault, (CFDictionaryRef)v2);
}

CFStringRef sub_10009E7F0()
{
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  CFStringRef v1 = CFStringCreateWithCString(kCFAllocatorDefault, "WiFiManager-1800.35 Nov 14 2024 23:01:24", SystemEncoding);
  if (!v1)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3 message:"failed to format build info string"];
    }
  }
  return v1;
}

CFMutableArrayRef sub_10009E86C(uint64_t a1)
{
  if (!*(void *)(a1 + 136)) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (Mutable) {
    CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_10009E8E0, Mutable);
  }
  return Mutable;
}

void sub_10009E8E0(uint64_t a1, __CFArray *a2)
{
  if (a1)
  {
    if (a2)
    {
      CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
      if (Mutable)
      {
        double v5 = Mutable;
        unsigned int v6 = sub_10005B6C8(a1);
        if (v6 > 2) {
          CFStringRef v7 = @"U";
        }
        else {
          CFStringRef v7 = off_100240E18[v6];
        }
        CFStringAppend(v5, v7);
        uint64_t v8 = sub_10005B6E8(a1);
        CFStringAppendFormat(v5, 0, @": [%d]", v8);
        uint64_t v9 = sub_100016E18(a1);
        CFStringAppendFormat(v5, 0, @"%@: ", v9);
        CFStringAppend(v5, @"{");
        int v10 = sub_10005D168(a1);
        sub_1000BC1F4(v10, v5);
        CFStringAppend(v5, @" } ");
        CFArrayRef v11 = (const __CFArray *)sub_10005B6D8(a1);
        CFArrayRef v12 = sub_10000500C(v11);
        if (v12)
        {
          CFArrayRef v13 = v12;
          CFIndex Count = CFArrayGetCount(v12);
          if (Count >= 1)
          {
            CFIndex v15 = Count;
            for (CFIndex i = 0; i != v15; ++i)
            {
              CFStringAppend(v5, @"{");
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v13, i);
              uint64_t v18 = sub_100016CD4(a1, (uint64_t)ValueAtIndex);
              if (v18) {
                sub_1000BC1F4(v18, v5);
              }
              CFStringAppend(v5, @" } ");
            }
          }
          CFArrayAppendValue(a2, v5);
          CFRelease(v5);
          CFIndex v19 = v13;
        }
        else
        {
          CFArrayAppendValue(a2, v5);
          CFIndex v19 = v5;
        }
        CFRelease(v19);
        return;
      }
      if (qword_10027DD68) {
        [qword_10027DD68 WFLog:3, "%s: null description", "__WiFiManagerAddNameToArray"];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: null names", @"__WiFiManagerAddNameToArray"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null client" args:("__WiFiManagerAddNameToArray")];
    }
  }
}

uint64_t sub_10009EB70(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 2012);
  }
  return result;
}

__CFDictionary *sub_10009EB7C(uint64_t a1)
{
  if (!*(void *)(a1 + 192))
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Null localeManagerUser", "WiFiManagerCopyLocaleStats"];
    }
    goto LABEL_14;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null localeStatsDict", @"WiFiManagerCopyLocaleStats"];
    }
LABEL_14:
    return 0;
  }
  CFArrayRef v3 = Mutable;
  unsigned int valuePtr = [*(id *)(a1 + 192) getLocaleSource];
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (v4)
  {
    CFNumberRef v5 = v4;
    CFDictionaryAddValue(v3, @"LocaleSource", v4);
    CFRelease(v5);
  }
  [*(id *)(a1 + 192) getLocaleLastUpdatedTime];
  uint64_t v12 = v6;
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &v12);
  if (v7)
  {
    CFNumberRef v8 = v7;
    CFDictionaryAddValue(v3, @"LocaleLastTimeUpdated", v7);
    CFRelease(v8);
  }
  id v9 = [*(id *)(a1 + 192) getLocaleCountryCode];
  if (v9) {
    CFDictionaryAddValue(v3, @"LocaleCountryCode", v9);
  }
  return v3;
}

uint64_t sub_10009ED08(uint64_t a1)
{
  v3[0] = a1;
  v3[1] = 0xAAAAAAAA0000006BLL;
  void v3[2] = 0;
  uint64_t v4 = 0;
  if (a1)
  {
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v3);
    return v4;
  }
  else
  {
    return 0;
  }
}

void sub_10009ED68(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v2[0] = a1;
    v2[1] = 0xAAAAAAAA00000036;
    v2[2] = a2;
    void v2[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  }
}

void sub_10009EDC0(uint64_t a1, int a2)
{
  int v3 = a2;
  if (a1)
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000037;
    void context[2] = &v3;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  }
}

void sub_10009EE1C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v2[0] = a1;
    v2[1] = 0xAAAAAAAA00000040;
    v2[2] = a2;
    void v2[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
  }
}

void sub_10009EE74(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"airplay";
  values[1] = kCFBooleanTrue;
  CFDictionaryRef v2 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041;
    void context[2] = v2;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    CFRelease(v3);
  }
}

void sub_10009EF6C(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"airplay";
  values[1] = kCFBooleanFalse;
  CFDictionaryRef v2 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041;
    void context[2] = v2;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    CFRelease(v3);
  }
}

void sub_10009F064(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"WiFiCallingUUID";
  values[1] = kCFBooleanTrue;
  CFDictionaryRef v2 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041;
    void context[2] = v2;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    CFRelease(v3);
  }
}

void sub_10009F15C(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"WiFiCallingUUID";
  values[1] = kCFBooleanFalse;
  CFDictionaryRef v2 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041;
    void context[2] = v2;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    CFRelease(v3);
  }
}

void sub_10009F254(uint64_t a1)
{
  context[0] = a1;
  context[1] = 0xAAAAAAAA00000073;
  void context[2] = 0;
  void context[3] = 0;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  if (&_WiFiCloudSyncEngineCreate) {
    BOOL v3 = qword_10027DD90 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v4 = *(const void **)(a1 + 1304);
    if (v4)
    {
      CFRetain(v4);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10009F39C;
      block[3] = &unk_10023EAF8;
      void block[4] = a1;
      dispatch_async((dispatch_queue_t)qword_10027DD90, block);
    }
  }
  CFRetain((CFTypeRef)a1);
  CFNumberRef v5 = *(NSObject **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10009F4B8;
  v6[3] = &unk_10023EAF8;
  void v6[4] = a1;
  dispatch_async(v5, v6);
}

void sub_10009F39C(uint64_t a1)
{
  uint64_t v2 = WiFiCloudSyncEngineCopyCompleteKVS();
  if (v2)
  {
    BOOL v3 = (void *)v2;
    uint64_t v4 = [[(NSURL *)[+[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@"group.com.apple.wifi.logs"] URLByAppendingPathComponent:@"com.apple.wifi.syncable-networks.legacy.plist"] path];
    if (v4)
    {
      CFNumberRef v5 = v4;
      [+[NSFileManager defaultManager] removeItemAtPath:v4 error:0];
      [v3 writeToFile:v5 atomically:1];
    }
  }
  uint64_t v6 = WiFiCloudSyncEngineCopyCompleteKVS();
  if (v6)
  {
    CFNumberRef v7 = (void *)v6;
    CFNumberRef v8 = [[(NSURL *)[+[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@"group.com.apple.wifi.logs"] URLByAppendingPathComponent:@"com.apple.wifi.syncable-networks.plist"] path];
    if (v8)
    {
      id v9 = v8;
      [+[NSFileManager defaultManager] removeItemAtPath:v8 error:0];
      [v7 writeToFile:v9 atomically:1];
    }
  }
  int v10 = *(const void **)(*(void *)(a1 + 32) + 1304);

  CFRelease(v10);
}

void sub_10009F4B8(uint64_t a1)
{
  CFDictionaryRef v2 = sub_10009F9C4(*(void **)(a1 + 32), 0);
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: --- Custom Network Settings start", "WiFiManagerDumpLogBufferAsync_block_invoke_2"];
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: %@", "WiFiManagerDumpLogBufferAsync_block_invoke_2", v2 message];
  }
  CFDictionaryRef cf = v2;
  if (qword_10027DD68) {
    [((id)qword_10027DD68) WFLog:message:3, "%s: --- Custom Network Settings end", "WiFiManagerDumpLogBufferAsync_block_invoke_2"];
  }
  uint64_t v44 = a1;
  uint64_t v6 = *(void *)(a1 + 32);
  +[NSDate timeIntervalSinceReferenceDate];
  double v9 = v8;
  id v10 = +[NSMutableArray array];
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id v11 = [[objc_msgSend(*(id *)(v6 + 1104), "dictionaryRepresentation") allValues];
  id v12 = [v11 countByEnumeratingWithState:&v49 objects:v54 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v50;
    do
    {
      for (CFIndex i = 0; i != v13; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v50 != v14) {
          objc_enumerationMutation(v11);
        }
        uint64_t v16 = *(void *)(*((void *)&v49 + 1) + 8 * i);
        id v18 = [objc_alloc((Class)CWFNetworkProfile) initWithExternalForm:v16];
        if (v18)
        {
          CFIndex v19 = v18;
          if ([v18 lastJoinedAt])
          {
            [objc_msgSend(v19, "lastJoinedAt") timeIntervalSinceReferenceDate];
            if (v9 - v20 <= 86400.0) {
              [v10 addObject:v19];
            }
          }
        }
      }
      id v13 = [v11 countByEnumeratingWithState:&v49 objects:v54 count:16];
    }
    while (v13);
  }
  id v21 = +[NSMutableDictionary dictionary];
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id v22 = [v10 countByEnumeratingWithState:&v45 objects:v53 count:16];
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = *(void *)v46;
    do
    {
      for (CFIndex j = 0; j != v23; CFIndex j = (char *)j + 1)
      {
        if (*(void *)v46 != v24) {
          objc_enumerationMutation(v10);
        }
        [v21 setObject:objc_msgSend(*(id *)(*((void *)&v45 + 1) + 8 * (void)j), "externalForm") forKeyedSubscript:objc_msgSend(*(id *)(*((void *)&v45 + 1) + 8 * (void)j), "identifier")];
      }
      id v23 = [v10 countByEnumeratingWithState:&v45 objects:v53 count:16];
    }
    while (v23);
  }
  uint64_t v26 = CWFConvertPropertyListToJSON();
  if (v26)
  {
    CFDateRef v27 = +[NSJSONSerialization dataWithJSONObject:v26 options:0 error:0];
    if (v27)
    {
      uint64_t v28 = v27;
      CFDateRef v29 = [[(NSURL *)[+[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@"group.com.apple.wifi.logs"] URLByAppendingPathComponent:@"com.apple.wifi.recent-networks.json"] path];
      if (v29)
      {
        BOOL v30 = v29;
        [+[NSFileManager defaultManager] removeItemAtPath:v29 error:0];
        [(NSData *)v28 writeToFile:v30 atomically:1];
      }
    }
  }
  uint64_t v31 = *(void *)(v44 + 32);
  if (!v31)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager" args:("__WiFiManagerDumpHS20Networks")];
    }
    goto LABEL_51;
  }
  CFArrayRef v32 = *(const __CFArray **)(v31 + 216);
  if (!v32)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager->networks"];
    }
LABEL_51:
    goto LABEL_44;
  }
  CFIndex Count = CFArrayGetCount(v32);
  if (Count >= 1)
  {
    CFIndex v34 = Count;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s: --- HS 2.0 Networks", "__WiFiManagerDumpHS20Networks"];
    }
    for (CFIndex k = 0; k != v34; ++k)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v31 + 216), k);
      if (sub_10001BB2C((BOOL)ValueAtIndex))
      {
        CFMutableDictionaryRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
        if (Mutable)
        {
          unsigned int v39 = Mutable;
          sub_1000CC628((uint64_t)ValueAtIndex, Mutable);
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:3, "%s: HS20 Account Info:%@", "__WiFiManagerDumpHS20Networks", v39 message];
          }
          CFRelease(v39);
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"%s: Could not allocate buffer for HS 2.0 info", @"__WiFiManagerDumpHS20Networks"];
          }
        }
      }
    }
  }
LABEL_44:
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(*(CFTypeRef *)(v44 + 32));
}

CFDictionaryRef sub_10009F9C4(void *a1, int a2)
{
  uint64_t v4 = +[NSUserDefaults standardUserDefaults];
  CFDictionaryRef v5 = [(NSUserDefaults *)v4 dictionaryForKey:@"Custom network settings"];
  if (!v5)
  {
    uint64_t v6 = sub_10000D934(a1, @"Custom network settings");
    if (v6)
    {
      [+[NSUserDefaults standardUserDefaults] setObject:v6 forKey:@"Custom network settings"];
      sub_100083E60(a1, @"Custom network settings", 0, a2);
      CFDictionaryRef v5 = [(NSUserDefaults *)v4 dictionaryForKey:@"Custom network settings"];
      if (!v5) {
        return 0;
      }
    }
    else
    {
      id v7 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"wifid"];
      if (!v7) {
        return 0;
      }
      double v8 = v7;
      id v9 = [v7 dictionaryForKey:@"Custom network settings"];
      if (v9)
      {
        id v10 = v9;
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:3, @"%s: found custom network settings list in legacy NSUserDefaults", @"__WiFiManagerCopyCustomNetworkSettingsFromUserDefaults"];
        }
        [+[NSUserDefaults standardUserDefaults] setObject:v10 forKey:@"Custom network settings"];
        CFDictionaryRef v5 = [(NSUserDefaults *)v4 dictionaryForKey:@"Custom network settings"];
      }
      else
      {
        CFDictionaryRef v5 = 0;
      }

      if (!v5) {
        return 0;
      }
    }
  }

  return CFDictionaryCreateCopy(kCFAllocatorDefault, v5);
}

void sub_10009FB54(uint64_t a1, CFDictionaryRef theDict)
{
  unsigned int valuePtr = 0;
  if (theDict)
  {
    if (a1)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"WiFiTestCommandType");
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
        MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
        if (MutableCopy)
        {
          CFMutableDictionaryRef v6 = MutableCopy;
          if (valuePtr < 0x65)
          {
            switch(valuePtr)
            {
              case 5u:
                id v7 = [(__CFDictionary *)MutableCopy objectForKeyedSubscript:@"builtInReceiver"];
                id v8 = [(__CFDictionary *)v6 objectForKeyedSubscript:@"cellularTx"];
                id v9 = [(__CFDictionary *)v6 objectForKeyedSubscript:@"shortCellularTx"];
                if (v7)
                {
                  unsigned int v10 = [v7 intValue];
                  if (v10 == 1) {
                    int v11 = 1;
                  }
                  else {
                    int v11 = -1;
                  }
                  if (!v10) {
                    int v11 = 0;
                  }
                  *(_DWORD *)(a1 + 1468) = v11;
                }
                if (v8)
                {
                  unsigned int v12 = [v8 intValue];
                  if (v12 == 1) {
                    int v13 = 1;
                  }
                  else {
                    int v13 = -1;
                  }
                  if (!v12) {
                    int v13 = 0;
                  }
                  *(_DWORD *)(a1 + 1472) = v13;
                }
                if (v9)
                {
                  unsigned int v14 = [v9 intValue];
                  if (v14 == 1) {
                    int v15 = 1;
                  }
                  else {
                    int v15 = -1;
                  }
                  if (!v14) {
                    int v15 = 0;
                  }
                  *(_DWORD *)(a1 + 1476) = v15;
                }
                uint64_t v16 = *(NSObject **)(a1 + 32);
                uint64_t context = _NSConcreteStackBlock;
                unint64_t v24 = 3221225472;
                uint64_t v25 = sub_1000BD4C4;
                uint64_t v26 = (uint64_t)&unk_10023EAF8;
                uint64_t v27 = a1;
                dispatch_async(v16, &context);
                break;
              case 2u:
                CFBooleanRef v17 = (CFBooleanRef)CFDictionaryGetValue(MutableCopy, @"wowStateOverride");
                if (v17)
                {
                  int v18 = v17 == kCFBooleanTrue;
                  if (*(unsigned __int8 *)(a1 + 1163) != v18)
                  {
                    *(unsigned char *)(a1 + 1163) = v18;
                    sub_100090CC0(a1, 0, *(unsigned __int8 *)(a1 + 1162), 2);
                  }
                }
                if (qword_10027DD68) {
                  [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WoW Parameters: WoWEnable %d WoWOverrideState %d lpasEnable %d", "__WiFiManagerSetWoWTestParams", *(unsigned __int8 *)(a1 + 1160), *(unsigned __int8 *)(a1 + 1163), *(unsigned __int8 *)(a1 + 1162)];
                }
                break;
              case 1u:
                sub_10009317C((void *)a1, @"LocaleTestParams", MutableCopy);
                sub_10008C950(a1, v6);
                break;
            }
          }
          else
          {
            uint64_t context = (void **)a1;
            unint64_t v24 = 0xAAAAAAAA00000038;
            uint64_t v25 = (void (*)(uint64_t))MutableCopy;
            uint64_t v26 = 1;
            CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
          }
          CFRelease(v6);
        }
        else
        {
          if (qword_10027DD68) {
            [((id)qword_10027DD68) WFLog:3 message:@"%s: null mutableTestParams" args:("WiFiManagerSetTestParams", NULL)];
          }
        }
        return;
      }
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: null cmdNum", "WiFiManagerSetTestParams")];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager" : @"WiFiManagerSetTestParams"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null testParams" arguments:new NSArray(@"WiFiManagerSetTestParams")];
    }
  }
}

void *sub_10009FEF4(uint64_t a1, const __CFDictionary *a2)
{
  unsigned int valuePtr = 0;
  if (a2)
  {
    if (a1)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"WiFiTestCommandType");
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
        MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, a2);
        if (MutableCopy)
        {
          CFMutableDictionaryRef v7 = MutableCopy;
          if (valuePtr >= 0x65)
          {
            uint64_t context = (void **)a1;
            unint64_t v42 = 0xAAAAAAAA00000038;
            id v43 = (intptr_t (*)(uint64_t, uint64_t))MutableCopy;
            uint64_t v44 = 1;
            CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
LABEL_82:
            id v9 = 0;
            goto LABEL_83;
          }
          if (valuePtr != 4)
          {
            if (valuePtr != 5) {
              goto LABEL_82;
            }
            id v8 = objc_alloc_init((Class)NSMutableDictionary);
            if (!v8)
            {
              if (qword_10027DD68) {
                [((id)qword_10027DD68) WFLog:4 message:@"%s: null params" args:("__WiFiManagerCopyDualPowerOverrideParams")];
              }
              goto LABEL_82;
            }
            id v9 = v8;
            unsigned int v10 = *(_DWORD *)(a1 + 1468) + 1;
            if (v10 <= 2) {
              [v8 setObject:off_100240E30[v10] forKeyedSubscript:@"builtInReceiver"];
            }
            unsigned int v11 = *(_DWORD *)(a1 + 1472) + 1;
            if (v11 <= 2) {
              [v9 setObject:off_100240E30[v11] forKeyedSubscript:@"cellularTx"];
            }
            int v12 = *(_DWORD *)(a1 + 1476);
            if (v12 == -1)
            {
              CFStringRef v13 = @"disabled";
            }
            else if (v12)
            {
              if (v12 != 1)
              {
LABEL_83:
                CFRelease(v7);
                goto LABEL_84;
              }
              CFStringRef v13 = @"on";
            }
            else
            {
              CFStringRef v13 = @"off";
            }
            [v9 setObject:v13 forKeyedSubscript:@"shortCellularTx"];
            goto LABEL_83;
          }
          uint64_t v47 = 0;
          long long v48 = &v47;
          uint64_t v49 = 0x2020000000;
          uint64_t v50 = 0;
          int v15 = dispatch_semaphore_create(0);
          if (!+[WiFiAnalyticsManager sharedWiFiAnalyticsManager])
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4, @"%s: sharedWiFiAnalyticsManager is nil", @"__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse"];
            }
            goto LABEL_44;
          }
          if (!objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "deviceAnalyticsClient"))
          {
            if (qword_10027DD68) {
              [((id)qword_10027DD68) WFLog:4 message:@"__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse: analyticsClient is nil"];
            }
            goto LABEL_44;
          }
          if ([(__CFDictionary *)v7 objectForKey:@"dump"])
          {
            id v16 = [[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") deviceAnalyticsClient];
            uint64_t context = _NSConcreteStackBlock;
            unint64_t v42 = 3221225472;
            id v43 = sub_1000BC40C;
            uint64_t v44 = (uint64_t)&unk_100240C60;
            long long v45 = v15;
            long long v46 = &v47;
            if (![v16 dumpDeviceAnalyticsToFileWithCompletion:&context]) {
              goto LABEL_45;
            }
            dispatch_time_t v17 = dispatch_time(0, 60000000000);
            if (!dispatch_semaphore_wait(v15, v17)) {
              goto LABEL_45;
            }
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4 message:"Gave up waiting to get Device Analytics Store Dump. Bailing"];
            }
          }
          else if ([(__CFDictionary *)v7 objectForKey:@"roamTriggerRssi"])
          {
            id v19 = [(__CFDictionary *)v7 objectForKey:@"roamTriggerRssi"];
            id v20 = [objc_alloc((Class)NSNumber) initWithInteger:[+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager") deviceAnalyticsClient] rssiRoamTriggerForBSS:[v19 objectForKey:@"bssid"] ssid:[v19 objectForKey:@"ssid"]];
            v48[3] = (uint64_t)v20;
            if (qword_10027DD68) {
              [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s RoamTrigger :%d", "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse", objc_msgSend((id)v48[3], "intValue"));
            }
          }
          else if ([(__CFDictionary *)v7 objectForKey:@"neighborChannels"])
          {
            id v21 = [(__CFDictionary *)v7 objectForKey:@"neighborChannels"];
            id v22 = [objc_msgSend(objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "deviceAnalyticsClient"), "neighborChannelsForBSS:ssid:", objc_msgSend(v21, "objectForKey:", @"bssid"), objc_msgSend(v21, "objectForKey:", @"ssid")];
            if (v22)
            {
              id v23 = [objc_alloc((Class)NSArray) initWithArray:v22];
              v48[3] = (uint64_t)v23;
            }
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s neighborChannelsForBSS :%@", "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse", v48[3] message];
            }
          }
          else if ([(__CFDictionary *)v7 objectForKey:@"neighborBSSIDs"])
          {
            id v24 = [(__CFDictionary *)v7 objectForKey:@"neighborBSSIDs"];
            id v25 = [objc_msgSend(objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "deviceAnalyticsClient"), "neighborsForBSS:ssid:", objc_msgSend(v24, "objectForKey:", @"bssid"), objc_msgSend(v24, "objectForKey:", @"ssid")];
            if (v25)
            {
              id v26 = [objc_alloc((Class)NSArray) initWithArray:v25];
              v48[3] = (uint64_t)v26;
            }
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s neighborsForBSS :%@", "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse", v48[3] message];
            }
          }
          else
          {
            if ([(__CFDictionary *)v7 objectForKey:@"resetIntervals"])
            {
              uint64_t v27 = +[NSNumber numberWithDouble:86400.0];
              uint64_t v28 = +[NSNumber numberWithDouble:4233600.0];
              CFDateRef v29 = +[NSNumber numberWithUnsignedLong:0];
              id v30 = 0;
            }
            else
            {
              uint64_t v27 = (NSNumber *)[(__CFDictionary *)v7 valueForKey:@"procIntervalSecs"];
              uint64_t v28 = (NSNumber *)[(__CFDictionary *)v7 valueForKey:@"ageOutIntervalSecs"];
              CFDateRef v29 = (NSNumber *)[(__CFDictionary *)v7 valueForKey:@"ageOutTestDaysDiff"];
              id v30 = [(__CFDictionary *)v7 valueForKey:@"roamSamples"];
            }
            if (v27 || v28 || v29)
            {
              id v31 = +[NSMutableDictionary dictionary];
              if (v27)
              {
                [(NSNumber *)v27 doubleValue];
                if (v32 < 0.0)
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:4 message:@"__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse: invalid procIntervalSecs"];
                  }
                  goto LABEL_44;
                }
                [v31 setObject:v27 forKey:@"WA_DEVICE_ANALYTICS_PROCESSING_INTERVAL"];
              }
              if (v28)
              {
                [(NSNumber *)v28 doubleValue];
                if (v33 < 0.0)
                {
                  if (qword_10027DD68) {
                    [((id)qword_10027DD68) WFLog:4 message:@"%s: invalid ageOutIntervalNum" args:("__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse", 0)];
                  }
                  goto LABEL_44;
                }
                [v31 setObject:v28 forKey:@"WA_DEVICE_ANALYTICS_AGE_OUT_INTERVAL"];
              }
              if (v29)
              {
                [(NSNumber *)v29 unsignedLongValue];
                [v31 setObject:v29 forKey:@"WA_DEVICE_ANALYTICS_CONFIG_AGE_OUT_TEST_DAYS_DIFF"];
              }
              if (v30)
              {
                [v30 unsignedLongValue];
                [v31 setObject:v30 forKey:@"WA_DEVICE_ANALYTICS_CONFIG_ROAM_SAMPLES"];
              }
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:3, "%s: Setting configuration: %s", "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse", -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@", v31), "UTF8String") message];
              }
              [+[WiFiManagerAnalytics sharedInstance] setDeviceAnalyticsConfiguration:v31];
              uint64_t v35 = +[WiFiManagerAnalytics sharedInstance];
              uint64_t context = _NSConcreteStackBlock;
              unint64_t v42 = 3221225472;
              id v43 = sub_1000BC4B4;
              uint64_t v44 = (uint64_t)&unk_100240C88;
              long long v45 = v15;
              long long v46 = &v47;
              [(WiFiManagerAnalytics *)v35 getDeviceAnalyticsConfigurationWithCompletion:&context];
              dispatch_time_t v36 = dispatch_time(0, 60000000000);
              if (!dispatch_semaphore_wait(v15, v36)) {
                goto LABEL_45;
              }
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:4 message:"Gave up waiting to getDeviceAnalyticsConfigurationWithCompletion. Bailing"];
              }
              goto LABEL_44;
            }
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:4, "%s: Invalid configuration %s", "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse", -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@", v7), "UTF8String") message];
            }
          }
LABEL_44:
LABEL_45:
          dispatch_release(v15);
          id v9 = (void *)v48[3];
          _Block_object_dispose(&v47, 8);
          goto LABEL_83;
        }
        if (qword_10027DD68) {
          [qword_10027DD68 WFLog:message:3, "%s: null mutableTestParams", "WiFiManagerSetTestParamsAndCopyResponse"];
        }
      }
      else
      {
        if (qword_10027DD68) {
          [((id)qword_10027DD68) WFLog:message:3, "%s: null cmdNum", "WiFiManagerSetTestParamsAndCopyResponse"];
        }
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3 message:@"%s: null manager" args:("WiFiManagerSetTestParamsAndCopyResponse")];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null testParams" args:("WiFiManagerSetTestParamsAndCopyResponse")];
    }
  }
  id v9 = 0;
LABEL_84:
  return v9;
}

void sub_1000A0920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A0968(CFArrayRef *a1, void *a2)
{
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Checking password and network status for %@", "WiFiManagerCheckForUnexpectedPasswordDelete", sub_10001A43C(a2) message];
  }
  if (CFArrayGetCount(a1[316]))
  {
    uint64_t v25 = qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_43;
    }
    CFIndex Count = CFArrayGetCount(a1[316]);
    id v26 = "%s: Already have remembered a network with a missing password, count: %ld";
LABEL_39:
    uint64_t v27 = (void *)v25;
LABEL_42:
    [v27 WFLog:3 message:v26, "WiFiManagerCheckForUnexpectedPasswordDelete", Count];
    goto LABEL_43;
  }
  if (!sub_1000C8798((uint64_t)a2))
  {
    uint64_t v25 = qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_43;
    }
    CFIndex Count = (CFIndex)sub_10001A43C(a2);
    id v26 = "%s: %@ does not require a password, disqualified from possible password-missing TTR";
    goto LABEL_39;
  }
  if (sub_10001FC1C((uint64_t)a2))
  {
    uint64_t v25 = qword_10027DD68;
    if (!qword_10027DD68) {
      goto LABEL_43;
    }
    CFIndex Count = (CFIndex)sub_10001A43C(a2);
    id v26 = "%s: %@ is an EAP network, disqualified from possible password-missing TTR";
    goto LABEL_39;
  }
  CFArrayRef v5 = sub_10000500C((CFArrayRef)a1);
  if (!v5)
  {
    uint64_t v27 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      id v26 = "%s: null device managers array";
      goto LABEL_42;
    }
LABEL_43:
    CFArrayRef v12 = 0;
    CFArrayRef v6 = 0;
    goto LABEL_21;
  }
  CFArrayRef v6 = v5;
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
  if (!ValueAtIndex)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3 message:@"%s: null device manager" args:("WiFiManagerCheckForUnexpectedPasswordDelete")];
    }
    goto LABEL_50;
  }
  uint64_t v8 = (uint64_t)ValueAtIndex;
  id v9 = (const void *)sub_10010A740((uint64_t)ValueAtIndex);
  if (!v9)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Most recently joined network is null", "WiFiManagerCheckForUnexpectedPasswordDelete"];
    }
    goto LABEL_50;
  }
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:3, "%s: Most recently joined network was: %@", "WiFiManagerCheckForUnexpectedPasswordDelete", v9 message];
  }
  CFArrayRef v11 = sub_10010AC8C(v8, a2);
  if (!v11)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: no matching network in known networks list", "WiFiManagerCheckForUnexpectedPasswordDelete");
    }
LABEL_50:
    CFArrayRef v12 = 0;
    goto LABEL_21;
  }
  CFArrayRef v12 = v11;
  if (!CFEqual(v11, v9))
  {
LABEL_21:
    CFDateRef v14 = 0;
    goto LABEL_22;
  }
  CFStringRef v13 = sub_1000C62C8((CFDictionaryRef *)a2);
  if (v13)
  {
    CFDateRef v14 = (CFDateRef)v13;
    id v16 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      dispatch_time_t v17 = sub_10001A43C(v12);
      int v18 = (const void *)sub_10010A740(v8);
      [v16 WFLog:3, "%s: Not recording password for matchingNetworkCopy %@ and previously joined network %@", "WiFiManagerCheckForUnexpectedPasswordDelete", v17, sub_10001A43C(v18) message];
    }
    goto LABEL_22;
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v14 = CFDateCreate(kCFAllocatorDefault, Current);
  sub_1000CD3F8(v12, v14);
  CFArrayAppendValue(a1[316], v12);
  id v21 = (void *)qword_10027DD68;
  if (qword_10027DD68)
  {
    id v22 = sub_10001A43C(v12);
    [v21 WFLog:3, "%s: Recording that the password for %@ is not in the keychain. Network count with deleted passwords is now %ld", "WiFiManagerCheckForUnexpectedPasswordDelete", v22, CFArrayGetCount(a1[316]) message];
  }
  if (v14)
  {
    CFRelease(v14);
    goto LABEL_21;
  }
LABEL_22:
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Status of networks with deleted keychain password, count: %ld", "WiFiManagerCheckForUnexpectedPasswordDelete", CFArrayGetCount(a1[316]));
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v14)
  {
    CFRelease(v14);
  }
}

void sub_1000A0D28(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 1392) = a2;
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA0000002ALL;
  v2[2] = 0;
  void v2[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v2);
}

void sub_1000A0D7C(uint64_t a1, int a2, int a3, int a4, int a5)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 1384) != a2
      || *(unsigned __int8 *)(a1 + 1388) != a3
      || *(unsigned __int8 *)(a1 + 1389) != a4
      || *(unsigned __int8 *)(a1 + 1390) != a5)
    {
      *(_DWORD *)(a1 + 1384) = a2;
      *(unsigned char *)(a1 + 1388) = a3;
      *(unsigned char *)(a1 + 1389) = a4;
      *(unsigned char *)(a1 + 1390) = a5;
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000029;
      void context[2] = 0;
      void context[3] = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: null manager", @"WiFiManagerSetLQASettings"];
    }
  }
}

void sub_1000A0E70(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, "%s", "WiFiManagerSetCoexMgrXpcObj"];
    }
    *(void *)(a1 + 1320) = a2;
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: null manager", "WiFiManagerSetCoexMgrXpcObj"];
    }
  }
}

void sub_1000A0F30(uint64_t a1, int a2)
{
  if (qword_10027DD68)
  {
    CFArrayRef v5 = "FALSE";
    if (a2) {
      CFArrayRef v5 = "TRUE";
    }
    [((id)qword_10027DD68) WFLog:message:3, "%s: builtInReceiver = %s", "WiFiManagerSetBuiltInReceiver", v5];
  }
  *(_DWORD *)(a1 + 1456) = a2 != 0;
  *(_DWORD *)(a1 + 1460) = 1;
  *(unsigned char *)(a1 + 1464) = 0;
  context[0] = a1;
  context[1] = 0xAAAAAAAA00000009;
  void context[2] = 0;
  void context[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
}

void sub_1000A1000(uint64_t a1, double a2)
{
  double v4 = a2;
  if (a1)
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000005ELL;
    void context[2] = &v4;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager ref is null" :@"WiFiManagerSetNANOffHeadConnectionExpiry"];
    }
  }
}

double sub_1000A10BC(const __CFArray *a1)
{
  CFArrayRef v1 = sub_10000500C(a1);
  if (!v1) {
    return 0.0;
  }
  CFArrayRef v2 = v1;
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v1, 0);
  if (ValueAtIndex)
  {
    double v4 = sub_10011E10C((uint64_t)ValueAtIndex);
  }
  else
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: deviceManager is NULL!", "WiFiManagerGetNANOffHeadConnectionExpiry")];
    }
    double v4 = 0.0;
  }
  CFRelease(v2);
  return v4;
}

void sub_1000A1160(uint64_t a1, char a2, char a3)
{
  if (a1)
  {
    double v4 = *(NSObject **)(a1 + 32);
    if (v4)
    {
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_1000A11E8;
      v5[3] = &unk_100240940;
      char v6 = a2;
      void v5[4] = a1;
      char v7 = a3;
      dispatch_async(v4, v5);
    }
  }
}

void sub_1000A11E8(uint64_t a1)
{
  int v1 = *(unsigned char *)(a1 + 40) != 0;
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 1460) != v1 || *(unsigned __int8 *)(v2 + 1464) != *(unsigned __int8 *)(a1 + 41))
  {
    *(_DWORD *)(v2 + 1460) = v1;
    *(unsigned char *)(v2 + 1464) = *(unsigned char *)(a1 + 41);
    v3[0] = v2;
    v3[1] = 0xAAAAAAAA00000009;
    void v3[2] = 0;
    void v3[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(v2 + 104), (CFSetApplierFunction)sub_100020954, v3);
  }
}

void sub_1000A1270(uint64_t a1, char a2, char a3)
{
  if (a1)
  {
    BOOL v3 = *(NSObject **)(a1 + 32);
    if (v3)
    {
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472;
      CFTypeRef v4[2] = sub_1000A12F8;
      v4[3] = &unk_100240940;
      char v5 = a2;
      char v6 = a3;
      void v4[4] = a1;
      dispatch_async(v3, v4);
    }
  }
}

void sub_1000A12F8(uint64_t a1)
{
  if (qword_10027DD68)
  {
    BOOL v3 = "Active";
    if (!*(unsigned char *)(a1 + 40)) {
      BOOL v3 = "Inactive";
    }
    if (*(unsigned char *)(a1 + 41)) {
      double v4 = "WiFi";
    }
    else {
      double v4 = "Cellular";
    }
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFi Calling registration %s on %s", "WiFiManagerWiFiCallingIMSRegistrationCallback_block_invoke", v3, v4)];
  }
  if (*(unsigned char *)(a1 + 40)) {
    BOOL v5 = *(unsigned char *)(a1 + 41) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(unsigned __int8 *)(v6 + 1162);

  sub_100090CC0(v6, 0, v7, v5);
}

void sub_1000A13D0(uint64_t a1, const void *a2, unsigned int a3, int a4, int a5)
{
  *(unsigned char *)(a1 + 2088) = 1;
  context[0] = a1;
  context[1] = 0xAAAAAAAA0000004BLL;
  void context[2] = 0;
  void context[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  if (sub_100004688(a1))
  {
    sub_1000A168C((id)a1);
    sub_1000A1808(a1, a3);
    if (a3)
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:3, @"%s: Enable AutoJoin On Companion AAJ trigger", @"WiFiManagerSetCompanionAssistedAutoJoin"];
      }
      sub_100003D18(a1, 1);
    }
  }
  *(unsigned char *)(a1 + 1560) = a2 != 0;
  CFArrayRef v11 = *(const void **)(a1 + 1568);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 1568) = 0;
  }
  if (a2) {
    CFTypeRef v12 = CFRetain(a2);
  }
  else {
    CFTypeRef v12 = 0;
  }
  *(void *)(a1 + 1568) = v12;
  int v13 = *(unsigned __int8 *)(a1 + 1560);
  if (v13)
  {
    if (qword_10027DD68)
    {
      uint64_t v15 = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16)) {
        uint64_t v15 = *(unsigned char *)(a1 + 24) != 0;
      }
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: is autojoin enabled %d", "WiFiManagerSetCompanionAssistedAutoJoin", v15);
    }
    if (*(unsigned char *)(a1 + 16) && *(unsigned char *)(a1 + 24))
    {
      *(_DWORD *)(a1 + 1584) = a4;
      *(_DWORD *)(a1 + 1588) = a5;
      dispatch_time_t v17 = *(NSObject **)(a1 + 1576);
      dispatch_time_t v18 = dispatch_time(0, 30000000000);
      dispatch_source_set_timer(v17, v18, 0xFFFFFFFFFFFFFFFFLL, 0);
      sub_1000A18BC(a1, a5, 1);
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:message:3, "%s: ###START_CAAJ", "WiFiManagerSetCompanionAssistedAutoJoin"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:3, @"%s: ###STOP_CAAJ", @"WiFiManagerSetCompanionAssistedAutoJoin"];
    }
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 1576), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    sub_1000A18BC(a1, 0, 0);
  }
  sub_10008111C(v16, 2, a1);
  sub_1000830B8(a1);
  sub_100083534(a1, *(const __CFArray **)(a1 + 224));
}

void sub_1000A163C(uint64_t a1)
{
  v1[0] = a1;
  v1[1] = 0xAAAAAAAA0000004BLL;
  v1[2] = 0;
  v1[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v1);
}

id sub_1000A168C(id result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    BOOL v3 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      if (CFSetGetCount(*(CFSetRef *)(v1 + 144))) {
        double v4 = "present";
      }
      else {
        double v4 = "not present";
      }
      [v3 WFLog:3 message:@"%s: background client %s", @"WiFiManagerUpdateAlwaysOnWiFiParameters", v4];
    }
    uint64_t v6 = (void *)qword_10027DD68;
    if (qword_10027DD68)
    {
      if (CFSetGetCount(*(CFSetRef *)(v1 + 168))) {
        int v7 = "present";
      }
      else {
        int v7 = "not present";
      }
      [v6 WFLog:3 message:@"%s: Cloud client %s", @"WiFiManagerUpdateAlwaysOnWiFiParameters", v7];
    }
    if (sub_100004688(v1)) {
      int v8 = 1;
    }
    else {
      int v8 = sub_1000A1954(v1);
    }
    sub_1000925CC(v1, v8);
    context[0] = v1;
    context[1] = 0xAAAAAAAA00000049;
    void context[2] = 0;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(v1 + 104), (CFSetApplierFunction)sub_100020954, context);
    return [*(id *)(v1 + 2416) updateWowState:*(unsigned char *)(v1 + 1160) != 0 lpasState:*(unsigned char *)(v1 + 1176) != 0 lowPowerState:*(unsigned char *)(v1 + 1162) != 0 batterySaverState:*(void *)(v1 + 1600) != 0];
  }
  return result;
}

void sub_1000A1808(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 2253) = a2;
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:message:3, "%s: Updating companion WiFi state %d\n", "WiFiManagerSetCompanionWiFiState", a2];
    }
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000075;
    void context[2] = 0;
    void context[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
  }
}

void sub_1000A18BC(uint64_t a1, int a2, char a3)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 2248) = a2;
    *(unsigned char *)(a1 + 2252) = a3;
    v3[0] = a1;
    v3[1] = 0xAAAAAAAA00000074;
    void v3[2] = 0;
    void v3[3] = 1;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v3);
  }
}

uint64_t sub_1000A191C(uint64_t a1)
{
  if (CFSetGetCount(*(CFSetRef *)(a1 + 144))) {
    return 1;
  }
  else {
    return (uint64_t)[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") isBackgroundActivityRegistered];
  }
}

uint64_t sub_1000A1954(uint64_t a1)
{
  if (CFSetGetCount(*(CFSetRef *)(a1 + 168))) {
    return 1;
  }
  else {
    return (uint64_t)[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") isWiFiBoundActivityRegistered];
  }
}

uint64_t sub_1000A198C(uint64_t a1)
{
  if (CFSetGetCount(*(CFSetRef *)(a1 + 152))) {
    return 1;
  }
  else {
    return (uint64_t)[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") isForegroundActivityRegistered];
  }
}

uint64_t sub_1000A19C4(uint64_t a1)
{
  if (CFSetGetCount(*(CFSetRef *)(a1 + 1168))) {
    return 1;
  }
  else {
    return (uint64_t)[+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager") isWoWActivityRegistered];
  }
}

uint64_t sub_1000A19FC(uint64_t a1)
{
  if (sub_1000A198C(a1) || sub_1000A191C(a1) || sub_1000A19C4(a1)) {
    return 1;
  }

  return sub_1000A1954(a1);
}

uint64_t sub_1000A1A60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1552);
}

uint64_t sub_1000A1A68(void *a1)
{
  uint64_t v1 = sub_1000231B0(a1, @"WiFiCountryBandSupportKey", 3);
  if (qword_10027DD68) {
    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: WiFiCC : CountryBandSupport = %d", "WiFiManagerGetCountryBandSupport", v1);
  }
  return v1;
}

void sub_1000A1AE8(uint64_t a1, uint64_t a2)
{
  if (a2 <= 0x64)
  {
    context[8] = v2;
    context[9] = v3;
    if (*(_DWORD *)(a1 + 1552) != a2)
    {
      kdebug_trace();
      if (qword_10027DD68) {
        [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "setting thermal index from %d to %d", *(unsigned int *)(a1 + 1552), a2)];
      }
      *(_DWORD *)(a1 + 1552) = a2;
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000044;
      void context[2] = a2;
      void context[3] = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    }
  }
}

void sub_1000A1BC4(uint64_t a1, int a2, const void *a3)
{
  kdebug_trace();
  if (qword_10027DD68) {
    [(id)qword_10027DD68 WFLog:4, "InCar notificaion received. UUID %@", a3 message];
  }

  sub_1000A1C68(a1, a2, a3);
}

void sub_1000A1C68(uint64_t a1, int a2, CFTypeRef cf)
{
  if (*(unsigned __int8 *)(a1 + 1504) != a2)
  {
    uint64_t v6 = *(const void **)(a1 + 1512);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 1512) = 0;
    }
    *(unsigned char *)(a1 + 1504) = a2;
    if (a2)
    {
      *(void *)(a1 + 1512) = CFRetain(cf);
      if (*(unsigned char *)(a1 + 1329) && !*(unsigned char *)(a1 + 26))
      {
        *(unsigned char *)(a1 + 1504) = 0;
        *(unsigned char *)(a1 + 1520) = 1;
        return;
      }
      *(unsigned char *)(a1 + 1520) = 0;
      int v7 = *(NSObject **)(a1 + 1536);
      dispatch_time_t v8 = dispatch_time(0, 30000000000);
      dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0);
      uint64_t context = a1;
      unint64_t v24 = 0xAAAAAA0100000042;
      unint64_t v25 = 0xAAAAAAAA00000001;
    }
    else
    {
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 1536), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      uint64_t context = a1;
      unint64_t v24 = 0xAAAAAA0000000042;
      unint64_t v25 = 0xAAAAAAAA00000000;
    }
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, &context);
    sub_10008111C(v9, 2, a1);
    sub_1000830B8(a1);
    if (!*(unsigned char *)(a1 + 1504)) {
      goto LABEL_17;
    }
    CFArrayRef v10 = *(const __CFArray **)(a1 + 224);
    CFIndex Count = CFArrayGetCount(v10);
    if (Count < 1) {
      goto LABEL_17;
    }
    CFIndex v12 = Count;
    CFIndex v13 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v10, v13);
      if (ValueAtIndex)
      {
        uint64_t v15 = ValueAtIndex;
        CFStringRef v16 = (const __CFString *)sub_10001E404((uint64_t)ValueAtIndex, @"CARPLAY_UUID");
        if (v16)
        {
          CFStringRef v17 = *(const __CFString **)(a1 + 1512);
          if (v17)
          {
            if (CFEqual(v16, v17)) {
              break;
            }
          }
        }
      }
      if (v12 == ++v13) {
        goto LABEL_17;
      }
    }
    if (sub_10001EBB4((uint64_t)v15)
      || (CFStringRef v18 = (const __CFString *)sub_10001E404((uint64_t)v15, @"networkDisabledReason")) == 0
      || CFStringCompare(v18, @"UserDisabledCarPlay", 0))
    {
LABEL_17:
      sub_100083534(a1, *(const __CFArray **)(a1 + 224));
    }
    else
    {
      sub_10001C6A4((uint64_t)v15, @"enabled", kCFBooleanTrue);
      sub_10009B1AC(a1, v15, 1u);
      id v20 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        uint64_t v21 = *(void *)(a1 + 1512);
        id v22 = sub_10001A43C(v15);
        [v20 WFLog:3, "%s: Enabling CarPlay auto join for UUID %@ network %@", "__WiFiManagerEnableAutoJoinForCarPlay", v21, v22, context, v24, v25 message];
      }
    }
    if (_os_feature_enabled_impl()) {
      sub_100013A1C(a1);
    }
  }
}

void sub_1000A1EFC(const __CFArray *a1, const void *a2)
{
  if (a1)
  {
    double v4 = sub_1000A2050(a1);
    if (v4)
    {
      BOOL v5 = v4;
      if (sub_1000CD794((uint64_t)v4) == 1 && sub_10001EBB4((uint64_t)v5))
      {
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v7 = CFDateCreate(kCFAllocatorDefault, Current);
        if (v7)
        {
          CFDateRef v8 = v7;
          sub_10001C6A4((uint64_t)v5, @"networkDisabledTimestamp", v7);
          CFRelease(v8);
        }
        sub_10001C6A4((uint64_t)v5, @"networkDisabledClientName", a2);
        sub_10001C6A4((uint64_t)v5, @"networkDisabledReason", @"UserDisabledCarPlay");
        sub_10001C6A4((uint64_t)v5, @"enabled", kCFBooleanFalse);
        sub_10009B1AC((uint64_t)a1, v5, 1u);
        if (qword_10027DD68) {
          [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 3, "%s: Disabling CarPlay auto join until next incar comes.", "WiFiManagerDisableAutoJoinForCarPlay")];
        }
      }
      CFRelease(v5);
    }
  }
}

void *sub_1000A2050(const __CFArray *a1)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef v1 = sub_10000500C(a1);
  if (!v1)
  {
    if (qword_10027DD68) {
      [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: failed to get device managers", "__WiFiManagerCopyCurrentNetwork")];
    }
    return 0;
  }
  CFArrayRef v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  if (Count < 1)
  {
LABEL_9:
    CFArrayRef v10 = 0;
  }
  else
  {
    CFIndex v4 = Count;
    CFIndex v5 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
      uint64_t v7 = sub_100016E18((uint64_t)ValueAtIndex);
      if (v7)
      {
        CFDateRef v8 = (const void *)sub_100016E20(v7);
        if (v8)
        {
          uint64_t v9 = sub_10000E5D0((uint64_t)ValueAtIndex, v8);
          if (v9) {
            break;
          }
        }
      }
      if (v4 == ++v5) {
        goto LABEL_9;
      }
    }
    CFArrayRef v10 = v9;
  }
  CFRelease(v2);
  return v10;
}

void sub_1000A2138(uint64_t a1, const __CFDictionary *a2)
{
  if (a1 && a2)
  {
    if (qword_10027DD68) {
      [(id)qword_10027DD68 WFLog:3, "%s: params %@", "WiFiManagerSetCarplayParams", a2 message];
    }
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, @"carplayNotificationKey");
    if (Value)
    {
      CFStringRef v6 = Value;
      if (CFStringCompare(Value, @"carplayNotificationInCar", 0))
      {
        if (CFStringCompare(v6, @"carplayNotificationOutOfCar", 0))
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s: unknown notification %@", "WiFiManagerSetCarplayParams", v6 message];
          }
LABEL_18:
          return;
        }
        uint64_t v10 = a1;
        int v11 = 0;
        uint64_t v9 = 0;
      }
      else
      {
        CFDateRef v8 = CFDictionaryGetValue(a2, @"CARPLAY_UUID");
        if (!v8)
        {
          if (qword_10027DD68) {
            [(id)qword_10027DD68 WFLog:4, "%s: UUID is missing for %@", "WiFiManagerSetCarplayParams", v6 message];
          }
          goto LABEL_18;
        }
        uint64_t v9 = v8;
        uint64_t v10 = a1;
        int v11 = 1;
      }
      sub_1000A1C68(v10, v11, v9);
    }
  }
}

__CFDictionary *sub_1000A22D0(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v3 = Mutable;
  if (Mutable)
  {
    CFStringRef v4 = @"carplayState";
    if (*(unsigned char *)(a1 + 1504))
    {
      CFDictionarySetValue(Mutable, @"carplayState", kCFBooleanTrue);
      CFBooleanRef v5 = *(CFBooleanRef *)(a1 + 1512);
      CFStringRef v4 = @"CARPLAY_UUID";
    }
    else
    {
      CFBooleanRef v5 = kCFBooleanFalse;
    }
    CFDictionarySetValue(v3, v4, v5);
  }
  return v3;
}

void sub_1000A236C(uint64_t a1, uint64_t a2)
{
}

void sub_1000A2374(uint64_t a1)
{
}

void sub_1000A2380(void *a1, CFDictionaryRef theDict)
{
  if (!a1 || !theDict) {
    return;
  }
  uint64_t v3 = a1;
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"LEAKY_AP_SSID");
  if (Value)
  {
    CFStringRef v5 = Value;
    CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(theDict, @"LEAKY_AP_BSSID");
    if (v6)
    {
      CFStringRef v7 = v6;
      CFDateRef v8 = CFDictionaryGetValue(theDict, @"LEAKY_AP_LEARNED_DATA");
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = (const __SCPreferences *)sub_10000D9F0(v3, @"List of known networks");
        if (!v10) {
          return;
        }
        int v11 = v10;
        if (!sub_10005A1E0(v10)) {
          return;
        }
        CFIndex v12 = (void *)sub_10000D990((uint64_t)"WiFiManagerStoreLeakyAPData");
        CFArrayRef v13 = (const __CFArray *)sub_1000830B8((uint64_t)v3);
        if (v13)
        {
          CFArrayRef v14 = v13;
          CFIndex Count = CFArrayGetCount(v13);
          CFIndex v16 = Count;
          if (Count)
          {
            uint64_t v47 = v12;
            if (Count < 1)
            {
LABEL_15:
              uint64_t v21 = v11;
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:4, "%s: SSID %@ not found in known networks list", "WiFiManagerStoreLeakyAPData", v5 message];
              }
              LODWORD(v16) = 0;
              CFArrayRef v23 = 0;
            }
            else
            {
              CFIndex v17 = 0;
              while (1)
              {
                CFDictionaryRef ValueAtIndex = (CFDictionaryRef *)CFArrayGetValueAtIndex(v14, v17);
                if (ValueAtIndex)
                {
                  id v19 = ValueAtIndex;
                  CFStringRef v20 = (const __CFString *)sub_10001A43C(ValueAtIndex);
                  if (CFEqual(v5, v20)) {
                    break;
                  }
                }
                if (v16 == ++v17) {
                  goto LABEL_15;
                }
              }
              CFArrayRef v24 = (const __CFArray *)sub_10001A6D0((uint64_t)v19);
              if (!v24)
              {
                long long v46 = v11;
                CFStringRef v32 = (const __CFString *)sub_10001E404((uint64_t)v19, @"BSSID");
                if (!v32)
                {
                  if (qword_10027DD68) {
                    [objc_msgSend((id)qword_10027DD68, "WFLog:message:", 4, "%s: cannot find BSSID in the network object", "WiFiManagerStoreLeakyAPData")];
                  }
                  LODWORD(v16) = 0;
                  CFArrayRef v23 = 0;
LABEL_57:
                  int v11 = v46;
                  goto LABEL_46;
                }
                CFStringRef v33 = v32;
                if (CFStringCompare(v7, v32, 0))
                {
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:4, "%s: BSSID doesn't match - reported %@, from known network %@", "WiFiManagerStoreLeakyAPData", v7, v33 message];
                  }
                  uint64_t v35 = v34;
                }
                else
                {
                  sub_10001C6A4((uint64_t)v19, @"LEAKY_AP_LEARNED_DATA", v9);
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: updated LEAKY_AP_LEARNED_DATA for network %@ - %@", "WiFiManagerStoreLeakyAPData", v5, v7 message];
                  }
                  uint64_t v35 = v39;
                }
                CFArrayRef v23 = 0;
LABEL_44:
                int v11 = v46;
                goto LABEL_45;
              }
              MutableCFStringRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v24);
              CFArrayRef v23 = MutableCopy;
              if (!MutableCopy)
              {
                LODWORD(v16) = 0;
                goto LABEL_46;
              }
              long long v45 = v3;
              CFIndex v26 = CFArrayGetCount(MutableCopy);
              if (v26)
              {
                CFIndex v27 = v26;
                if (v26 >= 1)
                {
                  long long v46 = v11;
                  CFIndex v28 = 0;
                  while (1)
                  {
                    CFDictionaryRef v29 = (const __CFDictionary *)CFArrayGetValueAtIndex(v23, v28);
                    if (v29)
                    {
                      CFDictionaryRef v30 = v29;
                      CFStringRef v31 = (const __CFString *)CFDictionaryGetValue(v29, @"BSSID");
                      if (!v31)
                      {
                        if (qword_10027DD68) {
                          [((id)qword_10027DD68) WFLog:4 message:@"%s: cannot find BSSID in the network object", @"WiFiManagerStoreLeakyAPData"];
                        }
                        LODWORD(v16) = 0;
                        uint64_t v3 = v45;
                        goto LABEL_57;
                      }
                      if (CFEqual(v7, v31))
                      {
                        dispatch_time_t v36 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v30);
                        if (v36)
                        {
                          uint64_t v37 = v36;
                          CFDictionarySetValue(v36, @"LEAKY_AP_LEARNED_DATA", v9);
                          if (qword_10027DD68) {
                            [(id)qword_10027DD68 WFLog:3, "%s: updated LEAKY_AP_LEARNED_DATA for network %@ - %@", "WiFiManagerStoreLeakyAPData", v5, v7 message];
                          }
                          CFArraySetValueAtIndex(v23, v28, v37);
                          CFRelease(v37);
                          sub_10001C6A4((uint64_t)v19, @"networkKnownBSSListKey", v23);
                        }
LABEL_39:
                        uint64_t v3 = v45;
                        goto LABEL_44;
                      }
                    }
                    if (v27 == ++v28) {
                      goto LABEL_39;
                    }
                  }
                }
                uint64_t v3 = v45;
LABEL_45:
                LODWORD(v16) = sub_100094834((uint64_t)v3, v14);
                sub_100093410((uint64_t)v3, v19, 0);
                goto LABEL_46;
              }
              uint64_t v21 = v11;
              if (qword_10027DD68) {
                [(id)qword_10027DD68 WFLog:4, "%s: known BSSIDs list is empty for network %@!", "WiFiManagerStoreLeakyAPData", v5 message];
              }
              LODWORD(v16) = 0;
            }
            int v11 = v21;
LABEL_46:
            CFIndex v12 = v47;
LABEL_47:
            sub_10005A29C(v11, v16);

            if (v23) {
              CFRelease(v23);
            }
            if (v16)
            {
              sub_10008111C(v40, 2, (uint64_t)v3);
            }
            return;
          }
        }
        else
        {
          LODWORD(v16) = 0;
        }
        CFArrayRef v23 = 0;
        goto LABEL_47;
      }
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: LEAKY_AP_LEARNED_DATA is NULL" arguments:("WiFiManagerStoreLeakyAPData", NULL)];
      }
    }
    else
    {
      if (qword_10027DD68) {
        [((id)qword_10027DD68) WFLog:4 message:@"%s: BSSID is NULL" : @"WiFiManagerStoreLeakyAPData"];
      }
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: SSID is NULL" arguments:&"WiFiManagerStoreLeakyAPData"];
    }
  }
}

void sub_1000A2934(uint64_t a1, CFArrayRef theArray)
{
  MutableCFStringRef Copy = *(CFMutableArrayRef *)(a1 + 1608);
  if (theArray)
  {
    if (MutableCopy)
    {
      CFRelease(MutableCopy);
      *(void *)(a1 + 1608) = 0;
    }
    MutableCFStringRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, theArray);
    *(void *)(a1 + 1608) = MutableCopy;
  }
  v5[0] = a1;
  v5[1] = 0xAAAAAAAA00000043;
  v5[2] = MutableCopy;
  v5[3] = 1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, v5);
}

uint64_t sub_1000A29C4(const __SCPreferences *a1, void *a2)
{
  uint64_t v2 = (uint64_t)a1;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  newValues = a2;
  if (a1)
  {
    CFStringRef v6 = 0;
    if (a2)
    {
      a1 = (const __SCPreferences *)sub_10000D9F0(a1, @"List of policies");
      if (a1 && (CFStringRef v7 = a1, a1 = sub_10005A1E0(a1), a1))
      {
        CFDateRef v8 = (void *)sub_10000D990((uint64_t)"WiFiManagerAddPolicy");
        CFArrayRef v9 = sub_10000D934((void *)v2, @"List of policies");
        CFStringRef v6 = sub_100032F78(v9);
        if (v6 && (v10 = (const __CFString *)sub_100032DDC((uint64_t)a2), CFIndex Count = CFArrayGetCount(v6), Count >= 1))
        {
          CFIndex v12 = Count;
          CFIndex v13 = 0;
          while (1)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v13);
            if (ValueAtIndex)
            {
              CFStringRef v15 = (const __CFString *)sub_100032DDC((uint64_t)ValueAtIndex);
              if (CFEqual(v15, v10)) {
                break;
              }
            }
            if (v12 == ++v13) {
              goto LABEL_11;
            }
          }
          v20.CFIndex location = v13;
          v20.CFIndex length = 1;
          CFArrayReplaceValues(v6, v20, (const void **)&newValues, 0);
          CFIndex v16 = "Replaced";
        }
        else
        {
LABEL_11:
          CFArrayAppendValue(v6, a2);
          CFIndex v16 = "Added";
        }
        uint64_t v3 = sub_100033034(v6);
        if (v3)
        {
          uint64_t v4 = sub_100083E60((void *)v2, @"List of policies", v3, 1);
          if (v4)
          {
            if (qword_10027DD68) {
              [(id)qword_10027DD68 WFLog:3, "%s %@ to policies list", v16, sub_100032DDC((uint64_t)newValues) message];
            }
          }
        }
        else
        {
          uint64_t v4 = 0;
        }
        sub_10005A29C(v7, v4);
      }
      else
      {
        uint64_t v4 = 0;
        uint64_t v3 = 0;
        CFStringRef v6 = 0;
      }
    }
  }
  else
  {
    CFStringRef v6 = 0;
  }
  sub_10008111C((uint64_t)a1, 2, v2);
  sub_1000830B8(v2);
  sub_100083534(v2, *(const __CFArray **)(v2 + 224));
  if (v3) {
    CFRelease(v3);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v4;
}

uint64_t sub_1000A2BE0(uint64_t a1, const void *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  CFIndex Count = (const __SCPreferences *)CFGetTypeID(a2);
  if (!a1) {
    goto LABEL_26;
  }
  CFStringRef v6 = Count;
  CFIndex Count = (const __SCPreferences *)CFArrayGetCount(*(CFArrayRef *)(a1 + 1608));
  uint64_t v7 = 0;
  CFDateRef v8 = 0;
  if (!a2) {
    goto LABEL_23;
  }
  uint64_t v9 = (uint64_t)Count;
  if (!Count) {
    goto LABEL_23;
  }
  CFIndex Count = (const __SCPreferences *)sub_10000D9F0((void *)a1, @"List of policies");
  if (!Count || (v10 = Count, CFIndex Count = sub_10005A1E0(Count), !Count))
  {
LABEL_26:
    CFDateRef v8 = 0;
    uint64_t v7 = 0;
    goto LABEL_23;
  }
  int v11 = (void *)sub_10000D990((uint64_t)"WiFiManagerRemovePolicy");
  CFArrayRef v12 = sub_10000D934((void *)a1, @"List of policies");
  CFDateRef v8 = sub_100032F78(v12);
  if (!v8) {
    goto LABEL_27;
  }
  if (v9 >= 1)
  {
    CFIndex v13 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v8, v13);
      if ((const __SCPreferences *)TypeID == v6) {
        CFDictionaryRef ValueAtIndex = sub_100032DDC((uint64_t)ValueAtIndex);
      }
      if (CFEqual(ValueAtIndex, a2)) {
        break;
      }
      if (v9 == ++v13) {
        goto LABEL_15;
      }
    }
    CFArrayRemoveValueAtIndex(v8, v13);
  }
LABEL_15:
  CFStringRef v15 = sub_100033034(v8);
  if (v15)
  {
    CFIndex v16 = v15;
    uint64_t v7 = sub_100083E60((void *)a1, @"List of policies", v15, 1);
    CFRelease(v16);
    if (v7)
    {
      CFStringRef v18 = (void *)qword_10027DD68;
      if (qword_10027DD68)
      {
        if ((const __SCPreferences *)TypeID != v6) {
          a2 = sub_100032DDC((uint64_t)a2);
        }
        [v18 WFLog:3, "Removed %@ from policies list", a2 message];
      }
    }
  }
  else
  {
LABEL_27:
    uint64_t v7 = 0;
  }
  sub_10005A29C(v10, v7);

LABEL_23:
  sub_10008111C((uint64_t)Count, 2, a1);
  sub_1000830B8(a1);
  sub_100083534(a1, *(const __CFArray **)(a1 + 224));
  if (v8) {
    CFRelease(v8);
  }
  return v7;
}

CFArrayRef sub_1000A2DD4(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 1608);
  if (!v2 || !CFArrayGetCount(v2)) {
    return 0;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + 1608);

  return CFArrayCreateCopy(kCFAllocatorDefault, v3);
}

void sub_1000A2E34(uint64_t a1, int a2)
{
  CFStringRef v5 = (const __CFString *)sub_10000D934((void *)a1, @"kWiFiWhitelistingUUIDKey");
  if ((a2 != 0) == (v5 == 0))
  {
    CFStringRef v32 = v4;
    if (a2)
    {
      CFDateRef v8 = sub_100032C94(kCFAllocatorDefault, +[NSNumber numberWithInteger:1], 0, 0);
      if (v8)
      {
        uint64_t v9 = v8;
        CFStringRef v10 = sub_100032DDC((uint64_t)v8);
        if (qword_10027DD68) {
          [(id)qword_10027DD68 WFLog:3, "%s: created restriction policy with UUID %@", "WiFiManagerEnableNetworksWhitelisting", v10 message];
        }
        sub_1000A29C4((const __SCPreferences *)a1, v9);
        CFArrayRef v12 = (const __CFArray *)sub_1000830B8(a1);
        if (v12)
        {
          CFArrayRef v13 = v12;
          uint64_t v31 = (uint64_t)v9;
          CFIndex Count = CFArrayGetCount(v12);
          if (Count >= 1)
          {
            CFIndex v15 = Count;
            for (CFIndex i = 0; i != v15; ++i)
            {
              CFDictionaryRef ValueAtIndex = (CFDictionaryRef *)CFArrayGetValueAtIndex(v13, i);
              if (ValueAtIndex)
              {
                CFStringRef v18 = ValueAtIndex;
                if (sub_1000C8140((uint64_t)ValueAtIndex))
                {
                  sub_10001C6A4((uint64_t)v18, @"PolicyUUID", v10);
                  sub_100093410(a1, v18, 0);
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: Added policyUUID %@ to network %@", "WiFiManagerEnableNetworksWhitelisting", v10, sub_10001A43C(v18) message];
                  }
                }
              }
            }
          }
          sub_100094834(a1, v13);
          sub_100004058(a1, 1, 1, 1);
          uint64_t v9 = (void *)v31;
          CFRange v20 = sub_100032DDC(v31);
          sub_10009317C((void *)a1, @"kWiFiWhitelistingUUIDKey", v20);
          sub_1000A3218(a1, 0);
        }
        CFRelease(v9);
        uint64_t v4 = v32;
      }
    }
    else
    {
      CFArrayRef v21 = (const __CFArray *)sub_1000830B8(a1);
      if (v21)
      {
        CFArrayRef v22 = v21;
        CFIndex v23 = CFArrayGetCount(v21);
        if (v23 >= 1)
        {
          CFIndex v24 = v23;
          for (CFIndex j = 0; j != v24; ++j)
          {
            CFIndex v26 = (CFDictionaryRef *)CFArrayGetValueAtIndex(v22, j);
            if (v26)
            {
              CFIndex v27 = v26;
              CFStringRef v28 = (const __CFString *)sub_10001E404((uint64_t)v26, @"PolicyUUID");
              if (v28)
              {
                if (CFEqual(v28, v5))
                {
                  sub_10001C6A4((uint64_t)v27, @"PolicyUUID", 0);
                  sub_100093410(a1, v27, 0);
                  if (qword_10027DD68) {
                    [(id)qword_10027DD68 WFLog:3, "%s: Removed policyUUID %@ from network %@", "WiFiManagerEnableNetworksWhitelisting", v5, sub_10001A43C(v27) message];
                  }
                }
              }
            }
          }
        }
        sub_100094834(a1, v22);
        sub_100004058(a1, 1, 1, 1);
        sub_1000A2BE0(a1, v5);
        sub_10009317C((void *)a1, @"kWiFiWhitelistingUUIDKey", 0);
        if (byte_10027DDA8) {
          BOOL v30 = 0;
        }
        else {
          BOOL v30 = (*(_DWORD *)(a1 + 112) - 1) < 3;
        }
        sub_1000A3218(a1, v30);
      }
    }
  }
  else
  {
    if (qword_10027DD68)
    {
      uint64_t v7 = "TRUE";
      if (!a2) {
        uint64_t v7 = "FALSE";
      }
      [(id)qword_10027DD68 WFLog:3, "%s: Nothing changed. restrictionUUID %@ and isWhitelistingEnabled %s", "WiFiManagerEnableNetworksWhitelisting", v5, v7 message];
    }
  }
}

void sub_1000A3218(uint64_t a1, int a2)
{
  char v4 = a2;
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 2120) != a2)
    {
      *(unsigned char *)(a1 + 2120) = a2;
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000053;
      void context[2] = &v4;
      void context[3] = 1;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_100020954, context);
    }
  }
  else
  {
    if (qword_10027DD68) {
      [((id)qword_10027DD68) WFLog:4 message:@"%s: manager ref is null" args:("__WiFiManagerSetAvailabilityEngineIsEnabled")];
    }
  }
}