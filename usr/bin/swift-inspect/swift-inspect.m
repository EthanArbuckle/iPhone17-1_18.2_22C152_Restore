__n128 _s5ErrorVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CSTypeRef(uint64_t a1)
{
}

__n128 initializeWithTake for ConcurrencyDumper.HeapInfo(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_100002500(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100002520(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for swift_metadata_allocation(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for ArgumentDefinition.Help(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_100002594(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if (a10)
  {
    return swift_retain();
  }
  else
  {
    char v15 = a6 & 1;
    sub_10000263C(a1, a2, a3 & 1);
    sub_10000264C(a4, a5, v15);
    return sub_10000264C(a7, a8, a9 & 1);
  }
}

uint64_t sub_10000263C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_10000264C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10000265C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  if (a7)
  {
    return swift_retain();
  }
  else
  {
    sub_10000264C(a1, a2, a3 & 1);
    return sub_10000264C(a4, a5, a6 & 1);
  }
}

uint64_t destroy for DumpRawMetadata(uint64_t a1)
{
  sub_10000274C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64), *(unsigned char *)(a1 + 65));
  swift_bridgeObjectRelease();
  sub_100002814(*(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(unsigned char *)(a1 + 128), *(unsigned char *)(a1 + 129));

  return swift_bridgeObjectRelease();
}

uint64_t sub_10000274C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if (a10)
  {
    return swift_release();
  }
  else
  {
    char v15 = a6 & 1;
    sub_1000027F4(a1, a2, a3 & 1);
    sub_100002804(a4, a5, v15);
    return sub_100002804(a7, a8, a9 & 1);
  }
}

uint64_t sub_1000027F4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100002804(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100002814(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  if (a7)
  {
    return swift_release();
  }
  else
  {
    sub_100002804(a1, a2, a3 & 1);
    return sub_100002804(a4, a5, a6 & 1);
  }
}

uint64_t initializeWithCopy for DumpRawMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v20 = *(unsigned char *)(a2 + 64);
  char v21 = *(unsigned char *)(a2 + 65);
  sub_100002594(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v20, v21);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v20;
  *(unsigned char *)(a1 + 65) = v21;
  *(_WORD *)(a1 + 66) = *(_WORD *)(a2 + 66);
  uint64_t v12 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a2 + 120);
  LOBYTE(v9) = *(unsigned char *)(a2 + 129);
  LOBYTE(v10) = *(unsigned char *)(a2 + 128);
  swift_bridgeObjectRetain();
  sub_10000265C(v13, v14, v15, v16, v17, v10, v9);
  *(void *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 112) = v16;
  *(void *)(a1 + 120) = v17;
  *(unsigned char *)(a1 + 128) = v10;
  *(unsigned char *)(a1 + 129) = v9;
  *(_WORD *)(a1 + 130) = *(_WORD *)(a2 + 130);
  uint64_t v18 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v18;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DumpRawMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v35 = *(unsigned char *)(a2 + 64);
  char v36 = *(unsigned char *)(a2 + 65);
  sub_100002594(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v35, v36);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(unsigned char *)(a1 + 64);
  char v21 = *(unsigned char *)(a1 + 65);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v35;
  *(unsigned char *)(a1 + 65) = v36;
  sub_10000274C(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  *(unsigned char *)(a1 + 67) = *(unsigned char *)(a2 + 67);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(a2 + 88);
  uint64_t v23 = *(void *)(a2 + 96);
  uint64_t v24 = *(void *)(a2 + 104);
  uint64_t v25 = *(void *)(a2 + 112);
  uint64_t v26 = *(void *)(a2 + 120);
  LOBYTE(v9) = *(unsigned char *)(a2 + 129);
  LOBYTE(v10) = *(unsigned char *)(a2 + 128);
  sub_10000265C(v22, v23, v24, v25, v26, v10, v9);
  uint64_t v27 = *(void *)(a1 + 88);
  uint64_t v28 = *(void *)(a1 + 96);
  uint64_t v29 = *(void *)(a1 + 104);
  uint64_t v30 = *(void *)(a1 + 112);
  uint64_t v31 = *(void *)(a1 + 120);
  char v32 = *(unsigned char *)(a1 + 129);
  *(void *)(a1 + 88) = v22;
  *(void *)(a1 + 96) = v23;
  *(void *)(a1 + 104) = v24;
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v26;
  char v33 = *(unsigned char *)(a1 + 128);
  *(unsigned char *)(a1 + 128) = v10;
  *(unsigned char *)(a1 + 129) = v9;
  sub_100002814(v27, v28, v29, v30, v31, v33, v32);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(unsigned char *)(a1 + 131) = *(unsigned char *)(a2 + 131);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for DumpRawMetadata(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for DumpRawMetadata(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 64);
  char v5 = *(unsigned char *)(a2 + 65);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  char v14 = *(unsigned char *)(a1 + 64);
  char v15 = *(unsigned char *)(a1 + 65);
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(unsigned char *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 65) = v5;
  sub_10000274C(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  *(unsigned char *)(a1 + 67) = *(unsigned char *)(a2 + 67);
  uint64_t v18 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 120);
  char v20 = *(unsigned char *)(a2 + 128);
  char v21 = *(unsigned char *)(a2 + 129);
  uint64_t v22 = *(void *)(a1 + 88);
  uint64_t v23 = *(void *)(a1 + 96);
  uint64_t v24 = *(void *)(a1 + 104);
  uint64_t v25 = *(void *)(a1 + 112);
  uint64_t v26 = *(void *)(a1 + 120);
  char v27 = *(unsigned char *)(a1 + 129);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = v19;
  char v28 = *(unsigned char *)(a1 + 128);
  *(unsigned char *)(a1 + 128) = v20;
  *(unsigned char *)(a1 + 129) = v21;
  sub_100002814(v22, v23, v24, v25, v26, v28, v27);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(unsigned char *)(a1 + 131) = *(unsigned char *)(a2 + 131);
  uint64_t v29 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v29;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DumpRawMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DumpRawMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DumpRawMetadata()
{
  return &type metadata for DumpRawMetadata;
}

double sub_100002D2C()
{
  CommandConfiguration.init(commandName:abstract:usage:discussion:version:shouldDisplay:subcommands:defaultSubcommand:helpNames:)(0, 0, 0xD000000000000028, 0x80000001000A7860, 0, 0, 0, 0xE000000000000000, (uint64_t)&v1, 0, 0xE000000000000000, 1, (__n128)(unint64_t)&_swiftEmptyArrayStorage, 0, 0);
  xmmword_1000C6160 = v7;
  unk_1000C6170 = v8;
  qword_1000C6180 = v9;
  xmmword_1000C6120 = v3;
  unk_1000C6130 = v4;
  xmmword_1000C6140 = v5;
  unk_1000C6150 = v6;
  double result = *(double *)&v2;
  xmmword_1000C6100 = v1;
  *(_OWORD *)algn_1000C6110 = v2;
  return result;
}

uint64_t sub_100002DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v7 = &v37;
  long long v8 = *(_OWORD *)(a3 + 104);
  long long v29 = *(_OWORD *)(a3 + 88);
  long long v30 = v8;
  long long v9 = *(_OWORD *)(a3 + 136);
  long long v31 = *(_OWORD *)(a3 + 120);
  long long v32 = v9;
  uint64_t v10 = sub_100003DD0(&qword_1000C4748);
  OptionGroup.wrappedValue.getter(v10, (uint64_t)&v33);
  int v11 = sub_100008208();
  long long v37 = v33;
  char v38 = v34;
  sub_1000044DC((uint64_t)&v37);
  long long v39 = v35;
  char v40 = v36;
  sub_1000044DC((uint64_t)&v39);
  if (v11 == 2)
  {
    uint64_t v12 = 0;
    if (*(void *)(a1 + 40)) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  uint64_t result = *(void *)(a1 + 40);
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t result = sub_100006E38();
  if (!v3)
  {
    uint64_t v12 = result;
    if (*(void *)(a1 + 40))
    {
LABEL_3:
      long long v7 = (long long *)swift_allocObject();
      *((void *)v7 + 2) = _swiftEmptyArrayStorage;
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = sub_100004548;
      *(void *)(v13 + 24) = v7;
      *(void *)&long long v29 = sub_100004588;
      *((void *)&v29 + 1) = v13;
      swift_retain_n();
      uint64_t v14 = swift_reflection_iterateMetadataAllocations();
      swift_release();
      if (v14)
      {
        uint64_t v15 = String.init(cString:)();
        uint64_t v17 = v16;
        sub_1000045C0();
        swift_allocError();
        *uint64_t v18 = v15;
        v18[1] = v17;
        swift_willThrow();
        swift_release_n();
        return swift_bridgeObjectRelease();
      }
LABEL_9:
      swift_release();
      swift_beginAccess();
      uint64_t v20 = *((void *)v7 + 2);
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v21 = *(void *)(v20 + 16);
      if (v21)
      {
        swift_bridgeObjectRetain();
        uint64_t v22 = (_DWORD *)(v20 + 48);
        do
        {
          unsigned int v23 = *(v22 - 4);
          uint64_t v24 = *((void *)v22 - 1);
          int v25 = *v22;
          v22 += 6;
          unsigned int v26 = v23;
          uint64_t v27 = v24;
          int v28 = v25;
          sub_100003098(&v26, a1, a2, a3, v12);
          --v21;
        }
        while (v21);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_100003098(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = *(void *)(a2 + 40);
  if (result)
  {
    unsigned int v8 = *a1;
    uint64_t v9 = *((void *)a1 + 1);
    uint64_t v10 = a1[4];
    if (swift_reflection_metadataAllocationTagName())
    {
      uint64_t v11 = String.init(cString:)();
      uint64_t v13 = v12;
    }
    else
    {
      uint64_t v13 = (void *)0xE90000000000003ELL;
      uint64_t v11 = 0x6E776F6E6B6E753CLL;
    }
    sub_100003DD0(&qword_1000C4758);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1000A2660;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    *(void *)&long long v41 = 0xD00000000000001ALL;
    *((void *)&v41 + 1) = 0x80000001000A7820;
    sub_100004614();
    v15._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 9071406774580000;
    v16._object = (void *)0xE700000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 0x203A67617420;
    v18._object = (void *)0xE600000000000000;
    String.append(_:)(v18);
    *(void *)&long long v45 = __PAIR64__(HIDWORD(v10), v8);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 10272;
    v20._object = (void *)0xE200000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = v11;
    v21._object = v13;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 41;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    long long v23 = v41;
    *(void *)(v14 + 56) = &type metadata for String;
    *(_OWORD *)(v14 + 32) = v23;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    long long v24 = *(_OWORD *)(a4 + 104);
    long long v41 = *(_OWORD *)(a4 + 88);
    long long v42 = v24;
    long long v25 = *(_OWORD *)(a4 + 136);
    long long v43 = *(_OWORD *)(a4 + 120);
    long long v44 = v25;
    uint64_t v26 = sub_100003DD0(&qword_1000C4748);
    OptionGroup.wrappedValue.getter(v26, (uint64_t)&v45);
    char v27 = sub_100008208();
    long long v49 = v45;
    char v50 = v46;
    sub_1000044DC((uint64_t)&v49);
    long long v41 = v47;
    LOBYTE(v42) = v48;
    uint64_t result = sub_1000044DC((uint64_t)&v41);
    if (v27 != 2)
    {
      if (a5 && *(void *)(a5 + 16) && (unint64_t v28 = sub_100024794(v9), (v29 & 1) != 0))
      {
        uint64_t v30 = *(void *)(*(void *)(a5 + 56) + 8 * v28);
        uint64_t v31 = swift_allocObject();
        *(_OWORD *)(v31 + 16) = xmmword_1000A2660;
        uint64_t v32 = swift_allocObject();
        *(void *)(v32 + 16) = a2;
        *(void *)(v32 + 24) = a3;
        swift_unknownObjectRetain_n();
        if (v27)
        {
          swift_bridgeObjectRetain_n();
          sub_100004134(v30, sub_1000046A0);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v33 = swift_bridgeObjectRetain();
          sub_100003E14(v33, a2);
        }
        sub_100003DD0(&qword_1000C4768);
        sub_100005178(&qword_1000C4770, &qword_1000C4768);
        uint64_t v35 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v37 = v36;
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        *(void *)(v31 + 56) = &type metadata for String;
        *(void *)(v31 + 32) = v35;
        *(void *)(v31 + 40) = v37;
        print(_:separator:terminator:)();
        return swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v34 = swift_allocObject();
        *(_OWORD *)(v34 + 16) = xmmword_1000A2660;
        *(void *)(v34 + 56) = &type metadata for String;
        *(void *)(v34 + 32) = 0xD00000000000001ALL;
        *(void *)(v34 + 40) = 0x80000001000A7840;
        print(_:separator:terminator:)();
        return swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000035AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  if (qword_1000C46D0 != -1) {
    swift_once();
  }
  uint64_t v5 = off_1000C6488(v3, v4, a1, 0x8000000000000000);
  uint64_t v7 = v6;
  if (qword_1000C46B8 != -1) {
    swift_once();
  }
  uint64_t v8 = off_1000C6470(v5, v7);
  uint64_t v10 = v9;
  if (qword_1000C46C8 != -1) {
    swift_once();
  }
  if (off_1000C6480(v8, v10)) {
    uint64_t v11 = String.init(cString:)();
  }
  else {
    uint64_t v11 = 0;
  }
  if (qword_1000C46B0 != -1) {
    swift_once();
  }
  if (off_1000C6468(v5, v7)) {
    String.init(cString:)();
  }
  return v11;
}

BOOL sub_100003740(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_100003758()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000037A0()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000037CC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100003810()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0x736E6F6974706FLL;
  }
}

uint64_t sub_100003850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000047F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100003878()
{
  return 0;
}

void sub_100003884(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100003890(uint64_t a1)
{
  unint64_t v2 = sub_1000050D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000038CC(uint64_t a1)
{
  unint64_t v2 = sub_1000050D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100003908@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000C4638 != -1) {
    swift_once();
  }

  return sub_1000046F0((uint64_t)&xmmword_1000C6100, a1);
}

uint64_t sub_100003978()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  v23[6] = *(_OWORD *)(v0 + 96);
  v23[7] = v1;
  v23[8] = *(_OWORD *)(v0 + 128);
  long long v2 = *(_OWORD *)(v0 + 48);
  v23[2] = *(_OWORD *)(v0 + 32);
  v23[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  v23[4] = *(_OWORD *)(v0 + 64);
  v23[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v23[0] = *(_OWORD *)v0;
  v23[1] = v4;
  uint64_t v24 = *(void *)(v0 + 144);
  uint64_t v5 = sub_100003DD0(&qword_1000C4740);
  OptionGroup.wrappedValue.getter(v5, (uint64_t)v15);
  uint64_t v6 = v15[0];
  unint64_t v7 = v15[1];
  char v8 = v16;
  uint64_t v9 = v17;
  unint64_t v10 = v18;
  char v11 = v19;
  uint64_t v12 = v20;
  uint64_t v13 = v21;
  int v25 = v22;
  sub_100004364((uint64_t)v23);
  sub_1000090B0(v6, v7, v8, v9, v10, v11, (uint64_t)v23);
  sub_100004420((uint64_t)v23);
  sub_1000027F4(v6, v7, v8);
  sub_100002804(v9, v10, v11);
  return sub_100002804(v12, v13, v25);
}

__n128 sub_100003AB0@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = (char *)ArgumentVisibility.default.unsafeMutableAddressor();
  char v3 = *v2;
  unint64_t v4 = sub_10000474C();
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, v3, (uint64_t)&type metadata for UniversalOptions, v4, (uint64_t)&v26);
  long long v24 = v27;
  __n128 v25 = v26;
  long long v23 = v28;
  uint64_t v5 = v29;
  uint64_t v6 = v30;
  char v7 = v31;
  char v8 = v32;
  char v9 = v33;
  char v10 = v34;
  uint64_t v11 = v35;
  uint64_t v12 = v36;
  LOBYTE(v2) = *v2;
  unint64_t v13 = sub_1000047A0();
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, (char)v2, (uint64_t)&type metadata for BacktraceOptions, v13, (uint64_t)&v26);
  uint64_t v14 = v28;
  char v15 = BYTE8(v28);
  char v16 = BYTE9(v28);
  char v17 = BYTE10(v28);
  char v18 = BYTE11(v28);
  uint64_t v19 = v29;
  uint64_t v20 = v30;
  __n128 result = v26;
  long long v22 = v27;
  *(__n128 *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v24;
  *(_OWORD *)(a1 + 32) = v23;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 65) = v8;
  *(unsigned char *)(a1 + 66) = v9;
  *(unsigned char *)(a1 + 67) = v10;
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(__n128 *)(a1 + 88) = result;
  *(_OWORD *)(a1 + 104) = v22;
  *(void *)(a1 + 120) = v14;
  *(unsigned char *)(a1 + 128) = v15;
  *(unsigned char *)(a1 + 129) = v16;
  *(unsigned char *)(a1 + 130) = v17;
  *(unsigned char *)(a1 + 131) = v18;
  *(void *)(a1 + 136) = v19;
  *(void *)(a1 + 144) = v20;
  return result;
}

uint64_t static ParsableArguments._errorLabel.getter()
{
  return 0x726F727245;
}

double sub_100003C08@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000048E4(a1, (uint64_t)v9);
  if (!v2)
  {
    long long v5 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v9[8];
    *(void *)(a2 + 144) = v10;
    long long v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v7;
    double result = *(double *)v9;
    long long v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }
  return result;
}

unint64_t sub_100003C7C(uint64_t a1)
{
  unint64_t result = sub_100003CA4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100003CA4()
{
  unint64_t result = qword_1000C4730;
  if (!qword_1000C4730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4730);
  }
  return result;
}

unint64_t sub_100003CF8(uint64_t a1)
{
  unint64_t result = sub_100003D20();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100003D20()
{
  unint64_t result = qword_1000C4738;
  if (!qword_1000C4738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4738);
  }
  return result;
}

uint64_t sub_100003D74(unsigned int *a1, uint64_t (*a2)(void, void, void))
{
  return a2(*a1, *((void *)a1 + 1), a1[4]);
}

void sub_100003DB0(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100003DBC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100003DD0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void *sub_100003E14(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100027EF4(0, v2, 0);
    uint64_t v34 = a1 + 24;
    uint64_t v35 = a2;
    do
    {
      uint64_t v5 = *(void *)(v34 + 8 * v2);
      uint64_t v6 = *(void *)(a2 + 48);
      uint64_t v7 = *(void *)(a2 + 56);
      uint64_t v8 = qword_1000C46D0;
      swift_unknownObjectRetain();
      if (v8 != -1) {
        swift_once();
      }
      uint64_t v9 = off_1000C6488(v6, v7, v5, 0x8000000000000000);
      uint64_t v11 = v10;
      if (qword_1000C46B8 != -1) {
        swift_once();
      }
      uint64_t v12 = off_1000C6470(v9, v11);
      uint64_t v14 = v13;
      if (qword_1000C46C8 != -1) {
        swift_once();
      }
      if (off_1000C6480(v12, v14))
      {
        uint64_t v15 = String.init(cString:)();
        unint64_t v17 = v16;
      }
      else
      {
        uint64_t v15 = 0;
        unint64_t v17 = 0;
      }
      if (qword_1000C46B0 != -1) {
        swift_once();
      }
      if (off_1000C6468(v9, v11))
      {
        uint64_t v18 = String.init(cString:)();
        unint64_t v20 = v19;
      }
      else
      {
        uint64_t v18 = 0;
        unint64_t v20 = 0;
      }
      sub_100004614();
      v21._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 10272;
      v22._object = (void *)0xE200000000000000;
      String.append(_:)(v22);
      if (v17) {
        uint64_t v23 = v15;
      }
      else {
        uint64_t v23 = 0x6E776F6E6B6E753CLL;
      }
      if (v17) {
        unint64_t v24 = v17;
      }
      else {
        unint64_t v24 = 0xE90000000000003ELL;
      }
      unint64_t v25 = v24;
      String.append(_:)(*(Swift::String *)&v23);
      swift_bridgeObjectRelease();
      v26._countAndFlagsBits = 8233;
      v26._object = (void *)0xE200000000000000;
      String.append(_:)(v26);
      if (v20) {
        uint64_t v27 = v18;
      }
      else {
        uint64_t v27 = 0x6E776F6E6B6E753CLL;
      }
      if (v20) {
        unint64_t v28 = v20;
      }
      else {
        unint64_t v28 = 0xE90000000000003ELL;
      }
      unint64_t v29 = v28;
      String.append(_:)(*(Swift::String *)&v27);
      a2 = v35;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v31 = *((void *)&_swiftEmptyArrayStorage + 2);
      unint64_t v30 = *((void *)&_swiftEmptyArrayStorage + 3);
      if (v31 >= v30 >> 1) {
        sub_100027EF4((char *)(v30 > 1), v31 + 1, 1);
      }
      *((void *)&_swiftEmptyArrayStorage + 2) = v31 + 1;
      char v32 = (char *)&_swiftEmptyArrayStorage + 16 * v31;
      *((void *)v32 + 4) = 30768;
      *((void *)v32 + 5) = 0xE200000000000000;
      --v2;
    }
    while (v2);
  }
  return &_swiftEmptyArrayStorage;
}

void *sub_100004134(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  sub_100027EF4(0, 0, 0);
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v3)
  {
    uint64_t v29 = a1 + 24;
    Swift::Int v4 = 1;
    do
    {
      uint64_t v5 = *(void *)(v29 + 8 * v3);
      v6._countAndFlagsBits = 32;
      v6._object = (void *)0xE100000000000000;
      Swift::String v7 = String.init(repeating:count:)(v6, v4);
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      uint64_t v8 = a2(v5);
      unint64_t v10 = v9;
      uint64_t v12 = v11;
      unint64_t v14 = v13;
      sub_100004614();
      v15._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._countAndFlagsBits = 10272;
      v16._object = (void *)0xE200000000000000;
      String.append(_:)(v16);
      if (v10) {
        uint64_t v17 = v8;
      }
      else {
        uint64_t v17 = 0x6E776F6E6B6E753CLL;
      }
      if (v10) {
        unint64_t v18 = v10;
      }
      else {
        unint64_t v18 = 0xE90000000000003ELL;
      }
      unint64_t v19 = v18;
      String.append(_:)(*(Swift::String *)&v17);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 8233;
      v20._object = (void *)0xE200000000000000;
      String.append(_:)(v20);
      if (v14) {
        uint64_t v21 = v12;
      }
      else {
        uint64_t v21 = 0x6E776F6E6B6E753CLL;
      }
      if (v14) {
        unint64_t v22 = v14;
      }
      else {
        unint64_t v22 = 0xE90000000000003ELL;
      }
      unint64_t v23 = v22;
      String.append(_:)(*(Swift::String *)&v21);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 30768;
      v24._object = (void *)0xE200000000000000;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      unint64_t v26 = _swiftEmptyArrayStorage[2];
      unint64_t v25 = _swiftEmptyArrayStorage[3];
      if (v26 >= v25 >> 1) {
        sub_100027EF4((char *)(v25 > 1), v26 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v26 + 1;
      uint64_t v27 = &_swiftEmptyArrayStorage[2 * v26];
      v27[4] = 32;
      v27[5] = 0xE100000000000000;
      ++v4;
      --v3;
    }
    while (v3);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100004364(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 120);
  char v7 = *(unsigned char *)(a1 + 129);
  char v8 = *(unsigned char *)(a1 + 128);
  sub_100002594(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64), *(unsigned char *)(a1 + 65));
  swift_bridgeObjectRetain();
  sub_10000265C(v2, v3, v4, v5, v6, v8, v7);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100004420(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 120);
  char v7 = *(unsigned char *)(a1 + 129);
  char v8 = *(unsigned char *)(a1 + 128);
  sub_10000274C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64), *(unsigned char *)(a1 + 65));
  swift_bridgeObjectRelease();
  sub_100002814(v2, v3, v4, v5, v6, v8, v7);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000044DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100004510()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100004548(int a1, uint64_t a2, int a3)
{
  return sub_100007C00(a1, a2, a3, v3);
}

uint64_t sub_100004550()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100004588(unsigned int *a1)
{
  return (*(uint64_t (**)(void, void, void))(v1 + 16))(*a1, *((void *)a1 + 1), a1[4]);
}

unint64_t sub_1000045C0()
{
  unint64_t result = qword_1000C4750;
  if (!qword_1000C4750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4750);
  }
  return result;
}

unint64_t sub_100004614()
{
  unint64_t result = qword_1000C4760;
  if (!qword_1000C4760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4760);
  }
  return result;
}

uint64_t sub_100004668()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000046A0(uint64_t a1)
{
  return sub_1000035AC(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000046A8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000046F0(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_10000474C()
{
  unint64_t result = qword_1000C4778;
  if (!qword_1000C4778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4778);
  }
  return result;
}

unint64_t sub_1000047A0()
{
  unint64_t result = qword_1000C4780;
  if (!qword_1000C4780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4780);
  }
  return result;
}

uint64_t sub_1000047F4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001000A7890)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000048E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v4 = sub_100003DD0(&qword_1000C4788);
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v59 = v4;
  __chkstk_darwin(v4);
  char v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = (char *)ArgumentVisibility.default.unsafeMutableAddressor();
  char v8 = *v7;
  unint64_t v9 = sub_10000474C();
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, v8, (uint64_t)&type metadata for UniversalOptions, v9, (uint64_t)&v104);
  uint64_t v73 = v104;
  uint64_t v74 = v105;
  uint64_t v75 = v106;
  uint64_t v76 = v107;
  uint64_t v77 = v108;
  uint64_t v78 = v109;
  uint64_t v79 = v110;
  uint64_t v80 = v111;
  LODWORD(v72) = v112;
  char v10 = v113;
  int v129 = v114;
  int v71 = v115;
  uint64_t v81 = v117;
  uint64_t v82 = v116;
  unsigned __int8 v132 = v113;
  LOBYTE(v7) = *v7;
  unint64_t v11 = sub_1000047A0();
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, (char)v7, (uint64_t)&type metadata for BacktraceOptions, v11, (uint64_t)&v104);
  uint64_t v68 = v104;
  uint64_t v69 = v105;
  uint64_t v70 = v106;
  uint64_t v63 = v107;
  uint64_t v64 = v108;
  int v65 = v109;
  int v12 = BYTE1(v109);
  int v61 = BYTE3(v109);
  int v62 = BYTE2(v109);
  uint64_t v60 = v110;
  uint64_t v66 = v111;
  v67 = a1;
  char v131 = BYTE1(v109);
  sub_100005090(a1, a1[3]);
  sub_1000050D4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    unsigned __int8 v14 = v129;
    uint64_t v15 = v82;
    unsigned __int8 v16 = v71;
    uint64_t v17 = v66;
    char v18 = v65;
    uint64_t v20 = v63;
    uint64_t v19 = v64;
    sub_100005128((uint64_t)v67);
    uint64_t v104 = v73;
    uint64_t v105 = v74;
    uint64_t v106 = v75;
    uint64_t v107 = v76;
    uint64_t v108 = v77;
    uint64_t v109 = v78;
    uint64_t v110 = v79;
    uint64_t v111 = v80;
    unsigned __int8 v112 = v72;
    unsigned __int8 v113 = v132;
    unsigned __int8 v114 = v14;
    unsigned __int8 v115 = v16;
    uint64_t v116 = v15;
    uint64_t v117 = v81;
    uint64_t v118 = v68;
    uint64_t v119 = v69;
    uint64_t v120 = v70;
    uint64_t v121 = v20;
    uint64_t v122 = v19;
    char v123 = v18;
    char v124 = v131;
    char v125 = v62;
    char v126 = v61;
    uint64_t v127 = v60;
    uint64_t v128 = v17;
    return sub_100004420((uint64_t)&v104);
  }
  else
  {
    int v56 = v12;
    uint64_t v13 = v58;
    sub_100003DD0(&qword_1000C4740);
    LOBYTE(v83) = 0;
    sub_100005178((unint64_t *)&qword_1000C4798, &qword_1000C4740);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v21 = v113;
    int v129 = v114;
    int v22 = v115;
    uint64_t v23 = v117;
    uint64_t v82 = v116;
    int v50 = v112;
    uint64_t v54 = v105;
    uint64_t v55 = v104;
    uint64_t v52 = v107;
    uint64_t v53 = v106;
    uint64_t v47 = v109;
    uint64_t v48 = v108;
    uint64_t v46 = v110;
    uint64_t v51 = v111;
    sub_100002594(v104, v105, v106, v107, v108, v109, v110, v111, v112, v113);
    uint64_t v49 = v23;
    swift_bridgeObjectRetain();
    sub_10000274C(v73, v74, v75, v76, v77, v78, v79, v80, v72, v10);
    swift_bridgeObjectRelease();
    unsigned __int8 v132 = v21;
    sub_100003DD0(&qword_1000C4748);
    char v130 = 1;
    sub_100005178(&qword_1000C47A0, &qword_1000C4748);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v59);
    uint64_t v24 = v94;
    int v71 = v22;
    uint64_t v25 = v95;
    uint64_t v26 = v96;
    uint64_t v27 = v97;
    int v28 = v99;
    LODWORD(v81) = v100;
    LODWORD(v80) = v101;
    uint64_t v29 = v103;
    uint64_t v78 = v93;
    uint64_t v79 = v102;
    LODWORD(v77) = v98;
    HIDWORD(v45) = v21;
    sub_10000265C(v93, v94, v95, v96, v97, v98, v99);
    swift_bridgeObjectRetain();
    sub_100002814(v68, v69, v70, v63, v64, v65, v56);
    swift_bridgeObjectRelease();
    char v30 = v28;
    int v62 = v28;
    char v131 = v28;
    *(void *)&long long v83 = v55;
    *((void *)&v83 + 1) = v54;
    *(void *)&long long v84 = v53;
    *((void *)&v84 + 1) = v52;
    *(void *)&long long v85 = v48;
    *((void *)&v85 + 1) = v47;
    *(void *)&long long v86 = v46;
    *((void *)&v86 + 1) = v51;
    LOBYTE(v87) = v50;
    BYTE1(v87) = v21;
    BYTE2(v87) = v129;
    BYTE3(v87) = v71;
    *((void *)&v87 + 1) = v82;
    *(void *)&long long v88 = v49;
    uint64_t v31 = v78;
    *((void *)&v88 + 1) = v78;
    *(void *)&long long v89 = v24;
    uint64_t v74 = v25;
    uint64_t v75 = v24;
    *((void *)&v89 + 1) = v25;
    *(void *)&long long v90 = v26;
    uint64_t v72 = v27;
    uint64_t v73 = v26;
    *((void *)&v90 + 1) = v27;
    LOBYTE(v21) = v77;
    LOBYTE(v91) = v77;
    BYTE1(v91) = v30;
    BYTE2(v91) = v81;
    BYTE3(v91) = v80;
    *((void *)&v91 + 1) = v79;
    uint64_t v92 = v29;
    uint64_t v76 = v29;
    sub_100004364((uint64_t)&v83);
    sub_100002814(v31, v24, v25, v26, v27, v21, v62);
    swift_bridgeObjectRelease();
    uint64_t v33 = v54;
    uint64_t v32 = v55;
    uint64_t v35 = v52;
    uint64_t v34 = v53;
    uint64_t v37 = v47;
    uint64_t v36 = v48;
    uint64_t v38 = v46;
    sub_10000274C(v55, v54, v53, v52, v48, v47, v46, v51, v50, SBYTE4(v45));
    swift_bridgeObjectRelease();
    sub_100005128((uint64_t)v67);
    uint64_t v104 = v32;
    uint64_t v105 = v33;
    uint64_t v106 = v34;
    uint64_t v107 = v35;
    uint64_t v108 = v36;
    uint64_t v109 = v37;
    uint64_t v110 = v38;
    uint64_t v111 = v51;
    unsigned __int8 v112 = v50;
    unsigned __int8 v113 = v132;
    unsigned __int8 v114 = v129;
    unsigned __int8 v115 = v71;
    uint64_t v116 = v82;
    uint64_t v117 = v49;
    uint64_t v118 = v78;
    uint64_t v119 = v75;
    uint64_t v120 = v74;
    uint64_t v121 = v73;
    uint64_t v122 = v72;
    char v123 = v77;
    char v124 = v131;
    char v125 = v81;
    char v126 = v80;
    uint64_t v127 = v79;
    uint64_t v128 = v76;
    uint64_t result = sub_100004420((uint64_t)&v104);
    long long v40 = v90;
    uint64_t v41 = v57;
    *(_OWORD *)(v57 + 96) = v89;
    *(_OWORD *)(v41 + 112) = v40;
    *(_OWORD *)(v41 + 128) = v91;
    *(void *)(v41 + 144) = v92;
    long long v42 = v86;
    *(_OWORD *)(v41 + 32) = v85;
    *(_OWORD *)(v41 + 48) = v42;
    long long v43 = v88;
    *(_OWORD *)(v41 + 64) = v87;
    *(_OWORD *)(v41 + 80) = v43;
    long long v44 = v84;
    *(_OWORD *)uint64_t v41 = v83;
    *(_OWORD *)(v41 + 16) = v44;
  }
  return result;
}

void *sub_100005090(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1000050D4()
{
  unint64_t result = qword_1000C4790;
  if (!qword_1000C4790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4790);
  }
  return result;
}

uint64_t sub_100005128(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100005178(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000046A8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for DumpRawMetadata.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DumpRawMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DumpRawMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100005324);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_10000534C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100005354(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DumpRawMetadata.CodingKeys()
{
  return &type metadata for DumpRawMetadata.CodingKeys;
}

void *sub_100005370(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x288uLL);
}

uint64_t sub_100005378(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 648)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100005398(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 648) = v3;
  return result;
}

void type metadata accessor for kinfo_proc(uint64_t a1)
{
}

unint64_t sub_100005484()
{
  unint64_t result = qword_1000C47B0;
  if (!qword_1000C47B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C47B0);
  }
  return result;
}

unint64_t sub_1000054DC()
{
  unint64_t result = qword_1000C47B8;
  if (!qword_1000C47B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C47B8);
  }
  return result;
}

unint64_t sub_100005534()
{
  unint64_t result = qword_1000C47C0;
  if (!qword_1000C47C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C47C0);
  }
  return result;
}

void *sub_100005588(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x160uLL);
}

uint64_t sub_100005590(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 352)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000055B0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 344) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 352) = v3;
  return result;
}

void type metadata accessor for eproc(uint64_t a1)
{
}

void *sub_10000564C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x128uLL);
}

uint64_t sub_100005654(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 296)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100005674(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 296) = v3;
  return result;
}

void type metadata accessor for extern_proc(uint64_t a1)
{
}

uint64_t sub_100005700(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 152)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_10000575C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 152) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2;
    }
  }
  return result;
}

void type metadata accessor for __sFILE(uint64_t a1)
{
}

__n128 sub_1000057E8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10000580C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 76)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000582C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 72) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 76) = v3;
  return result;
}

void type metadata accessor for _ucred(uint64_t a1)
{
}

__n128 sub_100005880(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_1000058AC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000058CC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 104) = v3;
  return result;
}

void type metadata accessor for _pcred(uint64_t a1)
{
}

__n128 sub_100005924(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t sub_100005950(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100005970(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 144) = v3;
  return result;
}

void type metadata accessor for rusage(uint64_t a1)
{
}

void type metadata accessor for timeval(uint64_t a1)
{
}

__n128 initializeWithTake for ProcessMetadata(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000059F4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100005A14(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for itimerval(uint64_t a1)
{
}

__n128 sub_100005A54(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100005A68(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100005A88(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for vmspace(uint64_t a1)
{
}

uint64_t sub_100005AD8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100005AF8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for extern_proc.__Unnamed_union_p_un(uint64_t a1)
{
}

void type metadata accessor for __sbuf(uint64_t a1)
{
}

void sub_100005B48(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t destroy for DumpConformanceCache(uint64_t a1)
{
  sub_10000274C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64), *(unsigned char *)(a1 + 65));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DumpConformanceCache(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v14 = *(unsigned char *)(a2 + 64);
  char v15 = *(unsigned char *)(a2 + 65);
  sub_100002594(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v14, v15);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v14;
  *(unsigned char *)(a1 + 65) = v15;
  *(_WORD *)(a1 + 66) = *(_WORD *)(a2 + 66);
  uint64_t v12 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DumpConformanceCache(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v23 = *(unsigned char *)(a2 + 64);
  char v24 = *(unsigned char *)(a2 + 65);
  sub_100002594(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v23, v24);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(unsigned char *)(a1 + 64);
  char v21 = *(unsigned char *)(a1 + 65);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v23;
  *(unsigned char *)(a1 + 65) = v24;
  sub_10000274C(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  *(unsigned char *)(a1 + 67) = *(unsigned char *)(a2 + 67);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for DumpConformanceCache(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for DumpConformanceCache(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 64);
  char v5 = *(unsigned char *)(a2 + 65);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  char v14 = *(unsigned char *)(a1 + 64);
  char v15 = *(unsigned char *)(a1 + 65);
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(unsigned char *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 65) = v5;
  sub_10000274C(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  *(unsigned char *)(a1 + 67) = *(unsigned char *)(a2 + 67);
  uint64_t v18 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DumpConformanceCache(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DumpConformanceCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DumpConformanceCache()
{
  return &type metadata for DumpConformanceCache;
}

double sub_100005F44()
{
  CommandConfiguration.init(commandName:abstract:usage:discussion:version:shouldDisplay:subcommands:defaultSubcommand:helpNames:)(0, 0, 0xD00000000000003ELL, 0x80000001000A78B0, 0, 0, 0, 0xE000000000000000, (uint64_t)&v1, 0, 0xE000000000000000, 1, (__n128)(unint64_t)_swiftEmptyArrayStorage, 0, 0);
  xmmword_1000C61E8 = v7;
  unk_1000C61F8 = v8;
  qword_1000C6208 = v9;
  xmmword_1000C61A8 = v3;
  unk_1000C61B8 = v4;
  xmmword_1000C61C8 = v5;
  unk_1000C61D8 = v6;
  double result = *(double *)&v2;
  xmmword_1000C6188 = v1;
  unk_1000C6198 = v2;
  return result;
}

void sub_100005FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 40))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  long long v4 = (void *)0xE90000000000003ELL;
  uint64_t v5 = 0x6E776F6E6B6E753CLL;
  if (swift_reflection_typeRefForMetadata() && (uint64_t v6 = swift_reflection_copyNameForTypeRef()) != 0)
  {
    long long v7 = (void *)v6;
    uint64_t v8 = String.init(cString:)();
    uint64_t v10 = v9;
    free(v7);
  }
  else
  {
    uint64_t v8 = 0x6E776F6E6B6E753CLL;
    uint64_t v10 = (void *)0xE90000000000003ELL;
  }
  if (!*(void *)(a3 + 40)) {
    goto LABEL_13;
  }
  uint64_t v11 = swift_reflection_copyDemangledNameForProtocolDescriptor();
  if (v11)
  {
    uint64_t v12 = (void *)v11;
    uint64_t v5 = String.init(cString:)();
    long long v4 = v13;
    free(v12);
  }
  sub_100003DD0(&qword_1000C4758);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1000A2660;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  strcpy((char *)v20, "Conformance: ");
  HIWORD(v20[1]) = -4864;
  v15._countAndFlagsBits = v8;
  v15._object = v10;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 8250;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v5;
  v17._object = v4;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = v20[0];
  uint64_t v19 = v20[1];
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 32) = v18;
  *(void *)(v14 + 40) = v19;
  print(_:separator:terminator:)();

  swift_bridgeObjectRelease();
}

uint64_t static ExitCode.failure.getter()
{
  return 1;
}

Swift::Int sub_1000061D8()
{
  return Hasher._finalize()();
}

void sub_10000621C()
{
}

Swift::Int sub_100006244()
{
  return Hasher._finalize()();
}

uint64_t sub_100006284()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_10000629C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_100006334(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100006340(uint64_t a1)
{
  unint64_t v2 = sub_100006B50();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000637C(uint64_t a1)
{
  unint64_t v2 = sub_100006B50();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000063B8@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000C4640 != -1) {
    swift_once();
  }

  return sub_1000046F0((uint64_t)&xmmword_1000C6188, a1);
}

uint64_t sub_100006424()
{
  uint64_t v0 = sub_100003DD0(&qword_1000C4740);
  OptionGroup.wrappedValue.getter(v0, (uint64_t)&v10);
  uint64_t v1 = v10;
  uint64_t v2 = v11;
  char v3 = v12;
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  char v6 = v15;
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  int v19 = v18;
  sub_100009BFC(v10, v11, v12, v13, v14, v15);
  sub_1000027F4(v1, v2, v3);
  sub_100002804(v4, v5, v6);
  return sub_100002804(v7, v8, v19);
}

double sub_100006530@<D0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)ArgumentVisibility.default.unsafeMutableAddressor();
  unint64_t v3 = sub_10000474C();
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, v2, (uint64_t)&type metadata for UniversalOptions, v3, (uint64_t)v14);
  char v4 = v15;
  char v5 = v16;
  char v6 = v17;
  char v7 = v18;
  uint64_t v8 = v19;
  uint64_t v9 = v20;
  double result = *(double *)v14;
  long long v11 = v14[1];
  long long v12 = v14[2];
  long long v13 = v14[3];
  *(_OWORD *)a1 = v14[0];
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v13;
  *(unsigned char *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 65) = v5;
  *(unsigned char *)(a1 + 66) = v6;
  *(unsigned char *)(a1 + 67) = v7;
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v9;
  return result;
}

double sub_1000065BC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100006710(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

unint64_t sub_100006618(uint64_t a1)
{
  unint64_t result = sub_100006640();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100006640()
{
  unint64_t result = qword_1000C4820;
  if (!qword_1000C4820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4820);
  }
  return result;
}

unint64_t sub_100006694(uint64_t a1)
{
  unint64_t result = sub_1000066BC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000066BC()
{
  unint64_t result = qword_1000C4828;
  if (!qword_1000C4828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4828);
  }
  return result;
}

uint64_t sub_100006710@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v3 = sub_100003DD0(&qword_1000C4830);
  uint64_t v50 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  __chkstk_darwin(v3);
  long long v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = *(unsigned char *)ArgumentVisibility.default.unsafeMutableAddressor();
  unint64_t v7 = sub_10000474C();
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, v6, (uint64_t)&type metadata for UniversalOptions, v7, (uint64_t)&v59);
  uint64_t v52 = v60;
  uint64_t v53 = v59;
  uint64_t v8 = v62;
  uint64_t v73 = v61;
  uint64_t v9 = v63;
  uint64_t v56 = v65;
  uint64_t v57 = v64;
  uint64_t v55 = v66;
  int v10 = v67;
  int v11 = v68;
  uint64_t v58 = v72;
  sub_100005090(a1, a1[3]);
  sub_100006B50();
  uint64_t v49 = v5;
  char v12 = v73;
  uint64_t v13 = v54;
  uint64_t v14 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v15 = v53;
  if (v13)
  {
    sub_100005128((uint64_t)a1);
    sub_10000274C(v15, v14, v12, v8, v9, v57, v56, v55, v10, v11);
    return swift_bridgeObjectRelease();
  }
  else
  {
    int v45 = v11;
    int v46 = v10;
    uint64_t v47 = v9;
    uint64_t v54 = v8;
    uint64_t v16 = v53;
    sub_100003DD0(&qword_1000C4740);
    sub_100006BA4();
    uint64_t v17 = v51;
    char v18 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v18, v17);
    uint64_t v19 = v59;
    uint64_t v20 = v60;
    char v21 = v61;
    uint64_t v42 = v62;
    uint64_t v41 = v63;
    uint64_t v39 = v64;
    uint64_t v38 = v65;
    uint64_t v37 = v66;
    int v43 = v67;
    LODWORD(v51) = v68;
    LODWORD(v50) = v69;
    LODWORD(v49) = v70;
    uint64_t v44 = v71;
    uint64_t v40 = v72;
    uint64_t v35 = v59;
    uint64_t v34 = v60;
    uint64_t v36 = v61;
    sub_100002594(v59, v60, v61, v62, v63, v64, v65, v66, v67, v68);
    swift_bridgeObjectRetain();
    sub_10000274C(v16, v14, v73, v54, v47, v57, v56, v55, v46, v45);
    swift_bridgeObjectRelease();
    sub_100005128((uint64_t)a1);
    char v22 = v43;
    uint64_t v23 = v20;
    char v24 = v21;
    uint64_t v25 = v42;
    uint64_t v26 = v41;
    uint64_t v27 = v39;
    uint64_t v28 = v38;
    uint64_t v29 = v37;
    sub_10000274C(v19, v23, v24, v42, v41, v39, v38, v37, v43, v51);
    uint64_t v30 = v40;
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v32 = v48;
    uint64_t v33 = v34;
    *uint64_t v48 = v35;
    v32[1] = v33;
    v32[2] = v36;
    v32[3] = v25;
    v32[4] = v26;
    v32[5] = v27;
    v32[6] = v28;
    v32[7] = v29;
    *((unsigned char *)v32 + 64) = v22;
    *((unsigned char *)v32 + 65) = v51;
    *((unsigned char *)v32 + 66) = v50;
    *((unsigned char *)v32 + 67) = (_BYTE)v49;
    v32[9] = v44;
    v32[10] = v30;
  }
  return result;
}

unint64_t sub_100006B50()
{
  unint64_t result = qword_1000C4838;
  if (!qword_1000C4838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4838);
  }
  return result;
}

unint64_t sub_100006BA4()
{
  unint64_t result = qword_1000C4798;
  if (!qword_1000C4798)
  {
    sub_1000046A8(&qword_1000C4740);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4798);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DumpConformanceCache.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for DumpConformanceCache.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100006CF0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t static ExitCode.success.getter()
{
  return 0;
}

ValueMetadata *type metadata accessor for DumpConformanceCache.CodingKeys()
{
  return &type metadata for DumpConformanceCache.CodingKeys;
}

unint64_t sub_100006D34()
{
  unint64_t result = qword_1000C4840;
  if (!qword_1000C4840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4840);
  }
  return result;
}

unint64_t sub_100006D8C()
{
  unint64_t result = qword_1000C4848;
  if (!qword_1000C4848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4848);
  }
  return result;
}

unint64_t sub_100006DE4()
{
  unint64_t result = qword_1000C4850;
  if (!qword_1000C4850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4850);
  }
  return result;
}

uint64_t sub_100006E38()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = sub_10002A40C(_swiftEmptyArrayStorage);
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = sub_10000804C;
  *(void *)(v1 + 24) = v0;
  swift_retain_n();
  uint64_t v2 = swift_reflection_iterateMetadataAllocationBacktraces();
  swift_release();
  if (v2)
  {
    uint64_t v3 = String.init(cString:)();
    uint64_t v5 = v4;
    sub_1000045C0();
    swift_allocError();
    *char v6 = v3;
    v6[1] = v5;
    swift_willThrow();
    swift_release_n();
  }
  else
  {
    swift_release();
    swift_beginAccess();
    uint64_t v3 = *(void *)(v0 + 16);
    swift_bridgeObjectRetain();
    swift_release();
  }
  return v3;
}

uint64_t sub_100006FBC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100006FC8(*a1, *a2);
}

uint64_t sub_100006FC8(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x73736572646461;
    }
    else {
      uint64_t v3 = 1702521203;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE700000000000000;
    }
    else {
      unint64_t v4 = 0xE400000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x73736572646461;
      }
      else {
        uint64_t v6 = 1702521203;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE700000000000000;
      }
      else {
        unint64_t v7 = 0xE400000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 6775156;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE300000000000000;
  if (v3 != 6775156)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1000070C4(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x73736572646461;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x73736572646461;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x697461636F6C6C61;
      unint64_t v3 = 0xEA00000000006E6FLL;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1701667182;
      break;
    case 3:
      uint64_t v5 = 0x4F79617272417369;
      unint64_t v3 = 0xEE007373616C4366;
      break;
    case 4:
      uint64_t v5 = 0x65676162726167;
      break;
    case 5:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x74657366666FLL;
      break;
    case 6:
      uint64_t v5 = 0x636172746B636162;
      unint64_t v3 = 0xE900000000000065;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEA00000000006E6FLL;
      if (v5 == 0x697461636F6C6C61) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1701667182) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0xEE007373616C4366;
      if (v5 != 0x4F79617272417369) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      if (v5 != 0x65676162726167) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x74657366666FLL;
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0xE900000000000065;
      if (v5 != 0x636172746B636162) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int sub_100007318()
{
  return Hasher._finalize()();
}

uint64_t sub_1000073AC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000742C()
{
  return Hasher._finalize()();
}

unint64_t sub_1000074BC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100007FC8(*a1);
  *a2 = result;
  return result;
}

void sub_1000074EC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE300000000000000;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x73736572646461;
  if (v2 != 1)
  {
    uint64_t v5 = 1702521203;
    unint64_t v4 = 0xE400000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 6775156;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10000753C()
{
  uint64_t v1 = 0x73736572646461;
  if (*v0 != 1) {
    uint64_t v1 = 1702521203;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 6775156;
  }
}

unint64_t sub_100007588@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100007FC8(a1);
  *a2 = result;
  return result;
}

void sub_1000075B0(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1000075BC(uint64_t a1)
{
  unint64_t v2 = sub_1000077CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000075F8(uint64_t a1)
{
  unint64_t v2 = sub_1000077CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t swift_metadata_allocation.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  v10[1] = a3;
  uint64_t v5 = sub_100003DD0(&qword_1000C4858);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005090(a1, a1[3]);
  sub_1000077CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000077CC()
{
  unint64_t result = qword_1000C4860;
  if (!qword_1000C4860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4860);
  }
  return result;
}

uint64_t sub_100007820(void *a1)
{
  return swift_metadata_allocation.encode(to:)(a1, *v1, *((void *)v1 + 1));
}

BOOL static swift_metadata_allocation.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a2 == a5;
}

BOOL static swift_metadata_allocation.< infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return a2 < a5;
}

unint64_t sub_100007860()
{
  unint64_t result = qword_1000C4868;
  if (!qword_1000C4868)
  {
    type metadata accessor for swift_metadata_allocation(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4868);
  }
  return result;
}

BOOL sub_1000078B8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) < *(void *)(a2 + 8);
}

BOOL sub_1000078CC(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8) >= *(void *)(a1 + 8);
}

BOOL sub_1000078E0(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) >= *(void *)(a2 + 8);
}

BOOL sub_1000078F4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8) < *(void *)(a1 + 8);
}

BOOL sub_100007908(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

uint64_t _s10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100007A78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *sub_100007AA0(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *_s10CodingKeysOMa()
{
  return &_s10CodingKeysON;
}

unint64_t sub_100007ABC()
{
  unint64_t result = qword_1000C4870;
  if (!qword_1000C4870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4870);
  }
  return result;
}

unint64_t sub_100007B14()
{
  unint64_t result = qword_1000C4878;
  if (!qword_1000C4878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4878);
  }
  return result;
}

unint64_t sub_100007B6C()
{
  unint64_t result = qword_1000C4880;
  if (!qword_1000C4880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4880);
  }
  return result;
}

uint64_t CommandConfiguration.commandName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100007C00(int a1, uint64_t a2, int a3, uint64_t a4)
{
  int v8 = (uint64_t *)(a4 + 16);
  swift_beginAccess();
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a4 + 16) = v9;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100011ACC(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
    uint64_t v9 = result;
    *int v8 = result;
  }
  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    uint64_t result = (uint64_t)sub_100011ACC((char *)(v11 > 1), v12 + 1, 1, (char *)v9);
    uint64_t v9 = result;
    *int v8 = result;
  }
  *(void *)(v9 + 16) = v12 + 1;
  unint64_t v13 = v9 + 24 * v12;
  *(_DWORD *)(v13 + 32) = a1;
  *(void *)(v13 + 40) = a2;
  *(_DWORD *)(v13 + 48) = a3;
  return result;
}

uint64_t sub_100007CE8(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  unsigned int v6 = sub_1000270D8(a3, a2);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *(void *)(a4 + 16);
  *(void *)(a4 + 16) = 0x8000000000000000;
  sub_100026000((uint64_t)v6, a1, isUniquelyReferenced_nonNull_native);
  *(void *)(a4 + 16) = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_100007D84()
{
  uint64_t result = swift_reflection_typeRefForMetadata();
  if (result)
  {
    uint64_t result = swift_reflection_copyNameForTypeRef();
    if (result)
    {
      uint64_t v1 = (void *)result;
      String.init(cString:)();
      free(v1);
      v2._object = (void *)0x80000001000A78F0;
      v2._countAndFlagsBits = 0xD00000000000001DLL;
      LOBYTE(v1) = String.hasPrefix(_:)(v2);
      swift_bridgeObjectRelease();
      if ((v1 & 1) == 0) {
        return 0;
      }
      uint64_t result = swift_reflection_typeRefForMetadata();
      if (!result) {
        return result;
      }
      if (swift_reflection_genericArgumentCountOfTypeRef() == 1)
      {
        uint64_t result = swift_reflection_genericArgumentOfTypeRef();
        if (result)
        {
          swift_reflection_infoForTypeRef();
          return v3 == 13;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100007E84(uint64_t result, uint64_t a2, void (**a3)(uint64_t *, uint64_t *))
{
  if (a3)
  {
    int v3 = *a3;
    uint64_t v4 = a2;
    uint64_t v5 = result;
    swift_retain();
    v3(&v5, &v4);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100007EE4(uint64_t result, void (**a2)(int *))
{
  if (a2)
  {
    int v2 = *(_DWORD *)(result + 16);
    uint64_t v3 = *(void *)(result + 8);
    uint64_t v4 = *a2;
    int v5 = *(_DWORD *)result;
    uint64_t v6 = v3;
    int v7 = v2;
    swift_retain();
    v4(&v5);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100007F54(uint64_t result, uint64_t a2, uint64_t a3, void (**a4)(uint64_t *, uint64_t *, uint64_t *))
{
  if (!a4)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (!a3)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v4 = *a4;
  uint64_t v6 = a2;
  uint64_t v7 = result;
  uint64_t v5 = a3;
  swift_retain();
  v4(&v7, &v6, &v5);

  return swift_release();
}

unint64_t sub_100007FC8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000B9F68, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_100008014()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000804C(uint64_t a1, uint64_t a2, const void *a3)
{
  return sub_100007CE8(a1, a2, a3, v3);
}

uint64_t sub_100008054()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000808C(void *a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))(v3 + 16))(*a1, *a2, *a3);
}

void *_s5ErrorVwCP(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s5ErrorVwxx()
{
  return swift_bridgeObjectRelease();
}

void *_s5ErrorVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s5ErrorVwta(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5ErrorVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s5ErrorVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s5ErrorVMa()
{
  return &_s5ErrorVN;
}

uint64_t sub_100008208()
{
  uint64_t v0 = sub_100003DD0(&qword_1000C48E8);
  Flag.wrappedValue.getter(v0, (uint64_t)&v2);
  if (v2) {
    return 1;
  }
  Flag.wrappedValue.getter(v0, (uint64_t)&v2);
  if (v2) {
    return 0;
  }
  else {
    return 2;
  }
}

uint64_t sub_1000082A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  char v4 = *((unsigned char *)v0 + 16);
  *(void *)&long long v16 = *v0;
  *((void *)&v16 + 1) = v3;
  char v17 = v4;
  uint64_t v5 = sub_100003DD0(&qword_1000C48D8);
  Argument.wrappedValue.getter(v5, (uint64_t)v18);
  uint64_t v6 = v19;
  swift_bridgeObjectRelease();
  if (v6)
  {
    char v7 = *((unsigned char *)v1 + 64);
    long long v16 = *((_OWORD *)v1 + 3);
    char v17 = v7;
    uint64_t v8 = sub_100003DD0(&qword_1000C48E8);
    Flag.wrappedValue.getter(v8, (uint64_t)v18);
    if (v18[0]) {
      goto LABEL_7;
    }
  }
  *(void *)&long long v16 = v2;
  *((void *)&v16 + 1) = v3;
  char v17 = v4;
  Argument.wrappedValue.getter(v5, (uint64_t)v18);
  uint64_t v9 = v19;
  swift_bridgeObjectRelease();
  if (v9) {
    goto LABEL_5;
  }
  char v10 = *((unsigned char *)v1 + 64);
  long long v16 = *((_OWORD *)v1 + 3);
  char v17 = v10;
  uint64_t v11 = sub_100003DD0(&qword_1000C48E8);
  Flag.wrappedValue.getter(v11, (uint64_t)v18);
  if ((v18[0] & 1) == 0)
  {
LABEL_7:
    sub_10000D5F0();
    swift_allocError();
    *uint64_t v15 = 0xD000000000000031;
    v15[1] = 0x80000001000A79D0;
    return swift_willThrow();
  }
  else
  {
LABEL_5:
    char v12 = *((unsigned char *)v1 + 64);
    long long v16 = *((_OWORD *)v1 + 3);
    char v17 = v12;
    uint64_t v13 = sub_100003DD0(&qword_1000C48E8);
    uint64_t result = Flag.wrappedValue.getter(v13, (uint64_t)v18);
    if (v18[0] == 1)
    {
      LOBYTE(v16) = v18[0];
      return Option.wrappedValue.setter((uint64_t)&v16, v13);
    }
  }
  return result;
}

BOOL sub_100008444(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100008460()
{
  uint64_t v1 = 0x70726F436B726F66;
  if (*v0 != 1) {
    uint64_t v1 = 7105633;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6950724F656D616ELL;
  }
}

uint64_t sub_1000084BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10000D644(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000084E4(uint64_t a1)
{
  unint64_t v2 = sub_10000EF38();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100008520(uint64_t a1)
{
  unint64_t v2 = sub_10000EF38();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10000855C@<Q0>(uint64_t a1@<X8>)
{
  sub_10000D7A4((uint64_t)v4);
  long long v2 = v4[3];
  *(_OWORD *)(a1 + 32) = v4[2];
  *(_OWORD *)(a1 + 48) = v2;
  *(unsigned char *)(a1 + 64) = v5;
  __n128 result = (__n128)v4[1];
  *(_OWORD *)a1 = v4[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000085AC()
{
  return sub_1000082A4();
}

__n128 sub_1000085C4@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10000D95C(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(unsigned char *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100008618()
{
  return 0x636172746B636162;
}

uint64_t sub_100008650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10000DEBC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100008678(uint64_t a1)
{
  unint64_t v2 = sub_10000EEE4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000086B4(uint64_t a1)
{
  unint64_t v2 = sub_10000EEE4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t (*sub_1000086F0@<X0>(uint64_t a1@<X8>))(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v2._object = (void *)0x80000001000A7B30;
  v2._countAndFlagsBits = 0xD000000000000026;
  ArgumentHelp.init(stringLiteral:)(&v14, v2);
  ArgumentParser::ArgumentHelp v17 = v14;
  uint64_t v3 = static NameSpecification.long.getter();
  char v4 = Flag<A>.init(wrappedValue:name:help:)(0, v3, (uint64_t)&v17);
  uint64_t v6 = v5;
  char v8 = v7;
  v9._countAndFlagsBits = 0xD00000000000002ELL;
  v9._object = (void *)0x80000001000A7B60;
  ArgumentHelp.init(stringLiteral:)(&v15, v9);
  ArgumentParser::ArgumentHelp v16 = v15;
  uint64_t v10 = static NameSpecification.long.getter();
  uint64_t result = Flag<A>.init(wrappedValue:name:help:)(0, v10, (uint64_t)&v16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v8 & 1;
  *(void *)(a1 + 24) = result;
  *(void *)(a1 + 32) = v12;
  *(unsigned char *)(a1 + 40) = v13 & 1;
  return result;
}

double sub_1000087FC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10000DFD8(a1, (uint64_t *)&v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_100008840()
{
  uint64_t result = 0x64656C676E616DLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1852797802;
      break;
    case 2:
      uint64_t result = 0x7972616D6D7573;
      break;
    case 3:
      uint64_t result = 0x694674757074756FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000088C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10000E428(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000088F0(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000088FC(uint64_t a1)
{
  unint64_t v2 = sub_10000EE90();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100008938(uint64_t a1)
{
  unint64_t v2 = sub_10000EE90();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100008974@<D0>(_OWORD *a1@<X8>)
{
  sub_10000E5E0((uint64_t)v5);
  long long v2 = v5[3];
  a1[2] = v5[2];
  a1[3] = v2;
  a1[4] = v6[0];
  *(_OWORD *)((char *)a1 + 73) = *(_OWORD *)((char *)v6 + 9);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *a1 = v5[0];
  a1[1] = v4;
  return result;
}

double sub_1000089C4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10000E804(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    a2[2] = v7[2];
    a2[3] = v5;
    a2[4] = v8[0];
    *(_OWORD *)((char *)a2 + 73) = *(_OWORD *)((char *)v8 + 9);
    double result = *(double *)v7;
    long long v6 = v7[1];
    *a2 = v7[0];
    a2[1] = v6;
  }
  return result;
}

unint64_t sub_100008A18()
{
  sub_100003DD0(&qword_1000C48A0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1000A2CC0;
  unint64_t v1 = sub_100008EB8();
  *(void *)(v0 + 32) = &type metadata for DumpConformanceCache;
  *(void *)(v0 + 40) = v1;
  unint64_t v2 = sub_100008F0C();
  *(void *)(v0 + 48) = &type metadata for DumpRawMetadata;
  *(void *)(v0 + 56) = v2;
  unint64_t v3 = sub_100008F60();
  *(void *)(v0 + 64) = &type metadata for DumpGenericMetadata;
  *(void *)(v0 + 72) = v3;
  unint64_t v4 = sub_100008FB4();
  *(void *)(v0 + 80) = &type metadata for DumpCacheNodes;
  *(void *)(v0 + 88) = v4;
  unint64_t v5 = sub_100009008();
  *(void *)(v0 + 96) = &type metadata for DumpArrays;
  *(void *)(v0 + 104) = v5;
  unint64_t result = sub_10000905C();
  *(void *)(v0 + 112) = &type metadata for DumpConcurrency;
  *(void *)(v0 + 120) = result;
  qword_1000C6210 = v0;
  return result;
}

double sub_100008AC4()
{
  if (qword_1000C4648 != -1) {
    swift_once();
  }
  uint64_t v1 = swift_bridgeObjectRetain();
  CommandConfiguration.init(commandName:abstract:usage:discussion:version:shouldDisplay:subcommands:defaultSubcommand:helpNames:)(0, 0, 0xD000000000000018, 0x80000001000A7910, 0, 0, 0, 0xE000000000000000, (uint64_t)&v2, 0, 0xE000000000000000, 1, (__n128)(unint64_t)v1, 0, 0);
  xmmword_1000C6278 = v8;
  unk_1000C6288 = v9;
  qword_1000C6298 = v10;
  xmmword_1000C6238 = v4;
  unk_1000C6248 = v5;
  xmmword_1000C6258 = v6;
  unk_1000C6268 = v7;
  double result = *(double *)&v3;
  xmmword_1000C6218 = v2;
  unk_1000C6228 = v3;
  return result;
}

uint64_t sub_100008BAC@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000C4650 != -1) {
    swift_once();
  }

  return sub_1000046F0((uint64_t)&xmmword_1000C6218, a1);
}

void sub_100008C18()
{
}

uint64_t sub_100008C30(uint64_t a1)
{
  return sub_100005128(a1);
}

int main(int argc, const char **argv, const char **envp)
{
  unint64_t v3 = sub_100008D0C();
  static ParsableCommand.parseAsRoot(_:)(0, v3, (uint64_t)v7);
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  sub_100008DB4((uint64_t)v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  sub_100005128((uint64_t)v7);
  return 0;
}

unint64_t sub_100008D0C()
{
  unint64_t result = qword_1000C4888;
  if (!qword_1000C4888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4888);
  }
  return result;
}

unint64_t sub_100008D60()
{
  unint64_t result = qword_1000C4890;
  if (!qword_1000C4890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4890);
  }
  return result;
}

uint64_t sub_100008DB4(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SwiftInspect()
{
  return &type metadata for SwiftInspect;
}

unint64_t sub_100008E14(uint64_t a1)
{
  unint64_t result = sub_100008E3C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100008E3C()
{
  unint64_t result = qword_1000C4898;
  if (!qword_1000C4898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4898);
  }
  return result;
}

unint64_t sub_100008E90(uint64_t a1)
{
  unint64_t result = sub_100008D60();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100008EB8()
{
  unint64_t result = qword_1000C48A8;
  if (!qword_1000C48A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C48A8);
  }
  return result;
}

unint64_t sub_100008F0C()
{
  unint64_t result = qword_1000C48B0;
  if (!qword_1000C48B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C48B0);
  }
  return result;
}

unint64_t sub_100008F60()
{
  unint64_t result = qword_1000C48B8;
  if (!qword_1000C48B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C48B8);
  }
  return result;
}

unint64_t sub_100008FB4()
{
  unint64_t result = qword_1000C48C0;
  if (!qword_1000C48C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C48C0);
  }
  return result;
}

unint64_t sub_100009008()
{
  unint64_t result = qword_1000C48C8;
  if (!qword_1000C48C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C48C8);
  }
  return result;
}

unint64_t sub_10000905C()
{
  unint64_t result = qword_1000C48D0;
  if (!qword_1000C48D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C48D0);
  }
  return result;
}

uint64_t sub_1000090B0(uint64_t a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v66 = a1;
  unint64_t v67 = a2;
  char v68 = a3 & 1;
  uint64_t v10 = sub_100003DD0(&qword_1000C48D8);
  Argument.wrappedValue.getter(v10, (uint64_t)&v70);
  uint64_t v11 = v71;
  if (v71)
  {
    uint64_t v12 = v70;
    if (sub_10001481C(v70, (unint64_t)v71))
    {
      mach_port_t v13 = getpid();
    }
    else
    {
      if (qword_1000C4688 != -1) {
        swift_once();
      }
      uint64_t v47 = (uint64_t (*)(void))off_1000C6440;
      NSString v48 = String._bridgeToObjectiveC()();
      mach_port_t v13 = v47();

      if (!v13)
      {
        sub_100003DD0(&qword_1000C4758);
        uint64_t v57 = swift_allocObject();
        *(_OWORD *)(v57 + 16) = xmmword_1000A2660;
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        uint64_t v66 = 0xD00000000000001ALL;
        unint64_t v67 = 0x80000001000A79B0;
        v58._countAndFlagsBits = v12;
        v58._object = v11;
        String.append(_:)(v58);
        swift_bridgeObjectRelease();
        *(void *)(v57 + 56) = &type metadata for String;
        *(void *)(v57 + 32) = 0xD00000000000001ALL;
        *(void *)(v57 + 40) = 0x80000001000A79B0;
        if (qword_1000C4660 == -1) {
          goto LABEL_33;
        }
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = a4;
    unint64_t v67 = a5;
    char v68 = a6 & 1;
    uint64_t v49 = sub_100003DD0(&qword_1000C48E8);
    Flag.wrappedValue.getter(v49, (uint64_t)&v70);
    char v50 = v70;
    type metadata accessor for DarwinRemoteProcess();
    swift_allocObject();
    uint64_t v51 = sub_100010A84(v13, v50);
    if (v51)
    {
      sub_100002DE0((uint64_t)v51, (uint64_t)&off_1000C4B78, a7);
      return swift_release();
    }
    sub_100003DD0(&qword_1000C4758);
    uint64_t v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = xmmword_1000A2660;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    uint64_t v66 = 0xD00000000000002ALL;
    unint64_t v67 = 0x80000001000A7980;
    LODWORD(v70) = v13;
    v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    *(void *)(v54 + 56) = &type metadata for String;
    *(void *)(v54 + 32) = 0xD00000000000002ALL;
    *(void *)(v54 + 40) = 0x80000001000A7980;
    if (qword_1000C4660 == -1)
    {
LABEL_33:
      swift_beginAccess();
      sub_10000A900();
      print<A>(_:separator:terminator:to:)();
      swift_endAccess();
      return swift_bridgeObjectRelease();
    }
LABEL_37:
    swift_once();
    goto LABEL_33;
  }
  ArgumentParser::ArgumentHelp v14 = sub_100015634();
  if (!v14)
  {
    sub_100003DD0(&qword_1000C4758);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_1000A2660;
    *(void *)(v56 + 56) = &type metadata for String;
    *(void *)(v56 + 32) = 0xD00000000000001FLL;
    *(void *)(v56 + 40) = 0x80000001000A7930;
LABEL_30:
    if (qword_1000C4660 != -1) {
      goto LABEL_36;
    }
    goto LABEL_31;
  }
  uint64_t v15 = *((void *)v14 + 2);
  if (!v15)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    sub_100003DD0(&qword_1000C4758);
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_1000A2660;
    *(void *)(v53 + 56) = &type metadata for String;
    *(void *)(v53 + 32) = 0;
    *(void *)(v53 + 40) = 0xE000000000000000;
    goto LABEL_30;
  }
  uint64_t v65 = 0;
  uint64_t v16 = 0;
  uint64_t v62 = v14 + 32;
  char v59 = a6;
  uint64_t v61 = *((void *)v14 + 2);
  while (1)
  {
    mach_port_t v17 = *(_DWORD *)&v62[4 * v16++];
    uint64_t v66 = 91;
    unint64_t v67 = 0xE100000000000000;
    uint64_t v70 = v65;
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 47;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    uint64_t v70 = v16;
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 47;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    uint64_t v70 = v15;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 93;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    uint64_t v25 = v66;
    unint64_t v24 = v67;
    uint64_t v66 = a4;
    unint64_t v67 = a5;
    char v68 = a6 & 1;
    uint64_t v26 = sub_100003DD0(&qword_1000C48E8);
    Flag.wrappedValue.getter(v26, (uint64_t)&v70);
    char v27 = v70;
    type metadata accessor for DarwinRemoteProcess();
    swift_allocObject();
    uint64_t v28 = sub_100010A84(v17, v27);
    uint64_t v72 = v8;
    if (!v28)
    {
      sub_100003DD0(&qword_1000C4758);
      uint64_t v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_1000A2CD0;
      *(void *)(v41 + 56) = &type metadata for String;
      *(void *)(v41 + 32) = v25;
      *(void *)(v41 + 40) = v24;
      uint64_t v66 = 0;
      unint64_t v67 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      uint64_t v66 = 0xD00000000000002DLL;
      unint64_t v67 = 0x80000001000A7950;
      LODWORD(v70) = v17;
      v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      uint64_t v43 = v66;
      unint64_t v44 = v67;
      *(void *)(v41 + 88) = &type metadata for String;
      *(void *)(v41 + 64) = v43;
      *(void *)(v41 + 72) = v44;
      if (qword_1000C4660 != -1) {
        swift_once();
      }
      swift_beginAccess();
      sub_10000A900();
      print<A>(_:separator:terminator:to:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      uint64_t v15 = v61;
      uint64_t v8 = v72;
      goto LABEL_17;
    }
    uint64_t v29 = (uint64_t)v28;
    sub_100003DD0(&qword_1000C4758);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_1000A2CD0;
    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 32) = v25;
    *(void *)(v30 + 40) = v24;
    uint64_t v70 = 0;
    uint64_t v71 = (void *)0xE000000000000000;
    v31._countAndFlagsBits = sub_100010648();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 40;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    swift_getObjectType();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    *(_DWORD *)sub_10000A954(&v66) = *(_DWORD *)(v29 + 20);
    _print_unlocked<A, B>(_:_:)();
    sub_100005128((uint64_t)&v66);
    v33._countAndFlagsBits = 41;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    uint64_t v34 = v70;
    unint64_t v35 = (unint64_t)v71;
    *(void *)(v30 + 88) = &type metadata for String;
    *(void *)(v30 + 64) = v34;
    *(void *)(v30 + 72) = v35;
    if (qword_1000C4660 != -1) {
      swift_once();
    }
    swift_beginAccess();
    sub_10000A900();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    uint64_t v36 = v72;
    sub_100002DE0(v29, (uint64_t)&off_1000C4B78, a7);
    uint64_t v8 = v36;
    if (!v36) {
      break;
    }
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_1000A2660;
    uint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    v38._countAndFlagsBits = 2108704;
    v38._object = (void *)0xE300000000000000;
    String.append(_:)(v38);
    uint64_t v70 = v36;
    sub_100003DD0(&qword_1000C48F0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v39 = v66;
    unint64_t v40 = v67;
    *(void *)(v37 + 56) = &type metadata for String;
    *(void *)(v37 + 32) = v39;
    *(void *)(v37 + 40) = v40;
    swift_beginAccess();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    uint64_t v8 = 0;
    a6 = v59;
LABEL_16:
    swift_release_n();
    uint64_t v15 = v61;
LABEL_17:
    sub_100003DD0(&qword_1000C4758);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_1000A2660;
    *(void *)(v46 + 56) = &type metadata for String;
    *(void *)(v46 + 32) = 1261460251;
    *(void *)(v46 + 40) = 0xE400000000000000;
    if (qword_1000C4660 != -1) {
      swift_once();
    }
    swift_beginAccess();
    sub_10000A900();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (v15 == v16) {
      goto LABEL_26;
    }
  }
  BOOL v45 = __OFADD__(v65++, 1);
  a6 = v59;
  if (!v45) {
    goto LABEL_16;
  }
  __break(1u);
LABEL_36:
  swift_once();
LABEL_31:
  swift_beginAccess();
  sub_10000A900();
  print<A>(_:separator:terminator:to:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

char *sub_100009BFC(uint64_t a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v75 = a1;
  unint64_t v76 = a2;
  char v77 = a3 & 1;
  uint64_t v6 = sub_100003DD0(&qword_1000C48D8);
  Argument.wrappedValue.getter(v6, (uint64_t)&v79);
  uint64_t v7 = v80;
  if (v80)
  {
    uint64_t v8 = v79;
    if (sub_10001481C(v79, (unint64_t)v80))
    {
      mach_port_t v9 = getpid();
    }
    else
    {
      if (qword_1000C4688 != -1) {
        swift_once();
      }
      char v50 = (uint64_t (*)(void))off_1000C6440;
      NSString v51 = String._bridgeToObjectiveC()();
      mach_port_t v9 = v50();

      if (!v9)
      {
        sub_100003DD0(&qword_1000C4758);
        uint64_t v67 = swift_allocObject();
        *(_OWORD *)(v67 + 16) = xmmword_1000A2660;
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        uint64_t v75 = 0xD00000000000001ALL;
        unint64_t v76 = 0x80000001000A79B0;
        v68._countAndFlagsBits = v8;
        v68._object = v7;
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        *(void *)(v67 + 56) = &type metadata for String;
        *(void *)(v67 + 32) = 0xD00000000000001ALL;
        *(void *)(v67 + 40) = 0x80000001000A79B0;
        if (qword_1000C4660 != -1) {
          swift_once();
        }
        swift_beginAccess();
        sub_10000A900();
        print<A>(_:separator:terminator:to:)();
        swift_endAccess();
        return (char *)swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v75 = a4;
    unint64_t v76 = a5;
    char v77 = a6 & 1;
    uint64_t v52 = sub_100003DD0(&qword_1000C48E8);
    Flag.wrappedValue.getter(v52, (uint64_t)&v79);
    char v53 = v79;
    type metadata accessor for DarwinRemoteProcess();
    swift_allocObject();
    unint64_t result = sub_100010A84(v9, v53);
    if (result)
    {
      Swift::String v55 = result;
      if (*((void *)result + 5))
      {
        uint64_t v56 = swift_allocObject();
        *(void *)(v56 + 16) = v55;
        *(void *)(v56 + 24) = &off_1000C4B78;
        uint64_t v57 = swift_allocObject();
        *(void *)(v57 + 16) = sub_10000F654;
        *(void *)(v57 + 24) = v56;
        uint64_t v75 = (uint64_t)sub_10000F64C;
        unint64_t v76 = v57;
        swift_retain();
        swift_retain();
        uint64_t v58 = swift_reflection_iterateConformanceCache();
        swift_release();
        if (v58)
        {
          uint64_t v59 = String.init(cString:)();
          uint64_t v61 = v60;
          sub_1000045C0();
          swift_allocError();
          *uint64_t v62 = v59;
          v62[1] = v61;
          swift_willThrow();
        }
        swift_release();
        return (char *)swift_release();
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    sub_100003DD0(&qword_1000C4758);
    uint64_t v64 = swift_allocObject();
    *(_OWORD *)(v64 + 16) = xmmword_1000A2660;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    uint64_t v75 = 0xD00000000000002ALL;
    unint64_t v76 = 0x80000001000A7980;
    LODWORD(v79) = v9;
    v65._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    *(void *)(v64 + 56) = &type metadata for String;
    *(void *)(v64 + 32) = 0xD00000000000002ALL;
    *(void *)(v64 + 40) = 0x80000001000A7980;
LABEL_35:
    if (qword_1000C4660 != -1) {
      goto LABEL_42;
    }
    goto LABEL_36;
  }
  uint64_t v10 = sub_100015634();
  if (!v10)
  {
    sub_100003DD0(&qword_1000C4758);
    uint64_t v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = xmmword_1000A2660;
    *(void *)(v66 + 56) = &type metadata for String;
    *(void *)(v66 + 32) = 0xD00000000000001FLL;
    *(void *)(v66 + 40) = 0x80000001000A7930;
    goto LABEL_35;
  }
  uint64_t v11 = *((void *)v10 + 2);
  if (!v11)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    sub_100003DD0(&qword_1000C4758);
    uint64_t v63 = swift_allocObject();
    *(_OWORD *)(v63 + 16) = xmmword_1000A2660;
    *(void *)(v63 + 56) = &type metadata for String;
    *(void *)(v63 + 32) = 0;
    *(void *)(v63 + 40) = 0xE000000000000000;
    if (qword_1000C4660 != -1) {
      swift_once();
    }
    swift_beginAccess();
    sub_10000A900();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    return (char *)swift_bridgeObjectRelease();
  }
  uint64_t v74 = 0;
  uint64_t v12 = 0;
  uint64_t v70 = v10 + 32;
  uint64_t v69 = *((void *)v10 + 2);
  while (1)
  {
    mach_port_t v13 = *(_DWORD *)&v70[4 * v12++];
    uint64_t v75 = 91;
    unint64_t v76 = 0xE100000000000000;
    uint64_t v79 = v74;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 47;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    uint64_t v79 = v12;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 47;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    uint64_t v79 = v11;
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 93;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    uint64_t v21 = v75;
    unint64_t v20 = v76;
    uint64_t v75 = a4;
    unint64_t v76 = a5;
    char v77 = a6 & 1;
    uint64_t v22 = sub_100003DD0(&qword_1000C48E8);
    Flag.wrappedValue.getter(v22, (uint64_t)&v79);
    char v23 = v79;
    type metadata accessor for DarwinRemoteProcess();
    swift_allocObject();
    unint64_t v24 = sub_100010A84(v13, v23);
    if (!v24)
    {
      sub_100003DD0(&qword_1000C4758);
      uint64_t v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_1000A2CD0;
      *(void *)(v44 + 56) = &type metadata for String;
      *(void *)(v44 + 32) = v21;
      *(void *)(v44 + 40) = v20;
      uint64_t v75 = 0;
      unint64_t v76 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      uint64_t v75 = 0xD00000000000002DLL;
      unint64_t v76 = 0x80000001000A7950;
      LODWORD(v79) = v13;
      v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      uint64_t v46 = v75;
      unint64_t v47 = v76;
      *(void *)(v44 + 88) = &type metadata for String;
      *(void *)(v44 + 64) = v46;
      *(void *)(v44 + 72) = v47;
      if (qword_1000C4660 != -1) {
        swift_once();
      }
      swift_beginAccess();
      sub_10000A900();
      print<A>(_:separator:terminator:to:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    uint64_t v25 = v24;
    sub_100003DD0(&qword_1000C4758);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_1000A2CD0;
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 32) = v21;
    *(void *)(v26 + 40) = v20;
    uint64_t v79 = 0;
    uint64_t v80 = (void *)0xE000000000000000;
    v27._countAndFlagsBits = sub_100010648();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 40;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    swift_getObjectType();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    *(_DWORD *)sub_10000A954(&v75) = *((_DWORD *)v25 + 5);
    _print_unlocked<A, B>(_:_:)();
    sub_100005128((uint64_t)&v75);
    v29._countAndFlagsBits = 41;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    uint64_t v30 = v79;
    unint64_t v31 = (unint64_t)v80;
    *(void *)(v26 + 88) = &type metadata for String;
    *(void *)(v26 + 64) = v30;
    *(void *)(v26 + 72) = v31;
    if (qword_1000C4660 != -1) {
      swift_once();
    }
    swift_beginAccess();
    sub_10000A900();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (!*((void *)v25 + 5)) {
      __break(1u);
    }
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = v25;
    *(void *)(v32 + 24) = &off_1000C4B78;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = sub_10000A9F0;
    *(void *)(v33 + 24) = v32;
    uint64_t v75 = (uint64_t)sub_10000A9F8;
    unint64_t v76 = v33;
    swift_retain();
    swift_retain();
    uint64_t v34 = swift_reflection_iterateConformanceCache();
    swift_release();
    if (!v34) {
      break;
    }
    uint64_t v35 = String.init(cString:)();
    uint64_t v37 = v36;
    sub_1000045C0();
    uint64_t v38 = swift_allocError();
    *uint64_t v39 = v35;
    v39[1] = v37;
    swift_willThrow();
    swift_release();
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_1000A2660;
    uint64_t v75 = 0;
    unint64_t v76 = 0xE000000000000000;
    v41._countAndFlagsBits = 2108704;
    v41._object = (void *)0xE300000000000000;
    String.append(_:)(v41);
    uint64_t v79 = v38;
    sub_100003DD0(&qword_1000C48F0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v42 = v75;
    unint64_t v43 = v76;
    *(void *)(v40 + 56) = &type metadata for String;
    *(void *)(v40 + 32) = v42;
    *(void *)(v40 + 40) = v43;
    swift_beginAccess();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_errorRelease();
LABEL_17:
    swift_release_n();
    uint64_t v11 = v69;
LABEL_18:
    sub_100003DD0(&qword_1000C4758);
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_1000A2660;
    *(void *)(v49 + 56) = &type metadata for String;
    *(void *)(v49 + 32) = 1261460251;
    *(void *)(v49 + 40) = 0xE400000000000000;
    if (qword_1000C4660 != -1) {
      swift_once();
    }
    swift_beginAccess();
    sub_10000A900();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (v11 == v12) {
      goto LABEL_30;
    }
  }
  swift_release();
  if (!__OFADD__(v74++, 1)) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_42:
  swift_once();
LABEL_36:
  swift_beginAccess();
  sub_10000A900();
  print<A>(_:separator:terminator:to:)();
  swift_endAccess();
  return (char *)swift_bridgeObjectRelease();
}

unint64_t sub_10000A900()
{
  unint64_t result = qword_1000C48E0;
  if (!qword_1000C48E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C48E0);
  }
  return result;
}

uint64_t *sub_10000A954(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10000A9B8()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10000A9F0(uint64_t a1, uint64_t a2)
{
  sub_100005FF8(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10000A9F8(void *a1, void *a2)
{
  return sub_10001EE20(a1, a2, *(uint64_t (**)(void, void))(v2 + 16));
}

uint64_t sub_10000AA00()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000AA38(uint64_t a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6)
{
  return sub_10000AA90(a1, a2, a3, a4, a5, a6, (void (*)(void))sub_10000F724);
}

uint64_t sub_10000AA64(uint64_t a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6)
{
  return sub_10000AA90(a1, a2, a3, a4, a5, a6, (void (*)(void))sub_100013414);
}

uint64_t sub_10000AA90(uint64_t a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6, void (*a7)(void))
{
  uint64_t v8 = v7;
  uint64_t v65 = a1;
  unint64_t v66 = a2;
  char v67 = a3 & 1;
  uint64_t v10 = sub_100003DD0(&qword_1000C48D8);
  Argument.wrappedValue.getter(v10, (uint64_t)&v69);
  uint64_t v11 = v70;
  if (v70)
  {
    uint64_t v12 = v69;
    if (sub_10001481C(v69, (unint64_t)v70))
    {
      mach_port_t v13 = getpid();
    }
    else
    {
      if (qword_1000C4688 != -1) {
        swift_once();
      }
      unint64_t v47 = (uint64_t (*)(void))off_1000C6440;
      NSString v48 = String._bridgeToObjectiveC()();
      mach_port_t v13 = v47();

      if (!v13)
      {
        sub_100003DD0(&qword_1000C4758);
        uint64_t v56 = swift_allocObject();
        *(_OWORD *)(v56 + 16) = xmmword_1000A2660;
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        uint64_t v65 = 0xD00000000000001ALL;
        unint64_t v66 = 0x80000001000A79B0;
        v57._countAndFlagsBits = v12;
        v57._object = v11;
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        *(void *)(v56 + 56) = &type metadata for String;
        *(void *)(v56 + 32) = 0xD00000000000001ALL;
        *(void *)(v56 + 40) = 0x80000001000A79B0;
        if (qword_1000C4660 == -1) {
          goto LABEL_33;
        }
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v65 = a4;
    unint64_t v66 = a5;
    char v67 = a6 & 1;
    uint64_t v49 = sub_100003DD0(&qword_1000C48E8);
    Flag.wrappedValue.getter(v49, (uint64_t)&v69);
    char v50 = v69;
    type metadata accessor for DarwinRemoteProcess();
    swift_allocObject();
    if (sub_100010A84(v13, v50))
    {
      a7();
      return swift_release();
    }
    sub_100003DD0(&qword_1000C4758);
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_1000A2660;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    uint64_t v65 = 0xD00000000000002ALL;
    unint64_t v66 = 0x80000001000A7980;
    LODWORD(v69) = v13;
    v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    *(void *)(v53 + 56) = &type metadata for String;
    *(void *)(v53 + 32) = 0xD00000000000002ALL;
    *(void *)(v53 + 40) = 0x80000001000A7980;
    if (qword_1000C4660 == -1)
    {
LABEL_33:
      swift_beginAccess();
      sub_10000A900();
      print<A>(_:separator:terminator:to:)();
      swift_endAccess();
      return swift_bridgeObjectRelease();
    }
LABEL_37:
    swift_once();
    goto LABEL_33;
  }
  Swift::String v14 = sub_100015634();
  if (!v14)
  {
    sub_100003DD0(&qword_1000C4758);
    uint64_t v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = xmmword_1000A2660;
    *(void *)(v55 + 56) = &type metadata for String;
    *(void *)(v55 + 32) = 0xD00000000000001FLL;
    *(void *)(v55 + 40) = 0x80000001000A7930;
LABEL_30:
    if (qword_1000C4660 != -1) {
      goto LABEL_36;
    }
    goto LABEL_31;
  }
  uint64_t v15 = *((void *)v14 + 2);
  if (!v15)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    sub_100003DD0(&qword_1000C4758);
    uint64_t v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_1000A2660;
    *(void *)(v52 + 56) = &type metadata for String;
    *(void *)(v52 + 32) = 0;
    *(void *)(v52 + 40) = 0xE000000000000000;
    goto LABEL_30;
  }
  uint64_t v64 = 0;
  uint64_t v16 = 0;
  uint64_t v61 = v14 + 32;
  char v58 = a6;
  uint64_t v60 = *((void *)v14 + 2);
  while (1)
  {
    mach_port_t v17 = *(_DWORD *)&v61[4 * v16++];
    uint64_t v65 = 91;
    unint64_t v66 = 0xE100000000000000;
    uint64_t v69 = v64;
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 47;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    uint64_t v69 = v16;
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 47;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    uint64_t v69 = v15;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 93;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    uint64_t v25 = v65;
    unint64_t v24 = v66;
    uint64_t v65 = a4;
    unint64_t v66 = a5;
    char v67 = a6 & 1;
    uint64_t v26 = sub_100003DD0(&qword_1000C48E8);
    Flag.wrappedValue.getter(v26, (uint64_t)&v69);
    char v27 = v69;
    type metadata accessor for DarwinRemoteProcess();
    swift_allocObject();
    Swift::String v28 = sub_100010A84(v17, v27);
    uint64_t v71 = v8;
    if (!v28)
    {
      sub_100003DD0(&qword_1000C4758);
      uint64_t v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_1000A2CD0;
      *(void *)(v41 + 56) = &type metadata for String;
      *(void *)(v41 + 32) = v25;
      *(void *)(v41 + 40) = v24;
      uint64_t v65 = 0;
      unint64_t v66 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      uint64_t v65 = 0xD00000000000002DLL;
      unint64_t v66 = 0x80000001000A7950;
      LODWORD(v69) = v17;
      v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      uint64_t v43 = v65;
      unint64_t v44 = v66;
      *(void *)(v41 + 88) = &type metadata for String;
      *(void *)(v41 + 64) = v43;
      *(void *)(v41 + 72) = v44;
      if (qword_1000C4660 != -1) {
        swift_once();
      }
      swift_beginAccess();
      sub_10000A900();
      print<A>(_:separator:terminator:to:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      uint64_t v15 = v60;
      uint64_t v8 = v71;
      goto LABEL_17;
    }
    Swift::String v29 = v28;
    sub_100003DD0(&qword_1000C4758);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_1000A2CD0;
    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 32) = v25;
    *(void *)(v30 + 40) = v24;
    uint64_t v69 = 0;
    uint64_t v70 = (void *)0xE000000000000000;
    v31._countAndFlagsBits = sub_100010648();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 40;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    swift_getObjectType();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    *(_DWORD *)sub_10000A954(&v65) = *((_DWORD *)v29 + 5);
    _print_unlocked<A, B>(_:_:)();
    sub_100005128((uint64_t)&v65);
    v33._countAndFlagsBits = 41;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    uint64_t v34 = v69;
    unint64_t v35 = (unint64_t)v70;
    *(void *)(v30 + 88) = &type metadata for String;
    *(void *)(v30 + 64) = v34;
    *(void *)(v30 + 72) = v35;
    if (qword_1000C4660 != -1) {
      swift_once();
    }
    swift_beginAccess();
    sub_10000A900();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    uint64_t v36 = v71;
    ((void (*)(char *, _UNKNOWN **))a7)(v29, &off_1000C4B78);
    uint64_t v8 = v36;
    if (!v36) {
      break;
    }
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_1000A2660;
    uint64_t v65 = 0;
    unint64_t v66 = 0xE000000000000000;
    v38._countAndFlagsBits = 2108704;
    v38._object = (void *)0xE300000000000000;
    String.append(_:)(v38);
    uint64_t v69 = v36;
    sub_100003DD0(&qword_1000C48F0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v39 = v65;
    unint64_t v40 = v66;
    *(void *)(v37 + 56) = &type metadata for String;
    *(void *)(v37 + 32) = v39;
    *(void *)(v37 + 40) = v40;
    swift_beginAccess();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    uint64_t v8 = 0;
    a6 = v58;
LABEL_16:
    swift_release_n();
    uint64_t v15 = v60;
LABEL_17:
    sub_100003DD0(&qword_1000C4758);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_1000A2660;
    *(void *)(v46 + 56) = &type metadata for String;
    *(void *)(v46 + 32) = 1261460251;
    *(void *)(v46 + 40) = 0xE400000000000000;
    if (qword_1000C4660 != -1) {
      swift_once();
    }
    swift_beginAccess();
    sub_10000A900();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (v15 == v16) {
      goto LABEL_26;
    }
  }
  BOOL v45 = __OFADD__(v64++, 1);
  a6 = v58;
  if (!v45) {
    goto LABEL_16;
  }
  __break(1u);
LABEL_36:
  swift_once();
LABEL_31:
  swift_beginAccess();
  sub_10000A900();
  print<A>(_:separator:terminator:to:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

void *sub_10000B5E4(uint64_t a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5, int a6)
{
  int v69 = a6;
  uint64_t v63 = a1;
  unint64_t v64 = a2;
  char v65 = a3 & 1;
  uint64_t v6 = sub_100003DD0(&qword_1000C48D8);
  Argument.wrappedValue.getter(v6, (uint64_t)&v67);
  unint64_t v7 = v68;
  if (v68)
  {
    uint64_t v8 = v67;
    if (sub_10001481C(v67, v68))
    {
      mach_port_t v9 = getpid();
LABEL_25:
      swift_bridgeObjectRelease();
      uint64_t v63 = a4;
      unint64_t v64 = a5;
      char v65 = v69 & 1;
      uint64_t v44 = sub_100003DD0(&qword_1000C48E8);
      Flag.wrappedValue.getter(v44, (uint64_t)&v67);
      char v45 = v67;
      type metadata accessor for DarwinRemoteProcess();
      swift_allocObject();
      unint64_t result = sub_100010A84(v9, v45);
      if (result)
      {
        uint64_t v46 = result;
        uint64_t v47 = result[5];
        if (!v47) {
          goto LABEL_43;
        }
        if (object_getClass(result) == (Class)_TtC13swift_inspect19DarwinRemoteProcess) {
          uint64_t v48 = (uint64_t)v46;
        }
        else {
          uint64_t v48 = 0;
        }
        type metadata accessor for ConcurrencyDumper();
        swift_allocObject();
        swift_unknownObjectRetain();
        sub_10001F954(v47, v48);
        sub_100021B64();
        sub_100023018();
        sub_100023DB4();
        swift_release();
        return (void *)swift_release();
      }
      sub_100003DD0(&qword_1000C4758);
      uint64_t v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = xmmword_1000A2660;
      uint64_t v63 = 0;
      unint64_t v64 = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      uint64_t v63 = 0xD00000000000002ALL;
      unint64_t v64 = 0x80000001000A7980;
      LODWORD(v67) = v9;
      v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      uint64_t v52 = v63;
      unint64_t v53 = v64;
      *(void *)(v50 + 56) = &type metadata for String;
      *(void *)(v50 + 32) = v52;
      *(void *)(v50 + 40) = v53;
LABEL_35:
      if (qword_1000C4660 == -1) {
        goto LABEL_36;
      }
      goto LABEL_32;
    }
    if (qword_1000C4688 != -1) {
LABEL_40:
    }
      swift_once();
    Swift::String v42 = (uint64_t (*)(void))off_1000C6440;
    NSString v43 = String._bridgeToObjectiveC()();
    mach_port_t v9 = v42();

    if (v9) {
      goto LABEL_25;
    }
    sub_100003DD0(&qword_1000C4758);
    uint64_t v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = xmmword_1000A2660;
    uint64_t v63 = 0;
    unint64_t v64 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    uint64_t v63 = 0xD00000000000001ALL;
    unint64_t v64 = 0x80000001000A79B0;
    v56._countAndFlagsBits = v8;
    v56._object = (void *)v7;
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    uint64_t v57 = v63;
    unint64_t v58 = v64;
    *(void *)(v55 + 56) = &type metadata for String;
    *(void *)(v55 + 32) = v57;
    *(void *)(v55 + 40) = v58;
    if (qword_1000C4660 == -1) {
      goto LABEL_36;
    }
LABEL_32:
    swift_once();
    goto LABEL_36;
  }
  uint64_t v10 = sub_100015634();
  if (!v10)
  {
    sub_100003DD0(&qword_1000C4758);
    uint64_t v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = xmmword_1000A2660;
    *(void *)(v54 + 56) = &type metadata for String;
    *(void *)(v54 + 32) = 0xD00000000000001FLL;
    *(void *)(v54 + 40) = 0x80000001000A7930;
    goto LABEL_35;
  }
  uint64_t v11 = *((void *)v10 + 2);
  if (!v11)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    sub_100003DD0(&qword_1000C4758);
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_1000A2660;
    *(void *)(v49 + 56) = &type metadata for String;
    *(void *)(v49 + 32) = 0;
    *(void *)(v49 + 40) = 0xE000000000000000;
    if (qword_1000C4660 == -1)
    {
LABEL_36:
      swift_beginAccess();
      sub_10000A900();
      print<A>(_:separator:terminator:to:)();
      swift_endAccess();
      return (void *)swift_bridgeObjectRelease();
    }
    goto LABEL_32;
  }
  uint64_t v12 = 0;
  uint64_t v8 = 0;
  uint64_t v60 = v10 + 32;
  mach_port_t v13 = &DarwinRemoteProcess;
  uint64_t v59 = *((void *)v10 + 2);
  while (1)
  {
    Swift::String v14 = v13;
    mach_port_t v15 = *(_DWORD *)&v60[4 * v8++];
    uint64_t v63 = 91;
    unint64_t v64 = 0xE100000000000000;
    uint64_t v67 = v12;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 47;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    uint64_t v67 = v8;
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 47;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    uint64_t v67 = v11;
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 93;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    uint64_t v23 = v63;
    unint64_t v22 = v64;
    uint64_t v63 = a4;
    unint64_t v64 = a5;
    char v65 = v69 & 1;
    uint64_t v24 = sub_100003DD0(&qword_1000C48E8);
    Flag.wrappedValue.getter(v24, (uint64_t)&v67);
    char v25 = v67;
    type metadata accessor for DarwinRemoteProcess();
    swift_allocObject();
    uint64_t v26 = sub_100010A84(v15, v25);
    if (!v26)
    {
      sub_100003DD0(&qword_1000C4758);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_1000A2CD0;
      *(void *)(v37 + 56) = &type metadata for String;
      *(void *)(v37 + 32) = v23;
      *(void *)(v37 + 40) = v22;
      uint64_t v63 = 0;
      unint64_t v64 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      uint64_t v63 = 0xD00000000000002DLL;
      unint64_t v64 = 0x80000001000A7950;
      LODWORD(v67) = v15;
      v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      uint64_t v39 = v63;
      unint64_t v40 = v64;
      *(void *)(v37 + 88) = &type metadata for String;
      *(void *)(v37 + 64) = v39;
      *(void *)(v37 + 72) = v40;
      mach_port_t v13 = v14;
      if (v14[22].ivars != (__objc2_ivar_list *)-1) {
        swift_once();
      }
      swift_beginAccess();
      sub_10000A900();
      print<A>(_:separator:terminator:to:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      uint64_t v11 = v59;
      goto LABEL_19;
    }
    unint64_t v7 = (unint64_t)v26;
    sub_100003DD0(&qword_1000C4758);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_1000A2CD0;
    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 32) = v23;
    *(void *)(v27 + 40) = v22;
    uint64_t v67 = 0;
    unint64_t v68 = 0xE000000000000000;
    v28._countAndFlagsBits = sub_100010648();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 40;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    swift_getObjectType();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    *(_DWORD *)sub_10000A954(&v63) = *(_DWORD *)(v7 + 20);
    _print_unlocked<A, B>(_:_:)();
    sub_100005128((uint64_t)&v63);
    v30._countAndFlagsBits = 41;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    uint64_t v31 = v67;
    unint64_t v32 = v68;
    *(void *)(v27 + 88) = &type metadata for String;
    *(void *)(v27 + 64) = v31;
    *(void *)(v27 + 72) = v32;
    mach_port_t v13 = v14;
    if (v14[22].ivars != (__objc2_ivar_list *)-1) {
      swift_once();
    }
    swift_beginAccess();
    sub_10000A900();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    unint64_t result = (void *)swift_bridgeObjectRelease();
    uint64_t v34 = *(void *)(v7 + 40);
    if (!v34) {
      break;
    }
    if (object_getClass((id)v7) == (Class)_TtC13swift_inspect19DarwinRemoteProcess) {
      uint64_t v35 = v7;
    }
    else {
      uint64_t v35 = 0;
    }
    type metadata accessor for ConcurrencyDumper();
    swift_allocObject();
    swift_unknownObjectRetain();
    sub_10001F954(v34, v35);
    sub_100021B64();
    sub_100023018();
    sub_100023DB4();
    swift_release();
    BOOL v36 = __OFADD__(v12++, 1);
    uint64_t v11 = v59;
    if (v36)
    {
      __break(1u);
      goto LABEL_40;
    }
    swift_release_n();
LABEL_19:
    sub_100003DD0(&qword_1000C4758);
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_1000A2660;
    *(void *)(v41 + 56) = &type metadata for String;
    *(void *)(v41 + 32) = 1261460251;
    *(void *)(v41 + 40) = 0xE400000000000000;
    if (v13[22].ivars != (__objc2_ivar_list *)-1) {
      swift_once();
    }
    swift_beginAccess();
    sub_10000A900();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (v11 == v8) {
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_10000C05C(uint64_t a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v10 = v9;
  uint64_t v68 = a1;
  unint64_t v69 = a2;
  char v70 = a3 & 1;
  uint64_t v11 = sub_100003DD0(&qword_1000C48D8);
  Argument.wrappedValue.getter(v11, (uint64_t)&v72);
  uint64_t v12 = v73;
  if (v73)
  {
    uint64_t v13 = v72;
    if (sub_10001481C(v72, (unint64_t)v73))
    {
      mach_port_t v14 = getpid();
    }
    else
    {
      if (qword_1000C4688 != -1) {
        swift_once();
      }
      uint64_t v48 = (uint64_t (*)(void))off_1000C6440;
      NSString v49 = String._bridgeToObjectiveC()();
      mach_port_t v14 = v48();

      if (!v14)
      {
        sub_100003DD0(&qword_1000C4758);
        uint64_t v58 = swift_allocObject();
        *(_OWORD *)(v58 + 16) = xmmword_1000A2660;
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        uint64_t v68 = 0xD00000000000001ALL;
        unint64_t v69 = 0x80000001000A79B0;
        v59._countAndFlagsBits = v13;
        v59._object = v12;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        *(void *)(v58 + 56) = &type metadata for String;
        *(void *)(v58 + 32) = 0xD00000000000001ALL;
        *(void *)(v58 + 40) = 0x80000001000A79B0;
        if (qword_1000C4660 == -1) {
          goto LABEL_33;
        }
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v68 = a4;
    unint64_t v69 = a5;
    char v70 = a6 & 1;
    uint64_t v50 = sub_100003DD0(&qword_1000C48E8);
    Flag.wrappedValue.getter(v50, (uint64_t)&v72);
    char v51 = v72;
    type metadata accessor for DarwinRemoteProcess();
    swift_allocObject();
    uint64_t v52 = sub_100010A84(v14, v51);
    if (v52)
    {
      sub_100017864((uint64_t)v52, (unint64_t)&off_1000C4B78, a7, a8, a9);
      return swift_release();
    }
    sub_100003DD0(&qword_1000C4758);
    uint64_t v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = xmmword_1000A2660;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    uint64_t v68 = 0xD00000000000002ALL;
    unint64_t v69 = 0x80000001000A7980;
    LODWORD(v72) = v14;
    v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    *(void *)(v55 + 56) = &type metadata for String;
    *(void *)(v55 + 32) = 0xD00000000000002ALL;
    *(void *)(v55 + 40) = 0x80000001000A7980;
    if (qword_1000C4660 == -1)
    {
LABEL_33:
      swift_beginAccess();
      sub_10000A900();
      print<A>(_:separator:terminator:to:)();
      swift_endAccess();
      return swift_bridgeObjectRelease();
    }
LABEL_37:
    swift_once();
    goto LABEL_33;
  }
  mach_port_t v15 = sub_100015634();
  if (!v15)
  {
    sub_100003DD0(&qword_1000C4758);
    uint64_t v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = xmmword_1000A2660;
    *(void *)(v57 + 56) = &type metadata for String;
    *(void *)(v57 + 32) = 0xD00000000000001FLL;
    *(void *)(v57 + 40) = 0x80000001000A7930;
LABEL_30:
    if (qword_1000C4660 != -1) {
      goto LABEL_36;
    }
    goto LABEL_31;
  }
  uint64_t v16 = *((void *)v15 + 2);
  if (!v16)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    sub_100003DD0(&qword_1000C4758);
    uint64_t v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = xmmword_1000A2660;
    *(void *)(v54 + 56) = &type metadata for String;
    *(void *)(v54 + 32) = 0;
    *(void *)(v54 + 40) = 0xE000000000000000;
    goto LABEL_30;
  }
  uint64_t v67 = 0;
  uint64_t v17 = 0;
  uint64_t v63 = v15 + 32;
  uint64_t v60 = *((void *)v15 + 2);
  while (1)
  {
    mach_port_t v18 = *(_DWORD *)&v63[4 * v17++];
    uint64_t v68 = 91;
    unint64_t v69 = 0xE100000000000000;
    uint64_t v72 = v67;
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 47;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    uint64_t v72 = v17;
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 47;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    uint64_t v72 = v16;
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 93;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    uint64_t v25 = v68;
    unint64_t v26 = v69;
    uint64_t v68 = a4;
    unint64_t v69 = a5;
    char v70 = a6 & 1;
    uint64_t v27 = sub_100003DD0(&qword_1000C48E8);
    Flag.wrappedValue.getter(v27, (uint64_t)&v72);
    char v28 = v72;
    type metadata accessor for DarwinRemoteProcess();
    swift_allocObject();
    Swift::String v29 = sub_100010A84(v18, v28);
    uint64_t v74 = v10;
    if (!v29)
    {
      sub_100003DD0(&qword_1000C4758);
      uint64_t v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_1000A2CD0;
      *(void *)(v42 + 56) = &type metadata for String;
      *(void *)(v42 + 32) = v25;
      *(void *)(v42 + 40) = v26;
      uint64_t v68 = 0;
      unint64_t v69 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      uint64_t v68 = 0xD00000000000002DLL;
      unint64_t v69 = 0x80000001000A7950;
      LODWORD(v72) = v18;
      v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      uint64_t v44 = v68;
      unint64_t v45 = v69;
      *(void *)(v42 + 88) = &type metadata for String;
      *(void *)(v42 + 64) = v44;
      *(void *)(v42 + 72) = v45;
      if (qword_1000C4660 != -1) {
        swift_once();
      }
      swift_beginAccess();
      sub_10000A900();
      print<A>(_:separator:terminator:to:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      uint64_t v10 = v74;
      goto LABEL_17;
    }
    uint64_t v30 = (uint64_t)v29;
    sub_100003DD0(&qword_1000C4758);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_1000A2CD0;
    *(void *)(v31 + 56) = &type metadata for String;
    *(void *)(v31 + 32) = v25;
    *(void *)(v31 + 40) = v26;
    uint64_t v72 = 0;
    uint64_t v73 = (void *)0xE000000000000000;
    v32._countAndFlagsBits = sub_100010648();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 40;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    swift_getObjectType();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    *(_DWORD *)sub_10000A954(&v68) = *(_DWORD *)(v30 + 20);
    _print_unlocked<A, B>(_:_:)();
    sub_100005128((uint64_t)&v68);
    v34._countAndFlagsBits = 41;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    uint64_t v35 = v72;
    unint64_t v36 = (unint64_t)v73;
    *(void *)(v31 + 88) = &type metadata for String;
    *(void *)(v31 + 64) = v35;
    *(void *)(v31 + 72) = v36;
    if (qword_1000C4660 != -1) {
      swift_once();
    }
    swift_beginAccess();
    sub_10000A900();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    uint64_t v37 = v74;
    sub_100017864(v30, (unint64_t)&off_1000C4B78, a7, a8, a9);
    uint64_t v10 = v37;
    if (!v37) {
      break;
    }
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_1000A2660;
    uint64_t v68 = 0;
    unint64_t v69 = 0xE000000000000000;
    v39._countAndFlagsBits = 2108704;
    v39._object = (void *)0xE300000000000000;
    String.append(_:)(v39);
    uint64_t v72 = v37;
    sub_100003DD0(&qword_1000C48F0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v40 = v68;
    unint64_t v41 = v69;
    *(void *)(v38 + 56) = &type metadata for String;
    *(void *)(v38 + 32) = v40;
    *(void *)(v38 + 40) = v41;
    swift_beginAccess();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    uint64_t v10 = 0;
    uint64_t v16 = v60;
LABEL_16:
    swift_release_n();
LABEL_17:
    sub_100003DD0(&qword_1000C4758);
    uint64_t v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_1000A2660;
    *(void *)(v47 + 56) = &type metadata for String;
    *(void *)(v47 + 32) = 1261460251;
    *(void *)(v47 + 40) = 0xE400000000000000;
    if (qword_1000C4660 != -1) {
      swift_once();
    }
    swift_beginAccess();
    sub_10000A900();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (v16 == v17) {
      goto LABEL_26;
    }
  }
  BOOL v46 = __OFADD__(v67++, 1);
  uint64_t v16 = v60;
  if (!v46) {
    goto LABEL_16;
  }
  __break(1u);
LABEL_36:
  swift_once();
LABEL_31:
  swift_beginAccess();
  sub_10000A900();
  print<A>(_:separator:terminator:to:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t destroy for GenericMetadataOptions(uint64_t a1)
{
  sub_100002804(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  sub_100002804(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  sub_100002804(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  char v4 = *(unsigned char *)(a1 + 88);

  return sub_1000027F4(v2, v3, v4);
}

uint64_t initializeWithCopy for GenericMetadataOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_10000264C(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  char v9 = *(unsigned char *)(v2 + 40);
  sub_10000264C(v7, v8, v9);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(v2 + 48);
  uint64_t v11 = *(void *)(v2 + 56);
  char v12 = *(unsigned char *)(v2 + 64);
  sub_10000264C(v10, v11, v12);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v12;
  uint64_t v13 = *(void *)(v2 + 72);
  uint64_t v14 = *(void *)(v2 + 80);
  LOBYTE(v2) = *(unsigned char *)(v2 + 88);
  sub_10000263C(v13, v14, v2);
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(unsigned char *)(a1 + 88) = v2;
  return a1;
}

uint64_t assignWithCopy for GenericMetadataOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_10000264C(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_100002804(v7, v8, v9);
  uint64_t v10 = *(void *)(v2 + 24);
  uint64_t v11 = *(void *)(v2 + 32);
  char v12 = *(unsigned char *)(v2 + 40);
  sub_10000264C(v10, v11, v12);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  char v15 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(unsigned char *)(a1 + 40) = v12;
  sub_100002804(v13, v14, v15);
  uint64_t v16 = *(void *)(v2 + 48);
  uint64_t v17 = *(void *)(v2 + 56);
  char v18 = *(unsigned char *)(v2 + 64);
  sub_10000264C(v16, v17, v18);
  uint64_t v19 = *(void *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 56);
  char v21 = *(unsigned char *)(a1 + 64);
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v17;
  *(unsigned char *)(a1 + 64) = v18;
  sub_100002804(v19, v20, v21);
  uint64_t v22 = *(void *)(v2 + 72);
  uint64_t v23 = *(void *)(v2 + 80);
  LOBYTE(v2) = *(unsigned char *)(v2 + 88);
  sub_10000263C(v22, v23, v2);
  uint64_t v24 = *(void *)(a1 + 72);
  uint64_t v25 = *(void *)(a1 + 80);
  char v26 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 72) = v22;
  *(void *)(a1 + 80) = v23;
  *(unsigned char *)(a1 + 88) = v2;
  sub_1000027F4(v24, v25, v26);
  return a1;
}

__n128 initializeWithTake for GenericMetadataOptions(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for GenericMetadataOptions(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_100002804(v5, v6, v7);
  char v8 = *(unsigned char *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v8;
  sub_100002804(v9, v10, v11);
  char v12 = *(unsigned char *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  char v15 = *(unsigned char *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = v12;
  sub_100002804(v13, v14, v15);
  char v16 = *(unsigned char *)(a2 + 88);
  uint64_t v17 = *(void *)(a1 + 72);
  uint64_t v18 = *(void *)(a1 + 80);
  char v19 = *(unsigned char *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = v16;
  sub_1000027F4(v17, v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericMetadataOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericMetadataOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 89) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericMetadataOptions()
{
  return &type metadata for GenericMetadataOptions;
}

uint64_t destroy for BacktraceOptions(uint64_t a1)
{
  sub_100002804(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);

  return sub_100002804(v2, v3, v4);
}

uint64_t initializeWithCopy for BacktraceOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_10000264C(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  LOBYTE(v2) = *(unsigned char *)(v2 + 40);
  sub_10000264C(v7, v8, v2);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v2;
  return a1;
}

uint64_t assignWithCopy for BacktraceOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_10000264C(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_100002804(v7, v8, v9);
  uint64_t v10 = *(void *)(v2 + 24);
  uint64_t v11 = *(void *)(v2 + 32);
  LOBYTE(v2) = *(unsigned char *)(v2 + 40);
  sub_10000264C(v10, v11, v2);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  char v14 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(unsigned char *)(a1 + 40) = v2;
  sub_100002804(v12, v13, v14);
  return a1;
}

__n128 initializeWithTake for BacktraceOptions(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for BacktraceOptions(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_100002804(v5, v6, v7);
  char v8 = *(unsigned char *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v8;
  sub_100002804(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for BacktraceOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BacktraceOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BacktraceOptions()
{
  return &type metadata for BacktraceOptions;
}

uint64_t destroy for UniversalOptions(uint64_t a1)
{
  sub_1000027F4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  sub_100002804(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  char v4 = *(unsigned char *)(a1 + 64);

  return sub_100002804(v2, v3, v4);
}

uint64_t initializeWithCopy for UniversalOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_10000263C(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  char v9 = *(unsigned char *)(v2 + 40);
  sub_10000264C(v7, v8, v9);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(v2 + 48);
  uint64_t v11 = *(void *)(v2 + 56);
  LOBYTE(v2) = *(unsigned char *)(v2 + 64);
  sub_10000264C(v10, v11, v2);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v2;
  return a1;
}

uint64_t assignWithCopy for UniversalOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_10000263C(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_1000027F4(v7, v8, v9);
  uint64_t v10 = *(void *)(v2 + 24);
  uint64_t v11 = *(void *)(v2 + 32);
  char v12 = *(unsigned char *)(v2 + 40);
  sub_10000264C(v10, v11, v12);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  char v15 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(unsigned char *)(a1 + 40) = v12;
  sub_100002804(v13, v14, v15);
  uint64_t v16 = *(void *)(v2 + 48);
  uint64_t v17 = *(void *)(v2 + 56);
  LOBYTE(v2) = *(unsigned char *)(v2 + 64);
  sub_10000264C(v16, v17, v2);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(unsigned char *)(a1 + 64);
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v17;
  *(unsigned char *)(a1 + 64) = v2;
  sub_100002804(v18, v19, v20);
  return a1;
}

__n128 initializeWithTake for UniversalOptions(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for UniversalOptions(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_1000027F4(v5, v6, v7);
  char v8 = *(unsigned char *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v8;
  sub_100002804(v9, v10, v11);
  char v12 = *(unsigned char *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  char v15 = *(unsigned char *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = v12;
  sub_100002804(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for UniversalOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UniversalOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UniversalOptions()
{
  return &type metadata for UniversalOptions;
}

unint64_t sub_10000D47C(uint64_t a1)
{
  unint64_t result = sub_10000D4A4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10000D4A4()
{
  unint64_t result = qword_1000C48F8;
  if (!qword_1000C48F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C48F8);
  }
  return result;
}

unint64_t sub_10000D4F8(uint64_t a1)
{
  unint64_t result = sub_10000D520();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10000D520()
{
  unint64_t result = qword_1000C4900;
  if (!qword_1000C4900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4900);
  }
  return result;
}

unint64_t sub_10000D574(uint64_t a1)
{
  unint64_t result = sub_10000D59C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10000D59C()
{
  unint64_t result = qword_1000C4908;
  if (!qword_1000C4908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4908);
  }
  return result;
}

unint64_t sub_10000D5F0()
{
  unint64_t result = qword_1000C4910;
  if (!qword_1000C4910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4910);
  }
  return result;
}

uint64_t sub_10000D644(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6950724F656D616ELL && a2 == 0xE900000000000064;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x70726F436B726F66 && a2 == 0xEA00000000006573 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7105633 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t (*sub_10000D7A4@<X0>(uint64_t a1@<X8>))(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v2._char countAndFlagsBits = 0xD00000000000002DLL;
  v2._object = (void *)0x80000001000A7A10;
  ArgumentHelp.init(stringLiteral:)(&v20, v2);
  ArgumentParser::ArgumentHelp v25 = v20;
  Argument.init<A>(help:completion:)((uint64_t)&v25, 0, 0, 255, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t)&v24);
  Swift::String abstract = v24.abstract;
  char countAndFlagsBits = v24.discussion._countAndFlagsBits;
  uint64_t v5 = (ArgumentParser::ArgumentVisibility::Representation *)ArgumentVisibility.default.unsafeMutableAddressor();
  v6._char countAndFlagsBits = 0xD000000000000090;
  v7.base = *v5;
  v8._object = (void *)0x80000001000A7A40;
  v6._object = (void *)0x80000001000A7A70;
  v8._char countAndFlagsBits = 0xD000000000000023;
  ArgumentHelp.init(_:discussion:valueName:visibility:)(&v21, v8, v6, (Swift::String_optional)0, v7);
  ArgumentParser::ArgumentHelp v24 = v21;
  uint64_t v9 = static NameSpecification.long.getter();
  uint64_t v10 = Flag<A>.init(wrappedValue:name:help:)(0, v9, (uint64_t)&v24);
  uint64_t v12 = v11;
  char v14 = v13;
  v15._object = (void *)0x80000001000A7B10;
  v15._char countAndFlagsBits = 0xD000000000000014;
  ArgumentHelp.init(stringLiteral:)(&v22, v15);
  ArgumentParser::ArgumentHelp v23 = v22;
  uint64_t v16 = static NameSpecification.long.getter();
  unint64_t result = Flag<A>.init(wrappedValue:name:help:)(0, v16, (uint64_t)&v23);
  *(Swift::String *)a1 = abstract;
  *(unsigned char *)(a1 + 16) = countAndFlagsBits;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v12;
  *(unsigned char *)(a1 + 40) = v14 & 1;
  *(void *)(a1 + 48) = result;
  *(void *)(a1 + 56) = v18;
  *(unsigned char *)(a1 + 64) = v19 & 1;
  return result;
}

uint64_t sub_10000D95C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v4 = sub_100003DD0(&qword_1000C4950);
  uint64_t v41 = *(void *)(v4 - 8);
  uint64_t v42 = v4;
  __chkstk_darwin(v4);
  Swift::String v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7._char countAndFlagsBits = 0xD00000000000002DLL;
  v7._object = (void *)0x80000001000A7A10;
  ArgumentHelp.init(stringLiteral:)(&v54, v7);
  ArgumentParser::ArgumentHelp v59 = v54;
  Argument.init<A>(help:completion:)((uint64_t)&v59, 0, 0, 255, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t)&v51);
  uint64_t v8 = v52;
  Swift::String v43 = v51;
  int v48 = v53;
  uint64_t v9 = (ArgumentParser::ArgumentVisibility::Representation *)ArgumentVisibility.default.unsafeMutableAddressor();
  v10._char countAndFlagsBits = 0xD000000000000090;
  v11.base = *v9;
  v12._object = (void *)0x80000001000A7A40;
  v10._object = (void *)0x80000001000A7A70;
  v12._char countAndFlagsBits = 0xD000000000000023;
  ArgumentHelp.init(_:discussion:valueName:visibility:)(&v55, v12, v10, (Swift::String_optional)0, v11);
  ArgumentParser::ArgumentHelp v58 = v55;
  uint64_t v13 = static NameSpecification.long.getter();
  uint64_t v47 = Flag<A>.init(wrappedValue:name:help:)(0, v13, (uint64_t)&v58);
  uint64_t v60 = v14;
  char v16 = v15;
  int v49 = v15 & 1;
  v17._object = (void *)0x80000001000A7B10;
  v17._char countAndFlagsBits = 0xD000000000000014;
  ArgumentHelp.init(stringLiteral:)(&v56, v17);
  ArgumentParser::ArgumentHelp v57 = v56;
  uint64_t v18 = static NameSpecification.long.getter();
  unint64_t v45 = Flag<A>.init(wrappedValue:name:help:)(0, v18, (uint64_t)&v57);
  uint64_t v46 = v19;
  int v44 = v20;
  sub_100005090(a1, a1[3]);
  sub_10000EF38();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v21 = (uint64_t)v43;
    char v22 = v48;
    ArgumentParser::ArgumentHelp v23 = v47;
    uint64_t v24 = v60;
    char v25 = v49;
    sub_100005128((uint64_t)a1);
    sub_1000027F4(v21, v8, v22);
    sub_100002804((uint64_t)v23, v24, v25);
    return sub_100002804((uint64_t)v45, v46, v44 & 1);
  }
  else
  {
    sub_100003DD0(&qword_1000C48D8);
    char v50 = 0;
    sub_100005178(&qword_1000C4960, &qword_1000C48D8);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1000027F4((uint64_t)v43, v8, v48);
    uint64_t v26 = (uint64_t)v51;
    uint64_t v27 = v52;
    int v28 = v53;
    uint64_t v29 = sub_100003DD0(&qword_1000C48E8);
    char v50 = 1;
    sub_10000263C(v26, v27, v28);
    uint64_t v30 = sub_100005178(&qword_1000C4928, &qword_1000C48E8);
    Swift::String v43 = (uint64_t (*)(uint64_t, unint64_t, uint64_t))v29;
    v39[1] = v30;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100002804((uint64_t)v47, v60, v16 & 1);
    uint64_t v31 = v51;
    char v50 = 2;
    uint64_t v60 = v52;
    int v49 = v53;
    sub_10000264C((uint64_t)v51, v52, v53);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100002804((uint64_t)v45, v46, v44 & 1);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v6, v42);
    Swift::String v32 = v31;
    uint64_t v46 = v52;
    uint64_t v47 = v31;
    int v48 = v28;
    LOBYTE(v29) = v53;
    uint64_t v33 = (uint64_t)v51;
    sub_10000264C((uint64_t)v51, v52, v53);
    sub_100005128((uint64_t)a1);
    sub_1000027F4(v26, v27, v28);
    uint64_t v34 = (uint64_t)v32;
    uint64_t v35 = v60;
    LOBYTE(v32) = v49;
    sub_100002804(v34, v60, v49);
    uint64_t v36 = v46;
    uint64_t result = sub_100002804(v33, v46, v29);
    uint64_t v38 = v40;
    *uint64_t v40 = v26;
    v38[1] = v27;
    *((unsigned char *)v38 + 16) = v48;
    v38[3] = (uint64_t)v47;
    v38[4] = v35;
    *((unsigned char *)v38 + 40) = (_BYTE)v32;
    v38[6] = v33;
    v38[7] = v36;
    *((unsigned char *)v38 + 64) = v29;
  }
  return result;
}

uint64_t sub_10000DEBC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x636172746B636162 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636172746B636162 && a2 == 0xED0000676E6F4C65)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10000DFD8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  Swift::String v32 = a2;
  uint64_t v35 = sub_100003DD0(&qword_1000C4940);
  uint64_t v33 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6._object = (void *)0x80000001000A7B30;
  v6._char countAndFlagsBits = 0xD000000000000026;
  ArgumentHelp.init(stringLiteral:)(&v42, v6);
  ArgumentParser::ArgumentHelp v45 = v42;
  uint64_t v7 = static NameSpecification.long.getter();
  uint64_t v8 = Flag<A>.init(wrappedValue:name:help:)(0, v7, (uint64_t)&v45);
  uint64_t v10 = v9;
  char v12 = v11;
  int v34 = v11 & 1;
  v13._char countAndFlagsBits = 0xD00000000000002ELL;
  v13._object = (void *)0x80000001000A7B60;
  ArgumentHelp.init(stringLiteral:)(&v43, v13);
  ArgumentParser::ArgumentHelp v44 = v43;
  uint64_t v14 = static NameSpecification.long.getter();
  uint64_t v37 = Flag<A>.init(wrappedValue:name:help:)(0, v14, (uint64_t)&v44);
  uint64_t v46 = v15;
  int v36 = v16;
  sub_100005090(a1, a1[3]);
  sub_10000EEE4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v17 = (uint64_t)v8;
    char v18 = v34;
    uint64_t v19 = v46;
    int v20 = v37;
    char v21 = v36;
    sub_100005128((uint64_t)a1);
    sub_100002804(v17, v10, v18);
    return sub_100002804((uint64_t)v20, v19, v21 & 1);
  }
  else
  {
    sub_100003DD0(&qword_1000C48E8);
    char v38 = 0;
    sub_100005178(&qword_1000C4928, &qword_1000C48E8);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100002804((uint64_t)v8, v10, v12 & 1);
    uint64_t v22 = v39;
    uint64_t v23 = v40;
    char v24 = v41;
    char v38 = 1;
    sub_10000264C(v39, v40, v41);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100002804((uint64_t)v37, v46, v36 & 1);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v35);
    uint64_t v25 = v39;
    uint64_t v26 = v40;
    char v27 = v24;
    char v28 = v41;
    sub_10000264C(v39, v40, v41);
    sub_100005128((uint64_t)a1);
    sub_100002804(v22, v23, v27);
    uint64_t result = sub_100002804(v25, v26, v28);
    uint64_t v30 = v32;
    *Swift::String v32 = v22;
    v30[1] = v23;
    *((unsigned char *)v30 + 16) = v27;
    v30[3] = v25;
    v30[4] = v26;
    *((unsigned char *)v30 + 40) = v28;
  }
  return result;
}

uint64_t sub_10000E428(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64656C676E616DLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1852797802 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7972616D6D7573 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x694674757074756FLL && a2 == 0xEA0000000000656CLL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

__n128 sub_10000E5E0@<Q0>(uint64_t a1@<X8>)
{
  v2._char countAndFlagsBits = 0xD000000000000020;
  v2._object = (void *)0x80000001000A7B90;
  ArgumentHelp.init(stringLiteral:)(&v30, v2);
  ArgumentParser::ArgumentHelp v37 = v30;
  uint64_t v3 = static NameSpecification.long.getter();
  char v27 = Flag<A>.init(wrappedValue:name:help:)(0, v3, (uint64_t)&v37);
  uint64_t v5 = v4;
  char v7 = v6;
  v8._char countAndFlagsBits = 0x4A2074757074754FLL;
  v8._object = (void *)0xEB000000004E4F53;
  ArgumentHelp.init(stringLiteral:)(&v31, v8);
  ArgumentParser::ArgumentHelp v36 = v31;
  uint64_t v9 = static NameSpecification.long.getter();
  uint64_t v10 = Flag<A>.init(wrappedValue:name:help:)(0, v9, (uint64_t)&v36);
  uint64_t v12 = v11;
  char v14 = v13;
  v15._char countAndFlagsBits = 0xD00000000000002BLL;
  v15._object = (void *)0x80000001000A7BC0;
  ArgumentHelp.init(stringLiteral:)(&v32, v15);
  ArgumentParser::ArgumentHelp v35 = v32;
  uint64_t v16 = static NameSpecification.long.getter();
  uint64_t v17 = Flag<A>.init(wrappedValue:name:help:)(0, v16, (uint64_t)&v35);
  uint64_t v19 = v18;
  char v21 = v20;
  v22._object = (void *)0x80000001000A7BF0;
  v22._char countAndFlagsBits = 0xD000000000000010;
  ArgumentHelp.init(stringLiteral:)(&v33, v22);
  ArgumentParser::ArgumentHelp v34 = v33;
  uint64_t v23 = static NameSpecification.long.getter();
  char v24 = static ExitCode.success.getter();
  Option.init<A>(wrappedValue:name:parsing:help:completion:)(v23, v24, (uint64_t)&v34, 0, 0, 255, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t)&v28);
  char v25 = v29;
  __n128 result = v28;
  *(void *)a1 = v27;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v7 & 1;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v12;
  *(unsigned char *)(a1 + 40) = v14 & 1;
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v19;
  *(unsigned char *)(a1 + 64) = v21 & 1;
  *(__n128 *)(a1 + 72) = result;
  *(unsigned char *)(a1 + 88) = v25;
  return result;
}

uint64_t sub_10000E804@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  ArgumentParser::ArgumentHelp v44 = a2;
  uint64_t v3 = sub_100003DD0(&qword_1000C4918);
  uint64_t v45 = *(void *)(v3 - 8);
  uint64_t v46 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6._char countAndFlagsBits = 0xD000000000000020;
  v6._object = (void *)0x80000001000A7B90;
  ArgumentHelp.init(stringLiteral:)(&v63, v6);
  ArgumentParser::ArgumentHelp v70 = v63;
  uint64_t v7 = static NameSpecification.long.getter();
  uint64_t v47 = Flag<A>.init(wrappedValue:name:help:)(0, v7, (uint64_t)&v70);
  uint64_t v71 = v8;
  char v10 = v9;
  int v58 = v9 & 1;
  v11._char countAndFlagsBits = 0x4A2074757074754FLL;
  v11._object = (void *)0xEB000000004E4F53;
  ArgumentHelp.init(stringLiteral:)(&v64, v11);
  ArgumentParser::ArgumentHelp v69 = v64;
  uint64_t v12 = static NameSpecification.long.getter();
  uint64_t v52 = Flag<A>.init(wrappedValue:name:help:)(0, v12, (uint64_t)&v69);
  ArgumentParser::ArgumentHelp v57 = (uint64_t (*)(uint64_t, unint64_t, uint64_t))v13;
  char v15 = v14;
  int v54 = v14 & 1;
  v16._char countAndFlagsBits = 0xD00000000000002BLL;
  v16._object = (void *)0x80000001000A7BC0;
  ArgumentHelp.init(stringLiteral:)(&v65, v16);
  ArgumentParser::ArgumentHelp v68 = v65;
  uint64_t v17 = static NameSpecification.long.getter();
  uint64_t v18 = Flag<A>.init(wrappedValue:name:help:)(0, v17, (uint64_t)&v68);
  uint64_t v55 = v19;
  uint64_t v56 = (uint64_t)v18;
  char v21 = v20;
  int v53 = v20 & 1;
  v22._object = (void *)0x80000001000A7BF0;
  v22._char countAndFlagsBits = 0xD000000000000010;
  ArgumentHelp.init(stringLiteral:)(&v66, v22);
  ArgumentParser::ArgumentHelp v67 = v66;
  uint64_t v23 = static NameSpecification.long.getter();
  char v24 = static ExitCode.success.getter();
  Option.init<A>(wrappedValue:name:parsing:help:completion:)(v23, v24, (uint64_t)&v67, 0, 0, 255, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t)&v60);
  char v50 = v61;
  char v51 = v60;
  int v49 = v62;
  sub_100005090(a1, a1[3]);
  sub_10000EE90();
  uint64_t v25 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25)
  {
    uint64_t v26 = v47;
    uint64_t v27 = v71;
    char v28 = v58;
    char v29 = v52;
    uint64_t v30 = (uint64_t)v57;
    char v31 = v54;
    sub_100005128((uint64_t)a1);
    sub_100002804((uint64_t)v26, v27, v28);
    sub_100002804((uint64_t)v29, v30, v31);
    sub_100002804(v56, v55, v53);
    return sub_1000027F4((uint64_t)v51, (uint64_t)v50, v49);
  }
  else
  {
    sub_100003DD0(&qword_1000C48E8);
    char v59 = 0;
    uint64_t v48 = sub_100005178(&qword_1000C4928, &qword_1000C48E8);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100002804((uint64_t)v47, v71, v10 & 1);
    uint64_t v32 = (uint64_t)v60;
    char v59 = 1;
    uint64_t v71 = (uint64_t)v61;
    int v58 = v62;
    sub_10000264C((uint64_t)v60, (uint64_t)v61, v62);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100002804((uint64_t)v52, (uint64_t)v57, v15 & 1);
    ArgumentParser::ArgumentHelp v33 = v60;
    char v59 = 2;
    ArgumentParser::ArgumentHelp v57 = v61;
    int v54 = v62;
    sub_10000264C((uint64_t)v60, (uint64_t)v61, v62);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100002804(v56, v55, v21 & 1);
    uint64_t v34 = (uint64_t)v60;
    uint64_t v35 = (uint64_t)v61;
    int v53 = v62;
    sub_100003DD0(&qword_1000C4930);
    char v59 = 3;
    uint64_t v55 = v35;
    uint64_t v56 = v34;
    uint64_t v36 = v35;
    LOBYTE(v35) = v53;
    sub_10000264C(v34, v36, v53);
    sub_100005178(&qword_1000C4938, &qword_1000C4930);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1000027F4((uint64_t)v51, (uint64_t)v50, v49);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v5, v46);
    uint64_t v37 = (uint64_t)v60;
    char v51 = v61;
    uint64_t v52 = v33;
    LODWORD(v50) = v62;
    sub_10000263C((uint64_t)v60, (uint64_t)v61, v62);
    sub_100005128((uint64_t)a1);
    sub_100002804(v32, v71, v58);
    uint64_t v38 = (uint64_t)v57;
    LOBYTE(v34) = v54;
    sub_100002804((uint64_t)v33, (uint64_t)v57, v54);
    uint64_t v39 = v55;
    sub_100002804(v56, v55, v35);
    uint64_t v40 = (uint64_t)v51;
    LOBYTE(v35) = (_BYTE)v50;
    uint64_t result = sub_1000027F4(v37, (uint64_t)v51, (char)v50);
    ArgumentParser::ArgumentHelp v42 = v44;
    uint64_t v43 = v71;
    *ArgumentParser::ArgumentHelp v44 = v32;
    v42[1] = v43;
    *((unsigned char *)v42 + 16) = v58;
    v42[3] = (uint64_t)v52;
    v42[4] = v38;
    *((unsigned char *)v42 + 40) = v34;
    v42[6] = v56;
    v42[7] = v39;
    *((unsigned char *)v42 + 64) = v53;
    v42[9] = v37;
    v42[10] = v40;
    *((unsigned char *)v42 + 88) = v35;
  }
  return result;
}

unint64_t sub_10000EE90()
{
  unint64_t result = qword_1000C4920;
  if (!qword_1000C4920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4920);
  }
  return result;
}

unint64_t sub_10000EEE4()
{
  unint64_t result = qword_1000C4948;
  if (!qword_1000C4948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4948);
  }
  return result;
}

unint64_t sub_10000EF38()
{
  unint64_t result = qword_1000C4958;
  if (!qword_1000C4958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4958);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for UniversalOptions.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000F058);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UniversalOptions.CodingKeys()
{
  return &type metadata for UniversalOptions.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for BacktraceOptions.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000F15CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BacktraceOptions.CodingKeys()
{
  return &type metadata for BacktraceOptions.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GenericMetadataOptions.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GenericMetadataOptions.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000F2F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericMetadataOptions.CodingKeys()
{
  return &type metadata for GenericMetadataOptions.CodingKeys;
}

unint64_t sub_10000F32C()
{
  unint64_t result = qword_1000C4968;
  if (!qword_1000C4968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4968);
  }
  return result;
}

unint64_t sub_10000F384()
{
  unint64_t result = qword_1000C4970;
  if (!qword_1000C4970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4970);
  }
  return result;
}

unint64_t sub_10000F3DC()
{
  unint64_t result = qword_1000C4978;
  if (!qword_1000C4978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4978);
  }
  return result;
}

unint64_t sub_10000F434()
{
  unint64_t result = qword_1000C4980;
  if (!qword_1000C4980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4980);
  }
  return result;
}

unint64_t sub_10000F48C()
{
  unint64_t result = qword_1000C4988;
  if (!qword_1000C4988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4988);
  }
  return result;
}

unint64_t sub_10000F4E4()
{
  unint64_t result = qword_1000C4990;
  if (!qword_1000C4990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4990);
  }
  return result;
}

unint64_t sub_10000F53C()
{
  unint64_t result = qword_1000C4998;
  if (!qword_1000C4998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4998);
  }
  return result;
}

unint64_t sub_10000F594()
{
  unint64_t result = qword_1000C49A0;
  if (!qword_1000C49A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C49A0);
  }
  return result;
}

unint64_t sub_10000F5EC()
{
  unint64_t result = qword_1000C49A8;
  if (!qword_1000C49A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C49A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for DumpArrays()
{
  return &type metadata for DumpArrays;
}

double sub_10000F670()
{
  CommandConfiguration.init(commandName:abstract:usage:discussion:version:shouldDisplay:subcommands:defaultSubcommand:helpNames:)(0, 0, 0xD000000000000034, 0x80000001000A7C20, 0, 0, 0, 0xE000000000000000, (uint64_t)&v1, 0, 0xE000000000000000, 1, (__n128)(unint64_t)_swiftEmptyArrayStorage, 0, 0);
  xmmword_1000C6300 = v7;
  unk_1000C6310 = v8;
  qword_1000C6320 = v9;
  xmmword_1000C62C0 = v3;
  unk_1000C62D0 = v4;
  xmmword_1000C62E0 = v5;
  unk_1000C62F0 = v6;
  double result = *(double *)&v2;
  xmmword_1000C62A0 = v1;
  *(_OWORD *)algn_1000C62B0 = v2;
  return result;
}

uint64_t sub_10000F724(uint64_t a1, uint64_t a2)
{
  sub_100003DD0(&qword_1000C4758);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000A31B0;
  *(void *)(v4 + 32) = 0x73736572646441;
  *(void *)(v4 + 40) = 0xE700000000000000;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = 1702521171;
  *(void *)(v4 + 72) = 0xE400000000000000;
  *(void *)(v4 + 88) = &type metadata for String;
  *(void *)(v4 + 96) = 0x746E756F43;
  *(void *)(v4 + 104) = 0xE500000000000000;
  *(void *)(v4 + 152) = &type metadata for String;
  *(void *)(v4 + 120) = &type metadata for String;
  *(void *)(v4 + 128) = 0x7373616C43207349;
  *(void *)(v4 + 136) = 0xE800000000000000;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_10000FF80;
  *(void *)(v5 + 24) = &v12;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_10000FF98;
  *(void *)(v6 + 24) = v5;
  v11[0] = sub_10000A9F8;
  v11[1] = v6;
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  uint64_t v8 = qword_1000C4710;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  off_1000C64C8(v7, v11, 1, sub_10001130C);
  swift_release();
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000F950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_reflection_metadataForObject();
  if (!result) {
    return result;
  }
  if (!*(void *)(a3 + 40))
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t result = swift_reflection_typeRefForMetadata();
  if (!result) {
    return result;
  }
  uint64_t result = swift_reflection_copyNameForTypeRef();
  if (!result) {
    return result;
  }
  uint64_t v8 = (void *)result;
  String.init(cString:)();
  free(v8);
  v9._object = (void *)0x80000001000A78F0;
  v9._char countAndFlagsBits = 0xD00000000000001DLL;
  LOBYTE(v8) = String.hasPrefix(_:)(v9);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v8 & 1) == 0) {
    return result;
  }
  swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(void))(a4 + 72))();
  if (!*(void *)(a3 + 40)) {
    goto LABEL_20;
  }
  char v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))result;
  swift_unknownObjectRetain();
  uint64_t result = sub_100007D84();
  if (!*(void *)(a3 + 40))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  char v11 = result;
  uint64_t v12 = v10(a3, a1, 24, 0);
  sub_100003DD0(&qword_1000C4758);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1000A2660;
  sub_100004614();
  v14._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._char countAndFlagsBits = 9;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._char countAndFlagsBits = 9;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  if (v12)
  {
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v20 = v19;
  }
  else
  {
    unint64_t v20 = 0xE90000000000003ELL;
    uint64_t v18 = 0x6E776F6E6B6E753CLL;
  }
  unint64_t v21 = v20;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  v22._char countAndFlagsBits = 9;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  if (v11) {
    uint64_t v23 = 1702195828;
  }
  else {
    uint64_t v23 = 0x65736C6166;
  }
  if (v11) {
    unint64_t v24 = 0xE400000000000000;
  }
  else {
    unint64_t v24 = 0xE500000000000000;
  }
  unint64_t v25 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 32) = 30768;
  *(void *)(v13 + 40) = 0xE200000000000000;
  print(_:separator:terminator:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000FC3C(uint64_t a1)
{
  unint64_t v2 = sub_100010418();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000FC78(uint64_t a1)
{
  unint64_t v2 = sub_100010418();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000FCB4@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000C4658 != -1) {
    swift_once();
  }

  return sub_1000046F0((uint64_t)&xmmword_1000C62A0, a1);
}

uint64_t sub_10000FD20()
{
  uint64_t v0 = sub_100003DD0(&qword_1000C4740);
  OptionGroup.wrappedValue.getter(v0, (uint64_t)&v10);
  uint64_t v1 = v10;
  uint64_t v2 = v11;
  char v3 = v12;
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  char v6 = v15;
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  int v19 = v18;
  sub_10000AA38(v10, v11, v12, v13, v14, v15);
  sub_1000027F4(v1, v2, v3);
  sub_100002804(v4, v5, v6);
  return sub_100002804(v7, v8, v19);
}

double sub_10000FE2C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10000FFD8(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

unint64_t sub_10000FE88(uint64_t a1)
{
  unint64_t result = sub_10000FEB0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10000FEB0()
{
  unint64_t result = qword_1000C49B0;
  if (!qword_1000C49B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C49B0);
  }
  return result;
}

unint64_t sub_10000FF04(uint64_t a1)
{
  unint64_t result = sub_10000FF2C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10000FF2C()
{
  unint64_t result = qword_1000C49B8;
  if (!qword_1000C49B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C49B8);
  }
  return result;
}

uint64_t sub_10000FF80(uint64_t a1, uint64_t a2)
{
  return sub_10000F950(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10000FF88()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000FF98(uint64_t a1, uint64_t a2)
{
  return sub_10001EF40(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_10000FFA0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000FFD8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v3 = sub_100003DD0(&qword_1000C49C0);
  uint64_t v50 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  __chkstk_darwin(v3);
  long long v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = *(unsigned char *)ArgumentVisibility.default.unsafeMutableAddressor();
  unint64_t v7 = sub_10000474C();
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, v6, (uint64_t)&type metadata for UniversalOptions, v7, (uint64_t)&v59);
  uint64_t v52 = v60;
  uint64_t v53 = v59;
  uint64_t v8 = v62;
  uint64_t v73 = v61;
  uint64_t v9 = v63;
  uint64_t v56 = v65;
  uint64_t v57 = v64;
  uint64_t v55 = v66;
  int v10 = v67;
  int v11 = v68;
  uint64_t v58 = v72;
  sub_100005090(a1, a1[3]);
  sub_100010418();
  int v49 = v5;
  char v12 = v73;
  uint64_t v13 = v54;
  uint64_t v14 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v15 = v53;
  if (v13)
  {
    sub_100005128((uint64_t)a1);
    sub_10000274C(v15, v14, v12, v8, v9, v57, v56, v55, v10, v11);
    return swift_bridgeObjectRelease();
  }
  else
  {
    int v45 = v11;
    int v46 = v10;
    uint64_t v47 = v9;
    uint64_t v54 = v8;
    uint64_t v16 = v53;
    sub_100003DD0(&qword_1000C4740);
    sub_100006BA4();
    uint64_t v17 = v51;
    unsigned __int8 v18 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v18, v17);
    uint64_t v19 = v59;
    uint64_t v20 = v60;
    char v21 = v61;
    uint64_t v42 = v62;
    uint64_t v41 = v63;
    uint64_t v39 = v64;
    uint64_t v38 = v65;
    uint64_t v37 = v66;
    int v43 = v67;
    LODWORD(v51) = v68;
    LODWORD(v50) = v69;
    LODWORD(v49) = v70;
    uint64_t v44 = v71;
    uint64_t v40 = v72;
    uint64_t v35 = v59;
    uint64_t v34 = v60;
    uint64_t v36 = v61;
    sub_100002594(v59, v60, v61, v62, v63, v64, v65, v66, v67, v68);
    swift_bridgeObjectRetain();
    sub_10000274C(v16, v14, v73, v54, v47, v57, v56, v55, v46, v45);
    swift_bridgeObjectRelease();
    sub_100005128((uint64_t)a1);
    char v22 = v43;
    uint64_t v23 = v20;
    char v24 = v21;
    uint64_t v25 = v42;
    uint64_t v26 = v41;
    uint64_t v27 = v39;
    uint64_t v28 = v38;
    uint64_t v29 = v37;
    sub_10000274C(v19, v23, v24, v42, v41, v39, v38, v37, v43, v51);
    uint64_t v30 = v40;
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v32 = v48;
    uint64_t v33 = v34;
    *uint64_t v48 = v35;
    v32[1] = v33;
    v32[2] = v36;
    v32[3] = v25;
    v32[4] = v26;
    v32[5] = v27;
    v32[6] = v28;
    v32[7] = v29;
    *((unsigned char *)v32 + 64) = v22;
    *((unsigned char *)v32 + 65) = v51;
    *((unsigned char *)v32 + 66) = v50;
    *((unsigned char *)v32 + 67) = (_BYTE)v49;
    v32[9] = v44;
    v32[10] = v30;
  }
  return result;
}

unint64_t sub_100010418()
{
  unint64_t result = qword_1000C49C8;
  if (!qword_1000C49C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C49C8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DumpArrays.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100010508);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DumpArrays.CodingKeys()
{
  return &type metadata for DumpArrays.CodingKeys;
}

unint64_t sub_100010544()
{
  unint64_t result = qword_1000C49D0;
  if (!qword_1000C49D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C49D0);
  }
  return result;
}

unint64_t sub_10001059C()
{
  unint64_t result = qword_1000C49D8;
  if (!qword_1000C49D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C49D8);
  }
  return result;
}

unint64_t sub_1000105F4()
{
  unint64_t result = qword_1000C49E0;
  if (!qword_1000C49E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C49E0);
  }
  return result;
}

unint64_t sub_100010648()
{
  if (*(void *)(v0 + 32))
  {
    unint64_t v1 = *(void *)(v0 + 24);
  }
  else
  {
    uint64_t v2 = sub_100014414(*(_DWORD *)(v0 + 20));
    if (v3) {
      unint64_t v1 = v2;
    }
    else {
      unint64_t v1 = 0xD000000000000011;
    }
    if (v3) {
      unint64_t v4 = v3;
    }
    else {
      unint64_t v4 = 0x80000001000A7DF0;
    }
    *(void *)(v0 + 24) = v1;
    *(void *)(v0 + 32) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

char *sub_1000106D4()
{
  if (*(void *)(v0 + 96))
  {
    unint64_t v1 = *(char **)(v0 + 96);
  }
  else
  {
    uint64_t v2 = v0;
    task_inspect_t v3 = *(_DWORD *)(v0 + 16);
    type metadata accessor for DarwinRemoteProcess.PortList();
    swift_allocObject();
    unint64_t v4 = sub_100011330(v3);
    if (v4)
    {
      uint64_t v5 = (uint64_t)v4;
      swift_retain();
      unint64_t v1 = sub_100012ACC(v5);
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v1 = (char *)_swiftEmptyArrayStorage;
    }
    *(void *)(v2 + 96) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100010798(uint64_t a1, int a2, uint64_t a3, unsigned char *a4)
{
  return sub_100012DBC(a2, a4);
}

uint64_t sub_1000107A4(uint64_t a1, uint64_t a2)
{
  String.append(_:)(*(Swift::String *)&a1);
  uint64_t v3 = v2[8];
  uint64_t v4 = v2[9];
  if (qword_1000C46A8 != -1) {
    swift_once();
  }
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))off_1000C6460;
  uint64_t v6 = String.utf8CString.getter();
  uint64_t v7 = v5(v3, v4, v6 + 32);
  uint64_t v9 = v8;
  swift_release();
  if (qword_1000C46E8 != -1) {
    swift_once();
  }
  if (off_1000C64A0(v7, v9))
  {
    uint64_t v11 = v2[10];
    uint64_t v10 = v2[11];
    char v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))off_1000C6460;
    uint64_t v13 = String.utf8CString.getter();
    uint64_t v7 = v12(v11, v10, v13 + 32);
    uint64_t v9 = v14;
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (qword_1000C46C0 != -1) {
    swift_once();
  }
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))off_1000C6478;

  return v15(v7, v9);
}

size_t sub_100010950(size_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = *(unsigned int *)(result + 16);
    uint64_t v4 = qword_1000C4700;
    swift_retain();
    if (v4 != -1) {
      swift_once();
    }
    uint64_t v5 = (const char *)off_1000C64B8(v3, a2);
    if (v5)
    {
      size_t v6 = strlen(v5);
      swift_release();
      if ((v6 & 0x8000000000000000) == 0) {
        return v6;
      }
      __break(1u);
    }
    swift_release();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000109FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    unint64_t result = swift_retain();
    if (!a2)
    {
      swift_release();
      return 0;
    }
    if ((a3 & 0x8000000000000000) == 0)
    {
      uint64_t v5 = static String._fromUTF8Repairing(_:)();
      uint64_t v7 = sub_1000107A4(v5, v6);
      swift_release();
      swift_bridgeObjectRelease();
      return v7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

char *sub_100010A84(mach_port_t pid, char a2)
{
  kern_return_t v6;
  mach_port_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  char *result;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  void **v16;
  unint64_t v17;
  uint64_t v18;
  kern_return_t v19;
  mach_error_t v20;
  uint64_t v21;
  kern_return_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void, void, const char *, unint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t ReflectionContextWithDataLayout;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, unint64_t, void *);
  uint64_t v38;
  void *v39;
  char isEscapingClosureAtFileLocation;
  mach_port_t corpse_task_port;
  mach_port_name_t task;
  void **aBlock;
  unint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  void *v46;
  uint64_t (*v47)();
  uint64_t v48;

  uint64_t v3 = v2;
  *(void *)(v2 + 96) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 20) = pid;
  task = 0;
  uint64_t v6 = task_for_pid(mach_task_self_, pid, &task);
  if (v6)
  {
    uint64_t v7 = v6;
    sub_100003DD0(&qword_1000C4758);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1000A2660;
    aBlock = 0;
    uint64_t v44 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    aBlock = (void **)0xD00000000000001BLL;
    uint64_t v44 = 0x80000001000A7E10;
    corpse_task_port = pid;
    v9._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._char countAndFlagsBits = 8250;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    unint64_t result = mach_error_string(v7);
    if (result)
    {
      v12._char countAndFlagsBits = String.init(cString:)();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._char countAndFlagsBits = 32;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      v14._char countAndFlagsBits = 30768;
      v14._object = (void *)0xE200000000000000;
      String.append(_:)(v14);
      corpse_task_port = v7;
      sub_100012F40();
LABEL_4:
      v15._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      uint64_t v16 = aBlock;
      uint64_t v17 = v44;
      *(void *)(v8 + 56) = &type metadata for String;
      *(void *)(v8 + 32) = v16;
      *(void *)(v8 + 40) = v17;
      if (qword_1000C4660 != -1) {
        swift_once();
      }
      swift_beginAccess();
      sub_10000A900();
      print<A>(_:separator:terminator:to:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_deallocPartialClassInstance();
      return 0;
    }
    __break(1u);
    goto LABEL_33;
  }
  unsigned __int8 v18 = task;
  if ((a2 & 1) == 0)
  {
LABEL_22:
    *(_DWORD *)(v3 + 16) = v18;
    if (qword_1000C4698 != -1) {
      swift_once();
    }
    uint64_t v28 = off_1000C6450(v18);
    uint64_t v30 = v29;
    *(void *)(v3 + 48) = v28;
    *(void *)(v3 + 56) = v29;
    if (qword_1000C46A0 != -1) {
      swift_once();
    }
    char v31 = (uint64_t (*)(void, void, const char *, unint64_t))off_1000C6458;
    *(void *)(v3 + 64) = off_1000C6458(v28, v30, "libswiftCore.dylib", 0x8000000000000000);
    *(void *)(v3 + 72) = v32;
    *(void *)(v3 + 80) = v31(*(void *)(v3 + 48), *(void *)(v3 + 56), "libswift_Concurrency.dylib", 0x8000000000000000);
    *(void *)(v3 + 88) = v33;
    sub_10001E2A8(*(unsigned int *)(v3 + 16));
    variable initialization expression of ToolInfoV0.serializationVersion();
    swift_retain();
    ReflectionContextWithDataLayout = swift_reflection_createReflectionContextWithDataLayout();
    if (ReflectionContextWithDataLayout)
    {
      *(void *)(v3 + 40) = ReflectionContextWithDataLayout;
      uint64_t v35 = *(void *)(v3 + 48);
      uint64_t v36 = *(void *)(v3 + 56);
      if (qword_1000C46D8 != -1) {
        swift_once();
      }
      uint64_t v37 = (void (*)(uint64_t, uint64_t, unint64_t, void *))off_1000C6490;
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = sub_100013020;
      *(void *)(v38 + 24) = v3;
      uint64_t v47 = sub_100013038;
      uint64_t v48 = v38;
      aBlock = _NSConcreteStackBlock;
      uint64_t v44 = 1107296256;
      int v45 = sub_100011888;
      int v46 = &unk_1000BB4E8;
      uint64_t v39 = _Block_copy(&aBlock);
      swift_retain();
      v37(v35, v36, 0x8000000000000000, v39);
      _Block_release(v39);
      swift_release();
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0) {
        return (char *)v3;
      }
      __break(1u);
    }
    swift_release();
    return 0;
  }
  corpse_task_port = 0;
  uint64_t v19 = task_generate_corpse(task, &corpse_task_port);
  if (!v19)
  {
LABEL_16:
    if (qword_1000C4708 != -1) {
      swift_once();
    }
    off_1000C64C0(v18);
    mach_port_deallocate(mach_task_self_, v18);
    unsigned __int8 v18 = corpse_task_port;
    task = corpse_task_port;
    goto LABEL_22;
  }
  uint64_t v20 = v19;
  if (v19 == 6)
  {
    char v21 = 0;
    do
    {
      sleep(1 << v21);
      if (v21 == 5)
      {
        unsigned __int8 v18 = task;
        goto LABEL_22;
      }
      char v22 = task_generate_corpse(v18, &corpse_task_port);
      ++v21;
    }
    while (v22 == 6);
    uint64_t v20 = v22;
    if (v22) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
LABEL_19:
  sub_100003DD0(&qword_1000C4758);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1000A2660;
  aBlock = 0;
  uint64_t v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  aBlock = (void **)0xD00000000000001ELL;
  uint64_t v44 = 0x80000001000A7E90;
  v23._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._char countAndFlagsBits = 8250;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  unint64_t result = mach_error_string(v20);
  if (result)
  {
    v25._char countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._char countAndFlagsBits = 32;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    v27._char countAndFlagsBits = 30768;
    v27._object = (void *)0xE200000000000000;
    String.append(_:)(v27);
    sub_100012F40();
    goto LABEL_4;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_10001116C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1000C46E0 != -1) {
    swift_once();
  }
  uint64_t v6 = off_1000C6498(a1, a2);
  uint64_t v7 = *(void *)(a3 + 40);

  return _swift_reflection_addImage(v7, v6);
}

uint64_t sub_1000111F8()
{
  uint64_t v1 = *(unsigned int *)(v0 + 16);
  if (qword_1000C4708 != -1) {
    swift_once();
  }
  off_1000C64C0(v1);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  if (qword_1000C4690 != -1) {
    swift_once();
  }
  off_1000C6448(v2, v3);
  mach_port_deallocate(mach_task_self_, *(_DWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DarwinRemoteProcess()
{
  return self;
}

void (**sub_10001130C(uint64_t a1, void (**a2)(uint64_t *, uint64_t *), uint64_t a3, uint64_t a4, unsigned int a5))(uint64_t *, uint64_t *)
{
  return sub_100012F94(a2, a4, a5);
}

uint64_t (*sub_10001131C())()
{
  return sub_10001094C;
}

char *sub_100011330(task_inspect_t a1)
{
  kern_return_t v3;
  mach_error_t v4;
  uint64_t v5;
  char *result;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  mach_msg_type_number_t act_listCnt;
  thread_act_array_t act_list;

  uint64_t v2 = v1;
  act_list = 0;
  act_listCnt = 0;
  uint64_t v3 = task_threads(a1, &act_list, &act_listCnt);
  if (!v3)
  {
    uint64_t v11 = act_listCnt;
    *(void *)(v1 + 16) = act_list;
    *(void *)(v1 + 24) = v11;
    return (char *)v2;
  }
  uint64_t v4 = v3;
  sub_100003DD0(&qword_1000C4758);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1000A2660;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  unint64_t result = mach_error_string(v4);
  if (result)
  {
    v7._char countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._char countAndFlagsBits = 2016421920;
    v8._object = (void *)0xE400000000000000;
    String.append(_:)(v8);
    sub_100012F40();
    v9._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._char countAndFlagsBits = 41;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 32) = 0xD000000000000026;
    *(void *)(v5 + 40) = 0x80000001000A7DC0;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    type metadata accessor for DarwinRemoteProcess.PortList();
    swift_deallocPartialClassInstance();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000114FC()
{
  vm_address_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  if (!v1)
  {
LABEL_5:
    if ((v2 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (!(v2 >> 62))
    {
      goto LABEL_7;
    }
    __break(1u);
    return result;
  }
  if (v2)
  {
    uint64_t v3 = 4 * v2;
    uint64_t v4 = *(mach_port_name_t **)(v0 + 16);
    do
    {
      mach_port_name_t v5 = *v4++;
      uint64_t result = mach_port_deallocate(mach_task_self_, v5);
      v3 -= 4;
    }
    while (v3);
    goto LABEL_5;
  }
LABEL_7:
  vm_deallocate(mach_task_self_, v1, 4 * v2);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DarwinRemoteProcess.PortList()
{
  return self;
}

__n128 initializeBufferWithCopyOfBuffer for DarwinRemoteProcess.ThreadInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DarwinRemoteProcess.ThreadInfo(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DarwinRemoteProcess.ThreadInfo(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 21) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DarwinRemoteProcess.ThreadInfo()
{
  return &type metadata for DarwinRemoteProcess.ThreadInfo;
}

unint64_t sub_100011640()
{
  unint64_t result = qword_1000C4B68;
  if (!qword_1000C4B68)
  {
    sub_1000046A8(&qword_1000C4B70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4B68);
  }
  return result;
}

uint64_t sub_10001169C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 24);
    uint64_t result = swift_release();
    uint64_t v7 = v4 + 4 * v5;
  }
  else
  {
    uint64_t result = swift_release();
    uint64_t v7 = 0;
  }
  *a1 = v4;
  a1[1] = v7;
  return result;
}

uint64_t variable initialization expression of ToolInfoV0.serializationVersion()
{
  return 0;
}

uint64_t static SingleValueParsingStrategy.unconditional.getter()
{
  return 2;
}

uint64_t sub_1000116FC()
{
  uint64_t v1 = sub_10001268C(*v0);
  swift_release();
  return v1;
}

uint64_t sub_100011734(int **a1, uint64_t a2, uint64_t a3)
{
  return sub_1000127F0(a1, a2, a3);
}

uint64_t sub_100011758()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t sub_1000117C4(mach_port_name_t name)
{
  ipc_space_read_t v3 = *(_DWORD *)(v1 + 16);
  *(void *)object_addr = 0;
  if (mach_port_kernel_object(v3, name, object_addr, &object_addr[1])) {
    return 0;
  }
  unsigned int v4 = object_addr[1];
  uint64_t v5 = sub_1000106D4();
  uint64_t v6 = *((void *)v5 + 2);
  if (!v6)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v7 = v5 + 52;
  while ((*v7 & 1) != 0 || *((_DWORD *)v7 - 1) != v4)
  {
    v7 += 24;
    if (!--v6) {
      goto LABEL_8;
    }
  }
  uint64_t v8 = *(void *)(v7 - 20);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100011888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

char *sub_1000118B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C48);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000119B4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C40);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 648);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[648 * v8]) {
      memmove(v12, v13, 648 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 648 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100011ACC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C50);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100011BE4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4BF8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 24 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100011CF0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C30);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100011DEC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C58);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100011EF0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C70);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8]) {
      memmove(v12, v13, 80 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100012008(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C60);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100003DD0(&qword_1000C4C68);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100012144(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C10);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 120);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[15 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 120 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100003DD0(&qword_1000C4C18);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_10001227C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C20);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 95;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 7);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[16 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, v8 << 7);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100003DD0(&qword_1000C4C28);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000123A0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C00);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000124A4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C08);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100012590(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C38);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10001268C(uint64_t result)
{
  uint64_t v1 = *(int **)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(result + 24);
    ipc_space_read_t v3 = _swiftEmptyArrayStorage;
    uint64_t v4 = 0;
    if (v2)
    {
      char v5 = &_swiftEmptyArrayStorage[4];
      uint64_t v6 = 4 * v2;
      while (1)
      {
        int v7 = *v1;
        if (!v4)
        {
          unint64_t v8 = v3[3];
          if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_29;
          }
          int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
          if (v9 <= 1) {
            uint64_t v10 = 1;
          }
          else {
            uint64_t v10 = v9;
          }
          sub_100003DD0(&qword_1000C4BE8);
          int64_t v11 = (void *)swift_allocObject();
          int64_t v12 = j__malloc_size(v11);
          uint64_t v13 = v12 - 32;
          if (v12 < 32) {
            uint64_t v13 = v12 - 29;
          }
          uint64_t v14 = v13 >> 2;
          void v11[2] = v10;
          v11[3] = 2 * (v13 >> 2);
          unint64_t v15 = (unint64_t)(v11 + 4);
          uint64_t v16 = v3[3] >> 1;
          if (v3[2])
          {
            if (v11 != v3 || v15 >= (unint64_t)v3 + 4 * v16 + 32) {
              memmove(v11 + 4, v3 + 4, 4 * v16);
            }
            v3[2] = 0;
          }
          char v5 = (_DWORD *)(v15 + 4 * v16);
          uint64_t v4 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - v16;
          uint64_t result = swift_release();
          ipc_space_read_t v3 = v11;
        }
        BOOL v18 = __OFSUB__(v4--, 1);
        if (v18) {
          break;
        }
        ++v1;
        *v5++ = v7;
        v6 -= 4;
        if (!v6) {
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v4 = 0;
    ipc_space_read_t v3 = _swiftEmptyArrayStorage;
  }
LABEL_24:
  unint64_t v19 = v3[3];
  if (v19 < 2) {
    return (uint64_t)v3;
  }
  unint64_t v20 = v19 >> 1;
  BOOL v18 = __OFSUB__(v20, v4);
  uint64_t v21 = v20 - v4;
  if (!v18)
  {
    v3[2] = v21;
    return (uint64_t)v3;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000127F0(int **a1, uint64_t a2, uint64_t a3)
{
  int v7 = *(int **)(v3 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)(v3 + 24);
    uint64_t result = swift_release();
    uint64_t v10 = &v7[v8];
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t result = swift_release();
    uint64_t v10 = 0;
    if (!a2)
    {
LABEL_12:
      a3 = 0;
      goto LABEL_13;
    }
  }
  if (!a3)
  {
LABEL_13:
    *a1 = v7;
    a1[1] = v10;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (v7)
    {
      uint64_t v11 = 0;
      if (v7 == v10)
      {
LABEL_11:
        a3 = v11;
      }
      else
      {
        while (1)
        {
          int v12 = *v7++;
          *(_DWORD *)(a2 + 4 * v11) = v12;
          if (a3 - 1 == v11) {
            break;
          }
          ++v11;
          if (v7 == v10) {
            goto LABEL_11;
          }
        }
      }
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000128A8(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  char v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    *char v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    _OWORD v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v27 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = 16 * v16;
    uint64_t v21 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    char v24 = (uint64_t *)(*(void *)(a4 + 56) + v20);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    *uint64_t v11 = v23;
    v11[1] = v22;
    void v11[2] = v25;
    v11[3] = v26;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 4;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v27;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

char *sub_100012ACC(uint64_t a1)
{
  kern_return_t v8;
  mach_error_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  unsigned int object_type[2];
  unint64_t v25;
  mach_msg_type_number_t thread_info_outCnt;
  unsigned int object_addr[2];
  uint64_t v28;
  uint64_t v29;

  uint64_t v1 = *(thread_inspect_t **)(a1 + 16);
  if (!v1) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v3 = 4 * v2;
  uint64_t v4 = (char *)_swiftEmptyArrayStorage;
  do
  {
    thread_inspect_t v7 = *v1;
    *(void *)object_addr = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    thread_info_outCnt = 6;
    uint64_t v8 = thread_info(v7, 4u, (thread_info_t)object_addr, &thread_info_outCnt);
    if (v8)
    {
      unint64_t v9 = v8;
      sub_100003DD0(&qword_1000C4758);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_1000A2660;
      *(void *)object_type = 0;
      uint64_t v25 = 0xE000000000000000;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      *(void *)object_type = 0xD000000000000023;
      uint64_t v25 = 0x80000001000A7D90;
      v11._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._char countAndFlagsBits = 8250;
      v12._object = (void *)0xE200000000000000;
      String.append(_:)(v12);
      if (!mach_error_string(v9)) {
        __break(1u);
      }
      v13._char countAndFlagsBits = String.init(cString:)();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._char countAndFlagsBits = 2016421920;
      v14._object = (void *)0xE400000000000000;
      String.append(_:)(v14);
      sub_100012F40();
      v15._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._char countAndFlagsBits = 41;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      int64_t v17 = *(void *)object_type;
      unint64_t v18 = v25;
      *(void *)(v10 + 56) = &type metadata for String;
      *(void *)(v10 + 32) = v17;
      *(void *)(v10 + 40) = v18;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v5 = *(void *)object_addr;
      uint64_t v6 = v28;
      object_addr[0] = 0;
      object_type[0] = 0;
      if (!mach_port_kernel_object(mach_task_self_, v7, object_type, object_addr))
      {
        int64_t v19 = object_addr[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = sub_100011BE4(0, *((void *)v4 + 2) + 1, 1, v4);
        }
        uint64_t v21 = *((void *)v4 + 2);
        uint64_t v20 = *((void *)v4 + 3);
        if (v21 >= v20 >> 1) {
          uint64_t v4 = sub_100011BE4((char *)(v20 > 1), v21 + 1, 1, v4);
        }
        *((void *)v4 + 2) = v21 + 1;
        uint64_t v22 = &v4[24 * v21];
        *((void *)v22 + 4) = v5;
        *((void *)v22 + 5) = v6;
        *((_DWORD *)v22 + 12) = v19;
        v22[52] = 0;
      }
    }
    ++v1;
    v3 -= 4;
  }
  while (v3);
  return v4;
}

uint64_t sub_100012DBC(int a1, unsigned char *a2)
{
  if (!a2) {
    return 0;
  }
  switch(a1)
  {
    case 0:
    case 1:
      *a2 = 8;
      break;
    case 2:
      *(void *)a2 = sub_100013078();
      break;
    case 3:
      *a2 = 0;
      break;
    case 4:
      *(void *)a2 = &_mh_execute_header;
      break;
    default:
      return 0;
  }
  return 1;
}

uint64_t sub_100012E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    __break(1u);
  }
  swift_retain();
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 16);
    uint64_t v9 = 0;
    if (qword_1000C46F8 == -1) {
      goto LABEL_4;
    }
  }
  swift_once();
LABEL_4:
  int v7 = off_1000C64B0(v3, a2, a3, &v9);
  swift_release();
  if (v7) {
    return 0;
  }
  else {
    return v9;
  }
}

unint64_t sub_100012F40()
{
  unint64_t result = qword_1000C4BF0;
  if (!qword_1000C4BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4BF0);
  }
  return result;
}

void (**sub_100012F94(void (**result)(uint64_t *, uint64_t *), uint64_t a2, unsigned int a3))(uint64_t *, uint64_t *)
{
  if (result)
  {
    if (a3)
    {
      uint64_t v4 = *result;
      uint64_t v5 = a3;
      swift_retain();
      uint64_t v6 = (uint64_t *)(a2 + 8);
      do
      {
        uint64_t v7 = *(v6 - 1);
        uint64_t v8 = *v6;
        uint64_t v9 = v7;
        v4(&v9, &v8);
        v6 += 2;
        --v5;
      }
      while (v5);
      return (void (**)(uint64_t *, uint64_t *))swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100013020(uint64_t a1, uint64_t a2)
{
  return sub_10001116C(a1, a2, v2);
}

uint64_t sub_100013028()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100013038()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100013060(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100013070()
{
  return swift_release();
}

uint64_t sub_100013078()
{
  return 0x7FFFFFFFFFFFFLL;
}

uint64_t sub_100013084(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2();
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  unint64_t v8 = v7;
  sub_100004614();
  v9._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._char countAndFlagsBits = 10272;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  if (v4) {
    uint64_t v11 = v2;
  }
  else {
    uint64_t v11 = 0x6E776F6E6B6E753CLL;
  }
  if (v4) {
    unint64_t v12 = v4;
  }
  else {
    unint64_t v12 = 0xE90000000000003ELL;
  }
  unint64_t v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  v14._char countAndFlagsBits = 8233;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  if (v8) {
    uint64_t v15 = v6;
  }
  else {
    uint64_t v15 = 0x6E776F6E6B6E753CLL;
  }
  if (v8) {
    unint64_t v16 = v8;
  }
  else {
    unint64_t v16 = 0xE90000000000003ELL;
  }
  unint64_t v17 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  return 30768;
}

uint64_t sub_1000131A0(uint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  Swift::Int v4 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v6._char countAndFlagsBits = 32;
    v6._object = (void *)0xE100000000000000;
    Swift::String v7 = String.init(repeating:count:)(v6, v4);
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._char countAndFlagsBits = sub_100013084(a2, a3);
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    return 32;
  }
  return result;
}

uint64_t sub_100013248()
{
  uint64_t v1 = *v0;
  uint64_t v2 = String.utf8CString.getter();
  fputs((const char *)(v2 + 32), v1);

  return swift_release();
}

uint64_t sub_100013294()
{
  uint64_t result = stderr.getter();
  qword_1000C6328 = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for Std.File(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Std.File(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for Std.File(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Std.File()
{
  return &type metadata for Std.File;
}

ValueMetadata *type metadata accessor for DumpCacheNodes()
{
  return &type metadata for DumpCacheNodes;
}

double sub_100013360()
{
  CommandConfiguration.init(commandName:abstract:usage:discussion:version:shouldDisplay:subcommands:defaultSubcommand:helpNames:)(0, 0, 0xD000000000000028, 0x80000001000A7EB0, 0, 0, 0, 0xE000000000000000, (uint64_t)&v1, 0, 0xE000000000000000, 1, (__n128)(unint64_t)_swiftEmptyArrayStorage, 0, 0);
  xmmword_1000C6390 = v7;
  unk_1000C63A0 = v8;
  qword_1000C63B0 = v9;
  xmmword_1000C6350 = v3;
  unk_1000C6360 = v4;
  xmmword_1000C6370 = v5;
  unk_1000C6380 = v6;
  double result = *(double *)&v2;
  xmmword_1000C6330 = v1;
  unk_1000C6340 = v2;
  return result;
}

uint64_t sub_100013414(uint64_t a1)
{
  sub_100003DD0(&qword_1000C4758);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1000A2CC0;
  *(void *)(v2 + 32) = 0x73736572646441;
  *(void *)(v2 + 40) = 0xE700000000000000;
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = 6775124;
  *(void *)(v2 + 72) = 0xE300000000000000;
  *(void *)(v2 + 88) = &type metadata for String;
  *(void *)(v2 + 96) = 0x656D614E20676154;
  *(void *)(v2 + 104) = 0xE800000000000000;
  *(void *)(v2 + 120) = &type metadata for String;
  *(void *)(v2 + 128) = 1702521171;
  *(void *)(v2 + 136) = 0xE400000000000000;
  *(void *)(v2 + 152) = &type metadata for String;
  *(void *)(v2 + 160) = 1952867660;
  *(void *)(v2 + 168) = 0xE400000000000000;
  *(void *)(v2 + 216) = &type metadata for String;
  *(void *)(v2 + 184) = &type metadata for String;
  *(void *)(v2 + 192) = 0x7468676952;
  *(void *)(v2 + 200) = 0xE500000000000000;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 40)) {
    __break(1u);
  }
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = _swiftEmptyArrayStorage;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_100004548;
  *(void *)(v4 + 24) = v3;
  uint64_t v20 = sub_100013D9C;
  uint64_t v21 = v4;
  swift_retain_n();
  uint64_t v5 = swift_reflection_iterateMetadataAllocations();
  swift_release();
  if (v5)
  {
    uint64_t v6 = String.init(cString:)();
    uint64_t v8 = v7;
    sub_1000045C0();
    swift_allocError();
    *uint64_t v9 = v6;
    v9[1] = v8;
    swift_willThrow();
    return swift_release_n();
  }
  else
  {
    swift_release();
    swift_beginAccess();
    uint64_t v11 = *(void *)(v3 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      swift_bridgeObjectRetain();
      unint64_t v13 = (_DWORD *)(v11 + 48);
      do
      {
        int v14 = *(v13 - 4);
        uint64_t v15 = *((void *)v13 - 1);
        int v16 = *v13;
        v13 += 6;
        int v17 = v14;
        uint64_t v18 = v15;
        int v19 = v16;
        sub_1000136E0((uint64_t)&v17, a1);
        --v12;
      }
      while (v12);
      return swift_bridgeObjectRelease_n();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1000136E0(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_reflection_metadataAllocationCacheNode();
  if (result)
  {
    uint64_t result = *(void *)(a2 + 40);
    if (result)
    {
      if (swift_reflection_metadataAllocationTagName())
      {
        uint64_t v4 = String.init(cString:)();
        uint64_t v6 = v5;
      }
      else
      {
        uint64_t v6 = (void *)0xE90000000000003ELL;
        uint64_t v4 = 0x6E776F6E6B6E753CLL;
      }
      sub_100003DD0(&qword_1000C4758);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_1000A2660;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      sub_100004614();
      v8._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._char countAndFlagsBits = 9;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
      v10._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._char countAndFlagsBits = 9;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      v12._char countAndFlagsBits = v4;
      v12._object = v6;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._char countAndFlagsBits = 9;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      v14._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._char countAndFlagsBits = 9;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      v16._char countAndFlagsBits = 30768;
      v16._object = (void *)0xE200000000000000;
      String.append(_:)(v16);
      v17._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._char countAndFlagsBits = 9;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      v19._char countAndFlagsBits = 30768;
      v19._object = (void *)0xE200000000000000;
      String.append(_:)(v19);
      v20._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      *(void *)(v7 + 56) = &type metadata for String;
      *(void *)(v7 + 32) = 30768;
      *(void *)(v7 + 40) = 0xE200000000000000;
      print(_:separator:terminator:)();
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000139E8(uint64_t a1)
{
  unint64_t v2 = sub_1000141E4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100013A24(uint64_t a1)
{
  unint64_t v2 = sub_1000141E4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100013A60@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000C4668 != -1) {
    swift_once();
  }

  return sub_1000046F0((uint64_t)&xmmword_1000C6330, a1);
}

uint64_t sub_100013ACC()
{
  uint64_t v0 = sub_100003DD0(&qword_1000C4740);
  OptionGroup.wrappedValue.getter(v0, (uint64_t)&v10);
  uint64_t v1 = v10;
  uint64_t v2 = v11;
  char v3 = v12;
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  char v6 = v15;
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  int v19 = v18;
  sub_10000AA64(v10, v11, v12, v13, v14, v15);
  sub_1000027F4(v1, v2, v3);
  sub_100002804(v4, v5, v6);
  return sub_100002804(v7, v8, v19);
}

double sub_100013BD8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100013DA4(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

unint64_t sub_100013C34(uint64_t a1)
{
  unint64_t result = sub_100013C5C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100013C5C()
{
  unint64_t result = qword_1000C4C78;
  if (!qword_1000C4C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4C78);
  }
  return result;
}

unint64_t sub_100013CB0(uint64_t a1)
{
  unint64_t result = sub_100013CD8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100013CD8()
{
  unint64_t result = qword_1000C4C80;
  if (!qword_1000C4C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4C80);
  }
  return result;
}

uint64_t sub_100013D2C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100013D64()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100013D9C(unsigned int *a1)
{
  return sub_100003D74(a1, *(uint64_t (**)(void, void, void))(v1 + 16));
}

uint64_t sub_100013DA4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v3 = sub_100003DD0(&qword_1000C4C88);
  uint64_t v50 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  __chkstk_darwin(v3);
  long long v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = *(unsigned char *)ArgumentVisibility.default.unsafeMutableAddressor();
  unint64_t v7 = sub_10000474C();
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, v6, (uint64_t)&type metadata for UniversalOptions, v7, (uint64_t)&v59);
  uint64_t v52 = v60;
  uint64_t v53 = v59;
  uint64_t v8 = v62;
  uint64_t v73 = v61;
  uint64_t v9 = v63;
  uint64_t v56 = v65;
  uint64_t v57 = v64;
  uint64_t v55 = v66;
  int v10 = v67;
  int v11 = v68;
  uint64_t v58 = v72;
  sub_100005090(a1, a1[3]);
  sub_1000141E4();
  int v49 = v5;
  char v12 = v73;
  uint64_t v13 = v54;
  uint64_t v14 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v15 = v53;
  if (v13)
  {
    sub_100005128((uint64_t)a1);
    sub_10000274C(v15, v14, v12, v8, v9, v57, v56, v55, v10, v11);
    return swift_bridgeObjectRelease();
  }
  else
  {
    int v45 = v11;
    int v46 = v10;
    uint64_t v47 = v9;
    uint64_t v54 = v8;
    uint64_t v16 = v53;
    sub_100003DD0(&qword_1000C4740);
    sub_100006BA4();
    uint64_t v17 = v51;
    unsigned __int8 v18 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v18, v17);
    uint64_t v19 = v59;
    uint64_t v20 = v60;
    char v21 = v61;
    uint64_t v42 = v62;
    uint64_t v41 = v63;
    uint64_t v39 = v64;
    uint64_t v38 = v65;
    uint64_t v37 = v66;
    int v43 = v67;
    LODWORD(v51) = v68;
    LODWORD(v50) = v69;
    LODWORD(v49) = v70;
    uint64_t v44 = v71;
    uint64_t v40 = v72;
    uint64_t v35 = v59;
    uint64_t v34 = v60;
    uint64_t v36 = v61;
    sub_100002594(v59, v60, v61, v62, v63, v64, v65, v66, v67, v68);
    swift_bridgeObjectRetain();
    sub_10000274C(v16, v14, v73, v54, v47, v57, v56, v55, v46, v45);
    swift_bridgeObjectRelease();
    sub_100005128((uint64_t)a1);
    char v22 = v43;
    uint64_t v23 = v20;
    char v24 = v21;
    uint64_t v25 = v42;
    uint64_t v26 = v41;
    uint64_t v27 = v39;
    uint64_t v28 = v38;
    uint64_t v29 = v37;
    sub_10000274C(v19, v23, v24, v42, v41, v39, v38, v37, v43, v51);
    uint64_t v30 = v40;
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v32 = v48;
    uint64_t v33 = v34;
    *uint64_t v48 = v35;
    v32[1] = v33;
    v32[2] = v36;
    v32[3] = v25;
    v32[4] = v26;
    v32[5] = v27;
    v32[6] = v28;
    v32[7] = v29;
    *((unsigned char *)v32 + 64) = v22;
    *((unsigned char *)v32 + 65) = v51;
    *((unsigned char *)v32 + 66) = v50;
    *((unsigned char *)v32 + 67) = (_BYTE)v49;
    v32[9] = v44;
    v32[10] = v30;
  }
  return result;
}

unint64_t sub_1000141E4()
{
  unint64_t result = qword_1000C4C90;
  if (!qword_1000C4C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4C90);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DumpCacheNodes.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000142D4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DumpCacheNodes.CodingKeys()
{
  return &type metadata for DumpCacheNodes.CodingKeys;
}

unint64_t sub_100014310()
{
  unint64_t result = qword_1000C4C98;
  if (!qword_1000C4C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4C98);
  }
  return result;
}

unint64_t sub_100014368()
{
  unint64_t result = qword_1000C4CA0;
  if (!qword_1000C4CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4CA0);
  }
  return result;
}

unint64_t sub_1000143C0()
{
  unint64_t result = qword_1000C4CA8;
  if (!qword_1000C4CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4CA8);
  }
  return result;
}

uint64_t sub_100014414(int a1)
{
  uint64_t v4 = 0;
  memset(buffer, 0, sizeof(buffer));
  int v1 = proc_pidinfo(a1, 3, 0, buffer, 136);
  uint64_t result = 0;
  if (v1 == 136) {
    return static String._fromUTF8Repairing(_:)();
  }
  return result;
}

unint64_t sub_10001481C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (void *)static CommandLine.arguments.getter();
  if (!v4[2]) {
    goto LABEL_8;
  }
  uint64_t v6 = v4[4];
  unint64_t v5 = v4[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BOOL v7 = v6 == a1 && v5 == a2;
  if (v7 || (uint64_t v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), (v8 & 1) != 0))
  {
    swift_bridgeObjectRelease();
    char v9 = 1;
    return v9 & 1;
  }
  v24[0] = 47;
  v24[1] = 0xE100000000000000;
  __chkstk_darwin(v8);
  v23[2] = v24;
  unint64_t v11 = sub_100015458(sub_100015564, (uint64_t)v23, v6, v5);
  if (v12)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    char v9 = 0;
    return v9 & 1;
  }
  sub_1000149F8(v11, v6, v5);
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
  if (v15) {
    unint64_t result = v14;
  }
  if (v14 >> 14 >= result >> 14)
  {
    unint64_t v16 = Substring.subscript.getter();
    unint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    char v9 = sub_1000155BC(v16, v18, v20, v22, a1, a2);
    swift_bridgeObjectRelease();
    return v9 & 1;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000149F8(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t sub_100014A44(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10002A3BC((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_100014AB0(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_100014AB0(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  Swift::Int v98 = v3;
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_141;
    }
    if ((unint64_t)v3 >= 2)
    {
      char v77 = (_DWORD *)*a1;
      uint64_t v78 = -1;
      uint64_t v79 = 1;
      uint64_t v80 = v77;
      do
      {
        uint64_t v81 = v78;
        uint64_t v82 = v80;
        do
        {
          if (v82[10] >= v82[172]) {
            break;
          }
          if (!v77) {
            goto LABEL_145;
          }
          memcpy(__dst, v82 + 162, sizeof(__dst));
          memcpy(v82 + 162, v82, 0x288uLL);
          uint64_t result = (uint64_t)memcpy(v82, __dst, 0x288uLL);
          v82 -= 162;
        }
        while (!__CFADD__(v81++, 1));
        ++v79;
        v80 += 162;
        --v78;
      }
      while (v79 != v98);
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_140;
    }
    uint64_t v96 = result;
    uint64_t v102 = v1;
    uint64_t v92 = a1;
    if (v3 > 1)
    {
      uint64_t v6 = v5 >> 1;
      type metadata accessor for kinfo_proc(0);
      uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(result + 16) = v6;
      uint64_t v95 = (void *)result;
      unsigned __int8 v99 = (char *)(result + 32);
LABEL_13:
      Swift::Int v8 = 0;
      uint64_t v100 = *a1;
      uint64_t v93 = *a1 - 648;
      uint64_t v94 = *a1 + 1336;
      char v9 = (char *)_swiftEmptyArrayStorage;
      while (1)
      {
        Swift::Int v11 = v8++;
        if (v8 < v3)
        {
          int v12 = *(_DWORD *)(v100 + 648 * v8 + 40);
          int v13 = *(_DWORD *)(v100 + 648 * v11 + 40);
          Swift::Int v8 = v11 + 2;
          if (v11 + 2 < v3)
          {
            unint64_t v14 = (int *)(v94 + 648 * v11);
            int v15 = v12;
            while (1)
            {
              int v16 = *v14;
              if (v13 < v12 == v15 >= *v14) {
                break;
              }
              v14 += 162;
              ++v8;
              int v15 = v16;
              if (v3 == v8)
              {
                Swift::Int v8 = v3;
                break;
              }
            }
          }
          if (v13 < v12)
          {
            if (v8 < v11) {
              goto LABEL_142;
            }
            if (v11 < v8)
            {
              unint64_t v17 = (char *)(v93 + 648 * v8);
              Swift::Int v18 = v8;
              Swift::Int v19 = v11;
              uint64_t v20 = (char *)(v100 + 648 * v11);
              do
              {
                if (v19 != --v18)
                {
                  if (!v100) {
                    goto LABEL_148;
                  }
                  memcpy(__dst, v20, sizeof(__dst));
                  memmove(v20, v17, 0x288uLL);
                  uint64_t result = (uint64_t)memcpy(v17, __dst, 0x288uLL);
                }
                ++v19;
                v17 -= 648;
                v20 += 648;
              }
              while (v19 < v18);
            }
          }
        }
        if (v8 >= v3) {
          goto LABEL_39;
        }
        if (__OFSUB__(v8, v11)) {
          goto LABEL_139;
        }
        if (v8 - v11 >= v96) {
          goto LABEL_39;
        }
        if (__OFADD__(v11, v96)) {
          goto LABEL_143;
        }
        if (v11 + v96 >= v3) {
          Swift::Int v21 = v3;
        }
        else {
          Swift::Int v21 = v11 + v96;
        }
        if (v21 < v11)
        {
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
          return result;
        }
        if (v8 == v21)
        {
LABEL_39:
          uint64_t v22 = v100;
          if (v8 < v11) {
            goto LABEL_134;
          }
        }
        else
        {
          uint64_t v75 = (_DWORD *)(v93 + 648 * v8);
          uint64_t v22 = v100;
          Swift::Int v97 = v11;
          do
          {
            unint64_t v76 = v75;
            do
            {
              if (v76[10] >= v76[172]) {
                break;
              }
              if (!v100) {
                goto LABEL_146;
              }
              memcpy(__dst, v76 + 162, sizeof(__dst));
              memcpy(v76 + 162, v76, 0x288uLL);
              uint64_t result = (uint64_t)memcpy(v76, __dst, 0x288uLL);
              ++v11;
              v76 -= 162;
            }
            while (v8 != v11);
            ++v8;
            v75 += 162;
            Swift::Int v11 = v97;
          }
          while (v8 != v21);
          Swift::Int v8 = v21;
          if (v21 < v97) {
            goto LABEL_134;
          }
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100027DE4(0, *((void *)v9 + 2) + 1, 1, v9);
          char v9 = (char *)result;
        }
        unint64_t v24 = *((void *)v9 + 2);
        unint64_t v23 = *((void *)v9 + 3);
        unint64_t v10 = v24 + 1;
        if (v24 >= v23 >> 1)
        {
          uint64_t result = (uint64_t)sub_100027DE4((char *)(v23 > 1), v24 + 1, 1, v9);
          char v9 = (char *)result;
        }
        *((void *)v9 + 2) = v10;
        uint64_t v25 = v9 + 32;
        uint64_t v26 = &v9[16 * v24 + 32];
        *(void *)uint64_t v26 = v11;
        *((void *)v26 + 1) = v8;
        if (v24)
        {
          while (1)
          {
            unint64_t v27 = v10 - 1;
            if (v10 >= 4)
            {
              uint64_t v32 = &v25[2 * v10];
              uint64_t v33 = *(v32 - 8);
              uint64_t v34 = *(v32 - 7);
              BOOL v38 = __OFSUB__(v34, v33);
              uint64_t v35 = v34 - v33;
              if (v38) {
                goto LABEL_123;
              }
              uint64_t v37 = *(v32 - 6);
              uint64_t v36 = *(v32 - 5);
              BOOL v38 = __OFSUB__(v36, v37);
              uint64_t v30 = v36 - v37;
              char v31 = v38;
              if (v38) {
                goto LABEL_124;
              }
              unint64_t v39 = v10 - 2;
              uint64_t v40 = &v25[2 * v10 - 4];
              uint64_t v42 = *v40;
              uint64_t v41 = v40[1];
              BOOL v38 = __OFSUB__(v41, v42);
              uint64_t v43 = v41 - v42;
              if (v38) {
                goto LABEL_125;
              }
              BOOL v38 = __OFADD__(v30, v43);
              uint64_t v44 = v30 + v43;
              if (v38) {
                goto LABEL_127;
              }
              if (v44 >= v35)
              {
                uint64_t v62 = &v25[2 * v27];
                uint64_t v64 = *v62;
                uint64_t v63 = v62[1];
                BOOL v38 = __OFSUB__(v63, v64);
                uint64_t v65 = v63 - v64;
                if (v38) {
                  goto LABEL_133;
                }
                BOOL v55 = v30 < v65;
                goto LABEL_76;
              }
            }
            else
            {
              if (v10 != 3)
              {
                uint64_t v56 = *((void *)v9 + 4);
                uint64_t v57 = *((void *)v9 + 5);
                BOOL v38 = __OFSUB__(v57, v56);
                uint64_t v49 = v57 - v56;
                char v50 = v38;
                goto LABEL_70;
              }
              uint64_t v29 = *((void *)v9 + 4);
              uint64_t v28 = *((void *)v9 + 5);
              BOOL v38 = __OFSUB__(v28, v29);
              uint64_t v30 = v28 - v29;
              char v31 = v38;
            }
            if (v31) {
              goto LABEL_126;
            }
            unint64_t v39 = v10 - 2;
            int v45 = &v25[2 * v10 - 4];
            uint64_t v47 = *v45;
            uint64_t v46 = v45[1];
            BOOL v48 = __OFSUB__(v46, v47);
            uint64_t v49 = v46 - v47;
            char v50 = v48;
            if (v48) {
              goto LABEL_128;
            }
            uint64_t v51 = &v25[2 * v27];
            uint64_t v53 = *v51;
            uint64_t v52 = v51[1];
            BOOL v38 = __OFSUB__(v52, v53);
            uint64_t v54 = v52 - v53;
            if (v38) {
              goto LABEL_130;
            }
            if (__OFADD__(v49, v54)) {
              goto LABEL_132;
            }
            if (v49 + v54 >= v30)
            {
              BOOL v55 = v30 < v54;
LABEL_76:
              if (v55) {
                unint64_t v27 = v39;
              }
              goto LABEL_78;
            }
LABEL_70:
            if (v50) {
              goto LABEL_129;
            }
            uint64_t v58 = &v25[2 * v27];
            uint64_t v60 = *v58;
            uint64_t v59 = v58[1];
            BOOL v38 = __OFSUB__(v59, v60);
            uint64_t v61 = v59 - v60;
            if (v38) {
              goto LABEL_131;
            }
            if (v61 < v49) {
              goto LABEL_15;
            }
LABEL_78:
            unint64_t v66 = v27 - 1;
            if (v27 - 1 >= v10)
            {
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
              goto LABEL_144;
            }
            uint64_t v67 = v22;
            if (!v22) {
              goto LABEL_147;
            }
            unsigned __int8 v68 = v9;
            unsigned __int8 v69 = &v25[2 * v66];
            uint64_t v70 = *v69;
            uint64_t v71 = &v25[2 * v27];
            uint64_t v72 = v71[1];
            uint64_t v73 = v102;
            uint64_t result = sub_1000151F0((char *)(v67 + 648 * *v69), (char *)(v67 + 648 * *v71), v67 + 648 * v72, v99);
            uint64_t v102 = v73;
            if (v73) {
              goto LABEL_95;
            }
            if (v72 < v70) {
              goto LABEL_120;
            }
            if (v27 > *((void *)v68 + 2)) {
              goto LABEL_121;
            }
            *unsigned __int8 v69 = v70;
            v25[2 * v66 + 1] = v72;
            unint64_t v74 = *((void *)v68 + 2);
            if (v27 >= v74) {
              goto LABEL_122;
            }
            char v9 = v68;
            unint64_t v10 = v74 - 1;
            uint64_t result = (uint64_t)memmove(&v25[2 * v27], v71 + 2, 16 * (v74 - 1 - v27));
            *((void *)v68 + 2) = v74 - 1;
            uint64_t v22 = v100;
            if (v74 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v10 = 1;
LABEL_15:
        Swift::Int v3 = v98;
        if (v8 >= v98)
        {
          BOOL v7 = v95;
          goto LABEL_106;
        }
      }
    }
    BOOL v7 = _swiftEmptyArrayStorage;
    unsigned __int8 v99 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 == 1)
    {
      uint64_t v95 = _swiftEmptyArrayStorage;
      goto LABEL_13;
    }
    unint64_t v10 = _swiftEmptyArrayStorage[2];
    char v9 = (char *)_swiftEmptyArrayStorage;
LABEL_106:
    uint64_t result = (uint64_t)v9;
    uint64_t v95 = v7;
    if (v10 >= 2)
    {
      uint64_t v84 = *v92;
      do
      {
        unint64_t v85 = v10 - 2;
        if (v10 < 2) {
          goto LABEL_135;
        }
        if (!v84) {
          goto LABEL_149;
        }
        uint64_t v86 = result;
        uint64_t v87 = *(void *)(result + 32 + 16 * v85);
        uint64_t v88 = *(void *)(result + 32 + 16 * (v10 - 1) + 8);
        uint64_t v89 = v102;
        uint64_t result = sub_1000151F0((char *)(v84 + 648 * v87), (char *)(v84 + 648 * *(void *)(result + 32 + 16 * (v10 - 1))), v84 + 648 * v88, v99);
        uint64_t v102 = v89;
        if (v89) {
          break;
        }
        if (v88 < v87) {
          goto LABEL_136;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100027EE0(v86);
          uint64_t v86 = result;
        }
        if (v85 >= *(void *)(v86 + 16)) {
          goto LABEL_137;
        }
        long long v90 = (void *)(v86 + 32 + 16 * v85);
        *long long v90 = v87;
        v90[1] = v88;
        unint64_t v91 = *(void *)(v86 + 16);
        if (v10 > v91) {
          goto LABEL_138;
        }
        memmove((void *)(v86 + 32 + 16 * (v10 - 1)), (const void *)(v86 + 32 + 16 * v10), 16 * (v91 - v10));
        uint64_t result = v86;
        *(void *)(v86 + 16) = v91 - 1;
        unint64_t v10 = v91 - 1;
      }
      while (v91 > 2);
    }
LABEL_95:
    swift_bridgeObjectRelease();
    v95[2] = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000151F0(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  BOOL v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = (__src - __dst) / 648;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 648;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[648 * v11] <= a4) {
      memmove(a4, __src, 648 * v11);
    }
    int v12 = &v4[648 * v11];
    if (v7 >= v6 || v10 < 648) {
      goto LABEL_39;
    }
    int v16 = (char *)(a3 - 648);
    while (1)
    {
      unint64_t v17 = v16 + 648;
      if (*((_DWORD *)v6 - 152) >= *((_DWORD *)v12 - 152))
      {
        Swift::Int v18 = v12 - 648;
        if (v17 != v12)
        {
          v12 -= 648;
          goto LABEL_36;
        }
        BOOL v19 = v16 >= v12;
        v12 -= 648;
        if (v19) {
          goto LABEL_36;
        }
      }
      else
      {
        Swift::Int v18 = v6 - 648;
        if (v17 != v6)
        {
          v6 -= 648;
LABEL_36:
          memmove(v16, v18, 0x288uLL);
          goto LABEL_37;
        }
        BOOL v19 = v16 >= v6;
        v6 -= 648;
        if (v19) {
          goto LABEL_36;
        }
      }
LABEL_37:
      if (v6 > v7)
      {
        v16 -= 648;
        if (v12 > v4) {
          continue;
        }
      }
      goto LABEL_39;
    }
  }
  if (a4 != __dst || &__dst[648 * v9] <= a4) {
    memmove(a4, __dst, 648 * v9);
  }
  int v12 = &v4[648 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 648)
  {
    while (1)
    {
      if (*((_DWORD *)v4 + 10) >= *((_DWORD *)v6 + 10))
      {
        int v15 = v4 + 648;
        unint64_t v14 = v4;
        int v13 = v6;
        if (v7 == v4)
        {
          v4 += 648;
          if (v7 < v15) {
            goto LABEL_16;
          }
        }
        else
        {
          v4 += 648;
        }
      }
      else
      {
        int v13 = v6 + 648;
        unint64_t v14 = v6;
        if (v7 == v6 && v7 < v13) {
          goto LABEL_16;
        }
      }
      memmove(v7, v14, 0x288uLL);
LABEL_16:
      v7 += 648;
      if (v4 < v12)
      {
        uint64_t v6 = v13;
        if ((unint64_t)v13 < a3) {
          continue;
        }
      }
      break;
    }
  }
  uint64_t v6 = v7;
LABEL_39:
  uint64_t v20 = (v12 - v4) / 648;
  if (v6 != v4 || v6 >= &v4[648 * v20]) {
    memmove(v6, v4, 648 * v20);
  }
  return 1;
}

unint64_t sub_100015458(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  while (1)
  {
    unint64_t v7 = String.index(before:)();
    v12[0] = String.subscript.getter();
    v12[1] = v8;
    char v9 = a1(v12);
    if (v4) {
      break;
    }
    char v10 = v9;
    swift_bridgeObjectRelease();
    if (v10) {
      return v7;
    }
    if (v7 < 0x4000) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_100015564(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_1000155BC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v6 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (a3 == a5 && a4 == a6 && !(a1 >> 16) && a2 >> 16 == v6) {
    return 1;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
  }
}

char *sub_100015634()
{
  size_t v20 = 0;
  sub_100003DD0(&qword_1000C4C48);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000A3650;
  *(void *)(inited + 32) = 0xE00000001;
  *(_DWORD *)(inited + 40) = 0;
  if (sysctl((int *)(inited + 32), 3u, 0, &v20, 0, 0)) {
    goto LABEL_12;
  }
  if ((uint64_t)v20 < -647) {
    __break(1u);
  }
  uint64_t v1 = (uint64_t)v20 / 648;
  if ((uint64_t)v20 < 648)
  {
    Swift::Int v3 = (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    type metadata accessor for kinfo_proc(0);
    uint64_t v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    Swift::Int v3 = (char *)v2;
    *(void *)(v2 + 16) = v1;
    uint64_t v4 = 32;
    uint64_t v5 = v1;
    do
    {
      uint64_t v6 = v2 + v4;
      *(void *)(v6 + 29) = 0;
      *(_OWORD *)uint64_t v6 = 0uLL;
      *(_OWORD *)(v6 + 16) = 0uLL;
      *(void *)(v6 + 40) = 0;
      *(_DWORD *)(v6 + 48) = 0;
      *(void *)(v6 + 136) = 0;
      *(_DWORD *)(v6 + 144) = 0;
      *(void *)(v6 + 152) = 0;
      *(_DWORD *)(v6 + 160) = 0;
      *(void *)(v6 + 200) = 0;
      *(_DWORD *)(v6 + 208) = 0;
      *(void *)(v6 + 416) = 0;
      *(_WORD *)(v6 + 424) = 0;
      *(_DWORD *)(v6 + 496) = 0;
      *(void *)(v2 + v4 + 572) = 0;
      *(_OWORD *)(v6 + 56) = 0uLL;
      *(_OWORD *)(v6 + 72) = 0uLL;
      *(_DWORD *)(v6 + 88) = 0;
      *(_DWORD *)(v6 + 128) = 0;
      *(_OWORD *)(v6 + 96) = 0uLL;
      *(_OWORD *)(v6 + 112) = 0uLL;
      *(void *)(v6 + 176) = 0;
      *(void *)(v6 + 184) = 0;
      *(_DWORD *)(v6 + 192) = 0;
      *(void *)(v6 + 168) = 0;
      *(_OWORD *)(v6 + 216) = 0uLL;
      *(_OWORD *)(v6 + 232) = 0uLL;
      *(_OWORD *)(v6 + 244) = 0uLL;
      *(_DWORD *)(v6 + 280) = 0;
      *(void *)(v6 + 264) = 0;
      *(void *)(v6 + 272) = 0;
      *(_OWORD *)(v6 + 288) = 0uLL;
      *(_OWORD *)(v6 + 304) = 0uLL;
      *(_OWORD *)(v6 + 320) = 0uLL;
      *(_OWORD *)(v6 + 336) = 0uLL;
      *(_OWORD *)(v6 + 352) = 0uLL;
      *(_OWORD *)(v6 + 368) = 0uLL;
      *(_OWORD *)(v6 + 384) = 0uLL;
      *(_OWORD *)(v2 + v4 + 396) = 0uLL;
      unint64_t v7 = (_OWORD *)(v2 + v4 + 428);
      _OWORD v7[2] = 0uLL;
      v7[3] = 0uLL;
      *unint64_t v7 = 0uLL;
      v7[1] = 0uLL;
      *(void *)(v6 + 504) = 0;
      *(void *)(v6 + 512) = 0;
      *(_DWORD *)(v6 + 528) = 0;
      *(void *)(v6 + 520) = 0;
      *(_WORD *)(v6 + 568) = 0;
      *(_OWORD *)((char *)v7 + 124) = 0uLL;
      *(_OWORD *)((char *)v7 + 108) = 0uLL;
      *(_WORD *)(v6 + 608) = 0;
      *(void *)(v6 + 592) = 0;
      *(void *)(v6 + 584) = 0;
      *(void *)(v6 + 600) = 0;
      *(_OWORD *)((char *)v7 + 200) = 0uLL;
      v4 += 648;
      *(_OWORD *)((char *)v7 + 184) = 0uLL;
      --v5;
    }
    while (v5);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t inited = (uint64_t)sub_1000118B8(0, 3, 0, (char *)inited);
  }
  swift_bridgeObjectRetain();
  int v8 = sysctl((int *)(inited + 32), 3u, v3 + 32, &v20, 0, 0);
  swift_bridgeObjectRelease();
  if (v8)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v1 > (uint64_t)v20 / 648)
  {
    sub_10001F038(v1 - (uint64_t)v20 / 648, (uint64_t)v3);
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
  }
  BOOL v19 = v3;
  swift_bridgeObjectRetain_n();
  sub_100014A44(&v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v11 = v19;
  pid_t v12 = getpid();
  uint64_t v13 = *((void *)v11 + 2);
  if (v13)
  {
    pid_t v14 = v12;
    int v15 = (int *)(v11 + 72);
    char v9 = (char *)_swiftEmptyArrayStorage;
    do
    {
      int v16 = *v15;
      if (*v15 < 2) {
        break;
      }
      if (v16 != v14)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v9 = sub_1000118B8(0, *((void *)v9 + 2) + 1, 1, v9);
        }
        unint64_t v18 = *((void *)v9 + 2);
        unint64_t v17 = *((void *)v9 + 3);
        if (v18 >= v17 >> 1) {
          char v9 = sub_1000118B8((char *)(v17 > 1), v18 + 1, 1, v9);
        }
        *((void *)v9 + 2) = v18 + 1;
        *(_DWORD *)&v9[4 * v18 + 32] = v16;
      }
      v15 += 162;
      --v13;
    }
    while (v13);
  }
  else
  {
    char v9 = (char *)_swiftEmptyArrayStorage;
  }
  swift_release();
  return v9;
}

uint64_t sub_1000159F0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  if (a13)
  {
    return swift_retain();
  }
  else
  {
    char v18 = a6 & 1;
    sub_10000264C(a1, a2, a3 & 1);
    sub_10000264C(a4, a5, v18);
    sub_10000264C(a7, a8, a9 & 1);
    return sub_10000263C(a10, a11, a12 & 1);
  }
}

uint64_t destroy for DumpGenericMetadata(uint64_t a1)
{
  sub_10000274C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64), *(unsigned char *)(a1 + 65));
  swift_bridgeObjectRelease();
  sub_100002814(*(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(unsigned char *)(a1 + 128), *(unsigned char *)(a1 + 129));
  swift_bridgeObjectRelease();
  sub_100015B8C(*(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(void *)(a1 + 176), *(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 200), *(void *)(a1 + 208), *(_OWORD *)(a1 + 216), *(void *)(a1 + 224), *(void *)(a1 + 232), *(unsigned char *)(a1 + 240), *(unsigned char *)(a1 + 241));

  return swift_bridgeObjectRelease();
}

uint64_t sub_100015B8C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  if (a13)
  {
    return swift_release();
  }
  else
  {
    char v18 = a6 & 1;
    sub_100002804(a1, a2, a3 & 1);
    sub_100002804(a4, a5, v18);
    sub_100002804(a7, a8, a9 & 1);
    return sub_1000027F4(a10, a11, a12 & 1);
  }
}

uint64_t initializeWithCopy for DumpGenericMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v32 = *(unsigned char *)(a2 + 64);
  char v33 = *(unsigned char *)(a2 + 65);
  sub_100002594(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v32, v33);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v32;
  *(unsigned char *)(a1 + 65) = v33;
  *(_WORD *)(a1 + 66) = *(_WORD *)(a2 + 66);
  uint64_t v12 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a2 + 120);
  LOBYTE(v9) = *(unsigned char *)(a2 + 129);
  LOBYTE(v10) = *(unsigned char *)(a2 + 128);
  swift_bridgeObjectRetain();
  sub_10000265C(v13, v14, v15, v16, v17, v10, v9);
  *(void *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 112) = v16;
  *(void *)(a1 + 120) = v17;
  *(unsigned char *)(a1 + 128) = v10;
  *(unsigned char *)(a1 + 129) = v9;
  *(_WORD *)(a1 + 130) = *(_WORD *)(a2 + 130);
  uint64_t v18 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v18;
  uint64_t v30 = *(void *)(a2 + 160);
  uint64_t v31 = *(void *)(a2 + 152);
  uint64_t v19 = *(void *)(a2 + 184);
  uint64_t v28 = *(void *)(a2 + 176);
  uint64_t v29 = *(void *)(a2 + 168);
  uint64_t v20 = *(void *)(a2 + 192);
  uint64_t v21 = *(void *)(a2 + 200);
  uint64_t v22 = *(void *)(a2 + 216);
  uint64_t v23 = *(void *)(a2 + 224);
  uint64_t v24 = *(void *)(a2 + 232);
  uint64_t v27 = *(void *)(a2 + 208);
  LOBYTE(v15) = *(unsigned char *)(a2 + 240);
  LOBYTE(v16) = *(unsigned char *)(a2 + 241);
  swift_bridgeObjectRetain();
  sub_1000159F0(v31, v30, v29, v28, v19, v20, v21, v27, v22, v23, v24, v15, v16);
  *(void *)(a1 + 152) = v31;
  *(void *)(a1 + 160) = v30;
  *(void *)(a1 + 168) = v29;
  *(void *)(a1 + 176) = v28;
  *(void *)(a1 + 184) = v19;
  *(void *)(a1 + 192) = v20;
  *(void *)(a1 + 200) = v21;
  *(void *)(a1 + 208) = v27;
  *(void *)(a1 + 216) = v22;
  *(void *)(a1 + 224) = v23;
  *(void *)(a1 + 232) = v24;
  *(unsigned char *)(a1 + 240) = v15;
  *(unsigned char *)(a1 + 241) = v16;
  *(_WORD *)(a1 + 242) = *(_WORD *)(a2 + 242);
  uint64_t v25 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v25;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DumpGenericMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v58 = *(unsigned char *)(a2 + 64);
  char v60 = *(unsigned char *)(a2 + 65);
  sub_100002594(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v58, v60);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(unsigned char *)(a1 + 64);
  char v21 = *(unsigned char *)(a1 + 65);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v58;
  *(unsigned char *)(a1 + 65) = v60;
  sub_10000274C(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  *(unsigned char *)(a1 + 67) = *(unsigned char *)(a2 + 67);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(a2 + 88);
  uint64_t v23 = *(void *)(a2 + 96);
  uint64_t v24 = *(void *)(a2 + 104);
  uint64_t v25 = *(void *)(a2 + 112);
  uint64_t v26 = *(void *)(a2 + 120);
  LOBYTE(v9) = *(unsigned char *)(a2 + 129);
  LOBYTE(v10) = *(unsigned char *)(a2 + 128);
  sub_10000265C(v22, v23, v24, v25, v26, v10, v9);
  uint64_t v27 = *(void *)(a1 + 88);
  uint64_t v28 = *(void *)(a1 + 96);
  uint64_t v29 = *(void *)(a1 + 104);
  uint64_t v30 = *(void *)(a1 + 112);
  uint64_t v31 = *(void *)(a1 + 120);
  char v32 = *(unsigned char *)(a1 + 129);
  *(void *)(a1 + 88) = v22;
  *(void *)(a1 + 96) = v23;
  *(void *)(a1 + 104) = v24;
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v26;
  char v33 = *(unsigned char *)(a1 + 128);
  *(unsigned char *)(a1 + 128) = v10;
  *(unsigned char *)(a1 + 129) = v9;
  sub_100002814(v27, v28, v29, v30, v31, v33, v32);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(unsigned char *)(a1 + 131) = *(unsigned char *)(a2 + 131);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = *(void *)(a2 + 152);
  uint64_t v35 = *(void *)(a2 + 160);
  uint64_t v36 = *(void *)(a2 + 168);
  uint64_t v37 = *(void *)(a2 + 176);
  uint64_t v38 = *(void *)(a2 + 184);
  uint64_t v39 = *(void *)(a2 + 192);
  uint64_t v40 = *(void *)(a2 + 200);
  uint64_t v41 = *(void *)(a2 + 208);
  uint64_t v55 = *(void *)(a2 + 216);
  uint64_t v56 = *(void *)(a2 + 224);
  uint64_t v57 = *(void *)(a2 + 232);
  char v59 = *(unsigned char *)(a2 + 240);
  char v61 = *(unsigned char *)(a2 + 241);
  sub_1000159F0(v34, v35, v36, v37, v38, v39, v40, v41, v55, v56, v57, v59, v61);
  uint64_t v42 = *(void *)(a1 + 152);
  uint64_t v43 = *(void *)(a1 + 160);
  uint64_t v44 = *(void *)(a1 + 168);
  uint64_t v45 = *(void *)(a1 + 176);
  uint64_t v46 = *(void *)(a1 + 184);
  uint64_t v47 = *(void *)(a1 + 192);
  uint64_t v48 = *(void *)(a1 + 200);
  uint64_t v49 = *(void *)(a1 + 208);
  long long v50 = *(_OWORD *)(a1 + 216);
  uint64_t v51 = *(void *)(a1 + 232);
  char v52 = *(unsigned char *)(a1 + 240);
  char v53 = *(unsigned char *)(a1 + 241);
  *(void *)(a1 + 152) = v34;
  *(void *)(a1 + 160) = v35;
  *(void *)(a1 + 168) = v36;
  *(void *)(a1 + 176) = v37;
  *(void *)(a1 + 184) = v38;
  *(void *)(a1 + 192) = v39;
  *(void *)(a1 + 200) = v40;
  *(void *)(a1 + 208) = v41;
  *(void *)(a1 + 216) = v55;
  *(void *)(a1 + 224) = v56;
  *(void *)(a1 + 232) = v57;
  *(unsigned char *)(a1 + 240) = v59;
  *(unsigned char *)(a1 + 241) = v61;
  sub_100015B8C(v42, v43, v44, v45, v46, v47, v48, v49, v50, *((uint64_t *)&v50 + 1), v51, v52, v53);
  *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
  *(unsigned char *)(a1 + 243) = *(unsigned char *)(a2 + 243);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for DumpGenericMetadata(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x108uLL);
}

uint64_t assignWithTake for DumpGenericMetadata(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 64);
  char v5 = *(unsigned char *)(a2 + 65);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  char v14 = *(unsigned char *)(a1 + 64);
  char v15 = *(unsigned char *)(a1 + 65);
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(unsigned char *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 65) = v5;
  sub_10000274C(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  *(unsigned char *)(a1 + 67) = *(unsigned char *)(a2 + 67);
  uint64_t v18 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 120);
  char v20 = *(unsigned char *)(a2 + 128);
  char v21 = *(unsigned char *)(a2 + 129);
  uint64_t v22 = *(void *)(a1 + 88);
  uint64_t v23 = *(void *)(a1 + 96);
  uint64_t v24 = *(void *)(a1 + 104);
  uint64_t v25 = *(void *)(a1 + 112);
  uint64_t v26 = *(void *)(a1 + 120);
  char v27 = *(unsigned char *)(a1 + 129);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = v19;
  char v28 = *(unsigned char *)(a1 + 128);
  *(unsigned char *)(a1 + 128) = v20;
  *(unsigned char *)(a1 + 129) = v21;
  sub_100002814(v22, v23, v24, v25, v26, v28, v27);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(unsigned char *)(a1 + 131) = *(unsigned char *)(a2 + 131);
  uint64_t v29 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v29;
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(a2 + 232);
  char v31 = *(unsigned char *)(a2 + 240);
  char v32 = *(unsigned char *)(a2 + 241);
  uint64_t v33 = *(void *)(a1 + 152);
  uint64_t v34 = *(void *)(a1 + 160);
  uint64_t v35 = *(void *)(a1 + 168);
  uint64_t v36 = *(void *)(a1 + 176);
  uint64_t v37 = *(void *)(a1 + 184);
  uint64_t v38 = *(void *)(a1 + 192);
  uint64_t v39 = *(void *)(a1 + 200);
  uint64_t v40 = *(void *)(a1 + 208);
  long long v41 = *(_OWORD *)(a1 + 216);
  uint64_t v42 = *(void *)(a1 + 232);
  char v43 = *(unsigned char *)(a1 + 240);
  char v44 = *(unsigned char *)(a1 + 241);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = v30;
  *(unsigned char *)(a1 + 240) = v31;
  *(unsigned char *)(a1 + 241) = v32;
  sub_100015B8C(v33, v34, v35, v36, v37, v38, v39, v40, v41, *((uint64_t *)&v41 + 1), v42, v43, v44);
  *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
  *(unsigned char *)(a1 + 243) = *(unsigned char *)(a2 + 243);
  uint64_t v45 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v45;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DumpGenericMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 264)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DumpGenericMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 264) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 264) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DumpGenericMetadata()
{
  return &type metadata for DumpGenericMetadata;
}

Swift::Int sub_100016354()
{
  return Hasher._finalize()();
}

uint64_t sub_100016484(unsigned __int8 *a1, char *a2)
{
  return sub_1000070C4(*a1, *a2);
}

Swift::Int sub_100016490()
{
  return sub_100016354();
}

uint64_t sub_10001649C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000165B8()
{
  return sub_100016354();
}

unint64_t sub_1000165C0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10001C2EC(*a1);
  *a2 = result;
  return result;
}

void sub_1000165F0(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x73736572646461;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEA00000000006E6FLL;
      uint64_t v3 = 0x697461636F6C6C61;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 1701667182;
      *(void *)(a1 + 8) = 0xE400000000000000;
      break;
    case 3:
      strcpy((char *)a1, "isArrayOfClass");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    case 4:
      *(void *)a1 = 0x65676162726167;
      *(void *)(a1 + 8) = 0xE700000000000000;
      break;
    case 5:
      *(void *)a1 = 0x74657366666FLL;
      *(void *)(a1 + 8) = 0xE600000000000000;
      break;
    case 6:
      *(void *)a1 = 0x636172746B636162;
      *(void *)(a1 + 8) = 0xE900000000000065;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1000166F0()
{
  uint64_t result = 0x73736572646461;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x697461636F6C6C61;
      break;
    case 2:
      uint64_t result = 1701667182;
      break;
    case 3:
      uint64_t result = 0x4F79617272417369;
      break;
    case 4:
      uint64_t result = 0x65676162726167;
      break;
    case 5:
      uint64_t result = 0x74657366666FLL;
      break;
    case 6:
      uint64_t result = 0x636172746B636162;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000167D8@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10001C2EC(a1);
  *a2 = result;
  return result;
}

void sub_100016800(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_10001680C(uint64_t a1)
{
  unint64_t v2 = sub_10001DAF0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100016848(uint64_t a1)
{
  unint64_t v2 = sub_10001DAF0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100016884(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100003DD0(&qword_1000C4DB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005090(a1, a1[3]);
  sub_10001DAF0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  unint64_t v9 = *v3;
  LOBYTE(v17) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  LOBYTE(v17) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (*((unsigned char *)v3 + 56) == 1)
  {
    LOBYTE(v17) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  if (*((unsigned char *)v3 + 57) == 1)
  {
    LOBYTE(v17) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  unint64_t v11 = v3[2];
  unint64_t v12 = v3[3];
  unint64_t v15 = v3[1];
  unint64_t v16 = v12;
  char v13 = *((unsigned char *)v3 + 32);
  if (v13)
  {
LABEL_12:
    sub_10001DB44((uint64_t)(v3 + 8), (uint64_t)v20);
    sub_10001DB44((uint64_t)v20, (uint64_t)v21);
    if (v21[1])
    {
      LOBYTE(v17) = 6;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    if ((v13 & 1) == 0)
    {
      int v17 = v15;
      unint64_t v18 = v11;
      int v19 = v16;
      char v22 = 1;
      type metadata accessor for swift_metadata_allocation(0);
      sub_10001DBAC(&qword_1000C4DC8, type metadata accessor for swift_metadata_allocation);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t result = v9 - v11;
  if (v9 < v11)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    LOBYTE(v17) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_100016B78(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  v13[0] = a5;
  int v14 = a4;
  uint64_t v7 = sub_100003DD0(&qword_1000C4D68);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005090(a1, a1[3]);
  sub_10001D8FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    uint64_t v11 = v13[0];
    char v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v13[1] = v11;
    char v15 = 2;
    sub_100003DD0(&qword_1000C4D78);
    sub_10001D950(&qword_1000C4D80, &qword_1000C4D78, (void (*)(void))sub_10001D9C8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100016D60(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100003DD0(&qword_1000C4D90);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005090(a1, a1[3]);
  sub_10001DA1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    v11[1] = a3;
    char v12 = 1;
    sub_100003DD0(&qword_1000C4DA0);
    sub_10001DA70();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100016EEC(void *a1)
{
  return sub_100016884(a1);
}

uint64_t sub_100016F30()
{
  uint64_t v1 = 6580592;
  if (*v0 != 1) {
    uint64_t v1 = 0x617461646174656DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701667182;
  }
}

uint64_t sub_100016F7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001C338(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100016FA4(uint64_t a1)
{
  unint64_t v2 = sub_10001D8FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100016FE0(uint64_t a1)
{
  unint64_t v2 = sub_10001D8FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001701C(void *a1)
{
  return sub_100016B78(a1, *(void *)v1, *(void *)(v1 + 8), *(_DWORD *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100017040()
{
  if (*v0) {
    return 0x65737365636F7270;
  }
  else {
    return 0x7A69536C61746F74;
  }
}

uint64_t sub_100017080@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001C470(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000170A8(uint64_t a1)
{
  unint64_t v2 = sub_10001DA1C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000170E4(uint64_t a1)
{
  unint64_t v2 = sub_10001DA1C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100017120(void *a1)
{
  return sub_100016D60(a1, *v1, v1[1]);
}

uint64_t sub_10001713C()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  char v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v5 = String.data(using:allowLossyConversion:)();
  unint64_t v7 = v6;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v7 >> 60 != 15)
  {
    uint64_t v9 = *v0;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v9 writeData:isa];

    return sub_10001DADC(v5, v7);
  }
  return result;
}

double sub_10001726C()
{
  CommandConfiguration.init(commandName:abstract:usage:discussion:version:shouldDisplay:subcommands:defaultSubcommand:helpNames:)(0, 0, 0xD000000000000030, 0x80000001000A7F80, 0, 0, 0, 0xE000000000000000, (uint64_t)&v1, 0, 0xE000000000000000, 1, (__n128)(unint64_t)_swiftEmptyArrayStorage, 0, 0);
  xmmword_1000C6418 = v7;
  unk_1000C6428 = v8;
  qword_1000C6438 = v9;
  xmmword_1000C63D8 = v3;
  unk_1000C63E8 = v4;
  xmmword_1000C63F8 = v5;
  unk_1000C6408 = v6;
  double result = *(double *)&v2;
  xmmword_1000C63B8 = v1;
  unk_1000C63C8 = v2;
  return result;
}

uint64_t sub_100017320()
{
  uint64_t v1 = v0;
  long long v2 = (FILE *)stderr.getter();
  setvbuf(v2, 0, 2, 0);
  long long v83 = &_swiftEmptyDictionarySingleton;
  uint64_t v75 = _swiftEmptyArrayStorage;
  long long v3 = *(_OWORD *)(v0 + 48);
  long long v60 = *(_OWORD *)(v0 + 32);
  long long v61 = v3;
  long long v62 = *(_OWORD *)(v0 + 64);
  *(void *)&long long v63 = *(void *)(v0 + 80);
  long long v4 = *(_OWORD *)(v0 + 16);
  long long v58 = *(_OWORD *)v0;
  long long v59 = v4;
  uint64_t v5 = sub_100003DD0(&qword_1000C4740);
  OptionGroup.wrappedValue.getter(v5, (uint64_t)&v65);
  uint64_t v7 = v65;
  unint64_t v6 = v66;
  char v8 = v67;
  long long v9 = v68;
  char v10 = v69;
  uint64_t v11 = *((void *)&v70 + 1);
  uint64_t v53 = v70;
  char v12 = v71;
  sub_10001BD14(v1);
  sub_10000C05C(v7, v6, v8, v9, *((unint64_t *)&v9 + 1), v10, v1, (uint64_t)&v83, (uint64_t *)&v75);
  if (v57)
  {
    sub_10001BE60(v1);
    sub_1000027F4(v7, v6, v8);
    sub_100002804(v9, *((uint64_t *)&v9 + 1), v10);
    sub_100002804(v53, v11, v12);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10001BE60(v1);
    sub_1000027F4(v7, v6, v8);
    sub_100002804(v9, *((uint64_t *)&v9 + 1), v10);
    sub_100002804(v53, v11, v12);
    long long v14 = *(_OWORD *)(v1 + 200);
    long long v15 = *(_OWORD *)(v1 + 232);
    long long v80 = *(_OWORD *)(v1 + 216);
    long long v81 = v15;
    long long v82 = *(_OWORD *)(v1 + 248);
    long long v16 = *(_OWORD *)(v1 + 168);
    long long v76 = *(_OWORD *)(v1 + 152);
    long long v77 = v16;
    long long v78 = *(_OWORD *)(v1 + 184);
    long long v79 = v14;
    long long v17 = *(_OWORD *)(v1 + 200);
    long long v18 = *(_OWORD *)(v1 + 232);
    long long v62 = *(_OWORD *)(v1 + 216);
    long long v63 = v18;
    long long v64 = *(_OWORD *)(v1 + 248);
    long long v19 = *(_OWORD *)(v1 + 168);
    long long v58 = *(_OWORD *)(v1 + 152);
    long long v59 = v19;
    long long v60 = *(_OWORD *)(v1 + 184);
    long long v61 = v17;
    uint64_t v40 = sub_100003DD0(&qword_1000C4CC0);
    OptionGroup.wrappedValue.getter(v40, (uint64_t)&v65);
    uint64_t v20 = v65;
    uint64_t v21 = v66;
    char v22 = v67;
    long long v23 = v68;
    char v24 = v69;
    long long v25 = v70;
    char v42 = v71;
    uint64_t v50 = v73;
    uint64_t v54 = v72;
    char v47 = v74;
    long long v58 = v68;
    LOBYTE(v59) = v69;
    uint64_t v41 = sub_100003DD0(&qword_1000C48E8);
    Flag.wrappedValue.getter(v41, (uint64_t)&v65);
    sub_100002804(v20, v21, v22);
    sub_100002804(v23, *((uint64_t *)&v23 + 1), v24);
    sub_100002804(v25, *((uint64_t *)&v25 + 1), v42);
    sub_1000027F4(v54, v50, v47);
    if (v65)
    {
      long long v62 = v80;
      long long v63 = v81;
      long long v64 = v82;
      long long v59 = v77;
      long long v60 = v78;
      long long v61 = v79;
      OptionGroup.wrappedValue.getter(v40, (uint64_t)&v65);
      uint64_t v26 = v65;
      uint64_t v27 = v66;
      char v28 = v67;
      uint64_t v43 = *((void *)&v68 + 1);
      uint64_t v45 = v68;
      char v29 = v69;
      long long v30 = v70;
      char v31 = v71;
      uint64_t v51 = v73;
      uint64_t v55 = v72;
      char v48 = v74;
      long long v58 = v70;
      LOBYTE(v59) = v71;
      Flag.wrappedValue.getter(v41, (uint64_t)&v65);
      sub_100002804(v26, v27, v28);
      sub_100002804(v45, v43, v29);
      sub_100002804(v30, *((uint64_t *)&v30 + 1), v31);
      sub_1000027F4(v55, v51, v48);
      if (v65 == 1)
      {
        char v32 = v83;
        *((void *)&v59 + 1) = sub_100003DD0(&qword_1000C4CE0);
        *(void *)&long long v60 = sub_10001C000();
        *(void *)&long long v58 = v32;
      }
      else
      {
        uint64_t v39 = v75;
        *((void *)&v59 + 1) = sub_100003DD0(&qword_1000C4CC8);
        *(void *)&long long v60 = sub_10001D950(&qword_1000C4CD0, &qword_1000C4CC8, (void (*)(void))sub_10001BFAC);
        *(void *)&long long v58 = v39;
      }
      swift_bridgeObjectRetain();
      sub_100018EBC(&v58);
      sub_100005128((uint64_t)&v58);
    }
    else
    {
      long long v62 = v80;
      long long v63 = v81;
      long long v64 = v82;
      long long v59 = v77;
      long long v60 = v78;
      long long v61 = v79;
      OptionGroup.wrappedValue.getter(v40, (uint64_t)&v65);
      uint64_t v33 = v65;
      uint64_t v34 = v66;
      char v35 = v67;
      uint64_t v44 = *((void *)&v68 + 1);
      uint64_t v46 = v68;
      char v36 = v69;
      long long v37 = v70;
      char v38 = v71;
      uint64_t v52 = v73;
      uint64_t v56 = v72;
      char v49 = v74;
      long long v58 = v70;
      LOBYTE(v59) = v71;
      Flag.wrappedValue.getter(v41, (uint64_t)&v65);
      sub_100002804(v33, v34, v35);
      sub_100002804(v46, v44, v36);
      sub_100002804(v37, *((uint64_t *)&v37 + 1), v38);
      sub_1000027F4(v56, v52, v49);
      if (v65 == 1)
      {
        swift_bridgeObjectRetain();
        sub_100019458();
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100017864(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  swift_getObjectType();
  if (!*(void *)(a1 + 40)) {
    __break(1u);
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = _swiftEmptyArrayStorage;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_100004548;
  *(void *)(v12 + 24) = v11;
  *(void *)&long long v76 = sub_100013D9C;
  *((void *)&v76 + 1) = v12;
  swift_retain_n();
  uint64_t v13 = swift_reflection_iterateMetadataAllocations();
  swift_release();
  if (v13)
  {
    uint64_t v14 = String.init(cString:)();
    uint64_t v16 = v15;
    sub_1000045C0();
    swift_allocError();
    *long long v17 = v14;
    v17[1] = v16;
    swift_willThrow();
    return swift_release_n();
  }
  swift_release();
  swift_beginAccess();
  uint64_t v19 = *(void *)(v11 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)&long long v76 = v19;
  swift_bridgeObjectRetain();
  sub_10001A460((uint64_t *)&v76, (uint64_t (*)(uint64_t))sub_10002A3E4, sub_10001AB40);
  if (v5) {
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  uint64_t v20 = v76;
  long long v21 = *(_OWORD *)(a3 + 104);
  long long v76 = *(_OWORD *)(a3 + 88);
  long long v77 = v21;
  long long v22 = *(_OWORD *)(a3 + 136);
  long long v78 = *(_OWORD *)(a3 + 120);
  long long v79 = v22;
  uint64_t v23 = sub_100003DD0(&qword_1000C4748);
  OptionGroup.wrappedValue.getter(v23, (uint64_t)&v100);
  int v24 = sub_100008208();
  long long v104 = v100;
  char v105 = v101;
  sub_1000044DC((uint64_t)&v104);
  long long v106 = v102;
  char v107 = v103;
  sub_1000044DC((uint64_t)&v106);
  long long v58 = a5;
  if (v24 != 2)
  {
    if (*(void *)(a1 + 40))
    {
      long long v25 = (void *)sub_100006E38();
      goto LABEL_9;
    }
    __break(1u);
LABEL_24:
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  long long v25 = &_swiftEmptyDictionarySingleton;
LABEL_9:
  swift_unknownObjectRetain();
  swift_retain();
  sub_10001BD14(a3);
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_10001B8A4(v20, a1, a2, v20, a3, (uint64_t)v25);
  swift_bridgeObjectRelease();
  sub_10001BE60(a3);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release_n();
  uint64_t v27 = *((void *)v26 + 2);
  uint64_t v74 = (uint64_t)v26;
  if (v27)
  {
    swift_bridgeObjectRetain();
    char v28 = v26 + 104;
    do
    {
      uint64_t v29 = *(v28 - 1);
      uint64_t v30 = *v28;
      char v31 = *((unsigned char *)v28 - 15);
      char v32 = *((unsigned char *)v28 - 16);
      uint64_t v33 = *(v28 - 4);
      uint64_t v34 = *(v28 - 3);
      char v35 = *((unsigned char *)v28 - 40);
      long long v76 = *(_OWORD *)(v28 - 9);
      long long v77 = *(_OWORD *)(v28 - 7);
      LOBYTE(v78) = v35;
      *((void *)&v78 + 1) = v33;
      *(void *)&long long v79 = v34;
      BYTE8(v79) = v32;
      BYTE9(v79) = v31;
      *(void *)&long long v80 = v29;
      *((void *)&v80 + 1) = v30;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000184EC((uint64_t)&v76, a4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v28 += 10;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
  }
  long long v36 = *(_OWORD *)(a3 + 200);
  long long v37 = *(_OWORD *)(a3 + 232);
  long long v97 = *(_OWORD *)(a3 + 216);
  long long v98 = v37;
  long long v99 = *(_OWORD *)(a3 + 248);
  long long v38 = *(_OWORD *)(a3 + 168);
  long long v93 = *(_OWORD *)(a3 + 152);
  long long v94 = v38;
  long long v95 = *(_OWORD *)(a3 + 184);
  long long v96 = v36;
  long long v39 = *(_OWORD *)(a3 + 200);
  long long v40 = *(_OWORD *)(a3 + 232);
  long long v80 = *(_OWORD *)(a3 + 216);
  long long v81 = v40;
  long long v82 = *(_OWORD *)(a3 + 248);
  long long v41 = *(_OWORD *)(a3 + 168);
  long long v76 = *(_OWORD *)(a3 + 152);
  long long v77 = v41;
  long long v78 = *(_OWORD *)(a3 + 184);
  long long v79 = v39;
  uint64_t v57 = sub_100003DD0(&qword_1000C4CC0);
  OptionGroup.wrappedValue.getter(v57, (uint64_t)&v83);
  uint64_t v42 = v84;
  uint64_t v60 = v83;
  char v59 = v85;
  long long v43 = v86;
  char v44 = v87;
  uint64_t v64 = *((void *)&v88 + 1);
  uint64_t v66 = v88;
  char v62 = v89;
  uint64_t v70 = v91;
  uint64_t v72 = v90;
  char v68 = v92;
  long long v76 = v86;
  LOBYTE(v77) = v87;
  uint64_t v56 = sub_100003DD0(&qword_1000C48E8);
  Flag.wrappedValue.getter(v56, (uint64_t)&v83);
  sub_100002804(v60, v42, v59);
  sub_100002804(v43, *((uint64_t *)&v43 + 1), v44);
  sub_100002804(v66, v64, v62);
  sub_1000027F4(v72, v70, v68);
  if (v83)
  {
    unint64_t v45 = sub_100010648();
    uint64_t v47 = v46;
    *((void *)&v77 + 1) = swift_getAssociatedTypeWitness();
    *(_DWORD *)sub_10000A954((uint64_t *)&v76) = *(_DWORD *)(a1 + 20);
    swift_dynamicCast();
    int v48 = v83;
    uint64_t v49 = *v58;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *long long v58 = v49;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100011DEC(0, *(void *)(v49 + 16) + 1, 1, (char *)v49);
      uint64_t v49 = result;
      *long long v58 = result;
    }
    unint64_t v51 = *(void *)(v49 + 16);
    unint64_t v50 = *(void *)(v49 + 24);
    if (v51 >= v50 >> 1)
    {
      uint64_t result = (uint64_t)sub_100011DEC((char *)(v50 > 1), v51 + 1, 1, (char *)v49);
      uint64_t v49 = result;
      *long long v58 = result;
    }
    *(void *)(v49 + 16) = v51 + 1;
    unint64_t v52 = v49 + 32 * v51;
    *(void *)(v52 + 32) = v45;
    *(void *)(v52 + 40) = v47;
    *(_DWORD *)(v52 + 48) = v48;
    *(void *)(v52 + 56) = v74;
  }
  else
  {
    long long v80 = v97;
    long long v81 = v98;
    long long v82 = v99;
    long long v76 = v93;
    long long v77 = v94;
    long long v78 = v95;
    long long v79 = v96;
    OptionGroup.wrappedValue.getter(v57, (uint64_t)&v83);
    uint64_t v61 = v84;
    uint64_t v63 = v83;
    char v53 = v85;
    uint64_t v67 = *((void *)&v86 + 1);
    uint64_t v69 = v86;
    char v65 = v87;
    long long v54 = v88;
    char v55 = v89;
    uint64_t v75 = v90;
    long long v76 = v88;
    uint64_t v73 = v91;
    char v71 = v92;
    LOBYTE(v77) = v89;
    Flag.wrappedValue.getter(v56, (uint64_t)&v83);
    sub_100002804(v63, v61, v53);
    sub_100002804(v69, v67, v65);
    sub_100002804(v54, *((uint64_t *)&v54 + 1), v55);
    sub_1000027F4(v75, v73, v71);
    if ((v83 & 1) == 0) {
      sub_1000188A8(a1, a2, v74);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100017F50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v15 = *(void *)(a1 + 8);
  int v16 = *(_DWORD *)(a1 + 16);
  LODWORD(v84) = *(_DWORD *)a1;
  *((void *)&v84 + 1) = v15;
  LODWORD(v85) = v16;
  unint64_t result = swift_reflection_allocationMetadataPointer();
  if (!result)
  {
    *((_OWORD *)a7 + 3) = 0u;
    *((_OWORD *)a7 + 4) = 0u;
    *((_OWORD *)a7 + 1) = 0u;
    *((_OWORD *)a7 + 2) = 0u;
    *(_OWORD *)a7 = 0u;
    return result;
  }
  unint64_t v18 = result;
  *(void *)&long long v84 = a4;
  uint64_t v19 = *(void *)(a4 + 16);
  long long v82 = a7;
  if (v19)
  {
    uint64_t v20 = v19 - 1;
    long long v21 = (unsigned int *)(a4 + 24 * v19 + 24);
    do
    {
      unint64_t v22 = *((void *)v21 - 1);
      if (result >= v22)
      {
        uint64_t v23 = *v21;
        BOOL v24 = __CFADD__(v22, v23);
        unint64_t v25 = v22 + v23;
        if (v24)
        {
          __break(1u);
          goto LABEL_29;
        }
        if (result < v25) {
          break;
        }
      }
      --v20;
      v21 -= 6;
    }
    while (v20 != -1);
  }
  __chkstk_darwin(result);
  v66[2] = &v84;
  uint64_t v75 = sub_10001B73C((void *(*)(uint64_t *__return_ptr, uint64_t *))sub_10001C240, (uint64_t)v66, v26, v27);
  unint64_t v76 = v28;
  unint64_t v83 = v29;
  char v31 = v30;
  unint64_t v81 = a3;
  if (v30) {
    unint64_t v74 = (unint64_t)(swift_reflection_ownsAddressStrict() == 0) << 8;
  }
  else {
    unint64_t v74 = 0;
  }
  long long v32 = *(_OWORD *)(a5 + 104);
  long long v84 = *(_OWORD *)(a5 + 88);
  long long v85 = v32;
  long long v33 = *(_OWORD *)(a5 + 136);
  long long v86 = *(_OWORD *)(a5 + 120);
  long long v87 = v33;
  uint64_t v34 = sub_100003DD0(&qword_1000C4748);
  OptionGroup.wrappedValue.getter(v34, (uint64_t)&v102);
  char v35 = sub_100008208();
  long long v106 = v102;
  char v107 = v103;
  sub_1000044DC((uint64_t)&v106);
  long long v108 = v104;
  char v109 = v105;
  sub_1000044DC((uint64_t)&v108);
  unint64_t v77 = v31 & 1;
  if (v35 == 2 || (v31 & 1) != 0 || !*(void *)(a6 + 16) || (unint64_t v36 = sub_100024794(v83), (v37 & 1) == 0))
  {
    uint64_t v73 = 0;
    unint64_t v81 = 0;
  }
  else
  {
    uint64_t v38 = *(void *)(*(void *)(a6 + 56) + 8 * v36);
    uint64_t v39 = swift_allocObject();
    unint64_t v40 = v81;
    *(void *)(v39 + 16) = a2;
    *(void *)(v39 + 24) = v40;
    uint64_t v80 = v38;
    swift_unknownObjectRetain_n();
    if (v35)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v64 = sub_100004134(v38, sub_1000046A0);
      swift_bridgeObjectRelease();
      *(void *)&long long v84 = v64;
    }
    else
    {
      uint64_t v41 = swift_bridgeObjectRetain();
      *(void *)&long long v84 = sub_100003E14(v41, a2);
    }
    sub_100003DD0(&qword_1000C4768);
    sub_100005178(&qword_1000C4770, &qword_1000C4768);
    uint64_t v73 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v81 = v65;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v78 = a2;
  uint64_t v79 = v8;
  uint64_t v80 = *(void *)(a2 + 40);
  if (v80)
  {
    long long v42 = *(_OWORD *)(a5 + 200);
    long long v43 = *(_OWORD *)(a5 + 232);
    long long v88 = *(_OWORD *)(a5 + 216);
    long long v89 = v43;
    long long v90 = *(_OWORD *)(a5 + 248);
    long long v44 = *(_OWORD *)(a5 + 168);
    long long v84 = *(_OWORD *)(a5 + 152);
    long long v85 = v44;
    long long v86 = *(_OWORD *)(a5 + 184);
    long long v87 = v42;
    uint64_t v45 = sub_100003DD0(&qword_1000C4CC0);
    OptionGroup.wrappedValue.getter(v45, (uint64_t)&v91);
    long long v46 = v91;
    char v47 = v92;
    uint64_t v49 = v93;
    uint64_t v48 = v94;
    char v50 = v95;
    uint64_t v68 = v97;
    uint64_t v69 = v96;
    int v67 = v98;
    uint64_t v71 = v100;
    uint64_t v72 = v99;
    int v70 = v101;
    long long v84 = v91;
    LOBYTE(v85) = v92;
    uint64_t v51 = sub_100003DD0(&qword_1000C48E8);
    Flag.wrappedValue.getter(v51, (uint64_t)&v91);
    sub_100002804(v46, *((uint64_t *)&v46 + 1), v47);
    sub_100002804(v49, v48, v50);
    sub_100002804(v69, v68, v67);
    sub_1000027F4(v72, v71, v70);
    if (swift_reflection_typeRefForMetadata())
    {
      uint64_t v52 = swift_reflection_copyNameForTypeRef();
      uint64_t v53 = v78;
      long long v54 = v82;
      unint64_t v55 = v77;
      unint64_t v56 = 0xE90000000000003ELL;
      uint64_t v57 = 0x6E776F6E6B6E753CLL;
      if (v52)
      {
        long long v58 = (void *)v52;
        uint64_t v57 = String.init(cString:)();
        unint64_t v56 = v59;
        free(v58);
      }
    }
    else
    {
      uint64_t v53 = v78;
      long long v54 = v82;
      unint64_t v55 = v77;
      unint64_t v56 = 0xE90000000000003ELL;
      uint64_t v57 = 0x6E776F6E6B6E753CLL;
    }
    if (*(void *)(v53 + 40))
    {
      unint64_t result = sub_100007D84();
      unint64_t v60 = v74 | result & 1;
      uint64_t v61 = v75;
      *long long v54 = v18;
      v54[1] = (unint64_t)v61;
      unint64_t v62 = v76;
      v54[2] = v83;
      v54[3] = v62;
      v54[4] = v55;
      v54[5] = v57;
      v54[6] = v56;
      v54[7] = v60;
      unint64_t v63 = v81;
      v54[8] = v73;
      v54[9] = v63;
      return result;
    }
  }
  else
  {
LABEL_29:
    swift_bridgeObjectRelease();
    __break(1u);
  }
  unint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1000184EC(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 32)) {
    return result;
  }
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v4 = *(void *)(result + 48);
  uint64_t v6 = *(unsigned int *)(result + 24);
  uint64_t v7 = *(void *)(*(void *)a2 + 16);
  swift_bridgeObjectRetain();
  if (!v7 || (swift_bridgeObjectRetain(), sub_1000247D8(v5, v4), char v9 = v8, swift_bridgeObjectRelease(), (v9 & 1) == 0))
  {
    sub_100003DD0(&qword_1000C4C00);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1000A2660;
    *(void *)(inited + 32) = sub_100010648();
    *(void *)(inited + 40) = v20;
    uint64_t v21 = sub_10001BA54(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v39[0] = *(void *)a2;
    *(void *)a2 = 0x8000000000000000;
    sub_10002613C(v6, v21, v5, v4, isUniquelyReferenced_nonNull_native);
    *(void *)a2 = v39[0];
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  Swift::Int v37 = v6;
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_isUniquelyReferenced_nonNull_native();
  v38[0] = *(void *)a2;
  uint64_t v11 = v38[0];
  *(void *)a2 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_1000247D8(v5, v4);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_24;
  }
  char v2 = v12;
  if (*(void *)(v11 + 24) < v16)
  {
    sub_100024D70(v16, v10);
    unint64_t v17 = sub_1000247D8(v5, v4);
    if ((v2 & 1) != (v18 & 1)) {
      goto LABEL_30;
    }
    unint64_t v13 = v17;
    if (v2) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
  if ((v10 & 1) == 0) {
    goto LABEL_26;
  }
  if ((v12 & 1) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_12:
  while (1)
  {
    uint64_t v23 = (uint64_t *)(*(void *)(v38[0] + 56) + 16 * v13);
    uint64_t v24 = *v23;
    v39[1] = v23[1];
    if (!__OFADD__(v24, v37)) {
      break;
    }
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    sub_100026770();
    if ((v2 & 1) == 0) {
      goto LABEL_27;
    }
  }
  v39[0] = v24 + v37;
  sub_10001B7AC(v39, 1, v38, v13, v5, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)a2 = v38[0];
  swift_bridgeObjectRelease();
  Swift::Int v37 = sub_100010648();
  uint64_t v10 = v25;
  swift_bridgeObjectRetain();
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v40 = *(void *)a2;
  uint64_t v27 = v40;
  *(void *)a2 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_1000247D8(v5, v4);
  uint64_t v29 = *(void *)(v27 + 16);
  BOOL v30 = (v28 & 1) == 0;
  uint64_t v31 = v29 + v30;
  if (__OFADD__(v29, v30)) {
    goto LABEL_25;
  }
  char v2 = v28;
  if (*(void *)(v27 + 24) >= v31)
  {
    if (v26)
    {
      if ((v28 & 1) == 0) {
        goto LABEL_29;
      }
LABEL_20:
      uint64_t v34 = (uint64_t *)(*(void *)(v40 + 56) + 16 * v13);
      uint64_t v36 = *v34;
      uint64_t v35 = v34[1];
      v38[0] = v36;
      v38[1] = v35;
      sub_1000287FC(v39, v37, v10);
      swift_bridgeObjectRelease();
      sub_10001B7AC(v38, 1, &v40, v13, v5, v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)a2 = v40;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
LABEL_28:
    sub_100026770();
    if ((v2 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_20;
  }
  sub_100024D70(v31, v26);
  unint64_t v32 = sub_1000247D8(v5, v4);
  if ((v2 & 1) != (v33 & 1)) {
    goto LABEL_30;
  }
  unint64_t v13 = v32;
  if (v2) {
    goto LABEL_20;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1000188A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  long long v5 = *(_OWORD *)(v3 + 200);
  unint64_t v77 = _swiftEmptyArrayStorage;
  long long v6 = *(_OWORD *)(v3 + 232);
  long long v62 = *(_OWORD *)(v3 + 216);
  long long v63 = v6;
  long long v64 = *(_OWORD *)(v3 + 248);
  long long v7 = *(_OWORD *)(v3 + 168);
  long long v58 = *(_OWORD *)(v3 + 152);
  long long v59 = v7;
  long long v60 = *(_OWORD *)(v3 + 184);
  long long v61 = v5;
  uint64_t v8 = sub_100003DD0(&qword_1000C4CC0);
  OptionGroup.wrappedValue.getter(v8, (uint64_t)&v65);
  uint64_t v9 = v65;
  uint64_t v10 = (uint64_t)v66;
  char v11 = v67;
  uint64_t v12 = v69;
  uint64_t v53 = v68;
  char v52 = v70;
  uint64_t v55 = v72;
  uint64_t v56 = v71;
  char v54 = v73;
  long long v13 = v74;
  char v14 = v75;
  long long v58 = v74;
  LOBYTE(v59) = v75;
  uint64_t v15 = sub_100003DD0(&qword_1000C4930);
  Option.wrappedValue.getter(v15, (uint64_t)&v65);
  sub_100002804(v9, v10, v11);
  sub_100002804(v53, v12, v52);
  sub_100002804(v56, v55, v54);
  sub_1000027F4(v13, *((uint64_t *)&v13 + 1), v14);
  id v16 = sub_10001BAEC(v65, v66);
  if (!v57)
  {
    v76[0] = v16;
    uint64_t v17 = sub_100003DD0(&qword_1000C4758);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1000A2660;
    uint64_t v65 = 0;
    uint64_t v66 = (void *)0xE000000000000000;
    swift_getObjectType();
    v19._char countAndFlagsBits = sub_100010648();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._char countAndFlagsBits = 40;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    *((void *)&v59 + 1) = swift_getAssociatedTypeWitness();
    *(_DWORD *)sub_10000A954((uint64_t *)&v58) = *(_DWORD *)(a1 + 20);
    _print_unlocked<A, B>(_:_:)();
    sub_100005128((uint64_t)&v58);
    v21._char countAndFlagsBits = 670249;
    v21._object = (void *)0xE300000000000000;
    String.append(_:)(v21);
    uint64_t v22 = v65;
    uint64_t v23 = v66;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 32) = v22;
    *(void *)(v18 + 40) = v23;
    sub_10001C17C();
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1000A2CC0;
    *(void *)(v24 + 32) = 0x73736572646441;
    *(void *)(v24 + 40) = 0xE700000000000000;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = 0x697461636F6C6C41;
    *(void *)(v24 + 72) = 0xEA00000000006E6FLL;
    *(void *)(v24 + 88) = &type metadata for String;
    *(void *)(v24 + 96) = 1702521171;
    *(void *)(v24 + 104) = 0xE400000000000000;
    *(void *)(v24 + 120) = &type metadata for String;
    *(void *)(v24 + 128) = 0x74657366664FLL;
    *(void *)(v24 + 136) = 0xE600000000000000;
    *(void *)(v24 + 152) = &type metadata for String;
    strcpy((char *)(v24 + 160), "isArrayOfClass");
    *(unsigned char *)(v24 + 175) = -18;
    *(void *)(v24 + 216) = &type metadata for String;
    *(void *)(v24 + 184) = &type metadata for String;
    *(void *)(v24 + 192) = 1701667150;
    *(void *)(v24 + 200) = 0xE400000000000000;
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void *)(a3 + 16);
    if (v25)
    {
      char v26 = (void *)(swift_bridgeObjectRetain() + 104);
      do
      {
        uint64_t v27 = *(v26 - 1);
        uint64_t v28 = *v26;
        char v29 = *((unsigned char *)v26 - 15);
        char v30 = *((unsigned char *)v26 - 16);
        uint64_t v31 = *(v26 - 4);
        uint64_t v32 = *(v26 - 3);
        char v33 = *((unsigned char *)v26 - 40);
        long long v34 = *(_OWORD *)(v26 - 7);
        long long v58 = *(_OWORD *)(v26 - 9);
        long long v59 = v34;
        LOBYTE(v60) = v33;
        *((void *)&v60 + 1) = v31;
        *(void *)&long long v61 = v32;
        BYTE8(v61) = v30;
        BYTE9(v61) = v29;
        *(void *)&long long v62 = v27;
        *((void *)&v62 + 1) = v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100019A08((uint64_t *)&v58, (uint64_t)v76, &v77, v4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v26 += 10;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease();
    }
    uint64_t v35 = v77;
    if (v77[2])
    {
      uint64_t v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_1000A2660;
      *(void *)(v36 + 56) = &type metadata for String;
      *(void *)(v36 + 32) = 0xD00000000000005BLL;
      *(void *)(v36 + 40) = 0x80000001000A7F00;
      print<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
      uint64_t v37 = v35[2];
      if (v37)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v38 = (void **)(v35 + 6);
        do
        {
          uint64_t v39 = (uint64_t)*(v38 - 2);
          uint64_t v40 = (uint64_t)*(v38 - 1);
          uint64_t v41 = *v38;
          v38 += 3;
          uint64_t v42 = v17;
          uint64_t v43 = swift_allocObject();
          *(_OWORD *)(v43 + 16) = xmmword_1000A2660;
          *(void *)&long long v58 = 30768;
          *((void *)&v58 + 1) = 0xE200000000000000;
          uint64_t v65 = v39;
          sub_100004614();
          swift_bridgeObjectRetain();
          v44._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v44);
          swift_bridgeObjectRelease();
          v45._char countAndFlagsBits = 9;
          v45._object = (void *)0xE100000000000000;
          String.append(_:)(v45);
          v46._char countAndFlagsBits = v40;
          v46._object = v41;
          String.append(_:)(v46);
          long long v47 = v58;
          *(void *)(v43 + 56) = &type metadata for String;
          *(_OWORD *)(v43 + 32) = v47;
          print<A>(_:separator:terminator:to:)();
          swift_bridgeObjectRelease();
          uint64_t v17 = v42;
          swift_bridgeObjectRelease();
          --v37;
        }
        while (v37);
        swift_bridgeObjectRelease_n();
      }
    }
    uint64_t v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_1000A2660;
    *(void *)(v48 + 56) = &type metadata for String;
    *(void *)(v48 + 32) = 0;
    *(void *)(v48 + 40) = 0xE000000000000000;
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    id v49 = v76[0];
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100018EBC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v44 = type metadata accessor for String.Encoding();
  uint64_t v43 = *(void *)(v44 - 8);
  uint64_t v4 = __chkstk_darwin(v44);
  uint64_t v42 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::String v45 = (char *)&v34 - v6;
  uint64_t v7 = type metadata accessor for JSONEncoder.OutputFormatting();
  __chkstk_darwin(v7);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v8 = JSONEncoder.init()();
  sub_100003DD0(&qword_1000C4CF8);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1000A2CD0;
  static JSONEncoder.OutputFormatting.prettyPrinted.getter();
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  *(void *)&long long v46 = v9;
  sub_10001DBAC(&qword_1000C4D00, (void (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting);
  sub_100003DD0(&qword_1000C4D08);
  sub_100005178(&qword_1000C4D10, &qword_1000C4D08);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  sub_100005090(a1, a1[3]);
  uint64_t v10 = v64;
  uint64_t v11 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v10) {
    return swift_release();
  }
  uint64_t v14 = v11;
  unint64_t v15 = v12;
  uint64_t v41 = 0;
  uint64_t v64 = v8;
  static String.Encoding.utf8.getter();
  uint64_t v39 = v14;
  unint64_t v40 = v15;
  uint64_t result = String.init(data:encoding:)();
  uint64_t v38 = result;
  Swift::String v45 = v16;
  if (v16)
  {
    long long v17 = *(_OWORD *)(v2 + 200);
    long long v18 = *(_OWORD *)(v2 + 232);
    long long v50 = *(_OWORD *)(v2 + 216);
    long long v51 = v18;
    long long v52 = *(_OWORD *)(v2 + 248);
    long long v19 = *(_OWORD *)(v2 + 168);
    long long v46 = *(_OWORD *)(v2 + 152);
    long long v47 = v19;
    long long v20 = *(_OWORD *)(v2 + 184);
    long long v49 = v17;
    long long v48 = v20;
    uint64_t v21 = sub_100003DD0(&qword_1000C4CC0);
    OptionGroup.wrappedValue.getter(v21, (uint64_t)&v53);
    uint64_t v22 = v53;
    uint64_t v23 = v54;
    char v24 = v55;
    uint64_t v25 = v56;
    uint64_t v34 = v57;
    char v26 = v58;
    uint64_t v37 = v59;
    uint64_t v36 = v60;
    int v35 = v61;
    long long v27 = v62;
    char v28 = v63;
    long long v46 = v62;
    LOBYTE(v47) = v63;
    uint64_t v29 = sub_100003DD0(&qword_1000C4930);
    Option.wrappedValue.getter(v29, (uint64_t)&v53);
    sub_100002804(v22, v23, v24);
    sub_100002804(v25, v34, v26);
    sub_100002804(v37, v36, v35);
    sub_1000027F4(v27, *((uint64_t *)&v27 + 1), v28);
    if (v54)
    {
      *(void *)&long long v46 = v38;
      *((void *)&v46 + 1) = v45;
      char v30 = v42;
      static String.Encoding.utf8.getter();
      sub_10001C128();
      StringProtocol.write<A>(toFile:atomically:encoding:)();
      uint64_t v31 = v39;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v44);
      sub_10001C0D0(v31, v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    else
    {
      sub_100003DD0(&qword_1000C4758);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_1000A2660;
      *(void *)(v32 + 56) = &type metadata for String;
      char v33 = v45;
      *(void *)(v32 + 32) = v38;
      *(void *)(v32 + 40) = v33;
      print(_:separator:terminator:)();
      sub_10001C0D0(v39, v40);
      swift_bridgeObjectRelease();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100019458()
{
  long long v1 = *(_OWORD *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 232);
  long long v46 = *(_OWORD *)(v0 + 216);
  long long v47 = v2;
  long long v48 = *(_OWORD *)(v0 + 248);
  long long v3 = *(_OWORD *)(v0 + 168);
  long long v42 = *(_OWORD *)(v0 + 152);
  long long v43 = v3;
  long long v44 = *(_OWORD *)(v0 + 184);
  long long v45 = v1;
  uint64_t v4 = sub_100003DD0(&qword_1000C4CC0);
  OptionGroup.wrappedValue.getter(v4, (uint64_t)&v49);
  uint64_t v5 = v49;
  uint64_t v6 = (uint64_t)v50;
  char v7 = v51;
  uint64_t v8 = v53;
  uint64_t v37 = v52;
  char v9 = v54;
  uint64_t v40 = v55;
  uint64_t v39 = v56;
  char v38 = v57;
  long long v10 = v58;
  char v11 = v59;
  long long v42 = v58;
  LOBYTE(v43) = v59;
  uint64_t v12 = sub_100003DD0(&qword_1000C4930);
  Option.wrappedValue.getter(v12, (uint64_t)&v49);
  sub_100002804(v5, v6, v7);
  sub_100002804(v37, v8, v9);
  sub_100002804(v40, v39, v38);
  sub_1000027F4(v10, *((uint64_t *)&v10 + 1), v11);
  id v13 = sub_10001BAEC(v49, v50);
  if (!v41)
  {
    id v60 = v13;
    sub_100003DD0(&qword_1000C4758);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1000A3650;
    *(void *)(v14 + 32) = 1702521171;
    *(void *)(v14 + 40) = 0xE400000000000000;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = 0x7372656E774FLL;
    *(void *)(v14 + 72) = 0xE600000000000000;
    *(void *)(v14 + 120) = &type metadata for String;
    *(void *)(v14 + 88) = &type metadata for String;
    *(void *)(v14 + 96) = 1701667150;
    *(void *)(v14 + 104) = 0xE400000000000000;
    sub_10001C17C();
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = swift_bridgeObjectRetain();
    id v16 = sub_10002717C(v15);
    swift_bridgeObjectRelease();
    *(void *)&long long v42 = v16;
    sub_10001A460((uint64_t *)&v42, (uint64_t (*)(uint64_t))sub_10002A3D0, sub_10001A4E4);
    uint64_t v17 = *(void *)(v42 + 16);
    if (v17)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      long long v20 = (uint64_t *)(swift_retain() + 56);
      while (1)
      {
        uint64_t v23 = *(v20 - 1);
        BOOL v21 = __OFADD__(v19, v23);
        v19 += v23;
        if (v21) {
          break;
        }
        uint64_t v25 = *(v20 - 3);
        uint64_t v24 = *(v20 - 2);
        uint64_t v26 = *v20;
        BOOL v27 = v25 == 0x6E776F6E6B6E753CLL && v24 == 0xE90000000000003ELL;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          BOOL v21 = __OFADD__(v18, v23);
          v18 += v23;
          if (v21) {
            goto LABEL_18;
          }
        }
        uint64_t v22 = swift_allocObject();
        *(_OWORD *)(v22 + 16) = xmmword_1000A3650;
        *(void *)(v22 + 56) = &type metadata for Int;
        *(void *)(v22 + 32) = v23;
        *(void *)(v22 + 64) = *(void *)(v26 + 16);
        *(void *)(v22 + 120) = &type metadata for String;
        *(void *)(v22 + 88) = &type metadata for Int;
        *(void *)(v22 + 96) = v25;
        *(void *)(v22 + 104) = v24;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        print<A>(_:separator:terminator:to:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v20 += 4;
        if (!--v17)
        {
          swift_release_n();
          uint64_t v28 = v19 / 1024;
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_18:
      __break(1u);
      swift_release();
      __break(1u);
    }
    else
    {
      swift_release();
      uint64_t v18 = 0;
      uint64_t v28 = 0;
LABEL_15:
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_1000A2660;
      *(void *)&long long v42 = 0;
      *((void *)&v42 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      strcpy((char *)&v42, "\nTotal size:\t");
      HIWORD(v42) = -4864;
      uint64_t v49 = v28;
      v30._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._char countAndFlagsBits = 1114196768;
      v31._object = (void *)0xE400000000000000;
      String.append(_:)(v31);
      long long v32 = v42;
      *(void *)(v29 + 56) = &type metadata for String;
      *(_OWORD *)(v29 + 32) = v32;
      print<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_1000A2660;
      *(void *)&long long v42 = 0;
      *((void *)&v42 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      strcpy((char *)&v42, "Unknown size:\t");
      HIBYTE(v42) = -18;
      uint64_t v49 = v18 / 1024;
      v34._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._char countAndFlagsBits = 1114196768;
      v35._object = (void *)0xE400000000000000;
      String.append(_:)(v35);
      long long v36 = v42;
      *(void *)(v33 + 56) = &type metadata for String;
      *(_OWORD *)(v33 + 32) = v36;
      print<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_100019A08(uint64_t *a1, uint64_t a2, void **a3, uint64_t a4)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[2];
  char v6 = *((unsigned char *)a1 + 32);
  uint64_t v42 = a1[5];
  uint64_t v53 = a1[6];
  int v39 = *((unsigned __int8 *)a1 + 57);
  char v40 = *((unsigned char *)a1 + 56);
  unint64_t v37 = a1[8];
  unint64_t v38 = a1[9];
  char v7 = (void *)sub_100003DD0(&qword_1000C4758);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1000A2660;
  *(void *)&long long v43 = 30768;
  *((void *)&v43 + 1) = 0xE200000000000000;
  *(void *)&long long v47 = v4;
  char v9 = (void *)sub_100004614();
  v10._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  long long v11 = v43;
  *(void *)(v8 + 56) = &type metadata for String;
  *(_OWORD *)(v8 + 32) = v11;
  sub_10001C17C();
  print<A>(_:separator:terminator:to:)();
  swift_bridgeObjectRelease();
  if (v6)
  {
    unint64_t v12 = (unint64_t)&type metadata for String;
    if (!v39)
    {
LABEL_7:
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_1000A2660;
      *(void *)(v18 + 56) = v12;
      *(void *)(v18 + 32) = 0x3F093F3F093F3F3FLL;
      unint64_t v19 = 0xEA00000000003F3FLL;
      goto LABEL_11;
    }
    char v7 = a3;
    char v9 = *a3;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v9;
    if (isUniquelyReferenced_nonNull_native)
    {
LABEL_4:
      unint64_t v14 = v4;
      unint64_t v16 = v9[2];
      unint64_t v15 = v9[3];
      if (v16 >= v15 >> 1)
      {
        char v9 = sub_100012008((void *)(v15 > 1), v16 + 1, 1, v9);
        *char v7 = v9;
      }
      v9[2] = v16 + 1;
      uint64_t v17 = &v9[3 * v16];
      v17[4] = v14;
      v17[5] = v42;
      v17[6] = v53;
      goto LABEL_7;
    }
LABEL_23:
    char v9 = sub_100012008(0, v9[2] + 1, 1, v9);
    *char v7 = v9;
    goto LABEL_4;
  }
  unint64_t v12 = v4 - v5;
  if (v4 < v5)
  {
    __break(1u);
    goto LABEL_22;
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1000A2660;
  *(void *)&long long v43 = 30768;
  *((void *)&v43 + 1) = 0xE200000000000000;
  v20._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._char countAndFlagsBits = 9;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._char countAndFlagsBits = 9;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  *(void *)&long long v47 = v4 - v5;
  v24._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  unint64_t v19 = 0xE200000000000000;
  unint64_t v12 = (unint64_t)&type metadata for String;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 32) = 30768;
LABEL_11:
  *(void *)(v18 + 40) = v19;
  print<A>(_:separator:terminator:to:)();
  swift_bridgeObjectRelease();
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1000A2660;
  *(void *)(v25 + 56) = &type metadata for Bool;
  *(unsigned char *)(v25 + 32) = v40;
  print<A>(_:separator:terminator:to:)();
  swift_bridgeObjectRelease();
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1000A2660;
  *(void *)(v26 + 56) = v12;
  *(void *)(v26 + 32) = v42;
  *(void *)(v26 + 40) = v53;
  swift_bridgeObjectRetain();
  print<A>(_:separator:terminator:to:)();
  swift_bridgeObjectRelease();
  long long v27 = *(_OWORD *)(a4 + 104);
  long long v43 = *(_OWORD *)(a4 + 88);
  long long v44 = v27;
  long long v28 = *(_OWORD *)(a4 + 136);
  long long v45 = *(_OWORD *)(a4 + 120);
  long long v46 = v28;
  uint64_t v29 = sub_100003DD0(&qword_1000C4748);
  OptionGroup.wrappedValue.getter(v29, (uint64_t)&v47);
  int v30 = sub_100008208();
  long long v51 = v47;
  char v52 = v48;
  sub_1000044DC((uint64_t)&v51);
  long long v43 = v49;
  LOBYTE(v44) = v50;
  uint64_t result = sub_1000044DC((uint64_t)&v43);
  if (v30 == 2) {
    char v32 = 1;
  }
  else {
    char v32 = v6;
  }
  if ((v32 & 1) == 0)
  {
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_1000A2660;
    *(void *)(v33 + 56) = v12;
    unint64_t v34 = 0xD000000000000019;
    if (v38) {
      unint64_t v34 = v37;
    }
    unint64_t v35 = 0x80000001000A7F60;
    if (v38) {
      unint64_t v35 = v38;
    }
    *(void *)(v33 + 32) = v34;
    *(void *)(v33 + 40) = v35;
    swift_bridgeObjectRetain();
    print<A>(_:separator:terminator:to:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100019F50()
{
  unint64_t v1 = 0xD000000000000010;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000016;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x736E6F6974706FLL;
  }
}

uint64_t sub_100019FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001C574(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100019FD8(uint64_t a1)
{
  unint64_t v2 = sub_10001D320();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001A014(uint64_t a1)
{
  unint64_t v2 = sub_10001D320();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001A050@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000C4670 != -1) {
    swift_once();
  }

  return sub_1000046F0((uint64_t)&xmmword_1000C63B8, a1);
}

uint64_t sub_10001A0BC()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_100017320();
}

__n128 sub_10001A108@<Q0>(uint64_t a1@<X8>)
{
  unint64_t v2 = (char *)ArgumentVisibility.default.unsafeMutableAddressor();
  char v3 = *v2;
  unint64_t v4 = sub_10000474C();
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, v3, (uint64_t)&type metadata for UniversalOptions, v4, (uint64_t)&v38);
  long long v36 = v39;
  __n128 v37 = v38;
  long long v35 = v40;
  uint64_t v33 = *((void *)&v41 + 1);
  uint64_t v34 = v41;
  char v5 = BYTE1(v42);
  char v31 = BYTE2(v42);
  char v32 = v42;
  char v30 = BYTE3(v42);
  uint64_t v28 = v43;
  uint64_t v29 = *((void *)&v42 + 1);
  char v6 = *v2;
  unint64_t v7 = sub_1000047A0();
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, v6, (uint64_t)&type metadata for BacktraceOptions, v7, (uint64_t)&v38);
  long long v26 = v39;
  __n128 v27 = v38;
  uint64_t v8 = v40;
  char v9 = BYTE8(v40);
  char v10 = BYTE9(v40);
  char v11 = BYTE10(v40);
  char v12 = BYTE11(v40);
  long long v13 = v41;
  LOBYTE(v2) = *v2;
  unint64_t v14 = sub_10001C298();
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, (char)v2, (uint64_t)&type metadata for GenericMetadataOptions, v14, (uint64_t)&v38);
  uint64_t v15 = v43;
  char v16 = v44;
  char v17 = v46;
  char v18 = v47;
  uint64_t v19 = v48;
  uint64_t v20 = v49;
  __n128 result = v38;
  long long v22 = v39;
  long long v23 = v40;
  long long v24 = v41;
  long long v25 = v42;
  char v51 = v10;
  char v50 = v45;
  *(__n128 *)a1 = v37;
  *(_OWORD *)(a1 + 16) = v36;
  *(_OWORD *)(a1 + 32) = v35;
  *(void *)(a1 + 48) = v34;
  *(void *)(a1 + 56) = v33;
  *(unsigned char *)(a1 + 64) = v32;
  *(unsigned char *)(a1 + 65) = v5;
  *(unsigned char *)(a1 + 66) = v31;
  *(unsigned char *)(a1 + 67) = v30;
  *(void *)(a1 + 72) = v29;
  *(void *)(a1 + 80) = v28;
  *(__n128 *)(a1 + 88) = v27;
  *(_OWORD *)(a1 + 104) = v26;
  *(void *)(a1 + 120) = v8;
  *(unsigned char *)(a1 + 128) = v9;
  *(unsigned char *)(a1 + 129) = v51;
  *(unsigned char *)(a1 + 130) = v11;
  *(unsigned char *)(a1 + 131) = v12;
  *(_OWORD *)(a1 + 136) = v13;
  *(__n128 *)(a1 + 152) = result;
  *(_OWORD *)(a1 + 168) = v22;
  *(_OWORD *)(a1 + 184) = v23;
  *(_OWORD *)(a1 + 200) = v24;
  *(_OWORD *)(a1 + 216) = v25;
  *(void *)(a1 + 232) = v15;
  *(unsigned char *)(a1 + 240) = v16;
  *(unsigned char *)(a1 + 241) = v50;
  *(unsigned char *)(a1 + 242) = v17;
  *(unsigned char *)(a1 + 243) = v18;
  *(void *)(a1 + 248) = v19;
  *(void *)(a1 + 256) = v20;
  return result;
}

void *sub_10001A314@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __n128 result = sub_10001C6C0(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x108uLL);
  }
  return result;
}

unint64_t sub_10001A368(uint64_t a1)
{
  unint64_t result = sub_10001A390();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10001A390()
{
  unint64_t result = qword_1000C4CB0;
  if (!qword_1000C4CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4CB0);
  }
  return result;
}

unint64_t sub_10001A3E4(uint64_t a1)
{
  unint64_t result = sub_10001A40C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10001A40C()
{
  unint64_t result = qword_1000C4CB8;
  if (!qword_1000C4CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4CB8);
  }
  return result;
}

uint64_t sub_10001A460(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_10001A4E4(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_131;
    }
    if (v3) {
      return sub_10001B220(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_130;
  }
  uint64_t v6 = result;
  uint64_t v94 = a1;
  if (v3 > 1)
  {
    uint64_t v7 = v5 >> 1;
    sub_100003DD0(&qword_1000C4D28);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = v7;
    uint64_t v96 = (void *)result;
    uint64_t v100 = (char *)(result + 32);
LABEL_13:
    Swift::Int v9 = 0;
    uint64_t v10 = *a1;
    uint64_t v95 = *a1 + 88;
    char v11 = (char *)_swiftEmptyArrayStorage;
    uint64_t v97 = v6;
    Swift::Int v98 = v3;
    uint64_t v99 = v10;
    while (1)
    {
      Swift::Int v13 = v9++;
      if (v9 < v3)
      {
        unint64_t v14 = *(void *)(*(void *)(v10 + 32 * v9 + 24) + 16);
        unint64_t v15 = *(void *)(*(void *)(v10 + 32 * v13 + 24) + 16);
        Swift::Int v9 = v13 + 2;
        if (v13 + 2 < v3)
        {
          uint64_t v16 = v95 + 32 * v13;
          unint64_t v17 = v14;
          while (1)
          {
            unint64_t v18 = *(void *)(*(void *)v16 + 16);
            if (v15 < v14 == v17 >= v18) {
              break;
            }
            ++v9;
            v16 += 32;
            unint64_t v17 = v18;
            if (v3 == v9)
            {
              Swift::Int v9 = v3;
              break;
            }
          }
        }
        if (v15 < v14)
        {
          if (v9 < v13) {
            goto LABEL_132;
          }
          if (v13 < v9)
          {
            uint64_t v19 = 32 * v9;
            uint64_t v20 = 32 * v13;
            Swift::Int v21 = v9;
            Swift::Int v22 = v13;
            do
            {
              if (v22 != --v21)
              {
                if (!v10) {
                  goto LABEL_137;
                }
                long long v23 = (_OWORD *)(v10 + v20);
                uint64_t v24 = v10 + v19;
                long long v25 = *(_OWORD *)(v10 + v20);
                uint64_t v26 = *(void *)(v10 + v20 + 16);
                uint64_t v27 = *(void *)(v10 + v20 + 24);
                long long v28 = *(_OWORD *)(v10 + v19 - 16);
                *long long v23 = *(_OWORD *)(v10 + v19 - 32);
                v23[1] = v28;
                *(_OWORD *)(v24 - 32) = v25;
                *(void *)(v24 - 16) = v26;
                *(void *)(v24 - 8) = v27;
              }
              ++v22;
              v19 -= 32;
              v20 += 32;
            }
            while (v22 < v21);
          }
        }
      }
      if (v9 < v3)
      {
        if (__OFSUB__(v9, v13)) {
          goto LABEL_129;
        }
        if (v9 - v13 < v6)
        {
          Swift::Int v29 = v13 + v6;
          if (__OFADD__(v13, v6)) {
            goto LABEL_133;
          }
          if (v29 >= v3) {
            Swift::Int v29 = v3;
          }
          if (v29 < v13)
          {
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
            return result;
          }
          if (v9 != v29)
          {
            char v30 = (void *)(v10 + 32 * v9);
            do
            {
              uint64_t v31 = *(void *)(v10 + 32 * v9 + 24);
              Swift::Int v32 = v13;
              uint64_t v33 = v30;
              do
              {
                if (*(void *)(*(v33 - 1) + 16) >= *(void *)(v31 + 16)) {
                  break;
                }
                if (!v10) {
                  goto LABEL_135;
                }
                uint64_t v34 = *v33;
                uint64_t v35 = v33[1];
                uint64_t v36 = v33[2];
                long long v37 = *((_OWORD *)v33 - 1);
                *(_OWORD *)uint64_t v33 = *((_OWORD *)v33 - 2);
                *((_OWORD *)v33 + 1) = v37;
                *(v33 - 3) = v35;
                *(v33 - 2) = v36;
                *(v33 - 1) = v31;
                *(v33 - 4) = v34;
                v33 -= 4;
                ++v32;
              }
              while (v9 != v32);
              ++v9;
              v30 += 4;
            }
            while (v9 != v29);
            Swift::Int v9 = v29;
          }
        }
      }
      if (v9 < v13) {
        goto LABEL_124;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100027DE4(0, *((void *)v11 + 2) + 1, 1, v11);
        char v11 = (char *)result;
      }
      unint64_t v39 = *((void *)v11 + 2);
      unint64_t v38 = *((void *)v11 + 3);
      unint64_t v12 = v39 + 1;
      uint64_t v10 = v99;
      if (v39 >= v38 >> 1)
      {
        uint64_t result = (uint64_t)sub_100027DE4((char *)(v38 > 1), v39 + 1, 1, v11);
        uint64_t v10 = v99;
        char v11 = (char *)result;
      }
      *((void *)v11 + 2) = v12;
      long long v40 = v11 + 32;
      long long v41 = &v11[16 * v39 + 32];
      *(void *)long long v41 = v13;
      *((void *)v41 + 1) = v9;
      if (v39)
      {
        while (1)
        {
          unint64_t v42 = v12 - 1;
          if (v12 >= 4)
          {
            char v47 = &v40[2 * v12];
            uint64_t v48 = *(v47 - 8);
            uint64_t v49 = *(v47 - 7);
            BOOL v53 = __OFSUB__(v49, v48);
            uint64_t v50 = v49 - v48;
            if (v53) {
              goto LABEL_113;
            }
            uint64_t v52 = *(v47 - 6);
            uint64_t v51 = *(v47 - 5);
            BOOL v53 = __OFSUB__(v51, v52);
            uint64_t v45 = v51 - v52;
            char v46 = v53;
            if (v53) {
              goto LABEL_114;
            }
            unint64_t v54 = v12 - 2;
            uint64_t v55 = &v40[2 * v12 - 4];
            uint64_t v57 = *v55;
            uint64_t v56 = v55[1];
            BOOL v53 = __OFSUB__(v56, v57);
            uint64_t v58 = v56 - v57;
            if (v53) {
              goto LABEL_115;
            }
            BOOL v53 = __OFADD__(v45, v58);
            uint64_t v59 = v45 + v58;
            if (v53) {
              goto LABEL_117;
            }
            if (v59 >= v50)
            {
              unint64_t v77 = &v40[2 * v42];
              uint64_t v79 = *v77;
              uint64_t v78 = v77[1];
              BOOL v53 = __OFSUB__(v78, v79);
              uint64_t v80 = v78 - v79;
              if (v53) {
                goto LABEL_123;
              }
              BOOL v70 = v45 < v80;
              goto LABEL_83;
            }
          }
          else
          {
            if (v12 != 3)
            {
              uint64_t v71 = *((void *)v11 + 4);
              uint64_t v72 = *((void *)v11 + 5);
              BOOL v53 = __OFSUB__(v72, v71);
              uint64_t v64 = v72 - v71;
              char v65 = v53;
              goto LABEL_77;
            }
            uint64_t v44 = *((void *)v11 + 4);
            uint64_t v43 = *((void *)v11 + 5);
            BOOL v53 = __OFSUB__(v43, v44);
            uint64_t v45 = v43 - v44;
            char v46 = v53;
          }
          if (v46) {
            goto LABEL_116;
          }
          unint64_t v54 = v12 - 2;
          id v60 = &v40[2 * v12 - 4];
          uint64_t v62 = *v60;
          uint64_t v61 = v60[1];
          BOOL v63 = __OFSUB__(v61, v62);
          uint64_t v64 = v61 - v62;
          char v65 = v63;
          if (v63) {
            goto LABEL_118;
          }
          uint64_t v66 = &v40[2 * v42];
          uint64_t v68 = *v66;
          uint64_t v67 = v66[1];
          BOOL v53 = __OFSUB__(v67, v68);
          uint64_t v69 = v67 - v68;
          if (v53) {
            goto LABEL_120;
          }
          if (__OFADD__(v64, v69)) {
            goto LABEL_122;
          }
          if (v64 + v69 >= v45)
          {
            BOOL v70 = v45 < v69;
LABEL_83:
            if (v70) {
              unint64_t v42 = v54;
            }
            goto LABEL_85;
          }
LABEL_77:
          if (v65) {
            goto LABEL_119;
          }
          char v73 = &v40[2 * v42];
          uint64_t v75 = *v73;
          uint64_t v74 = v73[1];
          BOOL v53 = __OFSUB__(v74, v75);
          uint64_t v76 = v74 - v75;
          if (v53) {
            goto LABEL_121;
          }
          if (v76 < v64) {
            goto LABEL_15;
          }
LABEL_85:
          unint64_t v81 = v42 - 1;
          if (v42 - 1 >= v12)
          {
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
            goto LABEL_134;
          }
          if (!v10) {
            goto LABEL_136;
          }
          long long v82 = &v40[2 * v81];
          uint64_t v83 = *v82;
          long long v84 = &v40[2 * v42];
          uint64_t v85 = v84[1];
          uint64_t result = sub_10001B2A4((char *)(v10 + 32 * *v82), (char *)(v10 + 32 * *v84), v10 + 32 * v85, v100);
          if (v1) {
            goto LABEL_93;
          }
          if (v85 < v83) {
            goto LABEL_110;
          }
          if (v42 > *((void *)v11 + 2)) {
            goto LABEL_111;
          }
          *long long v82 = v83;
          v40[2 * v81 + 1] = v85;
          unint64_t v86 = *((void *)v11 + 2);
          if (v42 >= v86) {
            goto LABEL_112;
          }
          unint64_t v12 = v86 - 1;
          uint64_t result = (uint64_t)memmove(&v40[2 * v42], v84 + 2, 16 * (v86 - 1 - v42));
          *((void *)v11 + 2) = v86 - 1;
          uint64_t v10 = v99;
          if (v86 <= 2) {
            goto LABEL_15;
          }
        }
      }
      unint64_t v12 = 1;
LABEL_15:
      uint64_t v6 = v97;
      Swift::Int v3 = v98;
      if (v9 >= v98)
      {
        uint64_t v8 = v96;
        goto LABEL_96;
      }
    }
  }
  uint64_t v8 = _swiftEmptyArrayStorage;
  uint64_t v100 = (char *)&_swiftEmptyArrayStorage[4];
  if (v3 == 1)
  {
    uint64_t v96 = _swiftEmptyArrayStorage;
    goto LABEL_13;
  }
  unint64_t v12 = _swiftEmptyArrayStorage[2];
  char v11 = (char *)_swiftEmptyArrayStorage;
LABEL_96:
  uint64_t result = (uint64_t)v11;
  uint64_t v96 = v8;
  if (v12 >= 2)
  {
    uint64_t v87 = *v94;
    do
    {
      unint64_t v88 = v12 - 2;
      if (v12 < 2) {
        goto LABEL_125;
      }
      if (!v87) {
        goto LABEL_138;
      }
      uint64_t v89 = result;
      uint64_t v90 = *(void *)(result + 32 + 16 * v88);
      uint64_t v91 = *(void *)(result + 32 + 16 * (v12 - 1) + 8);
      uint64_t result = sub_10001B2A4((char *)(v87 + 32 * v90), (char *)(v87 + 32 * *(void *)(result + 32 + 16 * (v12 - 1))), v87 + 32 * v91, v100);
      if (v1) {
        break;
      }
      if (v91 < v90) {
        goto LABEL_126;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100027EE0(v89);
        uint64_t v89 = result;
      }
      if (v88 >= *(void *)(v89 + 16)) {
        goto LABEL_127;
      }
      char v92 = (void *)(v89 + 32 + 16 * v88);
      *char v92 = v90;
      v92[1] = v91;
      unint64_t v93 = *(void *)(v89 + 16);
      if (v12 > v93) {
        goto LABEL_128;
      }
      memmove((void *)(v89 + 32 + 16 * (v12 - 1)), (const void *)(v89 + 32 + 16 * v12), 16 * (v93 - v12));
      uint64_t result = v89;
      *(void *)(v89 + 16) = v93 - 1;
      unint64_t v12 = v93 - 1;
    }
    while (v93 > 2);
  }
LABEL_93:
  swift_bridgeObjectRelease();
  v96[2] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10001AB40(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v88 = 0;
      uint64_t v89 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unint64_t v91 = *(void *)(v89 + 24 * i + 8);
        uint64_t v92 = v88;
        do
        {
          uint64_t v93 = v89 + v92;
          if (v91 >= *(void *)(v89 + v92 + 8)) {
            break;
          }
          if (!v89) {
            goto LABEL_141;
          }
          int v94 = *(_DWORD *)(v93 + 24);
          uint64_t v95 = (_DWORD *)(v89 + v92);
          int v96 = *(_DWORD *)(v89 + v92 + 40);
          *(_OWORD *)(v93 + 24) = *(_OWORD *)v93;
          uint64_t result = *(void *)(v93 + 16);
          *(void *)(v93 + 40) = result;
          *uint64_t v95 = v94;
          *(void *)(v93 + 8) = v91;
          v95[4] = v96;
          v92 -= 24;
        }
        while (v92 != -24);
        v88 += 24;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_136;
    }
    uint64_t v6 = result;
    uint64_t v111 = v1;
    long long v104 = a1;
    if (v3 > 1)
    {
      uint64_t v7 = v5 >> 1;
      type metadata accessor for swift_metadata_allocation(0);
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = v7;
      long long v106 = (void *)v8;
      uint64_t v110 = (char *)(v8 + 32);
LABEL_13:
      Swift::Int v10 = 0;
      uint64_t v11 = *a1;
      uint64_t v105 = *a1 + 56;
      unint64_t v12 = (char *)_swiftEmptyArrayStorage;
      uint64_t result = 24;
      uint64_t v107 = v6;
      Swift::Int v108 = v3;
      uint64_t v109 = v11;
      while (1)
      {
        Swift::Int v14 = v10++;
        if (v10 < v3)
        {
          unint64_t v15 = *(void *)(v11 + 24 * v10 + 8);
          unint64_t v16 = *(void *)(v11 + 24 * v14 + 8);
          Swift::Int v10 = v14 + 2;
          if (v14 + 2 < v3)
          {
            unint64_t v17 = (unint64_t *)(v105 + 24 * v14);
            unint64_t v18 = v15;
            while (1)
            {
              unint64_t v20 = *v17;
              v17 += 3;
              unint64_t v19 = v20;
              if (v15 < v16 == v20 >= v18) {
                break;
              }
              ++v10;
              unint64_t v18 = v19;
              if (v3 == v10)
              {
                Swift::Int v10 = v3;
                break;
              }
            }
          }
          if (v15 < v16)
          {
            if (v10 < v14) {
              goto LABEL_138;
            }
            if (v14 < v10)
            {
              uint64_t v21 = 24 * v10;
              uint64_t v22 = 24 * v14;
              Swift::Int v23 = v10;
              Swift::Int v24 = v14;
              do
              {
                if (v24 != --v23)
                {
                  if (!v11) {
                    goto LABEL_144;
                  }
                  uint64_t v25 = v11 + v22;
                  uint64_t v26 = v11 + v21;
                  int v27 = *(_DWORD *)(v11 + v22);
                  uint64_t v28 = *(void *)(v11 + v22 + 8);
                  int v29 = *(_DWORD *)(v11 + v22 + 16);
                  uint64_t v30 = *(void *)(v11 + v21 - 8);
                  *(_OWORD *)uint64_t v25 = *(_OWORD *)(v11 + v21 - 24);
                  *(void *)(v25 + 16) = v30;
                  *(_DWORD *)(v26 - 24) = v27;
                  *(void *)(v26 - 16) = v28;
                  *(_DWORD *)(v26 - 8) = v29;
                }
                ++v24;
                v21 -= 24;
                v22 += 24;
              }
              while (v24 < v23);
            }
          }
        }
        if (v10 < v3)
        {
          if (__OFSUB__(v10, v14)) {
            goto LABEL_135;
          }
          if (v10 - v14 < v6)
          {
            Swift::Int v31 = v14 + v6;
            if (__OFADD__(v14, v6)) {
              goto LABEL_139;
            }
            if (v31 >= v3) {
              Swift::Int v31 = v3;
            }
            if (v31 < v14)
            {
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
              return result;
            }
            if (v10 != v31)
            {
              Swift::Int v32 = (_DWORD *)(v11 + 24 * v10);
              do
              {
                unint64_t v33 = *(void *)(v11 + 24 * v10 + 8);
                Swift::Int v34 = v14;
                uint64_t v35 = v32;
                do
                {
                  if (v33 >= *((void *)v35 - 2)) {
                    break;
                  }
                  if (!v11) {
                    goto LABEL_142;
                  }
                  int v36 = *v35;
                  int v37 = v35[4];
                  *(_OWORD *)uint64_t v35 = *(_OWORD *)(v35 - 6);
                  *((void *)v35 + 2) = *((void *)v35 - 1);
                  *((void *)v35 - 2) = v33;
                  *(v35 - 2) = v37;
                  *(v35 - 6) = v36;
                  v35 -= 6;
                  ++v34;
                }
                while (v10 != v34);
                ++v10;
                v32 += 6;
              }
              while (v10 != v31);
              Swift::Int v10 = v31;
            }
          }
        }
        if (v10 < v14) {
          goto LABEL_130;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100027DE4(0, *((void *)v12 + 2) + 1, 1, v12);
          unint64_t v12 = (char *)result;
        }
        unint64_t v39 = *((void *)v12 + 2);
        unint64_t v38 = *((void *)v12 + 3);
        unint64_t v13 = v39 + 1;
        uint64_t v11 = v109;
        if (v39 >= v38 >> 1)
        {
          uint64_t result = (uint64_t)sub_100027DE4((char *)(v38 > 1), v39 + 1, 1, v12);
          uint64_t v11 = v109;
          unint64_t v12 = (char *)result;
        }
        *((void *)v12 + 2) = v13;
        long long v40 = v12 + 32;
        long long v41 = &v12[16 * v39 + 32];
        *(void *)long long v41 = v14;
        *((void *)v41 + 1) = v10;
        if (v39)
        {
          while (1)
          {
            unint64_t v42 = v13 - 1;
            if (v13 >= 4)
            {
              char v47 = &v40[2 * v13];
              uint64_t v48 = *(v47 - 8);
              uint64_t v49 = *(v47 - 7);
              BOOL v53 = __OFSUB__(v49, v48);
              uint64_t v50 = v49 - v48;
              if (v53) {
                goto LABEL_119;
              }
              uint64_t v52 = *(v47 - 6);
              uint64_t v51 = *(v47 - 5);
              BOOL v53 = __OFSUB__(v51, v52);
              uint64_t v45 = v51 - v52;
              char v46 = v53;
              if (v53) {
                goto LABEL_120;
              }
              unint64_t v54 = v13 - 2;
              uint64_t v55 = &v40[2 * v13 - 4];
              uint64_t v57 = *v55;
              uint64_t v56 = v55[1];
              BOOL v53 = __OFSUB__(v56, v57);
              uint64_t v58 = v56 - v57;
              if (v53) {
                goto LABEL_121;
              }
              BOOL v53 = __OFADD__(v45, v58);
              uint64_t v59 = v45 + v58;
              if (v53) {
                goto LABEL_123;
              }
              if (v59 >= v50)
              {
                unint64_t v77 = &v40[2 * v42];
                uint64_t v79 = *v77;
                uint64_t v78 = v77[1];
                BOOL v53 = __OFSUB__(v78, v79);
                uint64_t v80 = v78 - v79;
                if (v53) {
                  goto LABEL_129;
                }
                BOOL v70 = v45 < v80;
                goto LABEL_83;
              }
            }
            else
            {
              if (v13 != 3)
              {
                uint64_t v71 = *((void *)v12 + 4);
                uint64_t v72 = *((void *)v12 + 5);
                BOOL v53 = __OFSUB__(v72, v71);
                uint64_t v64 = v72 - v71;
                char v65 = v53;
                goto LABEL_77;
              }
              uint64_t v44 = *((void *)v12 + 4);
              uint64_t v43 = *((void *)v12 + 5);
              BOOL v53 = __OFSUB__(v43, v44);
              uint64_t v45 = v43 - v44;
              char v46 = v53;
            }
            if (v46) {
              goto LABEL_122;
            }
            unint64_t v54 = v13 - 2;
            id v60 = &v40[2 * v13 - 4];
            uint64_t v62 = *v60;
            uint64_t v61 = v60[1];
            BOOL v63 = __OFSUB__(v61, v62);
            uint64_t v64 = v61 - v62;
            char v65 = v63;
            if (v63) {
              goto LABEL_124;
            }
            uint64_t v66 = &v40[2 * v42];
            uint64_t v68 = *v66;
            uint64_t v67 = v66[1];
            BOOL v53 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v53) {
              goto LABEL_126;
            }
            if (__OFADD__(v64, v69)) {
              goto LABEL_128;
            }
            if (v64 + v69 >= v45)
            {
              BOOL v70 = v45 < v69;
LABEL_83:
              if (v70) {
                unint64_t v42 = v54;
              }
              goto LABEL_85;
            }
LABEL_77:
            if (v65) {
              goto LABEL_125;
            }
            char v73 = &v40[2 * v42];
            uint64_t v75 = *v73;
            uint64_t v74 = v73[1];
            BOOL v53 = __OFSUB__(v74, v75);
            uint64_t v76 = v74 - v75;
            if (v53) {
              goto LABEL_127;
            }
            if (v76 < v64) {
              goto LABEL_15;
            }
LABEL_85:
            unint64_t v81 = v42 - 1;
            if (v42 - 1 >= v13)
            {
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
              goto LABEL_140;
            }
            if (!v11) {
              goto LABEL_143;
            }
            long long v82 = v12;
            uint64_t v83 = &v40[2 * v81];
            uint64_t v84 = *v83;
            uint64_t v85 = &v40[2 * v42];
            uint64_t v86 = v85[1];
            uint64_t result = sub_10001B4DC((char *)(v11 + 24 * *v83), (char *)(v11 + 24 * *v85), v11 + 24 * v86, v110);
            if (v111) {
              goto LABEL_93;
            }
            if (v86 < v84) {
              goto LABEL_116;
            }
            if (v42 > *((void *)v82 + 2)) {
              goto LABEL_117;
            }
            *uint64_t v83 = v84;
            v40[2 * v81 + 1] = v86;
            unint64_t v87 = *((void *)v82 + 2);
            if (v42 >= v87) {
              goto LABEL_118;
            }
            unint64_t v12 = v82;
            unint64_t v13 = v87 - 1;
            uint64_t result = (uint64_t)memmove(&v40[2 * v42], v85 + 2, 16 * (v87 - 1 - v42));
            *((void *)v82 + 2) = v87 - 1;
            uint64_t v11 = v109;
            if (v87 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v13 = 1;
LABEL_15:
        uint64_t v6 = v107;
        Swift::Int v3 = v108;
        uint64_t result = 24;
        if (v10 >= v108)
        {
          Swift::Int v9 = v106;
          goto LABEL_102;
        }
      }
    }
    Swift::Int v9 = _swiftEmptyArrayStorage;
    uint64_t v110 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 == 1)
    {
      long long v106 = _swiftEmptyArrayStorage;
      goto LABEL_13;
    }
    unint64_t v13 = _swiftEmptyArrayStorage[2];
    unint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
    uint64_t result = (uint64_t)v12;
    long long v106 = v9;
    if (v13 >= 2)
    {
      uint64_t v97 = *v104;
      do
      {
        unint64_t v98 = v13 - 2;
        if (v13 < 2) {
          goto LABEL_131;
        }
        if (!v97) {
          goto LABEL_145;
        }
        uint64_t v99 = result;
        uint64_t v100 = *(void *)(result + 32 + 16 * v98);
        uint64_t v101 = *(void *)(result + 32 + 16 * (v13 - 1) + 8);
        uint64_t result = sub_10001B4DC((char *)(v97 + 24 * v100), (char *)(v97 + 24 * *(void *)(result + 32 + 16 * (v13 - 1))), v97 + 24 * v101, v110);
        if (v111) {
          break;
        }
        if (v101 < v100) {
          goto LABEL_132;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100027EE0(v99);
          uint64_t v99 = result;
        }
        if (v98 >= *(void *)(v99 + 16)) {
          goto LABEL_133;
        }
        long long v102 = (void *)(v99 + 32 + 16 * v98);
        *long long v102 = v100;
        v102[1] = v101;
        unint64_t v103 = *(void *)(v99 + 16);
        if (v13 > v103) {
          goto LABEL_134;
        }
        memmove((void *)(v99 + 32 + 16 * (v13 - 1)), (const void *)(v99 + 32 + 16 * v13), 16 * (v103 - v13));
        uint64_t result = v99;
        *(void *)(v99 + 16) = v103 - 1;
        unint64_t v13 = v103 - 1;
      }
      while (v103 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    v106[2] = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10001B220(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 32 * a3;
LABEL_5:
    uint64_t v6 = *(void *)(v4 + 32 * a3 + 24);
    uint64_t v7 = result;
    uint64_t v8 = (void *)v5;
    while (1)
    {
      if (*(void *)(*(v8 - 1) + 16) >= *(void *)(v6 + 16))
      {
LABEL_4:
        ++a3;
        v5 += 32;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v4) {
        break;
      }
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      uint64_t v11 = v8[2];
      long long v12 = *((_OWORD *)v8 - 1);
      *(_OWORD *)uint64_t v8 = *((_OWORD *)v8 - 2);
      *((_OWORD *)v8 + 1) = v12;
      *(v8 - 3) = v10;
      *(v8 - 2) = v11;
      *(v8 - 1) = v6;
      *(v8 - 4) = v9;
      v8 -= 4;
      if (a3 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10001B2A4(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = __src - __dst + 31;
  if (__src - __dst >= 0) {
    int64_t v9 = __src - __dst;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 31;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 5;
  if (v10 >= v12 >> 5)
  {
    if (a4 != __src || &__src[32 * v13] <= a4) {
      memmove(a4, __src, 32 * v13);
    }
    Swift::Int v14 = &v4[32 * v13];
    if (v7 >= v6 || v11 < 32) {
      goto LABEL_43;
    }
    unint64_t v19 = (char *)(a3 - 32);
    while (1)
    {
      unint64_t v20 = v19 + 32;
      if (*(void *)(*((void *)v6 - 1) + 16) >= *(void *)(*((void *)v14 - 1) + 16))
      {
        uint64_t v21 = v14 - 32;
        if (v20 != v14)
        {
          v14 -= 32;
          goto LABEL_40;
        }
        BOOL v22 = v19 >= v14;
        v14 -= 32;
        if (v22) {
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v21 = v6 - 32;
        if (v20 != v6)
        {
          v6 -= 32;
LABEL_40:
          long long v23 = *((_OWORD *)v21 + 1);
          *(_OWORD *)unint64_t v19 = *(_OWORD *)v21;
          *((_OWORD *)v19 + 1) = v23;
          goto LABEL_41;
        }
        BOOL v22 = v19 >= v6;
        v6 -= 32;
        if (v22) {
          goto LABEL_40;
        }
      }
LABEL_41:
      if (v6 > v7)
      {
        v19 -= 32;
        if (v14 > v4) {
          continue;
        }
      }
      goto LABEL_43;
    }
  }
  if (a4 != __dst || &__dst[32 * v10] <= a4) {
    memmove(a4, __dst, 32 * v10);
  }
  Swift::Int v14 = &v4[32 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (1)
    {
      if (*(void *)(*((void *)v4 + 3) + 16) >= *(void *)(*((void *)v6 + 3) + 16))
      {
        unint64_t v17 = v4 + 32;
        unint64_t v16 = v4;
        unint64_t v15 = v6;
        if (v7 == v4)
        {
          v4 += 32;
          if (v7 < v17) {
            goto LABEL_20;
          }
        }
        else
        {
          v4 += 32;
        }
      }
      else
      {
        unint64_t v15 = v6 + 32;
        unint64_t v16 = v6;
        if (v7 == v6 && v7 < v15) {
          goto LABEL_20;
        }
      }
      long long v18 = *((_OWORD *)v16 + 1);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v16;
      *((_OWORD *)v7 + 1) = v18;
LABEL_20:
      v7 += 32;
      if (v4 < v14)
      {
        uint64_t v6 = v15;
        if ((unint64_t)v15 < a3) {
          continue;
        }
      }
      break;
    }
  }
  uint64_t v6 = v7;
LABEL_43:
  int64_t v24 = v14 - v4 + (v14 - v4 < 0 ? 0x1FuLL : 0);
  if (v6 != v4 || v6 >= &v4[v24 & 0xFFFFFFFFFFFFFFE0]) {
    memmove(v6, v4, 32 * (v24 >> 5));
  }
  return 1;
}

uint64_t sub_10001B4DC(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = (__src - __dst) / 24;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 24;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[24 * v11] <= a4) {
      memmove(a4, __src, 24 * v11);
    }
    uint64_t v12 = &v4[24 * v11];
    if (v7 >= v6 || v10 < 24) {
      goto LABEL_39;
    }
    unint64_t v17 = a3 - 24;
    while (1)
    {
      long long v18 = (char *)(v17 + 24);
      if (*((void *)v12 - 2) >= *((void *)v6 - 2))
      {
        unint64_t v19 = v12 - 24;
        if (v18 != v12)
        {
          v12 -= 24;
          goto LABEL_36;
        }
        BOOL v20 = v17 >= (unint64_t)v12;
        v12 -= 24;
        if (v20) {
          goto LABEL_36;
        }
      }
      else
      {
        unint64_t v19 = v6 - 24;
        if (v18 != v6)
        {
          v6 -= 24;
LABEL_36:
          long long v21 = *(_OWORD *)v19;
          *(void *)(v17 + 16) = *((void *)v19 + 2);
          *(_OWORD *)unint64_t v17 = v21;
          goto LABEL_37;
        }
        BOOL v20 = v17 >= (unint64_t)v6;
        v6 -= 24;
        if (v20) {
          goto LABEL_36;
        }
      }
LABEL_37:
      if (v6 > v7)
      {
        v17 -= 24;
        if (v12 > v4) {
          continue;
        }
      }
      goto LABEL_39;
    }
  }
  if (a4 != __dst || &__dst[24 * v9] <= a4) {
    memmove(a4, __dst, 24 * v9);
  }
  uint64_t v12 = &v4[24 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (1)
    {
      if (*((void *)v6 + 1) >= *((void *)v4 + 1))
      {
        unint64_t v15 = v4 + 24;
        Swift::Int v14 = v4;
        uint64_t v13 = v6;
        if (v7 == v4)
        {
          v4 += 24;
          if (v7 < v15) {
            goto LABEL_16;
          }
        }
        else
        {
          v4 += 24;
        }
      }
      else
      {
        uint64_t v13 = v6 + 24;
        Swift::Int v14 = v6;
        if (v7 == v6 && v7 < v13) {
          goto LABEL_16;
        }
      }
      long long v16 = *(_OWORD *)v14;
      *((void *)v7 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v7 = v16;
LABEL_16:
      v7 += 24;
      if (v4 < v12)
      {
        uint64_t v6 = v13;
        if ((unint64_t)v13 < a3) {
          continue;
        }
      }
      break;
    }
  }
  uint64_t v6 = v7;
LABEL_39:
  uint64_t v22 = (unsigned __int128)((v12 - v4) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  uint64_t v23 = (v22 >> 2) + ((unint64_t)v22 >> 63);
  if (v6 != v4 || v6 >= &v4[24 * v23]) {
    memmove(v6, v4, 24 * v23);
  }
  return 1;
}

void *sub_10001B73C(void *(*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return 0;
  }
  uint64_t v6 = a3;
  uint64_t result = a1(&v7, &v6);
  if (!v4) {
    return (void *)v7;
  }
  return result;
}

uint64_t sub_10001B7AC(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a1[1];
  if (v8)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = (void *)*a3;
    if (a2)
    {
      uint64_t v12 = (uint64_t *)(v11[7] + 16 * a4);
      *uint64_t v12 = v10;
      v12[1] = v8;
    }
    else
    {
      sub_10002657C(a4, a5, a6, v10, v8, v11);
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_100025C78(a4, *a3);
  }

  return swift_bridgeObjectRetain();
}

unint64_t *sub_10001B860@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)a2 + 16))
  {
    uint64_t v4 = *(void *)a2 + 24 * v3;
    int v5 = *(_DWORD *)(v4 + 32);
    uint64_t v6 = *(void *)(v4 + 40);
    LODWORD(v4) = *(_DWORD *)(v4 + 48);
    *(_DWORD *)a3 = v5;
    *(void *)(a3 + 8) = v6;
    *(_DWORD *)(a3 + 16) = v4;
    return result;
  }
  __break(1u);
  return result;
}

char *sub_10001B8A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v8 = (_DWORD *)(swift_bridgeObjectRetain() + 48);
  int64_t v9 = (char *)_swiftEmptyArrayStorage;
  do
  {
    int v11 = *v8;
    uint64_t v12 = *((void *)v8 - 1);
    int v33 = *(v8 - 4);
    uint64_t v34 = v12;
    int v35 = v11;
    sub_100017F50((uint64_t)&v33, a2, a3, a4, a5, a6, (unint64_t *)v27);
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9;
    }
    uint64_t v13 = v30;
    if (v30)
    {
      long long v24 = v27[1];
      long long v25 = v27[0];
      char v14 = v28;
      uint64_t v36 = v29;
      __int16 v15 = v31;
      long long v26 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v9 = sub_100011EF0(0, *((void *)v9 + 2) + 1, 1, v9);
      }
      unint64_t v17 = *((void *)v9 + 2);
      unint64_t v16 = *((void *)v9 + 3);
      if (v17 >= v16 >> 1) {
        int64_t v9 = sub_100011EF0((char *)(v16 > 1), v17 + 1, 1, v9);
      }
      *((void *)v9 + 2) = v17 + 1;
      uint64_t v10 = &v9[80 * v17];
      *((_OWORD *)v10 + 2) = v25;
      *((_OWORD *)v10 + 3) = v24;
      v10[64] = v14 & 1;
      *((void *)v10 + 9) = v36;
      *((void *)v10 + 10) = v13;
      v10[88] = v15 & 1;
      v10[89] = HIBYTE(v15) & 1;
      *((_OWORD *)v10 + 6) = v26;
    }
    v8 += 6;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_10001BA54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1000287FC(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

id sub_10001BAEC(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v4 = [objc_allocWithZone((Class)NSFileManager) init];
    NSString v5 = String._bridgeToObjectiveC()();
    unsigned __int8 v6 = [v4 createFileAtPath:v5 contents:0 attributes:0];

    if (v6)
    {
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v8 = [self fileHandleForWritingAtPath:v7];

      if (v8) {
        return v8;
      }
      __break(1u);
    }
    else
    {
      sub_100003DD0(&qword_1000C4758);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_1000A2660;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      v11._char countAndFlagsBits = a1;
      v11._object = a2;
      String.append(_:)(v11);
      *(void *)(v10 + 56) = &type metadata for String;
      *(void *)(v10 + 32) = 0xD000000000000016;
      *(void *)(v10 + 40) = 0x80000001000A7EE0;
      if (qword_1000C4660 == -1) {
        goto LABEL_7;
      }
    }
    swift_once();
LABEL_7:
    swift_beginAccess();
    sub_10000A900();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    exit(1);
  }
  return [self fileHandleWithStandardOutput];
}

uint64_t sub_10001BD14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 120);
  char v12 = *(unsigned char *)(a1 + 129);
  uint64_t v20 = *(void *)(a1 + 160);
  uint64_t v21 = *(void *)(a1 + 152);
  uint64_t v19 = *(void *)(a1 + 168);
  uint64_t v17 = *(void *)(a1 + 184);
  uint64_t v18 = *(void *)(a1 + 176);
  uint64_t v15 = *(void *)(a1 + 200);
  uint64_t v16 = *(void *)(a1 + 192);
  long long v13 = *(_OWORD *)(a1 + 216);
  uint64_t v11 = *(void *)(a1 + 232);
  char v7 = *(unsigned char *)(a1 + 240);
  char v8 = *(unsigned char *)(a1 + 241);
  uint64_t v14 = *(void *)(a1 + 208);
  char v9 = *(unsigned char *)(a1 + 128);
  sub_100002594(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64), *(unsigned char *)(a1 + 65));
  swift_bridgeObjectRetain();
  sub_10000265C(v2, v3, v4, v5, v6, v9, v12);
  swift_bridgeObjectRetain();
  sub_1000159F0(v21, v20, v19, v18, v17, v16, v15, v14, v13, *((uint64_t *)&v13 + 1), v11, v7, v8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10001BE60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 120);
  char v12 = *(unsigned char *)(a1 + 129);
  uint64_t v20 = *(void *)(a1 + 160);
  uint64_t v21 = *(void *)(a1 + 152);
  uint64_t v19 = *(void *)(a1 + 168);
  uint64_t v17 = *(void *)(a1 + 184);
  uint64_t v18 = *(void *)(a1 + 176);
  uint64_t v15 = *(void *)(a1 + 200);
  uint64_t v16 = *(void *)(a1 + 192);
  long long v13 = *(_OWORD *)(a1 + 216);
  uint64_t v11 = *(void *)(a1 + 232);
  char v7 = *(unsigned char *)(a1 + 240);
  char v8 = *(unsigned char *)(a1 + 241);
  uint64_t v14 = *(void *)(a1 + 208);
  char v9 = *(unsigned char *)(a1 + 128);
  sub_10000274C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64), *(unsigned char *)(a1 + 65));
  swift_bridgeObjectRelease();
  sub_100002814(v2, v3, v4, v5, v6, v9, v12);
  swift_bridgeObjectRelease();
  sub_100015B8C(v21, v20, v19, v18, v17, v16, v15, v14, v13, *((uint64_t *)&v13 + 1), v11, v7, v8);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_10001BFAC()
{
  unint64_t result = qword_1000C4CD8;
  if (!qword_1000C4CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4CD8);
  }
  return result;
}

unint64_t sub_10001C000()
{
  unint64_t result = qword_1000C4CE8;
  if (!qword_1000C4CE8)
  {
    sub_1000046A8(&qword_1000C4CE0);
    sub_10001C07C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4CE8);
  }
  return result;
}

unint64_t sub_10001C07C()
{
  unint64_t result = qword_1000C4CF0;
  if (!qword_1000C4CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4CF0);
  }
  return result;
}

uint64_t sub_10001C0D0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

unint64_t sub_10001C128()
{
  unint64_t result = qword_1000C4D18;
  if (!qword_1000C4D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4D18);
  }
  return result;
}

unint64_t sub_10001C17C()
{
  unint64_t result = qword_1000C4D20;
  if (!qword_1000C4D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4D20);
  }
  return result;
}

uint64_t sub_10001C1D0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001C208()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t *sub_10001C240@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001B860(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_10001C260()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10001C298()
{
  unint64_t result = qword_1000C4D30;
  if (!qword_1000C4D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4D30);
  }
  return result;
}

unint64_t sub_10001C2EC(Swift::String string)
{
  object = string._object;
  v2._char countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000B9FD0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

uint64_t sub_10001C338(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6580592 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10001C470(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7A69536C61746F74 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65737365636F7270 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10001C574(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001000A7890 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001000A7FC0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_10001C6C0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v86 = a2;
  uint64_t v3 = sub_100003DD0(&qword_1000C4D38);
  uint64_t v87 = *(void *)(v3 - 8);
  uint64_t v88 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = (char *)ArgumentVisibility.default.unsafeMutableAddressor();
  char v7 = *v6;
  unint64_t v8 = sub_10000474C();
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, v7, (uint64_t)&type metadata for UniversalOptions, v8, (uint64_t)&v147);
  uint64_t v119 = v147;
  uint64_t v120 = v148;
  uint64_t v121 = v149;
  uint64_t v122 = v150;
  uint64_t v123 = v151;
  uint64_t v124 = v152;
  uint64_t v125 = v153;
  uint64_t v126 = v154;
  int v186 = v155;
  char v9 = BYTE1(v155);
  int v118 = BYTE2(v155);
  int v116 = BYTE3(v155);
  uint64_t v117 = v156;
  uint64_t v127 = v157;
  char v190 = BYTE1(v155);
  char v10 = *v6;
  unint64_t v11 = sub_1000047A0();
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, v10, (uint64_t)&type metadata for BacktraceOptions, v11, (uint64_t)&v147);
  uint64_t v106 = v147;
  uint64_t v107 = v148;
  uint64_t v108 = v149;
  uint64_t v109 = v150;
  uint64_t v110 = v151;
  LODWORD(v111) = v152;
  int v12 = BYTE1(v152);
  int v115 = BYTE2(v152);
  int v113 = BYTE3(v152);
  uint64_t v114 = v153;
  uint64_t v112 = v154;
  char v189 = BYTE1(v152);
  LOBYTE(v6) = *v6;
  unint64_t v13 = sub_10001C298();
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, (char)v6, (uint64_t)&type metadata for GenericMetadataOptions, v13, (uint64_t)&v147);
  uint64_t v98 = v147;
  uint64_t v99 = v148;
  uint64_t v100 = v149;
  uint64_t v101 = v150;
  uint64_t v102 = v151;
  uint64_t v103 = v152;
  uint64_t v104 = v153;
  uint64_t v105 = v154;
  uint64_t v96 = v156;
  uint64_t v97 = v155;
  uint64_t v95 = v157;
  int v94 = v158;
  int v14 = BYTE1(v158);
  LODWORD(v91) = BYTE2(v158);
  LODWORD(v90) = BYTE3(v158);
  uint64_t v89 = v159;
  uint64_t v92 = v160;
  uint64_t v93 = a1;
  char v188 = BYTE1(v158);
  sub_100005090(a1, a1[3]);
  sub_10001D320();
  uint64_t v15 = v128;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v128 = v15;
  if (!v15)
  {
    LODWORD(v85) = v12;
    int v82 = v14;
    sub_100003DD0(&qword_1000C4740);
    LOBYTE(v129[0]) = 0;
    sub_100005178((unint64_t *)&qword_1000C4798, &qword_1000C4740);
    uint64_t v16 = v5;
    uint64_t v17 = v128;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v128 = v17;
    if (v17)
    {
      (*(void (**)(char *, uint64_t))(v87 + 8))(v5, v88);
    }
    else
    {
      int v18 = BYTE1(v155);
      int v118 = BYTE2(v155);
      int v116 = BYTE3(v155);
      uint64_t v117 = v156;
      uint64_t v19 = v157;
      int v20 = v155;
      uint64_t v83 = v147;
      uint64_t v84 = v148;
      uint64_t v80 = v150;
      uint64_t v81 = v149;
      uint64_t v77 = v152;
      uint64_t v78 = v151;
      uint64_t v21 = v153;
      uint64_t v22 = v154;
      sub_100002594(v147, v148, v149, v150, v151, v152, v153, v154, v155, SBYTE1(v155));
      uint64_t v79 = v19;
      swift_bridgeObjectRetain();
      sub_10000274C(v119, v120, v121, v122, v123, v124, v125, v126, v186, v9);
      swift_bridgeObjectRelease();
      char v190 = v18;
      sub_100003DD0(&qword_1000C4748);
      LOBYTE(v129[0]) = 1;
      sub_100005178(&qword_1000C47A0, &qword_1000C4748);
      uint64_t v23 = v128;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v128 = v23;
      if (v23)
      {
        (*(void (**)(char *, uint64_t))(v87 + 8))(v16, v88);
        char v70 = v18;
        uint64_t v25 = v80;
        uint64_t v24 = v81;
        uint64_t v27 = v77;
        uint64_t v26 = v78;
        sub_10000274C(v83, v84, v81, v80, v78, v77, v21, v22, v20, v70);
        uint64_t v28 = v79;
        swift_bridgeObjectRelease();
        uint64_t v127 = v28;
        int v186 = v20;
        uint64_t v125 = v21;
        uint64_t v126 = v22;
        uint64_t v123 = v26;
        uint64_t v124 = v27;
        uint64_t v121 = v24;
        uint64_t v122 = v25;
      }
      else
      {
        LODWORD(v119) = v18;
        int v186 = v20;
        uint64_t v120 = v22;
        uint64_t v76 = v21;
        uint64_t v29 = v83;
        uint64_t v30 = v84;
        int v31 = BYTE1(v152);
        int v115 = BYTE2(v152);
        int v113 = BYTE3(v152);
        uint64_t v114 = v153;
        uint64_t v32 = v154;
        uint64_t v122 = v147;
        uint64_t v126 = v149;
        uint64_t v127 = v148;
        uint64_t v124 = v151;
        uint64_t v125 = v150;
        LODWORD(v123) = v152;
        sub_10000265C(v147, v148, v149, v150, v151, v152, SBYTE1(v152));
        uint64_t v121 = v32;
        swift_bridgeObjectRetain();
        sub_100002814(v106, v107, v108, v109, v110, v111, v85);
        swift_bridgeObjectRelease();
        char v189 = v31;
        sub_100003DD0(&qword_1000C4CC0);
        char v187 = 2;
        sub_100005178(&qword_1000C4D48, &qword_1000C4CC0);
        uint64_t v33 = v128;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v128 = v33;
        if (!v33)
        {
          (*(void (**)(char *, uint64_t))(v87 + 8))(v16, v88);
          uint64_t v85 = v131;
          uint64_t v87 = v133;
          uint64_t v88 = v132;
          uint64_t v52 = v134;
          uint64_t v53 = v135;
          uint64_t v111 = v137;
          uint64_t v112 = v136;
          uint64_t v89 = v138;
          uint64_t v90 = v139;
          uint64_t v91 = v140;
          LODWORD(v106) = v141;
          int v54 = v142;
          LODWORD(v110) = v143;
          LODWORD(v109) = v144;
          uint64_t v108 = v145;
          uint64_t v55 = v146;
          uint64_t v56 = v130;
          uint64_t v107 = v130;
          uint64_t v74 = v135;
          uint64_t v75 = v134;
          sub_1000159F0(v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142);
          swift_bridgeObjectRetain();
          sub_100015B8C(v98, v99, v100, v101, v102, v103, v104, v105, v97, v96, v95, v94, v82);
          swift_bridgeObjectRelease();
          char v57 = v54;
          int v72 = v54;
          char v188 = v54;
          v129[0] = v29;
          v129[1] = v30;
          v129[2] = v81;
          v129[3] = v80;
          v129[4] = v78;
          v129[5] = v77;
          v129[6] = v76;
          v129[7] = v120;
          LOBYTE(v129[8]) = v186;
          BYTE1(v129[8]) = v119;
          BYTE2(v129[8]) = v118;
          BYTE3(v129[8]) = v116;
          v129[9] = v117;
          v129[10] = v79;
          v129[11] = v122;
          v129[12] = v127;
          v129[13] = v126;
          v129[14] = v125;
          v129[15] = v124;
          LOBYTE(v129[16]) = v123;
          BYTE1(v129[16]) = v31;
          BYTE2(v129[16]) = v115;
          BYTE3(v129[16]) = v113;
          v129[17] = v114;
          v129[18] = v121;
          v129[19] = v56;
          uint64_t v58 = v85;
          v129[20] = v85;
          LOBYTE(v54) = v88;
          LOBYTE(v56) = v89;
          v129[21] = v88;
          LODWORD(v105) = v31;
          uint64_t v59 = v87;
          v129[22] = v87;
          v129[23] = v52;
          v129[24] = v53;
          v129[25] = v112;
          v129[26] = v111;
          v129[27] = v89;
          uint64_t v61 = v90;
          uint64_t v60 = v91;
          v129[28] = v90;
          v129[29] = v91;
          LOBYTE(v52) = v106;
          LOBYTE(v129[30]) = v106;
          BYTE1(v129[30]) = v57;
          BYTE2(v129[30]) = v110;
          BYTE3(v129[30]) = v109;
          v129[31] = v108;
          uint64_t v73 = v55;
          v129[32] = v55;
          sub_10001BD14((uint64_t)v129);
          sub_100015B8C(v107, v58, v54, v59, v75, v74, v112, v111, v56, v61, v60, v52, v72);
          swift_bridgeObjectRelease();
          sub_100002814(v122, v127, v126, v125, v124, v123, v105);
          swift_bridgeObjectRelease();
          uint64_t v63 = v83;
          uint64_t v62 = v84;
          uint64_t v65 = v80;
          uint64_t v64 = v81;
          uint64_t v67 = v77;
          uint64_t v66 = v78;
          uint64_t v68 = v76;
          uint64_t v69 = v120;
          sub_10000274C(v83, v84, v81, v80, v78, v77, v76, v120, v186, v119);
          swift_bridgeObjectRelease();
          sub_100005128((uint64_t)v93);
          uint64_t v147 = v63;
          uint64_t v148 = v62;
          uint64_t v149 = v64;
          uint64_t v150 = v65;
          uint64_t v151 = v66;
          uint64_t v152 = v67;
          uint64_t v153 = v68;
          uint64_t v154 = v69;
          LOBYTE(v155) = v186;
          BYTE1(v155) = v190;
          BYTE2(v155) = v118;
          BYTE3(v155) = v116;
          uint64_t v156 = v117;
          uint64_t v157 = v79;
          uint64_t v158 = v122;
          uint64_t v159 = v127;
          uint64_t v160 = v126;
          uint64_t v161 = v125;
          uint64_t v162 = v124;
          char v163 = v123;
          char v164 = v189;
          char v165 = v115;
          char v166 = v113;
          uint64_t v167 = v114;
          uint64_t v168 = v121;
          uint64_t v169 = v107;
          uint64_t v170 = v85;
          uint64_t v171 = v88;
          uint64_t v172 = v87;
          uint64_t v173 = v75;
          uint64_t v174 = v74;
          uint64_t v175 = v112;
          uint64_t v176 = v111;
          uint64_t v177 = v89;
          uint64_t v178 = v90;
          uint64_t v179 = v91;
          char v180 = v106;
          char v181 = v188;
          char v182 = v110;
          char v183 = v109;
          uint64_t v184 = v108;
          uint64_t v185 = v73;
          sub_10001BE60((uint64_t)&v147);
          return memcpy(v86, v129, 0x108uLL);
        }
        (*(void (**)(char *, uint64_t))(v87 + 8))(v16, v88);
        uint64_t v34 = v122;
        sub_100002814(v122, v127, v126, v125, v124, v123, v31);
        uint64_t v35 = v121;
        swift_bridgeObjectRelease();
        int v36 = v186;
        uint64_t v37 = v29;
        uint64_t v38 = v30;
        uint64_t v40 = v77;
        uint64_t v39 = v78;
        uint64_t v41 = v76;
        uint64_t v42 = v120;
        sub_10000274C(v37, v38, v81, v80, v78, v77, v76, v120, v186, v119);
        uint64_t v43 = v79;
        swift_bridgeObjectRelease();
        uint64_t v112 = v35;
        LODWORD(v111) = v123;
        uint64_t v109 = v125;
        uint64_t v110 = v124;
        uint64_t v107 = v127;
        uint64_t v108 = v126;
        uint64_t v106 = v34;
        uint64_t v127 = v43;
        int v186 = v36;
        uint64_t v125 = v41;
        uint64_t v126 = v42;
        uint64_t v123 = v39;
        uint64_t v124 = v40;
        uint64_t v121 = v81;
        uint64_t v122 = v80;
      }
      uint64_t v119 = v83;
      uint64_t v120 = v84;
    }
  }
  uint64_t v44 = v92;
  char v45 = v118;
  uint64_t v46 = v117;
  char v47 = v116;
  char v48 = v115;
  uint64_t v49 = v114;
  char v50 = v113;
  sub_100005128((uint64_t)v93);
  uint64_t v147 = v119;
  uint64_t v148 = v120;
  uint64_t v149 = v121;
  uint64_t v150 = v122;
  uint64_t v151 = v123;
  uint64_t v152 = v124;
  uint64_t v153 = v125;
  uint64_t v154 = v126;
  LOBYTE(v155) = v186;
  BYTE1(v155) = v190;
  BYTE2(v155) = v45;
  BYTE3(v155) = v47;
  uint64_t v156 = v46;
  uint64_t v157 = v127;
  uint64_t v158 = v106;
  uint64_t v159 = v107;
  uint64_t v160 = v108;
  uint64_t v161 = v109;
  uint64_t v162 = v110;
  char v163 = v111;
  char v164 = v189;
  char v165 = v48;
  char v166 = v50;
  uint64_t v167 = v49;
  uint64_t v168 = v112;
  uint64_t v169 = v98;
  uint64_t v170 = v99;
  uint64_t v171 = v100;
  uint64_t v172 = v101;
  uint64_t v173 = v102;
  uint64_t v174 = v103;
  uint64_t v175 = v104;
  uint64_t v176 = v105;
  uint64_t v177 = v97;
  uint64_t v178 = v96;
  uint64_t v179 = v95;
  char v180 = v94;
  char v181 = v188;
  char v182 = v91;
  char v183 = v90;
  uint64_t v184 = v89;
  uint64_t v185 = v44;
  return (void *)sub_10001BE60((uint64_t)&v147);
}

unint64_t sub_10001D320()
{
  unint64_t result = qword_1000C4D40;
  if (!qword_1000C4D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4D40);
  }
  return result;
}

ValueMetadata *type metadata accessor for DumpGenericMetadata.CodingKeys()
{
  return &type metadata for DumpGenericMetadata.CodingKeys;
}

uint64_t destroy for Metadata()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Metadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Metadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for Metadata(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for Metadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Metadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Metadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Metadata()
{
  return &type metadata for Metadata;
}

ValueMetadata *type metadata accessor for Output()
{
  return &type metadata for Output;
}

ValueMetadata *type metadata accessor for MetadataSummary()
{
  return &type metadata for MetadataSummary;
}

uint64_t destroy for ProcessMetadata()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ProcessMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ProcessMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ProcessMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ProcessMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProcessMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProcessMetadata()
{
  return &type metadata for ProcessMetadata;
}

unint64_t sub_10001D7F8()
{
  unint64_t result = qword_1000C4D50;
  if (!qword_1000C4D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4D50);
  }
  return result;
}

unint64_t sub_10001D850()
{
  unint64_t result = qword_1000C4D58;
  if (!qword_1000C4D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4D58);
  }
  return result;
}

unint64_t sub_10001D8A8()
{
  unint64_t result = qword_1000C4D60;
  if (!qword_1000C4D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4D60);
  }
  return result;
}

unint64_t sub_10001D8FC()
{
  unint64_t result = qword_1000C4D70;
  if (!qword_1000C4D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4D70);
  }
  return result;
}

uint64_t sub_10001D950(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000046A8(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001D9C8()
{
  unint64_t result = qword_1000C4D88;
  if (!qword_1000C4D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4D88);
  }
  return result;
}

unint64_t sub_10001DA1C()
{
  unint64_t result = qword_1000C4D98;
  if (!qword_1000C4D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4D98);
  }
  return result;
}

unint64_t sub_10001DA70()
{
  unint64_t result = qword_1000C4DA8;
  if (!qword_1000C4DA8)
  {
    sub_1000046A8(&qword_1000C4DA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4DA8);
  }
  return result;
}

uint64_t sub_10001DADC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10001C0D0(a1, a2);
  }
  return a1;
}

unint64_t sub_10001DAF0()
{
  unint64_t result = qword_1000C4DB8;
  if (!qword_1000C4DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4DB8);
  }
  return result;
}

uint64_t sub_10001DB44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003DD0(&qword_1000C4DC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001DBAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ArgumentDefinition.ParsingStrategy(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Metadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001DD50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Metadata.CodingKeys()
{
  return &type metadata for Metadata.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for MetadataSummary.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001DE54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MetadataSummary.CodingKeys()
{
  return &type metadata for MetadataSummary.CodingKeys;
}

unsigned char *_s13swift_inspect19DumpGenericMetadataV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001DF58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProcessMetadata.CodingKeys()
{
  return &type metadata for ProcessMetadata.CodingKeys;
}

unint64_t sub_10001DF94()
{
  unint64_t result = qword_1000C4DD0;
  if (!qword_1000C4DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4DD0);
  }
  return result;
}

unint64_t sub_10001DFEC()
{
  unint64_t result = qword_1000C4DD8;
  if (!qword_1000C4DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4DD8);
  }
  return result;
}

unint64_t sub_10001E044()
{
  unint64_t result = qword_1000C4DE0;
  if (!qword_1000C4DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4DE0);
  }
  return result;
}

unint64_t sub_10001E09C()
{
  unint64_t result = qword_1000C4DE8;
  if (!qword_1000C4DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4DE8);
  }
  return result;
}

unint64_t sub_10001E0F4()
{
  unint64_t result = qword_1000C4DF0;
  if (!qword_1000C4DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4DF0);
  }
  return result;
}

unint64_t sub_10001E14C()
{
  unint64_t result = qword_1000C4DF8;
  if (!qword_1000C4DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4DF8);
  }
  return result;
}

unint64_t sub_10001E1A4()
{
  unint64_t result = qword_1000C4E00;
  if (!qword_1000C4E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4E00);
  }
  return result;
}

unint64_t sub_10001E1FC()
{
  unint64_t result = qword_1000C4E08;
  if (!qword_1000C4E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4E08);
  }
  return result;
}

unint64_t sub_10001E254()
{
  unint64_t result = qword_1000C4E10;
  if (!qword_1000C4E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4E10);
  }
  return result;
}

char *sub_10001E2A8(uint64_t a1)
{
  if (qword_1000C46F0 != -1) {
    swift_once();
  }
  mach_error_t v2 = off_1000C64A8(a1);
  if (!v2) {
    return (char *)(v2 == 0);
  }
  sub_100003DD0(&qword_1000C4758);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000A2660;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  unint64_t result = mach_error_string(v2);
  if (result)
  {
    uint64_t v5 = String.init(cString:)();
    BOOL v7 = v6;
    sub_100012F40();
    uint64_t v8 = String.init<A>(_:radix:uppercase:)();
    char v10 = v9;
    v11._char countAndFlagsBits = 2016421920;
    v11._object = (void *)0xE400000000000000;
    String.append(_:)(v11);
    v12._char countAndFlagsBits = v8;
    v12._object = v10;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._char countAndFlagsBits = 41;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14._char countAndFlagsBits = v5;
    v14._object = v7;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 32) = 0xD00000000000001BLL;
    *(void *)(v3 + 40) = 0x80000001000A8260;
    if (qword_1000C4660 != -1) {
      swift_once();
    }
    swift_beginAccess();
    sub_10000A900();
    print<A>(_:separator:terminator:to:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    return (char *)(v2 == 0);
  }
  __break(1u);
  return result;
}

void *sub_10001E4CC(int a1)
{
  return sub_10001E4F4(a1, "/System/Library/PrivateFrameworks/Symbolication.framework/Symbolication", &qword_1000C4E18);
}

void *sub_10001E4E0(int a1)
{
  return sub_10001E4F4(a1, "/System/Library/PrivateFrameworks/CoreSymbolication.framework/CoreSymbolication", &qword_1000C4E20);
}

void *sub_10001E4F4(int a1, char *__path, void *a3)
{
  unint64_t result = dlopen(__path, 1);
  if (result) {
    *a3 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001E52C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = String.utf8CString.getter();
  BOOL v7 = dlsym(a1, (const char *)(v6 + 32));
  swift_release();
  if (v7) {
    return (uint64_t)v7;
  }
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  v9._char countAndFlagsBits = a2;
  v9._object = a3;
  String.append(_:)(v9);
  v10._object = (void *)0x80000001000A8030;
  v10._char countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v10);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10001E638()
{
  if (qword_1000C4678 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E18, 0x486D6F7246646970, (void *)0xEB00000000746E69);
  off_1000C6440 = result;
  return result;
}

void *sub_10001E6AC()
{
  if (qword_1000C4680 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E20, 0x7361656C65525343, (void *)0xE900000000000065);
  off_1000C6448 = result;
  return result;
}

void *sub_10001E71C()
{
  if (qword_1000C4680 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E20, 0xD00000000000001CLL, (void *)0x80000001000A82D0);
  off_1000C6450 = result;
  return result;
}

void *sub_10001E78C()
{
  if (qword_1000C4680 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E20, 0xD00000000000002ALL, (void *)0x80000001000A82A0);
  off_1000C6458 = result;
  return result;
}

void *sub_10001E7FC()
{
  if (qword_1000C4680 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E20, 0xD000000000000025, (void *)0x80000001000A8210);
  off_1000C6460 = result;
  return result;
}

void *sub_10001E86C()
{
  if (qword_1000C4680 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E20, 0x6C6F626D79535343, (void *)0xEF656D614E746547);
  off_1000C6468 = result;
  return result;
}

void *sub_10001E8E4()
{
  if (qword_1000C4680 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E20, 0xD000000000000016, (void *)0x80000001000A8110);
  off_1000C6470 = result;
  return result;
}

void *sub_10001E954()
{
  if (qword_1000C4680 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E20, 0xD000000000000010, (void *)0x80000001000A81F0);
  off_1000C6478 = result;
  return result;
}

void *sub_10001E9C4()
{
  if (qword_1000C4680 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E20, 0xD000000000000014, (void *)0x80000001000A80F0);
  off_1000C6480 = result;
  return result;
}

void *sub_10001EA34()
{
  if (qword_1000C4680 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E20, 0xD000000000000028, (void *)0x80000001000A8130);
  off_1000C6488 = result;
  return result;
}

void *sub_10001EAA4()
{
  if (qword_1000C4680 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E20, 0xD000000000000026, (void *)0x80000001000A81A0);
  off_1000C6490 = result;
  return result;
}

void *sub_10001EB14()
{
  if (qword_1000C4678 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E18, 0xD00000000000001BLL, (void *)0x80000001000A81D0);
  off_1000C6498 = result;
  return result;
}

void *sub_10001EB84()
{
  if (qword_1000C4680 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E20, 0x6C6C754E73495343, (void *)0xE800000000000000);
  off_1000C64A0 = result;
  return result;
}

void *sub_10001EBF0()
{
  if (qword_1000C4678 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E18, 0xD000000000000012, (void *)0x80000001000A8280);
  off_1000C64A8 = result;
  return result;
}

void *sub_10001EC60()
{
  if (qword_1000C4678 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E18, 0x6565705F6B736174, (void *)0xE90000000000006BLL);
  off_1000C64B0 = result;
  return result;
}

void *sub_10001ECD0()
{
  if (qword_1000C4678 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E18, 0xD000000000000010, (void *)0x80000001000A8240);
  off_1000C64B8 = result;
  return result;
}

void *sub_10001ED40()
{
  if (qword_1000C4678 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E18, 0xD000000000000011, (void *)0x80000001000A8180);
  off_1000C64C0 = result;
  return result;
}

void *sub_10001EDB0()
{
  if (qword_1000C4678 != -1) {
    swift_once();
  }
  uint64_t result = (void *)sub_10001E52C((void *)qword_1000C4E18, 0xD00000000000001CLL, (void *)0x80000001000A8160);
  off_1000C64C8 = result;
  return result;
}

uint64_t sub_10001EE20(void *a1, void *a2, uint64_t (*a3)(void, void))
{
  return a3(*a1, *a2);
}

uint64_t sub_10001EE50@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4 = v2[1];
  unint64_t v5 = *(void *)(*v2 + 16);
  if (v4 == v5)
  {
    sub_10002B918((uint64_t)&v19);
    return sub_10002B998((uint64_t)&v19, a2, &qword_1000C5020);
  }
  if (v4 >= v5)
  {
    __break(1u);
    goto LABEL_8;
  }
  BOOL v7 = (_OWORD *)(*v2 + (v4 << 7));
  long long v8 = v7[2];
  long long v9 = v7[3];
  long long v10 = v7[5];
  long long v21 = v7[4];
  long long v22 = v10;
  long long v19 = v8;
  long long v20 = v9;
  long long v11 = v7[6];
  long long v12 = v7[7];
  long long v13 = v7[8];
  *(_OWORD *)&v25[9] = *(_OWORD *)((char *)v7 + 137);
  long long v24 = v12;
  *(_OWORD *)uint64_t v25 = v13;
  long long v23 = v11;
  v2[1] = v4 + 1;
  uint64_t v14 = v2[2];
  if (__OFADD__(v14, 1))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  long long v15 = v24;
  *(_OWORD *)(a2 + 72) = v23;
  *(_OWORD *)(a2 + 88) = v15;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v25;
  *(_OWORD *)(a2 + 113) = *(_OWORD *)&v25[9];
  long long v16 = v20;
  *(_OWORD *)(a2 + 8) = v19;
  *(_OWORD *)(a2 + 24) = v16;
  long long v17 = v22;
  *(_OWORD *)(a2 + 40) = v21;
  v2[2] = v14 + 1;
  *(void *)a2 = v14;
  *(_OWORD *)(a2 + 56) = v17;
  uint64_t v18 = a2;
  String.init(argument:)(*(Swift::String *)(&a1 - 1));
  return sub_10002B8E0((uint64_t)&v19);
}

uint64_t sub_10001EF40(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

int8x16_t sub_10001EF68(int8x16_t *a1, int8x16_t result)
{
  int64_t v3 = a1[1].i64[0];
  if (v3)
  {
    sub_100027F7C(0, v3, 0);
    unint64_t v4 = _swiftEmptyArrayStorage;
    unint64_t v5 = a1 + 2;
    do
    {
      int8x16_t v6 = *v5;
      long long v10 = v4;
      unint64_t v8 = v4[2];
      unint64_t v7 = v4[3];
      if (v8 >= v7 >> 1)
      {
        int8x16_t v9 = *v5;
        sub_100027F7C((char *)(v7 > 1), v8 + 1, 1);
        int8x16_t v6 = v9;
        unint64_t v4 = v10;
      }
      v4[2] = v8 + 1;
      uint64_t result = vextq_s8(v6, v6, 8uLL);
      *(int8x16_t *)&v4[2 * v8 + 4] = result;
      ++v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_10001F038(uint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) == 0) {
    return a2;
  }
  __break(1u);
  return result;
}

void (*sub_10001F068(void *a1, uint64_t a2))(void *a1)
{
  unint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  _OWORD v4[4] = sub_10002870C(v4, a2);
  return sub_10001F0C8;
}

void sub_10001F0C8(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

double sub_10001F114()
{
  CommandConfiguration.init(commandName:abstract:usage:discussion:version:shouldDisplay:subcommands:defaultSubcommand:helpNames:)(0, 0, 0xD000000000000039, 0x80000001000A8800, 0, 0, 0, 0xE000000000000000, (uint64_t)&v1, 0, 0xE000000000000000, 1, (__n128)(unint64_t)_swiftEmptyArrayStorage, 0, 0);
  xmmword_1000C6530 = v7;
  unk_1000C6540 = v8;
  qword_1000C6550 = v9;
  xmmword_1000C64F0 = v3;
  unk_1000C6500 = v4;
  xmmword_1000C6510 = v5;
  unk_1000C6520 = v6;
  double result = *(double *)&v2;
  xmmword_1000C64D0 = v1;
  unk_1000C64E0 = v2;
  return result;
}

uint64_t sub_10001F1C8(uint64_t a1)
{
  unint64_t v2 = sub_10002C210();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F204(uint64_t a1)
{
  unint64_t v2 = sub_10002C210();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F240@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000C4718 != -1) {
    swift_once();
  }

  return sub_1000046F0((uint64_t)&xmmword_1000C64D0, a1);
}

uint64_t sub_10001F2AC()
{
  uint64_t v0 = sub_100003DD0(&qword_1000C4740);
  OptionGroup.wrappedValue.getter(v0, (uint64_t)&v10);
  uint64_t v1 = v10;
  uint64_t v2 = v11;
  char v3 = v12;
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  char v6 = v15;
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  int v19 = v18;
  sub_10000B5E4(v10, v11, v12, v13, v14, v15);
  sub_1000027F4(v1, v2, v3);
  sub_100002804(v4, v5, v6);
  return sub_100002804(v7, v8, v19);
}

double sub_10001F3B8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10002BDD0(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

void *sub_10001F414(uint64_t a1)
{
  uint64_t v2 = v1[8];
  if (v2)
  {
    char v3 = (void *)v1[8];
  }
  else
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    uint64_t v17 = _swiftEmptyArrayStorage;
    unsigned __int8 v18 = _swiftEmptyArrayStorage;
    uint64_t v4 = v1[3];
    __chkstk_darwin(a1);
    v14[2] = v1;
    v14[3] = &v16;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = sub_10002BB80;
    *(void *)(v5 + 24) = v14;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = sub_10002BB98;
    *(void *)(v6 + 24) = v5;
    v15[0] = sub_10002BBF8;
    v15[1] = v6;
    uint64_t v7 = *(unsigned int *)(v4 + 16);
    uint64_t v8 = qword_1000C4710;
    swift_retain();
    if (v8 != -1) {
      swift_once();
    }
    off_1000C64C8(v7, v15, 1, sub_10001130C);
    swift_release();
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
    char v3 = v16;
    uint64_t v10 = v17;
    unint64_t v11 = v18;
    uint64_t v12 = v1[8];
    v1[8] = v16;
    v1[9] = v10;
    v1[10] = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10002BC28(v12);
  }
  sub_10002BC74(v2);
  return v3;
}

void *sub_10001F64C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 88);
  if (!v2)
  {
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t v4 = sub_1000106D4();
    uint64_t v5 = *((void *)v4 + 2);
    if (v5)
    {
      uint64_t v23 = v1;
      swift_retain();
      uint64_t v6 = (unint64_t *)(v4 + 40);
      uint64_t v7 = (char *)_swiftEmptyArrayStorage;
      do
      {
        unint64_t v9 = *v6;
        if (*v6)
        {
          unint64_t v10 = v9 + 824;
          if (v9 >= 0xFFFFFFFFFFFFFCC8) {
            __break(1u);
          }
          uint64_t v11 = *(v6 - 1);
          uint64_t v12 = *(unsigned int *)(v3 + 16);
          uint64_t v25 = 0;
          if (qword_1000C46F8 != -1) {
            swift_once();
          }
          if (!off_1000C64B0(v12, v10, 8, &v25) && v25)
          {
            uint64_t v13 = *v25;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v7 = sub_100011CF0(0, *((void *)v7 + 2) + 1, 1, v7);
            }
            unint64_t v15 = *((void *)v7 + 2);
            unint64_t v14 = *((void *)v7 + 3);
            if (v15 >= v14 >> 1) {
              uint64_t v7 = sub_100011CF0((char *)(v14 > 1), v15 + 1, 1, v7);
            }
            *((void *)v7 + 2) = v15 + 1;
            uint64_t v8 = &v7[16 * v15];
            *((void *)v8 + 4) = v11;
            *((void *)v8 + 5) = v13;
          }
        }
        v6 += 3;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v1 = v23;
      uint64_t v16 = *((void *)v7 + 2);
      if (v16) {
        goto LABEL_18;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v7 = (char *)_swiftEmptyArrayStorage;
      uint64_t v16 = _swiftEmptyArrayStorage[2];
      if (v16)
      {
LABEL_18:
        uint64_t v17 = v7 + 32;
        uint64_t v2 = _swiftEmptyArrayStorage;
        do
        {
          if (*((void *)v17 + 1))
          {
            long long v24 = *(_OWORD *)v17;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v25 = v2;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_100027F14(0, v2[2] + 1, 1);
              uint64_t v2 = v25;
            }
            unint64_t v19 = v2[2];
            unint64_t v18 = v2[3];
            long long v20 = v24;
            if (v19 >= v18 >> 1)
            {
              sub_100027F14((char *)(v18 > 1), v19 + 1, 1);
              long long v20 = v24;
              uint64_t v2 = v25;
            }
            v2[2] = v19 + 1;
            *(_OWORD *)&v2[2 * v19 + 4] = v20;
          }
          v17 += 16;
          --v16;
        }
        while (v16);
        goto LABEL_28;
      }
    }
    uint64_t v2 = _swiftEmptyArrayStorage;
LABEL_28:
    swift_bridgeObjectRelease();
    *(void *)(v1 + 88) = v2;
    swift_retain();
    swift_bridgeObjectRelease();
    return v2;
  }
  swift_bridgeObjectRetain();
  return v2;
}

unint64_t sub_10001F8F8()
{
  if (*(void *)(v0 + 96))
  {
    unint64_t v1 = *(void *)(v0 + 96);
  }
  else
  {
    unint64_t v1 = sub_10001FD1C();
    *(void *)(v0 + 96) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10001F954(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  *(void *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(void *)(v3 + 104) = sub_10002A50C((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v3 + 112) = sub_10002A5E4(_swiftEmptyArrayStorage);
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  swift_retain();
  uint64_t v6 = sub_1000107A4(0xD000000000000024, 0x80000001000A87A0);
  uint64_t v7 = *(unsigned int *)(a2 + 16);
  uint64_t v16 = 0;
  if (qword_1000C46F8 != -1) {
    swift_once();
  }
  uint64_t v8 = (unsigned int (*)(uint64_t, uint64_t, uint64_t, void **))off_1000C64B0;
  if (off_1000C64B0(v7, v6, 8, &v16))
  {
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v9 = v16;
    if (v16)
    {
      char v10 = 0;
      unint64_t v9 = (void *)*v16;
      goto LABEL_8;
    }
  }
  char v10 = 1;
LABEL_8:
  *(void *)(v3 + 32) = v9;
  *(unsigned char *)(v3 + 40) = v10;
  uint64_t v11 = sub_1000107A4(0xD00000000000002ALL, 0x80000001000A87D0);
  uint64_t v12 = *(unsigned int *)(a2 + 16);
  uint64_t v16 = 0;
  if (v8(v12, v11, 8, &v16) || !v16)
  {
    swift_release();
    uint64_t v13 = 0;
    char v14 = 1;
  }
  else
  {
    uint64_t v13 = *v16;
    swift_release();
    char v14 = 0;
  }
  *(void *)(v3 + 48) = v13;
  *(unsigned char *)(v3 + 56) = v14;
  return v3;
}

uint64_t sub_10001FB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = swift_reflection_metadataForObject();
  if ((*(unsigned char *)(a3 + 40) & 1) != 0 || v7 != *(void *)(a3 + 32))
  {
    if ((*(unsigned char *)(a3 + 56) & 1) != 0 || v7 != *(void *)(a3 + 48))
    {
      uint64_t result = sub_100020684(v7);
      if (result)
      {
        uint64_t v17 = a4[2];
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        a4[2] = v17;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100012590(0, *(void *)(v17 + 16) + 1, 1, (char *)v17);
          uint64_t v17 = result;
          a4[2] = result;
        }
        unint64_t v18 = *(void *)(v17 + 16);
        unint64_t v19 = *(void *)(v17 + 24);
        unint64_t v20 = v18 + 1;
        if (v18 >= v19 >> 1)
        {
          unint64_t v27 = v18 + 1;
          long long v21 = (char *)v17;
          unint64_t v22 = *(void *)(v17 + 16);
          uint64_t result = (uint64_t)sub_100012590((char *)(v19 > 1), v18 + 1, 1, v21);
          unint64_t v18 = v22;
          unint64_t v20 = v27;
          uint64_t v17 = result;
        }
        *(void *)(v17 + 16) = v20;
        *(void *)(v17 + 8 * v18 + 32) = a1;
        a4[2] = v17;
      }
    }
    else
    {
      uint64_t v13 = *a4;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *a4 = v13;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100012590(0, *(void *)(v13 + 16) + 1, 1, (char *)v13);
        uint64_t v13 = result;
        *a4 = result;
      }
      unint64_t v14 = *(void *)(v13 + 16);
      unint64_t v15 = *(void *)(v13 + 24);
      unint64_t v16 = v14 + 1;
      if (v14 >= v15 >> 1)
      {
        unint64_t v29 = v14 + 1;
        uint64_t v25 = (char *)v13;
        unint64_t v26 = *(void *)(v13 + 16);
        uint64_t result = (uint64_t)sub_100012590((char *)(v15 > 1), v14 + 1, 1, v25);
        unint64_t v14 = v26;
        unint64_t v16 = v29;
        uint64_t v13 = result;
      }
      *(void *)(v13 + 16) = v16;
      *(void *)(v13 + 8 * v14 + 32) = a1;
      *a4 = v13;
    }
  }
  else
  {
    uint64_t v8 = a4[1];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    a4[1] = v8;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100012590(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
      uint64_t v8 = result;
      a4[1] = result;
    }
    unint64_t v10 = *(void *)(v8 + 16);
    unint64_t v11 = *(void *)(v8 + 24);
    unint64_t v12 = v10 + 1;
    if (v10 >= v11 >> 1)
    {
      unint64_t v28 = v10 + 1;
      uint64_t v23 = (char *)v8;
      unint64_t v24 = *(void *)(v8 + 16);
      uint64_t result = (uint64_t)sub_100012590((char *)(v11 > 1), v10 + 1, 1, v23);
      unint64_t v10 = v24;
      unint64_t v12 = v28;
      uint64_t v8 = result;
    }
    *(void *)(v8 + 16) = v12;
    *(void *)(v8 + 8 * v10 + 32) = a1;
    a4[1] = v8;
  }
  return result;
}

unint64_t sub_10001FD1C()
{
  unint64_t v94 = sub_10002A6F4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v93 = &_swiftEmptySetSingleton;
  uint64_t v81 = v0;
  unint64_t v1 = sub_10001F414(v94);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = v1[2];
  if (v2)
  {
    uint64_t v3 = v1 + 4;
    do
    {
      uint64_t v4 = *v3++;
      sub_1000289AC((uint64_t *)&v100, v4);
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_10001F64C();
  int64_t v6 = v5[2];
  if (v6)
  {
    *(void *)&long long v100 = _swiftEmptyArrayStorage;
    sub_100027F3C(0, v6, 0);
    uint64_t v7 = (void *)v100;
    unint64_t v8 = *(void *)(v100 + 16);
    uint64_t v9 = 5;
    do
    {
      uint64_t v10 = v5[v9];
      *(void *)&long long v100 = v7;
      unint64_t v11 = v7[3];
      if (v8 >= v11 >> 1)
      {
        sub_100027F3C((char *)(v11 > 1), v8 + 1, 1);
        uint64_t v7 = (void *)v100;
      }
      _OWORD v7[2] = v8 + 1;
      v7[v8 + 4] = v10;
      v9 += 2;
      ++v8;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    uint64_t v12 = v7[2];
    if (v12) {
      goto LABEL_10;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v12 = _swiftEmptyArrayStorage[2];
    if (v12)
    {
LABEL_10:
      uint64_t v13 = v7 + 4;
      unint64_t v14 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v18 = *v13++;
        uint64_t v17 = v18;
        if (v18)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v100 = v14;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100027F3C(0, v14[2] + 1, 1);
            unint64_t v14 = (void *)v100;
          }
          unint64_t v16 = v14[2];
          unint64_t v15 = v14[3];
          if (v16 >= v15 >> 1)
          {
            sub_100027F3C((char *)(v15 > 1), v16 + 1, 1);
            unint64_t v14 = (void *)v100;
          }
          v14[2] = v16 + 1;
          v14[v16 + 4] = v17;
        }
        --v12;
      }
      while (v12);
      goto LABEL_20;
    }
  }
  unint64_t v14 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  uint64_t v20 = v14[2];
  if (v20)
  {
    long long v21 = v14 + 4;
    do
    {
      uint64_t v22 = *v21++;
      sub_1000289AC((uint64_t *)&v100, v22);
      --v20;
    }
    while (v20);
  }
  swift_release();
  uint64_t v23 = v93;
  if (*((void *)v93 + 2))
  {
    while (1)
    {
      unint64_t v24 = *((void *)v23 + 7);
      if (v24) {
        break;
      }
      uint64_t v59 = v23[32];
      unsigned int v60 = v59 & 0x3F;
      unint64_t v26 = 1 << v59;
      if (v60 < 7) {
        goto LABEL_30;
      }
      unint64_t v24 = *((void *)v23 + 8);
      if (v24)
      {
        uint64_t v25 = 1;
        goto LABEL_29;
      }
      if (v60 < 8) {
        goto LABEL_30;
      }
      unint64_t v24 = *((void *)v23 + 9);
      if (v24)
      {
        uint64_t v25 = 2;
        goto LABEL_29;
      }
      unint64_t v24 = *((void *)v23 + 10);
      if (v24)
      {
        uint64_t v25 = 3;
        goto LABEL_29;
      }
      uint64_t v61 = 0;
      unint64_t v62 = (v26 + 63) >> 6;
      if (v62 <= 4) {
        unint64_t v62 = 4;
      }
      unint64_t v63 = v62 - 4;
      while (v63 != v61)
      {
        unint64_t v24 = *(void *)&v23[8 * v61++ + 88];
        if (v24)
        {
          uint64_t v25 = v61 + 3;
          goto LABEL_29;
        }
      }
LABEL_30:
      int v27 = *((_DWORD *)v23 + 9);
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((v26 & 0x8000000000000000) != 0 || (uint64_t)v26 >= 1 << v23[32])
      {
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
        goto LABEL_101;
      }
      if (((*(void *)&v23[((v26 >> 3) & 0x1FFFFFFFFFFFFFF8) + 56] >> v26) & 1) == 0) {
        goto LABEL_98;
      }
      if (v27 != *((_DWORD *)v23 + 9)) {
        goto LABEL_99;
      }
      v92[0] = v23;
      if ((result & 1) == 0)
      {
        sub_100029480();
        uint64_t v23 = (unsigned char *)v92[0];
      }
      uint64_t v29 = *(void *)(*((void *)v23 + 6) + 8 * v26);
      sub_10002A1EC(v26);
      uint64_t v23 = (unsigned char *)v92[0];
      uint64_t v93 = (unsigned char *)v92[0];
      swift_bridgeObjectRelease();
      sub_10002076C(v29, (uint64_t)v95);
      uint64_t v31 = v95[0];
      uint64_t v30 = v95[1];
      uint64_t v33 = v95[2];
      unint64_t v32 = v95[3];
      uint64_t v34 = v95[4];
      uint64_t v87 = v95[6];
      uint64_t v89 = v95[5];
      uint64_t v86 = v95[7];
      uint64_t v35 = v95[10];
      uint64_t v84 = v95[9];
      uint64_t v85 = v95[8];
      uint64_t v36 = v95[11];
      uint64_t v83 = v95[12];
      char v82 = v96;
      sub_10002B998((uint64_t)v95, (uint64_t)v97, &qword_1000C5048);
      uint64_t v37 = v98;
      if (v98)
      {
        *(void *)&long long v100 = v31;
        *((void *)&v100 + 1) = v30;
        __int16 v101 = v33 & 0x101;
        char v102 = BYTE2(v33) & 1;
        char v103 = BYTE3(v33) & 1;
        int v104 = HIDWORD(v33);
        char v105 = v32 & 1;
        uint64x2_t v38 = (uint64x2_t)vdupq_n_s64(v32);
        int16x8_t v39 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_1000A3CA0), (int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_1000A3C90));
        *(int8x8_t *)v39.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v39), (int8x8_t)0x1000100010001);
        unsigned __int32 v106 = vmovn_s16(v39).u32[0];
        char v107 = BYTE5(v32) & 1;
        int v108 = v34;
        char v109 = BYTE4(v34) & 1;
        uint64_t v110 = v89;
        uint64_t v111 = v87;
        uint64_t v112 = v86;
        uint64_t v113 = v85;
        uint64_t v114 = v84;
        uint64_t v115 = v35;
        uint64_t v116 = v36;
        uint64_t v117 = v83;
        char v118 = v82 & 1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v40 = swift_isUniquelyReferenced_nonNull_native();
        v92[0] = v94;
        sub_1000262C4(&v100, v29, v40);
        unint64_t v41 = v94;
        swift_bridgeObjectRelease();
        uint64_t v99 = v37;
        sub_10002B9FC((uint64_t)&v99);
        unint64_t result = (unint64_t)sub_10002BA28(v95);
        uint64_t v88 = *(void *)(v37 + 16);
        if (v88)
        {
          unint64_t v42 = 0;
          uint64_t v90 = *(void *)(v81 + 48);
          char v43 = *(unsigned char *)(v81 + 56);
          while (1)
          {
            if (v42 >= *(void *)(v37 + 16))
            {
              __break(1u);
              goto LABEL_97;
            }
            uint64_t v45 = *(void *)(v37 + 32 + 8 * v42);
            if (swift_reflection_metadataForObject() == v90) {
              char v46 = 1;
            }
            else {
              char v46 = v43;
            }
            if ((v46 & 1) == 0)
            {
              sub_100003DD0(&qword_1000C4758);
              uint64_t v47 = swift_allocObject();
              *(_OWORD *)(v47 + 16) = xmmword_1000A2660;
              v92[0] = 0;
              v92[1] = 0xE000000000000000;
              _StringGuts.grow(_:)(65);
              v48._char countAndFlagsBits = 0xD000000000000027;
              v48._object = (void *)0x80000001000A8750;
              String.append(_:)(v48);
              v49._char countAndFlagsBits = 30768;
              v49._object = (void *)0xE200000000000000;
              String.append(_:)(v49);
              sub_100004614();
              v50._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
              String.append(_:)(v50);
              swift_bridgeObjectRelease();
              v51._char countAndFlagsBits = 0xD000000000000016;
              v51._object = (void *)0x80000001000A8780;
              String.append(_:)(v51);
              v52._char countAndFlagsBits = 30768;
              v52._object = (void *)0xE200000000000000;
              String.append(_:)(v52);
              v53._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
              String.append(_:)(v53);
              swift_bridgeObjectRelease();
              *(void *)(v47 + 56) = &type metadata for String;
              *(void *)(v47 + 32) = 0;
              *(void *)(v47 + 40) = 0xE000000000000000;
              print(_:separator:terminator:)();
              swift_bridgeObjectRelease();
              unint64_t v41 = v94;
            }
            if (!*(void *)(v41 + 16) || (unint64_t result = sub_100024794(v45), (v54 & 1) == 0))
            {
              unint64_t result = static Hasher._hash(seed:_:)();
              uint64_t v55 = -1 << v93[32];
              unint64_t v56 = result & ~v55;
              if ((*(void *)&v93[((v56 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v56))
              {
                uint64_t v57 = *((void *)v93 + 6);
                if (*(void *)(v57 + 8 * v56) == v45) {
                  goto LABEL_40;
                }
                uint64_t v58 = ~v55;
                while (1)
                {
                  unint64_t v56 = (v56 + 1) & v58;
                  if (((*(void *)&v93[((v56 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v56) & 1) == 0) {
                    break;
                  }
                  if (*(void *)(v57 + 8 * v56) == v45) {
                    goto LABEL_40;
                  }
                }
              }
              char v44 = swift_isUniquelyReferenced_nonNull_native();
              v92[0] = v93;
              sub_1000291A8(v45, v56, v44);
              unint64_t result = swift_bridgeObjectRelease();
            }
LABEL_40:
            if (++v42 == v88)
            {
              sub_10002BAD0((uint64_t)&v99);
              uint64_t v23 = v93;
              goto LABEL_26;
            }
          }
        }
        sub_10002BAD0((uint64_t)&v99);
      }
LABEL_26:
      if (!*((void *)v23 + 2)) {
        goto LABEL_70;
      }
    }
    uint64_t v25 = 0;
LABEL_29:
    unint64_t v26 = __clz(__rbit64(v24)) + (v25 << 6);
    goto LABEL_30;
  }
LABEL_70:
  swift_bridgeObjectRelease();
  unint64_t v64 = v94;
  unint64_t v91 = v94 + 64;
  uint64_t v65 = 1 << *(unsigned char *)(v94 + 32);
  uint64_t v66 = -1;
  if (v65 < 64) {
    uint64_t v66 = ~(-1 << v65);
  }
  unint64_t v67 = v66 & *(void *)(v94 + 64);
  int64_t v68 = (unint64_t)(v65 + 63) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v69 = 0;
  while (v67)
  {
    unint64_t v70 = __clz(__rbit64(v67));
    v67 &= v67 - 1;
    unint64_t v71 = v70 | (v69 << 6);
LABEL_90:
    uint64_t v75 = *(void *)(*(void *)(v64 + 56) + 112 * v71 + 80);
    uint64_t v76 = *(void *)(v75 + 16);
    if (v76)
    {
      uint64_t v77 = *(void *)(*(void *)(v64 + 48) + 8 * v71);
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v76; ++i)
      {
        uint64_t v80 = sub_10001F068(v92, *(void *)(v75 + 8 * i + 32));
        if (*(void *)(v79 + 80))
        {
          *(void *)(v79 + 96) = v77;
          *(unsigned char *)(v79 + 104) = 0;
        }
        ((void (*)(void *, void))v80)(v92, 0);
      }
      unint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v72 = v69 + 1;
  if (__OFADD__(v69, 1)) {
    goto LABEL_100;
  }
  if (v72 >= v68)
  {
LABEL_95:
    swift_release();
    return v94;
  }
  unint64_t v73 = *(void *)(v91 + 8 * v72);
  ++v69;
  if (v73) {
    goto LABEL_89;
  }
  int64_t v69 = v72 + 1;
  if (v72 + 1 >= v68) {
    goto LABEL_95;
  }
  unint64_t v73 = *(void *)(v91 + 8 * v69);
  if (v73) {
    goto LABEL_89;
  }
  int64_t v69 = v72 + 2;
  if (v72 + 2 >= v68) {
    goto LABEL_95;
  }
  unint64_t v73 = *(void *)(v91 + 8 * v69);
  if (v73)
  {
LABEL_89:
    unint64_t v67 = (v73 - 1) & v73;
    unint64_t v71 = __clz(__rbit64(v73)) + (v69 << 6);
    goto LABEL_90;
  }
  int64_t v74 = v72 + 3;
  if (v74 >= v68) {
    goto LABEL_95;
  }
  unint64_t v73 = *(void *)(v91 + 8 * v74);
  if (v73)
  {
    int64_t v69 = v74;
    goto LABEL_89;
  }
  while (1)
  {
    int64_t v69 = v74 + 1;
    if (__OFADD__(v74, 1)) {
      break;
    }
    if (v69 >= v68) {
      goto LABEL_95;
    }
    unint64_t v73 = *(void *)(v91 + 8 * v69);
    ++v74;
    if (v73) {
      goto LABEL_89;
    }
  }
LABEL_101:
  __break(1u);
  return result;
}

uint64_t sub_100020684(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 104);
  if (*(void *)(v4 + 16))
  {
    unint64_t v5 = sub_100024794(a1);
    if (v6) {
      return *(unsigned __int8 *)(*(void *)(v4 + 56) + v5);
    }
  }
  BOOL v7 = swift_reflection_metadataIsActor() != 0;
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *(void *)(v2 + 104);
  *(void *)(v2 + 104) = 0x8000000000000000;
  sub_100026448(v7, a1, isUniquelyReferenced_nonNull_native);
  *(void *)(v2 + 104) = v10;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v7;
}

uint64_t sub_10002076C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_reflection_asyncTaskInfo();
  if (!v44)
  {
    uint64_t v9 = v45;
    uint64_t v13 = v57;
    unint64_t v16 = sub_1000270D8(v59, v58);
    uint64_t v17 = sub_1000270D8(v61, v60);
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    if (v57)
    {
      do
      {
        uint64_t result = swift_reflection_asyncTaskSlabAllocations();
        BOOL v20 = __OFADD__(v14, v46);
        v14 += v46;
        if (v20)
        {
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        BOOL v20 = __OFADD__(v15, v47);
        v15 += v47;
        if (v20) {
          goto LABEL_37;
        }
      }
      while (v45);
      if (v54)
      {
        long long v21 = 0;
        long long v19 = v56;
        int v23 = v52;
        int v22 = v53;
        unsigned int v25 = v55;
        int v24 = BYTE1(v46);
        uint64_t result = v48;
        int v27 = v50;
        int v26 = v51;
        uint64_t v28 = v47;
        int v30 = HIBYTE(v46);
        int v29 = v49;
        uint64_t v31 = v46;
        int v32 = BYTE2(v46);
        goto LABEL_14;
      }
      long long v19 = v56;
      int v23 = v52;
      int v22 = v53;
      uint64_t result = v48;
      int v27 = v50;
      int v26 = v51;
      uint64_t v28 = v47;
      int v30 = HIBYTE(v46);
      int v29 = v49;
      uint64_t v31 = v46;
      int v24 = BYTE1(v46);
      int v32 = BYTE2(v46);
    }
    else
    {
      long long v21 = 0;
      long long v19 = v56;
      int v23 = v52;
      int v22 = v53;
      unsigned int v25 = v55;
      int v24 = BYTE1(v46);
      uint64_t result = v48;
      int v27 = v50;
      int v26 = v51;
      uint64_t v28 = v47;
      int v30 = HIBYTE(v46);
      int v29 = v49;
      uint64_t v31 = v46;
      int v32 = BYTE2(v46);
      if (v54) {
        goto LABEL_14;
      }
    }
    unsigned int v25 = 0;
    long long v21 = &_mh_execute_header;
LABEL_14:
    uint64_t v33 = 256;
    if (v24) {
      uint64_t v34 = 256;
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t v35 = v34 | v31;
    uint64_t v36 = 0x10000;
    if (v32) {
      uint64_t v37 = 0x10000;
    }
    else {
      uint64_t v37 = 0;
    }
    if (v30) {
      uint64_t v38 = 0x1000000;
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v10 = v35 | v37 | v38 | (v28 << 32);
    if (!v29) {
      uint64_t v33 = 0;
    }
    uint64_t v39 = v33 | result;
    if (!v27) {
      uint64_t v36 = 0;
    }
    if (v26) {
      uint64_t v40 = 0x1000000;
    }
    else {
      uint64_t v40 = 0;
    }
    uint64_t v41 = v39 | v36 | v40;
    unint64_t v42 = &_mh_execute_header;
    if (!v23) {
      unint64_t v42 = 0;
    }
    uint64_t v43 = 0x10000000000;
    if (!v22) {
      uint64_t v43 = 0;
    }
    unint64_t v11 = v41 | (unint64_t)v42 | v43;
    unint64_t v12 = (unint64_t)v21 | v25;
    char v18 = 1;
    goto LABEL_35;
  }
  sub_100003DD0(&qword_1000C4758);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000A2660;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  sub_100004614();
  v5._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._char countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._char countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 32) = 0xD000000000000024;
  *(void *)(v4 + 40) = 0x80000001000A8720;
  print(_:separator:terminator:)();
  uint64_t result = swift_bridgeObjectRelease();
  a1 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  long long v19 = 0uLL;
LABEL_35:
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v11;
  *(void *)(a2 + 32) = v12;
  *(_OWORD *)(a2 + 40) = v19;
  *(void *)(a2 + 56) = v13;
  *(void *)(a2 + 64) = v14;
  *(void *)(a2 + 72) = v15;
  *(void *)(a2 + 80) = v16;
  *(void *)(a2 + 88) = v17;
  *(void *)(a2 + 96) = 0;
  *(unsigned char *)(a2 + 104) = v18;
  return result;
}

void *sub_100020B04()
{
  unint64_t v0 = sub_10001F8F8();
  uint64_t v150 = (char *)sub_1000213E0(v0);
  swift_bridgeObjectRetain();
  sub_10002706C(&v150);
  swift_bridgeObjectRelease();
  uint64_t v85 = *((void *)v150 + 2);
  if (v85)
  {
    unint64_t v1 = 0;
    uint64_t v84 = v150 + 32;
    uint64_t v139 = _swiftEmptyArrayStorage;
    uint64_t v83 = v150;
    while (1)
    {
      unint64_t v86 = v1;
      uint64_t v2 = &v84[112 * v1];
      uint64_t v3 = *(void *)v2;
      int v127 = *((_DWORD *)v2 + 2);
      int v130 = *((_DWORD *)v2 + 3);
      int v4 = *((_DWORD *)v2 + 5);
      int v133 = *((_DWORD *)v2 + 8);
      char v92 = v2[36];
      uint64_t v142 = *((void *)v2 + 6);
      uint64_t v134 = *((void *)v2 + 5);
      uint64_t v137 = *((void *)v2 + 7);
      uint64_t v96 = *((void *)v2 + 9);
      uint64_t v98 = *((void *)v2 + 8);
      uint64_t v90 = *((void *)v2 + 10);
      uint64_t v87 = *((void *)v2 + 11);
      uint64_t v94 = *((void *)v2 + 12);
      char v100 = v2[104];
      char v124 = v2[29];
      char v5 = v2[28];
      char v6 = v2[27];
      char v88 = v2[26];
      char v7 = v2[25];
      char v8 = v2[24];
      char v9 = v2[19];
      char v10 = v2[18];
      char v11 = v2[17];
      char v12 = v2[16];
      sub_100003DD0(&qword_1000C4C10);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1000A2660;
      uint64_t v121 = (void *)(inited + 16);
      *(void *)(inited + 32) = 0;
      *(void *)(inited + 40) = v3;
      *(_DWORD *)(inited + 48) = v127;
      *(_DWORD *)(inited + 52) = v130;
      *(unsigned char *)(inited + 56) = v12;
      *(unsigned char *)(inited + 57) = v11;
      char v104 = v10;
      *(unsigned char *)(inited + 58) = v10;
      *(unsigned char *)(inited + 59) = v9;
      *(_DWORD *)(inited + 60) = v4;
      *(unsigned char *)(inited + 64) = v8;
      *(unsigned char *)(inited + 65) = v7;
      *(unsigned char *)(inited + 66) = v88;
      *(unsigned char *)(inited + 67) = v6;
      *(unsigned char *)(inited + 68) = v5;
      *(unsigned char *)(inited + 69) = v124;
      *(_DWORD *)(inited + 72) = v133;
      *(unsigned char *)(inited + 76) = v92;
      *(void *)(inited + 80) = v134;
      *(void *)(inited + 88) = v142;
      *(void *)(inited + 96) = v137;
      *(void *)(inited + 104) = v98;
      *(void *)(inited + 112) = v96;
      *(void *)(inited + 120) = v90;
      *(void *)(inited + 128) = v87;
      *(void *)(inited + 136) = v94;
      uint64_t v140 = inited;
      *(unsigned char *)(inited + 144) = v100;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v139 = sub_10001227C(0, v139[2] + 1, 1, v139);
      }
      unint64_t v15 = v139[2];
      unint64_t v14 = v139[3];
      if (v15 >= v14 >> 1) {
        uint64_t v139 = sub_10001227C((void *)(v14 > 1), v15 + 1, 1, v139);
      }
      v139[2] = v15 + 1;
      unint64_t v16 = &v139[16 * v15];
      v16[4] = 0;
      *((unsigned char *)v16 + 40) = 1;
      int v17 = *(_DWORD *)((char *)&v150 + 3);
      *(_DWORD *)((char *)v16 + 41) = v150;
      *((_DWORD *)v16 + 11) = v17;
      v16[6] = v3;
      *((_DWORD *)v16 + 14) = v127;
      *((_DWORD *)v16 + 15) = v130;
      *((unsigned char *)v16 + 64) = v12;
      *((unsigned char *)v16 + 65) = v11;
      *((unsigned char *)v16 + 66) = v104;
      *((unsigned char *)v16 + 67) = v9;
      *((_DWORD *)v16 + 17) = v4;
      *((unsigned char *)v16 + 72) = v8;
      *((unsigned char *)v16 + 73) = v7;
      *((unsigned char *)v16 + 74) = v88;
      *((unsigned char *)v16 + 75) = v6;
      *((unsigned char *)v16 + 76) = v5;
      *((unsigned char *)v16 + 77) = v124;
      *((_DWORD *)v16 + 20) = v133;
      *((unsigned char *)v16 + 84) = v92;
      *((unsigned char *)v16 + 87) = v149;
      *(_WORD *)((char *)v16 + 85) = v148;
      v16[11] = v134;
      v16[12] = v142;
      v16[13] = v137;
      v16[14] = v98;
      v16[15] = v96;
      v16[16] = v90;
      v16[17] = v87;
      v16[18] = v94;
      *((unsigned char *)v16 + 152) = v100;
      char v18 = v121;
      unint64_t v19 = *v121;
      if (*v121)
      {
        BOOL v20 = (void *)v140;
        while (1)
        {
          unsigned __int8 v141 = v20;
          unsigned __int8 v143 = v20 + 4;
          while (1)
          {
            uint64_t v21 = 15 * (v19 - 1);
            uint64_t v22 = v143[v21];
            uint64_t v23 = v143[v21 + 1];
            uint64_t v24 = v143[v21 + 2];
            char v25 = v143[v21 + 3];
            char v26 = BYTE1(v143[v21 + 3]);
            char v27 = BYTE2(v143[v21 + 3]);
            char v28 = BYTE3(v143[v21 + 3]);
            int v29 = HIDWORD(v143[v21 + 3]);
            char v30 = v143[v21 + 4];
            char v31 = BYTE1(v143[v21 + 4]);
            char v32 = BYTE2(v143[v21 + 4]);
            char v33 = BYTE3(v143[v21 + 4]);
            char v34 = BYTE4(v143[v21 + 4]);
            char v35 = BYTE5(v143[v21 + 4]);
            int v36 = v143[v21 + 5];
            char v37 = BYTE4(v143[v21 + 5]);
            long long v38 = *(_OWORD *)&v143[v21 + 6];
            long long v39 = *(_OWORD *)&v143[v21 + 8];
            uint64_t v41 = v143[v21 + 10];
            uint64_t v40 = v143[v21 + 11];
            uint64_t v43 = v143[v21 + 12];
            uint64_t v42 = v143[v21 + 13];
            char v44 = v143[v21 + 14];
            *char v18 = v19 - 1;
            if (v22 < *(void *)(v40 + 16)) {
              break;
            }
            uint64_t v45 = v18;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            char v18 = v45;
            unint64_t v19 = *v45;
            if (!*v45) {
              goto LABEL_24;
            }
          }
          char v109 = v37;
          int v111 = v36;
          char v113 = v35;
          char v115 = v34;
          char v117 = v33;
          int v119 = v29;
          char v122 = v28;
          uint64_t v125 = v23;
          long long v128 = v39;
          long long v131 = v38;
          uint64_t v103 = *(void *)(v40 + 16);
          unint64_t v144 = v22;
          unint64_t v105 = v141[3];
          uint64_t v107 = v41;
          unint64_t v135 = v19;
          uint64_t v138 = v40;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v46 = v135;
          if (v135 > v105 >> 1)
          {
            uint64_t v80 = sub_100012144((void *)(v105 > 1), v135, 1, v141);
            unint64_t v46 = v135;
            unsigned __int8 v141 = v80;
          }
          v141[2] = v46;
          unsigned int v47 = &v141[v21];
          v47[4] = v144 + 1;
          v47[5] = v125;
          v47[6] = v24;
          *((unsigned char *)v47 + 56) = v25;
          *((unsigned char *)v47 + 57) = v26;
          *((unsigned char *)v47 + 58) = v27;
          *((unsigned char *)v47 + 59) = v122;
          *((_DWORD *)v47 + 15) = v119;
          *((unsigned char *)v47 + 64) = v30;
          *((unsigned char *)v47 + 65) = v31;
          *((unsigned char *)v47 + 66) = v32;
          *((unsigned char *)v47 + 67) = v117;
          *((unsigned char *)v47 + 68) = v115;
          *((unsigned char *)v47 + 69) = v113;
          *((_DWORD *)v47 + 18) = v111;
          *((unsigned char *)v47 + 76) = v109;
          *((_OWORD *)v47 + 5) = v131;
          *((_OWORD *)v47 + 6) = v128;
          v47[14] = v107;
          v47[15] = v138;
          v47[16] = v43;
          v47[17] = v42;
          *((unsigned char *)v47 + 144) = v44;
          if ((v144 & 0x8000000000000000) != 0) {
            break;
          }
          if (v144 >= *(void *)(v138 + 16)) {
            goto LABEL_31;
          }
          uint64_t v48 = *(void *)(v138 + 8 * v144 + 32);
          unint64_t v49 = sub_10001F8F8();
          if (!*(void *)(v49 + 16)) {
            goto LABEL_32;
          }
          unint64_t v50 = sub_100024794(v48);
          if ((v51 & 1) == 0) {
            goto LABEL_32;
          }
          uint64_t v52 = *(void *)(v49 + 56) + 112 * v50;
          uint64_t v53 = *(void *)v52;
          int v54 = *(_DWORD *)(v52 + 12);
          char v93 = *(unsigned char *)(v52 + 16);
          int v95 = *(_DWORD *)(v52 + 8);
          char v89 = *(unsigned char *)(v52 + 18);
          char v91 = *(unsigned char *)(v52 + 17);
          char v132 = *(unsigned char *)(v52 + 19);
          int v129 = *(_DWORD *)(v52 + 20);
          char v126 = *(unsigned char *)(v52 + 24);
          char v120 = *(unsigned char *)(v52 + 26);
          char v123 = *(unsigned char *)(v52 + 25);
          char v116 = *(unsigned char *)(v52 + 28);
          char v118 = *(unsigned char *)(v52 + 27);
          int v112 = *(_DWORD *)(v52 + 32);
          char v114 = *(unsigned char *)(v52 + 29);
          char v110 = *(unsigned char *)(v52 + 36);
          uint64_t v106 = *(void *)(v52 + 48);
          uint64_t v108 = *(void *)(v52 + 40);
          uint64_t v101 = *(void *)(v52 + 64);
          uint64_t v102 = *(void *)(v52 + 56);
          uint64_t v55 = *(void *)(v52 + 80);
          uint64_t v56 = *(void *)(v52 + 88);
          uint64_t v97 = *(void *)(v52 + 96);
          uint64_t v99 = *(void *)(v52 + 72);
          char v136 = *(unsigned char *)(v52 + 104);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          BOOL v20 = v141;
          uint64_t v57 = v141[2];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v58 = v139[2];
          unint64_t v59 = v139[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v58 >= v59 >> 1) {
            uint64_t v139 = sub_10001227C((void *)(v59 > 1), v58 + 1, 1, v139);
          }
          v139[2] = v58 + 1;
          char v60 = v110;
          uint64_t v61 = &v139[16 * v58];
          v61[4] = v57;
          *((unsigned char *)v61 + 40) = v144 == v103 - 1;
          *(_DWORD *)((char *)v61 + 41) = *(_DWORD *)v147;
          *((_DWORD *)v61 + 11) = *(_DWORD *)&v147[3];
          v61[6] = v53;
          *((_DWORD *)v61 + 14) = v95;
          *((_DWORD *)v61 + 15) = v54;
          *((unsigned char *)v61 + 64) = v93;
          *((unsigned char *)v61 + 65) = v91;
          *((unsigned char *)v61 + 66) = v89;
          char v62 = v132;
          *((unsigned char *)v61 + 67) = v132;
          int v63 = v129;
          *((_DWORD *)v61 + 17) = v129;
          char v64 = v126;
          *((unsigned char *)v61 + 72) = v126;
          char v66 = v120;
          char v65 = v123;
          *((unsigned char *)v61 + 73) = v123;
          *((unsigned char *)v61 + 74) = v120;
          char v68 = v116;
          char v67 = v118;
          *((unsigned char *)v61 + 75) = v118;
          *((unsigned char *)v61 + 76) = v116;
          int v70 = v112;
          char v69 = v114;
          *((unsigned char *)v61 + 77) = v114;
          *((_DWORD *)v61 + 20) = v112;
          *((unsigned char *)v61 + 84) = v110;
          *((unsigned char *)v61 + 87) = v146;
          *(_WORD *)((char *)v61 + 85) = v145;
          uint64_t v72 = v106;
          uint64_t v71 = v108;
          v61[11] = v108;
          v61[12] = v106;
          uint64_t v74 = v101;
          uint64_t v73 = v102;
          v61[13] = v102;
          v61[14] = v101;
          uint64_t v76 = v97;
          uint64_t v75 = v99;
          v61[15] = v99;
          v61[16] = v55;
          v61[17] = v56;
          v61[18] = v97;
          *((unsigned char *)v61 + 152) = v136;
          unint64_t v78 = v141[2];
          unint64_t v77 = v141[3];
          if (v78 >= v77 >> 1)
          {
            uint64_t v81 = sub_100012144((void *)(v77 > 1), v78 + 1, 1, v141);
            uint64_t v76 = v97;
            uint64_t v75 = v99;
            uint64_t v74 = v101;
            uint64_t v73 = v102;
            uint64_t v72 = v106;
            uint64_t v71 = v108;
            char v60 = v110;
            int v70 = v112;
            char v68 = v116;
            char v67 = v118;
            char v66 = v120;
            char v65 = v123;
            char v64 = v126;
            int v63 = v129;
            char v62 = v132;
            BOOL v20 = v81;
            char v69 = v114;
          }
          void v20[2] = v78 + 1;
          char v18 = v20 + 2;
          uint64_t v79 = &v20[15 * v78];
          v79[4] = 0;
          v79[5] = v53;
          *((_DWORD *)v79 + 12) = v95;
          *((_DWORD *)v79 + 13) = v54;
          *((unsigned char *)v79 + 56) = v93;
          *((unsigned char *)v79 + 57) = v91;
          *((unsigned char *)v79 + 58) = v89;
          *((unsigned char *)v79 + 59) = v62;
          *((_DWORD *)v79 + 15) = v63;
          *((unsigned char *)v79 + 64) = v64;
          *((unsigned char *)v79 + 65) = v65;
          *((unsigned char *)v79 + 66) = v66;
          *((unsigned char *)v79 + 67) = v67;
          *((unsigned char *)v79 + 68) = v68;
          *((unsigned char *)v79 + 69) = v69;
          *((_DWORD *)v79 + 18) = v70;
          unint64_t v19 = v78 + 1;
          *((unsigned char *)v79 + 76) = v60;
          v79[10] = v71;
          v79[11] = v72;
          v79[12] = v73;
          v79[13] = v74;
          v79[14] = v75;
          v79[15] = v55;
          v79[16] = v56;
          v79[17] = v76;
          *((unsigned char *)v79 + 144) = v136;
        }
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        swift_bridgeObjectRelease();
        __break(1u);
      }
LABEL_24:
      unint64_t v1 = v86 + 1;
      swift_bridgeObjectRelease();
      if (v86 + 1 == v85) {
        break;
      }
      if (v1 >= *((void *)v83 + 2))
      {
        __break(1u);
        goto LABEL_30;
      }
    }
    swift_release();
  }
  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  return v139;
}

uint64_t sub_1000213E0(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 64;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  if (!v6) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v8 | (v2 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v2 << 6))
  {
    uint64_t v10 = *(void *)(v1 + 56) + 112 * i;
    if (*(unsigned char *)(v10 + 104) == 1)
    {
      uint64_t v38 = *(void *)v10;
      uint64_t v14 = *(void *)(v10 + 8);
      char v36 = *(unsigned char *)(v10 + 17);
      char v37 = *(unsigned char *)(v10 + 16);
      char v34 = *(unsigned char *)(v10 + 19);
      char v35 = *(unsigned char *)(v10 + 18);
      char v32 = *(unsigned char *)(v10 + 24);
      int v33 = *(_DWORD *)(v10 + 20);
      char v30 = *(unsigned char *)(v10 + 26);
      char v31 = *(unsigned char *)(v10 + 25);
      char v28 = *(unsigned char *)(v10 + 28);
      char v29 = *(unsigned char *)(v10 + 27);
      int v26 = *(_DWORD *)(v10 + 32);
      char v27 = *(unsigned char *)(v10 + 29);
      char v25 = *(unsigned char *)(v10 + 36);
      uint64_t v23 = *(void *)(v10 + 48);
      uint64_t v24 = *(void *)(v10 + 40);
      uint64_t v21 = *(void *)(v10 + 64);
      uint64_t v22 = *(void *)(v10 + 56);
      uint64_t v15 = *(void *)(v10 + 88);
      uint64_t v19 = *(void *)(v10 + 96);
      uint64_t v20 = *(void *)(v10 + 72);
      uint64_t v39 = *(void *)(v10 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = (uint64_t)sub_100027F5C(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v17 = _swiftEmptyArrayStorage[2];
      unint64_t v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1) {
        uint64_t result = (uint64_t)sub_100027F5C((char *)(v16 > 1), v17 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v17 + 1;
      char v18 = &_swiftEmptyArrayStorage[14 * v17];
      v18[4] = v38;
      v18[5] = v14;
      *((unsigned char *)v18 + 48) = v37;
      *((unsigned char *)v18 + 49) = v36;
      *((unsigned char *)v18 + 50) = v35;
      *((unsigned char *)v18 + 51) = v34;
      *((_DWORD *)v18 + 13) = v33;
      *((unsigned char *)v18 + 56) = v32;
      *((unsigned char *)v18 + 57) = v31;
      *((unsigned char *)v18 + 58) = v30;
      *((unsigned char *)v18 + 59) = v29;
      *((unsigned char *)v18 + 60) = v28;
      *((unsigned char *)v18 + 61) = v27;
      *((_DWORD *)v18 + 16) = v26;
      *((unsigned char *)v18 + 68) = v25;
      v18[9] = v24;
      v18[10] = v23;
      v18[11] = v22;
      v18[12] = v21;
      v18[13] = v20;
      v18[14] = v39;
      v18[15] = v15;
      v18[16] = v19;
      *((unsigned char *)v18 + 136) = 1;
      if (v6) {
        goto LABEL_4;
      }
    }
    else if (v6)
    {
      goto LABEL_4;
    }
LABEL_7:
    int64_t v11 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v11 >= v7) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v2;
    if (!v12)
    {
      int64_t v2 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_29;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v2);
      if (!v12)
      {
        int64_t v2 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_29;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v2);
        if (!v12)
        {
          int64_t v2 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_29;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v2);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_29:
    swift_release();
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    int64_t v2 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v2 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v2);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100021710@<X0>(char *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v8 = String.utf8CString.getter();
  char v9 = strstr(a1, (const char *)(v8 + 32));
  swift_release();
  if (v9)
  {
    uint64_t v10 = String.utf8CString.getter();
    strlen((const char *)(v10 + 32));
    swift_release();
    uint64_t result = String.init(cString:)();
    a2 = result;
    a3 = v12;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a4 = a2;
  a4[1] = a3;
  return result;
}

void *sub_1000217D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v7)(uint64_t *__return_ptr, void *);
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  void v12[3];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    uint64_t result = (void *)_StringGuts._slowWithCString<A>(_:)();
    if (!v4) {
      return (void *)v12[2];
    }
  }
  else
  {
    __chkstk_darwin(a1);
    if ((v6 & 0x2000000000000000) != 0)
    {
      v12[0] = v5;
      v12[1] = v6 & 0xFFFFFFFFFFFFFFLL;
      uint64_t result = v7(&v11, v12);
      if (!v4) {
        return (void *)v11;
      }
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        char v9 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v8 = _StringObject.sharedUTF8.getter();
      }
      return (void *)sub_10002A374(v8, v9, (uint64_t (*)(void))sub_10002B954);
    }
  }
  return result;
}

uint64_t sub_1000218E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v3 + 48);
  uint64_t v5 = *(void *)(v3 + 56);
  if (qword_1000C46D0 != -1) {
    swift_once();
  }
  uint64_t v6 = off_1000C6488(v4, v5, a1, 0x8000000000000000);
  uint64_t v8 = v7;
  if (qword_1000C46B8 != -1) {
    swift_once();
  }
  uint64_t v9 = off_1000C6470(v6, v8);
  uint64_t v11 = v10;
  if (qword_1000C46C8 != -1) {
    swift_once();
  }
  if (off_1000C6480(v9, v11)) {
    String.init(cString:)();
  }
  if (qword_1000C46B0 != -1) {
    swift_once();
  }
  if (off_1000C6468(v6, v8))
  {
    uint64_t v12 = String.init(cString:)();
    uint64_t v14 = v13;
    uint64_t v15 = swift_bridgeObjectRelease();
    __chkstk_darwin(v15);
    void v20[2] = 0xD00000000000001DLL;
    v20[3] = 0x80000001000A8700;
    v20[4] = v12;
    v20[5] = v14;
    unint64_t v16 = sub_1000217D4((uint64_t)sub_10002B934, (uint64_t)v20, v12, v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v20[7] = a1;
    sub_100004614();
    v17._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._char countAndFlagsBits = 62;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    return 7876668;
  }
  return (uint64_t)v16;
}

uint64_t sub_100021B64()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003DD0(&qword_1000C4758);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000A2660;
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 32) = 0x534B534154;
  *(void *)(v3 + 40) = 0xE500000000000000;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  unint64_t v4 = sub_10001F8F8();
  char v5 = sub_100022DCC(v4);
  swift_bridgeObjectRelease();
  if (v5)
  {
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1000A2660;
    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 32) = 0xD000000000000072;
    *(void *)(v6 + 40) = 0x80000001000A8660;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = (int8x16_t *)sub_10001F64C();
  sub_10001EF68(v7, v8);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  if (v10[2])
  {
    sub_100003DD0(&qword_1000C5018);
    uint64_t v11 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v11 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v120 = v2;
  uint64_t v144 = (uint64_t)v11;
  sub_10002A910(v10, 1, &v144);
  swift_bridgeObjectRelease();
  uint64_t v12 = v144;
  uint64_t v174 = (char *)_swiftEmptyArrayStorage;
  uint64_t v13 = sub_100020B04();
  uint64_t v172 = 0;
  uint64_t v173 = 0;
  uint64_t v171 = v13;
  char v118 = v13;
  swift_bridgeObjectRetain();
  sub_10001EE50(v14, (uint64_t)&v141);
  sub_10002B998((uint64_t)&v141, (uint64_t)v143, &qword_1000C5020);
  sub_10002B998((uint64_t)v143, (uint64_t)&v144, &qword_1000C5020);
  if (sub_10002B7D0((uint64_t)&v144) == 1)
  {
LABEL_7:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1000A2660;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 32) = 0;
    *(void *)(v15 + 40) = 0xE000000000000000;
    print(_:separator:terminator:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    int v129 = (char *)_swiftEmptyArrayStorage;
    uint64_t v127 = v12;
    uint64_t v128 = v1;
    while (1)
    {
      uint64_t v18 = v144;
      int64_t v19 = v145;
      int v20 = v146;
      uint64_t v21 = v167;
      uint64_t v134 = v147;
      uint64_t v175 = v147;
      int v176 = v148;
      int v177 = v149;
      char v178 = v150;
      char v179 = v151;
      char v180 = v152;
      char v181 = v153;
      int v182 = v154;
      char v183 = v155;
      char v184 = v156;
      char v185 = v157;
      char v186 = v158;
      char v187 = v159;
      char v188 = v160;
      mach_port_name_t name = v161;
      mach_port_name_t v189 = v161;
      char v190 = v162;
      long long v192 = v164;
      uint64_t v191 = v163;
      uint64_t v193 = v165;
      uint64_t v194 = v166;
      uint64_t v195 = v167;
      uint64_t v196 = v168;
      uint64_t v197 = v169;
      char v198 = v170;
      int64_t v22 = *((void *)v129 + 2);
      if (v22 < v145) {
        break;
      }
      uint64_t v132 = v164;
      char v124 = v170;
      char v125 = v162;
      sub_10002AB3C(v145, v22);
      uint64_t v23 = v174;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v23 = sub_1000124A4(0, *((void *)v23 + 2) + 1, 1, v23);
      }
      unint64_t v25 = *((void *)v23 + 2);
      unint64_t v24 = *((void *)v23 + 3);
      if (v25 >= v24 >> 1) {
        uint64_t v23 = sub_1000124A4((char *)(v24 > 1), v25 + 1, 1, v23);
      }
      *((void *)v23 + 2) = v25 + 1;
      v23[v25 + 32] = v20;
      uint64_t v174 = v23;
      unint64_t v26 = v18 - 1;
      uint64_t v119 = v18;
      uint64_t v123 = v21;
      if (v18 < 1)
      {
        uint64_t v27 = -1;
      }
      else
      {
        if (v26 >= v118[2]) {
          goto LABEL_83;
        }
        uint64_t v27 = v118[16 * v26 + 4];
      }
      int64_t v138 = v27;
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = 0;
      uint64_t v130 = v28;
      *(void *)(v28 + 24) = 0xE000000000000000;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v29 = 0;
      unint64_t v30 = v25 + 1;
      do
      {
        if (v23[v29++ + 32]) {
          uint64_t v32 = 0x2020202020;
        }
        else {
          uint64_t v32 = 0x207C202020;
        }
        unint64_t v33 = 0xE500000000000000;
        String.append(_:)(*(Swift::String *)&v32);
      }
      while (v30 != v29);
      swift_endAccess();
      int v129 = v23;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v34._char countAndFlagsBits = 2105376;
      v34._object = (void *)0xE300000000000000;
      String.append(_:)(v34);
      swift_endAccess();
      uint64_t v35 = *(void *)(v130 + 16);
      char v36 = *(void **)(v130 + 24);
      swift_bridgeObjectRetain();
      uint64_t v137 = v35;
      sub_10002AC40(5);
      swift_bridgeObjectRelease();
      uint64_t v37 = 2960736;
      if (!v20) {
        uint64_t v37 = 2960683;
      }
      if (v19) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = 2105376;
      }
      uint64_t v141 = v38;
      uint64_t v142 = (void *)0xE300000000000000;
      swift_bridgeObjectRetain();
      static String._fromSubstring(_:)();
      String.append<A>(contentsOf:)();
      Substring.init(_:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = static String._fromSubstring(_:)();
      uint64_t v140 = v40;
      swift_bridgeObjectRelease();
      if (v138 < v19)
      {
        uint64_t v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = xmmword_1000A2660;
        *(void *)(v41 + 56) = &type metadata for String;
        *(void *)(v41 + 32) = v35;
        *(void *)(v41 + 40) = v36;
        swift_bridgeObjectRetain();
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
      }
      uint64_t v42 = swift_allocObject();
      *(unsigned char *)(v42 + 16) = 1;
      char v136 = (unsigned char *)(v42 + 16);
      uint64_t v43 = *(void *)(v128 + 24);
      uint64_t v44 = *(void *)(v43 + 48);
      uint64_t v45 = *(void *)(v43 + 56);
      if (qword_1000C46D0 != -1) {
        swift_once();
      }
      uint64_t v139 = v39;
      uint64_t v122 = v132;
      uint64_t v46 = off_1000C6488(v44, v45, v132, 0x8000000000000000);
      uint64_t v48 = v47;
      if (qword_1000C46B8 != -1) {
        swift_once();
      }
      uint64_t v49 = off_1000C6470(v46, v48);
      uint64_t v51 = v50;
      if (qword_1000C46C8 != -1) {
        swift_once();
      }
      if (off_1000C6480(v49, v51))
      {
        uint64_t v52 = String.init(cString:)();
        unint64_t v54 = v53;
      }
      else
      {
        uint64_t v52 = 0;
        unint64_t v54 = 0;
      }
      if (qword_1000C46B0 != -1) {
        swift_once();
      }
      uint64_t v133 = v42;
      if (off_1000C6468(v46, v48))
      {
        String.init(cString:)();
        swift_bridgeObjectRelease();
      }
      if (v54) {
        uint64_t v55 = v52;
      }
      else {
        uint64_t v55 = 0x6E776F6E6B6E753CLL;
      }
      if (v54) {
        unint64_t v56 = v54;
      }
      else {
        unint64_t v56 = 0xE90000000000003ELL;
      }
      v121._char countAndFlagsBits = v55;
      v121._object = (void *)v56;
      swift_retain();
      uint64_t v57 = swift_bridgeObjectRetain();
      long long v131 = sub_10002ACDC(v57);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v58 = sub_10002ADC4(&v175);
      char v60 = v59;
      uint64_t v141 = 0;
      uint64_t v142 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(63);
      v61._char countAndFlagsBits = 0x206B736154;
      v61._object = (void *)0xE500000000000000;
      String.append(_:)(v61);
      v62._char countAndFlagsBits = 30768;
      v62._object = (void *)0xE200000000000000;
      String.append(_:)(v62);
      sub_100004614();
      v63._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      v64._char countAndFlagsBits = 0x7367616C66202D20;
      v64._object = (void *)0xE90000000000003DLL;
      String.append(_:)(v64);
      v65._char countAndFlagsBits = v58;
      v65._object = v60;
      String.append(_:)(v65);
      swift_bridgeObjectRelease();
      v66._char countAndFlagsBits = 0xD000000000000011;
      v66._object = (void *)0x80000001000A8580;
      String.append(_:)(v66);
      v67._char countAndFlagsBits = 30768;
      v67._object = (void *)0xE200000000000000;
      String.append(_:)(v67);
      sub_10002B77C();
      v68._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v68);
      swift_bridgeObjectRelease();
      v69._char countAndFlagsBits = 0x6F69725078616D20;
      v69._object = (void *)0xED00003D79746972;
      String.append(_:)(v69);
      v70._char countAndFlagsBits = 30768;
      v70._object = (void *)0xE200000000000000;
      String.append(_:)(v70);
      v71._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v71);
      swift_bridgeObjectRelease();
      v72._char countAndFlagsBits = 0x7373657264646120;
      v72._object = (void *)0xE90000000000003DLL;
      String.append(_:)(v72);
      v73._char countAndFlagsBits = 30768;
      v73._object = (void *)0xE200000000000000;
      String.append(_:)(v73);
      v74._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v74);
      swift_bridgeObjectRelease();
      sub_100022EF0(v141, v142, v42, v139, v140, v130);
      swift_bridgeObjectRelease();
      if (*(void *)(v127 + 16))
      {
        sub_100024794(v134);
        if (v75)
        {
          uint64_t v141 = 0;
          uint64_t v142 = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(25);
          swift_bridgeObjectRelease();
          uint64_t v141 = 0xD000000000000019;
          uint64_t v142 = (void *)0x80000001000A8640;
          v76._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v76);
          swift_bridgeObjectRelease();
          sub_100022EF0(v141, v142, v42, v139, v140, v130);
          swift_bridgeObjectRelease();
        }
      }
      if ((v124 & 1) == 0)
      {
        uint64_t v141 = 0x203A746E65726170;
        uint64_t v142 = (void *)0xEA00000000007830;
        v77._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v77);
        swift_bridgeObjectRelease();
        sub_100022EF0(v141, v142, v42, v139, v140, v130);
        swift_bridgeObjectRelease();
      }
      unint64_t v135 = v36;
      char v78 = v125;
      if (!name) {
        char v78 = 1;
      }
      if ((v78 & 1) == 0)
      {
        sub_1000117C4(name);
        if ((v79 & 1) == 0)
        {
          uint64_t v141 = 0;
          uint64_t v142 = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(32);
          swift_bridgeObjectRelease();
          uint64_t v141 = 0xD00000000000001ALL;
          uint64_t v142 = (void *)0x80000001000A8620;
          v80._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v80);
          swift_bridgeObjectRelease();
          v81._char countAndFlagsBits = 1029990688;
          v81._object = (void *)0xE400000000000000;
          String.append(_:)(v81);
          v82._char countAndFlagsBits = 30768;
          v82._object = (void *)0xE200000000000000;
          String.append(_:)(v82);
          v83._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v83);
          swift_bridgeObjectRelease();
          sub_100022EF0(v141, v142, v42, v139, v140, v130);
          swift_bridgeObjectRelease();
        }
      }
      unint64_t v84 = v131[2];
      if (v84)
      {
        uint64_t v85 = v131[4];
        unint64_t v86 = (void *)v131[5];
        uint64_t v141 = 0;
        uint64_t v142 = (void *)0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(19);
        swift_bridgeObjectRelease();
        uint64_t v141 = 0xD000000000000011;
        uint64_t v142 = (void *)0x80000001000A85A0;
        v87._char countAndFlagsBits = v85;
        v87._object = v86;
        String.append(_:)(v87);
        swift_bridgeObjectRelease();
        sub_100022EF0(v141, v142, v42, v139, v140, v130);
        swift_bridgeObjectRelease();
        if (v131[2] < v84) {
          goto LABEL_84;
        }
        unint64_t v89 = v84 - 1;
        BOOL v88 = v84 == 1;
        uint64_t v90 = v120;
        if (!v88)
        {
          swift_beginAccess();
          char v91 = (void **)(v131 + 7);
          do
          {
            uint64_t v92 = (uint64_t)*(v91 - 1);
            char v93 = *v91;
            uint64_t v141 = 0;
            uint64_t v142 = (void *)0xE000000000000000;
            swift_bridgeObjectRetain();
            _StringGuts.grow(_:)(19);
            swift_bridgeObjectRelease();
            uint64_t v141 = 0xD000000000000011;
            uint64_t v142 = (void *)0x80000001000A85C0;
            v94._char countAndFlagsBits = v92;
            v94._object = v93;
            String.append(_:)(v94);
            swift_bridgeObjectRelease();
            uint64_t v95 = v141;
            uint64_t v96 = v142;
            uint64_t v97 = v90;
            uint64_t v98 = swift_allocObject();
            *(_OWORD *)(v98 + 16) = xmmword_1000A2660;
            if (*v136) {
              uint64_t v99 = (void *)v140;
            }
            else {
              uint64_t v99 = v135;
            }
            if (*v136) {
              uint64_t v100 = v139;
            }
            else {
              uint64_t v100 = v137;
            }
            swift_bridgeObjectRetain();
            uint64_t v141 = v100;
            uint64_t v142 = v99;
            swift_bridgeObjectRetain();
            v101._char countAndFlagsBits = v95;
            v101._object = v96;
            String.append(_:)(v101);
            swift_bridgeObjectRelease();
            uint64_t v102 = v141;
            uint64_t v103 = v142;
            *(void *)(v98 + 56) = &type metadata for String;
            *(void *)(v98 + 32) = v102;
            *(void *)(v98 + 40) = v103;
            print(_:separator:terminator:)();
            uint64_t v90 = v97;
            swift_bridgeObjectRelease();
            *char v136 = 0;
            swift_bridgeObjectRelease();
            v91 += 2;
            --v89;
          }
          while (v89);
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v141 = 0;
      uint64_t v142 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      uint64_t v141 = 0xD000000000000011;
      uint64_t v142 = (void *)0x80000001000A85E0;
      v104._char countAndFlagsBits = sub_1000218E8(v122);
      String.append(_:)(v104);
      swift_bridgeObjectRelease();
      v105._char countAndFlagsBits = 544106784;
      v105._object = (void *)0xE400000000000000;
      String.append(_:)(v105);
      String.append(_:)(v121);
      swift_bridgeObjectRelease();
      sub_100022EF0(v141, v142, v42, v139, v140, v130);
      swift_bridgeObjectRelease();
      uint64_t v141 = 0;
      uint64_t v142 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      uint64_t v141 = 0xD000000000000010;
      uint64_t v142 = (void *)0x80000001000A8600;
      v106._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v106);
      swift_bridgeObjectRelease();
      v107._char countAndFlagsBits = 0x6920736574796220;
      v107._object = (void *)0xEA0000000000206ELL;
      String.append(_:)(v107);
      v108._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v108);
      swift_bridgeObjectRelease();
      v109._char countAndFlagsBits = 0x736B6E75686320;
      v109._object = (void *)0xE700000000000000;
      String.append(_:)(v109);
      sub_100022EF0(v141, v142, v42, v139, v140, v130);
      swift_bridgeObjectRelease();
      uint64_t v110 = *(void *)(v123 + 16);
      if (v110)
      {
        if (v110 == 1) {
          uint64_t v111 = 0;
        }
        else {
          uint64_t v111 = 115;
        }
        if (v110 == 1) {
          int v112 = (void *)0xE000000000000000;
        }
        else {
          int v112 = (void *)0xE100000000000000;
        }
        uint64_t v141 = 0;
        uint64_t v142 = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease();
        uint64_t v141 = 8234;
        uint64_t v142 = (void *)0xE200000000000000;
        v113._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v113);
        swift_bridgeObjectRelease();
        v114._char countAndFlagsBits = 0x7420646C69686320;
        v114._object = (void *)0xEB000000006B7361;
        String.append(_:)(v114);
        v115._char countAndFlagsBits = v111;
        v115._object = v112;
        String.append(_:)(v115);
        swift_bridgeObjectRelease();
        sub_100022EF0(v141, v142, v133, v139, v140, v130);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_10002B830(v143);
      uint64_t v116 = *(void *)(v123 + 16);
      swift_bridgeObjectRelease();
      if (!v116 && v119 < v118[2] - 1)
      {
        uint64_t v117 = swift_allocObject();
        *(_OWORD *)(v117 + 16) = xmmword_1000A2660;
        *(void *)(v117 + 56) = &type metadata for String;
        *(void *)(v117 + 32) = v137;
        *(void *)(v117 + 40) = v135;
        swift_bridgeObjectRetain();
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();
      sub_10001EE50(v17, (uint64_t)&v141);
      sub_10002B998((uint64_t)&v141, (uint64_t)v143, &qword_1000C5020);
      sub_10002B998((uint64_t)v143, (uint64_t)&v144, &qword_1000C5020);
      if (sub_10002B7D0((uint64_t)&v144) == 1) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100022DCC(uint64_t result)
{
  int64_t v1 = 0;
  uint64_t v2 = result + 64;
  uint64_t v3 = 1 << *(unsigned char *)(result + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(result + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  while (v5)
  {
    unint64_t v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v8 = v7 | (v1 << 6);
LABEL_5:
    if ((*(unsigned char *)(*(void *)(result + 56) + 112 * v8 + 27) & 1) == 0) {
      return 1;
    }
  }
  int64_t v9 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v9 >= v6) {
    return 0;
  }
  unint64_t v10 = *(void *)(v2 + 8 * v9);
  ++v1;
  if (v10) {
    goto LABEL_22;
  }
  int64_t v1 = v9 + 1;
  if (v9 + 1 >= v6) {
    return 0;
  }
  unint64_t v10 = *(void *)(v2 + 8 * v1);
  if (v10) {
    goto LABEL_22;
  }
  int64_t v1 = v9 + 2;
  if (v9 + 2 >= v6) {
    return 0;
  }
  unint64_t v10 = *(void *)(v2 + 8 * v1);
  if (v10) {
    goto LABEL_22;
  }
  int64_t v1 = v9 + 3;
  if (v9 + 3 >= v6) {
    return 0;
  }
  unint64_t v10 = *(void *)(v2 + 8 * v1);
  if (v10)
  {
LABEL_22:
    unint64_t v5 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v1 << 6);
    goto LABEL_5;
  }
  int64_t v11 = v9 + 4;
  if (v11 >= v6) {
    return 0;
  }
  unint64_t v10 = *(void *)(v2 + 8 * v11);
  if (v10)
  {
    int64_t v1 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v1 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v1 >= v6) {
      return 0;
    }
    unint64_t v10 = *(void *)(v2 + 8 * v1);
    ++v11;
    if (v10) {
      goto LABEL_22;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100022EF0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (unsigned char *)(a3 + 16);
  sub_100003DD0(&qword_1000C4758);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1000A2660;
  swift_beginAccess();
  if ((*(unsigned char *)(a3 + 16) & 1) == 0)
  {
    swift_beginAccess();
    a4 = *(void *)(a6 + 16);
    a5 = *(void *)(a6 + 24);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14._char countAndFlagsBits = a1;
  v14._object = a2;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 32) = a4;
  *(void *)(v13 + 40) = a5;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_beginAccess();
  *uint64_t v12 = 0;
  return result;
}

uint64_t sub_100023018()
{
  sub_100003DD0(&qword_1000C4758);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1000A2660;
  *(void *)(v1 + 56) = &type metadata for String;
  *(void *)(v1 + 32) = 0x53524F544341;
  *(void *)(v1 + 40) = 0xE600000000000000;
  print(_:separator:terminator:)();
  uint64_t v2 = swift_bridgeObjectRelease();
  sub_10001F414(v2);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v105 = *(void *)(v4 + 16);
  if (!v105)
  {
    return swift_bridgeObjectRelease();
  }
  unint64_t v5 = (uint64_t *)(v0 + 112);
  swift_beginAccess();
  unint64_t v6 = 0;
  uint64_t v103 = (uint64_t *)(v0 + 112);
  uint64_t v104 = v4;
  while (v6 < *(void *)(v4 + 16))
  {
    uint64_t v12 = swift_reflection_metadataForObject();
    uint64_t v13 = v12;
    uint64_t v14 = *v5;
    if (*(void *)(*v5 + 16))
    {
      unint64_t v15 = sub_100024794(v12);
      if (v16)
      {
        uint64_t v17 = (uint64_t *)(*(void *)(v14 + 56) + 16 * v15);
        uint64_t v19 = *v17;
        uint64_t v18 = (void *)v17[1];
        swift_bridgeObjectRetain();
        goto LABEL_29;
      }
    }
    if (swift_reflection_typeRefForMetadata() && (uint64_t v20 = swift_reflection_copyNameForTypeRef()) != 0)
    {
      uint64_t v21 = (void *)v20;
      uint64_t v19 = String.init(cString:)();
      uint64_t v18 = v22;
      free(v21);
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v18 = 0;
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v24 = (void *)*v5;
    Swift::String v106 = (void *)*v5;
    *unint64_t v5 = 0x8000000000000000;
    unint64_t v26 = sub_100024794(v13);
    uint64_t v27 = v24[2];
    BOOL v28 = (v25 & 1) == 0;
    uint64_t v29 = v27 + v28;
    if (__OFADD__(v27, v28)) {
      goto LABEL_69;
    }
    char v30 = v25;
    if (v24[3] >= v29)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v25 & 1) == 0) {
          goto LABEL_26;
        }
      }
      else
      {
        sub_100026D30();
        unint64_t v24 = v106;
        if ((v30 & 1) == 0) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      sub_100025724(v29, isUniquelyReferenced_nonNull_native);
      unint64_t v24 = v106;
      unint64_t v31 = sub_100024794(v13);
      if ((v30 & 1) != (v32 & 1)) {
        goto LABEL_71;
      }
      unint64_t v26 = v31;
      if ((v30 & 1) == 0)
      {
LABEL_26:
        v24[(v26 >> 6) + 8] |= 1 << v26;
        *(void *)(v24[6] + 8 * v26) = v13;
        Swift::String v34 = (uint64_t *)(v24[7] + 16 * v26);
        *Swift::String v34 = v19;
        v34[1] = (uint64_t)v18;
        uint64_t v35 = v24[2];
        BOOL v36 = __OFADD__(v35, 1);
        uint64_t v37 = v35 + 1;
        if (v36) {
          goto LABEL_70;
        }
        void v24[2] = v37;
        goto LABEL_28;
      }
    }
    unint64_t v33 = (uint64_t *)(v24[7] + 16 * v26);
    swift_bridgeObjectRelease();
    *unint64_t v33 = v19;
    v33[1] = (uint64_t)v18;
LABEL_28:
    *unint64_t v5 = (uint64_t)v24;
    swift_bridgeObjectRelease();
    swift_endAccess();
LABEL_29:
    if (v18) {
      uint64_t v38 = v18;
    }
    else {
      uint64_t v38 = (void *)0x80000001000A8480;
    }
    swift_reflection_actorInfo();
    if (v108)
    {
      swift_bridgeObjectRelease();
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_1000A2660;
      uint64_t v8 = String.init(utf8String:)();
      *(void *)(v7 + 56) = &type metadata for String;
      uint64_t v10 = 0x6E776F6E6B6E753CLL;
      if (v9) {
        uint64_t v10 = v8;
      }
      unint64_t v11 = 0xEF3E726F72726520;
      if (v9) {
        unint64_t v11 = v9;
      }
      *(void *)(v7 + 32) = v10;
      *(void *)(v7 + 40) = v11;
    }
    else
    {
      mach_port_name_t v99 = HIDWORD(v111);
      uint64_t v100 = v111;
      if (v18) {
        uint64_t v39 = v19;
      }
      else {
        uint64_t v39 = 0xD000000000000014;
      }
      if (BYTE1(v109)) {
        int v40 = 256;
      }
      else {
        int v40 = 0;
      }
      int v41 = v40 | v109;
      if (BYTE2(v109)) {
        int v42 = 0x10000;
      }
      else {
        int v42 = 0;
      }
      uint64_t v101 = v110;
      unsigned int v102 = v102 & 0xFFFFFF00 | v111;
      sub_10002B484(v41 | v42 | (BYTE3(v109) << 24), (uint64_t)&v108);
      uint64_t v44 = v108;
      uint64_t v43 = (void *)v109;
      uint64_t v45 = v110;
      uint64_t v46 = v111;
      uint64_t v47 = swift_allocObject();
      *(_OWORD *)(v47 + 16) = xmmword_1000A2660;
      unint64_t v108 = 0;
      unint64_t v109 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      unint64_t v108 = 2016419872;
      unint64_t v109 = 0xE400000000000000;
      sub_100004614();
      v48._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      v49._char countAndFlagsBits = 32;
      v49._object = (void *)0xE100000000000000;
      String.append(_:)(v49);
      v50._char countAndFlagsBits = v39;
      v50._object = v38;
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      v51._char countAndFlagsBits = 0x3D657461747320;
      v51._object = (void *)0xE700000000000000;
      String.append(_:)(v51);
      v52._char countAndFlagsBits = v44;
      v52._object = v43;
      String.append(_:)(v52);
      v53._char countAndFlagsBits = 0x3D7367616C6620;
      v53._object = (void *)0xE700000000000000;
      String.append(_:)(v53);
      v54._char countAndFlagsBits = v45;
      v54._object = v46;
      String.append(_:)(v54);
      v55._char countAndFlagsBits = 0x6F69725078616D20;
      v55._object = (void *)0xED00003D79746972;
      String.append(_:)(v55);
      v56._char countAndFlagsBits = 30768;
      v56._object = (void *)0xE200000000000000;
      String.append(_:)(v56);
      sub_10002B728();
      v57._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v58 = v108;
      unint64_t v59 = v109;
      *(void *)(v47 + 56) = &type metadata for String;
      *(void *)(v47 + 32) = v58;
      *(void *)(v47 + 40) = v59;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      if (v100 && v99)
      {
        sub_1000117C4(v99);
        if (v60)
        {
          uint64_t v61 = swift_allocObject();
          *(_OWORD *)(v61 + 16) = xmmword_1000A2660;
          unint64_t v108 = 0;
          unint64_t v109 = 0xE000000000000000;
          _StringGuts.grow(_:)(50);
          swift_bridgeObjectRelease();
          unint64_t v108 = 0xD00000000000001ELL;
          unint64_t v109 = 0x80000001000A8500;
          sub_10002B77C();
          v66._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v66);
          swift_bridgeObjectRelease();
          v67._char countAndFlagsBits = 0xD000000000000014;
          v67._object = (void *)0x80000001000A8520;
          String.append(_:)(v67);
        }
        else
        {
          uint64_t v61 = swift_allocObject();
          *(_OWORD *)(v61 + 16) = xmmword_1000A2660;
          unint64_t v108 = 0;
          unint64_t v109 = 0xE000000000000000;
          _StringGuts.grow(_:)(36);
          swift_bridgeObjectRelease();
          unint64_t v108 = 0xD00000000000001ELL;
          unint64_t v109 = 0x80000001000A8500;
          sub_10002B77C();
          v62._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v62);
          swift_bridgeObjectRelease();
          v63._char countAndFlagsBits = 1029990688;
          v63._object = (void *)0xE400000000000000;
          String.append(_:)(v63);
          v64._char countAndFlagsBits = 30768;
          v64._object = (void *)0xE200000000000000;
          String.append(_:)(v64);
          v65._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v65);
          swift_bridgeObjectRelease();
        }
        unint64_t v69 = v108;
        unint64_t v68 = v109;
        *(void *)(v61 + 56) = &type metadata for String;
        *(void *)(v61 + 32) = v69;
        *(void *)(v61 + 40) = v68;
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
      }
      uint64_t v70 = swift_allocObject();
      uint64_t v71 = v70;
      if (v101)
      {
        *(_OWORD *)(v70 + 16) = xmmword_1000A2660;
        unint64_t v108 = 0;
        unint64_t v109 = 0xE000000000000000;
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease();
        unint64_t v108 = 0x20626F6A20202020;
        unint64_t v109 = 0xEF203A6575657571;
        v72._char countAndFlagsBits = sub_100023C00(v101);
        String.append(_:)(v72);
        swift_bridgeObjectRelease();
        unint64_t v73 = v108;
        unint64_t v74 = v109;
        *(void *)(v71 + 56) = &type metadata for String;
        *(void *)(v71 + 32) = v73;
        *(void *)(v71 + 40) = v74;
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
        uint64_t Job = swift_reflection_nextJob();
        if (Job)
        {
          uint64_t v76 = Job;
          BOOL v77 = 0;
          for (uint64_t i = 1; ; ++i)
          {
            uint64_t v79 = swift_allocObject();
            *(_OWORD *)(v79 + 16) = xmmword_1000A2660;
            unint64_t v108 = 0;
            unint64_t v109 = 0xE000000000000000;
            _StringGuts.grow(_:)(17);
            swift_bridgeObjectRelease();
            unint64_t v108 = 0x2020202020202020;
            unint64_t v109 = 0xEF20202020202020;
            unint64_t v80 = sub_10001F8F8();
            if (*(void *)(v80 + 16) && (unint64_t v81 = sub_100024794(v76), (v82 & 1) != 0))
            {
              uint64_t v83 = *(void *)(*(void *)(v80 + 56) + 112 * v81 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              v107._char countAndFlagsBits = 0x7830206B736154;
              v107._object = (void *)0xE700000000000000;
              v84._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
              String.append(_:)(v84);
              swift_bridgeObjectRelease();
              v85._char countAndFlagsBits = 32;
              v85._object = (void *)0xE100000000000000;
              String.append(_:)(v85);
              uint64_t v86 = sub_1000218E8(v83);
              BOOL v88 = v87;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v89._char countAndFlagsBits = v86;
              v89._object = v88;
              String.append(_:)(v89);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              _StringGuts.grow(_:)(17);
              swift_bridgeObjectRelease();
              v107._char countAndFlagsBits = 0xD000000000000010;
              v107._object = (void *)0x80000001000A84A0;
              v90._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
              String.append(_:)(v90);
              swift_bridgeObjectRelease();
              v91._char countAndFlagsBits = 62;
              v91._object = (void *)0xE100000000000000;
              String.append(_:)(v91);
            }
            String.append(_:)(v107);
            swift_bridgeObjectRelease();
            unint64_t v92 = v108;
            unint64_t v93 = v109;
            *(void *)(v79 + 56) = &type metadata for String;
            *(void *)(v79 + 32) = v92;
            *(void *)(v79 + 40) = v93;
            print(_:separator:terminator:)();
            swift_bridgeObjectRelease();
            if (v77)
            {
              uint64_t v71 = swift_allocObject();
              unint64_t v96 = 0x80000001000A84C0;
              unint64_t v95 = 0xD00000000000001ELL;
              goto LABEL_61;
            }
            if (__OFADD__(i, 1)) {
              break;
            }
            uint64_t v94 = swift_reflection_nextJob();
            if (!v94) {
              goto LABEL_62;
            }
            uint64_t v76 = v94;
            BOOL v77 = i == 999;
          }
          __break(1u);
          break;
        }
      }
      else
      {
        unint64_t v95 = 0xD000000000000012;
        unint64_t v96 = 0x80000001000A84E0;
LABEL_61:
        *(_OWORD *)(v71 + 16) = xmmword_1000A2660;
        *(void *)(v71 + 56) = &type metadata for String;
        *(void *)(v71 + 32) = v95;
        *(void *)(v71 + 40) = v96;
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
      }
LABEL_62:
      uint64_t v97 = swift_allocObject();
      *(_OWORD *)(v97 + 16) = xmmword_1000A2660;
      *(void *)(v97 + 56) = &type metadata for String;
      *(void *)(v97 + 32) = 0;
      *(void *)(v97 + 40) = 0xE000000000000000;
    }
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    ++v6;
    unint64_t v5 = v103;
    uint64_t v4 = v104;
    if (v6 == v105) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100023C00(uint64_t a1)
{
  unint64_t v2 = sub_10001F8F8();
  if (*(void *)(v2 + 16) && (unint64_t v3 = sub_100024794(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 112 * v3 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v15 = 0x7830206B736154;
    sub_100004614();
    v6._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._char countAndFlagsBits = 32;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    uint64_t v8 = sub_1000218E8(v5);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11._char countAndFlagsBits = v8;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    unint64_t v15 = 0xD000000000000010;
    sub_100004614();
    v12._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._char countAndFlagsBits = 62;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
  }
  return v15;
}

uint64_t sub_100023DB4()
{
  sub_100003DD0(&qword_1000C4758);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1000A2660;
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 32) = 0x53444145524854;
  *(void *)(v0 + 40) = 0xE700000000000000;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = sub_10001F64C()[2];
  swift_bridgeObjectRelease();
  if (v1)
  {
    unint64_t v2 = sub_10001F64C();
    uint64_t v3 = v2[2];
    if (v3)
    {
      char v4 = v2 + 5;
      do
      {
        uint64_t v18 = v3;
        uint64_t v13 = *v4;
        if (*(void *)(sub_10001F8F8() + 16) && (sub_100024794(v13), (v14 & 1) != 0))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          sub_100004614();
          v15._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v15);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v7 = 30768;
          uint64_t v8 = (void *)0xE200000000000000;
        }
        else
        {
          swift_bridgeObjectRelease();
          _StringGuts.grow(_:)(17);
          swift_bridgeObjectRelease();
          sub_100004614();
          v5._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v5);
          swift_bridgeObjectRelease();
          v6._char countAndFlagsBits = 62;
          v6._object = (void *)0xE100000000000000;
          String.append(_:)(v6);
          uint64_t v7 = 0xD000000000000010;
          uint64_t v8 = (void *)0x80000001000A8440;
        }
        v4 += 2;
        uint64_t v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = xmmword_1000A2660;
        _StringGuts.grow(_:)(30);
        swift_bridgeObjectRelease();
        sub_100004614();
        v10._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v10);
        swift_bridgeObjectRelease();
        v11._char countAndFlagsBits = 0xD000000000000011;
        v11._object = (void *)0x80000001000A8420;
        String.append(_:)(v11);
        v12._char countAndFlagsBits = v7;
        v12._object = v8;
        String.append(_:)(v12);
        swift_bridgeObjectRelease();
        *(void *)(v9 + 56) = &type metadata for String;
        *(void *)(v9 + 32) = 0x6461657268542020;
        *(void *)(v9 + 40) = 0xEB00000000783020;
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
        uint64_t v3 = v18 - 1;
      }
      while (v18 != 1);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1000A2660;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 32) = 0xD00000000000001ELL;
    *(void *)(v16 + 40) = 0x80000001000A8460;
    print(_:separator:terminator:)();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100024170()
{
  swift_release();
  sub_10002BC28(*(void *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConcurrencyDumper()
{
  return self;
}

uint64_t destroy for ConcurrencyDumper.TaskInfo()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConcurrencyDumper.TaskInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v3;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConcurrencyDumper.TaskInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  int v4 = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v5;
  return a1;
}

__n128 initializeWithTake for ConcurrencyDumper.TaskInfo(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ConcurrencyDumper.TaskInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConcurrencyDumper.TaskInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 105)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConcurrencyDumper.TaskInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 105) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConcurrencyDumper.TaskInfo()
{
  return &type metadata for ConcurrencyDumper.TaskInfo;
}

uint64_t destroy for ConcurrencyDumper.HeapInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s13swift_inspect17ConcurrencyDumperC8HeapInfoVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ConcurrencyDumper.HeapInfo(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ConcurrencyDumper.HeapInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SplitArguments(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SplitArguments(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConcurrencyDumper.HeapInfo()
{
  return &type metadata for ConcurrencyDumper.HeapInfo;
}

unint64_t sub_100024794(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_100024898(a1, v2);
}

unint64_t sub_1000247D8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100024934(a1, a2, v4);
}

unint64_t sub_100024850(unsigned __int8 a1)
{
  uint64_t v2 = static Hasher._hash(seed:bytes:count:)();

  return sub_100024A18(a1, v2);
}

unint64_t sub_100024898(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100024934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    Swift::String v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100024A18(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100024AB8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100003DD0(&qword_1000C5070);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  *uint64_t v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100024D70(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100003DD0(&qword_1000C5080);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    char v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  char v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100025098(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100003DD0(&qword_1000C5058);
  char v41 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v39 = (uint64_t *)(v5 + 64);
    uint64_t v40 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v35 = -1 << v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v37 = v3;
    int64_t v38 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v39;
        if (v20 >= v38) {
          goto LABEL_33;
        }
        unint64_t v21 = v39[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v38) {
            goto LABEL_33;
          }
          unint64_t v21 = v39[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v38)
            {
LABEL_33:
              if ((v41 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v37;
                goto LABEL_40;
              }
              if (v36 >= 64) {
                bzero(v39, 8 * v38);
              }
              else {
                *uint64_t v39 = v35;
              }
              uint64_t v3 = v37;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v39[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v38) {
                  goto LABEL_33;
                }
                unint64_t v21 = v39[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = *(void *)(v5 + 56) + 112 * v19;
      uint64_t v29 = *(void *)v28;
      uint64_t v30 = *(void *)(v28 + 8);
      char v31 = *(unsigned char *)(v28 + 16);
      char v32 = *(unsigned char *)(v28 + 17);
      char v54 = *(unsigned char *)(v28 + 19);
      char v55 = *(unsigned char *)(v28 + 18);
      char v52 = *(unsigned char *)(v28 + 24);
      int v53 = *(_DWORD *)(v28 + 20);
      char v50 = *(unsigned char *)(v28 + 26);
      char v51 = *(unsigned char *)(v28 + 25);
      char v48 = *(unsigned char *)(v28 + 28);
      char v49 = *(unsigned char *)(v28 + 27);
      int v46 = *(_DWORD *)(v28 + 32);
      char v47 = *(unsigned char *)(v28 + 29);
      char v45 = *(unsigned char *)(v28 + 36);
      long long v57 = *(_OWORD *)(v28 + 40);
      long long v56 = *(_OWORD *)(v28 + 56);
      uint64_t v33 = *(void *)(v28 + 80);
      uint64_t v34 = *(void *)(v28 + 88);
      uint64_t v43 = *(void *)(v28 + 96);
      uint64_t v44 = *(void *)(v28 + 72);
      char v42 = *(unsigned char *)(v28 + 104);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      uint64_t v17 = *(void *)(v7 + 56) + 112 * v16;
      *(void *)uint64_t v17 = v29;
      *(void *)(v17 + 8) = v30;
      *(unsigned char *)(v17 + 16) = v31;
      *(unsigned char *)(v17 + 17) = v32;
      *(unsigned char *)(v17 + 18) = v55;
      *(unsigned char *)(v17 + 19) = v54;
      *(_DWORD *)(v17 + 20) = v53;
      *(unsigned char *)(v17 + 24) = v52;
      *(unsigned char *)(v17 + 25) = v51;
      *(unsigned char *)(v17 + 26) = v50;
      *(unsigned char *)(v17 + 27) = v49;
      *(unsigned char *)(v17 + 28) = v48;
      *(unsigned char *)(v17 + 29) = v47;
      *(_DWORD *)(v17 + 32) = v46;
      *(unsigned char *)(v17 + 36) = v45;
      *(_OWORD *)(v17 + 40) = v57;
      *(_OWORD *)(v17 + 56) = v56;
      *(void *)(v17 + 72) = v44;
      *(void *)(v17 + 80) = v33;
      *(void *)(v17 + 88) = v34;
      *(void *)(v17 + 96) = v43;
      *(unsigned char *)(v17 + 104) = v42;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v40;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10002547C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100003DD0(&qword_1000C5018);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    uint64_t v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100025724(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100003DD0(&qword_1000C5000);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v29 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = v3;
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v13) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v31;
                goto LABEL_40;
              }
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v29;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v13) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      long long v32 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v17 == v25;
          if (v17 == v25) {
            unint64_t v17 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        unint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v7 + 48) + 8 * v18) = v28;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v32;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000259D8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100003DD0(&qword_1000C5040);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    long long v32 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v30 = -1 << v10;
    uint64_t v31 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v30;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      char v22 = *(unsigned char *)(*(void *)(v5 + 56) + v17);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      *(unsigned char *)(*(void *)(v7 + 56) + v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_100025C78(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          int64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100025E50(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        unint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t result = v15 + 112 * v3;
            unint64_t v16 = (const void *)(v15 + 112 * v6);
            if (112 * v3 < (uint64_t)(112 * v6)
              || result >= (unint64_t)v16 + 112
              || (v17 = v3 == v6, int64_t v3 = v6, !v17))
            {
              uint64_t result = (unint64_t)memmove((void *)result, v16, 0x70uLL);
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100026000(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100024794(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000265CC();
LABEL_7:
    unint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(void *)(v16[6] + v19) = a2;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_100024AB8(result, a3 & 1);
  uint64_t result = sub_100024794(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    unint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10002613C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1000247D8(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100026770();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      BOOL v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *BOOL v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_100024D70(v17, a5 & 1);
  unint64_t v23 = sub_1000247D8(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  unint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *unint64_t v25 = a3;
  v25[1] = a4;
  char v26 = (void *)(v20[7] + 16 * v14);
  *char v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v29;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000262C4(long long *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100024794(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 < result || (a3 & 1) == 0)
  {
    if (v15 < result || (a3 & 1) != 0)
    {
      sub_100025098(result, a3 & 1);
      uint64_t result = sub_100024794(a2);
      if ((v14 & 1) != (v18 & 1))
      {
LABEL_17:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v10 = result;
      BOOL v16 = (void *)*v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
    uint64_t result = (uint64_t)sub_10002692C();
  }
  BOOL v16 = (void *)*v4;
  if ((v14 & 1) == 0)
  {
LABEL_13:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(void *)(v16[6] + 8 * v10) = a2;
    uint64_t v19 = (_OWORD *)(v16[7] + 112 * v10);
    long long v20 = *a1;
    long long v21 = a1[2];
    v19[1] = a1[1];
    v19[2] = v21;
    *uint64_t v19 = v20;
    long long v22 = a1[3];
    long long v23 = a1[4];
    long long v24 = a1[5];
    *(_OWORD *)((char *)v19 + 89) = *(long long *)((char *)a1 + 89);
    v19[4] = v23;
    v19[5] = v24;
    v19[3] = v22;
    uint64_t v25 = v16[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (!v26)
    {
      v16[2] = v27;
      return result;
    }
    goto LABEL_16;
  }
LABEL_8:
  uint64_t v17 = v16[7] + 112 * v10;

  return sub_10002BAFC((uint64_t)a1, v17);
}

uint64_t sub_100026448(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100024794(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100026EDC();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(unsigned char *)(v16[7] + v10) = a1 & 1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(void *)(v16[6] + 8 * v10) = a2;
    *(unsigned char *)(v16[7] + v10) = a1 & 1;
    uint64_t v18 = v16[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_1000259D8(result, a3 & 1);
  uint64_t result = sub_100024794(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    BOOL v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_10002657C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  unint64_t v6 = (void *)(a6[6] + 16 * result);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

void *sub_1000265CC()
{
  uint64_t v1 = v0;
  sub_100003DD0(&qword_1000C5070);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100026770()
{
  uint64_t v1 = v0;
  sub_100003DD0(&qword_1000C5080);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    long long v23 = (void *)(*(void *)(v4 + 48) + v16);
    *long long v23 = v19;
    v23[1] = v18;
    long long v24 = (void *)(*(void *)(v4 + 56) + v16);
    *long long v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10002692C()
{
  sub_100003DD0(&qword_1000C5058);
  char v45 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v1 + 16);
  if (!v4)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *char v45 = v3;
    return result;
  }
  uint64_t result = (void *)(v2 + 64);
  unint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
  {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v6);
    uint64_t v4 = *(void *)(v1 + 16);
  }
  uint64_t v46 = v1 + 64;
  int64_t v8 = 0;
  *(void *)(v3 + 16) = v4;
  uint64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    int64_t v42 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v42 >= v12) {
      goto LABEL_26;
    }
    unint64_t v43 = *(void *)(v46 + 8 * v42);
    ++v8;
    if (!v43)
    {
      int64_t v8 = v42 + 1;
      if (v42 + 1 >= v12) {
        goto LABEL_26;
      }
      unint64_t v43 = *(void *)(v46 + 8 * v8);
      if (!v43) {
        break;
      }
    }
LABEL_25:
    unint64_t v11 = (v43 - 1) & v43;
    unint64_t v14 = __clz(__rbit64(v43)) + (v8 << 6);
LABEL_12:
    uint64_t v15 = 8 * v14;
    uint64_t v16 = *(void *)(*(void *)(v1 + 48) + 8 * v14);
    uint64_t v17 = 112 * v14;
    uint64_t v18 = *(void *)(v1 + 56) + v17;
    uint64_t v19 = *(void *)v18;
    char v20 = *(unsigned char *)(v18 + 16);
    char v21 = *(unsigned char *)(v18 + 17);
    char v22 = *(unsigned char *)(v18 + 18);
    char v23 = *(unsigned char *)(v18 + 19);
    int v24 = *(_DWORD *)(v18 + 20);
    char v25 = *(unsigned char *)(v18 + 24);
    char v26 = *(unsigned char *)(v18 + 25);
    char v27 = *(unsigned char *)(v18 + 26);
    char v28 = *(unsigned char *)(v18 + 27);
    char v29 = *(unsigned char *)(v18 + 28);
    char v30 = *(unsigned char *)(v18 + 29);
    int v31 = *(_DWORD *)(v18 + 32);
    char v32 = *(unsigned char *)(v18 + 36);
    uint64_t v34 = *(void *)(v18 + 72);
    uint64_t v33 = *(void *)(v18 + 80);
    uint64_t v35 = *(void *)(v18 + 88);
    uint64_t v36 = *(void *)(v18 + 96);
    char v37 = *(unsigned char *)(v18 + 104);
    uint64_t v38 = *(void *)(v18 + 8);
    long long v39 = *(_OWORD *)(v18 + 40);
    long long v40 = *(_OWORD *)(v18 + 56);
    *(void *)(*(void *)(v3 + 48) + v15) = v16;
    uint64_t v41 = *(void *)(v3 + 56) + v17;
    *(void *)uint64_t v41 = v19;
    *(void *)(v41 + 8) = v38;
    *(unsigned char *)(v41 + 16) = v20;
    *(unsigned char *)(v41 + 17) = v21;
    *(unsigned char *)(v41 + 18) = v22;
    *(unsigned char *)(v41 + 19) = v23;
    *(_DWORD *)(v41 + 20) = v24;
    *(unsigned char *)(v41 + 24) = v25;
    *(unsigned char *)(v41 + 25) = v26;
    *(unsigned char *)(v41 + 26) = v27;
    *(unsigned char *)(v41 + 27) = v28;
    *(unsigned char *)(v41 + 28) = v29;
    *(unsigned char *)(v41 + 29) = v30;
    *(_DWORD *)(v41 + 32) = v31;
    *(unsigned char *)(v41 + 36) = v32;
    *(_OWORD *)(v41 + 40) = v39;
    *(_OWORD *)(v41 + 56) = v40;
    *(void *)(v41 + 72) = v34;
    *(void *)(v41 + 80) = v33;
    *(void *)(v41 + 88) = v35;
    *(void *)(v41 + 96) = v36;
    *(unsigned char *)(v41 + 104) = v37;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v44 = v42 + 2;
  if (v44 >= v12) {
    goto LABEL_26;
  }
  unint64_t v43 = *(void *)(v46 + 8 * v44);
  if (v43)
  {
    int64_t v8 = v44;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v8 = v44 + 1;
    if (__OFADD__(v44, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_26;
    }
    unint64_t v43 = *(void *)(v46 + 8 * v8);
    ++v44;
    if (v43) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100026BA0()
{
  uint64_t v1 = v0;
  sub_100003DD0(&qword_1000C5018);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100026D30()
{
  uint64_t v1 = v0;
  sub_100003DD0(&qword_1000C5000);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100026EDC()
{
  uint64_t v1 = v0;
  sub_100003DD0(&qword_1000C5040);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10002706C(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10002A3F8((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_100027264(v5);
  *a1 = v2;
  return result;
}

void *sub_1000270D8(const void *a1, uint64_t a2)
{
  if (!a2) {
    return _swiftEmptyArrayStorage;
  }
  if (a2 <= 0)
  {
    size_t v4 = 8 * a2;
    uint64_t v5 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100003DD0(&qword_1000C4C38);
    size_t v4 = 8 * a2;
    uint64_t v5 = (void *)swift_allocObject();
    int64_t v6 = j__malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 25;
    }
    uint64_t v5[2] = a2;
    v5[3] = 2 * (v7 >> 3);
  }
  memcpy(v5 + 4, a1, v4);
  return v5;
}

void *sub_10002717C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100003DD0(&qword_1000C5078);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 1;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 5);
  uint64_t v6 = sub_1000128A8((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_10002BDC8();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_100027264(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_135;
    }
    if ((unint64_t)v3 >= 2)
    {
      Swift::String v107 = (long long *)*a1;
      uint64_t v108 = -1;
      uint64_t v109 = 1;
      uint64_t v110 = (long long *)*a1;
      do
      {
        uint64_t v111 = v108;
        int v112 = v110;
        do
        {
          unint64_t v113 = *((void *)v112 + 19);
          if (v113 >= *((void *)v112 + 5)) {
            break;
          }
          if (!v107) {
            goto LABEL_139;
          }
          Swift::String v114 = v112 + 7;
          uint64_t v115 = *((void *)v112 + 14);
          char v116 = *((unsigned char *)v112 + 128);
          char v117 = *((unsigned char *)v112 + 129);
          uint64_t result = *((unsigned __int8 *)v112 + 130);
          char v118 = *((unsigned char *)v112 + 131);
          int v119 = *((_DWORD *)v112 + 33);
          char v120 = *((unsigned char *)v112 + 136);
          char v121 = *((unsigned char *)v112 + 137);
          char v122 = *((unsigned char *)v112 + 138);
          char v123 = *((unsigned char *)v112 + 139);
          char v124 = *((unsigned char *)v112 + 140);
          char v125 = *((unsigned char *)v112 + 141);
          int v126 = *((_DWORD *)v112 + 36);
          char v127 = *((unsigned char *)v112 + 148);
          long long v129 = v112[11];
          long long v128 = v112[12];
          uint64_t v130 = *((void *)v112 + 15);
          long long v131 = v112[10];
          long long v132 = v112[5];
          v112[11] = v112[4];
          v112[12] = v132;
          long long v133 = *v112;
          long long v134 = v112[1];
          *((void *)v112 + 1) = v130;
          long long v136 = v112[2];
          long long v135 = v112[3];
          v112[3] = v131;
          v112[4] = v129;
          uint64_t v137 = *((void *)v112 + 26);
          char v138 = *((unsigned char *)v112 + 216);
          v112[5] = v128;
          long long v139 = v112[6];
          *(void *)int v112 = v115;
          *((unsigned char *)v112 + 16) = v116;
          *((unsigned char *)v112 + 17) = v117;
          *((unsigned char *)v112 + 18) = result;
          *((unsigned char *)v112 + 19) = v118;
          *((_DWORD *)v112 + 5) = v119;
          *((unsigned char *)v112 + 24) = v120;
          *((unsigned char *)v112 + 25) = v121;
          *((unsigned char *)v112 + 26) = v122;
          *((unsigned char *)v112 + 27) = v123;
          *((unsigned char *)v112 + 28) = v124;
          *((unsigned char *)v112 + 29) = v125;
          *((_DWORD *)v112 + 8) = v126;
          *((unsigned char *)v112 + 36) = v127;
          *((void *)v112 + 5) = v113;
          *((void *)v112 + 12) = v137;
          *((unsigned char *)v112 + 104) = v138;
          v112 -= 7;
          v114[6] = v139;
          *Swift::String v114 = v133;
          v114[1] = v134;
          v114[2] = v136;
          v114[3] = v135;
        }
        while (!__CFADD__(v111++, 1));
        ++v109;
        v110 += 7;
        --v108;
      }
      while (v109 != v3);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_134;
  }
  uint64_t v155 = result;
  uint64_t v177 = v1;
  char v151 = a1;
  if (v3 > 1)
  {
    uint64_t v6 = v5 >> 1;
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = v6;
    int v154 = (void *)result;
    uint64_t v175 = (char *)(result + 32);
LABEL_13:
    Swift::Int v8 = 0;
    uint64_t v9 = *a1;
    uint64_t v152 = *a1 + 152;
    uint64_t v153 = *a1 + 40;
    uint64_t v150 = *a1 - 112;
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    Swift::Int v156 = v3;
    uint64_t v176 = *a1;
    while (1)
    {
      Swift::Int v12 = v8++;
      if (v8 < v3)
      {
        unint64_t v13 = *(void *)(v153 + 112 * v8);
        unint64_t v14 = *(void *)(v153 + 112 * v12);
        Swift::Int v8 = v12 + 2;
        if (v12 + 2 < v3)
        {
          unint64_t v15 = (unint64_t *)(v152 + 112 * v12);
          char v16 = v15;
          while (1)
          {
            unint64_t v17 = v16[14];
            v16 += 14;
            if (v13 < v14 == v17 >= *v15) {
              break;
            }
            ++v8;
            unint64_t v15 = v16;
            if (v3 == v8)
            {
              Swift::Int v8 = v3;
              break;
            }
          }
        }
        if (v13 < v14)
        {
          if (v8 < v12) {
            goto LABEL_136;
          }
          if (v12 < v8)
          {
            int v149 = v10;
            uint64_t v18 = 112 * v8;
            Swift::Int v19 = v8;
            Swift::Int v20 = v12;
            uint64_t v21 = 112 * v12;
            do
            {
              if (v20 != --v19)
              {
                if (!v9) {
                  goto LABEL_142;
                }
                uint64_t v22 = *(void *)(v9 + v21);
                uint64_t v23 = v9 + v18;
                char v24 = *(unsigned char *)(v9 + v21 + 16);
                char v170 = *(unsigned char *)(v9 + v21 + 18);
                char v171 = *(unsigned char *)(v9 + v21 + 17);
                char v169 = *(unsigned char *)(v9 + v21 + 19);
                char v167 = *(unsigned char *)(v9 + v21 + 24);
                int v168 = *(_DWORD *)(v9 + v21 + 20);
                char v165 = *(unsigned char *)(v9 + v21 + 26);
                char v166 = *(unsigned char *)(v9 + v21 + 25);
                char v163 = *(unsigned char *)(v9 + v21 + 28);
                char v164 = *(unsigned char *)(v9 + v21 + 27);
                int v161 = *(_DWORD *)(v9 + v21 + 32);
                char v162 = *(unsigned char *)(v9 + v21 + 29);
                char v160 = *(unsigned char *)(v9 + v21 + 36);
                uint64_t v172 = *(void *)(v9 + v21 + 72);
                uint64_t v174 = *(void *)(v9 + v21 + 96);
                char v173 = *(unsigned char *)(v9 + v21 + 104);
                uint64_t v25 = *(void *)(v9 + v21 + 8);
                long long v158 = *(_OWORD *)(v9 + v21 + 40);
                long long v159 = *(_OWORD *)(v9 + v21 + 80);
                long long v157 = *(_OWORD *)(v9 + v21 + 56);
                uint64_t result = (uint64_t)memmove((void *)(v9 + v21), (const void *)(v9 + v18 - 112), 0x70uLL);
                uint64_t v9 = v176;
                *(void *)(v23 - 112) = v22;
                *(void *)(v23 - 104) = v25;
                *(unsigned char *)(v23 - 96) = v24;
                *(unsigned char *)(v23 - 95) = v171;
                *(unsigned char *)(v23 - 94) = v170;
                *(unsigned char *)(v23 - 93) = v169;
                *(_DWORD *)(v23 - 92) = v168;
                *(unsigned char *)(v23 - 88) = v167;
                *(unsigned char *)(v23 - 87) = v166;
                *(unsigned char *)(v23 - 86) = v165;
                *(unsigned char *)(v23 - 85) = v164;
                *(unsigned char *)(v23 - 84) = v163;
                *(unsigned char *)(v23 - 83) = v162;
                *(_DWORD *)(v23 - 80) = v161;
                *(unsigned char *)(v23 - 76) = v160;
                *(_OWORD *)(v23 - 72) = v158;
                *(_OWORD *)(v23 - 56) = v157;
                *(void *)(v23 - 40) = v172;
                *(_OWORD *)(v23 - 32) = v159;
                *(void *)(v23 - 16) = v174;
                *(unsigned char *)(v23 - 8) = v173;
              }
              ++v20;
              v18 -= 112;
              v21 += 112;
            }
            while (v20 < v19);
            Swift::Int v3 = v156;
            uint64_t v10 = v149;
          }
        }
      }
      if (v8 < v3)
      {
        if (__OFSUB__(v8, v12)) {
          goto LABEL_133;
        }
        if (v8 - v12 < v155)
        {
          Swift::Int v26 = v12 + v155;
          if (__OFADD__(v12, v155)) {
            goto LABEL_137;
          }
          if (v26 >= v3) {
            Swift::Int v26 = v3;
          }
          if (v26 < v12)
          {
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
            return result;
          }
          if (v8 != v26)
          {
            uint64_t v27 = v150 + 112 * v8;
            do
            {
              Swift::Int v28 = v12;
              uint64_t v29 = v27;
              do
              {
                unint64_t v30 = *(void *)(v29 + 152);
                if (v30 >= *(void *)(v29 + 40)) {
                  break;
                }
                if (!v9) {
                  goto LABEL_140;
                }
                int v31 = (_OWORD *)(v29 + 112);
                uint64_t v32 = *(void *)(v29 + 112);
                char v33 = *(unsigned char *)(v29 + 128);
                char v34 = *(unsigned char *)(v29 + 129);
                char v35 = *(unsigned char *)(v29 + 130);
                char v36 = *(unsigned char *)(v29 + 131);
                uint64_t result = *(unsigned int *)(v29 + 132);
                char v37 = *(unsigned char *)(v29 + 136);
                char v38 = *(unsigned char *)(v29 + 137);
                char v39 = *(unsigned char *)(v29 + 138);
                char v40 = *(unsigned char *)(v29 + 139);
                char v41 = *(unsigned char *)(v29 + 140);
                char v42 = *(unsigned char *)(v29 + 141);
                int v43 = *(_DWORD *)(v29 + 144);
                char v44 = *(unsigned char *)(v29 + 148);
                long long v46 = *(_OWORD *)(v29 + 176);
                long long v45 = *(_OWORD *)(v29 + 192);
                uint64_t v47 = *(void *)(v29 + 120);
                long long v48 = *(_OWORD *)(v29 + 160);
                long long v49 = *(_OWORD *)(v29 + 80);
                *(_OWORD *)(v29 + 176) = *(_OWORD *)(v29 + 64);
                *(_OWORD *)(v29 + 192) = v49;
                long long v50 = *(_OWORD *)v29;
                long long v51 = *(_OWORD *)(v29 + 16);
                *(void *)(v29 + 8) = v47;
                long long v53 = *(_OWORD *)(v29 + 32);
                long long v52 = *(_OWORD *)(v29 + 48);
                *(_OWORD *)(v29 + 48) = v48;
                *(_OWORD *)(v29 + 64) = v46;
                uint64_t v54 = *(void *)(v29 + 208);
                char v55 = *(unsigned char *)(v29 + 216);
                *(_OWORD *)(v29 + 80) = v45;
                long long v56 = *(_OWORD *)(v29 + 96);
                *(void *)uint64_t v29 = v32;
                *(unsigned char *)(v29 + 16) = v33;
                *(unsigned char *)(v29 + 17) = v34;
                *(unsigned char *)(v29 + 18) = v35;
                *(unsigned char *)(v29 + 19) = v36;
                *(_DWORD *)(v29 + 20) = result;
                *(unsigned char *)(v29 + 24) = v37;
                *(unsigned char *)(v29 + 25) = v38;
                *(unsigned char *)(v29 + 26) = v39;
                *(unsigned char *)(v29 + 27) = v40;
                *(unsigned char *)(v29 + 28) = v41;
                *(unsigned char *)(v29 + 29) = v42;
                *(_DWORD *)(v29 + 32) = v43;
                *(unsigned char *)(v29 + 36) = v44;
                *(void *)(v29 + 40) = v30;
                *(void *)(v29 + 96) = v54;
                *(unsigned char *)(v29 + 104) = v55;
                v29 -= 112;
                v31[6] = v56;
                *int v31 = v50;
                v31[1] = v51;
                ++v28;
                v31[2] = v53;
                v31[3] = v52;
              }
              while (v8 != v28);
              ++v8;
              v27 += 112;
            }
            while (v8 != v26);
            Swift::Int v8 = v26;
          }
        }
      }
      if (v8 < v12) {
        goto LABEL_129;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100027DE4(0, *((void *)v10 + 2) + 1, 1, v10);
        uint64_t v10 = (char *)result;
      }
      unint64_t v58 = *((void *)v10 + 2);
      unint64_t v57 = *((void *)v10 + 3);
      unint64_t v11 = v58 + 1;
      uint64_t v9 = v176;
      if (v58 >= v57 >> 1)
      {
        uint64_t result = (uint64_t)sub_100027DE4((char *)(v57 > 1), v58 + 1, 1, v10);
        uint64_t v9 = v176;
        uint64_t v10 = (char *)result;
      }
      *((void *)v10 + 2) = v11;
      unint64_t v59 = v10 + 32;
      char v60 = &v10[16 * v58 + 32];
      *(void *)char v60 = v12;
      *((void *)v60 + 1) = v8;
      if (v58)
      {
        while (1)
        {
          unint64_t v61 = v11 - 1;
          if (v11 >= 4)
          {
            Swift::String v66 = &v59[2 * v11];
            uint64_t v67 = *(v66 - 8);
            uint64_t v68 = *(v66 - 7);
            BOOL v72 = __OFSUB__(v68, v67);
            uint64_t v69 = v68 - v67;
            if (v72) {
              goto LABEL_118;
            }
            uint64_t v71 = *(v66 - 6);
            uint64_t v70 = *(v66 - 5);
            BOOL v72 = __OFSUB__(v70, v71);
            uint64_t v64 = v70 - v71;
            char v65 = v72;
            if (v72) {
              goto LABEL_119;
            }
            unint64_t v73 = v11 - 2;
            unint64_t v74 = &v59[2 * v11 - 4];
            uint64_t v76 = *v74;
            uint64_t v75 = v74[1];
            BOOL v72 = __OFSUB__(v75, v76);
            uint64_t v77 = v75 - v76;
            if (v72) {
              goto LABEL_120;
            }
            BOOL v72 = __OFADD__(v64, v77);
            uint64_t v78 = v64 + v77;
            if (v72) {
              goto LABEL_122;
            }
            if (v78 >= v69)
            {
              unint64_t v96 = &v59[2 * v61];
              uint64_t v98 = *v96;
              uint64_t v97 = v96[1];
              BOOL v72 = __OFSUB__(v97, v98);
              uint64_t v99 = v97 - v98;
              if (v72) {
                goto LABEL_128;
              }
              BOOL v89 = v64 < v99;
              goto LABEL_84;
            }
          }
          else
          {
            if (v11 != 3)
            {
              uint64_t v90 = *((void *)v10 + 4);
              uint64_t v91 = *((void *)v10 + 5);
              BOOL v72 = __OFSUB__(v91, v90);
              uint64_t v83 = v91 - v90;
              char v84 = v72;
              goto LABEL_78;
            }
            uint64_t v63 = *((void *)v10 + 4);
            uint64_t v62 = *((void *)v10 + 5);
            BOOL v72 = __OFSUB__(v62, v63);
            uint64_t v64 = v62 - v63;
            char v65 = v72;
          }
          if (v65) {
            goto LABEL_121;
          }
          unint64_t v73 = v11 - 2;
          uint64_t v79 = &v59[2 * v11 - 4];
          uint64_t v81 = *v79;
          uint64_t v80 = v79[1];
          BOOL v82 = __OFSUB__(v80, v81);
          uint64_t v83 = v80 - v81;
          char v84 = v82;
          if (v82) {
            goto LABEL_123;
          }
          Swift::String v85 = &v59[2 * v61];
          uint64_t v87 = *v85;
          uint64_t v86 = v85[1];
          BOOL v72 = __OFSUB__(v86, v87);
          uint64_t v88 = v86 - v87;
          if (v72) {
            goto LABEL_125;
          }
          if (__OFADD__(v83, v88)) {
            goto LABEL_127;
          }
          if (v83 + v88 >= v64)
          {
            BOOL v89 = v64 < v88;
LABEL_84:
            if (v89) {
              unint64_t v61 = v73;
            }
            goto LABEL_86;
          }
LABEL_78:
          if (v84) {
            goto LABEL_124;
          }
          unint64_t v92 = &v59[2 * v61];
          uint64_t v94 = *v92;
          uint64_t v93 = v92[1];
          BOOL v72 = __OFSUB__(v93, v94);
          uint64_t v95 = v93 - v94;
          if (v72) {
            goto LABEL_126;
          }
          if (v95 < v83) {
            goto LABEL_15;
          }
LABEL_86:
          uint64_t v100 = v10;
          unint64_t v101 = v61 - 1;
          if (v61 - 1 >= v11)
          {
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
            goto LABEL_138;
          }
          if (!v176) {
            goto LABEL_141;
          }
          unsigned int v102 = &v59[2 * v101];
          uint64_t v103 = *v102;
          uint64_t v104 = &v59[2 * v61];
          uint64_t v105 = v104[1];
          uint64_t result = sub_100027B98((char *)(v176 + 112 * *v102), (char *)(v176 + 112 * *v104), v176 + 112 * v105, v175);
          if (v177) {
            goto LABEL_112;
          }
          if (v105 < v103) {
            goto LABEL_115;
          }
          if (v61 > *((void *)v100 + 2)) {
            goto LABEL_116;
          }
          *unsigned int v102 = v103;
          v59[2 * v101 + 1] = v105;
          unint64_t v106 = *((void *)v100 + 2);
          if (v61 >= v106) {
            goto LABEL_117;
          }
          uint64_t v10 = v100;
          unint64_t v11 = v106 - 1;
          uint64_t result = (uint64_t)memmove(&v59[2 * v61], v104 + 2, 16 * (v106 - 1 - v61));
          *((void *)v100 + 2) = v106 - 1;
          uint64_t v9 = v176;
          if (v106 <= 2) {
            goto LABEL_15;
          }
        }
      }
      unint64_t v11 = 1;
LABEL_15:
      Swift::Int v3 = v156;
      if (v8 >= v156)
      {
        uint64_t v7 = v154;
        goto LABEL_103;
      }
    }
  }
  uint64_t v7 = _swiftEmptyArrayStorage;
  uint64_t v175 = (char *)&_swiftEmptyArrayStorage[4];
  if (v3 == 1)
  {
    int v154 = _swiftEmptyArrayStorage;
    goto LABEL_13;
  }
  unint64_t v11 = _swiftEmptyArrayStorage[2];
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
  int v154 = v7;
  if (v11 >= 2)
  {
    uint64_t v141 = *v151;
    if (!*v151) {
      goto LABEL_143;
    }
    do
    {
      uint64_t v142 = v10;
      unint64_t v143 = v11 - 2;
      uint64_t v144 = (uint64_t)v142;
      v142 += 32;
      uint64_t v145 = *(void *)&v142[16 * v11 - 32];
      uint64_t v146 = *(void *)&v142[16 * v11 - 8];
      uint64_t result = sub_100027B98((char *)(v141 + 112 * v145), (char *)(v141 + 112 * *(void *)&v142[16 * v11 - 16]), v141 + 112 * v146, v175);
      if (v177) {
        break;
      }
      if (v146 < v145) {
        goto LABEL_130;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100027EE0(v144);
        uint64_t v144 = result;
      }
      if (v143 >= *(void *)(v144 + 16)) {
        goto LABEL_131;
      }
      uint64_t v147 = (void *)(v144 + 32 + 16 * v143);
      *uint64_t v147 = v145;
      v147[1] = v146;
      unint64_t v148 = *(void *)(v144 + 16);
      if (v11 > v148) {
        goto LABEL_132;
      }
      uint64_t v10 = (char *)v144;
      memmove((void *)(v144 + 32 + 16 * (v11 - 1)), (const void *)(v144 + 32 + 16 * v11), 16 * (v148 - v11));
      *(void *)(v144 + 16) = v148 - 1;
      unint64_t v11 = v148 - 1;
    }
    while (v148 > 2);
  }
LABEL_112:
  swift_bridgeObjectRelease();
  v154[2] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100027B98(char *__dst, char *__src, unint64_t a3, char *a4)
{
  int64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = (__src - __dst) / 112;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 112;
  if (v9 >= v11)
  {
    uint64_t v17 = 112 * v11;
    if (a4 != __src || &__src[v17] <= a4) {
      memmove(a4, __src, 112 * v11);
    }
    unint64_t v13 = &v4[v17];
    if (v7 >= v6 || v10 < 112) {
      goto LABEL_39;
    }
    uint64_t v18 = (char *)(a3 - 112);
    while (1)
    {
      Swift::Int v19 = v18 + 112;
      if (*((void *)v13 - 9) >= *((void *)v6 - 9))
      {
        Swift::Int v20 = v13 - 112;
        if (v19 != v13)
        {
          v13 -= 112;
          goto LABEL_36;
        }
        BOOL v21 = v18 >= v13;
        v13 -= 112;
        if (v21) {
          goto LABEL_36;
        }
      }
      else
      {
        Swift::Int v20 = v6 - 112;
        if (v19 != v6)
        {
          v6 -= 112;
LABEL_36:
          memmove(v18, v20, 0x70uLL);
          goto LABEL_37;
        }
        BOOL v21 = v18 >= v6;
        v6 -= 112;
        if (v21) {
          goto LABEL_36;
        }
      }
LABEL_37:
      if (v6 > v7)
      {
        v18 -= 112;
        if (v13 > v4) {
          continue;
        }
      }
      goto LABEL_39;
    }
  }
  size_t v12 = 112 * v9;
  if (a4 != __dst || &__dst[v12] <= a4) {
    memmove(a4, __dst, v12);
  }
  unint64_t v13 = &v4[v12];
  if ((unint64_t)v6 < a3 && v8 >= 112)
  {
    while (1)
    {
      if (*((void *)v6 + 5) >= *((void *)v4 + 5))
      {
        char v16 = v4 + 112;
        unint64_t v15 = v4;
        unint64_t v14 = v6;
        if (v7 == v4)
        {
          v4 += 112;
          if (v7 < v16) {
            goto LABEL_16;
          }
        }
        else
        {
          v4 += 112;
        }
      }
      else
      {
        unint64_t v14 = v6 + 112;
        unint64_t v15 = v6;
        if (v7 == v6 && v7 < v14) {
          goto LABEL_16;
        }
      }
      memmove(v7, v15, 0x70uLL);
LABEL_16:
      v7 += 112;
      if (v4 < v13)
      {
        uint64_t v6 = v14;
        if ((unint64_t)v14 < a3) {
          continue;
        }
      }
      break;
    }
  }
  uint64_t v6 = v7;
LABEL_39:
  size_t v22 = 112 * ((v13 - v4) / 112);
  if (v6 != v4 || v6 >= &v4[v22]) {
    memmove(v6, v4, v22);
  }
  return 1;
}

char *sub_100027DE4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5030);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100027EE0(uint64_t a1)
{
  return sub_100027DE4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_100027EF4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000280BC(a1, a2, a3, *v3);
  *Swift::Int v3 = result;
  return result;
}

char *sub_100027F14(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100028614(a1, a2, a3, *v3, &qword_1000C4C30);
  *Swift::Int v3 = result;
  return result;
}

char *sub_100027F3C(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000283FC(a1, a2, a3, *v3);
  *Swift::Int v3 = result;
  return result;
}

char *sub_100027F5C(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000284F8(a1, a2, a3, *v3);
  *Swift::Int v3 = result;
  return result;
}

char *sub_100027F7C(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100028614(a1, a2, a3, *v3, &qword_1000C5028);
  *Swift::Int v3 = result;
  return result;
}

char *sub_100027FA4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C40);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 648);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[648 * v8]) {
      memmove(v12, v13, 648 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 648 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1000280BC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C00);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void *sub_1000281C0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5078);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100003DD0(&qword_1000C4D28);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1000282E4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C50);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1000283FC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C4C38);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1000284F8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5038);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[112 * v8]) {
      memmove(v12, v13, 112 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_100028614(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_100003DD0(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    size_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v9);
  }
  swift_release();
  return v11;
}

void (*sub_10002870C(void *a1, uint64_t a2))(uint64_t a1)
{
  int64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_10002A1B0(v4);
  v4[9] = sub_100029B2C(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_10002879C;
}

void sub_10002879C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  v2(v1, 0);

  free(v1);
}

uint64_t sub_1000287FC(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    int64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *Swift::Int v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10002900C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *Swift::Int v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1000289AC(uint64_t *a1, uint64_t a2)
{
  Swift::Int v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *Swift::Int v3 = 0x8000000000000000;
    sub_1000291A8(a2, v9, isUniquelyReferenced_nonNull_native);
    *Swift::Int v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100028AA8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003DD0(&qword_1000C5088);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *BOOL v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100028D88()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003DD0(&qword_1000C5050);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    BOOL v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int sub_10002900C(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  int64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100028AA8();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1000292CC();
      goto LABEL_22;
    }
    sub_100029618();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    int64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *unint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_1000291A8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100028D88();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100029480();
      goto LABEL_14;
    }
    sub_1000298C8();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void *sub_1000292CC()
{
  uint64_t v1 = v0;
  sub_100003DD0(&qword_1000C5088);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100029480()
{
  uint64_t v1 = v0;
  sub_100003DD0(&qword_1000C5050);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100029618()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003DD0(&qword_1000C5088);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000298C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003DD0(&qword_1000C5050);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void (*sub_100029B2C(void *a1, uint64_t a2, char a3))(uint64_t **a1, char a2)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x98uLL);
  *a1 = v8;
  v8[14] = a2;
  v8[15] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = sub_100024794(a2);
  *((unsigned char *)v8 + 105) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[16] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*v4 + 56) + 112 * v11;
        uint64_t v18 = *(void *)(v17 + 40);
        long long v19 = *(_OWORD *)(v17 + 48);
        long long v20 = *(_OWORD *)(v17 + 64);
        long long v21 = *(_OWORD *)(v17 + 80);
        uint64_t v22 = *(void *)(v17 + 96);
        char v23 = *(unsigned char *)(v17 + 104);
        uint64_t v24 = 256;
        if (*(unsigned char *)(v17 + 17)) {
          uint64_t v25 = 256;
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v26 = v25 | *(unsigned __int8 *)(v17 + 16);
        uint64_t v27 = 0x10000;
        if (*(unsigned char *)(v17 + 18)) {
          uint64_t v28 = 0x10000;
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v29 = 0x1000000;
        if (*(unsigned char *)(v17 + 19)) {
          uint64_t v30 = 0x1000000;
        }
        else {
          uint64_t v30 = 0;
        }
        unint64_t v31 = v26 | v28 | v30 | ((unint64_t)*(unsigned int *)(v17 + 20) << 32);
        if (!*(unsigned char *)(v17 + 25)) {
          uint64_t v24 = 0;
        }
        uint64_t v32 = v24 | *(unsigned __int8 *)(v17 + 24);
        if (!*(unsigned char *)(v17 + 26)) {
          uint64_t v27 = 0;
        }
        if (!*(unsigned char *)(v17 + 27)) {
          uint64_t v29 = 0;
        }
        uint64_t v33 = v32 | v27 | v29;
        char v34 = &_mh_execute_header;
        if (*(unsigned char *)(v17 + 28)) {
          char v35 = &_mh_execute_header;
        }
        else {
          char v35 = 0;
        }
        uint64_t v36 = 0x10000000000;
        if (!*(unsigned char *)(v17 + 29)) {
          uint64_t v36 = 0;
        }
        unint64_t v37 = v33 | (unint64_t)v35 | v36;
        if (!*(unsigned char *)(v17 + 36)) {
          char v34 = 0;
        }
        unint64_t v38 = (unint64_t)v34 | *(unsigned int *)(v17 + 32);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v17;
        _OWORD v8[2] = v31;
        v8[3] = v37;
        v8[4] = v38;
        v8[5] = v18;
        goto LABEL_34;
      }
LABEL_33:
      uint64_t v22 = 0;
      char v23 = 0;
      long long v19 = 0uLL;
      *((_OWORD *)v8 + 1) = 0u;
      *((_OWORD *)v8 + 2) = 0u;
      *(_OWORD *)uint64_t v8 = 0u;
      long long v20 = 0uLL;
      long long v21 = 0uLL;
LABEL_34:
      *((_OWORD *)v8 + 3) = v19;
      *((_OWORD *)v8 + 4) = v20;
      *((_OWORD *)v8 + 5) = v21;
      v8[12] = v22;
      *((unsigned char *)v8 + 104) = v23;
      return sub_100029D60;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_10002692C();
      goto LABEL_7;
    }
    sub_100025098(v14, a3 & 1);
    unint64_t v39 = sub_100024794(a2);
    if ((v15 & 1) == (v40 & 1))
    {
      unint64_t v11 = v39;
      v8[16] = v39;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_33;
    }
  }
  uint64_t result = (void (*)(uint64_t **, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100029D60(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1];
  unint64_t v5 = (*a1)[2];
  unint64_t v6 = (*a1)[3];
  uint64_t v7 = (*a1)[4];
  uint64_t v8 = (*a1)[5];
  uint64_t v9 = (*a1)[6];
  uint64_t v10 = (*a1)[7];
  uint64_t v11 = (*a1)[8];
  uint64_t v12 = (*a1)[9];
  uint64_t v13 = (*a1)[10];
  char v14 = *((unsigned char *)*a1 + 104);
  char v15 = *((unsigned char *)*a1 + 105);
  if ((a2 & 1) == 0)
  {
    if (v13)
    {
      uint64_t v61 = (*a1)[12];
      uint64_t v57 = (*a1)[11];
      uint64_t v59 = (*a1)[9];
      uint64_t v63 = (*a1)[10];
      uint64_t v16 = (*a1)[8];
      uint64_t v17 = (*a1)[7];
      uint64_t v18 = (*a1)[6];
      uint64_t v12 = HIDWORD(v4);
      unint64_t v19 = HIDWORD(v5);
      char v20 = v5 & 1;
      unsigned int v21 = (v5 >> 8) & 1;
      unsigned int v22 = WORD1(v5) & 1;
      unsigned int v23 = BYTE3(v5) & 1;
      char v24 = v6 & 1;
      LODWORD(v13) = (v6 >> 8) & 1;
      unsigned int v25 = WORD1(v6) & 1;
      *((unsigned char *)v2 + 140) = BYTE4(v7) & 1;
      unsigned int v26 = BYTE3(v6) & 1;
      uint64_t v27 = HIDWORD(v6) & 1;
      *((unsigned char *)v2 + 144) = v14 & 1;
      unint64_t v28 = v2[16];
      uint64_t v29 = *(void **)v2[15];
      uint64_t v30 = (v6 >> 40) & 1;
      if (v15)
      {
        uint64_t v31 = v29[7] + 112 * v28;
        *(void *)uint64_t v31 = v3;
        uint64_t v32 = (char *)v2 + 140;
        uint64_t v33 = v2 + 18;
        goto LABEL_8;
      }
      goto LABEL_14;
    }
LABEL_9:
    if (*((unsigned char *)*a1 + 105))
    {
      unint64_t v58 = (*a1)[2];
      uint64_t v34 = **a1;
      unint64_t v35 = (*a1)[3];
      uint64_t v36 = (*a1)[4];
      uint64_t v37 = (*a1)[5];
      uint64_t v38 = (*a1)[6];
      uint64_t v39 = (*a1)[7];
      uint64_t v40 = (*a1)[8];
      uint64_t v41 = (*a1)[9];
      uint64_t v64 = (*a1)[10];
      sub_100025E50(v2[16], *(void *)v2[15]);
      uint64_t v13 = v64;
      uint64_t v12 = v41;
      uint64_t v11 = v40;
      uint64_t v10 = v39;
      uint64_t v9 = v38;
      uint64_t v8 = v37;
      uint64_t v7 = v36;
      unint64_t v6 = v35;
      unint64_t v5 = v58;
      uint64_t v3 = v34;
    }
    goto LABEL_16;
  }
  if (!v13) {
    goto LABEL_9;
  }
  uint64_t v61 = (*a1)[12];
  uint64_t v57 = (*a1)[11];
  uint64_t v59 = (*a1)[9];
  uint64_t v63 = (*a1)[10];
  uint64_t v16 = (*a1)[8];
  uint64_t v17 = (*a1)[7];
  uint64_t v18 = (*a1)[6];
  uint64_t v12 = HIDWORD(v4);
  unint64_t v19 = HIDWORD(v5);
  char v20 = v5 & 1;
  unsigned int v21 = (v5 >> 8) & 1;
  unsigned int v22 = WORD1(v5) & 1;
  unsigned int v23 = BYTE3(v5) & 1;
  char v24 = v6 & 1;
  LODWORD(v13) = (v6 >> 8) & 1;
  unsigned int v25 = WORD1(v6) & 1;
  *((unsigned char *)v2 + 108) = BYTE4(v7) & 1;
  unsigned int v26 = BYTE3(v6) & 1;
  uint64_t v27 = HIDWORD(v6) & 1;
  *((unsigned char *)v2 + 136) = v14 & 1;
  unint64_t v28 = v2[16];
  uint64_t v29 = *(void **)v2[15];
  uint64_t v30 = (v6 >> 40) & 1;
  if ((v15 & 1) == 0)
  {
    uint64_t v42 = v2[14];
    v29[(v28 >> 6) + 8] |= 1 << v28;
    *(void *)(v29[6] + 8 * v28) = v42;
    uint64_t v43 = v29[7] + 112 * v28;
    *(void *)uint64_t v43 = v3;
    *(void *)(v43 + 8) = v4;
    *(unsigned char *)(v43 + 16) = v20;
    *(unsigned char *)(v43 + 17) = v21;
    *(unsigned char *)(v43 + 18) = BYTE2(v5) & 1;
    *(unsigned char *)(v43 + 19) = v23;
    *(_DWORD *)(v43 + 20) = HIDWORD(v5);
    *(unsigned char *)(v43 + 24) = v24;
    *(unsigned char *)(v43 + 25) = v13;
    *(unsigned char *)(v43 + 26) = BYTE2(v6) & 1;
    *(unsigned char *)(v43 + 27) = v26;
    *(unsigned char *)(v43 + 28) = BYTE4(v6) & 1;
    *(unsigned char *)(v43 + 29) = v30;
    *(_DWORD *)(v43 + 32) = v7;
    *(unsigned char *)(v43 + 36) = *((unsigned char *)v2 + 108);
    *(void *)(v43 + 40) = v8;
    *(void *)(v43 + 48) = v9;
    *(void *)(v43 + 56) = v10;
    *(void *)(v43 + 64) = v16;
    LOBYTE(v23) = v57;
    uint64_t v12 = v59;
    uint64_t v13 = v63;
    *(void *)(v43 + 72) = v59;
    *(void *)(v43 + 80) = v63;
    LOBYTE(v22) = v61;
    *(void *)(v43 + 88) = v57;
    *(void *)(v43 + 96) = v61;
    LODWORD(v19) = *((unsigned __int8 *)v2 + 136);
    *(unsigned char *)(v43 + 104) = v19;
    uint64_t v44 = v29[2];
    BOOL v45 = __OFADD__(v44, 1);
    uint64_t v46 = v44 + 1;
    if (!v45)
    {
LABEL_15:
      uint64_t v9 = v18;
      uint64_t v10 = v17;
      uint64_t v11 = v16;
      v29[2] = v46;
      goto LABEL_16;
    }
    __break(1u);
LABEL_14:
    uint64_t v47 = v2[14];
    v29[(v28 >> 6) + 8] |= 1 << v28;
    *(void *)(v29[6] + 8 * v28) = v47;
    uint64_t v48 = v29[7] + 112 * v28;
    *(void *)uint64_t v48 = v3;
    *(_DWORD *)(v48 + 8) = v4;
    *(_DWORD *)(v48 + 12) = v12;
    *(unsigned char *)(v48 + 16) = v20;
    *(unsigned char *)(v48 + 17) = v21;
    *(unsigned char *)(v48 + 18) = v22;
    *(unsigned char *)(v48 + 19) = v23;
    *(_DWORD *)(v48 + 20) = v19;
    *(unsigned char *)(v48 + 24) = v24;
    *(unsigned char *)(v48 + 25) = v13;
    *(unsigned char *)(v48 + 26) = v25;
    *(unsigned char *)(v48 + 27) = v26;
    *(unsigned char *)(v48 + 28) = v27;
    *(unsigned char *)(v48 + 29) = v30;
    *(_DWORD *)(v48 + 32) = v7;
    *(unsigned char *)(v48 + 36) = *((unsigned char *)v2 + 140);
    *(void *)(v48 + 40) = v8;
    *(void *)(v48 + 48) = v18;
    *(void *)(v48 + 56) = v17;
    *(void *)(v48 + 64) = v16;
    uint64_t v12 = v59;
    uint64_t v13 = v63;
    *(void *)(v48 + 72) = v59;
    *(void *)(v48 + 80) = v63;
    *(void *)(v48 + 88) = v57;
    *(void *)(v48 + 96) = v61;
    *(unsigned char *)(v48 + 104) = *((unsigned char *)v2 + 144);
    uint64_t v49 = v29[2];
    BOOL v45 = __OFADD__(v49, 1);
    uint64_t v46 = v49 + 1;
    if (v45)
    {
      __break(1u);
      return;
    }
    goto LABEL_15;
  }
  uint64_t v31 = v29[7] + 112 * v28;
  *(void *)uint64_t v31 = v3;
  uint64_t v32 = (char *)v2 + 108;
  uint64_t v33 = v2 + 17;
LABEL_8:
  *(_DWORD *)(v31 + 8) = v4;
  *(_DWORD *)(v31 + 12) = v12;
  *(unsigned char *)(v31 + 16) = v20;
  *(unsigned char *)(v31 + 17) = v21;
  *(unsigned char *)(v31 + 18) = v22;
  *(unsigned char *)(v31 + 19) = v23;
  *(_DWORD *)(v31 + 20) = v19;
  *(unsigned char *)(v31 + 24) = v24;
  *(unsigned char *)(v31 + 25) = v13;
  *(unsigned char *)(v31 + 26) = v25;
  *(unsigned char *)(v31 + 27) = v26;
  *(unsigned char *)(v31 + 28) = v27;
  *(unsigned char *)(v31 + 29) = v30;
  *(_DWORD *)(v31 + 32) = v7;
  *(unsigned char *)(v31 + 36) = *v32;
  *(void *)(v31 + 40) = v8;
  *(void *)(v31 + 48) = v18;
  uint64_t v9 = v18;
  uint64_t v10 = v17;
  *(void *)(v31 + 56) = v17;
  *(void *)(v31 + 64) = v16;
  uint64_t v11 = v16;
  uint64_t v12 = v59;
  uint64_t v13 = v63;
  *(void *)(v31 + 72) = v59;
  *(void *)(v31 + 80) = v63;
  *(void *)(v31 + 88) = v57;
  *(void *)(v31 + 96) = v61;
  *(unsigned char *)(v31 + 104) = *v33;
LABEL_16:
  uint64_t v51 = *v2;
  uint64_t v50 = v2[1];
  uint64_t v52 = v2[2];
  uint64_t v53 = v2[3];
  uint64_t v54 = v2[4];
  uint64_t v65 = v2[5];
  uint64_t v56 = v2[6];
  uint64_t v55 = v2[7];
  long long v60 = *((_OWORD *)v2 + 5);
  long long v62 = *((_OWORD *)v2 + 4);
  sub_10002BB34(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  sub_10002BA84(v51, v50, v52, v53, v54, v65, v56, v55, v62, *((uint64_t *)&v62 + 1), v60);

  free(v2);
}

uint64_t (*sub_10002A1B0(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_10002A1E0;
}

uint64_t sub_10002A1E0(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

unint64_t sub_10002A1EC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            char v15 = (void *)(v10 + 8 * v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              *char v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10002A374(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (!v3) {
    return v5;
  }
  return result;
}

char *sub_10002A3BC(uint64_t a1)
{
  return sub_100027FA4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_10002A3D0(void *a1)
{
  return sub_1000281C0(0, a1[2], 0, a1);
}

char *sub_10002A3E4(uint64_t a1)
{
  return sub_1000282E4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_10002A3F8(uint64_t a1)
{
  return sub_1000284F8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_10002A40C(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100003DD0(&qword_1000C5070);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = sub_100024794(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    uint64_t v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100024794(v5);
    uint64_t v8 = v13;
    uint64_t v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_10002A50C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100003DD0(&qword_1000C5040);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (unsigned char *)(a1 + 40); ; i += 16)
    {
      uint64_t v5 = *((void *)i - 1);
      char v6 = *i;
      unint64_t result = sub_100024794(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      *(unsigned char *)(v3[7] + result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_10002A5E4(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100003DD0(&qword_1000C5000);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = sub_100024794(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    BOOL v10 = (void *)(v3[7] + 16 * result);
    *BOOL v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    uint64_t v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100024794(v4);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_10002A6F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100003DD0(&qword_1000C5058);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (unsigned char *)(a1 + 144); ; i += 120)
    {
      uint64_t v20 = v1;
      uint64_t v5 = *((void *)i - 14);
      uint64_t v6 = *((void *)i - 13);
      uint64_t v7 = *((void *)i - 12);
      char v8 = *(i - 88);
      char v9 = *(i - 87);
      char v10 = *(i - 86);
      char v11 = *(i - 85);
      char v34 = *(i - 80);
      int v35 = *((_DWORD *)i - 21);
      char v32 = *(i - 78);
      char v33 = *(i - 79);
      char v30 = *(i - 76);
      char v31 = *(i - 77);
      int v28 = *((_DWORD *)i - 18);
      char v29 = *(i - 75);
      char v27 = *(i - 68);
      uint64_t v25 = *((void *)i - 7);
      uint64_t v26 = *((void *)i - 8);
      uint64_t v23 = *((void *)i - 5);
      uint64_t v24 = *((void *)i - 6);
      uint64_t v12 = *((void *)i - 3);
      uint64_t v36 = *((void *)i - 4);
      uint64_t v13 = *((void *)i - 2);
      uint64_t v22 = *((void *)i - 1);
      char v21 = *i;
      unint64_t result = sub_100024794(v5);
      if (v15) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      uint64_t v16 = v3[7] + 112 * result;
      *(void *)uint64_t v16 = v6;
      *(unsigned char *)(v16 + 16) = v8;
      *(unsigned char *)(v16 + 17) = v9;
      *(unsigned char *)(v16 + 18) = v10;
      *(unsigned char *)(v16 + 19) = v11;
      *(_DWORD *)(v16 + 20) = v35;
      *(unsigned char *)(v16 + 24) = v34;
      *(unsigned char *)(v16 + 25) = v33;
      *(unsigned char *)(v16 + 26) = v32;
      *(unsigned char *)(v16 + 27) = v31;
      *(unsigned char *)(v16 + 28) = v30;
      *(unsigned char *)(v16 + 29) = v29;
      *(_DWORD *)(v16 + 32) = v28;
      *(unsigned char *)(v16 + 36) = v27;
      *(void *)(v16 + 40) = v26;
      *(void *)(v16 + 48) = v25;
      *(void *)(v16 + 56) = v24;
      *(void *)(v16 + 64) = v23;
      *(void *)(v16 + 88) = v13;
      *(void *)(v16 + 96) = v22;
      *(unsigned char *)(v16 + 104) = v21;
      *(void *)(v16 + 72) = v36;
      *(void *)(v16 + 80) = v12;
      *(void *)(v16 + 8) = v7;
      uint64_t v17 = v3[2];
      BOOL v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      v3[2] = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v1 = v20 - 1;
      if (v20 == 1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

void *sub_10002A910(void *result, char a2, void *a3)
{
  uint64_t v3 = result[2];
  if (v3)
  {
    uint64_t v6 = result;
    uint64_t v8 = result[4];
    uint64_t v7 = result[5];
    char v9 = (void *)*a3;
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_100024794(v8);
    uint64_t v12 = v9[2];
    BOOL v13 = (v10 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    char v15 = v10;
    if (v9[3] < v14)
    {
      sub_10002547C(v14, a2 & 1);
      unint64_t v16 = sub_100024794(v8);
      if ((v15 & 1) != (v17 & 1))
      {
LABEL_27:
        unint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v11 = v16;
      BOOL v18 = (void *)*a3;
      if ((v15 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_9:
      *(void *)(v18[7] + 8 * v11) = v7;
      uint64_t v19 = v3 - 1;
      if (v3 == 1) {
        return (void *)swift_bridgeObjectRelease();
      }
LABEL_16:
      for (uint64_t i = v6 + 7; ; i += 2)
      {
        uint64_t v26 = *(i - 1);
        uint64_t v25 = *i;
        char v27 = (void *)*a3;
        unint64_t v28 = sub_100024794(v26);
        uint64_t v30 = v27[2];
        BOOL v31 = (v29 & 1) == 0;
        BOOL v22 = __OFADD__(v30, v31);
        uint64_t v32 = v30 + v31;
        if (v22) {
          break;
        }
        char v33 = v29;
        if (v27[3] < v32)
        {
          sub_10002547C(v32, 1);
          unint64_t v28 = sub_100024794(v26);
          if ((v33 & 1) != (v34 & 1)) {
            goto LABEL_27;
          }
        }
        int v35 = (void *)*a3;
        if (v33)
        {
          *(void *)(v35[7] + 8 * v28) = v25;
        }
        else
        {
          v35[(v28 >> 6) + 8] |= 1 << v28;
          uint64_t v36 = 8 * v28;
          *(void *)(v35[6] + v36) = v26;
          *(void *)(v35[7] + v36) = v25;
          uint64_t v37 = v35[2];
          BOOL v22 = __OFADD__(v37, 1);
          uint64_t v38 = v37 + 1;
          if (v22) {
            goto LABEL_26;
          }
          v35[2] = v38;
        }
        if (!--v19) {
          return (void *)swift_bridgeObjectRelease();
        }
      }
      goto LABEL_25;
    }
    if (a2)
    {
      BOOL v18 = (void *)*a3;
      if (v10) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_100026BA0();
      BOOL v18 = (void *)*a3;
      if (v15) {
        goto LABEL_9;
      }
    }
LABEL_12:
    v18[(v11 >> 6) + 8] |= 1 << v11;
    uint64_t v20 = 8 * v11;
    *(void *)(v18[6] + v20) = v8;
    *(void *)(v18[7] + v20) = v7;
    uint64_t v21 = v18[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v18[2] = v23;
    uint64_t v19 = v3 - 1;
    if (v3 == 1) {
      return (void *)swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  return result;
}

unint64_t sub_10002AB3C(unint64_t result, int64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v6 = result;
  unint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v10 = v5 + v8;
    }
    else {
      int64_t v10 = v5;
    }
    unint64_t result = (unint64_t)sub_1000124A4((char *)result, v10, 1, (char *)v4);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = *(void *)(v4 + 16);
  size_t v12 = v11 - a2;
  if (__OFSUB__(v11, a2)) {
    goto LABEL_26;
  }
  unint64_t result = v4 + 32 + v6;
  BOOL v13 = (const void *)(v4 + 32 + a2);
  if (v6 != a2 || result >= (unint64_t)v13 + v12) {
    unint64_t result = (unint64_t)memmove((void *)result, v13, v12);
  }
  uint64_t v14 = *(void *)(v4 + 16);
  BOOL v15 = __OFADD__(v14, v8);
  uint64_t v16 = v14 + v8;
  if (!v15)
  {
    *(void *)(v4 + 16) = v16;
LABEL_20:
    *int64_t v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10002AC40(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

void *sub_10002ACDC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100027EF4(0, v1, 0);
    uint64_t v3 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t v5 = sub_1000218E8(v4);
      uint64_t v7 = v6;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        sub_100027EF4((char *)(v8 > 1), v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      int64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v5;
      v10[5] = v7;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10002ADC4(unsigned char *a1)
{
  if ((a1[16] & 1) == 0)
  {
    int64_t v2 = (char *)_swiftEmptyArrayStorage;
    if ((a1[17] & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  int64_t v2 = sub_1000123A0(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    int64_t v2 = sub_1000123A0((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  uint64_t v5 = &v2[16 * v4];
  *((void *)v5 + 4) = 0x736154646C696863;
  *((void *)v5 + 5) = 0xE90000000000006BLL;
  if (a1[17])
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v2 = sub_1000123A0(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v7 = *((void *)v2 + 2);
    unint64_t v6 = *((void *)v2 + 3);
    if (v7 >= v6 >> 1) {
      int64_t v2 = sub_1000123A0((char *)(v6 > 1), v7 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v7 + 1;
    unint64_t v8 = &v2[16 * v7];
    *((void *)v8 + 4) = 0x657275747566;
    *((void *)v8 + 5) = 0xE600000000000000;
  }
LABEL_12:
  if (a1[18])
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v2 = sub_1000123A0(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v10 = *((void *)v2 + 2);
    unint64_t v9 = *((void *)v2 + 3);
    if (v10 >= v9 >> 1) {
      int64_t v2 = sub_1000123A0((char *)(v9 > 1), v10 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v10 + 1;
    uint64_t v11 = &v2[16 * v10];
    strcpy(v11 + 32, "groupChildTask");
    v11[47] = -18;
    if ((a1[19] & 1) == 0)
    {
LABEL_14:
      if ((a1[24] & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_29;
    }
  }
  else if ((a1[19] & 1) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v2 = sub_1000123A0(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v13 = *((void *)v2 + 2);
  unint64_t v12 = *((void *)v2 + 3);
  if (v13 >= v12 >> 1) {
    int64_t v2 = sub_1000123A0((char *)(v12 > 1), v13 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v13 + 1;
  uint64_t v14 = &v2[16 * v13];
  strcpy(v14 + 32, "asyncLetTask");
  v14[45] = 0;
  *((_WORD *)v14 + 23) = -5120;
  if ((a1[24] & 1) == 0)
  {
LABEL_15:
    if ((a1[25] & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_29:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v2 = sub_1000123A0(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v16 = *((void *)v2 + 2);
  unint64_t v15 = *((void *)v2 + 3);
  if (v16 >= v15 >> 1) {
    int64_t v2 = sub_1000123A0((char *)(v15 > 1), v16 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v16 + 1;
  char v17 = &v2[16 * v16];
  *((void *)v17 + 4) = 0x656C6C65636E6163;
  *((void *)v17 + 5) = 0xE900000000000064;
  if ((a1[25] & 1) == 0)
  {
LABEL_16:
    if ((a1[26] & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_34:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v2 = sub_1000123A0(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v19 = *((void *)v2 + 2);
  unint64_t v18 = *((void *)v2 + 3);
  if (v19 >= v18 >> 1) {
    int64_t v2 = sub_1000123A0((char *)(v18 > 1), v19 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v19 + 1;
  uint64_t v20 = &v2[16 * v19];
  *((void *)v20 + 4) = 0xD000000000000012;
  *((void *)v20 + 5) = 0x80000001000A86E0;
  if ((a1[26] & 1) == 0)
  {
LABEL_17:
    if ((a1[27] & 1) == 0) {
      goto LABEL_50;
    }
    goto LABEL_44;
  }
LABEL_39:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v2 = sub_1000123A0(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v22 = *((void *)v2 + 2);
  unint64_t v21 = *((void *)v2 + 3);
  if (v22 >= v21 >> 1) {
    int64_t v2 = sub_1000123A0((char *)(v21 > 1), v22 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v22 + 1;
  uint64_t v23 = &v2[16 * v22];
  *((void *)v23 + 4) = 0x6574616C61637365;
  *((void *)v23 + 5) = 0xE900000000000064;
  if (a1[27])
  {
LABEL_44:
    if (a1[28])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v2 = sub_1000123A0(0, *((void *)v2 + 2) + 1, 1, v2);
      }
      unint64_t v25 = *((void *)v2 + 2);
      unint64_t v24 = *((void *)v2 + 3);
      if (v25 >= v24 >> 1) {
        int64_t v2 = sub_1000123A0((char *)(v24 > 1), v25 + 1, 1, v2);
      }
      *((void *)v2 + 2) = v25 + 1;
      uint64_t v26 = &v2[16 * v25];
      *((void *)v26 + 4) = 0x676E696E6E7572;
      *((void *)v26 + 5) = 0xE700000000000000;
    }
  }
LABEL_50:
  if (a1[29])
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v2 = sub_1000123A0(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v29 = *((void *)v2 + 2);
    unint64_t v28 = *((void *)v2 + 3);
    if (v29 >= v28 >> 1) {
      int64_t v2 = sub_1000123A0((char *)(v28 > 1), v29 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v29 + 1;
    uint64_t v30 = &v2[16 * v29];
    *((void *)v30 + 4) = 0x6465756575716E65;
    *((void *)v30 + 5) = 0xE800000000000000;
    goto LABEL_58;
  }
  if (*((void *)v2 + 2))
  {
LABEL_58:
    sub_100003DD0(&qword_1000C4768);
    sub_100005178(&qword_1000C4770, &qword_1000C4768);
    uint64_t v27 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    return v27;
  }
  swift_bridgeObjectRelease();
  return 48;
}

unint64_t sub_10002B374(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100003DD0(&qword_1000C5010);
  unint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = *(unsigned char *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  unint64_t result = sub_100024850(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  unint64_t v9 = (void *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v4;
    unint64_t v10 = (void *)(v3[7] + 16 * result);
    *unint64_t v10 = v6;
    v10[1] = v5;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    unsigned __int8 v4 = *((unsigned char *)v9 - 16);
    uint64_t v6 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100024850(v4);
    unint64_t v9 = v14;
    uint64_t v5 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

void sub_10002B484(int a1@<W1>, uint64_t a2@<X8>)
{
  unint64_t v4 = sub_10002B374((uint64_t)&off_1000B9ED0);
  sub_100003DD0(&qword_1000C5008);
  swift_arrayDestroy();
  if ((a1 & 0x10000) != 0)
  {
    uint64_t v5 = sub_1000123A0(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v10 = *((void *)v5 + 2);
    unint64_t v9 = *((void *)v5 + 3);
    if (v10 >= v9 >> 1) {
      uint64_t v5 = sub_1000123A0((char *)(v9 > 1), v10 + 1, 1, v5);
    }
    *((void *)v5 + 2) = v10 + 1;
    uint64_t v11 = &v5[16 * v10];
    *((void *)v11 + 4) = 0xD000000000000011;
    *((void *)v11 + 5) = 0x80000001000A8560;
    if ((a1 & 0x100) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = (char *)_swiftEmptyArrayStorage;
    if ((a1 & 0x100) != 0)
    {
LABEL_3:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_1000123A0(0, *((void *)v5 + 2) + 1, 1, v5);
      }
      unint64_t v7 = *((void *)v5 + 2);
      unint64_t v6 = *((void *)v5 + 3);
      if (v7 >= v6 >> 1) {
        uint64_t v5 = sub_1000123A0((char *)(v6 > 1), v7 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v7 + 1;
      char v8 = &v5[16 * v7];
      *((void *)v8 + 4) = 0xD000000000000011;
      *((void *)v8 + 5) = 0x80000001000A8540;
      goto LABEL_12;
    }
  }
  if (!*((void *)v5 + 2))
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = 0xE100000000000000;
    uint64_t v12 = 48;
    if (!*(void *)(v4 + 16)) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
LABEL_12:
  sub_100003DD0(&qword_1000C4768);
  sub_100005178(&qword_1000C4770, &qword_1000C4768);
  uint64_t v12 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  if (!*(void *)(v4 + 16))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    v20._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._char countAndFlagsBits = 41;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    uint64_t v19 = 0x286E776F6E6B6E75;
    unint64_t v18 = 0xE800000000000000;
    goto LABEL_17;
  }
LABEL_13:
  unint64_t v15 = sub_100024850(a1);
  if ((v16 & 1) == 0) {
    goto LABEL_16;
  }
  char v17 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v15);
  uint64_t v19 = *v17;
  unint64_t v18 = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_17:
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v18;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v14;
  *(unsigned char *)(a2 + 32) = HIBYTE(a1);
}

unint64_t sub_10002B728()
{
  unint64_t result = qword_1000C4FF0;
  if (!qword_1000C4FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4FF0);
  }
  return result;
}

unint64_t sub_10002B77C()
{
  unint64_t result = qword_1000C4FF8;
  if (!qword_1000C4FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4FF8);
  }
  return result;
}

uint64_t sub_10002B7D0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 104);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_10002B7E8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002B820()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t *sub_10002B830(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10002B894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t result = a14;
  if (a14)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10002B8E0(uint64_t a1)
{
  return a1;
}

double sub_10002B918(uint64_t a1)
{
  *(unsigned char *)(a1 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_10002B934@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100021710(a1, *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

void *sub_10002B954@<X0>(void *a1@<X8>)
{
  double result = (*(void *(**)(void *__return_ptr))(v1 + 16))(v6);
  if (!v2)
  {
    uint64_t v5 = v6[1];
    *a1 = v6[0];
    a1[1] = v5;
  }
  return result;
}

uint64_t sub_10002B998(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003DD0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002B9FC(uint64_t a1)
{
  return a1;
}

uint64_t *sub_10002BA28(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10002BA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result = a11;
  if (a11)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10002BAD0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002BAFC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10002BB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result = a11;
  if (a11)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10002BB80(uint64_t a1, uint64_t a2)
{
  return sub_10001FB08(a1, a2, *(void *)(v2 + 16), *(uint64_t **)(v2 + 24));
}

uint64_t sub_10002BB88()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002BB98()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10002BBC0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002BBF8(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_10002BC28(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10002BC74(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

ValueMetadata *type metadata accessor for DumpConcurrency()
{
  return &type metadata for DumpConcurrency;
}

unint64_t sub_10002BCD0(uint64_t a1)
{
  unint64_t result = sub_10002BCF8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10002BCF8()
{
  unint64_t result = qword_1000C5060;
  if (!qword_1000C5060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5060);
  }
  return result;
}

unint64_t sub_10002BD4C(uint64_t a1)
{
  unint64_t result = sub_10002BD74();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10002BD74()
{
  unint64_t result = qword_1000C5068;
  if (!qword_1000C5068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5068);
  }
  return result;
}

uint64_t sub_10002BDC8()
{
  return swift_release();
}

uint64_t sub_10002BDD0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  BOOL v45 = a2;
  uint64_t v3 = sub_100003DD0(&qword_1000C5090);
  uint64_t v47 = *(void *)(v3 - 8);
  uint64_t v48 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = *(unsigned char *)ArgumentVisibility.default.unsafeMutableAddressor();
  unint64_t v7 = sub_10000474C();
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, v6, (uint64_t)&type metadata for UniversalOptions, v7, (uint64_t)&v56);
  uint64_t v49 = v56;
  uint64_t v8 = v58;
  uint64_t v70 = v57;
  uint64_t v54 = v60;
  uint64_t v55 = v59;
  uint64_t v52 = v62;
  uint64_t v53 = v61;
  uint64_t v51 = v63;
  int v9 = v64;
  int v10 = v65;
  sub_100005090(a1, a1[3]);
  sub_10002C210();
  uint64_t v46 = v5;
  uint64_t v11 = v70;
  uint64_t v12 = v55;
  uint64_t v14 = v49;
  uint64_t v13 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
  {
    sub_100005128((uint64_t)a1);
    sub_10000274C(v14, v11, v8, v12, v54, v53, v52, v51, v9, v10);
    return swift_bridgeObjectRelease();
  }
  else
  {
    int v42 = v10;
    int v43 = v9;
    uint64_t v44 = a1;
    uint64_t v50 = v8;
    sub_100003DD0(&qword_1000C4740);
    sub_100005178((unint64_t *)&qword_1000C4798, &qword_1000C4740);
    uint64_t v15 = v48;
    char v16 = v46;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v16, v15);
    uint64_t v47 = 0;
    uint64_t v17 = v56;
    uint64_t v36 = v57;
    LOBYTE(v15) = v58;
    uint64_t v18 = v59;
    uint64_t v39 = v61;
    uint64_t v19 = v63;
    uint64_t v37 = v62;
    int v38 = v64;
    LODWORD(v46) = v66;
    int v41 = v67;
    uint64_t v40 = v68;
    uint64_t v48 = v69;
    unsigned __int8 v20 = v65;
    int v35 = v65;
    uint64_t v34 = v58;
    uint64_t v21 = v60;
    sub_100002594(v56, v57, v58, v59, v60, v61, v62, v63, v64, v65);
    swift_bridgeObjectRetain();
    sub_10000274C(v14, v70, v50, v55, v54, v53, v52, v51, v43, v42);
    swift_bridgeObjectRelease();
    sub_100005128((uint64_t)v44);
    char v32 = v20;
    char v22 = v38;
    uint64_t v23 = v36;
    char v24 = v15;
    uint64_t v25 = v21;
    uint64_t v26 = v21;
    uint64_t v27 = v39;
    uint64_t v28 = v37;
    sub_10000274C(v17, v36, v24, v18, v26, v39, v37, v19, v38, v32);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v30 = v45;
    *BOOL v45 = v17;
    v30[1] = v23;
    v30[2] = v34;
    v30[3] = v18;
    v30[4] = v25;
    v30[5] = v27;
    v30[6] = v28;
    v30[7] = v19;
    *((unsigned char *)v30 + 64) = v22;
    *((unsigned char *)v30 + 65) = v35;
    *((unsigned char *)v30 + 66) = (_BYTE)v46;
    *((unsigned char *)v30 + 67) = v41;
    uint64_t v31 = v48;
    v30[9] = v40;
    v30[10] = v31;
  }
  return result;
}

unint64_t sub_10002C210()
{
  unint64_t result = qword_1000C5098;
  if (!qword_1000C5098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5098);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DumpConcurrency.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10002C300);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DumpConcurrency.CodingKeys()
{
  return &type metadata for DumpConcurrency.CodingKeys;
}

unint64_t sub_10002C33C()
{
  unint64_t result = qword_1000C50A0;
  if (!qword_1000C50A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C50A0);
  }
  return result;
}

unint64_t sub_10002C394()
{
  unint64_t result = qword_1000C50A8;
  if (!qword_1000C50A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C50A8);
  }
  return result;
}

unint64_t sub_10002C3EC()
{
  unint64_t result = qword_1000C50B0;
  if (!qword_1000C50B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C50B0);
  }
  return result;
}

uint64_t sub_10002C440(uint64_t a1, uint64_t a2)
{
  sub_100003DD0(&qword_1000C50C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000A2660;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  uint64_t v5 = sub_100031A50(inited);
  unint64_t v7 = v6;
  swift_setDeallocating();
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  strcpy((char *)v18, "#!/bin/bash\n\n");
  HIWORD(v18[1]) = -4864;
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1000A2660;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  uint64_t v9 = sub_10002C5DC(v8);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  v12._char countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._char countAndFlagsBits = 0x656C706D6F630A0ALL;
  v13._object = (void *)0xEE0020462D206574;
  String.append(_:)(v13);
  v14._char countAndFlagsBits = v5;
  v14._object = v7;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._char countAndFlagsBits = 32;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16._char countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  return v18[0];
}

uint64_t sub_10002C5DC(uint64_t a1)
{
  void (*v19)(void *__return_ptr);
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  Swift::String v40;
  uint64_t v41;
  char *v42;
  Swift::String v43;
  void *v44;
  char *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  void **v57;
  uint64_t v58;
  void *v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  Swift::String v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  Swift::String v81;
  Swift::String v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  char *v86;
  Swift::String v87;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  Swift::String v92;
  char *v93;
  Swift::String v94;
  Swift::String v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t, uint64_t);
  Swift::String v101;
  Swift::String v102;
  Swift::String v103;
  Swift::String v104;
  Swift::String v105;
  Swift::String v106;
  Swift::String v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  char *v111;
  Swift::String v112;
  void *v113;
  uint64_t v114;
  void *v115;
  void *v116;
  Swift::String v117;
  Swift::String v118;
  Swift::String v119;
  void *v120;
  int64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  void *v135;
  void *v136;
  Swift::String v137;
  unsigned char v139[16];
  Swift::String *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  Swift::String v150;
  char *v151;
  long long v152;
  void v153[2];
  Swift::String v154;
  char *v155;
  void *object;
  void v157[13];
  uint64_t v158;
  void v159[12];
  char v160;
  uint64_t v161;

  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v2 = a1;
  uint64_t v7 = a1 + 16 * v6;
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v144 = v7 + 24;
  uint64_t v9 = *(void *)(v7 + 16);
  unint64_t v143 = (uint64_t *)(v7 + 16);
  uint64_t countAndFlagsBits = sub_100031A50(a1);
  v150._object = v10;
  unint64_t v11 = 0xE100000000000000;
  uint64_t v12 = 49;
  uint64_t v13 = 50;
  uint64_t v146 = v6;
  if (v6 == 1)
  {
    unint64_t v3 = 0xE100000000000000;
  }
  else
  {
    uint64_t v13 = 0x29312B3124282824;
    unint64_t v3 = 0xE900000000000029;
  }
  if (v6 != 1) {
    uint64_t v12 = 12580;
  }
  uint64_t v142 = v12;
  if (v6 != 1) {
    unint64_t v11 = 0xE200000000000000;
  }
  unint64_t v148 = (void *)v11;
  int v149 = v13;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 16))(v157, v9, v8);
  uint64_t v14 = v158;
  int v161 = v158;
  swift_bridgeObjectRetain();
  sub_10002DDE4((uint64_t)v157);
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    Swift::String v16 = (long long *)(v14 + 32);
    unsigned int v4 = (char *)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v19 = *(void (**)(void *__return_ptr))(*((void *)v16 + 1) + 16);
      uint64_t v152 = *v16;
      v19(v159);
      sub_10002DDE4((uint64_t)v159);
      if (v160)
      {
        uint64_t v155 = v4;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100056FF8(0, *((void *)v4 + 2) + 1, 1);
          unsigned int v4 = v155;
        }
        unint64_t v18 = *((void *)v4 + 2);
        unint64_t v17 = *((void *)v4 + 3);
        if (v18 >= v17 >> 1)
        {
          sub_100056FF8((char *)(v17 > 1), v18 + 1, 1);
          unsigned int v4 = v155;
        }
        *((void *)v4 + 2) = v18 + 1;
        *(_OWORD *)&v4[16 * v18 + 32] = v152;
      }
      ++v16;
      --v15;
    }
    while (v15);
  }
  else
  {
    unsigned int v4 = (char *)_swiftEmptyArrayStorage;
  }
  sub_10002BAD0((uint64_t)&v161);
  if (v146 == 1)
  {
    uint64_t v1 = *((void *)v4 + 2);
    if (v1)
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_22:
        uint64_t v21 = *((void *)v4 + 2);
        unsigned __int8 v20 = *((void *)v4 + 3);
        if (v21 >= v20 >> 1) {
          unsigned int v4 = sub_10005FFD8((char *)(v20 > 1), v21 + 1, 1, v4);
        }
        char v22 = sub_10002E8EC();
        *((void *)v4 + 2) = v21 + 1;
        uint64_t v23 = &v4[16 * v21];
        *((void *)v23 + 4) = &type metadata for HelpCommand;
        *((void *)v23 + 5) = v22;
        goto LABEL_25;
      }
LABEL_62:
      unsigned int v4 = sub_10005FFD8(0, v1 + 1, 1, v4);
      goto LABEL_22;
    }
  }
LABEL_25:
  *(void *)&uint64_t v152 = v3;
  char v24 = sub_10002DE7C(v2);
  uint64_t v25 = *((void *)v4 + 2);
  uint64_t v26 = (char *)_swiftEmptyArrayStorage;
  char v151 = v4;
  uint64_t v147 = v2;
  v150._uint64_t countAndFlagsBits = countAndFlagsBits;
  if (v25)
  {
    uint64_t v27 = v24;
    uint64_t v155 = (char *)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100056F98(0, v25, 0);
    uint64_t v26 = (char *)_swiftEmptyArrayStorage;
    uint64_t v28 = v4 + 40;
    do
    {
      unint64_t v29 = (*(uint64_t (**)(void))(*(void *)v28 + 24))();
      uint64_t v31 = v30;
      uint64_t v155 = v26;
      uint64_t v33 = *((void *)v26 + 2);
      char v32 = *((void *)v26 + 3);
      if (v33 >= v32 >> 1)
      {
        sub_100056F98((char *)(v32 > 1), v33 + 1, 1);
        uint64_t v26 = v155;
      }
      *((void *)v26 + 2) = v33 + 1;
      uint64_t v34 = &v26[16 * v33];
      *((void *)v34 + 4) = v29;
      *((void *)v34 + 5) = v31;
      v28 += 16;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v150._countAndFlagsBits;
    char v24 = v27;
  }
  uint64_t v155 = v24;
  sub_10005E9FC((uint64_t)v26);
  int v35 = v155;
  uint64_t v36 = sub_100053C7C(*v143, *(void *)(*(void *)v144 + 8), 0, 0, 0, 0);
  int v38 = v37;
  swift_bridgeObjectRetain();
  uint64_t v39 = sub_10002E210(v36, v38, v147);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v155 = (char *)countAndFlagsBits;
  object = v150._object;
  swift_bridgeObjectRetain();
  v40._uint64_t countAndFlagsBits = 0xA7B202928;
  v40._object = (void *)0xE500000000000000;
  String.append(_:)(v40);
  if (v146 == 1)
  {
    v154._uint64_t countAndFlagsBits = 10;
    v154._object = (void *)0xE100000000000000;
    __chkstk_darwin(v41);
    uint64_t v140 = &v154;
    int v42 = sub_1000342C0(0x7FFFFFFFFFFFFFFFLL, 0, sub_10002ECE4, (uint64_t)v139, 0xD000000000000050, 0x80000001000A8960);
    v43._uint64_t countAndFlagsBits = 32;
    v43._object = (void *)0xE100000000000000;
    String.init(repeating:count:)(v43, 4);
    uint64_t v44 = sub_100034E90((uint64_t)v42);
    uint64_t v141 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v154._uint64_t countAndFlagsBits = (uint64_t)v44;
    sub_100003DD0(&qword_1000C50D8);
    sub_100005178(&qword_1000C50E0, &qword_1000C50D8);
    BOOL v45 = v39;
    sub_10002E898();
    uint64_t v46 = Sequence<>.joined(separator:)();
    uint64_t v48 = v47;
    swift_bridgeObjectRelease();
    v49._uint64_t countAndFlagsBits = v46;
    v49._object = v48;
    String.append(_:)(v49);
    uint64_t v39 = v45;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v141 = 0;
  }
  strcpy((char *)&v154, "    opts=\"");
  BYTE3(v154._object) = 0;
  HIDWORD(v154._object) = -369098752;
  v153[0] = v35;
  uint64_t v50 = sub_100003DD0(&qword_1000C50C8);
  uint64_t v145 = sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
  uint64_t v146 = v50;
  uint64_t v51 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v53 = v52;
  swift_bridgeObjectRelease();
  v54._uint64_t countAndFlagsBits = v51;
  v54._object = v53;
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._uint64_t countAndFlagsBits = 2594;
  v55._object = (void *)0xE200000000000000;
  String.append(_:)(v55);
  String.append(_:)(v154);
  swift_bridgeObjectRelease();
  uint64_t v56 = *((void *)v39 + 2);
  if (v56)
  {
    uint64_t v57 = (void **)(v39 + 40);
    do
    {
      uint64_t v58 = (uint64_t)*(v57 - 1);
      uint64_t v59 = *v57;
      v154._uint64_t countAndFlagsBits = 0;
      v154._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      v154._uint64_t countAndFlagsBits = 0xD000000000000010;
      v154._object = (void *)0x80000001000A8840;
      v60._uint64_t countAndFlagsBits = v58;
      v60._object = v59;
      String.append(_:)(v60);
      swift_bridgeObjectRelease();
      v61._uint64_t countAndFlagsBits = 2594;
      v61._object = (void *)0xE200000000000000;
      String.append(_:)(v61);
      String.append(_:)(v154);
      swift_bridgeObjectRelease();
      v57 += 2;
      --v56;
    }
    while (v56);
  }
  swift_bridgeObjectRelease();
  v154._uint64_t countAndFlagsBits = 0;
  v154._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(115);
  v62._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v62._object = (void *)0x80000001000A8860;
  String.append(_:)(v62);
  v63._uint64_t countAndFlagsBits = v142;
  v63._object = v148;
  String.append(_:)(v63);
  v64._uint64_t countAndFlagsBits = 0xD000000000000057;
  v64._object = (void *)0x80000001000A8880;
  String.append(_:)(v64);
  String.append(_:)(v154);
  swift_bridgeObjectRelease();
  unsigned __int8 v65 = sub_100053C7C(*v143, *(void *)(*(void *)v144 + 8), 0, 0, 0, 0);
  unsigned __int8 v67 = v66;
  uint64_t v68 = v147;
  swift_bridgeObjectRetain();
  uint64_t v69 = sub_10002E484(v65, v67, v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v154._uint64_t countAndFlagsBits = (uint64_t)v69;
  uint64_t v70 = BidirectionalCollection<>.joined(separator:)();
  BOOL v72 = v71;
  swift_bridgeObjectRelease();
  unint64_t v73 = HIBYTE(v72) & 0xF;
  if ((v72 & 0x2000000000000000) == 0) {
    unint64_t v73 = v70 & 0xFFFFFFFFFFFFLL;
  }
  if (v73)
  {
    v154._uint64_t countAndFlagsBits = 0;
    v154._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(21);
    unint64_t v74 = swift_bridgeObjectRelease();
    strcpy((char *)&v154, "case $prev in\n");
    HIBYTE(v154._object) = -18;
    v153[0] = 10;
    v153[1] = 0xE100000000000000;
    __chkstk_darwin(v74);
    uint64_t v140 = (Swift::String *)v153;
    swift_bridgeObjectRetain();
    uint64_t v75 = sub_1000342C0(0x7FFFFFFFFFFFFFFFLL, 0, sub_10002E878, (uint64_t)v139, v70, v72);
    v76._uint64_t countAndFlagsBits = 32;
    v76._object = (void *)0xE100000000000000;
    String.init(repeating:count:)(v76, 4);
    uint64_t v77 = sub_100034E90((uint64_t)v75);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v153[0] = v77;
    sub_100003DD0(&qword_1000C50D8);
    sub_100005178(&qword_1000C50E0, &qword_1000C50D8);
    sub_10002E898();
    uint64_t v78 = Sequence<>.joined(separator:)();
    uint64_t v80 = v79;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v81._uint64_t countAndFlagsBits = v78;
    v81._object = v80;
    String.append(_:)(v81);
    swift_bridgeObjectRelease();
    v82._uint64_t countAndFlagsBits = 0x636173650ALL;
    v82._object = (void *)0xE500000000000000;
    String.append(_:)(v82);
    uint64_t v83 = v154._countAndFlagsBits;
    char v84 = v154._object;
    v154._uint64_t countAndFlagsBits = 10;
    v154._object = (void *)0xE100000000000000;
    __chkstk_darwin(v85);
    uint64_t v140 = &v154;
    swift_bridgeObjectRetain();
    uint64_t v86 = sub_1000342C0(0x7FFFFFFFFFFFFFFFLL, 0, sub_10002ECE4, (uint64_t)v139, v83, (unint64_t)v84);
    v87._uint64_t countAndFlagsBits = 32;
    v87._object = (void *)0xE100000000000000;
    String.init(repeating:count:)(v87, 4);
    uint64_t v88 = sub_100034E90((uint64_t)v86);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v154._uint64_t countAndFlagsBits = (uint64_t)v88;
    BOOL v89 = Sequence<>.joined(separator:)();
    uint64_t v91 = v90;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v154._uint64_t countAndFlagsBits = v89;
    v154._object = v91;
    swift_bridgeObjectRetain();
    v92._uint64_t countAndFlagsBits = 10;
    v92._object = (void *)0xE100000000000000;
    String.append(_:)(v92);
    swift_bridgeObjectRelease();
    String.append(_:)(v154);
  }
  swift_bridgeObjectRelease();
  uint64_t v93 = v151;
  if (*((void *)v151 + 2))
  {
    v154._uint64_t countAndFlagsBits = 0;
    v154._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v154._uint64_t countAndFlagsBits = 0xD000000000000016;
    v154._object = (void *)0x80000001000A88E0;
    v94._uint64_t countAndFlagsBits = v142;
    v94._object = v148;
    String.append(_:)(v94);
    swift_bridgeObjectRelease();
    v95._uint64_t countAndFlagsBits = 0xA6E69207D5DLL;
    v95._object = (void *)0xE600000000000000;
    String.append(_:)(v95);
    String.append(_:)(v154);
    swift_bridgeObjectRelease();
    unint64_t v96 = *((void *)v93 + 2);
    if (v96)
    {
      swift_bridgeObjectRetain();
      uint64_t v97 = (uint64_t *)(v93 + 40);
      unint64_t v148 = (void *)0x80000001000A8900;
      do
      {
        uint64_t v99 = *(v97 - 1);
        uint64_t v98 = *v97;
        v154._uint64_t countAndFlagsBits = 0;
        v154._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(36);
        swift_bridgeObjectRelease();
        v154._uint64_t countAndFlagsBits = 40;
        v154._object = (void *)0xE100000000000000;
        uint64_t v100 = *(uint64_t (**)(uint64_t, uint64_t))(v98 + 24);
        v101._uint64_t countAndFlagsBits = v100(v99, v98);
        String.append(_:)(v101);
        swift_bridgeObjectRelease();
        v102._uint64_t countAndFlagsBits = 0x202020200A29;
        v102._object = (void *)0xE600000000000000;
        String.append(_:)(v102);
        String.append(_:)(v150);
        v103._uint64_t countAndFlagsBits = 95;
        v103._object = (void *)0xE100000000000000;
        String.append(_:)(v103);
        v104._uint64_t countAndFlagsBits = v100(v99, v98);
        String.append(_:)(v104);
        swift_bridgeObjectRelease();
        v105._uint64_t countAndFlagsBits = 32;
        v105._object = (void *)0xE100000000000000;
        String.append(_:)(v105);
        v106._uint64_t countAndFlagsBits = v149;
        v106._object = (void *)v152;
        String.append(_:)(v106);
        v107._uint64_t countAndFlagsBits = 0xD000000000000013;
        v107._object = v148;
        String.append(_:)(v107);
        uint64_t v108 = v154._countAndFlagsBits;
        uint64_t v109 = v154._object;
        v154._uint64_t countAndFlagsBits = 10;
        v154._object = (void *)0xE100000000000000;
        __chkstk_darwin(v110);
        uint64_t v140 = &v154;
        swift_bridgeObjectRetain();
        uint64_t v111 = sub_1000342C0(0x7FFFFFFFFFFFFFFFLL, 0, sub_10002ECE4, (uint64_t)v139, v108, (unint64_t)v109);
        v112._uint64_t countAndFlagsBits = 32;
        v112._object = (void *)0xE100000000000000;
        String.init(repeating:count:)(v112, 8);
        unint64_t v113 = sub_100034E90((uint64_t)v111);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v154._uint64_t countAndFlagsBits = (uint64_t)v113;
        sub_100003DD0(&qword_1000C50D8);
        sub_100005178(&qword_1000C50E0, &qword_1000C50D8);
        sub_10002E898();
        Swift::String v114 = Sequence<>.joined(separator:)();
        char v116 = v115;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v117._uint64_t countAndFlagsBits = v114;
        v117._object = v116;
        String.append(_:)(v117);
        swift_bridgeObjectRelease();
        v97 += 2;
        --v96;
      }
      while (v96);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v93 = v151;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v118._uint64_t countAndFlagsBits = 0x6361736520202020;
    v118._object = (void *)0xE90000000000000ALL;
    String.append(_:)(v118);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v119._uint64_t countAndFlagsBits = 0xD000000000000034;
  v119._object = (void *)0x80000001000A8920;
  String.append(_:)(v119);
  char v120 = object;
  v150._object = v155;
  char v121 = *((void *)v93 + 2);
  if (v121)
  {
    v154._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    v150._uint64_t countAndFlagsBits = (uint64_t)v120;
    swift_bridgeObjectRetain();
    sub_100056F98(0, v121, 0);
    char v122 = 0;
    char v123 = (void *)v154._countAndFlagsBits;
    char v124 = v147;
    do
    {
      uint64_t v152 = *(_OWORD *)&v93[16 * v122 + 32];
      swift_bridgeObjectRetain();
      char v125 = (char *)v124;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v125 = sub_10005FFD8(0, *(void *)(v124 + 16) + 1, 1, (char *)v124);
      }
      char v127 = *((void *)v125 + 2);
      int v126 = *((void *)v125 + 3);
      if (v127 >= v126 >> 1) {
        char v125 = sub_10005FFD8((char *)(v126 > 1), v127 + 1, 1, v125);
      }
      *((void *)v125 + 2) = v127 + 1;
      *(_OWORD *)&v125[16 * v127 + 32] = v152;
      long long v128 = sub_10002C5DC(v125);
      uint64_t v130 = v129;
      swift_bridgeObjectRelease();
      v154._uint64_t countAndFlagsBits = (uint64_t)v123;
      long long v132 = v123[2];
      long long v131 = v123[3];
      if (v132 >= v131 >> 1)
      {
        sub_100056F98((char *)(v131 > 1), v132 + 1, 1);
        char v123 = (void *)v154._countAndFlagsBits;
      }
      ++v122;
      v123[2] = v132 + 1;
      long long v133 = &v123[2 * v132];
      v133[4] = v128;
      v133[5] = v130;
      uint64_t v93 = v151;
    }
    while (v121 != v122);
    char v120 = (void *)v150._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    char v123 = _swiftEmptyArrayStorage;
  }
  v154._uint64_t countAndFlagsBits = (uint64_t)v123;
  long long v134 = BidirectionalCollection<>.joined(separator:)();
  long long v136 = v135;
  swift_bridgeObjectRelease();
  v154._uint64_t countAndFlagsBits = (uint64_t)v150._object;
  v154._object = v120;
  swift_bridgeObjectRetain();
  v137._uint64_t countAndFlagsBits = v134;
  v137._object = v136;
  String.append(_:)(v137);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v154._countAndFlagsBits;
}

void *sub_10002D5E8()
{
  if (!*(unsigned char *)(v0 + 104))
  {
    uint64_t v1 = _swiftEmptyArrayStorage;
    if (*(void *)v0 >= 2uLL) {
      uint64_t v1 = (void *)swift_bridgeObjectRetain();
    }
    int64_t v2 = v1[2];
    if (v2)
    {
      sub_100056F98(0, v2, 0);
      unint64_t v3 = (unsigned __int8 *)(v1 + 6);
      while (1)
      {
        uint64_t v5 = *((void *)v3 - 2);
        unsigned int v4 = (void *)*((void *)v3 - 1);
        unsigned int v6 = *v3;
        if (!(v6 >> 6)) {
          break;
        }
        if (v6 >> 6 != 1)
        {
          uint64_t v14 = 45;
          unint64_t v8 = 0xE100000000000000;
          goto LABEL_11;
        }
        uint64_t v14 = 0;
        unint64_t v15 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        v7._uint64_t countAndFlagsBits = 45;
        v7._object = (void *)0xE100000000000000;
        String.append(_:)(v7);
        Character.write<A>(to:)();
LABEL_12:
        sub_10002ECB8(v5, (uint64_t)v4, v6);
        unint64_t v11 = _swiftEmptyArrayStorage[2];
        unint64_t v10 = _swiftEmptyArrayStorage[3];
        if (v11 >= v10 >> 1) {
          sub_100056F98((char *)(v10 > 1), v11 + 1, 1);
        }
        v3 += 24;
        _swiftEmptyArrayStorage[2] = v11 + 1;
        uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
        v12[4] = v14;
        v12[5] = v15;
        if (!--v2) {
          goto LABEL_15;
        }
      }
      uint64_t v14 = 11565;
      unint64_t v8 = 0xE200000000000000;
LABEL_11:
      unint64_t v15 = v8;
      swift_bridgeObjectRetain();
      v9._uint64_t countAndFlagsBits = v5;
      v9._object = v4;
      String.append(_:)(v9);
      goto LABEL_12;
    }
LABEL_15:
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

void sub_10002D7A4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(void *)a1)
  {
LABEL_2:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    unsigned int v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 128);
    switch(*(unsigned char *)(a1 + 144))
    {
      case 1:
      case 4:
        goto LABEL_2;
      case 2:
        uint64_t v39 = 10276;
        unint64_t v40 = 0xE200000000000000;
        uint64_t v8 = *(void *)(a1 + 136);
        String.append(_:)(*(Swift::String *)&v7);
        unint64_t v10 = 41;
        unint64_t v11 = 0xE100000000000000;
        goto LABEL_21;
      case 3:
        uint64_t v37 = v6;
        int v38 = a3;
        unint64_t v12 = *(void *)(a2 + 16);
        unint64_t v13 = v12 != 0;
        uint64_t v14 = v12 - v13;
        if (v12 == v13) {
          goto LABEL_15;
        }
        swift_bridgeObjectRetain();
        sub_100056F98(0, v14 & ~(v14 >> 63), 0);
        if (v14 < 0) {
          goto LABEL_23;
        }
        uint64_t v15 = a2 + 16 * v13 + 40;
        do
        {
          if (v13 >= v12)
          {
            __break(1u);
LABEL_23:
            __break(1u);
            JUMPOUT(0x10002DB2CLL);
          }
          uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v15 + 24))();
          uint64_t v18 = v17;
          unint64_t v20 = _swiftEmptyArrayStorage[2];
          unint64_t v19 = _swiftEmptyArrayStorage[3];
          if (v20 >= v19 >> 1) {
            sub_100056F98((char *)(v19 > 1), v20 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v20 + 1;
          uint64_t v21 = &_swiftEmptyArrayStorage[2 * v20];
          v21[4] = v16;
          v21[5] = v18;
          ++v13;
          v15 += 16;
        }
        while (v12 != v13);
        swift_bridgeObjectRelease();
LABEL_15:
        sub_100003DD0(&qword_1000C50C8);
        sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
        uint64_t v22 = BidirectionalCollection<>.joined(separator:)();
        char v24 = v23;
        swift_bridgeObjectRelease();
        v25._uint64_t countAndFlagsBits = sub_100065334((uint64_t)_swiftEmptyArrayStorage);
        if (v26 <= 0xFDu)
        {
          uint64_t countAndFlagsBits = v25._countAndFlagsBits;
          object = v25._object;
          unsigned __int8 v31 = v26;
          uint64_t v28 = sub_100076D6C(v25, v26);
          uint64_t v27 = v32;
          sub_10002ECD0(countAndFlagsBits, (uint64_t)object, v31);
        }
        else if (v37[2])
        {
          uint64_t v28 = v37[4];
          uint64_t v27 = (void *)v37[5];
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v27 = (void *)0xE300000000000000;
          uint64_t v28 = 2960685;
        }
        a3 = v38;
        uint64_t v39 = 0;
        unint64_t v40 = 0xE000000000000000;
        _StringGuts.grow(_:)(63);
        v33._uint64_t countAndFlagsBits = 0xD000000000000023;
        v33._object = (void *)0x80000001000A8AA0;
        String.append(_:)(v33);
        v34._uint64_t countAndFlagsBits = v22;
        v34._object = v24;
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
        v35._uint64_t countAndFlagsBits = 539831584;
        v35._object = (void *)0xE400000000000000;
        String.append(_:)(v35);
        v36._uint64_t countAndFlagsBits = v28;
        v36._object = v27;
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        unint64_t v11 = 0x80000001000A8AD0;
        unint64_t v10 = 0xD000000000000014;
LABEL_21:
        String.append(_:)(*(Swift::String *)&v10);
        *a3 = v39;
        a3[1] = v40;
        break;
      default:
        sub_100003DD0(&qword_1000C50C8);
        sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
        *a3 = BidirectionalCollection<>.joined(separator:)();
        a3[1] = v9;
        return;
    }
  }
}

unint64_t sub_10002DB40(uint64_t a1)
{
  unint64_t v3 = 0xD000000000000025;
  long long v14 = *(_OWORD *)(v1 + 128);
  char v15 = *(unsigned char *)(v1 + 144);
  sub_10002EC5C((uint64_t)&v14, (uint64_t)v16);
  sub_10002EC5C((uint64_t)v16, (uint64_t)&v17);
  uint64_t v4 = v17;
  switch(v18)
  {
    case 1:
      return v3;
    case 2:
      uint64_t v8 = (void *)*((void *)&v17 + 1);
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      strcpy((char *)v13, "COMPREPLY=( $(");
      HIBYTE(v13[1]) = -18;
      v9._uint64_t countAndFlagsBits = v4;
      v9._object = v8;
      String.append(_:)(v9);
      unint64_t v6 = 2695209;
      unint64_t v7 = 0xE300000000000000;
      goto LABEL_5;
    case 3:
      v13[0] = 0;
      v13[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(83);
      v10._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
      v10._object = (void *)0x80000001000A89C0;
      String.append(_:)(v10);
      v11._uint64_t countAndFlagsBits = (uint64_t)sub_10002EE00(a1);
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      unint64_t v6 = 0xD000000000000022;
      unint64_t v7 = 0x80000001000A89F0;
      goto LABEL_5;
    case 4:
      if (v17 == 0) {
        return 0;
      }
      return v3;
    default:
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      v13[0] = 0xD00000000000001ALL;
      v13[1] = 0x80000001000A8A20;
      sub_100003DD0(&qword_1000C50C8);
      sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
      v5._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      unint64_t v6 = 0x632422202D2D2022;
      unint64_t v7 = 0xEE00292029227275;
LABEL_5:
      String.append(_:)(*(Swift::String *)&v6);
      return v13[0];
  }
}

uint64_t variable initialization expression of OptionGroup.title()
{
  return 0;
}

uint64_t variable initialization expression of ArgumentInfoV0.valueName()
{
  return 0;
}

uint64_t sub_10002DDE4(uint64_t a1)
{
  return a1;
}

char *sub_10002DE7C(uint64_t a1)
{
  uint64_t v1 = sub_100031C40(0, a1);
  int64_t v2 = v1;
  uint64_t v3 = v1[2];
  if (v3)
  {
    uint64_t v4 = v1 + 4;
    swift_bridgeObjectRetain();
    unint64_t result = (char *)swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    long long v7 = v2[11];
    long long v58 = v2[10];
    long long v59 = v7;
    long long v8 = v2[13];
    long long v60 = v2[12];
    long long v61 = v8;
    long long v9 = v2[7];
    long long v54 = v2[6];
    long long v55 = v9;
    long long v10 = v2[9];
    long long v56 = v2[8];
    long long v57 = v10;
    long long v11 = v2[3];
    long long v50 = v2[2];
    long long v51 = v11;
    long long v12 = v2[5];
    long long v52 = v2[4];
    long long v53 = v12;
    unint64_t v13 = _swiftEmptyArrayStorage;
    long long v14 = (char *)_swiftEmptyArrayStorage;
    uint64_t v46 = v3;
    uint64_t v47 = v2 + 2;
    char v15 = _swiftEmptyArrayStorage;
    if (BYTE8(v56)) {
      goto LABEL_19;
    }
LABEL_3:
    if ((unint64_t)v50 >= 2) {
      uint64_t v16 = (void *)v50;
    }
    else {
      uint64_t v16 = v13;
    }
    long long v17 = v13;
    int64_t v18 = v16[2];
    if (v18)
    {
      sub_10002EA30(v50);
      sub_10002E940((uint64_t)&v50);
      sub_100056F98(0, v18, 0);
      char v15 = v17;
      unint64_t v19 = (unsigned __int8 *)(v16 + 6);
      while (1)
      {
        uint64_t v20 = *((void *)v19 - 2);
        uint64_t v21 = (void *)*((void *)v19 - 1);
        unsigned int v22 = *v19;
        if (!(v22 >> 6)) {
          break;
        }
        if (v22 >> 6 != 1)
        {
          uint64_t v48 = 45;
          unint64_t v24 = 0xE100000000000000;
          goto LABEL_13;
        }
        uint64_t v48 = 0;
        unint64_t v49 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        v23._uint64_t countAndFlagsBits = 45;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        Character.write<A>(to:)();
LABEL_14:
        sub_10002ECB8(v20, (uint64_t)v21, v22);
        unint64_t v27 = v15[2];
        unint64_t v26 = v15[3];
        if (v27 >= v26 >> 1) {
          sub_100056F98((char *)(v26 > 1), v27 + 1, 1);
        }
        v19 += 24;
        void v15[2] = v27 + 1;
        uint64_t v28 = &v15[2 * v27];
        v28[4] = v48;
        v28[5] = v49;
        if (!--v18)
        {
          swift_bridgeObjectRelease();
          unint64_t result = (char *)sub_10002EAFC((uint64_t)&v50);
          uint64_t v3 = v46;
          uint64_t v4 = v47;
          unint64_t v13 = _swiftEmptyArrayStorage;
          goto LABEL_19;
        }
      }
      uint64_t v48 = 11565;
      unint64_t v24 = 0xE200000000000000;
LABEL_13:
      unint64_t v49 = v24;
      swift_bridgeObjectRetain();
      v25._uint64_t countAndFlagsBits = v20;
      v25._object = v21;
      String.append(_:)(v25);
      goto LABEL_14;
    }
    sub_10002EA30(v50);
    unint64_t result = (char *)swift_bridgeObjectRelease();
    char v15 = v17;
    uint64_t v4 = v47;
    unint64_t v13 = v17;
    while (1)
    {
LABEL_19:
      uint64_t v29 = v15[2];
      int64_t v30 = *((void *)v14 + 2);
      int64_t v31 = v30 + v29;
      if (__OFADD__(v30, v29))
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return result;
      }
      unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (result && v31 <= *((void *)v14 + 3) >> 1)
      {
        if (v15[2]) {
          goto LABEL_23;
        }
      }
      else
      {
        if (v30 <= v31) {
          int64_t v35 = v30 + v29;
        }
        else {
          int64_t v35 = v30;
        }
        unint64_t result = sub_10005FA90(result, v35, 1, v14);
        long long v14 = result;
        if (v15[2])
        {
LABEL_23:
          if ((*((void *)v14 + 3) >> 1) - *((void *)v14 + 2) < v29) {
            goto LABEL_40;
          }
          unint64_t result = (char *)swift_arrayInitWithCopy();
          if (v29)
          {
            uint64_t v32 = *((void *)v14 + 2);
            BOOL v33 = __OFADD__(v32, v29);
            uint64_t v34 = v32 + v29;
            if (v33) {
              goto LABEL_41;
            }
            *((void *)v14 + 2) = v34;
          }
          goto LABEL_32;
        }
      }
      if (v29) {
        goto LABEL_39;
      }
LABEL_32:
      ++v6;
      unint64_t result = (char *)swift_bridgeObjectRelease();
      if (v6 == v3)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        return v14;
      }
      Swift::String v36 = (long long *)&v4[24 * v6];
      long long v37 = *v36;
      long long v38 = v36[1];
      long long v39 = v36[3];
      long long v52 = v36[2];
      long long v53 = v39;
      long long v50 = v37;
      long long v51 = v38;
      long long v40 = v36[4];
      long long v41 = v36[5];
      long long v42 = v36[6];
      long long v57 = v36[7];
      long long v55 = v41;
      long long v56 = v42;
      long long v54 = v40;
      long long v43 = v36[8];
      long long v44 = v36[9];
      long long v45 = v36[11];
      long long v60 = v36[10];
      long long v61 = v45;
      long long v58 = v43;
      long long v59 = v44;
      char v15 = v13;
      if (!BYTE8(v42)) {
        goto LABEL_3;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (char *)_swiftEmptyArrayStorage;
}

char *sub_10002E210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (char *)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v7 = *(_OWORD *)(a1 + 176);
  long long v49 = *(_OWORD *)(a1 + 160);
  long long v50 = v7;
  long long v8 = *(_OWORD *)(a1 + 208);
  long long v51 = *(_OWORD *)(a1 + 192);
  long long v52 = v8;
  long long v9 = *(_OWORD *)(a1 + 112);
  long long v45 = *(_OWORD *)(a1 + 96);
  long long v46 = v9;
  long long v10 = *(_OWORD *)(a1 + 144);
  long long v47 = *(_OWORD *)(a1 + 128);
  long long v48 = v10;
  long long v11 = *(_OWORD *)(a1 + 48);
  long long v41 = *(_OWORD *)(a1 + 32);
  long long v42 = v11;
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v43 = *(_OWORD *)(a1 + 64);
  long long v44 = v12;
  long long v37 = v49;
  long long v38 = v50;
  long long v39 = v51;
  long long v40 = v52;
  long long v33 = v45;
  long long v34 = v46;
  long long v35 = v47;
  long long v36 = v48;
  long long v29 = v41;
  long long v30 = v42;
  long long v31 = v43;
  long long v32 = v12;
  sub_10002E940((uint64_t)&v41);
  sub_10002D7A4((uint64_t)&v29, a3, &v27);
  if (v3)
  {
    unint64_t v13 = (char *)_swiftEmptyArrayStorage;
    sub_10002EAFC((uint64_t)&v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v13 = (char *)_swiftEmptyArrayStorage;
    uint64_t v14 = 224;
    uint64_t v53 = a3;
    while (1)
    {
      sub_10002EAFC((uint64_t)&v41);
      uint64_t v15 = v28;
      if (v28)
      {
        uint64_t v16 = v27;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v13 = sub_10005FA90(0, *((void *)v13 + 2) + 1, 1, v13);
        }
        unint64_t v18 = *((void *)v13 + 2);
        unint64_t v17 = *((void *)v13 + 3);
        if (v18 >= v17 >> 1) {
          unint64_t v13 = sub_10005FA90((char *)(v17 > 1), v18 + 1, 1, v13);
        }
        *((void *)v13 + 2) = v18 + 1;
        unint64_t v19 = &v13[16 * v18];
        *((void *)v19 + 4) = v16;
        *((void *)v19 + 5) = v15;
        a3 = v53;
      }
      if (!--v4) {
        break;
      }
      long long v20 = *(_OWORD *)(a1 + v14 + 144);
      long long v49 = *(_OWORD *)(a1 + v14 + 128);
      long long v50 = v20;
      long long v21 = *(_OWORD *)(a1 + v14 + 176);
      long long v51 = *(_OWORD *)(a1 + v14 + 160);
      long long v52 = v21;
      long long v22 = *(_OWORD *)(a1 + v14 + 80);
      long long v45 = *(_OWORD *)(a1 + v14 + 64);
      long long v46 = v22;
      long long v23 = *(_OWORD *)(a1 + v14 + 112);
      long long v47 = *(_OWORD *)(a1 + v14 + 96);
      long long v48 = v23;
      long long v24 = *(_OWORD *)(a1 + v14 + 16);
      long long v41 = *(_OWORD *)(a1 + v14);
      long long v42 = v24;
      long long v25 = *(_OWORD *)(a1 + v14 + 48);
      long long v43 = *(_OWORD *)(a1 + v14 + 32);
      long long v44 = v25;
      long long v37 = v49;
      long long v38 = v50;
      long long v39 = v51;
      long long v40 = v52;
      long long v33 = v45;
      long long v34 = v46;
      long long v35 = v47;
      long long v36 = v48;
      long long v29 = v41;
      long long v30 = v42;
      long long v31 = v43;
      long long v32 = v25;
      sub_10002E940((uint64_t)&v41);
      sub_10002D7A4((uint64_t)&v29, a3, &v27);
      v14 += 192;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v13;
}

char *sub_10002E484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v42 = a3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v7 = a1;
  long long v8 = (char *)v48 + 8;
  swift_bridgeObjectRetain();
  v39[4] = a2;
  swift_bridgeObjectRetain();
  long long v9 = (char *)_swiftEmptyArrayStorage;
  uint64_t v10 = 32;
  long long v40 = (char *)v48 + 8;
  uint64_t v41 = v7;
  do
  {
    long long v11 = *(_OWORD *)(v7 + v10 + 144);
    v47[8] = *(_OWORD *)(v7 + v10 + 128);
    v48[0] = v11;
    long long v12 = *(_OWORD *)(v7 + v10 + 176);
    v48[1] = *(_OWORD *)(v7 + v10 + 160);
    v48[2] = v12;
    long long v13 = *(_OWORD *)(v7 + v10 + 80);
    v47[4] = *(_OWORD *)(v7 + v10 + 64);
    v47[5] = v13;
    long long v14 = *(_OWORD *)(v7 + v10 + 112);
    v47[6] = *(_OWORD *)(v7 + v10 + 96);
    v47[7] = v14;
    long long v15 = *(_OWORD *)(v7 + v10 + 16);
    v47[0] = *(_OWORD *)(v7 + v10);
    v47[1] = v15;
    long long v16 = *(_OWORD *)(v7 + v10 + 48);
    v47[2] = *(_OWORD *)(v7 + v10 + 32);
    v47[3] = v16;
    sub_10002E940((uint64_t)v47);
    uint64_t v17 = sub_10002D5E8()[2];
    swift_bridgeObjectRelease();
    if (v17
      && (sub_10002EAA0((uint64_t)v8, (uint64_t)v49), sub_10002EAA0((uint64_t)v49, (uint64_t)v50), (v50[16] & 1) != 0))
    {
      long long v45 = 0;
      unint64_t v46 = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      long long v43 = v9;
      long long v45 = sub_10002D5E8();
      sub_100003DD0(&qword_1000C50C8);
      sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
      uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v45 = (void *)v18;
      unint64_t v46 = v20;
      v21._uint64_t countAndFlagsBits = 2601;
      v21._object = (void *)0xE200000000000000;
      String.append(_:)(v21);
      unint64_t v22 = sub_10002DB40(v42);
      unint64_t v24 = v23;
      v44[0] = 10;
      v44[1] = 0xE100000000000000;
      __chkstk_darwin(v22);
      uint64_t v39[2] = v44;
      swift_bridgeObjectRetain();
      long long v25 = sub_1000342C0(0x7FFFFFFFFFFFFFFFLL, 0, sub_10002ECE4, (uint64_t)v39, v22, v24);
      v26._uint64_t countAndFlagsBits = 32;
      v26._object = (void *)0xE100000000000000;
      String.init(repeating:count:)(v26, 4);
      uint64_t v27 = sub_100034E90((uint64_t)v25);
      uint64_t v51 = v4;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v44[0] = v27;
      sub_100003DD0(&qword_1000C50D8);
      sub_100005178(&qword_1000C50E0, &qword_1000C50D8);
      sub_10002E898();
      uint64_t v28 = Sequence<>.joined(separator:)();
      long long v30 = v29;
      long long v9 = v43;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31._uint64_t countAndFlagsBits = v28;
      v31._object = v30;
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v32._uint64_t countAndFlagsBits = 0x746572202020200ALL;
      v32._object = (void *)0xEE003B3B0A6E7275;
      String.append(_:)(v32);
      sub_10002EAFC((uint64_t)v47);
      long long v33 = v45;
      unint64_t v34 = v46;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v9 = sub_10005FA90(0, *((void *)v9 + 2) + 1, 1, v9);
      }
      unint64_t v36 = *((void *)v9 + 2);
      unint64_t v35 = *((void *)v9 + 3);
      if (v36 >= v35 >> 1) {
        long long v9 = sub_10005FA90((char *)(v35 > 1), v36 + 1, 1, v9);
      }
      *((void *)v9 + 2) = v36 + 1;
      long long v37 = &v9[16 * v36];
      *((void *)v37 + 4) = v33;
      *((void *)v37 + 5) = v34;
      long long v8 = v40;
      uint64_t v7 = v41;
      uint64_t v4 = v51;
    }
    else
    {
      sub_10002EAFC((uint64_t)v47);
    }
    v10 += 192;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_10002E878(void *a1)
{
  return sub_100034D88(a1, *(void **)(v1 + 16)) & 1;
}

unint64_t sub_10002E898()
{
  unint64_t result = qword_1000C50E8;
  if (!qword_1000C50E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C50E8);
  }
  return result;
}

unint64_t sub_10002E8EC()
{
  unint64_t result = qword_1000C50F0;
  if (!qword_1000C50F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C50F0);
  }
  return result;
}

uint64_t sub_10002E940(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  char v3 = *(unsigned char *)(a1 + 144);
  sub_10002EA30(*(void *)a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10002EA40(v5, v2, v3);
  sub_10002EA98();
  swift_retain();
  return a1;
}

unint64_t sub_10002EA30(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10002EA40(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    case 3:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10002EA98()
{
  return swift_retain();
}

uint64_t sub_10002EAA0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10002EAFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *(void *)(a1 + 136);
  char v4 = *(unsigned char *)(a1 + 144);
  sub_10002EBEC(*(void *)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002EBFC(v2, v3, v4);
  sub_10002EC54();
  swift_release();
  return a1;
}

unint64_t sub_10002EBEC(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10002EBFC(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 3:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10002EC54()
{
  return swift_release();
}

uint64_t sub_10002EC5C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10002ECB8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xBFu) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10002ECD0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xFDu) {
    return sub_10002ECB8(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_10002ECE4(void *a1)
{
  return sub_10002E878(a1) & 1;
}

void *sub_10002ED00(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100056F98(0, v1, 0);
    uint64_t v3 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = static String._fromSubstring(_:)();
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_100056F98((char *)(v7 > 1), v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      long long v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v4;
      v9[5] = v6;
      v3 += 32;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

char *sub_10002EE00(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = v3 != 0;
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v6 = v3 - v4;
  if (v3 == v4)
  {
LABEL_9:
    v33[0] = v5;
    sub_100003DD0(&qword_1000C50C8);
    sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
    uint64_t v16 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    unint64_t v19 = *(void **)v2;
    if (*(void *)v2 >= 2uLL) {
      swift_bridgeObjectRetain();
    }
    else {
      unint64_t v19 = _swiftEmptyArrayStorage;
    }
    uint64_t v20 = sub_100065334((uint64_t)v19);
    unint64_t v22 = v21;
    unsigned __int8 v24 = v23;
    unsigned int v25 = v23;
    swift_bridgeObjectRelease();
    if (v25 <= 0xFD)
    {
      v34._uint64_t countAndFlagsBits = v20;
      v34._object = v22;
      uint64_t v28 = sub_100076D6C(v34, v24);
      uint64_t v27 = v29;
      sub_10002ECD0(v20, (uint64_t)v22, v24);
    }
    else
    {
      Swift::String v26 = *(void **)(v2 + 32);
      if (v26[2])
      {
        uint64_t v28 = v26[4];
        uint64_t v27 = (void *)v26[5];
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v27 = (void *)0xE300000000000000;
        uint64_t v28 = 2960685;
      }
    }
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    strcpy((char *)v33, "---completion ");
    HIBYTE(v33[1]) = -18;
    v30._uint64_t countAndFlagsBits = v16;
    v30._object = v18;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 539831584;
    v31._object = (void *)0xE400000000000000;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = v28;
    v32._object = v27;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    return (char *)v33[0];
  }
  else
  {
    v33[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    uint64_t result = sub_100056F98(0, v6 & ~(v6 >> 63), 0);
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v5 = (void *)v33[0];
      uint64_t v9 = a1 + 16 * v4 + 40;
      while (v4 < v3)
      {
        uint64_t result = (char *)(*(uint64_t (**)(void))(*(void *)v9 + 24))();
        uint64_t v10 = result;
        uint64_t v12 = v11;
        v33[0] = v5;
        unint64_t v14 = v5[2];
        unint64_t v13 = v5[3];
        if (v14 >= v13 >> 1)
        {
          uint64_t result = sub_100056F98((char *)(v13 > 1), v14 + 1, 1);
          uint64_t v5 = (void *)v33[0];
        }
        uint64_t v5[2] = v14 + 1;
        long long v15 = &v5[2 * v14];
        v15[4] = v10;
        v15[5] = v12;
        ++v4;
        v9 += 16;
        if (v3 == v4)
        {
          swift_bridgeObjectRelease();
          uint64_t v2 = v1;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t ValidationError.message.getter(uint64_t a1)
{
  return a1;
}

uint64_t CommandConfiguration.commandName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

Swift::String_optional (__swiftcall *ToolInfoHeader.serializationVersion.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t static CompletionShell.zsh.getter()
{
  return 6845306;
}

uint64_t static CompletionShell.bash.getter()
{
  return 1752392034;
}

uint64_t static CompletionShell.fish.getter()
{
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return 1752394086;
}

uint64_t static CompletionShell.autodetected()()
{
  uint64_t v0 = sub_100095C5C();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v0;
  uint64_t v3 = v1;
  uint64_t v4 = 6845306;
  if (v0 != 6845306 || v1 != 0xE300000000000000)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      return v2;
    }
    uint64_t v4 = 1752392034;
    if (v2 != 1752392034 || v3 != 0xE400000000000000)
    {
      char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v7 = v2 == 1752394086 && v3 == 0xE400000000000000;
      if (v5 & 1) != 0 || v7 || (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        return v2;
      }
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v4;
}

_UNKNOWN **static CompletionShell.allCases.getter()
{
  return &off_1000BC1C0;
}

uint64_t sub_10002F314@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = _s14ArgumentParser15CompletionShellV8rawValueACSgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10002F344@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

Swift::Int sub_10002F350()
{
  return Hasher._finalize()();
}

uint64_t sub_10002F3AC()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10002F404()
{
  return Hasher._finalize()();
}

void sub_10002F45C(void *a1@<X8>)
{
  *a1 = &off_1000BC1C0;
}

uint64_t sub_10002F46C(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_10002F49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v6 = a1 == 6845306 && a2 == 0xE300000000000000;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return sub_100031ED4(a3, a4);
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    if (a1 == 1752392034 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      return sub_10002C440(a3, a4);
    }
    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      if (a1 == 1752394086 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        return sub_10002FE34(a3, a4);
      }
      else
      {
        _StringGuts.grow(_:)(27);
        v10._object = (void *)0x80000001000A8B20;
        v10._uint64_t countAndFlagsBits = 0xD000000000000019;
        String.append(_:)(v10);
        _print_unlocked<A, B>(_:_:)();
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
  }
  return result;
}

void *sub_10002F6F8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v21);
  sub_10002FAF4((uint64_t)&v22, (uint64_t)v23);
  sub_10002FB5C((uint64_t)v23);
  sub_10002DDE4((uint64_t)v21);
  sub_10002FAF4((uint64_t)v23, (uint64_t)&v24);
  if (*((void *)&v24 + 1))
  {
    sub_100003DD0(&qword_1000C5118);
    uint64_t v4 = swift_allocObject();
    long long v5 = v24;
    *(_OWORD *)(v4 + 16) = xmmword_1000A2660;
    *(_OWORD *)(v4 + 32) = v5;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
    unint64_t v8 = v7;
    uint64_t v19 = 32;
    unint64_t v20 = 0xE100000000000000;
    __chkstk_darwin(v6);
    uint64_t v18 = &v19;
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1000342C0(0x7FFFFFFFFFFFFFFFLL, 1, sub_10002ECE4, (uint64_t)v17, v6, v8);
    swift_bridgeObjectRelease();
    Swift::String v10 = sub_10002ED00((uint64_t)v9);
    swift_bridgeObjectRelease();
    uint64_t v19 = v4;
    sub_10005E9FC((uint64_t)v10);
    return (void *)v19;
  }
  else
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
    unint64_t v14 = v13;
    uint64_t v19 = 32;
    unint64_t v20 = 0xE100000000000000;
    __chkstk_darwin(v12);
    uint64_t v18 = &v19;
    swift_bridgeObjectRetain();
    long long v15 = sub_1000342C0(0x7FFFFFFFFFFFFFFFLL, 1, sub_10002E878, (uint64_t)v17, v12, v14);
    swift_bridgeObjectRelease();
    uint64_t v11 = sub_10002ED00((uint64_t)v15);
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t _s14ArgumentParser15CompletionShellV8rawValueACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  if (a1 == 6845306 && a2 == 0xE300000000000000) {
    return 6845306;
  }
  uint64_t v4 = a1;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v4 == 1752392034 && a2 == 0xE400000000000000)
    {
      return 1752392034;
    }
    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v8 = v4 == 1752394086 && a2 == 0xE400000000000000;
      if ((v6 & 1) == 0 && !v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
  }
  return v4;
}

unint64_t sub_10002FA48()
{
  unint64_t result = qword_1000C50F8;
  if (!qword_1000C50F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C50F8);
  }
  return result;
}

uint64_t sub_10002FA9C()
{
  return sub_100005178(&qword_1000C5100, &qword_1000C5108);
}

__n128 initializeWithTake for ArgumentSet(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for CompletionShell()
{
  return &type metadata for CompletionShell;
}

uint64_t sub_10002FAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003DD0(&qword_1000C5110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002FB5C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002FB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4)
  {
    uint64_t v7 = sub_100095C5C();
    if (v8)
    {
      uint64_t v4 = v7;
      uint64_t v9 = v8;
      if (v7 == 6845306 && v8 == 0xE300000000000000) {
        return 6845306;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        return v4;
      }
      if (v4 == 1752392034 && v9 == 0xE400000000000000) {
        return 1752392034;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        return v4;
      }
      if (v4 == 1752394086 && v9 == 0xE400000000000000) {
        return 1752394086;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        return v4;
      }
      swift_bridgeObjectRelease();
    }
    sub_10002FDE0();
    swift_allocError();
    long long v11 = 0uLL;
    *(_OWORD *)uint64_t v10 = 0u;
    goto LABEL_28;
  }
  uint64_t v4 = 6845306;
  if (a3 != 6845306 || a4 != 0xE300000000000000)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      return a3;
    }
    uint64_t v4 = 1752392034;
    if (a3 != 1752392034 || a4 != 0xE400000000000000)
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        return a3;
      }
      uint64_t v4 = 1752394086;
      if (a3 != 1752394086 || a4 != 0xE400000000000000)
      {
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          return a3;
        }
        sub_10002FDE0();
        swift_allocError();
        *(void *)uint64_t v10 = a3;
        *(void *)(v10 + 8) = a4;
        long long v11 = 0uLL;
LABEL_28:
        *(_OWORD *)(v10 + 16) = v11;
        *(_OWORD *)(v10 + 32) = v11;
        *(_OWORD *)(v10 + 48) = v11;
        *(_OWORD *)(v10 + 64) = v11;
        *(unsigned char *)(v10 + 80) = 3;
        swift_willThrow();
      }
    }
  }
  return v4;
}

unint64_t sub_10002FDE0()
{
  unint64_t result = qword_1000C5120;
  if (!qword_1000C5120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5120);
  }
  return result;
}

uint64_t sub_10002FE34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 24))();
  char v6 = v5;
  sub_100003DD0(&qword_1000C5118);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1000A2CD0;
  *(void *)(v7 + 32) = sub_100031644(v4, v6);
  *(void *)(v7 + 40) = v8;
  *(void *)(v7 + 48) = sub_100031764(v4, v6);
  *(void *)(v7 + 56) = v9;
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1000A2660;
  *(void *)(v10 + 32) = v4;
  *(void *)(v10 + 40) = v6;
  sub_100003DD0(&qword_1000C50C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000A2660;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  sub_100030030((void *)v10, inited);
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  sub_100003DD0(&qword_1000C50C8);
  sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
  uint64_t v12 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 2570;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

char *sub_100030030(void *a1, uint64_t a2)
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *countAndFlagsBits;
  long long *v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  char *v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  void *object;
  int64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  int64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  long long v84;
  long long v85;
  Swift::String v86;
  void v87[13];
  uint64_t v88;
  void v89[12];
  char v90;
  uint64_t v91;

  uint64_t v8 = *(void *)(a2 + 16);
  if (!v8) {
    goto LABEL_59;
  }
  if (!a1[2]) {
    goto LABEL_60;
  }
  char v6 = (char *)a2;
  uint64_t v9 = a2 + 16 * v8;
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void *)(v9 + 24);
  uint64_t v7 = a1[4];
  uint64_t v3 = (void *)a1[5];
  uint64_t v83 = a1;
  uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  v12(v87, v10, v11);
  Swift::String v13 = v88;
  uint64_t v91 = v88;
  swift_bridgeObjectRetain();
  sub_10002DDE4((uint64_t)v87);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t countAndFlagsBits = _swiftEmptyArrayStorage;
  if (v14)
  {
    uint64_t v16 = (long long *)(v13 + 32);
    do
    {
      char v84 = *v16;
      (*(void (**)(void *__return_ptr))(*((void *)v16 + 1) + 16))(v89);
      sub_10002DDE4((uint64_t)v89);
      if (v90)
      {
        v86._uint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100056FF8(0, countAndFlagsBits[2] + 1, 1);
          uint64_t countAndFlagsBits = (void *)v86._countAndFlagsBits;
        }
        uint64_t v18 = countAndFlagsBits[2];
        Swift::String v17 = countAndFlagsBits[3];
        if (v18 >= v17 >> 1)
        {
          sub_100056FF8((char *)(v17 > 1), v18 + 1, 1);
          uint64_t countAndFlagsBits = (void *)v86._countAndFlagsBits;
        }
        countAndFlagsBits[2] = v18 + 1;
        *(_OWORD *)&countAndFlagsBits[2 * v18 + 4] = v84;
      }
      ++v16;
      --v14;
    }
    while (v14);
  }
  sub_10002BAD0((uint64_t)&v91);
  if (v8 != 1)
  {
    uint64_t v19 = countAndFlagsBits;
    uint64_t v4 = v83;
    goto LABEL_19;
  }
  int64_t v2 = countAndFlagsBits[2];
  uint64_t v19 = countAndFlagsBits;
  uint64_t v4 = v83;
  if (!v2) {
    goto LABEL_19;
  }
  uint64_t inited = (uint64_t)v19;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_61;
  }
  while (1)
  {
    Swift::String v21 = *(void *)(inited + 16);
    unint64_t v20 = *(void *)(inited + 24);
    if (v21 >= v20 >> 1) {
      uint64_t inited = (uint64_t)sub_10005FFD8((char *)(v20 > 1), v21 + 1, 1, (char *)inited);
    }
    uint64_t v22 = sub_10002E8EC();
    uint64_t v19 = (void *)inited;
    *(void *)(inited + 16) = v21 + 1;
    unsigned __int8 v23 = inited + 16 * v21;
    *(void *)(v23 + 32) = &type metadata for HelpCommand;
    *(void *)(v23 + 40) = v22;
LABEL_19:
    HIDWORD(v86._object) = -335544320;
    v24._uint64_t countAndFlagsBits = v7;
    v24._object = v3;
    String.append(_:)(v24);
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = 0x635F676E6973755FLL;
    v25._object = (void *)0xEE00646E616D6D6FLL;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    Swift::String v26 = strcpy((char *)&v86, "_swift_");
    uint64_t v27 = swift_allocObject();
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    strcpy((char *)&v86, "complete -c ");
    v28._uint64_t countAndFlagsBits = v7;
    v28._object = v3;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 0x27206E2D20;
    v29._object = (void *)0xE500000000000000;
    String.append(_:)(v29);
    v30._uint64_t countAndFlagsBits = (uint64_t)v26;
    v30._object = (void *)0xE700000000000000;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 8736;
    v31._object = (void *)0xE200000000000000;
    String.append(_:)(v31);
    sub_100003DD0(&qword_1000C50C8);
    sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
    v32._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 34;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    object = v86._object;
    *(void *)(v27 + 16) = v86._countAndFlagsBits;
    uint64_t v81 = v27;
    *(void *)(v27 + 24) = object;
    unint64_t v35 = v19[2];
    BOOL v82 = v19;
    if (v35)
    {
      v86._uint64_t countAndFlagsBits = 8736;
      v86._object = (void *)0xE200000000000000;
      swift_bridgeObjectRetain();
      sub_100056F98(0, v35, 0);
      unint64_t v36 = v19 + 5;
      do
      {
        long long v37 = (*(uint64_t (**)(void))(*v36 + 24))();
        long long v39 = v38;
        uint64_t v41 = _swiftEmptyArrayStorage[2];
        long long v40 = _swiftEmptyArrayStorage[3];
        if (v41 >= v40 >> 1) {
          sub_100056F98((char *)(v40 > 1), v41 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v41 + 1;
        uint64_t v42 = &_swiftEmptyArrayStorage[2 * v41];
        v42[4] = v37;
        v42[5] = v39;
        v36 += 2;
        --v35;
      }
      while (v35);
      swift_bridgeObjectRelease();
      long long v43 = BidirectionalCollection<>.joined(separator:)();
      long long v45 = v44;
      swift_release();
      v46._uint64_t countAndFlagsBits = v43;
      v46._object = v45;
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      v47._uint64_t countAndFlagsBits = 34;
      v47._object = (void *)0xE100000000000000;
      String.append(_:)(v47);
      String.append(_:)(v86);
      swift_bridgeObjectRelease();
      uint64_t v4 = v83;
    }
    v48._uint64_t countAndFlagsBits = 39;
    v48._object = (void *)0xE100000000000000;
    String.append(_:)(v48);
    long long v49 = swift_bridgeObjectRetain();
    uint64_t v80 = sub_10003110C(v49, v27);
    swift_bridgeObjectRelease();
    long long v50 = sub_100031C40(0, (uint64_t)v6);
    long long v52 = v51;
    swift_bridgeObjectRetain();
    uint64_t v53 = sub_1000314DC((uint64_t)v50, v52, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v54 = v53[2];
    if (v54)
    {
      v86._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
      sub_100056F98(0, v54, 0);
      long long v55 = 0;
      long long v56 = _swiftEmptyArrayStorage;
      do
      {
        swift_bridgeObjectRetain();
        long long v57 = BidirectionalCollection<>.joined(separator:)();
        long long v59 = v58;
        swift_bridgeObjectRelease();
        v86._uint64_t countAndFlagsBits = (uint64_t)v56;
        long long v61 = v56[2];
        long long v60 = v56[3];
        if (v61 >= v60 >> 1)
        {
          sub_100056F98((char *)(v60 > 1), v61 + 1, 1);
          long long v56 = (void *)v86._countAndFlagsBits;
        }
        ++v55;
        v56[2] = v61 + 1;
        uint64_t v62 = &v56[2 * v61];
        v62[4] = v57;
        v62[5] = v59;
      }
      while (v54 != v55);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      long long v56 = _swiftEmptyArrayStorage;
    }
    uint64_t v63 = sub_1000313A8((uint64_t)v56, v81);
    swift_bridgeObjectRelease();
    int64_t v2 = (int64_t)v19;
    uint64_t v3 = (void *)v19[2];
    if (!v3) {
      break;
    }
    uint64_t v79 = v63;
    swift_bridgeObjectRetain_n();
    unsigned __int8 v64 = 0;
    char v6 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      Swift::String v85 = *(_OWORD *)(v2 + 16 * v64 + 32);
      unsigned __int8 v65 = (*(uint64_t (**)(void))(*(void *)(v2 + 16 * v64 + 40) + 24))();
      unsigned __int8 v67 = v66;
      uint64_t v68 = (char *)v83;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v68 = sub_10005FA90(0, v83[2] + 1, 1, (char *)v83);
      }
      uint64_t v70 = *((void *)v68 + 2);
      uint64_t v69 = *((void *)v68 + 3);
      if (v70 >= v69 >> 1) {
        uint64_t v68 = sub_10005FA90((char *)(v69 > 1), v70 + 1, 1, v68);
      }
      *((void *)v68 + 2) = v70 + 1;
      uint64_t v71 = &v68[16 * v70];
      *((void *)v71 + 4) = v65;
      *((void *)v71 + 5) = v67;
      swift_bridgeObjectRelease();
      sub_100003DD0(&qword_1000C50C0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1000A2660;
      *(_OWORD *)(inited + 32) = v85;
      BOOL v72 = sub_100030030(v68, inited);
      swift_setDeallocating();
      swift_bridgeObjectRelease();
      uint64_t v7 = *(void *)(v72 + 16);
      int64_t v2 = *((void *)v6 + 2);
      uint64_t v4 = (void *)(v2 + v7);
      if (__OFADD__(v2, v7)) {
        break;
      }
      char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || (uint64_t)v4 > *((void *)v6 + 3) >> 1)
      {
        if (v2 <= (uint64_t)v4) {
          unint64_t v74 = v2 + v7;
        }
        else {
          unint64_t v74 = v2;
        }
        char v6 = sub_10005FA90(isUniquelyReferenced_nonNull_native, v74, 1, v6);
      }
      int64_t v2 = (int64_t)v82;
      if (*(void *)(v72 + 16))
      {
        if ((*((void *)v6 + 3) >> 1) - *((void *)v6 + 2) < v7) {
          goto LABEL_57;
        }
        swift_arrayInitWithCopy();
        if (v7)
        {
          uint64_t v75 = *((void *)v6 + 2);
          uint64_t v76 = __OFADD__(v75, v7);
          uint64_t v77 = v75 + v7;
          if (v76) {
            goto LABEL_58;
          }
          *((void *)v6 + 2) = v77;
        }
      }
      else if (v7)
      {
        __break(1u);
        break;
      }
      swift_bridgeObjectRelease();
      if (v3 == (void *)++v64)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v63 = v79;
        goto LABEL_54;
      }
    }
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    uint64_t inited = (uint64_t)sub_10005FFD8(0, v2 + 1, 1, (char *)inited);
  }
  char v6 = (char *)_swiftEmptyArrayStorage;
LABEL_54:
  swift_bridgeObjectRelease();
  sub_10005E9FC((uint64_t)v63);
  sub_10005E9FC((uint64_t)v80);
  swift_release();
  return v6;
}

char *sub_1000308EC(void *a1)
{
  if (*(unsigned char *)(v1 + 104)) {
    return 0;
  }
  uint64_t v4 = v1;
  uint64_t v6 = *(void *)(v1 + 56);
  unint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = *(void **)v4;
  if (*(void *)v4 > 1uLL)
  {
    if (v8[2])
    {
      swift_bridgeObjectRetain();
      int64_t v10 = v8[2];
      if (v10) {
        goto LABEL_7;
      }
      goto LABEL_20;
    }
    return 0;
  }
  uint64_t v8 = _swiftEmptyArrayStorage;
  uint64_t v9 = _swiftEmptyArrayStorage[2];
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0;
  }
  int64_t v10 = _swiftEmptyArrayStorage[2];
  if (v10)
  {
LABEL_7:
    unint64_t v53 = v7;
    uint64_t v54 = v4;
    v62._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
    sub_100056F98(0, v10, 0);
    uint64_t countAndFlagsBits = (char *)_swiftEmptyArrayStorage;
    uint64_t v12 = (unsigned __int8 *)(v8 + 6);
    while (1)
    {
      uint64_t v13 = *((void *)v12 - 2);
      uint64_t v14 = (void *)*((void *)v12 - 1);
      unsigned int v15 = *v12;
      if (!(v15 >> 6)) {
        break;
      }
      if (v15 >> 6 != 1)
      {
        v55[0] = 2125613;
        goto LABEL_13;
      }
      v55[0] = 0;
      v55[1] = 0xE000000000000000;
      swift_bridgeObjectRetain();
      v16._uint64_t countAndFlagsBits = 2126637;
      v16._object = (void *)0xE300000000000000;
      String.append(_:)(v16);
      Character.write<A>(to:)();
LABEL_14:
      sub_10002ECB8(v13, (uint64_t)v14, v15);
      uint64_t v18 = v55[0];
      uint64_t v19 = v55[1];
      v62._uint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
      unint64_t v21 = *((void *)countAndFlagsBits + 2);
      unint64_t v20 = *((void *)countAndFlagsBits + 3);
      if (v21 >= v20 >> 1)
      {
        sub_100056F98((char *)(v20 > 1), v21 + 1, 1);
        uint64_t countAndFlagsBits = (char *)v62._countAndFlagsBits;
      }
      v12 += 24;
      *((void *)countAndFlagsBits + 2) = v21 + 1;
      uint64_t v22 = &countAndFlagsBits[16 * v21];
      *((void *)v22 + 4) = v18;
      *((void *)v22 + 5) = v19;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = v54;
        unint64_t v7 = v53;
        goto LABEL_21;
      }
    }
    v55[0] = 2124845;
LABEL_13:
    v55[1] = 0xE300000000000000;
    sub_1000319B8(v13, (uint64_t)v14, v15);
    v17._uint64_t countAndFlagsBits = v13;
    v17._object = v14;
    String.append(_:)(v17);
    goto LABEL_14;
  }
LABEL_20:
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = (char *)_swiftEmptyArrayStorage;
LABEL_21:
  uint64_t v23 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v23 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v23)
  {
    v55[0] = 656434221;
    v55[1] = 0xE400000000000000;
    v62._uint64_t countAndFlagsBits = v6;
    v62._object = (void *)v7;
    v60[0] = 39;
    v60[1] = 0xE100000000000000;
    v59[0] = 10076;
    v59[1] = 0xE200000000000000;
    sub_1000319D0();
    v24._uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 39;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t countAndFlagsBits = sub_10005FA90(0, *((void *)countAndFlagsBits + 2) + 1, 1, countAndFlagsBits);
    }
    unint64_t v27 = *((void *)countAndFlagsBits + 2);
    unint64_t v26 = *((void *)countAndFlagsBits + 3);
    if (v27 >= v26 >> 1) {
      uint64_t countAndFlagsBits = sub_10005FA90((char *)(v26 > 1), v27 + 1, 1, countAndFlagsBits);
    }
    *((void *)countAndFlagsBits + 2) = v27 + 1;
    uint64_t v28 = &countAndFlagsBits[16 * v27];
    *((void *)v28 + 4) = 656434221;
    *((void *)v28 + 5) = 0xE400000000000000;
    swift_bridgeObjectRelease();
  }
  sub_10002EAA0(v4 + 152, (uint64_t)v59);
  sub_10002EAA0((uint64_t)v59, (uint64_t)v60);
  if ((v61 & 1) == 0) {
    return countAndFlagsBits;
  }
  long long v56 = *(_OWORD *)(v4 + 128);
  char v57 = *(unsigned char *)(v4 + 144);
  sub_10002EC5C((uint64_t)&v56, (uint64_t)v58);
  sub_10002EC5C((uint64_t)v58, (uint64_t)&v62);
  switch(v63)
  {
    case 1:
      sub_100003DD0(&qword_1000C50C8);
      sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
      v32._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._uint64_t countAndFlagsBits = 125;
      v33._object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      v55[0] = 0xD000000000000014;
      v55[1] = 0x80000001000A8BC0;
      v34._uint64_t countAndFlagsBits = 8072746;
      v34._object = (void *)0xE300000000000000;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      unint64_t v30 = 0x24206F686365203BLL;
      unint64_t v31 = 0xEF2729646E653B69;
      goto LABEL_36;
    case 2:
      strcpy((char *)v55, "-r -f -a '(");
      HIDWORD(v55[1]) = -352321536;
      String.append(_:)(v62);
      unint64_t v30 = 10025;
      unint64_t v31 = 0xE200000000000000;
      goto LABEL_36;
    case 3:
      uint64_t v35 = a1[2];
      if (v35)
      {
        uint64_t v36 = a1[4];
        long long v37 = (void *)a1[5];
        v55[2] = 1;
        v55[3] = (2 * v35) | 1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100003DD0(&qword_1000C5130);
        sub_100005178(&qword_1000C5138, &qword_1000C5130);
        uint64_t v38 = BidirectionalCollection<>.joined(separator:)();
        long long v40 = v39;
        swift_bridgeObjectRelease();
        v55[0] = 0;
        v55[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(78);
        v41._uint64_t countAndFlagsBits = 0xD000000000000013;
        v41._object = (void *)0x80000001000A8B40;
        String.append(_:)(v41);
        v42._uint64_t countAndFlagsBits = v36;
        v42._object = v37;
        String.append(_:)(v42);
        swift_bridgeObjectRelease();
        v43._uint64_t countAndFlagsBits = 0x706D6F632D2D2D20;
        v43._object = (void *)0xEF206E6F6974656CLL;
        String.append(_:)(v43);
        v44._uint64_t countAndFlagsBits = v38;
        v44._object = v40;
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        unint64_t v31 = 0x80000001000A8B60;
        unint64_t v30 = 0xD000000000000028;
LABEL_36:
        String.append(_:)(*(Swift::String *)&v30);
        uint64_t v46 = v55[0];
        uint64_t v45 = v55[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        int64_t v2 = countAndFlagsBits;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v2 = sub_10005FA90(0, *((void *)countAndFlagsBits + 2) + 1, 1, countAndFlagsBits);
        }
        unint64_t v48 = *((void *)v2 + 2);
        unint64_t v47 = *((void *)v2 + 3);
        if (v48 >= v47 >> 1) {
          int64_t v2 = sub_10005FA90((char *)(v47 > 1), v48 + 1, 1, v2);
        }
        *((void *)v2 + 2) = v48 + 1;
        long long v49 = &v2[16 * v48];
        *((void *)v49 + 4) = v46;
        *((void *)v49 + 5) = v45;
        swift_bridgeObjectRelease();
      }
      else
      {
        __break(1u);
LABEL_49:
        int64_t v2 = sub_10005FA90(0, *((void *)countAndFlagsBits + 2) + 1, 1, countAndFlagsBits);
LABEL_44:
        unint64_t v51 = *((void *)v2 + 2);
        unint64_t v50 = *((void *)v2 + 3);
        if (v51 >= v50 >> 1) {
          int64_t v2 = sub_10005FA90((char *)(v50 > 1), v51 + 1, 1, v2);
        }
        *((void *)v2 + 2) = v51 + 1;
        long long v52 = &v2[16 * v51];
        *((void *)v52 + 4) = 0xD000000000000028;
        *((void *)v52 + 5) = 0x80000001000A8B90;
      }
      swift_bridgeObjectRelease();
      break;
    case 4:
      if (v62 == 0uLL) {
        return countAndFlagsBits;
      }
      swift_bridgeObjectRetain();
      int64_t v2 = countAndFlagsBits;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_44;
      }
      goto LABEL_49;
    default:
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)v55, "-r -f -k -a '");
      HIWORD(v55[1]) = -4864;
      sub_100003DD0(&qword_1000C50C8);
      sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
      v29._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      unint64_t v30 = 39;
      unint64_t v31 = 0xE100000000000000;
      goto LABEL_36;
  }
  return v2;
}

void *sub_10003110C(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v28 = _swiftEmptyArrayStorage;
    sub_100056F98(0, v2, 0);
    uint64_t v3 = _swiftEmptyArrayStorage;
    swift_beginAccess();
    uint64_t v6 = (void *)(a1 + 40);
    do
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = *v6;
      (*(void (**)(void *__return_ptr, uint64_t, void))(*v6 + 16))(v25, v7, *v6);
      long long v27 = v26;
      swift_bridgeObjectRetain();
      sub_10002DDE4((uint64_t)v25);
      sub_1000319D0();
      uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v11 = v10;
      sub_100031A24((uint64_t)&v27);
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      v22._uint64_t countAndFlagsBits = 0x2720612D20662DLL;
      v22._object = (void *)0xE700000000000000;
      v12._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._uint64_t countAndFlagsBits = 0x2720642D2027;
      v13._object = (void *)0xE600000000000000;
      String.append(_:)(v13);
      v14._uint64_t countAndFlagsBits = v9;
      v14._object = v11;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._uint64_t countAndFlagsBits = 39;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      Swift::String v16 = v22;
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      v17._uint64_t countAndFlagsBits = 32;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      uint64_t v28 = v3;
      unint64_t v19 = v3[2];
      unint64_t v18 = v3[3];
      if (v19 >= v18 >> 1)
      {
        sub_100056F98((char *)(v18 > 1), v19 + 1, 1);
        uint64_t v3 = v28;
      }
      v3[2] = v19 + 1;
      unint64_t v20 = &v3[2 * v19];
      v20[4] = v23;
      v20[5] = v24;
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  return v3;
}

void *sub_1000313A8(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100056F98(0, v2, 0);
    swift_beginAccess();
    long long v5 = (void **)(a1 + 40);
    do
    {
      uint64_t v6 = (uint64_t)*(v5 - 1);
      uint64_t v7 = *v5;
      uint64_t v14 = *(void *)(a2 + 16);
      uint64_t v15 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8._uint64_t countAndFlagsBits = 32;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      v9._uint64_t countAndFlagsBits = v6;
      v9._object = v7;
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1) {
        sub_100056F98((char *)(v10 > 1), v11 + 1, 1);
      }
      v5 += 2;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      Swift::String v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v14;
      v12[5] = v15;
      --v2;
    }
    while (v2);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1000314DC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = _swiftEmptyArrayStorage;
  uint64_t v7 = 32;
  do
  {
    long long v8 = *(_OWORD *)(a1 + v7 + 144);
    unsigned char v18[8] = *(_OWORD *)(a1 + v7 + 128);
    v18[9] = v8;
    long long v9 = *(_OWORD *)(a1 + v7 + 176);
    v18[10] = *(_OWORD *)(a1 + v7 + 160);
    v18[11] = v9;
    long long v10 = *(_OWORD *)(a1 + v7 + 80);
    v18[4] = *(_OWORD *)(a1 + v7 + 64);
    v18[5] = v10;
    long long v11 = *(_OWORD *)(a1 + v7 + 112);
    v18[6] = *(_OWORD *)(a1 + v7 + 96);
    v18[7] = v11;
    long long v12 = *(_OWORD *)(a1 + v7 + 16);
    v18[0] = *(_OWORD *)(a1 + v7);
    v18[1] = v12;
    long long v13 = *(_OWORD *)(a1 + v7 + 48);
    void v18[2] = *(_OWORD *)(a1 + v7 + 32);
    v18[3] = v13;
    sub_10002E940((uint64_t)v18);
    uint64_t v14 = sub_1000308EC(a3);
    sub_10002EAFC((uint64_t)v18);
    if (v14)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_1000600D4(0, v6[2] + 1, 1, v6);
      }
      unint64_t v16 = v6[2];
      unint64_t v15 = v6[3];
      if (v16 >= v15 >> 1) {
        uint64_t v6 = sub_1000600D4((void *)(v15 > 1), v16 + 1, 1, v6);
      }
      void v6[2] = v16 + 1;
      v6[v16 + 4] = v14;
    }
    v7 += 192;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100031644(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(279);
  v4._object = (void *)0x80000001000A8F20;
  v4._uint64_t countAndFlagsBits = 0xD00000000000004ELL;
  String.append(_:)(v4);
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = 0x636F72706572705FLL;
  v6._object = (void *)0xED0000726F737365;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0x5F74666977735FLL;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0xD0000000000000C7;
  v8._object = (void *)0x80000001000A8F70;
  String.append(_:)(v8);
  return 0;
}

uint64_t sub_100031764(uint64_t a1, void *a2)
{
  String.append(_:)(*(Swift::String *)&a1);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = 0x635F676E6973755FLL;
  v4._object = (void *)0xEE00646E616D6D6FLL;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = 0x636F72706572705FLL;
  v6._object = (void *)0xED0000726F737365;
  String.append(_:)(v6);
  _StringGuts.grow(_:)(813);
  v7._uint64_t countAndFlagsBits = 0x6E6F6974636E7566;
  v7._object = (void *)0xE900000000000020;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0x5F74666977735FLL;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x80000001000A8BE0;
  v9._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0x5F74666977735FLL;
  v10._object = (void *)0xE700000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0xD000000000000040;
  v11._object = (void *)0x80000001000A8C00;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = 32;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = 0xD000000000000032;
  v13._object = (void *)0x80000001000A8C50;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = 32;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 0xD00000000000028DLL;
  v15._object = (void *)0x80000001000A8C90;
  String.append(_:)(v15);
  return 0;
}

uint64_t sub_100031970()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000319B8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xBFu) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1000319D0()
{
  unint64_t result = qword_1000C5128;
  if (!qword_1000C5128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5128);
  }
  return result;
}

uint64_t sub_100031A24(uint64_t a1)
{
  return a1;
}

uint64_t sub_100031A50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1)
  {
    uint64_t v3 = (char *)_swiftEmptyArrayStorage;
LABEL_20:
    sub_100032130(v3);
    swift_bridgeObjectRelease();
    sub_100003DD0(&qword_1000C50C8);
    sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
    uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
    Swift::String v15 = v14;
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    return 95;
  }
  int64_t v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  uint64_t v3 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t result = (uint64_t)sub_10002F6F8(*(v2 - 1), *v2);
    uint64_t v5 = *(void *)(result + 16);
    int64_t v6 = *((void *)v3 + 2);
    int64_t v7 = v6 + v5;
    if (__OFADD__(v6, v5)) {
      break;
    }
    uint64_t v8 = result;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result && v7 <= *((void *)v3 + 3) >> 1)
    {
      if (*(void *)(v8 + 16)) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v6 <= v7) {
        int64_t v9 = v6 + v5;
      }
      else {
        int64_t v9 = v6;
      }
      uint64_t result = (uint64_t)sub_10005FA90((char *)result, v9, 1, v3);
      uint64_t v3 = (char *)result;
      if (*(void *)(v8 + 16))
      {
LABEL_14:
        if ((*((void *)v3 + 3) >> 1) - *((void *)v3 + 2) < v5) {
          goto LABEL_23;
        }
        uint64_t result = swift_arrayInitWithCopy();
        if (v5)
        {
          uint64_t v10 = *((void *)v3 + 2);
          BOOL v11 = __OFADD__(v10, v5);
          uint64_t v12 = v10 + v5;
          if (v11) {
            goto LABEL_24;
          }
          *((void *)v3 + 2) = v12;
        }
        goto LABEL_4;
      }
    }
    if (v5) {
      goto LABEL_22;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    v2 += 2;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

void *sub_100031C40(int a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v21 = sub_100053C7C(*(void *)(a2 + 16 * v2 + 16), *(void *)(*(void *)(a2 + 16 * v2 + 24) + 8), a1, 0, 0, 0);
    uint64_t v22 = v4;
    sub_1000340B8(a2, (uint64_t)v23);
    sub_10002B998((uint64_t)v23, (uint64_t)v20, &qword_1000C5148);
    sub_10002B998((uint64_t)v23, (uint64_t)v34, &qword_1000C5148);
    if (sub_1000353CC((uint64_t)v34) != 1)
    {
      sub_10002B998((uint64_t)v20, (uint64_t)&v35, &qword_1000C5148);
      v52[8] = v43;
      v52[9] = v44;
      v52[10] = v45;
      v52[11] = v46;
      v52[4] = v39;
      v52[5] = v40;
      v52[6] = v41;
      v52[7] = v42;
      v52[0] = v35;
      v52[1] = v36;
      v52[2] = v37;
      v52[3] = v38;
      sub_100069D00((uint64_t)v52);
      sub_1000353E4((uint64_t)v23);
    }
    uint64_t v5 = sub_100033E90(0, a2);
    if (*(void *)(v5 + 16))
    {
      v47[0] = 0xD000000000000016;
      v47[1] = 0x80000001000A9300;
      long long v48 = xmmword_1000A3EC0;
      uint64_t v50 = 0;
      uint64_t v49 = 0;
      char v51 = 0;
      sub_10006746C((uint64_t)_swiftEmptyArrayStorage, 1, (uint64_t)v47, 0, 0, 0, 0xE000000000000000, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&v24, 0);
      *(void *)uint64_t v8 = v5;
      *(_OWORD *)&v8[8] = v24;
      *(void *)&v8[24] = v25;
      long long v9 = v26;
      LOBYTE(v10) = v27;
      *((void *)&v10 + 1) = v28;
      long long v11 = v29;
      long long v12 = v30;
      *(void *)&long long v13 = v31;
      BYTE8(v13) = v32;
      long long v14 = v33;
      long long v15 = 0uLL;
      LOWORD(v16) = 4;
      *((void *)&v16 + 1) = String.init(argument:);
      *(void *)&long long v17 = 0;
      BYTE8(v17) = 0;
      unint64_t v18 = String.init(argument:);
      uint64_t v19 = 0;
      long long v37 = v26;
      long long v38 = v10;
      long long v35 = *(_OWORD *)v8;
      long long v36 = *(_OWORD *)&v8[16];
      long long v42 = v33;
      long long v40 = v30;
      long long v41 = v13;
      long long v39 = v29;
      long long v46 = (unint64_t)String.init(argument:);
      long long v45 = v17;
      long long v44 = v16;
      long long v43 = 0uLL;
      sub_100069D00((uint64_t)&v35);
      sub_10002EAFC((uint64_t)v8);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return (void *)v21;
  }
  else
  {
    int64_t v6 = _swiftEmptyArrayStorage;
    sub_100083AB4((uint64_t)_swiftEmptyArrayStorage);
  }
  return v6;
}

uint64_t sub_100031ED4(uint64_t a1, uint64_t a2)
{
  sub_100003DD0(&qword_1000C50C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000A2660;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  uint64_t v5 = sub_100031A50(inited);
  int64_t v7 = v6;
  swift_setDeallocating();
  _StringGuts.grow(_:)(195);
  v8._uint64_t countAndFlagsBits = 0x666564706D6F6323;
  v8._object = (void *)0xE900000000000020;
  String.append(_:)(v8);
  long long v9 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  v10._uint64_t countAndFlagsBits = v9(a1, a2);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._object = (void *)0x80000001000A9040;
  v11._uint64_t countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v11);
  v9(a1, a2);
  sub_1000319D0();
  uint64_t v12 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  long long v14 = v13;
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v16._object = (void *)0x80000001000A9070;
  String.append(_:)(v16);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1000A2660;
  *(void *)(v17 + 32) = a1;
  *(void *)(v17 + 40) = a2;
  uint64_t v18 = sub_100032278(v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 0xD00000000000005FLL;
  v22._object = (void *)0x80000001000A90A0;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = v5;
  v23._object = v7;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  return 0;
}

void *sub_100032130(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = a1[4];
  uint64_t v3 = a1[5];
  sub_100003DD0(&qword_1000C5118);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1000A2660;
  *(void *)(v5 + 32) = v4;
  *(void *)(v5 + 40) = v3;
  swift_bridgeObjectRetain();
  uint64_t v6 = v1 - 1;
  if (v1 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v7 = a1 + 7;
    do
    {
      uint64_t v10 = *(v7 - 1);
      uint64_t v11 = *v7;
      unint64_t v12 = *(void *)(v5 + 16);
      if (!v12
        || ((uint64_t v13 = v5 + 16 * v12, *(void *)(v13 + 16) == v10) ? (v14 = *(void *)(v13 + 24) == v11) : (v14 = 0),
            !v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
      {
        unint64_t v8 = *(void *)(v5 + 24);
        swift_bridgeObjectRetain();
        if (v12 >= v8 >> 1) {
          uint64_t v5 = (uint64_t)sub_10005FA90((char *)(v8 > 1), v12 + 1, 1, (char *)v5);
        }
        *(void *)(v5 + 16) = v12 + 1;
        uint64_t v9 = v5 + 16 * v12;
        *(void *)(v9 + 32) = v10;
        *(void *)(v9 + 40) = v11;
      }
      v7 += 2;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return (void *)v5;
}

uint64_t sub_100032278(uint64_t a1)
{
  void (*v21)(void *__return_ptr);
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  int64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  uint64_t v47;
  void *v48;
  void *v49;
  Swift::String v50;
  Swift::String v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  Swift::String v61;
  void *v62;
  uint64_t v63;
  Swift::String v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  Swift::String v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  unint64_t v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  Swift::String v100;
  unsigned char v102[16];
  uint64_t *v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  long long v111;
  long long v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  void v116[13];
  uint64_t v117;
  void v118[12];
  char v119;
  uint64_t v120;

  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    __break(1u);
LABEL_45:
    uint64_t v5 = sub_10005FA90(0, *((void *)v5 + 2) + 1, 1, v5);
    goto LABEL_13;
  }
  uint64_t v8 = a1 + 16 * v6;
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = *(void *)(v8 + 24);
  uint64_t v11 = sub_100031A50(a1);
  Swift::String v107 = v12;
  uint64_t v108 = v11;
  uint64_t v109 = a1;
  uint64_t v13 = sub_100031C40(0, a1);
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  uint64_t v1 = 0;
  uint64_t v5 = sub_1000351A4((uint64_t)v13, v15, v109);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 16))(v116, v9, v10);
  uint64_t v16 = v117;
  char v120 = v117;
  swift_bridgeObjectRetain();
  sub_10002DDE4((uint64_t)v116);
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v3 = (char *)_swiftEmptyArrayStorage;
  if (v17)
  {
    uint64_t v18 = (long long *)(v16 + 32);
    do
    {
      Swift::String v21 = *(void (**)(void *__return_ptr))(*((void *)v18 + 1) + 16);
      uint64_t v111 = *v18;
      v21(v118);
      sub_10002DDE4((uint64_t)v118);
      if (v119)
      {
        unint64_t v113 = (uint64_t)v3;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100056FF8(0, *((void *)v3 + 2) + 1, 1);
          uint64_t v3 = (char *)v113;
        }
        unint64_t v20 = *((void *)v3 + 2);
        unint64_t v19 = *((void *)v3 + 3);
        if (v20 >= v19 >> 1)
        {
          sub_100056FF8((char *)(v19 > 1), v20 + 1, 1);
          uint64_t v3 = (char *)v113;
        }
        *((void *)v3 + 2) = v20 + 1;
        *(_OWORD *)&v3[16 * v20 + 32] = v111;
      }
      ++v18;
      --v17;
    }
    while (v17);
  }
  unint64_t v2 = 0xD000000000000011;
  sub_10002BAD0((uint64_t)&v120);
  if (!*((void *)v3 + 2))
  {
    uint64_t v110 = 0;
    *(void *)&uint64_t v111 = 0xE000000000000000;
    Swift::String v34 = v3;
    long long v36 = (void *)v107;
    long long v35 = v108;
    goto LABEL_31;
  }
  uint64_t v4 = v108;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_45;
  }
LABEL_13:
  Swift::String v23 = *((void *)v5 + 2);
  Swift::String v22 = *((void *)v5 + 3);
  long long v24 = v22 >> 1;
  uint64_t v25 = v23 + 1;
  if (v22 >> 1 <= v23)
  {
    uint64_t v5 = sub_10005FA90((char *)(v22 > 1), v23 + 1, 1, v5);
    Swift::String v22 = *((void *)v5 + 3);
    long long v24 = v22 >> 1;
  }
  *((void *)v5 + 2) = v25;
  long long v26 = &v5[16 * v23];
  *((void *)v26 + 4) = v2;
  *((void *)v26 + 5) = 0x80000001000A9100;
  char v27 = v23 + 2;
  if (v24 < v27) {
    uint64_t v5 = sub_10005FA90((char *)(v22 > 1), v27, 1, v5);
  }
  *((void *)v5 + 2) = v27;
  uint64_t v28 = &v5[16 * v25];
  *((void *)v28 + 4) = 0x203A3A2A292D2827;
  *((void *)v28 + 5) = 0xEF276772613E2D3ALL;
  unint64_t v106 = v5;
  if (v6 == 1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = sub_10005FFD8(0, *((void *)v3 + 2) + 1, 1, v3);
    }
    long long v30 = *((void *)v3 + 2);
    long long v29 = *((void *)v3 + 3);
    uint64_t v31 = v30 + 1;
    if (v30 >= v29 >> 1) {
      uint64_t v3 = sub_10005FFD8((char *)(v29 > 1), v30 + 1, 1, v3);
    }
    char v32 = sub_10002E8EC();
    *((void *)v3 + 2) = v31;
    long long v33 = &v3[16 * v30];
    *((void *)v33 + 4) = &type metadata for HelpCommand;
    *((void *)v33 + 5) = v32;
    goto LABEL_25;
  }
  uint64_t v31 = *((void *)v3 + 2);
  if (v31)
  {
LABEL_25:
    uint64_t v115 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100056F98(0, v31, 0);
    long long v37 = 0;
    long long v38 = _swiftEmptyArrayStorage;
    long long v39 = (void *)v107;
    uint64_t v110 = (uint64_t)v3;
    do
    {
      int v112 = *(_OWORD *)&v3[16 * v37 + 32];
      sub_100032D80((uint64_t *)&v112, &v113);
      long long v41 = v113;
      long long v40 = v114;
      uint64_t v115 = v38;
      long long v43 = v38[2];
      long long v42 = v38[3];
      if (v43 >= v42 >> 1)
      {
        sub_100056F98((char *)(v42 > 1), v43 + 1, 1);
        long long v39 = (void *)v107;
        long long v38 = v115;
      }
      ++v37;
      uint64_t v38[2] = v43 + 1;
      long long v44 = &v38[2 * v43];
      v44[4] = v41;
      v44[5] = v40;
      uint64_t v3 = (char *)v110;
    }
    while (v31 != v37);
    swift_bridgeObjectRelease();
    uint64_t v4 = v108;
    goto LABEL_30;
  }
  long long v38 = _swiftEmptyArrayStorage;
  long long v39 = (void *)v107;
LABEL_30:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v45 = sub_100035090((uint64_t)v3, v4, v39);
  *(void *)&uint64_t v111 = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v113 = 0;
  Swift::String v114 = 0xE000000000000000;
  _StringGuts.grow(_:)(214);
  v46._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
  v46._object = (void *)0x80000001000A9120;
  String.append(_:)(v46);
  *(void *)&int v112 = v38;
  sub_100003DD0(&qword_1000C50C8);
  sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
  unint64_t v47 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v49 = v48;
  swift_bridgeObjectRelease();
  v50._uint64_t countAndFlagsBits = v47;
  v50._object = v49;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  v51._uint64_t countAndFlagsBits = 0xD000000000000067;
  v51._object = (void *)0x80000001000A9170;
  String.append(_:)(v51);
  *(void *)&int v112 = v45;
  long long v52 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v54 = v53;
  swift_bridgeObjectRelease();
  v55._uint64_t countAndFlagsBits = v52;
  v55._object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v56._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v56._object = (void *)0x80000001000A91E0;
  String.append(_:)(v56);
  char v57 = v113;
  long long v58 = v114;
  unint64_t v113 = 10;
  Swift::String v114 = 0xE100000000000000;
  __chkstk_darwin(v59);
  uint64_t v103 = &v113;
  swift_bridgeObjectRetain();
  long long v60 = sub_1000342C0(0x7FFFFFFFFFFFFFFFLL, 0, sub_100035314, (uint64_t)v102, v57, v58);
  v61._uint64_t countAndFlagsBits = 32;
  v61._object = (void *)0xE100000000000000;
  String.init(repeating:count:)(v61, 4);
  Swift::String v62 = sub_100034E90((uint64_t)v60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v113 = (uint64_t)v62;
  sub_100003DD0(&qword_1000C50D8);
  sub_100005178(&qword_1000C50E0, &qword_1000C50D8);
  sub_10002E898();
  long long v36 = (void *)v107;
  long long v35 = v108;
  uint64_t v110 = Sequence<>.joined(separator:)();
  *(void *)&uint64_t v111 = v63;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v106;
  Swift::String v34 = v3;
LABEL_31:
  unint64_t v113 = 0;
  Swift::String v114 = 0xE000000000000000;
  _StringGuts.grow(_:)(127);
  v64._uint64_t countAndFlagsBits = v35;
  v64._object = v36;
  String.append(_:)(v64);
  swift_bridgeObjectRelease();
  v65._uint64_t countAndFlagsBits = 0xD000000000000035;
  v65._object = (void *)0x80000001000A9200;
  String.append(_:)(v65);
  *(void *)&int v112 = v5;
  swift_bridgeObjectRetain();
  unsigned __int8 v66 = sub_100003DD0(&qword_1000C50C8);
  Swift::String v107 = sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
  uint64_t v108 = v66;
  unsigned __int8 v67 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v68 = v5;
  uint64_t v70 = v69;
  uint64_t v71 = swift_bridgeObjectRelease();
  *(void *)&int v112 = 10;
  *((void *)&v112 + 1) = 0xE100000000000000;
  __chkstk_darwin(v71);
  uint64_t v103 = (uint64_t *)&v112;
  swift_bridgeObjectRetain();
  BOOL v72 = sub_1000342C0(0x7FFFFFFFFFFFFFFFLL, 0, sub_100035314, (uint64_t)v102, v67, v70);
  v73._uint64_t countAndFlagsBits = 32;
  v73._object = (void *)0xE100000000000000;
  String.init(repeating:count:)(v73, 8);
  unint64_t v74 = sub_100034E90((uint64_t)v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&int v112 = v74;
  sub_100003DD0(&qword_1000C50D8);
  sub_100005178(&qword_1000C50E0, &qword_1000C50D8);
  sub_10002E898();
  uint64_t v75 = Sequence<>.joined(separator:)();
  uint64_t v77 = v76;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v78._uint64_t countAndFlagsBits = v75;
  v78._object = v77;
  String.append(_:)(v78);
  swift_bridgeObjectRelease();
  v79._uint64_t countAndFlagsBits = 0xD000000000000031;
  v79._object = (void *)0x80000001000A9240;
  String.append(_:)(v79);
  v80._uint64_t countAndFlagsBits = v110;
  v80._object = (void *)v111;
  String.append(_:)(v80);
  swift_bridgeObjectRelease();
  v81._uint64_t countAndFlagsBits = 0xD000000000000013;
  v81._object = (void *)0x80000001000A9280;
  String.append(_:)(v81);
  uint64_t v83 = v113;
  BOOL v82 = v114;
  char v84 = *((void *)v34 + 2);
  if (v84)
  {
    uint64_t v104 = v113;
    uint64_t v105 = v114;
    unint64_t v106 = v68;
    unint64_t v113 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v110 = (uint64_t)v34;
    swift_bridgeObjectRetain();
    sub_100056F98(0, v84, 0);
    Swift::String v85 = 0;
    uint64_t v86 = (void *)v113;
    uint64_t v87 = v109;
    do
    {
      uint64_t v111 = *(_OWORD *)(v110 + 16 * v85 + 32);
      swift_bridgeObjectRetain();
      uint64_t v88 = (char *)v87;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v88 = sub_10005FFD8(0, *(void *)(v87 + 16) + 1, 1, (char *)v87);
      }
      uint64_t v90 = *((void *)v88 + 2);
      BOOL v89 = *((void *)v88 + 3);
      if (v90 >= v89 >> 1) {
        uint64_t v88 = sub_10005FFD8((char *)(v89 > 1), v90 + 1, 1, v88);
      }
      *((void *)v88 + 2) = v90 + 1;
      *(_OWORD *)&v88[16 * v90 + 32] = v111;
      uint64_t v91 = sub_100032278(v88);
      uint64_t v93 = v92;
      swift_bridgeObjectRelease();
      unint64_t v113 = (uint64_t)v86;
      uint64_t v95 = v86[2];
      uint64_t v94 = v86[3];
      if (v95 >= v94 >> 1)
      {
        sub_100056F98((char *)(v94 > 1), v95 + 1, 1);
        uint64_t v86 = (void *)v113;
      }
      ++v85;
      v86[2] = v95 + 1;
      unint64_t v96 = &v86[2 * v95];
      v96[4] = v91;
      v96[5] = v93;
    }
    while (v84 != v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v83 = v104;
    BOOL v82 = v105;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v86 = _swiftEmptyArrayStorage;
  }
  unint64_t v113 = (uint64_t)v86;
  uint64_t v97 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v99 = v98;
  swift_bridgeObjectRelease();
  unint64_t v113 = v83;
  Swift::String v114 = v82;
  swift_bridgeObjectRetain();
  v100._uint64_t countAndFlagsBits = v97;
  v100._object = v99;
  String.append(_:)(v100);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v113;
}

uint64_t sub_100032D80@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v28 = 39;
  unint64_t v29 = 0xE100000000000000;
  v5._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 58;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 16))(v30, v3, v4);
  long long v32 = v31;
  swift_bridgeObjectRetain();
  sub_10002DDE4((uint64_t)v30);
  sub_1000319D0();
  uint64_t v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v27 = v7;
  uint64_t v24 = 0x5D5D5C5B5C5C5C5BLL;
  unint64_t v25 = 0xE800000000000000;
  uint64_t v22 = 807689308;
  unint64_t v23 = 0xE400000000000000;
  uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  sub_100031A24((uint64_t)&v32);
  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 39;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  uint64_t v28 = 10;
  unint64_t v29 = 0xE100000000000000;
  Swift::String v21 = &v28;
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1000342C0(0x7FFFFFFFFFFFFFFFLL, 0, sub_100035314, (uint64_t)v20, 39, 0xE100000000000000);
  v14._uint64_t countAndFlagsBits = 32;
  v14._object = (void *)0xE100000000000000;
  String.init(repeating:count:)(v14, 12);
  uint64_t v15 = sub_100034E90((uint64_t)v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v28 = (uint64_t)v15;
  sub_100003DD0(&qword_1000C50D8);
  sub_100005178(&qword_1000C50E0, &qword_1000C50D8);
  sub_10002E898();
  uint64_t v16 = Sequence<>.joined(separator:)();
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v16;
  a2[1] = v18;
  return result;
}

uint64_t sub_100033078@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  uint64_t v25 = 40;
  unint64_t v26 = 0xE100000000000000;
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 24);
  v9._uint64_t countAndFlagsBits = v8(v7, v6);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0x202020200A29;
  v10._object = (void *)0xE600000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = a2;
  v11._object = a3;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = 95;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = v8(v7, v6);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x3B3B202020200ALL;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  uint64_t v25 = 10;
  unint64_t v26 = 0xE100000000000000;
  uint64_t v24 = &v25;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000342C0(0x7FFFFFFFFFFFFFFFLL, 0, sub_100035314, (uint64_t)v23, 40, 0xE100000000000000);
  v16._uint64_t countAndFlagsBits = 32;
  v16._object = (void *)0xE100000000000000;
  String.init(repeating:count:)(v16, 12);
  uint64_t v17 = sub_100034E90((uint64_t)v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = (uint64_t)v17;
  sub_100003DD0(&qword_1000C50D8);
  sub_100005178(&qword_1000C50E0, &qword_1000C50D8);
  sub_10002E898();
  uint64_t v18 = Sequence<>.joined(separator:)();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v18;
  a4[1] = v20;
  return result;
}

uint64_t sub_1000332C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 56);
  unint64_t v3 = *(void *)(v1 + 64);
  Swift::String v4 = *(Swift::String *)(v1 + 88);
  long long v67 = *(_OWORD *)(v1 + 72);
  Swift::String v68 = v4;
  if (*(unsigned char *)(v1 + 104)) {
    return 0;
  }
  uint64_t v6 = (void *)v1;
  sub_10002EAA0(v1 + 152, (uint64_t)v66);
  sub_10002EAA0((uint64_t)v66, (uint64_t)v70);
  if (v70[16] == 1)
  {
    uint64_t v64 = 58;
    unint64_t v65 = 0xE100000000000000;
    Swift::String v69 = v68;
    uint64_t v8 = v68._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (((uint64_t)v68._object & 0x2000000000000000) != 0) {
      uint64_t v8 = ((unint64_t)v68._object >> 56) & 0xF;
    }
    if (v8)
    {
      Swift::String v63 = v68;
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1000655C4((void *)v1, (unint64_t *)&v63);
      sub_100031A24((uint64_t)&v69);
    }
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 58;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = sub_1000338EC(a1);
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    uint64_t v9 = v64;
    Swift::String v10 = (void *)v65;
  }
  else
  {
    uint64_t v9 = 0;
    Swift::String v10 = (void *)0xE000000000000000;
  }
  Swift::String v13 = *(void **)v1;
  if (*v6 >= 2uLL) {
    Swift::String v14 = (void *)swift_bridgeObjectRetain();
  }
  else {
    Swift::String v14 = _swiftEmptyArrayStorage;
  }
  uint64_t v15 = v14[2];
  uint64_t result = swift_bridgeObjectRelease();
  if (!v15)
  {
    Swift::String v16 = (void *)0xE000000000000000;
LABEL_47:
    uint64_t v64 = 39;
    unint64_t v65 = 0xE100000000000000;
    v57._uint64_t countAndFlagsBits = v15;
    v57._object = v16;
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    v58._uint64_t countAndFlagsBits = v9;
    v58._object = v10;
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    v59._uint64_t countAndFlagsBits = 39;
    v59._object = (void *)0xE100000000000000;
    String.append(_:)(v59);
    return v64;
  }
  if (v15 != 1)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    if ((unint64_t)v13 >= 2)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = v13;
    }
    uint64_t v62 = v2;
    int64_t v18 = v17[2];
    if (!v18)
    {
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = _swiftEmptyArrayStorage;
LABEL_40:
      uint64_t v64 = 40;
      unint64_t v65 = 0xE100000000000000;
      v63._uint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
      sub_100003DD0(&qword_1000C50C8);
      sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
      v41._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v42._uint64_t countAndFlagsBits = 8070953;
      v42._object = (void *)0xE300000000000000;
      String.append(_:)(v42);
      v63._uint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
      uint64_t v43 = BidirectionalCollection<>.joined(separator:)();
      long long v45 = v44;
      swift_bridgeObjectRelease();
      v46._uint64_t countAndFlagsBits = v43;
      v46._object = v45;
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      v47._uint64_t countAndFlagsBits = 10109;
      v47._object = (void *)0xE200000000000000;
      String.append(_:)(v47);
      uint64_t v48 = HIBYTE(v3) & 0xF;
      if ((v3 & 0x2000000000000000) == 0) {
        uint64_t v48 = v62 & 0xFFFFFFFFFFFFLL;
      }
      if (v48)
      {
        v63._uint64_t countAndFlagsBits = 91;
        v63._object = (void *)0xE100000000000000;
        goto LABEL_44;
      }
LABEL_45:
      uint64_t v54 = 0;
      object = (void *)0xE000000000000000;
      goto LABEL_46;
    }
    uint64_t v60 = v9;
    char v61 = v10;
    v63._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
    sub_100056F98(0, v18, 0);
    uint64_t countAndFlagsBits = (void *)v63._countAndFlagsBits;
    uint64_t v20 = (unsigned __int8 *)(v17 + 6);
    while (1)
    {
      uint64_t v21 = *((void *)v20 - 2);
      uint64_t v22 = (void *)*((void *)v20 - 1);
      unsigned int v23 = *v20;
      if (!(v23 >> 6)) {
        break;
      }
      if (v23 >> 6 != 1)
      {
        uint64_t v64 = 45;
        unint64_t v25 = 0xE100000000000000;
        goto LABEL_28;
      }
      uint64_t v64 = 0;
      unint64_t v65 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      v24._uint64_t countAndFlagsBits = 45;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      Character.write<A>(to:)();
LABEL_29:
      sub_10002ECB8(v21, (uint64_t)v22, v23);
      uint64_t v27 = v64;
      unint64_t v28 = v65;
      v63._uint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
      unint64_t v30 = countAndFlagsBits[2];
      unint64_t v29 = countAndFlagsBits[3];
      if (v30 >= v29 >> 1)
      {
        sub_100056F98((char *)(v29 > 1), v30 + 1, 1);
        uint64_t countAndFlagsBits = (void *)v63._countAndFlagsBits;
      }
      v20 += 24;
      countAndFlagsBits[2] = v30 + 1;
      long long v31 = &countAndFlagsBits[2 * v30];
      v31[4] = v27;
      v31[5] = v28;
      if (!--v18)
      {
        swift_bridgeObjectRelease();
        uint64_t v9 = v60;
        Swift::String v10 = v61;
        goto LABEL_40;
      }
    }
    uint64_t v64 = 11565;
    unint64_t v25 = 0xE200000000000000;
LABEL_28:
    unint64_t v65 = v25;
    swift_bridgeObjectRetain();
    v26._uint64_t countAndFlagsBits = v21;
    v26._object = v22;
    String.append(_:)(v26);
    goto LABEL_29;
  }
  uint64_t v64 = 0;
  unint64_t v65 = 0xE000000000000000;
  if ((unint64_t)v13 >= 2) {
    uint64_t result = swift_bridgeObjectRetain();
  }
  else {
    Swift::String v13 = _swiftEmptyArrayStorage;
  }
  if (v13[2])
  {
    uint64_t v32 = v2;
    uint64_t v33 = v13[4];
    Swift::String v34 = (void *)v13[5];
    unsigned __int8 v35 = *((unsigned char *)v13 + 48);
    sub_1000319B8(v33, (uint64_t)v34, v35);
    swift_bridgeObjectRelease();
    v71._uint64_t countAndFlagsBits = v33;
    v71._object = v34;
    uint64_t v36 = sub_100076D6C(v71, v35);
    long long v38 = v37;
    sub_10002ECB8(v33, (uint64_t)v34, v35);
    v39._uint64_t countAndFlagsBits = v36;
    v39._object = v38;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    uint64_t v40 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v40 = v32 & 0xFFFFFFFFFFFFLL;
    }
    if (v40)
    {
      v63._uint64_t countAndFlagsBits = 91;
      v63._object = (void *)0xE100000000000000;
LABEL_44:
      sub_1000319D0();
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v49 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      char v51 = v50;
      swift_bridgeObjectRelease();
      v52._uint64_t countAndFlagsBits = v49;
      v52._object = v51;
      String.append(_:)(v52);
      swift_bridgeObjectRelease();
      v53._uint64_t countAndFlagsBits = 93;
      v53._object = (void *)0xE100000000000000;
      String.append(_:)(v53);
      object = v63._object;
      uint64_t v54 = v63._countAndFlagsBits;
LABEL_46:
      long long v56 = object;
      String.append(_:)(*(Swift::String *)&v54);
      swift_bridgeObjectRelease();
      uint64_t v15 = v64;
      Swift::String v16 = (void *)v65;
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000338EC(uint64_t a1)
{
  long long v36 = *(_OWORD *)(v1 + 128);
  char v37 = *(unsigned char *)(v1 + 144);
  sub_10002EC5C((uint64_t)&v36, (uint64_t)v38);
  sub_10002EC5C((uint64_t)v38, (uint64_t)&v39);
  uint64_t v3 = v39;
  switch(v40)
  {
    case 1:
      int64_t v6 = *(void *)(v39 + 16);
      if (v6)
      {
        sub_100056F98(0, v6, 0);
        uint64_t v7 = (void **)(v3 + 40);
        do
        {
          uint64_t v8 = (uint64_t)*(v7 - 1);
          uint64_t v9 = *v7;
          swift_bridgeObjectRetain();
          v10._uint64_t countAndFlagsBits = v8;
          v10._object = v9;
          String.append(_:)(v10);
          swift_bridgeObjectRelease();
          unint64_t v12 = _swiftEmptyArrayStorage[2];
          unint64_t v11 = _swiftEmptyArrayStorage[3];
          if (v12 >= v11 >> 1) {
            sub_100056F98((char *)(v11 > 1), v12 + 1, 1);
          }
          v7 += 2;
          _swiftEmptyArrayStorage[2] = v12 + 1;
          Swift::String v13 = &_swiftEmptyArrayStorage[2 * v12];
          v13[4] = 11818;
          v13[5] = 0xE200000000000000;
          --v6;
        }
        while (v6);
        sub_100003DD0(&qword_1000C50C8);
        sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
        uint64_t v26 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v28 = v27;
        swift_release();
        v29._uint64_t countAndFlagsBits = v26;
        v29._object = v28;
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        v30._uint64_t countAndFlagsBits = 39;
        v30._object = (void *)0xE100000000000000;
        String.append(_:)(v30);
      }
      unint64_t v35 = 0x73656C69665FLL;
      sub_1000319D0();
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v33 = v32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v34._uint64_t countAndFlagsBits = v31;
      v34._object = v33;
      String.append(_:)(v34);
      goto LABEL_17;
    case 2:
      Swift::String v14 = (void *)*((void *)&v39 + 1);
      unint64_t v35 = 0;
      _StringGuts.grow(_:)(58);
      v15._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      v15._object = (void *)0x80000001000A92C0;
      String.append(_:)(v15);
      v16._uint64_t countAndFlagsBits = v3;
      v16._object = v14;
      String.append(_:)(v16);
      unint64_t v17 = 0xD00000000000001ALL;
      unint64_t v18 = 0x80000001000A92E0;
      goto LABEL_12;
    case 3:
      if (!*(void *)(a1 + 16))
      {
        __break(1u);
        JUMPOUT(0x100033E7CLL);
      }
      (*(void (**)(void))(*(void *)(a1 + 40) + 24))();
      sub_1000319D0();
      uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v21 = v20;
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      unint64_t v35 = 0xD000000000000016;
      v22._uint64_t countAndFlagsBits = v19;
      v22._object = v21;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._uint64_t countAndFlagsBits = 0x646E616D6D6F635FLL;
      v23._object = (void *)0xED000020656D616ELL;
      String.append(_:)(v23);
      v24._uint64_t countAndFlagsBits = (uint64_t)sub_10002EE00(a1);
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      unint64_t v17 = 0x7D7364726F772420;
      unint64_t v18 = 0xE800000000000000;
LABEL_12:
      String.append(_:)(*(Swift::String *)&v17);
      return v35;
    case 4:
      if (v39 == 0) {
        return 0;
      }
      else {
        return 0x2D2073656C69665FLL;
      }
    default:
      sub_100003DD0(&qword_1000C50C8);
      sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
      v4._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
      unint64_t v35 = 40;
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v5._uint64_t countAndFlagsBits = 41;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
LABEL_17:
      swift_bridgeObjectRelease();
      return v35;
  }
}

uint64_t sub_100033E90(char a1, uint64_t a2)
{
  uint64_t v13 = a2;
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3) {
    goto LABEL_10;
  }
  uint64_t v4 = 1 - v3;
  uint64_t v5 = a2 + 16 * v3 + 24;
  while (1)
  {
    (*(void (**)(void *__return_ptr))(*(void *)v5 + 16))(v9);
    sub_10002DDE4((uint64_t)v9);
    sub_10002B998((uint64_t)&v10, (uint64_t)v14, &qword_1000C5150);
    uint64_t v6 = sub_10002B998((uint64_t)v14, (uint64_t)&v15, &qword_1000C5150);
    if (v15) {
      break;
    }
    ++v4;
    v5 -= 16;
    if (v4 == 1) {
      goto LABEL_10;
    }
  }
  __chkstk_darwin(v6);
  uint64_t v16 = -v4;
  sub_10003554C((unint64_t *)&v16, v11);
  if (!*(void *)&v11[0])
  {
LABEL_10:
    *(void *)&v11[0] = &_swiftEmptySetSingleton;
    sub_100043564((uint64_t)&off_1000BC170);
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    uint64_t v8 = sub_100088100(a1);
    swift_bridgeObjectRelease();
    return (uint64_t)v8;
  }
  (*(void (**)(_OWORD *__return_ptr))(*((void *)&v11[0] + 1) + 16))(v11);
  sub_10002B998((uint64_t)&v12, (uint64_t)&v13, &qword_1000C5150);
  sub_10002B9FC((uint64_t)&v13);
  sub_10002DDE4((uint64_t)v11);
  uint64_t result = sub_10002B998((uint64_t)&v13, (uint64_t)&v16, &qword_1000C5150);
  if (v16)
  {
    uint64_t v8 = sub_100088100(a1);
    sub_10002BAD0((uint64_t)&v13);
    return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000340B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = swift_bridgeObjectRetain() + 40;
    while (1)
    {
      (*(void (**)(void *__return_ptr))(*(void *)v4 + 16))(v29);
      long long v42 = v30;
      long long v5 = v30;
      swift_bridgeObjectRetain();
      sub_10002DDE4((uint64_t)v29);
      sub_100031A24((uint64_t)&v42);
      uint64_t v6 = HIBYTE(*((void *)&v5 + 1)) & 0xFLL;
      if ((*((void *)&v5 + 1) & 0x2000000000000000) == 0) {
        uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
      }
      if (v6) {
        break;
      }
      v4 += 16;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    v43[0] = 0xD000000000000011;
    v43[1] = 0x80000001000A9320;
    long long v44 = xmmword_1000A3EC0;
    uint64_t v46 = 0;
    uint64_t v45 = 0;
    char v47 = 0;
    sub_10006746C((uint64_t)_swiftEmptyArrayStorage, 1, (uint64_t)v43, 0, 0, 0, 0xE000000000000000, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&v31, 0);
    uint64_t v9 = &off_1000BC138;
    long long v10 = v31;
    uint64_t v11 = v32;
    long long v12 = v33;
    char v13 = v34;
    long long v14 = v35;
    long long v15 = v36;
    uint64_t v16 = v37;
    uint64_t v17 = v38;
    char v18 = v39;
    uint64_t v19 = v40;
    uint64_t v20 = v41;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    __int16 v23 = 4;
    Swift::String v24 = sub_10008C49C;
    uint64_t v25 = 0;
    char v26 = 0;
    uint64_t v27 = String.init(argument:);
    uint64_t v28 = 0;
    v7._uint64_t countAndFlagsBits = (uint64_t)&v9;
    String.init(argument:)(v7);
  }
  else
  {
LABEL_8:
    sub_100035580(&v9);
  }
  sub_10002B998((uint64_t)&v9, (uint64_t)v48, &qword_1000C5148);
  return sub_10002B998((uint64_t)v48, a2, &qword_1000C5148);
}

char *sub_1000342C0(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v46[3] = a4;
  if (a1 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v11 = a5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = _swiftEmptyArrayStorage;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = 15;
  uint64_t v15 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v16 = HIBYTE(a6) & 0xF) : (uint64_t v16 = v11 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v15 = v11 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((v11 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_100034B00(v30 | (v15 << 16), v43, a2 & 1, v14);
    swift_bridgeObjectRelease();
    long long v10 = *(char **)(v14 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_38;
  }
  uint64_t v38 = a1;
  uint64_t v39 = v14;
  unint64_t v44 = 4 * v16;
  long long v10 = (char *)_swiftEmptyArrayStorage;
  unint64_t v9 = 15;
  unint64_t v8 = 15;
  unint64_t v17 = 15;
  while (1)
  {
    v46[0] = String.subscript.getter();
    v46[1] = v18;
    uint64_t v19 = a3(v46);
    if (v7)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    uint64_t v6 = v19;
    swift_bridgeObjectRelease();
    if (v6) {
      break;
    }
    unint64_t v9 = String.index(after:)();
LABEL_9:
    if (v44 == v9 >> 14) {
      goto LABEL_29;
    }
  }
  if (v8 >> 14 == v9 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v9 = String.index(after:)();
    *(void *)(v43 + 16) = v9;
    unint64_t v8 = v9;
    unint64_t v17 = v9;
    goto LABEL_9;
  }
  if (v9 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v40 = v21;
  uint64_t v41 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v10 = sub_10005FED4(0, *((void *)v10 + 2) + 1, 1, v10);
  }
  unint64_t v27 = *((void *)v10 + 2);
  unint64_t v26 = *((void *)v10 + 3);
  uint64_t v6 = v27 + 1;
  if (v27 >= v26 >> 1) {
    long long v10 = sub_10005FED4((char *)(v26 > 1), v27 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v6;
  uint64_t v28 = &v10[32 * v27];
  *((void *)v28 + 4) = v41;
  *((void *)v28 + 5) = v23;
  *((void *)v28 + 6) = v25;
  *((void *)v28 + 7) = v40;
  *(void *)(v39 + 16) = v10;
  uint64_t v29 = String.index(after:)();
  unint64_t v9 = v29;
  *(void *)(v43 + 16) = v29;
  if (*((void *)v10 + 2) != v38)
  {
    unint64_t v8 = v29;
    unint64_t v17 = v29;
    goto LABEL_9;
  }
  unint64_t v17 = v29;
  unint64_t v8 = v29;
LABEL_29:
  if (v44 == v8 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v44 >= v17 >> 14)
  {
    uint64_t v6 = String.subscript.getter();
    unint64_t v8 = v31;
    unint64_t v9 = v32;
    uint64_t v11 = v33;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_34;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  long long v10 = sub_10005FED4(0, *((void *)v10 + 2) + 1, 1, v10);
LABEL_34:
  unint64_t v35 = *((void *)v10 + 2);
  unint64_t v34 = *((void *)v10 + 3);
  if (v35 >= v34 >> 1) {
    long long v10 = sub_10005FED4((char *)(v34 > 1), v35 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v35 + 1;
  long long v36 = &v10[32 * v35];
  *((void *)v36 + 4) = v6;
  *((void *)v36 + 5) = v8;
  *((void *)v36 + 6) = v9;
  *((void *)v36 + 7) = v11;
  *(void *)(v39 + 16) = v10;
LABEL_37:
  swift_bridgeObjectRetain();
  swift_release();
LABEL_38:
  swift_release();
  return v10;
}

unint64_t sub_1000346E0(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  v44[3] = a4;
  if (a1 < 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v11 = a7;
  unint64_t v12 = a6;
  unint64_t v9 = a5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = _swiftEmptyArrayStorage;
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = v9;
  if (!a1 || (unint64_t v42 = v12 >> 14, v12 >> 14 == v9 >> 14))
  {
    sub_100034C10(v12, v41, a2 & 1, v14);
    swift_bridgeObjectRelease();
    unint64_t v12 = *(void *)(v14 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_5;
  }
  uint64_t v32 = a1;
  uint64_t v33 = v14;
  uint64_t v40 = (char *)_swiftEmptyArrayStorage;
  unint64_t v16 = v9;
  unint64_t v10 = v9;
  unint64_t v37 = v9;
  while (1)
  {
    v44[0] = Substring.subscript.getter();
    v44[1] = v17;
    uint64_t v18 = a3(v44);
    if (v8)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v12;
    }
    unint64_t v7 = v18;
    swift_bridgeObjectRelease();
    if (v7) {
      break;
    }
    unint64_t v16 = Substring.index(after:)();
LABEL_9:
    if (v42 == v16 >> 14) {
      goto LABEL_24;
    }
  }
  if (v10 >> 14 == v16 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v16 = Substring.index(after:)();
    *(void *)(v41 + 16) = v16;
    unint64_t v10 = v16;
    unint64_t v37 = v16;
    goto LABEL_9;
  }
  if (v16 >> 14 < v10 >> 14)
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v19 = Substring.subscript.getter();
  uint64_t v36 = v20;
  uint64_t v38 = v19;
  uint64_t v34 = v22;
  uint64_t v35 = v21;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v40 = sub_10005FED4(0, *((void *)v40 + 2) + 1, 1, v40);
  }
  unint64_t v7 = *((void *)v40 + 2);
  unint64_t v23 = *((void *)v40 + 3);
  if (v7 >= v23 >> 1) {
    uint64_t v40 = sub_10005FED4((char *)(v23 > 1), v7 + 1, 1, v40);
  }
  *((void *)v40 + 2) = v7 + 1;
  uint64_t v24 = &v40[32 * v7];
  *((void *)v24 + 4) = v38;
  *((void *)v24 + 5) = v36;
  *((void *)v24 + 6) = v35;
  *((void *)v24 + 7) = v34;
  *(void *)(v33 + 16) = v40;
  uint64_t v25 = Substring.index(after:)();
  unint64_t v16 = v25;
  *(void *)(v41 + 16) = v25;
  if (*((void *)v40 + 2) != v32)
  {
    unint64_t v10 = v25;
    unint64_t v37 = v25;
    goto LABEL_9;
  }
  unint64_t v37 = v25;
  unint64_t v10 = v25;
LABEL_24:
  if (v42 == v10 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    unint64_t v12 = (unint64_t)v40;
    goto LABEL_32;
  }
  if (v42 >= v37 >> 14)
  {
    unint64_t v7 = Substring.subscript.getter();
    unint64_t v9 = v26;
    unint64_t v10 = v27;
    uint64_t v11 = v28;
    swift_bridgeObjectRelease();
    unint64_t v12 = (unint64_t)v40;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_29;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  unint64_t v12 = (unint64_t)sub_10005FED4(0, *(void *)(v12 + 16) + 1, 1, (char *)v12);
LABEL_29:
  unint64_t v30 = *(void *)(v12 + 16);
  unint64_t v29 = *(void *)(v12 + 24);
  if (v30 >= v29 >> 1) {
    unint64_t v12 = (unint64_t)sub_10005FED4((char *)(v29 > 1), v30 + 1, 1, (char *)v12);
  }
  *(void *)(v12 + 16) = v30 + 1;
  unint64_t v31 = (void *)(v12 + 32 * v30);
  v31[4] = v7;
  v31[5] = v9;
  v31[6] = v10;
  v31[7] = v11;
  *(void *)(v33 + 16) = v12;
LABEL_32:
  swift_bridgeObjectRetain();
  swift_release();
LABEL_5:
  swift_release();
  return v12;
}

uint64_t sub_100034B00(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v10 = *(void *)(a2 + 16) >> 14;
  int v11 = (v10 == a1 >> 14) & a3;
  if (v11 == 1) {
    return v11 ^ 1u;
  }
  if (a1 >> 14 < v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = a4;
  uint64_t v5 = String.subscript.getter();
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  unint64_t v9 = *(char **)(v4 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    unint64_t v9 = sub_10005FED4(0, *((void *)v9 + 2) + 1, 1, v9);
    *(void *)(v4 + 16) = v9;
  }
  unint64_t v17 = *((void *)v9 + 2);
  unint64_t v16 = *((void *)v9 + 3);
  if (v17 >= v16 >> 1)
  {
    unint64_t v9 = sub_10005FED4((char *)(v16 > 1), v17 + 1, 1, v9);
    *(void *)(v4 + 16) = v9;
  }
  *((void *)v9 + 2) = v17 + 1;
  uint64_t v18 = &v9[32 * v17];
  *((void *)v18 + 4) = v5;
  *((void *)v18 + 5) = v6;
  *((void *)v18 + 6) = v7;
  *((void *)v18 + 7) = v8;
  return v11 ^ 1u;
}

uint64_t sub_100034C10(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v10 = *(void *)(a2 + 16) >> 14;
  int v11 = (v10 == a1 >> 14) & a3;
  if (v11 == 1) {
    return v11 ^ 1u;
  }
  if (a1 >> 14 < v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = a4;
  uint64_t v5 = Substring.subscript.getter();
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  unint64_t v9 = *(char **)(v4 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    unint64_t v9 = sub_10005FED4(0, *((void *)v9 + 2) + 1, 1, v9);
    *(void *)(v4 + 16) = v9;
  }
  unint64_t v17 = *((void *)v9 + 2);
  unint64_t v16 = *((void *)v9 + 3);
  if (v17 >= v16 >> 1)
  {
    unint64_t v9 = sub_10005FED4((char *)(v16 > 1), v17 + 1, 1, v9);
    *(void *)(v4 + 16) = v9;
  }
  *((void *)v9 + 2) = v17 + 1;
  uint64_t v18 = &v9[32 * v17];
  *((void *)v18 + 4) = v5;
  *((void *)v18 + 5) = v6;
  *((void *)v18 + 6) = v7;
  *((void *)v18 + 7) = v8;
  return v11 ^ 1u;
}

void *sub_100034D28(void *(*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return 0;
  }
  uint64_t v7 = a3;
  uint64_t result = a1(&v6, &v7);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_100034D88(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

unint64_t sub_100034DE0(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v6) {
    uint64_t result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }

  return String.subscript.getter();
}

void *sub_100034E90(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    sub_100056FD8(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v5 = *(v4 - 3);
      uint64_t v6 = *(v4 - 2);
      uint64_t v8 = *(v4 - 1);
      uint64_t v7 = *v4;
      swift_bridgeObjectRetain();
      if ((v6 ^ (unint64_t)v5) >= 0x4000)
      {
        Substring.distance(from:to:)();
        unint64_t v17 = v2;
        String.count.getter();
        swift_bridgeObjectRetain();
        static String._fromSubstring(_:)();
        String.append<A>(contentsOf:)();
        Substring.init(_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        static String._fromSubstring(_:)();
        swift_bridgeObjectRelease();
        sub_100035330();
        String.append<A>(contentsOf:)();
        uint64_t v5 = Substring.init(_:)();
        uint64_t v6 = v9;
        uint64_t v8 = v10;
        uint64_t v12 = v11;
        swift_bridgeObjectRelease_n();
        uint64_t v7 = v12;
        uint64_t v2 = v17;
      }
      unint64_t v14 = v2[2];
      unint64_t v13 = v2[3];
      if (v14 >= v13 >> 1) {
        sub_100056FD8((char *)(v13 > 1), v14 + 1, 1);
      }
      v2[2] = v14 + 1;
      uint64_t v15 = &v2[4 * v14];
      v15[4] = v5;
      v15[5] = v6;
      v15[6] = v8;
      v15[7] = v7;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_100035090(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_100056F98(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    for (uint64_t i = (long long *)(a1 + 32); ; ++i)
    {
      long long v17 = *i;
      sub_100033078((uint64_t *)&v17, a2, a3, v18);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v10 = v18[0];
      uint64_t v11 = v18[1];
      uint64_t v19 = v6;
      unint64_t v13 = v6[2];
      unint64_t v12 = v6[3];
      if (v13 >= v12 >> 1)
      {
        sub_100056F98((char *)(v12 > 1), v13 + 1, 1);
        uint64_t v6 = v19;
      }
      void v6[2] = v13 + 1;
      unint64_t v14 = &v6[2 * v13];
      void v14[4] = v10;
      v14[5] = v11;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

char *sub_1000351A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (char *)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = (char *)_swiftEmptyArrayStorage;
  uint64_t v7 = 32;
  do
  {
    long long v9 = *(_OWORD *)(a1 + v7 + 144);
    v21[8] = *(_OWORD *)(a1 + v7 + 128);
    v21[9] = v9;
    long long v10 = *(_OWORD *)(a1 + v7 + 176);
    v21[10] = *(_OWORD *)(a1 + v7 + 160);
    v21[11] = v10;
    long long v11 = *(_OWORD *)(a1 + v7 + 80);
    v21[4] = *(_OWORD *)(a1 + v7 + 64);
    v21[5] = v11;
    long long v12 = *(_OWORD *)(a1 + v7 + 112);
    v21[6] = *(_OWORD *)(a1 + v7 + 96);
    v21[7] = v12;
    long long v13 = *(_OWORD *)(a1 + v7 + 16);
    v21[0] = *(_OWORD *)(a1 + v7);
    v21[1] = v13;
    long long v14 = *(_OWORD *)(a1 + v7 + 48);
    void v21[2] = *(_OWORD *)(a1 + v7 + 32);
    v21[3] = v14;
    sub_10002E940((uint64_t)v21);
    uint64_t v15 = sub_1000332C8(a3);
    uint64_t v17 = v16;
    sub_10002EAFC((uint64_t)v21);
    if (v17)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_10005FA90(0, *((void *)v6 + 2) + 1, 1, v6);
      }
      unint64_t v19 = *((void *)v6 + 2);
      unint64_t v18 = *((void *)v6 + 3);
      if (v19 >= v18 >> 1) {
        uint64_t v6 = sub_10005FA90((char *)(v18 > 1), v19 + 1, 1, v6);
      }
      *((void *)v6 + 2) = v19 + 1;
      uint64_t v8 = &v6[16 * v19];
      *((void *)v8 + 4) = v15;
      *((void *)v8 + 5) = v17;
    }
    v7 += 192;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100035314(void *a1)
{
  return sub_100015564(a1) & 1;
}

unint64_t sub_100035330()
{
  unint64_t result = qword_1000C5140;
  if (!qword_1000C5140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5140);
  }
  return result;
}

uint64_t sub_100035384()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000353BC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000353CC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_1000353E4(uint64_t a1)
{
  return a1;
}

unint64_t sub_100035450(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a5)
  {
    sub_10002EBEC(result);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10002EBFC(a17, a18, a19);
    sub_10002EC54();
    return swift_release();
  }
  return result;
}

unint64_t *sub_10003554C@<X0>(unint64_t *result@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v3 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = **(void **)(v2 + 16);
    if (v3 < *(void *)(v4 + 16))
    {
      *a2 = *(_OWORD *)(v4 + 16 * v3 + 32);
      return result;
    }
  }
  __break(1u);
  return result;
}

double sub_100035580(_OWORD *a1)
{
  double result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1000355A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Parsed();
  int64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t Argument.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Argument();
  sub_1000356C0(a1, (uint64_t)v7);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100078624((uint64_t)v7, v4, WitnessTable, a2);
  return sub_100005128(a1);
}

uint64_t type metadata accessor for Argument()
{
  return sub_10003A4F0();
}

uint64_t sub_1000356C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void Argument.init()()
{
}

uint64_t Argument.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Parsed();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v11 - v7, v3, v6);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a2, v8, v5);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Option.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = type metadata accessor for Parsed();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v2, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(v2, a1, v4);

  return swift_storeEnumTagMultiPayload();
}

void (*Argument.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  _OWORD v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  Argument.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_100035A80;
}

void sub_100035A80(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    Option.wrappedValue.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    Option.wrappedValue.setter((*a1)[5], *v2);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t sub_100035B40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Argument.init(from:)(a1, a2);
}

uint64_t sub_100035B5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Parsed();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_100035BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000355A4(a1, a2);
}

unint64_t Argument.description.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = type metadata accessor for Parsed();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  long long v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v16 - v12, v2, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return 0xD000000000000016;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v13, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    uint64_t v14 = String.init<A>(describing:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  return v14;
}

uint64_t static ArgumentArrayParsingStrategy.allUnrecognized.getter()
{
  return 6;
}

uint64_t static ArgumentArrayParsingStrategy.postTerminator.getter()
{
  return 5;
}

uint64_t static ArrayParsingStrategy.remaining.getter()
{
  return 4;
}

void ArrayParsingStrategy.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

BOOL static ArrayParsingStrategy.__derived_struct_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int FlagExclusivity.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t Argument<A>.init(wrappedValue:help:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int v26 = a5;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v23 = a1;
  uint64_t v27 = a8;
  uint64_t v11 = type metadata accessor for Parsed();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v22 - v13);
  uint64_t v15 = *(void *)(a6 - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = (*(void *)(v15 + 64) + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a6;
  *(void *)(v18 + 24) = a7;
  sub_100038AC4(a2, v18 + 32);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 32))(v18 + v16, v23, a6);
  unint64_t v19 = v18 + v17;
  uint64_t v20 = v25;
  *(void *)unint64_t v19 = v24;
  *(void *)(v19 + 8) = v20;
  *(unsigned char *)(v19 + 16) = v26;
  sub_100078D30((uint64_t)sub_100038B2C, v18, v14);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v12 + 32))(v27, v14, v11);
}

uint64_t sub_10003605C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  int v38 = a8;
  uint64_t v37 = a7;
  uint64_t v36 = a4;
  uint64_t v39 = a1;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v35 - v15;
  uint64_t v17 = type metadata accessor for Bare();
  uint64_t v18 = *(void *)(a9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a5, a9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, a9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v19 = v36;
  sub_10003A450(v36);
  uint64_t v20 = v37;
  LOBYTE(v18) = v38;
  sub_10003A4DC(a6, v37, v38);
  uint64_t WitnessTable = swift_getWitnessTable();
  double v22 = sub_100067C8C(v39, a2, a3, 0, (uint64_t)v19, 0, (uint64_t)v16, v40, a6, v20, v18, v17, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v14 + 8))(v16, v13, v22);
  sub_100003DD0(&qword_1000C5230);
  uint64_t v23 = (_OWORD *)swift_allocObject();
  long long v24 = v40[8];
  long long v25 = v40[10];
  long long v26 = v40[11];
  v23[11] = v40[9];
  v23[12] = v25;
  v23[13] = v26;
  long long v27 = v40[4];
  long long v28 = v40[6];
  long long v29 = v40[7];
  v23[7] = v40[5];
  v23[8] = v28;
  _OWORD v23[9] = v29;
  v23[10] = v24;
  long long v30 = v40[0];
  long long v31 = v40[1];
  v23[1] = xmmword_1000A2660;
  v23[2] = v30;
  long long v32 = v40[2];
  long long v33 = v40[3];
  v23[3] = v31;
  v23[4] = v32;
  v23[5] = v33;
  void v23[6] = v27;
  return sub_100083798((uint64_t)v23);
}

uint64_t Argument<A>.init(help:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v20 = a7;
  uint64_t v13 = type metadata accessor for Parsed();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (uint64_t *)((char *)&v19 - v15);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a5;
  *(void *)(v17 + 24) = a6;
  sub_100038AC4(a1, v17 + 32);
  *(void *)(v17 + 88) = a2;
  *(void *)(v17 + 96) = a3;
  *(unsigned char *)(v17 + 104) = a4;
  sub_100078D30((uint64_t)sub_100038BC4, v17, v16);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v14 + 32))(v20, v16, v13);
}

uint64_t sub_100036440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v35 = a4;
  uint64_t v36 = a1;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v34 - v16;
  uint64_t v18 = type metadata accessor for Bare();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 56))(v17, 1, 1, a8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = v35;
  sub_10003A450(v35);
  sub_10003A4DC(a5, a6, a7);
  uint64_t WitnessTable = swift_getWitnessTable();
  double v21 = sub_100067C8C(v36, a2, a3, 0, (uint64_t)v19, 0, (uint64_t)v17, v37, a5, a6, a7, v18, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v15 + 8))(v17, v14, v21);
  sub_100003DD0(&qword_1000C5230);
  double v22 = (_OWORD *)swift_allocObject();
  long long v23 = v37[8];
  long long v24 = v37[10];
  long long v25 = v37[11];
  v22[11] = v37[9];
  v22[12] = v24;
  v22[13] = v25;
  long long v26 = v37[4];
  long long v27 = v37[6];
  long long v28 = v37[7];
  v22[7] = v37[5];
  v22[8] = v27;
  v22[9] = v28;
  v22[10] = v23;
  long long v29 = v37[0];
  long long v30 = v37[1];
  v22[1] = xmmword_1000A2660;
  v22[2] = v29;
  long long v31 = v37[2];
  long long v32 = v37[3];
  v22[3] = v30;
  v22[4] = v31;
  v22[5] = v32;
  v22[6] = v26;
  return sub_100083798((uint64_t)v22);
}

uint64_t Argument.init(wrappedValue:help:completion:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v25 = a7;
  uint64_t v26 = a1;
  int v29 = a5;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v30 = a9;
  uint64_t v12 = type metadata accessor for Parsed();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v25 - v14);
  uint64_t v16 = *(void *)(a8 - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (*(void *)(v16 + 64) + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = (char *)swift_allocObject();
  *((void *)v19 + 2) = a8;
  sub_100038AC4(a2, (uint64_t)(v19 + 24));
  uint64_t v21 = v25;
  uint64_t v20 = v26;
  *((void *)v19 + 10) = a6;
  *((void *)v19 + 11) = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(&v19[v17], v20, a8);
  double v22 = &v19[v18];
  uint64_t v23 = v28;
  *(void *)double v22 = v27;
  *((void *)v22 + 1) = v23;
  v22[16] = v29;
  sub_100078D30((uint64_t)sub_100038CF4, (uint64_t)v19, v15);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v13 + 32))(v30, v15, v12);
}

uint64_t sub_100036860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v39 = a8;
  uint64_t v38 = a6;
  uint64_t v42 = a5;
  uint64_t v37 = a4;
  uint64_t v41 = a1;
  uint64_t v40 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v16 = (char *)&v36 - v15;
  uint64_t v17 = type metadata accessor for Bare();
  uint64_t v18 = *(void *)(a11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a7, a11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, a11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = v37;
  sub_10003A450(v37);
  uint64_t v20 = v38;
  swift_retain();
  uint64_t v21 = v39;
  sub_10003A4DC(v39, a9, a10);
  uint64_t WitnessTable = swift_getWitnessTable();
  double v23 = sub_100067FD8(v41, a2, a3, 0, (uint64_t)v19, 0, v42, v43, v20, (uint64_t)v16, v21, a9, a10, v17, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v14 + 8))(v16, v40, v23);
  sub_100003DD0(&qword_1000C5230);
  long long v24 = (_OWORD *)swift_allocObject();
  long long v25 = v43[8];
  long long v26 = v43[10];
  long long v27 = v43[11];
  v24[11] = v43[9];
  v24[12] = v26;
  v24[13] = v27;
  long long v28 = v43[4];
  long long v29 = v43[6];
  long long v30 = v43[7];
  v24[7] = v43[5];
  v24[8] = v29;
  v24[9] = v30;
  v24[10] = v25;
  long long v31 = v43[0];
  long long v32 = v43[1];
  v24[1] = xmmword_1000A2660;
  void v24[2] = v31;
  long long v33 = v43[2];
  long long v34 = v43[3];
  v24[3] = v32;
  v24[4] = v33;
  v24[5] = v34;
  v24[6] = v28;
  return sub_100083798((uint64_t)v24);
}

uint64_t Argument.init(help:completion:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  HIDWORD(v20) = a4;
  uint64_t v21 = a8;
  uint64_t v14 = type metadata accessor for Parsed();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v20 - v16);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a7;
  sub_100038AC4(a1, v18 + 24);
  *(void *)(v18 + 80) = a5;
  *(void *)(v18 + 88) = a6;
  *(void *)(v18 + 96) = a2;
  *(void *)(v18 + 104) = a3;
  *(unsigned char *)(v18 + 112) = BYTE4(v20);
  sub_100078D30((uint64_t)sub_100038D9C, v18, v17);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v15 + 32))(v21, v17, v14);
}

uint64_t sub_100036C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v36 = a8;
  uint64_t v39 = a5;
  uint64_t v35 = a4;
  uint64_t v37 = a1;
  uint64_t v38 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v16 = (char *)&v35 - v15;
  uint64_t v17 = type metadata accessor for Bare();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 56))(v16, 1, 1, a10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = v35;
  sub_10003A450(v35);
  uint64_t v19 = a6;
  swift_retain();
  uint64_t v20 = v36;
  sub_10003A4DC(a7, v36, a9);
  uint64_t WitnessTable = swift_getWitnessTable();
  double v22 = sub_100067FD8(v37, a2, a3, 0, (uint64_t)v18, 0, v39, v40, v19, (uint64_t)v16, a7, v20, a9, v17, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v14 + 8))(v16, v38, v22);
  sub_100003DD0(&qword_1000C5230);
  double v23 = (_OWORD *)swift_allocObject();
  long long v24 = v40[8];
  long long v25 = v40[10];
  long long v26 = v40[11];
  v23[11] = v40[9];
  v23[12] = v25;
  v23[13] = v26;
  long long v27 = v40[4];
  long long v28 = v40[6];
  long long v29 = v40[7];
  v23[7] = v40[5];
  v23[8] = v28;
  _OWORD v23[9] = v29;
  v23[10] = v24;
  long long v30 = v40[0];
  long long v31 = v40[1];
  v23[1] = xmmword_1000A2660;
  v23[2] = v30;
  long long v32 = v40[2];
  long long v33 = v40[3];
  v23[3] = v31;
  v23[4] = v32;
  v23[5] = v33;
  void v23[6] = v27;
  return sub_100083798((uint64_t)v23);
}

uint64_t Argument.init<A>(wrappedValue:help:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  HIDWORD(v18) = a4;
  uint64_t v19 = a7;
  type metadata accessor for Optional();
  uint64_t v12 = type metadata accessor for Parsed();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v18 - v14);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a5;
  *(void *)(v16 + 24) = a6;
  sub_100038AC4(a1, v16 + 32);
  *(void *)(v16 + 88) = a2;
  *(void *)(v16 + 96) = a3;
  *(unsigned char *)(v16 + 104) = BYTE4(v18);
  sub_100078D30((uint64_t)sub_100038DDC, v16, v15);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v13 + 32))(v19, v15, v12);
}

uint64_t Argument.init<A>(wrappedValue:help:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v23 = a7;
  uint64_t v24 = a1;
  int v27 = a5;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v28 = a8;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = type metadata accessor for Parsed();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v23 - v13);
  uint64_t v15 = *(void *)(v10 - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = (*(void *)(v15 + 64) + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v23;
  *(void *)(v18 + 16) = a6;
  *(void *)(v18 + 24) = v19;
  sub_100038AC4(a2, v18 + 32);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 32))(v18 + v16, v24, v10);
  unint64_t v20 = v18 + v17;
  uint64_t v21 = v26;
  *(void *)unint64_t v20 = v25;
  *(void *)(v20 + 8) = v21;
  *(unsigned char *)(v20 + 16) = v27;
  sub_100078D30((uint64_t)sub_100038F78, v18, v14);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v12 + 32))(v28, v14, v11);
}

uint64_t sub_100037228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v16 = type metadata accessor for Optional();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003A450(a4);
  sub_10003A4DC(a6, a7, a8);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100067C8C(a1, a2, a3, 0, (uint64_t)a4, 0, a5, v30, a6, a7, a8, v16, WitnessTable);
  sub_100003DD0(&qword_1000C5230);
  uint64_t v18 = (_OWORD *)swift_allocObject();
  long long v19 = v30[8];
  long long v20 = v30[10];
  long long v21 = v30[11];
  v18[11] = v30[9];
  v18[12] = v20;
  _OWORD v18[13] = v21;
  long long v22 = v30[4];
  long long v23 = v30[6];
  long long v24 = v30[7];
  v18[7] = v30[5];
  unsigned char v18[8] = v23;
  v18[9] = v24;
  v18[10] = v19;
  long long v25 = v30[0];
  long long v26 = v30[1];
  v18[1] = xmmword_1000A2660;
  uint64_t v18[2] = v25;
  long long v27 = v30[2];
  long long v28 = v30[3];
  v18[3] = v26;
  v18[4] = v27;
  v18[5] = v28;
  v18[6] = v22;
  return sub_100083798((uint64_t)v18);
}

uint64_t Argument.init<A>(help:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  HIDWORD(v18) = a4;
  uint64_t v19 = a7;
  type metadata accessor for Optional();
  uint64_t v12 = type metadata accessor for Parsed();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v18 - v14);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a5;
  *(void *)(v16 + 24) = a6;
  sub_100038AC4(a1, v16 + 32);
  *(void *)(v16 + 88) = a2;
  *(void *)(v16 + 96) = a3;
  *(unsigned char *)(v16 + 104) = BYTE4(v18);
  sub_100078D30((uint64_t)sub_100038DDC, v16, v15);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v13 + 32))(v19, v15, v12);
}

uint64_t sub_1000374CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v33 = a1;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v33 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 56))((char *)&v33 - v17, 1, 1, a8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003A450(a4);
  sub_10003A4DC(a5, a6, a7);
  uint64_t WitnessTable = swift_getWitnessTable();
  double v20 = sub_100067C8C(v33, a2, a3, 0, (uint64_t)a4, 0, (uint64_t)v18, v34, a5, a6, a7, v15, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v16 + 8))(v18, v15, v20);
  sub_100003DD0(&qword_1000C5230);
  long long v21 = (_OWORD *)swift_allocObject();
  long long v22 = v34[8];
  long long v23 = v34[10];
  long long v24 = v34[11];
  v21[11] = v34[9];
  v21[12] = v23;
  _OWORD v21[13] = v24;
  long long v25 = v34[4];
  long long v26 = v34[6];
  long long v27 = v34[7];
  v21[7] = v34[5];
  v21[8] = v26;
  v21[9] = v27;
  v21[10] = v22;
  long long v28 = v34[0];
  long long v29 = v34[1];
  v21[1] = xmmword_1000A2660;
  void v21[2] = v28;
  long long v30 = v34[2];
  long long v31 = v34[3];
  v21[3] = v29;
  v21[4] = v30;
  v21[5] = v31;
  v21[6] = v25;
  return sub_100083798((uint64_t)v21);
}

uint64_t Argument.init<A>(wrappedValue:help:completion:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v21 = a6;
  int v22 = a4;
  uint64_t v23 = a8;
  type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for Parsed();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v20 - v15);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a7;
  sub_100038AC4(a1, v17 + 24);
  uint64_t v18 = v21;
  *(void *)(v17 + 80) = a5;
  *(void *)(v17 + 88) = v18;
  *(void *)(v17 + 96) = a2;
  *(void *)(v17 + 104) = a3;
  *(unsigned char *)(v17 + 112) = v22;
  sub_100078D30((uint64_t)sub_100039050, v17, v16);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v14 + 32))(v23, v16, v13);
}

uint64_t Argument.init<A>(wrappedValue:help:completion:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  int v31 = a5;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v28 = a1;
  uint64_t v32 = a9;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = type metadata accessor for Parsed();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v25 - v14);
  uint64_t v16 = *(void *)(v11 - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (*(void *)(v16 + 64) + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = (char *)swift_allocObject();
  *((void *)v19 + 2) = a8;
  sub_100038AC4(a2, (uint64_t)(v19 + 24));
  uint64_t v21 = v27;
  uint64_t v20 = v28;
  *((void *)v19 + 10) = v26;
  *((void *)v19 + 11) = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(&v19[v17], v20, v11);
  int v22 = &v19[v18];
  uint64_t v23 = v30;
  *(void *)int v22 = v29;
  *((void *)v22 + 1) = v23;
  v22[16] = v31;
  sub_100078D30((uint64_t)sub_1000391FC, (uint64_t)v19, v15);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v13 + 32))(v32, v15, v12);
}

uint64_t sub_100037A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v17 = type metadata accessor for Optional();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003A450(a4);
  swift_retain();
  sub_10003A4DC(a8, a9, a10);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100067FD8(a1, a2, a3, 0, (uint64_t)a4, 0, a5, v32, a6, a7, a8, a9, a10, v17, WitnessTable);
  sub_100003DD0(&qword_1000C5230);
  uint64_t v19 = (_OWORD *)swift_allocObject();
  long long v20 = v32[8];
  long long v21 = v32[10];
  long long v22 = v32[11];
  v19[11] = v32[9];
  v19[12] = v21;
  v19[13] = v22;
  long long v23 = v32[4];
  long long v24 = v32[6];
  long long v25 = v32[7];
  v19[7] = v32[5];
  v19[8] = v24;
  v19[9] = v25;
  v19[10] = v20;
  long long v26 = v32[0];
  long long v27 = v32[1];
  v19[1] = xmmword_1000A2660;
  v19[2] = v26;
  long long v28 = v32[2];
  long long v29 = v32[3];
  v19[3] = v27;
  v19[4] = v28;
  v19[5] = v29;
  v19[6] = v23;

  return sub_100083798((uint64_t)v19);
}

uint64_t Argument.init<A>(help:completion:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v21 = a6;
  int v22 = a4;
  uint64_t v23 = a8;
  type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for Parsed();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v20 - v15);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a7;
  sub_100038AC4(a1, v17 + 24);
  uint64_t v18 = v21;
  *(void *)(v17 + 80) = a5;
  *(void *)(v17 + 88) = v18;
  *(void *)(v17 + 96) = a2;
  *(void *)(v17 + 104) = a3;
  *(unsigned char *)(v17 + 112) = v22;
  sub_100078D30((uint64_t)sub_100039050, v17, v16);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v14 + 32))(v23, v16, v13);
}

uint64_t sub_100037D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v36 = a5;
  long long v34 = a4;
  uint64_t v35 = a1;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v34 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 56))((char *)&v34 - v17, 1, 1, a10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = v34;
  sub_10003A450(v34);
  swift_retain();
  sub_10003A4DC(a7, a8, a9);
  uint64_t WitnessTable = swift_getWitnessTable();
  double v21 = sub_100067FD8(v35, a2, a3, 0, (uint64_t)v19, 0, v36, v37, a6, (uint64_t)v18, a7, a8, a9, v15, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v16 + 8))(v18, v15, v21);
  sub_100003DD0(&qword_1000C5230);
  int v22 = (_OWORD *)swift_allocObject();
  long long v23 = v37[8];
  long long v24 = v37[10];
  long long v25 = v37[11];
  v22[11] = v37[9];
  v22[12] = v24;
  v22[13] = v25;
  long long v26 = v37[4];
  long long v27 = v37[6];
  long long v28 = v37[7];
  v22[7] = v37[5];
  v22[8] = v27;
  v22[9] = v28;
  v22[10] = v23;
  long long v29 = v37[0];
  long long v30 = v37[1];
  v22[1] = xmmword_1000A2660;
  v22[2] = v29;
  long long v31 = v37[2];
  long long v32 = v37[3];
  v22[3] = v30;
  v22[4] = v31;
  v22[5] = v32;
  v22[6] = v26;
  return sub_100083798((uint64_t)v22);
}

uint64_t Argument.init<A>(wrappedValue:parsing:help:completion:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a7;
  *(void *)(v16 + 24) = a8;
  sub_100038AC4(a3, v16 + 32);
  *(unsigned char *)(v16 + 81) = a2;
  *(void *)(v16 + 88) = a1;
  *(void *)(v16 + 96) = a4;
  *(void *)(v16 + 104) = a5;
  *(unsigned char *)(v16 + 112) = a6;
  type metadata accessor for Array();
  sub_100078D30((uint64_t)sub_100039344, v16, &v21);
  long long v19 = v21;
  char v20 = v22;
  uint64_t v17 = type metadata accessor for Parsed();
  (*(void (**)(uint64_t *, long long *, uint64_t))(*(void *)(v17 - 8) + 32))(&v23, &v19, v17);
  return v23;
}

uint64_t sub_1000380AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v16 = type metadata accessor for Array();
  uint64_t v31 = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003A450(a4);
  sub_10003A4DC(a7, a8, a9);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100067C8C(a1, a2, a3, 0, (uint64_t)a4, a5, (uint64_t)&v31, v32, a7, a8, a9, v16, WitnessTable);
  sub_100003DD0(&qword_1000C5230);
  uint64_t v18 = (_OWORD *)swift_allocObject();
  long long v19 = v32[8];
  long long v20 = v32[10];
  long long v21 = v32[11];
  v18[11] = v32[9];
  v18[12] = v20;
  _OWORD v18[13] = v21;
  long long v22 = v32[4];
  long long v23 = v32[6];
  long long v24 = v32[7];
  v18[7] = v32[5];
  unsigned char v18[8] = v23;
  v18[9] = v24;
  v18[10] = v19;
  long long v25 = v32[0];
  long long v26 = v32[1];
  v18[1] = xmmword_1000A2660;
  uint64_t v18[2] = v25;
  long long v27 = v32[2];
  long long v28 = v32[3];
  v18[3] = v26;
  v18[4] = v27;
  v18[5] = v28;
  v18[6] = v22;
  return sub_100083798((uint64_t)v18);
}

uint64_t Argument.init<A>(parsing:help:completion:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a6;
  *(void *)(v14 + 24) = a7;
  sub_100038AC4(a2, v14 + 32);
  *(unsigned char *)(v14 + 81) = a1;
  *(void *)(v14 + 88) = a3;
  *(void *)(v14 + 96) = a4;
  *(unsigned char *)(v14 + 104) = a5;
  type metadata accessor for Array();
  sub_100078D30((uint64_t)sub_1000393E8, v14, &v19);
  long long v17 = v19;
  char v18 = v20;
  uint64_t v15 = type metadata accessor for Parsed();
  (*(void (**)(uint64_t *, long long *, uint64_t))(*(void *)(v15 - 8) + 32))(&v21, &v17, v15);
  return v21;
}

uint64_t sub_100038328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v16 = type metadata accessor for Array();
  uint64_t v30 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003A450(a4);
  sub_10003A4DC(a6, a7, a8);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100067C8C(a1, a2, a3, 0, (uint64_t)a4, a5, (uint64_t)&v30, v31, a6, a7, a8, v16, WitnessTable);
  sub_100003DD0(&qword_1000C5230);
  char v18 = (_OWORD *)swift_allocObject();
  long long v19 = v31[8];
  long long v20 = v31[10];
  long long v21 = v31[11];
  v18[11] = v31[9];
  v18[12] = v20;
  _OWORD v18[13] = v21;
  long long v22 = v31[4];
  long long v23 = v31[6];
  long long v24 = v31[7];
  v18[7] = v31[5];
  unsigned char v18[8] = v23;
  v18[9] = v24;
  v18[10] = v19;
  long long v25 = v31[0];
  long long v26 = v31[1];
  v18[1] = xmmword_1000A2660;
  uint64_t v18[2] = v25;
  long long v27 = v31[2];
  long long v28 = v31[3];
  v18[3] = v26;
  v18[4] = v27;
  v18[5] = v28;
  v18[6] = v22;
  return sub_100083798((uint64_t)v18);
}

uint64_t Argument.init<A>(wrappedValue:parsing:help:completion:transform:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a9;
  sub_100038AC4(a3, v17 + 24);
  *(unsigned char *)(v17 + 73) = a2;
  *(void *)(v17 + 80) = a7;
  *(void *)(v17 + 88) = a8;
  *(void *)(v17 + 96) = a1;
  *(void *)(v17 + 104) = a4;
  *(void *)(v17 + 112) = a5;
  *(unsigned char *)(v17 + 120) = a6;
  type metadata accessor for Array();
  sub_100078D30((uint64_t)sub_100039490, v17, &v22);
  long long v20 = v22;
  char v21 = v23;
  uint64_t v18 = type metadata accessor for Parsed();
  (*(void (**)(uint64_t *, long long *, uint64_t))(*(void *)(v18 - 8) + 32))(&v24, &v20, v18);
  return v24;
}

uint64_t sub_1000385B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v17 = type metadata accessor for Array();
  uint64_t v33 = a8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003A450(a4);
  swift_retain();
  sub_10003A4DC(a9, a10, a11);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100067FD8(a1, a2, a3, 0, (uint64_t)a4, a5, a6, v34, a7, (uint64_t)&v33, a9, a10, a11, v17, WitnessTable);
  sub_100003DD0(&qword_1000C5230);
  long long v19 = (_OWORD *)swift_allocObject();
  long long v20 = v34[8];
  long long v21 = v34[10];
  long long v22 = v34[11];
  v19[11] = v34[9];
  v19[12] = v21;
  v19[13] = v22;
  long long v23 = v34[4];
  long long v24 = v34[6];
  long long v25 = v34[7];
  v19[7] = v34[5];
  v19[8] = v24;
  v19[9] = v25;
  v19[10] = v20;
  long long v26 = v34[0];
  long long v27 = v34[1];
  v19[1] = xmmword_1000A2660;
  v19[2] = v26;
  long long v28 = v34[2];
  long long v29 = v34[3];
  v19[3] = v27;
  v19[4] = v28;
  v19[5] = v29;
  v19[6] = v23;
  return sub_100083798((uint64_t)v19);
}

uint64_t Argument.init<A>(parsing:help:completion:transform:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a8;
  sub_100038AC4(a2, v16 + 24);
  *(unsigned char *)(v16 + 73) = a1;
  *(void *)(v16 + 80) = a6;
  *(void *)(v16 + 88) = a7;
  *(void *)(v16 + 96) = a3;
  *(void *)(v16 + 104) = a4;
  *(unsigned char *)(v16 + 112) = a5;
  type metadata accessor for Array();
  sub_100078D30((uint64_t)sub_100039544, v16, &v21);
  long long v19 = v21;
  char v20 = v22;
  uint64_t v17 = type metadata accessor for Parsed();
  (*(void (**)(uint64_t *, long long *, uint64_t))(*(void *)(v17 - 8) + 32))(&v23, &v19, v17);
  return v23;
}

uint64_t sub_10003885C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v16 = type metadata accessor for Array();
  uint64_t v32 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003A450(a4);
  swift_retain();
  sub_10003A4DC(a8, a9, a10);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100067FD8(a1, a2, a3, 0, (uint64_t)a4, a5, a6, v33, a7, (uint64_t)&v32, a8, a9, a10, v16, WitnessTable);
  sub_100003DD0(&qword_1000C5230);
  uint64_t v18 = (_OWORD *)swift_allocObject();
  long long v19 = v33[8];
  long long v20 = v33[10];
  long long v21 = v33[11];
  v18[11] = v33[9];
  v18[12] = v20;
  _OWORD v18[13] = v21;
  long long v22 = v33[4];
  long long v23 = v33[6];
  long long v24 = v33[7];
  v18[7] = v33[5];
  unsigned char v18[8] = v23;
  v18[9] = v24;
  v18[10] = v19;
  long long v25 = v33[0];
  long long v26 = v33[1];
  v18[1] = xmmword_1000A2660;
  uint64_t v18[2] = v25;
  long long v27 = v33[2];
  long long v28 = v33[3];
  v18[3] = v26;
  v18[4] = v27;
  v18[5] = v28;
  v18[6] = v22;
  return sub_100083798((uint64_t)v18);
}

uint64_t sub_1000389D0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 81) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  int v6 = *(unsigned __int8 *)(v0 + v5 + 16);
  if (v6 != 255) {
    sub_10002EBFC(*(void *)(v0 + v5), *(void *)(v0 + v5 + 8), v6);
  }

  return _swift_deallocObject(v0, v5 + 17, v3 | 7);
}

uint64_t sub_100038AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003DD0(&qword_1000C5158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100038B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 16) - 8) + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 16) - 8) + 80);
  uint64_t v5 = v3 + ((*(void *)(*(void *)(*(void *)(v3 + 16) - 8) + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10003605C(a1, a2, a3, (uint64_t *)(v3 + 32), v3 + v4, *(void *)v5, *(void *)(v5 + 8), *(unsigned __int8 *)(v5 + 16), *(void *)(v3 + 16));
}

uint64_t sub_100038BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100036440(a1, a2, a3, (uint64_t *)(v3 + 32), *(void *)(v3 + 88), *(void *)(v3 + 96), *(unsigned char *)(v3 + 104), *(void *)(v3 + 16));
}

uint64_t sub_100038BF8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 96) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v0 + 32))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  int v6 = *(unsigned __int8 *)(v0 + v5 + 16);
  if (v6 != 255) {
    sub_10002EBFC(*(void *)(v0 + v5), *(void *)(v0 + v5 + 8), v6);
  }

  return _swift_deallocObject(v0, v5 + 17, v3 | 7);
}

uint64_t sub_100038CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v3[2] - 8) + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3[2] - 8) + 80);
  uint64_t v5 = (uint64_t)v3 + v4;
  int v6 = (char *)v3 + ((*(void *)(*(void *)(v3[2] - 8) + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_100036860(a1, a2, a3, v3 + 3, v3[10], v3[11], v5, *(void *)v6, *((void *)v6 + 1), v6[16], v3[2]);
}

uint64_t sub_100038D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100036C70(a1, a2, a3, (uint64_t *)(v3 + 24), *(void *)(v3 + 80), *(void *)(v3 + 88), *(void *)(v3 + 96), *(void *)(v3 + 104), *(unsigned char *)(v3 + 112), *(void *)(v3 + 16));
}

uint64_t sub_100038DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000374CC(a1, a2, a3, (uint64_t *)(v3 + 32), *(void *)(v3 + 88), *(void *)(v3 + 96), *(unsigned char *)(v3 + 104), *(void *)(v3 + 16));
}

uint64_t sub_100038E14()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 81) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64) + v4 + 7;
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v0 + v4;
  uint64_t v8 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v1);
  }
  int v9 = *(unsigned __int8 *)(v0 + v6 + 16);
  if (v9 != 255) {
    sub_10002EBFC(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8), v9);
  }

  return _swift_deallocObject(v0, v6 + 17, v3 | 7);
}

uint64_t sub_100038F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100037228(a1, a2, a3, (uint64_t *)(v3 + 32), v3 + v8, *(void *)(v3 + v9), *(void *)(v3 + v9 + 8), *(unsigned char *)(v3 + v9 + 16));
}

uint64_t sub_100039054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100037D30(a1, a2, a3, (uint64_t *)(v3 + 24), *(void *)(v3 + 80), *(void *)(v3 + 88), *(void *)(v3 + 96), *(void *)(v3 + 104), *(unsigned char *)(v3 + 112), *(void *)(v3 + 16));
}

uint64_t sub_100039090()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 96) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64) + v4 + 7;
  if (*(void *)(v0 + 32))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v7 = v0 + v4;
  uint64_t v8 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v1);
  }
  int v9 = *(unsigned __int8 *)(v0 + v6 + 16);
  if (v9 != 255) {
    sub_10002EBFC(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8), v9);
  }

  return _swift_deallocObject(v0, v6 + 17, v3 | 7);
}

uint64_t sub_1000391FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (uint64_t)v3 + v8;
  uint64_t v10 = (char *)v3 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_100037A4C(a1, a2, a3, v3 + 3, v3[10], v3[11], v9, *(void *)v10, *((void *)v10 + 1), v10[16]);
}

uint64_t sub_1000392DC()
{
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 112);
  if (v1 != 255) {
    sub_10002EBFC(*(void *)(v0 + 96), *(void *)(v0 + 104), v1);
  }

  return _swift_deallocObject(v0, 113, 7);
}

uint64_t sub_100039344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000380AC(a1, a2, a3, (uint64_t *)(v3 + 32), *(unsigned __int8 *)(v3 + 81), *(void *)(v3 + 88), *(void *)(v3 + 96), *(void *)(v3 + 104), *(unsigned char *)(v3 + 112));
}

uint64_t sub_100039388()
{
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v1 = *(unsigned __int8 *)(v0 + 104);
  if (v1 != 255) {
    sub_10002EBFC(*(void *)(v0 + 88), *(void *)(v0 + 96), v1);
  }

  return _swift_deallocObject(v0, 105, 7);
}

uint64_t sub_1000393E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100038328(a1, a2, a3, (uint64_t *)(v3 + 32), *(unsigned __int8 *)(v3 + 81), *(void *)(v3 + 88), *(void *)(v3 + 96), *(unsigned char *)(v3 + 104));
}

uint64_t sub_100039420()
{
  if (*(void *)(v0 + 32))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 120);
  if (v1 != 255) {
    sub_10002EBFC(*(void *)(v0 + 104), *(void *)(v0 + 112), v1);
  }

  return _swift_deallocObject(v0, 121, 7);
}

uint64_t sub_100039490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000385B8(a1, a2, a3, (uint64_t *)(v3 + 24), *(unsigned char *)(v3 + 73), *(void *)(v3 + 80), *(void *)(v3 + 88), *(void *)(v3 + 96), *(void *)(v3 + 104), *(void *)(v3 + 112), *(unsigned char *)(v3 + 120));
}

uint64_t sub_1000394DC()
{
  if (*(void *)(v0 + 32))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  int v1 = *(unsigned __int8 *)(v0 + 112);
  if (v1 != 255) {
    sub_10002EBFC(*(void *)(v0 + 96), *(void *)(v0 + 104), v1);
  }

  return _swift_deallocObject(v0, 113, 7);
}

uint64_t sub_100039544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003885C(a1, a2, a3, (uint64_t *)(v3 + 24), *(unsigned char *)(v3 + 73), *(void *)(v3 + 80), *(void *)(v3 + 88), *(void *)(v3 + 96), *(void *)(v3 + 104), *(unsigned char *)(v3 + 112));
}

uint64_t sub_100039588(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000395C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(void *)(a3 - 8);
}

uint64_t sub_1000395CC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003960C()
{
  unint64_t result = qword_1000C51A8[0];
  if (!qword_1000C51A8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1000C51A8);
  }
  return result;
}

uint64_t sub_100039660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_100039668()
{
  uint64_t result = type metadata accessor for Parsed();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1000396F8(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 2;
          unsigned int v9 = v12 + 2;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 != 1)
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 0;
      return v3;
    }
    uint64_t v14 = *((void *)a2 + 1);
    *uint64_t v3 = *(void *)a2;
    v3[1] = v14;
    *((unsigned char *)v3 + v5) = 1;
  }
  swift_retain();
  return v3;
}

uint64_t sub_100039870(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x10) {
    unint64_t v2 = 16;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

void *sub_100039970(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    uint64_t v10 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v10;
    swift_retain();
    char v11 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v11 = 0;
  }
  *((unsigned char *)a1 + v4) = v11;
  return a1;
}

unsigned __int8 *sub_100039AAC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      uint64_t v18 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v18;
      a1[v7] = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  return a1;
}

_OWORD *sub_100039CC8(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(_OWORD *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_100039E00(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_10003A018(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 16;
  if (*(void *)(v3 + 64) > 0x10uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void sub_10003A14C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x10003A314);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

unsigned char *initializeBufferWithCopyOfBuffer for ArgumentVisibility.Representation(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for ArgumentArrayParsingStrategy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003A418);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArgumentArrayParsingStrategy()
{
  return &type metadata for ArgumentArrayParsingStrategy;
}

uint64_t *sub_10003A450(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10003A48C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10003A4DC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_10002EA40(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_10003A4F0()
{
  return swift_getGenericMetadata();
}

uint64_t CommandConfiguration._superCommandName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandConfiguration._superCommandName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

Swift::String_optional (__swiftcall *CommandConfiguration._superCommandName.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t CommandConfiguration.abstract.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandConfiguration.abstract.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

Swift::String_optional (__swiftcall *ArgumentInfoV0.names.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t ArgumentHelp.visibility.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ArgumentHelp.visibility.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

Swift::String_optional (__swiftcall *CommandConfiguration.usage.modify())(Swift::String argument)
{
  return String.init(argument:);
}

BOOL ArgumentHelp.shouldDisplay.getter()
{
  return *(unsigned char *)(v0 + 48) == 0;
}

uint64_t ArgumentHelp.shouldDisplay.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result ^ 1;
  return result;
}

unsigned char *(*ArgumentHelp.shouldDisplay.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 48) == 0;
  return sub_10003A6B0;
}

unsigned char *sub_10003A6B0(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 48) = (result[8] & 1) == 0;
  return result;
}

void __swiftcall ArgumentHelp.init(_:discussion:valueName:shouldDisplay:)(ArgumentParser::ArgumentHelp *__return_ptr retstr, Swift::String _, Swift::String discussion, Swift::String_optional valueName, Swift::Bool shouldDisplay)
{
  retstr->Swift::String abstract = _;
  retstr->discussion = discussion;
  retstr->valueName = valueName;
  retstr->visibility.base = !shouldDisplay;
}

void __swiftcall ArgumentHelp.init(_:discussion:valueName:visibility:)(ArgumentParser::ArgumentHelp *__return_ptr retstr, Swift::String _, Swift::String discussion, Swift::String_optional valueName, ArgumentParser::ArgumentVisibility visibility)
{
  retstr->Swift::String abstract = _;
  retstr->discussion = discussion;
  retstr->valueName = valueName;
  retstr->visibility = visibility;
}

void static ArgumentHelp.hidden.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
}

void static ArgumentHelp.private.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 2;
}

void __swiftcall ArgumentHelp.init(stringLiteral:)(ArgumentParser::ArgumentHelp *__return_ptr retstr, Swift::String stringLiteral)
{
  retstr->Swift::String abstract = stringLiteral;
  retstr->discussion._uint64_t countAndFlagsBits = 0;
  retstr->discussion._object = (void *)0xE000000000000000;
  retstr->valueName.value._uint64_t countAndFlagsBits = 0;
  retstr->valueName.value._object = 0;
  retstr->visibility.base = ArgumentParser_ArgumentVisibility_Representation_default;
}

unint64_t sub_10003A748()
{
  unint64_t result = qword_1000C5238;
  if (!qword_1000C5238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5238);
  }
  return result;
}

void *sub_10003A79C()
{
  return &protocol witness table for DefaultStringInterpolation;
}

uint64_t sub_10003A7A8(void *a1, uint64_t a2, uint64_t a3)
{
  return ExpressibleByStringInterpolation<>.init(stringInterpolation:)(*a1, a1[1], a2, a3);
}

unint64_t sub_10003A7C0()
{
  unint64_t result = qword_1000C5240;
  if (!qword_1000C5240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5240);
  }
  return result;
}

void *sub_10003A814()
{
  return &protocol witness table for String;
}

void *sub_10003A820@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result[1];
  *(void *)a2 = *result;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) = 0;
  return result;
}

unint64_t sub_10003A840()
{
  unint64_t result = qword_1000C5248;
  if (!qword_1000C5248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5248);
  }
  return result;
}

void *sub_10003A894()
{
  return &protocol witness table for String;
}

void *sub_10003A8A0()
{
  return &protocol witness table for String;
}

uint64_t destroy for ArgumentHelp()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ArgumentHelp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ArgumentHelp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for ArgumentHelp(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ArgumentHelp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArgumentHelp(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArgumentHelp(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArgumentHelp()
{
  return &type metadata for ArgumentHelp;
}

void *ArgumentVisibility.default.unsafeMutableAddressor()
{
  return &static ArgumentVisibility.default;
}

void *ArgumentVisibility.hidden.unsafeMutableAddressor()
{
  return &static ArgumentVisibility.hidden;
}

void *ArgumentVisibility.private.unsafeMutableAddressor()
{
  return &static ArgumentVisibility.private;
}

unint64_t sub_10003AB38()
{
  unint64_t result = qword_1000C5250;
  if (!qword_1000C5250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5250);
  }
  return result;
}

ValueMetadata *type metadata accessor for ArgumentVisibility()
{
  return &type metadata for ArgumentVisibility;
}

unsigned char *_s14ArgumentParser18ArgumentVisibilityV14RepresentationOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003AC6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArgumentVisibility.Representation()
{
  return &type metadata for ArgumentVisibility.Representation;
}

unint64_t sub_10003ACA8()
{
  unint64_t result = qword_1000C5258;
  if (!qword_1000C5258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5258);
  }
  return result;
}

uint64_t static CompletionKind.default.getter()
{
  return 0;
}

uint64_t static CompletionKind.list(_:)()
{
  return swift_bridgeObjectRetain();
}

uint64_t static CompletionKind.file(extensions:)()
{
  return swift_bridgeObjectRetain();
}

uint64_t static CompletionKind.directory.getter()
{
  return 1;
}

uint64_t static CompletionKind.shellCommand(_:)(uint64_t a1)
{
  return a1;
}

uint64_t static CompletionKind.custom(_:)(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for Name(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for CompletionKind()
{
  return &type metadata for CompletionKind;
}

uint64_t destroy for CompletionKind.Kind(uint64_t a1)
{
  return sub_10002EBFC(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s14ArgumentParser14CompletionKindV4KindOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10002EA40(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s14ArgumentParser14CompletionKindV4KindOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10002EA40(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_10002EBFC(v6, v7, v8);
  return a1;
}

uint64_t _s14ArgumentParser14CompletionKindV4KindOwta_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_10002EBFC(v4, v5, v6);
  return a1;
}

uint64_t _s14ArgumentParser14CompletionKindV4KindOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s14ArgumentParser14CompletionKindV4KindOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10003AF8C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_10003AFA4(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)__n128 result = a2 - 4;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompletionKind.Kind()
{
  return &type metadata for CompletionKind.Kind;
}

uint64_t ExitCode.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

void *ExitCode.success.unsafeMutableAddressor()
{
  return &static ExitCode.success;
}

void *ExitCode.failure.unsafeMutableAddressor()
{
  return &static ExitCode.failure;
}

void *ExitCode.validationFailure.unsafeMutableAddressor()
{
  return &static ExitCode.validationFailure;
}

uint64_t static ExitCode.validationFailure.getter()
{
  return 64;
}

BOOL ExitCode.isSuccess.getter(int a1)
{
  return a1 == 0;
}

uint64_t sub_10003B010(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10003B5A8();
  unint64_t v5 = sub_10003B5FC();

  return Error<>._code.getter(a1, a2, v4, v5);
}

_DWORD *sub_10003B068@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

Swift::Int sub_10003B078()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10003B0C0()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10003B0EC()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static CleanExit.message(_:)(uint64_t a1)
{
  return a1;
}

uint64_t static CleanExit.helpRequest(_:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  unsigned int v3 = sub_100005090(a1, v1);

  return sub_10003B294((uint64_t)v3, v1, v2);
}

uint64_t CleanExit.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return 0x706C65682D2DLL;
  }
  if (a3 != 1) {
    return 0xD000000000000018;
  }
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10003B224()
{
  if (!*((unsigned char *)v0 + 16)) {
    return 0x706C65682D2DLL;
  }
  if (*((unsigned char *)v0 + 16) != 1) {
    return 0xD000000000000018;
  }
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10003B294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  unint64_t v5 = sub_10000A954(v8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v5, a1, a2);
  sub_100005090(v8, v9);
  uint64_t DynamicType = swift_getDynamicType();
  sub_100005128((uint64_t)v8);
  return DynamicType;
}

unint64_t sub_10003B338()
{
  unint64_t result = qword_1000C5260;
  if (!qword_1000C5260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5260);
  }
  return result;
}

ValueMetadata *type metadata accessor for ValidationError()
{
  return &type metadata for ValidationError;
}

ValueMetadata *type metadata accessor for ExitCode()
{
  return &type metadata for ExitCode;
}

uint64_t sub_10003B3B0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10003B3C8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for CleanExit()
{
  return &type metadata for CleanExit;
}

uint64_t destroy for CleanExit.Representation(uint64_t a1)
{
  return sub_10003B3C8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s14ArgumentParser9CleanExitV14RepresentationOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10003B3B0(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s14ArgumentParser9CleanExitV14RepresentationOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10003B3B0(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_10003B3C8(v6, v7, v8);
  return a1;
}

uint64_t _s14ArgumentParser9CleanExitV14RepresentationOwta_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_10003B3C8(v4, v5, v6);
  return a1;
}

uint64_t _s14ArgumentParser9CleanExitV14RepresentationOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s14ArgumentParser9CleanExitV14RepresentationOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10003B588(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10003B590(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CleanExit.Representation()
{
  return &type metadata for CleanExit.Representation;
}

unint64_t sub_10003B5A8()
{
  unint64_t result = qword_1000C5268;
  if (!qword_1000C5268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5268);
  }
  return result;
}

unint64_t sub_10003B5FC()
{
  unint64_t result = qword_1000C5270;
  if (!qword_1000C5270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5270);
  }
  return result;
}

uint64_t sub_10003B654@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v27 = a5;
  uint64_t v28 = v10;
  uint64_t v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  unsigned int v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v11);
  long long v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  long long v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v22 + 16))(v21, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v15) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a6, 1, 1, a4);
  }
  uint64_t v25 = v28;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v21, v15);
  v30(v19, v13);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v27, v13, a3);
  }
  return result;
}

uint64_t Flag.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Flag();
  sub_1000356C0(a1, (uint64_t)v7);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100078624((uint64_t)v7, v4, WitnessTable, a2);
  return sub_100005128(a1);
}

uint64_t type metadata accessor for Flag()
{
  return sub_10003A4F0();
}

void Flag.init()()
{
}

uint64_t Flag.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Parsed();
  __chkstk_darwin(v6);
  char v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v11 - v7, v3, v6);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a2, v8, v5);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*Flag.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  _OWORD v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  Flag.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_100035A80;
}

uint64_t sub_10003BC50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Flag.init(from:)(a1, a2);
}

unint64_t Flag.description.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = type metadata accessor for Parsed();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unsigned int v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v16 - v12, v2, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return 0xD000000000000012;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v13, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    uint64_t v14 = String.init<A>(describing:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  return v14;
}

void FlagInversion.hash(into:)(uint64_t a1, char a2)
{
}

BOOL static FlagInversion.__derived_struct_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

Swift::Int FlagInversion.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t (*Flag<A>.init(name:inversion:exclusivity:help:)(uint64_t a1, char a2, char a3, uint64_t a4))(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char v7 = a2 & 1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(unsigned char *)(v8 + 24) = v7;
  *(unsigned char *)(v8 + 25) = a3;
  sub_100038AC4(a4, v8 + 32);
  return sub_10003C3E0;
}

uint64_t sub_10003BF98(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t *a7)
{
  if (a5)
  {
    uint64_t v43 = sub_100042BC0(0x656C62616E65, 0xE600000000000000, 1, a4, a1, a2, a3);
    uint64_t v14 = 0x656C6261736964;
    uint64_t v15 = 0xE700000000000000;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = swift_bridgeObjectRetain();
    uint64_t v43 = sub_100089B50(v13, a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = 28526;
    uint64_t v15 = 0xE200000000000000;
  }
  uint64_t v42 = sub_100042BC0(v14, v15, 0, a4, a1, a2, a3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003A450(a7);
  sub_10006746C((uint64_t)_swiftEmptyArrayStorage, 1, (uint64_t)a7, 0, 0, a1, a2, a3, (uint64_t)&v44, 1);
  long long v33 = v44;
  uint64_t v32 = v45;
  char v41 = v47;
  long long v39 = v49;
  long long v40 = v48;
  uint64_t v37 = v51;
  uint64_t v38 = v50;
  char v36 = v52;
  uint64_t v34 = v54;
  uint64_t v35 = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003A450(a7);
  sub_10006746C((uint64_t)_swiftEmptyArrayStorage, 1, (uint64_t)a7, 0, 0, a1, a2, a3, (uint64_t)&v55, 0);
  uint64_t v16 = v56;
  char v17 = v58;
  long long v24 = v55;
  long long v25 = v59;
  long long v31 = v60;
  uint64_t v29 = v62;
  uint64_t v30 = v61;
  char v28 = v63;
  uint64_t v26 = v65;
  uint64_t v27 = v64;
  uint64_t v18 = swift_allocObject();
  *(unsigned char *)(v18 + 16) = 0;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = a1;
  *(void *)(v19 + 32) = a2;
  *(void *)(v19 + 40) = a3;
  *(unsigned char *)(v19 + 48) = a6;
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = 2;
  *(void *)(v20 + 24) = a1;
  *(void *)(v20 + 32) = a2;
  *(void *)(v20 + 40) = a3;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v18;
  *(void *)(v21 + 24) = a1;
  *(void *)(v21 + 32) = a2;
  *(void *)(v21 + 40) = a3;
  *(unsigned char *)(v21 + 48) = a6;
  sub_100003DD0(&qword_1000C5230);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1000A2CD0;
  *(void *)(v22 + 32) = v43;
  *(_OWORD *)(v22 + 40) = v33;
  *(void *)(v22 + 56) = v32;
  *(_OWORD *)(v22 + 64) = v46;
  *(unsigned char *)(v22 + 80) = v41;
  *(_OWORD *)(v22 + 88) = v40;
  *(_OWORD *)(v22 + 104) = v39;
  *(void *)(v22 + 120) = v38;
  *(void *)(v22 + 128) = v37;
  *(unsigned char *)(v22 + 136) = v36;
  *(void *)(v22 + 144) = v35;
  *(void *)(v22 + 152) = v34;
  *(void *)(v22 + 160) = 0;
  *(void *)(v22 + 168) = 0;
  *(_WORD *)(v22 + 176) = 4;
  *(void *)(v22 + 184) = sub_100041FE4;
  *(void *)(v22 + 192) = v19;
  *(unsigned char *)(v22 + 200) = 0;
  *(void *)(v22 + 208) = sub_100041FBC;
  *(void *)(v22 + 216) = v20;
  *(void *)(v22 + 224) = v42;
  *(_OWORD *)(v22 + 232) = v24;
  *(void *)(v22 + 248) = v16;
  *(_OWORD *)(v22 + 256) = v57;
  *(unsigned char *)(v22 + 272) = v17;
  *(_OWORD *)(v22 + 280) = v25;
  *(_OWORD *)(v22 + 296) = v31;
  *(void *)(v22 + 312) = v30;
  *(void *)(v22 + 320) = v29;
  *(unsigned char *)(v22 + 328) = v28;
  *(void *)(v22 + 336) = v27;
  *(void *)(v22 + 344) = v26;
  *(void *)(v22 + 352) = 0;
  *(void *)(v22 + 360) = 0;
  *(_WORD *)(v22 + 368) = 4;
  *(void *)(v22 + 376) = sub_1000420A0;
  *(void *)(v22 + 384) = v21;
  *(unsigned char *)(v22 + 392) = 0;
  *(void *)(v22 + 400) = String.init(argument:);
  *(void *)(v22 + 408) = 0;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_retain();

  return sub_100083798(v22);
}

uint64_t sub_10003C3E0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10003BF98(a1, a2, a3, *(void *)(v3 + 16), *(unsigned char *)(v3 + 24), *(unsigned char *)(v3 + 25), (uint64_t *)(v3 + 32));
}

uint64_t (*Flag<A>.init(wrappedValue:name:inversion:exclusivity:help:)(uint64_t a1, char a2, char a3, uint64_t a4))(uint64_t, unint64_t, uint64_t)
{
  char v7 = a2 & 1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(unsigned char *)(v8 + 24) = v7;
  *(unsigned char *)(v8 + 25) = a3;
  sub_100038AC4(a4, v8 + 32);
  return sub_100042108;
}

uint64_t sub_10003C480(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  BOOL v11 = a5 != 2;
  if (a5) {
    uint64_t v12 = 1702195828;
  }
  else {
    uint64_t v12 = 0;
  }
  if (a5) {
    uint64_t v13 = 0xE400000000000000;
  }
  else {
    uint64_t v13 = 0;
  }
  sub_10003A450(a6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006746C((uint64_t)_swiftEmptyArrayStorage, v11, (uint64_t)a6, v12, v13, a1, a2, a3, (uint64_t)&v30, 0);
  long long v23 = v30;
  uint64_t v14 = v31;
  char v29 = v33;
  long long v27 = v35;
  long long v28 = v34;
  uint64_t v15 = v36;
  uint64_t v16 = v37;
  char v26 = v38;
  uint64_t v24 = v40;
  uint64_t v25 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = sub_100089B50(v17, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = a1;
  v19[3] = a2;
  v19[4] = a3;
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = a5;
  *(void *)(v20 + 24) = a1;
  *(void *)(v20 + 32) = a2;
  *(void *)(v20 + 40) = a3;
  sub_100003DD0(&qword_1000C5230);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1000A2660;
  *(void *)(v21 + 32) = v18;
  *(_OWORD *)(v21 + 40) = v23;
  *(void *)(v21 + 56) = v14;
  *(_OWORD *)(v21 + 64) = v32;
  *(unsigned char *)(v21 + 80) = v29;
  *(_OWORD *)(v21 + 88) = v28;
  *(_OWORD *)(v21 + 104) = v27;
  *(void *)(v21 + 120) = v15;
  *(void *)(v21 + 128) = v16;
  *(unsigned char *)(v21 + 136) = v26;
  *(void *)(v21 + 144) = v25;
  *(void *)(v21 + 152) = v24;
  *(void *)(v21 + 160) = 0;
  *(void *)(v21 + 168) = 0;
  *(_WORD *)(v21 + 176) = 4;
  *(void *)(v21 + 184) = sub_100041F98;
  *(void *)(v21 + 192) = v19;
  *(unsigned char *)(v21 + 200) = 0;
  *(void *)(v21 + 208) = sub_100041FBC;
  *(void *)(v21 + 216) = v20;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();

  return sub_100083798(v21);
}

uint64_t (*Flag<A>.init(wrappedValue:name:help:)(char a1, uint64_t a2, uint64_t a3))(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(unsigned char *)(v6 + 24) = a1;
  sub_100038AC4(a3, v6 + 32);
  return sub_10003C760;
}

uint64_t sub_10003C760(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10003C480(a1, a2, a3, *(void *)(v3 + 16), *(unsigned char *)(v3 + 24), (uint64_t *)(v3 + 32));
}

uint64_t (*Flag<A>.init(wrappedValue:name:inversion:exclusivity:help:)(char a1, uint64_t a2, char a3, char a4, uint64_t a5))()
{
  char v9 = a3 & 1;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(unsigned char *)(v10 + 24) = a1;
  *(unsigned char *)(v10 + 25) = v9;
  *(unsigned char *)(v10 + 26) = a4;
  sub_100038AC4(a5, v10 + 32);
  return sub_10003C804;
}

uint64_t (*Flag<A>.init(name:inversion:exclusivity:help:)(uint64_t a1, char a2, char a3, uint64_t a4))()
{
  char v7 = a2 & 1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(unsigned char *)(v8 + 24) = 2;
  *(unsigned char *)(v8 + 25) = v7;
  *(unsigned char *)(v8 + 26) = a3;
  sub_100038AC4(a4, v8 + 32);
  return sub_10003C804;
}

uint64_t sub_10003C89C()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 81, 7);
}

uint64_t sub_10003C8F0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10006F690(a1, a2, a3, *(void *)(v3 + 16), *(unsigned char *)(v3 + 24), *(unsigned char *)(v3 + 24) == 2, *(unsigned char *)(v3 + 25), *(unsigned char *)(v3 + 26), (uint64_t *)(v3 + 32));
}

uint64_t (*Flag<A>.init(name:help:)(uint64_t a1, uint64_t a2))(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  sub_100038AC4(a2, v4 + 24);
  return sub_10003CC24;
}

uint64_t sub_10003C9A0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  sub_10003A450(a5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006746C((uint64_t)_swiftEmptyArrayStorage, 3, (uint64_t)a5, 0, 0, a1, a2, a3, (uint64_t)&v25, 0);
  long long v19 = v25;
  uint64_t v9 = v26;
  char v24 = v28;
  long long v22 = v30;
  long long v23 = v29;
  uint64_t v10 = v31;
  uint64_t v11 = v32;
  char v12 = v33;
  uint64_t v20 = v35;
  uint64_t v21 = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v14 = sub_100089B50(v13, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  char v36 = 0;
  sub_100003DD0(&qword_1000C5230);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1000A2660;
  *(void *)(v17 + 32) = v14;
  *(_OWORD *)(v17 + 40) = v19;
  *(void *)(v17 + 56) = v9;
  *(_OWORD *)(v17 + 64) = v27;
  *(unsigned char *)(v17 + 80) = v24;
  *(_OWORD *)(v17 + 88) = v23;
  *(_OWORD *)(v17 + 104) = v22;
  *(void *)(v17 + 120) = v10;
  *(void *)(v17 + 128) = v11;
  *(unsigned char *)(v17 + 136) = v12;
  *(void *)(v17 + 144) = v21;
  *(void *)(v17 + 152) = v20;
  *(void *)(v17 + 160) = 0;
  *(void *)(v17 + 168) = 0;
  *(_WORD *)(v17 + 176) = 4;
  *(void *)(v17 + 184) = sub_100041F10;
  *(void *)(v17 + 192) = v15;
  *(unsigned char *)(v17 + 200) = v36;
  *(void *)(v17 + 208) = sub_100041F34;
  *(void *)(v17 + 216) = v16;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();

  return sub_100083798(v17);
}

uint64_t sub_10003CBD0()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 73, 7);
}

uint64_t sub_10003CC24(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10003C9A0(a1, a2, a3, *(void *)(v3 + 16), (uint64_t *)(v3 + 24));
}

uint64_t sub_10003CC30@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v20 = a3;
  int v21 = a2;
  uint64_t v22 = a6;
  uint64_t v8 = type metadata accessor for Parsed();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v19 - v10);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  unint64_t v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v15 = (*(void *)(v13 + 64) + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a4;
  *(void *)(v16 + 24) = a5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 32))(v16 + v14, v19, v12);
  uint64_t v17 = v16 + v15;
  sub_100038AC4(v20, v17);
  *(unsigned char *)(v17 + 49) = v21;
  sub_100078D30((uint64_t)sub_100041B40, v16, v11);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v9 + 32))(v22, v11, v8);
}

uint64_t sub_10003CDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  int v58 = a6;
  uint64_t v60 = a4;
  uint64_t v56 = a5;
  sub_100038AC4(a5, (uint64_t)v71);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v49 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v57 = type metadata accessor for EnumeratedSequence();
  uint64_t v55 = *(void *)(v57 - 8);
  uint64_t v14 = __chkstk_darwin(v57);
  uint64_t v51 = (char *)&v45 - v15;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v45 - v17;
  uint64_t v50 = swift_allocObject();
  *(unsigned char *)(v50 + 16) = 0;
  uint64_t v65 = a7;
  uint64_t v66 = a8;
  uint64_t v52 = a1;
  uint64_t v67 = a1;
  uint64_t v68 = a2;
  uint64_t v53 = a2;
  uint64_t v54 = a3;
  uint64_t v69 = a3;
  type metadata accessor for Optional();
  sub_10003B654((void (*)(char *, char *))sub_100041C10, (uint64_t)v64, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for String, v19, (uint64_t)v70);
  uint64_t v46 = v70[0];
  uint64_t v48 = v70[1];
  dispatch thunk of static CaseIterable.allCases.getter();
  uint64_t v62 = a7;
  uint64_t v63 = a8;
  uint64_t v59 = a8;
  uint64_t v20 = sub_100003DD0(&qword_1000C5158);
  uint64_t v22 = sub_10004BD08((void (*)(char *, char *))sub_100041098, (uint64_t)v61, AssociatedTypeWitness, v20, (uint64_t)&type metadata for Never, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Never, v21);
  long long v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  v23(v18, AssociatedTypeWitness);
  uint64_t v24 = *(void *)(v22 + 16);
  if (v24)
  {
    long long v25 = (uint64_t *)(v22 + 40);
    uint64_t v26 = v24 - 1;
    do
    {
      uint64_t v27 = *v25;
      v25 += 7;
      BOOL v28 = v27 != 0;
      if (v27) {
        BOOL v29 = 1;
      }
      else {
        BOOL v29 = v26 == 0;
      }
      --v26;
    }
    while (!v29);
  }
  else
  {
    BOOL v28 = 0;
  }
  dispatch thunk of static CaseIterable.allCases.getter();
  long long v30 = v51;
  Sequence.enumerated()();
  uint64_t v31 = ((uint64_t (*)(char *, uint64_t))v23)(v18, AssociatedTypeWitness);
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v33 = v59;
  *(&v45 - 14) = a7;
  *(&v45 - 13) = v33;
  uint64_t v34 = v53;
  *(&v45 - 12) = v52;
  *(&v45 - 11) = v34;
  *(&v45 - 10) = v54;
  *(&v45 - 9) = v22;
  *(&v45 - 8) = v56;
  *((unsigned char *)&v45 - 56) = v28;
  uint64_t v35 = v46;
  *(&v45 - 6) = v60;
  *(&v45 - 5) = v35;
  uint64_t v36 = v50;
  *(&v45 - 4) = v48;
  *(&v45 - 3) = v36;
  *((unsigned char *)&v45 - 16) = v58;
  __chkstk_darwin(v32);
  *(&v45 - 4) = a7;
  *(&v45 - 3) = v37;
  *(&v45 - 2) = (uint64_t)sub_100041C9C;
  *(&v45 - 1) = v38;
  uint64_t v39 = v57;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v42 = sub_10003E16C((void (*)(char *, char *))sub_1000410F0, (uint64_t)(&v45 - 6), v39, (char *)&type metadata for ArgumentDefinition, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v41);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v30, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v43 = sub_100083798(v42);
  swift_release();
  return v43;
}

uint64_t sub_10003D300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v16);
  uint64_t v17 = String.init<A>(describing:)();
  unint64_t v19 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_100075F04(v17, v19, a2, a3, a4);
  unint64_t v22 = v21;
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a6 + 24))(a1, a5, a6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_100089B50(v23, v20, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (*((void *)v24 + 2))
  {
    uint64_t v25 = *((void *)v24 + 4);
    uint64_t v26 = (void *)*((void *)v24 + 5);
    unsigned __int8 v27 = v24[48];
    sub_1000319B8(v25, (uint64_t)v26, v27);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = v25;
    v33._object = v26;
    uint64_t v28 = sub_100076D6C(v33, v27);
    uint64_t v30 = v29;
    uint64_t result = sub_10002ECB8(v25, (uint64_t)v26, v27);
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v28 = 0;
    uint64_t v30 = 0;
  }
  *a7 = v28;
  a7[1] = v30;
  return result;
}

uint64_t sub_10003D50C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, int a8@<W7>, _OWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, unsigned __int8 a14, uint64_t a15, uint64_t a16)
{
  int v145 = a8;
  uint64_t v138 = a6;
  long long v133 = a9;
  int v126 = a7;
  sub_100038AC4((uint64_t)a7, (uint64_t)v149);
  uint64_t v125 = v149[0];
  uint64_t v119 = v149[2];
  uint64_t v120 = v149[1];
  uint64_t v117 = v149[4];
  uint64_t v118 = v149[3];
  uint64_t v116 = v149[5];
  LODWORD(v115) = v150;
  uint64_t v21 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v114 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v22 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v142 = (char *)&v109 - v23;
  uint64_t v121 = v21;
  uint64_t v123 = *(void *)(v21 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v113 = (char *)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  long long v139 = (char *)&v109 - v27;
  __chkstk_darwin(v26);
  uint64_t v132 = v28;
  uint64_t v29 = (char *)&v109 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = v30;
  uint64_t v140 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  uint64_t v141 = v30 + 16;
  v140(v29, a2, a15);
  long long v135 = v29;
  uint64_t v31 = String.init<A>(describing:)();
  unint64_t v33 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v34 = v31;
  uint64_t v35 = a2;
  uint64_t v146 = a3;
  uint64_t v134 = a5;
  uint64_t v36 = sub_100075F04(v34, v33, a3, a4, a5);
  unint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a16 + 24);
  uint64_t v136 = a16;
  uint64_t v137 = a15;
  uint64_t result = v41(v35, a15, a16);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v138 + 16) > a1)
  {
    uint64_t v130 = v40;
    unint64_t v131 = v38;
    uint64_t v128 = result;
    uint64_t v129 = v36;
    uint64_t v144 = a4;
    uint64_t v122 = a12;
    uint64_t v43 = a11;
    uint64_t v44 = v138 + 56 * a1;
    uint64_t v45 = *(void *)(v44 + 32);
    uint64_t v46 = *(void *)(v44 + 40);
    uint64_t v47 = *(void *)(v44 + 48);
    uint64_t v48 = *(void *)(v44 + 56);
    uint64_t v49 = *(void *)(v44 + 64);
    uint64_t v50 = *(void *)(v44 + 72);
    uint64_t v51 = v45;
    uint64_t v52 = v46;
    uint64_t v53 = v47;
    int v54 = *(unsigned __int8 *)(v44 + 80);
    uint64_t v55 = v48;
    uint64_t v56 = v49;
    uint64_t v57 = v50;
    char v58 = v54;
    if (!v46)
    {
      uint64_t v59 = v45;
      uint64_t v60 = v49;
      int v61 = v54;
      uint64_t v62 = v48;
      uint64_t v63 = v47;
      sub_10003A450(v126);
      uint64_t v45 = v59;
      uint64_t v47 = v63;
      uint64_t v48 = v62;
      int v54 = v61;
      uint64_t v49 = v60;
      uint64_t v51 = v125;
      uint64_t v53 = v119;
      uint64_t v52 = v120;
      uint64_t v56 = v117;
      uint64_t v55 = v118;
      uint64_t v57 = v116;
      char v58 = v115;
    }
    LODWORD(v125) = a14;
    int v126 = a13;
    v151[0] = v51;
    v151[1] = v52;
    v151[2] = v53;
    v151[3] = v55;
    v151[4] = v56;
    v151[5] = v57;
    char v152 = v58;
    uint64_t v65 = v142;
    uint64_t v64 = v143;
    uint64_t v66 = v137;
    uint64_t v67 = v139;
    uint64_t v127 = v35;
    uint64_t v138 = a10;
    if (v145)
    {
      uint64_t v112 = v46;
      uint64_t v115 = v45;
      uint64_t v116 = v47;
      uint64_t v117 = v48;
      LODWORD(v118) = v54;
      uint64_t v119 = v49;
      uint64_t v120 = v50;
      uint64_t v110 = a11;
      v140(v139, v35, v137);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v67, 0, 1, v66);
      uint64_t v68 = v123;
      uint64_t v69 = &v65[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v123 + 16);
      Swift::String v71 = v67;
      uint64_t v72 = v121;
      v70(v65, v71, v121);
      uint64_t v111 = v69;
      v70(v69, (char *)a10, v72);
      unint64_t v73 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
      if (v73(v65, 1, v66) == 1)
      {
        sub_10003A48C(v115, v112);
        unint64_t v74 = *(void (**)(char *, uint64_t))(v68 + 8);
        v74(v139, v72);
        if (v73(v111, 1, v66) == 1)
        {
          TupleTypeMetadata2 = (uint64_t)v73;
          v74(v142, v72);
          uint64_t v75 = v144;
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v80 = v113;
        v70(v113, v142, v72);
        uint64_t v81 = v111;
        if (v73(v111, 1, v66) != 1)
        {
          TupleTypeMetadata2 = (uint64_t)v73;
          uint64_t v82 = v143;
          uint64_t v83 = v135;
          (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v135, v81, v66);
          sub_10003A48C(v115, v112);
          char v84 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v66 = v137;
          char v85 = v84;
          uint64_t v86 = *(void (**)(char *, uint64_t))(v82 + 8);
          v86(v83, v137);
          uint64_t v87 = *(void (**)(char *, uint64_t))(v123 + 8);
          v87(v139, v72);
          v86(v80, v66);
          v87(v142, v72);
          uint64_t v75 = v144;
          if ((v85 & 1) == 0)
          {
            uint64_t v43 = 0;
            uint64_t v78 = 0;
            uint64_t v76 = v143;
            uint64_t v88 = v138;
            goto LABEL_16;
          }
LABEL_14:
          uint64_t v78 = v122;
          swift_bridgeObjectRetain();
          uint64_t v76 = v143;
          uint64_t v88 = v138;
          uint64_t v43 = v110;
LABEL_16:
          unsigned int v79 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))TupleTypeMetadata2)(v88, 1, v66);
          goto LABEL_17;
        }
        sub_10003A48C(v115, v112);
        (*(void (**)(char *, uint64_t))(v123 + 8))(v139, v72);
        (*(void (**)(char *, uint64_t))(v143 + 8))(v80, v66);
      }
      (*(void (**)(char *, uint64_t))(v114 + 8))(v142, TupleTypeMetadata2);
      uint64_t v43 = 0;
      uint64_t v78 = 0;
      uint64_t v76 = v143;
      uint64_t v75 = v144;
      unsigned int v79 = v73((char *)v138, 1, v66);
    }
    else
    {
      sub_10003A48C(v45, v46);
      uint64_t v76 = v64;
      uint64_t v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
      uint64_t v78 = v122;
      swift_bridgeObjectRetain();
      uint64_t v75 = v144;
      unsigned int v79 = v77(a10, 1, v66);
    }
LABEL_17:
    BOOL v89 = v79 != 1;
    swift_bridgeObjectRetain();
    uint64_t v90 = v75;
    uint64_t v91 = v134;
    swift_bridgeObjectRetain();
    uint64_t v92 = v146;
    sub_10006746C((uint64_t)_swiftEmptyArrayStorage, v89, (uint64_t)v151, v43, v78, v146, v90, v91, (uint64_t)v147, (v145 & 1) == 0);
    uint64_t v93 = v135;
    v140(v135, v127, v66);
    unint64_t v94 = (*(unsigned __int8 *)(v76 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
    uint64_t v95 = v94 + v132;
    unint64_t v96 = (char *)swift_allocObject();
    uint64_t v97 = v136;
    *((void *)v96 + 2) = v66;
    *((void *)v96 + 3) = v97;
    *((void *)v96 + 4) = v126;
    *((void *)v96 + 5) = v92;
    uint64_t v98 = v144;
    *((void *)v96 + 6) = v144;
    *((void *)v96 + 7) = v91;
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(&v96[v94], v93, v66);
    v96[v95] = v125;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10003DDF0(v146, v98, v91, v129, v131, (uint64_t)v147, (uint64_t)v148, 0, v138, (uint64_t)sub_1000419D8, (uint64_t)v96, 0, v66);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100041534((uint64_t)v147);
    uint64_t result = swift_release();
    long long v99 = v148[9];
    long long v100 = v148[10];
    long long v101 = v148[7];
    unsigned int v102 = v133;
    v133[8] = v148[8];
    v102[9] = v99;
    long long v103 = v148[11];
    v102[10] = v100;
    v102[11] = v103;
    long long v104 = v148[5];
    long long v105 = v148[6];
    long long v106 = v148[3];
    v102[4] = v148[4];
    v102[5] = v104;
    v102[6] = v105;
    v102[7] = v101;
    long long v107 = v148[1];
    long long v108 = v148[2];
    *unsigned int v102 = v148[0];
    v102[1] = v107;
    v102[2] = v108;
    v102[3] = v106;
    return result;
  }
  __break(1u);
  return result;
}

double sub_10003DDF0@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, unsigned __int8 a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13)
{
  uint64_t v44 = a3;
  uint64_t v42 = a2;
  uint64_t v41 = a1;
  int v56 = a8;
  uint64_t v45 = a11;
  int v40 = a12;
  uint64_t v43 = a10;
  uint64_t v37 = a9;
  uint64_t v38 = a13;
  long long v48 = *(_OWORD *)a6;
  uint64_t v47 = *(void *)(a6 + 16);
  char v17 = *(unsigned char *)(a6 + 40);
  long long v18 = *(_OWORD *)(a6 + 48);
  long long v52 = *(_OWORD *)(a6 + 64);
  long long v53 = v18;
  uint64_t v19 = *(void *)(a6 + 80);
  uint64_t v50 = *(void *)(a6 + 88);
  uint64_t v51 = v19;
  int v49 = *(unsigned __int8 *)(a6 + 96);
  int v46 = v17 & 1;
  uint64_t v20 = *(void *)(a6 + 112);
  uint64_t v54 = *(void *)(a6 + 104);
  uint64_t v55 = v20;
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v37 - v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = swift_bridgeObjectRetain();
  long long v39 = *(_OWORD *)(a6 + 24);
  uint64_t v27 = sub_100089B50(v26, a4, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, v37, v21);
  unint64_t v28 = (*(unsigned __int8 *)(v22 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v38;
  (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v29 + v28, v25, v21);
  uint64_t v30 = (void *)(v29 + ((v23 + v28 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v31 = v42;
  *uint64_t v30 = v41;
  v30[1] = v31;
  v30[2] = v44;
  char v58 = v40 & 1;
  sub_1000417CC(a6);
  uint64_t v32 = v43;
  uint64_t v33 = v45;
  sub_10002EA98();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)a7 = v27;
  *(_OWORD *)(a7 + 8) = v48;
  *(void *)(a7 + 24) = v47;
  *(_OWORD *)(a7 + 32) = v39;
  *(unsigned char *)(a7 + 48) = v46;
  *(_DWORD *)(a7 + 49) = v62[0];
  *(_DWORD *)(a7 + 52) = *(_DWORD *)((char *)v62 + 3);
  *(_OWORD *)(a7 + 56) = v53;
  double result = *(double *)&v52;
  *(_OWORD *)(a7 + 72) = v52;
  uint64_t v35 = v50;
  *(void *)(a7 + 88) = v51;
  *(void *)(a7 + 96) = v35;
  *(unsigned char *)(a7 + 104) = v49;
  *(_DWORD *)(a7 + 108) = *(_DWORD *)&v61[3];
  *(_DWORD *)(a7 + 105) = *(_DWORD *)v61;
  uint64_t v36 = v55;
  *(void *)(a7 + 112) = v54;
  *(void *)(a7 + 120) = v36;
  *(void *)(a7 + 128) = 0;
  *(void *)(a7 + 136) = 0;
  *(unsigned char *)(a7 + 144) = 4;
  *(unsigned char *)(a7 + 145) = v56;
  *(_DWORD *)(a7 + 146) = v59;
  *(_WORD *)(a7 + 150) = v60;
  *(void *)(a7 + 152) = v32;
  *(void *)(a7 + 160) = v33;
  *(unsigned char *)(a7 + 168) = v58;
  *(_DWORD *)(a7 + 169) = *(_DWORD *)v57;
  *(_DWORD *)(a7 + 172) = *(_DWORD *)&v57[3];
  *(void *)(a7 + 176) = sub_100041710;
  *(void *)(a7 + 184) = v29;
  return result;
}

uint64_t sub_10003E16C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  int v59 = a4;
  uint64_t v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  uint64_t v11 = __chkstk_darwin(a1);
  uint64_t v55 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  long long v53 = (char *)&v40 - v13;
  uint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v41 = (char *)&v40 - v17;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v51 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  int v40 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v50 = *((void *)v15 - 1);
  __chkstk_darwin(v26);
  unint64_t v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  long long v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v30 = (char *)&v40 - v29;
  Swift::Int v31 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v61 = ContiguousArray.init()();
  uint64_t v56 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v31);
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  int v59 = v30;
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    uint64_t v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    uint64_t v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      uint64_t result = (*v33)(v23, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v23, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v23, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v23, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      if (!--v31)
      {
        uint64_t v35 = v54;
        uint64_t v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  uint64_t v36 = v51;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    long long v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    uint64_t v38 = (void (**)(char *, uint64_t))(v35 + 8);
    long long v39 = v41;
    uint64_t v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

uint64_t Flag<A>.init(wrappedValue:exclusivity:help:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Optional();
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v17 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v17 - v13, a1, a4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, a4);
  sub_10003CC30((uint64_t)v14, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, a4);
}

uint64_t Flag<A>.init(exclusivity:help:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional();
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))((char *)&v14 - v11, 1, 1, a3);
  return sub_10003CC30((uint64_t)v12, a1, a2, a3, a4, a5);
}

uint64_t Flag.init<A>(exclusivity:help:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  type metadata accessor for Optional();
  uint64_t v10 = type metadata accessor for Parsed();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v16 - v12);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a3;
  *(void *)(v14 + 24) = a4;
  sub_100038AC4(a2, v14 + 32);
  *(unsigned char *)(v14 + 81) = a1;
  sub_100078D30((uint64_t)sub_10003EFF4, v14, v13);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v11 + 32))(a5, v13, v10);
}

uint64_t sub_10003EBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  int v48 = a5;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v40[1] = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v49 = type metadata accessor for EnumeratedSequence();
  uint64_t v47 = *(void *)(v49 - 8);
  uint64_t v11 = __chkstk_darwin(v49);
  uint64_t v42 = (char *)v40 - v12;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v40 - v14;
  uint64_t v41 = swift_allocObject();
  *(unsigned char *)(v41 + 16) = 0;
  dispatch thunk of static CaseIterable.allCases.getter();
  uint64_t v52 = a6;
  uint64_t v53 = a7;
  uint64_t v50 = a7;
  uint64_t v16 = sub_100003DD0(&qword_1000C5158);
  uint64_t v18 = sub_10004BD08((void (*)(char *, char *))sub_100041098, (uint64_t)v51, AssociatedTypeWitness, v16, (uint64_t)&type metadata for Never, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Never, v17);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v13 + 8);
  v19(v15, AssociatedTypeWitness);
  uint64_t v20 = *(void *)(v18 + 16);
  if (v20)
  {
    uint64_t v21 = (uint64_t *)(v18 + 40);
    uint64_t v22 = v20 - 1;
    do
    {
      uint64_t v23 = *v21;
      v21 += 7;
      BOOL v24 = v23 != 0;
      if (v23) {
        BOOL v25 = 1;
      }
      else {
        BOOL v25 = v22 == 0;
      }
      --v22;
    }
    while (!v25);
  }
  else
  {
    BOOL v24 = 0;
  }
  dispatch thunk of static CaseIterable.allCases.getter();
  uint64_t v26 = v42;
  Sequence.enumerated()();
  uint64_t v27 = ((uint64_t (*)(char *, uint64_t))v19)(v15, AssociatedTypeWitness);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v29 = v50;
  v40[-10] = a6;
  v40[-9] = v29;
  uint64_t v30 = v44;
  v40[-8] = v43;
  v40[-7] = v30;
  v40[-6] = v45;
  LOBYTE(v40[-5]) = v24;
  uint64_t v31 = v46;
  v40[-4] = v18;
  v40[-3] = v31;
  v40[-2] = v41;
  LOBYTE(v40[-1]) = v48;
  __chkstk_darwin(v28);
  v40[-4] = a6;
  v40[-3] = v32;
  v40[-2] = sub_10004198C;
  v40[-1] = v33;
  uint64_t v34 = v49;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v37 = sub_10003E16C((void (*)(char *, char *))sub_1000410F0, (uint64_t)&v40[-6], v34, (char *)&type metadata for ArgumentDefinition, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v36);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v26, v34);
  swift_bridgeObjectRelease();
  uint64_t v38 = sub_100083798(v37);
  swift_release();
  return v38;
}

uint64_t sub_10003EFA8()
{
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 82, 7);
}

uint64_t sub_10003EFF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003EBC4(a1, a2, a3, v3 + 32, *(unsigned __int8 *)(v3 + 81), *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_10003F004@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v72 = a7;
  unint64_t v73 = a1;
  int v96 = a6;
  char v85 = a9;
  sub_100038AC4((uint64_t)a8, (uint64_t)v101);
  uint64_t v93 = v101[2];
  uint64_t v94 = v101[0];
  uint64_t v95 = v101[3];
  uint64_t v75 = v101[1];
  uint64_t v76 = v101[4];
  uint64_t v78 = v101[5];
  int v74 = v102;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v91 = *(void *)(v18 - 8);
  uint64_t v92 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v98 = (uint64_t)&v71 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = v23;
  BOOL v24 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v82 = v23 + 16;
  uint64_t v83 = v21;
  uint64_t v81 = v24;
  v24(v22, a2, a12);
  uint64_t v80 = v22;
  uint64_t v25 = String.init<A>(describing:)();
  unint64_t v27 = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v28 = v27;
  uint64_t v97 = a3;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v86 = sub_100075F04(v25, v28, v29, a4, a5);
  unint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a13 + 24);
  uint64_t v79 = a12;
  uint64_t v90 = a13;
  char v37 = v96;
  uint64_t result = v36(a2, a12, a13);
  unint64_t v89 = v33;
  uint64_t v87 = v35;
  uint64_t v84 = result;
  if ((v37 & 1) == 0)
  {
    sub_10003A450(a8);
    goto LABEL_8;
  }
  if ((v73 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v72 + 16) > v73)
  {
    uint64_t v39 = a2;
    uint64_t v40 = v72 + 56 * v73;
    uint64_t v41 = *(void *)(v40 + 40);
    if (v41)
    {
      uint64_t v42 = (uint64_t *)(v40 + 32);
      char v43 = *((unsigned char *)v42 + 48);
      uint64_t v45 = v42[4];
      uint64_t v44 = v42[5];
      uint64_t v46 = v42[2];
      uint64_t v47 = v42[3];
      uint64_t v48 = *v42;
      uint64_t v93 = v46;
      uint64_t v94 = v48;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v95 = v47;
      swift_bridgeObjectRetain();
      uint64_t v49 = v41;
      a2 = v39;
      char v37 = v96;
LABEL_9:
      int v96 = a11;
      uint64_t v77 = v30;
      uint64_t v78 = a10;
      v103[0] = v94;
      v103[1] = v49;
      v103[2] = v93;
      v103[3] = v95;
      v103[4] = v45;
      v103[5] = v44;
      char v104 = v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v50 = v97;
      sub_10006746C((uint64_t)_swiftEmptyArrayStorage, 1, (uint64_t)v103, 0, 0, v97, v30, v31, (uint64_t)v99, (v37 & 1) == 0);
      uint64_t v51 = v88;
      uint64_t v52 = v79;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56))(v98, 1, 1, v79);
      uint64_t v53 = v80;
      v81(v80, a2, v52);
      unint64_t v54 = (*(unsigned __int8 *)(v51 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
      uint64_t v55 = v31;
      uint64_t v56 = v54 + v83;
      uint64_t v57 = (char *)swift_allocObject();
      uint64_t v58 = v90;
      *((void *)v57 + 2) = v52;
      *((void *)v57 + 3) = v58;
      *((void *)v57 + 4) = v78;
      *((void *)v57 + 5) = v50;
      uint64_t v59 = v77;
      *((void *)v57 + 6) = v77;
      *((void *)v57 + 7) = v55;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(&v57[v54], v53, v52);
      v57[v56] = v96;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v60 = v98;
      sub_10003DDF0(v97, v59, v55, v86, v89, (uint64_t)v99, (uint64_t)v100, 0, v98, (uint64_t)sub_1000419D8, (uint64_t)v57, 0, v52);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      sub_100041534((uint64_t)v99);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v91 + 8))(v60, v92);
      long long v61 = v100[9];
      long long v62 = v100[10];
      long long v63 = v100[7];
      uint64_t v64 = v85;
      v85[8] = v100[8];
      v64[9] = v61;
      long long v65 = v100[11];
      v64[10] = v62;
      v64[11] = v65;
      long long v66 = v100[5];
      long long v67 = v100[6];
      long long v68 = v100[3];
      v64[4] = v100[4];
      v64[5] = v66;
      v64[6] = v67;
      v64[7] = v63;
      long long v69 = v100[1];
      long long v70 = v100[2];
      *uint64_t v64 = v100[0];
      v64[1] = v69;
      v64[2] = v70;
      v64[3] = v68;
      return result;
    }
    sub_10003A450(a8);
    a2 = v39;
    char v37 = v96;
LABEL_8:
    char v43 = v74;
    uint64_t v44 = v78;
    uint64_t v49 = v75;
    uint64_t v45 = v76;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10003F518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16 = (unsigned char *)(a6 + 16);
  swift_beginAccess();
  uint64_t result = sub_100069248(a7, a8, a9, a10, a1, a5, *(unsigned __int8 *)(a6 + 16), a11, a12, *(void *)(a13 + 16));
  if (!v21)
  {
    char v18 = result;
    uint64_t result = swift_beginAccess();
    *uint64_t v16 = v18 & 1;
  }
  return result;
}

uint64_t sub_10003F5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  _OWORD v8[2] = a3;
  uint64_t v8[3] = a4;
  sub_100038AC4(a2, (uint64_t)(v8 + 4));
  v8[11] = a1;
  type metadata accessor for Array();
  sub_100078D30((uint64_t)sub_100041088, (uint64_t)v8, &v13);
  long long v11 = v13;
  char v12 = v14;
  uint64_t v9 = type metadata accessor for Parsed();
  (*(void (**)(uint64_t *, long long *, uint64_t))(*(void *)(v9 - 8) + 32))(&v15, &v11, v9);
  return v15;
}

uint64_t sub_10003F6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v42 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v40 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v11 = type metadata accessor for EnumeratedSequence();
  uint64_t v47 = *(void *)(v11 - 8);
  uint64_t v48 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v41 = (char *)&v40 - v13;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v40 - v15;
  dispatch thunk of static CaseIterable.allCases.getter();
  uint64_t v51 = a6;
  uint64_t v52 = a7;
  uint64_t v49 = a7;
  uint64_t v17 = sub_100003DD0(&qword_1000C5158);
  uint64_t v19 = sub_10004BD08((void (*)(char *, char *))sub_100041098, (uint64_t)v50, AssociatedTypeWitness, v17, (uint64_t)&type metadata for Never, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Never, v18);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  v20(v16, AssociatedTypeWitness);
  uint64_t v21 = *(void *)(v19 + 16);
  if (v21)
  {
    uint64_t v22 = (uint64_t *)(v19 + 40);
    uint64_t v23 = v21 - 1;
    do
    {
      uint64_t v24 = *v22;
      v22 += 7;
      BOOL v25 = v24 != 0;
      if (v24) {
        BOOL v26 = 1;
      }
      else {
        BOOL v26 = v23 == 0;
      }
      --v23;
    }
    while (!v26);
  }
  else
  {
    BOOL v25 = 0;
  }
  dispatch thunk of static CaseIterable.allCases.getter();
  unint64_t v27 = v41;
  Sequence.enumerated()();
  uint64_t v28 = ((uint64_t (*)(char *, uint64_t))v20)(v16, AssociatedTypeWitness);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v30 = v49;
  *(&v40 - 10) = a6;
  *(&v40 - 9) = v30;
  uint64_t v31 = v43;
  *(&v40 - 8) = v42;
  *(&v40 - 7) = v31;
  *(&v40 - 6) = v44;
  *((unsigned char *)&v40 - 40) = v25;
  uint64_t v32 = v45;
  *(&v40 - 4) = v19;
  *(&v40 - 3) = v32;
  *(&v40 - 2) = v46;
  __chkstk_darwin(v29);
  *(&v40 - 4) = a6;
  *(&v40 - 3) = v33;
  *(&v40 - 2) = (uint64_t)sub_1000410B0;
  *(&v40 - 1) = v34;
  uint64_t v35 = v48;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v38 = sub_10003E16C((void (*)(char *, char *))sub_1000410F0, (uint64_t)(&v40 - 6), v35, (char *)&type metadata for ArgumentDefinition, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v37);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v27, v35);
  swift_bridgeObjectRelease();
  return sub_100083798(v38);
}

uint64_t sub_10003FA88@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v53 = a7;
  unint64_t v54 = a1;
  int v67 = a6;
  uint64_t v74 = a3;
  long long v68 = (uint64_t *)a8;
  uint64_t v16 = sub_100038AC4(a8, (uint64_t)v78);
  uint64_t v69 = v78[2];
  uint64_t v70 = v78[0];
  uint64_t v72 = v78[3];
  uint64_t v73 = v78[4];
  uint64_t v55 = v78[1];
  uint64_t v56 = v78[5];
  int v71 = v79;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = v19;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v58 = v19 + 16;
  uint64_t v59 = v17;
  uint64_t v57 = v20;
  v20(v18, a2, a11);
  uint64_t v21 = String.init<A>(describing:)();
  unint64_t v23 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v61 = sub_100075F04(v21, v23, v74, a4, a5);
  unint64_t v25 = v24;
  uint64_t v63 = a2;
  uint64_t v64 = v26;
  unint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a12 + 24);
  uint64_t v28 = a2;
  char v29 = v67;
  uint64_t v66 = a12;
  uint64_t result = v27(v28, a11, a12);
  unint64_t v65 = v25;
  uint64_t v60 = result;
  if ((v29 & 1) == 0)
  {
    uint64_t v39 = v68;
    goto LABEL_8;
  }
  if ((v54 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v53 + 16) > v54)
  {
    uint64_t v31 = v53 + 56 * v54;
    uint64_t v32 = *(void *)(v31 + 40);
    if (v32)
    {
      uint64_t v33 = (uint64_t *)(v31 + 32);
      int v71 = *((unsigned __int8 *)v33 + 48);
      uint64_t v34 = v33[5];
      uint64_t v73 = v33[4];
      uint64_t v35 = v33[2];
      uint64_t v36 = v33[3];
      uint64_t v37 = *v33;
      uint64_t v69 = v35;
      uint64_t v70 = v37;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v72 = v36;
      swift_bridgeObjectRetain();
      uint64_t v38 = v32;
LABEL_9:
      v80[0] = v70;
      v80[1] = v38;
      v80[2] = v69;
      v80[3] = v72;
      v80[4] = v73;
      v80[5] = v34;
      char v81 = v71;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v40 = v74;
      sub_10006746C((uint64_t)_swiftEmptyArrayStorage, 1, (uint64_t)v80, 0, 0, v74, a4, a5, (uint64_t)v76, (v29 & 1) == 0);
      uint64_t v75 = a10;
      v57(v18, v63, a11);
      uint64_t v41 = v62;
      unint64_t v42 = (*(unsigned __int8 *)(v62 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
      uint64_t v43 = (char *)swift_allocObject();
      uint64_t v44 = v66;
      *((void *)v43 + 2) = a11;
      *((void *)v43 + 3) = v44;
      *((void *)v43 + 4) = v40;
      *((void *)v43 + 5) = a4;
      *((void *)v43 + 6) = a5;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v43[v42], v18, a11);
      uint64_t v45 = type metadata accessor for Array();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10003DDF0(v40, a4, a5, v61, v65, (uint64_t)v76, (uint64_t)v77, 0, (uint64_t)&v75, (uint64_t)sub_10004143C, (uint64_t)v43, 0, v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100041534((uint64_t)v76);
      uint64_t result = swift_release();
      long long v46 = v77[9];
      a9[8] = v77[8];
      a9[9] = v46;
      long long v47 = v77[11];
      a9[10] = v77[10];
      a9[11] = v47;
      long long v48 = v77[5];
      a9[4] = v77[4];
      a9[5] = v48;
      long long v49 = v77[7];
      a9[6] = v77[6];
      a9[7] = v49;
      long long v50 = v77[1];
      *a9 = v77[0];
      a9[1] = v50;
      long long v51 = v77[3];
      a9[2] = v77[2];
      a9[3] = v51;
      return result;
    }
    uint64_t v39 = v68;
LABEL_8:
    sub_10003A450(v39);
    uint64_t v38 = v55;
    uint64_t v34 = v56;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10003FED4(uint64_t a1)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Array();
  return Array.append(_:)();
}

uint64_t Flag.init<A>(wrappedValue:help:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003F5EC(a1, a2, a3, a4);
}

uint64_t Flag.init<A>(help:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003F5EC(0, a1, a2, a3);
}

uint64_t sub_10003FFE4(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100040020(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100040060()
{
  unint64_t result = qword_1000C52C0;
  if (!qword_1000C52C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C52C0);
  }
  return result;
}

unint64_t sub_1000400B8()
{
  unint64_t result = qword_1000C52C8[0];
  if (!qword_1000C52C8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1000C52C8);
  }
  return result;
}

void *sub_10004010C(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 2;
          unsigned int v9 = v12 + 2;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 != 1)
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 0;
      return v3;
    }
    uint64_t v14 = *((void *)a2 + 1);
    *uint64_t v3 = *(void *)a2;
    v3[1] = v14;
    *((unsigned char *)v3 + v5) = 1;
  }
  swift_retain();
  return v3;
}

uint64_t sub_100040284(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x10) {
    unint64_t v2 = 16;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

void *sub_100040384(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    uint64_t v10 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v10;
    swift_retain();
    char v11 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v11 = 0;
  }
  *((unsigned char *)a1 + v4) = v11;
  return a1;
}

unsigned __int8 *sub_1000404C0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      uint64_t v18 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v18;
      a1[v7] = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  return a1;
}

_OWORD *sub_1000406DC(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(_OWORD *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_100040814(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_100040A2C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 16;
  if (*(void *)(v3 + 64) > 0x10uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void sub_100040B60(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x100040D28);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

ValueMetadata *type metadata accessor for FlagInversion()
{
  return &type metadata for FlagInversion;
}

ValueMetadata *type metadata accessor for FlagExclusivity()
{
  return &type metadata for FlagExclusivity;
}

unsigned char *_s14ArgumentParser15FlagExclusivityV14RepresentationOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100040E48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FlagExclusivity.Representation()
{
  return &type metadata for FlagExclusivity.Representation;
}

unsigned char *_s14ArgumentParser13FlagInversionV14RepresentationOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100040F4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FlagInversion.Representation()
{
  return &type metadata for FlagInversion.Representation;
}

unint64_t sub_100040F88()
{
  unint64_t result = qword_1000C5350;
  if (!qword_1000C5350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5350);
  }
  return result;
}

unint64_t sub_100040FE0()
{
  unint64_t result = qword_1000C5358;
  if (!qword_1000C5358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5358);
  }
  return result;
}

uint64_t sub_100041034()
{
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100041088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003F6E8(a1, a2, a3, (uint64_t)(v3 + 4), v3[11], v3[2], v3[3]);
}

uint64_t sub_100041098@<X0>(uint64_t a1@<X8>)
{
  return sub_100041C38(a1);
}

uint64_t sub_1000410B0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_10003FA88(a1, a2, *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(unsigned __int8 *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72), a3, *(void *)(v3 + 80), *(void *)(v3 + 16), *(void *)(v3 + 24));
}

double sub_1000410F0@<D0>(char *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100041CEC(a1, a2);
}

uint64_t sub_100041108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v21 = a4;
  uint64_t v22 = a6;
  uint64_t v23 = a2;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v21 - v14;
  uint64_t v16 = *(void *)(a7 - 8);
  __chkstk_darwin(v13);
  char v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a7) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, a7);
  v27[3] = a7;
  uint64_t v20 = sub_10000A954(v27);
  (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 16))(v20, v18, a7);
  sub_100041854((uint64_t)v27, (uint64_t)v25);
  v24[0] = v21;
  v24[1] = a5;
  void v24[2] = v22;
  void v25[4] = a1;
  char v26 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10007A218(v24);
  sub_1000418BC((uint64_t)v24);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a7);
  return sub_100041910((uint64_t)v27);
}

uint64_t sub_100041370()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004143C(uint64_t a1)
{
  uint64_t v3 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v5 = (void *)v1[6];
  uint64_t v6 = Array.init()();
  sub_100079914(v3, v4, v5, a1, v6, (void (*)(uint64_t *))sub_100041970);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100041534(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000415BC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v4, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v4, v1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 24, v3 | 7);
}

uint64_t sub_100041710(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100041108(a1, a2, v2 + v7, *(void *)(v2 + v8), *(void *)(v2 + v8 + 8), *(void *)(v2 + v8 + 16), v5);
}

uint64_t sub_1000417CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100041854(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003DD0(&qword_1000C5360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000418BC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100041910(uint64_t a1)
{
  uint64_t v2 = sub_100003DD0(&qword_1000C5360);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100041970(uint64_t a1)
{
  return sub_10003FED4(a1);
}

uint64_t sub_10004197C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10004198C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_10003F004(a1, a2, *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(unsigned __int8 *)(v3 + 56), *(void *)(v3 + 64), *(uint64_t **)(v3 + 72), a3, *(void *)(v3 + 80), *(unsigned char *)(v3 + 88), *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1000419D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_100041E7C(a1, a2, a3, a4, a5);
}

uint64_t sub_1000419F0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v4;
  uint64_t v7 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v4, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v1);
  }
  if (*(void *)(v0 + v5 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, v5 + 50, v3 | 7);
}

uint64_t sub_100041B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v9 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v3 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v12 = *(unsigned __int8 *)(v11 + 49);

  return sub_10003CDFC(a1, a2, a3, v3 + v10, v11, v12, v7, v8);
}

uint64_t sub_100041C10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10003D300(a1, v2[4], v2[5], v2[6], v2[2], v2[3], a2);
}

uint64_t sub_100041C38@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)(v1 + 24) + 32))(v4);
  return sub_100038AC4((uint64_t)v4, a1);
}

uint64_t sub_100041C9C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_10003D50C(a1, a2, *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(uint64_t **)(v3 + 64), *(unsigned __int8 *)(v3 + 72), a3, *(void *)(v3 + 80), *(void *)(v3 + 88), *(void *)(v3 + 96), *(uint64_t **)(v3 + 104), *(unsigned char *)(v3 + 112), *(void *)(v3 + 16), *(void *)(v3 + 24));
}

double sub_100041CEC@<D0>(char *a1@<X0>, _OWORD *a2@<X8>)
{
  void (*v5)(_OWORD *__return_ptr, uint64_t, char *);
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  double result;
  long long v14;
  _OWORD v15[2];
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;

  unint64_t v5 = *(void (**)(_OWORD *__return_ptr, uint64_t, char *))(v2 + 32);
  uint64_t v6 = *(void *)a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5(v15, v6, &a1[*(int *)(TupleTypeMetadata2 + 48)]);
  uint64_t v8 = v23;
  a2[8] = v22;
  a2[9] = v8;
  uint64_t v9 = v25;
  a2[10] = v24;
  a2[11] = v9;
  unint64_t v10 = v19;
  a2[4] = v18;
  a2[5] = v10;
  uint64_t v11 = v21;
  a2[6] = v20;
  a2[7] = v11;
  int v12 = v15[1];
  *a2 = v15[0];
  a2[1] = v12;
  unint64_t result = *(double *)&v16;
  uint64_t v14 = v17;
  a2[2] = v16;
  a2[3] = v14;
  return result;
}

uint64_t sub_100041DA4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100041E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)(*(void *)(v5 + 16) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v5 + 16) - 8) + 80);
  return sub_10003F518(a1, a2, a3, a4, a5, *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(void **)(v5 + 56), v5 + v6, *(unsigned char *)(v5 + v6 + *(void *)(*(void *)(*(void *)(v5 + 16) - 8) + 64)), *(void *)(v5 + 16), *(void *)(v5 + 24));
}

uint64_t sub_100041F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10006AC34(a1, a2, a3, a4, a5, *(void *)(v5 + 16), *(void *)(v5 + 24), *(void **)(v5 + 32));
}

uint64_t sub_100041F34(uint64_t a1, uint64_t a2)
{
  return sub_10006AE34(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_100041F58()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100041F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10006A94C(a1, a2, a3, a4, a5, v5[2], v5[3], v5[4]);
}

uint64_t sub_100041FBC(uint64_t a1, uint64_t a2)
{
  return sub_10006AA14(a1, a2, *(unsigned char *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_100041FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000420CC(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, char))sub_10006AA2C);
}

uint64_t sub_100042014()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100042058()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_1000420A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000420CC(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, char))sub_10006AB30);
}

uint64_t sub_1000420CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, char))
{
  char v8 = *(unsigned char *)(v6 + 48);
  return a6(a1, a2, a3, a4, a5, *(void *)(v6 + 16), *(void *)(v6 + 24), *(void *)(v6 + 32), *(void *)(v6 + 40), v8);
}

uint64_t static NameSpecification.long.getter()
{
  uint64_t v0 = sub_100043564((uint64_t)&off_1000BC210);
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  return v0;
}

void sub_100042184(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (!(a4 >> 6))
  {
    Swift::UInt8 v4 = a4 & 1;
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
    goto LABEL_5;
  }
  if (a4 >> 6 == 1)
  {
    Swift::UInt8 v4 = a4 & 1;
    Hasher._combine(_:)(3uLL);
    Character.hash(into:)();
LABEL_5:
    Hasher._combine(_:)(v4);
    return;
  }
  if (a3 | a2 || a4 != 128) {
    Swift::UInt v5 = 2;
  }
  else {
    Swift::UInt v5 = 0;
  }
  Hasher._combine(_:)(v5);
}

Swift::Int sub_100042230(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  Hasher.init(_seed:)();
  if (!(a3 >> 6))
  {
    Swift::UInt8 v6 = a3 & 1;
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
    goto LABEL_5;
  }
  if (a3 >> 6 == 1)
  {
    Swift::UInt8 v6 = a3 & 1;
    Hasher._combine(_:)(3uLL);
    Character.hash(into:)();
LABEL_5:
    Hasher._combine(_:)(v6);
    return Hasher._finalize()();
  }
  if (a2 | a1 || a3 != 128) {
    Swift::UInt v7 = 2;
  }
  else {
    Swift::UInt v7 = 0;
  }
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

Swift::Int sub_10004230C()
{
  return sub_100042230(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

void sub_100042318(uint64_t a1)
{
  sub_100042184(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

Swift::Int sub_100042324()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  unsigned int v3 = *((unsigned __int8 *)v0 + 16);
  Hasher.init(_seed:)();
  if (!(v3 >> 6))
  {
    Swift::UInt8 v4 = v3 & 1;
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
    goto LABEL_5;
  }
  if (v3 >> 6 == 1)
  {
    Swift::UInt8 v4 = v3 & 1;
    Hasher._combine(_:)(3uLL);
    Character.hash(into:)();
LABEL_5:
    Hasher._combine(_:)(v4);
    return Hasher._finalize()();
  }
  if (v2 | v1 || v3 != 128) {
    Swift::UInt v5 = 2;
  }
  else {
    Swift::UInt v5 = 0;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t sub_1000423F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000427E0(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_100043724);
}

uint64_t static NameSpecification.Element.long.getter()
{
  return 0;
}

uint64_t static NameSpecification.Element.customLong(_:withSingleDash:)(uint64_t a1)
{
  return a1;
}

uint64_t static NameSpecification.Element.short.getter()
{
  return 1;
}

uint64_t static NameSpecification.Element.customShort(_:allowingJoined:)(uint64_t a1)
{
  return a1;
}

void NameSpecification.Element.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 >> 6)
  {
    if (a4 >> 6 == 1)
    {
      Hasher._combine(_:)(3uLL);
      Character.hash(into:)();
      Hasher._combine(_:)(a4 & 1);
    }
    else
    {
      if (a3 | a2 || a4 != 128) {
        Swift::UInt v7 = 2;
      }
      else {
        Swift::UInt v7 = 0;
      }
      Hasher._combine(_:)(v7);
    }
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(a4 & 1);
    sub_100043714(a2, a3, a4);
  }
}

Swift::Int NameSpecification.Element.hashValue.getter(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  Hasher.init(_seed:)();
  if (a3 >> 6)
  {
    if (a3 >> 6 == 1)
    {
      Hasher._combine(_:)(3uLL);
      Character.hash(into:)();
      Hasher._combine(_:)(a3 & 1);
    }
    else
    {
      if (a2 | a1 || a3 != 128) {
        Swift::UInt v6 = 2;
      }
      else {
        Swift::UInt v6 = 0;
      }
      Hasher._combine(_:)(v6);
    }
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(a3 & 1);
    sub_100043714(a1, a2, a3);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1000426B4()
{
  return NameSpecification.Element.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

void sub_1000426C0(uint64_t a1)
{
  NameSpecification.Element.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

Swift::Int sub_1000426CC()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v3 >> 6)
  {
    if (v3 >> 6 == 1)
    {
      Hasher._combine(_:)(3uLL);
      Character.hash(into:)();
      Hasher._combine(_:)(v3 & 1);
    }
    else
    {
      if (v2 | v1 || v3 != 128) {
        Swift::UInt v4 = 2;
      }
      else {
        Swift::UInt v4 = 0;
      }
      Hasher._combine(_:)(v4);
    }
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(v3 & 1);
    sub_100043714(v1, v2, v3);
  }
  return Hasher._finalize()();
}

uint64_t sub_1000427C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000427E0(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))_s14ArgumentParser17NameSpecificationV7ElementV23__derived_struct_equalsySbAE_AEtFZ_0);
}

uint64_t sub_1000427E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t NameSpecification.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000438F8();
  uint64_t v7 = sub_100095D98(a2, a3, v6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v7;
}

uint64_t NameSpecification.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = sub_100043564(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1000428E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_100043564(a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t static NameSpecification.customLong(_:withSingleDash:)(uint64_t a1, uint64_t a2, char a3)
{
  sub_100003DD0(&qword_1000C5370);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = a1;
  *(_OWORD *)(inited + 16) = xmmword_1000A2660;
  *(void *)(inited + 40) = a2;
  *(unsigned char *)(inited + 48) = a3;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_100043564(inited);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  return v7;
}

uint64_t static NameSpecification.short.getter()
{
  uint64_t v0 = sub_100043564((uint64_t)&off_1000BC248);
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  return v0;
}

uint64_t static NameSpecification.customShort(_:allowingJoined:)(uint64_t a1, uint64_t a2, char a3)
{
  sub_100003DD0(&qword_1000C5370);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000A2660;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  *(unsigned char *)(inited + 48) = a3 | 0x40;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_100043564(inited);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  return v7;
}

uint64_t static NameSpecification.shortAndLong.getter()
{
  uint64_t v0 = sub_100043564((uint64_t)&off_1000BC280);
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  return v0;
}

char *sub_100042BC0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a4 + 16);
  if (v7)
  {
    uint64_t v10 = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v10 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v44 = v10;
    swift_bridgeObjectRetain_n();
    uint64_t v11 = (unsigned __int8 *)(a4 + 48);
    int v12 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v15 = *((void *)v11 - 2);
      unint64_t v14 = *((void *)v11 - 1);
      unsigned int v16 = *v11;
      unsigned int v17 = v16 >> 6;
      if (!(v16 >> 6))
      {
        swift_bridgeObjectRetain();
        unint64_t v19 = sub_100043220(a1, a2, v15, v14);
        unint64_t v21 = v20;
        sub_100043714(v15, v14, v16);
        char v18 = (_BYTE)v16 << 7;
        uint64_t v15 = v19;
        unint64_t v14 = v21;
        goto LABEL_35;
      }
      if (v17 == 1)
      {
        if (a3) {
          goto LABEL_10;
        }
      }
      else
      {
        if (!(v14 | v15) && v16 == 128)
        {
          if (v44)
          {
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRetain();
            Swift::String v22 = Character.uppercased()();
            swift_bridgeObjectRelease();
            String.append(_:)(v22);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            sub_100034DE0(1uLL, a5, a6);
            swift_bridgeObjectRelease();
            v23._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
            String.append(_:)(v23);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v25 = a1;
            unint64_t v24 = a2;
          }
          else
          {
            unint64_t v24 = a2;
            swift_bridgeObjectRetain();
            uint64_t v25 = a1;
          }
          if ((v24 & 0x2000000000000000) != 0) {
            uint64_t v27 = HIBYTE(v24) & 0xF;
          }
          else {
            uint64_t v27 = v25 & 0xFFFFFFFFFFFFLL;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v27)
          {
            swift_bridgeObjectRetain();
            uint64_t v28 = String.subscript.getter();
            uint64_t v30 = v29;
            swift_bridgeObjectRelease();
            if (v28 == 95 && v30 == 0xE100000000000000)
            {
              swift_bridgeObjectRelease();
              goto LABEL_29;
            }
            char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v31)
            {
LABEL_29:
              sub_100034DE0(1uLL, v25, v24);
              swift_bridgeObjectRelease();
              uint64_t v25 = static String._fromSubstring(_:)();
              unint64_t v24 = v32;
              swift_bridgeObjectRelease();
            }
          }
          swift_bridgeObjectRetain();
          uint64_t v33 = (char *)a7;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v33 = sub_10005FA90(0, *(void *)(a7 + 16) + 1, 1, (char *)a7);
          }
          unint64_t v35 = *((void *)v33 + 2);
          unint64_t v34 = *((void *)v33 + 3);
          if (v35 >= v34 >> 1) {
            uint64_t v33 = sub_10005FA90((char *)(v34 > 1), v35 + 1, 1, v33);
          }
          *((void *)v33 + 2) = v35 + 1;
          uint64_t v36 = &v33[16 * v35];
          *((void *)v36 + 4) = a5;
          *((void *)v36 + 5) = a6;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          uint64_t v15 = sub_100055A44(45, 0xE100000000000000, v25, v24);
          unint64_t v14 = v37;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          char v18 = 0;
LABEL_35:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int v12 = sub_10005FB94(0, *((void *)v12 + 2) + 1, 1, v12);
          }
          unint64_t v39 = *((void *)v12 + 2);
          unint64_t v38 = *((void *)v12 + 3);
          if (v39 >= v38 >> 1) {
            int v12 = sub_10005FB94((char *)(v38 > 1), v39 + 1, 1, v12);
          }
          *((void *)v12 + 2) = v39 + 1;
          uint64_t v13 = &v12[24 * v39];
          *((void *)v13 + 4) = v15;
          *((void *)v13 + 5) = v14;
          v13[48] = v18;
          goto LABEL_6;
        }
        if (a3)
        {
          if (v17 == 2)
          {
            if (!v44)
            {
              _StringGuts.grow(_:)(54);
              v41._uint64_t countAndFlagsBits = 0x272079654BLL;
              v41._object = (void *)0xE500000000000000;
              String.append(_:)(v41);
              swift_bridgeObjectRetain();
              v42._uint64_t countAndFlagsBits = a5;
              v42._object = (void *)a6;
              String.append(_:)(v42);
              swift_bridgeObjectRelease();
              v43._object = (void *)0x80000001000A9670;
              v43._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
              String.append(_:)(v43);
              uint64_t result = (char *)_assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            swift_bridgeObjectRetain();
            uint64_t v15 = String.subscript.getter();
            unint64_t v14 = v26;
            swift_bridgeObjectRelease();
            char v18 = 64;
          }
          else
          {
LABEL_10:
            char v18 = v16 & 1 | 0x40;
            swift_bridgeObjectRetain();
          }
          goto LABEL_35;
        }
      }
LABEL_6:
      v11 += 24;
      if (!--v7)
      {
        swift_bridgeObjectRelease_n();
        return v12;
      }
    }
  }
  return (char *)_swiftEmptyArrayStorage;
}

uint64_t sub_1000430F8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    String.subscript.getter();
    swift_bridgeObjectRetain();
    Swift::String v8 = Character.uppercased()();
    swift_bridgeObjectRelease();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_100034DE0(1uLL, a3, a4);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t sub_100043220(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = a3;
  unint64_t v34 = a4;
  uint64_t v29 = 45;
  unint64_t v30 = 0xE100000000000000;
  sub_1000319D0();
  if (StringProtocol.contains<A>(_:)())
  {
    uint64_t v29 = a1;
    unint64_t v30 = a2;
    swift_bridgeObjectRetain();
    uint64_t v12 = 45;
LABEL_5:
    unint64_t v13 = 0xE100000000000000;
    String.append(_:)(*(Swift::String *)&v12);
    uint64_t v14 = a3;
    unint64_t v15 = a4;
LABEL_26:
    String.append(_:)(*(Swift::String *)&v14);
    return v29;
  }
  uint64_t v29 = 95;
  unint64_t v30 = 0xE100000000000000;
  if (StringProtocol.contains<A>(_:)())
  {
    uint64_t v29 = a1;
    unint64_t v30 = a2;
    swift_bridgeObjectRetain();
    uint64_t v12 = 95;
    goto LABEL_5;
  }
  sub_10005868C(a3, a4);
  if (!v16 || (char v17 = Character.isLowercase.getter(), swift_bridgeObjectRelease(), (v17 & 1) == 0))
  {
LABEL_25:
    uint64_t v29 = a1;
    unint64_t v30 = a2;
    swift_bridgeObjectRetain();
    v28._unint64_t countAndFlagsBits = 45;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    uint64_t v14 = v33;
    unint64_t v15 = v34;
    goto LABEL_26;
  }
  uint64_t v18 = HIBYTE(a4) & 0xF;
  uint64_t v29 = a3;
  unint64_t v30 = a4;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v18 = a3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v31 = 0;
  uint64_t v32 = v18;
  swift_bridgeObjectRetain_n();
  Swift::String_optional v19 = String.Iterator.next()();
  if (!v19.value._object)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  unint64_t countAndFlagsBits = v19.value._countAndFlagsBits;
  object = v19.value._object;
  Swift::String v22 = (void (**)(char *, uint64_t))(v9 + 8);
  while (1)
  {
    if ((Character._isSingleScalar.getter() & 1) == 0) {
      goto LABEL_15;
    }
    unint64_t result = sub_1000580B8(countAndFlagsBits, (unint64_t)object);
    if ((result & 0x100000000) != 0) {
      break;
    }
    Unicode.Scalar.properties.getter();
    char v24 = Unicode.Scalar.Properties.isUppercase.getter();
    (*v22)(v11, v8);
    if (v24) {
      goto LABEL_28;
    }
LABEL_15:
    if (Character._isUppercased.getter())
    {
      if (Character._isSingleScalar.getter())
      {
        unint64_t result = sub_1000580B8(countAndFlagsBits, (unint64_t)object);
        if ((result & 0x100000000) != 0) {
          goto LABEL_31;
        }
        Unicode.Scalar.properties.getter();
        char v25 = Unicode.Scalar.Properties.isCased.getter();
        (*v22)(v11, v8);
        if (v25) {
          goto LABEL_28;
        }
      }
      if ((Character._isUppercased.getter() & 1) == 0)
      {
LABEL_28:
        swift_bridgeObjectRelease();
LABEL_29:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return sub_1000430F8(a1, a2, v33, v34);
      }
      char v26 = Character._isLowercased.getter();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        goto LABEL_29;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    Swift::String_optional v27 = String.Iterator.next()();
    unint64_t countAndFlagsBits = v27.value._countAndFlagsBits;
    object = v27.value._object;
    if (!v27.value._object) {
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100043564(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v2 = 0;
  uint64_t v3 = result + 48;
  uint64_t v4 = -(uint64_t)v1;
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v16 = result + 48;
  unint64_t v17 = *(void *)(result + 16);
  do
  {
    uint64_t v18 = v5;
    if (v2 <= v1) {
      unint64_t v6 = v1;
    }
    else {
      unint64_t v6 = v2;
    }
    uint64_t v7 = -(uint64_t)v6;
    for (uint64_t i = (char *)(v3 + 24 * v2++); ; i += 24)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v9 = *((void *)i - 2);
      uint64_t v10 = *((void *)i - 1);
      int v11 = *i;
      sub_1000439B8(v9, v10, *i);
      sub_1000439B8(v9, v10, v11);
      char v12 = sub_100061300((uint64_t)v19, v9, v10, v11);
      sub_100043714(v19[0], v19[1], v20);
      if (v12) {
        break;
      }
      unint64_t result = sub_100043714(v9, v10, v11);
      ++v2;
      if (v4 + v2 == 1) {
        return (uint64_t)v18;
      }
    }
    uint64_t v5 = v18;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v21 = v18;
    if ((result & 1) == 0)
    {
      unint64_t result = (uint64_t)sub_100056F68(0, v18[2] + 1, 1);
      uint64_t v5 = v21;
    }
    unint64_t v14 = v5[2];
    unint64_t v13 = v5[3];
    if (v14 >= v13 >> 1)
    {
      unint64_t result = (uint64_t)sub_100056F68((char *)(v13 > 1), v14 + 1, 1);
      uint64_t v5 = v21;
    }
    uint64_t v5[2] = v14 + 1;
    unint64_t v15 = &v5[3 * v14];
    v15[4] = v9;
    v15[5] = v10;
    *((unsigned char *)v15 + 48) = v11;
    uint64_t v3 = v16;
    unint64_t v1 = v17;
  }
  while (v4 + v2);
  return (uint64_t)v5;
}

uint64_t sub_100043714(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0x80) == 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100043724(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (!(a3 >> 6))
  {
    if (a6 >= 0x40u)
    {
LABEL_21:
      char v9 = 0;
      return v9 & 1;
    }
    goto LABEL_6;
  }
  if (a3 >> 6 == 1)
  {
    if ((a6 & 0xC0) != 0x40) {
      goto LABEL_21;
    }
LABEL_6:
    if (a1 == a4 && a2 == a5 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), v9 = 0, (v8 & 1) != 0)) {
      char v9 = ((a3 & 1) == 0) ^ a6;
    }
    return v9 & 1;
  }
  if (a2 | a1 || a3 != 128)
  {
    if ((a6 & 0xC0) != 0x80 || a4 != 1 || a5 || a6 != 128) {
      goto LABEL_21;
    }
  }
  else if ((a6 & 0xC0) != 0x80 || a5 | a4 || a6 != 128)
  {
    goto LABEL_21;
  }
  char v9 = 1;
  return v9 & 1;
}

BOOL _s14ArgumentParser17NameSpecificationV7ElementV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  int v6 = a3;
  int v7 = a6;
  if (a3 >> 6)
  {
    if (a3 >> 6 != 1)
    {
      if (a2 | a1 || a3 != 128)
      {
        if ((a6 & 0xC0) != 0x80 || a4 != 1 || a5) {
          return 0;
        }
      }
      else if ((a6 & 0xC0) != 0x80 || a5 | a4)
      {
        return 0;
      }
      return a6 == 128;
    }
    if ((a6 & 0xC0) != 0x40) {
      return 0;
    }
    if (a1 == a4 && a2 == a5) {
      return (a3 & 1) == (a6 & 1);
    }
  }
  else
  {
    if (a6 >= 0x40u) {
      return 0;
    }
    if (a1 == a4 && a2 == a5) {
      return ((v6 ^ v7) & 1) == 0;
    }
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    return ((v6 ^ v7) & 1) == 0;
  }
  return 0;
}

unint64_t sub_1000438F8()
{
  unint64_t result = qword_1000C5368;
  if (!qword_1000C5368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5368);
  }
  return result;
}

unint64_t sub_100043950()
{
  unint64_t result = qword_1000C5378;
  if (!qword_1000C5378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5378);
  }
  return result;
}

ValueMetadata *type metadata accessor for NameSpecification()
{
  return &type metadata for NameSpecification;
}

uint64_t sub_1000439B8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0x80) == 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

ValueMetadata *type metadata accessor for NameSpecification.Element()
{
  return &type metadata for NameSpecification.Element;
}

uint64_t destroy for NameSpecification.Element.Representation(uint64_t a1)
{
  return sub_100043714(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s14ArgumentParser17NameSpecificationV7ElementV14RepresentationOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000439B8(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s14ArgumentParser17NameSpecificationV7ElementV14RepresentationOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000439B8(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100043714(v6, v7, v8);
  return a1;
}

uint64_t _s14ArgumentParser17NameSpecificationV7ElementV14RepresentationOwta_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100043714(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Name(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 16) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Name(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 126;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_100043B8C(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_100043BAC(uint64_t result)
{
  *(unsigned char *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t sub_100043BBC(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    *(unsigned char *)(result + 16) = *(unsigned char *)(result + 16) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for NameSpecification.Element.Representation()
{
  return &type metadata for NameSpecification.Element.Representation;
}

unint64_t sub_100043BFC()
{
  unint64_t result = qword_1000C5380;
  if (!qword_1000C5380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5380);
  }
  return result;
}

uint64_t Option.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Option();
  sub_1000356C0(a1, (uint64_t)v7);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100078624((uint64_t)v7, v4, WitnessTable, a2);
  return sub_100005128(a1);
}

uint64_t type metadata accessor for Option()
{
  return sub_10003A4F0();
}

void Option.init()()
{
}

uint64_t Option.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Parsed();
  __chkstk_darwin(v6);
  char v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v11 - v7, v3, v6);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a2, v8, v5);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*Option.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  _OWORD v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  Option.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_100035A80;
}

uint64_t sub_100043FA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Option.init(from:)(a1, a2);
}

unint64_t Option.description.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = type metadata accessor for Parsed();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v16 - v12, v2, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return 0xD000000000000014;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v13, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    uint64_t v14 = String.init<A>(describing:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  return v14;
}

uint64_t static ArrayParsingStrategy.upToNextOption.getter()
{
  return 3;
}

uint64_t Option<A>.init(wrappedValue:name:parsing:help:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  int v29 = a7;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v24 = a4;
  int v25 = a3;
  uint64_t v26 = a1;
  uint64_t v30 = a9;
  uint64_t v12 = type metadata accessor for Parsed();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (uint64_t *)((char *)&v23 - v14);
  uint64_t v16 = *(void *)(a8 - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 90) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (*(void *)(v16 + 64) + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a8;
  *(void *)(v19 + 24) = a10;
  *(void *)(v19 + 32) = a2;
  sub_100038AC4(v24, v19 + 40);
  *(unsigned char *)(v19 + 89) = v25;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32))(v19 + v17, v26, a8);
  unint64_t v20 = v19 + v18;
  uint64_t v21 = v28;
  *(void *)unint64_t v20 = v27;
  *(void *)(v20 + 8) = v21;
  *(unsigned char *)(v20 + 16) = v29;
  sub_100078D30((uint64_t)sub_100047484, v19, v15);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v13 + 32))(v30, v15, v12);
}

uint64_t sub_1000443D4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v43 = a8;
  uint64_t v40 = a7;
  int v45 = a6;
  Swift::String v42 = a5;
  uint64_t v39 = a1;
  uint64_t v41 = a9;
  uint64_t v44 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v16 = (char *)&v38 - v15;
  uint64_t v17 = type metadata accessor for Bare();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v19 = sub_100089B50(v18, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v16, v40, a11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v16, 0, 1, a11);
  uint64_t v21 = v42;
  sub_10003A450(v42);
  uint64_t v22 = v43;
  uint64_t v23 = v41;
  sub_10003A4DC(v43, v41, a10);
  uint64_t WitnessTable = swift_getWitnessTable();
  double v25 = sub_100067C8C(v39, a2, a3, (unint64_t)v19, (uint64_t)v21, v45, (uint64_t)v16, v46, v22, v23, a10, v17, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v14 + 8))(v16, v44, v25);
  sub_100003DD0(&qword_1000C5230);
  uint64_t v26 = (_OWORD *)swift_allocObject();
  long long v27 = v46[8];
  long long v28 = v46[10];
  long long v29 = v46[11];
  v26[11] = v46[9];
  v26[12] = v28;
  v26[13] = v29;
  long long v30 = v46[4];
  long long v31 = v46[6];
  long long v32 = v46[7];
  v26[7] = v46[5];
  v26[8] = v31;
  v26[9] = v32;
  v26[10] = v27;
  long long v33 = v46[0];
  long long v34 = v46[1];
  v26[1] = xmmword_1000A2660;
  v26[2] = v33;
  long long v35 = v46[2];
  long long v36 = v46[3];
  v26[3] = v34;
  v26[4] = v35;
  v26[5] = v36;
  v26[6] = v30;
  return sub_100083798((uint64_t)v26);
}

uint64_t Option<A>.init(wrappedValue:name:parsing:completion:help:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v22 = a7;
  int v23 = a6;
  uint64_t v17 = *(void *)(a8 - 8);
  __chkstk_darwin(a1);
  uint64_t v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a1, v20);
  Option<A>.init(wrappedValue:name:parsing:help:completion:)((uint64_t)v19, a2, a3, v22, a4, a5, v23, a8, a9, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a8);
}

uint64_t Option<A>.init(name:parsing:help:completion:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v24 = a6;
  uint64_t v23 = a5;
  uint64_t v25 = a9;
  uint64_t v15 = type metadata accessor for Parsed();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v22 - v17);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a7;
  *(void *)(v19 + 24) = a8;
  *(void *)(v19 + 32) = a1;
  sub_100038AC4(a3, v19 + 40);
  *(unsigned char *)(v19 + 89) = a2;
  uint64_t v20 = v23;
  *(void *)(v19 + 96) = a4;
  *(void *)(v19 + 104) = v20;
  *(unsigned char *)(v19 + 112) = v24;
  sub_100078D30((uint64_t)sub_10004752C, v19, v18);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v16 + 32))(v25, v18, v15);
}

uint64_t sub_100044970(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v40 = a7;
  int v42 = a6;
  uint64_t v39 = a5;
  uint64_t v37 = a1;
  int v38 = a9;
  uint64_t v41 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v17 = type metadata accessor for Bare();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v19 = sub_100089B50(v18, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 56))(v16, 1, 1, a10);
  uint64_t v20 = v39;
  sub_10003A450(v39);
  uint64_t v21 = v40;
  unsigned __int8 v22 = v38;
  sub_10003A4DC(v40, a8, v38);
  uint64_t WitnessTable = swift_getWitnessTable();
  double v24 = sub_100067C8C(v37, a2, a3, (unint64_t)v19, (uint64_t)v20, v42, (uint64_t)v16, v43, v21, a8, v22, v17, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v14 + 8))(v16, v41, v24);
  sub_100003DD0(&qword_1000C5230);
  uint64_t v25 = (_OWORD *)swift_allocObject();
  long long v26 = v43[8];
  long long v27 = v43[10];
  long long v28 = v43[11];
  v25[11] = v43[9];
  v25[12] = v27;
  v25[13] = v28;
  long long v29 = v43[4];
  long long v30 = v43[6];
  long long v31 = v43[7];
  v25[7] = v43[5];
  v25[8] = v30;
  v25[9] = v31;
  v25[10] = v26;
  long long v32 = v43[0];
  long long v33 = v43[1];
  v25[1] = xmmword_1000A2660;
  v25[2] = v32;
  long long v34 = v43[2];
  long long v35 = v43[3];
  v25[3] = v33;
  void v25[4] = v34;
  void v25[5] = v35;
  v25[6] = v29;
  return sub_100083798((uint64_t)v25);
}

uint64_t Option.init(wrappedValue:name:parsing:help:completion:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v28 = a8;
  uint64_t v29 = a1;
  int v32 = a7;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  int v27 = a3;
  uint64_t v33 = a9;
  uint64_t v26 = a10;
  uint64_t v13 = type metadata accessor for Parsed();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v26 - v15);
  uint64_t v17 = *(void *)(a11 - 8);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v19 = (*(void *)(v17 + 64) + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a11;
  *(void *)(v20 + 24) = a2;
  sub_100038AC4(a4, v20 + 32);
  *(unsigned char *)(v20 + 81) = v27;
  uint64_t v21 = v29;
  uint64_t v22 = v26;
  *(void *)(v20 + 88) = v28;
  *(void *)(v20 + 96) = v22;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))(v20 + v18, v21, a11);
  unint64_t v23 = v20 + v19;
  uint64_t v24 = v31;
  *(void *)unint64_t v23 = v30;
  *(void *)(v23 + 8) = v24;
  *(unsigned char *)(v23 + 16) = v32;
  sub_100078D30((uint64_t)sub_100047644, v20, v16);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v14 + 32))(v33, v16, v13);
}

uint64_t sub_100044E14(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13)
{
  uint64_t v44 = a8;
  uint64_t v47 = a7;
  int v46 = a6;
  uint64_t v43 = a5;
  uint64_t v15 = a1;
  uint64_t v41 = a1;
  int v42 = a12;
  uint64_t v40 = a9;
  uint64_t v45 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  unint64_t v18 = (char *)&v38 - v17;
  uint64_t v19 = type metadata accessor for Bare();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v39 = sub_100089B50(v20, v15, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(a13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v18, v40, a13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, a13);
  uint64_t v22 = v43;
  sub_10003A450(v43);
  uint64_t v23 = v44;
  swift_retain();
  LOBYTE(v15) = v42;
  sub_10003A4DC(a10, a11, v42);
  uint64_t WitnessTable = swift_getWitnessTable();
  double v25 = sub_100067FD8(v41, a2, a3, (unint64_t)v39, (uint64_t)v22, v46, v47, v48, v23, (uint64_t)v18, a10, a11, v15, v19, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v16 + 8))(v18, v45, v25);
  sub_100003DD0(&qword_1000C5230);
  uint64_t v26 = (_OWORD *)swift_allocObject();
  long long v27 = v48[8];
  long long v28 = v48[10];
  long long v29 = v48[11];
  v26[11] = v48[9];
  v26[12] = v28;
  v26[13] = v29;
  long long v30 = v48[4];
  long long v31 = v48[6];
  long long v32 = v48[7];
  v26[7] = v48[5];
  v26[8] = v31;
  v26[9] = v32;
  v26[10] = v27;
  long long v33 = v48[0];
  long long v34 = v48[1];
  v26[1] = xmmword_1000A2660;
  v26[2] = v33;
  long long v35 = v48[2];
  long long v36 = v48[3];
  v26[3] = v34;
  v26[4] = v35;
  v26[5] = v36;
  v26[6] = v30;
  return sub_100083798((uint64_t)v26);
}

uint64_t Option.init(name:parsing:help:completion:transform:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v23 = a5;
  uint64_t v24 = a8;
  int v25 = a6;
  uint64_t v26 = a9;
  uint64_t v15 = type metadata accessor for Parsed();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v18 = (uint64_t *)((char *)&v23 - v17);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a10;
  *(void *)(v19 + 24) = a1;
  sub_100038AC4(a3, v19 + 32);
  *(unsigned char *)(v19 + 81) = a2;
  uint64_t v20 = v24;
  *(void *)(v19 + 88) = a7;
  *(void *)(v19 + 96) = v20;
  uint64_t v21 = v23;
  *(void *)(v19 + 104) = a4;
  *(void *)(v19 + 112) = v21;
  *(unsigned char *)(v19 + 120) = v25;
  sub_100078D30((uint64_t)sub_1000476F4, v19, v18);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v16 + 32))(v26, v18, v15);
}

uint64_t sub_100045294(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12)
{
  uint64_t v44 = a8;
  uint64_t v47 = a7;
  int v46 = a6;
  uint64_t v43 = a5;
  uint64_t v40 = a1;
  uint64_t v42 = a10;
  int v41 = a11;
  uint64_t v45 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v17 = (char *)&v38 - v16;
  uint64_t v18 = type metadata accessor for Bare();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v39 = sub_100089B50(v19, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a12 - 8) + 56))(v17, 1, 1, a12);
  uint64_t v20 = v43;
  sub_10003A450(v43);
  uint64_t v21 = v44;
  swift_retain();
  uint64_t v22 = v42;
  unsigned __int8 v23 = v41;
  sub_10003A4DC(a9, v42, v41);
  uint64_t WitnessTable = swift_getWitnessTable();
  double v25 = sub_100067FD8(v40, a2, a3, (unint64_t)v39, (uint64_t)v20, v46, v47, v48, v21, (uint64_t)v17, a9, v22, v23, v18, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v15 + 8))(v17, v45, v25);
  sub_100003DD0(&qword_1000C5230);
  uint64_t v26 = (_OWORD *)swift_allocObject();
  long long v27 = v48[8];
  long long v28 = v48[10];
  long long v29 = v48[11];
  v26[11] = v48[9];
  v26[12] = v28;
  v26[13] = v29;
  long long v30 = v48[4];
  long long v31 = v48[6];
  long long v32 = v48[7];
  v26[7] = v48[5];
  v26[8] = v31;
  v26[9] = v32;
  v26[10] = v27;
  long long v33 = v48[0];
  long long v34 = v48[1];
  v26[1] = xmmword_1000A2660;
  v26[2] = v33;
  long long v35 = v48[2];
  long long v36 = v48[3];
  v26[3] = v34;
  v26[4] = v35;
  v26[5] = v36;
  v26[6] = v30;
  return sub_100083798((uint64_t)v26);
}

uint64_t Option.init<A>(wrappedValue:name:parsing:help:completion:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v23 = a6;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v24 = a9;
  type metadata accessor for Optional();
  uint64_t v14 = type metadata accessor for Parsed();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v21 - v16);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a7;
  *(void *)(v18 + 24) = a8;
  *(void *)(v18 + 32) = a1;
  sub_100038AC4(a3, v18 + 40);
  *(unsigned char *)(v18 + 89) = a2;
  uint64_t v19 = v22;
  *(void *)(v18 + 96) = v21;
  *(void *)(v18 + 104) = v19;
  *(unsigned char *)(v18 + 112) = v23;
  sub_100078D30((uint64_t)sub_100047710, v18, v17);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v15 + 32))(v24, v17, v14);
}

uint64_t Option.init<A>(wrappedValue:name:parsing:help:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  int v29 = a7;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v23 = a2;
  uint64_t v24 = a4;
  int v25 = a3;
  uint64_t v26 = a1;
  uint64_t v30 = a9;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = type metadata accessor for Parsed();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v23 - v14);
  uint64_t v16 = *(void *)(v11 - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 90) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (*(void *)(v16 + 64) + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a8;
  *(void *)(v19 + 24) = a10;
  *(void *)(v19 + 32) = v23;
  sub_100038AC4(v24, v19 + 40);
  *(unsigned char *)(v19 + 89) = v25;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32))(v19 + v17, v26, v11);
  unint64_t v20 = v19 + v18;
  uint64_t v21 = v28;
  *(void *)unint64_t v20 = v27;
  *(void *)(v20 + 8) = v21;
  *(unsigned char *)(v20 + 16) = v29;
  sub_100078D30((uint64_t)sub_1000478C0, v19, v15);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v13 + 32))(v30, v15, v12);
}

uint64_t sub_1000458E0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v15 = type metadata accessor for Optional();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = swift_bridgeObjectRetain();
  unint64_t v17 = sub_100089B50(v16, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10003A450(a5);
  sub_10003A4DC(a8, a9, a10);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100067C8C(a1, a2, a3, (unint64_t)v17, (uint64_t)a5, a6, a7, v33, a8, a9, a10, v15, WitnessTable);
  sub_100003DD0(&qword_1000C5230);
  uint64_t v19 = (_OWORD *)swift_allocObject();
  long long v20 = v33[8];
  long long v21 = v33[10];
  long long v22 = v33[11];
  v19[11] = v33[9];
  v19[12] = v21;
  v19[13] = v22;
  long long v23 = v33[4];
  long long v24 = v33[6];
  long long v25 = v33[7];
  v19[7] = v33[5];
  v19[8] = v24;
  v19[9] = v25;
  v19[10] = v20;
  long long v26 = v33[0];
  long long v27 = v33[1];
  v19[1] = xmmword_1000A2660;
  uint64_t v19[2] = v26;
  long long v28 = v33[2];
  long long v29 = v33[3];
  v19[3] = v27;
  v19[4] = v28;
  v19[5] = v29;
  v19[6] = v23;
  return sub_100083798((uint64_t)v19);
}

uint64_t Option.init<A>(name:parsing:help:completion:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v23 = a6;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v24 = a9;
  type metadata accessor for Optional();
  uint64_t v14 = type metadata accessor for Parsed();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v17 = (uint64_t *)((char *)&v21 - v16);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a7;
  *(void *)(v18 + 24) = a8;
  *(void *)(v18 + 32) = a1;
  sub_100038AC4(a3, v18 + 40);
  *(unsigned char *)(v18 + 89) = a2;
  uint64_t v19 = v22;
  *(void *)(v18 + 96) = v21;
  *(void *)(v18 + 104) = v19;
  *(unsigned char *)(v18 + 112) = v23;
  sub_100078D30((uint64_t)sub_100047710, v18, v17);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v15 + 32))(v24, v17, v14);
}

uint64_t sub_100045BF8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v38 = a7;
  int v39 = a6;
  uint64_t v37 = a5;
  uint64_t v36 = a1;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v36 - v16;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v19 = sub_100089B50(v18, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 56))(v17, 1, 1, a10);
  long long v20 = v37;
  sub_10003A450(v37);
  uint64_t v21 = v38;
  sub_10003A4DC(v38, a8, a9);
  uint64_t WitnessTable = swift_getWitnessTable();
  double v23 = sub_100067C8C(v36, a2, a3, (unint64_t)v19, (uint64_t)v20, v39, (uint64_t)v17, v40, v21, a8, a9, v14, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v15 + 8))(v17, v14, v23);
  sub_100003DD0(&qword_1000C5230);
  uint64_t v24 = (_OWORD *)swift_allocObject();
  long long v25 = v40[8];
  long long v26 = v40[10];
  long long v27 = v40[11];
  v24[11] = v40[9];
  v24[12] = v26;
  v24[13] = v27;
  long long v28 = v40[4];
  long long v29 = v40[6];
  long long v30 = v40[7];
  v24[7] = v40[5];
  v24[8] = v29;
  v24[9] = v30;
  v24[10] = v25;
  long long v31 = v40[0];
  long long v32 = v40[1];
  v24[1] = xmmword_1000A2660;
  void v24[2] = v31;
  long long v33 = v40[2];
  long long v34 = v40[3];
  uint64_t v24[3] = v32;
  v24[4] = v33;
  v24[5] = v34;
  v24[6] = v28;
  return sub_100083798((uint64_t)v24);
}

uint64_t Option.init<A>(wrappedValue:name:parsing:help:completion:transform:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v24 = a5;
  uint64_t v25 = a8;
  uint64_t v23 = a7;
  int v26 = a6;
  uint64_t v27 = a9;
  type metadata accessor for Optional();
  uint64_t v14 = type metadata accessor for Parsed();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v17 = (uint64_t *)((char *)&v22 - v16);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a10;
  *(void *)(v18 + 24) = a1;
  sub_100038AC4(a3, v18 + 32);
  *(unsigned char *)(v18 + 81) = a2;
  uint64_t v19 = v25;
  *(void *)(v18 + 88) = v23;
  *(void *)(v18 + 96) = v19;
  uint64_t v20 = v24;
  *(void *)(v18 + 104) = a4;
  *(void *)(v18 + 112) = v20;
  *(unsigned char *)(v18 + 120) = v26;
  sub_100078D30((uint64_t)sub_1000479A8, v18, v17);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v15 + 32))(v27, v17, v14);
}

uint64_t Option.init<A>(wrappedValue:name:parsing:help:completion:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v30 = a8;
  uint64_t v31 = a1;
  int v34 = a7;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  int v29 = a3;
  uint64_t v35 = a9;
  uint64_t v27 = a4;
  uint64_t v28 = a10;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for Parsed();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v26 - v15);
  uint64_t v17 = *(void *)(v12 - 8);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v19 = (*(void *)(v17 + 64) + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a11;
  *(void *)(v20 + 24) = a2;
  sub_100038AC4(v27, v20 + 32);
  *(unsigned char *)(v20 + 81) = v29;
  uint64_t v21 = v31;
  uint64_t v22 = v28;
  *(void *)(v20 + 88) = v30;
  *(void *)(v20 + 96) = v22;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))(v20 + v18, v21, v12);
  unint64_t v23 = v20 + v19;
  uint64_t v24 = v33;
  *(void *)unint64_t v23 = v32;
  *(void *)(v23 + 8) = v24;
  *(unsigned char *)(v23 + 16) = v34;
  sub_100078D30((uint64_t)sub_100047B64, v20, v16);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v14 + 32))(v35, v16, v13);
}

uint64_t sub_1000461F8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v16 = type metadata accessor for Optional();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v17 = swift_bridgeObjectRetain();
  unint64_t v18 = sub_100089B50(v17, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10003A450(a5);
  swift_retain();
  sub_10003A4DC(a10, a11, a12);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100067FD8(a1, a2, a3, (unint64_t)v18, (uint64_t)a5, a6, a7, v35, a8, a9, a10, a11, a12, v16, WitnessTable);
  sub_100003DD0(&qword_1000C5230);
  uint64_t v20 = (_OWORD *)swift_allocObject();
  long long v21 = v35[8];
  long long v22 = v35[10];
  long long v23 = v35[11];
  v20[11] = v35[9];
  v20[12] = v22;
  v20[13] = v23;
  long long v24 = v35[4];
  long long v25 = v35[6];
  long long v26 = v35[7];
  v20[7] = v35[5];
  void v20[8] = v25;
  v20[9] = v26;
  v20[10] = v21;
  long long v27 = v35[0];
  long long v28 = v35[1];
  v20[1] = xmmword_1000A2660;
  void v20[2] = v27;
  long long v29 = v35[2];
  long long v30 = v35[3];
  v20[3] = v28;
  v20[4] = v29;
  v20[5] = v30;
  v20[6] = v24;

  return sub_100083798((uint64_t)v20);
}

uint64_t Option.init<A>(name:parsing:help:completion:transform:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v24 = a5;
  uint64_t v25 = a8;
  uint64_t v23 = a7;
  int v26 = a6;
  uint64_t v27 = a9;
  type metadata accessor for Optional();
  uint64_t v14 = type metadata accessor for Parsed();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v22 - v16);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a10;
  *(void *)(v18 + 24) = a1;
  sub_100038AC4(a3, v18 + 32);
  *(unsigned char *)(v18 + 81) = a2;
  uint64_t v19 = v25;
  *(void *)(v18 + 88) = v23;
  *(void *)(v18 + 96) = v19;
  uint64_t v20 = v24;
  *(void *)(v18 + 104) = a4;
  *(void *)(v18 + 112) = v20;
  *(unsigned char *)(v18 + 120) = v26;
  sub_100078D30((uint64_t)sub_1000479A8, v18, v17);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v15 + 32))(v27, v17, v14);
}

uint64_t sub_10004653C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v42 = a8;
  uint64_t v44 = a7;
  int v43 = a6;
  int v41 = a5;
  uint64_t v39 = a1;
  uint64_t v40 = a10;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v37 - v17;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v38 = sub_100089B50(v19, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a12 - 8) + 56))(v18, 1, 1, a12);
  uint64_t v20 = v41;
  sub_10003A450(v41);
  uint64_t v21 = v42;
  swift_retain();
  uint64_t v22 = v40;
  sub_10003A4DC(a9, v40, a11);
  uint64_t WitnessTable = swift_getWitnessTable();
  double v24 = sub_100067FD8(v39, a2, a3, (unint64_t)v38, (uint64_t)v20, v43, v44, v45, v21, (uint64_t)v18, a9, v22, a11, v15, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v16 + 8))(v18, v15, v24);
  sub_100003DD0(&qword_1000C5230);
  uint64_t v25 = (_OWORD *)swift_allocObject();
  long long v26 = v45[8];
  long long v27 = v45[10];
  long long v28 = v45[11];
  v25[11] = v45[9];
  v25[12] = v27;
  v25[13] = v28;
  long long v29 = v45[4];
  long long v30 = v45[6];
  long long v31 = v45[7];
  v25[7] = v45[5];
  v25[8] = v30;
  v25[9] = v31;
  v25[10] = v26;
  long long v32 = v45[0];
  long long v33 = v45[1];
  v25[1] = xmmword_1000A2660;
  v25[2] = v32;
  long long v34 = v45[2];
  long long v35 = v45[3];
  v25[3] = v33;
  void v25[4] = v34;
  void v25[5] = v35;
  v25[6] = v29;
  return sub_100083798((uint64_t)v25);
}

uint64_t Option.init<A>(wrappedValue:name:parsing:help:completion:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a8;
  *(void *)(v17 + 24) = a9;
  *(void *)(v17 + 32) = a2;
  sub_100038AC4(a4, v17 + 40);
  *(unsigned char *)(v17 + 89) = a3;
  *(void *)(v17 + 96) = a1;
  *(void *)(v17 + 104) = a5;
  *(void *)(v17 + 112) = a6;
  *(unsigned char *)(v17 + 120) = a7;
  type metadata accessor for Array();
  sub_100078D30((uint64_t)sub_100047CC0, v17, &v22);
  long long v20 = v22;
  char v21 = v23;
  uint64_t v18 = type metadata accessor for Parsed();
  (*(void (**)(uint64_t *, long long *, uint64_t))(*(void *)(v18 - 8) + 32))(&v24, &v20, v18);
  return v24;
}

uint64_t sub_10004692C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v15 = type metadata accessor for Array();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = sub_100089B50(v16, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = a7;
  sub_10003A450(a5);
  sub_10003A4DC(a8, a9, a10);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100067C8C(a1, a2, a3, (unint64_t)v17, (uint64_t)a5, a6, (uint64_t)&v33, v34, a8, a9, a10, v15, WitnessTable);
  sub_100003DD0(&qword_1000C5230);
  uint64_t v19 = (_OWORD *)swift_allocObject();
  long long v20 = v34[8];
  long long v21 = v34[10];
  long long v22 = v34[11];
  v19[11] = v34[9];
  v19[12] = v21;
  v19[13] = v22;
  long long v23 = v34[4];
  long long v24 = v34[6];
  long long v25 = v34[7];
  v19[7] = v34[5];
  v19[8] = v24;
  v19[9] = v25;
  v19[10] = v20;
  long long v26 = v34[0];
  long long v27 = v34[1];
  v19[1] = xmmword_1000A2660;
  uint64_t v19[2] = v26;
  long long v28 = v34[2];
  long long v29 = v34[3];
  v19[3] = v27;
  v19[4] = v28;
  v19[5] = v29;
  v19[6] = v23;
  return sub_100083798((uint64_t)v19);
}

uint64_t Option.init<A>(name:parsing:help:completion:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a7;
  *(void *)(v16 + 24) = a8;
  *(void *)(v16 + 32) = a1;
  sub_100038AC4(a3, v16 + 40);
  *(unsigned char *)(v16 + 89) = a2;
  *(void *)(v16 + 96) = a4;
  *(void *)(v16 + 104) = a5;
  *(unsigned char *)(v16 + 112) = a6;
  type metadata accessor for Array();
  sub_100078D30((uint64_t)sub_100047D74, v16, &v21);
  long long v19 = v21;
  char v20 = v22;
  uint64_t v17 = type metadata accessor for Parsed();
  (*(void (**)(uint64_t *, long long *, uint64_t))(*(void *)(v17 - 8) + 32))(&v23, &v19, v17);
  return v23;
}

uint64_t sub_100046C00(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v15 = type metadata accessor for Array();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = sub_100089B50(v16, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = 0;
  sub_10003A450(a5);
  sub_10003A4DC(a7, a8, a9);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100067C8C(a1, a2, a3, (unint64_t)v17, (uint64_t)a5, a6, (uint64_t)&v32, v33, a7, a8, a9, v15, WitnessTable);
  sub_100003DD0(&qword_1000C5230);
  long long v19 = (_OWORD *)swift_allocObject();
  long long v20 = v33[8];
  long long v21 = v33[10];
  long long v22 = v33[11];
  v19[11] = v33[9];
  v19[12] = v21;
  v19[13] = v22;
  long long v23 = v33[4];
  long long v24 = v33[6];
  long long v25 = v33[7];
  v19[7] = v33[5];
  v19[8] = v24;
  v19[9] = v25;
  v19[10] = v20;
  long long v26 = v33[0];
  long long v27 = v33[1];
  v19[1] = xmmword_1000A2660;
  uint64_t v19[2] = v26;
  long long v28 = v33[2];
  long long v29 = v33[3];
  v19[3] = v27;
  v19[4] = v28;
  v19[5] = v29;
  v19[6] = v23;
  return sub_100083798((uint64_t)v19);
}

uint64_t Option.init<A>(wrappedValue:name:parsing:help:completion:transform:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a10;
  *(void *)(v17 + 24) = a2;
  sub_100038AC4(a4, v17 + 32);
  *(unsigned char *)(v17 + 81) = a3;
  *(void *)(v17 + 88) = a8;
  *(void *)(v17 + 96) = a9;
  *(void *)(v17 + 104) = a1;
  *(void *)(v17 + 112) = a5;
  *(void *)(v17 + 120) = a6;
  *(unsigned char *)(v17 + 128) = a7;
  type metadata accessor for Array();
  sub_100078D30((uint64_t)sub_100047E4C, v17, &v23);
  long long v21 = v23;
  char v22 = v24;
  uint64_t v18 = type metadata accessor for Parsed();
  (*(void (**)(uint64_t *, long long *, uint64_t))(*(void *)(v18 - 8) + 32))(&v25, &v21, v18);
  return v25;
}

uint64_t sub_100046ED8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v15 = type metadata accessor for Array();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = sub_100089B50(v16, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v35 = a9;
  sub_10003A450(a5);
  swift_retain();
  sub_10003A4DC(a10, a11, a12);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100067FD8(a1, a2, a3, (unint64_t)v17, (uint64_t)a5, a6, a7, v36, a8, (uint64_t)&v35, a10, a11, a12, v15, WitnessTable);
  sub_100003DD0(&qword_1000C5230);
  long long v19 = (_OWORD *)swift_allocObject();
  long long v20 = v36[8];
  long long v21 = v36[10];
  long long v22 = v36[11];
  v19[11] = v36[9];
  v19[12] = v21;
  v19[13] = v22;
  long long v23 = v36[4];
  long long v24 = v36[6];
  long long v25 = v36[7];
  v19[7] = v36[5];
  v19[8] = v24;
  v19[9] = v25;
  v19[10] = v20;
  long long v26 = v36[0];
  long long v27 = v36[1];
  v19[1] = xmmword_1000A2660;
  uint64_t v19[2] = v26;
  long long v28 = v36[2];
  long long v29 = v36[3];
  v19[3] = v27;
  v19[4] = v28;
  v19[5] = v29;
  v19[6] = v23;
  return sub_100083798((uint64_t)v19);
}

uint64_t Option.init<A>(name:parsing:help:completion:transform:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a9;
  *(void *)(v17 + 24) = a1;
  sub_100038AC4(a3, v17 + 32);
  *(unsigned char *)(v17 + 81) = a2;
  *(void *)(v17 + 88) = a7;
  *(void *)(v17 + 96) = a8;
  *(void *)(v17 + 104) = a4;
  *(void *)(v17 + 112) = a5;
  *(unsigned char *)(v17 + 120) = a6;
  type metadata accessor for Array();
  sub_100078D30((uint64_t)sub_100047F0C, v17, &v22);
  long long v20 = v22;
  char v21 = v23;
  uint64_t v18 = type metadata accessor for Parsed();
  (*(void (**)(uint64_t *, long long *, uint64_t))(*(void *)(v18 - 8) + 32))(&v24, &v20, v18);
  return v24;
}

uint64_t sub_1000471C8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v15 = type metadata accessor for Array();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = sub_100089B50(v16, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v34 = 0;
  sub_10003A450(a5);
  swift_retain();
  sub_10003A4DC(a9, a10, a11);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100067FD8(a1, a2, a3, (unint64_t)v17, (uint64_t)a5, a6, a7, v35, a8, (uint64_t)&v34, a9, a10, a11, v15, WitnessTable);
  sub_100003DD0(&qword_1000C5230);
  long long v19 = (_OWORD *)swift_allocObject();
  long long v20 = v35[8];
  long long v21 = v35[10];
  long long v22 = v35[11];
  v19[11] = v35[9];
  v19[12] = v21;
  v19[13] = v22;
  long long v23 = v35[4];
  long long v24 = v35[6];
  long long v25 = v35[7];
  v19[7] = v35[5];
  v19[8] = v24;
  v19[9] = v25;
  v19[10] = v20;
  long long v26 = v35[0];
  long long v27 = v35[1];
  v19[1] = xmmword_1000A2660;
  uint64_t v19[2] = v26;
  long long v28 = v35[2];
  long long v29 = v35[3];
  v19[3] = v27;
  v19[4] = v28;
  v19[5] = v29;
  v19[6] = v23;
  return sub_100083798((uint64_t)v19);
}

uint64_t sub_100047388()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 90) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  int v6 = *(unsigned __int8 *)(v0 + v5 + 16);
  if (v6 != 255) {
    sub_10002EBFC(*(void *)(v0 + v5), *(void *)(v0 + v5 + 8), v6);
  }

  return _swift_deallocObject(v0, v5 + 17, v3 | 7);
}

uint64_t sub_100047484(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 16) - 8) + 80) + 90) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 16) - 8) + 80);
  uint64_t v5 = v3 + ((*(void *)(*(void *)(*(void *)(v3 + 16) - 8) + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1000443D4(a1, a2, a3, *(void *)(v3 + 32), (uint64_t *)(v3 + 40), *(unsigned __int8 *)(v3 + 89), v3 + v4, *(void *)v5, *(void *)(v5 + 8), *(unsigned char *)(v5 + 16), *(void *)(v3 + 16));
}

uint64_t sub_10004752C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100047D8C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, void, char, void, void))sub_100044970);
}

uint64_t sub_100047544()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 104) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  int v6 = *(unsigned __int8 *)(v0 + v5 + 16);
  if (v6 != 255) {
    sub_10002EBFC(*(void *)(v0 + v5), *(void *)(v0 + v5 + 8), v6);
  }

  return _swift_deallocObject(v0, v5 + 17, v3 | 7);
}

uint64_t sub_100047644(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 16) - 8) + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 16) - 8) + 80);
  unint64_t v5 = (*(void *)(*(void *)(*(void *)(v3 + 16) - 8) + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100044E14(a1, a2, a3, *(void *)(v3 + 24), (uint64_t *)(v3 + 32), *(unsigned __int8 *)(v3 + 81), *(void *)(v3 + 88), *(void *)(v3 + 96), v3 + v4, *(void *)(v3 + v5), *(void *)(v3 + v5 + 8), *(unsigned char *)(v3 + v5 + 16), *(void *)(v3 + 16));
}

uint64_t sub_1000476F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100047F24(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, void, void, void, char, void))sub_100045294);
}

uint64_t sub_100047714(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_100045BF8(a1, a2, a3, *(void *)(v3 + 32), (uint64_t *)(v3 + 40), *(unsigned __int8 *)(v3 + 89), *(void *)(v3 + 96), *(void *)(v3 + 104), *(unsigned char *)(v3 + 112), *(void *)(v3 + 16));
}

uint64_t sub_100047754()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 90) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64) + v4 + 7;
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v0 + v4;
  uint64_t v8 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v1);
  }
  int v9 = *(unsigned __int8 *)(v0 + v6 + 16);
  if (v9 != 255) {
    sub_10002EBFC(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8), v9);
  }

  return _swift_deallocObject(v0, v6 + 17, v3 | 7);
}

uint64_t sub_1000478C0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 90) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v3 + v8;
  uint64_t v10 = v3 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1000458E0(a1, a2, a3, *(void *)(v3 + 32), (uint64_t *)(v3 + 40), *(unsigned __int8 *)(v3 + 89), v9, *(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));
}

uint64_t sub_1000479AC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10004653C(a1, a2, a3, *(void *)(v3 + 24), (uint64_t *)(v3 + 32), *(unsigned __int8 *)(v3 + 81), *(void *)(v3 + 88), *(void *)(v3 + 96), *(void *)(v3 + 104), *(void *)(v3 + 112), *(unsigned char *)(v3 + 120), *(void *)(v3 + 16));
}

uint64_t sub_1000479F0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 104) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64) + v4 + 7;
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v7 = v0 + v4;
  uint64_t v8 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v1);
  }
  int v9 = *(unsigned __int8 *)(v0 + v6 + 16);
  if (v9 != 255) {
    sub_10002EBFC(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8), v9);
  }

  return _swift_deallocObject(v0, v6 + 17, v3 | 7);
}

uint64_t sub_100047B64(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000461F8(a1, a2, a3, *(void *)(v3 + 24), (uint64_t *)(v3 + 32), *(unsigned char *)(v3 + 81), *(void *)(v3 + 88), *(void *)(v3 + 96), v3 + v8, *(void *)(v3 + v9), *(void *)(v3 + v9 + 8), *(unsigned char *)(v3 + v9 + 16));
}

uint64_t sub_100047C50()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 120);
  if (v1 != 255) {
    sub_10002EBFC(*(void *)(v0 + 104), *(void *)(v0 + 112), v1);
  }

  return _swift_deallocObject(v0, 121, 7);
}

uint64_t sub_100047CC0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10004692C(a1, a2, a3, *(void *)(v3 + 32), (uint64_t *)(v3 + 40), *(unsigned __int8 *)(v3 + 89), *(void *)(v3 + 96), *(void *)(v3 + 104), *(void *)(v3 + 112), *(unsigned char *)(v3 + 120));
}

uint64_t sub_100047D0C()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v1 = *(unsigned __int8 *)(v0 + 112);
  if (v1 != 255) {
    sub_10002EBFC(*(void *)(v0 + 96), *(void *)(v0 + 104), v1);
  }

  return _swift_deallocObject(v0, 113, 7);
}

uint64_t sub_100047D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100047D8C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, void, char, void, void))sub_100046C00);
}

uint64_t sub_100047D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, void, char, void, void))
{
  char v6 = *(unsigned char *)(v4 + 112);
  return a4(a1, a2, a3, *(void *)(v4 + 32), v4 + 40, *(unsigned __int8 *)(v4 + 89), *(void *)(v4 + 96), *(void *)(v4 + 104), v6, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_100047DD4()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 128);
  if (v1 != 255) {
    sub_10002EBFC(*(void *)(v0 + 112), *(void *)(v0 + 120), v1);
  }

  return _swift_deallocObject(v0, 129, 7);
}

uint64_t sub_100047E4C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_100046ED8(a1, a2, a3, *(void *)(v3 + 24), (uint64_t *)(v3 + 32), *(unsigned char *)(v3 + 81), *(void *)(v3 + 88), *(void *)(v3 + 96), *(void *)(v3 + 104), *(void *)(v3 + 112), *(void *)(v3 + 120), *(unsigned char *)(v3 + 128));
}

uint64_t sub_100047E9C()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  int v1 = *(unsigned __int8 *)(v0 + 120);
  if (v1 != 255) {
    sub_10002EBFC(*(void *)(v0 + 104), *(void *)(v0 + 112), v1);
  }

  return _swift_deallocObject(v0, 121, 7);
}

uint64_t sub_100047F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100047F24(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, void, void, void, char, void))sub_1000471C8);
}

uint64_t sub_100047F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, void, void, void, char, void))
{
  char v6 = *(unsigned char *)(v4 + 120);
  return a4(a1, a2, a3, *(void *)(v4 + 24), v4 + 32, *(unsigned __int8 *)(v4 + 81), *(void *)(v4 + 88), *(void *)(v4 + 96), *(void *)(v4 + 104), *(void *)(v4 + 112), v6, *(void *)(v4 + 16));
}

uint64_t sub_100047F70(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100047FAC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100047FEC()
{
  unint64_t result = qword_1000C53D0;
  if (!qword_1000C53D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C53D0);
  }
  return result;
}

unint64_t sub_100048044()
{
  unint64_t result = qword_1000C53D8[0];
  if (!qword_1000C53D8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1000C53D8);
  }
  return result;
}

void *sub_100048098(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 2;
          unsigned int v9 = v12 + 2;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 != 1)
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 0;
      return v3;
    }
    uint64_t v14 = *((void *)a2 + 1);
    *uint64_t v3 = *(void *)a2;
    v3[1] = v14;
    *((unsigned char *)v3 + v5) = 1;
  }
  swift_retain();
  return v3;
}

uint64_t sub_100048210(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x10) {
    unint64_t v2 = 16;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

void *sub_100048310(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    uint64_t v10 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v10;
    swift_retain();
    char v11 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v11 = 0;
  }
  *((unsigned char *)a1 + v4) = v11;
  return a1;
}

unsigned __int8 *sub_10004844C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      uint64_t v18 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v18;
      a1[v7] = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  return a1;
}

_OWORD *sub_100048668(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(_OWORD *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_1000487A0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_1000489B8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 16;
  if (*(void *)(v3 + 64) > 0x10uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void sub_100048AEC(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x100048CB4);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

ValueMetadata *type metadata accessor for SingleValueParsingStrategy()
{
  return &type metadata for SingleValueParsingStrategy;
}

unsigned char *_s14ArgumentParser26SingleValueParsingStrategyVwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100048DC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArrayParsingStrategy()
{
  return &type metadata for ArrayParsingStrategy;
}

uint64_t OptionGroup.title.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 44));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t OptionGroup.title.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = (void *)(v3 + *(int *)(a3 + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *unsigned int v6 = a1;
  v6[1] = a2;
  return result;
}

Swift::String_optional (__swiftcall *OptionGroup.title.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t sub_100048E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = (int *)type metadata accessor for OptionGroup();
  *(unsigned char *)(a2 + v4[10]) = 0;
  uint64_t v5 = (void *)(a2 + v4[11]);
  *uint64_t v5 = 0;
  v5[1] = 0xE000000000000000;
  uint64_t v6 = type metadata accessor for Parsed();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  *(unsigned char *)(a2 + v4[9]) = 0;
  return result;
}

uint64_t OptionGroup.init(from:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v60 = a4;
  unint64_t v40 = a3;
  uint64_t v41 = type metadata accessor for OptionGroup();
  uint64_t v37 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v38 = (uint64_t)&v33 - v8;
  uint64_t v33 = type metadata accessor for Parsed();
  __chkstk_darwin(v33);
  unsigned int v10 = (char *)&v33 - v9;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  unsigned int v14 = (char *)&v33 - v13;
  uint64_t v39 = *(void *)(a2 - 8);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v36 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v35 = (uint64_t)&v33 - v18;
  __chkstk_darwin(v17);
  long long v20 = (char *)&v33 - v19;
  uint64_t v42 = a1;
  sub_1000356C0(a1, (uint64_t)v51);
  sub_100003DD0(&qword_1000C5460);
  if (swift_dynamicCast())
  {
    long long v56 = v47;
    long long v57 = v48;
    long long v58 = v49;
    char v59 = v50;
    long long v52 = v43;
    long long v53 = v44;
    long long v54 = v45;
    long long v55 = v46;
    sub_100058768(a2);
    if (!v4)
    {
      uint64_t v30 = v39;
      (*(void (**)(char *, void, uint64_t, unint64_t))(v39 + 56))(v14, 0, 1, a2);
      (*(void (**)(char *, char *, unint64_t))(v30 + 32))(v20, v14, a2);
      (*(void (**)(char *, char *, unint64_t))(v30 + 16))(v10, v20, a2);
      swift_storeEnumTagMultiPayload();
      uint64_t v31 = (uint64_t)v10;
      unint64_t v24 = v40;
      sub_100048E9C(v31, v60);
      (*(void (**)(char *, unint64_t))(v30 + 8))(v20, a2);
      sub_100049788((uint64_t)&v52);
      uint64_t v22 = v41;
      uint64_t v21 = v42;
      uint64_t v27 = (uint64_t)v36;
LABEL_10:
      OptionGroup.wrappedValue.getter(v22, v27);
      (*(void (**)(unint64_t, unint64_t))(v24 + 24))(a2, v24);
      Option.wrappedValue.setter(v27, v22);
      return sub_100005128(v21);
    }
    swift_errorRelease();
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v39 + 56))(v14, 1, 1, a2);
    sub_100049788((uint64_t)&v52);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v11);
    uint64_t v5 = 0;
  }
  else
  {
    char v50 = 0;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    sub_1000495BC((uint64_t)&v43);
  }
  uint64_t v21 = v42;
  sub_1000356C0(v42, (uint64_t)&v52);
  uint64_t v22 = v41;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v24 = v40;
  uint64_t v25 = v38;
  sub_100078E74((uint64_t)&v52, v22, WitnessTable, v38);
  if (!v5)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v60, v25, v22);
    sub_1000356C0(v21, (uint64_t)v51);
    char v26 = swift_dynamicCast();
    uint64_t v27 = (uint64_t)v36;
    if (v26)
    {
      long long v56 = v47;
      long long v57 = v48;
      long long v58 = v49;
      char v59 = v50;
      long long v52 = v43;
      long long v53 = v44;
      long long v54 = v45;
      long long v55 = v46;
      uint64_t v28 = v35;
      OptionGroup.wrappedValue.getter(v22, v35);
      __n128 v29 = sub_100058938(v28, a2, a2, v24);
      (*(void (**)(uint64_t, unint64_t, __n128))(v39 + 8))(v28, a2, v29);
      sub_100049788((uint64_t)&v52);
    }
    else
    {
      char v50 = 0;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v43 = 0u;
      sub_1000495BC((uint64_t)&v43);
    }
    goto LABEL_10;
  }
  return sub_100005128(v21);
}

uint64_t type metadata accessor for OptionGroup()
{
  return sub_10003A4F0();
}

uint64_t sub_1000495BC(uint64_t a1)
{
  uint64_t v2 = sub_100003DD0(&qword_1000C5468);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OptionGroup.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Parsed();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v11 - v7, v3, v6);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a2, v8, v5);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100049788(uint64_t a1)
{
  return a1;
}

uint64_t OptionGroup.init(title:visibility:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Parsed();
  __chkstk_darwin(v12 - 8);
  unsigned int v14 = (uint64_t *)((char *)&v19 - v13);
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a4;
  v15[3] = a5;
  v15[4] = a1;
  v15[5] = a2;
  sub_100078D30((uint64_t)sub_100049A30, (uint64_t)v15, v14);
  sub_100048E9C((uint64_t)v14, a6);
  uint64_t v16 = type metadata accessor for OptionGroup();
  *(unsigned char *)(a6 + *(int *)(v16 + 36)) = a3;
  uint64_t v17 = (void *)(a6 + *(int *)(v16 + 44));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v17 = a1;
  v17[1] = a2;
  return result;
}

uint64_t sub_1000498FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_100053C7C(a6, a7, 2, a1, a2, a3);
  if (!*(void *)(v14 + 16)) {
    return v14;
  }
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  while (1)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1000639A8(v14);
      uint64_t v14 = result;
    }
    if (v16 >= *(void *)(v14 + 16)) {
      break;
    }
    uint64_t v18 = v14 + v15;
    *(void *)(v18 + 144) = a4;
    *(void *)(v18 + 152) = a5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    ++v16;
    v15 += 192;
    if (v16 >= *(void *)(v14 + 16)) {
      return v14;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000499F8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100049A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000498FC(a1, a2, a3, v3[4], v3[5], v3[2], v3[3]);
}

void (*OptionGroup.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  _OWORD v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  OptionGroup.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_100035A80;
}

uint64_t sub_100049B10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return OptionGroup.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_100049B30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100048E9C(a1, a2);
}

uint64_t sub_100049B3C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

unint64_t OptionGroup.description.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = type metadata accessor for Parsed();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v16 - v12, v2, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return 0xD000000000000019;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v13, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    uint64_t v14 = String.init<A>(describing:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  return v14;
}

uint64_t OptionGroup.init(_hiddenFromHelp:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return OptionGroup.init(title:visibility:)(0, 0xE000000000000000, 1, a1, a2, a3);
}

uint64_t OptionGroup.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return OptionGroup.init(title:visibility:)(0, 0xE000000000000000, 0, a1, a2, a3);
}

uint64_t OptionGroup.init(visibility:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return OptionGroup.init(title:visibility:)(0, 0xE000000000000000, a1, a2, a3, a4);
}

uint64_t sub_100049DB4(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100049DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_100049DF8()
{
  uint64_t result = type metadata accessor for Parsed();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_100049EA4(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v5 + 64) <= 0x10uLL) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 10) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unsigned int v10 = a2[v6];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v12 = v6;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a2;
          goto LABEL_19;
        case 2:
          int v13 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v13 = *(_DWORD *)a2;
LABEL_19:
          int v14 = (v13 | (v11 << (8 * v6))) + 2;
          unsigned int v10 = v13 + 2;
          if (v6 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v15 = v6 + 1;
    if (v10 == 1)
    {
      uint64_t v16 = *((void *)a2 + 1);
      *uint64_t v4 = *(void *)a2;
      v4[1] = v16;
      swift_retain();
      char v17 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(a1, a2);
      char v17 = 0;
    }
    *((unsigned char *)v4 + v6) = v17;
    uint64_t v18 = (char *)v4 + v15;
    *uint64_t v18 = a2[v15];
    v18[1] = a2[v15 + 1];
    uint64_t v19 = (void *)(((unint64_t)v4 + v15 + 9) & 0xFFFFFFFFFFFFFFF8);
    long long v20 = (void *)((unint64_t)&a2[v15 + 9] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v19 = *v20;
    v19[1] = v20[1];
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10004A078(unsigned __int8 *a1, uint64_t a2)
{
  if (*(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v2 = 16;
  }
  else {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_13;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_13:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    swift_release();
  }
  else {
    (*(void (**)(unsigned __int8 *))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(a1);
  }

  return swift_bridgeObjectRelease();
}

void *sub_10004A1C0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    uint64_t v11 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v11;
    swift_retain();
    char v12 = 1;
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1, a2);
    char v12 = 0;
  }
  *((unsigned char *)a1 + v5) = v12;
  int v13 = (unsigned __int8 *)a1 + v5 + 1;
  int v14 = &a2[v5 + 1];
  *int v13 = *v14;
  v13[1] = v14[1];
  uint64_t v15 = (void *)((unint64_t)(v13 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)((unint64_t)(v14 + 9) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  return a1;
}

unsigned __int8 *sub_10004A34C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != a2)
  {
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      uint64_t v18 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v18;
      a1[v7] = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  unint64_t v19 = *(void *)(v6 + 64);
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v20 = v19 + 1;
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  long long v23 = (void *)((unint64_t)(v21 + 9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (void *)((unint64_t)(v22 + 9) & 0xFFFFFFFFFFFFFFF8);
  *long long v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_10004A5DC(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    *a1 = *(_OWORD *)a2;
    char v11 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1, a2);
    char v11 = 0;
  }
  *((unsigned char *)a1 + v5) = v11;
  int v12 = (unsigned __int8 *)a1 + v5 + 1;
  unsigned int v13 = &a2[v5 + 1];
  *int v12 = *v13;
  v12[1] = v13[1];
  *(_OWORD *)((unint64_t)(v12 + 9) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)(v13 + 9) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned __int8 *sub_10004A758(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != a2)
  {
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  unint64_t v19 = *(void *)(v6 + 64);
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v20 = v19 + 1;
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  long long v23 = (void *)((unint64_t)(v21 + 9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (void *)((unint64_t)(v22 + 9) & 0xFFFFFFFFFFFFFFF8);
  *long long v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10004A9DC(_DWORD *a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (v3 <= 0x10) {
    unint64_t v3 = 16;
  }
  if (!a2) {
    return 0;
  }
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_5;
  }
  unint64_t v6 = ((v3 + 10) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v7 = v6 & 0xFFFFFFF8;
  unsigned int v8 = a2 - 2147483646;
  if ((v6 & 0xFFFFFFF8) != 0) {
    unsigned int v8 = 2;
  }
  if (v8 >= 0x10000) {
    int v9 = 4;
  }
  else {
    int v9 = 2;
  }
  if (v8 < 0x100) {
    int v10 = 1;
  }
  else {
    int v10 = v9;
  }
  if (v10 == 4)
  {
    int v11 = *(_DWORD *)((char *)a1 + v6);
    if (!v11) {
      goto LABEL_5;
    }
  }
  else if (v10 == 2)
  {
    int v11 = *(unsigned __int16 *)((char *)a1 + v6);
    if (!v11) {
      goto LABEL_5;
    }
  }
  else
  {
    int v11 = *((unsigned __int8 *)a1 + v6);
    if (!v11)
    {
LABEL_5:
      unint64_t v4 = *(void *)((((unint64_t)a1 + v3 + 10) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v4 >= 0xFFFFFFFF) {
        LODWORD(v4) = -1;
      }
      return (v4 + 1);
    }
  }
  int v12 = v11 - 1;
  if (v7)
  {
    int v12 = 0;
    LODWORD(v7) = *a1;
  }
  return (v7 | v12) ^ 0x80000000;
}

void sub_10004AABC(unsigned char *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = ((v5 + 10) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (a3 < 0)
  {
    unsigned int v8 = a3 - 2147483646;
    if (((v5 + 10) & 0xFFFFFFF8) != 0xFFFFFFF0) {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      int v9 = 4;
    }
    else {
      int v9 = 2;
    }
    if (v8 < 0x100) {
      int v7 = 1;
    }
    else {
      int v7 = v9;
    }
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    int v7 = 0;
    if ((a2 & 0x80000000) == 0)
    {
LABEL_5:
      switch(v7)
      {
        case 1:
          a1[v6] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v6] = 0;
          goto LABEL_25;
        case 3:
          goto LABEL_32;
        case 4:
          *(_DWORD *)&a1[v6] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        default:
LABEL_25:
          if (a2) {
LABEL_26:
          }
            *(void *)(((unint64_t)&a1[v5 + 10] & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
          break;
      }
      return;
    }
  }
  if (((v5 + 10) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v10 = a2 - 0x7FFFFFFF;
  }
  else {
    int v10 = 1;
  }
  if (((v5 + 10) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v11 = a2 ^ 0x80000000;
    bzero(a1, v6);
    *(_DWORD *)a1 = v11;
  }
  switch(v7)
  {
    case 1:
      a1[v6] = v10;
      break;
    case 2:
      *(_WORD *)&a1[v6] = v10;
      break;
    case 3:
LABEL_32:
      __break(1u);
      JUMPOUT(0x10004AC18);
    case 4:
      *(_DWORD *)&a1[v6] = v10;
      break;
    default:
      return;
  }
}

uint64_t static AsyncParsableCommand.main()(uint64_t a1, uint64_t a2)
{
  v3[23] = a2;
  v3[24] = v2;
  v3[22] = a1;
  return _swift_task_switch(sub_10004AC64, 0, 0);
}

uint64_t sub_10004AC64()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 184) + 8);
  *(void *)(v0 + 200) = v1;
  static ParsableCommand.parseAsRoot(_:)(0, v1, v0 + 16);
  sub_1000356C0(v0 + 16, v0 + 96);
  sub_100003DD0(&qword_1000C5528);
  sub_100003DD0(&qword_1000C5530);
  if (swift_dynamicCast())
  {
    sub_10004B100((long long *)(v0 + 136), v0 + 56);
    uint64_t v2 = *(void *)(v0 + 80);
    uint64_t v3 = *(void *)(v0 + 88);
    sub_100008DB4(v0 + 56, v2);
    int v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 16) + **(int **)(v3 + 16));
    unint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v4;
    *unint64_t v4 = v0;
    v4[1] = sub_10004AEB0;
    return v9(v2, v3);
  }
  else
  {
    *(void *)(v0 + 168) = 0;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
    sub_10004B0A0(v0 + 136);
    uint64_t v6 = *(void *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 48);
    sub_100008DB4(v0 + 16, v6);
    (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
    sub_100005128(v0 + 16);
    unsigned int v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_10004AEB0()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10004B030;
  }
  else {
    uint64_t v2 = sub_10004AFC4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004AFC4()
{
  sub_100005128(v0 + 56);
  sub_100005128(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10004B030()
{
  sub_100005128((uint64_t)(v0 + 7));
  uint64_t v1 = v0[27];
  sub_100005128((uint64_t)(v0 + 2));
  uint64_t v2 = v0[22];
  uint64_t v3 = *(void *)(v0[25] + 8);
  static ParsableArguments.exit(withError:)(v1, v2, v3);
}

uint64_t sub_10004B0A0(uint64_t a1)
{
  uint64_t v2 = sub_100003DD0(&qword_1000C5538);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004B100(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t static AsyncMainProtocol.main()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 176) = a1;
  *(void *)(v2 + 184) = a2;
  return _swift_task_switch(sub_10004B138, 0, 0);
}

uint64_t sub_10004B138()
{
  *(void *)(v0 + 192) = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)(v0 + 200) = AssociatedConformanceWitness;
  static ParsableCommand.parseAsRoot(_:)(0, AssociatedConformanceWitness, v0 + 16);
  sub_1000356C0(v0 + 16, v0 + 96);
  sub_100003DD0(&qword_1000C5528);
  sub_100003DD0(&qword_1000C5530);
  if (swift_dynamicCast())
  {
    sub_10004B100((long long *)(v0 + 136), v0 + 56);
    uint64_t v2 = *(void *)(v0 + 80);
    uint64_t v3 = *(void *)(v0 + 88);
    sub_100008DB4(v0 + 56, v2);
    int v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 16) + **(int **)(v3 + 16));
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10004B3C8;
    return v9(v2, v3);
  }
  else
  {
    *(void *)(v0 + 168) = 0;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
    sub_10004B0A0(v0 + 136);
    uint64_t v6 = *(void *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 48);
    sub_100008DB4(v0 + 16, v6);
    (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
    sub_100005128(v0 + 16);
    unsigned int v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_10004B3C8()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10004B4DC;
  }
  else {
    uint64_t v2 = sub_10004AFC4;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_10004B4DC()
{
  sub_100005128((uint64_t)(v0 + 7));
  sub_100005128((uint64_t)(v0 + 2));
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[24];
  uint64_t v3 = *(void *)(v0[25] + 8);
  static ParsableArguments.exit(withError:)(v1, v2, v3);
}

uint64_t CommandConfiguration.usage.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandConfiguration.usage.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t ArgumentInfoV0.valueName.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ArgumentInfoV0.valueName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

Swift::String_optional (__swiftcall *ArgumentInfoV0.valueName.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t ArgumentInfoV0.defaultValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ArgumentInfoV0.defaultValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

Swift::String_optional (__swiftcall *ArgumentInfoV0.defaultValue.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t CommandConfiguration.shouldDisplay.getter()
{
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t CommandConfiguration.shouldDisplay.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 96) = result;
  return result;
}

Swift::String_optional (__swiftcall *ArgumentInfoV0.allValues.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t CommandConfiguration.subcommands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandConfiguration.subcommands.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 104) = a1;
  return result;
}

Swift::String_optional (__swiftcall *ArgumentInfoV0.abstract.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t CommandConfiguration.defaultSubcommand.getter()
{
  return *(void *)(v0 + 112);
}

uint64_t CommandConfiguration.defaultSubcommand.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 112) = result;
  *(void *)(v2 + 120) = a2;
  return result;
}

Swift::String_optional (__swiftcall *CommandConfiguration.defaultSubcommand.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t CommandConfiguration.helpNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandConfiguration.helpNames.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 128) = a1;
  return result;
}

Swift::String_optional (__swiftcall *CommandConfiguration.helpNames.modify())(Swift::String argument)
{
  return String.init(argument:);
}

__n128 CommandConfiguration.init(commandName:abstract:usage:discussion:version:shouldDisplay:subcommands:defaultSubcommand:helpNames:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, __n128 a13, uint64_t a14, uint64_t a15)
{
  __n128 result = a13;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = 0;
  *(void *)(a9 + 24) = 0;
  *(void *)(a9 + 32) = a3;
  *(void *)(a9 + 40) = a4;
  *(void *)(a9 + 48) = a5;
  *(void *)(a9 + 56) = a6;
  *(void *)(a9 + 64) = a7;
  *(void *)(a9 + 72) = a8;
  *(void *)(a9 + 80) = a10;
  *(void *)(a9 + 88) = a11;
  *(unsigned char *)(a9 + 96) = a12;
  *(__n128 *)(a9 + 104) = a13;
  *(void *)(a9 + 120) = a14;
  *(void *)(a9 + 128) = a15;
  return result;
}

__n128 CommandConfiguration.init(commandName:_superCommandName:abstract:usage:discussion:version:shouldDisplay:subcommands:defaultSubcommand:helpNames:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11, uint64_t a12, char a13, __n128 a14, uint64_t a15, uint64_t a16)
{
  __n128 result = a14;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(void *)(a9 + 80) = a11;
  *(void *)(a9 + 88) = a12;
  *(unsigned char *)(a9 + 96) = a13;
  *(__n128 *)(a9 + 104) = a14;
  *(void *)(a9 + 120) = a15;
  *(void *)(a9 + 128) = a16;
  return result;
}

__n128 CommandConfiguration.init(commandName:abstract:discussion:version:shouldDisplay:subcommands:defaultSubcommand:helpNames:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, __n128 a11, uint64_t a12, uint64_t a13)
{
  __n128 result = a11;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = 0;
  *(void *)(a9 + 24) = 0;
  *(void *)(a9 + 32) = a3;
  *(void *)(a9 + 40) = a4;
  *(_OWORD *)(a9 + 48) = xmmword_1000A3EC0;
  *(void *)(a9 + 64) = a5;
  *(void *)(a9 + 72) = a6;
  *(void *)(a9 + 80) = a7;
  *(void *)(a9 + 88) = a8;
  *(unsigned char *)(a9 + 96) = a10;
  *(__n128 *)(a9 + 104) = a11;
  *(void *)(a9 + 120) = a12;
  *(void *)(a9 + 128) = a13;
  return result;
}

uint64_t destroy for CommandConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CommandConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CommandConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for CommandConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for CommandConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CommandConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandConfiguration()
{
  return &type metadata for CommandConfiguration;
}

uint64_t static EnumerableFlag.name(for:)()
{
  uint64_t v0 = sub_100043564((uint64_t)&off_1000BC340);
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  return v0;
}

double static EnumerableFlag.help(for:)@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_10004BD08(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  unint64_t v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v15 = (char *)&v26 - v14;
  __chkstk_darwin(v13);
  uint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  if (!v20) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v21 = v20;
  uint64_t v27 = v15;
  uint64_t v43 = ContiguousArray.init()();
  uint64_t v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v21);
  uint64_t v41 = v19;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    long long v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    uint64_t v37 = v23;
    unint64_t v24 = v27;
    while (1)
    {
      uint64_t v25 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

uint64_t ExpressibleByArgument.defaultValueDescription.getter()
{
  return 0;
}

void *static ExpressibleByArgument.allValueStrings.getter()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t static ExpressibleByArgument<>.allValueStrings.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = &v14[-v8];
  dispatch thunk of static CaseIterable.allCases.getter();
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = sub_10004BD08((void (*)(char *, char *))sub_10004C394, (uint64_t)v14, AssociatedTypeWitness, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Never, v11);
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return v12;
}

uint64_t sub_10004C2C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = String.init<A>(describing:)();
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_10004C394@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10004C2C4(a1, a2);
}

uint64_t static ExpressibleByArgument<>.defaultCompletionKind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t static ExpressibleByArgument<>.allValueStrings.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v13 = &v19[-v12];
  dispatch thunk of static CaseIterable.allCases.getter();
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = KeyPath;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v17 = sub_10004BD08((void (*)(char *, char *))sub_10004C67C, (uint64_t)v19, AssociatedTypeWitness, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Never, v16);
  (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  swift_release();
  return v17;
}

uint64_t sub_10004C594()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_10004C5C8()
{
  return 40;
}

__n128 sub_10004C5D4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_10004C5E8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + a1 - 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = v5(AssociatedTypeWitness, v4);
  *a3 = result;
  a3[1] = v8;
  return result;
}

uint64_t sub_10004C65C()
{
  return 40;
}

__n128 sub_10004C668(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_10004C67C()
{
  return swift_getAtKeyPath();
}

uint64_t ExpressibleByArgument<>.defaultValueDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v8 = (char *)&v11 - v7;
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(AssociatedTypeWitness, a4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  return v9;
}

uint64_t sub_10004C7D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_10004C7D8()
{
  return 0;
}

uint64_t RawRepresentable<>.init(argument:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v36 = a6;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v31 = *(void *)(v10 - 8);
  uint64_t v32 = v10;
  __chkstk_darwin(v10);
  uint64_t v34 = (char *)&v30 - v11;
  uint64_t v33 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v30 - v16;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v19 = __chkstk_darwin(v15);
  uint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v30 - v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8))(a1, v35, AssociatedTypeWitness, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    uint64_t v24 = *(void *)(a3 - 8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v17, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, AssociatedTypeWitness);
    uint64_t v25 = v34;
    dispatch thunk of RawRepresentable.init(rawValue:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, AssociatedTypeWitness);
    uint64_t v24 = *(void *)(a3 - 8);
    uint64_t v26 = v24;
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v25, 1, a3))
    {
      uint64_t v28 = v36;
      (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v36, v25, a3);
      uint64_t v27 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v28, v27, 1, a3);
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v25, v32);
  }
  uint64_t v26 = v24;
  uint64_t v27 = 1;
  uint64_t v28 = v36;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v28, v27, 1, a3);
}

uint64_t LosslessStringConvertible<>.init(argument:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - v6;
  dispatch thunk of LosslessStringConvertible.init(_:)();
  uint64_t v8 = *(void *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, a1))
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v9 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v7, a1);
    uint64_t v9 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v9, 1, a1);
}

uint64_t sub_10004CD88@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10005245C(a1, a2, (uint64_t (*)(void))sub_10004F55C, (uint64_t (*)(void *, uint64_t, uint64_t))sub_10004FACC);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5 & 1;
  return result;
}

uint64_t sub_10004CDE4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100052528(a1, a2, (uint64_t (*)(void))sub_10004DC9C, (uint64_t (*)(void *, uint64_t, uint64_t))sub_10004E264);
  *a3 = result;
  a3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_10004CE40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_1000525D8(a1, a2, (uint64_t (*)(void))sub_10004E518, (uint64_t (*)(void *, uint64_t, uint64_t))sub_10004EAE0);
  *(_WORD *)a3 = result;
  *(unsigned char *)(a3 + 2) = BYTE2(result) & 1;
  return result;
}

unint64_t sub_10004CE9C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_10005268C(a1, a2, (uint64_t (*)(void))sub_10004ED94, (uint64_t (*)(void *, uint64_t, uint64_t))sub_10004F2DC);
  *(_DWORD *)a3 = result;
  *(unsigned char *)(a3 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_10004CEF8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10005245C(a1, a2, (uint64_t (*)(void))sub_1000519E0, (uint64_t (*)(void *, uint64_t, uint64_t))sub_100051FE0);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5 & 1;
  return result;
}

uint64_t sub_10004CF50@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100052528(a1, a2, (uint64_t (*)(void))sub_10004FD48, (uint64_t (*)(void *, uint64_t, uint64_t))sub_100050458);
  *a3 = result;
  a3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_10004CFA8()
{
  BYTE8(v2) = 0;
  *(void *)&long long v2 = *v0;
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v2 + 1);
}

uint64_t sub_10004CFF8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_1000525D8(a1, a2, (uint64_t (*)(void))sub_100050700, (uint64_t (*)(void *, uint64_t, uint64_t))sub_100050E08);
  *(_WORD *)a3 = result;
  *(unsigned char *)(a3 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t sub_10004D050()
{
  WORD4(v2) = 0;
  *(void *)&long long v2 = *v0;
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v2 + 2);
}

unint64_t sub_10004D0A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_10005268C(a1, a2, (uint64_t (*)(void))sub_1000510B0, (uint64_t (*)(void *, uint64_t, uint64_t))sub_100051760);
  *(_DWORD *)a3 = result;
  *(unsigned char *)(a3 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_10004D0F8()
{
  uint64_t v2 = *v0;
  _print_unlocked<A, B>(_:_:)();
  return HIDWORD(v2);
}

uint64_t sub_10004D148()
{
  return 0;
}

unint64_t sub_10004D198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_10004D4B8(a1, a2);
  *(_DWORD *)a3 = result;
  *(unsigned char *)(a3 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_10004D1C8()
{
  uint64_t v2 = *v0;
  _print_unlocked<A, B>(_:_:)();
  return HIDWORD(v2);
}

uint64_t sub_10004D218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10004D2C0(a1, a2);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5 & 1;
  return result;
}

uint64_t sub_10004D248()
{
  return 0;
}

uint64_t sub_10004D298@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10005225C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10004D2C0(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    char v6 = v9;
  }
  else
  {
    __chkstk_darwin(a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      char v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (uint64_t v7 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
        && *v7 == 0;
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      char v6 = sub_10004D458(v4, v5, (void (*)(uint64_t *__return_ptr))sub_10005235C);
    }
    swift_bridgeObjectRelease();
  }
  if (v6) {
    return 0;
  }
  else {
    return 0;
  }
}

uint64_t sub_10004D458(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

unint64_t sub_10004D4B8(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    char v6 = v9;
  }
  else
  {
    __chkstk_darwin(a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      char v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (uint64_t v7 = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0
        && *v7 == 0;
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      char v6 = sub_10004D458(v4, v5, (void (*)(uint64_t *__return_ptr))sub_10005235C);
    }
    swift_bridgeObjectRelease();
  }
  return (unint64_t)((v6 & 1) == 0) << 32;
}

uint64_t sub_10004D65C()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_10004D6DC(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10004D6DC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_10004D834(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          uint64_t v11 = sub_10004D934(v9, 0),
          unint64_t v12 = sub_10004D99C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_10004D834(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_100095BE0(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_100095BE0(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

void *sub_10004D934(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_100003DD0(&qword_1000C5548);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t sub_10004D99C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  if (!a2)
  {
    uint64_t v13 = 0;
    unint64_t v15 = a4;
LABEL_34:
    *(void *)uint64_t result = a4;
    *(void *)(result + 8) = a5;
    *(void *)(result + 16) = a6;
    *(void *)(result + 24) = a7;
    *(void *)(result + 32) = v15;
    return v13;
  }
  if (!a3)
  {
    unint64_t v15 = a4;
    uint64_t v13 = 0;
    goto LABEL_34;
  }
  uint64_t v10 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v10) = 1;
  }
  uint64_t v11 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v11 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v27 = v11;
  if (a3 < 0) {
    goto LABEL_37;
  }
  unint64_t v23 = result;
  unint64_t v24 = a5;
  uint64_t v13 = 0;
  unint64_t v14 = a5 >> 14;
  unint64_t v15 = a4;
  uint64_t v16 = 4 << v10;
  unint64_t v17 = a4 >> 14;
  uint64_t v25 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v26 = a7 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v22 = a4;
  unint64_t v28 = a4 >> 14;
  while (1)
  {
    unint64_t v18 = v15 >> 14;
    if (v15 >> 14 == v14) {
      goto LABEL_33;
    }
    unint64_t v19 = v15 & 0xC;
    unint64_t v20 = v15;
    if (v19 == v16) {
      break;
    }
    if (v18 < v17) {
      goto LABEL_35;
    }
LABEL_14:
    if (v18 >= v14) {
      goto LABEL_35;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      unint64_t v17 = v28;
      char v21 = result;
      if (v19 != v16) {
        goto LABEL_22;
      }
    }
    else if ((a7 & 0x2000000000000000) != 0)
    {
      v29[0] = a6;
      v29[1] = v26;
      char v21 = *((unsigned char *)v29 + (v20 >> 16));
      if (v19 != v16) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t result = v25;
      if ((a6 & 0x1000000000000000) == 0)
      {
        uint64_t result = _StringObject.sharedUTF8.getter();
        unint64_t v17 = v28;
      }
      char v21 = *(unsigned char *)(result + (v20 >> 16));
      if (v19 != v16)
      {
LABEL_22:
        if ((a7 & 0x1000000000000000) != 0) {
          goto LABEL_23;
        }
        goto LABEL_9;
      }
    }
    uint64_t result = sub_100095BE0(v15, a6, a7);
    unint64_t v17 = v28;
    unint64_t v15 = result;
    if ((a7 & 0x1000000000000000) != 0)
    {
LABEL_23:
      if (v27 <= v15 >> 16) {
        goto LABEL_36;
      }
      uint64_t result = String.UTF8View._foreignIndex(after:)();
      unint64_t v17 = v28;
      unint64_t v15 = result;
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = (v15 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_10:
    *(unsigned char *)(a2 + v13++) = v21;
    if (a3 == v13)
    {
      uint64_t v13 = a3;
LABEL_33:
      uint64_t result = v23;
      a5 = v24;
      a4 = v22;
      goto LABEL_34;
    }
  }
  uint64_t result = sub_100095BE0(v15, a6, a7);
  unint64_t v17 = v28;
  unint64_t v20 = result;
  unint64_t v18 = result >> 14;
  if (result >> 14 >= v28) {
    goto LABEL_14;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10004DBCC(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, uint64_t))
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    v13[0] = v5;
    v13[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = v13;
    return a3(v7, v8, a2);
  }
  uint64_t v5 = sub_10004D65C();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  *a1 = v5;
  a1[1] = v11;
  unint64_t v6 = v11;
  if ((v11 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (void *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (void *)_StringObject.sharedUTF8.getter();
  }
  return a3(v7, v8, a2);
}

uint64_t sub_10004DC9C(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned __int8 v16 = 0;
    unsigned __int8 v66 = 0;
    goto LABEL_145;
  }
  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      uint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter();
    }
    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }
          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }
          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            LOBYTE(v12) = 0;
            uint64_t v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned __int8 v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }
                else
                {
                  char v37 = -55;
                }
              }
              else
              {
                char v37 = -48;
              }
              int v38 = (char)v12 * (char)a3;
              char v39 = v38;
              if ((char)v38 != v38) {
                goto LABEL_143;
              }
              int v12 = (char)v38 + (char)(v36 + v37);
              if ((char)(v39 + v36 + v37) != v12) {
                goto LABEL_143;
              }
              ++v35;
              --v31;
            }
            while (v31);
LABEL_76:
            unsigned __int8 v16 = v12;
            unsigned __int8 v66 = 0;
            goto LABEL_145;
          }
          goto LABEL_99;
        }
LABEL_143:
        unsigned __int8 v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }
      goto LABEL_150;
    }
    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v40 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v41 = a3 + 55;
        }
        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v41 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v42 = a3 + 48;
        }
        else {
          unsigned __int8 v42 = 58;
        }
        if (result)
        {
          LOBYTE(v43) = 0;
          do
          {
            unsigned int v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                char v45 = -87;
              }
              else
              {
                char v45 = -55;
              }
            }
            else
            {
              char v45 = -48;
            }
            int v46 = (char)v43 * (char)a3;
            char v47 = v46;
            if ((char)v46 != v46) {
              goto LABEL_143;
            }
            int v43 = (char)v46 + (char)(v44 + v45);
            if ((char)(v47 + v44 + v45) != v43) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }
          while (v6);
          unsigned __int8 v16 = v43;
          unsigned __int8 v66 = 0;
          goto LABEL_145;
        }
        goto LABEL_99;
      }
      goto LABEL_143;
    }
    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }
        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          LOBYTE(v12) = 0;
          uint64_t v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }
              else
              {
                char v15 = -55;
              }
            }
            else
            {
              char v15 = -48;
            }
            int v18 = (char)v12 * (char)a3;
            char v19 = v18;
            if ((char)v18 != v18) {
              goto LABEL_143;
            }
            int v12 = (char)v18 - (char)(v14 + v15);
            if ((char)(v19 - (v14 + v15)) != v12) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }
LABEL_99:
        unsigned __int8 v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v66 = v17;
LABEL_145:
        LOBYTE(v65[0]) = (a2 & 0x1000000000000000) != 0;
        return v16 | (v66 << 8) | (LOBYTE(v65[0]) << 16);
      }
      goto LABEL_143;
    }
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        LOBYTE(v22) = 0;
        unsigned __int8 v57 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v58 = a3 + 55;
        }
        else
        {
          unsigned __int8 v57 = 97;
          unsigned __int8 v58 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v59 = a3 + 48;
        }
        else {
          unsigned __int8 v59 = 58;
        }
        uint64_t v60 = (unsigned __int8 *)v65;
        while (1)
        {
          unsigned int v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              char v62 = -87;
            }
            else
            {
              char v62 = -55;
            }
          }
          else
          {
            char v62 = -48;
          }
          int v63 = (char)v22 * (char)a3;
          char v64 = v63;
          if ((char)v63 != v63) {
            goto LABEL_143;
          }
          int v22 = (char)v63 + (char)(v61 + v62);
          if ((char)(v64 + v61 + v62) != v22) {
            goto LABEL_143;
          }
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    if (v20)
    {
      uint64_t v21 = v20 - 1;
      if (v21)
      {
        LOBYTE(v22) = 0;
        unsigned __int8 v23 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v24 = a3 + 55;
        }
        else
        {
          unsigned __int8 v23 = 97;
          unsigned __int8 v24 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v25 = a3 + 48;
        }
        else {
          unsigned __int8 v25 = 58;
        }
        uint64_t v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          unsigned int v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          int v29 = (char)v22 * (char)a3;
          char v30 = v29;
          if ((char)v29 != v29) {
            goto LABEL_143;
          }
          int v22 = (char)v29 - (char)(v27 + v28);
          if ((char)(v30 - (v27 + v28)) != v22) {
            goto LABEL_143;
          }
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    goto LABEL_149;
  }
  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      LOBYTE(v22) = 0;
      unsigned __int8 v49 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v50 = a3 + 55;
      }
      else
      {
        unsigned __int8 v49 = 97;
        unsigned __int8 v50 = 65;
      }
      if (a3 <= 10) {
        unsigned __int8 v51 = a3 + 48;
      }
      else {
        unsigned __int8 v51 = 58;
      }
      long long v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        unsigned int v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            unsigned __int8 v16 = 0;
            char v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            char v54 = -87;
          }
          else
          {
            char v54 = -55;
          }
        }
        else
        {
          char v54 = -48;
        }
        int v55 = (char)v22 * (char)a3;
        char v56 = v55;
        if ((char)v55 != v55) {
          goto LABEL_143;
        }
        int v22 = (char)v55 + (char)(v53 + v54);
        if ((char)(v56 + v53 + v54) != v22) {
          goto LABEL_143;
        }
        ++v52;
        --v48;
      }
      while (v48);
LABEL_142:
      unsigned __int8 v16 = v22;
      unsigned __int8 v66 = 0;
      goto LABEL_145;
    }
    goto LABEL_143;
  }
LABEL_151:
  __break(1u);
  return result;
}

unsigned __int8 *sub_10004E264(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            int v23 = (char)v8 * (char)a3;
            char v24 = v23;
            if ((char)v23 != v23) {
              goto LABEL_72;
            }
            int v8 = (char)v23 + (char)(v21 + v22);
            if ((char)(v24 + v21 + v22) != v8) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          LOBYTE(v28) = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            int v31 = (char)v28 * (char)a3;
            char v32 = v31;
            if ((char)v31 != v31) {
              goto LABEL_72;
            }
            int v28 = (char)v31 + (char)(v29 + v30);
            if ((char)(v32 + v29 + v30) != v28) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v28;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          unsigned __int8 v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            int v14 = (char)v8 * (char)a3;
            char v15 = v14;
            if ((char)v14 != v14) {
              goto LABEL_72;
            }
            int v8 = (char)v14 - (char)(v10 + v11);
            if ((char)(v15 - (v10 + v11)) != v8) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10004E518(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned __int16 v16 = 0;
    unsigned __int8 v66 = 0;
    goto LABEL_145;
  }
  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      uint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter();
    }
    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }
          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }
          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            LOWORD(v12) = 0;
            uint64_t v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned __int16 v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }
                else
                {
                  char v37 = -55;
                }
              }
              else
              {
                char v37 = -48;
              }
              int v38 = (__int16)v12 * (__int16)a3;
              __int16 v39 = v38;
              if ((__int16)v38 != v38) {
                goto LABEL_143;
              }
              int v12 = (__int16)v38 + (v36 + v37);
              if ((__int16)(v39 + (v36 + v37)) != v12) {
                goto LABEL_143;
              }
              ++v35;
              --v31;
            }
            while (v31);
LABEL_76:
            unsigned __int16 v16 = v12;
            unsigned __int8 v66 = 0;
            goto LABEL_145;
          }
          goto LABEL_99;
        }
LABEL_143:
        unsigned __int16 v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }
      goto LABEL_150;
    }
    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v40 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v41 = a3 + 55;
        }
        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v41 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v42 = a3 + 48;
        }
        else {
          unsigned __int8 v42 = 58;
        }
        if (result)
        {
          LOWORD(v43) = 0;
          do
          {
            unsigned int v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                unsigned __int16 v16 = 0;
                char v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                char v45 = -87;
              }
              else
              {
                char v45 = -55;
              }
            }
            else
            {
              char v45 = -48;
            }
            int v46 = (__int16)v43 * (__int16)a3;
            __int16 v47 = v46;
            if ((__int16)v46 != v46) {
              goto LABEL_143;
            }
            int v43 = (__int16)v46 + (v44 + v45);
            if ((__int16)(v47 + (v44 + v45)) != v43) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }
          while (v6);
          unsigned __int16 v16 = v43;
          unsigned __int8 v66 = 0;
          goto LABEL_145;
        }
        goto LABEL_99;
      }
      goto LABEL_143;
    }
    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }
        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          LOWORD(v12) = 0;
          int v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned __int16 v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }
              else
              {
                char v15 = -55;
              }
            }
            else
            {
              char v15 = -48;
            }
            int v18 = (__int16)v12 * (__int16)a3;
            __int16 v19 = v18;
            if ((__int16)v18 != v18) {
              goto LABEL_143;
            }
            int v12 = (__int16)v18 - (v14 + v15);
            if ((__int16)(v19 - (v14 + v15)) != v12) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }
LABEL_99:
        unsigned __int16 v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v66 = v17;
LABEL_145:
        LOBYTE(v65[0]) = (a2 & 0x1000000000000000) != 0;
        return v16 | (v66 << 16) | (LOBYTE(v65[0]) << 24);
      }
      goto LABEL_143;
    }
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        LOWORD(v22) = 0;
        unsigned __int8 v57 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v58 = a3 + 55;
        }
        else
        {
          unsigned __int8 v57 = 97;
          unsigned __int8 v58 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v59 = a3 + 48;
        }
        else {
          unsigned __int8 v59 = 58;
        }
        uint64_t v60 = (unsigned __int8 *)v65;
        while (1)
        {
          unsigned int v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              unsigned __int16 v16 = 0;
              char v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              char v62 = -87;
            }
            else
            {
              char v62 = -55;
            }
          }
          else
          {
            char v62 = -48;
          }
          int v63 = (__int16)v22 * (__int16)a3;
          __int16 v64 = v63;
          if ((__int16)v63 != v63) {
            goto LABEL_143;
          }
          int v22 = (__int16)v63 + (v61 + v62);
          if ((__int16)(v64 + (v61 + v62)) != v22) {
            goto LABEL_143;
          }
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    if (v20)
    {
      uint64_t v21 = v20 - 1;
      if (v21)
      {
        LOWORD(v22) = 0;
        unsigned __int8 v23 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v24 = a3 + 55;
        }
        else
        {
          unsigned __int8 v23 = 97;
          unsigned __int8 v24 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v25 = a3 + 48;
        }
        else {
          unsigned __int8 v25 = 58;
        }
        unsigned __int8 v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          unsigned int v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              unsigned __int16 v16 = 0;
              char v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          int v29 = (__int16)v22 * (__int16)a3;
          __int16 v30 = v29;
          if ((__int16)v29 != v29) {
            goto LABEL_143;
          }
          int v22 = (__int16)v29 - (v27 + v28);
          if ((__int16)(v30 - (v27 + v28)) != v22) {
            goto LABEL_143;
          }
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    goto LABEL_149;
  }
  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      LOWORD(v22) = 0;
      unsigned __int8 v49 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v50 = a3 + 55;
      }
      else
      {
        unsigned __int8 v49 = 97;
        unsigned __int8 v50 = 65;
      }
      if (a3 <= 10) {
        unsigned __int8 v51 = a3 + 48;
      }
      else {
        unsigned __int8 v51 = 58;
      }
      long long v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        unsigned int v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            unsigned __int16 v16 = 0;
            char v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            char v54 = -87;
          }
          else
          {
            char v54 = -55;
          }
        }
        else
        {
          char v54 = -48;
        }
        int v55 = (__int16)v22 * (__int16)a3;
        __int16 v56 = v55;
        if ((__int16)v55 != v55) {
          goto LABEL_143;
        }
        int v22 = (__int16)v55 + (v53 + v54);
        if ((__int16)(v56 + (v53 + v54)) != v22) {
          goto LABEL_143;
        }
        ++v52;
        --v48;
      }
      while (v48);
LABEL_142:
      unsigned __int16 v16 = v22;
      unsigned __int8 v66 = 0;
      goto LABEL_145;
    }
    goto LABEL_143;
  }
LABEL_151:
  __break(1u);
  return result;
}

unsigned __int8 *sub_10004EAE0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            int v23 = (__int16)v8 * (__int16)a3;
            __int16 v24 = v23;
            if ((__int16)v23 != v23) {
              goto LABEL_72;
            }
            int v8 = (__int16)v23 + (v21 + v22);
            if ((__int16)(v24 + (v21 + v22)) != v8) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          int v13 = 0;
          unsigned __int16 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int16 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          LOWORD(v28) = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            int v31 = (__int16)v28 * (__int16)a3;
            __int16 v32 = v31;
            if ((__int16)v31 != v31) {
              goto LABEL_72;
            }
            int v28 = (__int16)v31 + (v29 + v30);
            if ((__int16)(v32 + (v29 + v30)) != v28) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int16 v12 = v28;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          unsigned __int8 v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            int v14 = (__int16)v8 * (__int16)a3;
            __int16 v15 = v14;
            if ((__int16)v14 != v14) {
              goto LABEL_72;
            }
            int v8 = (__int16)v14 - (v10 + v11);
            if ((__int16)(v15 - (v10 + v11)) != v8) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int16 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10004ED94(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned int v16 = 0;
    unsigned __int8 v66 = 0;
    return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
  }
  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      uint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter();
    }
    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }
          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }
          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            unsigned int v12 = 0;
            uint64_t v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned int v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }
                else
                {
                  char v37 = -55;
                }
              }
              else
              {
                char v37 = -48;
              }
              uint64_t v38 = (int)v12 * (uint64_t)(int)a3;
              if (v38 != (int)v38) {
                goto LABEL_143;
              }
              unsigned __int8 v39 = v36 + v37;
              unsigned int v12 = v38 + v39;
              if (__OFADD__(v38, v39)) {
                goto LABEL_143;
              }
              ++v35;
              --v31;
            }
            while (v31);
LABEL_76:
            unsigned int v16 = v12;
            unsigned __int8 v66 = 0;
            return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
          }
          goto LABEL_99;
        }
LABEL_143:
        unsigned int v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }
      goto LABEL_150;
    }
    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v40 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v41 = a3 + 55;
        }
        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v41 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v42 = a3 + 48;
        }
        else {
          unsigned __int8 v42 = 58;
        }
        if (result)
        {
          int v43 = 0;
          do
          {
            unsigned int v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                unsigned int v16 = 0;
                char v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                char v45 = -87;
              }
              else
              {
                char v45 = -55;
              }
            }
            else
            {
              char v45 = -48;
            }
            uint64_t v46 = v43 * (uint64_t)(int)a3;
            if (v46 != (int)v46) {
              goto LABEL_143;
            }
            unsigned __int8 v47 = v44 + v45;
            int v43 = v46 + v47;
            if (__OFADD__(v46, v47)) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }
          while (v6);
          unsigned int v16 = v46 + v47;
          unsigned __int8 v66 = 0;
          return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
        }
        goto LABEL_99;
      }
      goto LABEL_143;
    }
    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }
        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          unsigned int v12 = 0;
          int v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned int v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }
              else
              {
                char v15 = -55;
              }
            }
            else
            {
              char v15 = -48;
            }
            uint64_t v18 = (int)v12 * (uint64_t)(int)a3;
            if (v18 != (int)v18) {
              goto LABEL_143;
            }
            unsigned __int8 v19 = v14 + v15;
            unsigned int v12 = v18 - v19;
            if (__OFSUB__(v18, v19)) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }
LABEL_99:
        unsigned int v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v66 = v17;
        return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
      }
      goto LABEL_143;
    }
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        unsigned int v22 = 0;
        unsigned __int8 v57 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v58 = a3 + 55;
        }
        else
        {
          unsigned __int8 v57 = 97;
          unsigned __int8 v58 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v59 = a3 + 48;
        }
        else {
          unsigned __int8 v59 = 58;
        }
        uint64_t v60 = (unsigned __int8 *)v65;
        while (1)
        {
          unsigned int v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              unsigned int v16 = 0;
              char v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              char v62 = -87;
            }
            else
            {
              char v62 = -55;
            }
          }
          else
          {
            char v62 = -48;
          }
          uint64_t v63 = (int)v22 * (uint64_t)(int)a3;
          if (v63 != (int)v63) {
            goto LABEL_143;
          }
          unsigned __int8 v64 = v61 + v62;
          unsigned int v22 = v63 + v64;
          if (__OFADD__(v63, v64)) {
            goto LABEL_143;
          }
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    if (v20)
    {
      uint64_t v21 = v20 - 1;
      if (v21)
      {
        unsigned int v22 = 0;
        unsigned __int8 v23 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v24 = a3 + 55;
        }
        else
        {
          unsigned __int8 v23 = 97;
          unsigned __int8 v24 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v25 = a3 + 48;
        }
        else {
          unsigned __int8 v25 = 58;
        }
        unsigned __int8 v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          unsigned int v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              unsigned int v16 = 0;
              char v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = (int)v22 * (uint64_t)(int)a3;
          if (v29 != (int)v29) {
            goto LABEL_143;
          }
          unsigned __int8 v30 = v27 + v28;
          unsigned int v22 = v29 - v30;
          if (__OFSUB__(v29, v30)) {
            goto LABEL_143;
          }
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    goto LABEL_149;
  }
  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      unsigned int v22 = 0;
      unsigned __int8 v49 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v50 = a3 + 55;
      }
      else
      {
        unsigned __int8 v49 = 97;
        unsigned __int8 v50 = 65;
      }
      if (a3 <= 10) {
        unsigned __int8 v51 = a3 + 48;
      }
      else {
        unsigned __int8 v51 = 58;
      }
      long long v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        unsigned int v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            unsigned int v16 = 0;
            char v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            char v54 = -87;
          }
          else
          {
            char v54 = -55;
          }
        }
        else
        {
          char v54 = -48;
        }
        uint64_t v55 = (int)v22 * (uint64_t)(int)a3;
        if (v55 != (int)v55) {
          goto LABEL_143;
        }
        unsigned __int8 v56 = v53 + v54;
        unsigned int v22 = v55 + v56;
        if (__OFADD__(v55, v56)) {
          goto LABEL_143;
        }
        ++v52;
        --v48;
      }
      while (v48);
LABEL_142:
      unsigned int v16 = v22;
      unsigned __int8 v66 = 0;
      return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
    }
    goto LABEL_143;
  }
LABEL_151:
  __break(1u);
  return result;
}

unsigned __int8 *sub_10004F2DC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            uint64_t v23 = (int)v8 * (uint64_t)(int)a3;
            if (v23 != (int)v23) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__OFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            uint64_t v31 = (int)v28 * (uint64_t)(int)a3;
            if (v31 != (int)v31) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__OFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          unsigned __int8 v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            uint64_t v14 = (int)v8 * (uint64_t)(int)a3;
            if (v14 != (int)v14) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (__OFSUB__(v14, v15)) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10004F55C(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    char v65 = 0;
    goto LABEL_128;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      unsigned __int8 v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter();
      unsigned __int8 v5 = (unsigned __int8 *)result;
    }
    int v7 = *v5;
    if (v7 == 43)
    {
      if (v6 < 1)
      {
LABEL_134:
        __break(1u);
        goto LABEL_135;
      }
      uint64_t v30 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v31 = a3 + 55;
        unsigned __int8 v32 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v33 = 58;
        }
        else
        {
          unsigned __int8 v32 = 97;
          unsigned __int8 v31 = 65;
          unsigned __int8 v33 = a3 + 48;
        }
        if (v5)
        {
          uint64_t v12 = 0;
          unsigned __int8 v34 = v5 + 1;
          do
          {
            unsigned int v35 = *v34;
            if (v35 < 0x30 || v35 >= v33)
            {
              if (v35 < 0x41 || v35 >= v31)
              {
                uint64_t result = 0;
                char v16 = 1;
                if (v35 < 0x61 || v35 >= v32) {
                  goto LABEL_88;
                }
                char v36 = -87;
              }
              else
              {
                char v36 = -55;
              }
            }
            else
            {
              char v36 = -48;
            }
            uint64_t v37 = v12 * a3;
            if ((unsigned __int128)(v12 * (__int128)a3) >> 64 != (v12 * a3) >> 63) {
              goto LABEL_129;
            }
            unsigned __int8 v38 = v35 + v36;
            uint64_t v12 = v37 + v38;
            if (__OFADD__(v37, v38)) {
              goto LABEL_129;
            }
            ++v34;
            --v30;
          }
          while (v30);
LABEL_67:
          uint64_t result = v12;
          char v65 = 0;
          goto LABEL_128;
        }
        goto LABEL_87;
      }
    }
    else
    {
      if (v7 == 45)
      {
        if (v6 >= 1)
        {
          uint64_t v8 = v6 - 1;
          if (v6 != 1)
          {
            unsigned __int8 v9 = a3 + 55;
            unsigned __int8 v10 = a3 + 87;
            if (a3 > 10)
            {
              unsigned __int8 v11 = 58;
            }
            else
            {
              unsigned __int8 v10 = 97;
              unsigned __int8 v9 = 65;
              unsigned __int8 v11 = a3 + 48;
            }
            if (v5)
            {
              uint64_t v12 = 0;
              unsigned __int8 v13 = v5 + 1;
              while (1)
              {
                unsigned int v14 = *v13;
                if (v14 < 0x30 || v14 >= v11)
                {
                  if (v14 < 0x41 || v14 >= v9)
                  {
                    uint64_t result = 0;
                    char v16 = 1;
                    if (v14 < 0x61 || v14 >= v10) {
                      goto LABEL_88;
                    }
                    char v15 = -87;
                  }
                  else
                  {
                    char v15 = -55;
                  }
                }
                else
                {
                  char v15 = -48;
                }
                uint64_t v17 = v12 * a3;
                if ((unsigned __int128)(v12 * (__int128)a3) >> 64 != (v12 * a3) >> 63) {
                  goto LABEL_129;
                }
                unsigned __int8 v18 = v14 + v15;
                uint64_t v12 = v17 - v18;
                if (__OFSUB__(v17, v18)) {
                  goto LABEL_129;
                }
                ++v13;
                if (!--v8) {
                  goto LABEL_67;
                }
              }
            }
LABEL_87:
            uint64_t result = 0;
            char v16 = 0;
LABEL_88:
            char v65 = v16;
            goto LABEL_128;
          }
          goto LABEL_129;
        }
        __break(1u);
        goto LABEL_133;
      }
      if (v6)
      {
        unsigned __int8 v39 = a3 + 55;
        unsigned __int8 v40 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v41 = 58;
        }
        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v39 = 65;
          unsigned __int8 v41 = a3 + 48;
        }
        if (!v5) {
          goto LABEL_87;
        }
        uint64_t v42 = 0;
        do
        {
          unsigned int v43 = *v5;
          if (v43 < 0x30 || v43 >= v41)
          {
            if (v43 < 0x41 || v43 >= v39)
            {
              uint64_t result = 0;
              char v16 = 1;
              if (v43 < 0x61 || v43 >= v40) {
                goto LABEL_88;
              }
              char v44 = -87;
            }
            else
            {
              char v44 = -55;
            }
          }
          else
          {
            char v44 = -48;
          }
          uint64_t v45 = v42 * a3;
          if ((unsigned __int128)(v42 * (__int128)a3) >> 64 != (v42 * a3) >> 63) {
            goto LABEL_129;
          }
          unsigned __int8 v46 = v43 + v44;
          uint64_t v42 = v45 + v46;
          if (__OFADD__(v45, v46)) {
            goto LABEL_129;
          }
          ++v5;
          --v6;
        }
        while (v6);
        uint64_t result = v45 + v46;
        char v65 = 0;
LABEL_128:
        LOBYTE(v64[0]) = (a2 & 0x1000000000000000) != 0;
        return result;
      }
    }
LABEL_129:
    uint64_t result = 0;
    char v65 = 1;
    goto LABEL_128;
  }
  uint64_t v19 = HIBYTE(a2) & 0xF;
  v64[0] = result;
  v64[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result == 45)
    {
      if (!v19)
      {
LABEL_133:
        __break(1u);
        goto LABEL_134;
      }
      uint64_t v20 = v19 - 1;
      if (v20)
      {
        uint64_t v21 = 0;
        unsigned __int8 v22 = a3 + 55;
        unsigned __int8 v23 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v24 = 58;
        }
        else
        {
          unsigned __int8 v23 = 97;
          unsigned __int8 v22 = 65;
          unsigned __int8 v24 = a3 + 48;
        }
        unsigned __int8 v25 = (unsigned __int8 *)v64 + 1;
        while (1)
        {
          unsigned int v26 = *v25;
          if (v26 < 0x30 || v26 >= v24)
          {
            if (v26 < 0x41 || v26 >= v22)
            {
              uint64_t result = 0;
              if (v26 < 0x61 || v26 >= v23) {
                goto LABEL_127;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v21 * a3;
          if ((unsigned __int128)(v21 * (__int128)a3) >> 64 != (v21 * a3) >> 63) {
            break;
          }
          unsigned __int8 v29 = v26 + v27;
          uint64_t v21 = v28 - v29;
          if (__OFSUB__(v28, v29)) {
            break;
          }
          ++v25;
          if (!--v20) {
            goto LABEL_125;
          }
        }
      }
    }
    else if (v19)
    {
      uint64_t v21 = 0;
      unsigned __int8 v56 = a3 + 55;
      unsigned __int8 v57 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v58 = 58;
      }
      else
      {
        unsigned __int8 v57 = 97;
        unsigned __int8 v56 = 65;
        unsigned __int8 v58 = a3 + 48;
      }
      unsigned __int8 v59 = (unsigned __int8 *)v64;
      while (1)
      {
        unsigned int v60 = *v59;
        if (v60 < 0x30 || v60 >= v58)
        {
          if (v60 < 0x41 || v60 >= v56)
          {
            uint64_t result = 0;
            if (v60 < 0x61 || v60 >= v57) {
              goto LABEL_127;
            }
            char v61 = -87;
          }
          else
          {
            char v61 = -55;
          }
        }
        else
        {
          char v61 = -48;
        }
        uint64_t v62 = v21 * a3;
        if ((unsigned __int128)(v21 * (__int128)a3) >> 64 != (v21 * a3) >> 63) {
          break;
        }
        unsigned __int8 v63 = v60 + v61;
        uint64_t v21 = v62 + v63;
        if (__OFADD__(v62, v63)) {
          break;
        }
        ++v59;
        if (!--v19) {
          goto LABEL_125;
        }
      }
    }
LABEL_126:
    uint64_t result = 0;
LABEL_127:
    char v65 = 1;
    goto LABEL_128;
  }
  if (v19)
  {
    uint64_t v47 = v19 - 1;
    if (v47)
    {
      uint64_t v21 = 0;
      unsigned __int8 v48 = a3 + 55;
      unsigned __int8 v49 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v50 = 58;
      }
      else
      {
        unsigned __int8 v49 = 97;
        unsigned __int8 v48 = 65;
        unsigned __int8 v50 = a3 + 48;
      }
      unsigned __int8 v51 = (unsigned __int8 *)v64 + 1;
      do
      {
        unsigned int v52 = *v51;
        if (v52 < 0x30 || v52 >= v50)
        {
          if (v52 < 0x41 || v52 >= v48)
          {
            uint64_t result = 0;
            if (v52 < 0x61 || v52 >= v49) {
              goto LABEL_127;
            }
            char v53 = -87;
          }
          else
          {
            char v53 = -55;
          }
        }
        else
        {
          char v53 = -48;
        }
        uint64_t v54 = v21 * a3;
        if ((unsigned __int128)(v21 * (__int128)a3) >> 64 != (v21 * a3) >> 63) {
          goto LABEL_126;
        }
        unsigned __int8 v55 = v52 + v53;
        uint64_t v21 = v54 + v55;
        if (__OFADD__(v54, v55)) {
          goto LABEL_126;
        }
        ++v51;
        --v47;
      }
      while (v47);
LABEL_125:
      uint64_t result = v21;
      char v65 = 0;
      goto LABEL_128;
    }
    goto LABEL_126;
  }
LABEL_135:
  __break(1u);
  return result;
}

unsigned __int8 *sub_10004FACC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        uint64_t v26 = 0;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          uint64_t v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }
      else
      {
        char v21 = -55;
      }
    }
    else
    {
      char v21 = -48;
    }
    uint64_t v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10004FD48(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned __int8 v16 = 0;
    unsigned __int8 v54 = 0;
    goto LABEL_145;
  }
  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      uint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter();
    }
    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v27 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v28 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v29 = a3 + 55;
          }
          else
          {
            unsigned __int8 v28 = 97;
            unsigned __int8 v29 = 65;
          }
          if (a3 <= 10) {
            unsigned __int8 v30 = a3 + 48;
          }
          else {
            unsigned __int8 v30 = 58;
          }
          if (result)
          {
            LOBYTE(v12) = 0;
            unsigned __int8 v31 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v32 = *v31;
              if (v32 < 0x30 || v32 >= v30)
              {
                if (v32 < 0x41 || v32 >= v29)
                {
                  unsigned __int8 v16 = 0;
                  char v17 = 1;
                  if (v32 < 0x61 || v32 >= v28) {
                    goto LABEL_144;
                  }
                  char v33 = -87;
                }
                else
                {
                  char v33 = -55;
                }
              }
              else
              {
                char v33 = -48;
              }
              if (((v12 * (unsigned __int16)a3) & 0xFF00) != 0) {
                goto LABEL_143;
              }
              unsigned int v12 = (v12 * a3) + (v32 + v33);
              if ((v12 >> 8)) {
                goto LABEL_143;
              }
              ++v31;
              --v27;
            }
            while (v27);
LABEL_76:
            unsigned __int8 v16 = v12;
            unsigned __int8 v54 = 0;
            goto LABEL_145;
          }
          goto LABEL_99;
        }
LABEL_143:
        unsigned __int8 v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }
      goto LABEL_150;
    }
    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v34 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v35 = a3 + 55;
        }
        else
        {
          unsigned __int8 v34 = 97;
          unsigned __int8 v35 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v36 = a3 + 48;
        }
        else {
          unsigned __int8 v36 = 58;
        }
        if (result)
        {
          LOBYTE(v37) = 0;
          do
          {
            unsigned int v38 = *(unsigned __int8 *)result;
            if (v38 < 0x30 || v38 >= v36)
            {
              if (v38 < 0x41 || v38 >= v35)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v38 < 0x61 || v38 >= v34) {
                  goto LABEL_144;
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            if (((v37 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_143;
            }
            unsigned int v37 = (v37 * a3) + (v38 + v39);
            if ((v37 >> 8)) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }
          while (v6);
          unsigned __int8 v16 = v37;
          unsigned __int8 v54 = 0;
          goto LABEL_145;
        }
        goto LABEL_99;
      }
      goto LABEL_143;
    }
    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }
        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          LOBYTE(v12) = 0;
          uint64_t v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }
              else
              {
                char v15 = -55;
              }
            }
            else
            {
              char v15 = -48;
            }
            if (((v12 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_143;
            }
            unsigned int v12 = (v12 * a3) - (v14 + v15);
            if ((v12 & 0xFFFFFF00) != 0) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }
LABEL_99:
        unsigned __int8 v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v54 = v17;
LABEL_145:
        LOBYTE(v53[0]) = (a2 & 0x1000000000000000) != 0;
        return v16 | (v54 << 8) | (LOBYTE(v53[0]) << 16);
      }
      goto LABEL_143;
    }
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  uint64_t v18 = HIBYTE(a2) & 0xF;
  v53[0] = result;
  v53[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v18)
      {
        LOBYTE(v20) = 0;
        unsigned __int8 v47 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v48 = a3 + 55;
        }
        else
        {
          unsigned __int8 v47 = 97;
          unsigned __int8 v48 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v49 = a3 + 48;
        }
        else {
          unsigned __int8 v49 = 58;
        }
        unsigned __int8 v50 = (unsigned __int8 *)v53;
        while (1)
        {
          unsigned int v51 = *v50;
          if (v51 < 0x30 || v51 >= v49)
          {
            if (v51 < 0x41 || v51 >= v48)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v51 < 0x61 || v51 >= v47) {
                goto LABEL_144;
              }
              char v52 = -87;
            }
            else
            {
              char v52 = -55;
            }
          }
          else
          {
            char v52 = -48;
          }
          if (((v20 * (unsigned __int16)a3) & 0xFF00) != 0) {
            goto LABEL_143;
          }
          unsigned int v20 = (v20 * a3) + (v51 + v52);
          if ((v20 >> 8)) {
            goto LABEL_143;
          }
          ++v50;
          if (!--v18) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    if (v18)
    {
      uint64_t v19 = v18 - 1;
      if (v19)
      {
        LOBYTE(v20) = 0;
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        unsigned __int8 v24 = (unsigned __int8 *)v53 + 1;
        while (1)
        {
          unsigned int v25 = *v24;
          if (v25 < 0x30 || v25 >= v23)
          {
            if (v25 < 0x41 || v25 >= v22)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v25 < 0x61 || v25 >= v21) {
                goto LABEL_144;
              }
              char v26 = -87;
            }
            else
            {
              char v26 = -55;
            }
          }
          else
          {
            char v26 = -48;
          }
          if (((v20 * (unsigned __int16)a3) & 0xFF00) != 0) {
            goto LABEL_143;
          }
          unsigned int v20 = (v20 * a3) - (v25 + v26);
          if ((v20 & 0xFFFFFF00) != 0) {
            goto LABEL_143;
          }
          ++v24;
          if (!--v19) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    goto LABEL_149;
  }
  if (v18)
  {
    uint64_t v40 = v18 - 1;
    if (v40)
    {
      LOBYTE(v20) = 0;
      unsigned __int8 v41 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v42 = a3 + 55;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v42 = 65;
      }
      if (a3 <= 10) {
        unsigned __int8 v43 = a3 + 48;
      }
      else {
        unsigned __int8 v43 = 58;
      }
      char v44 = (unsigned __int8 *)v53 + 1;
      do
      {
        unsigned int v45 = *v44;
        if (v45 < 0x30 || v45 >= v43)
        {
          if (v45 < 0x41 || v45 >= v42)
          {
            unsigned __int8 v16 = 0;
            char v17 = 1;
            if (v45 < 0x61 || v45 >= v41) {
              goto LABEL_144;
            }
            char v46 = -87;
          }
          else
          {
            char v46 = -55;
          }
        }
        else
        {
          char v46 = -48;
        }
        if (((v20 * (unsigned __int16)a3) & 0xFF00) != 0) {
          goto LABEL_143;
        }
        unsigned int v20 = (v20 * a3) + (v45 + v46);
        if ((v20 >> 8)) {
          goto LABEL_143;
        }
        ++v44;
        --v40;
      }
      while (v40);
LABEL_142:
      unsigned __int8 v16 = v20;
      unsigned __int8 v54 = 0;
      goto LABEL_145;
    }
    goto LABEL_143;
  }
LABEL_151:
  __break(1u);
  return result;
}

uint64_t sub_1000502F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  swift_bridgeObjectRetain();
  v8[0] = String.init<A>(_:)();
  v8[1] = v6;
  LOWORD(a4) = sub_100050380(v8, a3, a4);
  swift_bridgeObjectRelease();
  return (unsigned __int16)a4 & 0x1FF;
}

uint64_t sub_100050380(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  if ((v7 & 0x1000000000000000) == 0)
  {
    if ((v7 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v9 = HIBYTE(v7) & 0xF;
    v16[0] = v6;
    v16[1] = v7 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v8 = v16;
    goto LABEL_7;
  }
  uint64_t v6 = sub_10004D65C();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  *a1 = v6;
  a1[1] = v12;
  unint64_t v7 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v8 = (void *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  __int16 v13 = a3(v8, v9, a2);
  if (!v3) {
    return v13 & 0x1FF;
  }
  return v14;
}

unsigned __int8 *sub_100050458(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }
        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v20 = -87;
              }
              else
              {
                char v20 = -55;
              }
            }
            else
            {
              char v20 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) + (v19 + v20);
            if ((v8 >> 8)) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            unsigned int v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v26 = -87;
              }
              else
              {
                char v26 = -55;
              }
            }
            else
            {
              char v26 = -48;
            }
            if (((v24 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v24 = (v24 * a3) + (v25 + v26);
            if ((v24 >> 8)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100050700(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned __int16 v16 = 0;
    unsigned __int8 v55 = 0;
    goto LABEL_145;
  }
  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      uint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter();
    }
    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v27 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v28 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v29 = a3 + 55;
          }
          else
          {
            unsigned __int8 v28 = 97;
            unsigned __int8 v29 = 65;
          }
          if (a3 <= 10) {
            unsigned __int8 v30 = a3 + 48;
          }
          else {
            unsigned __int8 v30 = 58;
          }
          if (result)
          {
            LOWORD(v12) = 0;
            unsigned __int8 v31 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v32 = *v31;
              if (v32 < 0x30 || v32 >= v30)
              {
                if (v32 < 0x41 || v32 >= v29)
                {
                  unsigned __int16 v16 = 0;
                  char v17 = 1;
                  if (v32 < 0x61 || v32 >= v28) {
                    goto LABEL_144;
                  }
                  char v33 = -87;
                }
                else
                {
                  char v33 = -55;
                }
              }
              else
              {
                char v33 = -48;
              }
              if ((((unsigned __int16)v12 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
                goto LABEL_143;
              }
              int v12 = (unsigned __int16)(v12 * a3) + (v32 + v33);
              if ((v12 & 0x10000) != 0) {
                goto LABEL_143;
              }
              ++v31;
              --v27;
            }
            while (v27);
LABEL_76:
            unsigned __int16 v16 = v12;
            unsigned __int8 v55 = 0;
            goto LABEL_145;
          }
          goto LABEL_99;
        }
LABEL_143:
        unsigned __int16 v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }
      goto LABEL_150;
    }
    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v34 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v35 = a3 + 55;
        }
        else
        {
          unsigned __int8 v34 = 97;
          unsigned __int8 v35 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v36 = a3 + 48;
        }
        else {
          unsigned __int8 v36 = 58;
        }
        if (result)
        {
          LOWORD(v37) = 0;
          do
          {
            unsigned int v38 = *(unsigned __int8 *)result;
            if (v38 < 0x30 || v38 >= v36)
            {
              if (v38 < 0x41 || v38 >= v35)
              {
                unsigned __int16 v16 = 0;
                char v17 = 1;
                if (v38 < 0x61 || v38 >= v34) {
                  goto LABEL_144;
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            int v40 = (unsigned __int16)v37 * (unsigned __int16)a3;
            if ((v40 & 0xFFFF0000) != 0) {
              goto LABEL_143;
            }
            int v37 = (unsigned __int16)(v37 * a3) + (v38 + v39);
            if ((v37 & 0x10000) != 0) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }
          while (v6);
          unsigned __int16 v16 = v40 + (v38 + v39);
          unsigned __int8 v55 = 0;
          goto LABEL_145;
        }
        goto LABEL_99;
      }
      goto LABEL_143;
    }
    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }
        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          LOWORD(v12) = 0;
          int v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned __int16 v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }
              else
              {
                char v15 = -55;
              }
            }
            else
            {
              char v15 = -48;
            }
            if ((((unsigned __int16)v12 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_143;
            }
            int v12 = (unsigned __int16)(v12 * a3) - (v14 + v15);
            if ((v12 & 0xFFFF0000) != 0) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }
LABEL_99:
        unsigned __int16 v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v55 = v17;
LABEL_145:
        LOBYTE(v54[0]) = (a2 & 0x1000000000000000) != 0;
        return v16 | (v55 << 16) | (LOBYTE(v54[0]) << 24);
      }
      goto LABEL_143;
    }
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  uint64_t v18 = HIBYTE(a2) & 0xF;
  v54[0] = result;
  v54[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v18)
      {
        LOWORD(v20) = 0;
        unsigned __int8 v48 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v49 = a3 + 55;
        }
        else
        {
          unsigned __int8 v48 = 97;
          unsigned __int8 v49 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v50 = a3 + 48;
        }
        else {
          unsigned __int8 v50 = 58;
        }
        unsigned int v51 = (unsigned __int8 *)v54;
        while (1)
        {
          unsigned int v52 = *v51;
          if (v52 < 0x30 || v52 >= v50)
          {
            if (v52 < 0x41 || v52 >= v49)
            {
              unsigned __int16 v16 = 0;
              char v17 = 1;
              if (v52 < 0x61 || v52 >= v48) {
                goto LABEL_144;
              }
              char v53 = -87;
            }
            else
            {
              char v53 = -55;
            }
          }
          else
          {
            char v53 = -48;
          }
          if ((((unsigned __int16)v20 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
            goto LABEL_143;
          }
          int v20 = (unsigned __int16)(v20 * a3) + (v52 + v53);
          if ((v20 & 0x10000) != 0) {
            goto LABEL_143;
          }
          ++v51;
          if (!--v18) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    if (v18)
    {
      uint64_t v19 = v18 - 1;
      if (v19)
      {
        LOWORD(v20) = 0;
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        unsigned int v24 = (unsigned __int8 *)v54 + 1;
        while (1)
        {
          unsigned int v25 = *v24;
          if (v25 < 0x30 || v25 >= v23)
          {
            if (v25 < 0x41 || v25 >= v22)
            {
              unsigned __int16 v16 = 0;
              char v17 = 1;
              if (v25 < 0x61 || v25 >= v21) {
                goto LABEL_144;
              }
              char v26 = -87;
            }
            else
            {
              char v26 = -55;
            }
          }
          else
          {
            char v26 = -48;
          }
          if ((((unsigned __int16)v20 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
            goto LABEL_143;
          }
          int v20 = (unsigned __int16)(v20 * a3) - (v25 + v26);
          if ((v20 & 0xFFFF0000) != 0) {
            goto LABEL_143;
          }
          ++v24;
          if (!--v19) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    goto LABEL_149;
  }
  if (v18)
  {
    uint64_t v41 = v18 - 1;
    if (v41)
    {
      LOWORD(v20) = 0;
      unsigned __int8 v42 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v43 = a3 + 55;
      }
      else
      {
        unsigned __int8 v42 = 97;
        unsigned __int8 v43 = 65;
      }
      if (a3 <= 10) {
        unsigned __int8 v44 = a3 + 48;
      }
      else {
        unsigned __int8 v44 = 58;
      }
      unsigned int v45 = (unsigned __int8 *)v54 + 1;
      do
      {
        unsigned int v46 = *v45;
        if (v46 < 0x30 || v46 >= v44)
        {
          if (v46 < 0x41 || v46 >= v43)
          {
            unsigned __int16 v16 = 0;
            char v17 = 1;
            if (v46 < 0x61 || v46 >= v42) {
              goto LABEL_144;
            }
            char v47 = -87;
          }
          else
          {
            char v47 = -55;
          }
        }
        else
        {
          char v47 = -48;
        }
        if ((((unsigned __int16)v20 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
          goto LABEL_143;
        }
        int v20 = (unsigned __int16)(v20 * a3) + (v46 + v47);
        if ((v20 & 0x10000) != 0) {
          goto LABEL_143;
        }
        ++v45;
        --v41;
      }
      while (v41);
LABEL_142:
      unsigned __int16 v16 = v20;
      unsigned __int8 v55 = 0;
      goto LABEL_145;
    }
    goto LABEL_143;
  }
LABEL_151:
  __break(1u);
  return result;
}

uint64_t sub_100050CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  swift_bridgeObjectRetain();
  v8[0] = String.init<A>(_:)();
  v8[1] = v6;
  LODWORD(a4) = sub_100050D38(v8, a3, a4);
  swift_bridgeObjectRelease();
  return a4 & 0x1FFFF;
}

uint64_t sub_100050D38(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v6 = sub_10004D65C();
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    *a1 = v6;
    a1[1] = v12;
    unint64_t v7 = v12;
    if ((v12 & 0x2000000000000000) == 0)
    {
LABEL_3:
      if ((v6 & 0x1000000000000000) != 0)
      {
        uint64_t v8 = (void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v8 = (void *)_StringObject.sharedUTF8.getter();
      }
      goto LABEL_7;
    }
  }
  else if ((v7 & 0x2000000000000000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v9 = HIBYTE(v7) & 0xF;
  v14[0] = v6;
  v14[1] = v7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v8 = v14;
LABEL_7:
  uint64_t result = a3(v8, v9, a2);
  if (!v3) {
    return result & 0x1FFFF;
  }
  return result;
}

unsigned __int8 *sub_100050E08(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }
        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v20 = -87;
              }
              else
              {
                char v20 = -55;
              }
            }
            else
            {
              char v20 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            int v8 = (unsigned __int16)(v8 * a3) + (v19 + v20);
            if ((v8 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int16 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int16 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        if (result)
        {
          LOWORD(v24) = 0;
          do
          {
            unsigned int v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v26 = -87;
              }
              else
              {
                char v26 = -55;
              }
            }
            else
            {
              char v26 = -48;
            }
            if ((((unsigned __int16)v24 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            int v24 = (unsigned __int16)(v24 * a3) + (v25 + v26);
            if ((v24 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int16 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            int v8 = (unsigned __int16)(v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int16 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000510B0(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned int v16 = 0;
    unsigned __int8 v66 = 0;
    return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
  }
  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      uint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter();
    }
    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }
          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }
          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            unsigned int v12 = 0;
            unsigned __int8 v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned int v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }
                else
                {
                  char v37 = -55;
                }
              }
              else
              {
                char v37 = -48;
              }
              unint64_t v38 = v12 * (unint64_t)a3;
              if ((v38 & 0xFFFFFFFF00000000) != 0) {
                goto LABEL_143;
              }
              unsigned __int8 v39 = v36 + v37;
              unsigned int v12 = v38 + v39;
              if (__CFADD__(v38, v39)) {
                goto LABEL_143;
              }
              ++v35;
              --v31;
            }
            while (v31);
LABEL_76:
            unsigned int v16 = v12;
            unsigned __int8 v66 = 0;
            return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
          }
          goto LABEL_99;
        }
LABEL_143:
        unsigned int v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }
      goto LABEL_150;
    }
    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v40 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v41 = a3 + 55;
        }
        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v41 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v42 = a3 + 48;
        }
        else {
          unsigned __int8 v42 = 58;
        }
        if (result)
        {
          unsigned int v43 = 0;
          do
          {
            unsigned int v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                unsigned int v16 = 0;
                char v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                char v45 = -87;
              }
              else
              {
                char v45 = -55;
              }
            }
            else
            {
              char v45 = -48;
            }
            unint64_t v46 = v43 * (unint64_t)a3;
            if ((v46 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_143;
            }
            unsigned __int8 v47 = v44 + v45;
            unsigned int v43 = v46 + v47;
            if (__CFADD__(v46, v47)) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }
          while (v6);
          unsigned int v16 = v46 + v47;
          unsigned __int8 v66 = 0;
          return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
        }
        goto LABEL_99;
      }
      goto LABEL_143;
    }
    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }
        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          unsigned int v12 = 0;
          int v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned int v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }
              else
              {
                char v15 = -55;
              }
            }
            else
            {
              char v15 = -48;
            }
            unint64_t v18 = v12 * (unint64_t)a3;
            if ((v18 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_143;
            }
            unsigned __int8 v19 = v14 + v15;
            unsigned int v12 = v18 - v19;
            if (v18 < v19) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }
LABEL_99:
        unsigned int v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v66 = v17;
        return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
      }
      goto LABEL_143;
    }
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        unsigned int v22 = 0;
        unsigned __int8 v57 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v58 = a3 + 55;
        }
        else
        {
          unsigned __int8 v57 = 97;
          unsigned __int8 v58 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v59 = a3 + 48;
        }
        else {
          unsigned __int8 v59 = 58;
        }
        unsigned int v60 = (unsigned __int8 *)v65;
        while (1)
        {
          unsigned int v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              unsigned int v16 = 0;
              char v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              char v62 = -87;
            }
            else
            {
              char v62 = -55;
            }
          }
          else
          {
            char v62 = -48;
          }
          unint64_t v63 = v22 * (unint64_t)a3;
          if ((v63 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_143;
          }
          unsigned __int8 v64 = v61 + v62;
          unsigned int v22 = v63 + v64;
          if (__CFADD__(v63, v64)) {
            goto LABEL_143;
          }
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    if (v20)
    {
      uint64_t v21 = v20 - 1;
      if (v21)
      {
        unsigned int v22 = 0;
        unsigned __int8 v23 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v24 = a3 + 55;
        }
        else
        {
          unsigned __int8 v23 = 97;
          unsigned __int8 v24 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v25 = a3 + 48;
        }
        else {
          unsigned __int8 v25 = 58;
        }
        char v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          unsigned int v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              unsigned int v16 = 0;
              char v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          unint64_t v29 = v22 * (unint64_t)a3;
          if ((v29 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_143;
          }
          unsigned __int8 v30 = v27 + v28;
          unsigned int v22 = v29 - v30;
          if (v29 < v30) {
            goto LABEL_143;
          }
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    goto LABEL_149;
  }
  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      unsigned int v22 = 0;
      unsigned __int8 v49 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v50 = a3 + 55;
      }
      else
      {
        unsigned __int8 v49 = 97;
        unsigned __int8 v50 = 65;
      }
      if (a3 <= 10) {
        unsigned __int8 v51 = a3 + 48;
      }
      else {
        unsigned __int8 v51 = 58;
      }
      unsigned int v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        unsigned int v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            unsigned int v16 = 0;
            char v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            char v54 = -87;
          }
          else
          {
            char v54 = -55;
          }
        }
        else
        {
          char v54 = -48;
        }
        unint64_t v55 = v22 * (unint64_t)a3;
        if ((v55 & 0xFFFFFFFF00000000) != 0) {
          goto LABEL_143;
        }
        unsigned __int8 v56 = v53 + v54;
        unsigned int v22 = v55 + v56;
        if (__CFADD__(v55, v56)) {
          goto LABEL_143;
        }
        ++v52;
        --v48;
      }
      while (v48);
LABEL_142:
      unsigned int v16 = v22;
      unsigned __int8 v66 = 0;
      return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
    }
    goto LABEL_143;
  }
LABEL_151:
  __break(1u);
  return result;
}

uint64_t sub_1000515F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  swift_bridgeObjectRetain();
  v9[0] = String.init<A>(_:)();
  v9[1] = v6;
  unint64_t v7 = sub_100051688(v9, a3, a4);
  swift_bridgeObjectRelease();
  return v7 | ((HIDWORD(v7) & 1) << 32);
}

unint64_t sub_100051688(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v6 = sub_10004D65C();
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    *a1 = v6;
    a1[1] = v12;
    unint64_t v7 = v12;
    if ((v12 & 0x2000000000000000) == 0)
    {
LABEL_3:
      if ((v6 & 0x1000000000000000) != 0)
      {
        uint64_t v8 = (void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v8 = (void *)_StringObject.sharedUTF8.getter();
      }
      goto LABEL_7;
    }
  }
  else if ((v7 & 0x2000000000000000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v9 = HIBYTE(v7) & 0xF;
  v14[0] = v6;
  v14[1] = v7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v8 = v14;
LABEL_7:
  unint64_t result = a3(v8, v9, a2);
  if (!v3) {
    return result | ((HIDWORD(result) & 1) << 32);
  }
  return result;
}

unsigned __int8 *sub_100051760(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            unint64_t v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__CFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            unint64_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__CFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            unint64_t v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (v14 < v15) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000519E0(uint64_t result, unint64_t a2, int64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t result = 0;
    char v66 = 0;
    goto LABEL_130;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      unsigned __int8 v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t result = _StringObject.sharedUTF8.getter();
      unsigned __int8 v5 = (unsigned __int8 *)result;
    }
    int v7 = *v5;
    if (v7 == 43)
    {
      if (v6 < 1)
      {
LABEL_136:
        __break(1u);
        goto LABEL_137;
      }
      uint64_t v31 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v32 = a3 + 55;
        unsigned __int8 v33 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v34 = 58;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
          unsigned __int8 v34 = a3 + 48;
        }
        if (v5)
        {
          unint64_t v12 = 0;
          unsigned __int8 v35 = v5 + 1;
          do
          {
            unsigned int v36 = *v35;
            if (v36 < 0x30 || v36 >= v34)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                unint64_t result = 0;
                char v16 = 1;
                if (v36 < 0x61 || v36 >= v33) {
                  goto LABEL_90;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            if (!is_mul_ok(v12, a3)) {
              goto LABEL_131;
            }
            unint64_t v38 = v12 * a3;
            unsigned __int8 v39 = v36 + v37;
            BOOL v19 = __CFADD__(v38, v39);
            unint64_t v12 = v38 + v39;
            if (v19) {
              goto LABEL_131;
            }
            ++v35;
            --v31;
          }
          while (v31);
LABEL_69:
          unint64_t result = v12;
          char v66 = 0;
          goto LABEL_130;
        }
        goto LABEL_89;
      }
    }
    else
    {
      if (v7 == 45)
      {
        if (v6 >= 1)
        {
          uint64_t v8 = v6 - 1;
          if (v6 != 1)
          {
            unsigned __int8 v9 = a3 + 55;
            unsigned __int8 v10 = a3 + 87;
            if (a3 > 10)
            {
              unsigned __int8 v11 = 58;
            }
            else
            {
              unsigned __int8 v10 = 97;
              unsigned __int8 v9 = 65;
              unsigned __int8 v11 = a3 + 48;
            }
            if (v5)
            {
              unint64_t v12 = 0;
              unsigned __int8 v13 = v5 + 1;
              while (1)
              {
                unsigned int v14 = *v13;
                if (v14 < 0x30 || v14 >= v11)
                {
                  if (v14 < 0x41 || v14 >= v9)
                  {
                    unint64_t result = 0;
                    char v16 = 1;
                    if (v14 < 0x61 || v14 >= v10) {
                      goto LABEL_90;
                    }
                    char v15 = -87;
                  }
                  else
                  {
                    char v15 = -55;
                  }
                }
                else
                {
                  char v15 = -48;
                }
                if (!is_mul_ok(v12, a3)) {
                  goto LABEL_131;
                }
                unint64_t v17 = v12 * a3;
                unsigned __int8 v18 = v14 + v15;
                BOOL v19 = v17 >= v18;
                unint64_t v12 = v17 - v18;
                if (!v19) {
                  goto LABEL_131;
                }
                ++v13;
                if (!--v8) {
                  goto LABEL_69;
                }
              }
            }
LABEL_89:
            unint64_t result = 0;
            char v16 = 0;
LABEL_90:
            char v66 = v16;
            goto LABEL_130;
          }
          goto LABEL_131;
        }
        __break(1u);
        goto LABEL_135;
      }
      if (v6)
      {
        unsigned __int8 v40 = a3 + 55;
        unsigned __int8 v41 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v42 = 58;
        }
        else
        {
          unsigned __int8 v41 = 97;
          unsigned __int8 v40 = 65;
          unsigned __int8 v42 = a3 + 48;
        }
        if (!v5) {
          goto LABEL_89;
        }
        unint64_t v43 = 0;
        do
        {
          unsigned int v44 = *v5;
          if (v44 < 0x30 || v44 >= v42)
          {
            if (v44 < 0x41 || v44 >= v40)
            {
              unint64_t result = 0;
              char v16 = 1;
              if (v44 < 0x61 || v44 >= v41) {
                goto LABEL_90;
              }
              char v45 = -87;
            }
            else
            {
              char v45 = -55;
            }
          }
          else
          {
            char v45 = -48;
          }
          if (!is_mul_ok(v43, a3)) {
            goto LABEL_131;
          }
          unint64_t v46 = v43 * a3;
          unsigned __int8 v47 = v44 + v45;
          BOOL v19 = __CFADD__(v46, v47);
          unint64_t v43 = v46 + v47;
          if (v19) {
            goto LABEL_131;
          }
          ++v5;
          --v6;
        }
        while (v6);
        unint64_t result = v43;
        char v66 = 0;
LABEL_130:
        LOBYTE(v65[0]) = (a2 & 0x1000000000000000) != 0;
        return result;
      }
    }
LABEL_131:
    unint64_t result = 0;
    char v66 = 1;
    goto LABEL_130;
  }
  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result == 45)
    {
      if (!v20)
      {
LABEL_135:
        __break(1u);
        goto LABEL_136;
      }
      uint64_t v21 = v20 - 1;
      if (v21)
      {
        unint64_t v22 = 0;
        unsigned __int8 v23 = a3 + 55;
        unsigned __int8 v24 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v25 = 58;
        }
        else
        {
          unsigned __int8 v24 = 97;
          unsigned __int8 v23 = 65;
          unsigned __int8 v25 = a3 + 48;
        }
        unsigned __int8 v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          unsigned int v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v23)
            {
              unint64_t result = 0;
              if (v27 < 0x61 || v27 >= v24) {
                goto LABEL_129;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          if (!is_mul_ok(v22, a3)) {
            break;
          }
          unint64_t v29 = v22 * a3;
          unsigned __int8 v30 = v27 + v28;
          BOOL v19 = v29 >= v30;
          unint64_t v22 = v29 - v30;
          if (!v19) {
            break;
          }
          ++v26;
          if (!--v21) {
            goto LABEL_127;
          }
        }
      }
    }
    else if (v20)
    {
      unint64_t v22 = 0;
      unsigned __int8 v57 = a3 + 55;
      unsigned __int8 v58 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v59 = 58;
      }
      else
      {
        unsigned __int8 v58 = 97;
        unsigned __int8 v57 = 65;
        unsigned __int8 v59 = a3 + 48;
      }
      unsigned int v60 = (unsigned __int8 *)v65;
      while (1)
      {
        unsigned int v61 = *v60;
        if (v61 < 0x30 || v61 >= v59)
        {
          if (v61 < 0x41 || v61 >= v57)
          {
            unint64_t result = 0;
            if (v61 < 0x61 || v61 >= v58) {
              goto LABEL_129;
            }
            char v62 = -87;
          }
          else
          {
            char v62 = -55;
          }
        }
        else
        {
          char v62 = -48;
        }
        if (!is_mul_ok(v22, a3)) {
          break;
        }
        unint64_t v63 = v22 * a3;
        unsigned __int8 v64 = v61 + v62;
        BOOL v19 = __CFADD__(v63, v64);
        unint64_t v22 = v63 + v64;
        if (v19) {
          break;
        }
        ++v60;
        if (!--v20) {
          goto LABEL_127;
        }
      }
    }
LABEL_128:
    unint64_t result = 0;
LABEL_129:
    char v66 = 1;
    goto LABEL_130;
  }
  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      unint64_t v22 = 0;
      unsigned __int8 v49 = a3 + 55;
      unsigned __int8 v50 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v51 = 58;
      }
      else
      {
        unsigned __int8 v50 = 97;
        unsigned __int8 v49 = 65;
        unsigned __int8 v51 = a3 + 48;
      }
      unsigned int v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        unsigned int v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v49)
          {
            unint64_t result = 0;
            if (v53 < 0x61 || v53 >= v50) {
              goto LABEL_129;
            }
            char v54 = -87;
          }
          else
          {
            char v54 = -55;
          }
        }
        else
        {
          char v54 = -48;
        }
        if (!is_mul_ok(v22, a3)) {
          goto LABEL_128;
        }
        unint64_t v55 = v22 * a3;
        unsigned __int8 v56 = v53 + v54;
        BOOL v19 = __CFADD__(v55, v56);
        unint64_t v22 = v55 + v56;
        if (v19) {
          goto LABEL_128;
        }
        ++v52;
        --v48;
      }
      while (v48);
LABEL_127:
      unint64_t result = v22;
      char v66 = 0;
      goto LABEL_130;
    }
    goto LABEL_128;
  }
LABEL_137:
  __break(1u);
  return result;
}

uint64_t sub_100051F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  swift_bridgeObjectRetain();
  v9[0] = String.init<A>(_:)();
  v9[1] = v6;
  uint64_t v7 = sub_10004DBCC(v9, a3, a4);
  swift_bridgeObjectRelease();
  return v7;
}

unsigned __int8 *sub_100051FE0(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v14 = v9 * a3;
              unsigned __int8 v15 = v11 + v12;
              BOOL v16 = v14 >= v15;
              unint64_t v9 = v14 - v15;
              if (!v16) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      unsigned __int8 v26 = a3 + 48;
      unsigned __int8 v27 = a3 + 55;
      unsigned __int8 v28 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v26 = 58;
      }
      else
      {
        unsigned __int8 v28 = 97;
        unsigned __int8 v27 = 65;
      }
      if (result)
      {
        unint64_t v29 = 0;
        do
        {
          unsigned int v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              uint64_t v13 = 0;
              if (v30 < 0x61 || v30 >= v28) {
                return (unsigned __int8 *)v13;
              }
              char v31 = -87;
            }
            else
            {
              char v31 = -55;
            }
          }
          else
          {
            char v31 = -48;
          }
          if (!is_mul_ok(v29, a3)) {
            return 0;
          }
          unint64_t v32 = v29 * a3;
          unsigned __int8 v33 = v30 + v31;
          BOOL v16 = __CFADD__(v32, v33);
          unint64_t v29 = v32 + v33;
          if (v16) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  uint64_t v17 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v18 = a3 + 48;
  unsigned __int8 v19 = a3 + 55;
  unsigned __int8 v20 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v18 = 58;
  }
  else
  {
    unsigned __int8 v20 = 97;
    unsigned __int8 v19 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  uint64_t v21 = result + 1;
  do
  {
    unsigned int v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        uint64_t v13 = 0;
        if (v22 < 0x61 || v22 >= v20) {
          return (unsigned __int8 *)v13;
        }
        char v23 = -87;
      }
      else
      {
        char v23 = -55;
      }
    }
    else
    {
      char v23 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v24 = v9 * a3;
    unsigned __int8 v25 = v22 + v23;
    BOOL v16 = __CFADD__(v24, v25);
    unint64_t v9 = v24 + v25;
    if (v16) {
      return 0;
    }
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10005225C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702195828 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65736C6166 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v6 & 1) == 0) {
      return 2;
    }
  }
  return result;
}

unsigned char *sub_100052330@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1000523A0(a1, (uint64_t (*)(void))&__swift_stdlib_strtod_clocale, a2);
}

void *sub_10005235C@<X0>(unsigned char *a1@<X8>)
{
  return sub_100052418(a1);
}

unsigned char *sub_100052374@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1000523A0(a1, (uint64_t (*)(void))&__swift_stdlib_strtof_clocale, a2);
}

unsigned char *sub_1000523A0@<X0>(unsigned char *result@<X0>, uint64_t (*a2)(void)@<X1>, BOOL *a3@<X8>)
{
  unsigned int v4 = *result;
  BOOL v5 = v4 > 0x20;
  uint64_t v6 = (1 << v4) & 0x100003E01;
  BOOL v7 = v5 || v6 == 0;
  v8 = v7 && (uint64_t result = (unsigned char *)a2()) != 0 && *result == 0;
  *a3 = v8;
  return result;
}

void *sub_100052418@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_10005245C(uint64_t a1, unint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v8 = a3();
    if ((v9 & 0x100) != 0)
    {
      uint64_t v10 = sub_100051F50(a1, a2, 10, a4);
      char v14 = v13;
      swift_bridgeObjectRelease();
      int v12 = v14 & 1;
    }
    else
    {
      uint64_t v10 = v8;
      char v11 = v9;
      swift_bridgeObjectRelease();
      int v12 = v11 & 1;
    }
    if (v12) {
      return 0;
    }
    else {
      return v10;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_100052528(uint64_t a1, unint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    unsigned int v8 = a3();
    if ((v8 & 0x10000) != 0) {
      unsigned int v8 = sub_1000502F8(a1, a2, 10, a4);
    }
    unsigned int v9 = v8;
    swift_bridgeObjectRelease();
    int v10 = (v9 >> 8) & 1;
    if (v10) {
      unsigned __int8 v11 = 0;
    }
    else {
      unsigned __int8 v11 = v9;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v11 = 0;
    int v10 = 1;
  }
  return v11 | (v10 << 8);
}

uint64_t sub_1000525D8(uint64_t a1, unint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    int v8 = a3();
    if ((v8 & 0x1000000) != 0) {
      int v8 = sub_100050CB0(a1, a2, 10, a4);
    }
    swift_bridgeObjectRelease();
    unsigned int v9 = (v8 & 0x10000u) >> 16;
    if ((v8 & 0x10000) != 0) {
      int v10 = 0;
    }
    else {
      int v10 = (unsigned __int16)v8;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    int v10 = 0;
    LOBYTE(v9) = 1;
  }
  return v10 & 0xFFFEFFFF | ((v9 & 1) << 16);
}

unint64_t sub_10005268C(uint64_t a1, unint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v8 = a3();
    if ((v8 & 0x10000000000) != 0) {
      uint64_t v8 = sub_1000515F8(a1, a2, 10, a4);
    }
    swift_bridgeObjectRelease();
    unint64_t v9 = (v8 & (unint64_t)&_mh_execute_header) >> 32;
    uint64_t v10 = v8;
    if ((v8 & (unint64_t)&_mh_execute_header) != 0) {
      uint64_t v10 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = 0;
    LOBYTE(v9) = 1;
  }
  return v10 | ((v9 & 1) << 32);
}

void static ParsableArguments.exit(withError:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = v3;
    uint64_t v6 = a1;
    swift_errorRetain();
    sub_10008C764(v6, v4, a3, (uint64_t)v14);
    uint64_t v7 = sub_10008E5CC(v4, a3);
    uint64_t v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0) {
      uint64_t v9 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v9)
    {
      uint64_t v10 = v7;
      unint64_t v11 = v8;
      sub_100053590((uint64_t)v14, (uint64_t)v18);
      int v12 = v18[48];
      sub_100003DD0(&qword_1000C5550);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_1000A2660;
      *(void *)(v13 + 56) = &type metadata for String;
      *(void *)(v13 + 32) = v10;
      *(void *)(v13 + 40) = v11;
      if (!v12)
      {
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
        exit(0);
      }
      sub_1000535EC();
      print<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
    }
    sub_100053590((uint64_t)v14, (uint64_t)v15);
    LODWORD(a1) = v17;
    if (v17)
    {
      if (v17 == 1) {
        exit(64);
      }
      LODWORD(a1) = v16;
    }
  }
  exit(a1);
}

unint64_t sub_100052890(unint64_t a1)
{
  uint64_t v2 = sub_100003DD0(&qword_1000C55E0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v18 = a1;
  swift_getMetatypeMetadata();
  uint64_t v5 = String.init<A>(describing:)();
  unint64_t v7 = sub_100055A44(95, 0xE100000000000000, v5, v6);
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  unint64_t v18 = v7;
  unint64_t v19 = v9;
  v17[0] = 0x736E6F6974706F5FLL;
  v17[1] = 0xE800000000000000;
  uint64_t v10 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v4, 1, 1, v10);
  sub_1000319D0();
  StringProtocol.range<A>(of:options:range:locale:)();
  unint64_t v12 = v11;
  char v14 = v13;
  sub_1000556DC((uint64_t)v4, &qword_1000C55E0);
  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
    uint64_t v15 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0) {
      uint64_t v15 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v12 >> 14 == 4 * v15)
    {
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v7 = static String._fromSubstring(_:)();
      swift_bridgeObjectRelease();
    }
  }
  return v7;
}

uint64_t sub_100052A88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OptionGroup();

  return OptionGroup.wrappedValue.getter(v2, a1);
}

uint64_t sub_100052AC8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_100052B50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100052AC8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100052B84@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static ExitCode.failure.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100052BB4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100052C08(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_100052C5C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v7 = type metadata accessor for OptionGroup();
  uint64_t v23 = *(void *)(v7 - 8);
  uint64_t v24 = v7;
  __chkstk_darwin(v7);
  unsigned __int8 v25 = (char *)&v20 - v8;
  type metadata accessor for _WrappedParsableCommand.CodingKeys();
  swift_getWitnessTable();
  uint64_t v26 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v22 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v28 = type metadata accessor for _WrappedParsableCommand();
  uint64_t v11 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  char v13 = (char *)&v20 - v12;
  OptionGroup.init(title:visibility:)(0, 0xE000000000000000, 0, a2, a3, (uint64_t)&v20 - v12);
  sub_100005090(a1, a1[3]);
  uint64_t v14 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
  {
    sub_100005128((uint64_t)a1);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v28);
  }
  else
  {
    uint64_t v15 = v22;
    uint64_t v16 = v23;
    uint64_t v17 = v24;
    swift_getWitnessTable();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v26);
    (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v25, v17);
    uint64_t v18 = v28;
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v21, v13, v28);
    sub_100005128((uint64_t)a1);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v18);
  }
}

unint64_t sub_100052FA0(uint64_t a1)
{
  return sub_100052890(*(void *)(a1 + 16));
}

uint64_t sub_100052FA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return OptionGroup.init()(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t sub_100052FB4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100052C5C(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_100052FD4()
{
  uint64_t v1 = v0;
  if (!swift_conformsToProtocol2()) {
    uint64_t v1 = 0;
  }
  if (!v1)
  {
    uint64_t v1 = type metadata accessor for _WrappedParsableCommand();
    swift_getWitnessTable();
  }
  return v1;
}

uint64_t static ParsableArguments.parse(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 v39 = (char *)a4;
  uint64_t v41 = *(void *)(a2 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v37 - v10;
  uint64_t v12 = type metadata accessor for _WrappedParsableCommand();
  uint64_t v40 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v37 - v16;
  sub_100052FD4();
  uint64_t v18 = v50;
  uint64_t result = static ParsableCommand.parseAsRoot(_:)(a1, v19, (uint64_t)v49);
  if (!v18)
  {
    unint64_t v38 = v15;
    uint64_t v50 = a2;
    uint64_t v21 = v12;
    uint64_t v23 = v40;
    uint64_t v22 = v41;
    sub_100003DD0(&qword_1000C5528);
    if (swift_dynamicCast())
    {
      uint64_t v24 = v42;
      uint64_t v25 = v43;
      char v26 = v44;
      uint64_t v27 = v45;
      uint64_t v28 = v46;
      char v29 = v47;
      uint64_t v30 = v48;
      sub_10002FDE0();
      swift_allocError();
      *(void *)uint64_t v31 = v30;
      *(_OWORD *)(v31 + 8) = 0u;
      *(_OWORD *)(v31 + 24) = 0u;
      *(_OWORD *)(v31 + 40) = 0u;
      *(_OWORD *)(v31 + 56) = 0u;
      *(_OWORD *)(v31 + 65) = 0u;
      swift_willThrow();
      sub_100053658(v24, v25, v26);
      sub_100002804(v27, v28, v29);
      swift_bridgeObjectRelease();
    }
    else if (swift_dynamicCast())
    {
      unint64_t v32 = v38;
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v38, v17, v21);
      uint64_t v33 = type metadata accessor for OptionGroup();
      OptionGroup.wrappedValue.getter(v33, (uint64_t)v39);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v32, v21);
    }
    else
    {
      uint64_t v34 = v50;
      if (swift_dynamicCast())
      {
        unsigned __int8 v35 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
        v35(v9, v11, v34);
        (*(void (**)(uint64_t, uint64_t))(a3 + 24))(v34, a3);
        v35(v39, v9, v34);
      }
      else
      {
        sub_10002FDE0();
        swift_allocError();
        *(void *)uint64_t v36 = 3;
        *(_OWORD *)(v36 + 8) = 0u;
        *(_OWORD *)(v36 + 24) = 0u;
        *(_OWORD *)(v36 + 40) = 0u;
        *(_OWORD *)(v36 + 56) = 0u;
        *(void *)(v36 + 72) = 0;
        *(unsigned char *)(v36 + 80) = 15;
        swift_willThrow();
      }
    }
    return sub_100005128((uint64_t)v49);
  }
  return result;
}

uint64_t static ParsableArguments.message(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_errorRetain();
  sub_10008C764(a1, v3, a3, (uint64_t)v8);
  sub_100053590((uint64_t)v8, (uint64_t)&v9);
  uint64_t v6 = v9;
  swift_bridgeObjectRetain();
  sub_100053668((uint64_t)v8);
  return v6;
}

uint64_t static ParsableArguments.fullMessage(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  swift_errorRetain();
  sub_10008C764(a1, v4, a3, (uint64_t)v9);
  uint64_t v7 = sub_10008E5CC(v4, a3);
  sub_100053668((uint64_t)v9);
  return v7;
}

uint64_t sub_100053590(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_1000535EC()
{
  unint64_t result = qword_1000C5558[0];
  if (!qword_1000C5558[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1000C5558);
  }
  return result;
}

uint64_t type metadata accessor for _WrappedParsableCommand()
{
  return sub_10003A4F0();
}

uint64_t sub_100053658(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100053668(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000536A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 && a7 != 2)
  {
    if (a7 != 1) {
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t static ParsableArguments.helpMessage(columns:)(uint64_t a1, char a2)
{
  return static ParsableArguments.helpMessage(includeHidden:columns:)(0, a1, a2 & 1);
}

uint64_t static ParsableArguments.helpMessage(includeHidden:columns:)(char a1, uint64_t a2, char a3)
{
  char v5 = a3 & 1;
  sub_100003DD0(&qword_1000C50C0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1000A2660;
  *(void *)(v6 + 32) = sub_100052FD4();
  *(void *)(v6 + 40) = v7;
  sub_10008ADD8(v6, a1 & 1, (uint64_t)v10);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_100085ECC(a2, v5);
  sub_100054768((uint64_t)v10);
  return v8;
}

uint64_t static ParsableArguments._dumpHelp()()
{
  sub_100003DD0(&qword_1000C50C0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1000A2660;
  *(void *)(v0 + 32) = sub_100052FD4();
  *(void *)(v0 + 40) = v1;
  sub_100082130(v0, (uint64_t)&v4);
  uint64_t v10 = 0;
  long long v11 = v4;
  uint64_t v12 = v5;
  long long v13 = v6;
  long long v14 = v7;
  long long v15 = v8;
  long long v16 = v9;
  uint64_t v2 = sub_1000810AC();
  sub_1000547D0((uint64_t)&v4);
  return v2;
}

uint64_t static ParsableArguments.exitCode(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_errorRetain();
  sub_10008C764(a1, v3, a3, (uint64_t)v8);
  sub_100053590((uint64_t)v8, (uint64_t)v9);
  uint64_t v6 = v11;
  if (v11)
  {
    if (v11 == 1) {
      uint64_t v6 = 64;
    }
    else {
      uint64_t v6 = v10;
    }
  }
  sub_100053668((uint64_t)v8);
  return v6;
}

uint64_t static ParsableArguments.completionScript(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100052FD4();
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_10002F49C(a1, a2, v4, v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t static ParsableArguments.parseOrExit(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static ParsableArguments.parse(_:)(a1, a2, a3, a4);
}

uint64_t sub_1000539FC(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2 = result;
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v40 = result + 32;
  uint64_t v6 = result + 56;
  unsigned __int8 v39 = _swiftEmptyArrayStorage;
  unint64_t v7 = 2 - a2;
  unint64_t v38 = v7;
  while (1)
  {
    if (v4)
    {
      unint64_t v8 = *(void *)(v4 + 16);
      if (v3 != v8) {
        goto LABEL_13;
      }
    }
    unint64_t v9 = *(void *)(v2 + 16);
    if (v5 == v9) {
      goto LABEL_20;
    }
    if (v5 >= v9) {
      break;
    }
    uint64_t v10 = 16 * v5;
    uint64_t v11 = *(void *)(v40 + 16 * v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = sub_1000558E8(v4);
    ++v5;
    uint64_t v12 = v6 + v10;
    uint64_t v4 = v11;
    if (!v11) {
      goto LABEL_8;
    }
LABEL_7:
    unint64_t v8 = *(void *)(v4 + 16);
    if (!v8)
    {
LABEL_8:
      while (1)
      {
        unint64_t v13 = *(void *)(v2 + 16);
        if (v5 == v13) {
          break;
        }
        if (v5 >= v13) {
          goto LABEL_21;
        }
        uint64_t v14 = *(void *)(v12 - 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t result = sub_1000558E8(v4);
        ++v5;
        v12 += 16;
        uint64_t v4 = v14;
        if (v14) {
          goto LABEL_7;
        }
      }
LABEL_20:
      swift_bridgeObjectRelease();
      sub_1000558E8(v4);
      return (uint64_t)v39;
    }
    unint64_t v3 = 0;
    unint64_t v7 = v38;
LABEL_13:
    if (v3 >= v8) {
      goto LABEL_22;
    }
    long long v15 = (_OWORD *)(v4 + 192 * v3);
    long long v16 = v15[2];
    long long v17 = v15[3];
    long long v18 = v15[5];
    long long v43 = v15[4];
    long long v44 = v18;
    long long v41 = v16;
    long long v42 = v17;
    long long v19 = v15[6];
    long long v20 = v15[7];
    long long v21 = v15[9];
    long long v47 = v15[8];
    long long v48 = v21;
    long long v45 = v19;
    long long v46 = v20;
    long long v22 = v15[10];
    long long v23 = v15[11];
    long long v24 = v15[13];
    long long v51 = v15[12];
    long long v52 = v24;
    long long v49 = v22;
    long long v50 = v23;
    ++v3;
    if (2 - (unint64_t)BYTE8(v47) >= v7)
    {
      sub_10002E940((uint64_t)&v41);
      uint64_t v25 = v39;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      unsigned int v53 = v39;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100056FB8(0, v39[2] + 1, 1);
        uint64_t v25 = v53;
      }
      unint64_t v27 = v25[2];
      unint64_t v26 = v25[3];
      if (v27 >= v26 >> 1)
      {
        uint64_t result = (uint64_t)sub_100056FB8((char *)(v26 > 1), v27 + 1, 1);
        uint64_t v25 = v53;
      }
      v25[2] = v27 + 1;
      unsigned __int8 v39 = v25;
      uint64_t v28 = &v25[24 * v27];
      long long v29 = v41;
      long long v30 = v42;
      long long v31 = v44;
      v28[4] = v43;
      v28[5] = v31;
      v28[2] = v29;
      v28[3] = v30;
      long long v32 = v45;
      long long v33 = v46;
      long long v34 = v48;
      v28[8] = v47;
      v28[9] = v34;
      v28[6] = v32;
      v28[7] = v33;
      long long v35 = v49;
      long long v36 = v50;
      long long v37 = v52;
      v28[12] = v51;
      v28[13] = v37;
      v28[10] = v35;
      v28[11] = v36;
      unint64_t v7 = v38;
    }
  }
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_100053C7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v94 = a4;
  int v87 = a3;
  uint64_t v93 = 0;
  uint64_t v10 = type metadata accessor for Mirror();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
  *((void *)&v109 + 1) = a1;
  *(void *)&long long v110 = a2;
  sub_10000A954((uint64_t *)&v108);
  v14(a1, a2);
  uint64_t v15 = *((void *)&v109 + 1);
  long long v16 = sub_100005090(&v108, *((uint64_t *)&v109 + 1));
  *((void *)&v107[0] + 1) = v15;
  long long v17 = sub_10000A954((uint64_t *)&v106);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v17, v16, v15);
  Mirror.init(reflecting:)();
  sub_100005128((uint64_t)&v108);
  uint64_t v18 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_retain();
  uint64_t v19 = dispatch thunk of _AnySequenceBox._makeIterator()();
  v84[1] = v18;
  swift_release();
  uint64_t v95 = v19;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((void *)&v110 + 1))
  {
    long long v20 = &v105;
    long long v21 = v107;
    uint64_t v92 = (char *)&type metadata for Any + 8;
    long long v91 = xmmword_1000A2660;
    int v96 = (char *)_swiftEmptyArrayStorage;
    uint64_t v86 = a6;
    uint64_t v85 = a5;
    uint64_t v90 = &v105;
    unint64_t v89 = v107;
    while (1)
    {
      long long v106 = v108;
      v107[0] = v109;
      v107[1] = v110;
      unint64_t v23 = *((void *)&v108 + 1);
      uint64_t v22 = v108;
      long long v104 = v108;
      sub_100055680((uint64_t)v21, (uint64_t)v20);
      if (v23) {
        break;
      }
      sub_100005128((uint64_t)v20);
      sub_1000556DC((uint64_t)&v106, &qword_1000C55E8);
LABEL_4:
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!*((void *)&v110 + 1)) {
        goto LABEL_53;
      }
    }
    swift_bridgeObjectRetain();
    sub_100005128((uint64_t)v20);
    long long v104 = v106;
    sub_100055680((uint64_t)v21, (uint64_t)v20);
    sub_100003DD0(&qword_1000C55F0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v100 = 0;
      memset(v99, 0, sizeof(v99));
      sub_1000556DC((uint64_t)v99, &qword_1000C55F8);
      sub_100055680((uint64_t)v21, (uint64_t)&v104);
      sub_100003DD0(&qword_1000C5360);
      swift_dynamicCast();
      uint64_t v27 = v102;
      sub_1000556DC((uint64_t)v101, &qword_1000C5360);
      if (v27)
      {
        sub_100055680((uint64_t)v21, (uint64_t)&v104);
      }
      else
      {
        long long v104 = 0u;
        long long v105 = 0u;
      }
      uint64_t v28 = v94;
      sub_100055738(v94, a5);
      uint64_t v29 = sub_100075F04(v22, v23, v28, a5, a6);
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      sub_100041854((uint64_t)&v104, (uint64_t)v101);
      BOOL v34 = v102 != 0;
      sub_100003DD0(&qword_1000C5600);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = v91;
      *(void *)(v35 + 32) = v29;
      *(void *)(v35 + 40) = v31;
      *(void *)(v35 + 48) = v33;
      long long v36 = (void *)swift_allocObject();
      v36[2] = sub_100065CC8;
      v36[3] = 0;
      v36[4] = v29;
      v36[5] = v31;
      v36[6] = v33;
      sub_100041854((uint64_t)v101, (uint64_t)v99);
      long long v37 = (void *)swift_allocObject();
      v37[2] = 1;
      sub_100055858((uint64_t)v99, (uint64_t)(v37 + 3));
      v37[7] = v29;
      v37[8] = v31;
      v37[9] = v33;
      char v98 = 1;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_1000556DC((uint64_t)v101, &qword_1000C5360);
      sub_1000556DC((uint64_t)&v104, &qword_1000C5360);
      sub_100003DD0(&qword_1000C5230);
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = v91;
      *(void *)(v38 + 32) = 1;
      *(void *)(v38 + 40) = v34;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(void *)(v38 + 64) = v35;
      *(void *)(v38 + 72) = _swiftEmptyArrayStorage;
      *(unsigned char *)(v38 + 80) = 0;
      *(void *)(v38 + 88) = 0;
      *(void *)(v38 + 96) = 0xE000000000000000;
      *(void *)(v38 + 104) = 0;
      *(void *)(v38 + 112) = 0xE000000000000000;
      *(void *)(v38 + 120) = 0;
      *(void *)(v38 + 128) = 0xE000000000000000;
      *(unsigned char *)(v38 + 136) = 2;
      *(void *)(v38 + 144) = 0;
      *(void *)(v38 + 152) = 0xE000000000000000;
      *(void *)(v38 + 160) = 0;
      *(void *)(v38 + 168) = 0;
      *(_WORD *)(v38 + 176) = 4;
      *(void *)(v38 + 184) = sub_1000557C4;
      *(void *)(v38 + 192) = v36;
      *(unsigned char *)(v38 + 200) = v98;
      *(void *)(v38 + 208) = sub_1000558C0;
      *(void *)(v38 + 216) = v37;
      sub_100083AB4((uint64_t)_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease();
      uint64_t v39 = swift_bridgeObjectRetain();
      uint64_t v40 = v93;
      uint64_t v41 = sub_10008318C(v39);
      uint64_t v93 = v40;
      swift_bridgeObjectRelease();
      uint64_t v42 = *(void *)(v41 + 16);
      uint64_t v88 = v41;
      if (v42)
      {
        sub_100003DD0(qword_1000C5608);
        long long v43 = (void *)static _DictionaryStorage.allocate(capacity:)();
        uint64_t v44 = *(void *)(v41 + 16);
        *(void *)&v99[0] = v43;
        uint64_t v97 = v44;
        if (v44)
        {
          uint64_t v45 = 0;
          long long v46 = (void *)(v41 + 56);
          while (1)
          {
            uint64_t v49 = v45 + 1;
            if (__OFADD__(v45, 1)) {
              break;
            }
            uint64_t v51 = *(v46 - 3);
            uint64_t v50 = *(v46 - 2);
            int v52 = *((unsigned __int8 *)v46 - 8);
            uint64_t v53 = *v46;
            sub_1000319B8(v51, v50, *((unsigned char *)v46 - 8));
            unint64_t v54 = sub_100060BB4(v51, v50, v52);
            uint64_t v56 = v43[2];
            BOOL v57 = (v55 & 1) == 0;
            BOOL v58 = __OFADD__(v56, v57);
            uint64_t v59 = v56 + v57;
            if (v58) {
              goto LABEL_55;
            }
            char v60 = v55;
            if (v43[3] < v59)
            {
              sub_10007AAE8(v59, 1);
              long long v43 = *(void **)&v99[0];
              unint64_t v54 = sub_100060BB4(v51, v50, v52);
              if ((v60 & 1) != (v61 & 1)) {
                goto LABEL_57;
              }
            }
            if (v60)
            {
              uint64_t v47 = 8 * v54;
              uint64_t v48 = *(void *)(v43[7] + 8 * v54);
              sub_10002ECB8(v51, v50, v52);
              *(void *)(v43[7] + v47) = v48;
            }
            else
            {
              v43[(v54 >> 6) + 8] |= 1 << v54;
              uint64_t v62 = v43[6] + 24 * v54;
              *(void *)uint64_t v62 = v51;
              *(void *)(v62 + 8) = v50;
              *(unsigned char *)(v62 + 16) = v52;
              *(void *)(v43[7] + 8 * v54) = v53;
              uint64_t v63 = v43[2];
              BOOL v58 = __OFADD__(v63, 1);
              uint64_t v64 = v63 + 1;
              if (v58) {
                goto LABEL_56;
              }
              void v43[2] = v64;
            }
            v46 += 4;
            ++v45;
            if (v49 == v97) {
              goto LABEL_27;
            }
          }
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
      }
      else
      {
        long long v43 = &_swiftEmptyDictionarySingleton;
      }
LABEL_27:
      swift_bridgeObjectRelease();
      a6 = v86;
      a5 = v85;
      goto LABEL_46;
    }
    sub_10004B100(v99, (uint64_t)v101);
    uint64_t v24 = v102;
    uint64_t v25 = v103;
    sub_100005090(v101, v102);
    char v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
    if ((_BYTE)v87)
    {
      if (v87 == 1 && (v26 & 7) == 2) {
        goto LABEL_10;
      }
    }
    else if ((6u >> (v26 & 7)))
    {
LABEL_10:
      swift_bridgeObjectRelease();
      sub_100005128((uint64_t)v101);
      sub_1000556DC((uint64_t)&v106, &qword_1000C55E8);
LABEL_51:
      long long v20 = v90;
      long long v21 = v89;
      goto LABEL_4;
    }
    uint64_t v65 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0) {
      uint64_t v65 = v22 & 0xFFFFFFFFFFFFLL;
    }
    if (v65)
    {
      swift_bridgeObjectRetain();
      sub_100055738(v94, a5);
      uint64_t v66 = String.subscript.getter();
      uint64_t v68 = v67;
      swift_bridgeObjectRelease();
      if (v66 == 95 && v68 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
LABEL_37:
        sub_100034DE0(1uLL, v22, v23);
        swift_bridgeObjectRelease();
        uint64_t v22 = static String._fromSubstring(_:)();
        unint64_t v23 = v70;
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v69) {
        goto LABEL_37;
      }
    }
    else
    {
      sub_100055738(v94, a5);
    }
LABEL_38:
    if (a5)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v71 = (char *)a6;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v71 = sub_10005FA90(0, *(void *)(a6 + 16) + 1, 1, (char *)a6);
      }
      unint64_t v73 = *((void *)v71 + 2);
      unint64_t v72 = *((void *)v71 + 3);
      if (v73 >= v72 >> 1) {
        int v71 = sub_10005FA90((char *)(v72 > 1), v73 + 1, 1, v71);
      }
      *((void *)v71 + 2) = v73 + 1;
      uint64_t v74 = &v71[16 * v73];
      *((void *)v74 + 4) = v94;
      *((void *)v74 + 5) = a5;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      int v71 = (char *)_swiftEmptyArrayStorage;
    }
    uint64_t v75 = v102;
    uint64_t v76 = v103;
    sub_100005090(v101, v102);
    uint64_t v38 = (*(uint64_t (**)(uint64_t, unint64_t, char *, uint64_t, uint64_t))(v76 + 8))(v22, v23, v71, v75, v76);
    long long v43 = v77;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100005128((uint64_t)v101);
LABEL_46:
    sub_1000556DC((uint64_t)&v106, &qword_1000C55E8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v96 = sub_10005FDD0(0, *((void *)v96 + 2) + 1, 1, v96);
    }
    unint64_t v79 = *((void *)v96 + 2);
    unint64_t v78 = *((void *)v96 + 3);
    if (v79 >= v78 >> 1) {
      int v96 = sub_10005FDD0((char *)(v78 > 1), v79 + 1, 1, v96);
    }
    uint64_t v80 = v96;
    *((void *)v96 + 2) = v79 + 1;
    char v81 = &v80[16 * v79];
    *((void *)v81 + 4) = v38;
    *((void *)v81 + 5) = v43;
    goto LABEL_51;
  }
  int v96 = (char *)_swiftEmptyArrayStorage;
LABEL_53:
  swift_release();
  swift_release();
  sub_10005563C(v94, a5);
  uint64_t v82 = sub_1000539FC((uint64_t)v96, v87);
  return sub_100083798(v82);
}

uint64_t sub_100054768(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000547D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100054858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_100054860()
{
  uint64_t result = type metadata accessor for OptionGroup();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1000548F0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v5 + 64) <= 0x10uLL) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 10) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unsigned int v10 = a2[v6];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v12 = v6;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a2;
          goto LABEL_19;
        case 2:
          int v13 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v13 = *(_DWORD *)a2;
LABEL_19:
          int v14 = (v13 | (v11 << (8 * v6))) + 2;
          unsigned int v10 = v13 + 2;
          if (v6 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v15 = v6 + 1;
    if (v10 == 1)
    {
      uint64_t v16 = *((void *)a2 + 1);
      *uint64_t v4 = *(void *)a2;
      v4[1] = v16;
      swift_retain();
      char v17 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(a1, a2);
      char v17 = 0;
    }
    *((unsigned char *)v4 + v6) = v17;
    uint64_t v18 = (char *)v4 + v15;
    *uint64_t v18 = a2[v15];
    v18[1] = a2[v15 + 1];
    uint64_t v19 = (void *)(((unint64_t)v4 + v15 + 9) & 0xFFFFFFFFFFFFFFF8);
    long long v20 = (void *)((unint64_t)&a2[v15 + 9] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v19 = *v20;
    v19[1] = v20[1];
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100054AC4(unsigned __int8 *a1, uint64_t a2)
{
  if (*(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v2 = 16;
  }
  else {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_13;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_13:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    swift_release();
  }
  else {
    (*(void (**)(unsigned __int8 *))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(a1);
  }

  return swift_bridgeObjectRelease();
}

void *sub_100054C0C(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    uint64_t v11 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v11;
    swift_retain();
    char v12 = 1;
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1, a2);
    char v12 = 0;
  }
  *((unsigned char *)a1 + v5) = v12;
  int v13 = (unsigned __int8 *)a1 + v5 + 1;
  int v14 = &a2[v5 + 1];
  *int v13 = *v14;
  v13[1] = v14[1];
  uint64_t v15 = (void *)((unint64_t)(v13 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)((unint64_t)(v14 + 9) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  return a1;
}

unsigned __int8 *sub_100054D98(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != a2)
  {
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      uint64_t v18 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v18;
      a1[v7] = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  unint64_t v19 = *(void *)(v6 + 64);
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v20 = v19 + 1;
  long long v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *long long v21 = *v22;
  v21[1] = v22[1];
  unint64_t v23 = (void *)((unint64_t)(v21 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (void *)((unint64_t)(v22 + 9) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100055028(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    *a1 = *(_OWORD *)a2;
    char v11 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1, a2);
    char v11 = 0;
  }
  *((unsigned char *)a1 + v5) = v11;
  int v12 = (unsigned __int8 *)a1 + v5 + 1;
  unsigned int v13 = &a2[v5 + 1];
  *int v12 = *v13;
  v12[1] = v13[1];
  *(_OWORD *)((unint64_t)(v12 + 9) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)(v13 + 9) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned __int8 *sub_1000551A4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != a2)
  {
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  unint64_t v19 = *(void *)(v6 + 64);
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v20 = v19 + 1;
  long long v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *long long v21 = *v22;
  v21[1] = v22[1];
  unint64_t v23 = (void *)((unint64_t)(v21 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (void *)((unint64_t)(v22 + 9) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRelease();
  return a1;
}

void sub_100055428(unsigned char *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = ((v5 + 10) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (a3 < 0)
  {
    unsigned int v8 = a3 - 2147483646;
    if (((v5 + 10) & 0xFFFFFFF8) != 0xFFFFFFF0) {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      int v9 = 4;
    }
    else {
      int v9 = 2;
    }
    if (v8 < 0x100) {
      int v7 = 1;
    }
    else {
      int v7 = v9;
    }
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    int v7 = 0;
    if ((a2 & 0x80000000) == 0)
    {
LABEL_5:
      switch(v7)
      {
        case 1:
          a1[v6] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v6] = 0;
          goto LABEL_25;
        case 3:
          goto LABEL_32;
        case 4:
          *(_DWORD *)&a1[v6] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        default:
LABEL_25:
          if (a2) {
LABEL_26:
          }
            *(void *)(((unint64_t)&a1[v5 + 10] & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
          break;
      }
      return;
    }
  }
  if (((v5 + 10) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v10 = a2 - 0x7FFFFFFF;
  }
  else {
    int v10 = 1;
  }
  if (((v5 + 10) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v11 = a2 ^ 0x80000000;
    bzero(a1, v6);
    *(_DWORD *)a1 = v11;
  }
  switch(v7)
  {
    case 1:
      a1[v6] = v10;
      break;
    case 2:
      *(_WORD *)&a1[v6] = v10;
      break;
    case 3:
LABEL_32:
      __break(1u);
      JUMPOUT(0x100055584);
    case 4:
      *(_DWORD *)&a1[v6] = v10;
      break;
    default:
      return;
  }
}

uint64_t sub_1000555AC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000555E8(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for _WrappedParsableCommand.CodingKeys()
{
  return sub_10003A4F0();
}

uint64_t sub_10005563C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100055680(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000556DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100003DD0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100055738(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10005577C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void *sub_1000557C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000842AC(a1, a2, a3, a4, a5, a6, a7, *(void *(**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16), *(void *)(v7 + 24), *(void *)(v7 + 32), *(void *)(v7 + 40), *(void *)(v7 + 48));
}

uint64_t sub_1000557F8()
{
  if (*(void *)(v0 + 16) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 48)) {
    sub_100005128(v0 + 24);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100055858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003DD0(&qword_1000C5360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000558C0(uint64_t a1, uint64_t a2)
{
  return sub_100084608(a1, a2, v2[2], (uint64_t)(v2 + 3), v2[7], v2[8], v2[9]);
}

uint64_t sub_1000558E8(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unsigned char *sub_10005592C(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000559C8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000559F0()
{
  return swift_getWitnessTable();
}

uint64_t sub_100055A0C()
{
  return swift_getWitnessTable();
}

uint64_t sub_100055A28()
{
  return swift_getWitnessTable();
}

unint64_t sub_100055A44(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v35 = a2;
  uint64_t v36 = a1;
  uint64_t v38 = type metadata accessor for Unicode.Scalar.Properties();
  __chkstk_darwin(v38);
  unsigned int v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9) {
    return 0;
  }
  uint64_t v41 = 0;
  unint64_t v42 = 0xE000000000000000;
  unint64_t v39 = 4 * v9;
  long long v37 = (void (**)(char *, uint64_t))(v6 + 8);
  swift_bridgeObjectRetain();
  char v10 = 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = String.index(after:)();
    swift_bridgeObjectRelease();
    unint64_t v13 = String.index(after:)();
    unint64_t v14 = String.subscript.getter();
    unint64_t v16 = v15;
    if ((Character._isSingleScalar.getter() & 1) == 0)
    {
LABEL_11:
      if ((Character._isUppercased.getter() & 1) == 0) {
        goto LABEL_18;
      }
      if ((Character._isSingleScalar.getter() & 1) == 0) {
        goto LABEL_16;
      }
      unint64_t result = sub_1000580B8(v14, v16);
      if ((result & 0x100000000) != 0) {
        goto LABEL_54;
      }
      Unicode.Scalar.properties.getter();
      char v19 = Unicode.Scalar.Properties.isCased.getter();
      (*v37)(v8, v38);
      if ((v19 & 1) == 0)
      {
LABEL_16:
        if (Character._isUppercased.getter() & 1) != 0 && (Character._isLowercased.getter())
        {
LABEL_18:
          if (v14 == v36 && v16 == v35) {
            char v10 = 0;
          }
          else {
            char v10 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
          }
          goto LABEL_7;
        }
      }
      goto LABEL_20;
    }
    unint64_t result = sub_1000580B8(v14, v16);
    if ((result & 0x100000000) != 0) {
      break;
    }
    Unicode.Scalar.properties.getter();
    char v18 = Unicode.Scalar.Properties.isUppercase.getter();
    (*v37)(v8, v38);
    if ((v18 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_20:
    if (v10)
    {
      uint64_t v20 = v41 & 0xFFFFFFFFFFFFLL;
      if ((v42 & 0x2000000000000000) != 0) {
        uint64_t v20 = HIBYTE(v42) & 0xF;
      }
      if (v20)
      {
        v40._unint64_t countAndFlagsBits = 0;
        v40._object = (void *)0xE000000000000000;
        Character.write<A>(to:)();
        String.append(_:)(v40);
        swift_bridgeObjectRelease();
      }
    }
    if (v39 <= v13 >> 14) {
      goto LABEL_6;
    }
    swift_bridgeObjectRetain();
    unint64_t v21 = String.subscript.getter();
    unint64_t v23 = v22;
    if (Character._isSingleScalar.getter())
    {
      unint64_t result = sub_1000580B8(v21, v23);
      if ((result & 0x100000000) != 0) {
        goto LABEL_53;
      }
      Unicode.Scalar.properties.getter();
      char v24 = Unicode.Scalar.Properties.isUppercase.getter();
      (*v37)(v8, v38);
      if (v24) {
        goto LABEL_36;
      }
    }
    if ((Character._isUppercased.getter() & 1) == 0) {
      goto LABEL_5;
    }
    if (Character._isSingleScalar.getter())
    {
      unint64_t result = sub_1000580B8(v21, v23);
      if ((result & 0x100000000) != 0) {
        goto LABEL_56;
      }
      Unicode.Scalar.properties.getter();
      char v25 = Unicode.Scalar.Properties.isCased.getter();
      (*v37)(v8, v38);
      if (v25) {
        goto LABEL_36;
      }
    }
    if ((Character._isUppercased.getter() & 1) == 0)
    {
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v26 = Character._isLowercased.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v26) {
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRetain();
    unint64_t v27 = String.index(after:)();
    swift_bridgeObjectRelease();
    if (v39 <= v27 >> 14) {
      goto LABEL_6;
    }
    swift_bridgeObjectRetain();
    String.index(after:)();
    unint64_t v28 = String.subscript.getter();
    unint64_t v30 = v29;
    if (Character._isSingleScalar.getter())
    {
      unint64_t result = sub_1000580B8(v28, v30);
      if ((result & 0x100000000) != 0) {
        goto LABEL_55;
      }
      Unicode.Scalar.properties.getter();
      char v31 = Unicode.Scalar.Properties.isLowercase.getter();
      (*v37)(v8, v38);
      if (v31)
      {
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v10 = 1;
        goto LABEL_7;
      }
    }
    if ((Character._isLowercased.getter() & 1) == 0)
    {
LABEL_5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_6:
      char v10 = 0;
      goto LABEL_7;
    }
    if (Character._isSingleScalar.getter())
    {
      unint64_t result = sub_1000580B8(v28, v30);
      if ((result & 0x100000000) != 0) {
        goto LABEL_57;
      }
      Unicode.Scalar.properties.getter();
      char v32 = Unicode.Scalar.Properties.isCased.getter();
      (*v37)(v8, v38);
      if (v32) {
        goto LABEL_48;
      }
    }
    if ((Character._isUppercased.getter() & 1) == 0) {
      goto LABEL_48;
    }
    char v33 = Character._isLowercased.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v10 = v33 ^ 1;
LABEL_7:
    Swift::String v11 = Character.lowercased()();
    swift_bridgeObjectRelease();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    if (v39 == v12 >> 14)
    {
      swift_bridgeObjectRelease();
      return v41;
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

uint64_t static ParsableCommand.parseAsRoot(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  Swift::String v40 = sub_10007370C(v4, a2);
  uint64_t v41 = v7;
  uint64_t v42 = v8;
  if (a1)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v10 = static CommandLine.arguments.getter();
    uint64_t v11 = *(void *)(v10 + 16);
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    unint64_t v12 = (void *)swift_dynamicCastClass();
    if (!v12)
    {
      swift_bridgeObjectRelease();
      unint64_t v12 = _swiftEmptyArrayStorage;
    }
    uint64_t v13 = v12[2];
    swift_release();
    if (v13 == v11 - (v11 != 0))
    {
      uint64_t v9 = (void *)swift_dynamicCastClass();
      swift_bridgeObjectRelease();
      if (!v9)
      {
        swift_bridgeObjectRelease();
        uint64_t v9 = _swiftEmptyArrayStorage;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_100056BFC(v10, v10 + 32, v11 != 0, (2 * v11) | 1);
      uint64_t v9 = v23;
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  sub_100070E78((uint64_t)v9, (uint64_t)&v28);
  swift_bridgeObjectRelease();
  if (v39)
  {
    long long v14 = v28;
    uint64_t v15 = v29;
    uint64_t v16 = v30;
    uint64_t v17 = v31;
    uint64_t v18 = v32;
    uint64_t v19 = v33;
    uint64_t v43 = v34;
    uint64_t v26 = v36;
    uint64_t v27 = v35;
    uint64_t v25 = v37;
    char v24 = v38;
    sub_10005857C();
    swift_willThrowTypedImpl();
    swift_allocError();
    *(_OWORD *)uint64_t v20 = v14;
    *(void *)(v20 + 16) = v15;
    *(void *)(v20 + 24) = v16;
    *(void *)(v20 + 32) = v17;
    *(void *)(v20 + 40) = v18;
    uint64_t v21 = v43;
    *(void *)(v20 + 48) = v19;
    *(void *)(v20 + 56) = v21;
    *(void *)(v20 + 64) = v27;
    *(void *)(v20 + 72) = v26;
    *(void *)(v20 + 80) = v25;
    *(unsigned char *)(v20 + 88) = v24;
  }
  else
  {
    sub_10004B100(&v28, a3);
  }
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

double sub_100056234@<D0>(uint64_t a1@<X8>)
{
  return static ParsableCommand.configuration.getter(a1);
}

double static ParsableCommand.configuration.getter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0xE000000000000000;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0xE000000000000000;
  *(unsigned char *)(a1 + 96) = 1;
  *(void *)(a1 + 104) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ParsableCommand.run()()
{
  uint64_t v3 = sub_10003B294(v2, v0, v1);
  uint64_t v5 = v4;
  char v7 = v6;
  sub_1000585D0();
  swift_allocError();
  *(void *)uint64_t v8 = v3;
  *(void *)(v8 + 8) = v5;
  *(unsigned char *)(v8 + 16) = v7;
  swift_willThrow();
}

unint64_t static ParsableCommand._commandName.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v7);
  unint64_t v2 = v7[0];
  uint64_t v3 = v7[1];
  swift_bridgeObjectRetain();
  sub_10002DDE4((uint64_t)v7);
  if (!v3)
  {
    swift_getMetatypeMetadata();
    uint64_t v4 = String.init<A>(describing:)();
    unint64_t v2 = sub_100055A44(45, 0xE100000000000000, v4, v5);
    swift_bridgeObjectRelease();
  }
  return v2;
}

char *static ParsableCommand.helpMessage(for:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return static ParsableCommand.helpMessage(for:includeHidden:columns:)(a1, a2, 0, a3, a4 & 1, a6, a6);
}

char *static ParsableCommand.helpMessage(for:includeHidden:columns:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  unint64_t v12 = sub_10007370C(v7, a7);
  unint64_t v13 = sub_10009643C((uint64_t)v12, a1);
  unint64_t v14 = v13;
  if (!(v13 >> 62))
  {
    uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v19 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2]) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  if (!v15) {
    goto LABEL_15;
  }
LABEL_3:
  v25[0] = _swiftEmptyArrayStorage;
  double result = sub_100056FF8(0, v15 & ~(v15 >> 63), 0);
  if ((v15 & 0x8000000000000000) == 0)
  {
    char v17 = a3;
    uint64_t v18 = 0;
    uint64_t v19 = (void *)v25[0];
    do
    {
      if ((v14 & 0xC000000000000001) != 0) {
        uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v20 = swift_retain();
      }
      long long v24 = *(_OWORD *)(v20 + 16);
      swift_release();
      v25[0] = v19;
      unint64_t v22 = v19[2];
      unint64_t v21 = v19[3];
      if (v22 >= v21 >> 1)
      {
        sub_100056FF8((char *)(v21 > 1), v22 + 1, 1);
        uint64_t v19 = (void *)v25[0];
      }
      ++v18;
      uint64_t v19[2] = v22 + 1;
      *(_OWORD *)&v19[2 * v22 + 4] = v24;
    }
    while (v15 != v18);
    swift_bridgeObjectRelease();
    a3 = v17;
    if (v19[2]) {
      goto LABEL_13;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    sub_100003DD0(&qword_1000C50C0);
    uint64_t v19 = (void *)swift_allocObject();
    *((_OWORD *)v19 + 1) = xmmword_1000A2660;
    *((_OWORD *)v19 + 2) = *((_OWORD *)v12 + 1);
LABEL_13:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10008ADD8((uint64_t)v19, a3 & 1, (uint64_t)v25);
    swift_bridgeObjectRelease();
    uint64_t v23 = sub_100085ECC(a4, a5 & 1);
    sub_100054768((uint64_t)v25);
    return (char *)v23;
  }
  __break(1u);
  return result;
}

uint64_t static ParsableCommand.main(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  static ParsableCommand.parseAsRoot(_:)(a1, a3, (uint64_t)v6);
  uint64_t v3 = v7;
  uint64_t v4 = v8;
  sub_100008DB4((uint64_t)v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  return sub_100005128((uint64_t)v6);
}

uint64_t static ParsableCommand.main()(uint64_t a1, uint64_t a2)
{
  return static ParsableCommand.main(_:)(0, a1, a2);
}

uint64_t sub_1000566B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100053C7C(v2, *(void *)(a2 + 8), 2, 0, 0, 0);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    char v6 = (unsigned char *)(v3 + 177);
    do
    {
      uint64_t v7 = v5;
      if (*v6 == 4) {
        uint64_t v8 = (*(void *)(v6 - 145) == 0) & (*(v6 - 137) >> 1);
      }
      else {
        uint64_t v8 = 0;
      }
      if (v8) {
        break;
      }
      --v5;
      v6 += 192;
    }
    while (v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10005674C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100053C7C(v2, *(void *)(a2 + 8), 2, 0, 0, 0);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    char v6 = (unsigned char *)(v3 + 177);
    do
    {
      uint64_t v7 = v5;
      if (*v6 == 6) {
        uint64_t v8 = (*(void *)(v6 - 145) == 0) & (*(v6 - 137) >> 1);
      }
      else {
        uint64_t v8 = 0;
      }
      if (v8) {
        break;
      }
      --v5;
      v6 += 192;
    }
    while (v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1000567E4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v5);
  sub_10002DDE4((uint64_t)v5);
  sub_100058624((uint64_t)&v6, (uint64_t)v7);
  uint64_t v2 = sub_100058624((uint64_t)v7, (uint64_t)v8);
  if (v8[0]) {
    char v3 = sub_1000566B4(v2, v8[1]);
  }
  else {
    char v3 = 0;
  }
  return v3 & 1;
}

unint64_t sub_100056864(uint64_t a1, uint64_t a2)
{
  return sub_1000568A8(a1, a2, &qword_1000C5728);
}

uint64_t sub_100056870(uint64_t a1, uint64_t a2)
{
  return sub_100056988(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000263C);
}

unint64_t sub_10005689C(uint64_t a1, uint64_t a2)
{
  return sub_1000568A8(a1, a2, &qword_1000C5730);
}

unint64_t sub_1000568A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 0;
  unint64_t v10 = 0xE000000000000000;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v14 = 0xE000000000000000;
  uint64_t v15 = 0;
  unint64_t v16 = 0xE000000000000000;
  char v17 = 1;
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_10002DDE4((uint64_t)v8);
  sub_100003DD0(a3);
  uint64_t v4 = String.init<A>(describing:)();
  unint64_t v6 = sub_100055A44(45, 0xE100000000000000, v4, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_10005695C(uint64_t a1, uint64_t a2)
{
  return sub_100056988(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000264C);
}

uint64_t sub_100056988(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v7 = *((unsigned __int8 *)v3 + 16);
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  v12[0] = v5;
  v12[1] = v6;
  char v13 = v7;
  sub_100005090(v12, a1);
  uint64_t DynamicType = swift_getDynamicType();
  uint64_t v9 = v15;
  a3(v5, v6, v7);
  sub_100005128((uint64_t)v12);
  sub_1000585D0();
  swift_allocError();
  *(void *)uint64_t v10 = DynamicType;
  *(void *)(v10 + 8) = v9;
  *(unsigned char *)(v10 + 16) = 0;
  return swift_willThrow();
}

unint64_t sub_100056A48()
{
  if (qword_1000C50B8 != -1) {
    swift_once();
  }
  if (*((void *)&xmmword_1000C6560 + 1))
  {
    unint64_t v0 = xmmword_1000C6560;
  }
  else
  {
    sub_100003DD0(&qword_1000C56A0);
    uint64_t v1 = String.init<A>(describing:)();
    unint64_t v0 = sub_100055A44(45, 0xE100000000000000, v1, v2);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v0;
}

void *sub_100056B14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_100003DD0(&qword_1000C5230);
  uint64_t v5 = swift_allocObject();
  size_t v6 = j__malloc_size((const void *)v5);
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = 2 * ((uint64_t)(v6 - 32) / 192);
  uint64_t v7 = sub_10006A37C(&v9, (char *)(v5 + 32), v2, a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7 != (void *)v2)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v5;
}

void sub_100056BFC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3)
      {
LABEL_7:
        swift_arrayInitWithCopy();
        return;
      }
    }
    else
    {
      sub_100003DD0(&qword_1000C5118);
      uint64_t v7 = (void *)swift_allocObject();
      int64_t v8 = j__malloc_size(v7);
      uint64_t v9 = v8 - 32;
      if (v8 < 32) {
        uint64_t v9 = v8 - 17;
      }
      _OWORD v7[2] = v5;
      v7[3] = 2 * (v9 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
}

void sub_100056CCC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3)
      {
LABEL_7:
        swift_arrayInitWithCopy();
        return;
      }
    }
    else
    {
      sub_100003DD0(&qword_1000C5700);
      uint64_t v7 = (void *)swift_allocObject();
      int64_t v8 = j__malloc_size(v7);
      uint64_t v9 = v8 - 32;
      if (v8 < 32) {
        uint64_t v9 = v8 + 31;
      }
      _OWORD v7[2] = v5;
      v7[3] = 2 * (v9 >> 6);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
}

void *sub_100056D9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100003DD0(&qword_1000C56E8);
  char v3 = (void *)swift_allocObject();
  size_t v4 = j__malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  uint64_t v5 = sub_1000583CC(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_10002BDC8();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_100056E94(void *result, uint64_t a2)
{
  uint64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v3 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v2 == -1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = (uint64_t)result;
  if (v3 <= 0)
  {
    size_t v6 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100003DD0(&qword_1000C56E0);
    size_t v6 = (void *)swift_allocObject();
    int64_t v7 = j__malloc_size(v6);
    uint64_t v8 = v7 - 32;
    if (v7 < 32) {
      uint64_t v8 = v7 - 25;
    }
    void v6[2] = v3;
    v6[3] = 2 * (v8 >> 3);
  }
  double result = (void *)sub_10006A498((uint64_t)&v9, (uint64_t)(v6 + 4), v3, v5, a2);
  if (result == (void *)v3) {
    return v6;
  }
LABEL_14:
  __break(1u);
  return result;
}

char *sub_100056F68(char *a1, int64_t a2, char a3)
{
  double result = sub_10005715C(a1, a2, a3, *v3, &qword_1000C5370);
  *uint64_t v3 = result;
  return result;
}

char *sub_100056F98(char *a1, int64_t a2, char a3)
{
  double result = sub_100057278(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100056FB8(char *a1, int64_t a2, char a3)
{
  double result = sub_10005737C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100056FD8(char *a1, int64_t a2, char a3)
{
  double result = sub_100057498(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100056FF8(char *a1, int64_t a2, char a3)
{
  double result = sub_10005759C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_100057018(void *a1, int64_t a2, char a3)
{
  double result = sub_100057698(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100057038(char *a1, int64_t a2, char a3)
{
  double result = sub_1000577D4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100057058(char *a1, int64_t a2, char a3)
{
  double result = sub_1000578D8(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_100057078(void *a1, int64_t a2, char a3)
{
  double result = sub_1000579F8(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100057098(char *a1, int64_t a2, char a3)
{
  double result = sub_10005715C(a1, a2, a3, *v3, &qword_1000C56C0);
  *uint64_t v3 = result;
  return result;
}

char *sub_1000570C8(char *a1, int64_t a2, char a3)
{
  double result = sub_100057B34(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1000570E8(char *a1, int64_t a2, char a3)
{
  double result = sub_100057C4C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_100057108(void *a1, int64_t a2, char a3)
{
  double result = sub_100057E78(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100057128(char *a1, int64_t a2, char a3)
{
  double result = sub_100057F9C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100057148(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10005715C(a1, a2, a3, a4, &qword_1000C56C0);
}

char *sub_10005715C(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_100003DD0(a5);
    uint64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  char v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9]) {
      memmove(v13, v14, 24 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v11;
}

char *sub_100057278(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5118);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  char v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_10005737C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5230);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 192);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[192 * v8]) {
      memmove(v12, v13, 192 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_100057498(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C56B8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  char v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_10005759C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C50C0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  char v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

void *sub_100057698(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5710);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[6 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100003DD0(&qword_1000C5718);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1000577D4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5700);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  char v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1000578D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5708);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void *sub_1000579F8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C56F0);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100003DD0(&qword_1000C56F8);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_100057B34(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C56D8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_100057C4C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C56D0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8]) {
      memmove(v12, v13, 88 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_100057D6C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C56E8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  size_t v14 = 24 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

void *sub_100057E78(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C56A8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100003DD0(&qword_1000C56B0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_100057F9C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C56C8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

unint64_t sub_1000580B8(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    sub_100058198(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t sub_100058198(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    double result = sub_100058238(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_1000582A8(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_100058238(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    double result = sub_100095BE0(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_1000582A8(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      void v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }
      if ((*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(unsigned char *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      unint64_t v7 = v5;
      return v7 << 16;
    }
    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9)
    {
      return _StringGuts.foreignScalarAlign(_:)();
    }
  }
  return result;
}

void *sub_1000583CC(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *double result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    uint64_t v13 = *(void *)(a4 + 48) + 24 * v12;
    char v14 = *(unsigned char *)(v13 + 16);
    char v15 = *(unsigned char *)(v13 + 17);
    *(_OWORD *)a2 = *(_OWORD *)v13;
    *(unsigned char *)(a2 + 16) = v14;
    *(unsigned char *)(a2 + 17) = v15;
    a2 += 24;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v16 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v16 >= v10) {
    goto LABEL_30;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v16);
  if (v17) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v16 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v16;
    goto LABEL_34;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v8);
  if (v17)
  {
LABEL_15:
    int64_t v16 = v8;
LABEL_19:
    unint64_t v19 = __clz(__rbit64(v17));
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v12 = v19 + (v16 << 6);
    int64_t v8 = v16;
    goto LABEL_8;
  }
  int64_t v18 = v16 + 2;
  if (v16 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v18);
  if (v17)
  {
LABEL_18:
    int64_t v16 = v18;
    goto LABEL_19;
  }
  int64_t v8 = v16 + 3;
  if (v16 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v16 + 2;
    goto LABEL_34;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v8);
  if (v17) {
    goto LABEL_15;
  }
  int64_t v18 = v16 + 4;
  if (v16 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v18);
  if (v17) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v16 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v16 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v17 = *(void *)(v4 + 8 * v16);
    ++v18;
    if (v17) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

unint64_t sub_10005857C()
{
  unint64_t result = qword_1000C5690;
  if (!qword_1000C5690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5690);
  }
  return result;
}

unint64_t sub_1000585D0()
{
  unint64_t result = qword_1000C5698;
  if (!qword_1000C5698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5698);
  }
  return result;
}

uint64_t sub_100058624(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003DD0(&qword_1000C5720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005868C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0;
  }
}

uint64_t sub_1000586D4(uint64_t a1)
{
  uint64_t result = sub_100063C20(a1);
  if (v4) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  else {
    return sub_100063CC0(result, v3, 0, a1);
  }
}

uint64_t sub_100058768(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)(v1 + 8) + 72);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v6 = (_OWORD *)(v3 + 32);
    swift_bridgeObjectRetain_n();
    while (1)
    {
      sub_100064248(v6, v9);
      if (v2)
      {
        sub_1000642B4((uint64_t)v9);
        uint64_t result = swift_bridgeObjectRelease();
        __break(1u);
        return result;
      }
      if (*(void *)&v9[0] == a1) {
        break;
      }
      sub_1000642B4((uint64_t)v9);
      uint64_t v6 = (_OWORD *)((char *)v6 + 56);
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    long long v11 = v9[0];
    long long v12 = v9[1];
    long long v13 = v9[2];
    uint64_t v14 = v10;
    swift_bridgeObjectRelease();
    if (!(void)v11) {
      goto LABEL_9;
    }
    long long v15 = v11;
    v16[0] = v12;
    v16[1] = v13;
    uint64_t v17 = v14;
    sub_10004B100(v16, (uint64_t)&v11);
    sub_100003DD0(&qword_1000C5920);
    return swift_dynamicCast();
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_8:
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    swift_bridgeObjectRelease();
LABEL_9:
    sub_1000556DC((uint64_t)&v11, &qword_1000C5918);
    sub_10002FDE0();
    swift_allocError();
    *(void *)uint64_t v7 = 3;
    *(_OWORD *)(v7 + 8) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(void *)(v7 + 72) = 0;
    *(unsigned char *)(v7 + 80) = 15;
    return swift_willThrow();
  }
}

__n128 sub_100058938(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = *(void *)(v4 + 8);
  *((void *)&v21 + 1) = a3;
  unint64_t v22 = a4;
  uint64_t v10 = sub_10000A954((uint64_t *)&v20);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(v10, a1, a3);
  v19.n128_u64[0] = a2;
  v19.n128_u64[1] = a4;
  long long v11 = *(char **)(v9 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v9 + 72) = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    long long v11 = sub_1000601F8(0, *((void *)v11 + 2) + 1, 1, v11);
    *(void *)(v9 + 72) = v11;
  }
  unint64_t v14 = *((void *)v11 + 2);
  unint64_t v13 = *((void *)v11 + 3);
  if (v14 >= v13 >> 1)
  {
    long long v11 = sub_1000601F8((char *)(v13 > 1), v14 + 1, 1, v11);
    *(void *)(v9 + 72) = v11;
  }
  *((void *)v11 + 2) = v14 + 1;
  long long v15 = &v11[56 * v14];
  __n128 result = v19;
  long long v17 = v20;
  long long v18 = v21;
  *((void *)v15 + 10) = v22;
  *((_OWORD *)v15 + 3) = v17;
  *((_OWORD *)v15 + 4) = v18;
  *((__n128 *)v15 + 2) = v19;
  return result;
}

uint64_t sub_100058A58()
{
  type metadata accessor for ParsedArgumentsContainer();
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = v0;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  return KeyedDecodingContainer.init<A>(_:)();
}

uint64_t sub_100058AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = a1;
  return result;
}

uint64_t sub_100058B3C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100058BAC()
{
  sub_100058B3C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ArgumentDecoder()
{
  return self;
}

uint64_t sub_100058C08()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100058C5C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100058C68()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100058C74()
{
  return sub_100058A58();
}

uint64_t sub_100058C98()
{
  sub_10005E894();
  swift_allocError();
  _OWORD *v0 = 0u;
  v0[1] = 0u;
  return swift_willThrow();
}

uint64_t sub_100058CE8()
{
  sub_10005E894();
  swift_allocError();
  void *v0 = 1;
  v0[1] = 0;
  v0[2] = 0;
  v0[3] = 0;
  return swift_willThrow();
}

double sub_100058D3C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(v4 + 16);
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_100060C94(a1, a2, a3);
    if (v11)
    {
      sub_100063EA0(*(void *)(v6 + 56) + 72 * v10, (uint64_t)&v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v16 + 1))
      {
        long long v21 = v16;
        long long v22 = v17;
        long long v23 = v18;
        uint64_t v12 = *((void *)&v19 + 1);
        uint64_t v24 = v19;
        char v13 = v20;
        swift_beginAccess();
        swift_bridgeObjectRetain_n();
        sub_10005F4C8(v12);
        swift_endAccess();
        swift_bridgeObjectRelease();
        long long v14 = v22;
        *(_OWORD *)a4 = v21;
        *(_OWORD *)(a4 + 16) = v14;
        double result = *(double *)&v23;
        *(_OWORD *)(a4 + 32) = v23;
        *(void *)(a4 + 48) = v24;
        *(void *)(a4 + 56) = v12;
        *(unsigned char *)(a4 + 64) = v13;
        return result;
      }
    }
    else
    {
      char v20 = 0;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    char v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
  }
  sub_1000556DC((uint64_t)&v16, &qword_1000C5888);
  *(unsigned char *)(a4 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

uint64_t sub_100058EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a3;
  *(void *)(v3 + 24) = a1;
  return v3;
}

uint64_t sub_100058EB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(*v2 + 80);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v13 - v5;
  uint64_t v7 = v2[2];
  (*(void (**)(char *))(v8 + 16))((char *)&v13 - v5);
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_100075CE0((uint64_t)v6, v7, v4);
  sub_100058D3C(v9, v10, v11, a2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

BOOL sub_100058FE0(uint64_t a1)
{
  sub_100058EB8(a1, (uint64_t)v3);
  BOOL v1 = v4 != 0;
  sub_1000556DC((uint64_t)v3, &qword_1000C5888);
  return v1;
}

uint64_t sub_10005902C(uint64_t a1)
{
  sub_100058EB8(a1, (uint64_t)v3);
  if (!v4)
  {
    sub_1000556DC((uint64_t)v3, &qword_1000C5888);
    long long v6 = 0u;
    long long v7 = 0u;
    goto LABEL_5;
  }
  sub_100063E3C((uint64_t)&v5, (uint64_t)&v6, &qword_1000C5360);
  sub_1000418BC((uint64_t)v3);
  if (!*((void *)&v7 + 1))
  {
LABEL_5:
    uint64_t v1 = 1;
    goto LABEL_6;
  }
  uint64_t v1 = 0;
LABEL_6:
  sub_1000556DC((uint64_t)&v6, &qword_1000C5360);
  return v1;
}

uint64_t sub_1000590D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v58 = a4;
  uint64_t v52 = *v5;
  uint64_t v55 = *(void *)(v52 + 80);
  uint64_t v54 = *(void *)(v55 - 8);
  __chkstk_darwin(a1);
  uint64_t v53 = (char *)&v49 - v10;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v49 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  long long v14 = (char *)&v49 - v13;
  uint64_t v50 = *(void *)(a3 - 8);
  __chkstk_darwin(v12);
  long long v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = a2;
  uint64_t v17 = a2;
  long long v18 = v5;
  sub_100058EB8(v17, (uint64_t)v71);
  sub_100063E3C((uint64_t)v71, (uint64_t)&v66, &qword_1000C5888);
  uint64_t v60 = v6;
  uint64_t v72 = a3;
  uint64_t v59 = a5;
  if (!v67)
  {
    uint64_t v29 = &qword_1000C5888;
    uint64_t v30 = &v66;
LABEL_10:
    sub_1000556DC((uint64_t)v30, v29);
LABEL_12:
    uint64_t v31 = v18[2];
    uint64_t v32 = *(void *)(v18[3] + 88);
    uint64_t v50 = v18[3];
    uint64_t v51 = v18;
    sub_100003DD0(&qword_1000C5890);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1000A2660;
    uint64_t v34 = v55;
    *(void *)(inited + 56) = v55;
    uint64_t v52 = *(void *)(v52 + 88);
    *(void *)(inited + 64) = v52;
    uint64_t v35 = sub_10000A954((uint64_t *)(inited + 32));
    uint64_t v36 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v54 + 16);
    uint64_t v37 = v56;
    v36(v35, v56, v34);
    uint64_t v66 = v31;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10005F3C8((void *)inited);
    uint64_t v54 = v66;
    uint64_t v38 = (uint64_t)v53;
    v36((uint64_t *)v53, v37, v34);
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_100075CE0(v38, v31, v34);
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    sub_100058EB8(v37, (uint64_t)v70);
    uint64_t v66 = v32;
    uint64_t v67 = v50;
    uint64_t v68 = v54;
    v69[0] = v39;
    v69[1] = v41;
    v69[2] = v43;
    uint64_t v64 = &type metadata for SingleValueDecoder;
    unint64_t v65 = sub_100063D2C();
    *(void *)&long long v63 = swift_allocObject();
    sub_100063E04((uint64_t)&v66, v63 + 16);
    dispatch thunk of Decodable.init(from:)();
    sub_100049788((uint64_t)&v66);
    return sub_1000556DC((uint64_t)v71, &qword_1000C5888);
  }
  uint64_t v19 = v70[1];
  swift_bridgeObjectRetain();
  sub_1000418BC((uint64_t)&v66);
  if (*(void *)(v19 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  sub_1000586D4(v19);
  int v21 = v20;
  swift_bridgeObjectRelease();
  if ((v21 & 0x10000) != 0 || (v21 & 0x100) == 0) {
    goto LABEL_12;
  }
  sub_100063E3C((uint64_t)v71, (uint64_t)&v66, &qword_1000C5888);
  if (!v67)
  {
    sub_1000556DC((uint64_t)&v66, &qword_1000C5888);
    long long v61 = 0u;
    long long v62 = 0u;
    goto LABEL_15;
  }
  sub_100063E3C((uint64_t)v69, (uint64_t)&v61, &qword_1000C5360);
  sub_1000418BC((uint64_t)&v66);
  if (!*((void *)&v62 + 1))
  {
LABEL_15:
    uint64_t v29 = &qword_1000C5360;
    uint64_t v30 = (uint64_t *)&v61;
    goto LABEL_10;
  }
  sub_100063EFC(&v61, &v63);
  sub_100055680((uint64_t)&v63, (uint64_t)&v66);
  long long v22 = v14;
  uint64_t v23 = v72;
  int v24 = swift_dynamicCast();
  uint64_t v25 = v50;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56);
  if (v24)
  {
    v26(v22, 0, 1, v23);
    sub_100005128((uint64_t)&v63);
    sub_1000556DC((uint64_t)v71, &qword_1000C5888);
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v27(v16, v22, v23);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v59, v16, v23);
  }
  v26(v22, 1, 1, v23);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v22, v11);
  sub_100063F0C();
  swift_allocError();
  uint64_t v45 = v44;
  sub_100055680((uint64_t)&v63, v44);
  sub_100063E3C((uint64_t)v71, (uint64_t)&v66, &qword_1000C5888);
  uint64_t v46 = v67;
  if (v67)
  {
    uint64_t v47 = v66;
    uint64_t v48 = v68;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000418BC((uint64_t)&v66);
    *(void *)(v45 + 32) = v47;
    *(void *)(v45 + 40) = v46;
    *(void *)(v45 + 48) = v48;
    *(unsigned char *)(v45 + 56) = 0;
    swift_willThrow();
    sub_100005128((uint64_t)&v63);
    return sub_1000556DC((uint64_t)v71, &qword_1000C5888);
  }
  uint64_t result = swift_errorRelease();
  __break(1u);
  return result;
}

uint64_t sub_1000596C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v10 = *v4;
  uint64_t v11 = *(void *)(*v4 + 80);
  *(void *)&long long v46 = *(void *)(v11 - 8);
  __chkstk_darwin(a1);
  *(void *)&long long v45 = (char *)&v38 - v12;
  *(void *)&long long v44 = v13;
  sub_100058EB8(v13, (uint64_t)v57);
  sub_100063E3C((uint64_t)v57, (uint64_t)&v47, &qword_1000C5888);
  if (*((void *)&v47 + 1))
  {
    long long v54 = *(_OWORD *)&v48[16];
    long long v55 = *(_OWORD *)&v48[32];
    char v56 = v48[48];
    long long v52 = v47;
    long long v53 = *(_OWORD *)v48;
    if (*(void *)(*(void *)&v48[40] + 16) == 1)
    {
      sub_1000586D4(*(uint64_t *)&v48[40]);
      if ((v14 & 0x10100) == 0x100)
      {
        sub_1000556DC((uint64_t)v57, &qword_1000C5888);
        sub_100063E3C((uint64_t)&v53 + 8, (uint64_t)&v47, &qword_1000C5360);
        sub_1000418BC((uint64_t)&v52);
        sub_100003DD0(&qword_1000C5360);
        int v15 = swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a4, v15 ^ 1u, 1, a2);
      }
    }
    uint64_t v38 = a1;
    uint64_t v39 = a3;
    uint64_t v40 = a4;
    uint64_t v41 = a2;
    uint64_t v42 = v5;
    sub_1000418BC((uint64_t)&v52);
  }
  else
  {
    uint64_t v38 = a1;
    uint64_t v39 = a3;
    uint64_t v40 = a4;
    uint64_t v41 = a2;
    uint64_t v42 = v5;
    sub_1000556DC((uint64_t)&v47, &qword_1000C5888);
  }
  uint64_t v17 = v4[2];
  uint64_t v18 = *(void *)(v4[3] + 88);
  uint64_t v43 = v4[3];
  sub_100003DD0(&qword_1000C5890);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000A2660;
  *(void *)(inited + 56) = v11;
  uint64_t v58 = *(void *)(v10 + 88);
  *(void *)(inited + 64) = v58;
  int v20 = sub_10000A954((uint64_t *)(inited + 32));
  int v21 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v46 + 16);
  uint64_t v22 = v44;
  v21(v20, v44, v11);
  *(void *)&long long v47 = v17;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10005F3C8((void *)inited);
  *(void *)&long long v46 = v47;
  uint64_t v23 = v45;
  v21((uint64_t *)v45, v22, v11);
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_100075CE0(v23, v17, v11);
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  sub_100063E3C((uint64_t)v57, (uint64_t)&v55, &qword_1000C5888);
  *(void *)&long long v52 = v18;
  *((void *)&v52 + 1) = v43;
  *(void *)&long long v53 = v46;
  *((void *)&v53 + 1) = v24;
  *(void *)&long long v54 = v26;
  *((void *)&v54 + 1) = v28;
  *(void *)&v48[8] = &type metadata for SingleValueDecoder;
  *(void *)&v48[16] = sub_100063D2C();
  *(void *)&long long v47 = swift_allocObject();
  sub_100063E04((uint64_t)&v52, v47 + 16);
  uint64_t v30 = v40;
  uint64_t v29 = v41;
  uint64_t v31 = v42;
  dispatch thunk of Decodable.init(from:)();
  if (v31)
  {
    uint64_t v51 = v31;
    swift_errorRetain();
    sub_100003DD0(&qword_1000C58A0);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      uint64_t v33 = *((void *)&v47 + 1);
      uint64_t v32 = *(void *)v48;
      char v34 = v50;
      if (v50 == 11)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100049788((uint64_t)&v52);
        sub_1000556DC((uint64_t)v57, &qword_1000C5888);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v30, 1, 1, v29);
        return swift_errorRelease();
      }
      uint64_t v35 = v49;
      long long v45 = *(_OWORD *)&v48[24];
      long long v46 = *(_OWORD *)&v48[40];
      long long v44 = *(_OWORD *)&v48[8];
      uint64_t v36 = v47;
      sub_10002FDE0();
      swift_allocError();
      *(void *)uint64_t v37 = v36;
      *(void *)(v37 + 8) = v33;
      *(void *)(v37 + 16) = v32;
      *(_OWORD *)(v37 + 24) = v44;
      *(_OWORD *)(v37 + 40) = v45;
      *(_OWORD *)(v37 + 56) = v46;
      *(void *)(v37 + 72) = v35;
      *(unsigned char *)(v37 + 80) = v34;
      swift_willThrow();
    }
    sub_100049788((uint64_t)&v52);
    sub_1000556DC((uint64_t)v57, &qword_1000C5888);
    return swift_errorRelease();
  }
  else
  {
    sub_100049788((uint64_t)&v52);
    sub_1000556DC((uint64_t)v57, &qword_1000C5888);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v30, 0, 1, v29);
  }
}

void sub_100059C08()
{
}

void sub_100059C54()
{
}

void sub_100059CA0()
{
}

void sub_100059CEC()
{
}

uint64_t sub_100059D38()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_100059D60()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ParsedArgumentsContainer()
{
  return sub_10003A4F0();
}

uint64_t destroy for DecodedArguments(uint64_t a1)
{
  return sub_100005128(a1 + 16);
}

_OWORD *initializeWithCopy for DecodedArguments(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  long long v3 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)a1 + 40) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

uint64_t assignWithCopy for DecodedArguments(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100059E6C((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  return a1;
}

uint64_t *sub_100059E6C(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    long long v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *long long v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *long long v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for DecodedArguments(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DecodedArguments(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100005128(a1 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DecodedArguments(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DecodedArguments(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DecodedArguments()
{
  return &type metadata for DecodedArguments;
}

uint64_t destroy for SingleValueDecoder(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 96)) {
      sub_100005128(a1 + 72);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SingleValueDecoder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v7;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    uint64_t v8 = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8)
    {
      *(void *)(a1 + 96) = v8;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(a1 + 72, a2 + 72, v8);
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = v11;
    }
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v9;
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    long long v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v10;
  }
  return a1;
}

uint64_t assignWithCopy for SingleValueDecoder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  uint64_t v5 = (_OWORD *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v6)
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v7 = *(void *)(a2 + 96);
      if (*(void *)(a1 + 96))
      {
        if (v7)
        {
          sub_10005A5D8((uint64_t *)(a1 + 72), (uint64_t *)(a2 + 72));
LABEL_15:
          *(void *)(a1 + 104) = *(void *)(a2 + 104);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
          return a1;
        }
        sub_100005128(a1 + 72);
      }
      else if (v7)
      {
        *(void *)(a1 + 96) = v7;
        (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 72, a2 + 72);
        goto LABEL_15;
      }
      long long v15 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = v15;
      goto LABEL_15;
    }
    sub_1000418BC(a1 + 48);
    *uint64_t v4 = *v5;
    long long v10 = *(_OWORD *)(a2 + 80);
    long long v9 = *(_OWORD *)(a2 + 96);
    long long v11 = *(_OWORD *)(a2 + 64);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    *(_OWORD *)(a1 + 80) = v10;
    *(_OWORD *)(a1 + 96) = v9;
    *(_OWORD *)(a1 + 64) = v11;
  }
  else if (v6)
  {
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    uint64_t v8 = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8)
    {
      *(void *)(a1 + 96) = v8;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(a1 + 72, a2 + 72, v8);
    }
    else
    {
      long long v16 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = v16;
    }
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    swift_bridgeObjectRetain();
  }
  else
  {
    *uint64_t v4 = *v5;
    long long v12 = *(_OWORD *)(a2 + 64);
    long long v13 = *(_OWORD *)(a2 + 80);
    long long v14 = *(_OWORD *)(a2 + 96);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    *(_OWORD *)(a1 + 80) = v13;
    *(_OWORD *)(a1 + 96) = v14;
    *(_OWORD *)(a1 + 64) = v12;
  }
  return a1;
}

uint64_t *sub_10005A5D8(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    long long v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *long long v3 = v12;
      }
      else
      {
        long long v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *long long v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for SingleValueDecoder(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for SingleValueDecoder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 56)) {
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 56);
  if (!v5)
  {
    sub_1000418BC(a1 + 48);
LABEL_7:
    long long v7 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v7;
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    long long v8 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v8;
    return a1;
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 96)) {
    sub_100005128(a1 + 72);
  }
  long long v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v6;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleValueDecoder(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 113)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SingleValueDecoder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 113) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SingleValueDecoder()
{
  return &type metadata for SingleValueDecoder;
}

uint64_t sub_10005A9F4()
{
  return swift_bridgeObjectRetain();
}

void sub_10005AA00()
{
}

BOOL sub_10005AA0C(uint64_t a1)
{
  return sub_100058FE0(a1);
}

uint64_t sub_10005AA34(uint64_t a1)
{
  return sub_10005902C(a1) & 1;
}

uint64_t sub_10005AA5C(uint64_t a1)
{
  sub_1000590D0((uint64_t)&type metadata for Bool, a1, (uint64_t)&type metadata for Bool, (uint64_t)&protocol witness table for Bool, (uint64_t)&v4);
  if (!v1) {
    char v2 = v4;
  }
  return v2 & 1;
}

uint64_t sub_10005AAAC(uint64_t a1)
{
  uint64_t result = sub_1000590D0((uint64_t)&type metadata for String, a1, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t)&v3);
  if (!v1) {
    return v3;
  }
  return result;
}

double sub_10005AB00(uint64_t a1)
{
  sub_1000590D0((uint64_t)&type metadata for Double, a1, (uint64_t)&type metadata for Double, (uint64_t)&protocol witness table for Double, (uint64_t)&v3);
  if (!v1) {
    return v3;
  }
  return result;
}

float sub_10005AB4C(uint64_t a1)
{
  sub_1000590D0((uint64_t)&type metadata for Float, a1, (uint64_t)&type metadata for Float, (uint64_t)&protocol witness table for Float, (uint64_t)&v3);
  if (!v1) {
    return v3;
  }
  return result;
}

uint64_t sub_10005AB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AE0C(a1, a2, a3, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
}

uint64_t sub_10005ABC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005ACC8(a1, a2, a3, (uint64_t)&type metadata for Int8, (uint64_t)&protocol witness table for Int8);
}

uint64_t sub_10005ABE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AD34(a1, a2, a3, (uint64_t)&type metadata for Int16, (uint64_t)&protocol witness table for Int16);
}

uint64_t sub_10005AC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005ADA0(a1, a2, a3, (uint64_t)&type metadata for Int32, (uint64_t)&protocol witness table for Int32);
}

uint64_t sub_10005AC38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AE0C(a1, a2, a3, (uint64_t)&type metadata for Int64, (uint64_t)&protocol witness table for Int64);
}

uint64_t sub_10005AC60()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

uint64_t sub_10005AC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AE0C(a1, a2, a3, (uint64_t)&type metadata for UInt, (uint64_t)&protocol witness table for UInt);
}

uint64_t sub_10005ACA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005ACC8(a1, a2, a3, (uint64_t)&type metadata for UInt8, (uint64_t)&protocol witness table for UInt8);
}

uint64_t sub_10005ACC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_1000590D0(a4, a1, a4, a5, (uint64_t)&v7);
  if (!v5) {
    return v7;
  }
  return result;
}

uint64_t sub_10005AD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AD34(a1, a2, a3, (uint64_t)&type metadata for UInt16, (uint64_t)&protocol witness table for UInt16);
}

uint64_t sub_10005AD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_1000590D0(a4, a1, a4, a5, (uint64_t)&v7);
  if (!v5) {
    return v7;
  }
  return result;
}

uint64_t sub_10005AD78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005ADA0(a1, a2, a3, (uint64_t)&type metadata for UInt32, (uint64_t)&protocol witness table for UInt32);
}

uint64_t sub_10005ADA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_1000590D0(a4, a1, a4, a5, (uint64_t)&v7);
  if (!v5) {
    return v7;
  }
  return result;
}

uint64_t sub_10005ADE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AE0C(a1, a2, a3, (uint64_t)&type metadata for UInt64, (uint64_t)&protocol witness table for UInt64);
}

uint64_t sub_10005AE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_1000590D0(a4, a1, a4, a5, (uint64_t)&v7);
  if (!v5) {
    return v7;
  }
  return result;
}

uint64_t sub_10005AE50()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

uint64_t sub_10005AE68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1000590D0(a1, a2, a3, a4, a5);
}

uint64_t sub_10005AE8C()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

uint64_t sub_10005AEA4()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

uint64_t sub_10005AEBC()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10005AEE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005B10C(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_10005AF0C()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10005AF30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005B054(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_10005AF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005B0B0(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_10005AF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005B10C(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_10005AFB4()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10005AFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005B194(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_10005B004()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10005B028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005B054(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_10005B054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

uint64_t sub_10005B084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005B0B0(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_10005B0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FFFF;
}

uint64_t sub_10005B0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005B10C(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_10005B10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t sub_10005B144()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10005B168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005B194(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_10005B194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4();
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t sub_10005B1C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_1000596C4(a1, a2, a3, a4);
}

void sub_10005B1E4()
{
}

void sub_10005B1F4()
{
}

void sub_10005B204()
{
}

void sub_10005B214()
{
}

uint64_t sub_10005B224()
{
  type metadata accessor for ParsedArgumentsContainer();
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  return KeyedDecodingContainer.init<A>(_:)();
}

void sub_10005B2D0(uint64_t *a1@<X8>)
{
  sub_100063E3C(v1 + 48, (uint64_t)&v23, &qword_1000C5888);
  if (*((void *)&v23 + 1))
  {
    v29[1] = v25;
    void v29[2] = v26;
    char v30 = v27;
    long long v28 = v23;
    v29[0] = v24;
    sub_100063E3C((uint64_t)v29 + 8, (uint64_t)&v23, &qword_1000C5360);
    if (*((void *)&v24 + 1))
    {
      sub_100003DD0(&qword_1000C58C8);
      if (swift_dynamicCast())
      {
        uint64_t v3 = *(void *)(v1 + 16);
        sub_100063EA0((uint64_t)&v28, (uint64_t)&v23);
        uint64_t v21 = sub_100003DD0(&qword_1000C58D0);
        uint64_t v22 = &off_1000BE0B0;
        *((void *)&v20 + 1) = 0;
        swift_bridgeObjectRetain();
        sub_1000418BC((uint64_t)&v28);
        a1[3] = (uint64_t)&type metadata for SingleValueDecoder.UnkeyedContainer;
        a1[4] = sub_100064124();
        uint64_t v4 = swift_allocObject();
        *a1 = v4;
        *(void *)(v4 + 16) = v3;
        long long v5 = v23;
        *(_OWORD *)(v4 + 40) = v24;
        long long v6 = v26;
        *(_OWORD *)(v4 + 56) = v25;
        *(_OWORD *)(v4 + 72) = v6;
        *(unsigned char *)(v4 + 88) = v27;
        *(_OWORD *)(v4 + 24) = v5;
        sub_10004B100(&v20, v4 + 96);
        return;
      }
    }
    else
    {
      sub_1000556DC((uint64_t)&v23, &qword_1000C5360);
    }
    sub_10002FDE0();
    swift_allocError();
    *(void *)uint64_t v19 = 3;
    *(_OWORD *)(v19 + 8) = 0u;
    *(_OWORD *)(v19 + 24) = 0u;
    *(_OWORD *)(v19 + 40) = 0u;
    *(_OWORD *)(v19 + 56) = 0u;
    *(void *)(v19 + 72) = 0;
    *(unsigned char *)(v19 + 80) = 15;
    swift_willThrow();
    sub_1000418BC((uint64_t)&v28);
  }
  else
  {
    sub_1000556DC((uint64_t)&v23, &qword_1000C5888);
    *(void *)&long long v20 = *(void *)(v1 + 16);
    swift_bridgeObjectRetain();
    sub_10005B61C((uint64_t)&v23);
    if (*((void *)&v24 + 1))
    {
      sub_10004B100(&v23, (uint64_t)&v28);
      sub_1000356C0((uint64_t)&v28, (uint64_t)&v23);
      uint64_t v7 = v20;
      uint64_t v8 = *((void *)&v24 + 1);
      uint64_t v9 = sub_100008DB4((uint64_t)&v23, *((uint64_t *)&v24 + 1));
      __chkstk_darwin(v9);
      long long v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v12 + 16))(v11);
      uint64_t v13 = sub_100075CE0((uint64_t)v11, v7, v8);
      uint64_t v15 = v14;
      uint64_t v17 = v16;
      sub_100005128((uint64_t)&v23);
      sub_10002FDE0();
      swift_allocError();
      *(void *)uint64_t v18 = v13;
      *(void *)(v18 + 8) = v15;
      *(void *)(v18 + 16) = v17;
      *(_OWORD *)(v18 + 24) = 0u;
      *(_OWORD *)(v18 + 40) = 0u;
      *(_OWORD *)(v18 + 56) = 0u;
      *(void *)(v18 + 72) = 0;
      *(unsigned char *)(v18 + 80) = 11;
      swift_willThrow();
      sub_100005128((uint64_t)&v28);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10005B61C(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)(*(void *)v1 + 16))
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v4 = v3[2];
      if (v4)
      {
LABEL_4:
        uint64_t v5 = v4 - 1;
        sub_10004B100((long long *)&v3[5 * v4 - 1], (uint64_t)v6);
        v3[2] = v5;
        *(void *)uint64_t v1 = v3;
        sub_10004B100(v6, (uint64_t)v7);
        sub_10004B100(v7, a1);
        return;
      }
    }
    else
    {
      uint64_t v3 = sub_100063A60(v3);
      uint64_t v4 = v3[2];
      if (v4) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
}

void sub_10005B6CC()
{
  sub_100063E3C(v0 + 128, (uint64_t)&v18, &qword_1000C5888);
  if (*((void *)&v18 + 1))
  {
    v24[1] = v20;
    void v24[2] = v21;
    char v25 = v22;
    long long v23 = v18;
    v24[0] = v19;
    sub_100063E3C((uint64_t)v24 + 8, (uint64_t)&v18, &qword_1000C5360);
    sub_100003DD0(&qword_1000C5360);
    if ((swift_dynamicCast() & 1) == 0)
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v14 = v13;
      sub_100063E3C((uint64_t)v24 + 8, v13, &qword_1000C5360);
      uint64_t v15 = *((void *)&v23 + 1);
      uint64_t v16 = *(void *)&v24[0];
      *(void *)(v14 + 32) = v23;
      *(void *)(v14 + 40) = v15;
      *(void *)(v14 + 48) = v16;
      *(unsigned char *)(v14 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    sub_1000418BC((uint64_t)&v23);
  }
  else
  {
    sub_1000556DC((uint64_t)&v18, &qword_1000C5888);
    uint64_t v26 = *(void *)(v0 + 120);
    swift_bridgeObjectRetain();
    sub_10005B61C((uint64_t)&v18);
    if (*((void *)&v19 + 1))
    {
      sub_10004B100(&v18, (uint64_t)&v23);
      sub_1000356C0((uint64_t)&v23, (uint64_t)&v18);
      uint64_t v1 = v26;
      uint64_t v2 = *((void *)&v19 + 1);
      uint64_t v3 = sub_100008DB4((uint64_t)&v18, *((uint64_t *)&v19 + 1));
      __chkstk_darwin(v3);
      uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v6 + 16))(v5);
      uint64_t v7 = sub_100075CE0((uint64_t)v5, v1, v2);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      sub_100005128((uint64_t)&v18);
      sub_10002FDE0();
      swift_allocError();
      *(void *)uint64_t v12 = v7;
      *(void *)(v12 + 8) = v9;
      *(void *)(v12 + 16) = v11;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *(void *)(v12 + 72) = 0;
      *(unsigned char *)(v12 + 80) = 11;
      swift_willThrow();
      sub_100005128((uint64_t)&v23);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10005B978()
{
  sub_100063E3C(v0 + 128, (uint64_t)&v19, &qword_1000C5888);
  if (*((void *)&v19 + 1))
  {
    v25[1] = v21;
    v25[2] = v22;
    char v26 = v23;
    long long v24 = v19;
    v25[0] = v20;
    sub_100063E3C((uint64_t)v25 + 8, (uint64_t)&v19, &qword_1000C5360);
    sub_100003DD0(&qword_1000C5360);
    if ((swift_dynamicCast() & 1) == 0)
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v14 = v13;
      sub_100063E3C((uint64_t)v25 + 8, v13, &qword_1000C5360);
      uint64_t v15 = *((void *)&v24 + 1);
      uint64_t v16 = *(void *)&v25[0];
      *(void *)(v14 + 32) = v24;
      *(void *)(v14 + 40) = v15;
      *(void *)(v14 + 48) = v16;
      *(unsigned char *)(v14 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    sub_1000418BC((uint64_t)&v24);
  }
  else
  {
    sub_1000556DC((uint64_t)&v19, &qword_1000C5888);
    uint64_t v18 = *(void *)(v0 + 120);
    swift_bridgeObjectRetain();
    sub_10005B61C((uint64_t)&v19);
    if (*((void *)&v20 + 1))
    {
      sub_10004B100(&v19, (uint64_t)&v24);
      sub_1000356C0((uint64_t)&v24, (uint64_t)&v19);
      uint64_t v1 = v18;
      uint64_t v2 = *((void *)&v20 + 1);
      uint64_t v3 = sub_100008DB4((uint64_t)&v19, *((uint64_t *)&v20 + 1));
      __chkstk_darwin(v3);
      uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v6 + 16))(v5);
      uint64_t v7 = sub_100075CE0((uint64_t)v5, v1, v2);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      sub_100005128((uint64_t)&v19);
      sub_10002FDE0();
      swift_allocError();
      *(void *)uint64_t v12 = v7;
      *(void *)(v12 + 8) = v9;
      *(void *)(v12 + 16) = v11;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *(void *)(v12 + 72) = 0;
      *(unsigned char *)(v12 + 80) = 11;
      swift_willThrow();
      sub_100005128((uint64_t)&v24);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10005BC1C()
{
  sub_100063E3C(v0 + 128, (uint64_t)&v20, &qword_1000C5888);
  if (*((void *)&v20 + 1))
  {
    v26[1] = v22;
    v26[2] = v23;
    char v27 = v24;
    long long v25 = v20;
    v26[0] = v21;
    sub_100063E3C((uint64_t)v26 + 8, (uint64_t)&v20, &qword_1000C5360);
    sub_100003DD0(&qword_1000C5360);
    if (swift_dynamicCast())
    {
      char v19 = 0;
    }
    else
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v14 = v13;
      sub_100063E3C((uint64_t)v26 + 8, v13, &qword_1000C5360);
      uint64_t v15 = *((void *)&v25 + 1);
      uint64_t v16 = *(void *)&v26[0];
      *(void *)(v14 + 32) = v25;
      *(void *)(v14 + 40) = v15;
      *(void *)(v14 + 48) = v16;
      *(unsigned char *)(v14 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    sub_1000418BC((uint64_t)&v25);
  }
  else
  {
    sub_1000556DC((uint64_t)&v20, &qword_1000C5888);
    uint64_t v18 = *(void *)(v0 + 120);
    swift_bridgeObjectRetain();
    sub_10005B61C((uint64_t)&v20);
    if (*((void *)&v21 + 1))
    {
      sub_10004B100(&v20, (uint64_t)&v25);
      sub_1000356C0((uint64_t)&v25, (uint64_t)&v20);
      uint64_t v1 = v18;
      uint64_t v2 = *((void *)&v21 + 1);
      uint64_t v3 = sub_100008DB4((uint64_t)&v20, *((uint64_t *)&v21 + 1));
      __chkstk_darwin(v3);
      uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v6 + 16))(v5);
      uint64_t v7 = sub_100075CE0((uint64_t)v5, v1, v2);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      sub_100005128((uint64_t)&v20);
      sub_10002FDE0();
      swift_allocError();
      *(void *)uint64_t v12 = v7;
      *(void *)(v12 + 8) = v9;
      *(void *)(v12 + 16) = v11;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *(void *)(v12 + 72) = 0;
      *(unsigned char *)(v12 + 80) = 11;
      swift_willThrow();
      sub_100005128((uint64_t)&v25);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10005BEC4()
{
  sub_100063E3C(v0 + 128, (uint64_t)&v18, &qword_1000C5888);
  if (*((void *)&v18 + 1))
  {
    v24[1] = v20;
    void v24[2] = v21;
    char v25 = v22;
    long long v23 = v18;
    v24[0] = v19;
    sub_100063E3C((uint64_t)v24 + 8, (uint64_t)&v18, &qword_1000C5360);
    sub_100003DD0(&qword_1000C5360);
    if (swift_dynamicCast())
    {
      BYTE4(v26) = 0;
    }
    else
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v14 = v13;
      sub_100063E3C((uint64_t)v24 + 8, v13, &qword_1000C5360);
      uint64_t v15 = *((void *)&v23 + 1);
      uint64_t v16 = *(void *)&v24[0];
      *(void *)(v14 + 32) = v23;
      *(void *)(v14 + 40) = v15;
      *(void *)(v14 + 48) = v16;
      *(unsigned char *)(v14 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    sub_1000418BC((uint64_t)&v23);
  }
  else
  {
    sub_1000556DC((uint64_t)&v18, &qword_1000C5888);
    uint64_t v26 = *(void *)(v0 + 120);
    swift_bridgeObjectRetain();
    sub_10005B61C((uint64_t)&v18);
    if (*((void *)&v19 + 1))
    {
      sub_10004B100(&v18, (uint64_t)&v23);
      sub_1000356C0((uint64_t)&v23, (uint64_t)&v18);
      uint64_t v1 = v26;
      uint64_t v2 = *((void *)&v19 + 1);
      uint64_t v3 = sub_100008DB4((uint64_t)&v18, *((uint64_t *)&v19 + 1));
      __chkstk_darwin(v3);
      uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v6 + 16))(v5);
      uint64_t v7 = sub_100075CE0((uint64_t)v5, v1, v2);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      sub_100005128((uint64_t)&v18);
      sub_10002FDE0();
      swift_allocError();
      *(void *)uint64_t v12 = v7;
      *(void *)(v12 + 8) = v9;
      *(void *)(v12 + 16) = v11;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *(void *)(v12 + 72) = 0;
      *(unsigned char *)(v12 + 80) = 11;
      swift_willThrow();
      sub_100005128((uint64_t)&v23);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10005C16C()
{
  sub_100063E3C(v0 + 128, (uint64_t)&v20, &qword_1000C5888);
  if (*((void *)&v20 + 1))
  {
    v26[1] = v22;
    v26[2] = v23;
    char v27 = v24;
    long long v25 = v20;
    v26[0] = v21;
    sub_100063E3C((uint64_t)v26 + 8, (uint64_t)&v20, &qword_1000C5360);
    sub_100003DD0(&qword_1000C5360);
    if (swift_dynamicCast())
    {
      char v19 = 0;
    }
    else
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v14 = v13;
      sub_100063E3C((uint64_t)v26 + 8, v13, &qword_1000C5360);
      uint64_t v15 = *((void *)&v25 + 1);
      uint64_t v16 = *(void *)&v26[0];
      *(void *)(v14 + 32) = v25;
      *(void *)(v14 + 40) = v15;
      *(void *)(v14 + 48) = v16;
      *(unsigned char *)(v14 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    sub_1000418BC((uint64_t)&v25);
  }
  else
  {
    sub_1000556DC((uint64_t)&v20, &qword_1000C5888);
    uint64_t v18 = *(void *)(v0 + 120);
    swift_bridgeObjectRetain();
    sub_10005B61C((uint64_t)&v20);
    if (*((void *)&v21 + 1))
    {
      sub_10004B100(&v20, (uint64_t)&v25);
      sub_1000356C0((uint64_t)&v25, (uint64_t)&v20);
      uint64_t v1 = v18;
      uint64_t v2 = *((void *)&v21 + 1);
      uint64_t v3 = sub_100008DB4((uint64_t)&v20, *((uint64_t *)&v21 + 1));
      __chkstk_darwin(v3);
      uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v6 + 16))(v5);
      uint64_t v7 = sub_100075CE0((uint64_t)v5, v1, v2);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      sub_100005128((uint64_t)&v20);
      sub_10002FDE0();
      swift_allocError();
      *(void *)uint64_t v12 = v7;
      *(void *)(v12 + 8) = v9;
      *(void *)(v12 + 16) = v11;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *(void *)(v12 + 72) = 0;
      *(unsigned char *)(v12 + 80) = 11;
      swift_willThrow();
      sub_100005128((uint64_t)&v25);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10005C414()
{
  sub_100063E3C(v0 + 128, (uint64_t)&v18, &qword_1000C5888);
  if (*((void *)&v18 + 1))
  {
    v24[1] = v20;
    void v24[2] = v21;
    char v25 = v22;
    long long v23 = v18;
    v24[0] = v19;
    sub_100063E3C((uint64_t)v24 + 8, (uint64_t)&v18, &qword_1000C5360);
    sub_100003DD0(&qword_1000C5360);
    if (swift_dynamicCast())
    {
      BYTE1(v26) = 0;
    }
    else
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v14 = v13;
      sub_100063E3C((uint64_t)v24 + 8, v13, &qword_1000C5360);
      uint64_t v15 = *((void *)&v23 + 1);
      uint64_t v16 = *(void *)&v24[0];
      *(void *)(v14 + 32) = v23;
      *(void *)(v14 + 40) = v15;
      *(void *)(v14 + 48) = v16;
      *(unsigned char *)(v14 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    sub_1000418BC((uint64_t)&v23);
  }
  else
  {
    sub_1000556DC((uint64_t)&v18, &qword_1000C5888);
    uint64_t v26 = *(void *)(v0 + 120);
    swift_bridgeObjectRetain();
    sub_10005B61C((uint64_t)&v18);
    if (*((void *)&v19 + 1))
    {
      sub_10004B100(&v18, (uint64_t)&v23);
      sub_1000356C0((uint64_t)&v23, (uint64_t)&v18);
      uint64_t v1 = v26;
      uint64_t v2 = *((void *)&v19 + 1);
      uint64_t v3 = sub_100008DB4((uint64_t)&v18, *((uint64_t *)&v19 + 1));
      __chkstk_darwin(v3);
      uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v6 + 16))(v5);
      uint64_t v7 = sub_100075CE0((uint64_t)v5, v1, v2);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      sub_100005128((uint64_t)&v18);
      sub_10002FDE0();
      swift_allocError();
      *(void *)uint64_t v12 = v7;
      *(void *)(v12 + 8) = v9;
      *(void *)(v12 + 16) = v11;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *(void *)(v12 + 72) = 0;
      *(unsigned char *)(v12 + 80) = 11;
      swift_willThrow();
      sub_100005128((uint64_t)&v23);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10005C6BC()
{
  sub_100063E3C(v0 + 128, (uint64_t)&v18, &qword_1000C5888);
  if (*((void *)&v18 + 1))
  {
    v24[1] = v20;
    void v24[2] = v21;
    char v25 = v22;
    long long v23 = v18;
    v24[0] = v19;
    sub_100063E3C((uint64_t)v24 + 8, (uint64_t)&v18, &qword_1000C5360);
    sub_100003DD0(&qword_1000C5360);
    if (swift_dynamicCast())
    {
      BYTE2(v26) = 0;
    }
    else
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v14 = v13;
      sub_100063E3C((uint64_t)v24 + 8, v13, &qword_1000C5360);
      uint64_t v15 = *((void *)&v23 + 1);
      uint64_t v16 = *(void *)&v24[0];
      *(void *)(v14 + 32) = v23;
      *(void *)(v14 + 40) = v15;
      *(void *)(v14 + 48) = v16;
      *(unsigned char *)(v14 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    sub_1000418BC((uint64_t)&v23);
  }
  else
  {
    sub_1000556DC((uint64_t)&v18, &qword_1000C5888);
    uint64_t v26 = *(void *)(v0 + 120);
    swift_bridgeObjectRetain();
    sub_10005B61C((uint64_t)&v18);
    if (*((void *)&v19 + 1))
    {
      sub_10004B100(&v18, (uint64_t)&v23);
      sub_1000356C0((uint64_t)&v23, (uint64_t)&v18);
      uint64_t v1 = v26;
      uint64_t v2 = *((void *)&v19 + 1);
      uint64_t v3 = sub_100008DB4((uint64_t)&v18, *((uint64_t *)&v19 + 1));
      __chkstk_darwin(v3);
      uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v6 + 16))(v5);
      uint64_t v7 = sub_100075CE0((uint64_t)v5, v1, v2);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      sub_100005128((uint64_t)&v18);
      sub_10002FDE0();
      swift_allocError();
      *(void *)uint64_t v12 = v7;
      *(void *)(v12 + 8) = v9;
      *(void *)(v12 + 16) = v11;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *(void *)(v12 + 72) = 0;
      *(unsigned char *)(v12 + 80) = 11;
      swift_willThrow();
      sub_100005128((uint64_t)&v23);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10005C964()
{
  sub_100063E3C(v0 + 128, (uint64_t)&v18, &qword_1000C5888);
  if (*((void *)&v18 + 1))
  {
    v24[1] = v20;
    void v24[2] = v21;
    char v25 = v22;
    long long v23 = v18;
    v24[0] = v19;
    sub_100063E3C((uint64_t)v24 + 8, (uint64_t)&v18, &qword_1000C5360);
    sub_100003DD0(&qword_1000C5360);
    if (swift_dynamicCast())
    {
      BYTE4(v26) = 0;
    }
    else
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v14 = v13;
      sub_100063E3C((uint64_t)v24 + 8, v13, &qword_1000C5360);
      uint64_t v15 = *((void *)&v23 + 1);
      uint64_t v16 = *(void *)&v24[0];
      *(void *)(v14 + 32) = v23;
      *(void *)(v14 + 40) = v15;
      *(void *)(v14 + 48) = v16;
      *(unsigned char *)(v14 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    sub_1000418BC((uint64_t)&v23);
  }
  else
  {
    sub_1000556DC((uint64_t)&v18, &qword_1000C5888);
    uint64_t v26 = *(void *)(v0 + 120);
    swift_bridgeObjectRetain();
    sub_10005B61C((uint64_t)&v18);
    if (*((void *)&v19 + 1))
    {
      sub_10004B100(&v18, (uint64_t)&v23);
      sub_1000356C0((uint64_t)&v23, (uint64_t)&v18);
      uint64_t v1 = v26;
      uint64_t v2 = *((void *)&v19 + 1);
      uint64_t v3 = sub_100008DB4((uint64_t)&v18, *((uint64_t *)&v19 + 1));
      __chkstk_darwin(v3);
      uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v6 + 16))(v5);
      uint64_t v7 = sub_100075CE0((uint64_t)v5, v1, v2);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      sub_100005128((uint64_t)&v18);
      sub_10002FDE0();
      swift_allocError();
      *(void *)uint64_t v12 = v7;
      *(void *)(v12 + 8) = v9;
      *(void *)(v12 + 16) = v11;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *(void *)(v12 + 72) = 0;
      *(unsigned char *)(v12 + 80) = 11;
      swift_willThrow();
      sub_100005128((uint64_t)&v23);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10005CC0C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - v7;
  sub_100063E3C(v2 + 128, (uint64_t)&v29, &qword_1000C5888);
  if (*((void *)&v29 + 1))
  {
    v35[1] = v31;
    v35[2] = v32;
    char v36 = v33;
    long long v34 = v29;
    v35[0] = v30;
    sub_100063E3C((uint64_t)v35 + 8, (uint64_t)&v29, &qword_1000C5360);
    sub_100003DD0(&qword_1000C5360);
    char v9 = swift_dynamicCast();
    uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    if (v9)
    {
      uint64_t v11 = *(void *)(a1 - 8);
      v10(v8, 0, 1, a1);
      sub_1000418BC((uint64_t)&v34);
      (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v8, a1);
    }
    else
    {
      v10(v8, 1, 1, a1);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      sub_100063F0C();
      swift_allocError();
      uint64_t v25 = v24;
      sub_100063E3C((uint64_t)v35 + 8, v24, &qword_1000C5360);
      uint64_t v26 = *((void *)&v34 + 1);
      uint64_t v27 = *(void *)&v35[0];
      *(void *)(v25 + 32) = v34;
      *(void *)(v25 + 40) = v26;
      *(void *)(v25 + 48) = v27;
      *(unsigned char *)(v25 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
      sub_1000418BC((uint64_t)&v34);
    }
  }
  else
  {
    sub_1000556DC((uint64_t)&v29, &qword_1000C5888);
    uint64_t v28 = *(void *)(v2 + 120);
    swift_bridgeObjectRetain();
    sub_10005B61C((uint64_t)&v29);
    if (*((void *)&v30 + 1))
    {
      sub_10004B100(&v29, (uint64_t)&v34);
      sub_1000356C0((uint64_t)&v34, (uint64_t)&v29);
      uint64_t v12 = v28;
      uint64_t v13 = *((void *)&v30 + 1);
      uint64_t v14 = sub_100008DB4((uint64_t)&v29, *((uint64_t *)&v30 + 1));
      __chkstk_darwin(v14);
      uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v17 + 16))(v16);
      uint64_t v18 = sub_100075CE0((uint64_t)v16, v12, v13);
      uint64_t v20 = v19;
      uint64_t v22 = v21;
      sub_100005128((uint64_t)&v29);
      sub_10002FDE0();
      swift_allocError();
      *(void *)uint64_t v23 = v18;
      *(void *)(v23 + 8) = v20;
      *(void *)(v23 + 16) = v22;
      *(_OWORD *)(v23 + 24) = 0u;
      *(_OWORD *)(v23 + 40) = 0u;
      *(_OWORD *)(v23 + 56) = 0u;
      *(void *)(v23 + 72) = 0;
      *(unsigned char *)(v23 + 80) = 11;
      swift_willThrow();
      sub_100005128((uint64_t)&v34);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_10005CFCC()
{
  return swift_bridgeObjectRetain();
}

BOOL sub_10005CFD4()
{
  sub_100063E3C(v0 + 128, (uint64_t)v3, &qword_1000C5888);
  BOOL v1 = v4 == 0;
  sub_1000556DC((uint64_t)v3, &qword_1000C5888);
  return v1;
}

uint64_t sub_10005D02C()
{
  sub_10005B6CC();
  return v0 & 1;
}

void sub_10005D048()
{
}

void sub_10005D060()
{
}

void sub_10005D078()
{
}

void sub_10005D090()
{
}

void sub_10005D0B0()
{
}

void sub_10005D0D0()
{
}

void sub_10005D0F0()
{
}

void sub_10005D110()
{
}

uint64_t sub_10005D130()
{
  return SingleValueDecodingContainer.decode(_:)();
}

void sub_10005D148()
{
}

void sub_10005D168()
{
}

void sub_10005D188()
{
}

void sub_10005D1A8()
{
}

void sub_10005D1C8()
{
}

uint64_t sub_10005D1E8()
{
  return SingleValueDecodingContainer.decode(_:)();
}

void sub_10005D200(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

uint64_t sub_10005D218()
{
  BOOL v1 = v0;
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  sub_100008DB4((uint64_t)(v0 + 10), v2);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v3 + 32))(&v10, v2, v3);
  if (v11)
  {
    sub_100063EFC(&v10, v12);
    sub_100055680((uint64_t)v12, (uint64_t)&v10);
    if (swift_dynamicCast())
    {
      sub_100005128((uint64_t)v12);
      char v4 = v13 & 1;
    }
    else
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v6 = v5;
      sub_100055680((uint64_t)v12, v5);
      uint64_t v7 = v1[2];
      uint64_t v8 = v1[3];
      *(void *)(v6 + 32) = v1[1];
      *(void *)(v6 + 40) = v7;
      *(void *)(v6 + 48) = v8;
      *(unsigned char *)(v6 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
      sub_100005128((uint64_t)v12);
    }
    return v4 & 1;
  }
  else
  {
    sub_1000556DC((uint64_t)&v10, &qword_1000C5360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10005D394()
{
  BOOL v1 = v0;
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  sub_100008DB4((uint64_t)(v0 + 10), v2);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v3 + 32))(&v10, v2, v3);
  if (v11)
  {
    sub_100063EFC(&v10, v12);
    sub_100055680((uint64_t)v12, (uint64_t)&v10);
    if (swift_dynamicCast())
    {
      sub_100005128((uint64_t)v12);
      return v9;
    }
    else
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v6 = v5;
      sub_100055680((uint64_t)v12, v5);
      uint64_t v7 = v1[2];
      uint64_t v8 = v1[3];
      *(void *)(v6 + 32) = v1[1];
      *(void *)(v6 + 40) = v7;
      *(void *)(v6 + 48) = v8;
      *(unsigned char *)(v6 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
      return sub_100005128((uint64_t)v12);
    }
  }
  else
  {
    sub_1000556DC((uint64_t)&v10, &qword_1000C5360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10005D508()
{
  BOOL v1 = v0;
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  sub_100008DB4((uint64_t)(v0 + 10), v2);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v3 + 32))(&v9, v2, v3);
  if (v10)
  {
    sub_100063EFC(&v9, v11);
    sub_100055680((uint64_t)v11, (uint64_t)&v9);
    if ((swift_dynamicCast() & 1) == 0)
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v6 = v5;
      sub_100055680((uint64_t)v11, v5);
      uint64_t v7 = v1[2];
      uint64_t v8 = v1[3];
      *(void *)(v6 + 32) = v1[1];
      *(void *)(v6 + 40) = v7;
      *(void *)(v6 + 48) = v8;
      *(unsigned char *)(v6 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    return sub_100005128((uint64_t)v11);
  }
  else
  {
    sub_1000556DC((uint64_t)&v9, &qword_1000C5360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10005D680()
{
  BOOL v1 = v0;
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  sub_100008DB4((uint64_t)(v0 + 10), v2);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v3 + 32))(&v9, v2, v3);
  if (v10)
  {
    sub_100063EFC(&v9, v11);
    sub_100055680((uint64_t)v11, (uint64_t)&v9);
    if (swift_dynamicCast())
    {
      char v12 = 0;
    }
    else
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v6 = v5;
      sub_100055680((uint64_t)v11, v5);
      uint64_t v7 = v1[2];
      uint64_t v8 = v1[3];
      *(void *)(v6 + 32) = v1[1];
      *(void *)(v6 + 40) = v7;
      *(void *)(v6 + 48) = v8;
      *(unsigned char *)(v6 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    return sub_100005128((uint64_t)v11);
  }
  else
  {
    sub_1000556DC((uint64_t)&v9, &qword_1000C5360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10005D7F8()
{
  BOOL v1 = v0;
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  sub_100008DB4((uint64_t)(v0 + 10), v2);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v3 + 32))(&v10, v2, v3);
  if (v11)
  {
    sub_100063EFC(&v10, v12);
    sub_100055680((uint64_t)v12, (uint64_t)&v10);
    if (swift_dynamicCast())
    {
      sub_100005128((uint64_t)v12);
      return v9;
    }
    else
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v6 = v5;
      sub_100055680((uint64_t)v12, v5);
      uint64_t v7 = v1[2];
      uint64_t v8 = v1[3];
      *(void *)(v6 + 32) = v1[1];
      *(void *)(v6 + 40) = v7;
      *(void *)(v6 + 48) = v8;
      *(unsigned char *)(v6 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
      return sub_100005128((uint64_t)v12);
    }
  }
  else
  {
    sub_1000556DC((uint64_t)&v10, &qword_1000C5360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10005D970()
{
  BOOL v1 = v0;
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  sub_100008DB4((uint64_t)(v0 + 10), v2);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v3 + 32))(&v10, v2, v3);
  if (v11)
  {
    sub_100063EFC(&v10, v12);
    sub_100055680((uint64_t)v12, (uint64_t)&v10);
    if (swift_dynamicCast())
    {
      sub_100005128((uint64_t)v12);
      return v9;
    }
    else
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v6 = v5;
      sub_100055680((uint64_t)v12, v5);
      uint64_t v7 = v1[2];
      uint64_t v8 = v1[3];
      *(void *)(v6 + 32) = v1[1];
      *(void *)(v6 + 40) = v7;
      *(void *)(v6 + 48) = v8;
      *(unsigned char *)(v6 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
      return sub_100005128((uint64_t)v12);
    }
  }
  else
  {
    sub_1000556DC((uint64_t)&v10, &qword_1000C5360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10005DAE8()
{
  BOOL v1 = v0;
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  sub_100008DB4((uint64_t)(v0 + 10), v2);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v3 + 32))(&v10, v2, v3);
  if (v11)
  {
    sub_100063EFC(&v10, v12);
    sub_100055680((uint64_t)v12, (uint64_t)&v10);
    if (swift_dynamicCast())
    {
      sub_100005128((uint64_t)v12);
      return v9;
    }
    else
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v6 = v5;
      sub_100055680((uint64_t)v12, v5);
      uint64_t v7 = v1[2];
      uint64_t v8 = v1[3];
      *(void *)(v6 + 32) = v1[1];
      *(void *)(v6 + 40) = v7;
      *(void *)(v6 + 48) = v8;
      *(unsigned char *)(v6 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
      return sub_100005128((uint64_t)v12);
    }
  }
  else
  {
    sub_1000556DC((uint64_t)&v10, &qword_1000C5360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10005DC60()
{
  BOOL v1 = v0;
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  sub_100008DB4((uint64_t)(v0 + 10), v2);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v3 + 32))(&v10, v2, v3);
  if (v11)
  {
    sub_100063EFC(&v10, v12);
    sub_100055680((uint64_t)v12, (uint64_t)&v10);
    if (swift_dynamicCast())
    {
      sub_100005128((uint64_t)v12);
      return v9;
    }
    else
    {
      sub_100063F0C();
      swift_allocError();
      uint64_t v6 = v5;
      sub_100055680((uint64_t)v12, v5);
      uint64_t v7 = v1[2];
      uint64_t v8 = v1[3];
      *(void *)(v6 + 32) = v1[1];
      *(void *)(v6 + 40) = v7;
      *(void *)(v6 + 48) = v8;
      *(unsigned char *)(v6 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
      return sub_100005128((uint64_t)v12);
    }
  }
  else
  {
    sub_1000556DC((uint64_t)&v10, &qword_1000C5360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10005DDD8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v22 = a2;
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = v2[13];
  uint64_t v10 = v2[14];
  sub_100008DB4((uint64_t)(v2 + 10), v9);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 32))(&v19, v9, v10);
  if (v20)
  {
    sub_100063EFC(&v19, v21);
    sub_100055680((uint64_t)v21, (uint64_t)&v19);
    char v11 = swift_dynamicCast();
    char v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    if (v11)
    {
      uint64_t v13 = *(void *)(a1 - 8);
      v12(v8, 0, 1, a1);
      sub_100005128((uint64_t)v21);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22, v8, a1);
    }
    else
    {
      v12(v8, 1, 1, a1);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      sub_100063F0C();
      swift_allocError();
      uint64_t v16 = v15;
      sub_100055680((uint64_t)v21, v15);
      uint64_t v17 = v3[2];
      uint64_t v18 = v3[3];
      *(void *)(v16 + 32) = v3[1];
      *(void *)(v16 + 40) = v17;
      *(void *)(v16 + 48) = v18;
      *(unsigned char *)(v16 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
      return sub_100005128((uint64_t)v21);
    }
  }
  else
  {
    sub_1000556DC((uint64_t)&v19, &qword_1000C5360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void sub_10005E078()
{
}

uint64_t CommandInfoV0.superCommands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10005E0CC()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  sub_100005090(v0 + 10, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_10005E124()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  sub_100005090(v0 + 10, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2) & 1;
}

uint64_t sub_10005E17C()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  sub_100005090(v0 + 10, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t sub_10005E1D0()
{
  return sub_10005D218() & 1;
}

uint64_t sub_10005E1EC()
{
  return sub_10005D394();
}

uint64_t sub_10005E204()
{
  return sub_10005D508();
}

uint64_t sub_10005E21C()
{
  return sub_10005D680();
}

uint64_t sub_10005E234()
{
  return sub_10005D7F8();
}

uint64_t sub_10005E254()
{
  return sub_10005D970();
}

uint64_t sub_10005E274()
{
  return sub_10005DAE8();
}

uint64_t sub_10005E294()
{
  return sub_10005DC60();
}

uint64_t sub_10005E2B4()
{
  return sub_10005D7F8();
}

uint64_t sub_10005E2D4()
{
  return UnkeyedDecodingContainer.decode(_:)();
}

uint64_t sub_10005E2EC()
{
  return sub_10005D7F8();
}

uint64_t sub_10005E30C()
{
  return sub_10005D970();
}

uint64_t sub_10005E32C()
{
  return sub_10005DAE8();
}

uint64_t sub_10005E34C()
{
  return sub_10005DC60();
}

uint64_t sub_10005E36C()
{
  return sub_10005D7F8();
}

uint64_t sub_10005E38C()
{
  return UnkeyedDecodingContainer.decode(_:)();
}

uint64_t sub_10005E3A4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10005DDD8(a1, a2);
}

uint64_t sub_10005E3BC()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

uint64_t sub_10005E3D4()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

uint64_t sub_10005E3EC()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10005E410(uint64_t a1, uint64_t a2)
{
  return sub_10005E63C(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10005E43C()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10005E460(uint64_t a1, uint64_t a2)
{
  return sub_10005E584(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10005E48C(uint64_t a1, uint64_t a2)
{
  return sub_10005E5E0(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10005E4B8(uint64_t a1, uint64_t a2)
{
  return sub_10005E63C(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10005E4E4()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10005E508(uint64_t a1, uint64_t a2)
{
  return sub_10005E6C4(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10005E534()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10005E558(uint64_t a1, uint64_t a2)
{
  return sub_10005E584(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10005E584(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

uint64_t sub_10005E5B4(uint64_t a1, uint64_t a2)
{
  return sub_10005E5E0(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10005E5E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FFFF;
}

uint64_t sub_10005E610(uint64_t a1, uint64_t a2)
{
  return sub_10005E63C(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10005E63C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

uint64_t sub_10005E674()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10005E698(uint64_t a1, uint64_t a2)
{
  return sub_10005E6C4(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10005E6C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t sub_10005E6F0()
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
}

void sub_10005E71C()
{
}

void sub_10005E72C()
{
}

void sub_10005E778()
{
}

uint64_t sub_10005E7C4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10005E7CC()
{
  return sub_10005B224();
}

void sub_10005E7E4(uint64_t *a1@<X8>)
{
}

uint64_t sub_10005E7FC@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = (uint64_t)&type metadata for SingleValueDecoder.SingleValueContainer;
  a1[4] = sub_100064018();
  uint64_t v3 = swift_allocObject();
  *a1 = v3;
  sub_100063E04(v1, v3 + 16);
  uint64_t v4 = *(void *)(v1 + 16);
  sub_100063E3C(v1 + 48, v3 + 144, &qword_1000C5888);
  *(void *)(v3 + 136) = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10005E88C(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

unint64_t sub_10005E894()
{
  unint64_t result = qword_1000C5880;
  if (!qword_1000C5880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5880);
  }
  return result;
}

uint64_t sub_10005E8E8()
{
  return Array.count.getter();
}

BOOL sub_10005E908(uint64_t a1, uint64_t a2)
{
  return Array.endIndex.getter() <= a2;
}

double sub_10005E938@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 >= Array.endIndex.getter())
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    *(void *)(a2 + 24) = v5;
    sub_10000A954((uint64_t *)a2);
    Array.subscript.getter();
    *(void *)(v2 + 8) = v4 + 1;
  }
  return result;
}

uint64_t sub_10005E9B8()
{
  return sub_10005E8E8();
}

BOOL sub_10005E9E0()
{
  return sub_10005E908(*v0, v0[1]);
}

uint64_t sub_10005E9F0()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_10005E9FC(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  double result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  double result = (uint64_t)sub_10005FA90((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  double result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    double result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10005EAE8(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  double result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  double result = (uint64_t)sub_100060434((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  double result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    double result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10005EBD4(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  double result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  double result = (uint64_t)sub_1000601F8((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  double result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    double result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10005ECC4(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  double result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  double result = (uint64_t)sub_10005FB94((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  double result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    double result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10005EDB4(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  double result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  double result = (uint64_t)sub_100060634((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  double result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    double result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10005EEA4(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v6 = *(void *)(a3 + 16);
  if (v6 < a1 || v6 < a2)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  int64_t v10 = a2 - a1;
  int64_t v4 = *v5;
  int64_t v11 = *((void *)*v5 + 2);
  int64_t v12 = v11 + a2 - a1;
  if (__OFADD__(v11, a2 - a1)) {
    goto LABEL_19;
  }
  unint64_t v14 = a3;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v16 = *((void *)v4 + 3) >> 1, v16 < v12))
  {
    if (v11 <= v12) {
      int64_t v17 = v12;
    }
    else {
      int64_t v17 = v11;
    }
    int64_t v4 = sub_100060318(isUniquelyReferenced_nonNull_native, v17, 1, v4);
    int64_t v16 = *((void *)v4 + 3) >> 1;
  }
  uint64_t v18 = *((void *)v4 + 2);
  long long v19 = (uint64_t *)(v16 - v18);
  uint64_t v20 = sub_100063A88(&v75, &v4[192 * v18 + 32], v16 - v18, a1, a2, v14, a4);
  if ((uint64_t)v20 < v10) {
    goto LABEL_20;
  }
  if ((uint64_t)v20 >= 1)
  {
    uint64_t v21 = *((void *)v4 + 2);
    BOOL v22 = __OFADD__(v21, v20);
    uint64_t v23 = (char *)v20 + v21;
    if (v22)
    {
      __break(1u);
      goto LABEL_24;
    }
    *((void *)v4 + 2) = v23;
  }
  if (v20 != v19)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *int64_t v5 = v4;
    return result;
  }
LABEL_21:
  int64_t v12 = *((void *)v4 + 2);
  unint64_t v14 = v78;
  a4 = v76;
  if (v78 == v76)
  {
    sub_100035580(v73);
    sub_1000641E0((uint64_t)v73, (uint64_t)__dst);
    goto LABEL_27;
  }
LABEL_24:
  uint64_t v25 = v77;
  uint64_t v26 = sub_100082830(v72, v14, v75, a4, v77);
  long long v28 = v27[2];
  long long v30 = *v27;
  long long v29 = v27[1];
  v73[3] = v27[3];
  v73[2] = v28;
  v73[0] = v30;
  v73[1] = v29;
  long long v31 = v27[6];
  long long v33 = v27[4];
  long long v32 = v27[5];
  v73[7] = v27[7];
  v73[6] = v31;
  v73[4] = v33;
  v73[5] = v32;
  long long v34 = v27[10];
  long long v36 = v27[8];
  long long v35 = v27[9];
  v73[11] = v27[11];
  v73[10] = v34;
  v73[8] = v36;
  v73[9] = v35;
  memmove(__dst, v27, 0xC0uLL);
  sub_10002E940((uint64_t)v73);
  uint64_t result = ((uint64_t (*)(void *, void))v26)(v72, 0);
  if (v14 < *(void *)(v25 + 16))
  {
    ++v14;
    uint64_t v38 = __dst;
    String.init(argument:)(*(Swift::String *)(&v37 - 1));
LABEL_27:
    while (1)
    {
      sub_1000641E0((uint64_t)__dst, (uint64_t)v72);
      sub_1000641E0((uint64_t)v72, (uint64_t)v73);
      if (sub_1000353CC((uint64_t)v73) == 1) {
        goto LABEL_18;
      }
      unint64_t v39 = *((void *)v4 + 3);
      int64_t v40 = v39 >> 1;
      if ((uint64_t)(v39 >> 1) < v12 + 1)
      {
        int64_t v4 = sub_100060318((char *)(v39 > 1), v12 + 1, 1, v4);
        int64_t v40 = *((void *)v4 + 3) >> 1;
      }
      sub_1000641E0((uint64_t)__dst, (uint64_t)v70);
      sub_1000641E0((uint64_t)v70, (uint64_t)v71);
      if (sub_1000353CC((uint64_t)v71) != 1 && v12 < v40)
      {
        uint64_t v66 = v75;
        uint64_t v41 = v77;
        while (1)
        {
          uint64_t v42 = &v4[192 * v12 + 32];
          int64_t v43 = v12 + 1;
          while (1)
          {
            int64_t v12 = v43;
            sub_1000641E0((uint64_t)v70, (uint64_t)v69);
            long long v44 = v69[3];
            long long v46 = v69[0];
            long long v45 = v69[1];
            *((_OWORD *)v42 + 2) = v69[2];
            *((_OWORD *)v42 + 3) = v44;
            *(_OWORD *)uint64_t v42 = v46;
            *((_OWORD *)v42 + 1) = v45;
            long long v47 = v69[7];
            long long v49 = v69[4];
            long long v48 = v69[5];
            *((_OWORD *)v42 + 6) = v69[6];
            *((_OWORD *)v42 + 7) = v47;
            *((_OWORD *)v42 + 4) = v49;
            *((_OWORD *)v42 + 5) = v48;
            long long v50 = v69[11];
            long long v52 = v69[8];
            long long v51 = v69[9];
            *((_OWORD *)v42 + 10) = v69[10];
            *((_OWORD *)v42 + 11) = v50;
            *((_OWORD *)v42 + 8) = v52;
            *((_OWORD *)v42 + 9) = v51;
            if (v14 != a4) {
              break;
            }
            sub_100035580(v68);
            sub_1000641E0((uint64_t)v68, (uint64_t)__dst);
            sub_1000641E0((uint64_t)__dst, (uint64_t)v70);
            sub_1000641E0((uint64_t)v70, (uint64_t)v71);
            if (sub_1000353CC((uint64_t)v71) == 1)
            {
              unint64_t v14 = a4;
              *((void *)v4 + 2) = v12;
              goto LABEL_27;
            }
            v42 += 192;
            int64_t v43 = v12 + 1;
            if (v12 >= v40)
            {
              unint64_t v14 = a4;
              *((void *)v4 + 2) = v12;
              goto LABEL_27;
            }
          }
          long long v53 = sub_100082830(v67, v14, v66, a4, v41);
          long long v55 = v54[3];
          long long v57 = *v54;
          long long v56 = v54[1];
          v68[2] = v54[2];
          v68[3] = v55;
          v68[0] = v57;
          v68[1] = v56;
          long long v58 = v54[7];
          long long v60 = v54[4];
          long long v59 = v54[5];
          v68[6] = v54[6];
          v68[7] = v58;
          v68[4] = v60;
          v68[5] = v59;
          long long v61 = v54[11];
          long long v63 = v54[8];
          long long v62 = v54[9];
          v68[10] = v54[10];
          v68[11] = v61;
          v68[8] = v63;
          v68[9] = v62;
          memmove(__dst, v54, 0xC0uLL);
          sub_10002E940((uint64_t)v68);
          uint64_t result = ((uint64_t (*)(void *, void))v53)(v67, 0);
          if (v14 >= *(void *)(v41 + 16)) {
            break;
          }
          ++v14;
          unint64_t v65 = __dst;
          String.init(argument:)(*(Swift::String *)(&v64 - 1));
          sub_1000641E0((uint64_t)__dst, (uint64_t)v70);
          sub_1000641E0((uint64_t)v70, (uint64_t)v71);
          if (sub_1000353CC((uint64_t)v71) == 1 || v12 >= v40) {
            goto LABEL_26;
          }
        }
        __break(1u);
        break;
      }
LABEL_26:
      *((void *)v4 + 2) = v12;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10005F2DC(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)sub_10005FED4((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

void *sub_10005F3C8(void *result)
{
  uint64_t v2 = result[2];
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = sub_100060980(result, v10, 1, v3);
  uint64_t v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((v3[3] >> 1) - v3[2] < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_100003DD0(&qword_1000C58A8);
  uint64_t result = (void *)swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = (void *)swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = v3[2];
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    v3[2] = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10005F4C8(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    uint64_t result = sub_100061630((uint64_t)v13, *(void *)(*(void *)(v1 + 48) + 24 * v9), *(void *)(*(void *)(v1 + 48) + 24 * v9 + 8), *(unsigned __int8 *)(*(void *)(v1 + 48) + 24 * v9 + 16) | (*(unsigned __int8 *)(*(void *)(v1 + 48)+ 24 * v9+ 17) << 8));
  }
  int64_t v12 = v10 + 4;
  if (v12 < v7)
  {
    unint64_t v11 = *(void *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v2 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        ++v12;
        if (v11) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v12;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

uint64_t sub_10005F640(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    unint64_t v9 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_10005F708(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a1 + 48);
    for (uint64_t i = (uint64_t *)(a2 + 48); ; i += 8)
    {
      uint64_t v6 = *(v3 - 2);
      uint64_t v7 = *(v3 - 1);
      unint64_t v8 = *v3;
      uint64_t v10 = v3[3];
      uint64_t v9 = v3[4];
      int v11 = *((unsigned __int8 *)v3 + 40);
      uint64_t v12 = *(i - 2);
      uint64_t v13 = *(i - 1);
      uint64_t v15 = *i;
      uint64_t v14 = i[1];
      uint64_t v16 = i[2];
      uint64_t v17 = i[3];
      uint64_t v18 = i[4];
      uint64_t v19 = ((unint64_t)*v3 >> 61) & 3;
      char v20 = *((unsigned char *)i + 40);
      if (v19)
      {
        if (v19 != 1)
        {
          uint64_t result = 0;
          if ((v15 & 0x6000000000000000) != 0x4000000000000000
            || v15 != 0x4000000000000000
            || v13 | v12 | v14 | v16)
          {
            return result;
          }
          uint64_t v27 = v3[4];
          int v28 = *((unsigned __int8 *)v3 + 40);
          uint64_t v29 = i[4];
          sub_100063FAC(0, 0, 0x4000000000000000uLL);
          uint64_t v18 = v29;
          int v11 = v28;
          uint64_t v9 = v27;
LABEL_33:
          if (v10 != v17) {
            return 0;
          }
          goto LABEL_34;
        }
        if ((v15 & 0x6000000000000000) != 0x2000000000000000) {
          return 0;
        }
        goto LABEL_13;
      }
      if ((v15 & 0x6000000000000000) != 0) {
        return 0;
      }
      if ((v8 & 0x8000000000000000) != 0)
      {
        if ((v15 & 0x8000000000000000) == 0) {
          return 0;
        }
        uint64_t v30 = v3[1];
        uint64_t v31 = v3[2];
        uint64_t v50 = i[4];
        if (v8 >> 6)
        {
          int v32 = v15 & 0xC0;
          if (v8 >> 6 == 1)
          {
            if (v32 != 64) {
              return 0;
            }
            if (v6 == v12 && v7 == v13)
            {
              if ((v8 ^ v15)) {
                return 0;
              }
            }
            else
            {
              uint64_t v47 = v3[2];
              uint64_t v49 = v3[4];
              uint64_t v44 = v3[1];
              int v45 = *((unsigned __int8 *)v3 + 40);
              char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t result = 0;
              if ((v40 & 1) == 0) {
                return result;
              }
              uint64_t v9 = v49;
              uint64_t v18 = v50;
              int v11 = v45;
              uint64_t v30 = v44;
              uint64_t v31 = v47;
              if ((v8 ^ v15)) {
                return result;
              }
            }
LABEL_61:
            if (v30 == v14 && v31 == v16) {
              goto LABEL_33;
            }
            int v41 = v11;
            uint64_t v42 = v9;
            char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t result = 0;
            if ((v43 & 1) == 0) {
              return result;
            }
            BOOL v39 = v10 == v17;
            uint64_t v9 = v42;
            int v11 = v41;
            goto LABEL_65;
          }
          if (v32 != 128) {
            return 0;
          }
        }
        else if (*i >= 0x40u)
        {
          return 0;
        }
        if (v6 != v12 || v7 != v13)
        {
          uint64_t v46 = v3[2];
          uint64_t v48 = v3[4];
          int v33 = *((unsigned __int8 *)v3 + 40);
          uint64_t v34 = v3[1];
          char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v31 = v46;
          uint64_t v9 = v48;
          uint64_t v30 = v34;
          uint64_t v18 = v50;
          int v11 = v33;
          if ((v35 & 1) == 0) {
            return 0;
          }
        }
        goto LABEL_61;
      }
      if (v15 < 0) {
        return 0;
      }
      if (!(v8 >> 6)) {
        break;
      }
      int v26 = v15 & 0xC0;
      if (v8 >> 6 != 1)
      {
        if (v26 != 128) {
          return 0;
        }
        goto LABEL_13;
      }
      if (v26 != 64) {
        return 0;
      }
      if (v6 != v12 || v7 != v13)
      {
        uint64_t v50 = i[4];
        int v36 = *((unsigned __int8 *)v3 + 40);
        uint64_t v37 = v3[4];
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if (v38 & 1) == 0 || ((v8 ^ v15)) {
          return result;
        }
        BOOL v39 = v10 == v17;
        uint64_t v9 = v37;
        int v11 = v36;
LABEL_65:
        uint64_t v18 = v50;
        if (!v39) {
          return result;
        }
        goto LABEL_34;
      }
      uint64_t result = 0;
      if (((v8 ^ v15) & 1) != 0 || v10 != v17) {
        return result;
      }
LABEL_34:
      if (v11)
      {
        if ((v20 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        if (v9 == v18) {
          char v5 = v20;
        }
        else {
          char v5 = 1;
        }
        if (v5) {
          return 0;
        }
      }
      v3 += 8;
      if (!--v2) {
        return 1;
      }
    }
    if (*i >= 0x40u) {
      return 0;
    }
LABEL_13:
    if (v6 == v12 && v7 == v13) {
      goto LABEL_33;
    }
    uint64_t v21 = i[4];
    int v22 = *((unsigned __int8 *)v3 + 40);
    uint64_t v23 = v3[4];
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v24 & 1) == 0) {
      return result;
    }
    uint64_t v9 = v23;
    int v11 = v22;
    uint64_t v18 = v21;
    if (v10 != v17) {
      return result;
    }
    goto LABEL_34;
  }
  return 1;
}

unint64_t sub_10005FA68(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10005FA88(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

char *sub_10005FA90(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5118);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_10005FB94(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C56C0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_10005FCAC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C56A8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100003DD0(&qword_1000C56B0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_10005FDD0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C58F0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_10005FED4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C56B8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_10005FFD8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C50C0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1000600D4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C58F8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100003DD0(&qword_1000C50C8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000601F8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5708);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100060318(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5230);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 192);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[192 * v8]) {
      memmove(v12, v13, 192 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100060434(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5700);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100060538(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5910);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100060634(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C56D8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_10006074C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5908);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100060868(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5900);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 136);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[136 * v8]) {
      memmove(v12, v13, 136 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100060980(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C5890);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100003DD0(&qword_1000C58A8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100060AB8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003DD0(&qword_1000C56E0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_100060BB4(uint64_t a1, uint64_t a2, int a3)
{
  Hasher.init(_seed:)();
  if (a3 >> 6)
  {
    if (a3 >> 6 == 1)
    {
      Hasher._combine(_:)(1uLL);
      Character.hash(into:)();
      Hasher._combine(_:)(a3 & 1);
      goto LABEL_7;
    }
    Swift::UInt v6 = 2;
  }
  else
  {
    Swift::UInt v6 = 0;
  }
  Hasher._combine(_:)(v6);
  String.hash(into:)();
LABEL_7:
  Swift::Int v7 = Hasher._finalize()();

  return sub_100060DF0(a1, a2, a3, v7);
}

unint64_t sub_100060C94(uint64_t a1, uint64_t a2, void *a3)
{
  Hasher.init(_seed:)();
  sub_1000759C8((uint64_t)v8, a1, a2, (uint64_t)a3);
  Swift::Int v6 = Hasher._finalize()();

  return sub_100060F30(a1, a2, a3, v6);
}

unint64_t sub_100060D20(uint64_t a1)
{
  type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_1000610CC(a1, v2);
}

unint64_t sub_100060D84(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_100061264(a1, v2);
}

unint64_t sub_100060DF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    unsigned __int8 v13 = a3 & 0xC0;
    do
    {
      uint64_t v14 = (uint64_t *)(v12 + 24 * v7);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      unsigned int v17 = *((unsigned __int8 *)v14 + 16);
      if (v17 >> 6)
      {
        if (v17 >> 6 == 1)
        {
          if (v13 == 64)
          {
            BOOL v18 = v15 == a1 && v16 == a2;
            if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && ((a3 ^ v17) & 1) == 0) {
              return v7;
            }
          }
          goto LABEL_4;
        }
        if (v13 != 128) {
          goto LABEL_4;
        }
      }
      else if (a3 >= 0x40u)
      {
        goto LABEL_4;
      }
      BOOL v19 = v15 == a1 && v16 == a2;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return v7;
      }
LABEL_4:
      unint64_t v7 = (v7 + 1) & v11;
    }
    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t sub_100060F30(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    char v24 = a3 + 9;
    do
    {
      unsigned __int8 v13 = (void *)(v12 + 24 * v7);
      uint64_t v14 = (void *)v13[2];
      BOOL v15 = *v13 == a1 && v13[1] == a2;
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v16 = v14[2];
        if (v16 == a3[2])
        {
          if (!v16 || v14 == a3) {
            return v7;
          }
          BOOL v17 = v14[4] == a3[4] && v14[5] == a3[5];
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            if (v16 == 1) {
              return v7;
            }
            BOOL v18 = v14[6] == a3[6] && v14[7] == a3[7];
            if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              uint64_t v19 = v16 - 2;
              if (!v19) {
                return v7;
              }
              char v20 = v14 + 9;
              for (uint64_t i = v24; ; i += 2)
              {
                BOOL v22 = *(v20 - 1) == *(i - 1) && *v20 == *i;
                if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                  break;
                }
                v20 += 2;
                if (!--v19) {
                  return v7;
                }
              }
            }
          }
        }
      }
      unint64_t v7 = (v7 + 1) & v11;
    }
    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t sub_1000610CC(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v20 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    unsigned __int8 v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v11 = v5 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = *(void *)(v11 + 56);
    BOOL v15 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      uint64_t v16 = v11;
      v12(v7, *(void *)(v22 + 48) + v14 * v9, v4);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v15)(v7, v4);
      if (v17) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      uint64_t v11 = v16;
    }
    while (((*(void *)(v20 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_100061264(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100061300(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *v4;
  Hasher.init(_seed:)();
  int v9 = a4 >> 6;
  if (a4 >> 6)
  {
    if (v9 == 1)
    {
      Hasher._combine(_:)(3uLL);
      Character.hash(into:)();
      Hasher._combine(_:)(a4 & 1);
    }
    else
    {
      if (a3 | a2 || a4 != 128) {
        Swift::UInt v10 = 2;
      }
      else {
        Swift::UInt v10 = 0;
      }
      Hasher._combine(_:)(v10);
    }
    swift_bridgeObjectRetain();
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    sub_1000439B8(a2, a3, a4);
    String.hash(into:)();
    Hasher._combine(_:)(a4 & 1);
    sub_100043714(a2, a3, a4);
  }
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v14 = v8 + 56;
  if (((*(void *)(v8 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v40 = *v36;
    *int v36 = 0x8000000000000000;
    sub_1000439B8(a2, a3, a4);
    sub_100062600(a2, a3, a4, v13, isUniquelyReferenced_nonNull_native);
    *int v36 = v40;
    swift_bridgeObjectRelease();
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    uint64_t result = 1;
    *(unsigned char *)(a1 + 16) = a4;
    return result;
  }
  uint64_t v15 = ~v12;
  uint64_t v16 = *(void *)(v8 + 48);
  BOOL v18 = a2 == 1 && a3 == 0;
  if (a4 == 128)
  {
    BOOL v19 = (a3 | a2) != 0;
  }
  else
  {
    BOOL v18 = 0;
    BOOL v19 = 1;
  }
  BOOL v20 = v9 == 2 && v18;
  char v21 = v9 != 2 || v19;
  char v38 = v21;
  BOOL v39 = v20;
  while (1)
  {
    uint64_t v22 = (uint64_t *)(v16 + 24 * v13);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    unsigned int v25 = *((unsigned __int8 *)v22 + 16);
    if (!(v25 >> 6))
    {
      if (a4 >= 0x40u) {
        goto LABEL_29;
      }
LABEL_35:
      BOOL v26 = v23 == a2 && v24 == a3;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && ((a4 ^ v25) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v31 = a2;
        uint64_t v29 = a3;
        char v30 = a4;
        goto LABEL_50;
      }
      goto LABEL_29;
    }
    if (v25 >> 6 == 1)
    {
      if (v9 != 1) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
    if (v24 | v23 || v25 != 128) {
      break;
    }
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v31 = 0;
      goto LABEL_49;
    }
LABEL_29:
    unint64_t v13 = (v13 + 1) & v15;
    if (((*(void *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
      goto LABEL_47;
    }
  }
  if (!v39) {
    goto LABEL_29;
  }
  swift_bridgeObjectRelease();
  uint64_t v31 = 1;
LABEL_49:
  uint64_t v29 = 0;
  char v30 = 0x80;
LABEL_50:
  sub_100043714(v31, v29, v30);
  uint64_t v32 = *(void *)(*v36 + 48) + 24 * v13;
  uint64_t v33 = *(void *)v32;
  uint64_t v34 = *(void *)(v32 + 8);
  *(void *)a1 = *(void *)v32;
  *(void *)(a1 + 8) = v34;
  char v35 = *(unsigned char *)(v32 + 16);
  *(unsigned char *)(a1 + 16) = v35;
  sub_1000439B8(v33, v34, v35);
  return 0;
}

uint64_t sub_100061630(uint64_t a1, Swift::UInt a2, Swift::UInt a3, unsigned int a4)
{
  uint64_t v5 = v4;
  unsigned int v6 = a4;
  unsigned int v10 = a4 >> 8;
  uint64_t v11 = *v5;
  Hasher.init(_seed:)();
  if (v10 & 1) != 0 || (Hasher._combine(_:)(1uLL), Hasher._combine(_:)(a2), (v6))
  {
    Swift::UInt v12 = 0;
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Swift::UInt v12 = a3;
  }
  Hasher._combine(_:)(v12);
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v15 = v13 & ~v14;
  if (((*(void *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
  {
LABEL_18:
    int v20 = (v6 >> 8) & 1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *v5;
    *uint64_t v5 = 0x8000000000000000;
    sub_1000628D8(a2, a3, v6 & 0x1FF, v15, isUniquelyReferenced_nonNull_native);
    *uint64_t v5 = v22;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_19;
  }
  uint64_t v16 = ~v14;
  while (1)
  {
    uint64_t v17 = *(void *)(v11 + 48) + 24 * v15;
    if (*(unsigned char *)(v17 + 17))
    {
      if ((v6 & 0x100) != 0) {
        goto LABEL_17;
      }
      goto LABEL_8;
    }
    if ((v6 & 0x100) != 0 || *(void *)v17 != a2) {
      goto LABEL_8;
    }
    if ((*(unsigned char *)(v17 + 16) & 1) == 0) {
      break;
    }
    if (v6) {
      goto LABEL_17;
    }
LABEL_8:
    unint64_t v15 = (v15 + 1) & v16;
    if (((*(void *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
      goto LABEL_18;
    }
  }
  if ((v6 & 1) != 0 || *(void *)(v17 + 8) != a3) {
    goto LABEL_8;
  }
LABEL_17:
  uint64_t result = 0;
  uint64_t v19 = *(void *)(*v5 + 48) + 24 * v15;
  a2 = *(void *)v19;
  a3 = *(void *)(v19 + 8);
  LOBYTE(v6) = *(unsigned char *)(v19 + 16);
  LOBYTE(v20) = *(unsigned char *)(v19 + 17);
LABEL_19:
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = v20;
  return result;
}

uint64_t sub_1000617EC(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRetain();
      sub_100003DD0(&qword_1000C58E0);
      swift_dynamicCast();
      *a1 = v19;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v17 = sub_100061A34(v7, result + 1);
    Swift::Int v21 = v17;
    if (*(void *)(v17 + 24) <= *(void *)(v17 + 16))
    {
      swift_retain();
      sub_1000622B0();
      uint64_t v18 = v21;
    }
    else
    {
      uint64_t v18 = v17;
      swift_retain();
    }
    sub_10006255C(a2, v18);
    *uint64_t v3 = v18;
  }
  else
  {
    Hasher.init(_seed:)();
    Hasher._combine(_:)(a2);
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    if ((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
    {
      uint64_t v13 = *(void *)(v6 + 48);
      if (*(void *)(v13 + 8 * v12) == a2)
      {
LABEL_12:
        swift_release();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      uint64_t v14 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v14;
        if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          break;
        }
        if (*(void *)(v13 + 8 * v12) == a2) {
          goto LABEL_12;
        }
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    Swift::Int v16 = swift_retain();
    sub_100062AB8(v16, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v20;
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

Swift::Int sub_100061A34(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100003DD0(&qword_1000C58E8);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    for (; __CocoaSet.Iterator.next()(); ++*(void *)(v2 + 16))
    {
      sub_100003DD0(&qword_1000C58E0);
      swift_dynamicCast();
      if (*(void *)(v2 + 24) <= *(void *)(v2 + 16))
      {
        sub_1000622B0();
        uint64_t v2 = v14;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v13);
      Swift::Int result = Hasher._finalize()();
      uint64_t v4 = v2 + 56;
      uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v6 = result & ~v5;
      unint64_t v7 = v6 >> 6;
      if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
      {
        unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v9 = 0;
        unint64_t v10 = (unint64_t)(63 - v5) >> 6;
        do
        {
          if (++v7 == v10 && (v9 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          BOOL v11 = v7 == v10;
          if (v7 == v10) {
            unint64_t v7 = 0;
          }
          v9 |= v11;
          uint64_t v12 = *(void *)(v4 + 8 * v7);
        }
        while (v12 == -1);
        unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
      }
      *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
      *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_100061C30()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003DD0(qword_1000C5928);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_46;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v34 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  uint64_t v32 = v0;
  int64_t v33 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_22;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      return result;
    }
    if (v15 >= v33) {
      break;
    }
    Swift::Int v16 = (void *)(v2 + 56);
    unint64_t v17 = *(void *)(v34 + 8 * v15);
    ++v10;
    if (!v17)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v33) {
        goto LABEL_40;
      }
      unint64_t v17 = *(void *)(v34 + 8 * v10);
      if (!v17)
      {
        int64_t v18 = v15 + 2;
        if (v18 >= v33)
        {
LABEL_40:
          swift_release();
          uint64_t v1 = v32;
          goto LABEL_42;
        }
        unint64_t v17 = *(void *)(v34 + 8 * v18);
        if (!v17)
        {
          while (1)
          {
            int64_t v10 = v18 + 1;
            if (__OFADD__(v18, 1)) {
              goto LABEL_48;
            }
            if (v10 >= v33) {
              goto LABEL_40;
            }
            unint64_t v17 = *(void *)(v34 + 8 * v10);
            ++v18;
            if (v17) {
              goto LABEL_21;
            }
          }
        }
        int64_t v10 = v18;
      }
    }
LABEL_21:
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v10 << 6);
LABEL_22:
    uint64_t v19 = *(void *)(v2 + 48) + 24 * v14;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    unsigned int v22 = *(unsigned __int8 *)(v19 + 16);
    Hasher.init(_seed:)();
    if (v22 >> 6)
    {
      if (v22 >> 6 == 1)
      {
        Hasher._combine(_:)(3uLL);
        Character.hash(into:)();
        Hasher._combine(_:)(v22 & 1);
      }
      else
      {
        if (v21 | v20 || v22 != 128) {
          Swift::UInt v23 = 2;
        }
        else {
          Swift::UInt v23 = 0;
        }
        Hasher._combine(_:)(v23);
      }
    }
    else
    {
      Hasher._combine(_:)(1uLL);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Hasher._combine(_:)(v22 & 1);
      sub_100043714(v20, v21, v22);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }
        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v8 + 8 * v26);
      }
      while (v30 == -1);
      unint64_t v11 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
    *(void *)uint64_t v12 = v20;
    *(void *)(v12 + 8) = v21;
    *(unsigned char *)(v12 + 16) = v22;
    ++*(void *)(v4 + 16);
  }
  swift_release();
  uint64_t v1 = v32;
  Swift::Int v16 = (void *)(v2 + 56);
LABEL_42:
  uint64_t v31 = 1 << *(unsigned char *)(v2 + 32);
  if (v31 > 63) {
    bzero(v16, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *Swift::Int v16 = -1 << v31;
  }
  *(void *)(v2 + 16) = 0;
LABEL_46:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100061FBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003DD0(&qword_1000C58B0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v32 = (void *)(v2 + 56);
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v31 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v9 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v12 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v13 = v12 | (v5 << 6);
      }
      else
      {
        int64_t v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v2 + 56;
        if (v14 >= v31) {
          goto LABEL_35;
        }
        unint64_t v15 = v32[v14];
        ++v5;
        if (!v15)
        {
          int64_t v5 = v14 + 1;
          if (v14 + 1 >= v31) {
            goto LABEL_35;
          }
          unint64_t v15 = v32[v5];
          if (!v15)
          {
            int64_t v16 = v14 + 2;
            if (v16 >= v31)
            {
LABEL_35:
              uint64_t v30 = 1 << *(unsigned char *)(v2 + 32);
              if (v30 > 63) {
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v32 = -1 << v30;
              }
              uint64_t v1 = v0;
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v32[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v5 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_41;
                }
                if (v5 >= v31) {
                  goto LABEL_35;
                }
                unint64_t v15 = v32[v5];
                ++v16;
                if (v15) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v5 = v16;
          }
        }
LABEL_21:
        unint64_t v8 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
      }
      uint64_t v17 = *(void *)(v2 + 48) + 24 * v13;
      Swift::UInt v18 = *(void *)v17;
      Swift::UInt v19 = *(void *)(v17 + 8);
      char v20 = *(unsigned char *)(v17 + 16);
      char v21 = *(unsigned char *)(v17 + 17);
      Hasher.init(_seed:)();
      if (v21 & 1) != 0 || (Hasher._combine(_:)(1uLL), Hasher._combine(_:)(v18), (v20))
      {
        Swift::UInt v22 = 0;
      }
      else
      {
        Hasher._combine(_:)(1uLL);
        Swift::UInt v22 = v19;
      }
      Hasher._combine(_:)(v22);
      uint64_t result = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v10 = __clz(__rbit64((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v9 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v10 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      uint64_t v11 = *(void *)(v4 + 48) + 24 * v10;
      *(void *)uint64_t v11 = v18;
      *(void *)(v11 + 8) = v19;
      *(unsigned char *)(v11 + 16) = v20;
      *(unsigned char *)(v11 + 17) = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000622B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003DD0(&qword_1000C58E8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t sub_10006255C(Swift::UInt a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

Swift::Int sub_100062600(Swift::Int result, uint64_t a2, int a3, unint64_t a4, char a5)
{
  uint64_t v9 = result;
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  if (v11 > v10 && (a5 & 1) != 0) {
    goto LABEL_53;
  }
  if (a5)
  {
    sub_100061C30();
  }
  else
  {
    if (v11 > v10)
    {
      unint64_t result = (Swift::Int)sub_100062C0C();
      goto LABEL_53;
    }
    sub_100063104();
  }
  uint64_t v12 = *v5;
  Hasher.init(_seed:)();
  int v13 = a3 >> 6;
  if (a3 >> 6)
  {
    if (v13 == 1)
    {
      Hasher._combine(_:)(3uLL);
      Character.hash(into:)();
      Hasher._combine(_:)(a3 & 1);
    }
    else
    {
      if (a2 | v9 || a3 != 128) {
        Swift::UInt v14 = 2;
      }
      else {
        Swift::UInt v14 = 0;
      }
      Hasher._combine(_:)(v14);
    }
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(a3 & 1);
    sub_100043714(v9, a2, a3);
  }
  unint64_t result = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v12 + 32);
  a4 = result & ~v15;
  uint64_t v16 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v17 = ~v15;
    uint64_t v18 = *(void *)(v12 + 48);
    BOOL v20 = v9 == 1 && a2 == 0;
    if (a3 == 128)
    {
      BOOL v21 = (a2 | v9) != 0;
    }
    else
    {
      BOOL v20 = 0;
      BOOL v21 = 1;
    }
    BOOL v22 = v13 == 2 && v20;
    char v23 = v13 != 2 || v21;
    char v33 = v23;
    BOOL v34 = v22;
    do
    {
      uint64_t v24 = v18 + 24 * a4;
      unint64_t result = *(void *)v24;
      uint64_t v25 = *(void *)(v24 + 8);
      unsigned int v26 = *(unsigned __int8 *)(v24 + 16);
      if (v26 >> 6)
      {
        if (v26 >> 6 != 1)
        {
          if (v25 | result || v26 != 128)
          {
            if (v34) {
              goto LABEL_52;
            }
          }
          else if ((v33 & 1) == 0)
          {
            goto LABEL_52;
          }
          goto LABEL_35;
        }
        if (v13 != 1) {
          goto LABEL_35;
        }
      }
      else if (a3 >= 0x40u)
      {
        goto LABEL_35;
      }
      BOOL v27 = result == v9 && v25 == a2;
      if (v27 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        if (((a3 ^ v26) & 1) == 0)
        {
LABEL_52:
          unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
LABEL_35:
      a4 = (a4 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_53:
  uint64_t v28 = *v35;
  *(void *)(*v35 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v29 = *(void *)(v28 + 48) + 24 * a4;
  *(void *)uint64_t v29 = v9;
  *(void *)(v29 + 8) = a2;
  *(unsigned char *)(v29 + 16) = a3;
  uint64_t v30 = *(void *)(v28 + 16);
  BOOL v31 = __OFADD__(v30, 1);
  uint64_t v32 = v30 + 1;
  if (v31) {
    __break(1u);
  }
  else {
    *(void *)(v28 + 16) = v32;
  }
  return result;
}

Swift::Int sub_1000628D8(Swift::Int result, Swift::UInt a2, __int16 a3, unint64_t a4, char a5)
{
  char v7 = a3;
  Swift::UInt v9 = result;
  unint64_t v11 = *(void *)(*v5 + 16);
  unint64_t v12 = *(void *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0) {
    goto LABEL_25;
  }
  if (a5)
  {
    sub_100061FBC();
  }
  else
  {
    if (v12 > v11)
    {
      unint64_t result = (Swift::Int)sub_100062DB8();
      goto LABEL_25;
    }
    sub_100063454();
  }
  uint64_t v13 = *v5;
  Hasher.init(_seed:)();
  if (a3 & 0x100) != 0 || (Hasher._combine(_:)(1uLL), Hasher._combine(_:)(v9), (a3))
  {
    Swift::UInt v14 = 0;
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Swift::UInt v14 = a2;
  }
  Hasher._combine(_:)(v14);
  unint64_t result = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a4 = result & ~v15;
  if ((*(void *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v16 = ~v15;
    do
    {
      uint64_t v17 = *(void *)(v13 + 48) + 24 * a4;
      if (*(unsigned char *)(v17 + 17))
      {
        if ((a3 & 0x100) != 0) {
          goto LABEL_24;
        }
      }
      else if ((a3 & 0x100) == 0 && *(void *)v17 == v9)
      {
        if (*(unsigned char *)(v17 + 16))
        {
          if (a3) {
            goto LABEL_24;
          }
        }
        else if ((a3 & 1) == 0 && *(void *)(v17 + 8) == a2)
        {
LABEL_24:
          unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      a4 = (a4 + 1) & v16;
    }
    while (((*(void *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_25:
  uint64_t v18 = *v5;
  *(void *)(*v5 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v19 = *(void *)(v18 + 48) + 24 * a4;
  *(void *)uint64_t v19 = v9;
  *(void *)(v19 + 8) = a2;
  *(unsigned char *)(v19 + 16) = v7;
  *(unsigned char *)(v19 + 17) = HIBYTE(a3) & 1;
  uint64_t v20 = *(void *)(v18 + 16);
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v18 + 16) = v22;
  }
  return result;
}

Swift::Int sub_100062AB8(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000622B0();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)sub_100062F58();
      goto LABEL_14;
    }
    sub_100063724();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  unint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      sub_100003DD0(&qword_1000C58E0);
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void *sub_100062C0C()
{
  uint64_t v1 = v0;
  sub_100003DD0(qword_1000C5928);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v4 + 48) + v16;
    char v21 = *(unsigned char *)(v17 + 16);
    *(void *)uint64_t v20 = *(void *)v17;
    *(void *)(v20 + 8) = v19;
    *(unsigned char *)(v20 + 16) = v21;
    unint64_t result = (void *)sub_1000439B8(v18, v19, v21);
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100062DB8()
{
  uint64_t v1 = v0;
  sub_100003DD0(&qword_1000C58B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v24 = __clz(__rbit64(v22));
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = v24 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    char v18 = *(unsigned char *)(v17 + 16);
    char v19 = *(unsigned char *)(v17 + 17);
    uint64_t v20 = *(void *)(v4 + 48) + v16;
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v17;
    *(unsigned char *)(v20 + 16) = v18;
    *(unsigned char *)(v20 + 17) = v19;
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100062F58()
{
  uint64_t v1 = v0;
  sub_100003DD0(&qword_1000C58E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t result = (void *)swift_retain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100063104()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003DD0(qword_1000C5928);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_41:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v30 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v31 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain_n();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_21;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v15 >= v31) {
      goto LABEL_39;
    }
    unint64_t v16 = *(void *)(v30 + 8 * v15);
    ++v10;
    if (!v16)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v31) {
        goto LABEL_39;
      }
      unint64_t v16 = *(void *)(v30 + 8 * v10);
      if (!v16)
      {
        int64_t v17 = v15 + 2;
        if (v17 >= v31)
        {
LABEL_39:
          uint64_t result = swift_release_n();
          uint64_t v1 = v0;
          goto LABEL_41;
        }
        unint64_t v16 = *(void *)(v30 + 8 * v17);
        int64_t v10 = v17;
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_21:
    uint64_t v18 = *(void *)(v2 + 48) + 24 * v14;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    unsigned int v21 = *(unsigned __int8 *)(v18 + 16);
    Hasher.init(_seed:)();
    if (v21 >> 6)
    {
      if (v21 >> 6 == 1)
      {
        Hasher._combine(_:)(3uLL);
        Character.hash(into:)();
        Hasher._combine(_:)(v21 & 1);
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v20 | v19 || v21 != 128) {
          Swift::UInt v22 = 2;
        }
        else {
          Swift::UInt v22 = 0;
        }
        Hasher._combine(_:)(v22);
      }
    }
    else
    {
      Hasher._combine(_:)(1uLL);
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      Hasher._combine(_:)(v21 & 1);
      sub_100043714(v19, v20, v21);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v8 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
    *(void *)uint64_t v12 = v19;
    *(void *)(v12 + 8) = v20;
    *(unsigned char *)(v12 + 16) = v21;
    ++*(void *)(v4 + 16);
  }
  while (1)
  {
    int64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v31) {
      goto LABEL_39;
    }
    unint64_t v16 = *(void *)(v30 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_100063454()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003DD0(&qword_1000C58B0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_37:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v30 = v2 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v31 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = result + 56;
  while (v8)
  {
    unint64_t v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v13 = v12 | (v5 << 6);
LABEL_22:
    uint64_t v17 = *(void *)(v2 + 48) + 24 * v13;
    Swift::UInt v18 = *(void *)v17;
    Swift::UInt v19 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    char v21 = *(unsigned char *)(v17 + 17);
    Hasher.init(_seed:)();
    if (v21 & 1) != 0 || (Hasher._combine(_:)(1uLL), Hasher._combine(_:)(v18), (v20))
    {
      Swift::UInt v22 = 0;
    }
    else
    {
      Hasher._combine(_:)(1uLL);
      Swift::UInt v22 = v19;
    }
    Hasher._combine(_:)(v22);
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v9 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v10 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v11 = *(void *)(v4 + 48) + 24 * v10;
    *(void *)uint64_t v11 = v18;
    *(void *)(v11 + 8) = v19;
    *(unsigned char *)(v11 + 16) = v20;
    *(unsigned char *)(v11 + 17) = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v14 >= v31) {
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v30 + 8 * v14);
  ++v5;
  if (v15) {
    goto LABEL_21;
  }
  int64_t v5 = v14 + 1;
  if (v14 + 1 >= v31) {
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v30 + 8 * v5);
  if (v15)
  {
LABEL_21:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
    goto LABEL_22;
  }
  int64_t v16 = v14 + 2;
  if (v16 >= v31)
  {
LABEL_35:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_37;
  }
  unint64_t v15 = *(void *)(v30 + 8 * v16);
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v31) {
      goto LABEL_35;
    }
    unint64_t v15 = *(void *)(v30 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_21;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100063724()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003DD0(&qword_1000C58E8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
    uint64_t result = swift_retain();
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

char *sub_1000639A8(uint64_t a1)
{
  return sub_100060318(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1000639BC(uint64_t a1)
{
  return sub_100060434(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1000639D0(uint64_t a1)
{
  return sub_1000601F8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000639E4(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

void *sub_100063A60(void *a1)
{
  return sub_100060980(0, a1[2], 0, a1);
}

char *sub_100063A74(uint64_t a1)
{
  return sub_100060AB8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t *sub_100063A88(uint64_t *result, char *__dst, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = result;
  if (!__dst) {
    goto LABEL_5;
  }
  if (!a3)
  {
    uint64_t v7 = a4;
    uint64_t result = 0;
    goto LABEL_21;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a5 == a4)
    {
LABEL_5:
      uint64_t result = 0;
      uint64_t v7 = a4;
LABEL_21:
      *uint64_t v11 = a4;
      v11[1] = a5;
      _OWORD v11[2] = a6;
      v11[3] = a7;
      v11[4] = v7;
      return result;
    }
    uint64_t v25 = a7;
    uint64_t v24 = a5 - a4;
    if (a5 <= a4)
    {
LABEL_18:
      __break(1u);
LABEL_19:
      sub_10002E940((uint64_t)result);
      a7 = v25;
      uint64_t result = (uint64_t *)a3;
      goto LABEL_21;
    }
    unint64_t v12 = __dst;
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(a6 + 16);
    if (v14 <= a4) {
      uint64_t v14 = a4;
    }
    uint64_t v27 = v14 - a4;
    uint64_t v15 = a3 - 1;
    unint64_t v16 = (_OWORD *)(a6 + 192 * a4 + 32);
    uint64_t v17 = a4 - a5 + 1;
    while ((a4 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(a4 + v13) >= *(void *)(a6 + 16)) {
        goto LABEL_23;
      }
      long long v18 = v16[9];
      v28[8] = v16[8];
      v28[9] = v18;
      long long v19 = v16[11];
      v28[10] = v16[10];
      v28[11] = v19;
      long long v20 = v16[5];
      v28[4] = v16[4];
      v28[5] = v20;
      long long v21 = v16[7];
      v28[6] = v16[6];
      v28[7] = v21;
      long long v22 = v16[1];
      v28[0] = *v16;
      v28[1] = v22;
      long long v23 = v16[3];
      v28[2] = v16[2];
      v28[3] = v23;
      if (v27 == v13) {
        goto LABEL_24;
      }
      uint64_t v7 = a4 + v13 + 1;
      memmove(v12, v16, 0xC0uLL);
      uint64_t result = (uint64_t *)v28;
      if (v15 == v13) {
        goto LABEL_19;
      }
      if (!(v17 + v13))
      {
        sub_10002E940((uint64_t)v28);
        uint64_t v7 = a5;
        uint64_t result = (uint64_t *)v24;
        a7 = v25;
        goto LABEL_21;
      }
      uint64_t result = (uint64_t *)sub_10002E940((uint64_t)v28);
      if (v7 >= a4)
      {
        v12 += 192;
        ++v13;
        v16 += 12;
        if (v7 < a5) {
          continue;
        }
      }
      goto LABEL_18;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100063C20(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_100063CC0(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 24 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

unint64_t sub_100063D2C()
{
  unint64_t result = qword_1000C5898;
  if (!qword_1000C5898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5898);
  }
  return result;
}

uint64_t sub_100063D80()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 72))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 112)) {
      sub_100005128(v0 + 88);
    }
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 129, 7);
}

uint64_t sub_100063E04(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100063E3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003DD0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100063EA0(uint64_t a1, uint64_t a2)
{
  return a2;
}

_OWORD *sub_100063EFC(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_100063F0C()
{
  unint64_t result = qword_1000C58B8;
  if (!qword_1000C58B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C58B8);
  }
  return result;
}

void sub_100063F60()
{
}

uint64_t sub_100063FAC(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = (a3 >> 61) & 3;
  if (v3 == 1) {
    return swift_bridgeObjectRetain();
  }
  if (!v3) {
    return sub_100063FCC(result, a2, a3);
  }
  return result;
}

uint64_t sub_100063FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    sub_1000319B8(a1, a2, a3);
    return swift_bridgeObjectRetain();
  }
  else
  {
    return sub_1000319B8(a1, a2, a3);
  }
}

unint64_t sub_100064018()
{
  unint64_t result = qword_1000C58C0;
  if (!qword_1000C58C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C58C0);
  }
  return result;
}

uint64_t sub_10006406C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[9])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v0[14]) {
      sub_100005128((uint64_t)(v0 + 11));
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (v0[19])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v0[24]) {
      sub_100005128((uint64_t)(v0 + 21));
    }
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 209, 7);
}

unint64_t sub_100064124()
{
  unint64_t result = qword_1000C58D8;
  if (!qword_1000C58D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C58D8);
  }
  return result;
}

uint64_t sub_100064178()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 72)) {
    sub_100005128(v0 + 48);
  }
  swift_bridgeObjectRelease();
  sub_100005128(v0 + 96);

  return _swift_deallocObject(v0, 136, 7);
}

uint64_t sub_1000641E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003DD0(&qword_1000C5148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_OWORD *sub_100064248(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  long long v3 = *(_OWORD *)((char *)a1 + 40);
  *(_OWORD *)((char *)a2 + 40) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 1), (uint64_t)(a1 + 1));
  return a2;
}

uint64_t sub_1000642B4(uint64_t a1)
{
  return a1;
}

uint64_t destroy for SingleValueDecoder.UnkeyedContainer(uint64_t a1)
{
  if (*(void *)(a1 + 56)) {
    sub_100005128(a1 + 32);
  }
  swift_bridgeObjectRelease();
  return sub_100005128(a1 + 80);
}

uint64_t initializeWithCopy for SingleValueDecoder.UnkeyedContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  unsigned int v6 = (_OWORD *)(a1 + 32);
  unint64_t v7 = (_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(void *)(a1 + 56) = v8;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v8 - 8))(a1 + 32, v7, v8);
  }
  else
  {
    long long v9 = v7[1];
    *unsigned int v6 = *v7;
    *(_OWORD *)(a1 + 48) = v9;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v10 = a2 + 80;
  long long v11 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v11;
  uint64_t v12 = v11;
  uint64_t v13 = **(void (***)(uint64_t, uint64_t, uint64_t))(v11 - 8);
  swift_bridgeObjectRetain();
  v13(a1 + 80, v10, v12);
  return a1;
}

uint64_t assignWithCopy for SingleValueDecoder.UnkeyedContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 56);
  if (!*(void *)(a1 + 56))
  {
    if (v4)
    {
      *(void *)(a1 + 56) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 32, a2 + 32);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    sub_100005128(a1 + 32);
    goto LABEL_7;
  }
  sub_10005A5D8((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
LABEL_8:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  sub_100059E6C((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
  return a1;
}

__n128 initializeWithTake for ArgumentDefinition.Help(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for SingleValueDecoder.UnkeyedContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56)) {
    sub_100005128(a1 + 32);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  sub_100005128(a1 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleValueDecoder.UnkeyedContainer(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SingleValueDecoder.UnkeyedContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SingleValueDecoder.UnkeyedContainer()
{
  return &type metadata for SingleValueDecoder.UnkeyedContainer;
}

void *sub_1000646F8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100064728()
{
  return swift_bridgeObjectRelease();
}

void *sub_100064730(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *sub_100064780(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ArgumentSet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArgumentSet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for ArrayWrapper()
{
  return sub_10003A4F0();
}

uint64_t destroy for SingleValueDecoder.SingleValueContainer(void *a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[7])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (a1[12]) {
      sub_100005128((uint64_t)(a1 + 9));
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = a1[17];
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (a1[22]) {
      sub_100005128((uint64_t)(a1 + 19));
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SingleValueDecoder.SingleValueContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v7;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    uint64_t v8 = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8)
    {
      *(void *)(a1 + 96) = v8;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(a1 + 72, a2 + 72, v8);
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = v11;
    }
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v9;
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    long long v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v10;
  }
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v12 = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  if (v12)
  {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v12;
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    uint64_t v13 = *(void *)(a2 + 176);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13)
    {
      *(void *)(a1 + 176) = v13;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8))(a1 + 152, a2 + 152, v13);
    }
    else
    {
      long long v16 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v16;
    }
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v14;
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    long long v15 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v15;
  }
  return a1;
}

uint64_t assignWithCopy for SingleValueDecoder.SingleValueContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  uint64_t v5 = (_OWORD *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (!v6)
    {
      sub_1000418BC(a1 + 48);
      *uint64_t v4 = *v5;
      long long v10 = *(_OWORD *)(a2 + 80);
      long long v9 = *(_OWORD *)(a2 + 96);
      long long v11 = *(_OWORD *)(a2 + 64);
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
      *(_OWORD *)(a1 + 80) = v10;
      *(_OWORD *)(a1 + 96) = v9;
      *(_OWORD *)(a1 + 64) = v11;
      goto LABEL_18;
    }
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(a2 + 96);
    if (*(void *)(a1 + 96))
    {
      if (v7)
      {
        sub_10005A5D8((uint64_t *)(a1 + 72), (uint64_t *)(a2 + 72));
LABEL_15:
        *(void *)(a1 + 104) = *(void *)(a2 + 104);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
        goto LABEL_18;
      }
      sub_100005128(a1 + 72);
    }
    else if (v7)
    {
      *(void *)(a1 + 96) = v7;
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 72, a2 + 72);
      goto LABEL_15;
    }
    long long v15 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v15;
    goto LABEL_15;
  }
  if (v6)
  {
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    uint64_t v8 = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8)
    {
      *(void *)(a1 + 96) = v8;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(a1 + 72, a2 + 72, v8);
    }
    else
    {
      long long v16 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = v16;
    }
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    swift_bridgeObjectRetain();
  }
  else
  {
    *uint64_t v4 = *v5;
    long long v12 = *(_OWORD *)(a2 + 64);
    long long v13 = *(_OWORD *)(a2 + 80);
    long long v14 = *(_OWORD *)(a2 + 96);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    *(_OWORD *)(a1 + 80) = v13;
    *(_OWORD *)(a1 + 96) = v14;
    *(_OWORD *)(a1 + 64) = v12;
  }
LABEL_18:
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = (_OWORD *)(a1 + 128);
  long long v18 = (_OWORD *)(a2 + 128);
  uint64_t v19 = *(void *)(a2 + 136);
  if (*(void *)(a1 + 136))
  {
    if (v19)
    {
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(a2 + 176);
      if (*(void *)(a1 + 176))
      {
        if (v20)
        {
          sub_10005A5D8((uint64_t *)(a1 + 152), (uint64_t *)(a2 + 152));
LABEL_32:
          *(void *)(a1 + 184) = *(void *)(a2 + 184);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
          return a1;
        }
        sub_100005128(a1 + 152);
      }
      else if (v20)
      {
        *(void *)(a1 + 176) = v20;
        (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1 + 152, a2 + 152);
        goto LABEL_32;
      }
      long long v28 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v28;
      goto LABEL_32;
    }
    sub_1000418BC(a1 + 128);
    *uint64_t v17 = *v18;
    long long v23 = *(_OWORD *)(a2 + 160);
    long long v22 = *(_OWORD *)(a2 + 176);
    long long v24 = *(_OWORD *)(a2 + 144);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v23;
    *(_OWORD *)(a1 + 176) = v22;
    *(_OWORD *)(a1 + 144) = v24;
  }
  else if (v19)
  {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    uint64_t v21 = *(void *)(a2 + 176);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v21)
    {
      *(void *)(a1 + 176) = v21;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v21 - 8))(a1 + 152, a2 + 152, v21);
    }
    else
    {
      long long v29 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v29;
    }
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    swift_bridgeObjectRetain();
  }
  else
  {
    *uint64_t v17 = *v18;
    long long v25 = *(_OWORD *)(a2 + 144);
    long long v26 = *(_OWORD *)(a2 + 160);
    long long v27 = *(_OWORD *)(a2 + 176);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v26;
    *(_OWORD *)(a1 + 176) = v27;
    *(_OWORD *)(a1 + 144) = v25;
  }
  return a1;
}

__n128 initializeWithTake for SingleValueDecoder.SingleValueContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for SingleValueDecoder.SingleValueContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 56)) {
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 56);
  if (!v5)
  {
    sub_1000418BC(a1 + 48);
LABEL_7:
    long long v7 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v7;
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    long long v8 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v8;
    goto LABEL_8;
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 96)) {
    sub_100005128(a1 + 72);
  }
  long long v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v6;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
LABEL_8:
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 136))
  {
LABEL_14:
    long long v11 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v11;
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    long long v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    return a1;
  }
  uint64_t v9 = *(void *)(a2 + 136);
  if (!v9)
  {
    sub_1000418BC(a1 + 128);
    goto LABEL_14;
  }
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 176)) {
    sub_100005128(a1 + 152);
  }
  long long v10 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v10;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleValueDecoder.SingleValueContainer(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 193)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SingleValueDecoder.SingleValueContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 192) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 193) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 193) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SingleValueDecoder.SingleValueContainer()
{
  return &type metadata for SingleValueDecoder.SingleValueContainer;
}

__n128 initializeWithCopy for ArgumentDecoder.Error(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ArgumentDecoder.Error(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 32)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ArgumentDecoder.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_1000652E0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000652F8(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[2] = 0;
    result[3] = 0;
    result[1] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ArgumentDecoder.Error()
{
  return &type metadata for ArgumentDecoder.Error;
}

uint64_t sub_100065334(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (unsigned __int8 *)(a1 + 48);
  while (1)
  {
    unsigned __int8 v3 = *v2;
    if ((*v2 & 0xC0) != 0x40) {
      break;
    }
    v2 += 24;
    if (!--v1)
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      unsigned __int8 v3 = *(unsigned char *)(a1 + 48);
      goto LABEL_8;
    }
  }
  uint64_t v4 = *((void *)v2 - 2);
  uint64_t v5 = *((void *)v2 - 1);
LABEL_8:
  sub_1000319B8(v4, v5, v3);
  return v4;
}

void *sub_1000653BC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1000653C8(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1000653D0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1000653E4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_1000653F8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10006540C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_10006543C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100065468@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_10006548C(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1000654A0(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_1000654B4(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1000654C8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000654DC(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000654F0(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100065504(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_100065518()
{
  return *v0 == 0;
}

uint64_t sub_100065528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_100065540(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_100065554@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100065564(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100065570(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100065584@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_100068DB0(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1000655C4@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = (void *)*a1;
  if (*a1 >= 2uLL)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = v4[2];
    if (v5)
    {
LABEL_3:
      long long v6 = v4 + 4;
      while (*((unsigned __int8 *)v6 + 16) >> 6 == 1)
      {
        v6 += 3;
        if (!--v5)
        {
          unint64_t v7 = v4[4];
          uint64_t v8 = v4[5];
          sub_1000319B8(v7, v8, *((unsigned char *)v4 + 48));
          goto LABEL_11;
        }
      }
      unint64_t v7 = *v6;
      uint64_t v8 = v6[1];
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v5 = _swiftEmptyArrayStorage[2];
    if (v5) {
      goto LABEL_3;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  long long v10 = (void *)a1[4];
  if (!v10[2])
  {
    uint64_t v8 = 0xE500000000000000;
    unint64_t v7 = 0x65756C6176;
    goto LABEL_12;
  }
  uint64_t v11 = v10[4];
  unint64_t v12 = v10[5];
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_100055A44(45, 0xE100000000000000, v11, v12);
  uint64_t v8 = v13;
LABEL_11:
  uint64_t result = swift_bridgeObjectRelease();
LABEL_12:
  *a2 = v7;
  a2[1] = v8;
  return result;
}

uint64_t sub_1000656CC()
{
  sub_1000673F8((void *)v0, &v56);
  sub_1000673F8(&v56, &v57);
  uint64_t v1 = v57;
  if (!v57)
  {
    v47[0] = 60;
    v47[1] = 0xE100000000000000;
    Swift::String v3 = *(Swift::String *)(v0 + 88);
    long long v52 = *(_OWORD *)(v0 + 72);
    Swift::String v53 = v3;
    long long v54 = *(_OWORD *)(v0 + 104);
    uint64_t v55 = *(void *)(v0 + 120);
    long long v4 = *(_OWORD *)(v0 + 24);
    long long v48 = *(_OWORD *)(v0 + 8);
    long long v49 = v4;
    long long v5 = *(_OWORD *)(v0 + 56);
    long long v50 = *(_OWORD *)(v0 + 40);
    long long v51 = v5;
    Swift::String v58 = v53;
    uint64_t v6 = v53._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (((uint64_t)v53._object & 0x2000000000000000) != 0) {
      uint64_t v6 = ((unint64_t)v53._object >> 56) & 0xF;
    }
    if (v6)
    {
      Swift::String v46 = v53;
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1000655C4((void *)v0, (unint64_t *)&v46);
      sub_100031A24((uint64_t)&v58);
    }
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v37._unint64_t countAndFlagsBits = 62;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    return v47[0];
  }
  if (v57 == 1) {
    return 0;
  }
  sub_10002EAA0(v0 + 152, (uint64_t)v47);
  sub_10002EAA0((uint64_t)v47, (uint64_t)&v58);
  int64_t v7 = *(void *)(v1 + 16);
  if ((v59 & 1) == 0)
  {
    unint64_t countAndFlagsBits = _swiftEmptyArrayStorage;
    if (!v7)
    {
LABEL_37:
      *(void *)&long long v48 = countAndFlagsBits;
      sub_100003DD0(&qword_1000C50C8);
      sub_100067408();
      uint64_t v2 = BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      return v2;
    }
    v46._unint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
    sub_100056F98(0, v7, 0);
    unint64_t countAndFlagsBits = _swiftEmptyArrayStorage;
    uint64_t v20 = (unsigned __int8 *)(v1 + 48);
    while (1)
    {
      uint64_t v22 = *((void *)v20 - 2);
      uint64_t v21 = (void *)*((void *)v20 - 1);
      unsigned int v23 = *v20;
      if (!(v23 >> 6)) {
        break;
      }
      if (v23 >> 6 != 1)
      {
        *(void *)&long long v48 = 45;
        unint64_t v25 = 0xE100000000000000;
        goto LABEL_28;
      }
      *(void *)&long long v48 = 0;
      *((void *)&v48 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      v24._unint64_t countAndFlagsBits = 45;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      Character.write<A>(to:)();
LABEL_29:
      sub_10002ECB8(v22, (uint64_t)v21, v23);
      long long v27 = v48;
      v46._unint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
      unint64_t v29 = countAndFlagsBits[2];
      unint64_t v28 = countAndFlagsBits[3];
      if (v29 >= v28 >> 1)
      {
        sub_100056F98((char *)(v28 > 1), v29 + 1, 1);
        unint64_t countAndFlagsBits = (void *)v46._countAndFlagsBits;
      }
      v20 += 24;
      countAndFlagsBits[2] = v29 + 1;
      *(_OWORD *)&countAndFlagsBits[2 * v29 + 4] = v27;
      if (!--v7) {
        goto LABEL_37;
      }
    }
    *(void *)&long long v48 = 11565;
    unint64_t v25 = 0xE200000000000000;
LABEL_28:
    *((void *)&v48 + 1) = v25;
    swift_bridgeObjectRetain();
    v26._unint64_t countAndFlagsBits = v22;
    v26._object = v21;
    String.append(_:)(v26);
    goto LABEL_29;
  }
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v46._unint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
    sub_100056F98(0, v7, 0);
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v9 = (unsigned __int8 *)(v1 + 48);
    while (1)
    {
      uint64_t v11 = *((void *)v9 - 2);
      long long v10 = (void *)*((void *)v9 - 1);
      unsigned int v12 = *v9;
      if (!(v12 >> 6)) {
        break;
      }
      if (v12 >> 6 != 1)
      {
        *(void *)&long long v48 = 45;
        unint64_t v14 = 0xE100000000000000;
        goto LABEL_16;
      }
      *(void *)&long long v48 = 0;
      *((void *)&v48 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      v13._unint64_t countAndFlagsBits = 45;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      Character.write<A>(to:)();
LABEL_17:
      sub_10002ECB8(v11, (uint64_t)v10, v12);
      long long v16 = v48;
      v46._unint64_t countAndFlagsBits = (uint64_t)v8;
      unint64_t v18 = v8[2];
      unint64_t v17 = v8[3];
      if (v18 >= v17 >> 1)
      {
        sub_100056F98((char *)(v17 > 1), v18 + 1, 1);
        uint64_t v8 = (void *)v46._countAndFlagsBits;
      }
      v9 += 24;
      _OWORD v8[2] = v18 + 1;
      *(_OWORD *)&v8[2 * v18 + 4] = v16;
      if (!--v7) {
        goto LABEL_33;
      }
    }
    *(void *)&long long v48 = 11565;
    unint64_t v14 = 0xE200000000000000;
LABEL_16:
    *((void *)&v48 + 1) = v14;
    swift_bridgeObjectRetain();
    v15._unint64_t countAndFlagsBits = v11;
    v15._object = v10;
    String.append(_:)(v15);
    goto LABEL_17;
  }
LABEL_33:
  *(void *)&long long v48 = v8;
  sub_100003DD0(&qword_1000C50C8);
  sub_100067408();
  uint64_t v30 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v32 = v31;
  swift_bridgeObjectRelease();
  uint64_t v44 = 15392;
  unint64_t v45 = 0xE200000000000000;
  Swift::String v33 = *(Swift::String *)(v0 + 88);
  long long v52 = *(_OWORD *)(v0 + 72);
  Swift::String v53 = v33;
  long long v54 = *(_OWORD *)(v0 + 104);
  uint64_t v55 = *(void *)(v0 + 120);
  long long v34 = *(_OWORD *)(v0 + 24);
  long long v48 = *(_OWORD *)(v0 + 8);
  long long v49 = v34;
  long long v35 = *(_OWORD *)(v0 + 56);
  long long v50 = *(_OWORD *)(v0 + 40);
  long long v51 = v35;
  Swift::String v46 = v53;
  uint64_t v36 = v53._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v53._object & 0x2000000000000000) != 0) {
    uint64_t v36 = ((unint64_t)v53._object >> 56) & 0xF;
  }
  if (v36)
  {
    Swift::String v43 = v53;
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1000655C4((void *)v0, (unint64_t *)&v43);
    sub_100031A24((uint64_t)&v46);
  }
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v38._unint64_t countAndFlagsBits = 62;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  uint64_t v39 = v44;
  uint64_t v40 = (void *)v45;
  uint64_t v44 = v30;
  unint64_t v45 = v32;
  swift_bridgeObjectRetain();
  v41._unint64_t countAndFlagsBits = v39;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v44;
}

uint64_t sub_100065BF4()
{
  return sub_1000656CC();
}

BOOL sub_100065C50()
{
  if (*v0 < 2uLL)
  {
    uint64_t v1 = _swiftEmptyArrayStorage;
    uint64_t v2 = _swiftEmptyArrayStorage[2];
    if (v2) {
      goto LABEL_3;
    }
LABEL_11:
    BOOL v6 = 0;
    goto LABEL_12;
  }
  uint64_t v1 = (void *)swift_bridgeObjectRetain();
  uint64_t v2 = v1[2];
  if (!v2) {
    goto LABEL_11;
  }
LABEL_3:
  Swift::String v3 = (unsigned __int8 *)(v1 + 6);
  uint64_t v4 = v2 - 1;
  do
  {
    int v5 = *v3;
    v3 += 24;
    BOOL v6 = (v5 & 0xFFFFFFC1) == 65;
  }
  while ((v5 & 0xFFFFFFC1) != 0x41 && v4-- != 0);
LABEL_12:
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100065CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = a7;
  sub_10002FDE0();
  swift_allocError();
  *(void *)uint64_t v16 = a4;
  *(void *)(v16 + 8) = a5;
  *(void *)(v16 + 16) = a6;
  *(void *)(v16 + 24) = v15;
  *(void *)(v16 + 32) = a8;
  *(void *)(v16 + 40) = a9;
  *(void *)(v16 + 48) = a1;
  *(void *)(v16 + 56) = a2;
  *(void *)(v16 + 64) = a3;
  *(void *)(v16 + 72) = 0;
  *(unsigned char *)(v16 + 80) = 12;
  swift_bridgeObjectRetain();
  sub_100067748(a5, a6, a7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t sub_100065DB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v34 = a3;
  uint64_t v33 = a2;
  uint64_t v27 = a9;
  uint64_t v28 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 8);
  swift_bridgeObjectRetain();
  v17(a8, a10, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, AssociatedTypeWitness) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v27, v15, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  unsigned __int8 v19 = v32;
  uint64_t v20 = v32;
  sub_10002FDE0();
  swift_allocError();
  uint64_t v21 = v30;
  *(void *)uint64_t v22 = v29;
  *(void *)(v22 + 8) = v21;
  uint64_t v23 = v31;
  *(void *)(v22 + 16) = v31;
  *(void *)(v22 + 24) = v20;
  *(void *)(v22 + 32) = a8;
  *(void *)(v22 + 40) = a10;
  uint64_t v24 = v33;
  *(void *)(v22 + 48) = v28;
  *(void *)(v22 + 56) = v24;
  *(void *)(v22 + 64) = v34;
  *(void *)(v22 + 72) = 0;
  *(unsigned char *)(v22 + 80) = 12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100067748(v21, v23, v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t sub_100066028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t))
{
  uint64_t result = a10(a8, a9);
  if (v10)
  {
    sub_10002FDE0();
    swift_allocError();
    *(void *)uint64_t v19 = a4;
    *(void *)(v19 + 8) = a5;
    *(void *)(v19 + 16) = a6;
    *(void *)(v19 + 24) = a7;
    *(void *)(v19 + 32) = a8;
    *(void *)(v19 + 40) = a9;
    *(void *)(v19 + 48) = a1;
    *(void *)(v19 + 56) = a2;
    *(void *)(v19 + 64) = a3;
    *(void *)(v19 + 72) = v10;
    *(unsigned char *)(v19 + 80) = 12;
    swift_bridgeObjectRetain();
    sub_100067748(a5, a6, a7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100066138(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v28 = a5;
  uint64_t v30 = a8;
  uint64_t v25 = a7;
  uint64_t v26 = a3;
  unsigned int v27 = a4;
  uint64_t v24 = a14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v23 = AssociatedTypeWitness;
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v19 = (char *)&v22 - v18;
  uint64_t v20 = v29;
  uint64_t result = v30(a10, a11, a12, a1, a2, v26, v27, v28, a6);
  if (!v20)
  {
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 32))(v25, v19, a10, a11, a12, a1, a13);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v19, v23);
  }
  return result;
}

uint64_t sub_1000662BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v21 = a5;
  uint64_t v22 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v20 - v15;
  if (a3 == 1) {
    a1 = sub_100076A54((uint64_t)&off_1000BC420);
  }
  else {
    swift_bridgeObjectRetain();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a4, v13);
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    long long v26 = 0u;
    long long v27 = 0u;
  }
  else
  {
    *((void *)&v27 + 1) = AssociatedTypeWitness;
    uint64_t v18 = sub_10000A954((uint64_t *)&v26);
    (*(void (**)(uint64_t *, char *, uint64_t))(v17 + 32))(v18, v16, AssociatedTypeWitness);
  }
  sub_100041854((uint64_t)&v26, (uint64_t)v24);
  v23[0] = v21;
  v23[1] = a6;
  v23[2] = a7;
  v24[4] = a1;
  char v25 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10007A218(v23);
  sub_1000418BC((uint64_t)v23);
  swift_bridgeObjectRelease();
  return sub_1000556DC((uint64_t)&v26, &qword_1000C5360);
}

uint64_t sub_10006650C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10006654C(a1, a2, a3, a4, a5, a6, *(void *)(a7 + 16));
}

uint64_t sub_10006652C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100066640(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t sub_10006654C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v18[3] = a7;
  uint64_t v13 = sub_10000A954(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16))(v13, a2, a7);
  sub_100041854((uint64_t)v18, (uint64_t)v16);
  v15[0] = a3;
  v15[1] = a4;
  void v15[2] = a5;
  v16[4] = a6;
  char v17 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10007A218(v15);
  sub_1000418BC((uint64_t)v15);
  return sub_1000556DC((uint64_t)v18, &qword_1000C5360);
}

uint64_t sub_100066640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = *(void *)(a2 - 8);
  __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, a2);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a2);
  }
  return v14;
}

uint64_t sub_100066838(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100066874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v10 = Array.init()();
  sub_100079914(a3, a4, a5, a6, v10, (void (*)(uint64_t *))sub_100067464);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10006691C(uint64_t a1)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Array();
  return Array.append(_:)();
}

uint64_t sub_1000669E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  return sub_100066874(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1000669EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    type metadata accessor for Array();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    if ((Collection.isEmpty.getter() & 1) == 0)
    {
      swift_getWitnessTable();
      Sequence.lazy.getter();
      swift_bridgeObjectRelease();
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = a2;
      *(void *)(v6 + 24) = a3;
      type metadata accessor for LazySequence();
      swift_getWitnessTable();
      LazySequenceProtocol.map<A>(_:)();
      swift_release();
      swift_bridgeObjectRelease();
      type metadata accessor for LazyMapSequence();
      swift_getWitnessTable();
      swift_getWitnessTable();
      uint64_t v5 = BidirectionalCollection<>.joined(separator:)();
      swift_release();
      swift_bridgeObjectRelease();
      return v5;
    }
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_100066C10(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000669EC(*a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t sub_100066C20(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for ArgumentDefinition(uint64_t a1)
{
  if (*(void *)a1 >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002EBFC(*(void *)(a1 + 128), *(void *)(a1 + 136), *(unsigned char *)(a1 + 144));
  sub_10002EC54();

  return swift_release();
}

uint64_t initializeWithCopy for ArgumentDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  if (*(void *)a2 >= 2uLL) {
    uint64_t v4 = swift_bridgeObjectRetain();
  }
  *(void *)a1 = v4;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  uint64_t v10 = *(void *)(a2 + 128);
  uint64_t v11 = *(void *)(a2 + 136);
  char v16 = *(unsigned char *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10002EA40(v10, v11, v16);
  *(void *)(a1 + 128) = v10;
  *(void *)(a1 + 136) = v11;
  *(unsigned char *)(a1 + 144) = v16;
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  uint64_t v12 = *(void *)(a2 + 152);
  uint64_t v13 = *(void *)(a2 + 160);
  LOBYTE(v6) = *(unsigned char *)(a2 + 168);
  sub_10002EA98();
  *(void *)(a1 + 152) = v12;
  *(void *)(a1 + 160) = v13;
  *(unsigned char *)(a1 + 168) = v6;
  uint64_t v14 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v14;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ArgumentDefinition(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)a2;
  if (v4 >= 2)
  {
    if (v5 >= 2)
    {
      *(void *)a1 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000556DC(a1, &qword_1000C5A40);
      *(void *)a1 = *(void *)a2;
    }
  }
  else
  {
    *(void *)a1 = v5;
    if (v5 >= 2) {
      swift_bridgeObjectRetain();
    }
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 136);
  char v8 = *(unsigned char *)(a2 + 144);
  sub_10002EA40(v6, v7, v8);
  uint64_t v9 = *(void *)(a1 + 128);
  uint64_t v10 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = v6;
  *(void *)(a1 + 136) = v7;
  char v11 = *(unsigned char *)(a1 + 144);
  *(unsigned char *)(a1 + 144) = v8;
  sub_10002EBFC(v9, v10, v11);
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  uint64_t v12 = *(void *)(a2 + 152);
  uint64_t v13 = *(void *)(a2 + 160);
  char v14 = *(unsigned char *)(a2 + 168);
  sub_10002EA98();
  *(void *)(a1 + 152) = v12;
  *(void *)(a1 + 160) = v13;
  *(unsigned char *)(a1 + 168) = v14;
  sub_10002EC54();
  uint64_t v15 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v15;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for ArgumentDefinition(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for ArgumentDefinition(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a2;
  if (*(void *)a1 >= 2uLL)
  {
    if (v4 >= 2)
    {
      *(void *)a1 = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1000556DC(a1, &qword_1000C5A40);
  }
  *(void *)a1 = v4;
LABEL_6:
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  swift_bridgeObjectRelease();
  char v9 = *(unsigned char *)(a2 + 144);
  uint64_t v10 = *(void *)(a1 + 128);
  uint64_t v11 = *(void *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  char v12 = *(unsigned char *)(a1 + 144);
  *(unsigned char *)(a1 + 144) = v9;
  sub_10002EBFC(v10, v11, v12);
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  char v13 = *(unsigned char *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = v13;
  sub_10002EC54();
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ArgumentDefinition(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 192)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArgumentDefinition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 192) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArgumentDefinition()
{
  return &type metadata for ArgumentDefinition;
}

unsigned char *storeEnumTagSinglePayload for ArgumentDefinition.ParsingStrategy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10006732CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArgumentDefinition.ParsingStrategy()
{
  return &type metadata for ArgumentDefinition.ParsingStrategy;
}

unint64_t sub_100067368()
{
  unint64_t result = qword_1000C5A48;
  if (!qword_1000C5A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5A48);
  }
  return result;
}

uint64_t sub_1000673BC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void *sub_1000673F8(void *a1, void *a2)
{
  *a2 = *a1;
  return a2;
}

unint64_t sub_100067408()
{
  unint64_t result = qword_1000C50D0;
  if (!qword_1000C50D0)
  {
    sub_1000046A8(&qword_1000C50C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C50D0);
  }
  return result;
}

uint64_t sub_100067464(uint64_t a1)
{
  return sub_10006691C(a1);
}

uint64_t sub_10006746C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  sub_100038AC4(a3, (uint64_t)v29);
  uint64_t v26 = v30;
  unint64_t v16 = v31;
  *(void *)&uint64_t v27[4] = v32;
  unint64_t v17 = v33;
  v27[0] = v34;
  sub_100003DD0(&qword_1000C5600);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1000A2660;
  *(void *)(v18 + 32) = a6;
  *(void *)(v18 + 40) = a7;
  *(void *)(v18 + 48) = a8;
  sub_100038AC4(a3, (uint64_t)&v38);
  unint64_t v19 = v39;
  if (v39)
  {
    uint64_t v20 = v38;
    if (v17)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v21 = v17;
      unint64_t v22 = v16;
      goto LABEL_8;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v22 = v16;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v20 = 0;
    unint64_t v22 = 0xE000000000000000;
    unint64_t v19 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100038AC4(a3, (uint64_t)v35);
  if (!v36)
  {
    v27[0] = 0;
    *(void *)&uint64_t v27[4] = 0;
    unint64_t v21 = 0xE000000000000000;
    goto LABEL_10;
  }
  *(_DWORD *)&v27[8] = 0;
  unint64_t v21 = 0xE000000000000000;
  *(void *)long long v27 = v37;
LABEL_8:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t result = swift_bridgeObjectRelease_n();
  *(void *)a9 = a2;
  *(void *)(a9 + 8) = a4;
  *(void *)(a9 + 16) = a5;
  *(void *)(a9 + 24) = v18;
  *(void *)(a9 + 32) = a1;
  *(unsigned char *)(a9 + 40) = a10 & 1;
  *(void *)(a9 + 48) = v20;
  *(void *)(a9 + 56) = v19;
  *(void *)(a9 + 64) = v26;
  *(void *)(a9 + 72) = v22;
  *(void *)(a9 + 80) = *(void *)&v27[4];
  *(void *)(a9 + 88) = v21;
  *(unsigned char *)(a9 + 96) = v27[0];
  *(void *)(a9 + 104) = 0;
  *(void *)(a9 + 112) = 0xE000000000000000;
  return result;
}

uint64_t sub_1000676F4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100067704@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v1 + 24) + 16))(*(void *)(v1 + 16));
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100067748(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xFDu) {
    return sub_1000319B8(a1, a2, a3);
  }
  return a1;
}

double sub_10006775C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, uint64_t a17, uint64_t a18)
{
  *(void *)&long long v66 = a7;
  *(void *)&long long v65 = a6;
  uint64_t v64 = a5;
  unint64_t v73 = a4;
  uint64_t v75 = a1;
  int v74 = a10;
  *(void *)&long long v72 = a12;
  uint64_t v71 = a11;
  uint64_t v70 = a15;
  int v67 = a16;
  uint64_t v63 = a9;
  uint64_t v68 = a14;
  uint64_t v55 = a13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v69 = type metadata accessor for Optional();
  uint64_t v22 = *(void *)(v69 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  __chkstk_darwin(v69);
  uint64_t v56 = (char *)&v52 - v24;
  char v25 = *(uint64_t (**)(uint64_t, uint64_t))(a18 + 24);
  uint64_t v53 = a18;
  uint64_t v26 = v25(a17, a18);
  uint64_t v27 = v26 | ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(a13, 1, AssociatedTypeWitness) != 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v28 = v27;
  uint64_t v29 = v75;
  uint64_t v30 = a2;
  uint64_t v31 = a2;
  uint64_t v54 = a2;
  uint64_t v32 = a3;
  sub_10006746C(v64, v28, v65, v66, v63, v75, v30, a3, (uint64_t)&v82, 0);
  long long v58 = v82;
  uint64_t v57 = v83;
  int v59 = v85;
  long long v66 = v86;
  long long v65 = v87;
  uint64_t v64 = v88;
  uint64_t v63 = v89;
  int v62 = v90;
  uint64_t v33 = v68;
  if (v67 == 255) {
    uint64_t v33 = 0;
  }
  uint64_t v68 = v33;
  uint64_t v34 = v70;
  if (v67 == 255) {
    uint64_t v34 = 0;
  }
  uint64_t v70 = v34;
  if (v67 == 255) {
    int v35 = 4;
  }
  else {
    int v35 = v67;
  }
  int v67 = v35;
  uint64_t v60 = v91;
  uint64_t v61 = v92;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = a17;
  v36[3] = a18;
  uint64_t v37 = v72;
  v36[4] = v71;
  v36[5] = v37;
  v36[6] = v29;
  v36[7] = v31;
  v36[8] = a3;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  long long v72 = v84;
  unint64_t v39 = v56;
  uint64_t v40 = v69;
  v38(v56, v55, v69);
  unint64_t v41 = (*(unsigned __int8 *)(v22 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v42 = (v23 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  Swift::String v43 = (char *)swift_allocObject();
  uint64_t v44 = v53;
  *((void *)v43 + 2) = a17;
  *((void *)v43 + 3) = v44;
  unint64_t v45 = v73;
  *((void *)v43 + 4) = v73;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(&v43[v41], v39, v40);
  Swift::String v46 = &v43[v42];
  uint64_t v47 = v54;
  *(void *)Swift::String v46 = v75;
  *((void *)v46 + 1) = v47;
  *((void *)v46 + 2) = v32;
  char v77 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10002EA30(v45);
  *(void *)a8 = v45;
  *(_OWORD *)(a8 + 8) = v58;
  *(void *)(a8 + 24) = v57;
  *(_OWORD *)(a8 + 32) = v72;
  *(unsigned char *)(a8 + 48) = v59;
  *(_DWORD *)(a8 + 49) = *(_DWORD *)v81;
  *(_DWORD *)(a8 + 52) = *(_DWORD *)&v81[3];
  *(_OWORD *)(a8 + 56) = v66;
  double result = *(double *)&v65;
  *(_OWORD *)(a8 + 72) = v65;
  uint64_t v49 = v63;
  *(void *)(a8 + 88) = v64;
  *(void *)(a8 + 96) = v49;
  *(unsigned char *)(a8 + 104) = v62;
  *(_DWORD *)(a8 + 108) = *(_DWORD *)&v80[3];
  *(_DWORD *)(a8 + 105) = *(_DWORD *)v80;
  uint64_t v50 = v61;
  *(void *)(a8 + 112) = v60;
  *(void *)(a8 + 120) = v50;
  uint64_t v51 = v70;
  *(void *)(a8 + 128) = v68;
  *(void *)(a8 + 136) = v51;
  *(unsigned char *)(a8 + 144) = v67;
  *(unsigned char *)(a8 + 145) = v74;
  *(_DWORD *)(a8 + 146) = v78;
  *(_WORD *)(a8 + 150) = v79;
  *(void *)(a8 + 152) = sub_1000681D0;
  *(void *)(a8 + 160) = v36;
  *(unsigned char *)(a8 + 168) = v77;
  *(_DWORD *)(a8 + 169) = *(_DWORD *)v76;
  *(_DWORD *)(a8 + 172) = *(_DWORD *)&v76[3];
  *(void *)(a8 + 176) = sub_100068388;
  *(void *)(a8 + 184) = v43;
  return result;
}

double sub_100067C8C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X7>, _OWORD *a8@<X8>, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13)
{
  int v43 = a6;
  uint64_t v46 = a5;
  unint64_t v45 = a4;
  uint64_t v44 = a3;
  uint64_t v42 = a2;
  uint64_t v41 = a1;
  int v39 = a11;
  uint64_t v15 = *(void *)(a13 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v36 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v36 - v17;
  uint64_t v40 = v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a13 + 24))(a7, a12, a13);
  uint64_t v37 = v22;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a12;
  *(void *)(v23 + 24) = a13;
  uint64_t v24 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v18, a7, v16);
  unsigned __int8 v25 = v39;
  if (v39 == 255) {
    a9 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  }
  else {
    uint64_t v27 = a10;
  }
  double v28 = sub_10006775C(v41, v42, v44, v45, v38, v46, v21, (uint64_t)v47, v37, v43, (uint64_t)sub_10006848C, v23, (uint64_t)v18, a9, v27, v25, a12, v40);
  (*(void (**)(char *, uint64_t, double))(v24 + 8))(v18, v16, v28);
  long long v29 = v55;
  a8[8] = v54;
  a8[9] = v29;
  long long v30 = v57;
  a8[10] = v56;
  a8[11] = v30;
  long long v31 = v51;
  a8[4] = v50;
  a8[5] = v31;
  long long v32 = v53;
  a8[6] = v52;
  a8[7] = v32;
  long long v33 = v47[1];
  *a8 = v47[0];
  a8[1] = v33;
  double result = *(double *)&v48;
  long long v35 = v49;
  a8[2] = v48;
  a8[3] = v35;
  return result;
}

double sub_100067FD8@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, unsigned __int8 a6@<W6>, uint64_t a7@<X7>, _OWORD *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15)
{
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = a14;
  v20[3] = a15;
  v20[4] = a7;
  v20[5] = a9;
  sub_10006775C(a1, a2, a3, a4, (uint64_t)_swiftEmptyArrayStorage, a5, 0, (uint64_t)v31, 0, a6, (uint64_t)sub_100068150, (uint64_t)v20, a10, a11, a12, a13, a14, a15);
  long long v21 = v39;
  a8[8] = v38;
  a8[9] = v21;
  long long v22 = v41;
  a8[10] = v40;
  a8[11] = v22;
  long long v23 = v35;
  a8[4] = v34;
  a8[5] = v23;
  long long v24 = v37;
  a8[6] = v36;
  a8[7] = v24;
  long long v25 = v31[1];
  *a8 = v31[0];
  a8[1] = v25;
  double result = *(double *)&v32;
  long long v27 = v33;
  a8[2] = v32;
  a8[3] = v27;
  return result;
}

uint64_t sub_100068118()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100068150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, uint64_t a9)
{
  return sub_100066028(a1, a2, a3, a4, a5, a6, a7, a8, a9, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 32));
}

uint64_t sub_100068188()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000681D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100066138(a1, a2, a3, a4, a5, a6, a7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v7 + 32), *(void *)(v7 + 40), *(void *)(v7 + 48), *(void *)(v7 + 56), *(void *)(v7 + 64), *(void *)(v7 + 16), *(void *)(v7 + 24));
}

uint64_t sub_100068208()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  if (*(void *)(v0 + 32) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v4, 1, AssociatedTypeWitness)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v4, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 24, v3 | 7);
}

uint64_t sub_100068388(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000662BC(a1, a2, *(void *)(v2 + 32), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void *)(v2 + v7 + 16));
}

uint64_t sub_10006847C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006848C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  return sub_100065DB0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1000684BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t type metadata accessor for Bare()
{
  return sub_10003A4F0();
}

uint64_t destroy for ArgumentDefinition.Update()
{
  return sub_10002EC54();
}

uint64_t _s14ArgumentParser18ArgumentDefinitionV6UpdateOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_10002EA98();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ArgumentDefinition.Update(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_10002EA98();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_10002EC54();
  return a1;
}

uint64_t assignWithTake for ArgumentDefinition.Update(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_10002EC54();
  return a1;
}

uint64_t getEnumTagSinglePayload for ArgumentDefinition.Update(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ArgumentDefinition.Update(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)double result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100068668(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ArgumentDefinition.Update()
{
  return &type metadata for ArgumentDefinition.Update;
}

uint64_t destroy for ArgumentDefinition.Help()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ArgumentDefinition.Help(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ArgumentDefinition.Help(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ArgumentDefinition.Help(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ArgumentDefinition.Help(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArgumentDefinition.Help(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArgumentDefinition.Help()
{
  return &type metadata for ArgumentDefinition.Help;
}

uint64_t *initializeBufferWithCopyOfBuffer for ArgumentDefinition.Kind(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for ArgumentDefinition.Kind(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t *assignWithCopy for ArgumentDefinition.Kind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_bridgeObjectRetain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

void *initializeWithTake for ArgumentDefinition.Kind(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for ArgumentDefinition.Kind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ArgumentDefinition.Kind(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ArgumentDefinition.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

void *sub_100068C10(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ArgumentDefinition.Kind()
{
  return &type metadata for ArgumentDefinition.Kind;
}

ValueMetadata *type metadata accessor for ArgumentDefinition.Help.Options()
{
  return &type metadata for ArgumentDefinition.Help.Options;
}

unint64_t sub_100068C54()
{
  unint64_t result = qword_1000C5B18;
  if (!qword_1000C5B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5B18);
  }
  return result;
}

unint64_t sub_100068CAC()
{
  unint64_t result = qword_1000C5B20;
  if (!qword_1000C5B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5B20);
  }
  return result;
}

unint64_t sub_100068D04()
{
  unint64_t result = qword_1000C5B28;
  if (!qword_1000C5B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5B28);
  }
  return result;
}

unint64_t sub_100068D5C()
{
  unint64_t result = qword_1000C5B30;
  if (!qword_1000C5B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5B30);
  }
  return result;
}

uint64_t sub_100068DB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  unsigned int v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_100068DFC()
{
  return sub_100005178(&qword_1000C5B38, &qword_1000C5B40);
}

uint64_t sub_100068E38(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, long long *a6, char a7, char a8)
{
  if ((a7 & 1) == 0)
  {
LABEL_6:
    *((void *)&v31 + 1) = &type metadata for Bool;
    LOBYTE(v30) = a4 & 1;
    sub_100041854((uint64_t)&v30, (uint64_t)&v36 + 8);
    *(void *)&long long v35 = a1;
    *((void *)&v35 + 1) = a2;
    *(void *)&long long v36 = a3;
    *((void *)&v38 + 1) = a5;
    char v39 = 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10007A218((uint64_t *)&v35);
    sub_1000418BC((uint64_t)&v35);
    uint64_t v15 = &qword_1000C5360;
LABEL_7:
    uint64_t v16 = &v30;
    goto LABEL_8;
  }
  if (a8)
  {
    if (a8 == 1)
    {
      long long v14 = a6[1];
      long long v40 = *a6;
      long long v41 = v14;
      uint64_t v42 = *((void *)a6 + 4);
      sub_100079B10(a1, a2, a3, (uint64_t)&v30);
      if (*((void *)&v30 + 1))
      {
        long long v36 = v31;
        long long v37 = v32;
        long long v38 = v33;
        char v39 = v34;
        long long v35 = v30;
      }
      else
      {
        BYTE8(v36) = a4 & 1;
        *(void *)&long long v35 = a1;
        *((void *)&v35 + 1) = a2;
        *(void *)&long long v36 = a3;
        *(void *)&long long v38 = &type metadata for Bool;
        *((void *)&v38 + 1) = &_swiftEmptySetSingleton;
        char v39 = 1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1000556DC((uint64_t)&v30, &qword_1000C5888);
      }
      sub_100041854((uint64_t)&v36 + 8, (uint64_t)v28);
      sub_100003DD0(&qword_1000C5360);
      int v24 = swift_dynamicCast();
      char v25 = v27;
      if (v27 == 2) {
        char v25 = a4;
      }
      if (!v24) {
        char v25 = a4;
      }
      long long v29 = &type metadata for Bool;
      v28[0] = v25 & 1;
      sub_100070170((uint64_t)v28, (uint64_t)&v36 + 8);
      uint64_t v26 = swift_bridgeObjectRetain();
      sub_10005F4C8(v26);
      sub_10007A218((uint64_t *)&v35);
      goto LABEL_23;
    }
    goto LABEL_6;
  }
  uint64_t v18 = *(void *)a6;
  if (!*(void *)(*(void *)a6 + 16))
  {
    char v34 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v19 = sub_100060C94(a1, a2, a3);
  if ((v20 & 1) == 0)
  {
    char v34 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  sub_100063EA0(*(void *)(v18 + 56) + 72 * v19, (uint64_t)&v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v30 + 1))
  {
LABEL_26:
    uint64_t v15 = &qword_1000C5888;
    goto LABEL_7;
  }
  long long v36 = v31;
  long long v37 = v32;
  long long v38 = v33;
  char v39 = v34;
  long long v35 = v30;
  sub_100041854((uint64_t)&v36 + 8, (uint64_t)&v30);
  sub_100003DD0(&qword_1000C5360);
  if (!swift_dynamicCast() || v28[0] == 2 || ((v28[0] ^ a4) & 1) != 0)
  {
    uint64_t v21 = *((void *)&v38 + 1);
    uint64_t v22 = *((void *)a6 + 1);
    sub_10002FDE0();
    swift_allocError();
    *(void *)uint64_t v23 = v21;
    *(void *)(v23 + 8) = a5;
    *(void *)(v23 + 16) = v22;
    *(_OWORD *)(v23 + 24) = 0u;
    *(_OWORD *)(v23 + 40) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *(void *)(v23 + 72) = 0;
    *(unsigned char *)(v23 + 80) = 10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_willThrow();
LABEL_23:
    sub_1000418BC((uint64_t)&v35);
    return 1;
  }
  long long v29 = &type metadata for Bool;
  v28[0] = a4 & 1;
  sub_100041854((uint64_t)v28, (uint64_t)&v31 + 8);
  *(void *)&long long v30 = a1;
  *((void *)&v30 + 1) = a2;
  *(void *)&long long v31 = a3;
  *((void *)&v33 + 1) = a5;
  char v34 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10007A218((uint64_t *)&v30);
  sub_1000418BC((uint64_t)&v30);
  sub_1000418BC((uint64_t)&v35);
  uint64_t v15 = &qword_1000C5360;
  uint64_t v16 = (long long *)v28;
LABEL_8:
  sub_1000556DC((uint64_t)v16, v15);
  return 1;
}

uint64_t sub_100069248(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  LODWORD(v82) = a8;
  LODWORD(v83) = a7;
  uint64_t v94 = a6;
  uint64_t v15 = *(void *)(a9 - 8);
  __chkstk_darwin(a1);
  uint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v20 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v25 = __chkstk_darwin(v24);
  if ((v83 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v80 = v17;
  uint64_t v81 = v15;
  uint64_t v83 = a2;
  if (!(_BYTE)v82)
  {
    uint64_t v36 = *v94;
    if (*(void *)(*v94 + 16))
    {
      uint64_t v72 = a10;
      char v77 = v26;
      uint64_t v75 = v23;
      uint64_t v73 = v30;
      uint64_t v76 = v25;
      __int16 v79 = (char *)&v65 - v27;
      int v78 = v29;
      uint64_t v82 = v28;
      uint64_t v37 = v83;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v38 = sub_100060C94(a1, v37, a3);
      if (v39)
      {
        sub_100063EA0(*(void *)(v36 + 56) + 72 * v38, (uint64_t)&v85);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*((void *)&v85 + 1))
        {
          v91[1] = v87;
          long long v92 = v88;
          char v93 = v89;
          long long v90 = v85;
          v91[0] = v86;
          sub_100041854((uint64_t)v91 + 8, (uint64_t)&v85);
          sub_100003DD0(&qword_1000C5360);
          uint64_t v74 = a9;
          int v40 = swift_dynamicCast();
          uint64_t v41 = v81;
          uint64_t v71 = *(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56);
          v71(v79, v40 ^ 1u, 1, a9);
          uint64_t v42 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v41 + 16);
          int v43 = v77;
          uint64_t v66 = a4;
          uint64_t v68 = v41 + 16;
          int v67 = v42;
          v42((uint64_t *)v77, a4, a9);
          v71(v43, 0, 1, a9);
          uint64_t v44 = (void (*)(char *, void, uint64_t, uint64_t))v78;
          unint64_t v45 = (void (*)(char *, void, uint64_t, uint64_t))(v78 + *(int *)(v76 + 48));
          uint64_t v46 = *(void (**)(uint64_t, char *, uint64_t))(v82 + 16);
          v46(v78, v79, v18);
          uint64_t v71 = v45;
          uint64_t v70 = v18;
          uint64_t v69 = (void (*)(char *, uint64_t, uint64_t))v46;
          v46((uint64_t)v45, v43, v18);
          uint64_t v47 = v81;
          long long v48 = v44;
          long long v49 = *(unsigned int (**)(void (*)(char *, void, uint64_t, uint64_t), uint64_t, uint64_t))(v81 + 48);
          if (v49(v48, 1, v74) == 1)
          {
            long long v50 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
            uint64_t v51 = v70;
            v50((uint64_t)v43, v70);
            BOOL v52 = v49(v71, 1, v74) == 1;
            long long v53 = v78;
            if (!v52) {
              goto LABEL_21;
            }
            v50(v78, v51);
            v50((uint64_t)v79, v51);
          }
          else
          {
            uint64_t v51 = v70;
            v69(v75, v78, v70);
            long long v54 = (void (*)(void, void, void, void))v71;
            if (v49(v71, 1, v74) == 1)
            {
              long long v50 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
              v50((uint64_t)v77, v51);
              (*(void (**)(char *, uint64_t))(v47 + 8))(v75, v74);
              long long v53 = v78;
LABEL_21:
              (*(void (**)(void (*)(char *, void, uint64_t, uint64_t), uint64_t))(v73 + 8))((void (*)(char *, void, uint64_t, uint64_t))v53, v76);
              v50((uint64_t)v79, v51);
LABEL_24:
              uint64_t v62 = *((void *)&v92 + 1);
              uint64_t v63 = v94[1];
              sub_10002FDE0();
              swift_allocError();
              *(void *)uint64_t v64 = v62;
              *(void *)(v64 + 8) = a5;
              *(void *)(v64 + 16) = v63;
              *(_OWORD *)(v64 + 24) = 0u;
              *(_OWORD *)(v64 + 40) = 0u;
              *(_OWORD *)(v64 + 56) = 0u;
              *(void *)(v64 + 72) = 0;
              *(unsigned char *)(v64 + 80) = 10;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_willThrow();
              sub_1000418BC((uint64_t)&v90);
              return 1;
            }
            long long v55 = v80;
            long long v56 = v54;
            uint64_t v57 = v74;
            (*(void (**)(char *, void (*)(void, void, void, void), uint64_t))(v47 + 32))(v80, v56, v74);
            LODWORD(v76) = dispatch thunk of static Equatable.== infix(_:_:)();
            long long v58 = *(void (**)(char *, uint64_t))(v47 + 8);
            v58(v55, v57);
            int v59 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
            v59((uint64_t)v77, v51);
            v58(v75, v57);
            v59(v78, v51);
            v59((uint64_t)v79, v51);
            if ((v76 & 1) == 0) {
              goto LABEL_24;
            }
          }
          uint64_t v60 = v74;
          v84[3] = v74;
          uint64_t v61 = sub_10000A954(v84);
          v67(v61, v66, v60);
          sub_100041854((uint64_t)v84, (uint64_t)&v86 + 8);
          *(void *)&long long v85 = a1;
          *((void *)&v85 + 1) = v83;
          *(void *)&long long v86 = a3;
          *((void *)&v88 + 1) = a5;
          char v89 = 1;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_10007A218((uint64_t *)&v85);
          sub_1000418BC((uint64_t)&v85);
          sub_1000418BC((uint64_t)&v90);
          long long v33 = &qword_1000C5360;
          char v34 = v84;
          goto LABEL_7;
        }
      }
      else
      {
        char v89 = 0;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      char v89 = 0;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
    }
    long long v33 = &qword_1000C5888;
    goto LABEL_6;
  }
  a2 = v83;
  uint64_t v15 = v81;
  if (v82 != 1)
  {
LABEL_5:
    *((void *)&v86 + 1) = a9;
    long long v32 = sub_10000A954((uint64_t *)&v85);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(v32, a4, a9);
    sub_100041854((uint64_t)&v85, (uint64_t)v91 + 8);
    *(void *)&long long v90 = a1;
    *((void *)&v90 + 1) = a2;
    *(void *)&v91[0] = a3;
    *((void *)&v92 + 1) = a5;
    char v93 = 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10007A218((uint64_t *)&v90);
    sub_1000418BC((uint64_t)&v90);
    long long v33 = &qword_1000C5360;
LABEL_6:
    char v34 = (uint64_t *)&v85;
LABEL_7:
    sub_1000556DC((uint64_t)v34, v33);
    return 1;
  }
  __chkstk_darwin(v25);
  *(&v65 - 2) = a9;
  *(&v65 - 1) = v31;
  sub_100079CE8(a1, a2, a3, a5, a4, (void (*)(char *))String.init(argument:), (uint64_t)(&v65 - 4), a9);
  return 1;
}

void *sub_100069BC8()
{
  sub_100057018(0, 0, 0);
  swift_bridgeObjectRetain();
  Swift::String_optional v1 = String.Iterator.next()();
  uint64_t result = (void *)v1.value._countAndFlagsBits;
  if (v1.value._object)
  {
    uint64_t countAndFlagsBits = v1.value._countAndFlagsBits;
    object = v1.value._object;
    uint64_t v4 = 0;
    while (!__OFADD__(v4, 1))
    {
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      unint64_t v5 = _swiftEmptyArrayStorage[3];
      if (v6 >= v5 >> 1) {
        sub_100057018((void *)(v5 > 1), v6 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v6 + 1;
      uint64_t v7 = &_swiftEmptyArrayStorage[6 * v6];
      _OWORD v7[4] = v4;
      _OWORD v7[5] = countAndFlagsBits;
      v7[6] = object;
      v7[7] = 64;
      v7[8] = 0;
      v7[9] = 0;
      Swift::String_optional v8 = String.Iterator.next()();
      uint64_t result = (void *)v8.value._countAndFlagsBits;
      uint64_t countAndFlagsBits = v8.value._countAndFlagsBits;
      object = v8.value._object;
      ++v4;
      if (!v8.value._object) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100069D00(uint64_t a1)
{
  unsigned int v2 = v1;
  uint64_t v3 = a1;
  uint64_t v4 = *v2;
  uint64_t v39 = *((void *)*v2 + 2);
  sub_10002E940(a1);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_33:
  }
    uint64_t v4 = sub_100060318(0, v39 + 1, 1, v4);
  unint64_t v6 = *((void *)v4 + 2);
  unint64_t v5 = *((void *)v4 + 3);
  if (v6 >= v5 >> 1) {
    uint64_t v4 = sub_100060318((char *)(v5 > 1), v6 + 1, 1, v4);
  }
  *((void *)v4 + 2) = v6 + 1;
  uint64_t v7 = &v4[192 * v6];
  long long v8 = *(_OWORD *)v3;
  long long v9 = *(_OWORD *)(v3 + 16);
  long long v10 = *(_OWORD *)(v3 + 48);
  *((_OWORD *)v7 + 4) = *(_OWORD *)(v3 + 32);
  *((_OWORD *)v7 + 5) = v10;
  *((_OWORD *)v7 + 2) = v8;
  *((_OWORD *)v7 + 3) = v9;
  long long v11 = *(_OWORD *)(v3 + 64);
  long long v12 = *(_OWORD *)(v3 + 80);
  long long v13 = *(_OWORD *)(v3 + 112);
  *((_OWORD *)v7 + 8) = *(_OWORD *)(v3 + 96);
  *((_OWORD *)v7 + 9) = v13;
  *((_OWORD *)v7 + 6) = v11;
  *((_OWORD *)v7 + 7) = v12;
  long long v14 = *(_OWORD *)(v3 + 128);
  long long v15 = *(_OWORD *)(v3 + 144);
  long long v16 = *(_OWORD *)(v3 + 176);
  *((_OWORD *)v7 + 12) = *(_OWORD *)(v3 + 160);
  *((_OWORD *)v7 + 13) = v16;
  *((_OWORD *)v7 + 10) = v14;
  *((_OWORD *)v7 + 11) = v15;
  *unsigned int v2 = v4;
  if (*(void *)v3 >= 2uLL) {
    uint64_t v17 = (void *)swift_bridgeObjectRetain();
  }
  else {
    uint64_t v17 = _swiftEmptyArrayStorage;
  }
  uint64_t v4 = (char *)v17[2];
  if (v4)
  {
    uint64_t v18 = (unsigned __int8 *)(v17 + 6);
    unint64_t v38 = v2;
    do
    {
      uint64_t v19 = *((void *)v18 - 2);
      uint64_t v20 = *((void *)v18 - 1);
      unsigned __int8 v21 = *v18;
      if ((*v18 & 0xC0) == 0x40) {
        int v22 = 64;
      }
      else {
        int v22 = *v18;
      }
      uint64_t v23 = *((void *)v2[1] + 2);
      sub_1000319B8(*((void *)v18 - 2), *((void *)v18 - 1), *v18);
      if (v23)
      {
        sub_100060BB4(v19, v20, v22);
        if (v24) {
          goto LABEL_11;
        }
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v3 = (uint64_t)v2[1];
      v2[1] = (char *)0x8000000000000000;
      unint64_t v27 = sub_100060BB4(v19, v20, v22);
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = (v26 & 1) == 0;
      uint64_t v30 = v28 + v29;
      if (__OFADD__(v28, v29))
      {
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      unsigned int v2 = v26;
      if (*(void *)(v3 + 24) >= v30)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if ((v26 & 1) == 0) {
            goto LABEL_24;
          }
        }
        else
        {
          sub_10007A3CC();
          if ((v2 & 1) == 0) {
            goto LABEL_24;
          }
        }
      }
      else
      {
        sub_10007AAE8(v30, isUniquelyReferenced_nonNull_native);
        unint64_t v31 = sub_100060BB4(v19, v20, v22);
        if ((v2 & 1) != (v32 & 1))
        {
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        unint64_t v27 = v31;
        if ((v2 & 1) == 0)
        {
LABEL_24:
          *(void *)(v3 + 8 * (v27 >> 6) + 64) |= 1 << v27;
          uint64_t v33 = *(void *)(v3 + 48) + 24 * v27;
          *(void *)uint64_t v33 = v19;
          *(void *)(v33 + 8) = v20;
          *(unsigned char *)(v33 + 16) = v22;
          *(void *)(*(void *)(v3 + 56) + 8 * v27) = v39;
          uint64_t v34 = *(void *)(v3 + 16);
          BOOL v35 = __OFADD__(v34, 1);
          uint64_t v36 = v34 + 1;
          if (v35) {
            goto LABEL_32;
          }
          *(void *)(v3 + 16) = v36;
          sub_1000319B8(v19, v20, v22);
          goto LABEL_10;
        }
      }
      *(void *)(*(void *)(v3 + 56) + 8 * v27) = v39;
LABEL_10:
      unsigned int v2 = v38;
      v38[1] = (char *)v3;
      swift_bridgeObjectRelease();
LABEL_11:
      sub_10002ECB8(v19, v20, v21);
      v18 += 24;
      --v4;
    }
    while (v4);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100069FEC()
{
  return sub_10006FC48(*v0);
}

void *sub_10006A000@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)v2 + 16))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *sub_10006A02C(unint64_t *result)
{
  unint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 < *(void *)(*(void *)v1 + 16))
  {
    *uint64_t result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void sub_10006A058(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 16);
}

void (*sub_10006A068(void (**a1)(void **a1), unint64_t *a2))(void **a1)
{
  uint64_t result = (void (*)(void **))malloc(0x180uLL);
  *a1 = result;
  unint64_t v6 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v6 < *(void *)(*(void *)v2 + 16))
  {
    uint64_t v7 = (_OWORD *)(*(void *)v2 + 192 * v6);
    long long v8 = v7[2];
    long long v9 = v7[3];
    long long v10 = v7[5];
    *((_OWORD *)result + 2) = v7[4];
    *((_OWORD *)result + 3) = v10;
    *(_OWORD *)uint64_t result = v8;
    *((_OWORD *)result + 1) = v9;
    long long v11 = v7[6];
    long long v12 = v7[7];
    long long v13 = v7[9];
    *((_OWORD *)result + 6) = v7[8];
    *((_OWORD *)result + 7) = v13;
    *((_OWORD *)result + 4) = v11;
    *((_OWORD *)result + 5) = v12;
    long long v14 = v7[10];
    long long v15 = v7[11];
    long long v16 = v7[13];
    *((_OWORD *)result + 10) = v7[12];
    *((_OWORD *)result + 11) = v16;
    *((_OWORD *)result + 8) = v14;
    *((_OWORD *)result + 9) = v15;
    long long v17 = *((_OWORD *)result + 3);
    *((_OWORD *)result + 14) = *((_OWORD *)result + 2);
    *((_OWORD *)result + 15) = v17;
    long long v18 = *((_OWORD *)result + 1);
    *((_OWORD *)result + 12) = *(_OWORD *)result;
    *((_OWORD *)result + 13) = v18;
    long long v19 = *((_OWORD *)result + 7);
    *((_OWORD *)result + 18) = *((_OWORD *)result + 6);
    *((_OWORD *)result + 19) = v19;
    long long v20 = *((_OWORD *)result + 5);
    *((_OWORD *)result + 16) = *((_OWORD *)result + 4);
    *((_OWORD *)result + 17) = v20;
    long long v21 = *((_OWORD *)result + 11);
    *((_OWORD *)result + 22) = *((_OWORD *)result + 10);
    *((_OWORD *)result + 23) = v21;
    long long v22 = *((_OWORD *)result + 9);
    *((_OWORD *)result + 20) = *((_OWORD *)result + 8);
    *((_OWORD *)result + 21) = v22;
    return sub_10006A144;
  }
  __break(1u);
  return result;
}

void sub_10006A144(void **a1)
{
}

uint64_t *sub_10006A14C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (v4 = result[1], uint64_t result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v2[1];
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    a2[3] = v5;
    swift_bridgeObjectRetain();
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void sub_10006A1AC(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL sub_10006A1BC()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

void sub_10006A1D0(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void *sub_10006A1E0@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(void *)(*(void *)v3 + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t sub_10006A20C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = sub_10006FB50(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t *sub_10006A248(unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (*result <= v4 && v3 <= v4) {
    return (unint64_t *)(v3 - *result);
  }
  __break(1u);
  return result;
}

uint64_t *sub_10006A270(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *sub_10006A28C(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_10006A2A8(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *sub_10006A2C4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result >= *(void *)(*(void *)v2 + 16)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *sub_10006A2E8(void *result)
{
  if (*result >= *(void *)(*(void *)v1 + 16)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 sub_10006A30C@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_10006A31C()
{
  return *(void *)(*(void *)v0 + 16);
}

void *sub_10006A328()
{
  uint64_t v1 = sub_100056B14(*v0, v0[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

void *sub_10006A374(void *a1, char *a2, uint64_t a3)
{
  return sub_10006A37C(a1, a2, a3, *v3, v3[1]);
}

void *sub_10006A37C(void *result, char *__dst, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v7 = result;
  if (!__dst)
  {
LABEL_11:
    uint64_t v8 = 0;
    goto LABEL_15;
  }
  uint64_t v8 = a3;
  if (!a3)
  {
LABEL_15:
    *char v7 = a4;
    v7[1] = a5;
    long long v7[2] = v8;
    return (void *)v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a4 + 16);
    if (v9)
    {
      long long v10 = __dst;
      long long v11 = (_OWORD *)(a4 + 32);
      unint64_t v12 = 1;
      while (1)
      {
        long long v13 = v11[9];
        void v20[8] = v11[8];
        v20[9] = v13;
        long long v14 = v11[11];
        v20[10] = v11[10];
        v20[11] = v14;
        long long v15 = v11[5];
        v20[4] = v11[4];
        v20[5] = v15;
        long long v16 = v11[7];
        v20[6] = v11[6];
        v20[7] = v16;
        long long v17 = v11[1];
        v20[0] = *v11;
        v20[1] = v17;
        long long v18 = v11[3];
        void v20[2] = v11[2];
        v20[3] = v18;
        memmove(v10, v11, 0xC0uLL);
        if (v8 == v12)
        {
          sub_10002E940((uint64_t)v20);
          goto LABEL_15;
        }
        if (v9 == v12) {
          break;
        }
        v10 += 192;
        sub_10002E940((uint64_t)v20);
        v11 += 12;
        if (v12++ >= *(void *)(a4 + 16))
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      sub_10002E940((uint64_t)v20);
    }
    uint64_t v8 = v9;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006A498(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    BOOL v7 = 0;
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    BOOL v7 = 0;
LABEL_14:
    uint64_t v8 = a4;
LABEL_15:
    *(void *)__n128 result = a4;
    *(void *)(result + 8) = a5;
    *(void *)(result + 16) = v8;
    *(unsigned char *)(result + 24) = v7;
    return a3;
  }
  if (a3 < 0) {
    goto LABEL_17;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a4;
  while (1)
  {
    BOOL v7 = v6 == a5;
    if (v6 != a5) {
      break;
    }
    uint64_t v8 = 0;
LABEL_8:
    *(void *)(a2 + 8 * v5) = v6;
    if (a3 - 1 == v5) {
      goto LABEL_15;
    }
    ++v5;
    BOOL v9 = v6 == a5;
    uint64_t v6 = v8;
    if (v9)
    {
      BOOL v7 = 1;
      a3 = v5;
      goto LABEL_15;
    }
  }
  uint64_t v8 = v6 + 1;
  if (!__OFADD__(v6, 1)) {
    goto LABEL_8;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_10006A524()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

unint64_t sub_10006A54C()
{
  unint64_t result = qword_1000C5B48;
  if (!qword_1000C5B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5B48);
  }
  return result;
}

void *sub_10006A5A0()
{
  return &protocol witness table for Int;
}

uint64_t sub_10006A5AC()
{
  return sub_10006A7D0(&qword_1000C5B50);
}

unint64_t sub_10006A5E0()
{
  unint64_t result = qword_1000C5B60;
  if (!qword_1000C5B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5B60);
  }
  return result;
}

uint64_t sub_10006A634()
{
  return sub_100005178(&qword_1000C5B68, &qword_1000C5B70);
}

unint64_t sub_10006A674()
{
  unint64_t result = qword_1000C5B78;
  if (!qword_1000C5B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5B78);
  }
  return result;
}

uint64_t sub_10006A6C8()
{
  return sub_10006A7D0(&qword_1000C5B80);
}

uint64_t sub_10006A6FC()
{
  return sub_10006A888(&qword_1000C5B88, (void (*)(void))sub_10006A744);
}

unint64_t sub_10006A744()
{
  unint64_t result = qword_1000C5B90;
  if (!qword_1000C5B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5B90);
  }
  return result;
}

uint64_t sub_10006A79C()
{
  return sub_10006A7D0(&qword_1000C5B98);
}

uint64_t sub_10006A7D0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000046A8(&qword_1000C5B58);
    sub_10006A5E0();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006A840()
{
  return sub_10006A888(&qword_1000C5BA0, (void (*)(void))sub_10006A8F8);
}

uint64_t sub_10006A888(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000046A8(&qword_1000C5B70);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006A8F8()
{
  unint64_t result = qword_1000C5BA8;
  if (!qword_1000C5BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5BA8);
  }
  return result;
}

uint64_t sub_10006A94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v17 = &type metadata for Bool;
  v16[0] = 1;
  sub_100041854((uint64_t)v16, (uint64_t)v14);
  v13[0] = a6;
  v13[1] = a7;
  void v13[2] = a8;
  void v14[4] = a1;
  char v15 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10007A218(v13);
  sub_1000418BC((uint64_t)v13);
  return sub_1000556DC((uint64_t)v16, &qword_1000C5360);
}

uint64_t sub_10006AA14(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10006AA64(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10006AA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10)
{
  return sub_10006AB64(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 1u);
}

uint64_t sub_10006AA64(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 != 2)
  {
    uint64_t v9 = result;
    long long v14 = &type metadata for Bool;
    v13[0] = a3 & 1;
    sub_100041854((uint64_t)v13, (uint64_t)v11);
    v10[0] = a4;
    v10[1] = a5;
    void v10[2] = a6;
    v11[4] = v9;
    char v12 = 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10007A218(v10);
    sub_1000418BC((uint64_t)v10);
    return sub_1000556DC((uint64_t)v13, &qword_1000C5360);
  }
  return result;
}

uint64_t sub_10006AB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10)
{
  return sub_10006AB64(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
}

uint64_t sub_10006AB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, unsigned __int8 a11)
{
  long long v16 = (unsigned char *)(a6 + 16);
  swift_beginAccess();
  uint64_t result = sub_100068E38(a7, a8, a9, a11, a1, a5, *(unsigned char *)(a6 + 16), a10);
  if (!v19)
  {
    char v18 = result;
    uint64_t result = swift_beginAccess();
    *long long v16 = v18 & 1;
  }
  return result;
}

uint64_t sub_10006AC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  long long v12 = *(_OWORD *)(a5 + 16);
  v22[2] = *(_OWORD *)a5;
  v22[3] = v12;
  uint64_t v23 = *(void *)(a5 + 32);
  sub_100079B10(a6, a7, a8, (uint64_t)&v15);
  if (!v16)
  {
    sub_1000556DC((uint64_t)&v15, &qword_1000C5888);
    long long v20 = 0u;
    long long v21 = 0u;
    goto LABEL_7;
  }
  sub_100041854((uint64_t)v18, (uint64_t)&v20);
  sub_1000418BC((uint64_t)&v15);
  if (!*((void *)&v21 + 1))
  {
LABEL_7:
    sub_1000556DC((uint64_t)&v20, &qword_1000C5360);
LABEL_9:
    sub_10002FDE0();
    swift_allocError();
    *(void *)uint64_t v14 = 3;
    *(_OWORD *)(v14 + 8) = 0u;
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(void *)(v14 + 72) = 0;
    *(unsigned char *)(v14 + 80) = 15;
    return swift_willThrow();
  }
  sub_100063EFC(&v20, v22);
  sub_100055680((uint64_t)v22, (uint64_t)&v15);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    sub_100005128((uint64_t)v22);
    goto LABEL_9;
  }
  if (__OFADD__((void)v20, 1))
  {
    __break(1u);
  }
  else
  {
    *((void *)&v21 + 1) = &type metadata for Int;
    *(void *)&long long v20 = v20 + 1;
    sub_100041854((uint64_t)&v20, (uint64_t)v18);
    uint64_t v15 = a6;
    uint64_t v16 = a7;
    long long v17 = a8;
    uint64_t v18[4] = a1;
    char v19 = 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10007A218(&v15);
    sub_1000418BC((uint64_t)&v15);
    sub_100005128((uint64_t)v22);
    return sub_1000556DC((uint64_t)&v20, &qword_1000C5360);
  }
  return result;
}

uint64_t sub_10006AE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13[3] = &type metadata for Int;
  v13[0] = 0;
  sub_100041854((uint64_t)v13, (uint64_t)v11);
  v10[0] = a3;
  v10[1] = a4;
  void v10[2] = a5;
  v11[4] = a1;
  char v12 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10007A218(v10);
  sub_1000418BC((uint64_t)v10);
  return sub_1000556DC((uint64_t)v13, &qword_1000C5360);
}

uint64_t sub_10006AEF4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v6 = result;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = v4 - 1;
    for (uint64_t i = 32; ; i += 192)
    {
      long long v9 = *(_OWORD *)(a2 + i + 144);
      v16[8] = *(_OWORD *)(a2 + i + 128);
      v16[9] = v9;
      long long v10 = *(_OWORD *)(a2 + i + 176);
      v16[10] = *(_OWORD *)(a2 + i + 160);
      long long v17 = v10;
      long long v11 = *(_OWORD *)(a2 + i + 80);
      v16[4] = *(_OWORD *)(a2 + i + 64);
      void v16[5] = v11;
      long long v12 = *(_OWORD *)(a2 + i + 112);
      v16[6] = *(_OWORD *)(a2 + i + 96);
      v16[7] = v12;
      long long v13 = *(_OWORD *)(a2 + i + 16);
      v16[0] = *(_OWORD *)(a2 + i);
      v16[1] = v13;
      long long v14 = *(_OWORD *)(a2 + i + 48);
      long long v16[2] = *(_OWORD *)(a2 + i + 32);
      v16[3] = v14;
      uint64_t v15 = (void (*)(void *, uint64_t))v17;
      sub_10002E940((uint64_t)v16);
      v15(&_swiftEmptySetSingleton, v6);
      sub_10002EAFC((uint64_t)v16);
      if (v3 || !v7) {
        break;
      }
      --v7;
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10006AFF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_10006FEB8(a1, (uint64_t)&v43);
  int v7 = v45;
  if (v45 < 0)
  {
    v45 &= ~0x8000000000000000;
    if (!*(void *)(a3 + 16))
    {
LABEL_10:
      sub_100035580(v41);
      goto LABEL_11;
    }
  }
  else if (!*(void *)(a3 + 16))
  {
    goto LABEL_10;
  }
  uint64_t v9 = v43;
  uint64_t v8 = v44;
  sub_1000319B8(v43, v44, v7);
  unint64_t v10 = sub_100060BB4(v9, v8, v7);
  if ((v11 & 1) == 0)
  {
    sub_10002ECB8(v9, v8, v7);
    goto LABEL_10;
  }
  unint64_t v12 = *(void *)(*(void *)(a3 + 56) + 8 * v10);
  uint64_t result = sub_10002ECB8(v9, v8, v7);
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v12 < *(void *)(a2 + 16))
  {
    uint64_t v15 = (_OWORD *)(a2 + 192 * v12);
    long long v16 = v15[11];
    long long v17 = v15[9];
    long long v37 = v15[10];
    long long v38 = v16;
    long long v18 = v15[11];
    long long v19 = v15[13];
    long long v39 = v15[12];
    long long v40 = v19;
    long long v20 = v15[7];
    long long v21 = v15[5];
    long long v33 = v15[6];
    long long v34 = v20;
    long long v22 = v15[7];
    long long v23 = v15[9];
    long long v35 = v15[8];
    long long v36 = v23;
    long long v24 = v15[3];
    v30[0] = v15[2];
    v30[1] = v24;
    long long v25 = v15[5];
    long long v27 = v15[2];
    long long v26 = v15[3];
    long long v31 = v15[4];
    long long v32 = v25;
    v41[8] = v37;
    v41[9] = v18;
    long long v28 = v15[13];
    v41[10] = v39;
    v41[11] = v28;
    v41[4] = v33;
    v41[5] = v22;
    v41[6] = v35;
    v41[7] = v17;
    v41[0] = v27;
    v41[1] = v26;
    v41[2] = v31;
    v41[3] = v21;
    BOOL v29 = v41;
    String.init(argument:)(*(Swift::String *)(&v14 - 1));
    sub_10002E940((uint64_t)v30);
LABEL_11:
    sub_10002B998((uint64_t)v41, (uint64_t)v42, &qword_1000C5148);
    return sub_10002B998((uint64_t)v42, a4, &qword_1000C5148);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006B184(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, __int16 a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  v323 = a2;
  sub_10006FEB8((uint64_t)a2, (uint64_t)v270);
  uint64_t v14 = v270[0];
  uint64_t v15 = v270[1];
  uint64_t v260 = v271;
  sub_100003DD0(&qword_1000C56E8);
  uint64_t v16 = swift_allocObject();
  v17._uint64_t countAndFlagsBits = sub_100084DB0(v16, 1);
  *(void *)v17._object = a3;
  *((void *)v17._object + 1) = a4;
  *((unsigned char *)v17._object + 16) = a5;
  *((unsigned char *)v17._object + 17) = HIBYTE(a5) & 1;
  uint64_t countAndFlagsBits = String.init(argument:)(v17).value._countAndFlagsBits;
  uint64_t v19 = sub_100092FD4(0);
  if (sub_10005FA88(v19))
  {
    sub_100097984(v19);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_100076A54(countAndFlagsBits);
  swift_bridgeObjectRelease();
  switch(*(unsigned char *)(a1 + 145))
  {
    case 1:
      sub_10006FEB8((uint64_t)v323, (uint64_t)&v289);
      if (v290 < 0)
      {
        v290 &= ~0x8000000000000000;
        uint64_t v115 = v291;
        uint64_t v114 = v292;
        goto LABEL_86;
      }
      sub_10006FF14(&v289, &v293);
      if (!sub_100065C50() || (a5 & 0x100) != 0 || (a5 & 1) != 0 || a4)
      {
        sub_10007C858(a3, a4, a5 & 0x1FF, v268);
        sub_10002B998((uint64_t)v268, (uint64_t)&v283, &qword_1000C5BB0);
        uint64_t v93 = v288;
        if (!v288) {
          goto LABEL_81;
        }
        Swift::UInt v94 = v283;
        Swift::UInt v95 = v284;
        uint64_t v96 = v287;
        uint64_t v97 = v20;
        int v98 = v285 | (v286 << 8);
        if (sub_10006F550(v283, v284, v285 | (unsigned __int16)(v286 << 8), v97))
        {
          uint64_t v92 = v97;
        }
        else
        {
          uint64_t v92 = v97;
          if ((sub_10006F550(v94, v95, v98, v97) & 1) == 0)
          {
            sub_100061630((uint64_t)&v265, v94, v95, v98);
            uint64_t v92 = v97;
          }
        }
        sub_1000319B8(v14, v15, v260);
        a6(v92, v14, v15, v260, v96, v93, a8);
        if (v8)
        {
          sub_10006FF70(v323);
          swift_bridgeObjectRelease();
          return sub_10006FFA4((uint64_t)v268);
        }
        char v167 = v268;
        goto LABEL_165;
      }
      uint64_t v256 = v8;
      uint64_t v36 = v261[6];
      sub_10005FA68(a3, 1, v36);
      unint64_t v37 = v36 + 16 * a3;
      uint64_t v39 = *(void *)(v37 + 32);
      unint64_t v38 = *(void *)(v37 + 40);
      swift_bridgeObjectRetain();
      sub_100034DE0(2uLL, v39, v38);
      swift_bridgeObjectRelease();
      uint64_t v26 = static String._fromSubstring(_:)();
      uint64_t v28 = v40;
      swift_bridgeObjectRelease();
      if (*(void *)(v20 + 16))
      {
        Hasher.init(_seed:)();
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(a3);
        Hasher._combine(_:)(0);
        Swift::Int v41 = Hasher._finalize()();
        uint64_t v42 = -1 << *(unsigned char *)(v20 + 32);
        unint64_t v43 = v41 & ~v42;
        uint64_t v44 = v20 + 56;
        if ((*(void *)(v20 + 56 + ((v43 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v43))
        {
          uint64_t v45 = ~v42;
          do
          {
            uint64_t v46 = *(void *)(v20 + 48) + 24 * v43;
            if (*(unsigned char *)(v46 + 17) & 1) == 0 && *(void *)v46 == a3 && (*(unsigned char *)(v46 + 16)) {
              goto LABEL_224;
            }
            unint64_t v43 = (v43 + 1) & v45;
          }
          while (((*(void *)(v44 + ((v43 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v43) & 1) != 0);
        }
        if (*(void *)(v20 + 16))
        {
          Hasher.init(_seed:)();
          Hasher._combine(_:)(1uLL);
          Hasher._combine(_:)(a3);
          Hasher._combine(_:)(0);
          Swift::Int v181 = Hasher._finalize()();
          uint64_t v182 = -1 << *(unsigned char *)(v20 + 32);
          unint64_t v183 = v181 & ~v182;
          if ((*(void *)(v44 + ((v183 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v183))
          {
            uint64_t v184 = ~v182;
            do
            {
              uint64_t v185 = *(void *)(v20 + 48) + 24 * v183;
              if (*(unsigned char *)(v185 + 17) & 1) == 0 && *(void *)v185 == a3 && (*(unsigned char *)(v185 + 16)) {
                goto LABEL_224;
              }
              unint64_t v183 = (v183 + 1) & v184;
            }
            while (((*(void *)(v44 + ((v183 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v183) & 1) != 0);
          }
        }
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(a3);
      Hasher._combine(_:)(0);
      Swift::Int v187 = Hasher._finalize()();
      uint64_t v188 = -1 << *(unsigned char *)(v20 + 32);
      unint64_t v177 = v187 & ~v188;
      if (((*(void *)(v20 + 56 + ((v177 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v177) & 1) == 0) {
        goto LABEL_223;
      }
      uint64_t v189 = ~v188;
      while (1)
      {
        uint64_t v190 = *(void *)(v20 + 48) + 24 * v177;
        if (*(unsigned char *)(v190 + 17) & 1) == 0 && *(void *)v190 == a3 && (*(unsigned char *)(v190 + 16)) {
          goto LABEL_224;
        }
        unint64_t v177 = (v177 + 1) & v189;
        if (((*(void *)(v20 + 56 + ((v177 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v177) & 1) == 0) {
          goto LABEL_223;
        }
      }
    case 2:
      sub_10006FEB8((uint64_t)v323, (uint64_t)&v300);
      if (v301 < 0)
      {
        v301 &= ~0x8000000000000000;
        uint64_t v115 = v302;
        uint64_t v114 = v303;
LABEL_86:
        swift_bridgeObjectRetain();
        uint64_t v116 = v14;
        uint64_t v117 = v14;
        unsigned __int8 v118 = v260;
        sub_1000319B8(v117, v15, v260);
        a6(v20, v116, v15, v260, v115, v114, a8);
        if (!v8)
        {
          swift_bridgeObjectRelease();
          uint64_t v119 = v116;
          uint64_t v120 = v15;
          unsigned __int8 v121 = v260;
          goto LABEL_106;
        }
        goto LABEL_89;
      }
      sub_10006FF14(&v300, &v304);
      if (!sub_100065C50() || (a5 & 0x100) != 0 || (a5 & 1) != 0 || a4)
      {
        sub_10007C9C8(a3, a4, a5 & 0x1FF, (uint64_t)v269);
        sub_10002B998((uint64_t)v269, (uint64_t)&v294, &qword_1000C5BB0);
        uint64_t v99 = v299;
        if (!v299) {
          goto LABEL_81;
        }
        Swift::UInt v100 = v294;
        Swift::UInt v101 = v295;
        uint64_t v102 = v298;
        uint64_t v103 = v20;
        int v104 = v296 | (v297 << 8);
        if (sub_10006F550(v294, v295, v296 | (unsigned __int16)(v297 << 8), v103))
        {
          uint64_t v92 = v103;
        }
        else
        {
          uint64_t v92 = v103;
          if ((sub_10006F550(v100, v101, v104, v103) & 1) == 0)
          {
            sub_100061630((uint64_t)&v265, v100, v101, v104);
            uint64_t v92 = v103;
          }
        }
        sub_1000319B8(v14, v15, v260);
        a6(v92, v14, v15, v260, v102, v99, a8);
        if (v8)
        {
          sub_10006FF70(v323);
          swift_bridgeObjectRelease();
          return sub_10006FFA4((uint64_t)v269);
        }
        char v167 = v269;
        goto LABEL_165;
      }
      uint64_t v256 = v8;
      uint64_t v48 = v261[6];
      sub_10005FA68(a3, 1, v48);
      unint64_t v49 = v48 + 16 * a3;
      uint64_t v51 = *(void *)(v49 + 32);
      unint64_t v50 = *(void *)(v49 + 40);
      swift_bridgeObjectRetain();
      sub_100034DE0(2uLL, v51, v50);
      swift_bridgeObjectRelease();
      uint64_t v26 = static String._fromSubstring(_:)();
      uint64_t v28 = v52;
      swift_bridgeObjectRelease();
      if (*(void *)(v20 + 16))
      {
        Hasher.init(_seed:)();
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(a3);
        Hasher._combine(_:)(0);
        Swift::Int v53 = Hasher._finalize()();
        uint64_t v54 = -1 << *(unsigned char *)(v20 + 32);
        unint64_t v55 = v53 & ~v54;
        uint64_t v56 = v20 + 56;
        if ((*(void *)(v20 + 56 + ((v55 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v55))
        {
          uint64_t v57 = ~v54;
          do
          {
            uint64_t v58 = *(void *)(v20 + 48) + 24 * v55;
            if (*(unsigned char *)(v58 + 17) & 1) == 0 && *(void *)v58 == a3 && (*(unsigned char *)(v58 + 16)) {
              goto LABEL_224;
            }
            unint64_t v55 = (v55 + 1) & v57;
          }
          while (((*(void *)(v56 + ((v55 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v55) & 1) != 0);
        }
        if (*(void *)(v20 + 16))
        {
          Hasher.init(_seed:)();
          Hasher._combine(_:)(1uLL);
          Hasher._combine(_:)(a3);
          Hasher._combine(_:)(0);
          Swift::Int v192 = Hasher._finalize()();
          uint64_t v193 = -1 << *(unsigned char *)(v20 + 32);
          unint64_t v194 = v192 & ~v193;
          if ((*(void *)(v56 + ((v194 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v194))
          {
            uint64_t v195 = ~v193;
            do
            {
              uint64_t v196 = *(void *)(v20 + 48) + 24 * v194;
              if (*(unsigned char *)(v196 + 17) & 1) == 0 && *(void *)v196 == a3 && (*(unsigned char *)(v196 + 16)) {
                goto LABEL_224;
              }
              unint64_t v194 = (v194 + 1) & v195;
            }
            while (((*(void *)(v56 + ((v194 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v194) & 1) != 0);
          }
        }
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(a3);
      Hasher._combine(_:)(0);
      Swift::Int v198 = Hasher._finalize()();
      uint64_t v199 = -1 << *(unsigned char *)(v20 + 32);
      unint64_t v177 = v198 & ~v199;
      if (((*(void *)(v20 + 56 + ((v177 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v177) & 1) == 0) {
        goto LABEL_223;
      }
      uint64_t v200 = ~v199;
      while (1)
      {
        uint64_t v201 = *(void *)(v20 + 48) + 24 * v177;
        if (*(unsigned char *)(v201 + 17) & 1) == 0 && *(void *)v201 == a3 && (*(unsigned char *)(v201 + 16)) {
          goto LABEL_224;
        }
        unint64_t v177 = (v177 + 1) & v200;
        if (((*(void *)(v20 + 56 + ((v177 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v177) & 1) == 0) {
          goto LABEL_223;
        }
      }
    case 3:
      sub_10006FEB8((uint64_t)v323, (uint64_t)&v318);
      if (v319 < 0)
      {
        v319 &= ~0x8000000000000000;
        uint64_t v122 = v320;
        uint64_t v123 = v321;
        swift_bridgeObjectRetain();
        uint64_t v116 = v14;
        uint64_t v124 = v14;
        unsigned __int8 v118 = v260;
        sub_1000319B8(v124, v15, v260);
        a6(v20, v116, v15, v260, v122, v123, a8);
        if (v8)
        {
LABEL_89:
          uint64_t v111 = v116;
          uint64_t v112 = v15;
          unsigned __int8 v113 = v118;
LABEL_90:
          sub_10002ECB8(v111, v112, v113);
          goto LABEL_91;
        }
        swift_bridgeObjectRelease();
        sub_10002ECB8(v116, v15, v260);
        uint64_t v127 = swift_bridgeObjectRetain();
        sub_10005F4C8(v127);
        goto LABEL_108;
      }
      sub_10006FF14(&v318, v322);
      if (!sub_100065C50() || (a5 & 0x100) != 0 || (a5 & 1) != 0 || a4)
      {
LABEL_108:
        uint64_t v128 = v261;
        goto LABEL_109;
      }
      uint64_t v257 = v8;
      uint64_t v60 = v261[6];
      sub_10005FA68(a3, 1, v60);
      unint64_t v61 = v60 + 16 * a3;
      uint64_t v63 = *(void *)(v61 + 32);
      unint64_t v62 = *(void *)(v61 + 40);
      swift_bridgeObjectRetain();
      sub_100034DE0(2uLL, v63, v62);
      swift_bridgeObjectRelease();
      uint64_t v64 = static String._fromSubstring(_:)();
      uint64_t v66 = v65;
      swift_bridgeObjectRelease();
      if (*(void *)(v20 + 16))
      {
        Hasher.init(_seed:)();
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(a3);
        Hasher._combine(_:)(0);
        Swift::Int v67 = Hasher._finalize()();
        uint64_t v68 = -1 << *(unsigned char *)(v20 + 32);
        unint64_t v69 = v67 & ~v68;
        uint64_t v70 = v20 + 56;
        if ((*(void *)(v20 + 56 + ((v69 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v69))
        {
          uint64_t v71 = ~v68;
          do
          {
            uint64_t v72 = *(void *)(v20 + 48) + 24 * v69;
            if (*(unsigned char *)(v72 + 17) & 1) == 0 && *(void *)v72 == a3 && (*(unsigned char *)(v72 + 16)) {
              goto LABEL_247;
            }
            unint64_t v69 = (v69 + 1) & v71;
          }
          while (((*(void *)(v70 + ((v69 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v69) & 1) != 0);
        }
        if (*(void *)(v20 + 16))
        {
          Hasher.init(_seed:)();
          Hasher._combine(_:)(1uLL);
          Hasher._combine(_:)(a3);
          Hasher._combine(_:)(0);
          Swift::Int v206 = Hasher._finalize()();
          uint64_t v207 = -1 << *(unsigned char *)(v20 + 32);
          unint64_t v208 = v206 & ~v207;
          if ((*(void *)(v70 + ((v208 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v208))
          {
            uint64_t v209 = ~v207;
            do
            {
              uint64_t v210 = *(void *)(v20 + 48) + 24 * v208;
              if (*(unsigned char *)(v210 + 17) & 1) == 0 && *(void *)v210 == a3 && (*(unsigned char *)(v210 + 16)) {
                goto LABEL_247;
              }
              unint64_t v208 = (v208 + 1) & v209;
            }
            while (((*(void *)(v70 + ((v208 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v208) & 1) != 0);
          }
        }
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(a3);
      Hasher._combine(_:)(0);
      Swift::Int v212 = Hasher._finalize()();
      uint64_t v213 = -1 << *(unsigned char *)(v20 + 32);
      unint64_t v214 = v212 & ~v213;
      if ((*(void *)(v20 + 56 + ((v214 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v214))
      {
        uint64_t v215 = ~v213;
        while (1)
        {
          uint64_t v216 = *(void *)(v20 + 48) + 24 * v214;
          if (*(unsigned char *)(v216 + 17) & 1) == 0 && *(void *)v216 == a3 && (*(unsigned char *)(v216 + 16)) {
            break;
          }
          unint64_t v214 = (v214 + 1) & v215;
          if (((*(void *)(v20 + 56 + ((v214 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v214) & 1) == 0) {
            goto LABEL_248;
          }
        }
LABEL_247:
        swift_bridgeObjectRetain();
        uint64_t v218 = v20;
        goto LABEL_249;
      }
LABEL_248:
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_1000628D8(a3, 0, 1, v214, isUniquelyReferenced_nonNull_native);
      uint64_t v218 = v20;
      swift_bridgeObjectRelease();
LABEL_249:
      uint64_t v265 = v64;
      uint64_t v266 = v66;
      sub_1000319B8(v14, v15, v260);
      uint64_t v220 = String.init<A>(_:)();
      a6(v218, v14, v15, v260, v220, v221, a8);
      uint64_t v9 = v257;
      if (v257)
      {
        swift_bridgeObjectRelease();
        sub_10006FF70(v323);
LABEL_91:
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      uint64_t v128 = v261;
      swift_bridgeObjectRelease();
      sub_10006FF70(v323);
      sub_10005F4C8(v218);
      uint64_t v222 = swift_bridgeObjectRetain();
      sub_100072F7C(v222);
      swift_bridgeObjectRelease();
LABEL_109:
      uint64_t v129 = swift_bridgeObjectRetain();
      sub_10005F4C8(v129);
      uint64_t v130 = swift_bridgeObjectRetain();
      sub_100072F7C(v130);
      swift_bridgeObjectRelease();
      uint64_t v131 = v128[4];
      uint64_t v132 = v128[5];
      uint64_t v133 = sub_10006532C(v131);
      if (v133 < v132) {
        goto LABEL_288;
      }
      uint64_t v134 = v133;
      sub_10007E9C0(v132, v131);
      sub_10007E9C0(v134, v131);
      if (v134 < 0) {
        goto LABEL_289;
      }
      if (v132 == v134) {
        goto LABEL_157;
      }
      if (v132 >= v134) {
        goto LABEL_290;
      }
      uint64_t v249 = v131 + 32;
      if ((*(void *)(v131 + 32 + (v132 << 6) + 16) & 0x6000000000000000) != 0x2000000000000000)
      {
LABEL_157:
        uint64_t v162 = v20;
        sub_10006FEB8((uint64_t)v323, (uint64_t)v313);
        unsigned __int8 v163 = v314;
        if (v314 < 0) {
          v314 &= ~0x8000000000000000;
        }
        uint64_t v165 = v313[0];
        uint64_t v164 = v313[1];
        sub_10002FDE0();
        swift_allocError();
        *(void *)uint64_t v166 = v162;
        *(void *)(v166 + 8) = v165;
        *(void *)(v166 + 16) = v164;
        *(void *)(v166 + 24) = v163;
        *(_OWORD *)(v166 + 32) = 0u;
        *(_OWORD *)(v166 + 48) = 0u;
        *(_OWORD *)(v166 + 64) = 0u;
        *(unsigned char *)(v166 + 80) = 7;
        uint64_t v107 = v165;
        uint64_t v108 = v164;
        unsigned __int8 v106 = v163;
LABEL_160:
        sub_1000319B8(v107, v108, v106);
        return swift_willThrow();
      }
      else
      {
        uint64_t v135 = sub_10006532C(v131);
        if (v135 < v132) {
          goto LABEL_295;
        }
        uint64_t v136 = v135;
        sub_10007E9C0(v132, v131);
        sub_10007E9C0(v136, v131);
        if (v136 < 0) {
          goto LABEL_296;
        }
        if (v132 == v136) {
          return swift_bridgeObjectRelease();
        }
        uint64_t v137 = v20 + 56;
        uint64_t v252 = v20;
        uint64_t v248 = v131;
        while (1)
        {
          if (v132 >= v136) {
            goto LABEL_285;
          }
          uint64_t v138 = v249 + (v132 << 6);
          unint64_t v139 = *(void *)(v138 + 16);
          if ((v139 & 0x6000000000000000) != 0x2000000000000000) {
            return swift_bridgeObjectRelease();
          }
          uint64_t v141 = *(void *)v138;
          uint64_t v140 = *(void *)(v138 + 8);
          uint64_t v259 = v9;
          Swift::UInt v142 = *(void *)(v138 + 40);
          Swift::UInt v143 = *(void *)(v138 + 48);
          unsigned int v144 = *(unsigned __int8 *)(v138 + 56);
          uint64_t v250 = v132 + 1;
          v261[5] = v132 + 1;
          if (*(void *)(v20 + 16))
          {
            Hasher.init(_seed:)();
            Hasher._combine(_:)(1uLL);
            Hasher._combine(_:)(v142);
            if (v144)
            {
              Swift::UInt v145 = 0;
            }
            else
            {
              Hasher._combine(_:)(1uLL);
              Swift::UInt v145 = v143;
            }
            Hasher._combine(_:)(v145);
            Swift::Int v146 = Hasher._finalize()();
            uint64_t v147 = -1 << *(unsigned char *)(v20 + 32);
            unint64_t v148 = v146 & ~v147;
            if ((*(void *)(v137 + ((v148 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v148))
            {
              uint64_t v149 = ~v147;
              do
              {
                uint64_t v150 = *(void *)(v20 + 48) + 24 * v148;
                if ((*(unsigned char *)(v150 + 17) & 1) == 0 && *(void *)v150 == v142)
                {
                  if (*(unsigned char *)(v150 + 16))
                  {
                    if (v144) {
                      goto LABEL_148;
                    }
                  }
                  else if ((v144 & 1) == 0 && *(void *)(v150 + 8) == v143)
                  {
LABEL_148:
                    swift_bridgeObjectRetain();
                    sub_100063FAC(v141, v140, v139);
                    uint64_t v157 = v20;
                    goto LABEL_150;
                  }
                }
                unint64_t v148 = (v148 + 1) & v149;
              }
              while (((*(void *)(v137 + ((v148 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v148) & 1) != 0);
            }
            uint64_t v264 = v20;
            if (*(void *)(v20 + 16))
            {
              Hasher.init(_seed:)();
              Hasher._combine(_:)(1uLL);
              Hasher._combine(_:)(v142);
              if (v144)
              {
                Swift::UInt v151 = 0;
              }
              else
              {
                Hasher._combine(_:)(1uLL);
                Swift::UInt v151 = v143;
              }
              Hasher._combine(_:)(v151);
              Swift::Int v152 = Hasher._finalize()();
              uint64_t v153 = -1 << *(unsigned char *)(v20 + 32);
              unint64_t v154 = v152 & ~v153;
              if ((*(void *)(v137 + ((v154 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v154))
              {
                uint64_t v155 = ~v153;
                do
                {
                  uint64_t v156 = *(void *)(v20 + 48) + 24 * v154;
                  if ((*(unsigned char *)(v156 + 17) & 1) == 0 && *(void *)v156 == v142)
                  {
                    if (*(unsigned char *)(v156 + 16))
                    {
                      if (v144) {
                        goto LABEL_148;
                      }
                    }
                    else if ((v144 & 1) == 0 && *(void *)(v156 + 8) == v143)
                    {
                      goto LABEL_148;
                    }
                  }
                  unint64_t v154 = (v154 + 1) & v155;
                }
                while (((*(void *)(v137 + ((v154 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v154) & 1) != 0);
              }
            }
          }
          else
          {
            uint64_t v264 = v20;
          }
          swift_bridgeObjectRetain();
          sub_100063FAC(v141, v140, v139);
          sub_100061630((uint64_t)&v265, v142, v143, v144);
          uint64_t v157 = v264;
LABEL_150:
          sub_10006FEB8((uint64_t)v323, (uint64_t)&v315);
          uint64_t v158 = v317;
          if (v317 < 0) {
            v317 &= ~0x8000000000000000;
          }
          uint64_t v159 = v315;
          uint64_t v160 = v316;
          sub_1000319B8(v315, v316, v158);
          a6(v157, v159, v160, v158, v141, v140, a8);
          if (v259) {
            break;
          }
          sub_10006FDE4(v141, v140, v139);
          sub_10002ECB8(v159, v160, v158);
          sub_10005F4C8(v157);
          uint64_t v161 = sub_10006532C(v248);
          if (v161 <= v132) {
            goto LABEL_286;
          }
          uint64_t v136 = v161;
          sub_10007E9C0(v250, v248);
          sub_10007E9C0(v136, v248);
          uint64_t v20 = v252;
          if (v136 < 0) {
            goto LABEL_287;
          }
          uint64_t v9 = 0;
          ++v132;
          if (v250 == v136) {
            return swift_bridgeObjectRelease();
          }
        }
        sub_10002ECB8(v159, v160, v158);
        swift_bridgeObjectRelease();
        sub_10006FDE4(v141, v140, v139);
        return swift_bridgeObjectRelease();
      }
    case 4:
      (*(void (**)(uint64_t, uint64_t))(a1 + 176))(v20, a8);
      if (v8) {
        return swift_bridgeObjectRelease();
      }
      sub_10006FEB8((uint64_t)v323, (uint64_t)&v308);
      if (v309 < 0)
      {
        v309 &= ~0x8000000000000000;
        uint64_t v126 = v311;
        uint64_t v258 = v310;
        swift_bridgeObjectRetain();
        sub_1000319B8(v14, v15, v260);
        a6(v20, v14, v15, v260, v258, v126, a8);
        swift_bridgeObjectRelease();
        sub_10002ECB8(v14, v15, v260);
        uint64_t v223 = swift_bridgeObjectRetain();
        sub_10005F4C8(v223);
      }
      else
      {
        sub_10006FF14(&v308, &v312);
        if (sub_100065C50() && (a5 & 0x100) == 0 && (a5 & 1) == 0 && !a4)
        {
          uint64_t v74 = v261[6];
          sub_10005FA68(a3, 1, v74);
          unint64_t v75 = v74 + 16 * a3;
          uint64_t v77 = *(void *)(v75 + 32);
          unint64_t v76 = *(void *)(v75 + 40);
          swift_bridgeObjectRetain();
          sub_100034DE0(2uLL, v77, v76);
          swift_bridgeObjectRelease();
          uint64_t v78 = static String._fromSubstring(_:)();
          uint64_t v80 = v79;
          swift_bridgeObjectRelease();
          uint64_t v265 = v78;
          uint64_t v266 = v80;
          uint64_t v81 = sub_1000762F0(a3, 0, 1, v20);
          sub_1000319B8(v14, v15, v260);
          uint64_t v82 = String.init<A>(_:)();
          a6(v81, v14, v15, v260, v82, v83, a8);
          swift_bridgeObjectRelease();
          sub_10006FF70(v323);
          sub_10005F4C8(v81);
          uint64_t v84 = swift_bridgeObjectRetain();
          sub_100072F7C(v84);
          swift_bridgeObjectRelease();
          long long v85 = v261;
          goto LABEL_253;
        }
      }
      long long v85 = v261;
LABEL_253:
      uint64_t v224 = v85[4];
      uint64_t v225 = v85[5];
      uint64_t v226 = sub_10007FC4C(a3, a4, a5 & 0x1FF, v224, v225);
      if (v227) {
        return swift_bridgeObjectRelease();
      }
      uint64_t v228 = v226;
      uint64_t v251 = v20 + 56;
      while (1)
      {
        uint64_t v229 = sub_10006532C(v224);
        if (v229 < v225) {
          goto LABEL_291;
        }
        uint64_t v230 = v229;
        sub_10007E9C0(v225, v224);
        sub_10007E9C0(v230, v224);
        if (v230 < 0) {
          goto LABEL_292;
        }
        if (v230 < v228) {
          goto LABEL_293;
        }
        if (v228 < v225) {
          goto LABEL_294;
        }
        if (v228 == v230) {
          return swift_bridgeObjectRelease();
        }
        for (uint64_t i = (unsigned char *)(v224 + (v228 << 6) + 88); ; i += 64)
        {
          if (v228 >= v230)
          {
            __break(1u);
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            __break(1u);
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
LABEL_291:
            __break(1u);
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
LABEL_295:
            __break(1u);
LABEL_296:
            __break(1u);
            JUMPOUT(0x10006D0F0);
          }
          if (*i == 1) {
            break;
          }
          if (v230 == ++v228) {
            return swift_bridgeObjectRelease();
          }
        }
        unint64_t v233 = *((void *)i - 2);
        Swift::UInt v232 = *((void *)i - 1);
        sub_10007E504(v233, v232, 1);
        uint64_t v234 = v261[6];
        sub_10005FA68(v233, 1, v234);
        unint64_t v235 = v234 + 16 * v233;
        uint64_t v236 = *(void *)(v235 + 40);
        uint64_t v255 = *(void *)(v235 + 32);
        if (*(void *)(v20 + 16)
          && (Hasher.init(_seed:)(),
              Hasher._combine(_:)(1uLL),
              Hasher._combine(_:)(v233),
              Hasher._combine(_:)(0),
              Swift::Int v237 = Hasher._finalize()(),
              uint64_t v238 = -1 << *(unsigned char *)(v20 + 32),
              unint64_t v239 = v237 & ~v238,
              ((*(void *)(v251 + ((v239 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v239) & 1) != 0))
        {
          uint64_t v240 = ~v238;
          while (1)
          {
            uint64_t v241 = *(void *)(v20 + 48) + 24 * v239;
            if (*(unsigned char *)(v241 + 17) & 1) == 0 && *(void *)v241 == v233 && (*(unsigned char *)(v241 + 16)) {
              break;
            }
            unint64_t v239 = (v239 + 1) & v240;
            if (((*(void *)(v251 + ((v239 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v239) & 1) == 0) {
              goto LABEL_275;
            }
          }
LABEL_276:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v254 = v20;
        }
        else
        {
LABEL_275:
          if (sub_10006F550(v233, v232, 1, v20)) {
            goto LABEL_276;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_100061630((uint64_t)&v265, v233, v232, 1u);
          uint64_t v254 = v20;
        }
        uint64_t v243 = v236;
        uint64_t v253 = v20;
        sub_10006FEB8((uint64_t)v323, (uint64_t)&v305);
        uint64_t v244 = v307;
        if (v307 < 0) {
          v307 &= ~0x8000000000000000;
        }
        uint64_t v246 = v305;
        uint64_t v245 = v306;
        sub_1000319B8(v305, v306, v244);
        a6(v254, v246, v245, v244, v255, v243, a8);
        swift_bridgeObjectRelease();
        sub_10002ECB8(v246, v245, v244);
        sub_10005F4C8(v254);
        uint64_t v224 = v261[4];
        uint64_t v225 = v261[5];
        uint64_t v228 = sub_10007FC4C(a3, a4, a5 & 0x1FF, v224, v225);
        uint64_t v20 = v253;
        if (v247) {
          return swift_bridgeObjectRelease();
        }
      }
    case 5:
    case 6:
      swift_bridgeObjectRelease();
      sub_10002FDE0();
      swift_allocError();
      *(void *)uint64_t v21 = 3;
      *(_OWORD *)(v21 + 8) = 0u;
      *(_OWORD *)(v21 + 24) = 0u;
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)(v21 + 56) = 0u;
      *(void *)(v21 + 72) = 0;
      *(unsigned char *)(v21 + 80) = 15;
      return swift_willThrow();
    default:
      sub_10006FEB8((uint64_t)v323, (uint64_t)&v278);
      if (v279 < 0)
      {
        v279 &= ~0x8000000000000000;
        uint64_t v110 = v280;
        uint64_t v109 = v281;
        swift_bridgeObjectRetain();
        sub_1000319B8(v14, v15, v260);
        a6(v20, v14, v15, v260, v110, v109, a8);
        if (v8)
        {
          uint64_t v111 = v14;
          uint64_t v112 = v15;
          unsigned __int8 v113 = v260;
          goto LABEL_90;
        }
        swift_bridgeObjectRelease();
        uint64_t v119 = v14;
        uint64_t v120 = v15;
        unsigned __int8 v121 = v260;
LABEL_106:
        sub_10002ECB8(v119, v120, v121);
LABEL_227:
        uint64_t v168 = v20;
        return sub_10005F4C8(v168);
      }
      sub_10006FF14(&v278, &v282);
      if (!sub_100065C50() || (a5 & 0x100) != 0 || (a5 & 1) != 0 || a4)
      {
        sub_10007C734(a3, a4, a5 & 0x1FF, (uint64_t)v267);
        sub_10002B998((uint64_t)v267, (uint64_t)&v272, &qword_1000C5BB0);
        uint64_t v86 = v277;
        if (!v277)
        {
LABEL_81:
          sub_10002FDE0();
          swift_allocError();
          *(void *)uint64_t v105 = v20;
          *(void *)(v105 + 8) = v14;
          unsigned __int8 v106 = v260;
          *(void *)(v105 + 16) = v15;
          *(void *)(v105 + 24) = v260;
          *(_OWORD *)(v105 + 32) = 0u;
          *(_OWORD *)(v105 + 48) = 0u;
          *(_OWORD *)(v105 + 64) = 0u;
          *(unsigned char *)(v105 + 80) = 7;
          uint64_t v107 = v14;
          uint64_t v108 = v15;
          goto LABEL_160;
        }
        Swift::UInt v87 = v272;
        Swift::UInt v88 = v273;
        uint64_t v89 = v276;
        uint64_t v90 = v20;
        int v91 = v274 | (v275 << 8);
        if (sub_10006F550(v272, v273, v274 | (unsigned __int16)(v275 << 8), v90))
        {
          uint64_t v92 = v90;
        }
        else
        {
          uint64_t v92 = v90;
          if ((sub_10006F550(v87, v88, v91, v90) & 1) == 0)
          {
            sub_100061630((uint64_t)&v265, v87, v88, v91);
            uint64_t v92 = v90;
          }
        }
        sub_1000319B8(v14, v15, v260);
        a6(v92, v14, v15, v260, v89, v86, a8);
        if (v8)
        {
          sub_10006FF70(v323);
          swift_bridgeObjectRelease();
          return sub_10006FFA4((uint64_t)v267);
        }
        char v167 = v267;
LABEL_165:
        sub_10006FFA4((uint64_t)v167);
        sub_10006FF70(v323);
        uint64_t v168 = v92;
        return sub_10005F4C8(v168);
      }
      uint64_t v256 = v8;
      uint64_t v22 = v261[6];
      sub_10005FA68(a3, 1, v22);
      unint64_t v23 = v22 + 16 * a3;
      uint64_t v25 = *(void *)(v23 + 32);
      unint64_t v24 = *(void *)(v23 + 40);
      swift_bridgeObjectRetain();
      sub_100034DE0(2uLL, v25, v24);
      swift_bridgeObjectRelease();
      uint64_t v26 = static String._fromSubstring(_:)();
      uint64_t v28 = v27;
      swift_bridgeObjectRelease();
      if (!*(void *)(v20 + 16)) {
        goto LABEL_176;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(a3);
      Hasher._combine(_:)(0);
      Swift::Int v29 = Hasher._finalize()();
      uint64_t v30 = -1 << *(unsigned char *)(v20 + 32);
      unint64_t v31 = v29 & ~v30;
      uint64_t v32 = v20 + 56;
      if ((*(void *)(v20 + 56 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31))
      {
        uint64_t v33 = ~v30;
        while (1)
        {
          uint64_t v34 = *(void *)(v20 + 48) + 24 * v31;
          if (*(unsigned char *)(v34 + 17) & 1) == 0 && *(void *)v34 == a3 && (*(unsigned char *)(v34 + 16)) {
            break;
          }
          unint64_t v31 = (v31 + 1) & v33;
          if (((*(void *)(v32 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) == 0) {
            goto LABEL_166;
          }
        }
      }
      else
      {
LABEL_166:
        if (*(void *)(v20 + 16)
          && (Hasher.init(_seed:)(),
              Hasher._combine(_:)(1uLL),
              Hasher._combine(_:)(a3),
              Hasher._combine(_:)(0),
              Swift::Int v169 = Hasher._finalize()(),
              uint64_t v170 = -1 << *(unsigned char *)(v20 + 32),
              unint64_t v171 = v169 & ~v170,
              ((*(void *)(v32 + ((v171 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v171) & 1) != 0))
        {
          uint64_t v172 = ~v170;
          while (1)
          {
            uint64_t v173 = *(void *)(v20 + 48) + 24 * v171;
            if (*(unsigned char *)(v173 + 17) & 1) == 0 && *(void *)v173 == a3 && (*(unsigned char *)(v173 + 16)) {
              break;
            }
            unint64_t v171 = (v171 + 1) & v172;
            if (((*(void *)(v32 + ((v171 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v171) & 1) == 0) {
              goto LABEL_176;
            }
          }
        }
        else
        {
LABEL_176:
          Hasher.init(_seed:)();
          Hasher._combine(_:)(1uLL);
          Hasher._combine(_:)(a3);
          Hasher._combine(_:)(0);
          Swift::Int v175 = Hasher._finalize()();
          uint64_t v176 = -1 << *(unsigned char *)(v20 + 32);
          unint64_t v177 = v175 & ~v176;
          if ((*(void *)(v20 + 56 + ((v177 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v177))
          {
            uint64_t v178 = ~v176;
            while (1)
            {
              uint64_t v179 = *(void *)(v20 + 48) + 24 * v177;
              if (*(unsigned char *)(v179 + 17) & 1) == 0 && *(void *)v179 == a3 && (*(unsigned char *)(v179 + 16)) {
                break;
              }
              unint64_t v177 = (v177 + 1) & v178;
              if (((*(void *)(v20 + 56 + ((v177 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v177) & 1) == 0) {
                goto LABEL_223;
              }
            }
          }
          else
          {
LABEL_223:
            char v203 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v265 = v20;
            sub_1000628D8(a3, 0, 1, v177, v203);
            swift_bridgeObjectRelease();
          }
        }
      }
LABEL_224:
      uint64_t v265 = v26;
      uint64_t v266 = v28;
      sub_1000319B8(v14, v15, v260);
      uint64_t v204 = String.init<A>(_:)();
      a6(v20, v14, v15, v260, v204, v205, a8);
      if (v256)
      {
        swift_bridgeObjectRelease();
        sub_10006FF70(v323);
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      sub_10006FF70(v323);
      goto LABEL_227;
  }
}

uint64_t sub_10006D10C(Swift::UInt a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 < a2) {
    goto LABEL_211;
  }
  unint64_t v9 = a2;
  if (a2 < 0)
  {
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
    goto LABEL_214;
  }
  Swift::UInt v6 = a1;
  uint64_t v161 = v5;
  uint64_t v12 = *(void *)(v4 + 16);
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v153 = v4;
  if (!v13) {
    goto LABEL_17;
  }
  long long v14 = *(_OWORD *)(v12 + 176);
  long long v183 = *(_OWORD *)(v12 + 160);
  long long v184 = v14;
  long long v15 = *(_OWORD *)(v12 + 208);
  long long v185 = *(_OWORD *)(v12 + 192);
  long long v186 = v15;
  long long v16 = *(_OWORD *)(v12 + 112);
  long long v179 = *(_OWORD *)(v12 + 96);
  long long v180 = v16;
  long long v17 = *(_OWORD *)(v12 + 144);
  long long v181 = *(_OWORD *)(v12 + 128);
  long long v182 = v17;
  long long v18 = *(_OWORD *)(v12 + 48);
  long long v175 = *(_OWORD *)(v12 + 32);
  long long v176 = v18;
  long long v19 = *(_OWORD *)(v12 + 80);
  long long v177 = *(_OWORD *)(v12 + 64);
  long long v178 = v19;
  for (uint64_t i = (long long *)(v12 + 224); ; i += 12)
  {
    --v13;
    if (!(void)v175 && (BYTE8(v175) & 2) != 0 && BYTE1(v184) == 5) {
      break;
    }
    if (!v13) {
      goto LABEL_17;
    }
    long long v21 = *i;
    long long v22 = i[1];
    long long v23 = i[3];
    long long v177 = i[2];
    long long v178 = v23;
    long long v175 = v21;
    long long v176 = v22;
    long long v24 = i[4];
    long long v25 = i[5];
    long long v26 = i[7];
    long long v181 = i[6];
    long long v182 = v26;
    long long v179 = v24;
    long long v180 = v25;
    long long v27 = i[8];
    long long v28 = i[9];
    long long v29 = i[11];
    long long v185 = i[10];
    long long v186 = v29;
    long long v183 = v27;
    long long v184 = v28;
  }
  if (BYTE8(v185) == 1)
  {
    unint64_t v8 = *((void *)&v184 + 1);
    Swift::UInt v7 = v185;
    Swift::UInt v150 = a1 + 32;
    uint64_t v30 = sub_10006FBBC(a1 + 32, a2, (2 * v11) | 1);
    uint64_t v4 = v31;
    sub_10002E940((uint64_t)&v175);
    sub_10002EA98();
    if (v4)
    {
      sub_10002EC54();
      sub_10002EAFC((uint64_t)&v175);
      uint64_t v30 = v11;
    }
    else
    {
      uint64_t v32 = v30 + 1;
      if (__OFADD__(v30, 1)) {
        goto LABEL_221;
      }
      if (v11 < v32) {
        goto LABEL_222;
      }
      if (v32 < (uint64_t)v9) {
        goto LABEL_223;
      }
      if (v32 != v11)
      {
        Swift::UInt v157 = v6;
        swift_bridgeObjectRetain();
        unint64_t v146 = v8;
        Swift::UInt v148 = v7;
        Swift::UInt v6 = v30 + 1;
        while (1)
        {
          if ((uint64_t)v6 >= v11) {
            goto LABEL_215;
          }
          Swift::UInt v164 = v6;
          Swift::UInt v100 = v150 + (v6 << 6);
          unint64_t v101 = *(void *)(v100 + 16);
          if ((v101 & 0x6000000000000000) != 0x2000000000000000) {
            goto LABEL_227;
          }
          uint64_t v102 = *(void *)(v100 + 8);
          unint64_t v166 = *(void *)v100;
          Swift::UInt v6 = *(void *)(v100 + 40);
          Swift::UInt v103 = *(void *)(v100 + 48);
          int v104 = *(unsigned __int8 *)(v100 + 56);
          sub_10006FFD0();
          uint64_t v156 = v102;
          swift_bridgeObjectRetain();
          Swift::UInt v7 = Set.init(minimumCapacity:)();
          Hasher.init(_seed:)();
          Hasher._combine(_:)(1uLL);
          Hasher._combine(_:)(v6);
          LODWORD(v193) = v104;
          unint64_t v155 = v101;
          if (v104)
          {
            uint64_t v105 = v103;
            Swift::UInt v106 = 0;
          }
          else
          {
            Hasher._combine(_:)(1uLL);
            uint64_t v105 = v103;
            Swift::UInt v106 = v103;
          }
          Hasher._combine(_:)(v106);
          Swift::Int v107 = Hasher._finalize()();
          uint64_t v108 = -1 << *(unsigned char *)(v7 + 32);
          unint64_t v8 = v107 & ~v108;
          int v109 = v193;
          if ((*(void *)(v7 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
          {
            uint64_t v110 = ~v108;
            unint64_t v111 = v166;
            uint64_t v4 = v105;
            unint64_t v10 = 24;
            while (1)
            {
              uint64_t v112 = *(void *)(v7 + 48) + 24 * v8;
              if ((*(unsigned char *)(v112 + 17) & 1) == 0 && *(void *)v112 == v6)
              {
                if (*(unsigned char *)(v112 + 16))
                {
                  if (v193) {
                    goto LABEL_127;
                  }
                }
                else if ((v193 & 1) == 0 && *(void *)(v112 + 8) == v4)
                {
LABEL_127:
                  unint64_t v10 = v146;
                  uint64_t v4 = v148;
                  Swift::UInt v113 = v164;
                  goto LABEL_150;
                }
              }
              unint64_t v8 = (v8 + 1) & v110;
              if (((*(void *)(v7 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
                goto LABEL_129;
              }
            }
          }
          uint64_t v4 = v105;
          unint64_t v10 = 24;
LABEL_129:
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          Swift::UInt v171 = v7;
          if (*(void *)(v7 + 24) <= *(void *)(v7 + 16))
          {
            if (isUniquelyReferenced_nonNull_native) {
              sub_100061FBC();
            }
            else {
              sub_100063454();
            }
            Swift::UInt v7 = v171;
            Hasher.init(_seed:)();
            Hasher._combine(_:)(1uLL);
            Hasher._combine(_:)(v6);
            if (v109)
            {
              Swift::UInt v115 = 0;
            }
            else
            {
              Hasher._combine(_:)(1uLL);
              Swift::UInt v115 = v4;
            }
            Hasher._combine(_:)(v115);
            Swift::Int v116 = Hasher._finalize()();
            uint64_t v117 = -1 << *(unsigned char *)(v171 + 32);
            unint64_t v8 = v116 & ~v117;
            if ((*(void *)(v171 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
            {
              uint64_t v118 = ~v117;
              do
              {
                uint64_t v119 = *(void *)(v171 + 48) + 24 * v8;
                if ((*(unsigned char *)(v119 + 17) & 1) == 0 && *(void *)v119 == v6)
                {
                  if (*(unsigned char *)(v119 + 16))
                  {
                    if (v109) {
                      goto LABEL_228;
                    }
                  }
                  else if ((v109 & 1) == 0 && *(void *)(v119 + 8) == v4)
                  {
                    goto LABEL_228;
                  }
                }
                unint64_t v8 = (v8 + 1) & v118;
              }
              while (((*(void *)(v171 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
            }
          }
          else if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100062DB8();
            LOBYTE(v109) = v193;
            Swift::UInt v7 = v171;
          }
          *(void *)(v7 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v8;
          uint64_t v120 = *(void *)(v7 + 48) + 24 * v8;
          *(void *)uint64_t v120 = v6;
          *(void *)(v120 + 8) = v4;
          *(unsigned char *)(v120 + 16) = v109;
          *(unsigned char *)(v120 + 17) = 0;
          uint64_t v121 = *(void *)(v7 + 16);
          BOOL v78 = __OFADD__(v121, 1);
          uint64_t v122 = v121 + 1;
          if (v78) {
            goto LABEL_219;
          }
          *(void *)(v7 + 16) = v122;
          swift_bridgeObjectRelease();
          unint64_t v10 = v146;
          uint64_t v4 = v148;
          Swift::UInt v113 = v164;
          unint64_t v111 = v166;
LABEL_150:
          unint64_t v8 = v111;
          ((void (*)(Swift::UInt, void, void, uint64_t, unint64_t, uint64_t, void *))v10)(v7, 0, 0, 254, v111, v156, a4);
          if (v5) {
            break;
          }
          Swift::UInt v6 = v113 + 1;
          swift_bridgeObjectRelease();
          sub_10006FDE4(v8, v156, v155);
          if (v6 == v11)
          {
            Swift::UInt v6 = v157;
            swift_bridgeObjectRelease();
            goto LABEL_153;
          }
        }
        swift_bridgeObjectRelease();
        sub_10002EC54();
        swift_bridgeObjectRelease();
        sub_10006FDE4(v8, v156, v155);
        return sub_10002EAFC((uint64_t)&v175);
      }
LABEL_153:
      sub_10002EC54();
      sub_10002EAFC((uint64_t)&v175);
    }
    uint64_t v4 = v153;
    if (v30 < (uint64_t)v9) {
      goto LABEL_155;
    }
  }
  else
  {
LABEL_17:
    uint64_t v30 = v11;
    if (v11 < a2)
    {
LABEL_155:
      __break(1u);
      goto LABEL_156;
    }
  }
  if (v11 < v30) {
    goto LABEL_213;
  }
  uint64_t v11 = (uint64_t)_swiftEmptyArrayStorage;
  unint64_t v8 = v30 - v9;
  if (v30 != v9)
  {
    if (v30 > (uint64_t)v9)
    {
      swift_bridgeObjectRetain();
      unint64_t v10 = v6 + (v9 << 6) + 48;
      do
      {
        if (*(unsigned char *)(v10 + 40) == 1)
        {
          Swift::UInt v6 = *(void *)(v10 - 8);
          unint64_t v36 = *(void *)v10;
          unint64_t v9 = *(void *)(v10 + 8);
          uint64_t v162 = *(void *)(v10 + 32);
          long long v165 = *(_OWORD *)(v10 + 16);
          uint64_t v193 = *(void *)(v10 - 16);
          sub_100063FAC(v193, v6, v36);
          char v37 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v175 = v11;
          if ((v37 & 1) == 0)
          {
            sub_100057038(0, *(void *)(v11 + 16) + 1, 1);
            uint64_t v11 = v175;
          }
          unint64_t v34 = *(void *)(v11 + 16);
          unint64_t v33 = *(void *)(v11 + 24);
          if (v34 >= v33 >> 1)
          {
            sub_100057038((char *)(v33 > 1), v34 + 1, 1);
            uint64_t v11 = v175;
          }
          *(void *)(v11 + 16) = v34 + 1;
          uint64_t v35 = v11 + (v34 << 6);
          *(void *)(v35 + 32) = v193;
          *(void *)(v35 + 40) = v6;
          *(void *)(v35 + 48) = v36;
          *(void *)(v35 + 56) = v9;
          *(_OWORD *)(v35 + 64) = v165;
          *(void *)(v35 + 80) = v162;
          *(unsigned char *)(v35 + 88) = 1;
        }
        v10 += 64;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      uint64_t v4 = v153;
      goto LABEL_30;
    }
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
    while (1)
    {
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      swift_unknownObjectRelease();
LABEL_110:
      sub_100056CCC(v4, v11, v6, v10);
      uint64_t v11 = v99;
LABEL_162:
      uint64_t v193 = v8;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a4[2] = v11;
      a4[3] = 0;
      a4[4] = _swiftEmptyArrayStorage;
      int64_t v125 = v173;
      int64_t v126 = v174 >> 1;
      if (v173 == v174 >> 1) {
        break;
      }
      unint64_t v8 = 24;
      Swift::UInt v158 = v7;
      while (v125 < v126)
      {
        Swift::UInt v6 = v9;
        uint64_t v127 = v172 + (v125 << 6);
        Swift::UInt v7 = *(void *)(v127 + 40);
        unint64_t v9 = *(void *)(v127 + 48);
        int v128 = *(unsigned __int8 *)(v127 + 56);
        Swift::UInt v173 = v125 + 1;
        if ((v7 & 0x8000000000000000) != 0) {
          goto LABEL_217;
        }
        if (v7 >= *(void *)(a3 + 16)) {
          goto LABEL_218;
        }
        uint64_t v129 = (uint64_t *)(a3 + 32 + 16 * v7);
        uint64_t v131 = *v129;
        uint64_t v130 = v129[1];
        sub_10006FFD0();
        swift_bridgeObjectRetain();
        uint64_t v11 = Set.init(minimumCapacity:)();
        Hasher.init(_seed:)();
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(v7);
        uint64_t v167 = v131;
        if (v128)
        {
          Swift::UInt v132 = 0;
        }
        else
        {
          Hasher._combine(_:)(1uLL);
          Swift::UInt v132 = v9;
        }
        Hasher._combine(_:)(v132);
        uint64_t v4 = (uint64_t)v169;
        Swift::Int v133 = Hasher._finalize()();
        uint64_t v134 = -1 << *(unsigned char *)(v11 + 32);
        unint64_t v10 = v133 & ~v134;
        if ((*(void *)(v11 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
        {
          uint64_t v135 = ~v134;
          do
          {
            uint64_t v136 = *(void *)(v11 + 48) + 24 * v10;
            if ((*(unsigned char *)(v136 + 17) & 1) == 0 && *(void *)v136 == v7)
            {
              if (*(unsigned char *)(v136 + 16))
              {
                if (v128) {
                  goto LABEL_201;
                }
              }
              else if ((v128 & 1) == 0 && *(void *)(v136 + 8) == v9)
              {
                goto LABEL_201;
              }
            }
            unint64_t v10 = (v10 + 1) & v135;
          }
          while (((*(void *)(v11 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
        }
        int v137 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v168 = v11;
        if (*(void *)(v11 + 24) <= *(void *)(v11 + 16))
        {
          if (v137) {
            sub_100061FBC();
          }
          else {
            sub_100063454();
          }
          uint64_t v11 = v168;
          Hasher.init(_seed:)();
          Hasher._combine(_:)(1uLL);
          Hasher._combine(_:)(v7);
          if (v128)
          {
            Swift::UInt v138 = 0;
          }
          else
          {
            Hasher._combine(_:)(1uLL);
            Swift::UInt v138 = v9;
          }
          Hasher._combine(_:)(v138);
          uint64_t v4 = (uint64_t)v169;
          Swift::Int v139 = Hasher._finalize()();
          uint64_t v140 = -1 << *(unsigned char *)(v11 + 32);
          unint64_t v10 = v139 & ~v140;
          if ((*(void *)(v11 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
          {
            uint64_t v141 = ~v140;
            do
            {
              uint64_t v142 = *(void *)(v11 + 48) + 24 * v10;
              if ((*(unsigned char *)(v142 + 17) & 1) == 0 && *(void *)v142 == v7)
              {
                if (*(unsigned char *)(v142 + 16))
                {
                  if (v128) {
                    goto LABEL_228;
                  }
                }
                else if ((v128 & 1) == 0 && *(void *)(v142 + 8) == v9)
                {
                  goto LABEL_228;
                }
              }
              unint64_t v10 = (v10 + 1) & v141;
            }
            while (((*(void *)(v11 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
          }
        }
        else if ((v137 & 1) == 0)
        {
          uint64_t v4 = (uint64_t)&v168;
          sub_100062DB8();
          uint64_t v11 = v168;
        }
        *(void *)(v11 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v10;
        uint64_t v143 = *(void *)(v11 + 48) + 24 * v10;
        *(void *)uint64_t v143 = v7;
        *(void *)(v143 + 8) = v9;
        *(unsigned char *)(v143 + 16) = v128;
        *(unsigned char *)(v143 + 17) = 0;
        uint64_t v144 = *(void *)(v11 + 16);
        BOOL v78 = __OFADD__(v144, 1);
        uint64_t v145 = v144 + 1;
        if (v78) {
          goto LABEL_220;
        }
        *(void *)(v11 + 16) = v145;
        swift_bridgeObjectRelease();
LABEL_201:
        Swift::UInt v7 = v158;
        unint64_t v9 = v6;
        uint64_t v4 = v193;
        ((void (*)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, void *))v6)(v11, 0, 0, 254, v167, v130, a4);
        if (v161)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10002EC54();
          sub_10002EAFC((uint64_t)&v175);
          swift_unknownObjectRelease();
          return swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int64_t v125 = v173;
        int64_t v126 = v174 >> 1;
        if (v173 == v174 >> 1) {
          goto LABEL_203;
        }
      }
    }
LABEL_203:
    sub_10002EC54();
    sub_10002EAFC((uint64_t)&v175);
LABEL_204:
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
LABEL_30:
  uint64_t v38 = *(void *)(v11 + 16);
  Swift::UInt v171 = v11;
  uint64_t v172 = v11 + 32;
  Swift::UInt v173 = 0;
  unint64_t v174 = (2 * v38) | 1;
  if (!v38) {
    return swift_release();
  }
  uint64_t v39 = *(void *)(v4 + 16);
  if (!*(void *)(v39 + 16))
  {
    Swift::UInt v7 = (Swift::UInt)&_swiftEmptySetSingleton;
    goto LABEL_100;
  }
  uint64_t v4 = v39 + 32;
  uint64_t v151 = *(void *)(v39 + 16);
  uint64_t v152 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v40 = v4;
  uint64_t v41 = v151;
  uint64_t v42 = v152;
  Swift::UInt v43 = 0;
  Swift::UInt v7 = (Swift::UInt)&_swiftEmptySetSingleton;
  uint64_t v11 = 24;
  uint64_t v147 = v4;
  while (1)
  {
    uint64_t v44 = (long long *)(v40 + 192 * v43);
    long long v45 = *v44;
    long long v46 = v44[1];
    long long v47 = v44[3];
    long long v177 = v44[2];
    long long v178 = v47;
    long long v175 = v45;
    long long v176 = v46;
    long long v48 = v44[4];
    long long v49 = v44[5];
    long long v50 = v44[7];
    long long v181 = v44[6];
    long long v182 = v50;
    long long v179 = v48;
    long long v180 = v49;
    long long v51 = v44[8];
    long long v52 = v44[9];
    long long v53 = v44[11];
    long long v185 = v44[10];
    long long v186 = v53;
    long long v183 = v51;
    long long v184 = v52;
    if (!(void)v175)
    {
      int v163 = BYTE1(v184);
      if ((BYTE1(v184) | 4) == 4) {
        break;
      }
    }
LABEL_34:
    if (++v43 == v41)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_99;
    }
    if (v43 >= *(void *)(v42 + 16)) {
      goto LABEL_210;
    }
  }
  Swift::UInt v149 = v43;
  if (BYTE8(v185) == 1)
  {
    uint64_t v4 = *((void *)&v184 + 1);
    char v154 = BYTE8(v175);
    sub_10002E940((uint64_t)&v175);
    uint64_t v193 = v4;
    sub_10002EA98();
    while (1)
    {
      sub_10006E400(v163 == 4, &v171, (uint64_t)v187);
      sub_10002B998((uint64_t)v187, (uint64_t)v188, &qword_1000C5BC0);
      if ((v189 & 0x7FFFFFFFFFFFFF3ELL) == 0x7FFFFFF3ELL) {
        break;
      }
      Swift::UInt v6 = v190;
      unint64_t v10 = v191;
      char v54 = v192;
      sub_100070024((uint64_t)v187);
      if ((v6 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
        goto LABEL_212;
      }
      if (v6 >= *(void *)(a3 + 16)) {
        goto LABEL_208;
      }
      unint64_t v8 = v54 & 1;
      unint64_t v55 = (uint64_t *)(a3 + 32 + 16 * v6);
      uint64_t v56 = *v55;
      uint64_t v57 = v55[1];
      sub_100003DD0(&qword_1000C56E8);
      unint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_1000A2660;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v10;
      Swift::UInt v58 = v10;
      *(_WORD *)(v9 + 48) = v8;
      swift_bridgeObjectRetain();
      unint64_t v10 = sub_100076A54(v9);
      swift_setDeallocating();
      swift_deallocClassInstance();
      ((void (*)(unint64_t, void, void, uint64_t, uint64_t, uint64_t, void *))v193)(v10, 0, 0, 254, v56, v57, a4);
      if (v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10002EC54();
        sub_10002EAFC((uint64_t)&v175);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_204;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v7 + 16))
      {
        Hasher.init(_seed:)();
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(v6);
        if (v8)
        {
          Swift::UInt v59 = 0;
        }
        else
        {
          Hasher._combine(_:)(1uLL);
          Swift::UInt v59 = v58;
        }
        Hasher._combine(_:)(v59);
        uint64_t v4 = (uint64_t)v169;
        Swift::Int v60 = Hasher._finalize()();
        uint64_t v61 = -1 << *(unsigned char *)(v7 + 32);
        unint64_t v62 = v60 & ~v61;
        if ((*(void *)(v7 + 56 + ((v62 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v62))
        {
          uint64_t v63 = ~v61;
          do
          {
            uint64_t v64 = *(void *)(v7 + 48) + 24 * v62;
            if ((*(unsigned char *)(v64 + 17) & 1) == 0 && *(void *)v64 == v6)
            {
              if (*(unsigned char *)(v64 + 16))
              {
                if (v8) {
                  goto LABEL_40;
                }
              }
              else if (!v8 && *(void *)(v64 + 8) == v58)
              {
                goto LABEL_40;
              }
            }
            unint64_t v62 = (v62 + 1) & v63;
          }
          while (((*(void *)(v7 + 56 + ((v62 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v62) & 1) != 0);
        }
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v6);
      if (v8)
      {
        Swift::UInt v65 = 0;
      }
      else
      {
        Hasher._combine(_:)(1uLL);
        Swift::UInt v65 = v58;
      }
      Hasher._combine(_:)(v65);
      uint64_t v4 = (uint64_t)v169;
      Swift::Int v66 = Hasher._finalize()();
      uint64_t v67 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v9 = v66 & ~v67;
      if ((*(void *)(v7 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
      {
        uint64_t v68 = ~v67;
        do
        {
          uint64_t v69 = *(void *)(v7 + 48) + 24 * v9;
          if ((*(unsigned char *)(v69 + 17) & 1) == 0 && *(void *)v69 == v6)
          {
            if (*(unsigned char *)(v69 + 16))
            {
              if (v8) {
                goto LABEL_40;
              }
            }
            else if (!v8 && *(void *)(v69 + 8) == v58)
            {
              goto LABEL_40;
            }
          }
          unint64_t v9 = (v9 + 1) & v68;
        }
        while (((*(void *)(v7 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
      }
      int v70 = swift_isUniquelyReferenced_nonNull_native();
      Swift::UInt v170 = v7;
      if (*(void *)(v7 + 24) <= *(void *)(v7 + 16))
      {
        if (v70) {
          sub_100061FBC();
        }
        else {
          sub_100063454();
        }
        Swift::UInt v7 = v170;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(v6);
        if (v8)
        {
          Swift::UInt v71 = 0;
        }
        else
        {
          Hasher._combine(_:)(1uLL);
          Swift::UInt v71 = v58;
        }
        Hasher._combine(_:)(v71);
        uint64_t v4 = (uint64_t)v169;
        Swift::Int v72 = Hasher._finalize()();
        uint64_t v73 = -1 << *(unsigned char *)(v7 + 32);
        unint64_t v9 = v72 & ~v73;
        if ((*(void *)(v7 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
        {
          uint64_t v74 = ~v73;
          do
          {
            uint64_t v75 = *(void *)(v7 + 48) + 24 * v9;
            if ((*(unsigned char *)(v75 + 17) & 1) == 0 && *(void *)v75 == v6)
            {
              if (*(unsigned char *)(v75 + 16))
              {
                if (v8) {
                  goto LABEL_228;
                }
              }
              else if (!v8 && *(void *)(v75 + 8) == v58)
              {
                goto LABEL_228;
              }
            }
            unint64_t v9 = (v9 + 1) & v74;
          }
          while (((*(void *)(v7 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
        }
      }
      else if ((v70 & 1) == 0)
      {
        uint64_t v4 = (uint64_t)&v170;
        sub_100062DB8();
        Swift::UInt v7 = v170;
      }
      *(void *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v9;
      uint64_t v76 = *(void *)(v7 + 48) + 24 * v9;
      *(void *)uint64_t v76 = v6;
      *(void *)(v76 + 8) = v58;
      *(unsigned char *)(v76 + 16) = v8;
      *(unsigned char *)(v76 + 17) = 0;
      uint64_t v77 = *(void *)(v7 + 16);
      BOOL v78 = __OFADD__(v77, 1);
      uint64_t v79 = v77 + 1;
      if (v78) {
        goto LABEL_209;
      }
      *(void *)(v7 + 16) = v79;
      swift_bridgeObjectRelease();
LABEL_40:
      if ((v154 & 2) == 0)
      {
        sub_10002EC54();
        sub_10002EAFC((uint64_t)&v175);
        uint64_t v41 = v151;
        uint64_t v42 = v152;
        uint64_t v40 = v147;
        Swift::UInt v43 = v149;
        goto LABEL_34;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10002EC54();
    sub_10002EAFC((uint64_t)&v175);
LABEL_99:
    uint64_t v4 = v153;
LABEL_100:
    uint64_t v81 = *(void *)(v4 + 16);
    uint64_t v82 = *(void *)(v81 + 16);
    if (v82)
    {
      long long v83 = *(_OWORD *)(v81 + 176);
      long long v183 = *(_OWORD *)(v81 + 160);
      long long v184 = v83;
      long long v84 = *(_OWORD *)(v81 + 208);
      long long v185 = *(_OWORD *)(v81 + 192);
      long long v186 = v84;
      long long v85 = *(_OWORD *)(v81 + 112);
      long long v179 = *(_OWORD *)(v81 + 96);
      long long v180 = v85;
      long long v86 = *(_OWORD *)(v81 + 144);
      long long v181 = *(_OWORD *)(v81 + 128);
      long long v182 = v86;
      long long v87 = *(_OWORD *)(v81 + 48);
      long long v175 = *(_OWORD *)(v81 + 32);
      long long v176 = v87;
      long long v88 = *(_OWORD *)(v81 + 80);
      long long v177 = *(_OWORD *)(v81 + 64);
      long long v178 = v88;
      for (j = (long long *)(v81 + 224); ; j += 12)
      {
        --v82;
        if (!(void)v175 && (BYTE8(v175) & 2) != 0 && BYTE1(v184) == 6) {
          break;
        }
        if (!v82) {
          goto LABEL_204;
        }
        long long v90 = *j;
        long long v91 = j[1];
        long long v92 = j[3];
        long long v177 = j[2];
        long long v178 = v92;
        long long v175 = v90;
        long long v176 = v91;
        long long v93 = j[4];
        long long v94 = j[5];
        long long v95 = j[7];
        long long v181 = j[6];
        long long v182 = v95;
        long long v179 = v93;
        long long v180 = v94;
        long long v96 = j[8];
        long long v97 = j[9];
        long long v98 = j[11];
        long long v185 = j[10];
        long long v186 = v98;
        long long v183 = v96;
        long long v184 = v97;
      }
      if (BYTE8(v185) == 1)
      {
        unint64_t v9 = *((void *)&v184 + 1);
        unint64_t v8 = v185;
        swift_beginAccess();
        uint64_t v4 = v171;
        uint64_t v11 = v172;
        Swift::UInt v6 = v173;
        unint64_t v10 = v174;
        if ((v174 & 1) == 0)
        {
          sub_10002E940((uint64_t)&v175);
          sub_10002EA98();
          swift_unknownObjectRetain();
          goto LABEL_110;
        }
LABEL_156:
        swift_unknownObjectRetain_n();
        sub_10002E940((uint64_t)&v175);
        sub_10002EA98();
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain();
        uint64_t v123 = (void *)swift_dynamicCastClass();
        if (!v123)
        {
          swift_unknownObjectRelease();
          uint64_t v123 = _swiftEmptyArrayStorage;
        }
        uint64_t v124 = v123[2];
        swift_release();
        if (__OFSUB__(v10 >> 1, v6)) {
          goto LABEL_224;
        }
        if (v124 != (v10 >> 1) - v6) {
          goto LABEL_225;
        }
        uint64_t v11 = swift_dynamicCastClass();
        if (!v11)
        {
          swift_unknownObjectRelease();
          uint64_t v11 = (uint64_t)_swiftEmptyArrayStorage;
        }
        goto LABEL_162;
      }
    }
    goto LABEL_204;
  }
  __break(1u);
LABEL_227:
  __break(1u);
LABEL_228:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10006E400@<X0>(char a1@<W0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = swift_beginAccess();
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3] >> 1;
  if (v7 <= v8) {
    uint64_t v9 = a2[3] >> 1;
  }
  else {
    uint64_t v9 = a2[2];
  }
  uint64_t v10 = (v7 << 6) | 0x38;
  while (1)
  {
    if (v8 == v7)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v17 = 0;
      char v18 = 0;
      long long v19 = 0uLL;
      unint64_t v15 = 0x7FFFFFF3ELL;
      goto LABEL_11;
    }
    if (v9 == v7) {
      break;
    }
    uint64_t v11 = (unsigned char *)(a2[1] + v10);
    uint64_t v12 = *((void *)v11 - 7);
    uint64_t v13 = *((void *)v11 - 6);
    unint64_t v15 = *((void *)v11 - 5);
    uint64_t v14 = *((void *)v11 - 4);
    long long v16 = *(_OWORD *)(v11 - 24);
    uint64_t v17 = *((void *)v11 - 1);
    char v18 = *v11;
    a2[2] = ++v7;
    if ((v15 & 0x6000000000000000) != 0x2000000000000000)
    {
      v10 += 64;
      if ((a1 & 1) == 0) {
        continue;
      }
    }
    long long v20 = v16;
    uint64_t result = sub_100063FAC(v12, v13, v15);
    long long v19 = v20;
LABEL_11:
    *(void *)a3 = v12;
    *(void *)(a3 + 8) = v13;
    *(void *)(a3 + 16) = v15;
    *(void *)(a3 + 24) = v14;
    *(_OWORD *)(a3 + 32) = v19;
    *(void *)(a3 + 48) = v17;
    *(unsigned char *)(a3 + 56) = v18;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006E524@<X0>(uint64_t a1@<X8>)
{
  void (*v34)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  _OWORD *v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  void (*v61)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t, unint64_t, long long *);
  uint64_t inited;
  uint64_t v75;
  Swift::UInt v76;
  Swift::Int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  Swift::UInt v82;
  Swift::Int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int isUniquelyReferenced_nonNull_native;
  Swift::UInt v89;
  Swift::UInt v90;
  Swift::Int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  Swift::UInt v117;
  Swift::UInt v118;
  uint64_t v119;
  Swift::UInt v120;
  uint64_t *v121;
  int v122;
  uint64_t v123;
  long long v124;
  uint64_t v125;
  long long v126;
  long long v127;
  long long v128;
  void *v129;
  void v130[13];
  uint64_t v131;
  uint64_t v132;
  _OWORD v133[9];
  _OWORD v134[3];
  uint64_t v135[5];
  unsigned char v136[24];
  void v137[2];
  char v138;
  uint64_t v139;

  uint64_t v3 = v2;
  uint64_t v4 = v1;
  Swift::UInt v5 = v1[4];
  uint64_t v6 = v1[6];
  uint64_t v119 = v1[5];
  uint64_t v7 = *v1;
  uint64_t v8 = v4[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_1000567E4(v7, v8))
  {
    int v9 = 1;
  }
  else
  {
    uint64_t v10 = v4[2];
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      uint64_t v12 = v11 - 1;
      uint64_t v13 = (unsigned char *)(v10 + 177);
      do
      {
        uint64_t v14 = v12;
        int v9 = (*(void *)(v13 - 145) == 0) & (*(v13 - 137) >> 1);
        if (*v13 != 4) {
          int v9 = 0;
        }
        if (v9) {
          break;
        }
        --v12;
        v13 += 192;
      }
      while (v14);
    }
    else
    {
      int v9 = 0;
    }
  }
  uint64_t v122 = v9;
  *(void *)&uint64_t v127 = sub_100083BF0((uint64_t)_swiftEmptyArrayStorage);
  *((void *)&v127 + 1) = v6;
  *(void *)&int v128 = _swiftEmptyArrayStorage;
  *((void *)&v128 + 1) = 0;
  uint64_t v129 = _swiftEmptyArrayStorage;
  uint64_t v15 = v4[2];
  swift_bridgeObjectRetain();
  sub_10006AEF4((uint64_t)&v127, v15);
  uint64_t v16 = v3;
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    _OWORD v4[4] = v5;
    v4[5] = v119;
    v4[6] = v6;
    return result;
  }
  uint64_t v114 = v6;
  uint64_t v18 = *(void *)(v5 + 16);
  if (v18 < v119)
  {
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  if (v119 < 0)
  {
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  if (v119 == v18) {
    goto LABEL_114;
  }
  uint64_t v19 = v119;
  Swift::UInt v20 = v5;
  uint64_t v120 = v5;
  uint64_t v121 = v4;
  while (1)
  {
    if (v19 >= (unint64_t)v18)
    {
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    int64_t v125 = v16;
    Swift::UInt v21 = v20 + (v19 << 6);
    uint64_t v23 = *(void *)(v21 + 32);
    uint64_t v22 = *(void *)(v21 + 40);
    unint64_t v25 = *(void *)(v21 + 48);
    uint64_t v24 = *(void *)(v21 + 56);
    uint64_t v26 = *(void *)(v21 + 64);
    unint64_t v27 = *(void *)(v21 + 72);
    Swift::UInt v28 = *(void *)(v21 + 80);
    uint64_t v29 = *(unsigned __int8 *)(v21 + 88);
    v4[5] = v19 + 1;
    uint64_t v30 = (v25 >> 61) & 3;
    if (v30) {
      break;
    }
    uint64_t v118 = v28;
    v135[0] = v23;
    v135[1] = v22;
    v135[2] = v25;
    v135[3] = v24;
    v135[4] = v26;
    uint64_t v44 = v4;
    long long v45 = v4[2];
    long long v46 = v44[3];
    long long v47 = *(void *)(v46 + 16);
    uint64_t v123 = v24;
    Swift::Int v139 = v26;
    sub_100063FAC(v23, v22, v25);
    if (v47)
    {
      sub_1000319B8(v23, v22, v25);
      long long v48 = sub_100060BB4(v23, v22, v25);
      if (v49)
      {
        long long v50 = *(void *)(*(void *)(v46 + 56) + 8 * v48);
        sub_10002ECB8(v23, v22, v25);
        if ((v50 & 0x8000000000000000) != 0) {
          goto LABEL_121;
        }
        if (v50 >= *(void *)(v45 + 16)) {
          goto LABEL_122;
        }
        long long v51 = (_OWORD *)(v45 + 192 * v50);
        long long v52 = v51[2];
        long long v53 = v51[3];
        char v54 = v51[5];
        v133[2] = v51[4];
        v133[3] = v54;
        v133[0] = v52;
        v133[1] = v53;
        unint64_t v55 = v51[6];
        uint64_t v56 = v51[7];
        uint64_t v57 = v51[9];
        v133[6] = v51[8];
        v133[7] = v57;
        v133[4] = v55;
        v133[5] = v56;
        Swift::UInt v58 = v51[10];
        Swift::UInt v59 = v51[11];
        Swift::Int v60 = v51[13];
        v134[1] = v51[12];
        v134[2] = v60;
        v133[8] = v58;
        v134[0] = v59;
        sub_10002EAA0((uint64_t)v134 + 8, (uint64_t)v136);
        sub_10002EAA0((uint64_t)v136, (uint64_t)v137);
        if (v138)
        {
          uint64_t v61 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v137[0];
          unint64_t v62 = v137[1];
          sub_10002E940((uint64_t)v133);
          sub_10006FE50((uint64_t)v136);
          uint64_t v63 = v62;
          uint64_t v4 = v121;
          sub_10006B184((uint64_t)v133, v135, v27, v118, v29, v61, v63, (uint64_t)&v127);
          sub_10006FDE4(v23, v22, v25);
          sub_10002EAFC((uint64_t)v133);
          sub_10006FE84((uint64_t)v136);
          uint64_t v64 = 0;
          Swift::UInt v5 = v120;
          goto LABEL_106;
        }
        if ((v25 & 0x8000000000000000) != 0)
        {
          sub_10002E940((uint64_t)v133);
          sub_10006FE50((uint64_t)v136);
          sub_1000319B8(v23, v22, v25);
          uint64_t v110 = v139;
          swift_bridgeObjectRetain();
          sub_10006FDE4(v23, v22, v25);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10002FDE0();
          swift_allocError();
          *(void *)unint64_t v111 = v27;
          *(void *)(v111 + 8) = v118;
          *(void *)(v111 + 16) = v29;
          *(void *)(v111 + 24) = v23;
          *(void *)(v111 + 32) = v22;
          *(void *)(v111 + 40) = v25;
          *(void *)(v111 + 48) = v123;
          *(void *)(v111 + 56) = v110;
          *(void *)(v111 + 64) = 0;
          *(void *)(v111 + 72) = 0;
          *(unsigned char *)(v111 + 80) = 8;
          swift_willThrow();
          sub_10006FE84((uint64_t)v136);
          sub_10002EAFC((uint64_t)v133);
          uint64_t v112 = swift_bridgeObjectRetain();
          sub_100072F7C(v112);
          swift_bridgeObjectRelease();
          Swift::UInt v113 = swift_bridgeObjectRetain();
          sub_10005F4C8(v113);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v121[4] = v120;
          v121[5] = v119;
          v121[6] = v114;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        uint64_t v73 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t, long long *))v137[0];
        sub_100003DD0(&qword_1000C56E8);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1000A2660;
        *(void *)(inited + 32) = v27;
        *(void *)(inited + 40) = v118;
        *(unsigned char *)(inited + 48) = v29;
        *(unsigned char *)(inited + 49) = 0;
        sub_10002E940((uint64_t)v133);
        sub_10006FE50((uint64_t)v136);
        uint64_t v75 = sub_100076A54(inited);
        swift_setDeallocating();
        v73(v75, v23, v22, v25, &v127);
        sub_10006FDE4(v23, v22, v25);
        swift_bridgeObjectRelease();
        Swift::UInt v5 = v120;
        uint64_t v4 = v121;
        uint64_t v64 = 0;
        if (*((void *)&_swiftEmptySetSingleton + 2))
        {
          Hasher.init(_seed:)();
          Hasher._combine(_:)(1uLL);
          Hasher._combine(_:)(v27);
          if (v29)
          {
            uint64_t v76 = 0;
          }
          else
          {
            Hasher._combine(_:)(1uLL);
            uint64_t v76 = v118;
          }
          Hasher._combine(_:)(v76);
          uint64_t v77 = Hasher._finalize()();
          BOOL v78 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
          uint64_t v79 = v77 & ~v78;
          if ((*(void *)((char *)&_swiftEmptySetSingleton + ((v79 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v79))
          {
            uint64_t v80 = ~v78;
            do
            {
              uint64_t v81 = *((void *)&_swiftEmptySetSingleton + 6) + 24 * v79;
              if ((*(unsigned char *)(v81 + 17) & 1) == 0 && *(void *)v81 == v27)
              {
                if (*(unsigned char *)(v81 + 16))
                {
                  if (v29) {
                    goto LABEL_69;
                  }
                }
                else if ((v29 & 1) == 0 && *(void *)(v81 + 8) == v118)
                {
LABEL_69:
                  sub_10002EAFC((uint64_t)v133);
                  sub_10006FE84((uint64_t)v136);
                  goto LABEL_106;
                }
              }
              uint64_t v79 = (v79 + 1) & v80;
            }
            while (((*(void *)((char *)&_swiftEmptySetSingleton + ((v79 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v79) & 1) != 0);
          }
        }
        Hasher.init(_seed:)();
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(v27);
        if (v29)
        {
          uint64_t v82 = 0;
        }
        else
        {
          Hasher._combine(_:)(1uLL);
          uint64_t v82 = v118;
        }
        Hasher._combine(_:)(v82);
        long long v83 = Hasher._finalize()();
        long long v84 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
        long long v85 = v83 & ~v84;
        if ((*(void *)((char *)&_swiftEmptySetSingleton + ((v85 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v85))
        {
          long long v86 = ~v84;
          do
          {
            long long v87 = *((void *)&_swiftEmptySetSingleton + 6) + 24 * v85;
            if ((*(unsigned char *)(v87 + 17) & 1) == 0 && *(void *)v87 == v27)
            {
              if (*(unsigned char *)(v87 + 16))
              {
                if (v29) {
                  goto LABEL_105;
                }
              }
              else if ((v29 & 1) == 0 && *(void *)(v87 + 8) == v118)
              {
                goto LABEL_105;
              }
            }
            long long v85 = (v85 + 1) & v86;
          }
          while (((*(void *)((char *)&_swiftEmptySetSingleton + ((v85 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v85) & 1) != 0);
        }
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if (*((void *)&_swiftEmptySetSingleton + 3) <= *((void *)&_swiftEmptySetSingleton + 2))
        {
          if (isUniquelyReferenced_nonNull_native) {
            sub_100061FBC();
          }
          else {
            sub_100063454();
          }
          Hasher.init(_seed:)();
          Hasher._combine(_:)(1uLL);
          Hasher._combine(_:)(v27);
          if (v29)
          {
            long long v90 = 0;
          }
          else
          {
            Hasher._combine(_:)(1uLL);
            long long v90 = v118;
          }
          Hasher._combine(_:)(v90);
          long long v91 = Hasher._finalize()();
          long long v92 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
          long long v85 = v91 & ~v92;
          if ((*(void *)((char *)&_swiftEmptySetSingleton + ((v85 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v85))
          {
            long long v93 = ~v92;
            do
            {
              long long v94 = *((void *)&_swiftEmptySetSingleton + 6) + 24 * v85;
              if ((*(unsigned char *)(v94 + 17) & 1) == 0 && *(void *)v94 == v27)
              {
                if (*(unsigned char *)(v94 + 16))
                {
                  if (v29) {
                    goto LABEL_124;
                  }
                }
                else if ((v29 & 1) == 0 && *(void *)(v94 + 8) == v118)
                {
                  goto LABEL_124;
                }
              }
              long long v85 = (v85 + 1) & v93;
            }
            while (((*(void *)((char *)&_swiftEmptySetSingleton + ((v85 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v85) & 1) != 0);
          }
          uint64_t v89 = v118;
        }
        else
        {
          uint64_t v89 = v118;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100062DB8();
            uint64_t v89 = v118;
          }
        }
        *(void *)((char *)&_swiftEmptySetSingleton + ((v85 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v85;
        long long v95 = *((void *)&_swiftEmptySetSingleton + 6) + 24 * v85;
        *(void *)long long v95 = v27;
        *(void *)(v95 + 8) = v89;
        *(unsigned char *)(v95 + 16) = v29;
        *(unsigned char *)(v95 + 17) = 0;
        long long v96 = *((void *)&_swiftEmptySetSingleton + 2);
        long long v97 = __OFADD__(v96, 1);
        long long v98 = v96 + 1;
        if (v97) {
          goto LABEL_123;
        }
        *((void *)&_swiftEmptySetSingleton + 2) = v98;
        swift_bridgeObjectRelease();
LABEL_105:
        sub_10002EAFC((uint64_t)v133);
        sub_10006FE84((uint64_t)v136);
        uint64_t v4 = v121;
        goto LABEL_106;
      }
      sub_10002ECB8(v23, v22, v25);
    }
    if (v122)
    {
      uint64_t v4 = v121;
      if ((v25 & 0x8000000000000080) == 0x80)
      {
        sub_1000319B8(v23, v22, v25);
        Swift::UInt v65 = sub_100069BC8();
        sub_10006FDE4(v23, v22, v25);
        Swift::Int v66 = v25;
      }
      else
      {
        Swift::Int v66 = v25;
        Swift::UInt v65 = _swiftEmptyArrayStorage;
      }
      sub_10006FDE4(v23, v22, v66);
      int v70 = v65[2];
      swift_bridgeObjectRelease();
      if (!v70)
      {
        Swift::UInt v103 = swift_bridgeObjectRetain();
        sub_100072F7C(v103);
        swift_bridgeObjectRelease();
        int v104 = swift_bridgeObjectRetain();
        sub_10005F4C8(v104);
        swift_bridgeObjectRelease();
        Swift::UInt v5 = v120;
        goto LABEL_114;
      }
      uint64_t v67 = v125;
    }
    else
    {
      sub_10006FDE4(v23, v22, v25);
      uint64_t v4 = v121;
      uint64_t v67 = v125;
    }
    Swift::UInt v5 = v120;
    Swift::UInt v71 = swift_bridgeObjectRetain();
    sub_100072F7C(v71);
    uint64_t v16 = v67;
    swift_bridgeObjectRelease();
    Swift::Int v72 = swift_bridgeObjectRetain();
    sub_10005F4C8(v72);
    swift_bridgeObjectRelease();
LABEL_107:
    Swift::UInt v20 = v4[4];
    uint64_t v19 = v4[5];
    uint64_t v18 = *(void *)(v20 + 16);
    if (v18 < v19) {
      goto LABEL_117;
    }
    if (v19 < 0) {
      goto LABEL_118;
    }
    if (v19 == v18) {
      goto LABEL_114;
    }
  }
  if (v30 != 1)
  {
    uint64_t v64 = v125;
    goto LABEL_106;
  }
  uint64_t v31 = v22;
  uint64_t v32 = *v4;
  uint64_t v33 = v4[1];
  unint64_t v34 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v33 + 16);
  uint64_t v117 = v31;
  uint64_t v35 = v26;
  sub_100063FAC(v23, v31, v25);
  Swift::Int v116 = v32;
  v34(v130, v32, v33);
  unint64_t v36 = v131;
  Swift::UInt v132 = v131;
  swift_bridgeObjectRetain();
  sub_10002DDE4((uint64_t)v130);
  char v37 = *(void *)(v36 + 16);
  if (!v37)
  {
    sub_10002BAD0((uint64_t)&v132);
    sub_10006FDE4(v23, v117, v25);
LABEL_37:
    Swift::UInt v5 = v120;
    uint64_t v4 = v121;
    uint64_t v64 = v125;
    if (v122) {
      goto LABEL_111;
    }
LABEL_106:
    uint64_t v99 = swift_bridgeObjectRetain();
    sub_100072F7C(v99);
    uint64_t v16 = v64;
    swift_bridgeObjectRelease();
    Swift::UInt v100 = swift_bridgeObjectRetain();
    sub_10005F4C8(v100);
    swift_bridgeObjectRelease();
    goto LABEL_107;
  }
  Swift::Int v139 = v35;
  swift_bridgeObjectRetain();
  uint64_t v38 = (uint64_t *)(v36 + 40);
  while (1)
  {
    uint64_t v39 = *(v38 - 1);
    uint64_t v40 = *v38;
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*v38 + 24))(v39, *v38) == v23 && v117 == v41) {
      break;
    }
    Swift::UInt v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v43) {
      goto LABEL_45;
    }
    v38 += 2;
    if (!--v37)
    {
      sub_10002BAD0((uint64_t)&v132);
      sub_10002BAD0((uint64_t)&v132);
      sub_10006FDE4(v23, v117, v25);
      goto LABEL_37;
    }
  }
  swift_bridgeObjectRelease();
LABEL_45:
  sub_10002BAD0((uint64_t)&v132);
  sub_10002BAD0((uint64_t)&v132);
  sub_10006FDE4(v23, v117, v25);
  if (sub_1000566B4(v39, v40) & 1) == 0 && (sub_1000567E4(v116, v33))
  {
    uint64_t v68 = swift_bridgeObjectRetain();
    sub_100072F7C(v68);
    uint64_t v16 = v125;
    swift_bridgeObjectRelease();
    uint64_t v69 = swift_bridgeObjectRetain();
    sub_10005F4C8(v69);
    swift_bridgeObjectRelease();
    Swift::UInt v5 = v120;
    uint64_t v4 = v121;
    goto LABEL_107;
  }
  Swift::UInt v5 = v120;
  uint64_t v64 = v125;
  if ((sub_1000566B4(v39, v40) & 1) == 0)
  {
    uint64_t v4 = v121;
    if (!v122) {
      goto LABEL_106;
    }
LABEL_111:
    unint64_t v101 = swift_bridgeObjectRetain();
    sub_100072F7C(v101);
    swift_bridgeObjectRelease();
    uint64_t v102 = swift_bridgeObjectRetain();
    sub_10005F4C8(v102);
    swift_bridgeObjectRelease();
    goto LABEL_114;
  }
  uint64_t v105 = swift_bridgeObjectRetain();
  sub_100072F7C(v105);
  swift_bridgeObjectRelease();
  Swift::UInt v106 = swift_bridgeObjectRetain();
  sub_10005F4C8(v106);
  swift_bridgeObjectRelease();
  uint64_t v4 = v121;
LABEL_114:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::Int v107 = swift_bridgeObjectRetain();
  sub_100072F7C(v107);
  swift_bridgeObjectRelease_n();
  uint64_t v108 = v4;
  sub_10006D10C(v5, v119, v114, &v127);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v109 = v129;
  uint64_t v124 = v127;
  int64_t v126 = v128;
  v108[4] = v5;
  v108[5] = v119;
  v108[6] = v114;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(_OWORD *)a1 = v124;
  *(_OWORD *)(a1 + 16) = v126;
  *(void *)(a1 + 32) = v109;
  return result;
}

uint64_t sub_10006F550(Swift::UInt a1, Swift::UInt a2, __int16 a3, uint64_t a4)
{
  if (*(void *)(a4 + 16))
  {
    Hasher.init(_seed:)();
    if (a3 & 0x100) != 0 || (Hasher._combine(_:)(1uLL), Hasher._combine(_:)(a1), (a3))
    {
      Swift::UInt v8 = 0;
    }
    else
    {
      Hasher._combine(_:)(1uLL);
      Swift::UInt v8 = a2;
    }
    Hasher._combine(_:)(v8);
    Swift::Int v9 = Hasher._finalize()();
    uint64_t v10 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v11 = v9 & ~v10;
    if ((*(void *)(a4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
    {
      uint64_t v12 = ~v10;
      do
      {
        uint64_t v13 = *(void *)(a4 + 48) + 24 * v11;
        if (*(unsigned char *)(v13 + 17))
        {
          if ((a3 & 0x100) != 0) {
            return 1;
          }
        }
        else if ((a3 & 0x100) == 0 && *(void *)v13 == a1)
        {
          if (*(unsigned char *)(v13 + 16))
          {
            if (a3) {
              return 1;
            }
          }
          else if ((a3 & 1) == 0 && *(void *)(v13 + 8) == a2)
          {
            return 1;
          }
        }
        unint64_t v11 = (v11 + 1) & v12;
      }
      while (((*(void *)(a4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
  }
  return 0;
}

uint64_t sub_10006F690(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, char a6, char a7, char a8, uint64_t *a9)
{
  int v14 = a5;
  if (a7)
  {
    uint64_t v16 = sub_100042BC0(0x656C62616E65, 0xE600000000000000, 1, a4, a1, a2, a3);
    uint64_t v17 = 0x656C6261736964;
    uint64_t v18 = 0xE700000000000000;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v15 = swift_bridgeObjectRetain();
    uint64_t v16 = sub_100089B50(v15, a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = 28526;
    uint64_t v18 = 0xE200000000000000;
  }
  uint64_t v19 = sub_100042BC0(v17, v18, 0, a4, a1, a2, a3);
  char v55 = v14;
  long long v53 = v19;
  char v54 = v16;
  if (v14 == 2 || ((v14 & 1) != 0 ? (Swift::UInt v20 = v16) : (Swift::UInt v20 = v19), !*((void *)v20 + 2)))
  {
    uint64_t v24 = 0;
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v21 = *((void *)v20 + 4);
    uint64_t v22 = (void *)*((void *)v20 + 5);
    unsigned __int8 v23 = v20[48];
    sub_1000319B8(v21, (uint64_t)v22, v23);
    v80._uint64_t countAndFlagsBits = v21;
    v80._object = v22;
    uint64_t v24 = sub_100076D6C(v80, v23);
    uint64_t v26 = v25;
    sub_10002ECB8(v21, (uint64_t)v22, v23);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003A450(a9);
  sub_10006746C((uint64_t)_swiftEmptyArrayStorage, (a6 & 1) == 0, (uint64_t)a9, v24, v26, a1, a2, a3, (uint64_t)&v57, 1);
  long long v44 = v57;
  uint64_t v43 = v58;
  char v52 = v60;
  long long v50 = v62;
  long long v51 = v61;
  uint64_t v48 = v64;
  uint64_t v49 = v63;
  char v47 = v65;
  uint64_t v45 = v67;
  uint64_t v46 = v66;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003A450(a9);
  sub_10006746C((uint64_t)_swiftEmptyArrayStorage, 1, (uint64_t)a9, 0, 0, a1, a2, a3, (uint64_t)&v68, 0);
  uint64_t v27 = v69;
  char v28 = v71;
  long long v35 = v68;
  long long v36 = v72;
  long long v42 = v73;
  uint64_t v40 = v75;
  uint64_t v41 = v74;
  char v39 = v76;
  uint64_t v37 = v78;
  uint64_t v38 = v77;
  uint64_t v29 = swift_allocObject();
  *(unsigned char *)(v29 + 16) = 0;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v29;
  *(void *)(v30 + 24) = a1;
  *(void *)(v30 + 32) = a2;
  *(void *)(v30 + 40) = a3;
  *(unsigned char *)(v30 + 48) = a8;
  uint64_t v31 = swift_allocObject();
  *(unsigned char *)(v31 + 16) = v55;
  *(void *)(v31 + 24) = a1;
  *(void *)(v31 + 32) = a2;
  *(void *)(v31 + 40) = a3;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v29;
  *(void *)(v32 + 24) = a1;
  *(void *)(v32 + 32) = a2;
  *(void *)(v32 + 40) = a3;
  *(unsigned char *)(v32 + 48) = a8;
  sub_100003DD0(&qword_1000C5230);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_1000A2CD0;
  *(void *)(v33 + 32) = v54;
  *(_OWORD *)(v33 + 40) = v44;
  *(void *)(v33 + 56) = v43;
  *(_OWORD *)(v33 + 64) = v59;
  *(unsigned char *)(v33 + 80) = v52;
  *(_OWORD *)(v33 + 88) = v51;
  *(_OWORD *)(v33 + 104) = v50;
  *(void *)(v33 + 120) = v49;
  *(void *)(v33 + 128) = v48;
  *(unsigned char *)(v33 + 136) = v47;
  *(void *)(v33 + 144) = v46;
  *(void *)(v33 + 152) = v45;
  *(void *)(v33 + 160) = 0;
  *(void *)(v33 + 168) = 0;
  *(_WORD *)(v33 + 176) = 4;
  *(void *)(v33 + 184) = sub_100070094;
  *(void *)(v33 + 192) = v30;
  *(unsigned char *)(v33 + 200) = 0;
  *(void *)(v33 + 208) = sub_1000700F0;
  *(void *)(v33 + 216) = v31;
  *(void *)(v33 + 224) = v53;
  *(_OWORD *)(v33 + 232) = v35;
  *(void *)(v33 + 248) = v27;
  *(_OWORD *)(v33 + 256) = v70;
  *(unsigned char *)(v33 + 272) = v28;
  *(_OWORD *)(v33 + 280) = v36;
  *(_OWORD *)(v33 + 296) = v42;
  *(void *)(v33 + 312) = v41;
  *(void *)(v33 + 320) = v40;
  *(unsigned char *)(v33 + 328) = v39;
  *(void *)(v33 + 336) = v38;
  *(void *)(v33 + 344) = v37;
  *(void *)(v33 + 352) = 0;
  *(void *)(v33 + 360) = 0;
  *(_WORD *)(v33 + 368) = 4;
  *(void *)(v33 + 376) = sub_100070118;
  *(void *)(v33 + 384) = v32;
  *(unsigned char *)(v33 + 392) = 0;
  *(void *)(v33 + 400) = String.init(argument:);
  *(void *)(v33 + 408) = 0;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_retain();

  return sub_100083798(v33);
}

unint64_t sub_10006FB50(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a4 + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2) {
      goto LABEL_13;
    }
    return 0;
  }
  if (v6 <= 0 && v6 > a2) {
    return 0;
  }
LABEL_13:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7) {
    goto LABEL_16;
  }
  if (result > v4) {
LABEL_17:
  }
    __break(1u);
  return result;
}

uint64_t sub_10006FBBC(uint64_t result, uint64_t a2, unint64_t a3)
{
  int64_t v3 = a3 >> 1;
  if (a3 >> 1 == a2)
  {
    return 0;
  }
  else
  {
    unint64_t v4 = (int8x16_t *)(result + (a2 << 6) + 24);
    while (a2 < v3)
    {
      uint64_t v5 = v4[-1].i64[1];
      if ((v5 & 0x6000000000000000) == 0x4000000000000000)
      {
        int8x16_t v6 = vorrq_s8(*v4, *(int8x16_t *)((char *)v4 - 24));
        int8x16_t v7 = vextq_s8(v6, v6, 8uLL);
        int8x8_t v8 = vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
        if (v5 == 0x4000000000000000 && *(void *)&v8 == 0) {
          return a2;
        }
      }
      ++a2;
      v4 += 4;
      if (v3 == a2) {
        return 0;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10006FC48(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_100056F98(0, v1, 0);
    uint64_t v3 = 32;
    do
    {
      long long v4 = *(_OWORD *)(a1 + v3 + 144);
      unsigned char v18[8] = *(_OWORD *)(a1 + v3 + 128);
      v18[9] = v4;
      long long v5 = *(_OWORD *)(a1 + v3 + 176);
      v18[10] = *(_OWORD *)(a1 + v3 + 160);
      v18[11] = v5;
      long long v6 = *(_OWORD *)(a1 + v3 + 80);
      uint64_t v18[4] = *(_OWORD *)(a1 + v3 + 64);
      void v18[5] = v6;
      long long v7 = *(_OWORD *)(a1 + v3 + 112);
      v18[6] = *(_OWORD *)(a1 + v3 + 96);
      v18[7] = v7;
      long long v8 = *(_OWORD *)(a1 + v3 + 16);
      v18[0] = *(_OWORD *)(a1 + v3);
      v18[1] = v8;
      long long v9 = *(_OWORD *)(a1 + v3 + 48);
      uint64_t v18[2] = *(_OWORD *)(a1 + v3 + 32);
      v18[3] = v9;
      sub_10002E940((uint64_t)v18);
      uint64_t v10 = sub_1000656CC();
      uint64_t v12 = v11;
      sub_10002EAFC((uint64_t)v18);
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_100056F98((char *)(v13 > 1), v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      uint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
      v3 += 192;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  sub_100003DD0(&qword_1000C50C8);
  sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
  uint64_t v16 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_10006FDE4(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = (a3 >> 61) & 3;
  if (v3 == 1) {
    return swift_bridgeObjectRelease();
  }
  if (!v3) {
    return sub_10006FE04(result, a2, a3);
  }
  return result;
}

uint64_t sub_10006FE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    sub_10002ECB8(a1, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return sub_10002ECB8(a1, a2, a3);
  }
}

uint64_t sub_10006FE50(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006FE84(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006FEB8(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 *sub_10006FF14(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t *sub_10006FF70(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10006FFA4(uint64_t a1)
{
  return a1;
}

unint64_t sub_10006FFD0()
{
  unint64_t result = qword_1000C5BB8;
  if (!qword_1000C5BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5BB8);
  }
  return result;
}

uint64_t sub_100070024(uint64_t a1)
{
  return a1;
}

uint64_t sub_100070060(uint64_t result, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x7FFFFFFFFFFFFF3ELL) != 0x7FFFFFF3ELL) {
    return sub_10006FDE4(result, a2, a3);
  }
  return result;
}

uint64_t sub_100070080()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100070094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  return sub_100070134(a1, a2, a3, a4, a5, 1u);
}

uint64_t sub_1000700B0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000700F0(uint64_t a1, uint64_t a2)
{
  return sub_10006AA64(a1, a2, *(unsigned char *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_100070118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  return sub_100070134(a1, a2, a3, a4, a5, 0);
}

uint64_t sub_100070134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, unsigned __int8 a6)
{
  return sub_10006AB64(a1, a2, a3, a4, a5, *(void *)(v6 + 16), *(void *)(v6 + 24), *(void *)(v6 + 32), *(void **)(v6 + 40), *(unsigned char *)(v6 + 48), a6);
}

uint64_t sub_100070170(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003DD0(&qword_1000C5360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t destroy for ArgumentSet()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s14ArgumentParser11ArgumentSetVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ArgumentSet(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for ArgumentSet(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ArgumentSet()
{
  return &type metadata for ArgumentSet;
}

void sub_100070308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned __int8 v11 = a4;
  switch(a11)
  {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 9:
      goto LABEL_10;
    case 4:
      uint64_t v14 = a4;
      uint64_t v15 = a5;
      unsigned __int8 v16 = a6;
      goto LABEL_4;
    case 7:
      swift_bridgeObjectRetain();
      uint64_t v14 = a2;
      uint64_t v15 = a3;
      unsigned __int8 v16 = v11;
LABEL_4:
      sub_1000319B8(v14, v15, v16);
      return;
    case 8:
      sub_1000319B8(a4, a5, a6);
      goto LABEL_10;
    case 10:
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 11:
LABEL_9:
      swift_bridgeObjectRetain();
LABEL_10:
      swift_bridgeObjectRetain();
      return;
    case 12:
      swift_bridgeObjectRetain();
      sub_100067748(a2, a3, v11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 13:
    case 14:
LABEL_14:
      swift_errorRetain();
      break;
    default:
      return;
  }
}

void destroy for CommandError(uint64_t a1)
{
}

void sub_100070508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned __int8 v11 = a4;
  switch(a11)
  {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 9:
      goto LABEL_10;
    case 4:
      uint64_t v14 = a4;
      uint64_t v15 = a5;
      unsigned __int8 v16 = a6;
      goto LABEL_4;
    case 7:
      swift_bridgeObjectRelease();
      uint64_t v14 = a2;
      uint64_t v15 = a3;
      unsigned __int8 v16 = v11;
LABEL_4:
      sub_10002ECB8(v14, v15, v16);
      return;
    case 8:
      sub_10002ECB8(a4, a5, a6);
      goto LABEL_10;
    case 10:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 11:
LABEL_9:
      swift_bridgeObjectRelease();
LABEL_10:
      swift_bridgeObjectRelease();
      return;
    case 12:
      swift_bridgeObjectRelease();
      sub_10002ECD0(a2, a3, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    case 13:
    case 14:
LABEL_14:
      swift_errorRelease();
      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for CommandError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v15 = v3;
  uint64_t v11 = *(void *)(a2 + 80);
  char v12 = *(unsigned char *)(a2 + 88);
  swift_bridgeObjectRetain();
  sub_100070308(v15, v4, v5, v6, v7, v8, v9, v14, v10, v11, v12);
  *(void *)(a1 + 8) = v15;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v11;
  *(unsigned char *)(a1 + 88) = v12;
  return a1;
}

uint64_t assignWithCopy for CommandError(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = v2[6];
  uint64_t v10 = v2[7];
  uint64_t v11 = v2[8];
  uint64_t v24 = v2[9];
  uint64_t v25 = v2[10];
  LOBYTE(v2) = *((unsigned char *)v2 + 88);
  sub_100070308(v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, (char)v2);
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v20 = *(void *)(a1 + 72);
  uint64_t v21 = *(void *)(a1 + 80);
  char v22 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = v25;
  *(unsigned char *)(a1 + 88) = (_BYTE)v2;
  sub_100070508(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

__n128 initializeWithTake for CommandError(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for CommandError(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  char v4 = *(unsigned char *)(a2 + 88);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 80);
  char v15 = *(unsigned char *)(a1 + 88);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = v4;
  sub_100070508(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandError(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 89)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CommandError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandError()
{
  return &type metadata for CommandError;
}

uint64_t sub_1000709E0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = sub_100089B50(v15, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a9 == 255) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = a7;
  }
  if (a9 == 255) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = a8;
  }
  uint64_t v35 = v18;
  uint64_t v36 = v17;
  if (a9 == 255) {
    char v19 = 4;
  }
  else {
    char v19 = a9;
  }
  char v34 = v19;
  sub_10003A4DC(a7, a8, a9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003A4DC(a7, a8, a9);
  sub_10003A450(a5);
  sub_10006746C((uint64_t)_swiftEmptyArrayStorage, 0, (uint64_t)a5, 0, 0, a1, a2, a3, (uint64_t)&v40, 0);
  long long v25 = v40;
  uint64_t v20 = v41;
  char v33 = v43;
  long long v31 = v45;
  long long v32 = v44;
  uint64_t v29 = v47;
  uint64_t v30 = v46;
  char v28 = v48;
  uint64_t v26 = v50;
  uint64_t v27 = v49;
  uint64_t v21 = (void *)swift_allocObject();
  _OWORD v21[2] = sub_1000730F0;
  v21[3] = 0;
  v21[4] = a1;
  v21[5] = a2;
  v21[6] = a3;
  v38[0] = 0;
  v38[1] = 0;
  char v22 = (void *)swift_allocObject();
  v22[2] = v16;
  sub_10002B998((uint64_t)v38, (uint64_t)(v22 + 3), &qword_1000C5110);
  v22[5] = a1;
  v22[6] = a2;
  v22[7] = a3;
  char v39 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10007565C(a7, a8, a9);
  sub_100003DD0(&qword_1000C5230);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1000A2660;
  *(void *)(v23 + 32) = v16;
  *(_OWORD *)(v23 + 40) = v25;
  *(void *)(v23 + 56) = v20;
  *(_OWORD *)(v23 + 64) = v42;
  *(unsigned char *)(v23 + 80) = v33;
  *(_OWORD *)(v23 + 88) = v32;
  *(_OWORD *)(v23 + 104) = v31;
  *(void *)(v23 + 120) = v30;
  *(void *)(v23 + 128) = v29;
  *(unsigned char *)(v23 + 136) = v28;
  *(void *)(v23 + 144) = v27;
  *(void *)(v23 + 152) = v26;
  *(void *)(v23 + 160) = v36;
  *(void *)(v23 + 168) = v35;
  *(unsigned char *)(v23 + 176) = v34;
  *(unsigned char *)(v23 + 177) = a6;
  *(void *)(v23 + 184) = sub_1000755AC;
  *(void *)(v23 + 192) = v21;
  *(unsigned char *)(v23 + 200) = v39;
  *(void *)(v23 + 208) = sub_100075638;
  *(void *)(v23 + 216) = v22;
  return sub_100083798(v23);
}

uint64_t sub_100070CBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_8:
    sub_100035580(&v31);
    char v28 = &v31;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v11 = *(_OWORD *)(a1 + 176);
  long long v39 = *(_OWORD *)(a1 + 160);
  long long v40 = v11;
  long long v12 = *(_OWORD *)(a1 + 208);
  long long v41 = *(_OWORD *)(a1 + 192);
  long long v42 = v12;
  long long v13 = *(_OWORD *)(a1 + 112);
  long long v35 = *(_OWORD *)(a1 + 96);
  long long v36 = v13;
  long long v14 = *(_OWORD *)(a1 + 144);
  long long v37 = *(_OWORD *)(a1 + 128);
  long long v38 = v14;
  long long v15 = *(_OWORD *)(a1 + 48);
  long long v31 = *(_OWORD *)(a1 + 32);
  long long v32 = v15;
  long long v16 = *(_OWORD *)(a1 + 80);
  long long v33 = *(_OWORD *)(a1 + 64);
  long long v34 = v16;
  if ((sub_10008EFF8(a2, a3, a4, v33) & 1) == 0)
  {
    uint64_t v17 = 224;
    while (--v8)
    {
      uint64_t v18 = v17 + 192;
      char v19 = (long long *)(a1 + v17);
      long long v20 = v19[9];
      long long v39 = v19[8];
      long long v40 = v20;
      long long v21 = v19[11];
      long long v41 = v19[10];
      long long v42 = v21;
      long long v22 = v19[5];
      long long v35 = v19[4];
      long long v36 = v22;
      long long v23 = v19[7];
      long long v37 = v19[6];
      long long v38 = v23;
      long long v24 = v19[1];
      long long v31 = *v19;
      long long v32 = v24;
      long long v25 = v19[3];
      long long v33 = v19[2];
      long long v34 = v25;
      char v26 = sub_10008EFF8(a2, a3, a4, v33);
      uint64_t v17 = v18;
      if (v26) {
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_6:
  sub_10002E940((uint64_t)&v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v30[8] = v39;
  v30[9] = v40;
  v30[10] = v41;
  v30[11] = v42;
  void v30[4] = v35;
  v30[5] = v36;
  v30[6] = v37;
  v30[7] = v38;
  v30[0] = v31;
  v30[1] = v32;
  _OWORD v30[2] = v33;
  v30[3] = v34;
  v27._uint64_t countAndFlagsBits = (uint64_t)v30;
  String.init(argument:)(v27);
  char v28 = v30;
LABEL_9:
  sub_10002B998((uint64_t)v28, a5, &qword_1000C5148);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100070E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *(uint64_t **)v2;
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = *(void *)(v2 + 16);
  sub_100073A34(a1, *(uint64_t **)v2);
  uint64_t v7 = swift_bridgeObjectRetain();
  long long v57 = sub_10007F9CC(v7);
  int64_t v58 = v8;
  uint64_t v59 = v9;
  sub_1000728CC((uint64_t *)&v57, (uint64_t)v4, v5, v6);
  sub_1000721B0((uint64_t *)&v57);
  sub_100071874(v57, v58, v59, *(void *)(v2 + 8), *(void *)(v2 + 16), (uint64_t)v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000356C0((uint64_t)v49, (uint64_t)v48);
  sub_100003DD0(&qword_1000C5528);
  if (!swift_dynamicCast())
  {
    uint64_t result = sub_10004B100(v49, a2);
    goto LABEL_31;
  }
  if (v52)
  {
LABEL_34:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v11 = v51;
  uint64_t v10 = v50;
  uint64_t v12 = v53;
  uint64_t v13 = v54;
  char v14 = v55;
  char v15 = BYTE8(v56);
  long long v16 = *(uint64_t **)v2;
  sub_100003DD0(&qword_1000C50C0);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1000A2660;
  *(_OWORD *)(v17 + 32) = *((_OWORD *)v16 + 1);
  uint64_t v40 = *(void *)(v10 + 16);
  if (!v40) {
    goto LABEL_30;
  }
  char v36 = v15;
  char v37 = v14;
  uint64_t v38 = v13;
  uint64_t v39 = v12;
  uint64_t v43 = v10 + 32;
  sub_100074B60(v10, v11, 0);
  sub_100074B60(v10, v11, 0);
  swift_retain();
  unint64_t v18 = 0;
  uint64_t v41 = v11;
  uint64_t v42 = v10;
  while (1)
  {
    uint64_t v44 = v17;
    if (v18 >= *(void *)(v10 + 16))
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    unint64_t v45 = v18;
    char v19 = (uint64_t *)(v43 + 16 * v18);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    swift_beginAccess();
    unint64_t v22 = v16[5];
    if (v22 >> 62) {
      break;
    }
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    if (!v23) {
      goto LABEL_28;
    }
LABEL_8:
    unint64_t v46 = v45 + 1;
    uint64_t v24 = 4;
    while (1)
    {
      if ((v22 & 0xC000000000000001) != 0)
      {
        uint64_t v25 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v25 = *(void *)(v22 + 8 * v24);
        swift_retain();
      }
      uint64_t v26 = v24 - 3;
      if (__OFADD__(v24 - 4, 1))
      {
        __break(1u);
        goto LABEL_33;
      }
      if ((*(uint64_t (**)(void))(*(void *)(v25 + 24) + 24))() == v20 && v27 == v21) {
        break;
      }
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v29) {
        goto LABEL_21;
      }
      swift_release();
      ++v24;
      if (v26 == v23) {
        goto LABEL_28;
      }
    }
    swift_bridgeObjectRelease();
LABEL_21:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v30 = *(_OWORD *)(v25 + 16);
    uint64_t v17 = v44;
    unint64_t v32 = *(void *)(v44 + 16);
    unint64_t v31 = *(void *)(v44 + 24);
    if (v32 >= v31 >> 1)
    {
      long long v47 = *(_OWORD *)(v25 + 16);
      long long v33 = sub_10005FFD8((char *)(v31 > 1), v32 + 1, 1, (char *)v44);
      long long v30 = v47;
      uint64_t v17 = (uint64_t)v33;
    }
    uint64_t v11 = v41;
    uint64_t v10 = v42;
    *(void *)(v17 + 16) = v32 + 1;
    *(_OWORD *)(v17 + 16 * v32 + 32) = v30;
    swift_release();
    long long v16 = (uint64_t *)v25;
    unint64_t v18 = v46;
    if (v46 == v40)
    {
      sub_100053658(v42, v41, 0);
      swift_release();
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v23) {
    goto LABEL_8;
  }
LABEL_28:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v11 = v41;
  uint64_t v10 = v42;
  sub_100053658(v42, v41, 0);
  swift_release();
  uint64_t v17 = v44;
LABEL_29:
  sub_100053658(v10, v11, 0);
  uint64_t v13 = v38;
  uint64_t v12 = v39;
  char v14 = v37;
  char v15 = v36;
LABEL_30:
  swift_bridgeObjectRelease();
  *(void *)(a2 + 24) = &type metadata for HelpCommand;
  *(void *)(a2 + 32) = sub_10002E8EC();
  uint64_t v35 = swift_allocObject();
  *(void *)a2 = v35;
  *(void *)(v35 + 16) = v10;
  *(void *)(v35 + 24) = v11;
  *(unsigned char *)(v35 + 32) = 0;
  *(void *)(v35 + 40) = v12;
  *(void *)(v35 + 48) = v13;
  *(unsigned char *)(v35 + 56) = v14;
  *(void *)(v35 + 64) = v17;
  *(unsigned char *)(v35 + 72) = v15;
  uint64_t result = sub_100005128((uint64_t)v49);
LABEL_31:
  *(unsigned char *)(a2 + 89) = 0;
  return result;
}

uint64_t sub_100071874@<X0>(void *a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t result = sub_10007454C((uint64_t)a1, a2, 0, a4, a5);
  if (!v6)
  {
    uint64_t result = sub_10007FDD0((uint64_t)a1, a2);
    if (result)
    {
      int64_t v13 = a1[2];
      if (v13 < a2)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      if (a2 < 0)
      {
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      if (v13 != a2)
      {
        uint64_t v14 = (uint64_t)&a1[8 * a2 + 6];
        int64_t v15 = a2;
        while (v15 < v13)
        {
          uint64_t v16 = *(void *)v14;
          if ((*(void *)v14 & 0x6000000000000000) == 0)
          {
            uint64_t v27 = *(void *)(v14 - 16);
            uint64_t v28 = *(void *)(v14 - 8);
            uint64_t v29 = *(void *)(v14 + 24);
            uint64_t v30 = *(void *)(v14 + 32);
            uint64_t v31 = *(unsigned __int8 *)(v14 + 40);
            sub_10002FDE0();
            swift_allocError();
            *(void *)uint64_t v32 = v29;
            *(void *)(v32 + 8) = v30;
            *(void *)(v32 + 16) = v31;
            *(void *)(v32 + 24) = v27;
            *(void *)(v32 + 32) = v28;
            *(void *)(v32 + 40) = v16;
            *(_OWORD *)(v32 + 48) = 0u;
            *(_OWORD *)(v32 + 64) = 0u;
            *(unsigned char *)(v32 + 80) = 4;
            sub_1000319B8(v27, v28, v16);
            return swift_willThrow();
          }
          ++v15;
          v14 += 64;
          if (v13 == v15) {
            goto LABEL_10;
          }
        }
        __break(1u);
        goto LABEL_38;
      }
LABEL_10:
      uint64_t v17 = sub_10007CBB4(a1, a2, a3);
      sub_10002FDE0();
      swift_allocError();
      *(void *)uint64_t v18 = v17;
      *(_OWORD *)(v18 + 8) = 0u;
      *(_OWORD *)(v18 + 24) = 0u;
      *(_OWORD *)(v18 + 40) = 0u;
      *(_OWORD *)(v18 + 56) = 0u;
      *(void *)(v18 + 72) = 0;
      char v19 = 9;
    }
    else
    {
      uint64_t v34 = a6;
      uint64_t v46 = 0;
      unint64_t v20 = *(void *)(a5 + 16);
      if (v20)
      {
        uint64_t v21 = (_OWORD *)(a5 + 32);
        swift_bridgeObjectRetain();
        unint64_t v33 = v20;
        while (1)
        {
          sub_100064248(v21, &v38);
          sub_1000356C0((uint64_t)v39, (uint64_t)&v35);
          swift_bridgeObjectRetain();
          sub_100003DD0(&qword_1000C5920);
          sub_100003DD0(&qword_1000C5528);
          if ((swift_dynamicCast() & 1) == 0)
          {
            uint64_t v42 = 0;
            long long v40 = 0u;
            long long v41 = 0u;
          }
          sub_1000642B4((uint64_t)&v38);
          sub_10002B998((uint64_t)&v40, (uint64_t)&v38, &qword_1000C5BC8);
          swift_bridgeObjectRelease();
          uint64_t v22 = v39[1];
          sub_100074B70((uint64_t)&v38);
          if (v22) {
            break;
          }
          uint64_t v21 = (_OWORD *)((char *)v21 + 56);
          if (!--v20) {
            goto LABEL_25;
          }
        }
        unint64_t v23 = v33 - 1;
        uint64_t v24 = (_OWORD *)(a5 + 56 * v33 - 24);
        while (1)
        {
          sub_100064248(v24, &v38);
          sub_1000356C0((uint64_t)v39, (uint64_t)&v35);
          if ((swift_dynamicCast() & 1) == 0)
          {
            uint64_t v42 = 0;
            long long v40 = 0u;
            long long v41 = 0u;
          }
          sub_1000642B4((uint64_t)&v38);
          uint64_t v25 = *((void *)&v41 + 1);
          sub_100074B70((uint64_t)&v40);
          if (v25) {
            break;
          }
          --v23;
          uint64_t v24 = (_OWORD *)((char *)v24 - 56);
          if (v23 >= v33)
          {
            __break(1u);
            goto LABEL_25;
          }
        }
        sub_100064248(v24, &v38);
        sub_1000356C0((uint64_t)v39, (uint64_t)&v40);
        if ((swift_dynamicCast() & 1) == 0)
        {
          uint64_t v37 = 0;
          long long v35 = 0u;
          long long v36 = 0u;
        }
        sub_1000642B4((uint64_t)&v38);
        sub_10002B998((uint64_t)&v35, (uint64_t)&v40, &qword_1000C5BC8);
        uint64_t result = sub_100074BD0((uint64_t)&v40, (uint64_t)&v35);
        uint64_t v26 = v34;
        if (!*((void *)&v36 + 1)) {
          goto LABEL_40;
        }
        sub_10004B100(&v35, (uint64_t)&v38);
        sub_100074B70((uint64_t)&v40);
        sub_10004B100(&v38, (uint64_t)&v43);
      }
      else
      {
        swift_bridgeObjectRetain();
LABEL_25:
        uint64_t v45 = 0;
        long long v43 = 0u;
        long long v44 = 0u;
        uint64_t v26 = v34;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v44 + 1)) {
        return sub_10004B100(&v43, v26);
      }
      sub_100074B70((uint64_t)&v43);
      sub_10002FDE0();
      swift_allocError();
      *(void *)uint64_t v18 = 3;
      *(_OWORD *)(v18 + 8) = 0u;
      *(_OWORD *)(v18 + 24) = 0u;
      *(_OWORD *)(v18 + 40) = 0u;
      *(_OWORD *)(v18 + 56) = 0u;
      *(void *)(v18 + 72) = 0;
      char v19 = 15;
    }
    *(unsigned char *)(v18 + 80) = v19;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100071CAC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = *(void *)(v4 + 24);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = *(void *)(v6 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_100053C7C(v5, v10, 2, 0, 0, 0);
  uint64_t v13 = v12;
  uint64_t v49 = v5;
  uint64_t v50 = v6;
  uint64_t v51 = v11;
  uint64_t v52 = v12;
  uint64_t v53 = v7;
  uint64_t v54 = v8;
  uint64_t v55 = v9;
  uint64_t v14 = v60;
  sub_10006E524((uint64_t)&v56);
  if (v14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v60 = v13;
    uint64_t v16 = v4;
    if (sub_10005674C(*(void *)(v4 + 16), *(void *)(v4 + 24)))
    {
      uint64_t v17 = *(void *)(v3 + 16);
      long long v18 = v57;
      uint64_t v59 = v57;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      sub_10007454C(v18, *((uint64_t *)&v18 + 1), 0, v4, v17);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    uint64_t v19 = *(void *)(v3 + 16);
    uint64_t v20 = type metadata accessor for ArgumentDecoder();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 64) = 0;
    *(void *)(v21 + 72) = _swiftEmptyArrayStorage;
    *(void *)(v21 + 80) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    *(void *)(v21 + 88) = sub_100083D5C((uint64_t)_swiftEmptyArrayStorage);
    long long v22 = v57;
    *(_OWORD *)(v21 + 16) = v56;
    *(_OWORD *)(v21 + 32) = v22;
    *(void *)(v21 + 48) = v58;
    *(void *)(v21 + 72) = v19;
    swift_bridgeObjectRelease();
    *(void *)(v21 + 56) = &_swiftEmptySetSingleton;
    uint64_t v23 = *(void *)(v4 + 16);
    uint64_t v24 = *(void *)(v4 + 24);
    uint64_t v47 = v20;
    unint64_t v48 = sub_100074D14();
    uint64_t v46 = v21;
    *((void *)&v43 + 1) = v23;
    *(void *)&long long v44 = v24;
    sub_10000A954((uint64_t *)&v42);
    swift_retain();
    dispatch thunk of Decodable.init(from:)();
    sub_10004B100(&v42, (uint64_t)a2);
    swift_beginAccess();
    uint64_t v25 = swift_bridgeObjectRetain();
    sub_100072F7C(v25);
    swift_bridgeObjectRelease();
    uint64_t v26 = swift_bridgeObjectRetain();
    uint64_t v27 = sub_100073110(v26, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10005EBD4((uint64_t)v27);
    uint64_t v28 = *(void *)(v16 + 16);
    uint64_t v29 = *(void *)(*(void *)(v16 + 24) + 8);
    uint64_t v30 = a2[3];
    uint64_t v31 = a2[4];
    uint64_t v32 = sub_100005090(a2, v30);
    *((void *)&v44 + 1) = v30;
    uint64_t v45 = *(void *)(v31 + 8);
    unint64_t v33 = sub_10000A954((uint64_t *)&v43);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v30 - 8) + 16))(v33, v32, v30);
    *(void *)&long long v42 = v28;
    *((void *)&v42 + 1) = v29;
    uint64_t v34 = *(char **)(v3 + 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v34 = sub_1000601F8(0, *((void *)v34 + 2) + 1, 1, v34);
    }
    unint64_t v36 = *((void *)v34 + 2);
    unint64_t v35 = *((void *)v34 + 3);
    if (v36 >= v35 >> 1) {
      uint64_t v34 = sub_1000601F8((char *)(v35 > 1), v36 + 1, 1, v34);
    }
    *((void *)v34 + 2) = v36 + 1;
    uint64_t v37 = &v34[56 * v36];
    long long v38 = v42;
    long long v39 = v43;
    long long v40 = v44;
    *((void *)v37 + 10) = v45;
    *((_OWORD *)v37 + 3) = v39;
    *((_OWORD *)v37 + 4) = v40;
    *((_OWORD *)v37 + 2) = v38;
    uint64_t result = swift_release();
    *(void *)(v3 + 16) = v34;
  }
  return result;
}

uint64_t sub_1000721B0(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = a1;
  uint64_t result = sub_100071CAC(a1, v75);
  uint64_t v6 = v2;
  if (v2) {
    return result;
  }
  uint64_t v64 = v4;
  uint64_t v65 = v1;
  do
  {
    uint64_t v8 = v76;
    uint64_t v7 = v77;
    sub_100008DB4((uint64_t)v75, v76);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 24))(v8);
    if (v6)
    {
      uint64_t v59 = *(void *)(v3 + 8);
      uint64_t v60 = *(void *)(v3 + 16);
      sub_10007454C(*v4, v4[1], 0, v59, v60);
      long long v61 = sub_100074370(v59, v60);
      sub_10005857C();
      swift_allocError();
      *(void *)uint64_t v62 = v61;
      *(void *)(v62 + 8) = v6;
      *(_OWORD *)(v62 + 16) = 0u;
      *(_OWORD *)(v62 + 32) = 0u;
      *(_OWORD *)(v62 + 48) = 0u;
      *(_OWORD *)(v62 + 64) = 0u;
      *(void *)(v62 + 80) = 0;
      *(unsigned char *)(v62 + 88) = 13;
      swift_willThrow();
      return sub_100005128((uint64_t)v75);
    }
    uint64_t v9 = *(void *)(v3 + 16);
    if (!*(void *)(v9 + 16)) {
      goto LABEL_61;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v10 = *(void *)(v9 + 16);
      if (!v10) {
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t result = (uint64_t)sub_1000639D0(v9);
      uint64_t v9 = result;
      uint64_t v10 = *(void *)(result + 16);
      if (!v10) {
        goto LABEL_62;
      }
    }
    uint64_t v11 = v10 - 1;
    uint64_t v12 = v9 + 56 * v11;
    uint64_t v13 = *(void *)(v12 + 80);
    long long v15 = *(_OWORD *)(v12 + 48);
    long long v14 = *(_OWORD *)(v12 + 64);
    long long v16 = *(_OWORD *)(v12 + 32);
    *(void *)(v9 + 16) = v11;
    *(void *)(v3 + 16) = v9;
    long long v72 = v16;
    v73[0] = v15;
    v73[1] = v14;
    uint64_t v74 = v13;
    uint64_t v17 = v76;
    uint64_t v18 = v77;
    uint64_t v19 = sub_100005090(v75, v76);
    *((void *)&v69 + 1) = v17;
    *(void *)&long long v70 = *(void *)(v18 + 8);
    uint64_t v20 = sub_10000A954((uint64_t *)&v68);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v20, v19, v17);
    sub_100005128((uint64_t)v73);
    sub_10004B100(&v68, (uint64_t)v73);
    sub_100064248(&v72, &v68);
    uint64_t v21 = *(char **)(v3 + 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v21 = sub_1000601F8(0, *((void *)v21 + 2) + 1, 1, v21);
    }
    unint64_t v23 = *((void *)v21 + 2);
    unint64_t v22 = *((void *)v21 + 3);
    uint64_t v87 = 0;
    if (v23 >= v22 >> 1) {
      uint64_t v21 = sub_1000601F8((char *)(v22 > 1), v23 + 1, 1, v21);
    }
    *((void *)v21 + 2) = v23 + 1;
    uint64_t v24 = &v21[56 * v23];
    long long v25 = v68;
    long long v26 = v69;
    long long v27 = v70;
    *((void *)v24 + 10) = v71;
    *((_OWORD *)v24 + 3) = v26;
    *((_OWORD *)v24 + 4) = v27;
    *((_OWORD *)v24 + 2) = v25;
    *(void *)(v3 + 16) = v21;
    sub_1000642B4((uint64_t)&v72);
    uint64_t v28 = *(void *)(v3 + 8);
    uint64_t v29 = *v4;
    uint64_t v30 = v4[2];
    unint64_t v67 = v4[1];
    sub_10007FCF0(*v4, v67, (uint64_t)v78);
    sub_10002B998((uint64_t)v78, (uint64_t)&v82, &qword_1000C5BD8);
    uint64_t v31 = v84;
    uint64_t v66 = v28;
    if ((v84 & 0x7FFFFFFFFFFFFF3ELL) == 0x7FFFFFF3ELL) {
      goto LABEL_31;
    }
    unint64_t v32 = v82;
    char v33 = v83;
    uint64_t result = sub_100074C8C((uint64_t)v78);
    if (v31 & 0x6000000000000000) != 0x2000000000000000 || (v33) {
      goto LABEL_31;
    }
    if ((v32 & 0x8000000000000000) != 0) {
      goto LABEL_63;
    }
    if (v32 >= *(void *)(v30 + 16)) {
      goto LABEL_64;
    }
    uint64_t v34 = v30 + 16 * v32;
    uint64_t v36 = *(void *)(v34 + 32);
    uint64_t v35 = *(void *)(v34 + 40);
    swift_beginAccess();
    unint64_t v37 = *(void *)(v28 + 40);
    uint64_t v63 = v29;
    if (!(v37 >> 62))
    {
      uint64_t v38 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      if (!v38) {
        goto LABEL_30;
      }
      goto LABEL_18;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
    if (!v38)
    {
LABEL_30:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v3 = v65;
      uint64_t v28 = v66;
      uint64_t v29 = v63;
LABEL_31:
      uint64_t v48 = v87;
      sub_10007454C(v29, v67, 1, v28, *(void *)(v3 + 16));
      if (!v48)
      {
        (*(void (**)(void *__return_ptr))(*(void *)(v28 + 24) + 16))(v80);
        sub_10002DDE4((uint64_t)v80);
        sub_10002B998((uint64_t)&v81, (uint64_t)v85, &qword_1000C5720);
        sub_10002B998((uint64_t)v85, (uint64_t)v86, &qword_1000C5720);
        uint64_t v49 = v86[0];
        if (v86[0])
        {
          swift_beginAccess();
          unint64_t v50 = *(void *)(v28 + 40);
          uint64_t v87 = 0;
          if (v50 >> 62)
          {
            swift_bridgeObjectRetain_n();
            uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v51) {
              goto LABEL_35;
            }
          }
          else
          {
            uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain_n();
            if (v51)
            {
LABEL_35:
              uint64_t v52 = 4;
              do
              {
                uint64_t v53 = v52 - 4;
                if ((v50 & 0xC000000000000001) != 0)
                {
                  uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
                  uint64_t v54 = result;
                  BOOL v55 = __OFADD__(v53, 1);
                  uint64_t v56 = v52 - 3;
                  if (v55) {
                    goto LABEL_59;
                  }
                }
                else
                {
                  uint64_t v54 = *(void *)(v50 + 8 * v52);
                  uint64_t result = swift_retain();
                  BOOL v55 = __OFADD__(v53, 1);
                  uint64_t v56 = v52 - 3;
                  if (v55)
                  {
LABEL_59:
                    __break(1u);
                    goto LABEL_60;
                  }
                }
                if (*(void *)(v54 + 16) == v49)
                {
                  swift_release();
                  swift_bridgeObjectRelease_n();
                  uint64_t v3 = v65;
                  *(void *)(v65 + 8) = v54;
                  sub_100005128((uint64_t)v75);
                  uint64_t v4 = v64;
                  goto LABEL_47;
                }
                swift_release();
                ++v52;
              }
              while (v56 != v51);
            }
          }
          swift_bridgeObjectRelease_n();
          sub_10002FDE0();
          swift_allocError();
          *(void *)uint64_t v58 = 3;
          *(_OWORD *)(v58 + 8) = 0u;
          *(_OWORD *)(v58 + 24) = 0u;
          *(_OWORD *)(v58 + 40) = 0u;
          *(_OWORD *)(v58 + 56) = 0u;
          *(void *)(v58 + 72) = 0;
          *(unsigned char *)(v58 + 80) = 15;
          swift_willThrow();
        }
      }
      return sub_100005128((uint64_t)v75);
    }
LABEL_18:
    uint64_t v39 = 4;
    while (1)
    {
      uint64_t v40 = v39 - 4;
      if ((v37 & 0xC000000000000001) != 0)
      {
        uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v41 = result;
        uint64_t v42 = v39 - 3;
        if (__OFADD__(v40, 1))
        {
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
          return result;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(v37 + 8 * v39);
        uint64_t result = swift_retain();
        uint64_t v42 = v39 - 3;
        if (__OFADD__(v40, 1)) {
          goto LABEL_60;
        }
      }
      if ((*(uint64_t (**)(void))(*(void *)(v41 + 24) + 24))() == v36 && v43 == v35) {
        break;
      }
      uint64_t v45 = v36;
      uint64_t v46 = v35;
      char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v47) {
        goto LABEL_46;
      }
      swift_release();
      ++v39;
      uint64_t v35 = v46;
      uint64_t v36 = v45;
      if (v42 == v38) {
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
LABEL_46:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v64;
    sub_10007CAD4((uint64_t)v79);
    sub_10006FFA4((uint64_t)v79);
    swift_release();
    uint64_t v3 = v65;
    *(void *)(v65 + 8) = v41;
    sub_100005128((uint64_t)v75);
LABEL_47:
    uint64_t v57 = v87;
    uint64_t result = sub_100071CAC(v4, v75);
    uint64_t v6 = v57;
  }
  while (!v57);
  return result;
}

uint64_t sub_1000728CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *__return_ptr))(*(void *)(a2 + 24) + 16))(v24);
  sub_10002DDE4((uint64_t)v24);
  sub_10002B998((uint64_t)&v25, (uint64_t)v26, &qword_1000C5110);
  uint64_t result = sub_10002B998((uint64_t)v26, (uint64_t)v27, &qword_1000C5110);
  if (!v28)
  {
    unint64_t v9 = sub_100074DC0();
    v23[5] = sub_10007370C((uint64_t)&type metadata for GenerateCompletions, v9);
    void v23[6] = v10;
    v23[7] = v11;
    sub_100071CAC(a1, v23);
    if (v4)
    {
      swift_errorRelease();
    }
    else
    {
      sub_100003DD0(&qword_1000C5528);
      if (swift_dynamicCast())
      {
        uint64_t v12 = sub_100074370(a3, a4);
        if ((v22 & 1) == 0)
        {
          uint64_t v13 = v12;
          sub_10005857C();
          swift_allocError();
          *(void *)uint64_t v14 = v13;
          *(void *)(v14 + 8) = v20;
          *(void *)(v14 + 16) = v21;
          *(_OWORD *)(v14 + 24) = 0u;
          *(_OWORD *)(v14 + 40) = 0u;
          *(_OWORD *)(v14 + 56) = 0u;
          *(_OWORD *)(v14 + 72) = 0u;
          *(unsigned char *)(v14 + 88) = 1;
          swift_willThrow();
LABEL_12:
          swift_release();
          swift_release();
          return swift_bridgeObjectRelease();
        }
        goto LABEL_14;
      }
    }
    unint64_t v15 = sub_100074E14();
    sub_10007370C((uint64_t)&type metadata for AutodetectedGenerateCompletions, v15);
    sub_100071CAC(a1, v23);
    sub_100003DD0(&qword_1000C5528);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_11:
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    if ((v19 & 1) == 0)
    {
      if (v18)
      {
        long long v16 = sub_100074370(a3, a4);
        sub_10005857C();
        swift_allocError();
        *(void *)uint64_t v17 = v16;
        *(_OWORD *)(v17 + 8) = 0u;
        *(_OWORD *)(v17 + 24) = 0u;
        *(_OWORD *)(v17 + 40) = 0u;
        *(_OWORD *)(v17 + 56) = 0u;
        *(_OWORD *)(v17 + 72) = 0u;
        *(unsigned char *)(v17 + 88) = 1;
        swift_willThrow();
      }
      goto LABEL_11;
    }
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

unint64_t sub_100072C00()
{
  return 0xD000000000000018;
}

uint64_t sub_100072C1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10007326C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100072C48(uint64_t a1)
{
  unint64_t v2 = sub_100075670();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100072C84(uint64_t a1)
{
  unint64_t v2 = sub_100075670();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100072CC0@<X0>(uint64_t a1@<X8>)
{
  char v6 = 0;
  memset(v5, 0, sizeof(v5));
  uint64_t v2 = sub_100043564((uint64_t)&off_1000BC0C8);
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  uint64_t result = sub_10002B998((uint64_t)v5, v3 + 24, &qword_1000C5158);
  *(unsigned char *)(v3 + 73) = 0;
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 88) = 0;
  *(unsigned char *)(v3 + 96) = -1;
  *(void *)a1 = sub_10007552C;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t sub_100072DA0@<X0>(uint64_t a1@<X8>)
{
  return sub_100072F44((uint64_t (*)(void))sub_1000732F4, a1);
}

uint64_t sub_100072DCC(uint64_t a1)
{
  unint64_t v2 = sub_100075470();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100072E08(uint64_t a1)
{
  unint64_t v2 = sub_100075470();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100072E44@<X0>(uint64_t a1@<X8>)
{
  char v6 = 0;
  memset(v5, 0, sizeof(v5));
  uint64_t v2 = sub_100043564((uint64_t)&off_1000BC100);
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + 24) = 0;
  uint64_t result = sub_10002B998((uint64_t)v5, v3 + 32, &qword_1000C5158);
  *(void *)a1 = sub_10003C760;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t sub_100072F18@<X0>(uint64_t a1@<X8>)
{
  return sub_100072F44((uint64_t (*)(void))sub_100073500, a1);
}

uint64_t sub_100072F44@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_100072F7C(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    uint64_t v14 = *(void *)(a1 + 48) + 24 * v10;
    if ((*(unsigned char *)(v14 + 17) & 1) == 0) {
      uint64_t result = sub_10007E504(*(void *)v14, *(void *)(v14 + 8), *(unsigned char *)(v14 + 16) & 1);
    }
  }
  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v11 >= v6) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v2 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v6) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v6) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v6) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v6) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000730F0@<X0>(uint64_t a1@<X7>, void *a2@<X8>, uint64_t a3)
{
  *a2 = a1;
  a2[1] = a3;
  return swift_bridgeObjectRetain();
}

void *sub_100073110(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = _swiftEmptyArrayStorage;
  uint64_t v20 = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 32;
    do
    {
      sub_100064248((_OWORD *)(v6 + 56 * v5), v18);
      uint64_t v7 = *(void *)(a2 + 16);
      uint64_t v8 = *(void *)(v7 + 16);
      if (v8)
      {
        unint64_t v9 = (void *)(v7 + 32);
        while (*v9 != *(void *)&v18[0])
        {
          v9 += 7;
          if (!--v8) {
            goto LABEL_9;
          }
        }
        sub_1000642B4((uint64_t)v18);
      }
      else
      {
LABEL_9:
        long long v14 = v18[0];
        long long v15 = v18[1];
        long long v16 = v18[2];
        uint64_t v17 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100057058(0, v2[2] + 1, 1);
        }
        uint64_t v2 = v20;
        unint64_t v11 = v20[2];
        unint64_t v10 = v20[3];
        if (v11 >= v10 >> 1)
        {
          sub_100057058((char *)(v10 > 1), v11 + 1, 1);
          uint64_t v2 = v20;
        }
        v2[2] = v11 + 1;
        unint64_t v12 = &v2[7 * v11];
        *((_OWORD *)v12 + 2) = v14;
        *((_OWORD *)v12 + 3) = v15;
        *((_OWORD *)v12 + 4) = v16;
        v12[10] = v17;
      }
      ++v5;
    }
    while (v5 != v3);
  }
  return v2;
}

uint64_t sub_10007326C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000018 && a2 == 0x80000001000A98C0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void *sub_1000732F4(void *a1)
{
  uint64_t v3 = sub_100003DD0(&qword_1000C5C40);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = &_swiftEmptySetSingleton;
  sub_100043564((uint64_t)&off_1000BC2D0);
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  uint64_t v7 = sub_100005090(a1, a1[3]);
  sub_100075670();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    swift_bridgeObjectRelease();
    sub_100005128((uint64_t)a1);
  }
  else
  {
    sub_100003DD0(&qword_1000C5C50);
    sub_100005178(&qword_1000C5C58, &qword_1000C5C50);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = v10;
    sub_100005128((uint64_t)a1);
  }
  return v7;
}

void *sub_100073500(void *a1)
{
  uint64_t v3 = sub_100003DD0(&qword_1000C5C20);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = &_swiftEmptySetSingleton;
  sub_100043564((uint64_t)&off_1000BC308);
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  uint64_t v7 = sub_100005090(a1, a1[3]);
  sub_100075470();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    swift_bridgeObjectRelease();
    sub_100005128((uint64_t)a1);
  }
  else
  {
    sub_100003DD0(&qword_1000C5C30);
    sub_100005178(&qword_1000C5C38, &qword_1000C5C30);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = v10;
    sub_100005128((uint64_t)a1);
  }
  return v7;
}

void *sub_10007370C(uint64_t a1, uint64_t a2)
{
  char v2 = sub_100097770(a1, a2);
  swift_beginAccess();
  unint64_t v3 = v2[5];
  if (v3 >> 62)
  {
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v8) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain_n();
    if (!v4) {
      goto LABEL_6;
    }
  }
  unint64_t v5 = sub_10002E8EC();
  sub_100003DD0(&qword_1000C58E0);
  uint64_t v6 = (void *)swift_allocObject();
  swift_weakInit();
  long long v6[2] = &type metadata for HelpCommand;
  v6[3] = v5;
  swift_weakAssign();
  v6[5] = _swiftEmptyArrayStorage;
  swift_beginAccess();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v2[5] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v2[5] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  swift_weakAssign();
  swift_release();
LABEL_6:
  swift_release();
  return v2;
}

uint64_t sub_100073A34(uint64_t result, uint64_t *a2)
{
  unint64_t v5 = v2;
  unint64_t v6 = *(void *)(result + 16);
  if (v6)
  {
    uint64_t v8 = result;
    uint64_t v9 = result + 32;
    BOOL v10 = *(void *)(result + 32) == 0x6C706D6F632D2D2DLL && *(void *)(result + 40) == 0xED00006E6F697465;
    if (v10 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      uint64_t v57 = v8;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v6 == 1) {
        goto LABEL_36;
      }
      uint64_t v54 = v9;
      uint64_t v12 = 1;
      unint64_t v55 = v6;
      while (2)
      {
        if (v12 == v6)
        {
          __break(1u);
        }
        else
        {
          int64_t v13 = (unint64_t *)(v9 + 16 * v12);
          unint64_t v5 = *v13;
          unint64_t v14 = v13[1];
          unint64_t v58 = v12 + 1;
          BOOL v15 = *v13 == 11565 && v14 == 0xE200000000000000;
          if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            swift_beginAccess();
            unint64_t v4 = a2[5];
            if (v4 >> 62)
            {
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v16)
              {
LABEL_18:
                uint64_t v56 = v12 + 1;
                unint64_t v89 = v4 & 0xC000000000000001;
                uint64_t v17 = 4;
                while (1)
                {
                  uint64_t v18 = v17 - 4;
                  if (v89)
                  {
                    uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                    uint64_t v20 = v17 - 3;
                    if (__OFADD__(v18, 1)) {
                      goto LABEL_58;
                    }
                  }
                  else
                  {
                    uint64_t v19 = *(void *)(v4 + 8 * v17);
                    swift_retain();
                    uint64_t v20 = v17 - 3;
                    if (__OFADD__(v18, 1))
                    {
LABEL_58:
                      __break(1u);
                      goto LABEL_59;
                    }
                  }
                  if ((*(uint64_t (**)(void))(*(void *)(v19 + 24) + 24))() == v5 && v21 == v14) {
                    break;
                  }
                  uint64_t v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v3) {
                    goto LABEL_32;
                  }
                  swift_release();
                  ++v17;
                  if (v20 == v16) {
                    goto LABEL_35;
                  }
                }
                swift_bridgeObjectRelease();
LABEL_32:
                uint64_t v9 = v54;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                a2 = (uint64_t *)v19;
                unint64_t v6 = v55;
                uint64_t v12 = v58;
                if (v58 != v55) {
                  continue;
                }
                goto LABEL_36;
              }
            }
            else
            {
              uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              if (v16) {
                goto LABEL_18;
              }
            }
LABEL_35:
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
LABEL_36:
            sub_10002FDE0();
            swift_allocError();
            *(void *)uint64_t v23 = 3;
            *(_OWORD *)(v23 + 8) = 0u;
            *(_OWORD *)(v23 + 24) = 0u;
            *(_OWORD *)(v23 + 40) = 0u;
            *(_OWORD *)(v23 + 56) = 0u;
            *(void *)(v23 + 72) = 0;
            *(unsigned char *)(v23 + 80) = 15;
            swift_willThrow();
            swift_unknownObjectRelease();
            return swift_release();
          }
          if (v58 == v6) {
            goto LABEL_36;
          }
          uint64_t v3 = v57;
          if (v58 >= v6) {
            goto LABEL_72;
          }
          uint64_t v24 = (uint64_t *)(v9 + 16 * v58);
          uint64_t v9 = *v24;
          unint64_t v5 = v24[1];
          v12 += 2;
          type metadata accessor for __ContiguousArrayStorageBase();
          swift_unknownObjectRetain_n();
          swift_bridgeObjectRetain();
          uint64_t v25 = (void *)swift_dynamicCastClass();
          unint64_t v4 = v2;
          if (!v25)
          {
            swift_unknownObjectRelease();
            uint64_t v25 = _swiftEmptyArrayStorage;
          }
          uint64_t v26 = v25[2];
          swift_release();
          unint64_t v11 = v55;
          if (v26 == v55 - v12)
          {
            long long v27 = (void *)swift_dynamicCastClass();
            if (!v27)
            {
              swift_unknownObjectRelease();
              long long v27 = _swiftEmptyArrayStorage;
            }
            goto LABEL_46;
          }
        }
        break;
      }
      unint64_t v52 = (2 * v11) | 1;
      swift_unknownObjectRelease();
      sub_100056BFC(v3, v54, v12, v52);
      long long v27 = v53;
LABEL_46:
      swift_unknownObjectRelease();
      uint64_t v28 = sub_100053C7C(a2[2], *(void *)(a2[3] + 8), 2, 0, 0, 0);
      unint64_t v30 = v29;
      uint64_t v31 = sub_10007CD60(v9, v5, 0);
      if (v4)
      {
LABEL_73:
        swift_bridgeObjectRelease();
        uint64_t result = swift_unexpectedError();
        __break(1u);
        return result;
      }
      unint64_t v32 = (void *)v31;
      unint64_t v89 = v30;
      swift_bridgeObjectRelease();
      if (v32[2])
      {
        uint64_t v3 = v32[4];
        unint64_t v5 = v32[5];
        unint64_t v4 = v32[6];
        uint64_t v33 = v32[7];
        uint64_t v34 = v32[8];
        sub_100063FAC(v3, v5, v4);
        swift_bridgeObjectRelease();
        uint64_t v35 = (v4 >> 61) & 3;
        if (!v35)
        {
          v86[0] = v3;
          v86[1] = v5;
          v86[2] = v4;
          v86[3] = v33;
          uint64_t v86[4] = v34;
          sub_10006AFF8((uint64_t)v86, v28, v89, (uint64_t)v65);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10006FDE4(v3, v5, v4);
          sub_10002B998((uint64_t)v65, (uint64_t)v66, &qword_1000C5148);
          if (sub_1000353CC((uint64_t)v66) != 1)
          {
            long long v79 = v67;
            long long v80 = v68;
            long long v81 = v69;
            long long v82 = v70;
            long long v75 = v66[4];
            long long v76 = v66[5];
            long long v77 = v66[6];
            long long v78 = v66[7];
            long long v71 = v66[0];
            long long v72 = v66[1];
            long long v73 = v66[2];
            long long v74 = v66[3];
            long long v83 = v67;
            char v84 = v68;
            sub_10002EC5C((uint64_t)&v83, (uint64_t)v85);
            sub_100074E68((uint64_t)&v83);
            sub_1000353E4((uint64_t)v65);
            sub_10002EC5C((uint64_t)v85, (uint64_t)&v87);
            if (v88 == 3)
            {
              uint64_t v38 = v87(v27);
LABEL_65:
              uint64_t v46 = v38;
              swift_release();
              v61[0] = v46;
              sub_100003DD0(&qword_1000C50C8);
              sub_100005178((unint64_t *)&qword_1000C50D0, &qword_1000C50C8);
              uint64_t v47 = BidirectionalCollection<>.joined(separator:)();
              uint64_t v49 = v48;
              swift_bridgeObjectRelease();
              sub_10002FDE0();
              swift_allocError();
              *(void *)uint64_t v50 = v47;
              *(void *)(v50 + 8) = v49;
              *(_OWORD *)(v50 + 16) = 0u;
              *(_OWORD *)(v50 + 32) = 0u;
              *(_OWORD *)(v50 + 48) = 0u;
              *(_OWORD *)(v50 + 64) = 0u;
              *(unsigned char *)(v50 + 80) = 2;
              swift_willThrow();
              swift_unknownObjectRelease();
              swift_release();
              return swift_release();
            }
            sub_100074E9C((uint64_t)&v83);
          }
LABEL_68:
          swift_release();
          sub_10002FDE0();
          swift_allocError();
          *(void *)uint64_t v51 = 3;
          *(_OWORD *)(v51 + 8) = 0u;
          *(_OWORD *)(v51 + 24) = 0u;
          *(_OWORD *)(v51 + 40) = 0u;
          *(_OWORD *)(v51 + 56) = 0u;
          *(void *)(v51 + 72) = 0;
          *(unsigned char *)(v51 + 80) = 15;
          swift_willThrow();
          swift_unknownObjectRelease();
          return swift_release();
        }
        if (v35 != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_36;
        }
        swift_bridgeObjectRetain();
        uint64_t v36 = sub_10005868C(v3, v5);
        unint64_t v58 = (unint64_t)v27;
        uint64_t v56 = v28;
        if (!v37)
        {
LABEL_59:
          uint64_t v39 = v3;
          uint64_t v40 = v5;
          goto LABEL_62;
        }
        if (v36 == 95 && v37 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v39 = v3;
          uint64_t v40 = v5;
          if ((v41 & 1) == 0) {
            goto LABEL_62;
          }
        }
        sub_100034DE0(1uLL, v3, v5);
        sub_10006FDE4(v3, v5, v4);
        uint64_t v39 = static String._fromSubstring(_:)();
        uint64_t v40 = v42;
        swift_bridgeObjectRelease();
LABEL_62:
        swift_bridgeObjectRetain();
        sub_100070CBC(v56, v39, v40, _swiftEmptyArrayStorage, (uint64_t)v59);
        swift_bridgeObjectRelease();
        sub_10002B998((uint64_t)v59, (uint64_t)v60, &qword_1000C5148);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10006FDE4(v3, v5, v4);
        sub_10002B998((uint64_t)v60, (uint64_t)v61, &qword_1000C5148);
        if (sub_1000353CC((uint64_t)v61) != 1)
        {
          uint64_t v43 = v62;
          uint64_t v44 = v63;
          int v45 = v64;
          sub_10002EA40((uint64_t)v62, v63, v64);
          sub_1000353E4((uint64_t)v60);
          if (v45 == 3)
          {
            uint64_t v38 = v43(v58);
            goto LABEL_65;
          }
          sub_10002EBFC((uint64_t)v43, v44, v45);
        }
        goto LABEL_68;
      }
      swift_bridgeObjectRelease();
      __break(1u);
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
  }
  return result;
}

char *sub_100074370(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    unint64_t v4 = (_OWORD *)(a2 + 32);
    swift_bridgeObjectRetain();
    unint64_t v5 = (char *)_swiftEmptyArrayStorage;
    do
    {
      sub_100064248(v4, v19);
      uint64_t v7 = *(void *)&v19[0];
      uint64_t v8 = swift_conformsToProtocol2();
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      if (v8) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 0;
      }
      sub_1000642B4((uint64_t)v19);
      if (v10)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v5 = sub_10005FFD8(0, *((void *)v5 + 2) + 1, 1, v5);
        }
        unint64_t v12 = *((void *)v5 + 2);
        unint64_t v11 = *((void *)v5 + 3);
        if (v12 >= v11 >> 1) {
          unint64_t v5 = sub_10005FFD8((char *)(v11 > 1), v12 + 1, 1, v5);
        }
        *((void *)v5 + 2) = v12 + 1;
        unint64_t v6 = &v5[16 * v12];
        *((void *)v6 + 4) = v10;
        *((void *)v6 + 5) = v9;
      }
      unint64_t v4 = (_OWORD *)((char *)v4 + 56);
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = *((void *)v5 + 2);
  if (!v13 || *(void *)(a1 + 16) != *(void *)&v5[16 * v13 + 16])
  {
    long long v18 = *(_OWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    unint64_t v14 = v5;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v14 = sub_10005FFD8(0, v13 + 1, 1, v5);
    }
    unint64_t v16 = *((void *)v14 + 2);
    unint64_t v15 = *((void *)v14 + 3);
    if (v16 >= v15 >> 1) {
      unint64_t v14 = sub_10005FFD8((char *)(v15 > 1), v16 + 1, 1, v14);
    }
    *((void *)v14 + 2) = v16 + 1;
    *(_OWORD *)&v14[16 * v16 + 32] = v18;
    swift_bridgeObjectRelease();
    return v14;
  }
  return v5;
}

uint64_t sub_10007454C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  uint64_t v6 = result;
  if (a3)
  {
    uint64_t v7 = *(void *)(result + 16);
    BOOL v8 = v7 < a2;
    uint64_t v9 = v7 - a2;
    if (v8)
    {
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    if (a2 < 0)
    {
LABEL_100:
      __break(1u);
      return result;
    }
    if (v9 != 1) {
      return result;
    }
  }
  uint64_t v10 = sub_100074370(a4, a5);
  uint64_t v56 = sub_100033E90(0, (uint64_t)v10);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v53 = v6;
  uint64_t v11 = *(void *)(v6 + 16);
  if (v11 < v5)
  {
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  if (v5 < 0)
  {
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  uint64_t v63 = v6 + 32;
  uint64_t v58 = v11;
  uint64_t v59 = v5;
  if (v11 != v5)
  {
    uint64_t v19 = v5;
    while (v19 < v11)
    {
      uint64_t v20 = (uint64_t *)(v63 + (v19 << 6));
      uint64_t v21 = v20[2];
      if ((v21 & 0x6000000000000000) == 0)
      {
        uint64_t v22 = *(void *)(v56 + 16);
        if (v22)
        {
          uint64_t v23 = *v20;
          uint64_t v24 = v20[1];
          int v25 = v21 & 0xC0;
          uint64_t v26 = (unsigned __int8 *)(v56 + 48);
          do
          {
            uint64_t result = *((void *)v26 - 2);
            uint64_t v27 = *((void *)v26 - 1);
            unsigned int v28 = *v26;
            if (v28 >> 6)
            {
              if (v28 >> 6 == 1)
              {
                if (v25 == 64)
                {
                  if (result == v23 && v27 == v24)
                  {
                    if (((v21 ^ v28) & 1) == 0) {
                      goto LABEL_43;
                    }
                  }
                  else
                  {
                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if ((v21 ^ v28) & 1) == 0 && (result) {
                      goto LABEL_43;
                    }
                  }
                }
                goto LABEL_24;
              }
              if (v25 != 128) {
                goto LABEL_24;
              }
            }
            else if (v21 >= 0x40u)
            {
              goto LABEL_24;
            }
            BOOL v30 = result == v23 && v27 == v24;
            if (v30 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
LABEL_43:
              swift_bridgeObjectRelease();
              sub_100074C38();
              swift_allocError();
              *uint64_t v31 = 0;
              return swift_willThrow();
            }
LABEL_24:
            v26 += 24;
            --v22;
          }
          while (v22);
        }
      }
      ++v19;
      uint64_t v11 = v58;
      uint64_t v5 = v59;
      if (v19 == v58) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
LABEL_8:
  swift_bridgeObjectRelease();
  unint64_t v12 = sub_100074370(a4, a5);
  uint64_t v13 = sub_100033E90(1, (uint64_t)v12);
  uint64_t result = swift_bridgeObjectRelease();
  if (v11 != v5)
  {
    uint64_t v57 = v13;
    unint64_t v52 = (unsigned __int8 *)(v13 + 48);
    uint64_t v32 = v5;
    while (1)
    {
      if (v32 >= v11) {
        goto LABEL_94;
      }
      uint64_t v33 = (uint64_t *)(v63 + (v32 << 6));
      uint64_t v34 = v33[2];
      if ((v34 & 0x6000000000000000) == 0)
      {
        uint64_t v35 = *(void *)(v57 + 16);
        if (v35) {
          break;
        }
      }
LABEL_45:
      ++v32;
      uint64_t v11 = v58;
      uint64_t v5 = v59;
      if (v32 == v58)
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v49 = (void *)(v53 + (v59 << 6) + 48);
        uint64_t v50 = v59;
        while (v50 < v58)
        {
          if ((*v49 & 0x60000000000000C0) == 0)
          {
            if (*(v49 - 2) == 0xD000000000000016 && *(v49 - 1) == 0x80000001000A9800
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              uint64_t v51 = sub_100074370(a4, a5);
              sub_10005857C();
              swift_allocError();
              *(void *)uint64_t v48 = v51;
              *(void *)(v48 + 8) = 1;
              *(_OWORD *)(v48 + 16) = 0u;
              *(_OWORD *)(v48 + 32) = 0u;
              *(_OWORD *)(v48 + 48) = 0u;
              *(_OWORD *)(v48 + 64) = 0u;
              *(void *)(v48 + 80) = 0;
LABEL_92:
              *(unsigned char *)(v48 + 88) = 15;
              return swift_willThrow();
            }
          }
          ++v50;
          v49 += 8;
          if (v58 == v50) {
            goto LABEL_10;
          }
        }
        goto LABEL_95;
      }
    }
    uint64_t v36 = *v33;
    uint64_t v37 = v33[1];
    int v38 = v34 & 0xC0;
    uint64_t v39 = v52;
    while (1)
    {
      uint64_t result = *((void *)v39 - 2);
      uint64_t v40 = *((void *)v39 - 1);
      unsigned int v41 = *v39;
      if (v41 >> 6)
      {
        if (v41 >> 6 == 1)
        {
          if (v38 == 64)
          {
            if (result == v36 && v40 == v37)
            {
              if (((v34 ^ v41) & 1) == 0) {
                goto LABEL_70;
              }
            }
            else
            {
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((v34 ^ v41) & 1) == 0 && (result) {
                goto LABEL_70;
              }
            }
          }
          goto LABEL_51;
        }
        if (v38 != 128) {
          goto LABEL_51;
        }
      }
      else if (v34 >= 0x40u)
      {
        goto LABEL_51;
      }
      BOOL v43 = result == v36 && v40 == v37;
      if (v43 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_70:
        swift_bridgeObjectRelease();
        sub_100074C38();
        swift_allocError();
        *uint64_t v44 = 1;
        return swift_willThrow();
      }
LABEL_51:
      v39 += 24;
      if (!--v35) {
        goto LABEL_45;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_10:
  unint64_t v14 = sub_100074370(a4, a5);
  uint64_t v15 = *((void *)v14 + 2);
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  for (uint64_t i = v14 + 40; ; i += 16)
  {
    (*(void (**)(void *__return_ptr))(*(void *)i + 16))(v60);
    long long v62 = v61;
    long long v17 = v61;
    swift_bridgeObjectRetain();
    sub_10002DDE4((uint64_t)v60);
    sub_100031A24((uint64_t)&v62);
    uint64_t v18 = HIBYTE(*((void *)&v17 + 1)) & 0xFLL;
    if ((*((void *)&v17 + 1) & 0x2000000000000000) == 0) {
      uint64_t v18 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (v18) {
      break;
    }
    if (!--v15) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (v11 != v5)
  {
    int v45 = (void *)(v53 + (v5 << 6) + 48);
    while (v5 < v11)
    {
      if ((*v45 & 0x60000000000000C0) == 0)
      {
        BOOL v46 = *(v45 - 2) == 0x6E6F6973726576 && *(v45 - 1) == 0xE700000000000000;
        if (v46 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
          uint64_t v47 = sub_100074370(a4, a5);
          sub_10005857C();
          swift_allocError();
          *(void *)uint64_t v48 = v47;
          *(_OWORD *)(v48 + 8) = 0u;
          *(_OWORD *)(v48 + 24) = 0u;
          *(_OWORD *)(v48 + 40) = 0u;
          *(_OWORD *)(v48 + 56) = 0u;
          *(_OWORD *)(v48 + 72) = 0u;
          goto LABEL_92;
        }
      }
      ++v5;
      v45 += 8;
      if (v11 == v5) {
        return result;
      }
    }
    goto LABEL_98;
  }
  return result;
}

uint64_t sub_100074B10()
{
  sub_100053658(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  sub_100002804(*(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 73, 7);
}

uint64_t sub_100074B60(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_100074B70(uint64_t a1)
{
  uint64_t v2 = sub_100003DD0(&qword_1000C5BC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100074BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003DD0(&qword_1000C5BC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100074C38()
{
  unint64_t result = qword_1000C5BD0;
  if (!qword_1000C5BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5BD0);
  }
  return result;
}

uint64_t sub_100074C8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100074CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x7FFFFFFFFFFFFF3ELL) != 0x7FFFFFF3ELL) {
    return sub_10006FDE4(a4, a5, a6);
  }
  return result;
}

unint64_t sub_100074D14()
{
  unint64_t result = qword_1000C5BE0;
  if (!qword_1000C5BE0)
  {
    type metadata accessor for ArgumentDecoder();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5BE0);
  }
  return result;
}

void *sub_100074D6C(void *result)
{
  uint64_t v1 = *(void *)(result[3] - 8);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0) {
    return (void *)_swift_slowDealloc(*result, *(void *)(v1 + 64)+ ((*(_DWORD *)(v1 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v1 + 80)), *(_DWORD *)(v1 + 80) | 7);
  }
  return result;
}

unint64_t sub_100074DC0()
{
  unint64_t result = qword_1000C5BE8;
  if (!qword_1000C5BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5BE8);
  }
  return result;
}

unint64_t sub_100074E14()
{
  unint64_t result = qword_1000C5BF0;
  if (!qword_1000C5BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5BF0);
  }
  return result;
}

uint64_t sub_100074E68(uint64_t a1)
{
  return a1;
}

uint64_t sub_100074E9C(uint64_t a1)
{
  return a1;
}

void sub_100074ED0()
{
  if (!qword_1000C5BF8)
  {
    unint64_t v0 = _s19InitializationErrorOMa();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000C5BF8);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AutodetectedGenerateCompletions(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100074FCC(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_10000264C);
}

uint64_t destroy for AutodetectedGenerateCompletions(uint64_t a1)
{
  return sub_100002804(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t *assignWithCopy for AutodetectedGenerateCompletions(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100075048(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_10000264C, (void (*)(uint64_t, uint64_t, uint64_t))sub_100002804);
}

uint64_t *assignWithTake for AutodetectedGenerateCompletions(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000750CC(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_100002804);
}

ValueMetadata *type metadata accessor for AutodetectedGenerateCompletions()
{
  return &type metadata for AutodetectedGenerateCompletions;
}

uint64_t initializeBufferWithCopyOfBuffer for GenerateCompletions(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100074FCC(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_10000263C);
}

uint64_t destroy for GenerateCompletions(uint64_t a1)
{
  return sub_1000027F4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_100074FCC(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for GenerateCompletions(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100075048(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_10000263C, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000027F4);
}

uint64_t *sub_100075048(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *a1 = v7;
  a1[1] = v8;
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for GenerateCompletions(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000750CC(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000027F4);
}

uint64_t *sub_1000750CC(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

ValueMetadata *type metadata accessor for GenerateCompletions()
{
  return &type metadata for GenerateCompletions;
}

unsigned char *storeEnumTagSinglePayload for HelpRequested(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000751F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}