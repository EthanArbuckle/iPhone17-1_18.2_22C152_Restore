uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcClientEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

void __destroy_helper_block_e8_40c17_ZTSN3xpc6objectE(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<coex::Module::State>>::clone(uint64_t a1)
{
  result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F20F23F8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    xpc_object_t xdict = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t xdict = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v5;
LABEL_9:
  xpc_release(v4);
  xpc_object_t v6 = xpc_uint64_create(*(unsigned int *)(a1 + 48));
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_object_t v7 = xdict;
  xpc_dictionary_set_value(xdict, "kMessageId", v6);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v8);
  xpc_object_t v9 = *(xpc_object_t *)(a1 + 40);
  if (v9) {
    xpc_retain(*(xpc_object_t *)(a1 + 40));
  }
  else {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kMessageArgs", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_uint64_create(*(unsigned int *)(a1 + 52));
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSubId", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_connection_send_message(*(xpc_connection_t *)(v2 + 40), xdict);
  v13 = *(NSObject **)(v2 + 72);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    xpc::object::to_string((uint64_t *)__p, (xpc::object *)&xdict);
    if (v16 >= 0) {
      v14 = __p;
    }
    else {
      v14 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315138;
    v19 = v14;
    _os_log_debug_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEBUG, "#D Sending Message: \n\t%s\n", buf, 0xCu);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v7 = xdict;
  }
  xpc_release(v7);
}

void sub_1C5769DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableINS1_9XpcServerEE15execute_wrappedIZZZN17ABMServerInternal4initENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKN3abm9OverridesEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISJ_NS7_14default_deleteISJ_EEEEENUlPvE_8__invokeESS_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  xpc_object_t v3 = *(void **)*a1;
  xpc_object_t v4 = (void **)(*a1 + 8);
  if (*(char *)(*a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, (const std::string::value_type *)v2[1], v2[2]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v14.__r_.__value_.__r.__words[2] = *(void *)(*a1 + 24);
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  }
  xpc_object_t v6 = (ctu *)v2[4];
  v13 = v6;
  if (v6) {
    CFRetain(v6);
  }
  xpc_object_t v7 = (const void *)v2[5];
  if (v7) {
    xpc_object_t v8 = _Block_copy(v7);
  }
  else {
    xpc_object_t v8 = 0;
  }
  xpc_object_t v12 = v8;
  ABMServerInternal::broadcast_sync(v3, (uint64_t)&v14, &v13, &v12);
  if (v8) {
    _Block_release(v8);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    xpc_object_t v9 = (const void *)v2[5];
    if (!v9) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  xpc_object_t v9 = (const void *)v2[5];
  if (v9) {
LABEL_17:
  }
    _Block_release(v9);
LABEL_18:
  xpc_object_t v10 = (const void *)v2[4];
  if (v10) {
    CFRelease(v10);
  }
  if (*((char *)v2 + 31) < 0) {
    operator delete(*v4);
  }
  operator delete(v2);
  xpc_object_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_1C5769FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v20 = *(const void **)(v17 + 40);
  if (v20) {
    _Block_release(v20);
  }
  v21 = *(const void **)(v17 + 32);
  if (v21) {
    CFRelease(v21);
  }
  if (*(char *)(v17 + 31) < 0) {
    operator delete(*v18);
  }
  operator delete((void *)v17);
  v22 = (std::__shared_weak_count *)v16[2];
  if (v22)
  {
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void boost::detail::function::void_function_obj_invoker2<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::invoke(uint64_t a1, void *a2, int a3)
{
  xpc_object_t v4 = a2 + 1;
  long long v5 = (void *)a2[1];
  v27 = (void *)*a2;
  v28 = v5;
  if (a2[2])
  {
    v5[2] = &v28;
    *a2 = v4;
    *xpc_object_t v4 = 0;
    a2[2] = 0;
    xpc_object_t v7 = *(NSObject **)a1;
    xpc_object_t v6 = *(const void **)(a1 + 8);
    if (v6) {
      goto LABEL_3;
    }
LABEL_11:
    xpc_object_t v9 = 0;
    goto LABEL_12;
  }
  v27 = &v28;
  xpc_object_t v7 = *(NSObject **)a1;
  xpc_object_t v6 = *(const void **)(a1 + 8);
  if (!v6) {
    goto LABEL_11;
  }
LABEL_3:
  xpc_object_t v8 = _Block_copy(v6);
  xpc_object_t v9 = v8;
  if (!v8)
  {
LABEL_12:
    char v20 = 1;
LABEL_13:
    unint64_t v32 = (unint64_t)boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>(dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>)::stored_vtable;
    *(void *)&long long v33 = 0;
    goto LABEL_23;
  }
  xpc_object_t v10 = _Block_copy(v8);
  xpc_object_t v11 = v10;
  if (!v10)
  {
    char v20 = 0;
    goto LABEL_13;
  }
  xpc_object_t v12 = _Block_copy(v10);
  v13 = v12;
  if (v12)
  {
    std::string v14 = _Block_copy(v12);
    v15 = v14;
    if (v14)
    {
      char v16 = _Block_copy(v14);
      uint64_t v17 = v16;
      if (v16)
      {
        v18 = _Block_copy(v16);
        v19 = v18;
        if (v18)
        {
          *(void *)&long long v33 = _Block_copy(v18);
          _Block_release(v19);
        }
        else
        {
          *(void *)&long long v33 = 0;
        }
        _Block_release(v17);
      }
      else
      {
        *(void *)&long long v33 = 0;
      }
      _Block_release(v15);
    }
    else
    {
      *(void *)&long long v33 = 0;
    }
    unint64_t v32 = (unint64_t)boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>(dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>)::stored_vtable;
    _Block_release(v13);
  }
  else
  {
    unint64_t v32 = (unint64_t)boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>(dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>)::stored_vtable;
    *(void *)&long long v33 = 0;
  }
  _Block_release(v11);
  char v20 = 0;
LABEL_23:
  v31[0] = 0;
  v31[1] = 0;
  v30 = v31;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v30, v27, &v28);
  v21 = operator new(0x18uLL);
  v21[1] = 0;
  v21[2] = 0;
  void *v21 = v21 + 1;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(v21, v30, v31);
  v22 = operator new(4uLL);
  _DWORD *v22 = a3;
  v23 = (char *)operator new(0x20uLL);
  v24 = v23;
  *(void *)v23 = 0;
  unint64_t v25 = v32;
  if (v32)
  {
    *(void *)v23 = v32;
    if (v25)
    {
      *(_OWORD *)(v23 + 8) = v33;
      *((void *)v23 + 3) = v34;
    }
    else
    {
      (*(void (**)(long long *, char *, void))(v25 & 0xFFFFFFFFFFFFFFFELL))(&v33, v23 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvNSt3__13mapIPKcNS3_4listINS3_4pairIyjEENS3_9allocatorIS9_EEEENS3_4lessIS6_EENSA_INS8_IKS6_SC_EEEEEEN4coex5SubIdEEEESI_SK__block_invoke;
  block[3] = &__block_descriptor_tmp_410;
  block[4] = v24;
  block[5] = v21;
  block[6] = v22;
  dispatch_async(v7, block);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v31[0]);
  if (v32)
  {
    if ((v32 & 1) == 0)
    {
      v26 = *(void (**)(long long *, long long *, uint64_t))(v32 & 0xFFFFFFFFFFFFFFFELL);
      if (v26) {
        v26(&v33, &v33, 2);
      }
    }
    unint64_t v32 = 0;
  }
  if ((v20 & 1) == 0) {
    _Block_release(v9);
  }
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v28);
}

void sub_1C576A370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  operator delete(v17);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a14);
  boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>::~function(&a16);
  if ((v18 & 1) == 0) {
    _Block_release(v16);
  }
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a11);
  _Unwind_Resume(a1);
}

void *std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    xpc_object_t v3 = a2;
    xpc_object_t v4 = result + 1;
    v24 = a3;
    unint64_t v25 = (void **)result;
    while (1)
    {
      long long v5 = (uint64_t *)result[1];
      xpc_object_t v6 = v4;
      if ((void *)*result != v4)
      {
        xpc_object_t v7 = (void *)result[1];
        xpc_object_t v8 = v4;
        if (v5)
        {
          do
          {
            xpc_object_t v6 = v7;
            xpc_object_t v7 = (void *)v7[1];
          }
          while (v7);
        }
        else
        {
          do
          {
            xpc_object_t v6 = (void *)v8[2];
            BOOL v9 = *v6 == (void)v8;
            xpc_object_t v8 = v6;
          }
          while (v9);
        }
        unint64_t v10 = v3[4];
        if (v6[4] >= v10) {
          break;
        }
      }
      if (v5) {
        xpc_object_t v11 = (uint64_t **)v6;
      }
      else {
        xpc_object_t v11 = (uint64_t **)v4;
      }
      if (v5) {
        xpc_object_t v12 = (uint64_t **)(v6 + 1);
      }
      else {
        xpc_object_t v12 = (uint64_t **)v4;
      }
      if (!*v12) {
        goto LABEL_25;
      }
LABEL_31:
      v22 = (void *)v3[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (void *)v3[2];
          BOOL v9 = *v23 == (void)v3;
          xpc_object_t v3 = v23;
        }
        while (!v9);
      }
      xpc_object_t v3 = v23;
      result = v25;
      if (v23 == a3) {
        return result;
      }
    }
    xpc_object_t v12 = (uint64_t **)v4;
    xpc_object_t v11 = (uint64_t **)v4;
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          xpc_object_t v11 = (uint64_t **)v5;
          unint64_t v13 = v5[4];
          if (v13 <= v10) {
            break;
          }
          long long v5 = *v11;
          xpc_object_t v12 = v11;
          if (!*v11) {
            goto LABEL_25;
          }
        }
        if (v13 >= v10) {
          goto LABEL_31;
        }
        long long v5 = v11[1];
        if (!v5)
        {
          xpc_object_t v12 = v11 + 1;
          break;
        }
      }
    }
LABEL_25:
    std::string v14 = (uint64_t *)operator new(0x40uLL);
    v15 = v14;
    char v16 = v14 + 5;
    v14[4] = v3[4];
    v14[5] = (uint64_t)(v14 + 5);
    v14[6] = (uint64_t)(v14 + 5);
    v14[7] = 0;
    uint64_t v17 = v3[6];
    if ((void *)v17 != v3 + 5)
    {
      uint64_t v18 = 1;
      v19 = v14 + 5;
      do
      {
        char v20 = operator new(0x20uLL);
        v20[1] = *(_OWORD *)(v17 + 16);
        *(void *)char v20 = v19;
        *((void *)v20 + 1) = v16;
        v19[1] = v20;
        v15[5] = (uint64_t)v20;
        v15[7] = v18;
        uint64_t v17 = *(void *)(v17 + 8);
        ++v18;
        v19 = v20;
      }
      while ((void *)v17 != v3 + 5);
    }
    uint64_t *v15 = 0;
    v15[1] = 0;
    v15[2] = (uint64_t)v11;
    *xpc_object_t v12 = v15;
    v21 = (void *)**v25;
    if (v21)
    {
      *unint64_t v25 = v21;
      v15 = *v12;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v25[1], v15);
    v25[2] = (void *)((char *)v25[2] + 1);
    a3 = v24;
    goto LABEL_31;
  }
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    xpc_object_t v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), long long v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *xpc_object_t v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        BOOL v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          xpc_object_t v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        *BOOL v9 = v2;
        *(void *)(v2 + 16) = v9;
        xpc_object_t v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *xpc_object_t v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + 24) = v3 == result;
    *long long v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    long long v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      xpc_object_t v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    xpc_object_t v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + 24) = 1;
  *((unsigned char *)v3 + 24) = 0;
  unint64_t v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  uint64_t *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001C599D87DLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001C599D87DLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    int v6 = *a1;
    if (*a1) {
      int v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      uint64_t v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvNSt3__13mapIPKcNS3_4listINS3_4pairIyjEENS3_9allocatorIS9_EEEENS3_4lessIS6_EENSA_INS8_IKS6_SC_EEEEEEN4coex5SubIdEEEESI_SK__block_invoke(uint64_t a1)
{
  xpc_object_t v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v11.__imp_.__imp_ = 0;
  uint64_t v12 = 0;
  v11.__vftable = (std::runtime_error_vtbl *)&v11.__imp_;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v11, *(void **)v2, (void *)(v2 + 8));
  if (!*v3)
  {
    std::runtime_error::runtime_error(&v13, "call to empty boost::function");
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1F20F2330;
    boost::throw_exception<boost::bad_function_call>(&v13);
  }
  uint64_t v4 = **(unsigned int **)(a1 + 48);
  long long v5 = *(void (**)(void *, std::runtime_error *, uint64_t))((*v3 & 0xFFFFFFFFFFFFFFFELL) + 8);
  std::runtime_error v13 = v11;
  uint64_t v14 = v12;
  if (v12)
  {
    *((void *)v11.__imp_.__imp_ + 2) = &v13.__imp_;
    v11.__vftable = (std::runtime_error_vtbl *)&v11.__imp_;
    v11.__imp_.__imp_ = 0;
    uint64_t v12 = 0;
  }
  else
  {
    v13.__vftable = (std::runtime_error_vtbl *)&v13.__imp_;
  }
  v5(v3 + 1, &v13, v4);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy((void *)v13.__imp_.__imp_);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy((void *)v11.__imp_.__imp_);
  int v6 = *(uint64_t **)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = *v6;
    if (*v6)
    {
      if ((v7 & 1) == 0)
      {
        int v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 & 0xFFFFFFFFFFFFFFFELL);
        if (v8) {
          v8(v6 + 1, v6 + 1, 2);
        }
      }
      *int v6 = 0;
    }
    operator delete(v6);
  }
  BOOL v9 = *(void ***)(a1 + 40);
  if (v9)
  {
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v9[1]);
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 48);
  if (v10) {
    operator delete(v10);
  }
}

void sub_1C576AA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, std::runtime_error a12)
{
}

void sub_1C576AA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_1C576AA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_1C576AA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(*a1);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a1[1]);
    if (a1[7])
    {
      uint64_t v3 = a1[5];
      uint64_t v2 = (uint64_t *)a1[6];
      uint64_t v4 = *v2;
      *(void *)(v4 + 8) = *(void *)(v3 + 8);
      **(void **)(v3 + 8) = v4;
      a1[7] = 0;
      if (v2 != a1 + 5)
      {
        do
        {
          long long v5 = (uint64_t *)v2[1];
          operator delete(v2);
          uint64_t v2 = v5;
        }
        while (v5 != a1 + 5);
      }
    }
    operator delete(a1);
  }
}

void boost::detail::function::void_function_obj_invoker2<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::invoke(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)a2[1];
  long long v5 = (void **)*a2;
  int v6 = v4;
  if (a2[2])
  {
    v4[2] = &v6;
    *a2 = v3;
    *uint64_t v3 = 0;
    a2[2] = 0;
  }
  else
  {
    long long v5 = &v6;
  }
  (*(void (**)(uint64_t, void ***))(v2 + 16))(v2, &v5);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v6);
}

void sub_1C576AB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNSt3__13mapIPKcNS9_4listINS9_4pairIyjEENS9_9allocatorISF_EEEENS9_4lessISC_EENSG_INSE_IKSC_SI_EEEEEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSJ_IiEENS6_8functionISQ_EENSU_IFvRKNS7_10connectionESO_SP_EEENS7_5mutexEEES3_vJSO_SP_EEEDTcl7connectfp_cvNS9_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FS17_S19_E_block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  long long v5 = (void (*)(void *, void ***, uint64_t))a1[5];
  uint64_t v4 = a1[6];
  int v6 = (void *)(a1[4] + (v4 >> 1) - 72);
  if (v4) {
    long long v5 = *(void (**)(void *, void ***, uint64_t))(*v6 + v5);
  }
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v7 = v8;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v7, *(void **)a2, (void *)(a2 + 8));
  v5(v6, &v7, a3);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v8[0]);
}

void sub_1C576AC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_1C576AC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_39(void *a1, uint64_t a2, int *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  v42 = v7;
  if (!v7) {
    return;
  }
  if (!a1[5])
  {
    std::runtime_error v13 = v7;
LABEL_52:
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return;
  }
  int v8 = *(NSObject **)(v6 + 88);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *a3;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v9;
    _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I Received trigger 0x%x", buf, 8u);
  }
  *(void *)buf = 0;
  v44 = 0;
  uint64_t v10 = (std::__shared_weak_count *)a1[8];
  if (v10)
  {
    v44 = std::__shared_weak_count::lock(v10);
    if (v44) {
      *(void *)buf = a1[7];
    }
  }
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v11) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v11);
      xpc_object_t v12 = v11;
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v11 = 0;
  }
  xpc_release(v11);
  unsigned int AppID = awd::AppContext::getAppID(*(awd::AppContext **)buf);
  xpc_object_t v15 = xpc_int64_create(AppID);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4D300], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = xpc_int64_create(a3[1]);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C1F0], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  xpc_object_t v19 = xpc_int64_create(a3[2]);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C278], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  xpc_object_t v21 = xpc_int64_create(*a3);
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C1A8], v21);
  xpc_object_t v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  xpc_object_t v23 = xpc_int64_create(*((void *)a3 + 2));
  if (!v23) {
    xpc_object_t v23 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C270], v23);
  xpc_object_t v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  unint64_t v25 = (const void *)*MEMORY[0x1E4F4C148];
  size_t v26 = strlen((const char *)*MEMORY[0x1E4F4C148]);
  if (v26 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    uint64_t v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v30 = v26 | 7;
    }
    uint64_t v31 = v30 + 1;
    v28 = (void **)operator new(v30 + 1);
    __dst[1] = v27;
    unint64_t v40 = v31 | 0x8000000000000000;
    __dst[0] = v28;
LABEL_34:
    memmove(v28, v25, (size_t)v27);
    *((unsigned char *)v27 + (void)v28) = 0;
    xpc_object_t object = v12;
    if (v12) {
      goto LABEL_30;
    }
LABEL_35:
    xpc_object_t object = xpc_null_create();
    goto LABEL_36;
  }
  HIBYTE(v40) = v26;
  v28 = __dst;
  if (v26) {
    goto LABEL_34;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t object = v12;
  if (!v12) {
    goto LABEL_35;
  }
LABEL_30:
  xpc_retain(v12);
LABEL_36:
  xpc::bridge((uint64_t *)&cf, (xpc *)&object, v29);
  CFTypeRef v32 = cf;
  if (cf && (CFTypeID v33 = CFGetTypeID(cf), v33 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v38 = v32;
    CFRetain(v32);
  }
  else
  {
    CFTypeRef v38 = 0;
  }
  aBlock = 0;
  Service::broadcastEvent(v6, (uint64_t)__dst, &v38, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
  if (SHIBYTE(v40) < 0) {
    operator delete(__dst[0]);
  }
  xpc_release(v12);
  uint64_t v34 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  std::runtime_error v13 = v42;
  if (v42) {
    goto LABEL_52;
  }
}

void sub_1C576B130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, char a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_42(void *a1, int *a2, int a3, uint64_t a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  long long v5 = (std::__shared_weak_count *)a1[6];
  if (!v5) {
    return;
  }
  uint64_t v9 = a1[4];
  uint64_t v10 = std::__shared_weak_count::lock(v5);
  v51 = v10;
  if (!v10) {
    return;
  }
  if (!a1[5])
  {
    xpc_object_t v15 = v10;
LABEL_60:
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    return;
  }
  xpc_object_t v11 = *(NSObject **)(v9 + 88);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = a2[1];
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a3;
    LOWORD(v53) = 1024;
    *(_DWORD *)((char *)&v53 + 2) = v12;
    _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I Received segment %d of metric 0x%x", buf, 0xEu);
  }
  xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
  if (v13 || (xpc_object_t v13 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v13) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v13);
      xpc_object_t v14 = v13;
    }
    else
    {
      xpc_object_t v14 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v14 = xpc_null_create();
    xpc_object_t v13 = 0;
  }
  xpc_release(v13);
  *(void *)buf = 0;
  v53 = 0;
  xpc_object_t v16 = (std::__shared_weak_count *)a1[8];
  if (v16)
  {
    xpc_object_t v16 = std::__shared_weak_count::lock(v16);
    v53 = v16;
    if (v16)
    {
      xpc_object_t v16 = (std::__shared_weak_count *)a1[7];
      *(void *)buf = v16;
    }
  }
  unsigned int AppID = awd::AppContext::getAppID((awd::AppContext *)v16);
  xpc_object_t v18 = xpc_int64_create(AppID);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4D300], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = xpc_int64_create(a2[3]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4C1F0], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_int64_create(*a2);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4C178], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_int64_create(a2[1]);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4C130], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  xpc_object_t v26 = xpc_BOOL_create(*((unsigned char *)a2 + 16));
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4C0E8], v26);
  xpc_object_t v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  xpc_object_t v28 = xpc_BOOL_create(*((unsigned char *)a2 + 17));
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4C2C0], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  if (*((unsigned char *)a2 + 24))
  {
    xpc_object_t v30 = xpc_int64_create(a2[5]);
    if (!v30) {
      xpc_object_t v30 = xpc_null_create();
    }
    xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4C2B8], v30);
    xpc_object_t v31 = xpc_null_create();
    xpc_release(v30);
    xpc_release(v31);
  }
  xpc_object_t v32 = xpc_data_create(*(const void **)a4, *(void *)(a4 + 8) - *(void *)a4);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4C0F0], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  uint64_t v34 = (const void *)*MEMORY[0x1E4F4C128];
  size_t v35 = strlen((const char *)*MEMORY[0x1E4F4C128]);
  if (v35 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    uint64_t v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v39 = v35 | 7;
    }
    uint64_t v40 = v39 + 1;
    v37 = (void **)operator new(v39 + 1);
    __dst[1] = v36;
    unint64_t v49 = v40 | 0x8000000000000000;
    __dst[0] = v37;
LABEL_42:
    memmove(v37, v34, (size_t)v36);
    *((unsigned char *)v36 + (void)v37) = 0;
    xpc_object_t object = v14;
    if (v14) {
      goto LABEL_38;
    }
LABEL_43:
    xpc_object_t object = xpc_null_create();
    goto LABEL_44;
  }
  HIBYTE(v49) = v35;
  v37 = __dst;
  if (v35) {
    goto LABEL_42;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t object = v14;
  if (!v14) {
    goto LABEL_43;
  }
LABEL_38:
  xpc_retain(v14);
LABEL_44:
  xpc::bridge((uint64_t *)&cf, (xpc *)&object, v38);
  CFTypeRef v41 = cf;
  if (cf && (CFTypeID v42 = CFGetTypeID(cf), v42 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v47 = v41;
    CFRetain(v41);
  }
  else
  {
    CFTypeRef v47 = 0;
  }
  aBlock = 0;
  Service::broadcastEvent(v9, (uint64_t)__dst, &v47, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
  if (SHIBYTE(v49) < 0) {
    operator delete(__dst[0]);
  }
  v43 = v53;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  xpc_release(v14);
  xpc_object_t v15 = v51;
  if (v51) {
    goto LABEL_60;
  }
}

void sub_1C576B810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, char a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void Service::broadcastEvent(uint64_t a1, uint64_t a2, const void **a3, const void **a4)
{
  long long v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5) {
    return;
  }
  uint64_t v9 = std::__shared_weak_count::lock(v5);
  xpc_object_t v19 = v9;
  if (!v9) {
    return;
  }
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v18 = v11;
  if (!v11) {
    goto LABEL_19;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  int v12 = *a3;
  xpc_object_t v16 = v12;
  if (v12) {
    CFRetain(v12);
  }
  if (*a4)
  {
    xpc_object_t v13 = _Block_copy(*a4);
    xpc_object_t v15 = v13;
    uint64_t v14 = *(void *)(v11 + 184);
    if (!v14) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  xpc_object_t v13 = 0;
  xpc_object_t v15 = 0;
  uint64_t v14 = *(void *)(v11 + 184);
  if (v14) {
LABEL_13:
  }
    dispatch::block<void({block_pointer})(std::string,ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::block<void({block_pointer})(void)>)>::operator()<std::string const&,ctu::cf::CFSharedRef<__CFDictionary const>&,dispatch::block<void({block_pointer})(void)>&>(v14, (uint64_t)&v17, &v16, &v15);
LABEL_14:
  if (v13) {
    _Block_release(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_19:
    if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_22:
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    return;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_22;
  }
}

void sub_1C576BB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C576BB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (v18) {
    _Block_release(v18);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void dispatch::block<void({block_pointer})(std::string,ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::block<void({block_pointer})(void)>)>::operator()<std::string const&,ctu::cf::CFSharedRef<__CFDictionary const>&,dispatch::block<void({block_pointer})(void)>&>(uint64_t a1, uint64_t a2, const void **a3, void **a4)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v7 = *a3;
    CFTypeRef cf = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v11 = *(std::string *)a2;
  uint64_t v7 = *a3;
  CFTypeRef cf = v7;
  if (v7) {
LABEL_5:
  }
    CFRetain(v7);
LABEL_6:
  int v8 = *a4;
  if (*a4) {
    int v8 = _Block_copy(v8);
  }
  aBlock = v8;
  (*(void (**)(uint64_t, std::string *, CFTypeRef *, void **))(a1 + 16))(a1, &v11, &cf, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1C576BC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke_3(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  uint64_t v6 = *(void **)(a1 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v7 = *a3;
    aBlock[0] = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string __p = *(std::string *)a2;
  uint64_t v7 = *a3;
  aBlock[0] = v7;
  if (v7) {
LABEL_5:
  }
    CFRetain(v7);
LABEL_6:
  int v8 = *a4;
  if (*a4) {
    int v8 = _Block_copy(v8);
  }
  aBlock[1] = v8;
  uint64_t v9 = (std::__shared_weak_count *)v6[2];
  if (!v9 || (uint64_t v10 = v6[1], (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v12 = v11;
  xpc_object_t v13 = (char *)operator new(0x30uLL);
  *(void *)xpc_object_t v13 = v6;
  uint64_t v14 = (std::string *)(v13 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v13 + 3) = *((void *)&__p.__r_.__value_.__l + 2);
  }
  *((_OWORD *)v13 + 2) = *(_OWORD *)aBlock;
  aBlock[0] = 0;
  aBlock[1] = 0;
  xpc_object_t v15 = v6[3];
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v16 = operator new(0x18uLL);
  *xpc_object_t v16 = v13;
  v16[1] = v10;
  v16[2] = v12;
  dispatch_async_f(v15, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableINS1_9XpcServerEE15execute_wrappedIZZZN17ABMServerInternal4initENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKN3abm9OverridesEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISJ_NS7_14default_deleteISJ_EEEEENUlPvE_8__invokeESS_);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    std::string v17 = aBlock[1];
    if (!aBlock[1]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  std::string v17 = aBlock[1];
  if (aBlock[1]) {
LABEL_17:
  }
    _Block_release(v17);
LABEL_18:
  if (aBlock[0]) {
    CFRelease(aBlock[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void coex::Module::State::handleDesenseFrequencyReport_sync(uint64_t a1, void *a2, int a3)
{
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  if (a2[2])
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v7 = v6;
    uint64_t v8 = MEMORY[0x1E4F14590];
    uint64_t v158 = a1;
    if (v6)
    {
      xpc_object_t v173 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v173 = v7;
      if (!v7)
      {
        xpc_object_t v10 = xpc_null_create();
        xpc_object_t v7 = 0;
        goto LABEL_11;
      }
    }
    if (MEMORY[0x1C8792D30](v7) == v8)
    {
      xpc_retain(v7);
      goto LABEL_12;
    }
    xpc_object_t v10 = xpc_null_create();
LABEL_11:
    xpc_object_t v173 = v10;
LABEL_12:
    int v157 = a3;
    xpc_release(v7);
    std::string v11 = (void *)*a2;
    if ((void *)*a2 != a2 + 1)
    {
      __s = (char *)*MEMORY[0x1E4FB9E10];
      v163 = (char *)*MEMORY[0x1E4FB9E08];
      v161 = (char *)*MEMORY[0x1E4FB9E28];
      v162 = (char *)*MEMORY[0x1E4FB9E18];
      v159 = (char *)*MEMORY[0x1E4FB9E20];
      v160 = (char *)*MEMORY[0x1E4FB9E00];
      while (1)
      {
        v170 = &v170;
        v171 = &v170;
        uint64_t v172 = 0;
        uint64_t v12 = v11[6];
        if ((void *)v12 != v11 + 5)
        {
          xpc_object_t v13 = &v170;
          uint64_t v14 = 1;
          do
          {
            xpc_object_t v15 = operator new(0x20uLL);
            v15[1] = *(_OWORD *)(v12 + 16);
            *(void *)xpc_object_t v15 = v13;
            *((void *)v15 + 1) = &v170;
            v13[1] = v15;
            v170 = v15;
            uint64_t v172 = v14;
            uint64_t v12 = *(void *)(v12 + 8);
            ++v14;
            xpc_object_t v13 = v15;
          }
          while ((void *)v12 != v11 + 5);
        }
        xpc_object_t v16 = xpc_array_create(0, 0);
        if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v16) == MEMORY[0x1E4F14568])
          {
            xpc_retain(v16);
            xpc_object_t v17 = v16;
          }
          else
          {
            xpc_object_t v17 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v17 = xpc_null_create();
          xpc_object_t v16 = 0;
        }
        xpc_release(v16);
        for (i = v171; i != &v170; i = (void *)i[1])
        {
          xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
          if (v19 || (xpc_object_t v19 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C8792D30](v19) == v8)
            {
              xpc_retain(v19);
              xpc_object_t v20 = v19;
            }
            else
            {
              xpc_object_t v20 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v20 = xpc_null_create();
            xpc_object_t v19 = 0;
          }
          xpc_release(v19);
          xpc_object_t v21 = xpc_uint64_create(i[2]);
          if (!v21) {
            xpc_object_t v21 = xpc_null_create();
          }
          xpc_dictionary_set_value(v20, "kWCMCellular_DesenseNetworkConfiguration_CenterFreq", v21);
          xpc_object_t v22 = xpc_null_create();
          xpc_release(v21);
          xpc_release(v22);
          xpc_object_t v23 = xpc_int64_create(*((unsigned int *)i + 6));
          if (!v23) {
            xpc_object_t v23 = xpc_null_create();
          }
          xpc_dictionary_set_value(v20, "kWCMCellular_DesenseNetworkConfiguration_Bandwidth", v23);
          xpc_object_t v24 = xpc_null_create();
          xpc_release(v23);
          xpc_release(v24);
          xpc_array_append_value(v17, v20);
          xpc_release(v20);
        }
        if (MEMORY[0x1C8792D30](v17) == MEMORY[0x1E4F14568] && xpc_array_get_count(v17))
        {
          xpc_object_t object = v17;
          xpc_object_t v17 = xpc_null_create();
        }
        else
        {
          xpc_object_t object = xpc_null_create();
        }
        xpc_release(v17);
        if (v172)
        {
          xpc_object_t v26 = v170;
          xpc_object_t v25 = v171;
          uint64_t v27 = *v171;
          *(void *)(v27 + 8) = *((void *)v170 + 1);
          **((void **)v26 + 1) = v27;
          uint64_t v172 = 0;
          if (v25 != &v170)
          {
            do
            {
              xpc_object_t v28 = (void *)v25[1];
              operator delete(v25);
              xpc_object_t v25 = v28;
            }
            while (v28 != &v170);
          }
        }
        xpc_object_t v29 = (const char *)v11[4];
        size_t v30 = strlen(v29);
        if (v30 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v31 = v30;
        if (v30 >= 0x17) {
          break;
        }
        HIBYTE(v169) = v30;
        xpc_object_t v32 = buf;
        if (v30) {
          goto LABEL_50;
        }
LABEL_51:
        v32[v31] = 0;
        size_t v35 = strlen(__s);
        if (v35 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v36 = v35;
        if (v35 >= 0x17)
        {
          uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v35 | 7) != 0x17) {
            uint64_t v38 = v35 | 7;
          }
          uint64_t v39 = v38 + 1;
          p_dst = (long long *)operator new(v38 + 1);
          *((void *)&__dst + 1) = v36;
          int64_t v175 = v39 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
LABEL_58:
          memmove(p_dst, __s, v36);
          goto LABEL_59;
        }
        HIBYTE(v175) = v35;
        p_dst = &__dst;
        if (v35) {
          goto LABEL_58;
        }
LABEL_59:
        *((unsigned char *)p_dst + v36) = 0;
        int v40 = SHIBYTE(v169);
        CFTypeRef v41 = *(uint8_t **)buf;
        if (v169 >= 0) {
          CFTypeID v42 = buf;
        }
        else {
          CFTypeID v42 = *(uint8_t **)buf;
        }
        int v43 = SHIBYTE(v175);
        v44 = (void *)__dst;
        if (v175 >= 0) {
          uint64_t v45 = (const char *)&__dst;
        }
        else {
          uint64_t v45 = (const char *)__dst;
        }
        int v46 = strcasecmp((const char *)v42, v45);
        if (v43 < 0)
        {
          operator delete(v44);
          if ((v40 & 0x80000000) == 0)
          {
LABEL_67:
            if (!v46) {
              goto LABEL_74;
            }
            goto LABEL_68;
          }
        }
        else if ((v40 & 0x80000000) == 0)
        {
          goto LABEL_67;
        }
        operator delete(v41);
        if (!v46)
        {
LABEL_74:
          v51 = object;
          if (object)
          {
            xpc_retain(object);
            xpc_object_t v52 = object;
          }
          else
          {
            xpc_object_t v52 = xpc_null_create();
          }
          xpc_dictionary_set_value(v173, "kWCMCellular_DesenseFreqReport_UplinkFrequency", v52);
          xpc_object_t v91 = xpc_null_create();
          xpc_release(v52);
          xpc_release(v91);
          goto LABEL_230;
        }
LABEL_68:
        CFTypeRef v47 = (const char *)v11[4];
        size_t v48 = strlen(v47);
        if (v48 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v49 = v48;
        if (v48 >= 0x17)
        {
          uint64_t v53 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v48 | 7) != 0x17) {
            uint64_t v53 = v48 | 7;
          }
          uint64_t v54 = v53 + 1;
          v50 = operator new(v53 + 1);
          size_t v168 = v49;
          int64_t v169 = v54 | 0x8000000000000000;
          *(void *)buf = v50;
LABEL_79:
          memmove(v50, v47, v49);
          goto LABEL_80;
        }
        HIBYTE(v169) = v48;
        v50 = buf;
        if (v48) {
          goto LABEL_79;
        }
LABEL_80:
        *((unsigned char *)v50 + v49) = 0;
        size_t v55 = strlen(v163);
        if (v55 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v56 = v55;
        if (v55 >= 0x17)
        {
          uint64_t v58 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v55 | 7) != 0x17) {
            uint64_t v58 = v55 | 7;
          }
          uint64_t v59 = v58 + 1;
          v57 = (long long *)operator new(v58 + 1);
          *((void *)&__dst + 1) = v56;
          int64_t v175 = v59 | 0x8000000000000000;
          *(void *)&long long __dst = v57;
LABEL_87:
          memmove(v57, v163, v56);
          goto LABEL_88;
        }
        HIBYTE(v175) = v55;
        v57 = &__dst;
        if (v55) {
          goto LABEL_87;
        }
LABEL_88:
        *((unsigned char *)v57 + v56) = 0;
        int v60 = SHIBYTE(v169);
        v61 = *(uint8_t **)buf;
        if (v169 >= 0) {
          v62 = buf;
        }
        else {
          v62 = *(uint8_t **)buf;
        }
        int v63 = SHIBYTE(v175);
        v64 = (void *)__dst;
        if (v175 >= 0) {
          v65 = (const char *)&__dst;
        }
        else {
          v65 = (const char *)__dst;
        }
        int v66 = strcasecmp((const char *)v62, v65);
        if (v63 < 0)
        {
          operator delete(v64);
          if ((v60 & 0x80000000) == 0)
          {
LABEL_96:
            if (!v66) {
              goto LABEL_103;
            }
            goto LABEL_97;
          }
        }
        else if ((v60 & 0x80000000) == 0)
        {
          goto LABEL_96;
        }
        operator delete(v61);
        if (!v66)
        {
LABEL_103:
          v51 = object;
          if (object)
          {
            xpc_retain(object);
            xpc_object_t v71 = object;
          }
          else
          {
            xpc_object_t v71 = xpc_null_create();
          }
          xpc_dictionary_set_value(v173, "kWCMCellular_DesenseFreqReport_SearchFrequency", v71);
          xpc_object_t v111 = xpc_null_create();
          xpc_release(v71);
          xpc_release(v111);
          goto LABEL_230;
        }
LABEL_97:
        v67 = (const char *)v11[4];
        size_t v68 = strlen(v67);
        if (v68 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v69 = v68;
        if (v68 >= 0x17)
        {
          uint64_t v72 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v68 | 7) != 0x17) {
            uint64_t v72 = v68 | 7;
          }
          uint64_t v73 = v72 + 1;
          v70 = operator new(v72 + 1);
          size_t v168 = v69;
          int64_t v169 = v73 | 0x8000000000000000;
          *(void *)buf = v70;
LABEL_108:
          memmove(v70, v67, v69);
          goto LABEL_109;
        }
        HIBYTE(v169) = v68;
        v70 = buf;
        if (v68) {
          goto LABEL_108;
        }
LABEL_109:
        *((unsigned char *)v70 + v69) = 0;
        size_t v74 = strlen(v162);
        if (v74 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v75 = v74;
        if (v74 >= 0x17)
        {
          uint64_t v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v74 | 7) != 0x17) {
            uint64_t v77 = v74 | 7;
          }
          uint64_t v78 = v77 + 1;
          v76 = (long long *)operator new(v77 + 1);
          *((void *)&__dst + 1) = v75;
          int64_t v175 = v78 | 0x8000000000000000;
          *(void *)&long long __dst = v76;
LABEL_116:
          memmove(v76, v162, v75);
          goto LABEL_117;
        }
        HIBYTE(v175) = v74;
        v76 = &__dst;
        if (v74) {
          goto LABEL_116;
        }
LABEL_117:
        *((unsigned char *)v76 + v75) = 0;
        int v79 = SHIBYTE(v169);
        v80 = *(uint8_t **)buf;
        if (v169 >= 0) {
          v81 = buf;
        }
        else {
          v81 = *(uint8_t **)buf;
        }
        int v82 = SHIBYTE(v175);
        v83 = (void *)__dst;
        if (v175 >= 0) {
          v84 = (const char *)&__dst;
        }
        else {
          v84 = (const char *)__dst;
        }
        int v85 = strcasecmp((const char *)v81, v84);
        if (v82 < 0)
        {
          operator delete(v83);
          if ((v79 & 0x80000000) == 0)
          {
LABEL_125:
            if (!v85) {
              goto LABEL_132;
            }
            goto LABEL_126;
          }
        }
        else if ((v79 & 0x80000000) == 0)
        {
          goto LABEL_125;
        }
        operator delete(v80);
        if (!v85)
        {
LABEL_132:
          v51 = object;
          if (object)
          {
            xpc_retain(object);
            xpc_object_t v90 = object;
          }
          else
          {
            xpc_object_t v90 = xpc_null_create();
          }
          xpc_dictionary_set_value(v173, "kWCMCellular_DesenseFreqReport_HoppingFrequency", v90);
          xpc_object_t v131 = xpc_null_create();
          xpc_release(v90);
          xpc_release(v131);
          goto LABEL_230;
        }
LABEL_126:
        v86 = (const char *)v11[4];
        size_t v87 = strlen(v86);
        if (v87 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v88 = v87;
        if (v87 >= 0x17)
        {
          uint64_t v92 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v87 | 7) != 0x17) {
            uint64_t v92 = v87 | 7;
          }
          uint64_t v93 = v92 + 1;
          v89 = operator new(v92 + 1);
          size_t v168 = v88;
          int64_t v169 = v93 | 0x8000000000000000;
          *(void *)buf = v89;
LABEL_139:
          memmove(v89, v86, v88);
          goto LABEL_140;
        }
        HIBYTE(v169) = v87;
        v89 = buf;
        if (v87) {
          goto LABEL_139;
        }
LABEL_140:
        *((unsigned char *)v89 + v88) = 0;
        size_t v94 = strlen(v161);
        if (v94 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v95 = v94;
        if (v94 >= 0x17)
        {
          uint64_t v97 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v94 | 7) != 0x17) {
            uint64_t v97 = v94 | 7;
          }
          uint64_t v98 = v97 + 1;
          v96 = (long long *)operator new(v97 + 1);
          *((void *)&__dst + 1) = v95;
          int64_t v175 = v98 | 0x8000000000000000;
          *(void *)&long long __dst = v96;
LABEL_147:
          memmove(v96, v161, v95);
          goto LABEL_148;
        }
        HIBYTE(v175) = v94;
        v96 = &__dst;
        if (v94) {
          goto LABEL_147;
        }
LABEL_148:
        *((unsigned char *)v96 + v95) = 0;
        int v99 = SHIBYTE(v169);
        v100 = *(uint8_t **)buf;
        if (v169 >= 0) {
          v101 = buf;
        }
        else {
          v101 = *(uint8_t **)buf;
        }
        int v102 = SHIBYTE(v175);
        v103 = (void *)__dst;
        if (v175 >= 0) {
          v104 = (const char *)&__dst;
        }
        else {
          v104 = (const char *)__dst;
        }
        int v105 = strcasecmp((const char *)v101, v104);
        if (v102 < 0)
        {
          operator delete(v103);
          if ((v99 & 0x80000000) == 0)
          {
LABEL_156:
            if (!v105) {
              goto LABEL_163;
            }
            goto LABEL_157;
          }
        }
        else if ((v99 & 0x80000000) == 0)
        {
          goto LABEL_156;
        }
        operator delete(v100);
        if (!v105)
        {
LABEL_163:
          v51 = object;
          if (object)
          {
            xpc_retain(object);
            xpc_object_t v110 = object;
          }
          else
          {
            xpc_object_t v110 = xpc_null_create();
          }
          xpc_dictionary_set_value(v173, "kWCMCellular_DesenseFreqReport_NeighborFrequency", v110);
          xpc_object_t v147 = xpc_null_create();
          xpc_release(v110);
          xpc_release(v147);
          goto LABEL_230;
        }
LABEL_157:
        v106 = (const char *)v11[4];
        size_t v107 = strlen(v106);
        if (v107 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v108 = v107;
        if (v107 >= 0x17)
        {
          uint64_t v112 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v107 | 7) != 0x17) {
            uint64_t v112 = v107 | 7;
          }
          uint64_t v113 = v112 + 1;
          v109 = operator new(v112 + 1);
          size_t v168 = v108;
          int64_t v169 = v113 | 0x8000000000000000;
          *(void *)buf = v109;
LABEL_170:
          memmove(v109, v106, v108);
          goto LABEL_171;
        }
        HIBYTE(v169) = v107;
        v109 = buf;
        if (v107) {
          goto LABEL_170;
        }
LABEL_171:
        *((unsigned char *)v109 + v108) = 0;
        size_t v114 = strlen(v160);
        if (v114 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v115 = v114;
        if (v114 >= 0x17)
        {
          uint64_t v117 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v114 | 7) != 0x17) {
            uint64_t v117 = v114 | 7;
          }
          uint64_t v118 = v117 + 1;
          v116 = (long long *)operator new(v117 + 1);
          *((void *)&__dst + 1) = v115;
          int64_t v175 = v118 | 0x8000000000000000;
          *(void *)&long long __dst = v116;
LABEL_178:
          memmove(v116, v160, v115);
          goto LABEL_179;
        }
        HIBYTE(v175) = v114;
        v116 = &__dst;
        if (v114) {
          goto LABEL_178;
        }
LABEL_179:
        *((unsigned char *)v116 + v115) = 0;
        int v119 = SHIBYTE(v169);
        v120 = *(uint8_t **)buf;
        if (v169 >= 0) {
          v121 = buf;
        }
        else {
          v121 = *(uint8_t **)buf;
        }
        int v122 = SHIBYTE(v175);
        v123 = (void *)__dst;
        if (v175 >= 0) {
          v124 = (const char *)&__dst;
        }
        else {
          v124 = (const char *)__dst;
        }
        int v125 = strcasecmp((const char *)v121, v124);
        if (v122 < 0)
        {
          operator delete(v123);
          if ((v119 & 0x80000000) == 0)
          {
LABEL_187:
            if (!v125) {
              goto LABEL_194;
            }
            goto LABEL_188;
          }
        }
        else if ((v119 & 0x80000000) == 0)
        {
          goto LABEL_187;
        }
        operator delete(v120);
        if (!v125)
        {
LABEL_194:
          v51 = object;
          if (object)
          {
            xpc_retain(object);
            xpc_object_t v130 = object;
          }
          else
          {
            xpc_object_t v130 = xpc_null_create();
          }
          xpc_dictionary_set_value(v173, "kWCMCellular_DesenseFreqReport_RplmnFrequency", v130);
          xpc_object_t v148 = xpc_null_create();
          xpc_release(v130);
          xpc_release(v148);
          goto LABEL_230;
        }
LABEL_188:
        v126 = (const char *)v11[4];
        size_t v127 = strlen(v126);
        if (v127 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v128 = v127;
        if (v127 >= 0x17)
        {
          uint64_t v132 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v127 | 7) != 0x17) {
            uint64_t v132 = v127 | 7;
          }
          uint64_t v133 = v132 + 1;
          v129 = operator new(v132 + 1);
          size_t v168 = v128;
          int64_t v169 = v133 | 0x8000000000000000;
          *(void *)buf = v129;
LABEL_201:
          memmove(v129, v126, v128);
          goto LABEL_202;
        }
        HIBYTE(v169) = v127;
        v129 = buf;
        if (v127) {
          goto LABEL_201;
        }
LABEL_202:
        *((unsigned char *)v129 + v128) = 0;
        size_t v134 = strlen(v159);
        if (v134 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v135 = v134;
        if (v134 >= 0x17)
        {
          uint64_t v137 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v134 | 7) != 0x17) {
            uint64_t v137 = v134 | 7;
          }
          uint64_t v138 = v137 + 1;
          v136 = (long long *)operator new(v137 + 1);
          *((void *)&__dst + 1) = v135;
          int64_t v175 = v138 | 0x8000000000000000;
          *(void *)&long long __dst = v136;
LABEL_209:
          memmove(v136, v159, v135);
          goto LABEL_210;
        }
        HIBYTE(v175) = v134;
        v136 = &__dst;
        if (v134) {
          goto LABEL_209;
        }
LABEL_210:
        *((unsigned char *)v136 + v135) = 0;
        int v139 = SHIBYTE(v169);
        v140 = *(uint8_t **)buf;
        if (v169 >= 0) {
          v141 = buf;
        }
        else {
          v141 = *(uint8_t **)buf;
        }
        int v142 = SHIBYTE(v175);
        v143 = (void *)__dst;
        if (v175 >= 0) {
          v144 = (const char *)&__dst;
        }
        else {
          v144 = (const char *)__dst;
        }
        int v145 = strcasecmp((const char *)v141, v144);
        if (v142 < 0)
        {
          operator delete(v143);
          if ((v139 & 0x80000000) == 0)
          {
LABEL_218:
            v51 = object;
            if (!v145) {
              goto LABEL_222;
            }
            goto LABEL_230;
          }
        }
        else if ((v139 & 0x80000000) == 0)
        {
          goto LABEL_218;
        }
        operator delete(v140);
        v51 = object;
        if (!v145)
        {
LABEL_222:
          if (v51)
          {
            xpc_retain(v51);
            xpc_object_t v146 = v51;
          }
          else
          {
            xpc_object_t v146 = xpc_null_create();
          }
          xpc_dictionary_set_value(v173, "kWCMCellular_DesenseFreqReport_DownlinkFrequency", v146);
          xpc_object_t v149 = xpc_null_create();
          xpc_release(v146);
          xpc_release(v149);
        }
LABEL_230:
        xpc_release(v51);
        v150 = (void *)v11[1];
        if (v150)
        {
          do
          {
            v151 = v150;
            v150 = (void *)*v150;
          }
          while (v150);
        }
        else
        {
          do
          {
            v151 = (void *)v11[2];
            BOOL v152 = *v151 == (void)v11;
            std::string v11 = v151;
          }
          while (!v152);
        }
        std::string v11 = v151;
        if (v151 == a2 + 1) {
          goto LABEL_236;
        }
      }
      uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17) {
        uint64_t v33 = v30 | 7;
      }
      uint64_t v34 = v33 + 1;
      xpc_object_t v32 = operator new(v33 + 1);
      size_t v168 = v31;
      int64_t v169 = v34 | 0x8000000000000000;
      *(void *)buf = v32;
LABEL_50:
      memmove(v32, v29, v31);
      goto LABEL_51;
    }
LABEL_236:
    v153 = *(NSObject **)(v158 + 40);
    if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT)
      && ((xpc::object::to_string((uint64_t *)buf, (xpc::object *)&v173), v169 >= 0)
        ? (v154 = buf)
        : (v154 = *(uint8_t **)buf),
          LODWORD(__dst) = 136315138,
          *(void *)((char *)&__dst + 4) = v154,
          _os_log_impl(&dword_1C5767000, v153, OS_LOG_TYPE_DEFAULT, "#I Desense frequency report -> %s", (uint8_t *)&__dst, 0xCu), SHIBYTE(v169) < 0))
    {
      operator delete(*(void **)buf);
      uint64_t v155 = *(void *)(v158 + 120);
      if (v155) {
        goto LABEL_242;
      }
    }
    else
    {
      uint64_t v155 = *(void *)(v158 + 120);
      if (v155)
      {
LABEL_242:
        xpc_object_t v156 = v173;
        v166 = v173;
        if (v173)
        {
          xpc_retain(v173);
        }
        else
        {
          xpc_object_t v156 = xpc_null_create();
          v166 = v156;
        }
        coex::XpcClient::sendMessage(v155, 399, &v166, v157);
        xpc_release(v156);
        v166 = 0;
      }
    }
    xpc_release(v173);
    return;
  }
  uint64_t v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEBUG, "#D Empty report passed; ignoring it", buf, 2u);
  }
}

void sub_1C576CDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,void *a29,uint64_t a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ABMServerInternal::broadcast_sync(void *a1, uint64_t a2, ctu **a3, void **a4)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v7) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v7);
      xpc_object_t v8 = v7;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v7 = 0;
  }
  xpc_release(v7);
  if (*a3) {
    xpc_object_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    xpc_object_t v10 = 0;
  }
  xpc_object_t v40 = v8;
  if (v10)
  {
    ctu::cf_to_xpc((uint64_t *)&v63, *a3, v9);
    xpc_dictionary_set_value(v8, kKeyEventData[0], v63);
    xpc_object_t v11 = v63;
    xpc_object_t v63 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v63);
    xpc_object_t v63 = 0;
  }
  xpc_object_t v12 = xpc_string_create(kCommandSignalNotification[0]);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, kKeyCommand[0], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  uint64_t v14 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0) {
    uint64_t v14 = *(const char **)a2;
  }
  xpc_object_t v15 = xpc_string_create(v14);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, kKeyEvent[0], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  group = dispatch_group_create();
  xpc_object_t v17 = (std::__shared_weak_count *)a1[2];
  if (!v17 || (v41 = a1[1], (uint64_t v18 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v19 = v18;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
    CFTypeID v42 = v19;
    xpc_object_t v20 = (void *)a1[18];
    uint64_t v45 = a1;
    xpc_object_t v21 = a1 + 19;
    if (v20 == a1 + 19) {
      goto LABEL_76;
    }
LABEL_26:
    while (1)
    {
      unint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v62 = 0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v22 = (xpc_object_t)v20[4];
      xpc_object_t v60 = v22;
      if (v22) {
        break;
      }
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v60 = v22;
      unint64_t v24 = v20[5];
      unint64_t v23 = v20[6];
      unint64_t v61 = v24;
      unint64_t v62 = v23;
      if (v23) {
        goto LABEL_28;
      }
LABEL_29:
      if (v22)
      {
        xpc_retain(v22);
        unint64_t v58 = v24;
        uint64_t v59 = (std::__shared_weak_count *)v23;
        if (!v23) {
          goto LABEL_32;
        }
LABEL_31:
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        goto LABEL_32;
      }
      xpc_object_t v22 = xpc_null_create();
      unint64_t v58 = v24;
      uint64_t v59 = (std::__shared_weak_count *)v23;
      if (v23) {
        goto LABEL_31;
      }
LABEL_32:
      if ((uint64_t *)(v24 + 40) == std::__tree<std::string>::find<std::string>(v24 + 32, (const void **)a2)) {
        goto LABEL_62;
      }
      uint64_t SystemTime = TelephonyUtilGetSystemTime();
      xpc_object_t v26 = v45[14];
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = (const void *)a2;
        if (*(char *)(a2 + 23) < 0)
        {
          uint64_t v27 = *(const void **)a2;
          if (*(char *)(v24 + 23) < 0) {
            goto LABEL_42;
          }
LABEL_36:
          long long v28 = *(_OWORD *)v24;
          v57.__r_.__value_.__r.__words[2] = *(void *)(v24 + 16);
          *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v28;
        }
        else
        {
          if ((*(char *)(v24 + 23) & 0x80000000) == 0) {
            goto LABEL_36;
          }
LABEL_42:
          std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v24, *(void *)(v24 + 8));
        }
        xpc_object_t v29 = &v57;
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          xpc_object_t v29 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315650;
        v65 = v27;
        __int16 v66 = 2080;
        v67 = v29;
        __int16 v68 = 2048;
        uint64_t v69 = SystemTime;
        _os_log_impl(&dword_1C5767000, v26, OS_LOG_TYPE_DEFAULT, "#I Sending %s to %s at %llu", buf, 0x20u);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        xpc_object_t v8 = v40;
      }
      if (!*a4)
      {
        xpc_connection_send_message((xpc_connection_t)v22, v8);
        goto LABEL_62;
      }
      dispatch_group_enter(group);
      size_t v30 = v45[3];
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 1174405120;
      handler[2] = ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
      handler[3] = &__block_descriptor_tmp_31_0;
      handler[4] = v45;
      handler[5] = v41;
      v51 = v42;
      atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      unint64_t v52 = v24;
      uint64_t v53 = (std::__shared_weak_count *)v23;
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      }
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __p = *(std::string *)a2;
      }
      uint64_t v55 = SystemTime;
      size_t v56 = group;
      xpc_connection_send_message_with_reply((xpc_connection_t)v22, v8, v30, handler);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        size_t v31 = v53;
        if (!v53) {
          goto LABEL_60;
        }
      }
      else
      {
        size_t v31 = v53;
        if (!v53) {
          goto LABEL_60;
        }
      }
      if (atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_60:
        xpc_object_t v32 = v51;
        if (!v51) {
          goto LABEL_62;
        }
LABEL_61:
        std::__shared_weak_count::__release_weak(v32);
        goto LABEL_62;
      }
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      xpc_object_t v32 = v51;
      if (v51) {
        goto LABEL_61;
      }
LABEL_62:
      uint64_t v33 = v59;
      if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      xpc_release(v22);
      uint64_t v34 = (std::__shared_weak_count *)v62;
      if (v62 && !atomic_fetch_add((atomic_ullong *volatile)(v62 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      xpc_release(v60);
      size_t v35 = (void *)v20[1];
      if (v35)
      {
        do
        {
          size_t v36 = v35;
          size_t v35 = (void *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          size_t v36 = (void *)v20[2];
          BOOL v37 = *v36 == (void)v20;
          xpc_object_t v20 = v36;
        }
        while (!v37);
      }
      xpc_object_t v20 = v36;
      if (v36 == v21) {
        goto LABEL_76;
      }
    }
    xpc_retain(v22);
    unint64_t v24 = v20[5];
    unint64_t v23 = v20[6];
    unint64_t v61 = v24;
    unint64_t v62 = v23;
    if (!v23) {
      goto LABEL_29;
    }
LABEL_28:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
    goto LABEL_29;
  }
  CFTypeID v42 = v18;
  xpc_object_t v20 = (void *)a1[18];
  uint64_t v45 = a1;
  xpc_object_t v21 = a1 + 19;
  if (v20 != a1 + 19) {
    goto LABEL_26;
  }
LABEL_76:
  if (*a4)
  {
    uint64_t v38 = v45[3];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_32;
    block[3] = &__block_descriptor_tmp_33_0;
    block[4] = v45;
    block[5] = v41;
    CFTypeRef v47 = v42;
    atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v48 = *(std::string *)a2;
    }
    uint64_t v39 = *a4;
    if (*a4) {
      uint64_t v39 = _Block_copy(v39);
    }
    aBlock = v39;
    dispatch_group_notify(group, v38, block);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (v47) {
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  dispatch_release(group);
  std::__shared_weak_count::__release_weak(v42);
  xpc_release(v8);
}

void sub_1C576D764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a28) {
    std::__shared_weak_count::__release_weak(a28);
  }
  std::__shared_weak_count::__release_weak(a18);
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    long long v5 = a2;
  }
  else {
    long long v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  xpc_object_t v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      int v8 = *((char *)v3 + 55);
      uint64_t v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      size_t v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      size_t v11 = v6 >= v10 ? v10 : v6;
      int v12 = memcmp(v9, v5, v11);
      if (v12) {
        break;
      }
      if (v10 >= v6) {
        goto LABEL_23;
      }
LABEL_9:
      uint64_t v3 = (uint64_t *)v3[1];
      if (!v3) {
        goto LABEL_24;
      }
    }
    if (v12 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    xpc_object_t v7 = v3;
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2) {
    return v2;
  }
  int v13 = *((char *)v7 + 55);
  if (v13 >= 0) {
    uint64_t v14 = v7 + 4;
  }
  else {
    uint64_t v14 = (const void *)v7[4];
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)v7 + 55);
  }
  else {
    size_t v15 = v7[5];
  }
  if (v15 >= v6) {
    size_t v16 = v6;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v5, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0) {
      return v7;
    }
    return v2;
  }
  else
  {
    if (v6 < v15) {
      return v2;
    }
    return v7;
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  long long v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    int v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    long long v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA438] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA2E0], MEMORY[0x1E4FBA208]);
}

xpc_object_t __copy_helper_block_e8_40c17_ZTSN3xpc6objectE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::expired(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(void *)(v1 + 8) == -1;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcClientEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager16AudioOutputStateEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<coex::Module::State>>::~foreign_shared_ptr_impl(void *__p)
{
  uint64_t v1 = __p;
  *std::string __p = &unk_1F20F23F8;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE56c27_ZTSN3ctu2cf12dict_adapterE(void *a1, void *a2)
{
  uint64_t v2 = a2[6];
  a1[5] = a2[5];
  a1[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)(a1 + 7), (const ctu::cf::dict_adapter *)(a2 + 7));
}

void sub_1C576DCD0(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c92_ZTSN8dispatch5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void __destroy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

{
  void *v2;

  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void *__copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t result = *(void **)(a2 + 32);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = 0;
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__1(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

__n128 __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

xpc_object_t __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  xpc_object_t result = xpc_null_create();
  *(void *)(a2 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE56c27_ZTSN3ctu2cf12dict_adapterE(uint64_t a1)
{
  MEMORY[0x1C8791160](a1 + 56);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void coex::Module::State::setPolicy_sync(void *a1, uint64_t a2)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  if (a1[13])
  {
    CFMutableDictionaryRef v168 = 0;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v6 = Mutable;
    if (Mutable) {
      CFMutableDictionaryRef v168 = Mutable;
    }
    memset(buf, 170, 16);
    uint64_t v7 = 20;
    if (!a2) {
      uint64_t v7 = 18;
    }
    int v8 = (const void *)a1[v7];
    *(void *)&long long v169 = v8;
    if (v8) {
      CFRetain(v8);
    }
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, (const __CFDictionary *)v8);
    if (v8) {
      CFRelease(v8);
    }
    CFMutableDictionaryRef v166 = v6;
    if (v6) {
      CFRetain(v6);
    }
    uint64_t v9 = (const void *)*MEMORY[0x1E4FB9630];
    size_t v10 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9630]);
    size_t v11 = v10;
    if (v10)
    {
      CFRelease(v10);
      ctu::cf::update<__CFString const*,void const*>(v6, v9, v11);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v165 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v165 = 0;
    }
    int v13 = (const void *)*MEMORY[0x1E4FB9698];
    uint64_t v14 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9698]);
    size_t v15 = v14;
    if (v14)
    {
      CFRelease(v14);
      ctu::cf::update<__CFString const*,void const*>(v6, v13, v15);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v164 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v164 = 0;
    }
    size_t v16 = (const void *)*MEMORY[0x1E4FB97D8];
    int v17 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB97D8]);
    uint64_t v18 = v17;
    if (v17)
    {
      CFRelease(v17);
      ctu::cf::update<__CFString const*,void const*>(v6, v16, v18);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v163 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v163 = 0;
    }
    xpc_object_t v19 = (const void *)*MEMORY[0x1E4FB94E0];
    xpc_object_t v20 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB94E0]);
    xpc_object_t v21 = v20;
    if (v20)
    {
      CFRelease(v20);
      ctu::cf::update<__CFString const*,void const*>(v6, v19, v21);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v162 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v162 = 0;
    }
    xpc_object_t v22 = (const void *)*MEMORY[0x1E4FB95C0];
    unint64_t v23 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB95C0]);
    unint64_t v24 = v23;
    if (v23)
    {
      CFRelease(v23);
      ctu::cf::update<__CFString const*,void const*>(v6, v22, v24);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v161 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v161 = 0;
    }
    xpc_object_t v25 = (const void *)*MEMORY[0x1E4FB99B0];
    xpc_object_t v26 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB99B0]);
    uint64_t v27 = v26;
    if (v26)
    {
      CFRelease(v26);
      ctu::cf::update<__CFString const*,void const*>(v6, v25, v27);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v160 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v160 = 0;
    }
    long long v28 = (const void *)*MEMORY[0x1E4FB9508];
    xpc_object_t v29 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9508]);
    size_t v30 = v29;
    if (v29)
    {
      CFRelease(v29);
      ctu::cf::update<__CFString const*,void const*>(v6, v28, v30);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v159 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v159 = 0;
    }
    size_t v31 = (const void *)*MEMORY[0x1E4FB97B8];
    xpc_object_t v32 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB97B8]);
    uint64_t v33 = v32;
    if (v32)
    {
      CFRelease(v32);
      ctu::cf::update<__CFString const*,void const*>(v6, v31, v33);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v158 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v158 = 0;
    }
    uint64_t v34 = (const void *)*MEMORY[0x1E4FB9610];
    size_t v35 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9610]);
    size_t v36 = v35;
    if (v35)
    {
      CFRelease(v35);
      ctu::cf::update<__CFString const*,void const*>(v6, v34, v36);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v157 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v157 = 0;
    }
    BOOL v37 = (const void *)*MEMORY[0x1E4FB9710];
    uint64_t v38 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9710]);
    uint64_t v39 = v38;
    if (v38)
    {
      CFRelease(v38);
      ctu::cf::update<__CFString const*,void const*>(v6, v37, v39);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v156 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v156 = 0;
    }
    xpc_object_t v40 = (const void *)*MEMORY[0x1E4FB9950];
    uint64_t v41 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9950]);
    CFTypeID v42 = v41;
    if (v41)
    {
      CFRelease(v41);
      ctu::cf::update<__CFString const*,void const*>(v6, v40, v42);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v155 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v155 = 0;
    }
    int v43 = (const void *)*MEMORY[0x1E4FB9858];
    v44 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9858]);
    uint64_t v45 = v44;
    if (v44)
    {
      CFRelease(v44);
      ctu::cf::update<__CFString const*,void const*>(v6, v43, v45);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v154 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v154 = 0;
    }
    int v46 = (const void *)*MEMORY[0x1E4FB9880];
    CFTypeRef v47 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9880]);
    std::string v48 = v47;
    if (v47)
    {
      CFRelease(v47);
      ctu::cf::update<__CFString const*,void const*>(v6, v46, v48);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v153 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v153 = 0;
    }
    size_t v49 = (const void *)*MEMORY[0x1E4FB9978];
    v50 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9978]);
    v51 = v50;
    if (v50)
    {
      CFRelease(v50);
      ctu::cf::update<__CFString const*,void const*>(v6, v49, v51);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v152 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v152 = 0;
    }
    unint64_t v52 = (const void *)*MEMORY[0x1E4FB98A8];
    uint64_t v53 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB98A8]);
    uint64_t v54 = v53;
    if (v53)
    {
      CFRelease(v53);
      ctu::cf::update<__CFString const*,void const*>(v6, v52, v54);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v151 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v151 = 0;
    }
    uint64_t v55 = (const void *)*MEMORY[0x1E4FB9780];
    size_t v56 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9780]);
    std::string v57 = v56;
    if (v56)
    {
      CFRelease(v56);
      ctu::cf::update<__CFString const*,void const*>(v6, v55, v57);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v150 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v150 = 0;
    }
    unint64_t v58 = (const void *)*MEMORY[0x1E4FB97E0];
    uint64_t v59 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB97E0]);
    xpc_object_t v60 = v59;
    if (v59)
    {
      CFRelease(v59);
      ctu::cf::update<__CFString const*,void const*>(v6, v58, v60);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v149 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v149 = 0;
    }
    unint64_t v61 = (const void *)*MEMORY[0x1E4FB9948];
    unint64_t v62 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9948]);
    xpc_object_t v63 = v62;
    if (v62)
    {
      CFRelease(v62);
      ctu::cf::update<__CFString const*,void const*>(v6, v61, v63);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v148 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v148 = 0;
    }
    v64 = (const void *)*MEMORY[0x1E4FB9820];
    v65 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9820]);
    __int16 v66 = v65;
    if (v65)
    {
      CFRelease(v65);
      ctu::cf::update<__CFString const*,void const*>(v6, v64, v66);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v147 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v147 = 0;
    }
    v67 = (const void *)*MEMORY[0x1E4FB9788];
    __int16 v68 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9788]);
    uint64_t v69 = v68;
    if (v68)
    {
      CFRelease(v68);
      ctu::cf::update<__CFString const*,void const*>(v6, v67, v69);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v146 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v146 = 0;
    }
    uint64_t v70 = (const void *)*MEMORY[0x1E4FB9708];
    xpc_object_t v71 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9708]);
    uint64_t v72 = v71;
    if (v71)
    {
      CFRelease(v71);
      ctu::cf::update<__CFString const*,void const*>(v6, v70, v72);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v145 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v145 = 0;
    }
    uint64_t v73 = (const void *)*MEMORY[0x1E4FB9680];
    size_t v74 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9680]);
    size_t v75 = v74;
    if (v74)
    {
      CFRelease(v74);
      ctu::cf::update<__CFString const*,void const*>(v6, v73, v75);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v144 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v144 = 0;
    }
    v76 = (const void *)*MEMORY[0x1E4FB9958];
    uint64_t v77 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9958]);
    uint64_t v78 = v77;
    if (v77)
    {
      CFRelease(v77);
      ctu::cf::update<__CFString const*,void const*>(v6, v76, v78);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v143 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v143 = 0;
    }
    int v79 = (const void *)*MEMORY[0x1E4FB9968];
    v80 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9968]);
    v81 = v80;
    if (v80)
    {
      CFRelease(v80);
      ctu::cf::update<__CFString const*,void const*>(v6, v79, v81);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v142 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v142 = 0;
    }
    int v82 = (const void *)*MEMORY[0x1E4FB9970];
    v83 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9970]);
    v84 = v83;
    if (v83)
    {
      CFRelease(v83);
      ctu::cf::update<__CFString const*,void const*>(v6, v82, v84);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v141 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v141 = 0;
    }
    int v85 = (const void *)*MEMORY[0x1E4FB9910];
    v86 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9910]);
    size_t v87 = v86;
    if (v86)
    {
      CFRelease(v86);
      ctu::cf::update<__CFString const*,void const*>(v6, v85, v87);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v140 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v140 = 0;
    }
    size_t v88 = (const void *)*MEMORY[0x1E4FB9960];
    v89 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9960]);
    xpc_object_t v90 = v89;
    if (v89)
    {
      CFRelease(v89);
      ctu::cf::update<__CFString const*,void const*>(v6, v88, v90);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v139 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v139 = 0;
    }
    xpc_object_t v91 = (const void *)*MEMORY[0x1E4FB9908];
    uint64_t v92 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9908]);
    uint64_t v93 = v92;
    if (v92)
    {
      CFRelease(v92);
      ctu::cf::update<__CFString const*,void const*>(v6, v91, v93);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v138 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v138 = 0;
    }
    size_t v94 = (const void *)*MEMORY[0x1E4FB95B8];
    size_t v95 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB95B8]);
    v96 = v95;
    if (v95)
    {
      CFRelease(v95);
      ctu::cf::update<__CFString const*,void const*>(v6, v94, v96);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v137 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v137 = 0;
    }
    uint64_t v97 = (const void *)*MEMORY[0x1E4FB95F0];
    uint64_t v98 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB95F0]);
    int v99 = v98;
    if (v98)
    {
      CFRelease(v98);
      ctu::cf::update<__CFString const*,void const*>(v6, v97, v99);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v136 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v136 = 0;
    }
    v100 = (const void *)*MEMORY[0x1E4FB9518];
    v101 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9518]);
    int v102 = v101;
    if (v101)
    {
      CFRelease(v101);
      ctu::cf::update<__CFString const*,void const*>(v6, v100, v102);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v135 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v135 = 0;
    }
    v103 = (const void *)*MEMORY[0x1E4FB99B8];
    v104 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB99B8]);
    int v105 = v104;
    if (v104)
    {
      CFRelease(v104);
      ctu::cf::update<__CFString const*,void const*>(v6, v103, v105);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v134 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v134 = 0;
    }
    v106 = (const void *)*MEMORY[0x1E4FB9918];
    size_t v107 = (void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9918]);
    size_t v108 = v107;
    if (v107)
    {
      CFRelease(v107);
      ctu::cf::update<__CFString const*,void const*>(v6, v106, v108);
    }
    if (v6) {
      CFRelease(v6);
    }
    int v109 = capabilities::abs::supportsCoexGPSReporting((capabilities::abs *)v107);
    ctu::cf::update<__CFString const*,BOOL>(v6, (CFTypeRef)*MEMORY[0x1E4FB98D8], v109);
    if (!CFDictionaryGetCount(v6))
    {
      int v125 = a1[5];
      if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v169) = 0;
        _os_log_impl(&dword_1C5767000, v125, OS_LOG_TYPE_DEFAULT, "#I Nothing in policy yet, bail\n", (uint8_t *)&v169, 2u);
      }
      goto LABEL_220;
    }
    CFTypeRef v133 = 0;
    CFMutableDictionaryRef v110 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v111 = v110;
    if (v110) {
      CFTypeRef v133 = v110;
    }
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v110, (CFTypeRef)*MEMORY[0x1E4FB9568], v6);
    CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
    coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, 0, 0, &theDict);
    if (theDict) {
      uint64_t v112 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
    }
    else {
      uint64_t v112 = 0;
    }
    if (v112) {
      CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E4FB9988]);
    }
    uint64_t v113 = a1[5];
    if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v169) = 138412290;
      *(void *)((char *)&v169 + 4) = v111;
      _os_log_impl(&dword_1C5767000, v113, OS_LOG_TYPE_DEFAULT, "#I Setting policy with: %@", (uint8_t *)&v169, 0xCu);
    }
    uint64_t v115 = a1[9];
    size_t v114 = (std::__shared_weak_count *)a1[10];
    *(void *)&long long v169 = v115;
    if (!v114 || (v116 = std::__shared_weak_count::lock(v114), (*((void *)&v169 + 1) = v116) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v117 = v116;
    uint64_t v118 = a1[13];
    if (v111 && (CFTypeID v119 = CFGetTypeID(v111), v119 == CFDictionaryGetTypeID()))
    {
      CFTypeRef cf = v111;
      CFRetain(v111);
    }
    else
    {
      CFTypeRef cf = 0;
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_329;
    aBlock[4] = a1;
    aBlock[5] = v115;
    size_t v127 = v117;
    atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v128, (const ctu::cf::dict_adapter *)buf);
    v120 = _Block_copy(aBlock);
    v121 = a1[11];
    if (v121) {
      dispatch_retain(v121);
    }
    if (v120)
    {
      v129 = _Block_copy(v120);
      dispatch_object_t object = v121;
      if (!v121) {
        goto LABEL_199;
      }
    }
    else
    {
      v129 = 0;
      dispatch_object_t object = v121;
      if (!v121)
      {
LABEL_199:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v118 + 48))(v118, &cf, a2, &v129);
        if (object) {
          dispatch_release(object);
        }
        if (v129) {
          _Block_release(v129);
        }
        if (v121) {
          dispatch_release(v121);
        }
        if (v120) {
          _Block_release(v120);
        }
        if (cf) {
          CFRelease(cf);
        }
        MEMORY[0x1C8791160](v128);
        int v122 = v127;
        if (v127 && !atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
          v123 = (std::__shared_weak_count *)*((void *)&v169 + 1);
          if (!*((void *)&v169 + 1)) {
            goto LABEL_213;
          }
        }
        else
        {
          v123 = (std::__shared_weak_count *)*((void *)&v169 + 1);
          if (!*((void *)&v169 + 1)) {
            goto LABEL_213;
          }
        }
        if (!atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
          CFMutableDictionaryRef v124 = theDict;
          if (!theDict) {
            goto LABEL_215;
          }
          goto LABEL_214;
        }
LABEL_213:
        CFMutableDictionaryRef v124 = theDict;
        if (!theDict)
        {
LABEL_215:
          if (v133) {
            CFRelease(v133);
          }
          CFMutableDictionaryRef v6 = v168;
LABEL_220:
          MEMORY[0x1C8791160](buf);
          if (v6) {
            CFRelease(v6);
          }
          return;
        }
LABEL_214:
        CFRelease(v124);
        goto LABEL_215;
      }
    }
    dispatch_retain(v121);
    goto LABEL_199;
  }
  int v12 = a1[5];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEFAULT, "#I Invalid driver", buf, 2u);
  }
}

void sub_1C576F4A0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,void const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  CFRetain(a3);
  if (cf) {
    CFDictionarySetValue(a1, cf, a3);
  }
  CFRelease(a3);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C576F8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C576F8CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t coex::Module::State::getSubProperty@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, CFMutableDictionaryRef *a5@<X8>)
{
  v15[0] = 0xAAAAAAAAAAAAAAAALL;
  v15[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = 152;
  if (!a3) {
    uint64_t v8 = 136;
  }
  uint64_t v9 = *(const void **)(a1 + v8);
  if (v9) {
    CFRetain(v9);
  }
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v15, (const __CFDictionary *)v9);
  if (v9) {
    CFRelease(v9);
  }
  size_t v10 = (__CFDictionary *)(*(uint64_t (**)(void *, uint64_t))v15[0])(v15, a2);
  CFMutableDictionaryRef Mutable = v10;
  if (v10)
  {
    CFTypeID v12 = CFGetTypeID(v10);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFRelease(Mutable);
    *a5 = 0;
    if (v12 == TypeID)
    {
      CFRetain(Mutable);
LABEL_13:
      *a5 = Mutable;
      return MEMORY[0x1C8791160](v15);
    }
  }
  else
  {
    *a5 = 0;
  }
  if (a4)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable) {
      goto LABEL_13;
    }
  }
  return MEMORY[0x1C8791160](v15);
}

void sub_1C576FA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v3);
  MEMORY[0x1C8791160](va);
  _Unwind_Resume(a1);
}

void sub_1C576FA3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFDictionary *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C576FAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C576FB08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb5_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  CFAllocatorRef v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetWCI2Mode_sync(v4, &v6, *((_DWORD *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  long long v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C576FC20(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  long long v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleSetWCI2Mode_sync(void *a1, xpc_object_t *a2, unsigned int a3)
{
  *(void *)bytes = 0xAAAAAAAAAAAAAAAALL;
  value = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Policy");
  v159[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v7 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  *(void *)bytes = v7;
  uint64_t v8 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_PowerThreshold");
  v159[0] = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v9 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  size_t v10 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_RB_Threshold");
  v159[0] = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v11 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  CFTypeID v12 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_LTE_TxDenialThreshold");
  v159[0] = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v13 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  uint64_t v14 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_APTTable");
  v159[0] = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v15 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  size_t v16 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_ControllerTxPowerLimit");
  v159[0] = v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v17 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  uint64_t v18 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_WCI2PowerLimit");
  v159[0] = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v19 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  xpc_object_t v20 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_LinkPathLossThreshold");
  v159[0] = v20;
  if (v20) {
    xpc_retain(v20);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v138 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  xpc_object_t v21 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_RBFilterAlpha");
  v159[0] = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  xpc::dyn_cast_or_default((xpc *)v159, v22, 0.0);
  double v24 = v23;
  xpc_release(v159[0]);
  xpc_object_t v25 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_FilterRBThreshold");
  v159[0] = v25;
  if (v25) {
    xpc_retain(v25);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v137 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  xpc_object_t v26 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_ControllerTxPowerLimitTO");
  v159[0] = v26;
  if (v26) {
    xpc_retain(v26);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v136 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  uint64_t v27 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_WCI2PowerLimitTO");
  v159[0] = v27;
  if (v27) {
    xpc_retain(v27);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v135 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  long long v28 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_MaxAllowedFrameDenials");
  v159[0] = v28;
  if (v28) {
    xpc_retain(v28);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v146 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  xpc_object_t v29 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_FrameDenialWindow");
  v159[0] = v29;
  if (v29) {
    xpc_retain(v29);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v139 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  size_t v30 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_TxPowerThresholdForAdvTxNotice");
  v159[0] = v30;
  if (v30) {
    xpc_retain(v30);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v133 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  size_t v31 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_RbThresholdForAdvTxNotice");
  v159[0] = v31;
  if (v31) {
    xpc_retain(v31);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v132 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  xpc_object_t v32 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Controller_RB_Threshold");
  v159[0] = v32;
  if (v32) {
    xpc_retain(v32);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v131 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  uint64_t v33 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Harq_nack_ratio_Threshold");
  v159[0] = v33;
  if (v33) {
    xpc_retain(v33);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v130 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  uint64_t v34 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Controller_PowerLimiting_Enable");
  v159[0] = v34;
  if (v34) {
    xpc_retain(v34);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  int v129 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  size_t v35 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_enabled");
  v159[0] = v35;
  if (v35) {
    xpc_retain(v35);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  int v128 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  size_t v36 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_critical_ul_ca_bitmap");
  v159[0] = v36;
  if (v36) {
    xpc_retain(v36);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v127 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  BOOL v37 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_tx_denial_ca_bitmap");
  v159[0] = v37;
  if (v37) {
    xpc_retain(v37);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v126 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  xpc_object_t v38 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_ca_grp_bitmap");
  xpc_object_t v158 = v38;
  if (v38) {
    xpc_retain(v38);
  }
  else {
    xpc_object_t v158 = xpc_null_create();
  }
  unsigned int v134 = v19;
  xpc::bridge((uint64_t *)v159, (xpc *)&v158, v39);
  CFMutableDictionaryRef v40 = v159[0];
  if (!v159[0] || (CFTypeID v41 = CFGetTypeID(v159[0]), v41 != CFArrayGetTypeID()))
  {
    CFMutableDictionaryRef v156 = 0;
    CFMutableDictionaryRef v42 = v159[0];
    if (!v159[0]) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  CFMutableDictionaryRef v156 = v40;
  CFRetain(v40);
  CFMutableDictionaryRef v42 = v159[0];
  if (v159[0]) {
LABEL_75:
  }
    CFRelease(v42);
LABEL_76:
  xpc_release(v158);
  xpc_object_t v43 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_consecutive_denial_threshold");
  xpc_object_t v158 = v43;
  if (v43) {
    xpc_retain(v43);
  }
  else {
    xpc_object_t v158 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)v159, (xpc *)&v158, v44);
  if (!v159[0] || (CFMutableDictionaryRef cf = v159[0], v45 = CFGetTypeID(v159[0]), v45 != CFArrayGetTypeID()))
  {
    CFMutableDictionaryRef cf = 0;
    CFMutableDictionaryRef v155 = 0;
    CFMutableDictionaryRef v46 = v159[0];
    if (!v159[0]) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  CFMutableDictionaryRef v155 = cf;
  CFRetain(cf);
  CFMutableDictionaryRef v46 = v159[0];
  if (v159[0]) {
LABEL_84:
  }
    CFRelease(v46);
LABEL_85:
  xpc_release(v158);
  xpc_object_t v47 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_duty_cycle_numerator_rx_prio_req");
  xpc_object_t v158 = v47;
  if (v47) {
    xpc_retain(v47);
  }
  else {
    xpc_object_t v158 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)v159, (xpc *)&v158, v48);
  if (!v159[0] || (v144 = v159[0], CFTypeID v49 = CFGetTypeID(v159[0]), v49 != CFArrayGetTypeID()))
  {
    CFMutableDictionaryRef v144 = 0;
    CFMutableDictionaryRef v154 = 0;
    CFMutableDictionaryRef v50 = v159[0];
    if (!v159[0]) {
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  CFMutableDictionaryRef v154 = v144;
  CFRetain(v144);
  CFMutableDictionaryRef v50 = v159[0];
  if (v159[0]) {
LABEL_93:
  }
    CFRelease(v50);
LABEL_94:
  xpc_release(v158);
  xpc_object_t v51 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_power_limiting_power_threshold");
  xpc_object_t v158 = v51;
  if (v51) {
    xpc_retain(v51);
  }
  else {
    xpc_object_t v158 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)v159, (xpc *)&v158, v52);
  if (!v159[0] || (v143 = v159[0], CFTypeID v53 = CFGetTypeID(v159[0]), v53 != CFArrayGetTypeID()))
  {
    CFMutableDictionaryRef v143 = 0;
    CFMutableDictionaryRef v153 = 0;
    CFMutableDictionaryRef v54 = v159[0];
    if (!v159[0]) {
      goto LABEL_103;
    }
    goto LABEL_102;
  }
  CFMutableDictionaryRef v153 = v143;
  CFRetain(v143);
  CFMutableDictionaryRef v54 = v159[0];
  if (v159[0]) {
LABEL_102:
  }
    CFRelease(v54);
LABEL_103:
  xpc_release(v158);
  xpc_object_t v55 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_power_limiting_RB_threshold");
  xpc_object_t v158 = v55;
  if (v55) {
    xpc_retain(v55);
  }
  else {
    xpc_object_t v158 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)v159, (xpc *)&v158, v56);
  if (!v159[0] || (CFMutableDictionaryRef v142 = v159[0], v57 = CFGetTypeID(v159[0]), v57 != CFArrayGetTypeID()))
  {
    CFMutableDictionaryRef v142 = 0;
    CFMutableDictionaryRef v152 = 0;
    CFMutableDictionaryRef v58 = v159[0];
    if (!v159[0]) {
      goto LABEL_112;
    }
    goto LABEL_111;
  }
  CFMutableDictionaryRef v152 = v142;
  CFRetain(v142);
  CFMutableDictionaryRef v58 = v159[0];
  if (v159[0]) {
LABEL_111:
  }
    CFRelease(v58);
LABEL_112:
  xpc_release(v158);
  xpc_object_t v59 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_advance_notice_power_threshold");
  xpc_object_t v158 = v59;
  if (v59) {
    xpc_retain(v59);
  }
  else {
    xpc_object_t v158 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)v159, (xpc *)&v158, v60);
  if (!v159[0] || (v141 = v159[0], CFTypeID v61 = CFGetTypeID(v159[0]), v61 != CFArrayGetTypeID()))
  {
    CFMutableDictionaryRef v141 = 0;
    CFMutableDictionaryRef v151 = 0;
    CFMutableDictionaryRef v62 = v159[0];
    if (!v159[0]) {
      goto LABEL_121;
    }
    goto LABEL_120;
  }
  CFMutableDictionaryRef v151 = v141;
  CFRetain(v141);
  CFMutableDictionaryRef v62 = v159[0];
  if (v159[0]) {
LABEL_120:
  }
    CFRelease(v62);
LABEL_121:
  xpc_release(v158);
  xpc_object_t v63 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_power_limiting_RB_threshold");
  xpc_object_t v158 = v63;
  if (v63) {
    xpc_retain(v63);
  }
  else {
    xpc_object_t v158 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)v159, (xpc *)&v158, v64);
  if (!v159[0] || (CFMutableDictionaryRef v140 = v159[0], v65 = CFGetTypeID(v159[0]), v65 != CFArrayGetTypeID()))
  {
    CFMutableDictionaryRef v140 = 0;
    CFMutableDictionaryRef v150 = 0;
    CFMutableDictionaryRef v66 = v159[0];
    if (!v159[0]) {
      goto LABEL_130;
    }
    goto LABEL_129;
  }
  CFMutableDictionaryRef v150 = v140;
  CFRetain(v140);
  CFMutableDictionaryRef v66 = v159[0];
  if (v159[0]) {
LABEL_129:
  }
    CFRelease(v66);
LABEL_130:
  unsigned int v123 = v17;
  unsigned int v124 = v15;
  unsigned int v125 = v13;
  unsigned int v67 = v11;
  xpc_release(v158);
  CFMutableDictionaryRef v149 = 0;
  CFAllocatorRef v68 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v70 = Mutable;
  if (Mutable) {
    CFMutableDictionaryRef v149 = Mutable;
  }
  CFTypeRef v122 = (CFTypeRef)*MEMORY[0x1E4FB9590];
  ctu::cf::insert<__CFString const*,long long>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9590], v146, v68);
  CFTypeRef v121 = (CFTypeRef)*MEMORY[0x1E4FB94F0];
  ctu::cf::insert<__CFString const*,long long>(v70, (CFTypeRef)*MEMORY[0x1E4FB94F0], v139, v68);
  uint64_t v71 = v9;
  CFDataRef v72 = CFDataCreate(v68, bytes, 8);
  CFDataRef v73 = v72;
  unsigned int v147 = a3;
  if (a3) {
    uint64_t v74 = 20;
  }
  else {
    uint64_t v74 = 18;
  }
  size_t v75 = (void *)a1[v74];
  CFDataRef v148 = v72;
  if (v75) {
    CFRetain(v75);
  }
  v159[0] = *(CFMutableDictionaryRef *)MEMORY[0x1E4FB94E0];
  CFMutableDictionaryRef v76 = v159[0];
  if (v159[0]) {
    CFRetain(v159[0]);
  }
  xpc_object_t v158 = v73;
  if (v73)
  {
    CFRetain(v73);
    if (v76) {
      CFDictionarySetValue((CFMutableDictionaryRef)v75, v76, v73);
    }
    CFRelease(v73);
  }
  if (v76) {
    CFRelease(v76);
  }
  if (v75) {
    CFRelease(v75);
  }
  uint64_t v77 = (__CFDictionary *)a1[v74];
  v159[0] = v77;
  if (v77) {
    CFRetain(v77);
  }
  ctu::cf::update<__CFString const*,long long>(v77, (CFTypeRef)*MEMORY[0x1E4FB9630], v71, v68);
  if (v77) {
    CFRelease(v77);
  }
  uint64_t v78 = (__CFDictionary *)a1[v74];
  v159[0] = v78;
  if (v78) {
    CFRetain(v78);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v78, (CFTypeRef)*MEMORY[0x1E4FB95C0], v67, v68);
  if (v78) {
    CFRelease(v78);
  }
  int v79 = (__CFDictionary *)a1[v74];
  v159[0] = v79;
  if (v79) {
    CFRetain(v79);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v79, (CFTypeRef)*MEMORY[0x1E4FB99B0], v125, v68);
  if (v79) {
    CFRelease(v79);
  }
  v80 = (__CFDictionary *)a1[v74];
  v159[0] = v80;
  if (v80) {
    CFRetain(v80);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v80, (CFTypeRef)*MEMORY[0x1E4FB9508], v124, v68);
  if (v80) {
    CFRelease(v80);
  }
  v81 = (__CFDictionary *)a1[v74];
  v159[0] = v81;
  if (v81) {
    CFRetain(v81);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v81, (CFTypeRef)*MEMORY[0x1E4FB97D8], v123, v68);
  if (v81) {
    CFRelease(v81);
  }
  int v82 = (__CFDictionary *)a1[v74];
  v159[0] = v82;
  if (v82) {
    CFRetain(v82);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v82, (CFTypeRef)*MEMORY[0x1E4FB9698], v134, v68);
  if (v82) {
    CFRelease(v82);
  }
  v83 = (__CFDictionary *)a1[v74];
  v159[0] = v83;
  if (v83) {
    CFRetain(v83);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v83, (CFTypeRef)*MEMORY[0x1E4FB97B8], v138, v68);
  if (v83) {
    CFRelease(v83);
  }
  v84 = (__CFDictionary *)a1[v74];
  v159[0] = v84;
  if (v84) {
    CFRetain(v84);
  }
  ctu::cf::update<__CFString const*,double>(v84, (CFTypeRef)*MEMORY[0x1E4FB9610], v68, v24);
  if (v84) {
    CFRelease(v84);
  }
  int v85 = (__CFDictionary *)a1[v74];
  v159[0] = v85;
  if (v85) {
    CFRetain(v85);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v85, (CFTypeRef)*MEMORY[0x1E4FB9710], v137, v68);
  if (v85) {
    CFRelease(v85);
  }
  v86 = (__CFDictionary *)a1[v74];
  v159[0] = v86;
  if (v86) {
    CFRetain(v86);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v86, (CFTypeRef)*MEMORY[0x1E4FB9950], v136, v68);
  if (v86) {
    CFRelease(v86);
  }
  size_t v87 = (__CFDictionary *)a1[v74];
  v159[0] = v87;
  if (v87) {
    CFRetain(v87);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v87, (CFTypeRef)*MEMORY[0x1E4FB9858], v135, v68);
  if (v87) {
    CFRelease(v87);
  }
  size_t v88 = (__CFDictionary *)a1[v74];
  v159[0] = v88;
  if (v88) {
    CFRetain(v88);
  }
  ctu::cf::update<__CFString const*,__CFDictionary *>(v88, (CFTypeRef)*MEMORY[0x1E4FB9880], v70);
  if (v88) {
    CFRelease(v88);
  }
  v89 = (__CFDictionary *)a1[v74];
  v159[0] = v89;
  if (v89) {
    CFRetain(v89);
  }
  ctu::cf::update<__CFString const*,long long>(v89, (CFTypeRef)*MEMORY[0x1E4FB9978], v133, v68);
  if (v89) {
    CFRelease(v89);
  }
  xpc_object_t v90 = (__CFDictionary *)a1[v74];
  v159[0] = v90;
  if (v90) {
    CFRetain(v90);
  }
  ctu::cf::update<__CFString const*,long long>(v90, (CFTypeRef)*MEMORY[0x1E4FB98A8], v132, v68);
  if (v90) {
    CFRelease(v90);
  }
  xpc_object_t v91 = (__CFDictionary *)a1[v74];
  v159[0] = v91;
  if (v91) {
    CFRetain(v91);
  }
  ctu::cf::update<__CFString const*,long long>(v91, (CFTypeRef)*MEMORY[0x1E4FB9780], v131, v68);
  if (v91) {
    CFRelease(v91);
  }
  uint64_t v92 = (__CFDictionary *)a1[v74];
  v159[0] = v92;
  if (v92) {
    CFRetain(v92);
  }
  ctu::cf::update<__CFString const*,long long>(v92, (CFTypeRef)*MEMORY[0x1E4FB97E0], v130, v68);
  if (v92) {
    CFRelease(v92);
  }
  uint64_t v93 = (__CFDictionary *)a1[v74];
  v159[0] = v93;
  if (v93) {
    CFRetain(v93);
  }
  ctu::cf::update<__CFString const*,BOOL>(v93, (CFTypeRef)*MEMORY[0x1E4FB9948], v129);
  if (v93) {
    CFRelease(v93);
  }
  size_t v94 = (__CFDictionary *)a1[v74];
  v159[0] = v94;
  if (v94) {
    CFRetain(v94);
  }
  ctu::cf::update<__CFString const*,BOOL>(v94, (CFTypeRef)*MEMORY[0x1E4FB9820], v128);
  if (v94) {
    CFRelease(v94);
  }
  size_t v95 = (__CFDictionary *)a1[v74];
  v159[0] = v95;
  if (v95) {
    CFRetain(v95);
  }
  ctu::cf::update<__CFString const*,long long>(v95, (CFTypeRef)*MEMORY[0x1E4FB9788], v127, v68);
  if (v95) {
    CFRelease(v95);
  }
  v96 = (__CFDictionary *)a1[v74];
  v159[0] = v96;
  if (v96) {
    CFRetain(v96);
  }
  ctu::cf::update<__CFString const*,long long>(v96, (CFTypeRef)*MEMORY[0x1E4FB9708], v126, v68);
  if (v96) {
    CFRelease(v96);
  }
  uint64_t v97 = (__CFDictionary *)a1[v74];
  v159[0] = v97;
  if (v97) {
    CFRetain(v97);
  }
  ctu::cf::update<__CFString const*,__CFArray const*>(v97, (CFTypeRef)*MEMORY[0x1E4FB9680], v156);
  if (v97) {
    CFRelease(v97);
  }
  uint64_t v98 = (__CFDictionary *)a1[v74];
  v159[0] = v98;
  if (v98) {
    CFRetain(v98);
  }
  ctu::cf::update<__CFString const*,__CFArray const*>(v98, (CFTypeRef)*MEMORY[0x1E4FB9958], cf);
  if (v98) {
    CFRelease(v98);
  }
  int v99 = (__CFDictionary *)a1[v74];
  v159[0] = v99;
  if (v99) {
    CFRetain(v99);
  }
  ctu::cf::update<__CFString const*,__CFArray const*>(v99, (CFTypeRef)*MEMORY[0x1E4FB9968], v144);
  if (v99) {
    CFRelease(v99);
  }
  v100 = (__CFDictionary *)a1[v74];
  v159[0] = v100;
  if (v100) {
    CFRetain(v100);
  }
  ctu::cf::update<__CFString const*,__CFArray const*>(v100, (CFTypeRef)*MEMORY[0x1E4FB9970], v143);
  if (v100) {
    CFRelease(v100);
  }
  v101 = (__CFDictionary *)a1[v74];
  v159[0] = v101;
  if (v101) {
    CFRetain(v101);
  }
  ctu::cf::update<__CFString const*,__CFArray const*>(v101, (CFTypeRef)*MEMORY[0x1E4FB9910], v142);
  if (v101) {
    CFRelease(v101);
  }
  int v102 = (__CFDictionary *)a1[v74];
  v159[0] = v102;
  if (v102) {
    CFRetain(v102);
  }
  ctu::cf::update<__CFString const*,__CFArray const*>(v102, (CFTypeRef)*MEMORY[0x1E4FB9960], v141);
  if (v102) {
    CFRelease(v102);
  }
  v103 = (__CFDictionary *)a1[v74];
  v159[0] = v103;
  if (v103) {
    CFRetain(v103);
  }
  ctu::cf::update<__CFString const*,__CFArray const*>(v103, (CFTypeRef)*MEMORY[0x1E4FB9908], v140);
  if (v103) {
    CFRelease(v103);
  }
  if (capabilities::abs::supportsCoexEur5G(v104))
  {
    int v105 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_CoexTech");
    v159[0] = v105;
    if (v105) {
      xpc_retain(v105);
    }
    else {
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    }
    unsigned int v106 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    size_t v107 = (__CFDictionary *)a1[v74];
    v159[0] = v107;
    if (v107) {
      CFRetain(v107);
    }
    ctu::cf::update<__CFString const*,unsigned int>(v107, (CFTypeRef)*MEMORY[0x1E4FB95B8], v147, v68);
    if (v107) {
      CFRelease(v107);
    }
    size_t v108 = (__CFDictionary *)a1[v74];
    v159[0] = v108;
    if (v108) {
      CFRetain(v108);
    }
    ctu::cf::update<__CFString const*,unsigned int>(v108, (CFTypeRef)*MEMORY[0x1E4FB95F0], v147, v68);
    if (v108) {
      CFRelease(v108);
    }
    int v109 = (__CFDictionary *)a1[v74];
    v159[0] = v109;
    if (v109) {
      CFRetain(v109);
    }
    ctu::cf::update<__CFString const*,unsigned int>(v109, (CFTypeRef)*MEMORY[0x1E4FB9518], v106, v68);
    if (v109) {
      CFRelease(v109);
    }
    CFMutableDictionaryRef v110 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_NGC_TxDenialThresholdSlots");
    v159[0] = v110;
    if (v110) {
      xpc_retain(v110);
    }
    else {
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    }
    unsigned int v111 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    uint64_t v112 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_NGC_MaxAllowedSlotDenials");
    v159[0] = v112;
    if (v112) {
      xpc_retain(v112);
    }
    else {
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    }
    uint64_t v113 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    size_t v114 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_NGC_SlotsDenialWindow");
    v159[0] = v114;
    if (v114) {
      xpc_retain(v114);
    }
    else {
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    }
    uint64_t v115 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    v159[0] = 0;
    v116 = CFDictionaryCreateMutable(v68, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v117 = v116;
    if (v116) {
      v159[0] = v116;
    }
    ctu::cf::insert<__CFString const*,long long>(v116, v122, v113, v68);
    ctu::cf::insert<__CFString const*,long long>(v117, v121, v115, v68);
    uint64_t v118 = (void *)a1[v74];
    xpc_object_t v158 = v118;
    if (v118) {
      CFRetain(v118);
    }
    ctu::cf::update<__CFString const*,unsigned int>((__CFDictionary *)v118, (CFTypeRef)*MEMORY[0x1E4FB99B8], v111, v68);
    if (v118) {
      CFRelease(v118);
    }
    CFTypeID v119 = (void *)a1[v74];
    xpc_object_t v158 = v119;
    if (v119) {
      CFRetain(v119);
    }
    ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v119, (CFTypeRef)*MEMORY[0x1E4FB9918], v117);
    if (v119) {
      CFRelease(v119);
    }
    if (v117) {
      CFRelease(v117);
    }
  }
  v159[0] = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, 0, 0, v159);
  if (v159[0]) {
    v120 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    v120 = 0;
  }
  if (v120)
  {
    CFDictionaryRemoveValue(v159[0], (const void *)*MEMORY[0x1E4FB9850]);
    CFDictionaryRemoveValue(v159[0], (const void *)*MEMORY[0x1E4FB9728]);
  }
  coex::Module::State::setPolicy_sync(a1, v147);
  if (v159[0]) {
    CFRelease(v159[0]);
  }
  if (v148) {
    CFRelease(v148);
  }
  if (v149) {
    CFRelease(v149);
  }
  if (v150) {
    CFRelease(v150);
  }
  if (v151) {
    CFRelease(v151);
  }
  if (v152) {
    CFRelease(v152);
  }
  if (v153) {
    CFRelease(v153);
  }
  if (v154) {
    CFRelease(v154);
  }
  if (v155) {
    CFRelease(v155);
  }
  if (v156) {
    CFRelease(v156);
  }
}

void sub_1C5771194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,const void *a31,const void *a32,const void *a33)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v33 - 120));
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v33 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a31);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a32);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a33);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 184));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 176));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 168));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 160));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 152));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 144));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 136));
  _Unwind_Resume(a1);
}

void sub_1C5771838()
{
}

void ctu::cf::update<__CFString const*,unsigned int>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionarySetValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C57718E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  xpc_object_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5771904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,long long>(__CFDictionary *a1, CFTypeRef cf, uint64_t a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionarySetValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C57719B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  xpc_object_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C57719D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,__CFArray const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionarySetValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5771A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C5771A90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,long long>(__CFDictionary *a1, CFTypeRef cf, uint64_t a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5771B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  xpc_object_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5771B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,BOOL>(CFMutableDictionaryRef theDict, CFTypeRef cf, int a3)
{
  if (cf) {
    CFRetain(cf);
  }
  xpc_object_t v6 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!a3) {
    xpc_object_t v6 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v7 = *v6;
  if (cf && v7)
  {
    CFDictionarySetValue(theDict, cf, v7);
  }
  else if (!v7)
  {
    goto LABEL_10;
  }
  CFRelease(v7);
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5771C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void ctu::cf::update<__CFString const*,__CFDictionary *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionarySetValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5771CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C5771CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,double>(__CFDictionary *a1, CFTypeRef cf, CFAllocatorRef allocator, double a4)
{
  if (cf) {
    CFRetain(cf);
  }
  double valuePtr = a4;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberDoubleType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionarySetValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5771D94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  xpc_object_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5771DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c92_ZTSN8dispatch5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t result = *(void **)(a2 + 32);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void *__copy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t result = *(void **)(a2 + 32);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

xpc_object_t __copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    xpc_retain(v4);
    long long v5 = *(void **)(a2 + 48);
    *(void *)(a1 + 48) = v5;
    if (v5) {
      return xpc_retain(v5);
    }
  }
  else
  {
    *(void *)(a1 + 40) = xpc_null_create();
    long long v5 = *(void **)(a2 + 48);
    *(void *)(a1 + 48) = v5;
    if (v5) {
      return xpc_retain(v5);
    }
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::lock(uint64_t a1@<X0>, void *a2@<X8>)
{
  CFAllocatorRef v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    long long v5 = 0;
  }
  uint64_t v6 = 0;
LABEL_6:
  uint64_t v7 = operator new(0x18uLL);
  *uint64_t v7 = &unk_1F20F23F8;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *a2 = v7;
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1C5772038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void coex::XpcClient::handleMessage_sync(uint64_t a1, xpc::object *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    xpc::object::to_string((uint64_t *)buf, a2);
    uint64_t v18 = v27 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)double v23 = 136315138;
    *(void *)&v23[4] = v18;
    _os_log_debug_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEBUG, "#D Got Message:\n%s", v23, 0xCu);
    if (v27 < 0) {
      operator delete(*(void **)buf);
    }
  }
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)a2, "kMessageId");
  xpc_object_t v6 = value;
  xpc_object_t object = value;
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
  }
  if (MEMORY[0x1C8792D30](v6) == MEMORY[0x1E4F145D8])
  {
    unsigned int v15 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((uint64_t *)buf, a2);
      size_t v16 = v27 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)double v23 = 136315394;
      *(void *)&v23[4] = "kMessageId";
      __int16 v24 = 2080;
      xpc_object_t v25 = v16;
      _os_log_error_impl(&dword_1C5767000, v15, OS_LOG_TYPE_ERROR, "Message was missing key %s from: %s", v23, 0x16u);
      if (v27 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  else
  {
    int v7 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    int v8 = v7;
    uint64_t v9 = *(void *)(a1 + 112);
    if (!v9) {
      goto LABEL_16;
    }
    uint64_t v10 = a1 + 112;
    do
    {
      int v11 = *(_DWORD *)(v9 + 32);
      BOOL v12 = v11 < v7;
      if (v11 >= v7) {
        unsigned int v13 = (uint64_t *)v9;
      }
      else {
        unsigned int v13 = (uint64_t *)(v9 + 8);
      }
      if (!v12) {
        uint64_t v10 = v9;
      }
      uint64_t v9 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 112 && *(_DWORD *)(v10 + 32) <= v7)
    {
      xpc_object_t v17 = xpc_dictionary_get_value(*(xpc_object_t *)a2, "kSubId");
      *(void *)double v23 = v17;
      if (v17) {
        xpc_retain(v17);
      }
      else {
        *(void *)double v23 = xpc_null_create();
      }
      uint64_t v19 = xpc::dyn_cast_or_default((xpc *)v23, 0);
      uint64_t v20 = *(void *)(v10 + 40);
      xpc_object_t v21 = xpc_dictionary_get_value(*(xpc_object_t *)a2, "kMessageArgs");
      *(void *)buf = v21;
      if (v21) {
        xpc_retain(v21);
      }
      else {
        *(void *)buf = xpc_null_create();
      }
      (*(void (**)(uint64_t, uint8_t *, uint64_t))(v20 + 16))(v20, buf, v19);
      xpc_release(*(xpc_object_t *)buf);
      xpc_release(*(xpc_object_t *)v23);
    }
    else
    {
LABEL_16:
      uint64_t v14 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v8;
        _os_log_error_impl(&dword_1C5767000, v14, OS_LOG_TYPE_ERROR, "Unrecognized command %d", buf, 8u);
      }
    }
  }
  xpc_release(object);
}

void sub_1C5772330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex6Module5State4initEv_block_invoke_41(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6 = a1[4];
  __int16 v24 = 0;
  int v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (__int16 v24 = std::__shared_weak_count::lock(v7)) != 0)
  {
    int v8 = (void *)a1[5];
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  double v23 = v10;
  if (!v10) {
    goto LABEL_19;
  }
  int v11 = v10;
  uint64_t v12 = *(void *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v12) & 1) != 0) {
    goto LABEL_18;
  }
  xpc_object_t v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
LABEL_27:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
      goto LABEL_27;
    }
  }
  uint64_t v15 = v8[9];
  size_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_27;
  }
  xpc_object_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  void *v18 = v6;
  v18[1] = v13;
  xpc_object_t v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  uint64_t v20 = v8[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb5_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  int v11 = v23;
  if (v23)
  {
LABEL_18:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      xpc_object_t v22 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  xpc_object_t v22 = v24;
  if (!v24) {
    return;
  }
LABEL_20:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C5772628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t ServiceManager::isServerDown(ServiceManager *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 192);
  return v1 & 1;
}

void ___ZN4coex6Module5State4initEv_block_invoke_113(void *a1, xpc_object_t *a2, int a3)
{
  CFAllocatorRef v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    int v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        size_t v16 = operator new(0x18uLL);
        *size_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb23_E4__24EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State32handleTransparentMessageReq_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    xpc_object_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    xpc_object_t v3 = 0;
  }
  if (v3)
  {
    CFAllocatorRef v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to send transparent message req: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = 3760250884;
  if (MEMORY[0x1C8792D30]((*a1)[1]) == MEMORY[0x1E4F14590])
  {
    uint64_t v5 = *(void *)(v3 + 176);
    if (v5)
    {
      uint64_t v6 = (void *)v2[1];
      xpc_object_t object = v6;
      if (v6) {
        xpc_retain(v6);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      AudioManager::setAudioState(v5, (xpc::object *)&object);
      xpc_release(object);
      uint64_t v4 = 0;
      xpc_object_t object = 0;
    }
    else
    {
      uint64_t v7 = *(NSObject **)(v3 + 80);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Audio Manager is not created yet", buf, 2u);
      }
    }
  }
  else
  {
    uint64_t v4 = 3760250880;
  }
  uint64_t v8 = v2[2];
  *(void *)buf = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v8 + 16))(v8, v4, buf);
  xpc_release(*(xpc_object_t *)buf);
  uint64_t v9 = (const void *)v2[2];
  if (v9) {
    _Block_release(v9);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete(a1);
}

void sub_1C5772A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  xpc_release(object);
  uint64_t v14 = *(const void **)(v12 + 16);
  if (v14) {
    _Block_release(v14);
  }
  xpc_release(*(xpc_object_t *)(v12 + 8));
  operator delete((void *)v12);
  uint64_t v15 = (std::__shared_weak_count *)v11[2];
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

void ___ZZN11ServiceCtrl13handleCommandERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictEN8dispatch5blockIU13block_pointerFviSA_EEEENKUlvE_clEv_block_invoke_44(uint64_t a1, unsigned int a2, void **a3)
{
  unsigned int v9 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v6 = *(void *)(v4 + 40);
  uint64_t v5 = (uint64_t *)(v4 + 40);
  if (v6)
  {
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v5, &v9, a3);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v8 = *(const void **)(v7 + 40);
    *(void *)(v7 + 40) = 0;
    if (v8) {
      _Block_release(v8);
    }
  }
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_1C5772BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZZN11ServiceCtrl13handleCommandERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictEN8dispatch5blockIU13block_pointerFviSA_EEEENKUlvE_clEv_block_invoke_42(uint64_t a1, unsigned int a2, void **a3)
{
  unsigned int v3 = a2;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 32), &v3, a3);
}

void ___ZN17ABMServerInternal24handlePublicMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke(uint64_t a1, int a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = MEMORY[0x1C8792D30](*(void *)(a1 + 40));
  uint64_t v8 = MEMORY[0x1E4F14590];
  if (v7 != MEMORY[0x1E4F14590]) {
    return;
  }
  if (a2 != -534716414)
  {
    xpc_object_t v11 = xpc_int64_create(a2);
    if (v11) {
      goto LABEL_12;
    }
LABEL_11:
    xpc_object_t v11 = xpc_null_create();
LABEL_12:
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandResult[0], v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    if (MEMORY[0x1C8792D30](*a3) == v8)
    {
      xpc_object_t v13 = (xpc_object_t)*a3;
      if (v13) {
        xpc_retain(v13);
      }
      else {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandData[0], v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
    }
    goto LABEL_27;
  }
  if (*(_DWORD *)(v6 + 192) != 3)
  {
    xpc_object_t v11 = xpc_int64_create(-534716414);
    if (v11) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v9) == v8)
    {
      xpc_retain(v9);
      xpc_object_t v10 = v9;
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  xpc_object_t v15 = xpc_int64_create(-534716415);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandResult[0], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = xpc_string_create("Server not available");
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E4F4C240], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (v10)
  {
    xpc_retain(v10);
    xpc_object_t v19 = v10;
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandData[0], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  xpc_release(v10);
LABEL_27:
  xpc_object_t v22 = *(void **)(a1 + 40);
  xpc_object_t v21 = *(_xpc_connection_s **)(a1 + 48);

  xpc_connection_send_message(v21, v22);
}

void AudioManager::setAudioState(uint64_t a1, xpc::object *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG))
  {
    xpc::object::to_string((uint64_t *)object, a2);
    xpc_object_t v26 = SHIBYTE(object[2]) >= 0 ? object : (xpc_object_t *)object[0];
    *(_DWORD *)xpc_object_t xdict = 136315138;
    *(void *)&xdict[4] = v26;
    _os_log_debug_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEBUG, "#D Setting Audio State: %s", xdict, 0xCu);
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
  }
  *(void *)xpc_object_t xdict = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = (void *)*MEMORY[0x1E4F4C2A8];
  object[0] = a2;
  object[1] = v5;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)object, xdict);
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)xdict, (const char *)*MEMORY[0x1E4F4CA28]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  char v7 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if (v7)
  {
    int v8 = 0;
    LOBYTE(v9) = 1;
    if (*(unsigned char *)(a1 + 56) == 1) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  xpc_object_t v10 = xpc_dictionary_get_value(*(xpc_object_t *)xdict, (const char *)*MEMORY[0x1E4F4C8D0]);
  object[0] = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    object[0] = xpc_null_create();
  }
  char v11 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if (v11)
  {
    LOBYTE(v9) = 2;
    int v8 = 1;
    if (*(unsigned char *)(a1 + 56) == 2) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  xpc_object_t v20 = xpc_dictionary_get_value(*(xpc_object_t *)xdict, (const char *)*MEMORY[0x1E4F4C680]);
  object[0] = v20;
  if (v20) {
    xpc_retain(v20);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v23 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  int v8 = 0;
  if (v23) {
    int v9 = 3;
  }
  else {
    int v9 = 0;
  }
  if (*(unsigned __int8 *)(a1 + 56) != v9)
  {
LABEL_13:
    *(unsigned char *)(a1 + 56) = v9;
    AudioManager::notifyAudioOutputClients((os_log_t *)a1);
  }
LABEL_14:
  int v12 = *(unsigned __int8 *)(a1 + 88);
  if (*(unsigned char *)(a1 + 88)) {
    char v13 = 0;
  }
  else {
    char v13 = v8;
  }
  if (v13)
  {
    LOBYTE(v14) = 1;
    if (v12 == 1) {
      goto LABEL_25;
    }
LABEL_24:
    *(unsigned char *)(a1 + 88) = v14;
    AudioManager::notifyAudioSpeakerClients((NSObject **)a1);
    goto LABEL_25;
  }
  if (*(unsigned char *)(a1 + 88)) {
    int v14 = v8;
  }
  else {
    int v14 = 0;
  }
  if (v12 != v14) {
    goto LABEL_24;
  }
LABEL_25:
  xpc_object_t v58 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v15 = (void *)*MEMORY[0x1E4F4C230];
  object[0] = a2;
  object[1] = v15;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)object, &v58);
  xpc_object_t v16 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E4F4C3D0]);
  object[0] = v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    object[0] = xpc_null_create();
  }
  char v17 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if (v17)
  {
    int v18 = 1;
  }
  else
  {
    xpc_object_t v19 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E4F4C3D8]);
    object[0] = v19;
    if (v19) {
      xpc_retain(v19);
    }
    else {
      object[0] = xpc_null_create();
    }
    char v21 = xpc::dyn_cast_or_default((xpc *)object, 0);
    xpc_release(object[0]);
    if (v21)
    {
      int v18 = 2;
    }
    else
    {
      xpc_object_t v22 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E4F4C3E0]);
      object[0] = v22;
      if (v22) {
        xpc_retain(v22);
      }
      else {
        object[0] = xpc_null_create();
      }
      char v24 = xpc::dyn_cast_or_default((xpc *)object, 0);
      xpc_release(object[0]);
      if (v24)
      {
        int v18 = 3;
      }
      else
      {
        xpc_object_t v25 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E4F4C3E8]);
        object[0] = v25;
        if (v25) {
          xpc_retain(v25);
        }
        else {
          object[0] = xpc_null_create();
        }
        char v27 = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        if (v27)
        {
          int v18 = 4;
        }
        else
        {
          xpc_object_t v28 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E4F4C3F0]);
          object[0] = v28;
          if (v28) {
            xpc_retain(v28);
          }
          else {
            object[0] = xpc_null_create();
          }
          char v29 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          if (v29)
          {
            int v18 = 5;
          }
          else
          {
            xpc_object_t v30 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E4F4C3F8]);
            object[0] = v30;
            if (v30) {
              xpc_retain(v30);
            }
            else {
              object[0] = xpc_null_create();
            }
            int v31 = xpc::dyn_cast_or_default((xpc *)object, 0);
            xpc_release(object[0]);
            if (v31) {
              int v18 = 6;
            }
            else {
              int v18 = 0;
            }
          }
        }
      }
    }
  }
  if (*(unsigned __int8 *)(a1 + 24) != v18)
  {
    *(unsigned char *)(a1 + 24) = v18;
    AudioManager::notifyAudioInputClients((os_log_t *)a1);
  }
  xpc_object_t xarray = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v32 = (void *)*MEMORY[0x1E4F4C7A0];
  object[0] = a2;
  object[1] = v32;
  xpc::dict::object_proxy::operator xpc::array((uint64_t)object, &xarray);
  int v33 = *(unsigned __int8 *)(a1 + 120);
  xpc_object_t v34 = xarray;
  if (xarray)
  {
    xpc_retain(xarray);
LABEL_74:
    xpc_retain(v34);
    size_t v35 = v34;
    goto LABEL_75;
  }
  xpc_object_t v34 = xpc_null_create();
  if (v34) {
    goto LABEL_74;
  }
  xpc_object_t v34 = xpc_null_create();
  size_t v35 = 0;
LABEL_75:
  xpc_release(v35);
  int v36 = v33 != 0;
  xpc_object_t v37 = xarray;
  if (xarray) {
    xpc_retain(xarray);
  }
  else {
    xpc_object_t v37 = xpc_null_create();
  }
  if (MEMORY[0x1C8792D30](xarray) == MEMORY[0x1E4F14568])
  {
    size_t count = xpc_array_get_count(xarray);
    if (v37) {
      goto LABEL_80;
    }
LABEL_82:
    xpc_object_t v55 = xpc_null_create();
    goto LABEL_83;
  }
  size_t count = 0;
  if (!v37) {
    goto LABEL_82;
  }
LABEL_80:
  xpc_retain(v37);
  xpc_object_t v55 = v37;
LABEL_83:
  xpc_release(v37);
  CFMutableDictionaryRef v54 = (AudioManager *)a1;
  if (count || v34 != v55)
  {
    size_t v39 = 0;
    CFMutableDictionaryRef v40 = (const char *)*MEMORY[0x1E4F4C400];
    size_t v41 = count - 1;
    while (1)
    {
      while (1)
      {
        memset(object, 170, sizeof(object));
        xpc_object_t v42 = xpc_array_get_value(v34, v39);
        xpc_object_t v56 = v42;
        if (v42) {
          xpc_retain(v42);
        }
        else {
          xpc_object_t v56 = xpc_null_create();
        }
        xpc::dyn_cast_or_default((uint64_t *)object, (xpc *)&v56, (const object *)"", v43);
        xpc_release(v56);
        size_t v44 = strlen(v40);
        xpc_object_t v45 = (xpc_object_t)v44;
        char v46 = HIBYTE(object[2]);
        if (SHIBYTE(object[2]) < 0)
        {
          if (v44 == -1) {
LABEL_110:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          xpc_object_t v47 = (xpc_object_t *)object[0];
          xpc_object_t v48 = object[1];
        }
        else
        {
          if (v44 == -1) {
            goto LABEL_110;
          }
          xpc_object_t v47 = object;
          xpc_object_t v48 = (xpc_object_t)HIBYTE(object[2]);
        }
        size_t v49 = (size_t)(v48 >= v45 ? v45 : v48);
        BOOL v50 = memcmp(v47, v40, v49) == 0;
        BOOL v51 = v48 == v45 && v50;
        if ((v46 & 0x80) == 0) {
          break;
        }
        operator delete(object[0]);
        v36 |= v51;
        size_t v52 = v39 + 1;
        BOOL v53 = v41 == v39++;
        if (v53) {
          goto LABEL_105;
        }
      }
      v36 |= v51;
      size_t v52 = v39 + 1;
      BOOL v53 = v41 == v39++;
      if (v53)
      {
LABEL_105:
        size_t v39 = v52;
        if (v34 == v55) {
          break;
        }
      }
    }
  }
  xpc_release(v55);
  xpc_release(v34);
  if (*((unsigned char *)v54 + 120) != (v36 & 1))
  {
    *((unsigned char *)v54 + 120) = v36 & 1;
    AudioManager::notifyAudioWiredPortClients((NSObject **)v54);
  }
  xpc_release(xarray);
  xpc_release(v58);
  xpc_release(*(xpc_object_t *)xdict);
}

void sub_1C577362C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t a11, xpc_object_t a12, xpc_object_t a13, xpc_object_t object, uint64_t a15, uint64_t a16, xpc_object_t a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void xpc::dict::object_proxy::operator xpc::dict(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v4) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void AudioManager::notifyAudioOutputClients(os_log_t *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v3 = *((char *)this + 56);
    if (v3 > 3) {
      xpc_object_t v4 = "Unknown Audio Output";
    }
    else {
      xpc_object_t v4 = off_1E6518040[v3];
    }
    LODWORD(v13) = 136315138;
    *(void *)((char *)&v13 + 4) = v4;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Audio Output: %s", (uint8_t *)&v13, 0xCu);
  }
  os_log_t v5 = this[8];
  os_log_t v6 = this[9];
  if (v5 != v6)
  {
    while (!v5->isa)
    {
      char v7 = 0;
      isa = v5[1].isa;
      if (isa) {
        goto LABEL_11;
      }
LABEL_12:
      char v9 = *((unsigned char *)this + 56);
      if (!v7)
      {
        char v11 = 0;
        *(void *)&long long v13 = MEMORY[0x1E4F143A8];
        *((void *)&v13 + 1) = 3321888768;
        int v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager16AudioOutputStateEEEclIJS2_EEEvDpT__block_invoke;
        xpc_object_t v15 = &__block_descriptor_41_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE_e5_v8__0l;
LABEL_18:
        int v12 = 0;
        goto LABEL_19;
      }
      xpc_object_t v10 = _Block_copy(v7);
      char v11 = v10;
      *(void *)&long long v13 = MEMORY[0x1E4F143A8];
      *((void *)&v13 + 1) = 3321888768;
      int v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager16AudioOutputStateEEEclIJS2_EEEvDpT__block_invoke;
      xpc_object_t v15 = &__block_descriptor_41_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE_e5_v8__0l;
      if (!v10) {
        goto LABEL_18;
      }
      int v12 = _Block_copy(v10);
LABEL_19:
      aBlock = v12;
      char v17 = v9;
      dispatch_async(isa, &v13);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v11) {
        _Block_release(v11);
      }
      if (isa) {
        dispatch_release(isa);
      }
      if (v7) {
        _Block_release(v7);
      }
      v5 += 2;
      if (v5 == v6) {
        return;
      }
    }
    char v7 = _Block_copy(v5->isa);
    isa = v5[1].isa;
    if (!isa) {
      goto LABEL_12;
    }
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1C5773AD0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AudioManager::notifyAudioSpeakerClients(NSObject **this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)this + 88)) {
      unint64_t v3 = "YES";
    }
    else {
      unint64_t v3 = "NO";
    }
    LODWORD(v12) = 136315138;
    *(void *)((char *)&v12 + 4) = v3;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Speaker State: %s", (uint8_t *)&v12, 0xCu);
  }
  xpc_object_t v4 = this[12];
  os_log_t v5 = this[13];
  if (v4 != v5)
  {
    while (!v4->isa)
    {
      os_log_t v6 = 0;
      isa = v4[1].isa;
      if (isa) {
        goto LABEL_11;
      }
LABEL_12:
      char v8 = *((unsigned char *)this + 88);
      if (!v6)
      {
        xpc_object_t v10 = 0;
        *(void *)&long long v12 = MEMORY[0x1E4F143A8];
        *((void *)&v12 + 1) = 3321888768;
        long long v13 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        int v14 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
LABEL_18:
        char v11 = 0;
        goto LABEL_19;
      }
      char v9 = _Block_copy(v6);
      xpc_object_t v10 = v9;
      *(void *)&long long v12 = MEMORY[0x1E4F143A8];
      *((void *)&v12 + 1) = 3321888768;
      long long v13 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
      int v14 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      if (!v9) {
        goto LABEL_18;
      }
      char v11 = _Block_copy(v9);
LABEL_19:
      aBlock = v11;
      char v16 = v8;
      dispatch_async(isa, &v12);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v10) {
        _Block_release(v10);
      }
      if (isa) {
        dispatch_release(isa);
      }
      if (v6) {
        _Block_release(v6);
      }
      v4 += 2;
      if (v4 == v5) {
        return;
      }
    }
    os_log_t v6 = _Block_copy(v4->isa);
    isa = v4[1].isa;
    if (!isa) {
      goto LABEL_12;
    }
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1C5773D14(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AudioManager::notifyAudioInputClients(os_log_t *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v3 = *((char *)this + 24);
    if (v3 > 6) {
      xpc_object_t v4 = "Unknown Audio Input";
    }
    else {
      xpc_object_t v4 = off_1E6518060[v3];
    }
    LODWORD(v13) = 136315138;
    *(void *)((char *)&v13 + 4) = v4;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Audio Input: %s", (uint8_t *)&v13, 0xCu);
  }
  os_log_t v5 = this[4];
  os_log_t v6 = this[5];
  if (v5 != v6)
  {
    while (!v5->isa)
    {
      char v7 = 0;
      isa = v5[1].isa;
      if (isa) {
        goto LABEL_11;
      }
LABEL_12:
      char v9 = *((unsigned char *)this + 24);
      if (!v7)
      {
        char v11 = 0;
        *(void *)&long long v13 = MEMORY[0x1E4F143A8];
        *((void *)&v13 + 1) = 3321888768;
        int v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager15AudioInputStateEEEclIJS2_EEEvDpT__block_invoke;
        xpc_object_t v15 = &__block_descriptor_41_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE_e5_v8__0l;
LABEL_18:
        long long v12 = 0;
        goto LABEL_19;
      }
      xpc_object_t v10 = _Block_copy(v7);
      char v11 = v10;
      *(void *)&long long v13 = MEMORY[0x1E4F143A8];
      *((void *)&v13 + 1) = 3321888768;
      int v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager15AudioInputStateEEEclIJS2_EEEvDpT__block_invoke;
      xpc_object_t v15 = &__block_descriptor_41_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE_e5_v8__0l;
      if (!v10) {
        goto LABEL_18;
      }
      long long v12 = _Block_copy(v10);
LABEL_19:
      aBlock = v12;
      char v17 = v9;
      dispatch_async(isa, &v13);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v11) {
        _Block_release(v11);
      }
      if (isa) {
        dispatch_release(isa);
      }
      if (v7) {
        _Block_release(v7);
      }
      v5 += 2;
      if (v5 == v6) {
        return;
      }
    }
    char v7 = _Block_copy(v5->isa);
    isa = v5[1].isa;
    if (!isa) {
      goto LABEL_12;
    }
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1C5773F60(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb23_E4__24EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  unint64_t v3 = *(void **)*a1;
  xpc_object_t v4 = *(void **)(*a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleTransparentMessageReq_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  os_log_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5774084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  long long v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleTransparentMessageReq_sync(void *a1, void *a2, uint64_t a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    os_log_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  uint64_t v69 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  char v9 = Mutable;
  if (Mutable) {
    uint64_t v69 = Mutable;
  }
  xpc_object_t v68 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(void *)buf = a2;
  *(void *)&uint8_t buf[8] = "kWCMCellularTransparentMessageInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v68);
  uint64_t v10 = MEMORY[0x1C8792D30](v68);
  uint64_t v11 = MEMORY[0x1E4F14568];
  if (v10 == MEMORY[0x1E4F14568])
  {
    CFMutableArrayRef v67 = 0;
    CFMutableArrayRef v12 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
    if (v12) {
      CFMutableArrayRef v67 = v12;
    }
    memset(buf, 170, sizeof(buf));
    xpc_object_t v13 = v68;
    if (v68)
    {
      xpc_retain(v68);
      *(void *)buf = v13;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
      *(void *)buf = v13;
      if (!v13)
      {
        xpc_object_t v13 = 0;
        *(void *)buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v13);
LABEL_13:
    *(void *)&uint8_t buf[8] = 0;
    xpc_release(v13);
    int v14 = (const void *)*MEMORY[0x1E4FB9810];
    CFTypeRef v54 = (CFTypeRef)*MEMORY[0x1E4FB9928];
    while (1)
    {
      xpc_object_t v15 = v68;
      if (v68) {
        xpc_retain(v68);
      }
      else {
        xpc_object_t v15 = xpc_null_create();
      }
      if (MEMORY[0x1C8792D30](v68) == v11)
      {
        size_t count = xpc_array_get_count(v68);
        if (!v15)
        {
LABEL_23:
          xpc_object_t v17 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        size_t count = 0;
        if (!v15) {
          goto LABEL_23;
        }
      }
      xpc_retain(v15);
      xpc_object_t v17 = v15;
LABEL_24:
      xpc_release(v15);
      xpc_object_t v18 = *(xpc_object_t *)buf;
      uint64_t v19 = *(void *)&buf[8];
      xpc_release(v17);
      if (v19 == count && v18 == v17)
      {
        xpc_release(*(xpc_object_t *)buf);
        CFMutableArrayRef v39 = v67;
        char v9 = v69;
        ctu::cf::insert<__CFString const*,__CFArray *>(v69, (CFTypeRef)*MEMORY[0x1E4FB9998], v67);
        a3 = a3;
        if (v39) {
          CFRelease(v39);
        }
        break;
      }
      *(void *)CFMutableDictionaryRef v66 = 0;
      CFMutableDictionaryRef v20 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      char v21 = v20;
      if (v20) {
        *(void *)CFMutableDictionaryRef v66 = v20;
      }
      xpc_object_t object = buf;
      v64 = *(const char **)&buf[8];
      xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&object, &xdict);
      xpc_object_t value = xpc_dictionary_get_value(xdict, "kWCMCellularTransparentMessage_Type");
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      unsigned int v23 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v21, v14, v23, v7);
      xpc_release(object);
      xpc_object_t xarray = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t object = &xdict;
      v64 = "kWCMCellularTransparentMessage_ByteList";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&object, &xarray);
      if (MEMORY[0x1C8792D30](xarray) == v11)
      {
        CFTypeRef v61 = 0;
        CFMutableArrayRef v24 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
        if (v24) {
          CFTypeRef v61 = v24;
        }
        xpc_object_t v25 = xarray;
        if (xarray)
        {
          xpc_retain(xarray);
          goto LABEL_37;
        }
        xpc_object_t v25 = xpc_null_create();
        if (v25)
        {
LABEL_37:
          xpc_retain(v25);
          xpc_object_t v26 = v25;
        }
        else
        {
          xpc_object_t v25 = xpc_null_create();
          xpc_object_t v26 = 0;
        }
        xpc_release(v26);
        size_t v27 = 0;
        while (2)
        {
          xpc_object_t v29 = xarray;
          if (xarray) {
            xpc_retain(xarray);
          }
          else {
            xpc_object_t v29 = xpc_null_create();
          }
          if (MEMORY[0x1C8792D30](xarray) == v11)
          {
            size_t v30 = xpc_array_get_count(xarray);
            if (!v29) {
              goto LABEL_48;
            }
LABEL_46:
            xpc_retain(v29);
            xpc_object_t v31 = v29;
          }
          else
          {
            size_t v30 = 0;
            if (v29) {
              goto LABEL_46;
            }
LABEL_48:
            xpc_object_t v31 = xpc_null_create();
          }
          xpc_release(v29);
          xpc_release(v31);
          if (v27 == v30 && v25 == v31)
          {
            xpc_release(v25);
            CFTypeRef v36 = v61;
            char v21 = *(__CFDictionary **)v66;
            ctu::cf::insert<__CFString const*,__CFArray *>(*(__CFDictionary **)v66, v54, v61);
            if (v36) {
              CFRelease(v36);
            }
            break;
          }
          xpc_object_t v32 = xpc_array_get_value(v25, v27);
          xpc_object_t v60 = v32;
          if (v32) {
            xpc_retain(v32);
          }
          else {
            xpc_object_t v60 = xpc_null_create();
          }
          int v33 = xpc::dyn_cast_or_default((xpc *)&v60, 0);
          xpc_object_t v34 = (__CFArray *)v61;
          int valuePtr = v33;
          CFNumberRef v35 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
          xpc_object_t object = v35;
          if (v35)
          {
            CFArrayAppendValue(v34, v35);
            CFRelease(v35);
          }
          xpc_release(v60);
          if (v25)
          {
            xpc_retain(v25);
            xpc_object_t v28 = v25;
          }
          else
          {
            xpc_object_t v28 = xpc_null_create();
          }
          ++v27;
          xpc_release(v28);
          continue;
        }
      }
      xpc_object_t v37 = v67;
      xpc_object_t object = v21;
      if (v21)
      {
        CFRetain(v21);
        CFArrayAppendValue(v37, v21);
        CFRelease(v21);
      }
      xpc_release(xarray);
      xpc_release(xdict);
      if (v21) {
        CFRelease(v21);
      }
      xpc_object_t v38 = *(xpc_object_t *)buf;
      if (*(void *)buf) {
        xpc_retain(*(xpc_object_t *)buf);
      }
      else {
        xpc_object_t v38 = xpc_null_create();
      }
      ++*(void *)&buf[8];
      xpc_release(v38);
    }
  }
  xpc_object_t object = 0;
  CFMutableDictionaryRef v40 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v41 = v40;
  if (v40) {
    xpc_object_t object = v40;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v40, (CFTypeRef)*MEMORY[0x1E4FB98B0], v9);
  xpc_object_t v42 = a1[5];
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = v41;
    _os_log_impl(&dword_1C5767000, v42, OS_LOG_TYPE_DEFAULT, "#I Sending transparent message reqeust: %@", buf, 0xCu);
  }
  uint64_t v44 = a1[9];
  xpc_object_t v43 = (std::__shared_weak_count *)a1[10];
  *(void *)buf = v44;
  if (!v43 || (v45 = std::__shared_weak_count::lock(v43), (*(void *)&uint8_t buf[8] = v45) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v46 = v45;
  uint64_t v47 = a1[13];
  if (v41 && (CFTypeID v48 = CFGetTypeID(v41), v48 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v41;
    CFRetain(v41);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State32handleTransparentMessageReq_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_218;
  aBlock[4] = a1;
  aBlock[5] = v44;
  xpc_object_t v56 = v46;
  atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v49 = _Block_copy(aBlock);
  BOOL v50 = a1[11];
  if (v50) {
    dispatch_retain(v50);
  }
  if (v49)
  {
    CFTypeID v57 = _Block_copy(v49);
    dispatch_object_t v58 = v50;
    if (!v50) {
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  CFTypeID v57 = 0;
  dispatch_object_t v58 = v50;
  if (v50) {
LABEL_83:
  }
    dispatch_retain(v50);
LABEL_84:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v47 + 48))(v47, &cf, a3, &v57);
  if (v58) {
    dispatch_release(v58);
  }
  if (v57) {
    _Block_release(v57);
  }
  if (v50) {
    dispatch_release(v50);
  }
  if (v49) {
    _Block_release(v49);
  }
  if (cf) {
    CFRelease(cf);
  }
  BOOL v51 = v56;
  if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
  size_t v52 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v53 = object;
    if (!object) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
  std::__shared_weak_count::__release_weak(v52);
  xpc_object_t v53 = object;
  if (object) {
LABEL_100:
  }
    CFRelease(v53);
LABEL_101:
  xpc_release(v68);
  if (v69) {
    CFRelease(v69);
  }
}

void sub_1C5774930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,xpc_object_t a22,char a23,xpc_object_t object,xpc_object_t a25,uint64_t a26,xpc_object_t a27,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void xpc::dict::object_proxy::operator xpc::array(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v4) != MEMORY[0x1E4F14568])
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void ctu::cf::insert<__CFString const*,__CFArray *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5774C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C5774CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void xpc::array::object_proxy::operator xpc::dict(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_array_get_value(**(xpc_object_t **)a1, *(void *)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v4) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void ctu::cf::insert<__CFString const*,unsigned int>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5774E00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5774E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>(ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1},std::default_delete<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t v4 = std::__tree<std::string>::find<std::string>(v3 + 120, (const void **)*a1 + 1);
  xpc_object_t v5 = (const void *)v2[5];
  if ((uint64_t *)(v3 + 128) == v4)
  {
    if (!v5) {
      goto LABEL_12;
    }
    xpc_object_t v6 = xpc_null_create();
    uint64_t v7 = v2[5];
    object[0] = v6;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v7 + 16))(v7, 3760250882, object);
    xpc_release(object[0]);
    xpc_release(v8);
  }
  else if (v5)
  {
    object[0] = 0;
    object[1] = object;
    object[2] = (xpc_object_t)0x3002000000;
    xpc_object_t object[3] = __Block_byref_object_copy__4;
    object[4] = __Block_byref_object_dispose__4;
    char v16 = (void *)0xAAAAAAAAAAAAAAAALL;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZN11ServiceCtrl13handleCommandERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictEN8dispatch5blockIU13block_pointerFviSA_EEEENKUlvE_clEv_block_invoke_42;
    aBlock[3] = &__block_descriptor_tmp_43_1;
    int v14 = _Block_copy(v5);
    char v16 = _Block_copy(aBlock);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = ___ZZN11ServiceCtrl13handleCommandERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictEN8dispatch5blockIU13block_pointerFviSA_EEEENKUlvE_clEv_block_invoke_44;
    v11[3] = &unk_1E6517FE0;
    v11[4] = object;
    CFMutableArrayRef v12 = v11;
    dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>::operator()<xpc::dict const&,void({block_pointer})(int,xpc::dict)>(v4[7], (xpc_object_t)v2[4], (void **)&v12);
    _Block_object_dispose(object, 8);
    if (v16) {
      _Block_release(v16);
    }
    if (v14) {
      _Block_release(v14);
    }
  }
  else
  {
    object[0] = &__block_literal_global_6;
    dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>::operator()<xpc::dict const&,void({block_pointer})(int,xpc::dict)>(v4[7], (xpc_object_t)v2[4], object);
  }
  CFNumberRef v9 = (const void *)v2[5];
  if (v9) {
    _Block_release(v9);
  }
LABEL_12:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  if (*((char *)v2 + 31) < 0) {
    operator delete((void *)v2[1]);
  }
  operator delete(v2);
  uint64_t v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }

  operator delete(a1);
}

void sub_1C57750B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,xpc_object_t object,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock)
{
  xpc_release(object);
  xpc_release(v27);
  std::unique_ptr<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1},std::default_delete<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a9);
  xpc_object_t v29 = (std::__shared_weak_count *)v26[2];
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

void dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>::operator()<xpc::dict const&,void({block_pointer})(int,xpc::dict)>(uint64_t a1, xpc_object_t object, void **a3)
{
  xpc_object_t objecta = object;
  if (!object)
  {
    xpc_object_t objecta = xpc_null_create();
    xpc_object_t v5 = *a3;
    if (!*a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(object);
  xpc_object_t v5 = *a3;
  if (*a3) {
LABEL_5:
  }
    xpc_object_t v5 = _Block_copy(v5);
LABEL_6:
  aBlock = v5;
  (*(void (**)(uint64_t, xpc_object_t *, void **))(a1 + 16))(a1, &objecta, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(objecta);
}

void sub_1C5775228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t object)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  xpc_object_t v4 = *(void **)(a1 + 32);
  xpc_object_t v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    xpc_object_t v6 = *a3;
    if (*a3) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v7 = 0;
    xpc_object_t v8 = (std::__shared_weak_count *)v4[7];
    if (!v8) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  xpc_object_t v5 = xpc_null_create();
  xpc_object_t v6 = *a3;
  if (!*a3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v7 = _Block_copy(v6);
  xpc_object_t v8 = (std::__shared_weak_count *)v4[7];
  if (!v8) {
LABEL_11:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
  uint64_t v9 = v4[6];
  uint64_t v10 = std::__shared_weak_count::lock(v8);
  if (!v10) {
    goto LABEL_11;
  }
  uint64_t v11 = v10;
  CFMutableArrayRef v12 = operator new(0x18uLL);
  *CFMutableArrayRef v12 = v4;
  v12[1] = v5;
  xpc_object_t v13 = xpc_null_create();
  v12[2] = v7;
  int v14 = v4[8];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v15 = operator new(0x18uLL);
  void *v15 = v12;
  v15[1] = v9;
  void v15[2] = v11;
  dispatch_async_f(v14, v15, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v13);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN4coex5SubIdEEEES8_SA__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = **(std::runtime_error_vtbl ***)(a1 + 40);
  if (v3) {
    CFRetain(v3);
  }
  if (!*v2)
  {
    std::runtime_error::runtime_error(&cf, "call to empty boost::function");
    cf.__vftable = (std::runtime_error_vtbl *)&unk_1F20F2330;
    boost::throw_exception<boost::bad_function_call>(&cf);
  }
  uint64_t v4 = **(unsigned int **)(a1 + 48);
  xpc_object_t v5 = *(void (**)(void *, std::runtime_error *, uint64_t))((*v2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  cf.__vftable = v3;
  v5(v2 + 1, &cf, v4);
  if (cf.__vftable) {
    CFRelease(cf.__vftable);
  }
  xpc_object_t v6 = *(uint64_t **)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = *v6;
    if (*v6)
    {
      if ((v7 & 1) == 0)
      {
        xpc_object_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 & 0xFFFFFFFFFFFFFFFELL);
        if (v8) {
          v8(v6 + 1, v6 + 1, 2);
        }
      }
      *xpc_object_t v6 = 0;
    }
    operator delete(v6);
  }
  uint64_t v9 = *(CFTypeRef **)(a1 + 40);
  if (v9)
  {
    if (*v9) {
      CFRelease(*v9);
    }
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 48);
  if (v10) {
    operator delete(v10);
  }
}

void sub_1C57754C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, std::runtime_error a11)
{
}

void sub_1C57754DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C57754F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void boost::detail::function::void_function_obj_invoker2<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::invoke(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2 = *a1;
  CFTypeRef cf = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5775568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISF_EENSL_IFvRKNS7_10connectionESD_SE_EEENS7_5mutexEEES3_vJSD_SE_EEEDTcl7connectfp_cvNSI_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSY_S10_E_block_invoke(void *a1, const void **a2, uint64_t a3)
{
  xpc_object_t v5 = (void (*)(void *, CFTypeRef *, uint64_t))a1[5];
  uint64_t v4 = a1[6];
  xpc_object_t v6 = (void *)(a1[4] + (v4 >> 1) - 72);
  if (v4)
  {
    xpc_object_t v5 = *(void (**)(void *, CFTypeRef *, uint64_t))(*v6 + v5);
    uint64_t v7 = *a2;
    CFTypeRef cf = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v7 = *a2;
  CFTypeRef cf = v7;
  if (v7) {
LABEL_5:
  }
    CFRetain(v7);
LABEL_6:
  v5(v6, &cf, a3);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C577563C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void boost::detail::function::void_function_obj_invoker2<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::invoke(uint64_t a1, const void **a2, int a3)
{
  uint64_t v4 = *a2;
  xpc_object_t v25 = *a2;
  *a2 = 0;
  xpc_object_t v6 = *(NSObject **)a1;
  xpc_object_t v5 = *(const void **)(a1 + 8);
  if (!v5)
  {
    xpc_object_t v8 = 0;
LABEL_10:
    char v19 = 1;
    *(void *)&long long v26 = 0;
    if (!v4) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v7 = _Block_copy(v5);
  xpc_object_t v8 = v7;
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v9 = _Block_copy(v7);
  uint64_t v10 = v9;
  if (!v9)
  {
    char v19 = 0;
    *(void *)&long long v26 = 0;
    if (!v4) {
      goto LABEL_23;
    }
LABEL_22:
    CFRetain(v4);
    goto LABEL_23;
  }
  uint64_t v11 = _Block_copy(v9);
  CFMutableArrayRef v12 = v11;
  if (v11)
  {
    xpc_object_t v13 = _Block_copy(v11);
    int v14 = v13;
    if (v13)
    {
      xpc_object_t v15 = _Block_copy(v13);
      char v16 = v15;
      if (v15)
      {
        xpc_object_t v17 = _Block_copy(v15);
        xpc_object_t v18 = v17;
        if (v17)
        {
          *(void *)&long long v26 = _Block_copy(v17);
          _Block_release(v18);
        }
        else
        {
          *(void *)&long long v26 = 0;
        }
        _Block_release(v16);
      }
      else
      {
        *(void *)&long long v26 = 0;
      }
      _Block_release(v14);
    }
    else
    {
      *(void *)&long long v26 = 0;
    }
    _Block_release(v12);
  }
  else
  {
    *(void *)&long long v26 = 0;
  }
  _Block_release(v10);
  char v19 = 0;
  if (v4) {
    goto LABEL_22;
  }
LABEL_23:
  CFMutableDictionaryRef v20 = operator new(8uLL);
  *CFMutableDictionaryRef v20 = v4;
  if (v4) {
    CFRetain(v4);
  }
  char v21 = operator new(4uLL);
  _DWORD *v21 = a3;
  xpc_object_t v22 = (char *)operator new(0x20uLL);
  unsigned int v23 = v22;
  *(void *)xpc_object_t v22 = 0;
  if (boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable)
  {
    *(void *)xpc_object_t v22 = boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable;
    if (boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable)
    {
      *(_OWORD *)(v22 + 8) = v26;
      *((void *)v22 + 3) = v27;
    }
    else
    {
      (*(void (**)(long long *, char *, void))((unint64_t)boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL))(&v26, v22 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN4coex5SubIdEEEES8_SA__block_invoke;
  block[3] = &__block_descriptor_tmp_397;
  block[4] = v23;
  block[5] = v20;
  void block[6] = v21;
  dispatch_async(v6, block);
  if (v4) {
    CFRelease(v4);
  }
  if (boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable)
  {
    if ((boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable & 1) == 0)
    {
      CFMutableArrayRef v24 = *(void (**)(long long *, long long *, uint64_t))((unint64_t)boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v24) {
        v24(&v26, &v26, 2);
      }
    }
  }
  if ((v19 & 1) == 0)
  {
    _Block_release(v8);
    uint64_t v4 = v25;
  }
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1C5775918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, uint64_t a12)
{
  operator delete(v13);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>::~function(&a12);
  if ((v14 & 1) == 0) {
    _Block_release(v12);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      xpc_object_t v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001C599CE42 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001C599CE42 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    xpc_object_t v6 = *a1;
    if (*a1) {
      xpc_object_t v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      uint64_t v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

void coex::Module::State::handleCommandDriverStateUpdate_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  CFDictionaryRef v4 = *a2;
  if (v4) {
    xpc_object_t v5 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    xpc_object_t v5 = 0;
  }
  if (v5)
  {
    memset(buf, 170, 16);
    uint64_t v7 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v4);
    uint64_t v185 = 0;
    uint64_t v8 = ctu::cf::map_adapter::copyCFDictionaryRef(v7, (const __CFString *)*MEMORY[0x1E4FB9608]);
    uint64_t v9 = (const void *)v8;
    uint64_t v185 = v8;
    if (v8) {
      uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v10)
    {
      CFDictionaryRef v11 = (const __CFDictionary *)v8;
    }
    else
    {
      CFDictionaryRef v11 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9670]);
      uint64_t v185 = (uint64_t)v11;
      if (v9) {
        CFRelease(v9);
      }
    }
    if (v11) {
      xpc_object_t v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      xpc_object_t v13 = 0;
    }
    if (v13)
    {
      v183 = (uint64_t (**)(void, const void *))0xAAAAAAAAAAAAAAAALL;
      unint64_t v184 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v183, v11);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      xpc_object_t v15 = Mutable;
      if (Mutable) {
        CFRetain(Mutable);
      }
      char v16 = (const void *)*MEMORY[0x1E4FB96C8];
      xpc_object_t v17 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB96C8]);
      xpc_object_t v18 = v17;
      if (v17)
      {
        CFRelease(v17);
        ctu::cf::update<__CFString const*,void const*>(v15, v16, v18);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      char v19 = (const void *)*MEMORY[0x1E4FB96B0];
      CFMutableDictionaryRef v20 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB96B0]);
      char v21 = v20;
      if (v20)
      {
        CFRelease(v20);
        ctu::cf::update<__CFString const*,void const*>(v15, v19, v21);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      xpc_object_t v22 = (const void *)*MEMORY[0x1E4FB95D0];
      unsigned int v23 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB95D0]);
      CFMutableArrayRef v24 = v23;
      if (v23)
      {
        CFRelease(v23);
        ctu::cf::update<__CFString const*,void const*>(v15, v22, v24);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      xpc_object_t v25 = (const void *)*MEMORY[0x1E4FB97B0];
      long long v26 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB97B0]);
      uint64_t v27 = v26;
      if (v26)
      {
        CFRelease(v26);
        ctu::cf::update<__CFString const*,void const*>(v15, v25, v27);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      xpc_object_t v28 = (const void *)*MEMORY[0x1E4FB98B8];
      xpc_object_t v29 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB98B8]);
      size_t v30 = v29;
      if (v29)
      {
        CFRelease(v29);
        ctu::cf::update<__CFString const*,void const*>(v15, v28, v30);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      xpc_object_t v31 = (const void *)*MEMORY[0x1E4FB9790];
      xpc_object_t v32 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9790]);
      int v33 = v32;
      if (v32)
      {
        CFRelease(v32);
        ctu::cf::update<__CFString const*,void const*>(v15, v31, v33);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      xpc_object_t v34 = (const void *)*MEMORY[0x1E4FB97F0];
      CFNumberRef v35 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB97F0]);
      CFTypeRef v36 = v35;
      if (v35)
      {
        CFRelease(v35);
        ctu::cf::update<__CFString const*,void const*>(v15, v34, v36);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      xpc_object_t v37 = (const void *)*MEMORY[0x1E4FB97A0];
      xpc_object_t v38 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB97A0]);
      CFMutableArrayRef v39 = v38;
      if (v38)
      {
        CFRelease(v38);
        ctu::cf::update<__CFString const*,void const*>(v15, v37, v39);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      CFMutableDictionaryRef v40 = (const void *)*MEMORY[0x1E4FB9848];
      CFMutableDictionaryRef v41 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9848]);
      xpc_object_t v42 = v41;
      if (v41)
      {
        CFRelease(v41);
        ctu::cf::update<__CFString const*,void const*>(v15, v40, v42);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      xpc_object_t v43 = (const void *)*MEMORY[0x1E4FB9868];
      uint64_t v44 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9868]);
      xpc_object_t v45 = v44;
      if (v44)
      {
        CFRelease(v44);
        ctu::cf::update<__CFString const*,void const*>(v15, v43, v45);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      char v46 = (const void *)*MEMORY[0x1E4FB97C0];
      uint64_t v47 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB97C0]);
      CFTypeID v48 = v47;
      if (v47)
      {
        CFRelease(v47);
        ctu::cf::update<__CFString const*,void const*>(v15, v46, v48);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      size_t v49 = (const void *)*MEMORY[0x1E4FB9870];
      BOOL v50 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9870]);
      BOOL v51 = v50;
      if (v50)
      {
        CFRelease(v50);
        ctu::cf::update<__CFString const*,void const*>(v15, v49, v51);
      }
      if (v15) {
        CFRelease(v15);
      }
      uint64_t v52 = 152;
      if (!a3) {
        uint64_t v52 = 136;
      }
      xpc_object_t v53 = *(void **)(a1 + v52);
      if (v53) {
        CFRetain(v53);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v53, (CFTypeRef)coex::kKeyWWANState, v15);
      if (v53) {
        CFRelease(v53);
      }
      if (v15) {
        CFRelease(v15);
      }
      MEMORY[0x1C8791160](&v183);
    }
    CFDictionaryRef v54 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9660]);
    uint64_t v185 = (uint64_t)v54;
    if (v11) {
      CFRelease(v11);
    }
    if (v54) {
      xpc_object_t v55 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      xpc_object_t v55 = 0;
    }
    BOOL v56 = v55 != 0;
    if (v55)
    {
      v183 = (uint64_t (**)(void, const void *))0xAAAAAAAAAAAAAAAALL;
      unint64_t v184 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v183, v54);
      CFMutableDictionaryRef v57 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      dispatch_object_t v58 = v57;
      if (v57) {
        CFRetain(v57);
      }
      xpc_object_t v59 = (const void *)*MEMORY[0x1E4FB99C8];
      xpc_object_t v60 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB99C8]);
      CFTypeRef v61 = v60;
      if (v60)
      {
        CFRelease(v60);
        ctu::cf::update<__CFString const*,void const*>(v58, v59, v61);
      }
      if (v58) {
        CFRelease(v58);
      }
      uint64_t v62 = 152;
      if (!a3) {
        uint64_t v62 = 136;
      }
      xpc_object_t v63 = *(void **)(a1 + v62);
      if (v63) {
        CFRetain(v63);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v63, (CFTypeRef)coex::kKeyLinkQuality, v58);
      if (v63) {
        CFRelease(v63);
      }
      if (v58) {
        CFRelease(v58);
      }
      MEMORY[0x1C8791160](&v183);
    }
    CFStringRef v64 = (const __CFString *)*MEMORY[0x1E4FB96B8];
    CFDictionaryRef v65 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB96B8]);
    v182 = v13;
    uint64_t v185 = (uint64_t)v65;
    if (v54) {
      CFRelease(v54);
    }
    if (v65) {
      CFMutableDictionaryRef v66 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      CFMutableDictionaryRef v66 = 0;
    }
    CFMutableArrayRef v67 = (const void **)MEMORY[0x1E4FB95F8];
    if (v66)
    {
      v183 = (uint64_t (**)(void, const void *))0xAAAAAAAAAAAAAAAALL;
      unint64_t v184 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v183, v65);
      CFMutableDictionaryRef v68 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v69 = v68;
      if (v68) {
        CFRetain(v68);
      }
      uint64_t v70 = (const void *)*MEMORY[0x1E4FB95A0];
      uint64_t v71 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB95A0]);
      uint64_t v72 = v71;
      if (v71)
      {
        CFRelease(v71);
        ctu::cf::update<__CFString const*,void const*>(v69, v70, v72);
      }
      if (v69)
      {
        CFRelease(v69);
        CFRetain(v69);
      }
      CFDataRef v73 = *v67;
      uint64_t v74 = (const void *)(*v183)(&v183, *v67);
      size_t v75 = v74;
      if (v74)
      {
        CFRelease(v74);
        ctu::cf::update<__CFString const*,void const*>(v69, v73, v75);
      }
      if (v69)
      {
        CFRelease(v69);
        CFRetain(v69);
      }
      CFMutableDictionaryRef v76 = (const void *)*MEMORY[0x1E4FB9628];
      uint64_t v77 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9628]);
      uint64_t v78 = v77;
      if (v77)
      {
        CFRelease(v77);
        ctu::cf::update<__CFString const*,void const*>(v69, v76, v78);
      }
      if (v69) {
        CFRelease(v69);
      }
      uint64_t v79 = 152;
      if (!a3) {
        uint64_t v79 = 136;
      }
      v80 = *(void **)(a1 + v79);
      if (v80) {
        CFRetain(v80);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v80, (CFTypeRef)coex::kKeyWLANScanState, v69);
      if (v80) {
        CFRelease(v80);
      }
      if (v69) {
        CFRelease(v69);
      }
      MEMORY[0x1C8791160](&v183);
    }
    CFDictionaryRef v81 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, v64);
    uint64_t v185 = (uint64_t)v81;
    if (v65) {
      CFRelease(v65);
    }
    if (v81) {
      int v82 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      int v82 = 0;
    }
    if (v82)
    {
      v183 = (uint64_t (**)(void, const void *))0xAAAAAAAAAAAAAAAALL;
      unint64_t v184 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v183, v81);
      CFMutableDictionaryRef v83 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      v84 = v83;
      if (v83) {
        CFRetain(v83);
      }
      int v85 = (const void *)*MEMORY[0x1E4FB9770];
      v86 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9770]);
      size_t v87 = v86;
      if (v86)
      {
        CFRelease(v86);
        ctu::cf::update<__CFString const*,void const*>(v84, v85, v87);
      }
      if (v84)
      {
        CFRelease(v84);
        CFRetain(v84);
      }
      size_t v88 = *v67;
      v89 = (const void *)(*v183)(&v183, *v67);
      xpc_object_t v90 = v89;
      if (v89)
      {
        CFRelease(v89);
        ctu::cf::update<__CFString const*,void const*>(v84, v88, v90);
      }
      if (v84)
      {
        CFRelease(v84);
        CFRetain(v84);
      }
      xpc_object_t v91 = (const void *)*MEMORY[0x1E4FB9738];
      uint64_t v92 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9738]);
      uint64_t v93 = v92;
      if (v92)
      {
        CFRelease(v92);
        ctu::cf::update<__CFString const*,void const*>(v84, v91, v93);
      }
      if (v84)
      {
        CFRelease(v84);
        CFRetain(v84);
      }
      size_t v94 = (const void *)*MEMORY[0x1E4FB9740];
      size_t v95 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9740]);
      v96 = v95;
      if (v95)
      {
        CFRelease(v95);
        ctu::cf::update<__CFString const*,void const*>(v84, v94, v96);
      }
      if (v84)
      {
        CFRelease(v84);
        CFRetain(v84);
      }
      uint64_t v97 = (const void *)*MEMORY[0x1E4FB96F0];
      uint64_t v98 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB96F0]);
      int v99 = v98;
      if (v98)
      {
        CFRelease(v98);
        ctu::cf::update<__CFString const*,void const*>(v84, v97, v99);
      }
      if (v84) {
        CFRelease(v84);
      }
      uint64_t v100 = 152;
      if (!a3) {
        uint64_t v100 = 136;
      }
      v101 = *(void **)(a1 + v100);
      if (v101) {
        CFRetain(v101);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v101, (CFTypeRef)coex::kKeyWLANConnState, v84);
      if (v101) {
        CFRelease(v101);
      }
      if (v84) {
        CFRelease(v84);
      }
      MEMORY[0x1C8791160](&v183);
    }
    CFDictionaryRef v102 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9668]);
    uint64_t v185 = (uint64_t)v102;
    if (v81) {
      CFRelease(v81);
    }
    if (v102) {
      v103 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      v103 = 0;
    }
    if (v103)
    {
      v183 = (uint64_t (**)(void, const void *))0xAAAAAAAAAAAAAAAALL;
      unint64_t v184 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v183, v102);
      CFMutableDictionaryRef v104 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      int v105 = v104;
      if (v104) {
        CFRetain(v104);
      }
      unsigned int v106 = (const void *)*MEMORY[0x1E4FB9578];
      size_t v107 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9578]);
      size_t v108 = v107;
      if (v107)
      {
        CFRelease(v107);
        ctu::cf::update<__CFString const*,void const*>(v105, v106, v108);
      }
      if (v105)
      {
        CFRelease(v105);
        CFRetain(v105);
      }
      int v109 = (const void *)*MEMORY[0x1E4FB9860];
      CFMutableDictionaryRef v110 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9860]);
      unsigned int v111 = v110;
      if (v110)
      {
        CFRelease(v110);
        ctu::cf::update<__CFString const*,void const*>(v105, v109, v111);
      }
      if (v105) {
        CFRelease(v105);
      }
      uint64_t v112 = 152;
      if (!a3) {
        uint64_t v112 = 136;
      }
      uint64_t v113 = *(void **)(a1 + v112);
      if (v113) {
        CFRetain(v113);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v113, (CFTypeRef)coex::kKeyLinkQuality, v105);
      if (v113) {
        CFRelease(v113);
      }
      if (v105) {
        CFRelease(v105);
      }
      MEMORY[0x1C8791160](&v183);
      BOOL v56 = 1;
    }
    CFDictionaryRef v114 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9720]);
    uint64_t v185 = (uint64_t)v114;
    if (v102) {
      CFRelease(v102);
    }
    if (v114) {
      uint64_t v115 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v115 = 0;
    }
    if (v115)
    {
      v183 = (uint64_t (**)(void, const void *))0xAAAAAAAAAAAAAAAALL;
      unint64_t v184 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v183, v114);
      CFMutableDictionaryRef v116 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v117 = v116;
      if (v116) {
        CFRetain(v116);
      }
      uint64_t v118 = (const void *)*MEMORY[0x1E4FB9988];
      CFTypeID v119 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9988]);
      v120 = v119;
      if (v119)
      {
        CFRelease(v119);
        ctu::cf::update<__CFString const*,void const*>(v117, v118, v120);
      }
      if (v117)
      {
        CFRelease(v117);
        CFRetain(v117);
      }
      CFTypeRef v121 = (const void *)*MEMORY[0x1E4FB97F8];
      CFTypeRef v122 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB97F8]);
      unsigned int v123 = v122;
      if (v122)
      {
        CFRelease(v122);
        ctu::cf::update<__CFString const*,void const*>(v117, v121, v123);
      }
      if (v117)
      {
        CFRelease(v117);
        CFRetain(v117);
      }
      unsigned int v124 = (const void *)*MEMORY[0x1E4FB9850];
      unsigned int v125 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9850]);
      uint64_t v126 = v125;
      if (v125)
      {
        CFRelease(v125);
        ctu::cf::update<__CFString const*,void const*>(v117, v124, v126);
      }
      if (v117) {
        CFRelease(v117);
      }
      uint64_t v127 = 152;
      if (!a3) {
        uint64_t v127 = 136;
      }
      int v128 = *(void **)(a1 + v127);
      if (v128) {
        CFRetain(v128);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v128, (CFTypeRef)coex::kKeyFailCondition, v117);
      if (v128) {
        CFRelease(v128);
      }
      if (v117) {
        CFRelease(v117);
      }
      MEMORY[0x1C8791160](&v183);
    }
    int v129 = (const void *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9598]);
    uint64_t v185 = (uint64_t)v129;
    if (v114) {
      CFRelease(v114);
    }
    if (v129) {
      uint64_t v130 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v130 = 0;
    }
    if (v130)
    {
      v183 = (uint64_t (**)(void, const void *))0xAAAAAAAAAAAAAAAALL;
      unint64_t v184 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v131 = 160;
      if (!a3) {
        uint64_t v131 = 144;
      }
      uint64_t v132 = *(const void **)(a1 + v131);
      if (v132) {
        CFRetain(v132);
      }
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v183, (const __CFDictionary *)v132);
      if (v132) {
        CFRelease(v132);
      }
      CFAllocatorRef v133 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef v134 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      unsigned int v135 = v134;
      if (v134) {
        CFRetain(v134);
      }
      unsigned int v136 = (const void *)*MEMORY[0x1E4FB94E0];
      unsigned int v137 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB94E0]);
      unsigned int v138 = v137;
      if (v137)
      {
        CFRelease(v137);
        ctu::cf::update<__CFString const*,void const*>(v135, v136, v138);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      uint64_t v139 = (const void *)*MEMORY[0x1E4FB9630];
      CFMutableDictionaryRef v140 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9630]);
      CFMutableDictionaryRef v141 = v140;
      if (v140)
      {
        CFRelease(v140);
        ctu::cf::update<__CFString const*,void const*>(v135, v139, v141);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      CFMutableDictionaryRef v142 = (const void *)*MEMORY[0x1E4FB99B0];
      CFMutableDictionaryRef v143 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB99B0]);
      CFMutableDictionaryRef v144 = v143;
      if (v143)
      {
        CFRelease(v143);
        ctu::cf::update<__CFString const*,void const*>(v135, v142, v144);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      CFMutableDictionaryRef v145 = (const void *)*MEMORY[0x1E4FB97D8];
      uint64_t v146 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB97D8]);
      unsigned int v147 = v146;
      if (v146)
      {
        CFRelease(v146);
        ctu::cf::update<__CFString const*,void const*>(v135, v145, v147);
      }
      BOOL v181 = v56;
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      CFDataRef v148 = (const void *)*MEMORY[0x1E4FB9880];
      CFMutableDictionaryRef v149 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9880]);
      CFMutableDictionaryRef v150 = v149;
      if (v149)
      {
        CFRelease(v149);
        ctu::cf::update<__CFString const*,void const*>(v135, v148, v150);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      CFMutableDictionaryRef v151 = (const void *)*MEMORY[0x1E4FB9978];
      CFMutableDictionaryRef v152 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9978]);
      CFMutableDictionaryRef v153 = v152;
      if (v152)
      {
        CFRelease(v152);
        ctu::cf::update<__CFString const*,void const*>(v135, v151, v153);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      CFMutableDictionaryRef v154 = (const void *)*MEMORY[0x1E4FB98A8];
      CFMutableDictionaryRef v155 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB98A8]);
      CFMutableDictionaryRef v156 = v155;
      if (v155)
      {
        CFRelease(v155);
        ctu::cf::update<__CFString const*,void const*>(v135, v154, v156);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      CFMutableDictionaryRef v157 = (const void *)*MEMORY[0x1E4FB95B8];
      xpc_object_t v158 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB95B8]);
      CFMutableDictionaryRef v159 = v158;
      if (v158)
      {
        CFRelease(v158);
        ctu::cf::update<__CFString const*,void const*>(v135, v157, v159);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      CFMutableDictionaryRef v160 = (const void *)*MEMORY[0x1E4FB95F0];
      CFMutableDictionaryRef v161 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB95F0]);
      CFMutableDictionaryRef v162 = v161;
      if (v161)
      {
        CFRelease(v161);
        ctu::cf::update<__CFString const*,void const*>(v135, v160, v162);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      CFMutableDictionaryRef v163 = (const void *)*MEMORY[0x1E4FB9518];
      CFMutableDictionaryRef v164 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9518]);
      CFMutableDictionaryRef v165 = v164;
      if (v164)
      {
        CFRelease(v164);
        ctu::cf::update<__CFString const*,void const*>(v135, v163, v165);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      CFMutableDictionaryRef v166 = (const void *)*MEMORY[0x1E4FB99B8];
      v167 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB99B8]);
      CFMutableDictionaryRef v168 = v167;
      if (v167)
      {
        CFRelease(v167);
        ctu::cf::update<__CFString const*,void const*>(v135, v166, v168);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      long long v169 = (const void *)*MEMORY[0x1E4FB9918];
      uint64_t v170 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9918]);
      v171 = v170;
      if (v170)
      {
        CFRelease(v170);
        ctu::cf::update<__CFString const*,void const*>(v135, v169, v171);
      }
      if (v135) {
        CFRelease(v135);
      }
      if (a3) {
        uint64_t v172 = 152;
      }
      else {
        uint64_t v172 = 136;
      }
      xpc_object_t v173 = *(void **)(a1 + v172);
      if (v173) {
        CFRetain(v173);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v173, (CFTypeRef)coex::kKeyPolicy, v135);
      if (v173) {
        CFRelease(v173);
      }
      CFMutableDictionaryRef v174 = CFDictionaryCreateMutable(v133, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      int64_t v175 = v174;
      if (v174) {
        CFRetain(v174);
      }
      uint64_t v176 = (const void *)(*v183)(&v183, v142);
      v177 = v176;
      if (v176)
      {
        CFRelease(v176);
        ctu::cf::update<__CFString const*,void const*>(v175, v142, v177);
      }
      if (v175)
      {
        CFRelease(v175);
        CFRetain(v175);
      }
      v178 = (const void *)(*v183)(&v183, v145);
      v179 = v178;
      if (v178)
      {
        CFRelease(v178);
        ctu::cf::update<__CFString const*,void const*>(v175, v145, v179);
      }
      if (v175) {
        CFRelease(v175);
      }
      v180 = *(void **)(a1 + v172);
      if (v180) {
        CFRetain(v180);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v180, (CFTypeRef)coex::kKeyFailCondition, v175);
      BOOL v56 = v181;
      if (v180) {
        CFRelease(v180);
      }
      if (v175) {
        CFRelease(v175);
      }
      if (v135) {
        CFRelease(v135);
      }
      MEMORY[0x1C8791160](&v183);
    }
    if (v182) {
      coex::Module::State::sendWWANState_sync(a1, a3);
    }
    if (v56) {
      coex::Module::State::sendLinkQuality_sync(a1, a3);
    }
    if (v115) {
      coex::Module::State::sendFailCondition_sync(a1, a3);
    }
    if (v129) {
      CFRelease(v129);
    }
    MEMORY[0x1C8791160](buf);
  }
  else
  {
    CFMutableArrayRef v12 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEBUG, "#D Empty update passed; ignoring it", buf, 2u);
    }
  }
}

void sub_1C5777604(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 120));
  MEMORY[0x1C8791160](v1 - 112);
  _Unwind_Resume(a1);
}

void coex::Module::State::sendFailCondition_sync(uint64_t a1, int a2)
{
  CFMutableDictionaryRef v75 = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty(a1, coex::kKeyFailCondition, a2, 0, &v75);
  CFMutableDictionaryRef v4 = v75;
  if (v75) {
    xpc_object_t v5 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    xpc_object_t v5 = 0;
  }
  if (!v5) {
    goto LABEL_95;
  }
  v74[0] = 0xAAAAAAAAAAAAAAAALL;
  v74[1] = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v6 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v74, v75);
  CFDataRef v7 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef(v6, (const __CFString *)*MEMORY[0x1E4FB9988]);
  CFDataRef v8 = v7;
  CFDataRef v73 = v7;
  if (v7) {
    uint64_t v9 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9)
  {
    CFDataRef v72 = v7;
    if (v7) {
      CFRetain(v7);
    }
    *(void *)buffer = 0;
    v76.length = CFDataGetLength(v8);
    v76.location = 0;
    CFDataGetBytes(v8, v76, buffer);
    UInt8 v10 = buffer[0];
    if (v8) {
      CFRelease(v8);
    }
    if (v10)
    {
      *(void *)buffer = 0;
      CFMutableArrayRef v67 = buffer;
      uint64_t v68 = 0x3002000000;
      uint64_t v69 = __Block_byref_object_copy__286;
      uint64_t v70 = __Block_byref_object_dispose__287;
      xpc_object_t v71 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v12 = v11;
      if (v11)
      {
        xpc_object_t v71 = v11;
      }
      else
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v71 = v12;
        if (!v12)
        {
          xpc_object_t v13 = xpc_null_create();
          xpc_object_t v12 = 0;
          goto LABEL_21;
        }
      }
      if (MEMORY[0x1C8792D30](v12) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v12);
LABEL_22:
        xpc_release(v12);
        xpc_object_t v14 = xpc_int64_create(1);
        if (!v14) {
          xpc_object_t v14 = xpc_null_create();
        }
        xpc_dictionary_set_value(*((xpc_object_t *)v67 + 5), "kWCMCellularThresholdReached_EventType", v14);
        xpc_object_t v15 = xpc_null_create();
        xpc_release(v14);
        xpc_release(v15);
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v65, (const ctu::cf::dict_adapter *)v74);
        uint64_t v16 = *MEMORY[0x1E4FB99B0];
        v61[0] = MEMORY[0x1E4F143A8];
        v61[1] = 0x40000000;
        uint64_t v62 = ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke;
        xpc_object_t v63 = &unk_1E6516EC8;
        CFStringRef v64 = buffer;
        xpc_object_t v17 = (int *)(*(uint64_t (**)(void *, uint64_t))v65[0])(v65, v16);
        xpc_object_t v18 = v17;
        if (v17)
        {
          CFTypeID v19 = CFGetTypeID(v17);
          if (v19 == CFNumberGetTypeID())
          {
            LODWORD(cf) = -1431655766;
            int v21 = ctu::cf::assign((ctu::cf *)&cf, v18, v20);
            CFRelease(v18);
            if (v21) {
              v62((uint64_t)v61, (int)cf);
            }
          }
          else
          {
            CFRelease(v18);
          }
        }
        MEMORY[0x1C8791160](v65);
        uint64_t v22 = *(void *)(a1 + 120);
        if (v22)
        {
          xpc_object_t v23 = (xpc_object_t)*((void *)v67 + 5);
          xpc_object_t v60 = v23;
          if (v23)
          {
            xpc_retain(v23);
          }
          else
          {
            xpc_object_t v23 = xpc_null_create();
            xpc_object_t v60 = v23;
          }
          coex::XpcClient::sendMessage(v22, 303, &v60, a2);
          xpc_release(v23);
          xpc_object_t v60 = 0;
        }
        _Block_object_dispose(buffer, 8);
        xpc_release(v71);
        goto LABEL_35;
      }
      xpc_object_t v13 = xpc_null_create();
LABEL_21:
      xpc_object_t v71 = v13;
      goto LABEL_22;
    }
  }
LABEL_35:
  CFDataRef v24 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v74, (const __CFString *)*MEMORY[0x1E4FB9728]);
  CFDataRef v25 = v24;
  CFTypeRef cf = v24;
  if (v24) {
    long long v26 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  }
  else {
    long long v26 = 0;
  }
  if (!v26) {
    goto LABEL_65;
  }
  v58[2] = v24;
  if (v24) {
    CFRetain(v24);
  }
  *(void *)buffer = 0;
  v77.length = CFDataGetLength(v25);
  v77.location = 0;
  CFDataGetBytes(v25, v77, buffer);
  UInt8 v27 = buffer[0];
  if (v25) {
    CFRelease(v25);
  }
  if ((v27 & 2) == 0) {
    goto LABEL_65;
  }
  *(void *)buffer = 0;
  CFMutableArrayRef v67 = buffer;
  uint64_t v68 = 0x3002000000;
  uint64_t v69 = __Block_byref_object_copy__286;
  uint64_t v70 = __Block_byref_object_dispose__287;
  xpc_object_t v71 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v29 = v28;
  if (v28)
  {
    xpc_object_t v71 = v28;
  }
  else
  {
    xpc_object_t v29 = xpc_null_create();
    xpc_object_t v71 = v29;
    if (!v29)
    {
      xpc_object_t v30 = xpc_null_create();
      xpc_object_t v29 = 0;
      goto LABEL_51;
    }
  }
  if (MEMORY[0x1C8792D30](v29) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v30 = xpc_null_create();
LABEL_51:
    xpc_object_t v71 = v30;
    goto LABEL_52;
  }
  xpc_retain(v29);
LABEL_52:
  xpc_release(v29);
  xpc_object_t v31 = xpc_int64_create(0);
  if (!v31) {
    xpc_object_t v31 = xpc_null_create();
  }
  xpc_dictionary_set_value(*((xpc_object_t *)v67 + 5), "kWCMCellularThresholdReached_EventType", v31);
  xpc_object_t v32 = xpc_null_create();
  xpc_release(v31);
  xpc_release(v32);
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v58, (const ctu::cf::dict_adapter *)v74);
  uint64_t v33 = *MEMORY[0x1E4FB97D8];
  v54[0] = MEMORY[0x1E4F143A8];
  v54[1] = 0x40000000;
  xpc_object_t v55 = ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke_2;
  BOOL v56 = &unk_1E6516EF0;
  CFMutableDictionaryRef v57 = buffer;
  xpc_object_t v34 = (int *)(*(uint64_t (**)(void *, uint64_t))v58[0])(v58, v33);
  CFNumberRef v35 = v34;
  if (v34)
  {
    CFTypeID v36 = CFGetTypeID(v34);
    if (v36 == CFNumberGetTypeID())
    {
      LODWORD(v52) = -1431655766;
      int v38 = ctu::cf::assign((ctu::cf *)&v52, v35, v37);
      CFRelease(v35);
      if (v38) {
        v55((uint64_t)v54, (int)v52);
      }
    }
    else
    {
      CFRelease(v35);
    }
  }
  MEMORY[0x1C8791160](v58);
  uint64_t v39 = *(void *)(a1 + 120);
  if (v39)
  {
    xpc_object_t v40 = (xpc_object_t)*((void *)v67 + 5);
    xpc_object_t v53 = v40;
    if (v40)
    {
      xpc_retain(v40);
    }
    else
    {
      xpc_object_t v40 = xpc_null_create();
      xpc_object_t v53 = v40;
    }
    coex::XpcClient::sendMessage(v39, 303, &v53, a2);
    xpc_release(v40);
    xpc_object_t v53 = 0;
  }
  _Block_object_dispose(buffer, 8);
  xpc_release(v71);
LABEL_65:
  CFDataRef v41 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v74, (const __CFString *)*MEMORY[0x1E4FB97F8]);
  CFDataRef v42 = v41;
  CFDataRef v52 = v41;
  if (v41) {
    xpc_object_t v43 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  }
  else {
    xpc_object_t v43 = 0;
  }
  if (v43)
  {
    v51[1] = v41;
    if (v41) {
      CFRetain(v41);
    }
    *(void *)buffer = 0;
    v78.length = CFDataGetLength(v42);
    v78.location = 0;
    CFDataGetBytes(v42, v78, buffer);
    uint64_t v44 = *(void *)buffer;
    if (v42) {
      CFRelease(v42);
    }
    if (v44)
    {
      xpc_object_t v45 = xpc_dictionary_create(0, 0, 0);
      if (v45 || (xpc_object_t v45 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v45) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v45);
          xpc_object_t v46 = v45;
        }
        else
        {
          xpc_object_t v46 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v46 = xpc_null_create();
        xpc_object_t v45 = 0;
      }
      xpc_release(v45);
      xpc_object_t v47 = xpc_uint64_create(v44);
      if (!v47) {
        xpc_object_t v47 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, "kWCMCellularTxPower_Response", v47);
      xpc_object_t v48 = xpc_null_create();
      xpc_release(v47);
      xpc_release(v48);
      uint64_t v49 = *(void *)(a1 + 120);
      if (v49)
      {
        v51[0] = v46;
        if (v46)
        {
          xpc_retain(v46);
          xpc_object_t v50 = v51[0];
        }
        else
        {
          xpc_object_t v50 = xpc_null_create();
          v51[0] = v50;
        }
        coex::XpcClient::sendMessage(v49, 301, v51, a2);
        xpc_release(v50);
        v51[0] = 0;
      }
      xpc_release(v46);
      CFDataRef v42 = v52;
    }
  }
  if (v42) {
    CFRelease(v42);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v73) {
    CFRelease(v73);
  }
  MEMORY[0x1C8791160](v74);
  CFMutableDictionaryRef v4 = v75;
LABEL_95:
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1C57782FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose((const void *)(v13 - 136), 8);
  xpc_release(*(xpc_object_t *)(v13 - 96));
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)(v13 - 80));
  MEMORY[0x1C8791160](v13 - 72);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v13 - 56));
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke(uint64_t a1, const void **a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  xpc_object_t v5 = *a2;
  if (*a2) {
    xpc_object_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    xpc_object_t v6 = 0;
  }
  if (v6)
  {
    CFDataRef v7 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      int v21 = v5;
      _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Failed to set policy: %@", buf, 0xCu);
    }
  }
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v19, (const ctu::cf::dict_adapter *)(a1 + 56));
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1174405120;
  xpc_object_t v15 = ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke_326;
  uint64_t v16 = &__block_descriptor_tmp_328;
  CFDataRef v8 = *a2;
  uint64_t v17 = v4;
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v9 = (int *)(*(uint64_t (**)(void *, void))v19[0])(v19, *MEMORY[0x1E4FB97D8]);
  UInt8 v10 = v9;
  if (v9)
  {
    CFTypeID v11 = CFGetTypeID(v9);
    if (v11 == CFNumberGetTypeID())
    {
      *(_DWORD *)buf = -1431655766;
      int v13 = ctu::cf::assign((ctu::cf *)buf, v10, v12);
      CFRelease(v10);
      if (v13) {
        v15((uint64_t)v14, *(unsigned int *)buf);
      }
    }
    else
    {
      CFRelease(v10);
    }
  }
  MEMORY[0x1C8791160](v19);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5778664(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5778684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v7);
  MEMORY[0x1C8791160](va);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke_326(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v5) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  if (*(void *)(a1 + 40)) {
    CFDataRef v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    CFDataRef v7 = 0;
  }
  if (v7) {
    int64_t v8 = 39321;
  }
  else {
    int64_t v8 = 0;
  }
  xpc_object_t v9 = xpc_int64_create(v8);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kWCMCellularTxPower_Response", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_int64_create(a2);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kWCMCellularTxPower_Level", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  uint64_t v13 = *(void *)(v4 + 120);
  if (v13)
  {
    xpc_object_t v15 = v6;
    if (v6)
    {
      xpc_retain(v6);
      xpc_object_t v14 = v15;
    }
    else
    {
      xpc_object_t v14 = xpc_null_create();
      xpc_object_t v15 = v14;
    }
    coex::XpcClient::sendMessage(v13, 301, &v15, 0);
    xpc_release(v14);
    xpc_object_t v15 = 0;
  }
  xpc_release(v6);
}

void coex::XpcClient::sendMessage(uint64_t a1, int a2, void **a3, int a4)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
  v7[3] = &__block_descriptor_tmp_7_3;
  int v9 = a2;
  xpc_object_t v6 = *a3;
  v7[4] = a1;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v10 = a4;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v7);
  xpc_release(object);
}

void ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFDataRef v7 = v6;
  int64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F54D0;
  block[5] = v5;
  xpc_object_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  int v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

void ___ZN20HandDetectionManager4initEv_block_invoke_8(void *a1, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      CFDataRef v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        *(unsigned char *)(v5 + 88) = a2;
        int v9 = *(NSObject **)v5;
        if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEFAULT))
        {
          if (a2 > 3) {
            int v10 = "Unknown Audio Output";
          }
          else {
            int v10 = off_1E65177F8[(char)a2];
          }
          int v11 = 136315138;
          xpc_object_t v12 = v10;
          _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Audio State: %s", (uint8_t *)&v11, 0xCu);
        }
        HandDetectionManager::updateHandDetection((os_log_t *)v5);
      }
    }
  }
}

void HandDetectionManager::updateHandDetection(os_log_t *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((char *)this + 88);
  if (v2 != 1 || *((_DWORD *)this + 34) != 1 || !*((unsigned char *)this + 112) || !*((unsigned char *)this + 152))
  {
    unsigned int v3 = 0;
    uint64_t v4 = *this;
    if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_24;
    }
LABEL_8:
    if (v2 > 3) {
      uint64_t v5 = "Unknown Audio Output";
    }
    else {
      uint64_t v5 = off_1E65177F8[v2];
    }
    xpc_object_t v6 = "On";
    if (*((unsigned char *)this + 112)) {
      CFDataRef v7 = "On";
    }
    else {
      CFDataRef v7 = "Off";
    }
    uint64_t v8 = *((int *)this + 34);
    if (v8 > 2)
    {
      int v9 = "Unknown";
      if (!*((unsigned char *)this + 152)) {
        xpc_object_t v6 = "Off";
      }
      if (v3 > 2) {
        goto LABEL_18;
      }
    }
    else
    {
      int v9 = off_1E65177C8[v8];
      if (!*((unsigned char *)this + 152)) {
        xpc_object_t v6 = "Off";
      }
      if (v3 > 2)
      {
LABEL_18:
        int v10 = "Unknown Hand Detection";
LABEL_23:
        *(_DWORD *)xpc_object_t v18 = 136316162;
        *(void *)&v18[4] = v5;
        *(_WORD *)&v18[12] = 2080;
        *(void *)&v18[14] = v7;
        *(_WORD *)&v18[22] = 2080;
        CFTypeID v19 = v9;
        *(_WORD *)aBlock = 2080;
        *(void *)&aBlock[2] = v6;
        *(_WORD *)&aBlock[10] = 2080;
        int v21 = v10;
        _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Audio State: %s, Proximity Sensor: %s, Motion State: %s, Tx State: %s -> Notifying Hand Detection: %s", v18, 0x34u);
        goto LABEL_24;
      }
    }
    int v10 = off_1E65177E0[v3];
    goto LABEL_23;
  }
  unsigned int v3 = *((_DWORD *)this + 16);
  uint64_t v4 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_8;
  }
LABEL_24:
  os_log_t v11 = this[3];
  os_log_t v12 = this[4];
  if (v11 != v12)
  {
    while (!v11->isa)
    {
      uint64_t v13 = 0;
      isa = v11[1].isa;
      if (isa) {
        goto LABEL_29;
      }
LABEL_30:
      if (!v13)
      {
        uint64_t v16 = 0;
        *(void *)xpc_object_t v18 = MEMORY[0x1E4F143A8];
        *(void *)&v18[8] = 1174405120;
        *(void *)&v18[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEclIJS2_EEEvDpT__block_invoke;
        CFTypeID v19 = (const char *)&__block_descriptor_tmp_27_0;
LABEL_36:
        uint64_t v17 = 0;
        goto LABEL_37;
      }
      xpc_object_t v15 = _Block_copy(v13);
      uint64_t v16 = v15;
      *(void *)xpc_object_t v18 = MEMORY[0x1E4F143A8];
      *(void *)&v18[8] = 1174405120;
      *(void *)&v18[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEclIJS2_EEEvDpT__block_invoke;
      CFTypeID v19 = (const char *)&__block_descriptor_tmp_27_0;
      if (!v15) {
        goto LABEL_36;
      }
      uint64_t v17 = _Block_copy(v15);
LABEL_37:
      *(void *)aBlock = v17;
      *(_DWORD *)&aBlock[8] = v3;
      dispatch_async(isa, v18);
      if (*(void *)aBlock) {
        _Block_release(*(const void **)aBlock);
      }
      if (v16) {
        _Block_release(v16);
      }
      if (isa) {
        dispatch_release(isa);
      }
      if (v13) {
        _Block_release(v13);
      }
      v11 += 2;
      if (v11 == v12) {
        return;
      }
    }
    uint64_t v13 = _Block_copy(v11->isa);
    isa = v11[1].isa;
    if (!isa) {
      goto LABEL_30;
    }
LABEL_29:
    dispatch_retain(isa);
    goto LABEL_30;
  }
}

void sub_1C5778EDC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal20handleNewClient_syncEN3xpc10connectionE_block_invoke(uint64_t a1, void **a2, void **a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *a2;
  xpc_object_t v8 = v5;
  if (!v5)
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v6 = *a3;
    xpc_object_t object = v6;
    if (v6) {
      goto LABEL_3;
    }
LABEL_5:
    xpc_object_t object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v5);
  xpc_object_t v6 = *a3;
  xpc_object_t object = v6;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_3:
  xpc_retain(v6);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)v4 + 40))(v4, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v8);
}

void sub_1C5778FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

void ABMServerInternal::handleMessage_sync(uint64_t a1, xpc_object_t *a2, xpc::object *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  xpc_object_t v6 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    CFNumberRef v35 = 0;
    CFTypeID v36 = 0;
    CFDataRef v7 = (void *)(a1 + 152);
    xpc_object_t v8 = *(void **)(a1 + 152);
    if (!v8) {
      goto LABEL_15;
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    CFNumberRef v35 = 0;
    CFTypeID v36 = 0;
    CFDataRef v7 = (void *)(a1 + 152);
    xpc_object_t v8 = *(void **)(a1 + 152);
    if (!v8)
    {
LABEL_15:
      uint64_t v13 = 0;
      goto LABEL_16;
    }
  }
  int v9 = v7;
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= (unint64_t)v6;
    if (v10 >= (unint64_t)v6) {
      os_log_t v12 = v8;
    }
    else {
      os_log_t v12 = v8 + 1;
    }
    if (v11) {
      int v9 = v8;
    }
    xpc_object_t v8 = (void *)*v12;
  }
  while (*v12);
  if (v9 == v7 || (unint64_t)v6 < v9[4]) {
    goto LABEL_15;
  }
  uint64_t v13 = (long long *)v9[5];
  CFNumberRef v20 = (std::__shared_weak_count *)v9[6];
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFNumberRef v35 = v13;
  CFTypeID v36 = v20;
LABEL_16:
  xpc_release(v6);
  xpc_object_t v14 = *(NSObject **)(a1 + 112);
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
  if (v13)
  {
    if (!v15) {
      goto LABEL_21;
    }
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v13, *((void *)v13 + 1));
    }
    else
    {
      long long v27 = *v13;
      v34.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v27;
    }
    int v28 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
    std::string::size_type v29 = v34.__r_.__value_.__r.__words[0];
    xpc::object::to_string((uint64_t *)__p, a3);
    CFDataRef v25 = &v34;
    if (v28 < 0) {
      CFDataRef v25 = (std::string *)v29;
    }
    if (v33 >= 0) {
      long long v26 = __p;
    }
    else {
      long long v26 = (void **)__p[0];
    }
  }
  else
  {
    if (!v15) {
      goto LABEL_21;
    }
    xpc::object::to_string((uint64_t *)&v34, (xpc::object *)a2);
    int v23 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
    std::string::size_type v24 = v34.__r_.__value_.__r.__words[0];
    xpc::object::to_string((uint64_t *)__p, a3);
    CFDataRef v25 = &v34;
    if (v23 < 0) {
      CFDataRef v25 = (std::string *)v24;
    }
    if (v33 >= 0) {
      long long v26 = __p;
    }
    else {
      long long v26 = (void **)__p[0];
    }
  }
  *(_DWORD *)buf = 136315394;
  int v38 = v25;
  __int16 v39 = 2080;
  xpc_object_t v40 = v26;
  _os_log_debug_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEBUG, "#D Message from %s:\n%s", buf, 0x16u);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
LABEL_21:
  xpc_object_t v16 = *(xpc_object_t *)a3;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  if (v16)
  {
    xpc_retain(v16);
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  }
  uint64_t v17 = MEMORY[0x1C8792D30](v16);
  uint64_t v18 = MEMORY[0x1E4F14590];
  if (v17 == MEMORY[0x1E4F14590])
  {
    xpc_object_t v19 = *a2;
    xpc_object_t v31 = v19;
    if (v19)
    {
      xpc_retain(v19);
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
      xpc_object_t v31 = v19;
    }
    ABMServerInternal::handleInternalMessage_sync(a1, &v31, (xpc_object_t *)&v34.__r_.__value_.__l.__data_);
    xpc_release(v19);
    xpc_object_t v31 = 0;
    xpc_object_t v16 = (xpc_object_t)v34.__r_.__value_.__r.__words[0];
  }
  if (MEMORY[0x1C8792D30](v16) == v18)
  {
    int v21 = (_xpc_connection_s *)*a2;
    xpc_connection_t v30 = v21;
    if (v21)
    {
      xpc_retain(v21);
    }
    else
    {
      int v21 = (_xpc_connection_s *)xpc_null_create();
      xpc_connection_t v30 = v21;
    }
    ABMServerInternal::handlePublicMessage_sync(a1, &v30, (xpc_object_t *)&v34.__r_.__value_.__l.__data_);
    xpc_release(v21);
    xpc_connection_t v30 = 0;
  }
  xpc_release(v34.__r_.__value_.__l.__data_);
  uint64_t v22 = v36;
  if (v36)
  {
    if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1C577936C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
}

void sub_1C577938C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
  xpc_release(v15);
  xpc_release(object);
  JUMPOUT(0x1C5779408);
}

void sub_1C57793AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  xpc_release(v15);
  xpc_release(a15);
  JUMPOUT(0x1C5779408);
}

void sub_1C5779418(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ABMServerInternal::handleInternalMessage_sync(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  memset(__p, 170, sizeof(__p));
  xpc_object_t value = xpc_dictionary_get_value(*a3, kKeyCommand[0]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  int v7 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    size_t v8 = HIBYTE(__p[2]);
  }
  else {
    size_t v8 = (size_t)__p[1];
  }
  if (v8 == strlen(kCommandCheckIn[0]))
  {
    int v9 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    if (!memcmp(v9, kCommandCheckIn[0], v8))
    {
      memset(object, 170, sizeof(object));
      xpc_object_t v15 = xpc_dictionary_get_value(*a3, kKeyClientName[0]);
      xpc_object_t v71 = v15;
      if (v15) {
        xpc_retain(v15);
      }
      else {
        xpc_object_t v71 = xpc_null_create();
      }
      memset(buf, 0, sizeof(buf));
      xpc::dyn_cast_or_default();
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      xpc_release(v71);
      memset(buf, 170, 16);
      xpc_object_t v19 = *a2;
      if (*a2)
      {
        xpc_retain(*a2);
        *(void *)buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        CFNumberRef v20 = (void *)(a1 + 152);
        int v21 = *(void **)(a1 + 152);
        if (!v21) {
          goto LABEL_52;
        }
      }
      else
      {
        xpc_object_t v19 = xpc_null_create();
        *(void *)buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        CFNumberRef v20 = (void *)(a1 + 152);
        int v21 = *(void **)(a1 + 152);
        if (!v21) {
          goto LABEL_52;
        }
      }
      uint64_t v22 = v20;
      do
      {
        unint64_t v23 = v21[4];
        BOOL v24 = v23 >= (unint64_t)v19;
        if (v23 >= (unint64_t)v19) {
          CFDataRef v25 = v21;
        }
        else {
          CFDataRef v25 = v21 + 1;
        }
        if (v24) {
          uint64_t v22 = v21;
        }
        int v21 = (void *)*v25;
      }
      while (*v25);
      if (v22 != v20 && (unint64_t)v19 >= v22[4])
      {
        uint64_t v27 = v22[5];
        long long v26 = (std::__shared_weak_count *)v22[6];
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)buf = v27;
        *(void *)&uint8_t buf[8] = v26;
        goto LABEL_53;
      }
LABEL_52:
      long long v26 = 0;
      uint64_t v27 = 0;
LABEL_53:
      xpc_release(v19);
      if (v27)
      {
        if ((xpc_object_t *)v27 != object)
        {
          if (*(char *)(v27 + 23) < 0)
          {
            if (SHIBYTE(object[2]) >= 0) {
              xpc_object_t v50 = object;
            }
            else {
              xpc_object_t v50 = (xpc_object_t *)object[0];
            }
            if (SHIBYTE(object[2]) >= 0) {
              size_t v51 = HIBYTE(object[2]);
            }
            else {
              size_t v51 = (size_t)object[1];
            }
            std::string::__assign_no_alias<false>((void **)v27, v50, v51);
          }
          else if ((HIBYTE(object[2]) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>((void *)v27, object[0], (size_t)object[1]);
          }
          else
          {
            long long v28 = *(_OWORD *)object;
            *(xpc_object_t *)(v27 + 16) = object[2];
            *(_OWORD *)uint64_t v27 = v28;
          }
        }
        *(unsigned char *)(v27 + 24) = 1;
      }
      if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      if (SHIBYTE(object[2]) < 0) {
        operator delete(object[0]);
      }
      int v44 = 0;
      goto LABEL_134;
    }
  }
  if (v8 != strlen(kCommandCheckOut)
    || (v7 >= 0 ? (unint64_t v10 = __p) : (unint64_t v10 = (void **)__p[0]), memcmp(v10, kCommandCheckOut, v8)))
  {
    if (v8 != strlen(kCommandEventsOn[0])
      || (v7 >= 0 ? (BOOL v11 = __p) : (BOOL v11 = (void **)__p[0]), memcmp(v11, kCommandEventsOn[0], v8)))
    {
      if (v8 != strlen(kCommandEventsOff[0])) {
        goto LABEL_160;
      }
      os_log_t v12 = v7 >= 0 ? __p : (void **)__p[0];
      if (memcmp(v12, kCommandEventsOff[0], v8)) {
        goto LABEL_160;
      }
      xpc_object_t v13 = xpc_dictionary_get_value(*a3, kKeyEventsList[0]);
      object[0] = v13;
      if (v13) {
        xpc_retain(v13);
      }
      else {
        object[0] = xpc_null_create();
      }
      xpc::bridge((uint64_t *)buf, (xpc *)object, v14);
      xpc_object_t v45 = *(const void **)buf;
      if (!*(void *)buf) {
        goto LABEL_102;
      }
      CFTypeID v46 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v46 == CFArrayGetTypeID())
      {
        CFRetain(v45);
        xpc_object_t v47 = *(const void **)buf;
        if (!*(void *)buf) {
          goto LABEL_102;
        }
      }
      else
      {
        xpc_object_t v45 = 0;
        xpc_object_t v47 = *(const void **)buf;
        if (!*(void *)buf)
        {
LABEL_102:
          xpc_release(object[0]);
          if (v45) {
            xpc_object_t v48 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
          }
          else {
            xpc_object_t v48 = 0;
          }
          if (v48)
          {
            xpc_object_t v49 = *a2;
            xpc_object_t v68 = v49;
            if (v49)
            {
              xpc_retain(v49);
              CFMutableArrayRef v67 = v45;
              if (v45)
              {
LABEL_108:
                CFRetain(v45);
                ABMServerInternal::registerNotification(a1, &v68, 0, &v67);
                CFRelease(v45);
                xpc_object_t v49 = v68;
                goto LABEL_124;
              }
            }
            else
            {
              xpc_object_t v49 = xpc_null_create();
              CFMutableArrayRef v67 = v45;
              xpc_object_t v68 = v49;
              if (v45) {
                goto LABEL_108;
              }
            }
            ABMServerInternal::registerNotification(a1, &v68, 0, &v67);
LABEL_124:
            xpc_release(v49);
            int v44 = 0;
            xpc_object_t v68 = 0;
            if (!v45) {
              goto LABEL_134;
            }
            goto LABEL_125;
          }
          int v44 = -534716414;
          if (v45) {
LABEL_125:
          }
            CFRelease(v45);
LABEL_134:
          xpc_object_t reply = xpc_dictionary_create_reply(*a3);
          if (reply || (xpc_object_t reply = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C8792D30](reply) == MEMORY[0x1E4F14590])
            {
              xpc_retain(reply);
              xpc_object_t v53 = reply;
            }
            else
            {
              xpc_object_t v53 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v53 = xpc_null_create();
            xpc_object_t reply = 0;
          }
          xpc_release(reply);
          xpc_object_t v54 = xpc_int64_create(v44);
          if (!v54) {
            xpc_object_t v54 = xpc_null_create();
          }
          xpc_dictionary_set_value(v53, kKeyCommandResult[0], v54);
          xpc_object_t v55 = xpc_null_create();
          xpc_release(v54);
          xpc_release(v55);
          BOOL v56 = *(NSObject **)(a1 + 112);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
          {
            xpc_object_t v63 = __p;
            if (SHIBYTE(__p[2]) < 0) {
              xpc_object_t v63 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = v63;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v44;
            _os_log_debug_impl(&dword_1C5767000, v56, OS_LOG_TYPE_DEBUG, "#D Replying to client's command: %s, with return code: 0x%x", buf, 0x12u);
          }
          xpc_connection_send_message((xpc_connection_t)*a2, v53);
          xpc_object_t v57 = xpc_null_create();
          xpc_object_t v58 = xpc_null_create();
          xpc_object_t v59 = *a3;
          *a3 = v57;
          xpc_release(v59);
          xpc_release(v58);
          if (SHIBYTE(__p[2]) >= 0) {
            size_t v60 = HIBYTE(__p[2]);
          }
          else {
            size_t v60 = (size_t)__p[1];
          }
          if (v60 == strlen(kCommandEventsOn[0]))
          {
            CFTypeRef v61 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
            if (!memcmp(v61, kCommandEventsOn[0], v60) && *(_DWORD *)(a1 + 192) == 1)
            {
              v65[0] = MEMORY[0x1E4F143A8];
              v65[1] = 1174405120;
              void v65[2] = ___ZN17ABMServerInternal26handleInternalMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke;
              v65[3] = &__block_descriptor_tmp_24_0;
              xpc_object_t v62 = *a2;
              v65[4] = a1;
              xpc_object_t v66 = v62;
              if (v62) {
                xpc_retain(v62);
              }
              else {
                xpc_object_t v66 = xpc_null_create();
              }
              ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v65);
              xpc_release(v66);
              xpc_object_t v66 = 0;
            }
          }
          xpc_release(v53);
          goto LABEL_160;
        }
      }
      CFRelease(v47);
      goto LABEL_102;
    }
    xpc_object_t v17 = xpc_dictionary_get_value(*a3, kKeyEventsList[0]);
    object[0] = v17;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      object[0] = xpc_null_create();
    }
    xpc::bridge((uint64_t *)buf, (xpc *)object, v18);
    __int16 v39 = *(const void **)buf;
    if (*(void *)buf)
    {
      CFTypeID v40 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v40 == CFArrayGetTypeID())
      {
        CFRetain(v39);
        uint64_t v41 = *(const void **)buf;
        if (!*(void *)buf) {
          goto LABEL_83;
        }
      }
      else
      {
        __int16 v39 = 0;
        uint64_t v41 = *(const void **)buf;
        if (!*(void *)buf) {
          goto LABEL_83;
        }
      }
      CFRelease(v41);
    }
LABEL_83:
    xpc_release(object[0]);
    if (v39) {
      CFDataRef v42 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      CFDataRef v42 = 0;
    }
    if (!v42)
    {
      int v44 = -534716414;
      if (!v39) {
        goto LABEL_134;
      }
LABEL_114:
      CFRelease(v39);
      goto LABEL_134;
    }
    xpc_object_t v43 = *a2;
    xpc_object_t v70 = v43;
    if (v43)
    {
      xpc_retain(v43);
      uint64_t v69 = v39;
      if (v39)
      {
LABEL_89:
        CFRetain(v39);
        ABMServerInternal::registerNotification(a1, &v70, 1, &v69);
        CFRelease(v39);
        xpc_object_t v43 = v70;
        goto LABEL_113;
      }
    }
    else
    {
      xpc_object_t v43 = xpc_null_create();
      uint64_t v69 = v39;
      xpc_object_t v70 = v43;
      if (v39) {
        goto LABEL_89;
      }
    }
    ABMServerInternal::registerNotification(a1, &v70, 1, &v69);
LABEL_113:
    xpc_release(v43);
    int v44 = 0;
    xpc_object_t v70 = 0;
    if (!v39) {
      goto LABEL_134;
    }
    goto LABEL_114;
  }
  memset(object, 170, sizeof(object));
  xpc_object_t v16 = xpc_dictionary_get_value(*a3, kKeyClientName[0]);
  xpc_object_t v71 = v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    xpc_object_t v71 = xpc_null_create();
  }
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v71);
  std::string::size_type v29 = *(void **)(a1 + 152);
  if (v29)
  {
    xpc_object_t v30 = *a2;
    uint64_t v31 = a1 + 152;
    do
    {
      unint64_t v32 = v29[4];
      BOOL v33 = v32 >= (unint64_t)v30;
      if (v32 >= (unint64_t)v30) {
        std::string v34 = v29;
      }
      else {
        std::string v34 = v29 + 1;
      }
      if (v33) {
        uint64_t v31 = (uint64_t)v29;
      }
      std::string::size_type v29 = (void *)*v34;
    }
    while (*v34);
    if (v31 != a1 + 152 && (unint64_t)v30 >= *(void *)(v31 + 32)) {
      std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase((void *)(a1 + 144), v31);
    }
  }
  xpc_object_t v35 = xpc_null_create();
  xpc_object_t v36 = xpc_null_create();
  xpc_object_t v37 = *a3;
  *a3 = v35;
  xpc_release(v37);
  xpc_release(v36);
  int v38 = *(NSObject **)(a1 + 112);
  if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
  {
    if ((SHIBYTE(object[2]) & 0x80000000) == 0) {
      goto LABEL_160;
    }
    goto LABEL_75;
  }
  CFStringRef v64 = object;
  if (SHIBYTE(object[2]) < 0) {
    CFStringRef v64 = (xpc_object_t *)object[0];
  }
  *(_DWORD *)buf = 136315138;
  *(void *)&uint8_t buf[4] = v64;
  _os_log_debug_impl(&dword_1C5767000, v38, OS_LOG_TYPE_DEBUG, "#D Client '%s' checked out", buf, 0xCu);
  if (SHIBYTE(object[2]) < 0) {
LABEL_75:
  }
    operator delete(object[0]);
LABEL_160:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5779DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ABMServerInternal::handlePublicMessage_sync(uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  uint64_t v7 = MEMORY[0x1E4F14590];
  if (reply || (xpc_object_t reply = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](reply) == v7)
    {
      xpc_retain(reply);
      xpc_object_t v8 = reply;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t reply = 0;
  }
  xpc_release(reply);
  if (*(_DWORD *)(a1 + 192) == 5)
  {
    if (MEMORY[0x1C8792D30](v8) == v7)
    {
      xpc_object_t v9 = xpc_int64_create(-534716415);
      if (!v9) {
        xpc_object_t v9 = xpc_null_create();
      }
      xpc_dictionary_set_value(v8, kKeyCommandResult[0], v9);
      xpc_object_t v10 = xpc_null_create();
      xpc_release(v9);
      xpc_release(v10);
      xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
      if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v11) == v7)
        {
          xpc_retain(v11);
          xpc_object_t v12 = v11;
        }
        else
        {
          xpc_object_t v12 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v11 = 0;
      }
      xpc_release(v11);
      xpc_object_t v18 = xpc_string_create("Server not available");
      if (!v18) {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C240], v18);
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      if (v12)
      {
        xpc_retain(v12);
        xpc_object_t v20 = v12;
      }
      else
      {
        xpc_object_t v20 = xpc_null_create();
      }
      xpc_dictionary_set_value(v8, kKeyCommandData[0], v20);
      xpc_object_t v21 = xpc_null_create();
      xpc_release(v20);
      xpc_release(v21);
      xpc_connection_send_message(*a2, v8);
      xpc_release(v12);
    }
    goto LABEL_38;
  }
  memset(__p, 170, 24);
  xpc_object_t value = xpc_dictionary_get_value(*a3, kKeyCommand[0]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  memset(&__p[3], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  uint64_t v14 = *(void *)(a1 + 288);
  xpc_object_t v15 = *a3;
  xpc_object_t v29 = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t v29 = xpc_null_create();
  }
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 1174405120;
  v25[2] = ___ZN17ABMServerInternal24handlePublicMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke;
  v25[3] = &__block_descriptor_tmp_27;
  v25[4] = a1;
  xpc_object_t v26 = v8;
  if (!v8)
  {
    xpc_object_t v26 = xpc_null_create();
    xpc_connection_t v16 = *a2;
    xpc_object_t v27 = v16;
    if (v16) {
      goto LABEL_23;
    }
LABEL_25:
    xpc_object_t v27 = xpc_null_create();
    goto LABEL_26;
  }
  xpc_retain(v8);
  xpc_connection_t v16 = *a2;
  xpc_object_t v27 = v16;
  if (!v16) {
    goto LABEL_25;
  }
LABEL_23:
  xpc_retain(v16);
LABEL_26:
  xpc_object_t v17 = _Block_copy(v25);
  long long v28 = v17;
  ServiceManager::runCommand(v14, (uint64_t)__p, &v29, &v28);
  if (v17) {
    _Block_release(v17);
  }
  xpc_release(v29);
  xpc_object_t v29 = 0;
  xpc_release(v27);
  xpc_object_t v27 = 0;
  xpc_release(v26);
  xpc_object_t v26 = 0;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
LABEL_38:
  xpc_object_t v22 = xpc_null_create();
  xpc_object_t v23 = xpc_null_create();
  xpc_object_t v24 = *a3;
  *a3 = v22;
  xpc_release(v24);
  xpc_release(v23);
  xpc_release(v8);
}

void sub_1C577A398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t a14, xpc_object_t object, uint64_t a16, xpc_object_t a17, xpc_object_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(v25);
  xpc_release(v24);
  _Unwind_Resume(a1);
}

void ServiceManager::runCommand(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  uint64_t v6 = *(void *)(a1 + 168);
  uint64_t v7 = *a3;
  xpc_object_t object = v7;
  if (!v7)
  {
    xpc_object_t object = xpc_null_create();
    xpc_object_t v8 = *a4;
    if (!*a4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(v7);
  xpc_object_t v8 = *a4;
  if (*a4) {
LABEL_5:
  }
    xpc_object_t v8 = _Block_copy(v8);
LABEL_6:
  aBlock = v8;
  ServiceCtrl::handleCommand(v6, a2, &object, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(object);
}

void sub_1C577A574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t object)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ServiceCtrl::handleCommand(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  uint64_t v9 = a1;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    std::string __p = *(std::string *)a2;
    uint64_t v7 = *a3;
    xpc_object_t object = v7;
    if (v7) {
      goto LABEL_3;
    }
LABEL_6:
    xpc_object_t object = xpc_null_create();
    xpc_object_t v8 = *a4;
    if (!*a4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  uint64_t v7 = *a3;
  xpc_object_t object = v7;
  if (!v7) {
    goto LABEL_6;
  }
LABEL_3:
  xpc_retain(v7);
  xpc_object_t v8 = *a4;
  if (*a4) {
LABEL_7:
  }
    xpc_object_t v8 = _Block_copy(v8);
LABEL_8:
  aBlock = v8;
  ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>((uint64_t *)(a1 + 72), (uint64_t)&v9);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  unsigned int v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  xpc_object_t v8 = (char *)operator new(0x30uLL);
  *(void *)xpc_object_t v8 = *(void *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *((void *)v8 + 3) = v9;
  *((void *)v8 + 4) = v10;
  xpc_object_t v11 = xpc_null_create();
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = v11;
  *(void *)(a2 + 40) = 0;
  xpc_object_t v12 = a1[2];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v13 = operator new(0x18uLL);
  void *v13 = v8;
  v13[1] = v5;
  v13[2] = v7;
  dispatch_async_f(v12, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>(ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1},std::default_delete<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN20HandDetectionManager4initEv_block_invoke_13(void *a1, int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        int isProxCovered = ctu::iokit::IOHIDController::isProxCovered(*(ctu::iokit::IOHIDController **)(v5 + 96));
        uint64_t v10 = *(NSObject **)v5;
        if (!os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
        {
          if (*(unsigned __int8 *)(v5 + 112) == isProxCovered) {
            return;
          }
          goto LABEL_8;
        }
        xpc_object_t v13 = "Off";
        if (isProxCovered) {
          xpc_object_t v13 = "On";
        }
        int v14 = 136315394;
        xpc_object_t v15 = v13;
        __int16 v16 = 1024;
        int v17 = a2;
        _os_log_debug_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEBUG, "#D Received proximity information: %s (mask: 0x%x)", (uint8_t *)&v14, 0x12u);
        if (*(unsigned __int8 *)(v5 + 112) != isProxCovered)
        {
LABEL_8:
          *(unsigned char *)(v5 + 112) = isProxCovered;
          xpc_object_t v11 = *(NSObject **)v5;
          if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEFAULT))
          {
            xpc_object_t v12 = "Off";
            if (isProxCovered) {
              xpc_object_t v12 = "On";
            }
            int v14 = 136315138;
            xpc_object_t v15 = v12;
            _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I Proximity Sensor: %s", (uint8_t *)&v14, 0xCu);
          }
          HandDetectionManager::updateHandDetection((os_log_t *)v5);
        }
      }
    }
  }
}

void ___ZN9SARModule28initializeHandDetection_syncEv_block_invoke(void *a1, unsigned __int8 a2)
{
  v29[1] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[5];
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v8) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8) {
      return;
    }
  }
  if (*(unsigned char *)(v5 + 264)) {
    unsigned __int8 v9 = a2;
  }
  else {
    unsigned __int8 v9 = 0;
  }
  *(unsigned char *)(v5 + 168) = v9;
  uint64_t v10 = *(NSObject **)(v5 + 80);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v9;
    _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Sending Grip State: 0x%x\n", buf, 8u);
  }
  xpc_object_t v11 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v12 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v11);
    long long v13 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    int v14 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v13;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    xpc_object_t v15 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    xpc_object_t v12 = (AppleSARHelper *)off_1EBBDD250;
  }
  __int16 v16 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v26 = *(unsigned char *)(v5 + 168);
  if (*((_DWORD *)v12 + 1))
  {
    *(void *)buf = 0;
    v29[0] = 0;
    unsigned int v27 = 1;
    char v17 = AppleSARHelper::callUserClientMethod(v12, 7, (const unint64_t *)buf, 1, &v26, 1, v29, &v27, &v26, 1uLL);
    if (!v16) {
      goto LABEL_27;
    }
  }
  else
  {
    char v17 = 0;
    if (!v16) {
      goto LABEL_27;
    }
  }
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v17) {
      goto LABEL_28;
    }
    goto LABEL_35;
  }
LABEL_27:
  if (v17)
  {
LABEL_28:
    if (*(unsigned __int8 *)(v5 + 169) != *(unsigned __int8 *)(v5 + 168) || !*(void *)(v5 + 304))
    {
      uint64_t v18 = *(std::__shared_weak_count **)(v5 + 56);
      if (!v18 || (v19 = *(void *)(v5 + 48), (xpc_object_t v20 = std::__shared_weak_count::lock(v18)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      xpc_object_t v21 = v20;
      xpc_object_t v22 = operator new(8uLL);
      void *v22 = v5;
      xpc_object_t v23 = *(NSObject **)(v5 + 64);
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      xpc_object_t v24 = operator new(0x18uLL);
      void *v24 = v22;
      v24[1] = v19;
      v24[2] = v21;
      dispatch_async_f(v23, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_28initializeHandDetection_syncEvEUb5_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
      if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    return;
  }
LABEL_35:
  CFDataRef v25 = *(NSObject **)(v5 + 80);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C5767000, v25, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
  }
}

void sub_1C577AD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void coex::Module::State::sendWWANState_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v186 = 0;
  v187 = &v186;
  uint64_t v188 = 0x3002000000;
  v189 = __Block_byref_object_copy__286;
  v190 = __Block_byref_object_dispose__287;
  xpc_object_t v191 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v191 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v191 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v191 = v6;
LABEL_9:
  xpc_release(v5);
  CFMutableDictionaryRef v185 = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty(a1, coex::kKeyWWANState, a2, 0, &v185);
  if (v185) {
    uint64_t v7 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7)
  {
    v183[0] = 0xAAAAAAAAAAAAAAAALL;
    v183[1] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v8 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v183, v185);
    CFDictionaryRef v182 = 0;
    CFDictionaryRef v9 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef(v8, (const __CFString *)*MEMORY[0x1E4FB96C8]);
    CFDictionaryRef v182 = v9;
    if (v9) {
      uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v10)
    {
      unint64_t v180 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v181 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v180, v9);
      uint64_t v11 = ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v179, (const ctu::cf::dict_adapter *)&v180);
      uint64_t v12 = *MEMORY[0x1E4FB96C0];
      v175[0] = MEMORY[0x1E4F143A8];
      v175[1] = 0x40000000;
      uint64_t v176 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke;
      v177 = &unk_1E6516D88;
      v178 = &v186;
      long long v13 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))v179[0])(v11, v12);
      int v14 = v13;
      if (v13)
      {
        CFTypeID v15 = CFGetTypeID(v13);
        CFTypeID TypeID = CFDictionaryGetTypeID();
        CFRelease(v14);
        if (v15 == TypeID) {
          v176((uint64_t)v175, (const __CFDictionary *)v14);
        }
      }
      MEMORY[0x1C8791160](v179);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v174, (const ctu::cf::dict_adapter *)&v180);
      uint64_t v17 = *MEMORY[0x1E4FB96A8];
      v170[0] = MEMORY[0x1E4F143A8];
      v170[1] = 0x40000000;
      v171 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_2;
      uint64_t v172 = &unk_1E6516DB0;
      xpc_object_t v173 = &v186;
      uint64_t v18 = (const void *)(*(uint64_t (**)(void *, uint64_t))v174[0])(v174, v17);
      uint64_t v19 = v18;
      if (v18)
      {
        CFTypeID v20 = CFGetTypeID(v18);
        CFTypeID v21 = CFDictionaryGetTypeID();
        CFRelease(v19);
        if (v20 == v21) {
          v171((uint64_t)v170, (const __CFDictionary *)v19);
        }
      }
      MEMORY[0x1C8791160](v174);
      MEMORY[0x1C8791160](&v180);
    }
    CFDictionaryRef v22 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB96B0]);
    CFDictionaryRef v182 = v22;
    if (v9) {
      CFRelease(v9);
    }
    if (v22) {
      xpc_object_t v23 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      xpc_object_t v23 = 0;
    }
    if (v23)
    {
      unint64_t v180 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v181 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v180, v22);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v169, (const ctu::cf::dict_adapter *)&v180);
      uint64_t v24 = *MEMORY[0x1E4FB95B0];
      v165[0] = MEMORY[0x1E4F143A8];
      v165[1] = 0x40000000;
      CFMutableDictionaryRef v166 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_3;
      v167 = &unk_1E6516DD8;
      CFMutableDictionaryRef v168 = &v186;
      CFDataRef v25 = (unsigned int *)(*(uint64_t (**)(void *, uint64_t))v169[0])(v169, v24);
      char v26 = v25;
      if (v25)
      {
        CFTypeID v27 = CFGetTypeID(v25);
        if (v27 == CFNumberGetTypeID())
        {
          LODWORD(v144) = -1431655766;
          int v29 = ctu::cf::assign((ctu::cf *)&v144, v26, v28);
          CFRelease(v26);
          if (v29) {
            v166((uint64_t)v165, v144);
          }
        }
        else
        {
          CFRelease(v26);
        }
      }
      MEMORY[0x1C8791160](v169);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v164, (const ctu::cf::dict_adapter *)&v180);
      uint64_t v36 = *MEMORY[0x1E4FB9570];
      v160[0] = MEMORY[0x1E4F143A8];
      v160[1] = 0x40000000;
      CFMutableDictionaryRef v161 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_4;
      CFMutableDictionaryRef v162 = &unk_1E6516E00;
      CFMutableDictionaryRef v163 = &v186;
      xpc_object_t v37 = (unsigned int *)(*(uint64_t (**)(void *, uint64_t))v164[0])(v164, v36);
      int v38 = v37;
      if (v37)
      {
        CFTypeID v39 = CFGetTypeID(v37);
        if (v39 == CFNumberGetTypeID())
        {
          LODWORD(v144) = -1431655766;
          int v41 = ctu::cf::assign((ctu::cf *)&v144, v38, v40);
          CFRelease(v38);
          if (v41) {
            v161((uint64_t)v160, v144);
          }
        }
        else
        {
          CFRelease(v38);
        }
      }
      MEMORY[0x1C8791160](v164);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v159, (const ctu::cf::dict_adapter *)&v180);
      uint64_t v42 = *MEMORY[0x1E4FB9650];
      v155[0] = MEMORY[0x1E4F143A8];
      v155[1] = 0x40000000;
      CFMutableDictionaryRef v156 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_5;
      CFMutableDictionaryRef v157 = &unk_1E6516E28;
      xpc_object_t v158 = &v186;
      xpc_object_t v43 = (unsigned int *)(*(uint64_t (**)(void *, uint64_t))v159[0])(v159, v42);
      int v44 = v43;
      if (v43)
      {
        CFTypeID v45 = CFGetTypeID(v43);
        if (v45 == CFNumberGetTypeID())
        {
          LODWORD(v144) = -1431655766;
          int v47 = ctu::cf::assign((ctu::cf *)&v144, v44, v46);
          CFRelease(v44);
          if (v47) {
            v156((uint64_t)v155, v144);
          }
        }
        else
        {
          CFRelease(v44);
        }
      }
      MEMORY[0x1C8791160](v159);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v154, (const ctu::cf::dict_adapter *)&v180);
      uint64_t v48 = *MEMORY[0x1E4FB9530];
      v150[0] = MEMORY[0x1E4F143A8];
      v150[1] = 0x40000000;
      CFMutableDictionaryRef v151 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_6;
      CFMutableDictionaryRef v152 = &unk_1E6516E50;
      CFMutableDictionaryRef v153 = &v186;
      xpc_object_t v49 = (unsigned int *)(*(uint64_t (**)(void *, uint64_t))v154[0])(v154, v48);
      xpc_object_t v50 = v49;
      if (v49)
      {
        CFTypeID v51 = CFGetTypeID(v49);
        if (v51 == CFNumberGetTypeID())
        {
          LODWORD(v144) = -1431655766;
          int v53 = ctu::cf::assign((ctu::cf *)&v144, v50, v52);
          CFRelease(v50);
          if (v53) {
            v151((uint64_t)v150, v144);
          }
        }
        else
        {
          CFRelease(v50);
        }
      }
      MEMORY[0x1C8791160](v154);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v149, (const ctu::cf::dict_adapter *)&v180);
      uint64_t v54 = *MEMORY[0x1E4FB9520];
      v145[0] = MEMORY[0x1E4F143A8];
      v145[1] = 0x40000000;
      uint64_t v146 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_7;
      unsigned int v147 = &unk_1E6516E78;
      CFDataRef v148 = &v186;
      xpc_object_t v55 = (unsigned int *)(*(uint64_t (**)(void *, uint64_t))v149[0])(v149, v54);
      BOOL v56 = v55;
      if (v55)
      {
        CFTypeID v57 = CFGetTypeID(v55);
        if (v57 == CFNumberGetTypeID())
        {
          LODWORD(v144) = -1431655766;
          int v59 = ctu::cf::assign((ctu::cf *)&v144, v56, v58);
          CFRelease(v56);
          if (v59) {
            v146((uint64_t)v145, v144);
          }
        }
        else
        {
          CFRelease(v56);
        }
      }
      MEMORY[0x1C8791160](v149);
      MEMORY[0x1C8791160](&v180);
    }
    CFArrayRef v60 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB97B0]);
    CFArrayRef v61 = v60;
    CFArrayRef v144 = v60;
    if (v60) {
      xpc_object_t v62 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      xpc_object_t v62 = 0;
    }
    if (v62)
    {
      CFArrayRef v143 = v60;
      if (v60) {
        CFRetain(v60);
      }
      xpc_object_t v63 = (void *)v187[5];
      xpc_object_t v142 = v63;
      if (v63)
      {
        xpc_object_t v64 = xpc_retain(v63);
      }
      else
      {
        xpc_object_t v64 = xpc_null_create();
        xpc_object_t v63 = v64;
        xpc_object_t v142 = v64;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v64, &v143, "kWCMCellularNetworkConfiguration_LTEBandInformationSet", &v142);
      xpc_release(v63);
      xpc_object_t v142 = 0;
      if (v61) {
        CFRelease(v61);
      }
    }
    CFArrayRef v65 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB98B8]);
    CFArrayRef v66 = v65;
    v141[1] = v65;
    if (v65) {
      CFMutableArrayRef v67 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      CFMutableArrayRef v67 = 0;
    }
    if (v67)
    {
      v141[0] = v65;
      if (v65) {
        CFRetain(v65);
      }
      xpc_object_t v68 = (void *)v187[5];
      xpc_object_t v140 = v68;
      if (v68)
      {
        xpc_object_t v69 = xpc_retain(v68);
      }
      else
      {
        xpc_object_t v69 = xpc_null_create();
        xpc_object_t v68 = v69;
        xpc_object_t v140 = v69;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v69, v141, "kWCMCellularNetworkConfiguration_TDSCDMABandInformationSet", &v140);
      xpc_release(v68);
      xpc_object_t v140 = 0;
      if (v66) {
        CFRelease(v66);
      }
    }
    CFArrayRef v119 = v66;
    CFArrayRef v70 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB9790]);
    CFArrayRef v71 = v70;
    v139[1] = v70;
    if (v70) {
      CFDataRef v72 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      CFDataRef v72 = 0;
    }
    if (v72)
    {
      v139[0] = v70;
      if (v70) {
        CFRetain(v70);
      }
      CFDataRef v73 = (void *)v187[5];
      xpc_object_t v138 = v73;
      if (v73)
      {
        xpc_object_t v74 = xpc_retain(v73);
      }
      else
      {
        xpc_object_t v74 = xpc_null_create();
        CFDataRef v73 = v74;
        xpc_object_t v138 = v74;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v74, v139, "kWCMCellularNetworkConfiguration_GSMBandInformationSet", &v138);
      xpc_release(v73);
      xpc_object_t v138 = 0;
      if (v71) {
        CFRelease(v71);
      }
    }
    CFArrayRef cf = v71;
    CFArrayRef v75 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB97F0]);
    CFArrayRef v76 = v75;
    v137[1] = v75;
    if (v75) {
      CFRange v77 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      CFRange v77 = 0;
    }
    if (v77)
    {
      v137[0] = v75;
      if (v75) {
        CFRetain(v75);
      }
      CFRange v78 = (void *)v187[5];
      xpc_object_t v136 = v78;
      if (v78)
      {
        xpc_object_t v79 = xpc_retain(v78);
      }
      else
      {
        xpc_object_t v79 = xpc_null_create();
        CFRange v78 = v79;
        xpc_object_t v136 = v79;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v79, v137, "kWCMCellularNetworkConfiguration_ONEXBandInformationSet", &v136);
      xpc_release(v78);
      xpc_object_t v136 = 0;
      if (v76) {
        CFRelease(v76);
      }
    }
    CFArrayRef v80 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB97A0]);
    CFArrayRef v81 = v80;
    v135[1] = v80;
    if (v80) {
      int v82 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      int v82 = 0;
    }
    if (v82)
    {
      v135[0] = v80;
      if (v80) {
        CFRetain(v80);
      }
      CFMutableDictionaryRef v83 = (void *)v187[5];
      xpc_object_t v134 = v83;
      if (v83)
      {
        xpc_object_t v84 = xpc_retain(v83);
      }
      else
      {
        xpc_object_t v84 = xpc_null_create();
        CFMutableDictionaryRef v83 = v84;
        xpc_object_t v134 = v84;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v84, v135, "kWCMCellularNetworkConfiguration_HDRBandInformationSet", &v134);
      xpc_release(v83);
      xpc_object_t v134 = 0;
      if (v81) {
        CFRelease(v81);
      }
    }
    CFArrayRef v85 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB9848]);
    CFArrayRef v86 = v85;
    v133[1] = v85;
    if (v85) {
      size_t v87 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      size_t v87 = 0;
    }
    if (v87)
    {
      v133[0] = v85;
      if (v85) {
        CFRetain(v85);
      }
      size_t v88 = (void *)v187[5];
      xpc_object_t v132 = v88;
      if (v88)
      {
        xpc_object_t v89 = xpc_retain(v88);
      }
      else
      {
        xpc_object_t v89 = xpc_null_create();
        size_t v88 = v89;
        xpc_object_t v132 = v89;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v89, v133, "kWCMCellularNetworkConfiguration_WCDMABandInformationSet", &v132);
      xpc_release(v88);
      xpc_object_t v132 = 0;
      if (v86) {
        CFRelease(v86);
      }
    }
    uint64_t v117 = a1;
    int v115 = a2;
    CFArrayRef v90 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB97C0]);
    CFArrayRef v91 = v90;
    v131[1] = v90;
    if (v90) {
      uint64_t v92 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      uint64_t v92 = 0;
    }
    if (v92)
    {
      v131[0] = v90;
      if (v90) {
        CFRetain(v90);
      }
      uint64_t v93 = (void *)v187[5];
      xpc_object_t v130 = v93;
      if (v93)
      {
        xpc_object_t v94 = xpc_retain(v93);
      }
      else
      {
        xpc_object_t v94 = xpc_null_create();
        uint64_t v93 = v94;
        xpc_object_t v130 = v94;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v94, v131, "kWCMCellularNetworkConfiguration_NGCBandInformationSet", &v130);
      xpc_release(v93);
      xpc_object_t v130 = 0;
      if (v91) {
        CFRelease(v91);
      }
    }
    CFArrayRef v95 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB9868]);
    CFArrayRef v96 = v95;
    v129[1] = v95;
    if (v95) {
      uint64_t v97 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      uint64_t v97 = 0;
    }
    if (v97)
    {
      v129[0] = v95;
      if (v95) {
        CFRetain(v95);
      }
      uint64_t v98 = (void *)v187[5];
      xpc_object_t v128 = v98;
      if (v98)
      {
        xpc_object_t v99 = xpc_retain(v98);
      }
      else
      {
        xpc_object_t v99 = xpc_null_create();
        uint64_t v98 = v99;
        xpc_object_t v128 = v99;
      }
      coex::Module::State::fetchCarrierIdSet_sync((uint64_t)v99, v129, "kWCMCellularNetworkConfiguration_LTECarrierInformationSet", &v128);
      xpc_release(v98);
      xpc_object_t v128 = 0;
      if (v96) {
        CFRelease(v96);
      }
    }
    CFArrayRef v100 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB9870]);
    CFArrayRef v101 = v100;
    v127[1] = v100;
    if (v100) {
      CFDictionaryRef v102 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      CFDictionaryRef v102 = 0;
    }
    if (v102)
    {
      v127[0] = v100;
      if (v100) {
        CFRetain(v100);
      }
      v103 = (void *)v187[5];
      xpc_object_t v126 = v103;
      if (v103)
      {
        xpc_object_t v104 = xpc_retain(v103);
      }
      else
      {
        xpc_object_t v104 = xpc_null_create();
        v103 = v104;
        xpc_object_t v126 = v104;
      }
      coex::Module::State::fetchCarrierIdSet_sync((uint64_t)v104, v127, "kWCMCellularNetworkConfiguration_NGCCarrierInformationSet", &v126);
      xpc_release(v103);
      xpc_object_t v126 = 0;
      if (v101) {
        CFRelease(v101);
      }
    }
    CFArrayRef v116 = v61;
    uint64_t v105 = *MEMORY[0x1E4FB95D0];
    CFDictionaryRef v106 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB95D0]);
    CFDictionaryRef v182 = v106;
    if (v22) {
      CFRelease(v22);
    }
    if (v106) {
      size_t v107 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      size_t v107 = 0;
    }
    if (v107)
    {
      unint64_t v180 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v181 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v180, v106);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v125, (const ctu::cf::dict_adapter *)&v180);
      v121[0] = MEMORY[0x1E4F143A8];
      v121[1] = 0x40000000;
      CFTypeRef v122 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_8;
      unsigned int v123 = &unk_1E6516EA0;
      unsigned int v124 = &v186;
      size_t v108 = (unsigned int *)(*(uint64_t (**)(void *, uint64_t))v125[0])(v125, v105);
      int v109 = v108;
      if (v108)
      {
        CFTypeID v110 = CFGetTypeID(v108);
        if (v110 == CFNumberGetTypeID())
        {
          v192[0] = -1431655766;
          int v112 = ctu::cf::assign((ctu::cf *)v192, v109, v111);
          CFRelease(v109);
          if (v112) {
            v122((uint64_t)v121, v192[0]);
          }
        }
        else
        {
          CFRelease(v109);
        }
      }
      MEMORY[0x1C8791160](v125);
      MEMORY[0x1C8791160](&v180);
    }
    uint64_t v113 = *(void *)(v117 + 120);
    if (v113)
    {
      xpc_object_t v114 = (xpc_object_t)v187[5];
      v120 = v114;
      if (v114)
      {
        xpc_retain(v114);
      }
      else
      {
        xpc_object_t v114 = xpc_null_create();
        v120 = v114;
      }
      coex::XpcClient::sendMessage(v113, 300, &v120, v115);
      xpc_release(v114);
      v120 = 0;
    }
    if (v101) {
      CFRelease(v101);
    }
    if (v96) {
      CFRelease(v96);
    }
    if (v91) {
      CFRelease(v91);
    }
    if (v86) {
      CFRelease(v86);
    }
    if (v81) {
      CFRelease(v81);
    }
    if (v76) {
      CFRelease(v76);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v119) {
      CFRelease(v119);
    }
    if (v116) {
      CFRelease(v116);
    }
    if (v106) {
      CFRelease(v106);
    }
    MEMORY[0x1C8791160](v183);
    CFMutableDictionaryRef v35 = v185;
    if (v185) {
LABEL_206:
    }
      CFRelease(v35);
  }
  else
  {
    v183[0] = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v31 = Mutable;
    if (Mutable) {
      v183[0] = Mutable;
    }
    unint64_t v32 = (const void *)*MEMORY[0x1E4F1CFD0];
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9608], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v31, (CFTypeRef)*MEMORY[0x1E4FB9660], v32);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v31, (CFTypeRef)*MEMORY[0x1E4FB9598], v32);
    uint64_t v33 = *(void *)(a1 + 104);
    if (v33)
    {
      if (v31 && (CFTypeID v34 = CFGetTypeID(v31), v34 == CFDictionaryGetTypeID()))
      {
        unint64_t v184 = v31;
        CFRetain(v31);
      }
      else
      {
        unint64_t v184 = 0;
      }
      (*(void (**)(uint64_t, __CFDictionary **, uint64_t))(*(void *)v33 + 72))(v33, &v184, a2);
      if (v184) {
        CFRelease(v184);
      }
    }
    if (v31) {
      CFRelease(v31);
    }
    CFMutableDictionaryRef v35 = v185;
    if (v185) {
      goto LABEL_206;
    }
  }
  _Block_object_dispose(&v186, 8);
  xpc_release(v191);
}

void sub_1C577BFDC(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 176));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 192));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 168));
  _Block_object_dispose((const void *)(v1 - 160), 8);
  xpc_release(*(xpc_object_t *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1C577C360()
{
}

uint64_t ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_2(uint64_t a1, const __CFDictionary *a2)
{
  v10[0] = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v10, a2);
  int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E4FB9658]);
  xpc_object_t v4 = xpc_int64_create(Int);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_DLBandInfo_CenterFreq", v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E4FB9538], 0.0);
  xpc_object_t v7 = xpc_double_create(v6);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_DLBandInfo_BandWidth", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  return MEMORY[0x1C8791160](v10);
}

uint64_t ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke(uint64_t a1, const __CFDictionary *a2)
{
  v10[0] = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v10, a2);
  int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E4FB9658]);
  xpc_object_t v4 = xpc_int64_create(Int);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_ULBandInfo_CenterFreq", v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E4FB9538], 0.0);
  xpc_object_t v7 = xpc_double_create(v6);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_ULBandInfo_BandWidth", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  return MEMORY[0x1C8791160](v10);
}

void coex::Module::State::fetchCarrierIdSet_sync(uint64_t a1, CFArrayRef *a2, const char *a3, xpc_object_t *a4)
{
  if (*a2) {
    xpc_object_t v4 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    xpc_object_t v4 = 0;
  }
  if (a3)
  {
    if (v4)
    {
      if (MEMORY[0x1C8792D30](*a4) == MEMORY[0x1E4F14590])
      {
        CFIndex Count = CFArrayGetCount(*a2);
        if (Count >= 1)
        {
          CFIndex v9 = Count;
          xpc_object_t v10 = xpc_array_create(0, 0);
          uint64_t v11 = MEMORY[0x1E4F14568];
          if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C8792D30](v10) == v11)
            {
              xpc_retain(v10);
              xpc_object_t v12 = v10;
            }
            else
            {
              xpc_object_t v12 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v12 = xpc_null_create();
            xpc_object_t v10 = 0;
          }
          xpc_release(v10);
          for (CFIndex i = 0; i != v9; ++i)
          {
            LODWORD(value) = 0;
            ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*a2, i);
            CFTypeID v15 = ValueAtIndex;
            if (ValueAtIndex)
            {
              CFTypeID v16 = CFGetTypeID(ValueAtIndex);
              if (v16 == CFNumberGetTypeID())
              {
                if (ctu::cf::assign((ctu::cf *)&value, v15, v17))
                {
                  xpc_object_t v18 = xpc_int64_create(value);
                  if (!v18) {
                    xpc_object_t v18 = xpc_null_create();
                  }
                  xpc_array_append_value(v12, v18);
                  xpc_release(v18);
                }
              }
            }
          }
          if (MEMORY[0x1C8792D30](v12) == v11 && xpc_array_get_count(v12))
          {
            if (v12)
            {
              xpc_retain(v12);
              xpc_object_t v19 = v12;
            }
            else
            {
              xpc_object_t v19 = xpc_null_create();
            }
            xpc_dictionary_set_value(*a4, a3, v19);
            xpc_object_t v20 = xpc_null_create();
            xpc_release(v19);
            xpc_release(v20);
          }
          xpc_release(v12);
        }
      }
    }
  }
}

void sub_1C577C82C(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void coex::Module::State::fetchBandInfoSet_sync(uint64_t a1, CFArrayRef *a2, const char *a3, xpc_object_t *a4)
{
  if (*a2) {
    xpc_object_t v4 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    xpc_object_t v4 = 0;
  }
  if (!a3) {
    return;
  }
  if (!v4) {
    return;
  }
  if (MEMORY[0x1C8792D30](*a4) != MEMORY[0x1E4F14590]) {
    return;
  }
  CFIndex Count = CFArrayGetCount(*a2);
  if (Count < 1) {
    return;
  }
  CFIndex v9 = Count;
  xpc_object_t v10 = xpc_array_create(0, 0);
  uint64_t v11 = MEMORY[0x1E4F14568];
  if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v10) == v11)
    {
      xpc_retain(v10);
      xpc_object_t v12 = v10;
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v10 = 0;
  }
  int v38 = a4;
  xpc_object_t xarray = v12;
  xpc_release(v10);
  CFIndex v13 = 0;
  CFStringRef v14 = (const __CFString *)*MEMORY[0x1E4FB9658];
  CFStringRef v15 = (const __CFString *)*MEMORY[0x1E4FB9538];
  CFStringRef v16 = (const __CFString *)*MEMORY[0x1E4FB9600];
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*a2, v13);
    xpc_object_t v18 = ValueAtIndex;
    if (!ValueAtIndex || (CFTypeID v19 = CFGetTypeID(ValueAtIndex), v19 != CFDictionaryGetTypeID()))
    {
      xpc_object_t v18 = 0;
      uint64_t v42 = 0;
LABEL_27:
      if (v18) {
        goto LABEL_51;
      }
      goto LABEL_15;
    }
    uint64_t v42 = v18;
    CFRetain(v18);
    if (v18) {
      xpc_object_t v20 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      xpc_object_t v20 = 0;
    }
    if (!v20) {
      goto LABEL_27;
    }
    v41[0] = 0xAAAAAAAAAAAAAAAALL;
    v41[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v41, (const __CFDictionary *)v18);
    xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
    if (v21 || (xpc_object_t v21 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v21) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v21);
        xpc_object_t v22 = v21;
      }
      else
      {
        xpc_object_t v22 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v21 = 0;
    }
    xpc_release(v21);
    int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, v14);
    xpc_object_t v24 = xpc_int64_create(Int);
    if (!v24) {
      xpc_object_t v24 = xpc_null_create();
    }
    xpc_dictionary_set_value(v22, "kWCMCellularNetworkConfiguration_BandInfoSet_CenterFreq", v24);
    xpc_object_t v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
    ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)v41, v15, 0.0);
    xpc_object_t v27 = xpc_double_create(v26);
    if (!v27) {
      xpc_object_t v27 = xpc_null_create();
    }
    xpc_dictionary_set_value(v22, "kWCMCellularNetworkConfiguration_BandInfoSet_Bandwidth", v27);
    xpc_object_t v28 = xpc_null_create();
    xpc_release(v27);
    xpc_release(v28);
    CFDataRef v29 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v41, v16);
    CFDataRef v30 = v29;
    CFDataRef cf = v29;
    if (v29) {
      uint64_t v31 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    }
    else {
      uint64_t v31 = 0;
    }
    if (v31)
    {
      if (v29) {
        CFRetain(v29);
      }
      *(void *)buffer = 0;
      v44.length = CFDataGetLength(v30);
      v44.location = 0;
      CFDataGetBytes(v30, v44, buffer);
      uint64_t v32 = *(void *)buffer;
      if (v30) {
        CFRelease(v30);
      }
      xpc_object_t v33 = xpc_uint64_create(v32);
      if (!v33) {
        xpc_object_t v33 = xpc_null_create();
      }
    }
    else
    {
      int v34 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, v16);
      xpc_object_t v33 = xpc_uint64_create(v34);
      if (!v33) {
        xpc_object_t v33 = xpc_null_create();
      }
    }
    xpc_dictionary_set_value(v22, "kWCMCellularNetworkConfiguration_BandInfoSet_DirectionMask", v33);
    xpc_object_t v35 = xpc_null_create();
    xpc_release(v33);
    xpc_release(v35);
    xpc_array_append_value(xarray, v22);
    if (cf) {
      CFRelease(cf);
    }
    xpc_release(v22);
    MEMORY[0x1C8791160](v41);
    xpc_object_t v18 = v42;
    if (v42) {
LABEL_51:
    }
      CFRelease(v18);
LABEL_15:
    ++v13;
  }
  while (v9 != v13);
  if (MEMORY[0x1C8792D30](xarray) == MEMORY[0x1E4F14568])
  {
    if (xarray)
    {
      xpc_retain(xarray);
      xpc_object_t v36 = xarray;
    }
    else
    {
      xpc_object_t v36 = xpc_null_create();
    }
    xpc_dictionary_set_value(*v38, a3, v36);
    xpc_object_t v37 = xpc_null_create();
    xpc_release(v36);
    xpc_release(v37);
  }
  xpc_release(xarray);
}

void sub_1C577CD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, char a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
}

uint64_t ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5(void *a1, uint64_t a2)
{
  unsigned int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    xpc_object_t v5 = (void *)a1[4];
    double v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      xpc_object_t v7 = v6;
      uint64_t v8 = a1[5];
      if (v8 && *(_DWORD *)(a2 + 16) == 3)
      {
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 3321888768;
        v17[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6;
        v17[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e5_v8__0l;
        v17[4] = v5;
        v17[5] = v8;
        CFIndex v9 = (std::__shared_weak_count *)a1[6];
        xpc_object_t v18 = v9;
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v10 = (std::__shared_weak_count *)v5[16];
        if (!v10 || (uint64_t v11 = v5[15], (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        CFIndex v13 = v12;
        CFStringRef v14 = v5[17];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3321888768;
        block[2] = ___ZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedEU13block_pointerFvvE_block_invoke;
        block[3] = &unk_1F20FB820;
        block[5] = v11;
        xpc_object_t v20 = v13;
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        block[4] = v17;
        dispatch_async(v14, block);
        CFStringRef v15 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  return 0;
}

void DataStallDetection::create(capabilities::abs *a1@<X0>, uint64_t *a2@<X8>)
{
  if (capabilities::abs::supportsRadioHealth(a1))
  {
    xpc_object_t v4 = operator new(0xA0uLL);
    uint64_t v5 = (uint64_t)v4;
    double v6 = (std::__shared_weak_count *)*((void *)a1 + 1);
    uint64_t v8 = *(void *)a1;
    CFIndex v9 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    DataStallDetection::DataStallDetection((uint64_t)v4, &v8);
    *a2 = 0xAAAAAAAAAAAAAAAALL;
    a2[1] = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<DataStallDetection>::shared_ptr[abi:ne180100]<DataStallDetection,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1},void>(a2, v5);
    ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
    xpc_object_t v7 = v9;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1C577D150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1C577D16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C577D180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t DataStallDetection::DataStallDetection(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1F20EFE18;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v24, "com.apple.telephony.abm", "net.stall");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v5 = dispatch_queue_create_with_target_V2("net.stall", initially_inactive, 0);
  dispatch_set_qos_class_floor(v5, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v5);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v5;
  if (v5)
  {
    dispatch_retain(v5);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_1F20EFF68;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v26);
  *(void *)(a1 + 8) = &unk_1F20F0070;
  *(void *)(a1 + 56) = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 64) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v25);
  *(void *)a1 = &unk_1F20EFFF8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v24);
  *(void *)a1 = &unk_1F20EFE18;
  *(void *)(a1 + 104) = *a2;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v8 = off_1EBBDCFD0;
  if (!off_1EBBDCFD0)
  {
    ABMServer::create_default_global(&v26);
    long long v9 = v26;
    long long v26 = 0uLL;
    xpc_object_t v10 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
    off_1EBBDCFD0 = v9;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (*((void *)&v26 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v8 = off_1EBBDCFD0;
  }
  xpc_object_t v12 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
  if (*(&off_1EBBDCFD0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCFD0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v13 = *(void *)(*(void *)v8 + 208);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(void *)(a1 + 120) = v13;
  CFStringRef v14 = _Block_copy(&__block_literal_global);
  uint64_t v15 = *(void *)(a1 + 88);
  if (v15) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  }
  *(void *)(a1 + 128) = v14;
  *(void *)(a1 + 136) = v15;
  CFStringRef v16 = (std::__shared_weak_count *)a2[1];
  xpc_object_t v23 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v17 = off_1EBBDCFD0;
  if (!off_1EBBDCFD0)
  {
    ABMServer::create_default_global(&v26);
    long long v18 = v26;
    long long v26 = 0uLL;
    CFTypeID v19 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
    off_1EBBDCFD0 = v18;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    xpc_object_t v20 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (*((void *)&v26 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    uint64_t v17 = off_1EBBDCFD0;
  }
  xpc_object_t v21 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
  v25[0] = v17;
  v25[1] = *(&off_1EBBDCFD0 + 1);
  if (*(&off_1EBBDCFD0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCFD0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::iokit::Controller::create();
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  return a1;
}

void sub_1C577D6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(std::string)>::~callback((uint64_t)(v9 + 16));
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v10);
  ctu::SharedLoggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v9);
  _Unwind_Resume(a1);
}

void sub_1C577D758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *DataStallDetection::getName(DataStallDetection *this)
{
  return "net.stall";
}

uint64_t std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t dispatch::callback<void({block_pointer})(std::string)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void *ctu::SharedLoggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20EFF68;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unsigned int v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20EFF68;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unsigned int v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void DataStallDetection::~DataStallDetection(DataStallDetection *this)
{
  *(void *)this = &unk_1F20EFE18;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unsigned int v3 = (__CFRunLoop *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_17;
    }
  }
  else
  {
    unsigned int v3 = (__CFRunLoop *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_17;
    }
  }
  if (CFRunLoopIsWaiting(v3))
  {
    xpc_object_t v4 = dispatch_group_create();
    uint64_t v5 = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v5);
    }
    uint64_t v6 = (__CFRunLoop *)*((void *)this + 15);
    uint64_t v7 = (const void *)*MEMORY[0x1E4F1D418];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN18DataStallDetectionD2Ev_block_invoke;
    block[3] = &__block_descriptor_tmp_3_0;
    dispatch_group_t group = v5;
    if (v5)
    {
      dispatch_retain(v5);
      dispatch_group_enter(group);
    }
    CFRunLoopPerformBlock(v6, v7, block);
    CFRunLoopWakeUp(*((CFRunLoopRef *)this + 15));
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    if (v5)
    {
      dispatch_group_leave(v5);
      dispatch_release(v5);
      dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v5);
    }
    else
    {
      dispatch_group_wait(0, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
LABEL_17:
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  long long v9 = *((void *)this + 17);
  if (v9) {
    dispatch_release(v9);
  }
  uint64_t v10 = (const void *)*((void *)this + 16);
  if (v10) {
    _Block_release(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  *(void *)this = &unk_1F20EFF68;
  MEMORY[0x1C8790F40]((char *)this + 8);
  xpc_object_t v12 = *((void *)this + 12);
  if (v12) {
    dispatch_release(v12);
  }
  uint64_t v13 = *((void *)this + 11);
  if (v13) {
    dispatch_release(v13);
  }
  CFStringRef v14 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
}

{
  void *v1;
  uint64_t vars8;

  DataStallDetection::~DataStallDetection(this);

  operator delete(v1);
}

void __clang_call_terminate(void *a1)
{
}

void __copy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    xpc_object_t v4 = *(NSObject **)(a1 + 32);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    unsigned int v3 = *(NSObject **)(a1 + 32);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void DataStallDetection::start(DataStallDetection *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (unsigned int v3 = std::__shared_weak_count::lock(v2)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v4 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  xpc_object_t v27 = 0;
  xpc_object_t v28 = 0;
  unint64_t v29 = 0;
  uint64_t v5 = *((void *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Start", buf, 2u);
  }
  xpc_object_t v25 = (NetworkStatsInterface *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 14);
  v24[0] = *((void *)this + 13);
  v24[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NetworkStatsInterface::create(v24, (uint64_t *)&v25);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  xpc_object_t v22 = (void *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  NetworkStatsInterface::query(v25, &v22);
  uint64_t v7 = v22 + 1;
  uint64_t v8 = (void *)*v22;
  if ((void *)*v22 != v22 + 1)
  {
    do
    {
      *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)buf = v9;
      *(_OWORD *)uint64_t v32 = v9;
      *(_OWORD *)&v32[16] = v9;
      *(_DWORD *)buf = *((_DWORD *)v8 + 8);
      v32[0] = *((unsigned char *)v8 + 48);
      *(void *)&uint8_t buf[8] = v8[5];
      if (*((char *)v8 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v32[8], (const std::string::value_type *)v8[7], v8[8]);
      }
      else
      {
        *(_OWORD *)&v32[8] = *(_OWORD *)(v8 + 7);
        *(void *)&v32[24] = v8[9];
      }
      uint64_t v10 = v28;
      if ((unint64_t)v28 >= v29)
      {
        xpc_object_t v28 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v27, (uint64_t)&v32[8]);
        if ((v32[31] & 0x80000000) == 0) {
          goto LABEL_23;
        }
      }
      else if ((v32[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)&v32[8], *(std::string::size_type *)&v32[16]);
        xpc_object_t v28 = v10 + 1;
        if ((v32[31] & 0x80000000) == 0)
        {
LABEL_23:
          xpc_object_t v12 = (void *)v8[1];
          if (!v12) {
            goto LABEL_29;
          }
          goto LABEL_27;
        }
      }
      else
      {
        long long v11 = *(_OWORD *)&v32[8];
        v28->__r_.__value_.__r.__words[2] = *(void *)&v32[24];
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
        xpc_object_t v28 = v10 + 1;
        if ((v32[31] & 0x80000000) == 0) {
          goto LABEL_23;
        }
      }
      operator delete(*(void **)&v32[8]);
      xpc_object_t v12 = (void *)v8[1];
      if (!v12)
      {
        do
        {
LABEL_29:
          uint64_t v13 = (void *)v8[2];
          BOOL v14 = *v13 == (void)v8;
          uint64_t v8 = v13;
        }
        while (!v14);
        goto LABEL_14;
      }
      do
      {
LABEL_27:
        uint64_t v13 = v12;
        xpc_object_t v12 = (void *)*v12;
      }
      while (v12);
LABEL_14:
      uint64_t v8 = v13;
    }
    while (v13 != v7);
  }
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 0x40000000;
  v21[2] = ___ZN18DataStallDetection5startEv_block_invoke;
  v21[3] = &__block_descriptor_tmp_5;
  v21[4] = this;
  CFDataRef v30 = v21;
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&uint8_t buf[8] = 0x40000000;
  *(void *)uint64_t v32 = ___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  *(void *)&v32[8] = &__block_descriptor_tmp_21;
  *(void *)&v32[16] = (char *)this + 72;
  *(void *)&v32[24] = &v30;
  uint64_t v15 = *((void *)this + 11);
  if (*((void *)this + 12))
  {
    dispatch_async_and_wait(v15, buf);
    CFStringRef v16 = (std::__shared_weak_count *)v23;
    if (!v23) {
      goto LABEL_38;
    }
  }
  else
  {
    dispatch_sync(v15, buf);
    CFStringRef v16 = (std::__shared_weak_count *)v23;
    if (!v23) {
      goto LABEL_38;
    }
  }
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_38:
  uint64_t v17 = (std::__shared_weak_count *)v26;
  if (v26 && !atomic_fetch_add((atomic_ullong *volatile)(v26 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = (std::string *)v27;
  if (v27)
  {
    CFTypeID v19 = v28;
    xpc_object_t v20 = v27;
    if (v28 != v27)
    {
      do
      {
        if (SHIBYTE(v19[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19[-1].__r_.__value_.__l.__data_);
        }
        --v19;
      }
      while (v19 != v18);
      xpc_object_t v20 = v27;
    }
    xpc_object_t v28 = v18;
    operator delete(v20);
  }
  std::__shared_weak_count::__release_weak(v4);
}

void sub_1C577E07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::vector<std::string>::~vector[abi:ne180100](&a21);
  std::__shared_weak_count::__release_weak(v33);
  _Unwind_Resume(a1);
}

void ___ZN18DataStallDetection5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1C5767000, v1, OS_LOG_TYPE_DEFAULT, "#I Started", v2, 2u);
  }
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    unsigned int v3 = (void **)a1[1];
    xpc_object_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      xpc_object_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void DataStallDetection::setCallback(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN18DataStallDetection11setCallbackEN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_6_4;
  v7[4] = a1;
  xpc_object_t v4 = *(void **)a2;
  if (*(void *)a2) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<DataStallDetection>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN18DataStallDetection11setCallbackEN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  unsigned int v3 = v2[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I setCallback", v8, 2u);
  }
  xpc_object_t v4 = (void *)a1[5];
  if (v4) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = (const void *)v2[16];
  uint8_t v2[16] = v4;
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = a1[6];
  if (v6) {
    dispatch_retain(v6);
  }
  uint64_t v7 = v2[17];
  v2[17] = v6;
  if (v7) {
    dispatch_release(v7);
  }
}

void __copy_helper_block_e8_40c109_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(void **)(a2 + 40);
  if (v4) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c109_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  unsigned int v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "net.stall");
}

uint64_t ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  unsigned int v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20EFF68;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20EFF68;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6516898, MEMORY[0x1E4FBA1C8]);
}

void sub_1C577E564(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  xpc_object_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  unsigned int v3 = *a1;
  xpc_object_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v9 = (char *)operator new(24 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  uint64_t v10 = (std::string *)&v9[24 * v5];
  CFStringRef v16 = v10;
  uint64_t v17 = v10;
  long long v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    unsigned int v3 = *a1;
    xpc_object_t v4 = a1[1];
    uint64_t v10 = v16;
    long long v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      uint64_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    long long v11 = v10 + 1;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((void *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  uint64_t v13 = *a1;
  unsigned int v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    BOOL v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    unsigned int v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_1C577E7A4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
}

void ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    unsigned int v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C577E958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C577E974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<DataStallDetection>::shared_ptr[abi:ne180100]<DataStallDetection,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  std::__split_buffer<std::string>::pointer v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20EFFA8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  unint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C577EAA0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1}::operator() const(DataStallDetection*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C577EAC8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<DataStallDetection *,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection *)#1},std::allocator<DataStallDetection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<DataStallDetection *,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection *)#1},std::allocator<DataStallDetection>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<DataStallDetection *,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection *)#1},std::allocator<DataStallDetection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared"
                                "_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1}::operator() const(DataStallDetection*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20EFF68;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  std::__split_buffer<std::string>::pointer v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void *___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<DataStallDetection>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  unint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F0030;
  block[5] = v5;
  long long v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIK18DataStallDetectionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIK18DataStallDetectionEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __cxx_global_var_init()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C5767000);
  }
  return result;
}

capabilities::radio *radio::HealthService::HealthService(capabilities::radio *a1, uint64_t *a2, uint64_t *a3, const void **a4)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  unint64_t v8 = (capabilities::abs *)capabilities::radio::maverick(a1);
  if (!v8) {
    goto LABEL_64;
  }
  uint64_t v10 = *a2;
  long long v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v44 = *a2;
  CFTypeID v45 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *a3;
  long long v11 = (std::__shared_weak_count *)a3[1];
  xpc_object_t v43 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = capabilities::abs::supportsRadioHealth(v8);
  long long v14 = 0uLL;
  if (!v13) {
    goto LABEL_57;
  }
  uint64_t v15 = (std::__shared_weak_count_vtbl *)operator new(0xC8uLL);
  CFStringRef v16 = v15;
  uint64_t v55 = v10;
  BOOL v56 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v54[0] = v12;
  v54[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::HealthService::State::State(v15, &v55, v54);
  CFTypeID v57 = v16;
  unint64_t v58 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v17 = (std::__shared_weak_count *)operator new(0x20uLL);
  v17->__shared_owners_ = 0;
  p_shared_owners = &v17->__shared_owners_;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F0340;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = v16;
  unint64_t v58 = (unint64_t)v17;
  CFTypeID v19 = (std::__shared_weak_count *)v16[2].~__shared_weak_count;
  if (v19)
  {
    if (v19->__shared_owners_ != -1) {
      goto LABEL_17;
    }
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v16[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v16;
    v16[2].~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v17;
    std::__shared_weak_count::__release_weak(v19);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v16[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v16;
  v16[2].~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v17;
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_16:
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_17:
  xpc_object_t v20 = v57;
  if (v57[1].__on_zero_shared)
  {
    xpc_object_t v21 = (std::__shared_weak_count *)v57[2].~__shared_weak_count;
    if (!v21
      || (on_zero_shared_weak = v57[1].__on_zero_shared_weak, (unint64_t v23 = std::__shared_weak_count::lock(v21)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    xpc_object_t v24 = v23;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)&v20->~__shared_weak_count_0);
    *(void *)&long long v59 = on_zero_shared_weak;
    *((void *)&v59 + 1) = v24;
    __p[0] = 0;
    __p[1] = 0;
    ctu::TrackedLogger::registerLoggerToServer();
    xpc_object_t v25 = (std::__shared_weak_count *)*((void *)&v59 + 1);
    if (*((void *)&v59 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v59 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    xpc_object_t v20 = v57;
  }
  unint64_t v26 = v58;
  CFTypeID v57 = 0;
  unint64_t v58 = 0;
  *(void *)&long long v46 = v20;
  *((void *)&v46 + 1) = v26;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_object_t v27 = v56;
  if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  xpc_object_t v28 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  unint64_t v29 = (std::__shared_weak_count_vtbl *)off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v28);
    long long v30 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v31 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v30;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    uint64_t v32 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    unint64_t v29 = (std::__shared_weak_count_vtbl *)off_1EBBDD2A0;
  }
  CFTypeID v57 = v29;
  unint64_t v58 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v52 = v44;
  int v53 = v45;
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NetworkStatsInterface::getInterfaceList((NetworkStatsInterface *)v20[3].~__shared_weak_count, __p);
  (*((void (**)(long long *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t *, void **))v29->~__shared_weak_count
   + 9))(&v59, v29, &v52, __p);
  long long v33 = v59;
  long long v59 = 0uLL;
  int v34 = (std::__shared_weak_count *)v20[2].__on_zero_shared_weak;
  *(_OWORD *)&v20[2].__get_deleter = v33;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  xpc_object_t v35 = (std::__shared_weak_count *)*((void *)&v59 + 1);
  if (*((void *)&v59 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v59 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  xpc_object_t v36 = v53;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  xpc_object_t v37 = (std::__shared_weak_count *)v58;
  if (v58 && !atomic_fetch_add((atomic_ullong *volatile)(v58 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  long long v14 = v46;
LABEL_57:
  int v38 = (std::__shared_weak_count *)*((void *)a1 + 1);
  *(_OWORD *)a1 = v14;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    CFTypeID v39 = v45;
    if (v45) {
      goto LABEL_63;
    }
LABEL_64:
    uint64_t v40 = *(void *)a1;
    if (!*(void *)a1) {
      return a1;
    }
    goto LABEL_65;
  }
  CFTypeID v39 = v45;
  if (!v45) {
    goto LABEL_64;
  }
LABEL_63:
  if (atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_64;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  uint64_t v40 = *(void *)a1;
  if (!*(void *)a1) {
    return a1;
  }
LABEL_65:
  int v41 = *a4;
  if (v41) {
    CFRetain(v41);
  }
  __p[0] = (void *)MEMORY[0x1E4F143A8];
  __p[1] = (void *)1174405120;
  uint64_t v48 = ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  xpc_object_t v49 = &__block_descriptor_tmp_23;
  uint64_t v50 = v40;
  CFTypeRef cf = v41;
  if (v41) {
    CFRetain(v41);
  }
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v40 + 72), (uint64_t)__p);
  if (cf) {
    CFRelease(cf);
  }
  if (v41) {
    CFRelease(v41);
  }
  return a1;
}

void sub_1C577F764(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
}

void sub_1C577F800()
{
}

void sub_1C577F810()
{
}

void sub_1C577F860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void sub_1C577F88C(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void radio::HealthService::State::start(uint64_t a1, const void **a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  v4[2] = ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_23;
  unint64_t v3 = *a2;
  v4[4] = a1;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v4);
  if (cf) {
    CFRelease(cf);
  }
}

const void **ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void radio::HealthService::reportDataStats(radio::HealthService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_5_0;
    v2[4] = v1;
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void radio::HealthService::State::reportDataStats(radio::HealthService::State *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5_0;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void radio::HealthService::reset(radio::HealthService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = ___ZN5radio13HealthService5State5resetEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_6;
    v2[4] = v1;
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void radio::HealthService::State::reset(radio::HealthService::State *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio13HealthService5State5resetEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void radio::HealthService::enterLowPower(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (*(void *)a2)
    {
      std::__split_buffer<std::string>::pointer v4 = _Block_copy(*(const void **)a2);
      uint64_t v5 = *(NSObject **)(a2 + 8);
      long long v9 = v4;
      uint64_t v10 = v5;
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      std::__split_buffer<std::string>::pointer v4 = 0;
      uint64_t v5 = *(NSObject **)(a2 + 8);
      long long v9 = 0;
      uint64_t v10 = v5;
      if (v5)
      {
LABEL_4:
        dispatch_retain(v5);
        radio::HealthService::State::enterLowPower(v3, (uint64_t)&v9);
        dispatch_release(v5);
        if (!v4) {
          return;
        }
LABEL_10:
        _Block_release(v4);
        return;
      }
    }
    radio::HealthService::State::enterLowPower(v3, (uint64_t)&v9);
    if (!v4) {
      return;
    }
    goto LABEL_10;
  }
  if (*(void *)a2) {
    unint64_t v6 = _Block_copy(*(const void **)a2);
  }
  else {
    unint64_t v6 = 0;
  }
  uint64_t v7 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_34;
  if (!v6)
  {
    aBlock = 0;
    dispatch_async(v7, block);
    unint64_t v8 = aBlock;
    if (!aBlock) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  aBlock = _Block_copy(v6);
  dispatch_async(v7, block);
  unint64_t v8 = aBlock;
  if (aBlock) {
LABEL_16:
  }
    _Block_release(v8);
LABEL_17:
  if (v6) {
    _Block_release(v6);
  }
}

void radio::HealthService::State::enterLowPower(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_17;
  v7[4] = a1;
  std::__split_buffer<std::string>::pointer v4 = *(void **)a2;
  if (*(void *)a2) {
    std::__split_buffer<std::string>::pointer v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  unint64_t v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

uint64_t dispatch::callback<void({block_pointer})(void)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void radio::HealthService::exitLowPower(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (*(void *)a2)
    {
      std::__split_buffer<std::string>::pointer v4 = _Block_copy(*(const void **)a2);
      uint64_t v5 = *(NSObject **)(a2 + 8);
      long long v9 = v4;
      uint64_t v10 = v5;
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      std::__split_buffer<std::string>::pointer v4 = 0;
      uint64_t v5 = *(NSObject **)(a2 + 8);
      long long v9 = 0;
      uint64_t v10 = v5;
      if (v5)
      {
LABEL_4:
        dispatch_retain(v5);
        radio::HealthService::State::exitLowPower(v3, (uint64_t)&v9);
        dispatch_release(v5);
        if (!v4) {
          return;
        }
LABEL_10:
        _Block_release(v4);
        return;
      }
    }
    radio::HealthService::State::exitLowPower(v3, (uint64_t)&v9);
    if (!v4) {
      return;
    }
    goto LABEL_10;
  }
  if (*(void *)a2) {
    unint64_t v6 = _Block_copy(*(const void **)a2);
  }
  else {
    unint64_t v6 = 0;
  }
  uint64_t v7 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_34;
  if (!v6)
  {
    aBlock = 0;
    dispatch_async(v7, block);
    unint64_t v8 = aBlock;
    if (!aBlock) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  aBlock = _Block_copy(v6);
  dispatch_async(v7, block);
  unint64_t v8 = aBlock;
  if (aBlock) {
LABEL_16:
  }
    _Block_release(v8);
LABEL_17:
  if (v6) {
    _Block_release(v6);
  }
}

void radio::HealthService::State::exitLowPower(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_23_0;
  v7[4] = a1;
  std::__split_buffer<std::string>::pointer v4 = *(void **)a2;
  if (*(void *)a2) {
    std::__split_buffer<std::string>::pointer v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  unint64_t v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void radio::HealthService::State::~State(radio::HealthService::State *this)
{
  *(void *)this = &unk_1F20F00B0;
  uint64_t v2 = *((void *)this + 24);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v11 = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopped data reporting", v11, 2u);
      uint64_t v2 = *((void *)this + 24);
    }
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 24));
    *((void *)this + 24) = 0;
  }
  std::__tree<std::string>::destroy((uint64_t)this + 168, *((char **)this + 22));
  std::__split_buffer<std::string>::pointer v4 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 18);
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 18);
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 14);
    if (!v7) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 14);
    if (!v7) {
      goto LABEL_17;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_17:
  *(void *)this = &unk_1F20F0300;
  MEMORY[0x1C8790F40]((char *)this + 8);
  unint64_t v8 = *((void *)this + 12);
  if (v8) {
    dispatch_release(v8);
  }
  long long v9 = *((void *)this + 11);
  if (v9) {
    dispatch_release(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
}

{
  void *v1;
  uint64_t vars8;

  radio::HealthService::State::~State(this);

  operator delete(v1);
}

void radio::HealthService::State::stopDataReportingTimer_sync(radio::HealthService::State *this)
{
  uint64_t v1 = *((void *)this + 24);
  if (v1)
  {
    uint64_t v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::__split_buffer<std::string>::pointer v4 = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopped data reporting", v4, 2u);
      uint64_t v1 = *((void *)this + 24);
    }
    dispatch_source_cancel(v1);
    dispatch_release(*((dispatch_object_t *)this + 24));
    *((void *)this + 24) = 0;
  }
}

void *ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F0300;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  std::__split_buffer<std::string>::pointer v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20F0300;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  std::__split_buffer<std::string>::pointer v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *radio::HealthService::State::State(void *a1, uint64_t *a2, void *a3)
{
  *a1 = &unk_1F20F00B0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v14, "com.apple.telephony.abm", "net.health.svc");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v7 = dispatch_queue_create_with_target_V2("net.health.svc", initially_inactive, 0);
  dispatch_set_qos_class_floor(v7, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v7);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    a1[12] = 0;
    dispatch_release(v7);
  }
  else
  {
    a1[12] = 0;
  }
  *a1 = &unk_1F20F0300;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  a1[1] = &unk_1F20F0070;
  a1[7] = *a2;
  uint64_t v8 = a2[1];
  a1[8] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *a1 = &unk_1F20F03C0;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *a1 = &unk_1F20F00B0;
  a1[13] = 0;
  a1[14] = 0;
  uint64_t v9 = *a2;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  v13[0] = v9;
  v13[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NetworkStatsInterface::create(v13, a1 + 15);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  a1[17] = *a3;
  uint64_t v11 = a3[1];
  a1[18] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  a1[19] = 0;
  a1[20] = 0;
  a1[23] = 0;
  a1[24] = 0;
  a1[22] = 0;
  a1[21] = a1 + 22;
  return a1;
}

void sub_1C5780588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v10);
  ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v9);
  _Unwind_Resume(a1);
}

void sub_1C57805AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *radio::HealthService::State::getName(radio::HealthService::State *this)
{
  return "net.health.svc";
}

void ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(radio::HealthService::State **)(a1 + 32);
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 40);
  CFDictionaryRef v3 = v2;
  if (v2) {
    CFRetain(v2);
  }
  radio::HealthService::State::startDataReportingTimer_sync((uint64_t)v1, &v3);
  if (v2) {
    CFRelease(v2);
  }

  radio::HealthService::State::startDataStallReporting_sync(v1);
}

void sub_1C5780654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t radio::HealthService::State::startDataReportingTimer_sync(uint64_t a1, const __CFDictionary **a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  v15[0] = 0xAAAAAAAAAAAAAAAALL;
  v15[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v15, *a2);
  unsigned int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v15, @"DataReportingInterval");
  std::__split_buffer<std::string>::pointer v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    unsigned int v17 = Int;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Starting data reporting with interval %d millisec", buf, 8u);
  }
  uint64_t v5 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  *(void *)(a1 + 192) = v5;
  dispatch_source_set_timer(v5, 0, 1000000 * Int, 0x3B9ACA00uLL);
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v6 || (uint64_t v7 = *(void *)(a1 + 72), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v11 = *(NSObject **)(a1 + 192);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN5radio13HealthService5State28startDataReportingTimer_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  handler[3] = &__block_descriptor_tmp_7_1;
  handler[4] = a1;
  handler[5] = v7;
  long long v14 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_source_set_event_handler(v11, handler);
  radio::HealthService::State::queryAndReportDataStats_sync((radio::HealthService::State *)a1);
  dispatch_activate(*(dispatch_object_t *)(a1 + 192));
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v9);
  return MEMORY[0x1C8791160](v15);
}

void sub_1C578086C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  std::__shared_weak_count::__release_weak(v17);
  MEMORY[0x1C8791160](&a17);
  _Unwind_Resume(a1);
}

void radio::HealthService::State::startDataStallReporting_sync(radio::HealthService::State *this)
{
  CFDictionaryRef v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State28startDataStallReporting_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_11_0;
  void aBlock[4] = this;
  aBlock[5] = v3;
  long long v14 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = *((void *)this + 11);
  if (v8) {
    dispatch_retain(*((dispatch_object_t *)this + 11));
  }
  uint64_t v9 = *((void *)this + 17);
  if (v7)
  {
    uint64_t v10 = _Block_copy(v7);
    uint64_t v11 = v10;
    uint64_t v12 = v8;
    if (v8) {
      goto LABEL_9;
    }
LABEL_12:
    DataStallDetection::setCallback(v9, (uint64_t)&v11);
    if (!v10) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = v8;
  if (!v8) {
    goto LABEL_12;
  }
LABEL_9:
  dispatch_retain(v8);
  DataStallDetection::setCallback(v9, (uint64_t)&v11);
  dispatch_release(v8);
  if (v10) {
LABEL_13:
  }
    _Block_release(v10);
LABEL_14:
  if (v8) {
    dispatch_release(v8);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v5);
}

CFTypeRef __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

void ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke(uint64_t a1)
{
}

void radio::HealthService::State::queryAndReportDataStats_sync(radio::HealthService::State *this)
{
  NetworkStatsInterface::query(*((NetworkStatsInterface **)this + 15), &v5);
  long long v2 = v5;
  long long v5 = 0uLL;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 20);
  *(_OWORD *)((char *)this + 152) = v2;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    std::__split_buffer<std::string>::pointer v4 = (std::__shared_weak_count *)*((void *)&v5 + 1);
    if (!*((void *)&v5 + 1)) {
      goto LABEL_5;
    }
  }
  else
  {
    std::__split_buffer<std::string>::pointer v4 = (std::__shared_weak_count *)*((void *)&v5 + 1);
    if (!*((void *)&v5 + 1))
    {
LABEL_5:
      radio::HealthService::State::reportDataStats_sync(this);
      return;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_5;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  radio::HealthService::State::reportDataStats_sync(this);
}

void ___ZN5radio13HealthService5State5resetEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void ___ZN5radio13HealthService5State28startDataReportingTimer_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(void *a1)
{
  long long v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (radio::HealthService::State *)a1[4];
    std::__split_buffer<std::string>::pointer v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      long long v5 = v4;
      if (a1[5]) {
        radio::HealthService::State::queryAndReportDataStats_sync(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5780D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN5radio13HealthService5State28startDataStallReporting_syncEv_block_invoke(void *a1, const void **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    long long v5 = (uint64_t **)a1[4];
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5 + 21, a2, (uint64_t)a2);
        radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)v5);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C5780E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void radio::HealthService::State::reportDataStats_sync(radio::HealthService::State *this)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 19))
  {
    uint64_t v1 = (void *)*((void *)this + 19);
    uint64_t v2 = (void **)operator new(0x18uLL);
    v2[1] = 0;
    uint64_t v3 = v2 + 1;
    v2[2] = 0;
    *uint64_t v2 = v2 + 1;
    int v41 = v2;
    std::__split_buffer<std::string>::pointer v4 = (std::__shared_weak_count *)operator new(0x20uLL);
    v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F0438;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v2;
    uint64_t v42 = v4;
    long long v5 = (void *)*v1;
    long long v30 = v1 + 1;
    if ((void *)*v1 != v1 + 1)
    {
      while (1)
      {
        *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&__p[16] = v6;
        long long v39 = v6;
        *(_OWORD *)std::string __p = v6;
        LODWORD(v39) = *((_DWORD *)v5 + 8);
        __p[0] = *((unsigned char *)v5 + 48);
        *((void *)&v39 + 1) = v5[5];
        if (*((char *)v5 + 79) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v5[7], v5[8]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)(v5 + 7);
          *(void *)&__p[24] = v5[9];
        }
        unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
        int v38 = -1431655766;
        radio::HealthCommandDriver::LinkStats::LinkStats((radio::HealthCommandDriver::LinkStats *)&v37);
        unint64_t v37 = *((void *)&v39 + 1);
        if (__p[0]) {
          break;
        }
LABEL_24:
        if ((__p[31] & 0x80000000) != 0)
        {
          operator delete(*(void **)&__p[8]);
          unsigned int v17 = (void *)v5[1];
          if (v17)
          {
            do
            {
LABEL_28:
              uint64_t v18 = v17;
              unsigned int v17 = (void *)*v17;
            }
            while (v17);
            goto LABEL_4;
          }
        }
        else
        {
          unsigned int v17 = (void *)v5[1];
          if (v17) {
            goto LABEL_28;
          }
        }
        do
        {
          uint64_t v18 = (void *)v5[2];
          BOOL v19 = *v18 == (void)v5;
          long long v5 = v18;
        }
        while (!v19);
LABEL_4:
        long long v5 = v18;
        if (v18 == v30) {
          goto LABEL_33;
        }
      }
      BOOL v7 = (uint64_t *)((char *)this + 176) != std::__tree<std::string>::find<std::string>((uint64_t)this + 168, (const void **)&__p[8]);
      int v38 = v7;
      uint64_t v8 = *((void *)this + 5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109888;
        int v44 = v39;
        __int16 v45 = 1024;
        int v46 = v37;
        __int16 v47 = 1024;
        int v48 = HIDWORD(v37);
        __int16 v49 = 1024;
        BOOL v50 = v7;
        _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I Interface %u, count %u/%u, state %d", buf, 0x1Au);
        unsigned int v9 = v39;
        uint64_t v10 = *v3;
        uint64_t v11 = v2 + 1;
        uint64_t v12 = v2 + 1;
        if (*v3)
        {
          while (1)
          {
LABEL_15:
            while (1)
            {
              uint64_t v12 = (uint64_t **)v10;
              unsigned int v13 = *((_DWORD *)v10 + 7);
              if (v13 <= v9) {
                break;
              }
              uint64_t v10 = *v12;
              uint64_t v11 = v12;
              if (!*v12) {
                goto LABEL_19;
              }
            }
            if (v13 >= v9) {
              break;
            }
            uint64_t v10 = v12[1];
            if (!v10)
            {
              uint64_t v11 = v12 + 1;
              goto LABEL_19;
            }
          }
          long long v14 = v12;
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v9 = v39;
        uint64_t v10 = *v3;
        uint64_t v11 = v2 + 1;
        uint64_t v12 = v2 + 1;
        if (*v3) {
          goto LABEL_15;
        }
      }
LABEL_19:
      long long v14 = operator new(0x30uLL);
      v14[7] = v9;
      radio::HealthCommandDriver::LinkStats::LinkStats((radio::HealthCommandDriver::LinkStats *)(v14 + 8));
      *(void *)long long v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = v12;
      *uint64_t v11 = (uint64_t *)v14;
      uint64_t v15 = (void *)**v2;
      CFStringRef v16 = (uint64_t *)v14;
      if (v15)
      {
        *uint64_t v2 = v15;
        CFStringRef v16 = *v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v2[1], v16);
      v2[2] = (void *)((char *)v2[2] + 1);
LABEL_23:
      *((void *)v14 + 4) = v37;
      v14[10] = v38;
      goto LABEL_24;
    }
LABEL_33:
    xpc_object_t v20 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v20 || (uint64_t v21 = *((void *)this + 9), (v22 = std::__shared_weak_count::lock(v20)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    unint64_t v23 = v22;
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v23);
    }
    uint64_t v24 = *((void *)this + 13);
    xpc_object_t v35 = v41;
    xpc_object_t v36 = v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN5radio13HealthService5State20reportDataStats_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_15;
    void aBlock[4] = this;
    aBlock[5] = v21;
    uint64_t v32 = v23;
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v25 = _Block_copy(aBlock);
    unint64_t v26 = *((void *)this + 11);
    if (v26) {
      dispatch_retain(v26);
    }
    long long v33 = v25;
    dispatch_object_t object = v26;
    (*(void (**)(uint64_t, void ***, void **))(*(void *)v24 + 56))(v24, &v35, &v33);
    if (object) {
      dispatch_release(object);
    }
    if (v33) {
      _Block_release(v33);
    }
    xpc_object_t v27 = v36;
    if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    if (v32) {
      std::__shared_weak_count::__release_weak(v32);
    }
    std::__shared_weak_count::__release_weak(v23);
    xpc_object_t v28 = v42;
    if (v42)
    {
      if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
}

void sub_1C5781350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,char a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C57813B0(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void sub_1C57813C4(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void sub_1C57813D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  operator delete(v35);
  if (a35 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v36 - 176);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State20reportDataStats_syncEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      BOOL v7 = v6;
      if (!a1[5]) {
        goto LABEL_12;
      }
      uint64_t v8 = *a2;
      if (*a2) {
        unsigned int v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        unsigned int v9 = 0;
      }
      uint64_t v10 = *(NSObject **)(v5 + 40);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          int v11 = 138412290;
          uint64_t v12 = v8;
          _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed to update data stats:\n%@", (uint8_t *)&v11, 0xCu);
          if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            return;
          }
          goto LABEL_13;
        }
LABEL_12:
        if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
        goto LABEL_13;
      }
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_12;
      }
      LOWORD(v11) = 0;
      _os_log_debug_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEBUG, "#D Updated data stats", (uint8_t *)&v11, 2u);
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_13:
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (uint64_t v4 = *(void *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v6 = v5;
  p_shared_weak_owners = &v5->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_16_0;
  void aBlock[4] = v2;
  aBlock[5] = v4;
  CFStringRef v16 = v6;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v8 = (void *)a1[5];
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  unsigned int v9 = a1[6];
  unsigned int v17 = v8;
  dispatch_object_t v18 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  uint64_t v10 = _Block_copy(aBlock);
  int v11 = *(NSObject **)(v2 + 88);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  }
  unint64_t v19 = (unint64_t)v10;
  unint64_t v20 = (unint64_t)v11;
  uint64_t v12 = *(void *)(v2 + 104);
  if (v10)
  {
    uint64_t v13 = _Block_copy(v10);
    dispatch_object_t object = v11;
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v13 = 0;
  dispatch_object_t object = v11;
  if (v11) {
LABEL_13:
  }
    dispatch_retain(v11);
LABEL_14:
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 64))(v12, &v13);
  if (object) {
    dispatch_release(object);
  }
  if (v13) {
    _Block_release(v13);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v18) {
    dispatch_release(v18);
  }
  if (v17) {
    _Block_release(v17);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C57817F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v20 - 64);
  dispatch::callback<void({block_pointer})(void)>::~callback(v19);
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2(void *a1, uint64_t *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      BOOL v7 = v6;
      if (!a1[5])
      {
LABEL_22:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      uint64_t v8 = *a2;
      if (*a2) {
        unsigned int v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        unsigned int v9 = 0;
      }
      uint64_t v10 = *(NSObject **)(v5 + 40);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v15) = 138412290;
          *(void *)((char *)&v15 + 4) = v8;
          _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Entering Low Power Failed: %@", (uint8_t *)&v15, 0xCu);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v15) = 0;
        _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Entering Low Power complete", (uint8_t *)&v15, 2u);
      }
      int v11 = (const void *)a1[7];
      if (v11) {
        uint64_t v12 = _Block_copy(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = a1[8];
      *(void *)&long long v15 = MEMORY[0x1E4F143A8];
      *((void *)&v15 + 1) = 1174405120;
      CFStringRef v16 = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
      unsigned int v17 = &__block_descriptor_tmp_34;
      if (v12)
      {
        aBlock = _Block_copy(v12);
        dispatch_async(v13, &v15);
        long long v14 = aBlock;
        if (!aBlock)
        {
LABEL_20:
          if (v12) {
            _Block_release(v12);
          }
          goto LABEL_22;
        }
      }
      else
      {
        aBlock = 0;
        dispatch_async(v13, &v15);
        long long v14 = aBlock;
        if (!aBlock) {
          goto LABEL_20;
        }
      }
      _Block_release(v14);
      goto LABEL_20;
    }
  }
}

void sub_1C5781A48(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[7];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  long long v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (uint64_t v4 = *(void *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v6 = v5;
  p_shared_weak_owners = &v5->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_20_0;
  void aBlock[4] = v2;
  aBlock[5] = v4;
  CFStringRef v16 = v6;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v8 = (void *)a1[5];
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  unsigned int v9 = a1[6];
  unsigned int v17 = v8;
  dispatch_object_t v18 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  uint64_t v10 = _Block_copy(aBlock);
  int v11 = *(NSObject **)(v2 + 88);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  }
  unint64_t v19 = (unint64_t)v10;
  unint64_t v20 = (unint64_t)v11;
  uint64_t v12 = *(void *)(v2 + 104);
  if (v10)
  {
    uint64_t v13 = _Block_copy(v10);
    dispatch_object_t object = v11;
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v13 = 0;
  dispatch_object_t object = v11;
  if (v11) {
LABEL_13:
  }
    dispatch_retain(v11);
LABEL_14:
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 72))(v12, &v13);
  if (object) {
    dispatch_release(object);
  }
  if (v13) {
    _Block_release(v13);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v18) {
    dispatch_release(v18);
  }
  if (v17) {
    _Block_release(v17);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C5781DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v20 - 64);
  dispatch::callback<void({block_pointer})(void)>::~callback(v19);
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2(void *a1, uint64_t *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      BOOL v7 = v6;
      if (!a1[5])
      {
LABEL_22:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      uint64_t v8 = *a2;
      if (*a2) {
        unsigned int v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        unsigned int v9 = 0;
      }
      uint64_t v10 = *(NSObject **)(v5 + 40);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v15) = 138412290;
          *(void *)((char *)&v15 + 4) = v8;
          _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Exiting Low Power Failed: %@", (uint8_t *)&v15, 0xCu);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v15) = 0;
        _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Exiting Low Power complete", (uint8_t *)&v15, 2u);
      }
      int v11 = (const void *)a1[7];
      if (v11) {
        uint64_t v12 = _Block_copy(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = a1[8];
      *(void *)&long long v15 = MEMORY[0x1E4F143A8];
      *((void *)&v15 + 1) = 1174405120;
      CFStringRef v16 = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
      unsigned int v17 = &__block_descriptor_tmp_34;
      if (v12)
      {
        aBlock = _Block_copy(v12);
        dispatch_async(v13, &v15);
        long long v14 = aBlock;
        if (!aBlock)
        {
LABEL_20:
          if (v12) {
            _Block_release(v12);
          }
          goto LABEL_22;
        }
      }
      else
      {
        aBlock = 0;
        dispatch_async(v13, &v15);
        long long v14 = aBlock;
        if (!aBlock) {
          goto LABEL_20;
        }
      }
      _Block_release(v14);
      goto LABEL_20;
    }
  }
}

void sub_1C5782048(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "net.health.svc");
}

uint64_t ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F0300;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F0300;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<radio::HealthService::State *,std::shared_ptr<radio::HealthService::State> ctu::SharedSynchronizable<radio::HealthService::State>::make_shared_ptr<radio::HealthService::State>(radio::HealthService::State*)::{lambda(radio::HealthService::State *)#1},std::allocator<radio::HealthService::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::HealthService::State *,std::shared_ptr<radio::HealthService::State> ctu::SharedSynchronizable<radio::HealthService::State>::make_shared_ptr<radio::HealthService::State>(radio::HealthService::State*)::{lambda(radio::HealthService::State *)#1},std::allocator<radio::HealthService::State>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<radio::HealthService::State *,std::shared_ptr<radio::HealthService::State> ctu::SharedSynchronizable<radio::HealthService::State>::make_shared_ptr<radio::HealthService::State>(radio::HealthService::State*)::{lambda(radio::HealthService::State *)#1},std::allocator<radio::HealthService::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15make_shared_ptrIS3_EENSt3__110shared_p"
                     "trIT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15make_shared_ptrIS3_EENSt3__"
                                "110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<radio::HealthService::State> ctu::SharedSynchronizable<radio::HealthService::State>::make_shared_ptr<radio::HealthService::State>(radio::HealthService::State*)::{lambda(radio::HealthService::State*)#1}::operator() const(radio::HealthService::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(void **)(a2 + 32);
  if (result) {
    CFTypeRef result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(void *)a2);
    std::__tree<std::string>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      uint64_t v4 = a2;
    }
    else
    {
      uint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

void ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F0300;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F03F8;
  block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio13HealthService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio13HealthService5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t **std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *a2;
    }
    if (v7 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    while (1)
    {
      uint64_t v10 = (uint64_t **)v5;
      uint64_t v13 = (const void *)v5[4];
      int v11 = v5 + 4;
      uint64_t v12 = v13;
      int v14 = *((char *)v11 + 23);
      if (v14 >= 0) {
        long long v15 = v11;
      }
      else {
        long long v15 = v12;
      }
      if (v14 >= 0) {
        size_t v16 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        size_t v16 = v11[1];
      }
      if (v16 >= v9) {
        size_t v17 = v9;
      }
      else {
        size_t v17 = v16;
      }
      int v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0) {
            return v10;
          }
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        uint64_t v5 = v10[1];
        if (!v5)
        {
          long long v6 = v10 + 1;
LABEL_28:
          uint64_t v20 = operator new(0x38uLL);
          uint64_t v21 = (std::string *)(v20 + 4);
          if (*(char *)(a3 + 23) < 0) {
            goto LABEL_31;
          }
LABEL_29:
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
          v21->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16) {
          goto LABEL_22;
        }
LABEL_8:
        uint64_t v5 = *v10;
        long long v6 = v10;
        if (!*v10) {
          goto LABEL_28;
        }
      }
    }
  }
  uint64_t v10 = a1 + 1;
  uint64_t v20 = operator new(0x38uLL);
  uint64_t v21 = (std::string *)(v20 + 4);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
    goto LABEL_29;
  }
LABEL_31:
  std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
LABEL_32:
  *uint64_t v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *long long v6 = v20;
  xpc_object_t v22 = (uint64_t *)**a1;
  unint64_t v23 = v20;
  if (v22)
  {
    *a1 = v22;
    unint64_t v23 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_1C5782860(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v1[1]);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599B2BALL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599B2BALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599B2BALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599B2BALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t __cxx_global_var_init_24()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C5767000);
  }
  return result;
}

const char *asString(unsigned int a1)
{
  if (a1 > 3) {
    return "???";
  }
  else {
    return off_1E6516AF8[(char)a1];
  }
}

const char *ABMServiceManager::getName(ABMServiceManager *this)
{
  return "service.mgr";
}

uint64_t ABMServiceManager::getInitTimeoutSec(ABMServiceManager *this)
{
  return 12 * capabilities::abs::serviceInitTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getStartTimeoutSec(ABMServiceManager *this)
{
  return 30 * capabilities::abs::serviceStartTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getSleepTimeoutSec(ABMServiceManager *this)
{
  return 29 * capabilities::abs::serviceSleepTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getDefaultShutdownTimeoutSec(ABMServiceManager *this)
{
  return 5 * capabilities::abs::serviceShutdownTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getShutdownTimeoutSec(capabilities::abs *a1, int a2)
{
  if (a2 == 1) {
    return 15 * capabilities::abs::serviceShutdownTimeoutScalingFactor(a1);
  }
  if (a2)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)a1 + 112);
    return v4();
  }
  else
  {
    uint64_t IsInternalBuild = config::hw::watch(a1);
    if (IsInternalBuild
      && ((uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild(), (IsInternalBuild & 1) != 0)
       || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)))
    {
      return 120 * capabilities::abs::serviceShutdownTimeoutScalingFactor((capabilities::abs *)IsInternalBuild);
    }
    else
    {
      return 30 * capabilities::abs::serviceShutdownTimeoutScalingFactor((capabilities::abs *)IsInternalBuild);
    }
  }
}

void ABMServiceManager::ABMServiceManager(ServiceManager *a1, void *a2)
{
  *(void *)a1 = &unk_1F20F0488;
  ServiceManager::ServiceManager(a1, "service.mgr");
  *uint64_t v3 = &unk_1F20F0488;
  uint64_t v4 = a2[1];
  v3[25] = *a2;
  v3[26] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

{
  void *v3;
  uint64_t v4;

  *(void *)a1 = &unk_1F20F0488;
  ServiceManager::ServiceManager(a1, "service.mgr");
  *uint64_t v3 = &unk_1F20F0488;
  uint64_t v4 = a2[1];
  v3[25] = *a2;
  v3[26] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

double ABMServiceManager::create@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (ServiceManager *)operator new(0xD8uLL);
  uint64_t v5 = v4;
  long long v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = *a1;
  size_t v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)uint64_t v4 = &unk_1F20F0488;
  ServiceManager::ServiceManager(v4, "service.mgr");
  *(void *)uint64_t v5 = &unk_1F20F0488;
  *((void *)v5 + 25) = v8;
  *((void *)v5 + 26) = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10[0] = (ABMServiceManager *)0xAAAAAAAAAAAAAAAALL;
  v10[1] = (ABMServiceManager *)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ABMServiceManager>::shared_ptr[abi:ne180100]<ABMServiceManager,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1},void>(v10, (uint64_t)v5);
  ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v10[0]);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  ABMServiceManager::init(v10[0]);
  double result = *(double *)v10;
  *a2 = *(_OWORD *)v10;
  return result;
}

void sub_1C5782D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5782D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5782D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5782D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void ABMServiceManager::init(ABMServiceManager *this)
{
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  unint64_t v3 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v2);
    long long v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v5 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    long long v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    unint64_t v3 = off_1EBBDD2A0;
  }
  unint64_t v21 = v3;
  unint64_t v22 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (!v3)
  {
    size_t v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C5767000, v9, OS_LOG_TYPE_ERROR, "Unable to access CommandDriverFactory. BasebandManager registry will not be set in command drivers!", buf, 2u);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
      if (!v8) {
        goto LABEL_36;
      }
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v8) {
      goto LABEL_36;
    }
    goto LABEL_20;
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 26);
  uint64_t v19 = *((void *)this + 25);
  uint64_t v20 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CommandDriverFactory::setRegistry();
  if (!v20 || atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v8) {
LABEL_36:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_20:
  uint64_t v10 = *((void *)this + 9);
  int v11 = std::__shared_weak_count::lock(v8);
  if (!v11) {
    goto LABEL_36;
  }
  uint64_t v12 = v11;
  uint64_t v16 = v10;
  size_t v17 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v12);
  }
  PowerManager::create(&v16, buf);
  long long v18 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  ServiceManager::init(this, (uint64_t *)&v18);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  int v14 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v15 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v22 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1C5783114(_Unwind_Exception *a1)
{
}

void sub_1C5783130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1C578314C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15 - 48);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ABMServiceManager::registerGlobalServices(ABMServiceManager *this)
{
  unint64_t v3 = this;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager22registerGlobalServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  void block[4] = (char *)this + 72;
  block[5] = &v3;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ABMServiceManager::registerDynamicServices(ABMServiceManager *this)
{
  unint64_t v3 = this;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager23registerDynamicServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  void block[4] = (char *)this + 72;
  block[5] = &v3;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ABMServiceManager::~ABMServiceManager(std::__shared_weak_count **this)
{
  uint64_t v1 = (ABMServiceManager *)this;
  *this = (std::__shared_weak_count *)&unk_1F20F0488;
  uint64_t v2 = this[26];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  ServiceManager::~ServiceManager((ServiceManager *)this);
}

void ABMServiceManager::~ABMServiceManager(ABMServiceManager *this)
{
  *(void *)this = &unk_1F20F0488;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    ServiceManager::~ServiceManager(this);
  }
  else
  {
    ServiceManager::~ServiceManager(this);
  }
  operator delete(v3);
}

uint64_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    unint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5783714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5783730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<ABMServiceManager>::shared_ptr[abi:ne180100]<ABMServiceManager,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F0530;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C578385C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1}::operator() const(ABMServiceManager*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5783884(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110share"
                     "d_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt"
                                "3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1}::operator() const(ABMServiceManager*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager22registerGlobalServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  unint64_t v3 = *(std::__shared_weak_count **)(*v1 + 80);
  if (!v3) {
    goto LABEL_53;
  }
  uint64_t v4 = *(void *)(v2 + 72);
  size_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    goto LABEL_53;
  }
  uint64_t v6 = v5;
  uint64_t v41 = v4;
  uint64_t v42 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  LogTracker::create(&v41, &v43);
  uint64_t v7 = v43;
  if (v43)
  {
    uint64_t v8 = v44;
    __int16 v45 = v43;
    int v46 = v44;
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v9 = *(NetworkingModule ***)(v2 + 128);
    if ((unint64_t)v9 >= *(void *)(v2 + 136))
    {
      uint64_t v10 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 120), (uint64_t)&v45);
      int v11 = v46;
      *(void *)(v2 + 128) = v10;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      *size_t v9 = v7;
      v9[1] = (NetworkingModule *)v8;
      *(void *)(v2 + 128) = v9 + 2;
    }
  }
  uint64_t v12 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v13) {
    goto LABEL_53;
  }
  uint64_t v14 = *(void *)(v2 + 72);
  uint64_t v15 = std::__shared_weak_count::lock(v13);
  if (!v15) {
    goto LABEL_53;
  }
  uint64_t v16 = v15;
  uint64_t v37 = v14;
  int v38 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v16);
  }
  CPMSModule::create(&v37, &v39);
  size_t v17 = v39;
  if (v39)
  {
    long long v18 = v40;
    __int16 v45 = v39;
    int v46 = v40;
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = *(NetworkingModule ***)(v2 + 128);
    if ((unint64_t)v19 >= *(void *)(v2 + 136))
    {
      uint64_t v20 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 120), (uint64_t)&v45);
      unint64_t v21 = v46;
      *(void *)(v2 + 128) = v20;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    else
    {
      std::__shared_weak_count *v19 = v17;
      v19[1] = (NetworkingModule *)v18;
      *(void *)(v2 + 128) = v19 + 2;
    }
  }
  unint64_t v22 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  unint64_t v23 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v23 || (v24 = *(void *)(v2 + 72), (xpc_object_t v25 = std::__shared_weak_count::lock(v23)) == 0)) {
LABEL_53:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  unint64_t v26 = v25;
  uint64_t v33 = v24;
  int v34 = v25;
  atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v26);
  }
  NetworkingModule::create(&v33, &v35);
  xpc_object_t v27 = v35;
  if (v35)
  {
    xpc_object_t v28 = (NetworkingModule *)v36;
    __int16 v45 = v35;
    int v46 = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v29 = *(NetworkingModule ***)(v2 + 128);
    if ((unint64_t)v29 >= *(void *)(v2 + 136))
    {
      long long v30 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 120), (uint64_t)&v45);
      uint64_t v31 = v46;
      *(void *)(v2 + 128) = v30;
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
      std::__shared_weak_count_vtbl *v29 = v27;
      v29[1] = v28;
      *(void *)(v2 + 128) = v29 + 2;
    }
  }
  uint64_t v32 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  if (v34) {
    std::__shared_weak_count::__release_weak(v34);
  }
}

void sub_1C5783DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20 = *(std::__shared_weak_count **)(v18 - 40);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (a12 && !atomic_fetch_add(&a12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>(char **a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 4;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = a1[2] - *a1;
  if (v5 >> 3 > v3) {
    unint64_t v3 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v3;
  }
  if (v7 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v9 = 16 * v7;
  uint64_t v10 = (char *)operator new(16 * v7);
  int v11 = &v10[16 * v2];
  *(_OWORD *)int v11 = *(_OWORD *)a2;
  uint64_t v12 = v11 + 16;
  uint64_t v13 = &v10[v9];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 1);
      v15 -= 16;
      *((_OWORD *)v11 - 1) = v16;
      v11 -= 16;
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = 0;
    }
    while (v15 != v14);
    uint64_t v15 = *a1;
    size_t v17 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    for (a1[2] = v13; v17 != v15; v17 -= 16)
    {
      uint64_t v18 = (std::__shared_weak_count *)*((void *)v17 - 1);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v12;
}

void ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager23registerDynamicServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  unint64_t v3 = *(std::__shared_weak_count **)(*v1 + 80);
  if (!v3) {
    goto LABEL_239;
  }
  uint64_t v4 = *(void *)(v2 + 72);
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    goto LABEL_239;
  }
  BOOL v6 = v5;
  uint64_t v191 = v4;
  v192 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  unint64_t v7 = *(std::__shared_weak_count **)(v2 + 208);
  uint64_t v189 = *(void *)(v2 + 200);
  v190 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TransportModule::create(&v191, &v189, &v193);
  uint64_t v8 = v193;
  if (v193)
  {
    uint64_t v9 = v194;
    v195 = v193;
    v196 = v194;
    if (v194) {
      atomic_fetch_add_explicit(&v194->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *(uint64_t ***)(v2 + 152);
    if ((unint64_t)v10 >= *(void *)(v2 + 160))
    {
      int v11 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v195);
      uint64_t v12 = v196;
      *(void *)(v2 + 152) = v11;
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    else
    {
      *uint64_t v10 = v8;
      v10[1] = (uint64_t *)v9;
      *(void *)(v2 + 152) = v10 + 2;
    }
  }
  uint64_t v13 = v194;
  if (v194 && !atomic_fetch_add(&v194->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v190;
  if (v190 && !atomic_fetch_add(&v190->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v192) {
    std::__shared_weak_count::__release_weak(v192);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v15) {
    goto LABEL_239;
  }
  uint64_t v16 = *(void *)(v2 + 72);
  size_t v17 = std::__shared_weak_count::lock(v15);
  if (!v17) {
    goto LABEL_239;
  }
  uint64_t v18 = v17;
  uint64_t v185 = v16;
  uint64_t v186 = v17;
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
  }
  RadioModule::create(&v185, &v187);
  uint64_t v19 = v187;
  if (v187)
  {
    uint64_t v20 = v188;
    v195 = v187;
    v196 = v188;
    if (v188) {
      atomic_fetch_add_explicit(&v188->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v21 = *(uint64_t ***)(v2 + 152);
    if ((unint64_t)v21 >= *(void *)(v2 + 160))
    {
      unint64_t v22 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v195);
      unint64_t v23 = v196;
      *(void *)(v2 + 152) = v22;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    else
    {
      std::__shared_weak_count *v21 = v19;
      v21[1] = (uint64_t *)v20;
      *(void *)(v2 + 152) = v21 + 2;
    }
  }
  uint64_t v24 = v188;
  if (v188 && !atomic_fetch_add(&v188->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v186) {
    std::__shared_weak_count::__release_weak(v186);
  }
  xpc_object_t v25 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v25) {
    goto LABEL_239;
  }
  uint64_t v26 = *(void *)(v2 + 72);
  xpc_object_t v27 = std::__shared_weak_count::lock(v25);
  if (!v27) {
    goto LABEL_239;
  }
  xpc_object_t v28 = v27;
  uint64_t v181 = v26;
  CFDictionaryRef v182 = v27;
  atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v28);
  }
  Simulator::create(&v181, &v183);
  unint64_t v29 = v183;
  if (v183)
  {
    long long v30 = v184;
    v195 = v183;
    v196 = v184;
    if (v184) {
      atomic_fetch_add_explicit(&v184->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v31 = *(uint64_t ***)(v2 + 152);
    if ((unint64_t)v31 >= *(void *)(v2 + 160))
    {
      uint64_t v32 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v195);
      uint64_t v33 = v196;
      *(void *)(v2 + 152) = v32;
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *uint64_t v31 = v29;
      v31[1] = (uint64_t *)v30;
      *(void *)(v2 + 152) = v31 + 2;
    }
  }
  int v34 = v184;
  if (v184 && !atomic_fetch_add(&v184->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  if (v182) {
    std::__shared_weak_count::__release_weak(v182);
  }
  xpc_object_t v35 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v35) {
    goto LABEL_239;
  }
  uint64_t v36 = *(void *)(v2 + 72);
  uint64_t v37 = std::__shared_weak_count::lock(v35);
  if (!v37) {
    goto LABEL_239;
  }
  int v38 = v37;
  uint64_t v177 = v36;
  v178 = v37;
  atomic_fetch_add_explicit(&v37->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v38);
  }
  TraceManager::create(&v177, (uint64_t *)&v179);
  uint64_t v39 = (uint64_t)v179;
  if (v179)
  {
    uint64_t v40 = v180;
    v195 = v179;
    v196 = v180;
    if (v180) {
      atomic_fetch_add_explicit(&v180->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v41 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v41 >= *(void *)(v2 + 160))
    {
      uint64_t v42 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v195);
      xpc_object_t v43 = v196;
      *(void *)(v2 + 152) = v42;
      if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    else
    {
      *uint64_t v41 = v39;
      v41[1] = (uint64_t)v40;
      *(void *)(v2 + 152) = v41 + 2;
    }
  }
  int v44 = v180;
  if (v180 && !atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  if (v178) {
    std::__shared_weak_count::__release_weak(v178);
  }
  __int16 v45 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v45 || (v46 = *(void *)(v2 + 72), (__int16 v47 = std::__shared_weak_count::lock(v45)) == 0)) {
LABEL_239:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  int v48 = v47;
  uint64_t v173 = v46;
  CFMutableDictionaryRef v174 = v47;
  atomic_fetch_add_explicit(&v47->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v48);
  }
  AWDModule::create(&v173, &v175);
  __int16 v49 = v175;
  if (v175)
  {
    BOOL v50 = v176;
    v195 = v175;
    v196 = v176;
    if (v176) {
      atomic_fetch_add_explicit(&v176->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v51 = *(uint64_t ***)(v2 + 152);
    if ((unint64_t)v51 >= *(void *)(v2 + 160))
    {
      uint64_t v52 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v195);
      int v53 = v196;
      *(void *)(v2 + 152) = v52;
      if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    else
    {
      const void *v51 = v49;
      v51[1] = (uint64_t *)v50;
      *(void *)(v2 + 152) = v51 + 2;
    }
  }
  uint64_t v54 = v176;
  if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
  uint64_t v55 = (config::hw *)v174;
  if (v174) {
    std::__shared_weak_count::__release_weak(v174);
  }
  BOOL v56 = (capabilities::abs *)config::hw::watch(v55);
  if ((v56 & 1) == 0)
  {
    CFTypeID v57 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v57) {
      goto LABEL_239;
    }
    uint64_t v58 = *(void *)(v2 + 72);
    long long v59 = std::__shared_weak_count::lock(v57);
    if (!v59) {
      goto LABEL_239;
    }
    CFArrayRef v60 = v59;
    uint64_t v169 = v58;
    uint64_t v170 = v59;
    atomic_fetch_add_explicit(&v59->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v60);
    }
    HealthModule::create(&v169, &v171);
    CFArrayRef v61 = v171;
    if (v171)
    {
      xpc_object_t v62 = v172;
      v195 = v171;
      v196 = v172;
      if (v172) {
        atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      xpc_object_t v63 = *(uint64_t ***)(v2 + 152);
      if ((unint64_t)v63 >= *(void *)(v2 + 160))
      {
        xpc_object_t v64 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v195);
        CFArrayRef v65 = v196;
        *(void *)(v2 + 152) = v64;
        if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      else
      {
        *xpc_object_t v63 = v61;
        v63[1] = (uint64_t *)v62;
        *(void *)(v2 + 152) = v63 + 2;
      }
    }
    CFArrayRef v66 = v172;
    if (v172 && !atomic_fetch_add(&v172->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
    BOOL v56 = (capabilities::abs *)v170;
    if (v170) {
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  capabilities::abs::supportedSARFeatures(v56);
  if (capabilities::abs::operator&())
  {
    CFMutableArrayRef v67 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v67) {
      goto LABEL_239;
    }
    uint64_t v68 = *(void *)(v2 + 72);
    xpc_object_t v69 = std::__shared_weak_count::lock(v67);
    if (!v69) {
      goto LABEL_239;
    }
    CFArrayRef v70 = v69;
    uint64_t v165 = v68;
    CFMutableDictionaryRef v166 = v69;
    atomic_fetch_add_explicit(&v69->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v70);
    }
    AntennaModule::create(&v165, &v167);
    CFArrayRef v71 = v167;
    if (v167)
    {
      CFDataRef v72 = (NSObject **)v168;
      v195 = (uint64_t *)v167;
      v196 = v168;
      if (v168) {
        atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CFDataRef v73 = *(NSObject ****)(v2 + 152);
      if ((unint64_t)v73 >= *(void *)(v2 + 160))
      {
LABEL_128:
        CFRange v78 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v195);
        xpc_object_t v79 = v196;
        *(void *)(v2 + 152) = v78;
        if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
        goto LABEL_131;
      }
LABEL_127:
      *CFDataRef v73 = v71;
      v73[1] = v72;
      *(void *)(v2 + 152) = v73 + 2;
    }
  }
  else
  {
    xpc_object_t v74 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v74) {
      goto LABEL_239;
    }
    uint64_t v75 = *(void *)(v2 + 72);
    CFArrayRef v76 = std::__shared_weak_count::lock(v74);
    if (!v76) {
      goto LABEL_239;
    }
    CFRange v77 = v76;
    uint64_t v165 = v75;
    CFMutableDictionaryRef v166 = v76;
    atomic_fetch_add_explicit(&v76->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v77);
    }
    SARModule::create(&v165, (SARModule **)&v167);
    CFArrayRef v71 = v167;
    if (v167)
    {
      CFDataRef v72 = (NSObject **)v168;
      v195 = (uint64_t *)v167;
      v196 = v168;
      if (v168) {
        atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CFDataRef v73 = *(NSObject ****)(v2 + 152);
      if ((unint64_t)v73 >= *(void *)(v2 + 160)) {
        goto LABEL_128;
      }
      goto LABEL_127;
    }
  }
LABEL_131:
  CFArrayRef v80 = v168;
  if (v168 && !atomic_fetch_add(&v168->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
  if (v166) {
    std::__shared_weak_count::__release_weak(v166);
  }
  CFArrayRef v81 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v81) {
    goto LABEL_239;
  }
  uint64_t v82 = *(void *)(v2 + 72);
  CFMutableDictionaryRef v83 = std::__shared_weak_count::lock(v81);
  if (!v83) {
    goto LABEL_239;
  }
  xpc_object_t v84 = v83;
  uint64_t v161 = v82;
  CFMutableDictionaryRef v162 = v83;
  atomic_fetch_add_explicit(&v83->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v84);
  }
  StatsModule::create(&v161, (uint64_t *)&v163);
  uint64_t v85 = (uint64_t)v163;
  if (v163)
  {
    CFArrayRef v86 = v164;
    v195 = v163;
    v196 = v164;
    if (v164) {
      atomic_fetch_add_explicit(&v164->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v87 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v87 >= *(void *)(v2 + 160))
    {
      size_t v88 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v195);
      xpc_object_t v89 = v196;
      *(void *)(v2 + 152) = v88;
      if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    else
    {
      *size_t v87 = v85;
      v87[1] = (uint64_t)v86;
      *(void *)(v2 + 152) = v87 + 2;
    }
  }
  CFArrayRef v90 = v164;
  if (v164 && !atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
  }
  if (v162) {
    std::__shared_weak_count::__release_weak(v162);
  }
  CFArrayRef v91 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v91) {
    goto LABEL_239;
  }
  uint64_t v92 = *(void *)(v2 + 72);
  uint64_t v93 = std::__shared_weak_count::lock(v91);
  if (!v93) {
    goto LABEL_239;
  }
  xpc_object_t v94 = v93;
  uint64_t v157 = v92;
  xpc_object_t v158 = v93;
  atomic_fetch_add_explicit(&v93->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v94);
  }
  FSModule::create(&v157, (uint64_t *)&v159);
  uint64_t v95 = (uint64_t)v159;
  if (v159)
  {
    CFArrayRef v96 = v160;
    v195 = v159;
    v196 = v160;
    if (v160) {
      atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v97 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v97 >= *(void *)(v2 + 160))
    {
      uint64_t v98 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v195);
      xpc_object_t v99 = v196;
      *(void *)(v2 + 152) = v98;
      if (v99 && !atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    else
    {
      *uint64_t v97 = v95;
      v97[1] = (uint64_t)v96;
      *(void *)(v2 + 152) = v97 + 2;
    }
  }
  CFArrayRef v100 = v160;
  if (v160 && !atomic_fetch_add(&v160->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
    std::__shared_weak_count::__release_weak(v100);
  }
  if (v158) {
    std::__shared_weak_count::__release_weak(v158);
  }
  CFArrayRef v101 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v101) {
    goto LABEL_239;
  }
  uint64_t v102 = *(void *)(v2 + 72);
  v103 = std::__shared_weak_count::lock(v101);
  if (!v103) {
    goto LABEL_239;
  }
  xpc_object_t v104 = v103;
  uint64_t v153 = v102;
  CFMutableDictionaryRef v154 = v103;
  atomic_fetch_add_explicit(&v103->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v104);
  }
  BootModule::create(&v153, &v155);
  uint64_t v105 = v155;
  if (v155)
  {
    CFDictionaryRef v106 = v156;
    v195 = v155;
    v196 = v156;
    if (v156) {
      atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v107 = *(uint64_t ***)(v2 + 152);
    if ((unint64_t)v107 >= *(void *)(v2 + 160))
    {
      size_t v108 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v195);
      int v109 = v196;
      *(void *)(v2 + 152) = v108;
      if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    else
    {
      *size_t v107 = v105;
      v107[1] = (uint64_t *)v106;
      *(void *)(v2 + 152) = v107 + 2;
    }
  }
  CFTypeID v110 = v156;
  if (v156 && !atomic_fetch_add(&v156->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
    std::__shared_weak_count::__release_weak(v110);
  }
  if (v154) {
    std::__shared_weak_count::__release_weak(v154);
  }
  CFNumberRef v111 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v111) {
    goto LABEL_239;
  }
  uint64_t v112 = *(void *)(v2 + 72);
  uint64_t v113 = std::__shared_weak_count::lock(v111);
  if (!v113) {
    goto LABEL_239;
  }
  xpc_object_t v114 = v113;
  uint64_t v149 = v112;
  CFMutableDictionaryRef v150 = v113;
  atomic_fetch_add_explicit(&v113->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
    std::__shared_weak_count::__release_weak(v114);
  }
  DataModule::create((capabilities::radio *)&v149, &v151);
  int v115 = v151;
  if (v151)
  {
    CFArrayRef v116 = (uint64_t *)v152;
    v195 = v151;
    v196 = v152;
    if (v152) {
      atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v117 = *(uint64_t ***)(v2 + 152);
    if ((unint64_t)v117 >= *(void *)(v2 + 160))
    {
      uint64_t v118 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v195);
      CFArrayRef v119 = v196;
      *(void *)(v2 + 152) = v118;
      if (v119 && !atomic_fetch_add(&v119->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    else
    {
      *uint64_t v117 = v115;
      v117[1] = v116;
      *(void *)(v2 + 152) = v117 + 2;
    }
  }
  v120 = v152;
  if (v152 && !atomic_fetch_add(&v152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
    std::__shared_weak_count::__release_weak(v120);
  }
  if (v150) {
    std::__shared_weak_count::__release_weak(v150);
  }
  CFTypeRef v121 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v121) {
    goto LABEL_239;
  }
  uint64_t v122 = *(void *)(v2 + 72);
  unsigned int v123 = std::__shared_weak_count::lock(v121);
  if (!v123) {
    goto LABEL_239;
  }
  unsigned int v124 = v123;
  uint64_t v145 = v122;
  uint64_t v146 = v123;
  atomic_fetch_add_explicit(&v123->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
    std::__shared_weak_count::__release_weak(v124);
  }
  AccessoryModule::create((capabilities::abs *)&v145, &v147);
  unsigned int v125 = v147;
  if (v147)
  {
    xpc_object_t v126 = v148;
    v195 = (uint64_t *)v147;
    v196 = v148;
    if (v148) {
      atomic_fetch_add_explicit(&v148->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v127 = *(std::__shared_weak_count_vtbl ***)(v2 + 152);
    if ((unint64_t)v127 >= *(void *)(v2 + 160))
    {
      xpc_object_t v128 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v195);
      int v129 = v196;
      *(void *)(v2 + 152) = v128;
      if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    else
    {
      *uint64_t v127 = v125;
      v127[1] = (std::__shared_weak_count_vtbl *)v126;
      *(void *)(v2 + 152) = v127 + 2;
    }
  }
  xpc_object_t v130 = v148;
  if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
    std::__shared_weak_count::__release_weak(v130);
  }
  if (v146) {
    std::__shared_weak_count::__release_weak(v146);
  }
  uint64_t v131 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v131) {
    goto LABEL_239;
  }
  uint64_t v132 = *(void *)(v2 + 72);
  CFAllocatorRef v133 = std::__shared_weak_count::lock(v131);
  if (!v133) {
    goto LABEL_239;
  }
  xpc_object_t v134 = v133;
  uint64_t v141 = v132;
  xpc_object_t v142 = v133;
  atomic_fetch_add_explicit(&v133->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v133->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
    std::__shared_weak_count::__release_weak(v134);
  }
  coex::Module::create(&v141, &v143);
  unsigned int v135 = v143;
  if (v143)
  {
    xpc_object_t v136 = (capabilities::abs *)v144;
    v195 = (uint64_t *)v143;
    v196 = v144;
    if (v144) {
      atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v137 = *(capabilities::abs ***)(v2 + 152);
    if ((unint64_t)v137 >= *(void *)(v2 + 160))
    {
      xpc_object_t v138 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v195);
      uint64_t v139 = v196;
      *(void *)(v2 + 152) = v138;
      if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    else
    {
      *unsigned int v137 = v135;
      v137[1] = v136;
      *(void *)(v2 + 152) = v137 + 2;
    }
  }
  xpc_object_t v140 = v144;
  if (v144 && !atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
    std::__shared_weak_count::__release_weak(v140);
  }
  if (v142) {
    std::__shared_weak_count::__release_weak(v142);
  }
}

void sub_1C5785428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v42 = *(std::__shared_weak_count **)(v40 - 40);
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  if (a36 && !atomic_fetch_add(&a36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a36->__on_zero_shared)(a36);
    std::__shared_weak_count::__release_weak(a36);
  }
  if (a34) {
    std::__shared_weak_count::__release_weak(a34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_7()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C5767000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_8()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C5767000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C5767000);
  }
  return result;
}

BOOL BasebandStats::initFromDisk(BasebandStats *this)
{
  uint64_t v24 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v2 = off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(__p);
    long long v3 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD340;
  }
  BOOL v6 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  char v23 = 13;
  strcpy((char *)__p, "HealthEventDB");
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(void, uint64_t))v2, (const char *)__p, &v24);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    unint64_t v7 = v24;
    if (v24) {
      goto LABEL_16;
    }
    return 0;
  }
  unint64_t v7 = v24;
  if (!v24) {
    return 0;
  }
LABEL_16:
  v21[4] = v7;
  CFRetain(v7);
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)__p, (const __CFDictionary *)v7);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v21, "KeyBasebandStats");
  uint64_t v8 = (__CFString *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)__p, v21[0]);
  MEMORY[0x1C8791110](v21);
  v21[3] = v8;
  if (v8) {
    uint64_t v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v9 = 0;
  }
  BOOL v10 = v9 != 0;
  if (v9)
  {
    v21[2] = v8;
    if (v8) {
      CFRetain(v8);
    }
    v21[0] = (__CFString *)0xAAAAAAAAAAAAAAAALL;
    v21[1] = (__CFString *)0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v21, (const __CFDictionary *)v8);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v25, (const char *)*MEMORY[0x1E4F4CF20]);
    int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v21, v25);
    uint64_t v12 = (ctu::cf::MakeCFString *)MEMORY[0x1C8791110](&v25);
    *((void *)this + 1) = Int;
    ctu::cf::MakeCFString::MakeCFString(v12, (const char *)*MEMORY[0x1E4F4CF78]);
    int v13 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v21, v25);
    uint64_t v14 = (ctu::cf::MakeCFString *)MEMORY[0x1C8791110](&v25);
    *((void *)this + 2) = v13;
    ctu::cf::MakeCFString::MakeCFString(v14, (const char *)*MEMORY[0x1E4F4CD70]);
    int v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v21, v25);
    uint64_t v16 = (ctu::cf::MakeCFString *)MEMORY[0x1C8791110](&v25);
    *((_DWORD *)this + 8) = v15;
    ctu::cf::MakeCFString::MakeCFString(v16, (const char *)*MEMORY[0x1E4F4CD78]);
    int v17 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v21, v25);
    uint64_t v18 = (ctu::cf::MakeCFString *)MEMORY[0x1C8791110](&v25);
    *((_DWORD *)this + 9) = v17;
    ctu::cf::MakeCFString::MakeCFString(v18, (const char *)*MEMORY[0x1E4F4CE98]);
    unsigned int v19 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v21, v25);
    MEMORY[0x1C8791110](&v25);
    *((void *)this + 3) = v19;
    MEMORY[0x1C8791160](v21);
    if (v8) {
      CFRelease(v8);
    }
  }
  if (v8) {
    CFRelease(v8);
  }
  MEMORY[0x1C8791160](__p);
  CFRelease(v7);
  return v10;
}

void sub_1C5786134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v7 = va_arg(va2, const void *);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, const void *);
  va_copy(va4, va3);
  int v11 = va_arg(va4, const void *);
  MEMORY[0x1C8791110](v2 - 56);
  MEMORY[0x1C8791160]((uint64_t *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va2);
  MEMORY[0x1C8791160](va4);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va3);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void BasebandStats::updateStats(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, __CFDictionary **a3@<X8>)
{
  uint64_t v6 = (const char *)*MEMORY[0x1E4F4CF20];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CF20]))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, v6);
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(void *)(a1 + 8) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    if (!*(void *)(a1 + 24)) {
      *(void *)(a1 + 24) = *(void *)(a1 + 8);
    }
  }
  uint64_t v8 = (const char *)*MEMORY[0x1E4F4CF78];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CF78]))
  {
    xpc_object_t v9 = xpc_dictionary_get_value(*a2, v8);
    xpc_object_t object = v9;
    if (v9) {
      xpc_retain(v9);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(void *)(a1 + 16) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  BOOL v10 = (const char *)*MEMORY[0x1E4F4CD70];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CD70]))
  {
    xpc_object_t v11 = xpc_dictionary_get_value(*a2, v10);
    xpc_object_t object = v11;
    if (v11) {
      xpc_retain(v11);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a1 + 32) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  uint64_t v12 = (const char *)*MEMORY[0x1E4F4CD78];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CD78]))
  {
    xpc_object_t v13 = xpc_dictionary_get_value(*a2, v12);
    xpc_object_t object = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a1 + 36) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  uint64_t v14 = (const char *)*MEMORY[0x1E4F4CE98];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CE98]))
  {
    xpc_object_t v15 = xpc_dictionary_get_value(*a2, v14);
    xpc_object_t object = v15;
    if (v15) {
      xpc_retain(v15);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(void *)(a1 + 24) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  BasebandStats::getCurrentBasebandStats((BasebandStats *)a1, a3);
}

void sub_1C578642C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void BasebandStats::getCurrentBasebandStats(BasebandStats *this@<X0>, __CFDictionary **a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  unint64_t v7 = Mutable;
  if (Mutable)
  {
    ctu::cf::update<char const*,long>(Mutable, (const __CFString **)*MEMORY[0x1E4F4CF20], *((const void **)this + 1), v4, v6);
    ctu::cf::update<char const*,long>(v7, (const __CFString **)*MEMORY[0x1E4F4CF78], *((const void **)this + 2), v4, v8);
    ctu::cf::update<char const*,unsigned int>(v7, (const __CFString **)*MEMORY[0x1E4F4CD70], *((_DWORD *)this + 8), v4, v9);
    ctu::cf::update<char const*,unsigned int>(v7, (const __CFString **)*MEMORY[0x1E4F4CD78], *((_DWORD *)this + 9), v4, v10);
    ctu::cf::update<char const*,long>(v7, (const __CFString **)*MEMORY[0x1E4F4CE98], *((const void **)this + 3), v4, v11);
    CFTypeID v12 = CFGetTypeID(v7);
    if (v12 == CFDictionaryGetTypeID())
    {
      *a2 = v7;
      CFRetain(v7);
    }
    else
    {
      *a2 = 0;
    }
    CFRelease(v7);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1C5786604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void SharedData::create_default_global(void *a1@<X8>)
{
  std::string __p = operator new(0x60uLL);
  strcpy((char *)__p, "/private/var/wireless/Library/Preferences/com.apple.AppleBasebandManager.Statistics.plist");
  v3.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v3.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v10.st_blksize = v3;
  *(timespec *)v10.st_qspare = v3;
  v10.st_birthtimespec = v3;
  *(timespec *)&v10.st_size = v3;
  v10.st_mtimespec = v3;
  v10.st_ctimespec = v3;
  *(timespec *)&v10.st_uid = v3;
  v10.st_atimespec = v3;
  long long v9 = xmmword_1C599B4A0;
  *(timespec *)&v10.st_dev = v3;
  if (!stat((const char *)__p, &v10))
  {
    uint64_t v5 = v9 >= 0 ? (const std::__fs::filesystem::path *)&__p : (const std::__fs::filesystem::path *)__p;
    if (remove(v5, v4))
    {
      if (v9 >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      unlink(p_p);
    }
  }
  unint64_t v7 = operator new(0x30uLL);
  MEMORY[0x1C8791170](v7, @"com.apple.AppleBasebandManager.data", *MEMORY[0x1E4F1D3F0]);
  v7[3] = 0;
  v7[4] = 0;
  *((_DWORD *)v7 + 10) = 0;
  std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(a1, (uint64_t)v7);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void sub_1C5786774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  CFAllocatorRef v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F05E0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (a2)
  {
    CFAllocatorRef v6 = *(std::__shared_weak_count **)(a2 + 32);
    if (v6)
    {
      if (v6->__shared_owners_ == -1)
      {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        *(void *)(a2 + 24) = a2;
        *(void *)(a2 + 32) = v4;
        std::__shared_weak_count::__release_weak(v6);
        if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 24) = a2;
      *(void *)(a2 + 32) = v4;
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_7:
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return a1;
}

void sub_1C57868D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    timespec v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    CFAllocatorRef v4 = (void *)MEMORY[0x1C8791180](v2);
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    timespec v3 = (void *)MEMORY[0x1C8791180](v1);
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599B549) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599B549 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599B549)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599B549 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

BOOL Preferences::getPreference<__CFDictionary const*>(uint64_t (***a1)(void, uint64_t), const char *a2, void *a3)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  uint64_t v5 = (const void *)(**a1)(a1, v11);
  CFAllocatorRef v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    BOOL v8 = v7 == CFDictionaryGetTypeID();
    BOOL v9 = v8;
    if (v8) {
      *a3 = v6;
    }
    CFRelease(v6);
  }
  else
  {
    BOOL v9 = 0;
  }
  MEMORY[0x1C8791110](&v11);
  return v9;
}

uint64_t ctu::cf::update<char const*,long>(__CFDictionary *a1, const __CFString **a2, const void *a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  uint64_t valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  BOOL v8 = valuePtr;
  uint64_t valuePtr = a3;
  CFNumberRef v9 = CFNumberCreate(a4, kCFNumberLongType, &valuePtr);
  CFNumberRef v10 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v12 = !v11;
  if (v11)
  {
    if (!v9) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_11:
  if (v8) {
    CFRelease(v8);
  }
  return v12;
}

void sub_1C5786CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5786CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t ctu::cf::update<char const*,unsigned int>(__CFDictionary *a1, const __CFString **a2, unsigned int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  unint64_t valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  BOOL v8 = (const void *)valuePtr;
  unint64_t valuePtr = a3;
  CFNumberRef v9 = CFNumberCreate(a4, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v10 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v12 = !v11;
  if (v11)
  {
    if (!v9) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_11:
  if (v8) {
    CFRelease(v8);
  }
  return v12;
}

void sub_1C5786DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5786DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_0()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C5767000);
  }
  return result;
}

BOOL CommCenterStats::initFromDisk(CommCenterStats *this)
{
  uint64_t v18 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v2 = off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(__p);
    long long v3 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    CFAllocatorRef v4 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD340;
  }
  CFAllocatorRef v6 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  char v17 = 13;
  strcpy((char *)__p, "HealthEventDB");
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(void, uint64_t))v2, (const char *)__p, &v18);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    CFTypeID v7 = v18;
    if (v18)
    {
LABEL_16:
      v15[4] = v7;
      CFRetain(v7);
      __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)__p, (const __CFDictionary *)v7);
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v15, "KeyCommCenterStats");
      BOOL v8 = (__CFString *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)__p, v15[0]);
      MEMORY[0x1C8791110](v15);
      v15[3] = v8;
      if (v8) {
        CFNumberRef v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        CFNumberRef v9 = 0;
      }
      BOOL v10 = v9 != 0;
      if (v9)
      {
        void v15[2] = v8;
        if (v8) {
          CFRetain(v8);
        }
        v15[0] = (__CFString *)0xAAAAAAAAAAAAAAAALL;
        v15[1] = (__CFString *)0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v15, (const __CFDictionary *)v8);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v19, "KeyCommCenterStatsLaunchCount");
        int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v15, v19);
        uint64_t v12 = (ctu::cf::MakeCFString *)MEMORY[0x1C8791110](&v19);
        *((_DWORD *)this + 2) = Int;
        ctu::cf::MakeCFString::MakeCFString(v12, "KeyCommCenterStatsFirstLaunchTime");
        int v13 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v15, v19);
        MEMORY[0x1C8791110](&v19);
        *((void *)this + 3) = v13;
        ++*((_DWORD *)this + 2);
        *((void *)this + 2) = time(0);
        MEMORY[0x1C8791160](v15);
        if (!v8) {
          goto LABEL_28;
        }
        CFRelease(v8);
      }
      else
      {
        ++*((_DWORD *)this + 2);
        *((void *)this + 2) = time(0);
        if (!v8)
        {
LABEL_28:
          MEMORY[0x1C8791160](__p);
          CFRelease(v7);
          return v10;
        }
      }
      CFRelease(v8);
      goto LABEL_28;
    }
  }
  else
  {
    CFTypeID v7 = v18;
    if (v18) {
      goto LABEL_16;
    }
  }
  ++*((_DWORD *)this + 2);
  BOOL v10 = 0;
  *((void *)this + 2) = time(0);
  return v10;
}

void sub_1C5787184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  CFAllocatorRef v6 = va_arg(va1, const void *);
  va_copy(va2, va1);
  BOOL v8 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  MEMORY[0x1C8791160](va2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void CommCenterStats::getStats(const void **this@<X0>, __CFDictionary **a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    *a2 = 0;
    return;
  }
  CFTypeID v7 = (const void *)*((unsigned int *)this + 2);
  unint64_t valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, (const __CFString **)"KeyCommCenterStatsLaunchCount", (const char *)0x8000100, (uint64_t)v4, v5);
  BOOL v8 = valuePtr;
  unint64_t valuePtr = v7;
  CFNumberRef v9 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v11 = v9;
  if (v8 && v9)
  {
    CFDictionaryAddValue(Mutable, v8, v9);
LABEL_7:
    CFRelease(v11);
    goto LABEL_8;
  }
  if (v9) {
    goto LABEL_7;
  }
LABEL_8:
  if (v8) {
    CFRelease(v8);
  }
  ctu::cf::insert<char const*,long>(Mutable, (const __CFString **)"KeyCommCenterStatsLastLaunchTime", this[2], v4, v10);
  ctu::cf::insert<char const*,long>(Mutable, (const __CFString **)"KeyCommCenterStatsFirstLaunchTime", this[3], v4, v12);
  CFTypeID v13 = CFGetTypeID(Mutable);
  if (v13 == CFDictionaryGetTypeID())
  {
    *a2 = Mutable;
    CFRetain(Mutable);
  }
  else
  {
    *a2 = 0;
  }
  CFRelease(Mutable);
}

void sub_1C57873D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, const void *a11)
{
}

void sub_1C5787410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void CommCenterStats::updateStats(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, __CFDictionary **a3@<X8>)
{
  if (xpc_dictionary_get_value(*a2, "KeyCommCenterStatsLaunchCount"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, "KeyCommCenterStatsLaunchCount");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a1 + 8) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  if (xpc_dictionary_get_value(*a2, "KeyCommCenterStatsLastLaunchTime"))
  {
    xpc_object_t v7 = xpc_dictionary_get_value(*a2, "KeyCommCenterStatsLastLaunchTime");
    xpc_object_t object = v7;
    if (v7) {
      xpc_retain(v7);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(void *)(a1 + 16) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  if (xpc_dictionary_get_value(*a2, "KeyCommCenterStatsFirstLaunchTime"))
  {
    xpc_object_t v8 = xpc_dictionary_get_value(*a2, "KeyCommCenterStatsFirstLaunchTime");
    xpc_object_t object = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(void *)(a1 + 24) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  CommCenterStats::getStats((const void **)a1, a3);
}

void sub_1C5787570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::cf::insert<char const*,long>(__CFDictionary *a1, const __CFString **a2, const void *a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  unint64_t valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  xpc_object_t v8 = valuePtr;
  unint64_t valuePtr = a3;
  CFNumberRef v9 = CFNumberCreate(a4, kCFNumberLongType, &valuePtr);
  CFNumberRef v10 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (!v9) {
      goto LABEL_8;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_8:
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1C5787670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  long long v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5787694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_1()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C5767000);
  }
  return result;
}

char *abm::data::getDataPropertyNameFromDict(xpc_object_t *a1)
{
  if (MEMORY[0x1C8792D30](*a1) != MEMORY[0x1E4F14590]) {
    return "Unknown";
  }
  xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataProperty");
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  unsigned int v3 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)5);
  xpc_release(object);
  if (v3 < 5) {
    return off_1E6516B28[v3];
  }
  else {
    return "Unknown";
  }
}

void sub_1C578779C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::getDataPropertyTypeFromDict(xpc_object_t *a1)
{
  if (MEMORY[0x1C8792D30](*a1) != MEMORY[0x1E4F14590]) {
    return 5;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataProperty");
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  unsigned int v4 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)5);
  xpc_release(object);
  if (v4 >= 5) {
    return 5;
  }
  else {
    return v4;
  }
}

void sub_1C578785C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void abm::data::DataAggregationProtocol::toDict(abm::data::DataAggregationProtocol *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(0);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_object_t v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataAggregationProtocol", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationProtocol::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataAggregationProtocol", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

const char *abm::data::DataAggregationProtocol::asString(abm::data::DataAggregationProtocol *this)
{
  uint64_t v1 = *((int *)this + 3);
  if (v1 > 2) {
    return "unknown";
  }
  else {
    return off_1E6516B50[v1];
  }
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(0);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F20F0680;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C8792D30](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataAggregationProtocol"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataAggregationProtocol");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    int v5 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)3);
    xpc_release(object);
    if (v5)
    {
      if (v5 == 1)
      {
        *(_DWORD *)(a2 + 12) = 1;
      }
      else if (v5 == 2)
      {
        *(_DWORD *)(a2 + 12) = 2;
      }
      else
      {
        *(unsigned char *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 12) = 3;
      }
    }
    else
    {
      *(_DWORD *)(a2 + 12) = 0;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1C5787CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationProtocol>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F20F0680;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (result >= 3)
  {
    *(unsigned char *)(a2 + 8) = 0;
    uint64_t result = 3;
  }
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxDatagrams::toDict(abm::data::DataAggregationMaxDatagrams *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(1);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_object_t v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataAggregationMaxDatagrams", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxDatagrams::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxDatagrams", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(1);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F20F06C8;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C8792D30](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1C57880E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F20F06C8;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxSize::toDict(abm::data::DataAggregationMaxSize *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_object_t v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataAggregationMaxSize", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxSize::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxSize", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F20F0710;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C8792D30](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1C57884F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F20F0710;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataFlowControl::toDict(abm::data::DataFlowControl *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(3);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_object_t v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_BOOL_create(*((unsigned char *)this + 9));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataFlowControl", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataFlowControl::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_BOOL_create(*(unsigned char *)(a1 + 9));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataFlowControl", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(3);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F20F0758;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C8792D30](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataFlowControl"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataFlowControl");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(unsigned char *)(a2 + 9) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1C57888FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataFlowControl>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F20F0758;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(unsigned char *)(a2 + 9) = result != 0;
  return result;
}

void abm::data::DataPowerSave::toDict(abm::data::DataPowerSave *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(4);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_object_t v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_BOOL_create(*((unsigned char *)this + 9));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataPowerSave", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataPowerSave::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_BOOL_create(*(unsigned char *)(a1 + 9));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataPowerSave", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(4);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F20F07A0;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C8792D30](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataPowerSave"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataPowerSave");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(unsigned char *)(a2 + 9) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1C5788D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataPowerSave>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F20F07A0;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(unsigned char *)(a2 + 9) = result != 0;
  return result;
}

void NetworkStatsInterface::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = operator new(0x68uLL);
  uint64_t v5 = (uint64_t)v4;
  xpc_object_t v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = *a1;
  xpc_object_t v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NetworkStatsInterface::NetworkStatsInterface(v4, &v8);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<NetworkStatsInterface>::shared_ptr[abi:ne180100]<NetworkStatsInterface,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1},void>(a2, v5);
  ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
  xpc_object_t v7 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1C5788E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1C5788E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5788E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void *NetworkStatsInterface::NetworkStatsInterface(void *a1, void *a2)
{
  *a1 = &unk_1F20F07E8;
  xpc_object_t v4 = a1 + 9;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v6, "com.apple.telephony.abm", "net.stats");
  dispatch_object_t object = 0;
  ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable(v4, "net.stats", QOS_CLASS_DEFAULT, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(a1, (uint64_t)v6, a2);
  *a1 = &unk_1F20F0908;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v6);
  *a1 = &unk_1F20F07E8;
  return a1;
}

void sub_1C5788F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void sub_1C5788F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a10);
  _Unwind_Resume(a1);
}

const char *NetworkStatsInterface::getName(NetworkStatsInterface *this)
{
  return "net.stats";
}

void NetworkStatsInterface::query(NetworkStatsInterface *this@<X0>, void *a2@<X8>)
{
  uint64_t v9 = 0;
  xpc_object_t v10 = &v9;
  uint64_t v11 = 0x3802000000;
  CFAllocatorRef v12 = __Block_byref_object_copy_;
  uint64_t v14 = 0;
  xpc_object_t v15 = 0;
  CFTypeID v13 = __Block_byref_object_dispose_;
  xpc_object_t v4 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v4->__on_zero_shared = 0;
  v4->~__shared_weak_count_0 = 0;
  v4->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v4->~__shared_weak_count_0;
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F0988;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  uint64_t v14 = v4;
  xpc_object_t v15 = v5;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = ___ZN21NetworkStatsInterface5queryEv_block_invoke;
  v8[3] = &unk_1E6516B70;
  v8[4] = &v9;
  NetworkStatsInterface::applyInterfaces((uint64_t)this, (uint64_t)v8);
  uint64_t v6 = v10[6];
  *a2 = v10[5];
  a2[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  _Block_object_dispose(&v9, 8);
  xpc_object_t v7 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1C5789150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  operator delete(v14);
  _Block_object_dispose(&a14, 8);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15 + 40);
  _Unwind_Resume(a1);
}

void NetworkStatsInterface::applyInterfaces(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v55 = (ifaddrs *)0xAAAAAAAAAAAAAAAALL;
  int v3 = getifaddrs(&v55);
  if (v3)
  {
    xpc_object_t v4 = __error();
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = *v4;
      xpc_object_t v7 = strerror(v6);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v3;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v6;
      *(_WORD *)&buf[14] = 2080;
      *(void *)&uint8_t buf[16] = v7;
      _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "Failed to get data stats, error %d errno=%d(%s)", buf, 0x18u);
    }
    return;
  }
  uint64_t v8 = v55;
  if (v55)
  {
    uint64_t v49 = a2;
    while (1)
    {
      unint64_t v53 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v54 = 0x6AAAAAAAAAAAAAALL;
      std::string __p = (void *)0xAA0070695F706470;
      ifa_addr = v8->ifa_addr;
      if (!ifa_addr)
      {
        uint64_t v8 = v8->ifa_next;
        goto LABEL_7;
      }
      int sa_family = ifa_addr->sa_family;
      unsigned int ifa_flags = v8->ifa_flags;
      memset(__dst, 170, sizeof(__dst));
      ifa_name = v8->ifa_name;
      size_t v13 = strlen(ifa_name);
      if (v13 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (unsigned char *)v13;
      if (v13 >= 0x17) {
        break;
      }
      HIBYTE(__dst[2]) = v13;
      uint64_t v15 = __dst;
      if (v13) {
        goto LABEL_16;
      }
LABEL_17:
      v14[(void)v15] = 0;
      uint64_t v18 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        __int16 v45 = __dst;
        if (SHIBYTE(__dst[2]) < 0) {
          __int16 v45 = (void **)__dst[0];
        }
        unsigned int v46 = v8->ifa_flags;
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = v45;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = sa_family;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v46;
        __int16 v58 = 1024;
        int v59 = ifa_flags & 1;
        _os_log_debug_impl(&dword_1C5767000, v18, OS_LOG_TYPE_DEBUG, "#D Found interface %s, family %u, flags %u, up %d", buf, 0x1Eu);
        if (sa_family != 30 && sa_family != 18) {
          goto LABEL_79;
        }
      }
      else if (sa_family != 30 && sa_family != 18)
      {
        goto LABEL_79;
      }
      uint64_t v20 = (unsigned char *)HIBYTE(__dst[2]);
      unint64_t v21 = (void **)__dst[0];
      if (SHIBYTE(__dst[2]) >= 0) {
        unint64_t v22 = __dst;
      }
      else {
        unint64_t v22 = (void **)__dst[0];
      }
      if (v54 >= 0) {
        p_p = (char *)&__p;
      }
      else {
        p_p = (char *)__p;
      }
      if (v54 >= 0) {
        int64_t v24 = HIBYTE(v54);
      }
      else {
        int64_t v24 = v53;
      }
      if (!v24)
      {
        int64_t v32 = 0;
LABEL_44:
        uint64_t v33 = (unsigned char *)(v32 + v24);
        if ((v20 & 0x80) != 0)
        {
          uint64_t v20 = __dst[1];
          if (__dst[1] < v33) {
LABEL_102:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
        }
        else
        {
          if (v33 > v20) {
            goto LABEL_102;
          }
          unint64_t v21 = __dst;
        }
        unint64_t v34 = v20 - v33;
        if ((unint64_t)(v20 - v33) > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v34 >= 0x17)
        {
          uint64_t v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17) {
            uint64_t v36 = v34 | 7;
          }
          uint64_t v37 = v36 + 1;
          xpc_object_t v35 = operator new(v36 + 1);
          *(void *)&uint8_t buf[8] = v20 - v33;
          *(void *)&uint8_t buf[16] = v37 | 0x8000000000000000;
          *(void *)buf = v35;
        }
        else
        {
          buf[23] = (_BYTE)v20 - (_BYTE)v33;
          xpc_object_t v35 = buf;
          if (v20 == v33)
          {
LABEL_56:
            v35[v34] = 0;
            __endptr = 0;
            if (buf[23] >= 0) {
              size_t v38 = buf[23];
            }
            else {
              size_t v38 = *(void *)&buf[8];
            }
            if (v38
              && (buf[23] >= 0 ? (uint64_t v39 = buf) : (uint64_t v39 = *(unsigned char **)buf),
                  (uint64_t v40 = memchr(v39, 45, v38)) != 0 && v40 - v39 != -1))
            {
              BOOL v41 = 0;
              uint64_t v42 = 2863311530;
              if ((buf[23] & 0x80000000) != 0)
              {
LABEL_66:
                operator delete(*(void **)buf);
                if (!v41) {
                  goto LABEL_79;
                }
LABEL_78:
                (*(void (**)(uint64_t, ifaddrs *, uint64_t))(v49 + 16))(v49, v8, v42);
                goto LABEL_79;
              }
            }
            else
            {
              *__error() = 0;
              if (buf[23] >= 0) {
                xpc_object_t v43 = buf;
              }
              else {
                xpc_object_t v43 = *(const char **)buf;
              }
              unsigned int v44 = strtoul(v43, &__endptr, 10);
              BOOL v41 = 0;
              if (*__error())
              {
                uint64_t v42 = 2863311530;
                if ((buf[23] & 0x80000000) != 0) {
                  goto LABEL_66;
                }
              }
              else
              {
                uint64_t v42 = 2863311530;
                if (__endptr)
                {
                  BOOL v41 = *__endptr == 0;
                  if (*__endptr) {
                    uint64_t v42 = 2863311530;
                  }
                  else {
                    uint64_t v42 = v44;
                  }
                }
                if ((buf[23] & 0x80000000) != 0) {
                  goto LABEL_66;
                }
              }
            }
            if (!v41) {
              goto LABEL_79;
            }
            goto LABEL_78;
          }
        }
        memmove(v35, &v33[(void)v21], v20 - v33);
        goto LABEL_56;
      }
      if (SHIBYTE(__dst[2]) >= 0) {
        uint64_t v25 = HIBYTE(__dst[2]);
      }
      else {
        uint64_t v25 = (uint64_t)__dst[1];
      }
      if (v25 >= v24)
      {
        uint64_t v26 = (char *)v22 + v25;
        int v27 = *p_p;
        xpc_object_t v28 = v22;
        while (1)
        {
          uint64_t v29 = v25 - v24;
          if (v29 == -1) {
            goto LABEL_79;
          }
          long long v30 = (char *)memchr(v28, v27, v29 + 1);
          if (!v30) {
            goto LABEL_79;
          }
          uint64_t v31 = v30;
          if (!memcmp(v30, p_p, v24)) {
            break;
          }
          xpc_object_t v28 = (void **)(v31 + 1);
          uint64_t v25 = v26 - (v31 + 1);
          if (v25 < v24) {
            goto LABEL_79;
          }
        }
        if (v31 != v26)
        {
          int64_t v32 = v31 - (char *)v22;
          if (v31 - (char *)v22 != -1) {
            goto LABEL_44;
          }
        }
      }
LABEL_79:
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete(__dst[0]);
        uint64_t v8 = v8->ifa_next;
        if (SHIBYTE(v54) < 0) {
LABEL_83:
        }
          operator delete(__p);
      }
      else
      {
        uint64_t v8 = v8->ifa_next;
        if (SHIBYTE(v54) < 0) {
          goto LABEL_83;
        }
      }
LABEL_7:
      if (!v8)
      {
        int v48 = v55;
        goto LABEL_98;
      }
    }
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v15 = (void **)operator new(v16 + 1);
    __dst[1] = v14;
    __dst[2] = (void *)(v17 | 0x8000000000000000);
    __dst[0] = v15;
LABEL_16:
    memmove(v15, ifa_name, (size_t)v14);
    goto LABEL_17;
  }
  int v48 = 0;
LABEL_98:
  MEMORY[0x1C87924A0](v48);
}

void sub_1C57896C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(a21);
  goto LABEL_7;
}

void ___ZN21NetworkStatsInterface5queryEv_block_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = *(_DWORD *)(a2 + 16);
  memset(__dst, 170, sizeof(__dst));
  xpc_object_t v7 = *(const char **)(a2 + 8);
  size_t v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    xpc_object_t v10 = operator new(v11 + 1);
    *(void *)&__dst[8] = v9;
    *(void *)&__dst[16] = v12 | 0x8000000000000000;
    *(void *)long long __dst = v10;
    goto LABEL_8;
  }
  __dst[23] = v8;
  xpc_object_t v10 = __dst;
  if (v8) {
LABEL_8:
  }
    memmove(v10, v7, v9);
  v10[v9] = 0;
  size_t v13 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v15 = v13 + 1;
  uint64_t v14 = v13[1];
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v16 = (uint64_t **)v14;
        unsigned int v17 = *((_DWORD *)v14 + 8);
        if (v17 <= a3) {
          break;
        }
        uint64_t v14 = *v16;
        uint64_t v15 = v16;
        if (!*v16) {
          goto LABEL_16;
        }
      }
      if (v17 >= a3) {
        break;
      }
      uint64_t v14 = v16[1];
      if (!v14)
      {
        uint64_t v15 = v16 + 1;
        goto LABEL_16;
      }
    }
    uint64_t v18 = (char *)v16;
  }
  else
  {
    uint64_t v16 = v13 + 1;
LABEL_16:
    uint64_t v18 = (char *)operator new(0x50uLL);
    *((_DWORD *)v18 + 8) = a3;
    *(_OWORD *)(v18 + 40) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *((void *)v18 + 9) = 0;
    *(void *)uint64_t v18 = 0;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = v16;
    std::__shared_weak_count *v15 = (uint64_t *)v18;
    CFStringRef v19 = (uint64_t *)**v13;
    uint64_t v20 = (uint64_t *)v18;
    if (v19)
    {
      std::__shared_weak_count *v13 = v19;
      uint64_t v20 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v13[1], v20);
    uint64_t v13[2] = (uint64_t *)((char *)v13[2] + 1);
  }
  v18[48] |= v6 & 1;
  unint64_t v21 = (void **)(v18 + 56);
  if (v18 + 56 != __dst)
  {
    if (v18[79] < 0)
    {
      if (__dst[23] >= 0) {
        unint64_t v22 = __dst;
      }
      else {
        unint64_t v22 = *(unsigned char **)__dst;
      }
      if (__dst[23] >= 0) {
        size_t v23 = __dst[23];
      }
      else {
        size_t v23 = *(void *)&__dst[8];
      }
      std::string::__assign_no_alias<false>(v21, v22, v23);
    }
    else if ((__dst[23] & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v21, *(void **)__dst, *(size_t *)&__dst[8]);
    }
    else
    {
      *(_OWORD *)unint64_t v21 = *(_OWORD *)__dst;
      *((void *)v18 + 9) = *(void *)&__dst[16];
    }
  }
  uint64_t v24 = *(void *)(a2 + 48);
  if (v24)
  {
    int v25 = *((_DWORD *)v18 + 11);
    *((_DWORD *)v18 + 10) += *(_DWORD *)(v24 + 28);
    *((_DWORD *)v18 + 11) = v25 + *(_DWORD *)(v24 + 20);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
}

void sub_1C5789974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NetworkStatsInterface::getInterfaceList(NetworkStatsInterface *this@<X0>, void *a2@<X8>)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x4002000000;
  size_t v13 = __Block_byref_object_copy__3;
  uint64_t v14 = __Block_byref_object_dispose__4;
  std::string __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK21NetworkStatsInterface16getInterfaceListEv_block_invoke;
  v9[3] = &unk_1E6516B98;
  v9[4] = &v10;
  NetworkStatsInterface::applyInterfaces((uint64_t)this, (uint64_t)v9);
  int v3 = v11;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v5 = (unsigned char *)v3[5];
  xpc_object_t v4 = (unsigned char *)v3[6];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    xpc_object_t v7 = (char *)operator new(v4 - v5);
    *a2 = v7;
    size_t v8 = &v7[4 * (v6 >> 2)];
    a2[2] = v8;
    memcpy(v7, v5, v6);
    a2[1] = v8;
  }
  _Block_object_dispose(&v10, 8);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
}

void sub_1C5789ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  a21 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void ___ZNK21NetworkStatsInterface16getInterfaceListEv_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  xpc_object_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
  int64_t v6 = (char *)v4[6];
  unint64_t v5 = v4[7];
  xpc_object_t v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_DWORD *)int64_t v6 = a3;
    uint64_t v8 = (uint64_t)(v6 + 4);
    goto LABEL_22;
  }
  size_t v9 = (char *)v4[5];
  uint64_t v10 = (v6 - v9) >> 2;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 62) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v5 - (void)v9;
  if (v12 >> 1 > v11) {
    unint64_t v11 = v12 >> 1;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v14 = operator new(4 * v13);
    uint64_t v15 = &v14[4 * v10];
    uint64_t v16 = &v14[4 * v13];
    _DWORD *v15 = a3;
    uint64_t v8 = (uint64_t)(v15 + 1);
    int64_t v17 = v6 - v9;
    if (v6 == v9) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  uint64_t v14 = 0;
  uint64_t v15 = (_DWORD *)(4 * v10);
  uint64_t v16 = 0;
  *(_DWORD *)(4 * v10) = a3;
  uint64_t v8 = 4 * v10 + 4;
  int64_t v17 = v6 - v9;
  if (v6 != v9)
  {
LABEL_14:
    unint64_t v18 = v17 - 4;
    if (v18 < 0x2C) {
      goto LABEL_27;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v19 = (v18 >> 2) + 1;
    uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    xpc_object_t v7 = &v6[-v20];
    uint64_t v15 = (_DWORD *)((char *)v15 - v20);
    unint64_t v21 = &v14[4 * v10 - 16];
    unint64_t v22 = v6 - 16;
    uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      _OWORD *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        int v25 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *--uint64_t v15 = v25;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  void v4[5] = v15;
  v4[6] = v8;
  v4[7] = v16;
  if (v9) {
    operator delete(v9);
  }
LABEL_22:
  v4[6] = v8;
}

void NetworkStatsInterface::~NetworkStatsInterface(NetworkStatsInterface *this)
{
  *(void *)this = &unk_1F20F0948;
  MEMORY[0x1C8790F40]((char *)this + 8);
  xpc_object_t v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F20F0948;
  MEMORY[0x1C8790F40]((char *)this + 8);
  xpc_object_t v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(this);
}

uint64_t ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "net.stats");
}

uint64_t ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *std::string::__assign_no_alias<true>(void *__dst, void *__src, size_t __len)
{
  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v7 = 44;
    if (__len > 0x2C) {
      size_t v7 = __len;
    }
    size_t v8 = (v7 | 7) + 1;
    int64_t v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *long long __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    int64_t v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      int64_t v6 = __dst;
    }
  }
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    size_t v8 = *a1;
    a1[1] = (void *)__len;
    if (__len) {
      memmove(v8, __src, __len);
    }
    goto LABEL_12;
  }
  size_t v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v10 = v7 - 1;
  unint64_t v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2) {
      goto LABEL_7;
    }
LABEL_14:
    unint64_t v13 = 2 * v10;
    if (__len > 2 * v10) {
      unint64_t v13 = __len;
    }
    uint64_t v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v14 = v13 | 7;
    }
    if (v13 >= 0x17) {
      size_t v9 = v14 + 1;
    }
    else {
      size_t v9 = 23;
    }
    size_t v8 = operator new(v9);
    if (!__len) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  unint64_t v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2) {
    goto LABEL_14;
  }
LABEL_7:
  size_t v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len) {
LABEL_8:
  }
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22) {
    operator delete(v11);
  }
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((unsigned char *)v8 + __len) = 0;
  return a1;
}

void std::vector<unsigned int>::__throw_length_error[abi:ne180100]()
{
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E65168A0, MEMORY[0x1E4FBA1D0]);
}

void sub_1C578A080(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (xpc_object_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    int v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C578A1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C578A204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<NetworkStatsInterface>::shared_ptr[abi:ne180100]<NetworkStatsInterface,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  xpc_object_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F08B8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  unint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C578A330(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1}::operator() const(NetworkStatsInterface*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C578A358(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<NetworkStatsInterface *,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface *)#1},std::allocator<NetworkStatsInterface>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<NetworkStatsInterface *,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface *)#1},std::allocator<NetworkStatsInterface>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<NetworkStatsInterface *,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface *)#1},std::allocator<NetworkStatsInterface>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110sha"
                                "red_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1}::operator() const(NetworkStatsInterface*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable(void *a1, const char *a2, dispatch_qos_class_t a3, dispatch_object_t *a4)
{
  size_t v8 = *a4;
  if (*a4) {
    dispatch_retain(*a4);
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  unint64_t v10 = dispatch_queue_create_with_target_V2(a2, initially_inactive, v8);
  dispatch_set_qos_class_floor(v10, a3, 0);
  dispatch_activate(v10);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  unint64_t v11 = *a4;
  a1[3] = *a4;
  if (v11) {
    dispatch_retain(v11);
  }
  if (v10) {
    dispatch_release(v10);
  }
  if (v8) {
    dispatch_release(v8);
  }
  return a1;
}

void *ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_1F20F0948;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_1F20F0070;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_1C578A5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *ctu::SharedLoggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F0948;
  MEMORY[0x1C8790F40](a1 + 1);
  xpc_object_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F0948;
  MEMORY[0x1C8790F40](a1 + 1);
  xpc_object_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F0948;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F0948;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,NetworkStat> *,std::shared_ptr<std::map<unsigned int,NetworkStat>>::__shared_ptr_default_delete<std::map<unsigned int,NetworkStat>,std::map<unsigned int,NetworkStat>>,std::allocator<std::map<unsigned int,NetworkStat>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,NetworkStat> *,std::shared_ptr<std::map<unsigned int,NetworkStat>>::__shared_ptr_default_delete<std::map<unsigned int,NetworkStat>,std::map<unsigned int,NetworkStat>>,std::allocator<std::map<unsigned int,NetworkStat>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(char ***)(a1 + 24);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(v1[1]);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<std::map<unsigned int,NetworkStat> *,std::shared_ptr<std::map<unsigned int,NetworkStat>>::__shared_ptr_default_delete<std::map<unsigned int,NetworkStat>,std::map<unsigned int,NetworkStat>>,std::allocator<std::map<unsigned int,NetworkStat>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599BA8ELL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599BA8ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599BA8ELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599BA8ELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(*((void *)a1 + 1));
    if (a1[79] < 0)
    {
      operator delete(*((void **)a1 + 7));
      xpc_object_t v2 = a1;
    }
    else
    {
      xpc_object_t v2 = a1;
    }
    operator delete(v2);
  }
}

void StatsModule::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = operator new(0xE8uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  v11[0] = v6;
  v11[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  StatsModule::StatsModule((uint64_t)v4, v11);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<StatsModule>::shared_ptr[abi:ne180100]<StatsModule,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1},void>(a2, v5);
  ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *a2;
  uint64_t v9 = *a2 + 120;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  v12[2] = ___ZN11StatsModule4initEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_1;
  v12[4] = v8;
  unint64_t v13 = v12;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11StatsModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_31;
  void block[4] = v9;
  block[5] = &v13;
  unint64_t v10 = *(NSObject **)(v8 + 136);
  if (*(void *)(v8 + 144)) {
    dispatch_async_and_wait(v10, block);
  }
  else {
    dispatch_sync(v10, block);
  }
}

void sub_1C578AA48(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

void StatsModule::init(StatsModule *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN11StatsModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_1;
  v3[4] = this;
  xpc_object_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11StatsModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_31;
  void block[4] = (char *)this + 120;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 136;
  uint64_t v1 = *((void *)this + 17);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t StatsModule::StatsModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  xpc_object_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F20F0BE0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20F0BE0;
  }
  *(void *)a1 = &unk_1F20F09D8;
  *(void *)(a1 + 48) = &unk_1F20F0A48;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", "stats.mod");
  GetABMLogServer(&v10);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("stats.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F20F0C50;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)(a1 + 56) = &unk_1F20F0070;
  uint64_t v7 = v11;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)(a1 + 48) = &unk_1F20F0CE0;
  uint64_t v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_1F20F09D8;
  *(void *)(a1 + 48) = &unk_1F20F0A48;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  return a1;
}

void sub_1C578AE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_1C578AE60(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void StatsModule::~StatsModule(StatsModule *this)
{
  *(void *)this = &unk_1F20F09D8;
  *((void *)this + 6) = &unk_1F20F0A48;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v16, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    xpc_object_t v4 = (char *)this + 56;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 26);
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v4 = (char *)this + 56;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 26);
    if (!v5) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_9:
  std::__tree<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::__map_value_compare<abm::stats::StatsID,std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::less<abm::stats::StatsID>,true>,std::allocator<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>>>::destroy(*((void **)this + 23));
  uint64_t v6 = *((void *)this + 19);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 20);
    uint64_t v8 = (void *)*((void *)this + 19);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)*((void *)this + 19);
    }
    *((void *)this + 20) = v6;
    operator delete(v8);
  }
  *((void *)this + 6) = &unk_1F20F0C50;
  MEMORY[0x1C8790F40](v4);
  uint64_t v9 = *((void *)this + 18);
  if (v9) {
    dispatch_release(v9);
  }
  uint64_t v10 = *((void *)this + 17);
  if (v10) {
    dispatch_release(v10);
  }
  unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v12 = *((void *)this + 3);
  if (v12)
  {
    uint64_t v13 = *((void *)this + 4);
    uint64_t v14 = (void *)*((void *)this + 3);
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 1) < 0) {
          operator delete(*(void **)(v13 - 24));
        }
        v13 -= 24;
      }
      while (v13 != v12);
      uint64_t v14 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v12;
    operator delete(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
}

{
  void *v1;
  uint64_t vars8;

  StatsModule::~StatsModule(this);

  operator delete(v1);
}

void non-virtual thunk to'StatsModule::~StatsModule(StatsModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  StatsModule::~StatsModule((StatsModule *)((char *)this - 48));

  operator delete(v1);
}

const char *StatsModule::getName(StatsModule *this)
{
  return "stats.mod";
}

void ___ZN11StatsModule4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(StatsModule **)(a1 + 32);
  uint64_t v2 = *((void *)v1 + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D Initializing", v3, 2u);
    StatsModule::initializeStats_sync(v1);
  }
  else
  {
    StatsModule::initializeStats_sync(v1);
  }
}

void StatsModule::initializeStats_sync(StatsModule *this)
{
  StatsModule::addStatsToModule_sync((uint64_t)this, 0);
  StatsAWD::create((uint64_t *)&v9);
  long long v2 = v9;
  long long v9 = 0uLL;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 26);
  *(_OWORD *)((char *)this + 200) = v2;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (AnalyticsHelper *)operator new(0x80uLL);
  AnalyticsHelper::AnalyticsHelper(v5);
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<AnalyticsHelper>::shared_ptr[abi:ne180100]<AnalyticsHelper,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1},void>(&v9, (uint64_t)v5);
  ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v9);
  long long v6 = v9;
  long long v9 = 0uLL;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 28);
  *(_OWORD *)((char *)this + 216) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1C578B370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *StatsModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  *uint64_t v3 = 3;
  __n128 result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void StatsModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  xpc_object_t v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  v6[2] = ___ZN11StatsModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_3_1;
  uint64_t v5 = *a3;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v8 = a2;
  ctu::SharedSynchronizable<StatsModule>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void StatsModule::initialize(uint64_t a1, NSObject **a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  v5[2] = ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v5[3] = &__block_descriptor_tmp_6_5;
  uint64_t v3 = *a2;
  xpc_object_t v4 = (uint64_t *)(a1 + 120);
  v5[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<StatsModule>::execute_wrapped(v4, (uint64_t)v5);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (uint64_t v3 = *(void *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    long long v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v17 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_12;
  }
  HIBYTE(v17) = v7;
  long long v9 = __dst;
  if (v7) {
LABEL_12:
  }
    memmove(v9, v6, (size_t)v8);
  *((unsigned char *)v8 + (void)v9) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_5_7;
  void aBlock[4] = v1;
  aBlock[5] = v3;
  uint64_t v14 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v15 = v12;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v15);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__dst[0]);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C578B764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v24) {
    _Block_release(v24);
  }
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_5:
      std::__shared_weak_count::__release_weak(v23);
      _Unwind_Resume(a1);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void sub_1C578B7C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  char v8 = std::__shared_weak_count::lock(v4);
  int v27 = v8;
  if (!v8) {
    return;
  }
  long long v9 = v8;
  uint64_t v10 = a1[5];
  if (!v10) {
    goto LABEL_18;
  }
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v11 = v7[11];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *MEMORY[0x1E4F4C738];
      *(_DWORD *)dispatch_object_t object = 136315138;
      *(void *)&object[4] = v26;
      _os_log_error_impl(&dword_1C5767000, v11, OS_LOG_TYPE_ERROR, "No input is given for %s", object, 0xCu);
      if (!*a3)
      {
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
    else if (!*a3)
    {
      goto LABEL_18;
    }
    xpc_object_t v12 = xpc_null_create();
    uint64_t v13 = (void (**)(const void *, uint64_t, unsigned char *))*a3;
    *(void *)dispatch_object_t object = v12;
    xpc_object_t v14 = xpc_null_create();
    v13[2](v13, 3760250880, object);
    xpc_release(*(xpc_object_t *)object);
    xpc_release(v14);
    goto LABEL_18;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v15 = (xpc_object_t)*a2;
  if (v15)
  {
    xpc_retain(v15);
    uint64_t v16 = (void (**)(const void *, uint64_t, unsigned char *))*a3;
    if (*a3) {
      goto LABEL_10;
    }
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
    uint64_t v16 = (void (**)(const void *, uint64_t, unsigned char *))*a3;
    if (*a3)
    {
LABEL_10:
      unint64_t v17 = _Block_copy(v16);
      unint64_t v18 = (std::__shared_weak_count *)v7[16];
      if (!v18) {
LABEL_23:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_14;
    }
  }
  unint64_t v17 = 0;
  unint64_t v18 = (std::__shared_weak_count *)v7[16];
  if (!v18) {
    goto LABEL_23;
  }
LABEL_14:
  uint64_t v19 = v7[15];
  uint64_t v20 = std::__shared_weak_count::lock(v18);
  if (!v20) {
    goto LABEL_23;
  }
  unint64_t v21 = v20;
  unint64_t v22 = operator new(0x28uLL);
  void *v22 = v7;
  v22[1] = v10;
  v22[2] = v9;
  v22[3] = v15;
  xpc_object_t v23 = xpc_null_create();
  v22[4] = v17;
  long long v24 = v7[17];
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  int v25 = operator new(0x18uLL);
  *int v25 = v22;
  v25[1] = v19;
  void v25[2] = v21;
  dispatch_async_f(v24, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  xpc_release(v23);
  long long v9 = v27;
  if (v27) {
    goto LABEL_18;
  }
}

void sub_1C578BA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11StatsModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11StatsModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    xpc_object_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

BOOL StatsModule::reportStats_sync(uint64_t a1, int a2, xpc_object_t *a3)
{
  xpc_object_t v5 = *a3;
  char v8 = v5;
  if (v5)
  {
    xpc_retain(v5);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    char v8 = v5;
  }
  BOOL updated = StatsModule::updateData_sync(a1, a2, &v8);
  xpc_release(v5);
  return updated;
}

void sub_1C578BC44(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

BOOL StatsModule::updateData_sync(uint64_t a1, int a2, void **a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v50 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v6 = off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(__p);
    long long v7 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    char v8 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v7;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    long long v9 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v6 = off_1EBBDD340;
  }
  uint64_t v10 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  if (a2)
  {
    qmemcpy(__p, "UNKNOWN", 7);
    uint64_t v11 = 7;
    char v12 = 7;
  }
  else
  {
    qmemcpy(__p, "Boot Statistics", 15);
    uint64_t v11 = 15;
    char v12 = 15;
  }
  *((unsigned char *)__p + v11) = 0;
  char v48 = v12;
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(void, uint64_t))v6, (const char *)__p, &cf);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 40));
  if (v48 < 0)
  {
    operator delete(__p[0]);
    if (!v10) {
      goto LABEL_19;
    }
  }
  else if (!v10)
  {
LABEL_19:
    CFTypeRef v13 = cf;
    if (!cf) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  CFTypeRef v13 = cf;
  if (cf) {
LABEL_20:
  }
    CFRetain(v13);
LABEL_21:
  CFTypeRef v14 = v50;
  CFTypeRef v50 = v13;
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v16 = (uint64_t **)(a1 + 184);
  xpc_object_t v15 = *(uint64_t **)(a1 + 184);
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  if (v15)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v17 = v15;
        int v18 = *((_DWORD *)v15 + 8);
        if (v18 <= a2) {
          break;
        }
        xpc_object_t v15 = (uint64_t *)*v17;
        uint64_t v16 = (uint64_t **)v17;
        if (!*v17) {
          goto LABEL_30;
        }
      }
      if (v18 >= a2) {
        break;
      }
      xpc_object_t v15 = (uint64_t *)v17[1];
      if (!v15)
      {
        uint64_t v16 = (uint64_t **)(v17 + 1);
        goto LABEL_30;
      }
    }
    uint64_t v36 = v17 + 5;
    unint64_t v23 = v17[5];
    unint64_t v22 = (std::__shared_weak_count *)v36[1];
    unint64_t v45 = v23;
    unint64_t v46 = (unint64_t)v22;
    if (v22) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v17 = (uint64_t *)(a1 + 184);
LABEL_30:
    uint64_t v19 = operator new(0x38uLL);
    *((_DWORD *)v19 + 8) = a2;
    *((void *)v19 + 5) = 0;
    *((void *)v19 + 6) = 0;
    *(void *)uint64_t v19 = 0;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 2) = v17;
    *uint64_t v16 = (uint64_t *)v19;
    uint64_t v20 = **(void **)(a1 + 176);
    unint64_t v21 = (uint64_t *)v19;
    if (v20)
    {
      *(void *)(a1 + 176) = v20;
      unint64_t v21 = *v16;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 184), v21);
    ++*(void *)(a1 + 192);
    unint64_t v23 = *((void *)v19 + 5);
    unint64_t v22 = (std::__shared_weak_count *)*((void *)v19 + 6);
    unint64_t v45 = v23;
    unint64_t v46 = (unint64_t)v22;
    if (v22) {
LABEL_33:
    }
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v23) {
    goto LABEL_63;
  }
  CFTypeRef v24 = v50;
  CFTypeRef v44 = v50;
  if (v50) {
    CFRetain(v50);
  }
  int v25 = *a3;
  xpc_object_t object = v25;
  if (v25) {
    xpc_retain(v25);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(void **__return_ptr, unint64_t, CFTypeRef *, xpc_object_t *))(*(void *)v23 + 56))(__p, v23, &v44, &object);
  uint64_t v26 = __p[0];
  CFTypeRef v50 = __p[0];
  __p[0] = 0;
  if (v24)
  {
    CFRelease(v24);
    if (__p[0]) {
      CFRelease(__p[0]);
    }
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v44) {
    CFRelease(v44);
  }
  if (!(v26
       ? ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get
       : 0))
  {
LABEL_63:
    BOOL v35 = 0;
    if (!v22) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v28 = off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(__p);
    long long v29 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    long long v30 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v29;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    uint64_t v31 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    uint64_t v28 = off_1EBBDD340;
  }
  int64_t v32 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  if (a2)
  {
    qmemcpy(__p, "UNKNOWN", 7);
    uint64_t v33 = 7;
    char v34 = 7;
  }
  else
  {
    qmemcpy(__p, "Boot Statistics", 15);
    uint64_t v33 = 15;
    char v34 = 15;
  }
  *((unsigned char *)__p + v33) = 0;
  char v48 = v34;
  CFTypeRef v37 = v50;
  os_unfair_lock_lock((os_unfair_lock_t)(v28 + 40));
  if (v48 >= 0) {
    size_t v38 = __p;
  }
  else {
    size_t v38 = (void **)__p[0];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v51, (const char *)v38);
  CFStringRef v39 = (const __CFString *)v51[0];
  v51[1] = v37;
  if (v37)
  {
    CFRetain(v37);
    CFStringRef v40 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
    CFPreferencesSetValue(v39, v37, *(CFStringRef *)(v28 + 8), *(CFStringRef *)(v28 + 16), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
    BOOL v35 = CFPreferencesSynchronize(*(CFStringRef *)(v28 + 8), *(CFStringRef *)(v28 + 16), v40) != 0;
    CFRelease(v37);
    MEMORY[0x1C8791110](v51);
    os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 40));
    if ((v48 & 0x80000000) == 0) {
      goto LABEL_73;
    }
LABEL_76:
    operator delete(__p[0]);
    if (!v32) {
      goto LABEL_78;
    }
LABEL_77:
    if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      unint64_t v22 = (std::__shared_weak_count *)v46;
      if (!v46) {
        goto LABEL_80;
      }
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  BOOL v35 = 0;
  MEMORY[0x1C8791110](v51);
  os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 40));
  if (v48 < 0) {
    goto LABEL_76;
  }
LABEL_73:
  if (v32) {
    goto LABEL_77;
  }
LABEL_78:
  unint64_t v22 = (std::__shared_weak_count *)v46;
  if (!v46) {
    goto LABEL_80;
  }
LABEL_79:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    CFTypeRef v41 = v50;
    if (!v50) {
      return v35;
    }
    goto LABEL_81;
  }
LABEL_80:
  CFTypeRef v41 = v50;
  if (v50) {
LABEL_81:
  }
    CFRelease(v41);
  return v35;
}

void sub_1C578C2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21)
{
}

void sub_1C578C394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void StatsModule::getAllStats_sync(StatsModule *this@<X0>, __CFDictionary **a2@<X8>)
{
  uint64_t v28 = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v6 = Mutable;
  if (Mutable) {
    uint64_t v28 = Mutable;
  }
  long long v7 = (char *)*((void *)this + 22);
  char v8 = (char *)this + 184;
  if (v7 != (char *)this + 184)
  {
    CFTypeRef v24 = a2;
    while (1)
    {
      int v27 = 0;
      pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
      uint64_t v9 = off_1EBBDD340;
      if (off_1EBBDD340)
      {
        uint64_t v10 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
        if (!*(&off_1EBBDD340 + 1)) {
          goto LABEL_9;
        }
LABEL_8:
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_9;
      }
      SharedData::create_default_global(__p);
      long long v13 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      CFTypeRef v14 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
      off_1EBBDD340 = v13;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        xpc_object_t v15 = (std::__shared_weak_count *)__p[1];
        if (!__p[1]) {
          goto LABEL_37;
        }
      }
      else
      {
        xpc_object_t v15 = (std::__shared_weak_count *)__p[1];
        if (!__p[1]) {
          goto LABEL_37;
        }
      }
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
LABEL_37:
      uint64_t v9 = off_1EBBDD340;
      uint64_t v10 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
      if (*(&off_1EBBDD340 + 1)) {
        goto LABEL_8;
      }
LABEL_9:
      pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
      if (*((_DWORD *)v7 + 8))
      {
        qmemcpy(__p, "UNKNOWN", 7);
        uint64_t v11 = 7;
        char v12 = 7;
      }
      else
      {
        qmemcpy(__p, "Boot Statistics", 15);
        uint64_t v11 = 15;
        char v12 = 15;
      }
      *((unsigned char *)__p + v11) = 0;
      char v26 = v12;
      os_unfair_lock_lock((os_unfair_lock_t)(v9 + 40));
      Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(void, uint64_t))v9, (const char *)__p, &v27);
      os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 40));
      if (v26 < 0)
      {
        operator delete(__p[0]);
        if (!v10) {
          goto LABEL_22;
        }
      }
      else if (!v10)
      {
        goto LABEL_22;
      }
      if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_22:
        unint64_t v17 = v27;
        if (!v27) {
          goto LABEL_29;
        }
        goto LABEL_23;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      unint64_t v17 = v27;
      if (!v27) {
        goto LABEL_29;
      }
LABEL_23:
      if (*((_DWORD *)v7 + 8))
      {
        qmemcpy(__p, "UNKNOWN", 7);
        uint64_t v18 = 7;
        char v19 = 7;
      }
      else
      {
        qmemcpy(__p, "Boot Statistics", 15);
        uint64_t v18 = 15;
        char v19 = 15;
      }
      *((unsigned char *)__p + v18) = 0;
      char v26 = v19;
      ctu::cf::insert<char const*,__CFDictionary const*>(v28, (const __CFString **)__p, v17, v4, v16);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_29:
        uint64_t v20 = (char *)*((void *)v7 + 1);
        if (!v20) {
          goto LABEL_33;
        }
        goto LABEL_30;
      }
      operator delete(__p[0]);
      uint64_t v20 = (char *)*((void *)v7 + 1);
      if (!v20)
      {
        do
        {
LABEL_33:
          unint64_t v21 = (char *)*((void *)v7 + 2);
          BOOL v22 = *(void *)v21 == (void)v7;
          long long v7 = v21;
        }
        while (!v22);
        goto LABEL_5;
      }
      do
      {
LABEL_30:
        unint64_t v21 = v20;
        uint64_t v20 = *(char **)v20;
      }
      while (v20);
LABEL_5:
      long long v7 = v21;
      if (v21 == v8)
      {
        uint64_t v6 = v28;
        a2 = v24;
        break;
      }
    }
  }
  if (v6 && (CFTypeID v23 = CFGetTypeID(v6), v23 == CFDictionaryGetTypeID()))
  {
    *a2 = v6;
    CFRetain(v6);
  }
  else
  {
    *a2 = 0;
    if (!v6) {
      return;
    }
  }
  CFRelease(v6);
}

void sub_1C578C738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, const void *a19)
{
}

void StatsModule::addStatsToModule_sync(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unint64_t v21 = 0;
  BOOL v22 = 0;
  Stats::create(a2, __p);
  uint64_t v4 = __p[0];
  xpc_object_t v5 = (atomic_ullong *)__p[1];
  unint64_t v21 = __p[0];
  BOOL v22 = (std::__shared_weak_count *)__p[1];
  if (__p[0])
  {
    int v6 = *((_DWORD *)__p[0] + 26);
    char v8 = (uint64_t **)(a1 + 184);
    long long v7 = *(uint64_t **)(a1 + 184);
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = (uint64_t **)v7;
          int v10 = *((_DWORD *)v7 + 8);
          if (v6 >= v10) {
            break;
          }
          long long v7 = *v9;
          char v8 = v9;
          if (!*v9) {
            goto LABEL_9;
          }
        }
        if (v10 >= v6) {
          break;
        }
        long long v7 = v9[1];
        if (!v7)
        {
          char v8 = v9 + 1;
          goto LABEL_9;
        }
      }
      uint64_t v11 = v9;
      if (!__p[1]) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v9 = (uint64_t **)(a1 + 184);
LABEL_9:
      uint64_t v11 = operator new(0x38uLL);
      *((_DWORD *)v11 + 8) = v6;
      *((void *)v11 + 5) = 0;
      *((void *)v11 + 6) = 0;
      *(void *)uint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = v9;
      *char v8 = (uint64_t *)v11;
      uint64_t v12 = **(void **)(a1 + 176);
      long long v13 = (uint64_t *)v11;
      if (v12)
      {
        *(void *)(a1 + 176) = v12;
        long long v13 = *v8;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 184), v13);
      ++*(void *)(a1 + 192);
      uint64_t v4 = v21;
      xpc_object_t v5 = (atomic_ullong *)v22;
      if (!v22) {
        goto LABEL_13;
      }
    }
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
LABEL_13:
    CFTypeRef v14 = (std::__shared_weak_count *)*((void *)v11 + 6);
    *((void *)v11 + 5) = v4;
    *((void *)v11 + 6) = v5;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_17;
  }
  xpc_object_t v15 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    if (a2)
    {
      qmemcpy(__p, "UNKNOWN", 7);
      uint64_t v17 = 7;
      char v18 = 7;
    }
    else
    {
      qmemcpy(__p, "Boot Statistics", 15);
      uint64_t v17 = 15;
      char v18 = 15;
    }
    *((unsigned char *)__p + v17) = 0;
    char v20 = v18;
    *(_DWORD *)buf = 136315138;
    CFTypeRef v24 = __p;
    _os_log_error_impl(&dword_1C5767000, v15, OS_LOG_TYPE_ERROR, "Failed to create stats of %s", buf, 0xCu);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_17:
  CFAllocatorRef v16 = v22;
  if (v22)
  {
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1C578CA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C578CA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void StatsModule::updateAnalyticsData_sync(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 216);
  if (v2)
  {
    uint64_t v3 = *a2;
    xpc_object_t object = v3;
    if (v3 && MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590]) {
      xpc_retain(v3);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    AnalyticsHelper::updateData(v2, &object);
    xpc_release(object);
  }
  else
  {
    uint64_t v4 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C5767000, v4, OS_LOG_TYPE_ERROR, "Analytics object has not created yet", buf, 2u);
    }
  }
}

void sub_1C578CB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void StatsModule::reportAWD_sync(uint64_t a1, int a2, void **a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(StatsAWD **)(a1 + 200);
  if (v4)
  {
    xpc_object_t v5 = *a3;
    xpc_object_t object = v5;
    if (v5) {
      xpc_retain(v5);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    v7.fObj = (dispatch_object_s *)&object;
    StatsAWD::submit(v4, a2, v7);
    xpc_release(object);
  }
  else
  {
    int v6 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v10 = a2;
      _os_log_error_impl(&dword_1C5767000, v6, OS_LOG_TYPE_ERROR, "AWD object has not created yet. 0x%x metric ID cannot be submitted", buf, 8u);
    }
  }
}

void sub_1C578CC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    char v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F0C50;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F0C50;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C578CEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C578CF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<StatsModule>::shared_ptr[abi:ne180100]<StatsModule,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F0C90;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C578D040(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1}::operator() const(StatsModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C578D068(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<StatsModule *,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule *)#1},std::allocator<StatsModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<StatsModule *,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule *)#1},std::allocator<StatsModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<StatsModule *,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule *)#1},std::allocator<StatsModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1}::operator() const(StatsModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F0C50;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F0C50;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void std::__tree<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::__map_value_compare<abm::stats::StatsID,std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::less<abm::stats::StatsID>,true>,std::allocator<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::__map_value_compare<abm::stats::StatsID,std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::less<abm::stats::StatsID>,true>,std::allocator<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>>>::destroy(*a1);
    std::__tree<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::__map_value_compare<abm::stats::StatsID,std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::less<abm::stats::StatsID>,true>,std::allocator<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      unint64_t v3 = a1;
    }
    else
    {
      unint64_t v3 = a1;
    }
    operator delete(v3);
  }
}

void *___ZNK3ctu20SharedSynchronizableI11StatsModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<StatsModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  char v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F0D18;
  block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  int v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11StatsModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11StatsModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v31 = v2;
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = (const char *)*MEMORY[0x1E4F4C190];
  if (xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C190]))
  {
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C188]);
    xpc_object_t v6 = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t v6 = xpc_null_create();
    }
    uint64_t v9 = MEMORY[0x1C8792D30](v6);
    uint64_t v10 = MEMORY[0x1E4F14590];
    if (v9 != MEMORY[0x1E4F14590] && MEMORY[0x1C8792D30](v6) != MEMORY[0x1E4F14568])
    {
      uint64_t v11 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_error_impl(&dword_1C5767000, v11, OS_LOG_TYPE_ERROR, "Data type should be dictionary/array", (uint8_t *)__p, 2u);
      }
      BOOL v8 = 0;
      goto LABEL_36;
    }
    memset(__p, 170, 24);
    xpc_object_t v12 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), v4);
    xpc_object_t object = v12;
    if (v12) {
      xpc_retain(v12);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&object, (const object *)"", v13);
    xpc_release(object);
    int v14 = SHIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v15 = HIBYTE(__p[2]);
    }
    else {
      size_t v15 = (size_t)__p[1];
    }
    if (v15 != strlen((const char *)*MEMORY[0x1E4F4D330])
      || (SHIBYTE(__p[2]) >= 0 ? (CFAllocatorRef v16 = __p) : (CFAllocatorRef v16 = (void **)__p[0]),
          memcmp(v16, (const void *)*MEMORY[0x1E4F4D330], v15)))
    {
      if (v15 == strlen((const char *)*MEMORY[0x1E4F4D2D0])
        && (v14 >= 0 ? (uint64_t v17 = __p) : (uint64_t v17 = (void **)__p[0]), !memcmp(v17, (const void *)*MEMORY[0x1E4F4D2D0], v15)))
      {
        xpc_object_t v25 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C258]);
        xpc_object_t object = v25;
        if (v25) {
          xpc_retain(v25);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        int v29 = xpc::dyn_cast_or_default((xpc *)&object, 0);
        xpc_release(object);
        xpc_object_t object = v6;
        if (v6)
        {
          xpc_retain(v6);
          xpc_object_t v30 = v6;
        }
        else
        {
          xpc_object_t v30 = xpc_null_create();
          xpc_object_t object = v30;
        }
        StatsModule::reportAWD_sync(v3, v29, &object);
        xpc_release(v30);
      }
      else
      {
        if (v15 != strlen((const char *)*MEMORY[0x1E4F4C158])
          || (v14 >= 0 ? (char v18 = __p) : (char v18 = (void **)__p[0]), memcmp(v18, (const void *)*MEMORY[0x1E4F4C158], v15)))
        {
          BOOL v8 = 0;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          {
LABEL_36:
            xpc_release(v6);
            goto LABEL_37;
          }
LABEL_35:
          operator delete(__p[0]);
          goto LABEL_36;
        }
        xpc_object_t object = v6;
        if (v6)
        {
          xpc_retain(v6);
          xpc_object_t v26 = v6;
        }
        else
        {
          xpc_object_t v26 = xpc_null_create();
          xpc_object_t object = v26;
        }
        StatsModule::updateAnalyticsData_sync(v3, &object);
        xpc_release(v26);
      }
      xpc_object_t object = 0;
      BOOL v8 = 1;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
    xpc_object_t v24 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C258]);
    xpc_object_t object = v24;
    if (v24) {
      xpc_retain(v24);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    int v27 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    xpc_object_t object = v6;
    if (v6 && MEMORY[0x1C8792D30](v6) == v10)
    {
      xpc_retain(v6);
      xpc_object_t v28 = v6;
    }
    else
    {
      xpc_object_t v28 = xpc_null_create();
      xpc_object_t object = v28;
    }
    BOOL v8 = StatsModule::reportStats_sync(v3, v27, &object);
    xpc_release(v28);
    xpc_object_t object = 0;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  uint64_t v7 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "Stats type is missing!", (uint8_t *)__p, 2u);
  }
  BOOL v8 = 0;
LABEL_37:
  if (*(void *)(v2 + 32))
  {
    if (v8) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = 3760250880;
    }
    xpc_object_t v20 = xpc_null_create();
    uint64_t v21 = *(void *)(v2 + 32);
    __p[0] = v20;
    xpc_object_t v22 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, void **))(v21 + 16))(v21, v19, __p);
    xpc_release(__p[0]);
    xpc_release(v22);
  }
  _ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb0_E3__0NS_14default_deleteIS4_EEED1B8ne180100Ev(&v31);
  CFTypeID v23 = (std::__shared_weak_count *)a1[2];
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  operator delete(a1);
}

void sub_1C578D9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(v18);
  xpc_object_t object = 0;
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v17);
  _ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb0_E3__0NS_14default_deleteIS4_EEED1B8ne180100Ev(&a9);
  xpc_object_t v20 = (std::__shared_weak_count *)v16[2];
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb0_E3__0NS_14default_deleteIS4_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(const void **)(v2 + 32);
    if (v3) {
      _Block_release(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

BOOL ctu::cf::insert<char const*,__CFDictionary const*>(__CFDictionary *a1, const __CFString **a2, const void *a3, uint64_t a4, const __CFAllocator *a5)
{
  uint64_t v10 = 0;
  ctu::cf::convert_copy((ctu::cf *)&v10, a2, (const char *)0x8000100, a4, a5);
  uint64_t v7 = v10;
  uint64_t v10 = a3;
  if (!a3)
  {
    BOOL v8 = 0;
    if (!v7) {
      return v8;
    }
LABEL_7:
    CFRelease(v7);
    return v8;
  }
  CFRetain(a3);
  BOOL v8 = v7 != 0;
  if (v7) {
    CFDictionaryAddValue(a1, v7, a3);
  }
  CFRelease(a3);
  if (v7) {
    goto LABEL_7;
  }
  return v8;
}

void sub_1C578DC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_1C578DCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t __cxx_global_var_init_2()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C5767000);
  }
  return result;
}

BOOL defaults::get(char *a1, char *a2, std::string *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    xpc_object_t v6 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C1F8])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4D2F0])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4F980])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4F978]))
    {
      if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C200]))
      {
        if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4D338]) && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C288]))
        {
          if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C390]))
          {
            if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C398]))
            {
              if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C300]))
              {
                if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C138]))
                {
                  if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C2F8]))
                  {
                    if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C1B8]))
                    {
                      if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C210]))
                      {
LABEL_16:
                        if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C208]))
                        {
                          return defaults::tracesettings::get(a2, a3);
                        }
                        else
                        {
                          uint64_t v7 = GetOsLogContext()[1];
                          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
                          {
                            if (a1[23] >= 0) {
                              uint64_t v9 = a1;
                            }
                            else {
                              uint64_t v9 = *(char **)a1;
                            }
                            if (a2[23] >= 0) {
                              uint64_t v10 = a2;
                            }
                            else {
                              uint64_t v10 = *(char **)a2;
                            }
                            int v11 = 136315650;
                            xpc_object_t v12 = "prop.default";
                            __int16 v13 = 2080;
                            int v14 = v9;
                            __int16 v15 = 2080;
                            CFAllocatorRef v16 = v10;
                            _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid domain; domain='%s' key='%s'",
                              (uint8_t *)&v11,
                              0x20u);
                          }
                          return 0;
                        }
                      }
                      goto LABEL_33;
                    }
                    goto LABEL_60;
                  }
                  goto LABEL_57;
                }
                goto LABEL_54;
              }
              goto LABEL_51;
            }
            goto LABEL_48;
          }
          goto LABEL_45;
        }
        goto LABEL_39;
      }
      goto LABEL_42;
    }
  }
  else if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C1F8]) {
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D2F0])
  }
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4F980])
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4F978]))
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C200]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D338]) && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C288]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C390]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C398]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C300]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C138]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2F8]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C1B8]))
                  {
                    xpc_object_t v6 = a1;
                    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C210])) {
                      goto LABEL_16;
                    }
LABEL_33:
                    return defaults::tailspin::get(a2, (uint64_t)a3);
                  }
LABEL_60:
                  return defaults::profile::get(a2, (uint64_t)a3);
                }
LABEL_57:
                return defaults::systemlogs::get(a2, (uint64_t)a3);
              }
LABEL_54:
              return defaults::logfilter::get(a2, (uint64_t)a3);
            }
LABEL_51:
            return defaults::ttr::get(a2, (uint64_t)a3);
          }
LABEL_48:
          return defaults::compression::get(a2, (uint64_t)a3);
        }
LABEL_45:
        return defaults::bbipc::get(a2, (uint64_t)a3);
      }
LABEL_39:
      return defaults::ipc::get(a2, (uint64_t)a3);
    }
LABEL_42:
    return defaults::coredump::get(a2, (uint64_t)a3);
  }

  return defaults::bbtrace::get(a2, (std::string::size_type *)a3);
}

BOOL defaults::bbtrace::get(char *a1, std::string::size_type *a2)
{
  v53[2] = *MEMORY[0x1E4F143B8];
  int v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v5 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2D8]);
    if (v5)
    {
      xpc_object_t v6 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C380]);
      if (v6)
      {
        uint64_t v7 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C5B8]);
        if (v7)
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C198]) && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CCD0]))
          {
            if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C490])) {
              goto LABEL_116;
            }
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C428]))
            {
              BOOL v8 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2E0]);
              uint64_t v9 = a1;
              if (v8) {
                goto LABEL_10;
              }
LABEL_25:
              int v14 = capabilities::trace::defaultHistorySizeMB(v8);
              util::to_str<int>(v14, &v51);
LABEL_73:
              if (*((char *)a2 + 23) < 0) {
                operator delete((void *)*a2);
              }
              *(std::string *)a2 = v51;
              return 1;
            }
          }
          goto LABEL_29;
        }
        goto LABEL_28;
      }
      goto LABEL_27;
    }
LABEL_26:
    int v15 = capabilities::trace::enabledByDefault(v5);
    v53[0] = 0;
    *(void *)((char *)v53 + 7) = 0;
    std::to_string(&v51, v15);
LABEL_30:
    v53[0] = v51.__r_.__value_.__l.__size_;
    std::string::size_type v18 = v51.__r_.__value_.__r.__words[0];
    *(void *)((char *)v53 + 7) = *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 7);
    char v19 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    if (*((char *)a2 + 23) < 0) {
      operator delete((void *)*a2);
    }
    std::string::size_type v20 = v53[0];
    *a2 = v18;
    a2[1] = v20;
    *(std::string::size_type *)((char *)a2 + 15) = *(void *)((char *)v53 + 7);
    *((unsigned char *)a2 + 23) = v19;
    return 1;
  }
  uint64_t v9 = *(const char **)a1;
  uint64_t v5 = (capabilities::trace *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C2D8]);
  if (!v5) {
    goto LABEL_26;
  }
  xpc_object_t v6 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x1E4F4C380]);
  if (!v6)
  {
LABEL_27:
    int v16 = capabilities::trace::supportsHighTPutByDefault(v6);
    v53[0] = 0;
    *(void *)((char *)v53 + 7) = 0;
    std::to_string(&v51, v16);
    goto LABEL_30;
  }
  uint64_t v7 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x1E4F4C5B8]);
  if (!v7)
  {
LABEL_28:
    int v17 = capabilities::trace::supportsDataLoggingByDefault(v7);
    v53[0] = 0;
    *(void *)((char *)v53 + 7) = 0;
    std::to_string(&v51, v17);
    goto LABEL_30;
  }
  if (!strcasecmp(v9, (const char *)*MEMORY[0x1E4F4C198]) || !strcasecmp(v9, (const char *)*MEMORY[0x1E4F4CCD0])) {
    goto LABEL_29;
  }
  if (!strcasecmp(v9, (const char *)*MEMORY[0x1E4F4C490])) {
    goto LABEL_116;
  }
  if (!strcasecmp(v9, (const char *)*MEMORY[0x1E4F4C428]))
  {
LABEL_29:
    *(void *)((char *)v53 + 7) = 0;
    v53[0] = 0;
    std::to_string(&v51, 0);
    goto LABEL_30;
  }
  BOOL v8 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x1E4F4C2E0]);
  if (!v8) {
    goto LABEL_25;
  }
LABEL_10:
  uint64_t v10 = (capabilities::radio *)strcasecmp(v9, diag::config::kEnabledDuringSleepKey[0]);
  if (v10) {
    goto LABEL_11;
  }
  xpc_object_t v22 = (capabilities::radio *)capabilities::radio::maverick(v10);
  if (v22 & 1) != 0 || (capabilities::radio::ice(v22))
  {
    util::to_str<diag::config::DuringAPSleep>(&v51);
    goto LABEL_73;
  }
  LOBYTE(v4) = a1[23];
LABEL_11:
  int v11 = *(const char **)a1;
  if ((v4 & 0x80u) == 0) {
    xpc_object_t v12 = a1;
  }
  else {
    xpc_object_t v12 = *(const char **)a1;
  }
  __int16 v13 = (capabilities::radio *)strcasecmp(v12, diag::config::kBufferingOnAPAwake[0]);
  if (!v13)
  {
    if (capabilities::radio::maverick(v13)) {
      goto LABEL_72;
    }
    LOBYTE(v4) = a1[23];
    int v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    CFTypeID v23 = a1;
  }
  else {
    CFTypeID v23 = v11;
  }
  xpc_object_t v24 = (capabilities::radio *)strcasecmp(v23, diag::config::kStallDetectionKey[0]);
  if (!v24)
  {
    if (capabilities::radio::maverick(v24)) {
      goto LABEL_72;
    }
    LOBYTE(v4) = a1[23];
    int v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    xpc_object_t v25 = a1;
  }
  else {
    xpc_object_t v25 = v11;
  }
  xpc_object_t v26 = (capabilities::radio *)strcasecmp(v25, diag::config::kStallDetectionRetriesKey[0]);
  if (!v26)
  {
    if (capabilities::radio::maverick(v26))
    {
      util::to_str<unsigned int>(&v51, 3u);
      goto LABEL_73;
    }
    LOBYTE(v4) = a1[23];
    int v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    int v27 = a1;
  }
  else {
    int v27 = v11;
  }
  xpc_object_t v28 = (capabilities::radio *)strcasecmp(v27, diag::config::kStallDetectionRecoveryKey[0]);
  if (!v28)
  {
    if (capabilities::radio::maverick(v28))
    {
      util::to_str<diag::config::Recovery>(&v51);
      goto LABEL_73;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    int v29 = a1;
    if (strcasecmp(a1, diag::config::kKeepScratchLogsKey[0])) {
      goto LABEL_62;
    }
LABEL_72:
    util::to_str<BOOL>(&v51, 0);
    goto LABEL_73;
  }
  int v29 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, diag::config::kKeepScratchLogsKey[0])) {
    goto LABEL_72;
  }
LABEL_62:
  xpc_object_t v30 = (capabilities::radio *)strcasecmp(v29, (const char *)*MEMORY[0x1E4F4CCC8]);
  if (!v30)
  {
    uint64_t v31 = capabilities::radio::maverick(v30);
    if (v31) {
      goto LABEL_78;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    int64_t v32 = (capabilities::radio *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CEA8]);
    uint64_t v33 = a1;
    if (v32) {
      goto LABEL_67;
    }
LABEL_77:
    uint64_t v31 = capabilities::radio::ice(v32);
    if (!v31)
    {
      BOOL v35 = "None";
LABEL_82:
      std::string::__assign_external((std::string *)a2, v35);
      return 1;
    }
LABEL_78:
    if (config::hw::watch((config::hw *)v31)) {
      BOOL v35 = "Lite";
    }
    else {
      BOOL v35 = "Default";
    }
    goto LABEL_82;
  }
  uint64_t v33 = *(const char **)a1;
  int64_t v32 = (capabilities::radio *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4CEA8]);
  if (!v32) {
    goto LABEL_77;
  }
LABEL_67:
  char v34 = (capabilities::radio *)strcasecmp(v33, diag::config::kExtraDMCFileKey[0]);
  if (!v34)
  {
    if (capabilities::radio::maverick(v34))
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 4;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((unsigned char *)a2 + 23) = 4;
      }
      strcpy((char *)a2, "None");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v36 = a1;
  }
  else {
    uint64_t v36 = *(const char **)a1;
  }
  CFTypeRef v37 = (capabilities::radio *)strcasecmp(v36, (const char *)*MEMORY[0x1E4F4CAA8]);
  if (!v37)
  {
    if (capabilities::radio::maverick(v37))
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 5;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((unsigned char *)a2 + 23) = 5;
      }
      strcpy((char *)a2, "Sleep");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C4D0]))
    {
      size_t v38 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CD88]);
      if (v38)
      {
        if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D248])) {
          goto LABEL_72;
        }
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D200]) && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D208]))
        {
          CFStringRef v39 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C378]);
          if (v39)
          {
            CFStringRef v40 = (capabilities::radio *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C940]);
            if (v40)
            {
              CFTypeRef v41 = (defaults::bbtrace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CAB8]);
              uint64_t v42 = a1;
              if (v41) {
                goto LABEL_101;
              }
LABEL_115:
              unsigned int count = defaults::bbtrace::transport_read_count(v41);
              util::to_str<unsigned int>(&v51, count);
              goto LABEL_73;
            }
LABEL_131:
            uint64_t v49 = (capabilities::abs *)capabilities::radio::vendor(v40);
            if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v49)) {
              unsigned int v50 = 0x4000;
            }
            else {
              unsigned int v50 = 0x8000;
            }
            util::to_str<unsigned int>(&v51, v50);
            goto LABEL_73;
          }
LABEL_130:
          unsigned int v48 = capabilities::trace::defaultFileSizeBytes(v39);
          util::to_str<unsigned int>(&v51, v48);
          goto LABEL_73;
        }
LABEL_116:
        if (*((char *)a2 + 23) < 0)
        {
          a2[1] = 0;
          a2 = (std::string::size_type *)*a2;
        }
        else
        {
          *((unsigned char *)a2 + 23) = 0;
        }
        *(unsigned char *)a2 = 0;
        return 1;
      }
LABEL_122:
      unsigned int v47 = capabilities::trace::defaultMemoryFileMaxCount(v38);
      util::to_str<unsigned int>(&v51, v47);
      goto LABEL_73;
    }
LABEL_120:
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 17;
      a2 = (std::string::size_type *)*a2;
    }
    else
    {
      *((unsigned char *)a2 + 23) = 17;
    }
    strcpy((char *)a2, "/usr/lib/bbmasks/");
    return 1;
  }
  uint64_t v42 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C4D0])) {
    goto LABEL_120;
  }
  size_t v38 = (capabilities::trace *)strcasecmp(v42, (const char *)*MEMORY[0x1E4F4CD88]);
  if (!v38) {
    goto LABEL_122;
  }
  if (!strcasecmp(v42, (const char *)*MEMORY[0x1E4F4D248])) {
    goto LABEL_72;
  }
  if (!strcasecmp(v42, (const char *)*MEMORY[0x1E4F4D200]) || !strcasecmp(v42, (const char *)*MEMORY[0x1E4F4D208])) {
    goto LABEL_116;
  }
  CFStringRef v39 = (capabilities::trace *)strcasecmp(v42, (const char *)*MEMORY[0x1E4F4C378]);
  if (!v39) {
    goto LABEL_130;
  }
  CFStringRef v40 = (capabilities::radio *)strcasecmp(v42, (const char *)*MEMORY[0x1E4F4C940]);
  if (!v40) {
    goto LABEL_131;
  }
  CFTypeRef v41 = (defaults::bbtrace *)strcasecmp(v42, (const char *)*MEMORY[0x1E4F4CAB8]);
  if (!v41) {
    goto LABEL_115;
  }
LABEL_101:
  if (!strcasecmp(v42, (const char *)*MEMORY[0x1E4F4CEA0]))
  {
    util::to_str<BOOL>(&v51, 1);
    goto LABEL_73;
  }
  xpc_object_t v43 = GetOsLogContext()[1];
  BOOL result = os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
  if (result)
  {
    std::string::size_type v44 = *MEMORY[0x1E4F4D2F0];
    if (a1[23] >= 0) {
      unint64_t v45 = a1;
    }
    else {
      unint64_t v45 = *(char **)a1;
    }
    LODWORD(v51.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v51.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 6) = v44;
    HIWORD(v51.__r_.__value_.__r.__words[2]) = 2080;
    uint64_t v52 = v45;
    _os_log_error_impl(&dword_1C5767000, v43, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v51,
      0x20u);
    return 0;
  }
  return result;
}

void sub_1C578EC84(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C578E684);
    }
    JUMPOUT(0x1C578E68CLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::coredump::get(const char *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)a1;
  v16[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  int v4 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2D8]);
  int v5 = (int)v4;
  if (v4)
  {
    xpc_object_t v6 = GetOsLogContext()[1];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v7 = *MEMORY[0x1E4F4C200];
      if (*((char *)v3 + 23) >= 0) {
        BOOL v8 = v3;
      }
      else {
        BOOL v8 = (uint64_t *)*v3;
      }
      LODWORD(v14.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v14.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 6) = v7;
      HIWORD(v14.__r_.__value_.__r.__words[2]) = 2080;
      int v15 = v8;
      _os_log_error_impl(&dword_1C5767000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v14,
        0x20u);
    }
  }
  else
  {
    int v9 = capabilities::trace::allowed(v4);
    v16[0] = 0;
    *(void *)((char *)v16 + 7) = 0;
    std::to_string(&v14, v9);
    v16[0] = v14.__r_.__value_.__l.__size_;
    std::string::size_type v10 = v14.__r_.__value_.__r.__words[0];
    *(void *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 7);
    char v11 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    uint64_t v12 = v16[0];
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 15) = *(void *)((char *)v16 + 7);
    *(unsigned char *)(a2 + 23) = v11;
  }
  return v5 == 0;
}

void sub_1C578EE5C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C578EE08);
    }
    JUMPOUT(0x1C578EE10);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::ipc::get(char *a1, uint64_t a2)
{
  void v19[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    xpc_object_t v6 = *(const char **)a1;
    int v4 = (capabilities::ipc *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C2D8]);
    if (v4)
    {
      int v5 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C2E0]);
      if (v5) {
        goto LABEL_4;
      }
LABEL_9:
      int v8 = capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(v5);
      memset(v19, 0, 15);
      std::to_string(&v17, v8);
      goto LABEL_13;
    }
LABEL_10:
    int v9 = (capabilities::trace *)capabilities::ipc::supportsPCI(v4);
    if (v9) {
      LODWORD(v9) = capabilities::trace::enabledByDefault(v9);
    }
    memset(v19, 0, 15);
    std::to_string(&v17, (int)v9);
    goto LABEL_13;
  }
  int v4 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2D8]);
  if (!v4) {
    goto LABEL_10;
  }
  int v5 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2E0]);
  xpc_object_t v6 = a1;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_4:
  std::string::size_type v7 = (capabilities::ipc *)strcasecmp(v6, "BufferCount");
  if (!v7 && capabilities::ipc::supportsPCI(v7))
  {
    memset(v19, 0, 15);
    std::to_string(&v17, 4uLL);
LABEL_13:
    v19[0] = v17.__r_.__value_.__l.__size_;
    std::string::size_type v10 = v17.__r_.__value_.__r.__words[0];
    *(void *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 7);
    char v11 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    uint64_t v12 = v19[0];
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 15) = *(void *)((char *)v19 + 7);
    *(unsigned char *)(a2 + 23) = v11;
    return 1;
  }
  std::string v14 = GetOsLogContext()[1];
  BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    std::string::size_type v15 = *MEMORY[0x1E4F4D338];
    if (a1[23] >= 0) {
      int v16 = a1;
    }
    else {
      int v16 = *(char **)a1;
    }
    LODWORD(v17.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v17.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v17.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 6) = v15;
    HIWORD(v17.__r_.__value_.__r.__words[2]) = 2080;
    std::string::size_type v18 = v16;
    _os_log_error_impl(&dword_1C5767000, v14, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v17,
      0x20u);
    return 0;
  }
  return result;
}

void sub_1C578F0A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C578EF9CLL);
    }
    JUMPOUT(0x1C578EFA4);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::bbipc::get(char *a1, uint64_t a2)
{
  v20[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    xpc_object_t v6 = *(const char **)a1;
    int v4 = (capabilities::trace *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C2D8]);
    if (v4)
    {
      int v5 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C388]);
      if (v5) {
        goto LABEL_4;
      }
LABEL_12:
      int v12 = capabilities::ipc::defaultLogLevel(v5);
      v20[0] = 0;
      *(void *)((char *)v20 + 7) = 0;
      std::to_string(&v18, v12);
      goto LABEL_15;
    }
LABEL_13:
    int v13 = capabilities::trace::enabledByDefault(v4);
    v20[0] = 0;
    *(void *)((char *)v20 + 7) = 0;
    std::to_string(&v18, v13);
    goto LABEL_15;
  }
  int v4 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2D8]);
  if (!v4) {
    goto LABEL_13;
  }
  int v5 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C388]);
  xpc_object_t v6 = a1;
  if (!v5) {
    goto LABEL_12;
  }
LABEL_4:
  std::string::size_type v7 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C5C0]);
  if (v7)
  {
    int v8 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v10 = *MEMORY[0x1E4F4C390];
      if (a1[23] >= 0) {
        char v11 = a1;
      }
      else {
        char v11 = *(char **)a1;
      }
      LODWORD(v18.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v18.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 6) = v10;
      HIWORD(v18.__r_.__value_.__r.__words[2]) = 2080;
      char v19 = v11;
      _os_log_error_impl(&dword_1C5767000, v8, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v18,
        0x20u);
      return 0;
    }
    return result;
  }
  int v14 = capabilities::ipc::defaultMHIConfigPayloadSizeBytes(v7);
  v20[0] = 0;
  *(void *)((char *)v20 + 7) = 0;
  std::to_string(&v18, v14);
LABEL_15:
  v20[0] = v18.__r_.__value_.__l.__size_;
  std::string::size_type v15 = v18.__r_.__value_.__r.__words[0];
  *(void *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 7);
  char v16 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v17 = v20[0];
  *(void *)a2 = v15;
  *(void *)(a2 + 8) = v17;
  *(void *)(a2 + 15) = *(void *)((char *)v20 + 7);
  *(unsigned char *)(a2 + 23) = v16;
  return 1;
}

void sub_1C578F2D8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C578F288);
    }
    JUMPOUT(0x1C578F290);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::compression::get(char *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    int v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F47258])) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
    if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
      int CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
    }
    else {
      int CompressionMode = 2;
    }
    std::to_string(&v11, CompressionMode);
    goto LABEL_16;
  }
  int v4 = a1;
  if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F47258])) {
    goto LABEL_10;
  }
LABEL_3:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F47108]))
  {
    int v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v7 = *MEMORY[0x1E4F4C398];
      if (a1[23] >= 0) {
        int v8 = a1;
      }
      else {
        int v8 = *(char **)a1;
      }
      LODWORD(v11.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v11.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v11.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v11.__r_.__value_.__r.__words[1] + 6) = v7;
      HIWORD(v11.__r_.__value_.__r.__words[2]) = 2080;
      int v12 = v8;
      _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v11,
        0x20u);
      return 0;
    }
    return result;
  }
  std::to_string(&v11, 0);
LABEL_16:
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v11;
  return 1;
}

BOOL defaults::ttr::get(char *a1, uint64_t a2)
{
  void v15[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    int v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C198])) {
      goto LABEL_3;
    }
LABEL_10:
    if (TelephonyUtilIsInternalBuild()) {
      int IsCarrierBuild = 1;
    }
    else {
      int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    }
    memset(v15, 0, 15);
    std::to_string(&v13, IsCarrierBuild);
    goto LABEL_15;
  }
  int v4 = a1;
  if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C198])) {
    goto LABEL_10;
  }
LABEL_3:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4CD80]))
  {
    int v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v7 = *MEMORY[0x1E4F4C300];
      if (a1[23] >= 0) {
        int v8 = a1;
      }
      else {
        int v8 = *(char **)a1;
      }
      LODWORD(v13.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v13.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 6) = v7;
      HIWORD(v13.__r_.__value_.__r.__words[2]) = 2080;
      int v14 = v8;
      _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v13,
        0x20u);
      return 0;
    }
    return result;
  }
  memset(v15, 0, 15);
  std::to_string(&v13, 43200);
LABEL_15:
  v15[0] = v13.__r_.__value_.__l.__size_;
  std::string::size_type v10 = v13.__r_.__value_.__r.__words[0];
  *(void *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7);
  char v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v12 = v15[0];
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v12;
  *(void *)(a2 + 15) = *(void *)((char *)v15 + 7);
  *(unsigned char *)(a2 + 23) = v11;
  return 1;
}

void sub_1C578F674(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C578F624);
    }
    JUMPOUT(0x1C578F62CLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::logfilter::get(char *a1, uint64_t a2)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    int v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C6C8]))
    {
      if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C950])) {
        goto LABEL_4;
      }
LABEL_12:
      memset(v16, 0, 15);
      std::to_string(&v14, -1);
      goto LABEL_15;
    }
LABEL_13:
    memset(v16, 0, 15);
    std::to_string(&v14, 512);
    goto LABEL_15;
  }
  if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C6C8])) {
    goto LABEL_13;
  }
  int v4 = a1;
  if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C950])) {
    goto LABEL_12;
  }
LABEL_4:
  int v5 = (capabilities::trace *)strcasecmp(v4, (const char *)*MEMORY[0x1E4F4D268]);
  if (v5)
  {
    xpc_object_t v6 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v8 = *MEMORY[0x1E4F4C138];
      if (a1[23] >= 0) {
        int v9 = a1;
      }
      else {
        int v9 = *(char **)a1;
      }
      LODWORD(v14.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v14.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 6) = v8;
      HIWORD(v14.__r_.__value_.__r.__words[2]) = 2080;
      std::string::size_type v15 = v9;
      _os_log_error_impl(&dword_1C5767000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v14,
        0x20u);
      return 0;
    }
    return result;
  }
  int v10 = capabilities::trace::supportsDuplicateSignatureDetection(v5);
  memset(v16, 0, 15);
  std::to_string(&v14, v10);
LABEL_15:
  v16[0] = v14.__r_.__value_.__l.__size_;
  std::string::size_type v11 = v14.__r_.__value_.__r.__words[0];
  *(void *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 7);
  char v12 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v13 = v16[0];
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v13;
  *(void *)(a2 + 15) = *(void *)((char *)v16 + 7);
  *(unsigned char *)(a2 + 23) = v12;
  return 1;
}

void sub_1C578F894(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C578F844);
    }
    JUMPOUT(0x1C578F84CLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::systemlogs::get(char *a1, uint64_t a2)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    int v5 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C198]))
    {
      int v4 = (capabilities::abs *)strcasecmp(v5, (const char *)*MEMORY[0x1E4F4C2E0]);
      if (v4) {
        goto LABEL_4;
      }
LABEL_12:
      int v10 = capabilities::abs::defaultSystemLogsHistory(v4);
      v17[0] = 0;
      *(void *)((char *)v17 + 7) = 0;
      std::to_string(&v15, v10);
      goto LABEL_18;
    }
LABEL_13:
    if (TelephonyUtilIsInternalBuild()) {
      int IsCarrierBuild = 1;
    }
    else {
      int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    }
    *(void *)((char *)v17 + 7) = 0;
    v17[0] = 0;
    std::to_string(&v15, IsCarrierBuild);
    goto LABEL_18;
  }
  if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C198])) {
    goto LABEL_13;
  }
  int v4 = (capabilities::abs *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2E0]);
  int v5 = a1;
  if (!v4) {
    goto LABEL_12;
  }
LABEL_4:
  if (strcasecmp(v5, (const char *)*MEMORY[0x1E4F4CBA8]))
  {
    xpc_object_t v6 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v8 = *MEMORY[0x1E4F4C2F8];
      if (a1[23] >= 0) {
        int v9 = a1;
      }
      else {
        int v9 = *(char **)a1;
      }
      LODWORD(v15.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v15.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 6) = v8;
      HIWORD(v15.__r_.__value_.__r.__words[2]) = 2080;
      char v16 = v9;
      _os_log_error_impl(&dword_1C5767000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v15,
        0x20u);
      return 0;
    }
    return result;
  }
  *(void *)((char *)v17 + 7) = 0;
  v17[0] = 0;
  std::to_string(&v15, 1);
LABEL_18:
  v17[0] = v15.__r_.__value_.__l.__size_;
  std::string::size_type v12 = v15.__r_.__value_.__r.__words[0];
  *(void *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v14 = v17[0];
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 15) = *(void *)((char *)v17 + 7);
  *(unsigned char *)(a2 + 23) = v13;
  return 1;
}

void sub_1C578FAD4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C578FA84);
    }
    JUMPOUT(0x1C578FA8CLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::profile::get(char *a1, uint64_t a2)
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    int v4 = *(const char **)a1;
    if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C0E0])) {
      goto LABEL_10;
    }
  }
  else
  {
    int v4 = a1;
    if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C0E0])) {
      goto LABEL_10;
    }
  }
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4D220]))
  {
    int v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v7 = *MEMORY[0x1E4F4C1B8];
      if (a1[23] >= 0) {
        std::string::size_type v8 = a1;
      }
      else {
        std::string::size_type v8 = *(char **)a1;
      }
      LODWORD(v12.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v12.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = v7;
      HIWORD(v12.__r_.__value_.__r.__words[2]) = 2080;
      char v13 = v8;
      _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v12,
        0x20u);
      return 0;
    }
    return result;
  }
LABEL_10:
  memset(v14, 0, 15);
  std::to_string(&v12, 0);
  v14[0] = v12.__r_.__value_.__l.__size_;
  std::string::size_type v9 = v12.__r_.__value_.__r.__words[0];
  *(void *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 7);
  char v10 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v11 = v14[0];
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 15) = *(void *)((char *)v14 + 7);
  *(unsigned char *)(a2 + 23) = v10;
  return 1;
}

void sub_1C578FCC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C578FC70);
    }
    JUMPOUT(0x1C578FC78);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tailspin::get(const char *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)a1;
  void v14[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  int v4 = strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C0E0]);
  if (v4)
  {
    int v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v6 = *MEMORY[0x1E4F4C210];
      if (*((char *)v3 + 23) >= 0) {
        std::string::size_type v7 = v3;
      }
      else {
        std::string::size_type v7 = (uint64_t *)*v3;
      }
      LODWORD(v12.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v12.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = v6;
      HIWORD(v12.__r_.__value_.__r.__words[2]) = 2080;
      char v13 = v7;
      _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v12,
        0x20u);
    }
  }
  else
  {
    memset(v14, 0, 15);
    std::to_string(&v12, 0);
    v14[0] = v12.__r_.__value_.__l.__size_;
    std::string::size_type v8 = v12.__r_.__value_.__r.__words[0];
    *(void *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 7);
    char v9 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    uint64_t v10 = v14[0];
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v10;
    *(void *)(a2 + 15) = *(void *)((char *)v14 + 7);
    *(unsigned char *)(a2 + 23) = v9;
  }
  return v4 == 0;
}

void sub_1C578FE54(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C578FE00);
    }
    JUMPOUT(0x1C578FE08);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tracesettings::get(char *a1, std::string *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CAA0]))
    {
LABEL_17:
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        a2->__r_.__value_.__l.__size_ = 1;
        a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&a2->__r_.__value_.__s + 23) = 1;
      }
      LOWORD(a2->__r_.__value_.__l.__data_) = 48;
      return 1;
    }
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CB98]))
    {
      int v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C5C8])) {
        goto LABEL_5;
      }
      goto LABEL_14;
    }
LABEL_19:
    uint64_t v10 = (const char *)abm::helper::asString();
    size_t v11 = strlen(v10);
    if (v11 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v12 = v11;
    if (v11 >= 0x17)
    {
      uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v14 = v11 | 7;
      }
      uint64_t v15 = v14 + 1;
      char v13 = operator new(v14 + 1);
      *(void *)&v16[8] = v12;
      *(void *)&uint8_t v16[16] = v15 | 0x8000000000000000;
      *(void *)char v16 = v13;
    }
    else
    {
      v16[23] = v11;
      char v13 = v16;
      if (!v11)
      {
        v16[0] = 0;
        if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_23:
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
          a2->__r_.__value_.__r.__words[2] = *(void *)&v16[16];
          return 1;
        }
LABEL_31:
        operator delete(a2->__r_.__value_.__l.__data_);
        goto LABEL_23;
      }
    }
    memmove(v13, v10, v12);
    v13[v12] = 0;
    if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_31;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4CAA0])) {
    goto LABEL_17;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4CB98])) {
    goto LABEL_19;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C5C8]))
  {
LABEL_14:
    if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild()) {
      char v9 = "1";
    }
    else {
      char v9 = "3";
    }
    std::string::__assign_external(a2, v9);
    return 1;
  }
LABEL_5:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C938])) {
    goto LABEL_17;
  }
  int v5 = GetOsLogContext()[1];
  BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v7 = *MEMORY[0x1E4F4C208];
    if (a1[23] >= 0) {
      std::string::size_type v8 = a1;
    }
    else {
      std::string::size_type v8 = *(char **)a1;
    }
    *(_DWORD *)char v16 = 136315650;
    *(void *)&v16[4] = "prop.default";
    *(_WORD *)&v16[12] = 2080;
    *(void *)&v16[14] = v7;
    *(_WORD *)&v16[22] = 2080;
    uint64_t v17 = v8;
    _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'", v16, 0x20u);
    return 0;
  }
  return result;
}

double util::to_str<BOOL>(std::string *a1, int __val)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, __val);
  double result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a1 = v4;
  return result;
}

void sub_1C57901B8(void *a1)
{
}

void sub_1C57901C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::mode(defaults::bbtrace *this)
{
  return 0;
}

double util::to_str<int>@<D0>(int a1@<W0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, a1);
  double result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a2 = v4;
  return result;
}

void sub_1C579023C(void *a1)
{
}

void sub_1C5790248(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::resetModeOnAPBoot(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::history(defaults::bbtrace *this)
{
  return capabilities::trace::defaultHistorySizeMB(this);
}

double util::to_str<diag::config::DuringAPSleep>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_1C57902D0(void *a1)
{
}

void sub_1C57902DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::enabled_during_sleep(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::buffering_on_ap_wake(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::stall_detection(defaults::bbtrace *this)
{
  return 0;
}

double util::to_str<unsigned int>(std::string *a1, unsigned int __val)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, __val);
  double result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a1 = v4;
  return result;
}

void sub_1C579035C(void *a1)
{
}

void sub_1C5790368(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::stall_retries(defaults::bbtrace *this)
{
  return 3;
}

double util::to_str<diag::config::Recovery>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_1C57903D8(void *a1)
{
}

void sub_1C57903E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::stall_recovery(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::keep_scratch_logs(defaults::bbtrace *this)
{
  return 0;
}

const char *defaults::bbtrace::primary_dmc(defaults::bbtrace *this)
{
  if (config::hw::watch(this)) {
    return "Lite";
  }
  else {
    return "Default";
  }
}

const char *defaults::bbtrace::secondary_dmc(defaults::bbtrace *this)
{
  uint64_t v1 = (config::hw *)capabilities::radio::ice(this);
  if (!v1) {
    return "None";
  }
  if (config::hw::watch(v1)) {
    return "Lite";
  }
  return "Default";
}

const char *defaults::bbtrace::extra_dmc(defaults::bbtrace *this)
{
  return "None";
}

const char *defaults::bbtrace::sleep_dmc(defaults::bbtrace *this)
{
  return "Sleep";
}

uint64_t defaults::bbtrace::max_memory_file_count(defaults::bbtrace *this)
{
  return capabilities::trace::defaultMemoryFileMaxCount(this);
}

uint64_t defaults::bbtrace::carrier_logging_allowed(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::file_size(defaults::bbtrace *this)
{
  return capabilities::trace::defaultFileSizeBytes(this);
}

uint64_t defaults::bbtrace::transport_read_size(defaults::bbtrace *this)
{
  uint64_t v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1)) {
    return 0x4000;
  }
  else {
    return 0x8000;
  }
}

uint64_t defaults::bbtrace::transport_read_count(defaults::bbtrace *this)
{
  uint64_t v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if ((v1 - 1) > 2) {
    int v2 = 23;
  }
  else {
    int v2 = dword_1C599BD50[(int)v1 - 1];
  }
  shouldUseMinBasebandTransportIOReadCFIndex Count = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(v1);
  if (v2 == 15) {
    int v4 = 36;
  }
  else {
    int v4 = 4;
  }
  if (v2 == 16) {
    int v5 = 36;
  }
  else {
    int v5 = v4;
  }
  if (v2 == 2) {
    unsigned int v6 = 16;
  }
  else {
    unsigned int v6 = v5;
  }
  if (shouldUseMinBasebandTransportIOReadCount) {
    return 4;
  }
  else {
    return v6;
  }
}

uint64_t defaults::bbtrace::trace_sleep_mode(defaults::bbtrace *this)
{
  return MEMORY[0x1F417D630](this);
}

uint64_t defaults::bbtrace::privacyLevel(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::error_handling(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::live_filter(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::high_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this)) {
    return 80;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t defaults::bbtrace::low_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this)) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t defaults::bbtrace::min_file_size(defaults::bbtrace *this)
{
  uint64_t v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1)) {
    return 0x4000;
  }
  else {
    return 0x8000;
  }
}

capabilities::trace *defaults::ipc::enabled(defaults::ipc *this)
{
  double result = (capabilities::trace *)capabilities::ipc::supportsPCI(this);
  if (result)
  {
    return (capabilities::trace *)capabilities::trace::enabledByDefault(result);
  }
  return result;
}

uint64_t defaults::ipc::history(defaults::ipc *this)
{
  return capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(this);
}

uint64_t defaults::ipc::buffer_count(defaults::ipc *this)
{
  return 4;
}

uint64_t defaults::bbipc::mhiConfigPayloadSize(defaults::bbipc *this)
{
  return capabilities::ipc::defaultMHIConfigPayloadSizeBytes(this);
}

uint64_t defaults::logfilter::free_space_limit(defaults::logfilter *this)
{
  return 512;
}

uint64_t defaults::logfilter::max_log_limit(defaults::logfilter *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t defaults::helper::supported(defaults::helper *this)
{
  return 1;
}

uint64_t defaults::compression::mode(defaults::compression *this)
{
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) == 0)
  {
    uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild();
    if (!IsInternalBuild) {
      return 2;
    }
  }

  return capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
}

uint64_t defaults::compression::splitArchive(defaults::compression *this)
{
  return 0;
}

uint64_t defaults::compression::supported(defaults::compression *this)
{
  return 1;
}

uint64_t defaults::ttr::mode(defaults::ttr *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }
  else {
    return TelephonyUtilIsCarrierBuild();
  }
}

uint64_t defaults::ttr::agelimit(defaults::ttr *this)
{
  return 43200;
}

uint64_t defaults::ttr::supported(defaults::ttr *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }

  return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::systemlogs::mode(defaults::systemlogs *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }
  else {
    return TelephonyUtilIsCarrierBuild();
  }
}

uint64_t defaults::systemlogs::history(defaults::systemlogs *this)
{
  return capabilities::abs::defaultSystemLogsHistory(this);
}

uint64_t defaults::systemlogs::userConfirmationRequired(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::systemlogs::supported(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::profile::enabled(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::profile::version(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::tailspin::enabled(defaults::tailspin *this)
{
  return 0;
}

unint64_t defaults::tracesettings::config@<X0>(void *a1@<X8>)
{
  std::string v3 = (const char *)abm::helper::asString();
  unint64_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    std::string::size_type v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
  }
  else
  {
    *((unsigned char *)a1 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a1 = 0;
      return result;
    }
  }
  unint64_t result = (unint64_t)memmove(a1, v3, v5);
  *((unsigned char *)a1 + v5) = 0;
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      size_t v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        char v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          uint64_t v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22) {
            operator delete(v9);
          }
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        std::string::size_type v12 = 2 * v8;
        if (__n > 2 * v8) {
          std::string::size_type v12 = __n;
        }
        uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v13 = v12 | 7;
        }
        if (v12 >= 0x17) {
          size_t v11 = v13 + 1;
        }
        else {
          size_t v11 = 23;
        }
        goto LABEL_15;
      }
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        unint64_t v8 = 22;
        char v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    goto LABEL_23;
  }
  *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((unsigned char *)v7 + __n) = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

void sub_1C5790BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_ea8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  int v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void sub_1C5790D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5790D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5790EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1C5791988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C5791C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }

  support::ui::NotificationInfo::~NotificationInfo(v25);
  _Unwind_Resume(a1);
}

void sub_1C5791C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C57922EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, dispatch_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

void CallBackData::~CallBackData(void **this)
{
  if (*((char *)this + 39) < 0)
  {
    operator delete(this[2]);
    int v2 = this[1];
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v2 = this[1];
  if (v2) {
LABEL_3:
  }
    dispatch_release(v2);
LABEL_4:
}

void support::ui::NotificationInfo::~NotificationInfo(void **this)
{
  if (*((char *)this + 71) < 0)
  {
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 23) & 0x80000000) == 0) {
        return;
      }
LABEL_7:
      operator delete(*this);
      return;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_7;
  }
}

void __copy_helper_block_ea8_40c35_ZTSN7support2ui16NotificationInfoE112c18_ZTS12CallBackData(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    size_t v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    size_t v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
LABEL_6:
  uint64_t v7 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  char v9 = _Block_copy(*(const void **)(a2 + 112));
  unint64_t v10 = *(NSObject **)(a2 + 120);
  *(void *)(a1 + 112) = v9;
  *(void *)(a1 + 120) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  size_t v11 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a2 + 128), *(void *)(a2 + 136));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
}

void sub_1C5792640(_Unwind_Exception *a1)
{
  long long v4 = *(NSObject **)(v2 + 120);
  if (v4) {
    dispatch_release(v4);
  }

  support::ui::NotificationInfo::~NotificationInfo(v1);
  _Unwind_Resume(a1);
}

void sub_1C5792668(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v2 + 63) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v2 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_40c35_ZTSN7support2ui16NotificationInfoE112c18_ZTS12CallBackData(uint64_t a1)
{
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    uint64_t v2 = *(NSObject **)(a1 + 120);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 128));
  uint64_t v2 = *(NSObject **)(a1 + 120);
  if (v2) {
LABEL_3:
  }
    dispatch_release(v2);
LABEL_4:

  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_11:
    operator delete(*(void **)(a1 + 64));
    if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_11;
  }
LABEL_6:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
    return;
  }
LABEL_12:
  long long v3 = *(void **)(a1 + 40);

  operator delete(v3);
}

void sub_1C5792B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v27 - 72));
  _Unwind_Resume(a1);
}

void sub_1C579343C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,dispatch_object_t a36)
{
  if (object) {
    dispatch_release(object);
  }

  CallBackData::~CallBackData((void **)&a35);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a34 < 0)
  {
    operator delete(a29);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_32c18_ZTS12CallBackData(std::string *a1, uint64_t a2)
{
  long long v4 = _Block_copy(*(const void **)(a2 + 32));
  size_t v5 = *(NSObject **)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = (std::string::size_type)v4;
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
  if (v5) {
    dispatch_retain(v5);
  }
  long long v6 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1C57935A0(_Unwind_Exception *a1)
{
  long long v3 = *(NSObject **)(v1 + 40);
  if (v3) {
    dispatch_release(v3);
  }

  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c18_ZTS12CallBackData(uint64_t a1)
{
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    uint64_t v2 = *(NSObject **)(a1 + 40);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 48));
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2) {
LABEL_3:
  }
    dispatch_release(v2);
LABEL_4:
  long long v3 = *(void **)(a1 + 32);
}

void support::ui::showNotification(unsigned int a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v7 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v8 = *(std::string *)(a2 + 24);
  }
  if (*(char *)(a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else {
    std::string __p = *(std::string *)(a2 + 48);
  }
  long long v6 = 0;
  support::ui::showNotification(a1, (uint64_t)&v7, v5, &v6);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_15:
    operator delete(v8.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_15;
  }
LABEL_12:
  if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:

    return;
  }
LABEL_16:
  operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_1C57937B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a11);

  _Unwind_Resume(a1);
}

void sub_1C5793808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5793818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);

  _Unwind_Resume(a1);
}

void support::ui::showNotification(unsigned int a1, uint64_t a2, void *a3, NSObject **a4)
{
  id v7 = a3;
  memset(&v62, 170, sizeof(v62));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v62 = *(std::string *)a2;
  }
  std::string::size_type size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v62.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::insert(&v62, 0, "com.apple.telephony.", 0x14uLL);
  }
  else
  {
    GetABMLogServer(&aBlock);
    char v9 = *((void *)GetGlobalLogger(&aBlock) + 4);
    unint64_t v10 = (std::__shared_weak_count *)*((void *)&aBlock + 1);
    if (*((void *)&aBlock + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&aBlock + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Notification requires identifier!", (uint8_t *)&buf, 2u);
    }
  }
  memset(&buf, 0, sizeof(buf));
  if (a1 > 2)
  {
    GetABMLogServer(&aBlock);
    long long v12 = *((void *)GetGlobalLogger(&aBlock) + 4);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&aBlock + 1);
    if (*((void *)&aBlock + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&aBlock + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    size_t v11 = (std::string *)os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (v11)
    {
      *(_WORD *)xpc_object_t v63 = 0;
      _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "ABM notification is not supported for the caller", v63, 2u);
      std::string::size_type v51 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v51 = v62.__r_.__value_.__l.__size_;
      }
      if (!v51) {
        goto LABEL_116;
      }
      goto LABEL_22;
    }
  }
  else
  {
    size_t v11 = std::string::__assign_external(&buf, "BasebandServicesNotification", 0x1CuLL);
  }
  std::string::size_type v14 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v14 = v62.__r_.__value_.__l.__size_;
  }
  if (!v14) {
    goto LABEL_116;
  }
LABEL_22:
  std::string::size_type v15 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v15 = buf.__r_.__value_.__l.__size_;
  }
  if (v15)
  {
    char v16 = (uint64_t **)(a2 + 24);
    uint64_t v17 = *(unsigned __int8 *)(a2 + 47);
    int v18 = (char)v17;
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *(void *)(a2 + 32);
    }
    switch(v17)
    {
      case 20:
        if (v18 >= 0) {
          char v19 = (uint64_t *)(a2 + 24);
        }
        else {
          char v19 = *v16;
        }
        uint64_t v20 = *v19;
        uint64_t v21 = v19[1];
        int v22 = *((_DWORD *)v19 + 4);
        if (v20 == 0x6E6F6870656C6554 && v21 == 0x525F706D75445F79 && v22 == 2036621669) {
          goto LABEL_80;
        }
        goto LABEL_82;
      case 22:
        if (v18 >= 0) {
          xpc_object_t v25 = (uint64_t *)(a2 + 24);
        }
        else {
          xpc_object_t v25 = *v16;
        }
        uint64_t v26 = *v25;
        uint64_t v27 = v25[1];
        uint64_t v28 = *(uint64_t *)((char *)v25 + 14);
        if (v26 != 0x6E6F6870656C6554 || v27 != 0x535F706D75445F79 || v28 != 0x646574726174535FLL) {
          goto LABEL_82;
        }
        goto LABEL_80;
      case 23:
        if (v18 >= 0) {
          uint64_t v31 = (uint64_t *)(a2 + 24);
        }
        else {
          uint64_t v31 = *v16;
        }
        uint64_t v32 = *v31;
        uint64_t v33 = v31[1];
        uint64_t v34 = *(uint64_t *)((char *)v31 + 15);
        BOOL v36 = v32 == 0x72616C756C6C6543 && v33 == 0x445F65757373495FLL && v34 == 0x6465746365746544;
        if (v36 && (a1 != 2 || (config::hw::watch((config::hw *)v11) & 1) != 0)) {
          break;
        }
        goto LABEL_82;
      case 27:
        if (v18 >= 0) {
          CFTypeRef v37 = (uint64_t *)(a2 + 24);
        }
        else {
          CFTypeRef v37 = *v16;
        }
        uint64_t v38 = *v37;
        uint64_t v39 = v37[1];
        uint64_t v40 = v37[2];
        uint64_t v41 = *(uint64_t *)((char *)v37 + 19);
        if (v38 != 0x6E6F6870656C6554
          || v39 != 0x495F706D75445F79
          || v40 != 0x696369666675736ELL
          || v41 != 0x746E656963696666)
        {
          goto LABEL_82;
        }
LABEL_80:
        if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild()) {
          goto LABEL_82;
        }
        break;
      default:
LABEL_82:
        std::string::size_type v45 = *(void *)a2;
        long long v46 = *(_OWORD *)(a2 + 8);
        *(std::string *)a2 = v62;
        v62.__r_.__value_.__r.__words[0] = v45;
        *(_OWORD *)&v62.__r_.__value_.__r.__words[1] = v46;
        v60.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v46 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v46 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long aBlock = v46;
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        unsigned int v47 = _Block_copy(v7);
        unsigned int v48 = *a4;
        *(void *)&long long aBlock = v47;
        *((void *)&aBlock + 1) = v48;
        if (v48) {
          dispatch_retain(v48);
        }
        if (*(char *)(a2 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
        }
        else
        {
          *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)v16;
          v60.__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v58, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else {
          std::string v58 = buf;
        }
        uint64_t v49 = +[UserNotificationManager sharedInstance:&v58];
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v55 = *(std::string *)a2;
        }
        if (*(char *)(a2 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
        }
        else
        {
          *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)v16;
          v56.__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
        }
        if (*(char *)(a2 + 71) < 0) {
          std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
        }
        else {
          std::string v57 = *(std::string *)(a2 + 48);
        }
        id v52 = _Block_copy((const void *)aBlock);
        dispatch_object_t v53 = (dispatch_object_t)*((void *)&aBlock + 1);
        if (*((void *)&aBlock + 1)) {
          dispatch_retain(*((dispatch_object_t *)&aBlock + 1));
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v60;
        }
        [v49 showNotification:&v55 withCallBackData:&v52];
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v53) {
          dispatch_release(v53);
        }

        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v57.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_110:
            if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_111;
            }
            goto LABEL_123;
          }
        }
        else if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_110;
        }
        operator delete(v56.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_111:

          if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_112;
          }
          goto LABEL_124;
        }
LABEL_123:
        operator delete(v55.__r_.__value_.__l.__data_);

        if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_112:
          if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_113;
          }
          goto LABEL_125;
        }
LABEL_124:
        operator delete(v58.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_113:
          unsigned int v50 = *((void *)&aBlock + 1);
          if (!*((void *)&aBlock + 1)) {
            goto LABEL_115;
          }
          goto LABEL_114;
        }
LABEL_125:
        operator delete(v60.__r_.__value_.__l.__data_);
        unsigned int v50 = *((void *)&aBlock + 1);
        if (*((void *)&aBlock + 1)) {
LABEL_114:
        }
          dispatch_release(v50);
LABEL_115:

        break;
    }
  }
LABEL_116:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_118;
    }
LABEL_120:
    operator delete(v62.__r_.__value_.__l.__data_);
    goto LABEL_118;
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_120;
  }
LABEL_118:
}

void sub_1C5793EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, dispatch_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,dispatch_object_t a39)
{
  if (object) {
    dispatch_release(object);
  }

  support::ui::NotificationInfo::~NotificationInfo(&a15);
  if (a36 < 0) {
    operator delete(__p);
  }
  CallBackData::~CallBackData((void **)&a38);
  if (*(char *)(v41 - 121) < 0)
  {
    operator delete(*(void **)(v41 - 144));
    if ((*(char *)(v41 - 89) & 0x80000000) == 0)
    {
LABEL_7:

      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v41 - 89) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(v41 - 112));

  _Unwind_Resume(a1);
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  long long v3 = a2;
  if (*a2)
  {
    long long v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      long long v3 = a2;
      goto LABEL_10;
    }
    do
    {
      long long v3 = v4;
      long long v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (!v2)
  {
    int v5 = 1;
    long long v6 = (uint64_t **)v3[2];
    id v7 = *v6;
    if (*v6 == v3) {
      goto LABEL_6;
    }
LABEL_11:
    v6[1] = (uint64_t *)v2;
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
LABEL_10:
  int v5 = 0;
  *(void *)(v2 + 16) = v3[2];
  long long v6 = (uint64_t **)v3[2];
  id v7 = *v6;
  if (*v6 != v3) {
    goto LABEL_11;
  }
LABEL_6:
  *long long v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    id v7 = v6[1];
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
LABEL_12:
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *long long v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      unint64_t result = v3;
    }
    goto LABEL_16;
  }
  id v7 = 0;
  unint64_t result = (uint64_t *)v2;
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2) {
    goto LABEL_12;
  }
LABEL_16:
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    std::string::size_type v14 = (uint64_t **)v7[2];
    if (*v14 != v7) {
      break;
    }
    if (*((unsigned char *)v7 + 24))
    {
      char v16 = (void *)*v7;
      if (*v7) {
        goto LABEL_48;
      }
    }
    else
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v14 + 24) = 0;
      uint64_t v20 = (uint64_t *)v7[1];
      *std::string::size_type v14 = v20;
      if (v20) {
        v20[2] = (uint64_t)v14;
      }
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (void)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      void v14[2] = v7;
      if (result == (uint64_t *)v14) {
        unint64_t result = v7;
      }
      id v7 = *v14;
      char v16 = (void *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((unsigned char *)v16 + 24)) {
          goto LABEL_71;
        }
      }
    }
    uint64_t v21 = (uint64_t *)v7[1];
    if (v21 && !*((unsigned char *)v21 + 24))
    {
      if (v16 && !*((unsigned char *)v16 + 24))
      {
LABEL_71:
        uint64_t v21 = v7;
      }
      else
      {
        *((unsigned char *)v21 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = *v21;
        v7[1] = *v21;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v21[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
        uint64_t *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        char v16 = v7;
      }
      uint64_t v27 = (uint64_t *)v21[2];
      *((unsigned char *)v21 + 24) = *((unsigned char *)v27 + 24);
      *((unsigned char *)v27 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v28 = *v27;
      uint64_t v29 = *(void *)(*v27 + 8);
      uint64_t *v27 = v29;
      if (v29) {
        *(void *)(v29 + 16) = v27;
      }
      *(void *)(v28 + 16) = v27[2];
      *(void *)(v27[2] + 8 * (*(void *)v27[2] != (void)v27)) = v28;
      *(void *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((unsigned char *)v7 + 24) = 0;
    long long v12 = (uint64_t *)v7[2];
    if (*((unsigned char *)v12 + 24)) {
      BOOL v13 = v12 == result;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_61;
    }
LABEL_24:
    id v7 = *(uint64_t **)(v12[2] + 8 * (*(void *)v12[2] == (void)v12));
  }
  if (*((unsigned char *)v7 + 24))
  {
    std::string::size_type v15 = (void *)*v7;
    if (!*v7)
    {
LABEL_38:
      char v19 = (uint64_t *)v7[1];
      if (v19 && !*((unsigned char *)v19 + 24)) {
        goto LABEL_67;
      }
      *((unsigned char *)v7 + 24) = 0;
      long long v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        long long v12 = result;
LABEL_61:
        *((unsigned char *)v12 + 24) = 1;
        return result;
      }
      if (!*((unsigned char *)v12 + 24)) {
        goto LABEL_61;
      }
      goto LABEL_24;
    }
  }
  else
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v14 + 24) = 0;
    uint64_t v17 = v14[1];
    int v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18) {
      v18[2] = (uint64_t)v14;
    }
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (void)v14] = (uint64_t)v17;
    *uint64_t v17 = (uint64_t)v14;
    void v14[2] = v17;
    if (result == (uint64_t *)*v7) {
      unint64_t result = v7;
    }
    id v7 = *(uint64_t **)(*v7 + 8);
    std::string::size_type v15 = (void *)*v7;
    if (!*v7) {
      goto LABEL_38;
    }
  }
  if (*((unsigned char *)v15 + 24)) {
    goto LABEL_38;
  }
  char v19 = (uint64_t *)v7[1];
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_67:
    std::string::size_type v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v23 = v15[1];
    *id v7 = v23;
    if (v23) {
      *(void *)(v23 + 16) = v7;
    }
    void v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    char v19 = v7;
  }
  uint64_t v24 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v24 + 24);
  *(unsigned char *)(v24 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  xpc_object_t v25 = *(uint64_t **)(v24 + 8);
  uint64_t v26 = *v25;
  *(void *)(v24 + 8) = *v25;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  void v25[2] = *(void *)(v24 + 16);
  *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v25;
  *xpc_object_t v25 = v24;
  *(void *)(v24 + 16) = v25;
  return result;
}

void std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(char *a1)
{
  if (!a1) {
    return;
  }
  std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(*(void *)a1);
  std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(*((void *)a1 + 1));
  if (a1[95] < 0)
  {
    operator delete(*((void **)a1 + 9));
    uint64_t v2 = *((void *)a1 + 8);
    if (!v2) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v2 = *((void *)a1 + 8);
  if (v2) {
LABEL_4:
  }
    dispatch_release(v2);
LABEL_5:

  if (a1[55] < 0)
  {
    operator delete(*((void **)a1 + 4));
    long long v3 = a1;
  }
  else
  {
    long long v3 = a1;
  }
  operator delete(v3);
}

uint64_t asString@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[7] = v4;
  v34[8] = v4;
  v34[5] = v4;
  v34[6] = v4;
  v34[3] = v4;
  v34[4] = v4;
  v34[1] = v4;
  v34[2] = v4;
  long long v33 = v4;
  v34[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v32 = v4;
  long long v29 = v4;
  *(_OWORD *)__src = v4;
  long long v27 = v4;
  long long v28 = v4;
  long long v26 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v26);
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Time: ", 6);
  int v6 = *(char *)(a1 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)a1;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; Mode: ", 8);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; Action: ", 10);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v13 = a1 + 32;
  uint64_t v12 = v14;
  int v15 = *(char *)(v13 + 23);
  if (v15 >= 0) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = v12;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    uint64_t v17 = *(void *)(v13 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v16, v17);
  if ((BYTE8(v33) & 0x10) != 0)
  {
    char v19 = (unsigned char *)v33;
    if ((void *)v33 < __src[1])
    {
      *(void **)&long long v33 = __src[1];
      char v19 = __src[1];
    }
    uint64_t v20 = __src[0];
    size_t v18 = v19 - (char *)__src[0];
    if ((unint64_t)(v19 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_30;
    }
  }
  else
  {
    if ((BYTE8(v33) & 8) == 0)
    {
      size_t v18 = 0;
      a2[23] = 0;
      goto LABEL_26;
    }
    uint64_t v20 = (const void *)*((void *)&v28 + 1);
    size_t v18 = *((void *)&v29 + 1) - *((void *)&v28 + 1);
    if (*((void *)&v29 + 1) - *((void *)&v28 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_30:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v23 = operator new(v21 + 1);
    *((void *)a2 + 1) = v18;
    *((void *)a2 + 2) = v22 | 0x8000000000000000;
    *(void *)a2 = v23;
    a2 = v23;
    goto LABEL_25;
  }
  a2[23] = v18;
  if (v18) {
LABEL_25:
  }
    memmove(a2, v20, v18);
LABEL_26:
  a2[v18] = 0;
  *(void *)&long long v26 = *MEMORY[0x1E4FBA408];
  uint64_t v24 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v26 + *(void *)(v26 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v27 = v24;
  *((void *)&v27 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8791FB0](v34);
}

void sub_1C5794794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  int v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1C5794A58(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1C8791FB0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8791FB0](a1 + 128);
  return a1;
}

void BBLogTracker::addLog(uint64_t **a1, long long *a2, int a3, uint64_t a4)
{
  int v13 = a3;
  uint64_t v11 = (std::string *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  std::allocate_shared[abi:ne180100]<LogInfo,std::allocator<LogInfo>,std::string const&,abm::helper::SystemLogsMode &,std::string const&,void>((uint64_t)a2, &v13, a4, &v11);
  uint64_t v14 = a2;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, (uint64_t)&std::piecewise_construct, &v14);
  uint64_t v8 = v11;
  uint64_t v7 = (uint64_t *)v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)v6[8];
  v6[7] = (uint64_t *)v8;
  v6[8] = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1C5794CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *BBLogTracker::getLog@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  unint64_t result = std::__tree<std::string>::find<std::string>(a1, a2);
  if ((uint64_t *)(a1 + 8) != result)
  {
    uint64_t v7 = result[7];
    uint64_t v6 = result[8];
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    *a3 = v7;
    a3[1] = v6;
  }
  return result;
}

void sub_1C5794D48(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *BBLogTracker::limitLogs(uint64_t *this, unsigned int a2)
{
  unint64_t v2 = a2;
  if (this[2] > (unint64_t)a2)
  {
    uint64_t v3 = this;
    do
      this = std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(v3, *v3);
    while (v3[2] > v2);
  }
  return this;
}

void BBLogTracker::getLastLog(BBLogTracker *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  if (!*((void *)this + 2)) {
    return;
  }
  if (a2)
  {
    v46.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&v46.__darwin_suseconds_t tv_usec = 0xAAAAAAAAAAAAAAAALL;
    gettimeofday(&v46, 0);
    __darwin_time_t tv_sec = v46.tv_sec;
    __darwin_suseconds_t tv_usec = v46.tv_usec;
    if (v46.tv_usec >= 0) {
      uint64_t v8 = v46.tv_usec;
    }
    else {
      uint64_t v8 = (v46.tv_usec + 1000000);
    }
    memset(v45, 170, sizeof(v45));
    Timestamp::Timestamp((Timestamp *)v45);
    if (v45[1])
    {
      uint64_t v9 = (uint64_t *)v45[1];
      while (1)
      {
        while (1)
        {
          uint64_t v11 = (uint64_t **)v9;
          int v12 = *((_DWORD *)v9 + 8);
          if (v12 < 1) {
            break;
          }
          uint64_t v9 = *v11;
          uint64_t v10 = v11;
          if (!*v11) {
            goto LABEL_21;
          }
        }
        if ((v12 & 0x80000000) == 0) {
          break;
        }
        uint64_t v9 = v11[1];
        if (!v9)
        {
          uint64_t v10 = v11 + 1;
          goto LABEL_21;
        }
      }
      char v19 = v11;
    }
    else
    {
      uint64_t v10 = (uint64_t **)&v45[1];
      uint64_t v11 = (uint64_t **)&v45[1];
LABEL_21:
      char v19 = operator new(0x38uLL);
      v19[8] = 0;
      *((void *)v19 + 5) = 0;
      *((void *)v19 + 6) = 0;
      *(void *)char v19 = 0;
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = v11;
      *uint64_t v10 = (uint64_t *)v19;
      uint64_t v20 = (uint64_t *)v19;
      if (*(void *)v45[0])
      {
        v45[0] = *(void *)v45[0];
        uint64_t v20 = *v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v45[1], v20);
      ++v45[2];
    }
    *((void *)v19 + 5) = tv_sec - a2 + (tv_usec >> 31);
    *((void *)v19 + 6) = v8 | 0xAAAAAAAA00000000;
    uint64_t v23 = (void *)*((void *)this + 1);
    uint64_t v22 = (void *)((char *)this + 8);
    uint64_t v21 = v23;
    if (v23)
    {
      do
      {
        uint64_t v24 = v21;
        uint64_t v21 = (void *)v21[1];
      }
      while (v21);
    }
    else
    {
      xpc_object_t v25 = v22;
      do
      {
        uint64_t v24 = (void *)v25[2];
        BOOL v16 = *v24 == (void)v25;
        xpc_object_t v25 = v24;
      }
      while (v16);
    }
    Timestamp::asString((uint64_t)v45, 0, 9, v43);
    long long v28 = (const void *)v24[4];
    long long v27 = v24 + 4;
    long long v26 = v28;
    int v29 = *((char *)v27 + 23);
    if (v29 >= 0) {
      xpc_object_t v30 = v27;
    }
    else {
      xpc_object_t v30 = v26;
    }
    if (v29 >= 0) {
      size_t v31 = *((unsigned __int8 *)v27 + 23);
    }
    else {
      size_t v31 = v27[1];
    }
    int v32 = (char)v44;
    long long v33 = (void *)v43[0];
    if ((v44 & 0x80u) == 0) {
      uint64_t v34 = v43;
    }
    else {
      uint64_t v34 = (void *)v43[0];
    }
    if ((v44 & 0x80u) == 0) {
      size_t v35 = v44;
    }
    else {
      size_t v35 = v43[1];
    }
    if (v35 >= v31) {
      size_t v36 = v31;
    }
    else {
      size_t v36 = v35;
    }
    int v37 = memcmp(v30, v34, v36);
    if (v37)
    {
      if ((v37 & 0x80000000) == 0) {
        goto LABEL_46;
      }
    }
    else if (v31 >= v35)
    {
LABEL_46:
      int v38 = 1;
      if ((v32 & 0x80000000) == 0)
      {
LABEL_48:
        if (v38)
        {
          uint64_t v39 = (void *)*v22;
          if (*v22)
          {
            do
            {
              uint64_t v40 = v39;
              uint64_t v39 = (void *)v39[1];
            }
            while (v39);
          }
          else
          {
            do
            {
              uint64_t v40 = (void *)v22[2];
              BOOL v16 = *v40 == (void)v22;
              uint64_t v22 = v40;
            }
            while (v16);
          }
          uint64_t v42 = v40[7];
          uint64_t v41 = v40[8];
          if (v41) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
          }
          *a3 = v42;
          a3[1] = v41;
        }
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v45, (void *)v45[1]);
        return;
      }
LABEL_47:
      operator delete(v33);
      goto LABEL_48;
    }
    int v38 = 0;
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  uint64_t v14 = (char *)this + 8;
  int v13 = (char *)*((void *)this + 1);
  if (v13)
  {
    do
    {
      int v15 = v13;
      int v13 = (char *)*((void *)v13 + 1);
    }
    while (v13);
  }
  else
  {
    do
    {
      int v15 = (char *)*((void *)v14 + 2);
      BOOL v16 = *(void *)v15 == (void)v14;
      uint64_t v14 = v15;
    }
    while (v16);
  }
  uint64_t v18 = *((void *)v15 + 7);
  uint64_t v17 = *((void *)v15 + 8);
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *a3 = v18;
  a3[1] = v17;
}

void sub_1C579504C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)va, v5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_1C5795078(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t BBLogTracker::count(BBLogTracker *this)
{
  return *((unsigned int *)this + 4);
}

void std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x1C8791DD0](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1C8791DE0](v13);
  return a1;
}

void sub_1C579522C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1C8791DE0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1C579520CLL);
}

void sub_1C5795280(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        int v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        int v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0) {
        BOOL v16 = __b;
      }
      else {
        BOOL v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_1C5795474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<LogInfo,std::allocator<LogInfo>,std::string const&,abm::helper::SystemLogsMode &,std::string const&,void>(uint64_t a1@<X1>, int *a2@<X2>, uint64_t a3@<X3>, std::string **a4@<X8>)
{
  int v8 = (std::string *)operator new(0x50uLL);
  int v9 = v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20F0DF0;
  uint64_t v10 = v8 + 1;
  int v11 = *a2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8 + 1, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v8[1].__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  LODWORD(v9[2].__r_.__value_.__l.__data_) = v11;
  size_t v12 = (std::string *)((char *)v9 + 56);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9[3].__r_.__value_.__r.__words[0] = *(void *)(a3 + 16);
  }
  *a4 = v10;
  a4[1] = v9;
}

void sub_1C579556C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
    operator delete(v4);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LogInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F0DF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LogInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F0DF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<LogInfo>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    return;
  }
  unint64_t v2 = *(void **)(a1 + 24);

  operator delete(v2);
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      int v9 = a2;
    }
    else {
      int v9 = *a2;
    }
    if (v8 >= 0) {
      size_t v10 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v10 = (size_t)a2[1];
    }
    while (1)
    {
      int v11 = (uint64_t **)v6;
      uint64_t v14 = (const void *)v6[4];
      size_t v12 = v6 + 4;
      int v13 = v14;
      int v15 = *((char *)v12 + 23);
      if (v15 >= 0) {
        BOOL v16 = v12;
      }
      else {
        BOOL v16 = v13;
      }
      if (v15 >= 0) {
        size_t v17 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v17 = v12[1];
      }
      if (v17 >= v10) {
        size_t v18 = v10;
      }
      else {
        size_t v18 = v17;
      }
      int v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0) {
            return v11;
          }
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        uint64_t v6 = v11[1];
        if (!v6)
        {
          uint64_t v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17) {
          goto LABEL_22;
        }
LABEL_8:
        uint64_t v6 = *v11;
        uint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_29;
        }
      }
    }
  }
  int v11 = a1 + 1;
LABEL_29:
  uint64_t v21 = operator new(0x48uLL);
  uint64_t v22 = (std::string *)(v21 + 4);
  uint64_t v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v23, *((void *)v23 + 1));
  }
  else
  {
    long long v24 = *v23;
    v21[6] = *((void *)v23 + 2);
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v24;
  }
  v21[7] = 0;
  v21[8] = 0;
  void *v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  *uint64_t v7 = v21;
  xpc_object_t v25 = (uint64_t *)**a1;
  long long v26 = v21;
  if (v25)
  {
    *a1 = v25;
    long long v26 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_1C57957F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    int v5 = (void *)a2;
    do
    {
      uint64_t v4 = (void *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      int v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  uint64_t v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  int v8 = *(std::__shared_weak_count **)(a2 + 64);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (*(char *)(a2 + 55) < 0) {
LABEL_12:
  }
    operator delete(*(void **)(a2 + 32));
LABEL_13:
  operator delete((void *)a2);
  return v4;
}

void *ABMServer::create_default_global@<X0>(void *a1@<X8>)
{
  uint64_t v3 = operator new(0x10uLL);
  *uint64_t v3 = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v4);
  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(v3, (uint64_t)v4);
  *a1 = v3;
  unint64_t result = operator new(0x20uLL);
  void *result = &unk_1F20F1258;
  result[1] = 0;
  result[2] = 0;
  result[3] = v3;
  a1[1] = result;
  return result;
}

void sub_1C579597C(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[1];
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ABMServer::ABMServer(ABMServer *this)
{
  *(void *)this = 0xAAAAAAAAAAAAAAAALL;
  *((void *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v2 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v2);

  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(this, (uint64_t)v2);
}

{
  ABMServerInternal *v2;
  uint64_t vars8;

  *(void *)this = 0xAAAAAAAAAAAAAAAALL;
  *((void *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v2 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v2);

  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(this, (uint64_t)v2);
}

void sub_1C5795A58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5795ABC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *ABMServerInternal::create@<X0>(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v3);

  return std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(a1, (uint64_t)v3);
}

void sub_1C5795B20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ABMServer::init(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  ABMServerInternal::init(v4, (uint64_t)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5795BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 8;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  v6[2] = ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke;
  v6[3] = &__block_descriptor_tmp_6_6;
  void v6[4] = a1;
  v6[5] = a3;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v8 = v6;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_64;
  void block[4] = v4;
  block[5] = &v8;
  int v5 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    dispatch_async_and_wait(v5, block);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  dispatch_sync(v5, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

BOOL ABMServer::start(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::start(*this, a2);
}

BOOL ABMServerInternal::start(ABMServerInternal *this, NSObject *a2)
{
  uint64_t v4 = *((void *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to start server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
  }
  uint64_t v11 = 0;
  size_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN17ABMServerInternal5startEP16dispatch_group_s_block_invoke;
  v9[3] = &unk_1F20F0EE8;
  void v9[5] = this;
  dispatch_group_t group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(group);
  }
  v9[4] = &v11;
  int v15 = v9;
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  uint64_t v17 = 0x40000000;
  size_t v18 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  int v19 = &__block_descriptor_tmp_64;
  int v20 = (char *)this + 8;
  uint64_t v21 = &v15;
  int v5 = *((void *)this + 3);
  if (*((void *)this + 4))
  {
    dispatch_async_and_wait(v5, buf);
    int v6 = *((unsigned __int8 *)v12 + 24);
    uint64_t v7 = group;
    if (!group) {
      goto LABEL_13;
    }
  }
  else
  {
    dispatch_sync(v5, buf);
    int v6 = *((unsigned __int8 *)v12 + 24);
    uint64_t v7 = group;
    if (!group) {
      goto LABEL_13;
    }
  }
  dispatch_group_leave(v7);
  if (group) {
    dispatch_release(group);
  }
LABEL_13:
  _Block_object_dispose(&v11, 8);
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v6 != 0;
}

BOOL ABMServer::stop(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::stop(*this, a2);
}

BOOL ABMServerInternal::stop(ABMServerInternal *this, NSObject *a2)
{
  uint64_t v4 = *((void *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to stop server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
  }
  uint64_t v11 = 0;
  size_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN17ABMServerInternal4stopEP16dispatch_group_s_block_invoke;
  v9[3] = &unk_1F20F0F20;
  void v9[5] = this;
  dispatch_group_t group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(group);
  }
  v9[4] = &v11;
  int v15 = v9;
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  uint64_t v17 = 0x40000000;
  size_t v18 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  int v19 = &__block_descriptor_tmp_64;
  int v20 = (char *)this + 8;
  uint64_t v21 = &v15;
  int v5 = *((void *)this + 3);
  if (*((void *)this + 4))
  {
    dispatch_async_and_wait(v5, buf);
    int v6 = *((unsigned __int8 *)v12 + 24);
    uint64_t v7 = group;
    if (!group) {
      goto LABEL_13;
    }
  }
  else
  {
    dispatch_sync(v5, buf);
    int v6 = *((unsigned __int8 *)v12 + 24);
    uint64_t v7 = group;
    if (!group) {
      goto LABEL_13;
    }
  }
  dispatch_group_leave(v7);
  if (group) {
    dispatch_release(group);
  }
LABEL_13:
  _Block_object_dispose(&v11, 8);
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v6 != 0;
}

BOOL ABMServer::shutdown(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::shutdown(*this, a2);
}

BOOL ABMServerInternal::shutdown(ABMServerInternal *this, NSObject *a2)
{
  uint64_t v4 = *((void *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to shutdown server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
LABEL_5:
    int v5 = 0;
    goto LABEL_8;
  }
  int v6 = (dispatch_group_s *)dispatch_group_create();
  a2 = v6;
  if (!v6) {
    goto LABEL_5;
  }
  dispatch_retain((dispatch_object_t)v6);
  dispatch_group_enter(a2);
  int v5 = a2;
LABEL_8:
  uint64_t v13 = 0;
  char v14 = &v13;
  uint64_t v15 = 0x2000000000;
  char v16 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  uint64_t v11[2] = ___ZN17ABMServerInternal8shutdownEP16dispatch_group_s_block_invoke;
  v11[3] = &unk_1F20F0F58;
  v11[4] = &v13;
  void v11[5] = this;
  dispatch_group_t group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(group);
  }
  uint64_t v17 = v11;
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  uint64_t v19 = 0x40000000;
  int v20 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v21 = &__block_descriptor_tmp_64;
  uint64_t v22 = (char *)this + 8;
  uint64_t v23 = &v17;
  uint64_t v7 = *((void *)this + 3);
  if (*((void *)this + 4))
  {
    dispatch_async_and_wait(v7, buf);
    int v8 = *((unsigned __int8 *)v14 + 24);
    int v9 = group;
    if (!group) {
      goto LABEL_16;
    }
  }
  else
  {
    dispatch_sync(v7, buf);
    int v8 = *((unsigned __int8 *)v14 + 24);
    int v9 = group;
    if (!group) {
      goto LABEL_16;
    }
  }
  dispatch_group_leave(v9);
  if (group) {
    dispatch_release(group);
  }
LABEL_16:
  _Block_object_dispose(&v13, 8);
  if (v5) {
    dispatch_release(v5);
  }
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v8 != 0;
}

void ABMServer::broadcast(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  uint64_t v6 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v7 = *a3;
    size_t v10 = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v11 = *(std::string *)a2;
  uint64_t v7 = *a3;
  size_t v10 = v7;
  if (v7) {
LABEL_5:
  }
    CFRetain(v7);
LABEL_6:
  if (*a4) {
    int v8 = _Block_copy(*a4);
  }
  else {
    int v8 = 0;
  }
  int v9 = v8;
  ABMServerInternal::broadcast(v6, (uint64_t)&v11, &v10, &v9);
  if (v8) {
    _Block_release(v8);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1C57963DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    _Block_release(v16);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ABMServerInternal::broadcast(uint64_t a1, uint64_t a2, const void **a3, void **a4)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN17ABMServerInternal9broadcastENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_29_0;
  v9[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v7 = *a3;
    CFTypeRef cf = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string __p = *(std::string *)a2;
  uint64_t v7 = *a3;
  CFTypeRef cf = v7;
  if (v7) {
LABEL_5:
  }
    CFRetain(v7);
LABEL_6:
  int v8 = *a4;
  if (*a4) {
    int v8 = _Block_copy(v8);
  }
  long long aBlock = v8;
  ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v9);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void ABMServerInternal::ABMServerInternal(ABMServerInternal *this)
{
  *(void *)this = &unk_1F20F0E40;
  *((void *)this + 9) = &unk_1F20F0E80;
  char v16 = 11;
  strcpy((char *)__p, "server.main");
  xpc_object_t v14 = xpc_null_create();
  object[0] = 0;
  ctu::XpcServer::XpcServer();
  xpc_release(v14);
  xpc_object_t v14 = 0;
  *(void *)this = &unk_1F20F0E40;
  *((void *)this + 9) = &unk_1F20F0E80;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v13, "com.apple.telephony.abm", "server.main");
  GetABMLogServer(&v11);
  *((void *)this + 9) = &unk_1F20F1218;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)__p);
  *((void *)this + 10) = &unk_1F20F0070;
  unint64_t v2 = v12;
  *((void *)this + 16) = v11;
  *((void *)this + 17) = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)object);
  uint64_t v3 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)this = &unk_1F20F0E40;
  *((void *)this + 9) = &unk_1F20F0E80;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 18) = (char *)this + 152;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 48) = 3;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x38uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F12F8;
  Registry::Registry((Registry *)&v4[1]);
  *((void *)this + 28) = v6;
  *((void *)this + 29) = v4;
  shared_owners = (std::__shared_weak_count *)v4[1].__shared_owners_;
  if (!shared_owners)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1];
    v4[1].__shared_owners_ = (uint64_t)v4;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (shared_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1];
    v4[1].__shared_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_owners);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_11:
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_12:
  _ZNSt3__115allocate_sharedB8ne180100I16ABMServerFactoryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)__p);
  int v9 = __p[0];
  int v8 = (std::__shared_weak_count *)__p[1];
  *((void **)this + 30) = __p[0];
  *((void *)this + 31) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v10 = operator new(0x28uLL);
  v10[1] = 0;
  void v10[2] = 0;
  *size_t v10 = &unk_1F20F87F0;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    v10[3] = v9;
    v10[4] = v8;
    *((void *)this + 32) = v10 + 3;
    *((void *)this + 33) = v10;
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v10[3] = v9;
    v10[4] = 0;
    *((void *)this + 32) = v10 + 3;
    *((void *)this + 33) = v10;
  }
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  ctu::LoggerCommonBase::setLogLevel();
}

void sub_1C5796938(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 288));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 240));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 224));
  if (*v9)
  {
    dispatch_group_leave(*v9);
    if (*v9) {
      dispatch_release(*v9);
    }
  }
  if (v1[191] < 0) {
    operator delete(*v8);
  }
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*v7);
  *uint64_t v6 = v2;
  MEMORY[0x1C8790F40](v3);
  ctu::XpcServer::~XpcServer((ctu::XpcServer *)v1);
  _Unwind_Resume(a1);
}

void sub_1C5796A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  xpc_release(a15);
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C5796A14);
}

const char *ABMServerInternal::getName(ABMServerInternal *this)
{
  return "server.main";
}

void xpc::connection::~connection(xpc_object_t *this)
{
  *this = 0;
}

void ABMServerInternal::~ABMServerInternal(ABMServerInternal *this)
{
  *(void *)this = &unk_1F20F0E40;
  *((void *)this + 9) = &unk_1F20F0E80;
  ABMServerInternal::finishShutdown_sync(this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *((void *)this + 25);
  if (v7)
  {
    dispatch_group_leave(v7);
    int v8 = *((void *)this + 25);
    if (v8) {
      dispatch_release(v8);
    }
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*((void **)this + 19));
  *((void *)this + 9) = &unk_1F20F1218;
  MEMORY[0x1C8790F40]((char *)this + 80);

  ctu::XpcServer::~XpcServer(this);
}

{
  void *v1;
  uint64_t vars8;

  ABMServerInternal::~ABMServerInternal(this);

  operator delete(v1);
}

void ABMServerInternal::finishShutdown_sync(ABMServerInternal *this)
{
  uint64_t v2 = (void *)((char *)this + 152);
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*((void **)this + 19));
  *((void *)this + 18) = v2;
  *((void *)this + 20) = 0;
  *uint64_t v2 = 0;
  dispatch_group_t group = (dispatch_group_t)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::shutdownGlobalServices(*((ServiceManager **)this + 36), &group);
  dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
  Listener_sync = (xpc_connection_t *)ctu::XpcServer::getListener_sync(this);
  xpc_connection_cancel(*Listener_sync);
  xpc_object_t object = xpc_null_create();
  ctu::XpcServer::setListener_sync();
  xpc_release(object);
  xpc_object_t object = 0;
  ABMServerInternal::changeState_sync(this, 5);
  (*(void (**)(void, uint64_t))(**((void **)this + 34) + 88))(*((void *)this + 34), 5);
  uint64_t v4 = *((void *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I --------- ABM shutdown completed ---------", v5, 2u);
  }
  ABMServerInternal::stopRunLoop_sync(this);
  if (group) {
    dispatch_release(group);
  }
}

void sub_1C5796DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, dispatch_object_t a12)
{
  if (a12) {
    dispatch_release(a12);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ABMServerInternal::~ABMServerInternal(ABMServerInternal *this)
{
}

{
  void *v1;
  uint64_t vars8;

  ABMServerInternal::~ABMServerInternal((ABMServerInternal *)((char *)this - 72));

  operator delete(v1);
}

void ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke(uint64_t a1)
{
  void (***v21)(uint8_t *__return_ptr);
  std::__shared_weak_count *v22;
  long long v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  void *v29;
  const void *v30;
  char v31;
  char v32;
  NSObject *v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  void (**v37)(void);
  __int16 v38[6];
  int v39;
  void aBlock[6];
  std::__shared_weak_count *v41;
  xpc_object_t object;
  uint64_t v43;
  std::__shared_weak_count *v44;
  dispatch_object_t buf[3];
  uint64_t v46;

  timeval v46 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Request to init server", (uint8_t *)buf, 2u);
  }
  uint64_t v4 = *(void *)(v2 + 256);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v6 = *(std::__shared_weak_count **)(v5 + 24);
  xpc_object_t v43 = v7;
  unsigned __int8 v44 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ABMServerRegistryBuilder::setupQMIServer(v4, (Registry **)(v2 + 224), &v43);
  int v9 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (capabilities::radio::vendor(v8) == 1)
  {
    _ZNSt3__115allocate_sharedB8ne180100I20BootControllerLegacyNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)buf);
    long long v10 = *(_OWORD *)buf;
    memset(buf, 0, 16);
    uint64_t v11 = *(std::__shared_weak_count **)(v2 + 280);
    *(_OWORD *)(v2 + 272) = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    size_t v12 = (std::__shared_weak_count *)buf[1];
    if (buf[1] && !atomic_fetch_add((atomic_ullong *volatile)&buf[1][1], 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  ABMServerInternal::startRunLoop_sync((ABMServerInternal *)v2);
  xpc_object_t object = xpc_connection_create_mach_service(kABMDefaultServiceName[0], 0, 1uLL);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  ctu::XpcServer::setListener_sync();
  xpc_release(object);
  xpc_object_t object = 0;
  ctu::XpcServer::startListener_sync((ctu::XpcServer *)v2);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAppleBasebandManagerDaemonReady", 0, 0, 1u);
  xpc_object_t v14 = (a1 + 48);
  uint64_t v15 = (void **)(v2 + 168);
  if (v2 + 168 != a1 + 48)
  {
    char v16 = *(unsigned char *)(a1 + 71);
    if (*(char *)(v2 + 191) < 0)
    {
      if (v16 >= 0) {
        size_t v18 = (void *)(a1 + 48);
      }
      else {
        size_t v18 = *(void **)(a1 + 48);
      }
      if (v16 >= 0) {
        size_t v19 = *(unsigned __int8 *)(a1 + 71);
      }
      else {
        size_t v19 = *(void *)(a1 + 56);
      }
      std::string::__assign_no_alias<false>(v15, v18, v19);
    }
    else if ((*(unsigned char *)(a1 + 71) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v15, *(void **)(a1 + 48), *(void *)(a1 + 56));
    }
    else
    {
      long long v17 = *(_OWORD *)&v14->isa;
      *(void *)(v2 + 184) = *(void *)(a1 + 64);
      *(_OWORD *)uint64_t v15 = v17;
    }
  }
  int v20 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 71) < 0) {
      xpc_object_t v14 = v14->isa;
    }
    LODWORD(buf[0]) = 136315138;
    *(dispatch_object_t *)((char *)buf + 4) = v14;
    _os_log_impl(&dword_1C5767000, v20, OS_LOG_TYPE_DEFAULT, "#I host: %s", (uint8_t *)buf, 0xCu);
  }
  ABMServerInternal::changeState_sync(v2, 3u);
  uint64_t v22 = *(std::__shared_weak_count **)(v2 + 232);
  uint64_t v21 = *(void (****)(uint8_t *__return_ptr))(v2 + 240);
  aBlock[5] = *(void *)(v2 + 224);
  uint64_t v41 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v21)((uint8_t *)buf);
  uint64_t v23 = *(_OWORD *)buf;
  memset(buf, 0, 16);
  long long v24 = *(std::__shared_weak_count **)(v2 + 296);
  *(_OWORD *)(v2 + 288) = v23;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  xpc_object_t v25 = (std::__shared_weak_count *)buf[1];
  if (buf[1] && !atomic_fetch_add((atomic_ullong *volatile)&buf[1][1], 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  long long v26 = *(void *)(v2 + 288);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke_3;
  aBlock[3] = &__block_descriptor_tmp_2;
  void aBlock[4] = v2;
  long long v27 = _Block_copy(aBlock);
  long long v28 = v27;
  if (!v27)
  {
    xpc_object_t v30 = *(const void **)(v26 + 184);
    *(void *)(v26 + 184) = 0;
    if (!v30) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  int v29 = _Block_copy(v27);
  xpc_object_t v30 = *(const void **)(v26 + 184);
  *(void *)(v26 + 184) = v29;
  if (v30) {
LABEL_48:
  }
    _Block_release(v30);
LABEL_49:
  if (v28) {
    _Block_release(v28);
  }
  (*(void (**)(void))(**(void **)(v2 + 288) + 64))(*(void *)(v2 + 288));
  buf[0] = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::initializeGlobalServices(*(ServiceManager **)(v2 + 288), buf);
  dispatch_group_wait(buf[0], 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v39 = 6;
  size_t v31 = (*(uint64_t (**)(void, int *))(**(void **)(v2 + 272) + 96))(*(void *)(v2 + 272), &v39);
  if (v39 == 3) {
    int v32 = v31;
  }
  else {
    int v32 = 0;
  }
  if ((v32 & 1) == 0)
  {
    long long v33 = *(NSObject **)(v2 + 112);
    uint64_t v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
    if (v34)
    {
      v38[0] = 0;
      _os_log_impl(&dword_1C5767000, v33, OS_LOG_TYPE_DEFAULT, "#I Previous shutdown was not clean", (uint8_t *)v38, 2u);
    }
    size_t v35 = capabilities::radio::ice((capabilities::radio *)v34);
    size_t v36 = **(void **)(v2 + 272);
    if (v35) {
      int v37 = (void (**)(void))(v36 + 80);
    }
    else {
      int v37 = (void (**)(void))(v36 + 72);
    }
    (*v37)();
    (*(void (**)(void, uint64_t))(**(void **)(v2 + 272) + 88))(*(void *)(v2 + 272), 3);
  }
  if (buf[0]) {
    dispatch_release(buf[0]);
  }
}

void sub_1C5797490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t object, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::startRunLoop_sync(ABMServerInternal *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__sig) = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting ABM RunLoop", (uint8_t *)&buf, 2u);
  }
  uint64_t v3 = dispatch_group_create();
  dispatch_group_enter(v3);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  v5[2] = ___ZN17ABMServerInternal17startRunLoop_syncEv_block_invoke;
  v5[3] = &__block_descriptor_tmp_15_0;
  v5[4] = this;
  dispatch_object_t object = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&buf.__opaque[24] = v4;
  *(_OWORD *)&buf.__opaque[40] = v4;
  *(_OWORD *)&buf.__sig = v4;
  *(_OWORD *)&buf.__opaque[8] = v4;
  pthread_attr_init(&buf);
  pthread_attr_set_qos_class_np(&buf, QOS_CLASS_USER_INITIATED, 0);
  pthread_create((pthread_t *)this + 27, &buf, (void *(__cdecl *)(void *))sServerRunLoopMain, v5);
  dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (object) {
    dispatch_release(object);
  }
  if (v3) {
    dispatch_release(v3);
  }
}

void sub_1C579766C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    if (!v14) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  dispatch_release(v14);
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::changeState_sync(uint64_t a1, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v4 = *(NSObject **)(a1 + 112);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = to_string(*(_DWORD *)(a1 + 192));
    *(_DWORD *)pthread_attr_t buf = 136315394;
    int v9 = v5;
    __int16 v10 = 2080;
    uint64_t v11 = to_string(a2);
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I State change: %s -> %s", buf, 0x16u);
  }
  *(_DWORD *)(a1 + 192) = a2;
  uint64_t v6 = *(NSObject **)(a1 + 200);
  if (v6)
  {
    dispatch_object_t v7 = *(dispatch_object_t *)(a1 + 200);
    dispatch_retain(v6);
    dispatch_group_enter(v6);
    ABMServerInternal::checkShutdown_sync((ABMServerInternal *)a1, &v7);
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
}

void sub_1C57977A0(_Unwind_Exception *a1)
{
  dispatch_group_leave(v1);
  dispatch_release(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  uint64_t v2 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 48);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void ___ZN17ABMServerInternal5startEP16dispatch_group_s_block_invoke(void *a1)
{
  uint64_t v1 = a1[5];
  unsigned int v2 = *(_DWORD *)(v1 + 192);
  if (v2 > 5) {
    return;
  }
  if (((1 << v2) & 0x35) != 0)
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
    return;
  }
  if (v2 == 1)
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
    return;
  }
  ABMServerInternal::changeState_sync(a1[5], 0);
  long long v4 = (const void *)*MEMORY[0x1E4F4C5E8];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C5E8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    dispatch_object_t v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v13) = v5;
    dispatch_object_t v7 = __dst;
    if (!v5) {
      goto LABEL_15;
    }
  }
  memmove(v7, v4, (size_t)v6);
LABEL_15:
  *((unsigned char *)v6 + (void)v7) = 0;
  ABMServerInternal::broadcastServerState_sync((void *)v1, (uint64_t)__dst);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  __int16 v10 = a1[6];
  uint64_t v11 = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
  }
  ABMServerInternal::start_sync(v1, &v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
}

void sub_1C57979B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::getState_sync(ABMServerInternal *this)
{
  return *((unsigned int *)this + 48);
}

void ABMServerInternal::broadcastServerState_sync(void *a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  dispatch_object_t v7 = Mutable;
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v22 = *(std::string *)a2;
  }
  ctu::cf::insert<char const*,std::string>(v7, (const __CFString **)*MEMORY[0x1E4F4C250], (uint64_t)&v22, v4, v6);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = (const void *)*MEMORY[0x1E4F4C890];
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4C890]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __int16 v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    uint64_t v11 = (void **)operator new(v13 + 1);
    __dst[1] = v10;
    unint64_t v20 = v14 | 0x8000000000000000;
    __dst[0] = v11;
LABEL_16:
    memmove(v11, v8, (size_t)v10);
    *((unsigned char *)v10 + (void)v11) = 0;
    CFTypeRef v12 = cf;
    if (!cf) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  HIBYTE(v20) = v9;
  uint64_t v11 = __dst;
  if (v9) {
    goto LABEL_16;
  }
  LOBYTE(__dst[0]) = 0;
  CFTypeRef v12 = cf;
  if (!cf) {
    goto LABEL_19;
  }
LABEL_17:
  CFTypeID v15 = CFGetTypeID(v12);
  if (v15 == CFDictionaryGetTypeID())
  {
    size_t v18 = (ctu *)v12;
    CFRetain(v12);
    char v16 = v12;
    goto LABEL_20;
  }
LABEL_19:
  char v16 = 0;
  size_t v18 = 0;
LABEL_20:
  long long v17 = 0;
  ABMServerInternal::broadcast_sync(a1, (uint64_t)__dst, &v18, &v17);
  if (v16) {
    CFRelease(v16);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__dst[0]);
    if (!v12) {
      return;
    }
  }
  else if (!v12)
  {
    return;
  }
  CFRelease(v12);
}

void sub_1C5797BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void ABMServerInternal::start_sync(uint64_t a1, NSObject **a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(NSObject **)(a1 + 112);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    abm::asString();
    size_t v5 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)pthread_attr_t buf = 136315138;
    unint64_t v20 = v5;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Starting ABM with profile: %s", buf, 0xCu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  (*(void (**)(void, void))(**(void **)(a1 + 272) + 88))(*(void *)(a1 + 272), 0);
  (*(void (**)(void))(**(void **)(a1 + 288) + 72))(*(void *)(a1 + 288));
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::initializeDynamicServices(*(ServiceManager **)(a1 + 288), (NSObject **)__p);
  CFAllocatorRef v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6 || (uint64_t v7 = *(void *)(a1 + 8), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v9 = v8;
  __int16 v10 = __p[0];
  uint64_t v11 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal10start_syncEN8dispatch13group_sessionE_block_invoke;
  block[3] = &__block_descriptor_tmp_16_1;
  void block[4] = a1;
  block[5] = v7;
  CFTypeID v15 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v12 = *a2;
  dispatch_group_t group = v12;
  if (v12)
  {
    dispatch_retain(v12);
    dispatch_group_enter(group);
  }
  dispatch_group_notify(v10, v11, block);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  uint64_t v13 = v15;
  if (!v15 || atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_18:
  if (__p[0]) {
    dispatch_release((dispatch_object_t)__p[0]);
  }
}

void sub_1C5797F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  long long v3 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 48) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(NSObject **)(a1 + 48);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  unsigned int v2 = *(NSObject **)(a1 + 48);
  if (v2)
  {
    dispatch_group_leave(v2);
    long long v3 = *(NSObject **)(a1 + 48);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void ___ZN17ABMServerInternal4stopEP16dispatch_group_s_block_invoke(void *a1)
{
  uint64_t v1 = a1[5];
  unsigned int v2 = *(_DWORD *)(v1 + 192);
  if (v2 <= 5)
  {
    char v4 = 1;
    if (((1 << v2) & 0x15) != 0)
    {
      char v4 = 0;
LABEL_20:
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v4;
      return;
    }
    if (((1 << v2) & 0x28) != 0) {
      goto LABEL_20;
    }
    ABMServerInternal::changeState_sync(a1[5], 2u);
    size_t v5 = (const void *)*MEMORY[0x1E4F4C5F0];
    size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C5F0]);
    if (v6 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v9 = v6 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      unint64_t v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      uint64_t v8 = __dst;
      if (!v6) {
        goto LABEL_13;
      }
    }
    memmove(v8, v5, (size_t)v7);
LABEL_13:
    *((unsigned char *)v7 + (void)v8) = 0;
    ABMServerInternal::broadcastServerState_sync((void *)v1, (uint64_t)__dst);
    if (SHIBYTE(v14) < 0) {
      operator delete(__dst[0]);
    }
    uint64_t v11 = a1[6];
    CFTypeRef v12 = v11;
    if (v11)
    {
      dispatch_retain(v11);
      dispatch_group_enter(v11);
    }
    ABMServerInternal::stop_sync(v1, &v12);
    if (v11)
    {
      dispatch_group_leave(v11);
      dispatch_release(v11);
    }
    char v4 = 1;
    goto LABEL_20;
  }
}

void sub_1C579813C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::stop_sync(uint64_t a1, NSObject **a2)
{
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 272) + 88))(*(void *)(a1 + 272), 2);
  CFTypeID v15 = 0xAAAAAAAAAAAAAAAALL;
  ServiceManager::shutdownDynamicServices(*(ServiceManager **)(a1 + 288), &v15);
  char v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (uint64_t v5 = *(void *)(a1 + 8), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = v15;
  uint64_t v9 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal9stop_syncEN8dispatch13group_sessionE_block_invoke;
  block[3] = &__block_descriptor_tmp_19_0;
  void block[4] = a1;
  block[5] = v5;
  uint64_t v13 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = *a2;
  dispatch_group_t group = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(group);
  }
  dispatch_group_notify(v8, v9, block);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  uint64_t v11 = v13;
  if (!v13 || atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_11:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_12:
  if (v15) {
    dispatch_release(v15);
  }
}

void sub_1C5798360(_Unwind_Exception *exception_object)
{
  long long v3 = *(NSObject **)(v1 - 56);
  if (v3) {
    dispatch_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN17ABMServerInternal8shutdownEP16dispatch_group_s_block_invoke(void *a1)
{
  long long v3 = (ABMServerInternal *)a1[5];
  unsigned int v2 = a1[6];
  dispatch_object_t v4 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = ABMServerInternal::checkShutdown_sync(v3, &v4);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_1C5798410(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::checkShutdown_sync(ABMServerInternal *this, dispatch_object_t *a2)
{
  switch(*((_DWORD *)this + 48))
  {
    case 0:
    case 2:
      dispatch_object_t v4 = *a2;
      if (*a2)
      {
        dispatch_retain(*a2);
        dispatch_group_enter(v4);
      }
      uint64_t v5 = *((void *)this + 25);
      *((void *)this + 25) = v4;
      if (!v5) {
        return 1;
      }
      dispatch_group_leave(v5);
      size_t v6 = v5;
      goto LABEL_25;
    case 1:
      ABMServerInternal::changeState_sync(this, 4);
      uint64_t v7 = (const void *)*MEMORY[0x1E4F4C5F0];
      size_t v8 = strlen((const char *)*MEMORY[0x1E4F4C5F0]);
      if (v8 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = (void *)v8;
      if (v8 >= 0x17)
      {
        uint64_t v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v13 = v8 | 7;
        }
        uint64_t v14 = v13 + 1;
        uint64_t v10 = (void **)operator new(v13 + 1);
        __dst[1] = v9;
        unint64_t v17 = v14 | 0x8000000000000000;
        __dst[0] = v10;
      }
      else
      {
        HIBYTE(v17) = v8;
        uint64_t v10 = __dst;
        if (!v8) {
          goto LABEL_19;
        }
      }
      memmove(v10, v7, (size_t)v9);
LABEL_19:
      *((unsigned char *)v9 + (void)v10) = 0;
      ABMServerInternal::broadcastServerState_sync(this, (uint64_t)__dst);
      if (SHIBYTE(v17) < 0) {
        operator delete(__dst[0]);
      }
      uint64_t v11 = *a2;
      CFTypeID v15 = v11;
      if (v11)
      {
        dispatch_retain(v11);
        dispatch_group_enter(v11);
      }
      ABMServerInternal::shutdown_sync((uint64_t)this, &v15);
      if (v11)
      {
LABEL_24:
        dispatch_group_leave(v11);
        size_t v6 = v11;
LABEL_25:
        dispatch_release(v6);
      }
      return 1;
    case 3:
      ABMServerInternal::finishShutdown_sync(this);
      uint64_t v11 = *((void *)this + 25);
      *((void *)this + 25) = 0;
      if (!v11) {
        return 1;
      }
      goto LABEL_24;
    case 4:
      return 0;
    case 5:
      uint64_t v11 = *((void *)this + 25);
      *((void *)this + 25) = 0;
      if (!v11) {
        return 1;
      }
      goto LABEL_24;
    default:
      return 1;
  }
}

void sub_1C5798600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::getRunLoop(ABMServerInternal *this)
{
  return *((void *)this + 26);
}

void ABMServerInternal::shutdown_sync(uint64_t a1, NSObject **a2)
{
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 272) + 88))(*(void *)(a1 + 272), 4);
  dispatch_object_t v4 = *a2;
  uint64_t v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ABMServerInternal::stop_sync(a1, &v5);
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void sub_1C579870C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

char *to_string(unsigned int a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1 >= 6)
  {
    GetABMLogServer(v6);
    long long v3 = *((void *)GetGlobalLogger(v6) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v6);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 67109120;
      LODWORD(v8) = a1;
      _os_log_fault_impl(&dword_1C5767000, v3, OS_LOG_TYPE_FAULT, "Unknown server state %d", buf, 8u);
    }
    GetABMLogServer(v5);
    dispatch_object_t v4 = *((void *)GetGlobalLogger(v5) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      size_t v8 = "ABM ASSERT";
      __int16 v9 = 2080;
      uint64_t v10 = "false";
      __int16 v11 = 2080;
      CFTypeRef v12 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/ABMServer.cpp";
      __int16 v13 = 1024;
      int v14 = 87;
      _os_log_fault_impl(&dword_1C5767000, v4, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    }
    __break(1u);
  }
  return off_1E6516CA0[a1];
}

void sub_1C5798894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C57988A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal17startRunLoop_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  pthread_setname_np("ABM.Server.RunLoop");
  pthread_set_qos_class_self_np(QOS_CLASS_DEFAULT, 0);
  *(void *)(v2 + 208) = CFRunLoopGetCurrent();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  long long v3 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)dispatch_object_t v4 = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I ABM RunLoop Started", v4, 2u);
  }
}

void __copy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  long long v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (v1) {
    dispatch_release(v1);
  }
}

uint64_t sServerRunLoopMain(void (**a1)(void))
{
  memset(&context, 0, sizeof(context));
  CFRunLoopSourceRef v2 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &context);
  if (v2)
  {
    long long v3 = v2;
    Current = CFRunLoopGetCurrent();
    CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D418];
    CFRunLoopAddSource(Current, v3, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
    a1[2](a1);
    while ((CFRunLoopRunInMode(v5, 1.79769313e308, 1u) - 1) > 1)
      ;
    size_t v6 = CFRunLoopGetCurrent();
    CFRunLoopRemoveSource(v6, v3, v5);
    CFRelease(v3);
    return 0;
  }
  size_t v8 = GetOsLogContext()[1];
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
    return 0;
  }
  *(_WORD *)__int16 v9 = 0;
  _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "Failed to create dummySource for runloop", v9, 2u);
  return 0;
}

void ABMServerInternal::stopRunLoop_sync(ABMServerInternal *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  CFRunLoopSourceRef v2 = *((void *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5[0]) = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Stopping ABM RunLoop", (uint8_t *)v5, 2u);
  }
  usleep(0x7A120u);
  CFRunLoopStop(*((CFRunLoopRef *)this + 26));
  *((void *)this + 26) = 0;
  int v3 = pthread_join(*((pthread_t *)this + 27), 0);
  *((void *)this + 27) = 0;
  dispatch_object_t v4 = *((void *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Stopped ABM RunLoop: %d", (uint8_t *)v5, 8u);
  }
}

uint64_t ABMServer::getProfile(ABMServer *this)
{
  return 3;
}

uint64_t ___ZN17ABMServerInternal10start_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  ABMServerInternal::changeState_sync(v1, 1u);
  CFRunLoopSourceRef v2 = (const void *)*MEMORY[0x1E4F4C4D8];
  size_t v3 = strlen((const char *)*MEMORY[0x1E4F4C4D8]);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  dispatch_object_t v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    CFStringRef v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v15 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(v15) = v3;
  CFStringRef v5 = __dst;
  if (v3) {
LABEL_8:
  }
    memmove(v5, v2, (size_t)v4);
  *((unsigned char *)v4 + (void)v5) = 0;
  ABMServerInternal::broadcastServerState_sync((void *)v1, (uint64_t)__dst);
  if (SHIBYTE(v15) < 0)
  {
    operator delete(__dst[0]);
    BOOL isBootSessionChanged = sys::isBootSessionChanged(v10);
    if (!isBootSessionChanged) {
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 272) + 88))(*(void *)(v1 + 272), 1);
    }
  }
  else
  {
    BOOL isBootSessionChanged = sys::isBootSessionChanged(v8);
    if (!isBootSessionChanged) {
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 272) + 88))(*(void *)(v1 + 272), 1);
    }
  }
  if ((sys::updateBootSessionUUID((sys *)isBootSessionChanged) & 1) == 0)
  {
    __int16 v11 = *(NSObject **)(v1 + 112);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int16 v13 = 0;
      _os_log_error_impl(&dword_1C5767000, v11, OS_LOG_TYPE_ERROR, "Failed to update session id", v13, 2u);
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 272) + 88))(*(void *)(v1 + 272), 1);
}

void sub_1C5798D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9XpcServerEEE56c30_ZTSN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  dispatch_object_t v4 = a2[7];
  a1[7] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    CFStringRef v5 = a1[7];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9XpcServerEEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  CFRunLoopSourceRef v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }
  dispatch_object_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN17ABMServerInternal9stop_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  CFRunLoopSourceRef v2 = *(ABMServerInternal **)(a1 + 32);
  uint64_t v1 = v2;
  if (*((_DWORD *)v2 + 48) == 4)
  {
    ABMServerInternal::finishShutdown_sync(v2);
  }
  else
  {
    ABMServerInternal::changeState_sync(v2, 3);
    (*(void (**)(void, uint64_t))(**((void **)v1 + 34) + 88))(*((void *)v1 + 34), 3);
    dispatch_object_t v4 = *((void *)v1 + 14);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__pn_.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I --------- ABM stop completed ---------", (uint8_t *)&buf, 2u);
    }
  }
  *((unsigned char *)&buf.__pn_.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&buf, "/tmp/abm.shutdown");
  if (remove(&buf, v3)) {
    unlink((const char *)&buf);
  }
  CFStringRef v5 = (const void *)*MEMORY[0x1E4F4C4E0];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C4E0]);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v22 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_14;
  }
  HIBYTE(v22) = v6;
  size_t v8 = __dst;
  if (v6) {
LABEL_14:
  }
    memmove(v8, v5, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  ABMServerInternal::broadcastServerState_sync(v1, (uint64_t)__dst);
  if (SHIBYTE(v22) < 0) {
    operator delete(__dst[0]);
  }
  __int16 v11 = (const void *)*MEMORY[0x1E4F4C510];
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C510]);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __int16 v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    int v14 = operator new(v15 + 1);
    __p[1] = v13;
    unint64_t v20 = v16 | 0x8000000000000000;
    __p[0] = v14;
    goto LABEL_24;
  }
  HIBYTE(v20) = v12;
  int v14 = __p;
  if (v12) {
LABEL_24:
  }
    memmove(v14, v11, (size_t)v13);
  *((unsigned char *)v13 + (void)v14) = 0;
  unint64_t v17 = 0;
  char v18 = 0;
  ABMServerInternal::broadcast_sync(v1, (uint64_t)__p, &v18, &v17);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5799094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

void ABMServerInternal::finishStop_sync(ABMServerInternal *this)
{
  ABMServerInternal::changeState_sync((uint64_t)this, 3u);
  (*(void (**)(void, uint64_t))(**((void **)this + 34) + 88))(*((void *)this + 34), 3);
  CFRunLoopSourceRef v2 = *((void *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I --------- ABM stop completed ---------", v3, 2u);
  }
}

void *ABMServerInternal::getClientState_sync@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  CFStringRef v5 = *(void **)(a1 + 152);
  unint64_t result = (void *)(a1 + 152);
  dispatch_object_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a2;
    uint64_t v7 = result;
    do
    {
      unint64_t v8 = v4[4];
      BOOL v9 = v8 >= v6;
      if (v8 >= v6) {
        uint64_t v10 = v4;
      }
      else {
        uint64_t v10 = v4 + 1;
      }
      if (v9) {
        uint64_t v7 = v4;
      }
      dispatch_object_t v4 = (void *)*v10;
    }
    while (*v10);
    if (v7 != result && v6 >= v7[4])
    {
      uint64_t v12 = v7[5];
      uint64_t v11 = v7[6];
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      *a3 = v12;
      a3[1] = v11;
    }
  }
  return result;
}

void ABMServerInternal::handleServerError_sync(uint64_t a1, xpc::object *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 192);
  if (v2 != 3 && v2 != 5)
  {
    CFStringRef v5 = *(NSObject **)(a1 + 112);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      xpc::object::to_string((uint64_t *)__p, a2);
      if (v8 >= 0) {
        unint64_t v6 = __p;
      }
      else {
        unint64_t v6 = (void **)__p[0];
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315138;
      uint64_t v10 = v6;
      _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Server error: %s", buf, 0xCu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void ABMServerInternal::handleNewClient_sync(uint64_t a1@<X0>, xpc::object *a2@<X1>, const void **a3@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  if ((*(_DWORD *)(a1 + 192) & 0xFFFFFFFE) == 4)
  {
    unint64_t v6 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v7 = (char *)MEMORY[0x1C8792C60](*(void *)a2);
    memset(__p, 170, sizeof(__p));
    size_t v8 = strlen(v7);
    if (v8 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    BOOL v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      uint64_t v19 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v19 = v8 | 7;
      }
      uint64_t v20 = v19 + 1;
      uint64_t v10 = operator new(v19 + 1);
      __p[1] = v9;
      __p[2] = (void *)(v20 | 0x8000000000000000);
      __p[0] = v10;
    }
    else
    {
      HIBYTE(__p[2]) = v8;
      uint64_t v10 = __p;
      if (!v8) {
        goto LABEL_22;
      }
    }
    memcpy(v10, v7, (size_t)v9);
LABEL_22:
    *((unsigned char *)v9 + (void)v10) = 0;
    free(v7);
    int v21 = SHIBYTE(__p[2]);
    unint64_t v22 = (void **)__p[0];
    uint64_t v23 = to_string(*(_DWORD *)(a1 + 192));
    long long v24 = __p;
    if (v21 < 0) {
      long long v24 = v22;
    }
    *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
    *(void *)&uint8_t buf[4] = v24;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v23;
    _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Rejecting new client %s because server state is '%s'", buf, 0x16u);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  xpc::object::to_string((uint64_t *)__p, a2);
  uint64_t v11 = (std::string *)operator new(0x38uLL);
  uint64_t v12 = v11;
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v11->__r_.__value_.__r.__words[2] = (std::string::size_type)__p[2];
  }
  v12[1].__r_.__value_.__s.__data_[0] = 0;
  v12[2].__r_.__value_.__r.__words[0] = 0;
  v12[1].__r_.__value_.__r.__words[2] = 0;
  v12[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v12[1].__r_.__value_.__r.__words[2];
  *(void *)std::__fs::filesystem::path buf = v12;
  __int16 v13 = operator new(0x20uLL);
  void *v13 = &unk_1F20FAAC0;
  v13[1] = 0;
  void v13[2] = 0;
  v13[3] = v12;
  *(void *)&uint8_t buf[8] = v13;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    int v14 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_33;
    }
  }
  else
  {
    int v14 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_33;
    }
  }
  uint64_t v15 = (char *)MEMORY[0x1C8792C60](*(void *)a2);
  memset(__p, 170, sizeof(__p));
  size_t v16 = strlen(v15);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    uint64_t v25 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v25 = v16 | 7;
    }
    uint64_t v26 = v25 + 1;
    char v18 = operator new(v25 + 1);
    __p[1] = v17;
    __p[2] = (void *)(v26 | 0x8000000000000000);
    __p[0] = v18;
    goto LABEL_29;
  }
  HIBYTE(__p[2]) = v16;
  char v18 = __p;
  if (v16) {
LABEL_29:
  }
    memcpy(v18, v15, (size_t)v17);
  *((unsigned char *)v17 + (void)v18) = 0;
  free(v15);
  long long v27 = __p;
  if (SHIBYTE(__p[2]) < 0) {
    long long v27 = (void **)__p[0];
  }
  *(_DWORD *)timeval v46 = 136315138;
  unsigned int v47 = v27;
  _os_log_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEFAULT, "#I New client: %s", v46, 0xCu);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    int v29 = (uint64_t **)(a1 + 152);
    long long v28 = *(uint64_t **)(a1 + 152);
    if (v28) {
      goto LABEL_34;
    }
    goto LABEL_43;
  }
LABEL_33:
  int v29 = (uint64_t **)(a1 + 152);
  long long v28 = *(uint64_t **)(a1 + 152);
  if (v28)
  {
LABEL_34:
    unint64_t v30 = *(void *)a2;
    while (1)
    {
      while (1)
      {
        size_t v31 = (uint64_t **)v28;
        unint64_t v32 = v28[4];
        if (v30 >= v32) {
          break;
        }
        long long v28 = *v31;
        int v29 = v31;
        if (!*v31) {
          goto LABEL_44;
        }
      }
      if (v32 >= v30) {
        break;
      }
      long long v28 = v31[1];
      if (!v28)
      {
        int v29 = v31 + 1;
        goto LABEL_44;
      }
    }
    long long v33 = (uint64_t *)v31;
    uint64_t v35 = *(void *)buf;
    uint64_t v34 = *(void *)&buf[8];
    if (!*(void *)&buf[8]) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
LABEL_43:
  size_t v31 = v29;
LABEL_44:
  long long v33 = (uint64_t *)operator new(0x38uLL);
  size_t v36 = *(void **)a2;
  v33[4] = *(void *)a2;
  if (v36) {
    xpc_retain(v36);
  }
  else {
    v33[4] = (uint64_t)xpc_null_create();
  }
  v33[5] = 0;
  v33[6] = 0;
  *long long v33 = 0;
  v33[1] = 0;
  v33[2] = (uint64_t)v31;
  void *v29 = v33;
  uint64_t v37 = **(void **)(a1 + 144);
  int v38 = v33;
  if (v37)
  {
    *(void *)(a1 + 144) = v37;
    int v38 = *v29;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 152), v38);
  ++*(void *)(a1 + 160);
  uint64_t v35 = *(void *)buf;
  uint64_t v34 = *(void *)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_51;
  }
LABEL_50:
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
LABEL_51:
  uint64_t v39 = (std::__shared_weak_count *)v33[6];
  v33[5] = v35;
  v33[6] = v34;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 0x40000000;
  void v43[2] = ___ZN17ABMServerInternal20handleNewClient_syncEN3xpc10connectionE_block_invoke;
  v43[3] = &__block_descriptor_tmp_21_0;
  v43[4] = a1;
  uint64_t v40 = _Block_copy(v43);
  uint64_t v41 = *a3;
  *a3 = v40;
  if (v41) {
    _Block_release(v41);
  }
  uint64_t v42 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
}

void sub_1C57997EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  operator delete(v21);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*v20) {
    _Block_release(*v20);
  }
  _Unwind_Resume(a1);
}

void ABMServerInternal::handleClientError_sync(void *a1, xpc_object_t *a2, xpc::object *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  xpc_object_t v6 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    int v38 = 0;
    uint64_t v39 = 0;
    size_t v8 = a1 + 19;
    uint64_t v7 = (void *)a1[19];
    if (!v7) {
      goto LABEL_15;
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    int v38 = 0;
    uint64_t v39 = 0;
    size_t v8 = a1 + 19;
    uint64_t v7 = (void *)a1[19];
    if (!v7)
    {
LABEL_15:
      __int16 v13 = 0;
      int v14 = 0;
      goto LABEL_16;
    }
  }
  BOOL v9 = v8;
  do
  {
    unint64_t v10 = v7[4];
    BOOL v11 = v10 >= (unint64_t)v6;
    if (v10 >= (unint64_t)v6) {
      uint64_t v12 = v7;
    }
    else {
      uint64_t v12 = v7 + 1;
    }
    if (v11) {
      BOOL v9 = v7;
    }
    uint64_t v7 = (void *)*v12;
  }
  while (*v12);
  if (v9 == v8 || (unint64_t)v6 < v9[4]) {
    goto LABEL_15;
  }
  int v14 = (long long *)v9[5];
  __int16 v13 = (std::__shared_weak_count *)v9[6];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v38 = v14;
  uint64_t v39 = v13;
LABEL_16:
  xpc_release(v6);
  if (!v14) {
    goto LABEL_62;
  }
  memset(__p, 170, 24);
  if (*((char *)v14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v14, *((void *)v14 + 1));
  }
  else
  {
    long long v15 = *v14;
    v40.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v15;
  }
  size_t v16 = std::string::insert(&v40, 0, "Client '", 8uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  char v18 = std::string::append(&v41, "'", 1uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __p[2] = (void *)v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v41.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      uint64_t v20 = *(void *)a3;
      if (*(void *)a3 != MEMORY[0x1E4F14528]) {
        goto LABEL_23;
      }
LABEL_36:
      uint64_t v26 = a1[14];
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        long long v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          long long v27 = (void **)__p[0];
        }
        LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C5767000, v26, OS_LOG_TYPE_DEFAULT, "#I %s disappeared", (uint8_t *)&v41, 0xCu);
      }
      long long v28 = (void *)a1[19];
      if (v28)
      {
        xpc_object_t v29 = *a2;
        uint64_t v30 = (uint64_t)v8;
        do
        {
          unint64_t v31 = v28[4];
          BOOL v32 = v31 >= (unint64_t)v29;
          if (v31 >= (unint64_t)v29) {
            long long v33 = v28;
          }
          else {
            long long v33 = v28 + 1;
          }
          if (v32) {
            uint64_t v30 = (uint64_t)v28;
          }
          long long v28 = (void *)*v33;
        }
        while (*v33);
        if ((void *)v30 != v8 && (unint64_t)v29 >= *(void *)(v30 + 32)) {
          std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase(a1 + 18, v30);
        }
      }
      goto LABEL_60;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  uint64_t v20 = *(void *)a3;
  if (*(void *)a3 == MEMORY[0x1E4F14528]) {
    goto LABEL_36;
  }
LABEL_23:
  if (v20 == MEMORY[0x1E4F14520])
  {
    unint64_t v22 = a1[14];
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_60;
    }
    uint64_t v34 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      uint64_t v34 = (void **)__p[0];
    }
    LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
    uint64_t v35 = "#D %s connection interrupted";
  }
  else
  {
    uint64_t v21 = MEMORY[0x1E4F14550];
    unint64_t v22 = a1[14];
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
    if (v20 != v21)
    {
      if (v23)
      {
        xpc::object::to_string((uint64_t *)&v41, a3);
        long long v24 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          long long v24 = (void **)__p[0];
        }
        uint64_t v25 = (v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v41
            : (std::string *)v41.__r_.__value_.__r.__words[0];
        LODWORD(v40.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
        WORD2(v40.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
        _os_log_debug_impl(&dword_1C5767000, v22, OS_LOG_TYPE_DEBUG, "#D %s %s", (uint8_t *)&v40, 0x16u);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v41.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_62;
          }
          goto LABEL_61;
        }
      }
LABEL_60:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_61;
    }
    if (!v23) {
      goto LABEL_60;
    }
    size_t v36 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      size_t v36 = (void **)__p[0];
    }
    LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
    uint64_t v35 = "#D %s will be terminated";
  }
  _os_log_debug_impl(&dword_1C5767000, v22, OS_LOG_TYPE_DEBUG, v35, (uint8_t *)&v41, 0xCu);
  if (SHIBYTE(__p[2]) < 0) {
LABEL_61:
  }
    operator delete(__p[0]);
LABEL_62:
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1C5799CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1C5799D34(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

const void **ctu::cf::CFSharedRef<void const>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void ABMServerInternal::registerNotification(uint64_t a1, void **a2, char a3, const void **a4)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN17ABMServerInternal20registerNotificationEN3xpc10connectionEbN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_28;
  uint64_t v7 = *a2;
  v9[4] = a1;
  xpc_object_t object = v7;
  if (!v7)
  {
    xpc_object_t object = xpc_null_create();
    char v12 = a3;
    size_t v8 = *a4;
    CFTypeRef cf = v8;
    if (!v8) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(v7);
  char v12 = a3;
  size_t v8 = *a4;
  CFTypeRef cf = v8;
  if (v8) {
LABEL_5:
  }
    CFRetain(v8);
LABEL_6:
  ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v9);
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
}

const void **ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void ___ZN17ABMServerInternal26handleInternalMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  CFTypeRef cf = 0;
  uint64_t v3 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C250], (const __CFString **)*MEMORY[0x1E4F4C4D8], v3, v5);
  xpc_object_t v6 = *(void **)(a1 + 40);
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v7 = (const void *)*MEMORY[0x1E4F4C890];
  size_t v8 = strlen((const char *)*MEMORY[0x1E4F4C890]);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  BOOL v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v12 = v8 | 7;
    }
    uint64_t v13 = v12 + 1;
    unint64_t v10 = (void **)operator new(v12 + 1);
    __dst[1] = v9;
    unint64_t v19 = v13 | 0x8000000000000000;
    __dst[0] = v10;
LABEL_14:
    memmove(v10, v7, (size_t)v9);
    *((unsigned char *)v9 + (void)v10) = 0;
    CFTypeRef v11 = cf;
    if (!cf) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  HIBYTE(v19) = v8;
  unint64_t v10 = __dst;
  if (v8) {
    goto LABEL_14;
  }
  LOBYTE(__dst[0]) = 0;
  CFTypeRef v11 = cf;
  if (!cf) {
    goto LABEL_17;
  }
LABEL_15:
  CFTypeID v14 = CFGetTypeID(v11);
  if (v14 == CFDictionaryGetTypeID())
  {
    long long v17 = (ctu *)v11;
    CFRetain(v11);
    long long v15 = v11;
    goto LABEL_18;
  }
LABEL_17:
  long long v15 = 0;
  long long v17 = 0;
LABEL_18:
  size_t v16 = 0;
  ABMServerInternal::unicast_sync(v2, &object, (uint64_t)__dst, &v17, &v16);
  if (v15) {
    CFRelease(v15);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__dst[0]);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v11) {
    CFRelease(v11);
  }
}

void sub_1C579A084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, xpc_object_t object, const void *a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a19);
  _Unwind_Resume(a1);
}

void ABMServerInternal::unicast_sync(void *a1, xpc_object_t *a2, uint64_t a3, ctu **a4, void **a5)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v10) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v10);
      xpc_object_t v11 = v10;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v10 = 0;
  }
  xpc_release(v10);
  if (*a4) {
    uint64_t v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13)
  {
    ctu::cf_to_xpc((uint64_t *)&v65, *a4, v12);
    xpc_dictionary_set_value(v11, kKeyEventData[0], v65);
    xpc_object_t v14 = v65;
    xpc_object_t v65 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v65);
    xpc_object_t v65 = 0;
  }
  xpc_object_t v15 = xpc_string_create(kCommandSignalNotification[0]);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, kKeyCommand[0], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  long long v17 = (const char *)a3;
  if (*(char *)(a3 + 23) < 0) {
    long long v17 = *(const char **)a3;
  }
  xpc_object_t v18 = xpc_string_create(v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, kKeyEvent[0], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  uint64_t v20 = dispatch_group_create();
  uint64_t v21 = (std::__shared_weak_count *)a1[2];
  if (!v21 || (uint64_t v22 = a1[1], (v23 = std::__shared_weak_count::lock(v21)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v24 = v23;
  atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v25 = *a2;
    if (*a2) {
      goto LABEL_22;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
    unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v25 = *a2;
    if (*a2)
    {
LABEL_22:
      xpc_retain(v25);
      unint64_t v63 = 0;
      unint64_t v64 = 0;
      uint64_t v26 = a1 + 19;
      long long v27 = (void *)a1[19];
      if (!v27) {
        goto LABEL_36;
      }
      goto LABEL_26;
    }
  }
  xpc_object_t v25 = xpc_null_create();
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  uint64_t v26 = a1 + 19;
  long long v27 = (void *)a1[19];
  if (!v27)
  {
LABEL_36:
    unint64_t v32 = 0;
    goto LABEL_37;
  }
LABEL_26:
  long long v28 = v26;
  do
  {
    unint64_t v29 = v27[4];
    BOOL v30 = v29 >= (unint64_t)v25;
    if (v29 >= (unint64_t)v25) {
      unint64_t v31 = v27;
    }
    else {
      unint64_t v31 = v27 + 1;
    }
    if (v30) {
      long long v28 = v27;
    }
    long long v27 = (void *)*v31;
  }
  while (*v31);
  if (v28 == v26 || (unint64_t)v25 < v28[4]) {
    goto LABEL_36;
  }
  unint64_t v32 = v28[5];
  unint64_t v39 = v28[6];
  if (v39) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v63 = v32;
  unint64_t v64 = v39;
LABEL_37:
  xpc_release(v25);
  if (!v32 || (uint64_t *)(v32 + 40) == std::__tree<std::string>::find<std::string>(v32 + 32, (const void **)a3)) {
    goto LABEL_66;
  }
  uint64_t SystemTime = TelephonyUtilGetSystemTime();
  uint64_t v49 = v22;
  uint64_t v34 = (xpc_connection_t *)a2;
  uint64_t v35 = a1[14];
  if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_51;
  }
  size_t v36 = (const void *)a3;
  if (*(char *)(a3 + 23) < 0)
  {
    size_t v36 = *(const void **)a3;
    unint64_t v37 = v63;
    if ((*(char *)(v63 + 23) & 0x80000000) == 0) {
      goto LABEL_42;
    }
  }
  else
  {
    unint64_t v37 = v63;
    if ((*(char *)(v63 + 23) & 0x80000000) == 0)
    {
LABEL_42:
      long long v38 = *(_OWORD *)v37;
      v62.__r_.__value_.__r.__words[2] = *(void *)(v37 + 16);
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v38;
      goto LABEL_48;
    }
  }
  std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v37, *(void *)(v37 + 8));
LABEL_48:
  std::string v40 = &v62;
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string v40 = (std::string *)v62.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
  CFMutableArrayRef v67 = v36;
  __int16 v68 = 2080;
  xpc_object_t v69 = v40;
  __int16 v70 = 2048;
  uint64_t v71 = SystemTime;
  _os_log_impl(&dword_1C5767000, v35, OS_LOG_TYPE_DEFAULT, "#I Sending %s to %s at %llu", buf, 0x20u);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v62.__r_.__value_.__l.__data_);
    if (*a5) {
      goto LABEL_52;
    }
LABEL_65:
    a2 = (xpc_object_t *)v34;
    xpc_connection_send_message(*v34, v11);
    uint64_t v22 = v49;
    goto LABEL_66;
  }
LABEL_51:
  if (!*a5) {
    goto LABEL_65;
  }
LABEL_52:
  std::string v41 = a5;
  dispatch_group_enter(v20);
  uint64_t v42 = *v34;
  xpc_object_t v43 = a1[3];
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
  handler[3] = &__block_descriptor_tmp_36;
  handler[4] = a1;
  handler[5] = v49;
  std::string v56 = v24;
  atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v57 = v63;
  std::string v58 = (std::__shared_weak_count *)v64;
  if (v64) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  uint64_t v60 = SystemTime;
  CFArrayRef v61 = v20;
  xpc_connection_send_message_with_reply(v42, v11, v43, handler);
  a5 = v41;
  a2 = (xpc_object_t *)v34;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unsigned __int8 v44 = v58;
  uint64_t v22 = v49;
  if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
LABEL_66:
  if (!*a5) {
    goto LABEL_80;
  }
  std::string::size_type v45 = a1[3];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_37;
  block[3] = &__block_descriptor_tmp_38;
  void block[4] = a1;
  block[5] = v22;
  std::string::size_type v51 = v24;
  atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v46 = *a2;
  xpc_object_t object = v46;
  if (!v46)
  {
    xpc_object_t object = xpc_null_create();
    if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
      goto LABEL_69;
    }
LABEL_71:
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    goto LABEL_72;
  }
  xpc_retain(v46);
  if (*(char *)(a3 + 23) < 0) {
    goto LABEL_71;
  }
LABEL_69:
  std::string v53 = *(std::string *)a3;
LABEL_72:
  unsigned int v47 = *a5;
  if (*a5) {
    unsigned int v47 = _Block_copy(v47);
  }
  long long aBlock = v47;
  dispatch_group_notify(v20, v45, block);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
LABEL_80:
  dispatch_release(v20);
  uint64_t v48 = (std::__shared_weak_count *)v64;
  if (v64 && !atomic_fetch_add((atomic_ullong *volatile)(v64 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  std::__shared_weak_count::__release_weak(v24);
  xpc_release(v11);
}

void sub_1C579A7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v39 - 168);
  std::__shared_weak_count::__release_weak(v38);
  xpc_release(v37);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void ___ZN17ABMServerInternal20registerNotificationEN3xpc10connectionEbN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (xpc::object *)(a1 + 40);
  xpc_object_t v4 = *(xpc_object_t *)(a1 + 40);
  if (v4)
  {
    xpc_retain(*(xpc_object_t *)(a1 + 40));
    long long v24 = 0;
    xpc_object_t v25 = 0;
    CFAllocatorRef v5 = (void *)(v2 + 152);
    xpc_object_t v6 = *(void **)(v2 + 152);
    if (!v6) {
      goto LABEL_15;
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    long long v24 = 0;
    xpc_object_t v25 = 0;
    CFAllocatorRef v5 = (void *)(v2 + 152);
    xpc_object_t v6 = *(void **)(v2 + 152);
    if (!v6)
    {
LABEL_15:
      xpc_object_t v11 = 0;
      goto LABEL_16;
    }
  }
  uint64_t v7 = v5;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)v4;
    if (v8 >= (unint64_t)v4) {
      xpc_object_t v10 = v6;
    }
    else {
      xpc_object_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    xpc_object_t v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 == v5 || (unint64_t)v4 < v7[4]) {
    goto LABEL_15;
  }
  xpc_object_t v11 = (char *)v7[5];
  xpc_object_t v18 = (std::__shared_weak_count *)v7[6];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v24 = v11;
  xpc_object_t v25 = v18;
LABEL_16:
  xpc_release(v4);
  if (!v11)
  {
    xpc_object_t v16 = *(NSObject **)(v2 + 112);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_38;
    }
    xpc::object::to_string((uint64_t *)&__p, v3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::__fs::filesystem::path buf = 136315138;
    long long v27 = p_p;
    _os_log_error_impl(&dword_1C5767000, v16, OS_LOG_TYPE_ERROR, "%s is not in client list", buf, 0xCu);
    goto LABEL_36;
  }
  int v12 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v13 = *(const void **)(a1 + 48);
  CFTypeRef cf = v13;
  if (v13) {
    CFRetain(v13);
  }
  ServerClientState::registerNotification_sync((void **)&v24, v12 != 0, &cf);
  if (cf) {
    CFRelease(cf);
  }
  xpc_object_t v14 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (v24[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v24, *((void *)v24 + 1));
    }
    else
    {
      long long v15 = *(_OWORD *)v24;
      __p.__r_.__value_.__r.__words[2] = *((void *)v24 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
    }
    xpc_object_t v19 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      xpc_object_t v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v20 = *(void *)(a1 + 48);
    *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
    long long v27 = v19;
    __int16 v28 = 2112;
    uint64_t v29 = v20;
    _os_log_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEFAULT, "#I %s registered for: %@", buf, 0x16u);
LABEL_36:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_38:
  uint64_t v21 = v25;
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1C579ABD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C579ABEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C579AC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get(uint64_t a1)
{
  return *(void *)a1;
}

CFTypeRef __copy_helper_block_e8_40c22_ZTSN3xpc10connectionE48c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (!v4)
  {
    *(void *)(a1 + 40) = xpc_null_create();
    CFTypeRef result = *(CFTypeRef *)(a2 + 48);
    *(void *)(a1 + 48) = result;
    if (!result) {
      return result;
    }
    return CFRetain(result);
  }
  xpc_retain(v4);
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c22_ZTSN3xpc10connectionE48c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

void ___ZN17ABMServerInternal9broadcastENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    uint64_t v3 = *(ctu **)(a1 + 64);
    uint64_t v7 = v3;
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v8 = *(std::string *)(a1 + 40);
  uint64_t v3 = *(ctu **)(a1 + 64);
  uint64_t v7 = v3;
  if (v3) {
LABEL_5:
  }
    CFRetain(v3);
LABEL_6:
  xpc_object_t v4 = *(const void **)(a1 + 72);
  if (v4) {
    CFAllocatorRef v5 = _Block_copy(v4);
  }
  else {
    CFAllocatorRef v5 = 0;
  }
  xpc_object_t v6 = v5;
  ABMServerInternal::broadcast_sync(v2, (uint64_t)&v8, &v7, &v6);
  if (v5) {
    _Block_release(v5);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_1C579ADE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    _Block_release(v16);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    xpc_object_t v6 = *(const void **)(a2 + 64);
    *(void *)(a1 + 64) = v6;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  xpc_object_t v6 = *(const void **)(a2 + 64);
  *(void *)(a1 + 64) = v6;
  if (v6) {
LABEL_5:
  }
    CFRetain(v6);
LABEL_6:
  CFTypeRef result = *(void **)(a2 + 72);
  if (result) {
    CFTypeRef result = _Block_copy(result);
  }
  *(void *)(a1 + 72) = result;
  return result;
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 72);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    CFRelease(v3);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    xpc_object_t v4 = *(void **)(a1 + 40);
    operator delete(v4);
  }
}

void ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && (uint64_t v3 = *(void *)(a1 + 32), v4 = std::__shared_weak_count::lock(v2), (v15 = v4) != 0))
  {
    long long v5 = v4;
    if (*(void *)(a1 + 40))
    {
      xpc_object_t v6 = *(NSObject **)(v3 + 112);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(long long **)(a1 + 56);
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((void *)v7 + 1));
        }
        else
        {
          long long v8 = *v7;
          __p.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        xpc_object_t v11 = (void *)(a1 + 72);
        if (*(char *)(a1 + 95) < 0) {
          xpc_object_t v11 = (void *)*v11;
        }
        uint64_t v12 = *(void *)(a1 + 96);
        *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
        long long v17 = p_p;
        __int16 v18 = 2080;
        xpc_object_t v19 = v11;
        __int16 v20 = 2048;
        uint64_t v21 = v12;
        _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I %s responded to %s sent at %llu", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    BOOL v9 = *(NSObject **)(a1 + 104);
    dispatch_group_leave(v9);
  }
}

void sub_1C579B0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTS17ServerClientState72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3 = *(void *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v4 = *(void *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(void *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(void *)(a2 + 88);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1C579B184(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  std::string::size_type v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTS17ServerClientState72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2) {
      goto LABEL_6;
    }
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
    goto LABEL_7;
  }
LABEL_6:
  std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3) {
    return;
  }
LABEL_7:

  std::__shared_weak_count::__release_weak(v3);
}

uint64_t std::pair<xpc::connection const,ServerClientState>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0;
  return a1;
}

void ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_32(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::string::size_type v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      if (*(void *)(a1 + 40))
      {
        long long v5 = *(NSObject **)(v2 + 112);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          long long v6 = (void *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0) {
            long long v6 = (void *)*v6;
          }
          *(_DWORD *)std::__fs::filesystem::path buf = 136315138;
          long long v8 = v6;
          _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I All clients responded to %s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    std::string::size_type v4 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1C579B40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  long long v5 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  CFTypeRef result = *(void **)(a2 + 80);
  if (result) {
    CFTypeRef result = _Block_copy(result);
  }
  a1[10] = result;
  return result;
}

void sub_1C579B498(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 80);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  else
  {
    std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v3);
}

void ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && (uint64_t v3 = *(void *)(a1 + 32), v4 = std::__shared_weak_count::lock(v2), (v15 = v4) != 0))
  {
    long long v5 = v4;
    if (*(void *)(a1 + 40))
    {
      long long v6 = *(NSObject **)(v3 + 112);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(long long **)(a1 + 56);
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((void *)v7 + 1));
        }
        else
        {
          long long v8 = *v7;
          __p.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        xpc_object_t v11 = (void *)(a1 + 72);
        if (*(char *)(a1 + 95) < 0) {
          xpc_object_t v11 = (void *)*v11;
        }
        uint64_t v12 = *(void *)(a1 + 96);
        *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
        long long v17 = p_p;
        __int16 v18 = 2080;
        xpc_object_t v19 = v11;
        __int16 v20 = 2048;
        uint64_t v21 = v12;
        _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I %s responded to %s sent at %llu", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(a1 + 104);
    dispatch_group_leave(v9);
  }
}

void sub_1C579B6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_37(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v10 = 0;
  xpc_object_t v11 = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    xpc_object_t v11 = v4;
    if (v4)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      if (v10)
      {
        long long v5 = *(NSObject **)(v2 + 112);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          xpc::object::to_string((uint64_t *)__p, (xpc::object *)(a1 + 56));
          long long v6 = (void **)__p[0];
          if (v9 >= 0) {
            long long v6 = __p;
          }
          uint64_t v7 = (void *)(a1 + 64);
          if (*(char *)(a1 + 87) < 0) {
            uint64_t v7 = (void *)*v7;
          }
          *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
          uint64_t v13 = v6;
          __int16 v14 = 2080;
          long long v15 = v7;
          _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Client '%s' responded to %s", buf, 0x16u);
          if (v9 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1C579B87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C579B890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTSKN3xpc10connectionE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  long long v5 = *(void **)(a2 + 56);
  a1[7] = v5;
  if (v5)
  {
    xpc_retain(v5);
    long long v6 = (std::string *)(a1 + 8);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_5:
      long long v7 = *(_OWORD *)(a2 + 64);
      v6->__r_.__value_.__r.__words[2] = *(void *)(a2 + 80);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      goto LABEL_8;
    }
  }
  else
  {
    a1[7] = xpc_null_create();
    long long v6 = (std::string *)(a1 + 8);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
LABEL_8:
  CFTypeRef result = *(void **)(a2 + 88);
  if (result) {
    CFTypeRef result = _Block_copy(result);
  }
  a1[11] = result;
  return result;
}

void sub_1C579B94C(_Unwind_Exception *a1)
{
  xpc::connection::~connection(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTSKN3xpc10connectionE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 88);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t ABMServer::previousShutdownWasClean(ABMServer *this)
{
  if (qword_1EBBDD4D0 != -1) {
    dispatch_once(&qword_1EBBDD4D0, &__block_literal_global_0);
  }
  return _MergedGlobals_0;
}

void ___ZN9ABMServer24previousShutdownWasCleanEv_block_invoke()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  char v18 = 17;
  strcpy(__p, "/tmp/abm.shutdown");
  v0.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v0.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blkstd::string::size_type size = v0;
  *(timespec *)v19.st_qspare = v0;
  v19.st_birthtimespec = v0;
  *(timespec *)&v19.st_std::string::size_type size = v0;
  v19.st_mtimespec = v0;
  v19.st_ctimespec = v0;
  *(timespec *)&v19.st_uid = v0;
  v19.st_atimespec = v0;
  *(timespec *)&v19.st_dev = v0;
  int v1 = stat(__p, &v19);
  int v2 = v1;
  if (v18 < 0)
  {
    operator delete(*(void **)__p);
    if (v2) {
      goto LABEL_3;
    }
LABEL_12:
    GetABMLogServer(&v15);
    long long v8 = *((void *)GetGlobalLogger(&v15) + 4);
    char v9 = v16;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v19.st_dev = 136315138;
      *(void *)&v19.st_mode = "abmserver";
      _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: Previous shutdown was not clean", (uint8_t *)&v19, 0xCu);
    }
    _MergedGlobals_0 = 0;
    return;
  }
  if (!v1) {
    goto LABEL_12;
  }
LABEL_3:
  _MergedGlobals_0 = 1;
  HIBYTE(v19.st_gid) = 17;
  strcpy((char *)&v19, "/tmp/abm.shutdown");
  int v3 = open((const char *)&v19, 513, 420);
  int v4 = v3;
  if (SHIBYTE(v19.st_gid) < 0)
  {
    operator delete(*(void **)&v19.st_dev);
    if (v4 >= 1)
    {
      do
      {
LABEL_5:
        if (!close(v4)) {
          return;
        }
      }
      while (*__error() == 4);
      GetABMLogServer(&v13);
      long long v5 = *((void *)GetGlobalLogger(&v13) + 4);
      long long v6 = v14;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          return;
        }
      }
      else if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        return;
      }
      v19.st_dev = 136315394;
      *(void *)&v19.st_mode = "abmserver";
      WORD2(v19.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v19.st_ino + 6) = (__darwin_ino64_t)"/tmp/abm.shutdown";
      long long v7 = "%s: Failed closing %s";
      goto LABEL_27;
    }
  }
  else if (v3 >= 1)
  {
    goto LABEL_5;
  }
  GetABMLogServer(&v11);
  long long v5 = *((void *)GetGlobalLogger(&v11) + 4);
  uint64_t v10 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v19.st_dev = 136315394;
    *(void *)&v19.st_mode = "abmserver";
    WORD2(v19.st_ino) = 2080;
    *(__darwin_ino64_t *)((char *)&v19.st_ino + 6) = (__darwin_ino64_t)"/tmp/abm.shutdown";
    long long v7 = "%s: Failed creating %s";
LABEL_27:
    _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v19, 0x16u);
  }
}

void sub_1C579BD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C579BDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C579BDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C579BDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServer::getRunLoop(ABMServer *this)
{
  return *(void *)(*(void *)this + 208);
}

uint64_t ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "server.main");
}

uint64_t ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F1218;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F1218;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::__on_zero_shared(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count ***)(a1 + 24);
  if (v1)
  {
    int v2 = v1[1];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      int v3 = v1;
    }
    else
    {
      int v3 = v1;
    }
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599BEA0) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599BEA0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599BEA0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599BEA0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void *std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F12A8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  long long v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = a2;
      *(void *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = a2;
  *(void *)(a2 + 16) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C579C168(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1}::operator() const(ABMServerInternal*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C579C190(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_"
                     "ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3_"
                                "_110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1}::operator() const(ABMServerInternal*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

void std::__shared_ptr_emplace<Registry>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F12F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Registry>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F12F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<Registry>::__on_zero_shared(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3) {
      return;
    }
  }
  else
  {
    unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v3);
}

void std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*a1);
    std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(a1[1]);
    int v2 = (std::__shared_weak_count *)a1[6];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    xpc_release((xpc_object_t)a1[4]);
    operator delete(a1);
  }
}

void _ZNSt3__115allocate_sharedB8ne180100I20BootControllerLegacyNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1@<X8>)
{
  int v2 = (std::__shared_weak_count *)operator new(0x88uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F1348;
  BootController::BootController((BootController *)&v2[1]);
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F3B10;
  LOBYTE(v2[5].__shared_owners_) = 1;
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v2[4].__shared_weak_owners_ = v3;
  v2[5].__vftable = (std::__shared_weak_count_vtbl *)v2;
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1C579C510(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BootControllerLegacy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F1348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BootControllerLegacy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F1348;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<BootControllerLegacy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t ctu::cf::insert<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  long long v6 = value;
  xpc_object_t value = 0;
  ctu::cf::convert_copy();
  long long v7 = value;
  if (v6) {
    BOOL v8 = value == 0;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = !v8;
  if (v8)
  {
    if (!value) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_11:
  if (v6) {
    CFRelease(v6);
  }
  return v9;
}

void sub_1C579C67C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C579C6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    do
    {
      int v4 = v3;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    long long v5 = (void *)a2;
    do
    {
      int v4 = (void *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      long long v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  long long v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  BOOL v8 = *(std::__shared_weak_count **)(a2 + 48);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  xpc_release(*(xpc_object_t *)(a2 + 32));

  operator delete((void *)a2);
}

uint64_t ctu::cf::insert<char const*,char const*>(__CFDictionary *a1, const __CFString **a2, const __CFString **a3, uint64_t a4, const __CFAllocator *a5)
{
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  BOOL v8 = value;
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a3, (const char *)0x8000100, a4, v9);
  uint64_t v10 = value;
  if (v8) {
    BOOL v11 = value == 0;
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v12 = !v11;
  if (v11)
  {
    if (!value) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v8, value);
  }
  CFRelease(v10);
LABEL_11:
  if (v8) {
    CFRelease(v8);
  }
  return v12;
}

void sub_1C579C848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C579C86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  BOOL v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F1390;
  block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

const char *diag::config::toString(unsigned int a1)
{
  if (a1 > 4) {
    return "Unknown";
  }
  else {
    return off_1E6516CE8[a1];
  }
}

{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E6516D10[a1];
  }
}

{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E6516D28[a1];
  }
}

const char *diag::config::toStringCompact(unsigned int a1)
{
  if (a1 > 2) {
    return "unknown";
  }
  else {
    return off_1E6516D40[a1];
  }
}

BOOL diag::config::equal_nocase(const char *a1, const char *a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  return strcasecmp(a1, a2) == 0;
}

uint64_t diag::config::asEnum(uint64_t a1, _DWORD *a2)
{
  char v7 = 4;
  strcpy(v6, "none");
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v3 = (const char *)a1;
  }
  else {
    uint64_t v3 = *(const char **)a1;
  }
  if (!strcasecmp(v3, v6))
  {
    *a2 = 0;
    return 1;
  }
  else
  {
    char v7 = 5;
    strcpy(v6, "reset");
    if (!strcasecmp(v3, v6))
    {
      *a2 = 1;
      return 1;
    }
    else
    {
      char v7 = 11;
      strcpy(v6, "reconfigure");
      int v4 = strcasecmp(v3, v6);
      uint64_t result = 0;
      if (!v4)
      {
        *a2 = 2;
        return 1;
      }
    }
  }
  return result;
}

uint64_t diag::config::getShouldAlwaysFilter(diag::config *this)
{
  int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  int IsInternalBuild = TelephonyUtilIsInternalBuild();
  return (IsCarrierBuild | IsInternalBuild | TelephonyUtilIsVendorBuild()) ^ 1;
}

void coex::Module::create(uint64_t *a1@<X0>, capabilities::abs **a2@<X8>)
{
  *a2 = (capabilities::abs *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (capabilities::abs *)0xAAAAAAAAAAAAAAAALL;
  int v4 = (capabilities::abs *)operator new(0x40uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  char v7 = (std::__shared_weak_count *)a1[1];
  v9[0] = v6;
  v9[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  coex::Module::Module(v4, v9);
  *a2 = v5;
  BOOL v8 = (capabilities::abs *)operator new(0x20uLL);
  *(void *)BOOL v8 = &unk_1F20F1ED0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = v5;
  a2[1] = v8;
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C579CD84(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

capabilities::abs *coex::Module::Module(capabilities::abs *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *((void *)a1 + 1) = v4;
  *((void *)a1 + 2) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)a1 + 3) = 0;
    *((void *)a1 + 4) = 0;
    *((void *)a1 + 5) = 0;
    std::__shared_weak_count::__release_weak(v5);
    *(void *)a1 = &unk_1F20F0BE0;
    std::__shared_weak_count::__release_weak(v5);
  }
  else
  {
    *((void *)a1 + 3) = 0;
    *((void *)a1 + 4) = 0;
    *((void *)a1 + 5) = 0;
    *(void *)a1 = &unk_1F20F0BE0;
  }
  *(void *)a1 = &unk_1F20F13D0;
  *((void *)a1 + 6) = 0;
  *((void *)a1 + 7) = 0;
  if (!capabilities::abs::supportsCoex(a1)) {
    return a1;
  }
  GetABMLogServer(&v15);
  uint64_t v6 = *a2;
  char v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v13 = v6;
  __int16 v14 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  coex::Module::State::create(&v15, &v13, (coex::Module::State **)&v17);
  long long v8 = v17;
  long long v17 = 0uLL;
  CFAllocatorRef v9 = (std::__shared_weak_count *)*((void *)a1 + 7);
  *((_OWORD *)a1 + 3) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  BOOL v11 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_1C579D034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __int16 v14 = v13;
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v12);
  Service::~Service(v11);
  _Unwind_Resume(a1);
}

void sub_1C579D068(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void coex::Module::State::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, coex::Module::State **a3@<X8>)
{
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v7 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v41, v6);
    long long v8 = v41;
    long long v41 = 0uLL;
    CFAllocatorRef v9 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v41 + 1);
    if (*((void *)&v41 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v7 = off_1EBBDD2A0;
  }
  uint64_t v39 = v7;
  std::string v40 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  GetABMLogServer(&v35);
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t *))(*(void *)v7 + 48))(&v37, v7, &v35);
  BOOL v11 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *a3 = (coex::Module::State *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (coex::Module::State *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v13 = (std::__shared_weak_count **)operator new(0x118uLL);
  __int16 v14 = v13;
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  uint64_t v33 = *a1;
  uint64_t v34 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)v38;
  v32[0] = v37;
  v32[1] = v38;
  if (v38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *a2;
  char v18 = (std::__shared_weak_count *)a2[1];
  v31[0] = v17;
  v31[1] = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  coex::Module::State::State((uint64_t)v13, &v33, v32, v31);
  *a3 = (coex::Module::State *)v14;
  a3[1] = (coex::Module::State *)0xAAAAAAAAAAAAAAAALL;
  stat v19 = (std::__shared_weak_count *)operator new(0x20uLL);
  v19->__shared_owners_ = 0;
  p_shared_owners = &v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F1F20;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  a3[1] = (coex::Module::State *)v19;
  uint64_t v21 = v14[10];
  if (v21)
  {
    if (v21->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v14[9] = (std::__shared_weak_count *)v14;
      v14[10] = v19;
      std::__shared_weak_count::__release_weak(v21);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_26:
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        uint64_t v22 = *a3;
        if (!*((void *)*a3 + 7)) {
          goto LABEL_38;
        }
        goto LABEL_30;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v14[9] = (std::__shared_weak_count *)v14;
    v14[10] = v19;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_26;
    }
  }
  uint64_t v22 = *a3;
  if (!*((void *)*a3 + 7)) {
    goto LABEL_38;
  }
LABEL_30:
  BOOL v23 = (std::__shared_weak_count *)*((void *)v22 + 10);
  if (!v23 || (v24 = *((void *)v22 + 9), (xpc_object_t v25 = std::__shared_weak_count::lock(v23)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v26 = v25;
  *(void *)&long long v41 = v24;
  *((void *)&v41 + 1) = v25;
  ctu::LoggerCommonBase::getLogDomain((coex::Module::State *)((char *)v22 + 8));
  uint64_t v39 = v24;
  std::string v40 = v26;
  long long v41 = 0uLL;
  ctu::TrackedLogger::registerLoggerToServer();
  long long v27 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  __int16 v28 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_38:
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v29 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  coex::Module::State::init(*a3);
  uint64_t v30 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v38 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1C579D5A0()
{
}

void sub_1C579D624()
{
}

void sub_1C579D634()
{
}

void sub_1C579D640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C579D654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1C579D670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void coex::Module::~Module(coex::Module *this)
{
  *(void *)this = &unk_1F20F13D0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(void *)this = &unk_1F20FC1C8;
    uint64_t v3 = (void **)*((void *)this + 3);
    if (!v3) {
      goto LABEL_11;
    }
  }
  else
  {
    *(void *)this = &unk_1F20FC1C8;
    uint64_t v3 = (void **)*((void *)this + 3);
    if (!v3) {
      goto LABEL_11;
    }
  }
  uint64_t v4 = (void **)*((void *)this + 4);
  uint64_t v5 = v3;
  if (v4 != v3)
  {
    do
    {
      if (*((char *)v4 - 1) < 0) {
        operator delete(*(v4 - 3));
      }
      v4 -= 3;
    }
    while (v4 != v3);
    uint64_t v5 = (void **)*((void *)this + 3);
  }
  *((void *)this + 4) = v3;
  operator delete(v5);
LABEL_11:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

{
  std::__shared_weak_count *v2;
  void **v3;
  void **v4;
  void **v5;
  std::__shared_weak_count *v6;

  *(void *)this = &unk_1F20F13D0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(void *)this = &unk_1F20FC1C8;
    uint64_t v3 = (void **)*((void *)this + 3);
    if (!v3) {
      goto LABEL_11;
    }
  }
  else
  {
    *(void *)this = &unk_1F20FC1C8;
    uint64_t v3 = (void **)*((void *)this + 3);
    if (!v3) {
      goto LABEL_11;
    }
  }
  uint64_t v4 = (void **)*((void *)this + 4);
  uint64_t v5 = v3;
  if (v4 != v3)
  {
    do
    {
      if (*((char *)v4 - 1) < 0) {
        operator delete(*(v4 - 3));
      }
      v4 -= 3;
    }
    while (v4 != v3);
    uint64_t v5 = (void **)*((void *)this + 3);
  }
  *((void *)this + 4) = v3;
  operator delete(v5);
LABEL_11:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

{
  std::__shared_weak_count *v2;
  void **v3;
  void **v4;
  void **v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F20F13D0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(void *)this = &unk_1F20FC1C8;
    uint64_t v3 = (void **)*((void *)this + 3);
    if (!v3) {
      goto LABEL_11;
    }
  }
  else
  {
    *(void *)this = &unk_1F20FC1C8;
    uint64_t v3 = (void **)*((void *)this + 3);
    if (!v3) {
      goto LABEL_11;
    }
  }
  uint64_t v4 = (void **)*((void *)this + 4);
  uint64_t v5 = v3;
  if (v4 != v3)
  {
    do
    {
      if (*((char *)v4 - 1) < 0) {
        operator delete(*(v4 - 3));
      }
      v4 -= 3;
    }
    while (v4 != v3);
    uint64_t v5 = (void **)*((void *)this + 3);
  }
  *((void *)this + 4) = v3;
  operator delete(v5);
LABEL_11:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }

  operator delete(this);
}

const char *coex::Module::getName(coex::Module *this)
{
  return "coex.mod";
}

unsigned char *coex::Module::getShutdownStages@<X0>(unsigned char *this@<X0>, void *a2@<X8>)
{
  if (*((void *)this + 6))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v3 = operator new(1uLL);
    *a2 = v3;
    *uint64_t v3 = 3;
    this = v3 + 1;
    a2[1] = this;
    a2[2] = this;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

unsigned char *coex::Module::State::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  *uint64_t v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void coex::Module::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = v5;
    if (v5)
    {
      dispatch_retain(v5);
      dispatch_group_enter(v5);
      coex::Module::State::shutdown(v3, a2, &v6);
      dispatch_group_leave(v5);
      dispatch_release(v5);
    }
    else
    {
      coex::Module::State::shutdown(v3, a2, &v6);
    }
  }
}

void coex::Module::State::shutdown(void *a1, char a2, NSObject **a3)
{
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  void v13[2] = ___ZN4coex6Module5State8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v13[3] = &__block_descriptor_tmp_127;
  uint64_t v5 = *a3;
  v13[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v15 = a2;
  uint64_t v6 = (std::__shared_weak_count *)a1[10];
  if (!v6 || (uint64_t v7 = a1[9], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFAllocatorRef v9 = v8;
  uint64_t v10 = a1[11];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F2A88;
  block[5] = v7;
  uint64_t v17 = v9;
  p_shared_owners = &v9->__shared_owners_;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v13;
  dispatch_async(v10, block);
  uint64_t v12 = v17;
  if (!v17 || atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_9:
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void coex::Module::State::init(coex::Module::State *this)
{
  uint64_t v902 = *MEMORY[0x1E4F143B8];
  uint64_t v801 = *((void *)this + 9);
  v790 = (char *)this + 72;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v1 || (uint64_t v2 = std::__shared_weak_count::lock(v1)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v3 = v2;
  p_shared_weak_owners = &v2->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 15);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State4initEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_24;
  void aBlock[4] = this;
  aBlock[5] = v801;
  v867 = v3;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = v6;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v5;
  LODWORD(v891) = 1200;
  if (v6) {
    uint64_t v8 = _Block_copy(v6);
  }
  else {
    uint64_t v8 = 0;
  }
  v890[1] = v8;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v5 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v7) {
    _Block_release(v7);
  }
  CFAllocatorRef v9 = (uint64_t *)*((void *)this + 15);
  v864[0] = MEMORY[0x1E4F143A8];
  v864[1] = 1174405120;
  v864[2] = ___ZN4coex6Module5State4initEv_block_invoke_21;
  v864[3] = &__block_descriptor_tmp_24_1;
  v864[4] = this;
  v864[5] = v801;
  v865 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = _Block_copy(v864);
  uint64_t v11 = v10;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v9;
  LODWORD(v891) = 1201;
  if (v10) {
    uint64_t v12 = _Block_copy(v10);
  }
  else {
    uint64_t v12 = 0;
  }
  v890[1] = v12;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v9 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v11) {
    _Block_release(v11);
  }
  uint64_t v13 = (uint64_t *)*((void *)this + 15);
  v862[0] = MEMORY[0x1E4F143A8];
  v862[1] = 1174405120;
  v862[2] = ___ZN4coex6Module5State4initEv_block_invoke_25;
  v862[3] = &__block_descriptor_tmp_28_0;
  v862[4] = this;
  v862[5] = v801;
  v863 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  __int16 v14 = _Block_copy(v862);
  char v15 = v14;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v13;
  LODWORD(v891) = 1202;
  if (v14) {
    uint64_t v16 = _Block_copy(v14);
  }
  else {
    uint64_t v16 = 0;
  }
  v890[1] = v16;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v13 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v15) {
    _Block_release(v15);
  }
  uint64_t v17 = (uint64_t *)*((void *)this + 15);
  v860[0] = MEMORY[0x1E4F143A8];
  v860[1] = 1174405120;
  v860[2] = ___ZN4coex6Module5State4initEv_block_invoke_29;
  v860[3] = &__block_descriptor_tmp_32_0;
  v860[4] = this;
  v860[5] = v801;
  v861 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v18 = _Block_copy(v860);
  stat v19 = v18;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v17;
  LODWORD(v891) = 1203;
  if (v18) {
    uint64_t v20 = _Block_copy(v18);
  }
  else {
    uint64_t v20 = 0;
  }
  v890[1] = v20;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v17 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v19) {
    _Block_release(v19);
  }
  uint64_t v21 = (uint64_t *)*((void *)this + 15);
  v858[0] = MEMORY[0x1E4F143A8];
  v858[1] = 1174405120;
  v858[2] = ___ZN4coex6Module5State4initEv_block_invoke_33;
  v858[3] = &__block_descriptor_tmp_36_0;
  v858[4] = this;
  v858[5] = v801;
  v859 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v22 = _Block_copy(v858);
  BOOL v23 = v22;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v21;
  LODWORD(v891) = 1206;
  if (v22) {
    uint64_t v24 = _Block_copy(v22);
  }
  else {
    uint64_t v24 = 0;
  }
  v890[1] = v24;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v21 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v23) {
    _Block_release(v23);
  }
  xpc_object_t v25 = (uint64_t *)*((void *)this + 15);
  v856[0] = MEMORY[0x1E4F143A8];
  v856[1] = 1174405120;
  v856[2] = ___ZN4coex6Module5State4initEv_block_invoke_37;
  v856[3] = &__block_descriptor_tmp_40;
  v856[4] = this;
  v856[5] = v801;
  v857 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v26 = _Block_copy(v856);
  long long v27 = v26;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v25;
  LODWORD(v891) = 1204;
  if (v26) {
    __int16 v28 = _Block_copy(v26);
  }
  else {
    __int16 v28 = 0;
  }
  v890[1] = v28;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v25 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v27) {
    _Block_release(v27);
  }
  uint64_t v29 = (uint64_t *)*((void *)this + 15);
  v854[0] = MEMORY[0x1E4F143A8];
  v854[1] = 1174405120;
  v854[2] = ___ZN4coex6Module5State4initEv_block_invoke_41;
  v854[3] = &__block_descriptor_tmp_44;
  v854[4] = this;
  v854[5] = v801;
  v855 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v30 = _Block_copy(v854);
  unint64_t v31 = v30;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v29;
  LODWORD(v891) = 1205;
  if (v30) {
    unint64_t v32 = _Block_copy(v30);
  }
  else {
    unint64_t v32 = 0;
  }
  v890[1] = v32;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v29 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v31) {
    _Block_release(v31);
  }
  uint64_t v33 = (uint64_t *)*((void *)this + 15);
  v852[0] = MEMORY[0x1E4F143A8];
  v852[1] = 1174405120;
  v852[2] = ___ZN4coex6Module5State4initEv_block_invoke_45;
  v852[3] = &__block_descriptor_tmp_48;
  v852[4] = this;
  v852[5] = v801;
  v853 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v34 = _Block_copy(v852);
  uint64_t v35 = v34;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v33;
  LODWORD(v891) = 1207;
  if (v34) {
    size_t v36 = _Block_copy(v34);
  }
  else {
    size_t v36 = 0;
  }
  v890[1] = v36;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v33 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v35) {
    _Block_release(v35);
  }
  unint64_t v37 = (uint64_t *)*((void *)this + 15);
  v850[0] = MEMORY[0x1E4F143A8];
  v850[1] = 1174405120;
  v850[2] = ___ZN4coex6Module5State4initEv_block_invoke_49;
  v850[3] = &__block_descriptor_tmp_52;
  v850[4] = this;
  v850[5] = v801;
  v851 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v38 = _Block_copy(v850);
  uint64_t v39 = v38;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v37;
  LODWORD(v891) = 1208;
  if (v38) {
    std::string v40 = _Block_copy(v38);
  }
  else {
    std::string v40 = 0;
  }
  v890[1] = v40;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v37 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v39) {
    _Block_release(v39);
  }
  long long v41 = (uint64_t *)*((void *)this + 15);
  v848[0] = MEMORY[0x1E4F143A8];
  v848[1] = 1174405120;
  v848[2] = ___ZN4coex6Module5State4initEv_block_invoke_53;
  v848[3] = &__block_descriptor_tmp_56_1;
  v848[4] = this;
  v848[5] = v801;
  v849 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v42 = _Block_copy(v848);
  xpc_object_t v43 = v42;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v41;
  LODWORD(v891) = 1209;
  if (v42) {
    unsigned __int8 v44 = _Block_copy(v42);
  }
  else {
    unsigned __int8 v44 = 0;
  }
  v890[1] = v44;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v41 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v43) {
    _Block_release(v43);
  }
  std::string::size_type v45 = (uint64_t *)*((void *)this + 15);
  v846[0] = MEMORY[0x1E4F143A8];
  v846[1] = 1174405120;
  v846[2] = ___ZN4coex6Module5State4initEv_block_invoke_57;
  v846[3] = &__block_descriptor_tmp_60_2;
  v846[4] = this;
  v846[5] = v801;
  v847 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v46 = _Block_copy(v846);
  unsigned int v47 = v46;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v45;
  LODWORD(v891) = 1210;
  if (v46) {
    uint64_t v48 = _Block_copy(v46);
  }
  else {
    uint64_t v48 = 0;
  }
  v890[1] = v48;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v45 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v47) {
    _Block_release(v47);
  }
  uint64_t v49 = (uint64_t *)*((void *)this + 15);
  v844[0] = MEMORY[0x1E4F143A8];
  v844[1] = 1174405120;
  v844[2] = ___ZN4coex6Module5State4initEv_block_invoke_61;
  v844[3] = &__block_descriptor_tmp_64_0;
  v844[4] = this;
  v844[5] = v801;
  v845 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unsigned int v50 = _Block_copy(v844);
  std::string::size_type v51 = v50;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v49;
  LODWORD(v891) = 1211;
  if (v50) {
    id v52 = _Block_copy(v50);
  }
  else {
    id v52 = 0;
  }
  v890[1] = v52;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v49 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v51) {
    _Block_release(v51);
  }
  std::string v53 = (uint64_t *)*((void *)this + 15);
  v842[0] = MEMORY[0x1E4F143A8];
  v842[1] = 1174405120;
  v842[2] = ___ZN4coex6Module5State4initEv_block_invoke_65;
  v842[3] = &__block_descriptor_tmp_68_1;
  v842[4] = this;
  v842[5] = v801;
  v843 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v54 = _Block_copy(v842);
  std::string v55 = v54;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v53;
  LODWORD(v891) = 1212;
  if (v54) {
    std::string v56 = _Block_copy(v54);
  }
  else {
    std::string v56 = 0;
  }
  v890[1] = v56;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v53 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v55) {
    _Block_release(v55);
  }
  unint64_t v57 = (uint64_t *)*((void *)this + 15);
  v840[0] = MEMORY[0x1E4F143A8];
  v840[1] = 1174405120;
  v840[2] = ___ZN4coex6Module5State4initEv_block_invoke_69;
  v840[3] = &__block_descriptor_tmp_72;
  v840[4] = this;
  v840[5] = v801;
  v841 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string v58 = _Block_copy(v840);
  int v59 = v58;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v57;
  LODWORD(v891) = 1213;
  if (v58) {
    uint64_t v60 = _Block_copy(v58);
  }
  else {
    uint64_t v60 = 0;
  }
  v890[1] = v60;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v57 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v59) {
    _Block_release(v59);
  }
  CFArrayRef v61 = (uint64_t *)*((void *)this + 15);
  v838[0] = MEMORY[0x1E4F143A8];
  v838[1] = 1174405120;
  v838[2] = ___ZN4coex6Module5State4initEv_block_invoke_73;
  v838[3] = &__block_descriptor_tmp_76;
  v838[4] = this;
  v838[5] = v801;
  v839 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string v62 = _Block_copy(v838);
  unint64_t v63 = v62;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v61;
  LODWORD(v891) = 1214;
  if (v62) {
    unint64_t v64 = _Block_copy(v62);
  }
  else {
    unint64_t v64 = 0;
  }
  v890[1] = v64;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v61 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v63) {
    _Block_release(v63);
  }
  xpc_object_t v65 = (uint64_t *)*((void *)this + 15);
  v836[0] = MEMORY[0x1E4F143A8];
  v836[1] = 1174405120;
  v836[2] = ___ZN4coex6Module5State4initEv_block_invoke_77;
  v836[3] = &__block_descriptor_tmp_80_0;
  v836[4] = this;
  v836[5] = v801;
  v837 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFArrayRef v66 = _Block_copy(v836);
  CFMutableArrayRef v67 = v66;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v65;
  LODWORD(v891) = 1215;
  if (v66) {
    __int16 v68 = _Block_copy(v66);
  }
  else {
    __int16 v68 = 0;
  }
  v890[1] = v68;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v65 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v67) {
    _Block_release(v67);
  }
  xpc_object_t v69 = (uint64_t *)*((void *)this + 15);
  v834[0] = MEMORY[0x1E4F143A8];
  v834[1] = 1174405120;
  v834[2] = ___ZN4coex6Module5State4initEv_block_invoke_81;
  v834[3] = &__block_descriptor_tmp_84;
  v834[4] = this;
  v834[5] = v801;
  v835 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  __int16 v70 = _Block_copy(v834);
  uint64_t v71 = v70;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v69;
  LODWORD(v891) = 1216;
  if (v70) {
    uint64_t v72 = _Block_copy(v70);
  }
  else {
    uint64_t v72 = 0;
  }
  v890[1] = v72;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v69 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v71) {
    _Block_release(v71);
  }
  CFDataRef v73 = (uint64_t *)*((void *)this + 15);
  v832[0] = MEMORY[0x1E4F143A8];
  v832[1] = 1174405120;
  v832[2] = ___ZN4coex6Module5State4initEv_block_invoke_85;
  v832[3] = &__block_descriptor_tmp_88;
  v832[4] = this;
  v832[5] = v801;
  v833 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v74 = _Block_copy(v832);
  uint64_t v75 = v74;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v73;
  LODWORD(v891) = 1221;
  if (v74) {
    CFArrayRef v76 = _Block_copy(v74);
  }
  else {
    CFArrayRef v76 = 0;
  }
  v890[1] = v76;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v73 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v75) {
    _Block_release(v75);
  }
  CFRange v77 = (uint64_t *)*((void *)this + 15);
  v830[0] = MEMORY[0x1E4F143A8];
  v830[1] = 1174405120;
  v830[2] = ___ZN4coex6Module5State4initEv_block_invoke_89;
  v830[3] = &__block_descriptor_tmp_92;
  v830[4] = this;
  v830[5] = v801;
  v831 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFRange v78 = _Block_copy(v830);
  xpc_object_t v79 = v78;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v77;
  LODWORD(v891) = 1224;
  if (v78) {
    CFArrayRef v80 = _Block_copy(v78);
  }
  else {
    CFArrayRef v80 = 0;
  }
  v890[1] = v80;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v77 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v79) {
    _Block_release(v79);
  }
  CFArrayRef v81 = (uint64_t *)*((void *)this + 15);
  v828[0] = MEMORY[0x1E4F143A8];
  v828[1] = 1174405120;
  v828[2] = ___ZN4coex6Module5State4initEv_block_invoke_93;
  v828[3] = &__block_descriptor_tmp_96;
  v828[4] = this;
  v828[5] = v801;
  v829 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v82 = _Block_copy(v828);
  CFMutableDictionaryRef v83 = v82;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v81;
  LODWORD(v891) = 1222;
  if (v82) {
    xpc_object_t v84 = _Block_copy(v82);
  }
  else {
    xpc_object_t v84 = 0;
  }
  v890[1] = v84;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v81 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v83) {
    _Block_release(v83);
  }
  uint64_t v85 = (uint64_t *)*((void *)this + 15);
  v826[0] = MEMORY[0x1E4F143A8];
  v826[1] = 1174405120;
  v826[2] = ___ZN4coex6Module5State4initEv_block_invoke_97;
  v826[3] = &__block_descriptor_tmp_100;
  v826[4] = this;
  v826[5] = v801;
  v827 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFArrayRef v86 = _Block_copy(v826);
  size_t v87 = v86;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v85;
  LODWORD(v891) = 1217;
  if (v86) {
    size_t v88 = _Block_copy(v86);
  }
  else {
    size_t v88 = 0;
  }
  v890[1] = v88;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v85 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v87) {
    _Block_release(v87);
  }
  xpc_object_t v89 = (uint64_t *)*((void *)this + 15);
  v824[0] = MEMORY[0x1E4F143A8];
  v824[1] = 1174405120;
  v824[2] = ___ZN4coex6Module5State4initEv_block_invoke_101;
  v824[3] = &__block_descriptor_tmp_104;
  v824[4] = this;
  v824[5] = v801;
  v825 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFArrayRef v90 = _Block_copy(v824);
  CFArrayRef v91 = v90;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v89;
  LODWORD(v891) = 1218;
  if (v90) {
    uint64_t v92 = _Block_copy(v90);
  }
  else {
    uint64_t v92 = 0;
  }
  v890[1] = v92;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v89 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v91) {
    _Block_release(v91);
  }
  uint64_t v93 = (uint64_t *)*((void *)this + 15);
  v822[0] = MEMORY[0x1E4F143A8];
  v822[1] = 1174405120;
  v822[2] = ___ZN4coex6Module5State4initEv_block_invoke_105;
  v822[3] = &__block_descriptor_tmp_108;
  v822[4] = this;
  v822[5] = v801;
  v823 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v94 = _Block_copy(v822);
  uint64_t v95 = v94;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v93;
  LODWORD(v891) = 1219;
  if (v94) {
    CFArrayRef v96 = _Block_copy(v94);
  }
  else {
    CFArrayRef v96 = 0;
  }
  v890[1] = v96;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v93 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v95) {
    _Block_release(v95);
  }
  uint64_t v97 = (uint64_t *)*((void *)this + 15);
  v820[0] = MEMORY[0x1E4F143A8];
  v820[1] = 1174405120;
  v820[2] = ___ZN4coex6Module5State4initEv_block_invoke_109;
  v820[3] = &__block_descriptor_tmp_112_1;
  v820[4] = this;
  v820[5] = v801;
  v821 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v98 = _Block_copy(v820);
  xpc_object_t v99 = v98;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v97;
  LODWORD(v891) = 1220;
  if (v98) {
    CFArrayRef v100 = _Block_copy(v98);
  }
  else {
    CFArrayRef v100 = 0;
  }
  v890[1] = v100;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v97 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v99) {
    _Block_release(v99);
  }
  CFArrayRef v101 = (uint64_t *)*((void *)this + 15);
  v818[0] = MEMORY[0x1E4F143A8];
  v818[1] = 1174405120;
  v818[2] = ___ZN4coex6Module5State4initEv_block_invoke_113;
  v818[3] = &__block_descriptor_tmp_116;
  v818[4] = this;
  v818[5] = v801;
  v819 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v102 = _Block_copy(v818);
  v103 = v102;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v101;
  LODWORD(v891) = 1223;
  if (v102) {
    xpc_object_t v104 = _Block_copy(v102);
  }
  else {
    xpc_object_t v104 = 0;
  }
  v890[1] = v104;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v101 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v103) {
    _Block_release(v103);
  }
  uint64_t v105 = (void *)*((void *)this + 15);
  v877[0] = (void *)MEMORY[0x1E4F143A8];
  v877[1] = (void *)0x40000000;
  *(void *)&long long v878 = ___ZN4coex9XpcClient5startEv_block_invoke;
  *((void *)&v878 + 1) = &__block_descriptor_tmp_4;
  *(void *)&long long v879 = v105;
  v868 = v877;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 0x40000000;
  *(void *)&long long v889 = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_14_0;
  v890[0] = v105 + 1;
  v890[1] = &v868;
  CFDictionaryRef v106 = v105[3];
  if (v105[4]) {
    dispatch_async_and_wait(v106, &block);
  }
  else {
    dispatch_sync(v106, &block);
  }
  uint64_t v793 = *((void *)this + 13);
  v868 = (void **)MEMORY[0x1E4F143A8];
  uint64_t v869 = 0x40000000;
  v870 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvvENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEEEENS7_5mutexEEES3_vJEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke;
  v871 = &__block_descriptor_tmp_366;
  v872 = v790;
  v873 = coex::Module::State::handleCommandDriverStarted_sync;
  uint64_t v874 = 0;
  size_t v107 = _Block_copy(&v868);
  v785 = v3;
  size_t v108 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v108 || (v109 = *((void *)this + 9), (CFTypeID v110 = std::__shared_weak_count::lock(v108)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFNumberRef v111 = v110;
  uint64_t v112 = *((void *)this + 11);
  dispatch_object_t v875 = v112;
  v783 = v107;
  if (v107) {
    uint64_t v113 = _Block_copy(v107);
  }
  else {
    uint64_t v113 = 0;
  }
  v876 = v113;
  dispatch_retain(v112);
  long long v878 = 0u;
  *(_OWORD *)v877 = 0u;
  dispatch_object_t v881 = v112;
  if (v113) {
    uint64_t v113 = _Block_copy(v113);
  }
  v882 = v113;
  dispatch_retain(v112);
  dispatch_object_t object = v112;
  v786 = v111;
  if (!v113)
  {
    v884 = 0;
    dispatch_retain(v112);
    goto LABEL_199;
  }
  xpc_object_t v114 = _Block_copy(v113);
  v884 = v114;
  dispatch_retain(v112);
  if (!v114)
  {
LABEL_199:
    dispatch_retain(v112);
    v885 = 0;
    goto LABEL_200;
  }
  int v115 = _Block_copy(v114);
  dispatch_retain(v112);
  v885 = 0;
  if (!v115)
  {
LABEL_200:
    dispatch_retain(v112);
    v777 = 0;
    char v120 = 1;
LABEL_201:
    dispatch_retain(v112);
    v769 = 0;
    char v121 = 1;
LABEL_202:
    dispatch_retain(v112);
    uint64_t v117 = 0;
    char v122 = 1;
LABEL_203:
    dispatch_retain(v112);
    uint64_t v118 = 0;
    unint64_t v886 = (unint64_t)v112;
    char v123 = 1;
    goto LABEL_204;
  }
  CFArrayRef v116 = _Block_copy(v115);
  dispatch_retain(v112);
  v777 = v115;
  if (!v116)
  {
    char v120 = 0;
    goto LABEL_201;
  }
  uint64_t v117 = _Block_copy(v116);
  dispatch_retain(v112);
  v769 = v116;
  if (!v117)
  {
    char v120 = 0;
    char v121 = 0;
    goto LABEL_202;
  }
  uint64_t v118 = _Block_copy(v117);
  dispatch_retain(v112);
  if (!v118)
  {
    char v120 = 0;
    char v121 = 0;
    char v122 = 0;
    goto LABEL_203;
  }
  CFArrayRef v119 = _Block_copy(v118);
  dispatch_retain(v112);
  unint64_t v886 = (unint64_t)v112;
  if (v119)
  {
    char v120 = 0;
    char v121 = 0;
    char v122 = 0;
    char v123 = 0;
    v887 = _Block_copy(v119);
    dispatch_retain(v112);
    dispatch_release(v112);
    _Block_release(v119);
    goto LABEL_205;
  }
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
LABEL_204:
  v887 = 0;
  dispatch_retain(v112);
  dispatch_release(v112);
LABEL_205:
  dispatch_release(v112);
  if ((v123 & 1) == 0) {
    _Block_release(v118);
  }
  dispatch_release(v112);
  if ((v122 & 1) == 0) {
    _Block_release(v117);
  }
  v885 = boost::function0<void>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>)::stored_vtable;
  dispatch_release(v112);
  if ((v121 & 1) == 0) {
    _Block_release(v769);
  }
  dispatch_release(v112);
  if ((v120 & 1) == 0) {
    _Block_release(v777);
  }
  *((void *)&v889 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v889 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&blocuint64_t k = 0;
  boost::function0<void>::move_assign((uint64_t)&block, (uint64_t *)&v885);
  boost::function0<void>::move_assign((uint64_t)&v885, (uint64_t *)&v878 + 1);
  boost::function0<void>::move_assign((uint64_t)&v878 + 8, (uint64_t *)&block);
  if ((void)block)
  {
    if ((block & 1) == 0)
    {
      unsigned int v124 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
      if (v124) {
        v124((char *)&block + 8, (char *)&block + 8, 2);
      }
    }
  }
  if (v885)
  {
    if ((v885 & 1) == 0)
    {
      unsigned int v125 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v885 & 0xFFFFFFFFFFFFFFFELL);
      if (v125) {
        v125((uint64_t)&v886, &v886, 2u);
      }
    }
    v885 = 0;
  }
  dispatch_release(object);
  if (v884) {
    _Block_release(v884);
  }
  dispatch_release(v881);
  if (v882) {
    _Block_release(v882);
  }
  atomic_fetch_add_explicit(&v786->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v126 = operator new(0x18uLL);
  void *v126 = &unk_1F20F2398;
  v126[1] = v109;
  v126[2] = v786;
  atomic_fetch_add_explicit(&v786->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v127 = operator new(0x18uLL);
  *uint64_t v127 = &unk_1F20F2398;
  v127[1] = v109;
  CFArrayRef v127[2] = v786;
  atomic_fetch_add_explicit(&v786->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)&block + 1) = v127;
  LODWORD(block) = 2;
  xpc_object_t v128 = v877[1];
  if (v877[1] >= (void *)v878)
  {
    uint64_t v131 = (void *)std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v877, (uint64_t)&block);
    xpc_object_t v130 = v786;
  }
  else
  {
    int v129 = operator new(0x18uLL);
    void *v129 = &unk_1F20F2398;
    v129[1] = v109;
    xpc_object_t v130 = v786;
    CFArrayRef v129[2] = v786;
    atomic_fetch_add_explicit(&v786->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v128[1] = v129;
    *(_DWORD *)xpc_object_t v128 = 2;
    uint64_t v131 = v128 + 3;
  }
  v877[1] = v131;
  boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&block);
  (*(void (**)(void *))(*v126 + 8))(v126);
  std::__shared_weak_count::__release_weak(v130);
  uint64_t v132 = *(uint64_t ***)(v793 + 128);
  *(void *)&long long v133 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v133 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v897 = v133;
  long long v896 = v133;
  long long v895 = v133;
  long long v894 = v133;
  long long v893 = v133;
  long long v892 = v133;
  long long v891 = v133;
  *(_OWORD *)v890 = v133;
  long long v889 = v133;
  blocuint64_t k = v133;
  xpc_object_t v134 = (pthread_mutex_t *)v132[3];
  unint64_t v898 = 10;
  std::string __p = &block;
  uint64_t v900 = 0;
  v901 = v134;
  pthread_mutex_lock(v134);
  unint64_t v886 = 0xAAAAAAAAAAAAAAAALL;
  v885 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
  unsigned int v135 = (atomic_uint *)v132[1];
  v794 = (uint64_t ***)v132;
  if (!v135 || atomic_load_explicit(v135 + 2, memory_order_acquire) != 1)
  {
    uint64_t v139 = (uint64_t **)operator new(0x20uLL);
    xpc_object_t v140 = *v132;
    uint64_t v141 = **v132;
    v778 = v139;
    xpc_object_t v142 = operator new(0x40uLL);
    CFArrayRef v143 = v142;
    *xpc_object_t v142 = v142;
    v142[1] = v142;
    v142[2] = 0;
    CFArrayRef v144 = *(void **)(v141 + 8);
    if (v144 != (void *)v141)
    {
      uint64_t v145 = 0;
      uint64_t v146 = v142;
      do
      {
        unsigned int v147 = operator new(0x20uLL);
        v147[2] = v144[2];
        uint64_t v148 = v144[3];
        v147[3] = v148;
        if (v148)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v148 + 8), 1u, memory_order_relaxed);
          uint64_t v146 = (void *)*v143;
          uint64_t v145 = v143[2];
        }
        *unsigned int v147 = v146;
        v147[1] = v143;
        v146[1] = v147;
        void *v143 = v147;
        v143[2] = ++v145;
        CFArrayRef v144 = (void *)v144[1];
        uint64_t v146 = v147;
      }
      while (v144 != (void *)v141);
    }
    v770 = v140;
    v143[3] = 0;
    uint64_t v149 = (void **)(v143 + 3);
    v143[4] = 0;
    CFMutableDictionaryRef v150 = v143 + 4;
    v143[5] = 0;
    *((unsigned char *)v143 + 48) = *(unsigned char *)(v141 + 48);
    v143[3] = v143 + 4;
    CFMutableDictionaryRef v151 = *(void **)(v141 + 24);
    CFMutableDictionaryRef v152 = (void *)(v141 + 32);
    if (v151 == (void *)(v141 + 32))
    {
LABEL_239:
      *((unsigned char *)v143 + 56) = *(unsigned char *)(v141 + 56);
      uint64_t v153 = *(void **)(v141 + 24);
      if (v153 != v152)
      {
        CFMutableDictionaryRef v154 = (void *)v143[3];
        uint64_t v155 = v143[1];
        do
        {
          v154[6] = v155;
          uint64_t v156 = v141;
          if (v153 != v152) {
            uint64_t v156 = v153[6];
          }
          uint64_t v157 = (void *)v153[1];
          xpc_object_t v158 = v157;
          CFMutableDictionaryRef v159 = v153;
          if (v157)
          {
            do
            {
              CFMutableDictionaryRef v160 = v158;
              xpc_object_t v158 = (void *)*v158;
            }
            while (v158);
          }
          else
          {
            do
            {
              CFMutableDictionaryRef v160 = (void *)v159[2];
              BOOL v205 = *v160 == (void)v159;
              CFMutableDictionaryRef v159 = v160;
            }
            while (!v205);
          }
          uint64_t v161 = v141;
          if (v160 != v152) {
            uint64_t v161 = v160[6];
          }
          while (v156 != v161)
          {
            uint64_t v156 = *(void *)(v156 + 8);
            uint64_t v155 = *(void *)(v155 + 8);
          }
          if (v157)
          {
            do
            {
              CFMutableDictionaryRef v162 = v157;
              uint64_t v157 = (void *)*v157;
            }
            while (v157);
          }
          else
          {
            do
            {
              CFMutableDictionaryRef v162 = (void *)v153[2];
              BOOL v205 = *v162 == (void)v153;
              uint64_t v153 = v162;
            }
            while (!v205);
          }
          CFMutableDictionaryRef v163 = (void *)v154[1];
          if (v163)
          {
            do
            {
              CFMutableDictionaryRef v164 = v163;
              CFMutableDictionaryRef v163 = (void *)*v163;
            }
            while (v163);
          }
          else
          {
            do
            {
              CFMutableDictionaryRef v164 = (void *)v154[2];
              BOOL v205 = *v164 == (void)v154;
              CFMutableDictionaryRef v154 = v164;
            }
            while (!v205);
          }
          uint64_t v153 = v162;
          CFMutableDictionaryRef v154 = v164;
        }
        while (v162 != v152);
      }
      *v778 = v143;
      v778[1] = 0;
      unint64_t v184 = (uint64_t *)operator new(0x18uLL);
      uint64_t v132 = (uint64_t **)v794;
      v184[1] = 0x100000001;
      *unint64_t v184 = (uint64_t)&unk_1F20F2020;
      v184[2] = (uint64_t)v143;
      v778[1] = v184;
      v778[2] = (uint64_t *)v770[2];
      uint64_t v185 = v770[3];
      v778[3] = (uint64_t *)v185;
      if (v185) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v185 + 8), 1u, memory_order_relaxed);
      }
      uint64_t v186 = (uint64_t **)operator new(0x18uLL);
      v186[1] = (uint64_t *)0x100000001;
      *uint64_t v186 = (uint64_t *)&unk_1F20F1FB0;
      v186[2] = (uint64_t *)v778;
      v187 = (atomic_uint *)v794[1];
      *v794 = v778;
      v794[1] = v186;
      if (v187)
      {
        if (atomic_fetch_add(v187 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v187 + 16))(v187);
          if (atomic_fetch_add(v187 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v187 + 24))(v187);
          }
        }
      }
      int v138 = 0;
      xpc_object_t v136 = **v794;
LABEL_318:
      unsigned int v137 = (uint64_t *)v136[1];
      if (v136 == v137) {
        goto LABEL_418;
      }
      goto LABEL_319;
    }
    while (1)
    {
      int v165 = *((_DWORD *)v151 + 8);
      CFMutableDictionaryRef v166 = (void *)*v150;
      v167 = v143 + 4;
      if (*v149 != v150)
      {
        CFMutableDictionaryRef v168 = (void *)*v150;
        uint64_t v169 = v143 + 4;
        if (v166)
        {
          do
          {
            v167 = v168;
            CFMutableDictionaryRef v168 = (void *)v168[1];
          }
          while (v168);
        }
        else
        {
          do
          {
            v167 = (void *)v169[2];
            BOOL v205 = *v167 == (void)v169;
            uint64_t v169 = v167;
          }
          while (v205);
        }
        int v170 = *((_DWORD *)v151 + 10);
        int v171 = *((_DWORD *)v167 + 8);
        if (v171 == v165)
        {
          if (v165 != 1) {
            goto LABEL_284;
          }
          if (*((_DWORD *)v167 + 10) >= v170)
          {
            uint64_t v172 = (void *)*v150;
            uint64_t v173 = v143 + 4;
            CFMutableDictionaryRef v174 = v143 + 4;
            if (v166) {
              goto LABEL_288;
            }
LABEL_295:
            v178 = operator new(0x38uLL);
            long long v179 = *((_OWORD *)v151 + 2);
            v178[6] = v151[6];
            *((_OWORD *)v178 + 2) = v179;
            void *v178 = 0;
            v178[1] = 0;
            v178[2] = v174;
            *uint64_t v173 = v178;
            unint64_t v180 = (void *)**v149;
            if (v180)
            {
              *uint64_t v149 = v180;
              v178 = (void *)*v173;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v143[4], v178);
            ++v143[5];
            goto LABEL_298;
          }
        }
        else if (v171 >= v165)
        {
LABEL_284:
          uint64_t v173 = v143 + 4;
          CFMutableDictionaryRef v174 = v143 + 4;
          if (!v166) {
            goto LABEL_295;
          }
          uint64_t v172 = (void *)*v150;
          if (v165 != 1)
          {
            int v175 = *((_DWORD *)v166 + 8);
            CFMutableDictionaryRef v174 = (void *)*v150;
            while (v165 != v175)
            {
              if (v165 < v175)
              {
                uint64_t v183 = *v174;
                uint64_t v173 = v174;
                if (!*v174) {
                  goto LABEL_295;
                }
              }
              else
              {
                if (v175 >= v165) {
                  goto LABEL_298;
                }
                uint64_t v183 = v174[1];
                if (!v183) {
                  goto LABEL_294;
                }
              }
              int v175 = *(_DWORD *)(v183 + 32);
              CFMutableDictionaryRef v174 = (void *)v183;
            }
            goto LABEL_298;
          }
          while (1)
          {
LABEL_288:
            CFMutableDictionaryRef v174 = v172;
            int v176 = *((_DWORD *)v172 + 8);
            if (v176 == 1)
            {
              int v177 = *((_DWORD *)v172 + 10);
              if (v177 > v170) {
                goto LABEL_287;
              }
              if (v177 >= v170) {
                goto LABEL_298;
              }
            }
            else if (v176 > 1)
            {
LABEL_287:
              uint64_t v172 = (void *)*v172;
              uint64_t v173 = v174;
              if (!*v174) {
                goto LABEL_295;
              }
              continue;
            }
            uint64_t v172 = (void *)v172[1];
            if (!v172)
            {
LABEL_294:
              uint64_t v173 = v174 + 1;
              goto LABEL_295;
            }
          }
        }
      }
      if (v166) {
        CFMutableDictionaryRef v174 = v167;
      }
      else {
        CFMutableDictionaryRef v174 = v143 + 4;
      }
      if (v166) {
        uint64_t v173 = v167 + 1;
      }
      else {
        uint64_t v173 = v143 + 4;
      }
      if (!*v173) {
        goto LABEL_295;
      }
LABEL_298:
      uint64_t v181 = (void *)v151[1];
      if (v181)
      {
        do
        {
          CFDictionaryRef v182 = v181;
          uint64_t v181 = (void *)*v181;
        }
        while (v181);
      }
      else
      {
        do
        {
          CFDictionaryRef v182 = (void *)v151[2];
          BOOL v205 = *v182 == (void)v151;
          CFMutableDictionaryRef v151 = v182;
        }
        while (!v205);
      }
      CFMutableDictionaryRef v151 = v182;
      if (v182 == v152) {
        goto LABEL_239;
      }
    }
  }
  xpc_object_t v136 = (uint64_t *)**v132;
  unsigned int v137 = v132[2];
  int v138 = 2;
  if (v137 == v136) {
    goto LABEL_318;
  }
LABEL_319:
  int v188 = 0;
  unsigned int v189 = v138 - 1;
  do
  {
    uint64_t v192 = v137[2];
    v193 = *(uint64_t **)(v192 + 32);
    if (v193)
    {
      for (uint64_t i = *v193; i != v193[1]; i += 24)
      {
        if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
        {
          if ((*(uint64_t (**)(void))(**(void **)(i + 8) + 24))(*(void *)(i + 8))) {
            goto LABEL_336;
          }
        }
        else
        {
          uint64_t v195 = *(void *)(i + 16);
          if (!v195 || !atomic_load_explicit((atomic_uint *volatile)(v195 + 8), memory_order_acquire))
          {
LABEL_336:
            if (*(unsigned char *)(v192 + 24))
            {
              *(unsigned char *)(v192 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v192, &block);
            }
            break;
          }
        }
      }
    }
    uint64_t v190 = v137[2];
    if (*(unsigned char *)(v190 + 24))
    {
      xpc_object_t v136 = (uint64_t *)v137[1];
      goto LABEL_322;
    }
    uint64_t v196 = **v132;
    v198 = (uint64_t **)(v196 + 32);
    uint64_t v197 = *(void *)(v196 + 32);
    if (!v197)
    {
      if (*(uint64_t **)(v196 + 80) != v137) {
        goto LABEL_413;
      }
      v220 = (uint64_t *)v137[1];
      v222 = (uint64_t **)(v196 + 32);
      v201 = (uint64_t *)(v196 + 32);
      if (v220 != (uint64_t *)v196) {
        goto LABEL_409;
      }
LABEL_391:
      v225 = (uint64_t *)v201[1];
      v226 = v201;
      if (v225)
      {
        do
        {
          v227 = v225;
          v225 = (uint64_t *)*v225;
        }
        while (v225);
      }
      else
      {
        do
        {
          v227 = (uint64_t *)v226[2];
          BOOL v205 = *v227 == (void)v226;
          v226 = v227;
        }
        while (!v205);
      }
      if (*(uint64_t **)(v196 + 24) == v201) {
        *(void *)(v196 + 24) = v227;
      }
      --*(void *)(v196 + 40);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v197, v201);
      operator delete(v201);
      goto LABEL_413;
    }
    int v199 = *(_DWORD *)(v190 + 64);
    int v200 = *(_DWORD *)(v190 + 72);
    v201 = (uint64_t *)(v196 + 32);
    uint64_t v202 = *(void *)(v196 + 32);
    if (v199 == 1)
    {
      v201 = (uint64_t *)(v196 + 32);
      uint64_t v203 = *(void *)(v196 + 32);
      do
      {
        while (1)
        {
          int v209 = *(_DWORD *)(v203 + 32);
          BOOL v210 = v209 < 1;
          if (v209 == 1) {
            BOOL v210 = *(_DWORD *)(v203 + 40) < v200;
          }
          if (!v210) {
            break;
          }
          uint64_t v203 = *(void *)(v203 + 8);
          if (!v203) {
            goto LABEL_357;
          }
        }
        v201 = (uint64_t *)v203;
        uint64_t v203 = *(void *)v203;
      }
      while (v203);
    }
    else
    {
      do
      {
        int v204 = *(_DWORD *)(v202 + 32);
        BOOL v205 = v204 == v199;
        BOOL v206 = v204 < v199;
        if (v204 >= v199) {
          v207 = (uint64_t *)v202;
        }
        else {
          v207 = (uint64_t *)(v202 + 8);
        }
        if (v206) {
          v208 = v201;
        }
        else {
          v208 = (uint64_t *)v202;
        }
        if (v205)
        {
          v207 = (uint64_t *)v202;
          v201 = (uint64_t *)v202;
        }
        else
        {
          v201 = v208;
        }
        uint64_t v202 = *v207;
      }
      while (*v207);
    }
LABEL_357:
    if ((uint64_t *)v201[6] != v137) {
      goto LABEL_413;
    }
    v211 = (uint64_t **)(v196 + 32);
    v212 = *(uint64_t ***)(v196 + 32);
    if (v199 == 1)
    {
      while (1)
      {
        int v218 = *((_DWORD *)v212 + 8);
        if (v218 == 1)
        {
          if (v200 < *((_DWORD *)v212 + 10)) {
            goto LABEL_374;
          }
LABEL_369:
          v212 = (uint64_t **)v212[1];
          if (!v212) {
            goto LABEL_375;
          }
        }
        else
        {
          if (v218 <= 1) {
            goto LABEL_369;
          }
LABEL_374:
          v211 = v212;
          v212 = (uint64_t **)*v212;
          if (!v212) {
            goto LABEL_375;
          }
        }
      }
    }
    do
    {
      int v213 = *((_DWORD *)v212 + 8);
      v214 = (uint64_t ***)(v212 + 1);
      BOOL v215 = v199 == v213;
      BOOL v216 = v199 < v213;
      if (v199 >= v213) {
        v217 = (uint64_t ***)(v212 + 1);
      }
      else {
        v217 = (uint64_t ***)v212;
      }
      if (!v216) {
        v212 = v211;
      }
      if (v215) {
        v217 = v214;
      }
      else {
        v211 = v212;
      }
      v212 = *v217;
    }
    while (*v217);
LABEL_375:
    v219 = (uint64_t *)v196;
    if (v211 != v198) {
      v219 = v211[6];
    }
    v220 = (uint64_t *)v137[1];
    if (v220 == v219) {
      goto LABEL_391;
    }
    if (v199 == 1)
    {
      while (1)
      {
        while (1)
        {
          v222 = (uint64_t **)v197;
          int v223 = *(_DWORD *)(v197 + 32);
          if (v223 == 1) {
            break;
          }
          if (v223 <= 1) {
            goto LABEL_387;
          }
LABEL_381:
          uint64_t v197 = *(void *)v197;
          if (!*v222)
          {
            v198 = v222;
            goto LABEL_409;
          }
        }
        int v224 = *(_DWORD *)(v197 + 40);
        if (v224 > v200) {
          goto LABEL_381;
        }
        if (v224 >= v200)
        {
          *(void *)(v197 + 48) = v220;
          goto LABEL_413;
        }
LABEL_387:
        uint64_t v197 = *(void *)(v197 + 8);
        if (!v197)
        {
          v198 = v222 + 1;
          goto LABEL_409;
        }
      }
    }
    int v221 = *(_DWORD *)(v197 + 32);
    if (v199 == v221) {
      goto LABEL_412;
    }
    while (v199 >= v221)
    {
      if (v221 >= v199) {
        goto LABEL_412;
      }
      uint64_t v228 = *(void *)(v197 + 8);
      if (!v228)
      {
        v198 = (uint64_t **)(v197 + 8);
        goto LABEL_408;
      }
LABEL_400:
      int v221 = *(_DWORD *)(v228 + 32);
      uint64_t v197 = v228;
      if (v199 == v221)
      {
        *(void *)(v228 + 48) = v220;
        goto LABEL_413;
      }
    }
    uint64_t v228 = *(void *)v197;
    if (*(void *)v197) {
      goto LABEL_400;
    }
    v198 = (uint64_t **)v197;
LABEL_408:
    v222 = (uint64_t **)v197;
LABEL_409:
    uint64_t v197 = (uint64_t)operator new(0x38uLL);
    uint64_t v229 = *(void *)(v190 + 64);
    *(_DWORD *)(v197 + 40) = *(_DWORD *)(v190 + 72);
    *(void *)(v197 + 32) = v229;
    *(void *)(v197 + 48) = 0;
    *(void *)uint64_t v197 = 0;
    *(void *)(v197 + 8) = 0;
    *(void *)(v197 + 16) = v222;
    *v198 = (uint64_t *)v197;
    uint64_t v230 = **(void **)(v196 + 24);
    v231 = (uint64_t *)v197;
    if (v230)
    {
      *(void *)(v196 + 24) = v230;
      v231 = *v198;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v196 + 32), v231);
    ++*(void *)(v196 + 40);
LABEL_412:
    *(void *)(v197 + 48) = v220;
LABEL_413:
    uint64_t v232 = *v137;
    xpc_object_t v136 = (uint64_t *)v137[1];
    *(void *)(v232 + 8) = v136;
    *(void *)v137[1] = v232;
    --*(void *)(v196 + 16);
    v233 = (atomic_uint *)v137[3];
    if (v233)
    {
      if (atomic_fetch_add(v233 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v233 + 16))(v233);
        if (atomic_fetch_add(v233 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v233 + 24))(v233);
        }
      }
    }
    operator delete(v137);
    uint64_t v132 = (uint64_t **)v794;
LABEL_322:
    BOOL v191 = v136 != (uint64_t *)**v132 && v189 >= ++v188;
    unsigned int v137 = v136;
  }
  while (v191);
LABEL_418:
  v132[2] = v136;
  v234 = operator new(0x50uLL);
  v234[1] = 0;
  v234[2] = 0;
  *((unsigned char *)v234 + 24) = 1;
  *((_DWORD *)v234 + 7) = 1;
  void *v234 = &unk_1F20F2080;
  v235 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v235, (uint64_t *)v877);
  v235[3] = 0;
  uint64_t v236 = *((void *)&v878 + 1);
  if (*((void *)&v878 + 1))
  {
    v235[3] = *((void *)&v878 + 1);
    if (v236)
    {
      *((_OWORD *)v235 + 2) = v879;
      v235[6] = v880;
    }
    else
    {
      (*(void (**)(long long *, void *, void))(v236 & 0xFFFFFFFFFFFFFFFELL))(&v879, v235 + 4, 0);
    }
  }
  v234[4] = v235;
  v234[5] = 0;
  v237 = operator new(0x18uLL);
  v237[1] = 0x100000001;
  void *v237 = &unk_1F20F2128;
  v237[2] = v235;
  v234[5] = v237;
  v234[6] = v132[3];
  v238 = (atomic_uint *)v132[4];
  v234[7] = v238;
  if (v238) {
    atomic_fetch_add_explicit(v238 + 2, 1u, memory_order_relaxed);
  }
  *((_DWORD *)v234 + 16) = 0;
  *((unsigned char *)v234 + 68) = 0;
  v885 = (uint64_t (**)())v234;
  v239 = operator new(0x18uLL);
  *((void *)v239 + 1) = 0x100000001;
  *(void *)v239 = &unk_1F20F2188;
  *((void *)v239 + 2) = v234;
  unint64_t v886 = (unint64_t)v239;
  v240 = (uint64_t *)**v132;
  v241 = operator new(0x20uLL);
  v242 = v240 + 4;
  v241[2] = v234;
  v241[3] = v239;
  atomic_fetch_add_explicit((atomic_uint *volatile)v239 + 2, 1u, memory_order_relaxed);
  uint64_t v243 = *v240;
  *(void *)(v243 + 8) = v241;
  void *v241 = v243;
  uint64_t *v240 = (uint64_t)v241;
  v241[1] = v240;
  ++v240[2];
  v244 = (uint64_t *)v240[4];
  if (v244)
  {
    v245 = v240 + 4;
    uint64_t v246 = v240[4];
    do
    {
      int v247 = *(_DWORD *)(v246 + 32);
      BOOL v248 = v247 == 2;
      BOOL v249 = v247 < 2;
      if (v247 >= 2) {
        v250 = (uint64_t *)v246;
      }
      else {
        v250 = (uint64_t *)(v246 + 8);
      }
      if (!v249) {
        v245 = (uint64_t *)v246;
      }
      if (v248)
      {
        v250 = (uint64_t *)v246;
        v245 = (uint64_t *)v246;
      }
      uint64_t v246 = *v250;
    }
    while (*v250);
    if (v245 == v242 || *((_DWORD *)v245 + 8) != 2)
    {
      int v252 = *((_DWORD *)v244 + 8);
      while (v252 != 2)
      {
        if (v252 < 3)
        {
          v253 = (uint64_t *)v244[1];
          if (!v253)
          {
            v242 = v244 + 1;
            goto LABEL_445;
          }
        }
        else
        {
          v253 = (uint64_t *)*v244;
          v242 = v244;
          if (!*v244) {
            goto LABEL_445;
          }
        }
        int v252 = *((_DWORD *)v253 + 8);
        v244 = v253;
      }
    }
    *((_DWORD *)v234 + 16) = 2;
    *(void *)((char *)v234 + 68) = 0xAAAAAAAAAAAAAA00;
    v251 = this;
LABEL_448:
    atomic_fetch_add_explicit((atomic_uint *volatile)v239 + 3, 1u, memory_order_relaxed);
    *(void *)&long long v817 = v234;
    *((void *)&v817 + 1) = v239;
    atomic_fetch_add_explicit((atomic_uint *volatile)v239 + 3, 1u, memory_order_relaxed);
    if (atomic_fetch_add((atomic_uint *volatile)v239 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(void *))(*(void *)v239 + 24))(v239);
    }
    v256 = (atomic_uint *)v886;
    if (v886) {
      goto LABEL_451;
    }
  }
  else
  {
    v244 = v240 + 4;
LABEL_445:
    v254 = operator new(0x38uLL);
    v254[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v254 + 10) = -1431655766;
    v254[6] = v241;
    void *v254 = 0;
    v254[1] = 0;
    v254[2] = v244;
    uint64_t *v242 = (uint64_t)v254;
    uint64_t v255 = *(void *)v240[3];
    if (v255)
    {
      v240[3] = v255;
      v254 = (void *)*v242;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v240[4], v254);
    ++v240[5];
    v234 = v885;
    v239 = (void *)v886;
    *((_DWORD *)v885 + 16) = 2;
    *(void *)((char *)v234 + 68) = 0xAAAAAAAAAAAAAA00;
    v251 = this;
    if (v239) {
      goto LABEL_448;
    }
    long long v817 = (unint64_t)v234;
    v256 = (atomic_uint *)v886;
    if (v886)
    {
LABEL_451:
      if (atomic_fetch_add(v256 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v256 + 16))(v256);
        if (atomic_fetch_add(v256 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v256 + 24))(v256);
        }
      }
    }
  }
  pthread_mutex_unlock(v901);
  v257 = (char *)__p;
  if (__p)
  {
    if (v900 - 1 >= 0)
    {
      v258 = (char *)__p + 16 * v900;
      do
      {
        v259 = (atomic_uint *)*((void *)v258 - 1);
        if (v259)
        {
          if (atomic_fetch_add(v259 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v259 + 16))(v259);
            if (atomic_fetch_add(v259 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v259 + 24))(v259);
            }
          }
        }
        v258 -= 16;
      }
      while (v258 > v257);
    }
    v251 = this;
    if (v898 >= 0xB) {
      operator delete(__p);
    }
  }
  if (*((void *)&v878 + 1))
  {
    if ((BYTE8(v878) & 1) == 0)
    {
      v260 = *(void (**)(long long *, long long *, uint64_t))(*((void *)&v878 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v260) {
        v260(&v879, &v879, 2);
      }
    }
    *((void *)&v878 + 1) = 0;
  }
  v261 = (char *)v877[0];
  if (v877[0])
  {
    v262 = (char *)v877[1];
    v263 = v877[0];
    if (v877[1] != v877[0])
    {
      do
      {
        v262 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v262);
      }
      while (v262 != v261);
      v263 = v877[0];
    }
    v877[1] = v261;
    operator delete(v263);
  }
  dispatch_release(v875);
  if (v876) {
    _Block_release(v876);
  }
  if (atomic_fetch_add(&v786->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v783) {
      goto LABEL_482;
    }
LABEL_481:
    _Block_release(v783);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v786->__on_zero_shared)(v786);
    std::__shared_weak_count::__release_weak(v786);
    if (v783) {
      goto LABEL_481;
    }
  }
LABEL_482:
  v264 = operator new(0x20uLL);
  v264[1] = v817;
  uint64_t v265 = *((void *)v251 + 28);
  v784 = (char *)v251 + 224;
  *(void *)v264 = v265;
  *((void *)v264 + 1) = (char *)v251 + 224;
  *(void *)(v265 + 8) = v264;
  *((void *)v251 + 28) = v264;
  ++*((void *)v251 + 30);
  uint64_t v266 = *((void *)v251 + 13);
  v868 = (void **)MEMORY[0x1E4F143A8];
  uint64_t v869 = 0x40000000;
  v870 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISF_EENSL_IFvRKNS7_10connectionESD_SE_EEENS7_5mutexEEES3_vJSD_SE_EEEDTcl7connectfp_cvNSI_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSY_S10_E_block_invoke;
  v871 = &__block_descriptor_tmp_392;
  v872 = v790;
  v873 = (uint64_t (*)(coex::Module::State *__hidden))coex::Module::State::handleCommandDriverStateUpdate_sync;
  uint64_t v874 = 0;
  v267 = _Block_copy(&v868);
  uint64_t v795 = v266;
  v268 = (std::__shared_weak_count *)*((void *)v251 + 10);
  if (!v268 || (uint64_t v269 = *((void *)v251 + 9), (v270 = std::__shared_weak_count::lock(v268)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v271 = v270;
  v272 = *((void *)v251 + 11);
  dispatch_object_t v875 = v272;
  v779 = v267;
  if (v267) {
    v273 = _Block_copy(v267);
  }
  else {
    v273 = 0;
  }
  v876 = v273;
  dispatch_retain(v272);
  long long v878 = 0u;
  *(_OWORD *)v877 = 0u;
  dispatch_object_t v881 = v272;
  if (v273) {
    v273 = _Block_copy(v273);
  }
  v882 = v273;
  dispatch_retain(v272);
  dispatch_object_t object = v272;
  v787 = v271;
  if (!v273)
  {
    v884 = 0;
    dispatch_retain(v272);
    goto LABEL_498;
  }
  v274 = _Block_copy(v273);
  v884 = v274;
  dispatch_retain(v272);
  if (!v274)
  {
LABEL_498:
    dispatch_retain(v272);
    v885 = 0;
    goto LABEL_499;
  }
  v275 = _Block_copy(v274);
  dispatch_retain(v272);
  v885 = 0;
  if (!v275)
  {
LABEL_499:
    dispatch_retain(v272);
    v765 = 0;
    char v280 = 1;
LABEL_500:
    dispatch_retain(v272);
    v771 = 0;
    char v281 = 1;
LABEL_501:
    dispatch_retain(v272);
    v277 = 0;
    char v282 = 1;
LABEL_502:
    dispatch_retain(v272);
    v278 = 0;
    unint64_t v886 = (unint64_t)v272;
    char v283 = 1;
    goto LABEL_503;
  }
  v276 = _Block_copy(v275);
  dispatch_retain(v272);
  v765 = v275;
  if (!v276)
  {
    char v280 = 0;
    goto LABEL_500;
  }
  v277 = _Block_copy(v276);
  dispatch_retain(v272);
  v771 = v276;
  if (!v277)
  {
    char v280 = 0;
    char v281 = 0;
    goto LABEL_501;
  }
  v278 = _Block_copy(v277);
  dispatch_retain(v272);
  if (!v278)
  {
    char v280 = 0;
    char v281 = 0;
    char v282 = 0;
    goto LABEL_502;
  }
  v279 = _Block_copy(v278);
  dispatch_retain(v272);
  unint64_t v886 = (unint64_t)v272;
  if (v279)
  {
    char v280 = 0;
    char v281 = 0;
    char v282 = 0;
    char v283 = 0;
    v887 = _Block_copy(v279);
    dispatch_retain(v272);
    dispatch_release(v272);
    _Block_release(v279);
    goto LABEL_504;
  }
  char v280 = 0;
  char v281 = 0;
  char v282 = 0;
  char v283 = 0;
LABEL_503:
  v887 = 0;
  dispatch_retain(v272);
  dispatch_release(v272);
LABEL_504:
  dispatch_release(v272);
  if ((v283 & 1) == 0) {
    _Block_release(v278);
  }
  dispatch_release(v272);
  if ((v282 & 1) == 0) {
    _Block_release(v277);
  }
  v885 = boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>)::stored_vtable;
  dispatch_release(v272);
  if ((v281 & 1) == 0) {
    _Block_release(v771);
  }
  dispatch_release(v272);
  if ((v280 & 1) == 0) {
    _Block_release(v765);
  }
  *((void *)&v889 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v889 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&blocuint64_t k = 0;
  boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign((uint64_t)&block, (uint64_t *)&v885);
  boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign((uint64_t)&v885, (uint64_t *)&v878 + 1);
  boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign((uint64_t)&v878 + 8, (uint64_t *)&block);
  if ((void)block)
  {
    if ((block & 1) == 0)
    {
      v284 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
      if (v284) {
        v284((char *)&block + 8, (char *)&block + 8, 2);
      }
    }
  }
  if (v885)
  {
    if ((v885 & 1) == 0)
    {
      v285 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v885 & 0xFFFFFFFFFFFFFFFELL);
      if (v285) {
        v285((uint64_t)&v886, &v886, 2u);
      }
    }
    v885 = 0;
  }
  dispatch_release(object);
  if (v884) {
    _Block_release(v884);
  }
  dispatch_release(v881);
  if (v882) {
    _Block_release(v882);
  }
  atomic_fetch_add_explicit(&v787->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v286 = operator new(0x18uLL);
  void *v286 = &unk_1F20F2398;
  v286[1] = v269;
  v286[2] = v787;
  atomic_fetch_add_explicit(&v787->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v287 = operator new(0x18uLL);
  void *v287 = &unk_1F20F2398;
  v287[1] = v269;
  v287[2] = v787;
  atomic_fetch_add_explicit(&v787->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)&block + 1) = v287;
  LODWORD(block) = 2;
  v288 = v877[1];
  if (v877[1] >= (void *)v878)
  {
    v291 = (void *)std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v877, (uint64_t)&block);
    v290 = v787;
  }
  else
  {
    v289 = operator new(0x18uLL);
    void *v289 = &unk_1F20F2398;
    v289[1] = v269;
    v290 = v787;
    v289[2] = v787;
    atomic_fetch_add_explicit(&v787->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v288[1] = v289;
    *(_DWORD *)v288 = 2;
    v291 = v288 + 3;
  }
  v877[1] = v291;
  boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&block);
  (*(void (**)(void *))(*v286 + 8))(v286);
  std::__shared_weak_count::__release_weak(v290);
  v292 = *(uint64_t ***)(v795 + 152);
  *(void *)&long long v293 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v293 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v897 = v293;
  long long v896 = v293;
  long long v895 = v293;
  long long v894 = v293;
  long long v893 = v293;
  long long v892 = v293;
  long long v891 = v293;
  *(_OWORD *)v890 = v293;
  long long v889 = v293;
  blocuint64_t k = v293;
  v294 = (pthread_mutex_t *)v292[3];
  unint64_t v898 = 10;
  std::string __p = &block;
  uint64_t v900 = 0;
  v901 = v294;
  pthread_mutex_lock(v294);
  unint64_t v886 = 0xAAAAAAAAAAAAAAAALL;
  v885 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
  v295 = (atomic_uint *)v292[1];
  v796 = (uint64_t ***)v292;
  if (v295 && atomic_load_explicit(v295 + 2, memory_order_acquire) == 1)
  {
    v296 = (uint64_t *)**v292;
    v297 = v292[2];
    int v298 = 2;
    if (v297 != v296) {
      goto LABEL_618;
    }
    goto LABEL_617;
  }
  v299 = (uint64_t **)operator new(0x20uLL);
  v300 = *v292;
  uint64_t v301 = **v292;
  v772 = v299;
  v302 = operator new(0x40uLL);
  v303 = v302;
  void *v302 = v302;
  v302[1] = v302;
  v302[2] = 0;
  v304 = *(void **)(v301 + 8);
  if (v304 != (void *)v301)
  {
    uint64_t v305 = 0;
    v306 = v302;
    do
    {
      v307 = operator new(0x20uLL);
      v307[2] = v304[2];
      uint64_t v308 = v304[3];
      v307[3] = v308;
      if (v308)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v308 + 8), 1u, memory_order_relaxed);
        v306 = (void *)*v303;
        uint64_t v305 = v303[2];
      }
      void *v307 = v306;
      v307[1] = v303;
      v306[1] = v307;
      void *v303 = v307;
      v303[2] = ++v305;
      v304 = (void *)v304[1];
      v306 = v307;
    }
    while (v304 != (void *)v301);
  }
  v766 = v300;
  v303[3] = 0;
  v309 = (void **)(v303 + 3);
  v303[4] = 0;
  v310 = v303 + 4;
  v303[5] = 0;
  *((unsigned char *)v303 + 48) = *(unsigned char *)(v301 + 48);
  v303[3] = v303 + 4;
  v311 = *(void **)(v301 + 24);
  v312 = (void *)(v301 + 32);
  if (v311 != (void *)(v301 + 32))
  {
    do
    {
      int v325 = *((_DWORD *)v311 + 8);
      v326 = (void *)*v310;
      v327 = v303 + 4;
      if (*v309 != v310)
      {
        v328 = (void *)*v310;
        v329 = v303 + 4;
        if (v326)
        {
          do
          {
            v327 = v328;
            v328 = (void *)v328[1];
          }
          while (v328);
        }
        else
        {
          do
          {
            v327 = (void *)v329[2];
            BOOL v205 = *v327 == (void)v329;
            v329 = v327;
          }
          while (v205);
        }
        int v330 = *((_DWORD *)v311 + 10);
        int v331 = *((_DWORD *)v327 + 8);
        if (v331 == v325)
        {
          if (v325 != 1) {
            goto LABEL_583;
          }
          if (*((_DWORD *)v327 + 10) >= v330)
          {
            v332 = (void *)*v310;
            v333 = v303 + 4;
            v334 = v303 + 4;
            if (v326) {
              goto LABEL_587;
            }
LABEL_594:
            v338 = operator new(0x38uLL);
            long long v339 = *((_OWORD *)v311 + 2);
            v338[6] = v311[6];
            *((_OWORD *)v338 + 2) = v339;
            void *v338 = 0;
            v338[1] = 0;
            v338[2] = v334;
            void *v333 = v338;
            v340 = (void *)**v309;
            if (v340)
            {
              *v309 = v340;
              v338 = (void *)*v333;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v303[4], v338);
            ++v303[5];
            goto LABEL_597;
          }
        }
        else if (v331 >= v325)
        {
LABEL_583:
          v333 = v303 + 4;
          v334 = v303 + 4;
          if (!v326) {
            goto LABEL_594;
          }
          v332 = (void *)*v310;
          if (v325 != 1)
          {
            int v335 = *((_DWORD *)v326 + 8);
            v334 = (void *)*v310;
            while (v325 != v335)
            {
              if (v325 < v335)
              {
                uint64_t v343 = *v334;
                v333 = v334;
                if (!*v334) {
                  goto LABEL_594;
                }
              }
              else
              {
                if (v335 >= v325) {
                  goto LABEL_597;
                }
                uint64_t v343 = v334[1];
                if (!v343) {
                  goto LABEL_593;
                }
              }
              int v335 = *(_DWORD *)(v343 + 32);
              v334 = (void *)v343;
            }
            goto LABEL_597;
          }
          while (1)
          {
LABEL_587:
            v334 = v332;
            int v336 = *((_DWORD *)v332 + 8);
            if (v336 == 1)
            {
              int v337 = *((_DWORD *)v332 + 10);
              if (v337 > v330) {
                goto LABEL_586;
              }
              if (v337 >= v330) {
                goto LABEL_597;
              }
            }
            else if (v336 > 1)
            {
LABEL_586:
              v332 = (void *)*v332;
              v333 = v334;
              if (!*v334) {
                goto LABEL_594;
              }
              continue;
            }
            v332 = (void *)v332[1];
            if (!v332)
            {
LABEL_593:
              v333 = v334 + 1;
              goto LABEL_594;
            }
          }
        }
      }
      if (v326) {
        v334 = v327;
      }
      else {
        v334 = v303 + 4;
      }
      if (v326) {
        v333 = v327 + 1;
      }
      else {
        v333 = v303 + 4;
      }
      if (!*v333) {
        goto LABEL_594;
      }
LABEL_597:
      v341 = (void *)v311[1];
      if (v341)
      {
        do
        {
          v342 = v341;
          v341 = (void *)*v341;
        }
        while (v341);
      }
      else
      {
        do
        {
          v342 = (void *)v311[2];
          BOOL v205 = *v342 == (void)v311;
          v311 = v342;
        }
        while (!v205);
      }
      v311 = v342;
    }
    while (v342 != v312);
  }
  *((unsigned char *)v303 + 56) = *(unsigned char *)(v301 + 56);
  v313 = *(void **)(v301 + 24);
  if (v313 != v312)
  {
    v314 = (void *)v303[3];
    uint64_t v315 = v303[1];
    do
    {
      v314[6] = v315;
      uint64_t v316 = v301;
      if (v313 != v312) {
        uint64_t v316 = v313[6];
      }
      v317 = (void *)v313[1];
      v318 = v317;
      v319 = v313;
      if (v317)
      {
        do
        {
          v320 = v318;
          v318 = (void *)*v318;
        }
        while (v318);
      }
      else
      {
        do
        {
          v320 = (void *)v319[2];
          BOOL v205 = *v320 == (void)v319;
          v319 = v320;
        }
        while (!v205);
      }
      uint64_t v321 = v301;
      if (v320 != v312) {
        uint64_t v321 = v320[6];
      }
      while (v316 != v321)
      {
        uint64_t v316 = *(void *)(v316 + 8);
        uint64_t v315 = *(void *)(v315 + 8);
      }
      if (v317)
      {
        do
        {
          v322 = v317;
          v317 = (void *)*v317;
        }
        while (v317);
      }
      else
      {
        do
        {
          v322 = (void *)v313[2];
          BOOL v205 = *v322 == (void)v313;
          v313 = v322;
        }
        while (!v205);
      }
      v323 = (void *)v314[1];
      if (v323)
      {
        do
        {
          v324 = v323;
          v323 = (void *)*v323;
        }
        while (v323);
      }
      else
      {
        do
        {
          v324 = (void *)v314[2];
          BOOL v205 = *v324 == (void)v314;
          v314 = v324;
        }
        while (!v205);
      }
      v313 = v322;
      v314 = v324;
    }
    while (v322 != v312);
  }
  *v772 = v303;
  v772[1] = 0;
  v344 = (uint64_t *)operator new(0x18uLL);
  v292 = (uint64_t **)v796;
  v344[1] = 0x100000001;
  uint64_t *v344 = (uint64_t)&unk_1F20F24A8;
  v344[2] = (uint64_t)v303;
  v772[1] = v344;
  v772[2] = (uint64_t *)v766[2];
  uint64_t v345 = v766[3];
  v772[3] = (uint64_t *)v345;
  if (v345) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v345 + 8), 1u, memory_order_relaxed);
  }
  v346 = (uint64_t **)operator new(0x18uLL);
  v346[1] = (uint64_t *)0x100000001;
  *v346 = (uint64_t *)&unk_1F20F2448;
  v346[2] = (uint64_t *)v772;
  v347 = (atomic_uint *)v796[1];
  *v796 = v772;
  v796[1] = v346;
  if (v347)
  {
    if (atomic_fetch_add(v347 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v347 + 16))(v347);
      if (atomic_fetch_add(v347 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v347 + 24))(v347);
      }
    }
  }
  int v298 = 0;
  v296 = **v796;
LABEL_617:
  v297 = (uint64_t *)v296[1];
  if (v296 == v297) {
    goto LABEL_717;
  }
LABEL_618:
  int v348 = 0;
  unsigned int v349 = v298 - 1;
  while (2)
  {
    uint64_t v352 = v297[2];
    v353 = *(uint64_t **)(v352 + 32);
    if (v353)
    {
      for (uint64_t j = *v353; j != v353[1]; j += 24)
      {
        if ((*(_DWORD *)j ^ (*(int *)j >> 31)) > 1)
        {
          if ((*(uint64_t (**)(void))(**(void **)(j + 8) + 24))(*(void *)(j + 8))) {
            goto LABEL_635;
          }
        }
        else
        {
          uint64_t v355 = *(void *)(j + 16);
          if (!v355 || !atomic_load_explicit((atomic_uint *volatile)(v355 + 8), memory_order_acquire))
          {
LABEL_635:
            if (*(unsigned char *)(v352 + 24))
            {
              *(unsigned char *)(v352 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v352, &block);
            }
            break;
          }
        }
      }
    }
    uint64_t v350 = v297[2];
    if (*(unsigned char *)(v350 + 24))
    {
      v296 = (uint64_t *)v297[1];
      goto LABEL_621;
    }
    uint64_t v356 = **v292;
    v358 = (uint64_t **)(v356 + 32);
    uint64_t v357 = *(void *)(v356 + 32);
    if (!v357)
    {
      if (*(uint64_t **)(v356 + 80) != v297) {
        goto LABEL_712;
      }
      v380 = (uint64_t *)v297[1];
      v382 = (uint64_t **)(v356 + 32);
      v361 = (uint64_t *)(v356 + 32);
      if (v380 != (uint64_t *)v356) {
        goto LABEL_708;
      }
      goto LABEL_690;
    }
    int v359 = *(_DWORD *)(v350 + 64);
    int v360 = *(_DWORD *)(v350 + 72);
    v361 = (uint64_t *)(v356 + 32);
    uint64_t v362 = *(void *)(v356 + 32);
    if (v359 == 1)
    {
      v361 = (uint64_t *)(v356 + 32);
      uint64_t v363 = *(void *)(v356 + 32);
      do
      {
        while (1)
        {
          int v369 = *(_DWORD *)(v363 + 32);
          BOOL v370 = v369 < 1;
          if (v369 == 1) {
            BOOL v370 = *(_DWORD *)(v363 + 40) < v360;
          }
          if (!v370) {
            break;
          }
          uint64_t v363 = *(void *)(v363 + 8);
          if (!v363) {
            goto LABEL_656;
          }
        }
        v361 = (uint64_t *)v363;
        uint64_t v363 = *(void *)v363;
      }
      while (v363);
    }
    else
    {
      do
      {
        int v364 = *(_DWORD *)(v362 + 32);
        BOOL v365 = v364 == v359;
        BOOL v366 = v364 < v359;
        if (v364 >= v359) {
          v367 = (uint64_t *)v362;
        }
        else {
          v367 = (uint64_t *)(v362 + 8);
        }
        if (v366) {
          v368 = v361;
        }
        else {
          v368 = (uint64_t *)v362;
        }
        if (v365)
        {
          v367 = (uint64_t *)v362;
          v361 = (uint64_t *)v362;
        }
        else
        {
          v361 = v368;
        }
        uint64_t v362 = *v367;
      }
      while (*v367);
    }
LABEL_656:
    if ((uint64_t *)v361[6] != v297) {
      goto LABEL_712;
    }
    v371 = (uint64_t **)(v356 + 32);
    v372 = *(uint64_t ***)(v356 + 32);
    if (v359 == 1)
    {
      while (1)
      {
        int v378 = *((_DWORD *)v372 + 8);
        if (v378 == 1)
        {
          if (v360 < *((_DWORD *)v372 + 10)) {
            goto LABEL_673;
          }
LABEL_668:
          v372 = (uint64_t **)v372[1];
          if (!v372) {
            goto LABEL_674;
          }
        }
        else
        {
          if (v378 <= 1) {
            goto LABEL_668;
          }
LABEL_673:
          v371 = v372;
          v372 = (uint64_t **)*v372;
          if (!v372) {
            goto LABEL_674;
          }
        }
      }
    }
    do
    {
      int v373 = *((_DWORD *)v372 + 8);
      v374 = (uint64_t ***)(v372 + 1);
      BOOL v375 = v359 == v373;
      BOOL v376 = v359 < v373;
      if (v359 >= v373) {
        v377 = (uint64_t ***)(v372 + 1);
      }
      else {
        v377 = (uint64_t ***)v372;
      }
      if (!v376) {
        v372 = v371;
      }
      if (v375) {
        v377 = v374;
      }
      else {
        v371 = v372;
      }
      v372 = *v377;
    }
    while (*v377);
LABEL_674:
    v379 = (uint64_t *)v356;
    if (v371 != v358) {
      v379 = v371[6];
    }
    v380 = (uint64_t *)v297[1];
    if (v380 == v379)
    {
LABEL_690:
      v385 = (uint64_t *)v361[1];
      v386 = v361;
      if (v385)
      {
        do
        {
          v387 = v385;
          v385 = (uint64_t *)*v385;
        }
        while (v385);
      }
      else
      {
        do
        {
          v387 = (uint64_t *)v386[2];
          BOOL v205 = *v387 == (void)v386;
          v386 = v387;
        }
        while (!v205);
      }
      if (*(uint64_t **)(v356 + 24) == v361) {
        *(void *)(v356 + 24) = v387;
      }
      --*(void *)(v356 + 40);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v357, v361);
      operator delete(v361);
      goto LABEL_712;
    }
    if (v359 == 1)
    {
      while (1)
      {
        while (1)
        {
          v382 = (uint64_t **)v357;
          int v383 = *(_DWORD *)(v357 + 32);
          if (v383 == 1) {
            break;
          }
          if (v383 <= 1) {
            goto LABEL_686;
          }
LABEL_680:
          uint64_t v357 = *(void *)v357;
          if (!*v382)
          {
            v358 = v382;
            goto LABEL_708;
          }
        }
        int v384 = *(_DWORD *)(v357 + 40);
        if (v384 > v360) {
          goto LABEL_680;
        }
        if (v384 >= v360)
        {
          *(void *)(v357 + 48) = v380;
          goto LABEL_712;
        }
LABEL_686:
        uint64_t v357 = *(void *)(v357 + 8);
        if (!v357)
        {
          v358 = v382 + 1;
          goto LABEL_708;
        }
      }
    }
    int v381 = *(_DWORD *)(v357 + 32);
    if (v359 == v381) {
      goto LABEL_711;
    }
    while (2)
    {
      if (v359 >= v381)
      {
        if (v381 >= v359) {
          goto LABEL_711;
        }
        uint64_t v388 = *(void *)(v357 + 8);
        if (!v388)
        {
          v358 = (uint64_t **)(v357 + 8);
          goto LABEL_707;
        }
        goto LABEL_699;
      }
      uint64_t v388 = *(void *)v357;
      if (*(void *)v357)
      {
LABEL_699:
        int v381 = *(_DWORD *)(v388 + 32);
        uint64_t v357 = v388;
        if (v359 == v381)
        {
          *(void *)(v388 + 48) = v380;
          goto LABEL_712;
        }
        continue;
      }
      break;
    }
    v358 = (uint64_t **)v357;
LABEL_707:
    v382 = (uint64_t **)v357;
LABEL_708:
    uint64_t v357 = (uint64_t)operator new(0x38uLL);
    uint64_t v389 = *(void *)(v350 + 64);
    *(_DWORD *)(v357 + 40) = *(_DWORD *)(v350 + 72);
    *(void *)(v357 + 32) = v389;
    *(void *)(v357 + 48) = 0;
    *(void *)uint64_t v357 = 0;
    *(void *)(v357 + 8) = 0;
    *(void *)(v357 + 16) = v382;
    *v358 = (uint64_t *)v357;
    uint64_t v390 = **(void **)(v356 + 24);
    v391 = (uint64_t *)v357;
    if (v390)
    {
      *(void *)(v356 + 24) = v390;
      v391 = *v358;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v356 + 32), v391);
    ++*(void *)(v356 + 40);
LABEL_711:
    *(void *)(v357 + 48) = v380;
LABEL_712:
    uint64_t v392 = *v297;
    v296 = (uint64_t *)v297[1];
    *(void *)(v392 + 8) = v296;
    *(void *)v297[1] = v392;
    --*(void *)(v356 + 16);
    v393 = (atomic_uint *)v297[3];
    if (v393)
    {
      if (atomic_fetch_add(v393 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v393 + 16))(v393);
        if (atomic_fetch_add(v393 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v393 + 24))(v393);
        }
      }
    }
    operator delete(v297);
    v292 = (uint64_t **)v796;
LABEL_621:
    BOOL v351 = v296 != (uint64_t *)**v292 && v349 >= ++v348;
    v297 = v296;
    if (v351) {
      continue;
    }
    break;
  }
LABEL_717:
  v292[2] = v296;
  v394 = operator new(0x50uLL);
  v394[1] = 0;
  v394[2] = 0;
  *((unsigned char *)v394 + 24) = 1;
  *((_DWORD *)v394 + 7) = 1;
  void *v394 = &unk_1F20F2508;
  v395 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v395, (uint64_t *)v877);
  v395[3] = 0;
  uint64_t v396 = *((void *)&v878 + 1);
  if (*((void *)&v878 + 1))
  {
    v395[3] = *((void *)&v878 + 1);
    if (v396)
    {
      *((_OWORD *)v395 + 2) = v879;
      v395[6] = v880;
    }
    else
    {
      (*(void (**)(long long *, void *, void))(v396 & 0xFFFFFFFFFFFFFFFELL))(&v879, v395 + 4, 0);
    }
  }
  v394[4] = v395;
  v394[5] = 0;
  v397 = operator new(0x18uLL);
  v397[1] = 0x100000001;
  void *v397 = &unk_1F20F2560;
  v397[2] = v395;
  v394[5] = v397;
  v394[6] = v292[3];
  v398 = (atomic_uint *)v292[4];
  v394[7] = v398;
  if (v398) {
    atomic_fetch_add_explicit(v398 + 2, 1u, memory_order_relaxed);
  }
  *((_DWORD *)v394 + 16) = 0;
  *((unsigned char *)v394 + 68) = 0;
  v885 = (uint64_t (**)())v394;
  v399 = operator new(0x18uLL);
  *((void *)v399 + 1) = 0x100000001;
  *(void *)v399 = &unk_1F20F25C0;
  *((void *)v399 + 2) = v394;
  unint64_t v886 = (unint64_t)v399;
  v400 = (uint64_t *)**v292;
  v401 = operator new(0x20uLL);
  v402 = v400 + 4;
  v401[2] = v394;
  v401[3] = v399;
  atomic_fetch_add_explicit((atomic_uint *volatile)v399 + 2, 1u, memory_order_relaxed);
  uint64_t v403 = *v400;
  *(void *)(v403 + 8) = v401;
  void *v401 = v403;
  uint64_t *v400 = (uint64_t)v401;
  v401[1] = v400;
  ++v400[2];
  v404 = (uint64_t *)v400[4];
  if (v404)
  {
    v405 = v400 + 4;
    uint64_t v406 = v400[4];
    do
    {
      int v407 = *(_DWORD *)(v406 + 32);
      BOOL v408 = v407 == 2;
      BOOL v409 = v407 < 2;
      if (v407 >= 2) {
        v410 = (uint64_t *)v406;
      }
      else {
        v410 = (uint64_t *)(v406 + 8);
      }
      if (!v409) {
        v405 = (uint64_t *)v406;
      }
      if (v408)
      {
        v410 = (uint64_t *)v406;
        v405 = (uint64_t *)v406;
      }
      uint64_t v406 = *v410;
    }
    while (*v410);
    if (v405 == v402 || *((_DWORD *)v405 + 8) != 2)
    {
      int v412 = *((_DWORD *)v404 + 8);
      while (v412 != 2)
      {
        if (v412 < 3)
        {
          v413 = (uint64_t *)v404[1];
          if (!v413)
          {
            v402 = v404 + 1;
            goto LABEL_744;
          }
        }
        else
        {
          v413 = (uint64_t *)*v404;
          v402 = v404;
          if (!*v404) {
            goto LABEL_744;
          }
        }
        int v412 = *((_DWORD *)v413 + 8);
        v404 = v413;
      }
    }
    *((_DWORD *)v394 + 16) = 2;
    *(void *)((char *)v394 + 68) = 0xAAAAAAAAAAAAAA00;
    v411 = this;
LABEL_747:
    atomic_fetch_add_explicit((atomic_uint *volatile)v399 + 3, 1u, memory_order_relaxed);
    *(void *)&long long v817 = v394;
    *((void *)&v817 + 1) = v399;
    atomic_fetch_add_explicit((atomic_uint *volatile)v399 + 3, 1u, memory_order_relaxed);
    if (atomic_fetch_add((atomic_uint *volatile)v399 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(void *))(*(void *)v399 + 24))(v399);
    }
    v416 = (atomic_uint *)v886;
    if (v886) {
      goto LABEL_750;
    }
  }
  else
  {
    v404 = v400 + 4;
LABEL_744:
    v414 = operator new(0x38uLL);
    v414[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v414 + 10) = -1431655766;
    v414[6] = v401;
    void *v414 = 0;
    v414[1] = 0;
    v414[2] = v404;
    uint64_t *v402 = (uint64_t)v414;
    uint64_t v415 = *(void *)v400[3];
    if (v415)
    {
      v400[3] = v415;
      v414 = (void *)*v402;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v400[4], v414);
    ++v400[5];
    v394 = v885;
    v399 = (void *)v886;
    *((_DWORD *)v885 + 16) = 2;
    *(void *)((char *)v394 + 68) = 0xAAAAAAAAAAAAAA00;
    v411 = this;
    if (v399) {
      goto LABEL_747;
    }
    long long v817 = (unint64_t)v394;
    v416 = (atomic_uint *)v886;
    if (v886)
    {
LABEL_750:
      if (atomic_fetch_add(v416 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v416 + 16))(v416);
        if (atomic_fetch_add(v416 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v416 + 24))(v416);
        }
      }
    }
  }
  pthread_mutex_unlock(v901);
  v417 = (char *)__p;
  if (__p)
  {
    if (v900 - 1 >= 0)
    {
      v418 = (char *)__p + 16 * v900;
      do
      {
        v419 = (atomic_uint *)*((void *)v418 - 1);
        if (v419)
        {
          if (atomic_fetch_add(v419 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v419 + 16))(v419);
            if (atomic_fetch_add(v419 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v419 + 24))(v419);
            }
          }
        }
        v418 -= 16;
      }
      while (v418 > v417);
    }
    v411 = this;
    if (v898 >= 0xB) {
      operator delete(__p);
    }
  }
  if (*((void *)&v878 + 1))
  {
    if ((BYTE8(v878) & 1) == 0)
    {
      v420 = *(void (**)(long long *, long long *, uint64_t))(*((void *)&v878 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v420) {
        v420(&v879, &v879, 2);
      }
    }
    *((void *)&v878 + 1) = 0;
  }
  v421 = (char *)v877[0];
  if (v877[0])
  {
    v422 = (char *)v877[1];
    v423 = v877[0];
    if (v877[1] != v877[0])
    {
      do
      {
        v422 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v422);
      }
      while (v422 != v421);
      v423 = v877[0];
    }
    v877[1] = v421;
    operator delete(v423);
  }
  dispatch_release(v875);
  if (v876) {
    _Block_release(v876);
  }
  if (!atomic_fetch_add(&v787->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v787->__on_zero_shared)(v787);
    std::__shared_weak_count::__release_weak(v787);
    if (!v779) {
      goto LABEL_781;
    }
    goto LABEL_780;
  }
  if (v779) {
LABEL_780:
  }
    _Block_release(v779);
LABEL_781:
  v424 = operator new(0x20uLL);
  v424[1] = v817;
  uint64_t v425 = *((void *)v411 + 28);
  *(void *)v424 = v425;
  *((void *)v424 + 1) = v784;
  *(void *)(v425 + 8) = v424;
  *((void *)v411 + 28) = v424;
  ++*((void *)v411 + 30);
  uint64_t v426 = *((void *)v411 + 26);
  if (v426)
  {
    v868 = (void **)MEMORY[0x1E4F143A8];
    uint64_t v869 = 0x40000000;
    v870 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISA_EENSG_IFvRKNS7_10connectionES9_EEENS7_5mutexEEES3_vJS9_EEEDTcl7connectfp_cvNSD_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FST_SV_E_block_invoke;
    v871 = &__block_descriptor_tmp_398;
    v872 = v790;
    v873 = (uint64_t (*)(coex::Module::State *__hidden))coex::Module::State::handleDesenseCommandDriverStarted_sync;
    uint64_t v874 = 0;
    v427 = _Block_copy(&v868);
    uint64_t v797 = v426;
    v428 = (std::__shared_weak_count *)*((void *)v411 + 10);
    if (!v428 || (uint64_t v429 = *((void *)v411 + 9), (v430 = std::__shared_weak_count::lock(v428)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    v431 = v430;
    v432 = *((void *)v411 + 11);
    dispatch_object_t v875 = v432;
    if (v427) {
      v433 = _Block_copy(v427);
    }
    else {
      v433 = 0;
    }
    v876 = v433;
    dispatch_retain(v432);
    long long v878 = 0u;
    *(_OWORD *)v877 = 0u;
    dispatch_object_t v881 = v432;
    if (v433) {
      v433 = _Block_copy(v433);
    }
    v882 = v433;
    dispatch_retain(v432);
    dispatch_object_t object = v432;
    v788 = v431;
    v780 = v427;
    if (v433)
    {
      v434 = _Block_copy(v433);
      v884 = v434;
      dispatch_retain(v432);
      if (v434)
      {
        v435 = _Block_copy(v434);
        dispatch_retain(v432);
        v885 = 0;
        if (v435)
        {
          v436 = _Block_copy(v435);
          dispatch_retain(v432);
          v767 = v435;
          if (v436)
          {
            v437 = _Block_copy(v436);
            dispatch_retain(v432);
            v773 = v436;
            if (v437)
            {
              v438 = _Block_copy(v437);
              dispatch_retain(v432);
              if (v438)
              {
                v439 = _Block_copy(v438);
                dispatch_retain(v432);
                unint64_t v886 = (unint64_t)v432;
                if (v439)
                {
                  char v440 = 0;
                  char v441 = 0;
                  char v442 = 0;
                  char v443 = 0;
                  v887 = _Block_copy(v439);
                  dispatch_retain(v432);
                  dispatch_release(v432);
                  _Block_release(v439);
                  goto LABEL_804;
                }
                char v440 = 0;
                char v441 = 0;
                char v442 = 0;
                char v443 = 0;
LABEL_803:
                v887 = 0;
                dispatch_retain(v432);
                dispatch_release(v432);
LABEL_804:
                dispatch_release(v432);
                if ((v443 & 1) == 0) {
                  _Block_release(v438);
                }
                dispatch_release(v432);
                if ((v442 & 1) == 0) {
                  _Block_release(v437);
                }
                v885 = boost::function1<void,coex::SubId>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>)::stored_vtable;
                dispatch_release(v432);
                if ((v441 & 1) == 0) {
                  _Block_release(v773);
                }
                dispatch_release(v432);
                if ((v440 & 1) == 0) {
                  _Block_release(v767);
                }
                *((void *)&v889 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(void *)&long long v889 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(void *)&blocuint64_t k = 0;
                boost::function1<void,coex::SubId>::move_assign((uint64_t)&block, (uint64_t *)&v885);
                boost::function1<void,coex::SubId>::move_assign((uint64_t)&v885, (uint64_t *)&v878 + 1);
                boost::function1<void,coex::SubId>::move_assign((uint64_t)&v878 + 8, (uint64_t *)&block);
                if ((void)block)
                {
                  if ((block & 1) == 0)
                  {
                    v444 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
                    if (v444) {
                      v444((char *)&block + 8, (char *)&block + 8, 2);
                    }
                  }
                }
                if (v885)
                {
                  if ((v885 & 1) == 0)
                  {
                    v445 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v885 & 0xFFFFFFFFFFFFFFFELL);
                    if (v445) {
                      v445((uint64_t)&v886, &v886, 2u);
                    }
                  }
                  v885 = 0;
                }
                dispatch_release(object);
                if (v884) {
                  _Block_release(v884);
                }
                dispatch_release(v881);
                if (v882) {
                  _Block_release(v882);
                }
                atomic_fetch_add_explicit(&v788->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                v446 = operator new(0x18uLL);
                void *v446 = &unk_1F20F2398;
                v446[1] = v429;
                v446[2] = v788;
                atomic_fetch_add_explicit(&v788->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                v447 = operator new(0x18uLL);
                void *v447 = &unk_1F20F2398;
                v447[1] = v429;
                v447[2] = v788;
                atomic_fetch_add_explicit(&v788->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                *((void *)&block + 1) = v447;
                LODWORD(block) = 2;
                v448 = v877[1];
                if (v877[1] >= (void *)v878)
                {
                  v450 = (void *)std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v877, (uint64_t)&block);
                }
                else
                {
                  v449 = operator new(0x18uLL);
                  void *v449 = &unk_1F20F2398;
                  v449[1] = v429;
                  v449[2] = v788;
                  atomic_fetch_add_explicit(&v788->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                  v448[1] = v449;
                  *(_DWORD *)v448 = 2;
                  v450 = v448 + 3;
                }
                v877[1] = v450;
                boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&block);
                (*(void (**)(void *))(*v446 + 8))(v446);
                std::__shared_weak_count::__release_weak(v788);
                v451 = *(uint64_t ***)(v797 + 112);
                *(void *)&long long v452 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v452 + 1) = 0xAAAAAAAAAAAAAAAALL;
                long long v897 = v452;
                long long v896 = v452;
                long long v895 = v452;
                long long v894 = v452;
                long long v893 = v452;
                long long v892 = v452;
                long long v891 = v452;
                *(_OWORD *)v890 = v452;
                long long v889 = v452;
                blocuint64_t k = v452;
                v453 = (pthread_mutex_t *)v451[3];
                unint64_t v898 = 10;
                std::string __p = &block;
                uint64_t v900 = 0;
                v901 = v453;
                pthread_mutex_lock(v453);
                unint64_t v886 = 0xAAAAAAAAAAAAAAAALL;
                v885 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
                v454 = (atomic_uint *)v451[1];
                v798 = (uint64_t ***)v451;
                if (v454 && atomic_load_explicit(v454 + 2, memory_order_acquire) == 1)
                {
                  v455 = (uint64_t *)**v451;
                  v456 = v451[2];
                  int v457 = 2;
                  if (v456 != v455) {
                    goto LABEL_918;
                  }
                  goto LABEL_917;
                }
                v458 = (uint64_t **)operator new(0x20uLL);
                v459 = *v451;
                uint64_t v460 = *v459;
                v774 = v458;
                v461 = operator new(0x40uLL);
                v462 = v461;
                void *v461 = v461;
                v461[1] = v461;
                v461[2] = 0;
                v463 = *(void **)(v460 + 8);
                if (v463 != (void *)v460)
                {
                  uint64_t v464 = 0;
                  v465 = v461;
                  do
                  {
                    v466 = operator new(0x20uLL);
                    v466[2] = v463[2];
                    uint64_t v467 = v463[3];
                    v466[3] = v467;
                    if (v467)
                    {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v467 + 8), 1u, memory_order_relaxed);
                      v465 = (void *)*v462;
                      uint64_t v464 = v462[2];
                    }
                    void *v466 = v465;
                    v466[1] = v462;
                    v465[1] = v466;
                    void *v462 = v466;
                    v462[2] = ++v464;
                    v463 = (void *)v463[1];
                    v465 = v466;
                  }
                  while (v463 != (void *)v460);
                }
                v768 = v459;
                v462[3] = 0;
                v468 = (void **)(v462 + 3);
                v462[4] = 0;
                v469 = v462 + 4;
                v462[5] = 0;
                *((unsigned char *)v462 + 48) = *(unsigned char *)(v460 + 48);
                v462[3] = v462 + 4;
                v470 = *(void **)(v460 + 24);
                v471 = (void *)(v460 + 32);
                if (v470 == (void *)(v460 + 32))
                {
LABEL_838:
                  *((unsigned char *)v462 + 56) = *(unsigned char *)(v460 + 56);
                  v472 = *(void **)(v460 + 24);
                  if (v472 != v471)
                  {
                    v473 = (void *)v462[3];
                    uint64_t v474 = v462[1];
                    do
                    {
                      v473[6] = v474;
                      uint64_t v475 = v460;
                      if (v472 != v471) {
                        uint64_t v475 = v472[6];
                      }
                      v476 = (void *)v472[1];
                      v477 = v476;
                      v478 = v472;
                      if (v476)
                      {
                        do
                        {
                          v479 = v477;
                          v477 = (void *)*v477;
                        }
                        while (v477);
                      }
                      else
                      {
                        do
                        {
                          v479 = (void *)v478[2];
                          BOOL v205 = *v479 == (void)v478;
                          v478 = v479;
                        }
                        while (!v205);
                      }
                      uint64_t v480 = v460;
                      if (v479 != v471) {
                        uint64_t v480 = v479[6];
                      }
                      while (v475 != v480)
                      {
                        uint64_t v475 = *(void *)(v475 + 8);
                        uint64_t v474 = *(void *)(v474 + 8);
                      }
                      if (v476)
                      {
                        do
                        {
                          v481 = v476;
                          v476 = (void *)*v476;
                        }
                        while (v476);
                      }
                      else
                      {
                        do
                        {
                          v481 = (void *)v472[2];
                          BOOL v205 = *v481 == (void)v472;
                          v472 = v481;
                        }
                        while (!v205);
                      }
                      v482 = (void *)v473[1];
                      if (v482)
                      {
                        do
                        {
                          v483 = v482;
                          v482 = (void *)*v482;
                        }
                        while (v482);
                      }
                      else
                      {
                        do
                        {
                          v483 = (void *)v473[2];
                          BOOL v205 = *v483 == (void)v473;
                          v473 = v483;
                        }
                        while (!v205);
                      }
                      v472 = v481;
                      v473 = v483;
                    }
                    while (v481 != v471);
                  }
                  *v774 = v462;
                  v774[1] = 0;
                  v503 = (uint64_t *)operator new(0x18uLL);
                  v451 = (uint64_t **)v798;
                  v503[1] = 0x100000001;
                  uint64_t *v503 = (uint64_t)&unk_1F20F26C0;
                  v503[2] = (uint64_t)v462;
                  v774[1] = v503;
                  v774[2] = (uint64_t *)v768[2];
                  uint64_t v504 = v768[3];
                  v774[3] = (uint64_t *)v504;
                  if (v504) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v504 + 8), 1u, memory_order_relaxed);
                  }
                  v505 = (uint64_t **)operator new(0x18uLL);
                  v505[1] = (uint64_t *)0x100000001;
                  *v505 = (uint64_t *)&unk_1F20F2660;
                  v505[2] = (uint64_t *)v774;
                  v506 = (atomic_uint *)v798[1];
                  *v798 = v774;
                  v798[1] = v505;
                  if (v506)
                  {
                    if (atomic_fetch_add(v506 + 2, 0xFFFFFFFF) == 1)
                    {
                      (*(void (**)(atomic_uint *))(*(void *)v506 + 16))(v506);
                      if (atomic_fetch_add(v506 + 3, 0xFFFFFFFF) == 1) {
                        (*(void (**)(atomic_uint *))(*(void *)v506 + 24))(v506);
                      }
                    }
                  }
                  int v457 = 0;
                  v455 = **v798;
LABEL_917:
                  v456 = (uint64_t *)v455[1];
                  if (v455 == v456) {
                    goto LABEL_1017;
                  }
LABEL_918:
                  int v507 = 0;
                  unsigned int v508 = v457 - 1;
LABEL_926:
                  uint64_t v511 = v456[2];
                  v512 = *(uint64_t **)(v511 + 32);
                  if (!v512) {
                    goto LABEL_919;
                  }
                  for (uint64_t k = *v512; ; k += 24)
                  {
                    if (k == v512[1]) {
                      goto LABEL_919;
                    }
                    if ((*(_DWORD *)k ^ (*(int *)k >> 31)) > 1)
                    {
                      if ((*(uint64_t (**)(void))(**(void **)(k + 8) + 24))(*(void *)(k + 8))) {
                        goto LABEL_935;
                      }
                    }
                    else
                    {
                      uint64_t v514 = *(void *)(k + 16);
                      if (!v514 || !atomic_load_explicit((atomic_uint *volatile)(v514 + 8), memory_order_acquire))
                      {
LABEL_935:
                        if (*(unsigned char *)(v511 + 24))
                        {
                          *(unsigned char *)(v511 + 24) = 0;
                          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v511, &block);
                        }
LABEL_919:
                        uint64_t v509 = v456[2];
                        if (*(unsigned char *)(v509 + 24))
                        {
                          v455 = (uint64_t *)v456[1];
                          goto LABEL_921;
                        }
                        uint64_t v515 = **v451;
                        v516 = (uint64_t **)(v515 + 32);
                        v517 = *(char **)(v515 + 32);
                        if (!v517)
                        {
                          if (*(uint64_t **)(v515 + 80) != v456) {
                            goto LABEL_1012;
                          }
                          v539 = (uint64_t *)v456[1];
                          v541 = (uint64_t **)(v515 + 32);
                          v520 = (uint64_t *)(v515 + 32);
                          if (v539 != (uint64_t *)v515) {
                            goto LABEL_1008;
                          }
                          goto LABEL_990;
                        }
                        int v518 = *(_DWORD *)(v509 + 64);
                        int v519 = *(_DWORD *)(v509 + 72);
                        v520 = (uint64_t *)(v515 + 32);
                        uint64_t v521 = *(void *)(v515 + 32);
                        if (v518 == 1)
                        {
                          v520 = (uint64_t *)(v515 + 32);
                          uint64_t v522 = *(void *)(v515 + 32);
                          do
                          {
                            while (1)
                            {
                              int v528 = *(_DWORD *)(v522 + 32);
                              BOOL v529 = v528 < 1;
                              if (v528 == 1) {
                                BOOL v529 = *(_DWORD *)(v522 + 40) < v519;
                              }
                              if (!v529) {
                                break;
                              }
                              uint64_t v522 = *(void *)(v522 + 8);
                              if (!v522) {
                                goto LABEL_956;
                              }
                            }
                            v520 = (uint64_t *)v522;
                            uint64_t v522 = *(void *)v522;
                          }
                          while (v522);
                        }
                        else
                        {
                          do
                          {
                            int v523 = *(_DWORD *)(v521 + 32);
                            BOOL v524 = v523 == v518;
                            BOOL v525 = v523 < v518;
                            if (v523 >= v518) {
                              v526 = (uint64_t *)v521;
                            }
                            else {
                              v526 = (uint64_t *)(v521 + 8);
                            }
                            if (v525) {
                              v527 = v520;
                            }
                            else {
                              v527 = (uint64_t *)v521;
                            }
                            if (v524)
                            {
                              v526 = (uint64_t *)v521;
                              v520 = (uint64_t *)v521;
                            }
                            else
                            {
                              v520 = v527;
                            }
                            uint64_t v521 = *v526;
                          }
                          while (*v526);
                        }
LABEL_956:
                        if ((uint64_t *)v520[6] == v456)
                        {
                          v530 = (uint64_t **)(v515 + 32);
                          v531 = *(uint64_t ***)(v515 + 32);
                          if (v518 != 1)
                          {
                            do
                            {
                              int v532 = *((_DWORD *)v531 + 8);
                              v533 = (uint64_t ***)(v531 + 1);
                              BOOL v534 = v518 == v532;
                              BOOL v535 = v518 < v532;
                              if (v518 >= v532) {
                                v536 = (uint64_t ***)(v531 + 1);
                              }
                              else {
                                v536 = (uint64_t ***)v531;
                              }
                              if (!v535) {
                                v531 = v530;
                              }
                              if (v534) {
                                v536 = v533;
                              }
                              else {
                                v530 = v531;
                              }
                              v531 = *v536;
                            }
                            while (*v536);
LABEL_974:
                            v538 = (uint64_t *)v515;
                            if (v530 != v516) {
                              v538 = v530[6];
                            }
                            v539 = (uint64_t *)v456[1];
                            if (v539 != v538)
                            {
                              if (v518 != 1)
                              {
                                int v540 = *((_DWORD *)v517 + 8);
                                if (v518 == v540) {
                                  goto LABEL_1011;
                                }
                                while (1)
                                {
                                  if (v518 < v540)
                                  {
                                    uint64_t v547 = *(void *)v517;
                                    if (!*(void *)v517)
                                    {
                                      v516 = (uint64_t **)v517;
LABEL_1007:
                                      v541 = (uint64_t **)v517;
LABEL_1008:
                                      v517 = (char *)operator new(0x38uLL);
                                      uint64_t v548 = *(void *)(v509 + 64);
                                      *((_DWORD *)v517 + 10) = *(_DWORD *)(v509 + 72);
                                      *((void *)v517 + 4) = v548;
                                      *((void *)v517 + 6) = 0;
                                      *(void *)v517 = 0;
                                      *((void *)v517 + 1) = 0;
                                      *((void *)v517 + 2) = v541;
                                      *v516 = (uint64_t *)v517;
                                      uint64_t v549 = **(void **)(v515 + 24);
                                      v550 = (uint64_t *)v517;
                                      if (v549)
                                      {
                                        *(void *)(v515 + 24) = v549;
                                        v550 = *v516;
                                      }
                                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v515 + 32), v550);
                                      ++*(void *)(v515 + 40);
LABEL_1011:
                                      *((void *)v517 + 6) = v539;
                                      goto LABEL_1012;
                                    }
                                  }
                                  else
                                  {
                                    if (v540 >= v518) {
                                      goto LABEL_1011;
                                    }
                                    uint64_t v547 = *((void *)v517 + 1);
                                    if (!v547)
                                    {
                                      v516 = (uint64_t **)(v517 + 8);
                                      goto LABEL_1007;
                                    }
                                  }
                                  int v540 = *(_DWORD *)(v547 + 32);
                                  v517 = (char *)v547;
                                  if (v518 == v540)
                                  {
                                    *(void *)(v547 + 48) = v539;
                                    goto LABEL_1012;
                                  }
                                }
                              }
                              while (1)
                              {
                                v541 = (uint64_t **)v517;
                                int v542 = *((_DWORD *)v517 + 8);
                                if (v542 == 1)
                                {
                                  int v543 = *((_DWORD *)v517 + 10);
                                  if (v543 <= v519)
                                  {
                                    if (v543 >= v519)
                                    {
                                      *((void *)v517 + 6) = v539;
                                      goto LABEL_1012;
                                    }
LABEL_986:
                                    v517 = (char *)*((void *)v517 + 1);
                                    if (!v517)
                                    {
                                      v516 = v541 + 1;
                                      goto LABEL_1008;
                                    }
                                    continue;
                                  }
                                }
                                else if (v542 <= 1)
                                {
                                  goto LABEL_986;
                                }
                                v517 = *(char **)v517;
                                if (!*v541)
                                {
                                  v516 = v541;
                                  goto LABEL_1008;
                                }
                              }
                            }
LABEL_990:
                            v544 = (uint64_t *)v520[1];
                            v545 = v520;
                            if (v544)
                            {
                              do
                              {
                                v546 = v544;
                                v544 = (uint64_t *)*v544;
                              }
                              while (v544);
                            }
                            else
                            {
                              do
                              {
                                v546 = (uint64_t *)v545[2];
                                BOOL v205 = *v546 == (void)v545;
                                v545 = v546;
                              }
                              while (!v205);
                            }
                            if (*(uint64_t **)(v515 + 24) == v520) {
                              *(void *)(v515 + 24) = v546;
                            }
                            --*(void *)(v515 + 40);
                            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v517, v520);
                            operator delete(v520);
                            goto LABEL_1012;
                          }
                          while (1)
                          {
                            int v537 = *((_DWORD *)v531 + 8);
                            if (v537 == 1)
                            {
                              if (v519 >= *((_DWORD *)v531 + 10)) {
                                goto LABEL_968;
                              }
                            }
                            else if (v537 <= 1)
                            {
LABEL_968:
                              v531 = (uint64_t **)v531[1];
                              if (!v531) {
                                goto LABEL_974;
                              }
                              continue;
                            }
                            v530 = v531;
                            v531 = (uint64_t **)*v531;
                            if (!v531) {
                              goto LABEL_974;
                            }
                          }
                        }
LABEL_1012:
                        uint64_t v551 = *v456;
                        v455 = (uint64_t *)v456[1];
                        *(void *)(v551 + 8) = v455;
                        *(void *)v456[1] = v551;
                        --*(void *)(v515 + 16);
                        v552 = (atomic_uint *)v456[3];
                        if (v552)
                        {
                          if (atomic_fetch_add(v552 + 2, 0xFFFFFFFF) == 1)
                          {
                            (*(void (**)(atomic_uint *))(*(void *)v552 + 16))(v552);
                            if (atomic_fetch_add(v552 + 3, 0xFFFFFFFF) == 1) {
                              (*(void (**)(atomic_uint *))(*(void *)v552 + 24))(v552);
                            }
                          }
                        }
                        operator delete(v456);
                        v451 = (uint64_t **)v798;
LABEL_921:
                        BOOL v510 = v455 != (uint64_t *)**v451 && v508 >= ++v507;
                        v456 = v455;
                        if (!v510)
                        {
LABEL_1017:
                          v451[2] = v455;
                          v553 = operator new(0x50uLL);
                          v553[1] = 0;
                          v553[2] = 0;
                          *((unsigned char *)v553 + 24) = 1;
                          *((_DWORD *)v553 + 7) = 1;
                          void *v553 = &unk_1F20F2720;
                          v554 = operator new(0x38uLL);
                          std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v554, (uint64_t *)v877);
                          v554[3] = 0;
                          uint64_t v555 = *((void *)&v878 + 1);
                          if (*((void *)&v878 + 1))
                          {
                            v554[3] = *((void *)&v878 + 1);
                            if (v555)
                            {
                              *((_OWORD *)v554 + 2) = v879;
                              v554[6] = v880;
                            }
                            else
                            {
                              (*(void (**)(long long *, void *, void))(v555 & 0xFFFFFFFFFFFFFFFELL))(&v879, v554 + 4, 0);
                            }
                          }
                          v553[4] = v554;
                          v553[5] = 0;
                          v556 = operator new(0x18uLL);
                          v556[1] = 0x100000001;
                          void *v556 = &unk_1F20F2778;
                          v556[2] = v554;
                          v553[5] = v556;
                          v553[6] = v451[3];
                          v557 = (atomic_uint *)v451[4];
                          v553[7] = v557;
                          if (v557) {
                            atomic_fetch_add_explicit(v557 + 2, 1u, memory_order_relaxed);
                          }
                          *((_DWORD *)v553 + 16) = 0;
                          *((unsigned char *)v553 + 68) = 0;
                          v885 = (uint64_t (**)())v553;
                          v558 = operator new(0x18uLL);
                          *((void *)v558 + 1) = 0x100000001;
                          *(void *)v558 = &unk_1F20F27D8;
                          *((void *)v558 + 2) = v553;
                          unint64_t v886 = (unint64_t)v558;
                          v559 = (uint64_t *)**v451;
                          v560 = operator new(0x20uLL);
                          v561 = v559 + 4;
                          v560[2] = v553;
                          v560[3] = v558;
                          atomic_fetch_add_explicit((atomic_uint *volatile)v558 + 2, 1u, memory_order_relaxed);
                          uint64_t v562 = *v559;
                          *(void *)(v562 + 8) = v560;
                          void *v560 = v562;
                          uint64_t *v559 = (uint64_t)v560;
                          v560[1] = v559;
                          ++v559[2];
                          v563 = (uint64_t *)v559[4];
                          if (!v563)
                          {
                            v563 = v559 + 4;
                            goto LABEL_1044;
                          }
                          v564 = v559 + 4;
                          uint64_t v565 = v559[4];
                          do
                          {
                            int v566 = *(_DWORD *)(v565 + 32);
                            BOOL v567 = v566 == 2;
                            BOOL v568 = v566 < 2;
                            if (v566 >= 2) {
                              v569 = (uint64_t *)v565;
                            }
                            else {
                              v569 = (uint64_t *)(v565 + 8);
                            }
                            if (!v568) {
                              v564 = (uint64_t *)v565;
                            }
                            if (v567)
                            {
                              v569 = (uint64_t *)v565;
                              v564 = (uint64_t *)v565;
                            }
                            uint64_t v565 = *v569;
                          }
                          while (*v569);
                          if (v564 != v561 && *((_DWORD *)v564 + 8) == 2)
                          {
LABEL_1035:
                            *((_DWORD *)v553 + 16) = 2;
                            *(void *)((char *)v553 + 68) = 0xAAAAAAAAAAAAAA00;
                            v570 = this;
                            goto LABEL_1047;
                          }
                          int v571 = *((_DWORD *)v563 + 8);
                          while (1)
                          {
                            if (v571 == 2) {
                              goto LABEL_1035;
                            }
                            if (v571 < 3)
                            {
                              v572 = (uint64_t *)v563[1];
                              if (!v572)
                              {
                                v561 = v563 + 1;
LABEL_1044:
                                v573 = operator new(0x38uLL);
                                v573[4] = 0xAAAAAA0000000002;
                                *((_DWORD *)v573 + 10) = -1431655766;
                                v573[6] = v560;
                                void *v573 = 0;
                                v573[1] = 0;
                                v573[2] = v563;
                                uint64_t *v561 = (uint64_t)v573;
                                uint64_t v574 = *(void *)v559[3];
                                if (v574)
                                {
                                  v559[3] = v574;
                                  v573 = (void *)*v561;
                                }
                                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v559[4], v573);
                                ++v559[5];
                                v553 = v885;
                                v558 = (void *)v886;
                                *((_DWORD *)v885 + 16) = 2;
                                *(void *)((char *)v553 + 68) = 0xAAAAAAAAAAAAAA00;
                                v570 = this;
                                if (v558)
                                {
LABEL_1047:
                                  atomic_fetch_add_explicit((atomic_uint *volatile)v558 + 3, 1u, memory_order_relaxed);
                                  *(void *)&long long v817 = v553;
                                  *((void *)&v817 + 1) = v558;
                                  atomic_fetch_add_explicit((atomic_uint *volatile)v558 + 3, 1u, memory_order_relaxed);
                                  if (atomic_fetch_add((atomic_uint *volatile)v558 + 3, 0xFFFFFFFF) == 1) {
                                    (*(void (**)(void *))(*(void *)v558 + 24))(v558);
                                  }
                                  v575 = (atomic_uint *)v886;
                                  if (v886)
                                  {
LABEL_1050:
                                    if (atomic_fetch_add(v575 + 2, 0xFFFFFFFF) == 1)
                                    {
                                      (*(void (**)(atomic_uint *))(*(void *)v575 + 16))(v575);
                                      if (atomic_fetch_add(v575 + 3, 0xFFFFFFFF) == 1) {
                                        (*(void (**)(atomic_uint *))(*(void *)v575 + 24))(v575);
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  long long v817 = (unint64_t)v553;
                                  v575 = (atomic_uint *)v886;
                                  if (v886) {
                                    goto LABEL_1050;
                                  }
                                }
                                pthread_mutex_unlock(v901);
                                v576 = (char *)__p;
                                if (__p)
                                {
                                  if (v900 - 1 >= 0)
                                  {
                                    v577 = (char *)__p + 16 * v900;
                                    do
                                    {
                                      v578 = (atomic_uint *)*((void *)v577 - 1);
                                      if (v578)
                                      {
                                        if (atomic_fetch_add(v578 + 2, 0xFFFFFFFF) == 1)
                                        {
                                          (*(void (**)(atomic_uint *))(*(void *)v578 + 16))(v578);
                                          if (atomic_fetch_add(v578 + 3, 0xFFFFFFFF) == 1) {
                                            (*(void (**)(atomic_uint *))(*(void *)v578 + 24))(v578);
                                          }
                                        }
                                      }
                                      v577 -= 16;
                                    }
                                    while (v577 > v576);
                                  }
                                  v570 = this;
                                  if (v898 >= 0xB) {
                                    operator delete(__p);
                                  }
                                }
                                if (*((void *)&v878 + 1))
                                {
                                  if ((BYTE8(v878) & 1) == 0)
                                  {
                                    v579 = *(void (**)(long long *, long long *, uint64_t))(*((void *)&v878 + 1) & 0xFFFFFFFFFFFFFFFELL);
                                    if (v579) {
                                      v579(&v879, &v879, 2);
                                    }
                                  }
                                  *((void *)&v878 + 1) = 0;
                                }
                                v580 = (char *)v877[0];
                                if (v877[0])
                                {
                                  v581 = (char *)v877[1];
                                  v582 = v877[0];
                                  if (v877[1] != v877[0])
                                  {
                                    do
                                    {
                                      v581 -= 24;
                                      boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v581);
                                    }
                                    while (v581 != v580);
                                    v582 = v877[0];
                                  }
                                  v877[1] = v580;
                                  operator delete(v582);
                                }
                                dispatch_release(v875);
                                if (v876) {
                                  _Block_release(v876);
                                }
                                if (atomic_fetch_add(&v788->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  v583 = v780;
                                  if (!v780) {
                                    goto LABEL_1081;
                                  }
LABEL_1080:
                                  _Block_release(v583);
                                }
                                else
                                {
                                  ((void (*)(std::__shared_weak_count *))v788->__on_zero_shared)(v788);
                                  std::__shared_weak_count::__release_weak(v788);
                                  v583 = v780;
                                  if (v780) {
                                    goto LABEL_1080;
                                  }
                                }
LABEL_1081:
                                v584 = operator new(0x20uLL);
                                v584[1] = v817;
                                uint64_t v585 = *((void *)v570 + 28);
                                *(void *)v584 = v585;
                                *((void *)v584 + 1) = v784;
                                *(void *)(v585 + 8) = v584;
                                *((void *)v570 + 28) = v584;
                                ++*((void *)v570 + 30);
                                uint64_t v586 = *((void *)v570 + 26);
                                v868 = (void **)MEMORY[0x1E4F143A8];
                                uint64_t v869 = 0x40000000;
                                v870 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNSt3__13mapIPKcNS9_4listINS9_4pairIyjEENS9_9allocatorISF_EEEENS9_4lessISC_EENSG_INSE_IKSC_SI_EEEEEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSJ_IiEENS6_8functionISQ_EENSU_IFvRKNS7_10connectionESO_SP_EEENS7_5mutexEEES3_vJSO_SP_EEEDTcl7connectfp_cvNS9_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FS17_S19_E_block_invoke;
                                v871 = &__block_descriptor_tmp_405;
                                v872 = v790;
                                v873 = (uint64_t (*)(coex::Module::State *__hidden))coex::Module::State::handleDesenseFrequencyReport_sync;
                                uint64_t v874 = 0;
                                v587 = _Block_copy(&v868);
                                uint64_t v799 = v586;
                                v588 = (std::__shared_weak_count *)*((void *)v570 + 10);
                                if (!v588
                                  || (uint64_t v589 = *((void *)v570 + 9), (v590 = std::__shared_weak_count::lock(v588)) == 0))
                                {
                                  std::__throw_bad_weak_ptr[abi:ne180100]();
                                }
                                v591 = v590;
                                v592 = *((void *)v570 + 11);
                                dispatch_object_t v875 = v592;
                                v789 = v587;
                                if (v587) {
                                  v593 = _Block_copy(v587);
                                }
                                else {
                                  v593 = 0;
                                }
                                v876 = v593;
                                dispatch_retain(v592);
                                long long v878 = 0u;
                                *(_OWORD *)v877 = 0u;
                                dispatch_object_t v881 = v592;
                                if (v593) {
                                  v593 = _Block_copy(v593);
                                }
                                v882 = v593;
                                dispatch_retain(v592);
                                dispatch_object_t object = v592;
                                v791 = v591;
                                if (v593)
                                {
                                  v594 = _Block_copy(v593);
                                  v884 = v594;
                                  dispatch_retain(v592);
                                  if (v594)
                                  {
                                    v595 = _Block_copy(v594);
                                    dispatch_retain(v592);
                                    v885 = 0;
                                    if (v595)
                                    {
                                      v596 = _Block_copy(v595);
                                      dispatch_retain(v592);
                                      v775 = v595;
                                      if (v596)
                                      {
                                        v597 = _Block_copy(v596);
                                        dispatch_retain(v592);
                                        v781 = v596;
                                        if (v597)
                                        {
                                          v598 = _Block_copy(v597);
                                          dispatch_retain(v592);
                                          if (v598)
                                          {
                                            v599 = _Block_copy(v598);
                                            dispatch_retain(v592);
                                            unint64_t v886 = (unint64_t)v592;
                                            if (v599)
                                            {
                                              char v600 = 0;
                                              char v601 = 0;
                                              char v602 = 0;
                                              char v603 = 0;
                                              v887 = _Block_copy(v599);
                                              dispatch_retain(v592);
                                              dispatch_release(v592);
                                              _Block_release(v599);
                                              goto LABEL_1103;
                                            }
                                            char v600 = 0;
                                            char v601 = 0;
                                            char v602 = 0;
                                            char v603 = 0;
LABEL_1102:
                                            v887 = 0;
                                            dispatch_retain(v592);
                                            dispatch_release(v592);
LABEL_1103:
                                            dispatch_release(v592);
                                            if ((v603 & 1) == 0) {
                                              _Block_release(v598);
                                            }
                                            dispatch_release(v592);
                                            if ((v602 & 1) == 0) {
                                              _Block_release(v597);
                                            }
                                            v885 = boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>)::stored_vtable;
                                            dispatch_release(v592);
                                            if ((v601 & 1) == 0) {
                                              _Block_release(v781);
                                            }
                                            dispatch_release(v592);
                                            if ((v600 & 1) == 0) {
                                              _Block_release(v775);
                                            }
                                            *((void *)&v889 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                            *(void *)&long long v889 = 0xAAAAAAAAAAAAAAAALL;
                                            *((void *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
                                            *(void *)&blocuint64_t k = 0;
                                            boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign((uint64_t)&block, (uint64_t *)&v885);
                                            boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign((uint64_t)&v885, (uint64_t *)&v878 + 1);
                                            boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign((uint64_t)&v878 + 8, (uint64_t *)&block);
                                            if ((void)block)
                                            {
                                              if ((block & 1) == 0)
                                              {
                                                v604 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
                                                if (v604) {
                                                  v604((char *)&block + 8, (char *)&block + 8, 2);
                                                }
                                              }
                                            }
                                            if (v885)
                                            {
                                              if ((v885 & 1) == 0)
                                              {
                                                v605 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v885 & 0xFFFFFFFFFFFFFFFELL);
                                                if (v605) {
                                                  v605((uint64_t)&v886, &v886, 2u);
                                                }
                                              }
                                              v885 = 0;
                                            }
                                            dispatch_release(object);
                                            if (v884) {
                                              _Block_release(v884);
                                            }
                                            dispatch_release(v881);
                                            if (v882) {
                                              _Block_release(v882);
                                            }
                                            atomic_fetch_add_explicit(&v791->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                                            v606 = operator new(0x18uLL);
                                            void *v606 = &unk_1F20F2398;
                                            v606[1] = v589;
                                            v606[2] = v791;
                                            atomic_fetch_add_explicit(&v791->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                                            v607 = operator new(0x18uLL);
                                            void *v607 = &unk_1F20F2398;
                                            v607[1] = v589;
                                            v607[2] = v791;
                                            atomic_fetch_add_explicit(&v791->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                                            *((void *)&block + 1) = v607;
                                            LODWORD(block) = 2;
                                            v608 = v877[1];
                                            if (v877[1] >= (void *)v878)
                                            {
                                              v611 = (void *)std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v877, (uint64_t)&block);
                                              v610 = v791;
                                            }
                                            else
                                            {
                                              v609 = operator new(0x18uLL);
                                              void *v609 = &unk_1F20F2398;
                                              v609[1] = v589;
                                              v610 = v791;
                                              v609[2] = v791;
                                              atomic_fetch_add_explicit(&v791->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                                              v608[1] = v609;
                                              *(_DWORD *)v608 = 2;
                                              v611 = v608 + 3;
                                            }
                                            v877[1] = v611;
                                            boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&block);
                                            (*(void (**)(void *))(*v606 + 8))(v606);
                                            std::__shared_weak_count::__release_weak(v610);
                                            v612 = *(uint64_t ***)(v799 + 136);
                                            *(void *)&long long v613 = 0xAAAAAAAAAAAAAAAALL;
                                            *((void *)&v613 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                            long long v897 = v613;
                                            long long v896 = v613;
                                            long long v895 = v613;
                                            long long v894 = v613;
                                            long long v893 = v613;
                                            long long v892 = v613;
                                            long long v891 = v613;
                                            *(_OWORD *)v890 = v613;
                                            long long v889 = v613;
                                            blocuint64_t k = v613;
                                            v614 = (pthread_mutex_t *)v612[3];
                                            unint64_t v898 = 10;
                                            std::string __p = &block;
                                            uint64_t v900 = 0;
                                            v901 = v614;
                                            pthread_mutex_lock(v614);
                                            unint64_t v886 = 0xAAAAAAAAAAAAAAAALL;
                                            v885 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
                                            v615 = (atomic_uint *)v612[1];
                                            v800 = (uint64_t ***)v612;
                                            if (v615 && atomic_load_explicit(v615 + 2, memory_order_acquire) == 1)
                                            {
                                              v616 = (uint64_t *)**v612;
                                              v617 = v612[2];
                                              int v618 = 2;
                                              if (v617 != v616) {
                                                goto LABEL_1217;
                                              }
                                              goto LABEL_1216;
                                            }
                                            v619 = (uint64_t **)operator new(0x20uLL);
                                            v620 = *v612;
                                            uint64_t v621 = **v612;
                                            v782 = v619;
                                            v622 = operator new(0x40uLL);
                                            v623 = v622;
                                            void *v622 = v622;
                                            v622[1] = v622;
                                            v622[2] = 0;
                                            v624 = *(void **)(v621 + 8);
                                            if (v624 != (void *)v621)
                                            {
                                              uint64_t v625 = 0;
                                              v626 = v622;
                                              do
                                              {
                                                v627 = operator new(0x20uLL);
                                                v627[2] = v624[2];
                                                uint64_t v628 = v624[3];
                                                v627[3] = v628;
                                                if (v628)
                                                {
                                                  atomic_fetch_add_explicit((atomic_uint *volatile)(v628 + 8), 1u, memory_order_relaxed);
                                                  v626 = (void *)*v623;
                                                  uint64_t v625 = v623[2];
                                                }
                                                void *v627 = v626;
                                                v627[1] = v623;
                                                v626[1] = v627;
                                                void *v623 = v627;
                                                v623[2] = ++v625;
                                                v624 = (void *)v624[1];
                                                v626 = v627;
                                              }
                                              while (v624 != (void *)v621);
                                            }
                                            v776 = v620;
                                            v623[3] = 0;
                                            v629 = (void **)(v623 + 3);
                                            v623[4] = 0;
                                            v630 = v623 + 4;
                                            v623[5] = 0;
                                            *((unsigned char *)v623 + 48) = *(unsigned char *)(v621 + 48);
                                            v623[3] = v623 + 4;
                                            v631 = *(void **)(v621 + 24);
                                            v632 = (void *)(v621 + 32);
                                            if (v631 == (void *)(v621 + 32))
                                            {
LABEL_1137:
                                              *((unsigned char *)v623 + 56) = *(unsigned char *)(v621 + 56);
                                              v633 = *(void **)(v621 + 24);
                                              if (v633 != v632)
                                              {
                                                v634 = (void *)v623[3];
                                                uint64_t v635 = v623[1];
                                                do
                                                {
                                                  v634[6] = v635;
                                                  uint64_t v636 = v621;
                                                  if (v633 != v632) {
                                                    uint64_t v636 = v633[6];
                                                  }
                                                  v637 = (void *)v633[1];
                                                  v638 = v637;
                                                  v639 = v633;
                                                  if (v637)
                                                  {
                                                    do
                                                    {
                                                      v640 = v638;
                                                      v638 = (void *)*v638;
                                                    }
                                                    while (v638);
                                                  }
                                                  else
                                                  {
                                                    do
                                                    {
                                                      v640 = (void *)v639[2];
                                                      BOOL v205 = *v640 == (void)v639;
                                                      v639 = v640;
                                                    }
                                                    while (!v205);
                                                  }
                                                  uint64_t v641 = v621;
                                                  if (v640 != v632) {
                                                    uint64_t v641 = v640[6];
                                                  }
                                                  while (v636 != v641)
                                                  {
                                                    uint64_t v636 = *(void *)(v636 + 8);
                                                    uint64_t v635 = *(void *)(v635 + 8);
                                                  }
                                                  if (v637)
                                                  {
                                                    do
                                                    {
                                                      v642 = v637;
                                                      v637 = (void *)*v637;
                                                    }
                                                    while (v637);
                                                  }
                                                  else
                                                  {
                                                    do
                                                    {
                                                      v642 = (void *)v633[2];
                                                      BOOL v205 = *v642 == (void)v633;
                                                      v633 = v642;
                                                    }
                                                    while (!v205);
                                                  }
                                                  v643 = (void *)v634[1];
                                                  if (v643)
                                                  {
                                                    do
                                                    {
                                                      v644 = v643;
                                                      v643 = (void *)*v643;
                                                    }
                                                    while (v643);
                                                  }
                                                  else
                                                  {
                                                    do
                                                    {
                                                      v644 = (void *)v634[2];
                                                      BOOL v205 = *v644 == (void)v634;
                                                      v634 = v644;
                                                    }
                                                    while (!v205);
                                                  }
                                                  v633 = v642;
                                                  v634 = v644;
                                                }
                                                while (v642 != v632);
                                              }
                                              *v782 = v623;
                                              v782[1] = 0;
                                              v664 = (uint64_t *)operator new(0x18uLL);
                                              v612 = (uint64_t **)v800;
                                              v664[1] = 0x100000001;
                                              uint64_t *v664 = (uint64_t)&unk_1F20F28D8;
                                              v664[2] = (uint64_t)v623;
                                              v782[1] = v664;
                                              v782[2] = (uint64_t *)v776[2];
                                              uint64_t v665 = v776[3];
                                              v782[3] = (uint64_t *)v665;
                                              if (v665) {
                                                atomic_fetch_add_explicit((atomic_uint *volatile)(v665 + 8), 1u, memory_order_relaxed);
                                              }
                                              v666 = (uint64_t **)operator new(0x18uLL);
                                              v666[1] = (uint64_t *)0x100000001;
                                              *v666 = (uint64_t *)&unk_1F20F2878;
                                              v666[2] = (uint64_t *)v782;
                                              v667 = (atomic_uint *)v800[1];
                                              *v800 = v782;
                                              v800[1] = v666;
                                              if (v667)
                                              {
                                                if (atomic_fetch_add(v667 + 2, 0xFFFFFFFF) == 1)
                                                {
                                                  (*(void (**)(atomic_uint *))(*(void *)v667 + 16))(v667);
                                                  if (atomic_fetch_add(v667 + 3, 0xFFFFFFFF) == 1) {
                                                    (*(void (**)(atomic_uint *))(*(void *)v667 + 24))(v667);
                                                  }
                                                }
                                              }
                                              int v618 = 0;
                                              v616 = **v800;
LABEL_1216:
                                              v617 = (uint64_t *)v616[1];
                                              if (v616 == v617) {
                                                goto LABEL_1316;
                                              }
LABEL_1217:
                                              int v668 = 0;
                                              unsigned int v669 = v618 - 1;
LABEL_1225:
                                              uint64_t v672 = v617[2];
                                              v673 = *(uint64_t **)(v672 + 32);
                                              if (!v673) {
                                                goto LABEL_1218;
                                              }
                                              for (uint64_t m = *v673; ; m += 24)
                                              {
                                                if (m == v673[1]) {
                                                  goto LABEL_1218;
                                                }
                                                if ((*(_DWORD *)m ^ (*(int *)m >> 31)) > 1)
                                                {
                                                  if ((*(uint64_t (**)(void))(**(void **)(m + 8) + 24))(*(void *)(m + 8))) {
                                                    goto LABEL_1234;
                                                  }
                                                }
                                                else
                                                {
                                                  uint64_t v675 = *(void *)(m + 16);
                                                  if (!v675
                                                    || !atomic_load_explicit((atomic_uint *volatile)(v675 + 8), memory_order_acquire))
                                                  {
LABEL_1234:
                                                    if (*(unsigned char *)(v672 + 24))
                                                    {
                                                      *(unsigned char *)(v672 + 24) = 0;
                                                      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v672, &block);
                                                    }
LABEL_1218:
                                                    uint64_t v670 = v617[2];
                                                    if (*(unsigned char *)(v670 + 24))
                                                    {
                                                      v616 = (uint64_t *)v617[1];
                                                      goto LABEL_1220;
                                                    }
                                                    uint64_t v676 = **v612;
                                                    v678 = (uint64_t **)(v676 + 32);
                                                    v677 = *(char **)(v676 + 32);
                                                    if (!v677)
                                                    {
                                                      if (*(uint64_t **)(v676 + 80) != v617) {
                                                        goto LABEL_1311;
                                                      }
                                                      v700 = (uint64_t *)v617[1];
                                                      v702 = (uint64_t **)(v676 + 32);
                                                      v681 = (uint64_t *)(v676 + 32);
                                                      if (v700 != (uint64_t *)v676) {
                                                        goto LABEL_1307;
                                                      }
                                                      goto LABEL_1289;
                                                    }
                                                    int v679 = *(_DWORD *)(v670 + 64);
                                                    int v680 = *(_DWORD *)(v670 + 72);
                                                    v681 = (uint64_t *)(v676 + 32);
                                                    uint64_t v682 = *(void *)(v676 + 32);
                                                    if (v679 == 1)
                                                    {
                                                      v681 = (uint64_t *)(v676 + 32);
                                                      uint64_t v683 = *(void *)(v676 + 32);
                                                      do
                                                      {
                                                        while (1)
                                                        {
                                                          int v689 = *(_DWORD *)(v683 + 32);
                                                          BOOL v690 = v689 < 1;
                                                          if (v689 == 1) {
                                                            BOOL v690 = *(_DWORD *)(v683 + 40) < v680;
                                                          }
                                                          if (!v690) {
                                                            break;
                                                          }
                                                          uint64_t v683 = *(void *)(v683 + 8);
                                                          if (!v683) {
                                                            goto LABEL_1255;
                                                          }
                                                        }
                                                        v681 = (uint64_t *)v683;
                                                        uint64_t v683 = *(void *)v683;
                                                      }
                                                      while (v683);
                                                    }
                                                    else
                                                    {
                                                      do
                                                      {
                                                        int v684 = *(_DWORD *)(v682 + 32);
                                                        BOOL v685 = v684 == v679;
                                                        BOOL v686 = v684 < v679;
                                                        if (v684 >= v679) {
                                                          v687 = (uint64_t *)v682;
                                                        }
                                                        else {
                                                          v687 = (uint64_t *)(v682 + 8);
                                                        }
                                                        if (v686) {
                                                          v688 = v681;
                                                        }
                                                        else {
                                                          v688 = (uint64_t *)v682;
                                                        }
                                                        if (v685)
                                                        {
                                                          v687 = (uint64_t *)v682;
                                                          v681 = (uint64_t *)v682;
                                                        }
                                                        else
                                                        {
                                                          v681 = v688;
                                                        }
                                                        uint64_t v682 = *v687;
                                                      }
                                                      while (*v687);
                                                    }
LABEL_1255:
                                                    if ((uint64_t *)v681[6] != v617) {
                                                      goto LABEL_1311;
                                                    }
                                                    v691 = (uint64_t **)(v676 + 32);
                                                    v692 = *(uint64_t ***)(v676 + 32);
                                                    if (v679 != 1)
                                                    {
                                                      do
                                                      {
                                                        int v693 = *((_DWORD *)v692 + 8);
                                                        v694 = (uint64_t ***)(v692 + 1);
                                                        BOOL v695 = v679 == v693;
                                                        BOOL v696 = v679 < v693;
                                                        if (v679 >= v693) {
                                                          v697 = (uint64_t ***)(v692 + 1);
                                                        }
                                                        else {
                                                          v697 = (uint64_t ***)v692;
                                                        }
                                                        if (!v696) {
                                                          v692 = v691;
                                                        }
                                                        if (v695) {
                                                          v697 = v694;
                                                        }
                                                        else {
                                                          v691 = v692;
                                                        }
                                                        v692 = *v697;
                                                      }
                                                      while (*v697);
LABEL_1273:
                                                      v699 = (uint64_t *)v676;
                                                      if (v691 != v678) {
                                                        v699 = v691[6];
                                                      }
                                                      v700 = (uint64_t *)v617[1];
                                                      if (v700 != v699)
                                                      {
                                                        if (v679 != 1)
                                                        {
                                                          int v701 = *((_DWORD *)v677 + 8);
                                                          if (v679 == v701) {
                                                            goto LABEL_1310;
                                                          }
                                                          while (2)
                                                          {
                                                            if (v679 >= v701)
                                                            {
                                                              if (v701 >= v679) {
                                                                goto LABEL_1310;
                                                              }
                                                              uint64_t v708 = *((void *)v677 + 1);
                                                              if (!v708)
                                                              {
                                                                v678 = (uint64_t **)(v677 + 8);
                                                                goto LABEL_1306;
                                                              }
                                                              goto LABEL_1298;
                                                            }
                                                            uint64_t v708 = *(void *)v677;
                                                            if (*(void *)v677)
                                                            {
LABEL_1298:
                                                              int v701 = *(_DWORD *)(v708 + 32);
                                                              v677 = (char *)v708;
                                                              if (v679 == v701)
                                                              {
                                                                *(void *)(v708 + 48) = v700;
                                                                goto LABEL_1311;
                                                              }
                                                              continue;
                                                            }
                                                            break;
                                                          }
                                                          v678 = (uint64_t **)v677;
LABEL_1306:
                                                          v702 = (uint64_t **)v677;
LABEL_1307:
                                                          v677 = (char *)operator new(0x38uLL);
                                                          uint64_t v709 = *(void *)(v670 + 64);
                                                          *((_DWORD *)v677 + 10) = *(_DWORD *)(v670 + 72);
                                                          *((void *)v677 + 4) = v709;
                                                          *((void *)v677 + 6) = 0;
                                                          *(void *)v677 = 0;
                                                          *((void *)v677 + 1) = 0;
                                                          *((void *)v677 + 2) = v702;
                                                          *v678 = (uint64_t *)v677;
                                                          uint64_t v710 = **(void **)(v676 + 24);
                                                          v711 = (uint64_t *)v677;
                                                          if (v710)
                                                          {
                                                            *(void *)(v676 + 24) = v710;
                                                            v711 = *v678;
                                                          }
                                                          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v676 + 32), v711);
                                                          ++*(void *)(v676 + 40);
LABEL_1310:
                                                          *((void *)v677 + 6) = v700;
LABEL_1311:
                                                          uint64_t v712 = *v617;
                                                          v616 = (uint64_t *)v617[1];
                                                          *(void *)(v712 + 8) = v616;
                                                          *(void *)v617[1] = v712;
                                                          --*(void *)(v676 + 16);
                                                          v713 = (atomic_uint *)v617[3];
                                                          if (v713)
                                                          {
                                                            if (atomic_fetch_add(v713 + 2, 0xFFFFFFFF) == 1)
                                                            {
                                                              (*(void (**)(atomic_uint *))(*(void *)v713 + 16))(v713);
                                                              if (atomic_fetch_add(v713 + 3, 0xFFFFFFFF) == 1) {
                                                                (*(void (**)(atomic_uint *))(*(void *)v713 + 24))(v713);
                                                              }
                                                            }
                                                          }
                                                          operator delete(v617);
                                                          v612 = (uint64_t **)v800;
LABEL_1220:
                                                          BOOL v671 = v616 != (uint64_t *)**v612 && v669 >= ++v668;
                                                          v617 = v616;
                                                          if (!v671)
                                                          {
LABEL_1316:
                                                            v612[2] = v616;
                                                            v714 = operator new(0x50uLL);
                                                            v714[1] = 0;
                                                            v714[2] = 0;
                                                            *((unsigned char *)v714 + 24) = 1;
                                                            *((_DWORD *)v714 + 7) = 1;
                                                            void *v714 = &unk_1F20F2938;
                                                            v715 = operator new(0x38uLL);
                                                            std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v715, (uint64_t *)v877);
                                                            v715[3] = 0;
                                                            uint64_t v716 = *((void *)&v878 + 1);
                                                            if (*((void *)&v878 + 1))
                                                            {
                                                              v715[3] = *((void *)&v878 + 1);
                                                              if (v716)
                                                              {
                                                                *((_OWORD *)v715 + 2) = v879;
                                                                v715[6] = v880;
                                                              }
                                                              else
                                                              {
                                                                (*(void (**)(long long *, void *, void))(v716 & 0xFFFFFFFFFFFFFFFELL))(&v879, v715 + 4, 0);
                                                              }
                                                            }
                                                            v714[4] = v715;
                                                            v714[5] = 0;
                                                            v717 = operator new(0x18uLL);
                                                            v717[1] = 0x100000001;
                                                            void *v717 = &unk_1F20F2990;
                                                            v717[2] = v715;
                                                            v714[5] = v717;
                                                            v714[6] = v612[3];
                                                            v718 = (atomic_uint *)v612[4];
                                                            v714[7] = v718;
                                                            if (v718) {
                                                              atomic_fetch_add_explicit(v718 + 2, 1u, memory_order_relaxed);
                                                            }
                                                            *((_DWORD *)v714 + 16) = 0;
                                                            *((unsigned char *)v714 + 68) = 0;
                                                            v885 = (uint64_t (**)())v714;
                                                            v719 = operator new(0x18uLL);
                                                            *((void *)v719 + 1) = 0x100000001;
                                                            *(void *)v719 = &unk_1F20F29F0;
                                                            *((void *)v719 + 2) = v714;
                                                            unint64_t v886 = (unint64_t)v719;
                                                            v720 = (uint64_t *)**v612;
                                                            v721 = operator new(0x20uLL);
                                                            v722 = v720 + 4;
                                                            v721[2] = v714;
                                                            v721[3] = v719;
                                                            atomic_fetch_add_explicit((atomic_uint *volatile)v719 + 2, 1u, memory_order_relaxed);
                                                            uint64_t v723 = *v720;
                                                            *(void *)(v723 + 8) = v721;
                                                            void *v721 = v723;
                                                            uint64_t *v720 = (uint64_t)v721;
                                                            v721[1] = v720;
                                                            ++v720[2];
                                                            v724 = (uint64_t *)v720[4];
                                                            if (v724)
                                                            {
                                                              v725 = v720 + 4;
                                                              uint64_t v726 = v720[4];
                                                              do
                                                              {
                                                                int v727 = *(_DWORD *)(v726 + 32);
                                                                BOOL v728 = v727 == 2;
                                                                BOOL v729 = v727 < 2;
                                                                if (v727 >= 2) {
                                                                  v730 = (uint64_t *)v726;
                                                                }
                                                                else {
                                                                  v730 = (uint64_t *)(v726 + 8);
                                                                }
                                                                if (!v729) {
                                                                  v725 = (uint64_t *)v726;
                                                                }
                                                                if (v728)
                                                                {
                                                                  v730 = (uint64_t *)v726;
                                                                  v725 = (uint64_t *)v726;
                                                                }
                                                                uint64_t v726 = *v730;
                                                              }
                                                              while (*v730);
                                                              if (v725 == v722 || *((_DWORD *)v725 + 8) != 2)
                                                              {
                                                                int v731 = *((_DWORD *)v724 + 8);
                                                                while (v731 != 2)
                                                                {
                                                                  if (v731 < 3)
                                                                  {
                                                                    v732 = (uint64_t *)v724[1];
                                                                    if (!v732)
                                                                    {
                                                                      v722 = v724 + 1;
                                                                      goto LABEL_1343;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    v732 = (uint64_t *)*v724;
                                                                    v722 = v724;
                                                                    if (!*v724) {
                                                                      goto LABEL_1343;
                                                                    }
                                                                  }
                                                                  int v731 = *((_DWORD *)v732 + 8);
                                                                  v724 = v732;
                                                                }
                                                              }
                                                              *((_DWORD *)v714 + 16) = 2;
                                                              *(void *)((char *)v714 + 68) = 0xAAAAAAAAAAAAAA00;
                                                              v411 = this;
LABEL_1346:
                                                              atomic_fetch_add_explicit((atomic_uint *volatile)v719 + 3, 1u, memory_order_relaxed);
                                                              *(void *)&long long v817 = v714;
                                                              *((void *)&v817 + 1) = v719;
                                                              atomic_fetch_add_explicit((atomic_uint *volatile)v719 + 3, 1u, memory_order_relaxed);
                                                              if (atomic_fetch_add((atomic_uint *volatile)v719 + 3, 0xFFFFFFFF) == 1)(*(void (**)(void *))(*(void *)v719 + 24))(v719); {
                                                              v735 = (atomic_uint *)v886;
                                                              }
                                                              if (v886) {
                                                                goto LABEL_1349;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              v724 = v720 + 4;
LABEL_1343:
                                                              v733 = operator new(0x38uLL);
                                                              v733[4] = 0xAAAAAA0000000002;
                                                              *((_DWORD *)v733 + 10) = -1431655766;
                                                              v733[6] = v721;
                                                              void *v733 = 0;
                                                              v733[1] = 0;
                                                              v733[2] = v724;
                                                              uint64_t *v722 = (uint64_t)v733;
                                                              uint64_t v734 = *(void *)v720[3];
                                                              if (v734)
                                                              {
                                                                v720[3] = v734;
                                                                v733 = (void *)*v722;
                                                              }
                                                              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v720[4], v733);
                                                              ++v720[5];
                                                              v714 = v885;
                                                              v719 = (void *)v886;
                                                              *((_DWORD *)v885 + 16) = 2;
                                                              *(void *)((char *)v714 + 68) = 0xAAAAAAAAAAAAAA00;
                                                              v411 = this;
                                                              if (v719) {
                                                                goto LABEL_1346;
                                                              }
                                                              long long v817 = (unint64_t)v714;
                                                              v735 = (atomic_uint *)v886;
                                                              if (v886)
                                                              {
LABEL_1349:
                                                                if (atomic_fetch_add(v735 + 2, 0xFFFFFFFF) == 1)
                                                                {
                                                                  (*(void (**)(atomic_uint *))(*(void *)v735 + 16))(v735);
                                                                  if (atomic_fetch_add(v735 + 3, 0xFFFFFFFF) == 1) {
                                                                    (*(void (**)(atomic_uint *))(*(void *)v735 + 24))(v735);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                            pthread_mutex_unlock(v901);
                                                            v736 = (char *)__p;
                                                            if (__p)
                                                            {
                                                              if (v900 - 1 >= 0)
                                                              {
                                                                v737 = (char *)__p + 16 * v900;
                                                                do
                                                                {
                                                                  v738 = (atomic_uint *)*((void *)v737 - 1);
                                                                  if (v738)
                                                                  {
                                                                    if (atomic_fetch_add(v738 + 2, 0xFFFFFFFF) == 1)
                                                                    {
                                                                      (*(void (**)(atomic_uint *))(*(void *)v738 + 16))(v738);
                                                                      if (atomic_fetch_add(v738 + 3, 0xFFFFFFFF) == 1) {
                                                                        (*(void (**)(atomic_uint *))(*(void *)v738 + 24))(v738);
                                                                      }
                                                                    }
                                                                  }
                                                                  v737 -= 16;
                                                                }
                                                                while (v737 > v736);
                                                              }
                                                              v411 = this;
                                                              if (v898 >= 0xB) {
                                                                operator delete(__p);
                                                              }
                                                            }
                                                            if (*((void *)&v878 + 1))
                                                            {
                                                              if ((BYTE8(v878) & 1) == 0)
                                                              {
                                                                v739 = *(void (**)(long long *, long long *, uint64_t))(*((void *)&v878 + 1) & 0xFFFFFFFFFFFFFFFELL);
                                                                if (v739) {
                                                                  v739(&v879, &v879, 2);
                                                                }
                                                              }
                                                              *((void *)&v878 + 1) = 0;
                                                            }
                                                            v740 = (char *)v877[0];
                                                            if (v877[0])
                                                            {
                                                              v741 = (char *)v877[1];
                                                              v742 = v877[0];
                                                              if (v877[1] != v877[0])
                                                              {
                                                                do
                                                                {
                                                                  v741 -= 24;
                                                                  boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v741);
                                                                }
                                                                while (v741 != v740);
                                                                v742 = v877[0];
                                                              }
                                                              v877[1] = v740;
                                                              operator delete(v742);
                                                            }
                                                            dispatch_release(v875);
                                                            if (v876) {
                                                              _Block_release(v876);
                                                            }
                                                            if (atomic_fetch_add(&v791->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                                            {
                                                              if (!v789)
                                                              {
LABEL_1380:
                                                                v743 = operator new(0x20uLL);
                                                                v743[1] = v817;
                                                                uint64_t v744 = *((void *)v411 + 28);
                                                                *(void *)v743 = v744;
                                                                *((void *)v743 + 1) = v784;
                                                                *(void *)(v744 + 8) = v743;
                                                                *((void *)v411 + 28) = v743;
                                                                ++*((void *)v411 + 30);
                                                                goto LABEL_1381;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              ((void (*)(std::__shared_weak_count *))v791->__on_zero_shared)(v791);
                                                              std::__shared_weak_count::__release_weak(v791);
                                                              if (!v789) {
                                                                goto LABEL_1380;
                                                              }
                                                            }
                                                            _Block_release(v789);
                                                            goto LABEL_1380;
                                                          }
                                                          goto LABEL_1225;
                                                        }
                                                        while (1)
                                                        {
                                                          v702 = (uint64_t **)v677;
                                                          int v703 = *((_DWORD *)v677 + 8);
                                                          if (v703 == 1)
                                                          {
                                                            int v704 = *((_DWORD *)v677 + 10);
                                                            if (v704 <= v680)
                                                            {
                                                              if (v704 >= v680)
                                                              {
                                                                *((void *)v677 + 6) = v700;
                                                                goto LABEL_1311;
                                                              }
LABEL_1285:
                                                              v677 = (char *)*((void *)v677 + 1);
                                                              if (!v677)
                                                              {
                                                                v678 = v702 + 1;
                                                                goto LABEL_1307;
                                                              }
                                                              continue;
                                                            }
                                                          }
                                                          else if (v703 <= 1)
                                                          {
                                                            goto LABEL_1285;
                                                          }
                                                          v677 = *(char **)v677;
                                                          if (!*v702)
                                                          {
                                                            v678 = v702;
                                                            goto LABEL_1307;
                                                          }
                                                        }
                                                      }
LABEL_1289:
                                                      v705 = (uint64_t *)v681[1];
                                                      v706 = v681;
                                                      if (v705)
                                                      {
                                                        do
                                                        {
                                                          v707 = v705;
                                                          v705 = (uint64_t *)*v705;
                                                        }
                                                        while (v705);
                                                      }
                                                      else
                                                      {
                                                        do
                                                        {
                                                          v707 = (uint64_t *)v706[2];
                                                          BOOL v205 = *v707 == (void)v706;
                                                          v706 = v707;
                                                        }
                                                        while (!v205);
                                                      }
                                                      if (*(uint64_t **)(v676 + 24) == v681) {
                                                        *(void *)(v676 + 24) = v707;
                                                      }
                                                      --*(void *)(v676 + 40);
                                                      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v677, v681);
                                                      operator delete(v681);
                                                      goto LABEL_1311;
                                                    }
                                                    while (1)
                                                    {
                                                      int v698 = *((_DWORD *)v692 + 8);
                                                      if (v698 == 1)
                                                      {
                                                        if (v680 >= *((_DWORD *)v692 + 10)) {
                                                          goto LABEL_1267;
                                                        }
                                                      }
                                                      else if (v698 <= 1)
                                                      {
LABEL_1267:
                                                        v692 = (uint64_t **)v692[1];
                                                        if (!v692) {
                                                          goto LABEL_1273;
                                                        }
                                                        continue;
                                                      }
                                                      v691 = v692;
                                                      v692 = (uint64_t **)*v692;
                                                      if (!v692) {
                                                        goto LABEL_1273;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            while (2)
                                            {
                                              int v645 = *((_DWORD *)v631 + 8);
                                              v646 = (void *)*v630;
                                              v647 = v623 + 4;
                                              if (*v629 == v630) {
                                                goto LABEL_1174;
                                              }
                                              v648 = (void *)*v630;
                                              v649 = v623 + 4;
                                              if (v646)
                                              {
                                                do
                                                {
                                                  v647 = v648;
                                                  v648 = (void *)v648[1];
                                                }
                                                while (v648);
                                              }
                                              else
                                              {
                                                do
                                                {
                                                  v647 = (void *)v649[2];
                                                  BOOL v205 = *v647 == (void)v649;
                                                  v649 = v647;
                                                }
                                                while (v205);
                                              }
                                              int v650 = *((_DWORD *)v631 + 10);
                                              int v651 = *((_DWORD *)v647 + 8);
                                              if (v651 == v645)
                                              {
                                                if (v645 == 1)
                                                {
                                                  if (*((_DWORD *)v647 + 10) >= v650)
                                                  {
                                                    v652 = (void *)*v630;
                                                    v653 = v623 + 4;
                                                    v654 = v623 + 4;
                                                    if (v646) {
                                                      goto LABEL_1186;
                                                    }
LABEL_1193:
                                                    v658 = operator new(0x38uLL);
                                                    long long v659 = *((_OWORD *)v631 + 2);
                                                    v658[6] = v631[6];
                                                    *((_OWORD *)v658 + 2) = v659;
                                                    void *v658 = 0;
                                                    v658[1] = 0;
                                                    v658[2] = v654;
                                                    void *v653 = v658;
                                                    v660 = (void *)**v629;
                                                    if (v660)
                                                    {
                                                      *v629 = v660;
                                                      v658 = (void *)*v653;
                                                    }
                                                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v623[4], v658);
                                                    ++v623[5];
LABEL_1196:
                                                    v661 = (void *)v631[1];
                                                    if (v661)
                                                    {
                                                      do
                                                      {
                                                        v662 = v661;
                                                        v661 = (void *)*v661;
                                                      }
                                                      while (v661);
                                                    }
                                                    else
                                                    {
                                                      do
                                                      {
                                                        v662 = (void *)v631[2];
                                                        BOOL v205 = *v662 == (void)v631;
                                                        v631 = v662;
                                                      }
                                                      while (!v205);
                                                    }
                                                    v631 = v662;
                                                    if (v662 == v632) {
                                                      goto LABEL_1137;
                                                    }
                                                    continue;
                                                  }
LABEL_1174:
                                                  if (v646) {
                                                    v654 = v647;
                                                  }
                                                  else {
                                                    v654 = v623 + 4;
                                                  }
                                                  if (v646) {
                                                    v653 = v647 + 1;
                                                  }
                                                  else {
                                                    v653 = v623 + 4;
                                                  }
                                                  if (!*v653) {
                                                    goto LABEL_1193;
                                                  }
                                                  goto LABEL_1196;
                                                }
                                              }
                                              else if (v651 < v645)
                                              {
                                                goto LABEL_1174;
                                              }
                                              break;
                                            }
                                            v653 = v623 + 4;
                                            v654 = v623 + 4;
                                            if (!v646) {
                                              goto LABEL_1193;
                                            }
                                            v652 = (void *)*v630;
                                            if (v645 != 1)
                                            {
                                              int v655 = *((_DWORD *)v646 + 8);
                                              v654 = (void *)*v630;
                                              while (v645 != v655)
                                              {
                                                if (v645 < v655)
                                                {
                                                  uint64_t v663 = *v654;
                                                  v653 = v654;
                                                  if (!*v654) {
                                                    goto LABEL_1193;
                                                  }
                                                }
                                                else
                                                {
                                                  if (v655 >= v645) {
                                                    goto LABEL_1196;
                                                  }
                                                  uint64_t v663 = v654[1];
                                                  if (!v663) {
                                                    goto LABEL_1192;
                                                  }
                                                }
                                                int v655 = *(_DWORD *)(v663 + 32);
                                                v654 = (void *)v663;
                                              }
                                              goto LABEL_1196;
                                            }
                                            while (1)
                                            {
LABEL_1186:
                                              v654 = v652;
                                              int v656 = *((_DWORD *)v652 + 8);
                                              if (v656 == 1)
                                              {
                                                int v657 = *((_DWORD *)v652 + 10);
                                                if (v657 > v650) {
                                                  goto LABEL_1185;
                                                }
                                                if (v657 >= v650) {
                                                  goto LABEL_1196;
                                                }
                                              }
                                              else if (v656 > 1)
                                              {
LABEL_1185:
                                                v652 = (void *)*v652;
                                                v653 = v654;
                                                if (!*v654) {
                                                  goto LABEL_1193;
                                                }
                                                continue;
                                              }
                                              v652 = (void *)v652[1];
                                              if (!v652)
                                              {
LABEL_1192:
                                                v653 = v654 + 1;
                                                goto LABEL_1193;
                                              }
                                            }
                                          }
                                          char v600 = 0;
                                          char v601 = 0;
                                          char v602 = 0;
LABEL_1101:
                                          dispatch_retain(v592);
                                          v598 = 0;
                                          unint64_t v886 = (unint64_t)v592;
                                          char v603 = 1;
                                          goto LABEL_1102;
                                        }
                                        char v600 = 0;
                                        char v601 = 0;
LABEL_1100:
                                        dispatch_retain(v592);
                                        v597 = 0;
                                        char v602 = 1;
                                        goto LABEL_1101;
                                      }
                                      char v600 = 0;
LABEL_1099:
                                      dispatch_retain(v592);
                                      v781 = 0;
                                      char v601 = 1;
                                      goto LABEL_1100;
                                    }
LABEL_1098:
                                    dispatch_retain(v592);
                                    v775 = 0;
                                    char v600 = 1;
                                    goto LABEL_1099;
                                  }
                                }
                                else
                                {
                                  v884 = 0;
                                  dispatch_retain(v592);
                                }
                                dispatch_retain(v592);
                                v885 = 0;
                                goto LABEL_1098;
                              }
                            }
                            else
                            {
                              v572 = (uint64_t *)*v563;
                              v561 = v563;
                              if (!*v563) {
                                goto LABEL_1044;
                              }
                            }
                            int v571 = *((_DWORD *)v572 + 8);
                            v563 = v572;
                          }
                        }
                        goto LABEL_926;
                      }
                    }
                  }
                }
                while (2)
                {
                  int v484 = *((_DWORD *)v470 + 8);
                  v485 = (void *)*v469;
                  v486 = v462 + 4;
                  if (*v468 == v469) {
                    goto LABEL_875;
                  }
                  v487 = (void *)*v469;
                  v488 = v462 + 4;
                  if (v485)
                  {
                    do
                    {
                      v486 = v487;
                      v487 = (void *)v487[1];
                    }
                    while (v487);
                  }
                  else
                  {
                    do
                    {
                      v486 = (void *)v488[2];
                      BOOL v205 = *v486 == (void)v488;
                      v488 = v486;
                    }
                    while (v205);
                  }
                  int v489 = *((_DWORD *)v470 + 10);
                  int v490 = *((_DWORD *)v486 + 8);
                  if (v490 == v484)
                  {
                    if (v484 == 1)
                    {
                      if (*((_DWORD *)v486 + 10) >= v489)
                      {
                        v491 = (void *)*v469;
                        v492 = v462 + 4;
                        v493 = v462 + 4;
                        if (v485) {
                          goto LABEL_887;
                        }
LABEL_894:
                        v497 = operator new(0x38uLL);
                        long long v498 = *((_OWORD *)v470 + 2);
                        v497[6] = v470[6];
                        *((_OWORD *)v497 + 2) = v498;
                        void *v497 = 0;
                        v497[1] = 0;
                        v497[2] = v493;
                        void *v492 = v497;
                        v499 = (void *)**v468;
                        if (v499)
                        {
                          *v468 = v499;
                          v497 = (void *)*v492;
                        }
                        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v462[4], v497);
                        ++v462[5];
LABEL_897:
                        v500 = (void *)v470[1];
                        if (v500)
                        {
                          do
                          {
                            v501 = v500;
                            v500 = (void *)*v500;
                          }
                          while (v500);
                        }
                        else
                        {
                          do
                          {
                            v501 = (void *)v470[2];
                            BOOL v205 = *v501 == (void)v470;
                            v470 = v501;
                          }
                          while (!v205);
                        }
                        v470 = v501;
                        if (v501 == v471) {
                          goto LABEL_838;
                        }
                        continue;
                      }
LABEL_875:
                      if (v485) {
                        v493 = v486;
                      }
                      else {
                        v493 = v462 + 4;
                      }
                      if (v485) {
                        v492 = v486 + 1;
                      }
                      else {
                        v492 = v462 + 4;
                      }
                      if (!*v492) {
                        goto LABEL_894;
                      }
                      goto LABEL_897;
                    }
                  }
                  else if (v490 < v484)
                  {
                    goto LABEL_875;
                  }
                  break;
                }
                v492 = v462 + 4;
                v493 = v462 + 4;
                if (!v485) {
                  goto LABEL_894;
                }
                v491 = (void *)*v469;
                if (v484 != 1)
                {
                  int v494 = *((_DWORD *)v485 + 8);
                  v493 = (void *)*v469;
                  while (v484 != v494)
                  {
                    if (v484 < v494)
                    {
                      uint64_t v502 = *v493;
                      v492 = v493;
                      if (!*v493) {
                        goto LABEL_894;
                      }
                    }
                    else
                    {
                      if (v494 >= v484) {
                        goto LABEL_897;
                      }
                      uint64_t v502 = v493[1];
                      if (!v502) {
                        goto LABEL_893;
                      }
                    }
                    int v494 = *(_DWORD *)(v502 + 32);
                    v493 = (void *)v502;
                  }
                  goto LABEL_897;
                }
                while (1)
                {
LABEL_887:
                  v493 = v491;
                  int v495 = *((_DWORD *)v491 + 8);
                  if (v495 == 1)
                  {
                    int v496 = *((_DWORD *)v491 + 10);
                    if (v496 > v489) {
                      goto LABEL_886;
                    }
                    if (v496 >= v489) {
                      goto LABEL_897;
                    }
                  }
                  else if (v495 > 1)
                  {
LABEL_886:
                    v491 = (void *)*v491;
                    v492 = v493;
                    if (!*v493) {
                      goto LABEL_894;
                    }
                    continue;
                  }
                  v491 = (void *)v491[1];
                  if (!v491)
                  {
LABEL_893:
                    v492 = v493 + 1;
                    goto LABEL_894;
                  }
                }
              }
              char v440 = 0;
              char v441 = 0;
              char v442 = 0;
LABEL_802:
              dispatch_retain(v432);
              v438 = 0;
              unint64_t v886 = (unint64_t)v432;
              char v443 = 1;
              goto LABEL_803;
            }
            char v440 = 0;
            char v441 = 0;
LABEL_801:
            dispatch_retain(v432);
            v437 = 0;
            char v442 = 1;
            goto LABEL_802;
          }
          char v440 = 0;
LABEL_800:
          dispatch_retain(v432);
          v773 = 0;
          char v441 = 1;
          goto LABEL_801;
        }
LABEL_799:
        dispatch_retain(v432);
        v767 = 0;
        char v440 = 1;
        goto LABEL_800;
      }
    }
    else
    {
      v884 = 0;
      dispatch_retain(v432);
    }
    dispatch_retain(v432);
    v885 = 0;
    goto LABEL_799;
  }
LABEL_1381:
  coex::Module::State::setIndications_sync(v411);
  char v816 = 8;
  CFTypeRef cf = 0;
  strcpy((char *)v815, "coex.mod");
  AppleBasebandManager::create();
  long long v745 = block;
  blocuint64_t k = 0uLL;
  v746 = (std::__shared_weak_count *)*((void *)v411 + 32);
  *(_OWORD *)((char *)v411 + 248) = v745;
  if (v746 && !atomic_fetch_add(&v746->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v746->__on_zero_shared)(v746);
    std::__shared_weak_count::__release_weak(v746);
    v747 = (std::__shared_weak_count *)*((void *)&block + 1);
    if (!*((void *)&block + 1)) {
      goto LABEL_1385;
    }
LABEL_1384:
    if (atomic_fetch_add(&v747->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_1385;
    }
    ((void (*)(std::__shared_weak_count *))v747->__on_zero_shared)(v747);
    std::__shared_weak_count::__release_weak(v747);
    CFTypeRef v748 = cf;
    if (cf) {
LABEL_1386:
    }
      CFRelease(v748);
  }
  else
  {
    v747 = (std::__shared_weak_count *)*((void *)&block + 1);
    if (*((void *)&block + 1)) {
      goto LABEL_1384;
    }
LABEL_1385:
    CFTypeRef v748 = cf;
    if (cf) {
      goto LABEL_1386;
    }
  }
  if (v816 < 0) {
    operator delete(v815[0]);
  }
  v749 = (const void *)*MEMORY[0x1E4F4D0F8];
  size_t v750 = strlen((const char *)*MEMORY[0x1E4F4D0F8]);
  if (v750 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  v751 = (void *)v750;
  if (v750 >= 0x17)
  {
    uint64_t v753 = (v750 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v750 | 7) != 0x17) {
      uint64_t v753 = v750 | 7;
    }
    uint64_t v754 = v753 + 1;
    v752 = (void **)operator new(v753 + 1);
    __dst[1] = v751;
    unint64_t v813 = v754 | 0x8000000000000000;
    __dst[0] = v752;
    goto LABEL_1396;
  }
  HIBYTE(v813) = v750;
  v752 = __dst;
  if (v750) {
LABEL_1396:
  }
    memmove(v752, v749, (size_t)v751);
  *((unsigned char *)v751 + (void)v752) = 0;
  v808[0] = MEMORY[0x1E4F143A8];
  v808[1] = 1174405120;
  v808[2] = ___ZN4coex6Module5State4initEv_block_invoke_117;
  v808[3] = &__block_descriptor_tmp_121;
  v808[4] = v411;
  v808[5] = v801;
  v809 = v785;
  atomic_fetch_add_explicit(&v785->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v755 = _Block_copy(v808);
  v756 = *((void *)v411 + 11);
  if (v756) {
    dispatch_retain(*((dispatch_object_t *)v411 + 11));
  }
  v810 = v755;
  dispatch_object_t v811 = v756;
  AppleBasebandManager::setEventHandler();
  if (v811) {
    dispatch_release(v811);
  }
  if (v810) {
    _Block_release(v810);
  }
  if (SHIBYTE(v813) < 0) {
    operator delete(__dst[0]);
  }
  v757 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v758 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v758 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  v759 = (void *)v758;
  if (v758 >= 0x17)
  {
    uint64_t v761 = (v758 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v758 | 7) != 0x17) {
      uint64_t v761 = v758 | 7;
    }
    uint64_t v762 = v761 + 1;
    v760 = operator new(v761 + 1);
    v806[1] = v759;
    unint64_t v807 = v762 | 0x8000000000000000;
    v806[0] = v760;
    goto LABEL_1412;
  }
  HIBYTE(v807) = v758;
  v760 = v806;
  if (v758) {
LABEL_1412:
  }
    memmove(v760, v757, (size_t)v759);
  *((unsigned char *)v759 + (void)v760) = 0;
  v802[0] = MEMORY[0x1E4F143A8];
  v802[1] = 1174405120;
  v802[2] = ___ZN4coex6Module5State4initEv_block_invoke_122;
  v802[3] = &__block_descriptor_tmp_125_1;
  v802[4] = v411;
  v802[5] = v801;
  v803 = v785;
  atomic_fetch_add_explicit(&v785->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v763 = _Block_copy(v802);
  v764 = *((void *)v411 + 11);
  if (v764) {
    dispatch_retain(*((dispatch_object_t *)v411 + 11));
  }
  v804 = v763;
  dispatch_object_t v805 = v764;
  AppleBasebandManager::setEventHandler();
  if (v805) {
    dispatch_release(v805);
  }
  if (v804) {
    _Block_release(v804);
  }
  if (SHIBYTE(v807) < 0) {
    operator delete(v806[0]);
  }
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)v411 + 31));
  if (v803) {
    std::__shared_weak_count::__release_weak(v803);
  }
  if (v809) {
    std::__shared_weak_count::__release_weak(v809);
  }
  if (v819) {
    std::__shared_weak_count::__release_weak(v819);
  }
  if (v821) {
    std::__shared_weak_count::__release_weak(v821);
  }
  if (v823) {
    std::__shared_weak_count::__release_weak(v823);
  }
  if (v825) {
    std::__shared_weak_count::__release_weak(v825);
  }
  if (v827) {
    std::__shared_weak_count::__release_weak(v827);
  }
  if (v829) {
    std::__shared_weak_count::__release_weak(v829);
  }
  if (v831) {
    std::__shared_weak_count::__release_weak(v831);
  }
  if (v833) {
    std::__shared_weak_count::__release_weak(v833);
  }
  if (v835) {
    std::__shared_weak_count::__release_weak(v835);
  }
  if (v837) {
    std::__shared_weak_count::__release_weak(v837);
  }
  if (v839) {
    std::__shared_weak_count::__release_weak(v839);
  }
  if (v841) {
    std::__shared_weak_count::__release_weak(v841);
  }
  if (v843) {
    std::__shared_weak_count::__release_weak(v843);
  }
  if (v845) {
    std::__shared_weak_count::__release_weak(v845);
  }
  if (v847) {
    std::__shared_weak_count::__release_weak(v847);
  }
  if (v849) {
    std::__shared_weak_count::__release_weak(v849);
  }
  if (v851) {
    std::__shared_weak_count::__release_weak(v851);
  }
  if (v853) {
    std::__shared_weak_count::__release_weak(v853);
  }
  if (v855) {
    std::__shared_weak_count::__release_weak(v855);
  }
  if (v857) {
    std::__shared_weak_count::__release_weak(v857);
  }
  if (v859) {
    std::__shared_weak_count::__release_weak(v859);
  }
  if (v861) {
    std::__shared_weak_count::__release_weak(v861);
  }
  if (v863) {
    std::__shared_weak_count::__release_weak(v863);
  }
  if (v865) {
    std::__shared_weak_count::__release_weak(v865);
  }
  if (v867) {
    std::__shared_weak_count::__release_weak(v867);
  }
  std::__shared_weak_count::__release_weak(v785);
}

void sub_1C57A4AF8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C57A4B04(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A4B10(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A4B1C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A4B28(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A4B34(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A4B40(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A4B4C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A4B58(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A4B64(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A4B70(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A4B78(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A4B80(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A4B88(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A4B98(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A4BA4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A4BB0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A4BBC(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      uint64_t v5 = (uint64_t)v3[1];
      uint64_t v6 = *v3;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v3;
      }
      v3[1] = v4;
      operator delete(v6);
    }
    operator delete(v3);
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x1C57A7330);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A56D0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A56D8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A56E0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A56E8(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x828];
    if (STACK[0x828])
    {
      if ((uint64_t)(STACK[0x830] - 1) >= 0)
      {
        unint64_t v3 = v2 + 16 * STACK[0x830];
        do
        {
          uint64_t v4 = *(atomic_uint **)(v3 - 8);
          if (v4)
          {
            if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
              if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
              }
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x820] >= 0xB) {
        operator delete((void *)STACK[0x828]);
      }
    }
    JUMPOUT(0x1C57A76B0);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A57B0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A57B8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A57C0);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A57EC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A57F4);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A5800(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A580C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A5814(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A584C(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C57A76D0);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A585C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A5864(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    unint64_t v3 = (unint64_t)v2[3];
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        uint64_t v4 = *(void (**)(void **, void **, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4) {
          v4(v2 + 4, v2 + 4, 2);
        }
      }
      v2[3] = 0;
    }
    uint64_t v5 = *v2;
    if (*v2)
    {
      uint64_t v6 = (uint64_t)v2[1];
      uint64_t v7 = *v2;
      if ((void *)v6 != v5)
      {
        do
        {
          v6 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v6);
        }
        while ((void *)v6 != v5);
        uint64_t v7 = *v2;
      }
      v2[1] = v5;
      operator delete(v7);
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A58E4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A58EC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, boost::signals2::detail::connection_body_base *a10)
{
  if (a2)
  {
    __cxa_end_catch();
    uint64_t v10 = (atomic_uint *)*((void *)a10 + 5);
    if (v10)
    {
      if (atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
        if (atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
        }
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(a10);
    JUMPOUT(0x1C57A7418);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A5980(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A5988(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A5990(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A599CLL);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A59A8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A59B4);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A59C0(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x828];
    if (STACK[0x828])
    {
      if ((uint64_t)(STACK[0x830] - 1) >= 0)
      {
        unint64_t v3 = v2 + 16 * STACK[0x830];
        do
        {
          uint64_t v4 = *(atomic_uint **)(v3 - 8);
          if (v4)
          {
            if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
              if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
              }
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x820] >= 0xB) {
        operator delete((void *)STACK[0x828]);
      }
    }
    JUMPOUT(0x1C57A76D8);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A5A88(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A5A90(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A5A98);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A5AC4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A5ACCLL);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A5AE4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5AF0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5AFC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5B08(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5B14(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5B20(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5B2C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5B38(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5B44(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5B50(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5B5C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5B68(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5B74(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5B80(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5B8C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5B98(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5BA4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5BB0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5BBC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5BC8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5BD4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5BE0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5BEC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5BF8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5C04(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5C10(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5C1C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5C28(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5C34(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5C40(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5C4C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5C58(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5C64(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5C70(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5C7C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5C88(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5C94(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5CA0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5CAC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5CB8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5CC4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5CD0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5CDC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5CE8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5CF4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5D00(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5D0C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5D18(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5D24(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5D30(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5D3C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5D48(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5D54(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5D60(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5D6C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5D78(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5D84(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5D90(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5D9C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5DA8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5DB4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5DC0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5DCC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5DD8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5DE4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5DF0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5DFC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5E08(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5E14(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5E20(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5E2C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5E38(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5E44(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5E50(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5E5C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5E68(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5E74(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5E80(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5E8C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5E98(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5EA4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5EB0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5EBC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5EC8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5ED4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5EE0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5EEC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A5EF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    uint64_t v10 = (atomic_uint *)__p[3];
    if (v10)
    {
      if (atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
        if (atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
        }
      }
    }
    uint64_t v11 = (atomic_uint *)__p[1];
    if (v11 && atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
      if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6020(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A602C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6038(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C57A76F8);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6048(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6054(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((void *)v2[4]);
    if (v2[2])
    {
      unint64_t v3 = (void *)*v2;
      uint64_t v4 = (uint64_t *)v2[1];
      uint64_t v5 = *v4;
      *(void *)(v5 + 8) = *(void *)(*v2 + 8);
      *(void *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          uint64_t v6 = (uint64_t *)v4[1];
          uint64_t v7 = (atomic_uint *)v4[3];
          if (v7 && atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          uint64_t v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6144(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6150(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    __cxa_end_catch();
    uint64_t v10 = *(atomic_uint **)(a10 + 8);
    if (v10 && atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
      if (atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
      }
    }
    JUMPOUT(0x1C57A7500);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A61E4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A61F0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A61FC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A7500);
}

void sub_1C57A6208(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    uint64_t v11 = (atomic_uint *)__p[3];
    if (v11)
    {
      if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
        if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
        }
      }
    }
    uint64_t v12 = (atomic_uint *)__p[1];
    if (v12 && atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
      if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6330(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A633C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6348(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C57A7728);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6358(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6364(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((void *)v2[4]);
    if (v2[2])
    {
      unint64_t v3 = (void *)*v2;
      uint64_t v4 = (uint64_t *)v2[1];
      uint64_t v5 = *v4;
      *(void *)(v5 + 8) = *(void *)(*v2 + 8);
      *(void *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          uint64_t v6 = (uint64_t *)v4[1];
          uint64_t v7 = (atomic_uint *)v4[3];
          if (v7 && atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          uint64_t v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6454(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6460(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2)
  {
    __cxa_end_catch();
    uint64_t v11 = *(atomic_uint **)(a11 + 8);
    if (v11 && atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
      if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
      }
    }
    JUMPOUT(0x1C57A75ECLL);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A64F4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6500(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A650C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A75ECLL);
}

void sub_1C57A6518(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x760]);
    JUMPOUT(0x1C57A76A8);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A652C(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x760]);
    JUMPOUT(0x1C57A76D0);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,std::__shared_weak_count *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62,uint64_t a63)
{
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  if (a37) {
    std::__shared_weak_count::__release_weak(a37);
  }
  if (a55)
  {
    std::__shared_weak_count::__release_weak(a55);
    __int16 v70 = a62;
    if (!a62)
    {
LABEL_7:
      uint64_t v71 = a69;
      if (!a69) {
        goto LABEL_8;
      }
      goto LABEL_34;
    }
  }
  else
  {
    __int16 v70 = a62;
    if (!a62) {
      goto LABEL_7;
    }
  }
  std::__shared_weak_count::__release_weak(v70);
  uint64_t v71 = a69;
  if (!a69)
  {
LABEL_8:
    uint64_t v72 = (std::__shared_weak_count *)STACK[0x218];
    if (!STACK[0x218]) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v71);
  uint64_t v72 = (std::__shared_weak_count *)STACK[0x218];
  if (!STACK[0x218])
  {
LABEL_9:
    CFDataRef v73 = (std::__shared_weak_count *)STACK[0x250];
    if (!STACK[0x250]) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v72);
  CFDataRef v73 = (std::__shared_weak_count *)STACK[0x250];
  if (!STACK[0x250])
  {
LABEL_10:
    xpc_object_t v74 = (std::__shared_weak_count *)STACK[0x288];
    if (!STACK[0x288]) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v73);
  xpc_object_t v74 = (std::__shared_weak_count *)STACK[0x288];
  if (!STACK[0x288])
  {
LABEL_11:
    uint64_t v75 = (std::__shared_weak_count *)STACK[0x2C0];
    if (!STACK[0x2C0]) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v74);
  uint64_t v75 = (std::__shared_weak_count *)STACK[0x2C0];
  if (!STACK[0x2C0])
  {
LABEL_12:
    CFArrayRef v76 = (std::__shared_weak_count *)STACK[0x2F8];
    if (!STACK[0x2F8]) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v75);
  CFArrayRef v76 = (std::__shared_weak_count *)STACK[0x2F8];
  if (!STACK[0x2F8])
  {
LABEL_13:
    CFRange v77 = (std::__shared_weak_count *)STACK[0x330];
    if (!STACK[0x330]) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v76);
  CFRange v77 = (std::__shared_weak_count *)STACK[0x330];
  if (!STACK[0x330])
  {
LABEL_14:
    CFRange v78 = (std::__shared_weak_count *)STACK[0x368];
    if (!STACK[0x368]) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v77);
  CFRange v78 = (std::__shared_weak_count *)STACK[0x368];
  if (!STACK[0x368])
  {
LABEL_15:
    xpc_object_t v79 = (std::__shared_weak_count *)STACK[0x3A0];
    if (!STACK[0x3A0]) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v78);
  xpc_object_t v79 = (std::__shared_weak_count *)STACK[0x3A0];
  if (!STACK[0x3A0])
  {
LABEL_16:
    CFArrayRef v80 = (std::__shared_weak_count *)STACK[0x3D8];
    if (!STACK[0x3D8]) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v79);
  CFArrayRef v80 = (std::__shared_weak_count *)STACK[0x3D8];
  if (!STACK[0x3D8])
  {
LABEL_17:
    CFArrayRef v81 = (std::__shared_weak_count *)STACK[0x410];
    if (!STACK[0x410]) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v80);
  CFArrayRef v81 = (std::__shared_weak_count *)STACK[0x410];
  if (!STACK[0x410])
  {
LABEL_18:
    uint64_t v82 = (std::__shared_weak_count *)STACK[0x448];
    if (!STACK[0x448]) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v81);
  uint64_t v82 = (std::__shared_weak_count *)STACK[0x448];
  if (!STACK[0x448])
  {
LABEL_19:
    CFMutableDictionaryRef v83 = (std::__shared_weak_count *)STACK[0x480];
    if (!STACK[0x480]) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v82);
  CFMutableDictionaryRef v83 = (std::__shared_weak_count *)STACK[0x480];
  if (!STACK[0x480])
  {
LABEL_20:
    xpc_object_t v84 = (std::__shared_weak_count *)STACK[0x4B8];
    if (!STACK[0x4B8]) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v83);
  xpc_object_t v84 = (std::__shared_weak_count *)STACK[0x4B8];
  if (!STACK[0x4B8])
  {
LABEL_21:
    uint64_t v85 = (std::__shared_weak_count *)STACK[0x4F0];
    if (!STACK[0x4F0]) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v84);
  uint64_t v85 = (std::__shared_weak_count *)STACK[0x4F0];
  if (!STACK[0x4F0])
  {
LABEL_22:
    CFArrayRef v86 = (std::__shared_weak_count *)STACK[0x528];
    if (!STACK[0x528]) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v85);
  CFArrayRef v86 = (std::__shared_weak_count *)STACK[0x528];
  if (!STACK[0x528])
  {
LABEL_23:
    size_t v87 = (std::__shared_weak_count *)STACK[0x560];
    if (!STACK[0x560]) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v86);
  size_t v87 = (std::__shared_weak_count *)STACK[0x560];
  if (!STACK[0x560])
  {
LABEL_24:
    size_t v88 = (std::__shared_weak_count *)STACK[0x598];
    if (!STACK[0x598]) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v87);
  size_t v88 = (std::__shared_weak_count *)STACK[0x598];
  if (!STACK[0x598])
  {
LABEL_25:
    xpc_object_t v89 = (std::__shared_weak_count *)STACK[0x5D0];
    if (!STACK[0x5D0]) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v88);
  xpc_object_t v89 = (std::__shared_weak_count *)STACK[0x5D0];
  if (!STACK[0x5D0])
  {
LABEL_26:
    CFArrayRef v90 = (std::__shared_weak_count *)STACK[0x608];
    if (!STACK[0x608]) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }
LABEL_52:
  std::__shared_weak_count::__release_weak(v89);
  CFArrayRef v90 = (std::__shared_weak_count *)STACK[0x608];
  if (!STACK[0x608])
  {
LABEL_27:
    CFArrayRef v91 = (std::__shared_weak_count *)STACK[0x640];
    if (!STACK[0x640]) {
      goto LABEL_28;
    }
    goto LABEL_54;
  }
LABEL_53:
  std::__shared_weak_count::__release_weak(v90);
  CFArrayRef v91 = (std::__shared_weak_count *)STACK[0x640];
  if (!STACK[0x640])
  {
LABEL_28:
    uint64_t v92 = (std::__shared_weak_count *)STACK[0x678];
    if (!STACK[0x678]) {
      goto LABEL_29;
    }
    goto LABEL_55;
  }
LABEL_54:
  std::__shared_weak_count::__release_weak(v91);
  uint64_t v92 = (std::__shared_weak_count *)STACK[0x678];
  if (!STACK[0x678])
  {
LABEL_29:
    uint64_t v93 = (std::__shared_weak_count *)STACK[0x6B0];
    if (!STACK[0x6B0]) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_55:
  std::__shared_weak_count::__release_weak(v92);
  uint64_t v93 = (std::__shared_weak_count *)STACK[0x6B0];
  if (!STACK[0x6B0])
  {
LABEL_31:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_30:
  std::__shared_weak_count::__release_weak(v93);
  goto LABEL_31;
}

void sub_1C57A6554(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a40) {
    std::__shared_weak_count::__release_weak(a40);
  }
  JUMPOUT(0x1C57A6EDCLL);
}

void sub_1C57A6580(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A6588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,char a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback((uint64_t)&a38);
  if (a37) {
    std::__shared_weak_count::__release_weak(a37);
  }
  if (a45 < 0) {
    operator delete(__p);
  }
  if (a58)
  {
    std::__shared_weak_count::__release_weak(a58);
    CFDataRef v73 = a65;
    if (!a65)
    {
LABEL_7:
      xpc_object_t v74 = a72;
      if (!a72) {
        goto LABEL_8;
      }
      goto LABEL_34;
    }
  }
  else
  {
    CFDataRef v73 = a65;
    if (!a65) {
      goto LABEL_7;
    }
  }
  std::__shared_weak_count::__release_weak(v73);
  xpc_object_t v74 = a72;
  if (!a72)
  {
LABEL_8:
    uint64_t v75 = (std::__shared_weak_count *)STACK[0x218];
    if (!STACK[0x218]) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v74);
  uint64_t v75 = (std::__shared_weak_count *)STACK[0x218];
  if (!STACK[0x218])
  {
LABEL_9:
    CFArrayRef v76 = (std::__shared_weak_count *)STACK[0x250];
    if (!STACK[0x250]) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v75);
  CFArrayRef v76 = (std::__shared_weak_count *)STACK[0x250];
  if (!STACK[0x250])
  {
LABEL_10:
    CFRange v77 = (std::__shared_weak_count *)STACK[0x288];
    if (!STACK[0x288]) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v76);
  CFRange v77 = (std::__shared_weak_count *)STACK[0x288];
  if (!STACK[0x288])
  {
LABEL_11:
    CFRange v78 = (std::__shared_weak_count *)STACK[0x2C0];
    if (!STACK[0x2C0]) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v77);
  CFRange v78 = (std::__shared_weak_count *)STACK[0x2C0];
  if (!STACK[0x2C0])
  {
LABEL_12:
    xpc_object_t v79 = (std::__shared_weak_count *)STACK[0x2F8];
    if (!STACK[0x2F8]) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v78);
  xpc_object_t v79 = (std::__shared_weak_count *)STACK[0x2F8];
  if (!STACK[0x2F8])
  {
LABEL_13:
    CFArrayRef v80 = (std::__shared_weak_count *)STACK[0x330];
    if (!STACK[0x330]) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v79);
  CFArrayRef v80 = (std::__shared_weak_count *)STACK[0x330];
  if (!STACK[0x330])
  {
LABEL_14:
    CFArrayRef v81 = (std::__shared_weak_count *)STACK[0x368];
    if (!STACK[0x368]) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v80);
  CFArrayRef v81 = (std::__shared_weak_count *)STACK[0x368];
  if (!STACK[0x368])
  {
LABEL_15:
    uint64_t v82 = (std::__shared_weak_count *)STACK[0x3A0];
    if (!STACK[0x3A0]) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v81);
  uint64_t v82 = (std::__shared_weak_count *)STACK[0x3A0];
  if (!STACK[0x3A0])
  {
LABEL_16:
    CFMutableDictionaryRef v83 = (std::__shared_weak_count *)STACK[0x3D8];
    if (!STACK[0x3D8]) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v82);
  CFMutableDictionaryRef v83 = (std::__shared_weak_count *)STACK[0x3D8];
  if (!STACK[0x3D8])
  {
LABEL_17:
    xpc_object_t v84 = (std::__shared_weak_count *)STACK[0x410];
    if (!STACK[0x410]) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v83);
  xpc_object_t v84 = (std::__shared_weak_count *)STACK[0x410];
  if (!STACK[0x410])
  {
LABEL_18:
    uint64_t v85 = (std::__shared_weak_count *)STACK[0x448];
    if (!STACK[0x448]) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v84);
  uint64_t v85 = (std::__shared_weak_count *)STACK[0x448];
  if (!STACK[0x448])
  {
LABEL_19:
    CFArrayRef v86 = (std::__shared_weak_count *)STACK[0x480];
    if (!STACK[0x480]) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v85);
  CFArrayRef v86 = (std::__shared_weak_count *)STACK[0x480];
  if (!STACK[0x480])
  {
LABEL_20:
    size_t v87 = (std::__shared_weak_count *)STACK[0x4B8];
    if (!STACK[0x4B8]) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v86);
  size_t v87 = (std::__shared_weak_count *)STACK[0x4B8];
  if (!STACK[0x4B8])
  {
LABEL_21:
    size_t v88 = (std::__shared_weak_count *)STACK[0x4F0];
    if (!STACK[0x4F0]) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v87);
  size_t v88 = (std::__shared_weak_count *)STACK[0x4F0];
  if (!STACK[0x4F0])
  {
LABEL_22:
    xpc_object_t v89 = (std::__shared_weak_count *)STACK[0x528];
    if (!STACK[0x528]) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v88);
  xpc_object_t v89 = (std::__shared_weak_count *)STACK[0x528];
  if (!STACK[0x528])
  {
LABEL_23:
    CFArrayRef v90 = (std::__shared_weak_count *)STACK[0x560];
    if (!STACK[0x560]) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v89);
  CFArrayRef v90 = (std::__shared_weak_count *)STACK[0x560];
  if (!STACK[0x560])
  {
LABEL_24:
    CFArrayRef v91 = (std::__shared_weak_count *)STACK[0x598];
    if (!STACK[0x598]) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v90);
  CFArrayRef v91 = (std::__shared_weak_count *)STACK[0x598];
  if (!STACK[0x598])
  {
LABEL_25:
    uint64_t v92 = (std::__shared_weak_count *)STACK[0x5D0];
    if (!STACK[0x5D0]) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v91);
  uint64_t v92 = (std::__shared_weak_count *)STACK[0x5D0];
  if (!STACK[0x5D0])
  {
LABEL_26:
    uint64_t v93 = (std::__shared_weak_count *)STACK[0x608];
    if (!STACK[0x608]) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }
LABEL_52:
  std::__shared_weak_count::__release_weak(v92);
  uint64_t v93 = (std::__shared_weak_count *)STACK[0x608];
  if (!STACK[0x608])
  {
LABEL_27:
    xpc_object_t v94 = (std::__shared_weak_count *)STACK[0x640];
    if (!STACK[0x640]) {
      goto LABEL_28;
    }
    goto LABEL_54;
  }
LABEL_53:
  std::__shared_weak_count::__release_weak(v93);
  xpc_object_t v94 = (std::__shared_weak_count *)STACK[0x640];
  if (!STACK[0x640])
  {
LABEL_28:
    uint64_t v95 = (std::__shared_weak_count *)STACK[0x678];
    if (!STACK[0x678]) {
      goto LABEL_29;
    }
    goto LABEL_55;
  }
LABEL_54:
  std::__shared_weak_count::__release_weak(v94);
  uint64_t v95 = (std::__shared_weak_count *)STACK[0x678];
  if (!STACK[0x678])
  {
LABEL_29:
    CFArrayRef v96 = (std::__shared_weak_count *)STACK[0x6B0];
    if (!STACK[0x6B0]) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_55:
  std::__shared_weak_count::__release_weak(v95);
  CFArrayRef v96 = (std::__shared_weak_count *)STACK[0x6B0];
  if (!STACK[0x6B0])
  {
LABEL_31:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_30:
  std::__shared_weak_count::__release_weak(v96);
  goto LABEL_31;
}

void sub_1C57A65B4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A65BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,const void *a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a43);
  if (a49 < 0) {
    operator delete(__p);
  }
  if (a58)
  {
    std::__shared_weak_count::__release_weak(a58);
    CFDataRef v73 = a65;
    if (!a65)
    {
LABEL_5:
      xpc_object_t v74 = a72;
      if (!a72) {
        goto LABEL_6;
      }
      goto LABEL_32;
    }
  }
  else
  {
    CFDataRef v73 = a65;
    if (!a65) {
      goto LABEL_5;
    }
  }
  std::__shared_weak_count::__release_weak(v73);
  xpc_object_t v74 = a72;
  if (!a72)
  {
LABEL_6:
    uint64_t v75 = (std::__shared_weak_count *)STACK[0x218];
    if (!STACK[0x218]) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  std::__shared_weak_count::__release_weak(v74);
  uint64_t v75 = (std::__shared_weak_count *)STACK[0x218];
  if (!STACK[0x218])
  {
LABEL_7:
    CFArrayRef v76 = (std::__shared_weak_count *)STACK[0x250];
    if (!STACK[0x250]) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  std::__shared_weak_count::__release_weak(v75);
  CFArrayRef v76 = (std::__shared_weak_count *)STACK[0x250];
  if (!STACK[0x250])
  {
LABEL_8:
    CFRange v77 = (std::__shared_weak_count *)STACK[0x288];
    if (!STACK[0x288]) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v76);
  CFRange v77 = (std::__shared_weak_count *)STACK[0x288];
  if (!STACK[0x288])
  {
LABEL_9:
    CFRange v78 = (std::__shared_weak_count *)STACK[0x2C0];
    if (!STACK[0x2C0]) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v77);
  CFRange v78 = (std::__shared_weak_count *)STACK[0x2C0];
  if (!STACK[0x2C0])
  {
LABEL_10:
    xpc_object_t v79 = (std::__shared_weak_count *)STACK[0x2F8];
    if (!STACK[0x2F8]) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v78);
  xpc_object_t v79 = (std::__shared_weak_count *)STACK[0x2F8];
  if (!STACK[0x2F8])
  {
LABEL_11:
    CFArrayRef v80 = (std::__shared_weak_count *)STACK[0x330];
    if (!STACK[0x330]) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v79);
  CFArrayRef v80 = (std::__shared_weak_count *)STACK[0x330];
  if (!STACK[0x330])
  {
LABEL_12:
    CFArrayRef v81 = (std::__shared_weak_count *)STACK[0x368];
    if (!STACK[0x368]) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v80);
  CFArrayRef v81 = (std::__shared_weak_count *)STACK[0x368];
  if (!STACK[0x368])
  {
LABEL_13:
    uint64_t v82 = (std::__shared_weak_count *)STACK[0x3A0];
    if (!STACK[0x3A0]) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v81);
  uint64_t v82 = (std::__shared_weak_count *)STACK[0x3A0];
  if (!STACK[0x3A0])
  {
LABEL_14:
    CFMutableDictionaryRef v83 = (std::__shared_weak_count *)STACK[0x3D8];
    if (!STACK[0x3D8]) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v82);
  CFMutableDictionaryRef v83 = (std::__shared_weak_count *)STACK[0x3D8];
  if (!STACK[0x3D8])
  {
LABEL_15:
    xpc_object_t v84 = (std::__shared_weak_count *)STACK[0x410];
    if (!STACK[0x410]) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v83);
  xpc_object_t v84 = (std::__shared_weak_count *)STACK[0x410];
  if (!STACK[0x410])
  {
LABEL_16:
    uint64_t v85 = (std::__shared_weak_count *)STACK[0x448];
    if (!STACK[0x448]) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v84);
  uint64_t v85 = (std::__shared_weak_count *)STACK[0x448];
  if (!STACK[0x448])
  {
LABEL_17:
    CFArrayRef v86 = (std::__shared_weak_count *)STACK[0x480];
    if (!STACK[0x480]) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v85);
  CFArrayRef v86 = (std::__shared_weak_count *)STACK[0x480];
  if (!STACK[0x480])
  {
LABEL_18:
    size_t v87 = (std::__shared_weak_count *)STACK[0x4B8];
    if (!STACK[0x4B8]) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v86);
  size_t v87 = (std::__shared_weak_count *)STACK[0x4B8];
  if (!STACK[0x4B8])
  {
LABEL_19:
    size_t v88 = (std::__shared_weak_count *)STACK[0x4F0];
    if (!STACK[0x4F0]) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v87);
  size_t v88 = (std::__shared_weak_count *)STACK[0x4F0];
  if (!STACK[0x4F0])
  {
LABEL_20:
    xpc_object_t v89 = (std::__shared_weak_count *)STACK[0x528];
    if (!STACK[0x528]) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v88);
  xpc_object_t v89 = (std::__shared_weak_count *)STACK[0x528];
  if (!STACK[0x528])
  {
LABEL_21:
    CFArrayRef v90 = (std::__shared_weak_count *)STACK[0x560];
    if (!STACK[0x560]) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v89);
  CFArrayRef v90 = (std::__shared_weak_count *)STACK[0x560];
  if (!STACK[0x560])
  {
LABEL_22:
    CFArrayRef v91 = (std::__shared_weak_count *)STACK[0x598];
    if (!STACK[0x598]) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v90);
  CFArrayRef v91 = (std::__shared_weak_count *)STACK[0x598];
  if (!STACK[0x598])
  {
LABEL_23:
    uint64_t v92 = (std::__shared_weak_count *)STACK[0x5D0];
    if (!STACK[0x5D0]) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v91);
  uint64_t v92 = (std::__shared_weak_count *)STACK[0x5D0];
  if (!STACK[0x5D0])
  {
LABEL_24:
    uint64_t v93 = (std::__shared_weak_count *)STACK[0x608];
    if (!STACK[0x608]) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v92);
  uint64_t v93 = (std::__shared_weak_count *)STACK[0x608];
  if (!STACK[0x608])
  {
LABEL_25:
    xpc_object_t v94 = (std::__shared_weak_count *)STACK[0x640];
    if (!STACK[0x640]) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v93);
  xpc_object_t v94 = (std::__shared_weak_count *)STACK[0x640];
  if (!STACK[0x640])
  {
LABEL_26:
    uint64_t v95 = (std::__shared_weak_count *)STACK[0x678];
    if (!STACK[0x678]) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }
LABEL_52:
  std::__shared_weak_count::__release_weak(v94);
  uint64_t v95 = (std::__shared_weak_count *)STACK[0x678];
  if (!STACK[0x678])
  {
LABEL_27:
    CFArrayRef v96 = (std::__shared_weak_count *)STACK[0x6B0];
    if (!STACK[0x6B0]) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_53:
  std::__shared_weak_count::__release_weak(v95);
  CFArrayRef v96 = (std::__shared_weak_count *)STACK[0x6B0];
  if (!STACK[0x6B0])
  {
LABEL_29:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_28:
  std::__shared_weak_count::__release_weak(v96);
  goto LABEL_29;
}

void sub_1C57A65E4(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6624(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C57A76F8);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6638(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    unint64_t v11 = (unint64_t)v10[3];
    if (v11)
    {
      if ((v11 & 1) == 0)
      {
        uint64_t v12 = *(void (**)(void **, void **, uint64_t))(v11 & 0xFFFFFFFFFFFFFFFELL);
        if (v12) {
          v12(v10 + 4, v10 + 4, 2);
        }
      }
      v10[3] = 0;
    }
    uint64_t v13 = *v10;
    if (*v10)
    {
      uint64_t v14 = (uint64_t)v10[1];
      char v15 = *v10;
      if ((void *)v14 != v13)
      {
        do
        {
          v14 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v14);
        }
        while ((void *)v14 != v13);
        char v15 = *v10;
      }
      v10[1] = v13;
      operator delete(v15);
    }
    operator delete(v10);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A66C0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A66CC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, boost::signals2::detail::connection_body_base *a10)
{
  if (a2)
  {
    __cxa_end_catch();
    uint64_t v10 = (atomic_uint *)*((void *)a10 + 5);
    if (v10)
    {
      if (atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
        if (atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
        }
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(a10);
    JUMPOUT(0x1C57A7500);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6760(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A676C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6778(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A6784);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6790(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A679CLL);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A67A8(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x828];
    if (STACK[0x828])
    {
      if ((uint64_t)(STACK[0x830] - 1) >= 0)
      {
        unint64_t v3 = v2 + 16 * STACK[0x830];
        do
        {
          uint64_t v4 = *(atomic_uint **)(v3 - 8);
          if (v4)
          {
            if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
              if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
              }
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x820] >= 0xB) {
        operator delete((void *)STACK[0x828]);
      }
    }
    JUMPOUT(0x1C57A7700);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6870(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A687C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A6884);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A68B0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A68B8);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A68C4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A68D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,std::__shared_weak_count *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62,uint64_t a63)
{
  boost::signals2::connection::~connection((boost::signals2::connection *)&a47);
  if (a55)
  {
    std::__shared_weak_count::__release_weak(a55);
    __int16 v70 = a62;
    if (!a62)
    {
LABEL_3:
      uint64_t v71 = a69;
      if (!a69) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else
  {
    __int16 v70 = a62;
    if (!a62) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v70);
  uint64_t v71 = a69;
  if (!a69)
  {
LABEL_4:
    uint64_t v72 = (std::__shared_weak_count *)STACK[0x218];
    if (!STACK[0x218]) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  std::__shared_weak_count::__release_weak(v71);
  uint64_t v72 = (std::__shared_weak_count *)STACK[0x218];
  if (!STACK[0x218])
  {
LABEL_5:
    CFDataRef v73 = (std::__shared_weak_count *)STACK[0x250];
    if (!STACK[0x250]) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  std::__shared_weak_count::__release_weak(v72);
  CFDataRef v73 = (std::__shared_weak_count *)STACK[0x250];
  if (!STACK[0x250])
  {
LABEL_6:
    xpc_object_t v74 = (std::__shared_weak_count *)STACK[0x288];
    if (!STACK[0x288]) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  std::__shared_weak_count::__release_weak(v73);
  xpc_object_t v74 = (std::__shared_weak_count *)STACK[0x288];
  if (!STACK[0x288])
  {
LABEL_7:
    uint64_t v75 = (std::__shared_weak_count *)STACK[0x2C0];
    if (!STACK[0x2C0]) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  std::__shared_weak_count::__release_weak(v74);
  uint64_t v75 = (std::__shared_weak_count *)STACK[0x2C0];
  if (!STACK[0x2C0])
  {
LABEL_8:
    CFArrayRef v76 = (std::__shared_weak_count *)STACK[0x2F8];
    if (!STACK[0x2F8]) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v75);
  CFArrayRef v76 = (std::__shared_weak_count *)STACK[0x2F8];
  if (!STACK[0x2F8])
  {
LABEL_9:
    CFRange v77 = (std::__shared_weak_count *)STACK[0x330];
    if (!STACK[0x330]) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v76);
  CFRange v77 = (std::__shared_weak_count *)STACK[0x330];
  if (!STACK[0x330])
  {
LABEL_10:
    CFRange v78 = (std::__shared_weak_count *)STACK[0x368];
    if (!STACK[0x368]) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v77);
  CFRange v78 = (std::__shared_weak_count *)STACK[0x368];
  if (!STACK[0x368])
  {
LABEL_11:
    xpc_object_t v79 = (std::__shared_weak_count *)STACK[0x3A0];
    if (!STACK[0x3A0]) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v78);
  xpc_object_t v79 = (std::__shared_weak_count *)STACK[0x3A0];
  if (!STACK[0x3A0])
  {
LABEL_12:
    CFArrayRef v80 = (std::__shared_weak_count *)STACK[0x3D8];
    if (!STACK[0x3D8]) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v79);
  CFArrayRef v80 = (std::__shared_weak_count *)STACK[0x3D8];
  if (!STACK[0x3D8])
  {
LABEL_13:
    CFArrayRef v81 = (std::__shared_weak_count *)STACK[0x410];
    if (!STACK[0x410]) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v80);
  CFArrayRef v81 = (std::__shared_weak_count *)STACK[0x410];
  if (!STACK[0x410])
  {
LABEL_14:
    uint64_t v82 = (std::__shared_weak_count *)STACK[0x448];
    if (!STACK[0x448]) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v81);
  uint64_t v82 = (std::__shared_weak_count *)STACK[0x448];
  if (!STACK[0x448])
  {
LABEL_15:
    CFMutableDictionaryRef v83 = (std::__shared_weak_count *)STACK[0x480];
    if (!STACK[0x480]) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v82);
  CFMutableDictionaryRef v83 = (std::__shared_weak_count *)STACK[0x480];
  if (!STACK[0x480])
  {
LABEL_16:
    xpc_object_t v84 = (std::__shared_weak_count *)STACK[0x4B8];
    if (!STACK[0x4B8]) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v83);
  xpc_object_t v84 = (std::__shared_weak_count *)STACK[0x4B8];
  if (!STACK[0x4B8])
  {
LABEL_17:
    uint64_t v85 = (std::__shared_weak_count *)STACK[0x4F0];
    if (!STACK[0x4F0]) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v84);
  uint64_t v85 = (std::__shared_weak_count *)STACK[0x4F0];
  if (!STACK[0x4F0])
  {
LABEL_18:
    CFArrayRef v86 = (std::__shared_weak_count *)STACK[0x528];
    if (!STACK[0x528]) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v85);
  CFArrayRef v86 = (std::__shared_weak_count *)STACK[0x528];
  if (!STACK[0x528])
  {
LABEL_19:
    size_t v87 = (std::__shared_weak_count *)STACK[0x560];
    if (!STACK[0x560]) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v86);
  size_t v87 = (std::__shared_weak_count *)STACK[0x560];
  if (!STACK[0x560])
  {
LABEL_20:
    size_t v88 = (std::__shared_weak_count *)STACK[0x598];
    if (!STACK[0x598]) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v87);
  size_t v88 = (std::__shared_weak_count *)STACK[0x598];
  if (!STACK[0x598])
  {
LABEL_21:
    xpc_object_t v89 = (std::__shared_weak_count *)STACK[0x5D0];
    if (!STACK[0x5D0]) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v88);
  xpc_object_t v89 = (std::__shared_weak_count *)STACK[0x5D0];
  if (!STACK[0x5D0])
  {
LABEL_22:
    CFArrayRef v90 = (std::__shared_weak_count *)STACK[0x608];
    if (!STACK[0x608]) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v89);
  CFArrayRef v90 = (std::__shared_weak_count *)STACK[0x608];
  if (!STACK[0x608])
  {
LABEL_23:
    CFArrayRef v91 = (std::__shared_weak_count *)STACK[0x640];
    if (!STACK[0x640]) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v90);
  CFArrayRef v91 = (std::__shared_weak_count *)STACK[0x640];
  if (!STACK[0x640])
  {
LABEL_24:
    uint64_t v92 = (std::__shared_weak_count *)STACK[0x678];
    if (!STACK[0x678]) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v91);
  uint64_t v92 = (std::__shared_weak_count *)STACK[0x678];
  if (!STACK[0x678])
  {
LABEL_25:
    uint64_t v93 = (std::__shared_weak_count *)STACK[0x6B0];
    if (!STACK[0x6B0]) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v92);
  uint64_t v93 = (std::__shared_weak_count *)STACK[0x6B0];
  if (!STACK[0x6B0])
  {
LABEL_27:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_26:
  std::__shared_weak_count::__release_weak(v93);
  goto LABEL_27;
}

void sub_1C57A68E0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A68EC(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A692C(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C57A7728);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A693C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6948(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    unint64_t v12 = (unint64_t)v11[3];
    if (v12)
    {
      if ((v12 & 1) == 0)
      {
        uint64_t v13 = *(void (**)(void **, void **, uint64_t))(v12 & 0xFFFFFFFFFFFFFFFELL);
        if (v13) {
          v13(v11 + 4, v11 + 4, 2);
        }
      }
      v11[3] = 0;
    }
    uint64_t v14 = *v11;
    if (*v11)
    {
      uint64_t v15 = (uint64_t)v11[1];
      uint64_t v16 = *v11;
      if ((void *)v15 != v14)
      {
        do
        {
          v15 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v15);
        }
        while ((void *)v15 != v14);
        uint64_t v16 = *v11;
      }
      v11[1] = v14;
      operator delete(v16);
    }
    operator delete(v11);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A69D0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A69DC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, boost::signals2::detail::connection_body_base *a11)
{
  if (a2)
  {
    __cxa_end_catch();
    unint64_t v11 = (atomic_uint *)*((void *)a11 + 5);
    if (v11)
    {
      if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
        if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
        }
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(a11);
    JUMPOUT(0x1C57A75ECLL);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6A70(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6A7C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6A88(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A6A94);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6AA0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A6AACLL);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6AB8(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x828];
    if (STACK[0x828])
    {
      if ((uint64_t)(STACK[0x830] - 1) >= 0)
      {
        unint64_t v3 = v2 + 16 * STACK[0x830];
        do
        {
          uint64_t v4 = *(atomic_uint **)(v3 - 8);
          if (v4)
          {
            if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
              if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
              }
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x820] >= 0xB) {
        operator delete((void *)STACK[0x828]);
      }
    }
    JUMPOUT(0x1C57A7730);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6B80(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6B8C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A6B94);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6BC0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A6BC8);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6BD4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6BE0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6BEC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6BF8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6C04(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6C10(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6C1C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6C28(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6C34(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6C40(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6C4C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6C58(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6C64(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6C70(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6C7C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6C88(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6C94(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6CA0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6CAC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6CB8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6CC4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6CD0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6CDC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6CE8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6CF4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6D00(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6D1C(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x760]);
    JUMPOUT(0x1C57A76F8);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6D30(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x760]);
    JUMPOUT(0x1C57A7728);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6D5C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A7728);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6D68(void *a1, int a2)
{
  if (a2)
  {
    boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::~function2((uint64_t *)&STACK[0x780]);
    boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>::~function((uint64_t *)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x740]);
    unint64_t v3 = STACK[0x718];
    if (STACK[0x718])
    {
      if ((v3 & 1) == 0)
      {
        uint64_t v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4) {
          v4(&STACK[0x720], &STACK[0x720], 2);
        }
      }
      STACK[0x718] = 0;
    }
    unint64_t v5 = STACK[0x700];
    if (STACK[0x700])
    {
      uint64_t v6 = STACK[0x708];
      uint64_t v7 = (void *)STACK[0x700];
      if (STACK[0x708] != v5)
      {
        do
        {
          v6 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v6);
        }
        while (v6 != v5);
        uint64_t v7 = (void *)STACK[0x700];
      }
      STACK[0x708] = v5;
      operator delete(v7);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x6F0]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1C57A76B8);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6E08(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A6E10(void *a1, int a2)
{
  if (a2)
  {
    boost::function1<void,coex::SubId>::~function1((uint64_t *)&STACK[0x780]);
    boost::function<void ()(coex::SubId)>::~function((uint64_t *)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x740]);
    unint64_t v3 = STACK[0x718];
    if (STACK[0x718])
    {
      if ((v3 & 1) == 0)
      {
        uint64_t v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4) {
          v4(&STACK[0x720], &STACK[0x720], 2);
        }
      }
      STACK[0x718] = 0;
    }
    unint64_t v5 = STACK[0x700];
    if (STACK[0x700])
    {
      uint64_t v6 = STACK[0x708];
      uint64_t v7 = (void *)STACK[0x700];
      if (STACK[0x708] != v5)
      {
        do
        {
          v6 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v6);
        }
        while (v6 != v5);
        uint64_t v7 = (void *)STACK[0x700];
      }
      STACK[0x708] = v5;
      operator delete(v7);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x6F0]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1C57A76E0);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A6EB0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A6EBC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A6EC8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A6ED0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C57A70E4(void *a1, int a2)
{
  if (a2)
  {
    boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::~function2((uint64_t *)&STACK[0x780]);
    boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>::~function((uint64_t *)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x740]);
    unint64_t v3 = STACK[0x718];
    if (STACK[0x718])
    {
      if ((v3 & 1) == 0)
      {
        uint64_t v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4) {
          v4(&STACK[0x720], &STACK[0x720], 2);
        }
      }
      STACK[0x718] = 0;
    }
    unint64_t v5 = STACK[0x700];
    if (STACK[0x700])
    {
      uint64_t v6 = STACK[0x708];
      uint64_t v7 = (void *)STACK[0x700];
      if (STACK[0x708] != v5)
      {
        do
        {
          v6 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v6);
        }
        while (v6 != v5);
        uint64_t v7 = (void *)STACK[0x700];
      }
      STACK[0x708] = v5;
      operator delete(v7);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x6F0]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1C57A7708);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A7184(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A7190(void *a1, int a2)
{
  if (a2)
  {
    boost::function0<void>::~function0((uint64_t *)&STACK[0x780]);
    boost::function<void ()(void)>::~function((uint64_t *)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x740]);
    unint64_t v3 = STACK[0x718];
    if (STACK[0x718])
    {
      if ((v3 & 1) == 0)
      {
        uint64_t v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4) {
          v4(&STACK[0x720], &STACK[0x720], 2);
        }
      }
      STACK[0x718] = 0;
    }
    unint64_t v5 = STACK[0x700];
    if (STACK[0x700])
    {
      uint64_t v6 = STACK[0x708];
      uint64_t v7 = (void *)STACK[0x700];
      if (STACK[0x708] != v5)
      {
        do
        {
          v6 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v6);
        }
        while (v6 != v5);
        uint64_t v7 = (void *)STACK[0x700];
      }
      STACK[0x708] = v5;
      operator delete(v7);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x6F0]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1C57A7738);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A7230(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A723C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A7248(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7720);
  }
  JUMPOUT(0x1C57A72B8);
}

void sub_1C57A7254(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C57A7258);
  }
  _Unwind_Resume(a1);
}

void sub_1C57A725C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C57A7260);
  }
  __clang_call_terminate();
}

void sub_1C57A726C(uint64_t a1, int a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::~list(v2);
    JUMPOUT(0x1C57A7328);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A7288(uint64_t a1, int a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::~list(v2);
    JUMPOUT(0x1C57A7410);
  }
  JUMPOUT(0x1C57A7720);
}

void sub_1C57A72A4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t coex::Module::State::State(uint64_t a1, void *a2, void *a3, void *a4)
{
  *(void *)a1 = &unk_1F20F1440;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v36, "com.apple.telephony.abm", "coex.mod");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  CFAllocatorRef v9 = dispatch_queue_create_with_target_V2("coex.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v9, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v9);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v9;
  if (v9)
  {
    dispatch_retain(v9);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v9);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_1F20F1E90;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v34);
  *(void *)(a1 + 8) = &unk_1F20F0070;
  *(void *)(a1 + 56) = *a2;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 64) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v38);
  *(void *)a1 = &unk_1F20F1F70;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v36);
  *(void *)a1 = &unk_1F20F1440;
  *(void *)(a1 + 104) = *a3;
  uint64_t v11 = a3[1];
  *(void *)(a1 + 112) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  char v35 = 0;
  LOBYTE(v34) = 0;
  coex::XpcClient::create((uint64_t)&v34, (void *)(a1 + 120));
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 172) = 8;
  unint64_t v12 = (void *)(a1 + 176);
  uint64_t v13 = (const void *)*MEMORY[0x1E4F4CAF0];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4CAF0]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    unint64_t v12 = operator new(v16 + 1);
    *(void *)(a1 + 184) = v15;
    *(void *)(a1 + 192) = v17 | 0x8000000000000000;
    *(void *)(a1 + 176) = v12;
    goto LABEL_15;
  }
  *(unsigned char *)(a1 + 199) = v14;
  if (v14) {
LABEL_15:
  }
    size_t v14 = (size_t)memmove(v12, v13, v15);
  *((unsigned char *)v12 + v15) = 0;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a1 + 224;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = a1 + 224;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = *a4;
  uint64_t v18 = a4[1];
  *(void *)(a1 + 272) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 16), 1uLL, memory_order_relaxed);
  }
  if (capabilities::abs::supportsDesense((capabilities::abs *)v14))
  {
    stat v19 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    uint64_t v20 = off_1EBBDD2A0;
    if (!off_1EBBDD2A0)
    {
      CommandDriverFactory::create_default_global((uint64_t *)&v34, v19);
      long long v21 = v34;
      long long v34 = 0uLL;
      uint64_t v22 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
      off_1EBBDD2A0 = v21;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      BOOL v23 = (std::__shared_weak_count *)*((void *)&v34 + 1);
      if (*((void *)&v34 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      uint64_t v20 = off_1EBBDD2A0;
    }
    uint64_t v36 = v20;
    unint64_t v37 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    if (*(&off_1EBBDD2A0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v20 + 144))(&v38, v20);
    long long v24 = v38;
    long long v38 = 0uLL;
    xpc_object_t v25 = *(std::__shared_weak_count **)(a1 + 216);
    *(_OWORD *)(a1 + 208) = v24;
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    uint64_t v26 = (std::__shared_weak_count *)*((void *)&v38 + 1);
    if (*((void *)&v38 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    long long v27 = v37;
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  ctu::LoggerCommonBase::setLogLevel();
  coex::CoexCache::initProperty((coex::CoexCache *)(a1 + 136));
  CFAllocatorRef v28 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v30 = *(const void **)(a1 + 144);
    *(void *)(a1 + 144) = Mutable;
    if (v30) {
      CFRelease(v30);
    }
  }
  CFMutableDictionaryRef v31 = CFDictionaryCreateMutable(v28, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v31)
  {
    unint64_t v32 = *(const void **)(a1 + 160);
    *(void *)(a1 + 160) = v31;
    if (v32) {
      CFRelease(v32);
    }
  }
  return a1;
}

void sub_1C57A7CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v18 = *(std::__shared_weak_count **)(v10 + 272);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v16);
  std::list<boost::signals2::connection>::~list(v15);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v14);
  if (*(char *)(v10 + 199) < 0) {
    operator delete(*a10);
  }
  coex::CoexCache::~CoexCache(v13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11);
  ctu::SharedLoggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((void *)v10);
  _Unwind_Resume(a1);
}

const char *coex::Module::State::getName(coex::Module::State *this)
{
  return "coex.mod";
}

void coex::CoexCache::initProperty(coex::CoexCache *this)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v4 = Mutable;
    unint64_t v5 = *(const void **)this;
    *(void *)this = v4;
    if (v5) {
      CFRelease(v5);
    }
  }
  CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v6)
  {
    CFMutableDictionaryRef v7 = v6;
    uint64_t v8 = (const void *)*((void *)this + 2);
    *((void *)this + 2) = v7;
    if (v8) {
      CFRelease(v8);
    }
  }
}

uint64_t *std::list<boost::signals2::connection>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        CFMutableDictionaryRef v6 = (atomic_uint *)v3[3];
        if (v6 && atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
        }
        operator delete(v3);
        unint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void *ctu::SharedLoggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F1E90;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20F1E90;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void coex::Module::State::~State(coex::Module::State *this)
{
  *(void *)this = &unk_1F20F1440;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v16, 2u);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!*((void *)this + 30)) {
      goto LABEL_15;
    }
  }
  else if (!*((void *)this + 30))
  {
    goto LABEL_15;
  }
  uint64_t v5 = *((void *)this + 28);
  CFMutableDictionaryRef v6 = (coex::Module::State *)*((void *)this + 29);
  uint64_t v7 = *(void *)v6;
  *(void *)(v7 + 8) = *(void *)(v5 + 8);
  **(void **)(v5 + 8) = v7;
  *((void *)this + 30) = 0;
  if (v6 != (coex::Module::State *)((char *)this + 224))
  {
    do
    {
      uint64_t v8 = (coex::Module::State *)*((void *)v6 + 1);
      CFAllocatorRef v9 = (atomic_uint *)*((void *)v6 + 3);
      if (v9 && atomic_fetch_add(v9 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v9 + 24))(v9);
      }
      operator delete(v6);
      CFMutableDictionaryRef v6 = v8;
    }
    while (v8 != (coex::Module::State *)((char *)this + 224));
  }
LABEL_15:
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if ((*((char *)this + 199) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (*((char *)this + 199) < 0) {
LABEL_18:
  }
    operator delete(*((void **)this + 22));
LABEL_19:
  coex::CoexCache::~CoexCache((coex::Module::State *)((char *)this + 136));
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(void *)this = &unk_1F20F1E90;
  MEMORY[0x1C8790F40]((char *)this + 8);
  uint64_t v13 = *((void *)this + 12);
  if (v13) {
    dispatch_release(v13);
  }
  uint64_t v14 = *((void *)this + 11);
  if (v14) {
    dispatch_release(v14);
  }
  size_t v15 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
}

{
  void *v1;
  uint64_t vars8;

  coex::Module::State::~State(this);

  operator delete(v1);
}

void ___ZN4coex6Module5State4initEv_block_invoke(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1[4];
  stat v19 = 0;
  CFMutableDictionaryRef v6 = (std::__shared_weak_count *)a1[6];
  if (v6 && (stat v19 = std::__shared_weak_count::lock(v6)) != 0)
  {
    uint64_t v7 = (void *)a1[5];
    uint64_t v18 = 0;
    uint64_t v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v18 = 0;
    uint64_t v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8) {
      goto LABEL_14;
    }
  }
  uint64_t v18 = std::__shared_weak_count::lock(v8);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)(v5 + 264);
  if (v7 && v9 && ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 80))(v9) & 1) == 0)
  {
    uint64_t v10 = (std::__shared_weak_count *)v7[10];
    if (!v10 || (uint64_t v11 = v7[9], (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v13 = v12;
    uint64_t v14 = operator new(0x10uLL);
    *(void *)uint64_t v14 = v5;
    void v14[2] = a3;
    size_t v15 = v7[11];
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = operator new(0x18uLL);
    *uint64_t v16 = v14;
    v16[1] = v11;
    v16[2] = v13;
    dispatch_async_f(v15, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_14:
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    uint64_t v17 = v19;
    if (!v19) {
      return;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v17 = v19;
  if (!v19) {
    return;
  }
LABEL_17:
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_1C57A8488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrIN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrIN4coex6Module5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_21(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1[4];
  stat v19 = 0;
  CFMutableDictionaryRef v6 = (std::__shared_weak_count *)a1[6];
  if (v6 && (stat v19 = std::__shared_weak_count::lock(v6)) != 0)
  {
    uint64_t v7 = (void *)a1[5];
    uint64_t v18 = 0;
    uint64_t v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v18 = 0;
    uint64_t v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8) {
      goto LABEL_14;
    }
  }
  uint64_t v18 = std::__shared_weak_count::lock(v8);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)(v5 + 264);
  if (v7 && v9 && ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 80))(v9) & 1) == 0)
  {
    uint64_t v10 = (std::__shared_weak_count *)v7[10];
    if (!v10 || (uint64_t v11 = v7[9], (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v13 = v12;
    uint64_t v14 = operator new(0x10uLL);
    *(void *)uint64_t v14 = v5;
    void v14[2] = a3;
    size_t v15 = v7[11];
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = operator new(0x18uLL);
    *uint64_t v16 = v14;
    v16[1] = v11;
    v16[2] = v13;
    dispatch_async_f(v15, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_14:
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    uint64_t v17 = v19;
    if (!v19) {
      return;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v17 = v19;
  if (!v19) {
    return;
  }
LABEL_17:
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_1C57A8708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_25(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6 = a1[4];
  long long v24 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (long long v24 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  BOOL v23 = v10;
  if (!v10) {
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v12) & 1) != 0) {
    goto LABEL_18;
  }
  xpc_object_t v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
LABEL_27:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
      goto LABEL_27;
    }
  }
  uint64_t v15 = v8[9];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_27;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  void *v18 = v6;
  v18[1] = v13;
  xpc_object_t v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  uint64_t v20 = v8[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  uint64_t v11 = v23;
  if (v23)
  {
LABEL_18:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      uint64_t v22 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v22 = v24;
  if (!v24) {
    return;
  }
LABEL_20:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C57A89A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_29(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6 = a1[4];
  long long v24 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (long long v24 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  BOOL v23 = v10;
  if (!v10) {
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v12) & 1) != 0) {
    goto LABEL_18;
  }
  xpc_object_t v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
LABEL_27:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
      goto LABEL_27;
    }
  }
  uint64_t v15 = v8[9];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_27;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  void *v18 = v6;
  v18[1] = v13;
  xpc_object_t v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  uint64_t v20 = v8[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  uint64_t v11 = v23;
  if (v23)
  {
LABEL_18:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      uint64_t v22 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v22 = v24;
  if (!v24) {
    return;
  }
LABEL_20:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C57A8C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_33(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6 = a1[4];
  long long v24 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (long long v24 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  BOOL v23 = v10;
  if (!v10) {
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v12) & 1) != 0) {
    goto LABEL_18;
  }
  xpc_object_t v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
LABEL_27:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
      goto LABEL_27;
    }
  }
  uint64_t v15 = v8[9];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_27;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  void *v18 = v6;
  v18[1] = v13;
  xpc_object_t v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  uint64_t v20 = v8[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  uint64_t v11 = v23;
  if (v23)
  {
LABEL_18:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      uint64_t v22 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v22 = v24;
  if (!v24) {
    return;
  }
LABEL_20:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C57A8EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_37(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6 = a1[4];
  long long v24 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (long long v24 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  BOOL v23 = v10;
  if (!v10) {
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v12) & 1) != 0) {
    goto LABEL_18;
  }
  xpc_object_t v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
LABEL_27:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
      goto LABEL_27;
    }
  }
  uint64_t v15 = v8[9];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_27;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  void *v18 = v6;
  v18[1] = v13;
  xpc_object_t v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  uint64_t v20 = v8[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb4_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  uint64_t v11 = v23;
  if (v23)
  {
LABEL_18:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      uint64_t v22 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v22 = v24;
  if (!v24) {
    return;
  }
LABEL_20:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C57A9188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_45(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6 = a1[4];
  long long v24 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (long long v24 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  BOOL v23 = v10;
  if (!v10) {
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v12) & 1) != 0) {
    goto LABEL_18;
  }
  xpc_object_t v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
LABEL_27:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
      goto LABEL_27;
    }
  }
  uint64_t v15 = v8[9];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_27;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  void *v18 = v6;
  v18[1] = v13;
  xpc_object_t v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  uint64_t v20 = v8[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb6_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  uint64_t v11 = v23;
  if (v23)
  {
LABEL_18:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      uint64_t v22 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v22 = v24;
  if (!v24) {
    return;
  }
LABEL_20:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C57A9428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_49(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6 = a1[4];
  long long v24 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (long long v24 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  BOOL v23 = v10;
  if (!v10) {
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v12) & 1) != 0) {
    goto LABEL_18;
  }
  xpc_object_t v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
LABEL_27:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
      goto LABEL_27;
    }
  }
  uint64_t v15 = v8[9];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_27;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  void *v18 = v6;
  v18[1] = v13;
  xpc_object_t v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  uint64_t v20 = v8[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb7_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  uint64_t v11 = v23;
  if (v23)
  {
LABEL_18:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      uint64_t v22 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v22 = v24;
  if (!v24) {
    return;
  }
LABEL_20:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C57A96C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_53(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1[4];
  xpc_object_t v19 = 0;
  uint64_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6 && (xpc_object_t v19 = std::__shared_weak_count::lock(v6)) != 0)
  {
    uint64_t v7 = (void *)a1[5];
    uint64_t v18 = 0;
    uint64_t v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v18 = 0;
    uint64_t v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8) {
      goto LABEL_14;
    }
  }
  uint64_t v18 = std::__shared_weak_count::lock(v8);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)(v5 + 264);
  if (v7 && v9 && ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 80))(v9) & 1) == 0)
  {
    uint64_t v10 = (std::__shared_weak_count *)v7[10];
    if (!v10 || (uint64_t v11 = v7[9], (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    xpc_object_t v13 = v12;
    uint64_t v14 = operator new(0x10uLL);
    *(void *)uint64_t v14 = v5;
    void v14[2] = a3;
    uint64_t v15 = v7[11];
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = operator new(0x18uLL);
    *uint64_t v16 = v14;
    v16[1] = v11;
    v16[2] = v13;
    dispatch_async_f(v15, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb8_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_14:
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    uint64_t v17 = v19;
    if (!v19) {
      return;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v17 = v19;
  if (!v19) {
    return;
  }
LABEL_17:
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_1C57A991C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_57(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb9_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_61(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb10_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_65(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb11_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_69(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb12_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_73(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb13_E4__14EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_77(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb14_E4__15EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_81(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb15_E4__16EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_85(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb16_E4__17EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_89(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb17_E4__18EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_93(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb18_E4__19EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_97(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb19_E4__20EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_101(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb20_E4__21EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_105(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb21_E4__22EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_109(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb22_E4__23EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void boost::signals2::connection::~connection(boost::signals2::connection *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 1);
  if (v1)
  {
    if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
    }
  }
}

uint64_t coex::Module::State::handleDesenseCommandDriverStarted_sync(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 208);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  return result;
}

void coex::Module::State::setIndications_sync(coex::Module::State *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  xpc_object_t v19 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v7 = Mutable;
  if (Mutable) {
    xpc_object_t v19 = Mutable;
  }
  uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFD0];
  ctu::cf::insert<__CFString const*,__CFBoolean const*>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9670], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
  ctu::cf::insert<__CFString const*,__CFBoolean const*>(v7, (CFTypeRef)*MEMORY[0x1E4FB9668], v8);
  ctu::cf::insert<__CFString const*,__CFBoolean const*>(v7, (CFTypeRef)*MEMORY[0x1E4FB9720], v8);
  if (capabilities::abs::supportsCoexEur5G(v9))
  {
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v7, (CFTypeRef)*MEMORY[0x1E4FB9758], (CFTypeRef)*MEMORY[0x1E4F1CFC8]);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v7, (CFTypeRef)*MEMORY[0x1E4FB9618], v8);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v7, (CFTypeRef)*MEMORY[0x1E4FB96D0], v8);
  }
  uint64_t v10 = *((void *)this + 13);
  if (v7 && (CFTypeID v11 = CFGetTypeID(v7), v11 == CFDictionaryGetTypeID()))
  {
    uint64_t v18 = v7;
    CFRetain(v7);
  }
  else
  {
    uint64_t v18 = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State19setIndications_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_132_0;
  void aBlock[4] = this;
  aBlock[5] = v3;
  uint64_t v15 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = *((void *)this + 11);
  if (v13) {
    dispatch_retain(v13);
  }
  if (v12)
  {
    uint64_t v16 = _Block_copy(v12);
    dispatch_object_t object = v13;
    if (!v13) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v16 = 0;
  dispatch_object_t object = v13;
  if (v13) {
LABEL_17:
  }
    dispatch_retain(v13);
LABEL_18:
  (*(void (**)(uint64_t, __CFDictionary **, void **))(*(void *)v10 + 64))(v10, &v18, &v16);
  if (object) {
    dispatch_release(object);
  }
  if (v16) {
    _Block_release(v16);
  }
  if (v13) {
    dispatch_release(v13);
  }
  if (v12) {
    _Block_release(v12);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v7) {
    CFRelease(v7);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C57AB4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a17);
  if (v18) {
    dispatch_release(v18);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v20 - 64));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v20 - 56));
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

void sub_1C57AB538(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v2 - 56));
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_117(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (coex::Module::State *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v14 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData((uint64_t *)&cf, *a2);
        CFTypeRef v8 = cf;
        if (cf) {
          uint64_t v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          v11[0] = 0xAAAAAAAAAAAAAAAALL;
          v11[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v11, (const __CFDictionary *)cf);
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v15, (const char *)*MEMORY[0x1E4F4CB50]);
          char Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v11, v15);
          MEMORY[0x1C8791110](&v15);
          *((unsigned char *)v5 + 172) = Int;
          coex::Module::State::evaluateCurrentCoexBootState_sync(v5);
          MEMORY[0x1C8791160](v11);
          CFTypeRef v8 = cf;
        }
        if (v8) {
          CFRelease(v8);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void coex::Module::State::evaluateCurrentCoexBootState_sync(coex::Module::State *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((char *)this + 172);
  uint64_t v3 = (_OWORD *)((char *)this + 176);
  memset(&v19, 170, sizeof(v19));
  if (*((char *)this + 199) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)this + 22), *((void *)this + 23));
  }
  else
  {
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *v3;
    v19.__r_.__value_.__r.__words[2] = *((void *)this + 24);
  }
  if (v2 > 7) {
    int v4 = 2;
  }
  else {
    int v4 = dword_1C599D914[v2];
  }
  int v5 = *((char *)this + 199);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)this + 199);
  }
  else {
    size_t v6 = *((void *)this + 23);
  }
  int v7 = 2;
  if (v6 == strlen((const char *)*MEMORY[0x1E4F4CAE8]))
  {
    if (v5 >= 0) {
      CFTypeRef v8 = v3;
    }
    else {
      CFTypeRef v8 = *(const void **)v3;
    }
    if (!memcmp(v8, (const void *)*MEMORY[0x1E4F4CAE8], v6)) {
      int v7 = v4;
    }
    else {
      int v7 = 2;
    }
  }
  int v9 = *((_DWORD *)this + 50);
  if (v7 != v9)
  {
    uint64_t v10 = *((void *)this + 5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::__fs::filesystem::path buf = 67109376;
      int v21 = v9;
      __int16 v22 = 1024;
      int v23 = v7;
      _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Coex boot state changing from %d -> %d", buf, 0xEu);
    }
    *((_DWORD *)this + 50) = v7;
    if (*((void *)this + 15))
    {
      xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
      if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v11) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v11);
          xpc_object_t v12 = v11;
        }
        else
        {
          xpc_object_t v12 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v11 = 0;
      }
      xpc_release(v11);
      xpc_object_t v13 = xpc_int64_create(*((unsigned int *)this + 50));
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(v12, "kWCMCellular_BBState", v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      uint64_t v15 = *((void *)this + 15);
      uint64_t v18 = v12;
      if (v12)
      {
        xpc_retain(v12);
        xpc_object_t v16 = v18;
      }
      else
      {
        xpc_object_t v16 = xpc_null_create();
        uint64_t v18 = v16;
      }
      coex::XpcClient::sendMessage(v15, 388, &v18, 0);
      xpc_release(v16);
      uint64_t v18 = 0;
      xpc_object_t v17 = *((void *)this + 5);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::__fs::filesystem::path buf = 0;
        _os_log_impl(&dword_1C5767000, v17, OS_LOG_TYPE_DEFAULT, "#I Notified CXM with baseband state", buf, 2u);
      }
      xpc_release(v12);
    }
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_1C57AB9D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN4coex6Module5State4initEv_block_invoke_122(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  size_t v6 = std::__shared_weak_count::lock(v3);
  long long v38 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    xpc_object_t v13 = v6;
LABEL_55:
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return;
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData((uint64_t *)&cf, *a2);
  CFTypeRef v7 = cf;
  if (cf) {
    CFTypeRef v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    CFTypeRef v8 = 0;
  }
  if (v8)
  {
    v35[0] = 0xAAAAAAAAAAAAAAAALL;
    v35[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v35, (const __CFDictionary *)cf);
    int v9 = (const void *)*MEMORY[0x1E4F4CAF0];
    size_t v10 = strlen((const char *)*MEMORY[0x1E4F4CAF0]);
    if (v10 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    xpc_object_t v11 = (void *)v10;
    if (v10 >= 0x17)
    {
      uint64_t v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v14 = v10 | 7;
      }
      uint64_t v15 = v14 + 1;
      xpc_object_t v12 = (void **)operator new(v14 + 1);
      __dst[1] = v11;
      unint64_t v32 = v15 | 0x8000000000000000;
      __dst[0] = v12;
    }
    else
    {
      HIBYTE(v32) = v10;
      xpc_object_t v12 = __dst;
      if (!v10) {
        goto LABEL_17;
      }
    }
    memmove(v12, v9, (size_t)v11);
LABEL_17:
    xpc_object_t v16 = (const char *)*MEMORY[0x1E4F4C688];
    *((unsigned char *)v11 + (void)v12) = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v39, v16);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C8791110](&v39);
    xpc_object_t v17 = (void **)(v5 + 176);
    if (*(char *)(v5 + 199) < 0) {
      operator delete(*v17);
    }
    *(_OWORD *)xpc_object_t v17 = *(_OWORD *)buf;
    *(void *)(v5 + 192) = v34;
    HIBYTE(v34) = 0;
    buf[0] = 0;
    if (SHIBYTE(v32) < 0) {
      operator delete(__dst[0]);
    }
    size_t v18 = *(unsigned __int8 *)(v5 + 199);
    char v19 = v18;
    size_t v20 = *(void *)(v5 + 184);
    if ((v18 & 0x80u) == 0) {
      size_t v21 = *(unsigned __int8 *)(v5 + 199);
    }
    else {
      size_t v21 = *(void *)(v5 + 184);
    }
    if (v21 == strlen((const char *)*MEMORY[0x1E4F4CAE8]))
    {
      __int16 v22 = (v18 & 0x80u) == 0 ? (const void *)(v5 + 176) : *v17;
      if (!memcmp(v22, (const void *)*MEMORY[0x1E4F4CAE8], v21) && *(void *)(v5 + 120))
      {
        xpc_object_t v23 = xpc_dictionary_create(0, 0, 0);
        if (v23 || (xpc_object_t v23 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v23) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v23);
            xpc_object_t v24 = v23;
          }
          else
          {
            xpc_object_t v24 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v24 = xpc_null_create();
          xpc_object_t v23 = 0;
        }
        xpc_release(v23);
        uint64_t v25 = *(void *)(v5 + 120);
        uint64_t v30 = v24;
        if (v24)
        {
          xpc_retain(v24);
          xpc_object_t v26 = v30;
        }
        else
        {
          xpc_object_t v26 = xpc_null_create();
          uint64_t v30 = v26;
        }
        coex::XpcClient::sendMessage(v25, 304, &v30, 0);
        xpc_release(v26);
        uint64_t v30 = 0;
        long long v27 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::__fs::filesystem::path buf = 0;
          _os_log_impl(&dword_1C5767000, v27, OS_LOG_TYPE_DEFAULT, "#I Notified CXM that Baseband is Ready", buf, 2u);
        }
        xpc_release(v24);
        size_t v18 = *(unsigned __int8 *)(v5 + 199);
        size_t v20 = *(void *)(v5 + 184);
        char v19 = *(unsigned char *)(v5 + 199);
      }
    }
    if (v19 >= 0) {
      size_t v28 = v18;
    }
    else {
      size_t v28 = v20;
    }
    if (v28 == strlen((const char *)*MEMORY[0x1E4F4CCD8]))
    {
      uint64_t v29 = v19 >= 0 ? (const void *)(v5 + 176) : *v17;
      if (!memcmp(v29, (const void *)*MEMORY[0x1E4F4CCD8], v28)) {
        coex::CoexCache::initProperty((coex::CoexCache *)(v5 + 136));
      }
    }
    coex::Module::State::evaluateCurrentCoexBootState_sync((coex::Module::State *)v5);
    MEMORY[0x1C8791160](v35);
    CFTypeRef v7 = cf;
  }
  if (v7) {
    CFRelease(v7);
  }
  xpc_object_t v13 = v38;
  if (v38) {
    goto LABEL_55;
  }
}

void ___ZN4coex6Module5State8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1 + 28;
  uint64_t v3 = (uint64_t *)v1[29];
  if (v3 != v1 + 28)
  {
    do
    {
      boost::signals2::connection::disconnect((boost::signals2::connection *)(v3 + 2));
      uint64_t v3 = (uint64_t *)v3[1];
    }
    while (v3 != v2);
  }
  if (v1[30])
  {
    uint64_t v4 = v1[28];
    uint64_t v5 = (uint64_t *)v1[29];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    v1[30] = 0;
    if (v5 != v2)
    {
      do
      {
        CFTypeRef v7 = (uint64_t *)v5[1];
        CFTypeRef v8 = (atomic_uint *)v5[3];
        if (v8 && atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v2);
    }
  }
  int v9 = (std::__shared_weak_count *)v1[16];
  v1[15] = 0;
  v1[16] = 0;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  size_t v10 = (std::__shared_weak_count *)v1[14];
  v1[13] = 0;
  v1[14] = 0;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    xpc_object_t v11 = (std::__shared_weak_count *)v1[32];
    v1[31] = 0;
    v1[32] = 0;
    if (!v11) {
      return;
    }
  }
  else
  {
    xpc_object_t v11 = (std::__shared_weak_count *)v1[32];
    v1[31] = 0;
    v1[32] = 0;
    if (!v11) {
      return;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void boost::signals2::connection::disconnect(boost::signals2::connection *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 1);
  if (v1)
  {
    uint64_t v2 = v1[2];
    while (v2)
    {
      uint64_t v3 = v2;
      atomic_compare_exchange_strong_explicit(v1 + 2, (unsigned int *)&v3, v2 + 1, memory_order_relaxed, memory_order_relaxed);
      BOOL v4 = v3 == v2;
      uint64_t v2 = v3;
      if (v4)
      {
        uint64_t v5 = *(boost::signals2::detail::connection_body_base **)this;
        if (v5) {
          boost::signals2::detail::connection_body_base::disconnect(v5);
        }
        if (atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
          if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
          }
        }
        return;
      }
    }
  }
}

void sub_1C57AC1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN4coex6Module5State19setIndications_syncEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      CFTypeRef v7 = v6;
      if (!a1[5]) {
        goto LABEL_13;
      }
      uint64_t v8 = *a2;
      if (*a2) {
        int v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        int v9 = 0;
      }
      size_t v10 = *(NSObject **)(v5 + 40);
      BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (!v11) {
          goto LABEL_13;
        }
        int v15 = 138412290;
        uint64_t v16 = v8;
        xpc_object_t v12 = "#I Failed to  set indications:\n%@";
        xpc_object_t v13 = v10;
        uint32_t v14 = 12;
      }
      else
      {
        if (!v11) {
          goto LABEL_13;
        }
        LOWORD(v15) = 0;
        xpc_object_t v12 = "#I Indications set successfully";
        xpc_object_t v13 = v10;
        uint32_t v14 = 2;
      }
      _os_log_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v15, v14);
LABEL_13:
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void coex::CommandDriver::Callback::~Callback(coex::CommandDriver::Callback *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)this) {
    _Block_release(*(const void **)this);
  }
}

void coex::Module::State::handleSetNetworkConfigOfInterest_sync(uint64_t a1, xpc_object_t *a2, unsigned int a3)
{
  BOOL v4 = a2;
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14568])
  {
    uint64_t v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::__fs::filesystem::path buf = 0;
      _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Invalid XPC array", buf, 2u);
    }
    return;
  }
  uint64_t v66 = a1;
  CFArrayRef v85 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable) {
    CFArrayRef v85 = Mutable;
  }
  memset(buf, 170, 16);
  xpc_object_t v9 = *v4;
  if (*v4)
  {
    xpc_retain(*v4);
    *(void *)std::__fs::filesystem::path buf = v9;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    *(void *)std::__fs::filesystem::path buf = v9;
    if (!v9)
    {
      xpc_object_t v9 = 0;
      *(void *)std::__fs::filesystem::path buf = xpc_null_create();
      goto LABEL_10;
    }
  }
  xpc_retain(v9);
LABEL_10:
  *(void *)&uint8_t buf[8] = 0;
  xpc_release(v9);
  unsigned int v65 = a3;
  uint64_t v71 = *MEMORY[0x1E4FB9658];
  CFTypeRef v69 = (CFTypeRef)*MEMORY[0x1E4FB94E8];
  uint64_t v70 = *MEMORY[0x1E4FB9538];
  CFMutableArrayRef v67 = v4;
  CFTypeRef v68 = (CFTypeRef)*MEMORY[0x1E4FB9528];
  CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4FB9510];
  while (1)
  {
    xpc_object_t v10 = *v4;
    if (*v4) {
      xpc_retain(*v4);
    }
    else {
      xpc_object_t v10 = xpc_null_create();
    }
    if (MEMORY[0x1C8792D30](*v4) == MEMORY[0x1E4F14568])
    {
      size_t count = xpc_array_get_count(*v4);
      if (!v10)
      {
LABEL_20:
        xpc_object_t v12 = xpc_null_create();
        goto LABEL_21;
      }
    }
    else
    {
      size_t count = 0;
      if (!v10) {
        goto LABEL_20;
      }
    }
    xpc_retain(v10);
    xpc_object_t v12 = v10;
LABEL_21:
    xpc_release(v10);
    xpc_object_t v13 = *(xpc_object_t *)buf;
    uint64_t v14 = *(void *)&buf[8];
    xpc_release(v12);
    if (v14 == count && v13 == v12) {
      break;
    }
    xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long keys = buf;
    *((void *)&keys + 1) = *(void *)&buf[8];
    xpc::array::object_proxy::operator xpc::dict((uint64_t)&keys, &xdict);
    unint64_t v83 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_ULCenterFreq");
    values[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      values[0] = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&keys, (xpc *)values, v16);
    uint64_t v17 = (const void *)keys;
    if (!(void)keys || (CFTypeID v18 = CFGetTypeID((CFTypeRef)keys), v18 != CFNumberGetTypeID()))
    {
      uint64_t v17 = 0;
      unint64_t v83 = 0;
      char v19 = (const void *)keys;
      if (!(void)keys) {
        goto LABEL_32;
      }
LABEL_31:
      CFRelease(v19);
      goto LABEL_32;
    }
    unint64_t v83 = (unint64_t)v17;
    CFRetain(v17);
    char v19 = (const void *)keys;
    if ((void)keys) {
      goto LABEL_31;
    }
LABEL_32:
    xpc_release(values[0]);
    unint64_t v82 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v20 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_ULBandwidth");
    values[0] = v20;
    if (v20) {
      xpc_retain(v20);
    }
    else {
      values[0] = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&keys, (xpc *)values, v21);
    __int16 v22 = (const void *)keys;
    if (!(void)keys || (CFTypeID v23 = CFGetTypeID((CFTypeRef)keys), v23 != CFNumberGetTypeID()))
    {
      __int16 v22 = 0;
      unint64_t v82 = 0;
      xpc_object_t v24 = (const void *)keys;
      if (!(void)keys) {
        goto LABEL_41;
      }
LABEL_40:
      CFRelease(v24);
      goto LABEL_41;
    }
    unint64_t v82 = (unint64_t)v22;
    CFRetain(v22);
    xpc_object_t v24 = (const void *)keys;
    if ((void)keys) {
      goto LABEL_40;
    }
LABEL_41:
    xpc_release(values[0]);
    unint64_t v81 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v25 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_DLCenterFreq");
    values[0] = v25;
    if (v25) {
      xpc_retain(v25);
    }
    else {
      values[0] = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&keys, (xpc *)values, v26);
    long long v27 = (const void *)keys;
    if (!(void)keys || (CFTypeID v28 = CFGetTypeID((CFTypeRef)keys), v28 != CFNumberGetTypeID()))
    {
      long long v27 = 0;
      unint64_t v81 = 0;
      uint64_t v29 = (const void *)keys;
      if (!(void)keys) {
        goto LABEL_50;
      }
LABEL_49:
      CFRelease(v29);
      goto LABEL_50;
    }
    unint64_t v81 = (unint64_t)v27;
    CFRetain(v27);
    uint64_t v29 = (const void *)keys;
    if ((void)keys) {
      goto LABEL_49;
    }
LABEL_50:
    xpc_release(values[0]);
    unint64_t v80 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v30 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_DLBandwidth");
    values[0] = v30;
    if (v30) {
      xpc_retain(v30);
    }
    else {
      values[0] = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&keys, (xpc *)values, v31);
    unint64_t v32 = (const void *)keys;
    if (!(void)keys || (CFTypeID v33 = CFGetTypeID((CFTypeRef)keys), v33 != CFNumberGetTypeID()))
    {
      unint64_t v32 = 0;
      unint64_t v80 = 0;
      uint64_t v34 = (const void *)keys;
      if (!(void)keys) {
        goto LABEL_59;
      }
LABEL_58:
      CFRelease(v34);
      goto LABEL_59;
    }
    unint64_t v80 = (unint64_t)v32;
    CFRetain(v32);
    uint64_t v34 = (const void *)keys;
    if ((void)keys) {
      goto LABEL_58;
    }
LABEL_59:
    xpc_release(values[0]);
    xpc_object_t v35 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_BandMask");
    *(void *)&long long keys = v35;
    if (v35) {
      xpc_retain(v35);
    }
    else {
      *(void *)&long long keys = xpc_null_create();
    }
    unsigned __int8 v36 = xpc::dyn_cast_or_default((xpc *)&keys, 0);
    xpc_release((xpc_object_t)keys);
    if (!v17 || !v22 || !v27)
    {
      if (v32) {
        goto LABEL_91;
      }
      goto LABEL_92;
    }
    if (v32)
    {
      CFDictionaryRef v78 = 0;
      CFDictionaryRef v79 = 0;
      *(void *)&long long keys = v71;
      *((void *)&keys + 1) = v70;
      values[0] = (void *)v17;
      values[1] = (void *)v22;
      v89[0] = (void *)v27;
      v89[1] = (void *)v32;
      CFDictionaryRef v37 = CFDictionaryCreate(v7, (const void **)&keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef v38 = v37;
      if (v37) {
        CFDictionaryRef v79 = v37;
      }
      CFDictionaryRef v39 = CFDictionaryCreate(v7, (const void **)&keys, (const void **)v89, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef v40 = v39;
      if (v39) {
        CFDictionaryRef v78 = v39;
      }
      v89[0] = 0;
      CFMutableDictionaryRef v41 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v42 = v41;
      if (v41) {
        v89[0] = v41;
      }
      ctu::cf::insert<__CFString const*,__CFDictionary const*>(v41, v69, v38);
      ctu::cf::insert<__CFString const*,__CFDictionary const*>(v42, v68, v40);
      *(void *)bytes = v36;
      CFDataRef v43 = CFDataCreate(v7, bytes, 8);
      v77[1] = v43;
      *(void *)&long long keys = cf;
      if (cf) {
        CFRetain(cf);
      }
      values[0] = v43;
      if (v43)
      {
        CFRetain(v43);
        if (cf) {
          CFDictionaryAddValue(v42, cf, v43);
        }
        CFRelease(v43);
      }
      CFAllocatorRef v44 = v7;
      if (cf) {
        CFRelease(cf);
      }
      std::string::size_type v45 = v85;
      *(void *)&long long keys = v42;
      if (v42)
      {
        CFRetain(v42);
        CFArrayAppendValue(v45, v42);
        CFRelease(v42);
      }
      if (v43) {
        CFRelease(v43);
      }
      CFAllocatorRef v7 = v44;
      if (v42) {
        CFRelease(v42);
      }
      BOOL v4 = v67;
      if (v40) {
        CFRelease(v40);
      }
      if (v38) {
        CFRelease(v38);
      }
LABEL_91:
      CFRelease(v32);
LABEL_92:
      if (!v27) {
        goto LABEL_94;
      }
    }
    CFRelease(v27);
LABEL_94:
    if (v22) {
      CFRelease(v22);
    }
    if (v17) {
      CFRelease(v17);
    }
    xpc_release(xdict);
    xpc_object_t v46 = *(xpc_object_t *)buf;
    if (*(void *)buf) {
      xpc_retain(*(xpc_object_t *)buf);
    }
    else {
      xpc_object_t v46 = xpc_null_create();
    }
    ++*(void *)&buf[8];
    xpc_release(v46);
  }
  xpc_release(*(xpc_object_t *)buf);
  CFArrayRef v47 = v85;
  if (!CFArrayGetCount(v85))
  {
    unint64_t v63 = *(NSObject **)(v66 + 40);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((uint64_t *)buf, (xpc::object *)v4);
      if (v87 >= 0) {
        unint64_t v64 = buf;
      }
      else {
        unint64_t v64 = *(uint8_t **)buf;
      }
      LODWORD(keys) = 136315138;
      *(void *)((char *)&keys + 4) = v64;
      _os_log_error_impl(&dword_1C5767000, v63, OS_LOG_TYPE_ERROR, "XPC array is: %s", (uint8_t *)&keys, 0xCu);
      if (v87 < 0) {
        operator delete(*(void **)buf);
      }
      unint64_t v63 = *(NSObject **)(v66 + 40);
      if (!os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
LABEL_138:
        if (!v47) {
          return;
        }
        goto LABEL_139;
      }
    }
    else if (!os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_138;
    }
    *(_DWORD *)std::__fs::filesystem::path buf = 138412290;
    *(void *)&uint8_t buf[4] = v47;
    _os_log_error_impl(&dword_1C5767000, v63, OS_LOG_TYPE_ERROR, "Band filter array is: %@", buf, 0xCu);
    if (!v47) {
      return;
    }
LABEL_139:
    CFRelease(v47);
    return;
  }
  *(void *)&long long keys = 0;
  *(void *)std::__fs::filesystem::path buf = *MEMORY[0x1E4FB95A8];
  values[0] = v47;
  CFDictionaryRef v48 = CFDictionaryCreate(v7, (const void **)buf, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v49 = v48;
  if (v48) {
    *(void *)&long long keys = v48;
  }
  values[0] = 0;
  CFMutableDictionaryRef v50 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v51 = v50;
  if (v50) {
    values[0] = v50;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v50, (CFTypeRef)*MEMORY[0x1E4FB9640], v49);
  uint64_t v53 = *(void *)(v66 + 72);
  id v52 = *(std::__shared_weak_count **)(v66 + 80);
  *(void *)std::__fs::filesystem::path buf = v53;
  if (!v52 || (v54 = std::__shared_weak_count::lock(v52), (*(void *)&uint8_t buf[8] = v54) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::string v55 = v54;
  uint64_t v56 = *(void *)(v66 + 104);
  if (v51 && (CFTypeID v57 = CFGetTypeID(v51), v57 == CFDictionaryGetTypeID()))
  {
    v77[0] = v51;
    CFRetain(v51);
  }
  else
  {
    v77[0] = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State37handleSetNetworkConfigOfInterest_syncEN3xpc5arrayENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_138_1;
  void aBlock[4] = v66;
  aBlock[5] = v53;
  xpc_object_t v74 = v55;
  atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string v58 = _Block_copy(aBlock);
  int v59 = *(NSObject **)(v66 + 88);
  if (v59) {
    dispatch_retain(*(dispatch_object_t *)(v66 + 88));
  }
  if (v58)
  {
    uint64_t v75 = _Block_copy(v58);
    dispatch_object_t object = v59;
    if (v59) {
      goto LABEL_115;
    }
  }
  else
  {
    uint64_t v75 = 0;
    dispatch_object_t object = v59;
    if (v59) {
LABEL_115:
    }
      dispatch_retain(v59);
  }
  (*(void (**)(uint64_t, CFTypeRef *, void, void **))(*(void *)v56 + 48))(v56, v77, v65, &v75);
  if (object) {
    dispatch_release(object);
  }
  if (v75) {
    _Block_release(v75);
  }
  if (v59) {
    dispatch_release(v59);
  }
  if (v58) {
    _Block_release(v58);
  }
  if (v77[0]) {
    CFRelease(v77[0]);
  }
  uint64_t v60 = v74;
  if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    CFArrayRef v61 = *(std::__shared_weak_count **)&buf[8];
    if (!*(void *)&buf[8]) {
      goto LABEL_130;
    }
LABEL_129:
    if (atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_130;
    }
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    std::string v62 = values[0];
    if (values[0]) {
LABEL_131:
    }
      CFRelease(v62);
  }
  else
  {
    CFArrayRef v61 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_129;
    }
LABEL_130:
    std::string v62 = values[0];
    if (values[0]) {
      goto LABEL_131;
    }
  }
  if ((void)keys) {
    CFRelease((CFTypeRef)keys);
  }
  CFArrayRef v47 = v85;
  if (v85) {
    goto LABEL_139;
  }
}

void sub_1C57ACE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,int a44,__int16 a45,char a46,char a47,int a48,__int16 a49,char a50,char a51,int a52,__int16 a53,char a54,char a55,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void ___ZN4coex6Module5State37handleSetNetworkConfigOfInterest_syncEN3xpc5arrayENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    BOOL v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Failed to set: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

const void **ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void coex::Module::State::handleSetTxPowerLimit_sync(void *a1, xpc *this, uint64_t a3)
{
  uint64_t v5 = xpc::dyn_cast_or_default(this, 0);
  uint64_t v6 = 20;
  if (!a3) {
    uint64_t v6 = 18;
  }
  uint64_t v7 = (__CFDictionary *)a1[v6];
  CFMutableDictionaryRef theDict = v7;
  if (v7) {
    CFRetain(v7);
  }
  ctu::cf::update<__CFString const*,long long>(v7, (CFTypeRef)*MEMORY[0x1E4FB97D8], v5, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (v7) {
    CFRelease(v7);
  }
  CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, a3, 0, &theDict);
  if (theDict) {
    uint64_t v8 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E4FB97F8]);
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E4FB9728]);
  }
  coex::Module::State::setPolicy_sync(a1, a3);
  if (theDict) {
    CFRelease(theDict);
  }
}

void sub_1C57AD3A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C57AD3B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleSetWCI2TxPowerLimit_sync(void *a1, xpc *this, uint64_t a3)
{
  uint64_t v5 = xpc::dyn_cast_or_default(this, 0);
  uint64_t v6 = 20;
  if (!a3) {
    uint64_t v6 = 18;
  }
  uint64_t v7 = (__CFDictionary *)a1[v6];
  CFMutableDictionaryRef theDict = v7;
  if (v7) {
    CFRetain(v7);
  }
  ctu::cf::update<__CFString const*,long long>(v7, (CFTypeRef)*MEMORY[0x1E4FB9698], v5, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (v7) {
    CFRelease(v7);
  }
  CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, a3, 0, &theDict);
  if (theDict) {
    uint64_t v8 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E4FB97F8]);
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E4FB9728]);
  }
  coex::Module::State::setPolicy_sync(a1, a3);
  if (theDict) {
    CFRelease(theDict);
  }
}

void sub_1C57AD4EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C57AD500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleSetWCI2CalibrationInfo_sync(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_error_impl(&dword_1C5767000, v1, OS_LOG_TYPE_ERROR, "WCMCellularSetWCI2CalibrationInfo not supported", v2, 2u);
  }
}

void coex::Module::State::handleSetLinkQualityMode_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  object[1] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMBTSetLinkQuality_Mode");
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  uint64_t v7 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  xpc_object_t v8 = xpc_dictionary_get_value(*a2, "kWCMBTSetLinkQuality_EventType");
  object[0] = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v9 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if (!v7) {
    goto LABEL_15;
  }
  if (v9 == 1)
  {
    int v10 = 0;
    int v11 = *(_DWORD *)(a1 + 168) ^ 1;
    if (!v11) {
      return;
    }
    goto LABEL_16;
  }
  if (v9 == 2)
  {
    int v9 = 2;
    int v10 = 1;
    int v11 = *(_DWORD *)(a1 + 168) ^ 2;
    if (!v11) {
      return;
    }
    goto LABEL_16;
  }
  xpc_object_t v12 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
LABEL_15:
    int v10 = 0;
    int v9 = 0;
    LOBYTE(v11) = *(_DWORD *)(a1 + 168);
    if (!*(_DWORD *)(a1 + 168)) {
      return;
    }
    goto LABEL_16;
  }
  LODWORD(object[0]) = 67109120;
  HIDWORD(object[0]) = v9;
  _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "Unrecognized event type: %d", (uint8_t *)object, 8u);
  int v10 = 0;
  int v9 = 0;
  LOBYTE(v11) = *(_DWORD *)(a1 + 168);
  if (!*(_DWORD *)(a1 + 168)) {
    return;
  }
LABEL_16:
  object[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v13 = (const void *)*MEMORY[0x1E4FB95E8];
  coex::Module::State::getSubProperty(a1, *MEMORY[0x1E4FB95E8], a3, 1, (CFMutableDictionaryRef *)object);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  uint64_t v14 = (const void *)*MEMORY[0x1E4FB95D8];
  coex::Module::State::getSubProperty(a1, *MEMORY[0x1E4FB95D8], a3, 1, (CFMutableDictionaryRef *)&cf);
  if (v11)
  {
    ctu::cf::update<__CFString const*,BOOL>((CFMutableDictionaryRef)object[0], (CFTypeRef)*MEMORY[0x1E4FB99C0], v9 & 1);
    if (v9) {
      ctu::cf::update<__CFString const*,double>((__CFDictionary *)object[0], (CFTypeRef)*MEMORY[0x1E4FB99D0], (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1.0);
    }
  }
  if ((v11 & 2) != 0)
  {
    ctu::cf::update<__CFString const*,BOOL>((CFMutableDictionaryRef)cf, (CFTypeRef)*MEMORY[0x1E4FB99C0], v10);
    if (v10)
    {
      xpc_object_t v15 = xpc_dictionary_get_value(*a2, "kWCMCellularSetLinkQuality_BLERBlockCount");
      xpc_object_t v23 = v15;
      if (v15) {
        xpc_retain(v15);
      }
      else {
        xpc_object_t v23 = xpc_null_create();
      }
      uint64_t v16 = xpc::dyn_cast_or_default((xpc *)&v23, 0);
      CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      ctu::cf::update<__CFString const*,long long>((__CFDictionary *)cf, (CFTypeRef)*MEMORY[0x1E4FB9578], v16, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
      xpc_release(v23);
      xpc_object_t v18 = xpc_dictionary_get_value(*a2, "kWCMCellularSetLinkQuality_BLERThreshold");
      xpc_object_t v23 = v18;
      if (v18) {
        xpc_retain(v18);
      }
      else {
        xpc_object_t v23 = xpc_null_create();
      }
      uint64_t v19 = xpc::dyn_cast_or_default((xpc *)&v23, 0);
      ctu::cf::update<__CFString const*,long long>((__CFDictionary *)cf, (CFTypeRef)*MEMORY[0x1E4FB9860], v19, v17);
      xpc_release(v23);
    }
  }
  if (a3) {
    uint64_t v20 = 152;
  }
  else {
    uint64_t v20 = 136;
  }
  size_t v21 = *(void **)(a1 + v20);
  xpc_object_t v23 = v21;
  if (v21) {
    CFRetain(v21);
  }
  ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v21, v13, object[0]);
  if (v21) {
    CFRelease(v21);
  }
  __int16 v22 = *(void **)(a1 + v20);
  xpc_object_t v23 = v22;
  if (v22) {
    CFRetain(v22);
  }
  ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v22, v14, cf);
  if (v22) {
    CFRelease(v22);
  }
  coex::Module::State::setLinkQualityMode_sync(a1, v9, a3);
  if (cf) {
    CFRelease(cf);
  }
  if (object[0]) {
    CFRelease(object[0]);
  }
}

void sub_1C57AD93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, xpc_object_t a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void coex::Module::State::setLinkQualityMode_sync(uint64_t a1, int a2, uint64_t a3)
{
  CFMutableDictionaryRef v39 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v7 = Mutable;
  if (Mutable) {
    CFMutableDictionaryRef v39 = Mutable;
  }
  v38[0] = 0xAAAAAAAAAAAAAAAALL;
  v38[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = 152;
  if (!a3) {
    uint64_t v8 = 136;
  }
  int v9 = *(const void **)(a1 + v8);
  uint64_t v34 = v9;
  if (v9) {
    CFRetain(v9);
  }
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v38, (const __CFDictionary *)v9);
  if (v9) {
    CFRelease(v9);
  }
  int v10 = *(_DWORD *)(a1 + 168) ^ a2;
  if (v10)
  {
    CFMutableDictionaryRef v37 = v7;
    if (v7) {
      CFRetain(v7);
    }
    int v11 = (const void *)*MEMORY[0x1E4FB95E8];
    xpc_object_t v12 = (const void *)(*(uint64_t (**)(void *, void))v38[0])(v38, *MEMORY[0x1E4FB95E8]);
    xpc_object_t v13 = v12;
    if (v12)
    {
      CFRelease(v12);
      ctu::cf::update<__CFString const*,void const*>(v7, v11, v13);
    }
    if (!v7)
    {
      if ((v10 & 2) == 0) {
        goto LABEL_28;
      }
      CFMutableDictionaryRef v36 = 0;
LABEL_23:
      char v14 = 1;
      goto LABEL_24;
    }
    CFRelease(v7);
    if ((v10 & 2) == 0) {
      goto LABEL_28;
    }
    CFMutableDictionaryRef v36 = v7;
  }
  else
  {
    if ((v10 & 2) == 0) {
      goto LABEL_28;
    }
    CFMutableDictionaryRef v36 = v7;
    if (!v7) {
      goto LABEL_23;
    }
  }
  CFRetain(v7);
  char v14 = 0;
LABEL_24:
  xpc_object_t v15 = (const void *)*MEMORY[0x1E4FB95D8];
  uint64_t v16 = (const void *)(*(uint64_t (**)(void *, void))v38[0])(v38, *MEMORY[0x1E4FB95D8]);
  CFAllocatorRef v17 = v16;
  if (v16)
  {
    CFRelease(v16);
    ctu::cf::update<__CFString const*,void const*>(v7, v15, v17);
  }
  if ((v14 & 1) == 0) {
    CFRelease(v7);
  }
LABEL_28:
  uint64_t v19 = *(const void **)(a1 + 72);
  xpc_object_t v18 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v34 = v19;
  if (!v18 || (uint64_t v20 = std::__shared_weak_count::lock(v18), (v35 = v20) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v21 = v20;
  uint64_t v22 = *(void *)(a1 + 104);
  if (v7 && (CFTypeID v23 = CFGetTypeID(v7), v23 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v7;
    CFRetain(v7);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State23setLinkQualityMode_syncEjNS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_332;
  void aBlock[4] = a1;
  aBlock[5] = v19;
  xpc_object_t v30 = v21;
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v24 = _Block_copy(aBlock);
  xpc_object_t v25 = *(NSObject **)(a1 + 88);
  if (v25) {
    dispatch_retain(v25);
  }
  if (v24)
  {
    CFMutableDictionaryRef v31 = _Block_copy(v24);
    dispatch_object_t object = v25;
    if (!v25) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  CFMutableDictionaryRef v31 = 0;
  dispatch_object_t object = v25;
  if (v25) {
LABEL_38:
  }
    dispatch_retain(v25);
LABEL_39:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v22 + 48))(v22, &cf, a3, &v31);
  if (object) {
    dispatch_release(object);
  }
  if (v31) {
    _Block_release(v31);
  }
  if (v25) {
    dispatch_release(v25);
  }
  if (v24) {
    _Block_release(v24);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_object_t v26 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    long long v27 = v35;
    if (!v35)
    {
LABEL_53:
      MEMORY[0x1C8791160](v38);
      CFMutableDictionaryRef v28 = v39;
      if (!v39) {
        return;
      }
      goto LABEL_54;
    }
  }
  else
  {
    long long v27 = v35;
    if (!v35) {
      goto LABEL_53;
    }
  }
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  MEMORY[0x1C8791160](v38);
  CFMutableDictionaryRef v28 = v39;
  if (v39) {
LABEL_54:
  }
    CFRelease(v28);
}

void sub_1C57ADE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  va_copy(va2, va1);
  CFAllocatorRef v17 = va_arg(va2, const void *);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  if (v9) {
    dispatch_release(v9);
  }
  if (v10) {
    _Block_release(v10);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  MEMORY[0x1C8791160](v12 - 88);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v12 - 72));
  _Unwind_Resume(a1);
}

void coex::Module::State::handleSetScanFreqBandFilter_sync(uint64_t a1, xpc_object_t *a2, unsigned int a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x1C8792D30](*a2);
  uint64_t v7 = MEMORY[0x1E4F14568];
  if (v6 != MEMORY[0x1E4F14568])
  {
    uint64_t v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::__fs::filesystem::path buf = 0;
      _os_log_error_impl(&dword_1C5767000, v8, OS_LOG_TYPE_ERROR, "Invalid XPC array", buf, 2u);
    }
    return;
  }
  unsigned int v46 = a3;
  CFArrayRef theArray = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable) {
    CFArrayRef theArray = Mutable;
  }
  memset(buf, 170, 16);
  xpc_object_t v11 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    *(void *)std::__fs::filesystem::path buf = v11;
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    *(void *)std::__fs::filesystem::path buf = v11;
    if (!v11)
    {
      xpc_object_t v11 = 0;
      *(void *)std::__fs::filesystem::path buf = xpc_null_create();
      goto LABEL_10;
    }
  }
  xpc_retain(v11);
LABEL_10:
  *(void *)&uint8_t buf[8] = 0;
  xpc_release(v11);
  uint64_t v47 = a1;
  CFTypeRef v49 = (CFTypeRef)*MEMORY[0x1E4FB9658];
  CFTypeRef v48 = (CFTypeRef)*MEMORY[0x1E4FB9538];
  uint64_t v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  xpc_object_t v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  uint64_t v14 = MEMORY[0x1E4F14590];
  while (1)
  {
    xpc_object_t v15 = *a2;
    if (*a2) {
      xpc_retain(*a2);
    }
    else {
      xpc_object_t v15 = xpc_null_create();
    }
    if (MEMORY[0x1C8792D30](*a2) == v7)
    {
      size_t count = xpc_array_get_count(*a2);
      if (!v15)
      {
LABEL_20:
        xpc_object_t v17 = xpc_null_create();
        goto LABEL_21;
      }
    }
    else
    {
      size_t count = 0;
      if (!v15) {
        goto LABEL_20;
      }
    }
    xpc_retain(v15);
    xpc_object_t v17 = v15;
LABEL_21:
    xpc_release(v15);
    xpc_object_t v19 = *(xpc_object_t *)buf;
    uint64_t v18 = *(void *)&buf[8];
    xpc_release(v17);
    if (v18 == count && v19 == v17) {
      break;
    }
    CFTypeRef v56 = 0;
    CFMutableDictionaryRef v20 = CFDictionaryCreateMutable(v9, 0, v12, v13);
    size_t v21 = v20;
    if (v20) {
      CFTypeRef v56 = v20;
    }
    xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v60 = buf;
    *((void *)&v60 + 1) = *(void *)&buf[8];
    xpc::array::object_proxy::operator xpc::dict((uint64_t)&v60, &xdict);
    if (MEMORY[0x1C8792D30](xdict) == v14)
    {
      xpc_object_t value = xpc_dictionary_get_value(xdict, "kWCMCellularScanFreqBandFilter_CenterFreq");
      *(void *)&long long v60 = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        *(void *)&long long v60 = xpc_null_create();
      }
      int v23 = xpc::dyn_cast_or_default((xpc *)&v60, 0);
      xpc_release((xpc_object_t)v60);
      xpc_object_t v24 = xpc_dictionary_get_value(xdict, "kWCMCellularScanFreqBandFilter_Bandwidth");
      *(void *)&long long v60 = v24;
      if (v24) {
        xpc_retain(v24);
      }
      else {
        *(void *)&long long v60 = xpc_null_create();
      }
      int v25 = xpc::dyn_cast_or_default((xpc *)&v60, 0);
      xpc_release((xpc_object_t)v60);
      ctu::cf::insert<__CFString const*,long long>(v21, v49, v23, v9);
      ctu::cf::insert<__CFString const*,long long>(v21, v48, v25, v9);
    }
    xpc_object_t v26 = theArray;
    *(void *)&long long v60 = v21;
    if (v21)
    {
      CFRetain(v21);
      CFArrayAppendValue(v26, v21);
      CFRelease(v21);
    }
    xpc_release(xdict);
    if (v21) {
      CFRelease(v21);
    }
    xpc_object_t v27 = *(xpc_object_t *)buf;
    if (*(void *)buf) {
      xpc_retain(*(xpc_object_t *)buf);
    }
    else {
      xpc_object_t v27 = xpc_null_create();
    }
    ++*(void *)&buf[8];
    xpc_release(v27);
  }
  xpc_release(*(xpc_object_t *)buf);
  CFArrayRef v28 = theArray;
  if (!CFArrayGetCount(theArray))
  {
    CFAllocatorRef v44 = *(NSObject **)(v47 + 40);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((uint64_t *)buf, (xpc::object *)a2);
      if (v59 >= 0) {
        std::string::size_type v45 = buf;
      }
      else {
        std::string::size_type v45 = *(uint8_t **)buf;
      }
      LODWORD(v60) = 136315138;
      *(void *)((char *)&v60 + 4) = v45;
      _os_log_error_impl(&dword_1C5767000, v44, OS_LOG_TYPE_ERROR, "XPC array is: %s", (uint8_t *)&v60, 0xCu);
      if (v59 < 0) {
        operator delete(*(void **)buf);
      }
      CFAllocatorRef v44 = *(NSObject **)(v47 + 40);
      if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
LABEL_78:
        if (!v28) {
          return;
        }
        goto LABEL_79;
      }
    }
    else if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_78;
    }
    *(_DWORD *)std::__fs::filesystem::path buf = 138412290;
    *(void *)&uint8_t buf[4] = v28;
    _os_log_error_impl(&dword_1C5767000, v44, OS_LOG_TYPE_ERROR, "Scan frequency band filter array is: %@", buf, 0xCu);
    if (!v28) {
      return;
    }
LABEL_79:
    CFRelease(v28);
    return;
  }
  *(void *)&long long v60 = 0;
  uint64_t v29 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  xpc_object_t v30 = v29;
  if (v29) {
    *(void *)&long long v60 = v29;
  }
  ctu::cf::insert<__CFString const*,__CFArray *>(v29, (CFTypeRef)*MEMORY[0x1E4FB96D8], v28);
  CFTypeRef v56 = 0;
  CFMutableDictionaryRef v31 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v32 = v31;
  if (v31) {
    CFTypeRef v56 = v31;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v31, (CFTypeRef)*MEMORY[0x1E4FB97D0], v30);
  uint64_t v34 = *(void *)(v47 + 72);
  CFTypeID v33 = *(std::__shared_weak_count **)(v47 + 80);
  *(void *)std::__fs::filesystem::path buf = v34;
  if (!v33 || (v35 = std::__shared_weak_count::lock(v33), (*(void *)&uint8_t buf[8] = v35) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFMutableDictionaryRef v36 = v35;
  uint64_t v37 = *(void *)(v47 + 104);
  if (v32 && (CFTypeID v38 = CFGetTypeID(v32), v38 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v32;
    CFRetain(v32);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State32handleSetScanFreqBandFilter_syncEN3xpc5arrayENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_179;
  void aBlock[4] = v47;
  aBlock[5] = v34;
  CFMutableDictionaryRef v51 = v36;
  atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  CFMutableDictionaryRef v39 = _Block_copy(aBlock);
  CFDictionaryRef v40 = *(NSObject **)(v47 + 88);
  if (v40) {
    dispatch_retain(*(dispatch_object_t *)(v47 + 88));
  }
  if (v39)
  {
    id v52 = _Block_copy(v39);
    dispatch_object_t object = v40;
    if (v40) {
      goto LABEL_54;
    }
  }
  else
  {
    id v52 = 0;
    dispatch_object_t object = v40;
    if (v40) {
LABEL_54:
    }
      dispatch_retain(v40);
  }
  (*(void (**)(uint64_t, CFTypeRef *, void, void **))(*(void *)v37 + 48))(v37, &cf, v46, &v52);
  if (object) {
    dispatch_release(object);
  }
  if (v52) {
    _Block_release(v52);
  }
  if (v40) {
    dispatch_release(v40);
  }
  if (v39) {
    _Block_release(v39);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFMutableDictionaryRef v41 = v51;
  if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  uint64_t v42 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    CFTypeRef v43 = v56;
    if (v56) {
LABEL_71:
    }
      CFRelease(v43);
  }
  else
  {
    CFTypeRef v43 = v56;
    if (v56) {
      goto LABEL_71;
    }
  }
  if ((void)v60) {
    CFRelease((CFTypeRef)v60);
  }
  CFArrayRef v28 = theArray;
  if (theArray) {
    goto LABEL_79;
  }
}

void sub_1C57AE6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,xpc_object_t object,char a25,int a26,__int16 a27,char a28,char a29,xpc_object_t a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State32handleSetScanFreqBandFilter_syncEN3xpc5arrayENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    BOOL v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Failed to set: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetWiFiStatus_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, "WCMCellularSetWiFiStatus_CenterFrequency");
  *(void *)&long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v8 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v9 = xpc_dictionary_get_value(*a2, "WCMCellularSetWiFiStatus_ChannelBandwidth");
  *(void *)&long long buf = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v10 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v11 = xpc_dictionary_get_value(*a2, "WCMCellularSetWiFiStatus_TxPower");
  *(void *)&long long buf = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v12 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  CFTypeRef v36 = 0;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  xpc_object_t v15 = Mutable;
  if (Mutable) {
    CFTypeRef v36 = Mutable;
  }
  ctu::cf::insert<__CFString const*,int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9658], v8, v13);
  ctu::cf::insert<__CFString const*,int>(v15, (CFTypeRef)*MEMORY[0x1E4FB9538], v10, v13);
  ctu::cf::insert<__CFString const*,int>(v15, (CFTypeRef)*MEMORY[0x1E4FB9500], v12, v13);
  CFTypeRef v35 = 0;
  CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v17 = v16;
  if (v16) {
    CFTypeRef v35 = v16;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v16, (CFTypeRef)*MEMORY[0x1E4FB9620], v15);
  uint64_t v18 = a1[5];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v17;
    _os_log_impl(&dword_1C5767000, v18, OS_LOG_TYPE_DEFAULT, "#I Setting WiFi status with: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v20 = a1[9];
  xpc_object_t v19 = (std::__shared_weak_count *)a1[10];
  *(void *)&long long buf = v20;
  if (!v19 || (size_t v21 = std::__shared_weak_count::lock(v19), (*((void *)&buf + 1) = v21) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v22 = v21;
  uint64_t v23 = a1[13];
  if (v17 && (CFTypeID v24 = CFGetTypeID(v17), v24 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v17;
    CFRetain(v17);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 1174405120;
  v30[2] = ___ZN4coex6Module5State24handleSetWiFiStatus_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v30[3] = &__block_descriptor_tmp_185;
  v30[4] = a1;
  v30[5] = v20;
  CFMutableDictionaryRef v31 = v22;
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  int v25 = _Block_copy(v30);
  xpc_object_t v26 = a1[11];
  if (v26) {
    dispatch_retain(v26);
  }
  if (v25)
  {
    long long aBlock = _Block_copy(v25);
    dispatch_object_t object = v26;
    if (!v26) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  long long aBlock = 0;
  dispatch_object_t object = v26;
  if (v26) {
LABEL_29:
  }
    dispatch_retain(v26);
LABEL_30:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v23 + 48))(v23, &cf, a3, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v26) {
    dispatch_release(v26);
  }
  if (v25) {
    _Block_release(v25);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_object_t v27 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  CFArrayRef v28 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v29 = v35;
    if (!v35) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  CFTypeRef v29 = v35;
  if (v35) {
LABEL_46:
  }
    CFRelease(v29);
LABEL_47:
  if (v36) {
    CFRelease(v36);
  }
}

void sub_1C57AEDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C57AEEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State24handleSetWiFiStatus_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    BOOL v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set wifi status: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetTimeShareConfigReq_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetTimeShareConfig_Enable"))
  {
    uint64_t v71 = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    xpc_object_t v9 = Mutable;
    if (Mutable) {
      uint64_t v71 = Mutable;
    }
    xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularSetTimeShareConfig_Enable");
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    int v12 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9808], v12);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v13 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_CoexTech");
    *(void *)long long buf = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned int v14 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9840], v14, v7);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v15 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_CallType");
    *(void *)long long buf = v15;
    if (v15) {
      xpc_retain(v15);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned int v16 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9838], v16, v7);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v17 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_LongDrxCycle");
    *(void *)long long buf = v17;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned __int16 v18 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned short>(v9, (CFTypeRef)*MEMORY[0x1E4FB9920], v18, v7);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v19 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_ShortDrxCycle");
    *(void *)long long buf = v19;
    if (v19) {
      xpc_retain(v19);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned __int16 v20 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned short>(v9, (CFTypeRef)*MEMORY[0x1E4FB9940], v20, v7);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v21 = xpc_dictionary_get_value(*a2, "kWCMCellularTImeShareConfig_SleepWakeDurScale");
    *(void *)long long buf = v21;
    if (v21) {
      xpc_retain(v21);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned __int8 v22 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E4FB9990], v22, v7);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v70 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(void *)long long buf = a2;
    *(void *)&uint8_t buf[8] = "kWCMCellularTImeShareConfig_BandInformationSet";
    xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v70);
    uint64_t v23 = MEMORY[0x1C8792D30](v70);
    uint64_t v24 = MEMORY[0x1E4F14568];
    if (v23 == MEMORY[0x1E4F14568])
    {
      CFMutableArrayRef v69 = 0;
      CFMutableArrayRef v25 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
      if (v25) {
        CFMutableArrayRef v69 = v25;
      }
      memset(buf, 170, sizeof(buf));
      xpc_object_t v26 = v70;
      if (v70)
      {
        xpc_retain(v70);
        *(void *)long long buf = v26;
      }
      else
      {
        xpc_object_t v26 = xpc_null_create();
        *(void *)long long buf = v26;
        if (!v26)
        {
          xpc_object_t v26 = 0;
          *(void *)long long buf = xpc_null_create();
          goto LABEL_35;
        }
      }
      xpc_retain(v26);
LABEL_35:
      *(void *)&uint8_t buf[8] = 0;
      xpc_release(v26);
      uint64_t v57 = a1;
      unsigned int v58 = a3;
      CFTypeRef v59 = (CFTypeRef)*MEMORY[0x1E4FB9538];
      CFTypeRef v60 = (CFTypeRef)*MEMORY[0x1E4FB9658];
      xpc_object_t v27 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      CFArrayRef v28 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      while (1)
      {
        xpc_object_t v29 = v70;
        if (v70) {
          xpc_retain(v70);
        }
        else {
          xpc_object_t v29 = xpc_null_create();
        }
        if (MEMORY[0x1C8792D30](v70) == v24)
        {
          size_t count = xpc_array_get_count(v70);
          if (!v29)
          {
LABEL_45:
            xpc_object_t v31 = xpc_null_create();
            goto LABEL_46;
          }
        }
        else
        {
          size_t count = 0;
          if (!v29) {
            goto LABEL_45;
          }
        }
        xpc_retain(v29);
        xpc_object_t v31 = v29;
LABEL_46:
        xpc_release(v29);
        xpc_object_t v33 = *(xpc_object_t *)buf;
        uint64_t v32 = *(void *)&buf[8];
        xpc_release(v31);
        if (v32 == count && v33 == v31)
        {
          xpc_release(*(xpc_object_t *)buf);
          CFMutableArrayRef v42 = v69;
          xpc_object_t v9 = v71;
          ctu::cf::insert<__CFString const*,__CFArray *>(v71, (CFTypeRef)*MEMORY[0x1E4FB99A8], v69);
          a3 = v58;
          a1 = v57;
          if (v42) {
            CFRelease(v42);
          }
          break;
        }
        CFMutableDictionaryRef v68 = 0;
        CFMutableDictionaryRef v34 = CFDictionaryCreateMutable(v7, 0, v27, v28);
        CFTypeRef v35 = v34;
        if (v34) {
          CFMutableDictionaryRef v68 = v34;
        }
        object[0] = buf;
        object[1] = *(xpc_object_t *)&buf[8];
        xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        xpc::array::object_proxy::operator xpc::dict((uint64_t)object, &xdict);
        if (MEMORY[0x1C8792D30](xdict) == MEMORY[0x1E4F14590])
        {
          xpc_object_t v36 = xpc_dictionary_get_value(xdict, "kWCMCellularTImeShareConfig_BandSet_Frequency");
          object[0] = v36;
          if (v36) {
            xpc_retain(v36);
          }
          else {
            object[0] = xpc_null_create();
          }
          int v37 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          xpc_object_t v38 = xpc_dictionary_get_value(xdict, "kWCMCellularTImeShareConfig_BandSet_BW");
          object[0] = v38;
          if (v38) {
            xpc_retain(v38);
          }
          else {
            object[0] = xpc_null_create();
          }
          int v39 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          ctu::cf::insert<__CFString const*,long long>(v35, v60, v37, v7);
          ctu::cf::insert<__CFString const*,long long>(v35, v59, v39, v7);
        }
        CFDictionaryRef v40 = v69;
        object[0] = v35;
        if (v35)
        {
          CFRetain(v35);
          CFArrayAppendValue(v40, v35);
          CFRelease(v35);
        }
        xpc_release(xdict);
        if (v35) {
          CFRelease(v35);
        }
        xpc_object_t v41 = *(xpc_object_t *)buf;
        if (*(void *)buf) {
          xpc_retain(*(xpc_object_t *)buf);
        }
        else {
          xpc_object_t v41 = xpc_null_create();
        }
        ++*(void *)&buf[8];
        xpc_release(v41);
      }
    }
    object[0] = 0;
    CFMutableDictionaryRef v43 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v44 = v43;
    if (v43) {
      object[0] = v43;
    }
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v43, (CFTypeRef)*MEMORY[0x1E4FB96E0], v9);
    std::string::size_type v45 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v44;
      _os_log_impl(&dword_1C5767000, v45, OS_LOG_TYPE_DEFAULT, "#I Setting Time share config with: %@", buf, 0xCu);
    }
    uint64_t v47 = *(void *)(a1 + 72);
    unsigned int v46 = *(std::__shared_weak_count **)(a1 + 80);
    *(void *)long long buf = v47;
    if (!v46 || (v48 = std::__shared_weak_count::lock(v46), (*(void *)&uint8_t buf[8] = v48) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    CFTypeRef v49 = v48;
    uint64_t v50 = *(void *)(a1 + 104);
    if (v44 && (CFTypeID v51 = CFGetTypeID(v44), v51 == CFDictionaryGetTypeID()))
    {
      CFTypeRef cf = v44;
      CFRetain(v44);
    }
    else
    {
      CFTypeRef cf = 0;
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State32handleSetTimeShareConfigReq_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_197;
    void aBlock[4] = a1;
    aBlock[5] = v47;
    std::string v62 = v49;
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
    id v52 = _Block_copy(aBlock);
    uint64_t v53 = *(NSObject **)(a1 + 88);
    if (v53) {
      dispatch_retain(*(dispatch_object_t *)(a1 + 88));
    }
    if (v52)
    {
      unint64_t v63 = _Block_copy(v52);
      dispatch_object_t v64 = v53;
      if (!v53) {
        goto LABEL_81;
      }
    }
    else
    {
      unint64_t v63 = 0;
      dispatch_object_t v64 = v53;
      if (!v53)
      {
LABEL_81:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v50 + 48))(v50, &cf, a3, &v63);
        if (v64) {
          dispatch_release(v64);
        }
        if (v63) {
          _Block_release(v63);
        }
        if (v53) {
          dispatch_release(v53);
        }
        if (v52) {
          _Block_release(v52);
        }
        if (cf) {
          CFRelease(cf);
        }
        uint64_t v54 = v62;
        if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
        std::string v55 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
          xpc_object_t v56 = object[0];
          if (!object[0])
          {
LABEL_98:
            xpc_release(v70);
            if (v71) {
              CFRelease(v71);
            }
            return;
          }
        }
        else
        {
          xpc_object_t v56 = object[0];
          if (!object[0]) {
            goto LABEL_98;
          }
        }
        CFRelease(v56);
        goto LABEL_98;
      }
    }
    dispatch_retain(v53);
    goto LABEL_81;
  }
  xpc_object_t v11 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#E Missing Time share config", buf, 2u);
  }
}

void sub_1C57AF8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,xpc_object_t a24,uint64_t a25,xpc_object_t object,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State32handleSetTimeShareConfigReq_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    BOOL v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Time share config: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetWCI2TxAntMap_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2TxAntMap_Enable"))
  {
    uint64_t v66 = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    xpc_object_t v9 = Mutable;
    if (Mutable) {
      uint64_t v66 = Mutable;
    }
    xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2TxAntMap_Enable");
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    int v12 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9730], v12);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v13 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2TxAntMap_DefaultIdx");
    *(void *)long long buf = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned __int8 v14 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E4FB9818], v14, v7);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v65 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(void *)long long buf = a2;
    *(void *)&uint8_t buf[8] = "kWCMCellularSetWCI2TxAntMap_InformationSet";
    xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v65);
    uint64_t v15 = MEMORY[0x1C8792D30](v65);
    uint64_t v16 = MEMORY[0x1E4F14568];
    if (v15 == MEMORY[0x1E4F14568])
    {
      CFMutableArrayRef v64 = 0;
      CFMutableArrayRef v17 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
      if (v17) {
        CFMutableArrayRef v64 = v17;
      }
      memset(buf, 170, sizeof(buf));
      xpc_object_t v18 = v65;
      if (v65)
      {
        xpc_retain(v65);
        *(void *)long long buf = v18;
      }
      else
      {
        xpc_object_t v18 = xpc_null_create();
        *(void *)long long buf = v18;
        if (!v18)
        {
          xpc_object_t v18 = 0;
          *(void *)long long buf = xpc_null_create();
          goto LABEL_23;
        }
      }
      xpc_retain(v18);
LABEL_23:
      *(void *)&uint8_t buf[8] = 0;
      xpc_release(v18);
      uint64_t v52 = a1;
      unsigned int v53 = a3;
      CFTypeRef v54 = (CFTypeRef)*MEMORY[0x1E4FB98F8];
      CFTypeRef v55 = (CFTypeRef)*MEMORY[0x1E4FB98C0];
      xpc_object_t v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      unsigned __int16 v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      while (1)
      {
        xpc_object_t v21 = v65;
        if (v65) {
          xpc_retain(v65);
        }
        else {
          xpc_object_t v21 = xpc_null_create();
        }
        if (MEMORY[0x1C8792D30](v65) == v16)
        {
          size_t count = xpc_array_get_count(v65);
          if (!v21)
          {
LABEL_33:
            xpc_object_t v23 = xpc_null_create();
            goto LABEL_34;
          }
        }
        else
        {
          size_t count = 0;
          if (!v21) {
            goto LABEL_33;
          }
        }
        xpc_retain(v21);
        xpc_object_t v23 = v21;
LABEL_34:
        xpc_release(v21);
        xpc_object_t v25 = *(xpc_object_t *)buf;
        uint64_t v24 = *(void *)&buf[8];
        xpc_release(v23);
        if (v24 == count && v25 == v23)
        {
          xpc_release(*(xpc_object_t *)buf);
          CFMutableArrayRef v34 = v64;
          xpc_object_t v9 = v66;
          ctu::cf::insert<__CFString const*,__CFArray *>(v66, (CFTypeRef)*MEMORY[0x1E4FB9900], v64);
          a3 = v53;
          a1 = v52;
          if (v34) {
            CFRelease(v34);
          }
          break;
        }
        CFMutableDictionaryRef v63 = 0;
        CFMutableDictionaryRef v26 = CFDictionaryCreateMutable(v7, 0, v19, v20);
        xpc_object_t v27 = v26;
        if (v26) {
          CFMutableDictionaryRef v63 = v26;
        }
        object[0] = buf;
        object[1] = *(xpc_object_t *)&buf[8];
        xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        xpc::array::object_proxy::operator xpc::dict((uint64_t)object, &xdict);
        if (MEMORY[0x1C8792D30](xdict) == MEMORY[0x1E4F14590])
        {
          xpc_object_t v28 = xpc_dictionary_get_value(xdict, "kWCMCellularSetWCI2TxAntMap_Infoet_AntIdx");
          object[0] = v28;
          if (v28) {
            xpc_retain(v28);
          }
          else {
            object[0] = xpc_null_create();
          }
          unsigned __int8 v29 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          xpc_object_t v30 = xpc_dictionary_get_value(xdict, "kWCMCellularSetWCI2TxAntMap_InfoSet_WCI2Idx");
          object[0] = v30;
          if (v30) {
            xpc_retain(v30);
          }
          else {
            object[0] = xpc_null_create();
          }
          unsigned __int8 v31 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          ctu::cf::insert<__CFString const*,unsigned char>(v27, v55, v29, v7);
          ctu::cf::insert<__CFString const*,unsigned char>(v27, v54, v31, v7);
        }
        uint64_t v32 = v64;
        object[0] = v27;
        if (v27)
        {
          CFRetain(v27);
          CFArrayAppendValue(v32, v27);
          CFRelease(v27);
        }
        xpc_release(xdict);
        if (v27) {
          CFRelease(v27);
        }
        xpc_object_t v33 = *(xpc_object_t *)buf;
        if (*(void *)buf) {
          xpc_retain(*(xpc_object_t *)buf);
        }
        else {
          xpc_object_t v33 = xpc_null_create();
        }
        ++*(void *)&buf[8];
        xpc_release(v33);
      }
    }
    object[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v35 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Type7FRTwoTxEnable");
    object[0] = v35;
    if (v35)
    {
      xpc_retain(v35);
      xpc_object_t v36 = object[0];
    }
    else
    {
      xpc_object_t v36 = xpc_null_create();
      object[0] = v36;
    }
    if (MEMORY[0x1C8792D30](v36) != MEMORY[0x1E4F145D8])
    {
      int v37 = xpc::dyn_cast_or_default((xpc *)object, 0);
      ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9930], v37);
    }
    CFMutableArrayRef v64 = 0;
    CFMutableDictionaryRef v38 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v39 = v38;
    if (v38) {
      CFMutableArrayRef v64 = v38;
    }
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v38, (CFTypeRef)*MEMORY[0x1E4FB9678], v9);
    CFDictionaryRef v40 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v39;
      _os_log_impl(&dword_1C5767000, v40, OS_LOG_TYPE_DEFAULT, "#I Setting Tx antenna map with: %@", buf, 0xCu);
    }
    uint64_t v42 = *(void *)(a1 + 72);
    xpc_object_t v41 = *(std::__shared_weak_count **)(a1 + 80);
    *(void *)long long buf = v42;
    if (!v41 || (v43 = std::__shared_weak_count::lock(v41), (*(void *)&uint8_t buf[8] = v43) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    CFMutableDictionaryRef v44 = v43;
    uint64_t v45 = *(void *)(a1 + 104);
    if (v39 && (CFTypeID v46 = CFGetTypeID(v39), v46 == CFDictionaryGetTypeID()))
    {
      CFTypeRef cf = v39;
      CFRetain(v39);
    }
    else
    {
      CFTypeRef cf = 0;
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State26handleSetWCI2TxAntMap_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_206;
    void aBlock[4] = a1;
    aBlock[5] = v42;
    uint64_t v57 = v44;
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v47 = _Block_copy(aBlock);
    CFTypeRef v48 = *(NSObject **)(a1 + 88);
    if (v48) {
      dispatch_retain(*(dispatch_object_t *)(a1 + 88));
    }
    if (v47)
    {
      unsigned int v58 = _Block_copy(v47);
      dispatch_object_t v59 = v48;
      if (!v48) {
        goto LABEL_74;
      }
    }
    else
    {
      unsigned int v58 = 0;
      dispatch_object_t v59 = v48;
      if (!v48)
      {
LABEL_74:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v45 + 48))(v45, &cf, a3, &v58);
        if (v59) {
          dispatch_release(v59);
        }
        if (v58) {
          _Block_release(v58);
        }
        if (v48) {
          dispatch_release(v48);
        }
        if (v47) {
          _Block_release(v47);
        }
        if (cf) {
          CFRelease(cf);
        }
        CFTypeRef v49 = v57;
        if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
        uint64_t v50 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
          CFMutableArrayRef v51 = v64;
          if (!v64)
          {
LABEL_91:
            xpc_release(object[0]);
            xpc_release(v65);
            if (v66) {
              CFRelease(v66);
            }
            return;
          }
        }
        else
        {
          CFMutableArrayRef v51 = v64;
          if (!v64) {
            goto LABEL_91;
          }
        }
        CFRelease(v51);
        goto LABEL_91;
      }
    }
    dispatch_retain(v48);
    goto LABEL_74;
  }
  xpc_object_t v11 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#E Missing Tx antenna map", buf, 2u);
  }
}

void sub_1C57B044C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,xpc_object_t object,uint64_t a25,xpc_object_t a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State26handleSetWCI2TxAntMap_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    BOOL v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Tx antenna map: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetAntBlocking_sync(void *a1, void *a2, uint64_t a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x1C8792D30](*a2);
  uint64_t v7 = MEMORY[0x1E4F14590];
  if (v6 != MEMORY[0x1E4F14590])
  {
    int v8 = a1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  uint64_t v72 = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  xpc_object_t v11 = Mutable;
  if (Mutable) {
    uint64_t v72 = Mutable;
  }
  xpc_object_t v71 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(void *)long long buf = a2;
  *(void *)&uint8_t buf[8] = "kWCMCellularSetAntBlocking_BandInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v71);
  uint64_t v12 = MEMORY[0x1C8792D30](v71);
  uint64_t v13 = MEMORY[0x1E4F14568];
  if (v12 == MEMORY[0x1E4F14568])
  {
    CFMutableArrayRef v70 = 0;
    CFMutableArrayRef v14 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    if (v14) {
      CFMutableArrayRef v70 = v14;
    }
    memset(buf, 170, sizeof(buf));
    xpc_object_t v15 = v71;
    if (v71)
    {
      xpc_retain(v71);
      *(void *)long long buf = v15;
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      *(void *)long long buf = v15;
      if (!v15)
      {
        xpc_object_t v15 = 0;
        *(void *)long long buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v15);
LABEL_13:
    *(void *)&uint8_t buf[8] = 0;
    xpc_release(v15);
    unsigned int v55 = a3;
    CFTypeRef v57 = (CFTypeRef)*MEMORY[0x1E4FB96A0];
    CFTypeRef v56 = (CFTypeRef)*MEMORY[0x1E4FB96F8];
    while (1)
    {
      xpc_object_t v16 = v71;
      if (v71) {
        xpc_retain(v71);
      }
      else {
        xpc_object_t v16 = xpc_null_create();
      }
      if (MEMORY[0x1C8792D30](v71) == v13)
      {
        size_t count = xpc_array_get_count(v71);
        if (!v16)
        {
LABEL_23:
          xpc_object_t v18 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        size_t count = 0;
        if (!v16) {
          goto LABEL_23;
        }
      }
      xpc_retain(v16);
      xpc_object_t v18 = v16;
LABEL_24:
      xpc_release(v16);
      xpc_object_t v19 = *(xpc_object_t *)buf;
      uint64_t v20 = *(void *)&buf[8];
      xpc_release(v18);
      if (v20 == count && v19 == v18)
      {
        xpc_release(*(xpc_object_t *)buf);
        CFMutableArrayRef v40 = v70;
        xpc_object_t v11 = v72;
        ctu::cf::insert<__CFString const*,__CFArray *>(v72, (CFTypeRef)*MEMORY[0x1E4FB9888], v70);
        a3 = v55;
        if (v40) {
          CFRelease(v40);
        }
        break;
      }
      CFTypeRef cf = 0;
      CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      unsigned __int8 v22 = v21;
      if (v21) {
        CFTypeRef cf = v21;
      }
      xpc_object_t object = buf;
      CFMutableArrayRef v67 = *(const char **)&buf[8];
      xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&object, &xdict);
      if (MEMORY[0x1C8792D30](xdict) != v7) {
        goto LABEL_62;
      }
      xpc_object_t value = xpc_dictionary_get_value(xdict, "kWCMCellularSetAntBlocking_BandInfoSet_AntNum");
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      unsigned __int8 v24 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      ctu::cf::insert<__CFString const*,unsigned char>(v22, v57, v24, v9);
      xpc_object_t xarray = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t object = &xdict;
      CFMutableArrayRef v67 = "kWCMCellularSetAntBlocking_BandInfoSet_BandList";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&object, &xarray);
      if (MEMORY[0x1C8792D30](xarray) != v13) {
        goto LABEL_61;
      }
      CFTypeRef v64 = 0;
      CFMutableArrayRef v25 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
      if (v25) {
        CFTypeRef v64 = v25;
      }
      xpc_object_t v26 = xarray;
      if (xarray)
      {
        xpc_retain(xarray);
      }
      else
      {
        xpc_object_t v26 = xpc_null_create();
        if (!v26)
        {
          xpc_object_t v26 = xpc_null_create();
          xpc_object_t v27 = 0;
          goto LABEL_39;
        }
      }
      xpc_retain(v26);
      xpc_object_t v27 = v26;
LABEL_39:
      xpc_release(v27);
      for (size_t i = 0; ; ++i)
      {
        xpc_object_t v30 = xarray;
        if (xarray) {
          xpc_retain(xarray);
        }
        else {
          xpc_object_t v30 = xpc_null_create();
        }
        if (MEMORY[0x1C8792D30](xarray) == v13)
        {
          size_t v31 = xpc_array_get_count(xarray);
          if (!v30)
          {
LABEL_49:
            xpc_object_t v32 = xpc_null_create();
            goto LABEL_50;
          }
        }
        else
        {
          size_t v31 = 0;
          if (!v30) {
            goto LABEL_49;
          }
        }
        xpc_retain(v30);
        xpc_object_t v32 = v30;
LABEL_50:
        xpc_release(v30);
        xpc_release(v32);
        if (i == v31 && v26 == v32) {
          break;
        }
        xpc_object_t v33 = xpc_array_get_value(v26, i);
        xpc_object_t v63 = v33;
        if (v33) {
          xpc_retain(v33);
        }
        else {
          xpc_object_t v63 = xpc_null_create();
        }
        int v34 = xpc::dyn_cast_or_default((xpc *)&v63, 0);
        xpc_object_t v35 = (__CFArray *)v64;
        int valuePtr = v34;
        CFNumberRef v36 = CFNumberCreate(v9, kCFNumberIntType, &valuePtr);
        xpc_object_t object = v36;
        if (v36)
        {
          CFArrayAppendValue(v35, v36);
          CFRelease(v36);
        }
        xpc_release(v63);
        if (v26)
        {
          xpc_retain(v26);
          xpc_object_t v29 = v26;
        }
        else
        {
          xpc_object_t v29 = xpc_null_create();
        }
        xpc_release(v29);
      }
      xpc_release(v26);
      CFTypeRef v37 = v64;
      unsigned __int8 v22 = (__CFDictionary *)cf;
      ctu::cf::insert<__CFString const*,__CFArray *>((__CFDictionary *)cf, v56, v64);
      if (v37) {
        CFRelease(v37);
      }
LABEL_61:
      xpc_release(xarray);
LABEL_62:
      CFMutableDictionaryRef v38 = v70;
      xpc_object_t object = v22;
      if (v22)
      {
        CFRetain(v22);
        CFArrayAppendValue(v38, v22);
        CFRelease(v22);
      }
      xpc_release(xdict);
      if (cf) {
        CFRelease(cf);
      }
      xpc_object_t v39 = *(xpc_object_t *)buf;
      if (*(void *)buf) {
        xpc_retain(*(xpc_object_t *)buf);
      }
      else {
        xpc_object_t v39 = xpc_null_create();
      }
      ++*(void *)&buf[8];
      xpc_release(v39);
    }
  }
  xpc_object_t object = 0;
  CFMutableDictionaryRef v41 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v42 = v41;
  if (v41) {
    xpc_object_t object = v41;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v41, (CFTypeRef)*MEMORY[0x1E4FB9638], v11);
  CFMutableDictionaryRef v43 = a1[5];
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v42;
    _os_log_impl(&dword_1C5767000, v43, OS_LOG_TYPE_DEFAULT, "#I Setting Ant blocking with: %@", buf, 0xCu);
  }
  uint64_t v45 = a1[9];
  CFMutableDictionaryRef v44 = (std::__shared_weak_count *)a1[10];
  *(void *)long long buf = v45;
  if (!v44 || (v46 = std::__shared_weak_count::lock(v44), (*(void *)&uint8_t buf[8] = v46) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v47 = v46;
  uint64_t v48 = a1[13];
  if (v42 && (CFTypeID v49 = CFGetTypeID(v42), v49 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v62 = v42;
    CFRetain(v42);
  }
  else
  {
    CFTypeRef v62 = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State25handleSetAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_212;
  void aBlock[4] = a1;
  aBlock[5] = v45;
  dispatch_object_t v59 = v47;
  atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v50 = _Block_copy(aBlock);
  CFMutableArrayRef v51 = a1[11];
  if (v51) {
    dispatch_retain(v51);
  }
  if (v50)
  {
    CFTypeRef v60 = _Block_copy(v50);
    dispatch_object_t v61 = v51;
    if (!v51) {
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  CFTypeRef v60 = 0;
  dispatch_object_t v61 = v51;
  if (v51) {
LABEL_85:
  }
    dispatch_retain(v51);
LABEL_86:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v48 + 48))(v48, &v62, a3, &v60);
  if (v61) {
    dispatch_release(v61);
  }
  if (v60) {
    _Block_release(v60);
  }
  if (v51) {
    dispatch_release(v51);
  }
  if (v50) {
    _Block_release(v50);
  }
  if (v62) {
    CFRelease(v62);
  }
  uint64_t v52 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
  unsigned int v53 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v54 = object;
    if (!object) {
      goto LABEL_103;
    }
    goto LABEL_102;
  }
  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
  std::__shared_weak_count::__release_weak(v53);
  xpc_object_t v54 = object;
  if (object) {
LABEL_102:
  }
    CFRelease(v54);
LABEL_103:
  xpc_release(v71);
  if (v72) {
    CFRelease(v72);
  }
}

void sub_1C57B0F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,xpc_object_t a22,char a23,xpc_object_t object,xpc_object_t a25,uint64_t a26,xpc_object_t a27,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State25handleSetAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    BOOL v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Ant blocking: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetClientAntBlocking_sync(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x1C8792D30](*a2);
  uint64_t v7 = MEMORY[0x1E4F14590];
  if (v6 != MEMORY[0x1E4F14590])
  {
    int v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  unsigned int v76 = a3;
  uint64_t v102 = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  xpc_object_t v11 = Mutable;
  if (Mutable) {
    uint64_t v102 = Mutable;
  }
  xpc_object_t v101 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(void *)long long buf = a2;
  *(void *)&uint8_t buf[8] = "kWCMCellularSetAntBlocking_ClientInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v101);
  uint64_t v77 = a1;
  uint64_t v12 = MEMORY[0x1C8792D30](v101);
  uint64_t v13 = MEMORY[0x1E4F14568];
  if (v12 == MEMORY[0x1E4F14568])
  {
    CFMutableArrayRef v100 = 0;
    CFMutableArrayRef v14 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    if (v14) {
      CFMutableArrayRef v100 = v14;
    }
    memset(buf, 170, sizeof(buf));
    xpc_object_t v15 = v101;
    if (v101)
    {
      xpc_retain(v101);
      *(void *)long long buf = v15;
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      *(void *)long long buf = v15;
      if (!v15)
      {
        xpc_object_t v15 = 0;
        *(void *)long long buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v15);
LABEL_13:
    *(void *)&uint8_t buf[8] = 0;
    xpc_release(v15);
    CFTypeRef v80 = (CFTypeRef)*MEMORY[0x1E4FB9778];
    CFTypeRef v81 = (CFTypeRef)*MEMORY[0x1E4FB9700];
    CFTypeRef v79 = (CFTypeRef)*MEMORY[0x1E4FB9890];
    CFTypeRef v83 = (CFTypeRef)*MEMORY[0x1E4FB96A0];
    CFTypeRef v82 = (CFTypeRef)*MEMORY[0x1E4FB96F8];
    CFTypeRef v78 = (CFTypeRef)*MEMORY[0x1E4FB9888];
    while (1)
    {
      xpc_object_t v16 = v101;
      if (v101) {
        xpc_retain(v101);
      }
      else {
        xpc_object_t v16 = xpc_null_create();
      }
      if (MEMORY[0x1C8792D30](v101) == v13)
      {
        size_t count = xpc_array_get_count(v101);
        if (!v16)
        {
LABEL_23:
          xpc_object_t v18 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        size_t count = 0;
        if (!v16) {
          goto LABEL_23;
        }
      }
      xpc_retain(v16);
      xpc_object_t v18 = v16;
LABEL_24:
      xpc_release(v16);
      xpc_object_t v19 = *(xpc_object_t *)buf;
      uint64_t v20 = *(void *)&buf[8];
      xpc_release(v18);
      if (v20 == count && v19 == v18)
      {
        xpc_release(*(xpc_object_t *)buf);
        CFMutableArrayRef v61 = v100;
        xpc_object_t v11 = v102;
        ctu::cf::insert<__CFString const*,__CFArray *>(v102, (CFTypeRef)*MEMORY[0x1E4FB9980], v100);
        if (v61) {
          CFRelease(v61);
        }
        break;
      }
      xpc_object_t v99 = 0;
      CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      unsigned __int8 v22 = v21;
      if (v21) {
        xpc_object_t v99 = v21;
      }
      p_xpc_object_t xdict = (xpc_object_t *)buf;
      uint64_t v97 = *(const char **)&buf[8];
      xpc_object_t v98 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&p_xdict, &v98);
      xpc_object_t value = (xpc_object_t *)xpc_dictionary_get_value(v98, "kWCMCellularSetAntBlocking_ClientId");
      p_xpc_object_t xdict = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
      }
      unsigned int v24 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v81, v24, v9);
      xpc_release(p_xdict);
      CFMutableArrayRef v25 = (xpc_object_t *)xpc_dictionary_get_value(v98, "kWCMCellularSetAntBlocking_BlockVoice");
      p_xpc_object_t xdict = v25;
      if (v25) {
        xpc_retain(v25);
      }
      else {
        p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
      }
      int v26 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,BOOL>(v22, v80, v26);
      xpc_release(p_xdict);
      xpc_object_t v27 = (xpc_object_t *)xpc_dictionary_get_value(v98, "kWCMCellularSetAntBlocking_TimeMultiplier");
      p_xpc_object_t xdict = v27;
      if (v27) {
        xpc_retain(v27);
      }
      else {
        p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
      }
      unsigned int v28 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v79, v28, v9);
      xpc_release(p_xdict);
      xpc_object_t v95 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      p_xpc_object_t xdict = &v98;
      uint64_t v97 = "kWCMCellularSetAntBlocking_BandInformationSet";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &v95);
      if (MEMORY[0x1C8792D30](v95) == v13)
      {
        CFTypeRef v94 = 0;
        CFMutableArrayRef v29 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
        if (v29) {
          CFTypeRef v94 = v29;
        }
        xpc_object_t v30 = v95;
        if (v95)
        {
          xpc_retain(v95);
          goto LABEL_43;
        }
        xpc_object_t v30 = xpc_null_create();
        if (v30)
        {
LABEL_43:
          xpc_retain(v30);
          size_t v31 = v30;
        }
        else
        {
          xpc_object_t v30 = xpc_null_create();
          size_t v31 = 0;
        }
        xpc_release(v31);
        size_t v32 = 0;
        while (2)
        {
          xpc_object_t v34 = v95;
          if (v95) {
            xpc_retain(v95);
          }
          else {
            xpc_object_t v34 = xpc_null_create();
          }
          if (MEMORY[0x1C8792D30](v95) == v13)
          {
            size_t v35 = xpc_array_get_count(v95);
            if (!v34) {
              goto LABEL_54;
            }
LABEL_52:
            xpc_retain(v34);
            xpc_object_t v36 = v34;
          }
          else
          {
            size_t v35 = 0;
            if (v34) {
              goto LABEL_52;
            }
LABEL_54:
            xpc_object_t v36 = xpc_null_create();
          }
          xpc_release(v34);
          xpc_release(v36);
          if (v32 == v35 && v30 == v36)
          {
            xpc_release(v30);
            CFTypeRef v58 = v94;
            unsigned __int8 v22 = v99;
            ctu::cf::insert<__CFString const*,__CFArray *>(v99, v78, v94);
            if (v58) {
              CFRelease(v58);
            }
            goto LABEL_111;
          }
          CFTypeRef cf = 0;
          CFMutableDictionaryRef v37 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v37) {
            CFTypeRef cf = v37;
          }
          xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          xpc_object_t v38 = xpc_array_get_value(v30, v32);
          xpc_object_t v39 = v38;
          if (v38)
          {
            xpc_retain(v38);
            xpc_object_t xdict = v39;
            goto LABEL_62;
          }
          xpc_object_t v39 = xpc_null_create();
          xpc_object_t xdict = v39;
          if (v39)
          {
LABEL_62:
            if (MEMORY[0x1C8792D30](v39) != v7)
            {
              xpc_object_t v40 = xpc_null_create();
              goto LABEL_66;
            }
            xpc_retain(v39);
          }
          else
          {
            xpc_object_t v40 = xpc_null_create();
            xpc_object_t v39 = 0;
LABEL_66:
            xpc_object_t xdict = v40;
          }
          xpc_release(v39);
          if (MEMORY[0x1C8792D30](xdict) != v7)
          {
            CFMutableDictionaryRef v41 = (xpc_object_t *)cf;
            goto LABEL_102;
          }
          CFMutableDictionaryRef v42 = (xpc_object_t *)xpc_dictionary_get_value(xdict, "kWCMCellularSetAntBlocking_BandInfoSet_AntNum");
          p_xpc_object_t xdict = v42;
          if (v42) {
            xpc_retain(v42);
          }
          else {
            p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
          }
          unsigned __int8 v43 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
          xpc_release(p_xdict);
          CFMutableDictionaryRef v41 = (xpc_object_t *)cf;
          ctu::cf::insert<__CFString const*,unsigned char>((__CFDictionary *)cf, v83, v43, v9);
          xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          p_xpc_object_t xdict = &xdict;
          uint64_t v97 = "kWCMCellularSetAntBlocking_BandInfoSet_BandList";
          xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &object);
          if (MEMORY[0x1C8792D30](object) != v13) {
            goto LABEL_101;
          }
          CFTypeRef v90 = 0;
          CFMutableArrayRef v44 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
          if (v44) {
            CFTypeRef v90 = v44;
          }
          xpc_object_t v45 = object;
          if (object)
          {
            xpc_retain(object);
            goto LABEL_78;
          }
          xpc_object_t v45 = xpc_null_create();
          if (v45)
          {
LABEL_78:
            xpc_retain(v45);
            CFTypeID v46 = v45;
          }
          else
          {
            xpc_object_t v45 = xpc_null_create();
            CFTypeID v46 = 0;
          }
          xpc_release(v46);
          size_t v47 = 0;
LABEL_82:
          xpc_object_t v49 = object;
          if (object) {
            xpc_retain(object);
          }
          else {
            xpc_object_t v49 = xpc_null_create();
          }
          if (MEMORY[0x1C8792D30](object) == v13)
          {
            size_t v50 = xpc_array_get_count(object);
            if (!v49) {
              goto LABEL_89;
            }
LABEL_87:
            xpc_retain(v49);
            xpc_object_t v51 = v49;
          }
          else
          {
            size_t v50 = 0;
            if (v49) {
              goto LABEL_87;
            }
LABEL_89:
            xpc_object_t v51 = xpc_null_create();
          }
          xpc_release(v49);
          xpc_release(v51);
          if (v47 == v50 && v45 == v51)
          {
            xpc_release(v45);
            CFTypeRef v56 = v90;
            CFMutableDictionaryRef v41 = (xpc_object_t *)cf;
            ctu::cf::insert<__CFString const*,__CFArray *>((__CFDictionary *)cf, v82, v90);
            if (v56) {
              CFRelease(v56);
            }
LABEL_101:
            xpc_release(object);
LABEL_102:
            CFTypeRef v57 = (__CFArray *)v94;
            p_xpc_object_t xdict = v41;
            if (v41)
            {
              CFRetain(v41);
              CFArrayAppendValue(v57, v41);
              CFRelease(v41);
            }
            xpc_release(xdict);
            if (cf) {
              CFRelease(cf);
            }
            if (v30)
            {
              xpc_retain(v30);
              xpc_object_t v33 = v30;
            }
            else
            {
              xpc_object_t v33 = xpc_null_create();
            }
            ++v32;
            xpc_release(v33);
            continue;
          }
          break;
        }
        xpc_object_t v52 = xpc_array_get_value(v45, v47);
        xpc_object_t v89 = v52;
        if (v52) {
          xpc_retain(v52);
        }
        else {
          xpc_object_t v89 = xpc_null_create();
        }
        int v53 = xpc::dyn_cast_or_default((xpc *)&v89, 0);
        xpc_object_t v54 = (__CFArray *)v90;
        int valuePtr = v53;
        CFNumberRef v55 = CFNumberCreate(v9, kCFNumberIntType, &valuePtr);
        p_xpc_object_t xdict = (xpc_object_t *)v55;
        if (v55)
        {
          CFArrayAppendValue(v54, v55);
          CFRelease(v55);
        }
        xpc_release(v89);
        if (v45)
        {
          xpc_retain(v45);
          xpc_object_t v48 = v45;
        }
        else
        {
          xpc_object_t v48 = xpc_null_create();
        }
        ++v47;
        xpc_release(v48);
        goto LABEL_82;
      }
LABEL_111:
      dispatch_object_t v59 = v100;
      p_xpc_object_t xdict = (xpc_object_t *)v22;
      if (v22)
      {
        CFRetain(v22);
        CFArrayAppendValue(v59, v22);
        CFRelease(v22);
      }
      xpc_release(v95);
      xpc_release(v98);
      if (v22) {
        CFRelease(v22);
      }
      xpc_object_t v60 = *(xpc_object_t *)buf;
      if (*(void *)buf) {
        xpc_retain(*(xpc_object_t *)buf);
      }
      else {
        xpc_object_t v60 = xpc_null_create();
      }
      ++*(void *)&buf[8];
      xpc_release(v60);
    }
  }
  p_xpc_object_t xdict = 0;
  CFMutableDictionaryRef v62 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v63 = v62;
  if (v62) {
    p_xpc_object_t xdict = (xpc_object_t *)v62;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v62, (CFTypeRef)*MEMORY[0x1E4FB9760], v11);
  CFTypeRef v64 = *(NSObject **)(v77 + 40);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v63;
    _os_log_impl(&dword_1C5767000, v64, OS_LOG_TYPE_DEFAULT, "#I Setting Client Ant blocking with: %@", buf, 0xCu);
  }
  uint64_t v66 = *(void *)(v77 + 72);
  xpc_object_t v65 = *(std::__shared_weak_count **)(v77 + 80);
  *(void *)long long buf = v66;
  if (!v65 || (v67 = std::__shared_weak_count::lock(v65), (*(void *)&uint8_t buf[8] = v67) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v68 = v67;
  uint64_t v69 = *(void *)(v77 + 104);
  if (v63 && (CFTypeID v70 = CFGetTypeID(v63), v70 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v88 = v63;
    CFRetain(v63);
  }
  else
  {
    CFTypeRef v88 = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State31handleSetClientAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_225;
  void aBlock[4] = v77;
  aBlock[5] = v66;
  CFArrayRef v85 = v68;
  atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v71 = _Block_copy(aBlock);
  uint64_t v72 = *(NSObject **)(v77 + 88);
  if (v72) {
    dispatch_retain(*(dispatch_object_t *)(v77 + 88));
  }
  if (v71)
  {
    CFArrayRef v86 = _Block_copy(v71);
    dispatch_object_t v87 = v72;
    if (!v72) {
      goto LABEL_135;
    }
    goto LABEL_134;
  }
  CFArrayRef v86 = 0;
  dispatch_object_t v87 = v72;
  if (v72) {
LABEL_134:
  }
    dispatch_retain(v72);
LABEL_135:
  (*(void (**)(uint64_t, CFTypeRef *, void, void **))(*(void *)v69 + 48))(v69, &v88, v76, &v86);
  if (v87) {
    dispatch_release(v87);
  }
  if (v86) {
    _Block_release(v86);
  }
  if (v72) {
    dispatch_release(v72);
  }
  if (v71) {
    _Block_release(v71);
  }
  if (v88) {
    CFRelease(v88);
  }
  uint64_t v73 = v85;
  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
  }
  xpc_object_t v74 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v75 = p_xdict;
    if (!p_xdict) {
      goto LABEL_152;
    }
    goto LABEL_151;
  }
  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
  std::__shared_weak_count::__release_weak(v74);
  uint64_t v75 = p_xdict;
  if (p_xdict) {
LABEL_151:
  }
    CFRelease(v75);
LABEL_152:
  xpc_release(v101);
  if (v102) {
    CFRelease(v102);
  }
}

void sub_1C57B1E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,xpc_object_t a28,char a29,xpc_object_t object,xpc_object_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State31handleSetClientAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    BOOL v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Ant blocking: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetClientAntBlockingExtended_sync(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x1C8792D30](*a2);
  uint64_t v7 = MEMORY[0x1E4F14590];
  if (v6 != MEMORY[0x1E4F14590])
  {
    int v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C5767000, v8, OS_LOG_TYPE_ERROR, "Invalid XPC dict", buf, 2u);
    }
    return;
  }
  unsigned int v76 = a3;
  uint64_t v102 = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  xpc_object_t v11 = Mutable;
  if (Mutable) {
    uint64_t v102 = Mutable;
  }
  xpc_object_t v101 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(void *)long long buf = a2;
  *(void *)&uint8_t buf[8] = "kWCMCellularSetAntBlocking_ClientInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v101);
  uint64_t v77 = a1;
  uint64_t v12 = MEMORY[0x1C8792D30](v101);
  uint64_t v13 = MEMORY[0x1E4F14568];
  if (v12 == MEMORY[0x1E4F14568])
  {
    CFMutableArrayRef v100 = 0;
    CFMutableArrayRef v14 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    if (v14) {
      CFMutableArrayRef v100 = v14;
    }
    memset(buf, 170, sizeof(buf));
    xpc_object_t v15 = v101;
    if (v101)
    {
      xpc_retain(v101);
      *(void *)long long buf = v15;
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      *(void *)long long buf = v15;
      if (!v15)
      {
        xpc_object_t v15 = 0;
        *(void *)long long buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v15);
LABEL_13:
    *(void *)&uint8_t buf[8] = 0;
    xpc_release(v15);
    CFTypeRef v80 = (CFTypeRef)*MEMORY[0x1E4FB9778];
    CFTypeRef v81 = (CFTypeRef)*MEMORY[0x1E4FB9700];
    CFTypeRef v79 = (CFTypeRef)*MEMORY[0x1E4FB9890];
    CFTypeRef v83 = (CFTypeRef)*MEMORY[0x1E4FB96A0];
    CFTypeRef v82 = (CFTypeRef)*MEMORY[0x1E4FB96F8];
    CFTypeRef v78 = (CFTypeRef)*MEMORY[0x1E4FB9888];
    while (1)
    {
      xpc_object_t v16 = v101;
      if (v101) {
        xpc_retain(v101);
      }
      else {
        xpc_object_t v16 = xpc_null_create();
      }
      if (MEMORY[0x1C8792D30](v101) == v13)
      {
        size_t count = xpc_array_get_count(v101);
        if (!v16)
        {
LABEL_23:
          xpc_object_t v18 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        size_t count = 0;
        if (!v16) {
          goto LABEL_23;
        }
      }
      xpc_retain(v16);
      xpc_object_t v18 = v16;
LABEL_24:
      xpc_release(v16);
      xpc_object_t v19 = *(xpc_object_t *)buf;
      uint64_t v20 = *(void *)&buf[8];
      xpc_release(v18);
      if (v20 == count && v19 == v18)
      {
        xpc_release(*(xpc_object_t *)buf);
        CFMutableArrayRef v61 = v100;
        xpc_object_t v11 = v102;
        ctu::cf::insert<__CFString const*,__CFArray *>(v102, (CFTypeRef)*MEMORY[0x1E4FB9980], v100);
        if (v61) {
          CFRelease(v61);
        }
        break;
      }
      xpc_object_t v99 = 0;
      CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      unsigned __int8 v22 = v21;
      if (v21) {
        xpc_object_t v99 = v21;
      }
      p_xpc_object_t xdict = (xpc_object_t *)buf;
      uint64_t v97 = *(const char **)&buf[8];
      xpc_object_t v98 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&p_xdict, &v98);
      xpc_object_t value = (xpc_object_t *)xpc_dictionary_get_value(v98, "kWCMCellularSetAntBlocking_ClientId");
      p_xpc_object_t xdict = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
      }
      unsigned int v24 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v81, v24, v9);
      xpc_release(p_xdict);
      CFMutableArrayRef v25 = (xpc_object_t *)xpc_dictionary_get_value(v98, "kWCMCellularSetAntBlocking_BlockVoice");
      p_xpc_object_t xdict = v25;
      if (v25) {
        xpc_retain(v25);
      }
      else {
        p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
      }
      int v26 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,BOOL>(v22, v80, v26);
      xpc_release(p_xdict);
      xpc_object_t v27 = (xpc_object_t *)xpc_dictionary_get_value(v98, "kWCMCellularSetAntBlocking_TimeMultiplier");
      p_xpc_object_t xdict = v27;
      if (v27) {
        xpc_retain(v27);
      }
      else {
        p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
      }
      unsigned int v28 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v79, v28, v9);
      xpc_release(p_xdict);
      xpc_object_t v95 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      p_xpc_object_t xdict = &v98;
      uint64_t v97 = "kWCMCellularSetAntBlocking_BandInformationSet";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &v95);
      if (MEMORY[0x1C8792D30](v95) == v13)
      {
        CFTypeRef v94 = 0;
        CFMutableArrayRef v29 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
        if (v29) {
          CFTypeRef v94 = v29;
        }
        xpc_object_t v30 = v95;
        if (v95)
        {
          xpc_retain(v95);
          goto LABEL_43;
        }
        xpc_object_t v30 = xpc_null_create();
        if (v30)
        {
LABEL_43:
          xpc_retain(v30);
          size_t v31 = v30;
        }
        else
        {
          xpc_object_t v30 = xpc_null_create();
          size_t v31 = 0;
        }
        xpc_release(v31);
        size_t v32 = 0;
        while (2)
        {
          xpc_object_t v34 = v95;
          if (v95) {
            xpc_retain(v95);
          }
          else {
            xpc_object_t v34 = xpc_null_create();
          }
          if (MEMORY[0x1C8792D30](v95) == v13)
          {
            size_t v35 = xpc_array_get_count(v95);
            if (!v34) {
              goto LABEL_54;
            }
LABEL_52:
            xpc_retain(v34);
            xpc_object_t v36 = v34;
          }
          else
          {
            size_t v35 = 0;
            if (v34) {
              goto LABEL_52;
            }
LABEL_54:
            xpc_object_t v36 = xpc_null_create();
          }
          xpc_release(v34);
          xpc_release(v36);
          if (v32 == v35 && v30 == v36)
          {
            xpc_release(v30);
            CFTypeRef v58 = v94;
            unsigned __int8 v22 = v99;
            ctu::cf::insert<__CFString const*,__CFArray *>(v99, v78, v94);
            if (v58) {
              CFRelease(v58);
            }
            goto LABEL_111;
          }
          CFTypeRef cf = 0;
          CFMutableDictionaryRef v37 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v37) {
            CFTypeRef cf = v37;
          }
          xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          xpc_object_t v38 = xpc_array_get_value(v30, v32);
          xpc_object_t v39 = v38;
          if (v38)
          {
            xpc_retain(v38);
            xpc_object_t xdict = v39;
            goto LABEL_62;
          }
          xpc_object_t v39 = xpc_null_create();
          xpc_object_t xdict = v39;
          if (v39)
          {
LABEL_62:
            if (MEMORY[0x1C8792D30](v39) != v7)
            {
              xpc_object_t v40 = xpc_null_create();
              goto LABEL_66;
            }
            xpc_retain(v39);
          }
          else
          {
            xpc_object_t v40 = xpc_null_create();
            xpc_object_t v39 = 0;
LABEL_66:
            xpc_object_t xdict = v40;
          }
          xpc_release(v39);
          if (MEMORY[0x1C8792D30](xdict) != v7)
          {
            CFMutableDictionaryRef v41 = (xpc_object_t *)cf;
            goto LABEL_102;
          }
          CFMutableDictionaryRef v42 = (xpc_object_t *)xpc_dictionary_get_value(xdict, "kWCMCellularSetAntBlocking_BandInfoSet_AntNum");
          p_xpc_object_t xdict = v42;
          if (v42) {
            xpc_retain(v42);
          }
          else {
            p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
          }
          unsigned __int8 v43 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
          xpc_release(p_xdict);
          CFMutableDictionaryRef v41 = (xpc_object_t *)cf;
          ctu::cf::insert<__CFString const*,unsigned char>((__CFDictionary *)cf, v83, v43, v9);
          xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          p_xpc_object_t xdict = &xdict;
          uint64_t v97 = "kWCMCellularSetAntBlocking_BandInfoSet_BandList";
          xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &object);
          if (MEMORY[0x1C8792D30](object) != v13) {
            goto LABEL_101;
          }
          CFTypeRef v90 = 0;
          CFMutableArrayRef v44 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
          if (v44) {
            CFTypeRef v90 = v44;
          }
          xpc_object_t v45 = object;
          if (object)
          {
            xpc_retain(object);
            goto LABEL_78;
          }
          xpc_object_t v45 = xpc_null_create();
          if (v45)
          {
LABEL_78:
            xpc_retain(v45);
            CFTypeID v46 = v45;
          }
          else
          {
            xpc_object_t v45 = xpc_null_create();
            CFTypeID v46 = 0;
          }
          xpc_release(v46);
          size_t v47 = 0;
LABEL_82:
          xpc_object_t v49 = object;
          if (object) {
            xpc_retain(object);
          }
          else {
            xpc_object_t v49 = xpc_null_create();
          }
          if (MEMORY[0x1C8792D30](object) == v13)
          {
            size_t v50 = xpc_array_get_count(object);
            if (!v49) {
              goto LABEL_89;
            }
LABEL_87:
            xpc_retain(v49);
            xpc_object_t v51 = v49;
          }
          else
          {
            size_t v50 = 0;
            if (v49) {
              goto LABEL_87;
            }
LABEL_89:
            xpc_object_t v51 = xpc_null_create();
          }
          xpc_release(v49);
          xpc_release(v51);
          if (v47 == v50 && v45 == v51)
          {
            xpc_release(v45);
            CFTypeRef v56 = v90;
            CFMutableDictionaryRef v41 = (xpc_object_t *)cf;
            ctu::cf::insert<__CFString const*,__CFArray *>((__CFDictionary *)cf, v82, v90);
            if (v56) {
              CFRelease(v56);
            }
LABEL_101:
            xpc_release(object);
LABEL_102:
            CFTypeRef v57 = (__CFArray *)v94;
            p_xpc_object_t xdict = v41;
            if (v41)
            {
              CFRetain(v41);
              CFArrayAppendValue(v57, v41);
              CFRelease(v41);
            }
            xpc_release(xdict);
            if (cf) {
              CFRelease(cf);
            }
            if (v30)
            {
              xpc_retain(v30);
              xpc_object_t v33 = v30;
            }
            else
            {
              xpc_object_t v33 = xpc_null_create();
            }
            ++v32;
            xpc_release(v33);
            continue;
          }
          break;
        }
        xpc_object_t v52 = xpc_array_get_value(v45, v47);
        xpc_object_t v89 = v52;
        if (v52) {
          xpc_retain(v52);
        }
        else {
          xpc_object_t v89 = xpc_null_create();
        }
        int v53 = xpc::dyn_cast_or_default((xpc *)&v89, 0);
        xpc_object_t v54 = (__CFArray *)v90;
        int valuePtr = v53;
        CFNumberRef v55 = CFNumberCreate(v9, kCFNumberIntType, &valuePtr);
        p_xpc_object_t xdict = (xpc_object_t *)v55;
        if (v55)
        {
          CFArrayAppendValue(v54, v55);
          CFRelease(v55);
        }
        xpc_release(v89);
        if (v45)
        {
          xpc_retain(v45);
          xpc_object_t v48 = v45;
        }
        else
        {
          xpc_object_t v48 = xpc_null_create();
        }
        ++v47;
        xpc_release(v48);
        goto LABEL_82;
      }
LABEL_111:
      dispatch_object_t v59 = v100;
      p_xpc_object_t xdict = (xpc_object_t *)v22;
      if (v22)
      {
        CFRetain(v22);
        CFArrayAppendValue(v59, v22);
        CFRelease(v22);
      }
      xpc_release(v95);
      xpc_release(v98);
      if (v22) {
        CFRelease(v22);
      }
      xpc_object_t v60 = *(xpc_object_t *)buf;
      if (*(void *)buf) {
        xpc_retain(*(xpc_object_t *)buf);
      }
      else {
        xpc_object_t v60 = xpc_null_create();
      }
      ++*(void *)&buf[8];
      xpc_release(v60);
    }
  }
  p_xpc_object_t xdict = 0;
  CFMutableDictionaryRef v62 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v63 = v62;
  if (v62) {
    p_xpc_object_t xdict = (xpc_object_t *)v62;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v62, (CFTypeRef)*MEMORY[0x1E4FB9938], v11);
  CFTypeRef v64 = *(NSObject **)(v77 + 40);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v63;
    _os_log_impl(&dword_1C5767000, v64, OS_LOG_TYPE_DEFAULT, "#I Setting Client Ant blocking Extended with: %@ ", buf, 0xCu);
  }
  uint64_t v66 = *(void *)(v77 + 72);
  xpc_object_t v65 = *(std::__shared_weak_count **)(v77 + 80);
  *(void *)long long buf = v66;
  if (!v65 || (v67 = std::__shared_weak_count::lock(v65), (*(void *)&uint8_t buf[8] = v67) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v68 = v67;
  uint64_t v69 = *(void *)(v77 + 104);
  if (v63 && (CFTypeID v70 = CFGetTypeID(v63), v70 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v88 = v63;
    CFRetain(v63);
  }
  else
  {
    CFTypeRef v88 = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State39handleSetClientAntBlockingExtended_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_228;
  void aBlock[4] = v77;
  aBlock[5] = v66;
  CFArrayRef v85 = v68;
  atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v71 = _Block_copy(aBlock);
  uint64_t v72 = *(NSObject **)(v77 + 88);
  if (v72) {
    dispatch_retain(*(dispatch_object_t *)(v77 + 88));
  }
  if (v71)
  {
    CFArrayRef v86 = _Block_copy(v71);
    dispatch_object_t v87 = v72;
    if (!v72) {
      goto LABEL_135;
    }
    goto LABEL_134;
  }
  CFArrayRef v86 = 0;
  dispatch_object_t v87 = v72;
  if (v72) {
LABEL_134:
  }
    dispatch_retain(v72);
LABEL_135:
  (*(void (**)(uint64_t, CFTypeRef *, void, void **))(*(void *)v69 + 48))(v69, &v88, v76, &v86);
  if (v87) {
    dispatch_release(v87);
  }
  if (v86) {
    _Block_release(v86);
  }
  if (v72) {
    dispatch_release(v72);
  }
  if (v71) {
    _Block_release(v71);
  }
  if (v88) {
    CFRelease(v88);
  }
  uint64_t v73 = v85;
  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
  }
  xpc_object_t v74 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v75 = p_xdict;
    if (!p_xdict) {
      goto LABEL_152;
    }
    goto LABEL_151;
  }
  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
  std::__shared_weak_count::__release_weak(v74);
  uint64_t v75 = p_xdict;
  if (p_xdict) {
LABEL_151:
  }
    CFRelease(v75);
LABEL_152:
  xpc_release(v101);
  if (v102) {
    CFRelease(v102);
  }
}

void sub_1C57B2E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,xpc_object_t a28,char a29,xpc_object_t object,xpc_object_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State39handleSetClientAntBlockingExtended_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    BOOL v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Ant blocking Extended: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleTriggerAntennaBlocking_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  CFTypeRef v36 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v9 = Mutable;
  if (Mutable) {
    CFTypeRef v36 = Mutable;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_Enable");
  *(void *)&long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9878], v11);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v12 = xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_ClientID");
  *(void *)&long long buf = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned int v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB98E8], v13, v7);
  xpc_release((xpc_object_t)buf);
  if (xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_Duration"))
  {
    xpc_object_t v14 = xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_Duration");
    *(void *)&long long buf = v14;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    unsigned int v15 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB98F0], v15, v7);
    xpc_release((xpc_object_t)buf);
  }
  CFTypeRef v35 = 0;
  CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v17 = v16;
  if (v16) {
    CFTypeRef v35 = v16;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v16, (CFTypeRef)*MEMORY[0x1E4FB96E8], v9);
  xpc_object_t v18 = a1[5];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v17;
    _os_log_impl(&dword_1C5767000, v18, OS_LOG_TYPE_DEFAULT, "#I Triggering client antenna blocking with params: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v20 = a1[9];
  xpc_object_t v19 = (std::__shared_weak_count *)a1[10];
  *(void *)&long long buf = v20;
  if (!v19 || (CFMutableDictionaryRef v21 = std::__shared_weak_count::lock(v19), (*((void *)&buf + 1) = v21) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned __int8 v22 = v21;
  uint64_t v23 = a1[13];
  if (v17 && (CFTypeID v24 = CFGetTypeID(v17), v24 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v17;
    CFRetain(v17);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 1174405120;
  v30[2] = ___ZN4coex6Module5State33handleTriggerAntennaBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v30[3] = &__block_descriptor_tmp_234;
  v30[4] = a1;
  v30[5] = v20;
  size_t v31 = v22;
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  CFMutableArrayRef v25 = _Block_copy(v30);
  int v26 = a1[11];
  if (v26) {
    dispatch_retain(v26);
  }
  if (v25)
  {
    long long aBlock = _Block_copy(v25);
    dispatch_object_t object = v26;
    if (!v26) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  long long aBlock = 0;
  dispatch_object_t object = v26;
  if (v26) {
LABEL_31:
  }
    dispatch_retain(v26);
LABEL_32:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v23 + 48))(v23, &cf, a3, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v26) {
    dispatch_release(v26);
  }
  if (v25) {
    _Block_release(v25);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_object_t v27 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  unsigned int v28 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v29 = v35;
    if (!v35) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  CFTypeRef v29 = v35;
  if (v35) {
LABEL_48:
  }
    CFRelease(v29);
LABEL_49:
  if (v36) {
    CFRelease(v36);
  }
}

void sub_1C57B3728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State33handleTriggerAntennaBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    BOOL v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to trigger antenna blocking: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetCC1_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  CFTypeRef v41 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v9 = Mutable;
  if (Mutable) {
    CFTypeRef v41 = Mutable;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Enable");
  *(void *)&long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9540], v11);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CoexTech");
  *(void *)&long long buf = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E4FB9518], v13, v7);
  xpc_release((xpc_object_t)buf);
  *(void *)&long long buf = xpc_int64_create(a3);
  if (!(void)buf) {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned int v14 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB95F0], v14, v7);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v15 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CarrierId");
  *(void *)&long long buf = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned __int8 v16 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E4FB9548], v16, v7);
  xpc_release((xpc_object_t)buf);
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency")
    && xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth"))
  {
    xpc_object_t v17 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency");
    *(void *)&long long buf = v17;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    unsigned int v18 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9658], v18, v7);
    xpc_release((xpc_object_t)buf);
    xpc_object_t v19 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth");
    *(void *)&long long buf = v19;
    if (v19) {
      xpc_retain(v19);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    unsigned int v20 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9538], v20, v7);
    xpc_release((xpc_object_t)buf);
  }
  CFTypeRef v40 = 0;
  CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v22 = v21;
  if (v21) {
    CFTypeRef v40 = v21;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v21, (CFTypeRef)*MEMORY[0x1E4FB9558], v9);
  uint64_t v23 = a1[5];
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_1C5767000, v23, OS_LOG_TYPE_DEFAULT, "#I Setting CC1 with: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v25 = a1[9];
  CFTypeID v24 = (std::__shared_weak_count *)a1[10];
  *(void *)&long long buf = v25;
  if (!v24 || (int v26 = std::__shared_weak_count::lock(v24), (*((void *)&buf + 1) = v26) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v27 = v26;
  uint64_t v28 = a1[13];
  if (v22 && (CFTypeID v29 = CFGetTypeID(v22), v29 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v22;
    CFRetain(v22);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 1174405120;
  void v35[2] = ___ZN4coex6Module5State17handleSetCC1_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v35[3] = &__block_descriptor_tmp_242;
  v35[4] = a1;
  v35[5] = v25;
  CFTypeRef v36 = v27;
  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v30 = _Block_copy(v35);
  size_t v31 = a1[11];
  if (v31) {
    dispatch_retain(v31);
  }
  if (v30)
  {
    long long aBlock = _Block_copy(v30);
    dispatch_object_t object = v31;
    if (!v31) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  long long aBlock = 0;
  dispatch_object_t object = v31;
  if (v31) {
LABEL_40:
  }
    dispatch_retain(v31);
LABEL_41:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v28 + 48))(v28, &cf, a3, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v31) {
    dispatch_release(v31);
  }
  if (v30) {
    _Block_release(v30);
  }
  if (cf) {
    CFRelease(cf);
  }
  size_t v32 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  xpc_object_t v33 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v34 = v40;
    if (!v40) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  CFTypeRef v34 = v40;
  if (v40) {
LABEL_57:
  }
    CFRelease(v34);
LABEL_58:
  if (v41) {
    CFRelease(v41);
  }
}

void sub_1C57B3ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State17handleSetCC1_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    BOOL v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set CC1: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetCC2_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  CFTypeRef v41 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v9 = Mutable;
  if (Mutable) {
    CFTypeRef v41 = Mutable;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Enable");
  *(void *)&long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9540], v11);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CoexTech");
  *(void *)&long long buf = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E4FB9518], v13, v7);
  xpc_release((xpc_object_t)buf);
  *(void *)&long long buf = xpc_int64_create(a3);
  if (!(void)buf) {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned int v14 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB95F0], v14, v7);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v15 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CarrierId");
  *(void *)&long long buf = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned __int8 v16 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E4FB9548], v16, v7);
  xpc_release((xpc_object_t)buf);
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency")
    && xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth"))
  {
    xpc_object_t v17 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency");
    *(void *)&long long buf = v17;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    unsigned int v18 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9658], v18, v7);
    xpc_release((xpc_object_t)buf);
    xpc_object_t v19 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth");
    *(void *)&long long buf = v19;
    if (v19) {
      xpc_retain(v19);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    unsigned int v20 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9538], v20, v7);
    xpc_release((xpc_object_t)buf);
  }
  CFTypeRef v40 = 0;
  CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v22 = v21;
  if (v21) {
    CFTypeRef v40 = v21;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v21, (CFTypeRef)*MEMORY[0x1E4FB9560], v9);
  uint64_t v23 = a1[5];
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_1C5767000, v23, OS_LOG_TYPE_DEFAULT, "#I Setting CC2 with: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v25 = a1[9];
  CFTypeID v24 = (std::__shared_weak_count *)a1[10];
  *(void *)&long long buf = v25;
  if (!v24 || (int v26 = std::__shared_weak_count::lock(v24), (*((void *)&buf + 1) = v26) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v27 = v26;
  uint64_t v28 = a1[13];
  if (v22 && (CFTypeID v29 = CFGetTypeID(v22), v29 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v22;
    CFRetain(v22);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 1174405120;
  void v35[2] = ___ZN4coex6Module5State17handleSetCC2_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v35[3] = &__block_descriptor_tmp_245;
  v35[4] = a1;
  v35[5] = v25;
  CFTypeRef v36 = v27;
  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v30 = _Block_copy(v35);
  size_t v31 = a1[11];
  if (v31) {
    dispatch_retain(v31);
  }
  if (v30)
  {
    long long aBlock = _Block_copy(v30);
    dispatch_object_t object = v31;
    if (!v31) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  long long aBlock = 0;
  dispatch_object_t object = v31;
  if (v31) {
LABEL_40:
  }
    dispatch_retain(v31);
LABEL_41:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v28 + 48))(v28, &cf, a3, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v31) {
    dispatch_release(v31);
  }
  if (v30) {
    _Block_release(v30);
  }
  if (cf) {
    CFRelease(cf);
  }
  size_t v32 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  xpc_object_t v33 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v34 = v40;
    if (!v40) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  CFTypeRef v34 = v40;
  if (v40) {
LABEL_57:
  }
    CFRelease(v34);
LABEL_58:
  if (v41) {
    CFRelease(v41);
  }
}

void sub_1C57B46D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State17handleSetCC2_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    BOOL v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set CC2: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetLaaGpioThrottle_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  CFTypeRef v34 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v9 = Mutable;
  if (Mutable) {
    CFTypeRef v34 = Mutable;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularSetLaaGpioThrottleReq_Enabled");
  *(void *)&long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB97E8], v11);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetLaaGpioThrottleReq_Periodicity");
  *(void *)&long long buf = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned int v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB98E0], v13, v7);
  xpc_release((xpc_object_t)buf);
  CFTypeRef v33 = 0;
  CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v15 = v14;
  if (v14) {
    CFTypeRef v33 = v14;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v14, (CFTypeRef)*MEMORY[0x1E4FB97C8], v9);
  unsigned __int8 v16 = a1[5];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v15;
    _os_log_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEFAULT, "#I Setting LAA GPIO throttle with: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v18 = a1[9];
  xpc_object_t v17 = (std::__shared_weak_count *)a1[10];
  *(void *)&long long buf = v18;
  if (!v17 || (xpc_object_t v19 = std::__shared_weak_count::lock(v17), (*((void *)&buf + 1) = v19) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned int v20 = v19;
  uint64_t v21 = a1[13];
  if (v15 && (CFTypeID v22 = CFGetTypeID(v15), v22 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v15;
    CFRetain(v15);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 1174405120;
  v28[2] = ___ZN4coex6Module5State29handleSetLaaGpioThrottle_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v28[3] = &__block_descriptor_tmp_250;
  v28[4] = a1;
  v28[5] = v18;
  CFTypeID v29 = v20;
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v23 = _Block_copy(v28);
  CFTypeID v24 = a1[11];
  if (v24) {
    dispatch_retain(v24);
  }
  if (v23)
  {
    long long aBlock = _Block_copy(v23);
    dispatch_object_t object = v24;
    if (!v24) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  long long aBlock = 0;
  dispatch_object_t object = v24;
  if (v24) {
LABEL_26:
  }
    dispatch_retain(v24);
LABEL_27:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v21 + 48))(v21, &cf, a3, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v24) {
    dispatch_release(v24);
  }
  if (v23) {
    _Block_release(v23);
  }
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v25 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  int v26 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v27 = v33;
    if (!v33) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  CFTypeRef v27 = v33;
  if (v33) {
LABEL_43:
  }
    CFRelease(v27);
LABEL_44:
  if (v34) {
    CFRelease(v34);
  }
}

void sub_1C57B4D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State29handleSetLaaGpioThrottle_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    BOOL v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set LAA GPIO throttle: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetGnssParams_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  CFTypeRef v36 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v9 = Mutable;
  if (Mutable) {
    CFTypeRef v36 = Mutable;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularSetGnssParamsReq_Enabled");
  *(void *)&long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9580], v11);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetGnssParamsReq_Band");
  *(void *)&long long buf = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned int v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB94F8], v13, v7);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v14 = xpc_dictionary_get_value(*a2, "kWCMCellularSetGnssParamsReq_L5Level");
  *(void *)&long long buf = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned int v15 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9588], v15, v7);
  xpc_release((xpc_object_t)buf);
  CFTypeRef v35 = 0;
  CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v17 = v16;
  if (v16) {
    CFTypeRef v35 = v16;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v16, (CFTypeRef)*MEMORY[0x1E4FB9688], v9);
  uint64_t v18 = a1[5];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v17;
    _os_log_impl(&dword_1C5767000, v18, OS_LOG_TYPE_DEFAULT, "#I Setting Gnss params with: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v20 = a1[9];
  xpc_object_t v19 = (std::__shared_weak_count *)a1[10];
  *(void *)&long long buf = v20;
  if (!v19 || (uint64_t v21 = std::__shared_weak_count::lock(v19), (*((void *)&buf + 1) = v21) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeID v22 = v21;
  uint64_t v23 = a1[13];
  if (v17 && (CFTypeID v24 = CFGetTypeID(v17), v24 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v17;
    CFRetain(v17);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 1174405120;
  v30[2] = ___ZN4coex6Module5State24handleSetGnssParams_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v30[3] = &__block_descriptor_tmp_256;
  v30[4] = a1;
  v30[5] = v20;
  size_t v31 = v22;
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v25 = _Block_copy(v30);
  int v26 = a1[11];
  if (v26) {
    dispatch_retain(v26);
  }
  if (v25)
  {
    long long aBlock = _Block_copy(v25);
    dispatch_object_t object = v26;
    if (!v26) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  long long aBlock = 0;
  dispatch_object_t object = v26;
  if (v26) {
LABEL_29:
  }
    dispatch_retain(v26);
LABEL_30:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v23 + 48))(v23, &cf, a3, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v26) {
    dispatch_release(v26);
  }
  if (v25) {
    _Block_release(v25);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef v27 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v29 = v35;
    if (!v35) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  CFTypeRef v29 = v35;
  if (v35) {
LABEL_46:
  }
    CFRelease(v29);
LABEL_47:
  if (v36) {
    CFRelease(v36);
  }
}

void sub_1C57B53C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State24handleSetGnssParams_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    BOOL v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Gnss params: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetLAAConfig_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_CoexEnable"))
  {
    CFTypeRef v43 = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFAllocatorRef v9 = Mutable;
    if (Mutable) {
      CFTypeRef v43 = Mutable;
    }
    xpc_object_t value = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_CoexEnable");
    *(void *)&long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    int v12 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9748], v12);
    xpc_release((xpc_object_t)buf);
    xpc_object_t v13 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_ProtectCQIPeriod");
    *(void *)&long long buf = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    int v14 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E4FB98A0], v14, v7);
    xpc_release((xpc_object_t)buf);
    xpc_object_t v15 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_ThresholdIn");
    *(void *)&long long buf = v15;
    if (v15) {
      xpc_retain(v15);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    int v16 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9750], v16, v7);
    xpc_release((xpc_object_t)buf);
    xpc_object_t v17 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_ThresholdOut");
    *(void *)&long long buf = v17;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    int v18 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E4FB97A8], v18, v7);
    xpc_release((xpc_object_t)buf);
    xpc_object_t v19 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_DeactTimer");
    *(void *)&long long buf = v19;
    if (v19) {
      xpc_retain(v19);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    int v20 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9718], v20, v7);
    xpc_release((xpc_object_t)buf);
    xpc_object_t v21 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_DeactStopTimer");
    *(void *)&long long buf = v21;
    if (v21) {
      xpc_retain(v21);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    int v22 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9828], v22, v7);
    xpc_release((xpc_object_t)buf);
    CFTypeRef v42 = 0;
    CFMutableDictionaryRef v23 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v24 = v23;
    if (v23) {
      CFTypeRef v42 = v23;
    }
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v23, (CFTypeRef)*MEMORY[0x1E4FB95E0], v9);
    uint64_t v25 = a1[5];
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1C5767000, v25, OS_LOG_TYPE_DEFAULT, "#I Setting LAA config with: %@", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v27 = a1[9];
    int v26 = (std::__shared_weak_count *)a1[10];
    *(void *)&long long buf = v27;
    if (!v26 || (uint64_t v28 = std::__shared_weak_count::lock(v26), (*((void *)&buf + 1) = v28) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    CFTypeRef v29 = v28;
    uint64_t v30 = a1[13];
    if (v24 && (CFTypeID v31 = CFGetTypeID(v24), v31 == CFDictionaryGetTypeID()))
    {
      CFTypeRef cf = v24;
      CFRetain(v24);
    }
    else
    {
      CFTypeRef cf = 0;
    }
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 1174405120;
    v37[2] = ___ZN4coex6Module5State23handleSetLAAConfig_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    v37[3] = &__block_descriptor_tmp_265;
    v37[4] = a1;
    v37[5] = v27;
    uint64_t v38 = v29;
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v32 = _Block_copy(v37);
    CFTypeRef v33 = a1[11];
    if (v33) {
      dispatch_retain(v33);
    }
    if (v32)
    {
      long long aBlock = _Block_copy(v32);
      dispatch_object_t object = v33;
      if (!v33) {
        goto LABEL_43;
      }
    }
    else
    {
      long long aBlock = 0;
      dispatch_object_t object = v33;
      if (!v33)
      {
LABEL_43:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v30 + 48))(v30, &cf, a3, &aBlock);
        if (object) {
          dispatch_release(object);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v33) {
          dispatch_release(v33);
        }
        if (v32) {
          _Block_release(v32);
        }
        if (cf) {
          CFRelease(cf);
        }
        CFTypeRef v34 = v38;
        if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
        CFTypeRef v35 = (std::__shared_weak_count *)*((void *)&buf + 1);
        if (*((void *)&buf + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
          CFTypeRef v36 = v42;
          if (!v42)
          {
LABEL_60:
            if (v43) {
              CFRelease(v43);
            }
            return;
          }
        }
        else
        {
          CFTypeRef v36 = v42;
          if (!v42) {
            goto LABEL_60;
          }
        }
        CFRelease(v36);
        goto LABEL_60;
      }
    }
    dispatch_retain(v33);
    goto LABEL_43;
  }
  int v11 = a1[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#E Missing LAA config", (uint8_t *)&buf, 2u);
  }
}

void sub_1C57B5BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State23handleSetLAAConfig_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    BOOL v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set LAA config: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetFCMBCMAntennaMode_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "WCMCellularSetFCM_BCM_Antenna_Switching_RAT"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, "WCMCellularSetFCM_BCM_Antenna_Switching_RAT");
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned int v9 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v44 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(void *)long long buf = a2;
    xpc_object_t v39 = (uint8_t *)"WCMCellularSetFCM_BCM_Antenna_Switching_PortMapInformationSet";
    xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v44);
    *(void *)long long buf = 0;
    xpc_object_t v39 = buf;
    uint64_t v40 = 0x3002000000;
    CFTypeRef v41 = __Block_byref_object_copy__0;
    CFTypeRef v42 = __Block_byref_object_dispose__0;
    CFTypeRef cf = 0;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFTypeRef v12 = cf;
      CFTypeRef cf = Mutable;
      if (v12) {
        CFRelease(v12);
      }
    }
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 0x40000000;
    applier[2] = ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    applier[3] = &unk_1E6516D60;
    applier[4] = buf;
    xpc_array_apply(v44, applier);
    if (!CFArrayGetCount(*((CFArrayRef *)v39 + 5)))
    {
      uint64_t v28 = a1[5];
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v45) = 0;
        _os_log_debug_impl(&dword_1C5767000, v28, OS_LOG_TYPE_DEBUG, "#D Empty port map passed for FCM BCM Antenna mode", (uint8_t *)&v45, 2u);
        _Block_object_dispose(buf, 8);
        CFTypeRef v29 = cf;
        if (!cf) {
          goto LABEL_54;
        }
        goto LABEL_53;
      }
LABEL_52:
      _Block_object_dispose(buf, 8);
      CFTypeRef v29 = cf;
      if (!cf)
      {
LABEL_54:
        xpc_release(v44);
        return;
      }
LABEL_53:
      CFRelease(v29);
      goto LABEL_54;
    }
    CFTypeRef v36 = 0;
    CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v14 = v13;
    if (v13) {
      CFTypeRef v36 = v13;
    }
    ctu::cf::insert<__CFString const*,unsigned int>(v13, (CFTypeRef)*MEMORY[0x1E4FB9898], v9, v10);
    ctu::cf::insert<__CFString const*,__CFArray *>(v14, (CFTypeRef)*MEMORY[0x1E4FB99A0], *((CFTypeRef *)v39 + 5));
    CFTypeRef v35 = 0;
    CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v16 = v15;
    if (v15) {
      CFTypeRef v35 = v15;
    }
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v15, (CFTypeRef)*MEMORY[0x1E4FB9768], v14);
    xpc_object_t v17 = a1[5];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v45) = 138412290;
      *(void *)((char *)&v45 + 4) = v16;
      _os_log_impl(&dword_1C5767000, v17, OS_LOG_TYPE_DEFAULT, "#I Setting FCM BCM Antenna mode with: %@", (uint8_t *)&v45, 0xCu);
    }
    uint64_t v19 = a1[9];
    int v18 = (std::__shared_weak_count *)a1[10];
    *(void *)&long long v45 = v19;
    if (!v18 || (int v20 = std::__shared_weak_count::lock(v18), (*((void *)&v45 + 1) = v20) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    xpc_object_t v21 = v20;
    uint64_t v22 = a1[13];
    if (v16 && (CFTypeID v23 = CFGetTypeID(v16), v23 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v34 = v16;
      CFRetain(v16);
    }
    else
    {
      CFTypeRef v34 = 0;
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke_272;
    aBlock[3] = &__block_descriptor_tmp_275;
    void aBlock[4] = a1;
    aBlock[5] = v19;
    CFTypeID v31 = v21;
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    CFMutableDictionaryRef v24 = _Block_copy(aBlock);
    uint64_t v25 = a1[11];
    if (v25) {
      dispatch_retain(v25);
    }
    if (v24)
    {
      size_t v32 = _Block_copy(v24);
      dispatch_object_t object = v25;
      if (!v25)
      {
LABEL_31:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v22 + 48))(v22, &v34, a3, &v32);
        if (object) {
          dispatch_release(object);
        }
        if (v32) {
          _Block_release(v32);
        }
        if (v25) {
          dispatch_release(v25);
        }
        if (v24) {
          _Block_release(v24);
        }
        if (v34) {
          CFRelease(v34);
        }
        int v26 = v31;
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        uint64_t v27 = (std::__shared_weak_count *)*((void *)&v45 + 1);
        if (*((void *)&v45 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v45 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        if (v35) {
          CFRelease(v35);
        }
        if (v36) {
          CFRelease(v36);
        }
        goto LABEL_52;
      }
    }
    else
    {
      size_t v32 = 0;
      dispatch_object_t object = v25;
      if (!v25) {
        goto LABEL_31;
      }
    }
    dispatch_retain(v25);
    goto LABEL_31;
  }
  int v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#E Invalid RAT option passed for FCM BCM Antenna mode", buf, 2u);
  }
}

void sub_1C57B63B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, int a2, xpc_object_t object)
{
  if (object)
  {
    xpc_object_t v4 = object;
    xpc_retain(object);
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v4);
    xpc_object_t v5 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
LABEL_8:
  xpc_release(v4);
  CFMutableDictionaryRef v13 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    CFMutableDictionaryRef v13 = Mutable;
  }
  if (xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Band")
    && xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Port"))
  {
    xpc_object_t value = (ctu *)xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Band");
    ctu::xpc_to_cf((uint64_t *)&cf, value, v8);
    ctu::cf::insert<__CFString const*,void const*>(v13, (CFTypeRef)*MEMORY[0x1E4FB98C8], cf);
    if (cf) {
      CFRelease(cf);
    }
    unsigned int v9 = (ctu *)xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Port");
    ctu::xpc_to_cf((uint64_t *)&cf, v9, v10);
    ctu::cf::insert<__CFString const*,void const*>(v13, (CFTypeRef)*MEMORY[0x1E4FB98D0], cf);
    if (cf) {
      CFRelease(cf);
    }
    int v11 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    CFTypeRef cf = v13;
    if (v13)
    {
      CFRetain(v13);
      CFArrayAppendValue(v11, v13);
      CFRelease(v13);
    }
  }
  if (v13) {
    CFRelease(v13);
  }
  xpc_release(v5);
  return 1;
}

void sub_1C57B6664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke_272(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set FCM BCM Antenna mode: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetRC1DurationParam_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "kWCMCellularRC1Duration"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularRC1Duration");
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned int v9 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    xpc_release(*(xpc_object_t *)buf);
    CFTypeRef v33 = 0;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v12 = Mutable;
    if (Mutable) {
      CFTypeRef v33 = Mutable;
    }
    ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB95C8], v9, v10);
    CFTypeRef v32 = 0;
    CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v14 = v13;
    if (v13) {
      CFTypeRef v32 = v13;
    }
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v13, (CFTypeRef)*MEMORY[0x1E4FB9648], v12);
    CFMutableDictionaryRef v15 = a1[5];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl(&dword_1C5767000, v15, OS_LOG_TYPE_DEFAULT, "#I Setting RC1 duration to %u", buf, 8u);
    }
    uint64_t v17 = a1[9];
    CFMutableDictionaryRef v16 = (std::__shared_weak_count *)a1[10];
    *(void *)long long buf = v17;
    if (!v16 || (int v18 = std::__shared_weak_count::lock(v16), (v35 = v18) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v19 = v18;
    uint64_t v20 = a1[13];
    if (v14 && (CFTypeID v21 = CFGetTypeID(v14), v21 == CFDictionaryGetTypeID()))
    {
      CFTypeRef cf = v14;
      CFRetain(v14);
    }
    else
    {
      CFTypeRef cf = 0;
    }
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 1174405120;
    v27[2] = ___ZN4coex6Module5State30handleSetRC1DurationParam_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    v27[3] = &__block_descriptor_tmp_279;
    v27[4] = a1;
    v27[5] = v17;
    uint64_t v28 = v19;
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v22 = _Block_copy(v27);
    CFTypeID v23 = a1[11];
    if (v23) {
      dispatch_retain(v23);
    }
    if (v22)
    {
      long long aBlock = _Block_copy(v22);
      dispatch_object_t object = v23;
      if (!v23) {
        goto LABEL_28;
      }
    }
    else
    {
      long long aBlock = 0;
      dispatch_object_t object = v23;
      if (!v23)
      {
LABEL_28:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v20 + 48))(v20, &cf, a3, &aBlock);
        if (object) {
          dispatch_release(object);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v23) {
          dispatch_release(v23);
        }
        if (v22) {
          _Block_release(v22);
        }
        if (cf) {
          CFRelease(cf);
        }
        CFMutableDictionaryRef v24 = v28;
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        uint64_t v25 = v35;
        if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
          CFTypeRef v26 = v32;
          if (!v32)
          {
LABEL_45:
            if (v33) {
              CFRelease(v33);
            }
            return;
          }
        }
        else
        {
          CFTypeRef v26 = v32;
          if (!v32) {
            goto LABEL_45;
          }
        }
        CFRelease(v26);
        goto LABEL_45;
      }
    }
    dispatch_retain(v23);
    goto LABEL_28;
  }
  int v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#E Invalid RC1 duration passed", buf, 2u);
  }
}

void sub_1C57B6BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C57B6CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State30handleSetRC1DurationParam_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set RC1 duration; %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::convertScanFreqBandFilter_sync(uint64_t a1, xpc_object_t *a2, CFArrayRef *a3)
{
  if (MEMORY[0x1C8792D30](*a2) == MEMORY[0x1E4F14568])
  {
    if (*a3
       ? ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get
       : 0)
    {
      CFIndex Count = CFArrayGetCount(*a3);
      if (Count >= 1)
      {
        CFIndex v7 = Count;
        CFIndex v8 = 0;
        CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4FB9658];
        CFStringRef v10 = (const __CFString *)*MEMORY[0x1E4FB9538];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*a3, v8);
          if (ValueAtIndex && (CFMutableDictionaryRef v12 = ValueAtIndex, v13 = CFGetTypeID(ValueAtIndex), v13 == CFDictionaryGetTypeID()))
          {
            CFTypeRef cf = v12;
            CFRetain(v12);
            if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
            {
              v24[0] = 0xAAAAAAAAAAAAAAAALL;
              v24[1] = 0xAAAAAAAAAAAAAAAALL;
              ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v24, (const __CFDictionary *)v12);
              xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
              if (v14 || (xpc_object_t v14 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v14) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v14);
                  xpc_object_t v15 = v14;
                }
                else
                {
                  xpc_object_t v15 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v15 = xpc_null_create();
                xpc_object_t v14 = 0;
              }
              xpc_release(v14);
              int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v24, v9);
              xpc_object_t v19 = xpc_int64_create(Int);
              if (!v19) {
                xpc_object_t v19 = xpc_null_create();
              }
              xpc_dictionary_set_value(v15, "kWCMCellularScanFreqBandFilter_CenterFreq", v19);
              xpc_object_t v20 = xpc_null_create();
              xpc_release(v19);
              xpc_release(v20);
              int v21 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v24, v10);
              xpc_object_t v22 = xpc_int64_create(v21);
              if (!v22) {
                xpc_object_t v22 = xpc_null_create();
              }
              xpc_dictionary_set_value(v15, "kWCMCellularScanFreqBandFilter_Bandwidth", v22);
              xpc_object_t v23 = xpc_null_create();
              xpc_release(v22);
              xpc_release(v23);
              xpc_array_append_value(*a2, v15);
              xpc_release(v15);
              MEMORY[0x1C8791160](v24);
              goto LABEL_32;
            }
          }
          else
          {
            CFTypeRef cf = 0;
          }
          xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
          if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C8792D30](v16) == MEMORY[0x1E4F14590])
            {
              xpc_retain(v16);
              xpc_object_t v17 = v16;
            }
            else
            {
              xpc_object_t v17 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v17 = xpc_null_create();
            xpc_object_t v16 = 0;
          }
          xpc_release(v16);
          xpc_array_append_value(*a2, v17);
          xpc_release(v17);
LABEL_32:
          if (cf) {
            CFRelease(cf);
          }
          ++v8;
        }
        while (v7 != v8);
      }
    }
  }
}

void sub_1C57B70B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, const void *a12)
{
  xpc_release(v12);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleGetScanFreqBandFilter_sync(void *a1, uint64_t a2)
{
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x3002000000;
  v28[3] = __Block_byref_object_copy__280;
  v28[4] = __Block_byref_object_dispose__281;
  xpc_object_t v29 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v29 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v29 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v5) == MEMORY[0x1E4F14568])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v29 = v6;
LABEL_9:
  xpc_release(v5);
  CFTypeRef v27 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v8 = Mutable;
  if (Mutable) {
    CFTypeRef v27 = Mutable;
  }
  ctu::cf::insert<__CFString const*,BOOL>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9798], 1);
  CFStringRef v10 = (const void *)a1[9];
  CFStringRef v9 = (std::__shared_weak_count *)a1[10];
  cf[1] = v10;
  if (!v9 || (int v11 = std::__shared_weak_count::lock(v9), (v26 = v11) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFMutableDictionaryRef v12 = v11;
  uint64_t v13 = a1[13];
  if (v8 && (CFTypeID v14 = CFGetTypeID(v8), v14 == CFDictionaryGetTypeID()))
  {
    cf[0] = v8;
    CFRetain(v8);
  }
  else
  {
    cf[0] = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State32handleGetScanFreqBandFilter_syncENS_5SubIdE_block_invoke;
  aBlock[3] = &unk_1F20F1D18;
  aBlock[5] = a1;
  void aBlock[6] = v10;
  int v21 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  void aBlock[4] = v28;
  int v22 = a2;
  xpc_object_t v15 = _Block_copy(aBlock);
  xpc_object_t v16 = a1[11];
  if (v16) {
    dispatch_retain(v16);
  }
  if (v15)
  {
    xpc_object_t v23 = _Block_copy(v15);
    dispatch_object_t object = v16;
    if (!v16) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  xpc_object_t v23 = 0;
  dispatch_object_t object = v16;
  if (v16) {
LABEL_21:
  }
    dispatch_retain(v16);
LABEL_22:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v13 + 56))(v13, cf, a2, &v23);
  if (object) {
    dispatch_release(object);
  }
  if (v23) {
    _Block_release(v23);
  }
  if (v16) {
    dispatch_release(v16);
  }
  if (v15) {
    _Block_release(v15);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  xpc_object_t v17 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    int v18 = v26;
    if (!v26) {
      goto LABEL_36;
    }
  }
  else
  {
    int v18 = v26;
    if (!v26) {
      goto LABEL_36;
    }
  }
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    CFTypeRef v19 = v27;
    if (!v27) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
LABEL_36:
  CFTypeRef v19 = v27;
  if (v27) {
LABEL_37:
  }
    CFRelease(v19);
LABEL_38:
  _Block_object_dispose(v28, 8);
  xpc_release(v29);
}

void sub_1C57B74EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va3, a11);
  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  va_copy(va2, va1);
  CFTypeRef v19 = va_arg(va2, const void *);
  va_copy(va3, va2);
  uint64_t v21 = va_arg(va3, void);
  uint64_t v23 = va_arg(va3, void);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  if (v11) {
    dispatch_release(v11);
  }
  if (v12) {
    _Block_release(v12);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v13);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va3);
  _Block_object_dispose((const void *)(v14 - 112), 8);
  xpc_release(*(xpc_object_t *)(v14 - 72));
  _Unwind_Resume(a1);
}

xpc_object_t __Block_byref_object_copy__280(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  xpc_object_t result = xpc_null_create();
  *(void *)(a2 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__281(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void ___ZN4coex6Module5State32handleGetScanFreqBandFilter_syncENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *a2;
  if (*a2) {
    xpc_object_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    xpc_object_t v6 = 0;
  }
  if (v6)
  {
    CFIndex v7 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Failed to get: %@", buf, 0xCu);
    }
    goto LABEL_21;
  }
  CFDictionaryRef v8 = *a3;
  if (*a3) {
    CFStringRef v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    CFStringRef v9 = 0;
  }
  if (!v9) {
    goto LABEL_21;
  }
  memset(buf, 170, 16);
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v8);
  CFStringRef v10 = (void *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB96D8]);
  int v11 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  v17[0] = v11;
  v17[1] = v10;
  if (v11)
  {
    CFMutableDictionaryRef v12 = xpc_retain(v11);
    CFArrayRef v16 = (CFArrayRef)v10;
    if (!v10) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  CFMutableDictionaryRef v12 = xpc_null_create();
  int v11 = v12;
  CFArrayRef v16 = (CFArrayRef)v10;
  v17[0] = v12;
  if (v10) {
LABEL_15:
  }
    CFMutableDictionaryRef v12 = (void *)CFRetain(v10);
LABEL_16:
  coex::Module::State::convertScanFreqBandFilter_sync((uint64_t)v12, v17, &v16);
  if (v10) {
    CFRelease(v10);
  }
  xpc_release(v11);
  v17[0] = 0;
  if (v10) {
    CFRelease(v10);
  }
  MEMORY[0x1C8791160](buf);
LABEL_21:
  uint64_t v13 = *(void *)(v4 + 120);
  if (v13)
  {
    xpc_object_t v14 = *(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    xpc_object_t v15 = v14;
    if (v14)
    {
      xpc_retain(v14);
    }
    else
    {
      xpc_object_t v14 = xpc_null_create();
      xpc_object_t v15 = v14;
    }
    coex::XpcClient::sendMessage(v13, 305, &v15, *(_DWORD *)(a1 + 64));
    xpc_release(v14);
  }
}

void sub_1C57B77C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

xpc_object_t __Block_byref_object_copy__286(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  xpc_object_t result = xpc_null_create();
  *(void *)(a2 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__287(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_3(uint64_t a1, int64_t value)
{
  xpc_object_t v3 = xpc_int64_create(value);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_FrameOffset", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_4(uint64_t a1, int64_t value)
{
  xpc_object_t v3 = xpc_int64_create(value);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_TTDUL_DL", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_5(uint64_t a1, int64_t value)
{
  xpc_object_t v3 = xpc_int64_create(value);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_SubFrameFormat", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_6(uint64_t a1, int64_t value)
{
  xpc_object_t v3 = xpc_int64_create(value);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_ULCPConfig", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_7(uint64_t a1, int64_t value)
{
  xpc_object_t v3 = xpc_int64_create(value);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_DLCPConfig", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_8(uint64_t a1, int64_t value)
{
  xpc_object_t v3 = xpc_int64_create(value);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_LTEOffPeriod", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void coex::Module::State::sendLinkQuality_sync(uint64_t a1, int a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  CFTypeRef v28 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty(a1, coex::kKeyLinkQuality, a2, 0, (CFMutableDictionaryRef *)&v28);
  if (v28) {
    xpc_object_t v6 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    xpc_object_t v6 = 0;
  }
  if (v6)
  {
    v27[0] = 0xAAAAAAAAAAAAAAAALL;
    v27[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v27, (const __CFDictionary *)v28);
    CFIndex v7 = (void *)ctu::cf::map_adapter::copyCFNumberRef((ctu::cf::map_adapter *)v27, (const __CFString *)*MEMORY[0x1E4FB99C8]);
    CFTypeRef cf = v7;
    if (v7) {
      CFStringRef v9 = ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get;
    }
    else {
      CFStringRef v9 = 0;
    }
    if (v9)
    {
      value[0] = 0;
      ctu::cf::assign((ctu::cf *)value, (uint64_t *)v7, v8);
      xpc_object_t v10 = xpc_int64_create(value[0]);
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
      xpc_dictionary_set_value(v5, "kWCMCellularLinkQuality_SINR", v10);
      xpc_object_t v11 = xpc_null_create();
      xpc_release(v10);
      xpc_release(v11);
    }
    CFDictionaryRef v12 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)v27, (const __CFString *)*MEMORY[0x1E4FB9668]);
    CFDictionaryRef v25 = v12;
    if (v12) {
      uint64_t v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v13)
    {
      value[0] = 0xAAAAAAAAAAAAAAAALL;
      value[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)value, v12);
      int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)value, (const __CFString *)*MEMORY[0x1E4FB9578]);
      int v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)value, (const __CFString *)*MEMORY[0x1E4FB9860]);
      double v16 = (double)Int;
      xpc_object_t v17 = xpc_double_create((double)Int);
      if (!v17) {
        xpc_object_t v17 = xpc_null_create();
      }
      xpc_dictionary_set_value(v5, "kWCMCellularLinkQuality_BLERBlockCount", v17);
      xpc_object_t v18 = xpc_null_create();
      xpc_release(v17);
      xpc_release(v18);
      xpc_object_t v19 = xpc_double_create((double)v15 / v16);
      if (!v19) {
        xpc_object_t v19 = xpc_null_create();
      }
      xpc_dictionary_set_value(v5, "kWCMCellularLinkQuality_BLER", v19);
      xpc_object_t v20 = xpc_null_create();
      xpc_release(v19);
      xpc_release(v20);
      MEMORY[0x1C8791160](value);
      CFDictionaryRef v12 = v25;
    }
    if (v12) {
      CFRelease(v12);
    }
    if (cf) {
      CFRelease(cf);
    }
    MEMORY[0x1C8791160](v27);
  }
  uint64_t v21 = *(void *)(a1 + 120);
  if (v21)
  {
    uint64_t v23 = v5;
    if (v5)
    {
      xpc_retain(v5);
      xpc_object_t v22 = v23;
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
      uint64_t v23 = v22;
    }
    coex::XpcClient::sendMessage(v21, 302, &v23, a2);
    xpc_release(v22);
    uint64_t v23 = 0;
  }
  if (v28) {
    CFRelease(v28);
  }
  xpc_release(v5);
}

void sub_1C57B7FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  CFIndex v7 = va_arg(va2, const void *);
  va_copy(va3, va2);
  CFStringRef v9 = va_arg(va3, const void *);
  va_copy(va4, va3);
  uint64_t v11 = va_arg(va4, void);
  uint64_t v13 = va_arg(va4, void);
  MEMORY[0x1C8791160]((uint64_t *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)va2);
  MEMORY[0x1C8791160]((uint64_t *)va3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va4);
  xpc_release(v2);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke(uint64_t a1, int a2)
{
  xpc_object_t v3 = xpc_int64_create(a2);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularThresholdReached_EventData", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke_2(uint64_t a1, int a2)
{
  xpc_object_t v3 = xpc_int64_create(a2);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularThresholdReached_EventData", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

CFTypeRef __copy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

const void **ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void ___ZN4coex6Module5State23setLinkQualityMode_syncEjNS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    xpc_object_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    xpc_object_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_error_impl(&dword_1C5767000, v4, OS_LOG_TYPE_ERROR, "Failed to set SINR and/or BLER: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

uint64_t *std::list<std::pair<unsigned long long,unsigned int>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        int v5 = (uint64_t *)v2[1];
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "coex.mod");
}

uint64_t ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void coex::CoexCache::~CoexCache(coex::CoexCache *this)
{
  uint64_t v2 = (const void *)*((void *)this + 3);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 2);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 1);
  if (v4) {
    CFRelease(v4);
  }
  if (*(void *)this) {
    CFRelease(*(CFTypeRef *)this);
  }
}

void *ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F1E90;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F1E90;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void boost::signals2::detail::connection_body_base::disconnect(boost::signals2::detail::connection_body_base *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[8] = v2;
  v6[9] = v2;
  void v6[6] = v2;
  v6[7] = v2;
  void v6[4] = v2;
  v6[5] = v2;
  void v6[2] = v2;
  v6[3] = v2;
  v6[0] = v2;
  v6[1] = v2;
  unint64_t v7 = 10;
  std::string __p = v6;
  uint64_t v9 = 0;
  xpc_object_t v10 = this;
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(void *)this + 24))(this);
  if (*((unsigned char *)this + 24))
  {
    *((unsigned char *)this + 24) = 0;
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(this, v6);
  }
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(void *)v10 + 32))(v10);
  uint64_t v3 = (char *)__p;
  if (__p)
  {
    if (v9 - 1 >= 0)
    {
      uint64_t v4 = (char *)__p + 16 * v9;
      do
      {
        int v5 = (atomic_uint *)*((void *)v4 - 1);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v3);
    }
    if (v7 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_1C57B8600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C57B8614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body_base>::~shared_ptr(uint64_t a1)
{
  long long v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184));
  unint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      unint64_t v4 = v2 + 16 * v3;
      do
      {
        int v5 = *(atomic_uint **)(v4 - 8);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<void>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(_DWORD *a1, void *a2)
{
  int v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)a1 + 40))(&v8);
    uint64_t v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1)) {
        unint64_t v5 = v4 + 1;
      }
      else {
        unint64_t v5 = 4 * v4;
      }
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      uint64_t v4 = a2[22];
    }
    uint64_t v6 = *((void *)&v8 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v8;
    if (v6)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
      uint64_t v4 = a2[22];
    }
    a2[22] = v4 + 1;
    unint64_t v7 = (atomic_uint *)*((void *)&v8 + 1);
    if (*((void *)&v8 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
      if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
      }
    }
  }
}

void sub_1C57B8AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (void *)a1;
  if (a2 >= 0xB)
  {
    if (a2 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v4 = operator new(16 * a2);
  }
  uint64_t v6 = *(void **)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  if (v5)
  {
    unint64_t v7 = &v6[2 * v5];
    long long v8 = v4;
    do
    {
      uint64_t v9 = v6[1];
      *long long v8 = *v6;
      v8[1] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v7);
    uint64_t v6 = *(void **)(a1 + 168);
  }
  if (v6)
  {
    uint64_t v10 = *(void *)(a1 + 176);
    if (v10 - 1 >= 0)
    {
      uint64_t v11 = &v6[2 * v10];
      do
      {
        CFDictionaryRef v12 = (atomic_uint *)*(v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 2;
      }
      while (v11 > v6);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  *(void *)(a1 + 160) = a2;
  *(void *)(a1 + 168) = v4;
}

void std::__shared_ptr_pointer<coex::Module *,std::shared_ptr<coex::Module>::__shared_ptr_default_delete<coex::Module,coex::Module>,std::allocator<coex::Module>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<coex::Module *,std::shared_ptr<coex::Module>::__shared_ptr_default_delete<coex::Module,coex::Module>,std::allocator<coex::Module>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<coex::Module *,std::shared_ptr<coex::Module>::__shared_ptr_default_delete<coex::Module,coex::Module>,std::allocator<coex::Module>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599C2A3) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599C2A3 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599C2A3)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599C2A3 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_pointer<coex::Module::State *,std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State *)#1},std::allocator<coex::Module::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<coex::Module::State *,std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State *)#1},std::allocator<coex::Module::State>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<coex::Module::State *,std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State *)#1},std::allocator<coex::Module::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared"
                                "_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State*)#1}::operator() const(coex::Module::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F1E90;
  MEMORY[0x1C8790F40](a1 + 1);
  int v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t a1)
{
  int v2 = *(uint64_t **)a1;
  coex::Module::State::sendWWANState_sync(**(void **)a1, *(unsigned int *)(*(void *)a1 + 8));
  operator delete(v2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C57B8F94(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t a1)
{
  int v2 = *(uint64_t **)a1;
  coex::Module::State::sendLinkQuality_sync(**(void **)a1, *(_DWORD *)(*(void *)a1 + 8));
  operator delete(v2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C57B90B8(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14568]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetNetworkConfigOfInterest_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C57B9210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  uint64_t v3 = *(void **)(*a1 + 8);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetTxPowerLimit_sync(v4, (xpc *)&object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C57B9360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  uint64_t v3 = *(void **)(*a1 + 8);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetWCI2TxPowerLimit_sync(v4, (xpc *)&object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C57B94B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb4_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(xpc_object_t **a1)
{
  int v2 = *a1;
  xpc_object_t v4 = **a1;
  xpc_object_t v3 = (*a1)[1];
  if (v3 && MEMORY[0x1C8792D30]((*a1)[1]) == MEMORY[0x1E4F14590]) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  uint64_t v5 = *((void *)v4 + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v7[0] = 0;
    _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "WCMCellularSetWCI2CalibrationInfo not supported", (uint8_t *)v7, 2u);
  }
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb6_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = *(uint64_t **)a1;
  uint64_t v4 = **(void **)a1;
  xpc_object_t v3 = *(xpc_object_t *)(*(void *)a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetLinkQualityMode_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C57B9750(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb7_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14568]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetScanFreqBandFilter_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C57B98C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb8_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = (void **)*a1;
  coex::Module::State::handleGetScanFreqBandFilter_sync(*(void **)*a1, *(unsigned int *)(*a1 + 8));
  operator delete(v2);
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = a1;
  }
  else
  {
    uint64_t v4 = a1;
  }
  operator delete(v4);
}

void sub_1C57B9A04(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb9_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetWiFiStatus_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C57B9B6C(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb10_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetLAAConfig_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C57B9CF0(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb11_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = (void *)*a1;
  xpc_object_t v3 = *(void **)*a1;
  uint64_t v4 = *(void **)(*a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetFCMBCMAntennaMode_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C57B9E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb12_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetRC1DurationParam_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C57B9FE8(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb13_E4__14EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetTimeShareConfigReq_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C57BA15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb14_E4__15EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetWCI2TxAntMap_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C57BA2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb15_E4__16EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  uint64_t v4 = *(void **)(*a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetAntBlocking_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C57BA444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb16_E4__17EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetClientAntBlocking_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C57BA5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb17_E4__18EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetClientAntBlockingExtended_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C57BA72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb18_E4__19EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleTriggerAntennaBlocking_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C57BA8B0(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb19_E4__20EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetCC1_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C57BAA34(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb20_E4__21EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetCC2_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C57BABB8(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb21_E4__22EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetLaaGpioThrottle_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C57BAD3C(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb22_E4__23EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  int v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetGnssParams_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C57BAEC0(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvvENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEEEENS7_5mutexEEES3_vJEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[5];
  uint64_t v2 = a1[6];
  xpc_object_t v3 = (void *)(a1[4] + (v2 >> 1) - 72);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void **boost::signals2::slot<void ()(void),boost::function<void ()(void)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      xpc_object_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    xpc_object_t v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      xpc_object_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(uint64_t a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 184));
  unint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      unint64_t v4 = v2 + 16 * v3;
      do
      {
        uint64_t v5 = *(atomic_uint **)(v4 - 8);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        xpc_object_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          xpc_object_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>(_DWORD *a1, void *a2)
{
  int v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)a1 + 40))(&v8);
    uint64_t v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1)) {
        unint64_t v5 = v4 + 1;
      }
      else {
        unint64_t v5 = 4 * v4;
      }
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      uint64_t v4 = a2[22];
    }
    uint64_t v6 = *((void *)&v8 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v8;
    if (v6)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
      uint64_t v4 = a2[22];
    }
    a2[22] = v4 + 1;
    unint64_t v7 = (atomic_uint *)*((void *)&v8 + 1);
    if (*((void *)&v8 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
      if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
      }
    }
  }
}

void sub_1C57BB730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::signals2::detail::connection_body_base::~connection_body_base(boost::signals2::detail::connection_body_base *this)
{
  *(void *)this = &unk_1F20F20E8;
  uint64_t v1 = (atomic_uint *)*((void *)this + 2);
  if (v1)
  {
    if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
    }
  }
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  v14[4] = v2;
  v14[5] = v2;
  void v14[2] = v2;
  void v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  double v16 = (char *)v14;
  uint64_t v17 = 0;
  xpc_object_t v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v5, (uint64_t)v19);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          long long v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  uint64_t v10 = v16;
  if (v16)
  {
    if (v17 - 1 >= 0)
    {
      uint64_t v11 = &v16[16 * v17];
      do
      {
        CFDictionaryRef v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(v16);
    }
  }
  return v9 != 0;
}

void sub_1C57BBAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    char v7 = (char *)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[24 * v6];
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__construct_at_end<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>((uint64_t)a1, v3, v4);
  }
  return a1;
}

void sub_1C57BBD70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int64_t v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v4);
      }
      while ((void *)v4 != v3);
      int64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__construct_at_end<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v4 + v7;
      uint64_t v9 = a2 + v7;
      if ((*(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31)) == 2)
      {
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(v9 + 8) + 32))(*(void *)(v9 + 8));
        *(void *)(v8 + 8) = result;
      }
      else
      {
        *(void *)(v8 + 8) = *(void *)(v9 + 8);
        uint64_t v10 = *(void *)(a2 + v7 + 16);
        *(void *)(v4 + v7 + 16) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 12), 1u, memory_order_relaxed);
        }
      }
      *(_DWORD *)uint64_t v8 = *(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(void *)(v3 + 8) = v4;
  return result;
}

void sub_1C57BBEA4(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 24)
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v2 - 24 + v3);
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

atomic_uint *boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if (v1 == 2)
  {
    uint64_t result = *(atomic_uint **)(a1 + 8);
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (atomic_uint *)v3();
    }
  }
  else if (v1 == 1)
  {
    uint64_t result = *(atomic_uint **)(a1 + 16);
    if (result && atomic_fetch_add(result + 3, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 24))(result);
    }
  }
  else
  {
    uint64_t result = *(atomic_uint **)(a1 + 16);
    if (result && atomic_fetch_add(result + 3, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 24))(result);
    }
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::dispose(uint64_t a1)
{
  int v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      unint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        unint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1F20F2080;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1F20F20E8;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(uint64_t a1)
{
  if (*(_DWORD *)a1 == *(int *)a1 >> 31)
  {
    unint64_t v2 = *(atomic_uint **)(a1 + 16);
    if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  return a1;
}

uint64_t boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)result ^ (*(int *)result >> 31);
  if (v3 == 2)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(result + 8) + 16))(&v8);
    *(void *)(a2 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    *(_DWORD *)a2 = 1;
    uint64_t result = v8;
    if (v8) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  else if (v3 == 1)
  {
    uint64_t v4 = *(void *)(result + 16);
    if (v4)
    {
      uint64_t v5 = *(unsigned int *)(v4 + 8);
      while (v5)
      {
        uint64_t v6 = v5;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v4 + 8), (unsigned int *)&v6, v5 + 1, memory_order_relaxed, memory_order_relaxed);
        BOOL v7 = v6 == v5;
        uint64_t v5 = v6;
        if (v7)
        {
          *(void *)(a2 + 8) = *(void *)(result + 8);
          *(void *)(a2 + 16) = v4;
          *(_DWORD *)a2 = 0;
          return result;
        }
      }
      uint64_t v4 = 0;
    }
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = v4;
    *(_DWORD *)a2 = 0;
  }
  else
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_1C57BC480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(void)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      int v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      uint64_t v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001C599C781 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001C599C781 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      uint64_t v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    BOOL v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      BOOL v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      uint64_t v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker0<ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>,void>::invoke(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)a1;
  int v1 = *(const void **)(a1 + 8);
  if (!v1)
  {
    uint64_t v4 = 0;
    goto LABEL_10;
  }
  int v3 = _Block_copy(v1);
  uint64_t v4 = v3;
  if (!v3)
  {
LABEL_10:
    char v16 = 1;
LABEL_11:
    unint64_t v15 = 0;
    v20[0] = 0;
    goto LABEL_21;
  }
  uint64_t v5 = _Block_copy(v3);
  uint64_t v6 = v5;
  if (!v5)
  {
    char v16 = 0;
    goto LABEL_11;
  }
  BOOL v7 = _Block_copy(v5);
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = _Block_copy(v7);
    uint64_t v10 = v9;
    if (v9)
    {
      uint64_t v11 = _Block_copy(v9);
      CFDictionaryRef v12 = v11;
      if (v11)
      {
        uint64_t v13 = _Block_copy(v11);
        xpc_object_t v14 = v13;
        if (v13)
        {
          unint64_t v15 = _Block_copy(v13);
          v20[0] = v15;
          _Block_release(v14);
        }
        else
        {
          unint64_t v15 = 0;
          v20[0] = 0;
        }
        _Block_release(v12);
      }
      else
      {
        unint64_t v15 = 0;
        v20[0] = 0;
      }
      _Block_release(v10);
    }
    else
    {
      unint64_t v15 = 0;
      v20[0] = 0;
    }
    _Block_release(v8);
  }
  else
  {
    unint64_t v15 = 0;
    v20[0] = 0;
  }
  _Block_release(v6);
  char v16 = 0;
LABEL_21:
  uint64_t v17 = operator new(0x20uLL);
  *uint64_t v17 = boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable;
  if (v15) {
    xpc_object_t v18 = _Block_copy(v15);
  }
  else {
    xpc_object_t v18 = 0;
  }
  v17[1] = v18;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvvEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_379;
  void block[4] = v17;
  dispatch_async(v2, block);
  if (boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable)
  {
    if ((boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable & 1) == 0)
    {
      xpc_object_t v19 = *(void (**)(void *, void *, uint64_t))((unint64_t)boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v19) {
        v19(v20, v20, 2);
      }
    }
  }
  if ((v16 & 1) == 0) {
    _Block_release(v4);
  }
}

void sub_1C57BC8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    _Block_release(v11);
  }
  if ((v12 & 1) == 0) {
    _Block_release(v10);
  }
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvvEEE_block_invoke(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v6, "call to empty boost::function");
    v6.__vftable = (std::runtime_error_vtbl *)&unk_1F20F2330;
    boost::throw_exception<boost::bad_function_call>(&v6);
  }
  (*(void (**)(void *))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1);
  int v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        uint64_t v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5) {
          v5(v3 + 1, v3 + 1, 2);
        }
      }
      *int v3 = 0;
    }
    operator delete(v3);
  }
}

void sub_1C57BC9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C57BCA14(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &unk_1F20F2300;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1F20F2288;
  *(void *)(a1 + 8) = &unk_1F20F22B8;
  *(void *)(a1 + 24) = &unk_1F20F22E0;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F20F2358;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *boost::wrapexcept<boost::bad_function_call>::clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1F20F2300;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((void *)v2 + 1) = &unk_1F20F2330;
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)v2 + 3) = &unk_1F20F2358;
  *((void *)v2 + 4) = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(void *)uint64_t v2 = &unk_1F20F2288;
  *((void *)v2 + 1) = &unk_1F20F22B8;
  *((void *)v2 + 3) = &unk_1F20F22E0;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_1C57BCC98(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C57BCCB4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C57BCD30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F20F2358;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  operator delete((void *)a1);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1F20F2358;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

{
  const char *imp;
  uint64_t vars8;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1F20F2358;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);

  operator delete(&this[-1].__imp_);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F20F2358;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(a1 - 1);
}

{
  const char *imp;
  uint64_t vars8;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F20F2358;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);

  operator delete(&a1[-2].__imp_);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  operator delete(v1);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F20F2300;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1F20F2330;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1F20F2358;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1F20F2288;
  *(void *)(a1 + 8) = &unk_1F20F22B8;
  *(void *)(a1 + 24) = &unk_1F20F22E0;
  return a1;
}

void sub_1C57BD1CC(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    uint64_t v5 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    uint64_t result = *(void *)(a1 + 8);
    if (!result) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 40))(&v7);
  uint64_t v5 = v7;
  uint64_t v8 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
    }
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
LABEL_8:
  }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
LABEL_9:
  *(void *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  return result;
}

void sub_1C57BD360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1C57BD380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C57BD394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(void)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      uint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001C599C843 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001C599C843 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    std::runtime_error v6 = *a1;
    if (*a1) {
      std::runtime_error v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      uint64_t v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker0<dispatch::block<void({block_pointer})(void)>,void>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t boost::function0<void>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        std::runtime_error v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    *uint64_t v2 = 0;
  }
  return result;
}

void sub_1C57BD550(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_1C57BD560(_Unwind_Exception *a1)
{
}

uint64_t *boost::function0<void>::~function0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v21 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v7 = (char *)operator new(24 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v8 = (int *)&v7[24 * v3];
  std::string __p = v7;
  xpc_object_t v18 = v8;
  xpc_object_t v19 = v8;
  xpc_object_t v20 = &v7[24 * v6];
  uint64_t v9 = v8 + 2;
  uint64_t v10 = a2 + 8;
  int v11 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  if (v11 == 2)
  {
    *uint64_t v9 = (*(uint64_t (**)(void))(**(void **)v10 + 32))();
    int v11 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
    char v12 = v19;
  }
  else
  {
    if (v11 != 1) {
      int v11 = 0;
    }
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *(void *)uint64_t v10 = 0;
    *(void *)(a2 + 16) = 0;
    char v12 = v8;
  }
  *uint64_t v8 = v11;
  xpc_object_t v19 = v12 + 6;
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  unint64_t v15 = v18;
  for (size_t i = v19; v19 != v15; size_t i = v19)
  {
    xpc_object_t v19 = i - 6;
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)(i - 6));
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_1C57BD75C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  unint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + v7;
      uint64_t v9 = v4 + v7;
      if ((*(_DWORD *)(v4 + v7 - 24) ^ (*(int *)(v4 + v7 - 24) >> 31)) == 2)
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v9 - 16) + 32))(*(void *)(v9 - 16));
        *(void *)(v8 - 16) = result;
      }
      else
      {
        *(void *)(v8 - 16) = *(void *)(v9 - 16);
        uint64_t v10 = *(void *)(v4 + v7 - 8);
        *(void *)(v6 + v7 - 8) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 12), 1u, memory_order_relaxed);
        }
      }
      *(_DWORD *)(v8 - 24) = *(_DWORD *)(v9 - 24) ^ (*(int *)(v9 - 24) >> 31);
      v7 -= 24;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v11 = *v3;
  *unint64_t v3 = v6;
  a2[1] = v11;
  uint64_t v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void sub_1C57BD89C(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 24)
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(i - 24);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::~foreign_weak_ptr_impl(void *a1)
{
  *a1 = &unk_1F20F2398;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::~foreign_weak_ptr_impl(void *__p)
{
  *std::string __p = &unk_1F20F2398;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F20F2398;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<coex::Module::State>>::~foreign_shared_ptr_impl(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_1F20F23F8;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void **boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    uint64_t v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  v14[4] = v2;
  v14[5] = v2;
  void v14[2] = v2;
  void v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  char v16 = (char *)v14;
  uint64_t v17 = 0;
  xpc_object_t v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v5, (uint64_t)v19);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          uint64_t v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  uint64_t v10 = v16;
  if (v16)
  {
    if (v17 - 1 >= 0)
    {
      uint64_t v11 = &v16[16 * v17];
      do
      {
        uint64_t v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(v16);
    }
  }
  return v9 != 0;
}

void sub_1C57BE2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      uint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1F20F2508;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1F20F20E8;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001C599CDD1 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001C599CDD1 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      uint64_t v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    char v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      char v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      uint64_t v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

uint64_t boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    *uint64_t v2 = 0;
  }
  return result;
}

void sub_1C57BE9B4(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_1C57BE9C4(_Unwind_Exception *a1)
{
}

uint64_t *boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::~function2(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISA_EENSG_IFvRKNS7_10connectionES9_EEENS7_5mutexEEES3_vJS9_EEEDTcl7connectfp_cvNSD_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FST_SV_E_block_invoke(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[5];
  uint64_t v2 = a1[6];
  uint64_t v3 = (void *)(a1[4] + (v2 >> 1) - 72);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void **boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    uint64_t v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  v14[4] = v2;
  v14[5] = v2;
  void v14[2] = v2;
  void v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  char v16 = (char *)v14;
  uint64_t v17 = 0;
  xpc_object_t v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v5, (uint64_t)v19);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          uint64_t v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  uint64_t v10 = v16;
  if (v16)
  {
    if (v17 - 1 >= 0)
    {
      uint64_t v11 = &v16[16 * v17];
      do
      {
        uint64_t v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(v16);
    }
  }
  return v9 != 0;
}

void sub_1C57BF2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      uint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1F20F2720;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1F20F20E8;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(coex::SubId)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001C599D212 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001C599D212 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      uint64_t v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    char v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      char v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      uint64_t v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>,void,coex::SubId>::invoke(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)a1;
  uint64_t v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = _Block_copy(v3);
  uint64_t v6 = v5;
  if (!v5)
  {
LABEL_10:
    char v18 = 1;
LABEL_11:
    uint64_t v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  char v7 = _Block_copy(v5);
  uint64_t v8 = v7;
  if (!v7)
  {
    char v18 = 0;
    goto LABEL_11;
  }
  int v9 = _Block_copy(v7);
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = _Block_copy(v9);
    uint64_t v12 = v11;
    if (v11)
    {
      uint64_t v13 = _Block_copy(v11);
      xpc_object_t v14 = v13;
      if (v13)
      {
        unint64_t v15 = _Block_copy(v13);
        char v16 = v15;
        if (v15)
        {
          uint64_t v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          uint64_t v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        uint64_t v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      uint64_t v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    uint64_t v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  char v18 = 0;
LABEL_21:
  xpc_object_t v19 = operator new(4uLL);
  _DWORD *v19 = a2;
  xpc_object_t v20 = operator new(0x20uLL);
  *xpc_object_t v20 = boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable;
  if (v17) {
    uint64_t v21 = _Block_copy(v17);
  }
  else {
    uint64_t v21 = 0;
  }
  v20[1] = v21;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN4coex5SubIdEEEES4__block_invoke;
  block[3] = &__block_descriptor_tmp_403;
  void block[4] = v20;
  void block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable)
  {
    if ((boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable & 1) == 0)
    {
      xpc_object_t v22 = *(void (**)(void *, void *, uint64_t))((unint64_t)boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22) {
        v22(v23, v23, 2);
      }
    }
  }
  if ((v18 & 1) == 0) {
    _Block_release(v6);
  }
}

void sub_1C57BFB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v10) {
    _Block_release(v10);
  }
  if ((v11 & 1) == 0) {
    _Block_release(v9);
  }
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN4coex5SubIdEEEES4__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_1F20F2330;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(void *, void))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned int **)(a1 + 40));
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        uint64_t v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5) {
          v5(v3 + 1, v3 + 1, 2);
        }
      }
      *uint64_t v3 = 0;
    }
    operator delete(v3);
  }
  uint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1C57BFC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(coex::SubId)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      uint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001C599D25CLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001C599D25CLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      std::runtime_error v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    uint64_t v6 = *a1;
    if (*a1) {
      uint64_t v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      std::runtime_error v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(coex::SubId)>,void,coex::SubId>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t boost::function1<void,coex::SubId>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    *uint64_t v2 = 0;
  }
  return result;
}

void sub_1C57BFE14(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_1C57BFE24(_Unwind_Exception *a1)
{
}

uint64_t *boost::function1<void,coex::SubId>::~function1(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void **boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    uint64_t v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  v14[4] = v2;
  v14[5] = v2;
  void v14[2] = v2;
  void v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  char v16 = (char *)v14;
  uint64_t v17 = 0;
  char v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v5, (uint64_t)v19);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          uint64_t v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  uint64_t v10 = v16;
  if (v16)
  {
    if (v17 - 1 >= 0)
    {
      char v11 = &v16[16 * v17];
      do
      {
        uint64_t v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(v16);
    }
  }
  return v9 != 0;
}

void sub_1C57C06D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      uint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1F20F2938;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1F20F20E8;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001C599D7D0 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001C599D7D0 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      uint64_t v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    char v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      char v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      uint64_t v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

uint64_t boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    *uint64_t v2 = 0;
  }
  return result;
}

void sub_1C57C0D94(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_1C57C0DA4(_Unwind_Exception *a1)
{
}

uint64_t *boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::~function2(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIKN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIKN4coex6Module5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ctu::cf::insert<__CFString const*,__CFBoolean const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C57C0F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C57C0F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFDictionary const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C57C0FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C57C1010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,int>(__CFDictionary *a1, CFTypeRef cf, int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  int valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C57C10C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C57C10E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,BOOL>(CFMutableDictionaryRef theDict, CFTypeRef cf, int a3)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v6 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!a3) {
    uint64_t v6 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  long long v7 = *v6;
  if (cf && v7)
  {
    CFDictionaryAddValue(theDict, cf, v7);
  }
  else if (!v7)
  {
    goto LABEL_10;
  }
  CFRelease(v7);
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C57C1194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void ctu::cf::insert<__CFString const*,unsigned short>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C57C1258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C57C127C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,unsigned char>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C57C1330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C57C1354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,void const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C57C13E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C57C140C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_339()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C5767000);
  }
  return result;
}

_DWORD *BasebandTransport::getSupportedProtocols@<X0>(BasebandTransport *this@<X0>, void *a2@<X8>)
{
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  uint64_t result = (_DWORD *)capabilities::radio::vendor(this);
  if (result == 1)
  {
    uint64_t v13 = operator new(0x18uLL);
    v13[4] = 0;
    *(void *)uint64_t v13 = &v33;
    *((void *)v13 + 1) = &v33;
    CFTypeRef v34 = v13;
    xpc_object_t v14 = operator new(0x18uLL);
    v14[4] = 1;
    *(void *)xpc_object_t v14 = v13;
    *((void *)v14 + 1) = &v33;
    *((void *)v13 + 1) = v14;
    unint64_t v15 = operator new(0x18uLL);
    v15[4] = 2;
    *(void *)unint64_t v15 = v14;
    *((void *)v15 + 1) = &v33;
    *((void *)v14 + 1) = v15;
    char v16 = operator new(0x18uLL);
    v16[4] = 3;
    *(void *)char v16 = v15;
    *((void *)v16 + 1) = &v33;
    *((void *)v15 + 1) = v16;
    uint64_t v17 = operator new(0x18uLL);
    v17[4] = 4;
    *(void *)uint64_t v17 = v16;
    *((void *)v17 + 1) = &v33;
    *((void *)v16 + 1) = v17;
    char v18 = operator new(0x18uLL);
    v18[4] = 5;
    *(void *)char v18 = v17;
    *((void *)v18 + 1) = &v33;
    *((void *)v17 + 1) = v18;
    xpc_object_t v19 = operator new(0x18uLL);
    void v19[4] = 10;
    *(void *)xpc_object_t v19 = v18;
    *((void *)v19 + 1) = &v33;
    *((void *)v18 + 1) = v19;
    xpc_object_t v20 = operator new(0x18uLL);
    v20[4] = 12;
    *(void *)xpc_object_t v20 = v19;
    *((void *)v20 + 1) = &v33;
    *((void *)v19 + 1) = v20;
    uint64_t v21 = operator new(0x18uLL);
    v21[4] = 14;
    *(void *)uint64_t v21 = v20;
    *((void *)v21 + 1) = &v33;
    *((void *)v20 + 1) = v21;
    CFTypeRef v33 = v21;
    uint64_t v35 = 9;
    uint64_t result = (_DWORD *)capabilities::radio::mav20Plus((capabilities::radio *)v21);
    if (result)
    {
      xpc_object_t v22 = operator new(0x18uLL);
      v22[4] = 11;
      uint64_t v23 = v33;
      *(void *)xpc_object_t v22 = v33;
      *((void *)v22 + 1) = &v33;
      v23[1] = v22;
      uint64_t v24 = v35;
      CFTypeRef v33 = v22;
      ++v35;
      uint64_t result = operator new(0x18uLL);
      result[4] = 15;
      *(void *)uint64_t result = v22;
      *((void *)result + 1) = &v33;
      *((void *)v22 + 1) = result;
      CFTypeRef v33 = result;
      uint64_t v35 = v24 + 2;
    }
    if (a2[2])
    {
      uint64_t v25 = *a2;
      uint64_t result = (_DWORD *)a2[1];
      uint64_t v26 = *(void *)result;
      *(void *)(v26 + 8) = *(void *)(*a2 + 8);
      **(void **)(v25 + 8) = v26;
      a2[2] = 0;
      if (result != (_DWORD *)a2)
      {
        do
        {
          CFTypeRef v27 = (void *)*((void *)result + 1);
          operator delete(result);
          uint64_t result = v27;
        }
        while (v27 != a2);
      }
    }
  }
  else
  {
    if (result != 2) {
      return result;
    }
    uint64_t v4 = operator new(0x18uLL);
    v4[4] = 6;
    *(void *)uint64_t v4 = &v33;
    *((void *)v4 + 1) = &v33;
    CFTypeRef v34 = v4;
    uint64_t v5 = operator new(0x18uLL);
    v5[4] = 7;
    *(void *)uint64_t v5 = v4;
    *((void *)v5 + 1) = &v33;
    *((void *)v4 + 1) = v5;
    uint64_t v6 = operator new(0x18uLL);
    void v6[4] = 8;
    *(void *)uint64_t v6 = v5;
    *((void *)v6 + 1) = &v33;
    *((void *)v5 + 1) = v6;
    long long v7 = operator new(0x18uLL);
    v7[4] = 9;
    *(void *)long long v7 = v6;
    *((void *)v7 + 1) = &v33;
    *((void *)v6 + 1) = v7;
    CFNumberRef v8 = operator new(0x18uLL);
    v8[4] = 10;
    *(void *)CFNumberRef v8 = v7;
    *((void *)v8 + 1) = &v33;
    *((void *)v7 + 1) = v8;
    CFTypeRef v33 = v8;
    uint64_t v35 = 5;
    uint64_t result = (_DWORD *)capabilities::abs::supportsETSProtocol((capabilities::abs *)v8);
    if (result)
    {
      uint64_t result = operator new(0x18uLL);
      result[4] = 13;
      CFNumberRef v9 = v33;
      *(void *)uint64_t result = v33;
      *((void *)result + 1) = &v33;
      v9[1] = result;
      CFTypeRef v33 = result;
      ++v35;
    }
    if (a2[2])
    {
      uint64_t v10 = *a2;
      uint64_t result = (_DWORD *)a2[1];
      uint64_t v11 = *(void *)result;
      *(void *)(v11 + 8) = *(void *)(*a2 + 8);
      **(void **)(v10 + 8) = v11;
      a2[2] = 0;
      if (result != (_DWORD *)a2)
      {
        do
        {
          uint64_t v12 = (void *)*((void *)result + 1);
          operator delete(result);
          uint64_t result = v12;
        }
        while (v12 != a2);
      }
    }
  }
  uint64_t v28 = v35;
  if (v35)
  {
    uint64_t v30 = v33;
    xpc_object_t v29 = v34;
    uint64_t v31 = *v34;
    *(void *)(v31 + 8) = v33[1];
    *(void *)v30[1] = v31;
    uint64_t v32 = *a2;
    *(void *)(v32 + 8) = v29;
    void *v29 = v32;
    *a2 = v30;
    v30[1] = a2;
    a2[2] += v28;
  }
  return result;
}

void sub_1C57C17C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::list<std::pair<unsigned long long,unsigned int>>::~list((uint64_t *)va);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v2);
  _Unwind_Resume(a1);
}

void sub_1C57C17F4(_Unwind_Exception *a1)
{
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_1C57C180C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  do
  {
    char v16 = (void *)v13[1];
    operator delete(v13);
    uint64_t v13 = v16;
  }
  while (v16 != v14);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v12);
  _Unwind_Resume(a1);
}

void BasebandTransport::getSupportedProtocolsAsStringLowerCase(BasebandTransport *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  memset(v20, 170, sizeof(v20));
  BasebandTransport::getSupportedProtocols(this, v20);
  for (uint64_t i = v20[1]; (void *)i != v20; uint64_t i = *(void *)(i + 8))
  {
    int v4 = *(_DWORD *)(i + 16);
    memset(v19, 170, sizeof(v19));
    switch(v4)
    {
      case 0:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4997712;
        goto LABEL_30;
      case 1:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4997715;
        goto LABEL_30;
      case 2:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1195460932;
        goto LABEL_26;
      case 3:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1397114194;
        goto LABEL_26;
      case 4:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX1");
        char v7 = 1;
        break;
      case 5:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX2");
        char v7 = 1;
        break;
      case 6:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5066578;
        goto LABEL_30;
      case 7:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1414483778;
        goto LABEL_26;
      case 8:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4805185;
        goto LABEL_30;
      case 9:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5526611;
        goto LABEL_30;
      case 10:
        char v10 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 2;
        strcpy((char *)v19, "AT");
        char v5 = 1;
        break;
      case 11:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1280328769;
        goto LABEL_26;
      case 12:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 8;
        strcpy((char *)v19, "MEDIACTL");
        break;
      case 13:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5461061;
        goto LABEL_30;
      case 14:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        strcpy((char *)v19, "GNSS");
        char v6 = 1;
        break;
      case 15:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1397965905;
        goto LABEL_26;
      case 16:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "RCTTH");
        char v7 = 1;
        break;
      case 17:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5260097;
        goto LABEL_30;
      case 18:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1297040214;
        goto LABEL_26;
      case 19:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1129335117;
LABEL_26:
        v19[0] = v11;
        char v6 = 1;
        LOBYTE(v19[1]) = 0;
        break;
      case 20:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4999236;
        goto LABEL_30;
      case 21:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5789005;
        goto LABEL_30;
      case 22:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4407622;
LABEL_30:
        v19[0] = v9;
        char v10 = 1;
        break;
      default:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v7 = 0;
        HIBYTE(v19[5]) = 7;
        strcpy((char *)v19, "Unknown");
        char v8 = 1;
        break;
    }
    LOBYTE(v19[0]) = __tolower(SLOBYTE(v19[0]));
    BYTE1(v19[0]) = __tolower(SBYTE1(v19[0]));
    if ((v5 & 1) == 0)
    {
      BYTE2(v19[0]) = __tolower(SBYTE2(v19[0]));
      if ((v10 & 1) == 0)
      {
        HIBYTE(v19[0]) = __tolower(SHIBYTE(v19[0]));
        if ((v6 & 1) == 0)
        {
          LOBYTE(v19[1]) = __tolower(SLOBYTE(v19[1]));
          if ((v7 & 1) == 0)
          {
            BYTE1(v19[1]) = __tolower(SBYTE1(v19[1]));
            BYTE2(v19[1]) = __tolower(SBYTE2(v19[1]));
            if ((v8 & 1) == 0) {
              HIBYTE(v19[1]) = __tolower(SHIBYTE(v19[1]));
            }
          }
        }
      }
    }
    uint64_t v12 = operator new(0x28uLL);
    uint64_t v13 = (std::string *)(v12 + 2);
    *uint64_t v12 = 0;
    v12[1] = 0;
    if (SHIBYTE(v19[5]) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v19, *(std::string::size_type *)&v19[2]);
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v19;
      v12[4] = *(void *)&v19[4];
    }
    uint64_t v14 = *a2;
    *uint64_t v12 = *a2;
    v12[1] = a2;
    *(void *)(v14 + 8) = v12;
    *a2 = (uint64_t)v12;
    ++a2[2];
    if (SHIBYTE(v19[5]) < 0) {
      operator delete(*(void **)v19);
    }
  }
  if (v20[2])
  {
    uint64_t v16 = v20[0];
    unint64_t v15 = (void *)v20[1];
    uint64_t v17 = *(void *)v20[1];
    *(void *)(v17 + 8) = *(void *)(v20[0] + 8);
    **(void **)(v16 + 8) = v17;
    v20[2] = 0;
    if (v15 != v20)
    {
      do
      {
        char v18 = (void *)v15[1];
        operator delete(v15);
        unint64_t v15 = v18;
      }
      while (v18 != v20);
    }
  }
}

void sub_1C57C1E08(_Unwind_Exception *a1)
{
  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_1C57C1E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v17 = v16;
  operator delete(v17);
  if (a14 < 0) {
    operator delete(__p);
  }
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a15);
  std::list<std::string>::~list(v15);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asStringLowerCase@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  memset(a2, 170, 24);
  uint64_t result = BasebandTransport::asString(a1, (char *)a2);
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  char v6 = (char *)a2 + v4;
  if (v5 >= 0) {
    char v7 = v6;
  }
  else {
    char v7 = (unsigned char *)(*a2 + a2[1]);
  }
  if (v5 >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (unsigned char *)*a2;
  }
  for (; v8 != v7; ++v8)
  {
    uint64_t result = __tolower((char)*v8);
    *char v8 = result;
  }
  return result;
}

void sub_1C57C1F34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::list<std::string>::~list(char *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = (char *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        char v6 = (char *)*((void *)v3 + 1);
        if (v3[39] < 0) {
          operator delete(*((void **)v3 + 2));
        }
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void BasebandTransport::getSupportedProtocolsAsString(BasebandTransport *this@<X0>, void *a2@<X8>)
{
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  memset(v18, 170, sizeof(v18));
  BasebandTransport::getSupportedProtocols(this, v18);
  uint64_t v3 = (uint64_t *)v18[1];
  if ((void *)v18[1] != v18)
  {
    unint64_t v4 = a2[2];
    unint64_t v5 = v4 + 1;
    char v6 = (void *)*a2;
    uint64_t v7 = v18[1];
    do
    {
      char v8 = 8;
      unint64_t v9 = 0x4C5443414944454DLL;
      switch(*(_DWORD *)(v7 + 16))
      {
        case 0:
          unint64_t v9 = v4 & 0xFFFFFFFF00000000 | 0x4C4250;
          char v8 = 3;
          break;
        case 1:
          unint64_t v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 3;
          char v8 = 3;
          break;
        case 2:
          uint64_t v10 = 1195460932;
          goto LABEL_25;
        case 3:
          uint64_t v10 = 1397114194;
          goto LABEL_25;
        case 4:
          uint64_t v11 = 0x3158554D51;
          goto LABEL_21;
        case 5:
          uint64_t v11 = 0x3258554D51;
          goto LABEL_21;
        case 6:
          unsigned int v12 = 5066578;
          goto LABEL_29;
        case 7:
          uint64_t v10 = 1414483778;
          goto LABEL_25;
        case 8:
          unsigned int v12 = 4805185;
          goto LABEL_29;
        case 9:
          unsigned int v12 = 5526611;
          goto LABEL_29;
        case 0xA:
          unint64_t v13 = v4 & 0xFFFFFFFFFF000000 | 0x5441;
          char v8 = 2;
          goto LABEL_30;
        case 0xB:
          uint64_t v10 = 1280328769;
          goto LABEL_25;
        case 0xC:
          break;
        case 0xD:
          unsigned int v12 = 5461061;
          goto LABEL_29;
        case 0xE:
          unint64_t v9 = (v4 & 0xFFFFFF0000000000 | 0x53534451) + 2550;
          char v8 = 4;
          break;
        case 0xF:
          unint64_t v9 = v4 & 0xFFFFFF0000000000 | 0x53534451;
          char v8 = 4;
          break;
        case 0x10:
          uint64_t v11 = 0x4854544352;
LABEL_21:
          unint64_t v13 = v4 & 0xFFFF000000000000 | v11 & 0xFFFFFFFFFFFFLL;
          char v8 = 5;
          goto LABEL_30;
        case 0x11:
          unsigned int v12 = 5260097;
          goto LABEL_29;
        case 0x12:
          uint64_t v10 = 1297040214;
          goto LABEL_25;
        case 0x13:
          uint64_t v10 = 1129335117;
LABEL_25:
          unint64_t v13 = v4 & 0xFFFFFF0000000000 | v10 & 0xFFFFFFFFFFLL;
          char v8 = 4;
          goto LABEL_30;
        case 0x14:
          unint64_t v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 1524;
          char v8 = 3;
          break;
        case 0x15:
          unsigned int v12 = 5789005;
          goto LABEL_29;
        case 0x16:
          unsigned int v12 = 4407622;
LABEL_29:
          unint64_t v13 = v4 & 0xFFFFFFFF00000000 | v12;
          char v8 = 3;
LABEL_30:
          unint64_t v9 = v13;
          break;
        default:
          char v8 = 7;
          unint64_t v9 = 0x6E776F6E6B6E55;
          break;
      }
      uint64_t v14 = operator new(0x28uLL);
      void v14[2] = v9;
      void v14[3] = 0;
      *((unsigned char *)v14 + 39) = v8;
      *uint64_t v14 = v6;
      v14[1] = a2;
      v6[1] = v14;
      *a2 = v14;
      a2[2] = v5;
      uint64_t v7 = *(void *)(v7 + 8);
      ++v5;
      unint64_t v4 = v9;
      char v6 = v14;
    }
    while ((void *)v7 != v18);
  }
  if (v18[2])
  {
    uint64_t v15 = v18[0];
    uint64_t v16 = *v3;
    *(void *)(v16 + 8) = *(void *)(v18[0] + 8);
    **(void **)(v15 + 8) = v16;
    v18[2] = 0;
    if (v3 != v18)
    {
      do
      {
        uint64_t v17 = (uint64_t *)v3[1];
        operator delete(v3);
        uint64_t v3 = v17;
      }
      while (v17 != v18);
    }
  }
}

void sub_1C57C2294(_Unwind_Exception *a1)
{
  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_1C57C22A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::list<std::pair<unsigned long long,unsigned int>>::~list((uint64_t *)va);
  std::list<std::string>::~list(v2);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997712;
      break;
    case 1:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997715;
      break;
    case 2:
      a2[23] = 4;
      strcpy(a2, "DIAG");
      break;
    case 3:
      a2[23] = 4;
      strcpy(a2, "REFS");
      break;
    case 4:
      a2[23] = 5;
      strcpy(a2, "QMUX1");
      break;
    case 5:
      a2[23] = 5;
      strcpy(a2, "QMUX2");
      break;
    case 6:
      a2[23] = 3;
      *(_DWORD *)a2 = 5066578;
      break;
    case 7:
      a2[23] = 4;
      strcpy(a2, "BOOT");
      break;
    case 8:
      a2[23] = 3;
      *(_DWORD *)a2 = 4805185;
      break;
    case 9:
      a2[23] = 3;
      *(_DWORD *)a2 = 5526611;
      break;
    case 10:
      a2[23] = 2;
      strcpy(a2, "AT");
      break;
    case 11:
      a2[23] = 4;
      strcpy(a2, "ADPL");
      break;
    case 12:
      a2[23] = 8;
      strcpy(a2, "MEDIACTL");
      break;
    case 13:
      a2[23] = 3;
      *(_DWORD *)a2 = 5461061;
      break;
    case 14:
      a2[23] = 4;
      strcpy(a2, "GNSS");
      break;
    case 15:
      a2[23] = 4;
      strcpy(a2, "QDSS");
      break;
    case 16:
      a2[23] = 5;
      strcpy(a2, "RCTTH");
      break;
    case 17:
      a2[23] = 3;
      *(_DWORD *)a2 = 5260097;
      break;
    case 18:
      a2[23] = 4;
      strcpy(a2, "VCOM");
      break;
    case 19:
      a2[23] = 4;
      strcpy(a2, "MIPC");
      break;
    case 20:
      a2[23] = 3;
      *(_DWORD *)a2 = 4999236;
      break;
    case 21:
      a2[23] = 3;
      *(_DWORD *)a2 = 5789005;
      break;
    case 22:
      a2[23] = 3;
      *(_DWORD *)a2 = 4407622;
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

{
  switch((int)result)
  {
    case 0:
      a2[23] = 8;
      strcpy(a2, "NotReady");
      break;
    case 1:
      a2[23] = 5;
      strcpy(a2, "Ready");
      break;
    case 2:
      a2[23] = 5;
      strcpy(a2, "Error");
      break;
    case 3:
      a2[23] = 7;
      strcpy(a2, "Stalled");
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

uint64_t BasebandTransport::asProtocol(char *__s1)
{
  uint64_t v1 = __s1;
  if ((__s1[23] & 0x80000000) == 0)
  {
    uint64_t result = strcmp(__s1, "PBL");
    if (!result) {
      return result;
    }
    if (!strcmp(v1, "SBL")) {
      return 1;
    }
    if (strcasecmp(v1, "DIAG"))
    {
      if (strcasecmp(v1, "REFS"))
      {
        if (strcasecmp(v1, "QMUX1"))
        {
          if (strcasecmp(v1, "QMUX2"))
          {
            if (strcasecmp(v1, "ROM"))
            {
              if (strcasecmp(v1, "BOOT"))
              {
                if (strcasecmp(v1, "ARI"))
                {
                  if (strcasecmp(v1, "STT"))
                  {
                    if (strcasecmp(v1, "AT"))
                    {
                      if (strcasecmp(v1, "ADPL"))
                      {
                        if (strcasecmp(v1, "MEDIACTL"))
                        {
                          if (strcasecmp(v1, "ETS"))
                          {
                            if (strcasecmp(v1, "GNSS"))
                            {
                              if (strcasecmp(v1, "QDSS"))
                              {
                                if (strcasecmp(v1, "RCTTH"))
                                {
                                  if (strcasecmp(v1, "ACP"))
                                  {
                                    if (strcasecmp(v1, "VCOM"))
                                    {
                                      if (strcasecmp(v1, "MIPC"))
                                      {
                                        if (strcasecmp(v1, "DHL"))
                                        {
                                          if (strcasecmp(v1, "MUX")) {
                                            goto LABEL_24;
                                          }
                                          return 21;
                                        }
                                        return 20;
                                      }
                                      return 19;
                                    }
                                    return 18;
                                  }
                                  return 17;
                                }
                                return 16;
                              }
                              return 15;
                            }
                            return 14;
                          }
                          return 13;
                        }
                        return 12;
                      }
                      return 11;
                    }
                    return 10;
                  }
                  return 9;
                }
                return 8;
              }
              return 7;
            }
            return 6;
          }
          return 5;
        }
        return 4;
      }
      return 3;
    }
    return 2;
  }
  uint64_t v1 = *(const char **)__s1;
  uint64_t result = strcmp(*(const char **)__s1, "PBL");
  if (!result) {
    return result;
  }
  if (!strcmp(v1, "SBL")) {
    return 1;
  }
  if (!strcasecmp(v1, "DIAG")) {
    return 2;
  }
  if (!strcasecmp(v1, "REFS")) {
    return 3;
  }
  if (!strcasecmp(v1, "QMUX1")) {
    return 4;
  }
  if (!strcasecmp(v1, "QMUX2")) {
    return 5;
  }
  if (!strcasecmp(v1, "ROM")) {
    return 6;
  }
  if (!strcasecmp(v1, "BOOT")) {
    return 7;
  }
  if (!strcasecmp(v1, "ARI")) {
    return 8;
  }
  if (!strcasecmp(v1, "STT")) {
    return 9;
  }
  if (!strcasecmp(v1, "AT")) {
    return 10;
  }
  if (!strcasecmp(v1, "ADPL")) {
    return 11;
  }
  if (!strcasecmp(v1, "MEDIACTL")) {
    return 12;
  }
  if (!strcasecmp(v1, "ETS")) {
    return 13;
  }
  if (!strcasecmp(v1, "GNSS")) {
    return 14;
  }
  if (!strcasecmp(v1, "QDSS")) {
    return 15;
  }
  if (!strcasecmp(v1, "RCTTH")) {
    return 16;
  }
  if (!strcasecmp(v1, "ACP")) {
    return 17;
  }
  if (!strcasecmp(v1, "VCOM")) {
    return 18;
  }
  if (!strcasecmp(v1, "MIPC")) {
    return 19;
  }
  if (!strcasecmp(v1, "DHL")) {
    return 20;
  }
  if (!strcasecmp(v1, "MUX")) {
    return 21;
  }
LABEL_24:
  if (!strcasecmp(v1, "FAC")) {
    return 22;
  }
  else {
    return 23;
  }
}

uint64_t BasebandTransport::getDefaultTransportIOReadSize(capabilities::abs *a1)
{
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(a1)) {
    return 0x4000;
  }
  else {
    return 0x8000;
  }
}

uint64_t BasebandTransport::getDefaultTransportIOReadCount(capabilities::abs *a1)
{
  int v1 = (int)a1;
  shouldUseMinBasebandTransportIOReadCFIndex Count = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(a1);
  if (v1 == 15) {
    int v3 = 36;
  }
  else {
    int v3 = 4;
  }
  if (v1 == 16) {
    int v4 = 36;
  }
  else {
    int v4 = v3;
  }
  if (v1 == 2) {
    unsigned int v5 = 16;
  }
  else {
    unsigned int v5 = v4;
  }
  if (shouldUseMinBasebandTransportIOReadCount) {
    return 4;
  }
  else {
    return v5;
  }
}

double BasebandTransport::Status::Status(BasebandTransport::Status *this)
{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

double BasebandTransport::Status::init(BasebandTransport::Status *this)
{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t BasebandTransport::Status::toString@<X0>(BasebandTransport::Status *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[7] = v4;
  v35[8] = v4;
  v35[5] = v4;
  void v35[6] = v4;
  v35[3] = v4;
  v35[4] = v4;
  v35[1] = v4;
  void v35[2] = v4;
  long long v34 = v4;
  v35[0] = v4;
  *(_OWORD *)uint64_t v32 = v4;
  long long v33 = v4;
  long long v30 = v4;
  long long v31 = v4;
  long long v28 = v4;
  long long v29 = v4;
  long long v27 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v27);
  unsigned int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"State: ", 7);
  switch(*(_DWORD *)this)
  {
    case 0:
      uint64_t v6 = 8;
      char v26 = 8;
      strcpy((char *)__p, "NotReady");
      break;
    case 1:
      uint64_t v6 = 5;
      char v26 = 5;
      strcpy((char *)__p, "Ready");
      break;
    case 2:
      uint64_t v6 = 5;
      char v26 = 5;
      strcpy((char *)__p, "Error");
      break;
    case 3:
      uint64_t v6 = 7;
      char v26 = 7;
      LODWORD(__p[0]) = 1818326099;
      int v7 = 1684368492;
      goto LABEL_7;
    default:
      uint64_t v6 = 7;
      char v26 = 7;
      LODWORD(__p[0]) = 1852534357;
      int v7 = 1853321070;
LABEL_7:
      *(_DWORD *)((char *)__p + 3) = v7;
      HIBYTE(__p[0]) = 0;
      break;
  }
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, v6);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Async: ", 7);
  *(_DWORD *)((char *)v10 + *(void *)(*v10 - 24) + 8) |= 1u;
  uint64_t v11 = (void *)std::ostream::operator<<();
  unsigned int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Total Rx: ", 10);
  unint64_t v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Total Tx: ", 10);
  uint64_t v15 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" KB", 3);
  if ((v26 & 0x80000000) == 0)
  {
    char v16 = BYTE8(v34);
    if ((BYTE8(v34) & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v18 = v34;
    if ((unint64_t)v34 < *((void *)&v31 + 1))
    {
      *(void *)&long long v34 = *((void *)&v31 + 1);
      uint64_t v18 = *((void *)&v31 + 1);
    }
    xpc_object_t v19 = (const void *)v31;
    size_t v17 = v18 - v31;
    if ((unint64_t)(v18 - v31) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_27;
    }
    goto LABEL_16;
  }
  operator delete(__p[0]);
  char v16 = BYTE8(v34);
  if ((BYTE8(v34) & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_10:
  if ((v16 & 8) == 0)
  {
    size_t v17 = 0;
    a2[23] = 0;
    goto LABEL_23;
  }
  xpc_object_t v19 = (const void *)*((void *)&v29 + 1);
  size_t v17 = *((void *)&v30 + 1) - *((void *)&v29 + 1);
  if (*((void *)&v30 + 1) - *((void *)&v29 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_27:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_16:
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    xpc_object_t v22 = operator new(v20 + 1);
    *((void *)a2 + 1) = v17;
    *((void *)a2 + 2) = v21 | 0x8000000000000000;
    *(void *)a2 = v22;
    a2 = v22;
    goto LABEL_22;
  }
  a2[23] = v17;
  if (v17) {
LABEL_22:
  }
    memmove(a2, v19, v17);
LABEL_23:
  a2[v17] = 0;
  *(void *)&long long v27 = *MEMORY[0x1E4FBA408];
  uint64_t v23 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v27 + *(void *)(v27 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v28 = v23;
  *((void *)&v28 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8791FB0](v35);
}

void sub_1C57C3030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C57C3044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::Parameters::toString@<X0>(BasebandTransport::Parameters *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[7] = v4;
  v40[8] = v4;
  v40[5] = v4;
  v40[6] = v4;
  v40[3] = v4;
  v40[4] = v4;
  v40[1] = v4;
  v40[2] = v4;
  long long v39 = v4;
  v40[0] = v4;
  *(_OWORD *)CFMutableDictionaryRef v37 = v4;
  long long v38 = v4;
  long long v35 = v4;
  long long v36 = v4;
  long long v33 = v4;
  long long v34 = v4;
  long long v32 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v32);
  switch(*(_DWORD *)this)
  {
    case 0:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "PBL");
      break;
    case 1:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "SBL");
      break;
    case 2:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1195460932;
      goto LABEL_25;
    case 3:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1397114194;
      goto LABEL_25;
    case 4:
      size_t v5 = 5;
      char v28 = 5;
      strcpy((char *)v27, "QMUX1");
      break;
    case 5:
      size_t v5 = 5;
      char v28 = 5;
      strcpy((char *)v27, "QMUX2");
      break;
    case 6:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "ROM");
      break;
    case 7:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1414483778;
      goto LABEL_25;
    case 8:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "ARI");
      break;
    case 9:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "STT");
      break;
    case 0xA:
      size_t v5 = 2;
      char v28 = 2;
      strcpy((char *)v27, "AT");
      break;
    case 0xB:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1280328769;
      goto LABEL_25;
    case 0xC:
      size_t v5 = 8;
      char v28 = 8;
      strcpy((char *)v27, "MEDIACTL");
      break;
    case 0xD:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "ETS");
      break;
    case 0xE:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1397968455;
      goto LABEL_25;
    case 0xF:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1397965905;
      goto LABEL_25;
    case 0x10:
      size_t v5 = 5;
      char v28 = 5;
      strcpy((char *)v27, "RCTTH");
      break;
    case 0x11:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "ACP");
      break;
    case 0x12:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1297040214;
      goto LABEL_25;
    case 0x13:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1129335117;
LABEL_25:
      LODWORD(v27[0]) = v6;
      BYTE4(v27[0]) = 0;
      break;
    case 0x14:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "DHL");
      break;
    case 0x15:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "MUX");
      break;
    case 0x16:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "FAC");
      break;
    default:
      size_t v5 = 7;
      char v28 = 7;
      strcpy((char *)v27, "Unknown");
      break;
  }
  uint64_t v30 = 8250;
  uint64_t v31 = 0;
  HIBYTE(v31) = v5 + 10;
  std::string __p = *(void **)"Protocol: ";
  memcpy((char *)&v30 + 2, v27, v5);
  *((unsigned char *)&v30 + v5 + 2) = 0;
  if (v31 >= 0) {
    uint64_t p_p = (uint64_t)&__p;
  }
  else {
    uint64_t p_p = 0x6C6F636F746F7250;
  }
  if (v31 >= 0) {
    uint64_t v8 = HIBYTE(v31);
  }
  else {
    uint64_t v8 = v30;
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, p_p, v8);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Powersave: ", 11);
  *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) |= 1u;
  unsigned int v12 = (void *)std::ostream::operator<<();
  unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Create Timeout: ", 16);
  uint64_t v14 = (void *)std::ostream::operator<<();
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" sec, ", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"IO Size: ", 9);
  char v16 = (void *)std::ostream::operator<<();
  size_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Num Pending Reads: ", 19);
  std::ostream::operator<<();
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_34:
      char v18 = BYTE8(v39);
      if ((BYTE8(v39) & 0x10) == 0) {
        goto LABEL_35;
      }
LABEL_39:
      uint64_t v20 = v39;
      if ((unint64_t)v39 < *((void *)&v36 + 1))
      {
        *(void *)&long long v39 = *((void *)&v36 + 1);
        uint64_t v20 = *((void *)&v36 + 1);
      }
      uint64_t v21 = (const void *)v36;
      size_t v19 = v20 - v36;
      if ((unint64_t)(v20 - v36) >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_53;
      }
      goto LABEL_42;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(v27[0]);
  char v18 = BYTE8(v39);
  if ((BYTE8(v39) & 0x10) != 0) {
    goto LABEL_39;
  }
LABEL_35:
  if ((v18 & 8) == 0)
  {
    size_t v19 = 0;
    a2[23] = 0;
    goto LABEL_49;
  }
  uint64_t v21 = (const void *)*((void *)&v34 + 1);
  size_t v19 = *((void *)&v35 + 1) - *((void *)&v34 + 1);
  if (*((void *)&v35 + 1) - *((void *)&v34 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_53:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_42:
  if (v19 >= 0x17)
  {
    uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v22 = v19 | 7;
    }
    uint64_t v23 = v22 + 1;
    uint64_t v24 = operator new(v22 + 1);
    *((void *)a2 + 1) = v19;
    *((void *)a2 + 2) = v23 | 0x8000000000000000;
    *(void *)a2 = v24;
    a2 = v24;
    goto LABEL_48;
  }
  a2[23] = v19;
  if (v19) {
LABEL_48:
  }
    memmove(a2, v21, v19);
LABEL_49:
  a2[v19] = 0;
  *(void *)&long long v32 = *MEMORY[0x1E4FBA408];
  uint64_t v25 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v33 = v25;
  *((void *)&v33 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8791FB0](v40);
}

void sub_1C57C37B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C57C37C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::BasebandTransport(uint64_t a1, void *a2, NSObject **a3)
{
  *(void *)a1 = &unk_1F20F2AC8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v15, "com.apple.telephony.abm", "ipc.bb");
  int v6 = dispatch_queue_create("ipc.bb", 0);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v6;
  if (v6)
  {
    int v7 = v6;
    dispatch_retain(v6);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v7);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_1F20F2D90;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v17);
  *(void *)(a1 + 8) = &unk_1F20F0070;
  *(void *)(a1 + 56) = *a2;
  uint64_t v8 = a2[1];
  *(void *)(a1 + 64) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  *(void *)a1 = &unk_1F20F2E88;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *(void *)a1 = &unk_1F20F2AC8;
  *(_DWORD *)(a1 + 104) = 23;
  *(unsigned char *)(a1 + 108) = 0;
  *(void *)(a1 + 112) = 10;
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v9);
  if (shouldUseMinBasebandTransportIOReadSize) {
    int v11 = 0x4000;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a1 + 120) = v11;
  capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize);
  *(_DWORD *)(a1 + 124) = 4;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  unsigned int v12 = *a3;
  *(void *)(a1 + 152) = *a3;
  if (v12) {
    dispatch_retain(v12);
  }
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  uint64_t Controller = TelephonyBasebandCreateController();
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = Controller;
  *(void *)(a1 + 285) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 320) = dispatch_group_create();
  *(_DWORD *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 365) = 0;
  return a1;
}

void sub_1C57C3AA0(_Unwind_Exception *a1)
{
  long long v4 = (const void *)v1[21];
  if (v4) {
    _Block_release(v4);
  }
  if (*v2) {
    _Block_release(*v2);
  }
  size_t v5 = v1[19];
  if (v5) {
    dispatch_release(v5);
  }
  int v6 = (const void *)v1[18];
  if (v6) {
    _Block_release(v6);
  }
  ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

const char *BasebandTransport::getName(BasebandTransport *this)
{
  return "ipc.bb";
}

void *ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F2D90;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20F2D90;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void BasebandTransport::~BasebandTransport(BasebandTransport *this)
{
  *(void *)this = &unk_1F20F2AC8;
  uint64_t v2 = *((void *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((void *)this + 35) = 0;
    int v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v16 = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v16, 2u);
    }
  }
  (*(void (**)(BasebandTransport *))(*(void *)this + 80))(this);
  long long v4 = (const void *)*((void *)this + 33);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 33) = 0;
  }
  size_t v5 = (void *)*((void *)this + 37);
  if (v5)
  {
    operator delete[](v5);
    *((void *)this + 37) = 0;
  }
  int v6 = *((void *)this + 40);
  if (v6) {
    dispatch_release(v6);
  }
  int v7 = *((void *)this + 39);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = (const void *)*((void *)this + 34);
  if (v8) {
    _Block_release(v8);
  }
  unint64_t v9 = (const void *)*((void *)this + 21);
  if (v9) {
    _Block_release(v9);
  }
  uint64_t v10 = (const void *)*((void *)this + 20);
  if (v10) {
    _Block_release(v10);
  }
  int v11 = *((void *)this + 19);
  if (v11) {
    dispatch_release(v11);
  }
  unsigned int v12 = (const void *)*((void *)this + 18);
  if (v12) {
    _Block_release(v12);
  }
  *(void *)this = &unk_1F20F2D90;
  MEMORY[0x1C8790F40]((char *)this + 8);
  unint64_t v13 = *((void *)this + 12);
  if (v13) {
    dispatch_release(v13);
  }
  uint64_t v14 = *((void *)this + 11);
  if (v14) {
    dispatch_release(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
}

{
  void *v1;
  uint64_t vars8;

  BasebandTransport::~BasebandTransport(this);

  operator delete(v1);
}

void BasebandTransport::timerOff_sync(BasebandTransport *this)
{
  uint64_t v2 = *((void *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((void *)this + 35) = 0;
    int v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v4 = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v4, 2u);
    }
  }
}

void BasebandTransport::create(NSObject **this@<X0>, queue a2@<0:X1>, uint64_t a3@<X8>)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  void block[4] = &qword_1EBBDD4E0;
  if (_MergedGlobals_1 == -1)
  {
    size_t v5 = *(std::__shared_weak_count **)algn_1EBBDD4E8;
    uint64_t v8 = qword_1EBBDD4E0;
    uint64_t v9 = *(void *)algn_1EBBDD4E8;
    if (!*(void *)algn_1EBBDD4E8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&_MergedGlobals_1, block);
  size_t v5 = *(std::__shared_weak_count **)algn_1EBBDD4E8;
  uint64_t v8 = qword_1EBBDD4E0;
  uint64_t v9 = *(void *)algn_1EBBDD4E8;
  if (*(void *)algn_1EBBDD4E8) {
LABEL_3:
  }
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_4:
  int v6 = *this;
  int v7 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  BasebandTransport::create((capabilities::radio *)&v8, &v7, a3);
  if (v6) {
    dispatch_release(v6);
  }
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1C57C3F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    dispatch_release(v10);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void BasebandTransport::create(capabilities::radio *a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  int v6 = capabilities::radio::vendor(a1);
  if (v6 != 1)
  {
    if (v6 != 3) {
      return;
    }
    int v7 = (std::__shared_weak_count_vtbl *)operator new(0x198uLL);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 1);
    uint64_t v25 = *(void *)a1;
    char v26 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *a2;
    uint64_t v24 = v9;
    if (v9) {
      dispatch_retain(v9);
    }
    BasebandTransport::BasebandTransport((uint64_t)v7, &v25, &v24);
    uint64_t v30 = v7;
    unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v10 = (std::__shared_weak_count *)operator new(0x20uLL);
    v10->__shared_owners_ = 0;
    p_shared_owners = &v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F2F18;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v7;
    unint64_t v31 = (unint64_t)v10;
    unsigned int v12 = (std::__shared_weak_count *)v7[2].~__shared_weak_count;
    if (v12)
    {
      if (v12->__shared_owners_ != -1
        || (atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed),
            atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed),
            v7[1].__on_zero_shared_weauint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7,
            v7[2].~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10,
            std::__shared_weak_count::__release_weak(v12),
            atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)))
      {
LABEL_21:
        uint64_t v19 = (uint64_t)v30;
        ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v30);
        unint64_t v20 = v31;
        uint64_t v30 = 0;
        unint64_t v31 = 0;
        *(void *)a3 = v19;
        *(void *)(a3 + 8) = v20;
        if (v9) {
          dispatch_release(v9);
        }
        uint64_t v21 = v26;
        if (!v26) {
          goto LABEL_32;
        }
        goto LABEL_30;
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v7[1].__on_zero_shared_weauint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
      v7[2].~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_21;
      }
    }
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    goto LABEL_21;
  }
  unint64_t v13 = (std::__shared_weak_count_vtbl *)operator new(0x198uLL);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)a1 + 1);
  uint64_t v28 = *(void *)a1;
  long long v29 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a2;
  dispatch_object_t object = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  BasebandTransportMAV::BasebandTransportMAV(v13, &v28, &object);
  uint64_t v30 = v13;
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  char v16 = (std::__shared_weak_count *)operator new(0x20uLL);
  v16->__shared_owners_ = 0;
  size_t v17 = &v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F2EC8;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = v13;
  unint64_t v31 = (unint64_t)v16;
  char v18 = (std::__shared_weak_count *)v13[2].~__shared_weak_count;
  if (!v18)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[1].__on_zero_shared_weauint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
    v13[2].~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v16;
    if (atomic_fetch_add(v17, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v18->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[1].__on_zero_shared_weauint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
    v13[2].~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v16;
    std::__shared_weak_count::__release_weak(v18);
    if (!atomic_fetch_add(v17, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_26:
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_27:
  uint64_t v22 = (uint64_t)v30;
  ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v30);
  unint64_t v23 = v31;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  *(void *)a3 = v22;
  *(void *)(a3 + 8) = v23;
  if (object) {
    dispatch_release(object);
  }
  uint64_t v21 = v29;
  if (!v29) {
    goto LABEL_32;
  }
LABEL_30:
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_32:
  BasebandTransport::init(*(BasebandTransport **)a3);
}

void sub_1C57C428C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void BasebandTransport::init(BasebandTransport *this)
{
  uint64_t v5 = *((void *)this + 9);
  int v3 = (std::__shared_weak_count *)*((void *)this + 10);
  long long v4 = (char *)this + 72;
  if (!v3 || (int v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  void v11[2] = ___ZN17BasebandTransport4initEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_51;
  v11[4] = this;
  void v11[5] = v5;
  unsigned int v12 = v7;
  unint64_t v13 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  void block[4] = v4;
  void block[5] = &v13;
  uint64_t v9 = *((void *)this + 11);
  if (!*((void *)this + 12))
  {
    dispatch_sync(v9, block);
    uint64_t v10 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v9, block);
  uint64_t v10 = v12;
  if (v12) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_8:
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN17BasebandTransport4initEv_block_invoke(capabilities::ipc *a1)
{
  uint64_t v2 = *((void *)a1 + 4);
  if (capabilities::ipc::supportsPCI(a1))
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN17BasebandTransport4initEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_25;
    uint64_t v4 = *((void *)a1 + 5);
    int v3 = (std::__shared_weak_count *)*((void *)a1 + 6);
    void aBlock[4] = v2;
    aBlock[5] = v4;
    uint64_t v14 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = _Block_copy(aBlock);
    int v6 = *(const void **)(v2 + 160);
    *(void *)(v2 + 160) = v5;
    if (v6) {
      _Block_release(v6);
    }
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 1174405120;
    void v11[2] = ___ZN17BasebandTransport4initEv_block_invoke_43;
    v11[3] = &__block_descriptor_tmp_47;
    uint64_t v8 = *((void *)a1 + 5);
    int v7 = (std::__shared_weak_count *)*((void *)a1 + 6);
    v11[4] = v2;
    void v11[5] = v8;
    unsigned int v12 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = _Block_copy(v11);
    uint64_t v10 = *(const void **)(v2 + 168);
    *(void *)(v2 + 168) = v9;
    if (v10) {
      _Block_release(v10);
    }
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void ___ZN17BasebandTransport4initEv_block_invoke_2(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v9 = a1[4];
    uint64_t v10 = std::__shared_weak_count::lock(v5);
    if (v10)
    {
      int v11 = v10;
      if (a1[5])
      {
        unsigned int v12 = *(NSObject **)(v9 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v21 = 67109632;
          *(_DWORD *)&v21[4] = a2;
          *(_WORD *)&v21[8] = 2048;
          *(void *)&v21[10] = a3;
          *(_WORD *)&v21[18] = 2048;
          *(void *)&v21[20] = a4;
          _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "PCI Transport Status: 0x%x (0x%08lx, 0x%08lx)", v21, 0x1Cu);
        }
        *(_DWORD *)(v9 + 328) = 2 * (a2 != 0);
        *(int64x2_t *)(v9 + 352) = vsubq_s64(*(int64x2_t *)(v9 + 336), *(int64x2_t *)(v9 + 376));
        unint64_t v13 = *(const void **)(v9 + 272);
        if (v13)
        {
          uint64_t v14 = _Block_copy(v13);
          uint64_t v15 = v14;
          long long v16 = *(_OWORD *)(v9 + 344);
          *(_OWORD *)uint64_t v21 = *(_OWORD *)(v9 + 328);
          *(_OWORD *)&v21[16] = v16;
          uint64_t v22 = *(void *)(v9 + 360);
          size_t v17 = *(NSObject **)(v9 + 152);
          if (v14) {
            char v18 = _Block_copy(v14);
          }
          else {
            char v18 = 0;
          }
          uint64_t v19 = (char *)operator new(0x30uLL);
          *(void *)uint64_t v19 = v18;
          long long v20 = *(_OWORD *)&v21[16];
          *(_OWORD *)(v19 + 8) = *(_OWORD *)v21;
          *(_OWORD *)(v19 + 24) = v20;
          *((void *)v19 + 5) = v22;
          dispatch_async_f(v17, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (v15) {
            _Block_release(v15);
          }
        }
      }
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_1C57C4844(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

int64x2_t BasebandTransport::updateDeltas_sync(BasebandTransport *this)
{
  int64x2_t result = vsubq_s64(*((int64x2_t *)this + 21), *(int64x2_t *)((char *)this + 376));
  *((int64x2_t *)this + 22) = result;
  return result;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN17BasebandTransport4initEv_block_invoke_43(void *a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[4];
  uint64_t v31 = 0;
  long long v32 = 0;
  int v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v32 = std::__shared_weak_count::lock(v7)) != 0 && (uint64_t v10 = a1[5], (v31 = v10) != 0))
  {
    int v11 = *(NSObject **)(v10 + 320);
    if (v11)
    {
      dispatch_retain(*(dispatch_object_t *)(v10 + 320));
      dispatch_group_enter(v11);
    }
    if (a2)
    {
      unsigned int v12 = *(NSObject **)(v6 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a2;
        _os_log_debug_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEBUG, "#D Async read error 0x%08x", buf, 8u);
      }
    }
    else
    {
      *(void *)(v6 + 336) += a4;
      uint64_t v14 = *(const void **)(v6 + 144);
      if (v14)
      {
        uint64_t v15 = _Block_copy(v14);
        uint64_t v16 = *(void *)(v6 + 128);
        if (v16)
        {
          std::string __p = 0;
          long long v29 = 0;
          uint64_t v30 = 0;
          (*(void (**)(uint64_t, void *, void, void **))(*(void *)v16 + 8))(v16, a3, a4, &__p);
          size_t v17 = *(NSObject **)(v6 + 152);
          if (v15) {
            char v18 = _Block_copy(v15);
          }
          else {
            char v18 = 0;
          }
          *(void *)long long buf = v18;
          long long v34 = 0;
          long long v35 = 0;
          long long v36 = 0;
          uint64_t v22 = __p;
          size_t v23 = v29 - (unsigned char *)__p;
          if (v29 == __p)
          {
            uint64_t v25 = 0;
            uint64_t v24 = 0;
          }
          else
          {
            if ((v23 & 0x8000000000000000) != 0) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v24 = (char *)operator new(v29 - (unsigned char *)__p);
            uint64_t v25 = &v24[v23];
            long long v34 = v24;
            long long v36 = &v24[v23];
            memcpy(v24, v22, v23);
            long long v35 = &v24[v23];
          }
          char v26 = operator new(0x20uLL);
          *char v26 = v18;
          v26[1] = v24;
          v26[2] = v25;
          v26[3] = v25;
          dispatch_async_f(v17, v26, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (__p)
          {
            long long v29 = __p;
            operator delete(__p);
          }
        }
        else
        {
          char v19 = *(unsigned char *)(v6 + 136);
          long long v20 = *(NSObject **)(v6 + 152);
          if (v15) {
            uint64_t v21 = _Block_copy(v15);
          }
          else {
            uint64_t v21 = 0;
          }
          long long v27 = operator new(0x18uLL);
          void *v27 = v21;
          v27[1] = a3;
          *((_DWORD *)v27 + 4) = a4;
          *((unsigned char *)v27 + 20) = v19;
          dispatch_async_f(v20, v27, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          a3 = 0;
        }
        if (v15) {
          _Block_release(v15);
        }
      }
    }
    if (a3 && !*(unsigned char *)(v6 + 136)) {
      free(a3);
    }
    if (v11)
    {
      dispatch_group_leave(v11);
      dispatch_release(v11);
    }
  }
  else if (a3)
  {
    free(a3);
  }
  unint64_t v13 = v32;
  if (v32)
  {
    if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1C57C4BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *aBlock, void *a16, uint64_t a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

BOOL BasebandTransport::open(BasebandTransport *a1, long long *a2, void **a3)
{
  uint64_t v17 = 0;
  char v18 = &v17;
  uint64_t v19 = 0x2000000000;
  char v20 = 0;
  BasebandTransport::stopReader(a1);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke;
  v12[3] = &unk_1F20F2BB8;
  void v12[5] = a1;
  long long v6 = a2[1];
  long long v13 = *a2;
  long long v14 = v6;
  uint64_t v15 = *((void *)a2 + 4);
  int v7 = *a3;
  if (*a3) {
    int v7 = _Block_copy(v7);
  }
  long long aBlock = v7;
  v12[4] = &v17;
  uint64_t v21 = v12;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  void block[4] = (char *)a1 + 72;
  void block[5] = &v21;
  uint64_t v8 = *((void *)a1 + 11);
  if (*((void *)a1 + 12))
  {
    dispatch_async_and_wait(v8, block);
    int v9 = *((unsigned __int8 *)v18 + 24);
    uint64_t v10 = aBlock;
    if (!aBlock) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_sync(v8, block);
  int v9 = *((unsigned __int8 *)v18 + 24);
  uint64_t v10 = aBlock;
  if (aBlock) {
LABEL_7:
  }
    _Block_release(v10);
LABEL_8:
  _Block_object_dispose(&v17, 8);
  return v9 != 0;
}

void sub_1C57C4DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void BasebandTransport::stopReader(BasebandTransport *this)
{
  v14[0] = 0;
  v14[1] = v14;
  void v14[2] = 0x2000000000;
  char v15 = 0;
  uint64_t v2 = (uint64_t *)((char *)this + 72);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 0x40000000;
  void v13[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke;
  v13[3] = &unk_1E6517148;
  v13[4] = v14;
  void v13[5] = this;
  uint64_t v16 = v13;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  void block[4] = (char *)this + 72;
  void block[5] = &v16;
  uint64_t v4 = (char *)this + 88;
  int v3 = *((void *)this + 11);
  if (*((void *)v4 + 1)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  v12[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke_2;
  v12[3] = &unk_1E6517170;
  v12[4] = v14;
  void v12[5] = this;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v2, (uint64_t)v12);
  uint64_t v5 = *((void *)this + 40);
  if (v5)
  {
    long long v6 = *((void *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Waiting for reader to be stopped", (uint8_t *)block, 2u);
      uint64_t v5 = *((void *)this + 40);
    }
    dispatch_time_t v7 = dispatch_time(0, 3000000000);
    if (dispatch_group_wait(v5, v7))
    {
      (*(void (**)(BasebandTransport *))(*(void *)this + 80))(this);
      uint64_t v8 = *((void *)this + 5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(block[0]) = 0;
        _os_log_error_impl(&dword_1C5767000, v8, OS_LOG_TYPE_ERROR, "Timeout waiting for read to unblock, freed transport to force read unblock", (uint8_t *)block, 2u);
      }
    }
    else
    {
      uint64_t v10 = (void *)*((void *)this + 37);
      if (v10)
      {
        operator delete[](v10);
        *((void *)this + 37) = 0;
        int v11 = *((void *)this + 39);
        *((void *)this + 39) = 0;
        if (v11) {
          dispatch_release(v11);
        }
      }
    }
    int v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Reader stopped", (uint8_t *)block, 2u);
    }
  }
  _Block_object_dispose(v14, 8);
}

void sub_1C57C5060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(NSObject **)(v2 + 280);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(v2 + 280));
    *(void *)(v2 + 280) = 0;
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9[0]) = 0;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", (uint8_t *)v9, 2u);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
  *(_DWORD *)(v2 + 328) = 0;
  *(unsigned char *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(void *)(v2 + 365) = 0;
  char v5 = *(unsigned char *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 120) = v6;
  *(unsigned char *)(v2 + 136) = v5;
  dispatch_time_t v7 = *(void **)(a1 + 88);
  if (v7) {
    dispatch_time_t v7 = _Block_copy(v7);
  }
  uint64_t v8 = *(const void **)(v2 + 144);
  *(void *)(v2 + 144) = v7;
  if (v8) {
    _Block_release(v8);
  }
  if (*(_DWORD *)(v2 + 104) != 23)
  {
    if (capabilities::ipc::supportsPCI((capabilities::ipc *)v7)) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = BasebandTransport::openPCI_sync((BasebandTransport *)v2);
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      BasebandTransport::timerOn_sync((BasebandTransport *)v2);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    }
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    uint64_t v9[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
    v9[3] = &__block_descriptor_tmp_80;
    v9[4] = v2;
    char v10 = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v9);
  }
}

uint64_t BasebandTransport::openPCI_sync(BasebandTransport *this)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (int v3 = std::__shared_weak_count::lock(v2)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v4 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  inited = (capabilities::abs *)TelephonyBasebandPCITransportInitParameters();
  int v6 = *((_DWORD *)this + 28);
  shouldUseMinBasebandTransportIOReadCFIndex Count = capabilities::abs::traceTransportTimeoutScalingFactor(inited);
  int v8 = 1000 * v6;
  if ((((1000 * v6) * (unint64_t)shouldUseMinBasebandTransportIOReadCount) & 0xFFFFFFFF00000000) != 0)
  {
    int v9 = *((void *)this + 5);
    shouldUseMinBasebandTransportIOReadCFIndex Count = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (shouldUseMinBasebandTransportIOReadCount)
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v8;
      _os_log_error_impl(&dword_1C5767000, v9, OS_LOG_TYPE_ERROR, "Scaled create timeout overflowed, falling back to unscaled value: %u", buf, 8u);
    }
  }
  int v10 = *((_DWORD *)this + 31);
  if (v10) {
    goto LABEL_16;
  }
  int v11 = *((_DWORD *)this + 26);
  shouldUseMinBasebandTransportIOReadCFIndex Count = capabilities::abs::shouldUseMinBasebandTransportIOReadCount((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount);
  if (shouldUseMinBasebandTransportIOReadCount) {
    goto LABEL_10;
  }
  if (v11 != 2)
  {
    if (v11 != 16 && v11 != 15)
    {
LABEL_10:
      unsigned int v27 = 4;
      unsigned int v12 = *((_DWORD *)this + 30);
      if (!v12) {
        goto LABEL_17;
      }
      goto LABEL_20;
    }
    int v10 = 36;
LABEL_16:
    unsigned int v27 = v10;
    unsigned int v12 = *((_DWORD *)this + 30);
    if (!v12) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  unsigned int v27 = 16;
  unsigned int v12 = *((_DWORD *)this + 30);
  if (!v12)
  {
LABEL_17:
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount)) {
      unsigned int v12 = 0x4000;
    }
    else {
      unsigned int v12 = 0x8000;
    }
  }
LABEL_20:
  unsigned int v28 = v12;
  int v13 = *((_DWORD *)this + 26);
  switch(v13)
  {
    case 0:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 1:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 2:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 3:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 4:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 5:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 6:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 7:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 8:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 9:
    case 17:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 10:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 11:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 12:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 13:
    case 18:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 14:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 15:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 16:
      uint64_t v14 = v27;
      if (v27 >= 0x41)
      {
LABEL_26:
        char v15 = *((void *)this + 5);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          goto LABEL_144;
        }
        switch(v13)
        {
          case 0:
            char v30 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            char v30 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            char v30 = 4;
            int v24 = 1195460932;
            goto LABEL_118;
          case 3:
            char v30 = 4;
            int v24 = 1397114194;
            goto LABEL_118;
          case 4:
            char v30 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            char v30 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            char v30 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            char v30 = 4;
            int v24 = 1414483778;
            goto LABEL_118;
          case 8:
            char v30 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            char v30 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 10:
            char v30 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 11:
            char v30 = 4;
            int v24 = 1280328769;
            goto LABEL_118;
          case 12:
            char v30 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 13:
            char v30 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 14:
            char v30 = 4;
            int v24 = 1397968455;
            goto LABEL_118;
          case 15:
            char v30 = 4;
            int v24 = 1397965905;
            goto LABEL_118;
          case 16:
            char v30 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 17:
            char v30 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 18:
            char v30 = 4;
            int v24 = 1297040214;
LABEL_118:
            *(_DWORD *)long long buf = v24;
            uint8_t buf[4] = 0;
            break;
          default:
            char v30 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)uint64_t v31 = 136315394;
        long long v32 = buf;
        __int16 v33 = 2048;
        uint64_t v34 = v14;
        char v20 = "%s: invalid transport io read count (%lu)";
LABEL_141:
        uint64_t v21 = v15;
        uint32_t v22 = 22;
LABEL_142:
        _os_log_error_impl(&dword_1C5767000, v21, OS_LOG_TYPE_ERROR, v20, v31, v22);
        if (v30 < 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_144;
      }
LABEL_56:
      if (v12 - 0x4000 > 0xFC000)
      {
        char v15 = *((void *)this + 5);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          goto LABEL_144;
        }
        switch(v13)
        {
          case 0:
            char v30 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            char v30 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            char v30 = 4;
            int v25 = 1195460932;
            goto LABEL_139;
          case 3:
            char v30 = 4;
            int v25 = 1397114194;
            goto LABEL_139;
          case 4:
            char v30 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            char v30 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            char v30 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            char v30 = 4;
            int v25 = 1414483778;
            goto LABEL_139;
          case 8:
            char v30 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            char v30 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 10:
            char v30 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 11:
            char v30 = 4;
            int v25 = 1280328769;
            goto LABEL_139;
          case 12:
            char v30 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 13:
            char v30 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 14:
            char v30 = 4;
            int v25 = 1397968455;
            goto LABEL_139;
          case 15:
            char v30 = 4;
            int v25 = 1397965905;
            goto LABEL_139;
          case 16:
            char v30 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 17:
            char v30 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 18:
            char v30 = 4;
            int v25 = 1297040214;
LABEL_139:
            *(_DWORD *)long long buf = v25;
            uint8_t buf[4] = 0;
            break;
          default:
            char v30 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)uint64_t v31 = 136315394;
        long long v32 = buf;
        __int16 v33 = 2048;
        uint64_t v34 = v12;
        char v20 = "%s: invalid transport io read size (%lu)";
        goto LABEL_141;
      }
      if (*((void *)this + 18)) {
        *((unsigned char *)this + 332) = 1;
      }
      if (!TelephonyBasebandPCITransportCreate())
      {
        *((_DWORD *)this + 82) = 2;
        char v18 = *((void *)this + 5);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          BasebandTransport::asString(*((unsigned int *)this + 26), (char *)buf);
          if (v30 >= 0) {
            uint64_t v19 = buf;
          }
          else {
            uint64_t v19 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v31 = 136315138;
          long long v32 = v19;
          char v20 = "%s: transport open failed";
          uint64_t v21 = v18;
          uint32_t v22 = 12;
          goto LABEL_142;
        }
LABEL_144:
        uint64_t v16 = 0;
        goto LABEL_145;
      }
      uint64_t v16 = 1;
      *((_DWORD *)this + 82) = 1;
      uint64_t v17 = *((void *)this + 5);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            char v30 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            char v30 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            char v30 = 4;
            int v23 = 1195460932;
            goto LABEL_93;
          case 3:
            char v30 = 4;
            int v23 = 1397114194;
            goto LABEL_93;
          case 4:
            char v30 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            char v30 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            char v30 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            char v30 = 4;
            int v23 = 1414483778;
            goto LABEL_93;
          case 8:
            char v30 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            char v30 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 0xA:
            char v30 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 0xB:
            char v30 = 4;
            int v23 = 1280328769;
            goto LABEL_93;
          case 0xC:
            char v30 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 0xD:
            char v30 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 0xE:
            char v30 = 4;
            int v23 = 1397968455;
            goto LABEL_93;
          case 0xF:
            char v30 = 4;
            int v23 = 1397965905;
            goto LABEL_93;
          case 0x10:
            char v30 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 0x11:
            char v30 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 0x12:
            char v30 = 4;
            int v23 = 1297040214;
            goto LABEL_93;
          case 0x13:
            char v30 = 4;
            int v23 = 1129335117;
LABEL_93:
            *(_DWORD *)long long buf = v23;
            uint8_t buf[4] = 0;
            break;
          case 0x14:
            char v30 = 3;
            strcpy((char *)buf, "DHL");
            break;
          case 0x15:
            char v30 = 3;
            strcpy((char *)buf, "MUX");
            break;
          case 0x16:
            char v30 = 3;
            strcpy((char *)buf, "FAC");
            break;
          default:
            char v30 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)uint64_t v31 = 136315394;
        long long v32 = buf;
        __int16 v33 = 1024;
        LODWORD(v34) = v28;
        _os_log_impl(&dword_1C5767000, v17, OS_LOG_TYPE_DEFAULT, "#I %s: transport successfully opened with read io size as %u", v31, 0x12u);
        if (v30 < 0) {
          operator delete(*(void **)buf);
        }
      }
LABEL_145:
      std::__shared_weak_count::__release_weak(v4);
      return v16;
    default:
      goto LABEL_144;
  }
}

void sub_1C57C5F14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1C57C5F28(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BasebandTransport::timerOn_sync(BasebandTransport *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((void *)this + 35) = 0;
    int v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", buf, 2u);
    }
  }
  if (*((_DWORD *)this + 82) == 1)
  {
    unsigned int v4 = *((_DWORD *)this + 72);
    if (v4 && *((void *)this + 34))
    {
      uint64_t v5 = 1000000000 * v4;
      int v6 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *((dispatch_queue_t *)this + 11));
      *((void *)this + 35) = v6;
      dispatch_time_t v7 = dispatch_time(0, v5);
      dispatch_source_set_timer(v6, v7, v5, 0xBEBC200uLL);
      int v8 = (std::__shared_weak_count *)*((void *)this + 10);
      if (!v8 || (uint64_t v9 = *((void *)this + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      int v11 = v10;
      p_shared_weak_owners = &v10->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
      int v13 = *((void *)this + 35);
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 1174405120;
      handler[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke;
      handler[3] = &__block_descriptor_tmp_79_0;
      handler[4] = this;
      handler[5] = v9;
      char v18 = v11;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      dispatch_source_set_event_handler(v13, handler);
      dispatch_activate(*((dispatch_object_t *)this + 35));
      uint64_t v14 = *((void *)this + 5);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *((_DWORD *)this + 72);
        *(_DWORD *)long long buf = 67109120;
        int v20 = v15;
        _os_log_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEFAULT, "#I Status report enabled(%d sec)", buf, 8u);
      }
      if (v18) {
        std::__shared_weak_count::__release_weak(v18);
      }
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    uint64_t v16 = *((void *)this + 5);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEFAULT, "#I Invalid state for status report enable.  Ignoring enable request.", buf, 2u);
    }
  }
}

void BasebandTransport::dumpState(BasebandTransport *this, char a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
  v2[3] = &__block_descriptor_tmp_80;
  v2[4] = this;
  char v3 = a2;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v2);
}

void *__copy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1, uint64_t a2)
{
  int64x2_t result = *(void **)(a2 + 88);
  if (result) {
    int64x2_t result = _Block_copy(result);
  }
  *(void *)(a1 + 88) = result;
  return result;
}

void __destroy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 88);
  if (v1) {
    _Block_release(v1);
  }
}

BOOL BasebandTransport::write(BasebandTransport *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v39 = 0;
  uint64_t v40 = &v39;
  uint64_t v41 = 0x2000000000;
  char v42 = 0;
  uint64_t v35 = 0;
  long long v36 = &v35;
  uint64_t v37 = 0x2000000000;
  uint64_t v38 = 0;
  dispatch_time_t v7 = (char *)this + 72;
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 0x40000000;
  v34[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke;
  v34[3] = &unk_1E6517018;
  v34[5] = &v39;
  v34[6] = this;
  v34[4] = &v35;
  xpc_object_t v44 = v34;
  blocuint64_t k = MEMORY[0x1E4F143A8];
  p_blocuint64_t k = 0x40000000;
  uint64_t v28 = (uint64_t)___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  long long v29 = (__n128 (*)(void *, uint64_t))&__block_descriptor_tmp_98;
  char v30 = (void (*)(uint64_t))((char *)this + 72);
  std::string __p = &v44;
  uint64_t v9 = (char *)this + 88;
  int v8 = *((void *)this + 11);
  if (*((void *)v9 + 1))
  {
    dispatch_async_and_wait(v8, &block);
    if (*((unsigned char *)v40 + 24)) {
      goto LABEL_3;
    }
LABEL_10:
    BOOL v14 = 0;
    goto LABEL_19;
  }
  dispatch_sync(v8, &block);
  if (!*((unsigned char *)v40 + 24)) {
    goto LABEL_10;
  }
LABEL_3:
  blocuint64_t k = 0;
  p_blocuint64_t k = (uint64_t)&block;
  uint64_t v28 = 0x4002000000;
  long long v29 = __Block_byref_object_copy__1;
  char v30 = __Block_byref_object_dispose__1;
  std::string __p = 0;
  long long v32 = 0;
  uint64_t v33 = 0;
  uint64_t v22 = 0;
  int v23 = &v22;
  uint64_t v24 = 0x2000000000;
  int v25 = a2;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  uint64_t v21 = a3;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 0x40000000;
  xpc_object_t v17[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_54;
  void v17[3] = &unk_1E6517040;
  v17[8] = a2;
  v17[9] = a3;
  v17[4] = &block;
  v17[5] = &v22;
  void v17[6] = &v18;
  v17[7] = this;
  CFTypeRef v43 = v17;
  xpc_object_t v44 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v45 = 0x40000000;
  uint64_t v46 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  size_t v47 = &__block_descriptor_tmp_98;
  xpc_object_t v48 = v7;
  xpc_object_t v49 = &v43;
  int v10 = *((void *)this + 11);
  if (*((void *)this + 12))
  {
    dispatch_async_and_wait(v10, &v44);
    if (v19[3]) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_sync(v10, &v44);
    if (v19[3])
    {
LABEL_5:
      int v11 = (uint64_t (**)(void, uint64_t))v36[3];
      if (*v11)
      {
        int v12 = (*v11)(v11, v23[3]);
        *((unsigned char *)v40 + 24) = v12;
        if (v12)
        {
          v16[0] = MEMORY[0x1E4F143A8];
          v16[1] = 0x40000000;
          v16[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2;
          void v16[3] = &unk_1E6517068;
          v16[4] = &v18;
          v16[5] = this;
          CFTypeRef v43 = v16;
          xpc_object_t v44 = (void *)MEMORY[0x1E4F143A8];
          uint64_t v45 = 0x40000000;
          uint64_t v46 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
          size_t v47 = &__block_descriptor_tmp_98;
          xpc_object_t v48 = v7;
          xpc_object_t v49 = &v43;
          int v13 = *((void *)this + 11);
          if (*((void *)this + 12)) {
            dispatch_async_and_wait(v13, &v44);
          }
          else {
            dispatch_sync(v13, &v44);
          }
          BOOL v14 = *((unsigned char *)v40 + 24) != 0;
        }
        else
        {
          BOOL v14 = 0;
        }
      }
      else
      {
        BOOL v14 = 0;
        *((unsigned char *)v40 + 24) = 0;
      }
      goto LABEL_17;
    }
  }
  BOOL v14 = 1;
LABEL_17:
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&block, 8);
  if (__p)
  {
    long long v32 = __p;
    operator delete(__p);
  }
LABEL_19:
  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);
  return v14;
}

void sub_1C57C679C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v39 - 216), 8);
  _Block_object_dispose((const void *)(v39 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  *(void *)(*(void *)(a1[4] + 8) + 24) = v2 + 176;
  char v3 = *(uint64_t (**)(void))(v2 + 232);
  if (v3)
  {
    uint64_t result = v3();
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = result;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
  }
  return result;
}

uint64_t (***___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_54(void *a1))(void, void, void, uint64_t)
{
  uint64_t result = *(uint64_t (****)(void, void, void, uint64_t))(a1[7] + 128);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void, void, void, uint64_t))(**result)(result, a1[8], a1[9], *(void *)(a1[4] + 8) + 40);
    *(void *)(*(void *)(a1[5] + 8) + 24) = *(void *)(*(void *)(a1[4] + 8) + 40);
    *(void *)(*(void *)(a1[6] + 8) + 24) = *(void *)(*(void *)(a1[4] + 8) + 48)
                                                 - *(void *)(*(void *)(a1[4] + 8) + 40);
  }
  return result;
}

void ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 344) + *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(void *)(v2 + 344) = v3;
  unsigned int v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    int v6 = 134218240;
    uint64_t v7 = v5;
    __int16 v8 = 2048;
    uint64_t v9 = v3;
    _os_log_debug_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEBUG, "#D Written: %zu bytes, for a total of: %llu", (uint8_t *)&v6, 0x16u);
  }
}

uint64_t BasebandTransport::read(BasebandTransport *this, unsigned __int8 *a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v22 = 0;
  int v23 = &v22;
  uint64_t v24 = 0x2000000000;
  char v25 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  uint64_t v21 = 0;
  int v6 = (uint64_t *)((char *)this + 72);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 0x40000000;
  xpc_object_t v17[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke;
  void v17[3] = &unk_1E6517090;
  v17[5] = &v22;
  void v17[6] = this;
  v17[4] = &v18;
  char v26 = v17;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  void block[4] = (char *)this + 72;
  void block[5] = &v26;
  __int16 v8 = (char *)this + 88;
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)v8 + 1))
  {
    dispatch_async_and_wait(v7, block);
    uint64_t v9 = v23;
    if (!*((unsigned char *)v23 + 24)) {
      goto LABEL_13;
    }
LABEL_5:
    uint64_t v10 = v19[3];
    if (v10 && (int v11 = *(uint64_t (**)(void))(v10 + 8)) != 0)
    {
      char v12 = v11();
      *((unsigned char *)v23 + 24) = v12;
      if (v12)
      {
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 0x40000000;
        v16[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_58;
        void v16[3] = &__block_descriptor_tmp_59;
        v16[4] = this;
        v16[5] = a4;
        ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v6, (uint64_t)v16);
        goto LABEL_13;
      }
      int v13 = *(void (**)(void))(v19[3] + 24);
      if (!v13) {
        goto LABEL_13;
      }
    }
    else
    {
      *((unsigned char *)v9 + 24) = 0;
      int v13 = *(void (**)(void))(v10 + 24);
      if (!v13) {
        goto LABEL_13;
      }
    }
    v13();
    goto LABEL_13;
  }
  dispatch_sync(v7, block);
  uint64_t v9 = v23;
  if (*((unsigned char *)v23 + 24)) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t v14 = *((unsigned __int8 *)v23 + 24);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  return v14;
}

void sub_1C57C6BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void ___ZN17BasebandTransport4readEPhmPjbj_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  *(void *)(*(void *)(a1[4] + 8) + 24) = v2 + 176;
  uint64_t v3 = *(unsigned int (**)(void))(v2 + 232);
  if (v3)
  {
    if (!v3())
    {
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
      if (!*(unsigned char *)(v2 + 332)) {
        return;
      }
      goto LABEL_7;
    }
    LOBYTE(v3) = *(unsigned char *)(v2 + 332) == 0;
  }
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = (_BYTE)v3;
  if (!*(unsigned char *)(v2 + 332)) {
    return;
  }
LABEL_7:
  unsigned int v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_error_impl(&dword_1C5767000, v4, OS_LOG_TYPE_ERROR, "Explicit reads not allowed in async mode", v5, 2u);
  }
}

uint64_t ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_58(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 336) += **(unsigned int **)(result + 40);
  return result;
}

uint64_t BasebandTransport::close(BasebandTransport *this)
{
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2000000000;
  char v13 = 1;
  *((_DWORD *)this + 72) = 0;
  uint64_t v2 = (char *)this + 72;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  uint64_t v9[2] = ___ZN17BasebandTransport5closeEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_60;
  v9[4] = this;
  uint64_t v14 = v9;
  blocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v16 = 0x40000000;
  uint64_t v17 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v18 = &__block_descriptor_tmp_98;
  uint64_t v19 = (char *)this + 72;
  uint64_t v20 = &v14;
  unsigned int v4 = (char *)this + 88;
  uint64_t v3 = *((void *)this + 11);
  if (*((void *)v4 + 1)) {
    dispatch_async_and_wait(v3, &block);
  }
  else {
    dispatch_sync(v3, &block);
  }
  BasebandTransport::stopReader(this);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = ___ZN17BasebandTransport5closeEv_block_invoke_2;
  v8[3] = &unk_1E65170F8;
  v8[4] = &v10;
  void v8[5] = this;
  uint64_t v14 = v8;
  blocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v16 = 0x40000000;
  uint64_t v17 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v18 = &__block_descriptor_tmp_98;
  uint64_t v19 = v2;
  uint64_t v20 = &v14;
  uint64_t v5 = *((void *)this + 11);
  if (*((void *)this + 12)) {
    dispatch_async_and_wait(v5, &block);
  }
  else {
    dispatch_sync(v5, &block);
  }
  uint64_t v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_1C57C6EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport5closeEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 280);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(v1 + 280));
    *(void *)(v1 + 280) = 0;
    uint64_t v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v4 = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v4, 2u);
    }
  }
}

uint64_t ___ZN17BasebandTransport5closeEv_block_invoke_2(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 80))(*(void *)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t BasebandTransport::operator*(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  _DWORD v5[2] = ___ZN17BasebandTransportdeEv_block_invoke;
  v5[3] = &unk_1E6517120;
  v5[4] = &v6;
  void v5[5] = a1;
  uint64_t v10 = v5;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  void block[4] = a1 + 72;
  void block[5] = &v10;
  uint64_t v2 = a1 + 88;
  uint64_t v1 = *(NSObject **)(a1 + 88);
  if (*(void *)(v2 + 8)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZN17BasebandTransportdeEv_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(result + 40) + 176;
  return result;
}

uint64_t BasebandTransport::switchDIAG_sync(BasebandTransport *this)
{
  return 0;
}

uint64_t BasebandTransport::getIOSizeRx(BasebandTransport *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t BasebandTransport::close_sync(BasebandTransport *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned int (*)(char *))*((void *)this + 29);
  if (v2 && (uint64_t v3 = (_OWORD *)((char *)this + 176), v2((char *)this + 176)))
  {
    *((_DWORD *)this + 82) = 0;
    uint64_t v4 = TelephonyUtilTransportFree();
    *uint64_t v3 = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((void *)this + 32) = 0;
    uint64_t v5 = *((void *)this + 5);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      return v4;
    }
  }
  else
  {
    uint64_t v4 = 1;
    uint64_t v5 = *((void *)this + 5);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      return v4;
    }
  }
  switch(*((_DWORD *)this + 26))
  {
    case 0:
      char v10 = 3;
      LODWORD(__p[0]) = 4997712;
      break;
    case 1:
      char v10 = 3;
      LODWORD(__p[0]) = 4997715;
      break;
    case 2:
      char v10 = 4;
      int v6 = 1195460932;
      goto LABEL_28;
    case 3:
      char v10 = 4;
      int v6 = 1397114194;
      goto LABEL_28;
    case 4:
      char v10 = 5;
      strcpy((char *)__p, "QMUX1");
      break;
    case 5:
      char v10 = 5;
      strcpy((char *)__p, "QMUX2");
      break;
    case 6:
      char v10 = 3;
      LODWORD(__p[0]) = 5066578;
      break;
    case 7:
      char v10 = 4;
      int v6 = 1414483778;
      goto LABEL_28;
    case 8:
      char v10 = 3;
      LODWORD(__p[0]) = 4805185;
      break;
    case 9:
      char v10 = 3;
      LODWORD(__p[0]) = 5526611;
      break;
    case 0xA:
      char v10 = 2;
      strcpy((char *)__p, "AT");
      break;
    case 0xB:
      char v10 = 4;
      int v6 = 1280328769;
      goto LABEL_28;
    case 0xC:
      char v10 = 8;
      strcpy((char *)__p, "MEDIACTL");
      break;
    case 0xD:
      char v10 = 3;
      LODWORD(__p[0]) = 5461061;
      break;
    case 0xE:
      char v10 = 4;
      int v6 = 1397968455;
      goto LABEL_28;
    case 0xF:
      char v10 = 4;
      int v6 = 1397965905;
      goto LABEL_28;
    case 0x10:
      char v10 = 5;
      strcpy((char *)__p, "RCTTH");
      break;
    case 0x11:
      char v10 = 3;
      LODWORD(__p[0]) = 5260097;
      break;
    case 0x12:
      char v10 = 4;
      int v6 = 1297040214;
      goto LABEL_28;
    case 0x13:
      char v10 = 4;
      int v6 = 1129335117;
LABEL_28:
      LODWORD(__p[0]) = v6;
      BYTE4(__p[0]) = 0;
      break;
    case 0x14:
      char v10 = 3;
      LODWORD(__p[0]) = 4999236;
      break;
    case 0x15:
      char v10 = 3;
      LODWORD(__p[0]) = 5789005;
      break;
    case 0x16:
      char v10 = 3;
      LODWORD(__p[0]) = 4407622;
      break;
    default:
      char v10 = 7;
      strcpy((char *)__p, "Unknown");
      break;
  }
  uint64_t v7 = "error";
  if (v4) {
    uint64_t v7 = "success";
  }
  *(_DWORD *)long long buf = 136315394;
  uint64_t v12 = __p;
  __int16 v13 = 2080;
  uint64_t v14 = v7;
  _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Transport close %s: %s", buf, 0x16u);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

uint64_t BasebandTransport::startReader_sync(NSObject **this)
{
  if (!this[37])
  {
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)this)) {
      size_t v2 = 0x4000;
    }
    else {
      size_t v2 = 0x8000;
    }
    this[38] = v2;
    this[37] = operator new[](v2);
    dispatch_queue_t v3 = dispatch_queue_create("ipc.bb", 0);
    uint64_t v4 = this[39];
    this[39] = v3;
    if (v4) {
      dispatch_release(v4);
    }
  }
  *((unsigned char *)this + 292) = 1;
  *((unsigned char *)this + 332) = 1;
  BasebandTransport::queueRead_sync((BasebandTransport *)this);
  return *((unsigned __int8 *)this + 292);
}

void BasebandTransport::queueRead_sync(BasebandTransport *this)
{
  size_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  int v6 = *((void *)this + 40);
  if (v6)
  {
    dispatch_retain(*((dispatch_object_t *)this + 40));
    dispatch_group_enter(v6);
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  v8[2] = ___ZN17BasebandTransport14queueRead_syncEv_block_invoke;
  v8[3] = &__block_descriptor_tmp_67;
  v8[4] = this;
  void v8[5] = v3;
  uint64_t v9 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_group_t group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(group);
  }
  dispatch_async(*((dispatch_queue_t *)this + 39), v8);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  uint64_t v7 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v1 + 292);
  *(unsigned char *)(v1 + 292) = 0;
  *(unsigned char *)(v1 + 332) = 0;
  return result;
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke_2(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  size_t v2 = *(uint64_t (**)(uint64_t))(v1 + 232);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t result = v2(v1 + 176);
    if (result)
    {
      if (*(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 24))
      {
        uint64_t v4 = *(uint64_t (**)(uint64_t))(v1 + 192);
        if (v4)
        {
          return v4(v1 + 176);
        }
      }
    }
  }
  return result;
}

void ___ZN17BasebandTransport14queueRead_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  size_t v2 = *(NSObject **)(a1 + 56);
  uint64_t v3 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  BasebandTransport::read_sync(v1, &v3);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_1C57C7830(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void BasebandTransport::read_sync(uint64_t a1, NSObject **a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v28 = v6;
  if (!v4
    || (uint64_t v8 = (capabilities::abs *)std::__shared_weak_count::lock(v4), (v29 = (std::__shared_weak_count *)v8) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v27 = 0;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, void, uint64_t, void))(a1 + 184);
  if (v9)
  {
    char v10 = v8;
    uint64_t v11 = *(void *)(a1 + 296);
    uint64_t v12 = capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v8) ? 0x4000 : 0x8000;
    int v13 = v9(a1 + 176, v11, v12, &v27, 0, 0xFFFFFFFFLL, 0);
    int v14 = v27 ? v13 : 0;
    if (v14 == 1)
    {
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 0x40000000;
      void v25[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke;
      v25[3] = &__block_descriptor_tmp_68;
      v25[4] = a1;
      int v26 = v27;
      ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v25);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_71;
      void block[4] = a1;
      void block[5] = v6;
      uint64_t v22 = (std::__shared_weak_count *)v10;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
      uint64_t v15 = *a2;
      dispatch_group_t group = v15;
      if (v15)
      {
        dispatch_retain(v15);
        dispatch_group_enter(group);
      }
      int v24 = v27;
      dispatch_sync(*(dispatch_queue_t *)(a1 + 152), block);
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      uint64_t v16 = v22;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 1174405120;
  void v19[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_72;
  void v19[3] = &__block_descriptor_tmp_73_0;
  void v19[4] = a1;
  v19[5] = v28;
  uint64_t v20 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v19);
  uint64_t v17 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = v29;
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1C57C7B50(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[7];
  a1[7] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[7];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  size_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 336) += *(unsigned int *)(result + 40);
  return result;
}

void ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[16];
  if (v3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    (*(void (**)(uint64_t, void, void, void **))(*(void *)v3 + 8))(v3, v2[37], *(unsigned int *)(a1 + 64), &__p);
    (*(void (**)(void))(v2[18] + 16))();
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v4 = *(void (**)(void))(v2[18] + 16);
    v4();
  }
}

void sub_1C57C7D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BasebandTransport *___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_72(uint64_t a1)
{
  uint64_t result = *(BasebandTransport **)(a1 + 32);
  if (*((unsigned char *)result + 292)) {
    return (BasebandTransport *)BasebandTransport::queueRead_sync(result);
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN17BasebandTransport12timerOn_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  uint64_t v6 = a1[5];
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v7 = (int *)(v3 + 328);
  uint64_t v8 = *(void *)(v3 + 336);
  uint64_t v9 = *(void *)(v3 + 376);
  uint64_t v10 = *(void *)(v3 + 344) - *(void *)(v3 + 384);
  *(void *)(v3 + 352) = v8 - v9;
  *(void *)(v3 + 360) = v10;
  if (v10) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = v8 == v9;
  }
  if (v11)
  {
    int v12 = 3;
  }
  else
  {
    if (*v7 != 3) {
      goto LABEL_12;
    }
    int v12 = 1;
  }
  *uint64_t v7 = v12;
LABEL_12:
  long long v13 = *(_OWORD *)(v3 + 344);
  *(_OWORD *)(v3 + 368) = *(_OWORD *)v7;
  *(_OWORD *)(v3 + 384) = v13;
  *(void *)(v3 + 400) = *(void *)(v3 + 360);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2;
  block[3] = &__block_descriptor_tmp_76_0;
  void block[4] = v3;
  void block[5] = v6;
  uint64_t v16 = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_async(*(dispatch_queue_t *)(v3 + 152), block);
  int v14 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_14:
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_17;
  }
}

uint64_t ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 272);
  uint64_t v10 = *(void *)(v5 + 400);
  long long v7 = *(_OWORD *)(v5 + 384);
  v9[0] = *(_OWORD *)(v5 + 368);
  v9[1] = v7;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, v9, a3, a4, a5);
}

__n128 BasebandTransport::getStatus@<Q0>(BasebandTransport *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = *((void *)this + 45);
  __n128 result = *(__n128 *)((char *)this + 328);
  long long v3 = *(_OWORD *)((char *)this + 344);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void ___ZN17BasebandTransport9dumpStateEb_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  *(int64x2_t *)(v2 + 352) = vsubq_s64(*(int64x2_t *)(v2 + 336), *(int64x2_t *)(v2 + 376));
  long long v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BasebandTransport::Parameters::toString((BasebandTransport::Parameters *)(v2 + 104), __p);
    if (v7 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v9 = v4;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    long long v3 = *(NSObject **)(v2 + 40);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)
    && ((BasebandTransport::Status::toString((BasebandTransport::Status *)(v2 + 328), __p), v7 >= 0)
      ? (uint64_t v5 = __p)
      : (uint64_t v5 = (void **)__p[0]),
        *(_DWORD *)long long buf = 136315138,
        uint64_t v9 = v5,
        _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu),
        v7 < 0))
  {
    operator delete(__p[0]);
    if (!*(unsigned char *)(a1 + 40)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 40))
  {
    return;
  }
  *(_DWORD *)(v2 + 328) = 0;
  *(unsigned char *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(void *)(v2 + 365) = 0;
  BasebandTransport::timerOn_sync((BasebandTransport *)v2);
}

void BasebandTransport::reportStatus(uint64_t a1, int a2, void **a3)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_81;
  v7[4] = a1;
  int v9 = a2;
  uint64_t v4 = *a3;
  if (*a3) {
    uint64_t v4 = _Block_copy(v4);
  }
  long long aBlock = v4;
  uint64_t v10 = v7;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  void block[4] = a1 + 72;
  void block[5] = &v10;
  uint64_t v5 = *(NSObject **)(a1 + 88);
  if (!*(void *)(a1 + 96))
  {
    dispatch_sync(v5, block);
    uint64_t v6 = aBlock;
    if (!aBlock) {
      return;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v5, block);
  uint64_t v6 = aBlock;
  if (aBlock) {
LABEL_7:
  }
    _Block_release(v6);
}

void ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  *(_DWORD *)(v3 + 288) = v1;
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  uint64_t v4 = *(const void **)(v3 + 272);
  *(void *)(v3 + 272) = v2;
  if (v4) {
    _Block_release(v4);
  }

  BasebandTransport::timerOn_sync((BasebandTransport *)v3);
}

void *__copy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)(a2 + 40);
  if (result) {
    __n128 result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

double ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 0x600000000000000;
  double result = *(double *)"ipc.bb";
  *(_OWORD *)a1 = *(_OWORD *)"ipc.bb";
  return result;
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F2D90;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F2D90;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  char v9 = 18;
  strcpy(__p, "baseband.transport");
  ctu::LogServer::create();
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v10;
  long long v10 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v10 + 1) + 16))(*((void *)&v10 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v9 < 0) {
LABEL_7:
  }
    operator delete(*(void **)__p);
LABEL_8:
  uint64_t v5 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v5->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F20F2DD0;
  *(void *)std::string __p = v5;
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F2E38;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = v5;
  *(void *)&__p[8] = v6;
  char v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  ctu::LogServer::addWriter();
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
  if (*(void *)&__p[8])
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**(void **)&__p[8] + 16))(*(void *)&__p[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
    }
  }
}

void sub_1C57C86A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C57C86BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1C57C86E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599DB37) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599DB37 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599DB37)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599DB37 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F2D90;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C57C89E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C57C8A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BasebandTransportMAV *,std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV *)#1},std::allocator<BasebandTransportMAV>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransportMAV *,std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV *)#1},std::allocator<BasebandTransportMAV>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BasebandTransportMAV *,std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV *)#1},std::allocator<BasebandTransportMAV>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMAVEENSt3__11"
                     "0shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMA"
                                "VEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMAVEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMAVEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV*)#1}::operator() const(BasebandTransportMAV*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_"
                                "ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport*)#1}::operator() const(BasebandTransport*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void (***)(const void *, _OWORD *, uint64_t, uint64_t, uint64_t))a1;
  long long v7 = *(_OWORD *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 40);
  v8[0] = *(_OWORD *)(a1 + 8);
  v8[1] = v7;
  v6[2](v6, v8, a3, a4, a5);
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  operator delete((void *)a1);
}

void sub_1C57C8C50(_Unwind_Exception *a1)
{
  if (*v1) {
    _Block_release(*v1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(const void **a1)
{
  (*((void (**)(void))*a1 + 2))();
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  if (*a1) {
    _Block_release(*a1);
  }

  operator delete(a1);
}

void sub_1C57C8CE0(_Unwind_Exception *a1)
{
  unint64_t v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(void *)(v1 + 16) = v3;
    operator delete(v3);
  }
  if (*(void *)v1) {
    _Block_release(*(const void **)v1);
  }
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(void **a1)
{
  (*((void (**)(void))*a1 + 2))();
  if (!*((unsigned char *)a1 + 20))
  {
    free(a1[1]);
    uint64_t v2 = *a1;
    if (!*a1) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v2 = *a1;
  if (*a1) {
LABEL_5:
  }
    _Block_release(v2);
LABEL_6:

  operator delete(a1);
}

void sub_1C57C8D88(_Unwind_Exception *a1)
{
  if (*v1) {
    _Block_release(*v1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F2F60;
  void block[5] = v5;
  int v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  long long v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

const char *CPMSModule::getName(CPMSModule *this)
{
  return "cpms.mod";
}

void CPMSModule::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  if (capabilities::abs::getCPMSVariant((capabilities::abs *)a1) == 1)
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v4 = operator new(0x1B8uLL);
    uint64_t v5 = v4;
    uint64_t v6 = *a1;
    long long v7 = (std::__shared_weak_count *)a1[1];
    v22[0] = v6;
    v22[1] = (uint64_t)v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    CPMSModule::CPMSModule((uint64_t)v4, v22);
    int v23 = v5;
    unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    p_shared_owners = &v8->__shared_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F33F0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
    unint64_t v24 = (unint64_t)v8;
    long long v10 = (std::__shared_weak_count *)*((void *)v5 + 16);
    if (v10)
    {
      if (v10->__shared_owners_ != -1) {
        goto LABEL_13;
      }
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v5 + 15) = v5;
      *((void *)v5 + 16) = v8;
      std::__shared_weak_count::__release_weak(v10);
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_13;
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v5 + 15) = v5;
      *((void *)v5 + 16) = v8;
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_13:
        int v12 = v23;
        if (v23[13])
        {
          long long v13 = (std::__shared_weak_count *)v23[16];
          if (!v13 || (uint64_t v14 = v23[15], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          uint64_t v16 = v15;
          *(void *)long long buf = v14;
          uint64_t v28 = v15;
          ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v12 + 7));
          uint64_t v17 = v14 + 48;
          if (!v14) {
            uint64_t v17 = 0;
          }
          uint64_t v25 = v17;
          int v26 = v16;
          *(void *)long long buf = 0;
          uint64_t v28 = 0;
          ctu::TrackedLogger::registerLoggerToServer();
          uint64_t v18 = v26;
          if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          uint64_t v19 = v28;
          if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          int v12 = v23;
        }
        unint64_t v20 = v24;
        *a2 = v12;
        a2[1] = v20;
        if (v7) {
          std::__shared_weak_count::__release_weak(v7);
        }
        if (!v12)
        {
          uint64_t v21 = GetOsLogContext()[1];
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "Failed to create CPMS Module!", buf, 2u);
          }
        }
        return;
      }
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    goto LABEL_13;
  }
  BOOL v11 = GetOsLogContext()[1];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "User-space CPMS not supported!", buf, 2u);
  }
  *a2 = 0;
  a2[1] = 0;
}

void sub_1C57C92BC()
{
}

void sub_1C57C931C()
{
}

void sub_1C57C932C()
{
}

void sub_1C57C9338(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t CPMSModule::CPMSModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F20F3340;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20F3340;
  }
  *(void *)a1 = &unk_1F20F2FB8;
  *(void *)(a1 + 48) = &unk_1F20F3028;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", "cpms.mod");
  GetABMLogServer(&v10);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("cpms.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F20F33B0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)(a1 + 56) = &unk_1F20F0070;
  long long v7 = v11;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)(a1 + 48) = &unk_1F20F3440;
  uint64_t v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_1F20F2FB8;
  *(void *)(a1 + 48) = &unk_1F20F3028;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 229) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 304) = a1 + 312;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = a1 + 344;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = a1 + 408;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = TelephonyBasebandCreateController();
  return a1;
}

void sub_1C57C96F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v23 = v14;
  unint64_t v20 = v15;
  PowerBudget::~PowerBudget(v19);
  PowerBudget::~PowerBudget(v18);
  PowerBudget::~PowerBudget(v17);
  PowerBudget::~PowerBudget(v16);
  PowerBudget::~PowerBudget(v13);
  PowerBudget::~PowerBudget(v20);
  uint64_t v22 = *((void *)v10 + 28);
  *((void *)v10 + 28) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v12);
  ctu::SharedLoggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v11);
  Service::~Service(v10);
  _Unwind_Resume(a1);
}

void sub_1C57C978C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v4);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v3);
  _Unwind_Resume(a1);
}

void sub_1C57C97D0(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F33B0;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20F33B0;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void CPMSModule::~CPMSModule(CPMSModule *this)
{
  *(void *)this = &unk_1F20F2FB8;
  *((void *)this + 6) = &unk_1F20F3028;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v16, 2u);
  }
  uint64_t v3 = (const void *)*((void *)this + 54);
  if (v3) {
    CFRelease(v3);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 400, *((void **)this + 51));
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 50) = (char *)this + 408;

  *((void *)this + 53) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 400, *((void **)this + 51));
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 50) = (char *)this + 408;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 368, *((void **)this + 47));
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 46) = (char *)this + 376;

  *((void *)this + 49) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 368, *((void **)this + 47));
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 46) = (char *)this + 376;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 336, *((void **)this + 43));
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 42) = (char *)this + 344;

  *((void *)this + 45) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 336, *((void **)this + 43));
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 42) = (char *)this + 344;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 304, *((void **)this + 39));
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 38) = (char *)this + 312;

  *((void *)this + 41) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 304, *((void **)this + 39));
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 38) = (char *)this + 312;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 272, *((void **)this + 35));
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 34) = (char *)this + 280;

  *((void *)this + 37) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 272, *((void **)this + 35));
  uint64_t v4 = (void *)*((void *)this + 31);
  *((void *)this + 34) = (char *)this + 280;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 240, v4);
  *((void *)this + 30) = (char *)this + 248;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;

  *((void *)this + 33) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 240, *((void **)this + 31));
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 30) = (char *)this + 248;
  uint64_t v5 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  long long v7 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *((void *)this + 6) = &unk_1F20F33B0;
  MEMORY[0x1C8790F40]((char *)this + 56);
  uint64_t v9 = *((void *)this + 18);
  if (v9) {
    dispatch_release(v9);
  }
  uint64_t v10 = *((void *)this + 17);
  if (v10) {
    dispatch_release(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v12 = *((void *)this + 3);
  if (v12)
  {
    uint64_t v13 = *((void *)this + 4);
    uint64_t v14 = (void *)*((void *)this + 3);
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 1) < 0) {
          operator delete(*(void **)(v13 - 24));
        }
        v13 -= 24;
      }
      while (v13 != v12);
      uint64_t v14 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v12;
    operator delete(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
}

{
  void *v1;
  uint64_t vars8;

  CPMSModule::~CPMSModule(this);

  operator delete(v1);
}

void non-virtual thunk to'CPMSModule::~CPMSModule(CPMSModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  CPMSModule::~CPMSModule((CPMSModule *)((char *)this - 48));

  operator delete(v1);
}

void CPMSModule::shutdown(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = a1;
  v8[1] = v3;
  uint64_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  void v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CPMSModule>::execute_wrapped<CPMSModule::shutdown(dispatch::group_session)::$_0>(CPMSModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CPMSModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CPMSModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void CPMSModule::initialize(void *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3321888768;
  void v11[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_48_e8_40c30_ZTSN8dispatch13group_sessionE_e5_v8__0l;
  uint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  uint64_t v8 = a1[17];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F34D8;
  void block[5] = v5;
  uint64_t v14 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v11;
  dispatch_async(v8, block);
  uint64_t v10 = v14;
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_9:
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (uint64_t v3 = *(void *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  long long v7 = (const void *)off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__dst, v6);
    long long v8 = *(_OWORD *)__dst;
    *(_OWORD *)long long __dst = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = *(std::__shared_weak_count **)&__dst[8];
    if (*(void *)&__dst[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__dst[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    long long v7 = (const void *)off_1EBBDD2A0;
  }
  v81[1] = v7;
  CFTypeRef v82 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(long long *__return_ptr, const void *))(*(void *)v7 + 104))(&v83, v7);
  long long v11 = v83;
  long long v83 = 0uLL;
  uint64_t v12 = *(std::__shared_weak_count **)(v1 + 200);
  *(_OWORD *)(v1 + 192) = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)&v83 + 1);
  if (*((void *)&v83 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v83 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!v82 || atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*(void *)(v1 + 192)) {
      goto LABEL_24;
    }
LABEL_112:
    CFMutableDictionaryRef v63 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long __dst = 0;
      _os_log_error_impl(&dword_1C5767000, v63, OS_LOG_TYPE_ERROR, "Failed to create CPMS Command Driver", __dst, 2u);
    }
    goto LABEL_114;
  }
  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
  std::__shared_weak_count::__release_weak(v82);
  if (!*(void *)(v1 + 192)) {
    goto LABEL_112;
  }
LABEL_24:
  uint64_t v14 = (const void *)*MEMORY[0x1E4F4C2F0];
  size_t v15 = strlen((const char *)*MEMORY[0x1E4F4C2F0]);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v16 = v15;
  if (v15 >= 0x17)
  {
    uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v18 = v15 | 7;
    }
    uint64_t v19 = v18 + 1;
    uint64_t v17 = operator new(v18 + 1);
    *(void *)&__dst[8] = v16;
    *(void *)&__dst[16] = v19 | 0x8000000000000000;
    *(void *)long long __dst = v17;
    goto LABEL_31;
  }
  __dst[23] = v15;
  uint64_t v17 = __dst;
  if (v15) {
LABEL_31:
  }
    memmove(v17, v14, v16);
  v17[v16] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  void aBlock[4] = v1;
  aBlock[5] = v3;
  CFTypeRef v80 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v20 = _Block_copy(aBlock);
  v81[0] = v20;
  Service::registerCommandHandler(v1, (uint64_t)__dst, v81);
  if (v20) {
    _Block_release(v20);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  uint64_t v21 = (const void *)*MEMORY[0x1E4F4CEF0];
  size_t v22 = strlen((const char *)*MEMORY[0x1E4F4CEF0]);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v26 = v25 + 1;
    unint64_t v24 = operator new(v25 + 1);
    *(void *)&__dst[8] = v23;
    *(void *)&__dst[16] = v26 | 0x8000000000000000;
    *(void *)long long __dst = v24;
    goto LABEL_43;
  }
  __dst[23] = v22;
  unint64_t v24 = __dst;
  if (v22) {
LABEL_43:
  }
    memmove(v24, v21, v23);
  v24[v23] = 0;
  v76[0] = MEMORY[0x1E4F143A8];
  v76[1] = 3321888768;
  v76[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_5;
  v76[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v76[4] = v1;
  v76[5] = v3;
  uint64_t v77 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v27 = _Block_copy(v76);
  CFTypeRef v78 = v27;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v78);
  if (v27) {
    _Block_release(v27);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  uint64_t v28 = (const void *)*MEMORY[0x1E4F4C6C0];
  size_t v29 = strlen((const char *)*MEMORY[0x1E4F4C6C0]);
  if (v29 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v30 = v29;
  if (v29 >= 0x17)
  {
    uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v32 = v29 | 7;
    }
    uint64_t v33 = v32 + 1;
    uint64_t v31 = operator new(v32 + 1);
    *(void *)&__dst[8] = v30;
    *(void *)&__dst[16] = v33 | 0x8000000000000000;
    *(void *)long long __dst = v31;
    goto LABEL_55;
  }
  __dst[23] = v29;
  uint64_t v31 = __dst;
  if (v29) {
LABEL_55:
  }
    memmove(v31, v28, v30);
  v31[v30] = 0;
  v73[0] = MEMORY[0x1E4F143A8];
  v73[1] = 3321888768;
  v73[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  v73[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v73[4] = v1;
  v73[5] = v3;
  xpc_object_t v74 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v34 = _Block_copy(v73);
  uint64_t v75 = v34;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v75);
  if (v34) {
    _Block_release(v34);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  uint64_t v35 = (const void *)*MEMORY[0x1E4F4C280];
  size_t v36 = strlen((const char *)*MEMORY[0x1E4F4C280]);
  if (v36 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v37 = v36;
  if (v36 >= 0x17)
  {
    uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v39 = v36 | 7;
    }
    uint64_t v40 = v39 + 1;
    uint64_t v38 = operator new(v39 + 1);
    *(void *)&__dst[8] = v37;
    *(void *)&__dst[16] = v40 | 0x8000000000000000;
    *(void *)long long __dst = v38;
    goto LABEL_67;
  }
  __dst[23] = v36;
  uint64_t v38 = __dst;
  if (v36) {
LABEL_67:
  }
    memmove(v38, v35, v37);
  v38[v37] = 0;
  v70[0] = MEMORY[0x1E4F143A8];
  v70[1] = 3321888768;
  v70[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
  v70[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v70[4] = v1;
  v70[5] = v3;
  xpc_object_t v71 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v41 = _Block_copy(v70);
  uint64_t v72 = v41;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v72);
  if (v41) {
    _Block_release(v41);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  char v42 = (const void *)*MEMORY[0x1E4F4C228];
  size_t v43 = strlen((const char *)*MEMORY[0x1E4F4C228]);
  if (v43 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v44 = v43;
  if (v43 >= 0x17)
  {
    uint64_t v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17) {
      uint64_t v46 = v43 | 7;
    }
    uint64_t v47 = v46 + 1;
    uint64_t v45 = operator new(v46 + 1);
    *(void *)&__dst[8] = v44;
    *(void *)&__dst[16] = v47 | 0x8000000000000000;
    *(void *)long long __dst = v45;
    goto LABEL_79;
  }
  __dst[23] = v43;
  uint64_t v45 = __dst;
  if (v43) {
LABEL_79:
  }
    memmove(v45, v42, v44);
  v45[v44] = 0;
  v67[0] = MEMORY[0x1E4F143A8];
  v67[1] = 3321888768;
  v67[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_4;
  v67[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v67[4] = v1;
  v67[5] = v3;
  uint64_t v68 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v48 = _Block_copy(v67);
  uint64_t v69 = v48;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v69);
  if (v48) {
    _Block_release(v48);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  GetABMLogServer(&v65);
  ctu::DispatchTimerService::create();
  long long v49 = *(_OWORD *)__dst;
  *(_OWORD *)long long __dst = 0uLL;
  size_t v50 = *(std::__shared_weak_count **)(v1 + 216);
  *(_OWORD *)(v1 + 208) = v49;
  if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  xpc_object_t v51 = *(std::__shared_weak_count **)&__dst[8];
  if (*(void *)&__dst[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__dst[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
  xpc_object_t v52 = v66;
  if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
  uint64_t v53 = [MEMORY[0x1E4F56670] sharedCPMSAgent];
  *(void *)(v1 + 168) = v53;
  if (v53)
  {
    if ((CPMSModule::initPowerConfig_sync((id *)v1) & 1) == 0)
    {
      CFMutableDictionaryRef v62 = *(NSObject **)(v1 + 88);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long __dst = 0;
        _os_log_error_impl(&dword_1C5767000, v62, OS_LOG_TYPE_ERROR, "Failed to initialization of CPMS power config.", __dst, 2u);
        CFMutableArrayRef v61 = v68;
        if (!v68) {
          goto LABEL_103;
        }
        goto LABEL_102;
      }
LABEL_101:
      CFMutableArrayRef v61 = v68;
      if (!v68)
      {
LABEL_103:
        if (v71) {
          std::__shared_weak_count::__release_weak(v71);
        }
        if (v74) {
          std::__shared_weak_count::__release_weak(v74);
        }
        if (v77) {
          std::__shared_weak_count::__release_weak(v77);
        }
        if (v80) {
          std::__shared_weak_count::__release_weak(v80);
        }
LABEL_114:
        std::__shared_weak_count::__release_weak(v5);
        return;
      }
LABEL_102:
      std::__shared_weak_count::__release_weak(v61);
      goto LABEL_103;
    }
    xpc_object_t v54 = *(std::__shared_weak_count **)(v1 + 128);
    if (v54)
    {
      uint64_t v55 = *(void *)(v1 + 120);
      CFTypeRef v56 = std::__shared_weak_count::lock(v54);
      if (v56)
      {
        CFTypeRef v57 = v56;
        CFTypeRef v58 = operator new(8uLL);
        *CFTypeRef v58 = v1;
        dispatch_object_t v59 = *(NSObject **)(v1 + 136);
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v60 = operator new(0x18uLL);
        *xpc_object_t v60 = v58;
        v60[1] = v55;
        v60[2] = v57;
        dispatch_async_f(v59, v60, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_10initializeENS_13group_sessionEEUb_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
          CFMutableArrayRef v61 = v68;
          if (!v68) {
            goto LABEL_103;
          }
          goto LABEL_102;
        }
        goto LABEL_101;
      }
    }
LABEL_125:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeRef v64 = GetOsLogContext()[1];
  if (os_log_type_enabled(v64, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long __dst = 136315906;
    *(void *)&__dst[4] = "ABM ASSERT";
    *(_WORD *)&__dst[12] = 2080;
    *(void *)&__dst[14] = "fCPMSAgent";
    *(_WORD *)&__dst[22] = 2080;
    CFArrayRef v85 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/CPMS/CPMSModule.mm";
    __int16 v86 = 1024;
    int v87 = 232;
    _os_log_fault_impl(&dword_1C5767000, v64, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", __dst, 0x26u);
    __break(1u);
    goto LABEL_125;
  }
  __break(1u);
}

void sub_1C57CAB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C57CAD08()
{
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3(void *a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = (void *)a1[4];
    long long v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      long long v8 = v7;
      uint64_t v9 = a1[5];
      if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v9) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9) {
          return;
        }
      }
      uint64_t v11 = a1[5];
      uint64_t v10 = (std::__shared_weak_count *)a1[6];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (*a3)
      {
        uint64_t v12 = _Block_copy(*a3);
        uint64_t v13 = (std::__shared_weak_count *)v6[16];
        if (!v13) {
LABEL_23:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = (std::__shared_weak_count *)v6[16];
        if (!v13) {
          goto LABEL_23;
        }
      }
      uint64_t v14 = v6[15];
      size_t v15 = std::__shared_weak_count::lock(v13);
      if (!v15) {
        goto LABEL_23;
      }
      size_t v16 = v15;
      uint64_t v17 = operator new(0x20uLL);
      uint64_t v18 = v17;
      *uint64_t v17 = v11;
      v17[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      xpc_object_t v17[2] = v6;
      void v17[3] = v12;
      uint64_t v19 = v6[17];
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v20 = operator new(0x18uLL);
      *unint64_t v20 = v18;
      v20[1] = v14;
      v20[2] = v16;
      dispatch_async_f(v19, v20, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if (!v10) {
          return;
        }
      }
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_5(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    long long v7 = (void *)a1[4];
    long long v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = a1[5];
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10) {
          return;
        }
      }
      xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C170]);
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      int v12 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      uint64_t v14 = a1[5];
      uint64_t v13 = (std::__shared_weak_count *)a1[6];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (*a3)
      {
        size_t v15 = _Block_copy(*a3);
        size_t v16 = (std::__shared_weak_count *)v7[16];
        if (!v16) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      else
      {
        size_t v15 = 0;
        size_t v16 = (std::__shared_weak_count *)v7[16];
        if (!v16) {
          goto LABEL_24;
        }
      }
      uint64_t v17 = v7[15];
      uint64_t v18 = std::__shared_weak_count::lock(v16);
      if (!v18) {
        goto LABEL_24;
      }
      uint64_t v19 = v18;
      unint64_t v20 = operator new(0x28uLL);
      uint64_t v21 = v20;
      *unint64_t v20 = v14;
      v20[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v20[2] = v7;
      *((_DWORD *)v20 + 6) = v12;
      v20[4] = v15;
      size_t v22 = v7[17];
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      size_t v23 = operator new(0x18uLL);
      void *v23 = v21;
      v23[1] = v17;
      v23[2] = v19;
      dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_1C57CB114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = (void *)a1[4];
    long long v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      long long v8 = v7;
      uint64_t v9 = a1[5];
      if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v9) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9) {
          return;
        }
      }
      uint64_t v11 = a1[5];
      uint64_t v10 = (std::__shared_weak_count *)a1[6];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (*a3)
      {
        int v12 = _Block_copy(*a3);
        uint64_t v13 = (std::__shared_weak_count *)v6[16];
        if (!v13) {
LABEL_23:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      else
      {
        int v12 = 0;
        uint64_t v13 = (std::__shared_weak_count *)v6[16];
        if (!v13) {
          goto LABEL_23;
        }
      }
      uint64_t v14 = v6[15];
      size_t v15 = std::__shared_weak_count::lock(v13);
      if (!v15) {
        goto LABEL_23;
      }
      size_t v16 = v15;
      uint64_t v17 = operator new(0x20uLL);
      uint64_t v18 = v17;
      *uint64_t v17 = v11;
      v17[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      xpc_object_t v17[2] = v6;
      void v17[3] = v12;
      uint64_t v19 = v6[17];
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v20 = operator new(0x18uLL);
      *unint64_t v20 = v18;
      v20[1] = v14;
      v20[2] = v16;
      dispatch_async_f(v19, v20, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if (!v10) {
          return;
        }
      }
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  long long v7 = (void *)a1[4];
  long long v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  uint64_t v12 = a1[5];
  uint64_t v11 = (std::__shared_weak_count *)a1[6];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    uint64_t v14 = *a3;
    if (*a3) {
      goto LABEL_11;
    }
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = *a3;
    if (*a3)
    {
LABEL_11:
      size_t v15 = _Block_copy(v14);
      size_t v16 = (std::__shared_weak_count *)v7[16];
      if (!v16) {
LABEL_25:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  size_t v15 = 0;
  size_t v16 = (std::__shared_weak_count *)v7[16];
  if (!v16) {
    goto LABEL_25;
  }
LABEL_15:
  uint64_t v17 = v7[15];
  uint64_t v18 = std::__shared_weak_count::lock(v16);
  if (!v18) {
    goto LABEL_25;
  }
  uint64_t v19 = v18;
  unint64_t v20 = operator new(0x28uLL);
  uint64_t v21 = v20;
  *unint64_t v20 = v12;
  v20[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v20[2] = v7;
  void v20[3] = v13;
  xpc_object_t v22 = xpc_null_create();
  v21[4] = v15;
  size_t v23 = v7[17];
  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v24 = operator new(0x18uLL);
  void *v24 = v21;
  v24[1] = v17;
  void v24[2] = v19;
  dispatch_async_f(v23, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v22);
  if (v11)
  {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_4(void *a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    long long v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      long long v8 = v7;
      uint64_t v9 = a1[5];
      if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v9) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9) {
          return;
        }
      }
      uint64_t v10 = *a3;
      if (*a3)
      {
        xpc_object_t v13 = 0;
        long long aBlock = _Block_copy(v10);
        CPMSModule::getCurrentPower(v6, &v13, (uint64_t *)&aBlock);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      else
      {
        uint64_t v11 = *(NSObject **)(v6 + 88);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_1C5767000, v11, OS_LOG_TYPE_ERROR, "Expected response handler", buf, 2u);
        }
      }
    }
  }
}

void sub_1C57CB63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void CPMSModule::getCurrentPower(uint64_t a1, NSObject **a2, uint64_t *a3)
{
  uint64_t v37 = 0;
  uint64_t v38 = &v37;
  uint64_t v39 = 0x2020000000;
  char v40 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = &v33;
  uint64_t v35 = 0x2020000000;
  char v36 = 0;
  uint64_t v6 = a1 + 120;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  void v32[2] = ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke;
  v32[3] = &unk_1E6517238;
  v32[5] = &v33;
  v32[6] = a1;
  v32[4] = &v37;
  uint64_t v41 = v32;
  blocuint64_t k = (void *)MEMORY[0x1E4F143A8];
  uint64_t v43 = 3221225472;
  size_t v44 = ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v45 = &__block_descriptor_48_e5_v8__0l;
  uint64_t v46 = a1 + 120;
  uint64_t v47 = (xpc_object_t *)&v41;
  uint64_t v8 = a1 + 136;
  long long v7 = *(NSObject **)(a1 + 136);
  if (*(void *)(v8 + 8))
  {
    dispatch_async_and_wait(v7, &block);
    if (!*((unsigned char *)v38 + 24)) {
      goto LABEL_28;
    }
  }
  else
  {
    dispatch_sync(v7, &block);
    if (!*((unsigned char *)v38 + 24)) {
      goto LABEL_28;
    }
  }
  if (*((unsigned char *)v34 + 24))
  {
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v9 || (uint64_t v10 = *(void *)(a1 + 120), (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v12 = v11;
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v13 = *(void *)(a1 + 192);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_2;
    aBlock[3] = &__block_descriptor_72_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e1095_v32__0_BudgetData__map_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int___std::less_abm::BasebandCPMSPowerBudgetScale___std::allocator_std::pair_const_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int________tree_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____std::allocator_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int______v___compressed_pair_std::__tree_end_node_std::__tree_node_base_void________std::allocator_std::__tree_node_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____void_________tree_end_node_std::__tree_node_base_void________v_____compressed_pair_unsigned_long__std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____Q____8l;
    uint64_t v14 = *a2;
    void aBlock[4] = a1;
    dispatch_group_t group = v14;
    if (v14)
    {
      dispatch_retain(v14);
      dispatch_group_enter(group);
    }
    uint64_t v27 = v10;
    uint64_t v28 = v12;
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    size_t v15 = (void *)*a3;
    if (*a3) {
      size_t v15 = _Block_copy(v15);
    }
    size_t v29 = v15;
    size_t v16 = _Block_copy(aBlock);
    uint64_t v17 = *(NSObject **)(a1 + 136);
    if (v17) {
      dispatch_retain(v17);
    }
    size_t v30 = v16;
    dispatch_object_t object = v17;
    (*(void (**)(uint64_t, void **))(*(void *)v13 + 40))(v13, &v30);
    if (object) {
      dispatch_release(object);
    }
    if (v30) {
      _Block_release(v30);
    }
    if (v29) {
      _Block_release(v29);
    }
    if (v28) {
      std::__shared_weak_count::__release_weak(v28);
    }
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    std::__shared_weak_count::__release_weak(v12);
    goto LABEL_40;
  }
LABEL_28:
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  void v24[2] = ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_77;
  v24[3] = &unk_1E6517238;
  v24[4] = &v37;
  v24[5] = &v33;
  v24[6] = a1;
  uint64_t v41 = v24;
  blocuint64_t k = (void *)MEMORY[0x1E4F143A8];
  uint64_t v43 = 3221225472;
  size_t v44 = ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v45 = &__block_descriptor_48_e5_v8__0l;
  uint64_t v46 = v6;
  uint64_t v47 = (xpc_object_t *)&v41;
  uint64_t v18 = *(NSObject **)(a1 + 136);
  if (*(void *)(a1 + 144))
  {
    dispatch_async_and_wait(v18, &block);
    if (!*a3) {
      goto LABEL_40;
    }
  }
  else
  {
    dispatch_sync(v18, &block);
    if (!*a3) {
      goto LABEL_40;
    }
  }
  NSDict = (ctu *)PowerBudget::getNSDict((id *)(a1 + 400));
  ctu::cf_to_xpc((uint64_t *)&v41, NSDict, v20);
  xpc_object_t v21 = v41;
  blocuint64_t k = v41;
  uint64_t v22 = MEMORY[0x1E4F14590];
  if (v41 && MEMORY[0x1C8792D30](v41) == v22)
  {
    xpc_retain(v21);
  }
  else
  {
    xpc_object_t v21 = xpc_null_create();
    blocuint64_t k = v21;
  }
  xpc_release(v41);
  if (MEMORY[0x1C8792D30](v21) == v22) {
    int v23 = 0;
  }
  else {
    int v23 = -534716416;
  }
  LODWORD(v41) = v23;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&v41, &block);
  xpc_release(block);
LABEL_40:
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v37, 8);
}

void sub_1C57CBA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,dispatch_group_t group,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  dispatch::callback<void({block_pointer})(BudgetData)>::~callback((uint64_t)&a25);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::__shared_weak_count::__release_weak(v34);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v35 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t CPMSModule::initPowerConfig_sync(id *this)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  memset(&__p, 170, sizeof(__p));
  CPMSModule::getCPMSBudgetPlistPath((CPMSModule *)this, (void **)&__p.__r_.__value_.__l.__data_);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v44 = __p;
  }
  util::readPlistToCFDictionary((uint64_t)&v44, &cf);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = (void *)cf;
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v42 = 0u;
  long long v43 = 0u;
  long long v41 = 0u;
  long long v40 = 0u;
  uint64_t v4 = [v2 countByEnumeratingWithState:&v40 objects:v51 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v41;
    uint64_t v32 = (void *)*MEMORY[0x1E4F566D0];
    uint64_t v33 = (void *)*MEMORY[0x1E4F566C0];
    uint64_t v34 = (void *)*MEMORY[0x1E4F566A0];
    unsigned int v31 = 5000;
    uint64_t v6 = (void *)*MEMORY[0x1E4F566B0];
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v41 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v40 + 1) + 8 * i);
        if ([v8 isEqualToString:@"CPMSPowerTimeScale1s"])
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v6, (void *)[v2 valueForKey:v8], v3);
        }
        else if ([v8 isEqualToString:@"CPMSPowerTimeScale100ms"])
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v34, (void *)[v2 valueForKey:v8], v3);
        }
        else if ([v8 isEqualToString:@"CPMSPowerTimeScaleInstantaneous"])
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v33, (void *)[v2 valueForKey:v8], v3);
        }
        else if ([v8 isEqualToString:@"CPMSPowerTimeScaleThermal"])
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v32, (void *)[v2 valueForKey:v8], v3);
        }
        else if ([v8 isEqualToString:@"CPMSPowerBudgetPeriodms"])
        {
          unsigned int v31 = [[(id)objc_msgSend(v2, "valueForKey:", v8) intValue];
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v40 objects:v51 count:16];
    }
    while (v4);
  }
  else
  {
    unsigned int v31 = 5000;
  }
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)(this + 30), this[46], this + 47);

  this[33] = (id)[this[49] copy];
  uint64_t v9 = this[11];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = (uint64_t)[(id)[v3 description] UTF8String];
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Power budget config to be registered with CPMS %s", buf, 0xCu);
    uint64_t v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 34), buf);
    if (v48 >= 0) {
      uint64_t v11 = buf;
    }
    else {
      uint64_t v11 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long v49 = 136315138;
    size_t v50 = v11;
    _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Min default budget %s", v49, 0xCu);
    if (v48 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 38), buf);
    if (v48 >= 0) {
      uint64_t v12 = buf;
    }
    else {
      uint64_t v12 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long v49 = 136315138;
    size_t v50 = v12;
    _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Max default budget %s", v49, 0xCu);
    if (v48 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 42), buf);
    if (v48 >= 0) {
      uint64_t v13 = buf;
    }
    else {
      uint64_t v13 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long v49 = 136315138;
    size_t v50 = v13;
    _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Idle default budget %s", v49, 0xCu);
    if (v48 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 46), buf);
    if (v48 >= 0) {
      uint64_t v14 = buf;
    }
    else {
      uint64_t v14 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long v49 = 136315138;
    size_t v50 = v14;
    _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Low default budget %s", v49, 0xCu);
    if (v48 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v31;
    _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Power budget update period (ms) %u", buf, 8u);
    uint64_t v9 = this[11];
  }
  BOOL v15 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    int v16 = capabilities::abs::supportsCPMSConnectedState((capabilities::abs *)v15);
    uint64_t v17 = " not";
    if (v16) {
      uint64_t v17 = "";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v17;
    _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Connected state evaluation is%s supported", buf, 0xCu);
  }
  uint64_t v18 = (std::__shared_weak_count *)this[16];
  if (!v18 || (v19 = this[15], (unint64_t v20 = std::__shared_weak_count::lock(v18)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v21 = v20;
  p_shared_weak_owners = &v20->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v21);
  }
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 3321888768;
  void v38[2] = ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke;
  v38[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e22_v16__0__NSDictionary_8l;
  v38[4] = this;
  v38[5] = v19;
  uint64_t v39 = v21;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  this[22] = v38;
  uint64_t v35 = 0;
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3321888768;
  v36[2] = ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke_51;
  v36[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e19___NSDictionary_8__0l;
  v36[4] = this;
  v36[5] = v19;
  uint64_t v37 = v21;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  this[23] = v36;
  id v23 = objc_alloc_init(MEMORY[0x1E4F56680]);
  [v23 setClientId:4];
  [v23 setPowerLevels:v3];
  [v23 setIsContinuous:1];
  [v23 setNotificationCallback:this[22]];
  [v23 setGetCurrentPower:this[23]];
  [v23 setPowerBudgetUpdateMinimumPeriod:v31];
  uint64_t v24 = [this[21] registerClientWithDescription:v23 error:&v35];
  uint64_t v25 = v24;
  uint64_t v26 = v35;
  if (v35) {
    char v27 = 0;
  }
  else {
    char v27 = v24;
  }
  if ((v27 & 1) == 0)
  {
    uint64_t v28 = this[11];
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      CPMSModule::getErrorMsg(v26, (uint64_t)buf);
      size_t v30 = v48 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)long long v49 = 136315138;
      size_t v50 = v30;
      _os_log_error_impl(&dword_1C5767000, v28, OS_LOG_TYPE_ERROR, "Failed to register CPMS: %s", v49, 0xCu);
      if (v48 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }

  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  std::__shared_weak_count::__release_weak(v21);
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v25;
}

void sub_1C57CC358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CPMSModule::finishInitialization_sync(CPMSModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const char *)(*(uint64_t (**)(CPMSModule *))(*(void *)this + 16))(this);
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v68 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v68) = v7;
    uint64_t v9 = __dst;
    if (!v7) {
      goto LABEL_13;
    }
  }
  memmove(v9, v6, (size_t)v8);
LABEL_13:
  *((unsigned char *)v8 + (void)v9) = 0;
  uint64_t v66 = 0;
  AppleBasebandManager::create();
  long long v12 = v69;
  long long v69 = 0uLL;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 20);
  *(_OWORD *)((char *)this + 152) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v69 + 1);
  if (!*((void *)&v69 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    BOOL v15 = v66;
    if (!v66) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  BOOL v15 = v66;
  if (v66) {
LABEL_19:
  }
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v68) < 0) {
    operator delete(__dst[0]);
  }
  int v16 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    id v19 = (void **)operator new(v20 + 1);
    v64[1] = v18;
    unint64_t v65 = v21 | 0x8000000000000000;
    v64[0] = v19;
    goto LABEL_29;
  }
  HIBYTE(v65) = v17;
  id v19 = v64;
  if (v17) {
LABEL_29:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  void aBlock[4] = this;
  void aBlock[5] = v3;
  CFMutableArrayRef v61 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v22 = _Block_copy(aBlock);
  id v23 = *((void *)this + 17);
  if (v23) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  CFMutableDictionaryRef v62 = v22;
  dispatch_object_t v63 = v23;
  AppleBasebandManager::setEventHandler();
  if (v63) {
    dispatch_release(v63);
  }
  if (v62) {
    _Block_release(v62);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(v64[0]);
  }
  uint64_t v24 = (const void *)*MEMORY[0x1E4F4D0F8];
  size_t v25 = strlen((const char *)*MEMORY[0x1E4F4D0F8]);
  if (v25 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v28 = v25 | 7;
    }
    uint64_t v29 = v28 + 1;
    char v27 = operator new(v28 + 1);
    __p[1] = v26;
    unint64_t v59 = v29 | 0x8000000000000000;
    __p[0] = v27;
    goto LABEL_45;
  }
  HIBYTE(v59) = v25;
  char v27 = __p;
  if (v25) {
LABEL_45:
  }
    memmove(v27, v24, (size_t)v26);
  *((unsigned char *)v26 + (void)v27) = 0;
  v54[0] = MEMORY[0x1E4F143A8];
  v54[1] = 3321888768;
  void v54[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_15;
  v54[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v54[4] = this;
  v54[5] = v3;
  uint64_t v55 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v30 = _Block_copy(v54);
  unsigned int v31 = *((void *)this + 17);
  if (v31) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  CFTypeRef v56 = v30;
  dispatch_object_t object = v31;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v56) {
    _Block_release(v56);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v32 = (const void *)*MEMORY[0x1E4F4CDF0];
  size_t v33 = strlen((const char *)*MEMORY[0x1E4F4CDF0]);
  if (v33 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    uint64_t v35 = operator new(v36 + 1);
    v52[1] = v34;
    unint64_t v53 = v37 | 0x8000000000000000;
    v52[0] = v35;
    goto LABEL_61;
  }
  HIBYTE(v53) = v33;
  uint64_t v35 = v52;
  if (v33) {
LABEL_61:
  }
    memmove(v35, v32, (size_t)v34);
  *((unsigned char *)v34 + (void)v35) = 0;
  v48[0] = MEMORY[0x1E4F143A8];
  v48[1] = 3321888768;
  v48[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_2;
  v48[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v48[4] = this;
  v48[5] = v3;
  long long v49 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v38 = _Block_copy(v48);
  uint64_t v39 = *((void *)this + 17);
  if (v39) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  size_t v50 = v38;
  dispatch_object_t v51 = v39;
  AppleBasebandManager::setEventHandler();
  if (v51) {
    dispatch_release(v51);
  }
  if (v50) {
    _Block_release(v50);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete(v52[0]);
  }
  long long v40 = (config::hw *)AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 19));
  if ((config::hw::watch(v40) & 1) == 0)
  {
    uint64_t v41 = *((void *)this + 24);
    v44[0] = MEMORY[0x1E4F143A8];
    v44[1] = 3321888768;
    v44[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_18;
    v44[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e1095_v32__0_BudgetData__map_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int___std::less_abm::BasebandCPMSPowerBudgetScale___std::allocator_std::pair_const_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int________tree_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____std::allocator_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int______v___compressed_pair_std::__tree_end_node_std::__tree_node_base_void________std::allocator_std::__tree_node_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____void_________tree_end_node_std::__tree_node_base_void________v_____compressed_pair_unsigned_long__std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____Q____8l;
    v44[4] = this;
    v44[5] = v3;
    uint64_t v45 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    long long v42 = _Block_copy(v44);
    long long v43 = *((void *)this + 17);
    if (v43) {
      dispatch_retain(v43);
    }
    uint64_t v46 = v42;
    dispatch_object_t v47 = v43;
    (*(void (**)(uint64_t, void **))(*(void *)v41 + 32))(v41, &v46);
    if (v47) {
      dispatch_release(v47);
    }
    if (v46) {
      _Block_release(v46);
    }
    if (v45) {
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v49) {
    std::__shared_weak_count::__release_weak(v49);
  }
  if (v55) {
    std::__shared_weak_count::__release_weak(v55);
  }
  if (v61) {
    std::__shared_weak_count::__release_weak(v61);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C57CCAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  dispatch::callback<void({block_pointer})(BudgetData)>::~callback((uint64_t)&a17);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  if (a40) {
    std::__shared_weak_count::__release_weak(a40);
  }
  dispatch_object_t v51 = *(std::__shared_weak_count **)(v49 - 208);
  if (v51)
  {
    std::__shared_weak_count::__release_weak(v51);
    std::__shared_weak_count::__release_weak(v48);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v48);
  _Unwind_Resume(a1);
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      size_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      CFDictionaryRef v30 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&v30, *a2);
      CFDictionaryRef v9 = v30;
      if (v30) {
        uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v10 = 0;
      }
      if (!v10) {
        goto LABEL_39;
      }
      int v11 = *(unsigned __int8 *)(v5 + 232);
      v29[0] = 0xAAAAAAAAAAAAAAAALL;
      v29[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v29, v30);
      memset(__p, 170, sizeof(__p));
      long long v12 = (const void *)*MEMORY[0x1E4F4CAF0];
      size_t v13 = strlen((const char *)*MEMORY[0x1E4F4CAF0]);
      if (v13 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (void *)v13;
      if (v13 >= 0x17)
      {
        uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17) {
          uint64_t v16 = v13 | 7;
        }
        uint64_t v17 = v16 + 1;
        BOOL v15 = (void **)operator new(v16 + 1);
        __dst[1] = v14;
        unint64_t v27 = v17 | 0x8000000000000000;
        __dst[0] = v15;
      }
      else
      {
        HIBYTE(v27) = v13;
        BOOL v15 = __dst;
        if (!v13) {
          goto LABEL_19;
        }
      }
      memmove(v15, v12, (size_t)v14);
LABEL_19:
      uint64_t v18 = (const char *)*MEMORY[0x1E4F4C688];
      *((unsigned char *)v14 + (void)v15) = 0;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v31, v18);
      ctu::cf::map_adapter::getString();
      MEMORY[0x1C8791110](&v31);
      if (SHIBYTE(v27) < 0) {
        operator delete(__dst[0]);
      }
      if (SHIBYTE(__p[2]) >= 0) {
        size_t v19 = HIBYTE(__p[2]);
      }
      else {
        size_t v19 = (size_t)__p[1];
      }
      if (v19 == strlen((const char *)*MEMORY[0x1E4F4CAE8]))
      {
        if (SHIBYTE(__p[2]) >= 0) {
          uint64_t v20 = __p;
        }
        else {
          uint64_t v20 = (void **)__p[0];
        }
        uint64_t v21 = (config::hw *)memcmp(v20, (const void *)*MEMORY[0x1E4F4CAE8], v19);
        *(unsigned char *)(v5 + 232) = v21 == 0;
        if (!v21)
        {
          uint64_t v22 = (capabilities::abs *)config::hw::watch(v21);
          if ((v22 & 1) == 0)
          {
            id v23 = (capabilities::abs *)capabilities::abs::supportsSMCThermalReport(v22);
            if (v23)
            {
              uint64_t v24 = capabilities::abs::SMCThermalReportInterval(v23);
              size_t v25 = 0;
              CPMSModule::configureThermalReportFrequency_sync((void *)v5, v24, &v25);
            }
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v5 + 192) + 48))(*(void *)(v5 + 192), 1, 5);
          }
        }
      }
      else
      {
        *(unsigned char *)(v5 + 232) = 0;
      }
      if (*(unsigned __int8 *)(v5 + 232) != v11) {
        CPMSModule::evaluatePowerBudgetNeed_sync((CPMSModule *)v5);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      MEMORY[0x1C8791160](v29);
      CFDictionaryRef v9 = v30;
LABEL_39:
      if (v9) {
        CFRelease(v9);
      }
    }
  }
}

void sub_1C57CCF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0)
  {
    operator delete(__p);
    MEMORY[0x1C8791160](&a23);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v23 - 64));
    _Unwind_Resume(a1);
  }
  MEMORY[0x1C8791160](&a23);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void CPMSModule::configureThermalReportFrequency_sync(void *a1, uint64_t a2, void **a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v7 = a1[15], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFDictionaryRef v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  int v10 = capabilities::abs::supportsSMCThermalReport((capabilities::abs *)v8);
  int v11 = a1[11];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    long long v12 = "Thermal Monitor";
    if (v10) {
      long long v12 = "SMC";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v32 = v12;
    _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I Thermal Report to %s", buf, 0xCu);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_57_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e226_v32__0_vector_abm::ThermalSensorData__std::allocator_abm::ThermalSensorData_____ThermalSensorData___ThermalSensorData____compressed_pair_abm::ThermalSensorData____std::allocator_abm::ThermalSensorData_____ThermalSensorData___8l;
  void aBlock[4] = a1;
  void aBlock[5] = v7;
  uint64_t v29 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v30 = v10;
  size_t v13 = _Block_copy(aBlock);
  uint64_t v14 = v13;
  uint64_t v15 = a1[24];
  if (v10) {
    uint64_t v16 = 2;
  }
  else {
    uint64_t v16 = 1;
  }
  if (v13) {
    uint64_t v17 = _Block_copy(v13);
  }
  else {
    uint64_t v17 = 0;
  }
  unint64_t v27 = v17;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3321888768;
  v21[2] = ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_74;
  v21[3] = &__block_descriptor_68_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e44_v16__0_CFSharedRef___CFError______CFError__8l;
  v21[4] = a1;
  void v21[5] = v7;
  uint64_t v22 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v24 = a2;
  uint64_t v18 = *a3;
  if (*a3) {
    uint64_t v18 = _Block_copy(v18);
  }
  uint64_t v23 = v18;
  size_t v19 = _Block_copy(v21);
  uint64_t v20 = a1[17];
  if (v20) {
    dispatch_retain(v20);
  }
  size_t v25 = v19;
  dispatch_object_t object = v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, void **))(*(void *)v15 + 64))(v15, v16, a2, &v27, &v25);
  if (object) {
    dispatch_release(object);
  }
  if (v25) {
    _Block_release(v25);
  }
  if (v27) {
    _Block_release(v27);
  }
  if (v23) {
    _Block_release(v23);
  }
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v14) {
    _Block_release(v14);
  }
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C57CD298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CPMSModule::evaluatePowerBudgetNeed_sync(CPMSModule *this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 11);
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    uint64_t v4 = "true";
    if (*((unsigned char *)this + 235)) {
      uint64_t v5 = "true";
    }
    else {
      uint64_t v5 = "false";
    }
    int v6 = *((unsigned __int8 *)this + 232);
    if (*((unsigned char *)this + 233)) {
      uint64_t v7 = "true";
    }
    else {
      uint64_t v7 = "false";
    }
    *(_DWORD *)long long buf = 136315650;
    uint64_t v28 = v5;
    if (!v6) {
      uint64_t v4 = "false";
    }
    __int16 v29 = 2080;
    char v30 = v7;
    __int16 v31 = 2080;
    uint64_t v32 = v4;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Evaluating power budget need; IsConnected(debounce)=%s, IsOnline=%s IsReady=%s",
      buf,
      0x20u);
  }
  uint64_t v8 = (capabilities::abs *)capabilities::abs::supportsCPMSConnectedState((capabilities::abs *)v3);
  if (v8 && *((unsigned char *)this + 235) && *((unsigned char *)this + 232) && *((unsigned char *)this + 233))
  {
    CFDictionaryRef v9 = v25;
    v25[0] = 0;
    v25[1] = 0;
    int v24 = v25;
    uint64_t v26 = 0;
    if ((void **)((char *)this + 304) != &v24) {
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v24, *((void **)this + 38), (void *)this + 39);
    }
    uint64_t v26 = [*((id *)this + 41) copy];
    int v10 = &v24;
    CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v24);
  }
  else if (*((unsigned char *)this + 232))
  {
    if (*((unsigned char *)this + 233))
    {
      int v11 = capabilities::abs::supportsCPMSConnectedState(v8);
      CFDictionaryRef v9 = v22;
      uint64_t v12 = 304;
      if (v11)
      {
        uint64_t v12 = 336;
        size_t v13 = (char *)this + 336;
      }
      else
      {
        size_t v13 = (char *)this + 304;
      }
      v22[0] = 0;
      v22[1] = 0;
      uint64_t v21 = v22;
      uint64_t v23 = 0;
      if (v13 != (char *)&v21) {
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v21, *(void **)((char *)this + v12), (void *)v13 + 1);
      }
      uint64_t v23 = [*((id *)v13 + 3) copy];
      int v10 = &v21;
      CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v21);
    }
    else
    {
      CFDictionaryRef v9 = v19;
      v19[0] = 0;
      v19[1] = 0;
      uint64_t v18 = v19;
      uint64_t v20 = 0;
      if ((void **)((char *)this + 368) != &v18) {
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v18, *((void **)this + 46), (void *)this + 47);
      }
      uint64_t v20 = [*((id *)this + 49) copy];
      int v10 = &v18;
      CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v18);
    }
  }
  else
  {
    CFDictionaryRef v9 = &v15;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = &v15;
    uint64_t v17 = 0;
    if ((uint64_t **)((char *)this + 368) != &v14) {
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v14, *((void **)this + 46), (void *)this + 47);
    }
    uint64_t v17 = [[*((id *)this + 49) copy:v14, v15, v16, v17];
    int v10 = &v14;
    CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v14);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v10, v10[1]);
  v10[1] = 0;
  void v10[2] = 0;
  *int v10 = v9;

  v10[3] = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v10, v10[1]);
  v10[1] = 0;
  void v10[2] = 0;
  *int v10 = v9;
}

void sub_1C57CD5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void sub_1C57CD600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void sub_1C57CD614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *a22)
{
}

void sub_1C57CD62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14)
{
}

void sub_1C57CD644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C57CD658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void sub_1C57CD66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_1C57CD684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18)
{
}

void sub_1C57CD69C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_15(void *a1, abm::client::Event **a2)
{
  BOOL v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (unsigned __int8 *)a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&cf, *a2);
      CFTypeRef v9 = cf;
      if (cf) {
        int v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        int v10 = 0;
      }
      if (v10)
      {
        v14[0] = 0xAAAAAAAAAAAAAAAALL;
        v14[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v14, (const __CFDictionary *)cf);
        int v11 = v5[233];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v16, (const char *)*MEMORY[0x1E4F4CB50]);
        char Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v14, v16);
        MEMORY[0x1C8791110](&v16);
        int v13 = Int == 0;
        v5[233] = v13;
        if (v11 != v13) {
          CPMSModule::evaluatePowerBudgetNeed_sync((CPMSModule *)v5);
        }
        MEMORY[0x1C8791160](v14);
        CFTypeRef v9 = cf;
      }
      if (v9) {
        CFRelease(v9);
      }
    }
  }
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_2(void *a1, abm::client::Event **a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  BOOL v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&cf, *a2);
      CFTypeRef v9 = cf;
      if (cf) {
        int v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        int v10 = 0;
      }
      if (v10)
      {
        v20[0] = 0xAAAAAAAAAAAAAAAALL;
        v20[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v20, (const __CFDictionary *)cf);
        int v11 = *(unsigned __int8 *)(v5 + 234);
        memset(v19, 170, sizeof(v19));
        uint64_t v12 = (const char *)*MEMORY[0x1E4F4CD50];
        long long __p = 0uLL;
        uint64_t v24 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v22, v12);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8791110](&v22);
        if (SHIBYTE(v24) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v19[2]) >= 0) {
          size_t v13 = HIBYTE(v19[2]);
        }
        else {
          size_t v13 = (size_t)v19[1];
        }
        if (v13 == strlen((const char *)*MEMORY[0x1E4F4D0C0]))
        {
          if (SHIBYTE(v19[2]) >= 0) {
            uint64_t v14 = v19;
          }
          else {
            uint64_t v14 = (void **)v19[0];
          }
          BOOL v15 = memcmp(v14, (const void *)*MEMORY[0x1E4F4D0C0], v13) == 0;
        }
        else
        {
          BOOL v15 = 0;
        }
        *(unsigned char *)(v5 + 234) = v15;
        uint64_t v16 = *(NSObject **)(v5 + 88);
        BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
        if (v17)
        {
          uint64_t v18 = "disconnected";
          if (v15) {
            uint64_t v18 = "connected";
          }
          LODWORD(__p) = 136315138;
          *(void *)((char *)&__p + 4) = v18;
          _os_log_debug_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEBUG, "#D Baseband is in %s state", (uint8_t *)&__p, 0xCu);
        }
        if (capabilities::abs::supportsCPMSConnectedState((capabilities::abs *)v17)
          && *(unsigned __int8 *)(v5 + 234) != v11)
        {
          CPMSModule::debounceConnectedState_sync((CPMSModule *)v5);
        }
        if (SHIBYTE(v19[2]) < 0) {
          operator delete(v19[0]);
        }
        MEMORY[0x1C8791160](v20);
        CFTypeRef v9 = cf;
      }
      if (v9) {
        CFRelease(v9);
      }
    }
  }
}

void sub_1C57CDACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CPMSModule::debounceConnectedState_sync(CPMSModule *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 11);
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    if (*((unsigned char *)this + 234)) {
      uint64_t v7 = "connected";
    }
    else {
      uint64_t v7 = "idle";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D Baseband is in %s state", buf, 0xCu);
    if (*((unsigned char *)this + 234)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 234))
  {
LABEL_3:
    uint64_t v4 = *((void *)this + 28);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 11);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_debug_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEBUG, "#D Cancelling idle timer", buf, 2u);
        uint64_t v4 = *((void *)this + 28);
      }
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      uint64_t v6 = *((void *)this + 28);
      *((void *)this + 28) = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
    if (!*((unsigned char *)this + 235))
    {
      *((unsigned char *)this + 235) = 1;
      CPMSModule::evaluatePowerBudgetNeed_sync(this);
    }
    return;
  }
  uint64_t v8 = capabilities::abs::CPMSDebounceTimer((capabilities::abs *)v3);
  CFTypeRef v9 = *((void *)this + 11);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_debug_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEBUG, "#D Starting idle timer for %lld secs", buf, 0xCu);
    int v10 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v10) {
LABEL_35:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    int v10 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v10) {
      goto LABEL_35;
    }
  }
  uint64_t v11 = *((void *)this + 15);
  uint64_t v12 = std::__shared_weak_count::lock(v10);
  if (!v12) {
    goto LABEL_35;
  }
  size_t v13 = v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = *((void *)this + 26);
  char v24 = 16;
  strcpy(__p, "Idle state timer");
  BOOL v15 = *((void *)this + 17);
  dispatch_object_t object = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule27debounceConnectedState_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e5_v8__0l;
  void aBlock[4] = this;
  void aBlock[5] = v11;
  uint64_t v20 = v13;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v21 = _Block_copy(aBlock);
  ctu::TimerService::createOneShotTimer(v14, (uint64_t)__p, 0, 1000000 * v8, &object, &v21);
  uint64_t v16 = *(void *)buf;
  *(void *)long long buf = 0;
  uint64_t v17 = *((void *)this + 28);
  *((void *)this + 28) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    uint64_t v18 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  if (v21) {
    _Block_release(v21);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v24 < 0) {
    operator delete(*(void **)__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1C57CDF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, dispatch_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_18(void *a1, void **a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  BOOL v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v17 = &v18;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      id v20 = 0;
      if (&v17 != a2) {
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v17, *a2, a2 + 1);
      }
      CFTypeRef v9 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        PowerBudget::to_string((PowerBudget *)&v17, __p);
        if (v16 >= 0) {
          int v10 = __p;
        }
        else {
          int v10 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136315138;
        uint64_t v22 = v10;
        _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Baseband power budget need is %s", buf, 0xCu);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v11 = &v12;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      id v14 = 0;
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v11, v17, &v18);
      id v14 = (id)[v20 copy];
      CPMSModule::reportPowerBudgetNeed_sync(v5, (PowerBudget *)&v11);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v11, v12);
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v11 = &v12;

      id v14 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v11, v12);
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v11 = &v12;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18);
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = &v18;

      id v20 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18);
    }
  }
}

void sub_1C57CE1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void CPMSModule::reportPowerBudgetNeed_sync(uint64_t a1, PowerBudget *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v4 = *(unsigned __int8 *)(a1 + 236);
  uint64_t v5 = *(NSObject **)(a1 + 88);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      PowerBudget::to_string(a2, __p);
      if (v31 >= 0) {
        uint64_t v7 = __p;
      }
      else {
        uint64_t v7 = *(unsigned char **)__p;
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v33 = v7;
      _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Brick mode is still enabled; ignoring power budget request for %s",
        buf,
        0xCu);
      if (v31 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  else
  {
    if (v6)
    {
      *(_DWORD *)long long __p = 138412290;
      *(void *)&__p[4] = PowerBudget::getNSDict((id *)a2);
      _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Reporting to CPMS with power budget need %@", __p, 0xCu);
    }
    uint64_t v8 = (NSDictionary *)[*(id *)(a1 + 168) copyPowerBudgetForRequest:PowerBudget::getNSDict((id *)a2) forClient:4 error:0];
    if (v8)
    {
      CFTypeRef v9 = (id *)(a1 + 240);
      PowerBudget::fill((id *)(a1 + 240), v8);
      int v10 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        PowerBudget::to_string((PowerBudget *)(a1 + 240), __p);
        uint64_t v11 = v31 >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        uint64_t v33 = v11;
        _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I CPMS responded with power budget allocation %s", buf, 0xCu);
        if (v31 < 0) {
          operator delete(*(void **)__p);
        }
      }
      char v24 = &v25;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      id v27 = 0;
      if (v9 != (id *)&v24) {
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v24, *(void **)(a1 + 240), (void *)(a1 + 248));
      }
      id v27 = (id)[*(id *)(a1 + 264) copy];
      int v12 = [*(id *)(a1 + 168) acknowledgePowerBudget:PowerBudget::getNSDict((id *)&v24) forClientId:4 error:0];
      uint64_t v13 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id NSDict = PowerBudget::getNSDict((id *)&v24);
        BOOL v15 = "failed";
        if (v12) {
          BOOL v15 = "succeeded";
        }
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = v15;
        __int16 v29 = 2112;
        id v30 = NSDict;
        _os_log_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEFAULT, "#I Acked CPMS %s for power budget %@", __p, 0x16u);
      }
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, v25);
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      char v24 = &v25;

      id v27 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, v25);
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      id v23 = 0;
      char v24 = &v25;
      *((void *)&v21 + 1) = 0;
      uint64_t v22 = 0;
      *(void *)&long long v21 = (char *)&v21 + 8;
      if (v9 != (id *)&v21) {
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v21, *(void **)(a1 + 240), (void *)(a1 + 248));
      }
      id v23 = (id)[*(id *)(a1 + 264) copy];
      CPMSModule::evaluateBrickMode_sync(a1, &v21);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v21, *((void **)&v21 + 1));
      *((void *)&v21 + 1) = 0;
      uint64_t v22 = 0;
      *(void *)&long long v21 = (char *)&v21 + 8;

      id v23 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v21, *((void **)&v21 + 1));
      *((void *)&v21 + 1) = 0;
      uint64_t v22 = 0;
      id v20 = 0;
      *(void *)&long long v21 = (char *)&v21 + 8;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = &v18;
      if (v9 != (id *)&v17) {
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v17, *(void **)(a1 + 240), (void *)(a1 + 248));
      }
      id v20 = [(id)[*(id *)(a1 + 264) copy:v17];
      CPMSModule::sendPowerBudgetToBB_sync(a1, &v17);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18);
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = &v18;

      id v20 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18);
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = &v18;
    }
    else
    {
      char v16 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long __p = 0;
        _os_log_error_impl(&dword_1C5767000, v16, OS_LOG_TYPE_ERROR, "Reporting to CPMS with power budget need failed", __p, 2u);
      }
    }
  }
}

void sub_1C57CE628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(BudgetData)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void CPMSModule::getErrorMsg(NSError *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(unsigned char *)(a2 + 23) = 13;
  strcpy((char *)a2, "Unknown error");
  if (a1)
  {
    uint64_t v5 = [(NSError *)a1 localizedDescription];
    if ([(NSError *)a1 localizedFailureReason]) {
      BOOL v6 = [(NSError *)a1 localizedFailureReason];
    }
    else {
      BOOL v6 = [[(id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle") localizedStringForKey:@"Not found localizedFailureReason" value:&stru_1F20FFDB0 table:0];
    }
    std::string::__assign_external((std::string *)a2, (const std::string::value_type *)[[NSString stringWithFormat:@"%@: %@", v5, v6] UTF8String]);
  }
}

void sub_1C57CE7E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::TimerService::createOneShotTimer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject **a5, void **a6)
{
  uint64_t v10 = *(void *)(a2 + 16);
  *(_OWORD *)long long __p = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  BOOL v6 = *a5;
  *a5 = 0;
  long long aBlock = *a6;
  dispatch_object_t object = v6;
  *a6 = 0;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, void, dispatch_object_t *, void **))(*(void *)a1 + 16))(a1, __p, a3, a4, 0, &object, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C57CE8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object)
  {
    dispatch_release(object);
    if ((a16 & 0x80000000) == 0) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule27debounceConnectedState_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    CFTypeRef v9 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (!a1[5]) {
        goto LABEL_7;
      }
      BOOL v6 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v7 = 0;
        _os_log_debug_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEBUG, "#D Idle timer expired", v7, 2u);
        if (*(unsigned char *)(v3 + 234))
        {
LABEL_7:
          if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          return;
        }
      }
      else if (*(unsigned char *)(v3 + 234))
      {
        goto LABEL_7;
      }
      *(unsigned char *)(v3 + 235) = 0;
      CPMSModule::evaluatePowerBudgetNeed_sync((CPMSModule *)v3);
      goto LABEL_7;
    }
  }
}

void sub_1C57CEA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void CPMSModule::sendPowerBudgetToBB_sync(uint64_t a1, void **a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v3 = *(unsigned __int8 *)(a1 + 236);
  if (!*(unsigned char *)(a1 + 236) && *(unsigned char *)(a1 + 232) && *(unsigned char *)(a1 + 233))
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v5 || (uint64_t v7 = *(void *)(a1 + 120), (v8 = std::__shared_weak_count::lock(v5)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    CFTypeRef v9 = v8;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = *(void *)(a1 + 192);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = &v26;
    if (&v25 != a2) {
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v25, *a2, a2 + 1);
    }
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3321888768;
    xpc_object_t v17[2] = ___ZN10CPMSModule24sendPowerBudgetToBB_syncE11PowerBudget_block_invoke;
    void v17[3] = &__block_descriptor_88_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c17_ZTS11PowerBudget_e44_v16__0_CFSharedRef___CFError______CFError__8l;
    v17[4] = a1;
    v17[5] = v7;
    uint64_t v18 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v19 = &v20;
    id v20 = 0;
    uint64_t v21 = 0;
    id v22 = 0;
    if (&v19 != a2) {
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v19, *a2, a2 + 1);
    }
    id v22 = (id)[a2[3] copy];
    uint64_t v11 = _Block_copy(v17);
    int v12 = *(NSObject **)(a1 + 136);
    if (v12) {
      dispatch_retain(v12);
    }
    long long aBlock = v11;
    dispatch_object_t object = v12;
    (*(void (**)(uint64_t, void ***, void **))(*(void *)v10 + 24))(v10, &v25, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v25, v26);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = &v26;
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v19, v20);
    id v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = &v20;

    id v22 = 0;
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v19, v20);
    id v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = &v20;
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
    std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    int v4 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = "true";
      if (v3) {
        id v14 = "true";
      }
      else {
        id v14 = "false";
      }
      int v15 = *(unsigned __int8 *)(a1 + 233);
      if (*(unsigned char *)(a1 + 232)) {
        char v16 = "true";
      }
      else {
        char v16 = "false";
      }
      *(_DWORD *)long long buf = 136315650;
      __int16 v29 = v14;
      __int16 v30 = 2080;
      if (!v15) {
        uint64_t v13 = "false";
      }
      char v31 = v16;
      __int16 v32 = 2080;
      uint64_t v33 = v13;
      _os_log_debug_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEBUG, "#D Not sending budget to BB due to this condition: BrickMode: %s, Baseband is ready: %s, Baseband is online: %s", buf, 0x20u);
    }
  }
}

void sub_1C57CED2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule24sendPowerBudgetToBB_syncE11PowerBudget_block_invoke(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    BOOL v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      CFTypeRef v9 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        if (*a2) {
          uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v10 = 0;
        }
        if (v10) {
          uint64_t v11 = "failed";
        }
        else {
          uint64_t v11 = "succeeded";
        }
        PowerBudget::to_string((PowerBudget *)(a1 + 7), __p);
        if (v14 >= 0) {
          int v12 = __p;
        }
        else {
          int v12 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136315394;
        char v16 = v11;
        __int16 v17 = 2080;
        uint64_t v18 = v12;
        _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Sent power budget to baseband %s for %s", buf, 0x16u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c17_ZTS11PowerBudget(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  a1[8] = 0;
  a1[7] = a1 + 8;
  a1[9] = 0;
  a1[10] = 0;
  if ((void *)a2 != a1) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)(a1 + 7), *(void **)(a2 + 56), (void *)(a2 + 64));
  }
  uint64_t result = [*(id *)(a2 + 80) copy];
  a1[10] = result;
  return result;
}

void sub_1C57CEFC0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v2, *(void **)(v1 + 64));
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0;
  *(void *)(v1 + 56) = v3;
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c17_ZTS11PowerBudget(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = a1 + 56;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1 + 56, *(void **)(a1 + 64));
  *(void *)(v2 - 8) = v2;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;

  *(void *)(a1 + 80) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v3, *(void **)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = v2;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void CPMSModule::ackPowerBudgetToCPMS_sync(uint64_t a1, id *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v4 = [*(id *)(a1 + 168) acknowledgePowerBudget:PowerBudget::getNSDict(a2) forClientId:4 error:0];
  uint64_t v5 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v4) {
      BOOL v6 = "succeeded";
    }
    else {
      BOOL v6 = "failed";
    }
    int v7 = 136315394;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id NSDict = PowerBudget::getNSDict(a2);
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Acked CPMS %s for power budget %@", (uint8_t *)&v7, 0x16u);
  }
}

void CPMSModule::getCPMSBudgetPlistPath(CPMSModule *this@<X0>, void **a2@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  memset(a2, 170, 24);
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
  *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_1C599DDF0;
  strcpy(v36.__r_.__value_.__l.__data_, "/System/Library/PrivateFrameworks/AppleBasebandManager.framework/");
  qmemcpy(v29, "anager.frameworks/AppleBasebandMPrivateFramework/System/Library/", sizeof(v29));
  char v35 = 12;
  strcpy(__s, "cpms.budgets");
  int v4 = std::string::append(&v36, __s, 0xCuLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  char v33 = 10;
  strcpy((char *)v32, ".override.");
  BOOL v6 = std::string::append(&v37, (const std::string::value_type *)v32, 0xAuLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  unsigned int v8 = capabilities::radio::product((capabilities::radio *)v6);
  std::to_string(&v39, v8);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v9 = &v39;
  }
  else {
    __int16 v9 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v39.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = std::string::append(&v38, (const std::string::value_type *)v9, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  char v31 = 6;
  strcpy(v30, ".plist");
  uint64_t v13 = std::string::append(&v40, v30, 6uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  a2[2] = (void *)v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)a2 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v31 < 0)
  {
    operator delete(*(void **)v30);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v39.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((v33 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v38.__r_.__value_.__l.__data_);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v32[0]);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_24:
    operator delete(*(void **)__s);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_23:
  operator delete(v37.__r_.__value_.__l.__data_);
  if (v35 < 0) {
    goto LABEL_24;
  }
LABEL_14:
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_15;
  }
LABEL_25:
  operator delete(v36.__r_.__value_.__l.__data_);
LABEL_15:
  uint64_t v15 = ctu::fs::file_exists();
  if (v15) {
    goto LABEL_35;
  }
  if (config::hw::watch((config::hw *)v15))
  {
    char v16 = operator new(0x48uLL);
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = xmmword_1C599DDF0;
    v16[32] = 47;
    *(_OWORD *)char v16 = v29[3];
    *((_OWORD *)v16 + 1) = v29[2];
    *((_OWORD *)v16 + 2) = v29[1];
    *((_OWORD *)v16 + 3) = v29[0];
    *((unsigned char *)&v36.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v36, "cpms.budgets");
    __int16 v17 = std::string::append(&v37, (const std::string::value_type *)&v36, 0xCuLL);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    char v35 = 6;
    strcpy(__s, ".watch");
    uint64_t v19 = std::string::append(&v38, __s, 6uLL);
  }
  else
  {
    id v22 = operator new(0x48uLL);
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = xmmword_1C599DDF0;
    v22[32] = 47;
    *(_OWORD *)id v22 = v29[3];
    *((_OWORD *)v22 + 1) = v29[2];
    *((_OWORD *)v22 + 2) = v29[1];
    *((_OWORD *)v22 + 3) = v29[0];
    *((unsigned char *)&v36.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v36, "cpms.budgets");
    id v23 = std::string::append(&v37, (const std::string::value_type *)&v36, 0xCuLL);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    char v35 = 7;
    strcpy(__s, ".iphone");
    uint64_t v19 = std::string::append(&v38, __s, 7uLL);
  }
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  char v33 = 6;
  strcpy((char *)v32, ".plist");
  uint64_t v21 = std::string::append(&v40, (const std::string::value_type *)v32, 6uLL);
  std::string::size_type v25 = v21->__r_.__value_.__r.__words[0];
  v39.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
  char v26 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)a2 + 23) < 0) {
    operator delete(*a2);
  }
  *a2 = (void *)v25;
  a2[1] = (void *)v39.__r_.__value_.__r.__words[0];
  *(void **)((char *)a2 + 15) = *(void **)((char *)v39.__r_.__value_.__r.__words + 7);
  *((unsigned char *)a2 + 23) = v26;
  if (v33 < 0)
  {
    operator delete(v32[0]);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((v35 & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_43;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(*(void **)__s);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v38.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_35:
    uint64_t v27 = *((void *)this + 11);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    goto LABEL_36;
  }
LABEL_46:
  operator delete(v37.__r_.__value_.__l.__data_);
  uint64_t v27 = *((void *)this + 11);
  if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
    return;
  }
LABEL_36:
  if (*((char *)a2 + 23) >= 0) {
    std::string::size_type v28 = (std::string::size_type)a2;
  }
  else {
    std::string::size_type v28 = (std::string::size_type)*a2;
  }
  LODWORD(v40.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = v28;
  _os_log_impl(&dword_1C5767000, v27, OS_LOG_TYPE_DEFAULT, "#I CPMS Power Budget List: %s", (uint8_t *)&v40, 0xCu);
}

void sub_1C57CF75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v49 - 73) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a36 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(v49 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v49 - 96));
  if ((a36 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v49 - 121) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a31);
  if ((*(char *)(v49 - 121) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(v49 - 144));
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a48 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a37);
  if ((a48 & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(v48 + 23) & 0x80000000) == 0) {
LABEL_16:
    }
      _Unwind_Resume(exception_object);
LABEL_15:
    operator delete(*(void **)v48);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a43);
  if ((*(char *)(v48 + 23) & 0x80000000) == 0) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

uint64_t *CPMSModule::initPowerConfig_sync(void)::$_1::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v8 = *MEMORY[0x1E4F566B0];
  if ([a2 isEqualToString:*MEMORY[0x1E4F566B0]])
  {
    id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    [v9 addObject:[a3 valueForKey:@"Min"]];
    [v9 addObject:[a3 valueForKey:@"Max"]];
    [a4 setObject:v9 forKey:v8];
    int v10 = [[a3 valueForKey:@"Min"] unsignedIntValue];
    uint64_t v11 = *(uint64_t **)(a1 + 280);
    if (v11)
    {
      while (1)
      {
        long long v12 = (uint64_t **)v11;
        if (!*((unsigned char *)v11 + 28)) {
          break;
        }
        uint64_t v11 = (uint64_t *)*v11;
        if (!*v12) {
          goto LABEL_85;
        }
      }
      uint64_t v75 = v11;
    }
    else
    {
      long long v12 = (uint64_t **)(a1 + 280);
LABEL_85:
      uint64_t v75 = operator new(0x28uLL);
      v75[28] = 0;
      v75[32] = 0;
      v75[36] = 0;
      *(void *)uint64_t v75 = 0;
      *((void *)v75 + 1) = 0;
      *((void *)v75 + 2) = v12;
      *long long v12 = (uint64_t *)v75;
      uint64_t v76 = **(void **)(a1 + 272);
      uint64_t v77 = (uint64_t *)v75;
      if (v76)
      {
        *(void *)(a1 + 272) = v76;
        uint64_t v77 = *v12;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v77);
      ++*(void *)(a1 + 288);
    }
    *((_DWORD *)v75 + 8) = v10;
    v75[36] = 1;
    int v78 = [[a3 valueForKey:@"Max"] unsignedIntValue];
    CFTypeRef v79 = *(uint64_t **)(a1 + 312);
    if (v79)
    {
      while (1)
      {
        CFTypeRef v80 = (uint64_t **)v79;
        if (!*((unsigned char *)v79 + 28)) {
          break;
        }
        CFTypeRef v79 = (uint64_t *)*v79;
        if (!*v80) {
          goto LABEL_94;
        }
      }
      CFTypeRef v81 = v79;
    }
    else
    {
      CFTypeRef v80 = (uint64_t **)(a1 + 312);
LABEL_94:
      CFTypeRef v81 = operator new(0x28uLL);
      v81[28] = 0;
      v81[32] = 0;
      v81[36] = 0;
      *(void *)CFTypeRef v81 = 0;
      *((void *)v81 + 1) = 0;
      *((void *)v81 + 2) = v80;
      std::__shared_weak_count *v80 = (uint64_t *)v81;
      uint64_t v82 = **(void **)(a1 + 304);
      long long v83 = (uint64_t *)v81;
      if (v82)
      {
        *(void *)(a1 + 304) = v82;
        long long v83 = *v80;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v83);
      ++*(void *)(a1 + 320);
    }
    *((_DWORD *)v81 + 8) = v78;
    v81[36] = 1;
    uint64_t result = (uint64_t *)[((id)objc_msgSend(a3, "valueForKey:", @"Idle")) unsignedIntValue];
    int v84 = (int)result;
    CFArrayRef v85 = *(uint64_t **)(a1 + 344);
    if (v85)
    {
      while (1)
      {
        __int16 v86 = (uint64_t **)v85;
        if (!*((unsigned char *)v85 + 28)) {
          break;
        }
        CFArrayRef v85 = (uint64_t *)*v85;
        if (!*v86) {
          goto LABEL_103;
        }
      }
      *((_DWORD *)v85 + 8) = result;
      *((unsigned char *)v85 + 36) = 1;
      CFTypeRef v90 = *(unsigned __int8 ***)(a1 + 376);
      if (v90) {
        goto LABEL_106;
      }
    }
    else
    {
      __int16 v86 = (uint64_t **)(a1 + 344);
LABEL_103:
      int v87 = operator new(0x28uLL);
      v87[28] = 0;
      v87[32] = 0;
      v87[36] = 0;
      *(void *)int v87 = 0;
      *((void *)v87 + 1) = 0;
      *((void *)v87 + 2) = v86;
      void *v86 = (uint64_t *)v87;
      uint64_t v88 = **(void **)(a1 + 336);
      xpc_object_t v89 = (uint64_t *)v87;
      if (v88)
      {
        *(void *)(a1 + 336) = v88;
        xpc_object_t v89 = *v86;
      }
      uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v89);
      ++*(void *)(a1 + 352);
      *((_DWORD *)v87 + 8) = v84;
      v87[36] = 1;
      CFTypeRef v90 = *(unsigned __int8 ***)(a1 + 376);
      if (v90)
      {
LABEL_106:
        while (1)
        {
          uint64_t v41 = v90;
          if (!*((unsigned char *)v90 + 28)) {
            break;
          }
          CFTypeRef v90 = (unsigned __int8 **)*v90;
          if (!*v41) {
            goto LABEL_111;
          }
        }
        long long v42 = v90;
        goto LABEL_277;
      }
    }
    uint64_t v41 = (unsigned __int8 **)(a1 + 376);
LABEL_111:
    uint64_t v45 = (unsigned __int8 *)operator new(0x28uLL);
    v45[28] = 0;
    v45[32] = 0;
    v45[36] = 0;
    *(void *)uint64_t v45 = 0;
    *((void *)v45 + 1) = 0;
    *((void *)v45 + 2) = v41;
    *uint64_t v41 = v45;
    uint64_t v91 = **(void **)(a1 + 368);
    if (!v91) {
      goto LABEL_112;
    }
LABEL_275:
    *(void *)(a1 + 368) = v91;
    long long v42 = (unsigned __int8 **)v45;
    uint64_t v45 = *v41;
    goto LABEL_276;
  }
  uint64_t v13 = *MEMORY[0x1E4F566A0];
  if ([a2 isEqualToString:*MEMORY[0x1E4F566A0]])
  {
    id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    [v14 addObject:[a3 valueForKey:@"Min"]];
    [v14 addObject:[a3 valueForKey:@"Max"]];
    [a4 setObject:v14 forKey:v13];
    int v15 = [[a3 valueForKey:@"Min"] unsignedIntValue];
    char v16 = *(unsigned __int8 **)(a1 + 280);
    if (v16)
    {
      while (1)
      {
        while (1)
        {
          long long v18 = v16;
          unsigned int v19 = v16[28];
          if (v19 < 2) {
            break;
          }
          char v16 = (unsigned __int8 *)*v18;
          __int16 v17 = (uint64_t **)v18;
          if (!*v18) {
            goto LABEL_14;
          }
        }
        if (v19) {
          break;
        }
        char v16 = (unsigned __int8 *)v18[1];
        if (!v16)
        {
          __int16 v17 = (uint64_t **)(v18 + 1);
          goto LABEL_14;
        }
      }
    }
    else
    {
      __int16 v17 = (uint64_t **)(a1 + 280);
      long long v18 = (void *)(a1 + 280);
LABEL_14:
      long long v20 = v18;
      long long v18 = operator new(0x28uLL);
      *((unsigned char *)v18 + 28) = 1;
      *((unsigned char *)v18 + 32) = 0;
      *((unsigned char *)v18 + 36) = 0;
      void *v18 = 0;
      v18[1] = 0;
      v18[2] = v20;
      *__int16 v17 = v18;
      uint64_t v21 = **(void **)(a1 + 272);
      id v22 = v18;
      if (v21)
      {
        *(void *)(a1 + 272) = v21;
        id v22 = *v17;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v22);
      ++*(void *)(a1 + 288);
    }
    *((_DWORD *)v18 + 8) = v15;
    *((unsigned char *)v18 + 36) = 1;
    int v23 = [(id)[a3 valueForKey:@"Max"] unsignedIntValue];
    long long v24 = *(unsigned __int8 **)(a1 + 312);
    if (v24)
    {
      while (1)
      {
        while (1)
        {
          char v26 = v24;
          unsigned int v27 = v24[28];
          if (v27 < 2) {
            break;
          }
          long long v24 = (unsigned __int8 *)*v26;
          std::string::size_type v25 = (uint64_t **)v26;
          if (!*v26) {
            goto LABEL_24;
          }
        }
        if (v27) {
          break;
        }
        long long v24 = (unsigned __int8 *)v26[1];
        if (!v24)
        {
          std::string::size_type v25 = (uint64_t **)(v26 + 1);
          goto LABEL_24;
        }
      }
    }
    else
    {
      std::string::size_type v25 = (uint64_t **)(a1 + 312);
      char v26 = (void *)(a1 + 312);
LABEL_24:
      std::string::size_type v28 = v26;
      char v26 = operator new(0x28uLL);
      *((unsigned char *)v26 + 28) = 1;
      *((unsigned char *)v26 + 32) = 0;
      *((unsigned char *)v26 + 36) = 0;
      *char v26 = 0;
      v26[1] = 0;
      v26[2] = v28;
      *std::string::size_type v25 = v26;
      uint64_t v29 = **(void **)(a1 + 304);
      __int16 v30 = v26;
      if (v29)
      {
        *(void *)(a1 + 304) = v29;
        __int16 v30 = *v25;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v30);
      ++*(void *)(a1 + 320);
    }
    *((_DWORD *)v26 + 8) = v23;
    *((unsigned char *)v26 + 36) = 1;
    uint64_t result = (uint64_t *)[((id)objc_msgSend(a3, "valueForKey:", @"Idle")) unsignedIntValue];
    int v32 = (int)result;
    char v33 = *(unsigned __int8 **)(a1 + 344);
    if (v33)
    {
      while (1)
      {
        while (1)
        {
          char v35 = v33;
          unsigned int v36 = v33[28];
          if (v36 < 2) {
            break;
          }
          char v33 = (unsigned __int8 *)*v35;
          uint64_t v34 = (uint64_t **)v35;
          if (!*v35) {
            goto LABEL_34;
          }
        }
        if (v36) {
          break;
        }
        char v33 = (unsigned __int8 *)v35[1];
        if (!v33)
        {
          uint64_t v34 = (uint64_t **)(v35 + 1);
          goto LABEL_34;
        }
      }
    }
    else
    {
      uint64_t v34 = (uint64_t **)(a1 + 344);
      char v35 = (void *)(a1 + 344);
LABEL_34:
      std::string v37 = v35;
      char v35 = operator new(0x28uLL);
      *((unsigned char *)v35 + 28) = 1;
      *((unsigned char *)v35 + 32) = 0;
      *((unsigned char *)v35 + 36) = 0;
      *char v35 = 0;
      v35[1] = 0;
      void v35[2] = v37;
      *uint64_t v34 = v35;
      uint64_t v38 = **(void **)(a1 + 336);
      std::string v39 = v35;
      if (v38)
      {
        *(void *)(a1 + 336) = v38;
        std::string v39 = *v34;
      }
      uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v39);
      ++*(void *)(a1 + 352);
    }
    *((_DWORD *)v35 + 8) = v32;
    *((unsigned char *)v35 + 36) = 1;
    std::string v40 = *(unsigned __int8 **)(a1 + 376);
    if (v40)
    {
      while (1)
      {
        while (1)
        {
          long long v42 = (unsigned __int8 **)v40;
          unsigned int v43 = v40[28];
          if (v43 < 2) {
            break;
          }
          std::string v40 = *v42;
          uint64_t v41 = v42;
          if (!*v42) {
            goto LABEL_44;
          }
        }
        if (v43) {
          goto LABEL_277;
        }
        std::string v40 = v42[1];
        if (!v40)
        {
          uint64_t v41 = v42 + 1;
          goto LABEL_44;
        }
      }
    }
    uint64_t v41 = (unsigned __int8 **)(a1 + 376);
    long long v42 = (unsigned __int8 **)(a1 + 376);
LABEL_44:
    std::string v44 = (unsigned __int8 *)operator new(0x28uLL);
    uint64_t v45 = v44;
    v44[28] = 1;
  }
  else
  {
    uint64_t v46 = *MEMORY[0x1E4F566C0];
    if ([a2 isEqualToString:*MEMORY[0x1E4F566C0]])
    {
      id v47 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      [v47 addObject:[a3 valueForKey:@"Min"]];
      [v47 addObject:[a3 valueForKey:@"Max"]];
      [a4 setObject:v47 forKey:v46];
      int v48 = [[a3 valueForKey:@"Min"] unsignedIntValue];
      uint64_t v49 = *(unsigned __int8 **)(a1 + 280);
      if (v49)
      {
        while (1)
        {
          while (1)
          {
            dispatch_object_t v51 = v49;
            unsigned int v52 = v49[28];
            if (v52 < 3) {
              break;
            }
            uint64_t v49 = (unsigned __int8 *)*v51;
            size_t v50 = (uint64_t **)v51;
            if (!*v51) {
              goto LABEL_53;
            }
          }
          if (v52 == 2) {
            break;
          }
          uint64_t v49 = (unsigned __int8 *)v51[1];
          if (!v49)
          {
            size_t v50 = (uint64_t **)(v51 + 1);
            goto LABEL_53;
          }
        }
      }
      else
      {
        size_t v50 = (uint64_t **)(a1 + 280);
        dispatch_object_t v51 = (void *)(a1 + 280);
LABEL_53:
        unint64_t v53 = v51;
        dispatch_object_t v51 = operator new(0x28uLL);
        *((unsigned char *)v51 + 28) = 2;
        *((unsigned char *)v51 + 32) = 0;
        *((unsigned char *)v51 + 36) = 0;
        void *v51 = 0;
        v51[1] = 0;
        void v51[2] = v53;
        void *v50 = v51;
        uint64_t v54 = **(void **)(a1 + 272);
        uint64_t v55 = v51;
        if (v54)
        {
          *(void *)(a1 + 272) = v54;
          uint64_t v55 = *v50;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v55);
        ++*(void *)(a1 + 288);
      }
      *((_DWORD *)v51 + 8) = v48;
      *((unsigned char *)v51 + 36) = 1;
      int v56 = [[a3 valueForKey:@"Max"] unsignedIntValue];
      CFTypeRef v57 = *(unsigned __int8 **)(a1 + 312);
      if (v57)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v59 = v57;
            unsigned int v60 = v57[28];
            if (v60 < 3) {
              break;
            }
            CFTypeRef v57 = (unsigned __int8 *)*v59;
            CFTypeRef v58 = (uint64_t **)v59;
            if (!*v59) {
              goto LABEL_63;
            }
          }
          if (v60 == 2) {
            break;
          }
          CFTypeRef v57 = (unsigned __int8 *)v59[1];
          if (!v57)
          {
            CFTypeRef v58 = (uint64_t **)(v59 + 1);
            goto LABEL_63;
          }
        }
      }
      else
      {
        CFTypeRef v58 = (uint64_t **)(a1 + 312);
        unint64_t v59 = (void *)(a1 + 312);
LABEL_63:
        CFMutableArrayRef v61 = v59;
        unint64_t v59 = operator new(0x28uLL);
        *((unsigned char *)v59 + 28) = 2;
        *((unsigned char *)v59 + 32) = 0;
        *((unsigned char *)v59 + 36) = 0;
        *unint64_t v59 = 0;
        v59[1] = 0;
        v59[2] = v61;
        *CFTypeRef v58 = v59;
        uint64_t v62 = **(void **)(a1 + 304);
        dispatch_object_t v63 = v59;
        if (v62)
        {
          *(void *)(a1 + 304) = v62;
          dispatch_object_t v63 = *v58;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v63);
        ++*(void *)(a1 + 320);
      }
      *((_DWORD *)v59 + 8) = v56;
      *((unsigned char *)v59 + 36) = 1;
      uint64_t result = [(uint64_t *)[a3 valueForKey:@"Idle"] unsignedIntValue];
      int v64 = (int)result;
      unint64_t v65 = *(unsigned __int8 **)(a1 + 344);
      if (v65)
      {
        while (1)
        {
          while (1)
          {
            CFMutableArrayRef v67 = v65;
            unsigned int v68 = v65[28];
            if (v68 < 3) {
              break;
            }
            unint64_t v65 = (unsigned __int8 *)*v67;
            uint64_t v66 = (uint64_t **)v67;
            if (!*v67) {
              goto LABEL_73;
            }
          }
          if (v68 == 2) {
            break;
          }
          unint64_t v65 = (unsigned __int8 *)v67[1];
          if (!v65)
          {
            uint64_t v66 = (uint64_t **)(v67 + 1);
            goto LABEL_73;
          }
        }
      }
      else
      {
        uint64_t v66 = (uint64_t **)(a1 + 344);
        CFMutableArrayRef v67 = (void *)(a1 + 344);
LABEL_73:
        long long v69 = v67;
        CFMutableArrayRef v67 = operator new(0x28uLL);
        *((unsigned char *)v67 + 28) = 2;
        *((unsigned char *)v67 + 32) = 0;
        *((unsigned char *)v67 + 36) = 0;
        void *v67 = 0;
        v67[1] = 0;
        v67[2] = v69;
        *uint64_t v66 = v67;
        uint64_t v70 = **(void **)(a1 + 336);
        xpc_object_t v71 = v67;
        if (v70)
        {
          *(void *)(a1 + 336) = v70;
          xpc_object_t v71 = *v66;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v71);
        ++*(void *)(a1 + 352);
      }
      *((_DWORD *)v67 + 8) = v64;
      *((unsigned char *)v67 + 36) = 1;
      uint64_t v72 = *(unsigned __int8 **)(a1 + 376);
      if (v72)
      {
        while (1)
        {
          while (1)
          {
            long long v42 = (unsigned __int8 **)v72;
            unsigned int v73 = v72[28];
            if (v73 < 3) {
              break;
            }
            uint64_t v72 = *v42;
            uint64_t v41 = v42;
            if (!*v42) {
              goto LABEL_83;
            }
          }
          if (v73 == 2) {
            goto LABEL_277;
          }
          uint64_t v72 = v42[1];
          if (!v72)
          {
            uint64_t v41 = v42 + 1;
            goto LABEL_83;
          }
        }
      }
      uint64_t v41 = (unsigned __int8 **)(a1 + 376);
      long long v42 = (unsigned __int8 **)(a1 + 376);
LABEL_83:
      std::string v44 = (unsigned __int8 *)operator new(0x28uLL);
      uint64_t v45 = v44;
      char v74 = 2;
    }
    else
    {
      uint64_t result = (uint64_t *)[a2 isEqualToString:*MEMORY[0x1E4F566D0]];
      if (!result) {
        return result;
      }
      int v92 = [[a3 valueForKey:@"Min"] unsignedIntValue];
      uint64_t v93 = (uint64_t **)(a1 + 280);
      CFTypeRef v94 = *(unsigned __int8 **)(a1 + 280);
      xpc_object_t v95 = (uint64_t **)(a1 + 280);
      CFArrayRef v96 = (void *)(a1 + 280);
      if (v94)
      {
        while (1)
        {
          while (1)
          {
            CFArrayRef v96 = v94;
            unsigned int v97 = v94[28];
            if (v97 < 0xB) {
              break;
            }
            CFTypeRef v94 = (unsigned __int8 *)*v96;
            xpc_object_t v95 = (uint64_t **)v96;
            if (!*v96) {
              goto LABEL_122;
            }
          }
          if (v97 == 10) {
            break;
          }
          CFTypeRef v94 = (unsigned __int8 *)v96[1];
          if (!v94)
          {
            xpc_object_t v95 = (uint64_t **)(v96 + 1);
            goto LABEL_122;
          }
        }
      }
      else
      {
LABEL_122:
        xpc_object_t v98 = v96;
        CFArrayRef v96 = operator new(0x28uLL);
        *((unsigned char *)v96 + 28) = 10;
        *((unsigned char *)v96 + 32) = 0;
        *((unsigned char *)v96 + 36) = 0;
        void *v96 = 0;
        v96[1] = 0;
        v96[2] = v98;
        *xpc_object_t v95 = v96;
        uint64_t v99 = **(void **)(a1 + 272);
        CFMutableArrayRef v100 = v96;
        if (v99)
        {
          *(void *)(a1 + 272) = v99;
          CFMutableArrayRef v100 = *v95;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v100);
        ++*(void *)(a1 + 288);
      }
      *((_DWORD *)v96 + 8) = v92;
      *((unsigned char *)v96 + 36) = 1;
      int v101 = [[a3 valueForKey:@"Max"] unsignedIntValue];
      uint64_t v102 = (uint64_t **)(a1 + 312);
      v103 = *(unsigned __int8 **)(a1 + 312);
      xpc_object_t v104 = (uint64_t **)(a1 + 312);
      uint64_t v105 = (void *)(a1 + 312);
      if (v103)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v105 = v103;
            unsigned int v106 = v103[28];
            if (v106 < 0xB) {
              break;
            }
            v103 = (unsigned __int8 *)*v105;
            xpc_object_t v104 = (uint64_t **)v105;
            if (!*v105) {
              goto LABEL_132;
            }
          }
          if (v106 == 10) {
            break;
          }
          v103 = (unsigned __int8 *)v105[1];
          if (!v103)
          {
            xpc_object_t v104 = (uint64_t **)(v105 + 1);
            goto LABEL_132;
          }
        }
      }
      else
      {
LABEL_132:
        size_t v107 = v105;
        uint64_t v105 = operator new(0x28uLL);
        *((unsigned char *)v105 + 28) = 10;
        *((unsigned char *)v105 + 32) = 0;
        *((unsigned char *)v105 + 36) = 0;
        *uint64_t v105 = 0;
        v105[1] = 0;
        v105[2] = v107;
        void *v104 = v105;
        uint64_t v108 = **(void **)(a1 + 304);
        uint64_t v109 = v105;
        if (v108)
        {
          *(void *)(a1 + 304) = v108;
          uint64_t v109 = *v104;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v109);
        ++*(void *)(a1 + 320);
      }
      *((_DWORD *)v105 + 8) = v101;
      *((unsigned char *)v105 + 36) = 1;
      int v110 = [[a3 valueForKey:@"Idle"] unsignedIntValue];
      CFNumberRef v111 = (uint64_t **)(a1 + 344);
      uint64_t v112 = *(unsigned __int8 **)(a1 + 344);
      uint64_t v113 = (uint64_t **)(a1 + 344);
      xpc_object_t v114 = (void *)(a1 + 344);
      if (v112)
      {
        while (1)
        {
          while (1)
          {
            xpc_object_t v114 = v112;
            unsigned int v115 = v112[28];
            if (v115 < 0xB) {
              break;
            }
            uint64_t v112 = (unsigned __int8 *)*v114;
            uint64_t v113 = (uint64_t **)v114;
            if (!*v114) {
              goto LABEL_142;
            }
          }
          if (v115 == 10) {
            break;
          }
          uint64_t v112 = (unsigned __int8 *)v114[1];
          if (!v112)
          {
            uint64_t v113 = (uint64_t **)(v114 + 1);
            goto LABEL_142;
          }
        }
      }
      else
      {
LABEL_142:
        CFArrayRef v116 = v114;
        xpc_object_t v114 = operator new(0x28uLL);
        *((unsigned char *)v114 + 28) = 10;
        *((unsigned char *)v114 + 32) = 0;
        *((unsigned char *)v114 + 36) = 0;
        *xpc_object_t v114 = 0;
        v114[1] = 0;
        v114[2] = v116;
        *uint64_t v113 = v114;
        uint64_t v117 = **(void **)(a1 + 336);
        uint64_t v118 = v114;
        if (v117)
        {
          *(void *)(a1 + 336) = v117;
          uint64_t v118 = *v113;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v118);
        ++*(void *)(a1 + 352);
      }
      *((_DWORD *)v114 + 8) = v110;
      *((unsigned char *)v114 + 36) = 1;
      uint64_t v41 = (unsigned __int8 **)(a1 + 376);
      CFArrayRef v119 = *(unsigned __int8 **)(a1 + 376);
      char v120 = (uint64_t **)(a1 + 376);
      char v121 = (void *)(a1 + 376);
      if (v119)
      {
        while (1)
        {
          while (1)
          {
            char v121 = v119;
            unsigned int v122 = v119[28];
            if (v122 < 0xB) {
              break;
            }
            CFArrayRef v119 = (unsigned __int8 *)*v121;
            char v120 = (uint64_t **)v121;
            if (!*v121) {
              goto LABEL_152;
            }
          }
          if (v122 == 10) {
            break;
          }
          CFArrayRef v119 = (unsigned __int8 *)v121[1];
          if (!v119)
          {
            char v120 = (uint64_t **)(v121 + 1);
            goto LABEL_152;
          }
        }
      }
      else
      {
LABEL_152:
        char v123 = v121;
        char v121 = operator new(0x28uLL);
        *((unsigned char *)v121 + 28) = 10;
        *((unsigned char *)v121 + 32) = 0;
        *((unsigned char *)v121 + 36) = 0;
        void *v121 = 0;
        v121[1] = 0;
        void v121[2] = v123;
        std::__shared_weak_count *v120 = v121;
        uint64_t v124 = **(void **)(a1 + 368);
        unsigned int v125 = v121;
        if (v124)
        {
          *(void *)(a1 + 368) = v124;
          unsigned int v125 = *v120;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v125);
        ++*(void *)(a1 + 384);
      }
      *((_DWORD *)v121 + 8) = 1;
      *((unsigned char *)v121 + 36) = 1;
      int v126 = [[a3 valueForKey:@"Min"] unsignedIntValue];
      uint64_t v127 = *v93;
      xpc_object_t v128 = (uint64_t **)(a1 + 280);
      int v129 = (uint64_t **)(a1 + 280);
      if (*v93)
      {
        while (1)
        {
          while (1)
          {
            int v129 = (uint64_t **)v127;
            unsigned int v130 = *((unsigned __int8 *)v127 + 28);
            if (v130 < 0xC) {
              break;
            }
            uint64_t v127 = *v129;
            xpc_object_t v128 = v129;
            if (!*v129) {
              goto LABEL_162;
            }
          }
          if (v130 == 11) {
            break;
          }
          uint64_t v127 = v129[1];
          if (!v127)
          {
            xpc_object_t v128 = v129 + 1;
            goto LABEL_162;
          }
        }
      }
      else
      {
LABEL_162:
        uint64_t v131 = (uint64_t *)v129;
        int v129 = (uint64_t **)operator new(0x28uLL);
        *((unsigned char *)v129 + 28) = 11;
        *((unsigned char *)v129 + 32) = 0;
        *((unsigned char *)v129 + 36) = 0;
        void *v129 = 0;
        v129[1] = 0;
        CFArrayRef v129[2] = v131;
        *xpc_object_t v128 = (uint64_t *)v129;
        uint64_t v132 = **(void **)(a1 + 272);
        long long v133 = (uint64_t *)v129;
        if (v132)
        {
          *(void *)(a1 + 272) = v132;
          long long v133 = *v128;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v133);
        ++*(void *)(a1 + 288);
      }
      *((_DWORD *)v129 + 8) = v126;
      *((unsigned char *)v129 + 36) = 1;
      int v134 = [[a3 valueForKey:@"Max"] unsignedIntValue];
      unsigned int v135 = *v102;
      xpc_object_t v136 = (uint64_t **)(a1 + 312);
      unsigned int v137 = (uint64_t **)(a1 + 312);
      if (*v102)
      {
        while (1)
        {
          while (1)
          {
            unsigned int v137 = (uint64_t **)v135;
            unsigned int v138 = *((unsigned __int8 *)v135 + 28);
            if (v138 < 0xC) {
              break;
            }
            unsigned int v135 = *v137;
            xpc_object_t v136 = v137;
            if (!*v137) {
              goto LABEL_172;
            }
          }
          if (v138 == 11) {
            break;
          }
          unsigned int v135 = v137[1];
          if (!v135)
          {
            xpc_object_t v136 = v137 + 1;
            goto LABEL_172;
          }
        }
      }
      else
      {
LABEL_172:
        uint64_t v139 = (uint64_t *)v137;
        unsigned int v137 = (uint64_t **)operator new(0x28uLL);
        *((unsigned char *)v137 + 28) = 11;
        *((unsigned char *)v137 + 32) = 0;
        *((unsigned char *)v137 + 36) = 0;
        *unsigned int v137 = 0;
        v137[1] = 0;
        CFArrayRef v137[2] = v139;
        uint64_t *v136 = (uint64_t *)v137;
        uint64_t v140 = **(void **)(a1 + 304);
        uint64_t v141 = (uint64_t *)v137;
        if (v140)
        {
          *(void *)(a1 + 304) = v140;
          uint64_t v141 = *v136;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v141);
        ++*(void *)(a1 + 320);
      }
      *((_DWORD *)v137 + 8) = v134;
      *((unsigned char *)v137 + 36) = 1;
      int v142 = [[a3 valueForKey:@"Idle"] unsignedIntValue];
      CFArrayRef v143 = *v111;
      CFArrayRef v144 = (uint64_t **)(a1 + 344);
      uint64_t v145 = (uint64_t **)(a1 + 344);
      if (*v111)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v145 = (uint64_t **)v143;
            unsigned int v146 = *((unsigned __int8 *)v143 + 28);
            if (v146 < 0xC) {
              break;
            }
            CFArrayRef v143 = *v145;
            CFArrayRef v144 = v145;
            if (!*v145) {
              goto LABEL_182;
            }
          }
          if (v146 == 11) {
            break;
          }
          CFArrayRef v143 = v145[1];
          if (!v143)
          {
            CFArrayRef v144 = v145 + 1;
            goto LABEL_182;
          }
        }
      }
      else
      {
LABEL_182:
        unsigned int v147 = (uint64_t *)v145;
        uint64_t v145 = (uint64_t **)operator new(0x28uLL);
        *((unsigned char *)v145 + 28) = 11;
        *((unsigned char *)v145 + 32) = 0;
        *((unsigned char *)v145 + 36) = 0;
        *uint64_t v145 = 0;
        v145[1] = 0;
        void v145[2] = v147;
        void *v144 = (uint64_t *)v145;
        uint64_t v148 = **(void **)(a1 + 336);
        uint64_t v149 = (uint64_t *)v145;
        if (v148)
        {
          *(void *)(a1 + 336) = v148;
          uint64_t v149 = *v144;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v149);
        ++*(void *)(a1 + 352);
      }
      *((_DWORD *)v145 + 8) = v142;
      *((unsigned char *)v145 + 36) = 1;
      CFMutableDictionaryRef v150 = *v41;
      CFMutableDictionaryRef v151 = (uint64_t **)(a1 + 376);
      CFMutableDictionaryRef v152 = (void *)(a1 + 376);
      if (*v41)
      {
        while (1)
        {
          while (1)
          {
            CFMutableDictionaryRef v152 = v150;
            unsigned int v153 = v150[28];
            if (v153 < 0xC) {
              break;
            }
            CFMutableDictionaryRef v150 = (unsigned __int8 *)*v152;
            CFMutableDictionaryRef v151 = (uint64_t **)v152;
            if (!*v152) {
              goto LABEL_192;
            }
          }
          if (v153 == 11) {
            break;
          }
          CFMutableDictionaryRef v150 = (unsigned __int8 *)v152[1];
          if (!v150)
          {
            CFMutableDictionaryRef v151 = (uint64_t **)(v152 + 1);
            goto LABEL_192;
          }
        }
      }
      else
      {
LABEL_192:
        CFMutableDictionaryRef v154 = v152;
        CFMutableDictionaryRef v152 = operator new(0x28uLL);
        *((unsigned char *)v152 + 28) = 11;
        *((unsigned char *)v152 + 32) = 0;
        *((unsigned char *)v152 + 36) = 0;
        *CFMutableDictionaryRef v152 = 0;
        v152[1] = 0;
        v152[2] = v154;
        void *v151 = v152;
        uint64_t v155 = **(void **)(a1 + 368);
        uint64_t v156 = v152;
        if (v155)
        {
          *(void *)(a1 + 368) = v155;
          uint64_t v156 = *v151;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v156);
        ++*(void *)(a1 + 384);
      }
      *((_DWORD *)v152 + 8) = 1;
      *((unsigned char *)v152 + 36) = 1;
      int v157 = [[a3 valueForKey:@"Min"] unsignedIntValue];
      xpc_object_t v158 = (unsigned __int8 *)*v93;
      CFMutableDictionaryRef v159 = (uint64_t **)(a1 + 280);
      CFMutableDictionaryRef v160 = (void *)(a1 + 280);
      if (*v93)
      {
        while (1)
        {
          while (1)
          {
            CFMutableDictionaryRef v160 = v158;
            unsigned int v161 = v158[28];
            if (v161 < 0xD) {
              break;
            }
            xpc_object_t v158 = (unsigned __int8 *)*v160;
            CFMutableDictionaryRef v159 = (uint64_t **)v160;
            if (!*v160) {
              goto LABEL_202;
            }
          }
          if (v161 == 12) {
            break;
          }
          xpc_object_t v158 = (unsigned __int8 *)v160[1];
          if (!v158)
          {
            CFMutableDictionaryRef v159 = (uint64_t **)(v160 + 1);
            goto LABEL_202;
          }
        }
      }
      else
      {
LABEL_202:
        CFMutableDictionaryRef v162 = v160;
        CFMutableDictionaryRef v160 = operator new(0x28uLL);
        *((unsigned char *)v160 + 28) = 12;
        *((unsigned char *)v160 + 32) = 0;
        *((unsigned char *)v160 + 36) = 0;
        void *v160 = 0;
        v160[1] = 0;
        void v160[2] = v162;
        void *v159 = v160;
        uint64_t v163 = **(void **)(a1 + 272);
        CFMutableDictionaryRef v164 = v160;
        if (v163)
        {
          *(void *)(a1 + 272) = v163;
          CFMutableDictionaryRef v164 = *v159;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v164);
        ++*(void *)(a1 + 288);
      }
      *((_DWORD *)v160 + 8) = v157;
      *((unsigned char *)v160 + 36) = 1;
      int v165 = [[a3 valueForKey:@"Max"] unsignedIntValue];
      CFMutableDictionaryRef v166 = (unsigned __int8 *)*v102;
      v167 = (uint64_t **)(a1 + 312);
      CFMutableDictionaryRef v168 = (void *)(a1 + 312);
      if (*v102)
      {
        while (1)
        {
          while (1)
          {
            CFMutableDictionaryRef v168 = v166;
            unsigned int v169 = v166[28];
            if (v169 < 0xD) {
              break;
            }
            CFMutableDictionaryRef v166 = (unsigned __int8 *)*v168;
            v167 = (uint64_t **)v168;
            if (!*v168) {
              goto LABEL_212;
            }
          }
          if (v169 == 12) {
            break;
          }
          CFMutableDictionaryRef v166 = (unsigned __int8 *)v168[1];
          if (!v166)
          {
            v167 = (uint64_t **)(v168 + 1);
            goto LABEL_212;
          }
        }
      }
      else
      {
LABEL_212:
        int v170 = v168;
        CFMutableDictionaryRef v168 = operator new(0x28uLL);
        *((unsigned char *)v168 + 28) = 12;
        *((unsigned char *)v168 + 32) = 0;
        *((unsigned char *)v168 + 36) = 0;
        *CFMutableDictionaryRef v168 = 0;
        v168[1] = 0;
        v168[2] = v170;
        void *v167 = v168;
        uint64_t v171 = **(void **)(a1 + 304);
        uint64_t v172 = v168;
        if (v171)
        {
          *(void *)(a1 + 304) = v171;
          uint64_t v172 = *v167;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v172);
        ++*(void *)(a1 + 320);
      }
      *((_DWORD *)v168 + 8) = v165;
      *((unsigned char *)v168 + 36) = 1;
      int v173 = [[a3 valueForKey:@"Idle"] unsignedIntValue];
      CFMutableDictionaryRef v174 = (unsigned __int8 *)*v111;
      int v175 = (uint64_t **)(a1 + 344);
      int v176 = (void *)(a1 + 344);
      if (*v111)
      {
        while (1)
        {
          while (1)
          {
            int v176 = v174;
            unsigned int v177 = v174[28];
            if (v177 < 0xD) {
              break;
            }
            CFMutableDictionaryRef v174 = (unsigned __int8 *)*v176;
            int v175 = (uint64_t **)v176;
            if (!*v176) {
              goto LABEL_222;
            }
          }
          if (v177 == 12) {
            break;
          }
          CFMutableDictionaryRef v174 = (unsigned __int8 *)v176[1];
          if (!v174)
          {
            int v175 = (uint64_t **)(v176 + 1);
            goto LABEL_222;
          }
        }
      }
      else
      {
LABEL_222:
        v178 = v176;
        int v176 = operator new(0x28uLL);
        *((unsigned char *)v176 + 28) = 12;
        *((unsigned char *)v176 + 32) = 0;
        *((unsigned char *)v176 + 36) = 0;
        *int v176 = 0;
        v176[1] = 0;
        v176[2] = v178;
        *int v175 = v176;
        uint64_t v179 = **(void **)(a1 + 336);
        unint64_t v180 = v176;
        if (v179)
        {
          *(void *)(a1 + 336) = v179;
          unint64_t v180 = *v175;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v180);
        ++*(void *)(a1 + 352);
      }
      *((_DWORD *)v176 + 8) = v173;
      *((unsigned char *)v176 + 36) = 1;
      uint64_t v181 = *v41;
      CFDictionaryRef v182 = (uint64_t **)(a1 + 376);
      uint64_t v183 = (void *)(a1 + 376);
      if (*v41)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v183 = v181;
            unsigned int v184 = v181[28];
            if (v184 < 0xD) {
              break;
            }
            uint64_t v181 = (unsigned __int8 *)*v183;
            CFDictionaryRef v182 = (uint64_t **)v183;
            if (!*v183) {
              goto LABEL_232;
            }
          }
          if (v184 == 12) {
            break;
          }
          uint64_t v181 = (unsigned __int8 *)v183[1];
          if (!v181)
          {
            CFDictionaryRef v182 = (uint64_t **)(v183 + 1);
            goto LABEL_232;
          }
        }
      }
      else
      {
LABEL_232:
        uint64_t v185 = v183;
        uint64_t v183 = operator new(0x28uLL);
        *((unsigned char *)v183 + 28) = 12;
        *((unsigned char *)v183 + 32) = 0;
        *((unsigned char *)v183 + 36) = 0;
        void *v183 = 0;
        v183[1] = 0;
        void v183[2] = v185;
        *CFDictionaryRef v182 = v183;
        uint64_t v186 = **(void **)(a1 + 368);
        v187 = v183;
        if (v186)
        {
          *(void *)(a1 + 368) = v186;
          v187 = *v182;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v187);
        ++*(void *)(a1 + 384);
      }
      *((_DWORD *)v183 + 8) = 1;
      *((unsigned char *)v183 + 36) = 1;
      int v188 = [[a3 valueForKey:@"Min"] unsignedIntValue];
      unsigned int v189 = (unsigned __int8 *)*v93;
      uint64_t v190 = (void *)(a1 + 280);
      if (*v93)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v190 = v189;
            unsigned int v191 = v189[28];
            if (v191 < 0xE) {
              break;
            }
            unsigned int v189 = (unsigned __int8 *)*v190;
            uint64_t v93 = (uint64_t **)v190;
            if (!*v190) {
              goto LABEL_242;
            }
          }
          if (v191 == 13) {
            break;
          }
          unsigned int v189 = (unsigned __int8 *)v190[1];
          if (!v189)
          {
            uint64_t v93 = (uint64_t **)(v190 + 1);
            goto LABEL_242;
          }
        }
      }
      else
      {
LABEL_242:
        uint64_t v192 = v190;
        uint64_t v190 = operator new(0x28uLL);
        *((unsigned char *)v190 + 28) = 13;
        *((unsigned char *)v190 + 32) = 0;
        *((unsigned char *)v190 + 36) = 0;
        void *v190 = 0;
        v190[1] = 0;
        v190[2] = v192;
        *uint64_t v93 = v190;
        uint64_t v193 = **(void **)(a1 + 272);
        v194 = v190;
        if (v193)
        {
          *(void *)(a1 + 272) = v193;
          v194 = *v93;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v194);
        ++*(void *)(a1 + 288);
      }
      *((_DWORD *)v190 + 8) = v188;
      *((unsigned char *)v190 + 36) = 1;
      int v195 = [[a3 valueForKey:@"Max"] unsignedIntValue];
      uint64_t v196 = (unsigned __int8 *)*v102;
      uint64_t v197 = (void *)(a1 + 312);
      if (*v102)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v197 = v196;
            unsigned int v198 = v196[28];
            if (v198 < 0xE) {
              break;
            }
            uint64_t v196 = (unsigned __int8 *)*v197;
            uint64_t v102 = (uint64_t **)v197;
            if (!*v197) {
              goto LABEL_252;
            }
          }
          if (v198 == 13) {
            break;
          }
          uint64_t v196 = (unsigned __int8 *)v197[1];
          if (!v196)
          {
            uint64_t v102 = (uint64_t **)(v197 + 1);
            goto LABEL_252;
          }
        }
      }
      else
      {
LABEL_252:
        int v199 = v197;
        uint64_t v197 = operator new(0x28uLL);
        *((unsigned char *)v197 + 28) = 13;
        *((unsigned char *)v197 + 32) = 0;
        *((unsigned char *)v197 + 36) = 0;
        *uint64_t v197 = 0;
        v197[1] = 0;
        v197[2] = v199;
        *uint64_t v102 = v197;
        uint64_t v200 = **(void **)(a1 + 304);
        v201 = v197;
        if (v200)
        {
          *(void *)(a1 + 304) = v200;
          v201 = *v102;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v201);
        ++*(void *)(a1 + 320);
      }
      *((_DWORD *)v197 + 8) = v195;
      *((unsigned char *)v197 + 36) = 1;
      uint64_t result = (uint64_t *)[((id)objc_msgSend(a3, "valueForKey:", @"Idle")) unsignedIntValue];
      int v202 = (int)result;
      uint64_t v203 = (unsigned __int8 *)*v111;
      int v204 = (void *)(a1 + 344);
      if (*v111)
      {
        while (1)
        {
          while (1)
          {
            int v204 = v203;
            unsigned int v205 = v203[28];
            if (v205 < 0xE) {
              break;
            }
            uint64_t v203 = (unsigned __int8 *)*v204;
            CFNumberRef v111 = (uint64_t **)v204;
            if (!*v204) {
              goto LABEL_262;
            }
          }
          if (v205 == 13) {
            break;
          }
          uint64_t v203 = (unsigned __int8 *)v204[1];
          if (!v203)
          {
            CFNumberRef v111 = (uint64_t **)(v204 + 1);
            goto LABEL_262;
          }
        }
      }
      else
      {
LABEL_262:
        BOOL v206 = v204;
        int v204 = operator new(0x28uLL);
        *((unsigned char *)v204 + 28) = 13;
        *((unsigned char *)v204 + 32) = 0;
        *((unsigned char *)v204 + 36) = 0;
        *int v204 = 0;
        v204[1] = 0;
        v204[2] = v206;
        *CFNumberRef v111 = v204;
        uint64_t v207 = **(void **)(a1 + 336);
        v208 = v204;
        if (v207)
        {
          *(void *)(a1 + 336) = v207;
          v208 = *v111;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v208);
        ++*(void *)(a1 + 352);
      }
      *((_DWORD *)v204 + 8) = v202;
      *((unsigned char *)v204 + 36) = 1;
      int v209 = *v41;
      long long v42 = (unsigned __int8 **)(a1 + 376);
      if (*v41)
      {
        while (1)
        {
          while (1)
          {
            long long v42 = (unsigned __int8 **)v209;
            unsigned int v210 = v209[28];
            if (v210 < 0xE) {
              break;
            }
            int v209 = *v42;
            uint64_t v41 = v42;
            if (!*v42) {
              goto LABEL_272;
            }
          }
          if (v210 == 13) {
            goto LABEL_277;
          }
          int v209 = v42[1];
          if (!v209)
          {
            uint64_t v41 = v42 + 1;
            break;
          }
        }
      }
LABEL_272:
      std::string v44 = (unsigned __int8 *)operator new(0x28uLL);
      uint64_t v45 = v44;
      char v74 = 13;
    }
    v44[28] = v74;
  }
  v44[32] = 0;
  v44[36] = 0;
  *(void *)std::string v44 = 0;
  *((void *)v44 + 1) = 0;
  *((void *)v44 + 2) = v42;
  *uint64_t v41 = v44;
  uint64_t v91 = **(void **)(a1 + 368);
  if (v91) {
    goto LABEL_275;
  }
LABEL_112:
  long long v42 = (unsigned __int8 **)v45;
LABEL_276:
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), (uint64_t *)v45);
  ++*(void *)(a1 + 384);
LABEL_277:
  *((_DWORD *)v42 + 8) = 1;
  *((unsigned char *)v42 + 36) = 1;
  return result;
}

void ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    long long v5 = (void *)a1[4];
    BOOL v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      long long v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = [a2 copy];
      int v10 = (std::__shared_weak_count *)v5[16];
      if (!v10 || (uint64_t v11 = v5[15], (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v13 = v12;
      id v14 = operator new(0x10uLL);
      *id v14 = v9;
      v14[1] = v5;
      int v15 = v5[17];
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      char v16 = operator new(0x18uLL);
      *char v16 = v14;
      v16[1] = v11;
      v16[2] = v13;
      dispatch_async_f(v15, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_20initPowerConfig_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
      if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

NSObject *___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke_51(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (void *)a1[4];
  int v4 = (capabilities::abs *)std::__shared_weak_count::lock(v2);
  __int16 v17 = v4;
  if (!v4) {
    return 0;
  }
  long long v5 = (std::__shared_weak_count *)v4;
  if (!a1[5])
  {
    long long v7 = 0;
    goto LABEL_25;
  }
  if (!capabilities::abs::supportsCPMSGetPowerFromBB(v4)) {
    goto LABEL_21;
  }
  BOOL v6 = dispatch_group_create();
  long long v7 = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v7);
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  long long aBlock = 0;
  int v15 = v7;
  CPMSModule::getCurrentPower((uint64_t)v3, &v15, (uint64_t *)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  dispatch_time_t v8 = dispatch_time(0, 3000000000);
  if (!dispatch_group_wait(v7, v8))
  {
    if (v7) {
      dispatch_release(v7);
    }
LABEL_21:
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke_52;
    v12[3] = &__block_descriptor_40_e19___NSDictionary_8__0l;
    v12[4] = v3;
    uint64_t v13 = v12;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE20execute_wrapped_syncIU13block_pointerFP12NSDictionaryvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
    void v18[3] = &__block_descriptor_48_e19___NSDictionary_8__0l;
    v18[4] = v3 + 15;
    v18[5] = &v13;
    unsigned int v19 = v18;
    uint64_t v11 = v3[17];
    if (v3[18])
    {
      unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
      blocuint64_t k = MEMORY[0x1E4F143A8];
      uint64_t v21 = 3221225472;
      id v22 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFP12NSDictionaryvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
      int v23 = &__block_descriptor_48_e5_v8__0l;
      long long v24 = &v26;
      std::string::size_type v25 = &v19;
      dispatch_async_and_wait(v11, &block);
    }
    else
    {
      unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
      blocuint64_t k = MEMORY[0x1E4F143A8];
      uint64_t v21 = 3221225472;
      id v22 = ___ZN8dispatch9sync_implIRU13block_pointerFP12NSDictionaryvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
      int v23 = &__block_descriptor_48_e5_v8__0l;
      long long v24 = &v26;
      std::string::size_type v25 = &v19;
      dispatch_sync(v11, &block);
    }
    long long v7 = v26;
    goto LABEL_25;
  }
  uint64_t v9 = v3[11];
  if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    if (!v7) {
      goto LABEL_25;
    }
    goto LABEL_14;
  }
  LOWORD(block) = 0;
  _os_log_error_impl(&dword_1C5767000, v9, OS_LOG_TYPE_ERROR, "Timeout for getting power estimation", (uint8_t *)&block, 2u);
  if (v7)
  {
LABEL_14:
    dispatch_release(v7);
    long long v7 = 0;
  }
LABEL_25:
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v7;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return v7;
}

void sub_1C57D12D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock, uint64_t a17, char a18)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v18)
  {
    dispatch_group_leave(v18);
    dispatch_release(v18);
    dispatch_group_leave(v18);
    dispatch_release(v18);
    dispatch_release(v18);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

id ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke_52(uint64_t a1)
{
  return PowerBudget::getNSDict((id *)(*(void *)(a1 + 32) + 400));
}

void CPMSModule::evaluateBrickMode_sync(uint64_t a1, long long *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!config::hw::watch((config::hw *)a1)) {
    return;
  }
  unsigned __int8 v28 = 0;
  *((void *)&buf + 1) = 0;
  uint64_t v32 = 0;
  *(void *)&long long buf = (char *)&buf + 8;
  if (&buf == a2)
  {
    int v4 = (char *)&buf + 8;
  }
  else
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&buf, *(void **)a2, (void *)a2 + 1);
    int v4 = (char *)buf;
  }
  long long v5 = (void (**)(void *))&unk_1F20F3518;
  v29[0] = &unk_1F20F3518;
  v29[1] = &v28;
  __int16 v30 = v29;
  if (v4 == (char *)&buf + 8) {
    goto LABEL_20;
  }
  BOOL v6 = v29;
  while ((*(unsigned int (**)(void *, char *, char *))(*v6 + 48))(v6, v4 + 28, v4 + 32))
  {
    long long v7 = (char *)*((void *)v4 + 1);
    dispatch_time_t v8 = v4;
    if (v7)
    {
      do
      {
        int v4 = v7;
        long long v7 = *(char **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        int v4 = (char *)*((void *)v8 + 2);
        BOOL v9 = *(void *)v4 == (void)v8;
        dispatch_time_t v8 = v4;
      }
      while (!v9);
    }
    if (v4 == (char *)&buf + 8) {
      break;
    }
    BOOL v6 = v30;
    if (!v30) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  if (v30 == v29)
  {
    long long v5 = (void (**)(void *))v29[0];
LABEL_20:
    v5[4](v29);
    goto LABEL_21;
  }
  if (v30) {
    (*(void (**)(void))(*v30 + 40))();
  }
LABEL_21:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((void **)&buf + 1));
  int v10 = v28;
  if (*(unsigned __int8 *)(a1 + 236) == v28) {
    return;
  }
  *(unsigned char *)(a1 + 236) = v28;
  uint64_t v11 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    long long v12 = "enabled";
    if (!v10) {
      long long v12 = "disabled";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v12;
    _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I Brick mode is %s", (uint8_t *)&buf, 0xCu);
  }
  *(void *)&long long buf = 0;
  uint64_t v13 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    *(void *)&long long buf = Mutable;
  }
  ctu::cf::insert<char const*,BOOL>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C628], *(unsigned __int8 *)(a1 + 236), v13, v15);
  char v16 = (const void *)*MEMORY[0x1E4F4C330];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4C330]);
  if (v17 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    unsigned int v19 = (void **)operator new(v21 + 1);
    __dst[1] = v18;
    unint64_t v27 = v22 | 0x8000000000000000;
    __dst[0] = v19;
  }
  else
  {
    HIBYTE(v27) = v17;
    unsigned int v19 = __dst;
    if (!v17)
    {
      LOBYTE(__dst[0]) = 0;
      long long v20 = (const void *)buf;
      if (!(void)buf) {
        goto LABEL_39;
      }
      goto LABEL_37;
    }
  }
  memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  long long v20 = (const void *)buf;
  if (!(void)buf)
  {
LABEL_39:
    CFTypeRef cf = 0;
    goto LABEL_40;
  }
LABEL_37:
  CFTypeID v23 = CFGetTypeID(v20);
  if (v23 != CFDictionaryGetTypeID()) {
    goto LABEL_39;
  }
  CFTypeRef cf = v20;
  CFRetain(v20);
LABEL_40:
  long long aBlock = 0;
  Service::broadcastEvent(a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__dst[0]);
    if (!v20) {
      return;
    }
  }
  else if (!v20)
  {
    return;
  }
  CFRelease(v20);
}

void sub_1C57D16EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void CPMSModule::reportThermalDataToSMC_sync(uint64_t a1, float **a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD4F8, memory_order_acquire) & 1) == 0)
  {
    long long v20 = (capabilities::abs *)__cxa_guard_acquire(&qword_1EBBDD4F8);
    if (v20)
    {
      dword_1EBBDD4F4 = capabilities::abs::thermalSensorMaxCount(v20);
      __cxa_guard_release(&qword_1EBBDD4F8);
    }
  }
  int v29 = 0;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  int v4 = dword_1EBBDD4F4;
  if (dword_1EBBDD4F4 == 2)
  {
    char v5 = 2;
    int v6 = 2;
  }
  else
  {
    if (dword_1EBBDD4F4 != 3)
    {
      CFAllocatorRef v15 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)char v31 = v4;
        _os_log_error_impl(&dword_1C5767000, v15, OS_LOG_TYPE_ERROR, "Failed to find the SMC Exchange BB version with the number of sensor capability %u", buf, 8u);
      }
      return;
    }
    char v5 = 1;
    int v6 = 1;
  }
  v21[1] = v5;
  v21[0] = dword_1EBBDD4F4;
  int v7 = _MergedGlobals_2++;
  v21[2] = v7;
  v21[3] = 0;
  dispatch_time_t v8 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)char v31 = v6;
    _os_log_debug_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Version: %u", buf, 8u);
    dispatch_time_t v8 = *(NSObject **)(a1 + 88);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
LABEL_8:
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
  }
  else if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    goto LABEL_8;
  }
  *(_DWORD *)long long buf = 67109120;
  *(_DWORD *)char v31 = v4;
  _os_log_debug_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Number of Sensors: %u", buf, 8u);
  dispatch_time_t v8 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
LABEL_9:
    BOOL v9 = *a2;
    int v10 = (unsigned __int8 *)a2[1];
    if (*a2 != (float *)v10) {
      goto LABEL_10;
    }
LABEL_24:
    int v17 = TelephonyBasebandReportThermalData();
    long long v18 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v19 = "Failed";
      if (v17) {
        unsigned int v19 = "Succeeded";
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)char v31 = v19;
      *(_WORD *)&v31[8] = 1024;
      *(_DWORD *)&v31[10] = 255;
      _os_log_impl(&dword_1C5767000, v18, OS_LOG_TYPE_DEFAULT, "#I %s to report the thermal data to SMC, result: %u", buf, 0x12u);
    }
    return;
  }
LABEL_23:
  *(_DWORD *)long long buf = 67109120;
  *(_DWORD *)char v31 = v7;
  _os_log_debug_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Sequence Number: %u", buf, 8u);
  BOOL v9 = *a2;
  int v10 = (unsigned __int8 *)a2[1];
  if (*a2 == (float *)v10) {
    goto LABEL_24;
  }
LABEL_10:
  unsigned int v11 = dword_1EBBDD4F4;
  while (1)
  {
    unsigned int v12 = *(unsigned __int8 *)v9;
    if (v11 <= v12) {
      break;
    }
    float v13 = v9[1];
    *(float *)&v21[4 * *(unsigned __int8 *)v9 + 4] = v13;
    id v14 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)char v31 = v12;
      *(_WORD *)&uint8_t v31[4] = 2048;
      *(double *)&v31[6] = v13;
      _os_log_debug_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Sensor ID: %d, Sensor Data: %f", buf, 0x12u);
      unsigned int v11 = dword_1EBBDD4F4;
      v9 += 2;
      if (v9 == (float *)v10) {
        goto LABEL_24;
      }
    }
    else
    {
      v9 += 2;
      if (v9 == (float *)v10) {
        goto LABEL_24;
      }
    }
  }
  char v16 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)char v31 = v12;
    *(_WORD *)&uint8_t v31[4] = 1024;
    *(_DWORD *)&v31[6] = v11;
    _os_log_error_impl(&dword_1C5767000, v16, OS_LOG_TYPE_ERROR, "Sensor ID (%d) cannot exceed the max number of sensors (%u) in the device", buf, 0xEu);
  }
}

void sub_1C57D1C38(_Unwind_Exception *a1)
{
}

void ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke(uint64_t a1, float **a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      BOOL v9 = *a2;
      int v10 = a2[1];
      if (*a2 != v10)
      {
        if (*(unsigned char *)(a1 + 56))
        {
          unsigned int v11 = *(NSObject **)(v5 + 88);
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
          {
            if (v9 != v10) {
              goto LABEL_14;
            }
            goto LABEL_63;
          }
          *(_WORD *)long long buf = 0;
          _os_log_debug_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEBUG, "#D Reporting thermal data to SMC:", buf, 2u);
          BOOL v9 = *a2;
          int v10 = a2[1];
          if (*a2 == v10)
          {
LABEL_63:
            CPMSModule::reportThermalDataToSMC_sync(v5, a2);
            return;
          }
          while (1)
          {
LABEL_14:
            unsigned int v12 = *(NSObject **)(v5 + 88);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
            {
              int v19 = *(unsigned __int8 *)v9;
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v19;
              _os_log_debug_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEBUG, "#D Sensor ID: %d", buf, 8u);
              unsigned int v12 = *(NSObject **)(v5 + 88);
              int v20 = *(unsigned __int8 *)(a1 + 56);
              BOOL v14 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
              if (v20)
              {
LABEL_16:
                if (v14)
                {
                  double v15 = v9[1];
                  *(_DWORD *)long long buf = 134217984;
                  *(double *)&uint8_t buf[4] = v15;
                  char v16 = v12;
                  int v17 = "#D Sensor Data (float): %f";
                  uint32_t v18 = 12;
LABEL_21:
                  _os_log_debug_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEBUG, v17, buf, v18);
                  goto LABEL_13;
                }
                goto LABEL_13;
              }
            }
            else
            {
              int v13 = *(unsigned __int8 *)(a1 + 56);
              BOOL v14 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
              if (v13) {
                goto LABEL_16;
              }
            }
            if (v14)
            {
              int v21 = *((_DWORD *)v9 + 1);
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v21;
              char v16 = v12;
              int v17 = "#D Sensor Data (int32): %d";
              uint32_t v18 = 8;
              goto LABEL_21;
            }
LABEL_13:
            v9 += 2;
            if (v9 == v10) {
              goto LABEL_63;
            }
          }
        }
        xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        xpc_object_t v23 = xpc_dictionary_create(0, 0, 0);
        xpc_object_t v24 = v23;
        uint64_t v25 = MEMORY[0x1E4F14590];
        if (v23)
        {
          xpc_object_t xdict = v23;
        }
        else
        {
          xpc_object_t v24 = xpc_null_create();
          xpc_object_t xdict = v24;
          if (!v24)
          {
            xpc_object_t v26 = xpc_null_create();
            xpc_object_t v24 = 0;
            goto LABEL_31;
          }
        }
        if (MEMORY[0x1C8792D30](v24) == v25)
        {
          xpc_retain(v24);
          goto LABEL_32;
        }
        xpc_object_t v26 = xpc_null_create();
LABEL_31:
        xpc_object_t xdict = v26;
LABEL_32:
        xpc_release(v24);
        if (MEMORY[0x1C8792D30](xdict) != v25)
        {
          long long v27 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_1C5767000, v27, OS_LOG_TYPE_ERROR, "Failed to create xpc dictionary!", buf, 2u);
          }
LABEL_61:
          xpc_release(xdict);
          return;
        }
        xpc_object_t v28 = xpc_data_create(*a2, (char *)a2[1] - (char *)*a2);
        if (!v28) {
          xpc_object_t v28 = xpc_null_create();
        }
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C260], v28);
        xpc_object_t v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        __int16 v30 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          xpc::dict::to_debug_string((xpc::dict *)&xdict, buf);
          std::string v40 = v47 >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)dispatch_object_t object = 136315138;
          *(void *)&object[4] = v40;
          _os_log_debug_impl(&dword_1C5767000, v30, OS_LOG_TYPE_DEBUG, "#D Reporting thermal data to Thermal Monitor: %s", object, 0xCu);
          if (v47 < 0) {
            operator delete(*(void **)buf);
          }
        }
        char v31 = (const void *)*MEMORY[0x1E4F4C470];
        size_t v32 = strlen((const char *)*MEMORY[0x1E4F4C470]);
        if (v32 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        uint64_t v33 = (void *)v32;
        if (v32 >= 0x17)
        {
          uint64_t v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v32 | 7) != 0x17) {
            uint64_t v35 = v32 | 7;
          }
          uint64_t v36 = v35 + 1;
          uint64_t v34 = (void **)operator new(v35 + 1);
          __dst[1] = v33;
          unint64_t v44 = v36 | 0x8000000000000000;
          __dst[0] = v34;
        }
        else
        {
          HIBYTE(v44) = v32;
          uint64_t v34 = __dst;
          if (!v32) {
            goto LABEL_46;
          }
        }
        memmove(v34, v31, (size_t)v33);
LABEL_46:
        *((unsigned char *)v33 + (void)v34) = 0;
        *(void *)dispatch_object_t object = xdict;
        if (xdict) {
          xpc_retain(xdict);
        }
        else {
          *(void *)dispatch_object_t object = xpc_null_create();
        }
        xpc::bridge((uint64_t *)buf, (xpc *)object, v37);
        uint64_t v38 = *(const void **)buf;
        if (*(void *)buf && (CFTypeID v39 = CFGetTypeID(*(CFTypeRef *)buf), v39 == CFDictionaryGetTypeID()))
        {
          CFTypeRef cf = v38;
          CFRetain(v38);
        }
        else
        {
          CFTypeRef cf = 0;
        }
        long long aBlock = 0;
        Service::broadcastEvent(v5, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (*(void *)buf) {
          CFRelease(*(CFTypeRef *)buf);
        }
        xpc_release(*(xpc_object_t *)object);
        if (SHIBYTE(v44) < 0) {
          operator delete(__dst[0]);
        }
        goto LABEL_61;
      }
      long long v22 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C5767000, v22, OS_LOG_TYPE_DEFAULT, "#I Thermal Data is empty!", buf, 2u);
      }
    }
  }
}

void sub_1C57D21D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t object,char a22,uint64_t a23,uint64_t a24,uint64_t a25,xpc_object_t a26)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void xpc::dict::to_debug_string(xpc::dict *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)MEMORY[0x1C8792C60](*(void *)this);
  memset(a2, 170, 24);
  size_t v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
    goto LABEL_8;
  }
  *((unsigned char *)a2 + 23) = v4;
  if (v4) {
LABEL_8:
  }
    memcpy(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;

  free(v3);
}

void ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_74(uint64_t a1, void *a2)
{
  object[1] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      if (*a2) {
        BOOL v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        BOOL v9 = 0;
      }
      if (!v9 && (int v10 = *(NSObject **)(v5 + 88), os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)))
      {
        int v17 = *(_DWORD *)(a1 + 64);
        LODWORD(object[0]) = 67109120;
        HIDWORD(object[0]) = v17;
        _os_log_debug_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEBUG, "#D Thermal Report Interval (%u ms) is set.", (uint8_t *)object, 8u);
        if (!*(void *)(a1 + 56)) {
          return;
        }
      }
      else if (!*(void *)(a1 + 56))
      {
        return;
      }
      if (*a2) {
        unsigned int v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        unsigned int v11 = 0;
      }
      if (v11)
      {
        xpc_object_t v12 = xpc_null_create();
        uint64_t v13 = *(void *)(a1 + 56);
        object[0] = v12;
        xpc_object_t v14 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v13 + 16))(v13, 3760250880, object);
      }
      else
      {
        xpc_object_t v15 = xpc_null_create();
        uint64_t v16 = *(void *)(a1 + 56);
        object[0] = v15;
        xpc_object_t v14 = xpc_null_create();
        (*(void (**)(uint64_t, void, xpc_object_t *))(v16 + 16))(v16, 0, object);
      }
      xpc_release(object[0]);
      xpc_release(v14);
    }
  }
}

void sub_1C57D2558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[7];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke(void *result)
{
  uint64_t v1 = result[6];
  *(unsigned char *)(*(void *)(result[4] + 8) + 24) = *(unsigned char *)(v1 + 234);
  *(unsigned char *)(*(void *)(result[5] + 8) + 24) = *(unsigned char *)(v1 + 233);
  return result;
}

void ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_2(void *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[6];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      BOOL v9 = (id *)(v5 + 400);

      *(void *)(v5 + 424) = 0;
      if (v5 + 400 != a2) {
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(v5 + 400, *(void **)a2, (void *)(a2 + 8));
      }
      int v10 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        PowerBudget::to_string((PowerBudget *)(v5 + 400), __p);
        int v18 = v23;
        int v19 = (xpc_object_t *)__p[0];
        id NSDict = PowerBudget::getNSDict(v9);
        int v21 = __p;
        if (v18 < 0) {
          int v21 = v19;
        }
        *(_DWORD *)dispatch_object_t object = 136315394;
        *(void *)&object[4] = v21;
        __int16 v25 = 2112;
        id v26 = NSDict;
        _os_log_debug_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEBUG, "#D Current power estimation in baseband side: %s, and reporting back to CPMS: %@", object, 0x16u);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v12 = a1[8];
      unsigned int v11 = a1 + 8;
      if (v12)
      {
        uint64_t v13 = (ctu *)PowerBudget::getNSDict(v9);
        ctu::cf_to_xpc((uint64_t *)object, v13, v14);
        xpc_object_t v15 = *(xpc_object_t *)object;
        __p[0] = *(xpc_object_t *)object;
        uint64_t v16 = MEMORY[0x1E4F14590];
        if (*(void *)object && MEMORY[0x1C8792D30](*(void *)object) == v16)
        {
          xpc_retain(v15);
        }
        else
        {
          xpc_object_t v15 = xpc_null_create();
          __p[0] = v15;
        }
        xpc_release(*(xpc_object_t *)object);
        if (MEMORY[0x1C8792D30](v15) == v16) {
          int v17 = 0;
        }
        else {
          int v17 = -534716416;
        }
        *(_DWORD *)dispatch_object_t object = v17;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v11, (unsigned int *)object, __p);
        xpc_release(__p[0]);
      }
    }
  }
}

void sub_1C57D28B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_1C57D2974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void *__copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[8];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(void *a1)
{
  uint64_t v2 = (const void *)a1[8];
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = a1[5];
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = a1[5];
    if (v5)
    {
      dispatch_release(v5);
    }
  }
}

void ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_77(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[6];
  uint64_t v3 = (id *)(v2 + 400);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(v2 + 400, *(void **)(v2 + 336), (void *)(v2 + 344));

  *(void *)(v2 + 424) = [*(id *)(v2 + 360) copy];
  uint64_t v4 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = a1[5];
    if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24)) {
      uint64_t v6 = "true";
    }
    else {
      uint64_t v6 = "false";
    }
    if (*(unsigned char *)(*(void *)(v5 + 8) + 24)) {
      uint64_t v7 = "true";
    }
    else {
      uint64_t v7 = "false";
    }
    int v8 = 136315650;
    BOOL v9 = v6;
    __int16 v10 = 2080;
    unsigned int v11 = v7;
    __int16 v12 = 2112;
    id NSDict = PowerBudget::getNSDict(v3);
    _os_log_debug_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEBUG, "#D Because baseband is not in traffic(%s) or online(%s), reporting idle power estimation back to CPMS: %@", (uint8_t *)&v8, 0x20u);
  }
}

void GlobalService::getShutdownStages(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    int v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F33B0;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F33B0;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<CPMSModule *,std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule *)#1},std::allocator<CPMSModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<CPMSModule *,std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule *)#1},std::allocator<CPMSModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<CPMSModule *,std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule *)#1},std::allocator<CPMSModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule*)#1}::operator() const(CPMSModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F33B0;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<CPMSModule>::execute_wrapped<CPMSModule::shutdown(dispatch::group_session)::$_0>(CPMSModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CPMSModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CPMSModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(config::hw *a1)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = **(void ***)a1;
  if ((config::hw::watch(a1) & 1) == 0)
  {
    uint64_t v4 = v3[24];
    if (v4) {
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v4 + 48))(v4, 0, 5);
    }
  }
  size_t v5 = (std::__shared_weak_count *)v3[20];
  v3[19] = 0;
  v3[20] = 0;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = v2[1];
  if (v6)
  {
    dispatch_group_leave(v6);
    uint64_t v7 = v2[1];
    if (v7) {
      dispatch_release(v7);
    }
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    BOOL v9 = a1;
  }
  else
  {
    BOOL v9 = a1;
  }
  operator delete(v9);
}

void sub_1C57D3068(_Unwind_Exception *a1)
{
  uint64_t v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    size_t v5 = v2[1];
    if (v5) {
      dispatch_release(v5);
    }
  }
  operator delete(v2);
  uint64_t v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v4 = *(void **)(*a1 + 16);
  unint64_t v3 = *(void **)(*a1 + 24);
  if (v3)
  {
    uint64_t v5 = v4[24];
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3321888768;
    void v13[2] = ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke;
    v13[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e172_v32__0_vector_abm::BasebandThermalID__std::allocator_abm::BasebandThermalID____C_C___compressed_pair_abm::BasebandThermalID____std::allocator_abm::BasebandThermalID____C__8l;
    v13[4] = v4;
    void v13[5] = *v2;
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    uint64_t v14 = v6;
    if (!v6
      || (atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed), (unint64_t v3 = (void *)v2[3]) != 0))
    {
      unint64_t v3 = _Block_copy(v3);
    }
    xpc_object_t v15 = v3;
    uint64_t v7 = _Block_copy(v13);
    int v8 = v4[17];
    if (v8) {
      dispatch_retain(v8);
    }
    long long aBlock = v7;
    dispatch_object_t object = v8;
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 56))(v5, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v15) {
      _Block_release(v15);
    }
    if (v14)
    {
      std::__shared_weak_count::__release_weak(v14);
      BOOL v9 = (const void *)v2[3];
      if (!v9) {
        goto LABEL_19;
      }
LABEL_18:
      _Block_release(v9);
      goto LABEL_19;
    }
LABEL_17:
    BOOL v9 = (const void *)v2[3];
    if (!v9) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  __int16 v10 = v4[11];
  if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    goto LABEL_17;
  }
  LOWORD(v13[0]) = 0;
  _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Expected response handler", (uint8_t *)v13, 2u);
  BOOL v9 = (const void *)v2[3];
  if (v9) {
    goto LABEL_18;
  }
LABEL_19:
  unsigned int v11 = (std::__shared_weak_count *)v2[1];
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(v2);
  __int16 v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1C57D32F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, void *aBlock, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    _Block_release(a16);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  int v21 = (const void *)v19[3];
  if (v21) {
    _Block_release(v21);
  }
  long long v22 = (std::__shared_weak_count *)v19[1];
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  operator delete(v19);
  char v23 = (std::__shared_weak_count *)v18[2];
  if (v23)
  {
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke(void *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[5];
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v8) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8) {
      return;
    }
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v10 = v9;
  uint64_t v11 = MEMORY[0x1E4F14590];
  if (v9)
  {
    xpc_object_t v24 = v9;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v24 = v10;
    if (!v10)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v10 = 0;
      goto LABEL_14;
    }
  }
  if (MEMORY[0x1C8792D30](v10) != v11)
  {
    xpc_object_t v12 = xpc_null_create();
LABEL_14:
    xpc_object_t v24 = v12;
    goto LABEL_15;
  }
  xpc_retain(v10);
LABEL_15:
  xpc_release(v10);
  uint64_t v13 = v24;
  if (MEMORY[0x1C8792D30](v24) == v11)
  {
    uint64_t v17 = *(void *)(a2 + 8);
    if (*(void *)a2 == v17)
    {
      int v20 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(object[0]) = 0;
        _os_log_impl(&dword_1C5767000, v20, OS_LOG_TYPE_DEFAULT, "#I Thermal IDs are empty!", (uint8_t *)object, 2u);
      }
      xpc_object_t v21 = xpc_null_create();
      uint64_t v22 = a1[7];
      object[0] = v21;
      xpc_object_t v23 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v22 + 16))(v22, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v23);
    }
    else
    {
      xpc_object_t v18 = xpc_data_create(*(const void **)a2, v17 - *(void *)a2);
      if (!v18) {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x1E4F4C1E0], v18);
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      LODWORD(object[0]) = 0;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 7, (unsigned int *)object, &v24);
      uint64_t v13 = v24;
    }
  }
  else
  {
    xpc_object_t v14 = xpc_null_create();
    uint64_t v15 = a1[7];
    object[0] = v14;
    xpc_object_t v16 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v15 + 16))(v15, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v16);
  }
  xpc_release(v13);
}

void sub_1C57D361C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v12);
  xpc_release(v11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  unint64_t v3 = *(void **)(*a1 + 16);
  uint64_t v4 = *(unsigned int *)(*a1 + 24);
  uint64_t v5 = *(const void **)(*a1 + 32);
  if (v5) {
    uint64_t v6 = _Block_copy(v5);
  }
  else {
    uint64_t v6 = 0;
  }
  xpc_object_t v10 = v6;
  CPMSModule::configureThermalReportFrequency_sync(v3, v4, &v10);
  if (v6) {
    _Block_release(v6);
  }
  uint64_t v7 = (const void *)v2[4];
  if (v7) {
    _Block_release(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)v2[1];
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(v2);
  xpc_object_t v9 = (std::__shared_weak_count *)a1[2];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }

  operator delete(a1);
}

void sub_1C57D37C4(_Unwind_Exception *a1)
{
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v5 = (const void *)v2[4];
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v2[1];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete(v2);
  uint64_t v7 = (std::__shared_weak_count *)v1[2];
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v4 = *(void **)(*a1 + 16);
  unint64_t v3 = *(void **)(*a1 + 24);
  if (v3)
  {
    uint64_t v5 = v4[24];
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3321888768;
    void v13[2] = ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke;
    v13[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e240_v32__0_vector_abm::PowerMitigationData__std::allocator_abm::PowerMitigationData_____PowerMitigationData___PowerMitigationData____compressed_pair_abm::PowerMitigationData____std::allocator_abm::PowerMitigationData_____PowerMitigationData___8l;
    v13[4] = v4;
    void v13[5] = *v2;
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    xpc_object_t v14 = v6;
    if (!v6
      || (atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed), (unint64_t v3 = (void *)v2[3]) != 0))
    {
      unint64_t v3 = _Block_copy(v3);
    }
    uint64_t v15 = v3;
    uint64_t v7 = _Block_copy(v13);
    uint64_t v8 = v4[17];
    if (v8) {
      dispatch_retain(v8);
    }
    long long aBlock = v7;
    dispatch_object_t object = v8;
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 72))(v5, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v15) {
      _Block_release(v15);
    }
    if (v14)
    {
      std::__shared_weak_count::__release_weak(v14);
      xpc_object_t v9 = (const void *)v2[3];
      if (!v9) {
        goto LABEL_19;
      }
LABEL_18:
      _Block_release(v9);
      goto LABEL_19;
    }
LABEL_17:
    xpc_object_t v9 = (const void *)v2[3];
    if (!v9) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  xpc_object_t v10 = v4[11];
  if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    goto LABEL_17;
  }
  LOWORD(v13[0]) = 0;
  _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Expected response handler", (uint8_t *)v13, 2u);
  xpc_object_t v9 = (const void *)v2[3];
  if (v9) {
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v11 = (std::__shared_weak_count *)v2[1];
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(v2);
  xpc_object_t v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1C57D3A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, void *aBlock, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    _Block_release(a16);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  xpc_object_t v21 = (const void *)v19[3];
  if (v21) {
    _Block_release(v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)v19[1];
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  operator delete(v19);
  xpc_object_t v23 = (std::__shared_weak_count *)v18[2];
  if (v23)
  {
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke(void *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[5];
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v8) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8) {
      return;
    }
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v10 = v9;
  uint64_t v11 = MEMORY[0x1E4F14590];
  if (v9)
  {
    xpc_object_t v24 = v9;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v24 = v10;
    if (!v10)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v10 = 0;
      goto LABEL_14;
    }
  }
  if (MEMORY[0x1C8792D30](v10) != v11)
  {
    xpc_object_t v12 = xpc_null_create();
LABEL_14:
    xpc_object_t v24 = v12;
    goto LABEL_15;
  }
  xpc_retain(v10);
LABEL_15:
  xpc_release(v10);
  uint64_t v13 = v24;
  if (MEMORY[0x1C8792D30](v24) == v11)
  {
    uint64_t v17 = *(void *)(a2 + 8);
    if (*(void *)a2 == v17)
    {
      int v20 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(object[0]) = 0;
        _os_log_impl(&dword_1C5767000, v20, OS_LOG_TYPE_DEFAULT, "#I Power Mitigation Data are empty!", (uint8_t *)object, 2u);
      }
      xpc_object_t v21 = xpc_null_create();
      uint64_t v22 = a1[7];
      object[0] = v21;
      xpc_object_t v23 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v22 + 16))(v22, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v23);
    }
    else
    {
      xpc_object_t v18 = xpc_data_create(*(const void **)a2, v17 - *(void *)a2);
      if (!v18) {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x1E4F4C930], v18);
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      LODWORD(object[0]) = 0;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 7, (unsigned int *)object, &v24);
      uint64_t v13 = v24;
    }
  }
  else
  {
    xpc_object_t v14 = xpc_null_create();
    uint64_t v15 = a1[7];
    object[0] = v14;
    xpc_object_t v16 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v15 + 16))(v15, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v16);
  }
  xpc_release(v13);
}

void sub_1C57D3D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v12);
  xpc_release(v11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  if (MEMORY[0x1C8792D30](*(void *)(*a1 + 24)) != MEMORY[0x1E4F14590] || (uint64_t v8 = *(void **)(v2 + 24)) == 0)
  {
    uint64_t v4 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object) = 0;
      _os_log_error_impl(&dword_1C5767000, v4, OS_LOG_TYPE_ERROR, "Expected intput/response handler", (uint8_t *)&object, 2u);
      if (!*(void *)(v2 + 32)) {
        goto LABEL_49;
      }
    }
    else if (!*(void *)(v2 + 32))
    {
      goto LABEL_49;
    }
    xpc_object_t v5 = xpc_null_create();
    uint64_t v6 = *(void *)(v2 + 32);
    xpc_object_t object = v5;
    xpc_object_t v7 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, 3760250880, &object);
    xpc_release(object);
    xpc_release(v7);
    goto LABEL_49;
  }
  memset(__p, 170, sizeof(__p));
  xpc_object_t value = xpc_dictionary_get_value(v8, (const char *)*MEMORY[0x1E4F4C698]);
  *(void *)size_t v50 = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)size_t v50 = xpc_null_create();
  }
  xpc_object_t object = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  std::string v40 = v1;
  uint64_t v42 = v2;
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)v50);
  xpc_object_t v10 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C2C8]);
  xpc_object_t v11 = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t v11 = xpc_null_create();
  }
  uint64_t v41 = v11;
  bytes_ptr = xpc_data_get_bytes_ptr(v11);
  int64_t length = xpc_data_get_length(v11);
  uint64_t v14 = length;
  if (length >= 4)
  {
    uint64_t v15 = (char *)operator new(length & 0xFFFFFFFFFFFFFFFCLL);
    memcpy(v15, bytes_ptr, v14 & 0xFFFFFFFFFFFFFFFCLL);
    xpc_object_t v16 = &v15[4 * (v14 >> 2)];
    uint64_t v17 = (unsigned __int8 *)__p[0];
    unsigned int v43 = (unsigned __int8 *)__p[1];
    if (__p[0] == __p[1]) {
      goto LABEL_41;
    }
LABEL_16:
    unint64_t v18 = 0;
    xpc_object_t v19 = (uint64_t **)(v3 + 248);
    unint64_t v44 = (v16 - v15) >> 2;
    do
    {
      unsigned int v20 = *v17;
      xpc_object_t v21 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        abm::asString();
        if (v44 <= v18) {
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        }
        p_xpc_object_t object = &object;
        if (v47 < 0) {
          p_xpc_object_t object = object;
        }
        int v23 = *(_DWORD *)&v15[4 * v18];
        *(_DWORD *)size_t v50 = 136315394;
        *(void *)&v50[4] = p_object;
        __int16 v51 = 1024;
        int v52 = v23;
        _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I Budget Scale: %s, value: %d", v50, 0x12u);
        if (SHIBYTE(v47) < 0) {
          operator delete(object);
        }
      }
      if (v44 <= v18) {
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      }
      if (v20 <= 0xD && ((1 << v20) & 0x3C07) != 0)
      {
        __int16 v25 = v15;
        int v26 = *(_DWORD *)&v15[4 * v18];
        uint64_t v27 = *v19;
        xpc_object_t v28 = (uint64_t **)(v3 + 248);
        xpc_object_t v29 = (uint64_t **)(v3 + 248);
        if (*v19)
        {
          while (1)
          {
            while (1)
            {
              xpc_object_t v29 = (uint64_t **)v27;
              unsigned int v30 = *((unsigned __int8 *)v27 + 28);
              if (v30 <= v20) {
                break;
              }
              uint64_t v27 = *v29;
              xpc_object_t v28 = v29;
              if (!*v29) {
                goto LABEL_38;
              }
            }
            if (v30 >= v20) {
              break;
            }
            uint64_t v27 = v29[1];
            if (!v27)
            {
              xpc_object_t v28 = v29 + 1;
              goto LABEL_38;
            }
          }
          char v31 = v29;
        }
        else
        {
LABEL_38:
          char v31 = operator new(0x28uLL);
          v31[28] = v20;
          v31[32] = 0;
          v31[36] = 0;
          *(void *)char v31 = 0;
          *((void *)v31 + 1) = 0;
          *((void *)v31 + 2) = v29;
          void *v28 = (uint64_t *)v31;
          uint64_t v32 = **(void **)(v3 + 240);
          uint64_t v33 = (uint64_t *)v31;
          if (v32)
          {
            *(void *)(v3 + 240) = v32;
            uint64_t v33 = *v28;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 248), v33);
          ++*(void *)(v3 + 256);
        }
        *((_DWORD *)v31 + 8) = v26;
        v31[36] = 1;
        uint64_t v15 = v25;
      }
      ++v18;
      ++v17;
    }
    while (v17 != v43);
    goto LABEL_41;
  }
  uint64_t v15 = 0;
  xpc_object_t v16 = 0;
  uint64_t v17 = (unsigned __int8 *)__p[0];
  unsigned int v43 = (unsigned __int8 *)__p[1];
  if (__p[0] != __p[1]) {
    goto LABEL_16;
  }
LABEL_41:
  xpc_object_t object = &v46;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  id v48 = 0;
  if ((xpc_object_t *)(v3 + 240) != &object) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&object, *(void **)(v3 + 240), (void *)(v3 + 248));
  }
  id v48 = (id)[*(id *)(v3 + 264) copy];
  uint64_t v2 = v42;
  CPMSModule::sendPowerBudgetToBB_sync(v3, (void **)&object);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&object, v46);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  xpc_object_t object = &v46;

  id v48 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&object, v46);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  xpc_object_t object = &v46;
  uint64_t v1 = v40;
  if (*(void *)(v42 + 32))
  {
    xpc_object_t v34 = xpc_null_create();
    uint64_t v35 = *(void *)(v42 + 32);
    *(void *)size_t v50 = v34;
    xpc_object_t v36 = xpc_null_create();
    (*(void (**)(uint64_t, void, unsigned char *))(v35 + 16))(v35, 0, v50);
    xpc_release(*(xpc_object_t *)v50);
    xpc_release(v36);
  }
  if (v15) {
    operator delete(v15);
  }
  xpc_release(v41);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_49:
  std::string v37 = *(const void **)(v2 + 32);
  if (v37) {
    _Block_release(v37);
  }
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  uint64_t v38 = *(std::__shared_weak_count **)(v2 + 8);
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete((void *)v2);
  CFTypeID v39 = (std::__shared_weak_count *)v1[2];
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  operator delete(v1);
}

void sub_1C57D4390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, xpc_object_t object, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,xpc_object_t a25)
{
  xpc_release(object);
  if (__p) {
    operator delete(__p);
  }
  if (a12)
  {
    int v26 = (const void *)*((void *)a12 + 4);
    if (v26) {
      _Block_release(v26);
    }
    xpc_release(*((xpc_object_t *)a12 + 3));
    *((void *)a12 + 3) = 0;
    uint64_t v27 = (std::__shared_weak_count *)*((void *)a12 + 1);
    if (v27) {
      std::__shared_weak_count::__release_weak(v27);
    }
    operator delete(a12);
  }
  xpc_object_t v28 = (std::__shared_weak_count *)a10[2];
  if (v28)
  {
    if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_1C57D4598(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]()
{
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_10initializeENS_13group_sessionEEUb_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t a1)
{
  uint64_t v2 = *(CPMSModule ***)a1;
  uint64_t v3 = **(CPMSModule ***)a1;
  CPMSModule::finishInitialization_sync(v3);
  CPMSModule::evaluatePowerBudgetNeed_sync(v3);
  operator delete(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    xpc_object_t v5 = (void *)a1;
  }
  else
  {
    xpc_object_t v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1C57D4690(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  xpc_object_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10CPMSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10CPMSModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_20initPowerConfig_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSDictionary ***)a1;
  uint64_t v3 = **(NSDictionary ***)a1;
  if (!v3) {
    goto LABEL_17;
  }
  uint64_t v4 = (uint64_t)v2[1];
  xpc_object_t v5 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Given budget from CPMS is %@", (uint8_t *)&buf, 0xCu);
    uint64_t v3 = *v2;
  }
  PowerBudget::fill((id *)(v4 + 240), v3);
  *(void *)&long long buf = (char *)&buf + 8;
  *((void *)&buf + 1) = 0;
  uint64_t v25 = 0;
  id v26 = 0;
  PowerBudget::fill((id *)&buf, *v2);
  uint64_t v6 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)&buf, &__p);
    int v7 = SHIBYTE(v18);
    uint64_t v8 = (void **)__p;
    PowerBudget::to_string((PowerBudget *)(v4 + 240), v22);
    uint64_t p_p = &__p;
    if (v7 < 0) {
      uint64_t p_p = v8;
    }
    if (v22[23] >= 0) {
      xpc_object_t v10 = v22;
    }
    else {
      xpc_object_t v10 = *(unsigned char **)v22;
    }
    *(_DWORD *)unsigned int v20 = 136315394;
    *(void *)&v20[4] = p_p;
    *(_WORD *)&v20[12] = 2080;
    *(void *)&v20[14] = v10;
    _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Budget from CPMS: %s, Cached Budgets: %s", v20, 0x16u);
    if ((v22[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v22);
      if ((SHIBYTE(v18) & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(__p);
  }
LABEL_12:
  long long __p = &v17;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  id v19 = 0;
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&__p, (void *)buf, (void *)&buf + 1);
  id v19 = (id)[v26 copy];
  int v11 = [*(id *)(v4 + 168) acknowledgePowerBudget:PowerBudget::getNSDict(&__p) forClientId:4 error:0];
  xpc_object_t v12 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id NSDict = PowerBudget::getNSDict(&__p);
    uint64_t v14 = "failed";
    if (v11) {
      uint64_t v14 = "succeeded";
    }
    *(_DWORD *)uint64_t v22 = 136315394;
    *(void *)&v22[4] = v14;
    *(_WORD *)&v22[12] = 2112;
    *(void *)&v22[14] = NSDict;
    _os_log_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEFAULT, "#I Acked CPMS %s for power budget %@", v22, 0x16u);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&__p, v17);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  long long __p = &v17;

  id v19 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&__p, v17);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  long long __p = &v17;
  id v23 = 0;
  *(void *)uint64_t v22 = &v22[8];
  *(_OWORD *)&v22[8] = 0uLL;
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)v22, (void *)buf, (void *)&buf + 1);
  id v23 = (id)[v26 copy];
  CPMSModule::evaluateBrickMode_sync(v4, (long long *)v22);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v22, *(void **)&v22[8]);
  *(_OWORD *)&v22[8] = 0uLL;
  *(void *)uint64_t v22 = &v22[8];

  id v23 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v22, *(void **)&v22[8]);
  *(_OWORD *)&v22[8] = 0uLL;
  id v21 = 0;
  *(void *)uint64_t v22 = &v22[8];
  *(_OWORD *)&v20[8] = 0uLL;
  *(void *)unsigned int v20 = &v20[8];
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)v20, (void *)buf, (void *)&buf + 1);
  id v21 = (id)[v26 copy];
  CPMSModule::sendPowerBudgetToBB_sync(v4, (void **)v20);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v20, *(void **)&v20[8]);
  *(_OWORD *)&v20[8] = 0uLL;
  *(void *)unsigned int v20 = &v20[8];

  id v21 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v20, *(void **)&v20[8]);
  *(_OWORD *)&v20[8] = 0uLL;
  *(void *)unsigned int v20 = &v20[8];

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((void **)&buf + 1));
  *((void *)&buf + 1) = 0;
  uint64_t v25 = 0;
  *(void *)&long long buf = (char *)&buf + 8;

  id v26 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((void **)&buf + 1));
LABEL_17:
  operator delete(v2);
  uint64_t v15 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  operator delete(a1);
}

void sub_1C57D4BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  PowerBudget::~PowerBudget((PowerBudget *)&a24);
  operator delete(v25);
  uint64_t v27 = (std::__shared_weak_count *)v24[2];
  if (v27)
  {
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

void *___ZNK3ctu20SharedSynchronizableI10CPMSModuleE20execute_wrapped_syncIU13block_pointerFP12NSDictionaryvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFP12NSDictionaryvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(void **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFP12NSDictionaryvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(void **)(a1 + 32) = result;
  return result;
}

void *std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F20F3518;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20F3518;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 4)) {
    return 1;
  }
  uint64_t v3 = *(BOOL **)(a1 + 8);
  BOOL result = *(_DWORD *)a3 != 0;
  *uint64_t v3 = *(_DWORD *)a3 == 0;
  return result;
}

uint64_t std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

uint64_t ctu::cf::insert<char const*,BOOL>(__CFDictionary *a1, const __CFString **a2, int a3, uint64_t a4, const __CFAllocator *a5)
{
  key = 0;
  ctu::cf::convert_copy((ctu::cf *)&key, a2, (const char *)0x8000100, a4, a5);
  int v7 = key;
  uint64_t v8 = (void **)MEMORY[0x1E4F1CFD0];
  if (!a3) {
    uint64_t v8 = (void **)MEMORY[0x1E4F1CFC8];
  }
  xpc_object_t v9 = *v8;
  key = *v8;
  if (v7) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  uint64_t v11 = !v10;
  if (v10)
  {
    if (!v9) {
      goto LABEL_13;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v7, v9);
  }
  CFRelease(v9);
LABEL_13:
  if (v7) {
    CFRelease(v7);
  }
  return v11;
}

void sub_1C57D4F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void *___ZNK3ctu20SharedSynchronizableI10CPMSModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t __cxx_global_var_init_78()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void Simulator::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xB0uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  int v7 = (std::__shared_weak_count *)a1[1];
  v8[0] = v6;
  v8[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  Simulator::Simulator((uint64_t)v4, v8);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<Simulator>::shared_ptr[abi:ne180100]<Simulator,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1},void>(a2, v5);
  ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C57D5080(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t Simulator::Simulator(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F20F0BE0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20F0BE0;
  }
  *(void *)a1 = &unk_1F20F35A8;
  *(void *)(a1 + 48) = &unk_1F20F3618;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", "simulator");
  GetABMLogServer(&v10);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("simulator", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F20F37F8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)(a1 + 56) = &unk_1F20F0070;
  int v7 = v11;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)(a1 + 48) = &unk_1F20F3888;
  uint64_t v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_1F20F35A8;
  *(void *)(a1 + 48) = &unk_1F20F3618;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  return a1;
}

void sub_1C57D5370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_1C57D53B4(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

const char *Simulator::getName(Simulator *this)
{
  return "simulator";
}

void Simulator::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  void v11[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_5_8;
  uint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<Simulator>::execute_wrapped(a1 + 15, (uint64_t)v11);
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  uint64_t v8 = operator new(8uLL);
  *uint64_t v8 = a1;
  xpc_object_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  void v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Simulator>::execute_wrapped<Simulator::initialize(dispatch::group_session)::$_0>(Simulator::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Simulator::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<Simulator::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (uint64_t v3 = *(void *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4D0F0];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4D0F0]);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    xpc_object_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v17 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_12;
  }
  HIBYTE(v17) = v7;
  xpc_object_t v9 = __dst;
  if (v7) {
LABEL_12:
  }
    memmove(v9, v6, (size_t)v8);
  *((unsigned char *)v8 + (void)v9) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_4_1;
  void aBlock[4] = v1;
  void aBlock[5] = v3;
  uint64_t v14 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v12 = _Block_copy(aBlock);
  uint64_t v15 = v12;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v15);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__dst[0]);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C57D5724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v24) {
    _Block_release(v24);
  }
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_5:
      std::__shared_weak_count::__release_weak(v23);
      _Unwind_Resume(a1);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void sub_1C57D5780(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, void **a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v12[3] = &__block_descriptor_tmp_26;
      uint64_t v10 = *a2;
      v12[4] = v7;
      xpc_object_t object = v10;
      if (v10)
      {
        xpc_retain(v10);
        uint64_t v11 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        uint64_t v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          long long aBlock = v11;
          ctu::SharedSynchronizable<Simulator>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v12);
          if (aBlock) {
            _Block_release(aBlock);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          goto LABEL_12;
        }
      }
      uint64_t v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4CE90]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v4 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  if ((v4 | 0xE0000000) != 0xE0000270) {
    *(unsigned char *)(v2 + 168) = (v4 | 0xE0000000) == -536870272;
  }
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(void *)(a1 + 48);
  xpc_object_t object = v5;
  xpc_object_t v7 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, 3760250880, &object);
  xpc_release(object);
  xpc_release(v7);
}

void sub_1C57D59E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t Simulator::handleSimulatedPowerNotification_sync(Simulator *this, int a2)
{
  if (a2 != -536870288) {
    *((unsigned char *)this + 168) = a2 == -536870272;
  }
  return 0;
}

void *__copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    xpc_retain(v4);
    uint64_t result = *(void **)(a2 + 48);
    if (!result) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  *(void *)(a1 + 40) = xpc_null_create();
  uint64_t result = *(void **)(a2 + 48);
  if (result) {
LABEL_5:
  }
    uint64_t result = _Block_copy(result);
LABEL_6:
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SimulatorEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SimulatorEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void Simulator::finishInitialization_sync(std::__shared_weak_count **this)
{
  uint64_t v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  size_t v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    xpc_object_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v32 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v32) = v3;
    xpc_object_t v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((unsigned char *)v4 + (void)v5) = 0;
  CFTypeRef cf = 0;
  AppleBasebandManager::create();
  long long v8 = v33;
  long long v33 = 0uLL;
  xpc_object_t v9 = this[20];
  *(_OWORD *)(this + 19) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v33 + 1);
  if (!*((void *)&v33 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v11 = cf;
    if (!cf) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  CFTypeRef v11 = cf;
  if (cf) {
LABEL_15:
  }
    CFRelease(v11);
LABEL_16:
  if (SHIBYTE(v32) < 0) {
    operator delete(__dst[0]);
  }
  xpc_object_t v12 = this[16];
  if (!v12 || (v13 = this[15], (uint64_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  xpc_object_t v16 = (const void *)*MEMORY[0x1E4F4CD28];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4CD28]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    id v19 = operator new(v20 + 1);
    __p[1] = v18;
    unint64_t v29 = v21 | 0x8000000000000000;
    __p[0] = v19;
    goto LABEL_29;
  }
  HIBYTE(v29) = v17;
  id v19 = __p;
  if (v17) {
LABEL_29:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 1174405120;
  void v24[2] = ___ZN9Simulator25finishInitialization_syncEv_block_invoke;
  v24[3] = &__block_descriptor_tmp_9_0;
  v24[4] = this;
  v24[5] = v13;
  uint64_t v25 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v22 = _Block_copy(v24);
  id v23 = this[17];
  if (v23) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  long long aBlock = v22;
  dispatch_object_t object = v23;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[19]);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  std::__shared_weak_count::__release_weak(v15);
}

void sub_1C57D5EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN9Simulator25finishInitialization_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      xpc_object_t v5 = v4;
      if (a1[5] && *(unsigned char *)(v3 + 168))
      {
        uint64_t v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Baseband reset during simulated low power, simulating exit low power", v7, 2u);
        }
        *(unsigned char *)(v3 + 168) = 0;
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

unsigned char *Simulator::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  *uint64_t v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void Simulator::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  int v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  void v6[2] = ___ZN9Simulator8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_10_0;
  xpc_object_t v5 = *a3;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v8 = a2;
  ctu::SharedSynchronizable<Simulator>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void Simulator::~Simulator(Simulator *this)
{
  Simulator::~Simulator(this);

  operator delete(v1);
}

{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;

  *(void *)this = &unk_1F20F35A8;
  *((void *)this + 6) = &unk_1F20F3618;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *((void *)this + 6) = &unk_1F20F37F8;
    MEMORY[0x1C8790F40]((char *)this + 56);
    uint64_t v3 = *((void *)this + 18);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  *((void *)this + 6) = &unk_1F20F37F8;
  MEMORY[0x1C8790F40]((char *)this + 56);
  uint64_t v3 = *((void *)this + 18);
  if (v3) {
LABEL_4:
  }
    dispatch_release(v3);
LABEL_5:
  int v4 = *((void *)this + 17);
  if (v4) {
    dispatch_release(v4);
  }
  xpc_object_t v5 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v6 = *((void *)this + 3);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 4);
    char v8 = (void *)*((void *)this + 3);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      char v8 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v6;
    operator delete(v8);
  }
  xpc_object_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void non-virtual thunk to'Simulator::~Simulator(Simulator *this)
{
}

{
  void *v1;
  uint64_t vars8;

  Simulator::~Simulator((Simulator *)((char *)this - 48));

  operator delete(v1);
}

uint64_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    char v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F37F8;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F37F8;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C57D65B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C57D65D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<Simulator>::shared_ptr[abi:ne180100]<Simulator,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F3838;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C57D66FC(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1}::operator() const(Simulator*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C57D6724(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1}::operator() const(Simulator*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F37F8;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F37F8;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void ctu::SharedSynchronizable<Simulator>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  char v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9SimulatorE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F38C0;
  void block[5] = v5;
  xpc_object_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI9SimulatorE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9SimulatorEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9SimulatorEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<Simulator>::execute_wrapped<Simulator::initialize(dispatch::group_session)::$_0>(Simulator::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Simulator::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<Simulator::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count ****)a1;
  Simulator::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    int v4 = (void *)a1;
  }
  else
  {
    int v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C57D6BC4(_Unwind_Exception *a1)
{
  operator delete(v2);
  int v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_3()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C5767000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<sys::UIObserver>::~PthreadMutexGuardPolicy, &ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void BluetoothManager::create(BluetoothManager *this@<X0>, BluetoothManager **a2@<X8>)
{
  uint64_t v5 = (BluetoothManager *)operator new(0x40uLL);
  BluetoothManager::BluetoothManager(v5, (const char *)this);
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F3960;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  *(void *)long long buf = 0;
  char v8 = (std::__shared_weak_count *)*((void *)v5 + 2);
  if (!v8)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v5 + 1) = v5;
    *((void *)v5 + 2) = v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v5 + 1) = v5;
    *((void *)v5 + 2) = v6;
    std::__shared_weak_count::__release_weak(v8);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_6:
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_7:
  if (*(void *)buf)
  {
    BluetoothManager::~BluetoothManager(*(BluetoothManager **)buf);
    operator delete(v9);
  }
  if (v5 && BluetoothManager::init(v5))
  {
    *a2 = v5;
    a2[1] = (BluetoothManager *)v6;
    return;
  }
  uint64_t v10 = GetOsLogContext()[1];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed to create Bluetooth Manager!", buf, 2u);
    *a2 = 0;
    a2[1] = 0;
    CFTypeRef v11 = v6;
    if (!v6) {
      return;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    CFTypeRef v11 = v6;
    if (!v6) {
      return;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1C57D6E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C57D6E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C57D6E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<BluetoothManager>::~unique_ptr[abi:ne180100]((BluetoothManager **)va);
  _Unwind_Resume(a1);
}

void sub_1C57D6E9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL BluetoothManager::init(BluetoothManager *this)
{
  *((unsigned char *)this + 24) = 1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1BD30]);
  *((void *)this + 4) = v2;
  uint64_t v4 = *((void *)this + 1);
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    id v5 = (id)*((void *)this + 4);
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    id v5 = v2;
    if (v2)
    {
LABEL_3:
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3321888768;
      v12[2] = ___ZN16BluetoothManager4initEv_block_invoke;
      v12[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE_e5_v8__0l;
      v12[4] = this;
      void v12[5] = v4;
      uint64_t v13 = v3;
      uint64_t v6 = v5;
      if (v3)
      {
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v6 = (void *)*((void *)this + 4);
      }
      [v6 setBluetoothStateChangedHandler:v12];
      uint64_t v7 = (void *)*((void *)this + 4);
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3321888768;
      void v10[2] = ___ZN16BluetoothManager4initEv_block_invoke_3;
      v10[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE_e17_v16__0__NSError_8l;
      v10[4] = this;
      v10[5] = v4;
      CFTypeRef v11 = v3;
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      [v7 activateWithCompletion:v10];
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v13)
      {
        std::__shared_weak_count::__release_weak(v13);
        if (!v3) {
          return v5 != 0;
        }
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  char v8 = *(NSObject **)this;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v8, OS_LOG_TYPE_ERROR, "Failed to create BluetoothManager interface", buf, 2u);
    if (!v3) {
      return v5 != 0;
    }
    goto LABEL_15;
  }
LABEL_14:
  if (v3) {
LABEL_15:
  }
    std::__shared_weak_count::__release_weak(v3);
  return v5 != 0;
}

void sub_1C57D706C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    xpc_object_t v24 = a22;
    if (!a22)
    {
LABEL_3:
      if (!v22) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    xpc_object_t v24 = a22;
    if (!a22) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v24);
  if (!v22) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(exception_object);
}

void BluetoothManager::BluetoothManager(BluetoothManager *this, const char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_8:
  }
    memcpy(p_dst, __s, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  xpc_object_t v9 = std::string::append(&__dst, ".", 1uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  CFTypeRef v11 = std::string::append(&v15, "BluetoothManager", 0x10uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v13);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_17:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_18:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
LABEL_14:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
LABEL_15:
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
}

void sub_1C57D7248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void BluetoothManager::~BluetoothManager(BluetoothManager *this)
{
  uint64_t v2 = *((void *)this + 5);
  for (uint64_t i = *((void *)this + 6); i != v2; i -= 16)
  {
    size_t v4 = *(NSObject **)(i - 8);
    if (v4) {
      dispatch_release(v4);
    }
    std::string::size_type v5 = *(const void **)(i - 16);
    if (v5) {
      _Block_release(v5);
    }
  }
  *((void *)this + 6) = v2;
  [*((id *)this + 4) invalidate];
  uint64_t v6 = *((void *)this + 5);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 6);
    uint64_t v8 = (void *)*((void *)this + 5);
    if (v7 != v6)
    {
      do
      {
        xpc_object_t v9 = *(NSObject **)(v7 - 8);
        if (v9) {
          dispatch_release(v9);
        }
        long long v10 = *(const void **)(v7 - 16);
        if (v10) {
          _Block_release(v10);
        }
        v7 -= 16;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v6;
    operator delete(v8);
  }
  CFTypeRef v11 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }

  JUMPOUT(0x1C8790F80);
}

void ___ZN16BluetoothManager4initEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    unint64_t v3 = (os_log_t *)a1[4];
    size_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      std::string::size_type v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        uint64_t v7 = *v3;
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t v8 = 0;
          _os_log_debug_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEBUG, "#D BluetoothManager Power Change Event", v8, 2u);
        }
        BluetoothManager::notifyClients((id *)v3);
      }
    }
  }
}

void BluetoothManager::notifyClients(id *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [this[4] bluetoothState];
  *((unsigned char *)this + 24) = v2 == 5;
  unint64_t v3 = *this;
  if (os_log_type_enabled((os_log_t)*this, OS_LOG_TYPE_DEFAULT))
  {
    size_t v4 = "Off";
    if (v2 == 5) {
      size_t v4 = "On";
    }
    LODWORD(v13) = 136315138;
    *(void *)((char *)&v13 + 4) = v4;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Notifying BT Power: %s", (uint8_t *)&v13, 0xCu);
  }
  std::string::size_type v5 = (char *)this[5];
  uint64_t v6 = (char *)this[6];
  if (v5 != v6)
  {
    while (!*(void *)v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *((void *)v5 + 1);
      if (v8) {
        goto LABEL_10;
      }
LABEL_11:
      char v9 = *((unsigned char *)this + 24);
      if (!v7)
      {
        CFTypeRef v11 = 0;
        *(void *)&long long v13 = MEMORY[0x1E4F143A8];
        *((void *)&v13 + 1) = 3321888768;
        uint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        std::string v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
LABEL_17:
        long long v12 = 0;
        goto LABEL_18;
      }
      long long v10 = _Block_copy(v7);
      CFTypeRef v11 = v10;
      *(void *)&long long v13 = MEMORY[0x1E4F143A8];
      *((void *)&v13 + 1) = 3321888768;
      uint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
      std::string v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      if (!v10) {
        goto LABEL_17;
      }
      long long v12 = _Block_copy(v10);
LABEL_18:
      long long aBlock = v12;
      char v17 = v9;
      dispatch_async(v8, &v13);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v11) {
        _Block_release(v11);
      }
      if (v8) {
        dispatch_release(v8);
      }
      if (v7) {
        _Block_release(v7);
      }
      v5 += 16;
      if (v5 == v6) {
        return;
      }
    }
    uint64_t v7 = _Block_copy(*(const void **)v5);
    uint64_t v8 = *((void *)v5 + 1);
    if (!v8) {
      goto LABEL_11;
    }
LABEL_10:
    dispatch_retain(v8);
    goto LABEL_11;
  }
}

void sub_1C57D76A0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN16BluetoothManager4initEv_block_invoke_3(void *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      if (a2)
      {
        char v9 = *(NSObject **)v5;
        if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)CFTypeRef v11 = 0;
          _os_log_error_impl(&dword_1C5767000, v9, OS_LOG_TYPE_ERROR, "Failed to activate BT Controller", v11, 2u);
        }
      }
      else
      {
        long long v10 = *(void (**)(void))([*(id *)(v5 + 32) bluetoothStateChangedHandler] + 16);
        v10();
      }
    }
  }
}

uint64_t BluetoothManager::getBTState(BluetoothManager *this)
{
  return *((unsigned __int8 *)this + 24);
}

void BluetoothManager::registerCallback(BluetoothManager *this, void **a2)
{
  size_t v4 = (void *)*((void *)this + 6);
  if ((unint64_t)v4 >= *((void *)this + 7))
  {
    uint64_t v7 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>((void *)this + 5, (uint64_t)a2);
  }
  else
  {
    uint64_t v5 = *a2;
    if (*a2) {
      uint64_t v5 = _Block_copy(v5);
    }
    uint64_t v6 = a2[1];
    *size_t v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t v7 = v4 + 2;
  }
  *((void *)this + 6) = v7;

  BluetoothManager::notifyClients((id *)this);
}

void *std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[1] - *a1;
  unint64_t v4 = (v3 >> 4) + 1;
  if (v4 >> 60) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (!v7)
  {
    uint64_t v8 = 0;
    char v9 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v7 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v8 = (char *)operator new(16 * v7);
  char v9 = *(void **)a2;
  if (*(void *)a2) {
LABEL_12:
  }
    char v9 = _Block_copy(v9);
LABEL_13:
  long long v10 = *(NSObject **)(a2 + 8);
  CFTypeRef v11 = &v8[16 * (v3 >> 4)];
  *(void *)CFTypeRef v11 = v9;
  *((void *)v11 + 1) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  long long v12 = &v8[16 * v7];
  long long v13 = v11 + 16;
  uint64_t v14 = (char *)*a1;
  std::string v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0) {
      goto LABEL_17;
    }
    id v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    BOOL v24 = &v8[v3 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    BOOL v25 = !v24;
    if (v23 - 16 < &v8[v3 - 8] && &v8[v3 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8) {
      goto LABEL_17;
    }
    if (v25) {
      goto LABEL_17;
    }
    uint64_t v27 = (v16 >> 4) + 1;
    uint64_t v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    char v17 = &v11[-v28];
    unint64_t v29 = &v15[-v28];
    unsigned int v30 = (double *)(v11 - 32);
    char v31 = (const double *)(v15 - 32);
    uint64_t v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      float64x2x2_t v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)char v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    CFTypeRef v11 = v17;
    std::string v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      char v17 = v11;
      do
      {
        long long v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(void *)std::string v15 = 0;
        *((void *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    std::string v15 = (char *)*a1;
    id v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      uint64_t v20 = *((void *)v19 - 1);
      if (v20) {
        dispatch_release(v20);
      }
      uint64_t v21 = (const void *)*((void *)v19 - 2);
      if (v21) {
        _Block_release(v21);
      }
      v19 -= 16;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

BluetoothManager **std::unique_ptr<BluetoothManager>::~unique_ptr[abi:ne180100](BluetoothManager **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    BluetoothManager::~BluetoothManager(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<BluetoothManager *,std::shared_ptr<BluetoothManager>::__shared_ptr_default_delete<BluetoothManager,BluetoothManager>,std::allocator<BluetoothManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BluetoothManager *,std::shared_ptr<BluetoothManager>::__shared_ptr_default_delete<BluetoothManager,BluetoothManager>,std::allocator<BluetoothManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(BluetoothManager **)(a1 + 24);
  if (v1)
  {
    BluetoothManager::~BluetoothManager(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<BluetoothManager *,std::shared_ptr<BluetoothManager>::__shared_ptr_default_delete<BluetoothManager,BluetoothManager>,std::allocator<BluetoothManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599E3E9) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599E3E9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599E3E9)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599E3E9 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

const char *IOKitEventNotifier::getName(IOKitEventNotifier *this)
{
  return "iokit.event";
}

uint64_t IOKitEventNotifier::setMESAQuality(uint64_t a1)
{
  if (*(void *)(a1 + 72)) {
    ctu::iokit::Controller::setMesaQuality();
  }
  return 0;
}

void IOKitEventNotifier::start(IOKitEventNotifier *this)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 9)) {
    return;
  }
  uint64_t v2 = (const void *)*((void *)this + 11);
  if (!v2 || !*((void *)this + 12)) {
    goto LABEL_12;
  }
  uint64_t v3 = _Block_copy(v2);
  unint64_t v4 = *((void *)this + 12);
  long long aBlock = v3;
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  char v5 = ctu::iokit::Controller::setAccessoryCallback();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if ((v5 & 1) == 0 && (uint64_t v6 = *((void *)this + 5), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v6, OS_LOG_TYPE_ERROR, "Failed to setup accessory callback", buf, 2u);
    unint64_t v7 = (const void *)*((void *)this + 13);
    if (!v7) {
      goto LABEL_23;
    }
  }
  else
  {
LABEL_12:
    unint64_t v7 = (const void *)*((void *)this + 13);
    if (!v7) {
      goto LABEL_23;
    }
  }
  if (*((void *)this + 14))
  {
    uint64_t v8 = _Block_copy(v7);
    char v9 = *((void *)this + 14);
    uint64_t v41 = v8;
    uint64_t v42 = v9;
    if (v9) {
      dispatch_retain(v9);
    }
    char v10 = ctu::iokit::Controller::setDisplayCallback();
    if (v42) {
      dispatch_release(v42);
    }
    if (v41) {
      _Block_release(v41);
    }
    if ((v10 & 1) == 0)
    {
      CFTypeRef v11 = *((void *)this + 5);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1C5767000, v11, OS_LOG_TYPE_ERROR, "Failed to setup display callback", buf, 2u);
      }
    }
  }
LABEL_23:
  if (!*((void *)this + 15) || !*((void *)this + 16)) {
    goto LABEL_39;
  }
  int v12 = ctu::iokit::Controller::acquireMesaService(*((ctu::iokit::Controller **)this + 9));
  long long v13 = *((void *)this + 5);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = "failed";
    if (v12) {
      uint64_t v14 = "succeeded";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v46 = v14;
    _os_log_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEFAULT, "#I Acquire MESA service %s", buf, 0xCu);
  }
  if (v12)
  {
    std::string v15 = (void *)*((void *)this + 15);
    if (v15) {
      std::string v15 = _Block_copy(v15);
    }
    unint64_t v16 = *((void *)this + 16);
    CFTypeID v39 = v15;
    std::string v40 = v16;
    if (v16) {
      dispatch_retain(v16);
    }
    ctu::iokit::Controller::setMesaCallback();
    if (v40) {
      dispatch_release(v40);
    }
    if (v39) {
      _Block_release(v39);
    }
LABEL_39:
    long long v18 = (const void *)*((void *)this + 17);
    if (v18) {
      goto LABEL_40;
    }
    goto LABEL_50;
  }
  char v17 = *((void *)this + 5);
  if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
    goto LABEL_39;
  }
  *(_WORD *)long long buf = 0;
  _os_log_error_impl(&dword_1C5767000, v17, OS_LOG_TYPE_ERROR, "Failed to setup MESA callback", buf, 2u);
  long long v18 = (const void *)*((void *)this + 17);
  if (v18)
  {
LABEL_40:
    if (*((void *)this + 18))
    {
      id v19 = _Block_copy(v18);
      uint64_t v20 = *((void *)this + 18);
      std::string v37 = v19;
      uint64_t v38 = v20;
      if (v20) {
        dispatch_retain(v20);
      }
      char v21 = ctu::iokit::Controller::setPowerSourceCallback();
      if (v38) {
        dispatch_release(v38);
      }
      if (v37) {
        _Block_release(v37);
      }
      if ((v21 & 1) == 0)
      {
        uint64_t v22 = *((void *)this + 5);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_1C5767000, v22, OS_LOG_TYPE_ERROR, "Failed to setup power source", buf, 2u);
        }
      }
    }
  }
LABEL_50:
  if (*((void *)this + 19) && *((void *)this + 20) || *((void *)this + 21) && *((void *)this + 22))
  {
    int v23 = ctu::iokit::Controller::setupCameraService(*((ctu::iokit::Controller **)this + 9));
    BOOL v24 = *((void *)this + 5);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v25 = "failed";
      if (v23) {
        BOOL v25 = "succeeded";
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v46 = v25;
      _os_log_impl(&dword_1C5767000, v24, OS_LOG_TYPE_DEFAULT, "#I Setup camera service is %s", buf, 0xCu);
    }
    if (v23)
    {
      id v26 = (const void *)*((void *)this + 19);
      if (v26 && *((void *)this + 20))
      {
        uint64_t v27 = _Block_copy(v26);
        uint64_t v28 = *((void *)this + 20);
        uint64_t v35 = v27;
        xpc_object_t v36 = v28;
        if (v28) {
          dispatch_retain(v28);
        }
        ctu::iokit::Controller::setFaceIDCallback();
        if (v36) {
          dispatch_release(v36);
        }
        if (v35) {
          _Block_release(v35);
        }
      }
      unint64_t v29 = (const void *)*((void *)this + 21);
      if (v29 && *((void *)this + 22))
      {
        unsigned int v30 = _Block_copy(v29);
        char v31 = *((void *)this + 22);
        float64x2x2_t v33 = v30;
        xpc_object_t v34 = v31;
        if (v31) {
          dispatch_retain(v31);
        }
        ctu::iokit::Controller::setFrontCameraCallback();
        if (v34) {
          dispatch_release(v34);
        }
        if (v33) {
          _Block_release(v33);
        }
      }
    }
    else
    {
      uint64_t v32 = *((void *)this + 5);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1C5767000, v32, OS_LOG_TYPE_ERROR, "Failed to setup camera service callback", buf, 2u);
      }
    }
  }
}

void sub_1C57D8138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitAccessoryParameter)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitDisplayLink)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitMesaEvent)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitPowerSource)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitFaceIDState)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitFrontCameraState)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void IOKitEventNotifier::registerCallbackAccessory(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    unint64_t v4 = _Block_copy(v4);
  }
  char v5 = *(const void **)(a1 + 88);
  *(void *)(a1 + 88) = v4;
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  unint64_t v7 = *(NSObject **)(a1 + 96);
  *(void *)(a1 + 96) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void IOKitEventNotifier::registerCallbackVideo(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    unint64_t v4 = _Block_copy(v4);
  }
  char v5 = *(const void **)(a1 + 104);
  *(void *)(a1 + 104) = v4;
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  unint64_t v7 = *(NSObject **)(a1 + 112);
  *(void *)(a1 + 112) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void IOKitEventNotifier::registerCallbackMesa(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    unint64_t v4 = _Block_copy(v4);
  }
  char v5 = *(const void **)(a1 + 120);
  *(void *)(a1 + 120) = v4;
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  unint64_t v7 = *(NSObject **)(a1 + 128);
  *(void *)(a1 + 128) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void IOKitEventNotifier::registerCallbackPowerSource(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    unint64_t v4 = _Block_copy(v4);
  }
  char v5 = *(const void **)(a1 + 136);
  *(void *)(a1 + 136) = v4;
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  unint64_t v7 = *(NSObject **)(a1 + 144);
  *(void *)(a1 + 144) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void IOKitEventNotifier::registerCallbackFaceID(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    unint64_t v4 = _Block_copy(v4);
  }
  char v5 = *(const void **)(a1 + 152);
  *(void *)(a1 + 152) = v4;
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  unint64_t v7 = *(NSObject **)(a1 + 160);
  *(void *)(a1 + 160) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void IOKitEventNotifier::registerCallbackFrontCamera(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    unint64_t v4 = _Block_copy(v4);
  }
  char v5 = *(const void **)(a1 + 168);
  *(void *)(a1 + 168) = v4;
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  unint64_t v7 = *(NSObject **)(a1 + 176);
  *(void *)(a1 + 176) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

uint64_t IOKitEventNotifier::queryPowerSource(IOKitEventNotifier *this)
{
  uint64_t v1 = (ctu::iokit::Controller *)*((void *)this + 9);
  if (v1) {
    return ctu::iokit::Controller::queryPowerSource(v1);
  }
  else {
    return 1;
  }
}

uint64_t IOKitEventNotifier::IOKitEventNotifier(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F20F3A80;
  char v11 = 11;
  strcpy((char *)__p, "iokit.event");
  ctu::LoggerCommonBase::LoggerCommonBase();
  *(void *)(a1 + 8) = &unk_1F20F0070;
  *(void *)(a1 + 56) = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 64) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &unk_1F20F39E0;
  unint64_t v7 = (std::__shared_weak_count *)a2[1];
  char v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::iokit::Controller::create();
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 184) = a3;
  return a1;
}

void sub_1C57D8844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  *uint64_t v2 = v4;
  MEMORY[0x1C8790F40](v3);
  _Unwind_Resume(a1);
}

void sub_1C57D8864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IOKitEventNotifier::shutdown(IOKitEventNotifier *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (__CFRunLoop *)*((void *)this + 23);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = (__CFRunLoop *)*((void *)this + 23);
    if (!v3) {
      return;
    }
  }
  if (CFRunLoopIsWaiting(v3))
  {
    uint64_t v4 = dispatch_group_create();
    char v5 = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v5);
    }
    uint64_t v6 = (__CFRunLoop *)*((void *)this + 23);
    unint64_t v7 = (const void *)*MEMORY[0x1E4F1D418];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN18IOKitEventNotifier8shutdownEv_block_invoke;
    block[3] = &__block_descriptor_tmp_27;
    dispatch_group_t group = v5;
    if (v5)
    {
      dispatch_retain(v5);
      dispatch_group_enter(group);
    }
    CFRunLoopPerformBlock(v6, v7, block);
    CFRunLoopWakeUp(*((CFRunLoopRef *)this + 23));
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    if (v5)
    {
      dispatch_group_leave(v5);
      dispatch_release(v5);
      dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v5);
    }
    else
    {
      dispatch_group_wait(0, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
}

void sub_1C57D8A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
    dispatch_release(v14);
  }
  _Unwind_Resume(exception_object);
}

void IOKitEventNotifier::~IOKitEventNotifier(IOKitEventNotifier *this)
{
  *(void *)this = &unk_1F20F39E0;
  IOKitEventNotifier::shutdown(this);
  uint64_t v2 = *((void *)this + 22);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 21);
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = *((void *)this + 20);
  if (v4) {
    dispatch_release(v4);
  }
  char v5 = (const void *)*((void *)this + 19);
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = *((void *)this + 18);
  if (v6) {
    dispatch_release(v6);
  }
  unint64_t v7 = (const void *)*((void *)this + 17);
  if (v7) {
    _Block_release(v7);
  }
  uint64_t v8 = *((void *)this + 16);
  if (v8) {
    dispatch_release(v8);
  }
  char v9 = (const void *)*((void *)this + 15);
  if (v9) {
    _Block_release(v9);
  }
  char v10 = *((void *)this + 14);
  if (v10) {
    dispatch_release(v10);
  }
  char v11 = (const void *)*((void *)this + 13);
  if (v11) {
    _Block_release(v11);
  }
  int v12 = *((void *)this + 12);
  if (v12) {
    dispatch_release(v12);
  }
  long long v13 = (const void *)*((void *)this + 11);
  if (v13) {
    _Block_release(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  *(void *)this = &unk_1F20F3A80;
  MEMORY[0x1C8790F40]((char *)this + 8);
}

{
  void *v1;
  uint64_t vars8;

  IOKitEventNotifier::~IOKitEventNotifier(this);

  operator delete(v1);
}

void IOKitEventNotifier::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = operator new(0xD8uLL);
  unint64_t v7 = v6;
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1F20F3AC0;
  uint64_t v8 = v6 + 3;
  uint64_t v9 = *a1;
  char v10 = (std::__shared_weak_count *)a1[1];
  v11[0] = v9;
  v11[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IOKitEventNotifier::IOKitEventNotifier((uint64_t)(v6 + 3), v11, a2);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  *a3 = v8;
  a3[1] = v7;
}

void sub_1C57D8CD8(_Unwind_Exception *a1)
{
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t IOKitEventNotifier::getAccessoryPrimaryPortNumber(ctu::iokit::Controller **this)
{
  return ctu::iokit::Controller::getAccessoryPrimaryPortNumber(this[9]);
}

uint64_t ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "iokit.event");
}

uint64_t ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F3A80;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F3A80;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_emplace<IOKitEventNotifier>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F3AC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IOKitEventNotifier>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F3AC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<IOKitEventNotifier>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__construct_at[abi:ne180100]<IOKitEventNotifier,std::shared_ptr<ctu::LogServer> &,__CFRunLoop *&,IOKitEventNotifier*>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IOKitEventNotifier::IOKitEventNotifier(a1, v6, *a3);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C57D8F4C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void BootControllerLegacy::BootControllerLegacy(BootControllerLegacy *this)
{
  BootController::BootController(this);
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)uint64_t v1 = &unk_1F20F3B10;
  *(unsigned char *)(v1 + 104) = 1;
}

{
  uint64_t v1;

  BootController::BootController(this);
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)uint64_t v1 = &unk_1F20F3B10;
  *(unsigned char *)(v1 + 104) = 1;
}

BOOL BootControllerLegacy::prepare(capabilities::radio *a1, std::string *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(__p, 170, sizeof(__p));
  capabilities::radio::personalizedFirmwarePath((uint64_t *)__p, a1);
  v4.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v12.st_blkstd::string::size_type size = v4;
  *(timespec *)v12.st_qspare = v4;
  v12.st_birthtimespec = v4;
  *(timespec *)&v12.st_std::string::size_type size = v4;
  v12.st_mtimespec = v4;
  v12.st_ctimespec = v4;
  *(timespec *)&v12.st_uid = v4;
  v12.st_atimespec = v4;
  *(timespec *)&v12.st_dev = v4;
  if (SHIBYTE(__p[2]) >= 0) {
    char v5 = __p;
  }
  else {
    char v5 = (void **)__p[0];
  }
  int v6 = stat((const char *)v5, &v12);
  if (v6)
  {
    unint64_t v7 = *((void *)a1 + 5);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      char v10 = __p;
      if (SHIBYTE(__p[2]) < 0) {
        char v10 = (void **)__p[0];
      }
      v12.st_dev = 136315138;
      *(void *)&v12.st_mode = v10;
      _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "Failed to find the firmware in \"%s\"", (uint8_t *)&v12, 0xCu);
    }
    capabilities::trace::allowed((capabilities::trace *)v8);
    std::string::__assign_external(a2, "Baseband Firmware Path Not Found", 0x20uLL);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return v6 == 0;
}

void sub_1C57D9164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BootControllerLegacy::bootModem(uint64_t a1, uint64_t a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
  timespec v4 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  uint64_t v5 = xmmword_1EBBDD1B0;
  if (!(void)xmmword_1EBBDD1B0)
  {
    ctu::XpcJetsamAssertion::create_default_global((uint64_t *)values, v4);
    long long v6 = *(_OWORD *)values;
    values[0] = 0;
    values[1] = 0;
    unint64_t v7 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD1B0 + 1);
    xmmword_1EBBDD1B0 = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    BOOL v8 = (std::__shared_weak_count *)values[1];
    if (values[1] && !atomic_fetch_add((atomic_ullong *volatile)values[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v5 = xmmword_1EBBDD1B0;
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD1B0 + 1);
  *(void *)long long buf = v5;
  *(void *)&uint8_t buf[8] = *((void *)&xmmword_1EBBDD1B0 + 1);
  if (*((void *)&xmmword_1EBBDD1B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EBBDD1B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  char v53 = 13;
  strcpy((char *)__p, "Booting modem");
  ctu::XpcJetsamAssertion::createActivity();
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  BYTE5(v51[2]) = -86;
  HIWORD(v51[2]) = 5290;
  strcpy((char *)v51, "boot::debugArguments");
  if (*(char *)(a2 + 23) < 0)
  {
    *(void *)(a2 + 8) = 7;
    char v10 = *(char **)a2;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = 7;
    char v10 = (char *)a2;
  }
  strcpy(v10, "unknown");
  CFTypeRef cf = 0;
  char v11 = (const void *)BBUpdaterExtremeCreate();
  if (!v11)
  {
    std::string::__assign_external((std::string *)a2, "failed creating BBUpdaterExtremeRef", 0x23uLL);
    id v19 = (unsigned char *)(a1 + 104);
    if (*(unsigned char *)(a1 + 104)) {
      goto LABEL_78;
    }
    goto LABEL_61;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_3, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_3))
  {
    __cxa_atexit((void (*)(void *))std::weak_ptr<BootControllerLegacy>::~weak_ptr, &qword_1EBBDD508, &dword_1C5767000);
    __cxa_guard_release(&_MergedGlobals_3);
  }
  stat v12 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v12 || (v13 = *(void *)(a1 + 88), (uint64_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::string v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v16 = (std::__shared_weak_count *)qword_1EBBDD510;
  qword_1EBBDD508 = v13;
  qword_1EBBDD510 = (uint64_t)v15;
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    long long v18 = (uint64_t (***)(void *, void))operator new(0x18uLL);
    MEMORY[0x1C8791170](v18, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    char v17 = operator new(0x20uLL);
    *char v17 = &unk_1F20F3BE0;
    v17[1] = 0;
    xpc_object_t v17[2] = 0;
    void v17[3] = v18;
    uint64_t v20 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v18;
    off_1EBBDD0C8 = v17;
    if (!v20)
    {
      values[0] = v18;
      values[1] = v17;
      goto LABEL_34;
    }
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  long long v18 = (uint64_t (***)(void *, void))qword_1EBBDD0C0;
  char v17 = off_1EBBDD0C8;
  values[0] = (void *)qword_1EBBDD0C0;
  values[1] = off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_34:
  }
    atomic_fetch_add_explicit(v17 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (SHIBYTE(v51[2]) >= 0) {
    char v21 = (const char *)v51;
  }
  else {
    char v21 = (const char *)v51[0];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, v21);
  uint64_t v22 = (__CFString *)(**v18)(v18, *(void *)buf);
  int v23 = v22;
  if (v22)
  {
    CFTypeID v24 = CFGetTypeID(v22);
    CFTypeID TypeID = CFStringGetTypeID();
    CFRelease(v23);
    MEMORY[0x1C8791110](buf);
    if (v24 == TypeID)
    {
      id v26 = (std::__shared_weak_count *)values[1];
      if (!values[1]) {
        goto LABEL_46;
      }
      goto LABEL_44;
    }
  }
  else
  {
    MEMORY[0x1C8791110](buf);
  }
  int v23 = @"-l 0xffffffdf -v 0 -N";
  id v26 = (std::__shared_weak_count *)values[1];
  if (!values[1]) {
    goto LABEL_46;
  }
LABEL_44:
  if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_46:
  uint64_t v49 = v23;
  CFRetain(v23);
  int valuePtr = 1;
  CFAllocatorRef v27 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v28 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFNumberRef v47 = v28;
  uint64_t v29 = *MEMORY[0x1E4F1CFD0];
  values[0] = *(void **)MEMORY[0x1E4F1CFD0];
  values[1] = v28;
  if (!*(unsigned char *)(a1 + 80)) {
    uint64_t v29 = *MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef v57 = v23;
  uint64_t v58 = v29;
  CFDictionaryRef v30 = CFDictionaryCreate(v27, (const void **)&BootControllerLegacy::bootModem(std::string &)::keys, (const void **)values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v46 = v30;
  int v31 = BBUpdaterSetOptions();
  if (!v31)
  {
    memset(buf, 0, sizeof(buf));
    unsigned int v60 = 0;
    ctu::cf::assign();
    *(_OWORD *)unint64_t v44 = *(_OWORD *)buf;
    uint64_t v45 = v60;
    uint64_t v32 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v42 = v44;
      if (SHIBYTE(v45) < 0) {
        uint64_t v42 = (CFTypeRef *)v44[0];
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v42;
      _os_log_error_impl(&dword_1C5767000, v32, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      {
LABEL_54:
        *(_OWORD *)a2 = *(_OWORD *)v44;
        *(void *)(a2 + 16) = v45;
        CFRelease(cf);
        CFTypeRef cf = 0;
        if (!v30) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }
    }
    else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
      goto LABEL_54;
    }
    operator delete(*(void **)a2);
    goto LABEL_54;
  }
  if (v30) {
LABEL_55:
  }
    CFRelease(v30);
LABEL_56:
  if (v28) {
    CFRelease(v28);
  }
  CFRelease(v23);
  id v19 = (unsigned char *)(a1 + 104);
  if (!*(unsigned char *)(a1 + 104))
  {
LABEL_61:
    if (TelephonyBasebandPowerOnModem())
    {
      v44[0] = 0;
      goto LABEL_63;
    }
    if (*(char *)(a2 + 23) < 0)
    {
      *(void *)(a2 + 8) = 21;
      std::string v37 = *(char **)a2;
    }
    else
    {
      *(unsigned char *)(a2 + 23) = 21;
      std::string v37 = (char *)a2;
    }
    strcpy(v37, "failed power on modem");
LABEL_78:
    v44[0] = 0;
    goto LABEL_79;
  }
  v44[0] = 0;
  if (!v31)
  {
LABEL_79:
    uint64_t v38 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0) {
        CFTypeID v39 = (void *)a2;
      }
      else {
        CFTypeID v39 = *(void **)a2;
      }
      LODWORD(values[0]) = 136446210;
      *(void **)((char *)values + 4) = v39;
      _os_log_impl(&dword_1C5767000, v38, OS_LOG_TYPE_DEFAULT, "#I boot failed due to %{public}s", (uint8_t *)values, 0xCu);
    }
    uint64_t v35 = 0;
    unsigned char *v19 = 0;
    CFTypeRef v36 = v44[0];
    if (v44[0]) {
      goto LABEL_85;
    }
    goto LABEL_86;
  }
LABEL_63:
  int v33 = BBUpdaterExecCommand();
  if (!v33 && cf)
  {
    values[0] = 0;
    values[1] = 0;
    CFTypeRef v57 = 0;
    ctu::cf::assign();
    *(_OWORD *)long long buf = *(_OWORD *)values;
    unsigned int v60 = v57;
    xpc_object_t v34 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      unsigned int v43 = buf;
      if (SHIBYTE(v60) < 0) {
        unsigned int v43 = *(uint8_t **)buf;
      }
      LODWORD(values[0]) = 136315138;
      *(void **)((char *)values + 4) = v43;
      _os_log_error_impl(&dword_1C5767000, v34, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)values, 0xCu);
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_68;
      }
    }
    else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_68:
      *(_OWORD *)a2 = *(_OWORD *)buf;
      *(void *)(a2 + 16) = v60;
      CFRelease(cf);
      CFTypeRef cf = 0;
      goto LABEL_79;
    }
    operator delete(*(void **)a2);
    goto LABEL_68;
  }
  if (!v33) {
    goto LABEL_79;
  }
  if (!v44[0])
  {
    std::string::__assign_external((std::string *)a2, "BBUpdaterExecCommand failed returning output", 0x2CuLL);
    goto LABEL_79;
  }
  BootControllerLegacy::printOutput((BootControllerLegacy *)a1, v44[0]);
  values[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  values[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)values, (const __CFDictionary *)v44[0]);
  if ((ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)values, @"done") & 1) == 0)
  {
    std::string::__assign_external((std::string *)a2, "output did not return done", 0x1AuLL);
    MEMORY[0x1C8791160](values);
    goto LABEL_79;
  }
  MEMORY[0x1C8791160](values);
  *(unsigned char *)(a1 + 80) = 0;
  uint64_t v35 = 1;
  unsigned char *v19 = 0;
  CFTypeRef v36 = v44[0];
  if (v44[0])
  {
LABEL_85:
    CFRelease(v36);
    v44[0] = 0;
  }
LABEL_86:
  if (v11) {
    CFRelease(v11);
  }
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  std::string v40 = (std::__shared_weak_count *)v55;
  if (v55 && !atomic_fetch_add((atomic_ullong *volatile)(v55 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  return v35;
}

void sub_1C57D9AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void BootControllerLegacy::handleError(BootControllerLegacy *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  memset(a2, 170, 24);
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  ctu::cf::assign();
  *a2 = 0uLL;
  *((void *)a2 + 2) = v8;
  uint64_t v5 = *((void *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v6 = a2;
    }
    else {
      long long v6 = *(_OWORD **)a2;
    }
    LODWORD(v7) = 136315138;
    *(void *)((char *)&v7 + 4) = v6;
    _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v7, 0xCu);
  }
}

void sub_1C57D9D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void BootControllerLegacy::printOutput(BootControllerLegacy *this, CFTypeRef cf)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFStringRef v3 = CFCopyDescription(cf);
  uint64_t v7 = 0;
  CFStringRef v8 = v3;
  __p[0] = 0;
  __p[1] = 0;
  ctu::cf::assign();
  timespec v4 = *((void *)this + 5);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    if ((SHIBYTE(v7) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(__p[0]);
    if (!v3) {
      return;
    }
    goto LABEL_9;
  }
  uint64_t v5 = __p;
  if (v7 < 0) {
    uint64_t v5 = (void **)__p[0];
  }
  *(_DWORD *)long long buf = 136315138;
  char v10 = v5;
  _os_log_error_impl(&dword_1C5767000, v4, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  if (SHIBYTE(v7) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  if (v3) {
LABEL_9:
  }
    CFRelease(v3);
}

void sub_1C57D9E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void BootControllerLegacy::~BootControllerLegacy(BootControllerLegacy *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1F20F5788;
  CFStringRef v3 = (const void *)*((void *)this + 9);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)this = &unk_1F20F3C48;
  MEMORY[0x1C8790F40]((char *)this + 8);
}

{
  std::__shared_weak_count *v2;
  const void *v3;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1F20F5788;
  CFStringRef v3 = (const void *)*((void *)this + 9);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)this = &unk_1F20F3C48;
  MEMORY[0x1C8790F40]((char *)this + 8);

  operator delete(this);
}

uint64_t ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "boot.ctrl");
}

uint64_t ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  CFStringRef v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t std::weak_ptr<BootControllerLegacy>::~weak_ptr(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F3C48;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F3C48;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__on_zero_shared(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v1 = (void *)MEMORY[0x1C8791180]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599E5C7) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599E5C7 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599E5C7)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599E5C7 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t __cxx_global_var_init_4()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_30()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1C5767000);
  }
  return result;
}

const char *DeviceHistoryDB::getName(DeviceHistoryDB *this)
{
  return "DeviceHistroyDB";
}

void DeviceHistoryDB::DeviceHistoryDB(DeviceHistoryDB *this)
{
  *(void *)this = &unk_1F20F3C88;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v5, "com.apple.telephony.abm", "DeviceHistroyDB");
  GetABMLogServer(&v3);
  ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(this, (uint64_t)v5, &v3);
  uint64_t v2 = v4;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v5);
  *(void *)this = &unk_1F20F3C88;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  DeviceHistoryDB::initFromDisk(this);
}

void sub_1C57DA500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<_DeviceHistoryItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *uint64_t v3 = &unk_1F20F3D30;
  MEMORY[0x1C8790F40](v3 + 1);
  _Unwind_Resume(a1);
}

void sub_1C57DA53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C57DA558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void *ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_1F20F3D30;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_1F20F0070;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_1C57DA630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void DeviceHistoryDB::initFromDisk(DeviceHistoryDB *this)
{
  std::string v37 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v2 = off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(&__dst);
    long long v3 = __dst;
    long long __dst = 0uLL;
    timespec v4 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&__dst + 1);
    if (*((void *)&__dst + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD340;
  }
  *((void *)&v33[1] + 1) = v2;
  *(void *)&v33[2] = *(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  long long v6 = (const void *)*MEMORY[0x1E4F4C438];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C438]);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = v8;
    *(void *)CFNumberRef v28 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_18;
  }
  v28[7] = v7;
  p_dst = &__dst;
  if (v7) {
LABEL_18:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  Preferences::getPreference<__CFArray const*>((uint64_t (***)(void, uint64_t))v2, (const char *)&__dst, &v37);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  if ((v28[7] & 0x80000000) != 0) {
    operator delete((void *)__dst);
  }
  stat v12 = *(std::__shared_weak_count **)&v33[2];
  if (*(void *)&v33[2]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v33[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = v37;
    CFTypeRef v36 = v37;
    if (!v37) {
      goto LABEL_77;
    }
  }
  else
  {
    uint64_t v13 = v37;
    CFTypeRef v36 = v37;
    if (!v37) {
      goto LABEL_77;
    }
  }
  CFRetain(v13);
  if (ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get)
  {
    uint64_t Count = CFArrayGetCount((CFArrayRef)v13);
    if (Count)
    {
      CFIndex v14 = 0;
      BOOL v25 = (char *)*MEMORY[0x1E4F4C4C8];
      int v23 = (char *)*MEMORY[0x1E4F4C778];
      CFTypeID v24 = (char *)*MEMORY[0x1E4F4C518];
      std::string v15 = (const char *)*MEMORY[0x1E4F4C770];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v13, v14);
        char v17 = ValueAtIndex;
        if (ValueAtIndex && (CFTypeID v18 = CFGetTypeID(ValueAtIndex), v18 == CFDictionaryGetTypeID()))
        {
          uint64_t v35 = v17;
          CFRetain(v17);
        }
        else
        {
          char v17 = 0;
          uint64_t v35 = 0;
        }
        v34[0] = 0xAAAAAAAAAAAAAAAALL;
        v34[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v34, (const __CFDictionary *)v17);
        memset((char *)&v33[1] + 8, 170, 24);
        long long __dst = 0uLL;
        *(void *)CFNumberRef v28 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v33, v25);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8791110](v33);
        if ((v28[7] & 0x80000000) != 0) {
          operator delete((void *)__dst);
        }
        memset(v33, 170, 24);
        long long __dst = 0uLL;
        *(void *)CFNumberRef v28 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v32, v24);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8791110](v32);
        if ((v28[7] & 0x80000000) != 0) {
          operator delete((void *)__dst);
        }
        memset(v32, 170, sizeof(v32));
        long long __dst = 0uLL;
        *(void *)CFNumberRef v28 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v31, v23);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8791110](v31);
        if ((v28[7] & 0x80000000) != 0) {
          operator delete((void *)__dst);
        }
        memset(v31, 170, sizeof(v31));
        long long __dst = 0uLL;
        *(void *)CFNumberRef v28 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v38, v15);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8791110](v38);
        if ((v28[7] & 0x80000000) != 0)
        {
          operator delete((void *)__dst);
          *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)long long __p = v20;
          *(_OWORD *)&__p[16] = v20;
          *(_OWORD *)&v28[16] = v20;
          *(_OWORD *)uint64_t v29 = v20;
          long long __dst = v20;
          *(_OWORD *)CFNumberRef v28 = v20;
          if ((SBYTE7(v33[1]) & 0x80000000) == 0)
          {
LABEL_43:
            long long __dst = v33[0];
            *(void *)CFNumberRef v28 = *(void *)&v33[1];
            goto LABEL_46;
          }
        }
        else
        {
          *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)long long __p = v19;
          *(_OWORD *)&__p[16] = v19;
          *(_OWORD *)&v28[16] = v19;
          *(_OWORD *)uint64_t v29 = v19;
          long long __dst = v19;
          *(_OWORD *)CFNumberRef v28 = v19;
          if ((SBYTE7(v33[1]) & 0x80000000) == 0) {
            goto LABEL_43;
          }
        }
        std::string::__init_copy_ctor_external((std::string *)&__dst, *(const std::string::value_type **)&v33[0], *((std::string::size_type *)&v33[0] + 1));
LABEL_46:
        if (SHIBYTE(v32[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v28[8], (const std::string::value_type *)v32[0], (std::string::size_type)v32[1]);
        }
        else
        {
          *(_OWORD *)&v28[8] = *(_OWORD *)v32;
          *(void **)&v28[24] = v32[2];
        }
        if (SHIBYTE(v31[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v29, (const std::string::value_type *)v31[0], (std::string::size_type)v31[1]);
        }
        else
        {
          *(_OWORD *)uint64_t v29 = *(_OWORD *)v31;
          *(void **)long long __p = v31[2];
        }
        if (SHIBYTE(v33[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *((const std::string::value_type **)&v33[1] + 1), *(std::string::size_type *)&v33[2]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)((char *)&v33[1] + 8);
          *(void *)&__p[24] = *((void *)&v33[2] + 1);
        }
        unint64_t v21 = *((void *)this + 10);
        if (v21 >= *((void *)this + 11))
        {
          uint64_t v22 = std::vector<_DeviceHistoryItem>::__push_back_slow_path<_DeviceHistoryItem const&>((int64x2_t *)((char *)this + 72), (const _DeviceHistoryItem *)&__dst);
        }
        else
        {
          _DeviceHistoryItem::_DeviceHistoryItem(*((std::string **)this + 10), (const _DeviceHistoryItem *)&__dst);
          uint64_t v22 = v21 + 96;
          *((void *)this + 10) = v21 + 96;
        }
        *((void *)this + 10) = v22;
        if ((__p[31] & 0x80000000) != 0)
        {
          operator delete(*(void **)&__p[8]);
          if ((__p[7] & 0x80000000) == 0)
          {
LABEL_60:
            if ((v28[31] & 0x80000000) == 0) {
              goto LABEL_61;
            }
            goto LABEL_70;
          }
        }
        else if ((__p[7] & 0x80000000) == 0)
        {
          goto LABEL_60;
        }
        operator delete(v29[0]);
        if ((v28[31] & 0x80000000) == 0)
        {
LABEL_61:
          if ((v28[7] & 0x80000000) == 0) {
            goto LABEL_62;
          }
          goto LABEL_71;
        }
LABEL_70:
        operator delete(*(void **)&v28[8]);
        if ((v28[7] & 0x80000000) == 0)
        {
LABEL_62:
          if ((SHIBYTE(v31[2]) & 0x80000000) == 0) {
            goto LABEL_63;
          }
          goto LABEL_72;
        }
LABEL_71:
        operator delete((void *)__dst);
        if ((SHIBYTE(v31[2]) & 0x80000000) == 0)
        {
LABEL_63:
          if ((SHIBYTE(v32[2]) & 0x80000000) == 0) {
            goto LABEL_64;
          }
          goto LABEL_73;
        }
LABEL_72:
        operator delete(v31[0]);
        if ((SHIBYTE(v32[2]) & 0x80000000) == 0)
        {
LABEL_64:
          if ((SBYTE7(v33[1]) & 0x80000000) == 0) {
            goto LABEL_65;
          }
          goto LABEL_74;
        }
LABEL_73:
        operator delete(v32[0]);
        if ((SBYTE7(v33[1]) & 0x80000000) == 0)
        {
LABEL_65:
          if ((SHIBYTE(v33[2]) & 0x80000000) == 0) {
            goto LABEL_66;
          }
          goto LABEL_75;
        }
LABEL_74:
        operator delete(*(void **)&v33[0]);
        if ((SHIBYTE(v33[2]) & 0x80000000) == 0)
        {
LABEL_66:
          MEMORY[0x1C8791160](v34);
          if (!v17) {
            goto LABEL_30;
          }
LABEL_76:
          CFRelease(v17);
          goto LABEL_30;
        }
LABEL_75:
        operator delete(*((void **)&v33[1] + 1));
        MEMORY[0x1C8791160](v34);
        if (v17) {
          goto LABEL_76;
        }
LABEL_30:
        ++v14;
      }
      while (Count != v14);
    }
  }
LABEL_77:
  if (v13) {
    CFRelease(v13);
  }
}

void sub_1C57DACC0(_Unwind_Exception *a1)
{
}

void sub_1C57DACE0(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1C57DAD00(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 160);
  _Unwind_Resume(a1);
}

void sub_1C57DAD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    if (a48 < 0) {
      operator delete(a43);
    }
    if (*(char *)(v48 - 161) < 0) {
      operator delete(*(void **)(v48 - 184));
    }
    if (*(char *)(v48 - 137) < 0) {
      operator delete(*(void **)(v48 - 160));
    }
    MEMORY[0x1C8791160](v48 - 136);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v48 - 120));
    ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v48 - 112));
    _Unwind_Resume(a1);
  }
  operator delete(a37);
  goto LABEL_6;
}

void sub_1C57DAECC(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void DeviceHistoryDB::addDeviceHistory(uint64_t a1, const _DeviceHistoryItem *a2)
{
  unint64_t v3 = *(void *)(a1 + 80);
  if (v3 >= *(void *)(a1 + 88))
  {
    *(void *)(a1 + 80) = std::vector<_DeviceHistoryItem>::__push_back_slow_path<_DeviceHistoryItem const&>((int64x2_t *)(a1 + 72), a2);
    timespec v4 = (DeviceHistoryDB *)a1;
  }
  else
  {
    _DeviceHistoryItem::_DeviceHistoryItem(*(std::string **)(a1 + 80), a2);
    *(void *)(a1 + 80) = v3 + 96;
    *(void *)(a1 + 80) = v3 + 96;
    timespec v4 = (DeviceHistoryDB *)a1;
  }
  DeviceHistoryDB::commitToDisk(v4);
}

void sub_1C57DAF64(_Unwind_Exception *a1)
{
  *(void *)(v1 + 80) = v2;
  _Unwind_Resume(a1);
}

void DeviceHistoryDB::commitToDisk(DeviceHistoryDB *this)
{
  CFTypeRef cf = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  timespec v4 = Mutable;
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  long long v6 = (long long *)*((void *)this + 9);
  uint64_t v5 = (long long *)*((void *)this + 10);
  if (v6 != v5)
  {
    size_t v7 = (const __CFString **)*MEMORY[0x1E4F4C4C8];
    size_t v8 = (const __CFString **)*MEMORY[0x1E4F4C518];
    uint64_t v9 = (const __CFString **)*MEMORY[0x1E4F4C778];
    uint64_t v10 = (const __CFString **)*MEMORY[0x1E4F4C770];
    uint64_t v11 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    do
    {
      uint64_t v13 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], v11);
      if (*((char *)v6 + 95) < 0)
      {
        std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
      }
      else
      {
        long long v14 = *(long long *)((char *)v6 + 72);
        v38.__r_.__value_.__r.__words[2] = *((void *)v6 + 11);
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
      }
      ctu::cf::insert<char const*,std::string>(v13, v7, (uint64_t)&v38, (uint64_t)v2, v12);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v38.__r_.__value_.__l.__data_);
        if ((*((char *)v6 + 23) & 0x80000000) == 0)
        {
LABEL_11:
          long long v16 = *v6;
          v38.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v16;
          goto LABEL_14;
        }
      }
      else if ((*((char *)v6 + 23) & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)v6, *((void *)v6 + 1));
LABEL_14:
      ctu::cf::insert<char const*,std::string>(v13, v8, (uint64_t)&v38, (uint64_t)v2, v15);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v38.__r_.__value_.__l.__data_);
        if ((*((char *)v6 + 47) & 0x80000000) == 0)
        {
LABEL_16:
          long long v18 = *(long long *)((char *)v6 + 24);
          v38.__r_.__value_.__r.__words[2] = *((void *)v6 + 5);
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
          goto LABEL_19;
        }
      }
      else if ((*((char *)v6 + 47) & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v6 + 3), *((void *)v6 + 4));
LABEL_19:
      ctu::cf::insert<char const*,std::string>(v13, v9, (uint64_t)&v38, (uint64_t)v2, v17);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v38.__r_.__value_.__l.__data_);
        if (*((char *)v6 + 71) < 0)
        {
LABEL_23:
          std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v6 + 6), *((void *)v6 + 7));
          goto LABEL_24;
        }
      }
      else if (*((char *)v6 + 71) < 0)
      {
        goto LABEL_23;
      }
      long long v20 = v6[3];
      v38.__r_.__value_.__r.__words[2] = *((void *)v6 + 8);
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v20;
LABEL_24:
      ctu::cf::insert<char const*,std::string>(v13, v10, (uint64_t)&v38, (uint64_t)v2, v19);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      CFArrayAppendValue(v4, v13);
      if (v13) {
        CFRelease(v13);
      }
      v6 += 6;
    }
    while (v6 != v5);
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  unint64_t v21 = (os_unfair_lock_s *)off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(&v38);
    long long v22 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = 0uLL;
    int v23 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v22;
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    std::string::size_type size = (std::__shared_weak_count *)v38.__r_.__value_.__l.__size_;
    if (v38.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v38.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    unint64_t v21 = (os_unfair_lock_s *)off_1EBBDD340;
  }
  uint64_t v35 = v21;
  CFTypeRef v36 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  BOOL v25 = (const void *)*MEMORY[0x1E4F4C438];
  size_t v26 = strlen((const char *)*MEMORY[0x1E4F4C438]);
  if (v26 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  CFAllocatorRef v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v29 = v26 | 7;
    }
    uint64_t v30 = v29 + 1;
    CFNumberRef v28 = operator new(v29 + 1);
    __p[1] = v27;
    unint64_t v34 = v30 | 0x8000000000000000;
    __p[0] = v28;
    goto LABEL_45;
  }
  HIBYTE(v34) = v26;
  CFNumberRef v28 = __p;
  if (v26) {
LABEL_45:
  }
    memmove(v28, v25, (size_t)v27);
  *((unsigned char *)v27 + (void)v28) = 0;
  v38.__r_.__value_.__r.__words[2] = (std::string::size_type)v21;
  CFTypeRef v39 = cf;
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v38.__r_.__value_.__l.__size_ = (std::string::size_type)&v39;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFArray *>(std::string const&,__CFArray *)::{lambda(void)#1}>(v21 + 6, (uint64_t *)&v38);
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
  int v31 = v36;
  if (!v36 || atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v32 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  CFTypeRef v32 = cf;
  if (cf) {
LABEL_51:
  }
    CFRelease(v32);
}

void sub_1C57DB3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void _DeviceHistoryItem::~_DeviceHistoryItem(void **this)
{
  if (*((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_9;
  }
}

void DeviceHistoryDB::~DeviceHistoryDB(DeviceHistoryDB *this)
{
  *(void *)this = &unk_1F20F3C88;
  CFAllocatorRef v2 = (void **)((char *)this + 72);
  std::vector<_DeviceHistoryItem>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)this = &unk_1F20F3D30;
  MEMORY[0x1C8790F40]((char *)this + 8);
}

{
  void **v2;

  *(void *)this = &unk_1F20F3C88;
  CFAllocatorRef v2 = (void **)((char *)this + 72);
  std::vector<_DeviceHistoryItem>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)this = &unk_1F20F3D30;
  MEMORY[0x1C8790F40]((char *)this + 8);
  operator delete(this);
}

uint64_t ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    size_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void std::vector<_DeviceHistoryItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  CFAllocatorRef v2 = (void **)**a1;
  if (!v2) {
    return;
  }
  timespec v4 = (void **)v1[1];
  size_t v5 = **a1;
  if (v4 == v2)
  {
    v1[1] = v2;
    goto LABEL_5;
  }
  do
  {
    if (*((char *)v4 - 1) < 0)
    {
      operator delete(*(v4 - 3));
      if ((*((char *)v4 - 25) & 0x80000000) == 0)
      {
LABEL_9:
        if (*((char *)v4 - 49) < 0) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
    }
    else if ((*((char *)v4 - 25) & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(*(v4 - 6));
    if (*((char *)v4 - 49) < 0)
    {
LABEL_14:
      operator delete(*(v4 - 9));
      if ((*((char *)v4 - 73) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
LABEL_10:
    if ((*((char *)v4 - 73) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_15:
    operator delete(*(v4 - 12));
LABEL_6:
    v4 -= 12;
  }
  while (v4 != v2);
  size_t v5 = **a1;
  v1[1] = v2;

LABEL_5:
  operator delete(v5);
}

void *ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F3D30;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F3D30;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

uint64_t std::vector<_DeviceHistoryItem>::__push_back_slow_path<_DeviceHistoryItem const&>(int64x2_t *a1, const _DeviceHistoryItem *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  int v23 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v20 = v7;
  v21.i64[0] = (uint64_t)&v7[96 * v2];
  v21.i64[1] = v21.i64[0];
  long long v22 = &v7[96 * v6];
  _DeviceHistoryItem::_DeviceHistoryItem((std::string *)v21.i64[0], a2);
  uint64_t v8 = a1->i64[0];
  unint64_t v9 = a1->u64[1];
  uint64_t v10 = v21.i64[0];
  uint64_t v11 = v21.i64[0];
  if (v9 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v9);
  }
  else
  {
    do
    {
      long long v12 = *(_OWORD *)(v9 - 96);
      *(void *)(v11 - 80) = *(void *)(v9 - 80);
      *(_OWORD *)(v11 - 96) = v12;
      *(void *)(v9 - 88) = 0;
      *(void *)(v9 - 80) = 0;
      *(void *)(v9 - 96) = 0;
      long long v13 = *(_OWORD *)(v9 - 72);
      *(void *)(v11 - 56) = *(void *)(v9 - 56);
      *(_OWORD *)(v11 - 72) = v13;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 72) = 0;
      long long v14 = *(_OWORD *)(v9 - 48);
      *(void *)(v11 - 32) = *(void *)(v9 - 32);
      *(_OWORD *)(v11 - 48) = v14;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 48) = 0;
      long long v15 = *(_OWORD *)(v9 - 24);
      *(void *)(v11 - 8) = *(void *)(v9 - 8);
      *(_OWORD *)(v11 - 24) = v15;
      v11 -= 96;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      v9 -= 96;
    }
    while (v9 != v8);
    int64x2_t v16 = *a1;
  }
  uint64_t v17 = v10 + 96;
  a1->i64[0] = v11;
  a1->i64[1] = v10 + 96;
  int64x2_t v21 = v16;
  long long v18 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v22;
  long long v22 = v18;
  long long v20 = (char *)v16.i64[0];
  std::__split_buffer<_DeviceHistoryItem>::~__split_buffer((uint64_t)&v20);
  return v17;
}

void sub_1C57DBA18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<_DeviceHistoryItem>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void _DeviceHistoryItem::_DeviceHistoryItem(std::string *this, const _DeviceHistoryItem *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    size_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    size_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v8 = this + 3;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_1C57DBB28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<_DeviceHistoryItem>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 25) & 0x80000000) == 0)
      {
LABEL_6:
        if (*(char *)(i - 49) < 0) {
          goto LABEL_11;
        }
        goto LABEL_7;
      }
    }
    else if ((*(char *)(i - 25) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 48));
    if (*(char *)(i - 49) < 0)
    {
LABEL_11:
      operator delete(*(void **)(i - 72));
      if ((*(char *)(i - 73) & 0x80000000) == 0) {
        continue;
      }
      goto LABEL_12;
    }
LABEL_7:
    if ((*(char *)(i - 73) & 0x80000000) == 0) {
      continue;
    }
LABEL_12:
    operator delete(*(void **)(i - 96));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL Preferences::getPreference<__CFArray const*>(uint64_t (***a1)(void, uint64_t), const char *a2, void *a3)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  size_t v5 = (const void *)(**a1)(a1, v11);
  long long v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    BOOL v8 = v7 == CFArrayGetTypeID();
    BOOL v9 = v8;
    if (v8) {
      *a3 = v6;
    }
    CFRelease(v6);
  }
  else
  {
    BOOL v9 = 0;
  }
  MEMORY[0x1C8791110](&v11);
  return v9;
}

BOOL ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFArray *>(std::string const&,__CFArray *)::{lambda(void)#1}>(os_unfair_lock_s *a1, uint64_t *a2)
{
  unint64_t v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  long long v6 = *(const void **)a2[1];
  if (*(char *)(v5 + 23) >= 0) {
    CFTypeID v7 = (const char *)v5;
  }
  else {
    CFTypeID v7 = *(const char **)v5;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v10, v7);
  BOOL v8 = ctu::cf::plist_adapter::set<__CFArray *>(v4, v6, v10, 1);
  MEMORY[0x1C8791110](&v10);
  os_unfair_lock_unlock(v3);
  return v8;
}

BOOL ctu::cf::plist_adapter::set<__CFArray *>(uint64_t a1, CFTypeRef cf, const __CFString *a3, int a4)
{
  if (!cf) {
    return 0;
  }
  CFRetain(cf);
  CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
  CFPreferencesSetValue(a3, cf, *(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  if (a4) {
    BOOL v9 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), v8) != 0;
  }
  else {
    BOOL v9 = 1;
  }
  CFRelease(cf);
  return v9;
}

void sub_1C57DBE84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_5()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C5767000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void ServerLogging::~ServerLogging(ServerLogging *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 9));
    *((void *)this + 9) = 0;
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*((void **)this + 6));
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_7:
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v4) {
      return;
    }
    goto LABEL_8;
  }
LABEL_12:
  operator delete(*((void **)this + 3));
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v4) {
    return;
  }
LABEL_8:
  std::__shared_weak_count::__release_weak(v4);
}

uint64_t ServerLogging::ServerLogging(uint64_t a1, long long *a2, long long *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 40) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(a1 + 64) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 48) = v6;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  CFTypeID v7 = (os_unfair_lock_s *)off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(&v24);
    long long v8 = v24;
    long long v24 = 0uLL;
    BOOL v9 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    CFStringRef v10 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    CFTypeID v7 = (os_unfair_lock_s *)off_1EBBDD340;
  }
  long long v22 = v7;
  int v23 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v11 = (const void *)*MEMORY[0x1E4F4F950];
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4F950]);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    long long v14 = (void **)operator new(v15 + 1);
    __dst[1] = v13;
    unint64_t v21 = v16 | 0x8000000000000000;
    __dst[0] = v14;
LABEL_25:
    memmove(v14, v11, (size_t)v13);
    *((unsigned char *)v13 + (void)v14) = 0;
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_26;
  }
  HIBYTE(v21) = v12;
  long long v14 = __dst;
  if (v12) {
    goto LABEL_25;
  }
  LOBYTE(__dst[0]) = 0;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_21:
    std::string __p = *(std::string *)a3;
    goto LABEL_27;
  }
LABEL_26:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *((void *)a3 + 1));
LABEL_27:
  *(void *)&long long v24 = __dst;
  *((void *)&v24 + 1) = &__p;
  BOOL v25 = v7;
  os_unfair_lock_lock(v7 + 10);
  SharedData::setPreference<std::string>(std::string const&,std::string)::{lambda(void)#1}::operator()((char **)&v24);
  os_unfair_lock_unlock(v7 + 10);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_29;
    }
LABEL_32:
    operator delete(__dst[0]);
    uint64_t v17 = v23;
    if (!v23) {
      return a1;
    }
    goto LABEL_33;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21) < 0) {
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v17 = v23;
  if (!v23) {
    return a1;
  }
LABEL_33:
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  return a1;
}

void sub_1C57DC2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v21);
  if (*(char *)(v18 + 71) < 0)
  {
    operator delete(*v20);
    if ((*(char *)(v18 + 47) & 0x80000000) == 0)
    {
LABEL_5:
      int v23 = *(std::__shared_weak_count **)(v18 + 8);
      if (!v23) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v18 + 47) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*v19);
  int v23 = *(std::__shared_weak_count **)(v18 + 8);
  if (!v23) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_9:
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void ServerLogging::init(os_unfair_lock_s *this)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN13ServerLogging4initEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_3;
  v2[4] = this;
  uint64_t v1 = this + 4;
  os_unfair_lock_lock(this + 4);
  ___ZN13ServerLogging4initEv_block_invoke((uint64_t)v2);
  os_unfair_lock_unlock(v1);
}

ctu::LogServer *___ZN13ServerLogging4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(ServerLogging **)(a1 + 32);
  uint64_t v2 = ServerLogging::monitorSnapshotPath_sync(v1);
  *((void *)v1 + 9) = v2;
  ServerLogging::clearScratchFolders_sync((ServerLogging *)v2);
  uint64_t result = (ctu::LogServer *)*((void *)v1 + 10);
  if (result)
  {
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  }
  return result;
}

NSObject *ServerLogging::monitorSnapshotPath_sync(ServerLogging *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (char *)this + 48;
  uint64_t v2 = (const char *)*((void *)this + 6);
  v4.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blkstd::string::size_type size = v4;
  *(timespec *)v19.st_qspare = v4;
  v19.st_birthtimespec = v4;
  *(timespec *)&v19.st_std::string::size_type size = v4;
  v19.st_mtimespec = v4;
  v19.st_ctimespec = v4;
  *(timespec *)&v19.st_uid = v4;
  v19.st_atimespec = v4;
  *(timespec *)&v19.st_dev = v4;
  if (*((char *)this + 71) >= 0) {
    long long v5 = (char *)this + 48;
  }
  else {
    long long v5 = v2;
  }
  if (stat(v5, &v19))
  {
    long long v6 = GetOsLogContext()[1];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      CFTypeID v7 = v3;
      if (*((char *)this + 71) < 0) {
        CFTypeID v7 = *(const char **)v3;
      }
      v19.st_dev = 136315138;
      *(void *)&v19.st_mode = v7;
      _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was not found, so recreating it\n", (uint8_t *)&v19, 0xCu);
    }
    support::fs::createDir(v3, 0x1EDu, 1);
  }
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    unsigned int v8 = open(v3, 0x8000);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    return 0;
  }
  unsigned int v8 = open(*(const char **)v3, 0x8000);
  if ((v8 & 0x80000000) != 0) {
    return 0;
  }
LABEL_12:
  int v9 = v8;
  uintptr_t v10 = v8;
  global_queue = dispatch_get_global_queue(17, 0);
  size_t v12 = dispatch_source_create(MEMORY[0x1E4F144A8], v10, 0x21uLL, global_queue);
  long long v13 = v12;
  if (v12)
  {
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_7;
    handler[4] = this;
    int v18 = v9;
    dispatch_source_set_event_handler(v12, handler);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 0x40000000;
    void v15[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8;
    void v15[3] = &__block_descriptor_tmp_9;
    int v16 = v9;
    dispatch_source_set_cancel_handler(v13, v15);
    dispatch_activate(v13);
  }
  else
  {
    close(v9);
  }
  return v13;
}

void ServerLogging::clearScratchFolders_sync(ServerLogging *this)
{
  uint64_t v1 = (const void *)*MEMORY[0x1E4F4F910];
  size_t v2 = strlen((const char *)*MEMORY[0x1E4F4F910]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    timespec v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    unint64_t v10 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v10) = v2;
  timespec v4 = __dst;
  if (v2) {
LABEL_8:
  }
    memmove(v4, v1, (size_t)v3);
  *((unsigned char *)v3 + (void)v4) = 0;
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0) {
    operator delete(__dst[0]);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global_1);
  capabilities::abs::logScratchPath((uint64_t *)__dst, v8);
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1C57DC7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ctu::LogServer *ServerLogging::init_sync(ServerLogging *this)
{
  uint64_t result = (ctu::LogServer *)*((void *)this + 10);
  if (result) {
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  }
  return result;
}

void ServerLogging::registerLogServer(os_unfair_lock_s *a1, uint64_t *a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  CFTypeID v7 = ___ZN13ServerLogging17registerLogServerENSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  unsigned int v8 = &__block_descriptor_tmp_3_2;
  uint64_t v3 = *a2;
  size_t v2 = (std::__shared_weak_count *)a2[1];
  int v9 = a1;
  uint64_t v10 = v3;
  uint64_t v11 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  timespec v4 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  v7(v6);
  os_unfair_lock_unlock(v4);
  uint64_t v5 = v11;
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

ctu::LogServer *___ZN13ServerLogging17registerLogServerENSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t result = (ctu::LogServer *)a1[5];
  uint64_t v4 = a1[6];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 88);
  *(void *)(v3 + 80) = result;
  *(void *)(v3 + 88) = v4;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t result = *(ctu::LogServer **)(v3 + 80);
  }
  if (result)
  {
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ServerLogging::snapshot(os_unfair_lock_s *a1, const void **a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  uint64_t v6 = ___ZN13ServerLogging8snapshotEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  CFTypeID v7 = &__block_descriptor_tmp_4_2;
  uint64_t v3 = *a2;
  unsigned int v8 = a1;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  uint64_t v4 = a1 + 4;
  os_unfair_lock_lock(v4);
  v6((uint64_t)v5);
  os_unfair_lock_unlock(v4);
  if (cf) {
    CFRelease(cf);
  }
}

void ___ZN13ServerLogging8snapshotEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1)
  {
    CFRetain(*(CFTypeRef *)(a1 + 40));
    CFRelease(v1);
  }
}

void ___ZN13ServerLogging24clearScratchFolders_syncEv_block_invoke()
{
  timespec v0 = (const void *)*MEMORY[0x1E4F4F910];
  size_t v1 = strlen((const char *)*MEMORY[0x1E4F4F910]);
  if (v1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v2 = (void *)v1;
  if (v1 >= 0x17)
  {
    uint64_t v4 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1 | 7) != 0x17) {
      uint64_t v4 = v1 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v3 = (void **)operator new(v4 + 1);
    __dst[1] = v2;
    unint64_t v7 = v5 | 0x8000000000000000;
    __dst[0] = v3;
    goto LABEL_8;
  }
  HIBYTE(v7) = v1;
  uint64_t v3 = __dst;
  if (v1) {
LABEL_8:
  }
    memmove(v3, v0, (size_t)v2);
  *((unsigned char *)v2 + (void)v3) = 0;
  support::fs::removeDirContents((const char *)__dst, 0);
  if (SHIBYTE(v7) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1C57DCC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ServerLogging::backupFolders_sync(capabilities::abs *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 8) = 0;
  unint64_t v7 = (std::string::size_type *)(a4 + 8);
  *(void *)a4 = 0;
  *(void *)(a4 + 16) = 0;
  capabilities::abs::logScratchPath((uint64_t *)&__p, a1);
  v8.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v8.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v40.st_blkstd::string::size_type size = v8;
  *(timespec *)v40.st_qspare = v8;
  v40.st_birthtimespec = v8;
  *(timespec *)&v40.st_std::string::size_type size = v8;
  v40.st_mtimespec = v8;
  v40.st_ctimespec = v8;
  *(timespec *)&v40.st_uid = v8;
  v40.st_atimespec = v8;
  *(timespec *)&v40.st_dev = v8;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t p_p = &__p;
  }
  else {
    uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (stat((const char *)p_p, &v40))
  {
    LODWORD(v10) = 0;
  }
  else
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    size_t v12 = opendir((const char *)v11);
    uint64_t v10 = v12;
    if (v12)
    {
      long long v13 = readdir(v12);
      closedir(v10);
      LODWORD(v10) = v13 != 0;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  int v14 = *((char *)a2 + 23);
  if (v14 >= 0) {
    size_t v15 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v15 = (size_t)a2[1];
  }
  unint64_t v16 = v15 + 7;
  memset(&__p, 170, sizeof(__p));
  if (v15 + 7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v16 >= 0x17)
  {
    uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v18 = v16 | 7;
    }
    uint64_t v19 = v18 + 1;
    uint64_t v17 = (std::string *)operator new(v18 + 1);
    __p.__r_.__value_.__l.__size_ = v15 + 7;
    __p.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    uint64_t v17 = &__p;
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v15 + 7;
    if (!v15) {
      goto LABEL_29;
    }
  }
  if (v14 >= 0) {
    uint64_t v20 = a2;
  }
  else {
    uint64_t v20 = *a2;
  }
  memmove(v17, v20, v15);
LABEL_29:
  strcpy((char *)v17 + v15, "log-bb-");
  Timestamp::Timestamp((Timestamp *)v35);
  Timestamp::asString((uint64_t)v35, 0, 9, v37);
  if ((v38 & 0x80u) == 0) {
    uint64_t v21 = v37;
  }
  else {
    uint64_t v21 = (void **)v37[0];
  }
  if ((v38 & 0x80u) == 0) {
    std::string::size_type v22 = v38;
  }
  else {
    std::string::size_type v22 = (std::string::size_type)v37[1];
  }
  int v23 = std::string::append(&__p, (const std::string::value_type *)v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(void *)&v40.st_uid = *((void *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)&v40.st_dev = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  int v25 = *(char *)(a3 + 23);
  if (v25 >= 0) {
    size_t v26 = (const std::string::value_type *)a3;
  }
  else {
    size_t v26 = *(const std::string::value_type **)a3;
  }
  if (v25 >= 0) {
    std::string::size_type v27 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v27 = *(void *)(a3 + 8);
  }
  CFNumberRef v28 = std::string::append((std::string *)&v40, v26, v27);
  std::string::size_type v29 = v28->__r_.__value_.__r.__words[0];
  *unint64_t v7 = v28->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v7 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1]
                                                                          + 7);
  char v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  int st_gid_high = SHIBYTE(v40.st_gid);
  *(void *)a4 = v29;
  *(unsigned char *)(a4 + 23) = v30;
  if ((st_gid_high & 0x80000000) == 0)
  {
    if (((char)v38 & 0x80000000) == 0) {
      goto LABEL_43;
    }
LABEL_48:
    operator delete(v37[0]);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_49;
  }
  operator delete(*(void **)&v40.st_dev);
  if ((char)v38 < 0) {
    goto LABEL_48;
  }
LABEL_43:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_44;
  }
LABEL_49:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_44:
  capabilities::abs::logScratchPath((uint64_t *)&v40.st_dev, v32);
  support::fs::moveDirUnique((const char *)&v40, a4, (uint64_t)&v33);
  if ((v34 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40.st_gid) & 0x80000000) == 0) {
      return;
    }
LABEL_51:
    operator delete(*(void **)&v40.st_dev);
    return;
  }
  operator delete(v33);
  if (SHIBYTE(v40.st_gid) < 0) {
    goto LABEL_51;
  }
}

void sub_1C57DCF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = GetOsLogContext()[1];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(v2 + 48);
    if (*(char *)(v2 + 71) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v6 = 136315138;
    unint64_t v7 = v4;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was removed\n", (uint8_t *)&v6, 0xCu);
  }
  dispatch_release(*(dispatch_object_t *)(v2 + 72));
  *(void *)(v2 + 72) = 0;
  close(*(_DWORD *)(a1 + 40));
  uint64_t result = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v2);
  *(void *)(v2 + 72) = result;
  return result;
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void GetABMLogServer(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_4, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&_MergedGlobals_4))
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &qword_1EBBDD528, &dword_1C5767000);
      __cxa_guard_release(&_MergedGlobals_4);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_14;
  void block[4] = &qword_1EBBDD528;
  if (qword_1EBBDD520 == -1)
  {
    uint64_t v2 = unk_1EBBDD530;
    *a1 = qword_1EBBDD528;
    a1[1] = v2;
    if (!v2) {
      return;
    }
    goto LABEL_4;
  }
  dispatch_once(&qword_1EBBDD520, block);
  uint64_t v2 = unk_1EBBDD530;
  *a1 = qword_1EBBDD528;
  a1[1] = v2;
  if (v2) {
LABEL_4:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
}

uint64_t ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1C599E720;
  strcpy(__p.__r_.__value_.__l.__data_, "AppleBasebandManagerServerLog");
  ctu::LogServer::create();
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    std::string::size_type size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
    if (!v27.__r_.__value_.__l.__size_)
    {
LABEL_5:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    std::string::size_type size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
    if (!v27.__r_.__value_.__l.__size_) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_5;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_6:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  int v6 = (capabilities::abs *)pthread_mutex_lock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  unint64_t v7 = (os_unfair_lock_s *)qword_1EBBDD160;
  if (qword_1EBBDD160) {
    goto LABEL_31;
  }
  capabilities::abs::logScratchPath((uint64_t *)&__p, v6);
  size_t v8 = strlen((const char *)kDaemonLogScratchDir);
  int v9 = std::string::append(&__p, (const std::string::value_type *)kDaemonLogScratchDir, v8);
  std::string v27 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(v26, 170, sizeof(v26));
  capabilities::abs::logSnapshotPath((uint64_t *)v26, (capabilities::abs *)v9);
  uint64_t v10 = operator new(0x60uLL);
  ServerLogging::ServerLogging((uint64_t)v10, (long long *)&v27, (long long *)v26);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  uint64_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F3DF0;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  __p.__r_.__value_.__r.__words[0] = 0;
  long long v13 = (std::__shared_weak_count *)*((void *)v10 + 1);
  if (!v13)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)uint64_t v10 = v10;
    *((void *)v10 + 1) = v11;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v13->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)uint64_t v10 = v10;
    *((void *)v10 + 1) = v11;
    std::__shared_weak_count::__release_weak(v13);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_19:
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_20:
  if (__p.__r_.__value_.__r.__words[0])
  {
    ServerLogging::~ServerLogging((ServerLogging *)__p.__r_.__value_.__l.__data_);
    operator delete(v14);
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN13ServerLogging4initEv_block_invoke;
  std::string::size_type v29 = &__block_descriptor_tmp_3;
  char v30 = (uint64_t *)v10;
  os_unfair_lock_lock((os_unfair_lock_t)v10 + 4);
  ((void (*)(std::string *))__p.__r_.__value_.__r.__words[2])(&__p);
  os_unfair_lock_unlock((os_unfair_lock_t)v10 + 4);
  if (SHIBYTE(v26[2]) < 0)
  {
    operator delete(v26[0]);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_24:
      size_t v15 = (std::__shared_weak_count *)off_1EBBDD168;
      qword_1EBBDD160 = (uint64_t)v10;
      off_1EBBDD168 = v11;
      if (!v15) {
        goto LABEL_30;
      }
LABEL_28:
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v27.__r_.__value_.__l.__data_);
  size_t v15 = (std::__shared_weak_count *)off_1EBBDD168;
  qword_1EBBDD160 = (uint64_t)v10;
  off_1EBBDD168 = v11;
  if (v15) {
    goto LABEL_28;
  }
LABEL_30:
  unint64_t v7 = (os_unfair_lock_s *)qword_1EBBDD160;
LABEL_31:
  unint64_t v16 = (std::__shared_weak_count *)off_1EBBDD168;
  if (off_1EBBDD168) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD168 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  uint64_t v17 = *(uint64_t **)(a1 + 32);
  uint64_t v18 = (std::__shared_weak_count *)v17[1];
  v25[0] = *v17;
  v25[1] = (uint64_t)v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    ServerLogging::registerLogServer(v7, v25);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  else
  {
    ServerLogging::registerLogServer(v7, v25);
  }
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v19 = *(uint64_t **)(a1 + 32);
  uint64_t v21 = *v19;
  uint64_t v20 = (std::__shared_weak_count *)v19[1];
  uint64_t v23 = v21;
  long long v24 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  std::string::size_type v29 = &__block_descriptor_tmp_9;
  char v30 = &v23;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    std::string::size_type v22 = v24;
    if (!v24) {
      return;
    }
  }
  else
  {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
    std::string::size_type v22 = v24;
    if (!v24) {
      return;
    }
  }
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C57DD830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  _Unwind_Resume(a1);
}

ServerLogging **std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](ServerLogging **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ServerLogging::~ServerLogging(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__on_zero_shared(uint64_t a1)
{
  size_t v1 = *(ServerLogging **)(a1 + 24);
  if (v1)
  {
    ServerLogging::~ServerLogging(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599E7AELL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599E7AELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599E7AELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599E7AELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t SharedData::setPreference<std::string>(std::string const&,std::string)::{lambda(void)#1}::operator()(char **a1)
{
  size_t v1 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v3 = *a1;
  if (v1[23] < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v1, *((void *)v1 + 1));
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)v1;
    __p.__r_.__value_.__r.__words[2] = *((void *)v1 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v9 = __p;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_6:
  if (v3[23] >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(char **)v3;
  }
  uint64_t v6 = ctu::cf::plist_adapter::set<std::string>((int)v2, (uint64_t)&v9, v5);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v6;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return v6;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1C57DDAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a14 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::cf::plist_adapter::set<std::string>(int a1, uint64_t a2, char *a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v7 = *(std::string *)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, a3);
  uint64_t v4 = ctu::cf::plist_adapter::set<std::string>();
  MEMORY[0x1C8791110](&v6);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return v4;
}

uint64_t ctu::cf::plist_adapter::set<std::string>()
{
  return 0;
}

void sub_1C57DDCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t __cxx_global_var_init_6()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C5767000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_10()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy, &ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance, &dword_1C5767000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void BootModule::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::vendor((capabilities::radio *)a1) == 1)
  {
    uint64_t v4 = operator new(0x1F0uLL);
    uint64_t v5 = (uint64_t)v4;
    uint64_t v6 = *a1;
    std::string v7 = (std::__shared_weak_count *)a1[1];
    v11[0] = v6;
    v11[1] = (uint64_t)v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v10[0] = 0;
    v10[1] = 0;
    BootModule::BootModule((uint64_t)v4, v11, v10);
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<BootModule>::shared_ptr[abi:ne180100]<BootModule,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1},void>(&v12, v5);
    ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v12 + 48);
    long long v8 = v12;
    long long v12 = 0uLL;
    *(_OWORD *)a2 = v8;
    if (v7)
    {
      uint64_t v9 = v8;
      std::__shared_weak_count::__release_weak(v7);
      *(void *)&long long v8 = v9;
    }
    BootModule::init((BootModule *)v8);
  }
}

void sub_1C57DDE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void sub_1C57DDEA4(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BootModule::init(BootModule *this)
{
  uint64_t v5 = *((void *)this + 15);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  uint64_t v4 = (char *)this + 120;
  if (!v3 || (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::string v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  uint64_t v11[2] = ___ZN10BootModule4initEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_18;
  v11[4] = this;
  void v11[5] = v5;
  long long v12 = v7;
  long long v13 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10BootModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_214;
  void block[4] = v4;
  void block[5] = &v13;
  uint64_t v9 = *((void *)this + 17);
  if (!*((void *)this + 18))
  {
    dispatch_sync(v9, block);
    uint64_t v10 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v9, block);
  uint64_t v10 = v12;
  if (v12) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_8:
  std::__shared_weak_count::__release_weak(v7);
}

uint64_t BootModule::BootModule(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(void *)a1 = &unk_1F20F0BE0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20F0BE0;
  }
  *(void *)a1 = &unk_1F20F3E40;
  *(void *)(a1 + 48) = &unk_1F20F3EC8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)__s, "com.apple.telephony.abm", "boot.mod");
  GetABMLogServer(&v47);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v8 = dispatch_queue_create_with_target_V2("boot.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v8, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v8);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v8;
  if (v8)
  {
    dispatch_retain(v8);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v8);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F20F4788;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  *(void *)(a1 + 56) = &unk_1F20F0070;
  uint64_t v9 = v48;
  *(void *)(a1 + 104) = v47;
  *(void *)(a1 + 112) = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&__dst);
  *(void *)(a1 + 48) = &unk_1F20F4818;
  uint64_t v10 = v48;
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)__s);
  *(void *)a1 = &unk_1F20F3E40;
  *(void *)(a1 + 48) = &unk_1F20F3EC8;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 196) = 15;
  uint64_t v11 = (config::hw *)dispatch_semaphore_create(0);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 200) = v11;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = -1;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = -1;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 384) = 0;
  config::hw::regionInfo(v11);
  *(void *)(a1 + 416) = dispatch_group_create();
  *(void *)(a1 + 424) = 0;
  long long v12 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  size_t v13 = strlen(v12);
  if (v13 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v14;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_21;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13;
  p_dst = &__dst;
  if (v13) {
LABEL_21:
  }
    memmove(p_dst, v12, v14);
  p_dst->__r_.__value_.__s.__data_[v14] = 0;
  char v43 = 11;
  strcpy(__s, ".resetqueue");
  uint64_t v18 = std::string::append(&__dst, __s, 0xBuLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t v46 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long buf = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v46 >= 0) {
    uint64_t v20 = buf;
  }
  else {
    uint64_t v20 = *(uint8_t **)buf;
  }
  uint64_t v21 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  std::string::size_type v22 = (sys *)dispatch_queue_create((const char *)v20, v21);
  *(void *)(a1 + 432) = v22;
  if ((SHIBYTE(v46) & 0x80000000) == 0)
  {
    if ((v43 & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_38:
    operator delete(*(void **)__s);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
  operator delete(*(void **)buf);
  if (v43 < 0) {
    goto LABEL_38;
  }
LABEL_27:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_28;
  }
LABEL_39:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_28:
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = *a3;
  uint64_t v23 = a3[1];
  *(void *)(a1 + 488) = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 256) = 8;
  if (sys::isBootSessionChanged(v22))
  {
    long long v24 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C5767000, v24, OS_LOG_TYPE_DEFAULT, "#I Resetting baseband boot stats", buf, 2u);
    }
    *(void *)(a1 + 448) = 0;
    goto LABEL_71;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (!qword_1EBBDD2F0)
  {
    size_t v26 = (HealthEventDB *)operator new(0xA0uLL);
    HealthEventDB::HealthEventDB(v26);
    int v25 = operator new(0x20uLL);
    *int v25 = &unk_1F20F4858;
    v25[1] = 0;
    uint64_t v25[2] = 0;
    v25[3] = v26;
    std::string v27 = (std::__shared_weak_count *)off_1EBBDD2F8;
    qword_1EBBDD2F0 = (uint64_t)v26;
    off_1EBBDD2F8 = v25;
    if (!v27)
    {
      *(void *)long long buf = v26;
      *(void *)&uint8_t buf[8] = v25;
      goto LABEL_44;
    }
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  int v25 = off_1EBBDD2F8;
  *(void *)long long buf = qword_1EBBDD2F0;
  *(void *)&uint8_t buf[8] = off_1EBBDD2F8;
  if (off_1EBBDD2F8) {
LABEL_44:
  }
    atomic_fetch_add_explicit(v25 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  HealthEventDB::getHealthInfo(*(HealthEventDB **)buf, (xpc_object_t *)&__dst.__r_.__value_.__l.__data_);
  CFNumberRef v28 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  xpc_object_t value = xpc_dictionary_get_value(__dst.__r_.__value_.__l.__data_, "KeyBasebandStats");
  xpc_object_t v30 = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_object_t v31 = xpc_null_create();
  uint64_t v32 = MEMORY[0x1E4F14590];
  if (v30 && MEMORY[0x1C8792D30](v30) == v32)
  {
    xpc_retain(v30);
    xpc_object_t v33 = v30;
  }
  else
  {
    xpc_object_t v33 = xpc_null_create();
  }
  if (MEMORY[0x1C8792D30](v33) != v32)
  {
    if (v31)
    {
      xpc_retain(v31);
      xpc_object_t v34 = v31;
    }
    else
    {
      xpc_object_t v34 = xpc_null_create();
    }
    xpc_release(v33);
    xpc_object_t v33 = v34;
  }
  xpc_release(v31);
  xpc_release(v30);
  if (MEMORY[0x1C8792D30](v33) != v32)
  {
    uint64_t v35 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C5767000, v35, OS_LOG_TYPE_ERROR, "Baseband boot stats not found", buf, 2u);
    }
    *(void *)(a1 + 448) = 0;
  }
  xpc_object_t v36 = xpc_dictionary_get_value(v33, (const char *)*MEMORY[0x1E4F4CD70]);
  *(void *)long long buf = v36;
  if (v36) {
    xpc_retain(v36);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  *(_DWORD *)(a1 + 448) = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v37 = xpc_dictionary_get_value(v33, (const char *)*MEMORY[0x1E4F4CD78]);
  *(void *)long long buf = v37;
  if (v37) {
    xpc_retain(v37);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  *(_DWORD *)(a1 + 452) = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  xpc_release(v33);
  xpc_release(__dst.__r_.__value_.__l.__data_);
LABEL_71:
  if (!*(void *)(a1 + 480))
  {
    _ZNSt3__115allocate_sharedB8ne180100I20BootControllerLegacyNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)buf);
    long long v39 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    stat v40 = *(std::__shared_weak_count **)(a1 + 488);
    *(_OWORD *)(a1 + 480) = v39;
    if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    uint64_t v41 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  return a1;
}

void sub_1C57DE8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t object,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v27 + 464);
  xpc_object_t v34 = *(NSObject **)(v27 + 440);
  if (v34)
  {
    dispatch_resume(v34);
    uint64_t v35 = *(NSObject **)(v27 + 440);
    if (v35) {
      dispatch_release(v35);
    }
  }
  xpc_object_t v36 = *(NSObject **)(v27 + 432);
  if (v36) {
    dispatch_release(v36);
  }
  xpc_object_t v37 = *(NSObject **)(v27 + 424);
  if (v37)
  {
    dispatch_group_leave(v37);
    unsigned __int8 v38 = *(NSObject **)(v27 + 424);
    if (v38) {
      dispatch_release(v38);
    }
  }
  long long v39 = *(NSObject **)(v27 + 416);
  if (v39)
  {
    dispatch_release(v39);
    if ((*(char *)(v27 + 415) & 0x80000000) == 0)
    {
LABEL_11:
      uint64_t v40 = v32 + 64;
      if ((*(char *)(v27 + 375) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_17;
    }
  }
  else if ((*(char *)(v27 + 415) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*a10);
  uint64_t v40 = v32 + 64;
  if ((*(char *)(v27 + 375) & 0x80000000) == 0)
  {
LABEL_12:
    uint64_t v41 = (const void **)(v32 + 56);
    if ((*(char *)(v27 + 327) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v32 + 144));
  uint64_t v41 = (const void **)(v32 + 56);
  if ((*(char *)(v27 + 327) & 0x80000000) == 0)
  {
LABEL_13:
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v40);
    uint64_t v42 = *v41;
    if (!*v41) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v32 + 96));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v40);
  uint64_t v42 = *v41;
  if (!*v41)
  {
LABEL_20:
    char v43 = *(NSObject **)(v27 + 216);
    if (v43)
    {
      dispatch_group_leave(v43);
      unint64_t v44 = *(NSObject **)(v27 + 216);
      if (v44) {
        dispatch_release(v44);
      }
    }
    if (*(void *)v32)
    {
      dispatch_group_leave(*(dispatch_group_t *)v32);
      if (*(void *)v32) {
        dispatch_release(*(dispatch_object_t *)v32);
      }
    }
    uint64_t v45 = *(NSObject **)(v27 + 200);
    if (v45) {
      dispatch_release(v45);
    }
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v32 - 32);
    if (*(char *)(v27 + 175) < 0) {
      operator delete(*v31);
    }
    ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v28);
    Service::~Service((Service *)v27);
    _Unwind_Resume(a1);
  }
LABEL_19:
  _Block_release(v42);
  goto LABEL_20;
}

void *ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F4788;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20F4788;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void BootModule::~BootModule(BootModule *this)
{
  *(void *)this = &unk_1F20F3E40;
  *((void *)this + 6) = &unk_1F20F3EC8;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)size_t v26 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v26, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *((void *)this + 55);
  if (v5)
  {
    dispatch_resume(v5);
    uint64_t v6 = *((void *)this + 55);
    if (v6) {
      dispatch_release(v6);
    }
  }
  std::string v7 = *((void *)this + 54);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = *((void *)this + 53);
  if (v8)
  {
    dispatch_group_leave(v8);
    uint64_t v9 = *((void *)this + 53);
    if (v9) {
      dispatch_release(v9);
    }
  }
  uint64_t v10 = *((void *)this + 52);
  if (v10) {
    dispatch_release(v10);
  }
  if (*((char *)this + 415) < 0)
  {
    operator delete(*((void **)this + 49));
    if ((*((char *)this + 375) & 0x80000000) == 0)
    {
LABEL_21:
      if ((*((char *)this + 327) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_26;
    }
  }
  else if ((*((char *)this + 375) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(*((void **)this + 44));
  if ((*((char *)this + 327) & 0x80000000) == 0)
  {
LABEL_22:
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 35);
    if (!v11) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(*((void **)this + 38));
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 35);
  if (!v11) {
    goto LABEL_28;
  }
LABEL_27:
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    long long v12 = (const void *)*((void *)this + 33);
    if (!v12) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_28:
  long long v12 = (const void *)*((void *)this + 33);
  if (v12) {
LABEL_29:
  }
    _Block_release(v12);
LABEL_30:
  size_t v13 = *((void *)this + 27);
  if (v13)
  {
    dispatch_group_leave(v13);
    std::string::size_type v14 = *((void *)this + 27);
    if (v14) {
      dispatch_release(v14);
    }
  }
  size_t v15 = *((void *)this + 26);
  if (v15)
  {
    dispatch_group_leave(v15);
    uint64_t v16 = *((void *)this + 26);
    if (v16) {
      dispatch_release(v16);
    }
  }
  uint64_t v17 = *((void *)this + 25);
  if (v17) {
    dispatch_release(v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 23);
  if (!v18 || atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*((char *)this + 175) & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*((char *)this + 175) < 0) {
LABEL_41:
  }
    operator delete(*((void **)this + 19));
LABEL_42:
  *((void *)this + 6) = &unk_1F20F4788;
  MEMORY[0x1C8790F40]((char *)this + 56);
  long long v19 = *((void *)this + 18);
  if (v19) {
    dispatch_release(v19);
  }
  uint64_t v20 = *((void *)this + 17);
  if (v20) {
    dispatch_release(v20);
  }
  uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v22 = *((void *)this + 3);
  if (v22)
  {
    uint64_t v23 = *((void *)this + 4);
    long long v24 = (void *)*((void *)this + 3);
    if (v23 != v22)
    {
      do
      {
        if (*(char *)(v23 - 1) < 0) {
          operator delete(*(void **)(v23 - 24));
        }
        v23 -= 24;
      }
      while (v23 != v22);
      long long v24 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v22;
    operator delete(v24);
  }
  int v25 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
}

{
  void *v1;
  uint64_t vars8;

  BootModule::~BootModule(this);

  operator delete(v1);
}

void non-virtual thunk to'BootModule::~BootModule(BootModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  BootModule::~BootModule((BootModule *)((char *)this - 48));

  operator delete(v1);
}

void BootModule::changeState_sync(uint64_t a1, unsigned int a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(NSObject **)(a1 + 88);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    uint64_t v6 = *(int *)(a1 + 456);
    if (v6 > 8)
    {
      std::string v7 = "Unknown";
      if (a2 > 8) {
        goto LABEL_4;
      }
    }
    else
    {
      std::string v7 = off_1E6517468[v6];
      if (a2 > 8)
      {
LABEL_4:
        uint64_t v8 = "Unknown";
LABEL_7:
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = v7;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v8;
        _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I boot state changing %{public}s -> %{public}s", buf, 0x16u);
        goto LABEL_8;
      }
    }
    uint64_t v8 = off_1E6517468[a2];
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 456) = a2;
  if (!capabilities::ipc::supportsPCI((capabilities::ipc *)v5)) {
    goto LABEL_43;
  }
  if ((*(_DWORD *)(a1 + 456) - 3) > 1)
  {
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 280);
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
    if (!v17 || atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_43;
    }
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!*(void *)(a1 + 216)) {
      goto LABEL_49;
    }
  }
  else
  {
    if (*(void *)(a1 + 272)) {
      goto LABEL_43;
    }
    uint64_t v9 = *(void **)(a1 + 264);
    if (v9) {
      uint64_t v9 = _Block_copy(v9);
    }
    long long aBlock = v9;
    pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    uint64_t v10 = off_1EBBDCFD0;
    if (!off_1EBBDCFD0)
    {
      ABMServer::create_default_global(buf);
      long long v11 = *(_OWORD *)buf;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      long long v12 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
      off_1EBBDCFD0 = v11;
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      size_t v13 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v10 = off_1EBBDCFD0;
    }
    uint64_t v36 = v10;
    xpc_object_t v37 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
    if (*(&off_1EBBDCFD0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCFD0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    pci::event::Listener::create();
    long long v14 = v39;
    long long v39 = 0uLL;
    size_t v15 = *(std::__shared_weak_count **)(a1 + 280);
    *(_OWORD *)(a1 + 272) = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    if (*((void *)&v39 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v39 + 1) + 16))(*((void *)&v39 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
    }
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    uint64_t v16 = *(NSObject **)(a1 + 88);
    if (*(void *)(a1 + 272))
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEFAULT, "#I Listening for PCI events", buf, 2u);
        if (!*(void *)(a1 + 216)) {
          goto LABEL_49;
        }
        goto LABEL_44;
      }
LABEL_43:
      if (!*(void *)(a1 + 216)) {
        goto LABEL_49;
      }
      goto LABEL_44;
    }
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_43;
    }
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v16, OS_LOG_TYPE_ERROR, "Could not create PCI event listener!", buf, 2u);
    if (!*(void *)(a1 + 216)) {
      goto LABEL_49;
    }
  }
LABEL_44:
  int v18 = *(_DWORD *)(a1 + 456);
  if (v18 != 4) {
    goto LABEL_50;
  }
  long long v19 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v19, OS_LOG_TYPE_DEFAULT, "#I Releasing shutdown request session", buf, 2u);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 7);
  uint64_t v20 = *(NSObject **)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v20)
  {
    dispatch_group_leave(v20);
    dispatch_release(v20);
  }
LABEL_49:
  int v18 = *(_DWORD *)(a1 + 456);
LABEL_50:
  if (v18 != 7) {
    return;
  }
  *(void *)long long buf = 0;
  uint64_t v21 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    *(void *)long long buf = Mutable;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4CF28], v21, v23);
  long long v24 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v25 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v25 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    uint64_t v29 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v29 = v25 | 7;
    }
    uint64_t v30 = v29 + 1;
    uint64_t v27 = (void **)operator new(v29 + 1);
    __dst[1] = v26;
    unint64_t v35 = v30 | 0x8000000000000000;
    __dst[0] = v27;
LABEL_61:
    memmove(v27, v24, (size_t)v26);
    *((unsigned char *)v26 + (void)v27) = 0;
    CFNumberRef v28 = *(const void **)buf;
    if (!*(void *)buf) {
      goto LABEL_64;
    }
    goto LABEL_62;
  }
  HIBYTE(v35) = v25;
  uint64_t v27 = __dst;
  if (v25) {
    goto LABEL_61;
  }
  LOBYTE(__dst[0]) = 0;
  CFNumberRef v28 = *(const void **)buf;
  if (!*(void *)buf) {
    goto LABEL_64;
  }
LABEL_62:
  CFTypeID v31 = CFGetTypeID(v28);
  if (v31 == CFDictionaryGetTypeID())
  {
    CFTypeRef cf = v28;
    CFRetain(v28);
    goto LABEL_65;
  }
LABEL_64:
  CFTypeRef cf = 0;
LABEL_65:
  uint64_t v32 = 0;
  Service::broadcastEvent(a1, (uint64_t)__dst, &cf, (const void **)&v32);
  if (v32) {
    _Block_release(v32);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v35) < 0)
  {
    operator delete(__dst[0]);
    if (!v28) {
      return;
    }
  }
  else if (!v28)
  {
    return;
  }
  CFRelease(v28);
}

void sub_1C57DF688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *aBlock, uint64_t a20,uint64_t a21,char a22)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(a1);
}

const char *BootModule::getName(BootModule *this)
{
  return "boot.mod";
}

void BootModule::requestReset(void *a1, long long *a2, void **a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v7 = a1[15], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (!capabilities::abs::shouldIgnoreResets((capabilities::abs *)v8))
  {
    size_t v13 = a1[54];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_8_1;
    void block[4] = a1;
    void block[5] = v7;
    uint64_t v17 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    ResetInfo::ResetInfo(&v18, a2);
    long long v14 = *a3;
    if (*a3) {
      long long v14 = _Block_copy(v14);
    }
    long long aBlock = v14;
    dispatch_async(v13, block);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v24 < 0)
    {
      operator delete(__p);
      if ((v22 & 0x80000000) == 0)
      {
LABEL_20:
        if ((v20 & 0x80000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_26;
      }
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v21);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_27;
    }
LABEL_26:
    operator delete(v19);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      size_t v15 = v17;
      if (!v17) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
LABEL_27:
    operator delete(v18.__r_.__value_.__l.__data_);
    size_t v15 = v17;
    if (!v17) {
      goto LABEL_29;
    }
LABEL_28:
    std::__shared_weak_count::__release_weak(v15);
    goto LABEL_29;
  }
  uint64_t v10 = a1[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)
    && ((ResetInfo::asString((ResetInfo *)a2, v26), v27 >= 0) ? (long long v11 = v26) : (long long v11 = (void **)v26[0]),
        *(_DWORD *)long long buf = 136446210,
        uint64_t v29 = v11,
        _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Ignoring modem reset request: %{public}s", buf, 0xCu), v27 < 0))
  {
    operator delete(v26[0]);
    long long v12 = (void (**)(void *, void, void **))*a3;
    if (!*a3) {
      goto LABEL_29;
    }
  }
  else
  {
    long long v12 = (void (**)(void *, void, void **))*a3;
    if (!*a3) {
      goto LABEL_29;
    }
  }
  char v27 = 0;
  LOBYTE(v26[0]) = 0;
  v12[2](v12, 0, v26);
  if (v27 < 0) {
    operator delete(v26[0]);
  }
LABEL_29:
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C57DFA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  char v24 = v4;
  if (!v4) {
    return;
  }
  BOOL v5 = v4;
  if (!*(void *)(a1 + 40)) {
    goto LABEL_15;
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
  v12[3] = &__block_descriptor_tmp_28;
  v12[4] = v3;
  ResetInfo::ResetInfo(&v13, (long long *)(a1 + 56));
  uint64_t v6 = *(const void **)(a1 + 168);
  if (v6)
  {
    uint64_t v7 = _Block_copy(v6);
    uint64_t v8 = (uint64_t *)(v3 + 120);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 48);
    long long aBlock = v7;
    uint64_t v21 = v10;
    char v22 = v9;
    if (!v9) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v8 = (uint64_t *)(v3 + 120);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 48);
  long long aBlock = 0;
  uint64_t v21 = v11;
  char v22 = v9;
  if (v9) {
LABEL_6:
  }
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  ctu::SharedSynchronizable<BootModule>::execute_wrapped(v8, (uint64_t)v12);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v19 < 0)
  {
    operator delete(__p);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_21:
      operator delete(v14);
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_15:
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
LABEL_23:
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        return;
      }
      goto LABEL_22;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v16);
  if (v15 < 0) {
    goto LABEL_21;
  }
LABEL_14:
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_15;
  }
LABEL_22:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_23;
  }
}

void sub_1C57DFC3C(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  unsigned int v3 = *((_DWORD *)v2 + 114);
  if (v3 > 8 || ((1 << v3) & 0x1C7) == 0)
  {
    long long v12 = v2[11];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      ResetInfo::asString((ResetInfo *)(a1 + 40), &__p);
      std::string v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEFAULT, "#I Reset requested: %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    (*(void (**)(void *, uint64_t))(*v2 + 96))(v2, 1);
    *(void *)uint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v15 = v14;
    if (v14)
    {
      *(void *)uint64_t v61 = v14;
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      *(void *)uint64_t v61 = v15;
      if (!v15)
      {
        xpc_object_t v16 = xpc_null_create();
        xpc_object_t v15 = 0;
        goto LABEL_40;
      }
    }
    if (MEMORY[0x1C8792D30](v15) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v15);
      goto LABEL_41;
    }
    xpc_object_t v16 = xpc_null_create();
LABEL_40:
    *(void *)uint64_t v61 = v16;
LABEL_41:
    xpc_release(v15);
    uint64_t v21 = (_OWORD *)(a1 + 40);
    ResetInfo::addToDict((ResetInfo *)(a1 + 40), (xpc_object_t *)v61);
    xpc_object_t v22 = *(xpc_object_t *)v61;
    xpc_object_t v60 = *(xpc_object_t *)v61;
    if (*(void *)v61)
    {
      xpc_retain(*(xpc_object_t *)v61);
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v60 = v22;
    }
    BootModule::submitBBResetMetric_sync((uint64_t)v2, &v60);
    xpc_release(v22);
    xpc_object_t v23 = *(xpc_object_t *)v61;
    xpc_object_t v59 = *(xpc_object_t *)v61;
    xpc_object_t v60 = 0;
    if (*(void *)v61)
    {
      xpc_retain(*(xpc_object_t *)v61);
    }
    else
    {
      xpc_object_t v23 = xpc_null_create();
      xpc_object_t v59 = v23;
    }
    BootModule::updateAnalyticsEvent_sync((uint64_t)v2, &v59);
    xpc_release(v23);
    xpc_object_t v59 = 0;
    if (*(char *)(a1 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v21;
      __p.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
    }
    int v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    if (size == strlen((const char *)*MEMORY[0x1E4F4C6E8]))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      BOOL v27 = memcmp(p_p, (const void *)*MEMORY[0x1E4F4C6E8], size) == 0;
      if ((v24 & 0x80000000) == 0)
      {
LABEL_61:
        if (v27)
        {
          BootModule::reportStatisticsHardResetTime_sync((BootModule *)v2);
          goto LABEL_79;
        }
        if (*(char *)(a1 + 63) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v21;
          __p.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
        }
        int v28 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v29 = __p.__r_.__value_.__l.__size_;
        }
        if (v29 == strlen((const char *)*MEMORY[0x1E4F4C6F0]))
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v30 = &__p;
          }
          else {
            uint64_t v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          BOOL v31 = memcmp(v30, (const void *)*MEMORY[0x1E4F4C6F0], v29) == 0;
          if ((v28 & 0x80000000) == 0)
          {
LABEL_77:
            if (v31) {
              BootModule::reportStatisticsSoftReset_sync((BootModule *)v2);
            }
LABEL_79:
            memset(&buf, 170, 16);
            (*(void (**)(std::string *__return_ptr, void *))(*v2 + 80))(&buf, v2);
            std::string::size_type v32 = buf.__r_.__value_.__r.__words[0];
            if (!buf.__r_.__value_.__r.__words[0])
            {
LABEL_105:
              uint64_t v47 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
              if (buf.__r_.__value_.__l.__size_
                && !atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
              xpc_release(*(xpc_object_t *)v61);
              return;
            }
            dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
            xpc_object_t v33 = (char *)operator new(0x38uLL);
            strcpy(v33, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
            uint64_t v34 = capabilities::abs::resetAssertionTimeoutScalingFactor((capabilities::abs *)v33);
            uint64_t v35 = *(void *)(v32 + 104);
            std::string::__init_copy_ctor_external(&__p, v33, 0x33uLL);
            (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(void *)v35 + 24))(&object, v35, &__p, 360000 * v34);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            operator delete(v33);
            std::string::size_type v37 = *(void *)(a1 + 160);
            std::string::size_type v36 = *(void *)(a1 + 168);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
            __p.__r_.__value_.__l.__size_ = v37;
            __p.__r_.__value_.__r.__words[2] = v36;
            if (v36) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 16), 1uLL, memory_order_relaxed);
            }
            ResetInfo::ResetInfo(&v49, (long long *)(a1 + 40));
            unsigned __int8 v38 = *(void **)(a1 + 152);
            if (v38) {
              unsigned __int8 v38 = _Block_copy(v38);
            }
            long long aBlock = v38;
            dispatch_object_t v57 = object;
            if (object)
            {
              dispatch_retain(object);
              long long v39 = object;
            }
            else
            {
              long long v39 = 0;
            }
            uint64_t v40 = v2[17];
            uint64_t v41 = (std::string *)operator new(0x98uLL);
            uint64_t v42 = (std::string::__raw *)v41;
            *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            std::string::size_type v43 = __p.__r_.__value_.__r.__words[2];
            v41->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            if (v43) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 16), 1uLL, memory_order_relaxed);
            }
            ResetInfo::ResetInfo(v41 + 1, (long long *)&v49);
            unint64_t v44 = aBlock;
            if (aBlock) {
              unint64_t v44 = _Block_copy(aBlock);
            }
            dispatch_object_t v45 = v57;
            v42[5].__words[2] = (std::string::size_type)v44;
            v42[6].__words[0] = (std::string::size_type)v45;
            dispatch_object_t v57 = 0;
            dispatch_group_notify_f(v39, v40, v42, (dispatch_function_t)_ZZN8dispatch6detail12group_notifyIZZZN10BootModule12requestResetE9ResetInfoNS_5blockIU13block_pointerFviNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEEUb_EUb0_E3__0EEvP16dispatch_group_sP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEEENUlPvE_8__invokeESO_);
            if (v57) {
              dispatch_release(v57);
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v55 < 0)
            {
              operator delete(v54);
              if ((v53 & 0x80000000) == 0)
              {
LABEL_99:
                if ((v51 & 0x80000000) == 0) {
                  goto LABEL_100;
                }
                goto LABEL_112;
              }
            }
            else if ((v53 & 0x80000000) == 0)
            {
              goto LABEL_99;
            }
            operator delete(v52);
            if ((v51 & 0x80000000) == 0)
            {
LABEL_100:
              if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_101;
              }
              goto LABEL_113;
            }
LABEL_112:
            operator delete(v50);
            if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_101:
              int64_t v46 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
              if (!__p.__r_.__value_.__r.__words[2]) {
                goto LABEL_103;
              }
              goto LABEL_102;
            }
LABEL_113:
            operator delete(v49.__r_.__value_.__l.__data_);
            int64_t v46 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
            if (!__p.__r_.__value_.__r.__words[2])
            {
LABEL_103:
              if (object) {
                dispatch_release(object);
              }
              goto LABEL_105;
            }
LABEL_102:
            std::__shared_weak_count::__release_weak(v46);
            goto LABEL_103;
          }
        }
        else
        {
          BOOL v31 = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_77;
          }
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_77;
      }
    }
    else
    {
      BOOL v27 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_61;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_61;
  }
  uint64_t v5 = (int)v3;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1C599E810;
  strcpy(__p.__r_.__value_.__l.__data_, "Reset rejected; Boot state is: ");
  if (v5 > 8) {
    uint64_t v6 = "Unknown";
  }
  else {
    uint64_t v6 = off_1E6517468[v5];
  }
  size_t v7 = strlen(v6);
  uint64_t v8 = std::string::append(&__p, v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = v2[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v17 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
    std::string::size_type v18 = buf.__r_.__value_.__r.__words[0];
    ResetInfo::asString((ResetInfo *)(a1 + 40), &__p);
    p_std::string buf = &buf;
    if (v17 < 0) {
      p_std::string buf = (std::string *)v18;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v20 = &__p;
    }
    else {
      char v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t v61 = 136315394;
    *(void *)&v61[4] = p_buf;
    __int16 v62 = 2080;
    dispatch_object_t v63 = v20;
    _os_log_debug_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEBUG, "#D %s; %s", v61, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v11 = *(void *)(a1 + 152);
  if (!v11) {
    goto LABEL_16;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = buf;
  }
  (*(void (**)(uint64_t, uint64_t, std::string *))(v11 + 16))(v11, 3760250880, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_17;
    }
  }
  else
  {
LABEL_16:
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
LABEL_17:
    }
      operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_1C57E0414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,dispatch_object_t object)
{
  xpc_release(*(xpc_object_t *)(v28 - 128));
  _Unwind_Resume(a1);
}

void BootModule::submitBBResetMetric_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4 = MEMORY[0x1C8792D30](*a2);
  uint64_t v5 = MEMORY[0x1E4F14590];
  uint64_t v6 = *(NSObject **)(a1 + 88);
  if (v4 != MEMORY[0x1E4F14590])
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C5767000, v6, OS_LOG_TYPE_ERROR, "No input is given", buf, 2u);
    }
    return;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of baseband reset", buf, 2u);
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v7) == v5)
    {
      xpc_retain(v7);
      xpc_object_t v8 = v7;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v7 = 0;
  }
  xpc_release(v7);
  xpc_object_t v9 = xpc_BOOL_create(*(unsigned char *)(a1 + 288));
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C1B0], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_int64_create(*(int *)(a1 + 296));
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D2E0], v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_int64_create(*(int *)(a1 + 344));
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D2E8], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = (const char *)(a1 + 304);
  if (*(char *)(a1 + 327) < 0) {
    xpc_object_t v15 = *(const char **)v15;
  }
  xpc_object_t v16 = xpc_string_create(v15);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D320], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  std::string::size_type v18 = (const char *)(a1 + 352);
  if (*(char *)(a1 + 375) < 0) {
    std::string::size_type v18 = *(const char **)v18;
  }
  xpc_object_t v19 = xpc_string_create(v18);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D328], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  uint64_t v21 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0) {
    uint64_t v21 = *(const char **)v21;
  }
  xpc_object_t v22 = xpc_string_create(v21);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D2D8], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_int64_create(*(int *)(a1 + 256));
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C150], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  xpc_object_t v26 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C190], v26);
  xpc_object_t v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  xpc_object_t v28 = xpc_int64_create(524310);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C258], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  xpc_object_t v30 = *a2;
  if (v30) {
    xpc_retain(v30);
  }
  else {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C188], v30);
  xpc_object_t v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  std::string::size_type v32 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v33 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v33 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v34 = v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    uint64_t v35 = operator new(v36 + 1);
    size_t v41 = v34;
    unint64_t v42 = v37 | 0x8000000000000000;
    *(void *)std::string buf = v35;
LABEL_47:
    memmove(v35, v32, v34);
    *((unsigned char *)v35 + v34) = 0;
    xpc_object_t object = v8;
    if (v8) {
      goto LABEL_43;
    }
LABEL_48:
    xpc_object_t object = xpc_null_create();
    goto LABEL_49;
  }
  HIBYTE(v42) = v33;
  uint64_t v35 = buf;
  if (v33) {
    goto LABEL_47;
  }
  buf[0] = 0;
  xpc_object_t object = v8;
  if (!v8) {
    goto LABEL_48;
  }
LABEL_43:
  xpc_retain(v8);
LABEL_49:
  unsigned __int8 v38 = 0;
  Service::runCommand(a1, (uint64_t)buf, &object, &v38);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v42) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v8);
}

void sub_1C57E0AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void BootModule::updateAnalyticsEvent_sync(uint64_t a1, xpc_object_t *a2)
{
  v214[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = MEMORY[0x1C8792D30](*a2);
  uint64_t v5 = MEMORY[0x1E4F14590];
  uint64_t v6 = *(NSObject **)(a1 + 88);
  if (v4 != MEMORY[0x1E4F14590])
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1C5767000, v6, OS_LOG_TYPE_ERROR, "No input is given", (uint8_t *)&buf, 2u);
    }
    return;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Updating Analytics metric of baseband reset", (uint8_t *)&buf, 2u);
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v7) == v5)
    {
      xpc_retain(v7);
      xpc_object_t v8 = v7;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v7 = 0;
  }
  xpc_release(v7);
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v9) == v5)
    {
      xpc_retain(v9);
      xpc_object_t v10 = v9;
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  xpc_object_t v11 = xpc_BOOL_create(*(unsigned char *)(a1 + 288));
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "inVoiceCall", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_int64_create(*(int *)(a1 + 296));
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "rat", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_int64_create(*(int *)(a1 + 344));
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "rat2", v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = (const char *)(a1 + 304);
  if (*(char *)(a1 + 327) < 0) {
    xpc_object_t v17 = *(const char **)v17;
  }
  xpc_object_t v18 = xpc_string_create(v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "PLMN", v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = (const char *)(a1 + 352);
  if (*(char *)(a1 + 375) < 0) {
    xpc_object_t v20 = *(const char **)v20;
  }
  xpc_object_t v21 = xpc_string_create(v20);
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "PLMN2", v21);
  xpc_object_t v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  uint64_t v23 = *(void *)(a1 + 328);
  if (v23)
  {
    xpc_object_t v24 = xpc_uint64_create(v23);
    if (!v24) {
      xpc_object_t v24 = xpc_null_create();
    }
    xpc_dictionary_set_value(v10, "cellId", v24);
    xpc_object_t v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
  }
  uint64_t v26 = *(void *)(a1 + 376);
  if (v26)
  {
    xpc_object_t v27 = xpc_uint64_create(v26);
    if (!v27) {
      xpc_object_t v27 = xpc_null_create();
    }
    xpc_dictionary_set_value(v10, "cellId2", v27);
    xpc_object_t v28 = xpc_null_create();
    xpc_release(v27);
    xpc_release(v28);
  }
  uint64_t v29 = *(void *)(a1 + 336);
  if (v29)
  {
    xpc_object_t v30 = xpc_uint64_create(v29);
    if (!v30) {
      xpc_object_t v30 = xpc_null_create();
    }
    xpc_dictionary_set_value(v10, "tac", v30);
    xpc_object_t v31 = xpc_null_create();
    xpc_release(v30);
    xpc_release(v31);
  }
  uint64_t v32 = *(void *)(a1 + 384);
  if (v32)
  {
    xpc_object_t v33 = xpc_uint64_create(v32);
    if (!v33) {
      xpc_object_t v33 = xpc_null_create();
    }
    xpc_dictionary_set_value(v10, "tac2", v33);
    xpc_object_t v34 = xpc_null_create();
    xpc_release(v33);
    xpc_release(v34);
  }
  uint64_t v35 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0) {
    uint64_t v35 = *(const char **)v35;
  }
  xpc_object_t v36 = xpc_string_create(v35);
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "sku", v36);
  xpc_object_t v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  xpc_object_t v38 = xpc_int64_create(*(int *)(a1 + 256));
  if (!v38) {
    xpc_object_t v38 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "operatingMode", v38);
  xpc_object_t v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C8E8]);
  *(void *)&long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v41 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  int is_transcription_pending = util::apfs::is_transcription_pending(v42);
  xpc_object_t v44 = xpc_BOOL_create(v41 & ~(_BYTE)is_transcription_pending);
  if (!v44) {
    xpc_object_t v44 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "isMTBF", v44);
  xpc_object_t v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  memset(__s1, 170, sizeof(__s1));
  xpc_object_t v46 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CA38]);
  *(void *)&long long buf = v46;
  if (v46) {
    xpc_retain(v46);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  xpc::dyn_cast_or_default(__s1, (xpc *)&buf, (const object *)*MEMORY[0x1E4F4D038], v47);
  xpc_release((xpc_object_t)buf);
  if (is_transcription_pending)
  {
    uint64_t v48 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1C5767000, v48, OS_LOG_TYPE_DEFAULT, "#I APFS transcription is pending", (uint8_t *)&buf, 2u);
    }
    if (v41)
    {
      std::string v49 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1C5767000, v49, OS_LOG_TYPE_DEFAULT, "#I Downgrading Baseband Reset MTBF metric because APFS transcription is pending", (uint8_t *)&buf, 2u);
      }
    }
  }
  if (__s1[2] >= 0) {
    size_t v50 = (const char *)__s1;
  }
  else {
    size_t v50 = (const char *)__s1[0];
  }
  xpc_object_t v51 = xpc_string_create(v50);
  if (!v51) {
    xpc_object_t v51 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "resetType", v51);
  xpc_object_t v52 = xpc_null_create();
  xpc_release(v51);
  xpc_release(v52);
  size_t v53 = strlen((const char *)*MEMORY[0x1E4F4D130]);
  unint64_t v54 = v53;
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v53 != -1)
    {
      unint64_t v55 = HIBYTE(__s1[2]);
      int v56 = __s1;
      goto LABEL_78;
    }
LABEL_302:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v53 == -1) {
    goto LABEL_302;
  }
  int v56 = (uint64_t *)__s1[0];
  unint64_t v55 = __s1[1];
LABEL_78:
  if (v55 >= v54) {
    size_t v57 = v54;
  }
  else {
    size_t v57 = v55;
  }
  if (!memcmp(v56, (const void *)*MEMORY[0x1E4F4D130], v57) && v55 == v54)
  {
    xpc_object_t v58 = xpc_string_create((const char *)*MEMORY[0x1E4F4C4B0]);
    if (!v58) {
      xpc_object_t v58 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C540], v58);
    xpc_object_t v59 = xpc_null_create();
    xpc_release(v58);
    xpc_release(v59);
    goto LABEL_266;
  }
  memset(&__dst, 170, sizeof(__dst));
  xpc_object_t v60 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C8F0]);
  *(void *)&long long buf = v60;
  if (v60) {
    xpc_retain(v60);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&__dst, (xpc *)&buf, (const object *)"no-reset-reason", v61);
  xpc_release((xpc_object_t)buf);
  memset(&__str, 170, sizeof(__str));
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = __dst;
  }
  __int16 v62 = (const void *)*MEMORY[0x1E4F4D1A0];
  size_t v63 = strlen((const char *)*MEMORY[0x1E4F4D1A0]);
  size_t v64 = v63;
  if (SHIBYTE(__s1[2]) < 0)
  {
    if (v63 != -1)
    {
      uint64_t v65 = __s1[1];
      if (__s1[1] >= v63) {
        size_t v68 = v63;
      }
      else {
        size_t v68 = __s1[1];
      }
      CFMutableArrayRef v67 = (capabilities::radio *)memcmp((const void *)__s1[0], v62, v68);
      if (v67) {
        goto LABEL_252;
      }
      goto LABEL_104;
    }
LABEL_304:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v63 == -1) {
    goto LABEL_304;
  }
  uint64_t v65 = HIBYTE(__s1[2]);
  if (HIBYTE(__s1[2]) >= v63) {
    size_t v66 = v63;
  }
  else {
    size_t v66 = HIBYTE(__s1[2]);
  }
  CFMutableArrayRef v67 = (capabilities::radio *)memcmp(__s1, v62, v66);
  if (v67) {
    goto LABEL_252;
  }
LABEL_104:
  if (v65 == v64)
  {
    long long v69 = (capabilities::radio *)capabilities::radio::maverick(v67);
    if (v69)
    {
      *(void *)&long long v70 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v70 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v200 = v70;
      long long v201 = v70;
      long long v198 = v70;
      long long v199 = v70;
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v198, "(ATCS_TIMEOUT on message for svc=[0-9]*)(client=[0-9]*).*(txid=[0-9]*)(msgid=0x[a-zA-Z0-9]*)\\)(.*)", 0);
      *(void *)&long long v71 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v71 + 1) = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v193 = 0xAAAAAAAAAAAAAA00;
      v190[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
      long long v196 = v71;
      uint64_t v191 = 0;
      uint64_t v192 = 0;
      uint64_t v194 = 0;
      uint64_t v195 = 0;
      LOBYTE(v196) = 0;
      BYTE8(v196) = 0;
      uint64_t v197 = 0;
      memset(v190, 0, 41);
      unint64_t v209 = 0xAAAAAAAAAAAAAA00;
      *((void *)&v206[1] + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v212 = v71;
      uint64_t v207 = 0;
      uint64_t v208 = 0;
      uint64_t v210 = 0;
      uint64_t v211 = 0;
      LOBYTE(v212) = 0;
      BYTE8(v212) = 0;
      uint64_t v213 = 0;
      long long buf = 0u;
      v206[0] = 0u;
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_dst = (std::sub_match<const char *> *)&__dst;
      }
      else {
        p_dst = (std::sub_match<const char *> *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      }
      *(_OWORD *)((char *)v206 + 9) = 0uLL;
      int v74 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v198, p_dst, (std::sub_match<const char *> *)((char *)p_dst + size), (std::vector<std::csub_match> *)&buf, 0);
      std::string::size_type v75 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v76 = &__dst;
      }
      else {
        uint64_t v76 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v75 = __dst.__r_.__value_.__l.__size_;
      }
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v190, (uint64_t)v76, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v76 + v75), (uint64_t *)&buf, 0);
      if ((void)buf)
      {
        *((void *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
      if (!v74) {
        goto LABEL_246;
      }
      std::vector<std::ssub_match>::pointer begin = v190[0].__begin_;
      unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)v190[0].__end_ - (char *)v190[0].__begin_) >> 3);
      if (v78 <= 1) {
        std::vector<std::ssub_match>::pointer v79 = (std::vector<std::ssub_match>::pointer)v190;
      }
      else {
        std::vector<std::ssub_match>::pointer v79 = v190[0].__begin_;
      }
      if (!v79[1].matched)
      {
        memset(&v189, 0, sizeof(v189));
        goto LABEL_161;
      }
      std::__wrap_iter<const char *>::iterator_type i = v79[1].first.__i_;
      std::__wrap_iter<const char *>::iterator_type v81 = v79[1].second.__i_;
      unint64_t v82 = v81 - i;
      if ((unint64_t)(v81 - i) > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v82 > 0x16)
      {
        uint64_t v92 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v82 | 7) != 0x17) {
          uint64_t v92 = v82 | 7;
        }
        uint64_t v93 = v92 + 1;
        long long v83 = (char *)operator new(v92 + 1);
        v189.__r_.__value_.__l.__size_ = v81 - i;
        v189.__r_.__value_.__r.__words[2] = v93 | 0x8000000000000000;
        v189.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
      }
      else
      {
        *((unsigned char *)&v189.__r_.__value_.__s + 23) = (_BYTE)v81 - (_BYTE)i;
        long long v83 = (char *)&v189;
      }
      if (i == v81)
      {
        CFTypeRef v94 = v83;
      }
      else
      {
        if (v82 < 0x20 || (unint64_t)(v83 - i) < 0x20)
        {
          CFTypeRef v94 = v83;
          xpc_object_t v95 = i;
        }
        else
        {
          CFTypeRef v94 = &v83[v82 & 0xFFFFFFFFFFFFFFE0];
          xpc_object_t v95 = &i[v82 & 0xFFFFFFFFFFFFFFE0];
          CFArrayRef v96 = (long long *)(i + 16);
          unsigned int v97 = v83 + 16;
          unint64_t v98 = v82 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v99 = *v96;
            *(v97 - 1) = *(v96 - 1);
            *unsigned int v97 = v99;
            v96 += 2;
            v97 += 2;
            v98 -= 32;
          }
          while (v98);
          if (v82 == (v82 & 0xFFFFFFFFFFFFFFE0)) {
            goto LABEL_160;
          }
        }
        do
        {
          char v100 = *v95++;
          *v94++ = v100;
        }
        while (v95 != v81);
      }
LABEL_160:
      *CFTypeRef v94 = 0;
      std::vector<std::ssub_match>::pointer begin = v190[0].__begin_;
      unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)v190[0].__end_ - (char *)v190[0].__begin_) >> 3);
LABEL_161:
      p_matched = (std::__compressed_pair<std::ssub_match *> *)&begin[4].matched;
      if (v78 <= 4) {
        p_matched = &v190[1].__end_cap_;
      }
      unsigned int value_low = LOBYTE(p_matched->__value_);
      if (!value_low)
      {
        std::string::size_type v110 = 0;
        CFNumberRef v111 = 0;
        uint64_t v186 = 0;
        unint64_t v187 = 0;
        unint64_t v188 = 0;
        goto LABEL_187;
      }
      BOOL v103 = v78 > 4;
      if (v78 <= 4) {
        xpc_object_t v104 = &v190[1];
      }
      else {
        xpc_object_t v104 = (std::vector<std::ssub_match> *)&begin[4];
      }
      std::vector<std::ssub_match>::pointer v105 = v104->__begin_;
      p_second = (std::vector<std::ssub_match>::pointer *)&begin[4].second;
      if (!v103) {
        p_second = &v190[1].__end_;
      }
      std::vector<std::ssub_match>::pointer v107 = *p_second;
      unint64_t v108 = (char *)*p_second - (char *)v105;
      if (v108 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v108 > 0x16)
      {
        uint64_t v112 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v108 | 7) != 0x17) {
          uint64_t v112 = v108 | 7;
        }
        uint64_t v113 = v112 + 1;
        uint64_t v109 = operator new(v112 + 1);
        unint64_t v187 = v108;
        unint64_t v188 = v113 | 0x8000000000000000;
        uint64_t v186 = v109;
      }
      else
      {
        HIBYTE(v188) = *(unsigned char *)p_second - (_BYTE)v105;
        uint64_t v109 = &v186;
      }
      if (v105 == v107)
      {
        xpc_object_t v114 = v109;
      }
      else
      {
        if (v108 < 0x20 || (unint64_t)((char *)v109 - (char *)v105) < 0x20)
        {
          xpc_object_t v114 = v109;
          unsigned int v115 = (char *)v105;
        }
        else
        {
          xpc_object_t v114 = (char *)v109 + (v108 & 0xFFFFFFFFFFFFFFE0);
          unsigned int v115 = (char *)v105 + (v108 & 0xFFFFFFFFFFFFFFE0);
          CFArrayRef v116 = &v105->matched;
          uint64_t v117 = v109 + 1;
          unint64_t v118 = v108 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v119 = *(_OWORD *)v116;
            *(v117 - 1) = *((_OWORD *)v116 - 1);
            *uint64_t v117 = v119;
            v116 += 32;
            v117 += 2;
            v118 -= 32;
          }
          while (v118);
          if (v108 == (v108 & 0x7FFFFFFFFFFFFFE0)) {
            goto LABEL_186;
          }
        }
        do
        {
          char v120 = *v115++;
          *v114++ = v120;
        }
        while (v115 != (char *)v107);
      }
LABEL_186:
      *xpc_object_t v114 = 0;
      unsigned int value_low = HIBYTE(v188);
      CFNumberRef v111 = (void **)v186;
      std::string::size_type v110 = v187;
LABEL_187:
      if ((value_low & 0x80u) == 0) {
        char v121 = &v186;
      }
      else {
        char v121 = v111;
      }
      if ((value_low & 0x80u) == 0) {
        std::string::size_type v122 = value_low;
      }
      else {
        std::string::size_type v122 = v110;
      }
      char v123 = std::string::append(&v189, (const std::string::value_type *)v121, v122);
      long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
      *(void *)&v206[0] = *((void *)&v123->__r_.__value_.__l + 2);
      long long buf = v124;
      v123->__r_.__value_.__l.__size_ = 0;
      v123->__r_.__value_.__r.__words[2] = 0;
      v123->__r_.__value_.__r.__words[0] = 0;
      unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * (((char *)v190[0].__end_ - (char *)v190[0].__begin_) >> 3);
      p_end_cap = (std::__compressed_pair<std::ssub_match *> *)&v190[0].__begin_[5].matched;
      if (v125 <= 5) {
        p_end_cap = &v190[1].__end_cap_;
      }
      unsigned int v127 = LOBYTE(p_end_cap->__value_);
      if (!v127)
      {
        std::string::size_type v135 = 0;
        xpc_object_t v136 = 0;
        std::string __p = 0;
        unint64_t v184 = 0;
        unint64_t v185 = 0;
        goto LABEL_219;
      }
      BOOL v128 = v125 > 5;
      if (v125 <= 5) {
        std::vector<std::ssub_match>::pointer v129 = (std::vector<std::ssub_match>::pointer)&v190[1];
      }
      else {
        std::vector<std::ssub_match>::pointer v129 = v190[0].__begin_ + 5;
      }
      std::__wrap_iter<const char *>::iterator_type v130 = v129->first.__i_;
      p_std::__split_buffer<std::string>::pointer end = (std::vector<std::ssub_match>::pointer *)&v190[0].__begin_[5].second;
      if (!v128) {
        p_std::__split_buffer<std::string>::pointer end = &v190[1].__end_;
      }
      std::vector<std::ssub_match>::pointer v132 = *p_end;
      unint64_t v133 = (char *)*p_end - v130;
      if (v133 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v133 > 0x16)
      {
        uint64_t v137 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v133 | 7) != 0x17) {
          uint64_t v137 = v133 | 7;
        }
        uint64_t v138 = v137 + 1;
        uint64_t p_p = operator new(v137 + 1);
        unint64_t v184 = v133;
        unint64_t v185 = v138 | 0x8000000000000000;
        std::string __p = p_p;
      }
      else
      {
        HIBYTE(v185) = *(unsigned char *)p_end - (_BYTE)v130;
        uint64_t p_p = &__p;
      }
      if (v130 == (std::__wrap_iter<const char *>::iterator_type)v132)
      {
        uint64_t v139 = p_p;
      }
      else
      {
        if (v133 < 0x20 || (unint64_t)((char *)p_p - v130) < 0x20)
        {
          uint64_t v139 = p_p;
          uint64_t v140 = v130;
        }
        else
        {
          uint64_t v139 = (char *)p_p + (v133 & 0xFFFFFFFFFFFFFFE0);
          uint64_t v140 = &v130[v133 & 0xFFFFFFFFFFFFFFE0];
          uint64_t v141 = (long long *)(v130 + 16);
          int v142 = p_p + 1;
          unint64_t v143 = v133 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v144 = *v141;
            *(v142 - 1) = *(v141 - 1);
            *int v142 = v144;
            v141 += 2;
            v142 += 2;
            v143 -= 32;
          }
          while (v143);
          if (v133 == (v133 & 0x7FFFFFFFFFFFFFE0)) {
            goto LABEL_218;
          }
        }
        do
        {
          char v145 = *v140++;
          *v139++ = v145;
        }
        while (v140 != (unsigned char *)v132);
      }
LABEL_218:
      *uint64_t v139 = 0;
      unsigned int v127 = HIBYTE(v185);
      xpc_object_t v136 = (void **)__p;
      std::string::size_type v135 = v184;
LABEL_219:
      if ((v127 & 0x80u) == 0) {
        unsigned int v146 = &__p;
      }
      else {
        unsigned int v146 = v136;
      }
      if ((v127 & 0x80u) == 0) {
        std::string::size_type v147 = v127;
      }
      else {
        std::string::size_type v147 = v135;
      }
      uint64_t v148 = std::string::append((std::string *)&buf, (const std::string::value_type *)v146, v147);
      std::string::size_type v149 = v148->__r_.__value_.__r.__words[0];
      v214[0] = v148->__r_.__value_.__l.__size_;
      *(void *)((char *)v214 + 7) = *(std::string::size_type *)((char *)&v148->__r_.__value_.__r.__words[1] + 7);
      char v150 = HIBYTE(v148->__r_.__value_.__r.__words[2]);
      v148->__r_.__value_.__l.__size_ = 0;
      v148->__r_.__value_.__r.__words[2] = 0;
      v148->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      __str.__r_.__value_.__r.__words[0] = v149;
      __str.__r_.__value_.__l.__size_ = v214[0];
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v214 + 7);
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = v150;
      if (SHIBYTE(v185) < 0)
      {
        operator delete(__p);
        if ((SBYTE7(v206[0]) & 0x80000000) == 0)
        {
LABEL_229:
          if ((SHIBYTE(v188) & 0x80000000) == 0) {
            goto LABEL_230;
          }
          goto LABEL_236;
        }
      }
      else if ((SBYTE7(v206[0]) & 0x80000000) == 0)
      {
        goto LABEL_229;
      }
      operator delete((void *)buf);
      if ((SHIBYTE(v188) & 0x80000000) == 0)
      {
LABEL_230:
        if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_231;
        }
        goto LABEL_237;
      }
LABEL_236:
      operator delete(v186);
      if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_231:
        size_t v151 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_232;
        }
        goto LABEL_238;
      }
LABEL_237:
      operator delete(v189.__r_.__value_.__l.__data_);
      size_t v151 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_232:
        if ((v151 & 0x80) != 0) {
          std::string::__assign_no_alias<true>(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          std::string __dst = __str;
        }
LABEL_246:
        if (v190[0].__begin_)
        {
          v190[0].__end_ = v190[0].__begin_;
          operator delete(v190[0].__begin_);
        }
        CFMutableDictionaryRef v154 = (std::__shared_weak_count *)v201;
        if ((void)v201 && !atomic_fetch_add((atomic_ullong *volatile)(v201 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
        std::locale::~locale((std::locale *)&v198);
        goto LABEL_252;
      }
LABEL_238:
      if ((v151 & 0x80u) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((v151 & 0x80u) == 0) {
        size_t v153 = v151;
      }
      else {
        size_t v153 = __str.__r_.__value_.__l.__size_;
      }
      std::string::__assign_no_alias<false>((void **)&__dst.__r_.__value_.__l.__data_, p_str, v153);
      goto LABEL_246;
    }
    if (capabilities::radio::ice(v69))
    {
      *(void *)&long long v84 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v84 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v200 = v84;
      long long v201 = v84;
      long long v198 = v84;
      long long v199 = v84;
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v198, "(.*ARI_TIMEOUT -.*)( SZ\\([0-9]*\\).*)", 0);
      *(void *)&long long v85 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v85 + 1) = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v193 = 0xAAAAAAAAAAAAAA00;
      v190[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
      long long v196 = v85;
      uint64_t v191 = 0;
      uint64_t v192 = 0;
      uint64_t v194 = 0;
      uint64_t v195 = 0;
      LOBYTE(v196) = 0;
      BYTE8(v196) = 0;
      uint64_t v197 = 0;
      memset(v190, 0, 41);
      unint64_t v209 = 0xAAAAAAAAAAAAAA00;
      *((void *)&v206[1] + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v212 = v85;
      uint64_t v207 = 0;
      uint64_t v208 = 0;
      uint64_t v210 = 0;
      uint64_t v211 = 0;
      LOBYTE(v212) = 0;
      BYTE8(v212) = 0;
      uint64_t v213 = 0;
      long long buf = 0u;
      v206[0] = 0u;
      std::string::size_type v86 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v87 = (std::sub_match<const char *> *)&__dst;
      }
      else {
        int v87 = (std::sub_match<const char *> *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v86 = __dst.__r_.__value_.__l.__size_;
      }
      *(_OWORD *)((char *)v206 + 9) = 0uLL;
      int v88 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v198, v87, (std::sub_match<const char *> *)((char *)v87 + v86), (std::vector<std::csub_match> *)&buf, 0);
      std::string::size_type v89 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFTypeRef v90 = &__dst;
      }
      else {
        CFTypeRef v90 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v89 = __dst.__r_.__value_.__l.__size_;
      }
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v190, (uint64_t)v90, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v90 + v89), (uint64_t *)&buf, 0);
      if ((void)buf)
      {
        *((void *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
      if (v88)
      {
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v190[0].__end_ - (char *)v190[0].__begin_) >> 3) <= 1) {
          uint64_t v91 = (uint64_t *)&v190[1];
        }
        else {
          uint64_t v91 = (uint64_t *)&v190[0].__begin_[1];
        }
        std::sub_match<std::__wrap_iter<char const*>>::str[abi:ne180100](&buf, v91);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = buf;
        __str.__r_.__value_.__r.__words[2] = *(void *)&v206[0];
        std::string::operator=(&__dst, &__str);
      }
      goto LABEL_246;
    }
  }
LABEL_252:
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v155 = &__dst;
  }
  else {
    uint64_t v155 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v156 = xpc_string_create((const char *)v155);
  if (!v156) {
    xpc_object_t v156 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "resetReason", v156);
  xpc_object_t v157 = xpc_null_create();
  xpc_release(v156);
  xpc_release(v157);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v158 = &__str;
  }
  else {
    xpc_object_t v158 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v159 = xpc_string_create((const char *)v158);
  if (!v159) {
    xpc_object_t v159 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "shortResetReason", v159);
  xpc_object_t v160 = xpc_null_create();
  xpc_release(v159);
  xpc_release(v160);
  xpc_object_t v161 = xpc_string_create((const char *)*MEMORY[0x1E4F4C4C0]);
  if (!v161) {
    xpc_object_t v161 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C540], v161);
  xpc_object_t v162 = xpc_null_create();
  xpc_release(v161);
  xpc_release(v162);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_266;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_266;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_266:
  xpc_object_t v163 = xpc_string_create("metricsCCBasebandResetInfo");
  if (!v163) {
    xpc_object_t v163 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C3C8], v163);
  xpc_object_t v164 = xpc_null_create();
  xpc_release(v163);
  xpc_release(v164);
  xpc_object_t v165 = xpc_string_create("Reset");
  if (!v165) {
    xpc_object_t v165 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C548], v165);
  xpc_object_t v166 = xpc_null_create();
  xpc_release(v165);
  xpc_release(v166);
  if (v10)
  {
    xpc_retain(v10);
    xpc_object_t v167 = v10;
  }
  else
  {
    xpc_object_t v167 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4CB40], v167);
  xpc_object_t v168 = xpc_null_create();
  xpc_release(v167);
  xpc_release(v168);
  xpc_object_t v169 = xpc_dictionary_create(0, 0, 0);
  if (v169 || (xpc_object_t v169 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v169) == v5)
    {
      xpc_retain(v169);
      xpc_object_t v170 = v169;
    }
    else
    {
      xpc_object_t v170 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v170 = xpc_null_create();
    xpc_object_t v169 = 0;
  }
  xpc_release(v169);
  xpc_object_t v171 = xpc_string_create((const char *)*MEMORY[0x1E4F4C158]);
  if (!v171) {
    xpc_object_t v171 = xpc_null_create();
  }
  xpc_dictionary_set_value(v170, (const char *)*MEMORY[0x1E4F4C190], v171);
  xpc_object_t v172 = xpc_null_create();
  xpc_release(v171);
  xpc_release(v172);
  if (v8)
  {
    xpc_retain(v8);
    xpc_object_t v173 = v8;
  }
  else
  {
    xpc_object_t v173 = xpc_null_create();
  }
  xpc_dictionary_set_value(v170, (const char *)*MEMORY[0x1E4F4C188], v173);
  xpc_object_t v174 = xpc_null_create();
  xpc_release(v173);
  xpc_release(v174);
  int v175 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v176 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v176 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v177 = v176;
  if (v176 >= 0x17)
  {
    uint64_t v179 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v176 | 7) != 0x17) {
      uint64_t v179 = v176 | 7;
    }
    uint64_t v180 = v179 + 1;
    p_long long buf = (long long *)operator new(v179 + 1);
    *((void *)&buf + 1) = v177;
    *(void *)&v206[0] = v180 | 0x8000000000000000;
    *(void *)&long long buf = p_buf;
LABEL_294:
    memmove(p_buf, v175, v177);
    *((unsigned char *)p_buf + v177) = 0;
    xpc_object_t object = v170;
    if (v170) {
      goto LABEL_290;
    }
LABEL_295:
    xpc_object_t object = xpc_null_create();
    goto LABEL_296;
  }
  BYTE7(v206[0]) = v176;
  p_long long buf = &buf;
  if (v176) {
    goto LABEL_294;
  }
  LOBYTE(buf) = 0;
  xpc_object_t object = v170;
  if (!v170) {
    goto LABEL_295;
  }
LABEL_290:
  xpc_retain(v170);
LABEL_296:
  uint64_t v181 = 0;
  Service::runCommand(a1, (uint64_t)&buf, &object, &v181);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SBYTE7(v206[0]) < 0) {
    operator delete((void *)buf);
  }
  xpc_release(v170);
  if (SHIBYTE(__s1[2]) < 0) {
    operator delete((void *)__s1[0]);
  }
  xpc_release(v10);
  xpc_release(v8);
}

void sub_1C57E20B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::locale a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (__p) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a37);
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  xpc_release(v64);
  xpc_release(v63);
  _Unwind_Resume(a1);
}

void BootModule::reportStatisticsHardResetTime_sync(BootModule *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting Stats of hard reset time", buf, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  time_t v5 = time(0);
  xpc_object_t v6 = xpc_int64_create(v5);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4CF78], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  int64_t v8 = (*((_DWORD *)this + 112) + 1);
  *((_DWORD *)this + 112) = v8;
  xpc_object_t v9 = xpc_int64_create(v8);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4CD70], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t object = v4;
  *(void *)long long buf = operator new(0x20uLL);
  long long v14 = xmmword_1C599E820;
  strcpy(*(char **)buf, "CommandUpdateBBBootStats");
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v11 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v11);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v14) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v4);
}

void sub_1C57E270C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void BootModule::reportStatisticsSoftReset_sync(BootModule *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting Stats of soft reset time", buf, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  int64_t v5 = (*((_DWORD *)this + 113) + 1);
  *((_DWORD *)this + 113) = v5;
  xpc_object_t v6 = xpc_int64_create(v5);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4CD78], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t object = v4;
  *(void *)long long buf = operator new(0x20uLL);
  long long v11 = xmmword_1C599E820;
  strcpy(*(char **)buf, "CommandUpdateBBBootStats");
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int64_t v8 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v8);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v11) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v4);
}

void sub_1C57E2948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v16);
  _Unwind_Resume(a1);
}

uint64_t _ZZZZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEEUb_EUb0_EN3__0D1Ev(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 144);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 136);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_15:
    operator delete(*(void **)(a1 + 24));
    xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v4) {
      return a1;
    }
    goto LABEL_10;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_15;
  }
LABEL_9:
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
LABEL_10:
  }
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void *__copy_helper_block_e8_40c15_ZTSK9ResetInfo152c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE160c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1, uint64_t a2)
{
  ResetInfo::ResetInfo((std::string *)(a1 + 40), (long long *)(a2 + 40));
  uint64_t result = *(void **)(a2 + 152);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  uint64_t v6 = *(void *)(a2 + 160);
  uint64_t v5 = *(void *)(a2 + 168);
  *(void *)(a1 + 152) = result;
  *(void *)(a1 + 160) = v6;
  *(void *)(a1 + 168) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSK9ResetInfo152c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE160c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 152);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
        goto LABEL_8;
      }
LABEL_12:
      operator delete(*(void **)(a1 + 64));
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_12;
  }
LABEL_8:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
    return;
  }
LABEL_13:
  xpc_object_t v4 = *(void **)(a1 + 40);

  operator delete(v4);
}

void *__copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c15_ZTSK9ResetInfo168c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  ResetInfo::ResetInfo((std::string *)(a1 + 56), (long long *)(a2 + 56));
  uint64_t result = *(void **)(a2 + 168);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 168) = result;
  return result;
}

void sub_1C57E2BC0(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c15_ZTSK9ResetInfo168c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 168);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 167) < 0)
  {
    operator delete(*(void **)(a1 + 144));
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 103) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 104));
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    operator delete(*(void **)(a1 + 56));
    xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
    goto LABEL_8;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_14;
  }
LABEL_7:
  xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3) {
    return;
  }
LABEL_8:

  std::__shared_weak_count::__release_weak(v3);
}

void ___ZN10BootModule4initEv_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  xpc_object_t v3 = *(NSObject **)(v2 + 88);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  if (capabilities::ipc::supportsPCI((capabilities::ipc *)v4))
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule4initEv_block_invoke_9;
    aBlock[3] = &__block_descriptor_tmp_15_1;
    uint64_t v6 = a1[5];
    uint64_t v5 = (std::__shared_weak_count *)a1[6];
    void aBlock[4] = v2;
    void aBlock[5] = v6;
    xpc_object_t v10 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v7 = _Block_copy(aBlock);
    int64_t v8 = *(const void **)(v2 + 264);
    *(void *)(v2 + 264) = v7;
    if (v8) {
      _Block_release(v8);
    }
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void ___ZN10BootModule4initEv_block_invoke_9(void *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v9 = a1[4];
    xpc_object_t v10 = std::__shared_weak_count::lock(v5);
    xpc_object_t v18 = v10;
    if (v10)
    {
      long long v11 = v10;
      if (!a1[5]) {
        goto LABEL_12;
      }
      memset(&v16, 170, sizeof(v16));
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v16 = *(std::string *)a3;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZN10BootModule4initEv_block_invoke_2;
      v12[3] = &__block_descriptor_tmp_13_3;
      v12[4] = v9;
      int v14 = a2;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v16;
      }
      int v15 = a4;
      ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v9 + 120), (uint64_t)v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_12:
          if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            return;
          }
LABEL_16:
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
          return;
        }
      }
      else if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(v16.__r_.__value_.__l.__data_);
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_16;
      }
    }
  }
}

void sub_1C57E2F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v24 - 64);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v24 - 64);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if (!*(_DWORD *)(a1 + 64))
  {
    int v5 = *(char *)(a1 + 63);
    if (v5 >= 0) {
      size_t v6 = *(unsigned __int8 *)(a1 + 63);
    }
    else {
      size_t v6 = *(void *)(a1 + 48);
    }
    unint64_t v7 = v6 + 11;
    memset(&v49, 170, sizeof(v49));
    if (v6 + 11 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    int64_t v8 = (void **)(a1 + 40);
    if (v7 > 0x16)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      xpc_object_t v12 = (char *)operator new(v10 + 1);
      v49.__r_.__value_.__l.__size_ = v6 + 11;
      v49.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
      xpc_object_t v13 = v12 + 11;
      *(_DWORD *)(v12 + 7) = 540693582;
      *(void *)xpc_object_t v12 = *(void *)"PCI-EVENT: ";
      if (v5 >= 0) {
        int v14 = (void *)(a1 + 40);
      }
      else {
        int v14 = *v8;
      }
      memmove(v12 + 11, v14, v6);
      v13[v6] = 0;
      if (v6 == 27)
      {
        BOOL v15 = *v14 == 0x67676972742D5041 && v14[1] == 0x7361622064657265;
        BOOL v16 = v15 && v14[2] == 0x657220646E616265;
        if (v16 && *(void *)((char *)v14 + 19) == 0x746573657220646ELL) {
          std::string::append(&v49, " [likely caused by bbctl reset]", 0x1FuLL);
        }
      }
    }
    else
    {
      *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = 0uLL;
      *((unsigned char *)&v49.__r_.__value_.__s + 23) = v6 + 11;
      *(_DWORD *)((char *)v49.__r_.__value_.__r.__words + 7) = 540693582;
      v49.__r_.__value_.__r.__words[0] = *(void *)"PCI-EVENT: ";
      if (v6)
      {
        if (v5 >= 0) {
          uint64_t v9 = (void *)(a1 + 40);
        }
        else {
          uint64_t v9 = *v8;
        }
        memmove((char *)&v49.__r_.__value_.__r.__words[1] + 3, v9, v6);
      }
      *((unsigned char *)&v49.__r_.__value_.__r.__words[1] + v6 + 3) = 0;
    }
    *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v56 = v18;
    long long v57 = v18;
    long long v54 = v18;
    long long v55 = v18;
    long long v52 = v18;
    long long v53 = v18;
    *(_OWORD *)long long buf = v18;
    xpc_object_t v19 = (const void *)*MEMORY[0x1E4F4C6E8];
    size_t v20 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (v20 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v21 = v20;
    if (v20 >= 0x17)
    {
      uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v23 = v20 | 7;
      }
      uint64_t v24 = v23 + 1;
      xpc_object_t v22 = operator new(v23 + 1);
      *(void *)&__dst[8] = v21;
      *(void *)&__dst[16] = v24 | 0x8000000000000000;
      *(void *)std::string __dst = v22;
    }
    else
    {
      __dst[23] = v20;
      xpc_object_t v22 = __dst;
      if (!v20)
      {
LABEL_43:
        v22[v21] = 0;
        xpc_object_t v25 = (const void *)*MEMORY[0x1E4F4D1A0];
        size_t v26 = strlen((const char *)*MEMORY[0x1E4F4D1A0]);
        if (v26 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v27 = v26;
        if (v26 >= 0x17)
        {
          uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17) {
            uint64_t v29 = v26 | 7;
          }
          uint64_t v30 = v29 + 1;
          xpc_object_t v28 = operator new(v29 + 1);
          *((void *)&v47 + 1) = v27;
          unint64_t v48 = v30 | 0x8000000000000000;
          *(void *)&long long v47 = v28;
        }
        else
        {
          HIBYTE(v48) = v26;
          xpc_object_t v28 = &v47;
          if (!v26)
          {
LABEL_51:
            v28[v27] = 0;
            Timestamp::Timestamp((Timestamp *)v43);
            Timestamp::asString((uint64_t)v43, 0, 9, __p);
            char v42 = 0;
            LOBYTE(v41) = 0;
            ResetInfo::ResetInfo((std::string *)buf, (long long *)__dst, &v47, (long long *)&v49, (uint64_t)__p, 7, &v41);
            if (v46 < 0)
            {
              operator delete(__p[0]);
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v43, v44);
              if ((SHIBYTE(v48) & 0x80000000) == 0)
              {
LABEL_53:
                if ((__dst[23] & 0x80000000) == 0) {
                  goto LABEL_54;
                }
                goto LABEL_58;
              }
            }
            else
            {
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v43, v44);
              if ((SHIBYTE(v48) & 0x80000000) == 0) {
                goto LABEL_53;
              }
            }
            operator delete((void *)v47);
            if ((__dst[23] & 0x80000000) == 0)
            {
LABEL_54:
              xpc_object_t v31 = v2[11];
              if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                goto LABEL_59;
              }
LABEL_78:
              if (*(char *)(a1 + 63) < 0) {
                int64_t v8 = (void **)*v8;
              }
              int v32 = *(_DWORD *)(a1 + 68);
              *(_DWORD *)std::string __dst = 136315394;
              *(void *)&__dst[4] = v8;
              *(_WORD *)&__dst[12] = 1024;
              *(_DWORD *)&__dst[14] = v32;
              _os_log_error_impl(&dword_1C5767000, v31, OS_LOG_TYPE_ERROR, "PCI event: %s, sleeping for %u ms, then requesting Baseband reset", __dst, 0x12u);
LABEL_59:
              usleep(1000 * *(_DWORD *)(a1 + 68));
              ResetInfo::ResetInfo(&v34, (long long *)buf);
              xpc_object_t v33 = 0;
              BootModule::requestReset(v2, (long long *)&v34, &v33);
              if (v40 < 0)
              {
                operator delete(v39);
                if ((v38 & 0x80000000) == 0)
                {
LABEL_61:
                  if ((v36 & 0x80000000) == 0) {
                    goto LABEL_62;
                  }
                  goto LABEL_71;
                }
              }
              else if ((v38 & 0x80000000) == 0)
              {
                goto LABEL_61;
              }
              operator delete(v37);
              if ((v36 & 0x80000000) == 0)
              {
LABEL_62:
                if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_63;
                }
                goto LABEL_72;
              }
LABEL_71:
              operator delete(v35);
              if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_63:
                if ((SHIBYTE(v57) & 0x80000000) == 0) {
                  goto LABEL_64;
                }
                goto LABEL_73;
              }
LABEL_72:
              operator delete(v34.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v57) & 0x80000000) == 0)
              {
LABEL_64:
                if ((SBYTE7(v55) & 0x80000000) == 0) {
                  goto LABEL_65;
                }
                goto LABEL_74;
              }
LABEL_73:
              operator delete(*((void **)&v56 + 1));
              if ((SBYTE7(v55) & 0x80000000) == 0)
              {
LABEL_65:
                if ((SHIBYTE(v53) & 0x80000000) == 0) {
                  goto LABEL_66;
                }
                goto LABEL_75;
              }
LABEL_74:
              operator delete((void *)v54);
              if ((SHIBYTE(v53) & 0x80000000) == 0)
              {
LABEL_66:
                if ((SBYTE7(v52) & 0x80000000) == 0) {
                  goto LABEL_67;
                }
                goto LABEL_76;
              }
LABEL_75:
              operator delete(*((void **)&v52 + 1));
              if ((SBYTE7(v52) & 0x80000000) == 0)
              {
LABEL_67:
                if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  return;
                }
                goto LABEL_77;
              }
LABEL_76:
              operator delete(*(void **)buf);
              if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                return;
              }
LABEL_77:
              operator delete(v49.__r_.__value_.__l.__data_);
              return;
            }
LABEL_58:
            operator delete(*(void **)__dst);
            xpc_object_t v31 = v2[11];
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
              goto LABEL_59;
            }
            goto LABEL_78;
          }
        }
        memmove(v28, v25, v27);
        goto LABEL_51;
      }
    }
    memmove(v22, v19, v21);
    goto LABEL_43;
  }
  xpc_object_t v3 = v2[11];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v4 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      BOOL v4 = (void *)*v4;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I PCI event: %s", buf, 0xCu);
  }
}

void sub_1C57E3558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if ((a47 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}